"use strict";(self["webpackChunkvue_boilerplate"]=self["webpackChunkvue_boilerplate"]||[]).push([[973],{57973:function(e,n,t){t.r(n),t.d(n,{Web3WalletProvider:function(){return l}});var o=t(64234),i=t(70520),r=t(67549),s=t(15941),c=function(e,n,t,o){function i(e){return e instanceof t?e:new t((function(n){n(e)}))}return new(t||(t=Promise))((function(t,r){function s(e){try{l(o.next(e))}catch(n){r(n)}}function c(e){try{l(o["throw"](e))}catch(n){r(n)}}function l(e){e.done?t(e.value):i(e.value).then(s,c)}l((o=o.apply(e,n||[])).next())}))};class l{constructor(e,n,t){this.client=e,this.walletOptions=n,this.safeConnectOptions=t,this.connections={}}saveConnections(){let e={};for(let n in this.connections){let t=this.connections[n];e[n]={address:t.address,chainId:t.chainId,providerType:t.providerType,blockchain:t.blockchain}}localStorage.setItem(l.LOCAL_STORAGE_KEY,JSON.stringify(e))}emitSavedConnection(e){return Object.keys(this.connections).length&&e?(this.client.eventSender("connected-wallet",this.connections[e.toLocaleLowerCase()]),this.connections[e.toLocaleLowerCase()]):null}emitNetworkChange(e){if(e)return this.client.eventSender("network-change",e),e}deleteConnections(){this.connections={},localStorage.removeItem(l.LOCAL_STORAGE_KEY),localStorage.removeItem("walletconnect"),sessionStorage.removeItem("CURRENT_USER")}loadConnections(){return c(this,void 0,void 0,(function*(){let e=localStorage.getItem(l.LOCAL_STORAGE_KEY);if(!e)return;let n=JSON.parse(e);if(n)for(let o in n){let e=n[o];try{yield this.connectWith(e.providerType,!0)}catch(t){s.log("Wallet couldn't connect: "+t.message),delete n[o],this.saveConnections(),this.emitSavedConnection(o)}}}))}connectWith(e,n=!1){return c(this,void 0,void 0,(function*(){if(!e)throw new Error("Please provide a Wallet type to connect with.");if(this[e]){const t=yield this[e](n);return(0,r.kg)(2,"address",t),this.saveConnections(),this.emitSavedConnection(t),t}throw new Error("Wallet type not found")}))}signMessage(e,n){return c(this,void 0,void 0,(function*(){let t=this.getWalletProvider(e),o=t.getSigner(e);return yield o.signMessage(n)}))}getWalletProvider(e){var n;if(e=e.toLowerCase(),!(null===(n=this.connections[e])||void 0===n?void 0:n.provider))throw new Error("Wallet provider not found for address");return this.connections[e].provider}getConnectedWalletData(){return Object.values(this.connections)}registerNewWalletAddress(e,n,t,i,r="evm"){return this.connections[e.toLowerCase()]={address:e,chainId:n,providerType:t,provider:i,blockchain:r,ethers:o},e}registerProvider(e,n){return c(this,void 0,void 0,(function*(){const t=yield e.listAccounts(),o=(yield e.detectNetwork()).chainId;if(0===t.length)throw new Error("No accounts found via wallet-connect.");let i=t[0];return this.registerNewWalletAddress(i,o,n,e),e.provider.on("accountsChanged",(t=>{t&&0!==t.length?i!==t[0]&&(delete this.connections[i.toLowerCase()],i=t[0],this.registerNewWalletAddress(i,o,n,e),this.saveConnections(),this.emitSavedConnection(i),this.client.getTokenStore().clearCachedTokens(),this.client.enrichTokenLookupDataOnChainTokens()):this.client.disconnectWallet()})),e.provider.on("chainChanged",(o=>{this.registerNewWalletAddress(t[0],o,n,e),this.saveConnections(),this.emitNetworkChange(o)})),e.provider.on("disconnect",(e=>{(null===e||void 0===e?void 0:e.message)&&e.message.indexOf("MetaMask: Disconnected from chain")>-1||this.client.disconnectWallet()})),t[0]}))}MetaMask(e){return c(this,void 0,void 0,(function*(){if((0,r.kg)(2,"connect MetaMask"),"undefined"!==typeof window.ethereum){yield window.ethereum.enable();const e=new i.Q(window.ethereum,"any");return this.registerProvider(e,"MetaMask")}throw new Error("MetaMask is not available. Please check the extension is supported and active.")}))}WalletConnect(e){return c(this,void 0,void 0,(function*(){(0,r.kg)(2,"connect Wallet Connect");const n=yield Promise.all([t.e(350),t.e(123)]).then(t.bind(t,54123)),o=yield n.getWalletConnectProviderInstance(e);return new Promise(((n,t)=>{e&&o.connector.on("display_uri",((e,n)=>{t(new Error("Connection expired"))})),o.enable().then((()=>{const e=new i.Q(o,"any");n(this.registerProvider(e,"WalletConnect"))})).catch((e=>t(e)))}))}))}WalletConnectV2(e){var n,o,l,a,d,h;return c(this,void 0,void 0,(function*(){(0,r.kg)(2,"connect Wallet Connect V2");const u=yield t.e(350).then(t.bind(t,67350)),v=yield u.getWalletConnectV2ProviderInstance();let w;if(v.on("display_uri",(e=>c(this,void 0,void 0,(function*(){s.log("EVENT","QR Code Modal open"),w=(yield t.e(581).then(t.t.bind(t,83581,23))).default,w.open(e,(()=>{this.client.getUi().showError("User closed modal")}))})))),v.on("session_delete",(({id:e,topic:n})=>{s.log("WC V2 EVENT","session_deleted"),this.client.disconnectWallet()})),!e){let e;yield v.connect({namespaces:{eip155:{methods:["eth_sendTransaction","eth_signTransaction","eth_sign","personal_sign","eth_signTypedData"],chains:null!==(l=null===(o=null===(n=this.walletOptions)||void 0===n?void 0:n.walletConnectV2)||void 0===o?void 0:o.chains)&&void 0!==l?l:u.WC_V2_DEFAULT_CHAINS,events:["chainChanged","accountsChanged"],rpcMap:null!==(h=null===(d=null===(a=this.walletOptions)||void 0===a?void 0:a.walletConnectV2)||void 0===d?void 0:d.rpcMap)&&void 0!==h?h:u.WC_DEFAULT_RPC_MAP}},pairingTopic:null===e||void 0===e?void 0:e.topic}),w.close()}return new Promise(((e,n)=>{v.enable().then((()=>{const n=new i.Q(v,"any");e(this.registerProvider(n,"WalletConnectV2"))})).catch((e=>{n(e)}))}))}))}Torus(e){return c(this,void 0,void 0,(function*(){const e=yield t.e(147).then(t.bind(t,69147)),n=yield e.getTorusProviderInstance();yield n.init(),yield n.login();const o=new i.Q(n.provider,"any");return this.registerProvider(o,"Torus")}))}Phantom(e){return c(this,void 0,void 0,(function*(){if((0,r.kg)(2,"connect Phantom"),"undefined"!==typeof window.solana){const e=yield window.solana.connect(),n=e.publicKey.toBase58();return this.registerNewWalletAddress(n,"mainnet-beta","phantom",window.solana,"solana")}throw new Error("Phantom is not available. Please check the extension is supported and active.")}))}SafeConnect(e){return c(this,void 0,void 0,(function*(){(0,r.kg)(2,"connect SafeConnect");const e=yield this.getSafeConnectProvider(),n=yield e.initSafeConnect();return this.registerNewWalletAddress(n,1,"SafeConnect",e),n}))}Flow(e){return c(this,void 0,void 0,(function*(){const e=yield t.e(889).then(t.bind(t,43889)),n=e.getFlowProvider();yield n.currentUser.authenticate();let o=yield n.currentUser.snapshot();if(!o.addr)throw new Error("Failed to connect Flow wallet");return this.registerNewWalletAddress(o.addr,1,"flow",n),o.addr}))}safeConnectAvailable(){return void 0!==this.safeConnectOptions}getSafeConnectProvider(){return c(this,void 0,void 0,(function*(){const{SafeConnectProvider:e}=yield Promise.resolve().then(t.bind(t,18581));return new e(this.client.getUi(),this.safeConnectOptions)}))}}l.LOCAL_STORAGE_KEY="tn-wallet-connections",n["default"]=l}}]);
//# sourceMappingURL=973.a001d29f.js.map