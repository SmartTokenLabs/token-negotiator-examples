/*! For license information please see 681.be293c30.js.LICENSE.txt */
(self.webpackChunktoken_outlet_website = self.webpackChunktoken_outlet_website || []).push([ [ 681 ], {
  4681: (e, t, r) => {
    "use strict";
    r.r(t), r.d(t, {
      getTorusProviderInstance: () => a
    });
    var n = r(8712);
    var i = r.n(n);
    var o = function(e, t, r, n) {
      return new (r || (r = Promise))((function(i, o) {
        function s(e) {
          try {
            c(n.next(e));
          } catch (t) {
            o(t);
          }
        }
        function a(e) {
          try {
            c(n.throw(e));
          } catch (t) {
            o(t);
          }
        }
        function c(e) {
          e.done ? i(e.value) : function(e) {
            return e instanceof r ? e : new r((function(t) {
              t(e);
            }));
          }(e.value).then(s, a);
        }
        c((n = n.apply(e, t || [])).next());
      }));
    };
    var s = function(e, t) {
      var r, n, i, o, s = {
        label: 0,
        sent: function() {
          if (1 & i[0]) throw i[1];
          return i[1];
        },
        trys: [],
        ops: []
      };
      return o = {
        next: a(0),
        throw: a(1),
        return: a(2)
      }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
        return this;
      }), o;
      function a(a) {
        return function(c) {
          return function(a) {
            if (r) throw new TypeError("Generator is already executing.");
            for (;o && (o = 0, a[0] && (s = 0)), s; ) try {
              if (r = 1, n && (i = 2 & a[0] ? n.return : a[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, a[1])).done) return i;
              switch (n = 0, i && (a = [ 2 & a[0], i.value ]), a[0]) {
               case 0:
               case 1:
                i = a;
                break;

               case 4:
                return s.label++, {
                  value: a[1],
                  done: !1
                };

               case 5:
                s.label++, n = a[1], a = [ 0 ];
                continue;

               case 7:
                a = s.ops.pop(), s.trys.pop();
                continue;

               default:
                if (!(i = s.trys, (i = i.length > 0 && i[i.length - 1]) || 6 !== a[0] && 2 !== a[0])) {
                  s = 0;
                  continue;
                }
                if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
                  s.label = a[1];
                  break;
                }
                if (6 === a[0] && s.label < i[1]) {
                  s.label = i[1], i = a;
                  break;
                }
                if (i && s.label < i[2]) {
                  s.label = i[2], s.ops.push(a);
                  break;
                }
                i[2] && s.ops.pop(), s.trys.pop();
                continue;
              }
              a = t.call(e, s);
            } catch (c) {
              a = [ 6, c ], n = 0;
            } finally {
              r = i = 0;
            }
            if (5 & a[0]) throw a[1];
            return {
              value: a[0] ? a[1] : void 0,
              done: !0
            };
          }([ a, c ]);
        };
      }
    };
    var a = function() {
      return o(void 0, void 0, void 0, (function() {
        return s(this, (function(e) {
          return [ 2, new (i()) ];
        }));
      }));
    };
  },
  8712: (e, t, r) => {
    var n = r(5108);
    !function(t, r) {
      e.exports = r();
    }(self, (() => (() => {
      var e = {
        8349: (e, t, r) => {
          "use strict";
          r.d(t, {
            RQ: () => G,
            _R: () => p
          });
          var n = r(3587), i = r(711);
          const o = "abi/5.6.4", s = new i.Yd(o), a = {};
          let c = {
            calldata: !0,
            memory: !0,
            storage: !0
          }, f = {
            calldata: !0,
            memory: !0
          };
          function u(e, t) {
            if ("bytes" === e || "string" === e) {
              if (c[t]) return !0;
            } else if ("address" === e) {
              if ("payable" === t) return !0;
            } else if ((e.indexOf("[") >= 0 || "tuple" === e) && f[t]) return !0;
            return (c[t] || "payable" === t) && s.throwArgumentError("invalid modifier", "name", t), !1;
          }
          function h(e, t) {
            for (let r in t) (0, n.zG)(e, r, t[r]);
          }
          const d = Object.freeze({
            sighash: "sighash",
            minimal: "minimal",
            full: "full",
            json: "json"
          }), l = new RegExp(/^(.*)\[([0-9]*)\]$/);
          class p {
            constructor(e, t) {
              e !== a && s.throwError("use fromString", i.Yd.errors.UNSUPPORTED_OPERATION, {
                operation: "new ParamType()"
              }), h(this, t);
              let r = this.type.match(l);
              h(this, r ? {
                arrayLength: parseInt(r[2] || "-1"),
                arrayChildren: p.fromObject({
                  type: r[1],
                  components: this.components
                }),
                baseType: "array"
              } : {
                arrayLength: null,
                arrayChildren: null,
                baseType: null != this.components ? "tuple" : this.type
              }), this._isParamType = !0, Object.freeze(this);
            }
            format(e) {
              if (e || (e = d.sighash), d[e] || s.throwArgumentError("invalid format type", "format", e), e === d.json) {
                let t = {
                  type: "tuple" === this.baseType ? "tuple" : this.type,
                  name: this.name || void 0
                };
                return "boolean" == typeof this.indexed && (t.indexed = this.indexed), this.components && (t.components = this.components.map((t => JSON.parse(t.format(e))))), 
                JSON.stringify(t);
              }
              let t = "";
              return "array" === this.baseType ? (t += this.arrayChildren.format(e), t += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]") : "tuple" === this.baseType ? (e !== d.sighash && (t += this.type), 
              t += "(" + this.components.map((t => t.format(e))).join(e === d.full ? ", " : ",") + ")") : t += this.type, e !== d.sighash && (!0 === this.indexed && (t += " indexed"), 
              e === d.full && this.name && (t += " " + this.name)), t;
            }
            static from(e, t) {
              return "string" == typeof e ? p.fromString(e, t) : p.fromObject(e);
            }
            static fromObject(e) {
              return p.isParamType(e) ? e : new p(a, {
                name: e.name || null,
                type: b(e.type),
                indexed: null == e.indexed ? null : !!e.indexed,
                components: e.components ? e.components.map(p.fromObject) : null
              });
            }
            static fromString(e, t) {
              return r = function(e, t) {
                let r = e;
                function n(t) {
                  s.throwArgumentError(`unexpected character at position ${t}`, "param", e);
                }
                function i(e) {
                  let r = {
                    type: "",
                    name: "",
                    parent: e,
                    state: {
                      allowType: !0
                    }
                  };
                  return t && (r.indexed = !1), r;
                }
                e = e.replace(/\s/g, " ");
                let o = {
                  type: "",
                  name: "",
                  state: {
                    allowType: !0
                  }
                }, a = o;
                for (let s = 0; s < e.length; s++) {
                  let r = e[s];
                  switch (r) {
                   case "(":
                    a.state.allowType && "" === a.type ? a.type = "tuple" : a.state.allowParams || n(s), a.state.allowType = !1, a.type = b(a.type), 
                    a.components = [ i(a) ], a = a.components[0];
                    break;

                   case ")":
                    delete a.state, "indexed" === a.name && (t || n(s), a.indexed = !0, a.name = ""), u(a.type, a.name) && (a.name = ""), a.type = b(a.type);
                    let e = a;
                    a = a.parent, a || n(s), delete e.parent, a.state.allowParams = !1, a.state.allowName = !0, a.state.allowArray = !0;
                    break;

                   case ",":
                    delete a.state, "indexed" === a.name && (t || n(s), a.indexed = !0, a.name = ""), u(a.type, a.name) && (a.name = ""), a.type = b(a.type);
                    let o = i(a.parent);
                    a.parent.components.push(o), delete a.parent, a = o;
                    break;

                   case " ":
                    a.state.allowType && "" !== a.type && (a.type = b(a.type), delete a.state.allowType, a.state.allowName = !0, a.state.allowParams = !0), 
                    a.state.allowName && "" !== a.name && ("indexed" === a.name ? (t || n(s), a.indexed && n(s), a.indexed = !0, a.name = "") : u(a.type, a.name) ? a.name = "" : a.state.allowName = !1);
                    break;

                   case "[":
                    a.state.allowArray || n(s), a.type += r, a.state.allowArray = !1, a.state.allowName = !1, a.state.readArray = !0;
                    break;

                   case "]":
                    a.state.readArray || n(s), a.type += r, a.state.readArray = !1, a.state.allowArray = !0, a.state.allowName = !0;
                    break;

                   default:
                    a.state.allowType ? (a.type += r, a.state.allowParams = !0, a.state.allowArray = !0) : a.state.allowName ? (a.name += r, 
                    delete a.state.allowArray) : a.state.readArray ? a.type += r : n(s);
                  }
                }
                return a.parent && s.throwArgumentError("unexpected eof", "param", e), delete o.state, "indexed" === a.name ? (t || n(r.length - 7), 
                a.indexed && n(r.length - 7), a.indexed = !0, a.name = "") : u(a.type, a.name) && (a.name = ""), o.type = b(o.type), o;
              }(e, !!t), p.fromObject({
                name: r.name,
                type: r.type,
                indexed: r.indexed,
                components: r.components
              });
              var r;
            }
            static isParamType(e) {
              return !(null == e || !e._isParamType);
            }
          }
          function b(e) {
            return e.match(/^uint($|[^1-9])/) ? e = "uint256" + e.substring(4) : e.match(/^int($|[^1-9])/) && (e = "int256" + e.substring(3)), 
            e;
          }
          var y = r(3286), g = r(5154);
          const m = new i.Yd(o);
          class v {
            constructor(e, t, r, n) {
              this.name = e, this.type = t, this.localName = r, this.dynamic = n;
            }
            _throwError(e, t) {
              m.throwArgumentError(e, this.localName, t);
            }
          }
          class w {
            constructor(e) {
              (0, n.zG)(this, "wordSize", e || 32), this._data = [], this._dataLength = 0, this._padding = new Uint8Array(e);
            }
            get data() {
              return (0, y.xs)(this._data);
            }
            get length() {
              return this._dataLength;
            }
            _writeData(e) {
              return this._data.push(e), this._dataLength += e.length, e.length;
            }
            appendWriter(e) {
              return this._writeData((0, y.zo)(e._data));
            }
            writeBytes(e) {
              let t = (0, y.lE)(e);
              const r = t.length % this.wordSize;
              return r && (t = (0, y.zo)([ t, this._padding.slice(r) ])), this._writeData(t);
            }
            _getValue(e) {
              let t = (0, y.lE)(g.O$.from(e));
              return t.length > this.wordSize && m.throwError("value out-of-bounds", i.Yd.errors.BUFFER_OVERRUN, {
                length: this.wordSize,
                offset: t.length
              }), t.length % this.wordSize && (t = (0, y.zo)([ this._padding.slice(t.length % this.wordSize), t ])), t;
            }
            writeValue(e) {
              return this._writeData(this._getValue(e));
            }
            writeUpdatableValue() {
              const e = this._data.length;
              return this._data.push(this._padding), this._dataLength += this.wordSize, t => {
                this._data[e] = this._getValue(t);
              };
            }
          }
          class _ {
            constructor(e, t, r, i) {
              (0, n.zG)(this, "_data", (0, y.lE)(e)), (0, n.zG)(this, "wordSize", t || 32), (0, n.zG)(this, "_coerceFunc", r), (0, n.zG)(this, "allowLoose", i), 
              this._offset = 0;
            }
            get data() {
              return (0, y.Dv)(this._data);
            }
            get consumed() {
              return this._offset;
            }
            static coerce(e, t) {
              let r = e.match("^u?int([0-9]+)$");
              return r && parseInt(r[1]) <= 48 && (t = t.toNumber()), t;
            }
            coerce(e, t) {
              return this._coerceFunc ? this._coerceFunc(e, t) : _.coerce(e, t);
            }
            _peekBytes(e, t, r) {
              let n = Math.ceil(t / this.wordSize) * this.wordSize;
              return this._offset + n > this._data.length && (this.allowLoose && r && this._offset + t <= this._data.length ? n = t : m.throwError("data out-of-bounds", i.Yd.errors.BUFFER_OVERRUN, {
                length: this._data.length,
                offset: this._offset + n
              })), this._data.slice(this._offset, this._offset + n);
            }
            subReader(e) {
              return new _(this._data.slice(this._offset + e), this.wordSize, this._coerceFunc, this.allowLoose);
            }
            readBytes(e, t) {
              let r = this._peekBytes(0, e, !!t);
              return this._offset += r.length, r.slice(0, e);
            }
            readValue() {
              return g.O$.from(this.readBytes(this.wordSize));
            }
          }
          var S = r(4594);
          class E extends v {
            constructor(e) {
              super("address", "address", e, !1);
            }
            defaultValue() {
              return "0x0000000000000000000000000000000000000000";
            }
            encode(e, t) {
              try {
                t = (0, S.Kn)(t);
              } catch (e) {
                this._throwError(e.message, t);
              }
              return e.writeValue(t);
            }
            decode(e) {
              return (0, S.Kn)((0, y.$m)(e.readValue().toHexString(), 20));
            }
          }
          class A extends v {
            constructor(e) {
              super(e.name, e.type, void 0, e.dynamic), this.coder = e;
            }
            defaultValue() {
              return this.coder.defaultValue();
            }
            encode(e, t) {
              return this.coder.encode(e, t);
            }
            decode(e) {
              return this.coder.decode(e);
            }
          }
          const x = new i.Yd(o);
          function k(e, t, r) {
            let n = null;
            if (Array.isArray(r)) n = r; else if (r && "object" == typeof r) {
              let e = {};
              n = t.map((t => {
                const n = t.localName;
                return n || x.throwError("cannot encode object for signature with missing names", i.Yd.errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder: t,
                  value: r
                }), e[n] && x.throwError("cannot encode object for signature with duplicate names", i.Yd.errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder: t,
                  value: r
                }), e[n] = !0, r[n];
              }));
            } else x.throwArgumentError("invalid tuple value", "tuple", r);
            t.length !== n.length && x.throwArgumentError("types/value length mismatch", "tuple", r);
            let o = new w(e.wordSize), s = new w(e.wordSize), a = [];
            t.forEach(((e, t) => {
              let r = n[t];
              if (e.dynamic) {
                let t = s.length;
                e.encode(s, r);
                let n = o.writeUpdatableValue();
                a.push((e => {
                  n(e + t);
                }));
              } else e.encode(o, r);
            })), a.forEach((e => {
              e(o.length);
            }));
            let c = e.appendWriter(o);
            return c += e.appendWriter(s), c;
          }
          function P(e, t) {
            let r = [], n = e.subReader(0);
            t.forEach((t => {
              let o = null;
              if (t.dynamic) {
                let r = e.readValue(), s = n.subReader(r.toNumber());
                try {
                  o = t.decode(s);
                } catch (e) {
                  if (e.code === i.Yd.errors.BUFFER_OVERRUN) throw e;
                  o = e, o.baseType = t.name, o.name = t.localName, o.type = t.type;
                }
              } else try {
                o = t.decode(e);
              } catch (e) {
                if (e.code === i.Yd.errors.BUFFER_OVERRUN) throw e;
                o = e, o.baseType = t.name, o.name = t.localName, o.type = t.type;
              }
              null != o && r.push(o);
            }));
            const o = t.reduce(((e, t) => {
              const r = t.localName;
              return r && (e[r] || (e[r] = 0), e[r]++), e;
            }), {});
            t.forEach(((e, t) => {
              let n = e.localName;
              if (!n || 1 !== o[n]) return;
              if ("length" === n && (n = "_length"), null != r[n]) return;
              const i = r[t];
              i instanceof Error ? Object.defineProperty(r, n, {
                enumerable: !0,
                get: () => {
                  throw i;
                }
              }) : r[n] = i;
            }));
            for (let i = 0; i < r.length; i++) {
              const e = r[i];
              e instanceof Error && Object.defineProperty(r, i, {
                enumerable: !0,
                get: () => {
                  throw e;
                }
              });
            }
            return Object.freeze(r);
          }
          class O extends v {
            constructor(e, t, r) {
              super("array", e.type + "[" + (t >= 0 ? t : "") + "]", r, -1 === t || e.dynamic), this.coder = e, this.length = t;
            }
            defaultValue() {
              const e = this.coder.defaultValue(), t = [];
              for (let r = 0; r < this.length; r++) t.push(e);
              return t;
            }
            encode(e, t) {
              Array.isArray(t) || this._throwError("expected array value", t);
              let r = this.length;
              -1 === r && (r = t.length, e.writeValue(t.length)), x.checkArgumentCount(t.length, r, "coder array" + (this.localName ? " " + this.localName : ""));
              let n = [];
              for (let i = 0; i < t.length; i++) n.push(this.coder);
              return k(e, n, t);
            }
            decode(e) {
              let t = this.length;
              -1 === t && (t = e.readValue().toNumber(), 32 * t > e._data.length && x.throwError("insufficient data length", i.Yd.errors.BUFFER_OVERRUN, {
                length: e._data.length,
                count: t
              }));
              let r = [];
              for (let n = 0; n < t; n++) r.push(new A(this.coder));
              return e.coerce(this.name, P(e, r));
            }
          }
          class M extends v {
            constructor(e) {
              super("bool", "bool", e, !1);
            }
            defaultValue() {
              return !1;
            }
            encode(e, t) {
              return e.writeValue(t ? 1 : 0);
            }
            decode(e) {
              return e.coerce(this.type, !e.readValue().isZero());
            }
          }
          class I extends v {
            constructor(e, t) {
              super(e, e, t, !0);
            }
            defaultValue() {
              return "0x";
            }
            encode(e, t) {
              t = (0, y.lE)(t);
              let r = e.writeValue(t.length);
              return r += e.writeBytes(t), r;
            }
            decode(e) {
              return e.readBytes(e.readValue().toNumber(), !0);
            }
          }
          class T extends I {
            constructor(e) {
              super("bytes", e);
            }
            decode(e) {
              return e.coerce(this.name, (0, y.Dv)(super.decode(e)));
            }
          }
          class R extends v {
            constructor(e, t) {
              let r = "bytes" + String(e);
              super(r, r, t, !1), this.size = e;
            }
            defaultValue() {
              return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
            }
            encode(e, t) {
              let r = (0, y.lE)(t);
              return r.length !== this.size && this._throwError("incorrect data length", t), e.writeBytes(r);
            }
            decode(e) {
              return e.coerce(this.name, (0, y.Dv)(e.readBytes(this.size)));
            }
          }
          class C extends v {
            constructor(e) {
              super("null", "", e, !1);
            }
            defaultValue() {
              return null;
            }
            encode(e, t) {
              return null != t && this._throwError("not null", t), e.writeBytes([]);
            }
            decode(e) {
              return e.readBytes(0), e.coerce(this.name, null);
            }
          }
          var N = r(1046);
          class j extends v {
            constructor(e, t, r) {
              const n = (t ? "int" : "uint") + 8 * e;
              super(n, n, r, !1), this.size = e, this.signed = t;
            }
            defaultValue() {
              return 0;
            }
            encode(e, t) {
              let r = g.O$.from(t), n = N.Bz.mask(8 * e.wordSize);
              if (this.signed) {
                let e = n.mask(8 * this.size - 1);
                (r.gt(e) || r.lt(e.add(N.fh).mul(N.tL))) && this._throwError("value out-of-bounds", t);
              } else (r.lt(N._Y) || r.gt(n.mask(8 * this.size))) && this._throwError("value out-of-bounds", t);
              return r = r.toTwos(8 * this.size).mask(8 * this.size), this.signed && (r = r.fromTwos(8 * this.size).toTwos(8 * e.wordSize)), 
              e.writeValue(r);
            }
            decode(e) {
              let t = e.readValue().mask(8 * this.size);
              return this.signed && (t = t.fromTwos(8 * this.size)), e.coerce(this.name, t);
            }
          }
          const B = new i.Yd("strings/5.6.1");
          var L, D;
          function U(e, t, r, n, i) {
            if (e === D.BAD_PREFIX || e === D.UNEXPECTED_CONTINUE) {
              let e = 0;
              for (let n = t + 1; n < r.length && r[n] >> 6 == 2; n++) e++;
              return e;
            }
            return e === D.OVERRUN ? r.length - t - 1 : 0;
          }
          !function(e) {
            e.current = "", e.NFC = "NFC", e.NFD = "NFD", e.NFKC = "NFKC", e.NFKD = "NFKD";
          }(L || (L = {})), function(e) {
            e.UNEXPECTED_CONTINUE = "unexpected continuation byte", e.BAD_PREFIX = "bad codepoint prefix", e.OVERRUN = "string overrun", 
            e.MISSING_CONTINUE = "missing continuation byte", e.OUT_OF_RANGE = "out of UTF-8 range", e.UTF16_SURROGATE = "UTF-16 surrogate", 
            e.OVERLONG = "overlong representation";
          }(D || (D = {}));
          const q = Object.freeze({
            error: function(e, t, r, n, i) {
              return B.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`, "bytes", r);
            },
            ignore: U,
            replace: function(e, t, r, n, i) {
              return e === D.OVERLONG ? (n.push(i), 0) : (n.push(65533), U(e, t, r));
            }
          });
          class F extends I {
            constructor(e) {
              super("string", e);
            }
            defaultValue() {
              return "";
            }
            encode(e, t) {
              return super.encode(e, function(e, t = L.current) {
                t != L.current && (B.checkNormalize(), e = e.normalize(t));
                let r = [];
                for (let n = 0; n < e.length; n++) {
                  const t = e.charCodeAt(n);
                  if (t < 128) r.push(t); else if (t < 2048) r.push(t >> 6 | 192), r.push(63 & t | 128); else if (55296 == (64512 & t)) {
                    n++;
                    const i = e.charCodeAt(n);
                    if (n >= e.length || 56320 != (64512 & i)) throw new Error("invalid utf-8 string");
                    const o = 65536 + ((1023 & t) << 10) + (1023 & i);
                    r.push(o >> 18 | 240), r.push(o >> 12 & 63 | 128), r.push(o >> 6 & 63 | 128), r.push(63 & o | 128);
                  } else r.push(t >> 12 | 224), r.push(t >> 6 & 63 | 128), r.push(63 & t | 128);
                }
                return (0, y.lE)(r);
              }(t));
            }
            decode(e) {
              return function(e, t) {
                return function(e, t) {
                  null == t && (t = q.error), e = (0, y.lE)(e);
                  const r = [];
                  let n = 0;
                  for (;n < e.length; ) {
                    const i = e[n++];
                    if (i >> 7 == 0) {
                      r.push(i);
                      continue;
                    }
                    let o = null, s = null;
                    if (192 == (224 & i)) o = 1, s = 127; else if (224 == (240 & i)) o = 2, s = 2047; else {
                      if (240 != (248 & i)) {
                        n += t(128 == (192 & i) ? D.UNEXPECTED_CONTINUE : D.BAD_PREFIX, n - 1, e, r);
                        continue;
                      }
                      o = 3, s = 65535;
                    }
                    if (n - 1 + o >= e.length) {
                      n += t(D.OVERRUN, n - 1, e, r);
                      continue;
                    }
                    let a = i & (1 << 8 - o - 1) - 1;
                    for (let c = 0; c < o; c++) {
                      let i = e[n];
                      if (128 != (192 & i)) {
                        n += t(D.MISSING_CONTINUE, n, e, r), a = null;
                        break;
                      }
                      a = a << 6 | 63 & i, n++;
                    }
                    null !== a && (a > 1114111 ? n += t(D.OUT_OF_RANGE, n - 1 - o, e, r, a) : a >= 55296 && a <= 57343 ? n += t(D.UTF16_SURROGATE, n - 1 - o, e, r, a) : a <= s ? n += t(D.OVERLONG, n - 1 - o, e, r, a) : r.push(a));
                  }
                  return r;
                }(e, t).map((e => e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode(55296 + (e >> 10 & 1023), 56320 + (1023 & e))))).join("");
              }(super.decode(e));
            }
          }
          class H extends v {
            constructor(e, t) {
              let r = !1;
              const n = [];
              e.forEach((e => {
                e.dynamic && (r = !0), n.push(e.type);
              })), super("tuple", "tuple(" + n.join(",") + ")", t, r), this.coders = e;
            }
            defaultValue() {
              const e = [];
              this.coders.forEach((t => {
                e.push(t.defaultValue());
              }));
              const t = this.coders.reduce(((e, t) => {
                const r = t.localName;
                return r && (e[r] || (e[r] = 0), e[r]++), e;
              }), {});
              return this.coders.forEach(((r, n) => {
                let i = r.localName;
                i && 1 === t[i] && ("length" === i && (i = "_length"), null == e[i] && (e[i] = e[n]));
              })), Object.freeze(e);
            }
            encode(e, t) {
              return k(e, this.coders, t);
            }
            decode(e) {
              return e.coerce(this.name, P(e, this.coders));
            }
          }
          const z = new i.Yd(o), K = new RegExp(/^bytes([0-9]*)$/), V = new RegExp(/^(u?int)([0-9]*)$/);
          class G {
            constructor(e) {
              (0, n.zG)(this, "coerceFunc", e || null);
            }
            _getCoder(e) {
              switch (e.baseType) {
               case "address":
                return new E(e.name);

               case "bool":
                return new M(e.name);

               case "string":
                return new F(e.name);

               case "bytes":
                return new T(e.name);

               case "array":
                return new O(this._getCoder(e.arrayChildren), e.arrayLength, e.name);

               case "tuple":
                return new H((e.components || []).map((e => this._getCoder(e))), e.name);

               case "":
                return new C(e.name);
              }
              let t = e.type.match(V);
              if (t) {
                let r = parseInt(t[2] || "256");
                return (0 === r || r > 256 || r % 8 != 0) && z.throwArgumentError("invalid " + t[1] + " bit length", "param", e), new j(r / 8, "int" === t[1], e.name);
              }
              if (t = e.type.match(K), t) {
                let r = parseInt(t[1]);
                return (0 === r || r > 32) && z.throwArgumentError("invalid bytes length", "param", e), new R(r, e.name);
              }
              return z.throwArgumentError("invalid type", "type", e.type);
            }
            _getWordSize() {
              return 32;
            }
            _getReader(e, t) {
              return new _(e, this._getWordSize(), this.coerceFunc, t);
            }
            _getWriter() {
              return new w(this._getWordSize());
            }
            getDefaultValue(e) {
              const t = e.map((e => this._getCoder(p.from(e))));
              return new H(t, "_").defaultValue();
            }
            encode(e, t) {
              e.length !== t.length && z.throwError("types/values length mismatch", i.Yd.errors.INVALID_ARGUMENT, {
                count: {
                  types: e.length,
                  values: t.length
                },
                value: {
                  types: e,
                  values: t
                }
              });
              const r = e.map((e => this._getCoder(p.from(e)))), n = new H(r, "_"), o = this._getWriter();
              return n.encode(o, t), o.data;
            }
            decode(e, t, r) {
              const n = e.map((e => this._getCoder(p.from(e))));
              return new H(n, "_").decode(this._getReader((0, y.lE)(t), r));
            }
          }
          new G;
        },
        4594: (e, t, r) => {
          "use strict";
          r.d(t, {
            Kn: () => h
          });
          var n = r(3286), i = r(5154), o = r(8197);
          const s = new (r(711).Yd)("address/5.6.1");
          function a(e) {
            (0, n.A7)(e, 20) || s.throwArgumentError("invalid address", "address", e);
            const t = (e = e.toLowerCase()).substring(2).split(""), r = new Uint8Array(40);
            for (let n = 0; n < 40; n++) r[n] = t[n].charCodeAt(0);
            const i = (0, n.lE)((0, o.w)(r));
            for (let n = 0; n < 40; n += 2) i[n >> 1] >> 4 >= 8 && (t[n] = t[n].toUpperCase()), (15 & i[n >> 1]) >= 8 && (t[n + 1] = t[n + 1].toUpperCase());
            return "0x" + t.join("");
          }
          const c = {};
          for (let d = 0; d < 10; d++) c[String(d)] = String(d);
          for (let d = 0; d < 26; d++) c[String.fromCharCode(65 + d)] = String(10 + d);
          const f = Math.floor((u = 9007199254740991, Math.log10 ? Math.log10(u) : Math.log(u) / Math.LN10));
          var u;
          function h(e) {
            let t = null;
            if ("string" != typeof e && s.throwArgumentError("invalid address", "address", e), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) "0x" !== e.substring(0, 2) && (e = "0x" + e), 
            t = a(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && s.throwArgumentError("bad address checksum", "address", e); else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
              for (e.substring(2, 4) !== function(e) {
                let t = (e = (e = e.toUpperCase()).substring(4) + e.substring(0, 2) + "00").split("").map((e => c[e])).join("");
                for (;t.length >= f; ) {
                  let e = t.substring(0, f);
                  t = parseInt(e, 10) % 97 + t.substring(e.length);
                }
                let r = String(98 - parseInt(t, 10) % 97);
                for (;r.length < 2; ) r = "0" + r;
                return r;
              }(e) && s.throwArgumentError("bad icap checksum", "address", e), t = (0, i.g$)(e.substring(4)); t.length < 40; ) t = "0" + t;
              t = a("0x" + t);
            } else s.throwArgumentError("invalid address", "address", e);
            return t;
          }
        },
        5154: (e, t, r) => {
          "use strict";
          r.d(t, {
            O$: () => d,
            g$: () => g
          });
          var n = r(3550), i = r.n(n), o = r(3286), s = r(711), a = i().BN;
          const c = new s.Yd("bignumber/5.6.2"), f = {}, u = 9007199254740991;
          let h = !1;
          class d {
            constructor(e, t) {
              e !== f && c.throwError("cannot call constructor directly; use BigNumber.from", s.Yd.errors.UNSUPPORTED_OPERATION, {
                operation: "new (BigNumber)"
              }), this._hex = t, this._isBigNumber = !0, Object.freeze(this);
            }
            fromTwos(e) {
              return p(b(this).fromTwos(e));
            }
            toTwos(e) {
              return p(b(this).toTwos(e));
            }
            abs() {
              return "-" === this._hex[0] ? d.from(this._hex.substring(1)) : this;
            }
            add(e) {
              return p(b(this).add(b(e)));
            }
            sub(e) {
              return p(b(this).sub(b(e)));
            }
            div(e) {
              return d.from(e).isZero() && y("division-by-zero", "div"), p(b(this).div(b(e)));
            }
            mul(e) {
              return p(b(this).mul(b(e)));
            }
            mod(e) {
              const t = b(e);
              return t.isNeg() && y("division-by-zero", "mod"), p(b(this).umod(t));
            }
            pow(e) {
              const t = b(e);
              return t.isNeg() && y("negative-power", "pow"), p(b(this).pow(t));
            }
            and(e) {
              const t = b(e);
              return (this.isNegative() || t.isNeg()) && y("unbound-bitwise-result", "and"), p(b(this).and(t));
            }
            or(e) {
              const t = b(e);
              return (this.isNegative() || t.isNeg()) && y("unbound-bitwise-result", "or"), p(b(this).or(t));
            }
            xor(e) {
              const t = b(e);
              return (this.isNegative() || t.isNeg()) && y("unbound-bitwise-result", "xor"), p(b(this).xor(t));
            }
            mask(e) {
              return (this.isNegative() || e < 0) && y("negative-width", "mask"), p(b(this).maskn(e));
            }
            shl(e) {
              return (this.isNegative() || e < 0) && y("negative-width", "shl"), p(b(this).shln(e));
            }
            shr(e) {
              return (this.isNegative() || e < 0) && y("negative-width", "shr"), p(b(this).shrn(e));
            }
            eq(e) {
              return b(this).eq(b(e));
            }
            lt(e) {
              return b(this).lt(b(e));
            }
            lte(e) {
              return b(this).lte(b(e));
            }
            gt(e) {
              return b(this).gt(b(e));
            }
            gte(e) {
              return b(this).gte(b(e));
            }
            isNegative() {
              return "-" === this._hex[0];
            }
            isZero() {
              return b(this).isZero();
            }
            toNumber() {
              try {
                return b(this).toNumber();
              } catch (e) {
                y("overflow", "toNumber", this.toString());
              }
              return null;
            }
            toBigInt() {
              try {
                return BigInt(this.toString());
              } catch (e) {}
              return c.throwError("this platform does not support BigInt", s.Yd.errors.UNSUPPORTED_OPERATION, {
                value: this.toString()
              });
            }
            toString() {
              return arguments.length > 0 && (10 === arguments[0] ? h || (h = !0, c.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : 16 === arguments[0] ? c.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", s.Yd.errors.UNEXPECTED_ARGUMENT, {}) : c.throwError("BigNumber.toString does not accept parameters", s.Yd.errors.UNEXPECTED_ARGUMENT, {})), 
              b(this).toString(10);
            }
            toHexString() {
              return this._hex;
            }
            toJSON(e) {
              return {
                type: "BigNumber",
                hex: this.toHexString()
              };
            }
            static from(e) {
              if (e instanceof d) return e;
              if ("string" == typeof e) return e.match(/^-?0x[0-9a-f]+$/i) ? new d(f, l(e)) : e.match(/^-?[0-9]+$/) ? new d(f, l(new a(e))) : c.throwArgumentError("invalid BigNumber string", "value", e);
              if ("number" == typeof e) return e % 1 && y("underflow", "BigNumber.from", e), (e >= u || e <= -u) && y("overflow", "BigNumber.from", e), 
              d.from(String(e));
              const t = e;
              if ("bigint" == typeof t) return d.from(t.toString());
              if ((0, o._t)(t)) return d.from((0, o.Dv)(t));
              if (t) if (t.toHexString) {
                const e = t.toHexString();
                if ("string" == typeof e) return d.from(e);
              } else {
                let e = t._hex;
                if (null == e && "BigNumber" === t.type && (e = t.hex), "string" == typeof e && ((0, o.A7)(e) || "-" === e[0] && (0, o.A7)(e.substring(1)))) return d.from(e);
              }
              return c.throwArgumentError("invalid BigNumber value", "value", e);
            }
            static isBigNumber(e) {
              return !(!e || !e._isBigNumber);
            }
          }
          function l(e) {
            if ("string" != typeof e) return l(e.toString(16));
            if ("-" === e[0]) return "-" === (e = e.substring(1))[0] && c.throwArgumentError("invalid hex", "value", e), "0x00" === (e = l(e)) ? e : "-" + e;
            if ("0x" !== e.substring(0, 2) && (e = "0x" + e), "0x" === e) return "0x00";
            for (e.length % 2 && (e = "0x0" + e.substring(2)); e.length > 4 && "0x00" === e.substring(0, 4); ) e = "0x" + e.substring(4);
            return e;
          }
          function p(e) {
            return d.from(l(e));
          }
          function b(e) {
            const t = d.from(e).toHexString();
            return "-" === t[0] ? new a("-" + t.substring(3), 16) : new a(t.substring(2), 16);
          }
          function y(e, t, r) {
            const n = {
              fault: e,
              operation: t
            };
            return null != r && (n.value = r), c.throwError(e, s.Yd.errors.NUMERIC_FAULT, n);
          }
          function g(e) {
            return new a(e, 36).toString(16);
          }
        },
        3286: (e, t, r) => {
          "use strict";
          r.d(t, {
            lE: () => f,
            zo: () => u,
            xs: () => g,
            E1: () => b,
            p3: () => y,
            $m: () => m,
            Dv: () => p,
            _t: () => c,
            Zq: () => s,
            A7: () => d,
            N: () => v,
            G1: () => h
          });
          const n = new (r(711).Yd)("bytes/5.6.1");
          function i(e) {
            return !!e.toHexString;
          }
          function o(e) {
            return e.slice || (e.slice = function() {
              const t = Array.prototype.slice.call(arguments);
              return o(new Uint8Array(Array.prototype.slice.apply(e, t)));
            }), e;
          }
          function s(e) {
            return d(e) && !(e.length % 2) || c(e);
          }
          function a(e) {
            return "number" == typeof e && e == e && e % 1 == 0;
          }
          function c(e) {
            if (null == e) return !1;
            if (e.constructor === Uint8Array) return !0;
            if ("string" == typeof e) return !1;
            if (!a(e.length) || e.length < 0) return !1;
            for (let t = 0; t < e.length; t++) {
              const r = e[t];
              if (!a(r) || r < 0 || r >= 256) return !1;
            }
            return !0;
          }
          function f(e, t) {
            if (t || (t = {}), "number" == typeof e) {
              n.checkSafeUint53(e, "invalid arrayify value");
              const t = [];
              for (;e; ) t.unshift(255 & e), e = parseInt(String(e / 256));
              return 0 === t.length && t.push(0), o(new Uint8Array(t));
            }
            if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), i(e) && (e = e.toHexString()), 
            d(e)) {
              let r = e.substring(2);
              r.length % 2 && ("left" === t.hexPad ? r = "0" + r : "right" === t.hexPad ? r += "0" : n.throwArgumentError("hex data is odd-length", "value", e));
              const i = [];
              for (let e = 0; e < r.length; e += 2) i.push(parseInt(r.substring(e, e + 2), 16));
              return o(new Uint8Array(i));
            }
            return c(e) ? o(new Uint8Array(e)) : n.throwArgumentError("invalid arrayify value", "value", e);
          }
          function u(e) {
            const t = e.map((e => f(e))), r = t.reduce(((e, t) => e + t.length), 0), n = new Uint8Array(r);
            return t.reduce(((e, t) => (n.set(t, e), e + t.length)), 0), o(n);
          }
          function h(e) {
            let t = f(e);
            if (0 === t.length) return t;
            let r = 0;
            for (;r < t.length && 0 === t[r]; ) r++;
            return r && (t = t.slice(r)), t;
          }
          function d(e, t) {
            return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);
          }
          const l = "0123456789abcdef";
          function p(e, t) {
            if (t || (t = {}), "number" == typeof e) {
              n.checkSafeUint53(e, "invalid hexlify value");
              let t = "";
              for (;e; ) t = l[15 & e] + t, e = Math.floor(e / 16);
              return t.length ? (t.length % 2 && (t = "0" + t), "0x" + t) : "0x00";
            }
            if ("bigint" == typeof e) return (e = e.toString(16)).length % 2 ? "0x0" + e : "0x" + e;
            if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), i(e)) return e.toHexString();
            if (d(e)) return e.length % 2 && ("left" === t.hexPad ? e = "0x0" + e.substring(2) : "right" === t.hexPad ? e += "0" : n.throwArgumentError("hex data is odd-length", "value", e)), 
            e.toLowerCase();
            if (c(e)) {
              let t = "0x";
              for (let r = 0; r < e.length; r++) {
                let n = e[r];
                t += l[(240 & n) >> 4] + l[15 & n];
              }
              return t;
            }
            return n.throwArgumentError("invalid hexlify value", "value", e);
          }
          function b(e) {
            if ("string" != typeof e) e = p(e); else if (!d(e) || e.length % 2) return null;
            return (e.length - 2) / 2;
          }
          function y(e, t, r) {
            return "string" != typeof e ? e = p(e) : (!d(e) || e.length % 2) && n.throwArgumentError("invalid hexData", "value", e), 
            t = 2 + 2 * t, null != r ? "0x" + e.substring(t, 2 + 2 * r) : "0x" + e.substring(t);
          }
          function g(e) {
            let t = "0x";
            return e.forEach((e => {
              t += p(e).substring(2);
            })), t;
          }
          function m(e, t) {
            for ("string" != typeof e ? e = p(e) : d(e) || n.throwArgumentError("invalid hex string", "value", e), e.length > 2 * t + 2 && n.throwArgumentError("value out of range", "value", t); e.length < 2 * t + 2; ) e = "0x0" + e.substring(2);
            return e;
          }
          function v(e) {
            const t = {
              r: "0x",
              s: "0x",
              _vs: "0x",
              recoveryParam: 0,
              v: 0,
              yParityAndS: "0x",
              compact: "0x"
            };
            if (s(e)) {
              let r = f(e);
              64 === r.length ? (t.v = 27 + (r[32] >> 7), r[32] &= 127, t.r = p(r.slice(0, 32)), t.s = p(r.slice(32, 64))) : 65 === r.length ? (t.r = p(r.slice(0, 32)), 
              t.s = p(r.slice(32, 64)), t.v = r[64]) : n.throwArgumentError("invalid signature string", "signature", e), t.v < 27 && (0 === t.v || 1 === t.v ? t.v += 27 : n.throwArgumentError("signature invalid v byte", "signature", e)), 
              t.recoveryParam = 1 - t.v % 2, t.recoveryParam && (r[32] |= 128), t._vs = p(r.slice(32, 64));
            } else {
              if (t.r = e.r, t.s = e.s, t.v = e.v, t.recoveryParam = e.recoveryParam, t._vs = e._vs, null != t._vs) {
                const r = function(e, t) {
                  (e = f(e)).length > t && n.throwArgumentError("value out of range", "value", arguments[0]);
                  const r = new Uint8Array(t);
                  return r.set(e, t - e.length), o(r);
                }(f(t._vs), 32);
                t._vs = p(r);
                const i = r[0] >= 128 ? 1 : 0;
                null == t.recoveryParam ? t.recoveryParam = i : t.recoveryParam !== i && n.throwArgumentError("signature recoveryParam mismatch _vs", "signature", e), 
                r[0] &= 127;
                const s = p(r);
                null == t.s ? t.s = s : t.s !== s && n.throwArgumentError("signature v mismatch _vs", "signature", e);
              }
              if (null == t.recoveryParam) null == t.v ? n.throwArgumentError("signature missing v and recoveryParam", "signature", e) : 0 === t.v || 1 === t.v ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2; else if (null == t.v) t.v = 27 + t.recoveryParam; else {
                const r = 0 === t.v || 1 === t.v ? t.v : 1 - t.v % 2;
                t.recoveryParam !== r && n.throwArgumentError("signature recoveryParam mismatch v", "signature", e);
              }
              null != t.r && d(t.r) ? t.r = m(t.r, 32) : n.throwArgumentError("signature missing or invalid r", "signature", e), null != t.s && d(t.s) ? t.s = m(t.s, 32) : n.throwArgumentError("signature missing or invalid s", "signature", e);
              const r = f(t.s);
              r[0] >= 128 && n.throwArgumentError("signature s out of range", "signature", e), t.recoveryParam && (r[0] |= 128);
              const i = p(r);
              t._vs && (d(t._vs) || n.throwArgumentError("signature invalid _vs", "signature", e), t._vs = m(t._vs, 32)), null == t._vs ? t._vs = i : t._vs !== i && n.throwArgumentError("signature _vs mismatch v and s", "signature", e);
            }
            return t.yParityAndS = t._vs, t.compact = t.r + t.yParityAndS.substring(2), t;
          }
        },
        1046: (e, t, r) => {
          "use strict";
          r.d(t, {
            Bz: () => a,
            _Y: () => o,
            fh: () => s,
            tL: () => i
          });
          var n = r(5154);
          const i = n.O$.from(-1), o = n.O$.from(0), s = n.O$.from(1), a = n.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        },
        8197: (e, t, r) => {
          "use strict";
          r.d(t, {
            w: () => s
          });
          var n = r(1094), i = r.n(n), o = r(3286);
          function s(e) {
            return "0x" + i().keccak_256((0, o.lE)(e));
          }
        },
        711: (e, t, r) => {
          "use strict";
          r.d(t, {
            Yd: () => l
          });
          let i = !1, o = !1;
          const s = {
            debug: 1,
            default: 2,
            info: 2,
            warning: 3,
            error: 4,
            off: 5
          };
          let a = s.default, c = null;
          const f = function() {
            try {
              const e = [];
              if ([ "NFD", "NFC", "NFKD", "NFKC" ].forEach((t => {
                try {
                  if ("test" !== "test".normalize(t)) throw new Error("bad normalize");
                } catch (r) {
                  e.push(t);
                }
              })), e.length) throw new Error("missing " + e.join(", "));
              if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken implementation");
            } catch (e) {
              return e.message;
            }
            return null;
          }();
          var u, h;
          !function(e) {
            e.DEBUG = "DEBUG", e.INFO = "INFO", e.WARNING = "WARNING", e.ERROR = "ERROR", e.OFF = "OFF";
          }(u || (u = {})), function(e) {
            e.UNKNOWN_ERROR = "UNKNOWN_ERROR", e.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", e.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", 
            e.NETWORK_ERROR = "NETWORK_ERROR", e.SERVER_ERROR = "SERVER_ERROR", e.TIMEOUT = "TIMEOUT", e.BUFFER_OVERRUN = "BUFFER_OVERRUN", 
            e.NUMERIC_FAULT = "NUMERIC_FAULT", e.MISSING_NEW = "MISSING_NEW", e.INVALID_ARGUMENT = "INVALID_ARGUMENT", e.MISSING_ARGUMENT = "MISSING_ARGUMENT", 
            e.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", e.CALL_EXCEPTION = "CALL_EXCEPTION", e.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", 
            e.NONCE_EXPIRED = "NONCE_EXPIRED", e.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED", e.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT", 
            e.TRANSACTION_REPLACED = "TRANSACTION_REPLACED";
          }(h || (h = {}));
          const d = "0123456789abcdef";
          class l {
            constructor(e) {
              Object.defineProperty(this, "version", {
                enumerable: !0,
                value: e,
                writable: !1
              });
            }
            _log(e, t) {
              const r = e.toLowerCase();
              null == s[r] && this.throwArgumentError("invalid log level name", "logLevel", e), a > s[r] || n.log.apply(n, t);
            }
            debug(...e) {
              this._log(l.levels.DEBUG, e);
            }
            info(...e) {
              this._log(l.levels.INFO, e);
            }
            warn(...e) {
              this._log(l.levels.WARNING, e);
            }
            makeError(e, t, r) {
              if (o) return this.makeError("censored error", t, {});
              t || (t = l.errors.UNKNOWN_ERROR), r || (r = {});
              const n = [];
              Object.keys(r).forEach((e => {
                const t = r[e];
                try {
                  if (t instanceof Uint8Array) {
                    let r = "";
                    for (let e = 0; e < t.length; e++) r += d[t[e] >> 4], r += d[15 & t[e]];
                    n.push(e + "=Uint8Array(0x" + r + ")");
                  } else n.push(e + "=" + JSON.stringify(t));
                } catch (t) {
                  n.push(e + "=" + JSON.stringify(r[e].toString()));
                }
              })), n.push(`code=${t}`), n.push(`version=${this.version}`);
              const i = e;
              let s = "";
              switch (t) {
               case h.NUMERIC_FAULT:
                {
                  s = "NUMERIC_FAULT";
                  const t = e;
                  switch (t) {
                   case "overflow":
                   case "underflow":
                   case "division-by-zero":
                    s += "-" + t;
                    break;

                   case "negative-power":
                   case "negative-width":
                    s += "-unsupported";
                    break;

                   case "unbound-bitwise-result":
                    s += "-unbound-result";
                  }
                  break;
                }

               case h.CALL_EXCEPTION:
               case h.INSUFFICIENT_FUNDS:
               case h.MISSING_NEW:
               case h.NONCE_EXPIRED:
               case h.REPLACEMENT_UNDERPRICED:
               case h.TRANSACTION_REPLACED:
               case h.UNPREDICTABLE_GAS_LIMIT:
                s = t;
              }
              s && (e += " [ See: https://links.ethers.org/v5-errors-" + s + " ]"), n.length && (e += " (" + n.join(", ") + ")");
              const a = new Error(e);
              return a.reason = i, a.code = t, Object.keys(r).forEach((function(e) {
                a[e] = r[e];
              })), a;
            }
            throwError(e, t, r) {
              throw this.makeError(e, t, r);
            }
            throwArgumentError(e, t, r) {
              return this.throwError(e, l.errors.INVALID_ARGUMENT, {
                argument: t,
                value: r
              });
            }
            assert(e, t, r, n) {
              e || this.throwError(t, r, n);
            }
            assertArgument(e, t, r, n) {
              e || this.throwArgumentError(t, r, n);
            }
            checkNormalize(e) {
              null == e && (e = "platform missing String.prototype.normalize"), f && this.throwError("platform missing String.prototype.normalize", l.errors.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize",
                form: f
              });
            }
            checkSafeUint53(e, t) {
              "number" == typeof e && (null == t && (t = "value not safe"), (e < 0 || e >= 9007199254740991) && this.throwError(t, l.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "out-of-safe-range",
                value: e
              }), e % 1 && this.throwError(t, l.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "non-integer",
                value: e
              }));
            }
            checkArgumentCount(e, t, r) {
              r = r ? ": " + r : "", e < t && this.throwError("missing argument" + r, l.errors.MISSING_ARGUMENT, {
                count: e,
                expectedCount: t
              }), e > t && this.throwError("too many arguments" + r, l.errors.UNEXPECTED_ARGUMENT, {
                count: e,
                expectedCount: t
              });
            }
            checkNew(e, t) {
              e !== Object && null != e || this.throwError("missing new", l.errors.MISSING_NEW, {
                name: t.name
              });
            }
            checkAbstract(e, t) {
              e === t ? this.throwError("cannot instantiate abstract class " + JSON.stringify(t.name) + " directly; use a sub-class", l.errors.UNSUPPORTED_OPERATION, {
                name: e.name,
                operation: "new"
              }) : e !== Object && null != e || this.throwError("missing new", l.errors.MISSING_NEW, {
                name: t.name
              });
            }
            static globalLogger() {
              return c || (c = new l("logger/5.6.0")), c;
            }
            static setCensorship(e, t) {
              if (!e && t && this.globalLogger().throwError("cannot permanently disable censorship", l.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
              }), i) {
                if (!e) return;
                this.globalLogger().throwError("error censorship permanent", l.errors.UNSUPPORTED_OPERATION, {
                  operation: "setCensorship"
                });
              }
              o = !!e, i = !!t;
            }
            static setLogLevel(e) {
              const t = s[e.toLowerCase()];
              null != t ? a = t : l.globalLogger().warn("invalid log level - " + e);
            }
            static from(e) {
              return new l(e);
            }
          }
          l.errors = h, l.levels = u;
        },
        3587: (e, t, r) => {
          "use strict";
          r.d(t, {
            uj: () => o,
            zG: () => i
          });
          const n = new (r(711).Yd)("properties/5.6.0");
          function i(e, t, r) {
            Object.defineProperty(e, t, {
              enumerable: !0,
              value: r,
              writable: !1
            });
          }
          function o(e, t) {
            e && "object" == typeof e || n.throwArgumentError("invalid object", "object", e), Object.keys(e).forEach((r => {
              t[r] || n.throwArgumentError("invalid object key - " + r, "transaction:" + r, e);
            }));
          }
        },
        5504: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, {
            TransactionTypes: () => ue,
            accessListify: () => ve,
            computeAddress: () => be,
            parse: () => xe,
            recoverAddress: () => ye,
            serialize: () => Ee
          });
          var n = r(4594), i = r(5154), o = r(3286), s = r(1046), a = r(8197), c = r(3587), f = r(711);
          const u = new f.Yd("rlp/5.6.1");
          function h(e) {
            const t = [];
            for (;e; ) t.unshift(255 & e), e >>= 8;
            return t;
          }
          function d(e, t, r) {
            let n = 0;
            for (let i = 0; i < r; i++) n = 256 * n + e[t + i];
            return n;
          }
          function l(e) {
            if (Array.isArray(e)) {
              let t = [];
              if (e.forEach((function(e) {
                t = t.concat(l(e));
              })), t.length <= 55) return t.unshift(192 + t.length), t;
              const r = h(t.length);
              return r.unshift(247 + r.length), r.concat(t);
            }
            (0, o.Zq)(e) || u.throwArgumentError("RLP object must be BytesLike", "object", e);
            const t = Array.prototype.slice.call((0, o.lE)(e));
            if (1 === t.length && t[0] <= 127) return t;
            if (t.length <= 55) return t.unshift(128 + t.length), t;
            const r = h(t.length);
            return r.unshift(183 + r.length), r.concat(t);
          }
          function p(e) {
            return (0, o.Dv)(l(e));
          }
          function b(e, t, r, n) {
            const i = [];
            for (;r < t + 1 + n; ) {
              const o = y(e, r);
              i.push(o.result), (r += o.consumed) > t + 1 + n && u.throwError("child data too short", f.Yd.errors.BUFFER_OVERRUN, {});
            }
            return {
              consumed: 1 + n,
              result: i
            };
          }
          function y(e, t) {
            if (0 === e.length && u.throwError("data too short", f.Yd.errors.BUFFER_OVERRUN, {}), e[t] >= 248) {
              const r = e[t] - 247;
              t + 1 + r > e.length && u.throwError("data short segment too short", f.Yd.errors.BUFFER_OVERRUN, {});
              const n = d(e, t + 1, r);
              return t + 1 + r + n > e.length && u.throwError("data long segment too short", f.Yd.errors.BUFFER_OVERRUN, {}), b(e, t, t + 1 + r, r + n);
            }
            if (e[t] >= 192) {
              const r = e[t] - 192;
              return t + 1 + r > e.length && u.throwError("data array too short", f.Yd.errors.BUFFER_OVERRUN, {}), b(e, t, t + 1, r);
            }
            if (e[t] >= 184) {
              const r = e[t] - 183;
              t + 1 + r > e.length && u.throwError("data array too short", f.Yd.errors.BUFFER_OVERRUN, {});
              const n = d(e, t + 1, r);
              return t + 1 + r + n > e.length && u.throwError("data array too short", f.Yd.errors.BUFFER_OVERRUN, {}), {
                consumed: 1 + r + n,
                result: (0, o.Dv)(e.slice(t + 1 + r, t + 1 + r + n))
              };
            }
            if (e[t] >= 128) {
              const r = e[t] - 128;
              return t + 1 + r > e.length && u.throwError("data too short", f.Yd.errors.BUFFER_OVERRUN, {}), {
                consumed: 1 + r,
                result: (0, o.Dv)(e.slice(t + 1, t + 1 + r))
              };
            }
            return {
              consumed: 1,
              result: (0, o.Dv)(e[t])
            };
          }
          function g(e) {
            const t = (0, o.lE)(e), r = y(t, 0);
            return r.consumed !== t.length && u.throwArgumentError("invalid rlp data", "data", e), r.result;
          }
          var m = r(3550), v = r.n(m), w = r(3715), _ = r.n(w);
          function S(e, t, r) {
            return r = {
              path: t,
              exports: {},
              require: function(e, t) {
                return function() {
                  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                }(null == t && r.path);
              }
            }, e(r, r.exports), r.exports;
          }
          "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0 !== r.g ? r.g : "undefined" != typeof self && self;
          var E = A;
          function A(e, t) {
            if (!e) throw new Error(t || "Assertion failed");
          }
          A.equal = function(e, t, r) {
            if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
          };
          var x = S((function(e, t) {
            var r = t;
            function n(e) {
              return 1 === e.length ? "0" + e : e;
            }
            function i(e) {
              for (var t = "", r = 0; r < e.length; r++) t += n(e[r].toString(16));
              return t;
            }
            r.toArray = function(e, t) {
              if (Array.isArray(e)) return e.slice();
              if (!e) return [];
              var r = [];
              if ("string" != typeof e) {
                for (var n = 0; n < e.length; n++) r[n] = 0 | e[n];
                return r;
              }
              if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2) r.push(parseInt(e[n] + e[n + 1], 16)); else for (n = 0; n < e.length; n++) {
                var i = e.charCodeAt(n), o = i >> 8, s = 255 & i;
                o ? r.push(o, s) : r.push(s);
              }
              return r;
            }, r.zero2 = n, r.toHex = i, r.encode = function(e, t) {
              return "hex" === t ? i(e) : e;
            };
          })), k = S((function(e, t) {
            var r = t;
            r.assert = E, r.toArray = x.toArray, r.zero2 = x.zero2, r.toHex = x.toHex, r.encode = x.encode, r.getNAF = function(e, t, r) {
              var n = new Array(Math.max(e.bitLength(), r) + 1);
              n.fill(0);
              for (var i = 1 << t + 1, o = e.clone(), s = 0; s < n.length; s++) {
                var a, c = o.andln(i - 1);
                o.isOdd() ? (a = c > (i >> 1) - 1 ? (i >> 1) - c : c, o.isubn(a)) : a = 0, n[s] = a, o.iushrn(1);
              }
              return n;
            }, r.getJSF = function(e, t) {
              var r = [ [], [] ];
              e = e.clone(), t = t.clone();
              for (var n, i = 0, o = 0; e.cmpn(-i) > 0 || t.cmpn(-o) > 0; ) {
                var s, a, c = e.andln(3) + i & 3, f = t.andln(3) + o & 3;
                3 === c && (c = -1), 3 === f && (f = -1), s = 0 == (1 & c) ? 0 : 3 != (n = e.andln(7) + i & 7) && 5 !== n || 2 !== f ? c : -c, 
                r[0].push(s), a = 0 == (1 & f) ? 0 : 3 != (n = t.andln(7) + o & 7) && 5 !== n || 2 !== c ? f : -f, r[1].push(a), 2 * i === s + 1 && (i = 1 - i), 
                2 * o === a + 1 && (o = 1 - o), e.iushrn(1), t.iushrn(1);
              }
              return r;
            }, r.cachedProperty = function(e, t, r) {
              var n = "_" + t;
              e.prototype[t] = function() {
                return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
              };
            }, r.parseBytes = function(e) {
              return "string" == typeof e ? r.toArray(e, "hex") : e;
            }, r.intFromLE = function(e) {
              return new (v())(e, "hex", "le");
            };
          })), P = k.getNAF, O = k.getJSF, M = k.assert;
          function I(e, t) {
            this.type = e, this.p = new (v())(t.p, 16), this.red = t.prime ? v().red(t.prime) : v().mont(this.p), this.zero = new (v())(0).toRed(this.red), 
            this.one = new (v())(1).toRed(this.red), this.two = new (v())(2).toRed(this.red), this.n = t.n && new (v())(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), 
            this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
            var r = this.n && this.p.div(this.n);
            !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
          }
          var T = I;
          function R(e, t) {
            this.curve = e, this.type = t, this.precomputed = null;
          }
          I.prototype.point = function() {
            throw new Error("Not implemented");
          }, I.prototype.validate = function() {
            throw new Error("Not implemented");
          }, I.prototype._fixedNafMul = function(e, t) {
            M(e.precomputed);
            var r = e._getDoubles(), n = P(t, 1, this._bitLength), i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
            i /= 3;
            var o, s, a = [];
            for (o = 0; o < n.length; o += r.step) {
              s = 0;
              for (var c = o + r.step - 1; c >= o; c--) s = (s << 1) + n[c];
              a.push(s);
            }
            for (var f = this.jpoint(null, null, null), u = this.jpoint(null, null, null), h = i; h > 0; h--) {
              for (o = 0; o < a.length; o++) (s = a[o]) === h ? u = u.mixedAdd(r.points[o]) : s === -h && (u = u.mixedAdd(r.points[o].neg()));
              f = f.add(u);
            }
            return f.toP();
          }, I.prototype._wnafMul = function(e, t) {
            var r = 4, n = e._getNAFPoints(r);
            r = n.wnd;
            for (var i = n.points, o = P(t, r, this._bitLength), s = this.jpoint(null, null, null), a = o.length - 1; a >= 0; a--) {
              for (var c = 0; a >= 0 && 0 === o[a]; a--) c++;
              if (a >= 0 && c++, s = s.dblp(c), a < 0) break;
              var f = o[a];
              M(0 !== f), s = "affine" === e.type ? f > 0 ? s.mixedAdd(i[f - 1 >> 1]) : s.mixedAdd(i[-f - 1 >> 1].neg()) : f > 0 ? s.add(i[f - 1 >> 1]) : s.add(i[-f - 1 >> 1].neg());
            }
            return "affine" === e.type ? s.toP() : s;
          }, I.prototype._wnafMulAdd = function(e, t, r, n, i) {
            var o, s, a, c = this._wnafT1, f = this._wnafT2, u = this._wnafT3, h = 0;
            for (o = 0; o < n; o++) {
              var d = (a = t[o])._getNAFPoints(e);
              c[o] = d.wnd, f[o] = d.points;
            }
            for (o = n - 1; o >= 1; o -= 2) {
              var l = o - 1, p = o;
              if (1 === c[l] && 1 === c[p]) {
                var b = [ t[l], null, null, t[p] ];
                0 === t[l].y.cmp(t[p].y) ? (b[1] = t[l].add(t[p]), b[2] = t[l].toJ().mixedAdd(t[p].neg())) : 0 === t[l].y.cmp(t[p].y.redNeg()) ? (b[1] = t[l].toJ().mixedAdd(t[p]), 
                b[2] = t[l].add(t[p].neg())) : (b[1] = t[l].toJ().mixedAdd(t[p]), b[2] = t[l].toJ().mixedAdd(t[p].neg()));
                var y = [ -3, -1, -5, -7, 0, 7, 5, 1, 3 ], g = O(r[l], r[p]);
                for (h = Math.max(g[0].length, h), u[l] = new Array(h), u[p] = new Array(h), s = 0; s < h; s++) {
                  var m = 0 | g[0][s], v = 0 | g[1][s];
                  u[l][s] = y[3 * (m + 1) + (v + 1)], u[p][s] = 0, f[l] = b;
                }
              } else u[l] = P(r[l], c[l], this._bitLength), u[p] = P(r[p], c[p], this._bitLength), h = Math.max(u[l].length, h), h = Math.max(u[p].length, h);
            }
            var w = this.jpoint(null, null, null), _ = this._wnafT4;
            for (o = h; o >= 0; o--) {
              for (var S = 0; o >= 0; ) {
                var E = !0;
                for (s = 0; s < n; s++) _[s] = 0 | u[s][o], 0 !== _[s] && (E = !1);
                if (!E) break;
                S++, o--;
              }
              if (o >= 0 && S++, w = w.dblp(S), o < 0) break;
              for (s = 0; s < n; s++) {
                var A = _[s];
                0 !== A && (A > 0 ? a = f[s][A - 1 >> 1] : A < 0 && (a = f[s][-A - 1 >> 1].neg()), w = "affine" === a.type ? w.mixedAdd(a) : w.add(a));
              }
            }
            for (o = 0; o < n; o++) f[o] = null;
            return i ? w : w.toP();
          }, I.BasePoint = R, R.prototype.eq = function() {
            throw new Error("Not implemented");
          }, R.prototype.validate = function() {
            return this.curve.validate(this);
          }, I.prototype.decodePoint = function(e, t) {
            e = k.toArray(e, t);
            var r = this.p.byteLength();
            if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? M(e[e.length - 1] % 2 == 0) : 7 === e[0] && M(e[e.length - 1] % 2 == 1), 
            this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
            if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
            throw new Error("Unknown point format");
          }, R.prototype.encodeCompressed = function(e) {
            return this.encode(e, !0);
          }, R.prototype._encode = function(e) {
            var t = this.curve.p.byteLength(), r = this.getX().toArray("be", t);
            return e ? [ this.getY().isEven() ? 2 : 3 ].concat(r) : [ 4 ].concat(r, this.getY().toArray("be", t));
          }, R.prototype.encode = function(e, t) {
            return k.encode(this._encode(t), e);
          }, R.prototype.precompute = function(e) {
            if (this.precomputed) return this;
            var t = {
              doubles: null,
              naf: null,
              beta: null
            };
            return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, 
            this;
          }, R.prototype._hasDoubles = function(e) {
            if (!this.precomputed) return !1;
            var t = this.precomputed.doubles;
            return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
          }, R.prototype._getDoubles = function(e, t) {
            if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
            for (var r = [ this ], n = this, i = 0; i < t; i += e) {
              for (var o = 0; o < e; o++) n = n.dbl();
              r.push(n);
            }
            return {
              step: e,
              points: r
            };
          }, R.prototype._getNAFPoints = function(e) {
            if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
            for (var t = [ this ], r = (1 << e) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++) t[i] = t[i - 1].add(n);
            return {
              wnd: e,
              points: t
            };
          }, R.prototype._getBeta = function() {
            return null;
          }, R.prototype.dblp = function(e) {
            for (var t = this, r = 0; r < e; r++) t = t.dbl();
            return t;
          };
          var C = S((function(e) {
            "function" == typeof Object.create ? e.exports = function(e, t) {
              t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }));
            } : e.exports = function(e, t) {
              if (t) {
                e.super_ = t;
                var r = function() {};
                r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
              }
            };
          })), N = k.assert;
          function j(e) {
            T.call(this, "short", e), this.a = new (v())(e.a, 16).toRed(this.red), this.b = new (v())(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), 
            this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), 
            this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
          }
          C(j, T);
          var B = j;
          function L(e, t, r, n) {
            T.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new (v())(t, 16), 
            this.y = new (v())(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
            this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
          }
          function D(e, t, r, n) {
            T.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, 
            this.z = new (v())(0)) : (this.x = new (v())(t, 16), this.y = new (v())(r, 16), this.z = new (v())(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
            this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
          }
          j.prototype._getEndomorphism = function(e) {
            if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
              var t, r;
              if (e.beta) t = new (v())(e.beta, 16).toRed(this.red); else {
                var n = this._getEndoRoots(this.p);
                t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
              }
              if (e.lambda) r = new (v())(e.lambda, 16); else {
                var i = this._getEndoRoots(this.n);
                0 === this.g.mul(i[0]).x.cmp(this.g.x.redMul(t)) ? r = i[0] : (r = i[1], N(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));
              }
              return {
                beta: t,
                lambda: r,
                basis: e.basis ? e.basis.map((function(e) {
                  return {
                    a: new (v())(e.a, 16),
                    b: new (v())(e.b, 16)
                  };
                })) : this._getEndoBasis(r)
              };
            }
          }, j.prototype._getEndoRoots = function(e) {
            var t = e === this.p ? this.red : v().mont(e), r = new (v())(2).toRed(t).redInvm(), n = r.redNeg(), i = new (v())(3).toRed(t).redNeg().redSqrt().redMul(r);
            return [ n.redAdd(i).fromRed(), n.redSub(i).fromRed() ];
          }, j.prototype._getEndoBasis = function(e) {
            for (var t, r, n, i, o, s, a, c, f, u = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), h = e, d = this.n.clone(), l = new (v())(1), p = new (v())(0), b = new (v())(0), y = new (v())(1), g = 0; 0 !== h.cmpn(0); ) {
              var m = d.div(h);
              c = d.sub(m.mul(h)), f = b.sub(m.mul(l));
              var w = y.sub(m.mul(p));
              if (!n && c.cmp(u) < 0) t = a.neg(), r = l, n = c.neg(), i = f; else if (n && 2 == ++g) break;
              a = c, d = h, h = c, b = l, l = f, y = p, p = w;
            }
            o = c.neg(), s = f;
            var _ = n.sqr().add(i.sqr());
            return o.sqr().add(s.sqr()).cmp(_) >= 0 && (o = t, s = r), n.negative && (n = n.neg(), i = i.neg()), o.negative && (o = o.neg(), 
            s = s.neg()), [ {
              a: n,
              b: i
            }, {
              a: o,
              b: s
            } ];
          }, j.prototype._endoSplit = function(e) {
            var t = this.endo.basis, r = t[0], n = t[1], i = n.b.mul(e).divRound(this.n), o = r.b.neg().mul(e).divRound(this.n), s = i.mul(r.a), a = o.mul(n.a), c = i.mul(r.b), f = o.mul(n.b);
            return {
              k1: e.sub(s).sub(a),
              k2: c.add(f).neg()
            };
          }, j.prototype.pointFromX = function(e, t) {
            (e = new (v())(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), n = r.redSqrt();
            if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
            var i = n.fromRed().isOdd();
            return (t && !i || !t && i) && (n = n.redNeg()), this.point(e, n);
          }, j.prototype.validate = function(e) {
            if (e.inf) return !0;
            var t = e.x, r = e.y, n = this.a.redMul(t), i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);
            return 0 === r.redSqr().redISub(i).cmpn(0);
          }, j.prototype._endoWnafMulAdd = function(e, t, r) {
            for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++) {
              var s = this._endoSplit(t[o]), a = e[o], c = a._getBeta();
              s.k1.negative && (s.k1.ineg(), a = a.neg(!0)), s.k2.negative && (s.k2.ineg(), c = c.neg(!0)), n[2 * o] = a, n[2 * o + 1] = c, 
              i[2 * o] = s.k1, i[2 * o + 1] = s.k2;
            }
            for (var f = this._wnafMulAdd(1, n, i, 2 * o, r), u = 0; u < 2 * o; u++) n[u] = null, i[u] = null;
            return f;
          }, C(L, T.BasePoint), j.prototype.point = function(e, t, r) {
            return new L(this, e, t, r);
          }, j.prototype.pointFromJSON = function(e, t) {
            return L.fromJSON(this, e, t);
          }, L.prototype._getBeta = function() {
            if (this.curve.endo) {
              var e = this.precomputed;
              if (e && e.beta) return e.beta;
              var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
              if (e) {
                var r = this.curve, n = function(e) {
                  return r.point(e.x.redMul(r.endo.beta), e.y);
                };
                e.beta = t, t.precomputed = {
                  beta: null,
                  naf: e.naf && {
                    wnd: e.naf.wnd,
                    points: e.naf.points.map(n)
                  },
                  doubles: e.doubles && {
                    step: e.doubles.step,
                    points: e.doubles.points.map(n)
                  }
                };
              }
              return t;
            }
          }, L.prototype.toJSON = function() {
            return this.precomputed ? [ this.x, this.y, this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
              }
            } ] : [ this.x, this.y ];
          }, L.fromJSON = function(e, t, r) {
            "string" == typeof t && (t = JSON.parse(t));
            var n = e.point(t[0], t[1], r);
            if (!t[2]) return n;
            function i(t) {
              return e.point(t[0], t[1], r);
            }
            var o = t[2];
            return n.precomputed = {
              beta: null,
              doubles: o.doubles && {
                step: o.doubles.step,
                points: [ n ].concat(o.doubles.points.map(i))
              },
              naf: o.naf && {
                wnd: o.naf.wnd,
                points: [ n ].concat(o.naf.points.map(i))
              }
            }, n;
          }, L.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
          }, L.prototype.isInfinity = function() {
            return this.inf;
          }, L.prototype.add = function(e) {
            if (this.inf) return e;
            if (e.inf) return this;
            if (this.eq(e)) return this.dbl();
            if (this.neg().eq(e)) return this.curve.point(null, null);
            if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
            var t = this.y.redSub(e.y);
            0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
            var r = t.redSqr().redISub(this.x).redISub(e.x), n = t.redMul(this.x.redSub(r)).redISub(this.y);
            return this.curve.point(r, n);
          }, L.prototype.dbl = function() {
            if (this.inf) return this;
            var e = this.y.redAdd(this.y);
            if (0 === e.cmpn(0)) return this.curve.point(null, null);
            var t = this.curve.a, r = this.x.redSqr(), n = e.redInvm(), i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n), o = i.redSqr().redISub(this.x.redAdd(this.x)), s = i.redMul(this.x.redSub(o)).redISub(this.y);
            return this.curve.point(o, s);
          }, L.prototype.getX = function() {
            return this.x.fromRed();
          }, L.prototype.getY = function() {
            return this.y.fromRed();
          }, L.prototype.mul = function(e) {
            return e = new (v())(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([ this ], [ e ]) : this.curve._wnafMul(this, e);
          }, L.prototype.mulAdd = function(e, t, r) {
            var n = [ this, t ], i = [ e, r ];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
          }, L.prototype.jmulAdd = function(e, t, r) {
            var n = [ this, t ], i = [ e, r ];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
          }, L.prototype.eq = function(e) {
            return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
          }, L.prototype.neg = function(e) {
            if (this.inf) return this;
            var t = this.curve.point(this.x, this.y.redNeg());
            if (e && this.precomputed) {
              var r = this.precomputed, n = function(e) {
                return e.neg();
              };
              t.precomputed = {
                naf: r.naf && {
                  wnd: r.naf.wnd,
                  points: r.naf.points.map(n)
                },
                doubles: r.doubles && {
                  step: r.doubles.step,
                  points: r.doubles.points.map(n)
                }
              };
            }
            return t;
          }, L.prototype.toJ = function() {
            return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
          }, C(D, T.BasePoint), j.prototype.jpoint = function(e, t, r) {
            return new D(this, e, t, r);
          }, D.prototype.toP = function() {
            if (this.isInfinity()) return this.curve.point(null, null);
            var e = this.z.redInvm(), t = e.redSqr(), r = this.x.redMul(t), n = this.y.redMul(t).redMul(e);
            return this.curve.point(r, n);
          }, D.prototype.neg = function() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          }, D.prototype.add = function(e) {
            if (this.isInfinity()) return e;
            if (e.isInfinity()) return this;
            var t = e.z.redSqr(), r = this.z.redSqr(), n = this.x.redMul(t), i = e.x.redMul(r), o = this.y.redMul(t.redMul(e.z)), s = e.y.redMul(r.redMul(this.z)), a = n.redSub(i), c = o.redSub(s);
            if (0 === a.cmpn(0)) return 0 !== c.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var f = a.redSqr(), u = f.redMul(a), h = n.redMul(f), d = c.redSqr().redIAdd(u).redISub(h).redISub(h), l = c.redMul(h.redISub(d)).redISub(o.redMul(u)), p = this.z.redMul(e.z).redMul(a);
            return this.curve.jpoint(d, l, p);
          }, D.prototype.mixedAdd = function(e) {
            if (this.isInfinity()) return e.toJ();
            if (e.isInfinity()) return this;
            var t = this.z.redSqr(), r = this.x, n = e.x.redMul(t), i = this.y, o = e.y.redMul(t).redMul(this.z), s = r.redSub(n), a = i.redSub(o);
            if (0 === s.cmpn(0)) return 0 !== a.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var c = s.redSqr(), f = c.redMul(s), u = r.redMul(c), h = a.redSqr().redIAdd(f).redISub(u).redISub(u), d = a.redMul(u.redISub(h)).redISub(i.redMul(f)), l = this.z.redMul(s);
            return this.curve.jpoint(h, d, l);
          }, D.prototype.dblp = function(e) {
            if (0 === e) return this;
            if (this.isInfinity()) return this;
            if (!e) return this.dbl();
            var t;
            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;
              for (t = 0; t < e; t++) r = r.dbl();
              return r;
            }
            var n = this.curve.a, i = this.curve.tinv, o = this.x, s = this.y, a = this.z, c = a.redSqr().redSqr(), f = s.redAdd(s);
            for (t = 0; t < e; t++) {
              var u = o.redSqr(), h = f.redSqr(), d = h.redSqr(), l = u.redAdd(u).redIAdd(u).redIAdd(n.redMul(c)), p = o.redMul(h), b = l.redSqr().redISub(p.redAdd(p)), y = p.redISub(b), g = l.redMul(y);
              g = g.redIAdd(g).redISub(d);
              var m = f.redMul(a);
              t + 1 < e && (c = c.redMul(d)), o = b, a = m, f = g;
            }
            return this.curve.jpoint(o, f.redMul(i), a);
          }, D.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
          }, D.prototype._zeroDbl = function() {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              s = s.redIAdd(s);
              var a = n.redAdd(n).redIAdd(n), c = a.redSqr().redISub(s).redISub(s), f = o.redIAdd(o);
              f = (f = f.redIAdd(f)).redIAdd(f), e = c, t = a.redMul(s.redISub(c)).redISub(f), r = this.y.redAdd(this.y);
            } else {
              var u = this.x.redSqr(), h = this.y.redSqr(), d = h.redSqr(), l = this.x.redAdd(h).redSqr().redISub(u).redISub(d);
              l = l.redIAdd(l);
              var p = u.redAdd(u).redIAdd(u), b = p.redSqr(), y = d.redIAdd(d);
              y = (y = y.redIAdd(y)).redIAdd(y), e = b.redISub(l).redISub(l), t = p.redMul(l.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);
            }
            return this.curve.jpoint(e, t, r);
          }, D.prototype._threeDbl = function() {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              s = s.redIAdd(s);
              var a = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), c = a.redSqr().redISub(s).redISub(s);
              e = c;
              var f = o.redIAdd(o);
              f = (f = f.redIAdd(f)).redIAdd(f), t = a.redMul(s.redISub(c)).redISub(f), r = this.y.redAdd(this.y);
            } else {
              var u = this.z.redSqr(), h = this.y.redSqr(), d = this.x.redMul(h), l = this.x.redSub(u).redMul(this.x.redAdd(u));
              l = l.redAdd(l).redIAdd(l);
              var p = d.redIAdd(d), b = (p = p.redIAdd(p)).redAdd(p);
              e = l.redSqr().redISub(b), r = this.y.redAdd(this.z).redSqr().redISub(h).redISub(u);
              var y = h.redSqr();
              y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = l.redMul(p.redISub(e)).redISub(y);
            }
            return this.curve.jpoint(e, t, r);
          }, D.prototype._dbl = function() {
            var e = this.curve.a, t = this.x, r = this.y, n = this.z, i = n.redSqr().redSqr(), o = t.redSqr(), s = r.redSqr(), a = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)), c = t.redAdd(t), f = (c = c.redIAdd(c)).redMul(s), u = a.redSqr().redISub(f.redAdd(f)), h = f.redISub(u), d = s.redSqr();
            d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
            var l = a.redMul(h).redISub(d), p = r.redAdd(r).redMul(n);
            return this.curve.jpoint(u, l, p);
          }, D.prototype.trpl = function() {
            if (!this.curve.zeroA) return this.dbl().add(this);
            var e = this.x.redSqr(), t = this.y.redSqr(), r = this.z.redSqr(), n = t.redSqr(), i = e.redAdd(e).redIAdd(e), o = i.redSqr(), s = this.x.redAdd(t).redSqr().redISub(e).redISub(n), a = (s = (s = (s = s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(), c = n.redIAdd(n);
            c = (c = (c = c.redIAdd(c)).redIAdd(c)).redIAdd(c);
            var f = i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(c), u = t.redMul(f);
            u = (u = u.redIAdd(u)).redIAdd(u);
            var h = this.x.redMul(a).redISub(u);
            h = (h = h.redIAdd(h)).redIAdd(h);
            var d = this.y.redMul(f.redMul(c.redISub(f)).redISub(s.redMul(a)));
            d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
            var l = this.z.redAdd(s).redSqr().redISub(r).redISub(a);
            return this.curve.jpoint(h, d, l);
          }, D.prototype.mul = function(e, t) {
            return e = new (v())(e, t), this.curve._wnafMul(this, e);
          }, D.prototype.eq = function(e) {
            if ("affine" === e.type) return this.eq(e.toJ());
            if (this === e) return !0;
            var t = this.z.redSqr(), r = e.z.redSqr();
            if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
            var n = t.redMul(this.z), i = r.redMul(e.z);
            return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);
          }, D.prototype.eqXToP = function(e) {
            var t = this.z.redSqr(), r = e.toRed(this.curve.red).redMul(t);
            if (0 === this.x.cmp(r)) return !0;
            for (var n = e.clone(), i = this.curve.redN.redMul(t); ;) {
              if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
              if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
            }
          }, D.prototype.inspect = function() {
            return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
          }, D.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0);
          };
          var U = S((function(e, t) {
            var r = t;
            r.base = T, r.short = B, r.mont = null, r.edwards = null;
          })), q = S((function(e, t) {
            var r, n = t, i = k.assert;
            function o(e) {
              "short" === e.type ? this.curve = new U.short(e) : "edwards" === e.type ? this.curve = new U.edwards(e) : this.curve = new U.mont(e), 
              this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, i(this.g.validate(), "Invalid curve"), i(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
            }
            function s(e, t) {
              Object.defineProperty(n, e, {
                configurable: !0,
                enumerable: !0,
                get: function() {
                  var r = new o(t);
                  return Object.defineProperty(n, e, {
                    configurable: !0,
                    enumerable: !0,
                    value: r
                  }), r;
                }
              });
            }
            n.PresetCurve = o, s("p192", {
              type: "short",
              prime: "p192",
              p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
              a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
              b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
              n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
              hash: _().sha256,
              gRed: !1,
              g: [ "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811" ]
            }), s("p224", {
              type: "short",
              prime: "p224",
              p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
              a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
              b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
              n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
              hash: _().sha256,
              gRed: !1,
              g: [ "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34" ]
            }), s("p256", {
              type: "short",
              prime: null,
              p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
              a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
              b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
              n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
              hash: _().sha256,
              gRed: !1,
              g: [ "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5" ]
            }), s("p384", {
              type: "short",
              prime: null,
              p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
              a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
              b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
              n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
              hash: _().sha384,
              gRed: !1,
              g: [ "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f" ]
            }), s("p521", {
              type: "short",
              prime: null,
              p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
              a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
              b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
              n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
              hash: _().sha512,
              gRed: !1,
              g: [ "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650" ]
            }), s("curve25519", {
              type: "mont",
              prime: "p25519",
              p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
              a: "76d06",
              b: "1",
              n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
              hash: _().sha256,
              gRed: !1,
              g: [ "9" ]
            }), s("ed25519", {
              type: "edwards",
              prime: "p25519",
              p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
              a: "-1",
              c: "1",
              d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
              n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
              hash: _().sha256,
              gRed: !1,
              g: [ "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658" ]
            });
            try {
              r = null.crash();
            } catch (e) {
              r = void 0;
            }
            s("secp256k1", {
              type: "short",
              prime: "k256",
              p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
              a: "0",
              b: "7",
              n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
              h: "1",
              hash: _().sha256,
              beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
              lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
              basis: [ {
                a: "3086d221a7d46bcde86c90e49284eb15",
                b: "-e4437ed6010e88286f547fa90abfe4c3"
              }, {
                a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                b: "3086d221a7d46bcde86c90e49284eb15"
              } ],
              gRed: !1,
              g: [ "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", r ]
            });
          }));
          function F(e) {
            if (!(this instanceof F)) return new F(e);
            this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, 
            this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
            var t = x.toArray(e.entropy, e.entropyEnc || "hex"), r = x.toArray(e.nonce, e.nonceEnc || "hex"), n = x.toArray(e.pers, e.persEnc || "hex");
            E(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, n);
          }
          var H = F;
          F.prototype._init = function(e, t, r) {
            var n = e.concat(t).concat(r);
            this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) this.K[i] = 0, this.V[i] = 1;
            this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
          }, F.prototype._hmac = function() {
            return new (_().hmac)(this.hash, this.K);
          }, F.prototype._update = function(e) {
            var t = this._hmac().update(this.V).update([ 0 ]);
            e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([ 1 ]).update(e).digest(), 
            this.V = this._hmac().update(this.V).digest());
          }, F.prototype.reseed = function(e, t, r, n) {
            "string" != typeof t && (n = r, r = t, t = null), e = x.toArray(e, t), r = x.toArray(r, n), E(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), 
            this._update(e.concat(r || [])), this._reseed = 1;
          }, F.prototype.generate = function(e, t, r, n) {
            if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
            "string" != typeof t && (n = r, r = t, t = null), r && (r = x.toArray(r, n || "hex"), this._update(r));
            for (var i = []; i.length < e; ) this.V = this._hmac().update(this.V).digest(), i = i.concat(this.V);
            var o = i.slice(0, e);
            return this._update(r), this._reseed++, x.encode(o, t);
          };
          var z = k.assert;
          function K(e, t) {
            this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
          }
          var V = K;
          K.fromPublic = function(e, t, r) {
            return t instanceof K ? t : new K(e, {
              pub: t,
              pubEnc: r
            });
          }, K.fromPrivate = function(e, t, r) {
            return t instanceof K ? t : new K(e, {
              priv: t,
              privEnc: r
            });
          }, K.prototype.validate = function() {
            var e = this.getPublic();
            return e.isInfinity() ? {
              result: !1,
              reason: "Invalid public key"
            } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
              result: !0,
              reason: null
            } : {
              result: !1,
              reason: "Public key * N != O"
            } : {
              result: !1,
              reason: "Public key is not a point"
            };
          }, K.prototype.getPublic = function(e, t) {
            return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
          }, K.prototype.getPrivate = function(e) {
            return "hex" === e ? this.priv.toString(16, 2) : this.priv;
          }, K.prototype._importPrivate = function(e, t) {
            this.priv = new (v())(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
          }, K.prototype._importPublic = function(e, t) {
            if (e.x || e.y) return "mont" === this.ec.curve.type ? z(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || z(e.x && e.y, "Need both x and y coordinate"), 
            void (this.pub = this.ec.curve.point(e.x, e.y));
            this.pub = this.ec.curve.decodePoint(e, t);
          }, K.prototype.derive = function(e) {
            return e.validate() || z(e.validate(), "public point not validated"), e.mul(this.priv).getX();
          }, K.prototype.sign = function(e, t, r) {
            return this.ec.sign(e, this, t, r);
          }, K.prototype.verify = function(e, t) {
            return this.ec.verify(e, t, this);
          }, K.prototype.inspect = function() {
            return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
          };
          var G = k.assert;
          function W(e, t) {
            if (e instanceof W) return e;
            this._importDER(e, t) || (G(e.r && e.s, "Signature without r or s"), this.r = new (v())(e.r, 16), this.s = new (v())(e.s, 16), 
            void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
          }
          var X = W;
          function Y() {
            this.place = 0;
          }
          function J(e, t) {
            var r = e[t.place++];
            if (!(128 & r)) return r;
            var n = 15 & r;
            if (0 === n || n > 4) return !1;
            for (var i = 0, o = 0, s = t.place; o < n; o++, s++) i <<= 8, i |= e[s], i >>>= 0;
            return !(i <= 127) && (t.place = s, i);
          }
          function $(e) {
            for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r; ) t++;
            return 0 === t ? e : e.slice(t);
          }
          function Z(e, t) {
            if (t < 128) e.push(t); else {
              var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
              for (e.push(128 | r); --r; ) e.push(t >>> (r << 3) & 255);
              e.push(t);
            }
          }
          W.prototype._importDER = function(e, t) {
            e = k.toArray(e, t);
            var r = new Y;
            if (48 !== e[r.place++]) return !1;
            var n = J(e, r);
            if (!1 === n) return !1;
            if (n + r.place !== e.length) return !1;
            if (2 !== e[r.place++]) return !1;
            var i = J(e, r);
            if (!1 === i) return !1;
            var o = e.slice(r.place, i + r.place);
            if (r.place += i, 2 !== e[r.place++]) return !1;
            var s = J(e, r);
            if (!1 === s) return !1;
            if (e.length !== s + r.place) return !1;
            var a = e.slice(r.place, s + r.place);
            if (0 === o[0]) {
              if (!(128 & o[1])) return !1;
              o = o.slice(1);
            }
            if (0 === a[0]) {
              if (!(128 & a[1])) return !1;
              a = a.slice(1);
            }
            return this.r = new (v())(o), this.s = new (v())(a), this.recoveryParam = null, !0;
          }, W.prototype.toDER = function(e) {
            var t = this.r.toArray(), r = this.s.toArray();
            for (128 & t[0] && (t = [ 0 ].concat(t)), 128 & r[0] && (r = [ 0 ].concat(r)), t = $(t), r = $(r); !(r[0] || 128 & r[1]); ) r = r.slice(1);
            var n = [ 2 ];
            Z(n, t.length), (n = n.concat(t)).push(2), Z(n, r.length);
            var i = n.concat(r), o = [ 48 ];
            return Z(o, i.length), o = o.concat(i), k.encode(o, e);
          };
          var Q = function() {
            throw new Error("unsupported");
          }, ee = k.assert;
          function te(e) {
            if (!(this instanceof te)) return new te(e);
            "string" == typeof e && (ee(Object.prototype.hasOwnProperty.call(q, e), "Unknown curve " + e), e = q[e]), e instanceof q.PresetCurve && (e = {
              curve: e
            }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, 
            this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
          }
          var re = te;
          te.prototype.keyPair = function(e) {
            return new V(this, e);
          }, te.prototype.keyFromPrivate = function(e, t) {
            return V.fromPrivate(this, e, t);
          }, te.prototype.keyFromPublic = function(e, t) {
            return V.fromPublic(this, e, t);
          }, te.prototype.genKeyPair = function(e) {
            e || (e = {});
            for (var t = new H({
              hash: this.hash,
              pers: e.pers,
              persEnc: e.persEnc || "utf8",
              entropy: e.entropy || Q(this.hash.hmacStrength),
              entropyEnc: e.entropy && e.entropyEnc || "utf8",
              nonce: this.n.toArray()
            }), r = this.n.byteLength(), n = this.n.sub(new (v())(2)); ;) {
              var i = new (v())(t.generate(r));
              if (!(i.cmp(n) > 0)) return i.iaddn(1), this.keyFromPrivate(i);
            }
          }, te.prototype._truncateToN = function(e, t) {
            var r = 8 * e.byteLength() - this.n.bitLength();
            return r > 0 && (e = e.ushrn(r)), !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
          }, te.prototype.sign = function(e, t, r, n) {
            "object" == typeof r && (n = r, r = null), n || (n = {}), t = this.keyFromPrivate(t, r), e = this._truncateToN(new (v())(e, 16));
            for (var i = this.n.byteLength(), o = t.getPrivate().toArray("be", i), s = e.toArray("be", i), a = new H({
              hash: this.hash,
              entropy: o,
              nonce: s,
              pers: n.pers,
              persEnc: n.persEnc || "utf8"
            }), c = this.n.sub(new (v())(1)), f = 0; ;f++) {
              var u = n.k ? n.k(f) : new (v())(a.generate(this.n.byteLength()));
              if (!((u = this._truncateToN(u, !0)).cmpn(1) <= 0 || u.cmp(c) >= 0)) {
                var h = this.g.mul(u);
                if (!h.isInfinity()) {
                  var d = h.getX(), l = d.umod(this.n);
                  if (0 !== l.cmpn(0)) {
                    var p = u.invm(this.n).mul(l.mul(t.getPrivate()).iadd(e));
                    if (0 !== (p = p.umod(this.n)).cmpn(0)) {
                      var b = (h.getY().isOdd() ? 1 : 0) | (0 !== d.cmp(l) ? 2 : 0);
                      return n.canonical && p.cmp(this.nh) > 0 && (p = this.n.sub(p), b ^= 1), new X({
                        r: l,
                        s: p,
                        recoveryParam: b
                      });
                    }
                  }
                }
              }
            }
          }, te.prototype.verify = function(e, t, r, n) {
            e = this._truncateToN(new (v())(e, 16)), r = this.keyFromPublic(r, n);
            var i = (t = new X(t, "hex")).r, o = t.s;
            if (i.cmpn(1) < 0 || i.cmp(this.n) >= 0) return !1;
            if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
            var s, a = o.invm(this.n), c = a.mul(e).umod(this.n), f = a.mul(i).umod(this.n);
            return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(c, r.getPublic(), f)).isInfinity() && s.eqXToP(i) : !(s = this.g.mulAdd(c, r.getPublic(), f)).isInfinity() && 0 === s.getX().umod(this.n).cmp(i);
          }, te.prototype.recoverPubKey = function(e, t, r, n) {
            ee((3 & r) === r, "The recovery param is more than two bits"), t = new X(t, n);
            var i = this.n, o = new (v())(e), s = t.r, a = t.s, c = 1 & r, f = r >> 1;
            if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && f) throw new Error("Unable to find sencond key candinate");
            s = f ? this.curve.pointFromX(s.add(this.curve.n), c) : this.curve.pointFromX(s, c);
            var u = t.r.invm(i), h = i.sub(o).mul(u).umod(i), d = a.mul(u).umod(i);
            return this.g.mulAdd(h, s, d);
          }, te.prototype.getKeyRecoveryParam = function(e, t, r, n) {
            if (null !== (t = new X(t, n)).recoveryParam) return t.recoveryParam;
            for (var i = 0; i < 4; i++) {
              var o;
              try {
                o = this.recoverPubKey(e, t, i);
              } catch (e) {
                continue;
              }
              if (o.eq(r)) return i;
            }
            throw new Error("Unable to find valid recovery factor");
          };
          var ne = S((function(e, t) {
            var r = t;
            r.version = "6.5.4", r.utils = k, r.rand = function() {
              throw new Error("unsupported");
            }, r.curve = U, r.curves = q, r.ec = re, r.eddsa = null;
          })).ec;
          const ie = new f.Yd("signing-key/5.6.2");
          let oe = null;
          function se() {
            return oe || (oe = new ne("secp256k1")), oe;
          }
          class ae {
            constructor(e) {
              (0, c.zG)(this, "curve", "secp256k1"), (0, c.zG)(this, "privateKey", (0, o.Dv)(e)), 32 !== (0, o.E1)(this.privateKey) && ie.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
              const t = se().keyFromPrivate((0, o.lE)(this.privateKey));
              (0, c.zG)(this, "publicKey", "0x" + t.getPublic(!1, "hex")), (0, c.zG)(this, "compressedPublicKey", "0x" + t.getPublic(!0, "hex")), 
              (0, c.zG)(this, "_isSigningKey", !0);
            }
            _addPoint(e) {
              const t = se().keyFromPublic((0, o.lE)(this.publicKey)), r = se().keyFromPublic((0, o.lE)(e));
              return "0x" + t.pub.add(r.pub).encodeCompressed("hex");
            }
            signDigest(e) {
              const t = se().keyFromPrivate((0, o.lE)(this.privateKey)), r = (0, o.lE)(e);
              32 !== r.length && ie.throwArgumentError("bad digest length", "digest", e);
              const n = t.sign(r, {
                canonical: !0
              });
              return (0, o.N)({
                recoveryParam: n.recoveryParam,
                r: (0, o.$m)("0x" + n.r.toString(16), 32),
                s: (0, o.$m)("0x" + n.s.toString(16), 32)
              });
            }
            computeSharedSecret(e) {
              const t = se().keyFromPrivate((0, o.lE)(this.privateKey)), r = se().keyFromPublic((0, o.lE)(ce(e)));
              return (0, o.$m)("0x" + t.derive(r.getPublic()).toString(16), 32);
            }
            static isSigningKey(e) {
              return !(!e || !e._isSigningKey);
            }
          }
          function ce(e, t) {
            const r = (0, o.lE)(e);
            if (32 === r.length) {
              const e = new ae(r);
              return t ? "0x" + se().keyFromPrivate(r).getPublic(!0, "hex") : e.publicKey;
            }
            return 33 === r.length ? t ? (0, o.Dv)(r) : "0x" + se().keyFromPublic(r).getPublic(!1, "hex") : 65 === r.length ? t ? "0x" + se().keyFromPublic(r).getPublic(!0, "hex") : (0, 
            o.Dv)(r) : ie.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
          }
          const fe = new f.Yd("transactions/5.6.2");
          var ue;
          function he(e) {
            return "0x" === e ? null : (0, n.Kn)(e);
          }
          function de(e) {
            return "0x" === e ? s._Y : i.O$.from(e);
          }
          !function(e) {
            e[e.legacy = 0] = "legacy", e[e.eip2930 = 1] = "eip2930", e[e.eip1559 = 2] = "eip1559";
          }(ue || (ue = {}));
          const le = [ {
            name: "nonce",
            maxLength: 32,
            numeric: !0
          }, {
            name: "gasPrice",
            maxLength: 32,
            numeric: !0
          }, {
            name: "gasLimit",
            maxLength: 32,
            numeric: !0
          }, {
            name: "to",
            length: 20
          }, {
            name: "value",
            maxLength: 32,
            numeric: !0
          }, {
            name: "data"
          } ], pe = {
            chainId: !0,
            data: !0,
            gasLimit: !0,
            gasPrice: !0,
            nonce: !0,
            to: !0,
            type: !0,
            value: !0
          };
          function be(e) {
            const t = ce(e);
            return (0, n.Kn)((0, o.p3)((0, a.w)((0, o.p3)(t, 1)), 12));
          }
          function ye(e, t) {
            return be(function(e, t) {
              const r = (0, o.N)(t), n = {
                r: (0, o.lE)(r.r),
                s: (0, o.lE)(r.s)
              };
              return "0x" + se().recoverPubKey((0, o.lE)(e), n, r.recoveryParam).encode("hex", !1);
            }((0, o.lE)(e), t));
          }
          function ge(e, t) {
            const r = (0, o.G1)(i.O$.from(e).toHexString());
            return r.length > 32 && fe.throwArgumentError("invalid length for " + t, "transaction:" + t, e), r;
          }
          function me(e, t) {
            return {
              address: (0, n.Kn)(e),
              storageKeys: (t || []).map(((t, r) => (32 !== (0, o.E1)(t) && fe.throwArgumentError("invalid access list storageKey", `accessList[${e}:${r}]`, t), 
              t.toLowerCase())))
            };
          }
          function ve(e) {
            if (Array.isArray(e)) return e.map(((e, t) => Array.isArray(e) ? (e.length > 2 && fe.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${t}]`, e), 
            me(e[0], e[1])) : me(e.address, e.storageKeys)));
            const t = Object.keys(e).map((t => {
              const r = e[t].reduce(((e, t) => (e[t] = !0, e)), {});
              return me(t, Object.keys(r).sort());
            }));
            return t.sort(((e, t) => e.address.localeCompare(t.address))), t;
          }
          function we(e) {
            return ve(e).map((e => [ e.address, e.storageKeys ]));
          }
          function _e(e, t) {
            if (null != e.gasPrice) {
              const t = i.O$.from(e.gasPrice), r = i.O$.from(e.maxFeePerGas || 0);
              t.eq(r) || fe.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                gasPrice: t,
                maxFeePerGas: r
              });
            }
            const r = [ ge(e.chainId || 0, "chainId"), ge(e.nonce || 0, "nonce"), ge(e.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), ge(e.maxFeePerGas || 0, "maxFeePerGas"), ge(e.gasLimit || 0, "gasLimit"), null != e.to ? (0, 
            n.Kn)(e.to) : "0x", ge(e.value || 0, "value"), e.data || "0x", we(e.accessList || []) ];
            if (t) {
              const e = (0, o.N)(t);
              r.push(ge(e.recoveryParam, "recoveryParam")), r.push((0, o.G1)(e.r)), r.push((0, o.G1)(e.s));
            }
            return (0, o.xs)([ "0x02", p(r) ]);
          }
          function Se(e, t) {
            const r = [ ge(e.chainId || 0, "chainId"), ge(e.nonce || 0, "nonce"), ge(e.gasPrice || 0, "gasPrice"), ge(e.gasLimit || 0, "gasLimit"), null != e.to ? (0, 
            n.Kn)(e.to) : "0x", ge(e.value || 0, "value"), e.data || "0x", we(e.accessList || []) ];
            if (t) {
              const e = (0, o.N)(t);
              r.push(ge(e.recoveryParam, "recoveryParam")), r.push((0, o.G1)(e.r)), r.push((0, o.G1)(e.s));
            }
            return (0, o.xs)([ "0x01", p(r) ]);
          }
          function Ee(e, t) {
            if (null == e.type || 0 === e.type) return null != e.accessList && fe.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", e), 
            function(e, t) {
              (0, c.uj)(e, pe);
              const r = [];
              le.forEach((function(t) {
                let n = e[t.name] || [];
                const i = {};
                t.numeric && (i.hexPad = "left"), n = (0, o.lE)((0, o.Dv)(n, i)), t.length && n.length !== t.length && n.length > 0 && fe.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, n), 
                t.maxLength && (n = (0, o.G1)(n), n.length > t.maxLength && fe.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, n)), 
                r.push((0, o.Dv)(n));
              }));
              let n = 0;
              if (null != e.chainId ? (n = e.chainId, "number" != typeof n && fe.throwArgumentError("invalid transaction.chainId", "transaction", e)) : t && !(0, 
              o.Zq)(t) && t.v > 28 && (n = Math.floor((t.v - 35) / 2)), 0 !== n && (r.push((0, o.Dv)(n)), r.push("0x"), r.push("0x")), 
              !t) return p(r);
              const i = (0, o.N)(t);
              let s = 27 + i.recoveryParam;
              return 0 !== n ? (r.pop(), r.pop(), r.pop(), s += 2 * n + 8, i.v > 28 && i.v !== s && fe.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t)) : i.v !== s && fe.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t), 
              r.push((0, o.Dv)(s)), r.push((0, o.G1)((0, o.lE)(i.r))), r.push((0, o.G1)((0, o.lE)(i.s))), p(r);
            }(e, t);
            switch (e.type) {
             case 1:
              return Se(e, t);

             case 2:
              return _e(e, t);
            }
            return fe.throwError(`unsupported transaction type: ${e.type}`, f.Yd.errors.UNSUPPORTED_OPERATION, {
              operation: "serializeTransaction",
              transactionType: e.type
            });
          }
          function Ae(e, t, r) {
            try {
              const r = de(t[0]).toNumber();
              if (0 !== r && 1 !== r) throw new Error("bad recid");
              e.v = r;
            } catch (e) {
              fe.throwArgumentError("invalid v for transaction type: 1", "v", t[0]);
            }
            e.r = (0, o.$m)(t[1], 32), e.s = (0, o.$m)(t[2], 32);
            try {
              const t = (0, a.w)(r(e));
              e.from = ye(t, {
                r: e.r,
                s: e.s,
                recoveryParam: e.v
              });
            } catch (e) {}
          }
          function xe(e) {
            const t = (0, o.lE)(e);
            if (t[0] > 127) return function(e) {
              const t = g(e);
              9 !== t.length && 6 !== t.length && fe.throwArgumentError("invalid raw transaction", "rawTransaction", e);
              const r = {
                nonce: de(t[0]).toNumber(),
                gasPrice: de(t[1]),
                gasLimit: de(t[2]),
                to: he(t[3]),
                value: de(t[4]),
                data: t[5],
                chainId: 0
              };
              if (6 === t.length) return r;
              try {
                r.v = i.O$.from(t[6]).toNumber();
              } catch (e) {
                return r;
              }
              if (r.r = (0, o.$m)(t[7], 32), r.s = (0, o.$m)(t[8], 32), i.O$.from(r.r).isZero() && i.O$.from(r.s).isZero()) r.chainId = r.v, 
              r.v = 0; else {
                r.chainId = Math.floor((r.v - 35) / 2), r.chainId < 0 && (r.chainId = 0);
                let n = r.v - 27;
                const i = t.slice(0, 6);
                0 !== r.chainId && (i.push((0, o.Dv)(r.chainId)), i.push("0x"), i.push("0x"), n -= 2 * r.chainId + 8);
                const s = (0, a.w)(p(i));
                try {
                  r.from = ye(s, {
                    r: (0, o.Dv)(r.r),
                    s: (0, o.Dv)(r.s),
                    recoveryParam: n
                  });
                } catch (e) {}
                r.hash = (0, a.w)(e);
              }
              return r.type = null, r;
            }(t);
            switch (t[0]) {
             case 1:
              return function(e) {
                const t = g(e.slice(1));
                8 !== t.length && 11 !== t.length && fe.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, 
                o.Dv)(e));
                const r = {
                  type: 1,
                  chainId: de(t[0]).toNumber(),
                  nonce: de(t[1]).toNumber(),
                  gasPrice: de(t[2]),
                  gasLimit: de(t[3]),
                  to: he(t[4]),
                  value: de(t[5]),
                  data: t[6],
                  accessList: ve(t[7])
                };
                return 8 === t.length || (r.hash = (0, a.w)(e), Ae(r, t.slice(8), Se)), r;
              }(t);

             case 2:
              return function(e) {
                const t = g(e.slice(1));
                9 !== t.length && 12 !== t.length && fe.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, 
                o.Dv)(e));
                const r = de(t[2]), n = de(t[3]), i = {
                  type: 2,
                  chainId: de(t[0]).toNumber(),
                  nonce: de(t[1]).toNumber(),
                  maxPriorityFeePerGas: r,
                  maxFeePerGas: n,
                  gasPrice: null,
                  gasLimit: de(t[4]),
                  to: he(t[5]),
                  value: de(t[6]),
                  data: t[7],
                  accessList: ve(t[8])
                };
                return 9 === t.length || (i.hash = (0, a.w)(e), Ae(i, t.slice(9), _e)), i;
              }(t);
            }
            return fe.throwError(`unsupported transaction type: ${t[0]}`, f.Yd.errors.UNSUPPORTED_OPERATION, {
              operation: "parseTransaction",
              transactionType: t[0]
            });
          }
        },
        5508: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ComposedStore = void 0;
          const n = r(8877);
          class i extends n.ObservableStore {
            constructor(e) {
              super({}), this._children = e || {}, Object.keys(this._children).forEach((e => {
                const t = this._children[e];
                this._addChild(e, t);
              }));
            }
            _addChild(e, t) {
              const r = t => {
                const r = this.getState();
                r[e] = t, this.putState(r);
              };
              t.subscribe(r), r(t.getState());
            }
          }
          t.ComposedStore = i;
        },
        401: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.MergedStore = void 0;
          const n = r(8877);
          class i extends n.ObservableStore {
            constructor(e = []) {
              super({}), this._children = e, e.forEach((e => this._addChild(e))), this._updateWholeState();
            }
            _addChild(e) {
              e.subscribe((() => this._updateWholeState()));
            }
            _updateWholeState() {
              const e = this._children.map((e => e.getState())), t = Object.assign({}, ...e);
              this.putState(t);
            }
          }
          t.MergedStore = i;
        },
        8877: function(e, t, r) {
          "use strict";
          var n = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ObservableStore = void 0;
          const i = n(r(9394));
          class o extends i.default {
            constructor(e) {
              super(), this._state = e || {};
            }
            getState() {
              return this._getState();
            }
            putState(e) {
              this._putState(e), this.emit("update", e);
            }
            updateState(e) {
              if (e && "object" == typeof e) {
                const t = this.getState();
                this.putState(Object.assign(Object.assign({}, t), e));
              } else this.putState(e);
            }
            subscribe(e) {
              this.on("update", e);
            }
            unsubscribe(e) {
              this.removeListener("update", e);
            }
            _getState() {
              return this._state;
            }
            _putState(e) {
              this._state = e;
            }
          }
          t.ObservableStore = o;
        },
        7969: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.storeAsStream = void 0;
          const n = r(2830);
          class i extends n.Duplex {
            constructor(e) {
              super({
                objectMode: !0
              }), this.resume(), this.handler = e => this.push(e), this.obsStore = e, this.obsStore.subscribe(this.handler);
            }
            pipe(e, t) {
              const r = super.pipe(e, t);
              return e.write(this.obsStore.getState()), r;
            }
            _write(e, t, r) {
              this.obsStore.putState(e), r();
            }
            _read(e) {}
            _destroy(e, t) {
              this.obsStore.unsubscribe(this.handler), super._destroy(e, t);
            }
          }
          t.storeAsStream = function(e) {
            return new i(e);
          };
        },
        2724: function(e, t, r) {
          "use strict";
          var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
            void 0 === n && (n = r), Object.defineProperty(e, n, {
              enumerable: !0,
              get: function() {
                return t[r];
              }
            });
          } : function(e, t, r, n) {
            void 0 === n && (n = r), e[n] = t[r];
          }), i = this && this.__exportStar || function(e, t) {
            for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), i(r(7969), t), i(r(5508), t), i(r(401), t), i(r(8877), t), i(r(6546), t);
        },
        6546: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.storeTransformStream = void 0;
          const n = r(4650);
          t.storeTransformStream = function(e) {
            return n.obj(((t, r, n) => {
              try {
                return void n(null, e(t));
              } catch (e) {
                return void n(e);
              }
            }));
          };
        },
        9394: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          const n = r(7187);
          function i(e, t, r) {
            try {
              Reflect.apply(e, t, r);
            } catch (e) {
              setTimeout((() => {
                throw e;
              }));
            }
          }
          class o extends n.EventEmitter {
            emit(e, ...t) {
              let r = "error" === e;
              const n = this._events;
              if (void 0 !== n) r = r && void 0 === n.error; else if (!r) return !1;
              if (r) {
                let e;
                if (t.length > 0 && ([e] = t), e instanceof Error) throw e;
                const r = new Error("Unhandled error." + (e ? ` (${e.message})` : ""));
                throw r.context = e, r;
              }
              const o = n[e];
              if (void 0 === o) return !1;
              if ("function" == typeof o) i(o, this, t); else {
                const e = o.length, r = function(e) {
                  const t = e.length, r = new Array(t);
                  for (let n = 0; n < t; n += 1) r[n] = e[n];
                  return r;
                }(o);
                for (let n = 0; n < e; n += 1) i(r[n], this, t);
              }
              return !0;
            }
          }
          t.default = o;
        },
        2450: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer, i = new (0, r(6266).ec)("secp256k1"), o = r.g.crypto || r.g.msCrypto || {}, s = o.subtle || o.webkitSubtle, a = r(5835);
          const c = n.from("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", "hex"), f = n.alloc(32, 0);
          function u(e, t) {
            if (!e) throw new Error(t || "Assertion failed");
          }
          function h(e) {
            return t = e, !(!n.isBuffer(t) || 32 !== t.length) && e.compare(f) > 0 && e.compare(c) < 0;
            var t;
          }
          function d(e) {
            var t = new Uint8Array(e);
            return void 0 === o.getRandomValues ? n.from(a.randomBytes(e)) : (o.getRandomValues(t), n.from(t));
          }
          function l(e) {
            return function(t, r, i) {
              return new Promise((function(o) {
                if (s) return s.importKey("raw", r, {
                  name: "AES-CBC"
                }, !1, [ e ]).then((function(r) {
                  var n = {
                    name: "AES-CBC",
                    iv: t
                  };
                  return s[e](n, r, i);
                })).then((function(e) {
                  o(n.from(new Uint8Array(e)));
                }));
                if ("encrypt" === e) {
                  var c = a.createCipheriv("aes-256-cbc", r, t);
                  let e = c.update(i), s = c.final();
                  o(n.concat([ e, s ]));
                } else if ("decrypt" === e) {
                  var f = a.createDecipheriv("aes-256-cbc", r, t);
                  let e = f.update(i), s = f.final();
                  o(n.concat([ e, s ]));
                }
              }));
            };
          }
          l("encrypt");
          var p = l("decrypt");
          t.oq = function() {
            for (var e = d(32); !h(e); ) e = d(32);
            return e;
          }, t.rc = function(e) {
            return u(32 === e.length, "Bad private key"), u(h(e), "Bad private key"), n.from(i.keyFromPrivate(e).getPublic("arr"));
          }, t.pe = function(e, t) {
            var r, o, s;
            return (o = e, s = t.ephemPublicKey, new Promise((function(e) {
              u(n.isBuffer(o), "Bad private key"), u(n.isBuffer(s), "Bad public key"), u(32 === o.length, "Bad private key"), u(h(o), "Bad private key"), 
              u(65 === s.length || 33 === s.length, "Bad public key"), 65 === s.length && u(4 === s[0], "Bad public key"), 33 === s.length && u(2 === s[0] || 3 === s[0], "Bad public key");
              var t = i.keyFromPrivate(o), r = i.keyFromPublic(s), a = t.derive(r.getPublic());
              e(n.from(a.toArray()));
            }))).then((function(e) {
              return t = e, new Promise((function(e) {
                var r = a.createHash("sha512").update(t).digest();
                e(new Uint8Array(r));
              }));
              var t;
            })).then((function(e) {
              r = e.slice(0, 32);
              var i, o, s, c = e.slice(32), f = n.concat([ t.iv, t.ephemPublicKey, t.ciphertext ]);
              return i = c, o = f, s = t.mac, new Promise((function(e) {
                var t = a.createHmac("sha256", n.from(i));
                t.update(o), e(function(e, t) {
                  if (e.length !== t.length) return !1;
                  for (var r = 0, n = 0; n < e.length; n++) r |= e[n] ^ t[n];
                  return 0 === r;
                }(t.digest(), s));
              }));
            })).then((function(e) {
              return u(e, "Bad MAC"), p(t.iv, r, t.ciphertext);
            })).then((function(e) {
              return n.from(new Uint8Array(e));
            }));
          };
        },
        9809: (e, t, r) => {
          "use strict";
          const n = t;
          n.bignum = r(3550), n.define = r(2500).define, n.base = r(1979), n.constants = r(6826), n.decoders = r(8307), n.encoders = r(6579);
        },
        2500: (e, t, r) => {
          "use strict";
          const n = r(6579), i = r(8307), o = r(5717);
          function s(e, t) {
            this.name = e, this.body = t, this.decoders = {}, this.encoders = {};
          }
          t.define = function(e, t) {
            return new s(e, t);
          }, s.prototype._createNamed = function(e) {
            const t = this.name;
            function r(e) {
              this._initNamed(e, t);
            }
            return o(r, e), r.prototype._initNamed = function(t, r) {
              e.call(this, t, r);
            }, new r(this);
          }, s.prototype._getDecoder = function(e) {
            return e = e || "der", this.decoders.hasOwnProperty(e) || (this.decoders[e] = this._createNamed(i[e])), this.decoders[e];
          }, s.prototype.decode = function(e, t, r) {
            return this._getDecoder(t).decode(e, r);
          }, s.prototype._getEncoder = function(e) {
            return e = e || "der", this.encoders.hasOwnProperty(e) || (this.encoders[e] = this._createNamed(n[e])), this.encoders[e];
          }, s.prototype.encode = function(e, t, r) {
            return this._getEncoder(t).encode(e, r);
          };
        },
        6625: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(8465).b, o = r(2399).Buffer;
          function s(e, t) {
            i.call(this, t), o.isBuffer(e) ? (this.base = e, this.offset = 0, this.length = e.length) : this.error("Input not Buffer");
          }
          function a(e, t) {
            if (Array.isArray(e)) this.length = 0, this.value = e.map((function(e) {
              return a.isEncoderBuffer(e) || (e = new a(e, t)), this.length += e.length, e;
            }), this); else if ("number" == typeof e) {
              if (!(0 <= e && e <= 255)) return t.error("non-byte EncoderBuffer value");
              this.value = e, this.length = 1;
            } else if ("string" == typeof e) this.value = e, this.length = o.byteLength(e); else {
              if (!o.isBuffer(e)) return t.error("Unsupported type: " + typeof e);
              this.value = e, this.length = e.length;
            }
          }
          n(s, i), t.C = s, s.isDecoderBuffer = function(e) {
            return e instanceof s || "object" == typeof e && o.isBuffer(e.base) && "DecoderBuffer" === e.constructor.name && "number" == typeof e.offset && "number" == typeof e.length && "function" == typeof e.save && "function" == typeof e.restore && "function" == typeof e.isEmpty && "function" == typeof e.readUInt8 && "function" == typeof e.skip && "function" == typeof e.raw;
          }, s.prototype.save = function() {
            return {
              offset: this.offset,
              reporter: i.prototype.save.call(this)
            };
          }, s.prototype.restore = function(e) {
            const t = new s(this.base);
            return t.offset = e.offset, t.length = this.offset, this.offset = e.offset, i.prototype.restore.call(this, e.reporter), 
            t;
          }, s.prototype.isEmpty = function() {
            return this.offset === this.length;
          }, s.prototype.readUInt8 = function(e) {
            return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(e || "DecoderBuffer overrun");
          }, s.prototype.skip = function(e, t) {
            if (!(this.offset + e <= this.length)) return this.error(t || "DecoderBuffer overrun");
            const r = new s(this.base);
            return r._reporterState = this._reporterState, r.offset = this.offset, r.length = this.offset + e, this.offset += e, r;
          }, s.prototype.raw = function(e) {
            return this.base.slice(e ? e.offset : this.offset, this.length);
          }, t.R = a, a.isEncoderBuffer = function(e) {
            return e instanceof a || "object" == typeof e && "EncoderBuffer" === e.constructor.name && "number" == typeof e.length && "function" == typeof e.join;
          }, a.prototype.join = function(e, t) {
            return e || (e = o.alloc(this.length)), t || (t = 0), 0 === this.length || (Array.isArray(this.value) ? this.value.forEach((function(r) {
              r.join(e, t), t += r.length;
            })) : ("number" == typeof this.value ? e[t] = this.value : "string" == typeof this.value ? e.write(this.value, t) : o.isBuffer(this.value) && this.value.copy(e, t), 
            t += this.length)), e;
          };
        },
        1979: (e, t, r) => {
          "use strict";
          const n = t;
          n.Reporter = r(8465).b, n.DecoderBuffer = r(6625).C, n.EncoderBuffer = r(6625).R, n.Node = r(1949);
        },
        1949: (e, t, r) => {
          "use strict";
          const n = r(8465).b, i = r(6625).R, o = r(6625).C, s = r(9746), a = [ "seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr" ], c = [ "key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains" ].concat(a);
          function f(e, t, r) {
            const n = {};
            this._baseState = n, n.name = r, n.enc = e, n.parent = t || null, n.children = null, n.tag = null, n.args = null, n.reverseArgs = null, 
            n.choice = null, n.optional = !1, n.any = !1, n.obj = !1, n.use = null, n.useDecoder = null, n.key = null, n.default = null, 
            n.explicit = null, n.implicit = null, n.contains = null, n.parent || (n.children = [], this._wrap());
          }
          e.exports = f;
          const u = [ "enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains" ];
          f.prototype.clone = function() {
            const e = this._baseState, t = {};
            u.forEach((function(r) {
              t[r] = e[r];
            }));
            const r = new this.constructor(t.parent);
            return r._baseState = t, r;
          }, f.prototype._wrap = function() {
            const e = this._baseState;
            c.forEach((function(t) {
              this[t] = function() {
                const r = new this.constructor(this);
                return e.children.push(r), r[t].apply(r, arguments);
              };
            }), this);
          }, f.prototype._init = function(e) {
            const t = this._baseState;
            s(null === t.parent), e.call(this), t.children = t.children.filter((function(e) {
              return e._baseState.parent === this;
            }), this), s.equal(t.children.length, 1, "Root node can have only one child");
          }, f.prototype._useArgs = function(e) {
            const t = this._baseState, r = e.filter((function(e) {
              return e instanceof this.constructor;
            }), this);
            e = e.filter((function(e) {
              return !(e instanceof this.constructor);
            }), this), 0 !== r.length && (s(null === t.children), t.children = r, r.forEach((function(e) {
              e._baseState.parent = this;
            }), this)), 0 !== e.length && (s(null === t.args), t.args = e, t.reverseArgs = e.map((function(e) {
              if ("object" != typeof e || e.constructor !== Object) return e;
              const t = {};
              return Object.keys(e).forEach((function(r) {
                r == (0 | r) && (r |= 0);
                const n = e[r];
                t[n] = r;
              })), t;
            })));
          }, [ "_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool" ].forEach((function(e) {
            f.prototype[e] = function() {
              const t = this._baseState;
              throw new Error(e + " not implemented for encoding: " + t.enc);
            };
          })), a.forEach((function(e) {
            f.prototype[e] = function() {
              const t = this._baseState, r = Array.prototype.slice.call(arguments);
              return s(null === t.tag), t.tag = e, this._useArgs(r), this;
            };
          })), f.prototype.use = function(e) {
            s(e);
            const t = this._baseState;
            return s(null === t.use), t.use = e, this;
          }, f.prototype.optional = function() {
            return this._baseState.optional = !0, this;
          }, f.prototype.def = function(e) {
            const t = this._baseState;
            return s(null === t.default), t.default = e, t.optional = !0, this;
          }, f.prototype.explicit = function(e) {
            const t = this._baseState;
            return s(null === t.explicit && null === t.implicit), t.explicit = e, this;
          }, f.prototype.implicit = function(e) {
            const t = this._baseState;
            return s(null === t.explicit && null === t.implicit), t.implicit = e, this;
          }, f.prototype.obj = function() {
            const e = this._baseState, t = Array.prototype.slice.call(arguments);
            return e.obj = !0, 0 !== t.length && this._useArgs(t), this;
          }, f.prototype.key = function(e) {
            const t = this._baseState;
            return s(null === t.key), t.key = e, this;
          }, f.prototype.any = function() {
            return this._baseState.any = !0, this;
          }, f.prototype.choice = function(e) {
            const t = this._baseState;
            return s(null === t.choice), t.choice = e, this._useArgs(Object.keys(e).map((function(t) {
              return e[t];
            }))), this;
          }, f.prototype.contains = function(e) {
            const t = this._baseState;
            return s(null === t.use), t.contains = e, this;
          }, f.prototype._decode = function(e, t) {
            const r = this._baseState;
            if (null === r.parent) return e.wrapResult(r.children[0]._decode(e, t));
            let n, i = r.default, s = !0, a = null;
            if (null !== r.key && (a = e.enterKey(r.key)), r.optional) {
              let n = null;
              if (null !== r.explicit ? n = r.explicit : null !== r.implicit ? n = r.implicit : null !== r.tag && (n = r.tag), null !== n || r.any) {
                if (s = this._peekTag(e, n, r.any), e.isError(s)) return s;
              } else {
                const n = e.save();
                try {
                  null === r.choice ? this._decodeGeneric(r.tag, e, t) : this._decodeChoice(e, t), s = !0;
                } catch (e) {
                  s = !1;
                }
                e.restore(n);
              }
            }
            if (r.obj && s && (n = e.enterObject()), s) {
              if (null !== r.explicit) {
                const t = this._decodeTag(e, r.explicit);
                if (e.isError(t)) return t;
                e = t;
              }
              const n = e.offset;
              if (null === r.use && null === r.choice) {
                let t;
                r.any && (t = e.save());
                const n = this._decodeTag(e, null !== r.implicit ? r.implicit : r.tag, r.any);
                if (e.isError(n)) return n;
                r.any ? i = e.raw(t) : e = n;
              }
              if (t && t.track && null !== r.tag && t.track(e.path(), n, e.length, "tagged"), t && t.track && null !== r.tag && t.track(e.path(), e.offset, e.length, "content"), 
              r.any || (i = null === r.choice ? this._decodeGeneric(r.tag, e, t) : this._decodeChoice(e, t)), e.isError(i)) return i;
              if (r.any || null !== r.choice || null === r.children || r.children.forEach((function(r) {
                r._decode(e, t);
              })), r.contains && ("octstr" === r.tag || "bitstr" === r.tag)) {
                const n = new o(i);
                i = this._getUse(r.contains, e._reporterState.obj)._decode(n, t);
              }
            }
            return r.obj && s && (i = e.leaveObject(n)), null === r.key || null === i && !0 !== s ? null !== a && e.exitKey(a) : e.leaveKey(a, r.key, i), 
            i;
          }, f.prototype._decodeGeneric = function(e, t, r) {
            const n = this._baseState;
            return "seq" === e || "set" === e ? null : "seqof" === e || "setof" === e ? this._decodeList(t, e, n.args[0], r) : /str$/.test(e) ? this._decodeStr(t, e, r) : "objid" === e && n.args ? this._decodeObjid(t, n.args[0], n.args[1], r) : "objid" === e ? this._decodeObjid(t, null, null, r) : "gentime" === e || "utctime" === e ? this._decodeTime(t, e, r) : "null_" === e ? this._decodeNull(t, r) : "bool" === e ? this._decodeBool(t, r) : "objDesc" === e ? this._decodeStr(t, e, r) : "int" === e || "enum" === e ? this._decodeInt(t, n.args && n.args[0], r) : null !== n.use ? this._getUse(n.use, t._reporterState.obj)._decode(t, r) : t.error("unknown tag: " + e);
          }, f.prototype._getUse = function(e, t) {
            const r = this._baseState;
            return r.useDecoder = this._use(e, t), s(null === r.useDecoder._baseState.parent), r.useDecoder = r.useDecoder._baseState.children[0], 
            r.implicit !== r.useDecoder._baseState.implicit && (r.useDecoder = r.useDecoder.clone(), r.useDecoder._baseState.implicit = r.implicit), 
            r.useDecoder;
          }, f.prototype._decodeChoice = function(e, t) {
            const r = this._baseState;
            let n = null, i = !1;
            return Object.keys(r.choice).some((function(o) {
              const s = e.save(), a = r.choice[o];
              try {
                const r = a._decode(e, t);
                if (e.isError(r)) return !1;
                n = {
                  type: o,
                  value: r
                }, i = !0;
              } catch (t) {
                return e.restore(s), !1;
              }
              return !0;
            }), this), i ? n : e.error("Choice not matched");
          }, f.prototype._createEncoderBuffer = function(e) {
            return new i(e, this.reporter);
          }, f.prototype._encode = function(e, t, r) {
            const n = this._baseState;
            if (null !== n.default && n.default === e) return;
            const i = this._encodeValue(e, t, r);
            return void 0 === i || this._skipDefault(i, t, r) ? void 0 : i;
          }, f.prototype._encodeValue = function(e, t, r) {
            const i = this._baseState;
            if (null === i.parent) return i.children[0]._encode(e, t || new n);
            let o = null;
            if (this.reporter = t, i.optional && void 0 === e) {
              if (null === i.default) return;
              e = i.default;
            }
            let s = null, a = !1;
            if (i.any) o = this._createEncoderBuffer(e); else if (i.choice) o = this._encodeChoice(e, t); else if (i.contains) s = this._getUse(i.contains, r)._encode(e, t), 
            a = !0; else if (i.children) s = i.children.map((function(r) {
              if ("null_" === r._baseState.tag) return r._encode(null, t, e);
              if (null === r._baseState.key) return t.error("Child should have a key");
              const n = t.enterKey(r._baseState.key);
              if ("object" != typeof e) return t.error("Child expected, but input is not object");
              const i = r._encode(e[r._baseState.key], t, e);
              return t.leaveKey(n), i;
            }), this).filter((function(e) {
              return e;
            })), s = this._createEncoderBuffer(s); else if ("seqof" === i.tag || "setof" === i.tag) {
              if (!i.args || 1 !== i.args.length) return t.error("Too many args for : " + i.tag);
              if (!Array.isArray(e)) return t.error("seqof/setof, but data is not Array");
              const r = this.clone();
              r._baseState.implicit = null, s = this._createEncoderBuffer(e.map((function(r) {
                const n = this._baseState;
                return this._getUse(n.args[0], e)._encode(r, t);
              }), r));
            } else null !== i.use ? o = this._getUse(i.use, r)._encode(e, t) : (s = this._encodePrimitive(i.tag, e), a = !0);
            if (!i.any && null === i.choice) {
              const e = null !== i.implicit ? i.implicit : i.tag, r = null === i.implicit ? "universal" : "context";
              null === e ? null === i.use && t.error("Tag could be omitted only for .use()") : null === i.use && (o = this._encodeComposite(e, a, r, s));
            }
            return null !== i.explicit && (o = this._encodeComposite(i.explicit, !1, "context", o)), o;
          }, f.prototype._encodeChoice = function(e, t) {
            const r = this._baseState, n = r.choice[e.type];
            return n || s(!1, e.type + " not found in " + JSON.stringify(Object.keys(r.choice))), n._encode(e.value, t);
          }, f.prototype._encodePrimitive = function(e, t) {
            const r = this._baseState;
            if (/str$/.test(e)) return this._encodeStr(t, e);
            if ("objid" === e && r.args) return this._encodeObjid(t, r.reverseArgs[0], r.args[1]);
            if ("objid" === e) return this._encodeObjid(t, null, null);
            if ("gentime" === e || "utctime" === e) return this._encodeTime(t, e);
            if ("null_" === e) return this._encodeNull();
            if ("int" === e || "enum" === e) return this._encodeInt(t, r.args && r.reverseArgs[0]);
            if ("bool" === e) return this._encodeBool(t);
            if ("objDesc" === e) return this._encodeStr(t, e);
            throw new Error("Unsupported tag: " + e);
          }, f.prototype._isNumstr = function(e) {
            return /^[0-9 ]*$/.test(e);
          }, f.prototype._isPrintstr = function(e) {
            return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e);
          };
        },
        8465: (e, t, r) => {
          "use strict";
          const n = r(5717);
          function i(e) {
            this._reporterState = {
              obj: null,
              path: [],
              options: e || {},
              errors: []
            };
          }
          function o(e, t) {
            this.path = e, this.rethrow(t);
          }
          t.b = i, i.prototype.isError = function(e) {
            return e instanceof o;
          }, i.prototype.save = function() {
            const e = this._reporterState;
            return {
              obj: e.obj,
              pathLen: e.path.length
            };
          }, i.prototype.restore = function(e) {
            const t = this._reporterState;
            t.obj = e.obj, t.path = t.path.slice(0, e.pathLen);
          }, i.prototype.enterKey = function(e) {
            return this._reporterState.path.push(e);
          }, i.prototype.exitKey = function(e) {
            const t = this._reporterState;
            t.path = t.path.slice(0, e - 1);
          }, i.prototype.leaveKey = function(e, t, r) {
            const n = this._reporterState;
            this.exitKey(e), null !== n.obj && (n.obj[t] = r);
          }, i.prototype.path = function() {
            return this._reporterState.path.join("/");
          }, i.prototype.enterObject = function() {
            const e = this._reporterState, t = e.obj;
            return e.obj = {}, t;
          }, i.prototype.leaveObject = function(e) {
            const t = this._reporterState, r = t.obj;
            return t.obj = e, r;
          }, i.prototype.error = function(e) {
            let t;
            const r = this._reporterState, n = e instanceof o;
            if (t = n ? e : new o(r.path.map((function(e) {
              return "[" + JSON.stringify(e) + "]";
            })).join(""), e.message || e, e.stack), !r.options.partial) throw t;
            return n || r.errors.push(t), t;
          }, i.prototype.wrapResult = function(e) {
            const t = this._reporterState;
            return t.options.partial ? {
              result: this.isError(e) ? null : e,
              errors: t.errors
            } : e;
          }, n(o, Error), o.prototype.rethrow = function(e) {
            if (this.message = e + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, o), 
            !this.stack) try {
              throw new Error(this.message);
            } catch (e) {
              this.stack = e.stack;
            }
            return this;
          };
        },
        160: (e, t) => {
          "use strict";
          function r(e) {
            const t = {};
            return Object.keys(e).forEach((function(r) {
              (0 | r) == r && (r |= 0);
              const n = e[r];
              t[n] = r;
            })), t;
          }
          t.tagClass = {
            0: "universal",
            1: "application",
            2: "context",
            3: "private"
          }, t.tagClassByName = r(t.tagClass), t.tag = {
            0: "end",
            1: "bool",
            2: "int",
            3: "bitstr",
            4: "octstr",
            5: "null_",
            6: "objid",
            7: "objDesc",
            8: "external",
            9: "real",
            10: "enum",
            11: "embed",
            12: "utf8str",
            13: "relativeOid",
            16: "seq",
            17: "set",
            18: "numstr",
            19: "printstr",
            20: "t61str",
            21: "videostr",
            22: "ia5str",
            23: "utctime",
            24: "gentime",
            25: "graphstr",
            26: "iso646str",
            27: "genstr",
            28: "unistr",
            29: "charstr",
            30: "bmpstr"
          }, t.tagByName = r(t.tag);
        },
        6826: (e, t, r) => {
          "use strict";
          const n = t;
          n._reverse = function(e) {
            const t = {};
            return Object.keys(e).forEach((function(r) {
              (0 | r) == r && (r |= 0);
              const n = e[r];
              t[n] = r;
            })), t;
          }, n.der = r(160);
        },
        1671: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(3550), o = r(6625).C, s = r(1949), a = r(160);
          function c(e) {
            this.enc = "der", this.name = e.name, this.entity = e, this.tree = new f, this.tree._init(e.body);
          }
          function f(e) {
            s.call(this, "der", e);
          }
          function u(e, t) {
            let r = e.readUInt8(t);
            if (e.isError(r)) return r;
            const n = a.tagClass[r >> 6], i = 0 == (32 & r);
            if (31 == (31 & r)) {
              let n = r;
              for (r = 0; 128 == (128 & n); ) {
                if (n = e.readUInt8(t), e.isError(n)) return n;
                r <<= 7, r |= 127 & n;
              }
            } else r &= 31;
            return {
              cls: n,
              primitive: i,
              tag: r,
              tagStr: a.tag[r]
            };
          }
          function h(e, t, r) {
            let n = e.readUInt8(r);
            if (e.isError(n)) return n;
            if (!t && 128 === n) return null;
            if (0 == (128 & n)) return n;
            const i = 127 & n;
            if (i > 4) return e.error("length octect is too long");
            n = 0;
            for (let o = 0; o < i; o++) {
              n <<= 8;
              const t = e.readUInt8(r);
              if (e.isError(t)) return t;
              n |= t;
            }
            return n;
          }
          e.exports = c, c.prototype.decode = function(e, t) {
            return o.isDecoderBuffer(e) || (e = new o(e, t)), this.tree._decode(e, t);
          }, n(f, s), f.prototype._peekTag = function(e, t, r) {
            if (e.isEmpty()) return !1;
            const n = e.save(), i = u(e, 'Failed to peek tag: "' + t + '"');
            return e.isError(i) ? i : (e.restore(n), i.tag === t || i.tagStr === t || i.tagStr + "of" === t || r);
          }, f.prototype._decodeTag = function(e, t, r) {
            const n = u(e, 'Failed to decode tag of "' + t + '"');
            if (e.isError(n)) return n;
            let i = h(e, n.primitive, 'Failed to get length of "' + t + '"');
            if (e.isError(i)) return i;
            if (!r && n.tag !== t && n.tagStr !== t && n.tagStr + "of" !== t) return e.error('Failed to match tag: "' + t + '"');
            if (n.primitive || null !== i) return e.skip(i, 'Failed to match body of: "' + t + '"');
            const o = e.save(), s = this._skipUntilEnd(e, 'Failed to skip indefinite length body: "' + this.tag + '"');
            return e.isError(s) ? s : (i = e.offset - o.offset, e.restore(o), e.skip(i, 'Failed to match body of: "' + t + '"'));
          }, f.prototype._skipUntilEnd = function(e, t) {
            for (;;) {
              const r = u(e, t);
              if (e.isError(r)) return r;
              const n = h(e, r.primitive, t);
              if (e.isError(n)) return n;
              let i;
              if (i = r.primitive || null !== n ? e.skip(n) : this._skipUntilEnd(e, t), e.isError(i)) return i;
              if ("end" === r.tagStr) break;
            }
          }, f.prototype._decodeList = function(e, t, r, n) {
            const i = [];
            for (;!e.isEmpty(); ) {
              const t = this._peekTag(e, "end");
              if (e.isError(t)) return t;
              const o = r.decode(e, "der", n);
              if (e.isError(o) && t) break;
              i.push(o);
            }
            return i;
          }, f.prototype._decodeStr = function(e, t) {
            if ("bitstr" === t) {
              const t = e.readUInt8();
              return e.isError(t) ? t : {
                unused: t,
                data: e.raw()
              };
            }
            if ("bmpstr" === t) {
              const t = e.raw();
              if (t.length % 2 == 1) return e.error("Decoding of string type: bmpstr length mismatch");
              let r = "";
              for (let e = 0; e < t.length / 2; e++) r += String.fromCharCode(t.readUInt16BE(2 * e));
              return r;
            }
            if ("numstr" === t) {
              const t = e.raw().toString("ascii");
              return this._isNumstr(t) ? t : e.error("Decoding of string type: numstr unsupported characters");
            }
            if ("octstr" === t) return e.raw();
            if ("objDesc" === t) return e.raw();
            if ("printstr" === t) {
              const t = e.raw().toString("ascii");
              return this._isPrintstr(t) ? t : e.error("Decoding of string type: printstr unsupported characters");
            }
            return /str$/.test(t) ? e.raw().toString() : e.error("Decoding of string type: " + t + " unsupported");
          }, f.prototype._decodeObjid = function(e, t, r) {
            let n;
            const i = [];
            let o = 0, s = 0;
            for (;!e.isEmpty(); ) s = e.readUInt8(), o <<= 7, o |= 127 & s, 0 == (128 & s) && (i.push(o), o = 0);
            128 & s && i.push(o);
            const a = i[0] / 40 | 0, c = i[0] % 40;
            if (n = r ? i : [ a, c ].concat(i.slice(1)), t) {
              let e = t[n.join(" ")];
              void 0 === e && (e = t[n.join(".")]), void 0 !== e && (n = e);
            }
            return n;
          }, f.prototype._decodeTime = function(e, t) {
            const r = e.raw().toString();
            let n, i, o, s, a, c;
            if ("gentime" === t) n = 0 | r.slice(0, 4), i = 0 | r.slice(4, 6), o = 0 | r.slice(6, 8), s = 0 | r.slice(8, 10), a = 0 | r.slice(10, 12), 
            c = 0 | r.slice(12, 14); else {
              if ("utctime" !== t) return e.error("Decoding " + t + " time is not supported yet");
              n = 0 | r.slice(0, 2), i = 0 | r.slice(2, 4), o = 0 | r.slice(4, 6), s = 0 | r.slice(6, 8), a = 0 | r.slice(8, 10), c = 0 | r.slice(10, 12), 
              n = n < 70 ? 2e3 + n : 1900 + n;
            }
            return Date.UTC(n, i - 1, o, s, a, c, 0);
          }, f.prototype._decodeNull = function() {
            return null;
          }, f.prototype._decodeBool = function(e) {
            const t = e.readUInt8();
            return e.isError(t) ? t : 0 !== t;
          }, f.prototype._decodeInt = function(e, t) {
            const r = e.raw();
            let n = new i(r);
            return t && (n = t[n.toString(10)] || n), n;
          }, f.prototype._use = function(e, t) {
            return "function" == typeof e && (e = e(t)), e._getDecoder("der").tree;
          };
        },
        8307: (e, t, r) => {
          "use strict";
          const n = t;
          n.der = r(1671), n.pem = r(9631);
        },
        9631: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(2399).Buffer, o = r(1671);
          function s(e) {
            o.call(this, e), this.enc = "pem";
          }
          n(s, o), e.exports = s, s.prototype.decode = function(e, t) {
            const r = e.toString().split(/[\r\n]+/g), n = t.label.toUpperCase(), s = /^-----(BEGIN|END) ([^-]+)-----$/;
            let a = -1, c = -1;
            for (let i = 0; i < r.length; i++) {
              const e = r[i].match(s);
              if (null !== e && e[2] === n) {
                if (-1 !== a) {
                  if ("END" !== e[1]) break;
                  c = i;
                  break;
                }
                if ("BEGIN" !== e[1]) break;
                a = i;
              }
            }
            if (-1 === a || -1 === c) throw new Error("PEM section not found for: " + n);
            const f = r.slice(a + 1, c).join("");
            f.replace(/[^a-z0-9+/=]+/gi, "");
            const u = i.from(f, "base64");
            return o.prototype.decode.call(this, u, t);
          };
        },
        6984: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(2399).Buffer, o = r(1949), s = r(160);
          function a(e) {
            this.enc = "der", this.name = e.name, this.entity = e, this.tree = new c, this.tree._init(e.body);
          }
          function c(e) {
            o.call(this, "der", e);
          }
          function f(e) {
            return e < 10 ? "0" + e : e;
          }
          e.exports = a, a.prototype.encode = function(e, t) {
            return this.tree._encode(e, t).join();
          }, n(c, o), c.prototype._encodeComposite = function(e, t, r, n) {
            const o = function(e, t, r, n) {
              let i;
              if ("seqof" === e ? e = "seq" : "setof" === e && (e = "set"), s.tagByName.hasOwnProperty(e)) i = s.tagByName[e]; else {
                if ("number" != typeof e || (0 | e) !== e) return n.error("Unknown tag: " + e);
                i = e;
              }
              return i >= 31 ? n.error("Multi-octet tag encoding unsupported") : (t || (i |= 32), i |= s.tagClassByName[r || "universal"] << 6, 
              i);
            }(e, t, r, this.reporter);
            if (n.length < 128) {
              const e = i.alloc(2);
              return e[0] = o, e[1] = n.length, this._createEncoderBuffer([ e, n ]);
            }
            let a = 1;
            for (let i = n.length; i >= 256; i >>= 8) a++;
            const c = i.alloc(2 + a);
            c[0] = o, c[1] = 128 | a;
            for (let i = 1 + a, s = n.length; s > 0; i--, s >>= 8) c[i] = 255 & s;
            return this._createEncoderBuffer([ c, n ]);
          }, c.prototype._encodeStr = function(e, t) {
            if ("bitstr" === t) return this._createEncoderBuffer([ 0 | e.unused, e.data ]);
            if ("bmpstr" === t) {
              const t = i.alloc(2 * e.length);
              for (let r = 0; r < e.length; r++) t.writeUInt16BE(e.charCodeAt(r), 2 * r);
              return this._createEncoderBuffer(t);
            }
            return "numstr" === t ? this._isNumstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === t ? this._isPrintstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(t) || "objDesc" === t ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: " + t + " unsupported");
          }, c.prototype._encodeObjid = function(e, t, r) {
            if ("string" == typeof e) {
              if (!t) return this.reporter.error("string objid given, but no values map found");
              if (!t.hasOwnProperty(e)) return this.reporter.error("objid not found in values map");
              e = t[e].split(/[\s.]+/g);
              for (let t = 0; t < e.length; t++) e[t] |= 0;
            } else if (Array.isArray(e)) {
              e = e.slice();
              for (let t = 0; t < e.length; t++) e[t] |= 0;
            }
            if (!Array.isArray(e)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e));
            if (!r) {
              if (e[1] >= 40) return this.reporter.error("Second objid identifier OOB");
              e.splice(0, 2, 40 * e[0] + e[1]);
            }
            let n = 0;
            for (let i = 0; i < e.length; i++) {
              let t = e[i];
              for (n++; t >= 128; t >>= 7) n++;
            }
            const o = i.alloc(n);
            let s = o.length - 1;
            for (let i = e.length - 1; i >= 0; i--) {
              let t = e[i];
              for (o[s--] = 127 & t; (t >>= 7) > 0; ) o[s--] = 128 | 127 & t;
            }
            return this._createEncoderBuffer(o);
          }, c.prototype._encodeTime = function(e, t) {
            let r;
            const n = new Date(e);
            return "gentime" === t ? r = [ f(n.getUTCFullYear()), f(n.getUTCMonth() + 1), f(n.getUTCDate()), f(n.getUTCHours()), f(n.getUTCMinutes()), f(n.getUTCSeconds()), "Z" ].join("") : "utctime" === t ? r = [ f(n.getUTCFullYear() % 100), f(n.getUTCMonth() + 1), f(n.getUTCDate()), f(n.getUTCHours()), f(n.getUTCMinutes()), f(n.getUTCSeconds()), "Z" ].join("") : this.reporter.error("Encoding " + t + " time is not supported yet"), 
            this._encodeStr(r, "octstr");
          }, c.prototype._encodeNull = function() {
            return this._createEncoderBuffer("");
          }, c.prototype._encodeInt = function(e, t) {
            if ("string" == typeof e) {
              if (!t) return this.reporter.error("String int or enum given, but no values map");
              if (!t.hasOwnProperty(e)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e));
              e = t[e];
            }
            if ("number" != typeof e && !i.isBuffer(e)) {
              const t = e.toArray();
              !e.sign && 128 & t[0] && t.unshift(0), e = i.from(t);
            }
            if (i.isBuffer(e)) {
              let t = e.length;
              0 === e.length && t++;
              const r = i.alloc(t);
              return e.copy(r), 0 === e.length && (r[0] = 0), this._createEncoderBuffer(r);
            }
            if (e < 128) return this._createEncoderBuffer(e);
            if (e < 256) return this._createEncoderBuffer([ 0, e ]);
            let r = 1;
            for (let i = e; i >= 256; i >>= 8) r++;
            const n = new Array(r);
            for (let i = n.length - 1; i >= 0; i--) n[i] = 255 & e, e >>= 8;
            return 128 & n[0] && n.unshift(0), this._createEncoderBuffer(i.from(n));
          }, c.prototype._encodeBool = function(e) {
            return this._createEncoderBuffer(e ? 255 : 0);
          }, c.prototype._use = function(e, t) {
            return "function" == typeof e && (e = e(t)), e._getEncoder("der").tree;
          }, c.prototype._skipDefault = function(e, t, r) {
            const n = this._baseState;
            let i;
            if (null === n.default) return !1;
            const o = e.join();
            if (void 0 === n.defaultBuffer && (n.defaultBuffer = this._encodeValue(n.default, t, r).join()), o.length !== n.defaultBuffer.length) return !1;
            for (i = 0; i < o.length; i++) if (o[i] !== n.defaultBuffer[i]) return !1;
            return !0;
          };
        },
        6579: (e, t, r) => {
          "use strict";
          const n = t;
          n.der = r(6984), n.pem = r(2883);
        },
        2883: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(6984);
          function o(e) {
            i.call(this, e), this.enc = "pem";
          }
          n(o, i), e.exports = o, o.prototype.encode = function(e, t) {
            const r = i.prototype.encode.call(this, e).toString("base64"), n = [ "-----BEGIN " + t.label + "-----" ];
            for (let i = 0; i < r.length; i += 64) n.push(r.slice(i, i + 64));
            return n.push("-----END " + t.label + "-----"), n.join("\n");
          };
        },
        9282: (e, t, r) => {
          "use strict";
          var i = r(4155);
          function o(e) {
            return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
              return typeof e;
            } : function(e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            }, o(e);
          }
          var s, a, c = r(2136).codes, f = c.ERR_AMBIGUOUS_ARGUMENT, u = c.ERR_INVALID_ARG_TYPE, h = c.ERR_INVALID_ARG_VALUE, d = c.ERR_INVALID_RETURN_VALUE, l = c.ERR_MISSING_ARGS, p = r(5961), b = r(9539).inspect, y = r(9539).types, g = y.isPromise, m = y.isRegExp, v = Object.assign ? Object.assign : r(8091).assign, w = Object.is ? Object.is : r(609);
          function _() {
            var e = r(9158);
            s = e.isDeepEqual, a = e.isDeepStrictEqual;
          }
          new Map;
          var S = !1, E = e.exports = P, A = {};
          function x(e) {
            if (e.message instanceof Error) throw e.message;
            throw new p(e);
          }
          function k(e, t, r, n) {
            if (!r) {
              var i = !1;
              if (0 === t) i = !0, n = "No value argument passed to `assert.ok()`"; else if (n instanceof Error) throw n;
              var o = new p({
                actual: r,
                expected: !0,
                message: n,
                operator: "==",
                stackStartFn: e
              });
              throw o.generatedMessage = i, o;
            }
          }
          function P() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
            k.apply(void 0, [ P, t.length ].concat(t));
          }
          E.fail = function e(t, r, o, s, a) {
            var c, f = arguments.length;
            if (0 === f) c = "Failed"; else if (1 === f) o = t, t = void 0; else {
              if (!1 === S) {
                S = !0;
                var u = i.emitWarning ? i.emitWarning : n.warn.bind(n);
                u("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
              }
              2 === f && (s = "!=");
            }
            if (o instanceof Error) throw o;
            var h = {
              actual: t,
              expected: r,
              operator: void 0 === s ? "fail" : s,
              stackStartFn: a || e
            };
            void 0 !== o && (h.message = o);
            var d = new p(h);
            throw c && (d.message = c, d.generatedMessage = !0), d;
          }, E.AssertionError = p, E.ok = P, E.equal = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            t != r && x({
              actual: t,
              expected: r,
              message: n,
              operator: "==",
              stackStartFn: e
            });
          }, E.notEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            t == r && x({
              actual: t,
              expected: r,
              message: n,
              operator: "!=",
              stackStartFn: e
            });
          }, E.deepEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            void 0 === s && _(), s(t, r) || x({
              actual: t,
              expected: r,
              message: n,
              operator: "deepEqual",
              stackStartFn: e
            });
          }, E.notDeepEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            void 0 === s && _(), s(t, r) && x({
              actual: t,
              expected: r,
              message: n,
              operator: "notDeepEqual",
              stackStartFn: e
            });
          }, E.deepStrictEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            void 0 === s && _(), a(t, r) || x({
              actual: t,
              expected: r,
              message: n,
              operator: "deepStrictEqual",
              stackStartFn: e
            });
          }, E.notDeepStrictEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            void 0 === s && _(), a(t, r) && x({
              actual: t,
              expected: r,
              message: n,
              operator: "notDeepStrictEqual",
              stackStartFn: e
            });
          }, E.strictEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            w(t, r) || x({
              actual: t,
              expected: r,
              message: n,
              operator: "strictEqual",
              stackStartFn: e
            });
          }, E.notStrictEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            w(t, r) && x({
              actual: t,
              expected: r,
              message: n,
              operator: "notStrictEqual",
              stackStartFn: e
            });
          };
          var O = function e(t, r, n) {
            var i = this;
            !function(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }(this, e), r.forEach((function(e) {
              e in t && (void 0 !== n && "string" == typeof n[e] && m(t[e]) && t[e].test(n[e]) ? i[e] = n[e] : i[e] = t[e]);
            }));
          };
          function M(e, t, r, n, i, o) {
            if (!(r in e) || !a(e[r], t[r])) {
              if (!n) {
                var s = new O(e, i), c = new O(t, i, e), f = new p({
                  actual: s,
                  expected: c,
                  operator: "deepStrictEqual",
                  stackStartFn: o
                });
                throw f.actual = e, f.expected = t, f.operator = o.name, f;
              }
              x({
                actual: e,
                expected: t,
                message: n,
                operator: o.name,
                stackStartFn: o
              });
            }
          }
          function I(e, t, r, n) {
            if ("function" != typeof t) {
              if (m(t)) return t.test(e);
              if (2 === arguments.length) throw new u("expected", [ "Function", "RegExp" ], t);
              if ("object" !== o(e) || null === e) {
                var i = new p({
                  actual: e,
                  expected: t,
                  message: r,
                  operator: "deepStrictEqual",
                  stackStartFn: n
                });
                throw i.operator = n.name, i;
              }
              var a = Object.keys(t);
              if (t instanceof Error) a.push("name", "message"); else if (0 === a.length) throw new h("error", t, "may not be an empty object");
              return void 0 === s && _(), a.forEach((function(i) {
                "string" == typeof e[i] && m(t[i]) && t[i].test(e[i]) || M(e, t, i, r, a, n);
              })), !0;
            }
            return void 0 !== t.prototype && e instanceof t || !Error.isPrototypeOf(t) && !0 === t.call({}, e);
          }
          function T(e) {
            if ("function" != typeof e) throw new u("fn", "Function", e);
            try {
              e();
            } catch (e) {
              return e;
            }
            return A;
          }
          function R(e) {
            return g(e) || null !== e && "object" === o(e) && "function" == typeof e.then && "function" == typeof e.catch;
          }
          function C(e) {
            return Promise.resolve().then((function() {
              var t;
              if ("function" == typeof e) {
                if (!R(t = e())) throw new d("instance of Promise", "promiseFn", t);
              } else {
                if (!R(e)) throw new u("promiseFn", [ "Function", "Promise" ], e);
                t = e;
              }
              return Promise.resolve().then((function() {
                return t;
              })).then((function() {
                return A;
              })).catch((function(e) {
                return e;
              }));
            }));
          }
          function N(e, t, r, n) {
            if ("string" == typeof r) {
              if (4 === arguments.length) throw new u("error", [ "Object", "Error", "Function", "RegExp" ], r);
              if ("object" === o(t) && null !== t) {
                if (t.message === r) throw new f("error/message", 'The error message "'.concat(t.message, '" is identical to the message.'));
              } else if (t === r) throw new f("error/message", 'The error "'.concat(t, '" is identical to the message.'));
              n = r, r = void 0;
            } else if (null != r && "object" !== o(r) && "function" != typeof r) throw new u("error", [ "Object", "Error", "Function", "RegExp" ], r);
            if (t === A) {
              var i = "";
              r && r.name && (i += " (".concat(r.name, ")")), i += n ? ": ".concat(n) : ".";
              var s = "rejects" === e.name ? "rejection" : "exception";
              x({
                actual: void 0,
                expected: r,
                operator: e.name,
                message: "Missing expected ".concat(s).concat(i),
                stackStartFn: e
              });
            }
            if (r && !I(t, r, n, e)) throw t;
          }
          function j(e, t, r, n) {
            if (t !== A) {
              if ("string" == typeof r && (n = r, r = void 0), !r || I(t, r)) {
                var i = n ? ": ".concat(n) : ".", o = "doesNotReject" === e.name ? "rejection" : "exception";
                x({
                  actual: t,
                  expected: r,
                  operator: e.name,
                  message: "Got unwanted ".concat(o).concat(i, "\n") + 'Actual message: "'.concat(t && t.message, '"'),
                  stackStartFn: e
                });
              }
              throw t;
            }
          }
          function B() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
            k.apply(void 0, [ B, t.length ].concat(t));
          }
          E.throws = function e(t) {
            for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
            N.apply(void 0, [ e, T(t) ].concat(n));
          }, E.rejects = function e(t) {
            for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
            return C(t).then((function(t) {
              return N.apply(void 0, [ e, t ].concat(n));
            }));
          }, E.doesNotThrow = function e(t) {
            for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
            j.apply(void 0, [ e, T(t) ].concat(n));
          }, E.doesNotReject = function e(t) {
            for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
            return C(t).then((function(t) {
              return j.apply(void 0, [ e, t ].concat(n));
            }));
          }, E.ifError = function e(t) {
            if (null != t) {
              var r = "ifError got unwanted exception: ";
              "object" === o(t) && "string" == typeof t.message ? 0 === t.message.length && t.constructor ? r += t.constructor.name : r += t.message : r += b(t);
              var n = new p({
                actual: t,
                expected: null,
                operator: "ifError",
                message: r,
                stackStartFn: e
              }), i = t.stack;
              if ("string" == typeof i) {
                var s = i.split("\n");
                s.shift();
                for (var a = n.stack.split("\n"), c = 0; c < s.length; c++) {
                  var f = a.indexOf(s[c]);
                  if (-1 !== f) {
                    a = a.slice(0, f);
                    break;
                  }
                }
                n.stack = "".concat(a.join("\n"), "\n").concat(s.join("\n"));
              }
              throw n;
            }
          }, E.strict = v(B, E, {
            equal: E.strictEqual,
            deepEqual: E.deepStrictEqual,
            notEqual: E.notStrictEqual,
            notDeepEqual: E.notDeepStrictEqual
          }), E.strict.strict = E.strict;
        },
        5961: (e, t, r) => {
          "use strict";
          var n = r(4155);
          function i(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }
          function o(e, t) {
            return !t || "object" !== d(t) && "function" != typeof t ? s(e) : t;
          }
          function s(e) {
            if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e;
          }
          function a(e) {
            var t = "function" == typeof Map ? new Map : void 0;
            return a = function(e) {
              if (null === e || (r = e, -1 === Function.toString.call(r).indexOf("[native code]"))) return e;
              var r;
              if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== t) {
                if (t.has(e)) return t.get(e);
                t.set(e, n);
              }
              function n() {
                return f(e, arguments, h(this).constructor);
              }
              return n.prototype = Object.create(e.prototype, {
                constructor: {
                  value: n,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), u(n, e);
            }, a(e);
          }
          function c() {
            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
              return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}))), !0;
            } catch (e) {
              return !1;
            }
          }
          function f(e, t, r) {
            return f = c() ? Reflect.construct : function(e, t, r) {
              var n = [ null ];
              n.push.apply(n, t);
              var i = new (Function.bind.apply(e, n));
              return r && u(i, r.prototype), i;
            }, f.apply(null, arguments);
          }
          function u(e, t) {
            return u = Object.setPrototypeOf || function(e, t) {
              return e.__proto__ = t, e;
            }, u(e, t);
          }
          function h(e) {
            return h = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {
              return e.__proto__ || Object.getPrototypeOf(e);
            }, h(e);
          }
          function d(e) {
            return d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
              return typeof e;
            } : function(e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            }, d(e);
          }
          var l = r(9539).inspect, p = r(2136).codes.ERR_INVALID_ARG_TYPE;
          function b(e, t, r) {
            return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
          }
          var y = "", g = "", m = "", v = "", w = {
            deepStrictEqual: "Expected values to be strictly deep-equal:",
            strictEqual: "Expected values to be strictly equal:",
            strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
            deepEqual: "Expected values to be loosely deep-equal:",
            equal: "Expected values to be loosely equal:",
            notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
            notStrictEqual: 'Expected "actual" to be strictly unequal to:',
            notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
            notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
            notEqual: 'Expected "actual" to be loosely unequal to:',
            notIdentical: "Values identical but not reference-equal:"
          };
          function _(e) {
            var t = Object.keys(e), r = Object.create(Object.getPrototypeOf(e));
            return t.forEach((function(t) {
              r[t] = e[t];
            })), Object.defineProperty(r, "message", {
              value: e.message
            }), r;
          }
          function S(e) {
            return l(e, {
              compact: !1,
              customInspect: !1,
              depth: 1e3,
              maxArrayLength: 1 / 0,
              showHidden: !1,
              breakLength: 1 / 0,
              showProxy: !1,
              sorted: !0,
              getters: !0
            });
          }
          var E = function(e) {
            function t(e) {
              var r;
              if (function(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
              }(this, t), "object" !== d(e) || null === e) throw new p("options", "Object", e);
              var i = e.message, a = e.operator, c = e.stackStartFn, f = e.actual, u = e.expected, l = Error.stackTraceLimit;
              if (Error.stackTraceLimit = 0, null != i) r = o(this, h(t).call(this, String(i))); else if (n.stderr && n.stderr.isTTY && (n.stderr && n.stderr.getColorDepth && 1 !== n.stderr.getColorDepth() ? (y = "[34m", 
              g = "[32m", v = "[39m", m = "[31m") : (y = "", g = "", v = "", m = "")), "object" === d(f) && null !== f && "object" === d(u) && null !== u && "stack" in f && f instanceof Error && "stack" in u && u instanceof Error && (f = _(f), 
              u = _(u)), "deepStrictEqual" === a || "strictEqual" === a) r = o(this, h(t).call(this, function(e, t, r) {
                var i = "", o = "", s = 0, a = "", c = !1, f = S(e), u = f.split("\n"), h = S(t).split("\n"), l = 0, p = "";
                if ("strictEqual" === r && "object" === d(e) && "object" === d(t) && null !== e && null !== t && (r = "strictEqualObject"), 
                1 === u.length && 1 === h.length && u[0] !== h[0]) {
                  var _ = u[0].length + h[0].length;
                  if (_ <= 10) {
                    if (!("object" === d(e) && null !== e || "object" === d(t) && null !== t || 0 === e && 0 === t)) return "".concat(w[r], "\n\n") + "".concat(u[0], " !== ").concat(h[0], "\n");
                  } else if ("strictEqualObject" !== r && _ < (n.stderr && n.stderr.isTTY ? n.stderr.columns : 80)) {
                    for (;u[0][l] === h[0][l]; ) l++;
                    l > 2 && (p = "\n  ".concat(function(e, t) {
                      if (t = Math.floor(t), 0 == e.length || 0 == t) return "";
                      var r = e.length * t;
                      for (t = Math.floor(Math.log(t) / Math.log(2)); t; ) e += e, t--;
                      return e + e.substring(0, r - e.length);
                    }(" ", l), "^"), l = 0);
                  }
                }
                for (var E = u[u.length - 1], A = h[h.length - 1]; E === A && (l++ < 2 ? a = "\n  ".concat(E).concat(a) : i = E, u.pop(), 
                h.pop(), 0 !== u.length && 0 !== h.length); ) E = u[u.length - 1], A = h[h.length - 1];
                var x = Math.max(u.length, h.length);
                if (0 === x) {
                  var k = f.split("\n");
                  if (k.length > 30) for (k[26] = "".concat(y, "...").concat(v); k.length > 27; ) k.pop();
                  return "".concat(w.notIdentical, "\n\n").concat(k.join("\n"), "\n");
                }
                l > 3 && (a = "\n".concat(y, "...").concat(v).concat(a), c = !0), "" !== i && (a = "\n  ".concat(i).concat(a), i = "");
                var P = 0, O = w[r] + "\n".concat(g, "+ actual").concat(v, " ").concat(m, "- expected").concat(v), M = " ".concat(y, "...").concat(v, " Lines skipped");
                for (l = 0; l < x; l++) {
                  var I = l - s;
                  if (u.length < l + 1) I > 1 && l > 2 && (I > 4 ? (o += "\n".concat(y, "...").concat(v), c = !0) : I > 3 && (o += "\n  ".concat(h[l - 2]), 
                  P++), o += "\n  ".concat(h[l - 1]), P++), s = l, i += "\n".concat(m, "-").concat(v, " ").concat(h[l]), P++; else if (h.length < l + 1) I > 1 && l > 2 && (I > 4 ? (o += "\n".concat(y, "...").concat(v), 
                  c = !0) : I > 3 && (o += "\n  ".concat(u[l - 2]), P++), o += "\n  ".concat(u[l - 1]), P++), s = l, o += "\n".concat(g, "+").concat(v, " ").concat(u[l]), 
                  P++; else {
                    var T = h[l], R = u[l], C = R !== T && (!b(R, ",") || R.slice(0, -1) !== T);
                    C && b(T, ",") && T.slice(0, -1) === R && (C = !1, R += ","), C ? (I > 1 && l > 2 && (I > 4 ? (o += "\n".concat(y, "...").concat(v), 
                    c = !0) : I > 3 && (o += "\n  ".concat(u[l - 2]), P++), o += "\n  ".concat(u[l - 1]), P++), s = l, o += "\n".concat(g, "+").concat(v, " ").concat(R), 
                    i += "\n".concat(m, "-").concat(v, " ").concat(T), P += 2) : (o += i, i = "", 1 !== I && 0 !== l || (o += "\n  ".concat(R), 
                    P++));
                  }
                  if (P > 20 && l < x - 2) return "".concat(O).concat(M, "\n").concat(o, "\n").concat(y, "...").concat(v).concat(i, "\n") + "".concat(y, "...").concat(v);
                }
                return "".concat(O).concat(c ? M : "", "\n").concat(o).concat(i).concat(a).concat(p);
              }(f, u, a))); else if ("notDeepStrictEqual" === a || "notStrictEqual" === a) {
                var E = w[a], A = S(f).split("\n");
                if ("notStrictEqual" === a && "object" === d(f) && null !== f && (E = w.notStrictEqualObject), A.length > 30) for (A[26] = "".concat(y, "...").concat(v); A.length > 27; ) A.pop();
                r = 1 === A.length ? o(this, h(t).call(this, "".concat(E, " ").concat(A[0]))) : o(this, h(t).call(this, "".concat(E, "\n\n").concat(A.join("\n"), "\n")));
              } else {
                var x = S(f), k = "", P = w[a];
                "notDeepEqual" === a || "notEqual" === a ? (x = "".concat(w[a], "\n\n").concat(x)).length > 1024 && (x = "".concat(x.slice(0, 1021), "...")) : (k = "".concat(S(u)), 
                x.length > 512 && (x = "".concat(x.slice(0, 509), "...")), k.length > 512 && (k = "".concat(k.slice(0, 509), "...")), "deepEqual" === a || "equal" === a ? x = "".concat(P, "\n\n").concat(x, "\n\nshould equal\n\n") : k = " ".concat(a, " ").concat(k)), 
                r = o(this, h(t).call(this, "".concat(x).concat(k)));
              }
              return Error.stackTraceLimit = l, r.generatedMessage = !i, Object.defineProperty(s(r), "name", {
                value: "AssertionError [ERR_ASSERTION]",
                enumerable: !1,
                writable: !0,
                configurable: !0
              }), r.code = "ERR_ASSERTION", r.actual = f, r.expected = u, r.operator = a, Error.captureStackTrace && Error.captureStackTrace(s(r), c), 
              r.stack, r.name = "AssertionError", o(r);
            }
            var r, a;
            return function(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  writable: !0,
                  configurable: !0
                }
              }), t && u(e, t);
            }(t, e), r = t, a = [ {
              key: "toString",
              value: function() {
                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
              }
            }, {
              key: l.custom,
              value: function(e, t) {
                return l(this, function(e) {
                  for (var t = 1; t < arguments.length; t++) {
                    var r = null != arguments[t] ? arguments[t] : {}, n = Object.keys(r);
                    "function" == typeof Object.getOwnPropertySymbols && (n = n.concat(Object.getOwnPropertySymbols(r).filter((function(e) {
                      return Object.getOwnPropertyDescriptor(r, e).enumerable;
                    })))), n.forEach((function(t) {
                      i(e, t, r[t]);
                    }));
                  }
                  return e;
                }({}, t, {
                  customInspect: !1,
                  depth: 0
                }));
              }
            } ], a && function(e, t) {
              for (var r = 0; r < t.length; r++) {
                var n = t[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
              }
            }(r.prototype, a), t;
          }(a(Error));
          e.exports = E;
        },
        2136: (e, t, r) => {
          "use strict";
          function n(e) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
              return typeof e;
            } : function(e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            }, n(e);
          }
          function i(e) {
            return i = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {
              return e.__proto__ || Object.getPrototypeOf(e);
            }, i(e);
          }
          function o(e, t) {
            return o = Object.setPrototypeOf || function(e, t) {
              return e.__proto__ = t, e;
            }, o(e, t);
          }
          var s, a, c = {};
          function f(e, t, r) {
            r || (r = Error);
            var s = function(r) {
              function s(r, o, a) {
                var c;
                return function(e, t) {
                  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }(this, s), c = function(e, t) {
                  return !t || "object" !== n(t) && "function" != typeof t ? function(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                  }(e) : t;
                }(this, i(s).call(this, function(e, r, n) {
                  return "string" == typeof t ? t : t(e, r, n);
                }(r, o, a))), c.code = e, c;
              }
              return function(e, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                e.prototype = Object.create(t && t.prototype, {
                  constructor: {
                    value: e,
                    writable: !0,
                    configurable: !0
                  }
                }), t && o(e, t);
              }(s, r), s;
            }(r);
            c[e] = s;
          }
          function u(e, t) {
            if (Array.isArray(e)) {
              var r = e.length;
              return e = e.map((function(e) {
                return String(e);
              })), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
            }
            return "of ".concat(t, " ").concat(String(e));
          }
          f("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError), f("ERR_INVALID_ARG_TYPE", (function(e, t, i) {
            var o, a, c, f, h;
            if (void 0 === s && (s = r(9282)), s("string" == typeof e, "'name' must be a string"), "string" == typeof t && (a = "not ", 
            t.substr(0, a.length) === a) ? (o = "must not be", t = t.replace(/^not /, "")) : o = "must be", function(e, t, r) {
              return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
            }(e, " argument")) c = "The ".concat(e, " ").concat(o, " ").concat(u(t, "type")); else {
              var d = ("number" != typeof h && (h = 0), h + ".".length > (f = e).length || -1 === f.indexOf(".", h) ? "argument" : "property");
              c = 'The "'.concat(e, '" ').concat(d, " ").concat(o, " ").concat(u(t, "type"));
            }
            return c + ". Received type ".concat(n(i));
          }), TypeError), f("ERR_INVALID_ARG_VALUE", (function(e, t) {
            var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "is invalid";
            void 0 === a && (a = r(9539));
            var i = a.inspect(t);
            return i.length > 128 && (i = "".concat(i.slice(0, 128), "...")), "The argument '".concat(e, "' ").concat(n, ". Received ").concat(i);
          }), TypeError, RangeError), f("ERR_INVALID_RETURN_VALUE", (function(e, t, r) {
            var i;
            return i = r && r.constructor && r.constructor.name ? "instance of ".concat(r.constructor.name) : "type ".concat(n(r)), 
            "Expected ".concat(e, ' to be returned from the "').concat(t, '"') + " function but got ".concat(i, ".");
          }), TypeError), f("ERR_MISSING_ARGS", (function() {
            for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
            void 0 === s && (s = r(9282)), s(t.length > 0, "At least one arg needs to be specified");
            var i = "The ", o = t.length;
            switch (t = t.map((function(e) {
              return '"'.concat(e, '"');
            })), o) {
             case 1:
              i += "".concat(t[0], " argument");
              break;

             case 2:
              i += "".concat(t[0], " and ").concat(t[1], " arguments");
              break;

             default:
              i += t.slice(0, o - 1).join(", "), i += ", and ".concat(t[o - 1], " arguments");
            }
            return "".concat(i, " must be specified");
          }), TypeError), e.exports.codes = c;
        },
        9158: (e, t, r) => {
          "use strict";
          function n(e, t) {
            return function(e) {
              if (Array.isArray(e)) return e;
            }(e) || function(e, t) {
              var r = [], n = !0, i = !1, o = void 0;
              try {
                for (var s, a = e[Symbol.iterator](); !(n = (s = a.next()).done) && (r.push(s.value), !t || r.length !== t); n = !0) ;
              } catch (e) {
                i = !0, o = e;
              } finally {
                try {
                  n || null == a.return || a.return();
                } finally {
                  if (i) throw o;
                }
              }
              return r;
            }(e, t) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }();
          }
          function i(e) {
            return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
              return typeof e;
            } : function(e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            }, i(e);
          }
          var o = void 0 !== /a/g.flags, s = function(e) {
            var t = [];
            return e.forEach((function(e) {
              return t.push(e);
            })), t;
          }, a = function(e) {
            var t = [];
            return e.forEach((function(e, r) {
              return t.push([ r, e ]);
            })), t;
          }, c = Object.is ? Object.is : r(609), f = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
            return [];
          }, u = Number.isNaN ? Number.isNaN : r(360);
          function h(e) {
            return e.call.bind(e);
          }
          var d = h(Object.prototype.hasOwnProperty), l = h(Object.prototype.propertyIsEnumerable), p = h(Object.prototype.toString), b = r(9539).types, y = b.isAnyArrayBuffer, g = b.isArrayBufferView, m = b.isDate, v = b.isMap, w = b.isRegExp, _ = b.isSet, S = b.isNativeError, E = b.isBoxedPrimitive, A = b.isNumberObject, x = b.isStringObject, k = b.isBooleanObject, P = b.isBigIntObject, O = b.isSymbolObject, M = b.isFloat32Array, I = b.isFloat64Array;
          function T(e) {
            if (0 === e.length || e.length > 10) return !0;
            for (var t = 0; t < e.length; t++) {
              var r = e.charCodeAt(t);
              if (r < 48 || r > 57) return !0;
            }
            return 10 === e.length && e >= Math.pow(2, 32);
          }
          function R(e) {
            return Object.keys(e).filter(T).concat(f(e).filter(Object.prototype.propertyIsEnumerable.bind(e)));
          }
          function C(e, t) {
            if (e === t) return 0;
            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {
              r = e[i], n = t[i];
              break;
            }
            return r < n ? -1 : n < r ? 1 : 0;
          }
          function N(e, t, r, n) {
            if (e === t) return 0 !== e || !r || c(e, t);
            if (r) {
              if ("object" !== i(e)) return "number" == typeof e && u(e) && u(t);
              if ("object" !== i(t) || null === e || null === t) return !1;
              if (Object.getPrototypeOf(e) !== Object.getPrototypeOf(t)) return !1;
            } else {
              if (null === e || "object" !== i(e)) return (null === t || "object" !== i(t)) && e == t;
              if (null === t || "object" !== i(t)) return !1;
            }
            var s, a, f, h, d = p(e);
            if (d !== p(t)) return !1;
            if (Array.isArray(e)) {
              if (e.length !== t.length) return !1;
              var l = R(e), b = R(t);
              return l.length === b.length && B(e, t, r, n, 1, l);
            }
            if ("[object Object]" === d && (!v(e) && v(t) || !_(e) && _(t))) return !1;
            if (m(e)) {
              if (!m(t) || Date.prototype.getTime.call(e) !== Date.prototype.getTime.call(t)) return !1;
            } else if (w(e)) {
              if (!w(t) || (f = e, h = t, !(o ? f.source === h.source && f.flags === h.flags : RegExp.prototype.toString.call(f) === RegExp.prototype.toString.call(h)))) return !1;
            } else if (S(e) || e instanceof Error) {
              if (e.message !== t.message || e.name !== t.name) return !1;
            } else {
              if (g(e)) {
                if (r || !M(e) && !I(e)) {
                  if (!function(e, t) {
                    return e.byteLength === t.byteLength && 0 === C(new Uint8Array(e.buffer, e.byteOffset, e.byteLength), new Uint8Array(t.buffer, t.byteOffset, t.byteLength));
                  }(e, t)) return !1;
                } else if (!function(e, t) {
                  if (e.byteLength !== t.byteLength) return !1;
                  for (var r = 0; r < e.byteLength; r++) if (e[r] !== t[r]) return !1;
                  return !0;
                }(e, t)) return !1;
                var T = R(e), N = R(t);
                return T.length === N.length && B(e, t, r, n, 0, T);
              }
              if (_(e)) return !(!_(t) || e.size !== t.size) && B(e, t, r, n, 2);
              if (v(e)) return !(!v(t) || e.size !== t.size) && B(e, t, r, n, 3);
              if (y(e)) {
                if (a = t, (s = e).byteLength !== a.byteLength || 0 !== C(new Uint8Array(s), new Uint8Array(a))) return !1;
              } else if (E(e) && !function(e, t) {
                return A(e) ? A(t) && c(Number.prototype.valueOf.call(e), Number.prototype.valueOf.call(t)) : x(e) ? x(t) && String.prototype.valueOf.call(e) === String.prototype.valueOf.call(t) : k(e) ? k(t) && Boolean.prototype.valueOf.call(e) === Boolean.prototype.valueOf.call(t) : P(e) ? P(t) && BigInt.prototype.valueOf.call(e) === BigInt.prototype.valueOf.call(t) : O(t) && Symbol.prototype.valueOf.call(e) === Symbol.prototype.valueOf.call(t);
              }(e, t)) return !1;
            }
            return B(e, t, r, n, 0);
          }
          function j(e, t) {
            return t.filter((function(t) {
              return l(e, t);
            }));
          }
          function B(e, t, r, n, i, o) {
            if (5 === arguments.length) {
              o = Object.keys(e);
              var s = Object.keys(t);
              if (o.length !== s.length) return !1;
            }
            for (var a = 0; a < o.length; a++) if (!d(t, o[a])) return !1;
            if (r && 5 === arguments.length) {
              var c = f(e);
              if (0 !== c.length) {
                var u = 0;
                for (a = 0; a < c.length; a++) {
                  var h = c[a];
                  if (l(e, h)) {
                    if (!l(t, h)) return !1;
                    o.push(h), u++;
                  } else if (l(t, h)) return !1;
                }
                var p = f(t);
                if (c.length !== p.length && j(t, p).length !== u) return !1;
              } else {
                var b = f(t);
                if (0 !== b.length && 0 !== j(t, b).length) return !1;
              }
            }
            if (0 === o.length && (0 === i || 1 === i && 0 === e.length || 0 === e.size)) return !0;
            if (void 0 === n) n = {
              val1: new Map,
              val2: new Map,
              position: 0
            }; else {
              var y = n.val1.get(e);
              if (void 0 !== y) {
                var g = n.val2.get(t);
                if (void 0 !== g) return y === g;
              }
              n.position++;
            }
            n.val1.set(e, n.position), n.val2.set(t, n.position);
            var m = H(e, t, r, o, n, i);
            return n.val1.delete(e), n.val2.delete(t), m;
          }
          function L(e, t, r, n) {
            for (var i = s(e), o = 0; o < i.length; o++) {
              var a = i[o];
              if (N(t, a, r, n)) return e.delete(a), !0;
            }
            return !1;
          }
          function D(e) {
            switch (i(e)) {
             case "undefined":
              return null;

             case "object":
              return;

             case "symbol":
              return !1;

             case "string":
              e = +e;

             case "number":
              if (u(e)) return !1;
            }
            return !0;
          }
          function U(e, t, r) {
            var n = D(r);
            return null != n ? n : t.has(n) && !e.has(n);
          }
          function q(e, t, r, n, i) {
            var o = D(r);
            if (null != o) return o;
            var s = t.get(o);
            return !(void 0 === s && !t.has(o) || !N(n, s, !1, i)) && !e.has(o) && N(n, s, !1, i);
          }
          function F(e, t, r, n, i, o) {
            for (var a = s(e), c = 0; c < a.length; c++) {
              var f = a[c];
              if (N(r, f, i, o) && N(n, t.get(f), i, o)) return e.delete(f), !0;
            }
            return !1;
          }
          function H(e, t, r, o, c, f) {
            var u = 0;
            if (2 === f) {
              if (!function(e, t, r, n) {
                for (var o = null, a = s(e), c = 0; c < a.length; c++) {
                  var f = a[c];
                  if ("object" === i(f) && null !== f) null === o && (o = new Set), o.add(f); else if (!t.has(f)) {
                    if (r) return !1;
                    if (!U(e, t, f)) return !1;
                    null === o && (o = new Set), o.add(f);
                  }
                }
                if (null !== o) {
                  for (var u = s(t), h = 0; h < u.length; h++) {
                    var d = u[h];
                    if ("object" === i(d) && null !== d) {
                      if (!L(o, d, r, n)) return !1;
                    } else if (!r && !e.has(d) && !L(o, d, r, n)) return !1;
                  }
                  return 0 === o.size;
                }
                return !0;
              }(e, t, r, c)) return !1;
            } else if (3 === f) {
              if (!function(e, t, r, o) {
                for (var s = null, c = a(e), f = 0; f < c.length; f++) {
                  var u = n(c[f], 2), h = u[0], d = u[1];
                  if ("object" === i(h) && null !== h) null === s && (s = new Set), s.add(h); else {
                    var l = t.get(h);
                    if (void 0 === l && !t.has(h) || !N(d, l, r, o)) {
                      if (r) return !1;
                      if (!q(e, t, h, d, o)) return !1;
                      null === s && (s = new Set), s.add(h);
                    }
                  }
                }
                if (null !== s) {
                  for (var p = a(t), b = 0; b < p.length; b++) {
                    var y = n(p[b], 2), g = (h = y[0], y[1]);
                    if ("object" === i(h) && null !== h) {
                      if (!F(s, e, h, g, r, o)) return !1;
                    } else if (!(r || e.has(h) && N(e.get(h), g, !1, o) || F(s, e, h, g, !1, o))) return !1;
                  }
                  return 0 === s.size;
                }
                return !0;
              }(e, t, r, c)) return !1;
            } else if (1 === f) for (;u < e.length; u++) {
              if (!d(e, u)) {
                if (d(t, u)) return !1;
                for (var h = Object.keys(e); u < h.length; u++) {
                  var l = h[u];
                  if (!d(t, l) || !N(e[l], t[l], r, c)) return !1;
                }
                return h.length === Object.keys(t).length;
              }
              if (!d(t, u) || !N(e[u], t[u], r, c)) return !1;
            }
            for (u = 0; u < o.length; u++) {
              var p = o[u];
              if (!N(e[p], t[p], r, c)) return !1;
            }
            return !0;
          }
          e.exports = {
            isDeepEqual: function(e, t) {
              return N(e, t, !1);
            },
            isDeepStrictEqual: function(e, t) {
              return N(e, t, !0);
            }
          };
        },
        9742: (e, t) => {
          "use strict";
          t.byteLength = function(e) {
            var t = c(e), r = t[0], n = t[1];
            return 3 * (r + n) / 4 - n;
          }, t.toByteArray = function(e) {
            var t, r, o = c(e), s = o[0], a = o[1], f = new i(function(e, t, r) {
              return 3 * (t + r) / 4 - r;
            }(0, s, a)), u = 0, h = a > 0 ? s - 4 : s;
            for (r = 0; r < h; r += 4) t = n[e.charCodeAt(r)] << 18 | n[e.charCodeAt(r + 1)] << 12 | n[e.charCodeAt(r + 2)] << 6 | n[e.charCodeAt(r + 3)], 
            f[u++] = t >> 16 & 255, f[u++] = t >> 8 & 255, f[u++] = 255 & t;
            return 2 === a && (t = n[e.charCodeAt(r)] << 2 | n[e.charCodeAt(r + 1)] >> 4, f[u++] = 255 & t), 1 === a && (t = n[e.charCodeAt(r)] << 10 | n[e.charCodeAt(r + 1)] << 4 | n[e.charCodeAt(r + 2)] >> 2, 
            f[u++] = t >> 8 & 255, f[u++] = 255 & t), f;
          }, t.fromByteArray = function(e) {
            for (var t, n = e.length, i = n % 3, o = [], s = 16383, a = 0, c = n - i; a < c; a += s) o.push(f(e, a, a + s > c ? c : a + s));
            return 1 === i ? (t = e[n - 1], o.push(r[t >> 2] + r[t << 4 & 63] + "==")) : 2 === i && (t = (e[n - 2] << 8) + e[n - 1], 
            o.push(r[t >> 10] + r[t >> 4 & 63] + r[t << 2 & 63] + "=")), o.join("");
          };
          for (var r = [], n = [], i = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = 0, a = o.length; s < a; ++s) r[s] = o[s], 
          n[o.charCodeAt(s)] = s;
          function c(e) {
            var t = e.length;
            if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
            var r = e.indexOf("=");
            return -1 === r && (r = t), [ r, r === t ? 0 : 4 - r % 4 ];
          }
          function f(e, t, n) {
            for (var i, o, s = [], a = t; a < n; a += 3) i = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), s.push(r[(o = i) >> 18 & 63] + r[o >> 12 & 63] + r[o >> 6 & 63] + r[63 & o]);
            return s.join("");
          }
          n["-".charCodeAt(0)] = 62, n["_".charCodeAt(0)] = 63;
        },
        2240: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer, i = r(1518);
          function o(e, t) {
            return void 0 === t && (t = "utf8"), n.isBuffer(e) ? a(e.toString("base64")) : a(n.from(e, t).toString("base64"));
          }
          function s(e) {
            return e = e.toString(), i.default(e).replace(/\-/g, "+").replace(/_/g, "/");
          }
          function a(e) {
            return e.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
          }
          var c = o;
          c.encode = o, c.decode = function(e, t) {
            return void 0 === t && (t = "utf8"), n.from(s(e), "base64").toString(t);
          }, c.toBase64 = s, c.fromBase64 = a, c.toBuffer = function(e) {
            return n.from(s(e), "base64");
          }, t.default = c;
        },
        1518: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = function(e) {
            var t = e.length, r = t % 4;
            if (!r) return e;
            var i = t, o = 4 - r, s = t + o, a = n.alloc(s);
            for (a.write(e); o--; ) a.write("=", i++);
            return a.toString();
          };
        },
        3363: (e, t, r) => {
          e.exports = r(2240).default, e.exports.default = e.exports;
        },
        3550: function(e, t, r) {
          !function(e, t) {
            "use strict";
            function n(e, t) {
              if (!e) throw new Error(t || "Assertion failed");
            }
            function i(e, t) {
              e.super_ = t;
              var r = function() {};
              r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
            }
            function o(e, t, r) {
              if (o.isBN(e)) return e;
              this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== e && ("le" !== t && "be" !== t || (r = t, 
              t = 10), this._init(e || 0, t || 10, r || "be"));
            }
            var s;
            "object" == typeof e ? e.exports = o : t.BN = o, o.BN = o, o.wordSize = 26;
            try {
              s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(6601).Buffer;
            } catch (e) {}
            function a(e, t) {
              var r = e.charCodeAt(t);
              return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void n(!1, "Invalid character in " + e);
            }
            function c(e, t, r) {
              var n = a(e, r);
              return r - 1 >= t && (n |= a(e, r - 1) << 4), n;
            }
            function f(e, t, r, i) {
              for (var o = 0, s = 0, a = Math.min(e.length, r), c = t; c < a; c++) {
                var f = e.charCodeAt(c) - 48;
                o *= i, s = f >= 49 ? f - 49 + 10 : f >= 17 ? f - 17 + 10 : f, n(f >= 0 && s < i, "Invalid character"), o += s;
              }
              return o;
            }
            function u(e, t) {
              e.words = t.words, e.length = t.length, e.negative = t.negative, e.red = t.red;
            }
            if (o.isBN = function(e) {
              return e instanceof o || null !== e && "object" == typeof e && e.constructor.wordSize === o.wordSize && Array.isArray(e.words);
            }, o.max = function(e, t) {
              return e.cmp(t) > 0 ? e : t;
            }, o.min = function(e, t) {
              return e.cmp(t) < 0 ? e : t;
            }, o.prototype._init = function(e, t, r) {
              if ("number" == typeof e) return this._initNumber(e, t, r);
              if ("object" == typeof e) return this._initArray(e, t, r);
              "hex" === t && (t = 16), n(t === (0 | t) && t >= 2 && t <= 36);
              var i = 0;
              "-" === (e = e.toString().replace(/\s+/g, ""))[0] && (i++, this.negative = 1), i < e.length && (16 === t ? this._parseHex(e, i, r) : (this._parseBase(e, t, i), 
              "le" === r && this._initArray(this.toArray(), t, r)));
            }, o.prototype._initNumber = function(e, t, r) {
              e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [ 67108863 & e ], this.length = 1) : e < 4503599627370496 ? (this.words = [ 67108863 & e, e / 67108864 & 67108863 ], 
              this.length = 2) : (n(e < 9007199254740992), this.words = [ 67108863 & e, e / 67108864 & 67108863, 1 ], this.length = 3), 
              "le" === r && this._initArray(this.toArray(), t, r);
            }, o.prototype._initArray = function(e, t, r) {
              if (n("number" == typeof e.length), e.length <= 0) return this.words = [ 0 ], this.length = 1, this;
              this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) this.words[i] = 0;
              var o, s, a = 0;
              if ("be" === r) for (i = e.length - 1, o = 0; i >= 0; i -= 3) s = e[i] | e[i - 1] << 8 | e[i - 2] << 16, this.words[o] |= s << a & 67108863, 
              this.words[o + 1] = s >>> 26 - a & 67108863, (a += 24) >= 26 && (a -= 26, o++); else if ("le" === r) for (i = 0, o = 0; i < e.length; i += 3) s = e[i] | e[i + 1] << 8 | e[i + 2] << 16, 
              this.words[o] |= s << a & 67108863, this.words[o + 1] = s >>> 26 - a & 67108863, (a += 24) >= 26 && (a -= 26, o++);
              return this._strip();
            }, o.prototype._parseHex = function(e, t, r) {
              this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);
              for (var n = 0; n < this.length; n++) this.words[n] = 0;
              var i, o = 0, s = 0;
              if ("be" === r) for (n = e.length - 1; n >= t; n -= 2) i = c(e, t, n) << o, this.words[s] |= 67108863 & i, o >= 18 ? (o -= 18, 
              s += 1, this.words[s] |= i >>> 26) : o += 8; else for (n = (e.length - t) % 2 == 0 ? t + 1 : t; n < e.length; n += 2) i = c(e, t, n) << o, 
              this.words[s] |= 67108863 & i, o >= 18 ? (o -= 18, s += 1, this.words[s] |= i >>> 26) : o += 8;
              this._strip();
            }, o.prototype._parseBase = function(e, t, r) {
              this.words = [ 0 ], this.length = 1;
              for (var n = 0, i = 1; i <= 67108863; i *= t) n++;
              n--, i = i / t | 0;
              for (var o = e.length - r, s = o % n, a = Math.min(o, o - s) + r, c = 0, u = r; u < a; u += n) c = f(e, u, u + n, t), this.imuln(i), 
              this.words[0] + c < 67108864 ? this.words[0] += c : this._iaddn(c);
              if (0 !== s) {
                var h = 1;
                for (c = f(e, u, e.length, t), u = 0; u < s; u++) h *= t;
                this.imuln(h), this.words[0] + c < 67108864 ? this.words[0] += c : this._iaddn(c);
              }
              this._strip();
            }, o.prototype.copy = function(e) {
              e.words = new Array(this.length);
              for (var t = 0; t < this.length; t++) e.words[t] = this.words[t];
              e.length = this.length, e.negative = this.negative, e.red = this.red;
            }, o.prototype._move = function(e) {
              u(e, this);
            }, o.prototype.clone = function() {
              var e = new o(null);
              return this.copy(e), e;
            }, o.prototype._expand = function(e) {
              for (;this.length < e; ) this.words[this.length++] = 0;
              return this;
            }, o.prototype._strip = function() {
              for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
              return this._normSign();
            }, o.prototype._normSign = function() {
              return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
            }, "undefined" != typeof Symbol && "function" == typeof Symbol.for) try {
              o.prototype[Symbol.for("nodejs.util.inspect.custom")] = h;
            } catch (e) {
              o.prototype.inspect = h;
            } else o.prototype.inspect = h;
            function h() {
              return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
            }
            var d = [ "", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000" ], l = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ], p = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
            function b(e, t, r) {
              r.negative = t.negative ^ e.negative;
              var n = e.length + t.length | 0;
              r.length = n, n = n - 1 | 0;
              var i = 0 | e.words[0], o = 0 | t.words[0], s = i * o, a = 67108863 & s, c = s / 67108864 | 0;
              r.words[0] = a;
              for (var f = 1; f < n; f++) {
                for (var u = c >>> 26, h = 67108863 & c, d = Math.min(f, t.length - 1), l = Math.max(0, f - e.length + 1); l <= d; l++) {
                  var p = f - l | 0;
                  u += (s = (i = 0 | e.words[p]) * (o = 0 | t.words[l]) + h) / 67108864 | 0, h = 67108863 & s;
                }
                r.words[f] = 0 | h, c = 0 | u;
              }
              return 0 !== c ? r.words[f] = 0 | c : r.length--, r._strip();
            }
            o.prototype.toString = function(e, t) {
              var r;
              if (t = 0 | t || 1, 16 === (e = e || 10) || "hex" === e) {
                r = "";
                for (var i = 0, o = 0, s = 0; s < this.length; s++) {
                  var a = this.words[s], c = (16777215 & (a << i | o)).toString(16);
                  o = a >>> 24 - i & 16777215, (i += 2) >= 26 && (i -= 26, s--), r = 0 !== o || s !== this.length - 1 ? d[6 - c.length] + c + r : c + r;
                }
                for (0 !== o && (r = o.toString(16) + r); r.length % t != 0; ) r = "0" + r;
                return 0 !== this.negative && (r = "-" + r), r;
              }
              if (e === (0 | e) && e >= 2 && e <= 36) {
                var f = l[e], u = p[e];
                r = "";
                var h = this.clone();
                for (h.negative = 0; !h.isZero(); ) {
                  var b = h.modrn(u).toString(e);
                  r = (h = h.idivn(u)).isZero() ? b + r : d[f - b.length] + b + r;
                }
                for (this.isZero() && (r = "0" + r); r.length % t != 0; ) r = "0" + r;
                return 0 !== this.negative && (r = "-" + r), r;
              }
              n(!1, "Base should be between 2 and 36");
            }, o.prototype.toNumber = function() {
              var e = this.words[0];
              return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, "Number can only safely store up to 53 bits"), 
              0 !== this.negative ? -e : e;
            }, o.prototype.toJSON = function() {
              return this.toString(16, 2);
            }, s && (o.prototype.toBuffer = function(e, t) {
              return this.toArrayLike(s, e, t);
            }), o.prototype.toArray = function(e, t) {
              return this.toArrayLike(Array, e, t);
            }, o.prototype.toArrayLike = function(e, t, r) {
              this._strip();
              var i = this.byteLength(), o = r || Math.max(1, i);
              n(i <= o, "byte array longer than desired length"), n(o > 0, "Requested array length <= 0");
              var s = function(e, t) {
                return e.allocUnsafe ? e.allocUnsafe(t) : new e(t);
              }(e, o);
              return this["_toArrayLike" + ("le" === t ? "LE" : "BE")](s, i), s;
            }, o.prototype._toArrayLikeLE = function(e, t) {
              for (var r = 0, n = 0, i = 0, o = 0; i < this.length; i++) {
                var s = this.words[i] << o | n;
                e[r++] = 255 & s, r < e.length && (e[r++] = s >> 8 & 255), r < e.length && (e[r++] = s >> 16 & 255), 6 === o ? (r < e.length && (e[r++] = s >> 24 & 255), 
                n = 0, o = 0) : (n = s >>> 24, o += 2);
              }
              if (r < e.length) for (e[r++] = n; r < e.length; ) e[r++] = 0;
            }, o.prototype._toArrayLikeBE = function(e, t) {
              for (var r = e.length - 1, n = 0, i = 0, o = 0; i < this.length; i++) {
                var s = this.words[i] << o | n;
                e[r--] = 255 & s, r >= 0 && (e[r--] = s >> 8 & 255), r >= 0 && (e[r--] = s >> 16 & 255), 6 === o ? (r >= 0 && (e[r--] = s >> 24 & 255), 
                n = 0, o = 0) : (n = s >>> 24, o += 2);
              }
              if (r >= 0) for (e[r--] = n; r >= 0; ) e[r--] = 0;
            }, Math.clz32 ? o.prototype._countBits = function(e) {
              return 32 - Math.clz32(e);
            } : o.prototype._countBits = function(e) {
              var t = e, r = 0;
              return t >= 4096 && (r += 13, t >>>= 13), t >= 64 && (r += 7, t >>>= 7), t >= 8 && (r += 4, t >>>= 4), t >= 2 && (r += 2, 
              t >>>= 2), r + t;
            }, o.prototype._zeroBits = function(e) {
              if (0 === e) return 26;
              var t = e, r = 0;
              return 0 == (8191 & t) && (r += 13, t >>>= 13), 0 == (127 & t) && (r += 7, t >>>= 7), 0 == (15 & t) && (r += 4, t >>>= 4), 
              0 == (3 & t) && (r += 2, t >>>= 2), 0 == (1 & t) && r++, r;
            }, o.prototype.bitLength = function() {
              var e = this.words[this.length - 1], t = this._countBits(e);
              return 26 * (this.length - 1) + t;
            }, o.prototype.zeroBits = function() {
              if (this.isZero()) return 0;
              for (var e = 0, t = 0; t < this.length; t++) {
                var r = this._zeroBits(this.words[t]);
                if (e += r, 26 !== r) break;
              }
              return e;
            }, o.prototype.byteLength = function() {
              return Math.ceil(this.bitLength() / 8);
            }, o.prototype.toTwos = function(e) {
              return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();
            }, o.prototype.fromTwos = function(e) {
              return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();
            }, o.prototype.isNeg = function() {
              return 0 !== this.negative;
            }, o.prototype.neg = function() {
              return this.clone().ineg();
            }, o.prototype.ineg = function() {
              return this.isZero() || (this.negative ^= 1), this;
            }, o.prototype.iuor = function(e) {
              for (;this.length < e.length; ) this.words[this.length++] = 0;
              for (var t = 0; t < e.length; t++) this.words[t] = this.words[t] | e.words[t];
              return this._strip();
            }, o.prototype.ior = function(e) {
              return n(0 == (this.negative | e.negative)), this.iuor(e);
            }, o.prototype.or = function(e) {
              return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);
            }, o.prototype.uor = function(e) {
              return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);
            }, o.prototype.iuand = function(e) {
              var t;
              t = this.length > e.length ? e : this;
              for (var r = 0; r < t.length; r++) this.words[r] = this.words[r] & e.words[r];
              return this.length = t.length, this._strip();
            }, o.prototype.iand = function(e) {
              return n(0 == (this.negative | e.negative)), this.iuand(e);
            }, o.prototype.and = function(e) {
              return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);
            }, o.prototype.uand = function(e) {
              return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);
            }, o.prototype.iuxor = function(e) {
              var t, r;
              this.length > e.length ? (t = this, r = e) : (t = e, r = this);
              for (var n = 0; n < r.length; n++) this.words[n] = t.words[n] ^ r.words[n];
              if (this !== t) for (;n < t.length; n++) this.words[n] = t.words[n];
              return this.length = t.length, this._strip();
            }, o.prototype.ixor = function(e) {
              return n(0 == (this.negative | e.negative)), this.iuxor(e);
            }, o.prototype.xor = function(e) {
              return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);
            }, o.prototype.uxor = function(e) {
              return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);
            }, o.prototype.inotn = function(e) {
              n("number" == typeof e && e >= 0);
              var t = 0 | Math.ceil(e / 26), r = e % 26;
              this._expand(t), r > 0 && t--;
              for (var i = 0; i < t; i++) this.words[i] = 67108863 & ~this.words[i];
              return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this._strip();
            }, o.prototype.notn = function(e) {
              return this.clone().inotn(e);
            }, o.prototype.setn = function(e, t) {
              n("number" == typeof e && e >= 0);
              var r = e / 26 | 0, i = e % 26;
              return this._expand(r + 1), this.words[r] = t ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this._strip();
            }, o.prototype.iadd = function(e) {
              var t, r, n;
              if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();
              if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();
              this.length > e.length ? (r = this, n = e) : (r = e, n = this);
              for (var i = 0, o = 0; o < n.length; o++) t = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
              for (;0 !== i && o < r.length; o++) t = (0 | r.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
              if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
              return this;
            }, o.prototype.add = function(e) {
              var t;
              return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, 
              t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);
            }, o.prototype.isub = function(e) {
              if (0 !== e.negative) {
                e.negative = 0;
                var t = this.iadd(e);
                return e.negative = 1, t._normSign();
              }
              if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();
              var r, n, i = this.cmp(e);
              if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
              i > 0 ? (r = this, n = e) : (r = e, n = this);
              for (var o = 0, s = 0; s < n.length; s++) o = (t = (0 | r.words[s]) - (0 | n.words[s]) + o) >> 26, this.words[s] = 67108863 & t;
              for (;0 !== o && s < r.length; s++) o = (t = (0 | r.words[s]) + o) >> 26, this.words[s] = 67108863 & t;
              if (0 === o && s < r.length && r !== this) for (;s < r.length; s++) this.words[s] = r.words[s];
              return this.length = Math.max(this.length, s), r !== this && (this.negative = 1), this._strip();
            }, o.prototype.sub = function(e) {
              return this.clone().isub(e);
            };
            var y = function(e, t, r) {
              var n, i, o, s = e.words, a = t.words, c = r.words, f = 0, u = 0 | s[0], h = 8191 & u, d = u >>> 13, l = 0 | s[1], p = 8191 & l, b = l >>> 13, y = 0 | s[2], g = 8191 & y, m = y >>> 13, v = 0 | s[3], w = 8191 & v, _ = v >>> 13, S = 0 | s[4], E = 8191 & S, A = S >>> 13, x = 0 | s[5], k = 8191 & x, P = x >>> 13, O = 0 | s[6], M = 8191 & O, I = O >>> 13, T = 0 | s[7], R = 8191 & T, C = T >>> 13, N = 0 | s[8], j = 8191 & N, B = N >>> 13, L = 0 | s[9], D = 8191 & L, U = L >>> 13, q = 0 | a[0], F = 8191 & q, H = q >>> 13, z = 0 | a[1], K = 8191 & z, V = z >>> 13, G = 0 | a[2], W = 8191 & G, X = G >>> 13, Y = 0 | a[3], J = 8191 & Y, $ = Y >>> 13, Z = 0 | a[4], Q = 8191 & Z, ee = Z >>> 13, te = 0 | a[5], re = 8191 & te, ne = te >>> 13, ie = 0 | a[6], oe = 8191 & ie, se = ie >>> 13, ae = 0 | a[7], ce = 8191 & ae, fe = ae >>> 13, ue = 0 | a[8], he = 8191 & ue, de = ue >>> 13, le = 0 | a[9], pe = 8191 & le, be = le >>> 13;
              r.negative = e.negative ^ t.negative, r.length = 19;
              var ye = (f + (n = Math.imul(h, F)) | 0) + ((8191 & (i = (i = Math.imul(h, H)) + Math.imul(d, F) | 0)) << 13) | 0;
              f = ((o = Math.imul(d, H)) + (i >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n = Math.imul(p, F), i = (i = Math.imul(p, H)) + Math.imul(b, F) | 0, 
              o = Math.imul(b, H);
              var ge = (f + (n = n + Math.imul(h, K) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, V) | 0) + Math.imul(d, K) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, V) | 0) + (i >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n = Math.imul(g, F), i = (i = Math.imul(g, H)) + Math.imul(m, F) | 0, 
              o = Math.imul(m, H), n = n + Math.imul(p, K) | 0, i = (i = i + Math.imul(p, V) | 0) + Math.imul(b, K) | 0, o = o + Math.imul(b, V) | 0;
              var me = (f + (n = n + Math.imul(h, W) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, X) | 0) + Math.imul(d, W) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, X) | 0) + (i >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, n = Math.imul(w, F), i = (i = Math.imul(w, H)) + Math.imul(_, F) | 0, 
              o = Math.imul(_, H), n = n + Math.imul(g, K) | 0, i = (i = i + Math.imul(g, V) | 0) + Math.imul(m, K) | 0, o = o + Math.imul(m, V) | 0, 
              n = n + Math.imul(p, W) | 0, i = (i = i + Math.imul(p, X) | 0) + Math.imul(b, W) | 0, o = o + Math.imul(b, X) | 0;
              var ve = (f + (n = n + Math.imul(h, J) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, $) | 0) + Math.imul(d, J) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, $) | 0) + (i >>> 13) | 0) + (ve >>> 26) | 0, ve &= 67108863, n = Math.imul(E, F), i = (i = Math.imul(E, H)) + Math.imul(A, F) | 0, 
              o = Math.imul(A, H), n = n + Math.imul(w, K) | 0, i = (i = i + Math.imul(w, V) | 0) + Math.imul(_, K) | 0, o = o + Math.imul(_, V) | 0, 
              n = n + Math.imul(g, W) | 0, i = (i = i + Math.imul(g, X) | 0) + Math.imul(m, W) | 0, o = o + Math.imul(m, X) | 0, n = n + Math.imul(p, J) | 0, 
              i = (i = i + Math.imul(p, $) | 0) + Math.imul(b, J) | 0, o = o + Math.imul(b, $) | 0;
              var we = (f + (n = n + Math.imul(h, Q) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ee) | 0) + Math.imul(d, Q) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, ee) | 0) + (i >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n = Math.imul(k, F), i = (i = Math.imul(k, H)) + Math.imul(P, F) | 0, 
              o = Math.imul(P, H), n = n + Math.imul(E, K) | 0, i = (i = i + Math.imul(E, V) | 0) + Math.imul(A, K) | 0, o = o + Math.imul(A, V) | 0, 
              n = n + Math.imul(w, W) | 0, i = (i = i + Math.imul(w, X) | 0) + Math.imul(_, W) | 0, o = o + Math.imul(_, X) | 0, n = n + Math.imul(g, J) | 0, 
              i = (i = i + Math.imul(g, $) | 0) + Math.imul(m, J) | 0, o = o + Math.imul(m, $) | 0, n = n + Math.imul(p, Q) | 0, i = (i = i + Math.imul(p, ee) | 0) + Math.imul(b, Q) | 0, 
              o = o + Math.imul(b, ee) | 0;
              var _e = (f + (n = n + Math.imul(h, re) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ne) | 0) + Math.imul(d, re) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, ne) | 0) + (i >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n = Math.imul(M, F), i = (i = Math.imul(M, H)) + Math.imul(I, F) | 0, 
              o = Math.imul(I, H), n = n + Math.imul(k, K) | 0, i = (i = i + Math.imul(k, V) | 0) + Math.imul(P, K) | 0, o = o + Math.imul(P, V) | 0, 
              n = n + Math.imul(E, W) | 0, i = (i = i + Math.imul(E, X) | 0) + Math.imul(A, W) | 0, o = o + Math.imul(A, X) | 0, n = n + Math.imul(w, J) | 0, 
              i = (i = i + Math.imul(w, $) | 0) + Math.imul(_, J) | 0, o = o + Math.imul(_, $) | 0, n = n + Math.imul(g, Q) | 0, i = (i = i + Math.imul(g, ee) | 0) + Math.imul(m, Q) | 0, 
              o = o + Math.imul(m, ee) | 0, n = n + Math.imul(p, re) | 0, i = (i = i + Math.imul(p, ne) | 0) + Math.imul(b, re) | 0, o = o + Math.imul(b, ne) | 0;
              var Se = (f + (n = n + Math.imul(h, oe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, se) | 0) + Math.imul(d, oe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, se) | 0) + (i >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n = Math.imul(R, F), i = (i = Math.imul(R, H)) + Math.imul(C, F) | 0, 
              o = Math.imul(C, H), n = n + Math.imul(M, K) | 0, i = (i = i + Math.imul(M, V) | 0) + Math.imul(I, K) | 0, o = o + Math.imul(I, V) | 0, 
              n = n + Math.imul(k, W) | 0, i = (i = i + Math.imul(k, X) | 0) + Math.imul(P, W) | 0, o = o + Math.imul(P, X) | 0, n = n + Math.imul(E, J) | 0, 
              i = (i = i + Math.imul(E, $) | 0) + Math.imul(A, J) | 0, o = o + Math.imul(A, $) | 0, n = n + Math.imul(w, Q) | 0, i = (i = i + Math.imul(w, ee) | 0) + Math.imul(_, Q) | 0, 
              o = o + Math.imul(_, ee) | 0, n = n + Math.imul(g, re) | 0, i = (i = i + Math.imul(g, ne) | 0) + Math.imul(m, re) | 0, o = o + Math.imul(m, ne) | 0, 
              n = n + Math.imul(p, oe) | 0, i = (i = i + Math.imul(p, se) | 0) + Math.imul(b, oe) | 0, o = o + Math.imul(b, se) | 0;
              var Ee = (f + (n = n + Math.imul(h, ce) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, fe) | 0) + Math.imul(d, ce) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, fe) | 0) + (i >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n = Math.imul(j, F), i = (i = Math.imul(j, H)) + Math.imul(B, F) | 0, 
              o = Math.imul(B, H), n = n + Math.imul(R, K) | 0, i = (i = i + Math.imul(R, V) | 0) + Math.imul(C, K) | 0, o = o + Math.imul(C, V) | 0, 
              n = n + Math.imul(M, W) | 0, i = (i = i + Math.imul(M, X) | 0) + Math.imul(I, W) | 0, o = o + Math.imul(I, X) | 0, n = n + Math.imul(k, J) | 0, 
              i = (i = i + Math.imul(k, $) | 0) + Math.imul(P, J) | 0, o = o + Math.imul(P, $) | 0, n = n + Math.imul(E, Q) | 0, i = (i = i + Math.imul(E, ee) | 0) + Math.imul(A, Q) | 0, 
              o = o + Math.imul(A, ee) | 0, n = n + Math.imul(w, re) | 0, i = (i = i + Math.imul(w, ne) | 0) + Math.imul(_, re) | 0, o = o + Math.imul(_, ne) | 0, 
              n = n + Math.imul(g, oe) | 0, i = (i = i + Math.imul(g, se) | 0) + Math.imul(m, oe) | 0, o = o + Math.imul(m, se) | 0, n = n + Math.imul(p, ce) | 0, 
              i = (i = i + Math.imul(p, fe) | 0) + Math.imul(b, ce) | 0, o = o + Math.imul(b, fe) | 0;
              var Ae = (f + (n = n + Math.imul(h, he) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, de) | 0) + Math.imul(d, he) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, de) | 0) + (i >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n = Math.imul(D, F), i = (i = Math.imul(D, H)) + Math.imul(U, F) | 0, 
              o = Math.imul(U, H), n = n + Math.imul(j, K) | 0, i = (i = i + Math.imul(j, V) | 0) + Math.imul(B, K) | 0, o = o + Math.imul(B, V) | 0, 
              n = n + Math.imul(R, W) | 0, i = (i = i + Math.imul(R, X) | 0) + Math.imul(C, W) | 0, o = o + Math.imul(C, X) | 0, n = n + Math.imul(M, J) | 0, 
              i = (i = i + Math.imul(M, $) | 0) + Math.imul(I, J) | 0, o = o + Math.imul(I, $) | 0, n = n + Math.imul(k, Q) | 0, i = (i = i + Math.imul(k, ee) | 0) + Math.imul(P, Q) | 0, 
              o = o + Math.imul(P, ee) | 0, n = n + Math.imul(E, re) | 0, i = (i = i + Math.imul(E, ne) | 0) + Math.imul(A, re) | 0, o = o + Math.imul(A, ne) | 0, 
              n = n + Math.imul(w, oe) | 0, i = (i = i + Math.imul(w, se) | 0) + Math.imul(_, oe) | 0, o = o + Math.imul(_, se) | 0, n = n + Math.imul(g, ce) | 0, 
              i = (i = i + Math.imul(g, fe) | 0) + Math.imul(m, ce) | 0, o = o + Math.imul(m, fe) | 0, n = n + Math.imul(p, he) | 0, i = (i = i + Math.imul(p, de) | 0) + Math.imul(b, he) | 0, 
              o = o + Math.imul(b, de) | 0;
              var xe = (f + (n = n + Math.imul(h, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, be) | 0) + Math.imul(d, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, be) | 0) + (i >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n = Math.imul(D, K), i = (i = Math.imul(D, V)) + Math.imul(U, K) | 0, 
              o = Math.imul(U, V), n = n + Math.imul(j, W) | 0, i = (i = i + Math.imul(j, X) | 0) + Math.imul(B, W) | 0, o = o + Math.imul(B, X) | 0, 
              n = n + Math.imul(R, J) | 0, i = (i = i + Math.imul(R, $) | 0) + Math.imul(C, J) | 0, o = o + Math.imul(C, $) | 0, n = n + Math.imul(M, Q) | 0, 
              i = (i = i + Math.imul(M, ee) | 0) + Math.imul(I, Q) | 0, o = o + Math.imul(I, ee) | 0, n = n + Math.imul(k, re) | 0, i = (i = i + Math.imul(k, ne) | 0) + Math.imul(P, re) | 0, 
              o = o + Math.imul(P, ne) | 0, n = n + Math.imul(E, oe) | 0, i = (i = i + Math.imul(E, se) | 0) + Math.imul(A, oe) | 0, o = o + Math.imul(A, se) | 0, 
              n = n + Math.imul(w, ce) | 0, i = (i = i + Math.imul(w, fe) | 0) + Math.imul(_, ce) | 0, o = o + Math.imul(_, fe) | 0, n = n + Math.imul(g, he) | 0, 
              i = (i = i + Math.imul(g, de) | 0) + Math.imul(m, he) | 0, o = o + Math.imul(m, de) | 0;
              var ke = (f + (n = n + Math.imul(p, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, be) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(b, be) | 0) + (i >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n = Math.imul(D, W), i = (i = Math.imul(D, X)) + Math.imul(U, W) | 0, 
              o = Math.imul(U, X), n = n + Math.imul(j, J) | 0, i = (i = i + Math.imul(j, $) | 0) + Math.imul(B, J) | 0, o = o + Math.imul(B, $) | 0, 
              n = n + Math.imul(R, Q) | 0, i = (i = i + Math.imul(R, ee) | 0) + Math.imul(C, Q) | 0, o = o + Math.imul(C, ee) | 0, n = n + Math.imul(M, re) | 0, 
              i = (i = i + Math.imul(M, ne) | 0) + Math.imul(I, re) | 0, o = o + Math.imul(I, ne) | 0, n = n + Math.imul(k, oe) | 0, i = (i = i + Math.imul(k, se) | 0) + Math.imul(P, oe) | 0, 
              o = o + Math.imul(P, se) | 0, n = n + Math.imul(E, ce) | 0, i = (i = i + Math.imul(E, fe) | 0) + Math.imul(A, ce) | 0, o = o + Math.imul(A, fe) | 0, 
              n = n + Math.imul(w, he) | 0, i = (i = i + Math.imul(w, de) | 0) + Math.imul(_, he) | 0, o = o + Math.imul(_, de) | 0;
              var Pe = (f + (n = n + Math.imul(g, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(g, be) | 0) + Math.imul(m, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(m, be) | 0) + (i >>> 13) | 0) + (Pe >>> 26) | 0, Pe &= 67108863, n = Math.imul(D, J), i = (i = Math.imul(D, $)) + Math.imul(U, J) | 0, 
              o = Math.imul(U, $), n = n + Math.imul(j, Q) | 0, i = (i = i + Math.imul(j, ee) | 0) + Math.imul(B, Q) | 0, o = o + Math.imul(B, ee) | 0, 
              n = n + Math.imul(R, re) | 0, i = (i = i + Math.imul(R, ne) | 0) + Math.imul(C, re) | 0, o = o + Math.imul(C, ne) | 0, n = n + Math.imul(M, oe) | 0, 
              i = (i = i + Math.imul(M, se) | 0) + Math.imul(I, oe) | 0, o = o + Math.imul(I, se) | 0, n = n + Math.imul(k, ce) | 0, i = (i = i + Math.imul(k, fe) | 0) + Math.imul(P, ce) | 0, 
              o = o + Math.imul(P, fe) | 0, n = n + Math.imul(E, he) | 0, i = (i = i + Math.imul(E, de) | 0) + Math.imul(A, he) | 0, o = o + Math.imul(A, de) | 0;
              var Oe = (f + (n = n + Math.imul(w, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, be) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(_, be) | 0) + (i >>> 13) | 0) + (Oe >>> 26) | 0, Oe &= 67108863, n = Math.imul(D, Q), i = (i = Math.imul(D, ee)) + Math.imul(U, Q) | 0, 
              o = Math.imul(U, ee), n = n + Math.imul(j, re) | 0, i = (i = i + Math.imul(j, ne) | 0) + Math.imul(B, re) | 0, o = o + Math.imul(B, ne) | 0, 
              n = n + Math.imul(R, oe) | 0, i = (i = i + Math.imul(R, se) | 0) + Math.imul(C, oe) | 0, o = o + Math.imul(C, se) | 0, n = n + Math.imul(M, ce) | 0, 
              i = (i = i + Math.imul(M, fe) | 0) + Math.imul(I, ce) | 0, o = o + Math.imul(I, fe) | 0, n = n + Math.imul(k, he) | 0, i = (i = i + Math.imul(k, de) | 0) + Math.imul(P, he) | 0, 
              o = o + Math.imul(P, de) | 0;
              var Me = (f + (n = n + Math.imul(E, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(E, be) | 0) + Math.imul(A, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(A, be) | 0) + (i >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, n = Math.imul(D, re), i = (i = Math.imul(D, ne)) + Math.imul(U, re) | 0, 
              o = Math.imul(U, ne), n = n + Math.imul(j, oe) | 0, i = (i = i + Math.imul(j, se) | 0) + Math.imul(B, oe) | 0, o = o + Math.imul(B, se) | 0, 
              n = n + Math.imul(R, ce) | 0, i = (i = i + Math.imul(R, fe) | 0) + Math.imul(C, ce) | 0, o = o + Math.imul(C, fe) | 0, n = n + Math.imul(M, he) | 0, 
              i = (i = i + Math.imul(M, de) | 0) + Math.imul(I, he) | 0, o = o + Math.imul(I, de) | 0;
              var Ie = (f + (n = n + Math.imul(k, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(k, be) | 0) + Math.imul(P, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(P, be) | 0) + (i >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, n = Math.imul(D, oe), i = (i = Math.imul(D, se)) + Math.imul(U, oe) | 0, 
              o = Math.imul(U, se), n = n + Math.imul(j, ce) | 0, i = (i = i + Math.imul(j, fe) | 0) + Math.imul(B, ce) | 0, o = o + Math.imul(B, fe) | 0, 
              n = n + Math.imul(R, he) | 0, i = (i = i + Math.imul(R, de) | 0) + Math.imul(C, he) | 0, o = o + Math.imul(C, de) | 0;
              var Te = (f + (n = n + Math.imul(M, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(M, be) | 0) + Math.imul(I, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(I, be) | 0) + (i >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n = Math.imul(D, ce), i = (i = Math.imul(D, fe)) + Math.imul(U, ce) | 0, 
              o = Math.imul(U, fe), n = n + Math.imul(j, he) | 0, i = (i = i + Math.imul(j, de) | 0) + Math.imul(B, he) | 0, o = o + Math.imul(B, de) | 0;
              var Re = (f + (n = n + Math.imul(R, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(R, be) | 0) + Math.imul(C, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(C, be) | 0) + (i >>> 13) | 0) + (Re >>> 26) | 0, Re &= 67108863, n = Math.imul(D, he), i = (i = Math.imul(D, de)) + Math.imul(U, he) | 0, 
              o = Math.imul(U, de);
              var Ce = (f + (n = n + Math.imul(j, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(j, be) | 0) + Math.imul(B, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(B, be) | 0) + (i >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863;
              var Ne = (f + (n = Math.imul(D, pe)) | 0) + ((8191 & (i = (i = Math.imul(D, be)) + Math.imul(U, pe) | 0)) << 13) | 0;
              return f = ((o = Math.imul(U, be)) + (i >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, c[0] = ye, c[1] = ge, c[2] = me, 
              c[3] = ve, c[4] = we, c[5] = _e, c[6] = Se, c[7] = Ee, c[8] = Ae, c[9] = xe, c[10] = ke, c[11] = Pe, c[12] = Oe, c[13] = Me, 
              c[14] = Ie, c[15] = Te, c[16] = Re, c[17] = Ce, c[18] = Ne, 0 !== f && (c[19] = f, r.length++), r;
            };
            function g(e, t, r) {
              r.negative = t.negative ^ e.negative, r.length = e.length + t.length;
              for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
                var s = i;
                i = 0;
                for (var a = 67108863 & n, c = Math.min(o, t.length - 1), f = Math.max(0, o - e.length + 1); f <= c; f++) {
                  var u = o - f, h = (0 | e.words[u]) * (0 | t.words[f]), d = 67108863 & h;
                  a = 67108863 & (d = d + a | 0), i += (s = (s = s + (h / 67108864 | 0) | 0) + (d >>> 26) | 0) >>> 26, s &= 67108863;
                }
                r.words[o] = a, n = s, s = i;
              }
              return 0 !== n ? r.words[o] = n : r.length--, r._strip();
            }
            function m(e, t, r) {
              return g(e, t, r);
            }
            function v(e, t) {
              this.x = e, this.y = t;
            }
            Math.imul || (y = b), o.prototype.mulTo = function(e, t) {
              var r = this.length + e.length;
              return 10 === this.length && 10 === e.length ? y(this, e, t) : r < 63 ? b(this, e, t) : r < 1024 ? g(this, e, t) : m(this, e, t);
            }, v.prototype.makeRBT = function(e) {
              for (var t = new Array(e), r = o.prototype._countBits(e) - 1, n = 0; n < e; n++) t[n] = this.revBin(n, r, e);
              return t;
            }, v.prototype.revBin = function(e, t, r) {
              if (0 === e || e === r - 1) return e;
              for (var n = 0, i = 0; i < t; i++) n |= (1 & e) << t - i - 1, e >>= 1;
              return n;
            }, v.prototype.permute = function(e, t, r, n, i, o) {
              for (var s = 0; s < o; s++) n[s] = t[e[s]], i[s] = r[e[s]];
            }, v.prototype.transform = function(e, t, r, n, i, o) {
              this.permute(o, e, t, r, n, i);
              for (var s = 1; s < i; s <<= 1) for (var a = s << 1, c = Math.cos(2 * Math.PI / a), f = Math.sin(2 * Math.PI / a), u = 0; u < i; u += a) for (var h = c, d = f, l = 0; l < s; l++) {
                var p = r[u + l], b = n[u + l], y = r[u + l + s], g = n[u + l + s], m = h * y - d * g;
                g = h * g + d * y, y = m, r[u + l] = p + y, n[u + l] = b + g, r[u + l + s] = p - y, n[u + l + s] = b - g, l !== a && (m = c * h - f * d, 
                d = c * d + f * h, h = m);
              }
            }, v.prototype.guessLen13b = function(e, t) {
              var r = 1 | Math.max(t, e), n = 1 & r, i = 0;
              for (r = r / 2 | 0; r; r >>>= 1) i++;
              return 1 << i + 1 + n;
            }, v.prototype.conjugate = function(e, t, r) {
              if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
                var i = e[n];
                e[n] = e[r - n - 1], e[r - n - 1] = i, i = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -i;
              }
            }, v.prototype.normalize13b = function(e, t) {
              for (var r = 0, n = 0; n < t / 2; n++) {
                var i = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;
                e[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
              }
              return e;
            }, v.prototype.convert13b = function(e, t, r, i) {
              for (var o = 0, s = 0; s < t; s++) o += 0 | e[s], r[2 * s] = 8191 & o, o >>>= 13, r[2 * s + 1] = 8191 & o, o >>>= 13;
              for (s = 2 * t; s < i; ++s) r[s] = 0;
              n(0 === o), n(0 == (-8192 & o));
            }, v.prototype.stub = function(e) {
              for (var t = new Array(e), r = 0; r < e; r++) t[r] = 0;
              return t;
            }, v.prototype.mulp = function(e, t, r) {
              var n = 2 * this.guessLen13b(e.length, t.length), i = this.makeRBT(n), o = this.stub(n), s = new Array(n), a = new Array(n), c = new Array(n), f = new Array(n), u = new Array(n), h = new Array(n), d = r.words;
              d.length = n, this.convert13b(e.words, e.length, s, n), this.convert13b(t.words, t.length, f, n), this.transform(s, o, a, c, n, i), 
              this.transform(f, o, u, h, n, i);
              for (var l = 0; l < n; l++) {
                var p = a[l] * u[l] - c[l] * h[l];
                c[l] = a[l] * h[l] + c[l] * u[l], a[l] = p;
              }
              return this.conjugate(a, c, n), this.transform(a, c, d, o, n, i), this.conjugate(d, o, n), this.normalize13b(d, n), r.negative = e.negative ^ t.negative, 
              r.length = e.length + t.length, r._strip();
            }, o.prototype.mul = function(e) {
              var t = new o(null);
              return t.words = new Array(this.length + e.length), this.mulTo(e, t);
            }, o.prototype.mulf = function(e) {
              var t = new o(null);
              return t.words = new Array(this.length + e.length), m(this, e, t);
            }, o.prototype.imul = function(e) {
              return this.clone().mulTo(e, this);
            }, o.prototype.imuln = function(e) {
              var t = e < 0;
              t && (e = -e), n("number" == typeof e), n(e < 67108864);
              for (var r = 0, i = 0; i < this.length; i++) {
                var o = (0 | this.words[i]) * e, s = (67108863 & o) + (67108863 & r);
                r >>= 26, r += o / 67108864 | 0, r += s >>> 26, this.words[i] = 67108863 & s;
              }
              return 0 !== r && (this.words[i] = r, this.length++), t ? this.ineg() : this;
            }, o.prototype.muln = function(e) {
              return this.clone().imuln(e);
            }, o.prototype.sqr = function() {
              return this.mul(this);
            }, o.prototype.isqr = function() {
              return this.imul(this.clone());
            }, o.prototype.pow = function(e) {
              var t = function(e) {
                for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
                  var n = r / 26 | 0, i = r % 26;
                  t[r] = e.words[n] >>> i & 1;
                }
                return t;
              }(e);
              if (0 === t.length) return new o(1);
              for (var r = this, n = 0; n < t.length && 0 === t[n]; n++, r = r.sqr()) ;
              if (++n < t.length) for (var i = r.sqr(); n < t.length; n++, i = i.sqr()) 0 !== t[n] && (r = r.mul(i));
              return r;
            }, o.prototype.iushln = function(e) {
              n("number" == typeof e && e >= 0);
              var t, r = e % 26, i = (e - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
              if (0 !== r) {
                var s = 0;
                for (t = 0; t < this.length; t++) {
                  var a = this.words[t] & o, c = (0 | this.words[t]) - a << r;
                  this.words[t] = c | s, s = a >>> 26 - r;
                }
                s && (this.words[t] = s, this.length++);
              }
              if (0 !== i) {
                for (t = this.length - 1; t >= 0; t--) this.words[t + i] = this.words[t];
                for (t = 0; t < i; t++) this.words[t] = 0;
                this.length += i;
              }
              return this._strip();
            }, o.prototype.ishln = function(e) {
              return n(0 === this.negative), this.iushln(e);
            }, o.prototype.iushrn = function(e, t, r) {
              var i;
              n("number" == typeof e && e >= 0), i = t ? (t - t % 26) / 26 : 0;
              var o = e % 26, s = Math.min((e - o) / 26, this.length), a = 67108863 ^ 67108863 >>> o << o, c = r;
              if (i -= s, i = Math.max(0, i), c) {
                for (var f = 0; f < s; f++) c.words[f] = this.words[f];
                c.length = s;
              }
              if (0 === s) ; else if (this.length > s) for (this.length -= s, f = 0; f < this.length; f++) this.words[f] = this.words[f + s]; else this.words[0] = 0, 
              this.length = 1;
              var u = 0;
              for (f = this.length - 1; f >= 0 && (0 !== u || f >= i); f--) {
                var h = 0 | this.words[f];
                this.words[f] = u << 26 - o | h >>> o, u = h & a;
              }
              return c && 0 !== u && (c.words[c.length++] = u), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
            }, o.prototype.ishrn = function(e, t, r) {
              return n(0 === this.negative), this.iushrn(e, t, r);
            }, o.prototype.shln = function(e) {
              return this.clone().ishln(e);
            }, o.prototype.ushln = function(e) {
              return this.clone().iushln(e);
            }, o.prototype.shrn = function(e) {
              return this.clone().ishrn(e);
            }, o.prototype.ushrn = function(e) {
              return this.clone().iushrn(e);
            }, o.prototype.testn = function(e) {
              n("number" == typeof e && e >= 0);
              var t = e % 26, r = (e - t) / 26, i = 1 << t;
              return !(this.length <= r || !(this.words[r] & i));
            }, o.prototype.imaskn = function(e) {
              n("number" == typeof e && e >= 0);
              var t = e % 26, r = (e - t) / 26;
              if (n(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;
              if (0 !== t && r++, this.length = Math.min(r, this.length), 0 !== t) {
                var i = 67108863 ^ 67108863 >>> t << t;
                this.words[this.length - 1] &= i;
              }
              return this._strip();
            }, o.prototype.maskn = function(e) {
              return this.clone().imaskn(e);
            }, o.prototype.iaddn = function(e) {
              return n("number" == typeof e), n(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= e ? (this.words[0] = e - (0 | this.words[0]), 
              this.negative = 0, this) : (this.negative = 0, this.isubn(e), this.negative = 1, this) : this._iaddn(e);
            }, o.prototype._iaddn = function(e) {
              this.words[0] += e;
              for (var t = 0; t < this.length && this.words[t] >= 67108864; t++) this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
              return this.length = Math.max(this.length, t + 1), this;
            }, o.prototype.isubn = function(e) {
              if (n("number" == typeof e), n(e < 67108864), e < 0) return this.iaddn(-e);
              if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;
              if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var t = 0; t < this.length && this.words[t] < 0; t++) this.words[t] += 67108864, 
              this.words[t + 1] -= 1;
              return this._strip();
            }, o.prototype.addn = function(e) {
              return this.clone().iaddn(e);
            }, o.prototype.subn = function(e) {
              return this.clone().isubn(e);
            }, o.prototype.iabs = function() {
              return this.negative = 0, this;
            }, o.prototype.abs = function() {
              return this.clone().iabs();
            }, o.prototype._ishlnsubmul = function(e, t, r) {
              var i, o, s = e.length + r;
              this._expand(s);
              var a = 0;
              for (i = 0; i < e.length; i++) {
                o = (0 | this.words[i + r]) + a;
                var c = (0 | e.words[i]) * t;
                a = ((o -= 67108863 & c) >> 26) - (c / 67108864 | 0), this.words[i + r] = 67108863 & o;
              }
              for (;i < this.length - r; i++) a = (o = (0 | this.words[i + r]) + a) >> 26, this.words[i + r] = 67108863 & o;
              if (0 === a) return this._strip();
              for (n(-1 === a), a = 0, i = 0; i < this.length; i++) a = (o = -(0 | this.words[i]) + a) >> 26, this.words[i] = 67108863 & o;
              return this.negative = 1, this._strip();
            }, o.prototype._wordDiv = function(e, t) {
              var r = (this.length, e.length), n = this.clone(), i = e, s = 0 | i.words[i.length - 1];
              0 != (r = 26 - this._countBits(s)) && (i = i.ushln(r), n.iushln(r), s = 0 | i.words[i.length - 1]);
              var a, c = n.length - i.length;
              if ("mod" !== t) {
                (a = new o(null)).length = c + 1, a.words = new Array(a.length);
                for (var f = 0; f < a.length; f++) a.words[f] = 0;
              }
              var u = n.clone()._ishlnsubmul(i, 1, c);
              0 === u.negative && (n = u, a && (a.words[c] = 1));
              for (var h = c - 1; h >= 0; h--) {
                var d = 67108864 * (0 | n.words[i.length + h]) + (0 | n.words[i.length + h - 1]);
                for (d = Math.min(d / s | 0, 67108863), n._ishlnsubmul(i, d, h); 0 !== n.negative; ) d--, n.negative = 0, n._ishlnsubmul(i, 1, h), 
                n.isZero() || (n.negative ^= 1);
                a && (a.words[h] = d);
              }
              return a && a._strip(), n._strip(), "div" !== t && 0 !== r && n.iushrn(r), {
                div: a || null,
                mod: n
              };
            }, o.prototype.divmod = function(e, t, r) {
              return n(!e.isZero()), this.isZero() ? {
                div: new o(0),
                mod: new o(0)
              } : 0 !== this.negative && 0 === e.negative ? (a = this.neg().divmod(e, t), "mod" !== t && (i = a.div.neg()), "div" !== t && (s = a.mod.neg(), 
              r && 0 !== s.negative && s.iadd(e)), {
                div: i,
                mod: s
              }) : 0 === this.negative && 0 !== e.negative ? (a = this.divmod(e.neg(), t), "mod" !== t && (i = a.div.neg()), {
                div: i,
                mod: a.mod
              }) : 0 != (this.negative & e.negative) ? (a = this.neg().divmod(e.neg(), t), "div" !== t && (s = a.mod.neg(), r && 0 !== s.negative && s.isub(e)), 
              {
                div: a.div,
                mod: s
              }) : e.length > this.length || this.cmp(e) < 0 ? {
                div: new o(0),
                mod: this
              } : 1 === e.length ? "div" === t ? {
                div: this.divn(e.words[0]),
                mod: null
              } : "mod" === t ? {
                div: null,
                mod: new o(this.modrn(e.words[0]))
              } : {
                div: this.divn(e.words[0]),
                mod: new o(this.modrn(e.words[0]))
              } : this._wordDiv(e, t);
              var i, s, a;
            }, o.prototype.div = function(e) {
              return this.divmod(e, "div", !1).div;
            }, o.prototype.mod = function(e) {
              return this.divmod(e, "mod", !1).mod;
            }, o.prototype.umod = function(e) {
              return this.divmod(e, "mod", !0).mod;
            }, o.prototype.divRound = function(e) {
              var t = this.divmod(e);
              if (t.mod.isZero()) return t.div;
              var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod, n = e.ushrn(1), i = e.andln(1), o = r.cmp(n);
              return o < 0 || 1 === i && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);
            }, o.prototype.modrn = function(e) {
              var t = e < 0;
              t && (e = -e), n(e <= 67108863);
              for (var r = (1 << 26) % e, i = 0, o = this.length - 1; o >= 0; o--) i = (r * i + (0 | this.words[o])) % e;
              return t ? -i : i;
            }, o.prototype.modn = function(e) {
              return this.modrn(e);
            }, o.prototype.idivn = function(e) {
              var t = e < 0;
              t && (e = -e), n(e <= 67108863);
              for (var r = 0, i = this.length - 1; i >= 0; i--) {
                var o = (0 | this.words[i]) + 67108864 * r;
                this.words[i] = o / e | 0, r = o % e;
              }
              return this._strip(), t ? this.ineg() : this;
            }, o.prototype.divn = function(e) {
              return this.clone().idivn(e);
            }, o.prototype.egcd = function(e) {
              n(0 === e.negative), n(!e.isZero());
              var t = this, r = e.clone();
              t = 0 !== t.negative ? t.umod(e) : t.clone();
              for (var i = new o(1), s = new o(0), a = new o(0), c = new o(1), f = 0; t.isEven() && r.isEven(); ) t.iushrn(1), r.iushrn(1), 
              ++f;
              for (var u = r.clone(), h = t.clone(); !t.isZero(); ) {
                for (var d = 0, l = 1; 0 == (t.words[0] & l) && d < 26; ++d, l <<= 1) ;
                if (d > 0) for (t.iushrn(d); d-- > 0; ) (i.isOdd() || s.isOdd()) && (i.iadd(u), s.isub(h)), i.iushrn(1), s.iushrn(1);
                for (var p = 0, b = 1; 0 == (r.words[0] & b) && p < 26; ++p, b <<= 1) ;
                if (p > 0) for (r.iushrn(p); p-- > 0; ) (a.isOdd() || c.isOdd()) && (a.iadd(u), c.isub(h)), a.iushrn(1), c.iushrn(1);
                t.cmp(r) >= 0 ? (t.isub(r), i.isub(a), s.isub(c)) : (r.isub(t), a.isub(i), c.isub(s));
              }
              return {
                a: a,
                b: c,
                gcd: r.iushln(f)
              };
            }, o.prototype._invmp = function(e) {
              n(0 === e.negative), n(!e.isZero());
              var t = this, r = e.clone();
              t = 0 !== t.negative ? t.umod(e) : t.clone();
              for (var i, s = new o(1), a = new o(0), c = r.clone(); t.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
                for (var f = 0, u = 1; 0 == (t.words[0] & u) && f < 26; ++f, u <<= 1) ;
                if (f > 0) for (t.iushrn(f); f-- > 0; ) s.isOdd() && s.iadd(c), s.iushrn(1);
                for (var h = 0, d = 1; 0 == (r.words[0] & d) && h < 26; ++h, d <<= 1) ;
                if (h > 0) for (r.iushrn(h); h-- > 0; ) a.isOdd() && a.iadd(c), a.iushrn(1);
                t.cmp(r) >= 0 ? (t.isub(r), s.isub(a)) : (r.isub(t), a.isub(s));
              }
              return (i = 0 === t.cmpn(1) ? s : a).cmpn(0) < 0 && i.iadd(e), i;
            }, o.prototype.gcd = function(e) {
              if (this.isZero()) return e.abs();
              if (e.isZero()) return this.abs();
              var t = this.clone(), r = e.clone();
              t.negative = 0, r.negative = 0;
              for (var n = 0; t.isEven() && r.isEven(); n++) t.iushrn(1), r.iushrn(1);
              for (;;) {
                for (;t.isEven(); ) t.iushrn(1);
                for (;r.isEven(); ) r.iushrn(1);
                var i = t.cmp(r);
                if (i < 0) {
                  var o = t;
                  t = r, r = o;
                } else if (0 === i || 0 === r.cmpn(1)) break;
                t.isub(r);
              }
              return r.iushln(n);
            }, o.prototype.invm = function(e) {
              return this.egcd(e).a.umod(e);
            }, o.prototype.isEven = function() {
              return 0 == (1 & this.words[0]);
            }, o.prototype.isOdd = function() {
              return 1 == (1 & this.words[0]);
            }, o.prototype.andln = function(e) {
              return this.words[0] & e;
            }, o.prototype.bincn = function(e) {
              n("number" == typeof e);
              var t = e % 26, r = (e - t) / 26, i = 1 << t;
              if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
              for (var o = i, s = r; 0 !== o && s < this.length; s++) {
                var a = 0 | this.words[s];
                o = (a += o) >>> 26, a &= 67108863, this.words[s] = a;
              }
              return 0 !== o && (this.words[s] = o, this.length++), this;
            }, o.prototype.isZero = function() {
              return 1 === this.length && 0 === this.words[0];
            }, o.prototype.cmpn = function(e) {
              var t, r = e < 0;
              if (0 !== this.negative && !r) return -1;
              if (0 === this.negative && r) return 1;
              if (this._strip(), this.length > 1) t = 1; else {
                r && (e = -e), n(e <= 67108863, "Number is too big");
                var i = 0 | this.words[0];
                t = i === e ? 0 : i < e ? -1 : 1;
              }
              return 0 !== this.negative ? 0 | -t : t;
            }, o.prototype.cmp = function(e) {
              if (0 !== this.negative && 0 === e.negative) return -1;
              if (0 === this.negative && 0 !== e.negative) return 1;
              var t = this.ucmp(e);
              return 0 !== this.negative ? 0 | -t : t;
            }, o.prototype.ucmp = function(e) {
              if (this.length > e.length) return 1;
              if (this.length < e.length) return -1;
              for (var t = 0, r = this.length - 1; r >= 0; r--) {
                var n = 0 | this.words[r], i = 0 | e.words[r];
                if (n !== i) {
                  n < i ? t = -1 : n > i && (t = 1);
                  break;
                }
              }
              return t;
            }, o.prototype.gtn = function(e) {
              return 1 === this.cmpn(e);
            }, o.prototype.gt = function(e) {
              return 1 === this.cmp(e);
            }, o.prototype.gten = function(e) {
              return this.cmpn(e) >= 0;
            }, o.prototype.gte = function(e) {
              return this.cmp(e) >= 0;
            }, o.prototype.ltn = function(e) {
              return -1 === this.cmpn(e);
            }, o.prototype.lt = function(e) {
              return -1 === this.cmp(e);
            }, o.prototype.lten = function(e) {
              return this.cmpn(e) <= 0;
            }, o.prototype.lte = function(e) {
              return this.cmp(e) <= 0;
            }, o.prototype.eqn = function(e) {
              return 0 === this.cmpn(e);
            }, o.prototype.eq = function(e) {
              return 0 === this.cmp(e);
            }, o.red = function(e) {
              return new k(e);
            }, o.prototype.toRed = function(e) {
              return n(!this.red, "Already a number in reduction context"), n(0 === this.negative, "red works only with positives"), e.convertTo(this)._forceRed(e);
            }, o.prototype.fromRed = function() {
              return n(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
            }, o.prototype._forceRed = function(e) {
              return this.red = e, this;
            }, o.prototype.forceRed = function(e) {
              return n(!this.red, "Already a number in reduction context"), this._forceRed(e);
            }, o.prototype.redAdd = function(e) {
              return n(this.red, "redAdd works only with red numbers"), this.red.add(this, e);
            }, o.prototype.redIAdd = function(e) {
              return n(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e);
            }, o.prototype.redSub = function(e) {
              return n(this.red, "redSub works only with red numbers"), this.red.sub(this, e);
            }, o.prototype.redISub = function(e) {
              return n(this.red, "redISub works only with red numbers"), this.red.isub(this, e);
            }, o.prototype.redShl = function(e) {
              return n(this.red, "redShl works only with red numbers"), this.red.shl(this, e);
            }, o.prototype.redMul = function(e) {
              return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.mul(this, e);
            }, o.prototype.redIMul = function(e) {
              return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.imul(this, e);
            }, o.prototype.redSqr = function() {
              return n(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
            }, o.prototype.redISqr = function() {
              return n(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
            }, o.prototype.redSqrt = function() {
              return n(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
            }, o.prototype.redInvm = function() {
              return n(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
            }, o.prototype.redNeg = function() {
              return n(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
            }, o.prototype.redPow = function(e) {
              return n(this.red && !e.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e);
            };
            var w = {
              k256: null,
              p224: null,
              p192: null,
              p25519: null
            };
            function _(e, t) {
              this.name = e, this.p = new o(t, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
            }
            function S() {
              _.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
            }
            function E() {
              _.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
            }
            function A() {
              _.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
            }
            function x() {
              _.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
            }
            function k(e) {
              if ("string" == typeof e) {
                var t = o._prime(e);
                this.m = t.p, this.prime = t;
              } else n(e.gtn(1), "modulus must be greater than 1"), this.m = e, this.prime = null;
            }
            function P(e) {
              k.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), 
              this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
              this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
            }
            _.prototype._tmp = function() {
              var e = new o(null);
              return e.words = new Array(Math.ceil(this.n / 13)), e;
            }, _.prototype.ireduce = function(e) {
              var t, r = e;
              do {
                this.split(r, this.tmp), t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength();
              } while (t > this.n);
              var n = t < this.n ? -1 : r.ucmp(this.p);
              return 0 === n ? (r.words[0] = 0, r.length = 1) : n > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), 
              r;
            }, _.prototype.split = function(e, t) {
              e.iushrn(this.n, 0, t);
            }, _.prototype.imulK = function(e) {
              return e.imul(this.k);
            }, i(S, _), S.prototype.split = function(e, t) {
              for (var r = 4194303, n = Math.min(e.length, 9), i = 0; i < n; i++) t.words[i] = e.words[i];
              if (t.length = n, e.length <= 9) return e.words[0] = 0, void (e.length = 1);
              var o = e.words[9];
              for (t.words[t.length++] = o & r, i = 10; i < e.length; i++) {
                var s = 0 | e.words[i];
                e.words[i - 10] = (s & r) << 4 | o >>> 22, o = s;
              }
              o >>>= 22, e.words[i - 10] = o, 0 === o && e.length > 10 ? e.length -= 10 : e.length -= 9;
            }, S.prototype.imulK = function(e) {
              e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;
              for (var t = 0, r = 0; r < e.length; r++) {
                var n = 0 | e.words[r];
                t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);
              }
              return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;
            }, i(E, _), i(A, _), i(x, _), x.prototype.imulK = function(e) {
              for (var t = 0, r = 0; r < e.length; r++) {
                var n = 19 * (0 | e.words[r]) + t, i = 67108863 & n;
                n >>>= 26, e.words[r] = i, t = n;
              }
              return 0 !== t && (e.words[e.length++] = t), e;
            }, o._prime = function(e) {
              if (w[e]) return w[e];
              var t;
              if ("k256" === e) t = new S; else if ("p224" === e) t = new E; else if ("p192" === e) t = new A; else {
                if ("p25519" !== e) throw new Error("Unknown prime " + e);
                t = new x;
              }
              return w[e] = t, t;
            }, k.prototype._verify1 = function(e) {
              n(0 === e.negative, "red works only with positives"), n(e.red, "red works only with red numbers");
            }, k.prototype._verify2 = function(e, t) {
              n(0 == (e.negative | t.negative), "red works only with positives"), n(e.red && e.red === t.red, "red works only with red numbers");
            }, k.prototype.imod = function(e) {
              return this.prime ? this.prime.ireduce(e)._forceRed(this) : (u(e, e.umod(this.m)._forceRed(this)), e);
            }, k.prototype.neg = function(e) {
              return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);
            }, k.prototype.add = function(e, t) {
              this._verify2(e, t);
              var r = e.add(t);
              return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
            }, k.prototype.iadd = function(e, t) {
              this._verify2(e, t);
              var r = e.iadd(t);
              return r.cmp(this.m) >= 0 && r.isub(this.m), r;
            }, k.prototype.sub = function(e, t) {
              this._verify2(e, t);
              var r = e.sub(t);
              return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
            }, k.prototype.isub = function(e, t) {
              this._verify2(e, t);
              var r = e.isub(t);
              return r.cmpn(0) < 0 && r.iadd(this.m), r;
            }, k.prototype.shl = function(e, t) {
              return this._verify1(e), this.imod(e.ushln(t));
            }, k.prototype.imul = function(e, t) {
              return this._verify2(e, t), this.imod(e.imul(t));
            }, k.prototype.mul = function(e, t) {
              return this._verify2(e, t), this.imod(e.mul(t));
            }, k.prototype.isqr = function(e) {
              return this.imul(e, e.clone());
            }, k.prototype.sqr = function(e) {
              return this.mul(e, e);
            }, k.prototype.sqrt = function(e) {
              if (e.isZero()) return e.clone();
              var t = this.m.andln(3);
              if (n(t % 2 == 1), 3 === t) {
                var r = this.m.add(new o(1)).iushrn(2);
                return this.pow(e, r);
              }
              for (var i = this.m.subn(1), s = 0; !i.isZero() && 0 === i.andln(1); ) s++, i.iushrn(1);
              n(!i.isZero());
              var a = new o(1).toRed(this), c = a.redNeg(), f = this.m.subn(1).iushrn(1), u = this.m.bitLength();
              for (u = new o(2 * u * u).toRed(this); 0 !== this.pow(u, f).cmp(c); ) u.redIAdd(c);
              for (var h = this.pow(u, i), d = this.pow(e, i.addn(1).iushrn(1)), l = this.pow(e, i), p = s; 0 !== l.cmp(a); ) {
                for (var b = l, y = 0; 0 !== b.cmp(a); y++) b = b.redSqr();
                n(y < p);
                var g = this.pow(h, new o(1).iushln(p - y - 1));
                d = d.redMul(g), h = g.redSqr(), l = l.redMul(h), p = y;
              }
              return d;
            }, k.prototype.invm = function(e) {
              var t = e._invmp(this.m);
              return 0 !== t.negative ? (t.negative = 0, this.imod(t).redNeg()) : this.imod(t);
            }, k.prototype.pow = function(e, t) {
              if (t.isZero()) return new o(1).toRed(this);
              if (0 === t.cmpn(1)) return e.clone();
              var r = new Array(16);
              r[0] = new o(1).toRed(this), r[1] = e;
              for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], e);
              var i = r[0], s = 0, a = 0, c = t.bitLength() % 26;
              for (0 === c && (c = 26), n = t.length - 1; n >= 0; n--) {
                for (var f = t.words[n], u = c - 1; u >= 0; u--) {
                  var h = f >> u & 1;
                  i !== r[0] && (i = this.sqr(i)), 0 !== h || 0 !== s ? (s <<= 1, s |= h, (4 == ++a || 0 === n && 0 === u) && (i = this.mul(i, r[s]), 
                  a = 0, s = 0)) : a = 0;
                }
                c = 26;
              }
              return i;
            }, k.prototype.convertTo = function(e) {
              var t = e.umod(this.m);
              return t === e ? t.clone() : t;
            }, k.prototype.convertFrom = function(e) {
              var t = e.clone();
              return t.red = null, t;
            }, o.mont = function(e) {
              return new P(e);
            }, i(P, k), P.prototype.convertTo = function(e) {
              return this.imod(e.ushln(this.shift));
            }, P.prototype.convertFrom = function(e) {
              var t = this.imod(e.mul(this.rinv));
              return t.red = null, t;
            }, P.prototype.imul = function(e, t) {
              if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;
              var r = e.imul(t), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), o = i;
              return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
            }, P.prototype.mul = function(e, t) {
              if (e.isZero() || t.isZero()) return new o(0)._forceRed(this);
              var r = e.mul(t), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), s = i;
              return i.cmp(this.m) >= 0 ? s = i.isub(this.m) : i.cmpn(0) < 0 && (s = i.iadd(this.m)), s._forceRed(this);
            }, P.prototype.invm = function(e) {
              return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);
            };
          }(e = r.nmd(e), this);
        },
        9931: (e, t, r) => {
          var n;
          function i(e) {
            this.rand = e;
          }
          if (e.exports = function(e) {
            return n || (n = new i(null)), n.generate(e);
          }, e.exports.Rand = i, i.prototype.generate = function(e) {
            return this._rand(e);
          }, i.prototype._rand = function(e) {
            if (this.rand.getBytes) return this.rand.getBytes(e);
            for (var t = new Uint8Array(e), r = 0; r < t.length; r++) t[r] = this.rand.getByte();
            return t;
          }, "object" == typeof self) self.crypto && self.crypto.getRandomValues ? i.prototype._rand = function(e) {
            var t = new Uint8Array(e);
            return self.crypto.getRandomValues(t), t;
          } : self.msCrypto && self.msCrypto.getRandomValues ? i.prototype._rand = function(e) {
            var t = new Uint8Array(e);
            return self.msCrypto.getRandomValues(t), t;
          } : "object" == typeof window && (i.prototype._rand = function() {
            throw new Error("Not implemented yet");
          }); else try {
            var o = r(9214);
            if ("function" != typeof o.randomBytes) throw new Error("Not supported");
            i.prototype._rand = function(e) {
              return o.randomBytes(e);
            };
          } catch (e) {}
        },
        4497: (e, t, r) => {
          var n = r(9509).Buffer;
          function i(e) {
            n.isBuffer(e) || (e = n.from(e));
            for (var t = e.length / 4 | 0, r = new Array(t), i = 0; i < t; i++) r[i] = e.readUInt32BE(4 * i);
            return r;
          }
          function o(e) {
            for (;0 < e.length; e++) e[0] = 0;
          }
          function s(e, t, r, n, i) {
            for (var o, s, a, c, f = r[0], u = r[1], h = r[2], d = r[3], l = e[0] ^ t[0], p = e[1] ^ t[1], b = e[2] ^ t[2], y = e[3] ^ t[3], g = 4, m = 1; m < i; m++) o = f[l >>> 24] ^ u[p >>> 16 & 255] ^ h[b >>> 8 & 255] ^ d[255 & y] ^ t[g++], 
            s = f[p >>> 24] ^ u[b >>> 16 & 255] ^ h[y >>> 8 & 255] ^ d[255 & l] ^ t[g++], a = f[b >>> 24] ^ u[y >>> 16 & 255] ^ h[l >>> 8 & 255] ^ d[255 & p] ^ t[g++], 
            c = f[y >>> 24] ^ u[l >>> 16 & 255] ^ h[p >>> 8 & 255] ^ d[255 & b] ^ t[g++], l = o, p = s, b = a, y = c;
            return o = (n[l >>> 24] << 24 | n[p >>> 16 & 255] << 16 | n[b >>> 8 & 255] << 8 | n[255 & y]) ^ t[g++], s = (n[p >>> 24] << 24 | n[b >>> 16 & 255] << 16 | n[y >>> 8 & 255] << 8 | n[255 & l]) ^ t[g++], 
            a = (n[b >>> 24] << 24 | n[y >>> 16 & 255] << 16 | n[l >>> 8 & 255] << 8 | n[255 & p]) ^ t[g++], c = (n[y >>> 24] << 24 | n[l >>> 16 & 255] << 16 | n[p >>> 8 & 255] << 8 | n[255 & b]) ^ t[g++], 
            [ o >>>= 0, s >>>= 0, a >>>= 0, c >>>= 0 ];
          }
          var a = [ 0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54 ], c = function() {
            for (var e = new Array(256), t = 0; t < 256; t++) e[t] = t < 128 ? t << 1 : t << 1 ^ 283;
            for (var r = [], n = [], i = [ [], [], [], [] ], o = [ [], [], [], [] ], s = 0, a = 0, c = 0; c < 256; ++c) {
              var f = a ^ a << 1 ^ a << 2 ^ a << 3 ^ a << 4;
              f = f >>> 8 ^ 255 & f ^ 99, r[s] = f, n[f] = s;
              var u = e[s], h = e[u], d = e[h], l = 257 * e[f] ^ 16843008 * f;
              i[0][s] = l << 24 | l >>> 8, i[1][s] = l << 16 | l >>> 16, i[2][s] = l << 8 | l >>> 24, i[3][s] = l, l = 16843009 * d ^ 65537 * h ^ 257 * u ^ 16843008 * s, 
              o[0][f] = l << 24 | l >>> 8, o[1][f] = l << 16 | l >>> 16, o[2][f] = l << 8 | l >>> 24, o[3][f] = l, 0 === s ? s = a = 1 : (s = u ^ e[e[e[d ^ u]]], 
              a ^= e[e[a]]);
            }
            return {
              SBOX: r,
              INV_SBOX: n,
              SUB_MIX: i,
              INV_SUB_MIX: o
            };
          }();
          function f(e) {
            this._key = i(e), this._reset();
          }
          f.blockSize = 16, f.keySize = 32, f.prototype.blockSize = f.blockSize, f.prototype.keySize = f.keySize, f.prototype._reset = function() {
            for (var e = this._key, t = e.length, r = t + 6, n = 4 * (r + 1), i = [], o = 0; o < t; o++) i[o] = e[o];
            for (o = t; o < n; o++) {
              var s = i[o - 1];
              o % t == 0 ? (s = s << 8 | s >>> 24, s = c.SBOX[s >>> 24] << 24 | c.SBOX[s >>> 16 & 255] << 16 | c.SBOX[s >>> 8 & 255] << 8 | c.SBOX[255 & s], 
              s ^= a[o / t | 0] << 24) : t > 6 && o % t == 4 && (s = c.SBOX[s >>> 24] << 24 | c.SBOX[s >>> 16 & 255] << 16 | c.SBOX[s >>> 8 & 255] << 8 | c.SBOX[255 & s]), 
              i[o] = i[o - t] ^ s;
            }
            for (var f = [], u = 0; u < n; u++) {
              var h = n - u, d = i[h - (u % 4 ? 0 : 4)];
              f[u] = u < 4 || h <= 4 ? d : c.INV_SUB_MIX[0][c.SBOX[d >>> 24]] ^ c.INV_SUB_MIX[1][c.SBOX[d >>> 16 & 255]] ^ c.INV_SUB_MIX[2][c.SBOX[d >>> 8 & 255]] ^ c.INV_SUB_MIX[3][c.SBOX[255 & d]];
            }
            this._nRounds = r, this._keySchedule = i, this._invKeySchedule = f;
          }, f.prototype.encryptBlockRaw = function(e) {
            return s(e = i(e), this._keySchedule, c.SUB_MIX, c.SBOX, this._nRounds);
          }, f.prototype.encryptBlock = function(e) {
            var t = this.encryptBlockRaw(e), r = n.allocUnsafe(16);
            return r.writeUInt32BE(t[0], 0), r.writeUInt32BE(t[1], 4), r.writeUInt32BE(t[2], 8), r.writeUInt32BE(t[3], 12), r;
          }, f.prototype.decryptBlock = function(e) {
            var t = (e = i(e))[1];
            e[1] = e[3], e[3] = t;
            var r = s(e, this._invKeySchedule, c.INV_SUB_MIX, c.INV_SBOX, this._nRounds), o = n.allocUnsafe(16);
            return o.writeUInt32BE(r[0], 0), o.writeUInt32BE(r[3], 4), o.writeUInt32BE(r[2], 8), o.writeUInt32BE(r[1], 12), o;
          }, f.prototype.scrub = function() {
            o(this._keySchedule), o(this._invKeySchedule), o(this._key);
          }, e.exports.AES = f;
        },
        2422: (e, t, r) => {
          var n = r(4497), i = r(9509).Buffer, o = r(1027), s = r(5717), a = r(3288), c = r(7295), f = r(685);
          function u(e, t, r, s) {
            o.call(this);
            var c = i.alloc(4, 0);
            this._cipher = new n.AES(t);
            var u = this._cipher.encryptBlock(c);
            this._ghash = new a(u), r = function(e, t, r) {
              if (12 === t.length) return e._finID = i.concat([ t, i.from([ 0, 0, 0, 1 ]) ]), i.concat([ t, i.from([ 0, 0, 0, 2 ]) ]);
              var n = new a(r), o = t.length, s = o % 16;
              n.update(t), s && (s = 16 - s, n.update(i.alloc(s, 0))), n.update(i.alloc(8, 0));
              var c = 8 * o, u = i.alloc(8);
              u.writeUIntBE(c, 0, 8), n.update(u), e._finID = n.state;
              var h = i.from(e._finID);
              return f(h), h;
            }(this, r, u), this._prev = i.from(r), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = s, 
            this._alen = 0, this._len = 0, this._mode = e, this._authTag = null, this._called = !1;
          }
          s(u, o), u.prototype._update = function(e) {
            if (!this._called && this._alen) {
              var t = 16 - this._alen % 16;
              t < 16 && (t = i.alloc(t, 0), this._ghash.update(t));
            }
            this._called = !0;
            var r = this._mode.encrypt(this, e);
            return this._decrypt ? this._ghash.update(e) : this._ghash.update(r), this._len += e.length, r;
          }, u.prototype._final = function() {
            if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
            var e = c(this._ghash.final(8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
            if (this._decrypt && function(e, t) {
              var r = 0;
              e.length !== t.length && r++;
              for (var n = Math.min(e.length, t.length), i = 0; i < n; ++i) r += e[i] ^ t[i];
              return r;
            }(e, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
            this._authTag = e, this._cipher.scrub();
          }, u.prototype.getAuthTag = function() {
            if (this._decrypt || !i.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
            return this._authTag;
          }, u.prototype.setAuthTag = function(e) {
            if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
            this._authTag = e;
          }, u.prototype.setAAD = function(e) {
            if (this._called) throw new Error("Attempting to set AAD in unsupported state");
            this._ghash.update(e), this._alen += e.length;
          }, e.exports = u;
        },
        4696: (e, t, r) => {
          var n = r(1494), i = r(6193), o = r(4946);
          t.createCipher = t.Cipher = n.createCipher, t.createCipheriv = t.Cipheriv = n.createCipheriv, t.createDecipher = t.Decipher = i.createDecipher, 
          t.createDecipheriv = t.Decipheriv = i.createDecipheriv, t.listCiphers = t.getCiphers = function() {
            return Object.keys(o);
          };
        },
        6193: (e, t, r) => {
          var n = r(2422), i = r(9509).Buffer, o = r(45), s = r(5969), a = r(1027), c = r(4497), f = r(3048);
          function u(e, t, r) {
            a.call(this), this._cache = new h, this._last = void 0, this._cipher = new c.AES(t), this._prev = i.from(r), this._mode = e, 
            this._autopadding = !0;
          }
          function h() {
            this.cache = i.allocUnsafe(0);
          }
          function d(e, t, r) {
            var a = o[e.toLowerCase()];
            if (!a) throw new TypeError("invalid suite type");
            if ("string" == typeof r && (r = i.from(r)), "GCM" !== a.mode && r.length !== a.iv) throw new TypeError("invalid iv length " + r.length);
            if ("string" == typeof t && (t = i.from(t)), t.length !== a.key / 8) throw new TypeError("invalid key length " + t.length);
            return "stream" === a.type ? new s(a.module, t, r, !0) : "auth" === a.type ? new n(a.module, t, r, !0) : new u(a.module, t, r);
          }
          r(5717)(u, a), u.prototype._update = function(e) {
            var t, r;
            this._cache.add(e);
            for (var n = []; t = this._cache.get(this._autopadding); ) r = this._mode.decrypt(this, t), n.push(r);
            return i.concat(n);
          }, u.prototype._final = function() {
            var e = this._cache.flush();
            if (this._autopadding) return function(e) {
              var t = e[15];
              if (t < 1 || t > 16) throw new Error("unable to decrypt data");
              for (var r = -1; ++r < t; ) if (e[r + (16 - t)] !== t) throw new Error("unable to decrypt data");
              if (16 !== t) return e.slice(0, 16 - t);
            }(this._mode.decrypt(this, e));
            if (e) throw new Error("data not multiple of block length");
          }, u.prototype.setAutoPadding = function(e) {
            return this._autopadding = !!e, this;
          }, h.prototype.add = function(e) {
            this.cache = i.concat([ this.cache, e ]);
          }, h.prototype.get = function(e) {
            var t;
            if (e) {
              if (this.cache.length > 16) return t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t;
            } else if (this.cache.length >= 16) return t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t;
            return null;
          }, h.prototype.flush = function() {
            if (this.cache.length) return this.cache;
          }, t.createDecipher = function(e, t) {
            var r = o[e.toLowerCase()];
            if (!r) throw new TypeError("invalid suite type");
            var n = f(t, !1, r.key, r.iv);
            return d(e, n.key, n.iv);
          }, t.createDecipheriv = d;
        },
        1494: (e, t, r) => {
          var n = r(45), i = r(2422), o = r(9509).Buffer, s = r(5969), a = r(1027), c = r(4497), f = r(3048);
          function u(e, t, r) {
            a.call(this), this._cache = new d, this._cipher = new c.AES(t), this._prev = o.from(r), this._mode = e, this._autopadding = !0;
          }
          r(5717)(u, a), u.prototype._update = function(e) {
            var t, r;
            this._cache.add(e);
            for (var n = []; t = this._cache.get(); ) r = this._mode.encrypt(this, t), n.push(r);
            return o.concat(n);
          };
          var h = o.alloc(16, 16);
          function d() {
            this.cache = o.allocUnsafe(0);
          }
          function l(e, t, r) {
            var a = n[e.toLowerCase()];
            if (!a) throw new TypeError("invalid suite type");
            if ("string" == typeof t && (t = o.from(t)), t.length !== a.key / 8) throw new TypeError("invalid key length " + t.length);
            if ("string" == typeof r && (r = o.from(r)), "GCM" !== a.mode && r.length !== a.iv) throw new TypeError("invalid iv length " + r.length);
            return "stream" === a.type ? new s(a.module, t, r) : "auth" === a.type ? new i(a.module, t, r) : new u(a.module, t, r);
          }
          u.prototype._final = function() {
            var e = this._cache.flush();
            if (this._autopadding) return e = this._mode.encrypt(this, e), this._cipher.scrub(), e;
            if (!e.equals(h)) throw this._cipher.scrub(), new Error("data not multiple of block length");
          }, u.prototype.setAutoPadding = function(e) {
            return this._autopadding = !!e, this;
          }, d.prototype.add = function(e) {
            this.cache = o.concat([ this.cache, e ]);
          }, d.prototype.get = function() {
            if (this.cache.length > 15) {
              var e = this.cache.slice(0, 16);
              return this.cache = this.cache.slice(16), e;
            }
            return null;
          }, d.prototype.flush = function() {
            for (var e = 16 - this.cache.length, t = o.allocUnsafe(e), r = -1; ++r < e; ) t.writeUInt8(e, r);
            return o.concat([ this.cache, t ]);
          }, t.createCipheriv = l, t.createCipher = function(e, t) {
            var r = n[e.toLowerCase()];
            if (!r) throw new TypeError("invalid suite type");
            var i = f(t, !1, r.key, r.iv);
            return l(e, i.key, i.iv);
          };
        },
        3288: (e, t, r) => {
          var n = r(9509).Buffer, i = n.alloc(16, 0);
          function o(e) {
            var t = n.allocUnsafe(16);
            return t.writeUInt32BE(e[0] >>> 0, 0), t.writeUInt32BE(e[1] >>> 0, 4), t.writeUInt32BE(e[2] >>> 0, 8), t.writeUInt32BE(e[3] >>> 0, 12), 
            t;
          }
          function s(e) {
            this.h = e, this.state = n.alloc(16, 0), this.cache = n.allocUnsafe(0);
          }
          s.prototype.ghash = function(e) {
            for (var t = -1; ++t < e.length; ) this.state[t] ^= e[t];
            this._multiply();
          }, s.prototype._multiply = function() {
            for (var e, t, r, n = [ (e = this.h).readUInt32BE(0), e.readUInt32BE(4), e.readUInt32BE(8), e.readUInt32BE(12) ], i = [ 0, 0, 0, 0 ], s = -1; ++s < 128; ) {
              for (0 != (this.state[~~(s / 8)] & 1 << 7 - s % 8) && (i[0] ^= n[0], i[1] ^= n[1], i[2] ^= n[2], i[3] ^= n[3]), r = 0 != (1 & n[3]), 
              t = 3; t > 0; t--) n[t] = n[t] >>> 1 | (1 & n[t - 1]) << 31;
              n[0] = n[0] >>> 1, r && (n[0] = n[0] ^ 225 << 24);
            }
            this.state = o(i);
          }, s.prototype.update = function(e) {
            var t;
            for (this.cache = n.concat([ this.cache, e ]); this.cache.length >= 16; ) t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), 
            this.ghash(t);
          }, s.prototype.final = function(e, t) {
            return this.cache.length && this.ghash(n.concat([ this.cache, i ], 16)), this.ghash(o([ 0, e, 0, t ])), this.state;
          }, e.exports = s;
        },
        685: e => {
          e.exports = function(e) {
            for (var t, r = e.length; r--; ) {
              if (255 !== (t = e.readUInt8(r))) {
                t++, e.writeUInt8(t, r);
                break;
              }
              e.writeUInt8(0, r);
            }
          };
        },
        5292: (e, t, r) => {
          var n = r(7295);
          t.encrypt = function(e, t) {
            var r = n(t, e._prev);
            return e._prev = e._cipher.encryptBlock(r), e._prev;
          }, t.decrypt = function(e, t) {
            var r = e._prev;
            e._prev = t;
            var i = e._cipher.decryptBlock(t);
            return n(i, r);
          };
        },
        6311: (e, t, r) => {
          var n = r(9509).Buffer, i = r(7295);
          function o(e, t, r) {
            var o = t.length, s = i(t, e._cache);
            return e._cache = e._cache.slice(o), e._prev = n.concat([ e._prev, r ? t : s ]), s;
          }
          t.encrypt = function(e, t, r) {
            for (var i, s = n.allocUnsafe(0); t.length; ) {
              if (0 === e._cache.length && (e._cache = e._cipher.encryptBlock(e._prev), e._prev = n.allocUnsafe(0)), !(e._cache.length <= t.length)) {
                s = n.concat([ s, o(e, t, r) ]);
                break;
              }
              i = e._cache.length, s = n.concat([ s, o(e, t.slice(0, i), r) ]), t = t.slice(i);
            }
            return s;
          };
        },
        1510: (e, t, r) => {
          var n = r(9509).Buffer;
          function i(e, t, r) {
            for (var n, i, s = -1, a = 0; ++s < 8; ) n = t & 1 << 7 - s ? 128 : 0, a += (128 & (i = e._cipher.encryptBlock(e._prev)[0] ^ n)) >> s % 8, 
            e._prev = o(e._prev, r ? n : i);
            return a;
          }
          function o(e, t) {
            var r = e.length, i = -1, o = n.allocUnsafe(e.length);
            for (e = n.concat([ e, n.from([ t ]) ]); ++i < r; ) o[i] = e[i] << 1 | e[i + 1] >> 7;
            return o;
          }
          t.encrypt = function(e, t, r) {
            for (var o = t.length, s = n.allocUnsafe(o), a = -1; ++a < o; ) s[a] = i(e, t[a], r);
            return s;
          };
        },
        1964: (e, t, r) => {
          var n = r(9509).Buffer;
          function i(e, t, r) {
            var i = e._cipher.encryptBlock(e._prev)[0] ^ t;
            return e._prev = n.concat([ e._prev.slice(1), n.from([ r ? t : i ]) ]), i;
          }
          t.encrypt = function(e, t, r) {
            for (var o = t.length, s = n.allocUnsafe(o), a = -1; ++a < o; ) s[a] = i(e, t[a], r);
            return s;
          };
        },
        6009: (e, t, r) => {
          var n = r(7295), i = r(9509).Buffer, o = r(685);
          function s(e) {
            var t = e._cipher.encryptBlockRaw(e._prev);
            return o(e._prev), t;
          }
          t.encrypt = function(e, t) {
            var r = Math.ceil(t.length / 16), o = e._cache.length;
            e._cache = i.concat([ e._cache, i.allocUnsafe(16 * r) ]);
            for (var a = 0; a < r; a++) {
              var c = s(e), f = o + 16 * a;
              e._cache.writeUInt32BE(c[0], f + 0), e._cache.writeUInt32BE(c[1], f + 4), e._cache.writeUInt32BE(c[2], f + 8), e._cache.writeUInt32BE(c[3], f + 12);
            }
            var u = e._cache.slice(0, t.length);
            return e._cache = e._cache.slice(t.length), n(t, u);
          };
        },
        1084: (e, t) => {
          t.encrypt = function(e, t) {
            return e._cipher.encryptBlock(t);
          }, t.decrypt = function(e, t) {
            return e._cipher.decryptBlock(t);
          };
        },
        45: (e, t, r) => {
          var n = {
            ECB: r(1084),
            CBC: r(5292),
            CFB: r(6311),
            CFB8: r(1964),
            CFB1: r(1510),
            OFB: r(8861),
            CTR: r(6009),
            GCM: r(6009)
          }, i = r(4946);
          for (var o in i) i[o].module = n[i[o].mode];
          e.exports = i;
        },
        8861: (e, t, r) => {
          var n = r(8764).Buffer, i = r(7295);
          function o(e) {
            return e._prev = e._cipher.encryptBlock(e._prev), e._prev;
          }
          t.encrypt = function(e, t) {
            for (;e._cache.length < t.length; ) e._cache = n.concat([ e._cache, o(e) ]);
            var r = e._cache.slice(0, t.length);
            return e._cache = e._cache.slice(t.length), i(t, r);
          };
        },
        5969: (e, t, r) => {
          var n = r(4497), i = r(9509).Buffer, o = r(1027);
          function s(e, t, r, s) {
            o.call(this), this._cipher = new n.AES(t), this._prev = i.from(r), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), 
            this._decrypt = s, this._mode = e;
          }
          r(5717)(s, o), s.prototype._update = function(e) {
            return this._mode.encrypt(this, e, this._decrypt);
          }, s.prototype._final = function() {
            this._cipher.scrub();
          }, e.exports = s;
        },
        3614: (e, t, r) => {
          var n = r(7667), i = r(4696), o = r(45), s = r(9715), a = r(3048);
          function c(e, t, r) {
            if (e = e.toLowerCase(), o[e]) return i.createCipheriv(e, t, r);
            if (s[e]) return new n({
              key: t,
              iv: r,
              mode: e
            });
            throw new TypeError("invalid suite type");
          }
          function f(e, t, r) {
            if (e = e.toLowerCase(), o[e]) return i.createDecipheriv(e, t, r);
            if (s[e]) return new n({
              key: t,
              iv: r,
              mode: e,
              decrypt: !0
            });
            throw new TypeError("invalid suite type");
          }
          t.createCipher = t.Cipher = function(e, t) {
            var r, n;
            if (e = e.toLowerCase(), o[e]) r = o[e].key, n = o[e].iv; else {
              if (!s[e]) throw new TypeError("invalid suite type");
              r = 8 * s[e].key, n = s[e].iv;
            }
            var i = a(t, !1, r, n);
            return c(e, i.key, i.iv);
          }, t.createCipheriv = t.Cipheriv = c, t.createDecipher = t.Decipher = function(e, t) {
            var r, n;
            if (e = e.toLowerCase(), o[e]) r = o[e].key, n = o[e].iv; else {
              if (!s[e]) throw new TypeError("invalid suite type");
              r = 8 * s[e].key, n = s[e].iv;
            }
            var i = a(t, !1, r, n);
            return f(e, i.key, i.iv);
          }, t.createDecipheriv = t.Decipheriv = f, t.listCiphers = t.getCiphers = function() {
            return Object.keys(s).concat(i.getCiphers());
          };
        },
        7667: (e, t, r) => {
          var n = r(1027), i = r(5251), o = r(5717), s = r(9509).Buffer, a = {
            "des-ede3-cbc": i.CBC.instantiate(i.EDE),
            "des-ede3": i.EDE,
            "des-ede-cbc": i.CBC.instantiate(i.EDE),
            "des-ede": i.EDE,
            "des-cbc": i.CBC.instantiate(i.DES),
            "des-ecb": i.DES
          };
          function c(e) {
            n.call(this);
            var t, r = e.mode.toLowerCase(), i = a[r];
            t = e.decrypt ? "decrypt" : "encrypt";
            var o = e.key;
            s.isBuffer(o) || (o = s.from(o)), "des-ede" !== r && "des-ede-cbc" !== r || (o = s.concat([ o, o.slice(0, 8) ]));
            var c = e.iv;
            s.isBuffer(c) || (c = s.from(c)), this._des = i.create({
              key: o,
              iv: c,
              type: t
            });
          }
          a.des = a["des-cbc"], a.des3 = a["des-ede3-cbc"], e.exports = c, o(c, n), c.prototype._update = function(e) {
            return s.from(this._des.update(e));
          }, c.prototype._final = function() {
            return s.from(this._des.final());
          };
        },
        9715: (e, t) => {
          t["des-ecb"] = {
            key: 8,
            iv: 0
          }, t["des-cbc"] = t.des = {
            key: 8,
            iv: 8
          }, t["des-ede3-cbc"] = t.des3 = {
            key: 24,
            iv: 8
          }, t["des-ede3"] = {
            key: 24,
            iv: 0
          }, t["des-ede-cbc"] = {
            key: 16,
            iv: 8
          }, t["des-ede"] = {
            key: 16,
            iv: 0
          };
        },
        3663: (e, t, r) => {
          var n = r(8764).Buffer, i = r(3550), o = r(1798);
          function s(e) {
            var t, r = e.modulus.byteLength();
            do {
              t = new i(o(r));
            } while (t.cmp(e.modulus) >= 0 || !t.umod(e.prime1) || !t.umod(e.prime2));
            return t;
          }
          function a(e, t) {
            var r = function(e) {
              var t = s(e);
              return {
                blinder: t.toRed(i.mont(e.modulus)).redPow(new i(e.publicExponent)).fromRed(),
                unblinder: t.invm(e.modulus)
              };
            }(t), o = t.modulus.byteLength(), a = new i(e).mul(r.blinder).umod(t.modulus), c = a.toRed(i.mont(t.prime1)), f = a.toRed(i.mont(t.prime2)), u = t.coefficient, h = t.prime1, d = t.prime2, l = c.redPow(t.exponent1).fromRed(), p = f.redPow(t.exponent2).fromRed(), b = l.isub(p).imul(u).umod(h).imul(d);
            return p.iadd(b).imul(r.unblinder).umod(t.modulus).toArrayLike(n, "be", o);
          }
          a.getr = s, e.exports = a;
        },
        6042: (e, t, r) => {
          e.exports = r(5207);
        },
        4743: (e, t, r) => {
          var n = r(9509).Buffer, i = r(3482), o = r(8473), s = r(5717), a = r(2957), c = r(7753), f = r(5207);
          function u(e) {
            o.Writable.call(this);
            var t = f[e];
            if (!t) throw new Error("Unknown message digest");
            this._hashType = t.hash, this._hash = i(t.hash), this._tag = t.id, this._signType = t.sign;
          }
          function h(e) {
            o.Writable.call(this);
            var t = f[e];
            if (!t) throw new Error("Unknown message digest");
            this._hash = i(t.hash), this._tag = t.id, this._signType = t.sign;
          }
          function d(e) {
            return new u(e);
          }
          function l(e) {
            return new h(e);
          }
          Object.keys(f).forEach((function(e) {
            f[e].id = n.from(f[e].id, "hex"), f[e.toLowerCase()] = f[e];
          })), s(u, o.Writable), u.prototype._write = function(e, t, r) {
            this._hash.update(e), r();
          }, u.prototype.update = function(e, t) {
            return "string" == typeof e && (e = n.from(e, t)), this._hash.update(e), this;
          }, u.prototype.sign = function(e, t) {
            this.end();
            var r = this._hash.digest(), n = a(r, e, this._hashType, this._signType, this._tag);
            return t ? n.toString(t) : n;
          }, s(h, o.Writable), h.prototype._write = function(e, t, r) {
            this._hash.update(e), r();
          }, h.prototype.update = function(e, t) {
            return "string" == typeof e && (e = n.from(e, t)), this._hash.update(e), this;
          }, h.prototype.verify = function(e, t, r) {
            "string" == typeof t && (t = n.from(t, r)), this.end();
            var i = this._hash.digest();
            return c(t, i, e, this._signType, this._tag);
          }, e.exports = {
            Sign: d,
            Verify: l,
            createSign: d,
            createVerify: l
          };
        },
        2957: (e, t, r) => {
          var n = r(9509).Buffer, i = r(7394), o = r(3663), s = r(6266).ec, a = r(3550), c = r(980), f = r(1308);
          function u(e, t, r, o) {
            if ((e = n.from(e.toArray())).length < t.byteLength()) {
              var s = n.alloc(t.byteLength() - e.length);
              e = n.concat([ s, e ]);
            }
            var a = r.length, c = function(e, t) {
              e = (e = h(e, t)).mod(t);
              var r = n.from(e.toArray());
              if (r.length < t.byteLength()) {
                var i = n.alloc(t.byteLength() - r.length);
                r = n.concat([ i, r ]);
              }
              return r;
            }(r, t), f = n.alloc(a);
            f.fill(1);
            var u = n.alloc(a);
            return u = i(o, u).update(f).update(n.from([ 0 ])).update(e).update(c).digest(), f = i(o, u).update(f).digest(), {
              k: u = i(o, u).update(f).update(n.from([ 1 ])).update(e).update(c).digest(),
              v: f = i(o, u).update(f).digest()
            };
          }
          function h(e, t) {
            var r = new a(e), n = (e.length << 3) - t.bitLength();
            return n > 0 && r.ishrn(n), r;
          }
          function d(e, t, r) {
            var o, s;
            do {
              for (o = n.alloc(0); 8 * o.length < e.bitLength(); ) t.v = i(r, t.k).update(t.v).digest(), o = n.concat([ o, t.v ]);
              s = h(o, e), t.k = i(r, t.k).update(t.v).update(n.from([ 0 ])).digest(), t.v = i(r, t.k).update(t.v).digest();
            } while (-1 !== s.cmp(e));
            return s;
          }
          function l(e, t, r, n) {
            return e.toRed(a.mont(r)).redPow(t).fromRed().mod(n);
          }
          e.exports = function(e, t, r, i, p) {
            var b = c(t);
            if (b.curve) {
              if ("ecdsa" !== i && "ecdsa/rsa" !== i) throw new Error("wrong private key type");
              return function(e, t) {
                var r = f[t.curve.join(".")];
                if (!r) throw new Error("unknown curve " + t.curve.join("."));
                var i = new s(r).keyFromPrivate(t.privateKey).sign(e);
                return n.from(i.toDER());
              }(e, b);
            }
            if ("dsa" === b.type) {
              if ("dsa" !== i) throw new Error("wrong private key type");
              return function(e, t, r) {
                for (var i, o = t.params.priv_key, s = t.params.p, c = t.params.q, f = t.params.g, p = new a(0), b = h(e, c).mod(c), y = !1, g = u(o, c, e, r); !1 === y; ) p = l(f, i = d(c, g, r), s, c), 
                0 === (y = i.invm(c).imul(b.add(o.mul(p))).mod(c)).cmpn(0) && (y = !1, p = new a(0));
                return function(e, t) {
                  e = e.toArray(), t = t.toArray(), 128 & e[0] && (e = [ 0 ].concat(e)), 128 & t[0] && (t = [ 0 ].concat(t));
                  var r = [ 48, e.length + t.length + 4, 2, e.length ];
                  return r = r.concat(e, [ 2, t.length ], t), n.from(r);
                }(p, y);
              }(e, b, r);
            }
            if ("rsa" !== i && "ecdsa/rsa" !== i) throw new Error("wrong private key type");
            e = n.concat([ p, e ]);
            for (var y = b.modulus.byteLength(), g = [ 0, 1 ]; e.length + g.length + 1 < y; ) g.push(255);
            g.push(0);
            for (var m = -1; ++m < e.length; ) g.push(e[m]);
            return o(g, b);
          }, e.exports.getKey = u, e.exports.makeKey = d;
        },
        7753: (e, t, r) => {
          var n = r(9509).Buffer, i = r(3550), o = r(6266).ec, s = r(980), a = r(1308);
          function c(e, t) {
            if (e.cmpn(0) <= 0) throw new Error("invalid sig");
            if (e.cmp(t) >= t) throw new Error("invalid sig");
          }
          e.exports = function(e, t, r, f, u) {
            var h = s(r);
            if ("ec" === h.type) {
              if ("ecdsa" !== f && "ecdsa/rsa" !== f) throw new Error("wrong public key type");
              return function(e, t, r) {
                var n = a[r.data.algorithm.curve.join(".")];
                if (!n) throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
                var i = new o(n), s = r.data.subjectPrivateKey.data;
                return i.verify(t, e, s);
              }(e, t, h);
            }
            if ("dsa" === h.type) {
              if ("dsa" !== f) throw new Error("wrong public key type");
              return function(e, t, r) {
                var n = r.data.p, o = r.data.q, a = r.data.g, f = r.data.pub_key, u = s.signature.decode(e, "der"), h = u.s, d = u.r;
                c(h, o), c(d, o);
                var l = i.mont(n), p = h.invm(o);
                return 0 === a.toRed(l).redPow(new i(t).mul(p).mod(o)).fromRed().mul(f.toRed(l).redPow(d.mul(p).mod(o)).fromRed()).mod(n).mod(o).cmp(d);
              }(e, t, h);
            }
            if ("rsa" !== f && "ecdsa/rsa" !== f) throw new Error("wrong public key type");
            t = n.concat([ u, t ]);
            for (var d = h.modulus.byteLength(), l = [ 1 ], p = 0; t.length + l.length + 2 < d; ) l.push(255), p++;
            l.push(0);
            for (var b = -1; ++b < t.length; ) l.push(t[b]);
            l = n.from(l);
            var y = i.mont(h.modulus);
            e = (e = new i(e).toRed(y)).redPow(new i(h.publicExponent)), e = n.from(e.fromRed().toArray());
            var g = p < 8 ? 1 : 0;
            for (d = Math.min(e.length, l.length), e.length !== l.length && (g = 1), b = -1; ++b < d; ) g |= e[b] ^ l[b];
            return 0 === g;
          };
        },
        7295: (e, t, r) => {
          var n = r(8764).Buffer;
          e.exports = function(e, t) {
            for (var r = Math.min(e.length, t.length), i = new n(r), o = 0; o < r; ++o) i[o] = e[o] ^ t[o];
            return i;
          };
        },
        8764: (e, t, r) => {
          "use strict";
          var i = r(9742), o = r(645), s = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
          t.Buffer = f, t.SlowBuffer = function(e) {
            return +e != e && (e = 0), f.alloc(+e);
          }, t.INSPECT_MAX_BYTES = 50;
          var a = 2147483647;
          function c(e) {
            if (e > a) throw new RangeError('The value "' + e + '" is invalid for option "size"');
            var t = new Uint8Array(e);
            return Object.setPrototypeOf(t, f.prototype), t;
          }
          function f(e, t, r) {
            if ("number" == typeof e) {
              if ("string" == typeof t) throw new TypeError('The "string" argument must be of type string. Received type number');
              return d(e);
            }
            return u(e, t, r);
          }
          function u(e, t, r) {
            if ("string" == typeof e) return function(e, t) {
              if ("string" == typeof t && "" !== t || (t = "utf8"), !f.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
              var r = 0 | y(e, t), n = c(r), i = n.write(e, t);
              return i !== r && (n = n.slice(0, i)), n;
            }(e, t);
            if (ArrayBuffer.isView(e)) return function(e) {
              if (H(e, Uint8Array)) {
                var t = new Uint8Array(e);
                return p(t.buffer, t.byteOffset, t.byteLength);
              }
              return l(e);
            }(e);
            if (null == e) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
            if (H(e, ArrayBuffer) || e && H(e.buffer, ArrayBuffer)) return p(e, t, r);
            if ("undefined" != typeof SharedArrayBuffer && (H(e, SharedArrayBuffer) || e && H(e.buffer, SharedArrayBuffer))) return p(e, t, r);
            if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type number');
            var n = e.valueOf && e.valueOf();
            if (null != n && n !== e) return f.from(n, t, r);
            var i = function(e) {
              if (f.isBuffer(e)) {
                var t = 0 | b(e.length), r = c(t);
                return 0 === r.length || e.copy(r, 0, 0, t), r;
              }
              return void 0 !== e.length ? "number" != typeof e.length || z(e.length) ? c(0) : l(e) : "Buffer" === e.type && Array.isArray(e.data) ? l(e.data) : void 0;
            }(e);
            if (i) return i;
            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return f.from(e[Symbol.toPrimitive]("string"), t, r);
            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
          }
          function h(e) {
            if ("number" != typeof e) throw new TypeError('"size" argument must be of type number');
            if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
          }
          function d(e) {
            return h(e), c(e < 0 ? 0 : 0 | b(e));
          }
          function l(e) {
            for (var t = e.length < 0 ? 0 : 0 | b(e.length), r = c(t), n = 0; n < t; n += 1) r[n] = 255 & e[n];
            return r;
          }
          function p(e, t, r) {
            if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
            if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
            var n;
            return n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r), 
            Object.setPrototypeOf(n, f.prototype), n;
          }
          function b(e) {
            if (e >= a) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a.toString(16) + " bytes");
            return 0 | e;
          }
          function y(e, t) {
            if (f.isBuffer(e)) return e.length;
            if (ArrayBuffer.isView(e) || H(e, ArrayBuffer)) return e.byteLength;
            if ("string" != typeof e) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
            var r = e.length, n = arguments.length > 2 && !0 === arguments[2];
            if (!n && 0 === r) return 0;
            for (var i = !1; ;) switch (t) {
             case "ascii":
             case "latin1":
             case "binary":
              return r;

             case "utf8":
             case "utf-8":
              return U(e).length;

             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
              return 2 * r;

             case "hex":
              return r >>> 1;

             case "base64":
              return q(e).length;

             default:
              if (i) return n ? -1 : U(e).length;
              t = ("" + t).toLowerCase(), i = !0;
            }
          }
          function g(e, t, r) {
            var n = !1;
            if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
            if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
            if ((r >>>= 0) <= (t >>>= 0)) return "";
            for (e || (e = "utf8"); ;) switch (e) {
             case "hex":
              return T(this, t, r);

             case "utf8":
             case "utf-8":
              return P(this, t, r);

             case "ascii":
              return M(this, t, r);

             case "latin1":
             case "binary":
              return I(this, t, r);

             case "base64":
              return k(this, t, r);

             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
              return R(this, t, r);

             default:
              if (n) throw new TypeError("Unknown encoding: " + e);
              e = (e + "").toLowerCase(), n = !0;
            }
          }
          function m(e, t, r) {
            var n = e[t];
            e[t] = e[r], e[r] = n;
          }
          function v(e, t, r, n, i) {
            if (0 === e.length) return -1;
            if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), z(r = +r) && (r = i ? 0 : e.length - 1), 
            r < 0 && (r = e.length + r), r >= e.length) {
              if (i) return -1;
              r = e.length - 1;
            } else if (r < 0) {
              if (!i) return -1;
              r = 0;
            }
            if ("string" == typeof t && (t = f.from(t, n)), f.isBuffer(t)) return 0 === t.length ? -1 : w(e, t, r, n, i);
            if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : w(e, [ t ], r, n, i);
            throw new TypeError("val must be string, number or Buffer");
          }
          function w(e, t, r, n, i) {
            var o, s = 1, a = e.length, c = t.length;
            if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
              if (e.length < 2 || t.length < 2) return -1;
              s = 2, a /= 2, c /= 2, r /= 2;
            }
            function f(e, t) {
              return 1 === s ? e[t] : e.readUInt16BE(t * s);
            }
            if (i) {
              var u = -1;
              for (o = r; o < a; o++) if (f(e, o) === f(t, -1 === u ? 0 : o - u)) {
                if (-1 === u && (u = o), o - u + 1 === c) return u * s;
              } else -1 !== u && (o -= o - u), u = -1;
            } else for (r + c > a && (r = a - c), o = r; o >= 0; o--) {
              for (var h = !0, d = 0; d < c; d++) if (f(e, o + d) !== f(t, d)) {
                h = !1;
                break;
              }
              if (h) return o;
            }
            return -1;
          }
          function _(e, t, r, n) {
            r = Number(r) || 0;
            var i = e.length - r;
            n ? (n = Number(n)) > i && (n = i) : n = i;
            var o = t.length;
            n > o / 2 && (n = o / 2);
            for (var s = 0; s < n; ++s) {
              var a = parseInt(t.substr(2 * s, 2), 16);
              if (z(a)) return s;
              e[r + s] = a;
            }
            return s;
          }
          function S(e, t, r, n) {
            return F(U(t, e.length - r), e, r, n);
          }
          function E(e, t, r, n) {
            return F(function(e) {
              for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));
              return t;
            }(t), e, r, n);
          }
          function A(e, t, r, n) {
            return F(q(t), e, r, n);
          }
          function x(e, t, r, n) {
            return F(function(e, t) {
              for (var r, n, i, o = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) n = (r = e.charCodeAt(s)) >> 8, i = r % 256, o.push(i), 
              o.push(n);
              return o;
            }(t, e.length - r), e, r, n);
          }
          function k(e, t, r) {
            return 0 === t && r === e.length ? i.fromByteArray(e) : i.fromByteArray(e.slice(t, r));
          }
          function P(e, t, r) {
            r = Math.min(e.length, r);
            for (var n = [], i = t; i < r; ) {
              var o, s, a, c, f = e[i], u = null, h = f > 239 ? 4 : f > 223 ? 3 : f > 191 ? 2 : 1;
              if (i + h <= r) switch (h) {
               case 1:
                f < 128 && (u = f);
                break;

               case 2:
                128 == (192 & (o = e[i + 1])) && (c = (31 & f) << 6 | 63 & o) > 127 && (u = c);
                break;

               case 3:
                o = e[i + 1], s = e[i + 2], 128 == (192 & o) && 128 == (192 & s) && (c = (15 & f) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (c < 55296 || c > 57343) && (u = c);
                break;

               case 4:
                o = e[i + 1], s = e[i + 2], a = e[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (c = (15 & f) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && c < 1114112 && (u = c);
              }
              null === u ? (u = 65533, h = 1) : u > 65535 && (u -= 65536, n.push(u >>> 10 & 1023 | 55296), u = 56320 | 1023 & u), n.push(u), 
              i += h;
            }
            return function(e) {
              var t = e.length;
              if (t <= O) return String.fromCharCode.apply(String, e);
              for (var r = "", n = 0; n < t; ) r += String.fromCharCode.apply(String, e.slice(n, n += O));
              return r;
            }(n);
          }
          t.kMaxLength = a, f.TYPED_ARRAY_SUPPORT = function() {
            try {
              var e = new Uint8Array(1), t = {
                foo: function() {
                  return 42;
                }
              };
              return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), 42 === e.foo();
            } catch (e) {
              return !1;
            }
          }(), f.TYPED_ARRAY_SUPPORT || void 0 === n || "function" != typeof n.error || n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), 
          Object.defineProperty(f.prototype, "parent", {
            enumerable: !0,
            get: function() {
              if (f.isBuffer(this)) return this.buffer;
            }
          }), Object.defineProperty(f.prototype, "offset", {
            enumerable: !0,
            get: function() {
              if (f.isBuffer(this)) return this.byteOffset;
            }
          }), f.poolSize = 8192, f.from = function(e, t, r) {
            return u(e, t, r);
          }, Object.setPrototypeOf(f.prototype, Uint8Array.prototype), Object.setPrototypeOf(f, Uint8Array), f.alloc = function(e, t, r) {
            return function(e, t, r) {
              return h(e), e <= 0 ? c(e) : void 0 !== t ? "string" == typeof r ? c(e).fill(t, r) : c(e).fill(t) : c(e);
            }(e, t, r);
          }, f.allocUnsafe = function(e) {
            return d(e);
          }, f.allocUnsafeSlow = function(e) {
            return d(e);
          }, f.isBuffer = function(e) {
            return null != e && !0 === e._isBuffer && e !== f.prototype;
          }, f.compare = function(e, t) {
            if (H(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), H(t, Uint8Array) && (t = f.from(t, t.offset, t.byteLength)), 
            !f.isBuffer(e) || !f.isBuffer(t)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
            if (e === t) return 0;
            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {
              r = e[i], n = t[i];
              break;
            }
            return r < n ? -1 : n < r ? 1 : 0;
          }, f.isEncoding = function(e) {
            switch (String(e).toLowerCase()) {
             case "hex":
             case "utf8":
             case "utf-8":
             case "ascii":
             case "latin1":
             case "binary":
             case "base64":
             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
              return !0;

             default:
              return !1;
            }
          }, f.concat = function(e, t) {
            if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === e.length) return f.alloc(0);
            var r;
            if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;
            var n = f.allocUnsafe(t), i = 0;
            for (r = 0; r < e.length; ++r) {
              var o = e[r];
              if (H(o, Uint8Array)) i + o.length > n.length ? f.from(o).copy(n, i) : Uint8Array.prototype.set.call(n, o, i); else {
                if (!f.isBuffer(o)) throw new TypeError('"list" argument must be an Array of Buffers');
                o.copy(n, i);
              }
              i += o.length;
            }
            return n;
          }, f.byteLength = y, f.prototype._isBuffer = !0, f.prototype.swap16 = function() {
            var e = this.length;
            if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var t = 0; t < e; t += 2) m(this, t, t + 1);
            return this;
          }, f.prototype.swap32 = function() {
            var e = this.length;
            if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var t = 0; t < e; t += 4) m(this, t, t + 3), m(this, t + 1, t + 2);
            return this;
          }, f.prototype.swap64 = function() {
            var e = this.length;
            if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var t = 0; t < e; t += 8) m(this, t, t + 7), m(this, t + 1, t + 6), m(this, t + 2, t + 5), m(this, t + 3, t + 4);
            return this;
          }, f.prototype.toString = function() {
            var e = this.length;
            return 0 === e ? "" : 0 === arguments.length ? P(this, 0, e) : g.apply(this, arguments);
          }, f.prototype.toLocaleString = f.prototype.toString, f.prototype.equals = function(e) {
            if (!f.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
            return this === e || 0 === f.compare(this, e);
          }, f.prototype.inspect = function() {
            var e = "", r = t.INSPECT_MAX_BYTES;
            return e = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(), this.length > r && (e += " ... "), "<Buffer " + e + ">";
          }, s && (f.prototype[s] = f.prototype.inspect), f.prototype.compare = function(e, t, r, n, i) {
            if (H(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), !f.isBuffer(e)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
            if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), 
            t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");
            if (n >= i && t >= r) return 0;
            if (n >= i) return -1;
            if (t >= r) return 1;
            if (this === e) return 0;
            for (var o = (i >>>= 0) - (n >>>= 0), s = (r >>>= 0) - (t >>>= 0), a = Math.min(o, s), c = this.slice(n, i), u = e.slice(t, r), h = 0; h < a; ++h) if (c[h] !== u[h]) {
              o = c[h], s = u[h];
              break;
            }
            return o < s ? -1 : s < o ? 1 : 0;
          }, f.prototype.includes = function(e, t, r) {
            return -1 !== this.indexOf(e, t, r);
          }, f.prototype.indexOf = function(e, t, r) {
            return v(this, e, t, r, !0);
          }, f.prototype.lastIndexOf = function(e, t, r) {
            return v(this, e, t, r, !1);
          }, f.prototype.write = function(e, t, r, n) {
            if (void 0 === t) n = "utf8", r = this.length, t = 0; else if (void 0 === r && "string" == typeof t) n = t, r = this.length, 
            t = 0; else {
              if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
            }
            var i = this.length - t;
            if ((void 0 === r || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
            n || (n = "utf8");
            for (var o = !1; ;) switch (n) {
             case "hex":
              return _(this, e, t, r);

             case "utf8":
             case "utf-8":
              return S(this, e, t, r);

             case "ascii":
             case "latin1":
             case "binary":
              return E(this, e, t, r);

             case "base64":
              return A(this, e, t, r);

             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
              return x(this, e, t, r);

             default:
              if (o) throw new TypeError("Unknown encoding: " + n);
              n = ("" + n).toLowerCase(), o = !0;
            }
          }, f.prototype.toJSON = function() {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0)
            };
          };
          var O = 4096;
          function M(e, t, r) {
            var n = "";
            r = Math.min(e.length, r);
            for (var i = t; i < r; ++i) n += String.fromCharCode(127 & e[i]);
            return n;
          }
          function I(e, t, r) {
            var n = "";
            r = Math.min(e.length, r);
            for (var i = t; i < r; ++i) n += String.fromCharCode(e[i]);
            return n;
          }
          function T(e, t, r) {
            var n = e.length;
            (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);
            for (var i = "", o = t; o < r; ++o) i += K[e[o]];
            return i;
          }
          function R(e, t, r) {
            for (var n = e.slice(t, r), i = "", o = 0; o < n.length - 1; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);
            return i;
          }
          function C(e, t, r) {
            if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
            if (e + t > r) throw new RangeError("Trying to access beyond buffer length");
          }
          function N(e, t, r, n, i, o) {
            if (!f.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t > i || t < o) throw new RangeError('"value" argument is out of bounds');
            if (r + n > e.length) throw new RangeError("Index out of range");
          }
          function j(e, t, r, n, i, o) {
            if (r + n > e.length) throw new RangeError("Index out of range");
            if (r < 0) throw new RangeError("Index out of range");
          }
          function B(e, t, r, n, i) {
            return t = +t, r >>>= 0, i || j(e, 0, r, 4), o.write(e, t, r, n, 23, 4), r + 4;
          }
          function L(e, t, r, n, i) {
            return t = +t, r >>>= 0, i || j(e, 0, r, 8), o.write(e, t, r, n, 52, 8), r + 8;
          }
          f.prototype.slice = function(e, t) {
            var r = this.length;
            (e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), 
            t < e && (t = e);
            var n = this.subarray(e, t);
            return Object.setPrototypeOf(n, f.prototype), n;
          }, f.prototype.readUintLE = f.prototype.readUIntLE = function(e, t, r) {
            e >>>= 0, t >>>= 0, r || C(e, t, this.length);
            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256); ) n += this[e + o] * i;
            return n;
          }, f.prototype.readUintBE = f.prototype.readUIntBE = function(e, t, r) {
            e >>>= 0, t >>>= 0, r || C(e, t, this.length);
            for (var n = this[e + --t], i = 1; t > 0 && (i *= 256); ) n += this[e + --t] * i;
            return n;
          }, f.prototype.readUint8 = f.prototype.readUInt8 = function(e, t) {
            return e >>>= 0, t || C(e, 1, this.length), this[e];
          }, f.prototype.readUint16LE = f.prototype.readUInt16LE = function(e, t) {
            return e >>>= 0, t || C(e, 2, this.length), this[e] | this[e + 1] << 8;
          }, f.prototype.readUint16BE = f.prototype.readUInt16BE = function(e, t) {
            return e >>>= 0, t || C(e, 2, this.length), this[e] << 8 | this[e + 1];
          }, f.prototype.readUint32LE = f.prototype.readUInt32LE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
          }, f.prototype.readUint32BE = f.prototype.readUInt32BE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
          }, f.prototype.readIntLE = function(e, t, r) {
            e >>>= 0, t >>>= 0, r || C(e, t, this.length);
            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256); ) n += this[e + o] * i;
            return n >= (i *= 128) && (n -= Math.pow(2, 8 * t)), n;
          }, f.prototype.readIntBE = function(e, t, r) {
            e >>>= 0, t >>>= 0, r || C(e, t, this.length);
            for (var n = t, i = 1, o = this[e + --n]; n > 0 && (i *= 256); ) o += this[e + --n] * i;
            return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;
          }, f.prototype.readInt8 = function(e, t) {
            return e >>>= 0, t || C(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
          }, f.prototype.readInt16LE = function(e, t) {
            e >>>= 0, t || C(e, 2, this.length);
            var r = this[e] | this[e + 1] << 8;
            return 32768 & r ? 4294901760 | r : r;
          }, f.prototype.readInt16BE = function(e, t) {
            e >>>= 0, t || C(e, 2, this.length);
            var r = this[e + 1] | this[e] << 8;
            return 32768 & r ? 4294901760 | r : r;
          }, f.prototype.readInt32LE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
          }, f.prototype.readInt32BE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
          }, f.prototype.readFloatLE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), o.read(this, e, !0, 23, 4);
          }, f.prototype.readFloatBE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), o.read(this, e, !1, 23, 4);
          }, f.prototype.readDoubleLE = function(e, t) {
            return e >>>= 0, t || C(e, 8, this.length), o.read(this, e, !0, 52, 8);
          }, f.prototype.readDoubleBE = function(e, t) {
            return e >>>= 0, t || C(e, 8, this.length), o.read(this, e, !1, 52, 8);
          }, f.prototype.writeUintLE = f.prototype.writeUIntLE = function(e, t, r, n) {
            e = +e, t >>>= 0, r >>>= 0, n || N(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
            var i = 1, o = 0;
            for (this[t] = 255 & e; ++o < r && (i *= 256); ) this[t + o] = e / i & 255;
            return t + r;
          }, f.prototype.writeUintBE = f.prototype.writeUIntBE = function(e, t, r, n) {
            e = +e, t >>>= 0, r >>>= 0, n || N(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
            var i = r - 1, o = 1;
            for (this[t + i] = 255 & e; --i >= 0 && (o *= 256); ) this[t + i] = e / o & 255;
            return t + r;
          }, f.prototype.writeUint8 = f.prototype.writeUInt8 = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;
          }, f.prototype.writeUint16LE = f.prototype.writeUInt16LE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
          }, f.prototype.writeUint16BE = f.prototype.writeUInt16BE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
          }, f.prototype.writeUint32LE = f.prototype.writeUInt32LE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, 
            this[t] = 255 & e, t + 4;
          }, f.prototype.writeUint32BE = f.prototype.writeUInt32BE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, 
            this[t + 3] = 255 & e, t + 4;
          }, f.prototype.writeIntLE = function(e, t, r, n) {
            if (e = +e, t >>>= 0, !n) {
              var i = Math.pow(2, 8 * r - 1);
              N(this, e, t, r, i - 1, -i);
            }
            var o = 0, s = 1, a = 0;
            for (this[t] = 255 & e; ++o < r && (s *= 256); ) e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;
            return t + r;
          }, f.prototype.writeIntBE = function(e, t, r, n) {
            if (e = +e, t >>>= 0, !n) {
              var i = Math.pow(2, 8 * r - 1);
              N(this, e, t, r, i - 1, -i);
            }
            var o = r - 1, s = 1, a = 0;
            for (this[t + o] = 255 & e; --o >= 0 && (s *= 256); ) e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;
            return t + r;
          }, f.prototype.writeInt8 = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
          }, f.prototype.writeInt16LE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
          }, f.prototype.writeInt16BE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
          }, f.prototype.writeInt32LE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, 
            this[t + 3] = e >>> 24, t + 4;
          }, f.prototype.writeInt32BE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, 
            this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
          }, f.prototype.writeFloatLE = function(e, t, r) {
            return B(this, e, t, !0, r);
          }, f.prototype.writeFloatBE = function(e, t, r) {
            return B(this, e, t, !1, r);
          }, f.prototype.writeDoubleLE = function(e, t, r) {
            return L(this, e, t, !0, r);
          }, f.prototype.writeDoubleBE = function(e, t, r) {
            return L(this, e, t, !1, r);
          }, f.prototype.copy = function(e, t, r, n) {
            if (!f.isBuffer(e)) throw new TypeError("argument should be a Buffer");
            if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), 
            n === r) return 0;
            if (0 === e.length || 0 === this.length) return 0;
            if (t < 0) throw new RangeError("targetStart out of bounds");
            if (r < 0 || r >= this.length) throw new RangeError("Index out of range");
            if (n < 0) throw new RangeError("sourceEnd out of bounds");
            n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
            var i = n - r;
            return this === e && "function" == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(t, r, n) : Uint8Array.prototype.set.call(e, this.subarray(r, n), t), 
            i;
          }, f.prototype.fill = function(e, t, r, n) {
            if ("string" == typeof e) {
              if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
              if ("string" == typeof n && !f.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
              if (1 === e.length) {
                var i = e.charCodeAt(0);
                ("utf8" === n && i < 128 || "latin1" === n) && (e = i);
              }
            } else "number" == typeof e ? e &= 255 : "boolean" == typeof e && (e = Number(e));
            if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
            if (r <= t) return this;
            var o;
            if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) this[o] = e; else {
              var s = f.isBuffer(e) ? e : f.from(e, n), a = s.length;
              if (0 === a) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
              for (o = 0; o < r - t; ++o) this[o + t] = s[o % a];
            }
            return this;
          };
          var D = /[^+/0-9A-Za-z-_]/g;
          function U(e, t) {
            var r;
            t = t || 1 / 0;
            for (var n = e.length, i = null, o = [], s = 0; s < n; ++s) {
              if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {
                if (!i) {
                  if (r > 56319) {
                    (t -= 3) > -1 && o.push(239, 191, 189);
                    continue;
                  }
                  if (s + 1 === n) {
                    (t -= 3) > -1 && o.push(239, 191, 189);
                    continue;
                  }
                  i = r;
                  continue;
                }
                if (r < 56320) {
                  (t -= 3) > -1 && o.push(239, 191, 189), i = r;
                  continue;
                }
                r = 65536 + (i - 55296 << 10 | r - 56320);
              } else i && (t -= 3) > -1 && o.push(239, 191, 189);
              if (i = null, r < 128) {
                if ((t -= 1) < 0) break;
                o.push(r);
              } else if (r < 2048) {
                if ((t -= 2) < 0) break;
                o.push(r >> 6 | 192, 63 & r | 128);
              } else if (r < 65536) {
                if ((t -= 3) < 0) break;
                o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
              } else {
                if (!(r < 1114112)) throw new Error("Invalid code point");
                if ((t -= 4) < 0) break;
                o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
              }
            }
            return o;
          }
          function q(e) {
            return i.toByteArray(function(e) {
              if ((e = (e = e.split("=")[0]).trim().replace(D, "")).length < 2) return "";
              for (;e.length % 4 != 0; ) e += "=";
              return e;
            }(e));
          }
          function F(e, t, r, n) {
            for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) t[i + r] = e[i];
            return i;
          }
          function H(e, t) {
            return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;
          }
          function z(e) {
            return e != e;
          }
          var K = function() {
            for (var e = "0123456789abcdef", t = new Array(256), r = 0; r < 16; ++r) for (var n = 16 * r, i = 0; i < 16; ++i) t[n + i] = e[r] + e[i];
            return t;
          }();
        },
        584: e => {
          e.exports = {
            100: "Continue",
            101: "Switching Protocols",
            102: "Processing",
            200: "OK",
            201: "Created",
            202: "Accepted",
            203: "Non-Authoritative Information",
            204: "No Content",
            205: "Reset Content",
            206: "Partial Content",
            207: "Multi-Status",
            208: "Already Reported",
            226: "IM Used",
            300: "Multiple Choices",
            301: "Moved Permanently",
            302: "Found",
            303: "See Other",
            304: "Not Modified",
            305: "Use Proxy",
            307: "Temporary Redirect",
            308: "Permanent Redirect",
            400: "Bad Request",
            401: "Unauthorized",
            402: "Payment Required",
            403: "Forbidden",
            404: "Not Found",
            405: "Method Not Allowed",
            406: "Not Acceptable",
            407: "Proxy Authentication Required",
            408: "Request Timeout",
            409: "Conflict",
            410: "Gone",
            411: "Length Required",
            412: "Precondition Failed",
            413: "Payload Too Large",
            414: "URI Too Long",
            415: "Unsupported Media Type",
            416: "Range Not Satisfiable",
            417: "Expectation Failed",
            418: "I'm a teapot",
            421: "Misdirected Request",
            422: "Unprocessable Entity",
            423: "Locked",
            424: "Failed Dependency",
            425: "Unordered Collection",
            426: "Upgrade Required",
            428: "Precondition Required",
            429: "Too Many Requests",
            431: "Request Header Fields Too Large",
            451: "Unavailable For Legal Reasons",
            500: "Internal Server Error",
            501: "Not Implemented",
            502: "Bad Gateway",
            503: "Service Unavailable",
            504: "Gateway Timeout",
            505: "HTTP Version Not Supported",
            506: "Variant Also Negotiates",
            507: "Insufficient Storage",
            508: "Loop Detected",
            509: "Bandwidth Limit Exceeded",
            510: "Not Extended",
            511: "Network Authentication Required"
          };
        },
        1924: (e, t, r) => {
          "use strict";
          var n = r(210), i = r(5559), o = i(n("String.prototype.indexOf"));
          e.exports = function(e, t) {
            var r = n(e, !!t);
            return "function" == typeof r && o(e, ".prototype.") > -1 ? i(r) : r;
          };
        },
        5559: (e, t, r) => {
          "use strict";
          var n = r(8612), i = r(210), o = i("%Function.prototype.apply%"), s = i("%Function.prototype.call%"), a = i("%Reflect.apply%", !0) || n.call(s, o), c = i("%Object.getOwnPropertyDescriptor%", !0), f = i("%Object.defineProperty%", !0), u = i("%Math.max%");
          if (f) try {
            f({}, "a", {
              value: 1
            });
          } catch (e) {
            f = null;
          }
          e.exports = function(e) {
            var t = a(n, s, arguments);
            if (c && f) {
              var r = c(t, "length");
              r.configurable && f(t, "length", {
                value: 1 + u(0, e.length - (arguments.length - 1))
              });
            }
            return t;
          };
          var h = function() {
            return a(n, o, arguments);
          };
          f ? f(e.exports, "apply", {
            value: h
          }) : e.exports.apply = h;
        },
        1027: (e, t, r) => {
          var n = r(9509).Buffer, i = r(2830).Transform, o = r(2553).s;
          function s(e) {
            i.call(this), this.hashMode = "string" == typeof e, this.hashMode ? this[e] = this._finalOrDigest : this.final = this._finalOrDigest, 
            this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
          }
          r(5717)(s, i), s.prototype.update = function(e, t, r) {
            "string" == typeof e && (e = n.from(e, t));
            var i = this._update(e);
            return this.hashMode ? this : (r && (i = this._toString(i, r)), i);
          }, s.prototype.setAutoPadding = function() {}, s.prototype.getAuthTag = function() {
            throw new Error("trying to get auth tag in unsupported state");
          }, s.prototype.setAuthTag = function() {
            throw new Error("trying to set auth tag in unsupported state");
          }, s.prototype.setAAD = function() {
            throw new Error("trying to set aad in unsupported state");
          }, s.prototype._transform = function(e, t, r) {
            var n;
            try {
              this.hashMode ? this._update(e) : this.push(this._update(e));
            } catch (e) {
              n = e;
            } finally {
              r(n);
            }
          }, s.prototype._flush = function(e) {
            var t;
            try {
              this.push(this.__final());
            } catch (e) {
              t = e;
            }
            e(t);
          }, s.prototype._finalOrDigest = function(e) {
            var t = this.__final() || n.alloc(0);
            return e && (t = this._toString(t, e, !0)), t;
          }, s.prototype._toString = function(e, t, r) {
            if (this._decoder || (this._decoder = new o(t), this._encoding = t), this._encoding !== t) throw new Error("can't switch encodings");
            var n = this._decoder.write(e);
            return r && (n += this._decoder.end()), n;
          }, e.exports = s;
        },
        7866: (e, t) => {
          !function() {
            "use strict";
            function e(t, r, n, i) {
              return this instanceof e ? (this.domain = t || void 0, this.path = r || "/", this.secure = !!n, this.script = !!i, this) : new e(t, r, n, i);
            }
            function r(e, t, n) {
              return e instanceof r ? e : this instanceof r ? (this.name = null, this.value = null, this.expiration_date = 1 / 0, this.path = String(n || "/"), 
              this.explicit_path = !1, this.domain = t || null, this.explicit_domain = !1, this.secure = !1, this.noscript = !1, e && this.parse(e, t, n), 
              this) : new r(e, t, n);
            }
            e.All = Object.freeze(Object.create(null)), t.CookieAccessInfo = e, t.Cookie = r, r.prototype.toString = function() {
              var e = [ this.name + "=" + this.value ];
              return this.expiration_date !== 1 / 0 && e.push("expires=" + new Date(this.expiration_date).toGMTString()), this.domain && e.push("domain=" + this.domain), 
              this.path && e.push("path=" + this.path), this.secure && e.push("secure"), this.noscript && e.push("httponly"), e.join("; ");
            }, r.prototype.toValueString = function() {
              return this.name + "=" + this.value;
            };
            var i = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
            function o() {
              var e, t;
              return this instanceof o ? (e = Object.create(null), this.setCookie = function(n, i, o) {
                var s, a;
                if (s = (n = new r(n, i, o)).expiration_date <= Date.now(), void 0 !== e[n.name]) {
                  for (t = e[n.name], a = 0; a < t.length; a += 1) if (t[a].collidesWith(n)) return s ? (t.splice(a, 1), 0 === t.length && delete e[n.name], 
                  !1) : (t[a] = n, n);
                  return !s && (t.push(n), n);
                }
                return !s && (e[n.name] = [ n ], e[n.name]);
              }, this.getCookie = function(r, n) {
                var i, o;
                if (t = e[r]) for (o = 0; o < t.length; o += 1) if ((i = t[o]).expiration_date <= Date.now()) 0 === t.length && delete e[i.name]; else if (i.matches(n)) return i;
              }, this.getCookies = function(t) {
                var r, n, i = [];
                for (r in e) (n = this.getCookie(r, t)) && i.push(n);
                return i.toString = function() {
                  return i.join(":");
                }, i.toValueString = function() {
                  return i.map((function(e) {
                    return e.toValueString();
                  })).join("; ");
                }, i;
              }, this) : new o;
            }
            r.prototype.parse = function(e, t, i) {
              if (this instanceof r) {
                var o, s = e.split(";").filter((function(e) {
                  return !!e;
                })), a = s[0].match(/([^=]+)=([\s\S]*)/);
                if (!a) return void n.warn("Invalid cookie header encountered. Header: '" + e + "'");
                var c = a[1], f = a[2];
                if ("string" != typeof c || 0 === c.length || "string" != typeof f) return void n.warn("Unable to extract values from cookie header. Cookie: '" + e + "'");
                for (this.name = c, this.value = f, o = 1; o < s.length; o += 1) switch (c = (a = s[o].match(/([^=]+)(?:=([\s\S]*))?/))[1].trim().toLowerCase(), 
                f = a[2], c) {
                 case "httponly":
                  this.noscript = !0;
                  break;

                 case "expires":
                  this.expiration_date = f ? Number(Date.parse(f)) : 1 / 0;
                  break;

                 case "path":
                  this.path = f ? f.trim() : "", this.explicit_path = !0;
                  break;

                 case "domain":
                  this.domain = f ? f.trim() : "", this.explicit_domain = !!this.domain;
                  break;

                 case "secure":
                  this.secure = !0;
                }
                return this.explicit_path || (this.path = i || "/"), this.explicit_domain || (this.domain = t), this;
              }
              return (new r).parse(e, t, i);
            }, r.prototype.matches = function(t) {
              return t === e.All || !(this.noscript && t.script || this.secure && !t.secure || !this.collidesWith(t));
            }, r.prototype.collidesWith = function(e) {
              if (this.path && !e.path || this.domain && !e.domain) return !1;
              if (this.path && 0 !== e.path.indexOf(this.path)) return !1;
              if (this.explicit_path && 0 !== e.path.indexOf(this.path)) return !1;
              var t = e.domain && e.domain.replace(/^[\.]/, ""), r = this.domain && this.domain.replace(/^[\.]/, "");
              if (r === t) return !0;
              if (r) {
                if (!this.explicit_domain) return !1;
                var n = t.indexOf(r);
                return -1 !== n && n === t.length - r.length;
              }
              return !0;
            }, t.CookieJar = o, o.prototype.setCookies = function(e, t, n) {
              var o, s, a = [];
              for (e = (e = Array.isArray(e) ? e : e.split(i)).map((function(e) {
                return new r(e, t, n);
              })), o = 0; o < e.length; o += 1) s = e[o], this.setCookie(s, t, n) && a.push(s);
              return a;
            };
          }();
        },
        6497: (e, t, r) => {
          function n(e) {
            return Object.prototype.toString.call(e);
          }
          t.isArray = function(e) {
            return Array.isArray ? Array.isArray(e) : "[object Array]" === n(e);
          }, t.isBoolean = function(e) {
            return "boolean" == typeof e;
          }, t.isNull = function(e) {
            return null === e;
          }, t.isNullOrUndefined = function(e) {
            return null == e;
          }, t.isNumber = function(e) {
            return "number" == typeof e;
          }, t.isString = function(e) {
            return "string" == typeof e;
          }, t.isSymbol = function(e) {
            return "symbol" == typeof e;
          }, t.isUndefined = function(e) {
            return void 0 === e;
          }, t.isRegExp = function(e) {
            return "[object RegExp]" === n(e);
          }, t.isObject = function(e) {
            return "object" == typeof e && null !== e;
          }, t.isDate = function(e) {
            return "[object Date]" === n(e);
          }, t.isError = function(e) {
            return "[object Error]" === n(e) || e instanceof Error;
          }, t.isFunction = function(e) {
            return "function" == typeof e;
          }, t.isPrimitive = function(e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == typeof e || void 0 === e;
          }, t.isBuffer = r(8764).Buffer.isBuffer;
        },
        6393: (e, t, r) => {
          var n = r(8764).Buffer, i = r(6266), o = r(3550);
          e.exports = function(e) {
            return new a(e);
          };
          var s = {
            secp256k1: {
              name: "secp256k1",
              byteLength: 32
            },
            secp224r1: {
              name: "p224",
              byteLength: 28
            },
            prime256v1: {
              name: "p256",
              byteLength: 32
            },
            prime192v1: {
              name: "p192",
              byteLength: 24
            },
            ed25519: {
              name: "ed25519",
              byteLength: 32
            },
            secp384r1: {
              name: "p384",
              byteLength: 48
            },
            secp521r1: {
              name: "p521",
              byteLength: 66
            }
          };
          function a(e) {
            this.curveType = s[e], this.curveType || (this.curveType = {
              name: e
            }), this.curve = new i.ec(this.curveType.name), this.keys = void 0;
          }
          function c(e, t, r) {
            Array.isArray(e) || (e = e.toArray());
            var i = new n(e);
            if (r && i.length < r) {
              var o = new n(r - i.length);
              o.fill(0), i = n.concat([ o, i ]);
            }
            return t ? i.toString(t) : i;
          }
          s.p224 = s.secp224r1, s.p256 = s.secp256r1 = s.prime256v1, s.p192 = s.secp192r1 = s.prime192v1, s.p384 = s.secp384r1, s.p521 = s.secp521r1, 
          a.prototype.generateKeys = function(e, t) {
            return this.keys = this.curve.genKeyPair(), this.getPublicKey(e, t);
          }, a.prototype.computeSecret = function(e, t, r) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), c(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(), r, this.curveType.byteLength);
          }, a.prototype.getPublicKey = function(e, t) {
            var r = this.keys.getPublic("compressed" === t, !0);
            return "hybrid" === t && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6), c(r, e);
          }, a.prototype.getPrivateKey = function(e) {
            return c(this.keys.getPrivate(), e);
          }, a.prototype.setPublicKey = function(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this.keys._importPublic(e), this;
          }, a.prototype.setPrivateKey = function(e, t) {
            t = t || "utf8", n.isBuffer(e) || (e = new n(e, t));
            var r = new o(e);
            return r = r.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r), this;
          };
        },
        3482: (e, t, r) => {
          "use strict";
          var n = r(5717), i = r(2318), o = r(9785), s = r(9072), a = r(1027);
          function c(e) {
            a.call(this, "digest"), this._hash = e;
          }
          n(c, a), c.prototype._update = function(e) {
            this._hash.update(e);
          }, c.prototype._final = function() {
            return this._hash.digest();
          }, e.exports = function(e) {
            return "md5" === (e = e.toLowerCase()) ? new i : "rmd160" === e || "ripemd160" === e ? new o : new c(s(e));
          };
        },
        8028: (e, t, r) => {
          var n = r(2318);
          e.exports = function(e) {
            return (new n).update(e).digest();
          };
        },
        7394: (e, t, r) => {
          "use strict";
          var n = r(5717), i = r(1031), o = r(1027), s = r(9509).Buffer, a = r(8028), c = r(9785), f = r(9072), u = s.alloc(128);
          function h(e, t) {
            o.call(this, "digest"), "string" == typeof t && (t = s.from(t));
            var r = "sha512" === e || "sha384" === e ? 128 : 64;
            this._alg = e, this._key = t, t.length > r ? t = ("rmd160" === e ? new c : f(e)).update(t).digest() : t.length < r && (t = s.concat([ t, u ], r));
            for (var n = this._ipad = s.allocUnsafe(r), i = this._opad = s.allocUnsafe(r), a = 0; a < r; a++) n[a] = 54 ^ t[a], i[a] = 92 ^ t[a];
            this._hash = "rmd160" === e ? new c : f(e), this._hash.update(n);
          }
          n(h, o), h.prototype._update = function(e) {
            this._hash.update(e);
          }, h.prototype._final = function() {
            var e = this._hash.digest();
            return ("rmd160" === this._alg ? new c : f(this._alg)).update(this._opad).update(e).digest();
          }, e.exports = function(e, t) {
            return "rmd160" === (e = e.toLowerCase()) || "ripemd160" === e ? new h("rmd160", t) : "md5" === e ? new i(a, t) : new h(e, t);
          };
        },
        1031: (e, t, r) => {
          "use strict";
          var n = r(5717), i = r(9509).Buffer, o = r(1027), s = i.alloc(128), a = 64;
          function c(e, t) {
            o.call(this, "digest"), "string" == typeof t && (t = i.from(t)), this._alg = e, this._key = t, t.length > a ? t = e(t) : t.length < a && (t = i.concat([ t, s ], a));
            for (var r = this._ipad = i.allocUnsafe(a), n = this._opad = i.allocUnsafe(a), c = 0; c < a; c++) r[c] = 54 ^ t[c], n[c] = 92 ^ t[c];
            this._hash = [ r ];
          }
          n(c, o), c.prototype._update = function(e) {
            this._hash.push(e);
          }, c.prototype._final = function() {
            var e = this._alg(i.concat(this._hash));
            return this._alg(i.concat([ this._opad, e ]));
          }, e.exports = c;
        },
        5835: (e, t, r) => {
          "use strict";
          t.randomBytes = t.rng = t.pseudoRandomBytes = t.prng = r(1798), t.createHash = t.Hash = r(3482), t.createHmac = t.Hmac = r(7394);
          var n = r(6042), i = Object.keys(n), o = [ "sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160" ].concat(i);
          t.getHashes = function() {
            return o;
          };
          var s = r(5632);
          t.pbkdf2 = s.pbkdf2, t.pbkdf2Sync = s.pbkdf2Sync;
          var a = r(3614);
          t.Cipher = a.Cipher, t.createCipher = a.createCipher, t.Cipheriv = a.Cipheriv, t.createCipheriv = a.createCipheriv, t.Decipher = a.Decipher, 
          t.createDecipher = a.createDecipher, t.Decipheriv = a.Decipheriv, t.createDecipheriv = a.createDecipheriv, t.getCiphers = a.getCiphers, 
          t.listCiphers = a.listCiphers;
          var c = r(2607);
          t.DiffieHellmanGroup = c.DiffieHellmanGroup, t.createDiffieHellmanGroup = c.createDiffieHellmanGroup, t.getDiffieHellman = c.getDiffieHellman, 
          t.createDiffieHellman = c.createDiffieHellman, t.DiffieHellman = c.DiffieHellman;
          var f = r(4743);
          t.createSign = f.createSign, t.Sign = f.Sign, t.createVerify = f.createVerify, t.Verify = f.Verify, t.createECDH = r(6393);
          var u = r(7900);
          t.publicEncrypt = u.publicEncrypt, t.privateEncrypt = u.privateEncrypt, t.publicDecrypt = u.publicDecrypt, t.privateDecrypt = u.privateDecrypt;
          var h = r(7963);
          t.randomFill = h.randomFill, t.randomFillSync = h.randomFillSync, t.createCredentials = function() {
            throw new Error([ "sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify" ].join("\n"));
          }, t.constants = {
            DH_CHECK_P_NOT_SAFE_PRIME: 2,
            DH_CHECK_P_NOT_PRIME: 1,
            DH_UNABLE_TO_CHECK_GENERATOR: 4,
            DH_NOT_SUITABLE_GENERATOR: 8,
            NPN_ENABLED: 1,
            ALPN_ENABLED: 1,
            RSA_PKCS1_PADDING: 1,
            RSA_SSLV23_PADDING: 2,
            RSA_NO_PADDING: 3,
            RSA_PKCS1_OAEP_PADDING: 4,
            RSA_X931_PADDING: 5,
            RSA_PKCS1_PSS_PADDING: 6,
            POINT_CONVERSION_COMPRESSED: 2,
            POINT_CONVERSION_UNCOMPRESSED: 4,
            POINT_CONVERSION_HYBRID: 6
          };
        },
        4289: (e, t, r) => {
          "use strict";
          var n = r(2215), i = "function" == typeof Symbol && "symbol" == typeof Symbol("foo"), o = Object.prototype.toString, s = Array.prototype.concat, a = Object.defineProperty, c = r(1044)(), f = a && c, u = function(e, t, r, n) {
            var i;
            (!(t in e) || "function" == typeof (i = n) && "[object Function]" === o.call(i) && n()) && (f ? a(e, t, {
              configurable: !0,
              enumerable: !1,
              value: r,
              writable: !0
            }) : e[t] = r);
          }, h = function(e, t) {
            var r = arguments.length > 2 ? arguments[2] : {}, o = n(t);
            i && (o = s.call(o, Object.getOwnPropertySymbols(t)));
            for (var a = 0; a < o.length; a += 1) u(e, o[a], t[o[a]], r[o[a]]);
          };
          h.supportsDescriptors = !!f, e.exports = h;
        },
        5251: (e, t, r) => {
          "use strict";
          t.utils = r(1278), t.Cipher = r(5756), t.DES = r(327), t.CBC = r(9051), t.EDE = r(651);
        },
        9051: (e, t, r) => {
          "use strict";
          var n = r(9746), i = r(5717), o = {};
          function s(e) {
            n.equal(e.length, 8, "Invalid IV length"), this.iv = new Array(8);
            for (var t = 0; t < this.iv.length; t++) this.iv[t] = e[t];
          }
          t.instantiate = function(e) {
            function t(t) {
              e.call(this, t), this._cbcInit();
            }
            i(t, e);
            for (var r = Object.keys(o), n = 0; n < r.length; n++) {
              var s = r[n];
              t.prototype[s] = o[s];
            }
            return t.create = function(e) {
              return new t(e);
            }, t;
          }, o._cbcInit = function() {
            var e = new s(this.options.iv);
            this._cbcState = e;
          }, o._update = function(e, t, r, n) {
            var i = this._cbcState, o = this.constructor.super_.prototype, s = i.iv;
            if ("encrypt" === this.type) {
              for (var a = 0; a < this.blockSize; a++) s[a] ^= e[t + a];
              for (o._update.call(this, s, 0, r, n), a = 0; a < this.blockSize; a++) s[a] = r[n + a];
            } else {
              for (o._update.call(this, e, t, r, n), a = 0; a < this.blockSize; a++) r[n + a] ^= s[a];
              for (a = 0; a < this.blockSize; a++) s[a] = e[t + a];
            }
          };
        },
        5756: (e, t, r) => {
          "use strict";
          var n = r(9746);
          function i(e) {
            this.options = e, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), 
            this.bufferOff = 0;
          }
          e.exports = i, i.prototype._init = function() {}, i.prototype.update = function(e) {
            return 0 === e.length ? [] : "decrypt" === this.type ? this._updateDecrypt(e) : this._updateEncrypt(e);
          }, i.prototype._buffer = function(e, t) {
            for (var r = Math.min(this.buffer.length - this.bufferOff, e.length - t), n = 0; n < r; n++) this.buffer[this.bufferOff + n] = e[t + n];
            return this.bufferOff += r, r;
          }, i.prototype._flushBuffer = function(e, t) {
            return this._update(this.buffer, 0, e, t), this.bufferOff = 0, this.blockSize;
          }, i.prototype._updateEncrypt = function(e) {
            var t = 0, r = 0, n = (this.bufferOff + e.length) / this.blockSize | 0, i = new Array(n * this.blockSize);
            0 !== this.bufferOff && (t += this._buffer(e, t), this.bufferOff === this.buffer.length && (r += this._flushBuffer(i, r)));
            for (var o = e.length - (e.length - t) % this.blockSize; t < o; t += this.blockSize) this._update(e, t, i, r), r += this.blockSize;
            for (;t < e.length; t++, this.bufferOff++) this.buffer[this.bufferOff] = e[t];
            return i;
          }, i.prototype._updateDecrypt = function(e) {
            for (var t = 0, r = 0, n = Math.ceil((this.bufferOff + e.length) / this.blockSize) - 1, i = new Array(n * this.blockSize); n > 0; n--) t += this._buffer(e, t), 
            r += this._flushBuffer(i, r);
            return t += this._buffer(e, t), i;
          }, i.prototype.final = function(e) {
            var t, r;
            return e && (t = this.update(e)), r = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(), t ? t.concat(r) : r;
          }, i.prototype._pad = function(e, t) {
            if (0 === t) return !1;
            for (;t < e.length; ) e[t++] = 0;
            return !0;
          }, i.prototype._finalEncrypt = function() {
            if (!this._pad(this.buffer, this.bufferOff)) return [];
            var e = new Array(this.blockSize);
            return this._update(this.buffer, 0, e, 0), e;
          }, i.prototype._unpad = function(e) {
            return e;
          }, i.prototype._finalDecrypt = function() {
            n.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
            var e = new Array(this.blockSize);
            return this._flushBuffer(e, 0), this._unpad(e);
          };
        },
        327: (e, t, r) => {
          "use strict";
          var n = r(9746), i = r(5717), o = r(1278), s = r(5756);
          function a() {
            this.tmp = new Array(2), this.keys = null;
          }
          function c(e) {
            s.call(this, e);
            var t = new a;
            this._desState = t, this.deriveKeys(t, e.key);
          }
          i(c, s), e.exports = c, c.create = function(e) {
            return new c(e);
          };
          var f = [ 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 ];
          c.prototype.deriveKeys = function(e, t) {
            e.keys = new Array(32), n.equal(t.length, this.blockSize, "Invalid key length");
            var r = o.readUInt32BE(t, 0), i = o.readUInt32BE(t, 4);
            o.pc1(r, i, e.tmp, 0), r = e.tmp[0], i = e.tmp[1];
            for (var s = 0; s < e.keys.length; s += 2) {
              var a = f[s >>> 1];
              r = o.r28shl(r, a), i = o.r28shl(i, a), o.pc2(r, i, e.keys, s);
            }
          }, c.prototype._update = function(e, t, r, n) {
            var i = this._desState, s = o.readUInt32BE(e, t), a = o.readUInt32BE(e, t + 4);
            o.ip(s, a, i.tmp, 0), s = i.tmp[0], a = i.tmp[1], "encrypt" === this.type ? this._encrypt(i, s, a, i.tmp, 0) : this._decrypt(i, s, a, i.tmp, 0), 
            s = i.tmp[0], a = i.tmp[1], o.writeUInt32BE(r, s, n), o.writeUInt32BE(r, a, n + 4);
          }, c.prototype._pad = function(e, t) {
            for (var r = e.length - t, n = t; n < e.length; n++) e[n] = r;
            return !0;
          }, c.prototype._unpad = function(e) {
            for (var t = e[e.length - 1], r = e.length - t; r < e.length; r++) n.equal(e[r], t);
            return e.slice(0, e.length - t);
          }, c.prototype._encrypt = function(e, t, r, n, i) {
            for (var s = t, a = r, c = 0; c < e.keys.length; c += 2) {
              var f = e.keys[c], u = e.keys[c + 1];
              o.expand(a, e.tmp, 0), f ^= e.tmp[0], u ^= e.tmp[1];
              var h = o.substitute(f, u), d = a;
              a = (s ^ o.permute(h)) >>> 0, s = d;
            }
            o.rip(a, s, n, i);
          }, c.prototype._decrypt = function(e, t, r, n, i) {
            for (var s = r, a = t, c = e.keys.length - 2; c >= 0; c -= 2) {
              var f = e.keys[c], u = e.keys[c + 1];
              o.expand(s, e.tmp, 0), f ^= e.tmp[0], u ^= e.tmp[1];
              var h = o.substitute(f, u), d = s;
              s = (a ^ o.permute(h)) >>> 0, a = d;
            }
            o.rip(s, a, n, i);
          };
        },
        651: (e, t, r) => {
          "use strict";
          var n = r(9746), i = r(5717), o = r(5756), s = r(327);
          function a(e, t) {
            n.equal(t.length, 24, "Invalid key length");
            var r = t.slice(0, 8), i = t.slice(8, 16), o = t.slice(16, 24);
            this.ciphers = "encrypt" === e ? [ s.create({
              type: "encrypt",
              key: r
            }), s.create({
              type: "decrypt",
              key: i
            }), s.create({
              type: "encrypt",
              key: o
            }) ] : [ s.create({
              type: "decrypt",
              key: o
            }), s.create({
              type: "encrypt",
              key: i
            }), s.create({
              type: "decrypt",
              key: r
            }) ];
          }
          function c(e) {
            o.call(this, e);
            var t = new a(this.type, this.options.key);
            this._edeState = t;
          }
          i(c, o), e.exports = c, c.create = function(e) {
            return new c(e);
          }, c.prototype._update = function(e, t, r, n) {
            var i = this._edeState;
            i.ciphers[0]._update(e, t, r, n), i.ciphers[1]._update(r, n, r, n), i.ciphers[2]._update(r, n, r, n);
          }, c.prototype._pad = s.prototype._pad, c.prototype._unpad = s.prototype._unpad;
        },
        1278: (e, t) => {
          "use strict";
          t.readUInt32BE = function(e, t) {
            return (e[0 + t] << 24 | e[1 + t] << 16 | e[2 + t] << 8 | e[3 + t]) >>> 0;
          }, t.writeUInt32BE = function(e, t, r) {
            e[0 + r] = t >>> 24, e[1 + r] = t >>> 16 & 255, e[2 + r] = t >>> 8 & 255, e[3 + r] = 255 & t;
          }, t.ip = function(e, t, r, n) {
            for (var i = 0, o = 0, s = 6; s >= 0; s -= 2) {
              for (var a = 0; a <= 24; a += 8) i <<= 1, i |= t >>> a + s & 1;
              for (a = 0; a <= 24; a += 8) i <<= 1, i |= e >>> a + s & 1;
            }
            for (s = 6; s >= 0; s -= 2) {
              for (a = 1; a <= 25; a += 8) o <<= 1, o |= t >>> a + s & 1;
              for (a = 1; a <= 25; a += 8) o <<= 1, o |= e >>> a + s & 1;
            }
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.rip = function(e, t, r, n) {
            for (var i = 0, o = 0, s = 0; s < 4; s++) for (var a = 24; a >= 0; a -= 8) i <<= 1, i |= t >>> a + s & 1, i <<= 1, i |= e >>> a + s & 1;
            for (s = 4; s < 8; s++) for (a = 24; a >= 0; a -= 8) o <<= 1, o |= t >>> a + s & 1, o <<= 1, o |= e >>> a + s & 1;
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.pc1 = function(e, t, r, n) {
            for (var i = 0, o = 0, s = 7; s >= 5; s--) {
              for (var a = 0; a <= 24; a += 8) i <<= 1, i |= t >> a + s & 1;
              for (a = 0; a <= 24; a += 8) i <<= 1, i |= e >> a + s & 1;
            }
            for (a = 0; a <= 24; a += 8) i <<= 1, i |= t >> a + s & 1;
            for (s = 1; s <= 3; s++) {
              for (a = 0; a <= 24; a += 8) o <<= 1, o |= t >> a + s & 1;
              for (a = 0; a <= 24; a += 8) o <<= 1, o |= e >> a + s & 1;
            }
            for (a = 0; a <= 24; a += 8) o <<= 1, o |= e >> a + s & 1;
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.r28shl = function(e, t) {
            return e << t & 268435455 | e >>> 28 - t;
          };
          var r = [ 14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24 ];
          t.pc2 = function(e, t, n, i) {
            for (var o = 0, s = 0, a = r.length >>> 1, c = 0; c < a; c++) o <<= 1, o |= e >>> r[c] & 1;
            for (c = a; c < r.length; c++) s <<= 1, s |= t >>> r[c] & 1;
            n[i + 0] = o >>> 0, n[i + 1] = s >>> 0;
          }, t.expand = function(e, t, r) {
            var n = 0, i = 0;
            n = (1 & e) << 5 | e >>> 27;
            for (var o = 23; o >= 15; o -= 4) n <<= 6, n |= e >>> o & 63;
            for (o = 11; o >= 3; o -= 4) i |= e >>> o & 63, i <<= 6;
            i |= (31 & e) << 1 | e >>> 31, t[r + 0] = n >>> 0, t[r + 1] = i >>> 0;
          };
          var n = [ 14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11 ];
          t.substitute = function(e, t) {
            for (var r = 0, i = 0; i < 4; i++) r <<= 4, r |= n[64 * i + (e >>> 18 - 6 * i & 63)];
            for (i = 0; i < 4; i++) r <<= 4, r |= n[256 + 64 * i + (t >>> 18 - 6 * i & 63)];
            return r >>> 0;
          };
          var i = [ 16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7 ];
          t.permute = function(e) {
            for (var t = 0, r = 0; r < i.length; r++) t <<= 1, t |= e >>> i[r] & 1;
            return t >>> 0;
          }, t.padSplit = function(e, t, r) {
            for (var n = e.toString(2); n.length < t; ) n = "0" + n;
            for (var i = [], o = 0; o < t; o += r) i.push(n.slice(o, o + r));
            return i.join(" ");
          };
        },
        2607: (e, t, r) => {
          var n = r(8764).Buffer, i = r(3590), o = r(9799), s = r(7426), a = {
            binary: !0,
            hex: !0,
            base64: !0
          };
          t.DiffieHellmanGroup = t.createDiffieHellmanGroup = t.getDiffieHellman = function(e) {
            var t = new n(o[e].prime, "hex"), r = new n(o[e].gen, "hex");
            return new s(t, r);
          }, t.createDiffieHellman = t.DiffieHellman = function e(t, r, o, c) {
            return n.isBuffer(r) || void 0 === a[r] ? e(t, "binary", r, o) : (r = r || "binary", c = c || "binary", o = o || new n([ 2 ]), 
            n.isBuffer(o) || (o = new n(o, c)), "number" == typeof t ? new s(i(t, o), o, !0) : (n.isBuffer(t) || (t = new n(t, r)), 
            new s(t, o, !0)));
          };
        },
        7426: (e, t, r) => {
          var n = r(8764).Buffer, i = r(3550), o = new (r(3047)), s = new i(24), a = new i(11), c = new i(10), f = new i(3), u = new i(7), h = r(3590), d = r(1798);
          function l(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this._pub = new i(e), this;
          }
          function p(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this._priv = new i(e), this;
          }
          e.exports = y;
          var b = {};
          function y(e, t, r) {
            this.setGenerator(t), this.__prime = new i(e), this._prime = i.mont(this.__prime), this._primeLen = e.length, this._pub = void 0, 
            this._priv = void 0, this._primeCode = void 0, r ? (this.setPublicKey = l, this.setPrivateKey = p) : this._primeCode = 8;
          }
          function g(e, t) {
            var r = new n(e.toArray());
            return t ? r.toString(t) : r;
          }
          Object.defineProperty(y.prototype, "verifyError", {
            enumerable: !0,
            get: function() {
              return "number" != typeof this._primeCode && (this._primeCode = function(e, t) {
                var r = t.toString("hex"), n = [ r, e.toString(16) ].join("_");
                if (n in b) return b[n];
                var i, d = 0;
                if (e.isEven() || !h.simpleSieve || !h.fermatTest(e) || !o.test(e)) return d += 1, d += "02" === r || "05" === r ? 8 : 4, 
                b[n] = d, d;
                switch (o.test(e.shrn(1)) || (d += 2), r) {
                 case "02":
                  e.mod(s).cmp(a) && (d += 8);
                  break;

                 case "05":
                  (i = e.mod(c)).cmp(f) && i.cmp(u) && (d += 8);
                  break;

                 default:
                  d += 4;
                }
                return b[n] = d, d;
              }(this.__prime, this.__gen)), this._primeCode;
            }
          }), y.prototype.generateKeys = function() {
            return this._priv || (this._priv = new i(d(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), 
            this.getPublicKey();
          }, y.prototype.computeSecret = function(e) {
            var t = (e = (e = new i(e)).toRed(this._prime)).redPow(this._priv).fromRed(), r = new n(t.toArray()), o = this.getPrime();
            if (r.length < o.length) {
              var s = new n(o.length - r.length);
              s.fill(0), r = n.concat([ s, r ]);
            }
            return r;
          }, y.prototype.getPublicKey = function(e) {
            return g(this._pub, e);
          }, y.prototype.getPrivateKey = function(e) {
            return g(this._priv, e);
          }, y.prototype.getPrime = function(e) {
            return g(this.__prime, e);
          }, y.prototype.getGenerator = function(e) {
            return g(this._gen, e);
          }, y.prototype.setGenerator = function(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this.__gen = e, this._gen = new i(e), this;
          };
        },
        3590: (e, t, r) => {
          var n = r(1798);
          e.exports = g, g.simpleSieve = b, g.fermatTest = y;
          var i = r(3550), o = new i(24), s = new (r(3047)), a = new i(1), c = new i(2), f = new i(5), u = (new i(16), new i(8), new i(10)), h = new i(3), d = (new i(7), 
          new i(11)), l = new i(4), p = (new i(12), null);
          function b(e) {
            for (var t = function() {
              if (null !== p) return p;
              var e = [];
              e[0] = 2;
              for (var t = 1, r = 3; r < 1048576; r += 2) {
                for (var n = Math.ceil(Math.sqrt(r)), i = 0; i < t && e[i] <= n && r % e[i] != 0; i++) ;
                t !== i && e[i] <= n || (e[t++] = r);
              }
              return p = e, e;
            }(), r = 0; r < t.length; r++) if (0 === e.modn(t[r])) return 0 === e.cmpn(t[r]);
            return !0;
          }
          function y(e) {
            var t = i.mont(e);
            return 0 === c.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1);
          }
          function g(e, t) {
            if (e < 16) return new i(2 === t || 5 === t ? [ 140, 123 ] : [ 140, 39 ]);
            var r, p;
            for (t = new i(t); ;) {
              for (r = new i(n(Math.ceil(e / 8))); r.bitLength() > e; ) r.ishrn(1);
              if (r.isEven() && r.iadd(a), r.testn(1) || r.iadd(c), t.cmp(c)) {
                if (!t.cmp(f)) for (;r.mod(u).cmp(h); ) r.iadd(l);
              } else for (;r.mod(o).cmp(d); ) r.iadd(l);
              if (b(p = r.shrn(1)) && b(r) && y(p) && y(r) && s.test(p) && s.test(r)) return r;
            }
          }
        },
        6266: (e, t, r) => {
          "use strict";
          var n = t;
          n.version = r(8597).i8, n.utils = r(953), n.rand = r(9931), n.curve = r(8254), n.curves = r(5427), n.ec = r(7954), n.eddsa = r(5980);
        },
        4918: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(953), o = i.getNAF, s = i.getJSF, a = i.assert;
          function c(e, t) {
            this.type = e, this.p = new n(t.p, 16), this.red = t.prime ? n.red(t.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), 
            this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = t.n && new n(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), 
            this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
            var r = this.n && this.p.div(this.n);
            !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
          }
          function f(e, t) {
            this.curve = e, this.type = t, this.precomputed = null;
          }
          e.exports = c, c.prototype.point = function() {
            throw new Error("Not implemented");
          }, c.prototype.validate = function() {
            throw new Error("Not implemented");
          }, c.prototype._fixedNafMul = function(e, t) {
            a(e.precomputed);
            var r = e._getDoubles(), n = o(t, 1, this._bitLength), i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
            i /= 3;
            var s, c, f = [];
            for (s = 0; s < n.length; s += r.step) {
              c = 0;
              for (var u = s + r.step - 1; u >= s; u--) c = (c << 1) + n[u];
              f.push(c);
            }
            for (var h = this.jpoint(null, null, null), d = this.jpoint(null, null, null), l = i; l > 0; l--) {
              for (s = 0; s < f.length; s++) (c = f[s]) === l ? d = d.mixedAdd(r.points[s]) : c === -l && (d = d.mixedAdd(r.points[s].neg()));
              h = h.add(d);
            }
            return h.toP();
          }, c.prototype._wnafMul = function(e, t) {
            var r = 4, n = e._getNAFPoints(r);
            r = n.wnd;
            for (var i = n.points, s = o(t, r, this._bitLength), c = this.jpoint(null, null, null), f = s.length - 1; f >= 0; f--) {
              for (var u = 0; f >= 0 && 0 === s[f]; f--) u++;
              if (f >= 0 && u++, c = c.dblp(u), f < 0) break;
              var h = s[f];
              a(0 !== h), c = "affine" === e.type ? h > 0 ? c.mixedAdd(i[h - 1 >> 1]) : c.mixedAdd(i[-h - 1 >> 1].neg()) : h > 0 ? c.add(i[h - 1 >> 1]) : c.add(i[-h - 1 >> 1].neg());
            }
            return "affine" === e.type ? c.toP() : c;
          }, c.prototype._wnafMulAdd = function(e, t, r, n, i) {
            var a, c, f, u = this._wnafT1, h = this._wnafT2, d = this._wnafT3, l = 0;
            for (a = 0; a < n; a++) {
              var p = (f = t[a])._getNAFPoints(e);
              u[a] = p.wnd, h[a] = p.points;
            }
            for (a = n - 1; a >= 1; a -= 2) {
              var b = a - 1, y = a;
              if (1 === u[b] && 1 === u[y]) {
                var g = [ t[b], null, null, t[y] ];
                0 === t[b].y.cmp(t[y].y) ? (g[1] = t[b].add(t[y]), g[2] = t[b].toJ().mixedAdd(t[y].neg())) : 0 === t[b].y.cmp(t[y].y.redNeg()) ? (g[1] = t[b].toJ().mixedAdd(t[y]), 
                g[2] = t[b].add(t[y].neg())) : (g[1] = t[b].toJ().mixedAdd(t[y]), g[2] = t[b].toJ().mixedAdd(t[y].neg()));
                var m = [ -3, -1, -5, -7, 0, 7, 5, 1, 3 ], v = s(r[b], r[y]);
                for (l = Math.max(v[0].length, l), d[b] = new Array(l), d[y] = new Array(l), c = 0; c < l; c++) {
                  var w = 0 | v[0][c], _ = 0 | v[1][c];
                  d[b][c] = m[3 * (w + 1) + (_ + 1)], d[y][c] = 0, h[b] = g;
                }
              } else d[b] = o(r[b], u[b], this._bitLength), d[y] = o(r[y], u[y], this._bitLength), l = Math.max(d[b].length, l), l = Math.max(d[y].length, l);
            }
            var S = this.jpoint(null, null, null), E = this._wnafT4;
            for (a = l; a >= 0; a--) {
              for (var A = 0; a >= 0; ) {
                var x = !0;
                for (c = 0; c < n; c++) E[c] = 0 | d[c][a], 0 !== E[c] && (x = !1);
                if (!x) break;
                A++, a--;
              }
              if (a >= 0 && A++, S = S.dblp(A), a < 0) break;
              for (c = 0; c < n; c++) {
                var k = E[c];
                0 !== k && (k > 0 ? f = h[c][k - 1 >> 1] : k < 0 && (f = h[c][-k - 1 >> 1].neg()), S = "affine" === f.type ? S.mixedAdd(f) : S.add(f));
              }
            }
            for (a = 0; a < n; a++) h[a] = null;
            return i ? S : S.toP();
          }, c.BasePoint = f, f.prototype.eq = function() {
            throw new Error("Not implemented");
          }, f.prototype.validate = function() {
            return this.curve.validate(this);
          }, c.prototype.decodePoint = function(e, t) {
            e = i.toArray(e, t);
            var r = this.p.byteLength();
            if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? a(e[e.length - 1] % 2 == 0) : 7 === e[0] && a(e[e.length - 1] % 2 == 1), 
            this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
            if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
            throw new Error("Unknown point format");
          }, f.prototype.encodeCompressed = function(e) {
            return this.encode(e, !0);
          }, f.prototype._encode = function(e) {
            var t = this.curve.p.byteLength(), r = this.getX().toArray("be", t);
            return e ? [ this.getY().isEven() ? 2 : 3 ].concat(r) : [ 4 ].concat(r, this.getY().toArray("be", t));
          }, f.prototype.encode = function(e, t) {
            return i.encode(this._encode(t), e);
          }, f.prototype.precompute = function(e) {
            if (this.precomputed) return this;
            var t = {
              doubles: null,
              naf: null,
              beta: null
            };
            return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, 
            this;
          }, f.prototype._hasDoubles = function(e) {
            if (!this.precomputed) return !1;
            var t = this.precomputed.doubles;
            return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
          }, f.prototype._getDoubles = function(e, t) {
            if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
            for (var r = [ this ], n = this, i = 0; i < t; i += e) {
              for (var o = 0; o < e; o++) n = n.dbl();
              r.push(n);
            }
            return {
              step: e,
              points: r
            };
          }, f.prototype._getNAFPoints = function(e) {
            if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
            for (var t = [ this ], r = (1 << e) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++) t[i] = t[i - 1].add(n);
            return {
              wnd: e,
              points: t
            };
          }, f.prototype._getBeta = function() {
            return null;
          }, f.prototype.dblp = function(e) {
            for (var t = this, r = 0; r < e; r++) t = t.dbl();
            return t;
          };
        },
        1138: (e, t, r) => {
          "use strict";
          var n = r(953), i = r(3550), o = r(5717), s = r(4918), a = n.assert;
          function c(e) {
            this.twisted = 1 != (0 | e.a), this.mOneA = this.twisted && -1 == (0 | e.a), this.extended = this.mOneA, s.call(this, "edwards", e), 
            this.a = new i(e.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new i(e.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), 
            this.d = new i(e.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), a(!this.twisted || 0 === this.c.fromRed().cmpn(1)), 
            this.oneC = 1 == (0 | e.c);
          }
          function f(e, t, r, n, o) {
            s.BasePoint.call(this, e, "projective"), null === t && null === r && null === n ? (this.x = this.curve.zero, this.y = this.curve.one, 
            this.z = this.curve.one, this.t = this.curve.zero, this.zOne = !0) : (this.x = new i(t, 16), this.y = new i(r, 16), this.z = n ? new i(n, 16) : this.curve.one, 
            this.t = o && new i(o, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), 
            this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), 
            this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
          }
          o(c, s), e.exports = c, c.prototype._mulA = function(e) {
            return this.mOneA ? e.redNeg() : this.a.redMul(e);
          }, c.prototype._mulC = function(e) {
            return this.oneC ? e : this.c.redMul(e);
          }, c.prototype.jpoint = function(e, t, r, n) {
            return this.point(e, t, r, n);
          }, c.prototype.pointFromX = function(e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr(), n = this.c2.redSub(this.a.redMul(r)), o = this.one.redSub(this.c2.redMul(this.d).redMul(r)), s = n.redMul(o.redInvm()), a = s.redSqrt();
            if (0 !== a.redSqr().redSub(s).cmp(this.zero)) throw new Error("invalid point");
            var c = a.fromRed().isOdd();
            return (t && !c || !t && c) && (a = a.redNeg()), this.point(e, a);
          }, c.prototype.pointFromY = function(e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr(), n = r.redSub(this.c2), o = r.redMul(this.d).redMul(this.c2).redSub(this.a), s = n.redMul(o.redInvm());
            if (0 === s.cmp(this.zero)) {
              if (t) throw new Error("invalid point");
              return this.point(this.zero, e);
            }
            var a = s.redSqrt();
            if (0 !== a.redSqr().redSub(s).cmp(this.zero)) throw new Error("invalid point");
            return a.fromRed().isOdd() !== t && (a = a.redNeg()), this.point(a, e);
          }, c.prototype.validate = function(e) {
            if (e.isInfinity()) return !0;
            e.normalize();
            var t = e.x.redSqr(), r = e.y.redSqr(), n = t.redMul(this.a).redAdd(r), i = this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));
            return 0 === n.cmp(i);
          }, o(f, s.BasePoint), c.prototype.pointFromJSON = function(e) {
            return f.fromJSON(this, e);
          }, c.prototype.point = function(e, t, r, n) {
            return new f(this, e, t, r, n);
          }, f.fromJSON = function(e, t) {
            return new f(e, t[0], t[1], t[2]);
          }, f.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
          }, f.prototype.isInfinity = function() {
            return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c));
          }, f.prototype._extDbl = function() {
            var e = this.x.redSqr(), t = this.y.redSqr(), r = this.z.redSqr();
            r = r.redIAdd(r);
            var n = this.curve._mulA(e), i = this.x.redAdd(this.y).redSqr().redISub(e).redISub(t), o = n.redAdd(t), s = o.redSub(r), a = n.redSub(t), c = i.redMul(s), f = o.redMul(a), u = i.redMul(a), h = s.redMul(o);
            return this.curve.point(c, f, h, u);
          }, f.prototype._projDbl = function() {
            var e, t, r, n, i, o, s = this.x.redAdd(this.y).redSqr(), a = this.x.redSqr(), c = this.y.redSqr();
            if (this.curve.twisted) {
              var f = (n = this.curve._mulA(a)).redAdd(c);
              this.zOne ? (e = s.redSub(a).redSub(c).redMul(f.redSub(this.curve.two)), t = f.redMul(n.redSub(c)), r = f.redSqr().redSub(f).redSub(f)) : (i = this.z.redSqr(), 
              o = f.redSub(i).redISub(i), e = s.redSub(a).redISub(c).redMul(o), t = f.redMul(n.redSub(c)), r = f.redMul(o));
            } else n = a.redAdd(c), i = this.curve._mulC(this.z).redSqr(), o = n.redSub(i).redSub(i), e = this.curve._mulC(s.redISub(n)).redMul(o), 
            t = this.curve._mulC(n).redMul(a.redISub(c)), r = n.redMul(o);
            return this.curve.point(e, t, r);
          }, f.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
          }, f.prototype._extAdd = function(e) {
            var t = this.y.redSub(this.x).redMul(e.y.redSub(e.x)), r = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)), n = this.t.redMul(this.curve.dd).redMul(e.t), i = this.z.redMul(e.z.redAdd(e.z)), o = r.redSub(t), s = i.redSub(n), a = i.redAdd(n), c = r.redAdd(t), f = o.redMul(s), u = a.redMul(c), h = o.redMul(c), d = s.redMul(a);
            return this.curve.point(f, u, d, h);
          }, f.prototype._projAdd = function(e) {
            var t, r, n = this.z.redMul(e.z), i = n.redSqr(), o = this.x.redMul(e.x), s = this.y.redMul(e.y), a = this.curve.d.redMul(o).redMul(s), c = i.redSub(a), f = i.redAdd(a), u = this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(s), h = n.redMul(c).redMul(u);
            return this.curve.twisted ? (t = n.redMul(f).redMul(s.redSub(this.curve._mulA(o))), r = c.redMul(f)) : (t = n.redMul(f).redMul(s.redSub(o)), 
            r = this.curve._mulC(c).redMul(f)), this.curve.point(h, t, r);
          }, f.prototype.add = function(e) {
            return this.isInfinity() ? e : e.isInfinity() ? this : this.curve.extended ? this._extAdd(e) : this._projAdd(e);
          }, f.prototype.mul = function(e) {
            return this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve._wnafMul(this, e);
          }, f.prototype.mulAdd = function(e, t, r) {
            return this.curve._wnafMulAdd(1, [ this, t ], [ e, r ], 2, !1);
          }, f.prototype.jmulAdd = function(e, t, r) {
            return this.curve._wnafMulAdd(1, [ this, t ], [ e, r ], 2, !0);
          }, f.prototype.normalize = function() {
            if (this.zOne) return this;
            var e = this.z.redInvm();
            return this.x = this.x.redMul(e), this.y = this.y.redMul(e), this.t && (this.t = this.t.redMul(e)), this.z = this.curve.one, 
            this.zOne = !0, this;
          }, f.prototype.neg = function() {
            return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
          }, f.prototype.getX = function() {
            return this.normalize(), this.x.fromRed();
          }, f.prototype.getY = function() {
            return this.normalize(), this.y.fromRed();
          }, f.prototype.eq = function(e) {
            return this === e || 0 === this.getX().cmp(e.getX()) && 0 === this.getY().cmp(e.getY());
          }, f.prototype.eqXToP = function(e) {
            var t = e.toRed(this.curve.red).redMul(this.z);
            if (0 === this.x.cmp(t)) return !0;
            for (var r = e.clone(), n = this.curve.redN.redMul(this.z); ;) {
              if (r.iadd(this.curve.n), r.cmp(this.curve.p) >= 0) return !1;
              if (t.redIAdd(n), 0 === this.x.cmp(t)) return !0;
            }
          }, f.prototype.toP = f.prototype.normalize, f.prototype.mixedAdd = f.prototype.add;
        },
        8254: (e, t, r) => {
          "use strict";
          var n = t;
          n.base = r(4918), n.short = r(6673), n.mont = r(2881), n.edwards = r(1138);
        },
        2881: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(5717), o = r(4918), s = r(953);
          function a(e) {
            o.call(this, "mont", e), this.a = new n(e.a, 16).toRed(this.red), this.b = new n(e.b, 16).toRed(this.red), this.i4 = new n(4).toRed(this.red).redInvm(), 
            this.two = new n(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
          }
          function c(e, t, r) {
            o.BasePoint.call(this, e, "projective"), null === t && null === r ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new n(t, 16), 
            this.z = new n(r, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
          }
          i(a, o), e.exports = a, a.prototype.validate = function(e) {
            var t = e.normalize().x, r = t.redSqr(), n = r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);
            return 0 === n.redSqrt().redSqr().cmp(n);
          }, i(c, o.BasePoint), a.prototype.decodePoint = function(e, t) {
            return this.point(s.toArray(e, t), 1);
          }, a.prototype.point = function(e, t) {
            return new c(this, e, t);
          }, a.prototype.pointFromJSON = function(e) {
            return c.fromJSON(this, e);
          }, c.prototype.precompute = function() {}, c.prototype._encode = function() {
            return this.getX().toArray("be", this.curve.p.byteLength());
          }, c.fromJSON = function(e, t) {
            return new c(e, t[0], t[1] || e.one);
          }, c.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
          }, c.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0);
          }, c.prototype.dbl = function() {
            var e = this.x.redAdd(this.z).redSqr(), t = this.x.redSub(this.z).redSqr(), r = e.redSub(t), n = e.redMul(t), i = r.redMul(t.redAdd(this.curve.a24.redMul(r)));
            return this.curve.point(n, i);
          }, c.prototype.add = function() {
            throw new Error("Not supported on Montgomery curve");
          }, c.prototype.diffAdd = function(e, t) {
            var r = this.x.redAdd(this.z), n = this.x.redSub(this.z), i = e.x.redAdd(e.z), o = e.x.redSub(e.z).redMul(r), s = i.redMul(n), a = t.z.redMul(o.redAdd(s).redSqr()), c = t.x.redMul(o.redISub(s).redSqr());
            return this.curve.point(a, c);
          }, c.prototype.mul = function(e) {
            for (var t = e.clone(), r = this, n = this.curve.point(null, null), i = []; 0 !== t.cmpn(0); t.iushrn(1)) i.push(t.andln(1));
            for (var o = i.length - 1; o >= 0; o--) 0 === i[o] ? (r = r.diffAdd(n, this), n = n.dbl()) : (n = r.diffAdd(n, this), r = r.dbl());
            return n;
          }, c.prototype.mulAdd = function() {
            throw new Error("Not supported on Montgomery curve");
          }, c.prototype.jumlAdd = function() {
            throw new Error("Not supported on Montgomery curve");
          }, c.prototype.eq = function(e) {
            return 0 === this.getX().cmp(e.getX());
          }, c.prototype.normalize = function() {
            return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
          }, c.prototype.getX = function() {
            return this.normalize(), this.x.fromRed();
          };
        },
        6673: (e, t, r) => {
          "use strict";
          var n = r(953), i = r(3550), o = r(5717), s = r(4918), a = n.assert;
          function c(e) {
            s.call(this, "short", e), this.a = new i(e.a, 16).toRed(this.red), this.b = new i(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), 
            this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), 
            this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
          }
          function f(e, t, r, n) {
            s.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new i(t, 16), 
            this.y = new i(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
            this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
          }
          function u(e, t, r, n) {
            s.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, 
            this.z = new i(0)) : (this.x = new i(t, 16), this.y = new i(r, 16), this.z = new i(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
            this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
          }
          o(c, s), e.exports = c, c.prototype._getEndomorphism = function(e) {
            if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
              var t, r;
              if (e.beta) t = new i(e.beta, 16).toRed(this.red); else {
                var n = this._getEndoRoots(this.p);
                t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
              }
              if (e.lambda) r = new i(e.lambda, 16); else {
                var o = this._getEndoRoots(this.n);
                0 === this.g.mul(o[0]).x.cmp(this.g.x.redMul(t)) ? r = o[0] : (r = o[1], a(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));
              }
              return {
                beta: t,
                lambda: r,
                basis: e.basis ? e.basis.map((function(e) {
                  return {
                    a: new i(e.a, 16),
                    b: new i(e.b, 16)
                  };
                })) : this._getEndoBasis(r)
              };
            }
          }, c.prototype._getEndoRoots = function(e) {
            var t = e === this.p ? this.red : i.mont(e), r = new i(2).toRed(t).redInvm(), n = r.redNeg(), o = new i(3).toRed(t).redNeg().redSqrt().redMul(r);
            return [ n.redAdd(o).fromRed(), n.redSub(o).fromRed() ];
          }, c.prototype._getEndoBasis = function(e) {
            for (var t, r, n, o, s, a, c, f, u, h = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), d = e, l = this.n.clone(), p = new i(1), b = new i(0), y = new i(0), g = new i(1), m = 0; 0 !== d.cmpn(0); ) {
              var v = l.div(d);
              f = l.sub(v.mul(d)), u = y.sub(v.mul(p));
              var w = g.sub(v.mul(b));
              if (!n && f.cmp(h) < 0) t = c.neg(), r = p, n = f.neg(), o = u; else if (n && 2 == ++m) break;
              c = f, l = d, d = f, y = p, p = u, g = b, b = w;
            }
            s = f.neg(), a = u;
            var _ = n.sqr().add(o.sqr());
            return s.sqr().add(a.sqr()).cmp(_) >= 0 && (s = t, a = r), n.negative && (n = n.neg(), o = o.neg()), s.negative && (s = s.neg(), 
            a = a.neg()), [ {
              a: n,
              b: o
            }, {
              a: s,
              b: a
            } ];
          }, c.prototype._endoSplit = function(e) {
            var t = this.endo.basis, r = t[0], n = t[1], i = n.b.mul(e).divRound(this.n), o = r.b.neg().mul(e).divRound(this.n), s = i.mul(r.a), a = o.mul(n.a), c = i.mul(r.b), f = o.mul(n.b);
            return {
              k1: e.sub(s).sub(a),
              k2: c.add(f).neg()
            };
          }, c.prototype.pointFromX = function(e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), n = r.redSqrt();
            if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
            var o = n.fromRed().isOdd();
            return (t && !o || !t && o) && (n = n.redNeg()), this.point(e, n);
          }, c.prototype.validate = function(e) {
            if (e.inf) return !0;
            var t = e.x, r = e.y, n = this.a.redMul(t), i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);
            return 0 === r.redSqr().redISub(i).cmpn(0);
          }, c.prototype._endoWnafMulAdd = function(e, t, r) {
            for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++) {
              var s = this._endoSplit(t[o]), a = e[o], c = a._getBeta();
              s.k1.negative && (s.k1.ineg(), a = a.neg(!0)), s.k2.negative && (s.k2.ineg(), c = c.neg(!0)), n[2 * o] = a, n[2 * o + 1] = c, 
              i[2 * o] = s.k1, i[2 * o + 1] = s.k2;
            }
            for (var f = this._wnafMulAdd(1, n, i, 2 * o, r), u = 0; u < 2 * o; u++) n[u] = null, i[u] = null;
            return f;
          }, o(f, s.BasePoint), c.prototype.point = function(e, t, r) {
            return new f(this, e, t, r);
          }, c.prototype.pointFromJSON = function(e, t) {
            return f.fromJSON(this, e, t);
          }, f.prototype._getBeta = function() {
            if (this.curve.endo) {
              var e = this.precomputed;
              if (e && e.beta) return e.beta;
              var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
              if (e) {
                var r = this.curve, n = function(e) {
                  return r.point(e.x.redMul(r.endo.beta), e.y);
                };
                e.beta = t, t.precomputed = {
                  beta: null,
                  naf: e.naf && {
                    wnd: e.naf.wnd,
                    points: e.naf.points.map(n)
                  },
                  doubles: e.doubles && {
                    step: e.doubles.step,
                    points: e.doubles.points.map(n)
                  }
                };
              }
              return t;
            }
          }, f.prototype.toJSON = function() {
            return this.precomputed ? [ this.x, this.y, this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
              }
            } ] : [ this.x, this.y ];
          }, f.fromJSON = function(e, t, r) {
            "string" == typeof t && (t = JSON.parse(t));
            var n = e.point(t[0], t[1], r);
            if (!t[2]) return n;
            function i(t) {
              return e.point(t[0], t[1], r);
            }
            var o = t[2];
            return n.precomputed = {
              beta: null,
              doubles: o.doubles && {
                step: o.doubles.step,
                points: [ n ].concat(o.doubles.points.map(i))
              },
              naf: o.naf && {
                wnd: o.naf.wnd,
                points: [ n ].concat(o.naf.points.map(i))
              }
            }, n;
          }, f.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
          }, f.prototype.isInfinity = function() {
            return this.inf;
          }, f.prototype.add = function(e) {
            if (this.inf) return e;
            if (e.inf) return this;
            if (this.eq(e)) return this.dbl();
            if (this.neg().eq(e)) return this.curve.point(null, null);
            if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
            var t = this.y.redSub(e.y);
            0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
            var r = t.redSqr().redISub(this.x).redISub(e.x), n = t.redMul(this.x.redSub(r)).redISub(this.y);
            return this.curve.point(r, n);
          }, f.prototype.dbl = function() {
            if (this.inf) return this;
            var e = this.y.redAdd(this.y);
            if (0 === e.cmpn(0)) return this.curve.point(null, null);
            var t = this.curve.a, r = this.x.redSqr(), n = e.redInvm(), i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n), o = i.redSqr().redISub(this.x.redAdd(this.x)), s = i.redMul(this.x.redSub(o)).redISub(this.y);
            return this.curve.point(o, s);
          }, f.prototype.getX = function() {
            return this.x.fromRed();
          }, f.prototype.getY = function() {
            return this.y.fromRed();
          }, f.prototype.mul = function(e) {
            return e = new i(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([ this ], [ e ]) : this.curve._wnafMul(this, e);
          }, f.prototype.mulAdd = function(e, t, r) {
            var n = [ this, t ], i = [ e, r ];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
          }, f.prototype.jmulAdd = function(e, t, r) {
            var n = [ this, t ], i = [ e, r ];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
          }, f.prototype.eq = function(e) {
            return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
          }, f.prototype.neg = function(e) {
            if (this.inf) return this;
            var t = this.curve.point(this.x, this.y.redNeg());
            if (e && this.precomputed) {
              var r = this.precomputed, n = function(e) {
                return e.neg();
              };
              t.precomputed = {
                naf: r.naf && {
                  wnd: r.naf.wnd,
                  points: r.naf.points.map(n)
                },
                doubles: r.doubles && {
                  step: r.doubles.step,
                  points: r.doubles.points.map(n)
                }
              };
            }
            return t;
          }, f.prototype.toJ = function() {
            return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
          }, o(u, s.BasePoint), c.prototype.jpoint = function(e, t, r) {
            return new u(this, e, t, r);
          }, u.prototype.toP = function() {
            if (this.isInfinity()) return this.curve.point(null, null);
            var e = this.z.redInvm(), t = e.redSqr(), r = this.x.redMul(t), n = this.y.redMul(t).redMul(e);
            return this.curve.point(r, n);
          }, u.prototype.neg = function() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          }, u.prototype.add = function(e) {
            if (this.isInfinity()) return e;
            if (e.isInfinity()) return this;
            var t = e.z.redSqr(), r = this.z.redSqr(), n = this.x.redMul(t), i = e.x.redMul(r), o = this.y.redMul(t.redMul(e.z)), s = e.y.redMul(r.redMul(this.z)), a = n.redSub(i), c = o.redSub(s);
            if (0 === a.cmpn(0)) return 0 !== c.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var f = a.redSqr(), u = f.redMul(a), h = n.redMul(f), d = c.redSqr().redIAdd(u).redISub(h).redISub(h), l = c.redMul(h.redISub(d)).redISub(o.redMul(u)), p = this.z.redMul(e.z).redMul(a);
            return this.curve.jpoint(d, l, p);
          }, u.prototype.mixedAdd = function(e) {
            if (this.isInfinity()) return e.toJ();
            if (e.isInfinity()) return this;
            var t = this.z.redSqr(), r = this.x, n = e.x.redMul(t), i = this.y, o = e.y.redMul(t).redMul(this.z), s = r.redSub(n), a = i.redSub(o);
            if (0 === s.cmpn(0)) return 0 !== a.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var c = s.redSqr(), f = c.redMul(s), u = r.redMul(c), h = a.redSqr().redIAdd(f).redISub(u).redISub(u), d = a.redMul(u.redISub(h)).redISub(i.redMul(f)), l = this.z.redMul(s);
            return this.curve.jpoint(h, d, l);
          }, u.prototype.dblp = function(e) {
            if (0 === e) return this;
            if (this.isInfinity()) return this;
            if (!e) return this.dbl();
            var t;
            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;
              for (t = 0; t < e; t++) r = r.dbl();
              return r;
            }
            var n = this.curve.a, i = this.curve.tinv, o = this.x, s = this.y, a = this.z, c = a.redSqr().redSqr(), f = s.redAdd(s);
            for (t = 0; t < e; t++) {
              var u = o.redSqr(), h = f.redSqr(), d = h.redSqr(), l = u.redAdd(u).redIAdd(u).redIAdd(n.redMul(c)), p = o.redMul(h), b = l.redSqr().redISub(p.redAdd(p)), y = p.redISub(b), g = l.redMul(y);
              g = g.redIAdd(g).redISub(d);
              var m = f.redMul(a);
              t + 1 < e && (c = c.redMul(d)), o = b, a = m, f = g;
            }
            return this.curve.jpoint(o, f.redMul(i), a);
          }, u.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
          }, u.prototype._zeroDbl = function() {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              s = s.redIAdd(s);
              var a = n.redAdd(n).redIAdd(n), c = a.redSqr().redISub(s).redISub(s), f = o.redIAdd(o);
              f = (f = f.redIAdd(f)).redIAdd(f), e = c, t = a.redMul(s.redISub(c)).redISub(f), r = this.y.redAdd(this.y);
            } else {
              var u = this.x.redSqr(), h = this.y.redSqr(), d = h.redSqr(), l = this.x.redAdd(h).redSqr().redISub(u).redISub(d);
              l = l.redIAdd(l);
              var p = u.redAdd(u).redIAdd(u), b = p.redSqr(), y = d.redIAdd(d);
              y = (y = y.redIAdd(y)).redIAdd(y), e = b.redISub(l).redISub(l), t = p.redMul(l.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);
            }
            return this.curve.jpoint(e, t, r);
          }, u.prototype._threeDbl = function() {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              s = s.redIAdd(s);
              var a = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), c = a.redSqr().redISub(s).redISub(s);
              e = c;
              var f = o.redIAdd(o);
              f = (f = f.redIAdd(f)).redIAdd(f), t = a.redMul(s.redISub(c)).redISub(f), r = this.y.redAdd(this.y);
            } else {
              var u = this.z.redSqr(), h = this.y.redSqr(), d = this.x.redMul(h), l = this.x.redSub(u).redMul(this.x.redAdd(u));
              l = l.redAdd(l).redIAdd(l);
              var p = d.redIAdd(d), b = (p = p.redIAdd(p)).redAdd(p);
              e = l.redSqr().redISub(b), r = this.y.redAdd(this.z).redSqr().redISub(h).redISub(u);
              var y = h.redSqr();
              y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = l.redMul(p.redISub(e)).redISub(y);
            }
            return this.curve.jpoint(e, t, r);
          }, u.prototype._dbl = function() {
            var e = this.curve.a, t = this.x, r = this.y, n = this.z, i = n.redSqr().redSqr(), o = t.redSqr(), s = r.redSqr(), a = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)), c = t.redAdd(t), f = (c = c.redIAdd(c)).redMul(s), u = a.redSqr().redISub(f.redAdd(f)), h = f.redISub(u), d = s.redSqr();
            d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
            var l = a.redMul(h).redISub(d), p = r.redAdd(r).redMul(n);
            return this.curve.jpoint(u, l, p);
          }, u.prototype.trpl = function() {
            if (!this.curve.zeroA) return this.dbl().add(this);
            var e = this.x.redSqr(), t = this.y.redSqr(), r = this.z.redSqr(), n = t.redSqr(), i = e.redAdd(e).redIAdd(e), o = i.redSqr(), s = this.x.redAdd(t).redSqr().redISub(e).redISub(n), a = (s = (s = (s = s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(), c = n.redIAdd(n);
            c = (c = (c = c.redIAdd(c)).redIAdd(c)).redIAdd(c);
            var f = i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(c), u = t.redMul(f);
            u = (u = u.redIAdd(u)).redIAdd(u);
            var h = this.x.redMul(a).redISub(u);
            h = (h = h.redIAdd(h)).redIAdd(h);
            var d = this.y.redMul(f.redMul(c.redISub(f)).redISub(s.redMul(a)));
            d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
            var l = this.z.redAdd(s).redSqr().redISub(r).redISub(a);
            return this.curve.jpoint(h, d, l);
          }, u.prototype.mul = function(e, t) {
            return e = new i(e, t), this.curve._wnafMul(this, e);
          }, u.prototype.eq = function(e) {
            if ("affine" === e.type) return this.eq(e.toJ());
            if (this === e) return !0;
            var t = this.z.redSqr(), r = e.z.redSqr();
            if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
            var n = t.redMul(this.z), i = r.redMul(e.z);
            return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);
          }, u.prototype.eqXToP = function(e) {
            var t = this.z.redSqr(), r = e.toRed(this.curve.red).redMul(t);
            if (0 === this.x.cmp(r)) return !0;
            for (var n = e.clone(), i = this.curve.redN.redMul(t); ;) {
              if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
              if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
            }
          }, u.prototype.inspect = function() {
            return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
          }, u.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0);
          };
        },
        5427: (e, t, r) => {
          "use strict";
          var n, i = t, o = r(3715), s = r(8254), a = r(953).assert;
          function c(e) {
            "short" === e.type ? this.curve = new s.short(e) : "edwards" === e.type ? this.curve = new s.edwards(e) : this.curve = new s.mont(e), 
            this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, a(this.g.validate(), "Invalid curve"), a(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
          }
          function f(e, t) {
            Object.defineProperty(i, e, {
              configurable: !0,
              enumerable: !0,
              get: function() {
                var r = new c(t);
                return Object.defineProperty(i, e, {
                  configurable: !0,
                  enumerable: !0,
                  value: r
                }), r;
              }
            });
          }
          i.PresetCurve = c, f("p192", {
            type: "short",
            prime: "p192",
            p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
            a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
            b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
            n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
            hash: o.sha256,
            gRed: !1,
            g: [ "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811" ]
          }), f("p224", {
            type: "short",
            prime: "p224",
            p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
            a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
            b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
            n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
            hash: o.sha256,
            gRed: !1,
            g: [ "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34" ]
          }), f("p256", {
            type: "short",
            prime: null,
            p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
            a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
            b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
            n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
            hash: o.sha256,
            gRed: !1,
            g: [ "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5" ]
          }), f("p384", {
            type: "short",
            prime: null,
            p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
            a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
            b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
            n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
            hash: o.sha384,
            gRed: !1,
            g: [ "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f" ]
          }), f("p521", {
            type: "short",
            prime: null,
            p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
            a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
            b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
            n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
            hash: o.sha512,
            gRed: !1,
            g: [ "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650" ]
          }), f("curve25519", {
            type: "mont",
            prime: "p25519",
            p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
            a: "76d06",
            b: "1",
            n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
            hash: o.sha256,
            gRed: !1,
            g: [ "9" ]
          }), f("ed25519", {
            type: "edwards",
            prime: "p25519",
            p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
            a: "-1",
            c: "1",
            d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
            n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
            hash: o.sha256,
            gRed: !1,
            g: [ "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658" ]
          });
          try {
            n = r(1037);
          } catch (e) {
            n = void 0;
          }
          f("secp256k1", {
            type: "short",
            prime: "k256",
            p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
            a: "0",
            b: "7",
            n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
            h: "1",
            hash: o.sha256,
            beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
            lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
            basis: [ {
              a: "3086d221a7d46bcde86c90e49284eb15",
              b: "-e4437ed6010e88286f547fa90abfe4c3"
            }, {
              a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
              b: "3086d221a7d46bcde86c90e49284eb15"
            } ],
            gRed: !1,
            g: [ "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", n ]
          });
        },
        7954: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(2156), o = r(953), s = r(5427), a = r(9931), c = o.assert, f = r(1251), u = r(611);
          function h(e) {
            if (!(this instanceof h)) return new h(e);
            "string" == typeof e && (c(Object.prototype.hasOwnProperty.call(s, e), "Unknown curve " + e), e = s[e]), e instanceof s.PresetCurve && (e = {
              curve: e
            }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, 
            this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
          }
          e.exports = h, h.prototype.keyPair = function(e) {
            return new f(this, e);
          }, h.prototype.keyFromPrivate = function(e, t) {
            return f.fromPrivate(this, e, t);
          }, h.prototype.keyFromPublic = function(e, t) {
            return f.fromPublic(this, e, t);
          }, h.prototype.genKeyPair = function(e) {
            e || (e = {});
            for (var t = new i({
              hash: this.hash,
              pers: e.pers,
              persEnc: e.persEnc || "utf8",
              entropy: e.entropy || a(this.hash.hmacStrength),
              entropyEnc: e.entropy && e.entropyEnc || "utf8",
              nonce: this.n.toArray()
            }), r = this.n.byteLength(), o = this.n.sub(new n(2)); ;) {
              var s = new n(t.generate(r));
              if (!(s.cmp(o) > 0)) return s.iaddn(1), this.keyFromPrivate(s);
            }
          }, h.prototype._truncateToN = function(e, t) {
            var r = 8 * e.byteLength() - this.n.bitLength();
            return r > 0 && (e = e.ushrn(r)), !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
          }, h.prototype.sign = function(e, t, r, o) {
            "object" == typeof r && (o = r, r = null), o || (o = {}), t = this.keyFromPrivate(t, r), e = this._truncateToN(new n(e, 16));
            for (var s = this.n.byteLength(), a = t.getPrivate().toArray("be", s), c = e.toArray("be", s), f = new i({
              hash: this.hash,
              entropy: a,
              nonce: c,
              pers: o.pers,
              persEnc: o.persEnc || "utf8"
            }), h = this.n.sub(new n(1)), d = 0; ;d++) {
              var l = o.k ? o.k(d) : new n(f.generate(this.n.byteLength()));
              if (!((l = this._truncateToN(l, !0)).cmpn(1) <= 0 || l.cmp(h) >= 0)) {
                var p = this.g.mul(l);
                if (!p.isInfinity()) {
                  var b = p.getX(), y = b.umod(this.n);
                  if (0 !== y.cmpn(0)) {
                    var g = l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e));
                    if (0 !== (g = g.umod(this.n)).cmpn(0)) {
                      var m = (p.getY().isOdd() ? 1 : 0) | (0 !== b.cmp(y) ? 2 : 0);
                      return o.canonical && g.cmp(this.nh) > 0 && (g = this.n.sub(g), m ^= 1), new u({
                        r: y,
                        s: g,
                        recoveryParam: m
                      });
                    }
                  }
                }
              }
            }
          }, h.prototype.verify = function(e, t, r, i) {
            e = this._truncateToN(new n(e, 16)), r = this.keyFromPublic(r, i);
            var o = (t = new u(t, "hex")).r, s = t.s;
            if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
            if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return !1;
            var a, c = s.invm(this.n), f = c.mul(e).umod(this.n), h = c.mul(o).umod(this.n);
            return this.curve._maxwellTrick ? !(a = this.g.jmulAdd(f, r.getPublic(), h)).isInfinity() && a.eqXToP(o) : !(a = this.g.mulAdd(f, r.getPublic(), h)).isInfinity() && 0 === a.getX().umod(this.n).cmp(o);
          }, h.prototype.recoverPubKey = function(e, t, r, i) {
            c((3 & r) === r, "The recovery param is more than two bits"), t = new u(t, i);
            var o = this.n, s = new n(e), a = t.r, f = t.s, h = 1 & r, d = r >> 1;
            if (a.cmp(this.curve.p.umod(this.curve.n)) >= 0 && d) throw new Error("Unable to find sencond key candinate");
            a = d ? this.curve.pointFromX(a.add(this.curve.n), h) : this.curve.pointFromX(a, h);
            var l = t.r.invm(o), p = o.sub(s).mul(l).umod(o), b = f.mul(l).umod(o);
            return this.g.mulAdd(p, a, b);
          }, h.prototype.getKeyRecoveryParam = function(e, t, r, n) {
            if (null !== (t = new u(t, n)).recoveryParam) return t.recoveryParam;
            for (var i = 0; i < 4; i++) {
              var o;
              try {
                o = this.recoverPubKey(e, t, i);
              } catch (e) {
                continue;
              }
              if (o.eq(r)) return i;
            }
            throw new Error("Unable to find valid recovery factor");
          };
        },
        1251: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(953).assert;
          function o(e, t) {
            this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
          }
          e.exports = o, o.fromPublic = function(e, t, r) {
            return t instanceof o ? t : new o(e, {
              pub: t,
              pubEnc: r
            });
          }, o.fromPrivate = function(e, t, r) {
            return t instanceof o ? t : new o(e, {
              priv: t,
              privEnc: r
            });
          }, o.prototype.validate = function() {
            var e = this.getPublic();
            return e.isInfinity() ? {
              result: !1,
              reason: "Invalid public key"
            } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
              result: !0,
              reason: null
            } : {
              result: !1,
              reason: "Public key * N != O"
            } : {
              result: !1,
              reason: "Public key is not a point"
            };
          }, o.prototype.getPublic = function(e, t) {
            return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
          }, o.prototype.getPrivate = function(e) {
            return "hex" === e ? this.priv.toString(16, 2) : this.priv;
          }, o.prototype._importPrivate = function(e, t) {
            this.priv = new n(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
          }, o.prototype._importPublic = function(e, t) {
            if (e.x || e.y) return "mont" === this.ec.curve.type ? i(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || i(e.x && e.y, "Need both x and y coordinate"), 
            void (this.pub = this.ec.curve.point(e.x, e.y));
            this.pub = this.ec.curve.decodePoint(e, t);
          }, o.prototype.derive = function(e) {
            return e.validate() || i(e.validate(), "public point not validated"), e.mul(this.priv).getX();
          }, o.prototype.sign = function(e, t, r) {
            return this.ec.sign(e, this, t, r);
          }, o.prototype.verify = function(e, t) {
            return this.ec.verify(e, t, this);
          }, o.prototype.inspect = function() {
            return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
          };
        },
        611: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(953), o = i.assert;
          function s(e, t) {
            if (e instanceof s) return e;
            this._importDER(e, t) || (o(e.r && e.s, "Signature without r or s"), this.r = new n(e.r, 16), this.s = new n(e.s, 16), void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
          }
          function a() {
            this.place = 0;
          }
          function c(e, t) {
            var r = e[t.place++];
            if (!(128 & r)) return r;
            var n = 15 & r;
            if (0 === n || n > 4) return !1;
            for (var i = 0, o = 0, s = t.place; o < n; o++, s++) i <<= 8, i |= e[s], i >>>= 0;
            return !(i <= 127) && (t.place = s, i);
          }
          function f(e) {
            for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r; ) t++;
            return 0 === t ? e : e.slice(t);
          }
          function u(e, t) {
            if (t < 128) e.push(t); else {
              var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
              for (e.push(128 | r); --r; ) e.push(t >>> (r << 3) & 255);
              e.push(t);
            }
          }
          e.exports = s, s.prototype._importDER = function(e, t) {
            e = i.toArray(e, t);
            var r = new a;
            if (48 !== e[r.place++]) return !1;
            var o = c(e, r);
            if (!1 === o) return !1;
            if (o + r.place !== e.length) return !1;
            if (2 !== e[r.place++]) return !1;
            var s = c(e, r);
            if (!1 === s) return !1;
            var f = e.slice(r.place, s + r.place);
            if (r.place += s, 2 !== e[r.place++]) return !1;
            var u = c(e, r);
            if (!1 === u) return !1;
            if (e.length !== u + r.place) return !1;
            var h = e.slice(r.place, u + r.place);
            if (0 === f[0]) {
              if (!(128 & f[1])) return !1;
              f = f.slice(1);
            }
            if (0 === h[0]) {
              if (!(128 & h[1])) return !1;
              h = h.slice(1);
            }
            return this.r = new n(f), this.s = new n(h), this.recoveryParam = null, !0;
          }, s.prototype.toDER = function(e) {
            var t = this.r.toArray(), r = this.s.toArray();
            for (128 & t[0] && (t = [ 0 ].concat(t)), 128 & r[0] && (r = [ 0 ].concat(r)), t = f(t), r = f(r); !(r[0] || 128 & r[1]); ) r = r.slice(1);
            var n = [ 2 ];
            u(n, t.length), (n = n.concat(t)).push(2), u(n, r.length);
            var o = n.concat(r), s = [ 48 ];
            return u(s, o.length), s = s.concat(o), i.encode(s, e);
          };
        },
        5980: (e, t, r) => {
          "use strict";
          var n = r(3715), i = r(5427), o = r(953), s = o.assert, a = o.parseBytes, c = r(9087), f = r(3622);
          function u(e) {
            if (s("ed25519" === e, "only tested with ed25519 so far"), !(this instanceof u)) return new u(e);
            e = i[e].curve, this.curve = e, this.g = e.g, this.g.precompute(e.n.bitLength() + 1), this.pointClass = e.point().constructor, 
            this.encodingLength = Math.ceil(e.n.bitLength() / 8), this.hash = n.sha512;
          }
          e.exports = u, u.prototype.sign = function(e, t) {
            e = a(e);
            var r = this.keyFromSecret(t), n = this.hashInt(r.messagePrefix(), e), i = this.g.mul(n), o = this.encodePoint(i), s = this.hashInt(o, r.pubBytes(), e).mul(r.priv()), c = n.add(s).umod(this.curve.n);
            return this.makeSignature({
              R: i,
              S: c,
              Rencoded: o
            });
          }, u.prototype.verify = function(e, t, r) {
            e = a(e), t = this.makeSignature(t);
            var n = this.keyFromPublic(r), i = this.hashInt(t.Rencoded(), n.pubBytes(), e), o = this.g.mul(t.S());
            return t.R().add(n.pub().mul(i)).eq(o);
          }, u.prototype.hashInt = function() {
            for (var e = this.hash(), t = 0; t < arguments.length; t++) e.update(arguments[t]);
            return o.intFromLE(e.digest()).umod(this.curve.n);
          }, u.prototype.keyFromPublic = function(e) {
            return c.fromPublic(this, e);
          }, u.prototype.keyFromSecret = function(e) {
            return c.fromSecret(this, e);
          }, u.prototype.makeSignature = function(e) {
            return e instanceof f ? e : new f(this, e);
          }, u.prototype.encodePoint = function(e) {
            var t = e.getY().toArray("le", this.encodingLength);
            return t[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0, t;
          }, u.prototype.decodePoint = function(e) {
            var t = (e = o.parseBytes(e)).length - 1, r = e.slice(0, t).concat(-129 & e[t]), n = 0 != (128 & e[t]), i = o.intFromLE(r);
            return this.curve.pointFromY(i, n);
          }, u.prototype.encodeInt = function(e) {
            return e.toArray("le", this.encodingLength);
          }, u.prototype.decodeInt = function(e) {
            return o.intFromLE(e);
          }, u.prototype.isPoint = function(e) {
            return e instanceof this.pointClass;
          };
        },
        9087: (e, t, r) => {
          "use strict";
          var n = r(953), i = n.assert, o = n.parseBytes, s = n.cachedProperty;
          function a(e, t) {
            this.eddsa = e, this._secret = o(t.secret), e.isPoint(t.pub) ? this._pub = t.pub : this._pubBytes = o(t.pub);
          }
          a.fromPublic = function(e, t) {
            return t instanceof a ? t : new a(e, {
              pub: t
            });
          }, a.fromSecret = function(e, t) {
            return t instanceof a ? t : new a(e, {
              secret: t
            });
          }, a.prototype.secret = function() {
            return this._secret;
          }, s(a, "pubBytes", (function() {
            return this.eddsa.encodePoint(this.pub());
          })), s(a, "pub", (function() {
            return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
          })), s(a, "privBytes", (function() {
            var e = this.eddsa, t = this.hash(), r = e.encodingLength - 1, n = t.slice(0, e.encodingLength);
            return n[0] &= 248, n[r] &= 127, n[r] |= 64, n;
          })), s(a, "priv", (function() {
            return this.eddsa.decodeInt(this.privBytes());
          })), s(a, "hash", (function() {
            return this.eddsa.hash().update(this.secret()).digest();
          })), s(a, "messagePrefix", (function() {
            return this.hash().slice(this.eddsa.encodingLength);
          })), a.prototype.sign = function(e) {
            return i(this._secret, "KeyPair can only verify"), this.eddsa.sign(e, this);
          }, a.prototype.verify = function(e, t) {
            return this.eddsa.verify(e, t, this);
          }, a.prototype.getSecret = function(e) {
            return i(this._secret, "KeyPair is public only"), n.encode(this.secret(), e);
          }, a.prototype.getPublic = function(e) {
            return n.encode(this.pubBytes(), e);
          }, e.exports = a;
        },
        3622: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(953), o = i.assert, s = i.cachedProperty, a = i.parseBytes;
          function c(e, t) {
            this.eddsa = e, "object" != typeof t && (t = a(t)), Array.isArray(t) && (t = {
              R: t.slice(0, e.encodingLength),
              S: t.slice(e.encodingLength)
            }), o(t.R && t.S, "Signature without R or S"), e.isPoint(t.R) && (this._R = t.R), t.S instanceof n && (this._S = t.S), this._Rencoded = Array.isArray(t.R) ? t.R : t.Rencoded, 
            this._Sencoded = Array.isArray(t.S) ? t.S : t.Sencoded;
          }
          s(c, "S", (function() {
            return this.eddsa.decodeInt(this.Sencoded());
          })), s(c, "R", (function() {
            return this.eddsa.decodePoint(this.Rencoded());
          })), s(c, "Rencoded", (function() {
            return this.eddsa.encodePoint(this.R());
          })), s(c, "Sencoded", (function() {
            return this.eddsa.encodeInt(this.S());
          })), c.prototype.toBytes = function() {
            return this.Rencoded().concat(this.Sencoded());
          }, c.prototype.toHex = function() {
            return i.encode(this.toBytes(), "hex").toUpperCase();
          }, e.exports = c;
        },
        1037: e => {
          e.exports = {
            doubles: {
              step: 4,
              points: [ [ "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821" ], [ "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf" ], [ "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695" ], [ "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9" ], [ "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36" ], [ "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f" ], [ "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999" ], [ "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09" ], [ "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d" ], [ "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088" ], [ "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d" ], [ "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8" ], [ "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a" ], [ "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453" ], [ "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160" ], [ "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0" ], [ "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6" ], [ "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589" ], [ "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17" ], [ "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda" ], [ "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd" ], [ "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2" ], [ "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6" ], [ "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f" ], [ "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01" ], [ "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3" ], [ "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f" ], [ "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7" ], [ "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78" ], [ "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1" ], [ "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150" ], [ "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82" ], [ "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc" ], [ "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b" ], [ "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51" ], [ "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45" ], [ "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120" ], [ "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84" ], [ "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d" ], [ "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d" ], [ "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8" ], [ "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8" ], [ "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac" ], [ "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f" ], [ "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962" ], [ "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907" ], [ "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec" ], [ "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d" ], [ "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414" ], [ "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd" ], [ "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0" ], [ "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811" ], [ "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1" ], [ "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c" ], [ "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73" ], [ "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd" ], [ "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405" ], [ "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589" ], [ "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e" ], [ "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27" ], [ "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1" ], [ "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482" ], [ "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945" ], [ "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573" ], [ "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82" ] ]
            },
            naf: {
              wnd: 7,
              points: [ [ "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672" ], [ "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6" ], [ "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da" ], [ "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37" ], [ "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b" ], [ "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81" ], [ "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58" ], [ "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77" ], [ "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a" ], [ "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c" ], [ "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67" ], [ "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402" ], [ "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55" ], [ "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482" ], [ "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82" ], [ "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396" ], [ "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49" ], [ "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf" ], [ "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a" ], [ "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7" ], [ "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933" ], [ "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a" ], [ "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6" ], [ "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37" ], [ "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e" ], [ "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6" ], [ "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476" ], [ "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40" ], [ "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61" ], [ "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683" ], [ "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5" ], [ "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b" ], [ "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417" ], [ "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868" ], [ "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a" ], [ "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6" ], [ "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996" ], [ "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e" ], [ "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d" ], [ "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2" ], [ "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e" ], [ "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437" ], [ "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311" ], [ "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4" ], [ "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575" ], [ "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d" ], [ "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d" ], [ "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629" ], [ "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06" ], [ "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374" ], [ "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee" ], [ "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1" ], [ "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b" ], [ "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661" ], [ "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6" ], [ "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e" ], [ "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d" ], [ "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc" ], [ "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4" ], [ "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c" ], [ "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b" ], [ "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913" ], [ "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154" ], [ "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865" ], [ "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc" ], [ "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224" ], [ "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e" ], [ "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6" ], [ "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511" ], [ "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b" ], [ "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2" ], [ "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c" ], [ "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3" ], [ "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d" ], [ "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700" ], [ "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4" ], [ "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196" ], [ "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4" ], [ "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257" ], [ "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13" ], [ "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096" ], [ "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38" ], [ "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f" ], [ "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448" ], [ "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a" ], [ "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4" ], [ "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437" ], [ "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7" ], [ "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d" ], [ "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a" ], [ "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54" ], [ "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77" ], [ "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517" ], [ "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10" ], [ "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125" ], [ "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e" ], [ "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1" ], [ "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2" ], [ "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423" ], [ "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8" ], [ "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758" ], [ "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375" ], [ "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d" ], [ "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec" ], [ "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0" ], [ "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c" ], [ "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4" ], [ "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f" ], [ "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649" ], [ "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826" ], [ "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5" ], [ "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87" ], [ "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b" ], [ "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc" ], [ "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c" ], [ "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f" ], [ "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a" ], [ "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46" ], [ "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f" ], [ "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03" ], [ "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08" ], [ "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8" ], [ "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373" ], [ "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3" ], [ "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8" ], [ "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1" ], [ "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9" ] ]
            }
          };
        },
        953: (e, t, r) => {
          "use strict";
          var n = t, i = r(3550), o = r(9746), s = r(4504);
          n.assert = o, n.toArray = s.toArray, n.zero2 = s.zero2, n.toHex = s.toHex, n.encode = s.encode, n.getNAF = function(e, t, r) {
            var n = new Array(Math.max(e.bitLength(), r) + 1);
            n.fill(0);
            for (var i = 1 << t + 1, o = e.clone(), s = 0; s < n.length; s++) {
              var a, c = o.andln(i - 1);
              o.isOdd() ? (a = c > (i >> 1) - 1 ? (i >> 1) - c : c, o.isubn(a)) : a = 0, n[s] = a, o.iushrn(1);
            }
            return n;
          }, n.getJSF = function(e, t) {
            var r = [ [], [] ];
            e = e.clone(), t = t.clone();
            for (var n, i = 0, o = 0; e.cmpn(-i) > 0 || t.cmpn(-o) > 0; ) {
              var s, a, c = e.andln(3) + i & 3, f = t.andln(3) + o & 3;
              3 === c && (c = -1), 3 === f && (f = -1), s = 0 == (1 & c) ? 0 : 3 != (n = e.andln(7) + i & 7) && 5 !== n || 2 !== f ? c : -c, 
              r[0].push(s), a = 0 == (1 & f) ? 0 : 3 != (n = t.andln(7) + o & 7) && 5 !== n || 2 !== c ? f : -f, r[1].push(a), 2 * i === s + 1 && (i = 1 - i), 
              2 * o === a + 1 && (o = 1 - o), e.iushrn(1), t.iushrn(1);
            }
            return r;
          }, n.cachedProperty = function(e, t, r) {
            var n = "_" + t;
            e.prototype[t] = function() {
              return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
            };
          }, n.parseBytes = function(e) {
            return "string" == typeof e ? n.toArray(e, "hex") : e;
          }, n.intFromLE = function(e) {
            return new i(e, "hex", "le");
          };
        },
        1227: e => {
          e.exports = null;
        },
        2840: (e, t, r) => {
          var n = r(4155), i = r(778), o = function() {}, s = function(e, t, r) {
            if ("function" == typeof t) return s(e, null, t);
            t || (t = {}), r = i(r || o);
            var a = e._writableState, c = e._readableState, f = t.readable || !1 !== t.readable && e.readable, u = t.writable || !1 !== t.writable && e.writable, h = !1, d = function() {
              e.writable || l();
            }, l = function() {
              u = !1, f || r.call(e);
            }, p = function() {
              f = !1, u || r.call(e);
            }, b = function(t) {
              r.call(e, t ? new Error("exited with error code: " + t) : null);
            }, y = function(t) {
              r.call(e, t);
            }, g = function() {
              n.nextTick(m);
            }, m = function() {
              if (!h) return (!f || c && c.ended && !c.destroyed) && (!u || a && a.ended && !a.destroyed) ? void 0 : r.call(e, new Error("premature close"));
            }, v = function() {
              e.req.on("finish", l);
            };
            return function(e) {
              return e.setHeader && "function" == typeof e.abort;
            }(e) ? (e.on("complete", l), e.on("abort", g), e.req ? v() : e.on("request", v)) : u && !a && (e.on("end", d), e.on("close", d)), 
            function(e) {
              return e.stdio && Array.isArray(e.stdio) && 3 === e.stdio.length;
            }(e) && e.on("exit", b), e.on("end", p), e.on("finish", l), !1 !== t.error && e.on("error", y), e.on("close", g), function() {
              h = !0, e.removeListener("complete", l), e.removeListener("abort", g), e.removeListener("request", v), e.req && e.req.removeListener("finish", l), 
              e.removeListener("end", d), e.removeListener("close", d), e.removeListener("finish", l), e.removeListener("exit", b), e.removeListener("end", p), 
              e.removeListener("error", y), e.removeListener("close", g);
            };
          };
          e.exports = s;
        },
        8091: e => {
          "use strict";
          function t(e, t) {
            if (null == e) throw new TypeError("Cannot convert first argument to object");
            for (var r = Object(e), n = 1; n < arguments.length; n++) {
              var i = arguments[n];
              if (null != i) for (var o = Object.keys(Object(i)), s = 0, a = o.length; s < a; s++) {
                var c = o[s], f = Object.getOwnPropertyDescriptor(i, c);
                void 0 !== f && f.enumerable && (r[c] = i[c]);
              }
            }
            return r;
          }
          e.exports = {
            assign: t,
            polyfill: function() {
              Object.assign || Object.defineProperty(Object, "assign", {
                enumerable: !1,
                configurable: !0,
                writable: !0,
                value: t
              });
            }
          };
        },
        2294: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.EthereumProviderError = t.EthereumRpcError = void 0;
          const n = r(4445);
          class i extends Error {
            constructor(e, t, r) {
              if (!Number.isInteger(e)) throw new Error('"code" must be an integer.');
              if (!t || "string" != typeof t) throw new Error('"message" must be a nonempty string.');
              super(t), this.code = e, void 0 !== r && (this.data = r);
            }
            serialize() {
              const e = {
                code: this.code,
                message: this.message
              };
              return void 0 !== this.data && (e.data = this.data), this.stack && (e.stack = this.stack), e;
            }
            toString() {
              return n.default(this.serialize(), o, 2);
            }
          }
          function o(e, t) {
            if ("[Circular]" !== t) return t;
          }
          t.EthereumRpcError = i, t.EthereumProviderError = class extends i {
            constructor(e, t, r) {
              if (!function(e) {
                return Number.isInteger(e) && e >= 1e3 && e <= 4999;
              }(e)) throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
              super(e, t, r);
            }
          };
        },
        2662: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.errorValues = t.errorCodes = void 0, t.errorCodes = {
            rpc: {
              invalidInput: -32e3,
              resourceNotFound: -32001,
              resourceUnavailable: -32002,
              transactionRejected: -32003,
              methodNotSupported: -32004,
              limitExceeded: -32005,
              parse: -32700,
              invalidRequest: -32600,
              methodNotFound: -32601,
              invalidParams: -32602,
              internal: -32603
            },
            provider: {
              userRejectedRequest: 4001,
              unauthorized: 4100,
              unsupportedMethod: 4200,
              disconnected: 4900,
              chainDisconnected: 4901
            }
          }, t.errorValues = {
            "-32700": {
              standard: "JSON RPC 2.0",
              message: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
            },
            "-32600": {
              standard: "JSON RPC 2.0",
              message: "The JSON sent is not a valid Request object."
            },
            "-32601": {
              standard: "JSON RPC 2.0",
              message: "The method does not exist / is not available."
            },
            "-32602": {
              standard: "JSON RPC 2.0",
              message: "Invalid method parameter(s)."
            },
            "-32603": {
              standard: "JSON RPC 2.0",
              message: "Internal JSON-RPC error."
            },
            "-32000": {
              standard: "EIP-1474",
              message: "Invalid input."
            },
            "-32001": {
              standard: "EIP-1474",
              message: "Resource not found."
            },
            "-32002": {
              standard: "EIP-1474",
              message: "Resource unavailable."
            },
            "-32003": {
              standard: "EIP-1474",
              message: "Transaction rejected."
            },
            "-32004": {
              standard: "EIP-1474",
              message: "Method not supported."
            },
            "-32005": {
              standard: "EIP-1474",
              message: "Request limit exceeded."
            },
            4001: {
              standard: "EIP-1193",
              message: "User rejected the request."
            },
            4100: {
              standard: "EIP-1193",
              message: "The requested account and/or method has not been authorized by the user."
            },
            4200: {
              standard: "EIP-1193",
              message: "The requested method is not supported by this Ethereum provider."
            },
            4900: {
              standard: "EIP-1193",
              message: "The provider is disconnected from all chains."
            },
            4901: {
              standard: "EIP-1193",
              message: "The provider is disconnected from the specified chain."
            }
          };
        },
        8797: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ethErrors = void 0;
          const n = r(2294), i = r(8753), o = r(2662);
          function s(e, t) {
            const [r, o] = c(t);
            return new n.EthereumRpcError(e, r || i.getMessageFromCode(e), o);
          }
          function a(e, t) {
            const [r, o] = c(t);
            return new n.EthereumProviderError(e, r || i.getMessageFromCode(e), o);
          }
          function c(e) {
            if (e) {
              if ("string" == typeof e) return [ e ];
              if ("object" == typeof e && !Array.isArray(e)) {
                const {message: t, data: r} = e;
                if (t && "string" != typeof t) throw new Error("Must specify string message.");
                return [ t || void 0, r ];
              }
            }
            return [];
          }
          t.ethErrors = {
            rpc: {
              parse: e => s(o.errorCodes.rpc.parse, e),
              invalidRequest: e => s(o.errorCodes.rpc.invalidRequest, e),
              invalidParams: e => s(o.errorCodes.rpc.invalidParams, e),
              methodNotFound: e => s(o.errorCodes.rpc.methodNotFound, e),
              internal: e => s(o.errorCodes.rpc.internal, e),
              server: e => {
                if (!e || "object" != typeof e || Array.isArray(e)) throw new Error("Ethereum RPC Server errors must provide single object argument.");
                const {code: t} = e;
                if (!Number.isInteger(t) || t > -32005 || t < -32099) throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
                return s(t, e);
              },
              invalidInput: e => s(o.errorCodes.rpc.invalidInput, e),
              resourceNotFound: e => s(o.errorCodes.rpc.resourceNotFound, e),
              resourceUnavailable: e => s(o.errorCodes.rpc.resourceUnavailable, e),
              transactionRejected: e => s(o.errorCodes.rpc.transactionRejected, e),
              methodNotSupported: e => s(o.errorCodes.rpc.methodNotSupported, e),
              limitExceeded: e => s(o.errorCodes.rpc.limitExceeded, e)
            },
            provider: {
              userRejectedRequest: e => a(o.errorCodes.provider.userRejectedRequest, e),
              unauthorized: e => a(o.errorCodes.provider.unauthorized, e),
              unsupportedMethod: e => a(o.errorCodes.provider.unsupportedMethod, e),
              disconnected: e => a(o.errorCodes.provider.disconnected, e),
              chainDisconnected: e => a(o.errorCodes.provider.chainDisconnected, e),
              custom: e => {
                if (!e || "object" != typeof e || Array.isArray(e)) throw new Error("Ethereum Provider custom errors must provide single object argument.");
                const {code: t, message: r, data: i} = e;
                if (!r || "string" != typeof r) throw new Error('"message" must be a nonempty string');
                return new n.EthereumProviderError(t, r, i);
              }
            }
          };
        },
        9826: (e, t, r) => {
          "use strict";
          t.Xy = t.Cg = t.Sy = void 0;
          const n = r(2294);
          Object.defineProperty(t, "Cg", {
            enumerable: !0,
            get: function() {
              return n.EthereumRpcError;
            }
          });
          const i = r(8753);
          Object.defineProperty(t, "Xy", {
            enumerable: !0,
            get: function() {
              return i.serializeError;
            }
          });
          const o = r(8797);
          Object.defineProperty(t, "Sy", {
            enumerable: !0,
            get: function() {
              return o.ethErrors;
            }
          }), r(2662);
        },
        8753: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.serializeError = t.isValidCode = t.getMessageFromCode = t.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
          const n = r(2662), i = r(2294), o = n.errorCodes.rpc.internal, s = {
            code: o,
            message: a(o)
          };
          function a(e, r = "Unspecified error message. This is a bug, please report it.") {
            if (Number.isInteger(e)) {
              const r = e.toString();
              if (h(n.errorValues, r)) return n.errorValues[r].message;
              if (f(e)) return t.JSON_RPC_SERVER_ERROR_MESSAGE;
            }
            return r;
          }
          function c(e) {
            if (!Number.isInteger(e)) return !1;
            const t = e.toString();
            return !!n.errorValues[t] || !!f(e);
          }
          function f(e) {
            return e >= -32099 && e <= -32e3;
          }
          function u(e) {
            return e && "object" == typeof e && !Array.isArray(e) ? Object.assign({}, e) : e;
          }
          function h(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          t.JSON_RPC_SERVER_ERROR_MESSAGE = "Unspecified server error.", t.getMessageFromCode = a, t.isValidCode = c, t.serializeError = function(e, {fallbackError: t = s, shouldIncludeStack: r = !1} = {}) {
            var n, o;
            if (!t || !Number.isInteger(t.code) || "string" != typeof t.message) throw new Error("Must provide fallback error with integer number code and string message.");
            if (e instanceof i.EthereumRpcError) return e.serialize();
            const f = {};
            if (e && "object" == typeof e && !Array.isArray(e) && h(e, "code") && c(e.code)) {
              const t = e;
              f.code = t.code, t.message && "string" == typeof t.message ? (f.message = t.message, h(t, "data") && (f.data = t.data)) : (f.message = a(f.code), 
              f.data = {
                originalError: u(e)
              });
            } else {
              f.code = t.code;
              const r = null === (n = e) || void 0 === n ? void 0 : n.message;
              f.message = r && "string" == typeof r ? r : t.message, f.data = {
                originalError: u(e)
              };
            }
            const d = null === (o = e) || void 0 === o ? void 0 : o.stack;
            return r && e && d && "string" == typeof d && (f.stack = d), f;
          };
        },
        6877: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          const n = r(339);
          function i(e) {
            return !("string" != typeof e || !/^(0x)?[0-9a-f]{512}$/i.test(e) || !/^(0x)?[0-9a-f]{512}$/.test(e) && !/^(0x)?[0-9A-F]{512}$/.test(e));
          }
          function o(e, t) {
            "object" == typeof t && t.constructor === Uint8Array && (t = n.bytesToHex(t));
            const r = n.keccak256(t).replace("0x", "");
            for (let n = 0; n < 12; n += 4) {
              const t = (parseInt(r.substr(n, 2), 16) << 8) + parseInt(r.substr(n + 2, 2), 16) & 2047, i = 1 << t % 4;
              if ((s(e.charCodeAt(e.length - 1 - Math.floor(t / 4))) & i) !== i) return !1;
            }
            return !0;
          }
          function s(e) {
            if (e >= 48 && e <= 57) return e - 48;
            if (e >= 65 && e <= 70) return e - 55;
            if (e >= 97 && e <= 102) return e - 87;
            throw new Error("invalid bloom");
          }
          function a(e) {
            return !("string" != typeof e || !/^(0x)?[0-9a-f]{64}$/i.test(e) || !/^(0x)?[0-9a-f]{64}$/.test(e) && !/^(0x)?[0-9A-F]{64}$/.test(e));
          }
          function c(e) {
            return !("string" != typeof e || !e.match(/^(0x)?[0-9a-fA-F]{40}$/) && !e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/));
          }
          t.isBloom = i, t.isInBloom = o, t.isUserEthereumAddressInBloom = function(e, t) {
            if (!i(e)) throw new Error("Invalid bloom given");
            if (!c(t)) throw new Error(`Invalid ethereum address given: "${t}"`);
            return o(e, n.padLeft(t, 64));
          }, t.isContractAddressInBloom = function(e, t) {
            if (!i(e)) throw new Error("Invalid bloom given");
            if (!c(t)) throw new Error(`Invalid contract address given: "${t}"`);
            return o(e, t);
          }, t.isTopicInBloom = function(e, t) {
            if (!i(e)) throw new Error("Invalid bloom given");
            if (!a(t)) throw new Error("Invalid topic");
            return o(e, t);
          }, t.isTopic = a, t.isAddress = c;
        },
        339: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          const n = r(1094);
          function i(e) {
            if (null == e) throw new Error("cannot convert null value to array");
            if ("string" == typeof e) {
              const t = e.match(/^(0x)?[0-9a-fA-F]*$/);
              if (!t) throw new Error("invalid hexidecimal string");
              if ("0x" !== t[1]) throw new Error("hex string must have 0x prefix");
              (e = e.substring(2)).length % 2 && (e = "0" + e);
              const r = [];
              for (let n = 0; n < e.length; n += 2) r.push(parseInt(e.substr(n, 2), 16));
              return o(new Uint8Array(r));
            }
            if (function(e) {
              if (!e || parseInt(String(e.length)) != e.length || "string" == typeof e) return !1;
              for (let t = 0; t < e.length; t++) {
                const r = e[t];
                if (r < 0 || r >= 256 || parseInt(String(r)) != r) return !1;
              }
              return !0;
            }(e)) return o(new Uint8Array(e));
            throw new Error("invalid arrayify value");
          }
          function o(e) {
            return void 0 !== e.slice || (e.slice = () => {
              const t = Array.prototype.slice.call(arguments);
              return o(new Uint8Array(Array.prototype.slice.apply(e, t)));
            }), e;
          }
          t.keccak256 = function(e) {
            return "0x" + n.keccak_256(i(e));
          }, t.padLeft = (e, t) => {
            const r = /^0x/i.test(e) || "number" == typeof e, n = t - (e = e.toString().replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
            return (r ? "0x" : "") + new Array(n).join("0") + e;
          }, t.bytesToHex = function(e) {
            const t = [];
            for (let r = 0; r < e.length; r++) t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
            return `0x${t.join("").replace(/^0+/, "")}`;
          }, t.toByteArray = i;
        },
        5443: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.createHashFunction = function(e) {
            return function(t) {
              var r = e();
              return r.update(t), n.from(r.digest());
            };
          };
        },
        2192: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var n = r(5443), i = r(5811);
          t.keccak224 = n.createHashFunction((function() {
            return i("keccak224");
          })), t.keccak256 = n.createHashFunction((function() {
            return i("keccak256");
          })), t.keccak384 = n.createHashFunction((function() {
            return i("keccak384");
          })), t.keccak512 = n.createHashFunction((function() {
            return i("keccak512");
          }));
        },
        3242: (e, t, r) => {
          e.exports = r(9203)(r(5166));
        },
        5166: (e, t, r) => {
          const n = new (0, r(6266).ec)("secp256k1"), i = n.curve, o = i.n.constructor;
          function s(e) {
            const t = e[0];
            switch (t) {
             case 2:
             case 3:
              return 33 !== e.length ? null : function(e, t) {
                let r = new o(t);
                if (r.cmp(i.p) >= 0) return null;
                r = r.toRed(i.red);
                let s = r.redSqr().redIMul(r).redIAdd(i.b).redSqrt();
                return 3 === e !== s.isOdd() && (s = s.redNeg()), n.keyPair({
                  pub: {
                    x: r,
                    y: s
                  }
                });
              }(t, e.subarray(1, 33));

             case 4:
             case 6:
             case 7:
              return 65 !== e.length ? null : function(e, t, r) {
                let s = new o(t), a = new o(r);
                if (s.cmp(i.p) >= 0 || a.cmp(i.p) >= 0) return null;
                if (s = s.toRed(i.red), a = a.toRed(i.red), (6 === e || 7 === e) && a.isOdd() !== (7 === e)) return null;
                const c = s.redSqr().redIMul(s);
                return a.redSqr().redISub(c.redIAdd(i.b)).isZero() ? n.keyPair({
                  pub: {
                    x: s,
                    y: a
                  }
                }) : null;
              }(t, e.subarray(1, 33), e.subarray(33, 65));

             default:
              return null;
            }
          }
          function a(e, t) {
            const r = t.encode(null, 33 === e.length);
            for (let n = 0; n < e.length; ++n) e[n] = r[n];
          }
          e.exports = {
            contextRandomize: () => 0,
            privateKeyVerify(e) {
              const t = new o(e);
              return t.cmp(i.n) < 0 && !t.isZero() ? 0 : 1;
            },
            privateKeyNegate(e) {
              const t = new o(e), r = i.n.sub(t).umod(i.n).toArrayLike(Uint8Array, "be", 32);
              return e.set(r), 0;
            },
            privateKeyTweakAdd(e, t) {
              const r = new o(t);
              if (r.cmp(i.n) >= 0) return 1;
              if (r.iadd(new o(e)), r.cmp(i.n) >= 0 && r.isub(i.n), r.isZero()) return 1;
              const n = r.toArrayLike(Uint8Array, "be", 32);
              return e.set(n), 0;
            },
            privateKeyTweakMul(e, t) {
              let r = new o(t);
              if (r.cmp(i.n) >= 0 || r.isZero()) return 1;
              r.imul(new o(e)), r.cmp(i.n) >= 0 && (r = r.umod(i.n));
              const n = r.toArrayLike(Uint8Array, "be", 32);
              return e.set(n), 0;
            },
            publicKeyVerify: e => null === s(e) ? 1 : 0,
            publicKeyCreate(e, t) {
              const r = new o(t);
              return r.cmp(i.n) >= 0 || r.isZero() ? 1 : (a(e, n.keyFromPrivate(t).getPublic()), 0);
            },
            publicKeyConvert(e, t) {
              const r = s(t);
              return null === r ? 1 : (a(e, r.getPublic()), 0);
            },
            publicKeyNegate(e, t) {
              const r = s(t);
              if (null === r) return 1;
              const n = r.getPublic();
              return n.y = n.y.redNeg(), a(e, n), 0;
            },
            publicKeyCombine(e, t) {
              const r = new Array(t.length);
              for (let i = 0; i < t.length; ++i) if (r[i] = s(t[i]), null === r[i]) return 1;
              let n = r[0].getPublic();
              for (let i = 1; i < r.length; ++i) n = n.add(r[i].pub);
              return n.isInfinity() ? 2 : (a(e, n), 0);
            },
            publicKeyTweakAdd(e, t, r) {
              const n = s(t);
              if (null === n) return 1;
              if ((r = new o(r)).cmp(i.n) >= 0) return 2;
              const c = n.getPublic().add(i.g.mul(r));
              return c.isInfinity() ? 2 : (a(e, c), 0);
            },
            publicKeyTweakMul(e, t, r) {
              const n = s(t);
              return null === n ? 1 : (r = new o(r)).cmp(i.n) >= 0 || r.isZero() ? 2 : (a(e, n.getPublic().mul(r)), 0);
            },
            signatureNormalize(e) {
              const t = new o(e.subarray(0, 32)), r = new o(e.subarray(32, 64));
              return t.cmp(i.n) >= 0 || r.cmp(i.n) >= 0 ? 1 : (1 === r.cmp(n.nh) && e.set(i.n.sub(r).toArrayLike(Uint8Array, "be", 32), 32), 
              0);
            },
            signatureExport(e, t) {
              const r = t.subarray(0, 32), n = t.subarray(32, 64);
              if (new o(r).cmp(i.n) >= 0) return 1;
              if (new o(n).cmp(i.n) >= 0) return 1;
              const {output: s} = e;
              let a = s.subarray(4, 37);
              a[0] = 0, a.set(r, 1);
              let c = 33, f = 0;
              for (;c > 1 && 0 === a[f] && !(128 & a[f + 1]); --c, ++f) ;
              if (a = a.subarray(f), 128 & a[0]) return 1;
              if (c > 1 && 0 === a[0] && !(128 & a[1])) return 1;
              let u = s.subarray(39, 72);
              u[0] = 0, u.set(n, 1);
              let h = 33, d = 0;
              for (;h > 1 && 0 === u[d] && !(128 & u[d + 1]); --h, ++d) ;
              return u = u.subarray(d), 128 & u[0] || h > 1 && 0 === u[0] && !(128 & u[1]) ? 1 : (e.outputlen = 6 + c + h, s[0] = 48, 
              s[1] = e.outputlen - 2, s[2] = 2, s[3] = a.length, s.set(a, 4), s[4 + c] = 2, s[5 + c] = u.length, s.set(u, 6 + c), 0);
            },
            signatureImport(e, t) {
              if (t.length < 8) return 1;
              if (t.length > 72) return 1;
              if (48 !== t[0]) return 1;
              if (t[1] !== t.length - 2) return 1;
              if (2 !== t[2]) return 1;
              const r = t[3];
              if (0 === r) return 1;
              if (5 + r >= t.length) return 1;
              if (2 !== t[4 + r]) return 1;
              const n = t[5 + r];
              if (0 === n) return 1;
              if (6 + r + n !== t.length) return 1;
              if (128 & t[4]) return 1;
              if (r > 1 && 0 === t[4] && !(128 & t[5])) return 1;
              if (128 & t[r + 6]) return 1;
              if (n > 1 && 0 === t[r + 6] && !(128 & t[r + 7])) return 1;
              let s = t.subarray(4, 4 + r);
              if (33 === s.length && 0 === s[0] && (s = s.subarray(1)), s.length > 32) return 1;
              let a = t.subarray(6 + r);
              if (33 === a.length && 0 === a[0] && (a = a.slice(1)), a.length > 32) throw new Error("S length is too long");
              let c = new o(s);
              c.cmp(i.n) >= 0 && (c = new o(0));
              let f = new o(t.subarray(6 + r));
              return f.cmp(i.n) >= 0 && (f = new o(0)), e.set(c.toArrayLike(Uint8Array, "be", 32), 0), e.set(f.toArrayLike(Uint8Array, "be", 32), 32), 
              0;
            },
            ecdsaSign(e, t, r, s, a) {
              if (a) {
                const e = a;
                a = n => {
                  const i = e(t, r, null, s, n);
                  if (!(i instanceof Uint8Array && 32 === i.length)) throw new Error("This is the way");
                  return new o(i);
                };
              }
              const c = new o(r);
              if (c.cmp(i.n) >= 0 || c.isZero()) return 1;
              let f;
              try {
                f = n.sign(t, r, {
                  canonical: !0,
                  k: a,
                  pers: s
                });
              } catch (e) {
                return 1;
              }
              return e.signature.set(f.r.toArrayLike(Uint8Array, "be", 32), 0), e.signature.set(f.s.toArrayLike(Uint8Array, "be", 32), 32), 
              e.recid = f.recoveryParam, 0;
            },
            ecdsaVerify(e, t, r) {
              const a = {
                r: e.subarray(0, 32),
                s: e.subarray(32, 64)
              }, c = new o(a.r), f = new o(a.s);
              if (c.cmp(i.n) >= 0 || f.cmp(i.n) >= 0) return 1;
              if (1 === f.cmp(n.nh) || c.isZero() || f.isZero()) return 3;
              const u = s(r);
              if (null === u) return 2;
              const h = u.getPublic();
              return n.verify(t, a, h) ? 0 : 3;
            },
            ecdsaRecover(e, t, r, s) {
              const c = {
                r: t.slice(0, 32),
                s: t.slice(32, 64)
              }, f = new o(c.r), u = new o(c.s);
              if (f.cmp(i.n) >= 0 || u.cmp(i.n) >= 0) return 1;
              if (f.isZero() || u.isZero()) return 2;
              let h;
              try {
                h = n.recoverPubKey(s, c, r);
              } catch (e) {
                return 2;
              }
              return a(e, h), 0;
            },
            ecdh(e, t, r, a, c, f, u) {
              const h = s(t);
              if (null === h) return 1;
              const d = new o(r);
              if (d.cmp(i.n) >= 0 || d.isZero()) return 2;
              const l = h.getPublic().mul(d);
              if (void 0 === c) {
                const t = l.encode(null, !0), r = n.hash().update(t).digest();
                for (let n = 0; n < 32; ++n) e[n] = r[n];
              } else {
                f || (f = new Uint8Array(32));
                const t = l.getX().toArray("be", 32);
                for (let e = 0; e < 32; ++e) f[e] = t[e];
                u || (u = new Uint8Array(32));
                const r = l.getY().toArray("be", 32);
                for (let e = 0; e < 32; ++e) u[e] = r[e];
                const n = c(f, u, a);
                if (!(n instanceof Uint8Array && n.length === e.length)) return 2;
                e.set(n);
              }
              return 0;
            }
          };
        },
        9203: e => {
          const t = "Impossible case. Please create issue.", r = "The tweak was out of range or the resulted private key is invalid", n = "The tweak was out of range or equal to zero", i = "Public Key could not be parsed", o = "Public Key serialization error", s = "Signature could not be parsed";
          function a(e, t) {
            if (!e) throw new Error(t);
          }
          function c(e, t, r) {
            if (a(t instanceof Uint8Array, `Expected ${e} to be an Uint8Array`), void 0 !== r) if (Array.isArray(r)) {
              const n = `Expected ${e} to be an Uint8Array with length [${r.join(", ")}]`;
              a(r.includes(t.length), n);
            } else {
              const n = `Expected ${e} to be an Uint8Array with length ${r}`;
              a(t.length === r, n);
            }
          }
          function f(e) {
            a("Boolean" === h(e), "Expected compressed to be a Boolean");
          }
          function u(e = (e => new Uint8Array(e)), t) {
            return "function" == typeof e && (e = e(t)), c("output", e, t), e;
          }
          function h(e) {
            return Object.prototype.toString.call(e).slice(8, -1);
          }
          e.exports = e => ({
            contextRandomize(t) {
              if (a(null === t || t instanceof Uint8Array, "Expected seed to be an Uint8Array or null"), null !== t && c("seed", t, 32), 
              1 === e.contextRandomize(t)) throw new Error("Unknow error on context randomization");
            },
            privateKeyVerify: t => (c("private key", t, 32), 0 === e.privateKeyVerify(t)),
            privateKeyNegate(r) {
              switch (c("private key", r, 32), e.privateKeyNegate(r)) {
               case 0:
                return r;

               case 1:
                throw new Error(t);
              }
            },
            privateKeyTweakAdd(t, n) {
              switch (c("private key", t, 32), c("tweak", n, 32), e.privateKeyTweakAdd(t, n)) {
               case 0:
                return t;

               case 1:
                throw new Error(r);
              }
            },
            privateKeyTweakMul(t, r) {
              switch (c("private key", t, 32), c("tweak", r, 32), e.privateKeyTweakMul(t, r)) {
               case 0:
                return t;

               case 1:
                throw new Error(n);
              }
            },
            publicKeyVerify: t => (c("public key", t, [ 33, 65 ]), 0 === e.publicKeyVerify(t)),
            publicKeyCreate(t, r = !0, n) {
              switch (c("private key", t, 32), f(r), n = u(n, r ? 33 : 65), e.publicKeyCreate(n, t)) {
               case 0:
                return n;

               case 1:
                throw new Error("Private Key is invalid");

               case 2:
                throw new Error(o);
              }
            },
            publicKeyConvert(t, r = !0, n) {
              switch (c("public key", t, [ 33, 65 ]), f(r), n = u(n, r ? 33 : 65), e.publicKeyConvert(n, t)) {
               case 0:
                return n;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error(o);
              }
            },
            publicKeyNegate(r, n = !0, s) {
              switch (c("public key", r, [ 33, 65 ]), f(n), s = u(s, n ? 33 : 65), e.publicKeyNegate(s, r)) {
               case 0:
                return s;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error(t);

               case 3:
                throw new Error(o);
              }
            },
            publicKeyCombine(t, r = !0, n) {
              a(Array.isArray(t), "Expected public keys to be an Array"), a(t.length > 0, "Expected public keys array will have more than zero items");
              for (const e of t) c("public key", e, [ 33, 65 ]);
              switch (f(r), n = u(n, r ? 33 : 65), e.publicKeyCombine(n, t)) {
               case 0:
                return n;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error("The sum of the public keys is not valid");

               case 3:
                throw new Error(o);
              }
            },
            publicKeyTweakAdd(t, n, o = !0, s) {
              switch (c("public key", t, [ 33, 65 ]), c("tweak", n, 32), f(o), s = u(s, o ? 33 : 65), e.publicKeyTweakAdd(s, t, n)) {
               case 0:
                return s;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error(r);
              }
            },
            publicKeyTweakMul(t, r, o = !0, s) {
              switch (c("public key", t, [ 33, 65 ]), c("tweak", r, 32), f(o), s = u(s, o ? 33 : 65), e.publicKeyTweakMul(s, t, r)) {
               case 0:
                return s;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error(n);
              }
            },
            signatureNormalize(t) {
              switch (c("signature", t, 64), e.signatureNormalize(t)) {
               case 0:
                return t;

               case 1:
                throw new Error(s);
              }
            },
            signatureExport(r, n) {
              c("signature", r, 64);
              const i = {
                output: n = u(n, 72),
                outputlen: 72
              };
              switch (e.signatureExport(i, r)) {
               case 0:
                return n.slice(0, i.outputlen);

               case 1:
                throw new Error(s);

               case 2:
                throw new Error(t);
              }
            },
            signatureImport(r, n) {
              switch (c("signature", r), n = u(n, 64), e.signatureImport(n, r)) {
               case 0:
                return n;

               case 1:
                throw new Error(s);

               case 2:
                throw new Error(t);
              }
            },
            ecdsaSign(r, n, i = {}, o) {
              c("message", r, 32), c("private key", n, 32), a("Object" === h(i), "Expected options to be an Object"), void 0 !== i.data && c("options.data", i.data), 
              void 0 !== i.noncefn && a("Function" === h(i.noncefn), "Expected options.noncefn to be a Function");
              const s = {
                signature: o = u(o, 64),
                recid: null
              };
              switch (e.ecdsaSign(s, r, n, i.data, i.noncefn)) {
               case 0:
                return s;

               case 1:
                throw new Error("The nonce generation function failed, or the private key was invalid");

               case 2:
                throw new Error(t);
              }
            },
            ecdsaVerify(t, r, n) {
              switch (c("signature", t, 64), c("message", r, 32), c("public key", n, [ 33, 65 ]), e.ecdsaVerify(t, r, n)) {
               case 0:
                return !0;

               case 3:
                return !1;

               case 1:
                throw new Error(s);

               case 2:
                throw new Error(i);
              }
            },
            ecdsaRecover(r, n, i, o = !0, d) {
              switch (c("signature", r, 64), a("Number" === h(n) && n >= 0 && n <= 3, "Expected recovery id to be a Number within interval [0, 3]"), 
              c("message", i, 32), f(o), d = u(d, o ? 33 : 65), e.ecdsaRecover(d, r, n, i)) {
               case 0:
                return d;

               case 1:
                throw new Error(s);

               case 2:
                throw new Error("Public key could not be recover");

               case 3:
                throw new Error(t);
              }
            },
            ecdh(t, r, n = {}, o) {
              switch (c("public key", t, [ 33, 65 ]), c("private key", r, 32), a("Object" === h(n), "Expected options to be an Object"), 
              void 0 !== n.data && c("options.data", n.data), void 0 !== n.hashfn ? (a("Function" === h(n.hashfn), "Expected options.hashfn to be a Function"), 
              void 0 !== n.xbuf && c("options.xbuf", n.xbuf, 32), void 0 !== n.ybuf && c("options.ybuf", n.ybuf, 32), c("output", o)) : o = u(o, 32), 
              e.ecdh(o, t, r, n.data, n.hashfn, n.xbuf, n.ybuf)) {
               case 0:
                return o;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error("Scalar was invalid (zero or overflow)");
              }
            }
          });
        },
        472: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var n = r(1798);
          t.getRandomBytes = function(e) {
            return new Promise((function(t, r) {
              n(e, (function(e, n) {
                e ? r(e) : t(n);
              }));
            }));
          }, t.getRandomBytesSync = function(e) {
            return n(e);
          };
        },
        5053: function(e, t, r) {
          "use strict";
          var n = this && this.__awaiter || function(e, t, r, n) {
            return new (r || (r = Promise))((function(i, o) {
              function s(e) {
                try {
                  c(n.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function a(e) {
                try {
                  c(n.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function c(e) {
                var t;
                e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r((function(e) {
                  e(t);
                }))).then(s, a);
              }
              c((n = n.apply(e, t || [])).next());
            }));
          }, i = this && this.__generator || function(e, t) {
            var r, n, i, o, s = {
              label: 0,
              sent: function() {
                if (1 & i[0]) throw i[1];
                return i[1];
              },
              trys: [],
              ops: []
            };
            return o = {
              next: a(0),
              throw: a(1),
              return: a(2)
            }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
              return this;
            }), o;
            function a(o) {
              return function(a) {
                return function(o) {
                  if (r) throw new TypeError("Generator is already executing.");
                  for (;s; ) try {
                    if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;
                    switch (n = 0, i && (o = [ 2 & o[0], i.value ]), o[0]) {
                     case 0:
                     case 1:
                      i = o;
                      break;

                     case 4:
                      return s.label++, {
                        value: o[1],
                        done: !1
                      };

                     case 5:
                      s.label++, n = o[1], o = [ 0 ];
                      continue;

                     case 7:
                      o = s.ops.pop(), s.trys.pop();
                      continue;

                     default:
                      if (!((i = (i = s.trys).length > 0 && i[i.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                        s = 0;
                        continue;
                      }
                      if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {
                        s.label = o[1];
                        break;
                      }
                      if (6 === o[0] && s.label < i[1]) {
                        s.label = i[1], i = o;
                        break;
                      }
                      if (i && s.label < i[2]) {
                        s.label = i[2], s.ops.push(o);
                        break;
                      }
                      i[2] && s.ops.pop(), s.trys.pop();
                      continue;
                    }
                    o = t.call(e, s);
                  } catch (e) {
                    o = [ 6, e ], n = 0;
                  } finally {
                    r = i = 0;
                  }
                  if (5 & o[0]) throw o[1];
                  return {
                    value: o[0] ? o[1] : void 0,
                    done: !0
                  };
                }([ o, a ]);
              };
            }
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var o = r(3242), s = r(472);
          t.createPrivateKey = function() {
            return n(this, void 0, void 0, (function() {
              var e;
              return i(this, (function(t) {
                switch (t.label) {
                 case 0:
                  return [ 4, s.getRandomBytes(32) ];

                 case 1:
                  return e = t.sent(), o.privateKeyVerify(e) ? [ 2, e ] : [ 3, 0 ];

                 case 2:
                  return [ 2 ];
                }
              }));
            }));
          }, t.createPrivateKeySync = function() {
            for (;;) {
              var e = s.getRandomBytesSync(32);
              if (o.privateKeyVerify(e)) return e;
            }
          }, function(e) {
            for (var r in e) t.hasOwnProperty(r) || (t[r] = e[r]);
          }(r(3242));
        },
        8670: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__read || function(e, t) {
            var r = "function" == typeof Symbol && e[Symbol.iterator];
            if (!r) return e;
            var n, i, o = r.call(e), s = [];
            try {
              for (;(void 0 === t || t-- > 0) && !(n = o.next()).done; ) s.push(n.value);
            } catch (e) {
              i = {
                error: e
              };
            } finally {
              try {
                n && !n.done && (r = o.return) && r.call(o);
              } finally {
                if (i) throw i.error;
              }
            }
            return s;
          }, o = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isZeroAddress = t.zeroAddress = t.importPublic = t.privateToAddress = t.privateToPublic = t.publicToAddress = t.pubToAddress = t.isValidPublic = t.isValidPrivate = t.generateAddress2 = t.generateAddress = t.isValidChecksumAddress = t.toChecksumAddress = t.isValidAddress = t.Account = void 0;
          var s = o(r(9282)), a = r(4538), c = r(5053), f = r(4846), u = r(6861), h = r(4651), d = r(5641), l = r(3746), p = r(2971), b = function() {
            function e(e, t, r, n) {
              void 0 === e && (e = new a.BN(0)), void 0 === t && (t = new a.BN(0)), void 0 === r && (r = u.KECCAK256_RLP), void 0 === n && (n = u.KECCAK256_NULL), 
              this.nonce = e, this.balance = t, this.stateRoot = r, this.codeHash = n, this._validate();
            }
            return e.fromAccountData = function(t) {
              var r = t.nonce, n = t.balance, i = t.stateRoot, o = t.codeHash;
              return new e(r ? new a.BN((0, h.toBuffer)(r)) : void 0, n ? new a.BN((0, h.toBuffer)(n)) : void 0, i ? (0, h.toBuffer)(i) : void 0, o ? (0, 
              h.toBuffer)(o) : void 0);
            }, e.fromRlpSerializedAccount = function(e) {
              var t = a.rlp.decode(e);
              if (!Array.isArray(t)) throw new Error("Invalid serialized account input. Must be array");
              return this.fromValuesArray(t);
            }, e.fromValuesArray = function(t) {
              var r = i(t, 4), n = r[0], o = r[1], s = r[2], c = r[3];
              return new e(new a.BN(n), new a.BN(o), s, c);
            }, e.prototype._validate = function() {
              if (this.nonce.lt(new a.BN(0))) throw new Error("nonce must be greater than zero");
              if (this.balance.lt(new a.BN(0))) throw new Error("balance must be greater than zero");
              if (32 !== this.stateRoot.length) throw new Error("stateRoot must have a length of 32");
              if (32 !== this.codeHash.length) throw new Error("codeHash must have a length of 32");
            }, e.prototype.raw = function() {
              return [ (0, p.bnToUnpaddedBuffer)(this.nonce), (0, p.bnToUnpaddedBuffer)(this.balance), this.stateRoot, this.codeHash ];
            }, e.prototype.serialize = function() {
              return a.rlp.encode(this.raw());
            }, e.prototype.isContract = function() {
              return !this.codeHash.equals(u.KECCAK256_NULL);
            }, e.prototype.isEmpty = function() {
              return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(u.KECCAK256_NULL);
            }, e;
          }();
          t.Account = b, t.isValidAddress = function(e) {
            try {
              (0, l.assertIsString)(e);
            } catch (e) {
              return !1;
            }
            return /^0x[0-9a-fA-F]{40}$/.test(e);
          }, t.toChecksumAddress = function(e, t) {
            (0, l.assertIsHexString)(e);
            var r = (0, f.stripHexPrefix)(e).toLowerCase(), n = "";
            t && (n = (0, p.toType)(t, p.TypeOutput.BN).toString() + "0x");
            for (var i = (0, d.keccakFromString)(n + r).toString("hex"), o = "0x", s = 0; s < r.length; s++) parseInt(i[s], 16) >= 8 ? o += r[s].toUpperCase() : o += r[s];
            return o;
          }, t.isValidChecksumAddress = function(e, r) {
            return (0, t.isValidAddress)(e) && (0, t.toChecksumAddress)(e, r) === e;
          }, t.generateAddress = function(e, t) {
            (0, l.assertIsBuffer)(e), (0, l.assertIsBuffer)(t);
            var r = new a.BN(t);
            return r.isZero() ? (0, d.rlphash)([ e, null ]).slice(-20) : (0, d.rlphash)([ e, n.from(r.toArray()) ]).slice(-20);
          }, t.generateAddress2 = function(e, t, r) {
            return (0, l.assertIsBuffer)(e), (0, l.assertIsBuffer)(t), (0, l.assertIsBuffer)(r), (0, s.default)(20 === e.length), (0, 
            s.default)(32 === t.length), (0, d.keccak256)(n.concat([ n.from("ff", "hex"), e, t, (0, d.keccak256)(r) ])).slice(-20);
          }, t.isValidPrivate = function(e) {
            return (0, c.privateKeyVerify)(e);
          }, t.isValidPublic = function(e, t) {
            return void 0 === t && (t = !1), (0, l.assertIsBuffer)(e), 64 === e.length ? (0, c.publicKeyVerify)(n.concat([ n.from([ 4 ]), e ])) : !!t && (0, 
            c.publicKeyVerify)(e);
          }, t.pubToAddress = function(e, t) {
            return void 0 === t && (t = !1), (0, l.assertIsBuffer)(e), t && 64 !== e.length && (e = n.from((0, c.publicKeyConvert)(e, !1).slice(1))), 
            (0, s.default)(64 === e.length), (0, d.keccak)(e).slice(-20);
          }, t.publicToAddress = t.pubToAddress, t.privateToPublic = function(e) {
            return (0, l.assertIsBuffer)(e), n.from((0, c.publicKeyCreate)(e, !1)).slice(1);
          }, t.privateToAddress = function(e) {
            return (0, t.publicToAddress)((0, t.privateToPublic)(e));
          }, t.importPublic = function(e) {
            return (0, l.assertIsBuffer)(e), 64 !== e.length && (e = n.from((0, c.publicKeyConvert)(e, !1).slice(1))), e;
          }, t.zeroAddress = function() {
            var e = (0, h.zeros)(20);
            return (0, h.bufferToHex)(e);
          }, t.isZeroAddress = function(e) {
            try {
              (0, l.assertIsString)(e);
            } catch (e) {
              return !1;
            }
            return (0, t.zeroAddress)() === e;
          };
        },
        6871: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.Address = void 0;
          var o = i(r(9282)), s = r(4538), a = r(4651), c = r(8670), f = function() {
            function e(e) {
              (0, o.default)(20 === e.length, "Invalid address length"), this.buf = e;
            }
            return e.zero = function() {
              return new e((0, a.zeros)(20));
            }, e.fromString = function(t) {
              return (0, o.default)((0, c.isValidAddress)(t), "Invalid address"), new e((0, a.toBuffer)(t));
            }, e.fromPublicKey = function(t) {
              return (0, o.default)(n.isBuffer(t), "Public key should be Buffer"), new e((0, c.pubToAddress)(t));
            }, e.fromPrivateKey = function(t) {
              return (0, o.default)(n.isBuffer(t), "Private key should be Buffer"), new e((0, c.privateToAddress)(t));
            }, e.generate = function(t, r) {
              return (0, o.default)(s.BN.isBN(r)), new e((0, c.generateAddress)(t.buf, r.toArrayLike(n)));
            }, e.generate2 = function(t, r, i) {
              return (0, o.default)(n.isBuffer(r)), (0, o.default)(n.isBuffer(i)), new e((0, c.generateAddress2)(t.buf, r, i));
            }, e.prototype.equals = function(e) {
              return this.buf.equals(e.buf);
            }, e.prototype.isZero = function() {
              return this.equals(e.zero());
            }, e.prototype.isPrecompileOrSystemAddress = function() {
              var e = new s.BN(this.buf), t = new s.BN(0), r = new s.BN("ffff", "hex");
              return e.gte(t) && e.lte(r);
            }, e.prototype.toString = function() {
              return "0x" + this.buf.toString("hex");
            }, e.prototype.toBuffer = function() {
              return n.from(this.buf);
            }, e;
          }();
          t.Address = f;
        },
        4651: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__values || function(e) {
            var t = "function" == typeof Symbol && Symbol.iterator, r = t && e[t], n = 0;
            if (r) return r.call(e);
            if (e && "number" == typeof e.length) return {
              next: function() {
                return e && n >= e.length && (e = void 0), {
                  value: e && e[n++],
                  done: !e
                };
              }
            };
            throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, o = this && this.__read || function(e, t) {
            var r = "function" == typeof Symbol && e[Symbol.iterator];
            if (!r) return e;
            var n, i, o = r.call(e), s = [];
            try {
              for (;(void 0 === t || t-- > 0) && !(n = o.next()).done; ) s.push(n.value);
            } catch (e) {
              i = {
                error: e
              };
            } finally {
              try {
                n && !n.done && (r = o.return) && r.call(o);
              } finally {
                if (i) throw i.error;
              }
            }
            return s;
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.bufArrToArr = t.arrToBufArr = t.validateNoLeadingZeroes = t.baToJSON = t.toUtf8 = t.addHexPrefix = t.toUnsigned = t.fromSigned = t.bufferToHex = t.bufferToInt = t.toBuffer = t.unpadHexString = t.unpadArray = t.unpadBuffer = t.setLengthRight = t.setLengthLeft = t.zeros = t.intToBuffer = t.intToHex = void 0;
          var s = r(4538), a = r(4846), c = r(3746);
          t.intToHex = function(e) {
            if (!Number.isSafeInteger(e) || e < 0) throw new Error("Received an invalid integer type: ".concat(e));
            return "0x".concat(e.toString(16));
          }, t.intToBuffer = function(e) {
            var r = (0, t.intToHex)(e);
            return n.from((0, a.padToEven)(r.slice(2)), "hex");
          }, t.zeros = function(e) {
            return n.allocUnsafe(e).fill(0);
          };
          var f = function(e, r, n) {
            var i = (0, t.zeros)(r);
            return n ? e.length < r ? (e.copy(i), i) : e.slice(0, r) : e.length < r ? (e.copy(i, r - e.length), i) : e.slice(-r);
          };
          t.setLengthLeft = function(e, t) {
            return (0, c.assertIsBuffer)(e), f(e, t, !1);
          }, t.setLengthRight = function(e, t) {
            return (0, c.assertIsBuffer)(e), f(e, t, !0);
          };
          var u = function(e) {
            for (var t = e[0]; e.length > 0 && "0" === t.toString(); ) t = (e = e.slice(1))[0];
            return e;
          };
          t.unpadBuffer = function(e) {
            return (0, c.assertIsBuffer)(e), u(e);
          }, t.unpadArray = function(e) {
            return (0, c.assertIsArray)(e), u(e);
          }, t.unpadHexString = function(e) {
            return (0, c.assertIsHexString)(e), e = (0, a.stripHexPrefix)(e), u(e);
          }, t.toBuffer = function(e) {
            if (null == e) return n.allocUnsafe(0);
            if (n.isBuffer(e)) return n.from(e);
            if (Array.isArray(e) || e instanceof Uint8Array) return n.from(e);
            if ("string" == typeof e) {
              if (!(0, a.isHexString)(e)) throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(e));
              return n.from((0, a.padToEven)((0, a.stripHexPrefix)(e)), "hex");
            }
            if ("number" == typeof e) return (0, t.intToBuffer)(e);
            if (s.BN.isBN(e)) {
              if (e.isNeg()) throw new Error("Cannot convert negative BN to buffer. Given: ".concat(e));
              return e.toArrayLike(n);
            }
            if (e.toArray) return n.from(e.toArray());
            if (e.toBuffer) return n.from(e.toBuffer());
            throw new Error("invalid type");
          }, t.bufferToInt = function(e) {
            return new s.BN((0, t.toBuffer)(e)).toNumber();
          }, t.bufferToHex = function(e) {
            return "0x" + (e = (0, t.toBuffer)(e)).toString("hex");
          }, t.fromSigned = function(e) {
            return new s.BN(e).fromTwos(256);
          }, t.toUnsigned = function(e) {
            return n.from(e.toTwos(256).toArray());
          }, t.addHexPrefix = function(e) {
            return "string" != typeof e || (0, a.isHexPrefixed)(e) ? e : "0x" + e;
          }, t.toUtf8 = function(e) {
            if ((e = (0, a.stripHexPrefix)(e)).length % 2 != 0) throw new Error("Invalid non-even hex string input for toUtf8() provided");
            return n.from(e.replace(/^(00)+|(00)+$/g, ""), "hex").toString("utf8");
          }, t.baToJSON = function(e) {
            if (n.isBuffer(e)) return "0x".concat(e.toString("hex"));
            if (e instanceof Array) {
              for (var r = [], i = 0; i < e.length; i++) r.push((0, t.baToJSON)(e[i]));
              return r;
            }
          }, t.validateNoLeadingZeroes = function(e) {
            var t, r;
            try {
              for (var n = i(Object.entries(e)), s = n.next(); !s.done; s = n.next()) {
                var a = o(s.value, 2), c = a[0], f = a[1];
                if (void 0 !== f && f.length > 0 && 0 === f[0]) throw new Error("".concat(c, " cannot have leading zeroes, received: ").concat(f.toString("hex")));
              }
            } catch (e) {
              t = {
                error: e
              };
            } finally {
              try {
                s && !s.done && (r = n.return) && r.call(n);
              } finally {
                if (t) throw t.error;
              }
            }
          }, t.arrToBufArr = function e(t) {
            return Array.isArray(t) ? t.map((function(t) {
              return e(t);
            })) : n.from(t);
          }, t.bufArrToArr = function e(t) {
            return Array.isArray(t) ? t.map((function(t) {
              return e(t);
            })) : Uint8Array.from(null != t ? t : []);
          };
        },
        6861: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.KECCAK256_RLP = t.KECCAK256_RLP_S = t.KECCAK256_RLP_ARRAY = t.KECCAK256_RLP_ARRAY_S = t.KECCAK256_NULL = t.KECCAK256_NULL_S = t.TWO_POW256 = t.MAX_INTEGER = t.MAX_UINT64 = void 0;
          var n = r(8764), i = r(4538);
          t.MAX_UINT64 = new i.BN("ffffffffffffffff", 16), t.MAX_INTEGER = new i.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16), 
          t.TWO_POW256 = new i.BN("10000000000000000000000000000000000000000000000000000000000000000", 16), t.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", 
          t.KECCAK256_NULL = n.Buffer.from(t.KECCAK256_NULL_S, "hex"), t.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347", 
          t.KECCAK256_RLP_ARRAY = n.Buffer.from(t.KECCAK256_RLP_ARRAY_S, "hex"), t.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421", 
          t.KECCAK256_RLP = n.Buffer.from(t.KECCAK256_RLP_S, "hex");
        },
        4538: function(e, t, r) {
          "use strict";
          var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
            void 0 === n && (n = r);
            var i = Object.getOwnPropertyDescriptor(t, r);
            i && !("get" in i ? !t.__esModule : i.writable || i.configurable) || (i = {
              enumerable: !0,
              get: function() {
                return t[r];
              }
            }), Object.defineProperty(e, n, i);
          } : function(e, t, r, n) {
            void 0 === n && (n = r), e[n] = t[r];
          }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
            Object.defineProperty(e, "default", {
              enumerable: !0,
              value: t
            });
          } : function(e, t) {
            e.default = t;
          }), o = this && this.__importStar || function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e) for (var r in e) "default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
            return i(t, e), t;
          }, s = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.rlp = t.BN = void 0;
          var a = s(r(3550));
          t.BN = a.default;
          var c = o(r(1675));
          t.rlp = c;
        },
        5641: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.rlphash = t.ripemd160FromArray = t.ripemd160FromString = t.ripemd160 = t.sha256FromArray = t.sha256FromString = t.sha256 = t.keccakFromArray = t.keccakFromHexString = t.keccakFromString = t.keccak256 = t.keccak = void 0;
          var i = r(2192), o = r(3482), s = r(4538), a = r(4651), c = r(3746);
          t.keccak = function(e, t) {
            switch (void 0 === t && (t = 256), (0, c.assertIsBuffer)(e), t) {
             case 224:
              return (0, i.keccak224)(e);

             case 256:
              return (0, i.keccak256)(e);

             case 384:
              return (0, i.keccak384)(e);

             case 512:
              return (0, i.keccak512)(e);

             default:
              throw new Error("Invald algorithm: keccak".concat(t));
            }
          }, t.keccak256 = function(e) {
            return (0, t.keccak)(e);
          }, t.keccakFromString = function(e, r) {
            void 0 === r && (r = 256), (0, c.assertIsString)(e);
            var i = n.from(e, "utf8");
            return (0, t.keccak)(i, r);
          }, t.keccakFromHexString = function(e, r) {
            return void 0 === r && (r = 256), (0, c.assertIsHexString)(e), (0, t.keccak)((0, a.toBuffer)(e), r);
          }, t.keccakFromArray = function(e, r) {
            return void 0 === r && (r = 256), (0, c.assertIsArray)(e), (0, t.keccak)((0, a.toBuffer)(e), r);
          };
          var f = function(e) {
            return e = (0, a.toBuffer)(e), o("sha256").update(e).digest();
          };
          t.sha256 = function(e) {
            return (0, c.assertIsBuffer)(e), f(e);
          }, t.sha256FromString = function(e) {
            return (0, c.assertIsString)(e), f(e);
          }, t.sha256FromArray = function(e) {
            return (0, c.assertIsArray)(e), f(e);
          };
          var u = function(e, t) {
            e = (0, a.toBuffer)(e);
            var r = o("rmd160").update(e).digest();
            return !0 === t ? (0, a.setLengthLeft)(r, 32) : r;
          };
          t.ripemd160 = function(e, t) {
            return (0, c.assertIsBuffer)(e), u(e, t);
          }, t.ripemd160FromString = function(e, t) {
            return (0, c.assertIsString)(e), u(e, t);
          }, t.ripemd160FromArray = function(e, t) {
            return (0, c.assertIsArray)(e), u(e, t);
          }, t.rlphash = function(e) {
            return (0, t.keccak)(s.rlp.encode(e));
          };
        },
        3746: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.assertIsString = t.assertIsArray = t.assertIsBuffer = t.assertIsHexString = void 0;
          var i = r(4846);
          t.assertIsHexString = function(e) {
            if (!(0, i.isHexString)(e)) {
              var t = "This method only supports 0x-prefixed hex strings but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsBuffer = function(e) {
            if (!n.isBuffer(e)) {
              var t = "This method only supports Buffer but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsArray = function(e) {
            if (!Array.isArray(e)) {
              var t = "This method only supports number arrays but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsString = function(e) {
            if ("string" != typeof e) {
              var t = "This method only supports strings but input was: ".concat(e);
              throw new Error(t);
            }
          };
        },
        2751: function(e, t, r) {
          "use strict";
          var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
            void 0 === n && (n = r);
            var i = Object.getOwnPropertyDescriptor(t, r);
            i && !("get" in i ? !t.__esModule : i.writable || i.configurable) || (i = {
              enumerable: !0,
              get: function() {
                return t[r];
              }
            }), Object.defineProperty(e, n, i);
          } : function(e, t, r, n) {
            void 0 === n && (n = r), e[n] = t[r];
          }), i = this && this.__exportStar || function(e, t) {
            for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isHexString = t.getKeys = t.fromAscii = t.fromUtf8 = t.toAscii = t.arrayContainsArray = t.getBinarySize = t.padToEven = t.stripHexPrefix = t.isHexPrefixed = void 0, 
          i(r(6861), t), i(r(8670), t), i(r(6871), t), i(r(5641), t), i(r(7112), t), i(r(4651), t), i(r(867), t), i(r(4538), t), i(r(2971), t);
          var o = r(4846);
          Object.defineProperty(t, "isHexPrefixed", {
            enumerable: !0,
            get: function() {
              return o.isHexPrefixed;
            }
          }), Object.defineProperty(t, "stripHexPrefix", {
            enumerable: !0,
            get: function() {
              return o.stripHexPrefix;
            }
          }), Object.defineProperty(t, "padToEven", {
            enumerable: !0,
            get: function() {
              return o.padToEven;
            }
          }), Object.defineProperty(t, "getBinarySize", {
            enumerable: !0,
            get: function() {
              return o.getBinarySize;
            }
          }), Object.defineProperty(t, "arrayContainsArray", {
            enumerable: !0,
            get: function() {
              return o.arrayContainsArray;
            }
          }), Object.defineProperty(t, "toAscii", {
            enumerable: !0,
            get: function() {
              return o.toAscii;
            }
          }), Object.defineProperty(t, "fromUtf8", {
            enumerable: !0,
            get: function() {
              return o.fromUtf8;
            }
          }), Object.defineProperty(t, "fromAscii", {
            enumerable: !0,
            get: function() {
              return o.fromAscii;
            }
          }), Object.defineProperty(t, "getKeys", {
            enumerable: !0,
            get: function() {
              return o.getKeys;
            }
          }), Object.defineProperty(t, "isHexString", {
            enumerable: !0,
            get: function() {
              return o.isHexString;
            }
          });
        },
        4846: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          function i(e) {
            if ("string" != typeof e) throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof e));
            return "0" === e[0] && "x" === e[1];
          }
          function o(e) {
            var t = e;
            if ("string" != typeof t) throw new Error("[padToEven] value must be type 'string', received ".concat(typeof t));
            return t.length % 2 && (t = "0".concat(t)), t;
          }
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isHexString = t.getKeys = t.fromAscii = t.fromUtf8 = t.toAscii = t.arrayContainsArray = t.getBinarySize = t.padToEven = t.stripHexPrefix = t.isHexPrefixed = void 0, 
          t.isHexPrefixed = i, t.stripHexPrefix = function(e) {
            if ("string" != typeof e) throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof e));
            return i(e) ? e.slice(2) : e;
          }, t.padToEven = o, t.getBinarySize = function(e) {
            if ("string" != typeof e) throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof e));
            return n.byteLength(e, "utf8");
          }, t.arrayContainsArray = function(e, t, r) {
            if (!0 !== Array.isArray(e)) throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof e, "'"));
            if (!0 !== Array.isArray(t)) throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof t, "'"));
            return t[r ? "some" : "every"]((function(t) {
              return e.indexOf(t) >= 0;
            }));
          }, t.toAscii = function(e) {
            var t = "", r = 0, n = e.length;
            for ("0x" === e.substring(0, 2) && (r = 2); r < n; r += 2) {
              var i = parseInt(e.substr(r, 2), 16);
              t += String.fromCharCode(i);
            }
            return t;
          }, t.fromUtf8 = function(e) {
            var t = n.from(e, "utf8");
            return "0x".concat(o(t.toString("hex")).replace(/^0+|0+$/g, ""));
          }, t.fromAscii = function(e) {
            for (var t = "", r = 0; r < e.length; r++) {
              var n = e.charCodeAt(r).toString(16);
              t += n.length < 2 ? "0".concat(n) : n;
            }
            return "0x".concat(t);
          }, t.getKeys = function(e, t, r) {
            if (!Array.isArray(e)) throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof e));
            if ("string" != typeof t) throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof e));
            for (var n = [], i = 0; i < e.length; i++) {
              var o = e[i][t];
              if (r && !o) o = ""; else if ("string" != typeof o) throw new Error("invalid abi - expected type 'string', received ".concat(typeof o));
              n.push(o);
            }
            return n;
          }, t.isHexString = function(e, t) {
            return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);
          };
        },
        867: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.defineProperties = void 0;
          var o = i(r(9282)), s = r(4846), a = r(4538), c = r(4651);
          t.defineProperties = function(e, t, r) {
            if (e.raw = [], e._fields = [], e.toJSON = function(t) {
              if (void 0 === t && (t = !1), t) {
                var r = {};
                return e._fields.forEach((function(t) {
                  r[t] = "0x".concat(e[t].toString("hex"));
                })), r;
              }
              return (0, c.baToJSON)(e.raw);
            }, e.serialize = function() {
              return a.rlp.encode(e.raw);
            }, t.forEach((function(t, r) {
              function i() {
                return e.raw[r];
              }
              function s(i) {
                "00" !== (i = (0, c.toBuffer)(i)).toString("hex") || t.allowZero || (i = n.allocUnsafe(0)), t.allowLess && t.length ? (i = (0, 
                c.unpadBuffer)(i), (0, o.default)(t.length >= i.length, "The field ".concat(t.name, " must not have more ").concat(t.length, " bytes"))) : t.allowZero && 0 === i.length || !t.length || (0, 
                o.default)(t.length === i.length, "The field ".concat(t.name, " must have byte length of ").concat(t.length)), e.raw[r] = i;
              }
              e._fields.push(t.name), Object.defineProperty(e, t.name, {
                enumerable: !0,
                configurable: !0,
                get: i,
                set: s
              }), t.default && (e[t.name] = t.default), t.alias && Object.defineProperty(e, t.alias, {
                enumerable: !1,
                configurable: !0,
                set: s,
                get: i
              });
            })), r) if ("string" == typeof r && (r = n.from((0, s.stripHexPrefix)(r), "hex")), n.isBuffer(r) && (r = a.rlp.decode(r)), 
            Array.isArray(r)) {
              if (r.length > e._fields.length) throw new Error("wrong number of fields in data");
              r.forEach((function(t, r) {
                e[e._fields[r]] = (0, c.toBuffer)(t);
              }));
            } else {
              if ("object" != typeof r) throw new Error("invalid data");
              var i = Object.keys(r);
              t.forEach((function(t) {
                -1 !== i.indexOf(t.name) && (e[t.name] = r[t.name]), -1 !== i.indexOf(t.alias) && (e[t.alias] = r[t.alias]);
              }));
            }
          };
        },
        7112: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.hashPersonalMessage = t.isValidSignature = t.fromRpcSig = t.toCompactSig = t.toRpcSig = t.ecrecover = t.ecsign = void 0;
          var i = r(5053), o = r(4538), s = r(4651), a = r(5641), c = r(3746), f = r(2971);
          function u(e, t) {
            var r = (0, f.toType)(e, f.TypeOutput.BN);
            if (r.eqn(0) || r.eqn(1)) return (0, f.toType)(e, f.TypeOutput.BN);
            if (!t) return r.subn(27);
            var n = (0, f.toType)(t, f.TypeOutput.BN);
            return r.sub(n.muln(2).addn(35));
          }
          function h(e) {
            var t = new o.BN(e);
            return t.eqn(0) || t.eqn(1);
          }
          t.ecsign = function(e, t, r) {
            var o = (0, i.ecdsaSign)(e, t), s = o.signature, a = o.recid, c = n.from(s.slice(0, 32)), u = n.from(s.slice(32, 64));
            if (!r || "number" == typeof r) {
              if (r && !Number.isSafeInteger(r)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
              return {
                r: c,
                s: u,
                v: r ? a + (2 * r + 35) : a + 27
              };
            }
            return {
              r: c,
              s: u,
              v: (0, f.toType)(r, f.TypeOutput.BN).muln(2).addn(35).addn(a).toArrayLike(n)
            };
          }, t.ecrecover = function(e, t, r, o, a) {
            var c = n.concat([ (0, s.setLengthLeft)(r, 32), (0, s.setLengthLeft)(o, 32) ], 64), f = u(t, a);
            if (!h(f)) throw new Error("Invalid signature v value");
            var d = (0, i.ecdsaRecover)(c, f.toNumber(), e);
            return n.from((0, i.publicKeyConvert)(d, !1).slice(1));
          }, t.toRpcSig = function(e, t, r, i) {
            if (!h(u(e, i))) throw new Error("Invalid signature v value");
            return (0, s.bufferToHex)(n.concat([ (0, s.setLengthLeft)(t, 32), (0, s.setLengthLeft)(r, 32), (0, s.toBuffer)(e) ]));
          }, t.toCompactSig = function(e, t, r, i) {
            if (!h(u(e, i))) throw new Error("Invalid signature v value");
            var o = (0, f.toType)(e, f.TypeOutput.Number), a = r;
            return (o > 28 && o % 2 == 1 || 1 === o || 28 === o) && ((a = n.from(r))[0] |= 128), (0, s.bufferToHex)(n.concat([ (0, s.setLengthLeft)(t, 32), (0, 
            s.setLengthLeft)(a, 32) ]));
          }, t.fromRpcSig = function(e) {
            var t, r, n, i = (0, s.toBuffer)(e);
            if (i.length >= 65) t = i.slice(0, 32), r = i.slice(32, 64), n = (0, s.bufferToInt)(i.slice(64)); else {
              if (64 !== i.length) throw new Error("Invalid signature length");
              t = i.slice(0, 32), r = i.slice(32, 64), n = (0, s.bufferToInt)(i.slice(32, 33)) >> 7, r[0] &= 127;
            }
            return n < 27 && (n += 27), {
              v: n,
              r: t,
              s: r
            };
          }, t.isValidSignature = function(e, t, r, n, i) {
            void 0 === n && (n = !0);
            var s = new o.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16), a = new o.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
            if (32 !== t.length || 32 !== r.length) return !1;
            if (!h(u(e, i))) return !1;
            var c = new o.BN(t), f = new o.BN(r);
            return !(c.isZero() || c.gt(a) || f.isZero() || f.gt(a) || n && 1 === f.cmp(s));
          }, t.hashPersonalMessage = function(e) {
            (0, c.assertIsBuffer)(e);
            var t = n.from("Ethereum Signed Message:\n".concat(e.length), "utf-8");
            return (0, a.keccak)(n.concat([ t, e ]));
          };
        },
        2971: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.toType = t.TypeOutput = t.bnToRlp = t.bnToUnpaddedBuffer = t.bnToHex = void 0;
          var i, o = r(4538), s = r(4846), a = r(4651);
          function c(e) {
            return (0, a.unpadBuffer)(e.toArrayLike(n));
          }
          t.bnToHex = function(e) {
            return "0x".concat(e.toString(16));
          }, t.bnToUnpaddedBuffer = c, t.bnToRlp = function(e) {
            return c(e);
          }, function(e) {
            e[e.Number = 0] = "Number", e[e.BN = 1] = "BN", e[e.Buffer = 2] = "Buffer", e[e.PrefixedHexString = 3] = "PrefixedHexString";
          }(i = t.TypeOutput || (t.TypeOutput = {})), t.toType = function(e, t) {
            if (null === e) return null;
            if (void 0 !== e) {
              if ("string" == typeof e && !(0, s.isHexString)(e)) throw new Error("A string must be provided with a 0x-prefix, given: ".concat(e));
              if ("number" == typeof e && !Number.isSafeInteger(e)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
              var r = (0, a.toBuffer)(e);
              if (t === i.Buffer) return r;
              if (t === i.BN) return new o.BN(r);
              if (t === i.Number) {
                var n = new o.BN(r), c = new o.BN(Number.MAX_SAFE_INTEGER.toString());
                if (n.gt(c)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
                return n.toNumber();
              }
              return "0x".concat(r.toString("hex"));
            }
          };
        },
        4278: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(3206), o = new n(0), s = new n(-1), a = {
            noether: "0",
            wei: "1",
            kwei: "1000",
            Kwei: "1000",
            babbage: "1000",
            femtoether: "1000",
            mwei: "1000000",
            Mwei: "1000000",
            lovelace: "1000000",
            picoether: "1000000",
            gwei: "1000000000",
            Gwei: "1000000000",
            shannon: "1000000000",
            nanoether: "1000000000",
            nano: "1000000000",
            szabo: "1000000000000",
            microether: "1000000000000",
            micro: "1000000000000",
            finney: "1000000000000000",
            milliether: "1000000000000000",
            milli: "1000000000000000",
            ether: "1000000000000000000",
            kether: "1000000000000000000000",
            grand: "1000000000000000000000",
            mether: "1000000000000000000000000",
            gether: "1000000000000000000000000000",
            tether: "1000000000000000000000000000000"
          };
          function c(e) {
            var t = e ? e.toLowerCase() : "ether", r = a[t];
            if ("string" != typeof r) throw new Error("[ethjs-unit] the unit provided " + e + " doesn't exists, please use the one of the following units " + JSON.stringify(a, null, 2));
            return new n(r, 10);
          }
          function f(e) {
            if ("string" == typeof e) {
              if (!e.match(/^-?[0-9.]+$/)) throw new Error("while converting number to string, invalid number value '" + e + "', should be a number matching (^-?[0-9.]+).");
              return e;
            }
            if ("number" == typeof e) return String(e);
            if ("object" == typeof e && e.toString && (e.toTwos || e.dividedToIntegerBy)) return e.toPrecision ? String(e.toPrecision()) : e.toString(10);
            throw new Error("while converting number to string, invalid number value '" + e + "' type " + typeof e + ".");
          }
          e.exports = {
            unitMap: a,
            numberToString: f,
            getValueOfUnit: c,
            fromWei: function(e, t, r) {
              var n = i(e), f = n.lt(o), u = c(t), h = a[t].length - 1 || 1, d = r || {};
              f && (n = n.mul(s));
              for (var l = n.mod(u).toString(10); l.length < h; ) l = "0" + l;
              d.pad || (l = l.match(/^([0-9]*[1-9]|0)(0*)/)[1]);
              var p = n.div(u).toString(10);
              d.commify && (p = p.replace(/\B(?=(\d{3})+(?!\d))/g, ","));
              var b = p + ("0" == l ? "" : "." + l);
              return f && (b = "-" + b), b;
            },
            toWei: function(e, t) {
              var r = f(e), i = c(t), o = a[t].length - 1 || 1, u = "-" === r.substring(0, 1);
              if (u && (r = r.substring(1)), "." === r) throw new Error("[ethjs-unit] while converting number " + e + " to wei, invalid value");
              var h = r.split(".");
              if (h.length > 2) throw new Error("[ethjs-unit] while converting number " + e + " to wei,  too many decimal points");
              var d = h[0], l = h[1];
              if (d || (d = "0"), l || (l = "0"), l.length > o) throw new Error("[ethjs-unit] while converting number " + e + " to wei, too many decimal places");
              for (;l.length < o; ) l += "0";
              d = new n(d), l = new n(l);
              var p = d.mul(i).add(l);
              return u && (p = p.mul(s)), new n(p.toString(10), 10);
            }
          };
        },
        6729: e => {
          "use strict";
          var t = Object.prototype.hasOwnProperty, r = "~";
          function n() {}
          function i(e, t, r) {
            this.fn = e, this.context = t, this.once = r || !1;
          }
          function o(e, t, n, o, s) {
            if ("function" != typeof n) throw new TypeError("The listener must be a function");
            var a = new i(n, o || e, s), c = r ? r + t : t;
            return e._events[c] ? e._events[c].fn ? e._events[c] = [ e._events[c], a ] : e._events[c].push(a) : (e._events[c] = a, e._eventsCount++), 
            e;
          }
          function s(e, t) {
            0 == --e._eventsCount ? e._events = new n : delete e._events[t];
          }
          function a() {
            this._events = new n, this._eventsCount = 0;
          }
          Object.create && (n.prototype = Object.create(null), (new n).__proto__ || (r = !1)), a.prototype.eventNames = function() {
            var e, n, i = [];
            if (0 === this._eventsCount) return i;
            for (n in e = this._events) t.call(e, n) && i.push(r ? n.slice(1) : n);
            return Object.getOwnPropertySymbols ? i.concat(Object.getOwnPropertySymbols(e)) : i;
          }, a.prototype.listeners = function(e) {
            var t = r ? r + e : e, n = this._events[t];
            if (!n) return [];
            if (n.fn) return [ n.fn ];
            for (var i = 0, o = n.length, s = new Array(o); i < o; i++) s[i] = n[i].fn;
            return s;
          }, a.prototype.listenerCount = function(e) {
            var t = r ? r + e : e, n = this._events[t];
            return n ? n.fn ? 1 : n.length : 0;
          }, a.prototype.emit = function(e, t, n, i, o, s) {
            var a = r ? r + e : e;
            if (!this._events[a]) return !1;
            var c, f, u = this._events[a], h = arguments.length;
            if (u.fn) {
              switch (u.once && this.removeListener(e, u.fn, void 0, !0), h) {
               case 1:
                return u.fn.call(u.context), !0;

               case 2:
                return u.fn.call(u.context, t), !0;

               case 3:
                return u.fn.call(u.context, t, n), !0;

               case 4:
                return u.fn.call(u.context, t, n, i), !0;

               case 5:
                return u.fn.call(u.context, t, n, i, o), !0;

               case 6:
                return u.fn.call(u.context, t, n, i, o, s), !0;
              }
              for (f = 1, c = new Array(h - 1); f < h; f++) c[f - 1] = arguments[f];
              u.fn.apply(u.context, c);
            } else {
              var d, l = u.length;
              for (f = 0; f < l; f++) switch (u[f].once && this.removeListener(e, u[f].fn, void 0, !0), h) {
               case 1:
                u[f].fn.call(u[f].context);
                break;

               case 2:
                u[f].fn.call(u[f].context, t);
                break;

               case 3:
                u[f].fn.call(u[f].context, t, n);
                break;

               case 4:
                u[f].fn.call(u[f].context, t, n, i);
                break;

               default:
                if (!c) for (d = 1, c = new Array(h - 1); d < h; d++) c[d - 1] = arguments[d];
                u[f].fn.apply(u[f].context, c);
              }
            }
            return !0;
          }, a.prototype.on = function(e, t, r) {
            return o(this, e, t, r, !1);
          }, a.prototype.once = function(e, t, r) {
            return o(this, e, t, r, !0);
          }, a.prototype.removeListener = function(e, t, n, i) {
            var o = r ? r + e : e;
            if (!this._events[o]) return this;
            if (!t) return s(this, o), this;
            var a = this._events[o];
            if (a.fn) a.fn !== t || i && !a.once || n && a.context !== n || s(this, o); else {
              for (var c = 0, f = [], u = a.length; c < u; c++) (a[c].fn !== t || i && !a[c].once || n && a[c].context !== n) && f.push(a[c]);
              f.length ? this._events[o] = 1 === f.length ? f[0] : f : s(this, o);
            }
            return this;
          }, a.prototype.removeAllListeners = function(e) {
            var t;
            return e ? (t = r ? r + e : e, this._events[t] && s(this, t)) : (this._events = new n, this._eventsCount = 0), this;
          }, a.prototype.off = a.prototype.removeListener, a.prototype.addListener = a.prototype.on, a.prefixed = r, a.EventEmitter = a, 
          e.exports = a;
        },
        7187: e => {
          "use strict";
          var t, r = "object" == typeof Reflect ? Reflect : null, i = r && "function" == typeof r.apply ? r.apply : function(e, t, r) {
            return Function.prototype.apply.call(e, t, r);
          };
          t = r && "function" == typeof r.ownKeys ? r.ownKeys : Object.getOwnPropertySymbols ? function(e) {
            return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
          } : function(e) {
            return Object.getOwnPropertyNames(e);
          };
          var o = Number.isNaN || function(e) {
            return e != e;
          };
          function s() {
            s.init.call(this);
          }
          e.exports = s, e.exports.once = function(e, t) {
            return new Promise((function(r, n) {
              function i(r) {
                e.removeListener(t, o), n(r);
              }
              function o() {
                "function" == typeof e.removeListener && e.removeListener("error", i), r([].slice.call(arguments));
              }
              y(e, t, o, {
                once: !0
              }), "error" !== t && function(e, t, r) {
                "function" == typeof e.on && y(e, "error", t, {
                  once: !0
                });
              }(e, i);
            }));
          }, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._eventsCount = 0, s.prototype._maxListeners = void 0;
          var a = 10;
          function c(e) {
            if ("function" != typeof e) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
          }
          function f(e) {
            return void 0 === e._maxListeners ? s.defaultMaxListeners : e._maxListeners;
          }
          function u(e, t, r, i) {
            var o, s, a, u;
            if (c(r), void 0 === (s = e._events) ? (s = e._events = Object.create(null), e._eventsCount = 0) : (void 0 !== s.newListener && (e.emit("newListener", t, r.listener ? r.listener : r), 
            s = e._events), a = s[t]), void 0 === a) a = s[t] = r, ++e._eventsCount; else if ("function" == typeof a ? a = s[t] = i ? [ r, a ] : [ a, r ] : i ? a.unshift(r) : a.push(r), 
            (o = f(e)) > 0 && a.length > o && !a.warned) {
              a.warned = !0;
              var h = new Error("Possible EventEmitter memory leak detected. " + a.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              h.name = "MaxListenersExceededWarning", h.emitter = e, h.type = t, h.count = a.length, u = h, n && n.warn && n.warn(u);
            }
            return e;
          }
          function h() {
            if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
          }
          function d(e, t, r) {
            var n = {
              fired: !1,
              wrapFn: void 0,
              target: e,
              type: t,
              listener: r
            }, i = h.bind(n);
            return i.listener = r, n.wrapFn = i, i;
          }
          function l(e, t, r) {
            var n = e._events;
            if (void 0 === n) return [];
            var i = n[t];
            return void 0 === i ? [] : "function" == typeof i ? r ? [ i.listener || i ] : [ i ] : r ? function(e) {
              for (var t = new Array(e.length), r = 0; r < t.length; ++r) t[r] = e[r].listener || e[r];
              return t;
            }(i) : b(i, i.length);
          }
          function p(e) {
            var t = this._events;
            if (void 0 !== t) {
              var r = t[e];
              if ("function" == typeof r) return 1;
              if (void 0 !== r) return r.length;
            }
            return 0;
          }
          function b(e, t) {
            for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];
            return r;
          }
          function y(e, t, r, n) {
            if ("function" == typeof e.on) n.once ? e.once(t, r) : e.on(t, r); else {
              if ("function" != typeof e.addEventListener) throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
              e.addEventListener(t, (function i(o) {
                n.once && e.removeEventListener(t, i), r(o);
              }));
            }
          }
          Object.defineProperty(s, "defaultMaxListeners", {
            enumerable: !0,
            get: function() {
              return a;
            },
            set: function(e) {
              if ("number" != typeof e || e < 0 || o(e)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
              a = e;
            }
          }), s.init = function() {
            void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), 
            this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
          }, s.prototype.setMaxListeners = function(e) {
            if ("number" != typeof e || e < 0 || o(e)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
            return this._maxListeners = e, this;
          }, s.prototype.getMaxListeners = function() {
            return f(this);
          }, s.prototype.emit = function(e) {
            for (var t = [], r = 1; r < arguments.length; r++) t.push(arguments[r]);
            var n = "error" === e, o = this._events;
            if (void 0 !== o) n = n && void 0 === o.error; else if (!n) return !1;
            if (n) {
              var s;
              if (t.length > 0 && (s = t[0]), s instanceof Error) throw s;
              var a = new Error("Unhandled error." + (s ? " (" + s.message + ")" : ""));
              throw a.context = s, a;
            }
            var c = o[e];
            if (void 0 === c) return !1;
            if ("function" == typeof c) i(c, this, t); else {
              var f = c.length, u = b(c, f);
              for (r = 0; r < f; ++r) i(u[r], this, t);
            }
            return !0;
          }, s.prototype.addListener = function(e, t) {
            return u(this, e, t, !1);
          }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function(e, t) {
            return u(this, e, t, !0);
          }, s.prototype.once = function(e, t) {
            return c(t), this.on(e, d(this, e, t)), this;
          }, s.prototype.prependOnceListener = function(e, t) {
            return c(t), this.prependListener(e, d(this, e, t)), this;
          }, s.prototype.removeListener = function(e, t) {
            var r, n, i, o, s;
            if (c(t), void 0 === (n = this._events)) return this;
            if (void 0 === (r = n[e])) return this;
            if (r === t || r.listener === t) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete n[e], n.removeListener && this.emit("removeListener", e, r.listener || t)); else if ("function" != typeof r) {
              for (i = -1, o = r.length - 1; o >= 0; o--) if (r[o] === t || r[o].listener === t) {
                s = r[o].listener, i = o;
                break;
              }
              if (i < 0) return this;
              0 === i ? r.shift() : function(e, t) {
                for (;t + 1 < e.length; t++) e[t] = e[t + 1];
                e.pop();
              }(r, i), 1 === r.length && (n[e] = r[0]), void 0 !== n.removeListener && this.emit("removeListener", e, s || t);
            }
            return this;
          }, s.prototype.off = s.prototype.removeListener, s.prototype.removeAllListeners = function(e) {
            var t, r, n;
            if (void 0 === (r = this._events)) return this;
            if (void 0 === r.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== r[e] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete r[e]), 
            this;
            if (0 === arguments.length) {
              var i, o = Object.keys(r);
              for (n = 0; n < o.length; ++n) "removeListener" !== (i = o[n]) && this.removeAllListeners(i);
              return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
            }
            if ("function" == typeof (t = r[e])) this.removeListener(e, t); else if (void 0 !== t) for (n = t.length - 1; n >= 0; n--) this.removeListener(e, t[n]);
            return this;
          }, s.prototype.listeners = function(e) {
            return l(this, e, !0);
          }, s.prototype.rawListeners = function(e) {
            return l(this, e, !1);
          }, s.listenerCount = function(e, t) {
            return "function" == typeof e.listenerCount ? e.listenerCount(t) : p.call(e, t);
          }, s.prototype.listenerCount = p, s.prototype.eventNames = function() {
            return this._eventsCount > 0 ? t(this._events) : [];
          };
        },
        3048: (e, t, r) => {
          var n = r(9509).Buffer, i = r(2318);
          e.exports = function(e, t, r, o) {
            if (n.isBuffer(e) || (e = n.from(e, "binary")), t && (n.isBuffer(t) || (t = n.from(t, "binary")), 8 !== t.length)) throw new RangeError("salt should be Buffer with 8 byte length");
            for (var s = r / 8, a = n.alloc(s), c = n.alloc(o || 0), f = n.alloc(0); s > 0 || o > 0; ) {
              var u = new i;
              u.update(f), u.update(e), t && u.update(t), f = u.digest();
              var h = 0;
              if (s > 0) {
                var d = a.length - s;
                h = Math.min(s, f.length), f.copy(a, d, 0, h), s -= h;
              }
              if (h < f.length && o > 0) {
                var l = c.length - o, p = Math.min(o, f.length - h);
                f.copy(c, l, h, h + p), o -= p;
              }
            }
            return f.fill(0), {
              key: a,
              iv: c
            };
          };
        },
        4063: e => {
          "use strict";
          e.exports = function e(t, r) {
            if (t === r) return !0;
            if (t && r && "object" == typeof t && "object" == typeof r) {
              if (t.constructor !== r.constructor) return !1;
              var n, i, o;
              if (Array.isArray(t)) {
                if ((n = t.length) != r.length) return !1;
                for (i = n; 0 != i--; ) if (!e(t[i], r[i])) return !1;
                return !0;
              }
              if (t.constructor === RegExp) return t.source === r.source && t.flags === r.flags;
              if (t.valueOf !== Object.prototype.valueOf) return t.valueOf() === r.valueOf();
              if (t.toString !== Object.prototype.toString) return t.toString() === r.toString();
              if ((n = (o = Object.keys(t)).length) !== Object.keys(r).length) return !1;
              for (i = n; 0 != i--; ) if (!Object.prototype.hasOwnProperty.call(r, o[i])) return !1;
              for (i = n; 0 != i--; ) {
                var s = o[i];
                if (!e(t[s], r[s])) return !1;
              }
              return !0;
            }
            return t != t && r != r;
          };
        },
        4445: e => {
          e.exports = s, s.default = s, s.stable = u, s.stableStringify = u;
          var t = "[...]", r = "[Circular]", n = [], i = [];
          function o() {
            return {
              depthLimit: Number.MAX_SAFE_INTEGER,
              edgesLimit: Number.MAX_SAFE_INTEGER
            };
          }
          function s(e, t, r, s) {
            var a;
            void 0 === s && (s = o()), c(e, "", 0, [], void 0, 0, s);
            try {
              a = 0 === i.length ? JSON.stringify(e, t, r) : JSON.stringify(e, d(t), r);
            } catch (e) {
              return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
            } finally {
              for (;0 !== n.length; ) {
                var f = n.pop();
                4 === f.length ? Object.defineProperty(f[0], f[1], f[3]) : f[0][f[1]] = f[2];
              }
            }
            return a;
          }
          function a(e, t, r, o) {
            var s = Object.getOwnPropertyDescriptor(o, r);
            void 0 !== s.get ? s.configurable ? (Object.defineProperty(o, r, {
              value: e
            }), n.push([ o, r, t, s ])) : i.push([ t, r, e ]) : (o[r] = e, n.push([ o, r, t ]));
          }
          function c(e, n, i, o, s, f, u) {
            var h;
            if (f += 1, "object" == typeof e && null !== e) {
              for (h = 0; h < o.length; h++) if (o[h] === e) return void a(r, e, n, s);
              if (void 0 !== u.depthLimit && f > u.depthLimit) return void a(t, e, n, s);
              if (void 0 !== u.edgesLimit && i + 1 > u.edgesLimit) return void a(t, e, n, s);
              if (o.push(e), Array.isArray(e)) for (h = 0; h < e.length; h++) c(e[h], h, h, o, e, f, u); else {
                var d = Object.keys(e);
                for (h = 0; h < d.length; h++) {
                  var l = d[h];
                  c(e[l], l, h, o, e, f, u);
                }
              }
              o.pop();
            }
          }
          function f(e, t) {
            return e < t ? -1 : e > t ? 1 : 0;
          }
          function u(e, t, r, s) {
            void 0 === s && (s = o());
            var a, c = h(e, "", 0, [], void 0, 0, s) || e;
            try {
              a = 0 === i.length ? JSON.stringify(c, t, r) : JSON.stringify(c, d(t), r);
            } catch (e) {
              return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
            } finally {
              for (;0 !== n.length; ) {
                var f = n.pop();
                4 === f.length ? Object.defineProperty(f[0], f[1], f[3]) : f[0][f[1]] = f[2];
              }
            }
            return a;
          }
          function h(e, i, o, s, c, u, d) {
            var l;
            if (u += 1, "object" == typeof e && null !== e) {
              for (l = 0; l < s.length; l++) if (s[l] === e) return void a(r, e, i, c);
              try {
                if ("function" == typeof e.toJSON) return;
              } catch (e) {
                return;
              }
              if (void 0 !== d.depthLimit && u > d.depthLimit) return void a(t, e, i, c);
              if (void 0 !== d.edgesLimit && o + 1 > d.edgesLimit) return void a(t, e, i, c);
              if (s.push(e), Array.isArray(e)) for (l = 0; l < e.length; l++) h(e[l], l, l, s, e, u, d); else {
                var p = {}, b = Object.keys(e).sort(f);
                for (l = 0; l < b.length; l++) {
                  var y = b[l];
                  h(e[y], y, l, s, e, u, d), p[y] = e[y];
                }
                if (void 0 === c) return p;
                n.push([ c, i, e ]), c[i] = p;
              }
              s.pop();
            }
          }
          function d(e) {
            return e = void 0 !== e ? e : function(e, t) {
              return t;
            }, function(t, r) {
              if (i.length > 0) for (var n = 0; n < i.length; n++) {
                var o = i[n];
                if (o[1] === t && o[0] === r) {
                  r = o[2], i.splice(n, 1);
                  break;
                }
              }
              return e.call(this, t, r);
            };
          }
        },
        4029: (e, t, r) => {
          "use strict";
          var n = r(5320), i = Object.prototype.toString, o = Object.prototype.hasOwnProperty, s = function(e, t, r) {
            for (var n = 0, i = e.length; n < i; n++) o.call(e, n) && (null == r ? t(e[n], n, e) : t.call(r, e[n], n, e));
          }, a = function(e, t, r) {
            for (var n = 0, i = e.length; n < i; n++) null == r ? t(e.charAt(n), n, e) : t.call(r, e.charAt(n), n, e);
          }, c = function(e, t, r) {
            for (var n in e) o.call(e, n) && (null == r ? t(e[n], n, e) : t.call(r, e[n], n, e));
          };
          e.exports = function(e, t, r) {
            if (!n(t)) throw new TypeError("iterator must be a function");
            var o;
            arguments.length >= 3 && (o = r), "[object Array]" === i.call(e) ? s(e, t, o) : "string" == typeof e ? a(e, t, o) : c(e, t, o);
          };
        },
        7648: e => {
          "use strict";
          var t = "Function.prototype.bind called on incompatible ", r = Array.prototype.slice, n = Object.prototype.toString, i = "[object Function]";
          e.exports = function(e) {
            var o = this;
            if ("function" != typeof o || n.call(o) !== i) throw new TypeError(t + o);
            for (var s, a = r.call(arguments, 1), c = function() {
              if (this instanceof s) {
                var t = o.apply(this, a.concat(r.call(arguments)));
                return Object(t) === t ? t : this;
              }
              return o.apply(e, a.concat(r.call(arguments)));
            }, f = Math.max(0, o.length - a.length), u = [], h = 0; h < f; h++) u.push("$" + h);
            if (s = Function("binder", "return function (" + u.join(",") + "){ return binder.apply(this,arguments); }")(c), o.prototype) {
              var d = function() {};
              d.prototype = o.prototype, s.prototype = new d, d.prototype = null;
            }
            return s;
          };
        },
        8612: (e, t, r) => {
          "use strict";
          var n = r(7648);
          e.exports = Function.prototype.bind || n;
        },
        210: (e, t, r) => {
          "use strict";
          var n, i = SyntaxError, o = Function, s = TypeError, a = function(e) {
            try {
              return o('"use strict"; return (' + e + ").constructor;")();
            } catch (e) {}
          }, c = Object.getOwnPropertyDescriptor;
          if (c) try {
            c({}, "");
          } catch (e) {
            c = null;
          }
          var f = function() {
            throw new s;
          }, u = c ? function() {
            try {
              return f;
            } catch (e) {
              try {
                return c(arguments, "callee").get;
              } catch (e) {
                return f;
              }
            }
          }() : f, h = r(1405)(), d = Object.getPrototypeOf || function(e) {
            return e.__proto__;
          }, l = {}, p = "undefined" == typeof Uint8Array ? n : d(Uint8Array), b = {
            "%AggregateError%": "undefined" == typeof AggregateError ? n : AggregateError,
            "%Array%": Array,
            "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? n : ArrayBuffer,
            "%ArrayIteratorPrototype%": h ? d([][Symbol.iterator]()) : n,
            "%AsyncFromSyncIteratorPrototype%": n,
            "%AsyncFunction%": l,
            "%AsyncGenerator%": l,
            "%AsyncGeneratorFunction%": l,
            "%AsyncIteratorPrototype%": l,
            "%Atomics%": "undefined" == typeof Atomics ? n : Atomics,
            "%BigInt%": "undefined" == typeof BigInt ? n : BigInt,
            "%Boolean%": Boolean,
            "%DataView%": "undefined" == typeof DataView ? n : DataView,
            "%Date%": Date,
            "%decodeURI%": decodeURI,
            "%decodeURIComponent%": decodeURIComponent,
            "%encodeURI%": encodeURI,
            "%encodeURIComponent%": encodeURIComponent,
            "%Error%": Error,
            "%eval%": eval,
            "%EvalError%": EvalError,
            "%Float32Array%": "undefined" == typeof Float32Array ? n : Float32Array,
            "%Float64Array%": "undefined" == typeof Float64Array ? n : Float64Array,
            "%FinalizationRegistry%": "undefined" == typeof FinalizationRegistry ? n : FinalizationRegistry,
            "%Function%": o,
            "%GeneratorFunction%": l,
            "%Int8Array%": "undefined" == typeof Int8Array ? n : Int8Array,
            "%Int16Array%": "undefined" == typeof Int16Array ? n : Int16Array,
            "%Int32Array%": "undefined" == typeof Int32Array ? n : Int32Array,
            "%isFinite%": isFinite,
            "%isNaN%": isNaN,
            "%IteratorPrototype%": h ? d(d([][Symbol.iterator]())) : n,
            "%JSON%": "object" == typeof JSON ? JSON : n,
            "%Map%": "undefined" == typeof Map ? n : Map,
            "%MapIteratorPrototype%": "undefined" != typeof Map && h ? d((new Map)[Symbol.iterator]()) : n,
            "%Math%": Math,
            "%Number%": Number,
            "%Object%": Object,
            "%parseFloat%": parseFloat,
            "%parseInt%": parseInt,
            "%Promise%": "undefined" == typeof Promise ? n : Promise,
            "%Proxy%": "undefined" == typeof Proxy ? n : Proxy,
            "%RangeError%": RangeError,
            "%ReferenceError%": ReferenceError,
            "%Reflect%": "undefined" == typeof Reflect ? n : Reflect,
            "%RegExp%": RegExp,
            "%Set%": "undefined" == typeof Set ? n : Set,
            "%SetIteratorPrototype%": "undefined" != typeof Set && h ? d((new Set)[Symbol.iterator]()) : n,
            "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? n : SharedArrayBuffer,
            "%String%": String,
            "%StringIteratorPrototype%": h ? d(""[Symbol.iterator]()) : n,
            "%Symbol%": h ? Symbol : n,
            "%SyntaxError%": i,
            "%ThrowTypeError%": u,
            "%TypedArray%": p,
            "%TypeError%": s,
            "%Uint8Array%": "undefined" == typeof Uint8Array ? n : Uint8Array,
            "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? n : Uint8ClampedArray,
            "%Uint16Array%": "undefined" == typeof Uint16Array ? n : Uint16Array,
            "%Uint32Array%": "undefined" == typeof Uint32Array ? n : Uint32Array,
            "%URIError%": URIError,
            "%WeakMap%": "undefined" == typeof WeakMap ? n : WeakMap,
            "%WeakRef%": "undefined" == typeof WeakRef ? n : WeakRef,
            "%WeakSet%": "undefined" == typeof WeakSet ? n : WeakSet
          }, y = function e(t) {
            var r;
            if ("%AsyncFunction%" === t) r = a("async function () {}"); else if ("%GeneratorFunction%" === t) r = a("function* () {}"); else if ("%AsyncGeneratorFunction%" === t) r = a("async function* () {}"); else if ("%AsyncGenerator%" === t) {
              var n = e("%AsyncGeneratorFunction%");
              n && (r = n.prototype);
            } else if ("%AsyncIteratorPrototype%" === t) {
              var i = e("%AsyncGenerator%");
              i && (r = d(i.prototype));
            }
            return b[t] = r, r;
          }, g = {
            "%ArrayBufferPrototype%": [ "ArrayBuffer", "prototype" ],
            "%ArrayPrototype%": [ "Array", "prototype" ],
            "%ArrayProto_entries%": [ "Array", "prototype", "entries" ],
            "%ArrayProto_forEach%": [ "Array", "prototype", "forEach" ],
            "%ArrayProto_keys%": [ "Array", "prototype", "keys" ],
            "%ArrayProto_values%": [ "Array", "prototype", "values" ],
            "%AsyncFunctionPrototype%": [ "AsyncFunction", "prototype" ],
            "%AsyncGenerator%": [ "AsyncGeneratorFunction", "prototype" ],
            "%AsyncGeneratorPrototype%": [ "AsyncGeneratorFunction", "prototype", "prototype" ],
            "%BooleanPrototype%": [ "Boolean", "prototype" ],
            "%DataViewPrototype%": [ "DataView", "prototype" ],
            "%DatePrototype%": [ "Date", "prototype" ],
            "%ErrorPrototype%": [ "Error", "prototype" ],
            "%EvalErrorPrototype%": [ "EvalError", "prototype" ],
            "%Float32ArrayPrototype%": [ "Float32Array", "prototype" ],
            "%Float64ArrayPrototype%": [ "Float64Array", "prototype" ],
            "%FunctionPrototype%": [ "Function", "prototype" ],
            "%Generator%": [ "GeneratorFunction", "prototype" ],
            "%GeneratorPrototype%": [ "GeneratorFunction", "prototype", "prototype" ],
            "%Int8ArrayPrototype%": [ "Int8Array", "prototype" ],
            "%Int16ArrayPrototype%": [ "Int16Array", "prototype" ],
            "%Int32ArrayPrototype%": [ "Int32Array", "prototype" ],
            "%JSONParse%": [ "JSON", "parse" ],
            "%JSONStringify%": [ "JSON", "stringify" ],
            "%MapPrototype%": [ "Map", "prototype" ],
            "%NumberPrototype%": [ "Number", "prototype" ],
            "%ObjectPrototype%": [ "Object", "prototype" ],
            "%ObjProto_toString%": [ "Object", "prototype", "toString" ],
            "%ObjProto_valueOf%": [ "Object", "prototype", "valueOf" ],
            "%PromisePrototype%": [ "Promise", "prototype" ],
            "%PromiseProto_then%": [ "Promise", "prototype", "then" ],
            "%Promise_all%": [ "Promise", "all" ],
            "%Promise_reject%": [ "Promise", "reject" ],
            "%Promise_resolve%": [ "Promise", "resolve" ],
            "%RangeErrorPrototype%": [ "RangeError", "prototype" ],
            "%ReferenceErrorPrototype%": [ "ReferenceError", "prototype" ],
            "%RegExpPrototype%": [ "RegExp", "prototype" ],
            "%SetPrototype%": [ "Set", "prototype" ],
            "%SharedArrayBufferPrototype%": [ "SharedArrayBuffer", "prototype" ],
            "%StringPrototype%": [ "String", "prototype" ],
            "%SymbolPrototype%": [ "Symbol", "prototype" ],
            "%SyntaxErrorPrototype%": [ "SyntaxError", "prototype" ],
            "%TypedArrayPrototype%": [ "TypedArray", "prototype" ],
            "%TypeErrorPrototype%": [ "TypeError", "prototype" ],
            "%Uint8ArrayPrototype%": [ "Uint8Array", "prototype" ],
            "%Uint8ClampedArrayPrototype%": [ "Uint8ClampedArray", "prototype" ],
            "%Uint16ArrayPrototype%": [ "Uint16Array", "prototype" ],
            "%Uint32ArrayPrototype%": [ "Uint32Array", "prototype" ],
            "%URIErrorPrototype%": [ "URIError", "prototype" ],
            "%WeakMapPrototype%": [ "WeakMap", "prototype" ],
            "%WeakSetPrototype%": [ "WeakSet", "prototype" ]
          }, m = r(8612), v = r(7642), w = m.call(Function.call, Array.prototype.concat), _ = m.call(Function.apply, Array.prototype.splice), S = m.call(Function.call, String.prototype.replace), E = m.call(Function.call, String.prototype.slice), A = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, x = /\\(\\)?/g, k = function(e) {
            var t = E(e, 0, 1), r = E(e, -1);
            if ("%" === t && "%" !== r) throw new i("invalid intrinsic syntax, expected closing `%`");
            if ("%" === r && "%" !== t) throw new i("invalid intrinsic syntax, expected opening `%`");
            var n = [];
            return S(e, A, (function(e, t, r, i) {
              n[n.length] = r ? S(i, x, "$1") : t || e;
            })), n;
          }, P = function(e, t) {
            var r, n = e;
            if (v(g, n) && (n = "%" + (r = g[n])[0] + "%"), v(b, n)) {
              var o = b[n];
              if (o === l && (o = y(n)), void 0 === o && !t) throw new s("intrinsic " + e + " exists, but is not available. Please file an issue!");
              return {
                alias: r,
                name: n,
                value: o
              };
            }
            throw new i("intrinsic " + e + " does not exist!");
          };
          e.exports = function(e, t) {
            if ("string" != typeof e || 0 === e.length) throw new s("intrinsic name must be a non-empty string");
            if (arguments.length > 1 && "boolean" != typeof t) throw new s('"allowMissing" argument must be a boolean');
            var r = k(e), n = r.length > 0 ? r[0] : "", o = P("%" + n + "%", t), a = o.name, f = o.value, u = !1, h = o.alias;
            h && (n = h[0], _(r, w([ 0, 1 ], h)));
            for (var d = 1, l = !0; d < r.length; d += 1) {
              var p = r[d], y = E(p, 0, 1), g = E(p, -1);
              if (('"' === y || "'" === y || "`" === y || '"' === g || "'" === g || "`" === g) && y !== g) throw new i("property names with quotes must have matching quotes");
              if ("constructor" !== p && l || (u = !0), v(b, a = "%" + (n += "." + p) + "%")) f = b[a]; else if (null != f) {
                if (!(p in f)) {
                  if (!t) throw new s("base intrinsic for " + e + " exists, but the property is not available.");
                  return;
                }
                if (c && d + 1 >= r.length) {
                  var m = c(f, p);
                  f = (l = !!m) && "get" in m && !("originalValue" in m.get) ? m.get : f[p];
                } else l = v(f, p), f = f[p];
                l && !u && (b[a] = f);
              }
            }
            return f;
          };
        },
        1044: (e, t, r) => {
          "use strict";
          var n = r(210)("%Object.defineProperty%", !0), i = function() {
            if (n) try {
              return n({}, "a", {
                value: 1
              }), !0;
            } catch (e) {
              return !1;
            }
            return !1;
          };
          i.hasArrayLengthDefineBug = function() {
            if (!i()) return null;
            try {
              return 1 !== n([], "length", {
                value: 1
              }).length;
            } catch (e) {
              return !0;
            }
          }, e.exports = i;
        },
        1405: (e, t, r) => {
          "use strict";
          var n = "undefined" != typeof Symbol && Symbol, i = r(5419);
          e.exports = function() {
            return "function" == typeof n && "function" == typeof Symbol && "symbol" == typeof n("foo") && "symbol" == typeof Symbol("bar") && i();
          };
        },
        5419: e => {
          "use strict";
          e.exports = function() {
            if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols) return !1;
            if ("symbol" == typeof Symbol.iterator) return !0;
            var e = {}, t = Symbol("test"), r = Object(t);
            if ("string" == typeof t) return !1;
            if ("[object Symbol]" !== Object.prototype.toString.call(t)) return !1;
            if ("[object Symbol]" !== Object.prototype.toString.call(r)) return !1;
            for (t in e[t] = 42, e) return !1;
            if ("function" == typeof Object.keys && 0 !== Object.keys(e).length) return !1;
            if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(e).length) return !1;
            var n = Object.getOwnPropertySymbols(e);
            if (1 !== n.length || n[0] !== t) return !1;
            if (!Object.prototype.propertyIsEnumerable.call(e, t)) return !1;
            if ("function" == typeof Object.getOwnPropertyDescriptor) {
              var i = Object.getOwnPropertyDescriptor(e, t);
              if (42 !== i.value || !0 !== i.enumerable) return !1;
            }
            return !0;
          };
        },
        6410: (e, t, r) => {
          "use strict";
          var n = r(5419);
          e.exports = function() {
            return n() && !!Symbol.toStringTag;
          };
        },
        7642: (e, t, r) => {
          "use strict";
          var n = r(8612);
          e.exports = n.call(Function.call, Object.prototype.hasOwnProperty);
        },
        3349: (e, t, r) => {
          "use strict";
          var n = r(9509).Buffer, i = r(8473).Transform;
          function o(e) {
            i.call(this), this._block = n.allocUnsafe(e), this._blockSize = e, this._blockOffset = 0, this._length = [ 0, 0, 0, 0 ], 
            this._finalized = !1;
          }
          r(5717)(o, i), o.prototype._transform = function(e, t, r) {
            var n = null;
            try {
              this.update(e, t);
            } catch (e) {
              n = e;
            }
            r(n);
          }, o.prototype._flush = function(e) {
            var t = null;
            try {
              this.push(this.digest());
            } catch (e) {
              t = e;
            }
            e(t);
          }, o.prototype.update = function(e, t) {
            if (function(e, t) {
              if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
            }(e), this._finalized) throw new Error("Digest already called");
            n.isBuffer(e) || (e = n.from(e, t));
            for (var r = this._block, i = 0; this._blockOffset + e.length - i >= this._blockSize; ) {
              for (var o = this._blockOffset; o < this._blockSize; ) r[o++] = e[i++];
              this._update(), this._blockOffset = 0;
            }
            for (;i < e.length; ) r[this._blockOffset++] = e[i++];
            for (var s = 0, a = 8 * e.length; a > 0; ++s) this._length[s] += a, (a = this._length[s] / 4294967296 | 0) > 0 && (this._length[s] -= 4294967296 * a);
            return this;
          }, o.prototype._update = function() {
            throw new Error("_update is not implemented");
          }, o.prototype.digest = function(e) {
            if (this._finalized) throw new Error("Digest already called");
            this._finalized = !0;
            var t = this._digest();
            void 0 !== e && (t = t.toString(e)), this._block.fill(0), this._blockOffset = 0;
            for (var r = 0; r < 4; ++r) this._length[r] = 0;
            return t;
          }, o.prototype._digest = function() {
            throw new Error("_digest is not implemented");
          }, e.exports = o;
        },
        3715: (e, t, r) => {
          var n = t;
          n.utils = r(6436), n.common = r(5772), n.sha = r(9041), n.ripemd = r(2949), n.hmac = r(2344), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, 
          n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
        },
        5772: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(9746);
          function o() {
            this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, 
            this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", 
            this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
          }
          t.BlockHash = o, o.prototype.update = function(e, t) {
            if (e = n.toArray(e, t), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, 
            this.pending.length >= this._delta8) {
              var r = (e = this.pending).length % this._delta8;
              this.pending = e.slice(e.length - r, e.length), 0 === this.pending.length && (this.pending = null), e = n.join32(e, 0, e.length - r, this.endian);
              for (var i = 0; i < e.length; i += this._delta32) this._update(e, i, i + this._delta32);
            }
            return this;
          }, o.prototype.digest = function(e) {
            return this.update(this._pad()), i(null === this.pending), this._digest(e);
          }, o.prototype._pad = function() {
            var e = this.pendingTotal, t = this._delta8, r = t - (e + this.padLength) % t, n = new Array(r + this.padLength);
            n[0] = 128;
            for (var i = 1; i < r; i++) n[i] = 0;
            if (e <<= 3, "big" === this.endian) {
              for (var o = 8; o < this.padLength; o++) n[i++] = 0;
              n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = e >>> 24 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 8 & 255, 
              n[i++] = 255 & e;
            } else for (n[i++] = 255 & e, n[i++] = e >>> 8 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 24 & 255, n[i++] = 0, n[i++] = 0, 
            n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++) n[i++] = 0;
            return n;
          };
        },
        2344: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(9746);
          function o(e, t, r) {
            if (!(this instanceof o)) return new o(e, t, r);
            this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t, r));
          }
          e.exports = o, o.prototype._init = function(e) {
            e.length > this.blockSize && (e = (new this.Hash).update(e).digest()), i(e.length <= this.blockSize);
            for (var t = e.length; t < this.blockSize; t++) e.push(0);
            for (t = 0; t < e.length; t++) e[t] ^= 54;
            for (this.inner = (new this.Hash).update(e), t = 0; t < e.length; t++) e[t] ^= 106;
            this.outer = (new this.Hash).update(e);
          }, o.prototype.update = function(e, t) {
            return this.inner.update(e, t), this;
          }, o.prototype.digest = function(e) {
            return this.outer.update(this.inner.digest()), this.outer.digest(e);
          };
        },
        2949: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5772), o = n.rotl32, s = n.sum32, a = n.sum32_3, c = n.sum32_4, f = i.BlockHash;
          function u() {
            if (!(this instanceof u)) return new u;
            f.call(this), this.h = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ], this.endian = "little";
          }
          function h(e, t, r, n) {
            return e <= 15 ? t ^ r ^ n : e <= 31 ? t & r | ~t & n : e <= 47 ? (t | ~r) ^ n : e <= 63 ? t & n | r & ~n : t ^ (r | ~n);
          }
          function d(e) {
            return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;
          }
          function l(e) {
            return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;
          }
          n.inherits(u, f), t.ripemd160 = u, u.blockSize = 512, u.outSize = 160, u.hmacStrength = 192, u.padLength = 64, u.prototype._update = function(e, t) {
            for (var r = this.h[0], n = this.h[1], i = this.h[2], f = this.h[3], u = this.h[4], m = r, v = n, w = i, _ = f, S = u, E = 0; E < 80; E++) {
              var A = s(o(c(r, h(E, n, i, f), e[p[E] + t], d(E)), y[E]), u);
              r = u, u = f, f = o(i, 10), i = n, n = A, A = s(o(c(m, h(79 - E, v, w, _), e[b[E] + t], l(E)), g[E]), S), m = S, S = _, 
              _ = o(w, 10), w = v, v = A;
            }
            A = a(this.h[1], i, _), this.h[1] = a(this.h[2], f, S), this.h[2] = a(this.h[3], u, m), this.h[3] = a(this.h[4], r, v), 
            this.h[4] = a(this.h[0], n, w), this.h[0] = A;
          }, u.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
          };
          var p = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ], b = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ], y = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ], g = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ];
        },
        9041: (e, t, r) => {
          "use strict";
          t.sha1 = r(4761), t.sha224 = r(799), t.sha256 = r(9344), t.sha384 = r(772), t.sha512 = r(5900);
        },
        4761: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5772), o = r(7038), s = n.rotl32, a = n.sum32, c = n.sum32_5, f = o.ft_1, u = i.BlockHash, h = [ 1518500249, 1859775393, 2400959708, 3395469782 ];
          function d() {
            if (!(this instanceof d)) return new d;
            u.call(this), this.h = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ], this.W = new Array(80);
          }
          n.inherits(d, u), e.exports = d, d.blockSize = 512, d.outSize = 160, d.hmacStrength = 80, d.padLength = 64, d.prototype._update = function(e, t) {
            for (var r = this.W, n = 0; n < 16; n++) r[n] = e[t + n];
            for (;n < r.length; n++) r[n] = s(r[n - 3] ^ r[n - 8] ^ r[n - 14] ^ r[n - 16], 1);
            var i = this.h[0], o = this.h[1], u = this.h[2], d = this.h[3], l = this.h[4];
            for (n = 0; n < r.length; n++) {
              var p = ~~(n / 20), b = c(s(i, 5), f(p, o, u, d), l, r[n], h[p]);
              l = d, d = u, u = s(o, 30), o = i, i = b;
            }
            this.h[0] = a(this.h[0], i), this.h[1] = a(this.h[1], o), this.h[2] = a(this.h[2], u), this.h[3] = a(this.h[3], d), this.h[4] = a(this.h[4], l);
          }, d.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        799: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(9344);
          function o() {
            if (!(this instanceof o)) return new o;
            i.call(this), this.h = [ 3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428 ];
          }
          n.inherits(o, i), e.exports = o, o.blockSize = 512, o.outSize = 224, o.hmacStrength = 192, o.padLength = 64, o.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
          };
        },
        9344: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5772), o = r(7038), s = r(9746), a = n.sum32, c = n.sum32_4, f = n.sum32_5, u = o.ch32, h = o.maj32, d = o.s0_256, l = o.s1_256, p = o.g0_256, b = o.g1_256, y = i.BlockHash, g = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ];
          function m() {
            if (!(this instanceof m)) return new m;
            y.call(this), this.h = [ 1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225 ], 
            this.k = g, this.W = new Array(64);
          }
          n.inherits(m, y), e.exports = m, m.blockSize = 512, m.outSize = 256, m.hmacStrength = 192, m.padLength = 64, m.prototype._update = function(e, t) {
            for (var r = this.W, n = 0; n < 16; n++) r[n] = e[t + n];
            for (;n < r.length; n++) r[n] = c(b(r[n - 2]), r[n - 7], p(r[n - 15]), r[n - 16]);
            var i = this.h[0], o = this.h[1], y = this.h[2], g = this.h[3], m = this.h[4], v = this.h[5], w = this.h[6], _ = this.h[7];
            for (s(this.k.length === r.length), n = 0; n < r.length; n++) {
              var S = f(_, l(m), u(m, v, w), this.k[n], r[n]), E = a(d(i), h(i, o, y));
              _ = w, w = v, v = m, m = a(g, S), g = y, y = o, o = i, i = a(S, E);
            }
            this.h[0] = a(this.h[0], i), this.h[1] = a(this.h[1], o), this.h[2] = a(this.h[2], y), this.h[3] = a(this.h[3], g), this.h[4] = a(this.h[4], m), 
            this.h[5] = a(this.h[5], v), this.h[6] = a(this.h[6], w), this.h[7] = a(this.h[7], _);
          }, m.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        772: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5900);
          function o() {
            if (!(this instanceof o)) return new o;
            i.call(this), this.h = [ 3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428 ];
          }
          n.inherits(o, i), e.exports = o, o.blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, o.padLength = 128, o.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
          };
        },
        5900: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5772), o = r(9746), s = n.rotr64_hi, a = n.rotr64_lo, c = n.shr64_hi, f = n.shr64_lo, u = n.sum64, h = n.sum64_hi, d = n.sum64_lo, l = n.sum64_4_hi, p = n.sum64_4_lo, b = n.sum64_5_hi, y = n.sum64_5_lo, g = i.BlockHash, m = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ];
          function v() {
            if (!(this instanceof v)) return new v;
            g.call(this), this.h = [ 1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209 ], 
            this.k = m, this.W = new Array(160);
          }
          function w(e, t, r, n, i) {
            var o = e & r ^ ~e & i;
            return o < 0 && (o += 4294967296), o;
          }
          function _(e, t, r, n, i, o) {
            var s = t & n ^ ~t & o;
            return s < 0 && (s += 4294967296), s;
          }
          function S(e, t, r, n, i) {
            var o = e & r ^ e & i ^ r & i;
            return o < 0 && (o += 4294967296), o;
          }
          function E(e, t, r, n, i, o) {
            var s = t & n ^ t & o ^ n & o;
            return s < 0 && (s += 4294967296), s;
          }
          function A(e, t) {
            var r = s(e, t, 28) ^ s(t, e, 2) ^ s(t, e, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function x(e, t) {
            var r = a(e, t, 28) ^ a(t, e, 2) ^ a(t, e, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function k(e, t) {
            var r = a(e, t, 14) ^ a(e, t, 18) ^ a(t, e, 9);
            return r < 0 && (r += 4294967296), r;
          }
          function P(e, t) {
            var r = s(e, t, 1) ^ s(e, t, 8) ^ c(e, t, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function O(e, t) {
            var r = a(e, t, 1) ^ a(e, t, 8) ^ f(e, t, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function M(e, t) {
            var r = a(e, t, 19) ^ a(t, e, 29) ^ f(e, t, 6);
            return r < 0 && (r += 4294967296), r;
          }
          n.inherits(v, g), e.exports = v, v.blockSize = 1024, v.outSize = 512, v.hmacStrength = 192, v.padLength = 128, v.prototype._prepareBlock = function(e, t) {
            for (var r = this.W, n = 0; n < 32; n++) r[n] = e[t + n];
            for (;n < r.length; n += 2) {
              var i = (y = r[n - 4], g = r[n - 3], m = void 0, (m = s(y, g, 19) ^ s(g, y, 29) ^ c(y, g, 6)) < 0 && (m += 4294967296), 
              m), o = M(r[n - 4], r[n - 3]), a = r[n - 14], f = r[n - 13], u = P(r[n - 30], r[n - 29]), h = O(r[n - 30], r[n - 29]), d = r[n - 32], b = r[n - 31];
              r[n] = l(i, o, a, f, u, h, d, b), r[n + 1] = p(i, o, a, f, u, h, d, b);
            }
            var y, g, m;
          }, v.prototype._update = function(e, t) {
            this._prepareBlock(e, t);
            var r, n, i, a = this.W, c = this.h[0], f = this.h[1], l = this.h[2], p = this.h[3], g = this.h[4], m = this.h[5], v = this.h[6], P = this.h[7], O = this.h[8], M = this.h[9], I = this.h[10], T = this.h[11], R = this.h[12], C = this.h[13], N = this.h[14], j = this.h[15];
            o(this.k.length === a.length);
            for (var B = 0; B < a.length; B += 2) {
              var L = N, D = j, U = (i = void 0, (i = s(r = O, n = M, 14) ^ s(r, n, 18) ^ s(n, r, 9)) < 0 && (i += 4294967296), i), q = k(O, M), F = w(O, 0, I, 0, R), H = _(0, M, 0, T, 0, C), z = this.k[B], K = this.k[B + 1], V = a[B], G = a[B + 1], W = b(L, D, U, q, F, H, z, K, V, G), X = y(L, D, U, q, F, H, z, K, V, G);
              L = A(c, f), D = x(c, f), U = S(c, 0, l, 0, g), q = E(0, f, 0, p, 0, m);
              var Y = h(L, D, U, q), J = d(L, D, U, q);
              N = R, j = C, R = I, C = T, I = O, T = M, O = h(v, P, W, X), M = d(P, P, W, X), v = g, P = m, g = l, m = p, l = c, p = f, 
              c = h(W, X, Y, J), f = d(W, X, Y, J);
            }
            u(this.h, 0, c, f), u(this.h, 2, l, p), u(this.h, 4, g, m), u(this.h, 6, v, P), u(this.h, 8, O, M), u(this.h, 10, I, T), 
            u(this.h, 12, R, C), u(this.h, 14, N, j);
          }, v.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        7038: (e, t, r) => {
          "use strict";
          var n = r(6436).rotr32;
          function i(e, t, r) {
            return e & t ^ ~e & r;
          }
          function o(e, t, r) {
            return e & t ^ e & r ^ t & r;
          }
          function s(e, t, r) {
            return e ^ t ^ r;
          }
          t.ft_1 = function(e, t, r, n) {
            return 0 === e ? i(t, r, n) : 1 === e || 3 === e ? s(t, r, n) : 2 === e ? o(t, r, n) : void 0;
          }, t.ch32 = i, t.maj32 = o, t.p32 = s, t.s0_256 = function(e) {
            return n(e, 2) ^ n(e, 13) ^ n(e, 22);
          }, t.s1_256 = function(e) {
            return n(e, 6) ^ n(e, 11) ^ n(e, 25);
          }, t.g0_256 = function(e) {
            return n(e, 7) ^ n(e, 18) ^ e >>> 3;
          }, t.g1_256 = function(e) {
            return n(e, 17) ^ n(e, 19) ^ e >>> 10;
          };
        },
        6436: (e, t, r) => {
          "use strict";
          var n = r(9746), i = r(5717);
          function o(e, t) {
            return 55296 == (64512 & e.charCodeAt(t)) && !(t < 0 || t + 1 >= e.length) && 56320 == (64512 & e.charCodeAt(t + 1));
          }
          function s(e) {
            return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0;
          }
          function a(e) {
            return 1 === e.length ? "0" + e : e;
          }
          function c(e) {
            return 7 === e.length ? "0" + e : 6 === e.length ? "00" + e : 5 === e.length ? "000" + e : 4 === e.length ? "0000" + e : 3 === e.length ? "00000" + e : 2 === e.length ? "000000" + e : 1 === e.length ? "0000000" + e : e;
          }
          t.inherits = i, t.toArray = function(e, t) {
            if (Array.isArray(e)) return e.slice();
            if (!e) return [];
            var r = [];
            if ("string" == typeof e) if (t) {
              if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), i = 0; i < e.length; i += 2) r.push(parseInt(e[i] + e[i + 1], 16));
            } else for (var n = 0, i = 0; i < e.length; i++) {
              var s = e.charCodeAt(i);
              s < 128 ? r[n++] = s : s < 2048 ? (r[n++] = s >> 6 | 192, r[n++] = 63 & s | 128) : o(e, i) ? (s = 65536 + ((1023 & s) << 10) + (1023 & e.charCodeAt(++i)), 
              r[n++] = s >> 18 | 240, r[n++] = s >> 12 & 63 | 128, r[n++] = s >> 6 & 63 | 128, r[n++] = 63 & s | 128) : (r[n++] = s >> 12 | 224, 
              r[n++] = s >> 6 & 63 | 128, r[n++] = 63 & s | 128);
            } else for (i = 0; i < e.length; i++) r[i] = 0 | e[i];
            return r;
          }, t.toHex = function(e) {
            for (var t = "", r = 0; r < e.length; r++) t += a(e[r].toString(16));
            return t;
          }, t.htonl = s, t.toHex32 = function(e, t) {
            for (var r = "", n = 0; n < e.length; n++) {
              var i = e[n];
              "little" === t && (i = s(i)), r += c(i.toString(16));
            }
            return r;
          }, t.zero2 = a, t.zero8 = c, t.join32 = function(e, t, r, i) {
            var o = r - t;
            n(o % 4 == 0);
            for (var s = new Array(o / 4), a = 0, c = t; a < s.length; a++, c += 4) {
              var f;
              f = "big" === i ? e[c] << 24 | e[c + 1] << 16 | e[c + 2] << 8 | e[c + 3] : e[c + 3] << 24 | e[c + 2] << 16 | e[c + 1] << 8 | e[c], 
              s[a] = f >>> 0;
            }
            return s;
          }, t.split32 = function(e, t) {
            for (var r = new Array(4 * e.length), n = 0, i = 0; n < e.length; n++, i += 4) {
              var o = e[n];
              "big" === t ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, 
              r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, r[i] = 255 & o);
            }
            return r;
          }, t.rotr32 = function(e, t) {
            return e >>> t | e << 32 - t;
          }, t.rotl32 = function(e, t) {
            return e << t | e >>> 32 - t;
          }, t.sum32 = function(e, t) {
            return e + t >>> 0;
          }, t.sum32_3 = function(e, t, r) {
            return e + t + r >>> 0;
          }, t.sum32_4 = function(e, t, r, n) {
            return e + t + r + n >>> 0;
          }, t.sum32_5 = function(e, t, r, n, i) {
            return e + t + r + n + i >>> 0;
          }, t.sum64 = function(e, t, r, n) {
            var i = e[t], o = n + e[t + 1] >>> 0, s = (o < n ? 1 : 0) + r + i;
            e[t] = s >>> 0, e[t + 1] = o;
          }, t.sum64_hi = function(e, t, r, n) {
            return (t + n >>> 0 < t ? 1 : 0) + e + r >>> 0;
          }, t.sum64_lo = function(e, t, r, n) {
            return t + n >>> 0;
          }, t.sum64_4_hi = function(e, t, r, n, i, o, s, a) {
            var c = 0, f = t;
            return c += (f = f + n >>> 0) < t ? 1 : 0, c += (f = f + o >>> 0) < o ? 1 : 0, e + r + i + s + (c += (f = f + a >>> 0) < a ? 1 : 0) >>> 0;
          }, t.sum64_4_lo = function(e, t, r, n, i, o, s, a) {
            return t + n + o + a >>> 0;
          }, t.sum64_5_hi = function(e, t, r, n, i, o, s, a, c, f) {
            var u = 0, h = t;
            return u += (h = h + n >>> 0) < t ? 1 : 0, u += (h = h + o >>> 0) < o ? 1 : 0, u += (h = h + a >>> 0) < a ? 1 : 0, e + r + i + s + c + (u += (h = h + f >>> 0) < f ? 1 : 0) >>> 0;
          }, t.sum64_5_lo = function(e, t, r, n, i, o, s, a, c, f) {
            return t + n + o + a + f >>> 0;
          }, t.rotr64_hi = function(e, t, r) {
            return (t << 32 - r | e >>> r) >>> 0;
          }, t.rotr64_lo = function(e, t, r) {
            return (e << 32 - r | t >>> r) >>> 0;
          }, t.shr64_hi = function(e, t, r) {
            return e >>> r;
          }, t.shr64_lo = function(e, t, r) {
            return (e << 32 - r | t >>> r) >>> 0;
          };
        },
        2156: (e, t, r) => {
          "use strict";
          var n = r(3715), i = r(4504), o = r(9746);
          function s(e) {
            if (!(this instanceof s)) return new s(e);
            this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, 
            this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
            var t = i.toArray(e.entropy, e.entropyEnc || "hex"), r = i.toArray(e.nonce, e.nonceEnc || "hex"), n = i.toArray(e.pers, e.persEnc || "hex");
            o(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, n);
          }
          e.exports = s, s.prototype._init = function(e, t, r) {
            var n = e.concat(t).concat(r);
            this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) this.K[i] = 0, this.V[i] = 1;
            this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
          }, s.prototype._hmac = function() {
            return new n.hmac(this.hash, this.K);
          }, s.prototype._update = function(e) {
            var t = this._hmac().update(this.V).update([ 0 ]);
            e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([ 1 ]).update(e).digest(), 
            this.V = this._hmac().update(this.V).digest());
          }, s.prototype.reseed = function(e, t, r, n) {
            "string" != typeof t && (n = r, r = t, t = null), e = i.toArray(e, t), r = i.toArray(r, n), o(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), 
            this._update(e.concat(r || [])), this._reseed = 1;
          }, s.prototype.generate = function(e, t, r, n) {
            if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
            "string" != typeof t && (n = r, r = t, t = null), r && (r = i.toArray(r, n || "hex"), this._update(r));
            for (var o = []; o.length < e; ) this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);
            var s = o.slice(0, e);
            return this._update(r), this._reseed++, i.encode(s, t);
          };
        },
        9267: (e, t, r) => {
          var n = r(8501), i = r(8575), o = e.exports;
          for (var s in n) n.hasOwnProperty(s) && (o[s] = n[s]);
          function a(e) {
            if ("string" == typeof e && (e = i.parse(e)), e.protocol || (e.protocol = "https:"), "https:" !== e.protocol) throw new Error('Protocol "' + e.protocol + '" not supported. Expected "https:"');
            return e;
          }
          o.request = function(e, t) {
            return e = a(e), n.request.call(this, e, t);
          }, o.get = function(e, t) {
            return e = a(e), n.get.call(this, e, t);
          };
        },
        645: (e, t) => {
          t.read = function(e, t, r, n, i) {
            var o, s, a = 8 * i - n - 1, c = (1 << a) - 1, f = c >> 1, u = -7, h = r ? i - 1 : 0, d = r ? -1 : 1, l = e[t + h];
            for (h += d, o = l & (1 << -u) - 1, l >>= -u, u += a; u > 0; o = 256 * o + e[t + h], h += d, u -= 8) ;
            for (s = o & (1 << -u) - 1, o >>= -u, u += n; u > 0; s = 256 * s + e[t + h], h += d, u -= 8) ;
            if (0 === o) o = 1 - f; else {
              if (o === c) return s ? NaN : 1 / 0 * (l ? -1 : 1);
              s += Math.pow(2, n), o -= f;
            }
            return (l ? -1 : 1) * s * Math.pow(2, o - n);
          }, t.write = function(e, t, r, n, i, o) {
            var s, a, c, f = 8 * o - i - 1, u = (1 << f) - 1, h = u >> 1, d = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, l = n ? 0 : o - 1, p = n ? 1 : -1, b = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;
            for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = u) : (s = Math.floor(Math.log(t) / Math.LN2), 
            t * (c = Math.pow(2, -s)) < 1 && (s--, c *= 2), (t += s + h >= 1 ? d / c : d * Math.pow(2, 1 - h)) * c >= 2 && (s++, c /= 2), 
            s + h >= u ? (a = 0, s = u) : s + h >= 1 ? (a = (t * c - 1) * Math.pow(2, i), s += h) : (a = t * Math.pow(2, h - 1) * Math.pow(2, i), 
            s = 0)); i >= 8; e[r + l] = 255 & a, l += p, a /= 256, i -= 8) ;
            for (s = s << i | a, f += i; f > 0; e[r + l] = 255 & s, l += p, s /= 256, f -= 8) ;
            e[r + l - p] |= 128 * b;
          };
        },
        5717: e => {
          "function" == typeof Object.create ? e.exports = function(e, t) {
            t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }));
          } : e.exports = function(e, t) {
            if (t) {
              e.super_ = t;
              var r = function() {};
              r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
            }
          };
        },
        2584: (e, t, r) => {
          "use strict";
          var n = r(6410)(), i = r(1924)("Object.prototype.toString"), o = function(e) {
            return !(n && e && "object" == typeof e && Symbol.toStringTag in e) && "[object Arguments]" === i(e);
          }, s = function(e) {
            return !!o(e) || null !== e && "object" == typeof e && "number" == typeof e.length && e.length >= 0 && "[object Array]" !== i(e) && "[object Function]" === i(e.callee);
          }, a = function() {
            return o(arguments);
          }();
          o.isLegacyArguments = s, e.exports = a ? o : s;
        },
        5320: e => {
          "use strict";
          var t, r, n = Function.prototype.toString, i = "object" == typeof Reflect && null !== Reflect && Reflect.apply;
          if ("function" == typeof i && "function" == typeof Object.defineProperty) try {
            t = Object.defineProperty({}, "length", {
              get: function() {
                throw r;
              }
            }), r = {}, i((function() {
              throw 42;
            }), null, t);
          } catch (e) {
            e !== r && (i = null);
          } else i = null;
          var o = /^\s*class\b/, s = function(e) {
            try {
              var t = n.call(e);
              return o.test(t);
            } catch (e) {
              return !1;
            }
          }, a = Object.prototype.toString, c = "function" == typeof Symbol && !!Symbol.toStringTag, f = "object" == typeof document && void 0 === document.all && void 0 !== document.all ? document.all : {};
          e.exports = i ? function(e) {
            if (e === f) return !0;
            if (!e) return !1;
            if ("function" != typeof e && "object" != typeof e) return !1;
            if ("function" == typeof e && !e.prototype) return !0;
            try {
              i(e, null, t);
            } catch (e) {
              if (e !== r) return !1;
            }
            return !s(e);
          } : function(e) {
            if (e === f) return !0;
            if (!e) return !1;
            if ("function" != typeof e && "object" != typeof e) return !1;
            if ("function" == typeof e && !e.prototype) return !0;
            if (c) return function(e) {
              try {
                return !s(e) && (n.call(e), !0);
              } catch (e) {
                return !1;
              }
            }(e);
            if (s(e)) return !1;
            var t = a.call(e);
            return "[object Function]" === t || "[object GeneratorFunction]" === t;
          };
        },
        8662: (e, t, r) => {
          "use strict";
          var n, i = Object.prototype.toString, o = Function.prototype.toString, s = /^\s*(?:function)?\*/, a = r(6410)(), c = Object.getPrototypeOf;
          e.exports = function(e) {
            if ("function" != typeof e) return !1;
            if (s.test(o.call(e))) return !0;
            if (!a) return "[object GeneratorFunction]" === i.call(e);
            if (!c) return !1;
            if (void 0 === n) {
              var t = function() {
                if (!a) return !1;
                try {
                  return Function("return function*() {}")();
                } catch (e) {}
              }();
              n = !!t && c(t);
            }
            return c(e) === n;
          };
        },
        3944: e => {
          e.exports = function(e) {
            if ("string" != typeof e) throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof e + ", while checking isHexPrefixed.");
            return "0x" === e.slice(0, 2);
          };
        },
        8611: e => {
          "use strict";
          e.exports = function(e) {
            return e != e;
          };
        },
        360: (e, t, r) => {
          "use strict";
          var n = r(5559), i = r(4289), o = r(8611), s = r(9415), a = r(3194), c = n(s(), Number);
          i(c, {
            getPolyfill: s,
            implementation: o,
            shim: a
          }), e.exports = c;
        },
        9415: (e, t, r) => {
          "use strict";
          var n = r(8611);
          e.exports = function() {
            return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a") ? Number.isNaN : n;
          };
        },
        3194: (e, t, r) => {
          "use strict";
          var n = r(4289), i = r(9415);
          e.exports = function() {
            var e = i();
            return n(Number, {
              isNaN: e
            }, {
              isNaN: function() {
                return Number.isNaN !== e;
              }
            }), e;
          };
        },
        4970: e => {
          "use strict";
          const t = e => null !== e && "object" == typeof e && "function" == typeof e.pipe;
          t.writable = e => t(e) && !1 !== e.writable && "function" == typeof e._write && "object" == typeof e._writableState, t.readable = e => t(e) && !1 !== e.readable && "function" == typeof e._read && "object" == typeof e._readableState, 
          t.duplex = e => t.writable(e) && t.readable(e), t.transform = e => t.duplex(e) && "function" == typeof e._transform, e.exports = t;
        },
        5692: (e, t, r) => {
          "use strict";
          var n = r(4029), i = r(3083), o = r(1924), s = o("Object.prototype.toString"), a = r(6410)(), c = "undefined" == typeof globalThis ? r.g : globalThis, f = i(), u = o("Array.prototype.indexOf", !0) || function(e, t) {
            for (var r = 0; r < e.length; r += 1) if (e[r] === t) return r;
            return -1;
          }, h = o("String.prototype.slice"), d = {}, l = r(882), p = Object.getPrototypeOf;
          a && l && p && n(f, (function(e) {
            var t = new c[e];
            if (Symbol.toStringTag in t) {
              var r = p(t), n = l(r, Symbol.toStringTag);
              if (!n) {
                var i = p(r);
                n = l(i, Symbol.toStringTag);
              }
              d[e] = n.get;
            }
          })), e.exports = function(e) {
            if (!e || "object" != typeof e) return !1;
            if (!a || !(Symbol.toStringTag in e)) {
              var t = h(s(e), 8, -1);
              return u(f, t) > -1;
            }
            return !!l && function(e) {
              var t = !1;
              return n(d, (function(r, n) {
                if (!t) try {
                  t = r.call(e) === n;
                } catch (e) {}
              })), t;
            }(e);
          };
        },
        1094: (e, t, r) => {
          var n, i = r(4155);
          !function() {
            "use strict";
            var o = "input is invalid type", s = "object" == typeof window, a = s ? window : {};
            a.JS_SHA3_NO_WINDOW && (s = !1);
            var c = !s && "object" == typeof self;
            !a.JS_SHA3_NO_NODE_JS && "object" == typeof i && i.versions && i.versions.node ? a = r.g : c && (a = self);
            var f = !a.JS_SHA3_NO_COMMON_JS && e.exports, u = r.amdO, h = !a.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer, d = "0123456789abcdef".split(""), l = [ 4, 1024, 262144, 67108864 ], p = [ 0, 8, 16, 24 ], b = [ 1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648 ], y = [ 224, 256, 384, 512 ], g = [ 128, 256 ], m = [ "hex", "buffer", "arrayBuffer", "array", "digest" ], v = {
              128: 168,
              256: 136
            };
            !a.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function(e) {
              return "[object Array]" === Object.prototype.toString.call(e);
            }), !h || !a.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(e) {
              return "object" == typeof e && e.buffer && e.buffer.constructor === ArrayBuffer;
            });
            for (var w = function(e, t, r) {
              return function(n) {
                return new j(e, t, e).update(n)[r]();
              };
            }, _ = function(e, t, r) {
              return function(n, i) {
                return new j(e, t, i).update(n)[r]();
              };
            }, S = function(e, t, r) {
              return function(t, n, i, o) {
                return P["cshake" + e].update(t, n, i, o)[r]();
              };
            }, E = function(e, t, r) {
              return function(t, n, i, o) {
                return P["kmac" + e].update(t, n, i, o)[r]();
              };
            }, A = function(e, t, r, n) {
              for (var i = 0; i < m.length; ++i) {
                var o = m[i];
                e[o] = t(r, n, o);
              }
              return e;
            }, x = function(e, t) {
              var r = w(e, t, "hex");
              return r.create = function() {
                return new j(e, t, e);
              }, r.update = function(e) {
                return r.create().update(e);
              }, A(r, w, e, t);
            }, k = [ {
              name: "keccak",
              padding: [ 1, 256, 65536, 16777216 ],
              bits: y,
              createMethod: x
            }, {
              name: "sha3",
              padding: [ 6, 1536, 393216, 100663296 ],
              bits: y,
              createMethod: x
            }, {
              name: "shake",
              padding: [ 31, 7936, 2031616, 520093696 ],
              bits: g,
              createMethod: function(e, t) {
                var r = _(e, t, "hex");
                return r.create = function(r) {
                  return new j(e, t, r);
                }, r.update = function(e, t) {
                  return r.create(t).update(e);
                }, A(r, _, e, t);
              }
            }, {
              name: "cshake",
              padding: l,
              bits: g,
              createMethod: function(e, t) {
                var r = v[e], n = S(e, 0, "hex");
                return n.create = function(n, i, o) {
                  return i || o ? new j(e, t, n).bytepad([ i, o ], r) : P["shake" + e].create(n);
                }, n.update = function(e, t, r, i) {
                  return n.create(t, r, i).update(e);
                }, A(n, S, e, t);
              }
            }, {
              name: "kmac",
              padding: l,
              bits: g,
              createMethod: function(e, t) {
                var r = v[e], n = E(e, 0, "hex");
                return n.create = function(n, i, o) {
                  return new B(e, t, i).bytepad([ "KMAC", o ], r).bytepad([ n ], r);
                }, n.update = function(e, t, r, i) {
                  return n.create(e, r, i).update(t);
                }, A(n, E, e, t);
              }
            } ], P = {}, O = [], M = 0; M < k.length; ++M) for (var I = k[M], T = I.bits, R = 0; R < T.length; ++R) {
              var C = I.name + "_" + T[R];
              if (O.push(C), P[C] = I.createMethod(T[R], I.padding), "sha3" !== I.name) {
                var N = I.name + T[R];
                O.push(N), P[N] = P[C];
              }
            }
            function j(e, t, r) {
              this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.finalized = !1, this.block = 0, 
              this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, 
              this.extraBytes = (31 & r) >> 3;
              for (var n = 0; n < 50; ++n) this.s[n] = 0;
            }
            function B(e, t, r) {
              j.call(this, e, t, r);
            }
            j.prototype.update = function(e) {
              if (this.finalized) throw new Error("finalize already called");
              var t, r = typeof e;
              if ("string" !== r) {
                if ("object" !== r) throw new Error(o);
                if (null === e) throw new Error(o);
                if (h && e.constructor === ArrayBuffer) e = new Uint8Array(e); else if (!(Array.isArray(e) || h && ArrayBuffer.isView(e))) throw new Error(o);
                t = !0;
              }
              for (var n, i, s = this.blocks, a = this.byteCount, c = e.length, f = this.blockCount, u = 0, d = this.s; u < c; ) {
                if (this.reset) for (this.reset = !1, s[0] = this.block, n = 1; n < f + 1; ++n) s[n] = 0;
                if (t) for (n = this.start; u < c && n < a; ++u) s[n >> 2] |= e[u] << p[3 & n++]; else for (n = this.start; u < c && n < a; ++u) (i = e.charCodeAt(u)) < 128 ? s[n >> 2] |= i << p[3 & n++] : i < 2048 ? (s[n >> 2] |= (192 | i >> 6) << p[3 & n++], 
                s[n >> 2] |= (128 | 63 & i) << p[3 & n++]) : i < 55296 || i >= 57344 ? (s[n >> 2] |= (224 | i >> 12) << p[3 & n++], s[n >> 2] |= (128 | i >> 6 & 63) << p[3 & n++], 
                s[n >> 2] |= (128 | 63 & i) << p[3 & n++]) : (i = 65536 + ((1023 & i) << 10 | 1023 & e.charCodeAt(++u)), s[n >> 2] |= (240 | i >> 18) << p[3 & n++], 
                s[n >> 2] |= (128 | i >> 12 & 63) << p[3 & n++], s[n >> 2] |= (128 | i >> 6 & 63) << p[3 & n++], s[n >> 2] |= (128 | 63 & i) << p[3 & n++]);
                if (this.lastByteIndex = n, n >= a) {
                  for (this.start = n - a, this.block = s[f], n = 0; n < f; ++n) d[n] ^= s[n];
                  L(d), this.reset = !0;
                } else this.start = n;
              }
              return this;
            }, j.prototype.encode = function(e, t) {
              var r = 255 & e, n = 1, i = [ r ];
              for (r = 255 & (e >>= 8); r > 0; ) i.unshift(r), r = 255 & (e >>= 8), ++n;
              return t ? i.push(n) : i.unshift(n), this.update(i), i.length;
            }, j.prototype.encodeString = function(e) {
              var t, r = typeof e;
              if ("string" !== r) {
                if ("object" !== r) throw new Error(o);
                if (null === e) throw new Error(o);
                if (h && e.constructor === ArrayBuffer) e = new Uint8Array(e); else if (!(Array.isArray(e) || h && ArrayBuffer.isView(e))) throw new Error(o);
                t = !0;
              }
              var n = 0, i = e.length;
              if (t) n = i; else for (var s = 0; s < e.length; ++s) {
                var a = e.charCodeAt(s);
                a < 128 ? n += 1 : a < 2048 ? n += 2 : a < 55296 || a >= 57344 ? n += 3 : (a = 65536 + ((1023 & a) << 10 | 1023 & e.charCodeAt(++s)), 
                n += 4);
              }
              return n += this.encode(8 * n), this.update(e), n;
            }, j.prototype.bytepad = function(e, t) {
              for (var r = this.encode(t), n = 0; n < e.length; ++n) r += this.encodeString(e[n]);
              var i = t - r % t, o = [];
              return o.length = i, this.update(o), this;
            }, j.prototype.finalize = function() {
              if (!this.finalized) {
                this.finalized = !0;
                var e = this.blocks, t = this.lastByteIndex, r = this.blockCount, n = this.s;
                if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for (e[0] = e[r], t = 1; t < r + 1; ++t) e[t] = 0;
                for (e[r - 1] |= 2147483648, t = 0; t < r; ++t) n[t] ^= e[t];
                L(n);
              }
            }, j.prototype.toString = j.prototype.hex = function() {
              this.finalize();
              for (var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = ""; s < n; ) {
                for (o = 0; o < t && s < n; ++o, ++s) e = r[o], a += d[e >> 4 & 15] + d[15 & e] + d[e >> 12 & 15] + d[e >> 8 & 15] + d[e >> 20 & 15] + d[e >> 16 & 15] + d[e >> 28 & 15] + d[e >> 24 & 15];
                s % t == 0 && (L(r), o = 0);
              }
              return i && (e = r[o], a += d[e >> 4 & 15] + d[15 & e], i > 1 && (a += d[e >> 12 & 15] + d[e >> 8 & 15]), i > 2 && (a += d[e >> 20 & 15] + d[e >> 16 & 15])), 
              a;
            }, j.prototype.arrayBuffer = function() {
              this.finalize();
              var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = this.outputBits >> 3;
              e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(a);
              for (var c = new Uint32Array(e); s < n; ) {
                for (o = 0; o < t && s < n; ++o, ++s) c[s] = r[o];
                s % t == 0 && L(r);
              }
              return i && (c[o] = r[o], e = e.slice(0, a)), e;
            }, j.prototype.buffer = j.prototype.arrayBuffer, j.prototype.digest = j.prototype.array = function() {
              this.finalize();
              for (var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, s = 0, a = 0, c = []; a < i; ) {
                for (s = 0; s < r && a < i; ++s, ++a) e = a << 2, t = n[s], c[e] = 255 & t, c[e + 1] = t >> 8 & 255, c[e + 2] = t >> 16 & 255, 
                c[e + 3] = t >> 24 & 255;
                a % r == 0 && L(n);
              }
              return o && (e = a << 2, t = n[s], c[e] = 255 & t, o > 1 && (c[e + 1] = t >> 8 & 255), o > 2 && (c[e + 2] = t >> 16 & 255)), 
              c;
            }, B.prototype = new j, B.prototype.finalize = function() {
              return this.encode(this.outputBits, !0), j.prototype.finalize.call(this);
            };
            var L = function(e) {
              var t, r, n, i, o, s, a, c, f, u, h, d, l, p, y, g, m, v, w, _, S, E, A, x, k, P, O, M, I, T, R, C, N, j, B, L, D, U, q, F, H, z, K, V, G, W, X, Y, J, $, Z, Q, ee, te, re, ne, ie, oe, se, ae, ce, fe, ue;
              for (n = 0; n < 48; n += 2) i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], s = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], 
              a = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], c = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], f = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], 
              u = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], h = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (d = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (s << 1 | a >>> 31), 
              r = (l = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (a << 1 | s >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, 
              e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (c << 1 | f >>> 31), r = o ^ (f << 1 | c >>> 31), e[2] ^= t, 
              e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = s ^ (u << 1 | h >>> 31), 
              r = a ^ (h << 1 | u >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, 
              e[44] ^= t, e[45] ^= r, t = c ^ (d << 1 | l >>> 31), r = f ^ (l << 1 | d >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, 
              e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = u ^ (i << 1 | o >>> 31), r = h ^ (o << 1 | i >>> 31), 
              e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, p = e[0], 
              y = e[1], W = e[11] << 4 | e[10] >>> 28, X = e[10] << 4 | e[11] >>> 28, M = e[20] << 3 | e[21] >>> 29, I = e[21] << 3 | e[20] >>> 29, 
              ae = e[31] << 9 | e[30] >>> 23, ce = e[30] << 9 | e[31] >>> 23, z = e[40] << 18 | e[41] >>> 14, K = e[41] << 18 | e[40] >>> 14, 
              j = e[2] << 1 | e[3] >>> 31, B = e[3] << 1 | e[2] >>> 31, g = e[13] << 12 | e[12] >>> 20, m = e[12] << 12 | e[13] >>> 20, 
              Y = e[22] << 10 | e[23] >>> 22, J = e[23] << 10 | e[22] >>> 22, T = e[33] << 13 | e[32] >>> 19, R = e[32] << 13 | e[33] >>> 19, 
              fe = e[42] << 2 | e[43] >>> 30, ue = e[43] << 2 | e[42] >>> 30, te = e[5] << 30 | e[4] >>> 2, re = e[4] << 30 | e[5] >>> 2, 
              L = e[14] << 6 | e[15] >>> 26, D = e[15] << 6 | e[14] >>> 26, v = e[25] << 11 | e[24] >>> 21, w = e[24] << 11 | e[25] >>> 21, 
              $ = e[34] << 15 | e[35] >>> 17, Z = e[35] << 15 | e[34] >>> 17, C = e[45] << 29 | e[44] >>> 3, N = e[44] << 29 | e[45] >>> 3, 
              x = e[6] << 28 | e[7] >>> 4, k = e[7] << 28 | e[6] >>> 4, ne = e[17] << 23 | e[16] >>> 9, ie = e[16] << 23 | e[17] >>> 9, 
              U = e[26] << 25 | e[27] >>> 7, q = e[27] << 25 | e[26] >>> 7, _ = e[36] << 21 | e[37] >>> 11, S = e[37] << 21 | e[36] >>> 11, 
              Q = e[47] << 24 | e[46] >>> 8, ee = e[46] << 24 | e[47] >>> 8, V = e[8] << 27 | e[9] >>> 5, G = e[9] << 27 | e[8] >>> 5, 
              P = e[18] << 20 | e[19] >>> 12, O = e[19] << 20 | e[18] >>> 12, oe = e[29] << 7 | e[28] >>> 25, se = e[28] << 7 | e[29] >>> 25, 
              F = e[38] << 8 | e[39] >>> 24, H = e[39] << 8 | e[38] >>> 24, E = e[48] << 14 | e[49] >>> 18, A = e[49] << 14 | e[48] >>> 18, 
              e[0] = p ^ ~g & v, e[1] = y ^ ~m & w, e[10] = x ^ ~P & M, e[11] = k ^ ~O & I, e[20] = j ^ ~L & U, e[21] = B ^ ~D & q, e[30] = V ^ ~W & Y, 
              e[31] = G ^ ~X & J, e[40] = te ^ ~ne & oe, e[41] = re ^ ~ie & se, e[2] = g ^ ~v & _, e[3] = m ^ ~w & S, e[12] = P ^ ~M & T, 
              e[13] = O ^ ~I & R, e[22] = L ^ ~U & F, e[23] = D ^ ~q & H, e[32] = W ^ ~Y & $, e[33] = X ^ ~J & Z, e[42] = ne ^ ~oe & ae, 
              e[43] = ie ^ ~se & ce, e[4] = v ^ ~_ & E, e[5] = w ^ ~S & A, e[14] = M ^ ~T & C, e[15] = I ^ ~R & N, e[24] = U ^ ~F & z, 
              e[25] = q ^ ~H & K, e[34] = Y ^ ~$ & Q, e[35] = J ^ ~Z & ee, e[44] = oe ^ ~ae & fe, e[45] = se ^ ~ce & ue, e[6] = _ ^ ~E & p, 
              e[7] = S ^ ~A & y, e[16] = T ^ ~C & x, e[17] = R ^ ~N & k, e[26] = F ^ ~z & j, e[27] = H ^ ~K & B, e[36] = $ ^ ~Q & V, e[37] = Z ^ ~ee & G, 
              e[46] = ae ^ ~fe & te, e[47] = ce ^ ~ue & re, e[8] = E ^ ~p & g, e[9] = A ^ ~y & m, e[18] = C ^ ~x & P, e[19] = N ^ ~k & O, 
              e[28] = z ^ ~j & L, e[29] = K ^ ~B & D, e[38] = Q ^ ~V & W, e[39] = ee ^ ~G & X, e[48] = fe ^ ~te & ne, e[49] = ue ^ ~re & ie, 
              e[0] ^= b[n], e[1] ^= b[n + 1];
            };
            if (f) e.exports = P; else {
              for (M = 0; M < O.length; ++M) a[O[M]] = P[O[M]];
              u && (void 0 === (n = function() {
                return P;
              }.call(t, r, t, e)) || (e.exports = n));
            }
          }();
        },
        7266: (e, t, r) => {
          var n = "undefined" != typeof JSON ? JSON : r(8418);
          e.exports = function(e, t) {
            t || (t = {}), "function" == typeof t && (t = {
              cmp: t
            });
            var r = t.space || "";
            "number" == typeof r && (r = Array(r + 1).join(" "));
            var s, a = "boolean" == typeof t.cycles && t.cycles, c = t.replacer || function(e, t) {
              return t;
            }, f = t.cmp && (s = t.cmp, function(e) {
              return function(t, r) {
                var n = {
                  key: t,
                  value: e[t]
                }, i = {
                  key: r,
                  value: e[r]
                };
                return s(n, i);
              };
            }), u = [];
            return function e(t, s, h, d) {
              var l = r ? "\n" + new Array(d + 1).join(r) : "", p = r ? ": " : ":";
              if (h && h.toJSON && "function" == typeof h.toJSON && (h = h.toJSON()), void 0 !== (h = c.call(t, s, h))) {
                if ("object" != typeof h || null === h) return n.stringify(h);
                if (i(h)) {
                  for (var b = [], y = 0; y < h.length; y++) {
                    var g = e(h, y, h[y], d + 1) || n.stringify(null);
                    b.push(l + r + g);
                  }
                  return "[" + b.join(",") + l + "]";
                }
                if (-1 !== u.indexOf(h)) {
                  if (a) return n.stringify("__cycle__");
                  throw new TypeError("Converting circular structure to JSON");
                }
                u.push(h);
                var m = o(h).sort(f && f(h));
                for (b = [], y = 0; y < m.length; y++) {
                  var v = e(h, s = m[y], h[s], d + 1);
                  if (v) {
                    var w = n.stringify(s) + p + v;
                    b.push(l + r + w);
                  }
                }
                return u.splice(u.indexOf(h), 1), "{" + b.join(",") + l + "}";
              }
            }({
              "": e
            }, "", e, 0);
          };
          var i = Array.isArray || function(e) {
            return "[object Array]" === {}.toString.call(e);
          }, o = Object.keys || function(e) {
            var t = Object.prototype.hasOwnProperty || function() {
              return !0;
            }, r = [];
            for (var n in e) t.call(e, n) && r.push(n);
            return r;
          };
        },
        8418: (e, t, r) => {
          t.parse = r(1396), t.stringify = r(6177);
        },
        1396: e => {
          var t, r, n, i, o = {
            '"': '"',
            "\\": "\\",
            "/": "/",
            b: "\b",
            f: "\f",
            n: "\n",
            r: "\r",
            t: "\t"
          }, s = function(e) {
            throw {
              name: "SyntaxError",
              message: e,
              at: t,
              text: n
            };
          }, a = function(e) {
            return e && e !== r && s("Expected '" + e + "' instead of '" + r + "'"), r = n.charAt(t), t += 1, r;
          }, c = function() {
            var e, t = "";
            for ("-" === r && (t = "-", a("-")); r >= "0" && r <= "9"; ) t += r, a();
            if ("." === r) for (t += "."; a() && r >= "0" && r <= "9"; ) t += r;
            if ("e" === r || "E" === r) for (t += r, a(), "-" !== r && "+" !== r || (t += r, a()); r >= "0" && r <= "9"; ) t += r, a();
            if (e = +t, isFinite(e)) return e;
            s("Bad number");
          }, f = function() {
            var e, t, n, i = "";
            if ('"' === r) for (;a(); ) {
              if ('"' === r) return a(), i;
              if ("\\" === r) if (a(), "u" === r) {
                for (n = 0, t = 0; t < 4 && (e = parseInt(a(), 16), isFinite(e)); t += 1) n = 16 * n + e;
                i += String.fromCharCode(n);
              } else {
                if ("string" != typeof o[r]) break;
                i += o[r];
              } else i += r;
            }
            s("Bad string");
          }, u = function() {
            for (;r && r <= " "; ) a();
          };
          i = function() {
            switch (u(), r) {
             case "{":
              return function() {
                var e, t = {};
                if ("{" === r) {
                  if (a("{"), u(), "}" === r) return a("}"), t;
                  for (;r; ) {
                    if (e = f(), u(), a(":"), Object.hasOwnProperty.call(t, e) && s('Duplicate key "' + e + '"'), t[e] = i(), u(), "}" === r) return a("}"), 
                    t;
                    a(","), u();
                  }
                }
                s("Bad object");
              }();

             case "[":
              return function() {
                var e = [];
                if ("[" === r) {
                  if (a("["), u(), "]" === r) return a("]"), e;
                  for (;r; ) {
                    if (e.push(i()), u(), "]" === r) return a("]"), e;
                    a(","), u();
                  }
                }
                s("Bad array");
              }();

             case '"':
              return f();

             case "-":
              return c();

             default:
              return r >= "0" && r <= "9" ? c() : function() {
                switch (r) {
                 case "t":
                  return a("t"), a("r"), a("u"), a("e"), !0;

                 case "f":
                  return a("f"), a("a"), a("l"), a("s"), a("e"), !1;

                 case "n":
                  return a("n"), a("u"), a("l"), a("l"), null;
                }
                s("Unexpected '" + r + "'");
              }();
            }
          }, e.exports = function(e, o) {
            var a;
            return n = e, t = 0, r = " ", a = i(), u(), r && s("Syntax error"), "function" == typeof o ? function e(t, r) {
              var n, i, s = t[r];
              if (s && "object" == typeof s) for (n in s) Object.prototype.hasOwnProperty.call(s, n) && (void 0 !== (i = e(s, n)) ? s[n] = i : delete s[n]);
              return o.call(t, r, s);
            }({
              "": a
            }, "") : a;
          };
        },
        6177: e => {
          var t, r, n, i = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, o = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
          };
          function s(e) {
            return i.lastIndex = 0, i.test(e) ? '"' + e.replace(i, (function(e) {
              var t = o[e];
              return "string" == typeof t ? t : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
            })) + '"' : '"' + e + '"';
          }
          function a(e, i) {
            var o, c, f, u, h, d = t, l = i[e];
            switch (l && "object" == typeof l && "function" == typeof l.toJSON && (l = l.toJSON(e)), "function" == typeof n && (l = n.call(i, e, l)), 
            typeof l) {
             case "string":
              return s(l);

             case "number":
              return isFinite(l) ? String(l) : "null";

             case "boolean":
             case "null":
              return String(l);

             case "object":
              if (!l) return "null";
              if (t += r, h = [], "[object Array]" === Object.prototype.toString.apply(l)) {
                for (u = l.length, o = 0; o < u; o += 1) h[o] = a(o, l) || "null";
                return f = 0 === h.length ? "[]" : t ? "[\n" + t + h.join(",\n" + t) + "\n" + d + "]" : "[" + h.join(",") + "]", t = d, 
                f;
              }
              if (n && "object" == typeof n) for (u = n.length, o = 0; o < u; o += 1) "string" == typeof (c = n[o]) && (f = a(c, l)) && h.push(s(c) + (t ? ": " : ":") + f); else for (c in l) Object.prototype.hasOwnProperty.call(l, c) && (f = a(c, l)) && h.push(s(c) + (t ? ": " : ":") + f);
              return f = 0 === h.length ? "{}" : t ? "{\n" + t + h.join(",\n" + t) + "\n" + d + "}" : "{" + h.join(",") + "}", t = d, 
              f;
            }
          }
          e.exports = function(e, i, o) {
            var s;
            if (t = "", r = "", "number" == typeof o) for (s = 0; s < o; s += 1) r += " "; else "string" == typeof o && (r = o);
            if (n = i, i && "function" != typeof i && ("object" != typeof i || "number" != typeof i.length)) throw new Error("JSON.stringify");
            return a("", {
              "": e
            });
          };
        },
        5811: (e, t, r) => {
          e.exports = r(6066)(r(9653));
        },
        6066: (e, t, r) => {
          const n = r(7016), i = r(5675);
          e.exports = function(e) {
            const t = n(e), r = i(e);
            return function(e, n) {
              switch ("string" == typeof e ? e.toLowerCase() : e) {
               case "keccak224":
                return new t(1152, 448, null, 224, n);

               case "keccak256":
                return new t(1088, 512, null, 256, n);

               case "keccak384":
                return new t(832, 768, null, 384, n);

               case "keccak512":
                return new t(576, 1024, null, 512, n);

               case "sha3-224":
                return new t(1152, 448, 6, 224, n);

               case "sha3-256":
                return new t(1088, 512, 6, 256, n);

               case "sha3-384":
                return new t(832, 768, 6, 384, n);

               case "sha3-512":
                return new t(576, 1024, 6, 512, n);

               case "shake128":
                return new r(1344, 256, 31, n);

               case "shake256":
                return new r(1088, 512, 31, n);

               default:
                throw new Error("Invald algorithm: " + e);
              }
            };
          };
        },
        7016: (e, t, r) => {
          var n = r(8764).Buffer;
          const {Transform: i} = r(8473);
          e.exports = e => class t extends i {
            constructor(t, r, n, i, o) {
              super(o), this._rate = t, this._capacity = r, this._delimitedSuffix = n, this._hashBitLength = i, this._options = o, this._state = new e, 
              this._state.initialize(t, r), this._finalized = !1;
            }
            _transform(e, t, r) {
              let n = null;
              try {
                this.update(e, t);
              } catch (e) {
                n = e;
              }
              r(n);
            }
            _flush(e) {
              let t = null;
              try {
                this.push(this.digest());
              } catch (e) {
                t = e;
              }
              e(t);
            }
            update(e, t) {
              if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
              if (this._finalized) throw new Error("Digest already called");
              return n.isBuffer(e) || (e = n.from(e, t)), this._state.absorb(e), this;
            }
            digest(e) {
              if (this._finalized) throw new Error("Digest already called");
              this._finalized = !0, this._delimitedSuffix && this._state.absorbLastFewBits(this._delimitedSuffix);
              let t = this._state.squeeze(this._hashBitLength / 8);
              return void 0 !== e && (t = t.toString(e)), this._resetState(), t;
            }
            _resetState() {
              return this._state.initialize(this._rate, this._capacity), this;
            }
            _clone() {
              const e = new t(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
              return this._state.copy(e._state), e._finalized = this._finalized, e;
            }
          };
        },
        5675: (e, t, r) => {
          var n = r(8764).Buffer;
          const {Transform: i} = r(8473);
          e.exports = e => class t extends i {
            constructor(t, r, n, i) {
              super(i), this._rate = t, this._capacity = r, this._delimitedSuffix = n, this._options = i, this._state = new e, this._state.initialize(t, r), 
              this._finalized = !1;
            }
            _transform(e, t, r) {
              let n = null;
              try {
                this.update(e, t);
              } catch (e) {
                n = e;
              }
              r(n);
            }
            _flush() {}
            _read(e) {
              this.push(this.squeeze(e));
            }
            update(e, t) {
              if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
              if (this._finalized) throw new Error("Squeeze already called");
              return n.isBuffer(e) || (e = n.from(e, t)), this._state.absorb(e), this;
            }
            squeeze(e, t) {
              this._finalized || (this._finalized = !0, this._state.absorbLastFewBits(this._delimitedSuffix));
              let r = this._state.squeeze(e);
              return void 0 !== t && (r = r.toString(t)), r;
            }
            _resetState() {
              return this._state.initialize(this._rate, this._capacity), this;
            }
            _clone() {
              const e = new t(this._rate, this._capacity, this._delimitedSuffix, this._options);
              return this._state.copy(e._state), e._finalized = this._finalized, e;
            }
          };
        },
        4040: (e, t) => {
          const r = [ 1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648 ];
          t.p1600 = function(e) {
            for (let t = 0; t < 24; ++t) {
              const n = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], i = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], o = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], a = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], c = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], f = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], u = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], h = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48], d = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49];
              let l = h ^ (o << 1 | s >>> 31), p = d ^ (s << 1 | o >>> 31);
              const b = e[0] ^ l, y = e[1] ^ p, g = e[10] ^ l, m = e[11] ^ p, v = e[20] ^ l, w = e[21] ^ p, _ = e[30] ^ l, S = e[31] ^ p, E = e[40] ^ l, A = e[41] ^ p;
              l = n ^ (a << 1 | c >>> 31), p = i ^ (c << 1 | a >>> 31);
              const x = e[2] ^ l, k = e[3] ^ p, P = e[12] ^ l, O = e[13] ^ p, M = e[22] ^ l, I = e[23] ^ p, T = e[32] ^ l, R = e[33] ^ p, C = e[42] ^ l, N = e[43] ^ p;
              l = o ^ (f << 1 | u >>> 31), p = s ^ (u << 1 | f >>> 31);
              const j = e[4] ^ l, B = e[5] ^ p, L = e[14] ^ l, D = e[15] ^ p, U = e[24] ^ l, q = e[25] ^ p, F = e[34] ^ l, H = e[35] ^ p, z = e[44] ^ l, K = e[45] ^ p;
              l = a ^ (h << 1 | d >>> 31), p = c ^ (d << 1 | h >>> 31);
              const V = e[6] ^ l, G = e[7] ^ p, W = e[16] ^ l, X = e[17] ^ p, Y = e[26] ^ l, J = e[27] ^ p, $ = e[36] ^ l, Z = e[37] ^ p, Q = e[46] ^ l, ee = e[47] ^ p;
              l = f ^ (n << 1 | i >>> 31), p = u ^ (i << 1 | n >>> 31);
              const te = e[8] ^ l, re = e[9] ^ p, ne = e[18] ^ l, ie = e[19] ^ p, oe = e[28] ^ l, se = e[29] ^ p, ae = e[38] ^ l, ce = e[39] ^ p, fe = e[48] ^ l, ue = e[49] ^ p, he = b, de = y, le = m << 4 | g >>> 28, pe = g << 4 | m >>> 28, be = v << 3 | w >>> 29, ye = w << 3 | v >>> 29, ge = S << 9 | _ >>> 23, me = _ << 9 | S >>> 23, ve = E << 18 | A >>> 14, we = A << 18 | E >>> 14, _e = x << 1 | k >>> 31, Se = k << 1 | x >>> 31, Ee = O << 12 | P >>> 20, Ae = P << 12 | O >>> 20, xe = M << 10 | I >>> 22, ke = I << 10 | M >>> 22, Pe = R << 13 | T >>> 19, Oe = T << 13 | R >>> 19, Me = C << 2 | N >>> 30, Ie = N << 2 | C >>> 30, Te = B << 30 | j >>> 2, Re = j << 30 | B >>> 2, Ce = L << 6 | D >>> 26, Ne = D << 6 | L >>> 26, je = q << 11 | U >>> 21, Be = U << 11 | q >>> 21, Le = F << 15 | H >>> 17, De = H << 15 | F >>> 17, Ue = K << 29 | z >>> 3, qe = z << 29 | K >>> 3, Fe = V << 28 | G >>> 4, He = G << 28 | V >>> 4, ze = X << 23 | W >>> 9, Ke = W << 23 | X >>> 9, Ve = Y << 25 | J >>> 7, Ge = J << 25 | Y >>> 7, We = $ << 21 | Z >>> 11, Xe = Z << 21 | $ >>> 11, Ye = ee << 24 | Q >>> 8, Je = Q << 24 | ee >>> 8, $e = te << 27 | re >>> 5, Ze = re << 27 | te >>> 5, Qe = ne << 20 | ie >>> 12, et = ie << 20 | ne >>> 12, tt = se << 7 | oe >>> 25, rt = oe << 7 | se >>> 25, nt = ae << 8 | ce >>> 24, it = ce << 8 | ae >>> 24, ot = fe << 14 | ue >>> 18, st = ue << 14 | fe >>> 18;
              e[0] = he ^ ~Ee & je, e[1] = de ^ ~Ae & Be, e[10] = Fe ^ ~Qe & be, e[11] = He ^ ~et & ye, e[20] = _e ^ ~Ce & Ve, e[21] = Se ^ ~Ne & Ge, 
              e[30] = $e ^ ~le & xe, e[31] = Ze ^ ~pe & ke, e[40] = Te ^ ~ze & tt, e[41] = Re ^ ~Ke & rt, e[2] = Ee ^ ~je & We, e[3] = Ae ^ ~Be & Xe, 
              e[12] = Qe ^ ~be & Pe, e[13] = et ^ ~ye & Oe, e[22] = Ce ^ ~Ve & nt, e[23] = Ne ^ ~Ge & it, e[32] = le ^ ~xe & Le, e[33] = pe ^ ~ke & De, 
              e[42] = ze ^ ~tt & ge, e[43] = Ke ^ ~rt & me, e[4] = je ^ ~We & ot, e[5] = Be ^ ~Xe & st, e[14] = be ^ ~Pe & Ue, e[15] = ye ^ ~Oe & qe, 
              e[24] = Ve ^ ~nt & ve, e[25] = Ge ^ ~it & we, e[34] = xe ^ ~Le & Ye, e[35] = ke ^ ~De & Je, e[44] = tt ^ ~ge & Me, e[45] = rt ^ ~me & Ie, 
              e[6] = We ^ ~ot & he, e[7] = Xe ^ ~st & de, e[16] = Pe ^ ~Ue & Fe, e[17] = Oe ^ ~qe & He, e[26] = nt ^ ~ve & _e, e[27] = it ^ ~we & Se, 
              e[36] = Le ^ ~Ye & $e, e[37] = De ^ ~Je & Ze, e[46] = ge ^ ~Me & Te, e[47] = me ^ ~Ie & Re, e[8] = ot ^ ~he & Ee, e[9] = st ^ ~de & Ae, 
              e[18] = Ue ^ ~Fe & Qe, e[19] = qe ^ ~He & et, e[28] = ve ^ ~_e & Ce, e[29] = we ^ ~Se & Ne, e[38] = Ye ^ ~$e & le, e[39] = Je ^ ~Ze & pe, 
              e[48] = Me ^ ~Te & ze, e[49] = Ie ^ ~Re & Ke, e[0] ^= r[2 * t], e[1] ^= r[2 * t + 1];
            }
          };
        },
        9653: (e, t, r) => {
          var n = r(8764).Buffer;
          const i = r(4040);
          function o() {
            this.state = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], this.blockSize = null, this.count = 0, 
            this.squeezing = !1;
          }
          o.prototype.initialize = function(e, t) {
            for (let r = 0; r < 50; ++r) this.state[r] = 0;
            this.blockSize = e / 8, this.count = 0, this.squeezing = !1;
          }, o.prototype.absorb = function(e) {
            for (let t = 0; t < e.length; ++t) this.state[~~(this.count / 4)] ^= e[t] << this.count % 4 * 8, this.count += 1, this.count === this.blockSize && (i.p1600(this.state), 
            this.count = 0);
          }, o.prototype.absorbLastFewBits = function(e) {
            this.state[~~(this.count / 4)] ^= e << this.count % 4 * 8, 0 != (128 & e) && this.count === this.blockSize - 1 && i.p1600(this.state), 
            this.state[~~((this.blockSize - 1) / 4)] ^= 128 << (this.blockSize - 1) % 4 * 8, i.p1600(this.state), this.count = 0, this.squeezing = !0;
          }, o.prototype.squeeze = function(e) {
            this.squeezing || this.absorbLastFewBits(1);
            const t = n.alloc(e);
            for (let r = 0; r < e; ++r) t[r] = this.state[~~(this.count / 4)] >>> this.count % 4 * 8 & 255, this.count += 1, this.count === this.blockSize && (i.p1600(this.state), 
            this.count = 0);
            return t;
          }, o.prototype.copy = function(e) {
            for (let t = 0; t < 50; ++t) e.state[t] = this.state[t];
            e.blockSize = this.blockSize, e.count = this.count, e.squeezing = this.squeezing;
          }, e.exports = o;
        },
        2378: (e, t, r) => {
          e = r.nmd(e);
          var n = "__lodash_hash_undefined__", i = 9007199254740991, o = "[object Arguments]", s = "[object Function]", a = "[object Object]", c = /^\[object .+?Constructor\]$/, f = /^(?:0|[1-9]\d*)$/, u = {};
          u["[object Float32Array]"] = u["[object Float64Array]"] = u["[object Int8Array]"] = u["[object Int16Array]"] = u["[object Int32Array]"] = u["[object Uint8Array]"] = u["[object Uint8ClampedArray]"] = u["[object Uint16Array]"] = u["[object Uint32Array]"] = !0, 
          u[o] = u["[object Array]"] = u["[object ArrayBuffer]"] = u["[object Boolean]"] = u["[object DataView]"] = u["[object Date]"] = u["[object Error]"] = u[s] = u["[object Map]"] = u["[object Number]"] = u[a] = u["[object RegExp]"] = u["[object Set]"] = u["[object String]"] = u["[object WeakMap]"] = !1;
          var h = "object" == typeof r.g && r.g && r.g.Object === Object && r.g, d = "object" == typeof self && self && self.Object === Object && self, l = h || d || Function("return this")(), p = t && !t.nodeType && t, b = p && e && !e.nodeType && e, y = b && b.exports === p, g = y && h.process, m = function() {
            try {
              return b && b.require && b.require("util").types || g && g.binding && g.binding("util");
            } catch (e) {}
          }(), v = m && m.isTypedArray;
          function w(e, t, r) {
            switch (r.length) {
             case 0:
              return e.call(t);

             case 1:
              return e.call(t, r[0]);

             case 2:
              return e.call(t, r[0], r[1]);

             case 3:
              return e.call(t, r[0], r[1], r[2]);
            }
            return e.apply(t, r);
          }
          var _, S, E, A = Array.prototype, x = Function.prototype, k = Object.prototype, P = l["__core-js_shared__"], O = x.toString, M = k.hasOwnProperty, I = (_ = /[^.]+$/.exec(P && P.keys && P.keys.IE_PROTO || "")) ? "Symbol(src)_1." + _ : "", T = k.toString, R = O.call(Object), C = RegExp("^" + O.call(M).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), N = y ? l.Buffer : void 0, j = l.Symbol, B = l.Uint8Array, L = (N && N.allocUnsafe, 
          S = Object.getPrototypeOf, E = Object, function(e) {
            return S(E(e));
          }), D = Object.create, U = k.propertyIsEnumerable, q = A.splice, F = j ? j.toStringTag : void 0, H = function() {
            try {
              var e = ce(Object, "defineProperty");
              return e({}, "", {}), e;
            } catch (e) {}
          }(), z = N ? N.isBuffer : void 0, K = Math.max, V = Date.now, G = ce(l, "Map"), W = ce(Object, "create"), X = function() {
            function e() {}
            return function(t) {
              if (!we(t)) return {};
              if (D) return D(t);
              e.prototype = t;
              var r = new e;
              return e.prototype = void 0, r;
            };
          }();
          function Y(e) {
            var t = -1, r = null == e ? 0 : e.length;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function J(e) {
            var t = -1, r = null == e ? 0 : e.length;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function $(e) {
            var t = -1, r = null == e ? 0 : e.length;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function Z(e) {
            var t = this.__data__ = new J(e);
            this.size = t.size;
          }
          function Q(e, t, r) {
            (void 0 !== r && !le(e[t], r) || void 0 === r && !(t in e)) && re(e, t, r);
          }
          function ee(e, t, r) {
            var n = e[t];
            M.call(e, t) && le(n, r) && (void 0 !== r || t in e) || re(e, t, r);
          }
          function te(e, t) {
            for (var r = e.length; r--; ) if (le(e[r][0], t)) return r;
            return -1;
          }
          function re(e, t, r) {
            "__proto__" == t && H ? H(e, t, {
              configurable: !0,
              enumerable: !0,
              value: r,
              writable: !0
            }) : e[t] = r;
          }
          function ne(e) {
            return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : F && F in Object(e) ? function(e) {
              var t = M.call(e, F), r = e[F];
              try {
                e[F] = void 0;
                var n = !0;
              } catch (e) {}
              var i = T.call(e);
              return n && (t ? e[F] = r : delete e[F]), i;
            }(e) : function(e) {
              return T.call(e);
            }(e);
          }
          function ie(e) {
            return _e(e) && ne(e) == o;
          }
          function oe(e, t, r, n, i) {
            e !== t && function(e, t, r) {
              for (var n = -1, i = Object(e), o = r(e), s = o.length; s--; ) {
                var a = o[++n];
                if (!1 === t(i[a], a)) break;
              }
            }(t, (function(o, s) {
              if (i || (i = new Z), we(o)) !function(e, t, r, n, i, o, s) {
                var c = he(e, r), f = he(t, r), u = s.get(f);
                if (u) Q(e, r, u); else {
                  var h, d, l, p, b, y = o ? o(c, f, r + "", e, t, s) : void 0, g = void 0 === y;
                  if (g) {
                    var m = be(f), v = !m && ge(f), w = !m && !v && Se(f);
                    y = f, m || v || w ? be(c) ? y = c : _e(b = c) && ye(b) ? y = function(e, t) {
                      var r = -1, n = e.length;
                      for (t || (t = Array(n)); ++r < n; ) t[r] = e[r];
                      return t;
                    }(c) : v ? (g = !1, y = function(e, t) {
                      return e.slice();
                    }(f)) : w ? (g = !1, p = new (l = (h = f).buffer).constructor(l.byteLength), new B(p).set(new B(l)), d = p, y = new h.constructor(d, h.byteOffset, h.length)) : y = [] : function(e) {
                      if (!_e(e) || ne(e) != a) return !1;
                      var t = L(e);
                      if (null === t) return !0;
                      var r = M.call(t, "constructor") && t.constructor;
                      return "function" == typeof r && r instanceof r && O.call(r) == R;
                    }(f) || pe(f) ? (y = c, pe(c) ? y = function(e) {
                      return function(e, t, r, n) {
                        var i = !r;
                        r || (r = {});
                        for (var o = -1, s = t.length; ++o < s; ) {
                          var a = t[o], c = void 0;
                          void 0 === c && (c = e[a]), i ? re(r, a, c) : ee(r, a, c);
                        }
                        return r;
                      }(e, Ee(e));
                    }(c) : we(c) && !me(c) || (y = function(e) {
                      return "function" != typeof e.constructor || ue(e) ? {} : X(L(e));
                    }(f))) : g = !1;
                  }
                  g && (s.set(f, y), i(y, f, n, o, s), s.delete(f)), Q(e, r, y);
                }
              }(e, t, s, r, oe, n, i); else {
                var c = n ? n(he(e, s), o, s + "", e, t, i) : void 0;
                void 0 === c && (c = o), Q(e, s, c);
              }
            }), Ee);
          }
          Y.prototype.clear = function() {
            this.__data__ = W ? W(null) : {}, this.size = 0;
          }, Y.prototype.delete = function(e) {
            var t = this.has(e) && delete this.__data__[e];
            return this.size -= t ? 1 : 0, t;
          }, Y.prototype.get = function(e) {
            var t = this.__data__;
            if (W) {
              var r = t[e];
              return r === n ? void 0 : r;
            }
            return M.call(t, e) ? t[e] : void 0;
          }, Y.prototype.has = function(e) {
            var t = this.__data__;
            return W ? void 0 !== t[e] : M.call(t, e);
          }, Y.prototype.set = function(e, t) {
            var r = this.__data__;
            return this.size += this.has(e) ? 0 : 1, r[e] = W && void 0 === t ? n : t, this;
          }, J.prototype.clear = function() {
            this.__data__ = [], this.size = 0;
          }, J.prototype.delete = function(e) {
            var t = this.__data__, r = te(t, e);
            return !(r < 0 || (r == t.length - 1 ? t.pop() : q.call(t, r, 1), --this.size, 0));
          }, J.prototype.get = function(e) {
            var t = this.__data__, r = te(t, e);
            return r < 0 ? void 0 : t[r][1];
          }, J.prototype.has = function(e) {
            return te(this.__data__, e) > -1;
          }, J.prototype.set = function(e, t) {
            var r = this.__data__, n = te(r, e);
            return n < 0 ? (++this.size, r.push([ e, t ])) : r[n][1] = t, this;
          }, $.prototype.clear = function() {
            this.size = 0, this.__data__ = {
              hash: new Y,
              map: new (G || J),
              string: new Y
            };
          }, $.prototype.delete = function(e) {
            var t = ae(this, e).delete(e);
            return this.size -= t ? 1 : 0, t;
          }, $.prototype.get = function(e) {
            return ae(this, e).get(e);
          }, $.prototype.has = function(e) {
            return ae(this, e).has(e);
          }, $.prototype.set = function(e, t) {
            var r = ae(this, e), n = r.size;
            return r.set(e, t), this.size += r.size == n ? 0 : 1, this;
          }, Z.prototype.clear = function() {
            this.__data__ = new J, this.size = 0;
          }, Z.prototype.delete = function(e) {
            var t = this.__data__, r = t.delete(e);
            return this.size = t.size, r;
          }, Z.prototype.get = function(e) {
            return this.__data__.get(e);
          }, Z.prototype.has = function(e) {
            return this.__data__.has(e);
          }, Z.prototype.set = function(e, t) {
            var r = this.__data__;
            if (r instanceof J) {
              var n = r.__data__;
              if (!G || n.length < 199) return n.push([ e, t ]), this.size = ++r.size, this;
              r = this.__data__ = new $(n);
            }
            return r.set(e, t), this.size = r.size, this;
          };
          var se = H ? function(e, t) {
            return H(e, "toString", {
              configurable: !0,
              enumerable: !1,
              value: (r = t, function() {
                return r;
              }),
              writable: !0
            });
            var r;
          } : ke;
          function ae(e, t) {
            var r, n, i = e.__data__;
            return ("string" == (n = typeof (r = t)) || "number" == n || "symbol" == n || "boolean" == n ? "__proto__" !== r : null === r) ? i["string" == typeof t ? "string" : "hash"] : i.map;
          }
          function ce(e, t) {
            var r = function(e, t) {
              return null == e ? void 0 : e[t];
            }(e, t);
            return function(e) {
              return !(!we(e) || function(e) {
                return !!I && I in e;
              }(e)) && (me(e) ? C : c).test(function(e) {
                if (null != e) {
                  try {
                    return O.call(e);
                  } catch (e) {}
                  try {
                    return e + "";
                  } catch (e) {}
                }
                return "";
              }(e));
            }(r) ? r : void 0;
          }
          function fe(e, t) {
            var r = typeof e;
            return !!(t = null == t ? i : t) && ("number" == r || "symbol" != r && f.test(e)) && e > -1 && e % 1 == 0 && e < t;
          }
          function ue(e) {
            var t = e && e.constructor;
            return e === ("function" == typeof t && t.prototype || k);
          }
          function he(e, t) {
            if (("constructor" !== t || "function" != typeof e[t]) && "__proto__" != t) return e[t];
          }
          var de = function(e) {
            var t = 0, r = 0;
            return function() {
              var n = V(), i = 16 - (n - r);
              if (r = n, i > 0) {
                if (++t >= 800) return arguments[0];
              } else t = 0;
              return e.apply(void 0, arguments);
            };
          }(se);
          function le(e, t) {
            return e === t || e != e && t != t;
          }
          var pe = ie(function() {
            return arguments;
          }()) ? ie : function(e) {
            return _e(e) && M.call(e, "callee") && !U.call(e, "callee");
          }, be = Array.isArray;
          function ye(e) {
            return null != e && ve(e.length) && !me(e);
          }
          var ge = z || function() {
            return !1;
          };
          function me(e) {
            if (!we(e)) return !1;
            var t = ne(e);
            return t == s || "[object GeneratorFunction]" == t || "[object AsyncFunction]" == t || "[object Proxy]" == t;
          }
          function ve(e) {
            return "number" == typeof e && e > -1 && e % 1 == 0 && e <= i;
          }
          function we(e) {
            var t = typeof e;
            return null != e && ("object" == t || "function" == t);
          }
          function _e(e) {
            return null != e && "object" == typeof e;
          }
          var Se = v ? function(e) {
            return function(t) {
              return e(t);
            };
          }(v) : function(e) {
            return _e(e) && ve(e.length) && !!u[ne(e)];
          };
          function Ee(e) {
            return ye(e) ? function(e, t) {
              var r = be(e), n = !r && pe(e), i = !r && !n && ge(e), o = !r && !n && !i && Se(e), s = r || n || i || o, a = s ? function(e, t) {
                for (var r = -1, n = Array(e); ++r < e; ) n[r] = t(r);
                return n;
              }(e.length, String) : [], c = a.length;
              for (var f in e) s && ("length" == f || i && ("offset" == f || "parent" == f) || o && ("buffer" == f || "byteLength" == f || "byteOffset" == f) || fe(f, c)) || a.push(f);
              return a;
            }(e) : function(e) {
              if (!we(e)) return function(e) {
                var t = [];
                if (null != e) for (var r in Object(e)) t.push(r);
                return t;
              }(e);
              var t = ue(e), r = [];
              for (var n in e) ("constructor" != n || !t && M.call(e, n)) && r.push(n);
              return r;
            }(e);
          }
          var Ae, xe = (Ae = function(e, t, r) {
            oe(e, t, r);
          }, function(e, t) {
            return de(function(e, t, r) {
              return t = K(void 0 === t ? e.length - 1 : t, 0), function() {
                for (var n = arguments, i = -1, o = K(n.length - t, 0), s = Array(o); ++i < o; ) s[i] = n[t + i];
                i = -1;
                for (var a = Array(t + 1); ++i < t; ) a[i] = n[i];
                return a[t] = r(s), w(e, this, a);
              };
            }(e, void 0, ke), e + "");
          }((function(e, t) {
            var r = -1, n = t.length, i = n > 1 ? t[n - 1] : void 0, o = n > 2 ? t[2] : void 0;
            for (i = Ae.length > 3 && "function" == typeof i ? (n--, i) : void 0, o && function(e, t, r) {
              if (!we(r)) return !1;
              var n = typeof t;
              return !!("number" == n ? ye(r) && fe(t, r.length) : "string" == n && t in r) && le(r[t], e);
            }(t[0], t[1], o) && (i = n < 3 ? void 0 : i, n = 1), e = Object(e); ++r < n; ) {
              var s = t[r];
              s && Ae(e, s, r);
            }
            return e;
          })));
          function ke(e) {
            return e;
          }
          e.exports = xe;
        },
        2043: function(e, t, r) {
          var i, o;
          !function(s, a) {
            "use strict";
            i = function() {
              var e = function() {}, t = "undefined", r = typeof window !== t && typeof window.navigator !== t && /Trident\/|MSIE /.test(window.navigator.userAgent), i = [ "trace", "debug", "info", "warn", "error" ];
              function o(e, t) {
                var r = e[t];
                if ("function" == typeof r.bind) return r.bind(e);
                try {
                  return Function.prototype.bind.call(r, e);
                } catch (t) {
                  return function() {
                    return Function.prototype.apply.apply(r, [ e, arguments ]);
                  };
                }
              }
              function s() {
                n.log && (n.log.apply ? n.log.apply(n, arguments) : Function.prototype.apply.apply(n.log, [ n, arguments ])), n.trace && n.trace();
              }
              function a(i) {
                return "debug" === i && (i = "log"), typeof n !== t && ("trace" === i && r ? s : void 0 !== n[i] ? o(n, i) : void 0 !== n.log ? o(n, "log") : e);
              }
              function c(t, r) {
                for (var n = 0; n < i.length; n++) {
                  var o = i[n];
                  this[o] = n < t ? e : this.methodFactory(o, t, r);
                }
                this.log = this.debug;
              }
              function f(e, r, i) {
                return function() {
                  typeof n !== t && (c.call(this, r, i), this[e].apply(this, arguments));
                };
              }
              function u(e, t, r) {
                return a(e) || f.apply(this, arguments);
              }
              function h(e, r, o) {
                var s, a = this;
                r = null == r ? "WARN" : r;
                var f = "loglevel";
                function h() {
                  var e;
                  if (typeof window !== t && f) {
                    try {
                      e = window.localStorage[f];
                    } catch (e) {}
                    if (typeof e === t) try {
                      var r = window.document.cookie, n = r.indexOf(encodeURIComponent(f) + "=");
                      -1 !== n && (e = /^([^;]+)/.exec(r.slice(n))[1]);
                    } catch (e) {}
                    return void 0 === a.levels[e] && (e = void 0), e;
                  }
                }
                "string" == typeof e ? f += ":" + e : "symbol" == typeof e && (f = void 0), a.name = e, a.levels = {
                  TRACE: 0,
                  DEBUG: 1,
                  INFO: 2,
                  WARN: 3,
                  ERROR: 4,
                  SILENT: 5
                }, a.methodFactory = o || u, a.getLevel = function() {
                  return s;
                }, a.setLevel = function(r, o) {
                  if ("string" == typeof r && void 0 !== a.levels[r.toUpperCase()] && (r = a.levels[r.toUpperCase()]), !("number" == typeof r && r >= 0 && r <= a.levels.SILENT)) throw "log.setLevel() called with invalid level: " + r;
                  if (s = r, !1 !== o && function(e) {
                    var r = (i[e] || "silent").toUpperCase();
                    if (typeof window !== t && f) {
                      try {
                        return void (window.localStorage[f] = r);
                      } catch (e) {}
                      try {
                        window.document.cookie = encodeURIComponent(f) + "=" + r + ";";
                      } catch (e) {}
                    }
                  }(r), c.call(a, r, e), typeof n === t && r < a.levels.SILENT) return "No console available for logging";
                }, a.setDefaultLevel = function(e) {
                  r = e, h() || a.setLevel(e, !1);
                }, a.resetLevel = function() {
                  a.setLevel(r, !1), function() {
                    if (typeof window !== t && f) {
                      try {
                        return void window.localStorage.removeItem(f);
                      } catch (e) {}
                      try {
                        window.document.cookie = encodeURIComponent(f) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                      } catch (e) {}
                    }
                  }();
                }, a.enableAll = function(e) {
                  a.setLevel(a.levels.TRACE, e);
                }, a.disableAll = function(e) {
                  a.setLevel(a.levels.SILENT, e);
                };
                var d = h();
                null == d && (d = r), a.setLevel(d, !1);
              }
              var d = new h, l = {};
              d.getLogger = function(e) {
                if ("symbol" != typeof e && "string" != typeof e || "" === e) throw new TypeError("You must supply a name when creating a logger.");
                var t = l[e];
                return t || (t = l[e] = new h(e, d.getLevel(), d.methodFactory)), t;
              };
              var p = typeof window !== t ? window.log : void 0;
              return d.noConflict = function() {
                return typeof window !== t && window.log === d && (window.log = p), d;
              }, d.getLoggers = function() {
                return l;
              }, d.default = d, d;
            }, void 0 === (o = i.call(t, r, t, e)) || (e.exports = o);
          }();
        },
        2318: (e, t, r) => {
          "use strict";
          var n = r(5717), i = r(3349), o = r(9509).Buffer, s = new Array(16);
          function a() {
            i.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
          }
          function c(e, t) {
            return e << t | e >>> 32 - t;
          }
          function f(e, t, r, n, i, o, s) {
            return c(e + (t & r | ~t & n) + i + o | 0, s) + t | 0;
          }
          function u(e, t, r, n, i, o, s) {
            return c(e + (t & n | r & ~n) + i + o | 0, s) + t | 0;
          }
          function h(e, t, r, n, i, o, s) {
            return c(e + (t ^ r ^ n) + i + o | 0, s) + t | 0;
          }
          function d(e, t, r, n, i, o, s) {
            return c(e + (r ^ (t | ~n)) + i + o | 0, s) + t | 0;
          }
          n(a, i), a.prototype._update = function() {
            for (var e = s, t = 0; t < 16; ++t) e[t] = this._block.readInt32LE(4 * t);
            var r = this._a, n = this._b, i = this._c, o = this._d;
            r = f(r, n, i, o, e[0], 3614090360, 7), o = f(o, r, n, i, e[1], 3905402710, 12), i = f(i, o, r, n, e[2], 606105819, 17), 
            n = f(n, i, o, r, e[3], 3250441966, 22), r = f(r, n, i, o, e[4], 4118548399, 7), o = f(o, r, n, i, e[5], 1200080426, 12), 
            i = f(i, o, r, n, e[6], 2821735955, 17), n = f(n, i, o, r, e[7], 4249261313, 22), r = f(r, n, i, o, e[8], 1770035416, 7), 
            o = f(o, r, n, i, e[9], 2336552879, 12), i = f(i, o, r, n, e[10], 4294925233, 17), n = f(n, i, o, r, e[11], 2304563134, 22), 
            r = f(r, n, i, o, e[12], 1804603682, 7), o = f(o, r, n, i, e[13], 4254626195, 12), i = f(i, o, r, n, e[14], 2792965006, 17), 
            r = u(r, n = f(n, i, o, r, e[15], 1236535329, 22), i, o, e[1], 4129170786, 5), o = u(o, r, n, i, e[6], 3225465664, 9), i = u(i, o, r, n, e[11], 643717713, 14), 
            n = u(n, i, o, r, e[0], 3921069994, 20), r = u(r, n, i, o, e[5], 3593408605, 5), o = u(o, r, n, i, e[10], 38016083, 9), 
            i = u(i, o, r, n, e[15], 3634488961, 14), n = u(n, i, o, r, e[4], 3889429448, 20), r = u(r, n, i, o, e[9], 568446438, 5), 
            o = u(o, r, n, i, e[14], 3275163606, 9), i = u(i, o, r, n, e[3], 4107603335, 14), n = u(n, i, o, r, e[8], 1163531501, 20), 
            r = u(r, n, i, o, e[13], 2850285829, 5), o = u(o, r, n, i, e[2], 4243563512, 9), i = u(i, o, r, n, e[7], 1735328473, 14), 
            r = h(r, n = u(n, i, o, r, e[12], 2368359562, 20), i, o, e[5], 4294588738, 4), o = h(o, r, n, i, e[8], 2272392833, 11), 
            i = h(i, o, r, n, e[11], 1839030562, 16), n = h(n, i, o, r, e[14], 4259657740, 23), r = h(r, n, i, o, e[1], 2763975236, 4), 
            o = h(o, r, n, i, e[4], 1272893353, 11), i = h(i, o, r, n, e[7], 4139469664, 16), n = h(n, i, o, r, e[10], 3200236656, 23), 
            r = h(r, n, i, o, e[13], 681279174, 4), o = h(o, r, n, i, e[0], 3936430074, 11), i = h(i, o, r, n, e[3], 3572445317, 16), 
            n = h(n, i, o, r, e[6], 76029189, 23), r = h(r, n, i, o, e[9], 3654602809, 4), o = h(o, r, n, i, e[12], 3873151461, 11), 
            i = h(i, o, r, n, e[15], 530742520, 16), r = d(r, n = h(n, i, o, r, e[2], 3299628645, 23), i, o, e[0], 4096336452, 6), o = d(o, r, n, i, e[7], 1126891415, 10), 
            i = d(i, o, r, n, e[14], 2878612391, 15), n = d(n, i, o, r, e[5], 4237533241, 21), r = d(r, n, i, o, e[12], 1700485571, 6), 
            o = d(o, r, n, i, e[3], 2399980690, 10), i = d(i, o, r, n, e[10], 4293915773, 15), n = d(n, i, o, r, e[1], 2240044497, 21), 
            r = d(r, n, i, o, e[8], 1873313359, 6), o = d(o, r, n, i, e[15], 4264355552, 10), i = d(i, o, r, n, e[6], 2734768916, 15), 
            n = d(n, i, o, r, e[13], 1309151649, 21), r = d(r, n, i, o, e[4], 4149444226, 6), o = d(o, r, n, i, e[11], 3174756917, 10), 
            i = d(i, o, r, n, e[2], 718787259, 15), n = d(n, i, o, r, e[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + n | 0, 
            this._c = this._c + i | 0, this._d = this._d + o | 0;
          }, a.prototype._digest = function() {
            this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), 
            this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), 
            this._update();
            var e = o.allocUnsafe(16);
            return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), 
            e;
          }, e.exports = a;
        },
        3047: (e, t, r) => {
          var n = r(3550), i = r(9931);
          function o(e) {
            this.rand = e || new i.Rand;
          }
          e.exports = o, o.create = function(e) {
            return new o(e);
          }, o.prototype._randbelow = function(e) {
            var t = e.bitLength(), r = Math.ceil(t / 8);
            do {
              var i = new n(this.rand.generate(r));
            } while (i.cmp(e) >= 0);
            return i;
          }, o.prototype._randrange = function(e, t) {
            var r = t.sub(e);
            return e.add(this._randbelow(r));
          }, o.prototype.test = function(e, t, r) {
            var i = e.bitLength(), o = n.mont(e), s = new n(1).toRed(o);
            t || (t = Math.max(1, i / 48 | 0));
            for (var a = e.subn(1), c = 0; !a.testn(c); c++) ;
            for (var f = e.shrn(c), u = a.toRed(o); t > 0; t--) {
              var h = this._randrange(new n(2), a);
              r && r(h);
              var d = h.toRed(o).redPow(f);
              if (0 !== d.cmp(s) && 0 !== d.cmp(u)) {
                for (var l = 1; l < c; l++) {
                  if (0 === (d = d.redSqr()).cmp(s)) return !1;
                  if (0 === d.cmp(u)) break;
                }
                if (l === c) return !1;
              }
            }
            return !0;
          }, o.prototype.getDivisor = function(e, t) {
            var r = e.bitLength(), i = n.mont(e), o = new n(1).toRed(i);
            t || (t = Math.max(1, r / 48 | 0));
            for (var s = e.subn(1), a = 0; !s.testn(a); a++) ;
            for (var c = e.shrn(a), f = s.toRed(i); t > 0; t--) {
              var u = this._randrange(new n(2), s), h = e.gcd(u);
              if (0 !== h.cmpn(1)) return h;
              var d = u.toRed(i).redPow(c);
              if (0 !== d.cmp(o) && 0 !== d.cmp(f)) {
                for (var l = 1; l < a; l++) {
                  if (0 === (d = d.redSqr()).cmp(o)) return d.fromRed().subn(1).gcd(e);
                  if (0 === d.cmp(f)) break;
                }
                if (l === a) return (d = d.redSqr()).fromRed().subn(1).gcd(e);
              }
            }
            return !1;
          };
        },
        9746: e => {
          function t(e, t) {
            if (!e) throw new Error(t || "Assertion failed");
          }
          e.exports = t, t.equal = function(e, t, r) {
            if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
          };
        },
        4504: (e, t) => {
          "use strict";
          var r = t;
          function n(e) {
            return 1 === e.length ? "0" + e : e;
          }
          function i(e) {
            for (var t = "", r = 0; r < e.length; r++) t += n(e[r].toString(16));
            return t;
          }
          r.toArray = function(e, t) {
            if (Array.isArray(e)) return e.slice();
            if (!e) return [];
            var r = [];
            if ("string" != typeof e) {
              for (var n = 0; n < e.length; n++) r[n] = 0 | e[n];
              return r;
            }
            if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2) r.push(parseInt(e[n] + e[n + 1], 16)); else for (n = 0; n < e.length; n++) {
              var i = e.charCodeAt(n), o = i >> 8, s = 255 & i;
              o ? r.push(o, s) : r.push(s);
            }
            return r;
          }, r.zero2 = n, r.toHex = i, r.encode = function(e, t) {
            return "hex" === t ? i(e) : e;
          };
        },
        3206: (e, t, r) => {
          var n = r(3550), i = r(9604);
          e.exports = function(e) {
            if ("string" == typeof e || "number" == typeof e) {
              var t = new n(1), r = String(e).toLowerCase().trim(), o = "0x" === r.substr(0, 2) || "-0x" === r.substr(0, 3), s = i(r);
              if ("-" === s.substr(0, 1) && (s = i(s.slice(1)), t = new n(-1, 10)), !(s = "" === s ? "0" : s).match(/^-?[0-9]+$/) && s.match(/^[0-9A-Fa-f]+$/) || s.match(/^[a-fA-F]+$/) || !0 === o && s.match(/^[0-9A-Fa-f]+$/)) return new n(s, 16).mul(t);
              if ((s.match(/^-?[0-9]+$/) || "" === s) && !1 === o) return new n(s, 10).mul(t);
            } else if ("object" == typeof e && e.toString && !e.pop && !e.push && e.toString(10).match(/^-?[0-9]+$/) && (e.mul || e.dividedToIntegerBy)) return new n(e.toString(10), 10);
            throw new Error("[number-to-bn] while converting number " + JSON.stringify(e) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
          };
        },
        4244: e => {
          "use strict";
          var t = function(e) {
            return e != e;
          };
          e.exports = function(e, r) {
            return 0 === e && 0 === r ? 1 / e == 1 / r : e === r || !(!t(e) || !t(r));
          };
        },
        609: (e, t, r) => {
          "use strict";
          var n = r(4289), i = r(5559), o = r(4244), s = r(5624), a = r(2281), c = i(s(), Object);
          n(c, {
            getPolyfill: s,
            implementation: o,
            shim: a
          }), e.exports = c;
        },
        5624: (e, t, r) => {
          "use strict";
          var n = r(4244);
          e.exports = function() {
            return "function" == typeof Object.is ? Object.is : n;
          };
        },
        2281: (e, t, r) => {
          "use strict";
          var n = r(5624), i = r(4289);
          e.exports = function() {
            var e = n();
            return i(Object, {
              is: e
            }, {
              is: function() {
                return Object.is !== e;
              }
            }), e;
          };
        },
        8987: (e, t, r) => {
          "use strict";
          var n;
          if (!Object.keys) {
            var i = Object.prototype.hasOwnProperty, o = Object.prototype.toString, s = r(1414), a = Object.prototype.propertyIsEnumerable, c = !a.call({
              toString: null
            }, "toString"), f = a.call((function() {}), "prototype"), u = [ "toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor" ], h = function(e) {
              var t = e.constructor;
              return t && t.prototype === e;
            }, d = {
              $applicationCache: !0,
              $console: !0,
              $external: !0,
              $frame: !0,
              $frameElement: !0,
              $frames: !0,
              $innerHeight: !0,
              $innerWidth: !0,
              $onmozfullscreenchange: !0,
              $onmozfullscreenerror: !0,
              $outerHeight: !0,
              $outerWidth: !0,
              $pageXOffset: !0,
              $pageYOffset: !0,
              $parent: !0,
              $scrollLeft: !0,
              $scrollTop: !0,
              $scrollX: !0,
              $scrollY: !0,
              $self: !0,
              $webkitIndexedDB: !0,
              $webkitStorageInfo: !0,
              $window: !0
            }, l = function() {
              if ("undefined" == typeof window) return !1;
              for (var e in window) try {
                if (!d["$" + e] && i.call(window, e) && null !== window[e] && "object" == typeof window[e]) try {
                  h(window[e]);
                } catch (e) {
                  return !0;
                }
              } catch (e) {
                return !0;
              }
              return !1;
            }();
            n = function(e) {
              var t = null !== e && "object" == typeof e, r = "[object Function]" === o.call(e), n = s(e), a = t && "[object String]" === o.call(e), d = [];
              if (!t && !r && !n) throw new TypeError("Object.keys called on a non-object");
              var p = f && r;
              if (a && e.length > 0 && !i.call(e, 0)) for (var b = 0; b < e.length; ++b) d.push(String(b));
              if (n && e.length > 0) for (var y = 0; y < e.length; ++y) d.push(String(y)); else for (var g in e) p && "prototype" === g || !i.call(e, g) || d.push(String(g));
              if (c) for (var m = function(e) {
                if ("undefined" == typeof window || !l) return h(e);
                try {
                  return h(e);
                } catch (e) {
                  return !1;
                }
              }(e), v = 0; v < u.length; ++v) m && "constructor" === u[v] || !i.call(e, u[v]) || d.push(u[v]);
              return d;
            };
          }
          e.exports = n;
        },
        2215: (e, t, r) => {
          "use strict";
          var n = Array.prototype.slice, i = r(1414), o = Object.keys, s = o ? function(e) {
            return o(e);
          } : r(8987), a = Object.keys;
          s.shim = function() {
            if (Object.keys) {
              var e = function() {
                var e = Object.keys(arguments);
                return e && e.length === arguments.length;
              }(1, 2);
              e || (Object.keys = function(e) {
                return i(e) ? a(n.call(e)) : a(e);
              });
            } else Object.keys = s;
            return Object.keys || s;
          }, e.exports = s;
        },
        1414: e => {
          "use strict";
          var t = Object.prototype.toString;
          e.exports = function(e) {
            var r = t.call(e), n = "[object Arguments]" === r;
            return n || (n = "[object Array]" !== r && null !== e && "object" == typeof e && "number" == typeof e.length && e.length >= 0 && "[object Function]" === t.call(e.callee)), 
            n;
          };
        },
        778: (e, t, r) => {
          var n = r(2479);
          function i(e) {
            var t = function() {
              return t.called ? t.value : (t.called = !0, t.value = e.apply(this, arguments));
            };
            return t.called = !1, t;
          }
          function o(e) {
            var t = function() {
              if (t.called) throw new Error(t.onceError);
              return t.called = !0, t.value = e.apply(this, arguments);
            }, r = e.name || "Function wrapped with `once`";
            return t.onceError = r + " shouldn't be called more than once", t.called = !1, t;
          }
          e.exports = n(i), e.exports.strict = n(o), i.proto = i((function() {
            Object.defineProperty(Function.prototype, "once", {
              value: function() {
                return i(this);
              },
              configurable: !0
            }), Object.defineProperty(Function.prototype, "onceStrict", {
              value: function() {
                return o(this);
              },
              configurable: !0
            });
          }));
        },
        7435: (e, t) => {
          t.endianness = function() {
            return "LE";
          }, t.hostname = function() {
            return "undefined" != typeof location ? location.hostname : "";
          }, t.loadavg = function() {
            return [];
          }, t.uptime = function() {
            return 0;
          }, t.freemem = function() {
            return Number.MAX_VALUE;
          }, t.totalmem = function() {
            return Number.MAX_VALUE;
          }, t.cpus = function() {
            return [];
          }, t.type = function() {
            return "Browser";
          }, t.release = function() {
            return "undefined" != typeof navigator ? navigator.appVersion : "";
          }, t.networkInterfaces = t.getNetworkInterfaces = function() {
            return {};
          }, t.arch = function() {
            return "javascript";
          }, t.platform = function() {
            return "browser";
          }, t.tmpdir = t.tmpDir = function() {
            return "/tmp";
          }, t.EOL = "\n", t.homedir = function() {
            return "/";
          };
        },
        2818: (e, t, r) => {
          "use strict";
          var n = r(9809);
          t.certificate = r(1934);
          var i = n.define("RSAPrivateKey", (function() {
            this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
          }));
          t.RSAPrivateKey = i;
          var o = n.define("RSAPublicKey", (function() {
            this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
          }));
          t.RSAPublicKey = o;
          var s = n.define("SubjectPublicKeyInfo", (function() {
            this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
          }));
          t.PublicKey = s;
          var a = n.define("AlgorithmIdentifier", (function() {
            this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
          })), c = n.define("PrivateKeyInfo", (function() {
            this.seq().obj(this.key("version").int(), this.key("algorithm").use(a), this.key("subjectPrivateKey").octstr());
          }));
          t.PrivateKey = c;
          var f = n.define("EncryptedPrivateKeyInfo", (function() {
            this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
          }));
          t.EncryptedPrivateKey = f;
          var u = n.define("DSAPrivateKey", (function() {
            this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
          }));
          t.DSAPrivateKey = u, t.DSAparam = n.define("DSAparam", (function() {
            this.int();
          }));
          var h = n.define("ECPrivateKey", (function() {
            this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(d), this.key("publicKey").optional().explicit(1).bitstr());
          }));
          t.ECPrivateKey = h;
          var d = n.define("ECParameters", (function() {
            this.choice({
              namedCurve: this.objid()
            });
          }));
          t.signature = n.define("signature", (function() {
            this.seq().obj(this.key("r").int(), this.key("s").int());
          }));
        },
        1934: (e, t, r) => {
          "use strict";
          var n = r(9809), i = n.define("Time", (function() {
            this.choice({
              utcTime: this.utctime(),
              generalTime: this.gentime()
            });
          })), o = n.define("AttributeTypeValue", (function() {
            this.seq().obj(this.key("type").objid(), this.key("value").any());
          })), s = n.define("AlgorithmIdentifier", (function() {
            this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
          })), a = n.define("SubjectPublicKeyInfo", (function() {
            this.seq().obj(this.key("algorithm").use(s), this.key("subjectPublicKey").bitstr());
          })), c = n.define("RelativeDistinguishedName", (function() {
            this.setof(o);
          })), f = n.define("RDNSequence", (function() {
            this.seqof(c);
          })), u = n.define("Name", (function() {
            this.choice({
              rdnSequence: this.use(f)
            });
          })), h = n.define("Validity", (function() {
            this.seq().obj(this.key("notBefore").use(i), this.key("notAfter").use(i));
          })), d = n.define("Extension", (function() {
            this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(!1), this.key("extnValue").octstr());
          })), l = n.define("TBSCertificate", (function() {
            this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(s), this.key("issuer").use(u), this.key("validity").use(h), this.key("subject").use(u), this.key("subjectPublicKeyInfo").use(a), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(d).optional());
          })), p = n.define("X509Certificate", (function() {
            this.seq().obj(this.key("tbsCertificate").use(l), this.key("signatureAlgorithm").use(s), this.key("signatureValue").bitstr());
          }));
          e.exports = p;
        },
        7631: (e, t, r) => {
          var n = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, i = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, o = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, s = r(3048), a = r(4696), c = r(9509).Buffer;
          e.exports = function(e, t) {
            var r, f = e.toString(), u = f.match(n);
            if (u) {
              var h = "aes" + u[1], d = c.from(u[2], "hex"), l = c.from(u[3].replace(/[\r\n]/g, ""), "base64"), p = s(t, d.slice(0, 8), parseInt(u[1], 10)).key, b = [], y = a.createDecipheriv(h, p, d);
              b.push(y.update(l)), b.push(y.final()), r = c.concat(b);
            } else {
              var g = f.match(o);
              r = c.from(g[2].replace(/[\r\n]/g, ""), "base64");
            }
            return {
              tag: f.match(i)[1],
              data: r
            };
          };
        },
        980: (e, t, r) => {
          var n = r(2818), i = r(2562), o = r(7631), s = r(4696), a = r(5632), c = r(9509).Buffer;
          function f(e) {
            var t;
            "object" != typeof e || c.isBuffer(e) || (t = e.passphrase, e = e.key), "string" == typeof e && (e = c.from(e));
            var r, f, u = o(e, t), h = u.tag, d = u.data;
            switch (h) {
             case "CERTIFICATE":
              f = n.certificate.decode(d, "der").tbsCertificate.subjectPublicKeyInfo;

             case "PUBLIC KEY":
              switch (f || (f = n.PublicKey.decode(d, "der")), r = f.algorithm.algorithm.join(".")) {
               case "1.2.840.113549.1.1.1":
                return n.RSAPublicKey.decode(f.subjectPublicKey.data, "der");

               case "1.2.840.10045.2.1":
                return f.subjectPrivateKey = f.subjectPublicKey, {
                  type: "ec",
                  data: f
                };

               case "1.2.840.10040.4.1":
                return f.algorithm.params.pub_key = n.DSAparam.decode(f.subjectPublicKey.data, "der"), {
                  type: "dsa",
                  data: f.algorithm.params
                };

               default:
                throw new Error("unknown key id " + r);
              }

             case "ENCRYPTED PRIVATE KEY":
              d = function(e, t) {
                var r = e.algorithm.decrypt.kde.kdeparams.salt, n = parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), o = i[e.algorithm.decrypt.cipher.algo.join(".")], f = e.algorithm.decrypt.cipher.iv, u = e.subjectPrivateKey, h = parseInt(o.split("-")[1], 10) / 8, d = a.pbkdf2Sync(t, r, n, h, "sha1"), l = s.createDecipheriv(o, d, f), p = [];
                return p.push(l.update(u)), p.push(l.final()), c.concat(p);
              }(d = n.EncryptedPrivateKey.decode(d, "der"), t);

             case "PRIVATE KEY":
              switch (r = (f = n.PrivateKey.decode(d, "der")).algorithm.algorithm.join(".")) {
               case "1.2.840.113549.1.1.1":
                return n.RSAPrivateKey.decode(f.subjectPrivateKey, "der");

               case "1.2.840.10045.2.1":
                return {
                  curve: f.algorithm.curve,
                  privateKey: n.ECPrivateKey.decode(f.subjectPrivateKey, "der").privateKey
                };

               case "1.2.840.10040.4.1":
                return f.algorithm.params.priv_key = n.DSAparam.decode(f.subjectPrivateKey, "der"), {
                  type: "dsa",
                  params: f.algorithm.params
                };

               default:
                throw new Error("unknown key id " + r);
              }

             case "RSA PUBLIC KEY":
              return n.RSAPublicKey.decode(d, "der");

             case "RSA PRIVATE KEY":
              return n.RSAPrivateKey.decode(d, "der");

             case "DSA PRIVATE KEY":
              return {
                type: "dsa",
                params: n.DSAPrivateKey.decode(d, "der")
              };

             case "EC PRIVATE KEY":
              return {
                curve: (d = n.ECPrivateKey.decode(d, "der")).parameters.value,
                privateKey: d.privateKey
              };

             default:
              throw new Error("unknown key type " + h);
            }
          }
          e.exports = f, f.signature = n.signature;
        },
        5632: (e, t, r) => {
          t.pbkdf2 = r(8638), t.pbkdf2Sync = r(1257);
        },
        8638: (e, t, r) => {
          var n, i, o = r(9509).Buffer, s = r(7357), a = r(2368), c = r(1257), f = r(7777), u = r.g.crypto && r.g.crypto.subtle, h = {
            sha: "SHA-1",
            "sha-1": "SHA-1",
            sha1: "SHA-1",
            sha256: "SHA-256",
            "sha-256": "SHA-256",
            sha384: "SHA-384",
            "sha-384": "SHA-384",
            "sha-512": "SHA-512",
            sha512: "SHA-512"
          }, d = [];
          function l() {
            return i || (i = r.g.process && r.g.process.nextTick ? r.g.process.nextTick : r.g.queueMicrotask ? r.g.queueMicrotask : r.g.setImmediate ? r.g.setImmediate : r.g.setTimeout);
          }
          function p(e, t, r, n, i) {
            return u.importKey("raw", e, {
              name: "PBKDF2"
            }, !1, [ "deriveBits" ]).then((function(e) {
              return u.deriveBits({
                name: "PBKDF2",
                salt: t,
                iterations: r,
                hash: {
                  name: i
                }
              }, e, n << 3);
            })).then((function(e) {
              return o.from(e);
            }));
          }
          e.exports = function(e, t, i, b, y, g) {
            "function" == typeof y && (g = y, y = void 0);
            var m = h[(y = y || "sha1").toLowerCase()];
            if (m && "function" == typeof r.g.Promise) {
              if (s(i, b), e = f(e, a, "Password"), t = f(t, a, "Salt"), "function" != typeof g) throw new Error("No callback provided to pbkdf2");
              !function(e, t) {
                e.then((function(e) {
                  l()((function() {
                    t(null, e);
                  }));
                }), (function(e) {
                  l()((function() {
                    t(e);
                  }));
                }));
              }(function(e) {
                if (r.g.process && !r.g.process.browser) return Promise.resolve(!1);
                if (!u || !u.importKey || !u.deriveBits) return Promise.resolve(!1);
                if (void 0 !== d[e]) return d[e];
                var t = p(n = n || o.alloc(8), n, 10, 128, e).then((function() {
                  return !0;
                })).catch((function() {
                  return !1;
                }));
                return d[e] = t, t;
              }(m).then((function(r) {
                return r ? p(e, t, i, b, m) : c(e, t, i, b, y);
              })), g);
            } else l()((function() {
              var r;
              try {
                r = c(e, t, i, b, y);
              } catch (e) {
                return g(e);
              }
              g(null, r);
            }));
          };
        },
        2368: (e, t, r) => {
          var n, i = r(4155);
          n = r.g.process && r.g.process.browser ? "utf-8" : r.g.process && r.g.process.version ? parseInt(i.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary" : "utf-8", 
          e.exports = n;
        },
        7357: e => {
          var t = Math.pow(2, 30) - 1;
          e.exports = function(e, r) {
            if ("number" != typeof e) throw new TypeError("Iterations not a number");
            if (e < 0) throw new TypeError("Bad iterations");
            if ("number" != typeof r) throw new TypeError("Key length not a number");
            if (r < 0 || r > t || r != r) throw new TypeError("Bad key length");
          };
        },
        1257: (e, t, r) => {
          var n = r(8028), i = r(9785), o = r(9072), s = r(9509).Buffer, a = r(7357), c = r(2368), f = r(7777), u = s.alloc(128), h = {
            md5: 16,
            sha1: 20,
            sha224: 28,
            sha256: 32,
            sha384: 48,
            sha512: 64,
            rmd160: 20,
            ripemd160: 20
          };
          function d(e, t, r) {
            var a = function(e) {
              return "rmd160" === e || "ripemd160" === e ? function(e) {
                return (new i).update(e).digest();
              } : "md5" === e ? n : function(t) {
                return o(e).update(t).digest();
              };
            }(e), c = "sha512" === e || "sha384" === e ? 128 : 64;
            t.length > c ? t = a(t) : t.length < c && (t = s.concat([ t, u ], c));
            for (var f = s.allocUnsafe(c + h[e]), d = s.allocUnsafe(c + h[e]), l = 0; l < c; l++) f[l] = 54 ^ t[l], d[l] = 92 ^ t[l];
            var p = s.allocUnsafe(c + r + 4);
            f.copy(p, 0, 0, c), this.ipad1 = p, this.ipad2 = f, this.opad = d, this.alg = e, this.blocksize = c, this.hash = a, this.size = h[e];
          }
          d.prototype.run = function(e, t) {
            return e.copy(t, this.blocksize), this.hash(t).copy(this.opad, this.blocksize), this.hash(this.opad);
          }, e.exports = function(e, t, r, n, i) {
            a(r, n);
            var o = new d(i = i || "sha1", e = f(e, c, "Password"), (t = f(t, c, "Salt")).length), u = s.allocUnsafe(n), l = s.allocUnsafe(t.length + 4);
            t.copy(l, 0, 0, t.length);
            for (var p = 0, b = h[i], y = Math.ceil(n / b), g = 1; g <= y; g++) {
              l.writeUInt32BE(g, t.length);
              for (var m = o.run(l, o.ipad1), v = m, w = 1; w < r; w++) {
                v = o.run(v, o.ipad2);
                for (var _ = 0; _ < b; _++) m[_] ^= v[_];
              }
              m.copy(u, p), p += b;
            }
            return u;
          };
        },
        7777: (e, t, r) => {
          var n = r(9509).Buffer;
          e.exports = function(e, t, r) {
            if (n.isBuffer(e)) return e;
            if ("string" == typeof e) return n.from(e, t);
            if (ArrayBuffer.isView(e)) return n.from(e.buffer);
            throw new TypeError(r + " must be a string, a Buffer, a typed array or a DataView");
          };
        },
        8212: (e, t, r) => {
          "use strict";
          var n = r(4155);
          void 0 === n || !n.version || 0 === n.version.indexOf("v0.") || 0 === n.version.indexOf("v1.") && 0 !== n.version.indexOf("v1.8.") ? e.exports = {
            nextTick: function(e, t, r, i) {
              if ("function" != typeof e) throw new TypeError('"callback" argument must be a function');
              var o, s, a = arguments.length;
              switch (a) {
               case 0:
               case 1:
                return n.nextTick(e);

               case 2:
                return n.nextTick((function() {
                  e.call(null, t);
                }));

               case 3:
                return n.nextTick((function() {
                  e.call(null, t, r);
                }));

               case 4:
                return n.nextTick((function() {
                  e.call(null, t, r, i);
                }));

               default:
                for (o = new Array(a - 1), s = 0; s < o.length; ) o[s++] = arguments[s];
                return n.nextTick((function() {
                  e.apply(null, o);
                }));
              }
            }
          } : e.exports = n;
        },
        4155: e => {
          var t, r, n = e.exports = {};
          function i() {
            throw new Error("setTimeout has not been defined");
          }
          function o() {
            throw new Error("clearTimeout has not been defined");
          }
          function s(e) {
            if (t === setTimeout) return setTimeout(e, 0);
            if ((t === i || !t) && setTimeout) return t = setTimeout, setTimeout(e, 0);
            try {
              return t(e, 0);
            } catch (r) {
              try {
                return t.call(null, e, 0);
              } catch (r) {
                return t.call(this, e, 0);
              }
            }
          }
          !function() {
            try {
              t = "function" == typeof setTimeout ? setTimeout : i;
            } catch (e) {
              t = i;
            }
            try {
              r = "function" == typeof clearTimeout ? clearTimeout : o;
            } catch (e) {
              r = o;
            }
          }();
          var a, c = [], f = !1, u = -1;
          function h() {
            f && a && (f = !1, a.length ? c = a.concat(c) : u = -1, c.length && d());
          }
          function d() {
            if (!f) {
              var e = s(h);
              f = !0;
              for (var t = c.length; t; ) {
                for (a = c, c = []; ++u < t; ) a && a[u].run();
                u = -1, t = c.length;
              }
              a = null, f = !1, function(e) {
                if (r === clearTimeout) return clearTimeout(e);
                if ((r === o || !r) && clearTimeout) return r = clearTimeout, clearTimeout(e);
                try {
                  r(e);
                } catch (t) {
                  try {
                    return r.call(null, e);
                  } catch (t) {
                    return r.call(this, e);
                  }
                }
              }(e);
            }
          }
          function l(e, t) {
            this.fun = e, this.array = t;
          }
          function p() {}
          n.nextTick = function(e) {
            var t = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
            c.push(new l(e, t)), 1 !== c.length || f || s(d);
          }, l.prototype.run = function() {
            this.fun.apply(null, this.array);
          }, n.title = "browser", n.browser = !0, n.env = {}, n.argv = [], n.version = "", n.versions = {}, n.on = p, n.addListener = p, 
          n.once = p, n.off = p, n.removeListener = p, n.removeAllListeners = p, n.emit = p, n.prependListener = p, n.prependOnceListener = p, 
          n.listeners = function(e) {
            return [];
          }, n.binding = function(e) {
            throw new Error("process.binding is not supported");
          }, n.cwd = function() {
            return "/";
          }, n.chdir = function(e) {
            throw new Error("process.chdir is not supported");
          }, n.umask = function() {
            return 0;
          };
        },
        7900: (e, t, r) => {
          t.publicEncrypt = r(6559), t.privateDecrypt = r(6138), t.privateEncrypt = function(e, r) {
            return t.publicEncrypt(e, r, !0);
          }, t.publicDecrypt = function(e, r) {
            return t.privateDecrypt(e, r, !0);
          };
        },
        9199: (e, t, r) => {
          var n = r(3482), i = r(9509).Buffer;
          function o(e) {
            var t = i.allocUnsafe(4);
            return t.writeUInt32BE(e, 0), t;
          }
          e.exports = function(e, t) {
            for (var r, s = i.alloc(0), a = 0; s.length < t; ) r = o(a++), s = i.concat([ s, n("sha1").update(e).update(r).digest() ]);
            return s.slice(0, t);
          };
        },
        6138: (e, t, r) => {
          var n = r(980), i = r(9199), o = r(7859), s = r(3550), a = r(3663), c = r(3482), f = r(4818), u = r(9509).Buffer;
          e.exports = function(e, t, r) {
            var h;
            h = e.padding ? e.padding : r ? 1 : 4;
            var d, l = n(e), p = l.modulus.byteLength();
            if (t.length > p || new s(t).cmp(l.modulus) >= 0) throw new Error("decryption error");
            d = r ? f(new s(t), l) : a(t, l);
            var b = u.alloc(p - d.length);
            if (d = u.concat([ b, d ], p), 4 === h) return function(e, t) {
              var r = e.modulus.byteLength(), n = c("sha1").update(u.alloc(0)).digest(), s = n.length;
              if (0 !== t[0]) throw new Error("decryption error");
              var a = t.slice(1, s + 1), f = t.slice(s + 1), h = o(a, i(f, s)), d = o(f, i(h, r - s - 1));
              if (function(e, t) {
                e = u.from(e), t = u.from(t);
                var r = 0, n = e.length;
                e.length !== t.length && (r++, n = Math.min(e.length, t.length));
                for (var i = -1; ++i < n; ) r += e[i] ^ t[i];
                return r;
              }(n, d.slice(0, s))) throw new Error("decryption error");
              for (var l = s; 0 === d[l]; ) l++;
              if (1 !== d[l++]) throw new Error("decryption error");
              return d.slice(l);
            }(l, d);
            if (1 === h) return function(e, t, r) {
              for (var n = t.slice(0, 2), i = 2, o = 0; 0 !== t[i++]; ) if (i >= t.length) {
                o++;
                break;
              }
              var s = t.slice(2, i - 1);
              if (("0002" !== n.toString("hex") && !r || "0001" !== n.toString("hex") && r) && o++, s.length < 8 && o++, o) throw new Error("decryption error");
              return t.slice(i);
            }(0, d, r);
            if (3 === h) return d;
            throw new Error("unknown padding");
          };
        },
        6559: (e, t, r) => {
          var n = r(980), i = r(1798), o = r(3482), s = r(9199), a = r(7859), c = r(3550), f = r(4818), u = r(3663), h = r(9509).Buffer;
          e.exports = function(e, t, r) {
            var d;
            d = e.padding ? e.padding : r ? 1 : 4;
            var l, p = n(e);
            if (4 === d) l = function(e, t) {
              var r = e.modulus.byteLength(), n = t.length, f = o("sha1").update(h.alloc(0)).digest(), u = f.length, d = 2 * u;
              if (n > r - d - 2) throw new Error("message too long");
              var l = h.alloc(r - n - d - 2), p = r - u - 1, b = i(u), y = a(h.concat([ f, l, h.alloc(1, 1), t ], p), s(b, p)), g = a(b, s(y, u));
              return new c(h.concat([ h.alloc(1), g, y ], r));
            }(p, t); else if (1 === d) l = function(e, t, r) {
              var n, o = t.length, s = e.modulus.byteLength();
              if (o > s - 11) throw new Error("message too long");
              return n = r ? h.alloc(s - o - 3, 255) : function(e) {
                for (var t, r = h.allocUnsafe(e), n = 0, o = i(2 * e), s = 0; n < e; ) s === o.length && (o = i(2 * e), s = 0), (t = o[s++]) && (r[n++] = t);
                return r;
              }(s - o - 3), new c(h.concat([ h.from([ 0, r ? 1 : 2 ]), n, h.alloc(1), t ], s));
            }(p, t, r); else {
              if (3 !== d) throw new Error("unknown padding");
              if ((l = new c(t)).cmp(p.modulus) >= 0) throw new Error("data too long for modulus");
            }
            return r ? u(l, p) : f(l, p);
          };
        },
        4818: (e, t, r) => {
          var n = r(3550), i = r(9509).Buffer;
          e.exports = function(e, t) {
            return i.from(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray());
          };
        },
        7859: e => {
          e.exports = function(e, t) {
            for (var r = e.length, n = -1; ++n < r; ) e[n] ^= t[n];
            return e;
          };
        },
        4286: (e, t, r) => {
          var n = r(4155), i = r(778), o = r(2840), s = r(1156), a = function() {}, c = /^v?\.0/.test(n.version), f = function(e) {
            return "function" == typeof e;
          }, u = function(e, t, r, n) {
            n = i(n);
            var u = !1;
            e.on("close", (function() {
              u = !0;
            })), o(e, {
              readable: t,
              writable: r
            }, (function(e) {
              if (e) return n(e);
              u = !0, n();
            }));
            var h = !1;
            return function(t) {
              if (!u && !h) return h = !0, function(e) {
                return !!c && !!s && (e instanceof (s.ReadStream || a) || e instanceof (s.WriteStream || a)) && f(e.close);
              }(e) ? e.close(a) : function(e) {
                return e.setHeader && f(e.abort);
              }(e) ? e.abort() : f(e.destroy) ? e.destroy() : void n(t || new Error("stream was destroyed"));
            };
          }, h = function(e) {
            e();
          }, d = function(e, t) {
            return e.pipe(t);
          };
          e.exports = function() {
            var e, t = Array.prototype.slice.call(arguments), r = f(t[t.length - 1] || a) && t.pop() || a;
            if (Array.isArray(t[0]) && (t = t[0]), t.length < 2) throw new Error("pump requires two streams per minimum");
            var n = t.map((function(i, o) {
              var s = o < t.length - 1;
              return u(i, s, o > 0, (function(t) {
                e || (e = t), t && n.forEach(h), s || (n.forEach(h), r(e));
              }));
            }));
            return t.reduce(d);
          };
        },
        2587: e => {
          "use strict";
          function t(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          e.exports = function(e, r, n, i) {
            r = r || "&", n = n || "=";
            var o = {};
            if ("string" != typeof e || 0 === e.length) return o;
            var s = /\+/g;
            e = e.split(r);
            var a = 1e3;
            i && "number" == typeof i.maxKeys && (a = i.maxKeys);
            var c = e.length;
            a > 0 && c > a && (c = a);
            for (var f = 0; f < c; ++f) {
              var u, h, d, l, p = e[f].replace(s, "%20"), b = p.indexOf(n);
              b >= 0 ? (u = p.substr(0, b), h = p.substr(b + 1)) : (u = p, h = ""), d = decodeURIComponent(u), l = decodeURIComponent(h), 
              t(o, d) ? Array.isArray(o[d]) ? o[d].push(l) : o[d] = [ o[d], l ] : o[d] = l;
            }
            return o;
          };
        },
        2182: e => {
          "use strict";
          var t = function(e) {
            switch (typeof e) {
             case "string":
              return e;

             case "boolean":
              return e ? "true" : "false";

             case "number":
              return isFinite(e) ? e : "";

             default:
              return "";
            }
          };
          e.exports = function(e, r, n, i) {
            return r = r || "&", n = n || "=", null === e && (e = void 0), "object" == typeof e ? Object.keys(e).map((function(i) {
              var o = encodeURIComponent(t(i)) + n;
              return Array.isArray(e[i]) ? e[i].map((function(e) {
                return o + encodeURIComponent(t(e));
              })).join(r) : o + encodeURIComponent(t(e[i]));
            })).join(r) : i ? encodeURIComponent(t(i)) + n + encodeURIComponent(t(e)) : "";
          };
        },
        7673: (e, t, r) => {
          "use strict";
          t.decode = t.parse = r(2587), t.encode = t.stringify = r(2182);
        },
        1798: (e, t, r) => {
          "use strict";
          var n = r(4155), i = 65536, o = r(9509).Buffer, s = r.g.crypto || r.g.msCrypto;
          s && s.getRandomValues ? e.exports = function(e, t) {
            if (e > 4294967295) throw new RangeError("requested too many random bytes");
            var r = o.allocUnsafe(e);
            if (e > 0) if (e > i) for (var a = 0; a < e; a += i) s.getRandomValues(r.slice(a, a + i)); else s.getRandomValues(r);
            return "function" == typeof t ? n.nextTick((function() {
              t(null, r);
            })) : r;
          } : e.exports = function() {
            throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
          };
        },
        7963: (e, t, r) => {
          "use strict";
          var n = r(4155);
          function i() {
            throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
          }
          var o = r(9509), s = r(1798), a = o.Buffer, c = o.kMaxLength, f = r.g.crypto || r.g.msCrypto, u = Math.pow(2, 32) - 1;
          function h(e, t) {
            if ("number" != typeof e || e != e) throw new TypeError("offset must be a number");
            if (e > u || e < 0) throw new TypeError("offset must be a uint32");
            if (e > c || e > t) throw new RangeError("offset out of range");
          }
          function d(e, t, r) {
            if ("number" != typeof e || e != e) throw new TypeError("size must be a number");
            if (e > u || e < 0) throw new TypeError("size must be a uint32");
            if (e + t > r || e > c) throw new RangeError("buffer too small");
          }
          function l(e, t, r, i) {
            if (n.browser) {
              var o = e.buffer, a = new Uint8Array(o, t, r);
              return f.getRandomValues(a), i ? void n.nextTick((function() {
                i(null, e);
              })) : e;
            }
            if (!i) return s(r).copy(e, t), e;
            s(r, (function(r, n) {
              if (r) return i(r);
              n.copy(e, t), i(null, e);
            }));
          }
          f && f.getRandomValues || !n.browser ? (t.randomFill = function(e, t, n, i) {
            if (!(a.isBuffer(e) || e instanceof r.g.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            if ("function" == typeof t) i = t, t = 0, n = e.length; else if ("function" == typeof n) i = n, n = e.length - t; else if ("function" != typeof i) throw new TypeError('"cb" argument must be a function');
            return h(t, e.length), d(n, t, e.length), l(e, t, n, i);
          }, t.randomFillSync = function(e, t, n) {
            if (void 0 === t && (t = 0), !(a.isBuffer(e) || e instanceof r.g.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            return h(t, e.length), void 0 === n && (n = e.length - t), d(n, t, e.length), l(e, t, n);
          }) : (t.randomFill = i, t.randomFillSync = i);
        },
        4281: e => {
          "use strict";
          var t = {};
          function r(e, r, n) {
            n || (n = Error);
            var i = function(e) {
              var t, n;
              function i(t, n, i) {
                return e.call(this, function(e, t, n) {
                  return "string" == typeof r ? r : r(e, t, n);
                }(t, n, i)) || this;
              }
              return n = e, (t = i).prototype = Object.create(n.prototype), t.prototype.constructor = t, t.__proto__ = n, i;
            }(n);
            i.prototype.name = n.name, i.prototype.code = e, t[e] = i;
          }
          function n(e, t) {
            if (Array.isArray(e)) {
              var r = e.length;
              return e = e.map((function(e) {
                return String(e);
              })), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
            }
            return "of ".concat(t, " ").concat(String(e));
          }
          r("ERR_INVALID_OPT_VALUE", (function(e, t) {
            return 'The value "' + t + '" is invalid for option "' + e + '"';
          }), TypeError), r("ERR_INVALID_ARG_TYPE", (function(e, t, r) {
            var i, o, s, a, c;
            if ("string" == typeof t && (o = "not ", t.substr(0, o.length) === o) ? (i = "must not be", t = t.replace(/^not /, "")) : i = "must be", 
            function(e, t, r) {
              return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
            }(e, " argument")) s = "The ".concat(e, " ").concat(i, " ").concat(n(t, "type")); else {
              var f = ("number" != typeof c && (c = 0), c + ".".length > (a = e).length || -1 === a.indexOf(".", c) ? "argument" : "property");
              s = 'The "'.concat(e, '" ').concat(f, " ").concat(i, " ").concat(n(t, "type"));
            }
            return s + ". Received type ".concat(typeof r);
          }), TypeError), r("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), r("ERR_METHOD_NOT_IMPLEMENTED", (function(e) {
            return "The " + e + " method is not implemented";
          })), r("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), r("ERR_STREAM_DESTROYED", (function(e) {
            return "Cannot call " + e + " after a stream was destroyed";
          })), r("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), r("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), 
          r("ERR_STREAM_WRITE_AFTER_END", "write after end"), r("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), 
          r("ERR_UNKNOWN_ENCODING", (function(e) {
            return "Unknown encoding: " + e;
          }), TypeError), r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), e.exports.q = t;
        },
        6753: (e, t, r) => {
          "use strict";
          var n = r(4155), i = Object.keys || function(e) {
            var t = [];
            for (var r in e) t.push(r);
            return t;
          };
          e.exports = u;
          var o = r(9481), s = r(4229);
          r(5717)(u, o);
          for (var a = i(s.prototype), c = 0; c < a.length; c++) {
            var f = a[c];
            u.prototype[f] || (u.prototype[f] = s.prototype[f]);
          }
          function u(e) {
            if (!(this instanceof u)) return new u(e);
            o.call(this, e), s.call(this, e), this.allowHalfOpen = !0, e && (!1 === e.readable && (this.readable = !1), !1 === e.writable && (this.writable = !1), 
            !1 === e.allowHalfOpen && (this.allowHalfOpen = !1, this.once("end", h)));
          }
          function h() {
            this._writableState.ended || n.nextTick(d, this);
          }
          function d(e) {
            e.end();
          }
          Object.defineProperty(u.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._writableState.highWaterMark;
            }
          }), Object.defineProperty(u.prototype, "writableBuffer", {
            enumerable: !1,
            get: function() {
              return this._writableState && this._writableState.getBuffer();
            }
          }), Object.defineProperty(u.prototype, "writableLength", {
            enumerable: !1,
            get: function() {
              return this._writableState.length;
            }
          }), Object.defineProperty(u.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
              return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function(e) {
              void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);
            }
          });
        },
        2725: (e, t, r) => {
          "use strict";
          e.exports = i;
          var n = r(4605);
          function i(e) {
            if (!(this instanceof i)) return new i(e);
            n.call(this, e);
          }
          r(5717)(i, n), i.prototype._transform = function(e, t, r) {
            r(null, e);
          };
        },
        9481: (e, t, r) => {
          "use strict";
          var n, i = r(4155);
          e.exports = x, x.ReadableState = A, r(7187).EventEmitter;
          var o, s = function(e, t) {
            return e.listeners(t).length;
          }, a = r(2503), c = r(8764).Buffer, f = r.g.Uint8Array || function() {}, u = r(4616);
          o = u && u.debuglog ? u.debuglog("stream") : function() {};
          var h, d, l, p = r(7327), b = r(1195), y = r(2457).getHighWaterMark, g = r(4281).q, m = g.ERR_INVALID_ARG_TYPE, v = g.ERR_STREAM_PUSH_AFTER_EOF, w = g.ERR_METHOD_NOT_IMPLEMENTED, _ = g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
          r(5717)(x, a);
          var S = b.errorOrDestroy, E = [ "error", "close", "destroy", "pause", "resume" ];
          function A(e, t, i) {
            n = n || r(6753), e = e || {}, "boolean" != typeof i && (i = t instanceof n), this.objectMode = !!e.objectMode, i && (this.objectMode = this.objectMode || !!e.readableObjectMode), 
            this.highWaterMark = y(this, e, "readableHighWaterMark", i), this.buffer = new p, this.length = 0, this.pipes = null, this.pipesCount = 0, 
            this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, 
            this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== e.emitClose, this.autoDestroy = !!e.autoDestroy, 
            this.destroyed = !1, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, 
            this.encoding = null, e.encoding && (h || (h = r(2553).s), this.decoder = new h(e.encoding), this.encoding = e.encoding);
          }
          function x(e) {
            if (n = n || r(6753), !(this instanceof x)) return new x(e);
            var t = this instanceof n;
            this._readableState = new A(e, this, t), this.readable = !0, e && ("function" == typeof e.read && (this._read = e.read), 
            "function" == typeof e.destroy && (this._destroy = e.destroy)), a.call(this);
          }
          function k(e, t, r, n, i) {
            o("readableAddChunk", t);
            var s, a = e._readableState;
            if (null === t) a.reading = !1, function(e, t) {
              if (o("onEofChunk"), !t.ended) {
                if (t.decoder) {
                  var r = t.decoder.end();
                  r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
                }
                t.ended = !0, t.sync ? I(e) : (t.needReadable = !1, t.emittedReadable || (t.emittedReadable = !0, T(e)));
              }
            }(e, a); else if (i || (s = function(e, t) {
              var r, n;
              return n = t, c.isBuffer(n) || n instanceof f || "string" == typeof t || void 0 === t || e.objectMode || (r = new m("chunk", [ "string", "Buffer", "Uint8Array" ], t)), 
              r;
            }(a, t)), s) S(e, s); else if (a.objectMode || t && t.length > 0) if ("string" == typeof t || a.objectMode || Object.getPrototypeOf(t) === c.prototype || (t = function(e) {
              return c.from(e);
            }(t)), n) a.endEmitted ? S(e, new _) : P(e, a, t, !0); else if (a.ended) S(e, new v); else {
              if (a.destroyed) return !1;
              a.reading = !1, a.decoder && !r ? (t = a.decoder.write(t), a.objectMode || 0 !== t.length ? P(e, a, t, !1) : R(e, a)) : P(e, a, t, !1);
            } else n || (a.reading = !1, R(e, a));
            return !a.ended && (a.length < a.highWaterMark || 0 === a.length);
          }
          function P(e, t, r, n) {
            t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0, e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length, 
            n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && I(e)), R(e, t);
          }
          Object.defineProperty(x.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
              return void 0 !== this._readableState && this._readableState.destroyed;
            },
            set: function(e) {
              this._readableState && (this._readableState.destroyed = e);
            }
          }), x.prototype.destroy = b.destroy, x.prototype._undestroy = b.undestroy, x.prototype._destroy = function(e, t) {
            t(e);
          }, x.prototype.push = function(e, t) {
            var r, n = this._readableState;
            return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = c.from(e, t), 
            t = ""), r = !0), k(this, e, t, !1, r);
          }, x.prototype.unshift = function(e) {
            return k(this, e, null, !0, !1);
          }, x.prototype.isPaused = function() {
            return !1 === this._readableState.flowing;
          }, x.prototype.setEncoding = function(e) {
            h || (h = r(2553).s);
            var t = new h(e);
            this._readableState.decoder = t, this._readableState.encoding = this._readableState.decoder.encoding;
            for (var n = this._readableState.buffer.head, i = ""; null !== n; ) i += t.write(n.data), n = n.next;
            return this._readableState.buffer.clear(), "" !== i && this._readableState.buffer.push(i), this._readableState.length = i.length, 
            this;
          };
          var O = 1073741824;
          function M(e, t) {
            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function(e) {
              return e >= O ? e = O : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
            }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));
          }
          function I(e) {
            var t = e._readableState;
            o("emitReadable", t.needReadable, t.emittedReadable), t.needReadable = !1, t.emittedReadable || (o("emitReadable", t.flowing), 
            t.emittedReadable = !0, i.nextTick(T, e));
          }
          function T(e) {
            var t = e._readableState;
            o("emitReadable_", t.destroyed, t.length, t.ended), t.destroyed || !t.length && !t.ended || (e.emit("readable"), t.emittedReadable = !1), 
            t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, L(e);
          }
          function R(e, t) {
            t.readingMore || (t.readingMore = !0, i.nextTick(C, e, t));
          }
          function C(e, t) {
            for (;!t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length); ) {
              var r = t.length;
              if (o("maybeReadMore read 0"), e.read(0), r === t.length) break;
            }
            t.readingMore = !1;
          }
          function N(e) {
            var t = e._readableState;
            t.readableListening = e.listenerCount("readable") > 0, t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount("data") > 0 && e.resume();
          }
          function j(e) {
            o("readable nexttick read 0"), e.read(0);
          }
          function B(e, t) {
            o("resume", t.reading), t.reading || e.read(0), t.resumeScheduled = !1, e.emit("resume"), L(e), t.flowing && !t.reading && e.read(0);
          }
          function L(e) {
            var t = e._readableState;
            for (o("flow", t.flowing); t.flowing && null !== e.read(); ) ;
          }
          function D(e, t) {
            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length), 
            t.buffer.clear()) : r = t.buffer.consume(e, t.decoder), r);
            var r;
          }
          function U(e) {
            var t = e._readableState;
            o("endReadable", t.endEmitted), t.endEmitted || (t.ended = !0, i.nextTick(q, t, e));
          }
          function q(e, t) {
            if (o("endReadableNT", e.endEmitted, e.length), !e.endEmitted && 0 === e.length && (e.endEmitted = !0, t.readable = !1, 
            t.emit("end"), e.autoDestroy)) {
              var r = t._writableState;
              (!r || r.autoDestroy && r.finished) && t.destroy();
            }
          }
          function F(e, t) {
            for (var r = 0, n = e.length; r < n; r++) if (e[r] === t) return r;
            return -1;
          }
          x.prototype.read = function(e) {
            o("read", e), e = parseInt(e, 10);
            var t = this._readableState, r = e;
            if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended)) return o("read: emitReadable", t.length, t.ended), 
            0 === t.length && t.ended ? U(this) : I(this), null;
            if (0 === (e = M(e, t)) && t.ended) return 0 === t.length && U(this), null;
            var n, i = t.needReadable;
            return o("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && o("length less than watermark", i = !0), 
            t.ended || t.reading ? o("reading or ended", i = !1) : i && (o("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), 
            this._read(t.highWaterMark), t.sync = !1, t.reading || (e = M(r, t))), null === (n = e > 0 ? D(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark, 
            e = 0) : (t.length -= e, t.awaitDrain = 0), 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && U(this)), 
            null !== n && this.emit("data", n), n;
          }, x.prototype._read = function(e) {
            S(this, new w("_read()"));
          }, x.prototype.pipe = function(e, t) {
            var r = this, n = this._readableState;
            switch (n.pipesCount) {
             case 0:
              n.pipes = e;
              break;

             case 1:
              n.pipes = [ n.pipes, e ];
              break;

             default:
              n.pipes.push(e);
            }
            n.pipesCount += 1, o("pipe count=%d opts=%j", n.pipesCount, t);
            var a = t && !1 === t.end || e === i.stdout || e === i.stderr ? b : c;
            function c() {
              o("onend"), e.end();
            }
            n.endEmitted ? i.nextTick(a) : r.once("end", a), e.on("unpipe", (function t(i, s) {
              o("onunpipe"), i === r && s && !1 === s.hasUnpiped && (s.hasUnpiped = !0, o("cleanup"), e.removeListener("close", l), e.removeListener("finish", p), 
              e.removeListener("drain", f), e.removeListener("error", d), e.removeListener("unpipe", t), r.removeListener("end", c), r.removeListener("end", b), 
              r.removeListener("data", h), u = !0, !n.awaitDrain || e._writableState && !e._writableState.needDrain || f());
            }));
            var f = function(e) {
              return function() {
                var t = e._readableState;
                o("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && s(e, "data") && (t.flowing = !0, L(e));
              };
            }(r);
            e.on("drain", f);
            var u = !1;
            function h(t) {
              o("ondata");
              var i = e.write(t);
              o("dest.write", i), !1 === i && ((1 === n.pipesCount && n.pipes === e || n.pipesCount > 1 && -1 !== F(n.pipes, e)) && !u && (o("false write response, pause", n.awaitDrain), 
              n.awaitDrain++), r.pause());
            }
            function d(t) {
              o("onerror", t), b(), e.removeListener("error", d), 0 === s(e, "error") && S(e, t);
            }
            function l() {
              e.removeListener("finish", p), b();
            }
            function p() {
              o("onfinish"), e.removeListener("close", l), b();
            }
            function b() {
              o("unpipe"), r.unpipe(e);
            }
            return r.on("data", h), function(e, t, r) {
              if ("function" == typeof e.prependListener) return e.prependListener(t, r);
              e._events && e._events.error ? Array.isArray(e._events.error) ? e._events.error.unshift(r) : e._events.error = [ r, e._events.error ] : e.on(t, r);
            }(e, "error", d), e.once("close", l), e.once("finish", p), e.emit("pipe", r), n.flowing || (o("pipe resume"), r.resume()), 
            e;
          }, x.prototype.unpipe = function(e) {
            var t = this._readableState, r = {
              hasUnpiped: !1
            };
            if (0 === t.pipesCount) return this;
            if (1 === t.pipesCount) return e && e !== t.pipes || (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, 
            e && e.emit("unpipe", this, r)), this;
            if (!e) {
              var n = t.pipes, i = t.pipesCount;
              t.pipes = null, t.pipesCount = 0, t.flowing = !1;
              for (var o = 0; o < i; o++) n[o].emit("unpipe", this, {
                hasUnpiped: !1
              });
              return this;
            }
            var s = F(t.pipes, e);
            return -1 === s || (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r)), 
            this;
          }, x.prototype.on = function(e, t) {
            var r = a.prototype.on.call(this, e, t), n = this._readableState;
            return "data" === e ? (n.readableListening = this.listenerCount("readable") > 0, !1 !== n.flowing && this.resume()) : "readable" === e && (n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, 
            n.flowing = !1, n.emittedReadable = !1, o("on readable", n.length, n.reading), n.length ? I(this) : n.reading || i.nextTick(j, this))), 
            r;
          }, x.prototype.addListener = x.prototype.on, x.prototype.removeListener = function(e, t) {
            var r = a.prototype.removeListener.call(this, e, t);
            return "readable" === e && i.nextTick(N, this), r;
          }, x.prototype.removeAllListeners = function(e) {
            var t = a.prototype.removeAllListeners.apply(this, arguments);
            return "readable" !== e && void 0 !== e || i.nextTick(N, this), t;
          }, x.prototype.resume = function() {
            var e = this._readableState;
            return e.flowing || (o("resume"), e.flowing = !e.readableListening, function(e, t) {
              t.resumeScheduled || (t.resumeScheduled = !0, i.nextTick(B, e, t));
            }(this, e)), e.paused = !1, this;
          }, x.prototype.pause = function() {
            return o("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (o("pause"), this._readableState.flowing = !1, 
            this.emit("pause")), this._readableState.paused = !0, this;
          }, x.prototype.wrap = function(e) {
            var t = this, r = this._readableState, n = !1;
            for (var i in e.on("end", (function() {
              if (o("wrapped end"), r.decoder && !r.ended) {
                var e = r.decoder.end();
                e && e.length && t.push(e);
              }
              t.push(null);
            })), e.on("data", (function(i) {
              o("wrapped data"), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i || (r.objectMode || i && i.length) && (t.push(i) || (n = !0, 
              e.pause()));
            })), e) void 0 === this[i] && "function" == typeof e[i] && (this[i] = function(t) {
              return function() {
                return e[t].apply(e, arguments);
              };
            }(i));
            for (var s = 0; s < E.length; s++) e.on(E[s], this.emit.bind(this, E[s]));
            return this._read = function(t) {
              o("wrapped _read", t), n && (n = !1, e.resume());
            }, this;
          }, "function" == typeof Symbol && (x.prototype[Symbol.asyncIterator] = function() {
            return void 0 === d && (d = r(5850)), d(this);
          }), Object.defineProperty(x.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._readableState.highWaterMark;
            }
          }), Object.defineProperty(x.prototype, "readableBuffer", {
            enumerable: !1,
            get: function() {
              return this._readableState && this._readableState.buffer;
            }
          }), Object.defineProperty(x.prototype, "readableFlowing", {
            enumerable: !1,
            get: function() {
              return this._readableState.flowing;
            },
            set: function(e) {
              this._readableState && (this._readableState.flowing = e);
            }
          }), x._fromList = D, Object.defineProperty(x.prototype, "readableLength", {
            enumerable: !1,
            get: function() {
              return this._readableState.length;
            }
          }), "function" == typeof Symbol && (x.from = function(e, t) {
            return void 0 === l && (l = r(5167)), l(x, e, t);
          });
        },
        4605: (e, t, r) => {
          "use strict";
          e.exports = u;
          var n = r(4281).q, i = n.ERR_METHOD_NOT_IMPLEMENTED, o = n.ERR_MULTIPLE_CALLBACK, s = n.ERR_TRANSFORM_ALREADY_TRANSFORMING, a = n.ERR_TRANSFORM_WITH_LENGTH_0, c = r(6753);
          function f(e, t) {
            var r = this._transformState;
            r.transforming = !1;
            var n = r.writecb;
            if (null === n) return this.emit("error", new o);
            r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);
            var i = this._readableState;
            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
          }
          function u(e) {
            if (!(this instanceof u)) return new u(e);
            c.call(this, e), this._transformState = {
              afterTransform: f.bind(this),
              needTransform: !1,
              transforming: !1,
              writecb: null,
              writechunk: null,
              writeencoding: null
            }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), 
            "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", h);
          }
          function h() {
            var e = this;
            "function" != typeof this._flush || this._readableState.destroyed ? d(this, null, null) : this._flush((function(t, r) {
              d(e, t, r);
            }));
          }
          function d(e, t, r) {
            if (t) return e.emit("error", t);
            if (null != r && e.push(r), e._writableState.length) throw new a;
            if (e._transformState.transforming) throw new s;
            return e.push(null);
          }
          r(5717)(u, c), u.prototype.push = function(e, t) {
            return this._transformState.needTransform = !1, c.prototype.push.call(this, e, t);
          }, u.prototype._transform = function(e, t, r) {
            r(new i("_transform()"));
          }, u.prototype._write = function(e, t, r) {
            var n = this._transformState;
            if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
              var i = this._readableState;
              (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
            }
          }, u.prototype._read = function(e) {
            var t = this._transformState;
            null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform));
          }, u.prototype._destroy = function(e, t) {
            c.prototype._destroy.call(this, e, (function(e) {
              t(e);
            }));
          };
        },
        4229: (e, t, r) => {
          "use strict";
          var n, i = r(4155);
          function o(e) {
            var t = this;
            this.next = null, this.entry = null, this.finish = function() {
              !function(e, t, r) {
                var n = e.entry;
                for (e.entry = null; n; ) {
                  var i = n.callback;
                  t.pendingcb--, i(void 0), n = n.next;
                }
                t.corkedRequestsFree.next = e;
              }(t, e);
            };
          }
          e.exports = x, x.WritableState = A;
          var s, a = {
            deprecate: r(4927)
          }, c = r(2503), f = r(8764).Buffer, u = r.g.Uint8Array || function() {}, h = r(1195), d = r(2457).getHighWaterMark, l = r(4281).q, p = l.ERR_INVALID_ARG_TYPE, b = l.ERR_METHOD_NOT_IMPLEMENTED, y = l.ERR_MULTIPLE_CALLBACK, g = l.ERR_STREAM_CANNOT_PIPE, m = l.ERR_STREAM_DESTROYED, v = l.ERR_STREAM_NULL_VALUES, w = l.ERR_STREAM_WRITE_AFTER_END, _ = l.ERR_UNKNOWN_ENCODING, S = h.errorOrDestroy;
          function E() {}
          function A(e, t, s) {
            n = n || r(6753), e = e || {}, "boolean" != typeof s && (s = t instanceof n), this.objectMode = !!e.objectMode, s && (this.objectMode = this.objectMode || !!e.writableObjectMode), 
            this.highWaterMark = d(this, e, "writableHighWaterMark", s), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, 
            this.ended = !1, this.finished = !1, this.destroyed = !1;
            var a = !1 === e.decodeStrings;
            this.decodeStrings = !a, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, 
            this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(e) {
              !function(e, t) {
                var r = e._writableState, n = r.sync, o = r.writecb;
                if ("function" != typeof o) throw new y;
                if (function(e) {
                  e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
                }(r), t) !function(e, t, r, n, o) {
                  --t.pendingcb, r ? (i.nextTick(o, n), i.nextTick(T, e, t), e._writableState.errorEmitted = !0, S(e, n)) : (o(n), e._writableState.errorEmitted = !0, 
                  S(e, n), T(e, t));
                }(e, r, n, t, o); else {
                  var s = M(r) || e.destroyed;
                  s || r.corked || r.bufferProcessing || !r.bufferedRequest || O(e, r), n ? i.nextTick(P, e, r, s, o) : P(e, r, s, o);
                }
              }(t, e);
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, 
            this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== e.emitClose, this.autoDestroy = !!e.autoDestroy, 
            this.bufferedRequestCount = 0, this.corkedRequestsFree = new o(this);
          }
          function x(e) {
            var t = this instanceof (n = n || r(6753));
            if (!t && !s.call(x, this)) return new x(e);
            this._writableState = new A(e, this, t), this.writable = !0, e && ("function" == typeof e.write && (this._write = e.write), 
            "function" == typeof e.writev && (this._writev = e.writev), "function" == typeof e.destroy && (this._destroy = e.destroy), 
            "function" == typeof e.final && (this._final = e.final)), c.call(this);
          }
          function k(e, t, r, n, i, o, s) {
            t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, t.destroyed ? t.onwrite(new m("write")) : r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), 
            t.sync = !1;
          }
          function P(e, t, r, n) {
            r || function(e, t) {
              0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));
            }(e, t), t.pendingcb--, n(), T(e, t);
          }
          function O(e, t) {
            t.bufferProcessing = !0;
            var r = t.bufferedRequest;
            if (e._writev && r && r.next) {
              var n = t.bufferedRequestCount, i = new Array(n), s = t.corkedRequestsFree;
              s.entry = r;
              for (var a = 0, c = !0; r; ) i[a] = r, r.isBuf || (c = !1), r = r.next, a += 1;
              i.allBuffers = c, k(e, t, !0, t.length, i, "", s.finish), t.pendingcb++, t.lastBufferedRequest = null, s.next ? (t.corkedRequestsFree = s.next, 
              s.next = null) : t.corkedRequestsFree = new o(t), t.bufferedRequestCount = 0;
            } else {
              for (;r; ) {
                var f = r.chunk, u = r.encoding, h = r.callback;
                if (k(e, t, !1, t.objectMode ? 1 : f.length, f, u, h), r = r.next, t.bufferedRequestCount--, t.writing) break;
              }
              null === r && (t.lastBufferedRequest = null);
            }
            t.bufferedRequest = r, t.bufferProcessing = !1;
          }
          function M(e) {
            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;
          }
          function I(e, t) {
            e._final((function(r) {
              t.pendingcb--, r && S(e, r), t.prefinished = !0, e.emit("prefinish"), T(e, t);
            }));
          }
          function T(e, t) {
            var r = M(t);
            if (r && (function(e, t) {
              t.prefinished || t.finalCalled || ("function" != typeof e._final || t.destroyed ? (t.prefinished = !0, e.emit("prefinish")) : (t.pendingcb++, 
              t.finalCalled = !0, i.nextTick(I, e, t)));
            }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"), t.autoDestroy))) {
              var n = e._readableState;
              (!n || n.autoDestroy && n.endEmitted) && e.destroy();
            }
            return r;
          }
          r(5717)(x, c), A.prototype.getBuffer = function() {
            for (var e = this.bufferedRequest, t = []; e; ) t.push(e), e = e.next;
            return t;
          }, function() {
            try {
              Object.defineProperty(A.prototype, "buffer", {
                get: a.deprecate((function() {
                  return this.getBuffer();
                }), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
              });
            } catch (e) {}
          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (s = Function.prototype[Symbol.hasInstance], 
          Object.defineProperty(x, Symbol.hasInstance, {
            value: function(e) {
              return !!s.call(this, e) || this === x && e && e._writableState instanceof A;
            }
          })) : s = function(e) {
            return e instanceof this;
          }, x.prototype.pipe = function() {
            S(this, new g);
          }, x.prototype.write = function(e, t, r) {
            var n, o = this._writableState, s = !1, a = !o.objectMode && (n = e, f.isBuffer(n) || n instanceof u);
            return a && !f.isBuffer(e) && (e = function(e) {
              return f.from(e);
            }(e)), "function" == typeof t && (r = t, t = null), a ? t = "buffer" : t || (t = o.defaultEncoding), "function" != typeof r && (r = E), 
            o.ending ? function(e, t) {
              var r = new w;
              S(e, r), i.nextTick(t, r);
            }(this, r) : (a || function(e, t, r, n) {
              var o;
              return null === r ? o = new v : "string" == typeof r || t.objectMode || (o = new p("chunk", [ "string", "Buffer" ], r)), 
              !o || (S(e, o), i.nextTick(n, o), !1);
            }(this, o, e, r)) && (o.pendingcb++, s = function(e, t, r, n, i, o) {
              if (!r) {
                var s = function(e, t, r) {
                  return e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = f.from(t, r)), t;
                }(t, n, i);
                n !== s && (r = !0, i = "buffer", n = s);
              }
              var a = t.objectMode ? 1 : n.length;
              t.length += a;
              var c = t.length < t.highWaterMark;
              if (c || (t.needDrain = !0), t.writing || t.corked) {
                var u = t.lastBufferedRequest;
                t.lastBufferedRequest = {
                  chunk: n,
                  encoding: i,
                  isBuf: r,
                  callback: o,
                  next: null
                }, u ? u.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
              } else k(e, t, !1, a, n, i, o);
              return c;
            }(this, o, a, e, t, r)), s;
          }, x.prototype.cork = function() {
            this._writableState.corked++;
          }, x.prototype.uncork = function() {
            var e = this._writableState;
            e.corked && (e.corked--, e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || O(this, e));
          }, x.prototype.setDefaultEncoding = function(e) {
            if ("string" == typeof e && (e = e.toLowerCase()), !([ "hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw" ].indexOf((e + "").toLowerCase()) > -1)) throw new _(e);
            return this._writableState.defaultEncoding = e, this;
          }, Object.defineProperty(x.prototype, "writableBuffer", {
            enumerable: !1,
            get: function() {
              return this._writableState && this._writableState.getBuffer();
            }
          }), Object.defineProperty(x.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._writableState.highWaterMark;
            }
          }), x.prototype._write = function(e, t, r) {
            r(new b("_write()"));
          }, x.prototype._writev = null, x.prototype.end = function(e, t, r) {
            var n = this._writableState;
            return "function" == typeof e ? (r = e, e = null, t = null) : "function" == typeof t && (r = t, t = null), null != e && this.write(e, t), 
            n.corked && (n.corked = 1, this.uncork()), n.ending || function(e, t, r) {
              t.ending = !0, T(e, t), r && (t.finished ? i.nextTick(r) : e.once("finish", r)), t.ended = !0, e.writable = !1;
            }(this, n, r), this;
          }, Object.defineProperty(x.prototype, "writableLength", {
            enumerable: !1,
            get: function() {
              return this._writableState.length;
            }
          }), Object.defineProperty(x.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
              return void 0 !== this._writableState && this._writableState.destroyed;
            },
            set: function(e) {
              this._writableState && (this._writableState.destroyed = e);
            }
          }), x.prototype.destroy = h.destroy, x.prototype._undestroy = h.undestroy, x.prototype._destroy = function(e, t) {
            t(e);
          };
        },
        5850: (e, t, r) => {
          "use strict";
          var n, i = r(4155);
          function o(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }
          var s = r(8610), a = Symbol("lastResolve"), c = Symbol("lastReject"), f = Symbol("error"), u = Symbol("ended"), h = Symbol("lastPromise"), d = Symbol("handlePromise"), l = Symbol("stream");
          function p(e, t) {
            return {
              value: e,
              done: t
            };
          }
          function b(e) {
            var t = e[a];
            if (null !== t) {
              var r = e[l].read();
              null !== r && (e[h] = null, e[a] = null, e[c] = null, t(p(r, !1)));
            }
          }
          function y(e) {
            i.nextTick(b, e);
          }
          var g = Object.getPrototypeOf((function() {})), m = Object.setPrototypeOf((o(n = {
            get stream() {
              return this[l];
            },
            next: function() {
              var e = this, t = this[f];
              if (null !== t) return Promise.reject(t);
              if (this[u]) return Promise.resolve(p(void 0, !0));
              if (this[l].destroyed) return new Promise((function(t, r) {
                i.nextTick((function() {
                  e[f] ? r(e[f]) : t(p(void 0, !0));
                }));
              }));
              var r, n = this[h];
              if (n) r = new Promise(function(e, t) {
                return function(r, n) {
                  e.then((function() {
                    t[u] ? r(p(void 0, !0)) : t[d](r, n);
                  }), n);
                };
              }(n, this)); else {
                var o = this[l].read();
                if (null !== o) return Promise.resolve(p(o, !1));
                r = new Promise(this[d]);
              }
              return this[h] = r, r;
            }
          }, Symbol.asyncIterator, (function() {
            return this;
          })), o(n, "return", (function() {
            var e = this;
            return new Promise((function(t, r) {
              e[l].destroy(null, (function(e) {
                e ? r(e) : t(p(void 0, !0));
              }));
            }));
          })), n), g);
          e.exports = function(e) {
            var t, r = Object.create(m, (o(t = {}, l, {
              value: e,
              writable: !0
            }), o(t, a, {
              value: null,
              writable: !0
            }), o(t, c, {
              value: null,
              writable: !0
            }), o(t, f, {
              value: null,
              writable: !0
            }), o(t, u, {
              value: e._readableState.endEmitted,
              writable: !0
            }), o(t, d, {
              value: function(e, t) {
                var n = r[l].read();
                n ? (r[h] = null, r[a] = null, r[c] = null, e(p(n, !1))) : (r[a] = e, r[c] = t);
              },
              writable: !0
            }), t));
            return r[h] = null, s(e, (function(e) {
              if (e && "ERR_STREAM_PREMATURE_CLOSE" !== e.code) {
                var t = r[c];
                return null !== t && (r[h] = null, r[a] = null, r[c] = null, t(e)), void (r[f] = e);
              }
              var n = r[a];
              null !== n && (r[h] = null, r[a] = null, r[c] = null, n(p(void 0, !0))), r[u] = !0;
            })), e.on("readable", y.bind(null, r)), r;
          };
        },
        7327: (e, t, r) => {
          "use strict";
          function n(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t && (n = n.filter((function(t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              }))), r.push.apply(r, n);
            }
            return r;
          }
          function i(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }
          var o = r(8764).Buffer, s = r(2361).inspect, a = s && s.custom || "inspect";
          e.exports = function() {
            function e() {
              !function(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
              }(this, e), this.head = null, this.tail = null, this.length = 0;
            }
            var t;
            return t = [ {
              key: "push",
              value: function(e) {
                var t = {
                  data: e,
                  next: null
                };
                this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;
              }
            }, {
              key: "unshift",
              value: function(e) {
                var t = {
                  data: e,
                  next: this.head
                };
                0 === this.length && (this.tail = t), this.head = t, ++this.length;
              }
            }, {
              key: "shift",
              value: function() {
                if (0 !== this.length) {
                  var e = this.head.data;
                  return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
                }
              }
            }, {
              key: "clear",
              value: function() {
                this.head = this.tail = null, this.length = 0;
              }
            }, {
              key: "join",
              value: function(e) {
                if (0 === this.length) return "";
                for (var t = this.head, r = "" + t.data; t = t.next; ) r += e + t.data;
                return r;
              }
            }, {
              key: "concat",
              value: function(e) {
                if (0 === this.length) return o.alloc(0);
                for (var t, r, n, i = o.allocUnsafe(e >>> 0), s = this.head, a = 0; s; ) t = s.data, r = i, n = a, o.prototype.copy.call(t, r, n), 
                a += s.data.length, s = s.next;
                return i;
              }
            }, {
              key: "consume",
              value: function(e, t) {
                var r;
                return e < this.head.data.length ? (r = this.head.data.slice(0, e), this.head.data = this.head.data.slice(e)) : r = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e), 
                r;
              }
            }, {
              key: "first",
              value: function() {
                return this.head.data;
              }
            }, {
              key: "_getString",
              value: function(e) {
                var t = this.head, r = 1, n = t.data;
                for (e -= n.length; t = t.next; ) {
                  var i = t.data, o = e > i.length ? i.length : e;
                  if (o === i.length ? n += i : n += i.slice(0, e), 0 == (e -= o)) {
                    o === i.length ? (++r, t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t, t.data = i.slice(o));
                    break;
                  }
                  ++r;
                }
                return this.length -= r, n;
              }
            }, {
              key: "_getBuffer",
              value: function(e) {
                var t = o.allocUnsafe(e), r = this.head, n = 1;
                for (r.data.copy(t), e -= r.data.length; r = r.next; ) {
                  var i = r.data, s = e > i.length ? i.length : e;
                  if (i.copy(t, t.length - e, 0, s), 0 == (e -= s)) {
                    s === i.length ? (++n, r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r, r.data = i.slice(s));
                    break;
                  }
                  ++n;
                }
                return this.length -= n, t;
              }
            }, {
              key: a,
              value: function(e, t) {
                return s(this, function(e) {
                  for (var t = 1; t < arguments.length; t++) {
                    var r = null != arguments[t] ? arguments[t] : {};
                    t % 2 ? n(Object(r), !0).forEach((function(t) {
                      i(e, t, r[t]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach((function(t) {
                      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
                    }));
                  }
                  return e;
                }({}, t, {
                  depth: 0,
                  customInspect: !1
                }));
              }
            } ], t && function(e, t) {
              for (var r = 0; r < t.length; r++) {
                var n = t[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
              }
            }(e.prototype, t), e;
          }();
        },
        1195: (e, t, r) => {
          "use strict";
          var n = r(4155);
          function i(e, t) {
            s(e, t), o(e);
          }
          function o(e) {
            e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");
          }
          function s(e, t) {
            e.emit("error", t);
          }
          e.exports = {
            destroy: function(e, t) {
              var r = this, a = this._readableState && this._readableState.destroyed, c = this._writableState && this._writableState.destroyed;
              return a || c ? (t ? t(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, 
              n.nextTick(s, this, e)) : n.nextTick(s, this, e)), this) : (this._readableState && (this._readableState.destroyed = !0), 
              this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, (function(e) {
                !t && e ? r._writableState ? r._writableState.errorEmitted ? n.nextTick(o, r) : (r._writableState.errorEmitted = !0, n.nextTick(i, r, e)) : n.nextTick(i, r, e) : t ? (n.nextTick(o, r), 
                t(e)) : n.nextTick(o, r);
              })), this);
            },
            undestroy: function() {
              this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, 
              this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, 
              this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, 
              this._writableState.errorEmitted = !1);
            },
            errorOrDestroy: function(e, t) {
              var r = e._readableState, n = e._writableState;
              r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);
            }
          };
        },
        8610: (e, t, r) => {
          "use strict";
          var n = r(4281).q.ERR_STREAM_PREMATURE_CLOSE;
          function i() {}
          e.exports = function e(t, r, o) {
            if ("function" == typeof r) return e(t, null, r);
            r || (r = {}), o = function(e) {
              var t = !1;
              return function() {
                if (!t) {
                  t = !0;
                  for (var r = arguments.length, n = new Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                  e.apply(this, n);
                }
              };
            }(o || i);
            var s = r.readable || !1 !== r.readable && t.readable, a = r.writable || !1 !== r.writable && t.writable, c = function() {
              t.writable || u();
            }, f = t._writableState && t._writableState.finished, u = function() {
              a = !1, f = !0, s || o.call(t);
            }, h = t._readableState && t._readableState.endEmitted, d = function() {
              s = !1, h = !0, a || o.call(t);
            }, l = function(e) {
              o.call(t, e);
            }, p = function() {
              var e;
              return s && !h ? (t._readableState && t._readableState.ended || (e = new n), o.call(t, e)) : a && !f ? (t._writableState && t._writableState.ended || (e = new n), 
              o.call(t, e)) : void 0;
            }, b = function() {
              t.req.on("finish", u);
            };
            return function(e) {
              return e.setHeader && "function" == typeof e.abort;
            }(t) ? (t.on("complete", u), t.on("abort", p), t.req ? b() : t.on("request", b)) : a && !t._writableState && (t.on("end", c), 
            t.on("close", c)), t.on("end", d), t.on("finish", u), !1 !== r.error && t.on("error", l), t.on("close", p), function() {
              t.removeListener("complete", u), t.removeListener("abort", p), t.removeListener("request", b), t.req && t.req.removeListener("finish", u), 
              t.removeListener("end", c), t.removeListener("close", c), t.removeListener("finish", u), t.removeListener("end", d), t.removeListener("error", l), 
              t.removeListener("close", p);
            };
          };
        },
        5167: e => {
          e.exports = function() {
            throw new Error("Readable.from is not available in the browser");
          };
        },
        9946: (e, t, r) => {
          "use strict";
          var n, i = r(4281).q, o = i.ERR_MISSING_ARGS, s = i.ERR_STREAM_DESTROYED;
          function a(e) {
            if (e) throw e;
          }
          function c(e, t, i, o) {
            o = function(e) {
              var t = !1;
              return function() {
                t || (t = !0, e.apply(void 0, arguments));
              };
            }(o);
            var a = !1;
            e.on("close", (function() {
              a = !0;
            })), void 0 === n && (n = r(8610)), n(e, {
              readable: t,
              writable: i
            }, (function(e) {
              if (e) return o(e);
              a = !0, o();
            }));
            var c = !1;
            return function(t) {
              if (!a && !c) return c = !0, function(e) {
                return e.setHeader && "function" == typeof e.abort;
              }(e) ? e.abort() : "function" == typeof e.destroy ? e.destroy() : void o(t || new s("pipe"));
            };
          }
          function f(e) {
            e();
          }
          function u(e, t) {
            return e.pipe(t);
          }
          function h(e) {
            return e.length ? "function" != typeof e[e.length - 1] ? a : e.pop() : a;
          }
          e.exports = function() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
            var n, i = h(t);
            if (Array.isArray(t[0]) && (t = t[0]), t.length < 2) throw new o("streams");
            var s = t.map((function(e, r) {
              var o = r < t.length - 1;
              return c(e, o, r > 0, (function(e) {
                n || (n = e), e && s.forEach(f), o || (s.forEach(f), i(n));
              }));
            }));
            return t.reduce(u);
          };
        },
        2457: (e, t, r) => {
          "use strict";
          var n = r(4281).q.ERR_INVALID_OPT_VALUE;
          e.exports = {
            getHighWaterMark: function(e, t, r, i) {
              var o = function(e, t, r) {
                return null != e.highWaterMark ? e.highWaterMark : t ? e[r] : null;
              }(t, i, r);
              if (null != o) {
                if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new n(i ? r : "highWaterMark", o);
                return Math.floor(o);
              }
              return e.objectMode ? 16 : 16384;
            }
          };
        },
        2503: (e, t, r) => {
          e.exports = r(7187).EventEmitter;
        },
        8473: (e, t, r) => {
          (t = e.exports = r(9481)).Stream = t, t.Readable = t, t.Writable = r(4229), t.Duplex = r(6753), t.Transform = r(4605), t.PassThrough = r(2725), 
          t.finished = r(8610), t.pipeline = r(9946);
        },
        9785: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer, i = r(5717), o = r(3349), s = new Array(16), a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ], c = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ], f = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ], u = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ], h = [ 0, 1518500249, 1859775393, 2400959708, 2840853838 ], d = [ 1352829926, 1548603684, 1836072691, 2053994217, 0 ];
          function l() {
            o.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
          }
          function p(e, t) {
            return e << t | e >>> 32 - t;
          }
          function b(e, t, r, n, i, o, s, a) {
            return p(e + (t ^ r ^ n) + o + s | 0, a) + i | 0;
          }
          function y(e, t, r, n, i, o, s, a) {
            return p(e + (t & r | ~t & n) + o + s | 0, a) + i | 0;
          }
          function g(e, t, r, n, i, o, s, a) {
            return p(e + ((t | ~r) ^ n) + o + s | 0, a) + i | 0;
          }
          function m(e, t, r, n, i, o, s, a) {
            return p(e + (t & n | r & ~n) + o + s | 0, a) + i | 0;
          }
          function v(e, t, r, n, i, o, s, a) {
            return p(e + (t ^ (r | ~n)) + o + s | 0, a) + i | 0;
          }
          i(l, o), l.prototype._update = function() {
            for (var e = s, t = 0; t < 16; ++t) e[t] = this._block.readInt32LE(4 * t);
            for (var r = 0 | this._a, n = 0 | this._b, i = 0 | this._c, o = 0 | this._d, l = 0 | this._e, w = 0 | this._a, _ = 0 | this._b, S = 0 | this._c, E = 0 | this._d, A = 0 | this._e, x = 0; x < 80; x += 1) {
              var k, P;
              x < 16 ? (k = b(r, n, i, o, l, e[a[x]], h[0], f[x]), P = v(w, _, S, E, A, e[c[x]], d[0], u[x])) : x < 32 ? (k = y(r, n, i, o, l, e[a[x]], h[1], f[x]), 
              P = m(w, _, S, E, A, e[c[x]], d[1], u[x])) : x < 48 ? (k = g(r, n, i, o, l, e[a[x]], h[2], f[x]), P = g(w, _, S, E, A, e[c[x]], d[2], u[x])) : x < 64 ? (k = m(r, n, i, o, l, e[a[x]], h[3], f[x]), 
              P = y(w, _, S, E, A, e[c[x]], d[3], u[x])) : (k = v(r, n, i, o, l, e[a[x]], h[4], f[x]), P = b(w, _, S, E, A, e[c[x]], d[4], u[x])), 
              r = l, l = o, o = p(i, 10), i = n, n = k, w = A, A = E, E = p(S, 10), S = _, _ = P;
            }
            var O = this._b + i + E | 0;
            this._b = this._c + o + A | 0, this._c = this._d + l + w | 0, this._d = this._e + r + _ | 0, this._e = this._a + n + S | 0, 
            this._a = O;
          }, l.prototype._digest = function() {
            this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), 
            this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), 
            this._update();
            var e = n.alloc ? n.alloc(20) : new n(20);
            return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), 
            e.writeInt32LE(this._e, 16), e;
          }, e.exports = l;
        },
        1675: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.getLength = t.decode = t.encode = void 0;
          var o = i(r(3550));
          function s(e, t) {
            if ("0" === e[0] && "0" === e[1]) throw new Error("invalid RLP: extra zeros");
            return parseInt(e, t);
          }
          function a(e, t) {
            if (e < 56) return n.from([ e + t ]);
            var r = u(e), i = u(t + 55 + r.length / 2);
            return n.from(i + r, "hex");
          }
          function c(e) {
            var t, r, i, o, a, f = [], u = e[0];
            if (u <= 127) return {
              data: e.slice(0, 1),
              remainder: e.slice(1)
            };
            if (u <= 183) {
              if (t = u - 127, i = 128 === u ? n.from([]) : e.slice(1, t), 2 === t && i[0] < 128) throw new Error("invalid rlp encoding: byte must be less 0x80");
              return {
                data: i,
                remainder: e.slice(t)
              };
            }
            if (u <= 191) {
              if (r = u - 182, e.length - 1 < r) throw new Error("invalid RLP: not enough bytes for string length");
              if ((t = s(e.slice(1, r).toString("hex"), 16)) <= 55) throw new Error("invalid RLP: expected string length to be greater than 55");
              if ((i = e.slice(r, t + r)).length < t) throw new Error("invalid RLP: not enough bytes for string");
              return {
                data: i,
                remainder: e.slice(t + r)
              };
            }
            if (u <= 247) {
              for (t = u - 191, o = e.slice(1, t); o.length; ) a = c(o), f.push(a.data), o = a.remainder;
              return {
                data: f,
                remainder: e.slice(t)
              };
            }
            var h = (r = u - 246) + (t = s(e.slice(1, r).toString("hex"), 16));
            if (h > e.length) throw new Error("invalid rlp: total length is larger than the data");
            if (0 === (o = e.slice(r, h)).length) throw new Error("invalid rlp, List has a invalid length");
            for (;o.length; ) a = c(o), f.push(a.data), o = a.remainder;
            return {
              data: f,
              remainder: e.slice(h)
            };
          }
          function f(e) {
            return "0x" === e.slice(0, 2);
          }
          function u(e) {
            if (e < 0) throw new Error("Invalid integer as argument, must be unsigned!");
            var t = e.toString(16);
            return t.length % 2 ? "0" + t : t;
          }
          function h(e) {
            if (!n.isBuffer(e)) {
              if ("string" == typeof e) return f(e) ? n.from((r = "string" != typeof (i = e) ? i : f(i) ? i.slice(2) : i).length % 2 ? "0" + r : r, "hex") : n.from(e);
              if ("number" == typeof e || "bigint" == typeof e) return e ? (t = u(e), n.from(t, "hex")) : n.from([]);
              if (null == e) return n.from([]);
              if (e instanceof Uint8Array) return n.from(e);
              if (o.default.isBN(e)) return n.from(e.toArray());
              throw new Error("invalid type");
            }
            var t, r, i;
            return e;
          }
          t.encode = function e(t) {
            if (Array.isArray(t)) {
              for (var r = [], i = 0; i < t.length; i++) r.push(e(t[i]));
              var o = n.concat(r);
              return n.concat([ a(o.length, 192), o ]);
            }
            var s = h(t);
            return 1 === s.length && s[0] < 128 ? s : n.concat([ a(s.length, 128), s ]);
          }, t.decode = function(e, t) {
            if (void 0 === t && (t = !1), !e || 0 === e.length) return n.from([]);
            var r = c(h(e));
            if (t) return r;
            if (0 !== r.remainder.length) throw new Error("invalid remainder");
            return r.data;
          }, t.getLength = function(e) {
            if (!e || 0 === e.length) return n.from([]);
            var t = h(e), r = t[0];
            if (r <= 127) return t.length;
            if (r <= 183) return r - 127;
            if (r <= 191) return r - 182;
            if (r <= 247) return r - 191;
            var i = r - 246;
            return i + s(t.slice(1, i).toString("hex"), 16);
          };
        },
        9509: (e, t, r) => {
          var n = r(8764), i = n.Buffer;
          function o(e, t) {
            for (var r in e) t[r] = e[r];
          }
          function s(e, t, r) {
            return i(e, t, r);
          }
          i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? e.exports = n : (o(n, t), t.Buffer = s), s.prototype = Object.create(i.prototype), 
          o(i, s), s.from = function(e, t, r) {
            if ("number" == typeof e) throw new TypeError("Argument must not be a number");
            return i(e, t, r);
          }, s.alloc = function(e, t, r) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            var n = i(e);
            return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
          }, s.allocUnsafe = function(e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return i(e);
          }, s.allocUnsafeSlow = function(e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return n.SlowBuffer(e);
          };
        },
        2399: (e, t, r) => {
          "use strict";
          var n, i = r(4155), o = r(8764), s = o.Buffer, a = {};
          for (n in o) o.hasOwnProperty(n) && "SlowBuffer" !== n && "Buffer" !== n && (a[n] = o[n]);
          var c = a.Buffer = {};
          for (n in s) s.hasOwnProperty(n) && "allocUnsafe" !== n && "allocUnsafeSlow" !== n && (c[n] = s[n]);
          if (a.Buffer.prototype = s.prototype, c.from && c.from !== Uint8Array.from || (c.from = function(e, t, r) {
            if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof e);
            if (e && void 0 === e.length) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
            return s(e, t, r);
          }), c.alloc || (c.alloc = function(e, t, r) {
            if ("number" != typeof e) throw new TypeError('The "size" argument must be of type number. Received type ' + typeof e);
            if (e < 0 || e >= 2 * (1 << 30)) throw new RangeError('The value "' + e + '" is invalid for option "size"');
            var n = s(e);
            return t && 0 !== t.length ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
          }), !a.kStringMaxLength) try {
            a.kStringMaxLength = i.binding("buffer").kStringMaxLength;
          } catch (e) {}
          a.constants || (a.constants = {
            MAX_LENGTH: a.kMaxLength
          }, a.kStringMaxLength && (a.constants.MAX_STRING_LENGTH = a.kStringMaxLength)), e.exports = a;
        },
        4189: (e, t, r) => {
          var n = r(9509).Buffer;
          function i(e, t) {
            this._block = n.alloc(e), this._finalSize = t, this._blockSize = e, this._len = 0;
          }
          i.prototype.update = function(e, t) {
            "string" == typeof e && (t = t || "utf8", e = n.from(e, t));
            for (var r = this._block, i = this._blockSize, o = e.length, s = this._len, a = 0; a < o; ) {
              for (var c = s % i, f = Math.min(o - a, i - c), u = 0; u < f; u++) r[c + u] = e[a + u];
              a += f, (s += f) % i == 0 && this._update(r);
            }
            return this._len += o, this;
          }, i.prototype.digest = function(e) {
            var t = this._len % this._blockSize;
            this._block[t] = 128, this._block.fill(0, t + 1), t >= this._finalSize && (this._update(this._block), this._block.fill(0));
            var r = 8 * this._len;
            if (r <= 4294967295) this._block.writeUInt32BE(r, this._blockSize - 4); else {
              var n = (4294967295 & r) >>> 0, i = (r - n) / 4294967296;
              this._block.writeUInt32BE(i, this._blockSize - 8), this._block.writeUInt32BE(n, this._blockSize - 4);
            }
            this._update(this._block);
            var o = this._hash();
            return e ? o.toString(e) : o;
          }, i.prototype._update = function() {
            throw new Error("_update must be implemented by subclass");
          }, e.exports = i;
        },
        9072: (e, t, r) => {
          var n = e.exports = function(e) {
            e = e.toLowerCase();
            var t = n[e];
            if (!t) throw new Error(e + " is not supported (we accept pull requests)");
            return new t;
          };
          n.sha = r(4448), n.sha1 = r(8336), n.sha224 = r(8432), n.sha256 = r(7499), n.sha384 = r(1686), n.sha512 = r(7816);
        },
        4448: (e, t, r) => {
          var n = r(5717), i = r(4189), o = r(9509).Buffer, s = [ 1518500249, 1859775393, -1894007588, -899497514 ], a = new Array(80);
          function c() {
            this.init(), this._w = a, i.call(this, 64, 56);
          }
          function f(e) {
            return e << 30 | e >>> 2;
          }
          function u(e, t, r, n) {
            return 0 === e ? t & r | ~t & n : 2 === e ? t & r | t & n | r & n : t ^ r ^ n;
          }
          n(c, i), c.prototype.init = function() {
            return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
          }, c.prototype._update = function(e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, c = 0 | this._e, h = 0; h < 16; ++h) r[h] = e.readInt32BE(4 * h);
            for (;h < 80; ++h) r[h] = r[h - 3] ^ r[h - 8] ^ r[h - 14] ^ r[h - 16];
            for (var d = 0; d < 80; ++d) {
              var l = ~~(d / 20), p = 0 | ((t = n) << 5 | t >>> 27) + u(l, i, o, a) + c + r[d] + s[l];
              c = a, a = o, o = f(i), i = n, n = p;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = c + this._e | 0;
          }, c.prototype._hash = function() {
            var e = o.allocUnsafe(20);
            return e.writeInt32BE(0 | this._a, 0), e.writeInt32BE(0 | this._b, 4), e.writeInt32BE(0 | this._c, 8), e.writeInt32BE(0 | this._d, 12), 
            e.writeInt32BE(0 | this._e, 16), e;
          }, e.exports = c;
        },
        8336: (e, t, r) => {
          var n = r(5717), i = r(4189), o = r(9509).Buffer, s = [ 1518500249, 1859775393, -1894007588, -899497514 ], a = new Array(80);
          function c() {
            this.init(), this._w = a, i.call(this, 64, 56);
          }
          function f(e) {
            return e << 5 | e >>> 27;
          }
          function u(e) {
            return e << 30 | e >>> 2;
          }
          function h(e, t, r, n) {
            return 0 === e ? t & r | ~t & n : 2 === e ? t & r | t & n | r & n : t ^ r ^ n;
          }
          n(c, i), c.prototype.init = function() {
            return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
          }, c.prototype._update = function(e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, c = 0 | this._e, d = 0; d < 16; ++d) r[d] = e.readInt32BE(4 * d);
            for (;d < 80; ++d) r[d] = (t = r[d - 3] ^ r[d - 8] ^ r[d - 14] ^ r[d - 16]) << 1 | t >>> 31;
            for (var l = 0; l < 80; ++l) {
              var p = ~~(l / 20), b = f(n) + h(p, i, o, a) + c + r[l] + s[p] | 0;
              c = a, a = o, o = u(i), i = n, n = b;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = c + this._e | 0;
          }, c.prototype._hash = function() {
            var e = o.allocUnsafe(20);
            return e.writeInt32BE(0 | this._a, 0), e.writeInt32BE(0 | this._b, 4), e.writeInt32BE(0 | this._c, 8), e.writeInt32BE(0 | this._d, 12), 
            e.writeInt32BE(0 | this._e, 16), e;
          }, e.exports = c;
        },
        8432: (e, t, r) => {
          var n = r(5717), i = r(7499), o = r(4189), s = r(9509).Buffer, a = new Array(64);
          function c() {
            this.init(), this._w = a, o.call(this, 64, 56);
          }
          n(c, i), c.prototype.init = function() {
            return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, 
            this._g = 1694076839, this._h = 3204075428, this;
          }, c.prototype._hash = function() {
            var e = s.allocUnsafe(28);
            return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), 
            e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e;
          }, e.exports = c;
        },
        7499: (e, t, r) => {
          var n = r(5717), i = r(4189), o = r(9509).Buffer, s = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ], a = new Array(64);
          function c() {
            this.init(), this._w = a, i.call(this, 64, 56);
          }
          function f(e, t, r) {
            return r ^ e & (t ^ r);
          }
          function u(e, t, r) {
            return e & t | r & (e | t);
          }
          function h(e) {
            return (e >>> 2 | e << 30) ^ (e >>> 13 | e << 19) ^ (e >>> 22 | e << 10);
          }
          function d(e) {
            return (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
          }
          function l(e) {
            return (e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3;
          }
          n(c, i), c.prototype.init = function() {
            return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, 
            this._g = 528734635, this._h = 1541459225, this;
          }, c.prototype._update = function(e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, c = 0 | this._e, p = 0 | this._f, b = 0 | this._g, y = 0 | this._h, g = 0; g < 16; ++g) r[g] = e.readInt32BE(4 * g);
            for (;g < 64; ++g) r[g] = 0 | (((t = r[g - 2]) >>> 17 | t << 15) ^ (t >>> 19 | t << 13) ^ t >>> 10) + r[g - 7] + l(r[g - 15]) + r[g - 16];
            for (var m = 0; m < 64; ++m) {
              var v = y + d(c) + f(c, p, b) + s[m] + r[m] | 0, w = h(n) + u(n, i, o) | 0;
              y = b, b = p, p = c, c = a + v | 0, a = o, o = i, i = n, n = v + w | 0;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = c + this._e | 0, 
            this._f = p + this._f | 0, this._g = b + this._g | 0, this._h = y + this._h | 0;
          }, c.prototype._hash = function() {
            var e = o.allocUnsafe(32);
            return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), 
            e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e.writeInt32BE(this._h, 28), e;
          }, e.exports = c;
        },
        1686: (e, t, r) => {
          var n = r(5717), i = r(7816), o = r(4189), s = r(9509).Buffer, a = new Array(160);
          function c() {
            this.init(), this._w = a, o.call(this, 128, 112);
          }
          n(c, i), c.prototype.init = function() {
            return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, 
            this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, 
            this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
          }, c.prototype._hash = function() {
            var e = s.allocUnsafe(48);
            function t(t, r, n) {
              e.writeInt32BE(t, n), e.writeInt32BE(r, n + 4);
            }
            return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), 
            t(this._fh, this._fl, 40), e;
          }, e.exports = c;
        },
        7816: (e, t, r) => {
          var n = r(5717), i = r(4189), o = r(9509).Buffer, s = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ], a = new Array(160);
          function c() {
            this.init(), this._w = a, i.call(this, 128, 112);
          }
          function f(e, t, r) {
            return r ^ e & (t ^ r);
          }
          function u(e, t, r) {
            return e & t | r & (e | t);
          }
          function h(e, t) {
            return (e >>> 28 | t << 4) ^ (t >>> 2 | e << 30) ^ (t >>> 7 | e << 25);
          }
          function d(e, t) {
            return (e >>> 14 | t << 18) ^ (e >>> 18 | t << 14) ^ (t >>> 9 | e << 23);
          }
          function l(e, t) {
            return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ e >>> 7;
          }
          function p(e, t) {
            return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ (e >>> 7 | t << 25);
          }
          function b(e, t) {
            return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ e >>> 6;
          }
          function y(e, t) {
            return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ (e >>> 6 | t << 26);
          }
          function g(e, t) {
            return e >>> 0 < t >>> 0 ? 1 : 0;
          }
          n(c, i), c.prototype.init = function() {
            return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, 
            this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, 
            this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
          }, c.prototype._update = function(e) {
            for (var t = this._w, r = 0 | this._ah, n = 0 | this._bh, i = 0 | this._ch, o = 0 | this._dh, a = 0 | this._eh, c = 0 | this._fh, m = 0 | this._gh, v = 0 | this._hh, w = 0 | this._al, _ = 0 | this._bl, S = 0 | this._cl, E = 0 | this._dl, A = 0 | this._el, x = 0 | this._fl, k = 0 | this._gl, P = 0 | this._hl, O = 0; O < 32; O += 2) t[O] = e.readInt32BE(4 * O), 
            t[O + 1] = e.readInt32BE(4 * O + 4);
            for (;O < 160; O += 2) {
              var M = t[O - 30], I = t[O - 30 + 1], T = l(M, I), R = p(I, M), C = b(M = t[O - 4], I = t[O - 4 + 1]), N = y(I, M), j = t[O - 14], B = t[O - 14 + 1], L = t[O - 32], D = t[O - 32 + 1], U = R + B | 0, q = T + j + g(U, R) | 0;
              q = (q = q + C + g(U = U + N | 0, N) | 0) + L + g(U = U + D | 0, D) | 0, t[O] = q, t[O + 1] = U;
            }
            for (var F = 0; F < 160; F += 2) {
              q = t[F], U = t[F + 1];
              var H = u(r, n, i), z = u(w, _, S), K = h(r, w), V = h(w, r), G = d(a, A), W = d(A, a), X = s[F], Y = s[F + 1], J = f(a, c, m), $ = f(A, x, k), Z = P + W | 0, Q = v + G + g(Z, P) | 0;
              Q = (Q = (Q = Q + J + g(Z = Z + $ | 0, $) | 0) + X + g(Z = Z + Y | 0, Y) | 0) + q + g(Z = Z + U | 0, U) | 0;
              var ee = V + z | 0, te = K + H + g(ee, V) | 0;
              v = m, P = k, m = c, k = x, c = a, x = A, a = o + Q + g(A = E + Z | 0, E) | 0, o = i, E = S, i = n, S = _, n = r, _ = w, 
              r = Q + te + g(w = Z + ee | 0, Z) | 0;
            }
            this._al = this._al + w | 0, this._bl = this._bl + _ | 0, this._cl = this._cl + S | 0, this._dl = this._dl + E | 0, this._el = this._el + A | 0, 
            this._fl = this._fl + x | 0, this._gl = this._gl + k | 0, this._hl = this._hl + P | 0, this._ah = this._ah + r + g(this._al, w) | 0, 
            this._bh = this._bh + n + g(this._bl, _) | 0, this._ch = this._ch + i + g(this._cl, S) | 0, this._dh = this._dh + o + g(this._dl, E) | 0, 
            this._eh = this._eh + a + g(this._el, A) | 0, this._fh = this._fh + c + g(this._fl, x) | 0, this._gh = this._gh + m + g(this._gl, k) | 0, 
            this._hh = this._hh + v + g(this._hl, P) | 0;
          }, c.prototype._hash = function() {
            var e = o.allocUnsafe(64);
            function t(t, r, n) {
              e.writeInt32BE(t, n), e.writeInt32BE(r, n + 4);
            }
            return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), 
            t(this._fh, this._fl, 40), t(this._gh, this._gl, 48), t(this._hh, this._hl, 56), e;
          }, e.exports = c;
        },
        2830: (e, t, r) => {
          e.exports = i;
          var n = r(7187).EventEmitter;
          function i() {
            n.call(this);
          }
          r(5717)(i, n), i.Readable = r(9481), i.Writable = r(4229), i.Duplex = r(6753), i.Transform = r(4605), i.PassThrough = r(2725), 
          i.finished = r(8610), i.pipeline = r(9946), i.Stream = i, i.prototype.pipe = function(e, t) {
            var r = this;
            function i(t) {
              e.writable && !1 === e.write(t) && r.pause && r.pause();
            }
            function o() {
              r.readable && r.resume && r.resume();
            }
            r.on("data", i), e.on("drain", o), e._isStdio || t && !1 === t.end || (r.on("end", a), r.on("close", c));
            var s = !1;
            function a() {
              s || (s = !0, e.end());
            }
            function c() {
              s || (s = !0, "function" == typeof e.destroy && e.destroy());
            }
            function f(e) {
              if (u(), 0 === n.listenerCount(this, "error")) throw e;
            }
            function u() {
              r.removeListener("data", i), e.removeListener("drain", o), r.removeListener("end", a), r.removeListener("close", c), r.removeListener("error", f), 
              e.removeListener("error", f), r.removeListener("end", u), r.removeListener("close", u), e.removeListener("close", u);
            }
            return r.on("error", f), e.on("error", f), r.on("end", u), r.on("close", u), e.on("close", u), e.emit("pipe", r), e;
          };
        },
        8501: (e, t, r) => {
          var n = r(1989), i = r(5676), o = r(7529), s = r(584), a = r(8575), c = t;
          c.request = function(e, t) {
            e = "string" == typeof e ? a.parse(e) : o(e);
            var i = -1 === r.g.location.protocol.search(/^https?:$/) ? "http:" : "", s = e.protocol || i, c = e.hostname || e.host, f = e.port, u = e.path || "/";
            c && -1 !== c.indexOf(":") && (c = "[" + c + "]"), e.url = (c ? s + "//" + c : "") + (f ? ":" + f : "") + u, e.method = (e.method || "GET").toUpperCase(), 
            e.headers = e.headers || {};
            var h = new n(e);
            return t && h.on("response", t), h;
          }, c.get = function(e, t) {
            var r = c.request(e, t);
            return r.end(), r;
          }, c.ClientRequest = n, c.IncomingMessage = i.IncomingMessage, c.Agent = function() {}, c.Agent.defaultMaxSockets = 4, c.globalAgent = new c.Agent, 
          c.STATUS_CODES = s, c.METHODS = [ "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE" ];
        },
        8725: (e, t, r) => {
          var n;
          function i() {
            if (void 0 !== n) return n;
            if (r.g.XMLHttpRequest) {
              n = new r.g.XMLHttpRequest;
              try {
                n.open("GET", r.g.XDomainRequest ? "/" : "https://example.com");
              } catch (e) {
                n = null;
              }
            } else n = null;
            return n;
          }
          function o(e) {
            var t = i();
            if (!t) return !1;
            try {
              return t.responseType = e, t.responseType === e;
            } catch (e) {}
            return !1;
          }
          function s(e) {
            return "function" == typeof e;
          }
          t.fetch = s(r.g.fetch) && s(r.g.ReadableStream), t.writableStream = s(r.g.WritableStream), t.abortController = s(r.g.AbortController), 
          t.arraybuffer = t.fetch || o("arraybuffer"), t.msstream = !t.fetch && o("ms-stream"), t.mozchunkedarraybuffer = !t.fetch && o("moz-chunked-arraybuffer"), 
          t.overrideMimeType = t.fetch || !!i() && s(i().overrideMimeType), n = null;
        },
        1989: (e, t, r) => {
          var n = r(8764).Buffer, i = r(4155), o = r(8725), s = r(5717), a = r(5676), c = r(8473), f = a.IncomingMessage, u = a.readyStates, h = e.exports = function(e) {
            var t, r = this;
            c.Writable.call(r), r._opts = e, r._body = [], r._headers = {}, e.auth && r.setHeader("Authorization", "Basic " + n.from(e.auth).toString("base64")), 
            Object.keys(e.headers).forEach((function(t) {
              r.setHeader(t, e.headers[t]);
            }));
            var i = !0;
            if ("disable-fetch" === e.mode || "requestTimeout" in e && !o.abortController) i = !1, t = !0; else if ("prefer-streaming" === e.mode) t = !1; else if ("allow-wrong-content-type" === e.mode) t = !o.overrideMimeType; else {
              if (e.mode && "default" !== e.mode && "prefer-fast" !== e.mode) throw new Error("Invalid value for opts.mode");
              t = !0;
            }
            r._mode = function(e, t) {
              return o.fetch && t ? "fetch" : o.mozchunkedarraybuffer ? "moz-chunked-arraybuffer" : o.msstream ? "ms-stream" : o.arraybuffer && e ? "arraybuffer" : "text";
            }(t, i), r._fetchTimer = null, r._socketTimeout = null, r._socketTimer = null, r.on("finish", (function() {
              r._onFinish();
            }));
          };
          s(h, c.Writable), h.prototype.setHeader = function(e, t) {
            var r = e.toLowerCase();
            -1 === d.indexOf(r) && (this._headers[r] = {
              name: e,
              value: t
            });
          }, h.prototype.getHeader = function(e) {
            var t = this._headers[e.toLowerCase()];
            return t ? t.value : null;
          }, h.prototype.removeHeader = function(e) {
            delete this._headers[e.toLowerCase()];
          }, h.prototype._onFinish = function() {
            var e = this;
            if (!e._destroyed) {
              var t = e._opts;
              "timeout" in t && 0 !== t.timeout && e.setTimeout(t.timeout);
              var n = e._headers, s = null;
              "GET" !== t.method && "HEAD" !== t.method && (s = new Blob(e._body, {
                type: (n["content-type"] || {}).value || ""
              }));
              var a = [];
              if (Object.keys(n).forEach((function(e) {
                var t = n[e].name, r = n[e].value;
                Array.isArray(r) ? r.forEach((function(e) {
                  a.push([ t, e ]);
                })) : a.push([ t, r ]);
              })), "fetch" === e._mode) {
                var c = null;
                if (o.abortController) {
                  var f = new AbortController;
                  c = f.signal, e._fetchAbortController = f, "requestTimeout" in t && 0 !== t.requestTimeout && (e._fetchTimer = r.g.setTimeout((function() {
                    e.emit("requestTimeout"), e._fetchAbortController && e._fetchAbortController.abort();
                  }), t.requestTimeout));
                }
                r.g.fetch(e._opts.url, {
                  method: e._opts.method,
                  headers: a,
                  body: s || void 0,
                  mode: "cors",
                  credentials: t.withCredentials ? "include" : "same-origin",
                  signal: c
                }).then((function(t) {
                  e._fetchResponse = t, e._resetTimers(!1), e._connect();
                }), (function(t) {
                  e._resetTimers(!0), e._destroyed || e.emit("error", t);
                }));
              } else {
                var h = e._xhr = new r.g.XMLHttpRequest;
                try {
                  h.open(e._opts.method, e._opts.url, !0);
                } catch (t) {
                  return void i.nextTick((function() {
                    e.emit("error", t);
                  }));
                }
                "responseType" in h && (h.responseType = e._mode), "withCredentials" in h && (h.withCredentials = !!t.withCredentials), 
                "text" === e._mode && "overrideMimeType" in h && h.overrideMimeType("text/plain; charset=x-user-defined"), "requestTimeout" in t && (h.timeout = t.requestTimeout, 
                h.ontimeout = function() {
                  e.emit("requestTimeout");
                }), a.forEach((function(e) {
                  h.setRequestHeader(e[0], e[1]);
                })), e._response = null, h.onreadystatechange = function() {
                  switch (h.readyState) {
                   case u.LOADING:
                   case u.DONE:
                    e._onXHRProgress();
                  }
                }, "moz-chunked-arraybuffer" === e._mode && (h.onprogress = function() {
                  e._onXHRProgress();
                }), h.onerror = function() {
                  e._destroyed || (e._resetTimers(!0), e.emit("error", new Error("XHR error")));
                };
                try {
                  h.send(s);
                } catch (t) {
                  return void i.nextTick((function() {
                    e.emit("error", t);
                  }));
                }
              }
            }
          }, h.prototype._onXHRProgress = function() {
            var e = this;
            e._resetTimers(!1), function(e) {
              try {
                var t = e.status;
                return null !== t && 0 !== t;
              } catch (e) {
                return !1;
              }
            }(e._xhr) && !e._destroyed && (e._response || e._connect(), e._response._onXHRProgress(e._resetTimers.bind(e)));
          }, h.prototype._connect = function() {
            var e = this;
            e._destroyed || (e._response = new f(e._xhr, e._fetchResponse, e._mode, e._resetTimers.bind(e)), e._response.on("error", (function(t) {
              e.emit("error", t);
            })), e.emit("response", e._response));
          }, h.prototype._write = function(e, t, r) {
            this._body.push(e), r();
          }, h.prototype._resetTimers = function(e) {
            var t = this;
            r.g.clearTimeout(t._socketTimer), t._socketTimer = null, e ? (r.g.clearTimeout(t._fetchTimer), t._fetchTimer = null) : t._socketTimeout && (t._socketTimer = r.g.setTimeout((function() {
              t.emit("timeout");
            }), t._socketTimeout));
          }, h.prototype.abort = h.prototype.destroy = function(e) {
            var t = this;
            t._destroyed = !0, t._resetTimers(!0), t._response && (t._response._destroyed = !0), t._xhr ? t._xhr.abort() : t._fetchAbortController && t._fetchAbortController.abort(), 
            e && t.emit("error", e);
          }, h.prototype.end = function(e, t, r) {
            "function" == typeof e && (r = e, e = void 0), c.Writable.prototype.end.call(this, e, t, r);
          }, h.prototype.setTimeout = function(e, t) {
            var r = this;
            t && r.once("timeout", t), r._socketTimeout = e, r._resetTimers(!1);
          }, h.prototype.flushHeaders = function() {}, h.prototype.setNoDelay = function() {}, h.prototype.setSocketKeepAlive = function() {};
          var d = [ "accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "via" ];
        },
        5676: (e, t, r) => {
          var n = r(4155), i = r(8764).Buffer, o = r(8725), s = r(5717), a = r(8473), c = t.readyStates = {
            UNSENT: 0,
            OPENED: 1,
            HEADERS_RECEIVED: 2,
            LOADING: 3,
            DONE: 4
          }, f = t.IncomingMessage = function(e, t, r, s) {
            var c = this;
            if (a.Readable.call(c), c._mode = r, c.headers = {}, c.rawHeaders = [], c.trailers = {}, c.rawTrailers = [], c.on("end", (function() {
              n.nextTick((function() {
                c.emit("close");
              }));
            })), "fetch" === r) {
              if (c._fetchResponse = t, c.url = t.url, c.statusCode = t.status, c.statusMessage = t.statusText, t.headers.forEach((function(e, t) {
                c.headers[t.toLowerCase()] = e, c.rawHeaders.push(t, e);
              })), o.writableStream) {
                var f = new WritableStream({
                  write: function(e) {
                    return s(!1), new Promise((function(t, r) {
                      c._destroyed ? r() : c.push(i.from(e)) ? t() : c._resumeFetch = t;
                    }));
                  },
                  close: function() {
                    s(!0), c._destroyed || c.push(null);
                  },
                  abort: function(e) {
                    s(!0), c._destroyed || c.emit("error", e);
                  }
                });
                try {
                  return void t.body.pipeTo(f).catch((function(e) {
                    s(!0), c._destroyed || c.emit("error", e);
                  }));
                } catch (e) {}
              }
              var u = t.body.getReader();
              !function e() {
                u.read().then((function(t) {
                  c._destroyed || (s(t.done), t.done ? c.push(null) : (c.push(i.from(t.value)), e()));
                })).catch((function(e) {
                  s(!0), c._destroyed || c.emit("error", e);
                }));
              }();
            } else if (c._xhr = e, c._pos = 0, c.url = e.responseURL, c.statusCode = e.status, c.statusMessage = e.statusText, e.getAllResponseHeaders().split(/\r?\n/).forEach((function(e) {
              var t = e.match(/^([^:]+):\s*(.*)/);
              if (t) {
                var r = t[1].toLowerCase();
                "set-cookie" === r ? (void 0 === c.headers[r] && (c.headers[r] = []), c.headers[r].push(t[2])) : void 0 !== c.headers[r] ? c.headers[r] += ", " + t[2] : c.headers[r] = t[2], 
                c.rawHeaders.push(t[1], t[2]);
              }
            })), c._charset = "x-user-defined", !o.overrideMimeType) {
              var h = c.rawHeaders["mime-type"];
              if (h) {
                var d = h.match(/;\s*charset=([^;])(;|$)/);
                d && (c._charset = d[1].toLowerCase());
              }
              c._charset || (c._charset = "utf-8");
            }
          };
          s(f, a.Readable), f.prototype._read = function() {
            var e = this._resumeFetch;
            e && (this._resumeFetch = null, e());
          }, f.prototype._onXHRProgress = function(e) {
            var t = this, n = t._xhr, o = null;
            switch (t._mode) {
             case "text":
              if ((o = n.responseText).length > t._pos) {
                var s = o.substr(t._pos);
                if ("x-user-defined" === t._charset) {
                  for (var a = i.alloc(s.length), f = 0; f < s.length; f++) a[f] = 255 & s.charCodeAt(f);
                  t.push(a);
                } else t.push(s, t._charset);
                t._pos = o.length;
              }
              break;

             case "arraybuffer":
              if (n.readyState !== c.DONE || !n.response) break;
              o = n.response, t.push(i.from(new Uint8Array(o)));
              break;

             case "moz-chunked-arraybuffer":
              if (o = n.response, n.readyState !== c.LOADING || !o) break;
              t.push(i.from(new Uint8Array(o)));
              break;

             case "ms-stream":
              if (o = n.response, n.readyState !== c.LOADING) break;
              var u = new r.g.MSStreamReader;
              u.onprogress = function() {
                u.result.byteLength > t._pos && (t.push(i.from(new Uint8Array(u.result.slice(t._pos)))), t._pos = u.result.byteLength);
              }, u.onload = function() {
                e(!0), t.push(null);
              }, u.readAsArrayBuffer(o);
            }
            t._xhr.readyState === c.DONE && "ms-stream" !== t._mode && (e(!0), t.push(null));
          };
        },
        2553: (e, t, r) => {
          "use strict";
          var n = r(9509).Buffer, i = n.isEncoding || function(e) {
            switch ((e = "" + e) && e.toLowerCase()) {
             case "hex":
             case "utf8":
             case "utf-8":
             case "ascii":
             case "binary":
             case "base64":
             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
             case "raw":
              return !0;

             default:
              return !1;
            }
          };
          function o(e) {
            var t;
            switch (this.encoding = function(e) {
              var t = function(e) {
                if (!e) return "utf8";
                for (var t; ;) switch (e) {
                 case "utf8":
                 case "utf-8":
                  return "utf8";

                 case "ucs2":
                 case "ucs-2":
                 case "utf16le":
                 case "utf-16le":
                  return "utf16le";

                 case "latin1":
                 case "binary":
                  return "latin1";

                 case "base64":
                 case "ascii":
                 case "hex":
                  return e;

                 default:
                  if (t) return;
                  e = ("" + e).toLowerCase(), t = !0;
                }
              }(e);
              if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
              return t || e;
            }(e), this.encoding) {
             case "utf16le":
              this.text = c, this.end = f, t = 4;
              break;

             case "utf8":
              this.fillLast = a, t = 4;
              break;

             case "base64":
              this.text = u, this.end = h, t = 3;
              break;

             default:
              return this.write = d, void (this.end = l);
            }
            this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
          }
          function s(e) {
            return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;
          }
          function a(e) {
            var t = this.lastTotal - this.lastNeed, r = function(e, t, r) {
              if (128 != (192 & t[0])) return e.lastNeed = 0, "�";
              if (e.lastNeed > 1 && t.length > 1) {
                if (128 != (192 & t[1])) return e.lastNeed = 1, "�";
                if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";
              }
            }(this, e);
            return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), 
            void (this.lastNeed -= e.length));
          }
          function c(e, t) {
            if ((e.length - t) % 2 == 0) {
              var r = e.toString("utf16le", t);
              if (r) {
                var n = r.charCodeAt(r.length - 1);
                if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], 
                r.slice(0, -1);
              }
              return r;
            }
            return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
          }
          function f(e) {
            var t = e && e.length ? this.write(e) : "";
            if (this.lastNeed) {
              var r = this.lastTotal - this.lastNeed;
              return t + this.lastChar.toString("utf16le", 0, r);
            }
            return t;
          }
          function u(e, t) {
            var r = (e.length - t) % 3;
            return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], 
            this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
          }
          function h(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
          }
          function d(e) {
            return e.toString(this.encoding);
          }
          function l(e) {
            return e && e.length ? this.write(e) : "";
          }
          t.s = o, o.prototype.write = function(e) {
            if (0 === e.length) return "";
            var t, r;
            if (this.lastNeed) {
              if (void 0 === (t = this.fillLast(e))) return "";
              r = this.lastNeed, this.lastNeed = 0;
            } else r = 0;
            return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
          }, o.prototype.end = function(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + "�" : t;
          }, o.prototype.text = function(e, t) {
            var r = function(e, t, r) {
              var n = t.length - 1;
              if (n < r) return 0;
              var i = s(t[n]);
              return i >= 0 ? (i > 0 && (e.lastNeed = i - 1), i) : --n < r || -2 === i ? 0 : (i = s(t[n])) >= 0 ? (i > 0 && (e.lastNeed = i - 2), 
              i) : --n < r || -2 === i ? 0 : (i = s(t[n])) >= 0 ? (i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i) : 0;
            }(this, e, t);
            if (!this.lastNeed) return e.toString("utf8", t);
            this.lastTotal = r;
            var n = e.length - (r - this.lastNeed);
            return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
          }, o.prototype.fillLast = function(e) {
            if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
            e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
          };
        },
        9604: (e, t, r) => {
          var n = r(3944);
          e.exports = function(e) {
            return "string" != typeof e ? e : n(e) ? e.slice(2) : e;
          };
        },
        5940: e => {
          var t = {}.toString;
          e.exports = Array.isArray || function(e) {
            return "[object Array]" == t.call(e);
          };
        },
        5867: (e, t, r) => {
          "use strict";
          var n = r(8212), i = Object.keys || function(e) {
            var t = [];
            for (var r in e) t.push(r);
            return t;
          };
          e.exports = h;
          var o = Object.create(r(6497));
          o.inherits = r(5717);
          var s = r(2442), a = r(759);
          o.inherits(h, s);
          for (var c = i(a.prototype), f = 0; f < c.length; f++) {
            var u = c[f];
            h.prototype[u] || (h.prototype[u] = a.prototype[u]);
          }
          function h(e) {
            if (!(this instanceof h)) return new h(e);
            s.call(this, e), a.call(this, e), e && !1 === e.readable && (this.readable = !1), e && !1 === e.writable && (this.writable = !1), 
            this.allowHalfOpen = !0, e && !1 === e.allowHalfOpen && (this.allowHalfOpen = !1), this.once("end", d);
          }
          function d() {
            this.allowHalfOpen || this._writableState.ended || n.nextTick(l, this);
          }
          function l(e) {
            e.end();
          }
          Object.defineProperty(h.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._writableState.highWaterMark;
            }
          }), Object.defineProperty(h.prototype, "destroyed", {
            get: function() {
              return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function(e) {
              void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);
            }
          }), h.prototype._destroy = function(e, t) {
            this.push(null), this.end(), n.nextTick(t, e);
          };
        },
        3431: (e, t, r) => {
          "use strict";
          e.exports = o;
          var n = r(62), i = Object.create(r(6497));
          function o(e) {
            if (!(this instanceof o)) return new o(e);
            n.call(this, e);
          }
          i.inherits = r(5717), i.inherits(o, n), o.prototype._transform = function(e, t, r) {
            r(null, e);
          };
        },
        2442: (e, t, r) => {
          "use strict";
          var n = r(4155), i = r(8212);
          e.exports = v;
          var o, s = r(5940);
          v.ReadableState = m, r(7187).EventEmitter;
          var a = function(e, t) {
            return e.listeners(t).length;
          }, c = r(4104), f = r(4591).Buffer, u = r.g.Uint8Array || function() {}, h = Object.create(r(6497));
          h.inherits = r(5717);
          var d = r(6882), l = void 0;
          l = d && d.debuglog ? d.debuglog("stream") : function() {};
          var p, b = r(3912), y = r(5513);
          h.inherits(v, c);
          var g = [ "error", "close", "destroy", "pause", "resume" ];
          function m(e, t) {
            e = e || {};
            var n = t instanceof (o = o || r(5867));
            this.objectMode = !!e.objectMode, n && (this.objectMode = this.objectMode || !!e.readableObjectMode);
            var i = e.highWaterMark, s = e.readableHighWaterMark, a = this.objectMode ? 16 : 16384;
            this.highWaterMark = i || 0 === i ? i : n && (s || 0 === s) ? s : a, this.highWaterMark = Math.floor(this.highWaterMark), 
            this.buffer = new b, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, 
            this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, 
            this.destroyed = !1, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, 
            this.encoding = null, e.encoding && (p || (p = r(7989).s), this.decoder = new p(e.encoding), this.encoding = e.encoding);
          }
          function v(e) {
            if (o = o || r(5867), !(this instanceof v)) return new v(e);
            this._readableState = new m(e, this), this.readable = !0, e && ("function" == typeof e.read && (this._read = e.read), "function" == typeof e.destroy && (this._destroy = e.destroy)), 
            c.call(this);
          }
          function w(e, t, r, n, i) {
            var o, s = e._readableState;
            return null === t ? (s.reading = !1, function(e, t) {
              if (!t.ended) {
                if (t.decoder) {
                  var r = t.decoder.end();
                  r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
                }
                t.ended = !0, A(e);
              }
            }(e, s)) : (i || (o = function(e, t) {
              var r, n;
              return n = t, f.isBuffer(n) || n instanceof u || "string" == typeof t || void 0 === t || e.objectMode || (r = new TypeError("Invalid non-string/buffer chunk")), 
              r;
            }(s, t)), o ? e.emit("error", o) : s.objectMode || t && t.length > 0 ? ("string" == typeof t || s.objectMode || Object.getPrototypeOf(t) === f.prototype || (t = function(e) {
              return f.from(e);
            }(t)), n ? s.endEmitted ? e.emit("error", new Error("stream.unshift() after end event")) : _(e, s, t, !0) : s.ended ? e.emit("error", new Error("stream.push() after EOF")) : (s.reading = !1, 
            s.decoder && !r ? (t = s.decoder.write(t), s.objectMode || 0 !== t.length ? _(e, s, t, !1) : k(e, s)) : _(e, s, t, !1))) : n || (s.reading = !1)), 
            function(e) {
              return !e.ended && (e.needReadable || e.length < e.highWaterMark || 0 === e.length);
            }(s);
          }
          function _(e, t, r, n) {
            t.flowing && 0 === t.length && !t.sync ? (e.emit("data", r), e.read(0)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), 
            t.needReadable && A(e)), k(e, t);
          }
          Object.defineProperty(v.prototype, "destroyed", {
            get: function() {
              return void 0 !== this._readableState && this._readableState.destroyed;
            },
            set: function(e) {
              this._readableState && (this._readableState.destroyed = e);
            }
          }), v.prototype.destroy = y.destroy, v.prototype._undestroy = y.undestroy, v.prototype._destroy = function(e, t) {
            this.push(null), t(e);
          }, v.prototype.push = function(e, t) {
            var r, n = this._readableState;
            return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = f.from(e, t), 
            t = ""), r = !0), w(this, e, t, !1, r);
          }, v.prototype.unshift = function(e) {
            return w(this, e, null, !0, !1);
          }, v.prototype.isPaused = function() {
            return !1 === this._readableState.flowing;
          }, v.prototype.setEncoding = function(e) {
            return p || (p = r(7989).s), this._readableState.decoder = new p(e), this._readableState.encoding = e, this;
          };
          var S = 8388608;
          function E(e, t) {
            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function(e) {
              return e >= S ? e = S : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
            }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));
          }
          function A(e) {
            var t = e._readableState;
            t.needReadable = !1, t.emittedReadable || (l("emitReadable", t.flowing), t.emittedReadable = !0, t.sync ? i.nextTick(x, e) : x(e));
          }
          function x(e) {
            l("emit readable"), e.emit("readable"), I(e);
          }
          function k(e, t) {
            t.readingMore || (t.readingMore = !0, i.nextTick(P, e, t));
          }
          function P(e, t) {
            for (var r = t.length; !t.reading && !t.flowing && !t.ended && t.length < t.highWaterMark && (l("maybeReadMore read 0"), 
            e.read(0), r !== t.length); ) r = t.length;
            t.readingMore = !1;
          }
          function O(e) {
            l("readable nexttick read 0"), e.read(0);
          }
          function M(e, t) {
            t.reading || (l("resume read 0"), e.read(0)), t.resumeScheduled = !1, t.awaitDrain = 0, e.emit("resume"), I(e), t.flowing && !t.reading && e.read(0);
          }
          function I(e) {
            var t = e._readableState;
            for (l("flow", t.flowing); t.flowing && null !== e.read(); ) ;
          }
          function T(e, t) {
            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.head.data : t.buffer.concat(t.length), 
            t.buffer.clear()) : r = function(e, t, r) {
              var n;
              return e < t.head.data.length ? (n = t.head.data.slice(0, e), t.head.data = t.head.data.slice(e)) : n = e === t.head.data.length ? t.shift() : r ? function(e, t) {
                var r = t.head, n = 1, i = r.data;
                for (e -= i.length; r = r.next; ) {
                  var o = r.data, s = e > o.length ? o.length : e;
                  if (s === o.length ? i += o : i += o.slice(0, e), 0 == (e -= s)) {
                    s === o.length ? (++n, r.next ? t.head = r.next : t.head = t.tail = null) : (t.head = r, r.data = o.slice(s));
                    break;
                  }
                  ++n;
                }
                return t.length -= n, i;
              }(e, t) : function(e, t) {
                var r = f.allocUnsafe(e), n = t.head, i = 1;
                for (n.data.copy(r), e -= n.data.length; n = n.next; ) {
                  var o = n.data, s = e > o.length ? o.length : e;
                  if (o.copy(r, r.length - e, 0, s), 0 == (e -= s)) {
                    s === o.length ? (++i, n.next ? t.head = n.next : t.head = t.tail = null) : (t.head = n, n.data = o.slice(s));
                    break;
                  }
                  ++i;
                }
                return t.length -= i, r;
              }(e, t), n;
            }(e, t.buffer, t.decoder), r);
            var r;
          }
          function R(e) {
            var t = e._readableState;
            if (t.length > 0) throw new Error('"endReadable()" called on non-empty stream');
            t.endEmitted || (t.ended = !0, i.nextTick(C, t, e));
          }
          function C(e, t) {
            e.endEmitted || 0 !== e.length || (e.endEmitted = !0, t.readable = !1, t.emit("end"));
          }
          function N(e, t) {
            for (var r = 0, n = e.length; r < n; r++) if (e[r] === t) return r;
            return -1;
          }
          v.prototype.read = function(e) {
            l("read", e), e = parseInt(e, 10);
            var t = this._readableState, r = e;
            if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && (t.length >= t.highWaterMark || t.ended)) return l("read: emitReadable", t.length, t.ended), 
            0 === t.length && t.ended ? R(this) : A(this), null;
            if (0 === (e = E(e, t)) && t.ended) return 0 === t.length && R(this), null;
            var n, i = t.needReadable;
            return l("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && l("length less than watermark", i = !0), 
            t.ended || t.reading ? l("reading or ended", i = !1) : i && (l("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), 
            this._read(t.highWaterMark), t.sync = !1, t.reading || (e = E(r, t))), null === (n = e > 0 ? T(e, t) : null) ? (t.needReadable = !0, 
            e = 0) : t.length -= e, 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && R(this)), null !== n && this.emit("data", n), 
            n;
          }, v.prototype._read = function(e) {
            this.emit("error", new Error("_read() is not implemented"));
          }, v.prototype.pipe = function(e, t) {
            var r = this, o = this._readableState;
            switch (o.pipesCount) {
             case 0:
              o.pipes = e;
              break;

             case 1:
              o.pipes = [ o.pipes, e ];
              break;

             default:
              o.pipes.push(e);
            }
            o.pipesCount += 1, l("pipe count=%d opts=%j", o.pipesCount, t);
            var c = t && !1 === t.end || e === n.stdout || e === n.stderr ? m : f;
            function f() {
              l("onend"), e.end();
            }
            o.endEmitted ? i.nextTick(c) : r.once("end", c), e.on("unpipe", (function t(n, i) {
              l("onunpipe"), n === r && i && !1 === i.hasUnpiped && (i.hasUnpiped = !0, l("cleanup"), e.removeListener("close", y), e.removeListener("finish", g), 
              e.removeListener("drain", u), e.removeListener("error", b), e.removeListener("unpipe", t), r.removeListener("end", f), r.removeListener("end", m), 
              r.removeListener("data", p), h = !0, !o.awaitDrain || e._writableState && !e._writableState.needDrain || u());
            }));
            var u = function(e) {
              return function() {
                var t = e._readableState;
                l("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && a(e, "data") && (t.flowing = !0, I(e));
              };
            }(r);
            e.on("drain", u);
            var h = !1, d = !1;
            function p(t) {
              l("ondata"), d = !1, !1 !== e.write(t) || d || ((1 === o.pipesCount && o.pipes === e || o.pipesCount > 1 && -1 !== N(o.pipes, e)) && !h && (l("false write response, pause", r._readableState.awaitDrain), 
              r._readableState.awaitDrain++, d = !0), r.pause());
            }
            function b(t) {
              l("onerror", t), m(), e.removeListener("error", b), 0 === a(e, "error") && e.emit("error", t);
            }
            function y() {
              e.removeListener("finish", g), m();
            }
            function g() {
              l("onfinish"), e.removeListener("close", y), m();
            }
            function m() {
              l("unpipe"), r.unpipe(e);
            }
            return r.on("data", p), function(e, t, r) {
              if ("function" == typeof e.prependListener) return e.prependListener(t, r);
              e._events && e._events.error ? s(e._events.error) ? e._events.error.unshift(r) : e._events.error = [ r, e._events.error ] : e.on(t, r);
            }(e, "error", b), e.once("close", y), e.once("finish", g), e.emit("pipe", r), o.flowing || (l("pipe resume"), r.resume()), 
            e;
          }, v.prototype.unpipe = function(e) {
            var t = this._readableState, r = {
              hasUnpiped: !1
            };
            if (0 === t.pipesCount) return this;
            if (1 === t.pipesCount) return e && e !== t.pipes || (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, 
            e && e.emit("unpipe", this, r)), this;
            if (!e) {
              var n = t.pipes, i = t.pipesCount;
              t.pipes = null, t.pipesCount = 0, t.flowing = !1;
              for (var o = 0; o < i; o++) n[o].emit("unpipe", this, r);
              return this;
            }
            var s = N(t.pipes, e);
            return -1 === s || (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r)), 
            this;
          }, v.prototype.on = function(e, t) {
            var r = c.prototype.on.call(this, e, t);
            if ("data" === e) !1 !== this._readableState.flowing && this.resume(); else if ("readable" === e) {
              var n = this._readableState;
              n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.emittedReadable = !1, n.reading ? n.length && A(this) : i.nextTick(O, this));
            }
            return r;
          }, v.prototype.addListener = v.prototype.on, v.prototype.resume = function() {
            var e = this._readableState;
            return e.flowing || (l("resume"), e.flowing = !0, function(e, t) {
              t.resumeScheduled || (t.resumeScheduled = !0, i.nextTick(M, e, t));
            }(this, e)), this;
          }, v.prototype.pause = function() {
            return l("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (l("pause"), this._readableState.flowing = !1, 
            this.emit("pause")), this;
          }, v.prototype.wrap = function(e) {
            var t = this, r = this._readableState, n = !1;
            for (var i in e.on("end", (function() {
              if (l("wrapped end"), r.decoder && !r.ended) {
                var e = r.decoder.end();
                e && e.length && t.push(e);
              }
              t.push(null);
            })), e.on("data", (function(i) {
              l("wrapped data"), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i || (r.objectMode || i && i.length) && (t.push(i) || (n = !0, 
              e.pause()));
            })), e) void 0 === this[i] && "function" == typeof e[i] && (this[i] = function(t) {
              return function() {
                return e[t].apply(e, arguments);
              };
            }(i));
            for (var o = 0; o < g.length; o++) e.on(g[o], this.emit.bind(this, g[o]));
            return this._read = function(t) {
              l("wrapped _read", t), n && (n = !1, e.resume());
            }, this;
          }, Object.defineProperty(v.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._readableState.highWaterMark;
            }
          }), v._fromList = T;
        },
        62: (e, t, r) => {
          "use strict";
          e.exports = s;
          var n = r(5867), i = Object.create(r(6497));
          function o(e, t) {
            var r = this._transformState;
            r.transforming = !1;
            var n = r.writecb;
            if (!n) return this.emit("error", new Error("write callback called multiple times"));
            r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);
            var i = this._readableState;
            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
          }
          function s(e) {
            if (!(this instanceof s)) return new s(e);
            n.call(this, e), this._transformState = {
              afterTransform: o.bind(this),
              needTransform: !1,
              transforming: !1,
              writecb: null,
              writechunk: null,
              writeencoding: null
            }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), 
            "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", a);
          }
          function a() {
            var e = this;
            "function" == typeof this._flush ? this._flush((function(t, r) {
              c(e, t, r);
            })) : c(this, null, null);
          }
          function c(e, t, r) {
            if (t) return e.emit("error", t);
            if (null != r && e.push(r), e._writableState.length) throw new Error("Calling transform done when ws.length != 0");
            if (e._transformState.transforming) throw new Error("Calling transform done when still transforming");
            return e.push(null);
          }
          i.inherits = r(5717), i.inherits(s, n), s.prototype.push = function(e, t) {
            return this._transformState.needTransform = !1, n.prototype.push.call(this, e, t);
          }, s.prototype._transform = function(e, t, r) {
            throw new Error("_transform() is not implemented");
          }, s.prototype._write = function(e, t, r) {
            var n = this._transformState;
            if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
              var i = this._readableState;
              (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
            }
          }, s.prototype._read = function(e) {
            var t = this._transformState;
            null !== t.writechunk && t.writecb && !t.transforming ? (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = !0;
          }, s.prototype._destroy = function(e, t) {
            var r = this;
            n.prototype._destroy.call(this, e, (function(e) {
              t(e), r.emit("close");
            }));
          };
        },
        759: (e, t, r) => {
          "use strict";
          var n = r(4155), i = r(8212);
          function o(e) {
            var t = this;
            this.next = null, this.entry = null, this.finish = function() {
              !function(e, t, r) {
                var n = e.entry;
                for (e.entry = null; n; ) {
                  var i = n.callback;
                  t.pendingcb--, i(void 0), n = n.next;
                }
                t.corkedRequestsFree ? t.corkedRequestsFree.next = e : t.corkedRequestsFree = e;
              }(t, e);
            };
          }
          e.exports = g;
          var s, a = !n.browser && [ "v0.10", "v0.9." ].indexOf(n.version.slice(0, 5)) > -1 ? setImmediate : i.nextTick;
          g.WritableState = y;
          var c = Object.create(r(6497));
          c.inherits = r(5717);
          var f, u = {
            deprecate: r(4927)
          }, h = r(4104), d = r(4591).Buffer, l = r.g.Uint8Array || function() {}, p = r(5513);
          function b() {}
          function y(e, t) {
            s = s || r(5867), e = e || {};
            var n = t instanceof s;
            this.objectMode = !!e.objectMode, n && (this.objectMode = this.objectMode || !!e.writableObjectMode);
            var c = e.highWaterMark, f = e.writableHighWaterMark, u = this.objectMode ? 16 : 16384;
            this.highWaterMark = c || 0 === c ? c : n && (f || 0 === f) ? f : u, this.highWaterMark = Math.floor(this.highWaterMark), 
            this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
            var h = !1 === e.decodeStrings;
            this.decodeStrings = !h, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, 
            this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(e) {
              !function(e, t) {
                var r = e._writableState, n = r.sync, o = r.writecb;
                if (function(e) {
                  e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
                }(r), t) !function(e, t, r, n, o) {
                  --t.pendingcb, r ? (i.nextTick(o, n), i.nextTick(E, e, t), e._writableState.errorEmitted = !0, e.emit("error", n)) : (o(n), 
                  e._writableState.errorEmitted = !0, e.emit("error", n), E(e, t));
                }(e, r, n, t, o); else {
                  var s = _(r);
                  s || r.corked || r.bufferProcessing || !r.bufferedRequest || w(e, r), n ? a(v, e, r, s, o) : v(e, r, s, o);
                }
              }(t, e);
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, 
            this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new o(this);
          }
          function g(e) {
            if (s = s || r(5867), !(f.call(g, this) || this instanceof s)) return new g(e);
            this._writableState = new y(e, this), this.writable = !0, e && ("function" == typeof e.write && (this._write = e.write), 
            "function" == typeof e.writev && (this._writev = e.writev), "function" == typeof e.destroy && (this._destroy = e.destroy), 
            "function" == typeof e.final && (this._final = e.final)), h.call(this);
          }
          function m(e, t, r, n, i, o, s) {
            t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;
          }
          function v(e, t, r, n) {
            r || function(e, t) {
              0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));
            }(e, t), t.pendingcb--, n(), E(e, t);
          }
          function w(e, t) {
            t.bufferProcessing = !0;
            var r = t.bufferedRequest;
            if (e._writev && r && r.next) {
              var n = t.bufferedRequestCount, i = new Array(n), s = t.corkedRequestsFree;
              s.entry = r;
              for (var a = 0, c = !0; r; ) i[a] = r, r.isBuf || (c = !1), r = r.next, a += 1;
              i.allBuffers = c, m(e, t, !0, t.length, i, "", s.finish), t.pendingcb++, t.lastBufferedRequest = null, s.next ? (t.corkedRequestsFree = s.next, 
              s.next = null) : t.corkedRequestsFree = new o(t), t.bufferedRequestCount = 0;
            } else {
              for (;r; ) {
                var f = r.chunk, u = r.encoding, h = r.callback;
                if (m(e, t, !1, t.objectMode ? 1 : f.length, f, u, h), r = r.next, t.bufferedRequestCount--, t.writing) break;
              }
              null === r && (t.lastBufferedRequest = null);
            }
            t.bufferedRequest = r, t.bufferProcessing = !1;
          }
          function _(e) {
            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;
          }
          function S(e, t) {
            e._final((function(r) {
              t.pendingcb--, r && e.emit("error", r), t.prefinished = !0, e.emit("prefinish"), E(e, t);
            }));
          }
          function E(e, t) {
            var r = _(t);
            return r && (function(e, t) {
              t.prefinished || t.finalCalled || ("function" == typeof e._final ? (t.pendingcb++, t.finalCalled = !0, i.nextTick(S, e, t)) : (t.prefinished = !0, 
              e.emit("prefinish")));
            }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"))), r;
          }
          c.inherits(g, h), y.prototype.getBuffer = function() {
            for (var e = this.bufferedRequest, t = []; e; ) t.push(e), e = e.next;
            return t;
          }, function() {
            try {
              Object.defineProperty(y.prototype, "buffer", {
                get: u.deprecate((function() {
                  return this.getBuffer();
                }), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
              });
            } catch (e) {}
          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (f = Function.prototype[Symbol.hasInstance], 
          Object.defineProperty(g, Symbol.hasInstance, {
            value: function(e) {
              return !!f.call(this, e) || this === g && e && e._writableState instanceof y;
            }
          })) : f = function(e) {
            return e instanceof this;
          }, g.prototype.pipe = function() {
            this.emit("error", new Error("Cannot pipe, not readable"));
          }, g.prototype.write = function(e, t, r) {
            var n, o = this._writableState, s = !1, a = !o.objectMode && (n = e, d.isBuffer(n) || n instanceof l);
            return a && !d.isBuffer(e) && (e = function(e) {
              return d.from(e);
            }(e)), "function" == typeof t && (r = t, t = null), a ? t = "buffer" : t || (t = o.defaultEncoding), "function" != typeof r && (r = b), 
            o.ended ? function(e, t) {
              var r = new Error("write after end");
              e.emit("error", r), i.nextTick(t, r);
            }(this, r) : (a || function(e, t, r, n) {
              var o = !0, s = !1;
              return null === r ? s = new TypeError("May not write null values to stream") : "string" == typeof r || void 0 === r || t.objectMode || (s = new TypeError("Invalid non-string/buffer chunk")), 
              s && (e.emit("error", s), i.nextTick(n, s), o = !1), o;
            }(this, o, e, r)) && (o.pendingcb++, s = function(e, t, r, n, i, o) {
              if (!r) {
                var s = function(e, t, r) {
                  return e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = d.from(t, r)), t;
                }(t, n, i);
                n !== s && (r = !0, i = "buffer", n = s);
              }
              var a = t.objectMode ? 1 : n.length;
              t.length += a;
              var c = t.length < t.highWaterMark;
              if (c || (t.needDrain = !0), t.writing || t.corked) {
                var f = t.lastBufferedRequest;
                t.lastBufferedRequest = {
                  chunk: n,
                  encoding: i,
                  isBuf: r,
                  callback: o,
                  next: null
                }, f ? f.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
              } else m(e, t, !1, a, n, i, o);
              return c;
            }(this, o, a, e, t, r)), s;
          }, g.prototype.cork = function() {
            this._writableState.corked++;
          }, g.prototype.uncork = function() {
            var e = this._writableState;
            e.corked && (e.corked--, e.writing || e.corked || e.finished || e.bufferProcessing || !e.bufferedRequest || w(this, e));
          }, g.prototype.setDefaultEncoding = function(e) {
            if ("string" == typeof e && (e = e.toLowerCase()), !([ "hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw" ].indexOf((e + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + e);
            return this._writableState.defaultEncoding = e, this;
          }, Object.defineProperty(g.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._writableState.highWaterMark;
            }
          }), g.prototype._write = function(e, t, r) {
            r(new Error("_write() is not implemented"));
          }, g.prototype._writev = null, g.prototype.end = function(e, t, r) {
            var n = this._writableState;
            "function" == typeof e ? (r = e, e = null, t = null) : "function" == typeof t && (r = t, t = null), null != e && this.write(e, t), 
            n.corked && (n.corked = 1, this.uncork()), n.ending || n.finished || function(e, t, r) {
              t.ending = !0, E(e, t), r && (t.finished ? i.nextTick(r) : e.once("finish", r)), t.ended = !0, e.writable = !1;
            }(this, n, r);
          }, Object.defineProperty(g.prototype, "destroyed", {
            get: function() {
              return void 0 !== this._writableState && this._writableState.destroyed;
            },
            set: function(e) {
              this._writableState && (this._writableState.destroyed = e);
            }
          }), g.prototype.destroy = p.destroy, g.prototype._undestroy = p.undestroy, g.prototype._destroy = function(e, t) {
            this.end(), t(e);
          };
        },
        3912: (e, t, r) => {
          "use strict";
          var n = r(4591).Buffer, i = r(522);
          e.exports = function() {
            function e() {
              !function(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
              }(this, e), this.head = null, this.tail = null, this.length = 0;
            }
            return e.prototype.push = function(e) {
              var t = {
                data: e,
                next: null
              };
              this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;
            }, e.prototype.unshift = function(e) {
              var t = {
                data: e,
                next: this.head
              };
              0 === this.length && (this.tail = t), this.head = t, ++this.length;
            }, e.prototype.shift = function() {
              if (0 !== this.length) {
                var e = this.head.data;
                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
              }
            }, e.prototype.clear = function() {
              this.head = this.tail = null, this.length = 0;
            }, e.prototype.join = function(e) {
              if (0 === this.length) return "";
              for (var t = this.head, r = "" + t.data; t = t.next; ) r += e + t.data;
              return r;
            }, e.prototype.concat = function(e) {
              if (0 === this.length) return n.alloc(0);
              if (1 === this.length) return this.head.data;
              for (var t, r, i = n.allocUnsafe(e >>> 0), o = this.head, s = 0; o; ) t = i, r = s, o.data.copy(t, r), s += o.data.length, 
              o = o.next;
              return i;
            }, e;
          }(), i && i.inspect && i.inspect.custom && (e.exports.prototype[i.inspect.custom] = function() {
            var e = i.inspect({
              length: this.length
            });
            return this.constructor.name + " " + e;
          });
        },
        5513: (e, t, r) => {
          "use strict";
          var n = r(8212);
          function i(e, t) {
            e.emit("error", t);
          }
          e.exports = {
            destroy: function(e, t) {
              var r = this, o = this._readableState && this._readableState.destroyed, s = this._writableState && this._writableState.destroyed;
              return o || s ? (t ? t(e) : !e || this._writableState && this._writableState.errorEmitted || n.nextTick(i, this, e), this) : (this._readableState && (this._readableState.destroyed = !0), 
              this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, (function(e) {
                !t && e ? (n.nextTick(i, r, e), r._writableState && (r._writableState.errorEmitted = !0)) : t && t(e);
              })), this);
            },
            undestroy: function() {
              this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, 
              this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, 
              this._writableState.ending = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
            }
          };
        },
        4104: (e, t, r) => {
          e.exports = r(7187).EventEmitter;
        },
        6801: (e, t, r) => {
          (t = e.exports = r(2442)).Stream = t, t.Readable = t, t.Writable = r(759), t.Duplex = r(5867), t.Transform = r(62), t.PassThrough = r(3431);
        },
        4591: (e, t, r) => {
          var n = r(8764), i = n.Buffer;
          function o(e, t) {
            for (var r in e) t[r] = e[r];
          }
          function s(e, t, r) {
            return i(e, t, r);
          }
          i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? e.exports = n : (o(n, t), t.Buffer = s), o(i, s), s.from = function(e, t, r) {
            if ("number" == typeof e) throw new TypeError("Argument must not be a number");
            return i(e, t, r);
          }, s.alloc = function(e, t, r) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            var n = i(e);
            return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
          }, s.allocUnsafe = function(e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return i(e);
          }, s.allocUnsafeSlow = function(e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return n.SlowBuffer(e);
          };
        },
        7989: (e, t, r) => {
          "use strict";
          var n = r(4591).Buffer, i = n.isEncoding || function(e) {
            switch ((e = "" + e) && e.toLowerCase()) {
             case "hex":
             case "utf8":
             case "utf-8":
             case "ascii":
             case "binary":
             case "base64":
             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
             case "raw":
              return !0;

             default:
              return !1;
            }
          };
          function o(e) {
            var t;
            switch (this.encoding = function(e) {
              var t = function(e) {
                if (!e) return "utf8";
                for (var t; ;) switch (e) {
                 case "utf8":
                 case "utf-8":
                  return "utf8";

                 case "ucs2":
                 case "ucs-2":
                 case "utf16le":
                 case "utf-16le":
                  return "utf16le";

                 case "latin1":
                 case "binary":
                  return "latin1";

                 case "base64":
                 case "ascii":
                 case "hex":
                  return e;

                 default:
                  if (t) return;
                  e = ("" + e).toLowerCase(), t = !0;
                }
              }(e);
              if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
              return t || e;
            }(e), this.encoding) {
             case "utf16le":
              this.text = c, this.end = f, t = 4;
              break;

             case "utf8":
              this.fillLast = a, t = 4;
              break;

             case "base64":
              this.text = u, this.end = h, t = 3;
              break;

             default:
              return this.write = d, void (this.end = l);
            }
            this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
          }
          function s(e) {
            return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;
          }
          function a(e) {
            var t = this.lastTotal - this.lastNeed, r = function(e, t, r) {
              if (128 != (192 & t[0])) return e.lastNeed = 0, "�";
              if (e.lastNeed > 1 && t.length > 1) {
                if (128 != (192 & t[1])) return e.lastNeed = 1, "�";
                if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";
              }
            }(this, e);
            return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), 
            void (this.lastNeed -= e.length));
          }
          function c(e, t) {
            if ((e.length - t) % 2 == 0) {
              var r = e.toString("utf16le", t);
              if (r) {
                var n = r.charCodeAt(r.length - 1);
                if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], 
                r.slice(0, -1);
              }
              return r;
            }
            return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
          }
          function f(e) {
            var t = e && e.length ? this.write(e) : "";
            if (this.lastNeed) {
              var r = this.lastTotal - this.lastNeed;
              return t + this.lastChar.toString("utf16le", 0, r);
            }
            return t;
          }
          function u(e, t) {
            var r = (e.length - t) % 3;
            return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], 
            this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
          }
          function h(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
          }
          function d(e) {
            return e.toString(this.encoding);
          }
          function l(e) {
            return e && e.length ? this.write(e) : "";
          }
          t.s = o, o.prototype.write = function(e) {
            if (0 === e.length) return "";
            var t, r;
            if (this.lastNeed) {
              if (void 0 === (t = this.fillLast(e))) return "";
              r = this.lastNeed, this.lastNeed = 0;
            } else r = 0;
            return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
          }, o.prototype.end = function(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + "�" : t;
          }, o.prototype.text = function(e, t) {
            var r = function(e, t, r) {
              var n = t.length - 1;
              if (n < r) return 0;
              var i = s(t[n]);
              return i >= 0 ? (i > 0 && (e.lastNeed = i - 1), i) : --n < r || -2 === i ? 0 : (i = s(t[n])) >= 0 ? (i > 0 && (e.lastNeed = i - 2), 
              i) : --n < r || -2 === i ? 0 : (i = s(t[n])) >= 0 ? (i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i) : 0;
            }(this, e, t);
            if (!this.lastNeed) return e.toString("utf8", t);
            this.lastTotal = r;
            var n = e.length - (r - this.lastNeed);
            return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
          }, o.prototype.fillLast = function(e) {
            if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
            e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
          };
        },
        4650: (e, t, r) => {
          var n = r(4155), i = r(6801).Transform, o = r(9539).inherits, s = r(7529);
          function a(e) {
            i.call(this, e), this._destroyed = !1;
          }
          function c(e, t, r) {
            r(null, e);
          }
          function f(e) {
            return function(t, r, n) {
              return "function" == typeof t && (n = r, r = t, t = {}), "function" != typeof r && (r = c), "function" != typeof n && (n = null), 
              e(t, r, n);
            };
          }
          o(a, i), a.prototype.destroy = function(e) {
            if (!this._destroyed) {
              this._destroyed = !0;
              var t = this;
              n.nextTick((function() {
                e && t.emit("error", e), t.emit("close");
              }));
            }
          }, e.exports = f((function(e, t, r) {
            var n = new a(e);
            return n._transform = t, r && (n._flush = r), n;
          })), e.exports.ctor = f((function(e, t, r) {
            function n(t) {
              if (!(this instanceof n)) return new n(t);
              this.options = s(e, t), a.call(this, this.options);
            }
            return o(n, a), n.prototype._transform = t, r && (n.prototype._flush = r), n;
          })), e.exports.obj = f((function(e, t, r) {
            var n = new a(s({
              objectMode: !0,
              highWaterMark: 16
            }, e));
            return n._transform = t, r && (n._flush = r), n;
          }));
        },
        2511: function(e, t, r) {
          var n;
          e = r.nmd(e), function(i) {
            t && t.nodeType, e && e.nodeType;
            var o = "object" == typeof r.g && r.g;
            o.global !== o && o.window !== o && o.self;
            var s, a = 2147483647, c = 36, f = /^xn--/, u = /[^\x20-\x7E]/, h = /[\x2E\u3002\uFF0E\uFF61]/g, d = {
              overflow: "Overflow: input needs wider integers to process",
              "not-basic": "Illegal input >= 0x80 (not a basic code point)",
              "invalid-input": "Invalid input"
            }, l = Math.floor, p = String.fromCharCode;
            function b(e) {
              throw RangeError(d[e]);
            }
            function y(e, t) {
              for (var r = e.length, n = []; r--; ) n[r] = t(e[r]);
              return n;
            }
            function g(e, t) {
              var r = e.split("@"), n = "";
              return r.length > 1 && (n = r[0] + "@", e = r[1]), n + y((e = e.replace(h, ".")).split("."), t).join(".");
            }
            function m(e) {
              for (var t, r, n = [], i = 0, o = e.length; i < o; ) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), 
              i--) : n.push(t);
              return n;
            }
            function v(e) {
              return y(e, (function(e) {
                var t = "";
                return e > 65535 && (t += p((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t + p(e);
              })).join("");
            }
            function w(e, t) {
              return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
            }
            function _(e, t, r) {
              var n = 0;
              for (e = r ? l(e / 700) : e >> 1, e += l(e / t); e > 455; n += c) e = l(e / 35);
              return l(n + 36 * e / (e + 38));
            }
            function S(e) {
              var t, r, n, i, o, s, f, u, h, d, p, y = [], g = e.length, m = 0, w = 128, S = 72;
              for ((r = e.lastIndexOf("-")) < 0 && (r = 0), n = 0; n < r; ++n) e.charCodeAt(n) >= 128 && b("not-basic"), y.push(e.charCodeAt(n));
              for (i = r > 0 ? r + 1 : 0; i < g; ) {
                for (o = m, s = 1, f = c; i >= g && b("invalid-input"), ((u = (p = e.charCodeAt(i++)) - 48 < 10 ? p - 22 : p - 65 < 26 ? p - 65 : p - 97 < 26 ? p - 97 : c) >= c || u > l((a - m) / s)) && b("overflow"), 
                m += u * s, !(u < (h = f <= S ? 1 : f >= S + 26 ? 26 : f - S)); f += c) s > l(a / (d = c - h)) && b("overflow"), s *= d;
                S = _(m - o, t = y.length + 1, 0 == o), l(m / t) > a - w && b("overflow"), w += l(m / t), m %= t, y.splice(m++, 0, w);
              }
              return v(y);
            }
            function E(e) {
              var t, r, n, i, o, s, f, u, h, d, y, g, v, S, E, A = [];
              for (g = (e = m(e)).length, t = 128, r = 0, o = 72, s = 0; s < g; ++s) (y = e[s]) < 128 && A.push(p(y));
              for (n = i = A.length, i && A.push("-"); n < g; ) {
                for (f = a, s = 0; s < g; ++s) (y = e[s]) >= t && y < f && (f = y);
                for (f - t > l((a - r) / (v = n + 1)) && b("overflow"), r += (f - t) * v, t = f, s = 0; s < g; ++s) if ((y = e[s]) < t && ++r > a && b("overflow"), 
                y == t) {
                  for (u = r, h = c; !(u < (d = h <= o ? 1 : h >= o + 26 ? 26 : h - o)); h += c) E = u - d, S = c - d, A.push(p(w(d + E % S, 0))), 
                  u = l(E / S);
                  A.push(p(w(u, 0))), o = _(r, v, n == i), r = 0, ++n;
                }
                ++r, ++t;
              }
              return A.join("");
            }
            s = {
              version: "1.3.2",
              ucs2: {
                decode: m,
                encode: v
              },
              decode: S,
              encode: E,
              toASCII: function(e) {
                return g(e, (function(e) {
                  return u.test(e) ? "xn--" + E(e) : e;
                }));
              },
              toUnicode: function(e) {
                return g(e, (function(e) {
                  return f.test(e) ? S(e.slice(4).toLowerCase()) : e;
                }));
              }
            }, void 0 === (n = function() {
              return s;
            }.call(t, r, t, e)) || (e.exports = n);
          }();
        },
        8575: (e, t, r) => {
          "use strict";
          var n = r(2511), i = r(2502);
          function o() {
            this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, 
            this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
          }
          t.parse = v, t.resolve = function(e, t) {
            return v(e, !1, !0).resolve(t);
          }, t.resolveObject = function(e, t) {
            return e ? v(e, !1, !0).resolveObject(t) : t;
          }, t.format = function(e) {
            return i.isString(e) && (e = v(e)), e instanceof o ? e.format() : o.prototype.format.call(e);
          }, t.Url = o;
          var s = /^([a-z0-9.+-]+:)/i, a = /:[0-9]*$/, c = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, f = [ "{", "}", "|", "\\", "^", "`" ].concat([ "<", ">", '"', "`", " ", "\r", "\n", "\t" ]), u = [ "'" ].concat(f), h = [ "%", "/", "?", ";", "#" ].concat(u), d = [ "/", "?", "#" ], l = /^[+a-z0-9A-Z_-]{0,63}$/, p = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, b = {
            javascript: !0,
            "javascript:": !0
          }, y = {
            javascript: !0,
            "javascript:": !0
          }, g = {
            http: !0,
            https: !0,
            ftp: !0,
            gopher: !0,
            file: !0,
            "http:": !0,
            "https:": !0,
            "ftp:": !0,
            "gopher:": !0,
            "file:": !0
          }, m = r(7673);
          function v(e, t, r) {
            if (e && i.isObject(e) && e instanceof o) return e;
            var n = new o;
            return n.parse(e, t, r), n;
          }
          o.prototype.parse = function(e, t, r) {
            if (!i.isString(e)) throw new TypeError("Parameter 'url' must be a string, not " + typeof e);
            var o = e.indexOf("?"), a = -1 !== o && o < e.indexOf("#") ? "?" : "#", f = e.split(a);
            f[0] = f[0].replace(/\\/g, "/");
            var v = e = f.join(a);
            if (v = v.trim(), !r && 1 === e.split("#").length) {
              var w = c.exec(v);
              if (w) return this.path = v, this.href = v, this.pathname = w[1], w[2] ? (this.search = w[2], this.query = t ? m.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", 
              this.query = {}), this;
            }
            var _ = s.exec(v);
            if (_) {
              var S = (_ = _[0]).toLowerCase();
              this.protocol = S, v = v.substr(_.length);
            }
            if (r || _ || v.match(/^\/\/[^@\/]+@[^@\/]+/)) {
              var E = "//" === v.substr(0, 2);
              !E || _ && y[_] || (v = v.substr(2), this.slashes = !0);
            }
            if (!y[_] && (E || _ && !g[_])) {
              for (var A, x, k = -1, P = 0; P < d.length; P++) -1 !== (O = v.indexOf(d[P])) && (-1 === k || O < k) && (k = O);
              for (-1 !== (x = -1 === k ? v.lastIndexOf("@") : v.lastIndexOf("@", k)) && (A = v.slice(0, x), v = v.slice(x + 1), this.auth = decodeURIComponent(A)), 
              k = -1, P = 0; P < h.length; P++) {
                var O;
                -1 !== (O = v.indexOf(h[P])) && (-1 === k || O < k) && (k = O);
              }
              -1 === k && (k = v.length), this.host = v.slice(0, k), v = v.slice(k), this.parseHost(), this.hostname = this.hostname || "";
              var M = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
              if (!M) for (var I = this.hostname.split(/\./), T = (P = 0, I.length); P < T; P++) {
                var R = I[P];
                if (R && !R.match(l)) {
                  for (var C = "", N = 0, j = R.length; N < j; N++) R.charCodeAt(N) > 127 ? C += "x" : C += R[N];
                  if (!C.match(l)) {
                    var B = I.slice(0, P), L = I.slice(P + 1), D = R.match(p);
                    D && (B.push(D[1]), L.unshift(D[2])), L.length && (v = "/" + L.join(".") + v), this.hostname = B.join(".");
                    break;
                  }
                }
              }
              this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), M || (this.hostname = n.toASCII(this.hostname));
              var U = this.port ? ":" + this.port : "", q = this.hostname || "";
              this.host = q + U, this.href += this.host, M && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== v[0] && (v = "/" + v));
            }
            if (!b[S]) for (P = 0, T = u.length; P < T; P++) {
              var F = u[P];
              if (-1 !== v.indexOf(F)) {
                var H = encodeURIComponent(F);
                H === F && (H = escape(F)), v = v.split(F).join(H);
              }
            }
            var z = v.indexOf("#");
            -1 !== z && (this.hash = v.substr(z), v = v.slice(0, z));
            var K = v.indexOf("?");
            if (-1 !== K ? (this.search = v.substr(K), this.query = v.substr(K + 1), t && (this.query = m.parse(this.query)), v = v.slice(0, K)) : t && (this.search = "", 
            this.query = {}), v && (this.pathname = v), g[S] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
              U = this.pathname || "";
              var V = this.search || "";
              this.path = U + V;
            }
            return this.href = this.format(), this;
          }, o.prototype.format = function() {
            var e = this.auth || "";
            e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");
            var t = this.protocol || "", r = this.pathname || "", n = this.hash || "", o = !1, s = "";
            this.host ? o = e + this.host : this.hostname && (o = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), 
            this.port && (o += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (s = m.stringify(this.query));
            var a = this.search || s && "?" + s || "";
            return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || g[t]) && !1 !== o ? (o = "//" + (o || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : o || (o = ""), 
            n && "#" !== n.charAt(0) && (n = "#" + n), a && "?" !== a.charAt(0) && (a = "?" + a), t + o + (r = r.replace(/[?#]/g, (function(e) {
              return encodeURIComponent(e);
            }))) + (a = a.replace("#", "%23")) + n;
          }, o.prototype.resolve = function(e) {
            return this.resolveObject(v(e, !1, !0)).format();
          }, o.prototype.resolveObject = function(e) {
            if (i.isString(e)) {
              var t = new o;
              t.parse(e, !1, !0), e = t;
            }
            for (var r = new o, n = Object.keys(this), s = 0; s < n.length; s++) {
              var a = n[s];
              r[a] = this[a];
            }
            if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;
            if (e.slashes && !e.protocol) {
              for (var c = Object.keys(e), f = 0; f < c.length; f++) {
                var u = c[f];
                "protocol" !== u && (r[u] = e[u]);
              }
              return g[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;
            }
            if (e.protocol && e.protocol !== r.protocol) {
              if (!g[e.protocol]) {
                for (var h = Object.keys(e), d = 0; d < h.length; d++) {
                  var l = h[d];
                  r[l] = e[l];
                }
                return r.href = r.format(), r;
              }
              if (r.protocol = e.protocol, e.host || y[e.protocol]) r.pathname = e.pathname; else {
                for (var p = (e.pathname || "").split("/"); p.length && !(e.host = p.shift()); ) ;
                e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== p[0] && p.unshift(""), p.length < 2 && p.unshift(""), r.pathname = p.join("/");
              }
              if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, 
              r.pathname || r.search) {
                var b = r.pathname || "", m = r.search || "";
                r.path = b + m;
              }
              return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
            }
            var v = r.pathname && "/" === r.pathname.charAt(0), w = e.host || e.pathname && "/" === e.pathname.charAt(0), _ = w || v || r.host && e.pathname, S = _, E = r.pathname && r.pathname.split("/") || [], A = (p = e.pathname && e.pathname.split("/") || [], 
            r.protocol && !g[r.protocol]);
            if (A && (r.hostname = "", r.port = null, r.host && ("" === E[0] ? E[0] = r.host : E.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, 
            e.port = null, e.host && ("" === p[0] ? p[0] = e.host : p.unshift(e.host)), e.host = null), _ = _ && ("" === p[0] || "" === E[0])), 
            w) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, 
            r.search = e.search, r.query = e.query, E = p; else if (p.length) E || (E = []), E.pop(), E = E.concat(p), r.search = e.search, 
            r.query = e.query; else if (!i.isNullOrUndefined(e.search)) return A && (r.hostname = r.host = E.shift(), (M = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = M.shift(), 
            r.host = r.hostname = M.shift())), r.search = e.search, r.query = e.query, i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), 
            r.href = r.format(), r;
            if (!E.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;
            for (var x = E.slice(-1)[0], k = (r.host || e.host || E.length > 1) && ("." === x || ".." === x) || "" === x, P = 0, O = E.length; O >= 0; O--) "." === (x = E[O]) ? E.splice(O, 1) : ".." === x ? (E.splice(O, 1), 
            P++) : P && (E.splice(O, 1), P--);
            if (!_ && !S) for (;P--; P) E.unshift("..");
            !_ || "" === E[0] || E[0] && "/" === E[0].charAt(0) || E.unshift(""), k && "/" !== E.join("/").substr(-1) && E.push("");
            var M, I = "" === E[0] || E[0] && "/" === E[0].charAt(0);
            return A && (r.hostname = r.host = I ? "" : E.length ? E.shift() : "", (M = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = M.shift(), 
            r.host = r.hostname = M.shift())), (_ = _ || r.host && E.length) && !I && E.unshift(""), E.length ? r.pathname = E.join("/") : (r.pathname = null, 
            r.path = null), i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), 
            r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
          }, o.prototype.parseHost = function() {
            var e = this.host, t = a.exec(e);
            t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);
          };
        },
        2502: e => {
          "use strict";
          e.exports = {
            isString: function(e) {
              return "string" == typeof e;
            },
            isObject: function(e) {
              return "object" == typeof e && null !== e;
            },
            isNull: function(e) {
              return null === e;
            },
            isNullOrUndefined: function(e) {
              return null == e;
            }
          };
        },
        7458: (e, t) => {
          !function(e) {
            var t, r, n, i = String.fromCharCode;
            function o(e) {
              for (var t, r, n = [], i = 0, o = e.length; i < o; ) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), 
              i--) : n.push(t);
              return n;
            }
            function s(e) {
              if (e >= 55296 && e <= 57343) throw Error("Lone surrogate U+" + e.toString(16).toUpperCase() + " is not a scalar value");
            }
            function a(e, t) {
              return i(e >> t & 63 | 128);
            }
            function c(e) {
              if (0 == (4294967168 & e)) return i(e);
              var t = "";
              return 0 == (4294965248 & e) ? t = i(e >> 6 & 31 | 192) : 0 == (4294901760 & e) ? (s(e), t = i(e >> 12 & 15 | 224), t += a(e, 6)) : 0 == (4292870144 & e) && (t = i(e >> 18 & 7 | 240), 
              t += a(e, 12), t += a(e, 6)), t + i(63 & e | 128);
            }
            function f() {
              if (n >= r) throw Error("Invalid byte index");
              var e = 255 & t[n];
              if (n++, 128 == (192 & e)) return 63 & e;
              throw Error("Invalid continuation byte");
            }
            function u() {
              var e, i;
              if (n > r) throw Error("Invalid byte index");
              if (n == r) return !1;
              if (e = 255 & t[n], n++, 0 == (128 & e)) return e;
              if (192 == (224 & e)) {
                if ((i = (31 & e) << 6 | f()) >= 128) return i;
                throw Error("Invalid continuation byte");
              }
              if (224 == (240 & e)) {
                if ((i = (15 & e) << 12 | f() << 6 | f()) >= 2048) return s(i), i;
                throw Error("Invalid continuation byte");
              }
              if (240 == (248 & e) && (i = (7 & e) << 18 | f() << 12 | f() << 6 | f()) >= 65536 && i <= 1114111) return i;
              throw Error("Invalid UTF-8 detected");
            }
            e.version = "3.0.0", e.encode = function(e) {
              for (var t = o(e), r = t.length, n = -1, i = ""; ++n < r; ) i += c(t[n]);
              return i;
            }, e.decode = function(e) {
              t = o(e), r = t.length, n = 0;
              for (var s, a = []; !1 !== (s = u()); ) a.push(s);
              return function(e) {
                for (var t, r = e.length, n = -1, o = ""; ++n < r; ) (t = e[n]) > 65535 && (o += i((t -= 65536) >>> 10 & 1023 | 55296), 
                t = 56320 | 1023 & t), o += i(t);
                return o;
              }(a);
            };
          }(t);
        },
        4927: (e, t, r) => {
          function i(e) {
            try {
              if (!r.g.localStorage) return !1;
            } catch (e) {
              return !1;
            }
            var t = r.g.localStorage[e];
            return null != t && "true" === String(t).toLowerCase();
          }
          e.exports = function(e, t) {
            if (i("noDeprecation")) return e;
            var r = !1;
            return function() {
              if (!r) {
                if (i("throwDeprecation")) throw new Error(t);
                i("traceDeprecation") ? n.trace(t) : n.warn(t), r = !0;
              }
              return e.apply(this, arguments);
            };
          };
        },
        384: e => {
          e.exports = function(e) {
            return e && "object" == typeof e && "function" == typeof e.copy && "function" == typeof e.fill && "function" == typeof e.readUInt8;
          };
        },
        5955: (e, t, r) => {
          "use strict";
          var n = r(2584), i = r(8662), o = r(6430), s = r(5692);
          function a(e) {
            return e.call.bind(e);
          }
          var c = "undefined" != typeof BigInt, f = "undefined" != typeof Symbol, u = a(Object.prototype.toString), h = a(Number.prototype.valueOf), d = a(String.prototype.valueOf), l = a(Boolean.prototype.valueOf);
          if (c) var p = a(BigInt.prototype.valueOf);
          if (f) var b = a(Symbol.prototype.valueOf);
          function y(e, t) {
            if ("object" != typeof e) return !1;
            try {
              return t(e), !0;
            } catch (e) {
              return !1;
            }
          }
          function g(e) {
            return "[object Map]" === u(e);
          }
          function m(e) {
            return "[object Set]" === u(e);
          }
          function v(e) {
            return "[object WeakMap]" === u(e);
          }
          function w(e) {
            return "[object WeakSet]" === u(e);
          }
          function _(e) {
            return "[object ArrayBuffer]" === u(e);
          }
          function S(e) {
            return "undefined" != typeof ArrayBuffer && (_.working ? _(e) : e instanceof ArrayBuffer);
          }
          function E(e) {
            return "[object DataView]" === u(e);
          }
          function A(e) {
            return "undefined" != typeof DataView && (E.working ? E(e) : e instanceof DataView);
          }
          t.isArgumentsObject = n, t.isGeneratorFunction = i, t.isTypedArray = s, t.isPromise = function(e) {
            return "undefined" != typeof Promise && e instanceof Promise || null !== e && "object" == typeof e && "function" == typeof e.then && "function" == typeof e.catch;
          }, t.isArrayBufferView = function(e) {
            return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e) : s(e) || A(e);
          }, t.isUint8Array = function(e) {
            return "Uint8Array" === o(e);
          }, t.isUint8ClampedArray = function(e) {
            return "Uint8ClampedArray" === o(e);
          }, t.isUint16Array = function(e) {
            return "Uint16Array" === o(e);
          }, t.isUint32Array = function(e) {
            return "Uint32Array" === o(e);
          }, t.isInt8Array = function(e) {
            return "Int8Array" === o(e);
          }, t.isInt16Array = function(e) {
            return "Int16Array" === o(e);
          }, t.isInt32Array = function(e) {
            return "Int32Array" === o(e);
          }, t.isFloat32Array = function(e) {
            return "Float32Array" === o(e);
          }, t.isFloat64Array = function(e) {
            return "Float64Array" === o(e);
          }, t.isBigInt64Array = function(e) {
            return "BigInt64Array" === o(e);
          }, t.isBigUint64Array = function(e) {
            return "BigUint64Array" === o(e);
          }, g.working = "undefined" != typeof Map && g(new Map), t.isMap = function(e) {
            return "undefined" != typeof Map && (g.working ? g(e) : e instanceof Map);
          }, m.working = "undefined" != typeof Set && m(new Set), t.isSet = function(e) {
            return "undefined" != typeof Set && (m.working ? m(e) : e instanceof Set);
          }, v.working = "undefined" != typeof WeakMap && v(new WeakMap), t.isWeakMap = function(e) {
            return "undefined" != typeof WeakMap && (v.working ? v(e) : e instanceof WeakMap);
          }, w.working = "undefined" != typeof WeakSet && w(new WeakSet), t.isWeakSet = function(e) {
            return w(e);
          }, _.working = "undefined" != typeof ArrayBuffer && _(new ArrayBuffer), t.isArrayBuffer = S, E.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && E(new DataView(new ArrayBuffer(1), 0, 1)), 
          t.isDataView = A;
          var x = "undefined" != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;
          function k(e) {
            return "[object SharedArrayBuffer]" === u(e);
          }
          function P(e) {
            return void 0 !== x && (void 0 === k.working && (k.working = k(new x)), k.working ? k(e) : e instanceof x);
          }
          function O(e) {
            return y(e, h);
          }
          function M(e) {
            return y(e, d);
          }
          function I(e) {
            return y(e, l);
          }
          function T(e) {
            return c && y(e, p);
          }
          function R(e) {
            return f && y(e, b);
          }
          t.isSharedArrayBuffer = P, t.isAsyncFunction = function(e) {
            return "[object AsyncFunction]" === u(e);
          }, t.isMapIterator = function(e) {
            return "[object Map Iterator]" === u(e);
          }, t.isSetIterator = function(e) {
            return "[object Set Iterator]" === u(e);
          }, t.isGeneratorObject = function(e) {
            return "[object Generator]" === u(e);
          }, t.isWebAssemblyCompiledModule = function(e) {
            return "[object WebAssembly.Module]" === u(e);
          }, t.isNumberObject = O, t.isStringObject = M, t.isBooleanObject = I, t.isBigIntObject = T, t.isSymbolObject = R, t.isBoxedPrimitive = function(e) {
            return O(e) || M(e) || I(e) || T(e) || R(e);
          }, t.isAnyArrayBuffer = function(e) {
            return "undefined" != typeof Uint8Array && (S(e) || P(e));
          }, [ "isProxy", "isExternal", "isModuleNamespaceObject" ].forEach((function(e) {
            Object.defineProperty(t, e, {
              enumerable: !1,
              value: function() {
                throw new Error(e + " is not supported in userland");
              }
            });
          }));
        },
        9539: (e, t, r) => {
          var i = r(4155), o = Object.getOwnPropertyDescriptors || function(e) {
            for (var t = Object.keys(e), r = {}, n = 0; n < t.length; n++) r[t[n]] = Object.getOwnPropertyDescriptor(e, t[n]);
            return r;
          }, s = /%[sdj%]/g;
          t.format = function(e) {
            if (!w(e)) {
              for (var t = [], r = 0; r < arguments.length; r++) t.push(u(arguments[r]));
              return t.join(" ");
            }
            r = 1;
            for (var n = arguments, i = n.length, o = String(e).replace(s, (function(e) {
              if ("%%" === e) return "%";
              if (r >= i) return e;
              switch (e) {
               case "%s":
                return String(n[r++]);

               case "%d":
                return Number(n[r++]);

               case "%j":
                try {
                  return JSON.stringify(n[r++]);
                } catch (e) {
                  return "[Circular]";
                }

               default:
                return e;
              }
            })), a = n[r]; r < i; a = n[++r]) m(a) || !E(a) ? o += " " + a : o += " " + u(a);
            return o;
          }, t.deprecate = function(e, r) {
            if (void 0 !== i && !0 === i.noDeprecation) return e;
            if (void 0 === i) return function() {
              return t.deprecate(e, r).apply(this, arguments);
            };
            var o = !1;
            return function() {
              if (!o) {
                if (i.throwDeprecation) throw new Error(r);
                i.traceDeprecation ? n.trace(r) : n.error(r), o = !0;
              }
              return e.apply(this, arguments);
            };
          };
          var a = {}, c = /^$/;
          if (i.env.NODE_DEBUG) {
            var f = i.env.NODE_DEBUG;
            f = f.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), c = new RegExp("^" + f + "$", "i");
          }
          function u(e, r) {
            var n = {
              seen: [],
              stylize: d
            };
            return arguments.length >= 3 && (n.depth = arguments[2]), arguments.length >= 4 && (n.colors = arguments[3]), g(r) ? n.showHidden = r : r && t._extend(n, r), 
            _(n.showHidden) && (n.showHidden = !1), _(n.depth) && (n.depth = 2), _(n.colors) && (n.colors = !1), _(n.customInspect) && (n.customInspect = !0), 
            n.colors && (n.stylize = h), l(n, e, n.depth);
          }
          function h(e, t) {
            var r = u.styles[t];
            return r ? "[" + u.colors[r][0] + "m" + e + "[" + u.colors[r][1] + "m" : e;
          }
          function d(e, t) {
            return e;
          }
          function l(e, r, n) {
            if (e.customInspect && r && k(r.inspect) && r.inspect !== t.inspect && (!r.constructor || r.constructor.prototype !== r)) {
              var i = r.inspect(n, e);
              return w(i) || (i = l(e, i, n)), i;
            }
            var o = function(e, t) {
              if (_(t)) return e.stylize("undefined", "undefined");
              if (w(t)) {
                var r = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return e.stylize(r, "string");
              }
              return v(t) ? e.stylize("" + t, "number") : g(t) ? e.stylize("" + t, "boolean") : m(t) ? e.stylize("null", "null") : void 0;
            }(e, r);
            if (o) return o;
            var s = Object.keys(r), a = function(e) {
              var t = {};
              return e.forEach((function(e, r) {
                t[e] = !0;
              })), t;
            }(s);
            if (e.showHidden && (s = Object.getOwnPropertyNames(r)), x(r) && (s.indexOf("message") >= 0 || s.indexOf("description") >= 0)) return p(r);
            if (0 === s.length) {
              if (k(r)) {
                var c = r.name ? ": " + r.name : "";
                return e.stylize("[Function" + c + "]", "special");
              }
              if (S(r)) return e.stylize(RegExp.prototype.toString.call(r), "regexp");
              if (A(r)) return e.stylize(Date.prototype.toString.call(r), "date");
              if (x(r)) return p(r);
            }
            var f, u = "", h = !1, d = [ "{", "}" ];
            return y(r) && (h = !0, d = [ "[", "]" ]), k(r) && (u = " [Function" + (r.name ? ": " + r.name : "") + "]"), S(r) && (u = " " + RegExp.prototype.toString.call(r)), 
            A(r) && (u = " " + Date.prototype.toUTCString.call(r)), x(r) && (u = " " + p(r)), 0 !== s.length || h && 0 != r.length ? n < 0 ? S(r) ? e.stylize(RegExp.prototype.toString.call(r), "regexp") : e.stylize("[Object]", "special") : (e.seen.push(r), 
            f = h ? function(e, t, r, n, i) {
              for (var o = [], s = 0, a = t.length; s < a; ++s) T(t, String(s)) ? o.push(b(e, t, r, n, String(s), !0)) : o.push("");
              return i.forEach((function(i) {
                i.match(/^\d+$/) || o.push(b(e, t, r, n, i, !0));
              })), o;
            }(e, r, n, a, s) : s.map((function(t) {
              return b(e, r, n, a, t, h);
            })), e.seen.pop(), function(e, t, r) {
              return e.reduce((function(e, t) {
                return t.indexOf("\n"), e + t.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }), 0) > 60 ? r[0] + ("" === t ? "" : t + "\n ") + " " + e.join(",\n  ") + " " + r[1] : r[0] + t + " " + e.join(", ") + " " + r[1];
            }(f, u, d)) : d[0] + u + d[1];
          }
          function p(e) {
            return "[" + Error.prototype.toString.call(e) + "]";
          }
          function b(e, t, r, n, i, o) {
            var s, a, c;
            if ((c = Object.getOwnPropertyDescriptor(t, i) || {
              value: t[i]
            }).get ? a = c.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : c.set && (a = e.stylize("[Setter]", "special")), 
            T(n, i) || (s = "[" + i + "]"), a || (e.seen.indexOf(c.value) < 0 ? (a = m(r) ? l(e, c.value, null) : l(e, c.value, r - 1)).indexOf("\n") > -1 && (a = o ? a.split("\n").map((function(e) {
              return "  " + e;
            })).join("\n").substr(2) : "\n" + a.split("\n").map((function(e) {
              return "   " + e;
            })).join("\n")) : a = e.stylize("[Circular]", "special")), _(s)) {
              if (o && i.match(/^\d+$/)) return a;
              (s = JSON.stringify("" + i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = e.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), 
              s = e.stylize(s, "string"));
            }
            return s + ": " + a;
          }
          function y(e) {
            return Array.isArray(e);
          }
          function g(e) {
            return "boolean" == typeof e;
          }
          function m(e) {
            return null === e;
          }
          function v(e) {
            return "number" == typeof e;
          }
          function w(e) {
            return "string" == typeof e;
          }
          function _(e) {
            return void 0 === e;
          }
          function S(e) {
            return E(e) && "[object RegExp]" === P(e);
          }
          function E(e) {
            return "object" == typeof e && null !== e;
          }
          function A(e) {
            return E(e) && "[object Date]" === P(e);
          }
          function x(e) {
            return E(e) && ("[object Error]" === P(e) || e instanceof Error);
          }
          function k(e) {
            return "function" == typeof e;
          }
          function P(e) {
            return Object.prototype.toString.call(e);
          }
          function O(e) {
            return e < 10 ? "0" + e.toString(10) : e.toString(10);
          }
          t.debuglog = function(e) {
            if (e = e.toUpperCase(), !a[e]) if (c.test(e)) {
              var r = i.pid;
              a[e] = function() {
                var i = t.format.apply(t, arguments);
                n.error("%s %d: %s", e, r, i);
              };
            } else a[e] = function() {};
            return a[e];
          }, t.inspect = u, u.colors = {
            bold: [ 1, 22 ],
            italic: [ 3, 23 ],
            underline: [ 4, 24 ],
            inverse: [ 7, 27 ],
            white: [ 37, 39 ],
            grey: [ 90, 39 ],
            black: [ 30, 39 ],
            blue: [ 34, 39 ],
            cyan: [ 36, 39 ],
            green: [ 32, 39 ],
            magenta: [ 35, 39 ],
            red: [ 31, 39 ],
            yellow: [ 33, 39 ]
          }, u.styles = {
            special: "cyan",
            number: "yellow",
            boolean: "yellow",
            undefined: "grey",
            null: "bold",
            string: "green",
            date: "magenta",
            regexp: "red"
          }, t.types = r(5955), t.isArray = y, t.isBoolean = g, t.isNull = m, t.isNullOrUndefined = function(e) {
            return null == e;
          }, t.isNumber = v, t.isString = w, t.isSymbol = function(e) {
            return "symbol" == typeof e;
          }, t.isUndefined = _, t.isRegExp = S, t.types.isRegExp = S, t.isObject = E, t.isDate = A, t.types.isDate = A, t.isError = x, 
          t.types.isNativeError = x, t.isFunction = k, t.isPrimitive = function(e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == typeof e || void 0 === e;
          }, t.isBuffer = r(384);
          var M = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
          function I() {
            var e = new Date, t = [ O(e.getHours()), O(e.getMinutes()), O(e.getSeconds()) ].join(":");
            return [ e.getDate(), M[e.getMonth()], t ].join(" ");
          }
          function T(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          t.log = function() {
            n.log("%s - %s", I(), t.format.apply(t, arguments));
          }, t.inherits = r(5717), t._extend = function(e, t) {
            if (!t || !E(t)) return e;
            for (var r = Object.keys(t), n = r.length; n--; ) e[r[n]] = t[r[n]];
            return e;
          };
          var R = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
          function C(e, t) {
            if (!e) {
              var r = new Error("Promise was rejected with a falsy value");
              r.reason = e, e = r;
            }
            return t(e);
          }
          t.promisify = function(e) {
            if ("function" != typeof e) throw new TypeError('The "original" argument must be of type Function');
            if (R && e[R]) {
              var t;
              if ("function" != typeof (t = e[R])) throw new TypeError('The "util.promisify.custom" argument must be of type Function');
              return Object.defineProperty(t, R, {
                value: t,
                enumerable: !1,
                writable: !1,
                configurable: !0
              }), t;
            }
            function t() {
              for (var t, r, n = new Promise((function(e, n) {
                t = e, r = n;
              })), i = [], o = 0; o < arguments.length; o++) i.push(arguments[o]);
              i.push((function(e, n) {
                e ? r(e) : t(n);
              }));
              try {
                e.apply(this, i);
              } catch (e) {
                r(e);
              }
              return n;
            }
            return Object.setPrototypeOf(t, Object.getPrototypeOf(e)), R && Object.defineProperty(t, R, {
              value: t,
              enumerable: !1,
              writable: !1,
              configurable: !0
            }), Object.defineProperties(t, o(e));
          }, t.promisify.custom = R, t.callbackify = function(e) {
            if ("function" != typeof e) throw new TypeError('The "original" argument must be of type Function');
            function t() {
              for (var t = [], r = 0; r < arguments.length; r++) t.push(arguments[r]);
              var n = t.pop();
              if ("function" != typeof n) throw new TypeError("The last argument must be of type Function");
              var o = this, s = function() {
                return n.apply(o, arguments);
              };
              e.apply(this, t).then((function(e) {
                i.nextTick(s.bind(null, null, e));
              }), (function(e) {
                i.nextTick(C.bind(null, e, s));
              }));
            }
            return Object.setPrototypeOf(t, Object.getPrototypeOf(e)), Object.defineProperties(t, o(e)), t;
          };
        },
        4928: e => {
          "use strict";
          e.exports = {
            ErrorResponse: function(e) {
              var t = e && e.error && e.error.message ? e.error.message : JSON.stringify(e), r = e.error && e.error.data ? e.error.data : null, n = new Error("Returned error: " + t);
              return n.data = r, n;
            },
            InvalidNumberOfParams: function(e, t, r) {
              return new Error('Invalid number of parameters for "' + r + '". Got ' + e + " expected " + t + "!");
            },
            InvalidConnection: function(e, t) {
              return this.ConnectionError("CONNECTION ERROR: Couldn't connect to node " + e + ".", t);
            },
            InvalidProvider: function() {
              return new Error("Provider not set or invalid");
            },
            InvalidResponse: function(e) {
              var t = e && e.error && e.error.message ? e.error.message : "Invalid JSON RPC response: " + JSON.stringify(e);
              return new Error(t);
            },
            ConnectionTimeout: function(e) {
              return new Error("CONNECTION TIMEOUT: timeout of " + e + " ms achived");
            },
            ConnectionNotOpenError: function(e) {
              return this.ConnectionError("connection not open on send()", e);
            },
            ConnectionCloseError: function(e) {
              return "object" == typeof e && e.code && e.reason ? this.ConnectionError("CONNECTION ERROR: The connection got closed with the close code `" + e.code + "` and the following reason string `" + e.reason + "`", e) : new Error("CONNECTION ERROR: The connection closed unexpectedly");
            },
            MaxAttemptsReachedOnReconnectingError: function() {
              return new Error("Maximum number of reconnect attempts reached!");
            },
            PendingRequestsOnReconnectingError: function() {
              return new Error("CONNECTION ERROR: Provider started to reconnect before the response got received!");
            },
            ConnectionError: function(e, t) {
              const r = new Error(e);
              return t && (r.code = t.code, r.reason = t.reason), r;
            },
            RevertInstructionError: function(e, t) {
              var r = new Error("Your request got reverted with the following reason string: " + e);
              return r.reason = e, r.signature = t, r;
            },
            TransactionRevertInstructionError: function(e, t, r) {
              var n = new Error("Transaction has been reverted by the EVM:\n" + JSON.stringify(r, null, 2));
              return n.reason = e, n.signature = t, n.receipt = r, n;
            },
            TransactionError: function(e, t) {
              var r = new Error(e);
              return r.receipt = t, r;
            },
            NoContractAddressFoundError: function(e) {
              return this.TransactionError("The transaction receipt didn't contain a contract address.", e);
            },
            ContractCodeNotStoredError: function(e) {
              return this.TransactionError("The contract code couldn't be stored, please check your gas limit.", e);
            },
            TransactionRevertedWithoutReasonError: function(e) {
              return this.TransactionError("Transaction has been reverted by the EVM:\n" + JSON.stringify(e, null, 2), e);
            },
            TransactionOutOfGasError: function(e) {
              return this.TransactionError("Transaction ran out of gas. Please provide more gas:\n" + JSON.stringify(e, null, 2), e);
            },
            ResolverMethodMissingError: function(e, t) {
              return new Error("The resolver at " + e + 'does not implement requested method: "' + t + '".');
            },
            ContractMissingABIError: function() {
              return new Error("You must provide the json interface of the contract when instantiating a contract object.");
            },
            ContractOnceRequiresCallbackError: function() {
              return new Error("Once requires a callback as the second parameter.");
            },
            ContractEventDoesNotExistError: function(e) {
              return new Error('Event "' + e + "\" doesn't exist in this contract.");
            },
            ContractReservedEventError: function(e) {
              return new Error('The event "' + e + "\" is a reserved event name, you can't use it.");
            },
            ContractMissingDeployDataError: function() {
              return new Error('No "data" specified in neither the given options, nor the default options.');
            },
            ContractNoAddressDefinedError: function() {
              return new Error("This contract object doesn't have address set yet, please set an address first.");
            },
            ContractNoFromAddressDefinedError: function() {
              return new Error('No "from" address specified in neither the given options, nor the default options.');
            }
          };
        },
        6267: (e, t, r) => {
          "use strict";
          var n = r(8269), i = r(4751), o = function(e) {
            return n.toBN(e).toString(10);
          }, s = function(e) {
            if (void 0 !== e) return function(e) {
              return "latest" === e || "pending" === e || "earliest" === e;
            }(e) ? e : "genesis" === e ? "0x0" : n.isHexStrict(e) ? "string" == typeof e ? e.toLowerCase() : e : n.numberToHex(e);
          }, a = function(e) {
            if (e.to && (e.to = u(e.to)), e.data && e.input) throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
            if (!e.data && e.input && (e.data = e.input, delete e.input), e.data && !e.data.startsWith("0x") && (e.data = "0x" + e.data), 
            e.data && !n.isHex(e.data)) throw new Error("The data field must be HEX encoded data.");
            return (e.gas || e.gasLimit) && (e.gas = e.gas || e.gasLimit), (e.maxPriorityFeePerGas || e.maxFeePerGas) && delete e.gasPrice, 
            [ "gasPrice", "gas", "value", "maxPriorityFeePerGas", "maxFeePerGas", "nonce" ].filter((function(t) {
              return void 0 !== e[t];
            })).forEach((function(t) {
              e[t] = n.numberToHex(e[t]);
            })), e;
          }, c = function(e) {
            return null !== e.blockNumber && (e.blockNumber = n.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = n.hexToNumber(e.transactionIndex)), 
            e.nonce = n.hexToNumber(e.nonce), e.gas = n.hexToNumber(e.gas), e.gasPrice && (e.gasPrice = o(e.gasPrice)), e.maxFeePerGas && (e.maxFeePerGas = o(e.maxFeePerGas)), 
            e.maxPriorityFeePerGas && (e.maxPriorityFeePerGas = o(e.maxPriorityFeePerGas)), e.type && (e.type = n.hexToNumber(e.type)), 
            e.value = o(e.value), e.to && n.isAddress(e.to) ? e.to = n.toChecksumAddress(e.to) : e.to = null, e.from && (e.from = n.toChecksumAddress(e.from)), 
            e;
          }, f = function(e) {
            if ("string" == typeof e.blockHash && "string" == typeof e.transactionHash && "string" == typeof e.logIndex) {
              var t = n.sha3(e.blockHash.replace("0x", "") + e.transactionHash.replace("0x", "") + e.logIndex.replace("0x", ""));
              e.id = "log_" + t.replace("0x", "").slice(0, 8);
            } else e.id || (e.id = null);
            return null !== e.blockNumber && (e.blockNumber = n.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = n.hexToNumber(e.transactionIndex)), 
            null !== e.logIndex && (e.logIndex = n.hexToNumber(e.logIndex)), e.address && (e.address = n.toChecksumAddress(e.address)), 
            e;
          }, u = function(e) {
            var t = new i(e);
            if (t.isValid() && t.isDirect()) return t.toAddress().toLowerCase();
            if (n.isAddress(e)) return "0x" + e.toLowerCase().replace("0x", "");
            throw new Error(`Provided address ${e} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);
          };
          e.exports = {
            inputDefaultBlockNumberFormatter: function(e) {
              return s(this && null == e ? this.defaultBlock : e);
            },
            inputBlockNumberFormatter: s,
            inputCallFormatter: function(e) {
              var t = (e = a(e)).from || (this ? this.defaultAccount : null);
              return t && (e.from = u(t)), e;
            },
            inputTransactionFormatter: function(e) {
              if ("number" != typeof (e = a(e)).from && (!e.from || "object" != typeof e.from)) {
                if (e.from = e.from || (this ? this.defaultAccount : null), !e.from && "number" != typeof e.from) throw new Error('The send transactions "from" field must be defined!');
                e.from = u(e.from);
              }
              return e;
            },
            inputAddressFormatter: u,
            inputPostFormatter: function(e) {
              return e.ttl && (e.ttl = n.numberToHex(e.ttl)), e.workToProve && (e.workToProve = n.numberToHex(e.workToProve)), e.priority && (e.priority = n.numberToHex(e.priority)), 
              Array.isArray(e.topics) || (e.topics = e.topics ? [ e.topics ] : []), e.topics = e.topics.map((function(e) {
                return 0 === e.indexOf("0x") ? e : n.fromUtf8(e);
              })), e;
            },
            inputLogFormatter: function(e) {
              var t = function(e) {
                return null == e ? null : 0 === (e = String(e)).indexOf("0x") ? e : n.fromUtf8(e);
              };
              return void 0 === e && (e = {}), void 0 === e.fromBlock && (e = {
                ...e,
                fromBlock: "latest"
              }), (e.fromBlock || 0 === e.fromBlock) && (e.fromBlock = s(e.fromBlock)), (e.toBlock || 0 === e.toBlock) && (e.toBlock = s(e.toBlock)), 
              e.topics = e.topics || [], e.topics = e.topics.map((function(e) {
                return Array.isArray(e) ? e.map(t) : t(e);
              })), t = null, e.address && (e.address = Array.isArray(e.address) ? e.address.map((function(e) {
                return u(e);
              })) : u(e.address)), e;
            },
            inputSignFormatter: function(e) {
              return n.isHexStrict(e) ? e : n.utf8ToHex(e);
            },
            inputStorageKeysFormatter: function(e) {
              return e.map(n.numberToHex);
            },
            outputProofFormatter: function(e) {
              return e.address = n.toChecksumAddress(e.address), e.nonce = n.hexToNumberString(e.nonce), e.balance = n.hexToNumberString(e.balance), 
              e;
            },
            outputBigNumberFormatter: o,
            outputTransactionFormatter: c,
            outputTransactionReceiptFormatter: function(e) {
              if ("object" != typeof e) throw new Error("Received receipt is invalid: " + e);
              return null !== e.blockNumber && (e.blockNumber = n.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = n.hexToNumber(e.transactionIndex)), 
              e.cumulativeGasUsed = n.hexToNumber(e.cumulativeGasUsed), e.gasUsed = n.hexToNumber(e.gasUsed), Array.isArray(e.logs) && (e.logs = e.logs.map(f)), 
              e.effectiveGasPrice && (e.effectiveGasPrice = n.hexToNumber(e.effectiveGasPrice)), e.contractAddress && (e.contractAddress = n.toChecksumAddress(e.contractAddress)), 
              void 0 !== e.status && null !== e.status && (e.status = Boolean(parseInt(e.status))), e;
            },
            outputBlockFormatter: function(e) {
              return e.gasLimit = n.hexToNumber(e.gasLimit), e.gasUsed = n.hexToNumber(e.gasUsed), e.size = n.hexToNumber(e.size), e.timestamp = n.hexToNumber(e.timestamp), 
              null !== e.number && (e.number = n.hexToNumber(e.number)), e.difficulty && (e.difficulty = o(e.difficulty)), e.totalDifficulty && (e.totalDifficulty = o(e.totalDifficulty)), 
              Array.isArray(e.transactions) && e.transactions.forEach((function(e) {
                if ("string" != typeof e) return c(e);
              })), e.miner && (e.miner = n.toChecksumAddress(e.miner)), e.baseFeePerGas && (e.baseFeePerGas = n.hexToNumber(e.baseFeePerGas)), 
              e;
            },
            outputLogFormatter: f,
            outputPostFormatter: function(e) {
              return e.expiry = n.hexToNumber(e.expiry), e.sent = n.hexToNumber(e.sent), e.ttl = n.hexToNumber(e.ttl), e.workProved = n.hexToNumber(e.workProved), 
              e.topics || (e.topics = []), e.topics = e.topics.map((function(e) {
                return n.toUtf8(e);
              })), e;
            },
            outputSyncingFormatter: function(e) {
              return e.startingBlock = n.hexToNumber(e.startingBlock), e.currentBlock = n.hexToNumber(e.currentBlock), e.highestBlock = n.hexToNumber(e.highestBlock), 
              e.knownStates && (e.knownStates = n.hexToNumber(e.knownStates), e.pulledStates = n.hexToNumber(e.pulledStates)), e;
            }
          };
        },
        4390: (e, t, r) => {
          "use strict";
          var n = r(4928), i = r(6267);
          e.exports = {
            errors: n,
            formatters: i
          };
        },
        3952: (e, t, r) => {
          "use strict";
          var n = r(4390).errors, i = r(4390).formatters, o = r(8269), s = r(4017), a = r(6602).subscriptions, c = r(5504), f = function(e) {
            if (!e.call || !e.name) throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
            this.name = e.name, this.call = e.call, this.params = e.params || 0, this.inputFormatter = e.inputFormatter, this.outputFormatter = e.outputFormatter, 
            this.transformPayload = e.transformPayload, this.extraFormatters = e.extraFormatters, this.abiCoder = e.abiCoder, this.requestManager = e.requestManager, 
            this.accounts = e.accounts, this.defaultBlock = e.defaultBlock || "latest", this.defaultAccount = e.defaultAccount || null, 
            this.transactionBlockTimeout = e.transactionBlockTimeout || 50, this.transactionConfirmationBlocks = e.transactionConfirmationBlocks || 24, 
            this.transactionPollingTimeout = e.transactionPollingTimeout || 750, this.transactionPollingInterval = e.transactionPollingInterval || 1e3, 
            this.blockHeaderTimeout = e.blockHeaderTimeout || 10, this.defaultCommon = e.defaultCommon, this.defaultChain = e.defaultChain, 
            this.defaultHardfork = e.defaultHardfork, this.handleRevert = e.handleRevert;
          };
          f.prototype.setRequestManager = function(e, t) {
            this.requestManager = e, t && (this.accounts = t);
          }, f.prototype.createFunction = function(e, t) {
            var r = this.buildCall();
            return Object.defineProperty(r, "call", {
              configurable: !0,
              writable: !0,
              value: this.call
            }), this.setRequestManager(e || this.requestManager, t || this.accounts), r;
          }, f.prototype.attachToObject = function(e) {
            var t = this.buildCall();
            Object.defineProperty(t, "call", {
              configurable: !0,
              writable: !0,
              value: this.call
            });
            var r = this.name.split(".");
            r.length > 1 ? (e[r[0]] = e[r[0]] || {}, e[r[0]][r[1]] = t) : e[r[0]] = t;
          }, f.prototype.getCall = function(e) {
            return "function" == typeof this.call ? this.call(e) : this.call;
          }, f.prototype.extractCallback = function(e) {
            if ("function" == typeof e[e.length - 1]) return e.pop();
          }, f.prototype.validateArgs = function(e) {
            if (e.length !== this.params) throw n.InvalidNumberOfParams(e.length, this.params, this.name);
          }, f.prototype.formatInput = function(e) {
            var t = this;
            return this.inputFormatter ? this.inputFormatter.map((function(r, n) {
              return r ? r.call(t, e[n]) : e[n];
            })) : e;
          }, f.prototype.formatOutput = function(e) {
            var t = this;
            return Array.isArray(e) ? e.map((function(e) {
              return t.outputFormatter && e ? t.outputFormatter(e) : e;
            })) : this.outputFormatter && e ? this.outputFormatter(e) : e;
          }, f.prototype.toPayload = function(e) {
            var t = this.getCall(e), r = this.extractCallback(e), n = this.formatInput(e);
            this.validateArgs(n);
            var i = {
              method: t,
              params: n,
              callback: r
            };
            return this.transformPayload && (i = this.transformPayload(i)), i;
          }, f.prototype._confirmTransaction = function(e, t, r) {
            var u = this, h = !1, d = !0, l = 0, p = 0, b = null, y = null, g = null, m = r.params[0] && "object" == typeof r.params[0] && r.params[0].gas ? r.params[0].gas : null, v = !!r.params[0] && "object" == typeof r.params[0] && r.params[0].data && r.params[0].from && !r.params[0].to, w = v && r.params[0].data.length > 2, _ = [ new f({
              name: "getBlockByNumber",
              call: "eth_getBlockByNumber",
              params: 2,
              inputFormatter: [ i.inputBlockNumberFormatter, function(e) {
                return !!e;
              } ],
              outputFormatter: i.outputBlockFormatter
            }), new f({
              name: "getTransactionReceipt",
              call: "eth_getTransactionReceipt",
              params: 1,
              inputFormatter: [ null ],
              outputFormatter: i.outputTransactionReceiptFormatter
            }), new f({
              name: "getCode",
              call: "eth_getCode",
              params: 2,
              inputFormatter: [ i.inputAddressFormatter, i.inputDefaultBlockNumberFormatter ]
            }), new f({
              name: "getTransactionByHash",
              call: "eth_getTransactionByHash",
              params: 1,
              inputFormatter: [ null ],
              outputFormatter: i.outputTransactionFormatter
            }), new a({
              name: "subscribe",
              type: "eth",
              subscriptions: {
                newBlockHeaders: {
                  subscriptionName: "newHeads",
                  params: 0,
                  outputFormatter: i.outputBlockFormatter
                }
              }
            }) ], S = {};
            _.forEach((e => {
              e.attachToObject(S), e.requestManager = u.requestManager;
            }));
            var E = function(a, f, _, E, A) {
              if (!_) return A || (A = {
                unsubscribe: function() {
                  clearInterval(b), clearTimeout(y);
                }
              }), (a ? s.resolve(a) : S.getTransactionReceipt(t)).catch((function(t) {
                A.unsubscribe(), h = !0, o._fireError({
                  message: "Failed to check for transaction receipt:",
                  data: t
                }, e.eventEmitter, e.reject);
              })).then((async function(t) {
                if (!t || !t.blockHash) throw new Error("Receipt missing or blockHash null");
                if (u.extraFormatters && u.extraFormatters.receiptFormatter && (t = u.extraFormatters.receiptFormatter(t)), e.eventEmitter.listeners("confirmation").length > 0) {
                  var r;
                  if (void 0 === a || 0 !== p) {
                    var n = await S.getBlockByNumber("latest"), i = n ? n.hash : null;
                    f ? g ? (r = await S.getBlockByNumber(g.number + 1)) && (g = r, e.eventEmitter.emit("confirmation", p, t, i)) : (r = await S.getBlockByNumber(t.blockNumber), 
                    g = r, e.eventEmitter.emit("confirmation", p, t, i)) : e.eventEmitter.emit("confirmation", p, t, i);
                  }
                  (f && r || !f) && p++, d = !1, p === u.transactionConfirmationBlocks + 1 && (A.unsubscribe(), e.eventEmitter.removeAllListeners());
                }
                return t;
              })).then((async function(t) {
                if (v && !h) {
                  if (!t.contractAddress) return d && (A.unsubscribe(), h = !0), void o._fireError(n.NoContractAddressFoundError(t), e.eventEmitter, e.reject, null, t);
                  var r;
                  try {
                    r = await S.getCode(t.contractAddress);
                  } catch (e) {}
                  if (!r) return;
                  !0 === t.status && w || r.length > 2 ? (e.eventEmitter.emit("receipt", t), u.extraFormatters && u.extraFormatters.contractDeployFormatter ? e.resolve(u.extraFormatters.contractDeployFormatter(t)) : e.resolve(t), 
                  d && e.eventEmitter.removeAllListeners()) : o._fireError(n.ContractCodeNotStoredError(t), e.eventEmitter, e.reject, null, t), 
                  d && A.unsubscribe(), h = !0;
                }
                return t;
              })).then((async function(t) {
                if (!v && !h) {
                  if (t.outOfGas || m && m === t.gasUsed || !0 !== t.status && "0x1" !== t.status && void 0 !== t.status) if (JSON.stringify(t, null, 2), 
                  !1 === t.status || "0x0" === t.status) try {
                    var s;
                    if (!u.handleRevert || "eth_sendTransaction" !== u.call && "eth_sendRawTransaction" !== u.call) throw !1;
                    var a = r.params[0];
                    if ("eth_sendRawTransaction" === u.call) {
                      var f = r.params[0], l = c.parse(f);
                      a = i.inputTransactionFormatter({
                        data: l.data,
                        to: l.to,
                        from: l.from,
                        gas: l.gasLimit.toHexString(),
                        gasPrice: l.gasPrice ? l.gasPrice.toHexString() : void 0,
                        value: l.value.toHexString()
                      });
                    }
                    if (!(s = await u.getRevertReason(a, t.blockNumber))) throw !1;
                    o._fireError(n.TransactionRevertInstructionError(s.reason, s.signature, t), e.eventEmitter, e.reject, null, t);
                  } catch (r) {
                    o._fireError(n.TransactionRevertedWithoutReasonError(t), e.eventEmitter, e.reject, null, t);
                  } else o._fireError(n.TransactionOutOfGasError(t), e.eventEmitter, e.reject, null, t); else e.eventEmitter.emit("receipt", t), 
                  e.resolve(t), d && e.eventEmitter.removeAllListeners();
                  d && A.unsubscribe(), h = !0;
                }
              })).catch((function() {
                l++, f ? l - 1 >= u.transactionPollingTimeout && (A.unsubscribe(), h = !0, o._fireError(n.TransactionError("Transaction was not mined within " + u.transactionPollingTimeout + " seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"), e.eventEmitter, e.reject)) : l - 1 >= u.transactionBlockTimeout && (A.unsubscribe(), 
                h = !0, o._fireError(n.TransactionError("Transaction was not mined within " + u.transactionBlockTimeout + " blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"), e.eventEmitter, e.reject));
              }));
              A.unsubscribe(), h = !0, o._fireError({
                message: "Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.",
                data: _
              }, e.eventEmitter, e.reject);
            }, A = function(e) {
              let t = !1;
              const r = () => {
                b = setInterval(E.bind(null, e, !0), u.transactionPollingInterval);
              };
              if (!this.requestManager.provider.on) return r();
              S.subscribe("newBlockHeaders", (function(n, i, o) {
                if (t = !0, n || !i) return r();
                E(e, !1, n, 0, o);
              })), y = setTimeout((() => {
                t || r();
              }), 1e3 * this.blockHeaderTimeout);
            }.bind(this);
            S.getTransactionReceipt(t).then((function(t) {
              t && t.blockHash ? (e.eventEmitter.listeners("confirmation").length > 0 && A(t), E(t, !1)) : h || A();
            })).catch((function() {
              h || A();
            }));
          };
          var u = function(e, t) {
            return "number" == typeof e ? t.wallet[e] : e && "object" == typeof e && e.address && e.privateKey ? e : t.wallet[e.toLowerCase()];
          };
          function h(e, t) {
            return new Promise(((r, n) => {
              try {
                var i = new f({
                  name: "getBlockByNumber",
                  call: "eth_getBlockByNumber",
                  params: 2,
                  inputFormatter: [ function(e) {
                    return e ? o.toHex(e) : "latest";
                  }, function() {
                    return !1;
                  } ]
                }).createFunction(e.requestManager), s = new f({
                  name: "getGasPrice",
                  call: "eth_gasPrice",
                  params: 0
                }).createFunction(e.requestManager);
                Promise.all([ i(), s() ]).then((e => {
                  const [n, i] = e;
                  if (("0x2" === t.type || void 0 === t.type) && n && n.baseFeePerGas) {
                    let e, i;
                    t.gasPrice ? (e = t.gasPrice, i = t.gasPrice, delete t.gasPrice) : (e = t.maxPriorityFeePerGas || "0x9502F900", i = t.maxFeePerGas || o.toHex(o.toBN(n.baseFeePerGas).mul(o.toBN(2)).add(o.toBN(e)))), 
                    r({
                      maxFeePerGas: i,
                      maxPriorityFeePerGas: e
                    });
                  } else {
                    if (t.maxPriorityFeePerGas || t.maxFeePerGas) throw Error("Network doesn't support eip-1559");
                    r({
                      gasPrice: i
                    });
                  }
                }));
              } catch (e) {
                n(e);
              }
            }));
          }
          f.prototype.buildCall = function() {
            var e = this, t = "eth_sendTransaction" === e.call || "eth_sendRawTransaction" === e.call, r = "eth_call" === e.call, i = function() {
              var i = s(!t), a = e.toPayload(Array.prototype.slice.call(arguments)), c = function(s, c) {
                var f;
                if (e.handleRevert && r && e.abiCoder && (!s && e.isRevertReasonString(c) ? f = c.substring(10) : s && s.data && (f = s.data.substring(10)), 
                f)) {
                  var u = e.abiCoder.decodeParameter("string", "0x" + f), h = "Error(String)";
                  o._fireError(n.RevertInstructionError(u, h), i.eventEmitter, i.reject, a.callback, {
                    reason: u,
                    signature: h
                  });
                } else {
                  try {
                    c = e.formatOutput(c);
                  } catch (e) {
                    s = e;
                  }
                  if (c instanceof Error && (s = c), s) return s.error && (s = s.error), o._fireError(s, i.eventEmitter, i.reject, a.callback);
                  a.callback && a.callback(null, c), t ? (i.eventEmitter.emit("transactionHash", c), e._confirmTransaction(i, c, a)) : s || i.resolve(c);
                }
              }, f = function(t) {
                var r = {
                  ...a,
                  method: "eth_sendRawTransaction",
                  params: [ t.rawTransaction ]
                };
                e.requestManager.send(r, c);
              }, d = function(e, t) {
                var r;
                if (t && t.accounts && t.accounts.wallet && t.accounts.wallet.length) if ("eth_sendTransaction" === e.method) {
                  var n = e.params[0];
                  if ((r = u(n && "object" == typeof n ? n.from : null, t.accounts)) && r.privateKey) return delete (n = JSON.parse(JSON.stringify(n))).from, 
                  t.defaultChain && !n.chain && (n.chain = t.defaultChain), t.defaultHardfork && !n.hardfork && (n.hardfork = t.defaultHardfork), 
                  t.defaultCommon && !n.common && (n.common = t.defaultCommon), void t.accounts.signTransaction(n, r.privateKey).then(f).catch((function(e) {
                    if ("function" == typeof i.eventEmitter.listeners && i.eventEmitter.listeners("error").length) {
                      try {
                        i.eventEmitter.emit("error", e);
                      } catch (e) {}
                      i.eventEmitter.removeAllListeners(), i.eventEmitter.catch((function() {}));
                    }
                    i.reject(e);
                  }));
                } else if ("eth_sign" === e.method) {
                  var o = e.params[1];
                  if ((r = u(e.params[0], t.accounts)) && r.privateKey) {
                    var s = t.accounts.sign(o, r.privateKey);
                    return e.callback && e.callback(null, s.signature), void i.resolve(s.signature);
                  }
                }
                return t.requestManager.send(e, c);
              };
              return t && a.params[0] && "object" == typeof a.params[0] && void 0 === a.params[0].gasPrice && (void 0 === a.params[0].maxPriorityFeePerGas || void 0 === a.params[0].maxFeePerGas) ? h(e, a.params[0]).then((r => {
                void 0 !== r.gasPrice ? a.params[0].gasPrice = r.gasPrice : void 0 !== r.maxPriorityFeePerGas && void 0 !== r.maxFeePerGas && (a.params[0].maxPriorityFeePerGas = r.maxPriorityFeePerGas, 
                a.params[0].maxFeePerGas = r.maxFeePerGas), t && setTimeout((() => {
                  i.eventEmitter.emit("sending", a);
                }), 0), d(a, e);
              })) : (t && setTimeout((() => {
                i.eventEmitter.emit("sending", a);
              }), 0), d(a, e)), t && setTimeout((() => {
                i.eventEmitter.emit("sent", a);
              }), 0), i.eventEmitter;
            };
            return i.method = e, i.request = this.request.bind(this), i;
          }, f.prototype.getRevertReason = function(e, t) {
            var r = this;
            return new Promise((function(n, i) {
              new f({
                name: "call",
                call: "eth_call",
                params: 2,
                abiCoder: r.abiCoder,
                handleRevert: !0
              }).createFunction(r.requestManager)(e, o.numberToHex(t)).then((function() {
                n(!1);
              })).catch((function(e) {
                e.reason ? n({
                  reason: e.reason,
                  signature: e.signature
                }) : i(e);
              }));
            }));
          }, f.prototype.isRevertReasonString = function(e) {
            return "string" == typeof e && (e.length - 2) / 2 % 32 == 4 && "0x08c379a0" === e.substring(0, 10);
          }, f.prototype.request = function() {
            var e = this.toPayload(Array.prototype.slice.call(arguments));
            return e.format = this.formatOutput.bind(this), e;
          }, e.exports = f;
        },
        4017: (e, t, r) => {
          "use strict";
          var n = r(6729), i = function(e) {
            var t, r, i = new Promise((function() {
              t = arguments[0], r = arguments[1];
            }));
            if (e) return {
              resolve: t,
              reject: r,
              eventEmitter: i
            };
            var o = new n;
            return i._events = o._events, i.emit = o.emit, i.on = o.on, i.once = o.once, i.off = o.off, i.listeners = o.listeners, i.addListener = o.addListener, 
            i.removeListener = o.removeListener, i.removeAllListeners = o.removeAllListeners, {
              resolve: t,
              reject: r,
              eventEmitter: i
            };
          };
          i.resolve = function(e) {
            var t = i(!0);
            return t.resolve(e), t.eventEmitter;
          }, e.exports = i;
        },
        8991: (e, t, r) => {
          "use strict";
          var n = r(8911), i = r(4390).errors, o = function(e) {
            this.requestManager = e, this.requests = [];
          };
          o.prototype.add = function(e) {
            this.requests.push(e);
          }, o.prototype.execute = function() {
            var e = this.requests, t = this._sortResponses.bind(this);
            this.requestManager.sendBatch(e, (function(r, o) {
              o = t(o), e.map((function(e, t) {
                return o[t] || {};
              })).forEach((function(t, r) {
                if (e[r].callback) {
                  if (t && t.error) return e[r].callback(i.ErrorResponse(t));
                  if (!n.isValidResponse(t)) return e[r].callback(i.InvalidResponse(t));
                  try {
                    e[r].callback(null, e[r].format ? e[r].format(t.result) : t.result);
                  } catch (t) {
                    e[r].callback(t);
                  }
                }
              }));
            }));
          }, o.prototype._sortResponses = function(e) {
            return (e || []).sort(((e, t) => e.id - t.id));
          }, e.exports = o;
        },
        2319: e => {
          "use strict";
          var t = null, r = "object" == typeof globalThis ? globalThis : void 0;
          if (!r) try {
            r = Function("return this")();
          } catch (e) {
            r = self;
          }
          void 0 !== r.ethereum ? t = r.ethereum : void 0 !== r.web3 && r.web3.currentProvider && (r.web3.currentProvider.sendAsync && (r.web3.currentProvider.send = r.web3.currentProvider.sendAsync, 
          delete r.web3.currentProvider.sendAsync), !r.web3.currentProvider.on && r.web3.currentProvider.connection && "ipcProviderWrapper" === r.web3.currentProvider.connection.constructor.name && (r.web3.currentProvider.on = function(e, t) {
            if ("function" != typeof t) throw new Error("The second parameter callback must be a function.");
            "data" === e ? this.connection.on("data", (function(e) {
              var r = "";
              e = e.toString();
              try {
                r = JSON.parse(e);
              } catch (r) {
                return t(new Error("Couldn't parse response data" + e));
              }
              r.id || -1 === r.method.indexOf("_subscription") || t(null, r);
            })) : this.connection.on(e, t);
          }), t = r.web3.currentProvider), e.exports = t;
        },
        4983: (e, t, r) => {
          "use strict";
          const {callbackify: n} = r(9539);
          var i = r(4390).errors, o = r(8911), s = r(8991), a = r(2319), c = function e(t, r) {
            this.provider = null, this.providers = e.providers, this.setProvider(t, r), this.subscriptions = new Map;
          };
          c.givenProvider = a, c.providers = {
            WebsocketProvider: r(1227),
            HttpProvider: r(4351),
            IpcProvider: r(1227)
          }, c.prototype.setProvider = function(e, t) {
            var r = this;
            if (e && "string" == typeof e && this.providers) if (/^http(s)?:\/\//i.test(e)) e = new this.providers.HttpProvider(e); else if (/^ws(s)?:\/\//i.test(e)) e = new this.providers.WebsocketProvider(e); else if (e && "object" == typeof t && "function" == typeof t.connect) e = new this.providers.IpcProvider(e, t); else if (e) throw new Error("Can't autodetect provider for \"" + e + '"');
            if (this.provider && this.provider.connected && this.clearSubscriptions(), this.provider = e || null, this.provider && this.provider.on) {
              "function" == typeof e.request ? this.provider.on("message", (function(e) {
                if (e && "eth_subscription" === e.type && e.data) {
                  const t = e.data;
                  t.subscription && r.subscriptions.has(t.subscription) && r.subscriptions.get(t.subscription).callback(null, t.result);
                }
              })) : this.provider.on("data", (function(e, t) {
                (e = e || t).method && e.params && e.params.subscription && r.subscriptions.has(e.params.subscription) && r.subscriptions.get(e.params.subscription).callback(null, e.params.result);
              })), this.provider.on("connect", (function() {
                r.subscriptions.forEach((function(e) {
                  e.subscription.resubscribe();
                }));
              })), this.provider.on("error", (function(e) {
                r.subscriptions.forEach((function(t) {
                  t.callback(e);
                }));
              }));
              const t = function(e) {
                r._isCleanCloseEvent(e) && !r._isIpcCloseError(e) || (r.subscriptions.forEach((function(t) {
                  t.callback(i.ConnectionCloseError(e)), r.subscriptions.delete(t.subscription.id);
                })), r.provider && r.provider.emit && r.provider.emit("error", i.ConnectionCloseError(e))), r.provider && r.provider.emit && r.provider.emit("end", e);
              };
              this.provider.on("disconnect", t);
            }
          }, c.prototype.send = function(e, t) {
            if (t = t || function() {}, !this.provider) return t(i.InvalidProvider());
            const {method: r, params: s} = e, a = o.toPayload(r, s), c = this._jsonrpcResultCallback(t, a);
            if (this.provider.request) n(this.provider.request.bind(this.provider))({
              method: r,
              params: s
            }, t); else if (this.provider.sendAsync) this.provider.sendAsync(a, c); else {
              if (!this.provider.send) throw new Error("Provider does not have a request or send method to use.");
              this.provider.send(a, c);
            }
          }, c.prototype.sendBatch = function(e, t) {
            if (!this.provider) return t(i.InvalidProvider());
            var r = o.toBatchPayload(e);
            this.provider[this.provider.sendAsync ? "sendAsync" : "send"](r, (function(e, r) {
              return e ? t(e) : Array.isArray(r) ? void t(null, r) : t(i.InvalidResponse(r));
            }));
          }, c.prototype.addSubscription = function(e, t) {
            if (!this.provider.on) throw new Error("The provider doesn't support subscriptions: " + this.provider.constructor.name);
            this.subscriptions.set(e.id, {
              callback: t,
              subscription: e
            });
          }, c.prototype.removeSubscription = function(e, t) {
            if (this.subscriptions.has(e)) {
              var r = this.subscriptions.get(e).subscription.options.type;
              return this.subscriptions.delete(e), void this.send({
                method: r + "_unsubscribe",
                params: [ e ]
              }, t);
            }
            "function" == typeof t && t(null);
          }, c.prototype.clearSubscriptions = function(e) {
            try {
              var t = this;
              return this.subscriptions.size > 0 && this.subscriptions.forEach((function(r, n) {
                e && "syncing" === r.name || t.removeSubscription(n);
              })), this.provider.reset && this.provider.reset(), !0;
            } catch (e) {
              throw new Error(`Error while clearing subscriptions: ${e}`);
            }
          }, c.prototype._isCleanCloseEvent = function(e) {
            return "object" == typeof e && ([ 1e3 ].includes(e.code) || !0 === e.wasClean);
          }, c.prototype._isIpcCloseError = function(e) {
            return "boolean" == typeof e && e;
          }, c.prototype._jsonrpcResultCallback = function(e, t) {
            return function(r, n) {
              return n && n.id && t.id !== n.id ? e(new Error(`Wrong response id ${n.id} (expected: ${t.id}) in ${JSON.stringify(t)}`)) : r ? e(r) : n && n.error ? e(i.ErrorResponse(n)) : o.isValidResponse(n) ? void e(null, n.result) : e(i.InvalidResponse(n));
            };
          }, e.exports = {
            Manager: c,
            BatchManager: s
          };
        },
        8911: e => {
          "use strict";
          var t = {
            messageId: 0,
            toPayload: function(e, r) {
              if (!e) throw new Error('JSONRPC method should be specified for params: "' + JSON.stringify(r) + '"!');
              return t.messageId++, {
                jsonrpc: "2.0",
                id: t.messageId,
                method: e,
                params: r || []
              };
            },
            isValidResponse: function(e) {
              return Array.isArray(e) ? e.every(t) : t(e);
              function t(e) {
                return !(!e || e.error || "2.0" !== e.jsonrpc || "number" != typeof e.id && "string" != typeof e.id || void 0 === e.result);
              }
            },
            toBatchPayload: function(e) {
              return e.map((function(e) {
                return t.toPayload(e.method, e.params);
              }));
            }
          };
          e.exports = t;
        },
        6602: (e, t, r) => {
          "use strict";
          var i = r(5826), o = function(e) {
            this.name = e.name, this.type = e.type, this.subscriptions = e.subscriptions || {}, this.requestManager = null;
          };
          o.prototype.setRequestManager = function(e) {
            this.requestManager = e;
          }, o.prototype.attachToObject = function(e) {
            var t = this.buildCall(), r = this.name.split(".");
            r.length > 1 ? (e[r[0]] = e[r[0]] || {}, e[r[0]][r[1]] = t) : e[r[0]] = t;
          }, o.prototype.buildCall = function() {
            var e = this;
            return function() {
              e.subscriptions[arguments[0]] || n.warn("Subscription " + JSON.stringify(arguments[0]) + " doesn't exist. Subscribing anyway.");
              var t = new i({
                subscription: e.subscriptions[arguments[0]] || {},
                requestManager: e.requestManager,
                type: e.type
              });
              return t.subscribe.apply(t, arguments);
            };
          }, e.exports = {
            subscriptions: o,
            subscription: i
          };
        },
        5826: (e, t, r) => {
          "use strict";
          var n = r(4390).errors, i = r(6729), o = r(4390).formatters;
          function s(e) {
            return e;
          }
          function a(e) {
            i.call(this), this.id = null, this.callback = s, this.arguments = null, this.lastBlock = null, this.options = {
              subscription: e.subscription,
              type: e.type,
              requestManager: e.requestManager
            };
          }
          a.prototype = Object.create(i.prototype), a.prototype.constructor = a, a.prototype._extractCallback = function(e) {
            if ("function" == typeof e[e.length - 1]) return e.pop();
          }, a.prototype._validateArgs = function(e) {
            var t = this.options.subscription;
            if (t || (t = {}), t.params || (t.params = 0), e.length !== t.params) throw n.InvalidNumberOfParams(e.length, t.params, t.subscriptionName);
          }, a.prototype._formatInput = function(e) {
            var t = this.options.subscription;
            return t && t.inputFormatter ? t.inputFormatter.map((function(t, r) {
              return t ? t(e[r]) : e[r];
            })) : e;
          }, a.prototype._formatOutput = function(e) {
            var t = this.options.subscription;
            return t && t.outputFormatter && e ? t.outputFormatter(e) : e;
          }, a.prototype._toPayload = function(e) {
            var t = [];
            if (this.callback = this._extractCallback(e) || s, this.subscriptionMethod || (this.subscriptionMethod = e.shift(), this.options.subscription.subscriptionName && (this.subscriptionMethod = this.options.subscription.subscriptionName)), 
            this.arguments || (this.arguments = this._formatInput(e), this._validateArgs(this.arguments), e = []), t.push(this.subscriptionMethod), 
            t = t.concat(this.arguments), e.length) throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");
            return {
              method: this.options.type + "_subscribe",
              params: t
            };
          }, a.prototype.unsubscribe = function(e) {
            this.options.requestManager.removeSubscription(this.id, e), this.id = null, this.lastBlock = null, this.removeAllListeners();
          }, a.prototype.subscribe = function() {
            var e = this, t = Array.prototype.slice.call(arguments), r = this._toPayload(t);
            if (!r) return this;
            if (!this.options.requestManager.provider) return setTimeout((function() {
              var t = new Error("No provider set.");
              e.callback(t, null, e), e.emit("error", t);
            }), 0), this;
            if (!this.options.requestManager.provider.on) return setTimeout((function() {
              var t = new Error("The current provider doesn't support subscriptions: " + e.options.requestManager.provider.constructor.name);
              e.callback(t, null, e), e.emit("error", t);
            }), 0), this;
            if (this.lastBlock && this.options.params && "object" == typeof this.options.params && (r.params[1] = this.options.params, 
            r.params[1].fromBlock = o.inputBlockNumberFormatter(this.lastBlock + 1)), this.id && this.unsubscribe(), this.options.params = r.params[1], 
            "logs" === r.params[0] && r.params[1] && "object" == typeof r.params[1] && r.params[1].hasOwnProperty("fromBlock") && isFinite(r.params[1].fromBlock)) {
              var n = Object.assign({}, r.params[1]);
              this.options.requestManager.send({
                method: "eth_getLogs",
                params: [ n ]
              }, (function(t, r) {
                t ? setTimeout((function() {
                  e.callback(t, null, e), e.emit("error", t);
                }), 0) : r.forEach((function(t) {
                  var r = e._formatOutput(t);
                  e.callback(null, r, e), e.emit("data", r);
                }));
              }));
            }
            return "object" == typeof r.params[1] && delete r.params[1].fromBlock, this.options.requestManager.send(r, (function(t, n) {
              !t && n ? (e.id = n, e.method = r.params[0], e.options.requestManager.addSubscription(e, (function(t, r) {
                t ? (e.callback(t, !1, e), e.emit("error", t)) : (Array.isArray(r) || (r = [ r ]), r.forEach((function(t) {
                  var r = e._formatOutput(t);
                  if (e.lastBlock = r && "object" == typeof r ? r.blockNumber : null, "function" == typeof e.options.subscription.subscriptionHandler) return e.options.subscription.subscriptionHandler.call(e, r);
                  e.emit("data", r), e.callback(null, r, e);
                })));
              })), e.emit("connected", n)) : setTimeout((function() {
                e.callback(t, !1, e), e.emit("error", t);
              }), 0);
            })), this;
          }, a.prototype.resubscribe = function() {
            this.options.requestManager.removeSubscription(this.id), this.id = null, this.subscribe(this.callback);
          }, e.exports = a;
        },
        6016: (e, t, r) => {
          "use strict";
          var n = r(4390).formatters, i = r(3952), o = r(8269);
          e.exports = function(e) {
            var t = function(t) {
              var r;
              return t.property ? (e[t.property] || (e[t.property] = {}), r = e[t.property]) : r = e, t.methods && t.methods.forEach((function(t) {
                t instanceof i || (t = new i(t)), t.attachToObject(r), t.setRequestManager(e._requestManager);
              })), e;
            };
            return t.formatters = n, t.utils = o, t.Method = i, t;
          };
        },
        2928: (e, t, r) => {
          const n = r(4983), i = r(6016);
          e.exports = {
            packageInit: (e, t) => {
              if (t = Array.prototype.slice.call(t), !e) throw new Error('You need to instantiate using the "new" keyword.');
              Object.defineProperty(e, "currentProvider", {
                get: () => e._provider,
                set: t => e.setProvider(t),
                enumerable: !0,
                configurable: !0
              }), t[0] && t[0]._requestManager ? e._requestManager = t[0]._requestManager : e._requestManager = new n.Manager(t[0], t[1]), 
              e.givenProvider = n.Manager.givenProvider, e.providers = n.Manager.providers, e._provider = e._requestManager.provider, 
              e.setProvider || (e.setProvider = (t, r) => (e._requestManager.setProvider(t, r), e._provider = e._requestManager.provider, 
              !0)), e.setRequestManager = t => {
                e._requestManager = t, e._provider = t.provider;
              }, e.BatchRequest = n.BatchManager.bind(null, e._requestManager), e.extend = i(e);
            },
            addProviders: e => {
              e.givenProvider = n.Manager.givenProvider, e.providers = n.Manager.providers;
            }
          };
        },
        3338: (e, t, r) => {
          var n = r(8764).Buffer, i = r(8269), o = r(8349).RQ, s = r(8349)._R, a = new o((function(e, t) {
            return !e.match(/^u?int/) || Array.isArray(t) || t && "object" == typeof t && "BN" === t.constructor.name ? t : t.toString();
          }));
          function c() {}
          var f = function() {};
          f.prototype.encodeFunctionSignature = function(e) {
            return ("function" == typeof e || "object" == typeof e && e) && (e = i._jsonInterfaceMethodToString(e)), i.sha3(e).slice(0, 10);
          }, f.prototype.encodeEventSignature = function(e) {
            return ("function" == typeof e || "object" == typeof e && e) && (e = i._jsonInterfaceMethodToString(e)), i.sha3(e);
          }, f.prototype.encodeParameter = function(e, t) {
            return this.encodeParameters([ e ], [ t ]);
          }, f.prototype.encodeParameters = function(e, t) {
            var r = this;
            return e = r.mapTypes(e), t = t.map((function(t, n) {
              let i = e[n];
              if ("object" == typeof i && i.type && (i = i.type), t = r.formatParam(i, t), "string" == typeof i && i.includes("tuple")) {
                const e = a._getCoder(s.from(i)), n = (e, t) => {
                  if ("array" === e.name) {
                    if (!e.type.match(/\[(\d+)\]/)) return t.map((t => n(a._getCoder(s.from(e.type.replace("[]", ""))), t)));
                    const r = parseInt(e.type.match(/\[(\d+)\]/)[1]);
                    if (t.length !== r) throw new Error("Array length does not matches with the given input");
                    return t.map((t => n(a._getCoder(s.from(e.type.replace(/\[\d+\]/, ""))), t)));
                  }
                  e.coders.forEach(((e, i) => {
                    "tuple" === e.name ? n(e, t[i]) : t[i] = r.formatParam(e.name, t[i]);
                  }));
                };
                n(e, t);
              }
              return t;
            })), a.encode(e, t);
          }, f.prototype.mapTypes = function(e) {
            var t = this, r = [];
            return e.forEach((function(e) {
              if ("object" == typeof e && "function" === e.type && (e = Object.assign({}, e, {
                type: "bytes24"
              })), t.isSimplifiedStructFormat(e)) {
                var n = Object.keys(e)[0];
                r.push(Object.assign(t.mapStructNameAndType(n), {
                  components: t.mapStructToCoderFormat(e[n])
                }));
              } else r.push(e);
            })), r;
          }, f.prototype.isSimplifiedStructFormat = function(e) {
            return "object" == typeof e && void 0 === e.components && void 0 === e.name;
          }, f.prototype.mapStructNameAndType = function(e) {
            var t = "tuple";
            return e.indexOf("[]") > -1 && (t = "tuple[]", e = e.slice(0, -2)), {
              type: t,
              name: e
            };
          }, f.prototype.mapStructToCoderFormat = function(e) {
            var t = this, r = [];
            return Object.keys(e).forEach((function(n) {
              "object" != typeof e[n] ? r.push({
                name: n,
                type: e[n]
              }) : r.push(Object.assign(t.mapStructNameAndType(n), {
                components: t.mapStructToCoderFormat(e[n])
              }));
            })), r;
          }, f.prototype.formatParam = function(e, t) {
            const r = new RegExp(/^bytes([0-9]*)$/), o = new RegExp(/^bytes([0-9]*)\[\]$/), s = new RegExp(/^(u?int)([0-9]*)$/), a = new RegExp(/^(u?int)([0-9]*)\[\]$/);
            if (i.isBN(t) || i.isBigNumber(t)) return t.toString(10);
            if (e.match(o) || e.match(a)) return t.map((t => this.formatParam(e.replace("[]", ""), t)));
            let c = e.match(s);
            if (c) {
              let e = parseInt(c[2] || "256");
              e / 8 < t.length && (t = i.leftPad(t, e));
            }
            if (c = e.match(r), c) {
              n.isBuffer(t) && (t = i.toHex(t));
              let e = parseInt(c[1]);
              if (e) {
                let r = 2 * e;
                "0x" === t.substring(0, 2) && (r += 2), t.length < r && (t = i.rightPad(t, 2 * e));
              }
              t.length % 2 == 1 && (t = "0x0" + t.substring(2));
            }
            return t;
          }, f.prototype.encodeFunctionCall = function(e, t) {
            return this.encodeFunctionSignature(e) + this.encodeParameters(e.inputs, t).replace("0x", "");
          }, f.prototype.decodeParameter = function(e, t) {
            return this.decodeParameters([ e ], t)[0];
          }, f.prototype.decodeParameters = function(e, t) {
            return this.decodeParametersWith(e, t, !1);
          }, f.prototype.decodeParametersWith = function(e, t, r) {
            if (e.length > 0 && (!t || "0x" === t || "0X" === t)) throw new Error("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");
            var n = a.decode(this.mapTypes(e), "0x" + t.replace(/0x/i, ""), r), i = new c;
            return i.__length__ = 0, e.forEach((function(e, t) {
              var r = n[i.__length__];
              const o = "object" == typeof e && e.type && "string" === e.type;
              r = "0x" !== r || o || "string" == typeof e && "string" === e ? r : null, i[t] = r, ("function" == typeof e || e && "object" == typeof e) && e.name && (i[e.name] = r), 
              i.__length__++;
            })), i;
          }, f.prototype.decodeLog = function(e, t, r) {
            var n = this;
            r = Array.isArray(r) ? r : [ r ], t = t || "";
            var i = [], o = [], s = 0;
            e.forEach((function(e, t) {
              e.indexed ? (o[t] = [ "bool", "int", "uint", "address", "fixed", "ufixed" ].find((function(t) {
                return -1 !== e.type.indexOf(t);
              })) ? n.decodeParameter(e.type, r[s]) : r[s], s++) : i[t] = e;
            }));
            var a = t, f = a ? this.decodeParametersWith(i, a, !0) : [], u = new c;
            return u.__length__ = 0, e.forEach((function(e, t) {
              u[t] = "string" === e.type ? "" : null, void 0 !== f[t] && (u[t] = f[t]), void 0 !== o[t] && (u[t] = o[t]), e.name && (u[e.name] = u[t]), 
              u.__length__++;
            })), u;
          };
          var u = new f;
          e.exports = u;
        },
        1692: (e, t, r) => {
          "use strict";
          var i = r(2928), o = r(3952), s = r(8269), a = r(6602).subscription, c = r(4390).formatters, f = r(4390).errors, u = r(4017), h = r(3338), d = function e(t, r, n) {
            var o = this, a = Array.prototype.slice.call(arguments);
            if (!(this instanceof e)) throw new Error('Please use the "new" keyword to instantiate a web3.eth.Contract() object!');
            if (this.setProvider = function() {
              i.packageInit(o, arguments), o.clearSubscriptions = o._requestManager.clearSubscriptions;
            }, i.packageInit(this, [ this.constructor ]), this.clearSubscriptions = this._requestManager.clearSubscriptions, !t || !Array.isArray(t)) throw f.ContractMissingABIError();
            this.options = {};
            var u = a[a.length - 1];
            u && "object" == typeof u && !Array.isArray(u) && (n = u, this.options = {
              ...this.options,
              ...this._getOrSetDefaultOptions(n)
            }, r && "object" == typeof r && (r = null)), Object.defineProperty(this.options, "address", {
              set: function(e) {
                e && (o._address = s.toChecksumAddress(c.inputAddressFormatter(e)));
              },
              get: function() {
                return o._address;
              },
              enumerable: !0
            }), Object.defineProperty(this.options, "jsonInterface", {
              set: function(e) {
                return o.methods = {}, o.events = {}, o._jsonInterface = e.map((function(e) {
                  var t, r;
                  if (e.constant = "view" === e.stateMutability || "pure" === e.stateMutability || e.constant, e.payable = "payable" === e.stateMutability || e.payable, 
                  e.name && (r = s._jsonInterfaceMethodToString(e)), "function" === e.type) {
                    if (e.signature = h.encodeFunctionSignature(r), t = o._createTxObject.bind({
                      method: e,
                      parent: o
                    }), o.methods[e.name]) {
                      var n = o._createTxObject.bind({
                        method: e,
                        parent: o,
                        nextMethod: o.methods[e.name]
                      });
                      o.methods[e.name] = n;
                    } else o.methods[e.name] = t;
                    o.methods[e.signature] = t, o.methods[r] = t;
                  } else if ("event" === e.type) {
                    e.signature = h.encodeEventSignature(r);
                    var i = o._on.bind(o, e.signature);
                    o.events[e.name] && "bound " !== o.events[e.name].name || (o.events[e.name] = i), o.events[e.signature] = i, o.events[r] = i;
                  }
                  return e;
                })), o.events.allEvents = o._on.bind(o, "allevents"), o._jsonInterface;
              },
              get: function() {
                return o._jsonInterface;
              },
              enumerable: !0
            });
            var d = this.constructor.defaultAccount, l = this.constructor.defaultBlock || "latest";
            Object.defineProperty(this, "handleRevert", {
              get: function() {
                return !1 === o.options.handleRevert || !0 === o.options.handleRevert ? o.options.handleRevert : this.constructor.handleRevert;
              },
              set: function(e) {
                o.options.handleRevert = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultCommon", {
              get: function() {
                return o.options.common || this.constructor.defaultCommon;
              },
              set: function(e) {
                o.options.common = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultHardfork", {
              get: function() {
                return o.options.hardfork || this.constructor.defaultHardfork;
              },
              set: function(e) {
                o.options.hardfork = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultChain", {
              get: function() {
                return o.options.chain || this.constructor.defaultChain;
              },
              set: function(e) {
                o.options.chain = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "transactionPollingTimeout", {
              get: function() {
                return 0 === o.options.transactionPollingTimeout ? o.options.transactionPollingTimeout : o.options.transactionPollingTimeout || this.constructor.transactionPollingTimeout;
              },
              set: function(e) {
                o.options.transactionPollingTimeout = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "transactionPollingInterval", {
              get: function() {
                return 0 === o.options.transactionPollingInterval ? o.options.transactionPollingInterval : o.options.transactionPollingInterval || this.constructor.transactionPollingInterval;
              },
              set: function(e) {
                o.options.transactionPollingInterval = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "transactionConfirmationBlocks", {
              get: function() {
                return 0 === o.options.transactionConfirmationBlocks ? o.options.transactionConfirmationBlocks : o.options.transactionConfirmationBlocks || this.constructor.transactionConfirmationBlocks;
              },
              set: function(e) {
                o.options.transactionConfirmationBlocks = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "transactionBlockTimeout", {
              get: function() {
                return 0 === o.options.transactionBlockTimeout ? o.options.transactionBlockTimeout : o.options.transactionBlockTimeout || this.constructor.transactionBlockTimeout;
              },
              set: function(e) {
                o.options.transactionBlockTimeout = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "blockHeaderTimeout", {
              get: function() {
                return 0 === o.options.blockHeaderTimeout ? o.options.blockHeaderTimeout : o.options.blockHeaderTimeout || this.constructor.blockHeaderTimeout;
              },
              set: function(e) {
                o.options.blockHeaderTimeout = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultAccount", {
              get: function() {
                return d;
              },
              set: function(e) {
                return e && (d = s.toChecksumAddress(c.inputAddressFormatter(e))), e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultBlock", {
              get: function() {
                return l;
              },
              set: function(e) {
                return l = e, e;
              },
              enumerable: !0
            }), this.methods = {}, this.events = {}, this._address = null, this._jsonInterface = [], this.options.address = r, this.options.jsonInterface = t;
          };
          d.setProvider = function(e, t) {
            i.packageInit(this, [ e ]), this._ethAccounts = t;
          }, d.prototype._getCallback = function(e) {
            if (e && e[e.length - 1] && "function" == typeof e[e.length - 1]) return e.pop();
          }, d.prototype._checkListener = function(e, t) {
            if (t === e) throw f.ContractReservedEventError(e);
          }, d.prototype._getOrSetDefaultOptions = function(e) {
            var t = e.gasPrice ? String(e.gasPrice) : null, r = e.from ? s.toChecksumAddress(c.inputAddressFormatter(e.from)) : null;
            return e.data = e.data || this.options.data, e.from = r || this.options.from, e.gasPrice = t || this.options.gasPrice, e.gas = e.gas || e.gasLimit || this.options.gas, 
            delete e.gasLimit, e;
          }, d.prototype._encodeEventABI = function(e, t) {
            var r = (t = t || {}).filter || {}, n = {};
            if ([ "fromBlock", "toBlock" ].filter((function(e) {
              return void 0 !== t[e];
            })).forEach((function(e) {
              n[e] = c.inputBlockNumberFormatter(t[e]);
            })), Array.isArray(t.topics)) n.topics = t.topics; else {
              if (n.topics = [], e && !e.anonymous && "ALLEVENTS" !== e.name && n.topics.push(e.signature), "ALLEVENTS" !== e.name) {
                var i = e.inputs.filter((function(e) {
                  return !0 === e.indexed;
                })).map((function(e) {
                  var t = r[e.name];
                  return t ? Array.isArray(t) ? t.map((function(t) {
                    return h.encodeParameter(e.type, t);
                  })) : h.encodeParameter(e.type, t) : null;
                }));
                n.topics = n.topics.concat(i);
              }
              n.topics.length || delete n.topics;
            }
            return this.options.address && (n.address = this.options.address.toLowerCase()), n;
          }, d.prototype._decodeEventABI = function(e) {
            var t = this;
            e.data = e.data || "", e.topics = e.topics || [];
            var r = c.outputLogFormatter(e);
            if ("ALLEVENTS" === t.name && (t = t.jsonInterface.find((function(t) {
              return t.signature === e.topics[0];
            })) || {
              anonymous: !0
            }), t.inputs = t.inputs || [], !t.anonymous) {
              let r = 0;
              t.inputs.forEach((e => e.indexed ? r++ : null)), r > 0 && e.topics.length !== r + 1 && (t = {
                anonymous: !0,
                inputs: []
              });
            }
            var n = t.anonymous ? e.topics : e.topics.slice(1);
            return r.returnValues = h.decodeLog(t.inputs, e.data, n), delete r.returnValues.__length__, r.event = t.name, r.signature = t.anonymous || !e.topics[0] ? null : e.topics[0], 
            r.raw = {
              data: r.data,
              topics: r.topics
            }, delete r.data, delete r.topics, r;
          }, d.prototype._encodeMethodABI = function() {
            var e = this._method.signature, t = this.arguments || [], r = !1, n = this._parent.options.jsonInterface.filter((function(t) {
              return "constructor" === e && t.type === e || (t.signature === e || t.signature === e.replace("0x", "") || t.name === e) && "function" === t.type;
            })).map((function(e) {
              var n = Array.isArray(e.inputs) ? e.inputs.length : 0;
              if (n !== t.length) throw new Error("The number of arguments is not matching the methods required number. You need to pass " + n + " arguments.");
              return "function" === e.type && (r = e.signature), Array.isArray(e.inputs) ? e.inputs : [];
            })).map((function(e) {
              return h.encodeParameters(e, t).replace("0x", "");
            }))[0] || "";
            if ("constructor" === e) {
              if (!this._deployData) throw new Error("The contract has no contract data option set. This is necessary to append the constructor parameters.");
              return this._deployData.startsWith("0x") || (this._deployData = "0x" + this._deployData), this._deployData + n;
            }
            var i = r ? r + n : n;
            if (!i) throw new Error("Couldn't find a matching contract method named \"" + this._method.name + '".');
            return i;
          }, d.prototype._decodeMethodReturn = function(e, t) {
            if (!t) return null;
            t = t.length >= 2 ? t.slice(2) : t;
            var r = h.decodeParameters(e, t);
            return 1 === r.__length__ ? r[0] : (delete r.__length__, r);
          }, d.prototype.deploy = function(e, t) {
            if ((e = e || {}).arguments = e.arguments || [], !(e = this._getOrSetDefaultOptions(e)).data) {
              if ("function" == typeof t) return t(f.ContractMissingDeployDataError());
              throw f.ContractMissingDeployDataError();
            }
            var r = this.options.jsonInterface.find((e => "constructor" === e.type)) || {};
            return r.signature = "constructor", this._createTxObject.apply({
              method: r,
              parent: this,
              deployData: e.data,
              _ethAccounts: this.constructor._ethAccounts
            }, e.arguments);
          }, d.prototype._generateEventOptions = function() {
            var e = Array.prototype.slice.call(arguments), t = this._getCallback(e), r = "object" === (!!e[e.length - 1] && typeof e[e.length - 1]) ? e.pop() : {}, n = "string" == typeof e[0] ? e[0] : "allevents", i = "allevents" === n.toLowerCase() ? {
              name: "ALLEVENTS",
              jsonInterface: this.options.jsonInterface
            } : this.options.jsonInterface.find((function(e) {
              return "event" === e.type && (e.name === n || e.signature === "0x" + n.replace("0x", ""));
            }));
            if (!i) throw f.ContractEventDoesNotExistError(n);
            if (!s.isAddress(this.options.address)) throw f.ContractNoAddressDefinedError();
            return {
              params: this._encodeEventABI(i, r),
              event: i,
              callback: t
            };
          }, d.prototype.clone = function() {
            return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
          }, d.prototype.once = function(e, t, r) {
            var n = Array.prototype.slice.call(arguments);
            if (!(r = this._getCallback(n))) throw f.ContractOnceRequiresCallbackError();
            t && delete t.fromBlock, this._on(e, t, (function(e, t, n) {
              n.unsubscribe(), "function" == typeof r && r(e, t, n);
            }));
          }, d.prototype._on = function() {
            var e = this._generateEventOptions.apply(this, arguments);
            e.params && e.params.toBlock && (delete e.params.toBlock, n.warn("Invalid option: toBlock. Use getPastEvents for specific range.")), 
            this._checkListener("newListener", e.event.name), this._checkListener("removeListener", e.event.name);
            var t = new a({
              subscription: {
                params: 1,
                inputFormatter: [ c.inputLogFormatter ],
                outputFormatter: this._decodeEventABI.bind(e.event),
                subscriptionHandler: function(e) {
                  e.removed ? this.emit("changed", e) : this.emit("data", e), "function" == typeof this.callback && this.callback(null, e, this);
                }
              },
              type: "eth",
              requestManager: this._requestManager
            });
            return t.subscribe("logs", e.params, e.callback || function() {}), t;
          }, d.prototype.getPastEvents = function() {
            var e = this._generateEventOptions.apply(this, arguments), t = new o({
              name: "getPastLogs",
              call: "eth_getLogs",
              params: 1,
              inputFormatter: [ c.inputLogFormatter ],
              outputFormatter: this._decodeEventABI.bind(e.event)
            });
            t.setRequestManager(this._requestManager);
            var r = t.buildCall();
            return t = null, r(e.params, e.callback);
          }, d.prototype._createTxObject = function() {
            var e = Array.prototype.slice.call(arguments), t = {};
            if ("function" === this.method.type && (t.call = this.parent._executeMethod.bind(t, "call"), t.call.request = this.parent._executeMethod.bind(t, "call", !0)), 
            t.send = this.parent._executeMethod.bind(t, "send"), t.send.request = this.parent._executeMethod.bind(t, "send", !0), t.encodeABI = this.parent._encodeMethodABI.bind(t), 
            t.estimateGas = this.parent._executeMethod.bind(t, "estimate"), t.createAccessList = this.parent._executeMethod.bind(t, "createAccessList"), 
            e && this.method.inputs && e.length !== this.method.inputs.length) {
              if (this.nextMethod) return this.nextMethod.apply(null, e);
              throw f.InvalidNumberOfParams(e.length, this.method.inputs.length, this.method.name);
            }
            return t.arguments = e || [], t._method = this.method, t._parent = this.parent, t._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts, 
            this.deployData && (t._deployData = this.deployData), t;
          }, d.prototype._processExecuteArguments = function(e, t) {
            var r = {};
            if (r.type = e.shift(), r.callback = this._parent._getCallback(e), "call" !== r.type || !0 === e[e.length - 1] || "string" != typeof e[e.length - 1] && !isFinite(e[e.length - 1]) || (r.defaultBlock = e.pop()), 
            r.options = "object" === (!!e[e.length - 1] && typeof e[e.length - 1]) ? e.pop() : {}, r.generateRequest = !0 === e[e.length - 1] && e.pop(), 
            r.options = this._parent._getOrSetDefaultOptions(r.options), r.options.data = this.encodeABI(), !this._deployData && !s.isAddress(this._parent.options.address)) throw f.ContractNoAddressDefinedError();
            return this._deployData || (r.options.to = this._parent.options.address), r.options.data ? r : s._fireError(new Error("Couldn't find a matching contract method, or the number of parameters is wrong."), t.eventEmitter, t.reject, r.callback);
          }, d.prototype._executeMethod = function() {
            var e = this, t = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), r), r = u("send" !== t.type), n = e.constructor._ethAccounts || e._ethAccounts;
            if (t.generateRequest) {
              var i = {
                params: [ c.inputCallFormatter.call(this._parent, t.options) ],
                callback: t.callback
              };
              return "call" === t.type ? (i.params.push(c.inputDefaultBlockNumberFormatter.call(this._parent, t.defaultBlock)), i.method = "eth_call", 
              i.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs)) : i.method = "eth_sendTransaction", i;
            }
            switch (t.type) {
             case "createAccessList":
              if (!s.isAddress(t.options.from)) return s._fireError(f.ContractNoFromAddressDefinedError(), r.eventEmitter, r.reject, t.callback);
              var a = new o({
                name: "createAccessList",
                call: "eth_createAccessList",
                params: 2,
                inputFormatter: [ c.inputTransactionFormatter, c.inputDefaultBlockNumberFormatter ],
                requestManager: e._parent._requestManager,
                accounts: n,
                defaultAccount: e._parent.defaultAccount,
                defaultBlock: e._parent.defaultBlock
              }).createFunction();
              return a(t.options, t.callback);

             case "estimate":
              var d = new o({
                name: "estimateGas",
                call: "eth_estimateGas",
                params: 1,
                inputFormatter: [ c.inputCallFormatter ],
                outputFormatter: s.hexToNumber,
                requestManager: e._parent._requestManager,
                accounts: n,
                defaultAccount: e._parent.defaultAccount,
                defaultBlock: e._parent.defaultBlock
              }).createFunction();
              return d(t.options, t.callback);

             case "call":
              var l = new o({
                name: "call",
                call: "eth_call",
                params: 2,
                inputFormatter: [ c.inputCallFormatter, c.inputDefaultBlockNumberFormatter ],
                outputFormatter: function(t) {
                  return e._parent._decodeMethodReturn(e._method.outputs, t);
                },
                requestManager: e._parent._requestManager,
                accounts: n,
                defaultAccount: e._parent.defaultAccount,
                defaultBlock: e._parent.defaultBlock,
                handleRevert: e._parent.handleRevert,
                abiCoder: h
              }).createFunction();
              return l(t.options, t.defaultBlock, t.callback);

             case "send":
              if (!s.isAddress(t.options.from)) return s._fireError(f.ContractNoFromAddressDefinedError(), r.eventEmitter, r.reject, t.callback);
              if ("boolean" == typeof this._method.payable && !this._method.payable && t.options.value && t.options.value > 0) return s._fireError(new Error("Can not send value to non-payable contract method or constructor"), r.eventEmitter, r.reject, t.callback);
              var p = {
                receiptFormatter: function(t) {
                  if (Array.isArray(t.logs)) {
                    var r = t.logs.map((t => e._parent._decodeEventABI.call({
                      name: "ALLEVENTS",
                      jsonInterface: e._parent.options.jsonInterface
                    }, t)));
                    t.events = {};
                    var n = 0;
                    r.forEach((function(e) {
                      e.event ? t.events[e.event] ? Array.isArray(t.events[e.event]) ? t.events[e.event].push(e) : t.events[e.event] = [ t.events[e.event], e ] : t.events[e.event] = e : (t.events[n] = e, 
                      n++);
                    })), delete t.logs;
                  }
                  return t;
                },
                contractDeployFormatter: function(t) {
                  var r = e._parent.clone();
                  return r.options.address = t.contractAddress, r;
                }
              }, b = new o({
                name: "sendTransaction",
                call: "eth_sendTransaction",
                params: 1,
                inputFormatter: [ c.inputTransactionFormatter ],
                requestManager: e._parent._requestManager,
                accounts: e.constructor._ethAccounts || e._ethAccounts,
                defaultAccount: e._parent.defaultAccount,
                defaultBlock: e._parent.defaultBlock,
                transactionBlockTimeout: e._parent.transactionBlockTimeout,
                transactionConfirmationBlocks: e._parent.transactionConfirmationBlocks,
                transactionPollingTimeout: e._parent.transactionPollingTimeout,
                transactionPollingInterval: e._parent.transactionPollingInterval,
                defaultCommon: e._parent.defaultCommon,
                defaultChain: e._parent.defaultChain,
                defaultHardfork: e._parent.defaultHardfork,
                handleRevert: e._parent.handleRevert,
                extraFormatters: p,
                abiCoder: h
              }).createFunction();
              return b(t.options, t.callback);

             default:
              throw new Error('Method "' + t.type + '" not implemented.');
            }
          }, e.exports = d;
        },
        4751: (e, t, r) => {
          "use strict";
          const n = r(8269), i = r(3550), o = function(e) {
            const t = "A".charCodeAt(0), r = "Z".charCodeAt(0);
            return (e = (e = e.toUpperCase()).slice(4) + e.slice(0, 4)).split("").map((function(e) {
              const n = e.charCodeAt(0);
              return n >= t && n <= r ? n - t + 10 : e;
            })).join("");
          }, s = function(e) {
            let t, r = e;
            for (;r.length > 2; ) t = r.slice(0, 9), r = parseInt(t, 10) % 97 + r.slice(t.length);
            return parseInt(r, 10) % 97;
          };
          class a {
            constructor(e) {
              this._iban = e;
            }
            static toAddress(e) {
              if (!(e = new a(e)).isDirect()) throw new Error("IBAN is indirect and can't be converted");
              return e.toAddress();
            }
            static toIban(e) {
              return a.fromAddress(e).toString();
            }
            static fromAddress(e) {
              if (!n.isAddress(e)) throw new Error("Provided address is not a valid address: " + e);
              e = e.replace("0x", "").replace("0X", "");
              const t = function(e, t) {
                let r = e;
                for (;r.length < 30; ) r = "0" + r;
                return r;
              }(new i(e, 16).toString(36));
              return a.fromBban(t.toUpperCase());
            }
            static fromBban(e) {
              const t = ("0" + (98 - s(o("XE00" + e)))).slice(-2);
              return new a("XE" + t + e);
            }
            static createIndirect(e) {
              return a.fromBban("ETH" + e.institution + e.identifier);
            }
            static isValid(e) {
              return new a(e).isValid();
            }
            isValid() {
              return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && 1 === s(o(this._iban));
            }
            isDirect() {
              return 34 === this._iban.length || 35 === this._iban.length;
            }
            isIndirect() {
              return 20 === this._iban.length;
            }
            checksum() {
              return this._iban.slice(2, 4);
            }
            institution() {
              return this.isIndirect() ? this._iban.slice(7, 11) : "";
            }
            client() {
              return this.isIndirect() ? this._iban.slice(11) : "";
            }
            toAddress() {
              if (this.isDirect()) {
                const e = this._iban.slice(4), t = new i(e, 36);
                return n.toChecksumAddress(t.toString(16, 20));
              }
              return "";
            }
            toString() {
              return this._iban;
            }
          }
          e.exports = a;
        },
        4351: (e, t, r) => {
          var n = r(4390).errors, i = r(9536).XMLHttpRequest, o = r(8501), s = r(9267), a = function(e, t) {
            t = t || {}, this.withCredentials = t.withCredentials || !1, this.timeout = t.timeout || 0, this.headers = t.headers, this.agent = t.agent, 
            this.connected = !1;
            const r = !1 !== t.keepAlive;
            this.host = e || "http://localhost:8545", this.agent || ("https" === this.host.substring(0, 5) ? this.httpsAgent = new s.Agent({
              keepAlive: r
            }) : this.httpAgent = new o.Agent({
              keepAlive: r
            }));
          };
          a.prototype._prepareRequest = function() {
            var e;
            if ("undefined" != typeof XMLHttpRequest) e = new XMLHttpRequest; else {
              e = new i;
              var t = {
                httpsAgent: this.httpsAgent,
                httpAgent: this.httpAgent,
                baseUrl: this.baseUrl
              };
              this.agent && (t.httpsAgent = this.agent.https, t.httpAgent = this.agent.http, t.baseUrl = this.agent.baseUrl), e.nodejsSet(t);
            }
            return e.open("POST", this.host, !0), e.setRequestHeader("Content-Type", "application/json"), e.timeout = this.timeout, 
            e.withCredentials = this.withCredentials, this.headers && this.headers.forEach((function(t) {
              e.setRequestHeader(t.name, t.value);
            })), e;
          }, a.prototype.send = function(e, t) {
            var r = this, i = this._prepareRequest();
            i.onreadystatechange = function() {
              if (4 === i.readyState && 1 !== i.timeout) {
                var e = i.responseText, o = null;
                try {
                  e = JSON.parse(e);
                } catch (e) {
                  o = n.InvalidResponse(i.responseText);
                }
                r.connected = !0, t(o, e);
              }
            }, i.ontimeout = function() {
              r.connected = !1, t(n.ConnectionTimeout(this.timeout));
            };
            try {
              i.send(JSON.stringify(e));
            } catch (e) {
              this.connected = !1, t(n.InvalidConnection(this.host));
            }
          }, a.prototype.disconnect = function() {}, a.prototype.supportsSubscriptions = function() {
            return !1;
          }, e.exports = a;
        },
        8269: (e, t, r) => {
          var n = r(4278), i = r(329), o = r(8668), s = r(1798), a = r(3550), c = function(e, t) {
            var r = [];
            return t.forEach((function(t) {
              if ("object" == typeof t.components) {
                if ("tuple" !== t.type.substring(0, 5)) throw new Error("components found but type is not tuple; report on GitHub");
                var n = "", i = t.type.indexOf("[");
                i >= 0 && (n = t.type.substring(i));
                var o = c(e, t.components);
                Array.isArray(o) && e ? r.push("tuple(" + o.join(",") + ")" + n) : e ? r.push("(" + o + ")") : r.push("(" + o.join(",") + ")" + n);
              } else r.push(t.type);
            })), r;
          }, f = function(e) {
            if (!i.isHexStrict(e)) throw new Error("The parameter must be a valid HEX string.");
            var t = "", r = 0, n = e.length;
            for ("0x" === e.substring(0, 2) && (r = 2); r < n; r += 2) {
              var o = parseInt(e.slice(r, r + 2), 16);
              t += String.fromCharCode(o);
            }
            return t;
          }, u = function(e) {
            if (!e) return "0x00";
            for (var t = "", r = 0; r < e.length; r++) {
              var n = e.charCodeAt(r).toString(16);
              t += n.length < 2 ? "0" + n : n;
            }
            return "0x" + t;
          }, h = function(e) {
            if (e = e ? e.toLowerCase() : "ether", !n.unitMap[e]) throw new Error('This unit "' + e + "\" doesn't exist, please use the one of the following units" + JSON.stringify(n.unitMap, null, 2));
            return e;
          };
          e.exports = {
            _fireError: function(e, t, r, n, i) {
              return !e || "object" != typeof e || e instanceof Error || !e.data || ((e.data && "object" == typeof e.data || Array.isArray(e.data)) && (e.data = JSON.stringify(e.data, null, 2)), 
              e = e.message + "\n" + e.data), "string" == typeof e && (e = new Error(e)), "function" == typeof n && n(e, i), "function" == typeof r && ((t && "function" == typeof t.listeners && t.listeners("error").length || "function" == typeof n) && t.catch((function() {})), 
              setTimeout((function() {
                r(e);
              }), 1)), t && "function" == typeof t.emit && setTimeout((function() {
                t.emit("error", e, i), t.removeAllListeners();
              }), 1), t;
            },
            _jsonInterfaceMethodToString: function(e) {
              return e && "object" == typeof e && e.name && -1 !== e.name.indexOf("(") ? e.name : e.name + "(" + c(!1, e.inputs).join(",") + ")";
            },
            _flattenTypes: c,
            randomHex: function(e) {
              return "0x" + s(e).toString("hex");
            },
            BN: i.BN,
            isBN: i.isBN,
            isBigNumber: i.isBigNumber,
            isHex: i.isHex,
            isHexStrict: i.isHexStrict,
            sha3: i.sha3,
            sha3Raw: i.sha3Raw,
            keccak256: i.sha3,
            soliditySha3: o.soliditySha3,
            soliditySha3Raw: o.soliditySha3Raw,
            encodePacked: o.encodePacked,
            isAddress: i.isAddress,
            checkAddressChecksum: i.checkAddressChecksum,
            toChecksumAddress: function(e) {
              if (void 0 === e) return "";
              if (!/^(0x)?[0-9a-f]{40}$/i.test(e)) throw new Error('Given address "' + e + '" is not a valid Ethereum address.');
              e = e.toLowerCase().replace(/^0x/i, "");
              for (var t = i.sha3(e).replace(/^0x/i, ""), r = "0x", n = 0; n < e.length; n++) parseInt(t[n], 16) > 7 ? r += e[n].toUpperCase() : r += e[n];
              return r;
            },
            toHex: i.toHex,
            toBN: i.toBN,
            bytesToHex: i.bytesToHex,
            hexToBytes: i.hexToBytes,
            hexToNumberString: i.hexToNumberString,
            hexToNumber: i.hexToNumber,
            toDecimal: i.hexToNumber,
            numberToHex: i.numberToHex,
            fromDecimal: i.numberToHex,
            hexToUtf8: i.hexToUtf8,
            hexToString: i.hexToUtf8,
            toUtf8: i.hexToUtf8,
            stripHexPrefix: i.stripHexPrefix,
            utf8ToHex: i.utf8ToHex,
            stringToHex: i.utf8ToHex,
            fromUtf8: i.utf8ToHex,
            hexToAscii: f,
            toAscii: f,
            asciiToHex: u,
            fromAscii: u,
            unitMap: n.unitMap,
            toWei: function(e, t) {
              if (t = h(t), !i.isBN(e) && "string" != typeof e) throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
              return i.isBN(e) ? n.toWei(e, t) : n.toWei(e, t).toString(10);
            },
            fromWei: function(e, t) {
              if (t = h(t), !i.isBN(e) && "string" != typeof e) throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
              return i.isBN(e) ? n.fromWei(e, t) : n.fromWei(e, t).toString(10);
            },
            padLeft: i.leftPad,
            leftPad: i.leftPad,
            padRight: i.rightPad,
            rightPad: i.rightPad,
            toTwosComplement: i.toTwosComplement,
            isBloom: i.isBloom,
            isUserEthereumAddressInBloom: i.isUserEthereumAddressInBloom,
            isContractAddressInBloom: i.isContractAddressInBloom,
            isTopic: i.isTopic,
            isTopicInBloom: i.isTopicInBloom,
            isInBloom: i.isInBloom,
            compareBlockNumbers: function(e, t) {
              if (e == t) return 0;
              if ("genesis" != e && "earliest" != e && 0 != e || "genesis" != t && "earliest" != t && 0 != t) {
                if ("genesis" == e || "earliest" == e) return -1;
                if ("genesis" == t || "earliest" == t) return 1;
                if ("latest" == e) return "pending" == t ? -1 : 1;
                if ("latest" === t) return "pending" == e ? 1 : -1;
                if ("pending" == e) return 1;
                if ("pending" == t) return -1;
                {
                  let r = new a(e), n = new a(t);
                  return r.lt(n) ? -1 : r.eq(n) ? 0 : 1;
                }
              }
              return 0;
            },
            toNumber: i.toNumber
          };
        },
        8668: (e, t, r) => {
          var n = r(3550), i = r(329), o = function(e) {
            var t = typeof e;
            if ("string" === t) return i.isHexStrict(e) ? new n(e.replace(/0x/i, ""), 16) : new n(e, 10);
            if ("number" === t) return new n(e);
            if (i.isBigNumber(e)) return new n(e.toString(10));
            if (i.isBN(e)) return e;
            throw new Error(e + " is not a number");
          }, s = function(e, t, r) {
            var s, a, c;
            if ("bytes" === (e = (c = e).startsWith("int[") ? "int256" + c.slice(3) : "int" === c ? "int256" : c.startsWith("uint[") ? "uint256" + c.slice(4) : "uint" === c ? "uint256" : c.startsWith("fixed[") ? "fixed128x128" + c.slice(5) : "fixed" === c ? "fixed128x128" : c.startsWith("ufixed[") ? "ufixed128x128" + c.slice(6) : "ufixed" === c ? "ufixed128x128" : c)) {
              if (t.replace(/^0x/i, "").length % 2 != 0) throw new Error("Invalid bytes characters " + t.length);
              return t;
            }
            if ("string" === e) return i.utf8ToHex(t);
            if ("bool" === e) return t ? "01" : "00";
            if (e.startsWith("address")) {
              if (s = r ? 64 : 40, !i.isAddress(t)) throw new Error(t + " is not a valid address, or the checksum is invalid.");
              return i.leftPad(t.toLowerCase(), s);
            }
            if (s = function(e) {
              var t = /^\D+(\d+).*$/.exec(e);
              return t ? parseInt(t[1], 10) : null;
            }(e), e.startsWith("bytes")) {
              if (!s) throw new Error("bytes[] not yet supported in solidity");
              if (r && (s = 32), s < 1 || s > 32 || s < t.replace(/^0x/i, "").length / 2) throw new Error("Invalid bytes" + s + " for " + t);
              return i.rightPad(t, 2 * s);
            }
            if (e.startsWith("uint")) {
              if (s % 8 || s < 8 || s > 256) throw new Error("Invalid uint" + s + " size");
              if ((a = o(t)).bitLength() > s) throw new Error("Supplied uint exceeds width: " + s + " vs " + a.bitLength());
              if (a.lt(new n(0))) throw new Error("Supplied uint " + a.toString() + " is negative");
              return s ? i.leftPad(a.toString("hex"), s / 8 * 2) : a;
            }
            if (e.startsWith("int")) {
              if (s % 8 || s < 8 || s > 256) throw new Error("Invalid int" + s + " size");
              if ((a = o(t)).bitLength() > s) throw new Error("Supplied int exceeds width: " + s + " vs " + a.bitLength());
              return a.lt(new n(0)) ? a.toTwos(s).toString("hex") : s ? i.leftPad(a.toString("hex"), s / 8 * 2) : a;
            }
            throw new Error("Unsupported or invalid type: " + e);
          }, a = function(e) {
            if (Array.isArray(e)) throw new Error("Autodetection of array types is not supported.");
            var t, r, o = "";
            if (e && "object" == typeof e && (e.hasOwnProperty("v") || e.hasOwnProperty("t") || e.hasOwnProperty("value") || e.hasOwnProperty("type")) ? (t = e.hasOwnProperty("t") ? e.t : e.type, 
            o = e.hasOwnProperty("v") ? e.v : e.value) : (t = i.toHex(e, !0), o = i.toHex(e), t.startsWith("int") || t.startsWith("uint") || (t = "bytes")), 
            !t.startsWith("int") && !t.startsWith("uint") || "string" != typeof o || /^(-)?0x/i.test(o) || (o = new n(o)), Array.isArray(o)) {
              if (r = function(e) {
                var t = /^\D+\d*\[(\d+)\]$/.exec(e);
                return t ? parseInt(t[1], 10) : null;
              }(t), r && o.length !== r) throw new Error(t + " is not matching the given array " + JSON.stringify(o));
              r = o.length;
            }
            return Array.isArray(o) ? o.map((function(e) {
              return s(t, e, r).toString("hex").replace("0x", "");
            })).join("") : s(t, o, r).toString("hex").replace("0x", "");
          };
          e.exports = {
            soliditySha3: function() {
              var e = Array.prototype.slice.call(arguments), t = e.map(a);
              return i.sha3("0x" + t.join(""));
            },
            soliditySha3Raw: function() {
              return i.sha3Raw("0x" + Array.prototype.slice.call(arguments).map(a).join(""));
            },
            encodePacked: function() {
              var e = Array.prototype.slice.call(arguments), t = e.map(a);
              return "0x" + t.join("").toLowerCase();
            }
          };
        },
        329: (e, t, r) => {
          var n = r(8764).Buffer, i = r(3550), o = r(3206), s = r(7458), a = r(2751), c = r(6877), f = function(e) {
            return i.isBN(e);
          }, u = function(e) {
            return e && e.constructor && "BigNumber" === e.constructor.name;
          }, h = function(e) {
            try {
              return o.apply(null, arguments);
            } catch (t) {
              throw new Error(t + ' Given value: "' + e + '"');
            }
          }, d = function(e) {
            return !!/^(0x)?[0-9a-f]{40}$/i.test(e) && (!(!/^(0x|0X)?[0-9a-f]{40}$/.test(e) && !/^(0x|0X)?[0-9A-F]{40}$/.test(e)) || l(e));
          }, l = function(e) {
            e = e.replace(/^0x/i, "");
            for (var t = _(e.toLowerCase()).replace(/^0x/i, ""), r = 0; r < 40; r++) if (parseInt(t[r], 16) > 7 && e[r].toUpperCase() !== e[r] || parseInt(t[r], 16) <= 7 && e[r].toLowerCase() !== e[r]) return !1;
            return !0;
          }, p = function(e) {
            var t = "";
            e = (e = (e = (e = (e = s.encode(e)).replace(/^(?:\u0000)*/, "")).split("").reverse().join("")).replace(/^(?:\u0000)*/, "")).split("").reverse().join("");
            for (var r = 0; r < e.length; r++) {
              var n = e.charCodeAt(r).toString(16);
              t += n.length < 2 ? "0" + n : n;
            }
            return "0x" + t;
          }, b = function(e) {
            if (!e) return e;
            if ("string" == typeof e && !m(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
            return h(e).toNumber();
          }, y = function(e) {
            if (null == e) return e;
            if (!isFinite(e) && !m(e)) throw new Error('Given input "' + e + '" is not a number.');
            var t = h(e), r = t.toString(16);
            return t.lt(new i(0)) ? "-0x" + r.slice(1) : "0x" + r;
          }, g = function(e, t) {
            if (d(e)) return t ? "address" : "0x" + e.toLowerCase().replace(/^0x/i, "");
            if ("boolean" == typeof e) return t ? "bool" : e ? "0x01" : "0x00";
            if (n.isBuffer(e)) return "0x" + e.toString("hex");
            if ("object" == typeof e && e && !u(e) && !f(e)) return t ? "string" : p(JSON.stringify(e));
            if ("string" == typeof e) {
              if (0 === e.indexOf("-0x") || 0 === e.indexOf("-0X")) return t ? "int256" : y(e);
              if (0 === e.indexOf("0x") || 0 === e.indexOf("0X")) return t ? "bytes" : e;
              if (!isFinite(e)) return t ? "string" : p(e);
            }
            return t ? e < 0 ? "int256" : "uint256" : y(e);
          }, m = function(e) {
            return ("string" == typeof e || "number" == typeof e) && /^(-)?0x[0-9a-f]*$/i.test(e);
          }, v = function(e) {
            return ("string" == typeof e || "number" == typeof e) && /^(-0x|0x)?[0-9a-f]*$/i.test(e);
          }, w = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", _ = function(e) {
            f(e) && (e = e.toString()), m(e) && /^0x/i.test(e.toString()) ? e = a.toBuffer(e) : "string" == typeof e && (e = n.from(e, "utf-8"));
            var t = a.bufferToHex(a.keccak256(e));
            return t === w ? null : t;
          };
          _._Hash = a.keccak256;
          var S = function(e) {
            if ("string" == typeof e && e.includes("0x")) {
              const [t, r] = e.toLocaleLowerCase().startsWith("-") ? [ "-", e.slice(3) ] : [ "", e.slice(2) ];
              return new i(t + r, 16);
            }
            return new i(e);
          };
          Object.setPrototypeOf(S, i), Object.setPrototypeOf(S.prototype, i.prototype), e.exports = {
            BN: S,
            isBN: f,
            isBigNumber: u,
            toBN: h,
            isAddress: d,
            isBloom: function(e) {
              return c.isBloom(e);
            },
            isUserEthereumAddressInBloom: function(e, t) {
              return c.isUserEthereumAddressInBloom(e, t);
            },
            isContractAddressInBloom: function(e, t) {
              return c.isContractAddressInBloom(e, t);
            },
            isTopic: function(e) {
              return c.isTopic(e);
            },
            isTopicInBloom: function(e, t) {
              return c.isTopicInBloom(e, t);
            },
            isInBloom: function(e, t) {
              return c.isInBloom(e, t);
            },
            checkAddressChecksum: l,
            utf8ToHex: p,
            hexToUtf8: function(e) {
              if (!m(e)) throw new Error('The parameter "' + e + '" must be a valid HEX string.');
              for (var t = "", r = 0, n = (e = (e = (e = (e = (e = e.replace(/^0x/i, "")).replace(/^(?:00)*/, "")).split("").reverse().join("")).replace(/^(?:00)*/, "")).split("").reverse().join("")).length, i = 0; i < n; i += 2) r = parseInt(e.slice(i, i + 2), 16), 
              t += String.fromCharCode(r);
              return s.decode(t);
            },
            hexToNumber: b,
            hexToNumberString: function(e) {
              if (!e) return e;
              if ("string" == typeof e && !m(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
              return h(e).toString(10);
            },
            numberToHex: y,
            toHex: g,
            hexToBytes: function(e) {
              if (e = e.toString(16), !m(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
              e = e.replace(/^0x/i, "");
              for (var t = [], r = 0; r < e.length; r += 2) t.push(parseInt(e.slice(r, r + 2), 16));
              return t;
            },
            bytesToHex: function(e) {
              for (var t = [], r = 0; r < e.length; r++) t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
              return "0x" + t.join("");
            },
            isHex: v,
            isHexStrict: m,
            stripHexPrefix: function(e) {
              return 0 !== e && v(e) ? e.replace(/^(-)?0x/i, "$1") : e;
            },
            leftPad: function(e, t, r) {
              var n = /^0x/i.test(e) || "number" == typeof e, i = t - (e = e.toString(16).replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
              return (n ? "0x" : "") + new Array(i).join(r || "0") + e;
            },
            rightPad: function(e, t, r) {
              var n = /^0x/i.test(e) || "number" == typeof e, i = t - (e = e.toString(16).replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
              return (n ? "0x" : "") + e + new Array(i).join(r || "0");
            },
            toTwosComplement: function(e) {
              return "0x" + h(e).toTwos(256).toString(16, 64);
            },
            sha3: _,
            sha3Raw: function(e) {
              return null === (e = _(e)) ? w : e;
            },
            toNumber: function(e) {
              return "number" == typeof e ? e : b(g(e));
            }
          };
        },
        6430: (e, t, r) => {
          "use strict";
          var n = r(4029), i = r(3083), o = r(1924), s = o("Object.prototype.toString"), a = r(6410)(), c = "undefined" == typeof globalThis ? r.g : globalThis, f = i(), u = o("String.prototype.slice"), h = {}, d = r(882), l = Object.getPrototypeOf;
          a && d && l && n(f, (function(e) {
            if ("function" == typeof c[e]) {
              var t = new c[e];
              if (Symbol.toStringTag in t) {
                var r = l(t), n = d(r, Symbol.toStringTag);
                if (!n) {
                  var i = l(r);
                  n = d(i, Symbol.toStringTag);
                }
                h[e] = n.get;
              }
            }
          }));
          var p = r(5692);
          e.exports = function(e) {
            return !!p(e) && (a && Symbol.toStringTag in e ? function(e) {
              var t = !1;
              return n(h, (function(r, n) {
                if (!t) try {
                  var i = r.call(e);
                  i === n && (t = i);
                } catch (e) {}
              })), t;
            }(e) : u(s(e), 8, -1));
          };
        },
        2479: e => {
          e.exports = function e(t, r) {
            if (t && r) return e(t)(r);
            if ("function" != typeof t) throw new TypeError("need wrapper function");
            return Object.keys(t).forEach((function(e) {
              n[e] = t[e];
            })), n;
            function n() {
              for (var e = new Array(arguments.length), r = 0; r < e.length; r++) e[r] = arguments[r];
              var n = t.apply(this, e), i = e[e.length - 1];
              return "function" == typeof n && n !== i && Object.keys(i).forEach((function(e) {
                n[e] = i[e];
              })), n;
            }
          };
        },
        8355: function(e, t) {
          "use strict";
          var r, n = this && this.__extends || (r = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function(e, t) {
            e.__proto__ = t;
          } || function(e, t) {
            for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
          }, function(e, t) {
            function n() {
              this.constructor = e;
            }
            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n);
          });
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var i = function(e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }
            return n(t, e), t;
          }(Error);
          t.SecurityError = i;
          var o = function(e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }
            return n(t, e), t;
          }(Error);
          t.InvalidStateError = o;
          var s = function(e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }
            return n(t, e), t;
          }(Error);
          t.NetworkError = s;
          var a = function(e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }
            return n(t, e), t;
          }(Error);
          t.SyntaxError = a;
        },
        9536: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), function(e) {
            for (var r in e) t.hasOwnProperty(r) || (t[r] = e[r]);
          }(r(6763));
          var n = r(335);
          t.XMLHttpRequestEventTarget = n.XMLHttpRequestEventTarget;
        },
        7296: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ProgressEvent = function(e) {
            this.type = e, this.bubbles = !1, this.cancelable = !1, this.loaded = 0, this.lengthComputable = !1, this.total = 0;
          };
        },
        335: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var r = function() {
            function e() {
              this.listeners = {};
            }
            return e.prototype.addEventListener = function(e, t) {
              e = e.toLowerCase(), this.listeners[e] = this.listeners[e] || [], this.listeners[e].push(t.handleEvent || t);
            }, e.prototype.removeEventListener = function(e, t) {
              if (e = e.toLowerCase(), this.listeners[e]) {
                var r = this.listeners[e].indexOf(t.handleEvent || t);
                r < 0 || this.listeners[e].splice(r, 1);
              }
            }, e.prototype.dispatchEvent = function(e) {
              var t = e.type.toLowerCase();
              if (e.target = this, this.listeners[t]) for (var r = 0, n = this.listeners[t]; r < n.length; r++) n[r].call(this, e);
              var i = this["on" + t];
              return i && i.call(this, e), !0;
            }, e;
          }();
          t.XMLHttpRequestEventTarget = r;
        },
        7983: function(e, t, r) {
          "use strict";
          var n, i = r(8764).Buffer, o = this && this.__extends || (n = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function(e, t) {
            e.__proto__ = t;
          } || function(e, t) {
            for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
          }, function(e, t) {
            function r() {
              this.constructor = e;
            }
            n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
          });
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var s = function(e) {
            function t() {
              var t = e.call(this) || this;
              return t._contentType = null, t._body = null, t._reset(), t;
            }
            return o(t, e), t.prototype._reset = function() {
              this._contentType = null, this._body = null;
            }, t.prototype._setData = function(e) {
              if (null != e) if ("string" == typeof e) 0 !== e.length && (this._contentType = "text/plain;charset=UTF-8"), this._body = new i(e, "utf-8"); else if (i.isBuffer(e)) this._body = e; else if (e instanceof ArrayBuffer) {
                for (var t = new i(e.byteLength), r = new Uint8Array(e), n = 0; n < e.byteLength; n++) t[n] = r[n];
                this._body = t;
              } else {
                if (!(e.buffer && e.buffer instanceof ArrayBuffer)) throw new Error("Unsupported send() data " + e);
                t = new i(e.byteLength);
                var o = e.byteOffset;
                for (r = new Uint8Array(e.buffer), n = 0; n < e.byteLength; n++) t[n] = r[n + o];
                this._body = t;
              }
            }, t.prototype._finalizeHeaders = function(e, t) {
              this._contentType && !t["content-type"] && (e["Content-Type"] = this._contentType), this._body && (e["Content-Length"] = this._body.length.toString());
            }, t.prototype._startUpload = function(e) {
              this._body && e.write(this._body), e.end();
            }, t;
          }(r(335).XMLHttpRequestEventTarget);
          t.XMLHttpRequestUpload = s;
        },
        6763: function(e, t, r) {
          "use strict";
          var i, o = r(4155), s = r(8764).Buffer, a = this && this.__extends || (i = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function(e, t) {
            e.__proto__ = t;
          } || function(e, t) {
            for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
          }, function(e, t) {
            function r() {
              this.constructor = e;
            }
            i(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
          }), c = this && this.__assign || Object.assign || function(e) {
            for (var t, r = 1, n = arguments.length; r < n; r++) for (var i in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
            return e;
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var f = r(8501), u = r(9267), h = r(7435), d = r(8575), l = r(7296), p = r(8355), b = r(335), y = r(7983), g = r(7866), m = function(e) {
            function t(r) {
              void 0 === r && (r = {});
              var n = e.call(this) || this;
              return n.UNSENT = t.UNSENT, n.OPENED = t.OPENED, n.HEADERS_RECEIVED = t.HEADERS_RECEIVED, n.LOADING = t.LOADING, n.DONE = t.DONE, 
              n.onreadystatechange = null, n.readyState = t.UNSENT, n.response = null, n.responseText = "", n.responseType = "", n.status = 0, 
              n.statusText = "", n.timeout = 0, n.upload = new y.XMLHttpRequestUpload, n.responseUrl = "", n.withCredentials = !1, n._method = null, 
              n._url = null, n._sync = !1, n._headers = {}, n._loweredHeaders = {}, n._mimeOverride = null, n._request = null, n._response = null, 
              n._responseParts = null, n._responseHeaders = null, n._aborting = null, n._error = null, n._loadedBytes = 0, n._totalBytes = 0, 
              n._lengthComputable = !1, n._restrictedMethods = {
                CONNECT: !0,
                TRACE: !0,
                TRACK: !0
              }, n._restrictedHeaders = {
                "accept-charset": !0,
                "accept-encoding": !0,
                "access-control-request-headers": !0,
                "access-control-request-method": !0,
                connection: !0,
                "content-length": !0,
                cookie: !0,
                cookie2: !0,
                date: !0,
                dnt: !0,
                expect: !0,
                host: !0,
                "keep-alive": !0,
                origin: !0,
                referer: !0,
                te: !0,
                trailer: !0,
                "transfer-encoding": !0,
                upgrade: !0,
                "user-agent": !0,
                via: !0
              }, n._privateHeaders = {
                "set-cookie": !0,
                "set-cookie2": !0
              }, n._userAgent = "Mozilla/5.0 (" + h.type() + " " + h.arch() + ") node.js/" + o.versions.node + " v8/" + o.versions.v8, 
              n._anonymous = r.anon || !1, n;
            }
            return a(t, e), t.prototype.open = function(e, r, n, i, o) {
              if (void 0 === n && (n = !0), e = e.toUpperCase(), this._restrictedMethods[e]) throw new t.SecurityError("HTTP method " + e + " is not allowed in XHR");
              var s = this._parseUrl(r, i, o);
              this.readyState === t.HEADERS_RECEIVED || (this.readyState, t.LOADING), this._method = e, this._url = s, this._sync = !n, 
              this._headers = {}, this._loweredHeaders = {}, this._mimeOverride = null, this._setReadyState(t.OPENED), this._request = null, 
              this._response = null, this.status = 0, this.statusText = "", this._responseParts = [], this._responseHeaders = null, this._loadedBytes = 0, 
              this._totalBytes = 0, this._lengthComputable = !1;
            }, t.prototype.setRequestHeader = function(e, r) {
              if (this.readyState !== t.OPENED) throw new t.InvalidStateError("XHR readyState must be OPENED");
              var i = e.toLowerCase();
              this._restrictedHeaders[i] || /^sec-/.test(i) || /^proxy-/.test(i) ? n.warn('Refused to set unsafe header "' + e + '"') : (r = r.toString(), 
              null != this._loweredHeaders[i] ? (e = this._loweredHeaders[i], this._headers[e] = this._headers[e] + ", " + r) : (this._loweredHeaders[i] = e, 
              this._headers[e] = r));
            }, t.prototype.send = function(e) {
              if (this.readyState !== t.OPENED) throw new t.InvalidStateError("XHR readyState must be OPENED");
              if (this._request) throw new t.InvalidStateError("send() already called");
              switch (this._url.protocol) {
               case "file:":
                return this._sendFile(e);

               case "http:":
               case "https:":
                return this._sendHttp(e);

               default:
                throw new t.NetworkError("Unsupported protocol " + this._url.protocol);
              }
            }, t.prototype.abort = function() {
              null != this._request && (this._request.abort(), this._setError(), this._dispatchProgress("abort"), this._dispatchProgress("loadend"));
            }, t.prototype.getResponseHeader = function(e) {
              if (null == this._responseHeaders || null == e) return null;
              var t = e.toLowerCase();
              return this._responseHeaders.hasOwnProperty(t) ? this._responseHeaders[e.toLowerCase()] : null;
            }, t.prototype.getAllResponseHeaders = function() {
              var e = this;
              return null == this._responseHeaders ? "" : Object.keys(this._responseHeaders).map((function(t) {
                return t + ": " + e._responseHeaders[t];
              })).join("\r\n");
            }, t.prototype.overrideMimeType = function(e) {
              if (this.readyState === t.LOADING || this.readyState === t.DONE) throw new t.InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
              this._mimeOverride = e.toLowerCase();
            }, t.prototype.nodejsSet = function(e) {
              if (this.nodejsHttpAgent = e.httpAgent || this.nodejsHttpAgent, this.nodejsHttpsAgent = e.httpsAgent || this.nodejsHttpsAgent, 
              e.hasOwnProperty("baseUrl")) {
                if (null != e.baseUrl && !d.parse(e.baseUrl, !1, !0).protocol) throw new t.SyntaxError("baseUrl must be an absolute URL");
                this.nodejsBaseUrl = e.baseUrl;
              }
            }, t.nodejsSet = function(e) {
              t.prototype.nodejsSet(e);
            }, t.prototype._setReadyState = function(e) {
              this.readyState = e, this.dispatchEvent(new l.ProgressEvent("readystatechange"));
            }, t.prototype._sendFile = function(e) {
              throw new Error("Protocol file: not implemented");
            }, t.prototype._sendHttp = function(e) {
              if (this._sync) throw new Error("Synchronous XHR processing not implemented");
              !e || "GET" !== this._method && "HEAD" !== this._method ? e = e || "" : (n.warn("Discarding entity body for " + this._method + " requests"), 
              e = null), this.upload._setData(e), this._finalizeHeaders(), this._sendHxxpRequest();
            }, t.prototype._sendHxxpRequest = function() {
              var e = this;
              if (this.withCredentials) {
                var r = t.cookieJar.getCookies(g.CookieAccessInfo(this._url.hostname, this._url.pathname, "https:" === this._url.protocol)).toValueString();
                this._headers.cookie = this._headers.cookie2 = r;
              }
              var n = "http:" === this._url.protocol ? [ f, this.nodejsHttpAgent ] : [ u, this.nodejsHttpsAgent ], i = n[0], o = n[1], s = i.request.bind(i)({
                hostname: this._url.hostname,
                port: +this._url.port,
                path: this._url.path,
                auth: this._url.auth,
                method: this._method,
                headers: this._headers,
                agent: o
              });
              this._request = s, this.timeout && s.setTimeout(this.timeout, (function() {
                return e._onHttpTimeout(s);
              })), s.on("response", (function(t) {
                return e._onHttpResponse(s, t);
              })), s.on("error", (function(t) {
                return e._onHttpRequestError(s, t);
              })), this.upload._startUpload(s), this._request === s && this._dispatchProgress("loadstart");
            }, t.prototype._finalizeHeaders = function() {
              this._headers = c({}, this._headers, {
                Connection: "keep-alive",
                Host: this._url.host,
                "User-Agent": this._userAgent
              }, this._anonymous ? {
                Referer: "about:blank"
              } : {}), this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
            }, t.prototype._onHttpResponse = function(e, r) {
              var n = this;
              if (this._request === e) {
                if (this.withCredentials && (r.headers["set-cookie"] || r.headers["set-cookie2"]) && t.cookieJar.setCookies(r.headers["set-cookie"] || r.headers["set-cookie2"]), 
                [ 301, 302, 303, 307, 308 ].indexOf(r.statusCode) >= 0) return this._url = this._parseUrl(r.headers.location), this._method = "GET", 
                this._loweredHeaders["content-type"] && (delete this._headers[this._loweredHeaders["content-type"]], delete this._loweredHeaders["content-type"]), 
                null != this._headers["Content-Type"] && delete this._headers["Content-Type"], delete this._headers["Content-Length"], this.upload._reset(), 
                this._finalizeHeaders(), void this._sendHxxpRequest();
                this._response = r, this._response.on("data", (function(e) {
                  return n._onHttpResponseData(r, e);
                })), this._response.on("end", (function() {
                  return n._onHttpResponseEnd(r);
                })), this._response.on("close", (function() {
                  return n._onHttpResponseClose(r);
                })), this.responseUrl = this._url.href.split("#")[0], this.status = r.statusCode, this.statusText = f.STATUS_CODES[this.status], 
                this._parseResponseHeaders(r);
                var i = this._responseHeaders["content-length"] || "";
                this._totalBytes = +i, this._lengthComputable = !!i, this._setReadyState(t.HEADERS_RECEIVED);
              }
            }, t.prototype._onHttpResponseData = function(e, r) {
              this._response === e && (this._responseParts.push(new s(r)), this._loadedBytes += r.length, this.readyState !== t.LOADING && this._setReadyState(t.LOADING), 
              this._dispatchProgress("progress"));
            }, t.prototype._onHttpResponseEnd = function(e) {
              this._response === e && (this._parseResponse(), this._request = null, this._response = null, this._setReadyState(t.DONE), 
              this._dispatchProgress("load"), this._dispatchProgress("loadend"));
            }, t.prototype._onHttpResponseClose = function(e) {
              if (this._response === e) {
                var r = this._request;
                this._setError(), r.abort(), this._setReadyState(t.DONE), this._dispatchProgress("error"), this._dispatchProgress("loadend");
              }
            }, t.prototype._onHttpTimeout = function(e) {
              this._request === e && (this._setError(), e.abort(), this._setReadyState(t.DONE), this._dispatchProgress("timeout"), this._dispatchProgress("loadend"));
            }, t.prototype._onHttpRequestError = function(e, r) {
              this._request === e && (this._setError(), e.abort(), this._setReadyState(t.DONE), this._dispatchProgress("error"), this._dispatchProgress("loadend"));
            }, t.prototype._dispatchProgress = function(e) {
              var r = new t.ProgressEvent(e);
              r.lengthComputable = this._lengthComputable, r.loaded = this._loadedBytes, r.total = this._totalBytes, this.dispatchEvent(r);
            }, t.prototype._setError = function() {
              this._request = null, this._response = null, this._responseHeaders = null, this._responseParts = null;
            }, t.prototype._parseUrl = function(e, t, r) {
              var n = null == this.nodejsBaseUrl ? e : d.resolve(this.nodejsBaseUrl, e), i = d.parse(n, !1, !0);
              i.hash = null;
              var o = (i.auth || "").split(":"), s = o[0], a = o[1];
              return (s || a || t || r) && (i.auth = (t || s || "") + ":" + (r || a || "")), i;
            }, t.prototype._parseResponseHeaders = function(e) {
              for (var t in this._responseHeaders = {}, e.headers) {
                var r = t.toLowerCase();
                this._privateHeaders[r] || (this._responseHeaders[r] = e.headers[t]);
              }
              null != this._mimeOverride && (this._responseHeaders["content-type"] = this._mimeOverride);
            }, t.prototype._parseResponse = function() {
              var e = s.concat(this._responseParts);
              switch (this._responseParts = null, this.responseType) {
               case "json":
                this.responseText = null;
                try {
                  this.response = JSON.parse(e.toString("utf-8"));
                } catch (e) {
                  this.response = null;
                }
                return;

               case "buffer":
                return this.responseText = null, void (this.response = e);

               case "arraybuffer":
                this.responseText = null;
                for (var t = new ArrayBuffer(e.length), r = new Uint8Array(t), n = 0; n < e.length; n++) r[n] = e[n];
                return void (this.response = t);

               default:
                try {
                  this.responseText = e.toString(this._parseResponseEncoding());
                } catch (t) {
                  this.responseText = e.toString("binary");
                }
                this.response = this.responseText;
              }
            }, t.prototype._parseResponseEncoding = function() {
              return /;\s*charset=(.*)$/.exec(this._responseHeaders["content-type"] || "")[1] || "utf-8";
            }, t.ProgressEvent = l.ProgressEvent, t.InvalidStateError = p.InvalidStateError, t.NetworkError = p.NetworkError, t.SecurityError = p.SecurityError, 
            t.SyntaxError = p.SyntaxError, t.XMLHttpRequestUpload = y.XMLHttpRequestUpload, t.UNSENT = 0, t.OPENED = 1, t.HEADERS_RECEIVED = 2, 
            t.LOADING = 3, t.DONE = 4, t.cookieJar = g.CookieJar(), t;
          }(b.XMLHttpRequestEventTarget);
          t.XMLHttpRequest = m, m.prototype.nodejsHttpAgent = f.globalAgent, m.prototype.nodejsHttpsAgent = u.globalAgent, m.prototype.nodejsBaseUrl = null;
        },
        7529: e => {
          e.exports = function() {
            for (var e = {}, r = 0; r < arguments.length; r++) {
              var n = arguments[r];
              for (var i in n) t.call(n, i) && (e[i] = n[i]);
            }
            return e;
          };
          var t = Object.prototype.hasOwnProperty;
        },
        6601: () => {},
        9214: () => {},
        1156: () => {},
        2361: () => {},
        4616: () => {},
        522: () => {},
        6882: () => {},
        3083: (e, t, r) => {
          "use strict";
          var n = [ "BigInt64Array", "BigUint64Array", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray" ], i = "undefined" == typeof globalThis ? r.g : globalThis;
          e.exports = function() {
            for (var e = [], t = 0; t < n.length; t++) "function" == typeof i[n[t]] && (e[e.length] = n[t]);
            return e;
          };
        },
        882: (e, t, r) => {
          "use strict";
          var n = r(210)("%Object.getOwnPropertyDescriptor%", !0);
          if (n) try {
            n([], "length");
          } catch (e) {
            n = null;
          }
          e.exports = n;
        },
        4946: e => {
          "use strict";
          e.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');
        },
        5207: e => {
          "use strict";
          e.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');
        },
        1308: e => {
          "use strict";
          e.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');
        },
        9799: e => {
          "use strict";
          e.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');
        },
        8597: e => {
          "use strict";
          e.exports = {
            i8: "6.5.4"
          };
        },
        2562: e => {
          "use strict";
          e.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');
        }
      }, t = {};
      function r(n) {
        var i = t[n];
        if (void 0 !== i) return i.exports;
        var o = t[n] = {
          id: n,
          loaded: !1,
          exports: {}
        };
        return e[n].call(o.exports, o, o.exports, r), o.loaded = !0, o.exports;
      }
      r.amdO = {}, r.n = e => {
        var t = e && e.__esModule ? () => e.default : () => e;
        return r.d(t, {
          a: t
        }), t;
      }, r.d = (e, t) => {
        for (var n in t) r.o(t, n) && !r.o(e, n) && Object.defineProperty(e, n, {
          enumerable: !0,
          get: t[n]
        });
      }, r.g = function() {
        if ("object" == typeof globalThis) return globalThis;
        try {
          return this || new Function("return this")();
        } catch (e) {
          if ("object" == typeof window) return window;
        }
      }(), r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), r.r = e => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
          value: "Module"
        }), Object.defineProperty(e, "__esModule", {
          value: !0
        });
      }, r.nmd = e => (e.paths = [], e.children || (e.children = []), e);
      var i = {};
      return (() => {
        "use strict";
        function e(e, t, r) {
          return t in e ? Object.defineProperty(e, t, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
          }) : e[t] = r, e;
        }
        r.d(i, {
          default: () => xt
        });
        var t = r(1692), n = r.n(t), o = r(8269);
        const s = {
          ROPSTEN: "ropsten",
          MAINNET: "mainnet",
          POLYGON: "polygon-mainnet"
        }, a = [ {
          inputs: [ {
            internalType: "string",
            name: "_verifier",
            type: "string"
          }, {
            internalType: "bytes32",
            name: "hashedVerifierId",
            type: "bytes32"
          } ],
          name: "getNodeSet",
          outputs: [ {
            internalType: "uint256",
            name: "currentEpoch",
            type: "uint256"
          }, {
            internalType: "string[]",
            name: "torusNodeEndpoints",
            type: "string[]"
          }, {
            internalType: "uint256[]",
            name: "torusNodePubX",
            type: "uint256[]"
          }, {
            internalType: "uint256[]",
            name: "torusNodePubY",
            type: "uint256[]"
          }, {
            internalType: "uint256[]",
            name: "torusIndexes",
            type: "uint256[]"
          } ],
          stateMutability: "view",
          type: "function"
        } ];
        class c {
          constructor() {
            let t, {network: r = s.MAINNET, proxyAddress: i = c.PROXY_ADDRESS_MAINNET} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e(this, "_currentEpoch", ""), e(this, "_torusNodeEndpoints", []), e(this, "_torusNodePub", []), e(this, "_torusIndexes", []), 
            e(this, "nodeListAddress", void 0), e(this, "updated", void 0), e(this, "nodeListContract", void 0);
            try {
              t = new URL(r).href;
            } catch (e) {
              const i = "b8cdb0e4cff24599a286bf8e87ff1c96";
              t = "https://".concat(r, ".infura.io/v3/").concat(i);
            }
            n().setProvider(t), this.nodeListContract = new (n())(a, i), this.nodeListAddress = i, this.updated = !1;
          }
          get _nodeDetails() {
            return {
              currentEpoch: this._currentEpoch,
              nodeListAddress: this.nodeListAddress,
              torusNodeEndpoints: this._torusNodeEndpoints,
              torusNodePub: this._torusNodePub,
              torusIndexes: this._torusIndexes,
              updated: this.updated
            };
          }
          async getNodeDetails(e) {
            let {verifier: t, verifierId: r} = e;
            try {
              if (this.updated && (this.nodeListAddress === c.PROXY_ADDRESS_MAINNET || this.nodeListAddress === c.PROXY_ADDRESS_ROPSTEN)) return this._nodeDetails;
              const e = (0, o.keccak256)(r), n = await this.nodeListContract.methods.getNodeSet(t, e).call(), {currentEpoch: i, torusNodeEndpoints: s, torusNodePubX: a, torusNodePubY: f, torusIndexes: u} = n;
              this._currentEpoch = i, this._torusIndexes = u.map((e => Number(e)));
              const h = [], d = [];
              for (let t = 0; t < s.length; t += 1) {
                const e = s[t], r = a[t], n = f[t], i = "https://".concat(e.split(":")[0], "/jrpc");
                h.push(i), d.push({
                  X: (0, o.toHex)(r).replace("0x", ""),
                  Y: (0, o.toHex)(n).replace("0x", "")
                });
              }
              return this._torusNodeEndpoints = h, this._torusNodePub = d, this.updated = !0, this._nodeDetails;
            } catch (e) {
              if (this.nodeListAddress === c.PROXY_ADDRESS_MAINNET) return c.NODE_DETAILS_MAINNET;
              throw e;
            }
          }
        }
        e(c, "PROXY_ADDRESS_MAINNET", "0xf20336e16B5182637f09821c27BDe29b0AFcfe80"), e(c, "PROXY_ADDRESS_ROPSTEN", "0x6258c9d6c12ed3edda59a1a6527e469517744aa7"), 
        e(c, "PROXY_ADDRESS_POLYGON", "0x9f072ba19b3370e512aa1b4bfcdaf97283168005"), e(c, "NODE_DETAILS_MAINNET", {
          currentEpoch: "19",
          nodeListAddress: c.PROXY_ADDRESS_MAINNET,
          torusNodeEndpoints: [ "https://torus-19.torusnode.com/jrpc", "https://torus-node.ens.domains/jrpc", "https://torus-node.matic.network/jrpc", "https://torus.zilliqa.network/jrpc", "https://torus-mainnet.cosmos.network/jrpc", "https://torus2.etherscan.com/jrpc", "https://torus-node-v2.skalelabs.com/jrpc", "https://torus-node.binancex.dev/jrpc", "https://torusnode.ont.io/jrpc" ],
          torusIndexes: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
          torusNodePub: [ {
            X: "bbe83c64177c3775550e6ba6ac2bc059f6847d644c9e4894e42c60d7974d8c2b",
            Y: "82b49a7caf70def38cdad2740af45c1e4f969650105c5019a29bb18b21a9acb5"
          }, {
            X: "c208cac4ef9a47d386097a9c915b28e9cb89213abee8d26a17198ee261201b0d",
            Y: "c7db2fe4631109f40833de9dc78d07e35706549ee48fa557b33e4e75e1047873"
          }, {
            X: "ca1766bb426d4ca5582818a0c5439d560ea64f5baa060793ab29dd3d0ceacfe",
            Y: "d46c1d08c40e1306e1bca328c2287b8268166b11a1ba4b8442ea2ad0c5e32152"
          }, {
            X: "c3934dd2f6f4b3d2e1e398cc501e143c1e1a381b52feb6d1525af34d16253768",
            Y: "71f5141a5035799099f5ea3e241e66946bc55dc857ac3bd7d6fcdb8dcd3eeeef"
          }, {
            X: "22e66f1929631d00bf026227581597f085fd94fd952fc0dca9f0833398b5c064",
            Y: "6088b3912e10a1e9d50355a609c10db7d188f16a2e2fd7357e51bf4f6a74f0a1"
          }, {
            X: "9dc9fa410f3ce9eb70df70cdea00a49f2c4cc7a31c08c0dab5f863ed35ff5139",
            Y: "627a291cb87a75c61da3f65d6818e1e05e360217179817ed27e8c73bca7ec122"
          }, {
            X: "118b9fc07e97b096d899b9f6658463ce6a8caa64038e37fc969df4e6023dd8c6",
            Y: "baf9fa4e51770f4796ea165dd03a769b8606681a38954a0a92c4cbffd6609ce9"
          }, {
            X: "8a6d8b925da15a273dec3d8f8395ec35cd6878f274b2b180e4e106999db64043",
            Y: "96f67f870c157743da0b1eb84d89bf30500d74dc84c11f501ee1cb013acc8c46"
          }, {
            X: "39cecb62e863729f572f7dfc46c24867981bf04bb405fed0df39e33984bfade5",
            Y: "61c2364434012e68a2be2e9952805037e52629d7762fafc8e10e9fb5bad8f790"
          } ],
          updated: !1
        });
        var f = r(2378), u = r.n(f), h = r(2043), d = r.n(h);
        function l(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function p(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? l(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : l(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        const b = d().getLogger("http-helpers");
        b.setLevel(h.levels.INFO);
        let y = "torus-default", g = "";
        function m(e) {
          y = e;
        }
        async function v(e, t) {
          let r = null;
          try {
            r = new URL(e);
          } catch (e) {}
          return fetch(e, t);
        }
        function w() {
          const e = {};
          return y && (e["x-api-key"] = y), g && (e["x-embed-host"] = g), e;
        }
        function _(e) {
          b.info("Response: ".concat(e.status, " ").concat(e.statusText)), b.info("Url: ".concat(e.url));
        }
        const S = (e, t) => {
          const r = new Promise(((t, r) => {
            const n = setTimeout((() => {
              clearTimeout(n), r(new Error("Timed out in ".concat(e, "ms")));
            }), e);
          }));
          return Promise.race([ t, r ]);
        }, E = async function(e) {
          let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          const n = {
            mode: "cors",
            headers: {}
          };
          r.useAPIKey && (n.headers = p(p({}, n.headers), w()));
          const i = u()(n, t, {
            method: "GET"
          }), o = await v(e, i);
          if (o.ok) return o.json();
          throw _(o), o;
        }, A = function(e) {
          let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
          const i = {
            mode: "cors",
            headers: {
              "Content-Type": "application/json; charset=utf-8"
            }
          };
          n.useAPIKey && (i.headers = p(p({}, i.headers), w()));
          const o = u()(i, r, {
            method: "POST"
          });
          return n.isUrlEncodedData ? (o.body = t, "application/json; charset=utf-8" === o.headers["Content-Type"] && delete o.headers["Content-Type"]) : o.body = JSON.stringify(t), 
          S(n.timeout || 6e4, v(e, o).then((e => {
            if (e.ok) return e.json();
            throw _(e), e;
          })));
        }, x = (e, t) => ({
          jsonrpc: "2.0",
          method: e,
          id: 10,
          params: t
        });
        var k = r(8473), P = r(1798), O = r.n(P), M = (r(3363), r(5811)), I = r.n(M);
        r(8764).Buffer, URL;
        var T = r(7187), R = r(4445), C = r.n(R), N = r(9826), j = r(2840), B = r.n(j), L = r(778), D = r.n(L), U = r(4286), q = r.n(U);
        function F() {}
        const H = "ACK";
        class z extends k.Duplex {
          constructor(t) {
            let {name: r, target: n, targetWindow: i = window, targetOrigin: o = "*"} = t;
            if (super({
              objectMode: !0
            }), e(this, "_init", void 0), e(this, "_haveSyn", void 0), e(this, "_name", void 0), e(this, "_target", void 0), e(this, "_targetWindow", void 0), 
            e(this, "_targetOrigin", void 0), e(this, "_onMessage", void 0), e(this, "_synIntervalId", void 0), !r || !n) throw new Error("Invalid input.");
            this._init = !1, this._haveSyn = !1, this._name = r, this._target = n, this._targetWindow = i, this._targetOrigin = o, this._onMessage = this.onMessage.bind(this), 
            this._synIntervalId = null, window.addEventListener("message", this._onMessage, !1), this._handShake();
          }
          _break() {
            this.cork(), this._write("BRK", null, F), this._haveSyn = !1, this._init = !1;
          }
          _handShake() {
            this._write("SYN", null, F), this.cork();
          }
          _onData(e) {
            if (this._init) if ("BRK" === e) this._break(); else try {
              this.push(e);
            } catch (e) {
              this.emit("error", e);
            } else "SYN" === e ? (this._haveSyn = !0, this._write(H, null, F)) : e === H && (this._init = !0, this._haveSyn || this._write(H, null, F), 
            this.uncork());
          }
          _postMessage(e) {
            const t = this._targetOrigin;
            this._targetWindow.postMessage({
              target: this._target,
              data: e
            }, t);
          }
          onMessage(e) {
            const t = e.data;
            "*" !== this._targetOrigin && e.origin !== this._targetOrigin || e.source !== this._targetWindow || "object" != typeof t || t.target !== this._name || !t.data || this._onData(t.data);
          }
          _read() {}
          _write(e, t, r) {
            this._postMessage(e), r();
          }
          _destroy() {
            window.removeEventListener("message", this._onMessage, !1);
          }
        }
        function K(e, t, r) {
          try {
            Reflect.apply(e, t, r);
          } catch (e) {
            setTimeout((() => {
              throw e;
            }));
          }
        }
        class V extends T.EventEmitter {
          emit(e) {
            let t = "error" === e;
            const r = this._events;
            if (void 0 !== r) t = t && void 0 === r.error; else if (!t) return !1;
            for (var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) i[o - 1] = arguments[o];
            if (t) {
              let e;
              if (i.length > 0 && ([e] = i), e instanceof Error) throw e;
              const t = new Error("Unhandled error.".concat(e ? " (".concat(e.message, ")") : ""));
              throw t.context = e, t;
            }
            const s = r[e];
            if (void 0 === s) return !1;
            if ("function" == typeof s) K(s, this, i); else {
              const e = s.length, t = function(e) {
                const t = e.length, r = new Array(t);
                for (let n = 0; n < t; n += 1) r[n] = e[n];
                return r;
              }(s);
              for (let r = 0; r < e; r += 1) K(t[r], this, i);
            }
            return !0;
          }
        }
        class G extends Error {
          constructor(t) {
            let {code: r, message: n, data: i} = t;
            if (!Number.isInteger(r)) throw new Error("code must be an integer");
            if (!n || "string" != typeof n) throw new Error("message must be string");
            super(n), e(this, "code", void 0), e(this, "data", void 0), this.code = r, void 0 !== i && (this.data = i);
          }
          toString() {
            return C()({
              code: this.code,
              message: this.message,
              data: this.data,
              stack: this.stack
            });
          }
        }
        function W(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        class X extends V {
          constructor() {
            super(), e(this, "_middleware", void 0), this._middleware = [];
          }
          static async _runAllMiddleware(e, t, r) {
            const n = [];
            let i = null, o = !1;
            for (const s of r) if ([i, o] = await X._runMiddleware(e, t, s, n), o) break;
            return [ i, o, n.reverse() ];
          }
          static _runMiddleware(e, t, r, n) {
            return new Promise((i => {
              const o = e => {
                const r = e || t.error;
                r && (t.error = (0, N.Xy)(r)), i([ r, !0 ]);
              }, s = e => {
                t.error ? o(t.error) : (e && ("function" != typeof e && o(new G({
                  code: -32603,
                  message: "JRPCEngine: 'next' return handlers must be functions"
                })), n.push(e)), i([ null, !1 ]));
              };
              try {
                r(e, t, s, o);
              } catch (e) {
                o(e);
              }
            }));
          }
          static async _runReturnHandlers(e) {
            for (const t of e) await new Promise(((e, r) => {
              t((t => t ? r(t) : e()));
            }));
          }
          static _checkForCompletion(e, t, r) {
            if (!("result" in t) && !("error" in t)) throw new G({
              code: -32603,
              message: "Response has no error or result for request"
            });
            if (!r) throw new G({
              code: -32603,
              message: "Nothing ended request"
            });
          }
          push(e) {
            this._middleware.push(e);
          }
          handle(e, t) {
            if (t && "function" != typeof t) throw new Error('"callback" must be a function if provided.');
            return Array.isArray(e) ? t ? this._handleBatch(e, t) : this._handleBatch(e) : t ? this._handle(e, t) : this._promiseHandle(e);
          }
          asMiddleware() {
            return async (e, t, r, n) => {
              try {
                const [i, o, s] = await X._runAllMiddleware(e, t, this._middleware);
                return o ? (await X._runReturnHandlers(s), n(i)) : r((async e => {
                  try {
                    await X._runReturnHandlers(s);
                  } catch (t) {
                    return e(t);
                  }
                  return e();
                }));
              } catch (e) {
                return n(e);
              }
            };
          }
          async _handleBatch(e, t) {
            try {
              const r = await Promise.all(e.map(this._promiseHandle.bind(this)));
              return t ? t(null, r) : r;
            } catch (e) {
              if (t) return t(e);
              throw e;
            }
          }
          _promiseHandle(e) {
            return new Promise((t => {
              this._handle(e, ((e, r) => {
                t(r);
              }));
            }));
          }
          async _handle(t, r) {
            if (!t || Array.isArray(t) || "object" != typeof t) {
              const e = new G({
                code: -32603,
                message: "request must be plain object"
              });
              return r(e, {
                id: void 0,
                jsonrpc: "2.0",
                error: e
              });
            }
            if ("string" != typeof t.method) {
              const e = new G({
                code: -32603,
                message: "method must be string"
              });
              return r(e, {
                id: t.id,
                jsonrpc: "2.0",
                error: e
              });
            }
            const n = function(t) {
              for (var r = 1; r < arguments.length; r++) {
                var n = null != arguments[r] ? arguments[r] : {};
                r % 2 ? W(Object(n), !0).forEach((function(r) {
                  e(t, r, n[r]);
                })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : W(Object(n)).forEach((function(e) {
                  Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
                }));
              }
              return t;
            }({}, t), i = {
              id: n.id,
              jsonrpc: n.jsonrpc
            };
            let o = null;
            try {
              await this._processRequest(n, i);
            } catch (e) {
              o = e;
            }
            return o && (delete i.result, i.error || (i.error = (0, N.Xy)(o))), r(o, i);
          }
          async _processRequest(e, t) {
            const [r, n, i] = await X._runAllMiddleware(e, t, this._middleware);
            if (X._checkForCompletion(e, t, n), await X._runReturnHandlers(i), r) throw r;
          }
        }
        class Y extends k.Duplex {
          constructor(t) {
            let {parent: r, name: n} = t;
            super({
              objectMode: !0
            }), e(this, "_parent", void 0), e(this, "_name", void 0), this._parent = r, this._name = n;
          }
          _read() {}
          _write(e, t, r) {
            this._parent.push({
              name: this._name,
              data: e
            }), r();
          }
        }
        function J(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function $(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? J(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : J(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        const Z = Symbol("IGNORE_SUBSTREAM");
        class Q extends k.Duplex {
          constructor() {
            super($($({}, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}), {}, {
              objectMode: !0
            })), e(this, "_substreams", void 0), e(this, "getStream", void 0), this._substreams = {};
          }
          createStream(e) {
            if (!e) throw new Error("ObjectMultiplex - name must not be empty");
            if (this._substreams[e]) throw new Error('ObjectMultiplex - Substream for name "'.concat(e, '" already exists'));
            const t = new Y({
              parent: this,
              name: e
            });
            return this._substreams[e] = t, function(e, r) {
              const n = D()((e => t.destroy(e || void 0)));
              B()(e, {
                readable: !1
              }, n), B()(e, {
                writable: !1
              }, n);
            }(this), t;
          }
          ignoreStream(e) {
            if (!e) throw new Error("ObjectMultiplex - name must not be empty");
            if (this._substreams[e]) throw new Error('ObjectMultiplex - Substream for name "'.concat(e, '" already exists'));
            this._substreams[e] = Z;
          }
          _read() {}
          _write(e, t, r) {
            const {name: n, data: i} = e;
            if (!n) return window.console.warn('ObjectMultiplex - malformed chunk without name "'.concat(e, '"')), r();
            const o = this._substreams[n];
            return o ? (o !== Z && o.push(i), r()) : (window.console.warn('ObjectMultiplex - orphaned data for stream "'.concat(n, '"')), 
            r());
          }
        }
        var ee = r(2450), te = r(3550), re = r.n(te), ne = r(6266), ie = r(7266), oe = r.n(ie), se = r(8764).Buffer;
        const ae = d().getLogger("torus.js");
        ae.disableAll();
        class ce extends Error {
          constructor(t) {
            let {errors: r, responses: n, predicate: i} = t;
            super("Unable to resolve enough promises."), e(this, "errors", void 0), e(this, "responses", void 0), e(this, "predicate", void 0), 
            this.errors = r, this.responses = n, this.predicate = i;
          }
        }
        const fe = (e, t) => new Promise(((r, n) => {
          let i = 0;
          const o = {
            resolved: !1
          }, s = new Array(e.length).fill(void 0), a = new Array(e.length).fill(void 0);
          let c;
          return e.forEach(((f, u) => f.then((e => {
            a[u] = e;
          })).catch((e => {
            s[u] = e;
          })).finally((() => {
            if (!o.resolved) return t(a.slice(0), o).then((e => {
              o.resolved = !0, r(e);
            })).catch((e => {
              c = e;
            })).finally((() => {
              if (i += 1, i === e.length) {
                const e = Object.values(a.reduce(((e, t) => {
                  if (t) {
                    var r;
                    const {id: i, error: o} = t;
                    (null == o || null === (r = o.data) || void 0 === r ? void 0 : r.length) > 0 && (o.data.startsWith("Error occurred while verifying params") ? e[i] = (n = o.data).charAt(0).toUpperCase() + n.slice(1) : e[i] = o.data);
                  }
                  var n;
                  return e;
                }), {}));
                if (e.length > 0) {
                  const t = e.length > 1 ? `\n${e.map((e => `• ${e}`)).join("\n")}` : e[0];
                  n(new Error(t));
                } else {
                  var t;
                  n(new ce({
                    errors: s,
                    responses: a,
                    predicate: (null === (t = c) || void 0 === t ? void 0 : t.message) || c
                  }));
                }
              }
            }));
          }))));
        }));
        function ue(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function he(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? ue(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : ue(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        class de extends Error {}
        const le = (e, t) => {
          let r = e;
          if ("number" == typeof r && (r = Array.from({
            length: r
          }, ((e, t) => t))), t > r.length || t <= 0) return [];
          if (t === r.length) return [ r ];
          if (1 === t) return r.reduce(((e, t) => [ ...e, [ t ] ]), []);
          const n = [];
          let i = [];
          for (let o = 0; o <= r.length - t + 1; o += 1) {
            i = le(r.slice(o + 1), t - 1);
            for (let e = 0; e < i.length; e += 1) n.push([ r[o], ...i[e] ]);
          }
          return n;
        }, pe = (e, t) => {
          const r = {};
          for (let n = 0; n < e.length; n += 1) {
            const i = oe()(e[n]);
            if (r[i] = r[i] ? r[i] + 1 : 1, r[i] === t) return e[n];
          }
        }, be = async (e, t, r) => {
          const n = e.map((e => A(e, x("VerifierLookupRequest", {
            verifier: t,
            verifier_id: r.toString()
          })).catch((e => ae.error("lookup request failed", e)))));
          return fe(n, (t => {
            const r = t.filter((e => e)), n = pe(r.map((e => e && e.error)), 1 + ~~(e.length / 2)), i = pe(r.map((e => e && e.result)), 1 + ~~(e.length / 2));
            return i || n ? Promise.resolve({
              keyResult: i,
              errorResult: n
            }) : Promise.reject(new Error(`invalid results ${JSON.stringify(t)}`));
          }));
        }, ye = (e, t, r, n) => new Promise(((i, o) => {
          setTimeout((() => {
            be(e, t, r).then(i).catch(o);
          }), n);
        })), ge = async e => {
          let t, r, {endpoints: n, torusNodePubs: i, lastPoint: o, firstPoint: s, verifier: a, verifierId: c, signerHost: f, network: u} = e;
          if (void 0 === o ? (t = Math.floor(Math.random() * n.length), r = t) : t = o % n.length, t === s) throw new Error("Looped through all");
          void 0 !== s && (r = s);
          const h = x("KeyAssign", {
            verifier: a,
            verifier_id: c.toString()
          });
          try {
            const e = await A(f, h, {
              headers: {
                pubKeyX: i[t].X,
                pubKeyY: i[t].Y,
                network: u
              }
            }, {
              useAPIKey: !0
            });
            return await A(n[t], he(he({}, h), e), {
              headers: {
                "Content-Type": "application/json; charset=utf-8"
              }
            });
          } catch (e) {
            if (ae.error(e), [ "Timed out", "TypeError: Failed to fetch", "TypeError: cancelled", "TypeError: NetworkError when attempting to fetch resource." ].includes(e.message)) return ge({
              endpoints: n,
              torusNodePubs: i,
              lastPoint: t + 1,
              firstPoint: r,
              verifier: a,
              verifierId: c,
              signerHost: f,
              network: u
            });
            throw new Error(`Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \n\n    ${e.message || ""}`);
          }
        };
        function me(e) {
          return `0x${I()("keccak256").update(e).digest().toString("hex")}`;
        }
        function ve(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function we(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? ve(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : ve(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        class _e {
          constructor() {
            let {enableOneKey: t = !1, metadataHost: r = "https://metadata.tor.us", allowHost: n = "https://signer.tor.us/api/allow", signerHost: i = "https://signer.tor.us/api/sign", serverTimeOffset: o = 0, network: s = "mainnet"} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e(this, "metadataHost", void 0), e(this, "allowHost", void 0), e(this, "serverTimeOffset", void 0), e(this, "enableOneKey", void 0), 
            e(this, "signerHost", void 0), e(this, "network", void 0), e(this, "ec", void 0), this.ec = new ne.ec("secp256k1"), this.metadataHost = r, 
            this.allowHost = n, this.enableOneKey = t, this.serverTimeOffset = o || 0, this.signerHost = i, this.network = s;
          }
          static enableLogging() {
            arguments.length > 0 && void 0 !== arguments[0] && !arguments[0] ? ae.disableAll() : ae.enableAll();
          }
          static setAPIKey(e) {
            m(e);
          }
          static setEmbedHost(e) {
            !function(e) {
              g = e;
            }(e);
          }
          static isGetOrSetNonceError(e) {
            return e instanceof de;
          }
          async getUserTypeAndAddress(e, t, r) {
            let {verifier: n, verifierId: i} = r, o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            const {keyResult: s, errorResult: a} = await be(e, n, i) || {};
            let c, f = !1;
            if (a && JSON.stringify(a).includes("Verifier + VerifierID has not yet been assigned")) {
              if (!o) throw new Error("Verifier + VerifierID has not yet been assigned");
              await ge({
                endpoints: e,
                torusNodePubs: t,
                lastPoint: void 0,
                firstPoint: void 0,
                verifier: n,
                verifierId: i,
                signerHost: this.signerHost,
                network: this.network
              });
              const r = await ye(e, n, i, 1e3);
              c = null == r ? void 0 : r.keyResult, f = !0;
            } else {
              if (!s) throw new Error(`node results do not match at first lookup ${JSON.stringify(s || {})}, ${JSON.stringify(a || {})}`);
              c = s;
            }
            if (c) {
              const {pub_key_X: e, pub_key_Y: t} = c.keys[0];
              let r, n, i;
              try {
                r = await this.getOrSetNonce(e, t, void 0, !f), n = new (re())(r.nonce || "0", 16);
              } catch {
                throw new de;
              }
              if ("v1" === r.typeOfUser) i = this.ec.keyFromPublic({
                x: e,
                y: t
              }).getPublic().add(this.ec.keyFromPrivate(n.toString(16)).getPublic()); else {
                if ("v2" !== r.typeOfUser) throw new Error("getOrSetNonce should always return typeOfUser.");
                i = this.ec.keyFromPublic({
                  x: e,
                  y: t
                }).getPublic().add(this.ec.keyFromPublic({
                  x: r.pubNonce.x,
                  y: r.pubNonce.y
                }).getPublic());
              }
              const o = i.getX().toString(16), s = i.getY().toString(16), a = this.generateAddressFromPubKey(i.getX(), i.getY());
              if ("v1" === r.typeOfUser) return {
                typeOfUser: r.typeOfUser,
                nonce: n,
                X: o,
                Y: s,
                address: a
              };
              if ("v2" === r.typeOfUser) return {
                typeOfUser: r.typeOfUser,
                nonce: n,
                pubNonce: r.pubNonce,
                upgraded: r.upgraded,
                X: o,
                Y: s,
                address: a
              };
            }
            throw new Error(`node results do not match at final lookup ${JSON.stringify(s || {})}, ${JSON.stringify(a || {})}`);
          }
          async setCustomKey(e) {
            let t, {privKeyHex: r, metadataNonce: n, torusKeyHex: i, customKeyHex: o} = e;
            t = i ? new (re())(i, 16) : new (re())(r, 16).sub(n).umod(this.ec.curve.n);
            const s = new (re())(o, 16).sub(t).umod(this.ec.curve.n), a = this.generateMetadataParams(s.toString(16), t);
            await this.setMetadata(a);
          }
          async retrieveShares(e, t, r, n, i) {
            let o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {};
            const s = [];
            await E(this.allowHost, {
              headers: {
                verifier: r,
                verifier_id: n.verifier_id,
                network: this.network
              }
            }, {
              useAPIKey: !0
            });
            const a = (0, ee.oq)(), c = (0, ee.rc)(a).toString("hex"), f = c.slice(2, 66), u = c.slice(66), h = me(i);
            for (let d = 0; d < e.length; d += 1) {
              const t = A(e[d], x("CommitmentRequest", {
                messageprefix: "mug00",
                tokencommitment: h.slice(2),
                temppubx: f,
                temppuby: u,
                verifieridentifier: r
              })).catch((e => {
                ae.error("commitment", e);
              }));
              s.push(t);
            }
            return fe(s, (t => t.filter((e => !(!e || "object" != typeof e || e.error))).length >= 3 * ~~(e.length / 4) + 1 ? Promise.resolve(t) : Promise.reject(new Error(`invalid ${JSON.stringify(t)}`)))).then((s => {
              const c = [], f = [];
              for (let e = 0; e < s.length; e += 1) s[e] && f.push(s[e].result);
              for (let t = 0; t < e.length; t += 1) {
                const s = A(e[t], x("ShareRequest", {
                  encrypted: "yes",
                  item: [ we(we({}, n), {}, {
                    idtoken: i,
                    nodesignatures: f,
                    verifieridentifier: r
                  }, o) ]
                })).catch((e => ae.error("share req", e)));
                c.push(s);
              }
              return fe(c, (async (r, n) => {
                const i = r.filter((e => e)), o = pe(r.map((e => e && e.result && e.result.keys[0].PublicKey)), 1 + ~~(e.length / 2));
                if (i.length >= 1 + ~~(e.length / 2) && o) {
                  const i = [], f = [];
                  for (let e = 0; e < r.length; e += 1) {
                    var s, c;
                    const n = r[e];
                    if ((null == n || null === (s = n.result) || void 0 === s || null === (c = s.keys) || void 0 === c ? void 0 : c.length) > 0) {
                      n.result.keys.sort(((e, t) => new (re())(e.Index, 16).cmp(new (re())(t.Index, 16))));
                      const e = n.result.keys[0];
                      if (e.Metadata) {
                        const t = {
                          ephemPublicKey: se.from(e.Metadata.ephemPublicKey, "hex"),
                          iv: se.from(e.Metadata.iv, "hex"),
                          mac: se.from(e.Metadata.mac, "hex")
                        };
                        i.push((0, ee.pe)(a, we(we({}, t), {}, {
                          ciphertext: se.from(se.from(e.Share, "base64").toString("binary").padStart(64, "0"), "hex")
                        })).catch((e => ae.debug("share decryption", e))));
                      } else i.push(Promise.resolve(se.from(e.Share.padStart(64, "0"), "hex")));
                    } else i.push(Promise.resolve(void 0));
                    f.push(new (re())(t[e], 16));
                  }
                  const u = await Promise.all(i);
                  if (n.resolved) return;
                  const h = u.reduce(((e, t, r) => (t && e.push({
                    index: f[r],
                    value: new (re())(t)
                  }), e)), []), d = le(h.length, 1 + ~~(e.length / 2));
                  let l = null;
                  for (let e = 0; e < d.length; e += 1) {
                    const t = d[e], r = h.filter(((e, r) => t.includes(r))), n = r.map((e => e.value)), i = r.map((e => e.index)), s = this.lagrangeInterpolation(n, i);
                    if (!s) continue;
                    const a = (0, ee.rc)(se.from(s.toString(16, 64), "hex")).toString("hex"), c = a.slice(2, 66), f = a.slice(66);
                    if (0 === new (re())(c, 16).cmp(new (re())(o.X, 16)) && 0 === new (re())(f, 16).cmp(new (re())(o.Y, 16))) {
                      l = s;
                      break;
                    }
                  }
                  if (null == l) throw new Error("could not derive private key");
                  return l;
                }
                throw new Error("invalid");
              }));
            })).then((async e => {
              let t = e;
              if (!t) throw new Error("Invalid private key returned");
              const r = (0, ee.rc)(se.from(t.toString(16, 64), "hex")).toString("hex"), n = r.slice(2, 66), i = r.slice(66);
              let o;
              if (this.enableOneKey) {
                const {nonce: e} = await this.getNonce(n, i, t);
                o = new (re())(e || "0", 16);
              } else o = await this.getMetadata({
                pub_key_X: n,
                pub_key_Y: i
              });
              ae.debug("> torus.js/retrieveShares", {
                privKey: t.toString(16),
                metadataNonce: o.toString(16)
              }), t = t.add(o).umod(this.ec.curve.n);
              const s = this.generateAddressFromPrivKey(t);
              return ae.debug("> torus.js/retrieveShares", {
                ethAddress: s,
                privKey: t.toString(16)
              }), {
                ethAddress: s,
                privKey: t.toString("hex", 64),
                metadataNonce: o
              };
            }));
          }
          async getMetadata(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            try {
              const r = await A(`${this.metadataHost}/get`, e, t, {
                useAPIKey: !0
              });
              return r && r.message ? new (re())(r.message, 16) : new (re())(0);
            } catch (e) {
              return ae.error("get metadata error", e), new (re())(0);
            }
          }
          generateMetadataParams(e, t) {
            const r = this.ec.keyFromPrivate(t.toString("hex", 64)), n = {
              data: e,
              timestamp: new (re())(~~(this.serverTimeOffset + Date.now() / 1e3)).toString(16)
            }, i = r.sign(me(oe()(n)).slice(2));
            return {
              pub_key_X: r.getPublic().getX().toString("hex"),
              pub_key_Y: r.getPublic().getY().toString("hex"),
              set_data: n,
              signature: se.from(i.r.toString(16, 64) + i.s.toString(16, 64) + new (re())("").toString(16, 2), "hex").toString("base64")
            };
          }
          async setMetadata(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            try {
              return (await A(`${this.metadataHost}/set`, e, t, {
                useAPIKey: !0
              })).message;
            } catch (e) {
              return ae.error("set metadata error", e), "";
            }
          }
          lagrangeInterpolation(e, t) {
            if (e.length !== t.length) return null;
            let r = new (re())(0);
            for (let n = 0; n < e.length; n += 1) {
              let i = new (re())(1), o = new (re())(1);
              for (let r = 0; r < e.length; r += 1) if (n !== r) {
                i = i.mul(t[r].neg()), i = i.umod(this.ec.curve.n);
                let e = t[n].sub(t[r]);
                e = e.umod(this.ec.curve.n), o = o.mul(e).umod(this.ec.curve.n);
              }
              let s = i.mul(o.invm(this.ec.curve.n)).umod(this.ec.curve.n);
              s = s.mul(e[n]).umod(this.ec.curve.n), r = r.add(s);
            }
            return r.umod(this.ec.curve.n);
          }
          generateAddressFromPrivKey(e) {
            const t = this.ec.keyFromPrivate(e.toString("hex", 64), "hex").getPublic().encode("hex", !1).slice(2);
            ae.info(t, "public key");
            const r = `0x${me(se.from(t, "hex")).slice(26)}`;
            return (0, o.toChecksumAddress)(r);
          }
          generateAddressFromPubKey(e, t) {
            const r = this.ec.keyFromPublic({
              x: e.toString("hex", 64),
              y: t.toString("hex", 64)
            }), n = r.getPublic().encode("hex", !1).slice(2);
            ae.info(r.getPublic().encode("hex", !1), "public key");
            const i = `0x${me(se.from(n, "hex")).slice(26)}`;
            return (0, o.toChecksumAddress)(i);
          }
          async getPublicAddress(e, t, r) {
            let n, {verifier: i, verifierId: o} = r, s = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            ae.debug("> torus.js/getPublicAddress", {
              endpoints: e,
              torusNodePubs: t,
              verifier: i,
              verifierId: o,
              isExtended: s
            });
            let a = !1;
            const {keyResult: c, errorResult: f} = await be(e, i, o) || {};
            if (f && JSON.stringify(f).includes("Verifier not supported")) throw new Error("Verifier not supported. Check if you: \n\n      1. Are on the right network (Torus testnet/mainnet) \n\n      2. Have setup a verifier on dashboard.web3auth.io?");
            if (f && JSON.stringify(f).includes("Verifier + VerifierID has not yet been assigned")) {
              await ge({
                endpoints: e,
                torusNodePubs: t,
                lastPoint: void 0,
                firstPoint: void 0,
                verifier: i,
                verifierId: o,
                signerHost: this.signerHost,
                network: this.network
              });
              const r = await ye(e, i, o, 1e3);
              n = null == r ? void 0 : r.keyResult, a = !0;
            } else {
              if (!c) throw new Error(`node results do not match at first lookup ${JSON.stringify(c || {})}, ${JSON.stringify(f || {})}`);
              n = c;
            }
            if (ae.debug("> torus.js/getPublicAddress", {
              finalKeyResult: n,
              isNewKey: a
            }), n) {
              var u;
              let e, t, r, i, o, {pub_key_X: c, pub_key_Y: f} = n.keys[0];
              if (this.enableOneKey) {
                try {
                  e = await this.getOrSetNonce(c, f, void 0, !a), t = new (re())(e.nonce || "0", 16), i = e.typeOfUser;
                } catch {
                  throw new de;
                }
                if ("v1" === e.typeOfUser) r = this.ec.keyFromPublic({
                  x: c,
                  y: f
                }).getPublic().add(this.ec.keyFromPrivate(t.toString(16)).getPublic()); else {
                  if ("v2" !== e.typeOfUser) throw new Error("getOrSetNonce should always return typeOfUser.");
                  e.upgraded ? r = this.ec.keyFromPublic({
                    x: c,
                    y: f
                  }).getPublic() : (r = this.ec.keyFromPublic({
                    x: c,
                    y: f
                  }).getPublic().add(this.ec.keyFromPublic({
                    x: e.pubNonce.x,
                    y: e.pubNonce.y
                  }).getPublic()), o = e.pubNonce);
                }
              } else i = "v1", t = await this.getMetadata({
                pub_key_X: c,
                pub_key_Y: f
              }), r = this.ec.keyFromPublic({
                x: c,
                y: f
              }).getPublic().add(this.ec.keyFromPrivate(t.toString(16)).getPublic());
              c = r.getX().toString(16), f = r.getY().toString(16);
              const h = this.generateAddressFromPubKey(r.getX(), r.getY());
              return ae.debug("> torus.js/getPublicAddress", {
                X: c,
                Y: f,
                address: h,
                typeOfUser: i,
                nonce: null === (u = t) || void 0 === u ? void 0 : u.toString(16),
                pubNonce: o
              }), s ? {
                typeOfUser: i,
                address: h,
                X: c,
                Y: f,
                metadataNonce: t,
                pubNonce: o
              } : h;
            }
            throw new Error(`node results do not match at final lookup ${JSON.stringify(c || {})}, ${JSON.stringify(f || {})}`);
          }
          async getOrSetNonce(e, t, r) {
            let n;
            const i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3] ? "getNonce" : "getOrSetNonce";
            return n = r ? this.generateMetadataParams(i, r) : {
              pub_key_X: e,
              pub_key_Y: t,
              set_data: {
                data: i
              }
            }, A(`${this.metadataHost}/get_or_set_nonce`, n, void 0, {
              useAPIKey: !0
            });
          }
          async getNonce(e, t, r) {
            return this.getOrSetNonce(e, t, r, !0);
          }
          getPostboxKeyFrom1OutOf1(e, t) {
            const r = new (re())(e, 16), n = new (re())(t, 16);
            return r.sub(n).umod(this.ec.curve.n).toString("hex");
          }
        }
        const Se = {
          GOOGLE: "google",
          FACEBOOK: "facebook",
          TWITCH: "twitch",
          REDDIT: "reddit",
          DISCORD: "discord",
          EMAIL_PASSWORDLESS: "torus-auth0-email-passwordless"
        }, Ee = {
          [Se.GOOGLE]: "tkey-google",
          [Se.FACEBOOK]: "tkey-facebook",
          [Se.TWITCH]: "tkey-twitch",
          [Se.REDDIT]: "tkey-reddit",
          [Se.DISCORD]: "tkey-discord",
          [Se.EMAIL_PASSWORDLESS]: "tkey-auth0-email-passwordless"
        }, Ae = "moonpay", xe = "wyre", ke = "rampnetwork", Pe = "xanpool", Oe = "mercuryo", Me = "transak", Ie = "mainnet", Te = "matic", Re = "bsc_mainnet", Ce = "avalanche_mainnet", Ne = {
          PRODUCTION: "production",
          DEVELOPMENT: "development",
          BINANCE: "binance",
          TESTING: "testing",
          LRC: "lrc",
          BETA: "beta"
        }, je = {
          BOTTOM_LEFT: "bottom-left",
          TOP_LEFT: "top-left",
          BOTTOM_RIGHT: "bottom-right",
          TOP_RIGHT: "top-right"
        }, Be = {
          [Ae]: [ "AUD", "BGN", "BRL", "CAD", "CHF", "CNY", "COP", "CZK", "DKK", "DOP", "EGP", "EUR", "GBP", "HKD", "HRK", "IDR", "ILS", "JPY", "JOD", "KES", "KRW", "KWD", "LKR", "MAD", "MXN", "MYR", "NGN", "NOK", "NZD", "OMR", "PEN", "PKR", "PLN", "RON", "RUB", "SEK", "SGD", "THB", "TRY", "TWD", "USD", "VND", "ZAR" ],
          [xe]: [ "USD", "EUR", "GBP", "AUD", "CAD", "NZD", "ARS", "BRL", "CHF", "CLP", "COP", "CZK", "DKK", "HKD", "ILS", "INR", "ISK", "JPY", "KRW", "MXN", "MYR", "NOK", "PHP", "PLN", "SEK", "THB", "VND", "ZAR" ],
          [ke]: [ "USD", "EUR", "GBP" ],
          [Pe]: [ "SGD", "HKD", "THB", "PHP", "INR", "IDR", "MYR", "AUD", "NZD", "KRW" ],
          [Oe]: [ "EUR", "USD", "GBP", "TRY", "JPY", "BRL", "NGN", "VND", "MXN", "KRW" ],
          [Me]: [ "ARS", "AUD", "BBD", "BGN", "BMD", "BRL", "CAD", "CHF", "CLP", "CRC", "CZK", "DKK", "DOP", "EUR", "FJD", "FKP", "GBP", "GIP", "HRK", "HUF", "IDR", "ILS", "ISK", "JMD", "JPY", "KES", "KRW", "MDL", "MXN", "MYR", "NOK", "NZD", "PEN", "PHP", "PLN", "PYG", "RON", "SEK", "SGD", "THB", "TRY", "TZS", "USD", "ZAR" ]
        }, Le = new Set([ "ETH", "USDT", "USDC", "TUSD", "EOSDT", "USD", "DAI", "GUSD", "DKKT", "PAX", "ILS", "RUB", "BYN", "EUR", "GBP", "JPY", "KRW", "PLN", "MXN", "AUD", "BRL", "CAD", "CHF", "KPW", "LAK", "LBP", "LKR", "XOF", "CNHT", "DOGE", "UAH", "TRY", "HKD", "XJP", "SGD", "USC", "NZD", "NGN", "RUR", "COP", "GHS", "EGP", "IDR", "BHD", "CRC", "PEN", "AED", "DOP", "PKR", "HUF", "VND", "XAR", "LTC", "RON", "OMR", "MYR", "DKK", "UGX", "ZMW", "SAR", "SEK", "GEL", "RWF", "IRR", "TZS", "CNY", "VEF", "BDT", "HRK", "CLP", "THB", "XAF", "ARS", "UYU", "SZL", "KZT", "NOK", "KES", "PAB", "INR", "CZK", "MAD", "TWD", "PHP", "ZAR", "BOB", "CDF", "DASH", "VES", "ISK", "MWK", "BAM", "TTD", "XRP", "JOD", "RSD", "HNL", "BGN", "GTQ", "BWP", "XMR", "MMK", "QAR", "AOA", "KWD", "MUR", "WUSD", "WEUR", "WAVES", "WTRY", "LRD", "LSL", "LYD", "AWG", "MDL", "BTO", "EURS", "CHFT", "MKD", "MNT", "MOP", "MRO", "MVR", "VOLLAR", "CKUSD", "KHR", "VUV", "BITCNY", "QC", "BBD", "NAD", "NPR", "PGK", "PYG", "BIF", "BMD", "BND", "XLM", "BNB", "SCR", "BAT", "CRO", "HT", "KCS", "LEO", "LINK", "MKR", "NPXS", "OMG", "REP", "ZB", "ZIL", "ZRX", "BCH", "BZD", "CUP", "CVE", "DJF", "DZD", "ERN", "ETB", "FJD", "FKP", "BUSD", "ANCT", "ALL", "AMD", "ANG", "CNYX", "IQD", "UZS", "TND", "GGP", "XAU", "KGS", "GIP", "JMD", "ZEC", "USDP", "BSV", "EMC2", "SNT", "GTO", "POWR", "EUSD", "EURT", "BCY", "BTS", "ATM", "BLOCKPAY", "ARDR", "AMP", "B2X", "BITGOLD", "BITEUR", "ATB", "BITUSD", "AGRS", "DFXT", "HIKEN", "BIX", "KNC", "EOS", "COB", "COSS", "BMH", "NANO", "BDG", "BNT", "XVG", "LKK1Y", "LKK", "USDK", "EURN", "NZDT", "JSE", "GMD", "GNF", "GYD", "YER", "XPF", "HTG", "SLL", "SOS", "WST", "SVC", "SYP", "NEO", "KMF", "JUMP", "AYA", "BLAST", "WGR", "BCN", "BTG", "URALS", "INN", "USDQ", "CNH", "HUSD", "BKRW", "NZDX", "EURX", "CADX", "USDEX", "JPYX", "AUDX", "VNDC", "EON", "GBPX", "CHFX", "USDJ", "IDRT", "USDS", "USDN", "BIDR", "IDK", "BSD", "BTN", "KYD", "NIO", "SBD", "SDG", "SHP", "TOP", "XCD", "XCHF", "CNYT", "GYEN", "ZUSD", "GOLD", "TRX", "TRYB", "PLATC", "STRAX", "UST", "GLM", "VAI", "BRZ", "DDRST", "XAUT", "MIM" ]);
        function De(e) {
          return Be[e].filter((e => Le.has(e)));
        }
        const Ue = {
          [Ae]: {
            line1: "Credit/ Debit Card/ Apple Pay",
            line2: "4.5% or 5 USD",
            line3: "2,000€/day, 10,000€/mo",
            supportPage: "https://help.moonpay.io/en/",
            minOrderValue: 24.99,
            maxOrderValue: 5e4,
            validCurrencies: De(Ae),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "aave",
                display: "AAVE"
              }, {
                value: "bat",
                display: "BAT"
              }, {
                value: "dai",
                display: "DAI"
              }, {
                value: "eth",
                display: "ETH"
              }, {
                value: "mkr",
                display: "MKR"
              }, {
                value: "matic",
                display: "MATIC"
              }, {
                value: "usdt",
                display: "USDT"
              }, {
                value: "usdc",
                display: "USDC"
              } ],
              [Te]: [ {
                value: "eth_polygon",
                display: "ETH"
              }, {
                value: "matic_polygon",
                display: "MATIC"
              }, {
                value: "usdc_polygon",
                display: "USDC"
              } ],
              [Re]: [ {
                value: "bnb_bsc",
                display: "BNB"
              }, {
                value: "busd_bsc",
                display: "BUSD"
              } ],
              [Ce]: [ {
                value: "avax_cchain",
                display: "AVAX"
              } ]
            },
            includeFees: !0,
            api: !0,
            enforceMax: !1
          },
          [xe]: {
            line1: "Apple Pay/ Debit/ Credit Card",
            line2: "4.9% + 30¢ or 5 USD",
            line3: "$250/day",
            supportPage: "https://support.sendwyre.com/en/",
            minOrderValue: 5,
            maxOrderValue: 500,
            validCurrencies: De(xe),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "AAVE",
                display: "AAVE"
              }, {
                value: "BAT",
                display: "BAT"
              }, {
                value: "BUSD",
                display: "BUSD"
              }, {
                value: "DAI",
                display: "DAI"
              }, {
                value: "ETH",
                display: "ETH"
              }, {
                value: "MKR",
                display: "MKR"
              }, {
                value: "UNI",
                display: "UNI"
              }, {
                value: "USDC",
                display: "USDC"
              }, {
                value: "USDT",
                display: "USDT"
              } ],
              [Te]: [ {
                value: "MUSDC",
                display: "USDC"
              } ],
              [Ce]: [ {
                value: "AVAXC",
                display: "AVAXC"
              } ]
            },
            includeFees: !1,
            api: !0,
            enforceMax: !1
          },
          [ke]: {
            line1: "Debit Card/ <br>Apple Pay/ Bank transfer",
            line2: "0.49% - 2.9%",
            line3: "5,000€/purchase, 20,000€/mo",
            supportPage: "https://instant.ramp.network/",
            minOrderValue: 50,
            maxOrderValue: 2e4,
            validCurrencies: De(ke),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "ETH",
                display: "ETH"
              }, {
                value: "DAI",
                display: "DAI"
              }, {
                value: "USDC",
                display: "USDC"
              }, {
                value: "USDT",
                display: "USDT"
              } ],
              [Te]: [ {
                value: "MATIC_DAI",
                display: "DAI"
              }, {
                value: "MATIC_MATIC",
                display: "MATIC"
              }, {
                value: "MATIC_USDC",
                display: "USDC"
              } ],
              [Ce]: [ {
                value: "AVAX",
                display: "AVAX"
              } ]
            },
            includeFees: !0,
            api: !0,
            receiveHint: "walletTopUp.receiveHintRamp",
            enforceMax: !1
          },
          [Pe]: {
            line1: "PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ <br>ViettelPay/ DuitNow",
            line2: "2.5% buying, 3% selling",
            line3: "$2,500 / day",
            supportPage: "mailto:support@xanpool.com",
            minOrderValue: 100,
            maxOrderValue: 2500,
            validCurrencies: De(Pe),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "ETH",
                display: "ETH"
              }, {
                value: "USDT",
                display: "USDT"
              } ]
            },
            includeFees: !0,
            api: !0,
            sell: !0,
            enforceMax: !1
          },
          [Oe]: {
            line1: "Credit/ Debit Card/ Apple Pay",
            line2: "3.95% or 4 USD",
            line3: "10,000€/day, 25,000€/mo",
            supportPage: "mailto:support@mercuryo.io",
            minOrderValue: 30,
            maxOrderValue: 5e3,
            validCurrencies: De(Oe),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "ETH",
                display: "ETH"
              }, {
                value: "BAT",
                display: "BAT"
              }, {
                value: "USDT",
                display: "USDT"
              }, {
                value: "DAI",
                display: "DAI"
              } ],
              [Re]: [ {
                value: "BNB",
                display: "BNB"
              }, {
                value: "BUSD",
                display: "BUSD"
              }, {
                value: "1INCH",
                display: "1INCH"
              } ]
            },
            includeFees: !0,
            api: !0,
            enforceMax: !1
          },
          [Me]: {
            line1: "Credit/ Debit Card/ <br/>Bank Transfer (sepa/gbp)",
            line2: "0.99% - 5.5% or 5 USD",
            line3: "500€/day",
            supportPage: "https://support.transak.com/hc/en-US",
            minOrderValue: 30,
            maxOrderValue: 500,
            validCurrencies: De(Me),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "AAVE",
                display: "AAVE"
              }, {
                value: "DAI",
                display: "DAI"
              }, {
                value: "ETH",
                display: "ETH"
              }, {
                value: "USDC",
                display: "USDC"
              }, {
                value: "USDT",
                display: "USDT"
              } ],
              [Te]: [ {
                value: "AAVE",
                display: "AAVE"
              }, {
                value: "DAI",
                display: "DAI"
              }, {
                value: "MATIC",
                display: "MATIC"
              }, {
                value: "USDC",
                display: "USDC"
              }, {
                value: "USDT",
                display: "USDT"
              }, {
                value: "WETH",
                display: "WETH"
              } ],
              [Re]: [ {
                value: "BNB",
                display: "BNB"
              }, {
                value: "BUSD",
                display: "BUSD"
              } ],
              [Ce]: [ {
                value: "AVAX",
                display: "AVAX"
              } ]
            },
            includeFees: !0,
            enforceMax: !0
          }
        }, qe = {
          supportedVerifierList: Object.values(Se),
          paymentProviders: Ue,
          api: "https://api.tor.us",
          translations: {
            en: {
              embed: {
                continue: "Continue",
                actionRequired: "Authorization required",
                pendingAction: "Click continue to proceed with your request in a popup",
                cookiesRequired: "Cookies Required",
                enableCookies: "Please enable cookies in your browser preferences to access Torus",
                clickHere: "More Info"
              }
            },
            de: {
              embed: {
                continue: "Fortsetzen",
                actionRequired: "Autorisierung erforderlich",
                pendingAction: "Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren",
                cookiesRequired: "Cookies benötigt",
                enableCookies: "Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen",
                clickHere: "Mehr Info"
              }
            },
            ja: {
              embed: {
                continue: "継続する",
                actionRequired: "認証が必要です",
                pendingAction: "続行をクリックして、ポップアップでリクエストを続行します",
                cookiesRequired: "必要なクッキー",
                enableCookies: "Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。",
                clickHere: "詳しくは"
              }
            },
            ko: {
              embed: {
                continue: "계속하다",
                actionRequired: "승인 필요",
                pendingAction: "팝업에서 요청을 진행하려면 계속을 클릭하십시오.",
                cookiesRequired: "쿠키 필요",
                enableCookies: "브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.",
                clickHere: "더 많은 정보"
              }
            },
            zh: {
              embed: {
                continue: "继续",
                actionRequired: "需要授权",
                pendingAction: "单击继续以在弹出窗口中继续您的请求",
                cookiesRequired: "必填Cookie",
                enableCookies: "请在您的浏览器首选项中启用cookie以访问Torus。",
                clickHere: "更多信息"
              }
            }
          },
          prodTorusUrl: "",
          localStorageKeyPrefix: "torus-"
        }, Fe = e => new Promise(((t, r) => {
          null != window.document.body ? Promise.resolve(e()).then(t).catch(r) : window.document.addEventListener("DOMContentLoaded", (() => {
            Promise.resolve(e()).then(t).catch(r);
          }));
        })), He = e => {
          const t = window.document.createElement("template"), r = e.trim();
          return t.innerHTML = r, t.content.firstChild;
        }, ze = (e, t, r) => {
          const n = i => {
            r(i), e.removeListener(t, n);
          };
          e.on(t, n);
        };
        var Ke = r(2724), Ve = r(4063), Ge = r.n(Ve), We = r(4970);
        const Xe = d().getLogger("torus-embed"), Ye = {
          errors: {
            disconnected: () => "Torus: Lost connection to Torus.",
            permanentlyDisconnected: () => "Torus: Disconnected from iframe. Page reload required.",
            sendSiteMetadata: () => "Torus: Failed to send site metadata. This is an internal error, please report this bug.",
            unsupportedSync: e => "Torus: The Torus Ethereum provider does not support synchronous methods like ".concat(e, " without a callback parameter."),
            invalidDuplexStream: () => "Must provide a Node.js-style duplex stream.",
            invalidOptions: (e, t) => "Invalid options. Received: { maxEventListeners: ".concat(e, ", shouldSendMetadata: ").concat(t, " }"),
            invalidRequestArgs: () => "Expected a single, non-array, object argument.",
            invalidRequestMethod: () => "'args.method' must be a non-empty string.",
            invalidRequestParams: () => "'args.params' must be an object or array if provided.",
            invalidLoggerObject: () => "'args.logger' must be an object if provided.",
            invalidLoggerMethod: e => "'args.logger' must include required method '".concat(e, "'.")
          },
          info: {
            connected: e => 'Torus: Connected to chain with ID "'.concat(e, '".')
          },
          warnings: {
            enableDeprecation: 'Torus: ""ethereum.enable()" is deprecated and may be removed in the future. Please use "ethereum.send("eth_requestAccounts")" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102',
            sendDeprecation: 'Torus: "ethereum.send(...)" is deprecated and may be removed in the future. Please use "ethereum.sendAsync(...)" or "ethereum.request(...)" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',
            events: {
              close: 'Torus: The event "close" is deprecated and may be removed in the future. Please use "disconnect" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',
              data: 'Torus: The event "data" is deprecated and will be removed in the future.Use "message" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message',
              networkChanged: 'Torus: The event "networkChanged" is deprecated and may be removed in the future. Please use "chainChanged" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',
              notification: 'Torus: The event "notification" is deprecated and may be removed in the future. Please use "message" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193'
            },
            publicConfigStore: 'Torus: The property "publicConfigStore" is deprecated and WILL be removed in the future.'
          }
        }, {paymentProviders: Je} = qe;
        function $e(e, t, r) {
          let n = 'MetaMask: Lost connection to "'.concat(e, '".');
          null != t && t.stack && (n += "\n".concat(t.stack)), Xe.warn(n), r && r.listenerCount("error") > 0 && r.emit("error", n);
        }
        const Ze = () => Math.random().toString(36).slice(2), Qe = async (e, t) => {
          let r, n;
          const i = "1.27.2";
          let o = t.version || i;
          try {
            if (("binance" === e || "production" === e) && !t.version) {
              let e;
              e = qe.prodTorusUrl ? {
                data: qe.prodTorusUrl
              } : await E("".concat(qe.api, "/latestversion?name=@toruslabs/torus-embed&version=").concat(i), {}, {
                useAPIKey: !0
              }), o = e.data, qe.prodTorusUrl = e.data;
            }
          } catch (e) {
            Xe.error(e, "unable to fetch latest version");
          }
          switch (Xe.info("version used: ", o), e) {
           case "binance":
            r = "https://binance.tor.us/v".concat(o), n = "info";
            break;

           case "testing":
            r = "https://testing.tor.us", n = "debug";
            break;

           case "lrc":
            r = "https://lrc.tor.us", n = "debug";
            break;

           case "beta":
            r = "https://beta.tor.us", n = "debug";
            break;

           case "development":
            r = "http://localhost:4050", n = "debug";
            break;

           default:
            r = "https://app.tor.us/v".concat(o), n = "error";
          }
          return {
            torusUrl: r,
            logLevel: n
          };
        }, et = () => {
          let e = window.navigator.language || "en-US";
          const t = e.split("-");
          return e = Object.prototype.hasOwnProperty.call(qe.translations, t[0]) ? t[0] : "en", e;
        }, tt = [ "eth_subscription" ], rt = () => {}, nt = "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375", it = "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450";
        function ot(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        V.defaultMaxListeners = 100;
        const st = function(e, t) {
          let r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
          return (n, i) => n || i.error ? t(n || i.error) : !r || Array.isArray(i) ? e(i) : e(i.result);
        };
        class at extends V {
          constructor(t) {
            let {maxEventListeners: r = 100, shouldSendMetadata: n = !0, jsonRpcStreamName: i = "provider"} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (super(), e(this, "chainId", void 0), e(this, "selectedAddress", void 0), e(this, "_rpcEngine", void 0), e(this, "networkVersion", void 0), 
            e(this, "shouldSendMetadata", void 0), e(this, "isTorus", void 0), e(this, "_publicConfigStore", void 0), e(this, "tryPreopenHandle", void 0), 
            e(this, "enable", void 0), e(this, "_state", void 0), e(this, "_jsonRpcConnection", void 0), e(this, "_sentWarnings", {
              enable: !1,
              experimentalMethods: !1,
              send: !1,
              publicConfigStore: !1,
              events: {
                close: !1,
                data: !1,
                networkChanged: !1,
                notification: !1
              }
            }), !(0, We.duplex)(t)) throw new Error(Ye.errors.invalidDuplexStream());
            this.isTorus = !0, this.setMaxListeners(r), this._state = function(t) {
              for (var r = 1; r < arguments.length; r++) {
                var n = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ot(Object(n), !0).forEach((function(r) {
                  e(t, r, n[r]);
                })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : ot(Object(n)).forEach((function(e) {
                  Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
                }));
              }
              return t;
            }({}, at._defaultState), this.selectedAddress = null, this.networkVersion = null, this.chainId = null, this.shouldSendMetadata = n, 
            this._handleAccountsChanged = this._handleAccountsChanged.bind(this), this._handleChainChanged = this._handleChainChanged.bind(this), 
            this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this), this._handleConnect = this._handleConnect.bind(this), 
            this._handleDisconnect = this._handleDisconnect.bind(this), this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this), 
            this._sendSync = this._sendSync.bind(this), this._rpcRequest = this._rpcRequest.bind(this), this._warnOfDeprecation = this._warnOfDeprecation.bind(this), 
            this._initializeState = this._initializeState.bind(this), this.request = this.request.bind(this), this.send = this.send.bind(this), 
            this.sendAsync = this.sendAsync.bind(this);
            const o = new Q;
            q()(t, o, t, this._handleStreamDisconnect.bind(this, "MetaMask")), this._publicConfigStore = new Ke.ObservableStore({
              storageKey: "Metamask-Config"
            }), q()(o.createStream("publicConfig"), (0, Ke.storeAsStream)(this._publicConfigStore), $e.bind(this, "MetaMask PublicConfigStore")), 
            o.ignoreStream("phishing"), this.on("connect", (() => {
              this._state.isConnected = !0;
            }));
            const s = function() {
              const e = {}, t = new V, r = new k.Duplex({
                objectMode: !0,
                read: function() {
                  return !1;
                },
                write: function(r, n, i) {
                  let o;
                  try {
                    r.id ? function(t) {
                      const r = e[t.id];
                      if (!r) throw new Error('StreamMiddleware - Unknown response id "'.concat(t.id, '"'));
                      delete e[t.id], Object.assign(r.res, t), setTimeout(r.end);
                    }(r) : function(e) {
                      t.emit("notification", e);
                    }(r);
                  } catch (e) {
                    o = e;
                  }
                  i(o);
                }
              });
              return {
                events: t,
                middleware: (t, n, i, o) => {
                  r.push(t), e[t.id] = {
                    req: t,
                    res: n,
                    next: i,
                    end: o
                  };
                },
                stream: r
              };
            }();
            q()(s.stream, o.createStream(i), s.stream, this._handleStreamDisconnect.bind(this, "MetaMask RpcProvider"));
            const a = new X;
            a.push(((e, t, r, n) => {
              const i = e.id, o = O()(32).toString("hex");
              e.id = o, t.id = o, r((r => {
                e.id = i, t.id = i, r();
              }));
            })), a.push(((e, t, r) => {
              "string" == typeof e.method && e.method || (t.error = N.Sy.rpc.invalidRequest({
                message: "The request 'method' must be a non-empty string.",
                data: e
              })), r((e => {
                const {error: r} = t;
                return r ? (Xe.error("MetaMask - RPC Error: ".concat(r.message), r), e()) : e();
              }));
            })), a.push(s.middleware), this._rpcEngine = a, s.events.on("notification", (e => {
              const {method: t, params: r} = e;
              "wallet_accountsChanged" === t ? this._handleAccountsChanged(r) : "wallet_unlockStateChanged" === t ? this._handleUnlockStateChanged(r) : "wallet_chainChanged" === t ? this._handleChainChanged(r) : tt.includes(e.method) && (this.emit("data", e), 
              this.emit("notification", r.result), this.emit("message", {
                type: t,
                data: r
              }));
            }));
          }
          get publicConfigStore() {
            return this._sentWarnings.publicConfigStore || (Xe.warn(Ye.warnings.publicConfigStore), this._sentWarnings.publicConfigStore = !0), 
            this._publicConfigStore;
          }
          isConnected() {
            return this._state.isConnected;
          }
          async request(e) {
            if (!e || "object" != typeof e || Array.isArray(e)) throw N.Sy.rpc.invalidRequest({
              message: Ye.errors.invalidRequestArgs(),
              data: e
            });
            const {method: t, params: r} = e;
            if ("string" != typeof t || 0 === t.length) throw N.Sy.rpc.invalidRequest({
              message: Ye.errors.invalidRequestMethod(),
              data: e
            });
            if (void 0 !== r && !Array.isArray(r) && ("object" != typeof r || null === r)) throw N.Sy.rpc.invalidRequest({
              message: Ye.errors.invalidRequestParams(),
              data: e
            });
            return new Promise(((e, n) => {
              this._rpcRequest({
                method: t,
                params: r
              }, st(e, n));
            }));
          }
          sendAsync(e, t) {
            this._rpcRequest(e, t);
          }
          addListener(e, t) {
            return this._warnOfDeprecation(e), super.addListener(e, t);
          }
          on(e, t) {
            return this._warnOfDeprecation(e), super.on(e, t);
          }
          once(e, t) {
            return this._warnOfDeprecation(e), super.once(e, t);
          }
          prependListener(e, t) {
            return this._warnOfDeprecation(e), super.prependListener(e, t);
          }
          prependOnceListener(e, t) {
            return this._warnOfDeprecation(e), super.prependOnceListener(e, t);
          }
          async _initializeState() {
            try {
              const {accounts: e, chainId: t, isUnlocked: r, networkVersion: n} = await this.request({
                method: "wallet_getProviderState"
              });
              this.emit("connect", {
                chainId: t
              }), this._handleChainChanged({
                chainId: t,
                networkVersion: n
              }), this._handleUnlockStateChanged({
                accounts: e,
                isUnlocked: r
              }), this._handleAccountsChanged(e);
            } catch (e) {
              Xe.error("MetaMask: Failed to get initial state. Please report this bug.", e);
            } finally {
              Xe.info("initialized state"), this._state.initialized = !0, this.emit("_initialized");
            }
          }
          _rpcRequest(e, t) {
            let r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = t;
            const i = e;
            if (!Array.isArray(i)) if (i.jsonrpc || (i.jsonrpc = "2.0"), "eth_accounts" === i.method || "eth_requestAccounts" === i.method) n = (e, n) => {
              this._handleAccountsChanged(n.result || [], "eth_accounts" === i.method, r), t(e, n);
            }; else if ("wallet_getProviderState" === i.method) return void this._rpcEngine.handle(e, n);
            this.tryPreopenHandle(i, n);
          }
          send(e, t) {
            return this._sentWarnings.send || (Xe.warn(Ye.warnings.sendDeprecation), this._sentWarnings.send = !0), "string" != typeof e || t && !Array.isArray(t) ? e && "object" == typeof e && "function" == typeof t ? this._rpcRequest(e, t) : this._sendSync(e) : new Promise(((r, n) => {
              try {
                this._rpcRequest({
                  method: e,
                  params: t
                }, st(r, n, !1));
              } catch (e) {
                n(e);
              }
            }));
          }
          _sendSync(e) {
            let t;
            switch (e.method) {
             case "eth_accounts":
              t = this.selectedAddress ? [ this.selectedAddress ] : [];
              break;

             case "eth_coinbase":
              t = this.selectedAddress || null;
              break;

             case "eth_uninstallFilter":
              this._rpcRequest(e, rt), t = !0;
              break;

             case "net_version":
              t = this.networkVersion || null;
              break;

             default:
              throw new Error(Ye.errors.unsupportedSync(e.method));
            }
            return {
              id: e.id,
              jsonrpc: e.jsonrpc,
              result: t
            };
          }
          _handleConnect(e) {
            this._state.isConnected || (this._state.isConnected = !0, this.emit("connect", {
              chainId: e
            }), Xe.debug(Ye.info.connected(e)));
          }
          _handleDisconnect(e, t) {
            if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !e) {
              let r;
              this._state.isConnected = !1, e ? (r = new N.Cg(1013, t || Ye.errors.disconnected()), Xe.debug(r)) : (r = new N.Cg(1011, t || Ye.errors.permanentlyDisconnected()), 
              Xe.error(r), this.chainId = null, this._state.accounts = null, this.selectedAddress = null, this._state.isUnlocked = !1, 
              this._state.isPermanentlyDisconnected = !0), this.emit("disconnect", r);
            }
          }
          _handleStreamDisconnect(e, t) {
            $e(e, t, this), this._handleDisconnect(!1, t ? t.message : void 0);
          }
          _handleAccountsChanged(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = e;
            Array.isArray(n) || (Xe.error("MetaMask: Received non-array accounts parameter. Please report this bug.", n), n = []);
            for (const i of e) if ("string" != typeof i) {
              Xe.error("MetaMask: Received non-string account. Please report this bug.", e), n = [];
              break;
            }
            Ge()(this._state.accounts, n) || (t && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !r && Xe.error('MetaMask: "eth_accounts" unexpectedly updated accounts. Please report this bug.', n), 
            this._state.accounts = n, this.emit("accountsChanged", n)), this.selectedAddress !== n[0] && (this.selectedAddress = n[0] || null);
          }
          _handleChainChanged() {
            let {chainId: e, networkVersion: t} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e && t ? "loading" === t ? this._handleDisconnect(!0) : (this._handleConnect(e), e !== this.chainId && (this.chainId = e, 
            this._state.initialized && this.emit("chainChanged", this.chainId))) : Xe.error("MetaMask: Received invalid network parameters. Please report this bug.", {
              chainId: e,
              networkVersion: t
            });
          }
          _handleUnlockStateChanged() {
            let {accounts: e, isUnlocked: t} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            "boolean" == typeof t ? t !== this._state.isUnlocked && (this._state.isUnlocked = t, this._handleAccountsChanged(e || [])) : Xe.error("MetaMask: Received invalid isUnlocked parameter. Please report this bug.", {
              isUnlocked: t
            });
          }
          _warnOfDeprecation(e) {
            !1 === this._sentWarnings.events[e] && (Xe.warn(Ye.warnings.events[e]), this._sentWarnings.events[e] = !0);
          }
        }
        e(at, "_defaultState", {
          accounts: null,
          isConnected: !1,
          isUnlocked: !1,
          initialized: !1,
          isPermanentlyDisconnected: !1,
          hasEmittedConnection: !1
        });
        const ct = at;
        var ft = r(3482), ut = r.n(ft);
        const ht = (e, t) => {
          const r = {};
          return e.algorithms.forEach((e => {
            r[e] = ut()(e).update(t, "utf8").digest("base64");
          })), r;
        };
        class dt extends T.EventEmitter {
          constructor(t) {
            let {url: r, target: n, features: i} = t;
            super(), e(this, "url", void 0), e(this, "target", void 0), e(this, "features", void 0), e(this, "window", void 0), e(this, "windowTimer", void 0), 
            e(this, "iClosedWindow", void 0), this.url = r, this.target = n || "_blank", this.features = i || function() {
              const e = void 0 !== window.screenLeft ? window.screenLeft : window.screenX, t = void 0 !== window.screenTop ? window.screenTop : window.screenY, r = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width, n = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height, i = Math.abs((r - 1200) / 2 / 1 + e), o = Math.abs((n - 700) / 2 / 1 + t);
              return "titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=".concat(700, ",width=").concat(1200, ",top=").concat(o, ",left=").concat(i);
            }(), this.window = void 0, this.windowTimer = void 0, this.iClosedWindow = !1, this._setupTimer();
          }
          _setupTimer() {
            this.windowTimer = Number(setInterval((() => {
              this.window && this.window.closed && (clearInterval(this.windowTimer), this.iClosedWindow || this.emit("close"), this.iClosedWindow = !1, 
              this.window = void 0), void 0 === this.window && clearInterval(this.windowTimer);
            }), 500));
          }
          open() {
            var e;
            return this.window = window.open(this.url.href, this.target, this.features), null !== (e = this.window) && void 0 !== e && e.focus && this.window.focus(), 
            Promise.resolve();
          }
          close() {
            this.iClosedWindow = !0, this.window && this.window.close();
          }
          redirect(e) {
            e ? window.location.replace(this.url.href) : window.location.href = this.url.href;
          }
        }
        const lt = dt;
        function pt(e) {
          return new Promise(((t, r) => {
            try {
              const r = document.createElement("img");
              r.onload = () => t(!0), r.onerror = () => t(!1), r.src = e;
            } catch (e) {
              r(e);
            }
          }));
        }
        const bt = e => {
          const {document: t} = e, r = t.querySelector('head > meta[property="og:site_name"]');
          if (r) return r.content;
          const n = t.querySelector('head > meta[name="title"]');
          return n ? n.content : t.title && t.title.length > 0 ? t.title : e.location.hostname;
        };
        async function yt(e) {
          const {document: t} = e;
          let r = t.querySelector('head > link[rel="shortcut icon"]');
          return r && await pt(r.href) ? r.href : (r = Array.from(t.querySelectorAll('head > link[rel="icon"]')).find((e => Boolean(e.href))), 
          r && await pt(r.href) ? r.href : null);
        }
        var gt = r(8764).Buffer;
        const mt = [ "host", "chainId", "networkName" ];
        function vt(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function wt(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? vt(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : vt(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        const _t = {
          google: !0,
          facebook: !0,
          reddit: !0,
          twitch: !0,
          discord: !0
        }, St = "sha384-FLPj0jKrb6vIli62Ed4n/sqWhdhHMpFz3NffAV4H8uqTkzPsf4IAtKFgeVGgxb4+", Et = [ "eth_sendTransaction", "eth_signTypedData", "eth_signTypedData_v3", "eth_signTypedData_v4", "personal_sign", "eth_getEncryptionPublicKey", "eth_decrypt" ], At = function(e) {
          let t;
          try {
            t = window.localStorage;
            const e = "__storage_test__";
            return t.setItem(e, e), t.removeItem(e), !0;
          } catch (e) {
            return e && (22 === e.code || 1014 === e.code || "QuotaExceededError" === e.name || "NS_ERROR_DOM_QUOTA_REACHED" === e.name) && t && 0 !== t.length;
          }
        }();
        !async function() {
          try {
            if ("undefined" == typeof document) return;
            const e = document.createElement("link"), {torusUrl: t} = await Qe("production", {
              check: !1,
              hash: St,
              version: ""
            });
            e.href = "".concat(t, "/popup"), e.crossOrigin = "anonymous", e.type = "text/html", e.rel = "prefetch", e.relList && e.relList.supports && e.relList.supports("prefetch") && document.head.appendChild(e);
          } catch (e) {
            Xe.warn(e);
          }
        }();
        const xt = class {
          constructor() {
            let {buttonPosition: t = je.BOTTOM_LEFT, modalZIndex: r = 99999, apiKey: n = "torus-default"} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e(this, "buttonPosition", je.BOTTOM_LEFT), e(this, "torusUrl", void 0), e(this, "torusIframe", void 0), e(this, "styleLink", void 0), 
            e(this, "isLoggedIn", void 0), e(this, "isInitialized", void 0), e(this, "torusWidgetVisibility", void 0), e(this, "torusAlert", void 0), 
            e(this, "nodeDetailManager", void 0), e(this, "torusJs", void 0), e(this, "apiKey", void 0), e(this, "modalZIndex", void 0), 
            e(this, "alertZIndex", void 0), e(this, "torusAlertContainer", void 0), e(this, "isIframeFullScreen", void 0), e(this, "whiteLabel", void 0), 
            e(this, "requestedVerifier", void 0), e(this, "currentVerifier", void 0), e(this, "embedTranslations", void 0), e(this, "ethereum", void 0), 
            e(this, "provider", void 0), e(this, "communicationMux", void 0), e(this, "isLoginCallback", void 0), e(this, "dappStorageKey", void 0), 
            e(this, "paymentProviders", qe.paymentProviders), e(this, "loginHint", ""), e(this, "useWalletConnect", void 0), this.buttonPosition = t, 
            this.torusUrl = "", this.isLoggedIn = !1, this.isInitialized = !1, this.torusWidgetVisibility = !0, this.requestedVerifier = "", 
            this.currentVerifier = "", this.nodeDetailManager = new c, this.torusJs = new _e({
              metadataHost: "https://metadata.tor.us",
              allowHost: "https://signer.tor.us/api/allow",
              network: "mainnet"
            }), this.apiKey = n, _e.setAPIKey(n), m(n), this.modalZIndex = r, this.alertZIndex = r + 1e3, this.isIframeFullScreen = !1, 
            this.dappStorageKey = "";
          }
          async init() {
            let {buildEnv: e = Ne.PRODUCTION, enableLogging: t = !1, enabledVerifiers: r = _t, network: n = {
              host: "mainnet",
              chainId: null,
              networkName: "",
              blockExplorer: "",
              ticker: "",
              tickerName: ""
            }, loginConfig: i = {}, showTorusButton: o = !0, integrity: s = {
              check: !1,
              hash: St,
              version: ""
            }, whiteLabel: a, skipTKey: c = !1, useLocalStorage: f = !1, useWalletConnect: h = !1} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            if (this.isInitialized) throw new Error("Already initialized");
            const {torusUrl: d, logLevel: l} = await Qe(e, s);
            Xe.info(d, "url loaded"), this.torusUrl = d, this.whiteLabel = a, this.useWalletConnect = h, Xe.setDefaultLevel(l), t ? Xe.enableAll() : Xe.disableAll(), 
            this.torusWidgetVisibility = o;
            let p = "";
            if (At && f) {
              const e = "".concat(qe.localStorageKeyPrefix).concat(window.location.hostname), t = window.localStorage.getItem(e);
              if (t) p = t; else {
                const t = "torus-app-".concat(Ze());
                window.localStorage.setItem(e, t), p = t;
              }
            }
            this.dappStorageKey = p;
            const b = new URL(d);
            b.pathname.endsWith("/") ? b.pathname += "popup" : b.pathname += "/popup", p && (b.hash = "#dappStorageKey=".concat(p)), 
            this.torusIframe = He('<iframe\n        id="torusIframe"\n        allow='.concat(h ? "camera" : "", '\n        class="torusIframe"\n        src="').concat(b.href, '"\n        style="display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ').concat(this.modalZIndex, '"\n      ></iframe>')), 
            this.torusAlertContainer = He('<div id="torusAlertContainer"></div>'), this.torusAlertContainer.style.display = "none", 
            this.torusAlertContainer.style.setProperty("z-index", this.alertZIndex.toString());
            const y = window.document.createElement("link");
            y.setAttribute("rel", "stylesheet"), y.setAttribute("type", "text/css"), y.setAttribute("href", "".concat(d, "/css/widget.css")), 
            this.styleLink = y;
            const {defaultLanguage: g = et(), customTranslations: m = {}} = this.whiteLabel || {}, v = u()(qe.translations, m)[g] || qe.translations[et()];
            this.embedTranslations = v.embed;
            const w = async () => (await async function() {
              return new Promise((e => {
                "loading" !== document.readyState ? e() : function(e, t, r) {
                  for (var n = arguments.length, i = new Array(n > 3 ? n - 3 : 0), o = 3; o < n; o++) i[o - 3] = arguments[o];
                  const s = () => {
                    r(...i), e.removeEventListener(t, s);
                  };
                  e.addEventListener(t, s);
                }(document, "DOMContentLoaded", e);
              }));
            }(), new Promise(((e, t) => {
              this.torusIframe.onload = async () => {
                this._setupWeb3();
                const o = this.communicationMux.getStream("init_stream");
                o.on("data", (r => {
                  const {name: n, data: i, error: o} = r;
                  "init_complete" === n && i.success ? (this.isInitialized = !0, this._displayIframe(this.isIframeFullScreen), e(void 0)) : o && t(new Error(o));
                })), o.write({
                  name: "init_stream",
                  data: {
                    enabledVerifiers: r,
                    loginConfig: i,
                    whiteLabel: this.whiteLabel,
                    buttonPosition: this.buttonPosition,
                    torusWidgetVisibility: this.torusWidgetVisibility,
                    apiKey: this.apiKey,
                    skipTKey: c,
                    network: n
                  }
                });
              }, window.document.head.appendChild(this.styleLink), window.document.body.appendChild(this.torusIframe), window.document.body.appendChild(this.torusAlertContainer);
            })));
            if ("production" === e && s.check) {
              const e = "".concat(d, "/popup"), t = await fetch(e, {
                cache: "reload"
              });
              if ("max-age=3600" !== t.headers.get("Cache-Control")) throw new Error("Unexpected Cache-Control headers, got ".concat(t.headers.get("Cache-Control")));
              const r = ((e, t) => {
                const r = (e => ({
                  algorithms: e.algorithms || [ "sha256" ],
                  delimiter: e.delimiter || " ",
                  full: e.full || !1
                }))({
                  algorithms: [ "sha384" ]
                }), n = {
                  hashes: ht(r, t),
                  integrity: void 0
                };
                return n.integrity = ((e, t) => {
                  let r = "";
                  return r += Object.keys(t.hashes).map((e => "".concat(e, "-").concat(t.hashes[e]))).join(e.delimiter), r;
                })(r, n), r.full ? n : n.integrity;
              })(0, await t.text());
              if (Xe.info(r, "integrity"), r !== s.hash) throw this.clearInit(), new Error("Integrity check failed");
              await w();
            } else await w();
          }
          login() {
            let {verifier: e = "", login_hint: t = ""} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            if (!this.isInitialized) throw new Error("Call init() first");
            return this.requestedVerifier = e, this.loginHint = t, this.ethereum.enable();
          }
          logout() {
            return new Promise(((e, t) => {
              if (!this.isLoggedIn) return void t(new Error("User has not logged in yet"));
              this.communicationMux.getStream("logout").write({
                name: "logOut"
              });
              const r = this.communicationMux.getStream("status");
              ze(r, "data", (r => {
                r.loggedIn ? t(new Error("Some Error Occured")) : (this.isLoggedIn = !1, this.currentVerifier = "", this.requestedVerifier = "", 
                e());
              }));
            }));
          }
          async cleanUp() {
            this.isLoggedIn && await this.logout(), this.clearInit();
          }
          clearInit() {
            function e(e) {
              return e instanceof Element || e instanceof HTMLDocument;
            }
            e(this.styleLink) && window.document.body.contains(this.styleLink) && (this.styleLink.remove(), this.styleLink = void 0), 
            e(this.torusIframe) && window.document.body.contains(this.torusIframe) && (this.torusIframe.remove(), this.torusIframe = void 0), 
            e(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer) && (this.torusAlert = void 0, this.torusAlertContainer.remove(), 
            this.torusAlertContainer = void 0), this.isInitialized = !1;
          }
          hideTorusButton() {
            this.torusWidgetVisibility = !1, this._sendWidgetVisibilityStatus(!1), this._displayIframe();
          }
          showTorusButton() {
            this.torusWidgetVisibility = !0, this._sendWidgetVisibilityStatus(!0), this._displayIframe();
          }
          setProvider() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, {host: t = "mainnet", chainId: r = null, networkName: n = ""} = e, i = function(e, t) {
              if (null == e) return {};
              var r, n, i = function(e, t) {
                if (null == e) return {};
                var r, n, i = {}, o = Object.keys(e);
                for (n = 0; n < o.length; n++) r = o[n], t.indexOf(r) >= 0 || (i[r] = e[r]);
                return i;
              }(e, t);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                for (n = 0; n < o.length; n++) r = o[n], t.indexOf(r) >= 0 || Object.prototype.propertyIsEnumerable.call(e, r) && (i[r] = e[r]);
              }
              return i;
            }(e, mt);
            return new Promise(((e, o) => {
              const s = this.communicationMux.getStream("provider_change");
              ze(s, "data", (t => {
                const {err: r, success: n} = t.data;
                Xe.info(t), r ? o(r) : n ? e() : o(new Error("some error occured"));
              }));
              const a = Ze();
              this._handleWindow(a, {
                target: "_blank",
                features: nt
              }), s.write({
                name: "show_provider_change",
                data: {
                  network: wt({
                    host: t,
                    chainId: r,
                    networkName: n
                  }, i),
                  preopenInstanceId: a,
                  override: !1
                }
              });
            }));
          }
          showWallet(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            const r = this.communicationMux.getStream("show_wallet"), n = e ? "/".concat(e) : "";
            r.write({
              name: "show_wallet",
              data: {
                path: n
              }
            }), ze(r, "data", (e => {
              if ("show_wallet_instance" === e.name) {
                const {instanceId: r} = e.data, i = new URL("".concat(this.torusUrl, "/wallet").concat(n));
                i.searchParams.append("integrity", "true"), i.searchParams.append("instanceId", r), Object.keys(t).forEach((e => {
                  i.searchParams.append(e, t[e]);
                })), this.dappStorageKey && (i.hash = "#dappStorageKey=".concat(this.dappStorageKey)), new lt({
                  url: i,
                  features: "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315"
                }).open();
              }
            }));
          }
          async getPublicAddress(e) {
            let {verifier: t, verifierId: r, isExtended: n = !1} = e;
            if (!qe.supportedVerifierList.includes(t) || !Ee[t]) throw new Error("Unsupported verifier");
            const i = await this.nodeDetailManager.getNodeDetails({
              verifier: t,
              verifierId: r
            }), o = i.torusNodeEndpoints, s = i.torusNodePub, a = t, c = Ee[t];
            try {
              const e = await this.torusJs.getUserTypeAndAddress(o, s, {
                verifier: a,
                verifierId: r
              });
              if ("v1" === e.typeOfUser) return n ? e : e.address;
              const t = await this.torusJs.getUserTypeAndAddress(o, s, {
                verifier: c,
                verifierId: r
              }, !0);
              return n ? t : t.address;
            } catch (e) {
              if (null != e && e.message.includes("Verifier + VerifierID has not yet been assigned")) {
                const e = await this.torusJs.getUserTypeAndAddress(o, s, {
                  verifier: c,
                  verifierId: r
                }, !0);
                return n ? e : e.address;
              }
              throw e;
            }
          }
          getUserInfo(e) {
            return new Promise(((t, r) => {
              if (this.isLoggedIn) {
                const n = this.communicationMux.getStream("user_info_access");
                n.write({
                  name: "user_info_access_request"
                });
                const i = n => {
                  const {name: i, data: {approved: o, payload: s, rejected: a, newRequest: c}} = n;
                  if ("user_info_access_response" === i) if (o) t(s); else if (a) r(new Error("User rejected the request")); else if (c) {
                    const n = this.communicationMux.getStream("user_info");
                    ze(n, "data", (e => {
                      "user_info_response" === e.name && (e.data.approved ? t(e.data.payload) : r(new Error("User rejected the request")));
                    }));
                    const i = Ze();
                    this._handleWindow(i, {
                      target: "_blank",
                      features: nt
                    }), n.write({
                      name: "user_info_request",
                      data: {
                        message: e,
                        preopenInstanceId: i
                      }
                    });
                  }
                };
                ze(n, "data", i);
              } else r(new Error("User has not logged in yet"));
            }));
          }
          initiateTopup(e, t) {
            return new Promise(((r, n) => {
              if (this.isInitialized) {
                const {errors: i, isValid: o} = ((e, t) => {
                  const r = {};
                  if (!e) return {
                    errors: r,
                    isValid: !0
                  };
                  if (e && !Je[e]) return r.provider = "Invalid Provider", {
                    errors: r,
                    isValid: 0 === Object.keys(r).length
                  };
                  const n = Je[e], i = t || {};
                  if (i.fiatValue) {
                    const e = +parseFloat(i.fiatValue.toString()) || 0;
                    e < n.minOrderValue && (r.fiatValue = "Requested amount is lower than supported"), e > n.maxOrderValue && n.enforceMax && (r.fiatValue = "Requested amount is higher than supported");
                  }
                  if (i.selectedCurrency && !n.validCurrencies.includes(i.selectedCurrency) && (r.selectedCurrency = "Unsupported currency"), 
                  i.selectedCryptoCurrency) {
                    const t = Object.values(n.validCryptoCurrenciesByChain).flat().map((e => e.value)), o = e === Ae ? i.selectedCryptoCurrency.toLowerCase() : i.selectedCryptoCurrency;
                    t && !t.includes(o) && (r.selectedCryptoCurrency = "Unsupported cryptoCurrency");
                  }
                  return {
                    errors: r,
                    isValid: 0 === Object.keys(r).length
                  };
                })(e, t);
                if (!o) return void n(new Error(JSON.stringify(i)));
                const s = this.communicationMux.getStream("topup");
                ze(s, "data", (e => {
                  "topup_response" === e.name && (e.data.success ? r(e.data.success) : n(new Error(e.data.error)));
                }));
                const a = Ze();
                this._handleWindow(a), s.write({
                  name: "topup_request",
                  data: {
                    provider: e,
                    params: t,
                    preopenInstanceId: a
                  }
                });
              } else n(new Error("Torus is not initialized yet"));
            }));
          }
          async loginWithPrivateKey(e) {
            const {privateKey: t, userInfo: r} = e;
            return new Promise(((e, n) => {
              if (this.isInitialized) {
                if (32 !== gt.from(t, "hex").length) return void n(new Error("Invalid private key, Please provide a 32 byte valid secp25k1 private key"));
                const i = this.communicationMux.getStream("login_with_private_key");
                ze(i, "data", (t => {
                  "login_with_private_key_response" === t.name && (t.data.success ? e(t.data.success) : n(new Error(t.data.error)));
                })), i.write({
                  name: "login_with_private_key_request",
                  data: {
                    privateKey: t,
                    userInfo: r
                  }
                });
              } else n(new Error("Torus is not initialized yet"));
            }));
          }
          async showWalletConnectScanner() {
            if (!this.useWalletConnect) throw new Error("Set `useWalletConnect` as true in init function options to use wallet connect scanner");
            return new Promise(((e, t) => {
              if (this.isLoggedIn) {
                const r = this.communicationMux.getStream("wallet_connect_stream");
                ze(r, "data", (r => {
                  "wallet_connect_stream_res" === r.name && (r.data.success ? e(r.data.success) : t(new Error(r.data.error)), this._displayIframe());
                })), r.write({
                  name: "wallet_connect_stream_req"
                }), this._displayIframe(!0);
              } else t(new Error("User has not logged in yet"));
            }));
          }
          _handleWindow(e) {
            let {url: t, target: r, features: n} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (e) {
              const i = this.communicationMux.getStream("window"), o = new URL(t || "".concat(this.torusUrl, "/redirect?preopenInstanceId=").concat(e));
              this.dappStorageKey && (o.hash ? o.hash += "&dappStorageKey=".concat(this.dappStorageKey) : o.hash = "#dappStorageKey=".concat(this.dappStorageKey));
              const s = new lt({
                url: o,
                target: r,
                features: n
              });
              if (s.open(), !s.window) return void this._createPopupBlockAlert(e, o.href);
              i.write({
                name: "opened_window",
                data: {
                  preopenInstanceId: e
                }
              });
              const a = t => {
                let {preopenInstanceId: r, close: n} = t;
                r === e && n && (s.close(), i.removeListener("data", a));
              };
              i.on("data", a), s.once("close", (() => {
                i.write({
                  data: {
                    preopenInstanceId: e,
                    closed: !0
                  }
                }), i.removeListener("data", a);
              }));
            }
          }
          _setEmbedWhiteLabel(e) {
            const {theme: t} = this.whiteLabel || {};
            if (t) {
              const {isDark: r = !1, colors: n = {}} = t;
              r && e.classList.add("torus-dark"), n.torusBrand1 && e.style.setProperty("--torus-brand-1", n.torusBrand1), n.torusGray2 && e.style.setProperty("--torus-gray-2", n.torusGray2);
            }
          }
          _getLogoUrl() {
            var e, t;
            let r = "".concat(this.torusUrl, "/images/torus_icon-blue.svg");
            var n, i;
            return r = null !== (e = this.whiteLabel) && void 0 !== e && null !== (t = e.theme) && void 0 !== t && t.isDark ? (null === (n = this.whiteLabel) || void 0 === n ? void 0 : n.logoLight) || r : (null === (i = this.whiteLabel) || void 0 === i ? void 0 : i.logoDark) || r, 
            r;
          }
          _sendWidgetVisibilityStatus(e) {
            this.communicationMux.getStream("torus-widget-visibility").write({
              data: e
            });
          }
          _displayIframe() {
            let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            const t = {};
            if (e) t.display = "block", t.width = "100%", t.height = "100%", t.top = "0px", t.right = "0px", t.left = "0px", t.bottom = "0px"; else switch (t.display = this.torusWidgetVisibility ? "block" : "none", 
            t.height = "70px", t.width = "70px", this.buttonPosition) {
             case je.TOP_LEFT:
              t.top = "0px", t.left = "0px", t.right = "auto", t.bottom = "auto";
              break;

             case je.TOP_RIGHT:
              t.top = "0px", t.right = "0px", t.left = "auto", t.bottom = "auto";
              break;

             case je.BOTTOM_RIGHT:
              t.bottom = "0px", t.right = "0px", t.top = "auto", t.left = "auto";
              break;

             case je.BOTTOM_LEFT:
             default:
              t.bottom = "0px", t.left = "0px", t.top = "auto", t.right = "auto";
            }
            Object.assign(this.torusIframe.style, t), this.isIframeFullScreen = e;
          }
          _setupWeb3() {
            Xe.info("setupWeb3 running");
            const e = new z({
              name: "embed_metamask",
              target: "iframe_metamask",
              targetWindow: this.torusIframe.contentWindow,
              targetOrigin: new URL(this.torusUrl).origin
            }), t = new z({
              name: "embed_comm",
              target: "iframe_comm",
              targetWindow: this.torusIframe.contentWindow,
              targetOrigin: new URL(this.torusUrl).origin
            }), r = new ct(e), n = e => {
              const t = r[e];
              r[e] = function(e) {
                if (e && "eth_requestAccounts" === e) return r.enable();
                for (var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) i[o - 1] = arguments[o];
                return t.apply(this, [ e, ...i ]);
              };
            };
            n("send"), n("sendAsync"), r.enable = () => new Promise(((e, t) => {
              r.sendAsync({
                jsonrpc: "2.0",
                id: Ze(),
                method: "eth_requestAccounts",
                params: []
              }, ((r, n) => {
                const {result: i} = n || {};
                if (r) setTimeout((() => {
                  t(r);
                }), 50); else if (Array.isArray(i) && i.length > 0) {
                  const r = () => {
                    if ("" !== this.requestedVerifier && this.currentVerifier !== this.requestedVerifier) {
                      const {requestedVerifier: r} = this;
                      this.logout().then((n => {
                        this.requestedVerifier = r, this._showLoginPopup(!0, e, t);
                      })).catch((e => t(e)));
                    } else e(i);
                  };
                  this.isLoggedIn ? r() : this.isLoginCallback = r;
                } else this._showLoginPopup(!0, e, t);
              }));
            })), r.tryPreopenHandle = (e, t) => {
              const n = e;
              if (!Array.isArray(n) && Et.includes(n.method)) {
                const e = Ze();
                this._handleWindow(e, {
                  target: "_blank",
                  features: it
                }), n.preopenInstanceId = e;
              }
              r._rpcEngine.handle(n, t);
            };
            const i = new Proxy(r, {
              deleteProperty: () => !0
            });
            this.ethereum = i;
            const o = function(e) {
              const t = new Q;
              return t.getStream = function(e) {
                return this._substreams[e] ? this._substreams[e] : this.createStream(e);
              }, q()(e, t, e, (e => {
                e && window.console.error(e);
              })), t;
            }(t);
            this.communicationMux = o, o.getStream("window").on("data", (e => {
              "create_window" === e.name && this._createPopupBlockAlert(e.data.preopenInstanceId, e.data.url);
            })), o.getStream("widget").on("data", (e => {
              const {data: t} = e;
              this._displayIframe(t);
            })), o.getStream("status").on("data", (e => {
              e.loggedIn ? (this.isLoggedIn = e.loggedIn, this.currentVerifier = e.verifier) : this._displayIframe(), this.isLoginCallback && (this.isLoginCallback(), 
              delete this.isLoginCallback);
            })), this.provider = i, this.provider.shouldSendMetadata && async function(e) {
              try {
                const t = await (async () => ({
                  name: bt(window),
                  icon: await yt(window)
                }))();
                e.handle({
                  jsonrpc: "2.0",
                  id: Ze(),
                  method: "wallet_sendDomainMetadata",
                  params: t
                }, rt);
              } catch (e) {
                Xe.error({
                  message: Ye.errors.sendSiteMetadata(),
                  originalError: e
                });
              }
            }(this.provider._rpcEngine), r._initializeState(), Xe.debug("Torus - injected provider");
          }
          _showLoginPopup(e, t, r) {
            const n = e => {
              const {err: n, selectedAddress: i} = e;
              n ? (Xe.error(n), r && r(n)) : t && t([ i ]), this.isIframeFullScreen && this._displayIframe();
            }, i = this.communicationMux.getStream("oauth");
            if (this.requestedVerifier) {
              ze(i, "data", n);
              const t = Ze();
              this._handleWindow(t), i.write({
                name: "oauth",
                data: {
                  calledFromEmbed: e,
                  verifier: this.requestedVerifier,
                  preopenInstanceId: t,
                  login_hint: this.loginHint
                }
              });
            } else this._displayIframe(!0), ze(i, "data", n), i.write({
              name: "oauth_modal",
              data: {
                calledFromEmbed: e
              }
            });
          }
          _createPopupBlockAlert(e, t) {
            const r = this._getLogoUrl(), n = He('<div id="torusAlert" class="torus-alert--v2">' + '<div id="torusAlert__logo"><img src="'.concat(r, '" /></div>') + "<div>" + '<h1 id="torusAlert__title">'.concat(this.embedTranslations.actionRequired, "</h1>") + '<p id="torusAlert__desc">'.concat(this.embedTranslations.pendingAction, "</p>") + "</div></div>"), i = He('<div><a id="torusAlert__btn">'.concat(this.embedTranslations.continue, "</a></div>")), o = He('<div id="torusAlert__btn-container"></div>');
            o.appendChild(i), n.appendChild(o), this._setEmbedWhiteLabel(n), Fe((() => {
              this.torusAlertContainer.style.display = "block", this.torusAlertContainer.appendChild(n);
            })), Fe((() => {
              i.addEventListener("click", (() => {
                this._handleWindow(e, {
                  url: t,
                  target: "_blank",
                  features: it
                }), n.remove(), 0 === this.torusAlertContainer.children.length && (this.torusAlertContainer.style.display = "none");
              }));
            }));
          }
        };
      })(), i.default;
    })()));
  }
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO1VBQUlYLEVBQUU4c0MsYUFBVyxTQUFTenRDLEdBQUVXO1lBQUcsS0FBSSxJQUFJd0IsSUFBRSxHQUFFTSxJQUFFLEdBQUVBLElBQUUsR0FBRUEsS0FBSU4sTUFBSSxHQUFFQSxLQUFHYixFQUFFLEtBQUdtQixLQUFHekMsTUFBSSxLQUFHLElBQUV5QyxJQUFFO1lBQUssS0FBSUEsSUFBRSxHQUFFQSxJQUFFLEdBQUVBLEtBQUlOLE1BQUksR0FBRUEsS0FBR2IsRUFBRSxNQUFJLEtBQUdtQixLQUFHOUIsTUFBSSxLQUFHLElBQUU4QixJQUFFO1lBQUssT0FBT04sTUFBSTtBQUFDO1VBQUUsSUFBSU0sSUFBRSxFQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUc7VUFBRzlCLEVB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c0VBQW9FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxtRUFBa0Usc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxtRUFBa0Usc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsb0VBQWtFLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG1FQUFrRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxtRUFBa0Usc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRTs7WUFBc0VzQixLQUFJO2NBQUNqQixLQUFJO2NBQUVMLFFBQU8sRUFBQyxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG1FQUFrRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxxRUFBbUUsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxtRUFBa0Usc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsbUVBQWtFLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxxRUFBbUUsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsbUVBQWtFLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLGtFQUFpRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG1FQUFrRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUscUVBQW1FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHNFQUFvRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMsb0VBQW1FLHFFQUFtRSxFQUFDLG9FQUFtRSxzRUFBb0UsRUFBQyxvRUFBbUUsc0VBQW9FLEVBQUMs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QUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxNQUFJL0UsSUFBRSxFQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsS0FBR0UsSUFBRSxFQUFDLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FB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QUVQLEVBQUUsT0FBTVEsSUFBRSxJQUFJNEcsTUFBTSxLQUFJMUcsSUFBRSxFQUFDLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsTUFBSUMsSUFBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsTUFBSXJDLElBQUUsRUFBQyxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLEtBQUd5QyxJQUFFLEVBQUMsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxNQUFJZCxJQUFFLEVBQUMsR0FBRSxZQUFXLFlBQVcsWUFBVyxjQUFZa0IsSUFBRSxFQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVc7VUFBRyxTQUFTTztZQUFJbkIsRUFBRWhCLEtBQUtMLE1BQUssS0FBSUEsS0FBS1UsS0FBRyxZQUFXVixLQUFLeXNELEtBQUcsWUFBV3pzRCxLQUFLMHNELEtBQUcsWUFBVzFzRCxLQUFLMnNELEtBQUcsV0FBVTNzRCxLQUFLd2hCLEtBQUc7QUFBVTtVQUFDLFNBQVNyZ0IsRUFBRXhDLEdBQUVXO1lBQUcsT0FBT1gsS0FBR1csSUFBRVgsTUFBSSxLQUFHVztBQUFDO1VBQUMsU0FBUzhFLEVBQUV6RixHQUFFVyxHQUFFd0IsR0FBRWIsR0FBRW1CLEdBQUVDLEdBQUVDLEdBQUVFO1lBQUcsT0FBT0wsRUFBRXhDLEtBQUdXLElBQUV3QixJQUFFYixLQUFHb0IsSUFBRUMsSUFBRSxHQUFFRSxLQUFHSixJQUFFO0FBQUM7VUFBQyxTQUFTL0IsRUFBRVYsR0FBRVcsR0FBRXdCLEdBQUViLEdBQUVtQixHQUFFQyxHQUFFQyxHQUFFRTtZQUFHLE9BQU9MLEVBQUV4QyxLQUFHVyxJQUFFd0IsS0FBR3hCLElBQUVXLEtBQUdvQixJQUFFQyxJQUFFLEdBQUVFLEtBQUdKLElBQUU7QUFBQztVQUFDLFNBQVM3QixFQUFFWixHQUFFVyxHQUFFd0IsR0FBRWIsR0FBRW1CLEdBQUVDLEdBQUVDLEdBQUVFO1lBQUcsT0FBT0wsRUFBRXhDLE1BQUlXLEtBQUd3QixLQUFHYixLQUFHb0IsSUFBRUMsSUFBRSxHQUFFRSxLQUFHSixJQUFFO0FBQUM7VUFBQyxTQUFTMEQsRUFBRW5HLEdBQUVXLEdBQUV3QixHQUFFYixHQUFFbUIsR0FBRUMsR0FBRUMsR0FBRUU7WUFBRyxPQUFPTCxFQUFFeEMsS0FBR1csSUFBRVcsSUFBRWEsS0FBR2IsS0FBR29CLElBQUVDLElBQUUsR0FBRUUsS0FBR0osSUFBRTtBQUFDO1VBQUMsU0FBU2xCLEVBQUV2QixHQUFFVyxHQUFFd0IsR0FBRWIsR0FBRW1CLEdBQUVDLEdBQUVDLEdBQUVFO1lBQUcsT0FBT0wsRUFBRXhDLEtBQUdXLEtBQUd3QixLQUFHYixNQUFJb0IsSUFBRUMsSUFBRSxHQUFFRSxLQUFHSixJQUFFO0FBQUM7VUFBQ0EsRUFBRW9CLEdBQUVuQixJQUFHbUIsRUFBRWlOLFVBQVU2TSxVQUFRO1lBQVcsS0FBSSxJQUFJM2QsSUFBRTJDLEdBQUVoQyxJQUFFLEdBQUVBLElBQUUsTUFBS0EsR0FBRVgsRUFBRVcsS0FBR1UsS0FBS3FpRCxPQUFPbmYsWUFBWSxJQUFFNWpDO1lBQUcsS0FBSSxJQUFJd0IsSUFBRSxJQUFFZCxLQUFLVSxJQUFHVCxJQUFFLElBQUVELEtBQUt5c0QsSUFBR3JyRCxJQUFFLElBQUVwQixLQUFLMHNELElBQUdyckQsSUFBRSxJQUFFckIsS0FBSzJzRCxJQUFHbnFELElBQUUsSUFBRXhDLEtBQUt3aEIsSUFBR3RjLElBQUUsSUFBRWxGLEtBQUtVLElBQUdsQixJQUFFLElBQUVRLEtBQUt5c0QsSUFBR3JsRCxJQUFFLElBQUVwSCxLQUFLMHNELElBQUdybEQsSUFBRSxJQUFFckgsS0FBSzJzRCxJQUFHN2tELElBQUUsSUFBRTlILEtBQUt3aEIsSUFBR3haLElBQUUsR0FBRUEsSUFBRSxJQUFHQSxLQUFHLEdBQUU7Y0FBQyxJQUFJQyxHQUFFL0o7Y0FBRThKLElBQUUsTUFBSUMsSUFBRTdELEVBQUV0RCxHQUFFYixHQUFFbUIsR0FBRUMsR0FBRW1CLEdBQUU3RCxFQUFFNkMsRUFBRXdHLEtBQUlqSCxFQUFFLElBQUczQixFQUFFNEksS0FBSTlKLElBQUVnQyxFQUFFZ0YsR0FBRTFGLEdBQUU0SCxHQUFFQyxHQUFFUyxHQUFFbkosRUFBRThDLEVBQUV1RyxLQUFJL0YsRUFBRSxJQUFHSixFQUFFbUcsT0FBS0EsSUFBRSxNQUFJQyxJQUFFNUksRUFBRXlCLEdBQUViLEdBQUVtQixHQUFFQyxHQUFFbUIsR0FBRTdELEVBQUU2QyxFQUFFd0csS0FBSWpILEVBQUUsSUFBRzNCLEVBQUU0STtjQUFJOUosSUFBRTRHLEVBQUVJLEdBQUUxRixHQUFFNEgsR0FBRUMsR0FBRVMsR0FBRW5KLEVBQUU4QyxFQUFFdUcsS0FBSS9GLEVBQUUsSUFBR0osRUFBRW1HLE9BQUtBLElBQUUsTUFBSUMsSUFBRTFJLEVBQUV1QixHQUFFYixHQUFFbUIsR0FBRUMsR0FBRW1CLEdBQUU3RCxFQUFFNkMsRUFBRXdHLEtBQUlqSCxFQUFFLElBQUczQixFQUFFNEksS0FBSTlKLElBQUVxQixFQUFFMkYsR0FBRTFGLEdBQUU0SCxHQUFFQyxHQUFFUyxHQUFFbkosRUFBRThDLEVBQUV1RyxLQUFJL0YsRUFBRSxJQUFHSixFQUFFbUcsT0FBS0EsSUFBRSxNQUFJQyxJQUFFbkQsRUFBRWhFLEdBQUViLEdBQUVtQixHQUFFQyxHQUFFbUIsR0FBRTdELEVBQUU2QyxFQUFFd0csS0FBSWpILEVBQUUsSUFBRzNCLEVBQUU0STtjQUFJOUosSUFBRW1CLEVBQUU2RixHQUFFMUYsR0FBRTRILEdBQUVDLEdBQUVTLEdBQUVuSixFQUFFOEMsRUFBRXVHLEtBQUkvRixFQUFFLElBQUdKLEVBQUVtRyxRQUFNQyxJQUFFL0gsRUFBRVksR0FBRWIsR0FBRW1CLEdBQUVDLEdBQUVtQixHQUFFN0QsRUFBRTZDLEVBQUV3RyxLQUFJakgsRUFBRSxJQUFHM0IsRUFBRTRJLEtBQUk5SixJQUFFa0csRUFBRWMsR0FBRTFGLEdBQUU0SCxHQUFFQyxHQUFFUyxHQUFFbkosRUFBRThDLEVBQUV1RyxLQUFJL0YsRUFBRSxJQUFHSixFQUFFbUc7Y0FBS2xILElBQUUwQixHQUFFQSxJQUFFbkIsR0FBRUEsSUFBRUYsRUFBRUMsR0FBRSxLQUFJQSxJQUFFbkIsR0FBRUEsSUFBRWdJLEdBQUUvQyxJQUFFNEMsR0FBRUEsSUFBRVQsR0FBRUEsSUFBRWxHLEVBQUVpRyxHQUFFLEtBQUlBLElBQUU1SCxHQUFFQSxJQUFFdEI7QUFBQztZQUFDLElBQUkySyxJQUFFN0ksS0FBS3lzRCxLQUFHcnJELElBQUVpRyxJQUFFO1lBQUVySCxLQUFLeXNELEtBQUd6c0QsS0FBSzBzRCxLQUFHcnJELElBQUV5RyxJQUFFLEdBQUU5SCxLQUFLMHNELEtBQUcxc0QsS0FBSzJzRCxLQUFHbnFELElBQUUwQyxJQUFFLEdBQUVsRixLQUFLMnNELEtBQUczc0QsS0FBS3doQixLQUFHMWdCLElBQUV0QixJQUFFLEdBQUVRLEtBQUt3aEIsS0FBR3hoQixLQUFLVSxLQUFHVCxJQUFFbUgsSUFBRTtZQUFFcEgsS0FBS1UsS0FBR21JO0FBQUMsYUFBRXJHLEVBQUVpTixVQUFVaXpDLFVBQVE7WUFBVzFpRCxLQUFLcWlELE9BQU9yaUQsS0FBS3VpRCxrQkFBZ0IsS0FBSXZpRCxLQUFLdWlELGVBQWEsT0FBS3ZpRCxLQUFLcWlELE9BQU9udUMsS0FBSyxHQUFFbFUsS0FBS3VpRCxjQUFhLEtBQUl2aUQsS0FBS3NjO1lBQVV0YyxLQUFLdWlELGVBQWEsSUFBR3ZpRCxLQUFLcWlELE9BQU9udUMsS0FBSyxHQUFFbFUsS0FBS3VpRCxjQUFhLEtBQUl2aUQsS0FBS3FpRCxPQUFPcGUsY0FBY2prQyxLQUFLd2lELFFBQVEsSUFBRyxLQUFJeGlELEtBQUtxaUQsT0FBT3BlLGNBQWNqa0MsS0FBS3dpRCxRQUFRLElBQUc7WUFBSXhpRCxLQUFLc2M7WUFBVSxJQUFJM2QsSUFBRXNCLEVBQUUya0IsUUFBTTNrQixFQUFFMmtCLE1BQU0sTUFBSSxJQUFJM2tCLEVBQUU7WUFBSSxPQUFPdEIsRUFBRTZsQyxhQUFheGtDLEtBQUtVLElBQUcsSUFBRy9CLEVBQUU2bEMsYUFBYXhrQyxLQUFLeXNELElBQUcsSUFBRzl0RCxFQUFFNmxDLGFBQWF4a0MsS0FBSzBzRCxJQUFHLElBQUcvdEQsRUFBRTZsQyxhQUFheGtDLEtBQUsyc0QsSUFBRztZQUFJaHVELEVBQUU2bEMsYUFBYXhrQyxLQUFLd2hCLElBQUcsS0FBSTdpQjtBQUFDLGFBQUVBLEVBQUVpQyxVQUFRNEI7QUFBQUE7UUFBRyxNQUFLLFNBQVM3RCxHQUFFVyxHQUFFd0I7VUFBRztVQUFhLElBQUliLElBQUVhLEVBQUUsTUFBTXlqQixRQUFPbmpCLElBQUVwQixRQUFNQSxLQUFLeWlCLG1CQUFpQixTQUFTOWpCO1lBQUcsT0FBT0EsS0FBR0EsRUFBRStqQixhQUFXL2pCLElBQUU7Y0FBQzBSLFNBQVExUjs7QUFBRTtVQUFFdUQsT0FBT3dHLGVBQWVwSixHQUFFLGNBQWE7WUFBQ2QsUUFBTTtjQUFLYyxFQUFFeTZELFlBQVV6NkQsRUFBRXFJLFNBQU9ySSxFQUFFa0ksY0FBTztVQUFPLElBQUluRyxJQUFFRCxFQUFFTixFQUFFO1VBQU8sU0FBU1EsRUFBRTNDLEdBQUVXO1lBQUcsSUFBRyxRQUFNWCxFQUFFLE1BQUksUUFBTUEsRUFBRSxJQUFHLE1BQU0sSUFBSThKLE1BQU07WUFBNEIsT0FBT3ZGLFNBQVN2RSxHQUFFVztBQUFFO1VBQUMsU0FBU2tDLEVBQUU3QyxHQUFFVztZQUFHLElBQUdYLElBQUUsSUFBRyxPQUFPc0IsRUFBRWlHLEtBQUssRUFBQ3ZILElBQUVXO1lBQUksSUFBSXdCLElBQUVlLEVBQUVsRCxJQUFHeUMsSUFBRVMsRUFBRXZDLElBQUUsS0FBR3dCLEVBQUVQLFNBQU87WUFBRyxPQUFPTixFQUFFaUcsS0FBSzlFLElBQUVOLEdBQUU7QUFBTTtVQUFDLFNBQVNXLEVBQUU5QztZQUFHLElBQUlXLEdBQUV3QixHQUFFTSxHQUFFQyxHQUFFRyxHQUFFcEMsSUFBRSxJQUFHeUMsSUFBRWxELEVBQUU7WUFBRyxJQUFHa0QsS0FBRyxLQUFJLE9BQU07Y0FBQzBELE1BQUs1RyxFQUFFb0gsTUFBTSxHQUFFO2NBQUdpMEQsV0FBVXI3RCxFQUFFb0gsTUFBTTs7WUFBSSxJQUFHbEUsS0FBRyxLQUFJO2NBQUMsSUFBR3ZDLElBQUV1QyxJQUFFLEtBQUlULElBQUUsUUFBTVMsSUFBRTVCLEVBQUVpRyxLQUFLLE1BQUl2SCxFQUFFb0gsTUFBTSxHQUFFekcsSUFBRyxNQUFJQSxLQUFHOEIsRUFBRSxLQUFHLEtBQUksTUFBTSxJQUFJcUgsTUFBTTtjQUFnRCxPQUFNO2dCQUFDbEQsTUFBS25FO2dCQUFFNDRELFdBQVVyN0QsRUFBRW9ILE1BQU16Rzs7QUFBRztZQUFDLElBQUd1QyxLQUFHLEtBQUk7Y0FBQyxJQUFHZixJQUFFZSxJQUFFLEtBQUlsRCxFQUFFNEIsU0FBTyxJQUFFTyxHQUFFLE1BQU0sSUFBSTJILE1BQU07Y0FBbUQsS0FBSW5KLElBQUVnQyxFQUFFM0MsRUFBRW9ILE1BQU0sR0FBRWpGLEdBQUc0TixTQUFTLFFBQU8sUUFBTSxJQUFHLE1BQU0sSUFBSWpHLE1BQU07Y0FBNkQsS0FBSXJILElBQUV6QyxFQUFFb0gsTUFBTWpGLEdBQUV4QixJQUFFd0IsSUFBSVAsU0FBT2pCLEdBQUUsTUFBTSxJQUFJbUosTUFBTTtjQUE0QyxPQUFNO2dCQUFDbEQsTUFBS25FO2dCQUFFNDRELFdBQVVyN0QsRUFBRW9ILE1BQU16RyxJQUFFd0I7O0FBQUc7WUFBQyxJQUFHZSxLQUFHLEtBQUk7Y0FBQyxLQUFJdkMsSUFBRXVDLElBQUUsS0FBSVIsSUFBRTFDLEVBQUVvSCxNQUFNLEdBQUV6RyxJQUFHK0IsRUFBRWQsVUFBUWlCLElBQUVDLEVBQUVKLElBQUdqQyxFQUFFb0IsS0FBS2dCLEVBQUUrRCxPQUFNbEUsSUFBRUcsRUFBRXc0RDtjQUFVLE9BQU07Z0JBQUN6MEQsTUFBS25HO2dCQUFFNDZELFdBQVVyN0QsRUFBRW9ILE1BQU16Rzs7QUFBRztZQUFDLElBQUl5QixLQUFHRCxJQUFFZSxJQUFFLFFBQU12QyxJQUFFZ0MsRUFBRTNDLEVBQUVvSCxNQUFNLEdBQUVqRixHQUFHNE4sU0FBUyxRQUFPO1lBQUssSUFBRzNOLElBQUVwQyxFQUFFNEIsUUFBTyxNQUFNLElBQUlrSSxNQUFNO1lBQXFELElBQUcsT0FBS3BILElBQUUxQyxFQUFFb0gsTUFBTWpGLEdBQUVDLElBQUlSLFFBQU8sTUFBTSxJQUFJa0ksTUFBTTtZQUEwQyxNQUFLcEgsRUFBRWQsVUFBUWlCLElBQUVDLEVBQUVKLElBQUdqQyxFQUFFb0IsS0FBS2dCLEVBQUUrRCxPQUFNbEUsSUFBRUcsRUFBRXc0RDtZQUFVLE9BQU07Y0FBQ3owRCxNQUFLbkc7Y0FBRTQ2RCxXQUFVcjdELEVBQUVvSCxNQUFNaEY7O0FBQUc7VUFBQyxTQUFTM0IsRUFBRVQ7WUFBRyxPQUFNLFNBQU9BLEVBQUVvSCxNQUFNLEdBQUU7QUFBRTtVQUFDLFNBQVNsRSxFQUFFbEQ7WUFBRyxJQUFHQSxJQUFFLEdBQUUsTUFBTSxJQUFJOEosTUFBTTtZQUFrRCxJQUFJbkosSUFBRVgsRUFBRStQLFNBQVM7WUFBSSxPQUFPcFAsRUFBRWlCLFNBQU8sSUFBRSxNQUFJakIsSUFBRUE7QUFBQztVQUFDLFNBQVN5QixFQUFFcEM7WUFBRyxLQUFJc0IsRUFBRTRrQixTQUFTbG1CLElBQUc7Y0FBQyxJQUFHLG1CQUFpQkEsR0FBRSxPQUFPUyxFQUFFVCxLQUFHc0IsRUFBRWlHLE1BQU1wRixJQUFFLG9CQUFpQk0sSUFBRXpDLEtBQUd5QyxJQUFFaEMsRUFBRWdDLEtBQUdBLEVBQUUyRSxNQUFNLEtBQUczRSxHQUFHYixTQUFPLElBQUUsTUFBSU8sSUFBRUEsR0FBRSxTQUFPYixFQUFFaUcsS0FBS3ZIO2NBQUcsSUFBRyxtQkFBaUJBLEtBQUcsbUJBQWlCQSxHQUFFLE9BQU9BLEtBQUdXLElBQUV1QyxFQUFFbEQsSUFBR3NCLEVBQUVpRyxLQUFLNUcsR0FBRSxVQUFRVyxFQUFFaUcsS0FBSztjQUFJLElBQUcsUUFBTXZILEdBQUUsT0FBT3NCLEVBQUVpRyxLQUFLO2NBQUksSUFBR3ZILGFBQWEyRyxZQUFXLE9BQU9yRixFQUFFaUcsS0FBS3ZIO2NBQUcsSUFBRzBDLEVBQUVnUCxRQUFRZ2pCLEtBQUsxMEIsSUFBRyxPQUFPc0IsRUFBRWlHLEtBQUt2SCxFQUFFaVY7Y0FBVyxNQUFNLElBQUluTCxNQUFNO0FBQWU7WUFBQyxJQUFJbkosR0FBRXdCLEdBQUVNO1lBQUUsT0FBT3pDO0FBQUM7VUFBQ1csRUFBRWtJLFNBQU8sU0FBUzdJLEVBQUVXO1lBQUcsSUFBRzRJLE1BQU1DLFFBQVE3SSxJQUFHO2NBQUMsS0FBSSxJQUFJd0IsSUFBRSxJQUFHTSxJQUFFLEdBQUVBLElBQUU5QixFQUFFaUIsUUFBT2EsS0FBSU4sRUFBRU4sS0FBSzdCLEVBQUVXLEVBQUU4QjtjQUFLLElBQUlDLElBQUVwQixFQUFFcVQsT0FBT3hTO2NBQUcsT0FBT2IsRUFBRXFULE9BQU8sRUFBQzlSLEVBQUVILEVBQUVkLFFBQU8sTUFBS2M7QUFBRztZQUFDLElBQUlDLElBQUVQLEVBQUV6QjtZQUFHLE9BQU8sTUFBSWdDLEVBQUVmLFVBQVFlLEVBQUUsS0FBRyxNQUFJQSxJQUFFckIsRUFBRXFULE9BQU8sRUFBQzlSLEVBQUVGLEVBQUVmLFFBQU8sTUFBS2U7QUFBRyxhQUFFaEMsRUFBRXFJLFNBQU8sU0FBU2hKLEdBQUVXO1lBQUcsU0FBRyxNQUFTQSxNQUFJQSxLQUFFLEtBQUtYLEtBQUcsTUFBSUEsRUFBRTRCLFFBQU8sT0FBT04sRUFBRWlHLEtBQUs7WUFBSSxJQUFJcEYsSUFBRVcsRUFBRVYsRUFBRXBDO1lBQUksSUFBR1csR0FBRSxPQUFPd0I7WUFBRSxJQUFHLE1BQUlBLEVBQUVrNUQsVUFBVXo1RCxRQUFPLE1BQU0sSUFBSWtJLE1BQU07WUFBcUIsT0FBTzNILEVBQUV5RTtBQUFJLGFBQUVqRyxFQUFFeTZELFlBQVUsU0FBU3A3RDtZQUFHLEtBQUlBLEtBQUcsTUFBSUEsRUFBRTRCLFFBQU8sT0FBT04sRUFBRWlHLEtBQUs7WUFBSSxJQUFJNUcsSUFBRXlCLEVBQUVwQyxJQUFHbUMsSUFBRXhCLEVBQUU7WUFBRyxJQUFHd0IsS0FBRyxLQUFJLE9BQU94QixFQUFFaUI7WUFBTyxJQUFHTyxLQUFHLEtBQUksT0FBT0EsSUFBRTtZQUFJLElBQUdBLEtBQUcsS0FBSSxPQUFPQSxJQUFFO1lBQUksSUFBR0EsS0FBRyxLQUFJLE9BQU9BLElBQUU7WUFBSSxJQUFJTSxJQUFFTixJQUFFO1lBQUksT0FBT00sSUFBRUUsRUFBRWhDLEVBQUV5RyxNQUFNLEdBQUUzRSxHQUFHc04sU0FBUyxRQUFPO0FBQUc7QUFBQztRQUFFLE1BQUssQ0FBQy9QLEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRW5CLEVBQUVza0I7VUFBTyxTQUFTbGpCLEVBQUUxQyxHQUFFVztZQUFHLEtBQUksSUFBSXdCLEtBQUtuQyxHQUFFVyxFQUFFd0IsS0FBR25DLEVBQUVtQztBQUFFO1VBQUMsU0FBU1EsRUFBRTNDLEdBQUVXLEdBQUV3QjtZQUFHLE9BQU9NLEVBQUV6QyxHQUFFVyxHQUFFd0I7QUFBRTtVQUFDTSxFQUFFOEUsUUFBTTlFLEVBQUV3akIsU0FBT3hqQixFQUFFaXpCLGVBQWFqekIsRUFBRW1nQyxrQkFBZ0I1aUMsRUFBRWlDLFVBQVFYLEtBQUdvQixFQUFFcEIsR0FBRVgsSUFBR0EsRUFBRWlsQixTQUFPampCLElBQUdBLEVBQUVtTyxZQUFVdk4sT0FBTzhWLE9BQU81VyxFQUFFcU87VUFBV3BPLEVBQUVELEdBQUVFLElBQUdBLEVBQUU0RSxPQUFLLFNBQVN2SCxHQUFFVyxHQUFFd0I7WUFBRyxJQUFHLG1CQUFpQm5DLEdBQUUsTUFBTSxJQUFJeUIsVUFBVTtZQUFpQyxPQUFPZ0IsRUFBRXpDLEdBQUVXLEdBQUV3QjtBQUFFLGFBQUVRLEVBQUVzakIsUUFBTSxTQUFTam1CLEdBQUVXLEdBQUV3QjtZQUFHLElBQUcsbUJBQWlCbkMsR0FBRSxNQUFNLElBQUl5QixVQUFVO1lBQTZCLElBQUlILElBQUVtQixFQUFFekM7WUFBRyxZQUFPLE1BQVNXLElBQUUsbUJBQWlCd0IsSUFBRWIsRUFBRWlVLEtBQUs1VSxHQUFFd0IsS0FBR2IsRUFBRWlVLEtBQUs1VSxLQUFHVyxFQUFFaVUsS0FBSyxJQUFHalU7QUFBQyxhQUFFcUIsRUFBRSt5QixjQUFZLFNBQVMxMUI7WUFBRyxJQUFHLG1CQUFpQkEsR0FBRSxNQUFNLElBQUl5QixVQUFVO1lBQTZCLE9BQU9nQixFQUFFekM7QUFBRSxhQUFFMkMsRUFBRWlnQyxrQkFBZ0IsU0FBUzVpQztZQUFHLElBQUcsbUJBQWlCQSxHQUFFLE1BQU0sSUFBSXlCLFVBQVU7WUFBNkIsT0FBT0gsRUFBRTBnQyxXQUFXaGlDO0FBQUU7QUFBQTtRQUFHLE1BQUssQ0FBQ0EsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixHQUFFbUIsSUFBRU4sRUFBRSxPQUFNTyxJQUFFUCxFQUFFLE9BQU1RLElBQUVELEVBQUVrakIsUUFBTy9pQixJQUFFLENBQUM7VUFBRSxLQUFJdkIsS0FBS29CLEdBQUVBLEVBQUVpZCxlQUFlcmUsTUFBSSxpQkFBZUEsS0FBRyxhQUFXQSxNQUFJdUIsRUFBRXZCLEtBQUdvQixFQUFFcEI7VUFBSSxJQUFJd0IsSUFBRUQsRUFBRStpQixTQUFPLENBQUM7VUFBRSxLQUFJdGtCLEtBQUtxQixHQUFFQSxFQUFFZ2QsZUFBZXJlLE1BQUksa0JBQWdCQSxLQUFHLHNCQUFvQkEsTUFBSXdCLEVBQUV4QixLQUFHcUIsRUFBRXJCO1VBQUksSUFBR3VCLEVBQUUraUIsT0FBTzlVLFlBQVVuTyxFQUFFbU8sV0FBVWhPLEVBQUV5RSxRQUFNekUsRUFBRXlFLFNBQU9aLFdBQVdZLFNBQU96RSxFQUFFeUUsT0FBSyxTQUFTdkgsR0FBRVcsR0FBRXdCO1lBQUcsSUFBRyxtQkFBaUJuQyxHQUFFLE1BQU0sSUFBSXlCLFVBQVUsMkVBQXlFekI7WUFBRyxJQUFHQSxVQUFHLE1BQVNBLEVBQUU0QixRQUFPLE1BQU0sSUFBSUgsVUFBVSwySEFBeUh6QjtZQUFHLE9BQU8yQyxFQUFFM0MsR0FBRVcsR0FBRXdCO0FBQUUsY0FBR1csRUFBRW1qQixVQUFRbmpCLEVBQUVtakIsUUFBTSxTQUFTam1CLEdBQUVXLEdBQUV3QjtZQUFHLElBQUcsbUJBQWlCbkMsR0FBRSxNQUFNLElBQUl5QixVQUFVLHNFQUFvRXpCO1lBQUcsSUFBR0EsSUFBRSxLQUFHQSxLQUFHLEtBQUcsS0FBRyxLQUFJLE1BQU0sSUFBSXF5QixXQUFXLGdCQUFjcnlCLElBQUU7WUFBa0MsSUFBSXNCLElBQUVxQixFQUFFM0M7WUFBRyxPQUFPVyxLQUFHLE1BQUlBLEVBQUVpQixTQUFPLG1CQUFpQk8sSUFBRWIsRUFBRWlVLEtBQUs1VSxHQUFFd0IsS0FBR2IsRUFBRWlVLEtBQUs1VSxLQUFHVyxFQUFFaVUsS0FBSyxJQUFHalU7QUFBQyxlQUFJdUIsRUFBRXk0RCxrQkFBaUI7WUFBSXo0RCxFQUFFeTRELG1CQUFpQjc0RCxFQUFFMnBELFFBQVEsVUFBVWtQO0FBQTBCLFlBQVQsT0FBTXQ3RCxJQUFHO1VBQUM2QyxFQUFFdWtCLGNBQVl2a0IsRUFBRXVrQixZQUFVO1lBQUNtMEMsWUFBVzE0RCxFQUFFMi9CO2FBQVkzL0IsRUFBRXk0RCxxQkFBbUJ6NEQsRUFBRXVrQixVQUFVbzBDLG9CQUFrQjM0RCxFQUFFeTRELG9CQUFtQnQ3RCxFQUFFaUMsVUFBUVk7QUFBQUE7UUFBRyxNQUFLLENBQUM3QyxHQUFFVyxHQUFFd0I7VUFBSyxJQUFJYixJQUFFYSxFQUFFLE1BQU15akI7VUFBTyxTQUFTbmpCLEVBQUV6QyxHQUFFVztZQUFHVSxLQUFLcWlELFNBQU9waUQsRUFBRTJrQixNQUFNam1CLElBQUdxQixLQUFLbzZELGFBQVc5NkQsR0FBRVUsS0FBS3NpRCxhQUFXM2pELEdBQUVxQixLQUFLbzhCLE9BQUs7QUFBQztVQUFDaDdCLEVBQUVxTyxVQUFVK00sU0FBTyxTQUFTN2QsR0FBRVc7WUFBRyxtQkFBaUJYLE1BQUlXLElBQUVBLEtBQUcsUUFBT1gsSUFBRXNCLEVBQUVpRyxLQUFLdkgsR0FBRVc7WUFBSSxLQUFJLElBQUl3QixJQUFFZCxLQUFLcWlELFFBQU9qaEQsSUFBRXBCLEtBQUtzaUQsWUFBV2poRCxJQUFFMUMsRUFBRTRCLFFBQU9lLElBQUV0QixLQUFLbzhCLE1BQUs1NkIsSUFBRSxHQUFFQSxJQUFFSCxLQUFHO2NBQUMsS0FBSSxJQUFJSSxJQUFFSCxJQUFFRixHQUFFaEMsSUFBRTBILEtBQUtzckIsSUFBSS93QixJQUFFRyxHQUFFSixJQUFFSyxJQUFHSSxJQUFFLEdBQUVBLElBQUV6QyxHQUFFeUMsS0FBSWYsRUFBRVcsSUFBRUksS0FBR2xELEVBQUU2QyxJQUFFSztjQUFHTCxLQUFHcEMsSUFBR2tDLEtBQUdsQyxLQUFHZ0MsS0FBRyxLQUFHcEIsS0FBS3NjLFFBQVF4YjtBQUFFO1lBQUMsT0FBT2QsS0FBS284QixRQUFNLzZCLEdBQUVyQjtBQUFJLGFBQUVvQixFQUFFcU8sVUFBVWdOLFNBQU8sU0FBUzlkO1lBQUcsSUFBSVcsSUFBRVUsS0FBS284QixPQUFLcDhCLEtBQUtzaUQ7WUFBV3RpRCxLQUFLcWlELE9BQU8vaUQsS0FBRyxLQUFJVSxLQUFLcWlELE9BQU9udUMsS0FBSyxHQUFFNVUsSUFBRSxJQUFHQSxLQUFHVSxLQUFLbzZELGVBQWFwNkQsS0FBS3NjLFFBQVF0YyxLQUFLcWlELFNBQVFyaUQsS0FBS3FpRCxPQUFPbnVDLEtBQUs7WUFBSSxJQUFJcFQsSUFBRSxJQUFFZCxLQUFLbzhCO1lBQUssSUFBR3Q3QixLQUFHLFlBQVdkLEtBQUtxaUQsT0FBTzltQixjQUFjejZCLEdBQUVkLEtBQUtzaUQsYUFBVyxTQUFPO2NBQUMsSUFBSXJpRCxLQUFHLGFBQVdhLE9BQUssR0FBRU0sS0FBR04sSUFBRWIsS0FBRztjQUFXRCxLQUFLcWlELE9BQU85bUIsY0FBY242QixHQUFFcEIsS0FBS3NpRCxhQUFXLElBQUd0aUQsS0FBS3FpRCxPQUFPOW1CLGNBQWN0N0IsR0FBRUQsS0FBS3NpRCxhQUFXO0FBQUU7WUFBQ3RpRCxLQUFLc2MsUUFBUXRjLEtBQUtxaUQ7WUFBUSxJQUFJaGhELElBQUVyQixLQUFLMC9CO1lBQVEsT0FBTy9nQyxJQUFFMEMsRUFBRXFOLFNBQVMvUCxLQUFHMEM7QUFBQyxhQUFFRCxFQUFFcU8sVUFBVTZNLFVBQVE7WUFBVyxNQUFNLElBQUk3VCxNQUFNO0FBQTBDLGFBQUU5SixFQUFFaUMsVUFBUVE7QUFBQUE7UUFBRyxNQUFLLENBQUN6QyxHQUFFVyxHQUFFd0I7VUFBSyxJQUFJYixJQUFFdEIsRUFBRWlDLFVBQVEsU0FBU2pDO1lBQUdBLElBQUVBLEVBQUVpTztZQUFjLElBQUl0TixJQUFFVyxFQUFFdEI7WUFBRyxLQUFJVyxHQUFFLE1BQU0sSUFBSW1KLE1BQU05SixJQUFFO1lBQStDLE9BQU8sSUFBSVc7QUFBQztVQUFFVyxFQUFFMmlELE1BQUk5aEQsRUFBRSxPQUFNYixFQUFFOGlELE9BQUtqaUQsRUFBRSxPQUFNYixFQUFFK2lELFNBQU9saUQsRUFBRSxPQUFNYixFQUFFbWIsU0FBT3RhLEVBQUUsT0FBTWIsRUFBRW9iLFNBQU92YSxFQUFFLE9BQU1iLEVBQUVxYixTQUFPeGEsRUFBRTtBQUFJO1FBQUcsTUFBSyxDQUFDbkMsR0FBRVcsR0FBRXdCO1VBQUssSUFBSWIsSUFBRWEsRUFBRSxPQUFNTSxJQUFFTixFQUFFLE9BQU1PLElBQUVQLEVBQUUsTUFBTXlqQixRQUFPampCLElBQUUsRUFBQyxZQUFXLGFBQVksYUFBWSxhQUFXRSxJQUFFLElBQUkwRyxNQUFNO1VBQUksU0FBU3pHO1lBQUl6QixLQUFLcS9DLFFBQU9yL0MsS0FBS3E2RCxLQUFHNzRELEdBQUVKLEVBQUVmLEtBQUtMLE1BQUssSUFBRztBQUFHO1VBQUMsU0FBU1osRUFBRVQ7WUFBRyxPQUFPQSxLQUFHLEtBQUdBLE1BQUk7QUFBQztVQUFDLFNBQVNrRCxFQUFFbEQsR0FBRVcsR0FBRXdCLEdBQUViO1lBQUcsT0FBTyxNQUFJdEIsSUFBRVcsSUFBRXdCLEtBQUd4QixJQUFFVyxJQUFFLE1BQUl0QixJQUFFVyxJQUFFd0IsSUFBRXhCLElBQUVXLElBQUVhLElBQUViLElBQUVYLElBQUV3QixJQUFFYjtBQUFDO1VBQUNBLEVBQUV3QixHQUFFTCxJQUFHSyxFQUFFZ08sVUFBVTR2QyxPQUFLO1lBQVcsT0FBT3IvQyxLQUFLVSxLQUFHLFlBQVdWLEtBQUt5c0QsS0FBRyxZQUFXenNELEtBQUswc0QsS0FBRyxZQUFXMXNELEtBQUsyc0QsS0FBRyxXQUFVM3NELEtBQUt3aEIsS0FBRyxZQUFXeGhCO0FBQUksYUFBRXlCLEVBQUVnTyxVQUFVNk0sVUFBUSxTQUFTM2Q7WUFBRyxLQUFJLElBQUlXLEdBQUV3QixJQUFFZCxLQUFLcTZELElBQUdwNkQsSUFBRSxJQUFFRCxLQUFLVSxJQUFHVSxJQUFFLElBQUVwQixLQUFLeXNELElBQUdwckQsSUFBRSxJQUFFckIsS0FBSzBzRCxJQUFHbHJELElBQUUsSUFBRXhCLEtBQUsyc0QsSUFBR2xyRCxJQUFFLElBQUV6QixLQUFLd2hCLElBQUd6Z0IsSUFBRSxHQUFFQSxJQUFFLE1BQUtBLEdBQUVELEVBQUVDLEtBQUdwQyxFQUFFd2tDLFlBQVksSUFBRXBpQztZQUFHLE1BQUtBLElBQUUsTUFBS0EsR0FBRUQsRUFBRUMsS0FBR0QsRUFBRUMsSUFBRSxLQUFHRCxFQUFFQyxJQUFFLEtBQUdELEVBQUVDLElBQUUsTUFBSUQsRUFBRUMsSUFBRTtZQUFJLEtBQUksSUFBSWtCLElBQUUsR0FBRUEsSUFBRSxNQUFLQSxHQUFFO2NBQUMsSUFBSU8sT0FBS1AsSUFBRSxLQUFJZCxJQUFFLE1BQUk3QixJQUFFVyxNQUFJLElBQUVYLE1BQUksTUFBSXVDLEVBQUVXLEdBQUVwQixHQUFFQyxHQUFFRyxLQUFHQyxJQUFFWCxFQUFFbUIsS0FBR1gsRUFBRWtCO2NBQUdmLElBQUVELEdBQUVBLElBQUVILEdBQUVBLElBQUVqQyxFQUFFZ0MsSUFBR0EsSUFBRW5CLEdBQUVBLElBQUVrQjtBQUFDO1lBQUNuQixLQUFLVSxLQUFHVCxJQUFFRCxLQUFLVSxLQUFHLEdBQUVWLEtBQUt5c0QsS0FBR3JyRCxJQUFFcEIsS0FBS3lzRCxLQUFHLEdBQUV6c0QsS0FBSzBzRCxLQUFHcnJELElBQUVyQixLQUFLMHNELEtBQUcsR0FBRTFzRCxLQUFLMnNELEtBQUduckQsSUFBRXhCLEtBQUsyc0QsS0FBRyxHQUFFM3NELEtBQUt3aEIsS0FBRy9mLElBQUV6QixLQUFLd2hCLEtBQUc7QUFBQyxhQUFFL2YsRUFBRWdPLFVBQVVpd0IsUUFBTTtZQUFXLElBQUkvZ0MsSUFBRTBDLEVBQUVnekIsWUFBWTtZQUFJLE9BQU8xMUIsRUFBRThsQyxhQUFhLElBQUV6a0MsS0FBS1UsSUFBRyxJQUFHL0IsRUFBRThsQyxhQUFhLElBQUV6a0MsS0FBS3lzRCxJQUFHLElBQUc5dEQsRUFBRThsQyxhQUFhLElBQUV6a0MsS0FBSzBzRCxJQUFHLElBQUcvdEQsRUFBRThsQyxhQUFhLElBQUV6a0MsS0FBSzJzRCxJQUFHO1lBQUlodUQsRUFBRThsQyxhQUFhLElBQUV6a0MsS0FBS3doQixJQUFHLEtBQUk3aUI7QUFBQyxhQUFFQSxFQUFFaUMsVUFBUWE7QUFBQUE7UUFBRyxNQUFLLENBQUM5QyxHQUFFVyxHQUFFd0I7VUFBSyxJQUFJYixJQUFFYSxFQUFFLE9BQU1NLElBQUVOLEVBQUUsT0FBTU8sSUFBRVAsRUFBRSxNQUFNeWpCLFFBQU9qakIsSUFBRSxFQUFDLFlBQVcsYUFBWSxhQUFZLGFBQVdFLElBQUUsSUFBSTBHLE1BQU07VUFBSSxTQUFTekc7WUFBSXpCLEtBQUtxL0MsUUFBT3IvQyxLQUFLcTZELEtBQUc3NEQsR0FBRUosRUFBRWYsS0FBS0wsTUFBSyxJQUFHO0FBQUc7VUFBQyxTQUFTWixFQUFFVDtZQUFHLE9BQU9BLEtBQUcsSUFBRUEsTUFBSTtBQUFFO1VBQUMsU0FBU2tELEVBQUVsRDtZQUFHLE9BQU9BLEtBQUcsS0FBR0EsTUFBSTtBQUFDO1VBQUMsU0FBU29DLEVBQUVwQyxHQUFFVyxHQUFFd0IsR0FBRWI7WUFBRyxPQUFPLE1BQUl0QixJQUFFVyxJQUFFd0IsS0FBR3hCLElBQUVXLElBQUUsTUFBSXRCLElBQUVXLElBQUV3QixJQUFFeEIsSUFBRVcsSUFBRWEsSUFBRWIsSUFBRVgsSUFBRXdCLElBQUViO0FBQUM7VUFBQ0EsRUFBRXdCLEdBQUVMLElBQUdLLEVBQUVnTyxVQUFVNHZDLE9BQUs7WUFBVyxPQUFPci9DLEtBQUtVLEtBQUcsWUFBV1YsS0FBS3lzRCxLQUFHLFlBQVd6c0QsS0FBSzBzRCxLQUFHLFlBQVcxc0QsS0FBSzJzRCxLQUFHLFdBQVUzc0QsS0FBS3doQixLQUFHLFlBQVd4aEI7QUFBSSxhQUFFeUIsRUFBRWdPLFVBQVU2TSxVQUFRLFNBQVMzZDtZQUFHLEtBQUksSUFBSVcsR0FBRXdCLElBQUVkLEtBQUtxNkQsSUFBR3A2RCxJQUFFLElBQUVELEtBQUtVLElBQUdVLElBQUUsSUFBRXBCLEtBQUt5c0QsSUFBR3ByRCxJQUFFLElBQUVyQixLQUFLMHNELElBQUdsckQsSUFBRSxJQUFFeEIsS0FBSzJzRCxJQUFHbHJELElBQUUsSUFBRXpCLEtBQUt3aEIsSUFBR3ZmLElBQUUsR0FBRUEsSUFBRSxNQUFLQSxHQUFFbkIsRUFBRW1CLEtBQUd0RCxFQUFFd2tDLFlBQVksSUFBRWxoQztZQUFHLE1BQUtBLElBQUUsTUFBS0EsR0FBRW5CLEVBQUVtQixNQUFJM0MsSUFBRXdCLEVBQUVtQixJQUFFLEtBQUduQixFQUFFbUIsSUFBRSxLQUFHbkIsRUFBRW1CLElBQUUsTUFBSW5CLEVBQUVtQixJQUFFLFFBQU0sSUFBRTNDLE1BQUk7WUFBRyxLQUFJLElBQUlrRCxJQUFFLEdBQUVBLElBQUUsTUFBS0EsR0FBRTtjQUFDLElBQUlyQixPQUFLcUIsSUFBRSxLQUFJNEIsSUFBRWhGLEVBQUVhLEtBQUdjLEVBQUVJLEdBQUVDLEdBQUVDLEdBQUVHLEtBQUdDLElBQUVYLEVBQUUwQixLQUFHbEIsRUFBRUgsS0FBRztjQUFFTSxJQUFFRCxHQUFFQSxJQUFFSCxHQUFFQSxJQUFFUSxFQUFFVCxJQUFHQSxJQUFFbkIsR0FBRUEsSUFBRW1FO0FBQUM7WUFBQ3BFLEtBQUtVLEtBQUdULElBQUVELEtBQUtVLEtBQUcsR0FBRVYsS0FBS3lzRCxLQUFHcnJELElBQUVwQixLQUFLeXNELEtBQUcsR0FBRXpzRCxLQUFLMHNELEtBQUdyckQsSUFBRXJCLEtBQUswc0QsS0FBRyxHQUFFMXNELEtBQUsyc0QsS0FBR25yRCxJQUFFeEIsS0FBSzJzRCxLQUFHLEdBQUUzc0QsS0FBS3doQixLQUFHL2YsSUFBRXpCLEtBQUt3aEIsS0FBRztBQUFDLGFBQUUvZixFQUFFZ08sVUFBVWl3QixRQUFNO1lBQVcsSUFBSS9nQyxJQUFFMEMsRUFBRWd6QixZQUFZO1lBQUksT0FBTzExQixFQUFFOGxDLGFBQWEsSUFBRXprQyxLQUFLVSxJQUFHLElBQUcvQixFQUFFOGxDLGFBQWEsSUFBRXprQyxLQUFLeXNELElBQUcsSUFBRzl0RCxFQUFFOGxDLGFBQWEsSUFBRXprQyxLQUFLMHNELElBQUcsSUFBRy90RCxFQUFFOGxDLGFBQWEsSUFBRXprQyxLQUFLMnNELElBQUc7WUFBSWh1RCxFQUFFOGxDLGFBQWEsSUFBRXprQyxLQUFLd2hCLElBQUcsS0FBSTdpQjtBQUFDLGFBQUVBLEVBQUVpQyxVQUFRYTtBQUFBQTtRQUFHLE1BQUssQ0FBQzlDLEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxPQUFNTyxJQUFFUCxFQUFFLE9BQU1RLElBQUVSLEVBQUUsTUFBTXlqQixRQUFPL2lCLElBQUUsSUFBSTBHLE1BQU07VUFBSSxTQUFTekc7WUFBSXpCLEtBQUtxL0MsUUFBT3IvQyxLQUFLcTZELEtBQUc3NEQsR0FBRUgsRUFBRWhCLEtBQUtMLE1BQUssSUFBRztBQUFHO1VBQUNDLEVBQUV3QixHQUFFTCxJQUFHSyxFQUFFZ08sVUFBVTR2QyxPQUFLO1lBQVcsT0FBT3IvQyxLQUFLVSxLQUFHLFlBQVdWLEtBQUt5c0QsS0FBRyxXQUFVenNELEtBQUswc0QsS0FBRyxXQUFVMXNELEtBQUsyc0QsS0FBRyxZQUFXM3NELEtBQUt3aEIsS0FBRyxZQUFXeGhCLEtBQUtzNkQsS0FBRztZQUFXdDZELEtBQUt1NkQsS0FBRyxZQUFXdjZELEtBQUt3NkQsS0FBRyxZQUFXeDZEO0FBQUksYUFBRXlCLEVBQUVnTyxVQUFVaXdCLFFBQU07WUFBVyxJQUFJL2dDLElBQUUyQyxFQUFFK3lCLFlBQVk7WUFBSSxPQUFPMTFCLEVBQUU4bEMsYUFBYXprQyxLQUFLVSxJQUFHLElBQUcvQixFQUFFOGxDLGFBQWF6a0MsS0FBS3lzRCxJQUFHLElBQUc5dEQsRUFBRThsQyxhQUFhemtDLEtBQUswc0QsSUFBRyxJQUFHL3RELEVBQUU4bEMsYUFBYXprQyxLQUFLMnNELElBQUc7WUFBSWh1RCxFQUFFOGxDLGFBQWF6a0MsS0FBS3doQixJQUFHLEtBQUk3aUIsRUFBRThsQyxhQUFhemtDLEtBQUtzNkQsSUFBRyxLQUFJMzdELEVBQUU4bEMsYUFBYXprQyxLQUFLdTZELElBQUcsS0FBSTU3RDtBQUFDLGFBQUVBLEVBQUVpQyxVQUFRYTtBQUFBQTtRQUFHLE1BQUssQ0FBQzlDLEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxPQUFNTyxJQUFFUCxFQUFFLE1BQU15akIsUUFBT2pqQixJQUFFLEVBQUMsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsY0FBWUUsSUFBRSxJQUFJMEcsTUFBTTtVQUFJLFNBQVN6RztZQUFJekIsS0FBS3EvQyxRQUFPci9DLEtBQUtxNkQsS0FBRzc0RCxHQUFFSixFQUFFZixLQUFLTCxNQUFLLElBQUc7QUFBRztVQUFDLFNBQVNaLEVBQUVULEdBQUVXLEdBQUV3QjtZQUFHLE9BQU9BLElBQUVuQyxLQUFHVyxJQUFFd0I7QUFBRTtVQUFDLFNBQVNlLEVBQUVsRCxHQUFFVyxHQUFFd0I7WUFBRyxPQUFPbkMsSUFBRVcsSUFBRXdCLEtBQUduQyxJQUFFVztBQUFFO1VBQUMsU0FBU3lCLEVBQUVwQztZQUFHLFFBQU9BLE1BQUksSUFBRUEsS0FBRyxPQUFLQSxNQUFJLEtBQUdBLEtBQUcsT0FBS0EsTUFBSSxLQUFHQSxLQUFHO0FBQUc7VUFBQyxTQUFTc0QsRUFBRXREO1lBQUcsUUFBT0EsTUFBSSxJQUFFQSxLQUFHLE9BQUtBLE1BQUksS0FBR0EsS0FBRyxPQUFLQSxNQUFJLEtBQUdBLEtBQUc7QUFBRTtVQUFDLFNBQVM2RCxFQUFFN0Q7WUFBRyxRQUFPQSxNQUFJLElBQUVBLEtBQUcsT0FBS0EsTUFBSSxLQUFHQSxLQUFHLE1BQUlBLE1BQUk7QUFBQztVQUFDc0IsRUFBRXdCLEdBQUVMLElBQUdLLEVBQUVnTyxVQUFVNHZDLE9BQUs7WUFBVyxPQUFPci9DLEtBQUtVLEtBQUcsWUFBV1YsS0FBS3lzRCxLQUFHLFlBQVd6c0QsS0FBSzBzRCxLQUFHLFlBQVcxc0QsS0FBSzJzRCxLQUFHLFlBQVczc0QsS0FBS3doQixLQUFHLFlBQVd4aEIsS0FBS3M2RCxLQUFHO1lBQVd0NkQsS0FBS3U2RCxLQUFHLFdBQVV2NkQsS0FBS3c2RCxLQUFHLFlBQVd4NkQ7QUFBSSxhQUFFeUIsRUFBRWdPLFVBQVU2TSxVQUFRLFNBQVMzZDtZQUFHLEtBQUksSUFBSVcsR0FBRXdCLElBQUVkLEtBQUtxNkQsSUFBR3A2RCxJQUFFLElBQUVELEtBQUtVLElBQUdVLElBQUUsSUFBRXBCLEtBQUt5c0QsSUFBR3ByRCxJQUFFLElBQUVyQixLQUFLMHNELElBQUdsckQsSUFBRSxJQUFFeEIsS0FBSzJzRCxJQUFHbHJELElBQUUsSUFBRXpCLEtBQUt3aEIsSUFBR3JnQixJQUFFLElBQUVuQixLQUFLczZELElBQUdsMkQsSUFBRSxJQUFFcEUsS0FBS3U2RCxJQUFHbDdELElBQUUsSUFBRVcsS0FBS3c2RCxJQUFHajdELElBQUUsR0FBRUEsSUFBRSxNQUFLQSxHQUFFdUIsRUFBRXZCLEtBQUdaLEVBQUV3a0MsWUFBWSxJQUFFNWpDO1lBQUcsTUFBS0EsSUFBRSxNQUFLQSxHQUFFdUIsRUFBRXZCLEtBQUcsT0FBS0QsSUFBRXdCLEVBQUV2QixJQUFFLFFBQU0sS0FBR0QsS0FBRyxPQUFLQSxNQUFJLEtBQUdBLEtBQUcsTUFBSUEsTUFBSSxNQUFJd0IsRUFBRXZCLElBQUUsS0FBR2lELEVBQUUxQixFQUFFdkIsSUFBRSxPQUFLdUIsRUFBRXZCLElBQUU7WUFBSSxLQUFJLElBQUl1RixJQUFFLEdBQUVBLElBQUUsTUFBS0EsR0FBRTtjQUFDLElBQUk1RSxJQUFFYixJQUFFNEMsRUFBRVIsS0FBR3JDLEVBQUVxQyxHQUFFTixHQUFFaUQsS0FBRzlDLEVBQUV3RCxLQUFHaEUsRUFBRWdFLEtBQUcsR0FBRUksSUFBRW5FLEVBQUVkLEtBQUc0QixFQUFFNUIsR0FBRW1CLEdBQUVDLEtBQUc7Y0FBRWhDLElBQUUrRSxHQUFFQSxJQUFFakQsR0FBRUEsSUFBRU0sR0FBRUEsSUFBRUQsSUFBRXRCLElBQUUsR0FBRXNCLElBQUVILEdBQUVBLElBQUVELEdBQUVBLElBQUVuQixHQUFFQSxJQUFFQyxJQUFFZ0YsSUFBRTtBQUFDO1lBQUNsRixLQUFLVSxLQUFHVCxJQUFFRCxLQUFLVSxLQUFHLEdBQUVWLEtBQUt5c0QsS0FBR3JyRCxJQUFFcEIsS0FBS3lzRCxLQUFHLEdBQUV6c0QsS0FBSzBzRCxLQUFHcnJELElBQUVyQixLQUFLMHNELEtBQUcsR0FBRTFzRCxLQUFLMnNELEtBQUduckQsSUFBRXhCLEtBQUsyc0QsS0FBRyxHQUFFM3NELEtBQUt3aEIsS0FBRy9mLElBQUV6QixLQUFLd2hCLEtBQUc7WUFBRXhoQixLQUFLczZELEtBQUduNUQsSUFBRW5CLEtBQUtzNkQsS0FBRyxHQUFFdDZELEtBQUt1NkQsS0FBR24yRCxJQUFFcEUsS0FBS3U2RCxLQUFHLEdBQUV2NkQsS0FBS3c2RCxLQUFHbjdELElBQUVXLEtBQUt3NkQsS0FBRztBQUFDLGFBQUUvNEQsRUFBRWdPLFVBQVVpd0IsUUFBTTtZQUFXLElBQUkvZ0MsSUFBRTBDLEVBQUVnekIsWUFBWTtZQUFJLE9BQU8xMUIsRUFBRThsQyxhQUFhemtDLEtBQUtVLElBQUcsSUFBRy9CLEVBQUU4bEMsYUFBYXprQyxLQUFLeXNELElBQUcsSUFBRzl0RCxFQUFFOGxDLGFBQWF6a0MsS0FBSzBzRCxJQUFHLElBQUcvdEQsRUFBRThsQyxhQUFhemtDLEtBQUsyc0QsSUFBRztZQUFJaHVELEVBQUU4bEMsYUFBYXprQyxLQUFLd2hCLElBQUcsS0FBSTdpQixFQUFFOGxDLGFBQWF6a0MsS0FBS3M2RCxJQUFHLEtBQUkzN0QsRUFBRThsQyxhQUFhemtDLEtBQUt1NkQsSUFBRyxLQUFJNTdELEVBQUU4bEMsYUFBYXprQyxLQUFLdzZELElBQUcsS0FBSTc3RDtBQUFDLGFBQUVBLEVBQUVpQyxVQUFRYTtBQUFBQTtRQUFHLE1BQUssQ0FBQzlDLEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxPQUFNTyxJQUFFUCxFQUFFLE9BQU1RLElBQUVSLEVBQUUsTUFBTXlqQixRQUFPL2lCLElBQUUsSUFBSTBHLE1BQU07VUFBSyxTQUFTekc7WUFBSXpCLEtBQUtxL0MsUUFBT3IvQyxLQUFLcTZELEtBQUc3NEQsR0FBRUgsRUFBRWhCLEtBQUtMLE1BQUssS0FBSTtBQUFJO1VBQUNDLEVBQUV3QixHQUFFTCxJQUFHSyxFQUFFZ08sVUFBVTR2QyxPQUFLO1lBQVcsT0FBT3IvQyxLQUFLeTZELE1BQUksWUFBV3o2RCxLQUFLMDZELE1BQUksWUFBVzE2RCxLQUFLMjZELE1BQUksWUFBVzM2RCxLQUFLNDZELE1BQUksV0FBVTU2RCxLQUFLNjZELE1BQUk7WUFBVzc2RCxLQUFLODZELE1BQUksWUFBVzk2RCxLQUFLKzZELE1BQUksWUFBVy82RCxLQUFLZzdELE1BQUksWUFBV2g3RCxLQUFLaTdELE1BQUksWUFBV2o3RCxLQUFLazdELE1BQUksV0FBVWw3RCxLQUFLbTdELE1BQUk7WUFBVW43RCxLQUFLbzdELE1BQUksWUFBV3A3RCxLQUFLcTdELE1BQUksWUFBV3I3RCxLQUFLczdELE1BQUksWUFBV3Q3RCxLQUFLdTdELE1BQUksWUFBV3Y3RCxLQUFLdzdELE1BQUksWUFBV3g3RDtBQUFJLGFBQUV5QixFQUFFZ08sVUFBVWl3QixRQUFNO1lBQVcsSUFBSS9nQyxJQUFFMkMsRUFBRSt5QixZQUFZO1lBQUksU0FBUy8wQixFQUFFQSxHQUFFd0IsR0FBRWI7Y0FBR3RCLEVBQUU4bEMsYUFBYW5sQyxHQUFFVyxJQUFHdEIsRUFBRThsQyxhQUFhM2pDLEdBQUViLElBQUU7QUFBRTtZQUFDLE9BQU9YLEVBQUVVLEtBQUt5NkQsS0FBSXo2RCxLQUFLaTdELEtBQUksSUFBRzM3RCxFQUFFVSxLQUFLMDZELEtBQUkxNkQsS0FBS2s3RCxLQUFJLElBQUc1N0QsRUFBRVUsS0FBSzI2RCxLQUFJMzZELEtBQUttN0QsS0FBSSxLQUFJNzdELEVBQUVVLEtBQUs0NkQsS0FBSTU2RCxLQUFLbzdELEtBQUksS0FBSTk3RCxFQUFFVSxLQUFLNjZELEtBQUk3NkQsS0FBS3E3RCxLQUFJO1lBQUkvN0QsRUFBRVUsS0FBSzg2RCxLQUFJOTZELEtBQUtzN0QsS0FBSSxLQUFJMzhEO0FBQUMsYUFBRUEsRUFBRWlDLFVBQVFhO0FBQUFBO1FBQUcsTUFBSyxDQUFDOUMsR0FBRVcsR0FBRXdCO1VBQUssSUFBSWIsSUFBRWEsRUFBRSxPQUFNTSxJQUFFTixFQUFFLE9BQU1PLElBQUVQLEVBQUUsTUFBTXlqQixRQUFPampCLElBQUUsRUFBQyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxjQUFZRSxJQUFFLElBQUkwRyxNQUFNO1VBQUssU0FBU3pHO1lBQUl6QixLQUFLcS9DLFFBQU9yL0MsS0FBS3E2RCxLQUFHNzRELEdBQUVKLEVBQUVmLEtBQUtMLE1BQUssS0FBSTtBQUFJO1VBQUMsU0FBU1osRUFBRVQsR0FBRVcsR0FBRXdCO1lBQUcsT0FBT0EsSUFBRW5DLEtBQUdXLElBQUV3QjtBQUFFO1VBQUMsU0FBU2UsRUFBRWxELEdBQUVXLEdBQUV3QjtZQUFHLE9BQU9uQyxJQUFFVyxJQUFFd0IsS0FBR25DLElBQUVXO0FBQUU7VUFBQyxTQUFTeUIsRUFBRXBDLEdBQUVXO1lBQUcsUUFBT1gsTUFBSSxLQUFHVyxLQUFHLE1BQUlBLE1BQUksSUFBRVgsS0FBRyxPQUFLVyxNQUFJLElBQUVYLEtBQUc7QUFBRztVQUFDLFNBQVNzRCxFQUFFdEQsR0FBRVc7WUFBRyxRQUFPWCxNQUFJLEtBQUdXLEtBQUcsT0FBS1gsTUFBSSxLQUFHVyxLQUFHLE9BQUtBLE1BQUksSUFBRVgsS0FBRztBQUFHO1VBQUMsU0FBUzZELEVBQUU3RCxHQUFFVztZQUFHLFFBQU9YLE1BQUksSUFBRVcsS0FBRyxPQUFLWCxNQUFJLElBQUVXLEtBQUcsTUFBSVgsTUFBSTtBQUFDO1VBQUMsU0FBU3dDLEVBQUV4QyxHQUFFVztZQUFHLFFBQU9YLE1BQUksSUFBRVcsS0FBRyxPQUFLWCxNQUFJLElBQUVXLEtBQUcsT0FBS1gsTUFBSSxJQUFFVyxLQUFHO0FBQUc7VUFBQyxTQUFTOEUsRUFBRXpGLEdBQUVXO1lBQUcsUUFBT1gsTUFBSSxLQUFHVyxLQUFHLE9BQUtBLE1BQUksS0FBR1gsS0FBRyxLQUFHQSxNQUFJO0FBQUM7VUFBQyxTQUFTVSxFQUFFVixHQUFFVztZQUFHLFFBQU9YLE1BQUksS0FBR1csS0FBRyxPQUFLQSxNQUFJLEtBQUdYLEtBQUcsTUFBSUEsTUFBSSxJQUFFVyxLQUFHO0FBQUc7VUFBQyxTQUFTQyxFQUFFWixHQUFFVztZQUFHLE9BQU9YLE1BQUksSUFBRVcsTUFBSSxJQUFFLElBQUU7QUFBQztVQUFDVyxFQUFFd0IsR0FBRUwsSUFBR0ssRUFBRWdPLFVBQVU0dkMsT0FBSztZQUFXLE9BQU9yL0MsS0FBS3k2RCxNQUFJLFlBQVd6NkQsS0FBSzA2RCxNQUFJLFlBQVcxNkQsS0FBSzI2RCxNQUFJLFlBQVczNkQsS0FBSzQ2RCxNQUFJLFlBQVc1NkQsS0FBSzY2RCxNQUFJO1lBQVc3NkQsS0FBSzg2RCxNQUFJLFlBQVc5NkQsS0FBSys2RCxNQUFJLFdBQVUvNkQsS0FBS2c3RCxNQUFJLFlBQVdoN0QsS0FBS2k3RCxNQUFJLFlBQVdqN0QsS0FBS2s3RCxNQUFJLFlBQVdsN0QsS0FBS203RCxNQUFJO1lBQVduN0QsS0FBS283RCxNQUFJLFlBQVdwN0QsS0FBS3E3RCxNQUFJLFlBQVdyN0QsS0FBS3M3RCxNQUFJLFdBQVV0N0QsS0FBS3U3RCxNQUFJLFlBQVd2N0QsS0FBS3c3RCxNQUFJLFdBQVV4N0Q7QUFBSSxhQUFFeUIsRUFBRWdPLFVBQVU2TSxVQUFRLFNBQVMzZDtZQUFHLEtBQUksSUFBSVcsSUFBRVUsS0FBS3E2RCxJQUFHdjVELElBQUUsSUFBRWQsS0FBS3k2RCxLQUFJeDZELElBQUUsSUFBRUQsS0FBSzA2RCxLQUFJdDVELElBQUUsSUFBRXBCLEtBQUsyNkQsS0FBSXQ1RCxJQUFFLElBQUVyQixLQUFLNDZELEtBQUlwNUQsSUFBRSxJQUFFeEIsS0FBSzY2RCxLQUFJcDVELElBQUUsSUFBRXpCLEtBQUs4NkQsS0FBSWgyRCxJQUFFLElBQUU5RSxLQUFLKzZELEtBQUk3NkQsSUFBRSxJQUFFRixLQUFLZzdELEtBQUk5MUQsSUFBRSxJQUFFbEYsS0FBS2k3RCxLQUFJejdELElBQUUsSUFBRVEsS0FBS2s3RCxLQUFJOXpELElBQUUsSUFBRXBILEtBQUttN0QsS0FBSTl6RCxJQUFFLElBQUVySCxLQUFLbzdELEtBQUl0ekQsSUFBRSxJQUFFOUgsS0FBS3E3RCxLQUFJcnpELElBQUUsSUFBRWhJLEtBQUtzN0QsS0FBSXJ6RCxJQUFFLElBQUVqSSxLQUFLdTdELEtBQUlyOUQsSUFBRSxJQUFFOEIsS0FBS3c3RCxLQUFJM3lELElBQUUsR0FBRUEsSUFBRSxJQUFHQSxLQUFHLEdBQUV2SixFQUFFdUosS0FBR2xLLEVBQUV3a0MsWUFBWSxJQUFFdDZCO1lBQUd2SixFQUFFdUosSUFBRSxLQUFHbEssRUFBRXdrQyxZQUFZLElBQUV0NkIsSUFBRTtZQUFHLE1BQUtBLElBQUUsS0FBSUEsS0FBRyxHQUFFO2NBQUMsSUFBSUcsSUFBRTFKLEVBQUV1SixJQUFFLEtBQUlLLElBQUU1SixFQUFFdUosSUFBRSxLQUFHLElBQUdNLElBQUUzRyxFQUFFd0csR0FBRUUsSUFBR0UsSUFBRWpJLEVBQUUrSCxHQUFFRixJQUFHTSxJQUFFbEYsRUFBRTRFLElBQUUxSixFQUFFdUosSUFBRSxJQUFHSyxJQUFFNUosRUFBRXVKLElBQUUsSUFBRSxLQUFJVSxJQUFFbEssRUFBRTZKLEdBQUVGLElBQUdRLElBQUVsSyxFQUFFdUosSUFBRSxLQUFJd0IsSUFBRS9LLEVBQUV1SixJQUFFLEtBQUcsSUFBR3lCLElBQUVoTCxFQUFFdUosSUFBRSxLQUFJMEIsSUFBRWpMLEVBQUV1SixJQUFFLEtBQUcsSUFBRzJCLElBQUVwQixJQUFFaUIsSUFBRSxHQUFFZ0IsSUFBRWxDLElBQUVLLElBQUVqSyxFQUFFaUwsR0FBRXBCLEtBQUc7Y0FBRWlDLEtBQUdBLElBQUVBLElBQUUvQixJQUFFL0osRUFBRWlMLElBQUVBLElBQUVqQixJQUFFLEdBQUVBLEtBQUcsS0FBR2UsSUFBRS9LLEVBQUVpTCxJQUFFQSxJQUFFRCxJQUFFLEdBQUVBLEtBQUcsR0FBRWpMLEVBQUV1SixLQUFHd0MsR0FBRS9MLEVBQUV1SixJQUFFLEtBQUcyQjtBQUFDO1lBQUMsS0FBSSxJQUFJcUIsSUFBRSxHQUFFQSxJQUFFLEtBQUlBLEtBQUcsR0FBRTtjQUFDUixJQUFFL0wsRUFBRXVNLElBQUdyQixJQUFFbEwsRUFBRXVNLElBQUU7Y0FBRyxJQUFJTCxJQUFFM0osRUFBRWYsR0FBRWIsR0FBRW1CLElBQUcwSyxJQUFFakssRUFBRXFELEdBQUUxRixHQUFFNEgsSUFBRzRFLElBQUVqTCxFQUFFRCxHQUFFb0UsSUFBRytHLElBQUVsTCxFQUFFbUUsR0FBRXBFLElBQUdvTCxJQUFFakssRUFBRVQsR0FBRXNHLElBQUc3RyxJQUFFZ0IsRUFBRTZGLEdBQUV0RyxJQUFHbWMsSUFBRXJjLEVBQUV1SyxJQUFHK1IsSUFBRXRjLEVBQUV1SyxJQUFFLElBQUdpUyxJQUFFMWUsRUFBRW9DLEdBQUVDLEdBQUVxRCxJQUFHaVosSUFBRTNlLEVBQUUwSSxHQUFFRSxHQUFFQyxJQUFHK1YsSUFBRTlmLElBQUUrQyxJQUFFLEdBQUVrZCxJQUFFamUsSUFBRWdNLElBQUUzTSxFQUFFeWUsR0FBRTlmLEtBQUc7Y0FBRWlnQixLQUFHQSxLQUFHQSxJQUFFQSxJQUFFTCxJQUFFdmUsRUFBRXllLElBQUVBLElBQUVELElBQUUsR0FBRUEsS0FBRyxLQUFHSixJQUFFcGUsRUFBRXllLElBQUVBLElBQUVKLElBQUUsR0FBRUEsS0FBRyxLQUFHdlMsSUFBRTlMLEVBQUV5ZSxJQUFFQSxJQUFFeFQsSUFBRSxHQUFFQSxLQUFHO2NBQUUsSUFBSTRULEtBQUduUyxJQUFFSCxJQUFFLEdBQUV1UyxLQUFHclMsSUFBRVIsSUFBRWpNLEVBQUU2ZSxJQUFHblMsS0FBRztjQUFFL0wsSUFBRTRFLEdBQUU1RyxJQUFFK0osR0FBRW5ELElBQUVyRCxHQUFFd0csSUFBRUQsR0FBRXZHLElBQUVELEdBQUV3RyxJQUFFRixHQUFFdEcsSUFBRUgsSUFBRThjLElBQUU1ZSxFQUFFdUksSUFBRVQsSUFBRTJXLElBQUUsR0FBRTNXLEtBQUcsR0FBRWhHLElBQUVELEdBQUVpRyxJQUFFRCxHQUFFaEcsSUFBRW5CLEdBQUVtSCxJQUFFNUgsR0FBRVMsSUFBRWEsR0FBRXRCLElBQUUwRjtjQUFFcEUsSUFBRXFkLElBQUVFLEtBQUc5ZSxFQUFFMkYsSUFBRThZLElBQUVJLEtBQUcsR0FBRUosS0FBRztBQUFDO1lBQUNoZSxLQUFLaTdELE1BQUlqN0QsS0FBS2k3RCxNQUFJLzFELElBQUUsR0FBRWxGLEtBQUtrN0QsTUFBSWw3RCxLQUFLazdELE1BQUkxN0QsSUFBRSxHQUFFUSxLQUFLbTdELE1BQUluN0QsS0FBS203RCxNQUFJL3pELElBQUUsR0FBRXBILEtBQUtvN0QsTUFBSXA3RCxLQUFLbzdELE1BQUkvekQsSUFBRSxHQUFFckgsS0FBS3E3RCxNQUFJcjdELEtBQUtxN0QsTUFBSXZ6RCxJQUFFO1lBQUU5SCxLQUFLczdELE1BQUl0N0QsS0FBS3M3RCxNQUFJdHpELElBQUUsR0FBRWhJLEtBQUt1N0QsTUFBSXY3RCxLQUFLdTdELE1BQUl0ekQsSUFBRSxHQUFFakksS0FBS3c3RCxNQUFJeDdELEtBQUt3N0QsTUFBSXQ5RCxJQUFFLEdBQUU4QixLQUFLeTZELE1BQUl6NkQsS0FBS3k2RCxNQUFJMzVELElBQUV2QixFQUFFUyxLQUFLaTdELEtBQUkvMUQsS0FBRztZQUFFbEYsS0FBSzA2RCxNQUFJMTZELEtBQUswNkQsTUFBSXo2RCxJQUFFVixFQUFFUyxLQUFLazdELEtBQUkxN0QsS0FBRyxHQUFFUSxLQUFLMjZELE1BQUkzNkQsS0FBSzI2RCxNQUFJdjVELElBQUU3QixFQUFFUyxLQUFLbTdELEtBQUkvekQsS0FBRyxHQUFFcEgsS0FBSzQ2RCxNQUFJNTZELEtBQUs0NkQsTUFBSXY1RCxJQUFFOUIsRUFBRVMsS0FBS283RCxLQUFJL3pELEtBQUc7WUFBRXJILEtBQUs2NkQsTUFBSTc2RCxLQUFLNjZELE1BQUlyNUQsSUFBRWpDLEVBQUVTLEtBQUtxN0QsS0FBSXZ6RCxLQUFHLEdBQUU5SCxLQUFLODZELE1BQUk5NkQsS0FBSzg2RCxNQUFJcjVELElBQUVsQyxFQUFFUyxLQUFLczdELEtBQUl0ekQsS0FBRyxHQUFFaEksS0FBSys2RCxNQUFJLzZELEtBQUsrNkQsTUFBSWoyRCxJQUFFdkYsRUFBRVMsS0FBS3U3RCxLQUFJdHpELEtBQUc7WUFBRWpJLEtBQUtnN0QsTUFBSWg3RCxLQUFLZzdELE1BQUk5NkQsSUFBRVgsRUFBRVMsS0FBS3c3RCxLQUFJdDlELEtBQUc7QUFBQyxhQUFFdUQsRUFBRWdPLFVBQVVpd0IsUUFBTTtZQUFXLElBQUkvZ0MsSUFBRTBDLEVBQUVnekIsWUFBWTtZQUFJLFNBQVMvMEIsRUFBRUEsR0FBRXdCLEdBQUViO2NBQUd0QixFQUFFOGxDLGFBQWFubEMsR0FBRVcsSUFBR3RCLEVBQUU4bEMsYUFBYTNqQyxHQUFFYixJQUFFO0FBQUU7WUFBQyxPQUFPWCxFQUFFVSxLQUFLeTZELEtBQUl6NkQsS0FBS2k3RCxLQUFJLElBQUczN0QsRUFBRVUsS0FBSzA2RCxLQUFJMTZELEtBQUtrN0QsS0FBSSxJQUFHNTdELEVBQUVVLEtBQUsyNkQsS0FBSTM2RCxLQUFLbTdELEtBQUksS0FBSTc3RCxFQUFFVSxLQUFLNDZELEtBQUk1NkQsS0FBS283RCxLQUFJLEtBQUk5N0QsRUFBRVUsS0FBSzY2RCxLQUFJNzZELEtBQUtxN0QsS0FBSTtZQUFJLzdELEVBQUVVLEtBQUs4NkQsS0FBSTk2RCxLQUFLczdELEtBQUksS0FBSWg4RCxFQUFFVSxLQUFLKzZELEtBQUkvNkQsS0FBS3U3RCxLQUFJLEtBQUlqOEQsRUFBRVUsS0FBS2c3RCxLQUFJaDdELEtBQUt3N0QsS0FBSSxLQUFJNzhEO0FBQUMsYUFBRUEsRUFBRWlDLFVBQVFhO0FBQUFBO1FBQUcsTUFBSyxDQUFDOUMsR0FBRVcsR0FBRXdCO1VBQUtuQyxFQUFFaUMsVUFBUVE7VUFBRSxJQUFJbkIsSUFBRWEsRUFBRSxNQUFNc2pCO1VBQWEsU0FBU2hqQjtZQUFJbkIsRUFBRUksS0FBS0w7QUFBSztVQUFDYyxFQUFFLEtBQUZBLENBQVFNLEdBQUVuQixJQUFHbUIsRUFBRXc0RCxXQUFTOTRELEVBQUUsT0FBTU0sRUFBRW8rQixXQUFTMStCLEVBQUUsT0FBTU0sRUFBRWdpQixTQUFPdGlCLEVBQUUsT0FBTU0sRUFBRTJqQyxZQUFVamtDLEVBQUUsT0FBTU0sRUFBRXk0RCxjQUFZLzRELEVBQUU7VUFBTU0sRUFBRXkwRCxXQUFTLzBELEVBQUUsT0FBTU0sRUFBRTA0RCxXQUFTaDVELEVBQUUsT0FBTU0sRUFBRXU0RCxTQUFPdjRELEdBQUVBLEVBQUVxTyxVQUFVZ1UsT0FBSyxTQUFTOWtCLEdBQUVXO1lBQUcsSUFBSXdCLElBQUVkO1lBQUssU0FBU29CLEVBQUU5QjtjQUFHWCxFQUFFZ1QsYUFBVSxNQUFLaFQsRUFBRStrQixNQUFNcGtCLE1BQUl3QixFQUFFbTFELFNBQU9uMUQsRUFBRW0xRDtBQUFPO1lBQUMsU0FBUzUwRDtjQUFJUCxFQUFFcXZDLFlBQVVydkMsRUFBRXdpQixVQUFReGlCLEVBQUV3aUI7QUFBUTtZQUFDeGlCLEVBQUVraUIsR0FBRyxRQUFPNWhCLElBQUd6QyxFQUFFcWtCLEdBQUcsU0FBUTNoQixJQUFHMUMsRUFBRTg4RCxZQUFVbjhELE1BQUcsTUFBS0EsRUFBRXdnQyxRQUFNaC9CLEVBQUVraUIsR0FBRyxPQUFNeGhCLElBQUdWLEVBQUVraUIsR0FBRyxTQUFRdmhCO1lBQUksSUFBSUgsS0FBRTtZQUFHLFNBQVNFO2NBQUlGLE1BQUlBLEtBQUUsR0FBRzNDLEVBQUVtaEM7QUFBTTtZQUFDLFNBQVNyK0I7Y0FBSUgsTUFBSUEsS0FBRSxHQUFHLHFCQUFtQjNDLEVBQUU0MEQsV0FBUzUwRCxFQUFFNDBEO0FBQVU7WUFBQyxTQUFTbjBELEVBQUVUO2NBQUcsSUFBR2tELEtBQUksTUFBSTVCLEVBQUU4K0MsY0FBYy8rQyxNQUFLLFVBQVMsTUFBTXJCO0FBQUM7WUFBQyxTQUFTa0Q7Y0FBSWYsRUFBRW9pQixlQUFlLFFBQU85aEIsSUFBR3pDLEVBQUV1a0IsZUFBZSxTQUFRN2hCLElBQUdQLEVBQUVvaUIsZUFBZSxPQUFNMWhCLElBQUdWLEVBQUVvaUIsZUFBZSxTQUFRemhCLElBQUdYLEVBQUVvaUIsZUFBZSxTQUFROWpCO2NBQUdULEVBQUV1a0IsZUFBZSxTQUFROWpCLElBQUcwQixFQUFFb2lCLGVBQWUsT0FBTXJoQixJQUFHZixFQUFFb2lCLGVBQWUsU0FBUXJoQixJQUFHbEQsRUFBRXVrQixlQUFlLFNBQVFyaEI7QUFBRTtZQUFDLE9BQU9mLEVBQUVraUIsR0FBRyxTQUFRNWpCLElBQUdULEVBQUVxa0IsR0FBRyxTQUFRNWpCLElBQUcwQixFQUFFa2lCLEdBQUcsT0FBTW5oQixJQUFHZixFQUFFa2lCLEdBQUcsU0FBUW5oQixJQUFHbEQsRUFBRXFrQixHQUFHLFNBQVFuaEIsSUFBR2xELEVBQUVta0IsS0FBSyxRQUFPaGlCLElBQUduQztBQUFDO0FBQUE7UUFBRyxNQUFLLENBQUNBLEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxPQUFNTyxJQUFFUCxFQUFFLE9BQU1RLElBQUVSLEVBQUUsTUFBS1UsSUFBRVYsRUFBRSxPQUFNVyxJQUFFbkM7VUFBRW1DLEVBQUVra0QsVUFBUSxTQUFTaG5ELEdBQUVXO1lBQUdYLElBQUUsbUJBQWlCQSxJQUFFNkMsRUFBRXFDLE1BQU1sRixLQUFHMEMsRUFBRTFDO1lBQUcsSUFBSXlDLEtBQUcsTUFBSU4sRUFBRXZCLEVBQUVvdkQsU0FBU2pKLFNBQVNnVyxPQUFPLGVBQWEsVUFBUSxJQUFHcDZELElBQUUzQyxFQUFFK21ELFlBQVV0a0QsR0FBRUssSUFBRTlDLEVBQUUrdkQsWUFBVS92RCxFQUFFZzlELE1BQUt2OEQsSUFBRVQsRUFBRWk5RCxNQUFLLzVELElBQUVsRCxFQUFFNFUsUUFBTTtZQUFJOVIsTUFBSSxNQUFJQSxFQUFFSyxRQUFRLFNBQU9MLElBQUUsTUFBSUEsSUFBRSxNQUFLOUMsRUFBRWs5RCxPQUFLcDZELElBQUVILElBQUUsT0FBS0csSUFBRSxPQUFLckMsSUFBRSxNQUFJQSxJQUFFLE1BQUl5QyxHQUFFbEQsRUFBRW05RCxVQUFRbjlELEVBQUVtOUQsVUFBUSxPQUFPaHZEO1lBQWNuTyxFQUFFbzlELFVBQVFwOUQsRUFBRW85RCxXQUFTLENBQUM7WUFBRSxJQUFJaDdELElBQUUsSUFBSWQsRUFBRXRCO1lBQUcsT0FBT1csS0FBR3lCLEVBQUVpaUIsR0FBRyxZQUFXMWpCLElBQUd5QjtBQUFDLGFBQUVVLEVBQUVtSCxNQUFJLFNBQVNqSyxHQUFFVztZQUFHLElBQUl3QixJQUFFVyxFQUFFa2tELFFBQVFobkQsR0FBRVc7WUFBRyxPQUFPd0IsRUFBRWcvQixPQUFNaC9CO0FBQUMsYUFBRVcsRUFBRXU2RCxnQkFBYy83RCxHQUFFd0IsRUFBRXc2RCxrQkFBZ0I3NkQsRUFBRTY2RCxpQkFBZ0J4NkQsRUFBRXk2RCxRQUFNLFlBQVcsR0FBRXo2RCxFQUFFeTZELE1BQU1DLG9CQUFrQixHQUFFMTZELEVBQUUyNkQsY0FBWSxJQUFJMzZELEVBQUV5NkQ7VUFBTXo2RCxFQUFFNDZELGVBQWEvNkQsR0FBRUcsRUFBRTY2RCxVQUFRLEVBQUMsWUFBVyxXQUFVLFFBQU8sVUFBUyxPQUFNLFFBQU8sUUFBTyxZQUFXLFNBQVEsY0FBYSxTQUFRLFFBQU8sVUFBUyxXQUFVLFNBQVEsUUFBTyxZQUFXLGFBQVksU0FBUSxPQUFNLFVBQVMsVUFBUyxhQUFZLFNBQVEsVUFBUztBQUFhO1FBQUcsTUFBSyxDQUFDMzlELEdBQUVXLEdBQUV3QjtVQUFLLElBQUliO1VBQUUsU0FBU21CO1lBQUksU0FBRyxNQUFTbkIsR0FBRSxPQUFPQTtZQUFFLElBQUdhLEVBQUV2QixFQUFFZzlELGdCQUFlO2NBQUN0OEQsSUFBRSxJQUFJYSxFQUFFdkIsRUFBRWc5RDtjQUFlO2dCQUFJdDhELEVBQUV1OEQsS0FBSyxPQUFNMTdELEVBQUV2QixFQUFFazlELGlCQUFlLE1BQUk7QUFBc0MsZ0JBQWYsT0FBTTk5RDtnQkFBR3NCLElBQUU7QUFBSTtBQUFDLG1CQUFNQSxJQUFFO1lBQUssT0FBT0E7QUFBQztVQUFDLFNBQVNvQixFQUFFMUM7WUFBRyxJQUFJVyxJQUFFOEI7WUFBSSxLQUFJOUIsR0FBRSxRQUFNO1lBQUc7Y0FBSSxPQUFPQSxFQUFFbzlELGVBQWEvOUQsR0FBRVcsRUFBRW85RCxpQkFBZS85RDtBQUFXLGNBQVQsT0FBTUEsSUFBRztZQUFDLFFBQU07QUFBRTtVQUFDLFNBQVMyQyxFQUFFM0M7WUFBRyxPQUFNLHFCQUFtQkE7QUFBQztVQUFDVyxFQUFFcTlELFFBQU1yN0QsRUFBRVIsRUFBRXZCLEVBQUVvOUQsVUFBUXI3RCxFQUFFUixFQUFFdkIsRUFBRXE5RCxpQkFBZ0J0OUQsRUFBRXU5RCxpQkFBZXY3RCxFQUFFUixFQUFFdkIsRUFBRXU5RCxpQkFBZ0J4OUQsRUFBRXk5RCxrQkFBZ0J6N0QsRUFBRVIsRUFBRXZCLEVBQUV5OUQ7VUFBaUIxOUQsRUFBRTI5RCxjQUFZMzlELEVBQUVxOUQsU0FBT3Q3RCxFQUFFLGdCQUFlL0IsRUFBRTQ5RCxZQUFVNTlELEVBQUVxOUQsU0FBT3Q3RCxFQUFFLGNBQWEvQixFQUFFNjlELHlCQUF1Qjc5RCxFQUFFcTlELFNBQU90N0QsRUFBRTtVQUEyQi9CLEVBQUU4OUQsbUJBQWlCOTlELEVBQUVxOUQsV0FBU3Y3RCxPQUFLRSxFQUFFRixJQUFJZzhELG1CQUFrQm45RCxJQUFFO0FBQUE7UUFBTSxNQUFLLENBQUN0QixHQUFFVyxHQUFFd0I7VUFBSyxJQUFJYixJQUFFYSxFQUFFLE1BQU15akIsUUFBT25qQixJQUFFTixFQUFFLE9BQU1PLElBQUVQLEVBQUUsT0FBTVEsSUFBRVIsRUFBRSxPQUFNVSxJQUFFVixFQUFFLE9BQU1XLElBQUVYLEVBQUUsT0FBTTFCLElBQUVvQyxFQUFFeTZELGlCQUFnQnA2RCxJQUFFTCxFQUFFNjdELGFBQVl0OEQsSUFBRXBDLEVBQUVpQyxVQUFRLFNBQVNqQztZQUFHLElBQUlXLEdBQUV3QixJQUFFZDtZQUFLeUIsRUFBRSs5QixTQUFTbi9CLEtBQUtTLElBQUdBLEVBQUV3OEQsUUFBTTMrRCxHQUFFbUMsRUFBRXk4RCxRQUFNLElBQUd6OEQsRUFBRTA4RCxXQUFTLENBQUMsR0FBRTcrRCxFQUFFOCtELFFBQU0zOEQsRUFBRTB2QyxVQUFVLGlCQUFnQixXQUFTdndDLEVBQUVpRyxLQUFLdkgsRUFBRTgrRCxNQUFNL3VELFNBQVM7WUFBV3hNLE9BQU84UCxLQUFLclQsRUFBRW85RCxTQUFTenpELFNBQVEsU0FBVWhKO2NBQUd3QixFQUFFMHZDLFVBQVVseEMsR0FBRVgsRUFBRW85RCxRQUFRejhEO0FBQUk7WUFBRyxJQUFJOEIsS0FBRTtZQUFHLElBQUcsb0JBQWtCekMsRUFBRTYrQixRQUFNLG9CQUFtQjcrQixNQUFJMEMsRUFBRTA3RCxpQkFBZ0IzN0QsS0FBRSxHQUFHOUIsS0FBRSxRQUFRLElBQUcsdUJBQXFCWCxFQUFFNitCLE1BQUtsK0IsS0FBRSxRQUFRLElBQUcsK0JBQTZCWCxFQUFFNitCLE1BQUtsK0IsS0FBRytCLEVBQUUrN0QsdUJBQXFCO2NBQUMsSUFBR3orRCxFQUFFNitCLFFBQU0sY0FBWTcrQixFQUFFNitCLFFBQU0sa0JBQWdCNytCLEVBQUU2K0IsTUFBSyxNQUFNLElBQUkvMEIsTUFBTTtjQUErQm5KLEtBQUU7QUFBRTtZQUFDd0IsRUFBRXU3QixRQUFNLFNBQVMxOUIsR0FBRVc7Y0FBRyxPQUFPK0IsRUFBRXM3RCxTQUFPcjlELElBQUUsVUFBUStCLEVBQUU4N0Qsd0JBQXNCLDRCQUEwQjk3RCxFQUFFNjdELFdBQVMsY0FBWTc3RCxFQUFFNDdELGVBQWF0K0QsSUFBRSxnQkFBYztBQUFNLGFBQXRKLENBQXdKVyxHQUFFOEIsSUFBR04sRUFBRTQ4RCxjQUFZLE1BQUs1OEQsRUFBRTY4RCxpQkFBZSxNQUFLNzhELEVBQUU4OEQsZUFBYSxNQUFLOThELEVBQUVraUIsR0FBRyxXQUFTO2NBQVlsaUIsRUFBRSs4RDtBQUFZO0FBQUU7VUFBRXY4RCxFQUFFUCxHQUFFVSxFQUFFKzlCLFdBQVV6K0IsRUFBRTBPLFVBQVUrZ0MsWUFBVSxTQUFTN3hDLEdBQUVXO1lBQUcsSUFBSXdCLElBQUVuQyxFQUFFaU87YUFBZSxNQUFJM0ssRUFBRUgsUUFBUWhCLE9BQUtkLEtBQUt3OUQsU0FBUzE4RCxLQUFHO2NBQUMyQyxNQUFLOUU7Y0FBRUgsT0FBTWM7O0FBQUcsYUFBRXlCLEVBQUUwTyxVQUFVcXVELFlBQVUsU0FBU24vRDtZQUFHLElBQUlXLElBQUVVLEtBQUt3OUQsU0FBUzcrRCxFQUFFaU87WUFBZSxPQUFPdE4sSUFBRUEsRUFBRWQsUUFBTTtBQUFJLGFBQUV1QyxFQUFFME8sVUFBVXN1RCxlQUFhLFNBQVNwL0Q7bUJBQVVxQixLQUFLdzlELFNBQVM3K0QsRUFBRWlPO0FBQWMsYUFBRTdMLEVBQUUwTyxVQUFVb3VELFlBQVU7WUFBVyxJQUFJbC9ELElBQUVxQjtZQUFLLEtBQUlyQixFQUFFcS9ELFlBQVc7Y0FBQyxJQUFJMStELElBQUVYLEVBQUUyK0Q7Y0FBTSxhQUFZaCtELEtBQUcsTUFBSUEsRUFBRTIrRCxXQUFTdC9ELEVBQUV3bEIsV0FBVzdrQixFQUFFMitEO2NBQVMsSUFBSWgrRCxJQUFFdEIsRUFBRTYrRCxVQUFTbDhELElBQUU7Y0FBSyxVQUFRaEMsRUFBRXc4RCxVQUFRLFdBQVN4OEQsRUFBRXc4RCxXQUFTeDZELElBQUUsSUFBSTQ4RCxLQUFLdi9ELEVBQUU0K0QsT0FBTTtnQkFBQ3g2RCxPQUFNOUMsRUFBRSxtQkFBaUIsQ0FBQyxHQUFHekIsU0FBTzs7Y0FBTSxJQUFJZ0QsSUFBRTtjQUFHLElBQUdVLE9BQU84UCxLQUFLL1IsR0FBR3FJLFNBQVEsU0FBVTNKO2dCQUFHLElBQUlXLElBQUVXLEVBQUV0QixHQUFHOEUsTUFBSzNDLElBQUViLEVBQUV0QixHQUFHSDtnQkFBTTBKLE1BQU1DLFFBQVFySCxLQUFHQSxFQUFFd0gsU0FBUSxTQUFVM0o7a0JBQUc2QyxFQUFFaEIsS0FBSyxFQUFDbEIsR0FBRVg7QUFBSSxzQkFBRzZDLEVBQUVoQixLQUFLLEVBQUNsQixHQUFFd0I7QUFBSSxtQkFBRyxZQUFVbkMsRUFBRTA5QixPQUFNO2dCQUFDLElBQUk1NkIsSUFBRTtnQkFBSyxJQUFHSixFQUFFMDdELGlCQUFnQjtrQkFBQyxJQUFJMzlELElBQUUsSUFBSTQ5RDtrQkFBZ0J2N0QsSUFBRXJDLEVBQUUrK0QsUUFBT3gvRCxFQUFFeS9ELHdCQUFzQmgvRCxHQUFFLG9CQUFtQkUsS0FBRyxNQUFJQSxFQUFFKytELG1CQUFpQjEvRCxFQUFFKytELGNBQVk1OEQsRUFBRXZCLEVBQUU0a0IsWUFBVztvQkFBWXhsQixFQUFFbWtCLEtBQUssbUJBQWtCbmtCLEVBQUV5L0QseUJBQXVCei9ELEVBQUV5L0Qsc0JBQXNCM3RCO0FBQVEsc0JBQUVueEMsRUFBRSsrRDtBQUFnQjtnQkFBQ3Y5RCxFQUFFdkIsRUFBRW85RCxNQUFNaCtELEVBQUUyK0QsTUFBTXpCLEtBQUk7a0JBQUNDLFFBQU9uOUQsRUFBRTIrRCxNQUFNeEI7a0JBQU9DLFNBQVF2NkQ7a0JBQUVyQyxNQUFLbUMsVUFBRztrQkFBT2s4QixNQUFLO2tCQUFPOGdDLGFBQVloL0QsRUFBRWkvRCxrQkFBZ0IsWUFBVTtrQkFBY0osUUFBTzE4RDttQkFBSXpDLE1BQUssU0FBVU07a0JBQUdYLEVBQUU2L0QsaUJBQWVsL0QsR0FBRVgsRUFBRTgvRCxjQUFhLElBQUk5L0QsRUFBRSsvRDtBQUFXLHFCQUFFLFNBQVVwL0Q7a0JBQUdYLEVBQUU4L0QsY0FBYSxJQUFJOS9ELEVBQUVxL0QsY0FBWXIvRCxFQUFFbWtCLEtBQUssU0FBUXhqQjtBQUFHO0FBQUUscUJBQUs7Z0JBQUMsSUFBSXlCLElBQUVwQyxFQUFFZ2dFLE9BQUssSUFBSTc5RCxFQUFFdkIsRUFBRWc5RDtnQkFBZTtrQkFBSXg3RCxFQUFFeTdELEtBQUs3OUQsRUFBRTIrRCxNQUFNeEIsUUFBT245RCxFQUFFMitELE1BQU16QixNQUFJO0FBQW9FLGtCQUFoRSxPQUFNdjhEO2tCQUFHLFlBQVk4QixFQUFFZ3ZDLFVBQVM7b0JBQVl6eEMsRUFBRW1rQixLQUFLLFNBQVF4akI7QUFBRztBQUFFO2dCQUFDLGtCQUFpQnlCLE1BQUlBLEVBQUUyN0QsZUFBYS85RCxFQUFFMDlCLFFBQU8scUJBQW9CdDdCLE1BQUlBLEVBQUV3OUQsb0JBQWtCai9ELEVBQUVpL0Q7Z0JBQWlCLFdBQVM1L0QsRUFBRTA5QixTQUFPLHNCQUFxQnQ3QixLQUFHQSxFQUFFcThELGlCQUFpQix1Q0FBc0Msb0JBQW1COTlELE1BQUl5QixFQUFFazlELFVBQVEzK0QsRUFBRSsrRDtnQkFBZXQ5RCxFQUFFNjlELFlBQVU7a0JBQVdqZ0UsRUFBRW1rQixLQUFLO0FBQWlCLG9CQUFHdGhCLEVBQUU4RyxTQUFRLFNBQVUzSjtrQkFBR29DLEVBQUU4OUQsaUJBQWlCbGdFLEVBQUUsSUFBR0EsRUFBRTtBQUFJLHFCQUFHQSxFQUFFbWdFLFlBQVUsTUFBSy85RCxFQUFFZytELHFCQUFtQjtrQkFBVyxRQUFPaCtELEVBQUVpK0Q7bUJBQVksS0FBS245RCxFQUFFbzlEO21CQUFRLEtBQUtwOUQsRUFBRXE5RDtvQkFBS3ZnRSxFQUFFd2dFOztBQUFpQixtQkFBRSw4QkFBNEJ4Z0UsRUFBRTA5QixVQUFRdDdCLEVBQUVxK0QsYUFBVztrQkFBV3pnRSxFQUFFd2dFO0FBQWdCLG9CQUFHcCtELEVBQUVzK0QsVUFBUTtrQkFBVzFnRSxFQUFFcS9ELGVBQWFyL0QsRUFBRTgvRCxjQUFhLElBQUk5L0QsRUFBRW1rQixLQUFLLFNBQVEsSUFBSXJhLE1BQU07QUFBYztnQkFBRTtrQkFBSTFILEVBQUV1K0QsS0FBS2grRDtBQUFtRSxrQkFBaEUsT0FBTWhDO2tCQUFHLFlBQVk4QixFQUFFZ3ZDLFVBQVM7b0JBQVl6eEMsRUFBRW1rQixLQUFLLFNBQVF4akI7QUFBRztBQUFFO0FBQUM7QUFBQztBQUFDLGFBQUV5QixFQUFFME8sVUFBVTB2RCxpQkFBZTtZQUFXLElBQUl4Z0UsSUFBRXFCO1lBQUtyQixFQUFFOC9ELGNBQWEsSUFBSSxTQUFTOS9EO2NBQUc7Z0JBQUksSUFBSVcsSUFBRVgsRUFBRTRnRTtnQkFBTyxPQUFPLFNBQU9qZ0UsS0FBRyxNQUFJQTtBQUFtQixnQkFBakIsT0FBTVg7Z0JBQUcsUUFBTTtBQUFFO0FBQUMsYUFBeEUsQ0FBMEVBLEVBQUVnZ0UsVUFBUWhnRSxFQUFFcS9ELGVBQWFyL0QsRUFBRW1nRSxhQUFXbmdFLEVBQUUrL0QsWUFBVy8vRCxFQUFFbWdFLFVBQVVLLGVBQWV4Z0UsRUFBRTgvRCxhQUFhendDLEtBQUtydkI7QUFBSSxhQUFFb0MsRUFBRTBPLFVBQVVpdkQsV0FBUztZQUFXLElBQUkvL0QsSUFBRXFCO1lBQUtyQixFQUFFcS9ELGVBQWFyL0QsRUFBRW1nRSxZQUFVLElBQUkxL0QsRUFBRVQsRUFBRWdnRSxNQUFLaGdFLEVBQUU2L0QsZ0JBQWU3L0QsRUFBRTA5QixPQUFNMTlCLEVBQUU4L0QsYUFBYXp3QyxLQUFLcnZCLEtBQUlBLEVBQUVtZ0UsVUFBVTk3QyxHQUFHLFVBQVEsU0FBVTFqQjtjQUFHWCxFQUFFbWtCLEtBQUssU0FBUXhqQjtBQUFHLGlCQUFHWCxFQUFFbWtCLEtBQUssWUFBV25rQixFQUFFbWdFO0FBQVcsYUFBRS85RCxFQUFFME8sVUFBVWtVLFNBQU8sU0FBU2hsQixHQUFFVyxHQUFFd0I7WUFBR2QsS0FBS3U5RCxNQUFNLzhELEtBQUs3QixJQUFHbUM7QUFBRyxhQUFFQyxFQUFFME8sVUFBVWd2RCxlQUFhLFNBQVM5L0Q7WUFBRyxJQUFJVyxJQUFFVTtZQUFLYyxFQUFFdkIsRUFBRXF6RCxhQUFhdHpELEVBQUVzK0QsZUFBY3QrRCxFQUFFcytELGVBQWEsTUFBS2ovRCxLQUFHbUMsRUFBRXZCLEVBQUVxekQsYUFBYXR6RCxFQUFFbytELGNBQWFwK0QsRUFBRW8rRCxjQUFZLFFBQU1wK0QsRUFBRXErRCxtQkFBaUJyK0QsRUFBRXMrRCxlQUFhOThELEVBQUV2QixFQUFFNGtCLFlBQVc7Y0FBWTdrQixFQUFFd2pCLEtBQUs7QUFBVyxnQkFBRXhqQixFQUFFcStEO0FBQWdCLGFBQUU1OEQsRUFBRTBPLFVBQVVnaEMsUUFBTTF2QyxFQUFFME8sVUFBVThqRCxVQUFRLFNBQVM1MEQ7WUFBRyxJQUFJVyxJQUFFVTtZQUFLVixFQUFFMCtELGNBQVcsR0FBRzErRCxFQUFFbS9ELGNBQWEsSUFBSW4vRCxFQUFFdy9ELGNBQVl4L0QsRUFBRXcvRCxVQUFVZCxjQUFXLElBQUkxK0QsRUFBRXEvRCxPQUFLci9ELEVBQUVxL0QsS0FBS2x1QixVQUFRbnhDLEVBQUU4K0QseUJBQXVCOStELEVBQUU4K0Qsc0JBQXNCM3RCO1lBQVE5eEMsS0FBR1csRUFBRXdqQixLQUFLLFNBQVFua0I7QUFBRSxhQUFFb0MsRUFBRTBPLFVBQVVxd0IsTUFBSSxTQUFTbmhDLEdBQUVXLEdBQUV3QjtZQUFHLHFCQUFtQm5DLE1BQUltQyxJQUFFbkMsR0FBRUEsU0FBRSxJQUFROEMsRUFBRSs5QixTQUFTL3ZCLFVBQVVxd0IsSUFBSXovQixLQUFLTCxNQUFLckIsR0FBRVcsR0FBRXdCO0FBQUUsYUFBRUMsRUFBRTBPLFVBQVUwVSxhQUFXLFNBQVN4bEIsR0FBRVc7WUFBRyxJQUFJd0IsSUFBRWQ7WUFBS1YsS0FBR3dCLEVBQUU2OUMsS0FBSyxXQUFVci9DLElBQUd3QixFQUFFNjhELGlCQUFlaC9ELEdBQUVtQyxFQUFFMjlELGNBQWE7QUFBRyxhQUFFMTlELEVBQUUwTyxVQUFVK3ZELGVBQWEsWUFBVyxHQUFFeitELEVBQUUwTyxVQUFVZ3dELGFBQVcsWUFBVyxHQUFFMStELEVBQUUwTyxVQUFVaXdELHFCQUFtQixZQUFXO1VBQUUsSUFBSXo5RCxJQUFFLEVBQUMsa0JBQWlCLG1CQUFrQixrQ0FBaUMsaUNBQWdDLGNBQWEsa0JBQWlCLFVBQVMsV0FBVSxRQUFPLE9BQU0sVUFBUyxRQUFPLGNBQWEsVUFBUyxXQUFVLE1BQUssV0FBVSxxQkFBb0IsV0FBVTtBQUFLO1FBQUcsTUFBSyxDQUFDdEQsR0FBRVcsR0FBRXdCO1VBQUssSUFBSWIsSUFBRWEsRUFBRSxPQUFNTSxJQUFFTixFQUFFLE1BQU15akIsUUFBT2xqQixJQUFFUCxFQUFFLE9BQU1RLElBQUVSLEVBQUUsT0FBTVUsSUFBRVYsRUFBRSxPQUFNVyxJQUFFbkMsRUFBRSs5RCxjQUFZO1lBQUNzQyxRQUFPO1lBQUVDLFFBQU87WUFBRUMsa0JBQWlCO1lBQUVaLFNBQVE7WUFBRUMsTUFBSzthQUFHOS9ELElBQUVFLEVBQUUyOEQsa0JBQWdCLFNBQVN0OUQsR0FBRVcsR0FBRXdCLEdBQUVRO1lBQUcsSUFBSUcsSUFBRXpCO1lBQUssSUFBR3dCLEVBQUVvNEQsU0FBU3Y1RCxLQUFLb0IsSUFBR0EsRUFBRTQ2QixRQUFNdjdCLEdBQUVXLEVBQUVzNkQsVUFBUSxDQUFDLEdBQUV0NkQsRUFBRXErRCxhQUFXLElBQUdyK0QsRUFBRXMrRCxXQUFTLENBQUMsR0FBRXQrRCxFQUFFdStELGNBQVksSUFBR3YrRCxFQUFFdWhCLEdBQUcsUUFBTTtjQUFZL2lCLEVBQUVtd0MsVUFBUztnQkFBWTN1QyxFQUFFcWhCLEtBQUs7QUFBUztBQUFHLGlCQUFHLFlBQVVoaUIsR0FBRTtjQUFDLElBQUdXLEVBQUUrOEQsaUJBQWVsL0QsR0FBRW1DLEVBQUVvNkQsTUFBSXY4RCxFQUFFdThELEtBQUlwNkQsRUFBRXcrRCxhQUFXM2dFLEVBQUVpZ0UsUUFBTzk5RCxFQUFFeStELGdCQUFjNWdFLEVBQUU2Z0UsWUFBVzdnRSxFQUFFeThELFFBQVF6ekQsU0FBUSxTQUFVM0osR0FBRVc7Z0JBQUdtQyxFQUFFczZELFFBQVF6OEQsRUFBRXNOLGlCQUFlak8sR0FBRThDLEVBQUVxK0QsV0FBV3QvRCxLQUFLbEIsR0FBRVg7QUFBRyxtQkFBRzBDLEVBQUV3N0QsZ0JBQWU7Z0JBQUMsSUFBSXo5RCxJQUFFLElBQUkwOUQsZUFBZTtrQkFBQ3A1QyxPQUFNLFNBQVMva0I7b0JBQUcsT0FBTzJDLEdBQUUsSUFBSSxJQUFJbEQsU0FBUSxTQUFVa0IsR0FBRXdCO3NCQUFHVyxFQUFFdThELGFBQVdsOUQsTUFBSVcsRUFBRWpCLEtBQUtZLEVBQUU4RSxLQUFLdkgsTUFBSVcsTUFBSW1DLEVBQUUyK0QsZUFBYTlnRTtBQUFFO0FBQUU7a0JBQUVnMEQsT0FBTTtvQkFBV2h5RCxHQUFFLElBQUlHLEVBQUV1OEQsY0FBWXY4RCxFQUFFakIsS0FBSztBQUFLO2tCQUFFaXdDLE9BQU0sU0FBUzl4QztvQkFBRzJDLEdBQUUsSUFBSUcsRUFBRXU4RCxjQUFZdjhELEVBQUVxaEIsS0FBSyxTQUFRbmtCO0FBQUU7O2dCQUFJO2tCQUFJLFlBQVlXLEVBQUVILEtBQUtraEUsT0FBT2poRSxHQUFHdXZCLE9BQU0sU0FBVWh3QjtvQkFBRzJDLEdBQUUsSUFBSUcsRUFBRXU4RCxjQUFZdjhELEVBQUVxaEIsS0FBSyxTQUFRbmtCO0FBQUc7QUFBWSxrQkFBVCxPQUFNQSxJQUFHO0FBQUM7Y0FBQyxJQUFJa0QsSUFBRXZDLEVBQUVILEtBQUttaEU7ZUFBYSxTQUFTM2hFO2dCQUFJa0QsRUFBRXdoQyxPQUFPcmtDLE1BQUssU0FBVU07a0JBQUdtQyxFQUFFdThELGVBQWExOEQsRUFBRWhDLEVBQUVSLE9BQU1RLEVBQUVSLE9BQUsyQyxFQUFFakIsS0FBSyxTQUFPaUIsRUFBRWpCLEtBQUtZLEVBQUU4RSxLQUFLNUcsRUFBRWQsU0FBUUc7QUFBTSxvQkFBR2d3QixPQUFNLFNBQVVod0I7a0JBQUcyQyxHQUFFLElBQUlHLEVBQUV1OEQsY0FBWXY4RCxFQUFFcWhCLEtBQUssU0FBUW5rQjtBQUFHO0FBQUUsZUFBbEw7QUFBcUwsbUJBQU0sSUFBRzhDLEVBQUVrOUQsT0FBS2hnRSxHQUFFOEMsRUFBRTgrRCxPQUFLLEdBQUU5K0QsRUFBRW82RCxNQUFJbDlELEVBQUU2aEUsYUFBWS8rRCxFQUFFdytELGFBQVd0aEUsRUFBRTRnRSxRQUFPOTlELEVBQUV5K0QsZ0JBQWN2aEUsRUFBRXdoRSxZQUFXeGhFLEVBQUU4aEUsd0JBQXdCNXpELE1BQU0sU0FBU3ZFLFNBQVEsU0FBVTNKO2NBQUcsSUFBSVcsSUFBRVgsRUFBRXFFLE1BQU07Y0FBb0IsSUFBRzFELEdBQUU7Z0JBQUMsSUFBSXdCLElBQUV4QixFQUFFLEdBQUdzTjtnQkFBYyxpQkFBZTlMLFVBQUcsTUFBU1csRUFBRXM2RCxRQUFRajdELE9BQUtXLEVBQUVzNkQsUUFBUWo3RCxLQUFHLEtBQUlXLEVBQUVzNkQsUUFBUWo3RCxHQUFHTixLQUFLbEIsRUFBRSxZQUFLLE1BQVNtQyxFQUFFczZELFFBQVFqN0QsS0FBR1csRUFBRXM2RCxRQUFRajdELE1BQUksT0FBS3hCLEVBQUUsS0FBR21DLEVBQUVzNkQsUUFBUWo3RCxLQUFHeEIsRUFBRTtnQkFBR21DLEVBQUVxK0QsV0FBV3QvRCxLQUFLbEIsRUFBRSxJQUFHQSxFQUFFO0FBQUc7QUFBRSxpQkFBR21DLEVBQUVpL0QsV0FBUyxtQkFBa0JyL0QsRUFBRSs3RCxrQkFBaUI7Y0FBQyxJQUFJcjhELElBQUVVLEVBQUVxK0QsV0FBVztjQUFhLElBQUcvK0QsR0FBRTtnQkFBQyxJQUFJa0IsSUFBRWxCLEVBQUVpQyxNQUFNO2dCQUEyQmYsTUFBSVIsRUFBRWkvRCxXQUFTeitELEVBQUUsR0FBRzJLO0FBQWM7Y0FBQ25MLEVBQUVpL0QsYUFBV2ovRCxFQUFFaS9ELFdBQVM7QUFBUTtBQUFDO1VBQUVwL0QsRUFBRWxDLEdBQUVvQyxFQUFFbzRELFdBQVV4NkQsRUFBRXFRLFVBQVVtVSxRQUFNO1lBQVcsSUFBSWpsQixJQUFFcUIsS0FBS29nRTtZQUFhemhFLE1BQUlxQixLQUFLb2dFLGVBQWEsTUFBS3poRTtBQUFJLGFBQUVTLEVBQUVxUSxVQUFVMHZELGlCQUFlLFNBQVN4Z0U7WUFBRyxJQUFJVyxJQUFFVSxNQUFLQyxJQUFFWCxFQUFFcS9ELE1BQUt0OUQsSUFBRTtZQUFLLFFBQU8vQixFQUFFKzhCO2FBQU8sS0FBSTtjQUFPLEtBQUloN0IsSUFBRXBCLEVBQUUwZ0UsY0FBY3BnRSxTQUFPakIsRUFBRWloRSxNQUFLO2dCQUFDLElBQUlqL0QsSUFBRUQsRUFBRTB2QixPQUFPenhCLEVBQUVpaEU7Z0JBQU0sSUFBRyxxQkFBbUJqaEUsRUFBRW9oRSxVQUFTO2tCQUFDLEtBQUksSUFBSWwvRCxJQUFFSixFQUFFd2pCLE1BQU10akIsRUFBRWYsU0FBUW5CLElBQUUsR0FBRUEsSUFBRWtDLEVBQUVmLFFBQU9uQixLQUFJb0MsRUFBRXBDLEtBQUcsTUFBSWtDLEVBQUVxSyxXQUFXdk07a0JBQUdFLEVBQUVrQixLQUFLZ0I7QUFBRSx1QkFBTWxDLEVBQUVrQixLQUFLYyxHQUFFaEMsRUFBRW9oRTtnQkFBVXBoRSxFQUFFaWhFLE9BQUtsL0QsRUFBRWQ7QUFBTTtjQUFDOzthQUFNLEtBQUk7Y0FBYyxJQUFHTixFQUFFKytELGVBQWF2OUQsRUFBRXk5RCxTQUFPai9ELEVBQUUyZ0UsVUFBUztjQUFNdi9ELElBQUVwQixFQUFFMmdFLFVBQVN0aEUsRUFBRWtCLEtBQUtZLEVBQUU4RSxLQUFLLElBQUlaLFdBQVdqRTtjQUFLOzthQUFNLEtBQUk7Y0FBMEIsSUFBR0EsSUFBRXBCLEVBQUUyZ0UsVUFBUzNnRSxFQUFFKytELGVBQWF2OUQsRUFBRXc5RCxZQUFVNTlELEdBQUU7Y0FBTS9CLEVBQUVrQixLQUFLWSxFQUFFOEUsS0FBSyxJQUFJWixXQUFXakU7Y0FBSzs7YUFBTSxLQUFJO2NBQVksSUFBR0EsSUFBRXBCLEVBQUUyZ0UsVUFBUzNnRSxFQUFFKytELGVBQWF2OUQsRUFBRXc5RCxTQUFRO2NBQU0sSUFBSXA5RCxJQUFFLElBQUlmLEVBQUV2QixFQUFFc2hFO2NBQWVoL0QsRUFBRXU5RCxhQUFXO2dCQUFXdjlELEVBQUVoRCxPQUFPcVksYUFBVzVYLEVBQUVpaEUsU0FBT2poRSxFQUFFa0IsS0FBS1ksRUFBRThFLEtBQUssSUFBSVosV0FBV3pELEVBQUVoRCxPQUFPa0gsTUFBTXpHLEVBQUVpaEUsVUFBU2poRSxFQUFFaWhFLE9BQUsxK0QsRUFBRWhELE9BQU9xWTtBQUFXLGlCQUFFclYsRUFBRWkvRCxTQUFPO2dCQUFXbmlFLEdBQUUsSUFBSVcsRUFBRWtCLEtBQUs7QUFBSyxpQkFBRXFCLEVBQUVrL0Qsa0JBQWtCMS9EOztZQUFHL0IsRUFBRXEvRCxLQUFLSyxlQUFhdjlELEVBQUV5OUQsUUFBTSxnQkFBYzUvRCxFQUFFKzhCLFVBQVExOUIsR0FBRSxJQUFJVyxFQUFFa0IsS0FBSztBQUFNO0FBQUE7UUFBRyxNQUFLLENBQUM3QixHQUFFVyxHQUFFd0I7VUFBSztVQUFhLElBQUliLElBQUVhLEVBQUUsTUFBTXlqQixRQUFPbmpCLElBQUVuQixFQUFFNGdDLGNBQVksU0FBU2xpQztZQUFHLFNBQVFBLElBQUUsS0FBR0EsTUFBSUEsRUFBRWlPO2FBQWUsS0FBSTthQUFNLEtBQUk7YUFBTyxLQUFJO2FBQVEsS0FBSTthQUFRLEtBQUk7YUFBUyxLQUFJO2FBQVMsS0FBSTthQUFPLEtBQUk7YUFBUSxLQUFJO2FBQVUsS0FBSTthQUFXLEtBQUk7Y0FBTSxRQUFNOzthQUFHO2NBQVEsUUFBTTs7QUFBRztVQUFFLFNBQVN2TCxFQUFFMUM7WUFBRyxJQUFJVztZQUFFLFFBQU9VLEtBQUtxMUQsV0FBUyxTQUFTMTJEO2NBQUcsSUFBSVcsSUFBRSxTQUFTWDtnQkFBRyxLQUFJQSxHQUFFLE9BQU07Z0JBQU8sS0FBSSxJQUFJVyxNQUFJLFFBQU9YO2lCQUFHLEtBQUk7aUJBQU8sS0FBSTtrQkFBUSxPQUFNOztpQkFBTyxLQUFJO2lCQUFPLEtBQUk7aUJBQVEsS0FBSTtpQkFBVSxLQUFJO2tCQUFXLE9BQU07O2lCQUFVLEtBQUk7aUJBQVMsS0FBSTtrQkFBUyxPQUFNOztpQkFBUyxLQUFJO2lCQUFTLEtBQUk7aUJBQVEsS0FBSTtrQkFBTSxPQUFPQTs7aUJBQUU7a0JBQVEsSUFBR1csR0FBRTtrQkFBT1gsS0FBRyxLQUFHQSxHQUFHaU8sZUFBY3ROLEtBQUU7O0FBQUcsZUFBbFMsQ0FBb1NYO2NBQUcsSUFBRyxtQkFBaUJXLE1BQUlXLEVBQUU0Z0MsZUFBYXovQixNQUFJQSxFQUFFekMsS0FBSSxNQUFNLElBQUk4SixNQUFNLHVCQUFxQjlKO2NBQUcsT0FBT1csS0FBR1g7QUFBQyxhQUE3WixDQUErWkEsSUFBR3FCLEtBQUtxMUQ7YUFBVSxLQUFJO2NBQVVyMUQsS0FBS29vRCxPQUFLM21ELEdBQUV6QixLQUFLOC9CLE1BQUkxZ0MsR0FBRUUsSUFBRTtjQUFFOzthQUFNLEtBQUk7Y0FBT1UsS0FBS2doRSxXQUFTeC9ELEdBQUVsQyxJQUFFO2NBQUU7O2FBQU0sS0FBSTtjQUFTVSxLQUFLb29ELE9BQUt2bUQsR0FBRTdCLEtBQUs4L0IsTUFBSS8rQixHQUFFekIsSUFBRTtjQUFFOzthQUFNO2NBQVEsT0FBT1UsS0FBSzBqQixRQUFNemhCLFNBQU9qQyxLQUFLOC9CLE1BQUl0OUI7O1lBQUd4QyxLQUFLaWhFLFdBQVMsR0FBRWpoRSxLQUFLa2hFLFlBQVUsR0FBRWxoRSxLQUFLbWhFLFdBQVNsaEUsRUFBRW8wQixZQUFZLzBCO0FBQUU7VUFBQyxTQUFTZ0MsRUFBRTNDO1lBQUcsT0FBT0EsS0FBRyxNQUFJLElBQUVBLEtBQUcsS0FBRyxJQUFFLElBQUVBLEtBQUcsS0FBRyxLQUFHLElBQUVBLEtBQUcsS0FBRyxLQUFHLElBQUVBLEtBQUcsS0FBRyxLQUFHLEtBQUc7QUFBQztVQUFDLFNBQVM2QyxFQUFFN0M7WUFBRyxJQUFJVyxJQUFFVSxLQUFLa2hFLFlBQVVsaEUsS0FBS2loRSxVQUFTbmdFLElBQUUsU0FBU25DLEdBQUVXLEdBQUV3QjtjQUFHLElBQUcsUUFBTSxNQUFJeEIsRUFBRSxLQUFJLE9BQU9YLEVBQUVzaUUsV0FBUyxHQUFFO2NBQUksSUFBR3RpRSxFQUFFc2lFLFdBQVMsS0FBRzNoRSxFQUFFaUIsU0FBTyxHQUFFO2dCQUFDLElBQUcsUUFBTSxNQUFJakIsRUFBRSxLQUFJLE9BQU9YLEVBQUVzaUUsV0FBUyxHQUFFO2dCQUFJLElBQUd0aUUsRUFBRXNpRSxXQUFTLEtBQUczaEUsRUFBRWlCLFNBQU8sS0FBRyxRQUFNLE1BQUlqQixFQUFFLEtBQUksT0FBT1gsRUFBRXNpRSxXQUFTLEdBQUU7QUFBRztBQUFDLGFBQXhNLENBQTBNamhFLE1BQUtyQjtZQUFHLFlBQU8sTUFBU21DLElBQUVBLElBQUVkLEtBQUtpaEUsWUFBVXRpRSxFQUFFNEIsVUFBUTVCLEVBQUVxb0IsS0FBS2huQixLQUFLbWhFLFVBQVM3aEUsR0FBRSxHQUFFVSxLQUFLaWhFLFdBQVVqaEUsS0FBS21oRSxTQUFTenlELFNBQVMxTyxLQUFLcTFELFVBQVMsR0FBRXIxRCxLQUFLa2hFLGVBQWF2aUUsRUFBRXFvQixLQUFLaG5CLEtBQUttaEUsVUFBUzdoRSxHQUFFLEdBQUVYLEVBQUU0QjtrQkFBYVAsS0FBS2loRSxZQUFVdGlFLEVBQUU0QjtBQUFRO1VBQUMsU0FBU2tCLEVBQUU5QyxHQUFFVztZQUFHLEtBQUlYLEVBQUU0QixTQUFPakIsS0FBRyxLQUFHLEdBQUU7Y0FBQyxJQUFJd0IsSUFBRW5DLEVBQUUrUCxTQUFTLFdBQVVwUDtjQUFHLElBQUd3QixHQUFFO2dCQUFDLElBQUliLElBQUVhLEVBQUU2SyxXQUFXN0ssRUFBRVAsU0FBTztnQkFBRyxJQUFHTixLQUFHLFNBQU9BLEtBQUcsT0FBTSxPQUFPRCxLQUFLaWhFLFdBQVMsR0FBRWpoRSxLQUFLa2hFLFlBQVUsR0FBRWxoRSxLQUFLbWhFLFNBQVMsS0FBR3hpRSxFQUFFQSxFQUFFNEIsU0FBTyxJQUFHUCxLQUFLbWhFLFNBQVMsS0FBR3hpRSxFQUFFQSxFQUFFNEIsU0FBTztnQkFBR08sRUFBRWlGLE1BQU0sSUFBRztBQUFFO2NBQUMsT0FBT2pGO0FBQUM7WUFBQyxPQUFPZCxLQUFLaWhFLFdBQVMsR0FBRWpoRSxLQUFLa2hFLFlBQVUsR0FBRWxoRSxLQUFLbWhFLFNBQVMsS0FBR3hpRSxFQUFFQSxFQUFFNEIsU0FBTyxJQUFHNUIsRUFBRStQLFNBQVMsV0FBVXBQLEdBQUVYLEVBQUU0QixTQUFPO0FBQUU7VUFBQyxTQUFTbkIsRUFBRVQ7WUFBRyxJQUFJVyxJQUFFWCxLQUFHQSxFQUFFNEIsU0FBT1AsS0FBSzBqQixNQUFNL2tCLEtBQUc7WUFBRyxJQUFHcUIsS0FBS2loRSxVQUFTO2NBQUMsSUFBSW5nRSxJQUFFZCxLQUFLa2hFLFlBQVVsaEUsS0FBS2loRTtjQUFTLE9BQU8zaEUsSUFBRVUsS0FBS21oRSxTQUFTenlELFNBQVMsV0FBVSxHQUFFNU47QUFBRTtZQUFDLE9BQU94QjtBQUFDO1VBQUMsU0FBU3VDLEVBQUVsRCxHQUFFVztZQUFHLElBQUl3QixLQUFHbkMsRUFBRTRCLFNBQU9qQixLQUFHO1lBQUUsT0FBTyxNQUFJd0IsSUFBRW5DLEVBQUUrUCxTQUFTLFVBQVNwUCxNQUFJVSxLQUFLaWhFLFdBQVMsSUFBRW5nRSxHQUFFZCxLQUFLa2hFLFlBQVUsR0FBRSxNQUFJcGdFLElBQUVkLEtBQUttaEUsU0FBUyxLQUFHeGlFLEVBQUVBLEVBQUU0QixTQUFPLE1BQUlQLEtBQUttaEUsU0FBUyxLQUFHeGlFLEVBQUVBLEVBQUU0QixTQUFPO1lBQUdQLEtBQUttaEUsU0FBUyxLQUFHeGlFLEVBQUVBLEVBQUU0QixTQUFPLEtBQUk1QixFQUFFK1AsU0FBUyxVQUFTcFAsR0FBRVgsRUFBRTRCLFNBQU9PO0FBQUc7VUFBQyxTQUFTQyxFQUFFcEM7WUFBRyxJQUFJVyxJQUFFWCxLQUFHQSxFQUFFNEIsU0FBT1AsS0FBSzBqQixNQUFNL2tCLEtBQUc7WUFBRyxPQUFPcUIsS0FBS2loRSxXQUFTM2hFLElBQUVVLEtBQUttaEUsU0FBU3p5RCxTQUFTLFVBQVMsR0FBRSxJQUFFMU8sS0FBS2loRSxZQUFVM2hFO0FBQUM7VUFBQyxTQUFTMkMsRUFBRXREO1lBQUcsT0FBT0EsRUFBRStQLFNBQVMxTyxLQUFLcTFEO0FBQVM7VUFBQyxTQUFTN3lELEVBQUU3RDtZQUFHLE9BQU9BLEtBQUdBLEVBQUU0QixTQUFPUCxLQUFLMGpCLE1BQU0va0IsS0FBRztBQUFFO1VBQUNXLEVBQUVnQyxJQUFFRCxHQUFFQSxFQUFFb08sVUFBVWlVLFFBQU0sU0FBUy9rQjtZQUFHLElBQUcsTUFBSUEsRUFBRTRCLFFBQU8sT0FBTTtZQUFHLElBQUlqQixHQUFFd0I7WUFBRSxJQUFHZCxLQUFLaWhFLFVBQVM7Y0FBQyxTQUFHLE9BQVUzaEUsSUFBRVUsS0FBS2doRSxTQUFTcmlFLEtBQUksT0FBTTtjQUFHbUMsSUFBRWQsS0FBS2loRSxVQUFTamhFLEtBQUtpaEUsV0FBUztBQUFDLG1CQUFNbmdFLElBQUU7WUFBRSxPQUFPQSxJQUFFbkMsRUFBRTRCLFNBQU9qQixJQUFFQSxJQUFFVSxLQUFLb29ELEtBQUt6cEQsR0FBRW1DLEtBQUdkLEtBQUtvb0QsS0FBS3pwRCxHQUFFbUMsS0FBR3hCLEtBQUc7QUFBRSxhQUFFK0IsRUFBRW9PLFVBQVVxd0IsTUFBSSxTQUFTbmhDO1lBQUcsSUFBSVcsSUFBRVgsS0FBR0EsRUFBRTRCLFNBQU9QLEtBQUswakIsTUFBTS9rQixLQUFHO1lBQUcsT0FBT3FCLEtBQUtpaEUsV0FBUzNoRSxJQUFFLE1BQUlBO0FBQUMsYUFBRStCLEVBQUVvTyxVQUFVMjRDLE9BQUssU0FBU3pwRCxHQUFFVztZQUFHLElBQUl3QixJQUFFLFNBQVNuQyxHQUFFVyxHQUFFd0I7Y0FBRyxJQUFJYixJQUFFWCxFQUFFaUIsU0FBTztjQUFFLElBQUdOLElBQUVhLEdBQUUsT0FBTztjQUFFLElBQUlNLElBQUVFLEVBQUVoQyxFQUFFVztjQUFJLE9BQU9tQixLQUFHLEtBQUdBLElBQUUsTUFBSXpDLEVBQUVzaUUsV0FBUzcvRCxJQUFFLElBQUdBLE9BQUtuQixJQUFFYSxNQUFJLE1BQUlNLElBQUUsS0FBR0EsSUFBRUUsRUFBRWhDLEVBQUVXLFFBQU0sS0FBR21CLElBQUUsTUFBSXpDLEVBQUVzaUUsV0FBUzcvRCxJQUFFO2NBQUdBLE9BQUtuQixJQUFFYSxNQUFJLE1BQUlNLElBQUUsS0FBR0EsSUFBRUUsRUFBRWhDLEVBQUVXLFFBQU0sS0FBR21CLElBQUUsTUFBSSxNQUFJQSxJQUFFQSxJQUFFLElBQUV6QyxFQUFFc2lFLFdBQVM3L0QsSUFBRSxJQUFHQSxLQUFHO0FBQUMsYUFBbE8sQ0FBb09wQixNQUFLckIsR0FBRVc7WUFBRyxLQUFJVSxLQUFLaWhFLFVBQVMsT0FBT3RpRSxFQUFFK1AsU0FBUyxRQUFPcFA7WUFBR1UsS0FBS2toRSxZQUFVcGdFO1lBQUUsSUFBSWIsSUFBRXRCLEVBQUU0QixVQUFRTyxJQUFFZCxLQUFLaWhFO1lBQVUsT0FBT3RpRSxFQUFFcW9CLEtBQUtobkIsS0FBS21oRSxVQUFTLEdBQUVsaEUsSUFBR3RCLEVBQUUrUCxTQUFTLFFBQU9wUCxHQUFFVztBQUFFLGFBQUVvQixFQUFFb08sVUFBVXV4RCxXQUFTLFNBQVNyaUU7WUFBRyxJQUFHcUIsS0FBS2loRSxZQUFVdGlFLEVBQUU0QixRQUFPLE9BQU81QixFQUFFcW9CLEtBQUtobkIsS0FBS21oRSxVQUFTbmhFLEtBQUtraEUsWUFBVWxoRSxLQUFLaWhFLFVBQVMsR0FBRWpoRSxLQUFLaWhFLFdBQVVqaEUsS0FBS21oRSxTQUFTenlELFNBQVMxTyxLQUFLcTFELFVBQVMsR0FBRXIxRCxLQUFLa2hFO1lBQVd2aUUsRUFBRXFvQixLQUFLaG5CLEtBQUttaEUsVUFBU25oRSxLQUFLa2hFLFlBQVVsaEUsS0FBS2loRSxVQUFTLEdBQUV0aUUsRUFBRTRCLFNBQVFQLEtBQUtpaEUsWUFBVXRpRSxFQUFFNEI7QUFBTTtBQUFBO1FBQUcsTUFBSyxDQUFDNUIsR0FBRVcsR0FBRXdCO1VBQUssSUFBSWIsSUFBRWEsRUFBRTtVQUFNbkMsRUFBRWlDLFVBQVEsU0FBU2pDO1lBQUcsT0FBTSxtQkFBaUJBLElBQUVBLElBQUVzQixFQUFFdEIsS0FBR0EsRUFBRW9ILE1BQU0sS0FBR3BIO0FBQUM7QUFBQTtRQUFHLE1BQUtBO1VBQUksSUFBSVcsSUFBRSxDQUFDLEVBQUVvUDtVQUFTL1AsRUFBRWlDLFVBQVFzSCxNQUFNQyxXQUFTLFNBQVN4SjtZQUFHLE9BQU0sb0JBQWtCVyxFQUFFZSxLQUFLMUI7QUFBRTtBQUFBO1FBQUcsTUFBSyxDQUFDQSxHQUFFVyxHQUFFd0I7VUFBSztVQUFhLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRWMsT0FBTzhQLFFBQU0sU0FBU3JUO1lBQUcsSUFBSVcsSUFBRTtZQUFHLEtBQUksSUFBSXdCLEtBQUtuQyxHQUFFVyxFQUFFa0IsS0FBS007WUFBRyxPQUFPeEI7QUFBQztVQUFFWCxFQUFFaUMsVUFBUUc7VUFBRSxJQUFJTSxJQUFFYSxPQUFPOFYsT0FBT2xYLEVBQUU7VUFBT08sRUFBRTBpRCxXQUFTampELEVBQUU7VUFBTSxJQUFJUSxJQUFFUixFQUFFLE9BQU1VLElBQUVWLEVBQUU7VUFBS08sRUFBRTBpRCxTQUFTaGpELEdBQUVPO1VBQUcsS0FBSSxJQUFJRyxJQUFFTCxFQUFFSSxFQUFFaU8sWUFBV3JRLElBQUUsR0FBRUEsSUFBRXFDLEVBQUVsQixRQUFPbkIsS0FBSTtZQUFDLElBQUl5QyxJQUFFSixFQUFFckM7WUFBRzJCLEVBQUUwTyxVQUFVNU4sT0FBS2QsRUFBRTBPLFVBQVU1TixLQUFHTCxFQUFFaU8sVUFBVTVOO0FBQUc7VUFBQyxTQUFTZCxFQUFFcEM7WUFBRyxNQUFLcUIsZ0JBQWdCZSxJQUFHLE9BQU8sSUFBSUEsRUFBRXBDO1lBQUcyQyxFQUFFakIsS0FBS0wsTUFBS3JCLElBQUc2QyxFQUFFbkIsS0FBS0wsTUFBS3JCLElBQUdBLE1BQUcsTUFBS0EsRUFBRXd4QyxhQUFXbndDLEtBQUttd0MsWUFBUyxJQUFJeHhDLE1BQUcsTUFBS0EsRUFBRWdULGFBQVczUixLQUFLMlIsWUFBUztZQUFJM1IsS0FBS3l6RCxpQkFBYyxHQUFHOTBELE1BQUcsTUFBS0EsRUFBRTgwRCxrQkFBZ0J6ekQsS0FBS3l6RCxpQkFBYyxJQUFJenpELEtBQUsyK0MsS0FBSyxPQUFNMThDO0FBQUU7VUFBQyxTQUFTQTtZQUFJakMsS0FBS3l6RCxpQkFBZXp6RCxLQUFLaXdDLGVBQWVJLFNBQU9wd0MsRUFBRW13QyxTQUFTNXRDLEdBQUV4QztBQUFLO1VBQUMsU0FBU3dDLEVBQUU3RDtZQUFHQSxFQUFFbWhDO0FBQUs7VUFBQzU5QixPQUFPd0csZUFBZTNILEVBQUUwTyxXQUFVLHlCQUF3QjtZQUFDOUcsYUFBVztZQUFHQyxLQUFJO2NBQVcsT0FBTzVJLEtBQUtpd0MsZUFBZXlqQjtBQUFhO2NBQUl4eEQsT0FBT3dHLGVBQWUzSCxFQUFFME8sV0FBVSxhQUFZO1lBQUM3RyxLQUFJO2NBQVcsWUFBTyxNQUFTNUksS0FBS2t3Qyx1QkFBZ0IsTUFBU2x3QyxLQUFLaXdDLGtCQUFnQmp3QyxLQUFLa3dDLGVBQWVJLGFBQVd0d0MsS0FBS2l3QyxlQUFlSztBQUFTO1lBQUV4Z0MsS0FBSSxTQUFTblI7bUJBQUcsTUFBU3FCLEtBQUtrd0MsdUJBQWdCLE1BQVNsd0MsS0FBS2l3QyxtQkFBaUJqd0MsS0FBS2t3QyxlQUFlSSxZQUFVM3hDLEdBQUVxQixLQUFLaXdDLGVBQWVLLFlBQVUzeEM7QUFBRTtjQUFJb0MsRUFBRTBPLFVBQVVvVSxXQUFTLFNBQVNsbEIsR0FBRVc7WUFBR1UsS0FBS1EsS0FBSyxPQUFNUixLQUFLOC9CLE9BQU03L0IsRUFBRW13QyxTQUFTOXdDLEdBQUVYO0FBQUU7QUFBQTtRQUFHLE1BQUssQ0FBQ0EsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYW5DLEVBQUVpQyxVQUFRUztVQUFFLElBQUlwQixJQUFFYSxFQUFFLEtBQUlNLElBQUVjLE9BQU84VixPQUFPbFgsRUFBRTtVQUFPLFNBQVNPLEVBQUUxQztZQUFHLE1BQUtxQixnQkFBZ0JxQixJQUFHLE9BQU8sSUFBSUEsRUFBRTFDO1lBQUdzQixFQUFFSSxLQUFLTCxNQUFLckI7QUFBRTtVQUFDeUMsRUFBRTJpRCxXQUFTampELEVBQUUsT0FBTU0sRUFBRTJpRCxTQUFTMWlELEdBQUVwQixJQUFHb0IsRUFBRW9PLFVBQVU2MUIsYUFBVyxTQUFTM21DLEdBQUVXLEdBQUV3QjtZQUFHQSxFQUFFLE1BQUtuQztBQUFFO0FBQUE7UUFBRyxNQUFLLENBQUNBLEdBQUVXLEdBQUV3QjtVQUFLO1VBQWEsSUFBSWIsSUFBRWEsRUFBRSxPQUFNTSxJQUFFTixFQUFFO1VBQU1uQyxFQUFFaUMsVUFBUVY7VUFBRSxJQUFJbUIsR0FBRUMsSUFBRVIsRUFBRTtVQUFNWixFQUFFMHpELGdCQUFjOXVELEdBQUVoRSxFQUFFLE1BQU1zakI7VUFBYSxJQUFJNWlCLElBQUUsU0FBUzdDLEdBQUVXO1lBQUcsT0FBT1gsRUFBRW1nRCxVQUFVeC9DLEdBQUdpQjtBQUFNLGFBQUVrQixJQUFFWCxFQUFFLE9BQU0xQixJQUFFMEIsRUFBRSxNQUFNeWpCLFFBQU8xaUIsSUFBRWYsRUFBRXZCLEVBQUUrRixjQUFZLFlBQVcsR0FBRXZFLElBQUVtQixPQUFPOFYsT0FBT2xYLEVBQUU7VUFBT0MsRUFBRWdqRCxXQUFTampELEVBQUU7VUFBTSxJQUFJbUIsSUFBRW5CLEVBQUUsT0FBTTBCLFNBQUU7VUFBT0EsSUFBRVAsS0FBR0EsRUFBRTR4RCxXQUFTNXhELEVBQUU0eEQsU0FBUyxZQUFVLFlBQVc7VUFBRSxJQUFJMXlELEdBQUVpRCxJQUFFdEQsRUFBRSxPQUFNekIsSUFBRXlCLEVBQUU7VUFBTUMsRUFBRWdqRCxTQUFTN2pELEdBQUV1QjtVQUFHLElBQUlsQyxJQUFFLEVBQUMsU0FBUSxTQUFRLFdBQVUsU0FBUTtVQUFVLFNBQVN1RixFQUFFbkcsR0FBRVc7WUFBR1gsSUFBRUEsS0FBRyxDQUFDO1lBQUUsSUFBSXNCLElBQUVYLGNBQWErQixJQUFFQSxLQUFHUCxFQUFFO1lBQU9kLEtBQUtxakIsZUFBYTFrQixFQUFFMGtCLFlBQVdwakIsTUFBSUQsS0FBS3FqQixhQUFXcmpCLEtBQUtxakIsZ0JBQWMxa0IsRUFBRXcxRDtZQUFvQixJQUFJL3lELElBQUV6QyxFQUFFKzBELGVBQWNweUQsSUFBRTNDLEVBQUV5aUUsdUJBQXNCNS9ELElBQUV4QixLQUFLcWpCLGFBQVcsS0FBRztZQUFNcmpCLEtBQUswekQsZ0JBQWN0eUQsS0FBRyxNQUFJQSxJQUFFQSxJQUFFbkIsTUFBSXFCLEtBQUcsTUFBSUEsS0FBR0EsSUFBRUUsR0FBRXhCLEtBQUswekQsZ0JBQWM1c0QsS0FBS2lHLE1BQU0vTSxLQUFLMHpEO1lBQWUxekQsS0FBS3V5QixTQUFPLElBQUludUIsR0FBRXBFLEtBQUtPLFNBQU8sR0FBRVAsS0FBS28wRCxRQUFNLE1BQUtwMEQsS0FBS3EwRCxhQUFXLEdBQUVyMEQsS0FBS3MwRCxVQUFRLE1BQUt0MEQsS0FBS3F3QyxTQUFNLEdBQUdyd0MsS0FBS3UwRCxjQUFXO1lBQUd2MEQsS0FBS3cwRCxXQUFRLEdBQUd4MEQsS0FBS3kwRCxRQUFLLEdBQUd6MEQsS0FBSzAwRCxnQkFBYSxHQUFHMTBELEtBQUsyMEQsbUJBQWdCLEdBQUczMEQsS0FBSzQwRCxxQkFBa0IsR0FBRzUwRCxLQUFLNjBELG1CQUFnQjtZQUFHNzBELEtBQUtzd0MsYUFBVSxHQUFHdHdDLEtBQUtpMUQsa0JBQWdCdDJELEVBQUVzMkQsbUJBQWlCLFFBQU9qMUQsS0FBS2sxRCxhQUFXLEdBQUVsMUQsS0FBS20xRCxlQUFZLEdBQUduMUQsS0FBS28xRCxVQUFRO1lBQUtwMUQsS0FBS3ExRCxXQUFTLE1BQUsxMkQsRUFBRTAyRCxhQUFXbDBELE1BQUlBLElBQUVMLEVBQUUsTUFBTVEsSUFBR3RCLEtBQUtvMUQsVUFBUSxJQUFJajBELEVBQUV4QyxFQUFFMDJELFdBQVVyMUQsS0FBS3ExRCxXQUFTMTJELEVBQUUwMkQ7QUFBUztVQUFDLFNBQVNuMUQsRUFBRXZCO1lBQUcsSUFBRzBDLElBQUVBLEtBQUdQLEVBQUUsU0FBUWQsZ0JBQWdCRSxJQUFHLE9BQU8sSUFBSUEsRUFBRXZCO1lBQUdxQixLQUFLa3dDLGlCQUFlLElBQUlwckMsRUFBRW5HLEdBQUVxQixPQUFNQSxLQUFLbXdDLFlBQVMsR0FBR3h4QyxNQUFJLHFCQUFtQkEsRUFBRTBrQyxTQUFPcmpDLEtBQUs0akIsUUFBTWpsQixFQUFFMGtDLE9BQU0scUJBQW1CMWtDLEVBQUU0MEQsWUFBVXZ6RCxLQUFLNmpCLFdBQVNsbEIsRUFBRTQwRDtZQUFVOXhELEVBQUVwQixLQUFLTDtBQUFLO1VBQUMsU0FBU2tGLEVBQUV2RyxHQUFFVyxHQUFFd0IsR0FBRWIsR0FBRW1CO1lBQUcsSUFBSUMsR0FBRUMsSUFBRTNDLEVBQUV1eEM7WUFBZSxPQUFPLFNBQU81d0MsS0FBR2dDLEVBQUVrekQsV0FBUSxHQUFHLFNBQVM3MUQsR0FBRVc7Y0FBRyxLQUFJQSxFQUFFK3dDLE9BQU07Z0JBQUMsSUFBRy93QyxFQUFFODFELFNBQVE7a0JBQUMsSUFBSXQwRCxJQUFFeEIsRUFBRTgxRCxRQUFRdDFCO2tCQUFNaC9CLEtBQUdBLEVBQUVQLFdBQVNqQixFQUFFaXpCLE9BQU8veEIsS0FBS00sSUFBR3hCLEVBQUVpQixVQUFRakIsRUFBRStqQixhQUFXLElBQUV2aUIsRUFBRVA7QUFBTztnQkFBQ2pCLEVBQUUrd0MsU0FBTSxHQUFHdm9DLEVBQUVuSjtBQUFFO0FBQUMsYUFBakosQ0FBbUpBLEdBQUUyQyxPQUFLRixNQUFJQyxJQUFFLFNBQVMxQyxHQUFFVztjQUFHLElBQUl3QixHQUFFYjtjQUFFLE9BQU9BLElBQUVYLEdBQUVGLEVBQUV5bEIsU0FBUzVrQixNQUFJQSxhQUFhNEIsS0FBRyxtQkFBaUJ2QyxVQUFHLE1BQVNBLEtBQUdYLEVBQUUwa0IsZUFBYXZpQixJQUFFLElBQUlWLFVBQVU7Y0FBb0NVO0FBQUMsYUFBcEssQ0FBc0tRLEdBQUVoQyxLQUFJK0IsSUFBRTFDLEVBQUVta0IsS0FBSyxTQUFRemhCLEtBQUdDLEVBQUUraEIsY0FBWS9qQixLQUFHQSxFQUFFaUIsU0FBTyxLQUFHLG1CQUFpQmpCLEtBQUdnQyxFQUFFK2hCLGNBQVluaEIsT0FBT3l0QixlQUFlcndCLE9BQUtGLEVBQUVxUSxjQUFZblEsSUFBRSxTQUFTWDtjQUFHLE9BQU9TLEVBQUU4RyxLQUFLdkg7QUFBRSxhQUE1QixDQUE4QlcsS0FBSVcsSUFBRXFCLEVBQUVpekQsYUFBVzUxRCxFQUFFbWtCLEtBQUssU0FBUSxJQUFJcmEsTUFBTSx1Q0FBcUNqSixFQUFFYixHQUFFMkMsR0FBRWhDLElBQUUsS0FBSWdDLEVBQUUrdUMsUUFBTTF4QyxFQUFFbWtCLEtBQUssU0FBUSxJQUFJcmEsTUFBTSwrQkFBNkJuSCxFQUFFa3pELFdBQVE7WUFBR2x6RCxFQUFFOHpELFlBQVV0MEQsS0FBR3hCLElBQUVnQyxFQUFFOHpELFFBQVExeEMsTUFBTXBrQixJQUFHZ0MsRUFBRStoQixjQUFZLE1BQUkvakIsRUFBRWlCLFNBQU9mLEVBQUViLEdBQUUyQyxHQUFFaEMsSUFBRSxLQUFJMkksRUFBRXRKLEdBQUUyQyxNQUFJOUIsRUFBRWIsR0FBRTJDLEdBQUVoQyxJQUFFLE9BQU1XLE1BQUlxQixFQUFFa3pELFdBQVE7WUFBSyxTQUFTNzFEO2NBQUcsUUFBT0EsRUFBRTB4QyxVQUFRMXhDLEVBQUUrMUQsZ0JBQWMvMUQsRUFBRTRCLFNBQU81QixFQUFFKzBELGlCQUFlLE1BQUkvMEQsRUFBRTRCO0FBQU8sYUFBcEYsQ0FBc0ZlO0FBQUU7VUFBQyxTQUFTOUIsRUFBRWIsR0FBRVcsR0FBRXdCLEdBQUViO1lBQUdYLEVBQUVnMUQsV0FBUyxNQUFJaDFELEVBQUVpQixXQUFTakIsRUFBRW0xRCxRQUFNOTFELEVBQUVta0IsS0FBSyxRQUFPaGlCLElBQUduQyxFQUFFMGtDLEtBQUssT0FBSy9qQyxFQUFFaUIsVUFBUWpCLEVBQUUrakIsYUFBVyxJQUFFdmlCLEVBQUVQLFFBQU9OLElBQUVYLEVBQUVpekIsT0FBTzVpQixRQUFRN08sS0FBR3hCLEVBQUVpekIsT0FBTy94QixLQUFLTTtZQUFHeEIsRUFBRW8xRCxnQkFBYzVzRCxFQUFFbkosS0FBSXNKLEVBQUV0SixHQUFFVztBQUFFO1VBQUM0QyxPQUFPd0csZUFBZXhJLEVBQUV1UCxXQUFVLGFBQVk7WUFBQzdHLEtBQUk7Y0FBVyxZQUFPLE1BQVM1SSxLQUFLa3dDLGtCQUFnQmx3QyxLQUFLa3dDLGVBQWVJO0FBQVM7WUFBRXhnQyxLQUFJLFNBQVNuUjtjQUFHcUIsS0FBS2t3QyxtQkFBaUJsd0MsS0FBS2t3QyxlQUFlSSxZQUFVM3hDO0FBQUU7Y0FBSXVCLEVBQUV1UCxVQUFVOGpELFVBQVFsMEQsRUFBRWswRCxTQUFRcnpELEVBQUV1UCxVQUFVNmxELGFBQVdqMkQsRUFBRWsyRCxXQUFVcjFELEVBQUV1UCxVQUFVb1UsV0FBUyxTQUFTbGxCLEdBQUVXO1lBQUdVLEtBQUtRLEtBQUssT0FBTWxCLEVBQUVYO0FBQUUsYUFBRXVCLEVBQUV1UCxVQUFValAsT0FBSyxTQUFTN0IsR0FBRVc7WUFBRyxJQUFJd0IsR0FBRWIsSUFBRUQsS0FBS2t3QztZQUFlLE9BQU9qd0MsRUFBRW9qQixhQUFXdmlCLEtBQUUsSUFBRyxtQkFBaUJuQyxPQUFLVyxJQUFFQSxLQUFHVyxFQUFFZzFELHFCQUFtQmgxRCxFQUFFbzFELGFBQVcxMkQsSUFBRVMsRUFBRThHLEtBQUt2SCxHQUFFVztZQUFHQSxJQUFFLEtBQUl3QixLQUFFLElBQUlvRSxFQUFFbEYsTUFBS3JCLEdBQUVXLElBQUUsR0FBR3dCO0FBQUUsYUFBRVosRUFBRXVQLFVBQVVFLFVBQVEsU0FBU2hSO1lBQUcsT0FBT3VHLEVBQUVsRixNQUFLckIsR0FBRSxPQUFLLElBQUc7QUFBRyxhQUFFdUIsRUFBRXVQLFVBQVUrbEQsV0FBUztZQUFXLFFBQU0sTUFBS3gxRCxLQUFLa3dDLGVBQWVva0I7QUFBTyxhQUFFcDBELEVBQUV1UCxVQUFVZ21ELGNBQVksU0FBUzkyRDtZQUFHLE9BQU93QyxNQUFJQSxJQUFFTCxFQUFFLE1BQU1RLElBQUd0QixLQUFLa3dDLGVBQWVrbEIsVUFBUSxJQUFJajBELEVBQUV4QyxJQUFHcUIsS0FBS2t3QyxlQUFlbWxCLFdBQVMxMkQsR0FBRXFCO0FBQUk7VUFBRSxJQUFJb0gsSUFBRTtVQUFRLFNBQVNDLEVBQUUxSSxHQUFFVztZQUFHLE9BQU9YLEtBQUcsS0FBRyxNQUFJVyxFQUFFaUIsVUFBUWpCLEVBQUUrd0MsUUFBTSxJQUFFL3dDLEVBQUUrakIsYUFBVyxJQUFFMWtCLEtBQUdBLElBQUVXLEVBQUVnMUQsV0FBU2gxRCxFQUFFaUIsU0FBT2pCLEVBQUVpekIsT0FBT21qQyxLQUFLbndELEtBQUtoRixTQUFPakIsRUFBRWlCLFVBQVE1QixJQUFFVyxFQUFFbzBELGtCQUFnQnAwRCxFQUFFbzBELGdCQUFjLFNBQVMvMEQ7Y0FBRyxPQUFPQSxLQUFHeUksSUFBRXpJLElBQUV5SSxLQUFHekksS0FBSUEsS0FBR0EsTUFBSSxHQUFFQSxLQUFHQSxNQUFJLEdBQUVBLEtBQUdBLE1BQUksR0FBRUEsS0FBR0EsTUFBSSxHQUFFQSxLQUFHQSxNQUFJLElBQUdBLE1BQUtBO0FBQUMsYUFBckYsQ0FBdUZBLEtBQUlBLEtBQUdXLEVBQUVpQixTQUFPNUIsSUFBRVcsRUFBRSt3QyxRQUFNL3dDLEVBQUVpQixVQUFRakIsRUFBRW8xRCxnQkFBYSxHQUFHO0FBQUc7VUFBQyxTQUFTNXNELEVBQUVuSjtZQUFHLElBQUlXLElBQUVYLEVBQUV1eEM7WUFBZTV3QyxFQUFFbzFELGdCQUFhLEdBQUdwMUQsRUFBRXExRCxvQkFBa0JueUQsRUFBRSxnQkFBZWxELEVBQUVnMUQsVUFBU2gxRCxFQUFFcTFELG1CQUFnQixHQUFHcjFELEVBQUVtMUQsT0FBS3J6RCxFQUFFZ3ZDLFNBQVNwb0MsR0FBRXJKLEtBQUdxSixFQUFFcko7QUFBRztVQUFDLFNBQVNxSixFQUFFcko7WUFBRzZELEVBQUUsa0JBQWlCN0QsRUFBRW1rQixLQUFLLGFBQVk1WixFQUFFdks7QUFBRTtVQUFDLFNBQVNzSixFQUFFdEosR0FBRVc7WUFBR0EsRUFBRTYxRCxnQkFBYzcxRCxFQUFFNjFELGVBQVksR0FBRy96RCxFQUFFZ3ZDLFNBQVNseUMsR0FBRVMsR0FBRVc7QUFBRztVQUFDLFNBQVNwQixFQUFFUyxHQUFFVztZQUFHLEtBQUksSUFBSXdCLElBQUV4QixFQUFFaUIsU0FBUWpCLEVBQUVrMUQsWUFBVWwxRCxFQUFFZzFELFlBQVVoMUQsRUFBRSt3QyxTQUFPL3dDLEVBQUVpQixTQUFPakIsRUFBRW8wRCxrQkFBZ0JseEQsRUFBRTtZQUF3QjdELEVBQUUwa0MsS0FBSyxJQUFHdmlDLE1BQUl4QixFQUFFaUIsV0FBU08sSUFBRXhCLEVBQUVpQjtZQUFPakIsRUFBRTYxRCxlQUFZO0FBQUU7VUFBQyxTQUFTdHNELEVBQUVsSztZQUFHNkQsRUFBRSw2QkFBNEI3RCxFQUFFMGtDLEtBQUs7QUFBRTtVQUFDLFNBQVNyNkIsRUFBRXJLLEdBQUVXO1lBQUdBLEVBQUVrMUQsWUFBVWh5RCxFQUFFLGtCQUFpQjdELEVBQUUwa0MsS0FBSyxLQUFJL2pDLEVBQUV1MUQsbUJBQWdCLEdBQUd2MUQsRUFBRTQxRCxhQUFXLEdBQUV2MkQsRUFBRW1rQixLQUFLLFdBQVU1WixFQUFFdkssSUFBR1csRUFBRWcxRCxZQUFVaDFELEVBQUVrMUQsV0FBUzcxRCxFQUFFMGtDLEtBQUs7QUFBRTtVQUFDLFNBQVNuNkIsRUFBRXZLO1lBQUcsSUFBSVcsSUFBRVgsRUFBRXV4QztZQUFlLEtBQUkxdEMsRUFBRSxRQUFPbEQsRUFBRWcxRCxVQUFTaDFELEVBQUVnMUQsV0FBUyxTQUFPMzFELEVBQUUwa0M7QUFBUztVQUFDLFNBQVNsNkIsRUFBRXhLLEdBQUVXO1lBQUcsT0FBTyxNQUFJQSxFQUFFaUIsU0FBTyxRQUFNakIsRUFBRStqQixhQUFXdmlCLElBQUV4QixFQUFFaXpCLE9BQU90RCxXQUFTdHdCLEtBQUdBLEtBQUdXLEVBQUVpQixVQUFRTyxJQUFFeEIsRUFBRTgxRCxVQUFROTFELEVBQUVpekIsT0FBT3Z1QixLQUFLLE1BQUksTUFBSTFFLEVBQUVpekIsT0FBT2h5QixTQUFPakIsRUFBRWl6QixPQUFPbWpDLEtBQUtud0QsT0FBS2pHLEVBQUVpekIsT0FBT2pmLE9BQU9oVSxFQUFFaUI7WUFBUWpCLEVBQUVpekIsT0FBTzQ0QixXQUFTcnFELElBQUUsU0FBU25DLEdBQUVXLEdBQUV3QjtjQUFHLElBQUliO2NBQUUsT0FBT3RCLElBQUVXLEVBQUVvMkQsS0FBS253RCxLQUFLaEYsVUFBUU4sSUFBRVgsRUFBRW8yRCxLQUFLbndELEtBQUtRLE1BQU0sR0FBRXBILElBQUdXLEVBQUVvMkQsS0FBS253RCxPQUFLakcsRUFBRW8yRCxLQUFLbndELEtBQUtRLE1BQU1wSCxNQUFJc0IsSUFBRXRCLE1BQUlXLEVBQUVvMkQsS0FBS253RCxLQUFLaEYsU0FBT2pCLEVBQUUydkIsVUFBUW51QixJQUFFLFNBQVNuQyxHQUFFVztnQkFBRyxJQUFJd0IsSUFBRXhCLEVBQUVvMkQsTUFBS3oxRCxJQUFFLEdBQUVtQixJQUFFTixFQUFFeUU7Z0JBQUssS0FBSTVHLEtBQUd5QyxFQUFFYixRQUFPTyxJQUFFQSxFQUFFcEMsUUFBTTtrQkFBQyxJQUFJMkMsSUFBRVAsRUFBRXlFLE1BQUtqRSxJQUFFM0MsSUFBRTBDLEVBQUVkLFNBQU9jLEVBQUVkLFNBQU81QjtrQkFBRSxJQUFHMkMsTUFBSUQsRUFBRWQsU0FBT2EsS0FBR0MsSUFBRUQsS0FBR0MsRUFBRTBFLE1BQU0sR0FBRXBILElBQUcsTUFBSUEsS0FBRzJDLElBQUc7b0JBQUNBLE1BQUlELEVBQUVkLFlBQVVOLEdBQUVhLEVBQUVwQyxPQUFLWSxFQUFFbzJELE9BQUs1MEQsRUFBRXBDLE9BQUtZLEVBQUVvMkQsT0FBS3AyRCxFQUFFKzVELE9BQUssU0FBTy81RCxFQUFFbzJELE9BQUs1MEQsR0FBRUEsRUFBRXlFLE9BQUtsRSxFQUFFMEUsTUFBTXpFO29CQUFJO0FBQUs7b0JBQUdyQjtBQUFDO2dCQUFDLE9BQU9YLEVBQUVpQixVQUFRTixHQUFFbUI7QUFBQyxlQUE5USxDQUFnUnpDLEdBQUVXLEtBQUcsU0FBU1gsR0FBRVc7Z0JBQUcsSUFBSXdCLElBQUUxQixFQUFFaTFCLFlBQVkxMUIsSUFBR3NCLElBQUVYLEVBQUVvMkQsTUFBS3QwRCxJQUFFO2dCQUFFLEtBQUluQixFQUFFc0YsS0FBS3loQixLQUFLbG1CLElBQUduQyxLQUFHc0IsRUFBRXNGLEtBQUtoRixRQUFPTixJQUFFQSxFQUFFdkIsUUFBTTtrQkFBQyxJQUFJMkMsSUFBRXBCLEVBQUVzRixNQUFLakUsSUFBRTNDLElBQUUwQyxFQUFFZCxTQUFPYyxFQUFFZCxTQUFPNUI7a0JBQUUsSUFBRzBDLEVBQUUybEIsS0FBS2xtQixHQUFFQSxFQUFFUCxTQUFPNUIsR0FBRSxHQUFFMkMsSUFBRyxNQUFJM0MsS0FBRzJDLElBQUc7b0JBQUNBLE1BQUlELEVBQUVkLFlBQVVhLEdBQUVuQixFQUFFdkIsT0FBS1ksRUFBRW8yRCxPQUFLejFELEVBQUV2QixPQUFLWSxFQUFFbzJELE9BQUtwMkQsRUFBRSs1RCxPQUFLLFNBQU8vNUQsRUFBRW8yRCxPQUFLejFELEdBQUVBLEVBQUVzRixPQUFLbEUsRUFBRTBFLE1BQU16RTtvQkFBSTtBQUFLO29CQUFHRjtBQUFDO2dCQUFDLE9BQU85QixFQUFFaUIsVUFBUWEsR0FBRU47QUFBQyxlQUFuUyxDQUFxU25DLEdBQUVXLElBQUdXO0FBQUMsYUFBbnRCLENBQXF0QnRCLEdBQUVXLEVBQUVpekIsUUFBT2p6QixFQUFFODFELFVBQVN0MEQ7WUFBRyxJQUFJQTtBQUFDO1VBQUMsU0FBU3NJLEVBQUV6SztZQUFHLElBQUlXLElBQUVYLEVBQUV1eEM7WUFBZSxJQUFHNXdDLEVBQUVpQixTQUFPLEdBQUUsTUFBTSxJQUFJa0ksTUFBTTtZQUE4Q25KLEVBQUVpMUQsZUFBYWoxRCxFQUFFK3dDLFNBQU0sR0FBR2p2QyxFQUFFZ3ZDLFNBQVM5bUMsR0FBRWhLLEdBQUVYO0FBQUc7VUFBQyxTQUFTMkssRUFBRTNLLEdBQUVXO1lBQUdYLEVBQUU0MUQsY0FBWSxNQUFJNTFELEVBQUU0QixXQUFTNUIsRUFBRTQxRCxjQUFXLEdBQUdqMUQsRUFBRTZ3QyxZQUFTLEdBQUc3d0MsRUFBRXdqQixLQUFLO0FBQU87VUFBQyxTQUFTdlosRUFBRTVLLEdBQUVXO1lBQUcsS0FBSSxJQUFJd0IsSUFBRSxHQUFFYixJQUFFdEIsRUFBRTRCLFFBQU9PLElBQUViLEdBQUVhLEtBQUksSUFBR25DLEVBQUVtQyxPQUFLeEIsR0FBRSxPQUFPd0I7WUFBRSxRQUFPO0FBQUM7VUFBQ1osRUFBRXVQLFVBQVU0ekIsT0FBSyxTQUFTMWtDO1lBQUc2RCxFQUFFLFFBQU83RCxJQUFHQSxJQUFFdUUsU0FBU3ZFLEdBQUU7WUFBSSxJQUFJVyxJQUFFVSxLQUFLa3dDLGdCQUFlcHZDLElBQUVuQztZQUFFLElBQUcsTUFBSUEsTUFBSVcsRUFBRXExRCxtQkFBZ0IsSUFBSSxNQUFJaDJELEtBQUdXLEVBQUVvMUQsaUJBQWVwMUQsRUFBRWlCLFVBQVFqQixFQUFFbzBELGlCQUFlcDBELEVBQUUrd0MsUUFBTyxPQUFPN3RDLEVBQUUsc0JBQXFCbEQsRUFBRWlCLFFBQU9qQixFQUFFK3dDO1lBQU8sTUFBSS93QyxFQUFFaUIsVUFBUWpCLEVBQUUrd0MsUUFBTWpuQyxFQUFFcEosUUFBTThILEVBQUU5SCxPQUFNO1lBQUssSUFBRyxPQUFLckIsSUFBRTBJLEVBQUUxSSxHQUFFVyxPQUFLQSxFQUFFK3dDLE9BQU0sT0FBTyxNQUFJL3dDLEVBQUVpQixVQUFRNkksRUFBRXBKLE9BQU07WUFBSyxJQUFJQyxHQUFFbUIsSUFBRTlCLEVBQUVvMUQ7WUFBYSxPQUFPbHlELEVBQUUsaUJBQWdCcEIsS0FBSSxNQUFJOUIsRUFBRWlCLFVBQVFqQixFQUFFaUIsU0FBTzVCLElBQUVXLEVBQUVvMEQsa0JBQWdCbHhELEVBQUUsOEJBQTZCcEIsS0FBRTtZQUFJOUIsRUFBRSt3QyxTQUFPL3dDLEVBQUVrMUQsVUFBUWh5RCxFQUFFLG9CQUFtQnBCLEtBQUUsS0FBSUEsTUFBSW9CLEVBQUUsWUFBV2xELEVBQUVrMUQsV0FBUSxHQUFHbDFELEVBQUVtMUQsUUFBSyxHQUFHLE1BQUluMUQsRUFBRWlCLFdBQVNqQixFQUFFbzFELGdCQUFhO1lBQUkxMEQsS0FBSzRqQixNQUFNdGtCLEVBQUVvMEQsZ0JBQWVwMEQsRUFBRW0xRCxRQUFLLEdBQUduMUQsRUFBRWsxRCxZQUFVNzFELElBQUUwSSxFQUFFdkcsR0FBRXhCLE1BQUssVUFBUVcsSUFBRXRCLElBQUUsSUFBRXdLLEVBQUV4SyxHQUFFVyxLQUFHLFNBQU9BLEVBQUVvMUQsZ0JBQWE7WUFBRy8xRCxJQUFFLEtBQUdXLEVBQUVpQixVQUFRNUIsR0FBRSxNQUFJVyxFQUFFaUIsV0FBU2pCLEVBQUUrd0MsVUFBUS93QyxFQUFFbzFELGdCQUFhLElBQUk1ekQsTUFBSW5DLEtBQUdXLEVBQUUrd0MsU0FBT2puQyxFQUFFcEosUUFBTyxTQUFPQyxLQUFHRCxLQUFLOGlCLEtBQUssUUFBTzdpQjtZQUFHQTtBQUFDLGFBQUVDLEVBQUV1UCxVQUFVbVUsUUFBTSxTQUFTamxCO1lBQUdxQixLQUFLOGlCLEtBQUssU0FBUSxJQUFJcmEsTUFBTTtBQUE4QixhQUFFdkksRUFBRXVQLFVBQVVnVSxPQUFLLFNBQVM5a0IsR0FBRVc7WUFBRyxJQUFJd0IsSUFBRWQsTUFBS3FCLElBQUVyQixLQUFLa3dDO1lBQWUsUUFBTzd1QyxFQUFFZ3pEO2FBQVksS0FBSztjQUFFaHpELEVBQUUreUQsUUFBTXoxRDtjQUFFOzthQUFNLEtBQUs7Y0FBRTBDLEVBQUUreUQsUUFBTSxFQUFDL3lELEVBQUUreUQsT0FBTXoxRDtjQUFHOzthQUFNO2NBQVEwQyxFQUFFK3lELE1BQU01ekQsS0FBSzdCOztZQUFHMEMsRUFBRWd6RCxjQUFZLEdBQUU3eEQsRUFBRSx5QkFBd0JuQixFQUFFZ3pELFlBQVcvMEQ7WUFBRyxJQUFJbUMsSUFBRW5DLE1BQUcsTUFBS0EsRUFBRXdnQyxPQUFLbmhDLE1BQUlzQixFQUFFNjFELFVBQVFuM0QsTUFBSXNCLEVBQUV1d0IsU0FBTzFyQixJQUFFMUY7WUFBRSxTQUFTQTtjQUFJb0QsRUFBRSxVQUFTN0QsRUFBRW1oQztBQUFLO1lBQUN6K0IsRUFBRWt6RCxhQUFXbnpELEVBQUVndkMsU0FBUzN1QyxLQUFHWCxFQUFFNjlDLEtBQUssT0FBTWw5QyxJQUFHOUMsRUFBRXFrQixHQUFHLFdBQVMsU0FBVTFqQixFQUFFVyxHQUFFbUI7Y0FBR29CLEVBQUUsYUFBWXZDLE1BQUlhLEtBQUdNLE1BQUcsTUFBS0EsRUFBRTIwRCxlQUFhMzBELEVBQUUyMEQsY0FBVyxHQUFHdnpELEVBQUUsWUFBVzdELEVBQUV1a0IsZUFBZSxTQUFRN2pCLElBQUdWLEVBQUV1a0IsZUFBZSxVQUFTM2pCO2NBQUdaLEVBQUV1a0IsZUFBZSxTQUFRcmhCLElBQUdsRCxFQUFFdWtCLGVBQWUsU0FBUTllLElBQUd6RixFQUFFdWtCLGVBQWUsVUFBUzVqQixJQUFHd0IsRUFBRW9pQixlQUFlLE9BQU05akIsSUFBRzBCLEVBQUVvaUIsZUFBZSxPQUFNcGU7Y0FBR2hFLEVBQUVvaUIsZUFBZSxRQUFPL2hCLElBQUdKLEtBQUUsSUFBSU0sRUFBRTZ6RCxjQUFZdjJELEVBQUVzeEMsbUJBQWlCdHhDLEVBQUVzeEMsZUFBZStsQixhQUFXbjBEO0FBQUs7WUFBRyxJQUFJQSxJQUFFLFNBQVNsRDtjQUFHLE9BQU87Z0JBQVcsSUFBSVcsSUFBRVgsRUFBRXV4QztnQkFBZTF0QyxFQUFFLGVBQWNsRCxFQUFFNDFELGFBQVk1MUQsRUFBRTQxRCxjQUFZNTFELEVBQUU0MUQsY0FBYSxNQUFJNTFELEVBQUU0MUQsY0FBWTF6RCxFQUFFN0MsR0FBRSxZQUFVVyxFQUFFZzFELFdBQVEsR0FBR3ByRCxFQUFFdks7QUFBRztBQUFDLGFBQW5LLENBQXFLbUM7WUFBR25DLEVBQUVxa0IsR0FBRyxTQUFRbmhCO1lBQUcsSUFBSWQsS0FBRSxHQUFHa0IsS0FBRTtZQUFHLFNBQVNkLEVBQUU3QjtjQUFHa0QsRUFBRSxXQUFVUCxLQUFFLElBQUcsTUFBS3RELEVBQUUra0IsTUFBTXBrQixNQUFJMkMsT0FBSyxNQUFJWixFQUFFZ3pELGNBQVloekQsRUFBRSt5RCxVQUFRejFELEtBQUcwQyxFQUFFZ3pELGFBQVcsTUFBSSxNQUFJOXFELEVBQUVsSSxFQUFFK3lELE9BQU16MUQsUUFBTW9DLE1BQUl5QixFQUFFLCtCQUE4QjFCLEVBQUVvdkMsZUFBZWdsQjtjQUFZcDBELEVBQUVvdkMsZUFBZWdsQixjQUFhanpELEtBQUUsSUFBSW5CLEVBQUVtMUQ7QUFBUTtZQUFDLFNBQVM3eEQsRUFBRTlFO2NBQUdrRCxFQUFFLFdBQVVsRCxJQUFHd0YsS0FBSW5HLEVBQUV1a0IsZUFBZSxTQUFROWUsSUFBRyxNQUFJNUMsRUFBRTdDLEdBQUUsWUFBVUEsRUFBRW1rQixLQUFLLFNBQVF4akI7QUFBRTtZQUFDLFNBQVNEO2NBQUlWLEVBQUV1a0IsZUFBZSxVQUFTM2pCLElBQUd1RjtBQUFHO1lBQUMsU0FBU3ZGO2NBQUlpRCxFQUFFLGFBQVk3RCxFQUFFdWtCLGVBQWUsU0FBUTdqQixJQUFHeUY7QUFBRztZQUFDLFNBQVNBO2NBQUl0QyxFQUFFLFdBQVUxQixFQUFFbzFELE9BQU92M0Q7QUFBRTtZQUFDLE9BQU9tQyxFQUFFa2lCLEdBQUcsUUFBTzdoQixJQUFHLFNBQVN4QyxHQUFFVyxHQUFFd0I7Y0FBRyxJQUFHLHFCQUFtQm5DLEVBQUV3aEQsaUJBQWdCLE9BQU94aEQsRUFBRXdoRCxnQkFBZ0I3Z0QsR0FBRXdCO2NBQUduQyxFQUFFMGxCLFdBQVMxbEIsRUFBRTBsQixRQUFRL1ksUUFBTWhLLEVBQUUzQyxFQUFFMGxCLFFBQVEvWSxTQUFPM00sRUFBRTBsQixRQUFRL1ksTUFBTXFFLFFBQVE3TyxLQUFHbkMsRUFBRTBsQixRQUFRL1ksUUFBTSxFQUFDeEssR0FBRW5DLEVBQUUwbEIsUUFBUS9ZLFVBQU8zTSxFQUFFcWtCLEdBQUcxakIsR0FBRXdCO0FBQUUsYUFBNU0sQ0FBOE1uQyxHQUFFLFNBQVF5RixJQUFHekYsRUFBRWdnRCxLQUFLLFNBQVF0L0MsSUFBR1YsRUFBRWdnRCxLQUFLLFVBQVNwL0MsSUFBR1osRUFBRW1rQixLQUFLLFFBQU9oaUIsSUFBR08sRUFBRWl6RCxZQUFVOXhELEVBQUUsZ0JBQWUxQixFQUFFd2lCO1lBQVUza0I7QUFBQyxhQUFFdUIsRUFBRXVQLFVBQVV5bUQsU0FBTyxTQUFTdjNEO1lBQUcsSUFBSVcsSUFBRVUsS0FBS2t3QyxnQkFBZXB2QyxJQUFFO2NBQUNpMUQsYUFBVzs7WUFBSSxJQUFHLE1BQUl6MkQsRUFBRSswRCxZQUFXLE9BQU9yMEQ7WUFBSyxJQUFHLE1BQUlWLEVBQUUrMEQsWUFBVyxPQUFPMTFELEtBQUdBLE1BQUlXLEVBQUU4MEQsVUFBUXoxRCxNQUFJQSxJQUFFVyxFQUFFODBELFFBQU85MEQsRUFBRTgwRCxRQUFNLE1BQUs5MEQsRUFBRSswRCxhQUFXLEdBQUUvMEQsRUFBRWcxRCxXQUFRO1lBQUczMUQsS0FBR0EsRUFBRW1rQixLQUFLLFVBQVM5aUIsTUFBS2MsS0FBSWQ7WUFBSyxLQUFJckIsR0FBRTtjQUFDLElBQUlzQixJQUFFWCxFQUFFODBELE9BQU1oekQsSUFBRTlCLEVBQUUrMEQ7Y0FBVy8wRCxFQUFFODBELFFBQU0sTUFBSzkwRCxFQUFFKzBELGFBQVcsR0FBRS8wRCxFQUFFZzFELFdBQVE7Y0FBRyxLQUFJLElBQUlqekQsSUFBRSxHQUFFQSxJQUFFRCxHQUFFQyxLQUFJcEIsRUFBRW9CLEdBQUd5aEIsS0FBSyxVQUFTOWlCLE1BQUtjO2NBQUcsT0FBT2Q7QUFBSTtZQUFDLElBQUlzQixJQUFFaUksRUFBRWpLLEVBQUU4MEQsT0FBTXoxRDtZQUFHLFFBQU8sTUFBSTJDLE1BQUloQyxFQUFFODBELE1BQU0vbkMsT0FBTy9xQixHQUFFLElBQUdoQyxFQUFFKzBELGNBQVksR0FBRSxNQUFJLzBELEVBQUUrMEQsZUFBYS8wRCxFQUFFODBELFFBQU05MEQsRUFBRTgwRCxNQUFNLEtBQUl6MUQsRUFBRW1rQixLQUFLLFVBQVM5aUIsTUFBS2M7WUFBSWQ7QUFBSSxhQUFFRSxFQUFFdVAsVUFBVXVULEtBQUcsU0FBU3JrQixHQUFFVztZQUFHLElBQUl3QixJQUFFVyxFQUFFZ08sVUFBVXVULEdBQUczaUIsS0FBS0wsTUFBS3JCLEdBQUVXO1lBQUcsSUFBRyxXQUFTWCxJQUFFLE1BQUtxQixLQUFLa3dDLGVBQWVva0IsV0FBU3QwRCxLQUFLc2pCLGVBQWMsSUFBRyxlQUFhM2tCLEdBQUU7Y0FBQyxJQUFJc0IsSUFBRUQsS0FBS2t3QztjQUFlandDLEVBQUVzMEQsY0FBWXQwRCxFQUFFMjBELHNCQUFvQjMwRCxFQUFFMjBELG9CQUFrQjMwRCxFQUFFeTBELGdCQUFhLEdBQUd6MEQsRUFBRTAwRCxtQkFBZ0IsR0FBRzEwRCxFQUFFdTBELFVBQVF2MEQsRUFBRU0sVUFBUXVILEVBQUU5SCxRQUFNb0IsRUFBRWd2QyxTQUFTdm5DLEdBQUU3STtBQUFNO1lBQUMsT0FBT2M7QUFBQyxhQUFFWixFQUFFdVAsVUFBVXd2QyxjQUFZLytDLEVBQUV1UCxVQUFVdVQsSUFBRzlpQixFQUFFdVAsVUFBVTZULFNBQU87WUFBVyxJQUFJM2tCLElBQUVxQixLQUFLa3dDO1lBQWUsT0FBT3Z4QyxFQUFFMjFELFlBQVU5eEQsRUFBRSxXQUFVN0QsRUFBRTIxRCxXQUFRLEdBQUcsU0FBUzMxRCxHQUFFVztjQUFHQSxFQUFFdTFELG9CQUFrQnYxRCxFQUFFdTFELG1CQUFnQixHQUFHenpELEVBQUVndkMsU0FBU3BuQyxHQUFFckssR0FBRVc7QUFBRyxhQUF6RSxDQUEyRVUsTUFBS3JCLEtBQUlxQjtBQUFJLGFBQUVFLEVBQUV1UCxVQUFVd21ELFFBQU07WUFBVyxPQUFPenpELEVBQUUseUJBQXdCeEMsS0FBS2t3QyxlQUFlb2tCLFdBQVMsTUFBS3QwRCxLQUFLa3dDLGVBQWVva0IsWUFBVTl4RCxFQUFFLFVBQVN4QyxLQUFLa3dDLGVBQWVva0IsV0FBUTtZQUFHdDBELEtBQUs4aUIsS0FBSyxXQUFVOWlCO0FBQUksYUFBRUUsRUFBRXVQLFVBQVUwbUQsT0FBSyxTQUFTeDNEO1lBQUcsSUFBSVcsSUFBRVUsTUFBS2MsSUFBRWQsS0FBS2t3QyxnQkFBZWp3QyxLQUFFO1lBQUcsS0FBSSxJQUFJbUIsS0FBS3pDLEVBQUVxa0IsR0FBRyxRQUFNO2NBQVksSUFBR3hnQixFQUFFLGdCQUFlMUIsRUFBRXMwRCxZQUFVdDBELEVBQUV1dkMsT0FBTTtnQkFBQyxJQUFJMXhDLElBQUVtQyxFQUFFczBELFFBQVF0MUI7Z0JBQU1uaEMsS0FBR0EsRUFBRTRCLFVBQVFqQixFQUFFa0IsS0FBSzdCO0FBQUU7Y0FBQ1csRUFBRWtCLEtBQUs7QUFBTSxpQkFBRzdCLEVBQUVxa0IsR0FBRyxTQUFPLFNBQVU1aEI7Y0FBR29CLEVBQUUsaUJBQWdCMUIsRUFBRXMwRCxZQUFVaDBELElBQUVOLEVBQUVzMEQsUUFBUTF4QyxNQUFNdGlCLEtBQUlOLEVBQUV1aUIsY0FBWSxRQUFNamlCLE1BQUlOLEVBQUV1aUIsY0FBWWppQixLQUFHQSxFQUFFYixZQUFVakIsRUFBRWtCLEtBQUtZLE9BQUtuQixLQUFFO2NBQUd0QixFQUFFczNEO0FBQVUsaUJBQUd0M0QsUUFBRSxNQUFTcUIsS0FBS29CLE1BQUkscUJBQW1CekMsRUFBRXlDLE9BQUtwQixLQUFLb0IsS0FBRyxTQUFTOUI7Y0FBRyxPQUFPO2dCQUFXLE9BQU9YLEVBQUVXLEdBQUdMLE1BQU1OLEdBQUVrUTtBQUFVO0FBQUMsYUFBN0QsQ0FBK0R6TjtZQUFJLEtBQUksSUFBSUMsSUFBRSxHQUFFQSxJQUFFOUIsRUFBRWdCLFFBQU9jLEtBQUkxQyxFQUFFcWtCLEdBQUd6akIsRUFBRThCLElBQUdyQixLQUFLOGlCLEtBQUtrTCxLQUFLaHVCLE1BQUtULEVBQUU4QjtZQUFLLE9BQU9yQixLQUFLNGpCLFFBQU0sU0FBU3RrQjtjQUFHa0QsRUFBRSxpQkFBZ0JsRCxJQUFHVyxNQUFJQSxLQUFFLEdBQUd0QixFQUFFMmtCO0FBQVMsZUFBRXRqQjtBQUFJLGFBQUVrQyxPQUFPd0csZUFBZXhJLEVBQUV1UCxXQUFVLHlCQUF3QjtZQUFDOUcsYUFBVztZQUFHQyxLQUFJO2NBQVcsT0FBTzVJLEtBQUtrd0MsZUFBZXdqQjtBQUFhO2NBQUl4ekQsRUFBRW0yRCxZQUFVbHREO0FBQUFBO1FBQUcsSUFBRyxDQUFDeEssR0FBRVcsR0FBRXdCO1VBQUs7VUFBYW5DLEVBQUVpQyxVQUFRVTtVQUFFLElBQUlyQixJQUFFYSxFQUFFLE9BQU1NLElBQUVjLE9BQU84VixPQUFPbFgsRUFBRTtVQUFPLFNBQVNPLEVBQUUxQyxHQUFFVztZQUFHLElBQUl3QixJQUFFZCxLQUFLeTJEO1lBQWdCMzFELEVBQUU0MUQsZ0JBQWE7WUFBRyxJQUFJejJELElBQUVhLEVBQUU2MUQ7WUFBUSxLQUFJMTJELEdBQUUsT0FBT0QsS0FBSzhpQixLQUFLLFNBQVEsSUFBSXJhLE1BQU07WUFBeUMzSCxFQUFFODFELGFBQVcsTUFBSzkxRCxFQUFFNjFELFVBQVEsTUFBSyxRQUFNcjNELEtBQUdVLEtBQUtRLEtBQUtsQixJQUFHVyxFQUFFdEI7WUFBRyxJQUFJeUMsSUFBRXBCLEtBQUtrd0M7WUFBZTl1QyxFQUFFb3pELFdBQVEsSUFBSXB6RCxFQUFFc3pELGdCQUFjdHpELEVBQUViLFNBQU9hLEVBQUVzeUQsa0JBQWdCMXpELEtBQUs0akIsTUFBTXhpQixFQUFFc3lEO0FBQWM7VUFBQyxTQUFTcHlELEVBQUUzQztZQUFHLE1BQUtxQixnQkFBZ0JzQixJQUFHLE9BQU8sSUFBSUEsRUFBRTNDO1lBQUdzQixFQUFFSSxLQUFLTCxNQUFLckIsSUFBR3FCLEtBQUt5MkQsa0JBQWdCO2NBQUNJLGdCQUFleDFELEVBQUUyc0IsS0FBS2h1QjtjQUFNODJELGdCQUFjO2NBQUdKLGVBQWE7Y0FBR0MsU0FBUTtjQUFLQyxZQUFXO2NBQUtHLGVBQWM7ZUFBTS8yRCxLQUFLa3dDLGVBQWV3a0IsZ0JBQWEsR0FBRzEwRCxLQUFLa3dDLGVBQWV1a0IsUUFBSyxHQUFHOTFELE1BQUkscUJBQW1CQSxFQUFFNjNCLGNBQVl4MkIsS0FBS3NsQyxhQUFXM21DLEVBQUU2M0I7WUFBVyxxQkFBbUI3M0IsRUFBRSsrQixVQUFRMTlCLEtBQUt1bEMsU0FBTzVtQyxFQUFFKytCLFNBQVExOUIsS0FBS2dqQixHQUFHLGFBQVl4aEI7QUFBRTtVQUFDLFNBQVNBO1lBQUksSUFBSTdDLElBQUVxQjtZQUFLLHFCQUFtQkEsS0FBS3VsQyxTQUFPdmxDLEtBQUt1bEMsUUFBTyxTQUFVam1DLEdBQUV3QjtjQUFHVyxFQUFFOUMsR0FBRVcsR0FBRXdCO0FBQUcsa0JBQUdXLEVBQUV6QixNQUFLLE1BQUs7QUFBSztVQUFDLFNBQVN5QixFQUFFOUMsR0FBRVcsR0FBRXdCO1lBQUcsSUFBR3hCLEdBQUUsT0FBT1gsRUFBRW1rQixLQUFLLFNBQVF4akI7WUFBRyxJQUFHLFFBQU13QixLQUFHbkMsRUFBRTZCLEtBQUtNLElBQUduQyxFQUFFc3hDLGVBQWUxdkMsUUFBTyxNQUFNLElBQUlrSSxNQUFNO1lBQThDLElBQUc5SixFQUFFODNELGdCQUFnQkMsY0FBYSxNQUFNLElBQUlqdUQsTUFBTTtZQUFrRCxPQUFPOUosRUFBRTZCLEtBQUs7QUFBSztVQUFDWSxFQUFFMmlELFdBQVNqakQsRUFBRSxPQUFNTSxFQUFFMmlELFNBQVN6aUQsR0FBRXJCLElBQUdxQixFQUFFbU8sVUFBVWpQLE9BQUssU0FBUzdCLEdBQUVXO1lBQUcsT0FBT1UsS0FBS3kyRCxnQkFBZ0JLLGlCQUFjLEdBQUc3MkQsRUFBRXdQLFVBQVVqUCxLQUFLSCxLQUFLTCxNQUFLckIsR0FBRVc7QUFBRSxhQUFFZ0MsRUFBRW1PLFVBQVU2MUIsYUFBVyxTQUFTM21DLEdBQUVXLEdBQUV3QjtZQUFHLE1BQU0sSUFBSTJILE1BQU07QUFBa0MsYUFBRW5ILEVBQUVtTyxVQUFVa1UsU0FBTyxTQUFTaGxCLEdBQUVXLEdBQUV3QjtZQUFHLElBQUliLElBQUVELEtBQUt5MkQ7WUFBZ0IsSUFBR3gyRCxFQUFFMDJELFVBQVE3MUQsR0FBRWIsRUFBRTIyRCxhQUFXajRELEdBQUVzQixFQUFFODJELGdCQUFjejNELElBQUdXLEVBQUV5MkQsY0FBYTtjQUFDLElBQUl0MUQsSUFBRXBCLEtBQUtrd0M7ZUFBZ0Jqd0MsRUFBRTYyRCxpQkFBZTExRCxFQUFFc3pELGdCQUFjdHpELEVBQUViLFNBQU9hLEVBQUVzeUQsa0JBQWdCMXpELEtBQUs0akIsTUFBTXhpQixFQUFFc3lEO0FBQWM7QUFBQyxhQUFFcHlELEVBQUVtTyxVQUFVbVUsUUFBTSxTQUFTamxCO1lBQUcsSUFBSVcsSUFBRVUsS0FBS3kyRDtZQUFnQixTQUFPbjNELEVBQUVzM0QsY0FBWXQzRCxFQUFFcTNELFlBQVVyM0QsRUFBRW8zRCxnQkFBY3AzRCxFQUFFbzNELGdCQUFhLEdBQUcxMkQsS0FBS3NsQyxXQUFXaG1DLEVBQUVzM0QsWUFBV3QzRCxFQUFFeTNELGVBQWN6M0QsRUFBRXUzRCxtQkFBaUJ2M0QsRUFBRXczRCxpQkFBYztBQUFFLGFBQUV4MUQsRUFBRW1PLFVBQVVvVSxXQUFTLFNBQVNsbEIsR0FBRVc7WUFBRyxJQUFJd0IsSUFBRWQ7WUFBS0MsRUFBRXdQLFVBQVVvVSxTQUFTeGpCLEtBQUtMLE1BQUtyQixJQUFFLFNBQVVBO2NBQUdXLEVBQUVYLElBQUdtQyxFQUFFZ2lCLEtBQUs7QUFBUztBQUFFO0FBQUE7UUFBRyxLQUFJLENBQUNua0IsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE9BQU1NLElBQUVOLEVBQUU7VUFBTSxTQUFTTyxFQUFFMUM7WUFBRyxJQUFJVyxJQUFFVTtZQUFLQSxLQUFLdEIsT0FBSyxNQUFLc0IsS0FBS2czRCxRQUFNLE1BQUtoM0QsS0FBS2kzRCxTQUFPO2VBQVksU0FBU3Q0RCxHQUFFVyxHQUFFd0I7Z0JBQUcsSUFBSWIsSUFBRXRCLEVBQUVxNEQ7Z0JBQU0sS0FBSXI0RCxFQUFFcTRELFFBQU0sTUFBSy8yRCxLQUFHO2tCQUFDLElBQUltQixJQUFFbkIsRUFBRWkzRDtrQkFBUzUzRCxFQUFFNjNELGFBQVkvMUQsT0FBRWcyRCxJQUFXbjNELElBQUVBLEVBQUV2QjtBQUFJO2dCQUFDWSxFQUFFKzNELHFCQUFtQi8zRCxFQUFFKzNELG1CQUFtQjM0RCxPQUFLQyxJQUFFVyxFQUFFKzNELHFCQUFtQjE0RDtBQUFDLGVBQS9LLENBQWlMVyxHQUFFWDtBQUFFO0FBQUM7VUFBQ0EsRUFBRWlDLFVBQVFyQjtVQUFFLElBQUkrQixHQUFFRSxLQUFHdkIsRUFBRWt5RCxXQUFTLEVBQUMsU0FBUSxVQUFTcndELFFBQVE3QixFQUFFZ1MsUUFBUWxNLE1BQU0sR0FBRSxPQUFLLElBQUVpc0QsZUFBYTV3RCxFQUFFZ3ZDO1VBQVM3d0MsRUFBRSszRCxnQkFBY2o0RDtVQUFFLElBQUlvQyxJQUFFUyxPQUFPOFYsT0FBT2xYLEVBQUU7VUFBT1csRUFBRXNpRCxXQUFTampELEVBQUU7VUFBTSxJQUFJMUIsR0FBRXlDLElBQUU7WUFBQzAxRCxXQUFVejJELEVBQUU7YUFBT0MsSUFBRUQsRUFBRSxPQUFNbUIsSUFBRW5CLEVBQUUsTUFBTXlqQixRQUFPL2hCLElBQUUxQixFQUFFdkIsRUFBRStGLGNBQVksWUFBVyxHQUFFbkUsSUFBRUwsRUFBRTtVQUFNLFNBQVNzRCxLQUFJO1VBQUMsU0FBUy9FLEVBQUVWLEdBQUVXO1lBQUdnQyxJQUFFQSxLQUFHUixFQUFFLE9BQU1uQyxJQUFFQSxLQUFHLENBQUM7WUFBRSxJQUFJc0IsSUFBRVgsYUFBYWdDO1lBQUV0QixLQUFLcWpCLGVBQWExa0IsRUFBRTBrQixZQUFXcGpCLE1BQUlELEtBQUtxakIsYUFBV3JqQixLQUFLcWpCLGdCQUFjMWtCLEVBQUVrNUQ7WUFBb0IsSUFBSXAyRCxJQUFFOUMsRUFBRSswRCxlQUFjdDBELElBQUVULEVBQUUwaUUsdUJBQXNCeC9ELElBQUU3QixLQUFLcWpCLGFBQVcsS0FBRztZQUFNcmpCLEtBQUswekQsZ0JBQWNqeUQsS0FBRyxNQUFJQSxJQUFFQSxJQUFFeEIsTUFBSWIsS0FBRyxNQUFJQSxLQUFHQSxJQUFFeUMsR0FBRTdCLEtBQUswekQsZ0JBQWM1c0QsS0FBS2lHLE1BQU0vTSxLQUFLMHpEO1lBQWUxekQsS0FBSzgzRCxlQUFZLEdBQUc5M0QsS0FBS2cyRCxhQUFVLEdBQUdoMkQsS0FBSyszRCxVQUFPLEdBQUcvM0QsS0FBS3F3QyxTQUFNLEdBQUdyd0MsS0FBSzYxRCxZQUFTLEdBQUc3MUQsS0FBS3N3QyxhQUFVO1lBQUcsSUFBSXZ2QyxLQUFFLE1BQUtwQyxFQUFFcTVEO1lBQWNoNEQsS0FBS2c0RCxpQkFBZWozRCxHQUFFZixLQUFLaTFELGtCQUFnQnQyRCxFQUFFczJELG1CQUFpQixRQUFPajFELEtBQUtPLFNBQU8sR0FBRVAsS0FBS2k0RCxXQUFRLEdBQUdqNEQsS0FBS2s0RCxTQUFPO1lBQUVsNEQsS0FBS3kwRCxRQUFLLEdBQUd6MEQsS0FBS200RCxvQkFBaUIsR0FBR240RCxLQUFLbzRELFVBQVEsU0FBU3o1RDtlQUFJLFNBQVNBLEdBQUVXO2dCQUFHLElBQUl3QixJQUFFbkMsRUFBRXN4QyxnQkFBZWh3QyxJQUFFYSxFQUFFMnpELE1BQUtwekQsSUFBRVAsRUFBRTYxRDtnQkFBUSxJQUFHLFNBQVNoNEQ7a0JBQUdBLEVBQUVzNUQsV0FBUSxHQUFHdDVELEVBQUVnNEQsVUFBUSxNQUFLaDRELEVBQUU0QixVQUFRNUIsRUFBRTA1RCxVQUFTMTVELEVBQUUwNUQsV0FBUztBQUFDLGlCQUF6RSxDQUEyRXYzRCxJQUFHeEIsSUFBRyxTQUFTWCxHQUFFVyxHQUFFd0IsR0FBRWIsR0FBRW9CO29CQUFLL0IsRUFBRTYzRCxXQUFVcjJELEtBQUdNLEVBQUVndkMsU0FBUy91QyxHQUFFcEIsSUFBR21CLEVBQUVndkMsU0FBUy9vQyxHQUFFMUksR0FBRVcsSUFBR1gsRUFBRXN4QyxlQUFlcW9CLGdCQUFhLEdBQUczNUQsRUFBRW1rQixLQUFLLFNBQVE3aUIsT0FBS29CLEVBQUVwQjtrQkFBR3RCLEVBQUVzeEMsZUFBZXFvQixnQkFBYSxHQUFHMzVELEVBQUVta0IsS0FBSyxTQUFRN2lCLElBQUdvSCxFQUFFMUksR0FBRVc7QUFBRyxpQkFBM0wsQ0FBNkxYLEdBQUVtQyxHQUFFYixHQUFFWCxHQUFFK0IsU0FBTztrQkFBQyxJQUFJQyxJQUFFOUIsRUFBRXNCO2tCQUFHUSxLQUFHUixFQUFFbzNELFVBQVFwM0QsRUFBRXEzRCxxQkFBbUJyM0QsRUFBRXkzRCxtQkFBaUJyekQsRUFBRXZHLEdBQUVtQyxJQUFHYixJQUFFdUIsRUFBRXRCLEdBQUV2QixHQUFFbUMsR0FBRVEsR0FBRUQsS0FBR25CLEVBQUV2QixHQUFFbUMsR0FBRVEsR0FBRUQ7QUFBRTtBQUFDLGVBQTViLENBQThiL0IsR0FBRVg7QUFBRSxlQUFFcUIsS0FBSzIyRCxVQUFRLE1BQUszMkQsS0FBS3E0RCxXQUFTLEdBQUVyNEQsS0FBS3U0RCxrQkFBZ0IsTUFBS3Y0RCxLQUFLdzRELHNCQUFvQixNQUFLeDRELEtBQUttM0QsWUFBVTtZQUFFbjNELEtBQUt5NEQsZUFBWSxHQUFHejRELEtBQUtzNEQsZ0JBQWEsR0FBR3Q0RCxLQUFLMDRELHVCQUFxQixHQUFFMTRELEtBQUtxM0QscUJBQW1CLElBQUloMkQsRUFBRXJCO0FBQUs7VUFBQyxTQUFTVCxFQUFFWjtZQUFHLElBQUcyQyxJQUFFQSxLQUFHUixFQUFFLFNBQVExQixFQUFFaUIsS0FBS2QsR0FBRVMsU0FBT0EsZ0JBQWdCc0IsSUFBRyxPQUFPLElBQUkvQixFQUFFWjtZQUFHcUIsS0FBS2l3QyxpQkFBZSxJQUFJNXdDLEVBQUVWLEdBQUVxQixPQUFNQSxLQUFLMlIsWUFBUyxHQUFHaFQsTUFBSSxxQkFBbUJBLEVBQUUra0IsVUFBUTFqQixLQUFLMmpCLFNBQU9obEIsRUFBRStrQjtZQUFPLHFCQUFtQi9rQixFQUFFZzZELFdBQVMzNEQsS0FBSzQ0RCxVQUFRajZELEVBQUVnNkQsU0FBUSxxQkFBbUJoNkQsRUFBRTQwRCxZQUFVdnpELEtBQUs2akIsV0FBU2xsQixFQUFFNDBEO1lBQVMscUJBQW1CNTBELEVBQUV5bUIsVUFBUXBsQixLQUFLeThCLFNBQU85OUIsRUFBRXltQixTQUFRcmtCLEVBQUVWLEtBQUtMO0FBQUs7VUFBQyxTQUFTOEUsRUFBRW5HLEdBQUVXLEdBQUV3QixHQUFFYixHQUFFbUIsR0FBRUMsR0FBRUM7WUFBR2hDLEVBQUUrNEQsV0FBU3A0RCxHQUFFWCxFQUFFcTNELFVBQVFyMUQsR0FBRWhDLEVBQUUyNEQsV0FBUSxHQUFHMzRELEVBQUVtMUQsUUFBSyxHQUFHM3pELElBQUVuQyxFQUFFaTZELFFBQVF4M0QsR0FBRTlCLEVBQUU4NEQsV0FBU3o1RCxFQUFFZ2xCLE9BQU92aUIsR0FBRUMsR0FBRS9CLEVBQUU4NEQsVUFBUzk0RCxFQUFFbTFELFFBQUs7QUFBRTtVQUFDLFNBQVN2MEQsRUFBRXZCLEdBQUVXLEdBQUV3QixHQUFFYjtZQUFHYSxLQUFHLFNBQVNuQyxHQUFFVztjQUFHLE1BQUlBLEVBQUVpQixVQUFRakIsRUFBRTAyRCxjQUFZMTJELEVBQUUwMkQsYUFBVSxHQUFHcjNELEVBQUVta0IsS0FBSztBQUFTLGFBQXpFLENBQTJFbmtCLEdBQUVXLElBQUdBLEVBQUU2M0QsYUFBWWwzRCxLQUFJb0gsRUFBRTFJLEdBQUVXO0FBQUU7VUFBQyxTQUFTNEYsRUFBRXZHLEdBQUVXO1lBQUdBLEVBQUU2NEQsb0JBQWlCO1lBQUcsSUFBSXIzRCxJQUFFeEIsRUFBRWk1RDtZQUFnQixJQUFHNTVELEVBQUVpNkQsV0FBUzkzRCxLQUFHQSxFQUFFcEMsTUFBSztjQUFDLElBQUl1QixJQUFFWCxFQUFFbzVELHNCQUFxQnQzRCxJQUFFLElBQUk4RyxNQUFNakksSUFBR3FCLElBQUVoQyxFQUFFKzNEO2NBQW1CLzFELEVBQUUwMUQsUUFBTWwyRDtjQUFFLEtBQUksSUFBSVUsSUFBRSxHQUFFQyxLQUFFLEdBQUdYLEtBQUdNLEVBQUVJLEtBQUdWLEdBQUVBLEVBQUUrM0QsVUFBUXAzRCxLQUFFLElBQUlYLElBQUVBLEVBQUVwQyxNQUFLOEMsS0FBRztjQUFFSixFQUFFMDNELGFBQVdyM0QsR0FBRXFELEVBQUVuRyxHQUFFVyxJQUFFLEdBQUdBLEVBQUVpQixRQUFPYSxHQUFFLElBQUdFLEVBQUUyMUQsU0FBUTMzRCxFQUFFNjNELGFBQVk3M0QsRUFBRWs1RCxzQkFBb0IsTUFBS2wzRCxFQUFFNUMsUUFBTVksRUFBRSszRCxxQkFBbUIvMUQsRUFBRTVDO2NBQUs0QyxFQUFFNUMsT0FBSyxRQUFNWSxFQUFFKzNELHFCQUFtQixJQUFJaDJELEVBQUUvQixJQUFHQSxFQUFFbzVELHVCQUFxQjtBQUFDLG1CQUFLO2NBQUMsTUFBSzUzRCxLQUFHO2dCQUFDLElBQUkxQixJQUFFMEIsRUFBRWk0RCxPQUFNbDNELElBQUVmLEVBQUV1MEQsVUFBU3QwRCxJQUFFRCxFQUFFbzJEO2dCQUFTLElBQUdweUQsRUFBRW5HLEdBQUVXLElBQUUsR0FBR0EsRUFBRStqQixhQUFXLElBQUVqa0IsRUFBRW1CLFFBQU9uQixHQUFFeUMsR0FBRWQsSUFBR0QsSUFBRUEsRUFBRXBDLE1BQUtZLEVBQUVvNUQsd0JBQXVCcDVELEVBQUUyNEQsU0FBUTtBQUFLO2NBQUMsU0FBT24zRCxNQUFJeEIsRUFBRWs1RCxzQkFBb0I7QUFBSztZQUFDbDVELEVBQUVpNUQsa0JBQWdCejNELEdBQUV4QixFQUFFNjRELG9CQUFpQjtBQUFFO1VBQUMsU0FBUzM0RCxFQUFFYjtZQUFHLE9BQU9BLEVBQUVvNUQsVUFBUSxNQUFJcDVELEVBQUU0QixVQUFRLFNBQU81QixFQUFFNDVELG9CQUFrQjU1RCxFQUFFazNELGFBQVdsM0QsRUFBRXM1RDtBQUFPO1VBQUMsU0FBUzd3RCxFQUFFekksR0FBRVc7WUFBR1gsRUFBRTg5QixRQUFPLFNBQVUzN0I7Y0FBR3hCLEVBQUU2M0QsYUFBWXIyRCxLQUFHbkMsRUFBRW1rQixLQUFLLFNBQVFoaUIsSUFBR3hCLEVBQUVtNUQsZUFBWSxHQUFHOTVELEVBQUVta0IsS0FBSyxjQUFhemIsRUFBRTFJLEdBQUVXO0FBQUc7QUFBRTtVQUFDLFNBQVMrSCxFQUFFMUksR0FBRVc7WUFBRyxJQUFJd0IsSUFBRXRCLEVBQUVGO1lBQUcsT0FBT3dCLE1BQUksU0FBU25DLEdBQUVXO2NBQUdBLEVBQUVtNUQsZUFBYW41RCxFQUFFdzRELGdCQUFjLHFCQUFtQm41RCxFQUFFODlCLFVBQVFuOUIsRUFBRTYzRCxhQUFZNzNELEVBQUV3NEQsZUFBWSxHQUFHMTJELEVBQUVndkMsU0FBU2hwQyxHQUFFekksR0FBRVcsT0FBS0EsRUFBRW01RCxlQUFZO2NBQUc5NUQsRUFBRW1rQixLQUFLO0FBQWMsYUFBbkssQ0FBcUtua0IsR0FBRVcsSUFBRyxNQUFJQSxFQUFFNjNELGNBQVk3M0QsRUFBRXUyRCxZQUFTLEdBQUdsM0QsRUFBRW1rQixLQUFLLGFBQVloaUI7QUFBQztVQUFDVyxFQUFFc2lELFNBQVN4a0QsR0FBRXdCLElBQUcxQixFQUFFb1EsVUFBVWtrRCxZQUFVO1lBQVcsS0FBSSxJQUFJaDFELElBQUVxQixLQUFLdTRELGlCQUFnQmo1RCxJQUFFLElBQUdYLEtBQUdXLEVBQUVrQixLQUFLN0IsSUFBR0EsSUFBRUEsRUFBRUQ7WUFBSyxPQUFPWTtBQUFDLGFBQUU7WUFBVztjQUFJNEMsT0FBT3dHLGVBQWVySixFQUFFb1EsV0FBVSxVQUFTO2dCQUFDN0csS0FBSS9HLEVBQUUwMUQsV0FBVTtrQkFBWSxPQUFPdjNELEtBQUsyekQ7QUFBWSxvQkFBRSw4RUFBNkU7O0FBQXNCLGNBQVQsT0FBTWgxRCxJQUFHO0FBQUMsV0FBck4sSUFBeU4scUJBQW1CbUIsVUFBUUEsT0FBT2s1RCxlQUFhLHFCQUFtQjVwQyxTQUFTM2YsVUFBVTNQLE9BQU9rNUQsZ0JBQWM1NUQsSUFBRWd3QixTQUFTM2YsVUFBVTNQLE9BQU9rNUQ7VUFBYTkyRCxPQUFPd0csZUFBZW5KLEdBQUVPLE9BQU9rNUQsYUFBWTtZQUFDeDZELE9BQU0sU0FBU0c7Y0FBRyxTQUFRUyxFQUFFaUIsS0FBS0wsTUFBS3JCLE1BQUlxQixTQUFPVCxLQUFHWixLQUFHQSxFQUFFc3hDLDBCQUEwQjV3QztBQUFDO2dCQUFLRCxJQUFFLFNBQVNUO1lBQUcsT0FBT0EsYUFBYXFCO0FBQUksYUFBRVQsRUFBRWtRLFVBQVVnVSxPQUFLO1lBQVd6akIsS0FBSzhpQixLQUFLLFNBQVEsSUFBSXJhLE1BQU07QUFBNkIsYUFBRWxKLEVBQUVrUSxVQUFVaVUsUUFBTSxTQUFTL2tCLEdBQUVXLEdBQUV3QjtZQUFHLElBQUliLEdBQUVvQixJQUFFckIsS0FBS2l3QyxnQkFBZTN1QyxLQUFFLEdBQUdFLEtBQUdILEVBQUVnaUIsZUFBYXBqQixJQUFFdEIsR0FBRXNELEVBQUU0aUIsU0FBUzVrQixNQUFJQSxhQUFhdUM7WUFBRyxPQUFPaEIsTUFBSVMsRUFBRTRpQixTQUFTbG1CLE9BQUtBLElBQUUsU0FBU0E7Y0FBRyxPQUFPc0QsRUFBRWlFLEtBQUt2SDtBQUFFLGFBQTVCLENBQThCQSxLQUFJLHFCQUFtQlcsTUFBSXdCLElBQUV4QixHQUFFQSxJQUFFLE9BQU1rQyxJQUFFbEMsSUFBRSxXQUFTQSxNQUFJQSxJQUFFK0IsRUFBRTR6RCxrQkFBaUIscUJBQW1CbjBELE1BQUlBLElBQUVzRDtZQUFHL0MsRUFBRWd2QyxRQUFNLFNBQVMxeEMsR0FBRVc7Y0FBRyxJQUFJd0IsSUFBRSxJQUFJMkgsTUFBTTtjQUFtQjlKLEVBQUVta0IsS0FBSyxTQUFRaGlCLElBQUdNLEVBQUVndkMsU0FBUzl3QyxHQUFFd0I7QUFBRSxhQUFsRixDQUFvRmQsTUFBS2MsTUFBSVUsS0FBRyxTQUFTN0MsR0FBRVcsR0FBRXdCLEdBQUViO2NBQUcsSUFBSW9CLEtBQUUsR0FBR0MsS0FBRTtjQUFHLE9BQU8sU0FBT1IsSUFBRVEsSUFBRSxJQUFJbEIsVUFBVSx5Q0FBdUMsbUJBQWlCVSxVQUFHLE1BQVNBLEtBQUd4QixFQUFFK2pCLGVBQWEvaEIsSUFBRSxJQUFJbEIsVUFBVTtjQUFvQ2tCLE1BQUkzQyxFQUFFbWtCLEtBQUssU0FBUXhoQixJQUFHRixFQUFFZ3ZDLFNBQVNud0MsR0FBRXFCLElBQUdELEtBQUUsSUFBSUE7QUFBQyxhQUF2UCxDQUF5UHJCLE1BQUtxQixHQUFFMUMsR0FBRW1DLFFBQU1PLEVBQUU4MUQsYUFBWTcxRCxJQUFFLFNBQVMzQyxHQUFFVyxHQUFFd0IsR0FBRWIsR0FBRW1CLEdBQUVDO2NBQUcsS0FBSVAsR0FBRTtnQkFBQyxJQUFJUSxJQUFFLFNBQVMzQyxHQUFFVyxHQUFFd0I7a0JBQUcsT0FBT25DLEVBQUUwa0IsZUFBWSxNQUFLMWtCLEVBQUVxNUQsaUJBQWUsbUJBQWlCMTRELE1BQUlBLElBQUUyQyxFQUFFaUUsS0FBSzVHLEdBQUV3QixLQUFJeEI7QUFBQyxpQkFBaEcsQ0FBa0dBLEdBQUVXLEdBQUVtQjtnQkFBR25CLE1BQUlxQixNQUFJUixLQUFFLEdBQUdNLElBQUUsVUFBU25CLElBQUVxQjtBQUFFO2NBQUMsSUFBSUUsSUFBRWxDLEVBQUUrakIsYUFBVyxJQUFFcGpCLEVBQUVNO2NBQU9qQixFQUFFaUIsVUFBUWlCO2NBQUUsSUFBSUMsSUFBRW5DLEVBQUVpQixTQUFPakIsRUFBRW8wRDtjQUFjLElBQUdqeUQsTUFBSW5DLEVBQUUwMkQsYUFBVSxJQUFJMTJELEVBQUUyNEQsV0FBUzM0RCxFQUFFNDRELFFBQU87Z0JBQUMsSUFBSTk0RCxJQUFFRSxFQUFFazVEO2dCQUFvQmw1RCxFQUFFazVELHNCQUFvQjtrQkFBQ08sT0FBTTk0RDtrQkFBRW8xRCxVQUFTajBEO2tCQUFFeTNELE9BQU0vM0Q7a0JBQUVvMkQsVUFBUzcxRDtrQkFBRTNDLE1BQUs7bUJBQU1VLElBQUVBLEVBQUVWLE9BQUtZLEVBQUVrNUQsc0JBQW9CbDVELEVBQUVpNUQsa0JBQWdCajVELEVBQUVrNUQscUJBQW9CbDVELEVBQUVvNUQsd0JBQXNCO0FBQUMscUJBQU01ekQsRUFBRW5HLEdBQUVXLElBQUUsR0FBR2tDLEdBQUV2QixHQUFFbUIsR0FBRUM7Y0FBRyxPQUFPSTtBQUFDLGFBQWxnQixDQUFvZ0J6QixNQUFLcUIsR0FBRUcsR0FBRTdDLEdBQUVXLEdBQUV3QixLQUFJUTtBQUFDLGFBQUUvQixFQUFFa1EsVUFBVXdwRCxPQUFLO1lBQVdqNUQsS0FBS2l3QyxlQUFlaW9CO0FBQVEsYUFBRTM0RCxFQUFFa1EsVUFBVXlwRCxTQUFPO1lBQVcsSUFBSXY2RCxJQUFFcUIsS0FBS2l3QztZQUFldHhDLEVBQUV1NUQsV0FBU3Y1RCxFQUFFdTVELFVBQVN2NUQsRUFBRXM1RCxXQUFTdDVELEVBQUV1NUQsVUFBUXY1RCxFQUFFazNELFlBQVVsM0QsRUFBRXc1RCxxQkFBbUJ4NUQsRUFBRTQ1RCxtQkFBaUJyekQsRUFBRWxGLE1BQUtyQjtBQUFHLGFBQUVZLEVBQUVrUSxVQUFVMHBELHFCQUFtQixTQUFTeDZEO1lBQUcsSUFBRyxtQkFBaUJBLE1BQUlBLElBQUVBLEVBQUVpTyxrQkFBaUIsRUFBQyxPQUFNLFFBQU8sU0FBUSxTQUFRLFVBQVMsVUFBUyxRQUFPLFNBQVEsV0FBVSxZQUFXLFFBQU85SyxTQUFTbkQsSUFBRSxJQUFJaU8sa0JBQWdCLElBQUcsTUFBTSxJQUFJeE0sVUFBVSx1QkFBcUJ6QjtZQUFHLE9BQU9xQixLQUFLaXdDLGVBQWVnbEIsa0JBQWdCdDJELEdBQUVxQjtBQUFJLGFBQUVrQyxPQUFPd0csZUFBZW5KLEVBQUVrUSxXQUFVLHlCQUF3QjtZQUFDOUcsYUFBVztZQUFHQyxLQUFJO2NBQVcsT0FBTzVJLEtBQUtpd0MsZUFBZXlqQjtBQUFhO2NBQUluMEQsRUFBRWtRLFVBQVVrVSxTQUFPLFNBQVNobEIsR0FBRVcsR0FBRXdCO1lBQUdBLEVBQUUsSUFBSTJILE1BQU07QUFBK0IsYUFBRWxKLEVBQUVrUSxVQUFVbXBELFVBQVEsTUFBS3I1RCxFQUFFa1EsVUFBVXF3QixNQUFJLFNBQVNuaEMsR0FBRVcsR0FBRXdCO1lBQUcsSUFBSWIsSUFBRUQsS0FBS2l3QztZQUFlLHFCQUFtQnR4QyxLQUFHbUMsSUFBRW5DLEdBQUVBLElBQUUsTUFBS1csSUFBRSxRQUFNLHFCQUFtQkEsTUFBSXdCLElBQUV4QixHQUFFQSxJQUFFLE9BQU0sUUFBTVgsS0FBR3FCLEtBQUswakIsTUFBTS9rQixHQUFFVztZQUFHVyxFQUFFaTRELFdBQVNqNEQsRUFBRWk0RCxTQUFPLEdBQUVsNEQsS0FBS2s1RCxXQUFVajVELEVBQUU4M0QsVUFBUTkzRCxFQUFFNDFELFlBQVUsU0FBU2wzRCxHQUFFVyxHQUFFd0I7Y0FBR3hCLEVBQUV5NEQsVUFBTyxHQUFHMXdELEVBQUUxSSxHQUFFVyxJQUFHd0IsTUFBSXhCLEVBQUV1MkQsV0FBU3owRCxFQUFFZ3ZDLFNBQVN0dkMsS0FBR25DLEVBQUVnZ0QsS0FBSyxVQUFTNzlDLEtBQUl4QixFQUFFK3dDLFNBQU0sR0FBRzF4QyxFQUFFZ1QsWUFBUztBQUFFLGFBQTVHLENBQThHM1IsTUFBS0MsR0FBRWE7QUFBRSxhQUFFb0IsT0FBT3dHLGVBQWVuSixFQUFFa1EsV0FBVSxhQUFZO1lBQUM3RyxLQUFJO2NBQVcsWUFBTyxNQUFTNUksS0FBS2l3QyxrQkFBZ0Jqd0MsS0FBS2l3QyxlQUFlSztBQUFTO1lBQUV4Z0MsS0FBSSxTQUFTblI7Y0FBR3FCLEtBQUtpd0MsbUJBQWlCandDLEtBQUtpd0MsZUFBZUssWUFBVTN4QztBQUFFO2NBQUlZLEVBQUVrUSxVQUFVOGpELFVBQVFweUQsRUFBRW95RCxTQUFRaDBELEVBQUVrUSxVQUFVNmxELGFBQVduMEQsRUFBRW8wRCxXQUFVaDJELEVBQUVrUSxVQUFVb1UsV0FBUyxTQUFTbGxCLEdBQUVXO1lBQUdVLEtBQUs4L0IsT0FBTXhnQyxFQUFFWDtBQUFFO0FBQUE7UUFBRyxNQUFLLENBQUNBLEdBQUVXLEdBQUV3QjtVQUFLO1VBQWEsSUFBSWIsSUFBRWEsRUFBRSxNQUFNeWpCLFFBQU9uakIsSUFBRU4sRUFBRTtVQUFLbkMsRUFBRWlDLFVBQVE7WUFBVyxTQUFTakM7ZUFBSyxTQUFTQSxHQUFFVztnQkFBRyxNQUFLWCxhQUFhVyxJQUFHLE1BQU0sSUFBSWMsVUFBVTtBQUFvQyxlQUEzRixDQUE2RkosTUFBS3JCLElBQUdxQixLQUFLMDFELE9BQUssTUFBSzExRCxLQUFLcTVELE9BQUssTUFBS3I1RCxLQUFLTyxTQUFPO0FBQUM7WUFBQyxPQUFPNUIsRUFBRThRLFVBQVVqUCxPQUFLLFNBQVM3QjtjQUFHLElBQUlXLElBQUU7Z0JBQUNpRyxNQUFLNUc7Z0JBQUVELE1BQUs7O2NBQU1zQixLQUFLTyxTQUFPLElBQUVQLEtBQUtxNUQsS0FBSzM2RCxPQUFLWSxJQUFFVSxLQUFLMDFELE9BQUtwMkQsR0FBRVUsS0FBS3E1RCxPQUFLLzVELEtBQUlVLEtBQUtPO0FBQU0sZUFBRTVCLEVBQUU4USxVQUFVRSxVQUFRLFNBQVNoUjtjQUFHLElBQUlXLElBQUU7Z0JBQUNpRyxNQUFLNUc7Z0JBQUVELE1BQUtzQixLQUFLMDFEOztjQUFNLE1BQUkxMUQsS0FBS08sV0FBU1AsS0FBS3E1RCxPQUFLLzVELElBQUdVLEtBQUswMUQsT0FBS3AyRCxLQUFJVSxLQUFLTztBQUFNLGVBQUU1QixFQUFFOFEsVUFBVXdmLFFBQU07Y0FBVyxJQUFHLE1BQUlqdkIsS0FBS08sUUFBTztnQkFBQyxJQUFJNUIsSUFBRXFCLEtBQUswMUQsS0FBS253RDtnQkFBSyxPQUFPLE1BQUl2RixLQUFLTyxTQUFPUCxLQUFLMDFELE9BQUsxMUQsS0FBS3E1RCxPQUFLLE9BQUtyNUQsS0FBSzAxRCxPQUFLMTFELEtBQUswMUQsS0FBS2gzRCxRQUFPc0IsS0FBS08sUUFBTzVCO0FBQUM7QUFBQyxlQUFFQSxFQUFFOFEsVUFBVTA3QyxRQUFNO2NBQVduckQsS0FBSzAxRCxPQUFLMTFELEtBQUtxNUQsT0FBSyxNQUFLcjVELEtBQUtPLFNBQU87QUFBQyxlQUFFNUIsRUFBRThRLFVBQVV6TCxPQUFLLFNBQVNyRjtjQUFHLElBQUcsTUFBSXFCLEtBQUtPLFFBQU8sT0FBTTtjQUFHLEtBQUksSUFBSWpCLElBQUVVLEtBQUswMUQsTUFBSzUwRCxJQUFFLEtBQUd4QixFQUFFaUcsTUFBS2pHLElBQUVBLEVBQUVaLFFBQU1vQyxLQUFHbkMsSUFBRVcsRUFBRWlHO2NBQUssT0FBT3pFO0FBQUMsZUFBRW5DLEVBQUU4USxVQUFVNkQsU0FBTyxTQUFTM1U7Y0FBRyxJQUFHLE1BQUlxQixLQUFLTyxRQUFPLE9BQU9OLEVBQUUya0IsTUFBTTtjQUFHLElBQUcsTUFBSTVrQixLQUFLTyxRQUFPLE9BQU9QLEtBQUswMUQsS0FBS253RDtjQUFLLEtBQUksSUFBSWpHLEdBQUV3QixHQUFFTSxJQUFFbkIsRUFBRW8wQixZQUFZMTFCLE1BQUksSUFBRzBDLElBQUVyQixLQUFLMDFELE1BQUtwMEQsSUFBRSxHQUFFRCxLQUFHL0IsSUFBRThCLEdBQUVOLElBQUVRLEdBQUVELEVBQUVrRSxLQUFLeWhCLEtBQUsxbkIsR0FBRXdCLElBQUdRLEtBQUdELEVBQUVrRSxLQUFLaEY7Y0FBT2MsSUFBRUEsRUFBRTNDO2NBQUssT0FBTzBDO0FBQUMsZUFBRXpDO0FBQUMsV0FBcitCLElBQXkrQnlDLEtBQUdBLEVBQUVpWixXQUFTalosRUFBRWlaLFFBQVF1VyxXQUFTanlCLEVBQUVpQyxRQUFRNk8sVUFBVXJPLEVBQUVpWixRQUFRdVcsVUFBUTtZQUFXLElBQUlqeUIsSUFBRXlDLEVBQUVpWixRQUFRO2NBQUM5WixRQUFPUCxLQUFLTzs7WUFBUyxPQUFPUCxLQUFLMEMsWUFBWWUsT0FBSyxNQUFJOUU7QUFBQztBQUFDO1FBQUcsTUFBSyxDQUFDQSxHQUFFVyxHQUFFd0I7VUFBSztVQUFhLElBQUliLElBQUVhLEVBQUU7VUFBTSxTQUFTTSxFQUFFekMsR0FBRVc7WUFBR1gsRUFBRW1rQixLQUFLLFNBQVF4akI7QUFBRTtVQUFDWCxFQUFFaUMsVUFBUTtZQUFDMnlELFNBQVEsU0FBUzUwRCxHQUFFVztjQUFHLElBQUl3QixJQUFFZCxNQUFLcUIsSUFBRXJCLEtBQUtrd0Msa0JBQWdCbHdDLEtBQUtrd0MsZUFBZUksV0FBVWh2QyxJQUFFdEIsS0FBS2l3QyxrQkFBZ0Jqd0MsS0FBS2l3QyxlQUFlSztjQUFVLE9BQU9qdkMsS0FBR0MsS0FBR2hDLElBQUVBLEVBQUVYLE1BQUlBLEtBQUdxQixLQUFLaXdDLGtCQUFnQmp3QyxLQUFLaXdDLGVBQWVxb0IsZ0JBQWNyNEQsRUFBRW13QyxTQUFTaHZDLEdBQUVwQixNQUFLckIsSUFBR3FCLFNBQU9BLEtBQUtrd0MsbUJBQWlCbHdDLEtBQUtrd0MsZUFBZUksYUFBVTtjQUFJdHdDLEtBQUtpd0MsbUJBQWlCandDLEtBQUtpd0MsZUFBZUssYUFBVSxJQUFJdHdDLEtBQUs2akIsU0FBU2xsQixLQUFHLE9BQUssU0FBVUE7aUJBQUlXLEtBQUdYLEtBQUdzQixFQUFFbXdDLFNBQVNodkMsR0FBRU4sR0FBRW5DLElBQUdtQyxFQUFFbXZDLG1CQUFpQm52QyxFQUFFbXZDLGVBQWVxb0IsZ0JBQWEsTUFBS2g1RCxLQUFHQSxFQUFFWDtBQUFHLG1CQUFHcUI7QUFBSztZQUFFdTFELFdBQVU7Y0FBV3YxRCxLQUFLa3dDLG1CQUFpQmx3QyxLQUFLa3dDLGVBQWVJLGFBQVUsR0FBR3R3QyxLQUFLa3dDLGVBQWVza0IsV0FBUSxHQUFHeDBELEtBQUtrd0MsZUFBZUcsU0FBTTtjQUFHcndDLEtBQUtrd0MsZUFBZXFrQixjQUFXLElBQUl2MEQsS0FBS2l3QyxtQkFBaUJqd0MsS0FBS2l3QyxlQUFlSyxhQUFVLEdBQUd0d0MsS0FBS2l3QyxlQUFlSSxTQUFNO2NBQUdyd0MsS0FBS2l3QyxlQUFlOG5CLFVBQU8sR0FBRy8zRCxLQUFLaXdDLGVBQWU0bEIsWUFBUyxHQUFHNzFELEtBQUtpd0MsZUFBZXFvQixnQkFBYTtBQUFHOztBQUFDO1FBQUcsTUFBSyxDQUFDMzVELEdBQUVXLEdBQUV3QjtVQUFLbkMsRUFBRWlDLFVBQVFFLEVBQUUsTUFBTXNqQjtBQUFBQTtRQUFjLE1BQUssQ0FBQ3psQixHQUFFVyxHQUFFd0I7V0FBTXhCLElBQUVYLEVBQUVpQyxVQUFRRSxFQUFFLE9BQU82NEQsU0FBT3I2RCxHQUFFQSxFQUFFczZELFdBQVN0NkQsR0FBRUEsRUFBRWtnQyxXQUFTMStCLEVBQUUsTUFBS3hCLEVBQUU4akIsU0FBT3RpQixFQUFFLE9BQU14QixFQUFFeWxDLFlBQVVqa0MsRUFBRSxLQUFJeEIsRUFBRXU2RCxjQUFZLzRELEVBQUU7QUFBSTtRQUFHLE1BQUssQ0FBQ25DLEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRW5CLEVBQUVza0I7VUFBTyxTQUFTbGpCLEVBQUUxQyxHQUFFVztZQUFHLEtBQUksSUFBSXdCLEtBQUtuQyxHQUFFVyxFQUFFd0IsS0FBR25DLEVBQUVtQztBQUFFO1VBQUMsU0FBU1EsRUFBRTNDLEdBQUVXLEdBQUV3QjtZQUFHLE9BQU9NLEVBQUV6QyxHQUFFVyxHQUFFd0I7QUFBRTtVQUFDTSxFQUFFOEUsUUFBTTlFLEVBQUV3akIsU0FBT3hqQixFQUFFaXpCLGVBQWFqekIsRUFBRW1nQyxrQkFBZ0I1aUMsRUFBRWlDLFVBQVFYLEtBQUdvQixFQUFFcEIsR0FBRVgsSUFBR0EsRUFBRWlsQixTQUFPampCLElBQUdELEVBQUVELEdBQUVFLElBQUdBLEVBQUU0RSxPQUFLLFNBQVN2SCxHQUFFVyxHQUFFd0I7WUFBRyxJQUFHLG1CQUFpQm5DLEdBQUUsTUFBTSxJQUFJeUIsVUFBVTtZQUFpQyxPQUFPZ0IsRUFBRXpDLEdBQUVXLEdBQUV3QjtBQUFFLGFBQUVRLEVBQUVzakIsUUFBTSxTQUFTam1CLEdBQUVXLEdBQUV3QjtZQUFHLElBQUcsbUJBQWlCbkMsR0FBRSxNQUFNLElBQUl5QixVQUFVO1lBQTZCLElBQUlILElBQUVtQixFQUFFekM7WUFBRyxZQUFPLE1BQVNXLElBQUUsbUJBQWlCd0IsSUFBRWIsRUFBRWlVLEtBQUs1VSxHQUFFd0IsS0FBR2IsRUFBRWlVLEtBQUs1VSxLQUFHVyxFQUFFaVUsS0FBSyxJQUFHalU7QUFBQyxhQUFFcUIsRUFBRSt5QixjQUFZLFNBQVMxMUI7WUFBRyxJQUFHLG1CQUFpQkEsR0FBRSxNQUFNLElBQUl5QixVQUFVO1lBQTZCLE9BQU9nQixFQUFFekM7QUFBRSxhQUFFMkMsRUFBRWlnQyxrQkFBZ0IsU0FBUzVpQztZQUFHLElBQUcsbUJBQWlCQSxHQUFFLE1BQU0sSUFBSXlCLFVBQVU7WUFBNkIsT0FBT0gsRUFBRTBnQyxXQUFXaGlDO0FBQUU7QUFBQTtRQUFHLE1BQUssQ0FBQ0EsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE1BQU15akIsUUFBT25qQixJQUFFbkIsRUFBRTRnQyxjQUFZLFNBQVNsaUM7WUFBRyxTQUFRQSxJQUFFLEtBQUdBLE1BQUlBLEVBQUVpTzthQUFlLEtBQUk7YUFBTSxLQUFJO2FBQU8sS0FBSTthQUFRLEtBQUk7YUFBUSxLQUFJO2FBQVMsS0FBSTthQUFTLEtBQUk7YUFBTyxLQUFJO2FBQVEsS0FBSTthQUFVLEtBQUk7YUFBVyxLQUFJO2NBQU0sUUFBTTs7YUFBRztjQUFRLFFBQU07O0FBQUc7VUFBRSxTQUFTdkwsRUFBRTFDO1lBQUcsSUFBSVc7WUFBRSxRQUFPVSxLQUFLcTFELFdBQVMsU0FBUzEyRDtjQUFHLElBQUlXLElBQUUsU0FBU1g7Z0JBQUcsS0FBSUEsR0FBRSxPQUFNO2dCQUFPLEtBQUksSUFBSVcsTUFBSSxRQUFPWDtpQkFBRyxLQUFJO2lCQUFPLEtBQUk7a0JBQVEsT0FBTTs7aUJBQU8sS0FBSTtpQkFBTyxLQUFJO2lCQUFRLEtBQUk7aUJBQVUsS0FBSTtrQkFBVyxPQUFNOztpQkFBVSxLQUFJO2lCQUFTLEtBQUk7a0JBQVMsT0FBTTs7aUJBQVMsS0FBSTtpQkFBUyxLQUFJO2lCQUFRLEtBQUk7a0JBQU0sT0FBT0E7O2lCQUFFO2tCQUFRLElBQUdXLEdBQUU7a0JBQU9YLEtBQUcsS0FBR0EsR0FBR2lPLGVBQWN0TixLQUFFOztBQUFHLGVBQWxTLENBQW9TWDtjQUFHLElBQUcsbUJBQWlCVyxNQUFJVyxFQUFFNGdDLGVBQWF6L0IsTUFBSUEsRUFBRXpDLEtBQUksTUFBTSxJQUFJOEosTUFBTSx1QkFBcUI5SjtjQUFHLE9BQU9XLEtBQUdYO0FBQUMsYUFBN1osQ0FBK1pBLElBQUdxQixLQUFLcTFEO2FBQVUsS0FBSTtjQUFVcjFELEtBQUtvb0QsT0FBSzNtRCxHQUFFekIsS0FBSzgvQixNQUFJMWdDLEdBQUVFLElBQUU7Y0FBRTs7YUFBTSxLQUFJO2NBQU9VLEtBQUtnaEUsV0FBU3gvRCxHQUFFbEMsSUFBRTtjQUFFOzthQUFNLEtBQUk7Y0FBU1UsS0FBS29vRCxPQUFLdm1ELEdBQUU3QixLQUFLOC9CLE1BQUkvK0IsR0FBRXpCLElBQUU7Y0FBRTs7YUFBTTtjQUFRLE9BQU9VLEtBQUswakIsUUFBTXpoQixTQUFPakMsS0FBSzgvQixNQUFJdDlCOztZQUFHeEMsS0FBS2loRSxXQUFTLEdBQUVqaEUsS0FBS2toRSxZQUFVLEdBQUVsaEUsS0FBS21oRSxXQUFTbGhFLEVBQUVvMEIsWUFBWS8wQjtBQUFFO1VBQUMsU0FBU2dDLEVBQUUzQztZQUFHLE9BQU9BLEtBQUcsTUFBSSxJQUFFQSxLQUFHLEtBQUcsSUFBRSxJQUFFQSxLQUFHLEtBQUcsS0FBRyxJQUFFQSxLQUFHLEtBQUcsS0FBRyxJQUFFQSxLQUFHLEtBQUcsS0FBRyxLQUFHO0FBQUM7VUFBQyxTQUFTNkMsRUFBRTdDO1lBQUcsSUFBSVcsSUFBRVUsS0FBS2toRSxZQUFVbGhFLEtBQUtpaEUsVUFBU25nRSxJQUFFLFNBQVNuQyxHQUFFVyxHQUFFd0I7Y0FBRyxJQUFHLFFBQU0sTUFBSXhCLEVBQUUsS0FBSSxPQUFPWCxFQUFFc2lFLFdBQVMsR0FBRTtjQUFJLElBQUd0aUUsRUFBRXNpRSxXQUFTLEtBQUczaEUsRUFBRWlCLFNBQU8sR0FBRTtnQkFBQyxJQUFHLFFBQU0sTUFBSWpCLEVBQUUsS0FBSSxPQUFPWCxFQUFFc2lFLFdBQVMsR0FBRTtnQkFBSSxJQUFHdGlFLEVBQUVzaUUsV0FBUyxLQUFHM2hFLEVBQUVpQixTQUFPLEtBQUcsUUFBTSxNQUFJakIsRUFBRSxLQUFJLE9BQU9YLEVBQUVzaUUsV0FBUyxHQUFFO0FBQUc7QUFBQyxhQUF4TSxDQUEwTWpoRSxNQUFLckI7WUFBRyxZQUFPLE1BQVNtQyxJQUFFQSxJQUFFZCxLQUFLaWhFLFlBQVV0aUUsRUFBRTRCLFVBQVE1QixFQUFFcW9CLEtBQUtobkIsS0FBS21oRSxVQUFTN2hFLEdBQUUsR0FBRVUsS0FBS2loRSxXQUFVamhFLEtBQUttaEUsU0FBU3p5RCxTQUFTMU8sS0FBS3ExRCxVQUFTLEdBQUVyMUQsS0FBS2toRSxlQUFhdmlFLEVBQUVxb0IsS0FBS2huQixLQUFLbWhFLFVBQVM3aEUsR0FBRSxHQUFFWCxFQUFFNEI7a0JBQWFQLEtBQUtpaEUsWUFBVXRpRSxFQUFFNEI7QUFBUTtVQUFDLFNBQVNrQixFQUFFOUMsR0FBRVc7WUFBRyxLQUFJWCxFQUFFNEIsU0FBT2pCLEtBQUcsS0FBRyxHQUFFO2NBQUMsSUFBSXdCLElBQUVuQyxFQUFFK1AsU0FBUyxXQUFVcFA7Y0FBRyxJQUFHd0IsR0FBRTtnQkFBQyxJQUFJYixJQUFFYSxFQUFFNkssV0FBVzdLLEVBQUVQLFNBQU87Z0JBQUcsSUFBR04sS0FBRyxTQUFPQSxLQUFHLE9BQU0sT0FBT0QsS0FBS2loRSxXQUFTLEdBQUVqaEUsS0FBS2toRSxZQUFVLEdBQUVsaEUsS0FBS21oRSxTQUFTLEtBQUd4aUUsRUFBRUEsRUFBRTRCLFNBQU8sSUFBR1AsS0FBS21oRSxTQUFTLEtBQUd4aUUsRUFBRUEsRUFBRTRCLFNBQU87Z0JBQUdPLEVBQUVpRixNQUFNLElBQUc7QUFBRTtjQUFDLE9BQU9qRjtBQUFDO1lBQUMsT0FBT2QsS0FBS2loRSxXQUFTLEdBQUVqaEUsS0FBS2toRSxZQUFVLEdBQUVsaEUsS0FBS21oRSxTQUFTLEtBQUd4aUUsRUFBRUEsRUFBRTRCLFNBQU8sSUFBRzVCLEVBQUUrUCxTQUFTLFdBQVVwUCxHQUFFWCxFQUFFNEIsU0FBTztBQUFFO1VBQUMsU0FBU25CLEVBQUVUO1lBQUcsSUFBSVcsSUFBRVgsS0FBR0EsRUFBRTRCLFNBQU9QLEtBQUswakIsTUFBTS9rQixLQUFHO1lBQUcsSUFBR3FCLEtBQUtpaEUsVUFBUztjQUFDLElBQUluZ0UsSUFBRWQsS0FBS2toRSxZQUFVbGhFLEtBQUtpaEU7Y0FBUyxPQUFPM2hFLElBQUVVLEtBQUttaEUsU0FBU3p5RCxTQUFTLFdBQVUsR0FBRTVOO0FBQUU7WUFBQyxPQUFPeEI7QUFBQztVQUFDLFNBQVN1QyxFQUFFbEQsR0FBRVc7WUFBRyxJQUFJd0IsS0FBR25DLEVBQUU0QixTQUFPakIsS0FBRztZQUFFLE9BQU8sTUFBSXdCLElBQUVuQyxFQUFFK1AsU0FBUyxVQUFTcFAsTUFBSVUsS0FBS2loRSxXQUFTLElBQUVuZ0UsR0FBRWQsS0FBS2toRSxZQUFVLEdBQUUsTUFBSXBnRSxJQUFFZCxLQUFLbWhFLFNBQVMsS0FBR3hpRSxFQUFFQSxFQUFFNEIsU0FBTyxNQUFJUCxLQUFLbWhFLFNBQVMsS0FBR3hpRSxFQUFFQSxFQUFFNEIsU0FBTztZQUFHUCxLQUFLbWhFLFNBQVMsS0FBR3hpRSxFQUFFQSxFQUFFNEIsU0FBTyxLQUFJNUIsRUFBRStQLFNBQVMsVUFBU3BQLEdBQUVYLEVBQUU0QixTQUFPTztBQUFHO1VBQUMsU0FBU0MsRUFBRXBDO1lBQUcsSUFBSVcsSUFBRVgsS0FBR0EsRUFBRTRCLFNBQU9QLEtBQUswakIsTUFBTS9rQixLQUFHO1lBQUcsT0FBT3FCLEtBQUtpaEUsV0FBUzNoRSxJQUFFVSxLQUFLbWhFLFNBQVN6eUQsU0FBUyxVQUFTLEdBQUUsSUFBRTFPLEtBQUtpaEUsWUFBVTNoRTtBQUFDO1VBQUMsU0FBUzJDLEVBQUV0RDtZQUFHLE9BQU9BLEVBQUUrUCxTQUFTMU8sS0FBS3ExRDtBQUFTO1VBQUMsU0FBUzd5RCxFQUFFN0Q7WUFBRyxPQUFPQSxLQUFHQSxFQUFFNEIsU0FBT1AsS0FBSzBqQixNQUFNL2tCLEtBQUc7QUFBRTtVQUFDVyxFQUFFZ0MsSUFBRUQsR0FBRUEsRUFBRW9PLFVBQVVpVSxRQUFNLFNBQVMva0I7WUFBRyxJQUFHLE1BQUlBLEVBQUU0QixRQUFPLE9BQU07WUFBRyxJQUFJakIsR0FBRXdCO1lBQUUsSUFBR2QsS0FBS2loRSxVQUFTO2NBQUMsU0FBRyxPQUFVM2hFLElBQUVVLEtBQUtnaEUsU0FBU3JpRSxLQUFJLE9BQU07Y0FBR21DLElBQUVkLEtBQUtpaEUsVUFBU2poRSxLQUFLaWhFLFdBQVM7QUFBQyxtQkFBTW5nRSxJQUFFO1lBQUUsT0FBT0EsSUFBRW5DLEVBQUU0QixTQUFPakIsSUFBRUEsSUFBRVUsS0FBS29vRCxLQUFLenBELEdBQUVtQyxLQUFHZCxLQUFLb29ELEtBQUt6cEQsR0FBRW1DLEtBQUd4QixLQUFHO0FBQUUsYUFBRStCLEVBQUVvTyxVQUFVcXdCLE1BQUksU0FBU25oQztZQUFHLElBQUlXLElBQUVYLEtBQUdBLEVBQUU0QixTQUFPUCxLQUFLMGpCLE1BQU0va0IsS0FBRztZQUFHLE9BQU9xQixLQUFLaWhFLFdBQVMzaEUsSUFBRSxNQUFJQTtBQUFDLGFBQUUrQixFQUFFb08sVUFBVTI0QyxPQUFLLFNBQVN6cEQsR0FBRVc7WUFBRyxJQUFJd0IsSUFBRSxTQUFTbkMsR0FBRVcsR0FBRXdCO2NBQUcsSUFBSWIsSUFBRVgsRUFBRWlCLFNBQU87Y0FBRSxJQUFHTixJQUFFYSxHQUFFLE9BQU87Y0FBRSxJQUFJTSxJQUFFRSxFQUFFaEMsRUFBRVc7Y0FBSSxPQUFPbUIsS0FBRyxLQUFHQSxJQUFFLE1BQUl6QyxFQUFFc2lFLFdBQVM3L0QsSUFBRSxJQUFHQSxPQUFLbkIsSUFBRWEsTUFBSSxNQUFJTSxJQUFFLEtBQUdBLElBQUVFLEVBQUVoQyxFQUFFVyxRQUFNLEtBQUdtQixJQUFFLE1BQUl6QyxFQUFFc2lFLFdBQVM3L0QsSUFBRTtjQUFHQSxPQUFLbkIsSUFBRWEsTUFBSSxNQUFJTSxJQUFFLEtBQUdBLElBQUVFLEVBQUVoQyxFQUFFVyxRQUFNLEtBQUdtQixJQUFFLE1BQUksTUFBSUEsSUFBRUEsSUFBRSxJQUFFekMsRUFBRXNpRSxXQUFTNy9ELElBQUUsSUFBR0EsS0FBRztBQUFDLGFBQWxPLENBQW9PcEIsTUFBS3JCLEdBQUVXO1lBQUcsS0FBSVUsS0FBS2loRSxVQUFTLE9BQU90aUUsRUFBRStQLFNBQVMsUUFBT3BQO1lBQUdVLEtBQUtraEUsWUFBVXBnRTtZQUFFLElBQUliLElBQUV0QixFQUFFNEIsVUFBUU8sSUFBRWQsS0FBS2loRTtZQUFVLE9BQU90aUUsRUFBRXFvQixLQUFLaG5CLEtBQUttaEUsVUFBUyxHQUFFbGhFLElBQUd0QixFQUFFK1AsU0FBUyxRQUFPcFAsR0FBRVc7QUFBRSxhQUFFb0IsRUFBRW9PLFVBQVV1eEQsV0FBUyxTQUFTcmlFO1lBQUcsSUFBR3FCLEtBQUtpaEUsWUFBVXRpRSxFQUFFNEIsUUFBTyxPQUFPNUIsRUFBRXFvQixLQUFLaG5CLEtBQUttaEUsVUFBU25oRSxLQUFLa2hFLFlBQVVsaEUsS0FBS2loRSxVQUFTLEdBQUVqaEUsS0FBS2loRSxXQUFVamhFLEtBQUttaEUsU0FBU3p5RCxTQUFTMU8sS0FBS3ExRCxVQUFTLEdBQUVyMUQsS0FBS2toRTtZQUFXdmlFLEVBQUVxb0IsS0FBS2huQixLQUFLbWhFLFVBQVNuaEUsS0FBS2toRSxZQUFVbGhFLEtBQUtpaEUsVUFBUyxHQUFFdGlFLEVBQUU0QixTQUFRUCxLQUFLaWhFLFlBQVV0aUUsRUFBRTRCO0FBQU07QUFBQTtRQUFHLE1BQUssQ0FBQzVCLEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxNQUFNaWtDLFdBQVUxakMsSUFBRVAsRUFBRSxNQUFNaWpELFVBQVN6aUQsSUFBRVIsRUFBRTtVQUFNLFNBQVNVLEVBQUU3QztZQUFHeUMsRUFBRWYsS0FBS0wsTUFBS3JCLElBQUdxQixLQUFLZytELGNBQVc7QUFBRTtVQUFDLFNBQVN2OEQsRUFBRTlDLEdBQUVXLEdBQUV3QjtZQUFHQSxFQUFFLE1BQUtuQztBQUFFO1VBQUMsU0FBU1MsRUFBRVQ7WUFBRyxPQUFPLFNBQVNXLEdBQUV3QixHQUFFYjtjQUFHLE9BQU0scUJBQW1CWCxNQUFJVyxJQUFFYSxHQUFFQSxJQUFFeEIsR0FBRUEsSUFBRSxDQUFDLElBQUcscUJBQW1Cd0IsTUFBSUEsSUFBRVcsSUFBRyxxQkFBbUJ4QixNQUFJQSxJQUFFO2NBQU10QixFQUFFVyxHQUFFd0IsR0FBRWI7QUFBRTtBQUFDO1VBQUNvQixFQUFFRyxHQUFFSixJQUFHSSxFQUFFaU8sVUFBVThqRCxVQUFRLFNBQVM1MEQ7WUFBRyxLQUFJcUIsS0FBS2crRCxZQUFXO2NBQUNoK0QsS0FBS2crRCxjQUFXO2NBQUcsSUFBSTErRCxJQUFFVTtjQUFLQyxFQUFFbXdDLFVBQVM7Z0JBQVl6eEMsS0FBR1csRUFBRXdqQixLQUFLLFNBQVFua0IsSUFBR1csRUFBRXdqQixLQUFLO0FBQVM7QUFBRTtBQUFDLGFBQUVua0IsRUFBRWlDLFVBQVF4QixHQUFFLFNBQVVULEdBQUVXLEdBQUV3QjtZQUFHLElBQUliLElBQUUsSUFBSXVCLEVBQUU3QztZQUFHLE9BQU9zQixFQUFFcWxDLGFBQVdobUMsR0FBRXdCLE1BQUliLEVBQUVzbEMsU0FBT3prQyxJQUFHYjtBQUFFLGVBQUd0QixFQUFFaUMsUUFBUTBnRSxPQUFLbGlFLEdBQUUsU0FBVVQsR0FBRVcsR0FBRXdCO1lBQUcsU0FBU2IsRUFBRVg7Y0FBRyxNQUFLVSxnQkFBZ0JDLElBQUcsT0FBTyxJQUFJQSxFQUFFWDtjQUFHVSxLQUFLOHFCLFVBQVF4cEIsRUFBRTNDLEdBQUVXLElBQUdrQyxFQUFFbkIsS0FBS0wsTUFBS0EsS0FBSzhxQjtBQUFRO1lBQUMsT0FBT3pwQixFQUFFcEIsR0FBRXVCLElBQUd2QixFQUFFd1AsVUFBVTYxQixhQUFXaG1DLEdBQUV3QixNQUFJYixFQUFFd1AsVUFBVTgxQixTQUFPemtDLElBQUdiO0FBQUUsZUFBR3RCLEVBQUVpQyxRQUFRcWpCLE1BQUk3a0IsR0FBRSxTQUFVVCxHQUFFVyxHQUFFd0I7WUFBRyxJQUFJYixJQUFFLElBQUl1QixFQUFFRixFQUFFO2NBQUMraEIsYUFBVztjQUFHcXdDLGVBQWM7ZUFBSS8wRDtZQUFJLE9BQU9zQixFQUFFcWxDLGFBQVdobUMsR0FBRXdCLE1BQUliLEVBQUVzbEMsU0FBT3prQyxJQUFHYjtBQUFFO0FBQUM7UUFBRyxNQUFLLFNBQVN0QixHQUFFVyxHQUFFd0I7VUFBRyxJQUFJYjtVQUFFdEIsSUFBRW1DLEVBQUVzNUIsSUFBSXo3QixJQUFHLFNBQVN5QztZQUFHOUIsS0FBR0EsRUFBRXVyRCxVQUFTbHNELEtBQUdBLEVBQUVrc0Q7WUFBUyxJQUFJeHBELElBQUUsbUJBQWlCUCxFQUFFdkIsS0FBR3VCLEVBQUV2QjtZQUFFOEIsRUFBRWtnRSxXQUFTbGdFLEtBQUdBLEVBQUVxUyxXQUFTclMsS0FBR0EsRUFBRVI7WUFBSyxJQUFJUyxHQUFFRSxJQUFFLFlBQVdDLElBQUUsSUFBR3JDLElBQUUsU0FBUXlDLElBQUUsZ0JBQWVkLElBQUUsNkJBQTRCa0IsSUFBRTtjQUFDdS9ELFVBQVM7Y0FBa0QsYUFBWTtjQUFpRCxpQkFBZ0I7ZUFBaUJoL0QsSUFBRXNFLEtBQUtpRyxPQUFNNUwsSUFBRTRDLE9BQU82SDtZQUFhLFNBQVN4SCxFQUFFekY7Y0FBRyxNQUFNcXlCLFdBQVcvdUIsRUFBRXREO0FBQUc7WUFBQyxTQUFTVSxFQUFFVixHQUFFVztjQUFHLEtBQUksSUFBSXdCLElBQUVuQyxFQUFFNEIsUUFBT04sSUFBRSxJQUFHYSxPQUFLYixFQUFFYSxLQUFHeEIsRUFBRVgsRUFBRW1DO2NBQUksT0FBT2I7QUFBQztZQUFDLFNBQVNWLEVBQUVaLEdBQUVXO2NBQUcsSUFBSXdCLElBQUVuQyxFQUFFa08sTUFBTSxNQUFLNU0sSUFBRTtjQUFHLE9BQU9hLEVBQUVQLFNBQU8sTUFBSU4sSUFBRWEsRUFBRSxLQUFHLEtBQUluQyxJQUFFbUMsRUFBRSxLQUFJYixJQUFFWixHQUFHVixJQUFFQSxFQUFFNkYsUUFBUXpELEdBQUUsTUFBTThMLE1BQU0sTUFBS3ZOLEdBQUcwRSxLQUFLO0FBQUk7WUFBQyxTQUFTYyxFQUFFbkc7Y0FBRyxLQUFJLElBQUlXLEdBQUV3QixHQUFFYixJQUFFLElBQUdtQixJQUFFLEdBQUVDLElBQUUxQyxFQUFFNEIsUUFBT2EsSUFBRUMsTUFBSS9CLElBQUVYLEVBQUVnTixXQUFXdkssU0FBTyxTQUFPOUIsS0FBRyxTQUFPOEIsSUFBRUMsSUFBRSxVQUFRLFNBQU9QLElBQUVuQyxFQUFFZ04sV0FBV3ZLLFNBQU9uQixFQUFFTyxPQUFPLE9BQUtsQixNQUFJLE9BQUssT0FBS3dCLEtBQUcsVUFBUWIsRUFBRU8sS0FBS2xCO2NBQUc4QixPQUFLbkIsRUFBRU8sS0FBS2xCO2NBQUcsT0FBT1c7QUFBQztZQUFDLFNBQVNDLEVBQUV2QjtjQUFHLE9BQU9VLEVBQUVWLElBQUUsU0FBVUE7Z0JBQUcsSUFBSVcsSUFBRTtnQkFBRyxPQUFPWCxJQUFFLFVBQVFXLEtBQUc2QixHQUFHeEMsS0FBRyxXQUFTLEtBQUcsT0FBSyxRQUFPQSxJQUFFLFFBQU0sT0FBS0EsSUFBR1csSUFBRTZCLEVBQUV4QztBQUFHLGtCQUFHcUYsS0FBSztBQUFHO1lBQUMsU0FBU2tCLEVBQUV2RyxHQUFFVztjQUFHLE9BQU9YLElBQUUsS0FBRyxNQUFJQSxJQUFFLFFBQU0sS0FBR1csTUFBSTtBQUFFO1lBQUMsU0FBU0UsRUFBRWIsR0FBRVcsR0FBRXdCO2NBQUcsSUFBSWIsSUFBRTtjQUFFLEtBQUl0QixJQUFFbUMsSUFBRTBCLEVBQUU3RCxJQUFFLE9BQUtBLEtBQUcsR0FBRUEsS0FBRzZELEVBQUU3RCxJQUFFVyxJQUFHWCxJQUFFLEtBQUlzQixLQUFHd0IsR0FBRTlDLElBQUU2RCxFQUFFN0QsSUFBRTtjQUFJLE9BQU82RCxFQUFFdkMsSUFBRSxLQUFHdEIsS0FBR0EsSUFBRTtBQUFJO1lBQUMsU0FBU3lJLEVBQUV6STtjQUFHLElBQUlXLEdBQUV3QixHQUFFYixHQUFFbUIsR0FBRUMsR0FBRUMsR0FBRWxDLEdBQUV5QyxHQUFFZCxHQUFFa0IsR0FBRWQsR0FBRTlCLElBQUUsSUFBR0UsSUFBRVosRUFBRTRCLFFBQU91RSxJQUFFLEdBQUVJLElBQUUsS0FBSWtDLElBQUU7Y0FBRyxNQUFLdEcsSUFBRW5DLEVBQUV1aUMsWUFBWSxRQUFNLE1BQUlwZ0MsSUFBRSxJQUFHYixJQUFFLEdBQUVBLElBQUVhLEtBQUliLEdBQUV0QixFQUFFZ04sV0FBVzFMLE1BQUksT0FBS21FLEVBQUUsY0FBYS9FLEVBQUVtQixLQUFLN0IsRUFBRWdOLFdBQVcxTDtjQUFJLEtBQUltQixJQUFFTixJQUFFLElBQUVBLElBQUUsSUFBRSxHQUFFTSxJQUFFN0IsS0FBRztnQkFBQyxLQUFJOEIsSUFBRXlELEdBQUV4RCxJQUFFLEdBQUVsQyxJQUFFcUMsR0FBRUwsS0FBRzdCLEtBQUc2RSxFQUFFLG9CQUFtQnZDLEtBQUdWLElBQUV4QyxFQUFFZ04sV0FBV3ZLLFFBQU0sS0FBRyxLQUFHRCxJQUFFLEtBQUdBLElBQUUsS0FBRyxLQUFHQSxJQUFFLEtBQUdBLElBQUUsS0FBRyxLQUFHQSxJQUFFLEtBQUdNLE1BQUlBLEtBQUdJLElBQUVXLEdBQUdoQixJQUFFc0QsS0FBR3hELE9BQUs4QyxFQUFFO2dCQUFZVSxLQUFHakQsSUFBRVAsS0FBSU8sS0FBR2QsSUFBRTNCLEtBQUdnSSxJQUFFLElBQUVoSSxLQUFHZ0ksSUFBRSxLQUFHLEtBQUdoSSxJQUFFZ0ksS0FBSWhJLEtBQUdxQyxHQUFFSCxJQUFFa0IsRUFBRWhCLEtBQUdTLElBQUVSLElBQUVWLE9BQUtxRCxFQUFFLGFBQVk5QyxLQUFHVztnQkFBRW1GLElBQUU1SCxFQUFFc0YsSUFBRXpELEdBQUUvQixJQUFFRCxFQUFFa0IsU0FBTyxHQUFFLEtBQUdjLElBQUdtQixFQUFFc0MsSUFBRXhGLEtBQUdrQyxJQUFFMEQsS0FBR2QsRUFBRSxhQUFZYyxLQUFHMUMsRUFBRXNDLElBQUV4RixJQUFHd0YsS0FBR3hGLEdBQUVELEVBQUVndEIsT0FBT3ZuQixLQUFJLEdBQUVJO0FBQUU7Y0FBQyxPQUFPaEYsRUFBRWI7QUFBRTtZQUFDLFNBQVNnSSxFQUFFMUk7Y0FBRyxJQUFJVyxHQUFFd0IsR0FBRWIsR0FBRW1CLEdBQUVDLEdBQUVDLEdBQUVsQyxHQUFFeUMsR0FBRWQsR0FBRWtCLEdBQUU1QyxHQUFFRSxHQUFFVyxHQUFFa0gsR0FBRUMsR0FBRVMsSUFBRTtjQUFHLEtBQUl2SSxLQUFHWixJQUFFbUcsRUFBRW5HLElBQUk0QixRQUFPakIsSUFBRSxLQUFJd0IsSUFBRSxHQUFFTyxJQUFFLElBQUdDLElBQUUsR0FBRUEsSUFBRS9CLEtBQUkrQixJQUFHakMsSUFBRVYsRUFBRTJDLE1BQUksT0FBS3dHLEVBQUV0SCxLQUFLVyxFQUFFOUI7Y0FBSSxLQUFJWSxJQUFFbUIsSUFBRTBHLEVBQUV2SCxRQUFPYSxLQUFHMEcsRUFBRXRILEtBQUssTUFBS1AsSUFBRVYsS0FBRztnQkFBQyxLQUFJSCxJQUFFb0MsR0FBRUYsSUFBRSxHQUFFQSxJQUFFL0IsS0FBSStCLElBQUdqQyxJQUFFVixFQUFFMkMsT0FBS2hDLEtBQUdELElBQUVELE1BQUlBLElBQUVDO2dCQUFHLEtBQUlELElBQUVFLElBQUVrRCxHQUFHaEIsSUFBRVYsTUFBSVosSUFBRUQsSUFBRSxPQUFLbUUsRUFBRSxhQUFZdEQsTUFBSTFCLElBQUVFLEtBQUdZLEdBQUVaLElBQUVGLEdBQUVrQyxJQUFFLEdBQUVBLElBQUUvQixLQUFJK0IsR0FBRSxLQUFJakMsSUFBRVYsRUFBRTJDLE1BQUloQyxPQUFLd0IsSUFBRVUsS0FBRzRDLEVBQUU7Z0JBQVkvRSxLQUFHQyxHQUFFO2tCQUFDLEtBQUl1QyxJQUFFZixHQUFFQyxJQUFFVSxLQUFJSSxLQUFHSSxJQUFFbEIsS0FBR00sSUFBRSxJQUFFTixLQUFHTSxJQUFFLEtBQUcsS0FBR04sSUFBRU0sS0FBSU4sS0FBR1UsR0FBRTRGLElBQUV4RixJQUFFSSxHQUFFbUYsSUFBRTNGLElBQUVRLEdBQUU2RixFQUFFdEgsS0FBS1csRUFBRStELEVBQUVqRCxJQUFFb0YsSUFBRUQsR0FBRTtrQkFBS3ZGLElBQUVXLEVBQUU2RSxJQUFFRDtrQkFBR1UsRUFBRXRILEtBQUtXLEVBQUUrRCxFQUFFckQsR0FBRSxNQUFLUixJQUFFN0IsRUFBRXNCLEdBQUVaLEdBQUVELEtBQUdtQixJQUFHTixJQUFFLEtBQUliO0FBQUM7a0JBQUdhLEtBQUl4QjtBQUFDO2NBQUMsT0FBT3dJLEVBQUU5RCxLQUFLO0FBQUc7WUFBQzFDLElBQUU7Y0FBQzJRLFNBQVE7Y0FBUXd2RCxNQUFLO2dCQUFDOTVELFFBQU83QztnQkFBRTBDLFFBQU90SDs7Y0FBR3lILFFBQU9QO2NBQUVJLFFBQU9IO2NBQUVxNkQsU0FBUSxTQUFTL2lFO2dCQUFHLE9BQU9ZLEVBQUVaLElBQUUsU0FBVUE7a0JBQUcsT0FBT2tELEVBQUUwbkIsS0FBSzVxQixLQUFHLFNBQU8wSSxFQUFFMUksS0FBR0E7QUFBRTtBQUFFO2NBQUVnakUsV0FBVSxTQUFTaGpFO2dCQUFHLE9BQU9ZLEVBQUVaLElBQUUsU0FBVUE7a0JBQUcsT0FBT1MsRUFBRW1xQixLQUFLNXFCLEtBQUd5SSxFQUFFekksRUFBRW9ILE1BQU0sR0FBRzZHLGlCQUFlak87QUFBRTtBQUFFO29CQUFHLE9BQVVzQixJQUFFO2NBQVcsT0FBT3FCO0FBQUMsY0FBRWpCLEtBQUtmLEdBQUV3QixHQUFFeEIsR0FBRVgsUUFBTUEsRUFBRWlDLFVBQVFYO0FBQUUsV0FBNzFFO0FBQWcyRTtRQUFFLE1BQUssQ0FBQ3RCLEdBQUVXLEdBQUV3QjtVQUFLO1VBQWEsSUFBSWIsSUFBRWEsRUFBRSxPQUFNTSxJQUFFTixFQUFFO1VBQU0sU0FBU087WUFBSXJCLEtBQUswbEQsV0FBUyxNQUFLMWxELEtBQUs0aEUsVUFBUSxNQUFLNWhFLEtBQUt5OUQsT0FBSyxNQUFLejlELEtBQUsyN0QsT0FBSyxNQUFLMzdELEtBQUs0N0QsT0FBSyxNQUFLNTdELEtBQUswdUQsV0FBUyxNQUFLMXVELEtBQUtrYixPQUFLO1lBQUtsYixLQUFLMDdELFNBQU8sTUFBSzE3RCxLQUFLNmhFLFFBQU0sTUFBSzdoRSxLQUFLOGhFLFdBQVMsTUFBSzloRSxLQUFLdVQsT0FBSyxNQUFLdlQsS0FBSytoRSxPQUFLO0FBQUk7VUFBQ3ppRSxFQUFFdUUsUUFBTTNELEdBQUVaLEVBQUVqQixVQUFRLFNBQVNNLEdBQUVXO1lBQUcsT0FBT1ksRUFBRXZCLElBQUUsSUFBRyxHQUFJTixRQUFRaUI7QUFBRSxhQUFFQSxFQUFFMGlFLGdCQUFjLFNBQVNyakUsR0FBRVc7WUFBRyxPQUFPWCxJQUFFdUIsRUFBRXZCLElBQUUsSUFBRyxHQUFJcWpFLGNBQWMxaUUsS0FBR0E7QUFBQyxhQUFFQSxFQUFFa0UsU0FBTyxTQUFTN0U7WUFBRyxPQUFPeUMsRUFBRTRsQyxTQUFTcm9DLE9BQUtBLElBQUV1QixFQUFFdkIsS0FBSUEsYUFBYTBDLElBQUUxQyxFQUFFNkUsV0FBU25DLEVBQUVvTyxVQUFVak0sT0FBT25ELEtBQUsxQjtBQUFFLGFBQUVXLEVBQUUyaUUsTUFBSTVnRTtVQUFFLElBQUlDLElBQUUscUJBQW9CRSxJQUFFLFlBQVdDLElBQUUsc0NBQXFDckMsSUFBRSxFQUFDLEtBQUksS0FBSSxLQUFJLE1BQUssS0FBSSxNQUFLa1UsT0FBTyxFQUFDLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxNQUFLLE1BQUssU0FBT3pSLElBQUUsRUFBQyxNQUFLeVIsT0FBT2xVLElBQUcyQixJQUFFLEVBQUMsS0FBSSxLQUFJLEtBQUksS0FBSSxNQUFLdVMsT0FBT3pSLElBQUdJLElBQUUsRUFBQyxLQUFJLEtBQUksT0FBS08sSUFBRSwwQkFBeUJyQixJQUFFLGdDQUErQmlELElBQUU7WUFBQzg5RCxhQUFXO1lBQUcsZ0JBQWM7YUFBSTdpRSxJQUFFO1lBQUM2aUUsYUFBVztZQUFHLGdCQUFjO2FBQUkzaUUsSUFBRTtZQUFDNGlFLE9BQUs7WUFBR0MsUUFBTTtZQUFHQyxNQUFJO1lBQUdDLFNBQU87WUFBR0MsT0FBSztZQUFHLFVBQVE7WUFBRyxXQUFTO1lBQUcsU0FBTztZQUFHLFlBQVU7WUFBRyxVQUFRO2FBQUl6OUQsSUFBRWhFLEVBQUU7VUFBTSxTQUFTWixFQUFFdkIsR0FBRVcsR0FBRXdCO1lBQUcsSUFBR25DLEtBQUd5QyxFQUFFK2xDLFNBQVN4b0MsTUFBSUEsYUFBYTBDLEdBQUUsT0FBTzFDO1lBQUUsSUFBSXNCLElBQUUsSUFBSW9CO1lBQUUsT0FBT3BCLEVBQUU0RCxNQUFNbEYsR0FBRVcsR0FBRXdCLElBQUdiO0FBQUM7VUFBQ29CLEVBQUVvTyxVQUFVNUwsUUFBTSxTQUFTbEYsR0FBRVcsR0FBRXdCO1lBQUcsS0FBSU0sRUFBRTRsQyxTQUFTcm9DLElBQUcsTUFBTSxJQUFJeUIsVUFBVSxrREFBZ0R6QjtZQUFHLElBQUkwQyxJQUFFMUMsRUFBRW1ELFFBQVEsTUFBS04sS0FBRyxNQUFJSCxLQUFHQSxJQUFFMUMsRUFBRW1ELFFBQVEsT0FBSyxNQUFJLEtBQUkxQyxJQUFFVCxFQUFFa08sTUFBTXJMO1lBQUdwQyxFQUFFLEtBQUdBLEVBQUUsR0FBR29GLFFBQVEsT0FBTTtZQUFLLElBQUl0RSxJQUFFdkIsSUFBRVMsRUFBRTRFLEtBQUt4QztZQUFHLElBQUd0QixJQUFFQSxFQUFFMmhDLFNBQVEvZ0MsS0FBRyxNQUFJbkMsRUFBRWtPLE1BQU0sS0FBS3RNLFFBQU87Y0FBQyxJQUFJMkUsSUFBRXpELEVBQUV3cEQsS0FBSy9xRDtjQUFHLElBQUdnRixHQUFFLE9BQU9sRixLQUFLdVQsT0FBS3JULEdBQUVGLEtBQUsraEUsT0FBSzdoRSxHQUFFRixLQUFLOGhFLFdBQVM1OEQsRUFBRSxJQUFHQSxFQUFFLE1BQUlsRixLQUFLMDdELFNBQU94MkQsRUFBRSxJQUFHbEYsS0FBSzZoRSxRQUFNdmlFLElBQUV3RixFQUFFakIsTUFBTTdELEtBQUswN0QsT0FBTzNxQyxPQUFPLE1BQUkvd0IsS0FBSzA3RCxPQUFPM3FDLE9BQU8sTUFBSXp4QixNQUFJVSxLQUFLMDdELFNBQU87Y0FBRzE3RCxLQUFLNmhFLFFBQU0sQ0FBQyxJQUFHN2hFO0FBQUk7WUFBQyxJQUFJUixJQUFFOEIsRUFBRTJwRCxLQUFLL3FEO1lBQUcsSUFBR1YsR0FBRTtjQUFDLElBQUk0SCxLQUFHNUgsSUFBRUEsRUFBRSxJQUFJb047Y0FBYzVNLEtBQUswbEQsV0FBU3QrQyxHQUFFbEgsSUFBRUEsRUFBRTZ3QixPQUFPdnhCLEVBQUVlO0FBQU87WUFBQyxJQUFHTyxLQUFHdEIsS0FBR1UsRUFBRThDLE1BQU0seUJBQXdCO2NBQUMsSUFBSXFFLElBQUUsU0FBT25ILEVBQUU2d0IsT0FBTyxHQUFFO2VBQUkxcEIsS0FBRzdILEtBQUdILEVBQUVHLE9BQUtVLElBQUVBLEVBQUU2d0IsT0FBTyxJQUFHL3dCLEtBQUs0aEUsV0FBUTtBQUFHO1lBQUMsS0FBSXZpRSxFQUFFRyxPQUFLNkgsS0FBRzdILE1BQUlELEVBQUVDLEtBQUk7Y0FBQyxLQUFJLElBQUlzSSxHQUFFRSxHQUFFQyxLQUFHLEdBQUUvSixJQUFFLEdBQUVBLElBQUUrRCxFQUFFMUIsUUFBT3JDLE1BQUssT0FBSzJLLElBQUUzSSxFQUFFNEIsUUFBUUcsRUFBRS9ELFVBQVEsTUFBSStKLEtBQUdZLElBQUVaLE9BQUtBLElBQUVZO2NBQUcsTUFBSyxPQUFLYixLQUFHLE1BQUlDLElBQUUvSCxFQUFFZ2hDLFlBQVksT0FBS2hoQyxFQUFFZ2hDLFlBQVksS0FBSWo1QixRQUFNSCxJQUFFNUgsRUFBRTZGLE1BQU0sR0FBRWlDLElBQUc5SCxJQUFFQSxFQUFFNkYsTUFBTWlDLElBQUUsSUFBR2hJLEtBQUt5OUQsT0FBS3pjLG1CQUFtQmw1QztjQUFJRyxLQUFHLEdBQUUvSixJQUFFLEdBQUVBLElBQUU2QyxFQUFFUixRQUFPckMsS0FBSTtnQkFBQyxJQUFJMks7aUJBQUcsT0FBS0EsSUFBRTNJLEVBQUU0QixRQUFRZixFQUFFN0MsVUFBUSxNQUFJK0osS0FBR1ksSUFBRVosT0FBS0EsSUFBRVk7QUFBRTtlQUFFLE1BQUlaLE1BQUlBLElBQUUvSCxFQUFFSyxTQUFRUCxLQUFLMjdELE9BQUt6N0QsRUFBRTZGLE1BQU0sR0FBRWtDLElBQUcvSCxJQUFFQSxFQUFFNkYsTUFBTWtDLElBQUdqSSxLQUFLd2lFLGFBQVl4aUUsS0FBSzB1RCxXQUFTMXVELEtBQUswdUQsWUFBVTtjQUFHLElBQUkxbEQsSUFBRSxRQUFNaEosS0FBSzB1RCxTQUFTLE1BQUksUUFBTTF1RCxLQUFLMHVELFNBQVMxdUQsS0FBSzB1RCxTQUFTbnVELFNBQU87Y0FBRyxLQUFJeUksR0FBRSxLQUFJLElBQUlFLElBQUVsSixLQUFLMHVELFNBQVM3aEQsTUFBTSxPQUFNMUQsS0FBR2pMLElBQUUsR0FBRWdMLEVBQUUzSSxTQUFRckMsSUFBRWlMLEdBQUVqTCxLQUFJO2dCQUFDLElBQUlrTCxJQUFFRixFQUFFaEw7Z0JBQUcsSUFBR2tMLE1BQUlBLEVBQUVwRyxNQUFNUixJQUFHO2tCQUFDLEtBQUksSUFBSThHLElBQUUsSUFBR0MsSUFBRSxHQUFFQyxJQUFFSixFQUFFN0ksUUFBT2dKLElBQUVDLEdBQUVELEtBQUlILEVBQUV1QyxXQUFXcEMsS0FBRyxNQUFJRCxLQUFHLE1BQUlBLEtBQUdGLEVBQUVHO2tCQUFHLEtBQUlELEVBQUV0RyxNQUFNUixJQUFHO29CQUFDLElBQUk2SCxJQUFFbkIsRUFBRW5ELE1BQU0sR0FBRTdILElBQUdvTSxJQUFFcEIsRUFBRW5ELE1BQU03SCxJQUFFLElBQUdxTSxJQUFFbkIsRUFBRXBHLE1BQU03QjtvQkFBR29KLE1BQUlGLEVBQUU3SixLQUFLK0osRUFBRSxLQUFJRCxFQUFFcUYsUUFBUXBGLEVBQUUsTUFBS0QsRUFBRS9KLFdBQVNMLElBQUUsTUFBSW9LLEVBQUV0RyxLQUFLLE9BQUs5RCxJQUFHRixLQUFLMHVELFdBQVNya0QsRUFBRXJHLEtBQUs7b0JBQUs7QUFBSztBQUFDO0FBQUM7Y0FBQ2hFLEtBQUswdUQsU0FBU251RCxTQUFPLE1BQUlQLEtBQUswdUQsV0FBUyxLQUFHMXVELEtBQUswdUQsV0FBUzF1RCxLQUFLMHVELFNBQVM5aEQsZUFBYzVELE1BQUloSixLQUFLMHVELFdBQVN6dUQsRUFBRXloRSxRQUFRMWhFLEtBQUswdUQ7Y0FBVyxJQUFJbGtELElBQUV4SyxLQUFLNDdELE9BQUssTUFBSTU3RCxLQUFLNDdELE9BQUssSUFBR3Z3RCxJQUFFckwsS0FBSzB1RCxZQUFVO2NBQUcxdUQsS0FBSzI3RCxPQUFLdHdELElBQUViLEdBQUV4SyxLQUFLK2hFLFFBQU0vaEUsS0FBSzI3RCxNQUFLM3lELE1BQUloSixLQUFLMHVELFdBQVMxdUQsS0FBSzB1RCxTQUFTMzlCLE9BQU8sR0FBRS93QixLQUFLMHVELFNBQVNudUQsU0FBTyxJQUFHLFFBQU1MLEVBQUUsT0FBS0EsSUFBRSxNQUFJQTtBQUFHO1lBQUMsS0FBSWtFLEVBQUVnRCxJQUFHLEtBQUlsSixJQUFFLEdBQUVpTCxJQUFFdEgsRUFBRXRCLFFBQU9yQyxJQUFFaUwsR0FBRWpMLEtBQUk7Y0FBQyxJQUFJMk4sSUFBRWhLLEVBQUUzRDtjQUFHLEtBQUksTUFBSWdDLEVBQUU0QixRQUFRK0osSUFBRztnQkFBQyxJQUFJTCxJQUFFMDFDLG1CQUFtQnIxQztnQkFBR0wsTUFBSUssTUFBSUwsSUFBRWkzRCxPQUFPNTJELEtBQUkzTCxJQUFFQSxFQUFFMk0sTUFBTWhCLEdBQUc3SCxLQUFLd0g7QUFBRTtBQUFDO1lBQUMsSUFBSU0sSUFBRTVMLEVBQUU0QixRQUFRO2FBQU0sTUFBSWdLLE1BQUk5TCxLQUFLa2IsT0FBS2hiLEVBQUU2d0IsT0FBT2psQixJQUFHNUwsSUFBRUEsRUFBRTZGLE1BQU0sR0FBRStGO1lBQUksSUFBSUUsSUFBRTlMLEVBQUU0QixRQUFRO1lBQUssS0FBSSxNQUFJa0ssS0FBR2hNLEtBQUswN0QsU0FBT3g3RCxFQUFFNndCLE9BQU8va0IsSUFBR2hNLEtBQUs2aEUsUUFBTTNoRSxFQUFFNndCLE9BQU8va0IsSUFBRSxJQUFHMU0sTUFBSVUsS0FBSzZoRSxRQUFNLzhELEVBQUVqQixNQUFNN0QsS0FBSzZoRSxTQUFRM2hFLElBQUVBLEVBQUU2RixNQUFNLEdBQUVpRyxNQUFJMU0sTUFBSVUsS0FBSzA3RCxTQUFPO1lBQUcxN0QsS0FBSzZoRSxRQUFNLENBQUMsSUFBRzNoRSxNQUFJRixLQUFLOGhFLFdBQVM1aEUsSUFBR1gsRUFBRTZILE1BQUlwSCxLQUFLMHVELGFBQVcxdUQsS0FBSzhoRSxhQUFXOWhFLEtBQUs4aEUsV0FBUyxNQUFLOWhFLEtBQUs4aEUsWUFBVTloRSxLQUFLMDdELFFBQU87Y0FBQ2x4RCxJQUFFeEssS0FBSzhoRSxZQUFVO2NBQUcsSUFBSTcxRCxJQUFFak0sS0FBSzA3RCxVQUFRO2NBQUcxN0QsS0FBS3VULE9BQUsvSSxJQUFFeUI7QUFBQztZQUFDLE9BQU9qTSxLQUFLK2hFLE9BQUsvaEUsS0FBS3dELFVBQVN4RDtBQUFJLGFBQUVxQixFQUFFb08sVUFBVWpNLFNBQU87WUFBVyxJQUFJN0UsSUFBRXFCLEtBQUt5OUQsUUFBTTtZQUFHOStELE1BQUlBLEtBQUdBLElBQUV1aUQsbUJBQW1CdmlELElBQUk2RixRQUFRLFFBQU8sTUFBSzdGLEtBQUc7WUFBSyxJQUFJVyxJQUFFVSxLQUFLMGxELFlBQVUsSUFBRzVrRCxJQUFFZCxLQUFLOGhFLFlBQVUsSUFBRzdoRSxJQUFFRCxLQUFLa2IsUUFBTSxJQUFHN1osS0FBRSxHQUFHQyxJQUFFO1lBQUd0QixLQUFLMjdELE9BQUt0NkQsSUFBRTFDLElBQUVxQixLQUFLMjdELE9BQUszN0QsS0FBSzB1RCxhQUFXcnRELElBQUUxQyxNQUFJLE1BQUlxQixLQUFLMHVELFNBQVM1c0QsUUFBUSxPQUFLOUIsS0FBSzB1RCxXQUFTLE1BQUkxdUQsS0FBSzB1RCxXQUFTO1lBQUsxdUQsS0FBSzQ3RCxTQUFPdjZELEtBQUcsTUFBSXJCLEtBQUs0N0QsUUFBTzU3RCxLQUFLNmhFLFNBQU96Z0UsRUFBRStsQyxTQUFTbm5DLEtBQUs2aEUsVUFBUTMvRCxPQUFPOFAsS0FBS2hTLEtBQUs2aEUsT0FBT3RoRSxXQUFTZSxJQUFFd0QsRUFBRWhCLFVBQVU5RCxLQUFLNmhFO1lBQVEsSUFBSXJnRSxJQUFFeEIsS0FBSzA3RCxVQUFRcDZELEtBQUcsTUFBSUEsS0FBRztZQUFHLE9BQU9oQyxLQUFHLFFBQU1BLEVBQUV5eEIsUUFBUSxPQUFLenhCLEtBQUcsTUFBS1UsS0FBSzRoRSxhQUFXdGlFLEtBQUdDLEVBQUVELFFBQUssTUFBSytCLEtBQUdBLElBQUUsUUFBTUEsS0FBRyxLQUFJUCxLQUFHLFFBQU1BLEVBQUU0L0MsT0FBTyxPQUFLNS9DLElBQUUsTUFBSUEsTUFBSU8sTUFBSUEsSUFBRTtZQUFJcEIsS0FBRyxRQUFNQSxFQUFFeWdELE9BQU8sT0FBS3pnRCxJQUFFLE1BQUlBLElBQUd1QixLQUFHLFFBQU1BLEVBQUVrL0MsT0FBTyxPQUFLbC9DLElBQUUsTUFBSUEsSUFBR2xDLElBQUUrQixLQUFHUCxJQUFFQSxFQUFFMEQsUUFBUSxVQUFRLFNBQVU3RjtjQUFHLE9BQU91aUQsbUJBQW1CdmlEO0FBQUcsb0JBQUs2QyxJQUFFQSxFQUFFZ0QsUUFBUSxLQUFJLFVBQVF2RTtBQUFDLGFBQUVvQixFQUFFb08sVUFBVXBSLFVBQVEsU0FBU007WUFBRyxPQUFPcUIsS0FBS2dpRSxjQUFjOWhFLEVBQUV2QixJQUFFLElBQUcsSUFBSzZFO0FBQVEsYUFBRW5DLEVBQUVvTyxVQUFVdXlELGdCQUFjLFNBQVNyakU7WUFBRyxJQUFHeUMsRUFBRTRsQyxTQUFTcm9DLElBQUc7Y0FBQyxJQUFJVyxJQUFFLElBQUkrQjtjQUFFL0IsRUFBRXVFLE1BQU1sRixJQUFFLElBQUcsSUFBSUEsSUFBRVc7QUFBQztZQUFDLEtBQUksSUFBSXdCLElBQUUsSUFBSU8sR0FBRXBCLElBQUVpQyxPQUFPOFAsS0FBS2hTLE9BQU1zQixJQUFFLEdBQUVBLElBQUVyQixFQUFFTSxRQUFPZSxLQUFJO2NBQUMsSUFBSUUsSUFBRXZCLEVBQUVxQjtjQUFHUixFQUFFVSxLQUFHeEIsS0FBS3dCO0FBQUU7WUFBQyxJQUFHVixFQUFFb2EsT0FBS3ZjLEVBQUV1YyxNQUFLLE9BQUt2YyxFQUFFb2pFLE1BQUssT0FBT2poRSxFQUFFaWhFLE9BQUtqaEUsRUFBRTBDLFVBQVMxQztZQUFFLElBQUduQyxFQUFFaWpFLFlBQVVqakUsRUFBRSttRCxVQUFTO2NBQUMsS0FBSSxJQUFJamtELElBQUVTLE9BQU84UCxLQUFLclQsSUFBR1MsSUFBRSxHQUFFQSxJQUFFcUMsRUFBRWxCLFFBQU9uQixLQUFJO2dCQUFDLElBQUl5QyxJQUFFSixFQUFFckM7Z0JBQUcsZUFBYXlDLE1BQUlmLEVBQUVlLEtBQUdsRCxFQUFFa0Q7QUFBRztjQUFDLE9BQU90QyxFQUFFdUIsRUFBRTRrRCxhQUFXNWtELEVBQUU0dEQsYUFBVzV0RCxFQUFFZ2hFLGFBQVdoaEUsRUFBRXlTLE9BQUt6UyxFQUFFZ2hFLFdBQVMsTUFBS2hoRSxFQUFFaWhFLE9BQUtqaEUsRUFBRTBDLFVBQVMxQztBQUFDO1lBQUMsSUFBR25DLEVBQUUrbUQsWUFBVS9tRCxFQUFFK21ELGFBQVc1a0QsRUFBRTRrRCxVQUFTO2NBQUMsS0FBSW5tRCxFQUFFWixFQUFFK21ELFdBQVU7Z0JBQUMsS0FBSSxJQUFJM2tELElBQUVtQixPQUFPOFAsS0FBS3JULElBQUdzRCxJQUFFLEdBQUVBLElBQUVsQixFQUFFUixRQUFPMEIsS0FBSTtrQkFBQyxJQUFJTyxJQUFFekIsRUFBRWtCO2tCQUFHbkIsRUFBRTBCLEtBQUc3RCxFQUFFNkQ7QUFBRTtnQkFBQyxPQUFPMUIsRUFBRWloRSxPQUFLamhFLEVBQUUwQyxVQUFTMUM7QUFBQztjQUFDLElBQUdBLEVBQUU0a0QsV0FBUy9tRCxFQUFFK21ELFVBQVMvbUQsRUFBRWc5RCxRQUFNdDhELEVBQUVWLEVBQUUrbUQsV0FBVTVrRCxFQUFFZ2hFLFdBQVNuakUsRUFBRW1qRSxlQUFhO2dCQUFDLEtBQUksSUFBSTNnRSxLQUFHeEMsRUFBRW1qRSxZQUFVLElBQUlqMUQsTUFBTSxNQUFLMUwsRUFBRVosWUFBVTVCLEVBQUVnOUQsT0FBS3g2RCxFQUFFOHRCO2dCQUFXdHdCLEVBQUVnOUQsU0FBT2g5RCxFQUFFZzlELE9BQUssS0FBSWg5RCxFQUFFK3ZELGFBQVcvdkQsRUFBRSt2RCxXQUFTLEtBQUksT0FBS3Z0RCxFQUFFLE1BQUlBLEVBQUV3TyxRQUFRLEtBQUl4TyxFQUFFWixTQUFPLEtBQUdZLEVBQUV3TyxRQUFRLEtBQUk3TyxFQUFFZ2hFLFdBQVMzZ0UsRUFBRTZDLEtBQUs7QUFBSTtjQUFDLElBQUdsRCxFQUFFNDZELFNBQU8vOEQsRUFBRSs4RCxRQUFPNTZELEVBQUUrZ0UsUUFBTWxqRSxFQUFFa2pFLE9BQU0vZ0UsRUFBRTY2RCxPQUFLaDlELEVBQUVnOUQsUUFBTSxJQUFHNzZELEVBQUUyOEQsT0FBSzkrRCxFQUFFOCtELE1BQUszOEQsRUFBRTR0RCxXQUFTL3ZELEVBQUUrdkQsWUFBVS92RCxFQUFFZzlELE1BQUs3NkQsRUFBRTg2RCxPQUFLajlELEVBQUVpOUQ7Y0FBSzk2RCxFQUFFZ2hFLFlBQVVoaEUsRUFBRTQ2RCxRQUFPO2dCQUFDLElBQUl0M0QsSUFBRXRELEVBQUVnaEUsWUFBVSxJQUFHaDlELElBQUVoRSxFQUFFNDZELFVBQVE7Z0JBQUc1NkQsRUFBRXlTLE9BQUtuUCxJQUFFVTtBQUFDO2NBQUMsT0FBT2hFLEVBQUU4Z0UsVUFBUTlnRSxFQUFFOGdFLFdBQVNqakUsRUFBRWlqRSxTQUFROWdFLEVBQUVpaEUsT0FBS2poRSxFQUFFMEMsVUFBUzFDO0FBQUM7WUFBQyxJQUFJWixJQUFFWSxFQUFFZ2hFLFlBQVUsUUFBTWhoRSxFQUFFZ2hFLFNBQVNwaEIsT0FBTyxJQUFHeDdDLElBQUV2RyxFQUFFZzlELFFBQU1oOUQsRUFBRW1qRSxZQUFVLFFBQU1uakUsRUFBRW1qRSxTQUFTcGhCLE9BQU8sSUFBR2xoRCxJQUFFMEYsS0FBR2hGLEtBQUdZLEVBQUU2NkQsUUFBTWg5RCxFQUFFbWpFLFVBQVMxNkQsSUFBRTVILEdBQUU2SCxJQUFFdkcsRUFBRWdoRSxZQUFVaGhFLEVBQUVnaEUsU0FBU2oxRCxNQUFNLFFBQU0sSUFBRy9FLEtBQUczRyxJQUFFeEMsRUFBRW1qRSxZQUFVbmpFLEVBQUVtakUsU0FBU2oxRCxNQUFNLFFBQU07WUFBRy9MLEVBQUU0a0QsYUFBV25tRCxFQUFFdUIsRUFBRTRrRDtZQUFXLElBQUc1OUMsTUFBSWhILEVBQUU0dEQsV0FBUyxJQUFHNXRELEVBQUU4NkQsT0FBSyxNQUFLOTZELEVBQUU2NkQsU0FBTyxPQUFLdDBELEVBQUUsS0FBR0EsRUFBRSxLQUFHdkcsRUFBRTY2RCxPQUFLdDBELEVBQUVzSSxRQUFRN08sRUFBRTY2RCxRQUFPNzZELEVBQUU2NkQsT0FBSyxJQUFHaDlELEVBQUUrbUQsYUFBVy9tRCxFQUFFK3ZELFdBQVM7WUFBSy92RCxFQUFFaTlELE9BQUssTUFBS2o5RCxFQUFFZzlELFNBQU8sT0FBS3g2RCxFQUFFLEtBQUdBLEVBQUUsS0FBR3hDLEVBQUVnOUQsT0FBS3g2RCxFQUFFd08sUUFBUWhSLEVBQUVnOUQsUUFBT2g5RCxFQUFFZzlELE9BQUssT0FBTW44RCxJQUFFQSxNQUFJLE9BQUsyQixFQUFFLE1BQUksT0FBS2tHLEVBQUU7WUFBS25DLEdBQUVwRSxFQUFFNjZELE9BQUtoOUQsRUFBRWc5RCxRQUFNLE9BQUtoOUQsRUFBRWc5RCxPQUFLaDlELEVBQUVnOUQsT0FBSzc2RCxFQUFFNjZELE1BQUs3NkQsRUFBRTR0RCxXQUFTL3ZELEVBQUUrdkQsWUFBVSxPQUFLL3ZELEVBQUUrdkQsV0FBUy92RCxFQUFFK3ZELFdBQVM1dEQsRUFBRTR0RDtZQUFTNXRELEVBQUU0NkQsU0FBTy84RCxFQUFFKzhELFFBQU81NkQsRUFBRStnRSxRQUFNbGpFLEVBQUVrakUsT0FBTXg2RCxJQUFFbEcsUUFBTyxJQUFHQSxFQUFFWixRQUFPOEcsTUFBSUEsSUFBRSxLQUFJQSxFQUFFL0csT0FBTStHLElBQUVBLEVBQUVpTSxPQUFPblMsSUFBR0wsRUFBRTQ2RCxTQUFPLzhELEVBQUUrOEQ7WUFBTzU2RCxFQUFFK2dFLFFBQU1sakUsRUFBRWtqRSxZQUFXLEtBQUl6Z0UsRUFBRTBsQyxrQkFBa0Jub0MsRUFBRSs4RCxTQUFRLE9BQU81ekQsTUFBSWhILEVBQUU0dEQsV0FBUzV0RCxFQUFFNjZELE9BQUt0MEQsRUFBRTRuQixVQUFTam1CLE9BQUtsSSxFQUFFNjZELFFBQU03NkQsRUFBRTY2RCxLQUFLNzVELFFBQVEsT0FBSyxNQUFJaEIsRUFBRTY2RCxLQUFLOXVELE1BQU0sVUFBUS9MLEVBQUUyOEQsT0FBS3owRCxFQUFFaW1CO1lBQVFudUIsRUFBRTY2RCxPQUFLNzZELEVBQUU0dEQsV0FBUzFsRCxFQUFFaW1CLFdBQVVudUIsRUFBRTQ2RCxTQUFPLzhELEVBQUUrOEQsUUFBTzU2RCxFQUFFK2dFLFFBQU1sakUsRUFBRWtqRSxPQUFNemdFLEVBQUV5bEMsT0FBTy9sQyxFQUFFZ2hFLGFBQVcxZ0UsRUFBRXlsQyxPQUFPL2xDLEVBQUU0NkQsWUFBVTU2RCxFQUFFeVMsUUFBTXpTLEVBQUVnaEUsV0FBU2hoRSxFQUFFZ2hFLFdBQVMsT0FBS2hoRSxFQUFFNDZELFNBQU81NkQsRUFBRTQ2RCxTQUFPO1lBQUs1NkQsRUFBRWloRSxPQUFLamhFLEVBQUUwQyxVQUFTMUM7WUFBRSxLQUFJdUcsRUFBRTlHLFFBQU8sT0FBT08sRUFBRWdoRSxXQUFTLE1BQUtoaEUsRUFBRTQ2RCxTQUFPNTZELEVBQUV5UyxPQUFLLE1BQUl6UyxFQUFFNDZELFNBQU81NkQsRUFBRXlTLE9BQUssTUFBS3pTLEVBQUVpaEUsT0FBS2poRSxFQUFFMEMsVUFBUzFDO1lBQUUsS0FBSSxJQUFJa0gsSUFBRVgsRUFBRXRCLE9BQU8sR0FBRyxJQUFHa0MsS0FBR25ILEVBQUU2NkQsUUFBTWg5RCxFQUFFZzlELFFBQU10MEQsRUFBRTlHLFNBQU8sT0FBSyxRQUFNeUgsS0FBRyxTQUFPQSxNQUFJLE9BQUtBLEdBQUU5SixJQUFFLEdBQUUySyxJQUFFeEIsRUFBRTlHLFFBQU9zSSxLQUFHLEdBQUVBLEtBQUksU0FBT2IsSUFBRVgsRUFBRXdCLE1BQUl4QixFQUFFZ2xCLE9BQU94akIsR0FBRSxLQUFHLFNBQU9iLEtBQUdYLEVBQUVnbEIsT0FBT3hqQixHQUFFO1lBQUczSyxPQUFLQSxNQUFJbUosRUFBRWdsQixPQUFPeGpCLEdBQUUsSUFBRzNLO1lBQUssS0FBSXNCLE1BQUk0SCxHQUFFLE1BQUtsSixLQUFJQSxHQUFFbUosRUFBRXNJLFFBQVE7YUFBT25RLEtBQUcsT0FBSzZILEVBQUUsTUFBSUEsRUFBRSxNQUFJLFFBQU1BLEVBQUUsR0FBR3E1QyxPQUFPLE1BQUlyNUMsRUFBRXNJLFFBQVEsS0FBSTFILEtBQUcsUUFBTVosRUFBRXJELEtBQUssS0FBSytzQixRQUFRLE1BQUkxcEIsRUFBRTdHLEtBQUs7WUFBSSxJQUFJd0ksR0FBRUUsSUFBRSxPQUFLN0IsRUFBRSxNQUFJQSxFQUFFLE1BQUksUUFBTUEsRUFBRSxHQUFHcTVDLE9BQU87WUFBRyxPQUFPNTRDLE1BQUloSCxFQUFFNHRELFdBQVM1dEQsRUFBRTY2RCxPQUFLenlELElBQUUsS0FBRzdCLEVBQUU5RyxTQUFPOEcsRUFBRTRuQixVQUFRLEtBQUlqbUIsT0FBS2xJLEVBQUU2NkQsUUFBTTc2RCxFQUFFNjZELEtBQUs3NUQsUUFBUSxPQUFLLE1BQUloQixFQUFFNjZELEtBQUs5dUQsTUFBTSxVQUFRL0wsRUFBRTI4RCxPQUFLejBELEVBQUVpbUI7WUFBUW51QixFQUFFNjZELE9BQUs3NkQsRUFBRTR0RCxXQUFTMWxELEVBQUVpbUIsWUFBV3p2QixJQUFFQSxLQUFHc0IsRUFBRTY2RCxRQUFNdDBELEVBQUU5RyxZQUFVMkksS0FBRzdCLEVBQUVzSSxRQUFRLEtBQUl0SSxFQUFFOUcsU0FBT08sRUFBRWdoRSxXQUFTejZELEVBQUVyRCxLQUFLLFFBQU1sRCxFQUFFZ2hFLFdBQVM7WUFBS2hoRSxFQUFFeVMsT0FBSyxPQUFNblMsRUFBRXlsQyxPQUFPL2xDLEVBQUVnaEUsYUFBVzFnRSxFQUFFeWxDLE9BQU8vbEMsRUFBRTQ2RCxZQUFVNTZELEVBQUV5UyxRQUFNelMsRUFBRWdoRSxXQUFTaGhFLEVBQUVnaEUsV0FBUyxPQUFLaGhFLEVBQUU0NkQsU0FBTzU2RCxFQUFFNDZELFNBQU87WUFBSzU2RCxFQUFFMjhELE9BQUs5K0QsRUFBRTgrRCxRQUFNMzhELEVBQUUyOEQsTUFBSzM4RCxFQUFFOGdFLFVBQVE5Z0UsRUFBRThnRSxXQUFTampFLEVBQUVpakUsU0FBUTlnRSxFQUFFaWhFLE9BQUtqaEUsRUFBRTBDLFVBQVMxQztBQUFDLGFBQUVPLEVBQUVvTyxVQUFVK3lELFlBQVU7WUFBVyxJQUFJN2pFLElBQUVxQixLQUFLMjdELE1BQUtyOEQsSUFBRWtDLEVBQUV5cEQsS0FBS3RzRDtZQUFHVyxNQUFJLFNBQU9BLElBQUVBLEVBQUUsUUFBTVUsS0FBSzQ3RCxPQUFLdDhELEVBQUV5eEIsT0FBTyxLQUFJcHlCLElBQUVBLEVBQUVveUIsT0FBTyxHQUFFcHlCLEVBQUU0QixTQUFPakIsRUFBRWlCLFVBQVM1QixNQUFJcUIsS0FBSzB1RCxXQUFTL3ZEO0FBQUU7QUFBQTtRQUFHLE1BQUtBO1VBQUk7VUFBYUEsRUFBRWlDLFVBQVE7WUFBQ29tQyxVQUFTLFNBQVNyb0M7Y0FBRyxPQUFNLG1CQUFpQkE7QUFBQztZQUFFd29DLFVBQVMsU0FBU3hvQztjQUFHLE9BQU0sbUJBQWlCQSxLQUFHLFNBQU9BO0FBQUM7WUFBRWtvQyxRQUFPLFNBQVNsb0M7Y0FBRyxPQUFPLFNBQU9BO0FBQUM7WUFBRW1vQyxtQkFBa0IsU0FBU25vQztjQUFHLE9BQU8sUUFBTUE7QUFBQzs7QUFBQztRQUFHLE1BQUssQ0FBQ0EsR0FBRVc7V0FBTSxTQUFTWDtZQUFHLElBQUlXLEdBQUV3QixHQUFFYixHQUFFbUIsSUFBRTJDLE9BQU82SDtZQUFhLFNBQVN2SyxFQUFFMUM7Y0FBRyxLQUFJLElBQUlXLEdBQUV3QixHQUFFYixJQUFFLElBQUdtQixJQUFFLEdBQUVDLElBQUUxQyxFQUFFNEIsUUFBT2EsSUFBRUMsTUFBSS9CLElBQUVYLEVBQUVnTixXQUFXdkssU0FBTyxTQUFPOUIsS0FBRyxTQUFPOEIsSUFBRUMsSUFBRSxVQUFRLFNBQU9QLElBQUVuQyxFQUFFZ04sV0FBV3ZLLFNBQU9uQixFQUFFTyxPQUFPLE9BQUtsQixNQUFJLE9BQUssT0FBS3dCLEtBQUcsVUFBUWIsRUFBRU8sS0FBS2xCO2NBQUc4QixPQUFLbkIsRUFBRU8sS0FBS2xCO2NBQUcsT0FBT1c7QUFBQztZQUFDLFNBQVNxQixFQUFFM0M7Y0FBRyxJQUFHQSxLQUFHLFNBQU9BLEtBQUcsT0FBTSxNQUFNOEosTUFBTSxzQkFBb0I5SixFQUFFK1AsU0FBUyxJQUFJNUIsZ0JBQWM7QUFBeUI7WUFBQyxTQUFTdEwsRUFBRTdDLEdBQUVXO2NBQUcsT0FBTzhCLEVBQUV6QyxLQUFHVyxJQUFFLEtBQUc7QUFBSTtZQUFDLFNBQVNtQyxFQUFFOUM7Y0FBRyxJQUFHLE1BQUksYUFBV0EsSUFBRyxPQUFPeUMsRUFBRXpDO2NBQUcsSUFBSVcsSUFBRTtjQUFHLE9BQU8sTUFBSSxhQUFXWCxLQUFHVyxJQUFFOEIsRUFBRXpDLEtBQUcsSUFBRSxLQUFHLE9BQUssTUFBSSxhQUFXQSxNQUFJMkMsRUFBRTNDLElBQUdXLElBQUU4QixFQUFFekMsS0FBRyxLQUFHLEtBQUcsTUFBS1csS0FBR2tDLEVBQUU3QyxHQUFFLE1BQUksTUFBSSxhQUFXQSxPQUFLVyxJQUFFOEIsRUFBRXpDLEtBQUcsS0FBRyxJQUFFO2NBQUtXLEtBQUdrQyxFQUFFN0MsR0FBRSxLQUFJVyxLQUFHa0MsRUFBRTdDLEdBQUUsS0FBSVcsSUFBRThCLEVBQUUsS0FBR3pDLElBQUU7QUFBSTtZQUFDLFNBQVNTO2NBQUksSUFBR2EsS0FBR2EsR0FBRSxNQUFNMkgsTUFBTTtjQUFzQixJQUFJOUosSUFBRSxNQUFJVyxFQUFFVztjQUFHLElBQUdBLEtBQUksUUFBTSxNQUFJdEIsSUFBRyxPQUFPLEtBQUdBO2NBQUUsTUFBTThKLE1BQU07QUFBNEI7WUFBQyxTQUFTNUc7Y0FBSSxJQUFJbEQsR0FBRXlDO2NBQUUsSUFBR25CLElBQUVhLEdBQUUsTUFBTTJILE1BQU07Y0FBc0IsSUFBR3hJLEtBQUdhLEdBQUUsUUFBTTtjQUFHLElBQUduQyxJQUFFLE1BQUlXLEVBQUVXLElBQUdBLEtBQUksTUFBSSxNQUFJdEIsSUFBRyxPQUFPQTtjQUFFLElBQUcsUUFBTSxNQUFJQSxJQUFHO2dCQUFDLEtBQUl5QyxLQUFHLEtBQUd6QyxNQUFJLElBQUVTLFFBQU0sS0FBSSxPQUFPZ0M7Z0JBQUUsTUFBTXFILE1BQU07QUFBNEI7Y0FBQyxJQUFHLFFBQU0sTUFBSTlKLElBQUc7Z0JBQUMsS0FBSXlDLEtBQUcsS0FBR3pDLE1BQUksS0FBR1MsT0FBSyxJQUFFQSxRQUFNLE1BQUssT0FBT2tDLEVBQUVGLElBQUdBO2dCQUFFLE1BQU1xSCxNQUFNO0FBQTRCO2NBQUMsSUFBRyxRQUFNLE1BQUk5SixPQUFLeUMsS0FBRyxJQUFFekMsTUFBSSxLQUFHUyxPQUFLLEtBQUdBLE9BQUssSUFBRUEsUUFBTSxTQUFPZ0MsS0FBRyxTQUFRLE9BQU9BO2NBQUUsTUFBTXFILE1BQU07QUFBeUI7WUFBQzlKLEVBQUVzVCxVQUFRLFNBQVF0VCxFQUFFNkksU0FBTyxTQUFTN0k7Y0FBRyxLQUFJLElBQUlXLElBQUUrQixFQUFFMUMsSUFBR21DLElBQUV4QixFQUFFaUIsUUFBT04sS0FBRyxHQUFFbUIsSUFBRSxNQUFLbkIsSUFBRWEsS0FBR00sS0FBR0ssRUFBRW5DLEVBQUVXO2NBQUksT0FBT21CO0FBQUMsZUFBRXpDLEVBQUVnSixTQUFPLFNBQVNoSjtjQUFHVyxJQUFFK0IsRUFBRTFDLElBQUdtQyxJQUFFeEIsRUFBRWlCLFFBQU9OLElBQUU7Y0FBRSxLQUFJLElBQUlxQixHQUFFRSxJQUFFLEtBQUcsT0FBTUYsSUFBRU8sUUFBTUwsRUFBRWhCLEtBQUtjO2NBQUcsT0FBTyxTQUFTM0M7Z0JBQUcsS0FBSSxJQUFJVyxHQUFFd0IsSUFBRW5DLEVBQUU0QixRQUFPTixLQUFHLEdBQUVvQixJQUFFLE1BQUtwQixJQUFFYSxNQUFJeEIsSUFBRVgsRUFBRXNCLE1BQUksVUFBUW9CLEtBQUdELEdBQUc5QixLQUFHLFdBQVMsS0FBRyxPQUFLO2dCQUFPQSxJQUFFLFFBQU0sT0FBS0EsSUFBRytCLEtBQUdELEVBQUU5QjtnQkFBRyxPQUFPK0I7QUFBQyxlQUFwSSxDQUFzSUc7QUFBRTtBQUFDLFdBQW5nRCxDQUFxZ0RsQztBQUFDO1FBQUcsTUFBSyxDQUFDWCxHQUFFVyxHQUFFd0I7VUFBSyxTQUFTYixFQUFFdEI7WUFBRztjQUFJLEtBQUltQyxFQUFFdkIsRUFBRW1zRCxjQUFhLFFBQU07QUFBb0IsY0FBakIsT0FBTS9zRDtjQUFHLFFBQU07QUFBRTtZQUFDLElBQUlXLElBQUV3QixFQUFFdkIsRUFBRW1zRCxhQUFhL3NEO1lBQUcsT0FBTyxRQUFNVyxLQUFHLFdBQVN5RSxPQUFPekUsR0FBR3NOO0FBQWE7VUFBQ2pPLEVBQUVpQyxVQUFRLFNBQVNqQyxHQUFFVztZQUFHLElBQUdXLEVBQUUsa0JBQWlCLE9BQU90QjtZQUFFLElBQUltQyxLQUFFO1lBQUcsT0FBTztjQUFXLEtBQUlBLEdBQUU7Z0JBQUMsSUFBR2IsRUFBRSxxQkFBb0IsTUFBTSxJQUFJd0ksTUFBTW5KO2dCQUFHVyxFQUFFLHNCQUFvQjRSLEVBQVEyNUMsTUFBTWxzRCxLQUFHdVMsRUFBUS9DLEtBQUt4UCxJQUFHd0IsS0FBRTtBQUFFO2NBQUMsT0FBT25DLEVBQUVNLE1BQU1lLE1BQUs2TztBQUFVO0FBQUM7QUFBQTtRQUFHLEtBQUlsUTtVQUFJQSxFQUFFaUMsVUFBUSxTQUFTakM7WUFBRyxPQUFPQSxLQUFHLG1CQUFpQkEsS0FBRyxxQkFBbUJBLEVBQUVxb0IsUUFBTSxxQkFBbUJyb0IsRUFBRXVWLFFBQU0scUJBQW1CdlYsRUFBRWdvQjtBQUFTO0FBQUE7UUFBRyxNQUFLLENBQUNob0IsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE9BQU1NLElBQUVOLEVBQUUsT0FBTU8sSUFBRVAsRUFBRSxPQUFNUSxJQUFFUixFQUFFO1VBQU0sU0FBU1UsRUFBRTdDO1lBQUcsT0FBT0EsRUFBRTBCLEtBQUsydEIsS0FBS3J2QjtBQUFFO1VBQUMsSUFBSThDLElBQUUsc0JBQW9CbU4sUUFBT3hQLElBQUUsc0JBQW9CVSxRQUFPK0IsSUFBRUwsRUFBRVUsT0FBT3VOLFVBQVVmLFdBQVUzTixJQUFFUyxFQUFFMnZCLE9BQU8xaEIsVUFBVWdqQixVQUFTeHdCLElBQUVULEVBQUV1QyxPQUFPMEwsVUFBVWdqQixVQUFTandCLElBQUVoQixFQUFFa3hCLFFBQVFqakIsVUFBVWdqQjtVQUFTLElBQUdoeEIsR0FBRSxJQUFJTixJQUFFSyxFQUFFb04sT0FBT2EsVUFBVWdqQjtVQUFTLElBQUdyekIsR0FBRSxJQUFJZ0YsSUFBRTVDLEVBQUUxQixPQUFPMlAsVUFBVWdqQjtVQUFTLFNBQVNwekIsRUFBRVYsR0FBRVc7WUFBRyxJQUFHLG1CQUFpQlgsR0FBRSxRQUFNO1lBQUc7Y0FBSSxPQUFPVyxFQUFFWCxLQUFHO0FBQW9CLGNBQWpCLE9BQU1BO2NBQUcsUUFBTTtBQUFFO0FBQUM7VUFBQyxTQUFTWSxFQUFFWjtZQUFHLE9BQU0sbUJBQWlCa0QsRUFBRWxEO0FBQUU7VUFBQyxTQUFTbUcsRUFBRW5HO1lBQUcsT0FBTSxtQkFBaUJrRCxFQUFFbEQ7QUFBRTtVQUFDLFNBQVN1QixFQUFFdkI7WUFBRyxPQUFNLHVCQUFxQmtELEVBQUVsRDtBQUFFO1VBQUMsU0FBU3VHLEVBQUV2RztZQUFHLE9BQU0sdUJBQXFCa0QsRUFBRWxEO0FBQUU7VUFBQyxTQUFTYSxFQUFFYjtZQUFHLE9BQU0sMkJBQXlCa0QsRUFBRWxEO0FBQUU7VUFBQyxTQUFTeUksRUFBRXpJO1lBQUcsT0FBTSxzQkFBb0JtaUMsZ0JBQWN0aEMsRUFBRWtqRSxVQUFRbGpFLEVBQUViLEtBQUdBLGFBQWFtaUM7QUFBWTtVQUFDLFNBQVN6NUIsRUFBRTFJO1lBQUcsT0FBTSx3QkFBc0JrRCxFQUFFbEQ7QUFBRTtVQUFDLFNBQVNtSixFQUFFbko7WUFBRyxPQUFNLHNCQUFvQm1pRCxhQUFXejVDLEVBQUVxN0QsVUFBUXI3RCxFQUFFMUksS0FBR0EsYUFBYW1pRDtBQUFTO1VBQUN4aEQsRUFBRXFqRSxvQkFBa0IxaUUsR0FBRVgsRUFBRXNqRSxzQkFBb0J4aEUsR0FBRTlCLEVBQUUwckQsZUFBYTFwRCxHQUFFaEMsRUFBRTZ0QixZQUFVLFNBQVN4dUI7WUFBRyxPQUFNLHNCQUFvQlAsV0FBU08sYUFBYVAsV0FBUyxTQUFPTyxLQUFHLG1CQUFpQkEsS0FBRyxxQkFBbUJBLEVBQUVLLFFBQU0scUJBQW1CTCxFQUFFZ3dCO0FBQUssYUFBRXJ2QixFQUFFaXlCLG9CQUFrQixTQUFTNXlCO1lBQUcsT0FBTSxzQkFBb0JtaUMsZUFBYUEsWUFBWUMsU0FBT0QsWUFBWUMsT0FBT3BpQyxLQUFHMkMsRUFBRTNDLE1BQUltSixFQUFFbko7QUFBRSxhQUFFVyxFQUFFdWpFLGVBQWEsU0FBU2xrRTtZQUFHLE9BQU0saUJBQWUwQyxFQUFFMUM7QUFBRSxhQUFFVyxFQUFFd2pFLHNCQUFvQixTQUFTbmtFO1lBQUcsT0FBTSx3QkFBc0IwQyxFQUFFMUM7QUFBRSxhQUFFVyxFQUFFeWpFLGdCQUFjLFNBQVNwa0U7WUFBRyxPQUFNLGtCQUFnQjBDLEVBQUUxQztBQUFFLGFBQUVXLEVBQUUwakUsZ0JBQWMsU0FBU3JrRTtZQUFHLE9BQU0sa0JBQWdCMEMsRUFBRTFDO0FBQUUsYUFBRVcsRUFBRTJqRSxjQUFZLFNBQVN0a0U7WUFBRyxPQUFNLGdCQUFjMEMsRUFBRTFDO0FBQUUsYUFBRVcsRUFBRTRqRSxlQUFhLFNBQVN2a0U7WUFBRyxPQUFNLGlCQUFlMEMsRUFBRTFDO0FBQUUsYUFBRVcsRUFBRTZqRSxlQUFhLFNBQVN4a0U7WUFBRyxPQUFNLGlCQUFlMEMsRUFBRTFDO0FBQUUsYUFBRVcsRUFBRTR5QixpQkFBZSxTQUFTdnpCO1lBQUcsT0FBTSxtQkFBaUIwQyxFQUFFMUM7QUFBRSxhQUFFVyxFQUFFNnlCLGlCQUFlLFNBQVN4ekI7WUFBRyxPQUFNLG1CQUFpQjBDLEVBQUUxQztBQUFFLGFBQUVXLEVBQUU4akUsa0JBQWdCLFNBQVN6a0U7WUFBRyxPQUFNLG9CQUFrQjBDLEVBQUUxQztBQUFFLGFBQUVXLEVBQUUrakUsbUJBQWlCLFNBQVMxa0U7WUFBRyxPQUFNLHFCQUFtQjBDLEVBQUUxQztBQUFFLGFBQUVZLEVBQUVtakUsVUFBUSxzQkFBb0JsMUMsT0FBS2p1QixFQUFFLElBQUlpdUIsTUFBS2x1QixFQUFFbXlCLFFBQU0sU0FBUzl5QjtZQUFHLE9BQU0sc0JBQW9CNnVCLFFBQU1qdUIsRUFBRW1qRSxVQUFRbmpFLEVBQUVaLEtBQUdBLGFBQWE2dUI7QUFBSSxhQUFFMW9CLEVBQUU0OUQsVUFBUSxzQkFBb0IzdkMsT0FBS2p1QixFQUFFLElBQUlpdUIsTUFBS3p6QixFQUFFb3lCLFFBQU0sU0FBUy95QjtZQUFHLE9BQU0sc0JBQW9CbzBCLFFBQU1qdUIsRUFBRTQ5RCxVQUFRNTlELEVBQUVuRyxLQUFHQSxhQUFhbzBCO0FBQUksYUFBRTd5QixFQUFFd2lFLFVBQVEsc0JBQW9CMWdCLFdBQVM5aEQsRUFBRSxJQUFJOGhELFVBQVMxaUQsRUFBRWdrRSxZQUFVLFNBQVMza0U7WUFBRyxPQUFNLHNCQUFvQnFqRCxZQUFVOWhELEVBQUV3aUUsVUFBUXhpRSxFQUFFdkIsS0FBR0EsYUFBYXFqRDtBQUFRLGFBQUU5OEMsRUFBRXc5RCxVQUFRLHNCQUFvQnhnQixXQUFTaDlDLEVBQUUsSUFBSWc5QyxVQUFTNWlELEVBQUVpa0UsWUFBVSxTQUFTNWtFO1lBQUcsT0FBT3VHLEVBQUV2RztBQUFFLGFBQUVhLEVBQUVrakUsVUFBUSxzQkFBb0I1aEMsZUFBYXRoQyxFQUFFLElBQUlzaEMsY0FBYXhoQyxFQUFFa2tFLGdCQUFjcDhELEdBQUVDLEVBQUVxN0QsVUFBUSxzQkFBb0I1aEMsZUFBYSxzQkFBb0JnZ0IsWUFBVXo1QyxFQUFFLElBQUl5NUMsU0FBUyxJQUFJaGdCLFlBQVksSUFBRyxHQUFFO1VBQUl4aEMsRUFBRW1rRSxhQUFXMzdEO1VBQUUsSUFBSUUsSUFBRSxzQkFBb0JnNUIsb0JBQWtCQSx5QkFBa0I7VUFBTyxTQUFTLzRCLEVBQUV0SjtZQUFHLE9BQU0saUNBQStCa0QsRUFBRWxEO0FBQUU7VUFBQyxTQUFTVCxFQUFFUztZQUFHLFlBQU8sTUFBU3FKLFdBQUksTUFBU0MsRUFBRXk2RCxZQUFVejZELEVBQUV5NkQsVUFBUXo2RCxFQUFFLElBQUlELEtBQUlDLEVBQUV5NkQsVUFBUXo2RCxFQUFFdEosS0FBR0EsYUFBYXFKO0FBQUU7VUFBQyxTQUFTYSxFQUFFbEs7WUFBRyxPQUFPVSxFQUFFVixHQUFFb0M7QUFBRTtVQUFDLFNBQVNpSSxFQUFFcks7WUFBRyxPQUFPVSxFQUFFVixHQUFFc0Q7QUFBRTtVQUFDLFNBQVNpSCxFQUFFdks7WUFBRyxPQUFPVSxFQUFFVixHQUFFNkQ7QUFBRTtVQUFDLFNBQVMyRyxFQUFFeEs7WUFBRyxPQUFPOEMsS0FBR3BDLEVBQUVWLEdBQUV3QztBQUFFO1VBQUMsU0FBU2lJLEVBQUV6SztZQUFHLE9BQU9TLEtBQUdDLEVBQUVWLEdBQUV5RjtBQUFFO1VBQUM5RSxFQUFFb2tFLHNCQUFvQnhsRSxHQUFFb0IsRUFBRXFrRSxrQkFBZ0IsU0FBU2hsRTtZQUFHLE9BQU0sNkJBQTJCa0QsRUFBRWxEO0FBQUUsYUFBRVcsRUFBRXNrRSxnQkFBYyxTQUFTamxFO1lBQUcsT0FBTSw0QkFBMEJrRCxFQUFFbEQ7QUFBRSxhQUFFVyxFQUFFdWtFLGdCQUFjLFNBQVNsbEU7WUFBRyxPQUFNLDRCQUEwQmtELEVBQUVsRDtBQUFFLGFBQUVXLEVBQUV3a0Usb0JBQWtCLFNBQVNubEU7WUFBRyxPQUFNLHlCQUF1QmtELEVBQUVsRDtBQUFFLGFBQUVXLEVBQUV5a0UsOEJBQTRCLFNBQVNwbEU7WUFBRyxPQUFNLGtDQUFnQ2tELEVBQUVsRDtBQUFFLGFBQUVXLEVBQUV1eUIsaUJBQWVocEIsR0FBRXZKLEVBQUV3eUIsaUJBQWU5b0IsR0FBRTFKLEVBQUV5eUIsa0JBQWdCN29CLEdBQUU1SixFQUFFMHlCLGlCQUFlN29CLEdBQUU3SixFQUFFMnlCLGlCQUFlN29CLEdBQUU5SixFQUFFc3lCLG1CQUFpQixTQUFTanpCO1lBQUcsT0FBT2tLLEVBQUVsSyxNQUFJcUssRUFBRXJLLE1BQUl1SyxFQUFFdkssTUFBSXdLLEVBQUV4SyxNQUFJeUssRUFBRXpLO0FBQUUsYUFBRVcsRUFBRWd5QixtQkFBaUIsU0FBUzN5QjtZQUFHLE9BQU0sc0JBQW9CMkcsZUFBYThCLEVBQUV6SSxNQUFJVCxFQUFFUztBQUFHLGFBQUUsRUFBQyxXQUFVLGNBQWEsNEJBQTJCMkosU0FBUSxTQUFVM0o7WUFBR3VELE9BQU93RyxlQUFlcEosR0FBRVgsR0FBRTtjQUFDZ0ssYUFBVztjQUFHbkssT0FBTTtnQkFBVyxNQUFNLElBQUlpSyxNQUFNOUosSUFBRTtBQUFnQzs7QUFBSTtBQUFDO1FBQUcsTUFBSyxDQUFDQSxHQUFFVyxHQUFFd0I7VUFBSyxJQUFJYixJQUFFYSxFQUFFLE9BQU1NLElBQUVjLE9BQU9zM0QsNkJBQTJCLFNBQVM3NkQ7WUFBRyxLQUFJLElBQUlXLElBQUU0QyxPQUFPOFAsS0FBS3JULElBQUdtQyxJQUFFLENBQUMsR0FBRWIsSUFBRSxHQUFFQSxJQUFFWCxFQUFFaUIsUUFBT04sS0FBSWEsRUFBRXhCLEVBQUVXLE1BQUlpQyxPQUFPNHVCLHlCQUF5Qm55QixHQUFFVyxFQUFFVztZQUFJLE9BQU9hO0FBQUMsYUFBRU8sSUFBRTtVQUFXL0IsRUFBRWtFLFNBQU8sU0FBUzdFO1lBQUcsS0FBSXVCLEVBQUV2QixJQUFHO2NBQUMsS0FBSSxJQUFJVyxJQUFFLElBQUd3QixJQUFFLEdBQUVBLElBQUUrTixVQUFVdE8sUUFBT08sS0FBSXhCLEVBQUVrQixLQUFLcEIsRUFBRXlQLFVBQVUvTjtjQUFLLE9BQU94QixFQUFFMEUsS0FBSztBQUFJO1lBQUNsRCxJQUFFO1lBQUUsS0FBSSxJQUFJYixJQUFFNE8sV0FBVXpOLElBQUVuQixFQUFFTSxRQUFPZSxJQUFFeUMsT0FBT3BGLEdBQUc2RixRQUFRbkQsSUFBRSxTQUFVMUM7Y0FBRyxJQUFHLFNBQU9BLEdBQUUsT0FBTTtjQUFJLElBQUdtQyxLQUFHTSxHQUFFLE9BQU96QztjQUFFLFFBQU9BO2VBQUcsS0FBSTtnQkFBSyxPQUFPb0YsT0FBTzlELEVBQUVhOztlQUFNLEtBQUk7Z0JBQUssT0FBT3F3QixPQUFPbHhCLEVBQUVhOztlQUFNLEtBQUk7Z0JBQUs7a0JBQUksT0FBTzhDLEtBQUtFLFVBQVU3RCxFQUFFYTtBQUFpQyxrQkFBM0IsT0FBTW5DO2tCQUFHLE9BQU07QUFBWTs7ZUFBQztnQkFBUSxPQUFPQTs7QUFBRyxpQkFBRzZDLElBQUV2QixFQUFFYSxJQUFHQSxJQUFFTSxHQUFFSSxJQUFFdkIsSUFBSWEsSUFBR3ZCLEVBQUVpQyxPQUFLNEYsRUFBRTVGLEtBQUdGLEtBQUcsTUFBSUUsSUFBRUYsS0FBRyxNQUFJbEMsRUFBRW9DO1lBQUcsT0FBT0Y7QUFBQyxhQUFFaEMsRUFBRWk0RCxZQUFVLFNBQVM1NEQsR0FBRW1DO1lBQUcsU0FBRyxNQUFTYixNQUFHLE1BQUtBLEVBQUUrakUsZUFBYyxPQUFPcmxFO1lBQUUsU0FBRyxNQUFTc0IsR0FBRSxPQUFPO2NBQVcsT0FBT1gsRUFBRWk0RCxVQUFVNTRELEdBQUVtQyxHQUFHN0IsTUFBTWUsTUFBSzZPO0FBQVU7WUFBRSxJQUFJek4sS0FBRTtZQUFHLE9BQU87Y0FBVyxLQUFJQSxHQUFFO2dCQUFDLElBQUduQixFQUFFZ2tFLGtCQUFpQixNQUFNLElBQUl4N0QsTUFBTTNIO2dCQUFHYixFQUFFaWtFLG1CQUFpQnJ5RCxFQUFRMjVDLE1BQU0xcUQsS0FBRytRLEVBQVF2RyxNQUFNeEssSUFBR00sS0FBRTtBQUFFO2NBQUMsT0FBT3pDLEVBQUVNLE1BQU1lLE1BQUs2TztBQUFVO0FBQUM7VUFBRSxJQUFJdk4sSUFBRSxDQUFDLEdBQUVFLElBQUU7VUFBSyxJQUFHdkIsRUFBRTh5RCxJQUFJb1IsWUFBVztZQUFDLElBQUkxaUUsSUFBRXhCLEVBQUU4eUQsSUFBSW9SO1lBQVcxaUUsSUFBRUEsRUFBRStDLFFBQVEsc0JBQXFCLFFBQVFBLFFBQVEsT0FBTSxNQUFNQSxRQUFRLE1BQUssT0FBT3NJLGVBQWN0TCxJQUFFLElBQUlpQixPQUFPLE1BQUloQixJQUFFLEtBQUk7QUFBSTtVQUFDLFNBQVNyQyxFQUFFVCxHQUFFbUM7WUFBRyxJQUFJYixJQUFFO2NBQUNta0UsTUFBSztjQUFHQyxTQUFRdGpFOztZQUFHLE9BQU84TixVQUFVdE8sVUFBUSxNQUFJTixFQUFFK3ZCLFFBQU1uaEIsVUFBVSxLQUFJQSxVQUFVdE8sVUFBUSxNQUFJTixFQUFFcWtFLFNBQU96MUQsVUFBVSxLQUFJeFAsRUFBRXlCLEtBQUdiLEVBQUVpd0IsYUFBV3B2QixJQUFFQSxLQUFHeEIsRUFBRWlsRSxRQUFRdGtFLEdBQUVhO1lBQUdvRSxFQUFFakYsRUFBRWl3QixnQkFBY2p3QixFQUFFaXdCLGNBQVcsSUFBSWhyQixFQUFFakYsRUFBRSt2QixXQUFTL3ZCLEVBQUUrdkIsUUFBTSxJQUFHOXFCLEVBQUVqRixFQUFFcWtFLFlBQVVya0UsRUFBRXFrRSxVQUFPLElBQUlwL0QsRUFBRWpGLEVBQUU4dkIsbUJBQWlCOXZCLEVBQUU4dkIsaUJBQWM7WUFBSTl2QixFQUFFcWtFLFdBQVNya0UsRUFBRW9rRSxVQUFReGlFLElBQUdJLEVBQUVoQyxHQUFFdEIsR0FBRXNCLEVBQUUrdkI7QUFBTTtVQUFDLFNBQVNudUIsRUFBRWxELEdBQUVXO1lBQUcsSUFBSXdCLElBQUUxQixFQUFFb2xFLE9BQU9sbEU7WUFBRyxPQUFPd0IsSUFBRSxPQUFLMUIsRUFBRWtsRSxPQUFPeGpFLEdBQUcsS0FBRyxNQUFJbkMsSUFBRSxPQUFLUyxFQUFFa2xFLE9BQU94akUsR0FBRyxLQUFHLE1BQUluQztBQUFDO1VBQUMsU0FBU29DLEVBQUVwQyxHQUFFVztZQUFHLE9BQU9YO0FBQUM7VUFBQyxTQUFTc0QsRUFBRXRELEdBQUVtQyxHQUFFYjtZQUFHLElBQUd0QixFQUFFb3hCLGlCQUFlanZCLEtBQUdrSCxFQUFFbEgsRUFBRXVaLFlBQVV2WixFQUFFdVosWUFBVS9hLEVBQUUrYSxhQUFXdlosRUFBRTRCLGVBQWE1QixFQUFFNEIsWUFBWStNLGNBQVkzTyxJQUFHO2NBQUMsSUFBSU0sSUFBRU4sRUFBRXVaLFFBQVFwYSxHQUFFdEI7Y0FBRyxPQUFPdUIsRUFBRWtCLE9BQUtBLElBQUVhLEVBQUV0RCxHQUFFeUMsR0FBRW5CLEtBQUltQjtBQUFDO1lBQUMsSUFBSUMsSUFBRSxTQUFTMUMsR0FBRVc7Y0FBRyxJQUFHNEYsRUFBRTVGLElBQUcsT0FBT1gsRUFBRTBsRSxRQUFRLGFBQVk7Y0FBYSxJQUFHbmtFLEVBQUVaLElBQUc7Z0JBQUMsSUFBSXdCLElBQUUsTUFBSThDLEtBQUtFLFVBQVV4RSxHQUFHa0YsUUFBUSxVQUFTLElBQUlBLFFBQVEsTUFBSyxPQUFPQSxRQUFRLFFBQU8sT0FBSztnQkFBSSxPQUFPN0YsRUFBRTBsRSxRQUFRdmpFLEdBQUU7QUFBUztjQUFDLE9BQU9nRSxFQUFFeEYsS0FBR1gsRUFBRTBsRSxRQUFRLEtBQUcva0UsR0FBRSxZQUFVRCxFQUFFQyxLQUFHWCxFQUFFMGxFLFFBQVEsS0FBRy9rRSxHQUFFLGFBQVdDLEVBQUVELEtBQUdYLEVBQUUwbEUsUUFBUSxRQUFPLGVBQVE7QUFBTSxhQUEzUyxDQUE2UzFsRSxHQUFFbUM7WUFBRyxJQUFHTyxHQUFFLE9BQU9BO1lBQUUsSUFBSUMsSUFBRVksT0FBTzhQLEtBQUtsUixJQUFHVSxJQUFFLFNBQVM3QztjQUFHLElBQUlXLElBQUUsQ0FBQztjQUFFLE9BQU9YLEVBQUUySixTQUFRLFNBQVUzSixHQUFFbUM7Z0JBQUd4QixFQUFFWCxNQUFHO0FBQUcsbUJBQUdXO0FBQUMsYUFBakUsQ0FBbUVnQztZQUFHLElBQUczQyxFQUFFdXhCLGVBQWE1dUIsSUFBRVksT0FBT2s5QyxvQkFBb0J0K0MsS0FBSWdILEVBQUVoSCxPQUFLUSxFQUFFUSxRQUFRLGNBQVksS0FBR1IsRUFBRVEsUUFBUSxrQkFBZ0IsSUFBRyxPQUFPVSxFQUFFMUI7WUFBRyxJQUFHLE1BQUlRLEVBQUVmLFFBQU87Y0FBQyxJQUFHeUgsRUFBRWxILElBQUc7Z0JBQUMsSUFBSVcsSUFBRVgsRUFBRTJDLE9BQUssT0FBSzNDLEVBQUUyQyxPQUFLO2dCQUFHLE9BQU85RSxFQUFFMGxFLFFBQVEsY0FBWTVpRSxJQUFFLEtBQUk7QUFBVTtjQUFDLElBQUdqQyxFQUFFc0IsSUFBRyxPQUFPbkMsRUFBRTBsRSxRQUFRNWhFLE9BQU9nTixVQUFVZixTQUFTck8sS0FBS1MsSUFBRztjQUFVLElBQUd1RyxFQUFFdkcsSUFBRyxPQUFPbkMsRUFBRTBsRSxRQUFRcDRDLEtBQUt4YyxVQUFVZixTQUFTck8sS0FBS1MsSUFBRztjQUFRLElBQUdnSCxFQUFFaEgsSUFBRyxPQUFPMEIsRUFBRTFCO0FBQUU7WUFBQyxJQUFJMUIsR0FBRXlDLElBQUUsSUFBR2QsS0FBRSxHQUFHcUcsSUFBRSxFQUFDLEtBQUk7WUFBSyxPQUFPaEQsRUFBRXRELE9BQUtDLEtBQUUsR0FBR3FHLElBQUUsRUFBQyxLQUFJLFFBQU1ZLEVBQUVsSCxPQUFLZSxJQUFFLGdCQUFjZixFQUFFMkMsT0FBSyxPQUFLM0MsRUFBRTJDLE9BQUssTUFBSSxNQUFLakUsRUFBRXNCLE9BQUtlLElBQUUsTUFBSVksT0FBT2dOLFVBQVVmLFNBQVNyTyxLQUFLUztZQUFJdUcsRUFBRXZHLE9BQUtlLElBQUUsTUFBSW9xQixLQUFLeGMsVUFBVWcxRCxZQUFZcGtFLEtBQUtTLEtBQUlnSCxFQUFFaEgsT0FBS2UsSUFBRSxNQUFJVyxFQUFFMUIsS0FBSSxNQUFJUSxFQUFFZixVQUFRUSxLQUFHLEtBQUdELEVBQUVQLFNBQU9OLElBQUUsSUFBRVQsRUFBRXNCLEtBQUduQyxFQUFFMGxFLFFBQVE1aEUsT0FBT2dOLFVBQVVmLFNBQVNyTyxLQUFLUyxJQUFHLFlBQVVuQyxFQUFFMGxFLFFBQVEsWUFBVyxjQUFZMWxFLEVBQUV5bEUsS0FBSzVqRSxLQUFLTTtZQUFHMUIsSUFBRTJCLElBQUUsU0FBU3BDLEdBQUVXLEdBQUV3QixHQUFFYixHQUFFbUI7Y0FBRyxLQUFJLElBQUlDLElBQUUsSUFBR0MsSUFBRSxHQUFFRSxJQUFFbEMsRUFBRWlCLFFBQU9lLElBQUVFLEtBQUlGLEdBQUU0SCxFQUFFNUosR0FBRXlFLE9BQU96QyxNQUFJRCxFQUFFYixLQUFLVyxFQUFFeEMsR0FBRVcsR0FBRXdCLEdBQUViLEdBQUU4RCxPQUFPekMsS0FBRyxNQUFLRCxFQUFFYixLQUFLO2NBQUksT0FBT1ksRUFBRWtILFNBQVEsU0FBVWxIO2dCQUFHQSxFQUFFNEIsTUFBTSxZQUFVM0IsRUFBRWIsS0FBS1csRUFBRXhDLEdBQUVXLEdBQUV3QixHQUFFYixHQUFFbUIsSUFBRTtBQUFLLG1CQUFHQztBQUFDLGFBQTlMLENBQWdNMUMsR0FBRW1DLEdBQUViLEdBQUV1QixHQUFFRixLQUFHQSxFQUFFcUMsS0FBSSxTQUFVckU7Y0FBRyxPQUFPNkIsRUFBRXhDLEdBQUVtQyxHQUFFYixHQUFFdUIsR0FBRWxDLEdBQUV5QjtBQUFHLGlCQUFHcEMsRUFBRXlsRSxLQUFLOWpFLE9BQU0sU0FBUzNCLEdBQUVXLEdBQUV3QjtjQUFHLE9BQU9uQyxFQUFFNkosUUFBTyxTQUFVN0osR0FBRVc7Z0JBQUcsT0FBT0EsRUFBRXdDLFFBQVEsT0FBTW5ELElBQUVXLEVBQUVrRixRQUFRLG1CQUFrQixJQUFJakUsU0FBTztBQUFFLGtCQUFFLEtBQUcsS0FBR08sRUFBRSxNQUFJLE9BQUt4QixJQUFFLEtBQUdBLElBQUUsU0FBTyxNQUFJWCxFQUFFcUYsS0FBSyxXQUFTLE1BQUlsRCxFQUFFLEtBQUdBLEVBQUUsS0FBR3hCLElBQUUsTUFBSVgsRUFBRXFGLEtBQUssUUFBTSxNQUFJbEQsRUFBRTtBQUFFLGFBQS9NLENBQWlOMUIsR0FBRXlDLEdBQUV1RixNQUFJQSxFQUFFLEtBQUd2RixJQUFFdUYsRUFBRTtBQUFFO1VBQUMsU0FBUzVFLEVBQUU3RDtZQUFHLE9BQU0sTUFBSThKLE1BQU1nSCxVQUFVZixTQUFTck8sS0FBSzFCLEtBQUc7QUFBRztVQUFDLFNBQVN3QyxFQUFFeEMsR0FBRVcsR0FBRXdCLEdBQUViLEdBQUVtQixHQUFFQztZQUFHLElBQUlDLEdBQUVFLEdBQUVDO1lBQUUsS0FBSUEsSUFBRVMsT0FBTzR1Qix5QkFBeUJ4eEIsR0FBRThCLE1BQUk7Y0FBQzVDLE9BQU1jLEVBQUU4QjtlQUFLd0gsTUFBSXBILElBQUVDLEVBQUVxTyxNQUFJblIsRUFBRTBsRSxRQUFRLG1CQUFrQixhQUFXMWxFLEVBQUUwbEUsUUFBUSxZQUFXLGFBQVc1aUUsRUFBRXFPLFFBQU10TyxJQUFFN0MsRUFBRTBsRSxRQUFRLFlBQVc7WUFBWW43RCxFQUFFakosR0FBRW1CLE9BQUtFLElBQUUsTUFBSUYsSUFBRSxNQUFLSSxNQUFJN0MsRUFBRXlsRSxLQUFLdGlFLFFBQVFMLEVBQUVqRCxTQUFPLEtBQUdnRCxJQUFFakMsRUFBRXVCLEtBQUdtQixFQUFFdEQsR0FBRThDLEVBQUVqRCxPQUFNLFFBQU15RCxFQUFFdEQsR0FBRThDLEVBQUVqRCxPQUFNc0MsSUFBRSxJQUFJZ0IsUUFBUSxTQUFPLE1BQUlOLElBQUVILElBQUVHLEVBQUVxTCxNQUFNLE1BQU1sSixLQUFJLFNBQVVoRjtjQUFHLE9BQU0sT0FBS0E7QUFBRSxnQkFBR3FGLEtBQUssTUFBTStzQixPQUFPLEtBQUcsT0FBS3Z2QixFQUFFcUwsTUFBTSxNQUFNbEosS0FBSSxTQUFVaEY7Y0FBRyxPQUFNLFFBQU1BO0FBQUUsZ0JBQUdxRixLQUFLLFNBQU94QyxJQUFFN0MsRUFBRTBsRSxRQUFRLGNBQWEsYUFBWW4vRCxFQUFFNUQsSUFBRztjQUFDLElBQUdELEtBQUdELEVBQUU0QixNQUFNLFVBQVMsT0FBT3hCO2VBQUdGLElBQUVzQyxLQUFLRSxVQUFVLEtBQUcxQyxJQUFJNEIsTUFBTSxtQ0FBaUMxQixJQUFFQSxFQUFFeXZCLE9BQU8sR0FBRXp2QixFQUFFZixTQUFPLElBQUdlLElBQUUzQyxFQUFFMGxFLFFBQVEvaUUsR0FBRSxZQUFVQSxJQUFFQSxFQUFFa0QsUUFBUSxNQUFLLE9BQU9BLFFBQVEsUUFBTyxLQUFLQSxRQUFRLFlBQVc7Y0FBS2xELElBQUUzQyxFQUFFMGxFLFFBQVEvaUUsR0FBRTtBQUFVO1lBQUMsT0FBT0EsSUFBRSxPQUFLRTtBQUFDO1VBQUMsU0FBUzRDLEVBQUV6RjtZQUFHLE9BQU91SixNQUFNQyxRQUFReEo7QUFBRTtVQUFDLFNBQVNVLEVBQUVWO1lBQUcsT0FBTSxvQkFBa0JBO0FBQUM7VUFBQyxTQUFTWSxFQUFFWjtZQUFHLE9BQU8sU0FBT0E7QUFBQztVQUFDLFNBQVNtRyxFQUFFbkc7WUFBRyxPQUFNLG1CQUFpQkE7QUFBQztVQUFDLFNBQVN1QixFQUFFdkI7WUFBRyxPQUFNLG1CQUFpQkE7QUFBQztVQUFDLFNBQVN1RyxFQUFFdkc7WUFBRyxZQUFPLE1BQVNBO0FBQUM7VUFBQyxTQUFTYSxFQUFFYjtZQUFHLE9BQU95SSxFQUFFekksTUFBSSxzQkFBb0JzSixFQUFFdEo7QUFBRTtVQUFDLFNBQVN5SSxFQUFFekk7WUFBRyxPQUFNLG1CQUFpQkEsS0FBRyxTQUFPQTtBQUFDO1VBQUMsU0FBUzBJLEVBQUUxSTtZQUFHLE9BQU95SSxFQUFFekksTUFBSSxvQkFBa0JzSixFQUFFdEo7QUFBRTtVQUFDLFNBQVNtSixFQUFFbko7WUFBRyxPQUFPeUksRUFBRXpJLE9BQUsscUJBQW1Cc0osRUFBRXRKLE1BQUlBLGFBQWE4SjtBQUFNO1VBQUMsU0FBU1QsRUFBRXJKO1lBQUcsT0FBTSxxQkFBbUJBO0FBQUM7VUFBQyxTQUFTc0osRUFBRXRKO1lBQUcsT0FBT3VELE9BQU91TixVQUFVZixTQUFTck8sS0FBSzFCO0FBQUU7VUFBQyxTQUFTVCxFQUFFUztZQUFHLE9BQU9BLElBQUUsS0FBRyxNQUFJQSxFQUFFK1AsU0FBUyxNQUFJL1AsRUFBRStQLFNBQVM7QUFBRztVQUFDcFAsRUFBRXUwRCxXQUFTLFNBQVNsMUQ7WUFBRyxJQUFHQSxJQUFFQSxFQUFFbU8sZ0JBQWV4TCxFQUFFM0MsSUFBRyxJQUFHNkMsRUFBRStuQixLQUFLNXFCLElBQUc7Y0FBQyxJQUFJbUMsSUFBRWIsRUFBRXlrRTtjQUFJcGpFLEVBQUUzQyxLQUFHO2dCQUFXLElBQUlzQixJQUFFWCxFQUFFa0UsT0FBT3ZFLE1BQU1LLEdBQUV1UDtnQkFBV2dELEVBQVF2RyxNQUFNLGFBQVkzTSxHQUFFbUMsR0FBRWI7QUFBRTtBQUFDLG1CQUFNcUIsRUFBRTNDLEtBQUcsWUFBVztZQUFFLE9BQU8yQyxFQUFFM0M7QUFBRSxhQUFFVyxFQUFFK2EsVUFBUWpiLEdBQUVBLEVBQUVrbEUsU0FBTztZQUFDSyxNQUFLLEVBQUMsR0FBRTtZQUFJQyxRQUFPLEVBQUMsR0FBRTtZQUFJQyxXQUFVLEVBQUMsR0FBRTtZQUFJQyxTQUFRLEVBQUMsR0FBRTtZQUFJQyxPQUFNLEVBQUMsSUFBRztZQUFJQyxNQUFLLEVBQUMsSUFBRztZQUFJQyxPQUFNLEVBQUMsSUFBRztZQUFJQyxNQUFLLEVBQUMsSUFBRztZQUFJQyxNQUFLLEVBQUMsSUFBRztZQUFJQyxPQUFNLEVBQUMsSUFBRztZQUFJQyxTQUFRLEVBQUMsSUFBRztZQUFJeHdELEtBQUksRUFBQyxJQUFHO1lBQUl5d0QsUUFBTyxFQUFDLElBQUc7YUFBS2xtRSxFQUFFb2xFLFNBQU87WUFBQ2UsU0FBUTtZQUFPQyxRQUFPO1lBQVNDLFNBQVE7WUFBU3JPLFdBQVU7WUFBT3NPLE1BQUs7WUFBT3JhLFFBQU87WUFBUXNhLE1BQUs7WUFBVUMsUUFBTzthQUFPdG1FLEVBQUVtTixRQUFNM0wsRUFBRSxPQUFNeEIsRUFBRTZJLFVBQVEvRCxHQUFFOUUsRUFBRXNuQyxZQUFVdm5DLEdBQUVDLEVBQUV1bkMsU0FBT3RuQyxHQUFFRCxFQUFFd25DLG9CQUFrQixTQUFTbm9DO1lBQUcsT0FBTyxRQUFNQTtBQUFDLGFBQUVXLEVBQUV5bkMsV0FBU2ppQyxHQUFFeEYsRUFBRTBuQyxXQUFTOW1DLEdBQUVaLEVBQUUybkMsV0FBUyxTQUFTdG9DO1lBQUcsT0FBTSxtQkFBaUJBO0FBQUMsYUFBRVcsRUFBRTRuQyxjQUFZaGlDLEdBQUU1RixFQUFFOHRCLFdBQVM1dEIsR0FBRUYsRUFBRW1OLE1BQU0yZ0IsV0FBUzV0QixHQUFFRixFQUFFNm5DLFdBQVMvL0IsR0FBRTlILEVBQUVreUIsU0FBT25xQixHQUFFL0gsRUFBRW1OLE1BQU0ra0IsU0FBT25xQixHQUFFL0gsRUFBRXNwQixVQUFROWdCO1VBQUV4SSxFQUFFbU4sTUFBTWtsQixnQkFBYzdwQixHQUFFeEksRUFBRThuQyxhQUFXcC9CLEdBQUUxSSxFQUFFK25DLGNBQVksU0FBUzFvQztZQUFHLE9BQU8sU0FBT0EsS0FBRyxvQkFBa0JBLEtBQUcsbUJBQWlCQSxLQUFHLG1CQUFpQkEsS0FBRyxtQkFBaUJBLFVBQUcsTUFBU0E7QUFBQyxhQUFFVyxFQUFFdWxCLFdBQVMvakIsRUFBRTtVQUFLLElBQUkrSCxJQUFFLEVBQUMsT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNO1VBQU8sU0FBU0c7WUFBSSxJQUFJckssSUFBRSxJQUFJc3RCLE1BQUszc0IsSUFBRSxFQUFDcEIsRUFBRVMsRUFBRWtuRSxhQUFZM25FLEVBQUVTLEVBQUVtbkUsZUFBYzVuRSxFQUFFUyxFQUFFb25FLGdCQUFlL2hFLEtBQUs7WUFBSyxPQUFNLEVBQUNyRixFQUFFcW5FLFdBQVVuOUQsRUFBRWxLLEVBQUVzbkUsYUFBWTNtRSxJQUFHMEUsS0FBSztBQUFJO1VBQUMsU0FBU2tGLEVBQUV2SyxHQUFFVztZQUFHLE9BQU80QyxPQUFPdU4sVUFBVTZPLGVBQWVqZSxLQUFLMUIsR0FBRVc7QUFBRTtVQUFDQSxFQUFFMk4sTUFBSTtZQUFXNEUsRUFBUTVFLElBQUksV0FBVWpFLEtBQUkxSixFQUFFa0UsT0FBT3ZFLE1BQU1LLEdBQUV1UDtBQUFXLGFBQUV2UCxFQUFFeWtELFdBQVNqakQsRUFBRSxPQUFNeEIsRUFBRWlsRSxVQUFRLFNBQVM1bEUsR0FBRVc7WUFBRyxLQUFJQSxNQUFJOEgsRUFBRTlILElBQUcsT0FBT1g7WUFBRSxLQUFJLElBQUltQyxJQUFFb0IsT0FBTzhQLEtBQUsxUyxJQUFHVyxJQUFFYSxFQUFFUCxRQUFPTixPQUFLdEIsRUFBRW1DLEVBQUViLE1BQUlYLEVBQUV3QixFQUFFYjtZQUFJLE9BQU90QjtBQUFDO1VBQUUsSUFBSXdLLElBQUUsc0JBQW9CckosU0FBT0EsT0FBTyxnQ0FBeUI7VUFBTyxTQUFTc0osRUFBRXpLLEdBQUVXO1lBQUcsS0FBSVgsR0FBRTtjQUFDLElBQUltQyxJQUFFLElBQUkySCxNQUFNO2NBQTJDM0gsRUFBRW9SLFNBQU92VCxHQUFFQSxJQUFFbUM7QUFBQztZQUFDLE9BQU94QixFQUFFWDtBQUFFO1VBQUNXLEVBQUU0bUUsWUFBVSxTQUFTdm5FO1lBQUcsSUFBRyxxQkFBbUJBLEdBQUUsTUFBTSxJQUFJeUIsVUFBVTtZQUFvRCxJQUFHK0ksS0FBR3hLLEVBQUV3SyxJQUFHO2NBQUMsSUFBSTdKO2NBQUUsSUFBRyxzQkFBbUJBLElBQUVYLEVBQUV3SyxLQUFJLE1BQU0sSUFBSS9JLFVBQVU7Y0FBaUUsT0FBTzhCLE9BQU93RyxlQUFlcEosR0FBRTZKLEdBQUU7Z0JBQUMzSyxPQUFNYztnQkFBRXFKLGFBQVc7Z0JBQUdnSixXQUFTO2dCQUFHdUcsZUFBYTtrQkFBSzVZO0FBQUM7WUFBQyxTQUFTQTtjQUFJLEtBQUksSUFBSUEsR0FBRXdCLEdBQUViLElBQUUsSUFBSTdCLFNBQVEsU0FBVU8sR0FBRXNCO2dCQUFHWCxJQUFFWCxHQUFFbUMsSUFBRWI7QUFBRSxtQkFBR21CLElBQUUsSUFBR0MsSUFBRSxHQUFFQSxJQUFFd04sVUFBVXRPLFFBQU9jLEtBQUlELEVBQUVaLEtBQUtxTyxVQUFVeE47Y0FBSUQsRUFBRVosTUFBSyxTQUFVN0IsR0FBRXNCO2dCQUFHdEIsSUFBRW1DLEVBQUVuQyxLQUFHVyxFQUFFVztBQUFHO2NBQUc7Z0JBQUl0QixFQUFFTSxNQUFNZSxNQUFLb0I7QUFBZ0IsZ0JBQWIsT0FBTXpDO2dCQUFHbUMsRUFBRW5DO0FBQUU7Y0FBQyxPQUFPc0I7QUFBQztZQUFDLE9BQU9pQyxPQUFPdXRCLGVBQWVud0IsR0FBRTRDLE9BQU95dEIsZUFBZWh4QixLQUFJd0ssS0FBR2pILE9BQU93RyxlQUFlcEosR0FBRTZKLEdBQUU7Y0FBQzNLLE9BQU1jO2NBQUVxSixhQUFXO2NBQUdnSixXQUFTO2NBQUd1RyxlQUFhO2dCQUFLaFcsT0FBT281QyxpQkFBaUJoOEMsR0FBRThCLEVBQUV6QztBQUFHLGFBQUVXLEVBQUU0bUUsVUFBVXQxQyxTQUFPem5CLEdBQUU3SixFQUFFNm1FLGNBQVksU0FBU3huRTtZQUFHLElBQUcscUJBQW1CQSxHQUFFLE1BQU0sSUFBSXlCLFVBQVU7WUFBb0QsU0FBU2Q7Y0FBSSxLQUFJLElBQUlBLElBQUUsSUFBR3dCLElBQUUsR0FBRUEsSUFBRStOLFVBQVV0TyxRQUFPTyxLQUFJeEIsRUFBRWtCLEtBQUtxTyxVQUFVL047Y0FBSSxJQUFJTSxJQUFFOUIsRUFBRWdCO2NBQU0sSUFBRyxxQkFBbUJjLEdBQUUsTUFBTSxJQUFJaEIsVUFBVTtjQUE4QyxJQUFJaUIsSUFBRXJCLE1BQUtzQixJQUFFO2dCQUFXLE9BQU9GLEVBQUVuQyxNQUFNb0MsR0FBRXdOO0FBQVU7Y0FBRWxRLEVBQUVNLE1BQU1lLE1BQUtWLEdBQUdOLE1BQUssU0FBVUw7Z0JBQUdzQixFQUFFbXdDLFNBQVM5dUMsRUFBRTBzQixLQUFLLE1BQUssTUFBS3J2QjtBQUFJLG1CQUFFLFNBQVVBO2dCQUFHc0IsRUFBRW13QyxTQUFTaG5DLEVBQUU0a0IsS0FBSyxNQUFLcnZCLEdBQUUyQztBQUFJO0FBQUU7WUFBQyxPQUFPWSxPQUFPdXRCLGVBQWVud0IsR0FBRTRDLE9BQU95dEIsZUFBZWh4QixLQUFJdUQsT0FBT281QyxpQkFBaUJoOEMsR0FBRThCLEVBQUV6QyxLQUFJVztBQUFDO0FBQUE7UUFBRyxNQUFLWDtVQUFJO1VBQWFBLEVBQUVpQyxVQUFRO1lBQUN3bEUsZUFBYyxTQUFTem5FO2NBQUcsSUFBSVcsSUFBRVgsS0FBR0EsRUFBRTJNLFNBQU8zTSxFQUFFMk0sTUFBTTVELFVBQVEvSSxFQUFFMk0sTUFBTTVELFVBQVE5RCxLQUFLRSxVQUFVbkYsSUFBR21DLElBQUVuQyxFQUFFMk0sU0FBTzNNLEVBQUUyTSxNQUFNL0YsT0FBSzVHLEVBQUUyTSxNQUFNL0YsT0FBSyxNQUFLdEYsSUFBRSxJQUFJd0ksTUFBTSxxQkFBbUJuSjtjQUFHLE9BQU9XLEVBQUVzRixPQUFLekUsR0FBRWI7QUFBQztZQUFFb21FLHVCQUFzQixTQUFTMW5FLEdBQUVXLEdBQUV3QjtjQUFHLE9BQU8sSUFBSTJILE1BQU0sdUNBQXFDM0gsSUFBRSxZQUFVbkMsSUFBRSxlQUFhVyxJQUFFO0FBQUk7WUFBRWduRSxtQkFBa0IsU0FBUzNuRSxHQUFFVztjQUFHLE9BQU9VLEtBQUt1bUUsZ0JBQWdCLGdEQUE4QzVuRSxJQUFFLEtBQUlXO0FBQUU7WUFBRWtuRSxpQkFBZ0I7Y0FBVyxPQUFPLElBQUkvOUQsTUFBTTtBQUE4QjtZQUFFZytELGlCQUFnQixTQUFTOW5FO2NBQUcsSUFBSVcsSUFBRVgsS0FBR0EsRUFBRTJNLFNBQU8zTSxFQUFFMk0sTUFBTTVELFVBQVEvSSxFQUFFMk0sTUFBTTVELFVBQVEsZ0NBQThCOUQsS0FBS0UsVUFBVW5GO2NBQUcsT0FBTyxJQUFJOEosTUFBTW5KO0FBQUU7WUFBRW9uRSxtQkFBa0IsU0FBUy9uRTtjQUFHLE9BQU8sSUFBSThKLE1BQU0sb0NBQWtDOUosSUFBRTtBQUFjO1lBQUVnb0Usd0JBQXVCLFNBQVNob0U7Y0FBRyxPQUFPcUIsS0FBS3VtRSxnQkFBZ0IsaUNBQWdDNW5FO0FBQUU7WUFBRWlvRSxzQkFBcUIsU0FBU2pvRTtjQUFHLE9BQU0sbUJBQWlCQSxLQUFHQSxFQUFFNEosUUFBTTVKLEVBQUV1VCxTQUFPbFMsS0FBS3VtRSxnQkFBZ0Isc0VBQW9FNW5FLEVBQUU0SixPQUFLLHdDQUFzQzVKLEVBQUV1VCxTQUFPLEtBQUl2VCxLQUFHLElBQUk4SixNQUFNO0FBQXVEO1lBQUVvK0QsdUNBQXNDO2NBQVcsT0FBTyxJQUFJcCtELE1BQU07QUFBZ0Q7WUFBRXErRCxvQ0FBbUM7Y0FBVyxPQUFPLElBQUlyK0QsTUFBTTtBQUFvRjtZQUFFODlELGlCQUFnQixTQUFTNW5FLEdBQUVXO2NBQUcsTUFBTXdCLElBQUUsSUFBSTJILE1BQU05SjtjQUFHLE9BQU9XLE1BQUl3QixFQUFFeUgsT0FBS2pKLEVBQUVpSixNQUFLekgsRUFBRW9SLFNBQU81UyxFQUFFNFMsU0FBUXBSO0FBQUM7WUFBRWltRSx3QkFBdUIsU0FBU3BvRSxHQUFFVztjQUFHLElBQUl3QixJQUFFLElBQUkySCxNQUFNLGlFQUErRDlKO2NBQUcsT0FBT21DLEVBQUVvUixTQUFPdlQsR0FBRW1DLEVBQUU0L0IsWUFBVXBoQyxHQUFFd0I7QUFBQztZQUFFa21FLG1DQUFrQyxTQUFTcm9FLEdBQUVXLEdBQUV3QjtjQUFHLElBQUliLElBQUUsSUFBSXdJLE1BQU0sZ0RBQThDN0UsS0FBS0UsVUFBVWhELEdBQUUsTUFBSztjQUFJLE9BQU9iLEVBQUVpUyxTQUFPdlQsR0FBRXNCLEVBQUV5Z0MsWUFBVXBoQyxHQUFFVyxFQUFFZ25FLFVBQVFubUUsR0FBRWI7QUFBQztZQUFFaW5FLGtCQUFpQixTQUFTdm9FLEdBQUVXO2NBQUcsSUFBSXdCLElBQUUsSUFBSTJILE1BQU05SjtjQUFHLE9BQU9tQyxFQUFFbW1FLFVBQVEzbkUsR0FBRXdCO0FBQUM7WUFBRXFtRSw2QkFBNEIsU0FBU3hvRTtjQUFHLE9BQU9xQixLQUFLa25FLGlCQUFpQiw4REFBNkR2b0U7QUFBRTtZQUFFeW9FLDRCQUEyQixTQUFTem9FO2NBQUcsT0FBT3FCLEtBQUtrbkUsaUJBQWlCLHNFQUFxRXZvRTtBQUFFO1lBQUUwb0UsdUNBQXNDLFNBQVMxb0U7Y0FBRyxPQUFPcUIsS0FBS2tuRSxpQkFBaUIsZ0RBQThDdGpFLEtBQUtFLFVBQVVuRixHQUFFLE1BQUssSUFBR0E7QUFBRTtZQUFFMm9FLDBCQUF5QixTQUFTM29FO2NBQUcsT0FBT3FCLEtBQUtrbkUsaUJBQWlCLDJEQUF5RHRqRSxLQUFLRSxVQUFVbkYsR0FBRSxNQUFLLElBQUdBO0FBQUU7WUFBRTRvRSw0QkFBMkIsU0FBUzVvRSxHQUFFVztjQUFHLE9BQU8sSUFBSW1KLE1BQU0scUJBQW1COUosSUFBRSwyQ0FBeUNXLElBQUU7QUFBSztZQUFFa29FLHlCQUF3QjtjQUFXLE9BQU8sSUFBSS8rRCxNQUFNO0FBQTRGO1lBQUVnL0QsbUNBQWtDO2NBQVcsT0FBTyxJQUFJaC9ELE1BQU07QUFBb0Q7WUFBRWkvRCxnQ0FBK0IsU0FBUy9vRTtjQUFHLE9BQU8sSUFBSThKLE1BQU0sWUFBVTlKLElBQUU7QUFBcUM7WUFBRWdwRSw0QkFBMkIsU0FBU2hwRTtjQUFHLE9BQU8sSUFBSThKLE1BQU0sZ0JBQWM5SixJQUFFO0FBQWlEO1lBQUVpcEUsZ0NBQStCO2NBQVcsT0FBTyxJQUFJbi9ELE1BQU07QUFBNkU7WUFBRW8vRCwrQkFBOEI7Y0FBVyxPQUFPLElBQUlwL0QsTUFBTTtBQUFrRjtZQUFFcS9ELG1DQUFrQztjQUFXLE9BQU8sSUFBSXIvRCxNQUFNO0FBQXFGOztBQUFDO1FBQUcsTUFBSyxDQUFDOUosR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE9BQU1NLElBQUVOLEVBQUUsT0FBTU8sSUFBRSxTQUFTMUM7WUFBRyxPQUFPc0IsRUFBRThuRSxLQUFLcHBFLEdBQUcrUCxTQUFTO0FBQUcsYUFBRXBOLElBQUUsU0FBUzNDO1lBQUcsU0FBRyxNQUFTQSxHQUFFLE9BQU8sU0FBU0E7Y0FBRyxPQUFNLGFBQVdBLEtBQUcsY0FBWUEsS0FBRyxlQUFhQTtBQUFDLGFBQTdELENBQStEQSxLQUFHQSxJQUFFLGNBQVlBLElBQUUsUUFBTXNCLEVBQUUrbkUsWUFBWXJwRSxLQUFHLG1CQUFpQkEsSUFBRUEsRUFBRWlPLGdCQUFjak8sSUFBRXNCLEVBQUVnb0UsWUFBWXRwRTtBQUFFLGFBQUU2QyxJQUFFLFNBQVM3QztZQUFHLElBQUdBLEVBQUVxaUIsT0FBS3JpQixFQUFFcWlCLEtBQUduZixFQUFFbEQsRUFBRXFpQixNQUFLcmlCLEVBQUU0RyxRQUFNNUcsRUFBRXVwRSxPQUFNLE1BQU0sSUFBSXovRCxNQUFNO1lBQW1JLEtBQUk5SixFQUFFNEcsUUFBTTVHLEVBQUV1cEUsVUFBUXZwRSxFQUFFNEcsT0FBSzVHLEVBQUV1cEUsY0FBYXZwRSxFQUFFdXBFLFFBQU92cEUsRUFBRTRHLFNBQU81RyxFQUFFNEcsS0FBSzRpRSxXQUFXLFVBQVF4cEUsRUFBRTRHLE9BQUssT0FBSzVHLEVBQUU0RztZQUFNNUcsRUFBRTRHLFNBQU90RixFQUFFbW9FLE1BQU16cEUsRUFBRTRHLE9BQU0sTUFBTSxJQUFJa0QsTUFBTTtZQUE0QyxRQUFPOUosRUFBRTBwRSxPQUFLMXBFLEVBQUVtaUIsY0FBWW5pQixFQUFFMHBFLE1BQUkxcEUsRUFBRTBwRSxPQUFLMXBFLEVBQUVtaUIsWUFBV25pQixFQUFFK2lCLHdCQUFzQi9pQixFQUFFOGlCLHdCQUFzQjlpQixFQUFFb2lCO1lBQVMsRUFBQyxZQUFXLE9BQU0sU0FBUSx3QkFBdUIsZ0JBQWUsVUFBU3NILFFBQU8sU0FBVS9vQjtjQUFHLFlBQU8sTUFBU1gsRUFBRVc7QUFBRyxnQkFBR2dKLFNBQVEsU0FBVWhKO2NBQUdYLEVBQUVXLEtBQUdXLEVBQUVnb0UsWUFBWXRwRSxFQUFFVztBQUFJLGlCQUFHWDtBQUFDLGFBQUU4QyxJQUFFLFNBQVM5QztZQUFHLE9BQU8sU0FBT0EsRUFBRTJwRSxnQkFBYzNwRSxFQUFFMnBFLGNBQVlyb0UsRUFBRXNvRSxZQUFZNXBFLEVBQUUycEUsZUFBYyxTQUFPM3BFLEVBQUU2cEUscUJBQW1CN3BFLEVBQUU2cEUsbUJBQWlCdm9FLEVBQUVzb0UsWUFBWTVwRSxFQUFFNnBFO1lBQW1CN3BFLEVBQUVzZCxRQUFNaGMsRUFBRXNvRSxZQUFZNXBFLEVBQUVzZCxRQUFPdGQsRUFBRTBwRSxNQUFJcG9FLEVBQUVzb0UsWUFBWTVwRSxFQUFFMHBFLE1BQUsxcEUsRUFBRW9pQixhQUFXcGlCLEVBQUVvaUIsV0FBUzFmLEVBQUUxQyxFQUFFb2lCLFlBQVdwaUIsRUFBRThpQixpQkFBZTlpQixFQUFFOGlCLGVBQWFwZ0IsRUFBRTFDLEVBQUU4aUI7WUFBZTlpQixFQUFFK2lCLHlCQUF1Qi9pQixFQUFFK2lCLHVCQUFxQnJnQixFQUFFMUMsRUFBRStpQix3QkFBdUIvaUIsRUFBRW9FLFNBQU9wRSxFQUFFb0UsT0FBSzlDLEVBQUVzb0UsWUFBWTVwRSxFQUFFb0U7WUFBT3BFLEVBQUVILFFBQU02QyxFQUFFMUMsRUFBRUgsUUFBT0csRUFBRXFpQixNQUFJL2dCLEVBQUV1ekMsVUFBVTcwQyxFQUFFcWlCLE1BQUlyaUIsRUFBRXFpQixLQUFHL2dCLEVBQUV3MkMsa0JBQWtCOTNDLEVBQUVxaUIsTUFBSXJpQixFQUFFcWlCLEtBQUcsTUFBS3JpQixFQUFFdUgsU0FBT3ZILEVBQUV1SCxPQUFLakcsRUFBRXcyQyxrQkFBa0I5M0MsRUFBRXVIO1lBQU92SDtBQUFDLGFBQUVTLElBQUUsU0FBU1Q7WUFBRyxJQUFHLG1CQUFpQkEsRUFBRThwRSxhQUFXLG1CQUFpQjlwRSxFQUFFK3BFLG1CQUFpQixtQkFBaUIvcEUsRUFBRWdxRSxVQUFTO2NBQUMsSUFBSXJwRSxJQUFFVyxFQUFFMm9FLEtBQUtqcUUsRUFBRThwRSxVQUFVamtFLFFBQVEsTUFBSyxNQUFJN0YsRUFBRStwRSxnQkFBZ0Jsa0UsUUFBUSxNQUFLLE1BQUk3RixFQUFFZ3FFLFNBQVNua0UsUUFBUSxNQUFLO2NBQUs3RixFQUFFaWhDLEtBQUcsU0FBT3RnQyxFQUFFa0YsUUFBUSxNQUFLLElBQUl1QixNQUFNLEdBQUU7QUFBRSxtQkFBTXBILEVBQUVpaEMsT0FBS2poQyxFQUFFaWhDLEtBQUc7WUFBTSxPQUFPLFNBQU9qaEMsRUFBRTJwRSxnQkFBYzNwRSxFQUFFMnBFLGNBQVlyb0UsRUFBRXNvRSxZQUFZNXBFLEVBQUUycEUsZUFBYyxTQUFPM3BFLEVBQUU2cEUscUJBQW1CN3BFLEVBQUU2cEUsbUJBQWlCdm9FLEVBQUVzb0UsWUFBWTVwRSxFQUFFNnBFO1lBQW1CLFNBQU83cEUsRUFBRWdxRSxhQUFXaHFFLEVBQUVncUUsV0FBUzFvRSxFQUFFc29FLFlBQVk1cEUsRUFBRWdxRSxZQUFXaHFFLEVBQUV3aUIsWUFBVXhpQixFQUFFd2lCLFVBQVFsaEIsRUFBRXcyQyxrQkFBa0I5M0MsRUFBRXdpQjtZQUFVeGlCO0FBQUMsYUFBRWtELElBQUUsU0FBU2xEO1lBQUcsSUFBSVcsSUFBRSxJQUFJOEIsRUFBRXpDO1lBQUcsSUFBR1csRUFBRXVwRSxhQUFXdnBFLEVBQUV3cEUsWUFBVyxPQUFPeHBFLEVBQUV5cEUsWUFBWW44RDtZQUFjLElBQUczTSxFQUFFdXpDLFVBQVU3MEMsSUFBRyxPQUFNLE9BQUtBLEVBQUVpTyxjQUFjcEksUUFBUSxNQUFLO1lBQUksTUFBTSxJQUFJaUUsTUFBTSxvQkFBb0I5SjtBQUFvSDtVQUFFQSxFQUFFaUMsVUFBUTtZQUFDb29FLGtDQUFpQyxTQUFTcnFFO2NBQUcsT0FBTzJDLEVBQUV0QixRQUFNLFFBQU1yQixJQUFFcUIsS0FBS2lwRSxlQUFhdHFFO0FBQUU7WUFBRXVxRSwyQkFBMEI1bkU7WUFBRTZuRSxvQkFBbUIsU0FBU3hxRTtjQUFHLElBQUlXLEtBQUdYLElBQUU2QyxFQUFFN0MsSUFBSXVILFNBQU9sRyxPQUFLQSxLQUFLb3BFLGlCQUFlO2NBQU0sT0FBTzlwRSxNQUFJWCxFQUFFdUgsT0FBS3JFLEVBQUV2QyxLQUFJWDtBQUFDO1lBQUUwcUUsMkJBQTBCLFNBQVMxcUU7Y0FBRyxJQUFHLG9CQUFpQkEsSUFBRTZDLEVBQUU3QyxJQUFJdUgsVUFBUXZILEVBQUV1SCxRQUFNLG1CQUFpQnZILEVBQUV1SCxPQUFNO2dCQUFDLElBQUd2SCxFQUFFdUgsT0FBS3ZILEVBQUV1SCxTQUFPbEcsT0FBS0EsS0FBS29wRSxpQkFBZSxRQUFPenFFLEVBQUV1SCxRQUFNLG1CQUFpQnZILEVBQUV1SCxNQUFLLE1BQU0sSUFBSXVDLE1BQU07Z0JBQXVEOUosRUFBRXVILE9BQUtyRSxFQUFFbEQsRUFBRXVIO0FBQUs7Y0FBQyxPQUFPdkg7QUFBQztZQUFFMnFFLHVCQUFzQnpuRTtZQUFFMG5FLG9CQUFtQixTQUFTNXFFO2NBQUcsT0FBT0EsRUFBRTZxRSxRQUFNN3FFLEVBQUU2cUUsTUFBSXZwRSxFQUFFZ29FLFlBQVl0cEUsRUFBRTZxRSxPQUFNN3FFLEVBQUU4cUUsZ0JBQWM5cUUsRUFBRThxRSxjQUFZeHBFLEVBQUVnb0UsWUFBWXRwRSxFQUFFOHFFLGVBQWM5cUUsRUFBRStxRSxhQUFXL3FFLEVBQUUrcUUsV0FBU3pwRSxFQUFFZ29FLFlBQVl0cEUsRUFBRStxRTtjQUFXeGhFLE1BQU1DLFFBQVF4SixFQUFFZ3JFLFlBQVVockUsRUFBRWdyRSxTQUFPaHJFLEVBQUVnckUsU0FBTyxFQUFDaHJFLEVBQUVnckUsV0FBUSxLQUFJaHJFLEVBQUVnckUsU0FBT2hyRSxFQUFFZ3JFLE9BQU9obUUsS0FBSSxTQUFVaEY7Z0JBQUcsT0FBTyxNQUFJQSxFQUFFbUQsUUFBUSxRQUFNbkQsSUFBRXNCLEVBQUVpN0MsU0FBU3Y4QztBQUFHLG1CQUFHQTtBQUFDO1lBQUVpckUsbUJBQWtCLFNBQVNqckU7Y0FBRyxJQUFJVyxJQUFFLFNBQVNYO2dCQUFHLE9BQU8sUUFBTUEsSUFBRSxPQUFLLE9BQUtBLElBQUVvRixPQUFPcEYsSUFBSW1ELFFBQVEsUUFBTW5ELElBQUVzQixFQUFFaTdDLFNBQVN2OEM7QUFBRTtjQUFFLFlBQU8sTUFBU0EsTUFBSUEsSUFBRSxDQUFDLFNBQUcsTUFBU0EsRUFBRWtyRSxjQUFZbHJFLElBQUU7bUJBQUlBO2dCQUFFa3JFLFdBQVU7bUJBQVlsckUsRUFBRWtyRSxhQUFXLE1BQUlsckUsRUFBRWtyRSxlQUFhbHJFLEVBQUVrckUsWUFBVXZvRSxFQUFFM0MsRUFBRWtyRSxjQUFhbHJFLEVBQUVtckUsV0FBUyxNQUFJbnJFLEVBQUVtckUsYUFBV25yRSxFQUFFbXJFLFVBQVF4b0UsRUFBRTNDLEVBQUVtckU7Y0FBVW5yRSxFQUFFZ3JFLFNBQU9ockUsRUFBRWdyRSxVQUFRLElBQUdockUsRUFBRWdyRSxTQUFPaHJFLEVBQUVnckUsT0FBT2htRSxLQUFJLFNBQVVoRjtnQkFBRyxPQUFPdUosTUFBTUMsUUFBUXhKLEtBQUdBLEVBQUVnRixJQUFJckUsS0FBR0EsRUFBRVg7QUFBRyxtQkFBR1csSUFBRSxNQUFLWCxFQUFFd2lCLFlBQVV4aUIsRUFBRXdpQixVQUFRalosTUFBTUMsUUFBUXhKLEVBQUV3aUIsV0FBU3hpQixFQUFFd2lCLFFBQVF4ZCxLQUFJLFNBQVVoRjtnQkFBRyxPQUFPa0QsRUFBRWxEO0FBQUcsb0JBQUdrRCxFQUFFbEQsRUFBRXdpQixXQUFVeGlCO0FBQUM7WUFBRW9yRSxvQkFBbUIsU0FBU3ByRTtjQUFHLE9BQU9zQixFQUFFK25FLFlBQVlycEUsS0FBR0EsSUFBRXNCLEVBQUUrcEUsVUFBVXJyRTtBQUFFO1lBQUVzckUsMkJBQTBCLFNBQVN0ckU7Y0FBRyxPQUFPQSxFQUFFZ0YsSUFBSTFELEVBQUVnb0U7QUFBWTtZQUFFaUMsc0JBQXFCLFNBQVN2ckU7Y0FBRyxPQUFPQSxFQUFFd2lCLFVBQVFsaEIsRUFBRXcyQyxrQkFBa0I5M0MsRUFBRXdpQixVQUFTeGlCLEVBQUVzZCxRQUFNaGMsRUFBRWtxRSxrQkFBa0J4ckUsRUFBRXNkLFFBQU90ZCxFQUFFbTRDLFVBQVE3MkMsRUFBRWtxRSxrQkFBa0J4ckUsRUFBRW00QztjQUFTbjRDO0FBQUM7WUFBRXlyRSwwQkFBeUIvb0U7WUFBRWdwRSw0QkFBMkI1b0U7WUFBRTZvRSxtQ0FBa0MsU0FBUzNyRTtjQUFHLElBQUcsbUJBQWlCQSxHQUFFLE1BQU0sSUFBSThKLE1BQU0sa0NBQWdDOUo7Y0FBRyxPQUFPLFNBQU9BLEVBQUUycEUsZ0JBQWMzcEUsRUFBRTJwRSxjQUFZcm9FLEVBQUVzb0UsWUFBWTVwRSxFQUFFMnBFLGVBQWMsU0FBTzNwRSxFQUFFNnBFLHFCQUFtQjdwRSxFQUFFNnBFLG1CQUFpQnZvRSxFQUFFc29FLFlBQVk1cEUsRUFBRTZwRTtjQUFtQjdwRSxFQUFFNHJFLG9CQUFrQnRxRSxFQUFFc29FLFlBQVk1cEUsRUFBRTRyRSxvQkFBbUI1ckUsRUFBRTZyRSxVQUFRdnFFLEVBQUVzb0UsWUFBWTVwRSxFQUFFNnJFLFVBQVN0aUUsTUFBTUMsUUFBUXhKLEVBQUU4ckUsVUFBUTlyRSxFQUFFOHJFLE9BQUs5ckUsRUFBRThyRSxLQUFLOW1FLElBQUl2RTtjQUFJVCxFQUFFK3JFLHNCQUFvQi9yRSxFQUFFK3JFLG9CQUFrQnpxRSxFQUFFc29FLFlBQVk1cEUsRUFBRStyRSxxQkFBb0IvckUsRUFBRWdzRSxvQkFBa0Joc0UsRUFBRWdzRSxrQkFBZ0IxcUUsRUFBRXcyQyxrQkFBa0I5M0MsRUFBRWdzRTttQkFBa0IsTUFBU2hzRSxFQUFFNGdFLFVBQVEsU0FBTzVnRSxFQUFFNGdFLFdBQVM1Z0UsRUFBRTRnRSxTQUFPN3NDLFFBQVF4dkIsU0FBU3ZFLEVBQUU0Z0UsV0FBVTVnRTtBQUFDO1lBQUVpc0Usc0JBQXFCLFNBQVNqc0U7Y0FBRyxPQUFPQSxFQUFFbWlCLFdBQVM3Z0IsRUFBRXNvRSxZQUFZNXBFLEVBQUVtaUIsV0FBVW5pQixFQUFFNnJFLFVBQVF2cUUsRUFBRXNvRSxZQUFZNXBFLEVBQUU2ckUsVUFBUzdyRSxFQUFFMEssT0FBS3BKLEVBQUVzb0UsWUFBWTVwRSxFQUFFMEssT0FBTTFLLEVBQUVrc0UsWUFBVTVxRSxFQUFFc29FLFlBQVk1cEUsRUFBRWtzRTtjQUFXLFNBQU9sc0UsRUFBRTZtRSxXQUFTN21FLEVBQUU2bUUsU0FBT3ZsRSxFQUFFc29FLFlBQVk1cEUsRUFBRTZtRSxVQUFTN21FLEVBQUVtc0UsZUFBYW5zRSxFQUFFbXNFLGFBQVd6cEUsRUFBRTFDLEVBQUVtc0UsY0FBYW5zRSxFQUFFb3NFLG9CQUFrQnBzRSxFQUFFb3NFLGtCQUFnQjFwRSxFQUFFMUMsRUFBRW9zRTtjQUFrQjdpRSxNQUFNQyxRQUFReEosRUFBRXFzRSxpQkFBZXJzRSxFQUFFcXNFLGFBQWExaUUsU0FBUSxTQUFVM0o7Z0JBQUcsSUFBRyxtQkFBaUJBLEdBQUUsT0FBTzhDLEVBQUU5QztBQUFHLG1CQUFHQSxFQUFFc3NFLFVBQVF0c0UsRUFBRXNzRSxRQUFNaHJFLEVBQUV3MkMsa0JBQWtCOTNDLEVBQUVzc0UsU0FBUXRzRSxFQUFFdXNFLGtCQUFnQnZzRSxFQUFFdXNFLGdCQUFjanJFLEVBQUVzb0UsWUFBWTVwRSxFQUFFdXNFO2NBQWdCdnNFO0FBQUM7WUFBRXdzRSxvQkFBbUIvckU7WUFBRWdzRSxxQkFBb0IsU0FBU3pzRTtjQUFHLE9BQU9BLEVBQUUwc0UsU0FBT3ByRSxFQUFFc29FLFlBQVk1cEUsRUFBRTBzRSxTQUFRMXNFLEVBQUVlLE9BQUtPLEVBQUVzb0UsWUFBWTVwRSxFQUFFZSxPQUFNZixFQUFFNnFFLE1BQUl2cEUsRUFBRXNvRSxZQUFZNXBFLEVBQUU2cUUsTUFBSzdxRSxFQUFFMnNFLGFBQVdyckUsRUFBRXNvRSxZQUFZNXBFLEVBQUUyc0U7Y0FBWTNzRSxFQUFFZ3JFLFdBQVNockUsRUFBRWdyRSxTQUFPLEtBQUlockUsRUFBRWdyRSxTQUFPaHJFLEVBQUVnckUsT0FBT2htRSxLQUFJLFNBQVVoRjtnQkFBRyxPQUFPc0IsRUFBRTY0QyxPQUFPbjZDO0FBQUcsbUJBQUdBO0FBQUM7WUFBRTRzRSx3QkFBdUIsU0FBUzVzRTtjQUFHLE9BQU9BLEVBQUU2c0UsZ0JBQWN2ckUsRUFBRXNvRSxZQUFZNXBFLEVBQUU2c0UsZ0JBQWU3c0UsRUFBRThzRSxlQUFheHJFLEVBQUVzb0UsWUFBWTVwRSxFQUFFOHNFLGVBQWM5c0UsRUFBRStzRSxlQUFhenJFLEVBQUVzb0UsWUFBWTVwRSxFQUFFK3NFO2NBQWMvc0UsRUFBRWd0RSxnQkFBY2h0RSxFQUFFZ3RFLGNBQVkxckUsRUFBRXNvRSxZQUFZNXBFLEVBQUVndEUsY0FBYWh0RSxFQUFFaXRFLGVBQWEzckUsRUFBRXNvRSxZQUFZNXBFLEVBQUVpdEUsZ0JBQWVqdEU7QUFBQzs7QUFBQztRQUFHLE1BQUssQ0FBQ0EsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE9BQU1NLElBQUVOLEVBQUU7VUFBTW5DLEVBQUVpQyxVQUFRO1lBQUNnQyxRQUFPM0M7WUFBRTRyRSxZQUFXenFFOztBQUFDO1FBQUcsTUFBSyxDQUFDekMsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE1BQU04QixRQUFPeEIsSUFBRU4sRUFBRSxNQUFNK3FFLFlBQVd4cUUsSUFBRVAsRUFBRSxPQUFNUSxJQUFFUixFQUFFLE9BQU1VLElBQUVWLEVBQUUsTUFBTWdyRSxlQUFjcnFFLElBQUVYLEVBQUUsT0FBTTFCLElBQUUsU0FBU1Q7WUFBRyxLQUFJQSxFQUFFMEIsU0FBTzFCLEVBQUU4RSxNQUFLLE1BQU0sSUFBSWdGLE1BQU07WUFBdUZ6SSxLQUFLeUQsT0FBSzlFLEVBQUU4RSxNQUFLekQsS0FBS0ssT0FBSzFCLEVBQUUwQixNQUFLTCxLQUFLbWdDLFNBQU94aEMsRUFBRXdoQyxVQUFRLEdBQUVuZ0MsS0FBSytyRSxpQkFBZXB0RSxFQUFFb3RFLGdCQUFlL3JFLEtBQUtnc0Usa0JBQWdCcnRFLEVBQUVxdEU7WUFBZ0Joc0UsS0FBS2lzRSxtQkFBaUJ0dEUsRUFBRXN0RSxrQkFBaUJqc0UsS0FBS2tzRSxrQkFBZ0J2dEUsRUFBRXV0RSxpQkFBZ0Jsc0UsS0FBS21zRSxXQUFTeHRFLEVBQUV3dEUsVUFBU25zRSxLQUFLb3NFLGlCQUFlenRFLEVBQUV5dEU7WUFBZXBzRSxLQUFLcXNFLFdBQVMxdEUsRUFBRTB0RSxVQUFTcnNFLEtBQUtpcEUsZUFBYXRxRSxFQUFFc3FFLGdCQUFjLFVBQVNqcEUsS0FBS29wRSxpQkFBZXpxRSxFQUFFeXFFLGtCQUFnQjtZQUFLcHBFLEtBQUtzc0UsMEJBQXdCM3RFLEVBQUUydEUsMkJBQXlCLElBQUd0c0UsS0FBS3VzRSxnQ0FBOEI1dEUsRUFBRTR0RSxpQ0FBK0I7WUFBR3ZzRSxLQUFLd3NFLDRCQUEwQjd0RSxFQUFFNnRFLDZCQUEyQixLQUFJeHNFLEtBQUt5c0UsNkJBQTJCOXRFLEVBQUU4dEUsOEJBQTRCO1lBQUl6c0UsS0FBSzBzRSxxQkFBbUIvdEUsRUFBRSt0RSxzQkFBb0IsSUFBRzFzRSxLQUFLMnNFLGdCQUFjaHVFLEVBQUVndUUsZUFBYzNzRSxLQUFLNHNFLGVBQWFqdUUsRUFBRWl1RTtZQUFhNXNFLEtBQUs2c0Usa0JBQWdCbHVFLEVBQUVrdUUsaUJBQWdCN3NFLEtBQUs4c0UsZUFBYW51RSxFQUFFbXVFO0FBQVk7VUFBRTF0RSxFQUFFcVEsVUFBVXM5RCxvQkFBa0IsU0FBU3B1RSxHQUFFVztZQUFHVSxLQUFLb3NFLGlCQUFlenRFLEdBQUVXLE1BQUlVLEtBQUtxc0UsV0FBUy9zRTtBQUFFLGFBQUVGLEVBQUVxUSxVQUFVdTlELGlCQUFlLFNBQVNydUUsR0FBRVc7WUFBRyxJQUFJd0IsSUFBRWQsS0FBS2l0RTtZQUFZLE9BQU8vcUUsT0FBT3dHLGVBQWU1SCxHQUFFLFFBQU87Y0FBQ29YLGVBQWE7Y0FBR3ZHLFdBQVM7Y0FBR25ULE9BQU13QixLQUFLSztnQkFBT0wsS0FBSytzRSxrQkFBa0JwdUUsS0FBR3FCLEtBQUtvc0UsZ0JBQWU5c0UsS0FBR1UsS0FBS3FzRSxXQUFVdnJFO0FBQUMsYUFBRTFCLEVBQUVxUSxVQUFVeTlELGlCQUFlLFNBQVN2dUU7WUFBRyxJQUFJVyxJQUFFVSxLQUFLaXRFO1lBQVkvcUUsT0FBT3dHLGVBQWVwSixHQUFFLFFBQU87Y0FBQzRZLGVBQWE7Y0FBR3ZHLFdBQVM7Y0FBR25ULE9BQU13QixLQUFLSzs7WUFBTyxJQUFJUyxJQUFFZCxLQUFLeUQsS0FBS29KLE1BQU07WUFBSy9MLEVBQUVQLFNBQU8sS0FBRzVCLEVBQUVtQyxFQUFFLE1BQUluQyxFQUFFbUMsRUFBRSxPQUFLLENBQUMsR0FBRW5DLEVBQUVtQyxFQUFFLElBQUlBLEVBQUUsTUFBSXhCLEtBQUdYLEVBQUVtQyxFQUFFLE1BQUl4QjtBQUFDLGFBQUVGLEVBQUVxUSxVQUFVMDlELFVBQVEsU0FBU3h1RTtZQUFHLE9BQU0scUJBQW1CcUIsS0FBS0ssT0FBS0wsS0FBS0ssS0FBSzFCLEtBQUdxQixLQUFLSztBQUFJLGFBQUVqQixFQUFFcVEsVUFBVTI5RCxrQkFBZ0IsU0FBU3p1RTtZQUFHLElBQUcscUJBQW1CQSxFQUFFQSxFQUFFNEIsU0FBTyxJQUFHLE9BQU81QixFQUFFMkI7QUFBSyxhQUFFbEIsRUFBRXFRLFVBQVU0OUQsZUFBYSxTQUFTMXVFO1lBQUcsSUFBR0EsRUFBRTRCLFdBQVNQLEtBQUttZ0MsUUFBTyxNQUFNbGdDLEVBQUVvbUUsc0JBQXNCMW5FLEVBQUU0QixRQUFPUCxLQUFLbWdDLFFBQU9uZ0MsS0FBS3lEO0FBQUssYUFBRXJFLEVBQUVxUSxVQUFVNjlELGNBQVksU0FBUzN1RTtZQUFHLElBQUlXLElBQUVVO1lBQUssT0FBT0EsS0FBSytyRSxpQkFBZS9yRSxLQUFLK3JFLGVBQWVwb0UsS0FBSSxTQUFVN0MsR0FBRWI7Y0FBRyxPQUFPYSxJQUFFQSxFQUFFVCxLQUFLZixHQUFFWCxFQUFFc0IsTUFBSXRCLEVBQUVzQjtBQUFHLGtCQUFHdEI7QUFBQyxhQUFFUyxFQUFFcVEsVUFBVTg5RCxlQUFhLFNBQVM1dUU7WUFBRyxJQUFJVyxJQUFFVTtZQUFLLE9BQU9rSSxNQUFNQyxRQUFReEosS0FBR0EsRUFBRWdGLEtBQUksU0FBVWhGO2NBQUcsT0FBT1csRUFBRTBzRSxtQkFBaUJydEUsSUFBRVcsRUFBRTBzRSxnQkFBZ0JydEUsS0FBR0E7QUFBRSxrQkFBR3FCLEtBQUtnc0UsbUJBQWlCcnRFLElBQUVxQixLQUFLZ3NFLGdCQUFnQnJ0RSxLQUFHQTtBQUFDLGFBQUVTLEVBQUVxUSxVQUFVKzlELFlBQVUsU0FBUzd1RTtZQUFHLElBQUlXLElBQUVVLEtBQUttdEUsUUFBUXh1RSxJQUFHbUMsSUFBRWQsS0FBS290RSxnQkFBZ0J6dUUsSUFBR3NCLElBQUVELEtBQUtzdEUsWUFBWTN1RTtZQUFHcUIsS0FBS3F0RSxhQUFhcHRFO1lBQUcsSUFBSW1CLElBQUU7Y0FBQzA2RCxRQUFPeDhEO2NBQUU2Z0MsUUFBT2xnQztjQUFFaTNELFVBQVNwMkQ7O1lBQUcsT0FBT2QsS0FBS2lzRSxxQkFBbUI3cUUsSUFBRXBCLEtBQUtpc0UsaUJBQWlCN3FFLEtBQUlBO0FBQUMsYUFBRWhDLEVBQUVxUSxVQUFVZytELHNCQUFvQixTQUFTOXVFLEdBQUVXLEdBQUV3QjtZQUFHLElBQUllLElBQUU3QixNQUFLZSxLQUFFLEdBQUdrQixLQUFFLEdBQUdPLElBQUUsR0FBRXJCLElBQUUsR0FBRWlELElBQUUsTUFBSy9FLElBQUUsTUFBS0UsSUFBRSxNQUFLdUYsSUFBRWhFLEVBQUVxL0IsT0FBTyxNQUFJLG1CQUFpQnIvQixFQUFFcS9CLE9BQU8sTUFBSXIvQixFQUFFcS9CLE9BQU8sR0FBR2tvQyxNQUFJdm5FLEVBQUVxL0IsT0FBTyxHQUFHa29DLE1BQUksTUFBS25vRSxNQUFJWSxFQUFFcS9CLE9BQU8sTUFBSSxtQkFBaUJyL0IsRUFBRXEvQixPQUFPLE1BQUlyL0IsRUFBRXEvQixPQUFPLEdBQUc1NkIsUUFBTXpFLEVBQUVxL0IsT0FBTyxHQUFHajZCLFNBQU9wRixFQUFFcS9CLE9BQU8sR0FBR25mLElBQUc5YixJQUFFaEYsS0FBR1ksRUFBRXEvQixPQUFPLEdBQUc1NkIsS0FBS2hGLFNBQU8sR0FBRWYsSUFBRSxFQUFDLElBQUlKLEVBQUU7Y0FBQ3FFLE1BQUs7Y0FBbUJwRCxNQUFLO2NBQXVCOC9CLFFBQU87Y0FBRTRyQyxnQkFBZSxFQUFDM3FFLEVBQUU4bkUsMkJBQTBCLFNBQVN2cUU7Z0JBQUcsU0FBUUE7QUFBQztjQUFHcXRFLGlCQUFnQjVxRSxFQUFFd3BFO2dCQUF1QixJQUFJeHJFLEVBQUU7Y0FBQ3FFLE1BQUs7Y0FBd0JwRCxNQUFLO2NBQTRCOC9CLFFBQU87Y0FBRTRyQyxnQkFBZSxFQUFDO2NBQU1DLGlCQUFnQjVxRSxFQUFFa3BFO2dCQUFvQyxJQUFJbHJFLEVBQUU7Y0FBQ3FFLE1BQUs7Y0FBVXBELE1BQUs7Y0FBYzgvQixRQUFPO2NBQUU0ckMsZ0JBQWUsRUFBQzNxRSxFQUFFa29FLHVCQUFzQmxvRSxFQUFFNG5FO2dCQUFvQyxJQUFJNXBFLEVBQUU7Y0FBQ3FFLE1BQUs7Y0FBdUJwRCxNQUFLO2NBQTJCOC9CLFFBQU87Y0FBRTRyQyxnQkFBZSxFQUFDO2NBQU1DLGlCQUFnQjVxRSxFQUFFaXBFO2dCQUE2QixJQUFJN29FLEVBQUU7Y0FBQ2lDLE1BQUs7Y0FBWVYsTUFBSztjQUFNK29FLGVBQWM7Z0JBQUM0QixpQkFBZ0I7a0JBQUNDLGtCQUFpQjtrQkFBV3h0QyxRQUFPO2tCQUFFNnJDLGlCQUFnQjVxRSxFQUFFd3BFOzs7a0JBQTBCeGpFLElBQUUsQ0FBQztZQUFFNUgsRUFBRThJLFNBQVMzSjtjQUFJQSxFQUFFdXVFLGVBQWU5bEUsSUFBR3pJLEVBQUV5dEUsaUJBQWV2cUUsRUFBRXVxRTtBQUFlO1lBQUcsSUFBSS9rRSxJQUFFLFNBQVM3RixHQUFFcEMsR0FBRUksR0FBRTZILEdBQUVTO2NBQUcsS0FBSXRJLEdBQUUsT0FBT3NJLE1BQUlBLElBQUU7Z0JBQUNtYixhQUFZO2tCQUFXMnFELGNBQWN4cEUsSUFBR3d1RCxhQUFhdnpEO0FBQUU7bUJBQUttQyxJQUFFRixFQUFFakQsUUFBUW1ELEtBQUc0RixFQUFFeW1FLHNCQUFzQnZ1RSxJQUFJcXZCLE9BQU0sU0FBVXJ2QjtnQkFBR3dJLEVBQUVtYixlQUFjbGlCLEtBQUUsR0FBR00sRUFBRXlzRSxXQUFXO2tCQUFDcG1FLFNBQVE7a0JBQTJDbkMsTUFBS2pHO21CQUFHWCxFQUFFb3ZFLGNBQWFwdkUsRUFBRUw7QUFBUSxrQkFBR1UsTUFBSyxlQUFnQk07Z0JBQUcsS0FBSUEsTUFBSUEsRUFBRW1wRSxXQUFVLE1BQU0sSUFBSWhnRSxNQUFNO2dCQUFxQyxJQUFHNUcsRUFBRXFxRSxtQkFBaUJycUUsRUFBRXFxRSxnQkFBZ0I4QixxQkFBbUIxdUUsSUFBRXVDLEVBQUVxcUUsZ0JBQWdCOEIsaUJBQWlCMXVFLEtBQUlYLEVBQUVvdkUsYUFBYWp2QixVQUFVLGdCQUFnQnYrQyxTQUFPLEdBQUU7a0JBQUMsSUFBSU87a0JBQUUsU0FBRyxNQUFTVSxLQUFHLE1BQUlMLEdBQUU7b0JBQUMsSUFBSWxCLFVBQVFtSCxFQUFFNm1FLGlCQUFpQixXQUFVN3NFLElBQUVuQixJQUFFQSxFQUFFaWIsT0FBSztvQkFBSzliLElBQUVHLEtBQUd1QixVQUFRc0csRUFBRTZtRSxpQkFBaUIxdUUsRUFBRWltRSxTQUFPLFFBQU1qbUUsSUFBRXVCLEdBQUVuQyxFQUFFb3ZFLGFBQWFqckQsS0FBSyxnQkFBZTNoQixHQUFFN0IsR0FBRThCLE9BQUtOLFVBQVFzRyxFQUFFNm1FLGlCQUFpQjN1RSxFQUFFZ3BFO29CQUFhL29FLElBQUV1QixHQUFFbkMsRUFBRW92RSxhQUFhanJELEtBQUssZ0JBQWUzaEIsR0FBRTdCLEdBQUU4QixNQUFJekMsRUFBRW92RSxhQUFhanJELEtBQUssZ0JBQWUzaEIsR0FBRTdCLEdBQUU4QjtBQUFFO21CQUFFaEMsS0FBRzBCLE1BQUkxQixNQUFJK0IsS0FBSWMsS0FBRSxHQUFHZCxNQUFJVSxFQUFFMHFFLGdDQUE4QixNQUFJemtFLEVBQUVtYixlQUFjdGtCLEVBQUVvdkUsYUFBYS91QjtBQUFxQjtnQkFBQyxPQUFPMS9DO0FBQUUsa0JBQUdOLE1BQUssZUFBZ0JNO2dCQUFHLElBQUdZLE1BQUlhLEdBQUU7a0JBQUMsS0FBSXpCLEVBQUVxckUsaUJBQWdCLE9BQU8xb0UsTUFBSTZGLEVBQUVtYixlQUFjbGlCLEtBQUUsU0FBU00sRUFBRXlzRSxXQUFXN3RFLEVBQUVrbkUsNEJBQTRCN25FLElBQUdYLEVBQUVvdkUsY0FBYXB2RSxFQUFFTCxRQUFPLE1BQUtnQjtrQkFBRyxJQUFJd0I7a0JBQUU7b0JBQUlBLFVBQVFzRyxFQUFFOG1FLFFBQVE1dUUsRUFBRXFyRTtBQUEwQixvQkFBVCxPQUFNaHNFLElBQUc7a0JBQUMsS0FBSW1DLEdBQUU7bUJBQU8sTUFBS3hCLEVBQUVpZ0UsVUFBUXI2RCxLQUFHcEUsRUFBRVAsU0FBTyxLQUFHNUIsRUFBRW92RSxhQUFhanJELEtBQUssV0FBVXhqQixJQUFHdUMsRUFBRXFxRSxtQkFBaUJycUUsRUFBRXFxRSxnQkFBZ0JpQywwQkFBd0J4dkUsRUFBRU4sUUFBUXdELEVBQUVxcUUsZ0JBQWdCaUMsd0JBQXdCN3VFLE1BQUlYLEVBQUVOLFFBQVFpQjtrQkFBRzJDLEtBQUd0RCxFQUFFb3ZFLGFBQWEvdUIsd0JBQXNCMzlDLEVBQUV5c0UsV0FBVzd0RSxFQUFFbW5FLDJCQUEyQjluRSxJQUFHWCxFQUFFb3ZFLGNBQWFwdkUsRUFBRUwsUUFBTyxNQUFLZ0I7a0JBQUcyQyxLQUFHNkYsRUFBRW1iLGVBQWNsaUIsS0FBRTtBQUFFO2dCQUFDLE9BQU96QjtBQUFFLGtCQUFHTixNQUFLLGVBQWdCTTtnQkFBRyxLQUFJWSxNQUFJYSxHQUFFO2tCQUFDLElBQUd6QixFQUFFOHVFLFlBQVV0cEUsS0FBR0EsTUFBSXhGLEVBQUVrckUsWUFBUyxNQUFLbHJFLEVBQUVpZ0UsVUFBUSxVQUFRamdFLEVBQUVpZ0UsZUFBUSxNQUFTamdFLEVBQUVpZ0UsUUFBTyxJQUFHMzdELEtBQUtFLFVBQVV4RSxHQUFFLE1BQUs7bUJBQUcsTUFBS0EsRUFBRWlnRSxVQUFRLFVBQVFqZ0UsRUFBRWlnRSxRQUFPO29CQUFJLElBQUlqK0Q7b0JBQUUsS0FBSU8sRUFBRWlyRSxnQkFBYywwQkFBd0JqckUsRUFBRXhCLFFBQU0sNkJBQTJCd0IsRUFBRXhCLE1BQUssT0FBSztvQkFBRyxJQUFJbUIsSUFBRVYsRUFBRXEvQixPQUFPO29CQUFHLElBQUcsNkJBQTJCdCtCLEVBQUV4QixNQUFLO3NCQUFDLElBQUlqQixJQUFFMEIsRUFBRXEvQixPQUFPLElBQUczOUIsSUFBRWYsRUFBRW9DLE1BQU16RTtzQkFBR29DLElBQUVKLEVBQUVpb0UsMEJBQTBCO3dCQUFDOWpFLE1BQUsvQyxFQUFFK0M7d0JBQUt5YixJQUFHeGUsRUFBRXdlO3dCQUFHOWEsTUFBSzFELEVBQUUwRDt3QkFBS21pRSxLQUFJN2xFLEVBQUVzZSxTQUFTalo7d0JBQWNrWixVQUFTdmUsRUFBRXVlLFdBQVN2ZSxFQUFFdWUsU0FBU2xaLHFCQUFjO3dCQUFPckosT0FBTWdFLEVBQUVoRSxNQUFNcUo7O0FBQWU7b0JBQUMsTUFBS3ZHLFVBQVFPLEVBQUV3c0UsZ0JBQWdCN3NFLEdBQUVsQyxFQUFFZ3BFLGVBQWMsT0FBSztvQkFBR2puRSxFQUFFeXNFLFdBQVc3dEUsRUFBRSttRSxrQ0FBa0MxbEUsRUFBRTRRLFFBQU81USxFQUFFby9CLFdBQVVwaEMsSUFBR1gsRUFBRW92RSxjQUFhcHZFLEVBQUVMLFFBQU8sTUFBS2dCO0FBQW1HLG9CQUFoRyxPQUFNd0I7b0JBQUdPLEVBQUV5c0UsV0FBVzd0RSxFQUFFb25FLHNDQUFzQy9uRSxJQUFHWCxFQUFFb3ZFLGNBQWFwdkUsRUFBRUwsUUFBTyxNQUFLZ0I7QUFBRSx5QkFBTStCLEVBQUV5c0UsV0FBVzd0RSxFQUFFcW5FLHlCQUF5QmhvRSxJQUFHWCxFQUFFb3ZFLGNBQWFwdkUsRUFBRUwsUUFBTyxNQUFLZ0IsU0FBUVgsRUFBRW92RSxhQUFhanJELEtBQUssV0FBVXhqQjtrQkFBR1gsRUFBRU4sUUFBUWlCLElBQUcyQyxLQUFHdEQsRUFBRW92RSxhQUFhL3VCO2tCQUFxQi84QyxLQUFHNkYsRUFBRW1iLGVBQWNsaUIsS0FBRTtBQUFFO0FBQUUsa0JBQUc0dEIsT0FBTTtnQkFBWW5zQixLQUFJcEQsSUFBRW9ELElBQUUsS0FBR1gsRUFBRTJxRSw4QkFBNEIxa0UsRUFBRW1iLGVBQWNsaUIsS0FBRSxHQUFHTSxFQUFFeXNFLFdBQVc3dEUsRUFBRWluRSxpQkFBaUIsc0NBQW9DcmxFLEVBQUUycUUsNEJBQTBCLDBHQUF5Rzd0RSxFQUFFb3ZFLGNBQWFwdkUsRUFBRUwsV0FBU2tFLElBQUUsS0FBR1gsRUFBRXlxRSw0QkFBMEJ4a0UsRUFBRW1iO2dCQUFjbGlCLEtBQUUsR0FBR00sRUFBRXlzRSxXQUFXN3RFLEVBQUVpbkUsaUJBQWlCLHNDQUFvQ3JsRSxFQUFFeXFFLDBCQUF3Qix5R0FBd0czdEUsRUFBRW92RSxjQUFhcHZFLEVBQUVMO0FBQVM7Y0FBR3dKLEVBQUVtYixlQUFjbGlCLEtBQUUsR0FBR00sRUFBRXlzRSxXQUFXO2dCQUFDcG1FLFNBQVE7Z0JBQWtGbkMsTUFBSy9GO2lCQUFHYixFQUFFb3ZFLGNBQWFwdkUsRUFBRUw7QUFBTyxlQUFFd0osSUFBRSxTQUFTbko7Y0FBRyxJQUFJVyxLQUFFO2NBQUcsTUFBTXdCLElBQUU7Z0JBQUtzRCxJQUFFa3FFLFlBQVlqbkUsRUFBRTJtQixLQUFLLE1BQUtydkIsSUFBRSxJQUFJa0QsRUFBRTRxRTtBQUEwQjtjQUFHLEtBQUl6c0UsS0FBS29zRSxlQUFleDZCLFNBQVM1dUIsSUFBRyxPQUFPbGlCO2NBQUlzRyxFQUFFaWIsVUFBVSxvQkFBa0IsU0FBVXBpQixHQUFFbUIsR0FBRUM7Z0JBQUcsSUFBRy9CLEtBQUUsR0FBR1csTUFBSW1CLEdBQUUsT0FBT047Z0JBQUl1RyxFQUFFMUksSUFBRSxHQUFHc0IsR0FBRSxHQUFFb0I7QUFBRyxtQkFBR2hDLElBQUU4a0IsWUFBVztnQkFBTTdrQixLQUFHd0I7QUFBSSxrQkFBRSxNQUFJZCxLQUFLMHNFO0FBQW1CLGNBQUUxK0MsS0FBS2h1QjtZQUFNb0gsRUFBRXltRSxzQkFBc0J2dUUsR0FBR04sTUFBSyxTQUFVTTtjQUFHQSxLQUFHQSxFQUFFbXBFLGFBQVc5cEUsRUFBRW92RSxhQUFhanZCLFVBQVUsZ0JBQWdCditDLFNBQU8sS0FBR3VILEVBQUV4SSxJQUFHK0gsRUFBRS9ILElBQUUsTUFBS3lCLEtBQUcrRztBQUFJLGdCQUFHNm1CLE9BQU07Y0FBWTV0QixLQUFHK0c7QUFBSTtBQUFFO1VBQUUsSUFBSWpHLElBQUUsU0FBU2xELEdBQUVXO1lBQUcsT0FBTSxtQkFBaUJYLElBQUVXLEVBQUVpdkUsT0FBTzV2RSxLQUFHQSxLQUFHLG1CQUFpQkEsS0FBR0EsRUFBRXdpQixXQUFTeGlCLEVBQUVpaEIsYUFBV2poQixJQUFFVyxFQUFFaXZFLE9BQU81dkUsRUFBRWlPO0FBQWM7VUFBRSxTQUFTN0wsRUFBRXBDLEdBQUVXO1lBQUcsT0FBTyxJQUFJbEIsU0FBUSxDQUFFMEMsR0FBRWI7Y0FBSztnQkFBSSxJQUFJbUIsSUFBRSxJQUFJaEMsRUFBRTtrQkFBQ3FFLE1BQUs7a0JBQW1CcEQsTUFBSztrQkFBdUI4L0IsUUFBTztrQkFBRTRyQyxnQkFBZSxFQUFDLFNBQVNwdEU7b0JBQUcsT0FBT0EsSUFBRTBDLEVBQUV5UyxNQUFNblYsS0FBRztBQUFRLHFCQUFFO29CQUFXLFFBQU07QUFBRTttQkFBS3F1RSxlQUFlcnVFLEVBQUV5dEUsaUJBQWdCOXFFLElBQUUsSUFBSWxDLEVBQUU7a0JBQUNxRSxNQUFLO2tCQUFjcEQsTUFBSztrQkFBZTgvQixRQUFPO21CQUFJNnNDLGVBQWVydUUsRUFBRXl0RTtnQkFBZ0JodUUsUUFBUTRuRCxJQUFJLEVBQUM1a0QsS0FBSUUsT0FBTXRDLE1BQU1MO2tCQUFJLE9BQU1zQixHQUFFbUIsS0FBR3pDO2tCQUFFLEtBQUksVUFBUVcsRUFBRXlELGFBQU0sTUFBU3pELEVBQUV5RCxTQUFPOUMsS0FBR0EsRUFBRWlyRSxlQUFjO29CQUFDLElBQUl2c0UsR0FBRXlDO29CQUFFOUIsRUFBRXloQixZQUFVcGlCLElBQUVXLEVBQUV5aEIsVUFBUzNmLElBQUU5QixFQUFFeWhCLGlCQUFnQnpoQixFQUFFeWhCLGFBQVdwaUIsSUFBRVcsRUFBRW9pQix3QkFBc0IsY0FBYXRnQixJQUFFOUIsRUFBRW1pQixnQkFBY3BnQixFQUFFeVMsTUFBTXpTLEVBQUUwbUUsS0FBSzluRSxFQUFFaXJFLGVBQWVsaEUsSUFBSTNJLEVBQUUwbUUsS0FBSyxJQUFJaitELElBQUl6SSxFQUFFMG1FLEtBQUtwcEU7b0JBQU1tQyxFQUFFO3NCQUFDMmdCLGNBQWFyZ0I7c0JBQUVzZ0Isc0JBQXFCL2lCOztBQUFHLHlCQUFLO29CQUFDLElBQUdXLEVBQUVvaUIsd0JBQXNCcGlCLEVBQUVtaUIsY0FBYSxNQUFNaFosTUFBTTtvQkFBb0MzSCxFQUFFO3NCQUFDaWdCLFVBQVMzZjs7QUFBRztBQUFFO0FBQWdCLGdCQUFiLE9BQU16QztnQkFBR3NCLEVBQUV0QjtBQUFFO0FBQUU7QUFBRTtVQUFDUyxFQUFFcVEsVUFBVXc5RCxZQUFVO1lBQVcsSUFBSXR1RSxJQUFFcUIsTUFBS1YsSUFBRSwwQkFBd0JYLEVBQUUwQixRQUFNLDZCQUEyQjFCLEVBQUUwQixNQUFLUyxJQUFFLGVBQWFuQyxFQUFFMEIsTUFBS2UsSUFBRTtjQUFXLElBQUlBLElBQUVFLEdBQUdoQyxJQUFHa0MsSUFBRTdDLEVBQUU2dUUsVUFBVXRsRSxNQUFNdUgsVUFBVTFKLE1BQU0xRixLQUFLd08sYUFBWXBOLElBQUUsU0FBU0gsR0FBRUc7Z0JBQUcsSUFBSXJDO2dCQUFFLElBQUdULEVBQUVtdUUsZ0JBQWNoc0UsS0FBR25DLEVBQUV3dEUsY0FBWTdxRSxLQUFHM0MsRUFBRTZ2RSxxQkFBcUIvc0UsS0FBR3JDLElBQUVxQyxFQUFFb0QsVUFBVSxNQUFJdkQsS0FBR0EsRUFBRWlFLFNBQU9uRyxJQUFFa0MsRUFBRWlFLEtBQUtWLFVBQVU7Z0JBQUt6RixJQUFHO2tCQUFDLElBQUl5QyxJQUFFbEQsRUFBRXd0RSxTQUFTc0MsZ0JBQWdCLFVBQVMsT0FBS3J2RSxJQUFHMkIsSUFBRTtrQkFBZ0JNLEVBQUV5c0UsV0FBVzd0RSxFQUFFOG1FLHVCQUF1QmxsRSxHQUFFZCxJQUFHSyxFQUFFMnNFLGNBQWEzc0UsRUFBRTlDLFFBQU9rRCxFQUFFMDFELFVBQVM7b0JBQUNobEQsUUFBT3JRO29CQUFFNitCLFdBQVUzL0I7O0FBQUcsdUJBQUs7a0JBQUM7b0JBQUlVLElBQUU5QyxFQUFFNHVFLGFBQWE5ckU7QUFBZSxvQkFBWixPQUFNOUM7b0JBQUcyQyxJQUFFM0M7QUFBQztrQkFBQyxJQUFHOEMsYUFBYWdILFVBQVFuSCxJQUFFRyxJQUFHSCxHQUFFLE9BQU9BLEVBQUVnSyxVQUFRaEssSUFBRUEsRUFBRWdLLFFBQU9qSyxFQUFFeXNFLFdBQVd4c0UsR0FBRUYsRUFBRTJzRSxjQUFhM3NFLEVBQUU5QyxRQUFPa0QsRUFBRTAxRDtrQkFBVTExRCxFQUFFMDFELFlBQVUxMUQsRUFBRTAxRCxTQUFTLE1BQUt6MUQsSUFBR25DLEtBQUc4QixFQUFFMnNFLGFBQWFqckQsS0FBSyxtQkFBa0JyaEIsSUFBRzlDLEVBQUU4dUUsb0JBQW9CcnNFLEdBQUVLLEdBQUVELE1BQUlGLEtBQUdGLEVBQUUvQyxRQUFRb0Q7QUFBRTtBQUFDLGlCQUFFckMsSUFBRSxTQUFTRTtnQkFBRyxJQUFJd0IsSUFBRTtxQkFBSVU7a0JBQUVzNkQsUUFBTztrQkFBeUIzN0IsUUFBTyxFQUFDN2dDLEVBQUVvdkU7O2dCQUFpQi92RSxFQUFFeXRFLGVBQWU5TSxLQUFLeCtELEdBQUVXO0FBQUUsaUJBQUVRLElBQUUsU0FBU3RELEdBQUVXO2dCQUFHLElBQUl3QjtnQkFBRSxJQUFHeEIsS0FBR0EsRUFBRStzRSxZQUFVL3NFLEVBQUUrc0UsU0FBU2tDLFVBQVFqdkUsRUFBRStzRSxTQUFTa0MsT0FBT2h1RSxRQUFPLElBQUcsMEJBQXdCNUIsRUFBRW05RCxRQUFPO2tCQUFDLElBQUk3N0QsSUFBRXRCLEVBQUV3aEMsT0FBTztrQkFBRyxLQUFJci9CLElBQUVlLEVBQUU1QixLQUFHLG1CQUFpQkEsSUFBRUEsRUFBRWlHLE9BQUssTUFBSzVHLEVBQUUrc0UsY0FBWXZyRSxFQUFFOGUsWUFBVyxlQUFjM2YsSUFBRTJELEtBQUtDLE1BQU1ELEtBQUtFLFVBQVU3RCxLQUFLaUc7a0JBQUs1RyxFQUFFc3RFLGlCQUFlM3NFLEVBQUUwdUUsVUFBUTF1RSxFQUFFMHVFLFFBQU1ydkUsRUFBRXN0RSxlQUFjdHRFLEVBQUV1dEUsb0JBQWtCNXNFLEVBQUUydUUsYUFBVzN1RSxFQUFFMnVFLFdBQVN0dkUsRUFBRXV0RTtrQkFBaUJ2dEUsRUFBRXF0RSxrQkFBZ0Ixc0UsRUFBRTBpRCxXQUFTMWlELEVBQUUwaUQsU0FBT3JqRCxFQUFFcXRFLHFCQUFvQnJ0RSxFQUFFK3NFLFNBQVN3QyxnQkFBZ0I1dUUsR0FBRWEsRUFBRThlLFlBQVk1Z0IsS0FBS0ksR0FBR3V2QixPQUFNLFNBQVVod0I7b0JBQUcsSUFBRyxxQkFBbUJ5QyxFQUFFMnNFLGFBQWFqdkIsYUFBVzE5QyxFQUFFMnNFLGFBQWFqdkIsVUFBVSxTQUFTditDLFFBQU87c0JBQUM7d0JBQUlhLEVBQUUyc0UsYUFBYWpyRCxLQUFLLFNBQVFua0I7QUFBWSx3QkFBVCxPQUFNQSxJQUFHO3NCQUFDeUMsRUFBRTJzRSxhQUFhL3VCLHNCQUFxQjU5QyxFQUFFMnNFLGFBQWFwL0MsT0FBTSxZQUFhO0FBQUU7b0JBQUN2dEIsRUFBRTlDLE9BQU9LO0FBQUc7QUFBRSx1QkFBTSxJQUFHLGVBQWFBLEVBQUVtOUQsUUFBTztrQkFBQyxJQUFJejZELElBQUUxQyxFQUFFd2hDLE9BQU87a0JBQUcsS0FBSXIvQixJQUFFZSxFQUFFbEQsRUFBRXdoQyxPQUFPLElBQUc3Z0MsRUFBRStzRSxjQUFZdnJFLEVBQUU4ZSxZQUFXO29CQUFDLElBQUl0ZSxJQUFFaEMsRUFBRStzRSxTQUFTN3VELEtBQUtuYyxHQUFFUCxFQUFFOGU7b0JBQVksT0FBT2poQixFQUFFdTRELFlBQVV2NEQsRUFBRXU0RCxTQUFTLE1BQUs1MUQsRUFBRW8vQixpQkFBZ0J0L0IsRUFBRS9DLFFBQVFpRCxFQUFFby9CO0FBQVU7QUFBQztnQkFBQyxPQUFPcGhDLEVBQUU4c0UsZUFBZTlNLEtBQUszZ0UsR0FBRThDO0FBQUU7Y0FBRSxPQUFPbkMsS0FBR2tDLEVBQUUyK0IsT0FBTyxNQUFJLG1CQUFpQjMrQixFQUFFMitCLE9BQU8sV0FBSSxNQUFTMytCLEVBQUUyK0IsT0FBTyxHQUFHcGYsa0JBQVcsTUFBU3ZmLEVBQUUyK0IsT0FBTyxHQUFHemUsNkJBQXNCLE1BQVNsZ0IsRUFBRTIrQixPQUFPLEdBQUcxZSxnQkFBYzFnQixFQUFFcEMsR0FBRTZDLEVBQUUyK0IsT0FBTyxJQUFJbmhDLE1BQU04QjtxQkFBSSxNQUFTQSxFQUFFaWdCLFdBQVN2ZixFQUFFMitCLE9BQU8sR0FBR3BmLFdBQVNqZ0IsRUFBRWlnQixnQkFBUyxNQUFTamdCLEVBQUU0Z0IsNkJBQXNCLE1BQVM1Z0IsRUFBRTJnQixpQkFBZWpnQixFQUFFMitCLE9BQU8sR0FBR3plLHVCQUFxQjVnQixFQUFFNGdCO2dCQUFxQmxnQixFQUFFMitCLE9BQU8sR0FBRzFlLGVBQWEzZ0IsRUFBRTJnQixlQUFjbmlCLEtBQUc2a0IsWUFBVztrQkFBTS9pQixFQUFFMnNFLGFBQWFqckQsS0FBSyxXQUFVdGhCO0FBQUcsb0JBQUUsSUFBR1MsRUFBRVQsR0FBRTdDO0FBQUcscUJBQUlXLEtBQUc2a0IsWUFBVztnQkFBTS9pQixFQUFFMnNFLGFBQWFqckQsS0FBSyxXQUFVdGhCO0FBQUcsa0JBQUUsSUFBR1MsRUFBRVQsR0FBRTdDLEtBQUlXLEtBQUc2a0IsWUFBVztnQkFBTS9pQixFQUFFMnNFLGFBQWFqckQsS0FBSyxRQUFPdGhCO0FBQUcsa0JBQUUsSUFBR0osRUFBRTJzRTtBQUFZO1lBQUUsT0FBTzNzRSxFQUFFMDZELFNBQU9uOUQsR0FBRXlDLEVBQUV1a0QsVUFBUTNsRCxLQUFLMmxELFFBQVEzM0IsS0FBS2h1QixPQUFNb0I7QUFBQyxhQUFFaEMsRUFBRXFRLFVBQVU0K0Qsa0JBQWdCLFNBQVMxdkUsR0FBRVc7WUFBRyxJQUFJd0IsSUFBRWQ7WUFBSyxPQUFPLElBQUk1QixTQUFRLFNBQVU2QixHQUFFbUI7Y0FBRyxJQUFJaEMsRUFBRTtnQkFBQ3FFLE1BQUs7Z0JBQU9wRCxNQUFLO2dCQUFXOC9CLFFBQU87Z0JBQUVnc0MsVUFBU3JyRSxFQUFFcXJFO2dCQUFTVyxlQUFhO2lCQUFLRSxlQUFlbHNFLEVBQUVzckUsZUFBbkcsQ0FBbUh6dEUsR0FBRTBDLEVBQUU0bUUsWUFBWTNvRSxJQUFJTixNQUFLO2dCQUFZaUIsR0FBRTtBQUFJLGtCQUFHMHVCLE9BQU0sU0FBVWh3QjtnQkFBR0EsRUFBRXVULFNBQU9qUyxFQUFFO2tCQUFDaVMsUUFBT3ZULEVBQUV1VDtrQkFBT3d1QixXQUFVL2hDLEVBQUUraEM7cUJBQVl0L0IsRUFBRXpDO0FBQUc7QUFBRztBQUFFLGFBQUVTLEVBQUVxUSxVQUFVKytELHVCQUFxQixTQUFTN3ZFO1lBQUcsT0FBTSxtQkFBaUJBLE1BQUlBLEVBQUU0QixTQUFPLEtBQUcsSUFBRSxNQUFJLEtBQUcsaUJBQWU1QixFQUFFa0csVUFBVSxHQUFFO0FBQUcsYUFBRXpGLEVBQUVxUSxVQUFVazJDLFVBQVE7WUFBVyxJQUFJaG5ELElBQUVxQixLQUFLd3RFLFVBQVV0bEUsTUFBTXVILFVBQVUxSixNQUFNMUYsS0FBS3dPO1lBQVksT0FBT2xRLEVBQUU2RSxTQUFPeEQsS0FBS3V0RSxhQUFhdi9DLEtBQUtodUIsT0FBTXJCO0FBQUMsYUFBRUEsRUFBRWlDLFVBQVF4QjtBQUFBQTtRQUFHLE1BQUssQ0FBQ1QsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE9BQU1NLElBQUUsU0FBU3pDO1lBQUcsSUFBSVcsR0FBRXdCLEdBQUVNLElBQUUsSUFBSWhELFNBQVE7Y0FBWWtCLElBQUV1UCxVQUFVLElBQUcvTixJQUFFK04sVUFBVTtBQUFHO1lBQUcsSUFBR2xRLEdBQUUsT0FBTTtjQUFDTixTQUFRaUI7Y0FBRWhCLFFBQU93QztjQUFFaXRFLGNBQWEzc0U7O1lBQUcsSUFBSUMsSUFBRSxJQUFJcEI7WUFBRSxPQUFPbUIsRUFBRWlqQixVQUFRaGpCLEVBQUVnakIsU0FBUWpqQixFQUFFMGhCLE9BQUt6aEIsRUFBRXloQixNQUFLMWhCLEVBQUU0aEIsS0FBRzNoQixFQUFFMmhCLElBQUc1aEIsRUFBRXU5QyxPQUFLdDlDLEVBQUVzOUMsTUFBS3Y5QyxFQUFFb1AsTUFBSW5QLEVBQUVtUCxLQUFJcFAsRUFBRTA5QyxZQUFVejlDLEVBQUV5OUMsV0FBVTE5QyxFQUFFNjlDLGNBQVk1OUMsRUFBRTQ5QztZQUFZNzlDLEVBQUU4aEIsaUJBQWU3aEIsRUFBRTZoQixnQkFBZTloQixFQUFFNDlDLHFCQUFtQjM5QyxFQUFFMjlDLG9CQUFtQjtjQUFDM2dELFNBQVFpQjtjQUFFaEIsUUFBT3dDO2NBQUVpdEUsY0FBYTNzRTs7QUFBRTtVQUFFQSxFQUFFL0MsVUFBUSxTQUFTTTtZQUFHLElBQUlXLElBQUU4QixHQUFFO1lBQUksT0FBTzlCLEVBQUVqQixRQUFRTSxJQUFHVyxFQUFFeXVFO0FBQVksYUFBRXB2RSxFQUFFaUMsVUFBUVE7QUFBQUE7UUFBRyxNQUFLLENBQUN6QyxHQUFFVyxHQUFFd0I7VUFBSztVQUFhLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxNQUFNOEIsUUFBT3ZCLElBQUUsU0FBUzFDO1lBQUdxQixLQUFLb3NFLGlCQUFlenRFLEdBQUVxQixLQUFLOHVFLFdBQVM7QUFBRTtVQUFFenRFLEVBQUVvTyxVQUFVM0YsTUFBSSxTQUFTbkw7WUFBR3FCLEtBQUs4dUUsU0FBU3R1RSxLQUFLN0I7QUFBRSxhQUFFMEMsRUFBRW9PLFVBQVVzL0QsVUFBUTtZQUFXLElBQUlwd0UsSUFBRXFCLEtBQUs4dUUsVUFBU3h2RSxJQUFFVSxLQUFLZ3ZFLGVBQWVoaEQsS0FBS2h1QjtZQUFNQSxLQUFLb3NFLGVBQWU2QyxVQUFVdHdFLElBQUUsU0FBVW1DLEdBQUVPO2NBQUdBLElBQUUvQixFQUFFK0IsSUFBRzFDLEVBQUVnRixLQUFJLFNBQVVoRixHQUFFVztnQkFBRyxPQUFPK0IsRUFBRS9CLE1BQUksQ0FBQztBQUFFLGtCQUFHZ0osU0FBUSxTQUFVaEosR0FBRXdCO2dCQUFHLElBQUduQyxFQUFFbUMsR0FBR28yRCxVQUFTO2tCQUFDLElBQUc1M0QsS0FBR0EsRUFBRWdNLE9BQU0sT0FBTzNNLEVBQUVtQyxHQUFHbzJELFNBQVM5MUQsRUFBRWdsRSxjQUFjOW1FO2tCQUFJLEtBQUlXLEVBQUVpdkUsZ0JBQWdCNXZFLElBQUcsT0FBT1gsRUFBRW1DLEdBQUdvMkQsU0FBUzkxRCxFQUFFcWxFLGdCQUFnQm5uRTtrQkFBSTtvQkFBSVgsRUFBRW1DLEdBQUdvMkQsU0FBUyxNQUFLdjRELEVBQUVtQyxHQUFHMEMsU0FBTzdFLEVBQUVtQyxHQUFHMEMsT0FBT2xFLEVBQUVULFVBQVFTLEVBQUVUO0FBQWlDLG9CQUF6QixPQUFNUztvQkFBR1gsRUFBRW1DLEdBQUdvMkQsU0FBUzUzRDtBQUFFO0FBQUM7QUFBRTtBQUFHO0FBQUUsYUFBRStCLEVBQUVvTyxVQUFVdS9ELGlCQUFlLFNBQVNyd0U7WUFBRyxRQUFPQSxLQUFHLElBQUkwaUIsTUFBSyxDQUFFMWlCLEdBQUVXLE1BQUlYLEVBQUVpaEMsS0FBR3RnQyxFQUFFc2dDO0FBQUksYUFBRWpoQyxFQUFFaUMsVUFBUVM7QUFBQUE7UUFBRyxNQUFLMUM7VUFBSTtVQUFhLElBQUlXLElBQUUsTUFBS3dCLElBQUUsbUJBQWlCMlMsYUFBV0Esa0JBQVc7VUFBTyxLQUFJM1MsR0FBRTtZQUFJQSxJQUFFc3VCLFNBQVMsY0FBVEE7QUFBeUMsWUFBZixPQUFNendCO1lBQUdtQyxJQUFFRDtBQUFJO2VBQUMsTUFBU0MsRUFBRXF1RSxXQUFTN3ZFLElBQUV3QixFQUFFcXVFLGdCQUFTLE1BQVNydUUsRUFBRXN1RSxRQUFNdHVFLEVBQUVzdUUsS0FBS0Msb0JBQWtCdnVFLEVBQUVzdUUsS0FBS0MsZ0JBQWdCQyxjQUFZeHVFLEVBQUVzdUUsS0FBS0MsZ0JBQWdCL1AsT0FBS3grRCxFQUFFc3VFLEtBQUtDLGdCQUFnQkM7aUJBQWlCeHVFLEVBQUVzdUUsS0FBS0MsZ0JBQWdCQyxhQUFZeHVFLEVBQUVzdUUsS0FBS0MsZ0JBQWdCcnNELE1BQUlsaUIsRUFBRXN1RSxLQUFLQyxnQkFBZ0JFLGNBQVkseUJBQXVCenVFLEVBQUVzdUUsS0FBS0MsZ0JBQWdCRSxXQUFXN3NFLFlBQVllLFNBQU8zQyxFQUFFc3VFLEtBQUtDLGdCQUFnQnJzRCxLQUFHLFNBQVNya0IsR0FBRVc7WUFBRyxJQUFHLHFCQUFtQkEsR0FBRSxNQUFNLElBQUltSixNQUFNO1lBQXFELFdBQVM5SixJQUFFcUIsS0FBS3V2RSxXQUFXdnNELEdBQUcsU0FBTyxTQUFVcmtCO2NBQUcsSUFBSW1DLElBQUU7Y0FBR25DLElBQUVBLEVBQUUrUDtjQUFXO2dCQUFJNU4sSUFBRThDLEtBQUtDLE1BQU1sRjtBQUFpRSxnQkFBOUQsT0FBTW1DO2dCQUFHLE9BQU94QixFQUFFLElBQUltSixNQUFNLGlDQUErQjlKO0FBQUc7Y0FBQ21DLEVBQUU4K0IsT0FBSyxNQUFJOStCLEVBQUVnN0QsT0FBT2g2RCxRQUFRLG9CQUFrQnhDLEVBQUUsTUFBS3dCO0FBQUcsa0JBQUdkLEtBQUt1dkUsV0FBV3ZzRCxHQUFHcmtCLEdBQUVXO0FBQUUsY0FBR0EsSUFBRXdCLEVBQUVzdUUsS0FBS0Msa0JBQWlCMXdFLEVBQUVpQyxVQUFRdEI7QUFBQUE7UUFBRyxNQUFLLENBQUNYLEdBQUVXLEdBQUV3QjtVQUFLO1VBQWEsT0FBTXFsRSxhQUFZbG1FLEtBQUdhLEVBQUU7VUFBTSxJQUFJTSxJQUFFTixFQUFFLE1BQU04QixRQUFPdkIsSUFBRVAsRUFBRSxPQUFNUSxJQUFFUixFQUFFLE9BQU1VLElBQUVWLEVBQUUsT0FBTVcsSUFBRSxTQUFTOUMsRUFBRVcsR0FBRXdCO1lBQUdkLEtBQUs0eEMsV0FBUyxNQUFLNXhDLEtBQUt3dkUsWUFBVTd3RSxFQUFFNndFLFdBQVV4dkUsS0FBS3l2RSxZQUFZbndFLEdBQUV3QixJQUFHZCxLQUFLOHJFLGdCQUFjLElBQUl0K0M7QUFBRztVQUFFL3JCLEVBQUVpdUUsZ0JBQWNsdUUsR0FBRUMsRUFBRSt0RSxZQUFVO1lBQUNHLG1CQUFrQjd1RSxFQUFFO1lBQU04dUUsY0FBYTl1RSxFQUFFO1lBQU0rdUUsYUFBWS91RSxFQUFFO2FBQU9XLEVBQUVnTyxVQUFVZ2dFLGNBQVksU0FBUzl3RSxHQUFFVztZQUFHLElBQUl3QixJQUFFZDtZQUFLLElBQUdyQixLQUFHLG1CQUFpQkEsS0FBR3FCLEtBQUt3dkUsV0FBVSxJQUFHLGtCQUFrQmptRCxLQUFLNXFCLElBQUdBLElBQUUsSUFBSXFCLEtBQUt3dkUsVUFBVUksYUFBYWp4RSxTQUFRLElBQUcsZ0JBQWdCNHFCLEtBQUs1cUIsSUFBR0EsSUFBRSxJQUFJcUIsS0FBS3d2RSxVQUFVRyxrQkFBa0JoeEUsU0FBUSxJQUFHQSxLQUFHLG1CQUFpQlcsS0FBRyxxQkFBbUJBLEVBQUV3d0UsU0FBUW54RSxJQUFFLElBQUlxQixLQUFLd3ZFLFVBQVVLLFlBQVlseEUsR0FBRVcsU0FBUSxJQUFHWCxHQUFFLE1BQU0sSUFBSThKLE1BQU0scUNBQW1DOUosSUFBRTtZQUFLLElBQUdxQixLQUFLNHhDLFlBQVU1eEMsS0FBSzR4QyxTQUFTbStCLGFBQVcvdkUsS0FBS2d3RSxzQkFBcUJod0UsS0FBSzR4QyxXQUFTanpDLEtBQUcsTUFBS3FCLEtBQUs0eEMsWUFBVTV4QyxLQUFLNHhDLFNBQVM1dUIsSUFBRztjQUFDLHFCQUFtQnJrQixFQUFFZ25ELFVBQVEzbEQsS0FBSzR4QyxTQUFTNXVCLEdBQUcsWUFBVSxTQUFVcmtCO2dCQUFHLElBQUdBLEtBQUcsdUJBQXFCQSxFQUFFb0UsUUFBTXBFLEVBQUU0RyxNQUFLO2tCQUFDLE1BQU1qRyxJQUFFWCxFQUFFNEc7a0JBQUtqRyxFQUFFMndFLGdCQUFjbnZFLEVBQUVnckUsY0FBY3o4QyxJQUFJL3ZCLEVBQUUyd0UsaUJBQWVudkUsRUFBRWdyRSxjQUFjbGpFLElBQUl0SixFQUFFMndFLGNBQWMvWSxTQUFTLE1BQUs1M0QsRUFBRVQ7QUFBTztBQUFFLG9CQUFHbUIsS0FBSzR4QyxTQUFTNXVCLEdBQUcsU0FBTyxTQUFVcmtCLEdBQUVXO2lCQUFJWCxJQUFFQSxLQUFHVyxHQUFHdzhELFVBQVFuOUQsRUFBRXdoQyxVQUFReGhDLEVBQUV3aEMsT0FBTzh2QyxnQkFBY252RSxFQUFFZ3JFLGNBQWN6OEMsSUFBSTF3QixFQUFFd2hDLE9BQU84dkMsaUJBQWVudkUsRUFBRWdyRSxjQUFjbGpFLElBQUlqSyxFQUFFd2hDLE9BQU84dkMsY0FBYy9ZLFNBQVMsTUFBS3Y0RCxFQUFFd2hDLE9BQU90aEM7QUFBUSxtQkFBR21CLEtBQUs0eEMsU0FBUzV1QixHQUFHLFlBQVU7Z0JBQVlsaUIsRUFBRWdyRSxjQUFjeGpFLFNBQVEsU0FBVTNKO2tCQUFHQSxFQUFFc3hFLGFBQWFDO0FBQWM7QUFBRyxtQkFBR2x3RSxLQUFLNHhDLFNBQVM1dUIsR0FBRyxVQUFRLFNBQVVya0I7Z0JBQUdtQyxFQUFFZ3JFLGNBQWN4akUsU0FBUSxTQUFVaEo7a0JBQUdBLEVBQUU0M0QsU0FBU3Y0RDtBQUFHO0FBQUc7Y0FBRyxNQUFNVyxJQUFFLFNBQVNYO2dCQUFHbUMsRUFBRXF2RSxtQkFBbUJ4eEUsT0FBS21DLEVBQUVzdkUsaUJBQWlCenhFLE9BQUttQyxFQUFFZ3JFLGNBQWN4akUsU0FBUSxTQUFVaEo7a0JBQUdBLEVBQUU0M0QsU0FBUzkxRCxFQUFFd2xFLHFCQUFxQmpvRSxLQUFJbUMsRUFBRWdyRSxjQUFjaDVDLE9BQU94ekIsRUFBRTJ3RSxhQUFhcndDO0FBQUkscUJBQUc5K0IsRUFBRTh3QyxZQUFVOXdDLEVBQUU4d0MsU0FBUzl1QixRQUFNaGlCLEVBQUU4d0MsU0FBUzl1QixLQUFLLFNBQVExaEIsRUFBRXdsRSxxQkFBcUJqb0UsTUFBS21DLEVBQUU4d0MsWUFBVTl3QyxFQUFFOHdDLFNBQVM5dUIsUUFBTWhpQixFQUFFOHdDLFNBQVM5dUIsS0FBSyxPQUFNbmtCO0FBQUU7Y0FBRXFCLEtBQUs0eEMsU0FBUzV1QixHQUFHLGNBQWExakI7QUFBRTtBQUFDLGFBQUVtQyxFQUFFZ08sVUFBVTZ2RCxPQUFLLFNBQVMzZ0UsR0FBRVc7WUFBRyxJQUFHQSxJQUFFQSxLQUFHLFlBQVcsSUFBR1UsS0FBSzR4QyxVQUFTLE9BQU90eUMsRUFBRThCLEVBQUVvbEU7WUFBbUIsT0FBTTFLLFFBQU9oN0QsR0FBRXEvQixRQUFPNytCLEtBQUczQyxHQUFFNkMsSUFBRUgsRUFBRW1zRSxVQUFVMXNFLEdBQUVRLElBQUdHLElBQUV6QixLQUFLcXdFLHVCQUF1Qi93RSxHQUFFa0M7WUFBRyxJQUFHeEIsS0FBSzR4QyxTQUFTK1QsU0FBUTFsRCxFQUFFRCxLQUFLNHhDLFNBQVMrVCxRQUFRMzNCLEtBQUtodUIsS0FBSzR4QyxVQUFsQzN4QyxDQUE2QztjQUFDNjdELFFBQU9oN0Q7Y0FBRXEvQixRQUFPNytCO2VBQUdoQyxTQUFRLElBQUdVLEtBQUs0eEMsU0FBUzA5QixXQUFVdHZFLEtBQUs0eEMsU0FBUzA5QixVQUFVOXRFLEdBQUVDLFNBQU87Y0FBQyxLQUFJekIsS0FBSzR4QyxTQUFTMHRCLE1BQUssTUFBTSxJQUFJNzJELE1BQU07Y0FBMkR6SSxLQUFLNHhDLFNBQVMwdEIsS0FBSzk5RCxHQUFFQztBQUFFO0FBQUMsYUFBRUEsRUFBRWdPLFVBQVV3L0QsWUFBVSxTQUFTdHdFLEdBQUVXO1lBQUcsS0FBSVUsS0FBSzR4QyxVQUFTLE9BQU90eUMsRUFBRThCLEVBQUVvbEU7WUFBbUIsSUFBSTFsRSxJQUFFTyxFQUFFaXZFLGVBQWUzeEU7WUFBR3FCLEtBQUs0eEMsU0FBUzV4QyxLQUFLNHhDLFNBQVMwOUIsWUFBVSxjQUFZLFFBQVF4dUUsSUFBRSxTQUFVbkMsR0FBRW1DO2NBQUcsT0FBT25DLElBQUVXLEVBQUVYLEtBQUd1SixNQUFNQyxRQUFRckgsVUFBUXhCLEVBQUUsTUFBS3dCLEtBQUd4QixFQUFFOEIsRUFBRXFsRSxnQkFBZ0IzbEU7QUFBSTtBQUFFLGFBQUVXLEVBQUVnTyxVQUFVOGdFLGtCQUFnQixTQUFTNXhFLEdBQUVXO1lBQUcsS0FBSVUsS0FBSzR4QyxTQUFTNXVCLElBQUcsTUFBTSxJQUFJdmEsTUFBTSxpREFBK0N6SSxLQUFLNHhDLFNBQVNsdkMsWUFBWWU7WUFBTXpELEtBQUs4ckUsY0FBY2g4RCxJQUFJblIsRUFBRWloQyxJQUFHO2NBQUNzM0IsVUFBUzUzRDtjQUFFMndFLGNBQWF0eEU7O0FBQUcsYUFBRThDLEVBQUVnTyxVQUFVK2dFLHFCQUFtQixTQUFTN3hFLEdBQUVXO1lBQUcsSUFBR1UsS0FBSzhyRSxjQUFjejhDLElBQUkxd0IsSUFBRztjQUFDLElBQUltQyxJQUFFZCxLQUFLOHJFLGNBQWNsakUsSUFBSWpLLEdBQUdzeEUsYUFBYW5sRCxRQUFRL25CO2NBQUssT0FBTy9DLEtBQUs4ckUsY0FBY2g1QyxPQUFPbjBCLFNBQVFxQixLQUFLcy9ELEtBQUs7Z0JBQUN4RCxRQUFPaDdELElBQUU7Z0JBQWVxL0IsUUFBTyxFQUFDeGhDO2lCQUFJVztBQUFFO1lBQUMscUJBQW1CQSxLQUFHQSxFQUFFO0FBQUssYUFBRW1DLEVBQUVnTyxVQUFVdWdFLHFCQUFtQixTQUFTcnhFO1lBQUc7Y0FBSSxJQUFJVyxJQUFFVTtjQUFLLE9BQU9BLEtBQUs4ckUsY0FBY3ppRSxPQUFLLEtBQUdySixLQUFLOHJFLGNBQWN4akUsU0FBUSxTQUFVeEgsR0FBRWI7Z0JBQUd0QixLQUFHLGNBQVltQyxFQUFFMkMsUUFBTW5FLEVBQUVreEUsbUJBQW1CdndFO0FBQUcsbUJBQUdELEtBQUs0eEMsU0FBU3VWLFNBQU9ubkQsS0FBSzR4QyxTQUFTdVYsVUFBUTtBQUF1RSxjQUFwRSxPQUFNeG9EO2NBQUcsTUFBTSxJQUFJOEosTUFBTSx1Q0FBdUM5SjtBQUFJO0FBQUMsYUFBRThDLEVBQUVnTyxVQUFVMGdFLHFCQUFtQixTQUFTeHhFO1lBQUcsT0FBTSxtQkFBaUJBLE1BQUksRUFBQyxNQUFLbWpDLFNBQVNuakMsRUFBRTRKLFVBQU8sTUFBSzVKLEVBQUU4eEU7QUFBUyxhQUFFaHZFLEVBQUVnTyxVQUFVMmdFLG1CQUFpQixTQUFTenhFO1lBQUcsT0FBTSxvQkFBa0JBLEtBQUdBO0FBQUMsYUFBRThDLEVBQUVnTyxVQUFVNGdFLHlCQUF1QixTQUFTMXhFLEdBQUVXO1lBQUcsT0FBTyxTQUFTd0IsR0FBRWI7Y0FBRyxPQUFPQSxLQUFHQSxFQUFFMi9CLE1BQUl0Z0MsRUFBRXNnQyxPQUFLMy9CLEVBQUUyL0IsS0FBR2poQyxFQUFFLElBQUk4SixNQUFNLHFCQUFxQnhJLEVBQUUyL0IsaUJBQWlCdGdDLEVBQUVzZ0MsVUFBVWg4QixLQUFLRSxVQUFVeEUsU0FBT3dCLElBQUVuQyxFQUFFbUMsS0FBR2IsS0FBR0EsRUFBRXFMLFFBQU0zTSxFQUFFeUMsRUFBRWdsRSxjQUFjbm1FLE1BQUlvQixFQUFFNnRFLGdCQUFnQmp2RSxVQUFRdEIsRUFBRSxNQUFLc0IsRUFBRXBCLFVBQVFGLEVBQUV5QyxFQUFFcWxFLGdCQUFnQnhtRTtBQUFHO0FBQUMsYUFBRXRCLEVBQUVpQyxVQUFRO1lBQUM4dkUsU0FBUWp2RTtZQUFFa3ZFLGNBQWFydkU7O0FBQUM7UUFBRyxNQUFLM0M7VUFBSTtVQUFhLElBQUlXLElBQUU7WUFBQ3N4RSxXQUFVO1lBQUVwRCxXQUFVLFNBQVM3dUUsR0FBRW1DO2NBQUcsS0FBSW5DLEdBQUUsTUFBTSxJQUFJOEosTUFBTSxxREFBbUQ3RSxLQUFLRSxVQUFVaEQsS0FBRztjQUFNLE9BQU94QixFQUFFc3hFLGFBQVk7Z0JBQUNDLFNBQVE7Z0JBQU1qeEMsSUFBR3RnQyxFQUFFc3hFO2dCQUFVOVUsUUFBT245RDtnQkFBRXdoQyxRQUFPci9CLEtBQUc7O0FBQUc7WUFBRW91RSxpQkFBZ0IsU0FBU3Z3RTtjQUFHLE9BQU91SixNQUFNQyxRQUFReEosS0FBR0EsRUFBRW15RSxNQUFNeHhFLEtBQUdBLEVBQUVYO2NBQUcsU0FBU1csRUFBRVg7Z0JBQUcsVUFBU0EsS0FBR0EsRUFBRTJNLFNBQU8sVUFBUTNNLEVBQUVreUUsV0FBUyxtQkFBaUJseUUsRUFBRWloQyxNQUFJLG1CQUFpQmpoQyxFQUFFaWhDLFdBQUksTUFBU2poQyxFQUFFRTtBQUFPO0FBQUM7WUFBRXl4RSxnQkFBZSxTQUFTM3hFO2NBQUcsT0FBT0EsRUFBRWdGLEtBQUksU0FBVWhGO2dCQUFHLE9BQU9XLEVBQUVrdUUsVUFBVTd1RSxFQUFFbTlELFFBQU9uOUQsRUFBRXdoQztBQUFRO0FBQUU7O1VBQUd4aEMsRUFBRWlDLFVBQVF0QjtBQUFBQTtRQUFHLE1BQUssQ0FBQ1gsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE9BQU1NLElBQUUsU0FBU3pDO1lBQUdxQixLQUFLeUQsT0FBSzlFLEVBQUU4RSxNQUFLekQsS0FBSytDLE9BQUtwRSxFQUFFb0UsTUFBSy9DLEtBQUs4ckUsZ0JBQWNudEUsRUFBRW10RSxpQkFBZSxDQUFDLEdBQUU5ckUsS0FBS29zRSxpQkFBZTtBQUFJO1VBQUVockUsRUFBRXFPLFVBQVVzOUQsb0JBQWtCLFNBQVNwdUU7WUFBR3FCLEtBQUtvc0UsaUJBQWV6dEU7QUFBQyxhQUFFeUMsRUFBRXFPLFVBQVV5OUQsaUJBQWUsU0FBU3Z1RTtZQUFHLElBQUlXLElBQUVVLEtBQUtpdEUsYUFBWW5zRSxJQUFFZCxLQUFLeUQsS0FBS29KLE1BQU07WUFBSy9MLEVBQUVQLFNBQU8sS0FBRzVCLEVBQUVtQyxFQUFFLE1BQUluQyxFQUFFbUMsRUFBRSxPQUFLLENBQUMsR0FBRW5DLEVBQUVtQyxFQUFFLElBQUlBLEVBQUUsTUFBSXhCLEtBQUdYLEVBQUVtQyxFQUFFLE1BQUl4QjtBQUFDLGFBQUU4QixFQUFFcU8sVUFBVXc5RCxZQUFVO1lBQVcsSUFBSXR1RSxJQUFFcUI7WUFBSyxPQUFPO2NBQVdyQixFQUFFbXRFLGNBQWNqOUQsVUFBVSxPQUFLZ0QsRUFBUS9DLEtBQUssa0JBQWdCbEwsS0FBS0UsVUFBVStLLFVBQVUsTUFBSTtjQUF1QyxJQUFJdlAsSUFBRSxJQUFJVyxFQUFFO2dCQUFDZ3dFLGNBQWF0eEUsRUFBRW10RSxjQUFjajlELFVBQVUsT0FBSyxDQUFDO2dCQUFFdTlELGdCQUFlenRFLEVBQUV5dEU7Z0JBQWVycEUsTUFBS3BFLEVBQUVvRTs7Y0FBTyxPQUFPekQsRUFBRStpQixVQUFVcGpCLE1BQU1LLEdBQUV1UDtBQUFVO0FBQUMsYUFBRWxRLEVBQUVpQyxVQUFRO1lBQUNrckUsZUFBYzFxRTtZQUFFNnVFLGNBQWFod0U7O0FBQUM7UUFBRyxNQUFLLENBQUN0QixHQUFFVyxHQUFFd0I7VUFBSztVQUFhLElBQUliLElBQUVhLEVBQUUsTUFBTThCLFFBQU94QixJQUFFTixFQUFFLE9BQU1PLElBQUVQLEVBQUUsTUFBTStxRTtVQUFXLFNBQVN2cUUsRUFBRTNDO1lBQUcsT0FBT0E7QUFBQztVQUFDLFNBQVM2QyxFQUFFN0M7WUFBR3lDLEVBQUVmLEtBQUtMLE9BQU1BLEtBQUs0L0IsS0FBRyxNQUFLNS9CLEtBQUtrM0QsV0FBUzUxRCxHQUFFdEIsS0FBSzZPLFlBQVUsTUFBSzdPLEtBQUsrd0UsWUFBVSxNQUFLL3dFLEtBQUs4cUIsVUFBUTtjQUFDbWxELGNBQWF0eEUsRUFBRXN4RTtjQUFhbHRFLE1BQUtwRSxFQUFFb0U7Y0FBS3FwRSxnQkFBZXp0RSxFQUFFeXRFOztBQUFlO1VBQUM1cUUsRUFBRWlPLFlBQVV2TixPQUFPOFYsT0FBTzVXLEVBQUVxTyxZQUFXak8sRUFBRWlPLFVBQVUvTSxjQUFZbEIsR0FBRUEsRUFBRWlPLFVBQVV1aEUsbUJBQWlCLFNBQVNyeUU7WUFBRyxJQUFHLHFCQUFtQkEsRUFBRUEsRUFBRTRCLFNBQU8sSUFBRyxPQUFPNUIsRUFBRTJCO0FBQUssYUFBRWtCLEVBQUVpTyxVQUFVd2hFLGdCQUFjLFNBQVN0eUU7WUFBRyxJQUFJVyxJQUFFVSxLQUFLOHFCLFFBQVFtbEQ7WUFBYSxJQUFHM3dFLE1BQUlBLElBQUUsQ0FBQyxJQUFHQSxFQUFFNmdDLFdBQVM3Z0MsRUFBRTZnQyxTQUFPLElBQUd4aEMsRUFBRTRCLFdBQVNqQixFQUFFNmdDLFFBQU8sTUFBTWxnQyxFQUFFb21FLHNCQUFzQjFuRSxFQUFFNEIsUUFBT2pCLEVBQUU2Z0MsUUFBTzdnQyxFQUFFcXVFO0FBQWlCLGFBQUVuc0UsRUFBRWlPLFVBQVV5aEUsZUFBYSxTQUFTdnlFO1lBQUcsSUFBSVcsSUFBRVUsS0FBSzhxQixRQUFRbWxEO1lBQWEsT0FBTzN3RSxLQUFHQSxFQUFFeXNFLGlCQUFlenNFLEVBQUV5c0UsZUFBZXBvRSxLQUFJLFNBQVVyRSxHQUFFd0I7Y0FBRyxPQUFPeEIsSUFBRUEsRUFBRVgsRUFBRW1DLE1BQUluQyxFQUFFbUM7QUFBRyxrQkFBR25DO0FBQUMsYUFBRTZDLEVBQUVpTyxVQUFVMGhFLGdCQUFjLFNBQVN4eUU7WUFBRyxJQUFJVyxJQUFFVSxLQUFLOHFCLFFBQVFtbEQ7WUFBYSxPQUFPM3dFLEtBQUdBLEVBQUUwc0UsbUJBQWlCcnRFLElBQUVXLEVBQUUwc0UsZ0JBQWdCcnRFLEtBQUdBO0FBQUMsYUFBRTZDLEVBQUVpTyxVQUFVMmhFLGFBQVcsU0FBU3p5RTtZQUFHLElBQUlXLElBQUU7WUFBRyxJQUFHVSxLQUFLazNELFdBQVNsM0QsS0FBS2d4RSxpQkFBaUJyeUUsTUFBSTJDLEdBQUV0QixLQUFLcXhFLHVCQUFxQnJ4RSxLQUFLcXhFLHFCQUFtQjF5RSxFQUFFc3dCLFNBQVFqdkIsS0FBSzhxQixRQUFRbWxELGFBQWF0QyxxQkFBbUIzdEUsS0FBS3F4RSxxQkFBbUJyeEUsS0FBSzhxQixRQUFRbWxELGFBQWF0QztZQUFtQjN0RSxLQUFLNk8sY0FBWTdPLEtBQUs2TyxZQUFVN08sS0FBS2t4RSxhQUFhdnlFLElBQUdxQixLQUFLaXhFLGNBQWNqeEUsS0FBSzZPLFlBQVdsUSxJQUFFLEtBQUlXLEVBQUVrQixLQUFLUixLQUFLcXhFO1lBQW9CL3hFLElBQUVBLEVBQUVnVSxPQUFPdFQsS0FBSzZPLFlBQVdsUSxFQUFFNEIsUUFBTyxNQUFNLElBQUlrSSxNQUFNO1lBQW9GLE9BQU07Y0FBQ3F6RCxRQUFPOTdELEtBQUs4cUIsUUFBUS9uQixPQUFLO2NBQWFvOUIsUUFBTzdnQzs7QUFBRSxhQUFFa0MsRUFBRWlPLFVBQVV3VCxjQUFZLFNBQVN0a0I7WUFBR3FCLEtBQUs4cUIsUUFBUXNoRCxlQUFlb0UsbUJBQW1CeHdFLEtBQUs0L0IsSUFBR2poQyxJQUFHcUIsS0FBSzQvQixLQUFHLE1BQUs1L0IsS0FBSyt3RSxZQUFVLE1BQUsvd0UsS0FBS2cvQztBQUFvQixhQUFFeDlDLEVBQUVpTyxVQUFVNFMsWUFBVTtZQUFXLElBQUkxakIsSUFBRXFCLE1BQUtWLElBQUU0SSxNQUFNdUgsVUFBVTFKLE1BQU0xRixLQUFLd08sWUFBVy9OLElBQUVkLEtBQUtveEUsV0FBVzl4RTtZQUFHLEtBQUl3QixHQUFFLE9BQU9kO1lBQUssS0FBSUEsS0FBSzhxQixRQUFRc2hELGVBQWV4NkIsVUFBUyxPQUFPenRCLFlBQVc7Y0FBWSxJQUFJN2tCLElBQUUsSUFBSW1KLE1BQU07Y0FBb0I5SixFQUFFdTRELFNBQVM1M0QsR0FBRSxNQUFLWCxJQUFHQSxFQUFFbWtCLEtBQUssU0FBUXhqQjtBQUFHLGdCQUFFLElBQUdVO1lBQUssS0FBSUEsS0FBSzhxQixRQUFRc2hELGVBQWV4NkIsU0FBUzV1QixJQUFHLE9BQU9tQixZQUFXO2NBQVksSUFBSTdrQixJQUFFLElBQUltSixNQUFNLHlEQUF1RDlKLEVBQUVtc0IsUUFBUXNoRCxlQUFleDZCLFNBQVNsdkMsWUFBWWU7Y0FBTTlFLEVBQUV1NEQsU0FBUzUzRCxHQUFFLE1BQUtYLElBQUdBLEVBQUVta0IsS0FBSyxTQUFReGpCO0FBQUcsZ0JBQUUsSUFBR1U7WUFBSyxJQUFHQSxLQUFLK3dFLGFBQVcvd0UsS0FBSzhxQixRQUFRcVYsVUFBUSxtQkFBaUJuZ0MsS0FBSzhxQixRQUFRcVYsV0FBU3IvQixFQUFFcS9CLE9BQU8sS0FBR25nQyxLQUFLOHFCLFFBQVFxVjtZQUFPci9CLEVBQUVxL0IsT0FBTyxHQUFHMHBDLFlBQVV4b0UsRUFBRTZuRSwwQkFBMEJscEUsS0FBSyt3RSxZQUFVLEtBQUkvd0UsS0FBSzQvQixNQUFJNS9CLEtBQUtpakIsZUFBY2pqQixLQUFLOHFCLFFBQVFxVixTQUFPci9CLEVBQUVxL0IsT0FBTztZQUFHLFdBQVNyL0IsRUFBRXEvQixPQUFPLE1BQUlyL0IsRUFBRXEvQixPQUFPLE1BQUksbUJBQWlCci9CLEVBQUVxL0IsT0FBTyxNQUFJci9CLEVBQUVxL0IsT0FBTyxHQUFHN2hCLGVBQWUsZ0JBQWN5akIsU0FBU2poQyxFQUFFcS9CLE9BQU8sR0FBRzBwQyxZQUFXO2NBQUMsSUFBSTVwRSxJQUFFaUMsT0FBT3NnQixPQUFPLENBQUMsR0FBRTFoQixFQUFFcS9CLE9BQU87Y0FBSW5nQyxLQUFLOHFCLFFBQVFzaEQsZUFBZTlNLEtBQUs7Z0JBQUN4RCxRQUFPO2dCQUFjMzdCLFFBQU8sRUFBQ2xnQztrQkFBSSxTQUFVWCxHQUFFd0I7Z0JBQUd4QixJQUFFNmtCLFlBQVc7a0JBQVl4bEIsRUFBRXU0RCxTQUFTNTNELEdBQUUsTUFBS1gsSUFBR0EsRUFBRW1rQixLQUFLLFNBQVF4akI7QUFBRyxvQkFBRSxLQUFHd0IsRUFBRXdILFNBQVEsU0FBVWhKO2tCQUFHLElBQUl3QixJQUFFbkMsRUFBRXd5RSxjQUFjN3hFO2tCQUFHWCxFQUFFdTRELFNBQVMsTUFBS3AyRCxHQUFFbkMsSUFBR0EsRUFBRW1rQixLQUFLLFFBQU9oaUI7QUFBRztBQUFHO0FBQUU7WUFBQyxPQUFNLG1CQUFpQkEsRUFBRXEvQixPQUFPLGFBQVdyL0IsRUFBRXEvQixPQUFPLEdBQUcwcEMsV0FBVTdwRSxLQUFLOHFCLFFBQVFzaEQsZUFBZTlNLEtBQUt4K0QsSUFBRSxTQUFVeEIsR0FBRVc7ZUFBSVgsS0FBR1csS0FBR3RCLEVBQUVpaEMsS0FBRzMvQixHQUFFdEIsRUFBRW05RCxTQUFPaDdELEVBQUVxL0IsT0FBTyxJQUFHeGhDLEVBQUVtc0IsUUFBUXNoRCxlQUFlbUUsZ0JBQWdCNXhFLElBQUUsU0FBVVcsR0FBRXdCO2dCQUFHeEIsS0FBR1gsRUFBRXU0RCxTQUFTNTNELElBQUUsR0FBR1gsSUFBR0EsRUFBRW1rQixLQUFLLFNBQVF4akIsT0FBSzRJLE1BQU1DLFFBQVFySCxPQUFLQSxJQUFFLEVBQUNBLE1BQUlBLEVBQUV3SCxTQUFRLFNBQVVoSjtrQkFBRyxJQUFJd0IsSUFBRW5DLEVBQUV3eUUsY0FBYzd4RTtrQkFBRyxJQUFHWCxFQUFFb3lFLFlBQVVqd0UsS0FBRyxtQkFBaUJBLElBQUVBLEVBQUV3bkUsY0FBWSxNQUFLLHFCQUFtQjNwRSxFQUFFbXNCLFFBQVFtbEQsYUFBYXFCLHFCQUFvQixPQUFPM3lFLEVBQUVtc0IsUUFBUW1sRCxhQUFhcUIsb0JBQW9CanhFLEtBQUsxQixHQUFFbUM7a0JBQUduQyxFQUFFbWtCLEtBQUssUUFBT2hpQixJQUFHbkMsRUFBRXU0RCxTQUFTLE1BQUtwMkQsR0FBRW5DO0FBQUc7QUFBSSxtQkFBR0EsRUFBRW1rQixLQUFLLGFBQVk3aUIsTUFBSWtrQixZQUFXO2dCQUFZeGxCLEVBQUV1NEQsU0FBUzUzRCxJQUFFLEdBQUdYLElBQUdBLEVBQUVta0IsS0FBSyxTQUFReGpCO0FBQUcsa0JBQUU7QUFBRyxpQkFBR1U7QUFBSSxhQUFFd0IsRUFBRWlPLFVBQVV5Z0UsY0FBWTtZQUFXbHdFLEtBQUs4cUIsUUFBUXNoRCxlQUFlb0UsbUJBQW1CeHdFLEtBQUs0L0IsS0FBSTUvQixLQUFLNC9CLEtBQUcsTUFBSzUvQixLQUFLcWlCLFVBQVVyaUIsS0FBS2szRDtBQUFTLGFBQUV2NEQsRUFBRWlDLFVBQVFZO0FBQUFBO1FBQUcsTUFBSyxDQUFDN0MsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFYSxFQUFFLE1BQU0rcUUsWUFBV3pxRSxJQUFFTixFQUFFLE9BQU1PLElBQUVQLEVBQUU7VUFBTW5DLEVBQUVpQyxVQUFRLFNBQVNqQztZQUFHLElBQUlXLElBQUUsU0FBU0E7Y0FBRyxJQUFJd0I7Y0FBRSxPQUFPeEIsRUFBRWl5RSxZQUFVNXlFLEVBQUVXLEVBQUVpeUUsY0FBWTV5RSxFQUFFVyxFQUFFaXlFLFlBQVUsQ0FBQyxJQUFHendFLElBQUVuQyxFQUFFVyxFQUFFaXlFLGFBQVd6d0UsSUFBRW5DLEdBQUVXLEVBQUVreUUsV0FBU2x5RSxFQUFFa3lFLFFBQVFscEUsU0FBUSxTQUFVaEo7Z0JBQUdBLGFBQWE4QixNQUFJOUIsSUFBRSxJQUFJOEIsRUFBRTlCLEtBQUlBLEVBQUU0dEUsZUFBZXBzRSxJQUFHeEIsRUFBRXl0RSxrQkFBa0JwdUUsRUFBRTh5RTtBQUFpQixtQkFBRzl5RTtBQUFDO1lBQUUsT0FBT1csRUFBRXVzRSxhQUFXNXJFLEdBQUVYLEVBQUU4ZixRQUFNL2QsR0FBRS9CLEVBQUVveUUsU0FBT3R3RSxHQUFFOUI7QUFBQztBQUFBO1FBQUcsTUFBSyxDQUFDWCxHQUFFVyxHQUFFd0I7VUFBSyxNQUFNYixJQUFFYSxFQUFFLE9BQU1NLElBQUVOLEVBQUU7VUFBTW5DLEVBQUVpQyxVQUFRO1lBQUMrd0UsYUFBWSxDQUFDaHpFLEdBQUVXO2NBQUssSUFBR0EsSUFBRTRJLE1BQU11SCxVQUFVMUosTUFBTTFGLEtBQUtmLEtBQUlYLEdBQUUsTUFBTSxJQUFJOEosTUFBTTtjQUFvRHZHLE9BQU93RyxlQUFlL0osR0FBRSxtQkFBa0I7Z0JBQUNpSyxLQUFJLE1BQUlqSyxFQUFFaXpFO2dCQUFVOWhFLEtBQUl4USxLQUFHWCxFQUFFOHdFLFlBQVlud0U7Z0JBQUdxSixhQUFXO2dCQUFHdVAsZUFBYTtrQkFBSzVZLEVBQUUsTUFBSUEsRUFBRSxHQUFHbXlFLGtCQUFnQjl5RSxFQUFFOHlFLGtCQUFnQm55RSxFQUFFLEdBQUdteUUsa0JBQWdCOXlFLEVBQUU4eUUsa0JBQWdCLElBQUl4eEUsRUFBRXl3RSxRQUFRcHhFLEVBQUUsSUFBR0EsRUFBRTtjQUFJWCxFQUFFK3dFLGdCQUFjenZFLEVBQUV5d0UsUUFBUWhCLGVBQWMvd0UsRUFBRTZ3RSxZQUFVdnZFLEVBQUV5d0UsUUFBUWxCLFdBQVU3d0UsRUFBRWl6RSxZQUFVanpFLEVBQUU4eUUsZ0JBQWdCNy9CO2NBQVNqekMsRUFBRTh3RSxnQkFBYzl3RSxFQUFFOHdFLGNBQVksQ0FBQ253RSxHQUFFd0IsT0FBS25DLEVBQUU4eUUsZ0JBQWdCaEMsWUFBWW53RSxHQUFFd0IsSUFBR25DLEVBQUVpekUsWUFBVWp6RSxFQUFFOHlFLGdCQUFnQjcvQjtlQUFTLEtBQUtqekMsRUFBRW91RSxvQkFBa0J6dEU7Z0JBQUlYLEVBQUU4eUUsa0JBQWdCbnlFLEdBQUVYLEVBQUVpekUsWUFBVXR5RSxFQUFFc3lDO0FBQUFBLGlCQUFVanpDLEVBQUVrekUsZUFBYTV4RSxFQUFFMHdFLGFBQWEzaUQsS0FBSyxNQUFLcnZCLEVBQUU4eUUsa0JBQWlCOXlFLEVBQUVtekUsU0FBTzF3RSxFQUFFekM7QUFBQztZQUFHb3pFLGNBQWFwekU7Y0FBSUEsRUFBRSt3RSxnQkFBY3p2RSxFQUFFeXdFLFFBQVFoQixlQUFjL3dFLEVBQUU2d0UsWUFBVXZ2RSxFQUFFeXdFLFFBQVFsQjtBQUFBQTs7QUFBVTtRQUFHLE1BQUssQ0FBQzd3RSxHQUFFVyxHQUFFd0I7VUFBSyxJQUFJYixJQUFFYSxFQUFFLE1BQU15akIsUUFBT25qQixJQUFFTixFQUFFLE9BQU1PLElBQUVQLEVBQUUsTUFBTUUsSUFBR00sSUFBRVIsRUFBRSxNQUFNSSxJQUFHTSxJQUFFLElBQUlILEdBQUUsU0FBVTFDLEdBQUVXO1lBQUcsUUFBT1gsRUFBRXFFLE1BQU0sYUFBV2tGLE1BQU1DLFFBQVE3SSxNQUFJQSxLQUFHLG1CQUFpQkEsS0FBRyxTQUFPQSxFQUFFb0QsWUFBWWUsT0FBS25FLElBQUVBLEVBQUVvUDtBQUFXO1VBQUcsU0FBU2pOLEtBQUk7VUFBQyxJQUFJckMsSUFBRSxZQUFXO1VBQUVBLEVBQUVxUSxVQUFVdWlFLDBCQUF3QixTQUFTcnpFO1lBQUcsUUFBTyxxQkFBbUJBLEtBQUcsbUJBQWlCQSxLQUFHQSxPQUFLQSxJQUFFeUMsRUFBRTZ3RSw2QkFBNkJ0ekUsS0FBSXlDLEVBQUV3bkUsS0FBS2pxRSxHQUFHb0gsTUFBTSxHQUFFO0FBQUcsYUFBRTNHLEVBQUVxUSxVQUFVeWlFLHVCQUFxQixTQUFTdnpFO1lBQUcsUUFBTyxxQkFBbUJBLEtBQUcsbUJBQWlCQSxLQUFHQSxPQUFLQSxJQUFFeUMsRUFBRTZ3RSw2QkFBNkJ0ekUsS0FBSXlDLEVBQUV3bkUsS0FBS2pxRTtBQUFFLGFBQUVTLEVBQUVxUSxVQUFVMGlFLGtCQUFnQixTQUFTeHpFLEdBQUVXO1lBQUcsT0FBT1UsS0FBS295RSxpQkFBaUIsRUFBQ3p6RSxLQUFHLEVBQUNXO0FBQUcsYUFBRUYsRUFBRXFRLFVBQVUyaUUsbUJBQWlCLFNBQVN6ekUsR0FBRVc7WUFBRyxJQUFJd0IsSUFBRWQ7WUFBSyxPQUFPckIsSUFBRW1DLEVBQUV1eEUsU0FBUzF6RSxJQUFHVyxJQUFFQSxFQUFFcUUsS0FBSSxTQUFVckUsR0FBRVc7Y0FBRyxJQUFJbUIsSUFBRXpDLEVBQUVzQjtjQUFHLElBQUcsbUJBQWlCbUIsS0FBR0EsRUFBRTJCLFNBQU8zQixJQUFFQSxFQUFFMkIsT0FBTXpELElBQUV3QixFQUFFd3hFLFlBQVlseEUsR0FBRTlCLElBQUcsbUJBQWlCOEIsS0FBR0EsRUFBRTBnQyxTQUFTLFVBQVM7Z0JBQUMsTUFBTW5qQyxJQUFFNkMsRUFBRTJLLFVBQVU3SyxFQUFFNEUsS0FBSzlFLEtBQUluQixJQUFFLENBQUN0QixHQUFFVztrQkFBSyxJQUFHLFlBQVVYLEVBQUU4RSxNQUFLO29CQUFDLEtBQUk5RSxFQUFFb0UsS0FBS0MsTUFBTSxjQUFhLE9BQU8xRCxFQUFFcUUsS0FBS3JFLEtBQUdXLEVBQUV1QixFQUFFMkssVUFBVTdLLEVBQUU0RSxLQUFLdkgsRUFBRW9FLEtBQUt5QixRQUFRLE1BQUssT0FBTWxGO29CQUFLLE1BQU13QixJQUFFb0MsU0FBU3ZFLEVBQUVvRSxLQUFLQyxNQUFNLGFBQWE7b0JBQUksSUFBRzFELEVBQUVpQixXQUFTTyxHQUFFLE1BQU0sSUFBSTJILE1BQU07b0JBQXNELE9BQU9uSixFQUFFcUUsS0FBS3JFLEtBQUdXLEVBQUV1QixFQUFFMkssVUFBVTdLLEVBQUU0RSxLQUFLdkgsRUFBRW9FLEtBQUt5QixRQUFRLFdBQVUsT0FBTWxGO0FBQUk7a0JBQUNYLEVBQUVvTixPQUFPekQsU0FBUSxDQUFFM0osR0FBRXlDO29CQUFLLFlBQVV6QyxFQUFFOEUsT0FBS3hELEVBQUV0QixHQUFFVyxFQUFFOEIsTUFBSTlCLEVBQUU4QixLQUFHTixFQUFFd3hFLFlBQVkzekUsRUFBRThFLE1BQUtuRSxFQUFFOEI7QUFBSTtBQUFDO2dCQUFHbkIsRUFBRXRCLEdBQUVXO0FBQUU7Y0FBQyxPQUFPQTtBQUFFLGlCQUFHa0MsRUFBRWdHLE9BQU83SSxHQUFFVztBQUFFLGFBQUVGLEVBQUVxUSxVQUFVNGlFLFdBQVMsU0FBUzF6RTtZQUFHLElBQUlXLElBQUVVLE1BQUtjLElBQUU7WUFBRyxPQUFPbkMsRUFBRTJKLFNBQVEsU0FBVTNKO2NBQUcsSUFBRyxtQkFBaUJBLEtBQUcsZUFBYUEsRUFBRW9FLFNBQU9wRSxJQUFFdUQsT0FBT3NnQixPQUFPLENBQUMsR0FBRTdqQixHQUFFO2dCQUFDb0UsTUFBSzttQkFBYXpELEVBQUVpekUseUJBQXlCNXpFLElBQUc7Z0JBQUMsSUFBSXNCLElBQUVpQyxPQUFPOFAsS0FBS3JULEdBQUc7Z0JBQUdtQyxFQUFFTixLQUFLMEIsT0FBT3NnQixPQUFPbGpCLEVBQUVrekUscUJBQXFCdnlFLElBQUc7a0JBQUNvRCxZQUFXL0QsRUFBRW16RSx1QkFBdUI5ekUsRUFBRXNCOztBQUFNLHFCQUFNYSxFQUFFTixLQUFLN0I7QUFBRyxpQkFBR21DO0FBQUMsYUFBRTFCLEVBQUVxUSxVQUFVOGlFLDJCQUF5QixTQUFTNXpFO1lBQUcsT0FBTSxtQkFBaUJBLFVBQUcsTUFBU0EsRUFBRTBFLG1CQUFZLE1BQVMxRSxFQUFFOEU7QUFBSSxhQUFFckUsRUFBRXFRLFVBQVUraUUsdUJBQXFCLFNBQVM3ekU7WUFBRyxJQUFJVyxJQUFFO1lBQVEsT0FBT1gsRUFBRW1ELFFBQVEsU0FBTyxNQUFJeEMsSUFBRSxXQUFVWCxJQUFFQSxFQUFFb0gsTUFBTSxJQUFHLEtBQUk7Y0FBQ2hELE1BQUt6RDtjQUFFbUUsTUFBSzlFOztBQUFFLGFBQUVTLEVBQUVxUSxVQUFVZ2pFLHlCQUF1QixTQUFTOXpFO1lBQUcsSUFBSVcsSUFBRVUsTUFBS2MsSUFBRTtZQUFHLE9BQU9vQixPQUFPOFAsS0FBS3JULEdBQUcySixTQUFRLFNBQVVySTtjQUFHLG1CQUFpQnRCLEVBQUVzQixLQUFHYSxFQUFFTixLQUFLO2dCQUFDaUQsTUFBS3hEO2dCQUFFOEMsTUFBS3BFLEVBQUVzQjttQkFBS2EsRUFBRU4sS0FBSzBCLE9BQU9zZ0IsT0FBT2xqQixFQUFFa3pFLHFCQUFxQnZ5RSxJQUFHO2dCQUFDb0QsWUFBVy9ELEVBQUVtekUsdUJBQXVCOXpFLEVBQUVzQjs7QUFBTyxpQkFBR2E7QUFBQyxhQUFFMUIsRUFBRXFRLFVBQVU2aUUsY0FBWSxTQUFTM3pFLEdBQUVXO1lBQUcsTUFBTXdCLElBQUUsSUFBSTJCLE9BQU8sb0JBQW1CcEIsSUFBRSxJQUFJb0IsT0FBTyx3QkFBdUJuQixJQUFFLElBQUltQixPQUFPLHNCQUFxQmpCLElBQUUsSUFBSWlCLE9BQU87WUFBeUIsSUFBR3JCLEVBQUVpeUIsS0FBSy96QixNQUFJOEIsRUFBRXN4RSxZQUFZcHpFLElBQUcsT0FBT0EsRUFBRW9QLFNBQVM7WUFBSSxJQUFHL1AsRUFBRXFFLE1BQU0zQixNQUFJMUMsRUFBRXFFLE1BQU14QixJQUFHLE9BQU9sQyxFQUFFcUUsS0FBS3JFLEtBQUdVLEtBQUtzeUUsWUFBWTN6RSxFQUFFNkYsUUFBUSxNQUFLLEtBQUlsRjtZQUFLLElBQUltQyxJQUFFOUMsRUFBRXFFLE1BQU0xQjtZQUFHLElBQUdHLEdBQUU7Y0FBQyxJQUFJOUMsSUFBRXVFLFNBQVN6QixFQUFFLE1BQUk7Y0FBTzlDLElBQUUsSUFBRVcsRUFBRWlCLFdBQVNqQixJQUFFOEIsRUFBRXV4RSxRQUFRcnpFLEdBQUVYO0FBQUc7WUFBQyxJQUFHOEMsSUFBRTlDLEVBQUVxRSxNQUFNbEMsSUFBR1csR0FBRTtjQUFDeEIsRUFBRTRrQixTQUFTdmxCLE9BQUtBLElBQUU4QixFQUFFMFMsTUFBTXhVO2NBQUksSUFBSVgsSUFBRXVFLFNBQVN6QixFQUFFO2NBQUksSUFBRzlDLEdBQUU7Z0JBQUMsSUFBSW1DLElBQUUsSUFBRW5DO2dCQUFFLFNBQU9XLEVBQUV1RixVQUFVLEdBQUUsT0FBSy9ELEtBQUcsSUFBR3hCLEVBQUVpQixTQUFPTyxNQUFJeEIsSUFBRThCLEVBQUV3eEUsU0FBU3R6RSxHQUFFLElBQUVYO0FBQUc7Y0FBQ1csRUFBRWlCLFNBQU8sS0FBRyxNQUFJakIsSUFBRSxRQUFNQSxFQUFFdUYsVUFBVTtBQUFHO1lBQUMsT0FBT3ZGO0FBQUMsYUFBRUYsRUFBRXFRLFVBQVVvakUscUJBQW1CLFNBQVNsMEUsR0FBRVc7WUFBRyxPQUFPVSxLQUFLZ3lFLHdCQUF3QnJ6RSxLQUFHcUIsS0FBS295RSxpQkFBaUJ6ekUsRUFBRW0wRSxRQUFPeHpFLEdBQUdrRixRQUFRLE1BQUs7QUFBRyxhQUFFcEYsRUFBRXFRLFVBQVVnL0Qsa0JBQWdCLFNBQVM5dkUsR0FBRVc7WUFBRyxPQUFPVSxLQUFLK3lFLGlCQUFpQixFQUFDcDBFLEtBQUdXLEdBQUc7QUFBRSxhQUFFRixFQUFFcVEsVUFBVXNqRSxtQkFBaUIsU0FBU3AwRSxHQUFFVztZQUFHLE9BQU9VLEtBQUtnekUscUJBQXFCcjBFLEdBQUVXLElBQUU7QUFBRyxhQUFFRixFQUFFcVEsVUFBVXVqRSx1QkFBcUIsU0FBU3IwRSxHQUFFVyxHQUFFd0I7WUFBRyxJQUFHbkMsRUFBRTRCLFNBQU8sT0FBS2pCLEtBQUcsU0FBT0EsS0FBRyxTQUFPQSxJQUFHLE1BQU0sSUFBSW1KLE1BQU07WUFBaVIsSUFBSXhJLElBQUV1QixFQUFFbUcsT0FBTzNILEtBQUtxeUUsU0FBUzF6RSxJQUFHLE9BQUtXLEVBQUVrRixRQUFRLE9BQU0sS0FBSTFELElBQUdNLElBQUUsSUFBSUs7WUFBRSxPQUFPTCxFQUFFNnhFLGFBQVcsR0FBRXQwRSxFQUFFMkosU0FBUSxTQUFVM0osR0FBRVc7Y0FBRyxJQUFJd0IsSUFBRWIsRUFBRW1CLEVBQUU2eEU7Y0FBWSxNQUFNNXhFLElBQUUsbUJBQWlCMUMsS0FBR0EsRUFBRW9FLFFBQU0sYUFBV3BFLEVBQUVvRTtjQUFLakMsSUFBRSxTQUFPQSxLQUFHTyxLQUFHLG1CQUFpQjFDLEtBQUcsYUFBV0EsSUFBRW1DLElBQUUsTUFBS00sRUFBRTlCLEtBQUd3QixJQUFHLHFCQUFtQm5DLEtBQUdBLEtBQUcsbUJBQWlCQSxNQUFJQSxFQUFFOEUsU0FBT3JDLEVBQUV6QyxFQUFFOEUsUUFBTTNDO2NBQUdNLEVBQUU2eEU7QUFBYSxpQkFBRzd4RTtBQUFDLGFBQUVoQyxFQUFFcVEsVUFBVXlqRSxZQUFVLFNBQVN2MEUsR0FBRVcsR0FBRXdCO1lBQUcsSUFBSWIsSUFBRUQ7WUFBS2MsSUFBRW9ILE1BQU1DLFFBQVFySCxLQUFHQSxJQUFFLEVBQUNBLEtBQUd4QixJQUFFQSxLQUFHO1lBQUcsSUFBSThCLElBQUUsSUFBR0MsSUFBRSxJQUFHQyxJQUFFO1lBQUUzQyxFQUFFMkosU0FBUSxTQUFVM0osR0FBRVc7Y0FBR1gsRUFBRStFLFdBQVNyQyxFQUFFL0IsS0FBRyxFQUFDLFFBQU8sT0FBTSxRQUFPLFdBQVUsU0FBUSxXQUFVNnpFLE1BQUssU0FBVTd6RTtnQkFBRyxRQUFPLE1BQUlYLEVBQUVvRSxLQUFLakIsUUFBUXhDO0FBQUcsb0JBQUdXLEVBQUV3dUUsZ0JBQWdCOXZFLEVBQUVvRSxNQUFLakMsRUFBRVEsTUFBSVIsRUFBRVEsSUFBR0EsT0FBS0YsRUFBRTlCLEtBQUdYO0FBQUU7WUFBRyxJQUFJNkMsSUFBRWxDLEdBQUVGLElBQUVvQyxJQUFFeEIsS0FBS2d6RSxxQkFBcUI1eEUsR0FBRUksSUFBRSxLQUFJLElBQUdLLElBQUUsSUFBSUo7WUFBRSxPQUFPSSxFQUFFb3hFLGFBQVcsR0FBRXQwRSxFQUFFMkosU0FBUSxTQUFVM0osR0FBRVc7Y0FBR3VDLEVBQUV2QyxLQUFHLGFBQVdYLEVBQUVvRSxPQUFLLEtBQUcsV0FBSyxNQUFTM0QsRUFBRUUsT0FBS3VDLEVBQUV2QyxLQUFHRixFQUFFRSxVQUFJLE1BQVMrQixFQUFFL0IsT0FBS3VDLEVBQUV2QyxLQUFHK0IsRUFBRS9CLEtBQUlYLEVBQUU4RSxTQUFPNUIsRUFBRWxELEVBQUU4RSxRQUFNNUIsRUFBRXZDO2NBQUl1QyxFQUFFb3hFO0FBQWEsaUJBQUdweEU7QUFBQztVQUFFLElBQUlBLElBQUUsSUFBSXpDO1VBQUVULEVBQUVpQyxVQUFRaUI7QUFBQUE7UUFBRyxNQUFLLENBQUNsRCxHQUFFVyxHQUFFd0I7VUFBSztVQUFhLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxPQUFNTyxJQUFFUCxFQUFFLE9BQU1RLElBQUVSLEVBQUUsTUFBTW12RSxjQUFhenVFLElBQUVWLEVBQUUsTUFBTStxRSxZQUFXcHFFLElBQUVYLEVBQUUsTUFBTThCLFFBQU94RCxJQUFFMEIsRUFBRSxPQUFNZSxJQUFFZixFQUFFLE9BQU1DLElBQUUsU0FBU3BDLEVBQUVXLEdBQUV3QixHQUFFTTtZQUFHLElBQUlFLElBQUV0QixNQUFLWixJQUFFOEksTUFBTXVILFVBQVUxSixNQUFNMUYsS0FBS3dPO1lBQVcsTUFBSzdPLGdCQUFnQnJCLElBQUcsTUFBTSxJQUFJOEosTUFBTTtZQUE2RSxJQUFHekksS0FBS3l2RSxjQUFZO2NBQVd4dkUsRUFBRTB4RSxZQUFZcndFLEdBQUV1TixZQUFXdk4sRUFBRTB1RSxxQkFBbUIxdUUsRUFBRW13RSxnQkFBZ0J6QjtBQUFrQixlQUFFL3ZFLEVBQUUweEUsWUFBWTN4RSxNQUFLLEVBQUNBLEtBQUswQyxnQkFBYzFDLEtBQUtnd0UscUJBQW1CaHdFLEtBQUt5eEUsZ0JBQWdCekIscUJBQW9CMXdFLE1BQUk0SSxNQUFNQyxRQUFRN0ksSUFBRyxNQUFNbUMsRUFBRStsRTtZQUEwQnhuRSxLQUFLOHFCLFVBQVEsQ0FBQztZQUFFLElBQUkvcEIsSUFBRTNCLEVBQUVBLEVBQUVtQixTQUFPO1lBQUdRLEtBQUcsbUJBQWlCQSxNQUFJbUgsTUFBTUMsUUFBUXBILE9BQUtLLElBQUVMLEdBQUVmLEtBQUs4cUIsVUFBUTtpQkFBSTlxQixLQUFLOHFCO2lCQUFXOXFCLEtBQUtvekUsd0JBQXdCaHlFO2VBQUlOLEtBQUcsbUJBQWlCQSxNQUFJQSxJQUFFLFFBQU9vQixPQUFPd0csZUFBZTFJLEtBQUs4cUIsU0FBUSxXQUFVO2NBQUNoYixLQUFJLFNBQVNuUjtnQkFBR0EsTUFBSTJDLEVBQUUreEUsV0FBU2h5RSxFQUFFbzFDLGtCQUFrQmoxQyxFQUFFOG5FLHNCQUFzQjNxRTtBQUFJO2NBQUVpSyxLQUFJO2dCQUFXLE9BQU90SCxFQUFFK3hFO0FBQVE7Y0FBRTFxRSxhQUFXO2dCQUFLekcsT0FBT3dHLGVBQWUxSSxLQUFLOHFCLFNBQVEsaUJBQWdCO2NBQUNoYixLQUFJLFNBQVNuUjtnQkFBRyxPQUFPMkMsRUFBRWt3RSxVQUFRLENBQUMsR0FBRWx3RSxFQUFFZ3lFLFNBQU8sQ0FBQyxHQUFFaHlFLEVBQUVpeUUsaUJBQWU1MEUsRUFBRWdGLEtBQUksU0FBVWhGO2tCQUFHLElBQUlXLEdBQUV3QjtrQkFBRSxJQUFHbkMsRUFBRTYwRSxXQUFTLFdBQVM3MEUsRUFBRTgwRSxtQkFBaUIsV0FBUzkwRSxFQUFFODBFLG1CQUFpQjkwRSxFQUFFNjBFLFVBQVM3MEUsRUFBRSswRSxVQUFRLGNBQVkvMEUsRUFBRTgwRSxtQkFBaUI5MEUsRUFBRSswRTtrQkFBUS8wRSxFQUFFOEUsU0FBTzNDLElBQUVPLEVBQUU0d0UsNkJBQTZCdHpFLEtBQUksZUFBYUEsRUFBRW9FLE1BQUs7b0JBQUMsSUFBR3BFLEVBQUUraEMsWUFBVTcrQixFQUFFbXdFLHdCQUF3Qmx4RSxJQUFHeEIsSUFBRWdDLEVBQUVxeUUsZ0JBQWdCM2xELEtBQUs7c0JBQUM4dEMsUUFBT245RDtzQkFBRTBGLFFBQU8vQzt3QkFBSUEsRUFBRWt3RSxRQUFRN3lFLEVBQUU4RSxPQUFNO3NCQUFDLElBQUl4RCxJQUFFcUIsRUFBRXF5RSxnQkFBZ0IzbEQsS0FBSzt3QkFBQzh0QyxRQUFPbjlEO3dCQUFFMEYsUUFBTy9DO3dCQUFFc3lFLFlBQVd0eUUsRUFBRWt3RSxRQUFRN3lFLEVBQUU4RTs7c0JBQVFuQyxFQUFFa3dFLFFBQVE3eUUsRUFBRThFLFFBQU14RDtBQUFDLDJCQUFNcUIsRUFBRWt3RSxRQUFRN3lFLEVBQUU4RSxRQUFNbkU7b0JBQUVnQyxFQUFFa3dFLFFBQVE3eUUsRUFBRStoQyxhQUFXcGhDLEdBQUVnQyxFQUFFa3dFLFFBQVExd0UsS0FBR3hCO0FBQUMseUJBQU0sSUFBRyxZQUFVWCxFQUFFb0UsTUFBSztvQkFBQ3BFLEVBQUUraEMsWUFBVTcrQixFQUFFcXdFLHFCQUFxQnB4RTtvQkFBRyxJQUFJTSxJQUFFRSxFQUFFdXlFLElBQUk3bEQsS0FBSzFzQixHQUFFM0MsRUFBRStoQztvQkFBV3AvQixFQUFFZ3lFLE9BQU8zMEUsRUFBRThFLFNBQU8sYUFBV25DLEVBQUVneUUsT0FBTzMwRSxFQUFFOEUsTUFBTUEsU0FBT25DLEVBQUVneUUsT0FBTzMwRSxFQUFFOEUsUUFBTXJDLElBQUdFLEVBQUVneUUsT0FBTzMwRSxFQUFFK2hDLGFBQVd0L0IsR0FBRUUsRUFBRWd5RSxPQUFPeHlFLEtBQUdNO0FBQUM7a0JBQUMsT0FBT3pDO0FBQUUscUJBQUcyQyxFQUFFZ3lFLE9BQU9RLFlBQVV4eUUsRUFBRXV5RSxJQUFJN2xELEtBQUsxc0IsR0FBRSxjQUFhQSxFQUFFaXlFO0FBQWM7Y0FBRTNxRSxLQUFJO2dCQUFXLE9BQU90SCxFQUFFaXlFO0FBQWM7Y0FBRTVxRSxhQUFXOztZQUFLLElBQUkxRyxJQUFFakMsS0FBSzBDLFlBQVkwbUUsZ0JBQWU1bUUsSUFBRXhDLEtBQUswQyxZQUFZdW1FLGdCQUFjO1lBQVMvbUUsT0FBT3dHLGVBQWUxSSxNQUFLLGdCQUFlO2NBQUM0SSxLQUFJO2dCQUFXLFFBQU0sTUFBS3RILEVBQUV3cEIsUUFBUWdpRCxpQkFBYyxNQUFLeHJFLEVBQUV3cEIsUUFBUWdpRCxlQUFheHJFLEVBQUV3cEIsUUFBUWdpRCxlQUFhOXNFLEtBQUswQyxZQUFZb3FFO0FBQVk7Y0FBRWg5RCxLQUFJLFNBQVNuUjtnQkFBRzJDLEVBQUV3cEIsUUFBUWdpRCxlQUFhbnVFO0FBQUM7Y0FBRWdLLGFBQVc7Z0JBQUt6RyxPQUFPd0csZUFBZTFJLE1BQUssaUJBQWdCO2NBQUM0SSxLQUFJO2dCQUFXLE9BQU90SCxFQUFFd3BCLFFBQVE2M0IsVUFBUTNpRCxLQUFLMEMsWUFBWWlxRTtBQUFhO2NBQUU3OEQsS0FBSSxTQUFTblI7Z0JBQUcyQyxFQUFFd3BCLFFBQVE2M0IsU0FBT2hrRDtBQUFDO2NBQUVnSyxhQUFXO2dCQUFLekcsT0FBT3dHLGVBQWUxSSxNQUFLLG1CQUFrQjtjQUFDNEksS0FBSTtnQkFBVyxPQUFPdEgsRUFBRXdwQixRQUFROGpELFlBQVU1dUUsS0FBSzBDLFlBQVltcUU7QUFBZTtjQUFFLzhELEtBQUksU0FBU25SO2dCQUFHMkMsRUFBRXdwQixRQUFROGpELFdBQVNqd0U7QUFBQztjQUFFZ0ssYUFBVztnQkFBS3pHLE9BQU93RyxlQUFlMUksTUFBSyxnQkFBZTtjQUFDNEksS0FBSTtnQkFBVyxPQUFPdEgsRUFBRXdwQixRQUFRNmpELFNBQU8zdUUsS0FBSzBDLFlBQVlrcUU7QUFBWTtjQUFFOThELEtBQUksU0FBU25SO2dCQUFHMkMsRUFBRXdwQixRQUFRNmpELFFBQU1od0U7QUFBQztjQUFFZ0ssYUFBVztnQkFBS3pHLE9BQU93RyxlQUFlMUksTUFBSyw2QkFBNEI7Y0FBQzRJLEtBQUk7Z0JBQVcsT0FBTyxNQUFJdEgsRUFBRXdwQixRQUFRMGhELDRCQUEwQmxyRSxFQUFFd3BCLFFBQVEwaEQsNEJBQTBCbHJFLEVBQUV3cEIsUUFBUTBoRCw2QkFBMkJ4c0UsS0FBSzBDLFlBQVk4cEU7QUFBeUI7Y0FBRTE4RCxLQUFJLFNBQVNuUjtnQkFBRzJDLEVBQUV3cEIsUUFBUTBoRCw0QkFBMEI3dEU7QUFBQztjQUFFZ0ssYUFBVztnQkFBS3pHLE9BQU93RyxlQUFlMUksTUFBSyw4QkFBNkI7Y0FBQzRJLEtBQUk7Z0JBQVcsT0FBTyxNQUFJdEgsRUFBRXdwQixRQUFRMmhELDZCQUEyQm5yRSxFQUFFd3BCLFFBQVEyaEQsNkJBQTJCbnJFLEVBQUV3cEIsUUFBUTJoRCw4QkFBNEJ6c0UsS0FBSzBDLFlBQVkrcEU7QUFBMEI7Y0FBRTM4RCxLQUFJLFNBQVNuUjtnQkFBRzJDLEVBQUV3cEIsUUFBUTJoRCw2QkFBMkI5dEU7QUFBQztjQUFFZ0ssYUFBVztnQkFBS3pHLE9BQU93RyxlQUFlMUksTUFBSyxpQ0FBZ0M7Y0FBQzRJLEtBQUk7Z0JBQVcsT0FBTyxNQUFJdEgsRUFBRXdwQixRQUFReWhELGdDQUE4QmpyRSxFQUFFd3BCLFFBQVF5aEQsZ0NBQThCanJFLEVBQUV3cEIsUUFBUXloRCxpQ0FBK0J2c0UsS0FBSzBDLFlBQVk2cEU7QUFBNkI7Y0FBRXo4RCxLQUFJLFNBQVNuUjtnQkFBRzJDLEVBQUV3cEIsUUFBUXloRCxnQ0FBOEI1dEU7QUFBQztjQUFFZ0ssYUFBVztnQkFBS3pHLE9BQU93RyxlQUFlMUksTUFBSywyQkFBMEI7Y0FBQzRJLEtBQUk7Z0JBQVcsT0FBTyxNQUFJdEgsRUFBRXdwQixRQUFRd2hELDBCQUF3QmhyRSxFQUFFd3BCLFFBQVF3aEQsMEJBQXdCaHJFLEVBQUV3cEIsUUFBUXdoRCwyQkFBeUJ0c0UsS0FBSzBDLFlBQVk0cEU7QUFBdUI7Y0FBRXg4RCxLQUFJLFNBQVNuUjtnQkFBRzJDLEVBQUV3cEIsUUFBUXdoRCwwQkFBd0IzdEU7QUFBQztjQUFFZ0ssYUFBVztnQkFBS3pHLE9BQU93RyxlQUFlMUksTUFBSyxzQkFBcUI7Y0FBQzRJLEtBQUk7Z0JBQVcsT0FBTyxNQUFJdEgsRUFBRXdwQixRQUFRNGhELHFCQUFtQnByRSxFQUFFd3BCLFFBQVE0aEQscUJBQW1CcHJFLEVBQUV3cEIsUUFBUTRoRCxzQkFBb0Ixc0UsS0FBSzBDLFlBQVlncUU7QUFBa0I7Y0FBRTU4RCxLQUFJLFNBQVNuUjtnQkFBRzJDLEVBQUV3cEIsUUFBUTRoRCxxQkFBbUIvdEU7QUFBQztjQUFFZ0ssYUFBVztnQkFBS3pHLE9BQU93RyxlQUFlMUksTUFBSyxrQkFBaUI7Y0FBQzRJLEtBQUk7Z0JBQVcsT0FBTzNHO0FBQUM7Y0FBRTZOLEtBQUksU0FBU25SO2dCQUFHLE9BQU9BLE1BQUlzRCxJQUFFWixFQUFFbzFDLGtCQUFrQmoxQyxFQUFFOG5FLHNCQUFzQjNxRSxNQUFLQTtBQUFDO2NBQUVnSyxhQUFXO2dCQUFLekcsT0FBT3dHLGVBQWUxSSxNQUFLLGdCQUFlO2NBQUM0SSxLQUFJO2dCQUFXLE9BQU9wRztBQUFDO2NBQUVzTixLQUFJLFNBQVNuUjtnQkFBRyxPQUFPNkQsSUFBRTdELEdBQUVBO0FBQUM7Y0FBRWdLLGFBQVc7Z0JBQUszSSxLQUFLd3hFLFVBQVEsQ0FBQyxHQUFFeHhFLEtBQUtzekUsU0FBTyxDQUFDLEdBQUV0ekUsS0FBS3F6RSxXQUFTLE1BQUtyekUsS0FBS3V6RSxpQkFBZSxJQUFHdnpFLEtBQUs4cUIsUUFBUTNKLFVBQVFyZ0IsR0FBRWQsS0FBSzhxQixRQUFRaXBELGdCQUFjejBFO0FBQUM7VUFBRXlCLEVBQUUwdUUsY0FBWSxTQUFTOXdFLEdBQUVXO1lBQUdXLEVBQUUweEUsWUFBWTN4RSxNQUFLLEVBQUNyQixNQUFJcUIsS0FBS2cwRSxlQUFhMTBFO0FBQUMsYUFBRXlCLEVBQUUwTyxVQUFVd2tFLGVBQWEsU0FBU3QxRTtZQUFHLElBQUdBLEtBQUdBLEVBQUVBLEVBQUU0QixTQUFPLE1BQUkscUJBQW1CNUIsRUFBRUEsRUFBRTRCLFNBQU8sSUFBRyxPQUFPNUIsRUFBRTJCO0FBQUssYUFBRVMsRUFBRTBPLFVBQVV5a0UsaUJBQWUsU0FBU3YxRSxHQUFFVztZQUFHLElBQUdBLE1BQUlYLEdBQUUsTUFBTThDLEVBQUVrbUUsMkJBQTJCaHBFO0FBQUUsYUFBRW9DLEVBQUUwTyxVQUFVMmpFLDBCQUF3QixTQUFTejBFO1lBQUcsSUFBSVcsSUFBRVgsRUFBRW9pQixXQUFTaGQsT0FBT3BGLEVBQUVvaUIsWUFBVSxNQUFLamdCLElBQUVuQyxFQUFFdUgsT0FBSzdFLEVBQUVvMUMsa0JBQWtCajFDLEVBQUU4bkUsc0JBQXNCM3FFLEVBQUV1SCxTQUFPO1lBQUssT0FBT3ZILEVBQUU0RyxPQUFLNUcsRUFBRTRHLFFBQU12RixLQUFLOHFCLFFBQVF2bEIsTUFBSzVHLEVBQUV1SCxPQUFLcEYsS0FBR2QsS0FBSzhxQixRQUFRNWtCLE1BQUt2SCxFQUFFb2lCLFdBQVN6aEIsS0FBR1UsS0FBSzhxQixRQUFRL0osVUFBU3BpQixFQUFFMHBFLE1BQUkxcEUsRUFBRTBwRSxPQUFLMXBFLEVBQUVtaUIsWUFBVTlnQixLQUFLOHFCLFFBQVF1OUM7bUJBQVcxcEUsRUFBRW1pQixVQUFTbmlCO0FBQUMsYUFBRW9DLEVBQUUwTyxVQUFVMGtFLGtCQUFnQixTQUFTeDFFLEdBQUVXO1lBQUcsSUFBSXdCLEtBQUd4QixJQUFFQSxLQUFHLENBQUMsR0FBRytvQixVQUFRLENBQUMsR0FBRXBvQixJQUFFLENBQUM7WUFBRSxJQUFHLEVBQUMsYUFBWSxZQUFXb29CLFFBQU8sU0FBVTFwQjtjQUFHLFlBQU8sTUFBU1csRUFBRVg7QUFBRyxnQkFBRzJKLFNBQVEsU0FBVTNKO2NBQUdzQixFQUFFdEIsS0FBRzZDLEVBQUUwbkUsMEJBQTBCNXBFLEVBQUVYO0FBQUksaUJBQUd1SixNQUFNQyxRQUFRN0ksRUFBRXFxRSxTQUFRMXBFLEVBQUUwcEUsU0FBT3JxRSxFQUFFcXFFLGFBQVc7Y0FBQyxJQUFHMXBFLEVBQUUwcEUsU0FBTyxJQUFHaHJFLE1BQUlBLEVBQUV5MUUsYUFBVyxnQkFBY3oxRSxFQUFFOEUsUUFBTXhELEVBQUUwcEUsT0FBT25wRSxLQUFLN0IsRUFBRStoQyxZQUFXLGdCQUFjL2hDLEVBQUU4RSxNQUFLO2dCQUFDLElBQUlyQyxJQUFFekMsRUFBRW0wRSxPQUFPenFELFFBQU8sU0FBVTFwQjtrQkFBRyxRQUFNLE1BQUtBLEVBQUUrRTtBQUFRLG9CQUFHQyxLQUFJLFNBQVVoRjtrQkFBRyxJQUFJVyxJQUFFd0IsRUFBRW5DLEVBQUU4RTtrQkFBTSxPQUFPbkUsSUFBRTRJLE1BQU1DLFFBQVE3SSxLQUFHQSxFQUFFcUUsS0FBSSxTQUFVckU7b0JBQUcsT0FBT3VDLEVBQUVzd0UsZ0JBQWdCeHpFLEVBQUVvRSxNQUFLekQ7QUFBRyx3QkFBR3VDLEVBQUVzd0UsZ0JBQWdCeHpFLEVBQUVvRSxNQUFLekQsS0FBRztBQUFLO2dCQUFHVyxFQUFFMHBFLFNBQU8xcEUsRUFBRTBwRSxPQUFPcjJELE9BQU9sUztBQUFFO2NBQUNuQixFQUFFMHBFLE9BQU9wcEUsaUJBQWVOLEVBQUUwcEU7QUFBTTtZQUFDLE9BQU8zcEUsS0FBSzhxQixRQUFRM0osWUFBVWxoQixFQUFFa2hCLFVBQVFuaEIsS0FBSzhxQixRQUFRM0osUUFBUXZVLGdCQUFlM007QUFBQyxhQUFFYyxFQUFFME8sVUFBVTRrRSxrQkFBZ0IsU0FBUzExRTtZQUFHLElBQUlXLElBQUVVO1lBQUtyQixFQUFFNEcsT0FBSzVHLEVBQUU0RyxRQUFNLElBQUc1RyxFQUFFZ3JFLFNBQU9ockUsRUFBRWdyRSxVQUFRO1lBQUcsSUFBSTdvRSxJQUFFVSxFQUFFMnBFLG1CQUFtQnhzRTtZQUFHLElBQUcsZ0JBQWNXLEVBQUVtRSxTQUFPbkUsSUFBRUEsRUFBRXkwRSxjQUFjWixNQUFLLFNBQVU3ekU7Y0FBRyxPQUFPQSxFQUFFb2hDLGNBQVkvaEMsRUFBRWdyRSxPQUFPO0FBQUcsbUJBQUk7Y0FBQ3lLLFlBQVU7Z0JBQUs5MEUsRUFBRXd6RSxTQUFPeHpFLEVBQUV3ekUsVUFBUSxLQUFJeHpFLEVBQUU4MEUsV0FBVTtjQUFDLElBQUl0ekUsSUFBRTtjQUFFeEIsRUFBRXd6RSxPQUFPeHFFLFNBQVMzSixLQUFHQSxFQUFFK0UsVUFBUTVDLE1BQUksUUFBT0EsSUFBRSxLQUFHbkMsRUFBRWdyRSxPQUFPcHBFLFdBQVNPLElBQUUsTUFBSXhCLElBQUU7Z0JBQUM4MEUsWUFBVTtnQkFBR3RCLFFBQU87O0FBQUk7WUFBQyxJQUFJN3lFLElBQUVYLEVBQUU4MEUsWUFBVXoxRSxFQUFFZ3JFLFNBQU9ockUsRUFBRWdyRSxPQUFPNWpFLE1BQU07WUFBRyxPQUFPakYsRUFBRXd6RSxlQUFhenlFLEVBQUVxeEUsVUFBVTV6RSxFQUFFd3pFLFFBQU9uMEUsRUFBRTRHLE1BQUt0RixXQUFVYSxFQUFFd3pFLGFBQWFyQixZQUFXbnlFLEVBQUV5ekUsUUFBTWoxRSxFQUFFbUUsTUFBSzNDLEVBQUU0L0IsWUFBVXBoQyxFQUFFODBFLGNBQVl6MUUsRUFBRWdyRSxPQUFPLEtBQUcsT0FBS2hyRSxFQUFFZ3JFLE9BQU87WUFBRzdvRSxFQUFFK2xCLE1BQUk7Y0FBQ3RoQixNQUFLekUsRUFBRXlFO2NBQUtva0UsUUFBTzdvRSxFQUFFNm9FO3NCQUFlN29FLEVBQUV5RSxhQUFZekUsRUFBRTZvRSxRQUFPN29FO0FBQUMsYUFBRUMsRUFBRTBPLFVBQVUra0UsbUJBQWlCO1lBQVcsSUFBSTcxRSxJQUFFcUIsS0FBS3kwRSxRQUFRL3pDLFdBQVVwaEMsSUFBRVUsS0FBSzZPLGFBQVcsSUFBRy9OLEtBQUUsR0FBR2IsSUFBRUQsS0FBSzAwRSxRQUFRNXBELFFBQVFpcEQsY0FBYzFyRCxRQUFPLFNBQVUvb0I7Y0FBRyxPQUFNLGtCQUFnQlgsS0FBR1csRUFBRXlELFNBQU9wRSxNQUFJVyxFQUFFb2hDLGNBQVkvaEMsS0FBR1csRUFBRW9oQyxjQUFZL2hDLEVBQUU2RixRQUFRLE1BQUssT0FBS2xGLEVBQUVtRSxTQUFPOUUsTUFBSSxlQUFhVyxFQUFFeUQ7QUFBSyxnQkFBR1ksS0FBSSxTQUFVaEY7Y0FBRyxJQUFJc0IsSUFBRWlJLE1BQU1DLFFBQVF4SixFQUFFbTBFLFVBQVFuMEUsRUFBRW0wRSxPQUFPdnlFLFNBQU87Y0FBRSxJQUFHTixNQUFJWCxFQUFFaUIsUUFBTyxNQUFNLElBQUlrSSxNQUFNLDJGQUF5RnhJLElBQUU7Y0FBZSxPQUFNLGVBQWF0QixFQUFFb0UsU0FBT2pDLElBQUVuQyxFQUFFK2hDLFlBQVd4NEIsTUFBTUMsUUFBUXhKLEVBQUVtMEUsVUFBUW4wRSxFQUFFbTBFLFNBQU87QUFBRyxnQkFBR252RSxLQUFJLFNBQVVoRjtjQUFHLE9BQU9rRCxFQUFFdXdFLGlCQUFpQnp6RSxHQUFFVyxHQUFHa0YsUUFBUSxNQUFLO0FBQUksZ0JBQUcsTUFBSTtZQUFHLElBQUcsa0JBQWdCN0YsR0FBRTtjQUFDLEtBQUlxQixLQUFLMjBFLGFBQVksTUFBTSxJQUFJbHNFLE1BQU07Y0FBeUcsT0FBT3pJLEtBQUsyMEUsWUFBWXhNLFdBQVcsVUFBUW5vRSxLQUFLMjBFLGNBQVksT0FBSzMwRSxLQUFLMjBFLGNBQWEzMEUsS0FBSzIwRSxjQUFZMTBFO0FBQUM7WUFBQyxJQUFJbUIsSUFBRU4sSUFBRUEsSUFBRWIsSUFBRUE7WUFBRSxLQUFJbUIsR0FBRSxNQUFNLElBQUlxSCxNQUFNLHNEQUFvRHpJLEtBQUt5MEUsUUFBUWh4RSxPQUFLO1lBQU0sT0FBT3JDO0FBQUMsYUFBRUwsRUFBRTBPLFVBQVVtbEUsc0JBQW9CLFNBQVNqMkUsR0FBRVc7WUFBRyxLQUFJQSxHQUFFLE9BQU87WUFBS0EsSUFBRUEsRUFBRWlCLFVBQVEsSUFBRWpCLEVBQUV5RyxNQUFNLEtBQUd6RztZQUFFLElBQUl3QixJQUFFZSxFQUFFa3hFLGlCQUFpQnAwRSxHQUFFVztZQUFHLE9BQU8sTUFBSXdCLEVBQUVteUUsYUFBV255RSxFQUFFLGFBQVdBLEVBQUVteUUsWUFBV255RTtBQUFFLGFBQUVDLEVBQUUwTyxVQUFVb2xFLFNBQU8sU0FBU2wyRSxHQUFFVztZQUFHLEtBQUlYLElBQUVBLEtBQUcsQ0FBQyxHQUFHa1EsWUFBVWxRLEVBQUVrUSxhQUFXLE1BQUtsUSxJQUFFcUIsS0FBS296RSx3QkFBd0J6MEUsSUFBSTRHLE1BQUs7Y0FBQyxJQUFHLHFCQUFtQmpHLEdBQUUsT0FBT0EsRUFBRW1DLEVBQUVtbUU7Y0FBa0MsTUFBTW5tRSxFQUFFbW1FO0FBQWdDO1lBQUMsSUFBSTltRSxJQUFFZCxLQUFLOHFCLFFBQVFpcEQsY0FBY1osTUFBTXgwRSxLQUFHLGtCQUFnQkEsRUFBRW9FLFVBQVEsQ0FBQztZQUFFLE9BQU9qQyxFQUFFNC9CLFlBQVUsZUFBYzFnQyxLQUFLMnpFLGdCQUFnQjEwRSxNQUFNO2NBQUM2OEQsUUFBT2g3RDtjQUFFdUQsUUFBT3JFO2NBQUs4MEUsWUFBV24yRSxFQUFFNEc7Y0FBS3l1RSxjQUFhaDBFLEtBQUswQyxZQUFZc3hFO2VBQWNyMUUsRUFBRWtRO0FBQVUsYUFBRTlOLEVBQUUwTyxVQUFVc2xFLHdCQUFzQjtZQUFXLElBQUlwMkUsSUFBRXVKLE1BQU11SCxVQUFVMUosTUFBTTFGLEtBQUt3TyxZQUFXdlAsSUFBRVUsS0FBS2kwRSxhQUFhdDFFLElBQUdtQyxJQUFFLGdCQUFjbkMsRUFBRUEsRUFBRTRCLFNBQU8sYUFBVzVCLEVBQUVBLEVBQUU0QixTQUFPLE1BQUk1QixFQUFFMkIsUUFBTSxDQUFDLEdBQUVMLElBQUUsbUJBQWlCdEIsRUFBRSxLQUFHQSxFQUFFLEtBQUcsYUFBWXlDLElBQUUsZ0JBQWNuQixFQUFFMk0sZ0JBQWM7Y0FBQ25KLE1BQUs7Y0FBWXN3RSxlQUFjL3pFLEtBQUs4cUIsUUFBUWlwRDtnQkFBZS96RSxLQUFLOHFCLFFBQVFpcEQsY0FBY1osTUFBSyxTQUFVeDBFO2NBQUcsT0FBTSxZQUFVQSxFQUFFb0UsU0FBT3BFLEVBQUU4RSxTQUFPeEQsS0FBR3RCLEVBQUUraEMsY0FBWSxPQUFLemdDLEVBQUV1RSxRQUFRLE1BQUs7QUFBSztZQUFHLEtBQUlwRCxHQUFFLE1BQU1LLEVBQUVpbUUsK0JBQStCem5FO1lBQUcsS0FBSW9CLEVBQUVteUMsVUFBVXh6QyxLQUFLOHFCLFFBQVEzSixVQUFTLE1BQU0xZixFQUFFb21FO1lBQWdDLE9BQU07Y0FBQzFuQyxRQUFPbmdDLEtBQUttMEUsZ0JBQWdCL3lFLEdBQUVOO2NBQUd5ekUsT0FBTW56RTtjQUFFODFELFVBQVM1M0Q7O0FBQUUsYUFBRXlCLEVBQUUwTyxVQUFVMEUsUUFBTTtZQUFXLE9BQU8sSUFBSW5VLEtBQUswQyxZQUFZMUMsS0FBSzhxQixRQUFRaXBELGVBQWMvekUsS0FBSzhxQixRQUFRM0osU0FBUW5oQixLQUFLOHFCO0FBQVEsYUFBRS9wQixFQUFFME8sVUFBVWt2QyxPQUFLLFNBQVNoZ0QsR0FBRVcsR0FBRXdCO1lBQUcsSUFBSWIsSUFBRWlJLE1BQU11SCxVQUFVMUosTUFBTTFGLEtBQUt3TztZQUFXLE1BQUsvTixJQUFFZCxLQUFLaTBFLGFBQWFoMEUsS0FBSSxNQUFNd0IsRUFBRWdtRTtZQUFvQ25vRSxZQUFVQSxFQUFFdXFFLFdBQVU3cEUsS0FBSzZ6RSxJQUFJbDFFLEdBQUVXLElBQUUsU0FBVVgsR0FBRVcsR0FBRVc7Y0FBR0EsRUFBRWdqQixlQUFjLHFCQUFtQm5pQixLQUFHQSxFQUFFbkMsR0FBRVcsR0FBRVc7QUFBRztBQUFFLGFBQUVjLEVBQUUwTyxVQUFVb2tFLE1BQUk7WUFBVyxJQUFJbDFFLElBQUVxQixLQUFLKzBFLHNCQUFzQjkxRSxNQUFNZSxNQUFLNk87WUFBV2xRLEVBQUV3aEMsVUFBUXhoQyxFQUFFd2hDLE9BQU8ycEMsbUJBQWlCbnJFLEVBQUV3aEMsT0FBTzJwQyxTQUFRajRELEVBQVEvQyxLQUFLO1lBQW1FOU8sS0FBS2swRSxlQUFlLGVBQWN2MUUsRUFBRTQxRSxNQUFNOXdFLE9BQU16RCxLQUFLazBFLGVBQWUsa0JBQWlCdjFFLEVBQUU0MUUsTUFBTTl3RTtZQUFNLElBQUluRSxJQUFFLElBQUlnQyxFQUFFO2NBQUMydUUsY0FBYTtnQkFBQzl2QyxRQUFPO2dCQUFFNHJDLGdCQUFlLEVBQUN2cUUsRUFBRW9vRTtnQkFBbUJvQyxpQkFBZ0Joc0UsS0FBS3EwRSxnQkFBZ0JybUQsS0FBS3J2QixFQUFFNDFFO2dCQUFPakQscUJBQW9CLFNBQVMzeUU7a0JBQUdBLEVBQUVxMkUsVUFBUWgxRSxLQUFLOGlCLEtBQUssV0FBVW5rQixLQUFHcUIsS0FBSzhpQixLQUFLLFFBQU9ua0IsSUFBRyxxQkFBbUJxQixLQUFLazNELFlBQVVsM0QsS0FBS2szRCxTQUFTLE1BQUt2NEQsR0FBRXFCO0FBQUs7O2NBQUcrQyxNQUFLO2NBQU1xcEUsZ0JBQWVwc0UsS0FBS3l4RTs7WUFBa0IsT0FBT255RSxFQUFFK2lCLFVBQVUsUUFBTzFqQixFQUFFd2hDLFFBQU94aEMsRUFBRXU0RCxZQUFVLFlBQVcsSUFBRzUzRDtBQUFDLGFBQUV5QixFQUFFME8sVUFBVXdsRSxnQkFBYztZQUFXLElBQUl0MkUsSUFBRXFCLEtBQUsrMEUsc0JBQXNCOTFFLE1BQU1lLE1BQUs2TyxZQUFXdlAsSUFBRSxJQUFJOEIsRUFBRTtjQUFDcUMsTUFBSztjQUFjcEQsTUFBSztjQUFjOC9CLFFBQU87Y0FBRTRyQyxnQkFBZSxFQUFDdnFFLEVBQUVvb0U7Y0FBbUJvQyxpQkFBZ0Joc0UsS0FBS3EwRSxnQkFBZ0JybUQsS0FBS3J2QixFQUFFNDFFOztZQUFTajFFLEVBQUV5dEUsa0JBQWtCL3NFLEtBQUt5eEU7WUFBaUIsSUFBSTN3RSxJQUFFeEIsRUFBRTJ0RTtZQUFZLE9BQU8zdEUsSUFBRSxNQUFLd0IsRUFBRW5DLEVBQUV3aEMsUUFBT3hoQyxFQUFFdTREO0FBQVMsYUFBRW4yRCxFQUFFME8sVUFBVWtrRSxrQkFBZ0I7WUFBVyxJQUFJaDFFLElBQUV1SixNQUFNdUgsVUFBVTFKLE1BQU0xRixLQUFLd08sWUFBV3ZQLElBQUUsQ0FBQztZQUFFLElBQUcsZUFBYVUsS0FBSzg3RCxPQUFPLzRELFNBQU96RCxFQUFFZSxPQUFLTCxLQUFLcUUsT0FBTzZ3RSxlQUFlbG5ELEtBQUsxdUIsR0FBRSxTQUFRQSxFQUFFZSxLQUFLc2xELFVBQVEzbEQsS0FBS3FFLE9BQU82d0UsZUFBZWxuRCxLQUFLMXVCLEdBQUUsU0FBTztZQUFLQSxFQUFFZ2dFLE9BQUt0L0QsS0FBS3FFLE9BQU82d0UsZUFBZWxuRCxLQUFLMXVCLEdBQUUsU0FBUUEsRUFBRWdnRSxLQUFLM1osVUFBUTNsRCxLQUFLcUUsT0FBTzZ3RSxlQUFlbG5ELEtBQUsxdUIsR0FBRSxTQUFPLElBQUlBLEVBQUU2MUUsWUFBVW4xRSxLQUFLcUUsT0FBT213RSxpQkFBaUJ4bUQsS0FBSzF1QjtZQUFHQSxFQUFFODFFLGNBQVlwMUUsS0FBS3FFLE9BQU82d0UsZUFBZWxuRCxLQUFLMXVCLEdBQUUsYUFBWUEsRUFBRSsxRSxtQkFBaUJyMUUsS0FBS3FFLE9BQU82d0UsZUFBZWxuRCxLQUFLMXVCLEdBQUU7WUFBb0JYLEtBQUdxQixLQUFLODdELE9BQU9nWCxVQUFRbjBFLEVBQUU0QixXQUFTUCxLQUFLODdELE9BQU9nWCxPQUFPdnlFLFFBQU87Y0FBQyxJQUFHUCxLQUFLNHpFLFlBQVcsT0FBTzV6RSxLQUFLNHpFLFdBQVczMEUsTUFBTSxNQUFLTjtjQUFHLE1BQU04QyxFQUFFNGtFLHNCQUFzQjFuRSxFQUFFNEIsUUFBT1AsS0FBSzg3RCxPQUFPZ1gsT0FBT3Z5RSxRQUFPUCxLQUFLODdELE9BQU9yNEQ7QUFBSztZQUFDLE9BQU9uRSxFQUFFdVAsWUFBVWxRLEtBQUcsSUFBR1csRUFBRW0xRSxVQUFRejBFLEtBQUs4N0QsUUFBT3g4RCxFQUFFbzFFLFVBQVExMEUsS0FBS3FFLFFBQU8vRSxFQUFFMDBFLGVBQWFoMEUsS0FBS3FFLE9BQU8zQixZQUFZc3hFLGdCQUFjaDBFLEtBQUtnMEU7WUFBYWgwRSxLQUFLODBFLGVBQWF4MUUsRUFBRXExRSxjQUFZMzBFLEtBQUs4MEUsYUFBWXgxRTtBQUFDLGFBQUV5QixFQUFFME8sVUFBVTZsRSwyQkFBeUIsU0FBUzMyRSxHQUFFVztZQUFHLElBQUl3QixJQUFFLENBQUM7WUFBRSxJQUFHQSxFQUFFaUMsT0FBS3BFLEVBQUVzd0IsU0FBUW51QixFQUFFbzJELFdBQVNsM0QsS0FBSzAwRSxRQUFRVCxhQUFhdDFFLElBQUcsV0FBU21DLEVBQUVpQyxTQUFNLE1BQUtwRSxFQUFFQSxFQUFFNEIsU0FBTyxNQUFJLG1CQUFpQjVCLEVBQUVBLEVBQUU0QixTQUFPLE9BQUt3aEMsU0FBU3BqQyxFQUFFQSxFQUFFNEIsU0FBTyxRQUFNTyxFQUFFbW9FLGVBQWF0cUUsRUFBRTJCO1lBQU9RLEVBQUVncUIsVUFBUSxnQkFBY25zQixFQUFFQSxFQUFFNEIsU0FBTyxhQUFXNUIsRUFBRUEsRUFBRTRCLFNBQU8sTUFBSTVCLEVBQUUyQixRQUFNLENBQUMsR0FBRVEsRUFBRXkwRSxtQkFBZ0IsTUFBSzUyRSxFQUFFQSxFQUFFNEIsU0FBTyxNQUFJNUIsRUFBRTJCO1lBQU1RLEVBQUVncUIsVUFBUTlxQixLQUFLMDBFLFFBQVF0Qix3QkFBd0J0eUUsRUFBRWdxQixVQUFTaHFCLEVBQUVncUIsUUFBUXZsQixPQUFLdkYsS0FBS20xRSxjQUFhbjFFLEtBQUsyMEUsZ0JBQWN0ekUsRUFBRW15QyxVQUFVeHpDLEtBQUswMEUsUUFBUTVwRCxRQUFRM0osVUFBUyxNQUFNMWYsRUFBRW9tRTtZQUFnQyxPQUFPN25FLEtBQUsyMEUsZ0JBQWM3ekUsRUFBRWdxQixRQUFROUosS0FBR2hoQixLQUFLMDBFLFFBQVE1cEQsUUFBUTNKLFVBQVNyZ0IsRUFBRWdxQixRQUFRdmxCLE9BQUt6RSxJQUFFTyxFQUFFeXNFLFdBQVcsSUFBSXJsRSxNQUFNLG9GQUFtRm5KLEVBQUV5dUUsY0FBYXp1RSxFQUFFaEIsUUFBT3dDLEVBQUVvMkQ7QUFBUyxhQUFFbjJELEVBQUUwTyxVQUFVeWxFLGlCQUFlO1lBQVcsSUFBSXYyRSxJQUFFcUIsTUFBS1YsSUFBRVUsS0FBSzAwRSxRQUFRWSx5QkFBeUJqMUUsS0FBS0wsTUFBS2tJLE1BQU11SCxVQUFVMUosTUFBTTFGLEtBQUt3TyxZQUFXL04sSUFBR0EsSUFBRTFCLEVBQUUsV0FBU0UsRUFBRXlELE9BQU05QyxJQUFFdEIsRUFBRStELFlBQVlzeEUsZ0JBQWNyMUUsRUFBRXExRTtZQUFhLElBQUcxMEUsRUFBRWkyRSxpQkFBZ0I7Y0FBQyxJQUFJajBFLElBQUU7Z0JBQUM2K0IsUUFBTyxFQUFDMytCLEVBQUUybkUsbUJBQW1COW9FLEtBQUtMLEtBQUswMEUsU0FBUXAxRSxFQUFFd3JCO2dCQUFVb3NDLFVBQVM1M0QsRUFBRTQzRDs7Y0FBVSxPQUFNLFdBQVM1M0QsRUFBRXlELFFBQU16QixFQUFFNitCLE9BQU8zL0IsS0FBS2dCLEVBQUV3bkUsaUNBQWlDM29FLEtBQUtMLEtBQUswMEUsU0FBUXAxRSxFQUFFMnBFLGdCQUFlM25FLEVBQUV3NkQsU0FBTztjQUFXeDZELEVBQUVrQyxTQUFPeEQsS0FBSzAwRSxRQUFRRSxvQkFBb0I1bUQsS0FBSyxNQUFLaHVCLEtBQUt5MEUsUUFBUWUsWUFBVWwwRSxFQUFFdzZELFNBQU8sdUJBQXNCeDZEO0FBQUM7WUFBQyxRQUFPaEMsRUFBRXlEO2FBQU0sS0FBSTtjQUFtQixLQUFJMUIsRUFBRW15QyxVQUFVbDBDLEVBQUV3ckIsUUFBUTVrQixPQUFNLE9BQU83RSxFQUFFeXNFLFdBQVdyc0UsRUFBRXFtRSxxQ0FBb0NobkUsRUFBRWl0RSxjQUFhanRFLEVBQUV4QyxRQUFPZ0IsRUFBRTQzRDtjQUFVLElBQUluMkQsSUFBRSxJQUFJSyxFQUFFO2dCQUFDcUMsTUFBSztnQkFBbUJwRCxNQUFLO2dCQUF1QjgvQixRQUFPO2dCQUFFNHJDLGdCQUFlLEVBQUN2cUUsRUFBRTZuRSwyQkFBMEI3bkUsRUFBRXduRTtnQkFBa0NvRCxnQkFBZXp0RSxFQUFFKzFFLFFBQVFqRDtnQkFBZ0JwRixVQUFTcHNFO2dCQUFFbXBFLGdCQUFlenFFLEVBQUUrMUUsUUFBUXRMO2dCQUFlSCxjQUFhdHFFLEVBQUUrMUUsUUFBUXpMO2lCQUFlK0Q7Y0FBaUIsT0FBT2pzRSxFQUFFekIsRUFBRXdyQixTQUFReHJCLEVBQUU0M0Q7O2FBQVUsS0FBSTtjQUFXLElBQUlqMUQsSUFBRSxJQUFJYixFQUFFO2dCQUFDcUMsTUFBSztnQkFBY3BELE1BQUs7Z0JBQWtCOC9CLFFBQU87Z0JBQUU0ckMsZ0JBQWUsRUFBQ3ZxRSxFQUFFMm5FO2dCQUFvQjZDLGlCQUFnQjNxRSxFQUFFa25FO2dCQUFZNkQsZ0JBQWV6dEUsRUFBRSsxRSxRQUFRakQ7Z0JBQWdCcEYsVUFBU3BzRTtnQkFBRW1wRSxnQkFBZXpxRSxFQUFFKzFFLFFBQVF0TDtnQkFBZUgsY0FBYXRxRSxFQUFFKzFFLFFBQVF6TDtpQkFBZStEO2NBQWlCLE9BQU8vcUUsRUFBRTNDLEVBQUV3ckIsU0FBUXhyQixFQUFFNDNEOzthQUFVLEtBQUk7Y0FBTyxJQUFJMTBELElBQUUsSUFBSXBCLEVBQUU7Z0JBQUNxQyxNQUFLO2dCQUFPcEQsTUFBSztnQkFBVzgvQixRQUFPO2dCQUFFNHJDLGdCQUFlLEVBQUN2cUUsRUFBRTJuRSxvQkFBbUIzbkUsRUFBRXduRTtnQkFBa0NnRCxpQkFBZ0IsU0FBUzFzRTtrQkFBRyxPQUFPWCxFQUFFKzFFLFFBQVFFLG9CQUFvQmoyRSxFQUFFODFFLFFBQVFlLFNBQVFsMkU7QUFBRTtnQkFBRThzRSxnQkFBZXp0RSxFQUFFKzFFLFFBQVFqRDtnQkFBZ0JwRixVQUFTcHNFO2dCQUFFbXBFLGdCQUFlenFFLEVBQUUrMUUsUUFBUXRMO2dCQUFlSCxjQUFhdHFFLEVBQUUrMUUsUUFBUXpMO2dCQUFhNkQsY0FBYW51RSxFQUFFKzFFLFFBQVE1SDtnQkFBYVgsVUFBU3RxRTtpQkFBSW1yRTtjQUFpQixPQUFPeHFFLEVBQUVsRCxFQUFFd3JCLFNBQVF4ckIsRUFBRTJwRSxjQUFhM3BFLEVBQUU0M0Q7O2FBQVUsS0FBSTtjQUFPLEtBQUk3MUQsRUFBRW15QyxVQUFVbDBDLEVBQUV3ckIsUUFBUTVrQixPQUFNLE9BQU83RSxFQUFFeXNFLFdBQVdyc0UsRUFBRXFtRSxxQ0FBb0NobkUsRUFBRWl0RSxjQUFhanRFLEVBQUV4QyxRQUFPZ0IsRUFBRTQzRDtjQUFVLElBQUcsb0JBQWtCbDNELEtBQUt5MEUsUUFBUWYsWUFBVTF6RSxLQUFLeTBFLFFBQVFmLFdBQVNwMEUsRUFBRXdyQixRQUFRdHNCLFNBQU9jLEVBQUV3ckIsUUFBUXRzQixRQUFNLEdBQUUsT0FBTzZDLEVBQUV5c0UsV0FBVyxJQUFJcmxFLE1BQU0scUVBQW9FM0gsRUFBRWl0RSxjQUFhanRFLEVBQUV4QyxRQUFPZ0IsRUFBRTQzRDtjQUFVLElBQUkvMUQsSUFBRTtnQkFBQzZzRSxrQkFBaUIsU0FBUzF1RTtrQkFBRyxJQUFHNEksTUFBTUMsUUFBUTdJLEVBQUVtckUsT0FBTTtvQkFBQyxJQUFJM3BFLElBQUV4QixFQUFFbXJFLEtBQUs5bUUsS0FBS3JFLEtBQUdYLEVBQUUrMUUsUUFBUUwsZ0JBQWdCaDBFLEtBQUs7c0JBQUNvRCxNQUFLO3NCQUFZc3dFLGVBQWNwMUUsRUFBRSsxRSxRQUFRNXBELFFBQVFpcEQ7dUJBQWV6MEU7b0JBQUtBLEVBQUVnMEUsU0FBTyxDQUFDO29CQUFFLElBQUlyekUsSUFBRTtvQkFBRWEsRUFBRXdILFNBQVEsU0FBVTNKO3NCQUFHQSxFQUFFNDFFLFFBQU1qMUUsRUFBRWcwRSxPQUFPMzBFLEVBQUU0MUUsU0FBT3JzRSxNQUFNQyxRQUFRN0ksRUFBRWcwRSxPQUFPMzBFLEVBQUU0MUUsVUFBUWoxRSxFQUFFZzBFLE9BQU8zMEUsRUFBRTQxRSxPQUFPL3pFLEtBQUs3QixLQUFHVyxFQUFFZzBFLE9BQU8zMEUsRUFBRTQxRSxTQUFPLEVBQUNqMUUsRUFBRWcwRSxPQUFPMzBFLEVBQUU0MUUsUUFBTzUxRSxNQUFHVyxFQUFFZzBFLE9BQU8zMEUsRUFBRTQxRSxTQUFPNTFFLEtBQUdXLEVBQUVnMEUsT0FBT3J6RSxLQUFHdEI7c0JBQUVzQjtBQUFLLGdDQUFVWCxFQUFFbXJFO0FBQUk7a0JBQUMsT0FBT25yRTtBQUFDO2dCQUFFNnVFLHlCQUF3QixTQUFTN3VFO2tCQUFHLElBQUl3QixJQUFFbkMsRUFBRSsxRSxRQUFRdmdFO2tCQUFRLE9BQU9yVCxFQUFFZ3FCLFFBQVEzSixVQUFRN2hCLEVBQUVxckUsaUJBQWdCN3BFO0FBQUM7aUJBQUdzRCxJQUFFLElBQUloRCxFQUFFO2dCQUFDcUMsTUFBSztnQkFBa0JwRCxNQUFLO2dCQUFzQjgvQixRQUFPO2dCQUFFNHJDLGdCQUFlLEVBQUN2cUUsRUFBRTZuRTtnQkFBMkIrQyxnQkFBZXp0RSxFQUFFKzFFLFFBQVFqRDtnQkFBZ0JwRixVQUFTMXRFLEVBQUUrRCxZQUFZc3hFLGdCQUFjcjFFLEVBQUVxMUU7Z0JBQWE1SyxnQkFBZXpxRSxFQUFFKzFFLFFBQVF0TDtnQkFBZUgsY0FBYXRxRSxFQUFFKzFFLFFBQVF6TDtnQkFBYXFELHlCQUF3QjN0RSxFQUFFKzFFLFFBQVFwSTtnQkFBd0JDLCtCQUE4QjV0RSxFQUFFKzFFLFFBQVFuSTtnQkFBOEJDLDJCQUEwQjd0RSxFQUFFKzFFLFFBQVFsSTtnQkFBMEJDLDRCQUEyQjl0RSxFQUFFKzFFLFFBQVFqSTtnQkFBMkJFLGVBQWNodUUsRUFBRSsxRSxRQUFRL0g7Z0JBQWNDLGNBQWFqdUUsRUFBRSsxRSxRQUFROUg7Z0JBQWFDLGlCQUFnQmx1RSxFQUFFKzFFLFFBQVE3SDtnQkFBZ0JDLGNBQWFudUUsRUFBRSsxRSxRQUFRNUg7Z0JBQWFaLGlCQUFnQi9xRTtnQkFBRWdyRSxVQUFTdHFFO2lCQUFJbXJFO2NBQWlCLE9BQU81b0UsRUFBRTlFLEVBQUV3ckIsU0FBUXhyQixFQUFFNDNEOzthQUFVO2NBQVEsTUFBTSxJQUFJenVELE1BQU0sYUFBV25KLEVBQUV5RCxPQUFLOztBQUFzQixhQUFFcEUsRUFBRWlDLFVBQVFHO0FBQUFBO1FBQUcsTUFBSyxDQUFDcEMsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxNQUFNYixJQUFFYSxFQUFFLE9BQU1NLElBQUVOLEVBQUUsT0FBTU8sSUFBRSxTQUFTMUM7WUFBRyxNQUFNVyxJQUFFLElBQUlxTSxXQUFXLElBQUc3SyxJQUFFLElBQUk2SyxXQUFXO1lBQUcsUUFBT2hOLEtBQUdBLElBQUVBLEVBQUVtTyxlQUFlL0csTUFBTSxLQUFHcEgsRUFBRW9ILE1BQU0sR0FBRSxJQUFJOEcsTUFBTSxJQUFJbEosS0FBSSxTQUFVaEY7Y0FBRyxNQUFNc0IsSUFBRXRCLEVBQUVnTixXQUFXO2NBQUcsT0FBTzFMLEtBQUdYLEtBQUdXLEtBQUdhLElBQUViLElBQUVYLElBQUUsS0FBR1g7QUFBRSxnQkFBR3FGLEtBQUs7QUFBRyxhQUFFMUMsSUFBRSxTQUFTM0M7WUFBRyxJQUFJVyxHQUFFd0IsSUFBRW5DO1lBQUUsTUFBS21DLEVBQUVQLFNBQU8sS0FBR2pCLElBQUV3QixFQUFFaUYsTUFBTSxHQUFFLElBQUdqRixJQUFFb0MsU0FBUzVELEdBQUUsTUFBSSxLQUFHd0IsRUFBRWlGLE1BQU16RyxFQUFFaUI7WUFBUSxPQUFPMkMsU0FBU3BDLEdBQUUsTUFBSTtBQUFFO1VBQUUsTUFBTVU7WUFBRWtCLFlBQVkvRDtjQUFHcUIsS0FBS3kxRSxRQUFNOTJFO0FBQUM7WUFBQ3NGLGlCQUFpQnRGO2NBQUcsTUFBS0EsSUFBRSxJQUFJNkMsRUFBRTdDLElBQUltcUUsWUFBVyxNQUFNLElBQUlyZ0UsTUFBTTtjQUEyQyxPQUFPOUosRUFBRW9xRTtBQUFXO1lBQUM5a0UsY0FBY3RGO2NBQUcsT0FBTzZDLEVBQUVrMEUsWUFBWS8yRSxHQUFHK1A7QUFBVTtZQUFDekssbUJBQW1CdEY7Y0FBRyxLQUFJc0IsRUFBRXV6QyxVQUFVNzBDLElBQUcsTUFBTSxJQUFJOEosTUFBTSw4Q0FBNEM5SjtjQUFHQSxJQUFFQSxFQUFFNkYsUUFBUSxNQUFLLElBQUlBLFFBQVEsTUFBSztjQUFJLE1BQU1sRixJQUFFLFNBQVNYLEdBQUVXO2dCQUFHLElBQUl3QixJQUFFbkM7Z0JBQUUsTUFBS21DLEVBQUVQLFNBQU8sTUFBSU8sSUFBRSxNQUFJQTtnQkFBRSxPQUFPQTtBQUFDLGVBQXhELENBQTBELElBQUlNLEVBQUV6QyxHQUFFLElBQUkrUCxTQUFTO2NBQUssT0FBT2xOLEVBQUVtMEUsU0FBU3IyRSxFQUFFd047QUFBYztZQUFDN0ksZ0JBQWdCdEY7Y0FBRyxNQUFNVyxLQUFHLE9BQUssS0FBR2dDLEVBQUVELEVBQUUsU0FBTzFDLE1BQU1vSCxPQUFPO2NBQUcsT0FBTyxJQUFJdkUsRUFBRSxPQUFLbEMsSUFBRVg7QUFBRTtZQUFDc0Ysc0JBQXNCdEY7Y0FBRyxPQUFPNkMsRUFBRW0wRSxTQUFTLFFBQU1oM0UsRUFBRWkzRSxjQUFZajNFLEVBQUVrM0U7QUFBVztZQUFDNXhFLGVBQWV0RjtjQUFHLE9BQU8sSUFBSTZDLEVBQUU3QyxHQUFHa3FFO0FBQVM7WUFBQ0E7Y0FBVSxPQUFNLGdEQUFnRHQvQyxLQUFLdnBCLEtBQUt5MUUsVUFBUSxNQUFJbjBFLEVBQUVELEVBQUVyQixLQUFLeTFFO0FBQU87WUFBQzNNO2NBQVcsT0FBTyxPQUFLOW9FLEtBQUt5MUUsTUFBTWwxRSxVQUFRLE9BQUtQLEtBQUt5MUUsTUFBTWwxRTtBQUFNO1lBQUN1MUU7Y0FBYSxPQUFPLE9BQUs5MUUsS0FBS3kxRSxNQUFNbDFFO0FBQU07WUFBQ3cxRTtjQUFXLE9BQU8vMUUsS0FBS3kxRSxNQUFNMXZFLE1BQU0sR0FBRTtBQUFFO1lBQUM2dkU7Y0FBYyxPQUFPNTFFLEtBQUs4MUUsZUFBYTkxRSxLQUFLeTFFLE1BQU0xdkUsTUFBTSxHQUFFLE1BQUk7QUFBRTtZQUFDaXdFO2NBQVMsT0FBT2gyRSxLQUFLODFFLGVBQWE5MUUsS0FBS3kxRSxNQUFNMXZFLE1BQU0sTUFBSTtBQUFFO1lBQUNnakU7Y0FBWSxJQUFHL29FLEtBQUs4b0UsWUFBVztnQkFBQyxNQUFNbnFFLElBQUVxQixLQUFLeTFFLE1BQU0xdkUsTUFBTSxJQUFHekcsSUFBRSxJQUFJOEIsRUFBRXpDLEdBQUU7Z0JBQUksT0FBT3NCLEVBQUV3MkMsa0JBQWtCbjNDLEVBQUVvUCxTQUFTLElBQUc7QUFBSTtjQUFDLE9BQU07QUFBRTtZQUFDQTtjQUFXLE9BQU8xTyxLQUFLeTFFO0FBQUs7O1VBQUU5MkUsRUFBRWlDLFVBQVFZO0FBQUFBO1FBQUcsTUFBSyxDQUFDN0MsR0FBRVcsR0FBRXdCO1VBQUssSUFBSWIsSUFBRWEsRUFBRSxNQUFNOEIsUUFBT3hCLElBQUVOLEVBQUUsTUFBTXk3RCxnQkFBZWw3RCxJQUFFUCxFQUFFLE9BQU1RLElBQUVSLEVBQUUsT0FBTVUsSUFBRSxTQUFTN0MsR0FBRVc7WUFBR0EsSUFBRUEsS0FBRyxDQUFDLEdBQUVVLEtBQUt1K0Qsa0JBQWdCai9ELEVBQUVpL0Qsb0JBQWlCLEdBQUd2K0QsS0FBS2krRCxVQUFRMytELEVBQUUyK0QsV0FBUyxHQUFFaitELEtBQUsrN0QsVUFBUXo4RCxFQUFFeThELFNBQVEvN0QsS0FBS2kyRSxRQUFNMzJFLEVBQUUyMkU7WUFBTWoyRSxLQUFLK3ZFLGFBQVU7WUFBRyxNQUFNanZFLEtBQUUsTUFBS3hCLEVBQUU0MkU7WUFBVWwyRSxLQUFLMjdELE9BQUtoOUQsS0FBRyx5QkFBd0JxQixLQUFLaTJFLFVBQVEsWUFBVWoyRSxLQUFLMjdELEtBQUs5MkQsVUFBVSxHQUFFLEtBQUc3RSxLQUFLbTJFLGFBQVcsSUFBSTcwRSxFQUFFNDZELE1BQU07Y0FBQ2dhLFdBQVVwMUU7aUJBQUlkLEtBQUtvMkUsWUFBVSxJQUFJLzBFLEVBQUU2NkQsTUFBTTtjQUFDZ2EsV0FBVXAxRTs7QUFBSTtVQUFFVSxFQUFFaU8sVUFBVTRtRSxrQkFBZ0I7WUFBVyxJQUFJMTNFO1lBQUUsSUFBRyxzQkFBb0I0OUQsZ0JBQWU1OUQsSUFBRSxJQUFJNDlELHFCQUFtQjtjQUFDNTlELElBQUUsSUFBSXlDO2NBQUUsSUFBSTlCLElBQUU7Z0JBQUM2MkUsWUFBV24yRSxLQUFLbTJFO2dCQUFXQyxXQUFVcDJFLEtBQUtvMkU7Z0JBQVVFLFNBQVF0MkUsS0FBS3MyRTs7Y0FBU3QyRSxLQUFLaTJFLFVBQVEzMkUsRUFBRTYyRSxhQUFXbjJFLEtBQUtpMkUsTUFBTTdULE9BQU05aUUsRUFBRTgyRSxZQUFVcDJFLEtBQUtpMkUsTUFBTTlULE1BQUs3aUUsRUFBRWczRSxVQUFRdDJFLEtBQUtpMkUsTUFBTUssVUFBUzMzRSxFQUFFNDNFLFVBQVVqM0U7QUFBRTtZQUFDLE9BQU9YLEVBQUU2OUQsS0FBSyxRQUFPeDhELEtBQUsyN0QsT0FBSyxJQUFJaDlELEVBQUVrZ0UsaUJBQWlCLGdCQUFlLHFCQUFvQmxnRSxFQUFFcy9ELFVBQVFqK0QsS0FBS2krRDtZQUFRdC9ELEVBQUU0L0Qsa0JBQWdCditELEtBQUt1K0QsaUJBQWdCditELEtBQUsrN0QsV0FBUy83RCxLQUFLKzdELFFBQVF6ekQsU0FBUSxTQUFVaEo7Y0FBR1gsRUFBRWtnRSxpQkFBaUJ2L0QsRUFBRW1FLE1BQUtuRSxFQUFFZDtBQUFPLGlCQUFHRztBQUFDLGFBQUU2QyxFQUFFaU8sVUFBVTZ2RCxPQUFLLFNBQVMzZ0UsR0FBRVc7WUFBRyxJQUFJd0IsSUFBRWQsTUFBS29CLElBQUVwQixLQUFLcTJFO1lBQWtCajFFLEVBQUUyOUQscUJBQW1CO2NBQVcsSUFBRyxNQUFJMzlELEVBQUU0OUQsY0FBWSxNQUFJNTlELEVBQUU2OEQsU0FBUTtnQkFBQyxJQUFJdC9ELElBQUV5QyxFQUFFdS9ELGNBQWF0L0QsSUFBRTtnQkFBSztrQkFBSTFDLElBQUVpRixLQUFLQyxNQUFNbEY7QUFBK0Msa0JBQTVDLE9BQU1BO2tCQUFHMEMsSUFBRXBCLEVBQUV3bUUsZ0JBQWdCcmxFLEVBQUV1L0Q7QUFBYTtnQkFBQzcvRCxFQUFFaXZFLGFBQVUsR0FBR3p3RSxFQUFFK0IsR0FBRTFDO0FBQUU7QUFBQyxlQUFFeUMsRUFBRXc5RCxZQUFVO2NBQVc5OUQsRUFBRWl2RSxhQUFVLEdBQUd6d0UsRUFBRVcsRUFBRXltRSxrQkFBa0IxbUUsS0FBS2krRDtBQUFTO1lBQUU7Y0FBSTc4RCxFQUFFaytELEtBQUsxN0QsS0FBS0UsVUFBVW5GO0FBQWdFLGNBQTVELE9BQU1BO2NBQUdxQixLQUFLK3ZFLGFBQVUsR0FBR3p3RSxFQUFFVyxFQUFFcW1FLGtCQUFrQnRtRSxLQUFLMjdEO0FBQU07QUFBQyxhQUFFbjZELEVBQUVpTyxVQUFVK21FLGFBQVcsWUFBVyxHQUFFaDFFLEVBQUVpTyxVQUFVZ25FLHdCQUFzQjtZQUFXLFFBQU07QUFBRSxhQUFFOTNFLEVBQUVpQyxVQUFRWTtBQUFBQTtRQUFHLE1BQUssQ0FBQzdDLEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxNQUFLTyxJQUFFUCxFQUFFLE9BQU1RLElBQUVSLEVBQUUsT0FBTVUsSUFBRVYsRUFBRSxPQUFNVyxJQUFFLFNBQVM5QyxHQUFFVztZQUFHLElBQUl3QixJQUFFO1lBQUcsT0FBT3hCLEVBQUVnSixTQUFRLFNBQVVoSjtjQUFHLElBQUcsbUJBQWlCQSxFQUFFK0QsWUFBVztnQkFBQyxJQUFHLFlBQVUvRCxFQUFFeUQsS0FBSzhCLFVBQVUsR0FBRSxJQUFHLE1BQU0sSUFBSTRELE1BQU07Z0JBQTRELElBQUl4SSxJQUFFLElBQUdtQixJQUFFOUIsRUFBRXlELEtBQUtqQixRQUFRO2dCQUFLVixLQUFHLE1BQUluQixJQUFFWCxFQUFFeUQsS0FBSzhCLFVBQVV6RDtnQkFBSSxJQUFJQyxJQUFFSSxFQUFFOUMsR0FBRVcsRUFBRStEO2dCQUFZNkUsTUFBTUMsUUFBUTlHLE1BQUkxQyxJQUFFbUMsRUFBRU4sS0FBSyxXQUFTYSxFQUFFMkMsS0FBSyxPQUFLLE1BQUkvRCxLQUFHdEIsSUFBRW1DLEVBQUVOLEtBQUssTUFBSWEsSUFBRSxPQUFLUCxFQUFFTixLQUFLLE1BQUlhLEVBQUUyQyxLQUFLLE9BQUssTUFBSS9EO0FBQUUscUJBQU1hLEVBQUVOLEtBQUtsQixFQUFFeUQ7QUFBTSxpQkFBR2pDO0FBQUMsYUFBRTFCLElBQUUsU0FBU1Q7WUFBRyxLQUFJeUMsRUFBRTRtRSxZQUFZcnBFLElBQUcsTUFBTSxJQUFJOEosTUFBTTtZQUE2QyxJQUFJbkosSUFBRSxJQUFHd0IsSUFBRSxHQUFFYixJQUFFdEIsRUFBRTRCO1lBQU8sS0FBSSxTQUFPNUIsRUFBRWtHLFVBQVUsR0FBRSxPQUFLL0QsSUFBRSxJQUFHQSxJQUFFYixHQUFFYSxLQUFHLEdBQUU7Y0FBQyxJQUFJTyxJQUFFNkIsU0FBU3ZFLEVBQUVvSCxNQUFNakYsR0FBRUEsSUFBRSxJQUFHO2NBQUl4QixLQUFHeUUsT0FBTzZILGFBQWF2SztBQUFFO1lBQUMsT0FBTy9CO0FBQUMsYUFBRXVDLElBQUUsU0FBU2xEO1lBQUcsS0FBSUEsR0FBRSxPQUFNO1lBQU8sS0FBSSxJQUFJVyxJQUFFLElBQUd3QixJQUFFLEdBQUVBLElBQUVuQyxFQUFFNEIsUUFBT08sS0FBSTtjQUFDLElBQUliLElBQUV0QixFQUFFZ04sV0FBVzdLLEdBQUc0TixTQUFTO2NBQUlwUCxLQUFHVyxFQUFFTSxTQUFPLElBQUUsTUFBSU4sSUFBRUE7QUFBQztZQUFDLE9BQU0sT0FBS1g7QUFBQyxhQUFFeUIsSUFBRSxTQUFTcEM7WUFBRyxJQUFHQSxJQUFFQSxJQUFFQSxFQUFFaU8sZ0JBQWMsVUFBUzNNLEVBQUVrK0MsUUFBUXgvQyxJQUFHLE1BQU0sSUFBSThKLE1BQU0sZ0JBQWM5SixJQUFFLGdFQUE4RGlGLEtBQUtFLFVBQVU3RCxFQUFFaytDLFNBQVEsTUFBSztZQUFJLE9BQU94L0M7QUFBQztVQUFFQSxFQUFFaUMsVUFBUTtZQUFDa3RFLFlBQVcsU0FBU252RSxHQUFFVyxHQUFFd0IsR0FBRWIsR0FBRW1CO2NBQUcsUUFBT3pDLEtBQUcsbUJBQWlCQSxLQUFHQSxhQUFhOEosVUFBUTlKLEVBQUU0RyxVQUFRNUcsRUFBRTRHLFFBQU0sbUJBQWlCNUcsRUFBRTRHLFFBQU0yQyxNQUFNQyxRQUFReEosRUFBRTRHLFdBQVM1RyxFQUFFNEcsT0FBSzNCLEtBQUtFLFVBQVVuRixFQUFFNEcsTUFBSyxNQUFLO2NBQUk1RyxJQUFFQSxFQUFFK0ksVUFBUSxPQUFLL0ksRUFBRTRHLE9BQU0sbUJBQWlCNUcsTUFBSUEsSUFBRSxJQUFJOEosTUFBTTlKLEtBQUkscUJBQW1Cc0IsS0FBR0EsRUFBRXRCLEdBQUV5QyxJQUFHLHFCQUFtQk4sT0FBS3hCLEtBQUcscUJBQW1CQSxFQUFFdy9DLGFBQVd4L0MsRUFBRXcvQyxVQUFVLFNBQVN2K0MsVUFBUSxxQkFBbUJOLE1BQUlYLEVBQUVxdkIsT0FBTSxZQUFhO2NBQUd4SyxZQUFXO2dCQUFZcmpCLEVBQUVuQztBQUFHLGtCQUFFLEtBQUlXLEtBQUcscUJBQW1CQSxFQUFFd2pCLFFBQU1xQixZQUFXO2dCQUFZN2tCLEVBQUV3akIsS0FBSyxTQUFRbmtCLEdBQUV5QyxJQUFHOUIsRUFBRTAvQztBQUFxQixrQkFBRSxJQUFHMS9DO0FBQUM7WUFBRTJ5RSw4QkFBNkIsU0FBU3R6RTtjQUFHLE9BQU9BLEtBQUcsbUJBQWlCQSxLQUFHQSxFQUFFOEUsU0FBTyxNQUFJOUUsRUFBRThFLEtBQUszQixRQUFRLE9BQUtuRCxFQUFFOEUsT0FBSzlFLEVBQUU4RSxPQUFLLE1BQUloQyxHQUFFLEdBQUc5QyxFQUFFbTBFLFFBQVE5dUUsS0FBSyxPQUFLO0FBQUc7WUFBRTB5RSxlQUFjajFFO1lBQUVrMUUsV0FBVSxTQUFTaDRFO2NBQUcsT0FBTSxPQUFLMkMsRUFBRTNDLEdBQUcrUCxTQUFTO0FBQU07WUFBRXRCLElBQUdoTSxFQUFFZ007WUFBR2ltQixNQUFLanlCLEVBQUVpeUI7WUFBS3EvQyxhQUFZdHhFLEVBQUVzeEU7WUFBWXRLLE9BQU1obkUsRUFBRWduRTtZQUFNSixhQUFZNW1FLEVBQUU0bUU7WUFBWVksTUFBS3huRSxFQUFFd25FO1lBQUtnTyxTQUFReDFFLEVBQUV3MUU7WUFBUTVqQyxXQUFVNXhDLEVBQUV3bkU7WUFBS2lPLGNBQWF4MUUsRUFBRXcxRTtZQUFhQyxpQkFBZ0J6MUUsRUFBRXkxRTtZQUFnQkMsY0FBYTExRSxFQUFFMDFFO1lBQWF2akMsV0FBVXB5QyxFQUFFb3lDO1lBQVV3akMsc0JBQXFCNTFFLEVBQUU0MUU7WUFBcUJ2Z0MsbUJBQWtCLFNBQVM5M0M7Y0FBRyxTQUFHLE1BQVNBLEdBQUUsT0FBTTtjQUFHLEtBQUksdUJBQXVCNHFCLEtBQUs1cUIsSUFBRyxNQUFNLElBQUk4SixNQUFNLG9CQUFrQjlKLElBQUU7Y0FBc0NBLElBQUVBLEVBQUVpTyxjQUFjcEksUUFBUSxRQUFPO2NBQUksS0FBSSxJQUFJbEYsSUFBRThCLEVBQUV3bkUsS0FBS2pxRSxHQUFHNkYsUUFBUSxRQUFPLEtBQUkxRCxJQUFFLE1BQUtiLElBQUUsR0FBRUEsSUFBRXRCLEVBQUU0QixRQUFPTixLQUFJaUQsU0FBUzVELEVBQUVXLElBQUcsTUFBSSxJQUFFYSxLQUFHbkMsRUFBRXNCLEdBQUc2TSxnQkFBY2hNLEtBQUduQyxFQUFFc0I7Y0FBRyxPQUFPYTtBQUFDO1lBQUVnVCxPQUFNMVMsRUFBRTBTO1lBQU1pMEQsTUFBSzNtRSxFQUFFMm1FO1lBQUtoMUIsWUFBVzN4QyxFQUFFMnhDO1lBQVdra0MsWUFBVzcxRSxFQUFFNjFFO1lBQVc5TSxtQkFBa0Ivb0UsRUFBRStvRTtZQUFrQjVCLGFBQVlubkUsRUFBRW1uRTtZQUFZMk8sV0FBVTkxRSxFQUFFbW5FO1lBQVlOLGFBQVk3bUUsRUFBRTZtRTtZQUFZa1AsYUFBWS8xRSxFQUFFNm1FO1lBQVltUCxXQUFVaDJFLEVBQUVnMkU7WUFBVUMsYUFBWWoyRSxFQUFFZzJFO1lBQVV0K0IsUUFBTzEzQyxFQUFFZzJFO1lBQVUxL0IsZ0JBQWV0MkMsRUFBRXMyQztZQUFlc3lCLFdBQVU1b0UsRUFBRTRvRTtZQUFVc04sYUFBWWwyRSxFQUFFNG9FO1lBQVU5dUIsVUFBUzk1QyxFQUFFNG9FO1lBQVV1TixZQUFXbjRFO1lBQUUrN0MsU0FBUS83QztZQUFFbzRFLFlBQVczMUU7WUFBRW81QyxXQUFVcDVDO1lBQUVzOEMsU0FBUWwrQyxFQUFFaytDO1lBQVFNLE9BQU0sU0FBUzkvQyxHQUFFVztjQUFHLElBQUdBLElBQUV5QixFQUFFekIsS0FBSThCLEVBQUVpeUIsS0FBSzEwQixNQUFJLG1CQUFpQkEsR0FBRSxNQUFNLElBQUk4SixNQUFNO2NBQTJFLE9BQU9ySCxFQUFFaXlCLEtBQUsxMEIsS0FBR3NCLEVBQUV3K0MsTUFBTTkvQyxHQUFFVyxLQUFHVyxFQUFFdytDLE1BQU05L0MsR0FBRVcsR0FBR29QLFNBQVM7QUFBRztZQUFFNHZDLFNBQVEsU0FBUzMvQyxHQUFFVztjQUFHLElBQUdBLElBQUV5QixFQUFFekIsS0FBSThCLEVBQUVpeUIsS0FBSzEwQixNQUFJLG1CQUFpQkEsR0FBRSxNQUFNLElBQUk4SixNQUFNO2NBQTJFLE9BQU9ySCxFQUFFaXlCLEtBQUsxMEIsS0FBR3NCLEVBQUVxK0MsUUFBUTMvQyxHQUFFVyxLQUFHVyxFQUFFcStDLFFBQVEzL0MsR0FBRVcsR0FBR29QLFNBQVM7QUFBRztZQUFFMGtDLFNBQVFoeUMsRUFBRXV4RTtZQUFRQSxTQUFRdnhFLEVBQUV1eEU7WUFBUThFLFVBQVNyMkUsRUFBRXd4RTtZQUFTQSxVQUFTeHhFLEVBQUV3eEU7WUFBUzhFLGtCQUFpQnQyRSxFQUFFczJFO1lBQWlCemtDLFNBQVE3eEMsRUFBRTZ4QztZQUFRRSw4QkFBNkIveEMsRUFBRSt4QztZQUE2QkUsMEJBQXlCanlDLEVBQUVpeUM7WUFBeUJFLFNBQVFueUMsRUFBRW15QztZQUFRRCxnQkFBZWx5QyxFQUFFa3lDO1lBQWVKLFdBQVU5eEMsRUFBRTh4QztZQUFVeWtDLHFCQUFvQixTQUFTaDVFLEdBQUVXO2NBQUcsSUFBR1gsS0FBR1csR0FBRSxPQUFPO2NBQUUsSUFBRyxhQUFXWCxLQUFHLGNBQVlBLEtBQUcsS0FBR0EsS0FBRyxhQUFXVyxLQUFHLGNBQVlBLEtBQUcsS0FBR0EsR0FBRTtnQkFBQyxJQUFHLGFBQVdYLEtBQUcsY0FBWUEsR0FBRSxRQUFPO2dCQUFFLElBQUcsYUFBV1csS0FBRyxjQUFZQSxHQUFFLE9BQU87Z0JBQUUsSUFBRyxZQUFVWCxHQUFFLE9BQU0sYUFBV1csS0FBRyxJQUFFO2dCQUFFLElBQUcsYUFBV0EsR0FBRSxPQUFNLGFBQVdYLElBQUUsS0FBRztnQkFBRSxJQUFHLGFBQVdBLEdBQUUsT0FBTztnQkFBRSxJQUFHLGFBQVdXLEdBQUUsUUFBTztnQkFBRTtrQkFBQyxJQUFJd0IsSUFBRSxJQUFJVSxFQUFFN0MsSUFBR3NCLElBQUUsSUFBSXVCLEVBQUVsQztrQkFBRyxPQUFPd0IsRUFBRStJLEdBQUc1SixNQUFJLElBQUVhLEVBQUV5TixHQUFHdE8sS0FBRyxJQUFFO0FBQUM7QUFBQztjQUFDLE9BQU87QUFBQztZQUFFeUcsVUFBU3RGLEVBQUVzRjs7QUFBUTtRQUFHLE1BQUssQ0FBQy9ILEdBQUVXLEdBQUV3QjtVQUFLLElBQUliLElBQUVhLEVBQUUsT0FBTU0sSUFBRU4sRUFBRSxNQUFLTyxJQUFFLFNBQVMxQztZQUFHLElBQUlXLFdBQVNYO1lBQUUsSUFBRyxhQUFXVyxHQUFFLE9BQU84QixFQUFFNG1FLFlBQVlycEUsS0FBRyxJQUFJc0IsRUFBRXRCLEVBQUU2RixRQUFRLE9BQU0sS0FBSSxNQUFJLElBQUl2RSxFQUFFdEIsR0FBRTtZQUFJLElBQUcsYUFBV1csR0FBRSxPQUFPLElBQUlXLEVBQUV0QjtZQUFHLElBQUd5QyxFQUFFc3hFLFlBQVkvekUsSUFBRyxPQUFPLElBQUlzQixFQUFFdEIsRUFBRStQLFNBQVM7WUFBSyxJQUFHdE4sRUFBRWl5QixLQUFLMTBCLElBQUcsT0FBT0E7WUFBRSxNQUFNLElBQUk4SixNQUFNOUosSUFBRTtBQUFtQixhQUFFMkMsSUFBRSxTQUFTM0MsR0FBRVcsR0FBRXdCO1lBQUcsSUFBSVEsR0FBRUUsR0FBRUM7WUFBRSxJQUFHLGFBQVc5QyxLQUFHOEMsSUFBRTlDLEdBQUd3cEUsV0FBVyxVQUFRLFdBQVMxbUUsRUFBRXNFLE1BQU0sS0FBRyxVQUFRdEUsSUFBRSxXQUFTQSxFQUFFMG1FLFdBQVcsV0FBUyxZQUFVMW1FLEVBQUVzRSxNQUFNLEtBQUcsV0FBU3RFLElBQUUsWUFBVUEsRUFBRTBtRSxXQUFXLFlBQVUsaUJBQWUxbUUsRUFBRXNFLE1BQU0sS0FBRyxZQUFVdEUsSUFBRSxpQkFBZUEsRUFBRTBtRSxXQUFXLGFBQVcsa0JBQWdCMW1FLEVBQUVzRSxNQUFNLEtBQUcsYUFBV3RFLElBQUUsa0JBQWdCQSxJQUFHO2NBQUMsSUFBR25DLEVBQUVrRixRQUFRLFFBQU8sSUFBSWpFLFNBQU8sS0FBRyxHQUFFLE1BQU0sSUFBSWtJLE1BQU0sOEJBQTRCbkosRUFBRWlCO2NBQVEsT0FBT2pCO0FBQUM7WUFBQyxJQUFHLGFBQVdYLEdBQUUsT0FBT3lDLEVBQUU0b0UsVUFBVTFxRTtZQUFHLElBQUcsV0FBU1gsR0FBRSxPQUFPVyxJQUFFLE9BQUs7WUFBSyxJQUFHWCxFQUFFd3BFLFdBQVcsWUFBVztjQUFDLElBQUc3bUUsSUFBRVIsSUFBRSxLQUFHLEtBQUlNLEVBQUVveUMsVUFBVWwwQyxJQUFHLE1BQU0sSUFBSW1KLE1BQU1uSixJQUFFO2NBQXdELE9BQU84QixFQUFFdXhFLFFBQVFyekUsRUFBRXNOLGVBQWN0TDtBQUFFO1lBQUMsSUFBR0EsSUFBRSxTQUFTM0M7Y0FBRyxJQUFJVyxJQUFFLGVBQWUyckQsS0FBS3RzRDtjQUFHLE9BQU9XLElBQUU0RCxTQUFTNUQsRUFBRSxJQUFHLE1BQUk7QUFBSSxhQUF4RSxDQUEwRVgsSUFBR0EsRUFBRXdwRSxXQUFXLFVBQVM7Y0FBQyxLQUFJN21FLEdBQUUsTUFBTSxJQUFJbUgsTUFBTTtjQUF5QyxJQUFHM0gsTUFBSVEsSUFBRSxLQUFJQSxJQUFFLEtBQUdBLElBQUUsTUFBSUEsSUFBRWhDLEVBQUVrRixRQUFRLFFBQU8sSUFBSWpFLFNBQU8sR0FBRSxNQUFNLElBQUlrSSxNQUFNLGtCQUFnQm5ILElBQUUsVUFBUWhDO2NBQUcsT0FBTzhCLEVBQUV3eEUsU0FBU3R6RSxHQUFFLElBQUVnQztBQUFFO1lBQUMsSUFBRzNDLEVBQUV3cEUsV0FBVyxTQUFRO2NBQUMsSUFBRzdtRSxJQUFFLEtBQUdBLElBQUUsS0FBR0EsSUFBRSxLQUFJLE1BQU0sSUFBSW1ILE1BQU0saUJBQWVuSCxJQUFFO2NBQVMsS0FBSUUsSUFBRUgsRUFBRS9CLElBQUkyVSxjQUFZM1MsR0FBRSxNQUFNLElBQUltSCxNQUFNLGtDQUFnQ25ILElBQUUsU0FBT0UsRUFBRXlTO2NBQWEsSUFBR3pTLEVBQUVxSSxHQUFHLElBQUk1SixFQUFFLEtBQUksTUFBTSxJQUFJd0ksTUFBTSxtQkFBaUJqSCxFQUFFa04sYUFBVztjQUFnQixPQUFPcE4sSUFBRUYsRUFBRXV4RSxRQUFRbnhFLEVBQUVrTixTQUFTLFFBQU9wTixJQUFFLElBQUUsS0FBR0U7QUFBQztZQUFDLElBQUc3QyxFQUFFd3BFLFdBQVcsUUFBTztjQUFDLElBQUc3bUUsSUFBRSxLQUFHQSxJQUFFLEtBQUdBLElBQUUsS0FBSSxNQUFNLElBQUltSCxNQUFNLGdCQUFjbkgsSUFBRTtjQUFTLEtBQUlFLElBQUVILEVBQUUvQixJQUFJMlUsY0FBWTNTLEdBQUUsTUFBTSxJQUFJbUgsTUFBTSxpQ0FBK0JuSCxJQUFFLFNBQU9FLEVBQUV5UztjQUFhLE9BQU96UyxFQUFFcUksR0FBRyxJQUFJNUosRUFBRSxNQUFJdUIsRUFBRTJJLE9BQU83SSxHQUFHb04sU0FBUyxTQUFPcE4sSUFBRUYsRUFBRXV4RSxRQUFRbnhFLEVBQUVrTixTQUFTLFFBQU9wTixJQUFFLElBQUUsS0FBR0U7QUFBQztZQUFDLE1BQU0sSUFBSWlILE1BQU0sa0NBQWdDOUo7QUFBRSxhQUFFNkMsSUFBRSxTQUFTN0M7WUFBRyxJQUFHdUosTUFBTUMsUUFBUXhKLElBQUcsTUFBTSxJQUFJOEosTUFBTTtZQUFrRCxJQUFJbkosR0FBRXdCLEdBQUVPLElBQUU7WUFBRyxJQUFHMUMsS0FBRyxtQkFBaUJBLE1BQUlBLEVBQUUyZixlQUFlLFFBQU0zZixFQUFFMmYsZUFBZSxRQUFNM2YsRUFBRTJmLGVBQWUsWUFBVTNmLEVBQUUyZixlQUFlLFlBQVVoZixJQUFFWCxFQUFFMmYsZUFBZSxPQUFLM2YsRUFBRVcsSUFBRVgsRUFBRW9FO1lBQUsxQixJQUFFMUMsRUFBRTJmLGVBQWUsT0FBSzNmLEVBQUV1QixJQUFFdkIsRUFBRUgsVUFBUWMsSUFBRThCLEVBQUUwUyxNQUFNblYsSUFBRSxJQUFJMEMsSUFBRUQsRUFBRTBTLE1BQU1uVixJQUFHVyxFQUFFNm9FLFdBQVcsVUFBUTdvRSxFQUFFNm9FLFdBQVcsWUFBVTdvRSxJQUFFO2FBQVdBLEVBQUU2b0UsV0FBVyxXQUFTN29FLEVBQUU2b0UsV0FBVyxXQUFTLG1CQUFpQjltRSxLQUFHLFdBQVdrb0IsS0FBS2xvQixPQUFLQSxJQUFFLElBQUlwQixFQUFFb0IsS0FBSTZHLE1BQU1DLFFBQVE5RyxJQUFHO2NBQUMsSUFBR1AsSUFBRSxTQUFTbkM7Z0JBQUcsSUFBSVcsSUFBRSxvQkFBb0IyckQsS0FBS3RzRDtnQkFBRyxPQUFPVyxJQUFFNEQsU0FBUzVELEVBQUUsSUFBRyxNQUFJO0FBQUksZUFBN0UsQ0FBK0VBLElBQUd3QixLQUFHTyxFQUFFZCxXQUFTTyxHQUFFLE1BQU0sSUFBSTJILE1BQU1uSixJQUFFLHNDQUFvQ3NFLEtBQUtFLFVBQVV6QztjQUFJUCxJQUFFTyxFQUFFZDtBQUFNO1lBQUMsT0FBTzJILE1BQU1DLFFBQVE5RyxLQUFHQSxFQUFFc0MsS0FBSSxTQUFVaEY7Y0FBRyxPQUFPMkMsRUFBRWhDLEdBQUVYLEdBQUVtQyxHQUFHNE4sU0FBUyxPQUFPbEssUUFBUSxNQUFLO0FBQUksZ0JBQUdSLEtBQUssTUFBSTFDLEVBQUVoQyxHQUFFK0IsR0FBRVAsR0FBRzROLFNBQVMsT0FBT2xLLFFBQVEsTUFBSztBQUFHO1VBQUU3RixFQUFFaUMsVUFBUTtZQUFDaTJFLGNBQWE7Y0FBVyxJQUFJbDRFLElBQUV1SixNQUFNdUgsVUFBVTFKLE1BQU0xRixLQUFLd08sWUFBV3ZQLElBQUVYLEVBQUVnRixJQUFJbkM7Y0FBRyxPQUFPSixFQUFFd25FLEtBQUssT0FBS3RwRSxFQUFFMEUsS0FBSztBQUFJO1lBQUU4eUUsaUJBQWdCO2NBQVcsT0FBTzExRSxFQUFFdzFFLFFBQVEsT0FBSzF1RSxNQUFNdUgsVUFBVTFKLE1BQU0xRixLQUFLd08sV0FBV2xMLElBQUluQyxHQUFHd0MsS0FBSztBQUFJO1lBQUUreUUsY0FBYTtjQUFXLElBQUlwNEUsSUFBRXVKLE1BQU11SCxVQUFVMUosTUFBTTFGLEtBQUt3TyxZQUFXdlAsSUFBRVgsRUFBRWdGLElBQUluQztjQUFHLE9BQU0sT0FBS2xDLEVBQUUwRSxLQUFLLElBQUk0STtBQUFhOztBQUFDO1FBQUcsS0FBSSxDQUFDak8sR0FBRVcsR0FBRXdCO1VBQUssSUFBSWIsSUFBRWEsRUFBRSxNQUFNeWpCLFFBQU9uakIsSUFBRU4sRUFBRSxPQUFNTyxJQUFFUCxFQUFFLE9BQU1RLElBQUVSLEVBQUUsT0FBTVUsSUFBRVYsRUFBRSxPQUFNVyxJQUFFWCxFQUFFLE9BQU0xQixJQUFFLFNBQVNUO1lBQUcsT0FBT3lDLEVBQUVpeUIsS0FBSzEwQjtBQUFFLGFBQUVrRCxJQUFFLFNBQVNsRDtZQUFHLE9BQU9BLEtBQUdBLEVBQUUrRCxlQUFhLGdCQUFjL0QsRUFBRStELFlBQVllO0FBQUksYUFBRTFDLElBQUUsU0FBU3BDO1lBQUc7Y0FBSSxPQUFPMEMsRUFBRXBDLE1BQU0sTUFBSzRQO0FBQThELGNBQW5ELE9BQU12UDtjQUFHLE1BQU0sSUFBSW1KLE1BQU1uSixJQUFFLG9CQUFrQlgsSUFBRTtBQUFJO0FBQUMsYUFBRXNELElBQUUsU0FBU3REO1lBQUcsU0FBUSx1QkFBdUI0cUIsS0FBSzVxQixVQUFRLHlCQUF5QjRxQixLQUFLNXFCLE9BQUsseUJBQXlCNHFCLEtBQUs1cUIsT0FBSzZELEVBQUU3RDtBQUFHLGFBQUU2RCxJQUFFLFNBQVM3RDtZQUFHQSxJQUFFQSxFQUFFNkYsUUFBUSxRQUFPO1lBQUksS0FBSSxJQUFJbEYsSUFBRUUsRUFBRWIsRUFBRWlPLGVBQWVwSSxRQUFRLFFBQU8sS0FBSTFELElBQUUsR0FBRUEsSUFBRSxJQUFHQSxLQUFJLElBQUdvQyxTQUFTNUQsRUFBRXdCLElBQUcsTUFBSSxLQUFHbkMsRUFBRW1DLEdBQUdnTSxrQkFBZ0JuTyxFQUFFbUMsTUFBSW9DLFNBQVM1RCxFQUFFd0IsSUFBRyxPQUFLLEtBQUduQyxFQUFFbUMsR0FBRzhMLGtCQUFnQmpPLEVBQUVtQyxJQUFHLFFBQU07WUFBRyxRQUFNO0FBQUUsYUFBRUssSUFBRSxTQUFTeEM7WUFBRyxJQUFJVyxJQUFFO1lBQUdYLEtBQUdBLEtBQUdBLEtBQUdBLEtBQUdBLElBQUUyQyxFQUFFa0csT0FBTzdJLElBQUk2RixRQUFRLGdCQUFlLEtBQUtxSSxNQUFNLElBQUkrcUUsVUFBVTV6RSxLQUFLLEtBQUtRLFFBQVEsZ0JBQWUsS0FBS3FJLE1BQU0sSUFBSStxRSxVQUFVNXpFLEtBQUs7WUFBSSxLQUFJLElBQUlsRCxJQUFFLEdBQUVBLElBQUVuQyxFQUFFNEIsUUFBT08sS0FBSTtjQUFDLElBQUliLElBQUV0QixFQUFFZ04sV0FBVzdLLEdBQUc0TixTQUFTO2NBQUlwUCxLQUFHVyxFQUFFTSxTQUFPLElBQUUsTUFBSU4sSUFBRUE7QUFBQztZQUFDLE9BQU0sT0FBS1g7QUFBQyxhQUFFOEUsSUFBRSxTQUFTekY7WUFBRyxLQUFJQSxHQUFFLE9BQU9BO1lBQUUsSUFBRyxtQkFBaUJBLE1BQUltRyxFQUFFbkcsSUFBRyxNQUFNLElBQUk4SixNQUFNLGtCQUFnQjlKLElBQUU7WUFBZ0MsT0FBT29DLEVBQUVwQyxHQUFHK0g7QUFBVSxhQUFFckgsSUFBRSxTQUFTVjtZQUFHLElBQUcsUUFBTUEsR0FBRSxPQUFPQTtZQUFFLEtBQUlvakMsU0FBU3BqQyxPQUFLbUcsRUFBRW5HLElBQUcsTUFBTSxJQUFJOEosTUFBTSxrQkFBZ0I5SixJQUFFO1lBQXNCLElBQUlXLElBQUV5QixFQUFFcEMsSUFBR21DLElBQUV4QixFQUFFb1AsU0FBUztZQUFJLE9BQU9wUCxFQUFFdUssR0FBRyxJQUFJekksRUFBRSxNQUFJLFFBQU1OLEVBQUVpRixNQUFNLEtBQUcsT0FBS2pGO0FBQUMsYUFBRXZCLElBQUUsU0FBU1osR0FBRVc7WUFBRyxJQUFHMkMsRUFBRXRELElBQUcsT0FBT1csSUFBRSxZQUFVLE9BQUtYLEVBQUVpTyxjQUFjcEksUUFBUSxRQUFPO1lBQUksSUFBRyxvQkFBa0I3RixHQUFFLE9BQU9XLElBQUUsU0FBT1gsSUFBRSxTQUFPO1lBQU8sSUFBR3NCLEVBQUU0a0IsU0FBU2xtQixJQUFHLE9BQU0sT0FBS0EsRUFBRStQLFNBQVM7WUFBTyxJQUFHLG1CQUFpQi9QLEtBQUdBLE1BQUlrRCxFQUFFbEQsT0FBS1MsRUFBRVQsSUFBRyxPQUFPVyxJQUFFLFdBQVM2QixFQUFFeUMsS0FBS0UsVUFBVW5GO1lBQUksSUFBRyxtQkFBaUJBLEdBQUU7Y0FBQyxJQUFHLE1BQUlBLEVBQUVtRCxRQUFRLFVBQVEsTUFBSW5ELEVBQUVtRCxRQUFRLFFBQU8sT0FBT3hDLElBQUUsV0FBU0QsRUFBRVY7Y0FBRyxJQUFHLE1BQUlBLEVBQUVtRCxRQUFRLFNBQU8sTUFBSW5ELEVBQUVtRCxRQUFRLE9BQU0sT0FBT3hDLElBQUUsVUFBUVg7Y0FBRSxLQUFJb2pDLFNBQVNwakMsSUFBRyxPQUFPVyxJQUFFLFdBQVM2QixFQUFFeEM7QUFBRTtZQUFDLE9BQU9XLElBQUVYLElBQUUsSUFBRSxXQUFTLFlBQVVVLEVBQUVWO0FBQUUsYUFBRW1HLElBQUUsU0FBU25HO1lBQUcsUUFBTyxtQkFBaUJBLEtBQUcsbUJBQWlCQSxNQUFJLHFCQUFxQjRxQixLQUFLNXFCO0FBQUUsYUFBRXVCLElBQUUsU0FBU3ZCO1lBQUcsUUFBTyxtQkFBaUJBLEtBQUcsbUJBQWlCQSxNQUFJLHdCQUF3QjRxQixLQUFLNXFCO0FBQUUsYUFBRXVHLElBQUUsc0VBQXFFMUYsSUFBRSxTQUFTYjtZQUFHUyxFQUFFVCxPQUFLQSxJQUFFQSxFQUFFK1AsYUFBWTVKLEVBQUVuRyxNQUFJLE9BQU80cUIsS0FBSzVxQixFQUFFK1AsY0FBWS9QLElBQUU2QyxFQUFFNHhCLFNBQVN6MEIsS0FBRyxtQkFBaUJBLE1BQUlBLElBQUVzQixFQUFFaUcsS0FBS3ZILEdBQUU7WUFBVSxJQUFJVyxJQUFFa0MsRUFBRTAyQyxZQUFZMTJDLEVBQUV3eEMsVUFBVXIwQztZQUFJLE9BQU9XLE1BQUk0RixJQUFFLE9BQUs1RjtBQUFDO1VBQUVFLEVBQUVxNEUsUUFBTXIyRSxFQUFFd3hDO1VBQVUsSUFBSTVyQyxJQUFFLFNBQVN6STtZQUFHLElBQUcsbUJBQWlCQSxLQUFHQSxFQUFFbWpDLFNBQVMsT0FBTTtjQUFDLE9BQU14aUMsR0FBRXdCLEtBQUduQyxFQUFFbTVFLG9CQUFvQjNQLFdBQVcsT0FBSyxFQUFDLEtBQUl4cEUsRUFBRW9ILE1BQU0sT0FBSSxFQUFDLElBQUdwSCxFQUFFb0gsTUFBTTtjQUFJLE9BQU8sSUFBSTNFLEVBQUU5QixJQUFFd0IsR0FBRTtBQUFHO1lBQUMsT0FBTyxJQUFJTSxFQUFFekM7QUFBRTtVQUFFdUQsT0FBT3V0QixlQUFlcm9CLEdBQUVoRyxJQUFHYyxPQUFPdXRCLGVBQWVyb0IsRUFBRXFJLFdBQVVyTyxFQUFFcU8sWUFBVzlRLEVBQUVpQyxVQUFRO1lBQUN3TSxJQUFHaEc7WUFBRWlzQixNQUFLajBCO1lBQUVzekUsYUFBWTd3RTtZQUFFa21FLE1BQUtobkU7WUFBRXl5QyxXQUFVdnhDO1lBQUVneEMsU0FBUSxTQUFTdDBDO2NBQUcsT0FBTzhDLEVBQUV3eEMsUUFBUXQwQztBQUFFO1lBQUV3MEMsOEJBQTZCLFNBQVN4MEMsR0FBRVc7Y0FBRyxPQUFPbUMsRUFBRTB4Qyw2QkFBNkJ4MEMsR0FBRVc7QUFBRTtZQUFFK3pDLDBCQUF5QixTQUFTMTBDLEdBQUVXO2NBQUcsT0FBT21DLEVBQUU0eEMseUJBQXlCMTBDLEdBQUVXO0FBQUU7WUFBRWkwQyxTQUFRLFNBQVM1MEM7Y0FBRyxPQUFPOEMsRUFBRTh4QyxRQUFRNTBDO0FBQUU7WUFBRTIwQyxnQkFBZSxTQUFTMzBDLEdBQUVXO2NBQUcsT0FBT21DLEVBQUU2eEMsZUFBZTMwQyxHQUFFVztBQUFFO1lBQUU0ekMsV0FBVSxTQUFTdjBDLEdBQUVXO2NBQUcsT0FBT21DLEVBQUV5eEMsVUFBVXYwQyxHQUFFVztBQUFFO1lBQUUwM0Usc0JBQXFCeDBFO1lBQUV3bkUsV0FBVTdvRTtZQUFFaTJFLFdBQVUsU0FBU3o0RTtjQUFHLEtBQUltRyxFQUFFbkcsSUFBRyxNQUFNLElBQUk4SixNQUFNLG9CQUFrQjlKLElBQUU7Y0FBaUMsS0FBSSxJQUFJVyxJQUFFLElBQUd3QixJQUFFLEdBQUViLEtBQUd0QixLQUFHQSxLQUFHQSxLQUFHQSxLQUFHQSxJQUFFQSxFQUFFNkYsUUFBUSxRQUFPLEtBQUtBLFFBQVEsWUFBVyxLQUFLcUksTUFBTSxJQUFJK3FFLFVBQVU1ekUsS0FBSyxLQUFLUSxRQUFRLFlBQVcsS0FBS3FJLE1BQU0sSUFBSStxRSxVQUFVNXpFLEtBQUssS0FBS3pELFFBQU9hLElBQUUsR0FBRUEsSUFBRW5CLEdBQUVtQixLQUFHLEdBQUVOLElBQUVvQyxTQUFTdkUsRUFBRW9ILE1BQU0zRSxHQUFFQSxJQUFFLElBQUc7Y0FBSTlCLEtBQUd5RSxPQUFPNkgsYUFBYTlLO2NBQUcsT0FBT1EsRUFBRXFHLE9BQU9ySTtBQUFFO1lBQUVpcEUsYUFBWW5rRTtZQUFFK2xFLG1CQUFrQixTQUFTeHJFO2NBQUcsS0FBSUEsR0FBRSxPQUFPQTtjQUFFLElBQUcsbUJBQWlCQSxNQUFJbUcsRUFBRW5HLElBQUcsTUFBTSxJQUFJOEosTUFBTSxrQkFBZ0I5SixJQUFFO2NBQWdDLE9BQU9vQyxFQUFFcEMsR0FBRytQLFNBQVM7QUFBRztZQUFFdTVELGFBQVk1b0U7WUFBRXlVLE9BQU12VTtZQUFFMDNFLFlBQVcsU0FBU3Q0RTtjQUFHLElBQUdBLElBQUVBLEVBQUUrUCxTQUFTLE1BQUs1SixFQUFFbkcsSUFBRyxNQUFNLElBQUk4SixNQUFNLGtCQUFnQjlKLElBQUU7Y0FBZ0NBLElBQUVBLEVBQUU2RixRQUFRLFFBQU87Y0FBSSxLQUFJLElBQUlsRixJQUFFLElBQUd3QixJQUFFLEdBQUVBLElBQUVuQyxFQUFFNEIsUUFBT08sS0FBRyxHQUFFeEIsRUFBRWtCLEtBQUswQyxTQUFTdkUsRUFBRW9ILE1BQU1qRixHQUFFQSxJQUFFLElBQUc7Y0FBSyxPQUFPeEI7QUFBQztZQUFFeXpDLFlBQVcsU0FBU3AwQztjQUFHLEtBQUksSUFBSVcsSUFBRSxJQUFHd0IsSUFBRSxHQUFFQSxJQUFFbkMsRUFBRTRCLFFBQU9PLEtBQUl4QixFQUFFa0IsTUFBTTdCLEVBQUVtQyxPQUFLLEdBQUc0TixTQUFTLE1BQUtwUCxFQUFFa0IsTUFBTSxLQUFHN0IsRUFBRW1DLElBQUk0TixTQUFTO2NBQUssT0FBTSxPQUFLcFAsRUFBRTBFLEtBQUs7QUFBRztZQUFFb2tFLE9BQU1sb0U7WUFBRThuRSxhQUFZbGpFO1lBQUU0eUMsZ0JBQWUsU0FBUy80QztjQUFHLE9BQU8sTUFBSUEsS0FBR3VCLEVBQUV2QixLQUFHQSxFQUFFNkYsUUFBUSxZQUFXLFFBQU03RjtBQUFDO1lBQUVnMEUsU0FBUSxTQUFTaDBFLEdBQUVXLEdBQUV3QjtjQUFHLElBQUliLElBQUUsT0FBT3NwQixLQUFLNXFCLE1BQUksbUJBQWlCQSxHQUFFeUMsSUFBRTlCLEtBQUdYLElBQUVBLEVBQUUrUCxTQUFTLElBQUlsSyxRQUFRLFFBQU8sS0FBS2pFLFNBQU8sS0FBRyxJQUFFakIsSUFBRVgsRUFBRTRCLFNBQU8sSUFBRTtjQUFFLFFBQU9OLElBQUUsT0FBSyxNQUFJLElBQUlpSSxNQUFNOUcsR0FBRzRDLEtBQUtsRCxLQUFHLE9BQUtuQztBQUFDO1lBQUVpMEUsVUFBUyxTQUFTajBFLEdBQUVXLEdBQUV3QjtjQUFHLElBQUliLElBQUUsT0FBT3NwQixLQUFLNXFCLE1BQUksbUJBQWlCQSxHQUFFeUMsSUFBRTlCLEtBQUdYLElBQUVBLEVBQUUrUCxTQUFTLElBQUlsSyxRQUFRLFFBQU8sS0FBS2pFLFNBQU8sS0FBRyxJQUFFakIsSUFBRVgsRUFBRTRCLFNBQU8sSUFBRTtjQUFFLFFBQU9OLElBQUUsT0FBSyxNQUFJdEIsSUFBRSxJQUFJdUosTUFBTTlHLEdBQUc0QyxLQUFLbEQsS0FBRztBQUFJO1lBQUU0MkUsa0JBQWlCLFNBQVMvNEU7Y0FBRyxPQUFNLE9BQUtvQyxFQUFFcEMsR0FBR3dMLE9BQU8sS0FBS3VFLFNBQVMsSUFBRztBQUFHO1lBQUVrNkQsTUFBS3BwRTtZQUFFbzNFLFNBQVEsU0FBU2o0RTtjQUFHLE9BQU8sVUFBUUEsSUFBRWEsRUFBRWIsTUFBSXVHLElBQUV2RztBQUFDO1lBQUUrSCxVQUFTLFNBQVMvSDtjQUFHLE9BQU0sbUJBQWlCQSxJQUFFQSxJQUFFeUYsRUFBRTdFLEVBQUVaO0FBQUc7O0FBQUM7UUFBRyxNQUFLLENBQUNBLEdBQUVXLEdBQUV3QjtVQUFLO1VBQWEsSUFBSWIsSUFBRWEsRUFBRSxPQUFNTSxJQUFFTixFQUFFLE9BQU1PLElBQUVQLEVBQUUsT0FBTVEsSUFBRUQsRUFBRSw4QkFBNkJHLElBQUVWLEVBQUUsS0FBRkEsSUFBVVcsSUFBRSxzQkFBb0JnUyxhQUFXM1MsRUFBRXZCLElBQUVrVSxZQUFXclUsSUFBRWdDLEtBQUlTLElBQUVSLEVBQUUsMkJBQTBCTixJQUFFLENBQUMsR0FBRWtCLElBQUVuQixFQUFFLE1BQUswQixJQUFFTixPQUFPeXRCO1VBQWVudUIsS0FBR1MsS0FBR08sS0FBR3ZDLEVBQUViLElBQUUsU0FBVVQ7WUFBRyxJQUFHLHFCQUFtQjhDLEVBQUU5QyxJQUFHO2NBQUMsSUFBSVcsSUFBRSxJQUFJbUMsRUFBRTlDO2NBQUcsSUFBR21CLE9BQU9zaUQsZUFBZTlpRCxHQUFFO2dCQUFDLElBQUl3QixJQUFFMEIsRUFBRWxELElBQUdXLElBQUVnQyxFQUFFbkIsR0FBRWhCLE9BQU9zaUQ7Z0JBQWEsS0FBSW5pRCxHQUFFO2tCQUFDLElBQUltQixJQUFFb0IsRUFBRTFCO2tCQUFHYixJQUFFZ0MsRUFBRWIsR0FBRXRCLE9BQU9zaUQ7QUFBWTtnQkFBQ3JoRCxFQUFFcEMsS0FBR3NCLEVBQUUySTtBQUFHO0FBQUM7QUFBRTtVQUFHLElBQUl6SCxJQUFFTCxFQUFFO1VBQU1uQyxFQUFFaUMsVUFBUSxTQUFTakM7WUFBRyxTQUFRd0MsRUFBRXhDLE9BQUs2QyxLQUFHMUIsT0FBT3NpRCxlQUFlempELElBQUUsU0FBU0E7Y0FBRyxJQUFJVyxLQUFFO2NBQUcsT0FBT1csRUFBRWMsSUFBRSxTQUFVRCxHQUFFYjtnQkFBRyxLQUFJWCxHQUFFO2tCQUFJLElBQUk4QixJQUFFTixFQUFFVCxLQUFLMUI7a0JBQUd5QyxNQUFJbkIsTUFBSVgsSUFBRThCO0FBQVksa0JBQVQsT0FBTXpDLElBQUc7QUFBRSxtQkFBR1c7QUFBQyxhQUFyRyxDQUF1R1gsS0FBR2tELEVBQUVQLEVBQUUzQyxJQUFHLElBQUc7QUFBRztBQUFBO1FBQUcsTUFBS0E7VUFBSUEsRUFBRWlDLFVBQVEsU0FBU2pDLEVBQUVXLEdBQUV3QjtZQUFHLElBQUd4QixLQUFHd0IsR0FBRSxPQUFPbkMsRUFBRVcsRUFBRlgsQ0FBS21DO1lBQUcsSUFBRyxxQkFBbUJ4QixHQUFFLE1BQU0sSUFBSWMsVUFBVTtZQUF5QixPQUFPOEIsT0FBTzhQLEtBQUsxUyxHQUFHZ0osU0FBUSxTQUFVM0o7Y0FBR3NCLEVBQUV0QixLQUFHVyxFQUFFWDtBQUFHLGlCQUFHc0I7WUFBRSxTQUFTQTtjQUFJLEtBQUksSUFBSXRCLElBQUUsSUFBSXVKLE1BQU0yRyxVQUFVdE8sU0FBUU8sSUFBRSxHQUFFQSxJQUFFbkMsRUFBRTRCLFFBQU9PLEtBQUluQyxFQUFFbUMsS0FBRytOLFVBQVUvTjtjQUFHLElBQUliLElBQUVYLEVBQUVMLE1BQU1lLE1BQUtyQixJQUFHeUMsSUFBRXpDLEVBQUVBLEVBQUU0QixTQUFPO2NBQUcsT0FBTSxxQkFBbUJOLEtBQUdBLE1BQUltQixLQUFHYyxPQUFPOFAsS0FBSzVRLEdBQUdrSCxTQUFRLFNBQVUzSjtnQkFBR3NCLEVBQUV0QixLQUFHeUMsRUFBRXpDO0FBQUcsbUJBQUdzQjtBQUFDO0FBQUM7QUFBQTtRQUFHLE1BQUssU0FBU3RCLEdBQUVXO1VBQUc7VUFBYSxJQUFJd0IsR0FBRWIsSUFBRUQsUUFBTUEsS0FBSyszRSxjQUFZajNFLElBQUVvQixPQUFPdXRCLGtCQUFnQjtZQUFDQyxXQUFVO3VCQUFjeG5CLFNBQU8sU0FBU3ZKLEdBQUVXO1lBQUdYLEVBQUUrd0IsWUFBVXB3QjtBQUFDLGVBQUcsU0FBU1gsR0FBRVc7WUFBRyxLQUFJLElBQUl3QixLQUFLeEIsR0FBRUEsRUFBRWdmLGVBQWV4ZCxPQUFLbkMsRUFBRW1DLEtBQUd4QixFQUFFd0I7QUFBRyxhQUFFLFNBQVNuQyxHQUFFVztZQUFHLFNBQVNXO2NBQUlELEtBQUswQyxjQUFZL0Q7QUFBQztZQUFDbUMsRUFBRW5DLEdBQUVXLElBQUdYLEVBQUU4USxZQUFVLFNBQU9uUSxJQUFFNEMsT0FBTzhWLE9BQU8xWSxNQUFJVyxFQUFFd1AsWUFBVW5RLEVBQUVtUSxXQUFVLElBQUl4UDtBQUFFO1VBQUdpQyxPQUFPd0csZUFBZXBKLEdBQUUsY0FBYTtZQUFDZCxRQUFNOztVQUFLLElBQUk0QyxJQUFFLFNBQVN6QztZQUFHLFNBQVNXO2NBQUksT0FBTyxTQUFPWCxLQUFHQSxFQUFFTSxNQUFNZSxNQUFLNk8sY0FBWTdPO0FBQUk7WUFBQyxPQUFPQyxFQUFFWCxHQUFFWCxJQUFHVztBQUFDLFdBQXZGLENBQXlGbUo7VUFBT25KLEVBQUUwNEUsZ0JBQWM1MkU7VUFBRSxJQUFJQyxJQUFFLFNBQVMxQztZQUFHLFNBQVNXO2NBQUksT0FBTyxTQUFPWCxLQUFHQSxFQUFFTSxNQUFNZSxNQUFLNk8sY0FBWTdPO0FBQUk7WUFBQyxPQUFPQyxFQUFFWCxHQUFFWCxJQUFHVztBQUFDLFdBQXZGLENBQXlGbUo7VUFBT25KLEVBQUUyNEUsb0JBQWtCNTJFO1VBQUUsSUFBSUMsSUFBRSxTQUFTM0M7WUFBRyxTQUFTVztjQUFJLE9BQU8sU0FBT1gsS0FBR0EsRUFBRU0sTUFBTWUsTUFBSzZPLGNBQVk3TztBQUFJO1lBQUMsT0FBT0MsRUFBRVgsR0FBRVgsSUFBR1c7QUFBQyxXQUF2RixDQUF5Rm1KO1VBQU9uSixFQUFFNDRFLGVBQWE1MkU7VUFBRSxJQUFJRSxJQUFFLFNBQVM3QztZQUFHLFNBQVNXO2NBQUksT0FBTyxTQUFPWCxLQUFHQSxFQUFFTSxNQUFNZSxNQUFLNk8sY0FBWTdPO0FBQUk7WUFBQyxPQUFPQyxFQUFFWCxHQUFFWCxJQUFHVztBQUFDLFdBQXZGLENBQXlGbUo7VUFBT25KLEVBQUVxaEQsY0FBWW4vQztBQUFDO1FBQUUsTUFBSyxDQUFDN0MsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYW9CLE9BQU93RyxlQUFlcEosR0FBRSxjQUFhO1lBQUNkLFFBQU07Y0FBSyxTQUFTRztZQUFHLEtBQUksSUFBSW1DLEtBQUtuQyxHQUFFVyxFQUFFZ2YsZUFBZXhkLE9BQUt4QixFQUFFd0IsS0FBR25DLEVBQUVtQztBQUFHLFdBQTNELENBQTZEQSxFQUFFO1VBQU8sSUFBSWIsSUFBRWEsRUFBRTtVQUFLeEIsRUFBRTY0RSw0QkFBMEJsNEUsRUFBRWs0RTtBQUFBQTtRQUEyQixNQUFLLENBQUN4NUUsR0FBRVc7VUFBSztVQUFhNEMsT0FBT3dHLGVBQWVwSixHQUFFLGNBQWE7WUFBQ2QsUUFBTTtjQUFLYyxFQUFFODRFLGdCQUFjLFNBQVN6NUU7WUFBR3FCLEtBQUsrQyxPQUFLcEUsR0FBRXFCLEtBQUtxNEUsV0FBUSxHQUFHcjRFLEtBQUtzNEUsY0FBVyxHQUFHdDRFLEtBQUt1NEUsU0FBTyxHQUFFdjRFLEtBQUt3NEUsb0JBQWlCLEdBQUd4NEUsS0FBS3k0RSxRQUFNO0FBQUM7QUFBQTtRQUFHLEtBQUksQ0FBQzk1RSxHQUFFVztVQUFLO1VBQWE0QyxPQUFPd0csZUFBZXBKLEdBQUUsY0FBYTtZQUFDZCxRQUFNOztVQUFLLElBQUlzQyxJQUFFO1lBQVcsU0FBU25DO2NBQUlxQixLQUFLOCtDLFlBQVUsQ0FBQztBQUFDO1lBQUMsT0FBT25nRCxFQUFFOFEsVUFBVXN3QyxtQkFBaUIsU0FBU3BoRCxHQUFFVztjQUFHWCxJQUFFQSxFQUFFaU8sZUFBYzVNLEtBQUs4K0MsVUFBVW5nRCxLQUFHcUIsS0FBSzgrQyxVQUFVbmdELE1BQUksSUFBR3FCLEtBQUs4K0MsVUFBVW5nRCxHQUFHNkIsS0FBS2xCLEVBQUVvNUUsZUFBYXA1RTtBQUFFLGVBQUVYLEVBQUU4USxVQUFVdXdDLHNCQUFvQixTQUFTcmhELEdBQUVXO2NBQUcsSUFBR1gsSUFBRUEsRUFBRWlPLGVBQWM1TSxLQUFLOCtDLFVBQVVuZ0QsSUFBRztnQkFBQyxJQUFJbUMsSUFBRWQsS0FBSzgrQyxVQUFVbmdELEdBQUdtRCxRQUFReEMsRUFBRW81RSxlQUFhcDVFO2dCQUFHd0IsSUFBRSxLQUFHZCxLQUFLOCtDLFVBQVVuZ0QsR0FBRzB0QixPQUFPdnJCLEdBQUU7QUFBRTtBQUFDLGVBQUVuQyxFQUFFOFEsVUFBVWtwRSxnQkFBYyxTQUFTaDZFO2NBQUcsSUFBSVcsSUFBRVgsRUFBRW9FLEtBQUs2SjtjQUFjLElBQUdqTyxFQUFFa2hELFNBQU83L0MsTUFBS0EsS0FBSzgrQyxVQUFVeC9DLElBQUcsS0FBSSxJQUFJd0IsSUFBRSxHQUFFYixJQUFFRCxLQUFLOCtDLFVBQVV4L0MsSUFBR3dCLElBQUViLEVBQUVNLFFBQU9PLEtBQUliLEVBQUVhLEdBQUdULEtBQUtMLE1BQUtyQjtjQUFHLElBQUl5QyxJQUFFcEIsS0FBSyxPQUFLVjtjQUFHLE9BQU84QixLQUFHQSxFQUFFZixLQUFLTCxNQUFLckIsS0FBRztBQUFFLGVBQUVBO0FBQUMsV0FBbmtCO1VBQXVrQlcsRUFBRTY0RSw0QkFBMEJyM0U7QUFBQUE7UUFBRyxNQUFLLFNBQVNuQyxHQUFFVyxHQUFFd0I7VUFBRztVQUFhLElBQUliLEdBQUVtQixJQUFFTixFQUFFLE1BQU15akIsUUFBT2xqQixJQUFFckIsUUFBTUEsS0FBSyszRSxjQUFZOTNFLElBQUVpQyxPQUFPdXRCLGtCQUFnQjtZQUFDQyxXQUFVO3VCQUFjeG5CLFNBQU8sU0FBU3ZKLEdBQUVXO1lBQUdYLEVBQUUrd0IsWUFBVXB3QjtBQUFDLGVBQUcsU0FBU1gsR0FBRVc7WUFBRyxLQUFJLElBQUl3QixLQUFLeEIsR0FBRUEsRUFBRWdmLGVBQWV4ZCxPQUFLbkMsRUFBRW1DLEtBQUd4QixFQUFFd0I7QUFBRyxhQUFFLFNBQVNuQyxHQUFFVztZQUFHLFNBQVN3QjtjQUFJZCxLQUFLMEMsY0FBWS9EO0FBQUM7WUFBQ3NCLEVBQUV0QixHQUFFVyxJQUFHWCxFQUFFOFEsWUFBVSxTQUFPblEsSUFBRTRDLE9BQU84VixPQUFPMVksTUFBSXdCLEVBQUUyTyxZQUFVblEsRUFBRW1RLFdBQVUsSUFBSTNPO0FBQUU7VUFBR29CLE9BQU93RyxlQUFlcEosR0FBRSxjQUFhO1lBQUNkLFFBQU07O1VBQUssSUFBSThDLElBQUUsU0FBUzNDO1lBQUcsU0FBU1c7Y0FBSSxJQUFJQSxJQUFFWCxFQUFFMEIsS0FBS0wsU0FBT0E7Y0FBSyxPQUFPVixFQUFFczVFLGVBQWEsTUFBS3Q1RSxFQUFFaStELFFBQU0sTUFBS2orRCxFQUFFeTdCLFVBQVN6N0I7QUFBQztZQUFDLE9BQU8rQixFQUFFL0IsR0FBRVgsSUFBR1csRUFBRW1RLFVBQVVzckIsU0FBTztjQUFXLzZCLEtBQUs0NEUsZUFBYSxNQUFLNTRFLEtBQUt1OUQsUUFBTTtBQUFJLGVBQUVqK0QsRUFBRW1RLFVBQVVvcEUsV0FBUyxTQUFTbDZFO2NBQUcsSUFBRyxRQUFNQSxHQUFFLElBQUcsbUJBQWlCQSxHQUFFLE1BQUlBLEVBQUU0QixXQUFTUCxLQUFLNDRFLGVBQWEsNkJBQTRCNTRFLEtBQUt1OUQsUUFBTSxJQUFJbjhELEVBQUV6QyxHQUFFLGVBQWMsSUFBR3lDLEVBQUV5akIsU0FBU2xtQixJQUFHcUIsS0FBS3U5RCxRQUFNNStELFFBQU8sSUFBR0EsYUFBYW1pQyxhQUFZO2dCQUFDLEtBQUksSUFBSXhoQyxJQUFFLElBQUk4QixFQUFFekMsRUFBRXVZLGFBQVlwVyxJQUFFLElBQUl3RSxXQUFXM0csSUFBR3NCLElBQUUsR0FBRUEsSUFBRXRCLEVBQUV1WSxZQUFXalgsS0FBSVgsRUFBRVcsS0FBR2EsRUFBRWI7Z0JBQUdELEtBQUt1OUQsUUFBTWorRDtBQUFDLHFCQUFLO2dCQUFDLE1BQUtYLEVBQUU0ekIsVUFBUTV6QixFQUFFNHpCLGtCQUFrQnVPLGNBQWEsTUFBTSxJQUFJcjRCLE1BQU0sNkJBQTJCOUo7Z0JBQUdXLElBQUUsSUFBSThCLEVBQUV6QyxFQUFFdVk7Z0JBQVksSUFBSTdWLElBQUUxQyxFQUFFNnpCO2dCQUFXLEtBQUkxeEIsSUFBRSxJQUFJd0UsV0FBVzNHLEVBQUU0ekIsU0FBUXR5QixJQUFFLEdBQUVBLElBQUV0QixFQUFFdVksWUFBV2pYLEtBQUlYLEVBQUVXLEtBQUdhLEVBQUViLElBQUVvQjtnQkFBR3JCLEtBQUt1OUQsUUFBTWorRDtBQUFDO0FBQUMsZUFBRUEsRUFBRW1RLFVBQVVxcEUsbUJBQWlCLFNBQVNuNkUsR0FBRVc7Y0FBR1UsS0FBSzQ0RSxpQkFBZXQ1RSxFQUFFLG9CQUFrQlgsRUFBRSxrQkFBZ0JxQixLQUFLNDRFLGVBQWM1NEUsS0FBS3U5RCxVQUFRNStELEVBQUUsb0JBQWtCcUIsS0FBS3U5RCxNQUFNaDlELE9BQU9tTztBQUFXLGVBQUVwUCxFQUFFbVEsVUFBVXNwRSxlQUFhLFNBQVNwNkU7Y0FBR3FCLEtBQUt1OUQsU0FBTzUrRCxFQUFFK2tCLE1BQU0xakIsS0FBS3U5RCxRQUFPNStELEVBQUVtaEM7QUFBSyxlQUFFeGdDO0FBQUMsV0FBLzlCLENBQWkrQndCLEVBQUUsS0FBS3EzRTtVQUEyQjc0RSxFQUFFMDVFLHVCQUFxQjEzRTtBQUFDO1FBQUUsTUFBSyxTQUFTM0MsR0FBRVcsR0FBRXdCO1VBQUc7VUFBYSxJQUFJYixHQUFFbUIsSUFBRU4sRUFBRSxPQUFNTyxJQUFFUCxFQUFFLE1BQU15akIsUUFBT2pqQixJQUFFdEIsUUFBTUEsS0FBSyszRSxjQUFZOTNFLElBQUVpQyxPQUFPdXRCLGtCQUFnQjtZQUFDQyxXQUFVO3VCQUFjeG5CLFNBQU8sU0FBU3ZKLEdBQUVXO1lBQUdYLEVBQUUrd0IsWUFBVXB3QjtBQUFDLGVBQUcsU0FBU1gsR0FBRVc7WUFBRyxLQUFJLElBQUl3QixLQUFLeEIsR0FBRUEsRUFBRWdmLGVBQWV4ZCxPQUFLbkMsRUFBRW1DLEtBQUd4QixFQUFFd0I7QUFBRyxhQUFFLFNBQVNuQyxHQUFFVztZQUFHLFNBQVN3QjtjQUFJZCxLQUFLMEMsY0FBWS9EO0FBQUM7WUFBQ3NCLEVBQUV0QixHQUFFVyxJQUFHWCxFQUFFOFEsWUFBVSxTQUFPblEsSUFBRTRDLE9BQU84VixPQUFPMVksTUFBSXdCLEVBQUUyTyxZQUFVblEsRUFBRW1RLFdBQVUsSUFBSTNPO0FBQUUsY0FBR1UsSUFBRXhCLFFBQU1BLEtBQUtpNUUsWUFBVS8yRSxPQUFPc2dCLFVBQVEsU0FBUzdqQjtZQUFHLEtBQUksSUFBSVcsR0FBRXdCLElBQUUsR0FBRWIsSUFBRTRPLFVBQVV0TyxRQUFPTyxJQUFFYixHQUFFYSxLQUFJLEtBQUksSUFBSU0sS0FBSzlCLElBQUV1UCxVQUFVL04sSUFBR29CLE9BQU91TixVQUFVNk8sZUFBZWplLEtBQUtmLEdBQUU4QixPQUFLekMsRUFBRXlDLEtBQUc5QixFQUFFOEI7WUFBSSxPQUFPekM7QUFBQztVQUFFdUQsT0FBT3dHLGVBQWVwSixHQUFFLGNBQWE7WUFBQ2QsUUFBTTs7VUFBSyxJQUFJaUQsSUFBRVgsRUFBRSxPQUFNMUIsSUFBRTBCLEVBQUUsT0FBTWUsSUFBRWYsRUFBRSxPQUFNQyxJQUFFRCxFQUFFLE9BQU1tQixJQUFFbkIsRUFBRSxPQUFNMEIsSUFBRTFCLEVBQUUsT0FBTUssSUFBRUwsRUFBRSxNQUFLc0QsSUFBRXRELEVBQUUsT0FBTXpCLElBQUV5QixFQUFFLE9BQU12QixJQUFFLFNBQVNaO1lBQUcsU0FBU1csRUFBRXdCO21CQUFHLE1BQVNBLE1BQUlBLElBQUUsQ0FBQztjQUFHLElBQUliLElBQUV0QixFQUFFMEIsS0FBS0wsU0FBT0E7Y0FBSyxPQUFPQyxFQUFFMC9ELFNBQU9yZ0UsRUFBRXFnRSxRQUFPMS9ELEVBQUUyL0QsU0FBT3RnRSxFQUFFc2dFLFFBQU8zL0QsRUFBRTQvRCxtQkFBaUJ2Z0UsRUFBRXVnRSxrQkFBaUI1L0QsRUFBRWcvRCxVQUFRMy9ELEVBQUUyL0QsU0FBUWgvRCxFQUFFaS9ELE9BQUs1L0QsRUFBRTQvRDtjQUFLai9ELEVBQUU4K0QscUJBQW1CLE1BQUs5K0QsRUFBRSsrRCxhQUFXMS9ELEVBQUVxZ0UsUUFBTzEvRCxFQUFFMmdFLFdBQVMsTUFBSzNnRSxFQUFFMGdFLGVBQWEsSUFBRzFnRSxFQUFFeThELGVBQWEsSUFBR3o4RCxFQUFFcy9ELFNBQU87Y0FBRXQvRCxFQUFFa2dFLGFBQVcsSUFBR2xnRSxFQUFFZytELFVBQVEsR0FBRWgrRCxFQUFFaTVFLFNBQU8sSUFBSTkwRSxFQUFFNDBFLHNCQUFxQi80RSxFQUFFazVFLGNBQVksSUFBR2w1RSxFQUFFcytELG1CQUFnQixHQUFHdCtELEVBQUV3MEUsVUFBUTtjQUFLeDBFLEVBQUVtNUUsT0FBSyxNQUFLbjVFLEVBQUVvNUUsU0FBTSxHQUFHcDVFLEVBQUV1OUQsV0FBUyxDQUFDLEdBQUV2OUQsRUFBRXE1RSxrQkFBZ0IsQ0FBQyxHQUFFcjVFLEVBQUVzNUUsZ0JBQWMsTUFBS3Q1RSxFQUFFdTVFLFdBQVMsTUFBS3Y1RSxFQUFFNitELFlBQVU7Y0FBSzcrRCxFQUFFdzVFLGlCQUFlLE1BQUt4NUUsRUFBRXk1RSxtQkFBaUIsTUFBS3o1RSxFQUFFMDVFLFlBQVUsTUFBSzE1RSxFQUFFMjVFLFNBQU8sTUFBSzM1RSxFQUFFNDVFLGVBQWEsR0FBRTU1RSxFQUFFNjVFLGNBQVk7Y0FBRTc1RSxFQUFFODVFLHFCQUFrQixHQUFHOTVFLEVBQUUrNUUscUJBQW1CO2dCQUFDQyxVQUFRO2dCQUFHcnVCLFFBQU07Z0JBQUdzdUIsUUFBTTtpQkFBSWo2RSxFQUFFazZFLHFCQUFtQjtnQkFBQyxtQkFBaUI7Z0JBQUcsb0JBQWtCO2dCQUFHLG1DQUFpQztnQkFBRyxrQ0FBZ0M7Z0JBQUc1SyxhQUFXO2dCQUFHLG1CQUFpQjtnQkFBRzVqQixTQUFPO2dCQUFHeXVCLFVBQVE7Z0JBQUd6VSxPQUFLO2dCQUFHMFUsTUFBSTtnQkFBR0MsU0FBTztnQkFBRzNlLE9BQUs7Z0JBQUcsZUFBYTtnQkFBRzRlLFNBQU87Z0JBQUdDLFVBQVE7Z0JBQUduOEQsS0FBRztnQkFBR284RCxVQUFRO2dCQUFHLHNCQUFvQjtnQkFBR0MsVUFBUTtnQkFBRyxlQUFhO2dCQUFHQyxNQUFJO2lCQUFJMTZFLEVBQUUyNkUsa0JBQWdCO2dCQUFDLGVBQWE7Z0JBQUcsZ0JBQWM7aUJBQUkzNkUsRUFBRTQ2RSxhQUFXLGtCQUFnQmg1RSxFQUFFa0IsU0FBTyxNQUFJbEIsRUFBRXl0RCxTQUFPLGVBQWFsdUQsRUFBRW1sRCxTQUFTQyxPQUFLLFNBQU9wbEQsRUFBRW1sRCxTQUFTdTBCO2NBQUc3NkUsRUFBRTg2RSxhQUFXajZFLEVBQUVrNkUsU0FBTSxHQUFHLzZFO0FBQUM7WUFBQyxPQUFPcUIsRUFBRWhDLEdBQUVYLElBQUdXLEVBQUVtUSxVQUFVK3NELE9BQUssU0FBUzc5RCxHQUFFbUMsR0FBRWIsR0FBRW1CLEdBQUVDO2NBQUcsU0FBRyxNQUFTcEIsTUFBSUEsS0FBRSxJQUFJdEIsSUFBRUEsRUFBRW1PLGVBQWM5TSxLQUFLZzZFLG1CQUFtQnI3RSxJQUFHLE1BQU0sSUFBSVcsRUFBRTA0RSxjQUFjLGlCQUFlcjVFLElBQUU7Y0FBMEIsSUFBSTJDLElBQUV0QixLQUFLaTdFLFVBQVVuNkUsR0FBRU0sR0FBRUM7Y0FBR3JCLEtBQUtnL0QsZUFBYTEvRCxFQUFFdWdFLHFCQUFtQjcvRCxLQUFLZy9ELFlBQVcxL0QsRUFBRTIvRCxVQUFTai9ELEtBQUt5MEUsVUFBUTkxRSxHQUFFcUIsS0FBS281RSxPQUFLOTNFLEdBQUV0QixLQUFLcTVFLFNBQU9wNUU7Y0FBRUQsS0FBS3c5RCxXQUFTLENBQUMsR0FBRXg5RCxLQUFLczVFLGtCQUFnQixDQUFDLEdBQUV0NUUsS0FBS3U1RSxnQkFBYyxNQUFLdjVFLEtBQUtrN0UsZUFBZTU3RSxFQUFFc2dFLFNBQVE1L0QsS0FBS3c1RSxXQUFTO2NBQUt4NUUsS0FBSzgrRCxZQUFVLE1BQUs5K0QsS0FBS3UvRCxTQUFPLEdBQUV2L0QsS0FBS21nRSxhQUFXLElBQUduZ0UsS0FBS3k1RSxpQkFBZSxJQUFHejVFLEtBQUswNUUsbUJBQWlCLE1BQUsxNUUsS0FBSzY1RSxlQUFhO2NBQUU3NUUsS0FBSzg1RSxjQUFZLEdBQUU5NUUsS0FBSys1RSxxQkFBa0I7QUFBRSxlQUFFejZFLEVBQUVtUSxVQUFVb3ZELG1CQUFpQixTQUFTbGdFLEdBQUVtQztjQUFHLElBQUdkLEtBQUtnL0QsZUFBYTEvRCxFQUFFc2dFLFFBQU8sTUFBTSxJQUFJdGdFLEVBQUUyNEUsa0JBQWtCO2NBQWlDLElBQUloNEUsSUFBRXRCLEVBQUVpTztjQUFjNU0sS0FBS202RSxtQkFBbUJsNkUsTUFBSSxRQUFRc3BCLEtBQUt0cEIsTUFBSSxVQUFVc3BCLEtBQUt0cEIsS0FBRzRSLEVBQVEvQyxLQUFLLG1DQUFpQ25RLElBQUUsUUFBTW1DLElBQUVBLEVBQUU0TjtjQUFXLFFBQU0xTyxLQUFLczVFLGdCQUFnQnI1RSxNQUFJdEIsSUFBRXFCLEtBQUtzNUUsZ0JBQWdCcjVFLElBQUdELEtBQUt3OUQsU0FBUzcrRCxLQUFHcUIsS0FBS3c5RCxTQUFTNytELEtBQUcsT0FBS21DLE1BQUlkLEtBQUtzNUUsZ0JBQWdCcjVFLEtBQUd0QjtjQUFFcUIsS0FBS3c5RCxTQUFTNytELEtBQUdtQztBQUFHLGVBQUV4QixFQUFFbVEsVUFBVTZ2RCxPQUFLLFNBQVMzZ0U7Y0FBRyxJQUFHcUIsS0FBS2cvRCxlQUFhMS9ELEVBQUVzZ0UsUUFBTyxNQUFNLElBQUl0Z0UsRUFBRTI0RSxrQkFBa0I7Y0FBaUMsSUFBR2o0RSxLQUFLdzVFLFVBQVMsTUFBTSxJQUFJbDZFLEVBQUUyNEUsa0JBQWtCO2NBQXlCLFFBQU9qNEUsS0FBS281RSxLQUFLMXpCO2VBQVUsS0FBSTtnQkFBUSxPQUFPMWxELEtBQUttN0UsVUFBVXg4RTs7ZUFBRyxLQUFJO2VBQVEsS0FBSTtnQkFBUyxPQUFPcUIsS0FBS283RSxVQUFVejhFOztlQUFHO2dCQUFRLE1BQU0sSUFBSVcsRUFBRTQ0RSxhQUFhLDBCQUF3Qmw0RSxLQUFLbzVFLEtBQUsxekI7O0FBQVUsZUFBRXBtRCxFQUFFbVEsVUFBVWdoQyxRQUFNO2NBQVcsUUFBTXp3QyxLQUFLdzVFLGFBQVd4NUUsS0FBS3c1RSxTQUFTL29DLFNBQVF6d0MsS0FBS3E3RSxhQUFZcjdFLEtBQUtzN0Usa0JBQWtCLFVBQVN0N0UsS0FBS3M3RSxrQkFBa0I7QUFBVyxlQUFFaDhFLEVBQUVtUSxVQUFVOHJFLG9CQUFrQixTQUFTNThFO2NBQUcsSUFBRyxRQUFNcUIsS0FBSzA1RSxvQkFBa0IsUUFBTS82RSxHQUFFLE9BQU87Y0FBSyxJQUFJVyxJQUFFWCxFQUFFaU87Y0FBYyxPQUFPNU0sS0FBSzA1RSxpQkFBaUJwN0QsZUFBZWhmLEtBQUdVLEtBQUswNUUsaUJBQWlCLzZFLEVBQUVpTyxpQkFBZTtBQUFJLGVBQUV0TixFQUFFbVEsVUFBVWd4RCx3QkFBc0I7Y0FBVyxJQUFJOWhFLElBQUVxQjtjQUFLLE9BQU8sUUFBTUEsS0FBSzA1RSxtQkFBaUIsS0FBR3gzRSxPQUFPOFAsS0FBS2hTLEtBQUswNUUsa0JBQWtCLzFFLEtBQUksU0FBVXJFO2dCQUFHLE9BQU9BLElBQUUsT0FBS1gsRUFBRSs2RSxpQkFBaUJwNkU7QUFBRyxrQkFBRzBFLEtBQUs7QUFBTyxlQUFFMUUsRUFBRW1RLFVBQVUydEQsbUJBQWlCLFNBQVN6K0Q7Y0FBRyxJQUFHcUIsS0FBS2cvRCxlQUFhMS9ELEVBQUUyL0QsV0FBU2ovRCxLQUFLZy9ELGVBQWExL0QsRUFBRTQvRCxNQUFLLE1BQU0sSUFBSTUvRCxFQUFFMjRFLGtCQUFrQjtjQUFxRGo0RSxLQUFLdTVFLGdCQUFjNTZFLEVBQUVpTztBQUFhLGVBQUV0TixFQUFFbVEsVUFBVThtRSxZQUFVLFNBQVM1M0U7Y0FBRyxJQUFHcUIsS0FBS3c3RSxrQkFBZ0I3OEUsRUFBRXkzRSxhQUFXcDJFLEtBQUt3N0UsaUJBQWdCeDdFLEtBQUt5N0UsbUJBQWlCOThFLEVBQUV3M0UsY0FBWW4yRSxLQUFLeTdFO2NBQWlCOThFLEVBQUUyZixlQUFlLFlBQVc7Z0JBQUMsSUFBRyxRQUFNM2YsRUFBRTIzRSxZQUFVdjFFLEVBQUU4QyxNQUFNbEYsRUFBRTIzRSxVQUFRLElBQUcsR0FBSTV3QixVQUFTLE1BQU0sSUFBSXBtRCxFQUFFcWhELFlBQVk7Z0JBQW1DM2dELEtBQUswN0UsZ0JBQWMvOEUsRUFBRTIzRTtBQUFPO0FBQUMsZUFBRWgzRSxFQUFFaTNFLFlBQVUsU0FBUzUzRTtjQUFHVyxFQUFFbVEsVUFBVThtRSxVQUFVNTNFO0FBQUUsZUFBRVcsRUFBRW1RLFVBQVV5ckUsaUJBQWUsU0FBU3Y4RTtjQUFHcUIsS0FBS2cvRCxhQUFXcmdFLEdBQUVxQixLQUFLMjRFLGNBQWMsSUFBSTEyRSxFQUFFbTJFLGNBQWM7QUFBb0IsZUFBRTk0RSxFQUFFbVEsVUFBVTByRSxZQUFVLFNBQVN4OEU7Y0FBRyxNQUFNLElBQUk4SixNQUFNO0FBQWlDLGVBQUVuSixFQUFFbVEsVUFBVTJyRSxZQUFVLFNBQVN6OEU7Y0FBRyxJQUFHcUIsS0FBS3E1RSxPQUFNLE1BQU0sSUFBSTV3RSxNQUFNO2VBQStDOUosS0FBRyxVQUFRcUIsS0FBS3kwRSxXQUFTLFdBQVN6MEUsS0FBS3kwRSxVQUFROTFFLElBQUVBLEtBQUcsTUFBSWtULEVBQVEvQyxLQUFLLGdDQUE4QjlPLEtBQUt5MEUsVUFBUTtjQUFhOTFFLElBQUUsT0FBTXFCLEtBQUtrNUUsT0FBT0wsU0FBU2w2RSxJQUFHcUIsS0FBSzg0RSxvQkFBbUI5NEUsS0FBSzI3RTtBQUFrQixlQUFFcjhFLEVBQUVtUSxVQUFVa3NFLG1CQUFpQjtjQUFXLElBQUloOUUsSUFBRXFCO2NBQUssSUFBR0EsS0FBS3UrRCxpQkFBZ0I7Z0JBQUMsSUFBSXo5RCxJQUFFeEIsRUFBRXM4RSxVQUFVbjFDLFdBQVdwbkMsRUFBRTJtQyxpQkFBaUJobUMsS0FBS281RSxLQUFLMXFCLFVBQVMxdUQsS0FBS281RSxLQUFLdFgsVUFBUyxhQUFXOWhFLEtBQUtvNUUsS0FBSzF6QixXQUFXdmY7Z0JBQWdCbm1DLEtBQUt3OUQsU0FBUzdSLFNBQU8zckQsS0FBS3c5RCxTQUFTNGMsVUFBUXQ1RTtBQUFDO2NBQUMsSUFBSWIsSUFBRSxZQUFVRCxLQUFLbzVFLEtBQUsxekIsV0FBUyxFQUFDamtELEdBQUV6QixLQUFLdzdFLG9CQUFpQixFQUFDcDhFLEdBQUVZLEtBQUt5N0Usb0JBQWtCcjZFLElBQUVuQixFQUFFLElBQUdvQixJQUFFcEIsRUFBRSxJQUFHcUIsSUFBRUYsRUFBRXVrRCxRQUFRMzNCLEtBQUs1c0IsRUFBZkEsQ0FBa0I7Z0JBQUNzdEQsVUFBUzF1RCxLQUFLbzVFLEtBQUsxcUI7Z0JBQVNrTixPQUFNNTdELEtBQUtvNUUsS0FBS3hkO2dCQUFLcm9ELE1BQUt2VCxLQUFLbzVFLEtBQUs3bEU7Z0JBQUtrcUQsTUFBS3o5RCxLQUFLbzVFLEtBQUszYjtnQkFBSzNCLFFBQU85N0QsS0FBS3kwRTtnQkFBUTFZLFNBQVEvN0QsS0FBS3c5RDtnQkFBU3lZLE9BQU01MEU7O2NBQUlyQixLQUFLdzVFLFdBQVNsNEUsR0FBRXRCLEtBQUtpK0QsV0FBUzM4RCxFQUFFNmlCLFdBQVdua0IsS0FBS2krRCxVQUFRO2dCQUFZLE9BQU90L0QsRUFBRWs5RSxlQUFldjZFO0FBQUcsbUJBQUdBLEVBQUUwaEIsR0FBRyxhQUFXLFNBQVUxakI7Z0JBQUcsT0FBT1gsRUFBRW05RSxnQkFBZ0J4NkUsR0FBRWhDO0FBQUcsbUJBQUdnQyxFQUFFMGhCLEdBQUcsVUFBUSxTQUFVMWpCO2dCQUFHLE9BQU9YLEVBQUVvOUUsb0JBQW9CejZFLEdBQUVoQztBQUFHLG1CQUFHVSxLQUFLazVFLE9BQU9ILGFBQWF6M0UsSUFBR3RCLEtBQUt3NUUsYUFBV2w0RSxLQUFHdEIsS0FBS3M3RSxrQkFBa0I7QUFBWSxlQUFFaDhFLEVBQUVtUSxVQUFVcXBFLG1CQUFpQjtjQUFXOTRFLEtBQUt3OUQsV0FBU2g4RCxFQUFFLENBQUMsR0FBRXhCLEtBQUt3OUQsVUFBUztnQkFBQ3dlLFlBQVc7Z0JBQWFDLE1BQUtqOEUsS0FBS281RSxLQUFLemQ7Z0JBQUssY0FBYTM3RCxLQUFLNjZFO2lCQUFZNzZFLEtBQUsrNkUsYUFBVztnQkFBQ21CLFNBQVE7a0JBQWUsQ0FBQyxJQUFHbDhFLEtBQUtrNUUsT0FBT0osaUJBQWlCOTRFLEtBQUt3OUQsVUFBU3g5RCxLQUFLczVFO0FBQWdCLGVBQUVoNkUsRUFBRW1RLFVBQVVxc0Usa0JBQWdCLFNBQVNuOUUsR0FBRW1DO2NBQUcsSUFBSWIsSUFBRUQ7Y0FBSyxJQUFHQSxLQUFLdzVFLGFBQVc3NkUsR0FBRTtnQkFBQyxJQUFHcUIsS0FBS3UrRCxvQkFBa0J6OUQsRUFBRWk3RCxRQUFRLGlCQUFlajdELEVBQUVpN0QsUUFBUSxtQkFBaUJ6OEQsRUFBRXM4RSxVQUFVajFDLFdBQVc3bEMsRUFBRWk3RCxRQUFRLGlCQUFlajdELEVBQUVpN0QsUUFBUTtnQkFBZ0IsRUFBQyxLQUFJLEtBQUksS0FBSSxLQUFJLE1BQUtqNkQsUUFBUWhCLEVBQUVtL0QsZUFBYSxHQUFFLE9BQU9qZ0UsS0FBS281RSxPQUFLcDVFLEtBQUtpN0UsVUFBVW42RSxFQUFFaTdELFFBQVFwTixXQUFVM3VELEtBQUt5MEUsVUFBUTtnQkFBTXowRSxLQUFLczVFLGdCQUFnQiwyQkFBeUJ0NUUsS0FBS3c5RCxTQUFTeDlELEtBQUtzNUUsZ0JBQWdCLHlCQUF3QnQ1RSxLQUFLczVFLGdCQUFnQjtnQkFBaUIsUUFBTXQ1RSxLQUFLdzlELFNBQVMsMEJBQXdCeDlELEtBQUt3OUQsU0FBUyx3QkFBdUJ4OUQsS0FBS3c5RCxTQUFTLG1CQUFrQng5RCxLQUFLazVFLE9BQU9uK0M7Z0JBQVMvNkIsS0FBSzg0RSx5QkFBd0I5NEUsS0FBSzI3RTtnQkFBbUIzN0UsS0FBSzgrRCxZQUFVaCtELEdBQUVkLEtBQUs4K0QsVUFBVTk3QyxHQUFHLFNBQU8sU0FBVXJrQjtrQkFBRyxPQUFPc0IsRUFBRWs4RSxvQkFBb0JyN0UsR0FBRW5DO0FBQUcscUJBQUdxQixLQUFLOCtELFVBQVU5N0MsR0FBRyxRQUFNO2tCQUFZLE9BQU8vaUIsRUFBRW04RSxtQkFBbUJ0N0U7QUFBRyxxQkFBR2QsS0FBSzgrRCxVQUFVOTdDLEdBQUcsVUFBUTtrQkFBWSxPQUFPL2lCLEVBQUVvOEUscUJBQXFCdjdFO0FBQUcscUJBQUdkLEtBQUttNUUsY0FBWW41RSxLQUFLbzVFLEtBQUtyWCxLQUFLbDFELE1BQU0sS0FBSyxJQUFHN00sS0FBS3UvRCxTQUFPeitELEVBQUVtL0QsWUFBV2pnRSxLQUFLbWdFLGFBQVcxK0QsRUFBRTQ2RCxhQUFhcjhELEtBQUt1L0Q7Z0JBQVF2L0QsS0FBS3M4RSxzQkFBc0J4N0U7Z0JBQUcsSUFBSU0sSUFBRXBCLEtBQUswNUUsaUJBQWlCLHFCQUFtQjtnQkFBRzE1RSxLQUFLODVFLGVBQWExNEUsR0FBRXBCLEtBQUsrNUUsc0JBQW9CMzRFLEdBQUVwQixLQUFLazdFLGVBQWU1N0UsRUFBRXVnRTtBQUFpQjtBQUFDLGVBQUV2Z0UsRUFBRW1RLFVBQVUwc0Usc0JBQW9CLFNBQVN4OUUsR0FBRW1DO2NBQUdkLEtBQUs4K0QsY0FBWW5nRSxNQUFJcUIsS0FBS3k1RSxlQUFlajVFLEtBQUssSUFBSWEsRUFBRVAsS0FBSWQsS0FBSzY1RSxnQkFBYy80RSxFQUFFUCxRQUFPUCxLQUFLZy9ELGVBQWExL0QsRUFBRTIvRCxXQUFTai9ELEtBQUtrN0UsZUFBZTU3RSxFQUFFMi9EO2NBQVNqL0QsS0FBS3M3RSxrQkFBa0I7QUFBWSxlQUFFaDhFLEVBQUVtUSxVQUFVMnNFLHFCQUFtQixTQUFTejlFO2NBQUdxQixLQUFLOCtELGNBQVluZ0UsTUFBSXFCLEtBQUt1OEUsa0JBQWlCdjhFLEtBQUt3NUUsV0FBUyxNQUFLeDVFLEtBQUs4K0QsWUFBVSxNQUFLOStELEtBQUtrN0UsZUFBZTU3RSxFQUFFNC9EO2NBQU1sL0QsS0FBS3M3RSxrQkFBa0IsU0FBUXQ3RSxLQUFLczdFLGtCQUFrQjtBQUFXLGVBQUVoOEUsRUFBRW1RLFVBQVU0c0UsdUJBQXFCLFNBQVMxOUU7Y0FBRyxJQUFHcUIsS0FBSzgrRCxjQUFZbmdFLEdBQUU7Z0JBQUMsSUFBSW1DLElBQUVkLEtBQUt3NUU7Z0JBQVN4NUUsS0FBS3E3RSxhQUFZdjZFLEVBQUUydkMsU0FBUXp3QyxLQUFLazdFLGVBQWU1N0UsRUFBRTQvRCxPQUFNbC9ELEtBQUtzN0Usa0JBQWtCLFVBQVN0N0UsS0FBS3M3RSxrQkFBa0I7QUFBVTtBQUFDLGVBQUVoOEUsRUFBRW1RLFVBQVVvc0UsaUJBQWUsU0FBU2w5RTtjQUFHcUIsS0FBS3c1RSxhQUFXNzZFLE1BQUlxQixLQUFLcTdFLGFBQVkxOEUsRUFBRTh4QyxTQUFRendDLEtBQUtrN0UsZUFBZTU3RSxFQUFFNC9ELE9BQU1sL0QsS0FBS3M3RSxrQkFBa0IsWUFBV3Q3RSxLQUFLczdFLGtCQUFrQjtBQUFXLGVBQUVoOEUsRUFBRW1RLFVBQVVzc0Usc0JBQW9CLFNBQVNwOUUsR0FBRW1DO2NBQUdkLEtBQUt3NUUsYUFBVzc2RSxNQUFJcUIsS0FBS3E3RSxhQUFZMThFLEVBQUU4eEMsU0FBUXp3QyxLQUFLazdFLGVBQWU1N0UsRUFBRTQvRCxPQUFNbC9ELEtBQUtzN0Usa0JBQWtCLFVBQVN0N0UsS0FBS3M3RSxrQkFBa0I7QUFBVyxlQUFFaDhFLEVBQUVtUSxVQUFVNnJFLG9CQUFrQixTQUFTMzhFO2NBQUcsSUFBSW1DLElBQUUsSUFBSXhCLEVBQUU4NEUsY0FBY3o1RTtjQUFHbUMsRUFBRTAzRSxtQkFBaUJ4NEUsS0FBSys1RSxtQkFBa0JqNUUsRUFBRXkzRSxTQUFPdjRFLEtBQUs2NUUsY0FBYS80RSxFQUFFMjNFLFFBQU16NEUsS0FBSzg1RSxhQUFZOTVFLEtBQUsyNEUsY0FBYzczRTtBQUFFLGVBQUV4QixFQUFFbVEsVUFBVTRyRSxZQUFVO2NBQVdyN0UsS0FBS3c1RSxXQUFTLE1BQUt4NUUsS0FBSzgrRCxZQUFVLE1BQUs5K0QsS0FBSzA1RSxtQkFBaUIsTUFBSzE1RSxLQUFLeTVFLGlCQUFlO0FBQUksZUFBRW42RSxFQUFFbVEsVUFBVXdyRSxZQUFVLFNBQVN0OEUsR0FBRVcsR0FBRXdCO2NBQUcsSUFBSWIsSUFBRSxRQUFNRCxLQUFLMDdFLGdCQUFjLzhFLElBQUVvQyxFQUFFMUMsUUFBUTJCLEtBQUswN0UsZUFBYy84RSxJQUFHeUMsSUFBRUwsRUFBRThDLE1BQU01RCxJQUFFLElBQUc7Y0FBSW1CLEVBQUU4WixPQUFLO2NBQUssSUFBSTdaLEtBQUdELEVBQUVxOEQsUUFBTSxJQUFJNXdELE1BQU0sTUFBS3ZMLElBQUVELEVBQUUsSUFBR0csSUFBRUgsRUFBRTtjQUFHLFFBQU9DLEtBQUdFLEtBQUdsQyxLQUFHd0IsT0FBS00sRUFBRXE4RCxRQUFNbitELEtBQUdnQyxLQUFHLE1BQUksT0FBS1IsS0FBR1UsS0FBRyxNQUFLSjtBQUFDLGVBQUU5QixFQUFFbVEsVUFBVTZzRSx3QkFBc0IsU0FBUzM5RTtjQUFHLEtBQUksSUFBSVcsS0FBS1UsS0FBSzA1RSxtQkFBaUIsQ0FBQyxHQUFFLzZFLEVBQUVvOUQsU0FBUTtnQkFBQyxJQUFJajdELElBQUV4QixFQUFFc047Z0JBQWM1TSxLQUFLNDZFLGdCQUFnQjk1RSxPQUFLZCxLQUFLMDVFLGlCQUFpQjU0RSxLQUFHbkMsRUFBRW85RCxRQUFRejhEO0FBQUc7Y0FBQyxRQUFNVSxLQUFLdTVFLGtCQUFnQnY1RSxLQUFLMDVFLGlCQUFpQixrQkFBZ0IxNUUsS0FBS3U1RTtBQUFjLGVBQUVqNkUsRUFBRW1RLFVBQVU4c0UsaUJBQWU7Y0FBVyxJQUFJNTlFLElBQUUwQyxFQUFFaVMsT0FBT3RULEtBQUt5NUU7Y0FBZ0IsUUFBT3o1RSxLQUFLeTVFLGlCQUFlLE1BQUt6NUUsS0FBSzA4RDtlQUFjLEtBQUk7Z0JBQU8xOEQsS0FBSzJnRSxlQUFhO2dCQUFLO2tCQUFJM2dFLEtBQUs0Z0UsV0FBU2g5RCxLQUFLQyxNQUFNbEYsRUFBRStQLFNBQVM7QUFBcUMsa0JBQTNCLE9BQU0vUDtrQkFBR3FCLEtBQUs0Z0UsV0FBUztBQUFJO2dCQUFDOztlQUFPLEtBQUk7Z0JBQVMsT0FBTzVnRSxLQUFLMmdFLGVBQWEsWUFBVTNnRSxLQUFLNGdFLFdBQVNqaUU7O2VBQUcsS0FBSTtnQkFBY3FCLEtBQUsyZ0UsZUFBYTtnQkFBSyxLQUFJLElBQUlyaEUsSUFBRSxJQUFJd2hDLFlBQVluaUMsRUFBRTRCLFNBQVFPLElBQUUsSUFBSXdFLFdBQVdoRyxJQUFHVyxJQUFFLEdBQUVBLElBQUV0QixFQUFFNEIsUUFBT04sS0FBSWEsRUFBRWIsS0FBR3RCLEVBQUVzQjtnQkFBRyxhQUFZRCxLQUFLNGdFLFdBQVN0aEU7O2VBQUc7Z0JBQVE7a0JBQUlVLEtBQUsyZ0UsZUFBYWhpRSxFQUFFK1AsU0FBUzFPLEtBQUt3OEU7QUFBeUUsa0JBQS9DLE9BQU1sOUU7a0JBQUdVLEtBQUsyZ0UsZUFBYWhpRSxFQUFFK1AsU0FBUztBQUFTO2dCQUFDMU8sS0FBSzRnRSxXQUFTNWdFLEtBQUsyZ0U7O0FBQWEsZUFBRXJoRSxFQUFFbVEsVUFBVStzRSx5QkFBdUI7Y0FBVyxPQUFNLG9CQUFvQnZ4QixLQUFLanJELEtBQUswNUUsaUJBQWlCLG1CQUFpQixJQUFJLE1BQUk7QUFBTyxlQUFFcDZFLEVBQUU4NEUsZ0JBQWNuMkUsRUFBRW0yRSxlQUFjOTRFLEVBQUUyNEUsb0JBQWtCejFFLEVBQUV5MUUsbUJBQWtCMzRFLEVBQUU0NEUsZUFBYTExRSxFQUFFMDFFLGNBQWE1NEUsRUFBRTA0RSxnQkFBY3gxRSxFQUFFdzFFO1lBQWMxNEUsRUFBRXFoRCxjQUFZbitDLEVBQUVtK0MsYUFBWXJoRCxFQUFFMDVFLHVCQUFxQjUwRSxFQUFFNDBFLHNCQUFxQjE1RSxFQUFFcWdFLFNBQU8sR0FBRXJnRSxFQUFFc2dFLFNBQU8sR0FBRXRnRSxFQUFFdWdFLG1CQUFpQjtZQUFFdmdFLEVBQUUyL0QsVUFBUSxHQUFFMy9ELEVBQUU0L0QsT0FBSyxHQUFFNS9ELEVBQUVzOEUsWUFBVXY4RSxFQUFFcW5DLGFBQVlwbkM7QUFBQyxXQUFqeVMsQ0FBbXlTNkIsRUFBRWczRTtVQUEyQjc0RSxFQUFFaTlELGlCQUFlaDlELEdBQUVBLEVBQUVrUSxVQUFVK3JFLGtCQUFnQi81RSxFQUFFMjZELGFBQVk3OEQsRUFBRWtRLFVBQVVnc0UsbUJBQWlCcjhFLEVBQUVnOUQsYUFBWTc4RCxFQUFFa1EsVUFBVWlzRSxnQkFBYztBQUFJO1FBQUUsTUFBSy84RTtVQUFJQSxFQUFFaUMsVUFBUTtZQUFXLEtBQUksSUFBSWpDLElBQUUsQ0FBQyxHQUFFbUMsSUFBRSxHQUFFQSxJQUFFK04sVUFBVXRPLFFBQU9PLEtBQUk7Y0FBQyxJQUFJYixJQUFFNE8sVUFBVS9OO2NBQUcsS0FBSSxJQUFJTSxLQUFLbkIsR0FBRVgsRUFBRWUsS0FBS0osR0FBRW1CLE9BQUt6QyxFQUFFeUMsS0FBR25CLEVBQUVtQjtBQUFHO1lBQUMsT0FBT3pDO0FBQUM7VUFBRSxJQUFJVyxJQUFFNEMsT0FBT3VOLFVBQVU2TztBQUFBQTtRQUFnQixNQUFLO1FBQU8sTUFBSztRQUFPLE1BQUs7UUFBTyxNQUFLO1FBQU8sTUFBSztRQUFPLEtBQUk7UUFBTyxNQUFLO1FBQU8sTUFBSyxDQUFDM2YsR0FBRVcsR0FBRXdCO1VBQUs7VUFBYSxJQUFJYixJQUFFLEVBQUMsaUJBQWdCLGtCQUFpQixnQkFBZSxnQkFBZSxjQUFhLGNBQWEsYUFBWSxlQUFjLGVBQWMsY0FBYSx1QkFBcUJtQixJQUFFLHNCQUFvQnFTLGFBQVczUyxFQUFFdkIsSUFBRWtVO1VBQVc5VSxFQUFFaUMsVUFBUTtZQUFXLEtBQUksSUFBSWpDLElBQUUsSUFBR1csSUFBRSxHQUFFQSxJQUFFVyxFQUFFTSxRQUFPakIsS0FBSSxxQkFBbUI4QixFQUFFbkIsRUFBRVgsUUFBTVgsRUFBRUEsRUFBRTRCLFVBQVFOLEVBQUVYO1lBQUksT0FBT1g7QUFBQztBQUFBO1FBQUcsS0FBSSxDQUFDQSxHQUFFVyxHQUFFd0I7VUFBSztVQUFhLElBQUliLElBQUVhLEVBQUUsSUFBRkEsQ0FBTyxzQ0FBb0M7VUFBSSxJQUFHYixHQUFFO1lBQUlBLEVBQUUsSUFBRztBQUF5QixZQUFmLE9BQU10QjtZQUFHc0IsSUFBRTtBQUFJO1VBQUN0QixFQUFFaUMsVUFBUVg7QUFBQUE7UUFBRyxNQUFLdEI7VUFBSTtVQUFhQSxFQUFFaUMsVUFBUWdELEtBQUtDLE1BQU07QUFBd2lFO1FBQUcsTUFBS2xGO1VBQUk7VUFBYUEsRUFBRWlDLFVBQVFnRCxLQUFLQyxNQUFNO0FBQWlrRTtRQUFHLE1BQUtsRjtVQUFJO1VBQWFBLEVBQUVpQyxVQUFRZ0QsS0FBS0MsTUFBTTtBQUEwSjtRQUFHLE1BQUtsRjtVQUFJO1VBQWFBLEVBQUVpQyxVQUFRZ0QsS0FBS0MsTUFBTTtBQUF3ME47UUFBRyxNQUFLbEY7VUFBSTtVQUFhQSxFQUFFaUMsVUFBUTtZQUFDNHNDLElBQUc7O0FBQU87UUFBRyxNQUFLN3VDO1VBQUk7VUFBYUEsRUFBRWlDLFVBQVFnRCxLQUFLQyxNQUFNO0FBQStkO1NBQUl2RSxJQUFFLENBQUM7TUFBRSxTQUFTd0IsRUFBRWI7UUFBRyxJQUFJbUIsSUFBRTlCLEVBQUVXO1FBQUcsU0FBRyxNQUFTbUIsR0FBRSxPQUFPQSxFQUFFUjtRQUFRLElBQUlTLElBQUUvQixFQUFFVyxLQUFHO1VBQUMyL0IsSUFBRzMvQjtVQUFFczRFLFNBQU87VUFBRzMzRSxTQUFRLENBQUM7O1FBQUcsT0FBT2pDLEVBQUVzQixHQUFHSSxLQUFLZ0IsRUFBRVQsU0FBUVMsR0FBRUEsRUFBRVQsU0FBUUUsSUFBR08sRUFBRWszRSxVQUFPLEdBQUdsM0UsRUFBRVQ7QUFBTztNQUFDRSxFQUFFNGxELE9BQUssQ0FBQyxHQUFFNWxELEVBQUViLElBQUV0QjtRQUFJLElBQUlXLElBQUVYLEtBQUdBLEVBQUUrakIsYUFBVyxNQUFJL2pCLEVBQUUwUixVQUFRLE1BQUkxUjtRQUFFLE9BQU9tQyxFQUFFQyxFQUFFekIsR0FBRTtVQUFDa0MsR0FBRWxDO1lBQUlBO0FBQUFBLFNBQUd3QixFQUFFQyxJQUFFLENBQUNwQyxHQUFFVztRQUFLLEtBQUksSUFBSVcsS0FBS1gsR0FBRXdCLEVBQUVPLEVBQUUvQixHQUFFVyxPQUFLYSxFQUFFTyxFQUFFMUMsR0FBRXNCLE1BQUlpQyxPQUFPd0csZUFBZS9KLEdBQUVzQixHQUFFO1VBQUMwSSxhQUFXO1VBQUdDLEtBQUl0SixFQUFFVzs7QUFBRyxTQUFHYSxFQUFFdkIsSUFBRTtRQUFXLElBQUcsbUJBQWlCa1UsWUFBVyxPQUFPQTtRQUFXO1VBQUksT0FBT3pULFFBQU0sSUFBSW92QixTQUFTLGNBQWI7QUFBK0UsVUFBakQsT0FBTXp3QjtVQUFHLElBQUcsbUJBQWlCK1UsUUFBTyxPQUFPQTtBQUFNO0FBQUMsT0FBN0osSUFBaUs1UyxFQUFFTyxJQUFFLENBQUMxQyxHQUFFVyxNQUFJNEMsT0FBT3VOLFVBQVU2TyxlQUFlamUsS0FBSzFCLEdBQUVXLElBQUd3QixFQUFFQSxJQUFFbkM7UUFBSSxzQkFBb0JtQixVQUFRQSxPQUFPc2lELGVBQWFsZ0QsT0FBT3dHLGVBQWUvSixHQUFFbUIsT0FBT3NpRCxhQUFZO1VBQUM1akQsT0FBTTtZQUFXMEQsT0FBT3dHLGVBQWUvSixHQUFFLGNBQWE7VUFBQ0gsUUFBTTs7QUFBRyxTQUFHc0MsRUFBRXM1QixNQUFJejdCLE1BQUlBLEVBQUU4OUUsUUFBTSxJQUFHOTlFLEVBQUU0b0IsYUFBVzVvQixFQUFFNG9CLFdBQVMsS0FBSTVvQjtNQUFHLElBQUlzQixJQUFFLENBQUM7TUFBRSxPQUFNO1FBQU07UUFBYSxTQUFTdEIsRUFBRUEsR0FBRVcsR0FBRXdCO1VBQUcsT0FBT3hCLEtBQUtYLElBQUV1RCxPQUFPd0csZUFBZS9KLEdBQUVXLEdBQUU7WUFBQ2QsT0FBTXNDO1lBQUU2SCxhQUFXO1lBQUd1UCxlQUFhO1lBQUd2RyxXQUFTO2VBQUtoVCxFQUFFVyxLQUFHd0IsR0FBRW5DO0FBQUM7UUFBQ21DLEVBQUVDLEVBQUVkLEdBQUU7VUFBQ29RLFNBQVEsTUFBSXFzRTs7UUFBSyxJQUFJcDlFLElBQUV3QixFQUFFLE9BQU1NLElBQUVOLEVBQUViLEVBQUVYLElBQUcrQixJQUFFUCxFQUFFO1FBQU0sTUFBTVEsSUFBRTtVQUFDcTdFLFNBQVE7VUFBVUMsU0FBUTtVQUFVQyxTQUFRO1dBQW1CcjdFLElBQUUsRUFBQztVQUFDc3hFLFFBQU8sRUFBQztZQUFDZ0ssY0FBYTtZQUFTcjVFLE1BQUs7WUFBWVYsTUFBSzthQUFVO1lBQUMrNUUsY0FBYTtZQUFVcjVFLE1BQUs7WUFBbUJWLE1BQUs7O1VBQVlVLE1BQUs7VUFBYSt4RSxTQUFRLEVBQUM7WUFBQ3NILGNBQWE7WUFBVXI1RSxNQUFLO1lBQWVWLE1BQUs7YUFBVztZQUFDKzVFLGNBQWE7WUFBV3I1RSxNQUFLO1lBQXFCVixNQUFLO2FBQVk7WUFBQys1RSxjQUFhO1lBQVlyNUUsTUFBSztZQUFnQlYsTUFBSzthQUFhO1lBQUMrNUUsY0FBYTtZQUFZcjVFLE1BQUs7WUFBZ0JWLE1BQUs7YUFBYTtZQUFDKzVFLGNBQWE7WUFBWXI1RSxNQUFLO1lBQWVWLE1BQUs7O1VBQWMwd0UsaUJBQWdCO1VBQU8xd0UsTUFBSzs7UUFBYSxNQUFNdEI7VUFBRWlCO1lBQWMsSUFBSXBELElBQUd5OUUsU0FBUWo4RSxJQUFFUSxFQUFFczdFLFNBQVFJLGNBQWEvOEUsSUFBRXdCLEVBQUV3N0UseUJBQXVCcHVFLFVBQVV0TyxTQUFPLFVBQUcsTUFBU3NPLFVBQVUsS0FBR0EsVUFBVSxLQUFHLENBQUM7WUFBRWxRLEVBQUVxQixNQUFLLGlCQUFnQixLQUFJckIsRUFBRXFCLE1BQUssdUJBQXNCLEtBQUlyQixFQUFFcUIsTUFBSyxpQkFBZ0IsS0FBSXJCLEVBQUVxQixNQUFLLGlCQUFnQjtZQUFJckIsRUFBRXFCLE1BQUssd0JBQWtCLElBQVFyQixFQUFFcUIsTUFBSyxnQkFBVSxJQUFRckIsRUFBRXFCLE1BQUsseUJBQW1CO1lBQVE7Y0FBSVYsSUFBRSxJQUFJNDlFLElBQUlwOEUsR0FBR2loRTtBQUEwRyxjQUFyRyxPQUFNcGpFO2NBQUcsTUFBTXNCLElBQUU7Y0FBbUNYLElBQUUsV0FBV2dVLE9BQU94UyxHQUFFLGtCQUFrQndTLE9BQU9yVDtBQUFFO1lBQUNtQixJQUFJcXVFLFlBQVlud0UsSUFBR1UsS0FBS205RSxtQkFBaUIsS0FBSS83RSxJQUFKLENBQVNJLEdBQUV2QixJQUFHRCxLQUFLbzlFLGtCQUFnQm45RSxHQUFFRCxLQUFLcTlFLFdBQVE7QUFBRTtVQUFLQztZQUFlLE9BQU07Y0FBQ0MsY0FBYXY5RSxLQUFLdzlFO2NBQWNKLGlCQUFnQnA5RSxLQUFLbzlFO2NBQWdCSyxvQkFBbUJ6OUUsS0FBSzA5RTtjQUFvQkMsY0FBYTM5RSxLQUFLNDlFO2NBQWNDLGNBQWE3OUUsS0FBSzg5RTtjQUFjVCxTQUFRcjlFLEtBQUtxOUU7O0FBQVE7VUFBQ1UscUJBQXFCcC9FO1lBQUcsS0FBSXEvRSxVQUFTMStFLEdBQUUyK0UsWUFBV245RSxLQUFHbkM7WUFBRTtjQUFJLElBQUdxQixLQUFLcTlFLFlBQVVyOUUsS0FBS285RSxvQkFBa0IzN0UsRUFBRXc3RSx5QkFBdUJqOUUsS0FBS285RSxvQkFBa0IzN0UsRUFBRXk4RSx3QkFBdUIsT0FBT2wrRSxLQUFLczlFO2NBQWEsTUFBTTMrRSxLQUFFLEdBQUcwQyxFQUFFMnhDLFdBQVdseUMsSUFBR2IsVUFBUUQsS0FBS205RSxpQkFBaUIzTCxRQUFRMk0sV0FBVzcrRSxHQUFFWCxHQUFHMEIsU0FBUWs5RSxjQUFhbjhFLEdBQUVxOEUsb0JBQW1CbjhFLEdBQUU4OEUsZUFBYzU4RSxHQUFFNjhFLGVBQWNqL0UsR0FBRXkrRSxjQUFhaDhFLEtBQUc1QjtjQUFFRCxLQUFLdzlFLGdCQUFjcDhFLEdBQUVwQixLQUFLODlFLGdCQUFjajhFLEVBQUU4QixLQUFLaEYsS0FBR3d5QixPQUFPeHlCO2NBQUssTUFBTW9DLElBQUUsSUFBR2tCLElBQUU7Y0FBRyxLQUFJLElBQUl0RCxJQUFFLEdBQUVBLElBQUUyQyxFQUFFZixRQUFPNUIsS0FBRyxHQUFFO2dCQUFDLE1BQU1XLElBQUVnQyxFQUFFM0MsSUFBR21DLElBQUVVLEVBQUU3QyxJQUFHc0IsSUFBRWIsRUFBRVQsSUFBR3lDLElBQUUsV0FBV2tTLE9BQU9oVSxFQUFFdU4sTUFBTSxLQUFLLElBQUc7Z0JBQVM5TCxFQUFFUCxLQUFLWSxJQUFHYSxFQUFFekIsS0FBSztrQkFBQ21kLElBQUUsR0FBR3RjLEVBQUV5UyxPQUFPaFQsR0FBRzBELFFBQVEsTUFBSztrQkFBSW9aLElBQUUsR0FBR3ZjLEVBQUV5UyxPQUFPN1QsR0FBR3VFLFFBQVEsTUFBSzs7QUFBSztjQUFDLE9BQU94RSxLQUFLMDlFLHNCQUFvQjM4RSxHQUFFZixLQUFLNDlFLGdCQUFjMzdFLEdBQUVqQyxLQUFLcTlFLFdBQVEsR0FBR3I5RSxLQUFLczlFO0FBQTZHLGNBQWhHLE9BQU0zK0U7Y0FBRyxJQUFHcUIsS0FBS285RSxvQkFBa0IzN0UsRUFBRXc3RSx1QkFBc0IsT0FBT3g3RSxFQUFFNjhFO2NBQXFCLE1BQU0zL0U7QUFBQztBQUFDOztRQUFFQSxFQUFFOEMsR0FBRSx5QkFBd0IsK0NBQThDOUMsRUFBRThDLEdBQUUseUJBQXdCO1FBQThDOUMsRUFBRThDLEdBQUUseUJBQXdCLCtDQUE4QzlDLEVBQUU4QyxHQUFFLHdCQUF1QjtVQUFDODdFLGNBQWE7VUFBS0gsaUJBQWdCMzdFLEVBQUV3N0U7VUFBc0JRLG9CQUFtQixFQUFDLHVDQUFzQyx1Q0FBc0MseUNBQXdDLHNDQUFxQyw2Q0FBNEMscUNBQW9DLDRDQUEyQyx3Q0FBdUM7VUFBaUNJLGNBQWEsRUFBQyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7VUFBR0YsY0FBYSxFQUFDO1lBQUNoZ0UsR0FBRTtZQUFtRUMsR0FBRTthQUFvRTtZQUFDRCxHQUFFO1lBQW1FQyxHQUFFO2FBQW9FO1lBQUNELEdBQUU7WUFBa0VDLEdBQUU7YUFBb0U7WUFBQ0QsR0FBRTtZQUFtRUMsR0FBRTthQUFvRTtZQUFDRCxHQUFFO1lBQW1FQyxHQUFFO2FBQW9FO1lBQUNELEdBQUU7WUFBbUVDLEdBQUU7YUFBb0U7WUFBQ0QsR0FBRTtZQUFtRUMsR0FBRTthQUFvRTtZQUFDRCxHQUFFO1lBQW1FQyxHQUFFO2FBQW9FO1lBQUNELEdBQUU7WUFBbUVDLEdBQUU7O1VBQXFFeS9ELFVBQVE7O1FBQUssSUFBSWorRSxJQUFFMEIsRUFBRSxPQUFNZSxJQUFFZixFQUFFYixFQUFFYixJQUFHMkIsSUFBRUQsRUFBRSxPQUFNbUIsSUFBRW5CLEVBQUViLEVBQUVjO1FBQUcsU0FBU3lCLEVBQUU3RCxHQUFFVztVQUFHLElBQUl3QixJQUFFb0IsT0FBTzhQLEtBQUtyVDtVQUFHLElBQUd1RCxPQUFPMnVCLHVCQUFzQjtZQUFDLElBQUk1d0IsSUFBRWlDLE9BQU8ydUIsc0JBQXNCbHlCO1lBQUdXLE1BQUlXLElBQUVBLEVBQUVvb0IsUUFBTyxTQUFVL29CO2NBQUcsT0FBTzRDLE9BQU80dUIseUJBQXlCbnlCLEdBQUVXLEdBQUdxSjtBQUFXLGtCQUFJN0gsRUFBRU4sS0FBS3ZCLE1BQU02QixHQUFFYjtBQUFFO1VBQUMsT0FBT2E7QUFBQztRQUFDLFNBQVNLLEVBQUU3QjtVQUFHLEtBQUksSUFBSXdCLElBQUUsR0FBRUEsSUFBRStOLFVBQVV0TyxRQUFPTyxLQUFJO1lBQUMsSUFBSWIsSUFBRSxRQUFNNE8sVUFBVS9OLEtBQUcrTixVQUFVL04sS0FBRyxDQUFDO1lBQUVBLElBQUUsSUFBRTBCLEVBQUVOLE9BQU9qQyxLQUFHLEdBQUlxSSxTQUFRLFNBQVV4SDtjQUFHbkMsRUFBRVcsR0FBRXdCLEdBQUViLEVBQUVhO0FBQUksa0JBQUdvQixPQUFPczNELDRCQUEwQnQzRCxPQUFPbzVDLGlCQUFpQmg4QyxHQUFFNEMsT0FBT3MzRCwwQkFBMEJ2NUQsTUFBSXVDLEVBQUVOLE9BQU9qQyxJQUFJcUksU0FBUSxTQUFVM0o7Y0FBR3VELE9BQU93RyxlQUFlcEosR0FBRVgsR0FBRXVELE9BQU80dUIseUJBQXlCN3dCLEdBQUV0QjtBQUFJO0FBQUU7VUFBQyxPQUFPVztBQUFDO1FBQUMsTUFBTThFLElBQUVuQyxJQUFJcXFELFVBQVU7UUFBZ0Jsb0QsRUFBRTRuRCxTQUFTanJELEVBQUUrUSxPQUFPcEI7UUFBTSxJQUFJclIsSUFBRSxpQkFBZ0JFLElBQUU7UUFBcUIsU0FBU1csRUFBRXZCO1VBQUdVLElBQUVWO0FBQUM7UUFBQ28vRSxlQUFlNzRFLEVBQUV2RyxHQUFFVztVQUFHLElBQUl3QixJQUFFO1VBQUs7WUFBSUEsSUFBRSxJQUFJbzhFLElBQUl2K0U7QUFBWSxZQUFULE9BQU1BLElBQUc7VUFBQyxPQUFPZytELE1BQU1oK0QsR0FBRVc7QUFBRTtRQUFDLFNBQVNFO1VBQUksTUFBTWIsSUFBRSxDQUFDO1VBQUUsT0FBT1UsTUFBSVYsRUFBRSxlQUFhVSxJQUFHRSxNQUFJWixFQUFFLGtCQUFnQlksSUFBR1o7QUFBQztRQUFDLFNBQVN5SSxFQUFFekk7VUFBR3lGLEVBQUVrTSxLQUFLLGFBQWFnRCxPQUFPM1UsRUFBRTRnRSxRQUFPLEtBQUtqc0QsT0FBTzNVLEVBQUV3aEUsY0FBYS83RCxFQUFFa00sS0FBSyxRQUFRZ0QsT0FBTzNVLEVBQUVrOUQ7QUFBSztRQUFDLE1BQU14MEQsSUFBRSxDQUFDMUksR0FBRVc7VUFBSyxNQUFNd0IsSUFBRSxJQUFJMUMsU0FBUSxDQUFFa0IsR0FBRXdCO1lBQUssTUFBTWIsSUFBRWtrQixZQUFXO2NBQU15dUMsYUFBYTN5RCxJQUFHYSxFQUFFLElBQUkySCxNQUFNLGdCQUFnQjZLLE9BQU8zVSxHQUFFO0FBQVEsZ0JBQUVBO0FBQUc7VUFBRyxPQUFPUCxRQUFRbWdGLEtBQUssRUFBQ2ovRSxHQUFFd0I7QUFBRSxXQUFHZ0gsSUFBRWkyRSxlQUFlcC9FO1VBQUcsSUFBSVcsSUFBRXVQLFVBQVV0TyxTQUFPLFVBQUcsTUFBU3NPLFVBQVUsS0FBR0EsVUFBVSxLQUFHLENBQUMsR0FBRS9OLElBQUUrTixVQUFVdE8sU0FBTyxVQUFHLE1BQVNzTyxVQUFVLEtBQUdBLFVBQVUsS0FBRyxDQUFDO1VBQUUsTUFBTTVPLElBQUU7WUFBQ3U5QixNQUFLO1lBQU91K0IsU0FBUSxDQUFDOztVQUFHajdELEVBQUUwOUUsY0FBWXYrRSxFQUFFODdELFVBQVE1NkQsRUFBRUEsRUFBRSxDQUFDLEdBQUVsQixFQUFFODdELFVBQVN2OEQ7VUFBTSxNQUFNNEIsSUFBRVMsSUFBSTVCLEdBQUVYLEdBQUU7WUFBQ3c4RCxRQUFPO2NBQVF6NkQsVUFBUTZELEVBQUV2RyxHQUFFeUM7VUFBRyxJQUFHQyxFQUFFNnNCLElBQUcsT0FBTzdzQixFQUFFa0I7VUFBTyxNQUFNNkUsRUFBRS9GLElBQUdBO0FBQUMsV0FBRTJHLElBQUUsU0FBU3JKO1VBQUcsSUFBSVcsSUFBRXVQLFVBQVV0TyxTQUFPLFVBQUcsTUFBU3NPLFVBQVUsS0FBR0EsVUFBVSxLQUFHLENBQUMsR0FBRS9OLElBQUUrTixVQUFVdE8sU0FBTyxVQUFHLE1BQVNzTyxVQUFVLEtBQUdBLFVBQVUsS0FBRyxDQUFDLEdBQUU1TyxJQUFFNE8sVUFBVXRPLFNBQU8sVUFBRyxNQUFTc08sVUFBVSxLQUFHQSxVQUFVLEtBQUcsQ0FBQztVQUFFLE1BQU16TixJQUFFO1lBQUNvOEIsTUFBSztZQUFPdStCLFNBQVE7Y0FBQyxnQkFBZTs7O1VBQW9DOTdELEVBQUV1K0UsY0FBWXA5RSxFQUFFMjZELFVBQVE1NkQsRUFBRUEsRUFBRSxDQUFDLEdBQUVDLEVBQUUyNkQsVUFBU3Y4RDtVQUFNLE1BQU02QixJQUFFUSxJQUFJVCxHQUFFTixHQUFFO1lBQUNnN0QsUUFBTzs7VUFBUyxPQUFPNzdELEVBQUV3K0Usb0JBQWtCcDlFLEVBQUVsQyxPQUFLRyxHQUFFLHNDQUFvQytCLEVBQUUwNkQsUUFBUSwwQkFBd0IxNkQsRUFBRTA2RCxRQUFRLG1CQUFpQjE2RCxFQUFFbEMsT0FBS3lFLEtBQUtFLFVBQVV4RTtVQUFHK0gsRUFBRXBILEVBQUVnK0QsV0FBUyxLQUFJLzRELEVBQUV2RyxHQUFFMEMsR0FBR3JDLE1BQU1MO1lBQUksSUFBR0EsRUFBRXV2QixJQUFHLE9BQU92dkIsRUFBRTREO1lBQU8sTUFBTTZFLEVBQUV6SSxJQUFHQTtBQUFFO0FBQUcsV0FBRXNKLElBQUUsQ0FBQ3RKLEdBQUVXLE9BQUk7VUFBRXV4RSxTQUFRO1VBQU0vVSxRQUFPbjlEO1VBQUVpaEMsSUFBRztVQUFHTyxRQUFPN2dDOztRQUFJLElBQUlwQixJQUFFNEMsRUFBRSxPQUFNK0gsSUFBRS9ILEVBQUUsT0FBTWtJLElBQUVsSSxFQUFFYixFQUFFNEksSUFBR0ssS0FBR3BJLEVBQUUsT0FBTUEsRUFBRSxRQUFPcUksSUFBRXJJLEVBQUViLEVBQUVpSjtRQUFHcEksRUFBRSxNQUFNeWpCLFFBQU8yNEQ7UUFBSSxJQUFJOXpFLElBQUV0SSxFQUFFLE9BQU13SSxJQUFFeEksRUFBRSxPQUFNeUksSUFBRXpJLEVBQUViLEVBQUVxSixJQUFHRSxJQUFFMUksRUFBRSxPQUFNdUosSUFBRXZKLEVBQUUsT0FBTXdKLElBQUV4SixFQUFFYixFQUFFb0ssSUFBR0UsSUFBRXpKLEVBQUUsTUFBSzBKLElBQUUxSixFQUFFYixFQUFFc0ssSUFBR2MsSUFBRXZLLEVBQUUsT0FBTStLLElBQUUvSyxFQUFFYixFQUFFb0w7UUFBRyxTQUFTRyxLQUFJO1FBQUMsTUFBTU0sSUFBRTtRQUFNLE1BQU1FLFVBQVU5TixFQUFFa2xCO1VBQU8xZ0IsWUFBWXBEO1lBQUcsS0FBSW1FLE1BQUszQyxHQUFFKytDLFFBQU81L0MsR0FBRXkrRSxjQUFhdDlFLElBQUVzUyxRQUFPaXJFLGNBQWF0OUUsSUFBRSxPQUFLL0I7WUFBRSxJQUFHZ0ksTUFBTTtjQUFDK2IsYUFBVztnQkFBSzFrQixFQUFFcUIsTUFBSyxjQUFRLElBQVFyQixFQUFFcUIsTUFBSyxpQkFBVyxJQUFRckIsRUFBRXFCLE1BQUssY0FBUSxJQUFRckIsRUFBRXFCLE1BQUssZ0JBQVUsSUFBUXJCLEVBQUVxQixNQUFLLHNCQUFnQjtZQUFRckIsRUFBRXFCLE1BQUssc0JBQWdCLElBQVFyQixFQUFFcUIsTUFBSyxtQkFBYSxJQUFRckIsRUFBRXFCLE1BQUssdUJBQWlCLEtBQVNjLE1BQUliLEdBQUUsTUFBTSxJQUFJd0ksTUFBTTtZQUFrQnpJLEtBQUtxYyxTQUFNLEdBQUdyYyxLQUFLNCtFLFlBQVMsR0FBRzUrRSxLQUFLNitFLFFBQU0vOUUsR0FBRWQsS0FBSzgrRSxVQUFRNytFLEdBQUVELEtBQUsrK0UsZ0JBQWMzOUUsR0FBRXBCLEtBQUtnL0UsZ0JBQWMzOUUsR0FBRXJCLEtBQUtpL0UsYUFBV2ovRSxLQUFLay9FLFVBQVVseEQsS0FBS2h1QjtZQUFNQSxLQUFLbS9FLGlCQUFlLE1BQUt6ckUsT0FBT3FzQyxpQkFBaUIsV0FBVS8vQyxLQUFLaS9FLGFBQVcsSUFBSWovRSxLQUFLby9FO0FBQVk7VUFBQ0M7WUFBU3IvRSxLQUFLaTVELFFBQU9qNUQsS0FBSzJqQixPQUFPLE9BQU0sTUFBS25ZLElBQUd4TCxLQUFLNCtFLFlBQVMsR0FBRzUrRSxLQUFLcWMsU0FBTTtBQUFFO1VBQUMraUU7WUFBYXAvRSxLQUFLMmpCLE9BQU8sT0FBTSxNQUFLblksSUFBR3hMLEtBQUtpNUQ7QUFBTTtVQUFDcW1CLFFBQVEzZ0Y7WUFBRyxJQUFHcUIsS0FBS3FjLE9BQU0sSUFBRyxVQUFRMWQsR0FBRXFCLEtBQUtxL0UsZUFBYztjQUFJci9FLEtBQUtRLEtBQUs3QjtBQUFnQyxjQUE3QixPQUFNQTtjQUFHcUIsS0FBSzhpQixLQUFLLFNBQVFua0I7QUFBRSxtQkFBSyxVQUFRQSxLQUFHcUIsS0FBSzQrRSxZQUFTLEdBQUc1K0UsS0FBSzJqQixPQUFPN1gsR0FBRSxNQUFLTixNQUFJN00sTUFBSW1OLE1BQUk5TCxLQUFLcWMsU0FBTSxHQUFHcmMsS0FBSzQrRSxZQUFVNStFLEtBQUsyakIsT0FBTzdYLEdBQUUsTUFBS047WUFBR3hMLEtBQUtrNUQ7QUFBUztVQUFDcW1CLGFBQWE1Z0Y7WUFBRyxNQUFNVyxJQUFFVSxLQUFLZy9FO1lBQWNoL0UsS0FBSysrRSxjQUFjUyxZQUFZO2NBQUMzL0IsUUFBTzcvQyxLQUFLOCtFO2NBQVF2NUUsTUFBSzVHO2VBQUdXO0FBQUU7VUFBQzQvRSxVQUFVdmdGO1lBQUcsTUFBTVcsSUFBRVgsRUFBRTRHO1lBQUssUUFBTXZGLEtBQUtnL0UsaUJBQWVyZ0YsRUFBRTQ3RSxXQUFTdjZFLEtBQUtnL0UsaUJBQWVyZ0YsRUFBRTJ6QixXQUFTdHlCLEtBQUsrK0UsaUJBQWUsbUJBQWlCei9FLEtBQUdBLEVBQUV1Z0QsV0FBUzcvQyxLQUFLNitFLFVBQVF2L0UsRUFBRWlHLFFBQU12RixLQUFLcy9FLFFBQVFoZ0YsRUFBRWlHO0FBQUs7VUFBQ3FlLFNBQVE7VUFBQ0QsT0FBT2hsQixHQUFFVyxHQUFFd0I7WUFBR2QsS0FBS3UvRSxhQUFhNWdGLElBQUdtQztBQUFHO1VBQUMraUI7WUFBV25RLE9BQU9zc0Msb0JBQW9CLFdBQVVoZ0QsS0FBS2kvRSxhQUFXO0FBQUc7O1FBQUUsU0FBU2h6RSxFQUFFdE4sR0FBRVcsR0FBRXdCO1VBQUc7WUFBSW9qQixRQUFRamxCLE1BQU1OLEdBQUVXLEdBQUV3QjtBQUF1QyxZQUFwQyxPQUFNbkM7WUFBR3dsQixZQUFXO2NBQU0sTUFBTXhsQjtBQUFFO0FBQUU7QUFBQztRQUFDLE1BQU11TixVQUFVOUMsRUFBRWdiO1VBQWF0QixLQUFLbmtCO1lBQUcsSUFBSVcsSUFBRSxZQUFVWDtZQUFFLE1BQU1tQyxJQUFFZCxLQUFLcWtCO1lBQVEsU0FBRyxNQUFTdmpCLEdBQUV4QixJQUFFQSxVQUFHLE1BQVN3QixFQUFFd0ssWUFBVyxLQUFJaE0sR0FBRSxRQUFNO1lBQUcsS0FBSSxJQUFJVyxJQUFFNE8sVUFBVXRPLFFBQU9hLElBQUUsSUFBSThHLE1BQU1qSSxJQUFFLElBQUVBLElBQUUsSUFBRSxJQUFHb0IsSUFBRSxHQUFFQSxJQUFFcEIsR0FBRW9CLEtBQUlELEVBQUVDLElBQUUsS0FBR3dOLFVBQVV4TjtZQUFHLElBQUcvQixHQUFFO2NBQUMsSUFBSVg7Y0FBRSxJQUFHeUMsRUFBRWIsU0FBTyxPQUFLNUIsS0FBR3lDLElBQUd6QyxhQUFhOEosT0FBTSxNQUFNOUo7Y0FBRSxNQUFNVyxJQUFFLElBQUltSixNQUFNLG1CQUFtQjZLLE9BQU8zVSxJQUFFLEtBQUsyVSxPQUFPM1UsRUFBRStJLFNBQVEsT0FBSztjQUFLLE1BQU1wSSxFQUFFZ2xCLFVBQVEzbEIsR0FBRVc7QUFBQztZQUFDLE1BQU1nQyxJQUFFUixFQUFFbkM7WUFBRyxTQUFHLE1BQVMyQyxHQUFFLFFBQU07WUFBRyxJQUFHLHFCQUFtQkEsR0FBRTJLLEVBQUUzSyxHQUFFdEIsTUFBS29CLFNBQU87Y0FBQyxNQUFNekMsSUFBRTJDLEVBQUVmLFFBQU9qQixJQUFFLFNBQVNYO2dCQUFHLE1BQU1XLElBQUVYLEVBQUU0QixRQUFPTyxJQUFFLElBQUlvSCxNQUFNNUk7Z0JBQUcsS0FBSSxJQUFJVyxJQUFFLEdBQUVBLElBQUVYLEdBQUVXLEtBQUcsR0FBRWEsRUFBRWIsS0FBR3RCLEVBQUVzQjtnQkFBRyxPQUFPYTtBQUFDLGVBQW5GLENBQXFGUTtjQUFHLEtBQUksSUFBSVIsSUFBRSxHQUFFQSxJQUFFbkMsR0FBRW1DLEtBQUcsR0FBRW1MLEVBQUUzTSxFQUFFd0IsSUFBR2QsTUFBS29CO0FBQUU7WUFBQyxRQUFNO0FBQUU7O1FBQUUsTUFBTUgsVUFBVXdIO1VBQU0vRixZQUFZcEQ7WUFBRyxLQUFJaUosTUFBS3pILEdBQUU0RyxTQUFRekgsR0FBRXNGLE1BQUtuRSxLQUFHOUI7WUFBRSxLQUFJNnhCLE9BQU8yZixVQUFVaHdDLElBQUcsTUFBTSxJQUFJMkgsTUFBTTtZQUEyQixLQUFJeEksS0FBRyxtQkFBaUJBLEdBQUUsTUFBTSxJQUFJd0ksTUFBTTtZQUEwQm5CLE1BQU1ySCxJQUFHdEIsRUFBRXFCLE1BQUssYUFBTyxJQUFRckIsRUFBRXFCLE1BQUssYUFBTyxJQUFRQSxLQUFLdUksT0FBS3pILFFBQUUsTUFBU00sTUFBSXBCLEtBQUt1RixPQUFLbkU7QUFBRTtVQUFDc047WUFBVyxPQUFPbkYsSUFBSTtjQUFDaEIsTUFBS3ZJLEtBQUt1STtjQUFLYixTQUFRMUgsS0FBSzBIO2NBQVFuQyxNQUFLdkYsS0FBS3VGO2NBQUswbEIsT0FBTWpyQixLQUFLaXJCOztBQUFPOztRQUFFLFNBQVN0TixFQUFFaGYsR0FBRVc7VUFBRyxJQUFJd0IsSUFBRW9CLE9BQU84UCxLQUFLclQ7VUFBRyxJQUFHdUQsT0FBTzJ1Qix1QkFBc0I7WUFBQyxJQUFJNXdCLElBQUVpQyxPQUFPMnVCLHNCQUFzQmx5QjtZQUFHVyxNQUFJVyxJQUFFQSxFQUFFb29CLFFBQU8sU0FBVS9vQjtjQUFHLE9BQU80QyxPQUFPNHVCLHlCQUF5Qm55QixHQUFFVyxHQUFHcUo7QUFBVyxrQkFBSTdILEVBQUVOLEtBQUt2QixNQUFNNkIsR0FBRWI7QUFBRTtVQUFDLE9BQU9hO0FBQUM7UUFBQyxNQUFNOGMsVUFBVTFSO1VBQUV4SjtZQUFjNEUsU0FBUTNJLEVBQUVxQixNQUFLLG9CQUFjLElBQVFBLEtBQUt5L0UsY0FBWTtBQUFFO1VBQUN4N0UsK0JBQStCdEYsR0FBRVcsR0FBRXdCO1lBQUcsTUFBTWIsSUFBRTtZQUFHLElBQUltQixJQUFFLE1BQUtDLEtBQUU7WUFBRyxLQUFJLE1BQU1DLEtBQUtSLEdBQUUsS0FBSU0sR0FBRUMsV0FBU3VjLEVBQUU4aEUsZUFBZS9nRixHQUFFVyxHQUFFZ0MsR0FBRXJCLElBQUdvQixHQUFFO1lBQU0sT0FBTSxFQUFDRCxHQUFFQyxHQUFFcEIsRUFBRTIzRTtBQUFVO1VBQUMzekUsc0JBQXNCdEYsR0FBRVcsR0FBRXdCLEdBQUViO1lBQUcsT0FBTyxJQUFJN0IsU0FBU2dEO2NBQUksTUFBTUMsSUFBRTFDO2dCQUFJLE1BQU1tQyxJQUFFbkMsS0FBR1csRUFBRWdNO2dCQUFNeEssTUFBSXhCLEVBQUVnTSxTQUFNLEdBQUc5QixFQUFFOG9DLElBQUl4eEMsS0FBSU0sRUFBRSxFQUFDTixJQUFFO0FBQUcsaUJBQUdRLElBQUUzQztnQkFBSVcsRUFBRWdNLFFBQU1qSyxFQUFFL0IsRUFBRWdNLFVBQVEzTSxNQUFJLHFCQUFtQkEsS0FBRzBDLEVBQUUsSUFBSUosRUFBRTtrQkFBQ3NILE9BQU07a0JBQU1iLFNBQVE7cUJBQTBEekgsRUFBRU8sS0FBSzdCLEtBQUl5QyxFQUFFLEVBQUMsT0FBSztBQUFJO2NBQUc7Z0JBQUlOLEVBQUVuQyxHQUFFVyxHQUFFZ0MsR0FBRUQ7QUFBZ0IsZ0JBQWIsT0FBTTFDO2dCQUFHMEMsRUFBRTFDO0FBQUU7QUFBRTtBQUFFO1VBQUNzRixnQ0FBZ0N0RjtZQUFHLEtBQUksTUFBTVcsS0FBS1gsU0FBUSxJQUFJUCxTQUFRLENBQUVPLEdBQUVtQztjQUFLeEIsR0FBR0EsS0FBR0EsSUFBRXdCLEVBQUV4QixLQUFHWDtBQUFNO0FBQUU7VUFBQ3NGLDJCQUEyQnRGLEdBQUVXLEdBQUV3QjtZQUFHLE1BQUssWUFBV3hCLFFBQU0sV0FBVUEsSUFBRyxNQUFNLElBQUkyQixFQUFFO2NBQUNzSCxPQUFNO2NBQU1iLFNBQVE7O1lBQWdELEtBQUk1RyxHQUFFLE1BQU0sSUFBSUcsRUFBRTtjQUFDc0gsT0FBTTtjQUFNYixTQUFROztBQUF5QjtVQUFDbEgsS0FBSzdCO1lBQUdxQixLQUFLeS9FLFlBQVlqL0UsS0FBSzdCO0FBQUU7VUFBQ2doRixPQUFPaGhGLEdBQUVXO1lBQUcsSUFBR0EsS0FBRyxxQkFBbUJBLEdBQUUsTUFBTSxJQUFJbUosTUFBTTtZQUE4QyxPQUFPUCxNQUFNQyxRQUFReEosS0FBR1csSUFBRVUsS0FBSzQvRSxhQUFhamhGLEdBQUVXLEtBQUdVLEtBQUs0L0UsYUFBYWpoRixLQUFHVyxJQUFFVSxLQUFLNi9FLFFBQVFsaEYsR0FBRVcsS0FBR1UsS0FBSzgvRSxlQUFlbmhGO0FBQUU7VUFBQ29oRjtZQUFlLE9BQU9oQyxPQUFNcC9FLEdBQUVXLEdBQUV3QixHQUFFYjtjQUFLO2dCQUFJLE9BQU1tQixHQUFFQyxHQUFFQyxXQUFTc2MsRUFBRW9pRSxrQkFBa0JyaEYsR0FBRVcsR0FBRVUsS0FBS3kvRTtnQkFBYSxPQUFPcCtFLFdBQVN1YyxFQUFFcWlFLG1CQUFtQjMrRSxJQUFHckIsRUFBRW1CLE1BQUlOLEdBQUUsTUFBQ2k5RTtrQkFBVTswQkFBVW5nRSxFQUFFcWlFLG1CQUFtQjMrRTtBQUF1QixvQkFBcEIsT0FBTWhDO29CQUFHLE9BQU9YLEVBQUVXO0FBQUU7a0JBQUMsT0FBT1g7QUFBSTtBQUF1QixnQkFBcEIsT0FBTUE7Z0JBQUcsT0FBT3NCLEVBQUV0QjtBQUFFO0FBQUE7QUFBRTtVQUFDby9FLG1CQUFtQnAvRSxHQUFFVztZQUFHO2NBQUksTUFBTXdCLFVBQVExQyxRQUFRNG5ELElBQUlybkQsRUFBRWdGLElBQUkzRCxLQUFLOC9FLGVBQWU5eEQsS0FBS2h1QjtjQUFRLE9BQU9WLElBQUVBLEVBQUUsTUFBS3dCLEtBQUdBO0FBQW1DLGNBQWpDLE9BQU1uQztjQUFHLElBQUdXLEdBQUUsT0FBT0EsRUFBRVg7Y0FBRyxNQUFNQTtBQUFDO0FBQUM7VUFBQ21oRixlQUFlbmhGO1lBQUcsT0FBTyxJQUFJUCxTQUFTa0I7Y0FBSVUsS0FBSzYvRSxRQUFRbGhGLElBQUUsQ0FBRUEsR0FBRW1DO2dCQUFLeEIsRUFBRXdCO0FBQUc7QUFBRztBQUFFO1VBQUNpOUUsY0FBY3orRSxHQUFFd0I7WUFBRyxLQUFJeEIsS0FBRzRJLE1BQU1DLFFBQVE3SSxNQUFJLG1CQUFpQkEsR0FBRTtjQUFDLE1BQU1YLElBQUUsSUFBSXNDLEVBQUU7Z0JBQUNzSCxPQUFNO2dCQUFNYixTQUFROztjQUFpQyxPQUFPNUcsRUFBRW5DLEdBQUU7Z0JBQUNpaEMsU0FBRztnQkFBT2l4QyxTQUFRO2dCQUFNdmxFLE9BQU0zTTs7QUFBRztZQUFDLElBQUcsbUJBQWlCVyxFQUFFdzhELFFBQU87Y0FBQyxNQUFNbjlELElBQUUsSUFBSXNDLEVBQUU7Z0JBQUNzSCxPQUFNO2dCQUFNYixTQUFROztjQUEwQixPQUFPNUcsRUFBRW5DLEdBQUU7Z0JBQUNpaEMsSUFBR3RnQyxFQUFFc2dDO2dCQUFHaXhDLFNBQVE7Z0JBQU12bEUsT0FBTTNNOztBQUFHO1lBQUMsTUFBTXNCLElBQUUsU0FBU1g7Y0FBRyxLQUFJLElBQUl3QixJQUFFLEdBQUVBLElBQUUrTixVQUFVdE8sUUFBT08sS0FBSTtnQkFBQyxJQUFJYixJQUFFLFFBQU00TyxVQUFVL04sS0FBRytOLFVBQVUvTixLQUFHLENBQUM7Z0JBQUVBLElBQUUsSUFBRTZjLEVBQUV6YixPQUFPakMsS0FBRyxHQUFJcUksU0FBUSxTQUFVeEg7a0JBQUduQyxFQUFFVyxHQUFFd0IsR0FBRWIsRUFBRWE7QUFBSSxzQkFBR29CLE9BQU9zM0QsNEJBQTBCdDNELE9BQU9vNUMsaUJBQWlCaDhDLEdBQUU0QyxPQUFPczNELDBCQUEwQnY1RCxNQUFJMGQsRUFBRXpiLE9BQU9qQyxJQUFJcUksU0FBUSxTQUFVM0o7a0JBQUd1RCxPQUFPd0csZUFBZXBKLEdBQUVYLEdBQUV1RCxPQUFPNHVCLHlCQUF5Qjd3QixHQUFFdEI7QUFBSTtBQUFFO2NBQUMsT0FBT1c7QUFBQyxhQUE5VixDQUFnVyxDQUFDLEdBQUVBLElBQUc4QixJQUFFO2NBQUN3K0IsSUFBRzMvQixFQUFFMi9CO2NBQUdpeEMsU0FBUTV3RSxFQUFFNHdFOztZQUFTLElBQUl4dkUsSUFBRTtZQUFLO29CQUFVckIsS0FBS2tnRixnQkFBZ0JqZ0YsR0FBRW1CO0FBQWUsY0FBWixPQUFNekM7Y0FBRzBDLElBQUUxQztBQUFDO1lBQUMsT0FBTzBDLGFBQVdELEVBQUV2QyxRQUFPdUMsRUFBRWtLLFVBQVFsSyxFQUFFa0ssU0FBTSxHQUFHOUIsRUFBRThvQyxJQUFJanhDLE1BQUtQLEVBQUVPLEdBQUVEO0FBQUU7VUFBQzI4RSxzQkFBc0JwL0UsR0FBRVc7WUFBRyxPQUFNd0IsR0FBRWIsR0FBRW1CLFdBQVN3YyxFQUFFb2lFLGtCQUFrQnJoRixHQUFFVyxHQUFFVSxLQUFLeS9FO1lBQWEsSUFBRzdoRSxFQUFFdWlFLG9CQUFvQnhoRixHQUFFVyxHQUFFVyxVQUFTMmQsRUFBRXFpRSxtQkFBbUI3K0UsSUFBR04sR0FBRSxNQUFNQTtBQUFDOztRQUFFLE1BQU1nZCxVQUFVNWYsRUFBRWtsQjtVQUFPMWdCLFlBQVlwRDtZQUFHLEtBQUkrRSxRQUFPdkQsR0FBRTJDLE1BQUt4RCxLQUFHWDtZQUFFZ0ksTUFBTTtjQUFDK2IsYUFBVztnQkFBSzFrQixFQUFFcUIsTUFBSyxnQkFBVSxJQUFRckIsRUFBRXFCLE1BQUssY0FBUSxJQUFRQSxLQUFLMDBFLFVBQVE1ekUsR0FBRWQsS0FBSzYrRSxRQUFNNStFO0FBQUM7VUFBQzJqQixTQUFRO1VBQUNELE9BQU9obEIsR0FBRVcsR0FBRXdCO1lBQUdkLEtBQUswMEUsUUFBUWwwRSxLQUFLO2NBQUNpRCxNQUFLekQsS0FBSzYrRTtjQUFNdDVFLE1BQUs1RztnQkFBSW1DO0FBQUc7O1FBQUUsU0FBU2lkLEVBQUVwZixHQUFFVztVQUFHLElBQUl3QixJQUFFb0IsT0FBTzhQLEtBQUtyVDtVQUFHLElBQUd1RCxPQUFPMnVCLHVCQUFzQjtZQUFDLElBQUk1d0IsSUFBRWlDLE9BQU8ydUIsc0JBQXNCbHlCO1lBQUdXLE1BQUlXLElBQUVBLEVBQUVvb0IsUUFBTyxTQUFVL29CO2NBQUcsT0FBTzRDLE9BQU80dUIseUJBQXlCbnlCLEdBQUVXLEdBQUdxSjtBQUFXLGtCQUFJN0gsRUFBRU4sS0FBS3ZCLE1BQU02QixHQUFFYjtBQUFFO1VBQUMsT0FBT2E7QUFBQztRQUFDLFNBQVNrZCxFQUFFMWU7VUFBRyxLQUFJLElBQUl3QixJQUFFLEdBQUVBLElBQUUrTixVQUFVdE8sUUFBT08sS0FBSTtZQUFDLElBQUliLElBQUUsUUFBTTRPLFVBQVUvTixLQUFHK04sVUFBVS9OLEtBQUcsQ0FBQztZQUFFQSxJQUFFLElBQUVpZCxFQUFFN2IsT0FBT2pDLEtBQUcsR0FBSXFJLFNBQVEsU0FBVXhIO2NBQUduQyxFQUFFVyxHQUFFd0IsR0FBRWIsRUFBRWE7QUFBSSxrQkFBR29CLE9BQU9zM0QsNEJBQTBCdDNELE9BQU9vNUMsaUJBQWlCaDhDLEdBQUU0QyxPQUFPczNELDBCQUEwQnY1RCxNQUFJOGQsRUFBRTdiLE9BQU9qQyxJQUFJcUksU0FBUSxTQUFVM0o7Y0FBR3VELE9BQU93RyxlQUFlcEosR0FBRVgsR0FBRXVELE9BQU80dUIseUJBQXlCN3dCLEdBQUV0QjtBQUFJO0FBQUU7VUFBQyxPQUFPVztBQUFDO1FBQUMsTUFBTTZlLElBQUVyZSxPQUFPO1FBQW9CLE1BQU1zZSxVQUFXbGdCLEVBQUVrbEI7VUFBTzFnQjtZQUFjNEUsTUFBTTBXLEVBQUVBLEVBQUUsQ0FBQyxHQUFFblAsVUFBVXRPLFNBQU8sVUFBRyxNQUFTc08sVUFBVSxLQUFHQSxVQUFVLEtBQUcsQ0FBQyxJQUFHLENBQUMsR0FBRTtjQUFDd1UsYUFBVztpQkFBTTFrQixFQUFFcUIsTUFBSyxvQkFBYyxJQUFRckIsRUFBRXFCLE1BQUssa0JBQVksSUFBUUEsS0FBS29nRixjQUFZLENBQUM7QUFBQztVQUFDQyxhQUFhMWhGO1lBQUcsS0FBSUEsR0FBRSxNQUFNLElBQUk4SixNQUFNO1lBQTRDLElBQUd6SSxLQUFLb2dGLFlBQVl6aEYsSUFBRyxNQUFNLElBQUk4SixNQUFNLHlDQUF5QzZLLE9BQU8zVSxHQUFFO1lBQXFCLE1BQU1XLElBQUUsSUFBSXdlLEVBQUU7Y0FBQ3paLFFBQU9yRTtjQUFLeUQsTUFBSzlFOztZQUFJLE9BQU9xQixLQUFLb2dGLFlBQVl6aEYsS0FBR1csR0FBRSxTQUFTWCxHQUFFbUM7Y0FBRyxNQUFNYixJQUFFdUssS0FBSzdMLEtBQUdXLEVBQUVpMEQsUUFBUTUwRCxVQUFHO2NBQVUyTCxJQUFJM0wsR0FBRTtnQkFBQ3d4QyxXQUFTO2lCQUFJbHdDLElBQUdxSyxJQUFJM0wsR0FBRTtnQkFBQ2dULFdBQVM7aUJBQUkxUjtBQUFFLGFBQWxHLENBQW9HRCxPQUFNVjtBQUFDO1VBQUNnaEYsYUFBYTNoRjtZQUFHLEtBQUlBLEdBQUUsTUFBTSxJQUFJOEosTUFBTTtZQUE0QyxJQUFHekksS0FBS29nRixZQUFZemhGLElBQUcsTUFBTSxJQUFJOEosTUFBTSx5Q0FBeUM2SyxPQUFPM1UsR0FBRTtZQUFxQnFCLEtBQUtvZ0YsWUFBWXpoRixLQUFHd2Y7QUFBQztVQUFDeUYsU0FBUTtVQUFDRCxPQUFPaGxCLEdBQUVXLEdBQUV3QjtZQUFHLE9BQU0yQyxNQUFLeEQsR0FBRXNGLE1BQUtuRSxLQUFHekM7WUFBRSxLQUFJc0IsR0FBRSxPQUFPeVQsT0FBTzdCLFFBQVEvQyxLQUFLLG1EQUFtRHdFLE9BQU8zVSxHQUFFLE9BQU1tQztZQUFJLE1BQU1PLElBQUVyQixLQUFLb2dGLFlBQVluZ0Y7WUFBRyxPQUFPb0IsS0FBR0EsTUFBSThjLEtBQUc5YyxFQUFFYixLQUFLWSxJQUFHTixRQUFNNFMsT0FBTzdCLFFBQVEvQyxLQUFLLCtDQUErQ3dFLE9BQU9yVCxHQUFFO1lBQU1hO0FBQUk7O1FBQUUsSUFBSXVkLEtBQUd2ZCxFQUFFLE9BQU0wZCxLQUFHMWQsRUFBRSxPQUFNcWUsS0FBR3JlLEVBQUViLEVBQUV1ZSxLQUFJZ0IsS0FBRzFlLEVBQUUsT0FBTTJlLEtBQUczZSxFQUFFLE9BQU00ZSxLQUFHNWUsRUFBRWIsRUFBRXdmLEtBQUlFLEtBQUc3ZSxFQUFFLE1BQU15akI7UUFBTyxNQUFNdEUsS0FBR2hlLElBQUlxcUQsVUFBVTtRQUFZcnNDLEdBQUdvc0M7UUFBYSxNQUFNbHNDLFdBQVcxWDtVQUFNL0YsWUFBWXBEO1lBQUcsS0FBSXNELFFBQU85QixHQUFFeS9FLFdBQVV0Z0YsR0FBRXVnRixXQUFVcC9FLEtBQUc5QjtZQUFFZ0ksTUFBTSx1Q0FBc0MzSSxFQUFFcUIsTUFBSyxlQUFTLElBQVFyQixFQUFFcUIsTUFBSyxrQkFBWSxJQUFRckIsRUFBRXFCLE1BQUssa0JBQVk7WUFBUUEsS0FBSzRDLFNBQU85QixHQUFFZCxLQUFLdWdGLFlBQVV0Z0YsR0FBRUQsS0FBS3dnRixZQUFVcC9FO0FBQUM7O1FBQUUsTUFBTXdSLEtBQUcsQ0FBQ2pVLEdBQUVXLE1BQUksSUFBSWxCLFNBQVEsQ0FBRTBDLEdBQUViO1VBQUssSUFBSW1CLElBQUU7VUFBRSxNQUFNQyxJQUFFO1lBQUNvL0UsV0FBUzthQUFJbi9FLElBQUUsSUFBSTRHLE1BQU12SixFQUFFNEIsUUFBUTJULFVBQUssSUFBUTFTLElBQUUsSUFBSTBHLE1BQU12SixFQUFFNEIsUUFBUTJULFVBQUs7VUFBUSxJQUFJelM7VUFBRSxPQUFPOUMsRUFBRTJKLFNBQVEsQ0FBRWxKLEdBQUV5QyxNQUFJekMsRUFBRUosTUFBTUw7WUFBSTZDLEVBQUVLLEtBQUdsRDtBQUFFLGNBQUdnd0IsT0FBT2h3QjtZQUFJMkMsRUFBRU8sS0FBR2xEO0FBQUUsY0FBRytoRixTQUFRO1lBQU0sS0FBSXIvRSxFQUFFby9FLFVBQVMsT0FBT25oRixFQUFFa0MsRUFBRXVFLE1BQU0sSUFBRzFFLEdBQUdyQyxNQUFNTDtjQUFJMEMsRUFBRW8vRSxZQUFTLEdBQUczL0UsRUFBRW5DO0FBQUcsZ0JBQUdnd0IsT0FBT2h3QjtjQUFJOEMsSUFBRTlDO0FBQUUsZ0JBQUcraEYsU0FBUTtjQUFNLElBQUd0L0UsS0FBRyxHQUFFQSxNQUFJekMsRUFBRTRCLFFBQU87Z0JBQUMsTUFBTTVCLElBQUV1RCxPQUFPd0ssT0FBT2xMLEVBQUVnSCxRQUFPLENBQUU3SixHQUFFVztrQkFBSyxJQUFHQSxHQUFFO29CQUFDLElBQUl3QjtvQkFBRSxPQUFNOCtCLElBQUd4K0IsR0FBRWtLLE9BQU1qSyxLQUFHL0I7cUJBQUcsUUFBTStCLEtBQUcsVUFBUVAsSUFBRU8sRUFBRWtFLGNBQU8sTUFBU3pFLFNBQUUsSUFBT0EsRUFBRVAsVUFBUSxNQUFJYyxFQUFFa0UsS0FBSzRpRSxXQUFXLDJDQUF5Q3hwRSxFQUFFeUMsTUFBSW5CLElBQUVvQixFQUFFa0UsTUFBTW03QyxPQUFPLEdBQUc1ekMsZ0JBQWM3TSxFQUFFOEYsTUFBTSxLQUFHcEgsRUFBRXlDLEtBQUdDLEVBQUVrRTtBQUFLO2tCQUFDLElBQUl0RjtrQkFBRSxPQUFPdEI7QUFBRSxvQkFBRSxDQUFDO2dCQUFJLElBQUdBLEVBQUU0QixTQUFPLEdBQUU7a0JBQUMsTUFBTWpCLElBQUVYLEVBQUU0QixTQUFPLElBQUUsS0FBSzVCLEVBQUVnRixLQUFLaEYsS0FBRyxLQUFLQSxNQUFNcUYsS0FBSyxVQUFRckYsRUFBRTtrQkFBR3NCLEVBQUUsSUFBSXdJLE1BQU1uSjtBQUFHLHVCQUFLO2tCQUFDLElBQUlBO2tCQUFFVyxFQUFFLElBQUlrZ0IsR0FBRztvQkFBQ3ZkLFFBQU90QjtvQkFBRWkvRSxXQUFVLytFO29CQUFFZy9FLFlBQVcsVUFBUWxoRixJQUFFbUMsV0FBSSxNQUFTbkMsU0FBRSxJQUFPQSxFQUFFb0ksWUFBVWpHOztBQUFJO0FBQUM7QUFBRTtBQUFHO0FBQUs7UUFBRyxTQUFTMmUsR0FBR3poQixHQUFFVztVQUFHLElBQUl3QixJQUFFb0IsT0FBTzhQLEtBQUtyVDtVQUFHLElBQUd1RCxPQUFPMnVCLHVCQUFzQjtZQUFDLElBQUk1d0IsSUFBRWlDLE9BQU8ydUIsc0JBQXNCbHlCO1lBQUdXLE1BQUlXLElBQUVBLEVBQUVvb0IsUUFBTyxTQUFVL29CO2NBQUcsT0FBTzRDLE9BQU80dUIseUJBQXlCbnlCLEdBQUVXLEdBQUdxSjtBQUFXLGtCQUFJN0gsRUFBRU4sS0FBS3ZCLE1BQU02QixHQUFFYjtBQUFFO1VBQUMsT0FBT2E7QUFBQztRQUFDLFNBQVN1ZixHQUFHL2dCO1VBQUcsS0FBSSxJQUFJd0IsSUFBRSxHQUFFQSxJQUFFK04sVUFBVXRPLFFBQU9PLEtBQUk7WUFBQyxJQUFJYixJQUFFLFFBQU00TyxVQUFVL04sS0FBRytOLFVBQVUvTixLQUFHLENBQUM7WUFBRUEsSUFBRSxJQUFFc2YsR0FBR2xlLE9BQU9qQyxLQUFHLEdBQUlxSSxTQUFRLFNBQVV4SDtjQUFHbkMsRUFBRVcsR0FBRXdCLEdBQUViLEVBQUVhO0FBQUksa0JBQUdvQixPQUFPczNELDRCQUEwQnQzRCxPQUFPbzVDLGlCQUFpQmg4QyxHQUFFNEMsT0FBT3MzRCwwQkFBMEJ2NUQsTUFBSW1nQixHQUFHbGUsT0FBT2pDLElBQUlxSSxTQUFRLFNBQVUzSjtjQUFHdUQsT0FBT3dHLGVBQWVwSixHQUFFWCxHQUFFdUQsT0FBTzR1Qix5QkFBeUI3d0IsR0FBRXRCO0FBQUk7QUFBRTtVQUFDLE9BQU9XO0FBQUM7UUFBQyxNQUFNbWhCLFdBQVdoWTtRQUFPLE1BQU1tWSxLQUFHLENBQUNqaUIsR0FBRVc7VUFBSyxJQUFJd0IsSUFBRW5DO1VBQUUsSUFBRyxtQkFBaUJtQyxNQUFJQSxJQUFFb0gsTUFBTWhDLEtBQUs7WUFBQzNGLFFBQU9PO2NBQUcsQ0FBRW5DLEdBQUVXLE1BQUlBLE1BQUtBLElBQUV3QixFQUFFUCxVQUFRakIsS0FBRyxHQUFFLE9BQU07VUFBRyxJQUFHQSxNQUFJd0IsRUFBRVAsUUFBTyxPQUFNLEVBQUNPO1VBQUcsSUFBRyxNQUFJeEIsR0FBRSxPQUFPd0IsRUFBRTBILFFBQU8sQ0FBRTdKLEdBQUVXLE1BQUksS0FBSVgsR0FBRSxFQUFDVyxRQUFLO1VBQUksTUFBTVcsSUFBRTtVQUFHLElBQUltQixJQUFFO1VBQUcsS0FBSSxJQUFJekMsSUFBRSxHQUFFQSxLQUFHbUMsRUFBRVAsU0FBT2pCLElBQUUsR0FBRVgsS0FBRyxHQUFFO1lBQUN5QyxJQUFFd2YsR0FBRzlmLEVBQUVpRixNQUFNcEgsSUFBRSxJQUFHVyxJQUFFO1lBQUcsS0FBSSxJQUFJQSxJQUFFLEdBQUVBLElBQUU4QixFQUFFYixRQUFPakIsS0FBRyxHQUFFVyxFQUFFTyxLQUFLLEVBQUNNLEVBQUVuQyxPQUFNeUMsRUFBRTlCO0FBQUk7VUFBQyxPQUFPVztBQUFBQSxXQUFHK1MsS0FBRyxDQUFDclUsR0FBRVc7VUFBSyxNQUFNd0IsSUFBRSxDQUFDO1VBQUUsS0FBSSxJQUFJYixJQUFFLEdBQUVBLElBQUV0QixFQUFFNEIsUUFBT04sS0FBRyxHQUFFO1lBQUMsTUFBTW1CLElBQUVzZSxLQUFLL2dCLEVBQUVzQjtZQUFJLElBQUdhLEVBQUVNLEtBQUdOLEVBQUVNLEtBQUdOLEVBQUVNLEtBQUcsSUFBRSxHQUFFTixFQUFFTSxPQUFLOUIsR0FBRSxPQUFPWCxFQUFFc0I7QUFBRTtBQUFBLFdBQUdrVCxLQUFHNHFFLE9BQU1wL0UsR0FBRVcsR0FBRXdCO1VBQUssTUFBTWIsSUFBRXRCLEVBQUVnRixLQUFLaEYsS0FBR3FKLEVBQUVySixHQUFFc0osRUFBRSx5QkFBd0I7WUFBQysxRSxVQUFTMStFO1lBQUVxaEYsYUFBWTcvRSxFQUFFNE47Y0FBY2lnQixPQUFPaHdCLEtBQUdzaEIsR0FBRzNVLE1BQU0seUJBQXdCM007VUFBTyxPQUFPaVUsR0FBRzNTLElBQUdYO1lBQUksTUFBTXdCLElBQUV4QixFQUFFK29CLFFBQVExcEIsS0FBR0EsS0FBSXNCLElBQUUrUyxHQUFHbFMsRUFBRTZDLEtBQUtoRixLQUFHQSxLQUFHQSxFQUFFMk0sU0FBUSxPQUFLM00sRUFBRTRCLFNBQU8sS0FBSWEsSUFBRTRSLEdBQUdsUyxFQUFFNkMsS0FBS2hGLEtBQUdBLEtBQUdBLEVBQUVFLFVBQVMsT0FBS0YsRUFBRTRCLFNBQU87WUFBSSxPQUFPYSxLQUFHbkIsSUFBRTdCLFFBQVFDLFFBQVE7Y0FBQ3VpRixXQUFVeC9FO2NBQUV5L0UsYUFBWTVnRjtpQkFBSTdCLFFBQVFFLE9BQU8sSUFBSW1LLE1BQU0sbUJBQW1CN0UsS0FBS0UsVUFBVXhFO0FBQU87QUFBQyxXQUFHMmhCLEtBQUcsQ0FBQ3RpQixHQUFFVyxHQUFFd0IsR0FBRWIsTUFBSSxJQUFJN0IsU0FBUSxDQUFFZ0QsR0FBRUM7VUFBSzhpQixZQUFXO1lBQU1oUixHQUFHeFUsR0FBRVcsR0FBRXdCLEdBQUc5QixLQUFLb0MsR0FBR3V0QixNQUFNdHRCO0FBQUcsY0FBRXBCO0FBQUcsYUFBR2loQixLQUFHNjhEO1VBQVUsSUFBSXorRSxHQUFFd0IsSUFBR2dnRixXQUFVN2dGLEdBQUU4Z0YsZUFBYzMvRSxHQUFFNC9FLFdBQVUzL0UsR0FBRTQvRSxZQUFXMy9FLEdBQUUwOEUsVUFBU3g4RSxHQUFFeThFLFlBQVd4OEUsR0FBRXkvRSxZQUFXOWhGLEdBQUUyOUUsU0FBUWw3RSxLQUFHbEQ7VUFBRSxTQUFHLE1BQVMwQyxLQUFHL0IsSUFBRXdILEtBQUtpRyxNQUFNakcsS0FBS3E2RSxXQUFTbGhGLEVBQUVNLFNBQVFPLElBQUV4QixLQUFHQSxJQUFFK0IsSUFBRXBCLEVBQUVNLFFBQU9qQixNQUFJZ0MsR0FBRSxNQUFNLElBQUltSCxNQUFNO2VBQXNCLE1BQVNuSCxNQUFJUixJQUFFUTtVQUFHLE1BQU1QLElBQUVrSCxFQUFFLGFBQVk7WUFBQysxRSxVQUFTeDhFO1lBQUVtL0UsYUFBWWwvRSxFQUFFaU47O1VBQWE7WUFBSSxNQUFNL1AsVUFBUXFKLEVBQUU1SSxHQUFFMkIsR0FBRTtjQUFDZzdELFNBQVE7Z0JBQUNxbEIsU0FBUWhnRixFQUFFOUIsR0FBR3FlO2dCQUFFMGpFLFNBQVFqZ0YsRUFBRTlCLEdBQUdzZTtnQkFBRW0vRCxTQUFRbDdFOztlQUFJO2NBQUMyOEUsWUFBVTs7WUFBSyxhQUFheDJFLEVBQUUvSCxFQUFFWCxJQUFHK2dCLEdBQUdBLEdBQUcsQ0FBQyxHQUFFdGYsSUFBR3BDLElBQUc7Y0FBQ285RCxTQUFRO2dCQUFDLGdCQUFlOzs7QUFBaWYsWUFBNWMsT0FBTXA5RDtZQUFHLElBQUdzaEIsR0FBRzNVLE1BQU0zTSxJQUFHLEVBQUMsYUFBWSw4QkFBNkIsd0JBQXVCLCtEQUE4RG1qQyxTQUFTbmpDLEVBQUUrSSxVQUFTLE9BQU93WixHQUFHO2NBQUM0L0QsV0FBVTdnRjtjQUFFOGdGLGVBQWMzL0U7Y0FBRTQvRSxXQUFVMWhGLElBQUU7Y0FBRTJoRixZQUFXbmdGO2NBQUVrOUUsVUFBU3g4RTtjQUFFeThFLFlBQVd4OEU7Y0FBRXkvRSxZQUFXOWhGO2NBQUUyOUUsU0FBUWw3RTs7WUFBSSxNQUFNLElBQUk0RyxNQUFNLDhJQUE4STlKLEVBQUUrSSxXQUFTO0FBQUs7QUFBQTtRQUFHLFNBQVNvTCxHQUFHblU7VUFBRyxPQUFNLEtBQUt3SyxJQUFJLGFBQWFxVCxPQUFPN2QsR0FBRzhkLFNBQVMvTixTQUFTO0FBQVE7UUFBQyxTQUFTNlMsR0FBRzVpQixHQUFFVztVQUFHLElBQUl3QixJQUFFb0IsT0FBTzhQLEtBQUtyVDtVQUFHLElBQUd1RCxPQUFPMnVCLHVCQUFzQjtZQUFDLElBQUk1d0IsSUFBRWlDLE9BQU8ydUIsc0JBQXNCbHlCO1lBQUdXLE1BQUlXLElBQUVBLEVBQUVvb0IsUUFBTyxTQUFVL29CO2NBQUcsT0FBTzRDLE9BQU80dUIseUJBQXlCbnlCLEdBQUVXLEdBQUdxSjtBQUFXLGtCQUFJN0gsRUFBRU4sS0FBS3ZCLE1BQU02QixHQUFFYjtBQUFFO1VBQUMsT0FBT2E7QUFBQztRQUFDLFNBQVMwZ0IsR0FBR2xpQjtVQUFHLEtBQUksSUFBSXdCLElBQUUsR0FBRUEsSUFBRStOLFVBQVV0TyxRQUFPTyxLQUFJO1lBQUMsSUFBSWIsSUFBRSxRQUFNNE8sVUFBVS9OLEtBQUcrTixVQUFVL04sS0FBRyxDQUFDO1lBQUVBLElBQUUsSUFBRXlnQixHQUFHcmYsT0FBT2pDLEtBQUcsR0FBSXFJLFNBQVEsU0FBVXhIO2NBQUduQyxFQUFFVyxHQUFFd0IsR0FBRWIsRUFBRWE7QUFBSSxrQkFBR29CLE9BQU9zM0QsNEJBQTBCdDNELE9BQU9vNUMsaUJBQWlCaDhDLEdBQUU0QyxPQUFPczNELDBCQUEwQnY1RCxNQUFJc2hCLEdBQUdyZixPQUFPakMsSUFBSXFJLFNBQVEsU0FBVTNKO2NBQUd1RCxPQUFPd0csZUFBZXBKLEdBQUVYLEdBQUV1RCxPQUFPNHVCLHlCQUF5Qjd3QixHQUFFdEI7QUFBSTtBQUFFO1VBQUMsT0FBT1c7QUFBQztRQUFDLE1BQU1zaUI7VUFBR2xmO1lBQWMsS0FBSTQrRSxjQUFhaGlGLEtBQUUsR0FBR2lpRixjQUFhemdGLElBQUUsMkJBQTBCMGdGLFdBQVV2aEYsSUFBRSxtQ0FBa0NpaEYsWUFBVzkvRSxJQUFFLGtDQUFpQ3FnRixrQkFBaUJwZ0YsSUFBRSxHQUFFMDdFLFNBQVF6N0UsSUFBRSxhQUFXdU4sVUFBVXRPLFNBQU8sVUFBRyxNQUFTc08sVUFBVSxLQUFHQSxVQUFVLEtBQUcsQ0FBQztZQUFFbFEsRUFBRXFCLE1BQUsscUJBQWUsSUFBUXJCLEVBQUVxQixNQUFLLGtCQUFZLElBQVFyQixFQUFFcUIsTUFBSyx5QkFBbUIsSUFBUXJCLEVBQUVxQixNQUFLLHFCQUFlO1lBQVFyQixFQUFFcUIsTUFBSyxtQkFBYSxJQUFRckIsRUFBRXFCLE1BQUssZ0JBQVUsSUFBUXJCLEVBQUVxQixNQUFLLFdBQUssSUFBUUEsS0FBSzRjLEtBQUcsSUFBSTRDLEdBQUc1QyxHQUFHLGNBQWE1YyxLQUFLdWhGLGVBQWF6Z0Y7WUFBRWQsS0FBS3doRixZQUFVdmhGLEdBQUVELEtBQUtzaEYsZUFBYWhpRixHQUFFVSxLQUFLeWhGLG1CQUFpQnBnRixLQUFHLEdBQUVyQixLQUFLa2hGLGFBQVc5L0UsR0FBRXBCLEtBQUsrOEUsVUFBUXo3RTtBQUFDO1VBQUMyQztZQUF1QjRLLFVBQVV0TyxTQUFPLFVBQUcsTUFBU3NPLFVBQVUsT0FBS0EsVUFBVSxLQUFHb1IsR0FBR29zQyxlQUFhcHNDLEdBQUdtc0M7QUFBVztVQUFDbm9ELGlCQUFpQnRGO1lBQUd1QixFQUFFdkI7QUFBRTtVQUFDc0Ysb0JBQW9CdEY7YUFBN3RiLFNBQVdBO2NBQUdZLElBQUVaO0FBQUMsYUFBK3NibUcsQ0FBRW5HO0FBQUU7VUFBQ3NGLDRCQUE0QnRGO1lBQUcsT0FBT0EsYUFBYThoQjtBQUFFO1VBQUNzOUQsNEJBQTRCcC9FLEdBQUVXLEdBQUV3QjtZQUFHLEtBQUlrOUUsVUFBUy85RSxHQUFFZytFLFlBQVc3OEUsS0FBR04sR0FBRU8sSUFBRXdOLFVBQVV0TyxTQUFPLFVBQUcsTUFBU3NPLFVBQVUsTUFBSUEsVUFBVTtZQUFHLE9BQU0reEUsV0FBVXQvRSxHQUFFdS9FLGFBQVlyL0UsV0FBUzJSLEdBQUd4VSxHQUFFc0IsR0FBRW1CLE1BQUksQ0FBQztZQUFFLElBQUlLLEdBQUVyQyxLQUFFO1lBQUcsSUFBR29DLEtBQUdvQyxLQUFLRSxVQUFVdEMsR0FBR3NnQyxTQUFTLG9EQUFtRDtjQUFDLEtBQUl6Z0MsR0FBRSxNQUFNLElBQUlvSCxNQUFNO29CQUF5RHlZLEdBQUc7Z0JBQUM0L0QsV0FBVW5pRjtnQkFBRW9pRixlQUFjemhGO2dCQUFFMGhGLGdCQUFVO2dCQUFPQyxpQkFBVztnQkFBT2pELFVBQVMvOUU7Z0JBQUVnK0UsWUFBVzc4RTtnQkFBRTgvRSxZQUFXbGhGLEtBQUtraEY7Z0JBQVduRSxTQUFRLzhFLEtBQUsrOEU7O2NBQVUsTUFBTWo4RSxVQUFRbWdCLEdBQUd0aUIsR0FBRXNCLEdBQUVtQixHQUFFO2NBQUtLLElBQUUsUUFBTVgsU0FBRSxJQUFPQSxFQUFFOC9FLFdBQVV4aEYsS0FBRTtBQUFFLG1CQUFLO2NBQUMsS0FBSWtDLEdBQUUsTUFBTSxJQUFJbUgsTUFBTSw2Q0FBNkM3RSxLQUFLRSxVQUFVeEMsS0FBRyxDQUFDLE9BQU9zQyxLQUFLRSxVQUFVdEMsS0FBRyxDQUFDO2NBQU1DLElBQUVIO0FBQUM7WUFBQyxJQUFHRyxHQUFFO2NBQUMsT0FBTWlnRixXQUFVL2lGLEdBQUVnakYsV0FBVXJpRixLQUFHbUMsRUFBRXVRLEtBQUs7Y0FBRyxJQUFJbFIsR0FBRWIsR0FBRW1CO2NBQUU7Z0JBQUlOLFVBQVFkLEtBQUs0aEYsY0FBY2pqRixHQUFFVyxRQUFFLElBQVFGLElBQUdhLElBQUUsS0FBSWtmLEtBQUosQ0FBVXJlLEVBQUVtYixTQUFPLEtBQUk7QUFBc0IsZ0JBQWxCO2dCQUFNLE1BQU0sSUFBSXdFO0FBQUU7Y0FBQyxJQUFHLFNBQU8zZixFQUFFK2dGLFlBQVd6Z0YsSUFBRXBCLEtBQUs0YyxHQUFHK0IsY0FBYztnQkFBQzNXLEdBQUVySjtnQkFBRVUsR0FBRUM7aUJBQUkrZCxZQUFZdlQsSUFBSTlKLEtBQUs0YyxHQUFHOEIsZUFBZXplLEVBQUV5TyxTQUFTLEtBQUsyTyxtQkFBaUI7Z0JBQUMsSUFBRyxTQUFPdmMsRUFBRStnRixZQUFXLE1BQU0sSUFBSXA1RSxNQUFNO2dCQUFrRHJILElBQUVwQixLQUFLNGMsR0FBRytCLGNBQWM7a0JBQUMzVyxHQUFFcko7a0JBQUVVLEdBQUVDO21CQUFJK2QsWUFBWXZULElBQUk5SixLQUFLNGMsR0FBRytCLGNBQWM7a0JBQUMzVyxHQUFFbEgsRUFBRWdoRixTQUFTOTVFO2tCQUFFM0ksR0FBRXlCLEVBQUVnaEYsU0FBU3ppRjttQkFBSWdlO0FBQVk7Y0FBQyxNQUFNaGMsSUFBRUQsRUFBRWtXLE9BQU81SSxTQUFTLEtBQUlwTixJQUFFRixFQUFFbVcsT0FBTzdJLFNBQVMsS0FBSWxOLElBQUV4QixLQUFLK2hGLDBCQUEwQjNnRixFQUFFa1csUUFBT2xXLEVBQUVtVztjQUFRLElBQUcsU0FBT3pXLEVBQUUrZ0YsWUFBVyxPQUFNO2dCQUFDQSxZQUFXL2dGLEVBQUUrZ0Y7Z0JBQVc1bEUsT0FBTWhjO2dCQUFFMGQsR0FBRXRjO2dCQUFFdWMsR0FBRXRjO2dCQUFFNmYsU0FBUTNmOztjQUFHLElBQUcsU0FBT1YsRUFBRStnRixZQUFXLE9BQU07Z0JBQUNBLFlBQVcvZ0YsRUFBRStnRjtnQkFBVzVsRSxPQUFNaGM7Z0JBQUU2aEYsVUFBU2hoRixFQUFFZ2hGO2dCQUFTRSxVQUFTbGhGLEVBQUVraEY7Z0JBQVNya0UsR0FBRXRjO2dCQUFFdWMsR0FBRXRjO2dCQUFFNmYsU0FBUTNmOztBQUFFO1lBQUMsTUFBTSxJQUFJaUgsTUFBTSw2Q0FBNkM3RSxLQUFLRSxVQUFVeEMsS0FBRyxDQUFDLE9BQU9zQyxLQUFLRSxVQUFVdEMsS0FBRyxDQUFDO0FBQUs7VUFBQ3U4RSxtQkFBbUJwL0U7WUFBRyxJQUFJVyxJQUFHMmlGLFlBQVduaEYsR0FBRW9oRixlQUFjamlGLEdBQUVraUYsYUFBWS9nRixHQUFFZ2hGLGNBQWEvZ0YsS0FBRzFDO1lBQUVXLElBQUU4QixJQUFFLEtBQUkrZCxLQUFKLENBQVUvZCxHQUFFLE1BQUksS0FBSStkLEtBQUosQ0FBVXJlLEdBQUUsSUFBSTBNLElBQUl2TixHQUFHMk4sS0FBSzVOLEtBQUs0YyxHQUFHL0csTUFBTTVWO1lBQUcsTUFBTXFCLElBQUUsS0FBSTZkLEtBQUosQ0FBVTlkLEdBQUUsSUFBSW1NLElBQUlsTyxHQUFHc08sS0FBSzVOLEtBQUs0YyxHQUFHL0csTUFBTTVWLElBQUd1QixJQUFFeEIsS0FBS3FpRix1QkFBdUIvZ0YsRUFBRW9OLFNBQVMsS0FBSXBQO2tCQUFTVSxLQUFLc2lGLFlBQVk5Z0Y7QUFBRTtVQUFDdThFLHFCQUFxQnAvRSxHQUFFVyxHQUFFd0IsR0FBRWIsR0FBRW1CO1lBQUcsSUFBSUMsSUFBRXdOLFVBQVV0TyxTQUFPLFVBQUcsTUFBU3NPLFVBQVUsS0FBR0EsVUFBVSxLQUFHLENBQUM7WUFBRSxNQUFNdk4sSUFBRTtrQkFBU3dHLEVBQUU5SCxLQUFLd2hGLFdBQVU7Y0FBQ3psQixTQUFRO2dCQUFDaWlCLFVBQVNsOUU7Z0JBQUU2L0UsYUFBWTFnRixFQUFFMGdGO2dCQUFZNUQsU0FBUS84RSxLQUFLKzhFOztlQUFVO2NBQUN5QixZQUFVOztZQUFLLE1BQU1oOUUsS0FBRSxHQUFHNmMsR0FBR2lILE9BQU03akIsS0FBRSxHQUFHNGMsR0FBR2tILElBQUkvakIsR0FBR2tOLFNBQVMsUUFBT3RQLElBQUVxQyxFQUFFc0UsTUFBTSxHQUFFLEtBQUlsRSxJQUFFSixFQUFFc0UsTUFBTSxLQUFJaEYsSUFBRStSLEdBQUcxUjtZQUFHLEtBQUksSUFBSTlCLElBQUUsR0FBRUEsSUFBRVgsRUFBRTRCLFFBQU9qQixLQUFHLEdBQUU7Y0FBQyxNQUFNVyxJQUFFK0gsRUFBRXJKLEVBQUVXLElBQUcySSxFQUFFLHFCQUFvQjtnQkFBQ3M2RSxlQUFjO2dCQUFRQyxpQkFBZ0J6aEYsRUFBRWdGLE1BQU07Z0JBQUcwOEUsVUFBU3JqRjtnQkFBRXNqRixVQUFTN2dGO2dCQUFFOGdGLG9CQUFtQjdoRjtrQkFBSzZ0QixPQUFPaHdCO2dCQUFJc2hCLEdBQUczVSxNQUFNLGNBQWEzTTtBQUFHO2NBQUcyQyxFQUFFZCxLQUFLUDtBQUFFO1lBQUMsT0FBTzJTLEdBQUd0UixJQUFHaEMsS0FBR0EsRUFBRStvQixRQUFRMXBCLFFBQU1BLEtBQUcsbUJBQWlCQSxLQUFHQSxFQUFFMk0sU0FBUy9LLFVBQVEsT0FBSzVCLEVBQUU0QixTQUFPLEtBQUcsSUFBRW5DLFFBQVFDLFFBQVFpQixLQUFHbEIsUUFBUUUsT0FBTyxJQUFJbUssTUFBTSxXQUFXN0UsS0FBS0UsVUFBVXhFLFNBQVNOLE1BQU1zQztjQUFJLE1BQU1HLElBQUUsSUFBR3JDLElBQUU7Y0FBRyxLQUFJLElBQUlULElBQUUsR0FBRUEsSUFBRTJDLEVBQUVmLFFBQU81QixLQUFHLEdBQUUyQyxFQUFFM0MsTUFBSVMsRUFBRW9CLEtBQUtjLEVBQUUzQyxHQUFHRTtjQUFRLEtBQUksSUFBSVMsSUFBRSxHQUFFQSxJQUFFWCxFQUFFNEIsUUFBT2pCLEtBQUcsR0FBRTtnQkFBQyxNQUFNZ0MsSUFBRTBHLEVBQUVySixFQUFFVyxJQUFHMkksRUFBRSxnQkFBZTtrQkFBQzI2RSxXQUFVO2tCQUFNQyxNQUFLLEVBQUNyaEUsR0FBR0EsR0FBRyxDQUFDLEdBQUV2aEIsSUFBRyxDQUFDLEdBQUU7b0JBQUM2aUYsU0FBUTFoRjtvQkFBRTJoRixnQkFBZTNqRjtvQkFBRXVqRixvQkFBbUI3aEY7cUJBQUdPO29CQUFPc3RCLE9BQU9od0IsS0FBR3NoQixHQUFHM1UsTUFBTSxhQUFZM007Z0JBQUs4QyxFQUFFakIsS0FBS2M7QUFBRTtjQUFDLE9BQU9zUixHQUFHblIsSUFBRSxPQUFPWCxHQUFFYjtnQkFBSyxNQUFNbUIsSUFBRU4sRUFBRXVuQixRQUFRMXBCLEtBQUdBLEtBQUkwQyxJQUFFMlIsR0FBR2xTLEVBQUU2QyxLQUFLaEYsS0FBR0EsS0FBR0EsRUFBRUUsVUFBUUYsRUFBRUUsT0FBT21ULEtBQUssR0FBR2srQyxhQUFZLE9BQUt2eEQsRUFBRTRCLFNBQU87Z0JBQUksSUFBR2EsRUFBRWIsVUFBUSxPQUFLNUIsRUFBRTRCLFNBQU8sTUFBSWMsR0FBRTtrQkFBQyxNQUFNRCxJQUFFLElBQUdoQyxJQUFFO2tCQUFHLEtBQUksSUFBSVQsSUFBRSxHQUFFQSxJQUFFbUMsRUFBRVAsUUFBTzVCLEtBQUcsR0FBRTtvQkFBQyxJQUFJMkMsR0FBRUc7b0JBQUUsTUFBTXhCLElBQUVhLEVBQUVuQztvQkFBRyxLQUFJLFFBQU1zQixLQUFHLFVBQVFxQixJQUFFckIsRUFBRXBCLGdCQUFTLE1BQVN5QyxLQUFHLFVBQVFHLElBQUVILEVBQUUwUSxjQUFPLE1BQVN2USxTQUFFLElBQU9BLEVBQUVsQixVQUFRLEdBQUU7c0JBQUNOLEVBQUVwQixPQUFPbVQsS0FBS3FQLE1BQUssQ0FBRTFpQixHQUFFVyxNQUFJLEtBQUk2ZixLQUFKLENBQVV4Z0IsRUFBRXFrRixPQUFNLElBQUluc0UsSUFBSSxLQUFJc0ksS0FBSixDQUFVN2YsRUFBRTBqRixPQUFNO3NCQUFPLE1BQU1ya0YsSUFBRXNCLEVBQUVwQixPQUFPbVQsS0FBSztzQkFBRyxJQUFHclQsRUFBRXNrRixVQUFTO3dCQUFDLE1BQU0zakYsSUFBRTswQkFBQ2ttQixnQkFBZTdGLEdBQUd6WixLQUFLdkgsRUFBRXNrRixTQUFTejlELGdCQUFlOzBCQUFPTixJQUFHdkYsR0FBR3paLEtBQUt2SCxFQUFFc2tGLFNBQVMvOUQsSUFBRzswQkFBT1MsS0FBSWhHLEdBQUd6WixLQUFLdkgsRUFBRXNrRixTQUFTdDlELEtBQUk7O3dCQUFRdmtCLEVBQUVaLE1BQUssR0FBRzZkLEdBQUd1QyxJQUFJcGYsR0FBRWdnQixHQUFHQSxHQUFHLENBQUMsR0FBRWxpQixJQUFHLENBQUMsR0FBRTswQkFBQ29tQixZQUFXL0YsR0FBR3paLEtBQUt5WixHQUFHelosS0FBS3ZILEVBQUV1a0YsT0FBTSxVQUFVeDBFLFNBQVMsVUFBVXkwRSxTQUFTLElBQUcsTUFBSzs0QkFBVXgwRCxPQUFPaHdCLEtBQUdzaEIsR0FBRzdQLE1BQU0sb0JBQW1CelI7QUFBSyw2QkFBTXlDLEVBQUVaLEtBQUtwQyxRQUFRQyxRQUFRc2hCLEdBQUd6WixLQUFLdkgsRUFBRXVrRixNQUFNQyxTQUFTLElBQUcsTUFBSztBQUFRLDJCQUFNL2hGLEVBQUVaLEtBQUtwQyxRQUFRQyxhQUFRO29CQUFTZSxFQUFFb0IsS0FBSyxLQUFJMmUsS0FBSixDQUFVN2YsRUFBRVgsSUFBRztBQUFJO2tCQUFDLE1BQU1rRCxVQUFRekQsUUFBUTRuRCxJQUFJNWtEO2tCQUFHLElBQUduQixFQUFFd2dGLFVBQVM7a0JBQU8sTUFBTTEvRSxJQUFFYyxFQUFFMkcsUUFBTyxDQUFFN0osR0FBRVcsR0FBRXdCLE9BQUt4QixLQUFHWCxFQUFFNkIsS0FBSztvQkFBQzRpRixPQUFNaGtGLEVBQUUwQjtvQkFBR3RDLE9BQU0sS0FBSTJnQixLQUFKLENBQVU3ZjtzQkFBS1gsS0FBSSxLQUFJc0QsSUFBRTJlLEdBQUc3ZixFQUFFUixRQUFPLE9BQUs1QixFQUFFNEIsU0FBTztrQkFBSSxJQUFJaUMsSUFBRTtrQkFBSyxLQUFJLElBQUk3RCxJQUFFLEdBQUVBLElBQUVzRCxFQUFFMUIsUUFBTzVCLEtBQUcsR0FBRTtvQkFBQyxNQUFNVyxJQUFFMkMsRUFBRXRELElBQUdtQyxJQUFFQyxFQUFFc25CLFFBQU8sQ0FBRTFwQixHQUFFbUMsTUFBSXhCLEVBQUV3aUMsU0FBU2hoQyxNQUFLYixJQUFFYSxFQUFFNkMsS0FBS2hGLEtBQUdBLEVBQUVILFNBQVE0QyxJQUFFTixFQUFFNkMsS0FBS2hGLEtBQUdBLEVBQUV5a0YsU0FBUTloRixJQUFFdEIsS0FBS3FqRixzQkFBc0JwakYsR0FBRW1CO29CQUFHLEtBQUlFLEdBQUU7b0JBQVMsTUFBTUUsS0FBRSxHQUFHNmMsR0FBR2tILElBQUk1RixHQUFHelosS0FBSzVFLEVBQUVvTixTQUFTLElBQUcsS0FBSSxRQUFRQSxTQUFTLFFBQU9qTixJQUFFRCxFQUFFdUUsTUFBTSxHQUFFLEtBQUkzRyxJQUFFb0MsRUFBRXVFLE1BQU07b0JBQUksSUFBRyxNQUFJLEtBQUlvWixLQUFKLENBQVUxZCxHQUFFLElBQUlvVixJQUFJLEtBQUlzSSxLQUFKLENBQVU5ZCxFQUFFc2MsR0FBRSxRQUFNLE1BQUksS0FBSXdCLEtBQUosQ0FBVS9mLEdBQUUsSUFBSXlYLElBQUksS0FBSXNJLEtBQUosQ0FBVTlkLEVBQUV1YyxHQUFFLE1BQUs7c0JBQUNwYixJQUFFbEI7c0JBQUU7QUFBSztBQUFDO2tCQUFDLElBQUcsUUFBTWtCLEdBQUUsTUFBTSxJQUFJaUcsTUFBTTtrQkFBZ0MsT0FBT2pHO0FBQUM7Z0JBQUMsTUFBTSxJQUFJaUcsTUFBTTtBQUFXO0FBQUcsZ0JBQUd6SixNQUFLLE1BQUMrK0U7Y0FBVSxJQUFJeitFLElBQUVYO2NBQUUsS0FBSVcsR0FBRSxNQUFNLElBQUltSixNQUFNO2NBQWdDLE1BQU0zSCxLQUFFLEdBQUd1ZCxHQUFHa0gsSUFBSTVGLEdBQUd6WixLQUFLNUcsRUFBRW9QLFNBQVMsSUFBRyxLQUFJLFFBQVFBLFNBQVMsUUFBT3pPLElBQUVhLEVBQUVpRixNQUFNLEdBQUUsS0FBSTNFLElBQUVOLEVBQUVpRixNQUFNO2NBQUksSUFBSTFFO2NBQUUsSUFBR3JCLEtBQUtzaEYsY0FBYTtnQkFBQyxPQUFNcmxFLE9BQU10ZCxXQUFTcUIsS0FBS3NqRixTQUFTcmpGLEdBQUVtQixHQUFFOUI7Z0JBQUcrQixJQUFFLEtBQUk4ZCxLQUFKLENBQVV4Z0IsS0FBRyxLQUFJO0FBQUcscUJBQU0wQyxVQUFRckIsS0FBS3VqRixZQUFZO2dCQUFDN0IsV0FBVXpoRjtnQkFBRTBoRixXQUFVdmdGOztjQUFJNmUsR0FBRzdQLE1BQU0sNkJBQTRCO2dCQUFDb3pFLFNBQVFsa0YsRUFBRW9QLFNBQVM7Z0JBQUl3ekUsZUFBYzdnRixFQUFFcU4sU0FBUztrQkFBTXBQLElBQUVBLEVBQUV3SyxJQUFJekksR0FBR3VNLEtBQUs1TixLQUFLNGMsR0FBRy9HLE1BQU01VjtjQUFHLE1BQU1xQixJQUFFdEIsS0FBS3lqRiwyQkFBMkJua0Y7Y0FBRyxPQUFPMmdCLEdBQUc3UCxNQUFNLDZCQUE0QjtnQkFBQ3N6RSxZQUFXcGlGO2dCQUFFa2lGLFNBQVFsa0YsRUFBRW9QLFNBQVM7a0JBQU07Z0JBQUNnMUUsWUFBV3BpRjtnQkFBRWtpRixTQUFRbGtGLEVBQUVvUCxTQUFTLE9BQU07Z0JBQUl3ekUsZUFBYzdnRjs7QUFBRztBQUFFO1VBQUMwOEUsa0JBQWtCcC9FO1lBQUcsSUFBSVcsSUFBRXVQLFVBQVV0TyxTQUFPLFVBQUcsTUFBU3NPLFVBQVUsS0FBR0EsVUFBVSxLQUFHLENBQUM7WUFBRTtjQUFJLE1BQU0vTixVQUFRa0gsRUFBRSxHQUFHaEksS0FBS3VoRixvQkFBbUI1aUYsR0FBRVcsR0FBRTtnQkFBQ2svRSxZQUFVOztjQUFLLE9BQU8xOUUsS0FBR0EsRUFBRTRHLFVBQVEsS0FBSXlYLEtBQUosQ0FBVXJlLEVBQUU0RyxTQUFRLE1BQUksS0FBSXlYLEtBQUosQ0FBVTtBQUFnRSxjQUE3RCxPQUFNeGdCO2NBQUcsT0FBT3NoQixHQUFHM1UsTUFBTSxzQkFBcUIzTSxJQUFHLEtBQUl3Z0IsS0FBSixDQUFVO0FBQUU7QUFBQztVQUFDa2pFLHVCQUF1QjFqRixHQUFFVztZQUFHLE1BQU13QixJQUFFZCxLQUFLNGMsR0FBRzhCLGVBQWVwZixFQUFFb1AsU0FBUyxPQUFNLE1BQUt6TyxJQUFFO2NBQUNzRixNQUFLNUc7Y0FBRWtzRSxXQUFVLEtBQUkxckQsS0FBSixJQUFhbmYsS0FBS3loRixtQkFBaUJ4MUQsS0FBS29hLFFBQU0sTUFBTTMzQixTQUFTO2VBQUt0TixJQUFFTixFQUFFMGMsS0FBSzFLLEdBQUc0TSxLQUFLemYsSUFBSThGLE1BQU07WUFBSSxPQUFNO2NBQUMyN0UsV0FBVTVnRixFQUFFdWMsWUFBWS9GLE9BQU81SSxTQUFTO2NBQU9pekUsV0FBVTdnRixFQUFFdWMsWUFBWTlGLE9BQU83SSxTQUFTO2NBQU9pMUUsVUFBUzFqRjtjQUFFeWdDLFdBQVUvZ0IsR0FBR3paLEtBQUs5RSxFQUFFTixFQUFFNE4sU0FBUyxJQUFHLE1BQUl0TixFQUFFRSxFQUFFb04sU0FBUyxJQUFHLE1BQUksS0FBSXlRLEtBQUosQ0FBVSxJQUFJelEsU0FBUyxJQUFHLElBQUcsT0FBT0EsU0FBUzs7QUFBVTtVQUFDcXZFLGtCQUFrQnAvRTtZQUFHLElBQUlXLElBQUV1UCxVQUFVdE8sU0FBTyxVQUFHLE1BQVNzTyxVQUFVLEtBQUdBLFVBQVUsS0FBRyxDQUFDO1lBQUU7Y0FBSSxjQUFhN0csRUFBRSxHQUFHaEksS0FBS3VoRixvQkFBbUI1aUYsR0FBRVcsR0FBRTtnQkFBQ2svRSxZQUFVO2tCQUFNOTJFO0FBQTJELGNBQW5ELE9BQU0vSTtjQUFHLE9BQU9zaEIsR0FBRzNVLE1BQU0sc0JBQXFCM00sSUFBRztBQUFFO0FBQUM7VUFBQzBrRixzQkFBc0Ixa0YsR0FBRVc7WUFBRyxJQUFHWCxFQUFFNEIsV0FBU2pCLEVBQUVpQixRQUFPLE9BQU87WUFBSyxJQUFJTyxJQUFFLEtBQUlxZSxLQUFKLENBQVU7WUFBRyxLQUFJLElBQUlsZixJQUFFLEdBQUVBLElBQUV0QixFQUFFNEIsUUFBT04sS0FBRyxHQUFFO2NBQUMsSUFBSW1CLElBQUUsS0FBSStkLEtBQUosQ0FBVSxJQUFHOWQsSUFBRSxLQUFJOGQsS0FBSixDQUFVO2NBQUcsS0FBSSxJQUFJcmUsSUFBRSxHQUFFQSxJQUFFbkMsRUFBRTRCLFFBQU9PLEtBQUcsR0FBRSxJQUFHYixNQUFJYSxHQUFFO2dCQUFDTSxJQUFFQSxFQUFFNEksSUFBSTFLLEVBQUV3QixHQUFHd1YsUUFBT2xWLElBQUVBLEVBQUV3TSxLQUFLNU4sS0FBSzRjLEdBQUcvRyxNQUFNNVY7Z0JBQUcsSUFBSXRCLElBQUVXLEVBQUVXLEdBQUd1TixJQUFJbE8sRUFBRXdCO2dCQUFJbkMsSUFBRUEsRUFBRWlQLEtBQUs1TixLQUFLNGMsR0FBRy9HLE1BQU01VixJQUFHb0IsSUFBRUEsRUFBRTJJLElBQUlyTCxHQUFHaVAsS0FBSzVOLEtBQUs0YyxHQUFHL0csTUFBTTVWO0FBQUU7Y0FBQyxJQUFJcUIsSUFBRUYsRUFBRTRJLElBQUkzSSxFQUFFMGQsS0FBSy9lLEtBQUs0YyxHQUFHL0csTUFBTTVWLElBQUkyTixLQUFLNU4sS0FBSzRjLEdBQUcvRyxNQUFNNVY7Y0FBR3FCLElBQUVBLEVBQUUwSSxJQUFJckwsRUFBRXNCLElBQUkyTixLQUFLNU4sS0FBSzRjLEdBQUcvRyxNQUFNNVYsSUFBR2EsSUFBRUEsRUFBRWdKLElBQUl4STtBQUFFO1lBQUMsT0FBT1IsRUFBRThNLEtBQUs1TixLQUFLNGMsR0FBRy9HLE1BQU01VjtBQUFFO1VBQUN3akYsMkJBQTJCOWtGO1lBQUcsTUFBTVcsSUFBRVUsS0FBSzRjLEdBQUc4QixlQUFlL2YsRUFBRStQLFNBQVMsT0FBTSxLQUFJLE9BQU8yTyxZQUFZN1YsT0FBTyxRQUFNLEdBQUl6QixNQUFNO1lBQUdrYSxHQUFHM1AsS0FBS2hSLEdBQUU7WUFBYyxNQUFNd0IsSUFBRSxLQUFLZ1MsR0FBRzZNLEdBQUd6WixLQUFLNUcsR0FBRSxRQUFReUcsTUFBTTtZQUFNLFFBQU0sR0FBRzFFLEVBQUVvMUMsbUJBQW1CMzFDO0FBQUU7VUFBQ2loRiwwQkFBMEJwakYsR0FBRVc7WUFBRyxNQUFNd0IsSUFBRWQsS0FBSzRjLEdBQUcrQixjQUFjO2NBQUMzVyxHQUFFckosRUFBRStQLFNBQVMsT0FBTTtjQUFJclAsR0FBRUMsRUFBRW9QLFNBQVMsT0FBTTtnQkFBTXpPLElBQUVhLEVBQUV1YyxZQUFZN1YsT0FBTyxRQUFNLEdBQUl6QixNQUFNO1lBQUdrYSxHQUFHM1AsS0FBS3hQLEVBQUV1YyxZQUFZN1YsT0FBTyxRQUFNLElBQUk7WUFBYyxNQUFNcEcsSUFBRSxLQUFLMFIsR0FBRzZNLEdBQUd6WixLQUFLakcsR0FBRSxRQUFROEYsTUFBTTtZQUFNLFFBQU0sR0FBRzFFLEVBQUVvMUMsbUJBQW1CcjFDO0FBQUU7VUFBQzI4RSx1QkFBdUJwL0UsR0FBRVcsR0FBRXdCO1lBQUcsSUFBSWIsSUFBRys5RSxVQUFTNThFLEdBQUU2OEUsWUFBVzU4RSxLQUFHUCxHQUFFUSxJQUFFdU4sVUFBVXRPLFNBQU8sVUFBRyxNQUFTc08sVUFBVSxNQUFJQSxVQUFVO1lBQUdvUixHQUFHN1AsTUFBTSwrQkFBOEI7Y0FBQzB3RSxXQUFVbmlGO2NBQUVvaUYsZUFBY3poRjtjQUFFMCtFLFVBQVM1OEU7Y0FBRTY4RSxZQUFXNThFO2NBQUV1aUYsWUFBV3RpRjs7WUFBSSxJQUFJRSxLQUFFO1lBQUcsT0FBTW8vRSxXQUFVbi9FLEdBQUVvL0UsYUFBWXpoRixXQUFTK1QsR0FBR3hVLEdBQUV5QyxHQUFFQyxNQUFJLENBQUM7WUFBRSxJQUFHakMsS0FBR3dFLEtBQUtFLFVBQVUxRSxHQUFHMGlDLFNBQVMsMkJBQTBCLE1BQU0sSUFBSXI1QixNQUFNO1lBQW9LLElBQUdySixLQUFHd0UsS0FBS0UsVUFBVTFFLEdBQUcwaUMsU0FBUyxvREFBbUQ7b0JBQU81Z0IsR0FBRztnQkFBQzQvRCxXQUFVbmlGO2dCQUFFb2lGLGVBQWN6aEY7Z0JBQUUwaEYsZ0JBQVU7Z0JBQU9DLGlCQUFXO2dCQUFPakQsVUFBUzU4RTtnQkFBRTY4RSxZQUFXNThFO2dCQUFFNi9FLFlBQVdsaEYsS0FBS2toRjtnQkFBV25FLFNBQVEvOEUsS0FBSys4RTs7Y0FBVSxNQUFNajhFLFVBQVFtZ0IsR0FBR3RpQixHQUFFeUMsR0FBRUMsR0FBRTtjQUFLcEIsSUFBRSxRQUFNYSxTQUFFLElBQU9BLEVBQUU4L0UsV0FBVXAvRSxLQUFFO0FBQUUsbUJBQUs7Y0FBQyxLQUFJQyxHQUFFLE1BQU0sSUFBSWdILE1BQU0sNkNBQTZDN0UsS0FBS0UsVUFBVXJDLEtBQUcsQ0FBQyxPQUFPbUMsS0FBS0UsVUFBVTFFLEtBQUcsQ0FBQztjQUFNYSxJQUFFd0I7QUFBQztZQUFDLElBQUd3ZSxHQUFHN1AsTUFBTSwrQkFBOEI7Y0FBQ3l6RSxnQkFBZTVqRjtjQUFFNmpGLFVBQVN0aUY7Z0JBQUl2QixHQUFFO2NBQUMsSUFBSTRCO2NBQUUsSUFBSWxELEdBQUVXLEdBQUV3QixHQUFFTSxHQUFFQyxJQUFHcWdGLFdBQVVqZ0YsR0FBRWtnRixXQUFVdmlGLEtBQUdhLEVBQUUrUixLQUFLO2NBQUcsSUFBR2hTLEtBQUtzaEYsY0FBYTtnQkFBQztrQkFBSTNpRixVQUFRcUIsS0FBSzRoRixjQUFjbmdGLEdBQUVyQyxRQUFFLElBQVFvQyxJQUFHbEMsSUFBRSxLQUFJNmYsS0FBSixDQUFVeGdCLEVBQUVzZCxTQUFPLEtBQUksS0FBSTdhLElBQUV6QyxFQUFFa2pGO0FBQTZCLGtCQUFsQjtrQkFBTSxNQUFNLElBQUlwaEU7QUFBRTtnQkFBQyxJQUFHLFNBQU85aEIsRUFBRWtqRixZQUFXL2dGLElBQUVkLEtBQUs0YyxHQUFHK0IsY0FBYztrQkFBQzNXLEdBQUV2RztrQkFBRXBDLEdBQUVEO21CQUFJaWUsWUFBWXZULElBQUk5SixLQUFLNGMsR0FBRzhCLGVBQWVwZixFQUFFb1AsU0FBUyxLQUFLMk8sbUJBQWlCO2tCQUFDLElBQUcsU0FBTzFlLEVBQUVrakYsWUFBVyxNQUFNLElBQUlwNUUsTUFBTTtrQkFBa0Q5SixFQUFFcWpGLFdBQVNsaEYsSUFBRWQsS0FBSzRjLEdBQUcrQixjQUFjO29CQUFDM1csR0FBRXZHO29CQUFFcEMsR0FBRUQ7cUJBQUlpZSxlQUFhdmMsSUFBRWQsS0FBSzRjLEdBQUcrQixjQUFjO29CQUFDM1csR0FBRXZHO29CQUFFcEMsR0FBRUQ7cUJBQUlpZSxZQUFZdlQsSUFBSTlKLEtBQUs0YyxHQUFHK0IsY0FBYztvQkFBQzNXLEdBQUVySixFQUFFbWpGLFNBQVM5NUU7b0JBQUUzSSxHQUFFVixFQUFFbWpGLFNBQVN6aUY7cUJBQUlnZSxjQUFhaGMsSUFBRTFDLEVBQUVtakY7QUFBUztBQUFDLHFCQUFNMWdGLElBQUUsTUFBSzlCLFVBQVFVLEtBQUt1akYsWUFBWTtnQkFBQzdCLFdBQVVqZ0Y7Z0JBQUVrZ0YsV0FBVXZpRjtrQkFBSTBCLElBQUVkLEtBQUs0YyxHQUFHK0IsY0FBYztnQkFBQzNXLEdBQUV2RztnQkFBRXBDLEdBQUVEO2lCQUFJaWUsWUFBWXZULElBQUk5SixLQUFLNGMsR0FBRzhCLGVBQWVwZixFQUFFb1AsU0FBUyxLQUFLMk87Y0FBYTViLElBQUVYLEVBQUV3VyxPQUFPNUksU0FBUyxLQUFJdFAsSUFBRTBCLEVBQUV5VyxPQUFPN0ksU0FBUztjQUFJLE1BQU0zTixJQUFFZixLQUFLK2hGLDBCQUEwQmpoRixFQUFFd1csUUFBT3hXLEVBQUV5VztjQUFRLE9BQU8wSSxHQUFHN1AsTUFBTSwrQkFBOEI7Z0JBQUN1TixHQUFFbGM7Z0JBQUVtYyxHQUFFeGU7Z0JBQUUraEIsU0FBUXBnQjtnQkFBRThnRixZQUFXemdGO2dCQUFFNmEsT0FBTSxVQUFRcGEsSUFBRXZDLFdBQUksTUFBU3VDLFNBQUUsSUFBT0EsRUFBRTZNLFNBQVM7Z0JBQUlvekUsVUFBU3pnRjtrQkFBSUMsSUFBRTtnQkFBQ3VnRixZQUFXemdGO2dCQUFFK2YsU0FBUXBnQjtnQkFBRTRjLEdBQUVsYztnQkFBRW1jLEdBQUV4ZTtnQkFBRThpRixlQUFjNWlGO2dCQUFFd2lGLFVBQVN6Z0Y7a0JBQUdOO0FBQUM7WUFBQyxNQUFNLElBQUkwSCxNQUFNLDZDQUE2QzdFLEtBQUtFLFVBQVVyQyxLQUFHLENBQUMsT0FBT21DLEtBQUtFLFVBQVUxRSxLQUFHLENBQUM7QUFBSztVQUFDMitFLG9CQUFvQnAvRSxHQUFFVyxHQUFFd0I7WUFBRyxJQUFJYjtZQUFFLE1BQU1tQixJQUFFeU4sVUFBVXRPLFNBQU8sVUFBRyxNQUFTc08sVUFBVSxNQUFJQSxVQUFVLEtBQUcsYUFBVztZQUFnQixPQUFPNU8sSUFBRWEsSUFBRWQsS0FBS3FpRix1QkFBdUJqaEYsR0FBRU4sS0FBRztjQUFDNGdGLFdBQVUvaUY7Y0FBRWdqRixXQUFVcmlGO2NBQUVxa0YsVUFBUztnQkFBQ3ArRSxNQUFLbkU7O2VBQUk0RyxFQUFFLEdBQUdoSSxLQUFLdWhGLGlDQUFnQ3RoRixRQUFFLEdBQU87Y0FBQ3UrRSxZQUFVOztBQUFJO1VBQUNULGVBQWVwL0UsR0FBRVcsR0FBRXdCO1lBQUcsT0FBT2QsS0FBSzRoRixjQUFjampGLEdBQUVXLEdBQUV3QixJQUFFO0FBQUc7VUFBQ2lqRix5QkFBeUJwbEYsR0FBRVc7WUFBRyxNQUFNd0IsSUFBRSxLQUFJcWUsS0FBSixDQUFVeGdCLEdBQUUsS0FBSXNCLElBQUUsS0FBSWtmLEtBQUosQ0FBVTdmLEdBQUU7WUFBSSxPQUFPd0IsRUFBRTBNLElBQUl2TixHQUFHMk4sS0FBSzVOLEtBQUs0YyxHQUFHL0csTUFBTTVWLEdBQUd5TyxTQUFTO0FBQU07O1FBQUUsTUFBTTJFLEtBQUc7VUFBQzJ3RSxRQUFPO1VBQVNDLFVBQVM7VUFBV0MsUUFBTztVQUFTQyxRQUFPO1VBQVNDLFNBQVE7VUFBVUMsb0JBQW1CO1dBQWtDdmlFLEtBQUc7VUFBQyxDQUFDek8sR0FBRzJ3RSxTQUFRO1VBQWMsQ0FBQzN3RSxHQUFHNHdFLFdBQVU7VUFBZ0IsQ0FBQzV3RSxHQUFHNndFLFNBQVE7VUFBYyxDQUFDN3dFLEdBQUc4d0UsU0FBUTtVQUFjLENBQUM5d0UsR0FBRyt3RSxVQUFTO1VBQWUsQ0FBQy93RSxHQUFHZ3hFLHFCQUFvQjtXQUFpQ3B4RSxLQUFHLFdBQVUwaUIsS0FBRyxRQUFPQyxLQUFHLGVBQWNDLEtBQUcsV0FBVUMsS0FBRyxZQUFXQyxLQUFHLFdBQVVDLEtBQUcsV0FBVUMsS0FBRyxTQUFRQyxLQUFHLGVBQWNDLEtBQUcscUJBQW9CK3lCLEtBQUc7VUFBQ283QixZQUFXO1VBQWFDLGFBQVk7VUFBY0MsU0FBUTtVQUFVQyxTQUFRO1VBQVVDLEtBQUk7VUFBTUMsTUFBSztXQUFReDdCLEtBQUc7VUFBQ3k3QixhQUFZO1VBQWNDLFVBQVM7VUFBV0MsY0FBYTtVQUFlQyxXQUFVO1dBQWEzN0IsS0FBRztVQUFDLENBQUNuMkMsS0FBSSxFQUFDLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNO1VBQU8sQ0FBQzBpQixLQUFJLEVBQUMsT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU07VUFBTyxDQUFDQyxLQUFJLEVBQUMsT0FBTSxPQUFNO1VBQU8sQ0FBQ0MsS0FBSSxFQUFDLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNO1VBQU8sQ0FBQ0MsS0FBSSxFQUFDLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNO1VBQU8sQ0FBQ0MsS0FBSSxFQUFDLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU07V0FBUXN6QixLQUFHLElBQUl0MkIsSUFBSSxFQUFDLE9BQU0sUUFBTyxRQUFPLFFBQU8sU0FBUSxPQUFNLE9BQU0sUUFBTyxRQUFPLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sUUFBTyxRQUFPLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLFFBQU8sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sUUFBTyxRQUFPLFNBQVEsUUFBTyxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxRQUFPLFFBQU8sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLFVBQVMsU0FBUSxPQUFNLE9BQU0sVUFBUyxNQUFLLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sTUFBSyxPQUFNLE9BQU0sUUFBTyxPQUFNLFFBQU8sT0FBTSxPQUFNLE1BQUssT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sUUFBTyxRQUFPLE9BQU0sT0FBTSxPQUFNLFFBQU8sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sUUFBTyxPQUFNLFFBQU8sT0FBTSxPQUFNLFFBQU8sUUFBTyxRQUFPLE9BQU0sT0FBTSxPQUFNLFlBQVcsUUFBTyxPQUFNLE9BQU0sV0FBVSxVQUFTLE9B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Z3VGLGlCQUFnQjUwRjs7O0FBQUk7VUFBQ3l6Rix1QkFBdUJ6ekYsR0FBRVc7WUFBRyxNQUFNd0IsSUFBRWQsS0FBSzJ5RixlQUFjMXlGLElBQUV5cEQsR0FBRyxrREFBZ0Qsd0NBQXdDcDJDLE9BQU94UyxHQUFFLGdCQUFjLFVBQVEsOEJBQThCd1MsT0FBT3RULEtBQUs0dkYsa0JBQWtCeEosZ0JBQWUsV0FBUyw0QkFBNEI5eUUsT0FBT3RULEtBQUs0dkYsa0JBQWtCdkosZUFBYyxVQUFRLGlCQUFnQmpsRixJQUFFc29ELEdBQUcsZ0NBQWdDcDJDLE9BQU90VCxLQUFLNHZGLGtCQUFrQnpKLFVBQVMsZ0JBQWU5a0YsSUFBRXFvRCxHQUFHO1lBQThDcm9ELEVBQUVnc0YsWUFBWWpzRixJQUFHbkIsRUFBRW90RixZQUFZaHNGLElBQUdyQixLQUFLcXlGLG9CQUFvQnB5RixJQUFHd3BELElBQUc7Y0FBTXpwRCxLQUFLcXZGLG9CQUFvQkMsTUFBTTlKLFVBQVEsU0FBUXhsRixLQUFLcXZGLG9CQUFvQmhDLFlBQVlwdEY7QUFBRyxpQkFBR3dwRCxJQUFHO2NBQU1yb0QsRUFBRTIrQyxpQkFBaUIsVUFBUTtnQkFBTS8vQyxLQUFLaXhGLGNBQWN0eUYsR0FBRTtrQkFBQ2s5RCxLQUFJdjhEO2tCQUFFdWdELFFBQU87a0JBQVM2cUMsVUFBU2hnQztvQkFBS3pxRCxFQUFFMndGLFVBQVMsTUFBSTV3RixLQUFLcXZGLG9CQUFvQjluRSxTQUFTaG5CLFdBQVNQLEtBQUtxdkYsb0JBQW9CQyxNQUFNOUosVUFBUTtBQUFRO0FBQUc7QUFBRTs7QUFBRyxRQUExaHRFLElBQThodEV2bEYsRUFBRW9RO0FBQVEsTUFBbjR2dUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9AdG9rZW5zY3JpcHQvdG9rZW4tbmVnb3RpYXRvci9kaXN0L3dhbGxldC9Ub3J1c1Byb3ZpZGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvdG9ydXMtZW1iZWQvZGlzdC90b3J1cy51bWQubWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCBUb3J1cyBmcm9tICdAdG9ydXNsYWJzL3RvcnVzLWVtYmVkL2Rpc3QvdG9ydXMudW1kLm1pbic7XG5leHBvcnQgdmFyIGdldFRvcnVzUHJvdmlkZXJJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICByZXR1cm4gWzIsIG5ldyBUb3J1cygpXTtcbiAgICB9KTtcbn0pOyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG9ydXNQcm92aWRlci5qcy5tYXAiLCIvKiEgRm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gcGxlYXNlIHNlZSB0b3J1cy51bWQubWluLmpzLkxJQ0VOU0UudHh0ICovXG4hZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlRvcnVzPXQoKTplLlRvcnVzPXQoKX0oc2VsZiwoKCk9PigoKT0+e3ZhciBlPXs4MzQ5OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtyLmQodCx7UlE6KCk9PlcsX1I6KCk9PnB9KTt2YXIgbj1yKDM1ODcpLGk9cig3MTEpO2NvbnN0IG89XCJhYmkvNS42LjRcIixzPW5ldyBpLllkKG8pLGE9e307bGV0IGM9e2NhbGxkYXRhOiEwLG1lbW9yeTohMCxzdG9yYWdlOiEwfSxmPXtjYWxsZGF0YTohMCxtZW1vcnk6ITB9O2Z1bmN0aW9uIHUoZSx0KXtpZihcImJ5dGVzXCI9PT1lfHxcInN0cmluZ1wiPT09ZSl7aWYoY1t0XSlyZXR1cm4hMH1lbHNlIGlmKFwiYWRkcmVzc1wiPT09ZSl7aWYoXCJwYXlhYmxlXCI9PT10KXJldHVybiEwfWVsc2UgaWYoKGUuaW5kZXhPZihcIltcIik+PTB8fFwidHVwbGVcIj09PWUpJiZmW3RdKXJldHVybiEwO3JldHVybihjW3RdfHxcInBheWFibGVcIj09PXQpJiZzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbW9kaWZpZXJcIixcIm5hbWVcIix0KSwhMX1mdW5jdGlvbiBkKGUsdCl7Zm9yKGxldCByIGluIHQpKDAsbi56RykoZSxyLHRbcl0pfWNvbnN0IGg9T2JqZWN0LmZyZWV6ZSh7c2lnaGFzaDpcInNpZ2hhc2hcIixtaW5pbWFsOlwibWluaW1hbFwiLGZ1bGw6XCJmdWxsXCIsanNvbjpcImpzb25cIn0pLGw9bmV3IFJlZ0V4cCgvXiguKilcXFsoWzAtOV0qKVxcXSQvKTtjbGFzcyBwe2NvbnN0cnVjdG9yKGUsdCl7ZSE9PWEmJnMudGhyb3dFcnJvcihcInVzZSBmcm9tU3RyaW5nXCIsaS5ZZC5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJuZXcgUGFyYW1UeXBlKClcIn0pLGQodGhpcyx0KTtsZXQgcj10aGlzLnR5cGUubWF0Y2gobCk7ZCh0aGlzLHI/e2FycmF5TGVuZ3RoOnBhcnNlSW50KHJbMl18fFwiLTFcIiksYXJyYXlDaGlsZHJlbjpwLmZyb21PYmplY3Qoe3R5cGU6clsxXSxjb21wb25lbnRzOnRoaXMuY29tcG9uZW50c30pLGJhc2VUeXBlOlwiYXJyYXlcIn06e2FycmF5TGVuZ3RoOm51bGwsYXJyYXlDaGlsZHJlbjpudWxsLGJhc2VUeXBlOm51bGwhPXRoaXMuY29tcG9uZW50cz9cInR1cGxlXCI6dGhpcy50eXBlfSksdGhpcy5faXNQYXJhbVR5cGU9ITAsT2JqZWN0LmZyZWV6ZSh0aGlzKX1mb3JtYXQoZSl7aWYoZXx8KGU9aC5zaWdoYXNoKSxoW2VdfHxzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIixcImZvcm1hdFwiLGUpLGU9PT1oLmpzb24pe2xldCB0PXt0eXBlOlwidHVwbGVcIj09PXRoaXMuYmFzZVR5cGU/XCJ0dXBsZVwiOnRoaXMudHlwZSxuYW1lOnRoaXMubmFtZXx8dm9pZCAwfTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHRoaXMuaW5kZXhlZCYmKHQuaW5kZXhlZD10aGlzLmluZGV4ZWQpLHRoaXMuY29tcG9uZW50cyYmKHQuY29tcG9uZW50cz10aGlzLmNvbXBvbmVudHMubWFwKCh0PT5KU09OLnBhcnNlKHQuZm9ybWF0KGUpKSkpKSxKU09OLnN0cmluZ2lmeSh0KX1sZXQgdD1cIlwiO3JldHVyblwiYXJyYXlcIj09PXRoaXMuYmFzZVR5cGU/KHQrPXRoaXMuYXJyYXlDaGlsZHJlbi5mb3JtYXQoZSksdCs9XCJbXCIrKHRoaXMuYXJyYXlMZW5ndGg8MD9cIlwiOlN0cmluZyh0aGlzLmFycmF5TGVuZ3RoKSkrXCJdXCIpOlwidHVwbGVcIj09PXRoaXMuYmFzZVR5cGU/KGUhPT1oLnNpZ2hhc2gmJih0Kz10aGlzLnR5cGUpLHQrPVwiKFwiK3RoaXMuY29tcG9uZW50cy5tYXAoKHQ9PnQuZm9ybWF0KGUpKSkuam9pbihlPT09aC5mdWxsP1wiLCBcIjpcIixcIikrXCIpXCIpOnQrPXRoaXMudHlwZSxlIT09aC5zaWdoYXNoJiYoITA9PT10aGlzLmluZGV4ZWQmJih0Kz1cIiBpbmRleGVkXCIpLGU9PT1oLmZ1bGwmJnRoaXMubmFtZSYmKHQrPVwiIFwiK3RoaXMubmFtZSkpLHR9c3RhdGljIGZyb20oZSx0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9wLmZyb21TdHJpbmcoZSx0KTpwLmZyb21PYmplY3QoZSl9c3RhdGljIGZyb21PYmplY3QoZSl7cmV0dXJuIHAuaXNQYXJhbVR5cGUoZSk/ZTpuZXcgcChhLHtuYW1lOmUubmFtZXx8bnVsbCx0eXBlOmIoZS50eXBlKSxpbmRleGVkOm51bGw9PWUuaW5kZXhlZD9udWxsOiEhZS5pbmRleGVkLGNvbXBvbmVudHM6ZS5jb21wb25lbnRzP2UuY29tcG9uZW50cy5tYXAocC5mcm9tT2JqZWN0KTpudWxsfSl9c3RhdGljIGZyb21TdHJpbmcoZSx0KXtyZXR1cm4gcj1mdW5jdGlvbihlLHQpe2xldCByPWU7ZnVuY3Rpb24gbih0KXtzLnRocm93QXJndW1lbnRFcnJvcihgdW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgcG9zaXRpb24gJHt0fWAsXCJwYXJhbVwiLGUpfWZ1bmN0aW9uIGkoZSl7bGV0IHI9e3R5cGU6XCJcIixuYW1lOlwiXCIscGFyZW50OmUsc3RhdGU6e2FsbG93VHlwZTohMH19O3JldHVybiB0JiYoci5pbmRleGVkPSExKSxyfWU9ZS5yZXBsYWNlKC9cXHMvZyxcIiBcIik7bGV0IG89e3R5cGU6XCJcIixuYW1lOlwiXCIsc3RhdGU6e2FsbG93VHlwZTohMH19LGE9bztmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl7bGV0IG89ZVtyXTtzd2l0Y2gobyl7Y2FzZVwiKFwiOmEuc3RhdGUuYWxsb3dUeXBlJiZcIlwiPT09YS50eXBlP2EudHlwZT1cInR1cGxlXCI6YS5zdGF0ZS5hbGxvd1BhcmFtc3x8bihyKSxhLnN0YXRlLmFsbG93VHlwZT0hMSxhLnR5cGU9YihhLnR5cGUpLGEuY29tcG9uZW50cz1baShhKV0sYT1hLmNvbXBvbmVudHNbMF07YnJlYWs7Y2FzZVwiKVwiOmRlbGV0ZSBhLnN0YXRlLFwiaW5kZXhlZFwiPT09YS5uYW1lJiYodHx8bihyKSxhLmluZGV4ZWQ9ITAsYS5uYW1lPVwiXCIpLHUoYS50eXBlLGEubmFtZSkmJihhLm5hbWU9XCJcIiksYS50eXBlPWIoYS50eXBlKTtsZXQgZT1hO2E9YS5wYXJlbnQsYXx8bihyKSxkZWxldGUgZS5wYXJlbnQsYS5zdGF0ZS5hbGxvd1BhcmFtcz0hMSxhLnN0YXRlLmFsbG93TmFtZT0hMCxhLnN0YXRlLmFsbG93QXJyYXk9ITA7YnJlYWs7Y2FzZVwiLFwiOmRlbGV0ZSBhLnN0YXRlLFwiaW5kZXhlZFwiPT09YS5uYW1lJiYodHx8bihyKSxhLmluZGV4ZWQ9ITAsYS5uYW1lPVwiXCIpLHUoYS50eXBlLGEubmFtZSkmJihhLm5hbWU9XCJcIiksYS50eXBlPWIoYS50eXBlKTtsZXQgcz1pKGEucGFyZW50KTthLnBhcmVudC5jb21wb25lbnRzLnB1c2gocyksZGVsZXRlIGEucGFyZW50LGE9czticmVhaztjYXNlXCIgXCI6YS5zdGF0ZS5hbGxvd1R5cGUmJlwiXCIhPT1hLnR5cGUmJihhLnR5cGU9YihhLnR5cGUpLGRlbGV0ZSBhLnN0YXRlLmFsbG93VHlwZSxhLnN0YXRlLmFsbG93TmFtZT0hMCxhLnN0YXRlLmFsbG93UGFyYW1zPSEwKSxhLnN0YXRlLmFsbG93TmFtZSYmXCJcIiE9PWEubmFtZSYmKFwiaW5kZXhlZFwiPT09YS5uYW1lPyh0fHxuKHIpLGEuaW5kZXhlZCYmbihyKSxhLmluZGV4ZWQ9ITAsYS5uYW1lPVwiXCIpOnUoYS50eXBlLGEubmFtZSk/YS5uYW1lPVwiXCI6YS5zdGF0ZS5hbGxvd05hbWU9ITEpO2JyZWFrO2Nhc2VcIltcIjphLnN0YXRlLmFsbG93QXJyYXl8fG4ociksYS50eXBlKz1vLGEuc3RhdGUuYWxsb3dBcnJheT0hMSxhLnN0YXRlLmFsbG93TmFtZT0hMSxhLnN0YXRlLnJlYWRBcnJheT0hMDticmVhaztjYXNlXCJdXCI6YS5zdGF0ZS5yZWFkQXJyYXl8fG4ociksYS50eXBlKz1vLGEuc3RhdGUucmVhZEFycmF5PSExLGEuc3RhdGUuYWxsb3dBcnJheT0hMCxhLnN0YXRlLmFsbG93TmFtZT0hMDticmVhaztkZWZhdWx0OmEuc3RhdGUuYWxsb3dUeXBlPyhhLnR5cGUrPW8sYS5zdGF0ZS5hbGxvd1BhcmFtcz0hMCxhLnN0YXRlLmFsbG93QXJyYXk9ITApOmEuc3RhdGUuYWxsb3dOYW1lPyhhLm5hbWUrPW8sZGVsZXRlIGEuc3RhdGUuYWxsb3dBcnJheSk6YS5zdGF0ZS5yZWFkQXJyYXk/YS50eXBlKz1vOm4ocil9fXJldHVybiBhLnBhcmVudCYmcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmV4cGVjdGVkIGVvZlwiLFwicGFyYW1cIixlKSxkZWxldGUgby5zdGF0ZSxcImluZGV4ZWRcIj09PWEubmFtZT8odHx8bihyLmxlbmd0aC03KSxhLmluZGV4ZWQmJm4oci5sZW5ndGgtNyksYS5pbmRleGVkPSEwLGEubmFtZT1cIlwiKTp1KGEudHlwZSxhLm5hbWUpJiYoYS5uYW1lPVwiXCIpLG8udHlwZT1iKG8udHlwZSksb30oZSwhIXQpLHAuZnJvbU9iamVjdCh7bmFtZTpyLm5hbWUsdHlwZTpyLnR5cGUsaW5kZXhlZDpyLmluZGV4ZWQsY29tcG9uZW50czpyLmNvbXBvbmVudHN9KTt2YXIgcn1zdGF0aWMgaXNQYXJhbVR5cGUoZSl7cmV0dXJuIShudWxsPT1lfHwhZS5faXNQYXJhbVR5cGUpfX1mdW5jdGlvbiBiKGUpe3JldHVybiBlLm1hdGNoKC9edWludCgkfFteMS05XSkvKT9lPVwidWludDI1NlwiK2Uuc3Vic3RyaW5nKDQpOmUubWF0Y2goL15pbnQoJHxbXjEtOV0pLykmJihlPVwiaW50MjU2XCIrZS5zdWJzdHJpbmcoMykpLGV9dmFyIHk9cigzMjg2KSxnPXIoNTE1NCk7Y29uc3QgbT1uZXcgaS5ZZChvKTtjbGFzcyB2e2NvbnN0cnVjdG9yKGUsdCxyLG4pe3RoaXMubmFtZT1lLHRoaXMudHlwZT10LHRoaXMubG9jYWxOYW1lPXIsdGhpcy5keW5hbWljPW59X3Rocm93RXJyb3IoZSx0KXttLnRocm93QXJndW1lbnRFcnJvcihlLHRoaXMubG9jYWxOYW1lLHQpfX1jbGFzcyB3e2NvbnN0cnVjdG9yKGUpeygwLG4uekcpKHRoaXMsXCJ3b3JkU2l6ZVwiLGV8fDMyKSx0aGlzLl9kYXRhPVtdLHRoaXMuX2RhdGFMZW5ndGg9MCx0aGlzLl9wYWRkaW5nPW5ldyBVaW50OEFycmF5KGUpfWdldCBkYXRhKCl7cmV0dXJuKDAseS54cykodGhpcy5fZGF0YSl9Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLl9kYXRhTGVuZ3RofV93cml0ZURhdGEoZSl7cmV0dXJuIHRoaXMuX2RhdGEucHVzaChlKSx0aGlzLl9kYXRhTGVuZ3RoKz1lLmxlbmd0aCxlLmxlbmd0aH1hcHBlbmRXcml0ZXIoZSl7cmV0dXJuIHRoaXMuX3dyaXRlRGF0YSgoMCx5LnpvKShlLl9kYXRhKSl9d3JpdGVCeXRlcyhlKXtsZXQgdD0oMCx5LmxFKShlKTtjb25zdCByPXQubGVuZ3RoJXRoaXMud29yZFNpemU7cmV0dXJuIHImJih0PSgwLHkuem8pKFt0LHRoaXMuX3BhZGRpbmcuc2xpY2UocildKSksdGhpcy5fd3JpdGVEYXRhKHQpfV9nZXRWYWx1ZShlKXtsZXQgdD0oMCx5LmxFKShnLk8kLmZyb20oZSkpO3JldHVybiB0Lmxlbmd0aD50aGlzLndvcmRTaXplJiZtLnRocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsaS5ZZC5lcnJvcnMuQlVGRkVSX09WRVJSVU4se2xlbmd0aDp0aGlzLndvcmRTaXplLG9mZnNldDp0Lmxlbmd0aH0pLHQubGVuZ3RoJXRoaXMud29yZFNpemUmJih0PSgwLHkuem8pKFt0aGlzLl9wYWRkaW5nLnNsaWNlKHQubGVuZ3RoJXRoaXMud29yZFNpemUpLHRdKSksdH13cml0ZVZhbHVlKGUpe3JldHVybiB0aGlzLl93cml0ZURhdGEodGhpcy5fZ2V0VmFsdWUoZSkpfXdyaXRlVXBkYXRhYmxlVmFsdWUoKXtjb25zdCBlPXRoaXMuX2RhdGEubGVuZ3RoO3JldHVybiB0aGlzLl9kYXRhLnB1c2godGhpcy5fcGFkZGluZyksdGhpcy5fZGF0YUxlbmd0aCs9dGhpcy53b3JkU2l6ZSx0PT57dGhpcy5fZGF0YVtlXT10aGlzLl9nZXRWYWx1ZSh0KX19fWNsYXNzIF97Y29uc3RydWN0b3IoZSx0LHIsaSl7KDAsbi56RykodGhpcyxcIl9kYXRhXCIsKDAseS5sRSkoZSkpLCgwLG4uekcpKHRoaXMsXCJ3b3JkU2l6ZVwiLHR8fDMyKSwoMCxuLnpHKSh0aGlzLFwiX2NvZXJjZUZ1bmNcIixyKSwoMCxuLnpHKSh0aGlzLFwiYWxsb3dMb29zZVwiLGkpLHRoaXMuX29mZnNldD0wfWdldCBkYXRhKCl7cmV0dXJuKDAseS5EdikodGhpcy5fZGF0YSl9Z2V0IGNvbnN1bWVkKCl7cmV0dXJuIHRoaXMuX29mZnNldH1zdGF0aWMgY29lcmNlKGUsdCl7bGV0IHI9ZS5tYXRjaChcIl51P2ludChbMC05XSspJFwiKTtyZXR1cm4gciYmcGFyc2VJbnQoclsxXSk8PTQ4JiYodD10LnRvTnVtYmVyKCkpLHR9Y29lcmNlKGUsdCl7cmV0dXJuIHRoaXMuX2NvZXJjZUZ1bmM/dGhpcy5fY29lcmNlRnVuYyhlLHQpOl8uY29lcmNlKGUsdCl9X3BlZWtCeXRlcyhlLHQscil7bGV0IG49TWF0aC5jZWlsKHQvdGhpcy53b3JkU2l6ZSkqdGhpcy53b3JkU2l6ZTtyZXR1cm4gdGhpcy5fb2Zmc2V0K24+dGhpcy5fZGF0YS5sZW5ndGgmJih0aGlzLmFsbG93TG9vc2UmJnImJnRoaXMuX29mZnNldCt0PD10aGlzLl9kYXRhLmxlbmd0aD9uPXQ6bS50aHJvd0Vycm9yKFwiZGF0YSBvdXQtb2YtYm91bmRzXCIsaS5ZZC5lcnJvcnMuQlVGRkVSX09WRVJSVU4se2xlbmd0aDp0aGlzLl9kYXRhLmxlbmd0aCxvZmZzZXQ6dGhpcy5fb2Zmc2V0K259KSksdGhpcy5fZGF0YS5zbGljZSh0aGlzLl9vZmZzZXQsdGhpcy5fb2Zmc2V0K24pfXN1YlJlYWRlcihlKXtyZXR1cm4gbmV3IF8odGhpcy5fZGF0YS5zbGljZSh0aGlzLl9vZmZzZXQrZSksdGhpcy53b3JkU2l6ZSx0aGlzLl9jb2VyY2VGdW5jLHRoaXMuYWxsb3dMb29zZSl9cmVhZEJ5dGVzKGUsdCl7bGV0IHI9dGhpcy5fcGVla0J5dGVzKDAsZSwhIXQpO3JldHVybiB0aGlzLl9vZmZzZXQrPXIubGVuZ3RoLHIuc2xpY2UoMCxlKX1yZWFkVmFsdWUoKXtyZXR1cm4gZy5PJC5mcm9tKHRoaXMucmVhZEJ5dGVzKHRoaXMud29yZFNpemUpKX19dmFyIFM9cig0NTk0KTtjbGFzcyBFIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlKXtzdXBlcihcImFkZHJlc3NcIixcImFkZHJlc3NcIixlLCExKX1kZWZhdWx0VmFsdWUoKXtyZXR1cm5cIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwifWVuY29kZShlLHQpe3RyeXt0PSgwLFMuS24pKHQpfWNhdGNoKGUpe3RoaXMuX3Rocm93RXJyb3IoZS5tZXNzYWdlLHQpfXJldHVybiBlLndyaXRlVmFsdWUodCl9ZGVjb2RlKGUpe3JldHVybigwLFMuS24pKCgwLHkuJG0pKGUucmVhZFZhbHVlKCkudG9IZXhTdHJpbmcoKSwyMCkpfX1jbGFzcyBBIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlKXtzdXBlcihlLm5hbWUsZS50eXBlLHZvaWQgMCxlLmR5bmFtaWMpLHRoaXMuY29kZXI9ZX1kZWZhdWx0VmFsdWUoKXtyZXR1cm4gdGhpcy5jb2Rlci5kZWZhdWx0VmFsdWUoKX1lbmNvZGUoZSx0KXtyZXR1cm4gdGhpcy5jb2Rlci5lbmNvZGUoZSx0KX1kZWNvZGUoZSl7cmV0dXJuIHRoaXMuY29kZXIuZGVjb2RlKGUpfX1jb25zdCB4PW5ldyBpLllkKG8pO2Z1bmN0aW9uIGsoZSx0LHIpe2xldCBuPW51bGw7aWYoQXJyYXkuaXNBcnJheShyKSluPXI7ZWxzZSBpZihyJiZcIm9iamVjdFwiPT10eXBlb2Ygcil7bGV0IGU9e307bj10Lm1hcCgodD0+e2NvbnN0IG49dC5sb2NhbE5hbWU7cmV0dXJuIG58fHgudGhyb3dFcnJvcihcImNhbm5vdCBlbmNvZGUgb2JqZWN0IGZvciBzaWduYXR1cmUgd2l0aCBtaXNzaW5nIG5hbWVzXCIsaS5ZZC5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6XCJ2YWx1ZXNcIixjb2Rlcjp0LHZhbHVlOnJ9KSxlW25dJiZ4LnRocm93RXJyb3IoXCJjYW5ub3QgZW5jb2RlIG9iamVjdCBmb3Igc2lnbmF0dXJlIHdpdGggZHVwbGljYXRlIG5hbWVzXCIsaS5ZZC5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6XCJ2YWx1ZXNcIixjb2Rlcjp0LHZhbHVlOnJ9KSxlW25dPSEwLHJbbl19KSl9ZWxzZSB4LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHVwbGUgdmFsdWVcIixcInR1cGxlXCIscik7dC5sZW5ndGghPT1uLmxlbmd0aCYmeC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0eXBlcy92YWx1ZSBsZW5ndGggbWlzbWF0Y2hcIixcInR1cGxlXCIscik7bGV0IG89bmV3IHcoZS53b3JkU2l6ZSkscz1uZXcgdyhlLndvcmRTaXplKSxhPVtdO3QuZm9yRWFjaCgoKGUsdCk9PntsZXQgcj1uW3RdO2lmKGUuZHluYW1pYyl7bGV0IHQ9cy5sZW5ndGg7ZS5lbmNvZGUocyxyKTtsZXQgbj1vLndyaXRlVXBkYXRhYmxlVmFsdWUoKTthLnB1c2goKGU9PntuKGUrdCl9KSl9ZWxzZSBlLmVuY29kZShvLHIpfSkpLGEuZm9yRWFjaCgoZT0+e2Uoby5sZW5ndGgpfSkpO2xldCBjPWUuYXBwZW5kV3JpdGVyKG8pO3JldHVybiBjKz1lLmFwcGVuZFdyaXRlcihzKSxjfWZ1bmN0aW9uIFAoZSx0KXtsZXQgcj1bXSxuPWUuc3ViUmVhZGVyKDApO3QuZm9yRWFjaCgodD0+e2xldCBvPW51bGw7aWYodC5keW5hbWljKXtsZXQgcj1lLnJlYWRWYWx1ZSgpLHM9bi5zdWJSZWFkZXIoci50b051bWJlcigpKTt0cnl7bz10LmRlY29kZShzKX1jYXRjaChlKXtpZihlLmNvZGU9PT1pLllkLmVycm9ycy5CVUZGRVJfT1ZFUlJVTil0aHJvdyBlO289ZSxvLmJhc2VUeXBlPXQubmFtZSxvLm5hbWU9dC5sb2NhbE5hbWUsby50eXBlPXQudHlwZX19ZWxzZSB0cnl7bz10LmRlY29kZShlKX1jYXRjaChlKXtpZihlLmNvZGU9PT1pLllkLmVycm9ycy5CVUZGRVJfT1ZFUlJVTil0aHJvdyBlO289ZSxvLmJhc2VUeXBlPXQubmFtZSxvLm5hbWU9dC5sb2NhbE5hbWUsby50eXBlPXQudHlwZX1udWxsIT1vJiZyLnB1c2gobyl9KSk7Y29uc3Qgbz10LnJlZHVjZSgoKGUsdCk9Pntjb25zdCByPXQubG9jYWxOYW1lO3JldHVybiByJiYoZVtyXXx8KGVbcl09MCksZVtyXSsrKSxlfSkse30pO3QuZm9yRWFjaCgoKGUsdCk9PntsZXQgbj1lLmxvY2FsTmFtZTtpZighbnx8MSE9PW9bbl0pcmV0dXJuO2lmKFwibGVuZ3RoXCI9PT1uJiYobj1cIl9sZW5ndGhcIiksbnVsbCE9cltuXSlyZXR1cm47Y29uc3QgaT1yW3RdO2kgaW5zdGFuY2VvZiBFcnJvcj9PYmplY3QuZGVmaW5lUHJvcGVydHkocixuLHtlbnVtZXJhYmxlOiEwLGdldDooKT0+e3Rocm93IGl9fSk6cltuXT1pfSkpO2ZvcihsZXQgZT0wO2U8ci5sZW5ndGg7ZSsrKXtjb25zdCB0PXJbZV07dCBpbnN0YW5jZW9mIEVycm9yJiZPYmplY3QuZGVmaW5lUHJvcGVydHkocixlLHtlbnVtZXJhYmxlOiEwLGdldDooKT0+e3Rocm93IHR9fSl9cmV0dXJuIE9iamVjdC5mcmVlemUocil9Y2xhc3MgTyBleHRlbmRzIHZ7Y29uc3RydWN0b3IoZSx0LHIpe3N1cGVyKFwiYXJyYXlcIixlLnR5cGUrXCJbXCIrKHQ+PTA/dDpcIlwiKStcIl1cIixyLC0xPT09dHx8ZS5keW5hbWljKSx0aGlzLmNvZGVyPWUsdGhpcy5sZW5ndGg9dH1kZWZhdWx0VmFsdWUoKXtjb25zdCBlPXRoaXMuY29kZXIuZGVmYXVsdFZhbHVlKCksdD1bXTtmb3IobGV0IHI9MDtyPHRoaXMubGVuZ3RoO3IrKyl0LnB1c2goZSk7cmV0dXJuIHR9ZW5jb2RlKGUsdCl7QXJyYXkuaXNBcnJheSh0KXx8dGhpcy5fdGhyb3dFcnJvcihcImV4cGVjdGVkIGFycmF5IHZhbHVlXCIsdCk7bGV0IHI9dGhpcy5sZW5ndGg7LTE9PT1yJiYocj10Lmxlbmd0aCxlLndyaXRlVmFsdWUodC5sZW5ndGgpKSx4LmNoZWNrQXJndW1lbnRDb3VudCh0Lmxlbmd0aCxyLFwiY29kZXIgYXJyYXlcIisodGhpcy5sb2NhbE5hbWU/XCIgXCIrdGhpcy5sb2NhbE5hbWU6XCJcIikpO2xldCBuPVtdO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKW4ucHVzaCh0aGlzLmNvZGVyKTtyZXR1cm4gayhlLG4sdCl9ZGVjb2RlKGUpe2xldCB0PXRoaXMubGVuZ3RoOy0xPT09dCYmKHQ9ZS5yZWFkVmFsdWUoKS50b051bWJlcigpLDMyKnQ+ZS5fZGF0YS5sZW5ndGgmJngudGhyb3dFcnJvcihcImluc3VmZmljaWVudCBkYXRhIGxlbmd0aFwiLGkuWWQuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHtsZW5ndGg6ZS5fZGF0YS5sZW5ndGgsY291bnQ6dH0pKTtsZXQgcj1bXTtmb3IobGV0IGU9MDtlPHQ7ZSsrKXIucHVzaChuZXcgQSh0aGlzLmNvZGVyKSk7cmV0dXJuIGUuY29lcmNlKHRoaXMubmFtZSxQKGUscikpfX1jbGFzcyBNIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlKXtzdXBlcihcImJvb2xcIixcImJvb2xcIixlLCExKX1kZWZhdWx0VmFsdWUoKXtyZXR1cm4hMX1lbmNvZGUoZSx0KXtyZXR1cm4gZS53cml0ZVZhbHVlKHQ/MTowKX1kZWNvZGUoZSl7cmV0dXJuIGUuY29lcmNlKHRoaXMudHlwZSwhZS5yZWFkVmFsdWUoKS5pc1plcm8oKSl9fWNsYXNzIEkgZXh0ZW5kcyB2e2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSxlLHQsITApfWRlZmF1bHRWYWx1ZSgpe3JldHVyblwiMHhcIn1lbmNvZGUoZSx0KXt0PSgwLHkubEUpKHQpO2xldCByPWUud3JpdGVWYWx1ZSh0Lmxlbmd0aCk7cmV0dXJuIHIrPWUud3JpdGVCeXRlcyh0KSxyfWRlY29kZShlKXtyZXR1cm4gZS5yZWFkQnl0ZXMoZS5yZWFkVmFsdWUoKS50b051bWJlcigpLCEwKX19Y2xhc3MgVCBleHRlbmRzIEl7Y29uc3RydWN0b3IoZSl7c3VwZXIoXCJieXRlc1wiLGUpfWRlY29kZShlKXtyZXR1cm4gZS5jb2VyY2UodGhpcy5uYW1lLCgwLHkuRHYpKHN1cGVyLmRlY29kZShlKSkpfX1jbGFzcyBSIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlLHQpe2xldCByPVwiYnl0ZXNcIitTdHJpbmcoZSk7c3VwZXIocixyLHQsITEpLHRoaXMuc2l6ZT1lfWRlZmF1bHRWYWx1ZSgpe3JldHVyblwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIuc3Vic3RyaW5nKDAsMisyKnRoaXMuc2l6ZSl9ZW5jb2RlKGUsdCl7bGV0IHI9KDAseS5sRSkodCk7cmV0dXJuIHIubGVuZ3RoIT09dGhpcy5zaXplJiZ0aGlzLl90aHJvd0Vycm9yKFwiaW5jb3JyZWN0IGRhdGEgbGVuZ3RoXCIsdCksZS53cml0ZUJ5dGVzKHIpfWRlY29kZShlKXtyZXR1cm4gZS5jb2VyY2UodGhpcy5uYW1lLCgwLHkuRHYpKGUucmVhZEJ5dGVzKHRoaXMuc2l6ZSkpKX19Y2xhc3MgTiBleHRlbmRzIHZ7Y29uc3RydWN0b3IoZSl7c3VwZXIoXCJudWxsXCIsXCJcIixlLCExKX1kZWZhdWx0VmFsdWUoKXtyZXR1cm4gbnVsbH1lbmNvZGUoZSx0KXtyZXR1cm4gbnVsbCE9dCYmdGhpcy5fdGhyb3dFcnJvcihcIm5vdCBudWxsXCIsdCksZS53cml0ZUJ5dGVzKFtdKX1kZWNvZGUoZSl7cmV0dXJuIGUucmVhZEJ5dGVzKDApLGUuY29lcmNlKHRoaXMubmFtZSxudWxsKX19dmFyIEM9cigxMDQ2KTtjbGFzcyBqIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlLHQscil7Y29uc3Qgbj0odD9cImludFwiOlwidWludFwiKSs4KmU7c3VwZXIobixuLHIsITEpLHRoaXMuc2l6ZT1lLHRoaXMuc2lnbmVkPXR9ZGVmYXVsdFZhbHVlKCl7cmV0dXJuIDB9ZW5jb2RlKGUsdCl7bGV0IHI9Zy5PJC5mcm9tKHQpLG49Qy5Cei5tYXNrKDgqZS53b3JkU2l6ZSk7aWYodGhpcy5zaWduZWQpe2xldCBlPW4ubWFzayg4KnRoaXMuc2l6ZS0xKTsoci5ndChlKXx8ci5sdChlLmFkZChDLmZoKS5tdWwoQy50TCkpKSYmdGhpcy5fdGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIix0KX1lbHNlKHIubHQoQy5fWSl8fHIuZ3Qobi5tYXNrKDgqdGhpcy5zaXplKSkpJiZ0aGlzLl90aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLHQpO3JldHVybiByPXIudG9Ud29zKDgqdGhpcy5zaXplKS5tYXNrKDgqdGhpcy5zaXplKSx0aGlzLnNpZ25lZCYmKHI9ci5mcm9tVHdvcyg4KnRoaXMuc2l6ZSkudG9Ud29zKDgqZS53b3JkU2l6ZSkpLGUud3JpdGVWYWx1ZShyKX1kZWNvZGUoZSl7bGV0IHQ9ZS5yZWFkVmFsdWUoKS5tYXNrKDgqdGhpcy5zaXplKTtyZXR1cm4gdGhpcy5zaWduZWQmJih0PXQuZnJvbVR3b3MoOCp0aGlzLnNpemUpKSxlLmNvZXJjZSh0aGlzLm5hbWUsdCl9fWNvbnN0IEI9bmV3IGkuWWQoXCJzdHJpbmdzLzUuNi4xXCIpO3ZhciBMLEQ7ZnVuY3Rpb24gVShlLHQscixuLGkpe2lmKGU9PT1ELkJBRF9QUkVGSVh8fGU9PT1ELlVORVhQRUNURURfQ09OVElOVUUpe2xldCBlPTA7Zm9yKGxldCBuPXQrMTtuPHIubGVuZ3RoJiZyW25dPj42PT0yO24rKyllKys7cmV0dXJuIGV9cmV0dXJuIGU9PT1ELk9WRVJSVU4/ci5sZW5ndGgtdC0xOjB9IWZ1bmN0aW9uKGUpe2UuY3VycmVudD1cIlwiLGUuTkZDPVwiTkZDXCIsZS5ORkQ9XCJORkRcIixlLk5GS0M9XCJORktDXCIsZS5ORktEPVwiTkZLRFwifShMfHwoTD17fSkpLGZ1bmN0aW9uKGUpe2UuVU5FWFBFQ1RFRF9DT05USU5VRT1cInVuZXhwZWN0ZWQgY29udGludWF0aW9uIGJ5dGVcIixlLkJBRF9QUkVGSVg9XCJiYWQgY29kZXBvaW50IHByZWZpeFwiLGUuT1ZFUlJVTj1cInN0cmluZyBvdmVycnVuXCIsZS5NSVNTSU5HX0NPTlRJTlVFPVwibWlzc2luZyBjb250aW51YXRpb24gYnl0ZVwiLGUuT1VUX09GX1JBTkdFPVwib3V0IG9mIFVURi04IHJhbmdlXCIsZS5VVEYxNl9TVVJST0dBVEU9XCJVVEYtMTYgc3Vycm9nYXRlXCIsZS5PVkVSTE9ORz1cIm92ZXJsb25nIHJlcHJlc2VudGF0aW9uXCJ9KER8fChEPXt9KSk7Y29uc3QgcT1PYmplY3QuZnJlZXplKHtlcnJvcjpmdW5jdGlvbihlLHQscixuLGkpe3JldHVybiBCLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBjb2RlcG9pbnQgYXQgb2Zmc2V0ICR7dH07ICR7ZX1gLFwiYnl0ZXNcIixyKX0saWdub3JlOlUscmVwbGFjZTpmdW5jdGlvbihlLHQscixuLGkpe3JldHVybiBlPT09RC5PVkVSTE9ORz8obi5wdXNoKGkpLDApOihuLnB1c2goNjU1MzMpLFUoZSx0LHIpKX19KTtmdW5jdGlvbiBGKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7bnVsbD09dCYmKHQ9cS5lcnJvciksZT0oMCx5LmxFKShlKTtjb25zdCByPVtdO2xldCBuPTA7Zm9yKDtuPGUubGVuZ3RoOyl7Y29uc3QgaT1lW24rK107aWYoaT4+Nz09MCl7ci5wdXNoKGkpO2NvbnRpbnVlfWxldCBvPW51bGwscz1udWxsO2lmKDE5Mj09KDIyNCZpKSlvPTEscz0xMjc7ZWxzZSBpZigyMjQ9PSgyNDAmaSkpbz0yLHM9MjA0NztlbHNle2lmKDI0MCE9KDI0OCZpKSl7bis9dCgxMjg9PSgxOTImaSk/RC5VTkVYUEVDVEVEX0NPTlRJTlVFOkQuQkFEX1BSRUZJWCxuLTEsZSxyKTtjb250aW51ZX1vPTMscz02NTUzNX1pZihuLTErbz49ZS5sZW5ndGgpe24rPXQoRC5PVkVSUlVOLG4tMSxlLHIpO2NvbnRpbnVlfWxldCBhPWkmKDE8PDgtby0xKS0xO2ZvcihsZXQgaT0wO2k8bztpKyspe2xldCBpPWVbbl07aWYoMTI4IT0oMTkyJmkpKXtuKz10KEQuTUlTU0lOR19DT05USU5VRSxuLGUsciksYT1udWxsO2JyZWFrfWE9YTw8Nnw2MyZpLG4rK31udWxsIT09YSYmKGE+MTExNDExMT9uKz10KEQuT1VUX09GX1JBTkdFLG4tMS1vLGUscixhKTphPj01NTI5NiYmYTw9NTczNDM/bis9dChELlVURjE2X1NVUlJPR0FURSxuLTEtbyxlLHIsYSk6YTw9cz9uKz10KEQuT1ZFUkxPTkcsbi0xLW8sZSxyLGEpOnIucHVzaChhKSl9cmV0dXJuIHJ9KGUsdCkubWFwKChlPT5lPD02NTUzNT9TdHJpbmcuZnJvbUNoYXJDb2RlKGUpOihlLT02NTUzNixTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2KyhlPj4xMCYxMDIzKSw1NjMyMCsoMTAyMyZlKSkpKSkuam9pbihcIlwiKX1jbGFzcyBIIGV4dGVuZHMgSXtjb25zdHJ1Y3RvcihlKXtzdXBlcihcInN0cmluZ1wiLGUpfWRlZmF1bHRWYWx1ZSgpe3JldHVyblwiXCJ9ZW5jb2RlKGUsdCl7cmV0dXJuIHN1cGVyLmVuY29kZShlLGZ1bmN0aW9uKGUsdD1MLmN1cnJlbnQpe3QhPUwuY3VycmVudCYmKEIuY2hlY2tOb3JtYWxpemUoKSxlPWUubm9ybWFsaXplKHQpKTtsZXQgcj1bXTtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyl7Y29uc3Qgbj1lLmNoYXJDb2RlQXQodCk7aWYobjwxMjgpci5wdXNoKG4pO2Vsc2UgaWYobjwyMDQ4KXIucHVzaChuPj42fDE5Miksci5wdXNoKDYzJm58MTI4KTtlbHNlIGlmKDU1Mjk2PT0oNjQ1MTImbikpe3QrKztjb25zdCBpPWUuY2hhckNvZGVBdCh0KTtpZih0Pj1lLmxlbmd0aHx8NTYzMjAhPSg2NDUxMiZpKSl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHV0Zi04IHN0cmluZ1wiKTtjb25zdCBvPTY1NTM2KygoMTAyMyZuKTw8MTApKygxMDIzJmkpO3IucHVzaChvPj4xOHwyNDApLHIucHVzaChvPj4xMiY2M3wxMjgpLHIucHVzaChvPj42JjYzfDEyOCksci5wdXNoKDYzJm98MTI4KX1lbHNlIHIucHVzaChuPj4xMnwyMjQpLHIucHVzaChuPj42JjYzfDEyOCksci5wdXNoKDYzJm58MTI4KX1yZXR1cm4oMCx5LmxFKShyKX0odCkpfWRlY29kZShlKXtyZXR1cm4gRihzdXBlci5kZWNvZGUoZSkpfX1jbGFzcyB6IGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlLHQpe2xldCByPSExO2NvbnN0IG49W107ZS5mb3JFYWNoKChlPT57ZS5keW5hbWljJiYocj0hMCksbi5wdXNoKGUudHlwZSl9KSksc3VwZXIoXCJ0dXBsZVwiLFwidHVwbGUoXCIrbi5qb2luKFwiLFwiKStcIilcIix0LHIpLHRoaXMuY29kZXJzPWV9ZGVmYXVsdFZhbHVlKCl7Y29uc3QgZT1bXTt0aGlzLmNvZGVycy5mb3JFYWNoKCh0PT57ZS5wdXNoKHQuZGVmYXVsdFZhbHVlKCkpfSkpO2NvbnN0IHQ9dGhpcy5jb2RlcnMucmVkdWNlKCgoZSx0KT0+e2NvbnN0IHI9dC5sb2NhbE5hbWU7cmV0dXJuIHImJihlW3JdfHwoZVtyXT0wKSxlW3JdKyspLGV9KSx7fSk7cmV0dXJuIHRoaXMuY29kZXJzLmZvckVhY2goKChyLG4pPT57bGV0IGk9ci5sb2NhbE5hbWU7aSYmMT09PXRbaV0mJihcImxlbmd0aFwiPT09aSYmKGk9XCJfbGVuZ3RoXCIpLG51bGw9PWVbaV0mJihlW2ldPWVbbl0pKX0pKSxPYmplY3QuZnJlZXplKGUpfWVuY29kZShlLHQpe3JldHVybiBrKGUsdGhpcy5jb2RlcnMsdCl9ZGVjb2RlKGUpe3JldHVybiBlLmNvZXJjZSh0aGlzLm5hbWUsUChlLHRoaXMuY29kZXJzKSl9fWNvbnN0IEs9bmV3IGkuWWQobyksVj1uZXcgUmVnRXhwKC9eYnl0ZXMoWzAtOV0qKSQvKSxHPW5ldyBSZWdFeHAoL14odT9pbnQpKFswLTldKikkLyk7Y2xhc3MgV3tjb25zdHJ1Y3RvcihlKXsoMCxuLnpHKSh0aGlzLFwiY29lcmNlRnVuY1wiLGV8fG51bGwpfV9nZXRDb2RlcihlKXtzd2l0Y2goZS5iYXNlVHlwZSl7Y2FzZVwiYWRkcmVzc1wiOnJldHVybiBuZXcgRShlLm5hbWUpO2Nhc2VcImJvb2xcIjpyZXR1cm4gbmV3IE0oZS5uYW1lKTtjYXNlXCJzdHJpbmdcIjpyZXR1cm4gbmV3IEgoZS5uYW1lKTtjYXNlXCJieXRlc1wiOnJldHVybiBuZXcgVChlLm5hbWUpO2Nhc2VcImFycmF5XCI6cmV0dXJuIG5ldyBPKHRoaXMuX2dldENvZGVyKGUuYXJyYXlDaGlsZHJlbiksZS5hcnJheUxlbmd0aCxlLm5hbWUpO2Nhc2VcInR1cGxlXCI6cmV0dXJuIG5ldyB6KChlLmNvbXBvbmVudHN8fFtdKS5tYXAoKGU9PnRoaXMuX2dldENvZGVyKGUpKSksZS5uYW1lKTtjYXNlXCJcIjpyZXR1cm4gbmV3IE4oZS5uYW1lKX1sZXQgdD1lLnR5cGUubWF0Y2goRyk7aWYodCl7bGV0IHI9cGFyc2VJbnQodFsyXXx8XCIyNTZcIik7cmV0dXJuKDA9PT1yfHxyPjI1Nnx8ciU4IT0wKSYmSy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIFwiK3RbMV0rXCIgYml0IGxlbmd0aFwiLFwicGFyYW1cIixlKSxuZXcgaihyLzgsXCJpbnRcIj09PXRbMV0sZS5uYW1lKX1pZih0PWUudHlwZS5tYXRjaChWKSx0KXtsZXQgcj1wYXJzZUludCh0WzFdKTtyZXR1cm4oMD09PXJ8fHI+MzIpJiZLLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYnl0ZXMgbGVuZ3RoXCIsXCJwYXJhbVwiLGUpLG5ldyBSKHIsZS5uYW1lKX1yZXR1cm4gSy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHR5cGVcIixcInR5cGVcIixlLnR5cGUpfV9nZXRXb3JkU2l6ZSgpe3JldHVybiAzMn1fZ2V0UmVhZGVyKGUsdCl7cmV0dXJuIG5ldyBfKGUsdGhpcy5fZ2V0V29yZFNpemUoKSx0aGlzLmNvZXJjZUZ1bmMsdCl9X2dldFdyaXRlcigpe3JldHVybiBuZXcgdyh0aGlzLl9nZXRXb3JkU2l6ZSgpKX1nZXREZWZhdWx0VmFsdWUoZSl7Y29uc3QgdD1lLm1hcCgoZT0+dGhpcy5fZ2V0Q29kZXIocC5mcm9tKGUpKSkpO3JldHVybiBuZXcgeih0LFwiX1wiKS5kZWZhdWx0VmFsdWUoKX1lbmNvZGUoZSx0KXtlLmxlbmd0aCE9PXQubGVuZ3RoJiZLLnRocm93RXJyb3IoXCJ0eXBlcy92YWx1ZXMgbGVuZ3RoIG1pc21hdGNoXCIsaS5ZZC5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7Y291bnQ6e3R5cGVzOmUubGVuZ3RoLHZhbHVlczp0Lmxlbmd0aH0sdmFsdWU6e3R5cGVzOmUsdmFsdWVzOnR9fSk7Y29uc3Qgcj1lLm1hcCgoZT0+dGhpcy5fZ2V0Q29kZXIocC5mcm9tKGUpKSkpLG49bmV3IHoocixcIl9cIiksbz10aGlzLl9nZXRXcml0ZXIoKTtyZXR1cm4gbi5lbmNvZGUobyx0KSxvLmRhdGF9ZGVjb2RlKGUsdCxyKXtjb25zdCBuPWUubWFwKChlPT50aGlzLl9nZXRDb2RlcihwLmZyb20oZSkpKSk7cmV0dXJuIG5ldyB6KG4sXCJfXCIpLmRlY29kZSh0aGlzLl9nZXRSZWFkZXIoKDAseS5sRSkodCkscikpfX1uZXcgV30sNDU5NDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7ci5kKHQse0tuOigpPT5kfSk7dmFyIG49cigzMjg2KSxpPXIoNTE1NCksbz1yKDgxOTcpO2NvbnN0IHM9bmV3KHIoNzExKS5ZZCkoXCJhZGRyZXNzLzUuNi4xXCIpO2Z1bmN0aW9uIGEoZSl7KDAsbi5BNykoZSwyMCl8fHMudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhZGRyZXNzXCIsXCJhZGRyZXNzXCIsZSk7Y29uc3QgdD0oZT1lLnRvTG93ZXJDYXNlKCkpLnN1YnN0cmluZygyKS5zcGxpdChcIlwiKSxyPW5ldyBVaW50OEFycmF5KDQwKTtmb3IobGV0IGU9MDtlPDQwO2UrKylyW2VdPXRbZV0uY2hhckNvZGVBdCgwKTtjb25zdCBpPSgwLG4ubEUpKCgwLG8udykocikpO2ZvcihsZXQgZT0wO2U8NDA7ZSs9MilpW2U+PjFdPj40Pj04JiYodFtlXT10W2VdLnRvVXBwZXJDYXNlKCkpLCgxNSZpW2U+PjFdKT49OCYmKHRbZSsxXT10W2UrMV0udG9VcHBlckNhc2UoKSk7cmV0dXJuXCIweFwiK3Quam9pbihcIlwiKX1jb25zdCBjPXt9O2ZvcihsZXQgZT0wO2U8MTA7ZSsrKWNbU3RyaW5nKGUpXT1TdHJpbmcoZSk7Zm9yKGxldCBlPTA7ZTwyNjtlKyspY1tTdHJpbmcuZnJvbUNoYXJDb2RlKDY1K2UpXT1TdHJpbmcoMTArZSk7Y29uc3QgZj1NYXRoLmZsb29yKCh1PTkwMDcxOTkyNTQ3NDA5OTEsTWF0aC5sb2cxMD9NYXRoLmxvZzEwKHUpOk1hdGgubG9nKHUpL01hdGguTE4xMCkpO3ZhciB1O2Z1bmN0aW9uIGQoZSl7bGV0IHQ9bnVsbDtpZihcInN0cmluZ1wiIT10eXBlb2YgZSYmcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3NcIixcImFkZHJlc3NcIixlKSxlLm1hdGNoKC9eKDB4KT9bMC05YS1mQS1GXXs0MH0kLykpXCIweFwiIT09ZS5zdWJzdHJpbmcoMCwyKSYmKGU9XCIweFwiK2UpLHQ9YShlKSxlLm1hdGNoKC8oW0EtRl0uKlthLWZdKXwoW2EtZl0uKltBLUZdKS8pJiZ0IT09ZSYmcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJiYWQgYWRkcmVzcyBjaGVja3N1bVwiLFwiYWRkcmVzc1wiLGUpO2Vsc2UgaWYoZS5tYXRjaCgvXlhFWzAtOV17Mn1bMC05QS1aYS16XXszMCwzMX0kLykpe2ZvcihlLnN1YnN0cmluZygyLDQpIT09ZnVuY3Rpb24oZSl7bGV0IHQ9KGU9KGU9ZS50b1VwcGVyQ2FzZSgpKS5zdWJzdHJpbmcoNCkrZS5zdWJzdHJpbmcoMCwyKStcIjAwXCIpLnNwbGl0KFwiXCIpLm1hcCgoZT0+Y1tlXSkpLmpvaW4oXCJcIik7Zm9yKDt0Lmxlbmd0aD49Zjspe2xldCBlPXQuc3Vic3RyaW5nKDAsZik7dD1wYXJzZUludChlLDEwKSU5Nyt0LnN1YnN0cmluZyhlLmxlbmd0aCl9bGV0IHI9U3RyaW5nKDk4LXBhcnNlSW50KHQsMTApJTk3KTtmb3IoO3IubGVuZ3RoPDI7KXI9XCIwXCIrcjtyZXR1cm4gcn0oZSkmJnMudGhyb3dBcmd1bWVudEVycm9yKFwiYmFkIGljYXAgY2hlY2tzdW1cIixcImFkZHJlc3NcIixlKSx0PSgwLGkuZyQpKGUuc3Vic3RyaW5nKDQpKTt0Lmxlbmd0aDw0MDspdD1cIjBcIit0O3Q9YShcIjB4XCIrdCl9ZWxzZSBzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzc1wiLFwiYWRkcmVzc1wiLGUpO3JldHVybiB0fX0sNTE1NDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7ci5kKHQse08kOigpPT5oLGckOigpPT5nfSk7dmFyIG49cigzNTUwKSxpPXIubihuKSxvPXIoMzI4Nikscz1yKDcxMSksYT1pKCkuQk47Y29uc3QgYz1uZXcgcy5ZZChcImJpZ251bWJlci81LjYuMlwiKSxmPXt9LHU9OTAwNzE5OTI1NDc0MDk5MTtsZXQgZD0hMTtjbGFzcyBoe2NvbnN0cnVjdG9yKGUsdCl7ZSE9PWYmJmMudGhyb3dFcnJvcihcImNhbm5vdCBjYWxsIGNvbnN0cnVjdG9yIGRpcmVjdGx5OyB1c2UgQmlnTnVtYmVyLmZyb21cIixzLllkLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm5ldyAoQmlnTnVtYmVyKVwifSksdGhpcy5faGV4PXQsdGhpcy5faXNCaWdOdW1iZXI9ITAsT2JqZWN0LmZyZWV6ZSh0aGlzKX1mcm9tVHdvcyhlKXtyZXR1cm4gcChiKHRoaXMpLmZyb21Ud29zKGUpKX10b1R3b3MoZSl7cmV0dXJuIHAoYih0aGlzKS50b1R3b3MoZSkpfWFicygpe3JldHVyblwiLVwiPT09dGhpcy5faGV4WzBdP2guZnJvbSh0aGlzLl9oZXguc3Vic3RyaW5nKDEpKTp0aGlzfWFkZChlKXtyZXR1cm4gcChiKHRoaXMpLmFkZChiKGUpKSl9c3ViKGUpe3JldHVybiBwKGIodGhpcykuc3ViKGIoZSkpKX1kaXYoZSl7cmV0dXJuIGguZnJvbShlKS5pc1plcm8oKSYmeShcImRpdmlzaW9uLWJ5LXplcm9cIixcImRpdlwiKSxwKGIodGhpcykuZGl2KGIoZSkpKX1tdWwoZSl7cmV0dXJuIHAoYih0aGlzKS5tdWwoYihlKSkpfW1vZChlKXtjb25zdCB0PWIoZSk7cmV0dXJuIHQuaXNOZWcoKSYmeShcImRpdmlzaW9uLWJ5LXplcm9cIixcIm1vZFwiKSxwKGIodGhpcykudW1vZCh0KSl9cG93KGUpe2NvbnN0IHQ9YihlKTtyZXR1cm4gdC5pc05lZygpJiZ5KFwibmVnYXRpdmUtcG93ZXJcIixcInBvd1wiKSxwKGIodGhpcykucG93KHQpKX1hbmQoZSl7Y29uc3QgdD1iKGUpO3JldHVybih0aGlzLmlzTmVnYXRpdmUoKXx8dC5pc05lZygpKSYmeShcInVuYm91bmQtYml0d2lzZS1yZXN1bHRcIixcImFuZFwiKSxwKGIodGhpcykuYW5kKHQpKX1vcihlKXtjb25zdCB0PWIoZSk7cmV0dXJuKHRoaXMuaXNOZWdhdGl2ZSgpfHx0LmlzTmVnKCkpJiZ5KFwidW5ib3VuZC1iaXR3aXNlLXJlc3VsdFwiLFwib3JcIikscChiKHRoaXMpLm9yKHQpKX14b3IoZSl7Y29uc3QgdD1iKGUpO3JldHVybih0aGlzLmlzTmVnYXRpdmUoKXx8dC5pc05lZygpKSYmeShcInVuYm91bmQtYml0d2lzZS1yZXN1bHRcIixcInhvclwiKSxwKGIodGhpcykueG9yKHQpKX1tYXNrKGUpe3JldHVybih0aGlzLmlzTmVnYXRpdmUoKXx8ZTwwKSYmeShcIm5lZ2F0aXZlLXdpZHRoXCIsXCJtYXNrXCIpLHAoYih0aGlzKS5tYXNrbihlKSl9c2hsKGUpe3JldHVybih0aGlzLmlzTmVnYXRpdmUoKXx8ZTwwKSYmeShcIm5lZ2F0aXZlLXdpZHRoXCIsXCJzaGxcIikscChiKHRoaXMpLnNobG4oZSkpfXNocihlKXtyZXR1cm4odGhpcy5pc05lZ2F0aXZlKCl8fGU8MCkmJnkoXCJuZWdhdGl2ZS13aWR0aFwiLFwic2hyXCIpLHAoYih0aGlzKS5zaHJuKGUpKX1lcShlKXtyZXR1cm4gYih0aGlzKS5lcShiKGUpKX1sdChlKXtyZXR1cm4gYih0aGlzKS5sdChiKGUpKX1sdGUoZSl7cmV0dXJuIGIodGhpcykubHRlKGIoZSkpfWd0KGUpe3JldHVybiBiKHRoaXMpLmd0KGIoZSkpfWd0ZShlKXtyZXR1cm4gYih0aGlzKS5ndGUoYihlKSl9aXNOZWdhdGl2ZSgpe3JldHVyblwiLVwiPT09dGhpcy5faGV4WzBdfWlzWmVybygpe3JldHVybiBiKHRoaXMpLmlzWmVybygpfXRvTnVtYmVyKCl7dHJ5e3JldHVybiBiKHRoaXMpLnRvTnVtYmVyKCl9Y2F0Y2goZSl7eShcIm92ZXJmbG93XCIsXCJ0b051bWJlclwiLHRoaXMudG9TdHJpbmcoKSl9cmV0dXJuIG51bGx9dG9CaWdJbnQoKXt0cnl7cmV0dXJuIEJpZ0ludCh0aGlzLnRvU3RyaW5nKCkpfWNhdGNoKGUpe31yZXR1cm4gYy50aHJvd0Vycm9yKFwidGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBzdXBwb3J0IEJpZ0ludFwiLHMuWWQuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7dmFsdWU6dGhpcy50b1N0cmluZygpfSl9dG9TdHJpbmcoKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4wJiYoMTA9PT1hcmd1bWVudHNbMF0/ZHx8KGQ9ITAsYy53YXJuKFwiQmlnTnVtYmVyLnRvU3RyaW5nIGRvZXMgbm90IGFjY2VwdCBhbnkgcGFyYW1ldGVyczsgYmFzZS0xMCBpcyBhc3N1bWVkXCIpKToxNj09PWFyZ3VtZW50c1swXT9jLnRocm93RXJyb3IoXCJCaWdOdW1iZXIudG9TdHJpbmcgZG9lcyBub3QgYWNjZXB0IGFueSBwYXJhbWV0ZXJzOyB1c2UgYmlnTnVtYmVyLnRvSGV4U3RyaW5nKClcIixzLllkLmVycm9ycy5VTkVYUEVDVEVEX0FSR1VNRU5ULHt9KTpjLnRocm93RXJyb3IoXCJCaWdOdW1iZXIudG9TdHJpbmcgZG9lcyBub3QgYWNjZXB0IHBhcmFtZXRlcnNcIixzLllkLmVycm9ycy5VTkVYUEVDVEVEX0FSR1VNRU5ULHt9KSksYih0aGlzKS50b1N0cmluZygxMCl9dG9IZXhTdHJpbmcoKXtyZXR1cm4gdGhpcy5faGV4fXRvSlNPTihlKXtyZXR1cm57dHlwZTpcIkJpZ051bWJlclwiLGhleDp0aGlzLnRvSGV4U3RyaW5nKCl9fXN0YXRpYyBmcm9tKGUpe2lmKGUgaW5zdGFuY2VvZiBoKXJldHVybiBlO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBlLm1hdGNoKC9eLT8weFswLTlhLWZdKyQvaSk/bmV3IGgoZixsKGUpKTplLm1hdGNoKC9eLT9bMC05XSskLyk/bmV3IGgoZixsKG5ldyBhKGUpKSk6Yy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEJpZ051bWJlciBzdHJpbmdcIixcInZhbHVlXCIsZSk7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpcmV0dXJuIGUlMSYmeShcInVuZGVyZmxvd1wiLFwiQmlnTnVtYmVyLmZyb21cIixlKSwoZT49dXx8ZTw9LXUpJiZ5KFwib3ZlcmZsb3dcIixcIkJpZ051bWJlci5mcm9tXCIsZSksaC5mcm9tKFN0cmluZyhlKSk7Y29uc3QgdD1lO2lmKFwiYmlnaW50XCI9PXR5cGVvZiB0KXJldHVybiBoLmZyb20odC50b1N0cmluZygpKTtpZigoMCxvLl90KSh0KSlyZXR1cm4gaC5mcm9tKCgwLG8uRHYpKHQpKTtpZih0KWlmKHQudG9IZXhTdHJpbmcpe2NvbnN0IGU9dC50b0hleFN0cmluZygpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBoLmZyb20oZSl9ZWxzZXtsZXQgZT10Ll9oZXg7aWYobnVsbD09ZSYmXCJCaWdOdW1iZXJcIj09PXQudHlwZSYmKGU9dC5oZXgpLFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoKDAsby5BNykoZSl8fFwiLVwiPT09ZVswXSYmKDAsby5BNykoZS5zdWJzdHJpbmcoMSkpKSlyZXR1cm4gaC5mcm9tKGUpfXJldHVybiBjLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgQmlnTnVtYmVyIHZhbHVlXCIsXCJ2YWx1ZVwiLGUpfXN0YXRpYyBpc0JpZ051bWJlcihlKXtyZXR1cm4hKCFlfHwhZS5faXNCaWdOdW1iZXIpfX1mdW5jdGlvbiBsKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBsKGUudG9TdHJpbmcoMTYpKTtpZihcIi1cIj09PWVbMF0pcmV0dXJuXCItXCI9PT0oZT1lLnN1YnN0cmluZygxKSlbMF0mJmMudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXhcIixcInZhbHVlXCIsZSksXCIweDAwXCI9PT0oZT1sKGUpKT9lOlwiLVwiK2U7aWYoXCIweFwiIT09ZS5zdWJzdHJpbmcoMCwyKSYmKGU9XCIweFwiK2UpLFwiMHhcIj09PWUpcmV0dXJuXCIweDAwXCI7Zm9yKGUubGVuZ3RoJTImJihlPVwiMHgwXCIrZS5zdWJzdHJpbmcoMikpO2UubGVuZ3RoPjQmJlwiMHgwMFwiPT09ZS5zdWJzdHJpbmcoMCw0KTspZT1cIjB4XCIrZS5zdWJzdHJpbmcoNCk7cmV0dXJuIGV9ZnVuY3Rpb24gcChlKXtyZXR1cm4gaC5mcm9tKGwoZSkpfWZ1bmN0aW9uIGIoZSl7Y29uc3QgdD1oLmZyb20oZSkudG9IZXhTdHJpbmcoKTtyZXR1cm5cIi1cIj09PXRbMF0/bmV3IGEoXCItXCIrdC5zdWJzdHJpbmcoMyksMTYpOm5ldyBhKHQuc3Vic3RyaW5nKDIpLDE2KX1mdW5jdGlvbiB5KGUsdCxyKXtjb25zdCBuPXtmYXVsdDplLG9wZXJhdGlvbjp0fTtyZXR1cm4gbnVsbCE9ciYmKG4udmFsdWU9ciksYy50aHJvd0Vycm9yKGUscy5ZZC5lcnJvcnMuTlVNRVJJQ19GQVVMVCxuKX1mdW5jdGlvbiBnKGUpe3JldHVybiBuZXcgYShlLDM2KS50b1N0cmluZygxNil9fSwzMjg2OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtyLmQodCx7bEU6KCk9PmYsem86KCk9PnUseHM6KCk9PmcsRTE6KCk9PmIscDM6KCk9PnksJG06KCk9Pm0sRHY6KCk9PnAsX3Q6KCk9PmMsWnE6KCk9PnMsQTc6KCk9PmgsTjooKT0+dixHMTooKT0+ZH0pO2NvbnN0IG49bmV3KHIoNzExKS5ZZCkoXCJieXRlcy81LjYuMVwiKTtmdW5jdGlvbiBpKGUpe3JldHVybiEhZS50b0hleFN0cmluZ31mdW5jdGlvbiBvKGUpe3JldHVybiBlLnNsaWNlfHwoZS5zbGljZT1mdW5jdGlvbigpe2NvbnN0IHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtyZXR1cm4gbyhuZXcgVWludDhBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoZSx0KSkpfSksZX1mdW5jdGlvbiBzKGUpe3JldHVybiBoKGUpJiYhKGUubGVuZ3RoJTIpfHxjKGUpfWZ1bmN0aW9uIGEoZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGUmJmU9PWUmJmUlMT09MH1mdW5jdGlvbiBjKGUpe2lmKG51bGw9PWUpcmV0dXJuITE7aWYoZS5jb25zdHJ1Y3Rvcj09PVVpbnQ4QXJyYXkpcmV0dXJuITA7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuITE7aWYoIWEoZS5sZW5ndGgpfHxlLmxlbmd0aDwwKXJldHVybiExO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtjb25zdCByPWVbdF07aWYoIWEocil8fHI8MHx8cj49MjU2KXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIGYoZSx0KXtpZih0fHwodD17fSksXCJudW1iZXJcIj09dHlwZW9mIGUpe24uY2hlY2tTYWZlVWludDUzKGUsXCJpbnZhbGlkIGFycmF5aWZ5IHZhbHVlXCIpO2NvbnN0IHQ9W107Zm9yKDtlOyl0LnVuc2hpZnQoMjU1JmUpLGU9cGFyc2VJbnQoU3RyaW5nKGUvMjU2KSk7cmV0dXJuIDA9PT10Lmxlbmd0aCYmdC5wdXNoKDApLG8obmV3IFVpbnQ4QXJyYXkodCkpfWlmKHQuYWxsb3dNaXNzaW5nUHJlZml4JiZcInN0cmluZ1wiPT10eXBlb2YgZSYmXCIweFwiIT09ZS5zdWJzdHJpbmcoMCwyKSYmKGU9XCIweFwiK2UpLGkoZSkmJihlPWUudG9IZXhTdHJpbmcoKSksaChlKSl7bGV0IHI9ZS5zdWJzdHJpbmcoMik7ci5sZW5ndGglMiYmKFwibGVmdFwiPT09dC5oZXhQYWQ/cj1cIjBcIityOlwicmlnaHRcIj09PXQuaGV4UGFkP3IrPVwiMFwiOm4udGhyb3dBcmd1bWVudEVycm9yKFwiaGV4IGRhdGEgaXMgb2RkLWxlbmd0aFwiLFwidmFsdWVcIixlKSk7Y29uc3QgaT1bXTtmb3IobGV0IGU9MDtlPHIubGVuZ3RoO2UrPTIpaS5wdXNoKHBhcnNlSW50KHIuc3Vic3RyaW5nKGUsZSsyKSwxNikpO3JldHVybiBvKG5ldyBVaW50OEFycmF5KGkpKX1yZXR1cm4gYyhlKT9vKG5ldyBVaW50OEFycmF5KGUpKTpuLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYXJyYXlpZnkgdmFsdWVcIixcInZhbHVlXCIsZSl9ZnVuY3Rpb24gdShlKXtjb25zdCB0PWUubWFwKChlPT5mKGUpKSkscj10LnJlZHVjZSgoKGUsdCk9PmUrdC5sZW5ndGgpLDApLG49bmV3IFVpbnQ4QXJyYXkocik7cmV0dXJuIHQucmVkdWNlKCgoZSx0KT0+KG4uc2V0KHQsZSksZSt0Lmxlbmd0aCkpLDApLG8obil9ZnVuY3Rpb24gZChlKXtsZXQgdD1mKGUpO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gdDtsZXQgcj0wO2Zvcig7cjx0Lmxlbmd0aCYmMD09PXRbcl07KXIrKztyZXR1cm4gciYmKHQ9dC5zbGljZShyKSksdH1mdW5jdGlvbiBoKGUsdCl7cmV0dXJuIShcInN0cmluZ1wiIT10eXBlb2YgZXx8IWUubWF0Y2goL14weFswLTlBLUZhLWZdKiQvKXx8dCYmZS5sZW5ndGghPT0yKzIqdCl9Y29uc3QgbD1cIjAxMjM0NTY3ODlhYmNkZWZcIjtmdW5jdGlvbiBwKGUsdCl7aWYodHx8KHQ9e30pLFwibnVtYmVyXCI9PXR5cGVvZiBlKXtuLmNoZWNrU2FmZVVpbnQ1MyhlLFwiaW52YWxpZCBoZXhsaWZ5IHZhbHVlXCIpO2xldCB0PVwiXCI7Zm9yKDtlOyl0PWxbMTUmZV0rdCxlPU1hdGguZmxvb3IoZS8xNik7cmV0dXJuIHQubGVuZ3RoPyh0Lmxlbmd0aCUyJiYodD1cIjBcIit0KSxcIjB4XCIrdCk6XCIweDAwXCJ9aWYoXCJiaWdpbnRcIj09dHlwZW9mIGUpcmV0dXJuKGU9ZS50b1N0cmluZygxNikpLmxlbmd0aCUyP1wiMHgwXCIrZTpcIjB4XCIrZTtpZih0LmFsbG93TWlzc2luZ1ByZWZpeCYmXCJzdHJpbmdcIj09dHlwZW9mIGUmJlwiMHhcIiE9PWUuc3Vic3RyaW5nKDAsMikmJihlPVwiMHhcIitlKSxpKGUpKXJldHVybiBlLnRvSGV4U3RyaW5nKCk7aWYoaChlKSlyZXR1cm4gZS5sZW5ndGglMiYmKFwibGVmdFwiPT09dC5oZXhQYWQ/ZT1cIjB4MFwiK2Uuc3Vic3RyaW5nKDIpOlwicmlnaHRcIj09PXQuaGV4UGFkP2UrPVwiMFwiOm4udGhyb3dBcmd1bWVudEVycm9yKFwiaGV4IGRhdGEgaXMgb2RkLWxlbmd0aFwiLFwidmFsdWVcIixlKSksZS50b0xvd2VyQ2FzZSgpO2lmKGMoZSkpe2xldCB0PVwiMHhcIjtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl7bGV0IG49ZVtyXTt0Kz1sWygyNDAmbik+PjRdK2xbMTUmbl19cmV0dXJuIHR9cmV0dXJuIG4udGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXhsaWZ5IHZhbHVlXCIsXCJ2YWx1ZVwiLGUpfWZ1bmN0aW9uIGIoZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpZT1wKGUpO2Vsc2UgaWYoIWgoZSl8fGUubGVuZ3RoJTIpcmV0dXJuIG51bGw7cmV0dXJuKGUubGVuZ3RoLTIpLzJ9ZnVuY3Rpb24geShlLHQscil7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGU/ZT1wKGUpOighaChlKXx8ZS5sZW5ndGglMikmJm4udGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXhEYXRhXCIsXCJ2YWx1ZVwiLGUpLHQ9MisyKnQsbnVsbCE9cj9cIjB4XCIrZS5zdWJzdHJpbmcodCwyKzIqcik6XCIweFwiK2Uuc3Vic3RyaW5nKHQpfWZ1bmN0aW9uIGcoZSl7bGV0IHQ9XCIweFwiO3JldHVybiBlLmZvckVhY2goKGU9Pnt0Kz1wKGUpLnN1YnN0cmluZygyKX0pKSx0fWZ1bmN0aW9uIG0oZSx0KXtmb3IoXCJzdHJpbmdcIiE9dHlwZW9mIGU/ZT1wKGUpOmgoZSl8fG4udGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXggc3RyaW5nXCIsXCJ2YWx1ZVwiLGUpLGUubGVuZ3RoPjIqdCsyJiZuLnRocm93QXJndW1lbnRFcnJvcihcInZhbHVlIG91dCBvZiByYW5nZVwiLFwidmFsdWVcIixhcmd1bWVudHNbMV0pO2UubGVuZ3RoPDIqdCsyOyllPVwiMHgwXCIrZS5zdWJzdHJpbmcoMik7cmV0dXJuIGV9ZnVuY3Rpb24gdihlKXtjb25zdCB0PXtyOlwiMHhcIixzOlwiMHhcIixfdnM6XCIweFwiLHJlY292ZXJ5UGFyYW06MCx2OjAseVBhcml0eUFuZFM6XCIweFwiLGNvbXBhY3Q6XCIweFwifTtpZihzKGUpKXtsZXQgcj1mKGUpOzY0PT09ci5sZW5ndGg/KHQudj0yNysoclszMl0+PjcpLHJbMzJdJj0xMjcsdC5yPXAoci5zbGljZSgwLDMyKSksdC5zPXAoci5zbGljZSgzMiw2NCkpKTo2NT09PXIubGVuZ3RoPyh0LnI9cChyLnNsaWNlKDAsMzIpKSx0LnM9cChyLnNsaWNlKDMyLDY0KSksdC52PXJbNjRdKTpuLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgc2lnbmF0dXJlIHN0cmluZ1wiLFwic2lnbmF0dXJlXCIsZSksdC52PDI3JiYoMD09PXQudnx8MT09PXQudj90LnYrPTI3Om4udGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIGludmFsaWQgdiBieXRlXCIsXCJzaWduYXR1cmVcIixlKSksdC5yZWNvdmVyeVBhcmFtPTEtdC52JTIsdC5yZWNvdmVyeVBhcmFtJiYoclszMl18PTEyOCksdC5fdnM9cChyLnNsaWNlKDMyLDY0KSl9ZWxzZXtpZih0LnI9ZS5yLHQucz1lLnMsdC52PWUudix0LnJlY292ZXJ5UGFyYW09ZS5yZWNvdmVyeVBhcmFtLHQuX3ZzPWUuX3ZzLG51bGwhPXQuX3ZzKXtjb25zdCByPWZ1bmN0aW9uKGUsdCl7KGU9ZihlKSkubGVuZ3RoPnQmJm4udGhyb3dBcmd1bWVudEVycm9yKFwidmFsdWUgb3V0IG9mIHJhbmdlXCIsXCJ2YWx1ZVwiLGFyZ3VtZW50c1swXSk7Y29uc3Qgcj1uZXcgVWludDhBcnJheSh0KTtyZXR1cm4gci5zZXQoZSx0LWUubGVuZ3RoKSxvKHIpfShmKHQuX3ZzKSwzMik7dC5fdnM9cChyKTtjb25zdCBpPXJbMF0+PTEyOD8xOjA7bnVsbD09dC5yZWNvdmVyeVBhcmFtP3QucmVjb3ZlcnlQYXJhbT1pOnQucmVjb3ZlcnlQYXJhbSE9PWkmJm4udGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIHJlY292ZXJ5UGFyYW0gbWlzbWF0Y2ggX3ZzXCIsXCJzaWduYXR1cmVcIixlKSxyWzBdJj0xMjc7Y29uc3Qgcz1wKHIpO251bGw9PXQucz90LnM9czp0LnMhPT1zJiZuLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSB2IG1pc21hdGNoIF92c1wiLFwic2lnbmF0dXJlXCIsZSl9aWYobnVsbD09dC5yZWNvdmVyeVBhcmFtKW51bGw9PXQudj9uLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBtaXNzaW5nIHYgYW5kIHJlY292ZXJ5UGFyYW1cIixcInNpZ25hdHVyZVwiLGUpOjA9PT10LnZ8fDE9PT10LnY/dC5yZWNvdmVyeVBhcmFtPXQudjp0LnJlY292ZXJ5UGFyYW09MS10LnYlMjtlbHNlIGlmKG51bGw9PXQudil0LnY9MjcrdC5yZWNvdmVyeVBhcmFtO2Vsc2V7Y29uc3Qgcj0wPT09dC52fHwxPT09dC52P3QudjoxLXQudiUyO3QucmVjb3ZlcnlQYXJhbSE9PXImJm4udGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIHJlY292ZXJ5UGFyYW0gbWlzbWF0Y2ggdlwiLFwic2lnbmF0dXJlXCIsZSl9bnVsbCE9dC5yJiZoKHQucik/dC5yPW0odC5yLDMyKTpuLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBtaXNzaW5nIG9yIGludmFsaWQgclwiLFwic2lnbmF0dXJlXCIsZSksbnVsbCE9dC5zJiZoKHQucyk/dC5zPW0odC5zLDMyKTpuLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBtaXNzaW5nIG9yIGludmFsaWQgc1wiLFwic2lnbmF0dXJlXCIsZSk7Y29uc3Qgcj1mKHQucyk7clswXT49MTI4JiZuLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBzIG91dCBvZiByYW5nZVwiLFwic2lnbmF0dXJlXCIsZSksdC5yZWNvdmVyeVBhcmFtJiYoclswXXw9MTI4KTtjb25zdCBpPXAocik7dC5fdnMmJihoKHQuX3ZzKXx8bi50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgaW52YWxpZCBfdnNcIixcInNpZ25hdHVyZVwiLGUpLHQuX3ZzPW0odC5fdnMsMzIpKSxudWxsPT10Ll92cz90Ll92cz1pOnQuX3ZzIT09aSYmbi50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgX3ZzIG1pc21hdGNoIHYgYW5kIHNcIixcInNpZ25hdHVyZVwiLGUpfXJldHVybiB0LnlQYXJpdHlBbmRTPXQuX3ZzLHQuY29tcGFjdD10LnIrdC55UGFyaXR5QW5kUy5zdWJzdHJpbmcoMiksdH19LDEwNDY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3IuZCh0LHtCejooKT0+YSxfWTooKT0+byxmaDooKT0+cyx0TDooKT0+aX0pO3ZhciBuPXIoNTE1NCk7Y29uc3QgaT1uLk8kLmZyb20oLTEpLG89bi5PJC5mcm9tKDApLHM9bi5PJC5mcm9tKDEpLGE9bi5PJC5mcm9tKFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpfSw4MTk3OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtyLmQodCx7dzooKT0+c30pO3ZhciBuPXIoMTA5NCksaT1yLm4obiksbz1yKDMyODYpO2Z1bmN0aW9uIHMoZSl7cmV0dXJuXCIweFwiK2koKS5rZWNjYWtfMjU2KCgwLG8ubEUpKGUpKX19LDcxMTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7ci5kKHQse1lkOigpPT5ofSk7bGV0IG49ITEsaT0hMTtjb25zdCBvPXtkZWJ1ZzoxLGRlZmF1bHQ6MixpbmZvOjIsd2FybmluZzozLGVycm9yOjQsb2ZmOjV9O2xldCBzPW8uZGVmYXVsdCxhPW51bGw7Y29uc3QgYz1mdW5jdGlvbigpe3RyeXtjb25zdCBlPVtdO2lmKFtcIk5GRFwiLFwiTkZDXCIsXCJORktEXCIsXCJORktDXCJdLmZvckVhY2goKHQ9Pnt0cnl7aWYoXCJ0ZXN0XCIhPT1cInRlc3RcIi5ub3JtYWxpemUodCkpdGhyb3cgbmV3IEVycm9yKFwiYmFkIG5vcm1hbGl6ZVwiKX1jYXRjaChyKXtlLnB1c2godCl9fSkpLGUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgXCIrZS5qb2luKFwiLCBcIikpO2lmKFN0cmluZy5mcm9tQ2hhckNvZGUoMjMzKS5ub3JtYWxpemUoXCJORkRcIikhPT1TdHJpbmcuZnJvbUNoYXJDb2RlKDEwMSw3NjkpKXRocm93IG5ldyBFcnJvcihcImJyb2tlbiBpbXBsZW1lbnRhdGlvblwiKX1jYXRjaChlKXtyZXR1cm4gZS5tZXNzYWdlfXJldHVybiBudWxsfSgpO3ZhciBmLHU7IWZ1bmN0aW9uKGUpe2UuREVCVUc9XCJERUJVR1wiLGUuSU5GTz1cIklORk9cIixlLldBUk5JTkc9XCJXQVJOSU5HXCIsZS5FUlJPUj1cIkVSUk9SXCIsZS5PRkY9XCJPRkZcIn0oZnx8KGY9e30pKSxmdW5jdGlvbihlKXtlLlVOS05PV05fRVJST1I9XCJVTktOT1dOX0VSUk9SXCIsZS5OT1RfSU1QTEVNRU5URUQ9XCJOT1RfSU1QTEVNRU5URURcIixlLlVOU1VQUE9SVEVEX09QRVJBVElPTj1cIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLGUuTkVUV09SS19FUlJPUj1cIk5FVFdPUktfRVJST1JcIixlLlNFUlZFUl9FUlJPUj1cIlNFUlZFUl9FUlJPUlwiLGUuVElNRU9VVD1cIlRJTUVPVVRcIixlLkJVRkZFUl9PVkVSUlVOPVwiQlVGRkVSX09WRVJSVU5cIixlLk5VTUVSSUNfRkFVTFQ9XCJOVU1FUklDX0ZBVUxUXCIsZS5NSVNTSU5HX05FVz1cIk1JU1NJTkdfTkVXXCIsZS5JTlZBTElEX0FSR1VNRU5UPVwiSU5WQUxJRF9BUkdVTUVOVFwiLGUuTUlTU0lOR19BUkdVTUVOVD1cIk1JU1NJTkdfQVJHVU1FTlRcIixlLlVORVhQRUNURURfQVJHVU1FTlQ9XCJVTkVYUEVDVEVEX0FSR1VNRU5UXCIsZS5DQUxMX0VYQ0VQVElPTj1cIkNBTExfRVhDRVBUSU9OXCIsZS5JTlNVRkZJQ0lFTlRfRlVORFM9XCJJTlNVRkZJQ0lFTlRfRlVORFNcIixlLk5PTkNFX0VYUElSRUQ9XCJOT05DRV9FWFBJUkVEXCIsZS5SRVBMQUNFTUVOVF9VTkRFUlBSSUNFRD1cIlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEXCIsZS5VTlBSRURJQ1RBQkxFX0dBU19MSU1JVD1cIlVOUFJFRElDVEFCTEVfR0FTX0xJTUlUXCIsZS5UUkFOU0FDVElPTl9SRVBMQUNFRD1cIlRSQU5TQUNUSU9OX1JFUExBQ0VEXCJ9KHV8fCh1PXt9KSk7Y29uc3QgZD1cIjAxMjM0NTY3ODlhYmNkZWZcIjtjbGFzcyBoe2NvbnN0cnVjdG9yKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidmVyc2lvblwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmUsd3JpdGFibGU6ITF9KX1fbG9nKGUsdCl7Y29uc3Qgcj1lLnRvTG93ZXJDYXNlKCk7bnVsbD09b1tyXSYmdGhpcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxvZyBsZXZlbCBuYW1lXCIsXCJsb2dMZXZlbFwiLGUpLHM+b1tyXXx8Y29uc29sZS5sb2cuYXBwbHkoY29uc29sZSx0KX1kZWJ1ZyguLi5lKXt0aGlzLl9sb2coaC5sZXZlbHMuREVCVUcsZSl9aW5mbyguLi5lKXt0aGlzLl9sb2coaC5sZXZlbHMuSU5GTyxlKX13YXJuKC4uLmUpe3RoaXMuX2xvZyhoLmxldmVscy5XQVJOSU5HLGUpfW1ha2VFcnJvcihlLHQscil7aWYoaSlyZXR1cm4gdGhpcy5tYWtlRXJyb3IoXCJjZW5zb3JlZCBlcnJvclwiLHQse30pO3R8fCh0PWguZXJyb3JzLlVOS05PV05fRVJST1IpLHJ8fChyPXt9KTtjb25zdCBuPVtdO09iamVjdC5rZXlzKHIpLmZvckVhY2goKGU9Pntjb25zdCB0PXJbZV07dHJ5e2lmKHQgaW5zdGFuY2VvZiBVaW50OEFycmF5KXtsZXQgcj1cIlwiO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKXIrPWRbdFtlXT4+NF0scis9ZFsxNSZ0W2VdXTtuLnB1c2goZStcIj1VaW50OEFycmF5KDB4XCIrcitcIilcIil9ZWxzZSBuLnB1c2goZStcIj1cIitKU09OLnN0cmluZ2lmeSh0KSl9Y2F0Y2godCl7bi5wdXNoKGUrXCI9XCIrSlNPTi5zdHJpbmdpZnkocltlXS50b1N0cmluZygpKSl9fSkpLG4ucHVzaChgY29kZT0ke3R9YCksbi5wdXNoKGB2ZXJzaW9uPSR7dGhpcy52ZXJzaW9ufWApO2NvbnN0IG89ZTtsZXQgcz1cIlwiO3N3aXRjaCh0KXtjYXNlIHUuTlVNRVJJQ19GQVVMVDp7cz1cIk5VTUVSSUNfRkFVTFRcIjtjb25zdCB0PWU7c3dpdGNoKHQpe2Nhc2VcIm92ZXJmbG93XCI6Y2FzZVwidW5kZXJmbG93XCI6Y2FzZVwiZGl2aXNpb24tYnktemVyb1wiOnMrPVwiLVwiK3Q7YnJlYWs7Y2FzZVwibmVnYXRpdmUtcG93ZXJcIjpjYXNlXCJuZWdhdGl2ZS13aWR0aFwiOnMrPVwiLXVuc3VwcG9ydGVkXCI7YnJlYWs7Y2FzZVwidW5ib3VuZC1iaXR3aXNlLXJlc3VsdFwiOnMrPVwiLXVuYm91bmQtcmVzdWx0XCJ9YnJlYWt9Y2FzZSB1LkNBTExfRVhDRVBUSU9OOmNhc2UgdS5JTlNVRkZJQ0lFTlRfRlVORFM6Y2FzZSB1Lk1JU1NJTkdfTkVXOmNhc2UgdS5OT05DRV9FWFBJUkVEOmNhc2UgdS5SRVBMQUNFTUVOVF9VTkRFUlBSSUNFRDpjYXNlIHUuVFJBTlNBQ1RJT05fUkVQTEFDRUQ6Y2FzZSB1LlVOUFJFRElDVEFCTEVfR0FTX0xJTUlUOnM9dH1zJiYoZSs9XCIgWyBTZWU6IGh0dHBzOi8vbGlua3MuZXRoZXJzLm9yZy92NS1lcnJvcnMtXCIrcytcIiBdXCIpLG4ubGVuZ3RoJiYoZSs9XCIgKFwiK24uam9pbihcIiwgXCIpK1wiKVwiKTtjb25zdCBhPW5ldyBFcnJvcihlKTtyZXR1cm4gYS5yZWFzb249byxhLmNvZGU9dCxPYmplY3Qua2V5cyhyKS5mb3JFYWNoKChmdW5jdGlvbihlKXthW2VdPXJbZV19KSksYX10aHJvd0Vycm9yKGUsdCxyKXt0aHJvdyB0aGlzLm1ha2VFcnJvcihlLHQscil9dGhyb3dBcmd1bWVudEVycm9yKGUsdCxyKXtyZXR1cm4gdGhpcy50aHJvd0Vycm9yKGUsaC5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6dCx2YWx1ZTpyfSl9YXNzZXJ0KGUsdCxyLG4pe2V8fHRoaXMudGhyb3dFcnJvcih0LHIsbil9YXNzZXJ0QXJndW1lbnQoZSx0LHIsbil7ZXx8dGhpcy50aHJvd0FyZ3VtZW50RXJyb3IodCxyLG4pfWNoZWNrTm9ybWFsaXplKGUpe251bGw9PWUmJihlPVwicGxhdGZvcm0gbWlzc2luZyBTdHJpbmcucHJvdG90eXBlLm5vcm1hbGl6ZVwiKSxjJiZ0aGlzLnRocm93RXJyb3IoXCJwbGF0Zm9ybSBtaXNzaW5nIFN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsaC5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJTdHJpbmcucHJvdG90eXBlLm5vcm1hbGl6ZVwiLGZvcm06Y30pfWNoZWNrU2FmZVVpbnQ1MyhlLHQpe1wibnVtYmVyXCI9PXR5cGVvZiBlJiYobnVsbD09dCYmKHQ9XCJ2YWx1ZSBub3Qgc2FmZVwiKSwoZTwwfHxlPj05MDA3MTk5MjU0NzQwOTkxKSYmdGhpcy50aHJvd0Vycm9yKHQsaC5lcnJvcnMuTlVNRVJJQ19GQVVMVCx7b3BlcmF0aW9uOlwiY2hlY2tTYWZlSW50ZWdlclwiLGZhdWx0Olwib3V0LW9mLXNhZmUtcmFuZ2VcIix2YWx1ZTplfSksZSUxJiZ0aGlzLnRocm93RXJyb3IodCxoLmVycm9ycy5OVU1FUklDX0ZBVUxULHtvcGVyYXRpb246XCJjaGVja1NhZmVJbnRlZ2VyXCIsZmF1bHQ6XCJub24taW50ZWdlclwiLHZhbHVlOmV9KSl9Y2hlY2tBcmd1bWVudENvdW50KGUsdCxyKXtyPXI/XCI6IFwiK3I6XCJcIixlPHQmJnRoaXMudGhyb3dFcnJvcihcIm1pc3NpbmcgYXJndW1lbnRcIityLGguZXJyb3JzLk1JU1NJTkdfQVJHVU1FTlQse2NvdW50OmUsZXhwZWN0ZWRDb3VudDp0fSksZT50JiZ0aGlzLnRocm93RXJyb3IoXCJ0b28gbWFueSBhcmd1bWVudHNcIityLGguZXJyb3JzLlVORVhQRUNURURfQVJHVU1FTlQse2NvdW50OmUsZXhwZWN0ZWRDb3VudDp0fSl9Y2hlY2tOZXcoZSx0KXtlIT09T2JqZWN0JiZudWxsIT1lfHx0aGlzLnRocm93RXJyb3IoXCJtaXNzaW5nIG5ld1wiLGguZXJyb3JzLk1JU1NJTkdfTkVXLHtuYW1lOnQubmFtZX0pfWNoZWNrQWJzdHJhY3QoZSx0KXtlPT09dD90aGlzLnRocm93RXJyb3IoXCJjYW5ub3QgaW5zdGFudGlhdGUgYWJzdHJhY3QgY2xhc3MgXCIrSlNPTi5zdHJpbmdpZnkodC5uYW1lKStcIiBkaXJlY3RseTsgdXNlIGEgc3ViLWNsYXNzXCIsaC5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtuYW1lOmUubmFtZSxvcGVyYXRpb246XCJuZXdcIn0pOmUhPT1PYmplY3QmJm51bGwhPWV8fHRoaXMudGhyb3dFcnJvcihcIm1pc3NpbmcgbmV3XCIsaC5lcnJvcnMuTUlTU0lOR19ORVcse25hbWU6dC5uYW1lfSl9c3RhdGljIGdsb2JhbExvZ2dlcigpe3JldHVybiBhfHwoYT1uZXcgaChcImxvZ2dlci81LjYuMFwiKSksYX1zdGF0aWMgc2V0Q2Vuc29yc2hpcChlLHQpe2lmKCFlJiZ0JiZ0aGlzLmdsb2JhbExvZ2dlcigpLnRocm93RXJyb3IoXCJjYW5ub3QgcGVybWFuZW50bHkgZGlzYWJsZSBjZW5zb3JzaGlwXCIsaC5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJzZXRDZW5zb3JzaGlwXCJ9KSxuKXtpZighZSlyZXR1cm47dGhpcy5nbG9iYWxMb2dnZXIoKS50aHJvd0Vycm9yKFwiZXJyb3IgY2Vuc29yc2hpcCBwZXJtYW5lbnRcIixoLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInNldENlbnNvcnNoaXBcIn0pfWk9ISFlLG49ISF0fXN0YXRpYyBzZXRMb2dMZXZlbChlKXtjb25zdCB0PW9bZS50b0xvd2VyQ2FzZSgpXTtudWxsIT10P3M9dDpoLmdsb2JhbExvZ2dlcigpLndhcm4oXCJpbnZhbGlkIGxvZyBsZXZlbCAtIFwiK2UpfXN0YXRpYyBmcm9tKGUpe3JldHVybiBuZXcgaChlKX19aC5lcnJvcnM9dSxoLmxldmVscz1mfSwzNTg3OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtyLmQodCx7dWo6KCk9Pm8sekc6KCk9Pml9KTtjb25zdCBuPW5ldyhyKDcxMSkuWWQpKFwicHJvcGVydGllcy81LjYuMFwiKTtmdW5jdGlvbiBpKGUsdCxyKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLHZhbHVlOnIsd3JpdGFibGU6ITF9KX1mdW5jdGlvbiBvKGUsdCl7ZSYmXCJvYmplY3RcIj09dHlwZW9mIGV8fG4udGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBvYmplY3RcIixcIm9iamVjdFwiLGUpLE9iamVjdC5rZXlzKGUpLmZvckVhY2goKHI9Pnt0W3JdfHxuLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgb2JqZWN0IGtleSAtIFwiK3IsXCJ0cmFuc2FjdGlvbjpcIityLGUpfSkpfX0sNTUwNDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7ci5yKHQpLHIuZCh0LHtUcmFuc2FjdGlvblR5cGVzOigpPT51ZSxhY2Nlc3NMaXN0aWZ5OigpPT52ZSxjb21wdXRlQWRkcmVzczooKT0+YmUscGFyc2U6KCk9PnhlLHJlY292ZXJBZGRyZXNzOigpPT55ZSxzZXJpYWxpemU6KCk9PkVlfSk7dmFyIG49cig0NTk0KSxpPXIoNTE1NCksbz1yKDMyODYpLHM9cigxMDQ2KSxhPXIoODE5NyksYz1yKDM1ODcpLGY9cig3MTEpO2NvbnN0IHU9bmV3IGYuWWQoXCJybHAvNS42LjFcIik7ZnVuY3Rpb24gZChlKXtjb25zdCB0PVtdO2Zvcig7ZTspdC51bnNoaWZ0KDI1NSZlKSxlPj49ODtyZXR1cm4gdH1mdW5jdGlvbiBoKGUsdCxyKXtsZXQgbj0wO2ZvcihsZXQgaT0wO2k8cjtpKyspbj0yNTYqbitlW3QraV07cmV0dXJuIG59ZnVuY3Rpb24gbChlKXtpZihBcnJheS5pc0FycmF5KGUpKXtsZXQgdD1bXTtpZihlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3Q9dC5jb25jYXQobChlKSl9KSksdC5sZW5ndGg8PTU1KXJldHVybiB0LnVuc2hpZnQoMTkyK3QubGVuZ3RoKSx0O2NvbnN0IHI9ZCh0Lmxlbmd0aCk7cmV0dXJuIHIudW5zaGlmdCgyNDcrci5sZW5ndGgpLHIuY29uY2F0KHQpfSgwLG8uWnEpKGUpfHx1LnRocm93QXJndW1lbnRFcnJvcihcIlJMUCBvYmplY3QgbXVzdCBiZSBCeXRlc0xpa2VcIixcIm9iamVjdFwiLGUpO2NvbnN0IHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoKDAsby5sRSkoZSkpO2lmKDE9PT10Lmxlbmd0aCYmdFswXTw9MTI3KXJldHVybiB0O2lmKHQubGVuZ3RoPD01NSlyZXR1cm4gdC51bnNoaWZ0KDEyOCt0Lmxlbmd0aCksdDtjb25zdCByPWQodC5sZW5ndGgpO3JldHVybiByLnVuc2hpZnQoMTgzK3IubGVuZ3RoKSxyLmNvbmNhdCh0KX1mdW5jdGlvbiBwKGUpe3JldHVybigwLG8uRHYpKGwoZSkpfWZ1bmN0aW9uIGIoZSx0LHIsbil7Y29uc3QgaT1bXTtmb3IoO3I8dCsxK247KXtjb25zdCBvPXkoZSxyKTtpLnB1c2goby5yZXN1bHQpLChyKz1vLmNvbnN1bWVkKT50KzErbiYmdS50aHJvd0Vycm9yKFwiY2hpbGQgZGF0YSB0b28gc2hvcnRcIixmLllkLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7fSl9cmV0dXJue2NvbnN1bWVkOjErbixyZXN1bHQ6aX19ZnVuY3Rpb24geShlLHQpe2lmKDA9PT1lLmxlbmd0aCYmdS50aHJvd0Vycm9yKFwiZGF0YSB0b28gc2hvcnRcIixmLllkLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7fSksZVt0XT49MjQ4KXtjb25zdCByPWVbdF0tMjQ3O3QrMStyPmUubGVuZ3RoJiZ1LnRocm93RXJyb3IoXCJkYXRhIHNob3J0IHNlZ21lbnQgdG9vIHNob3J0XCIsZi5ZZC5lcnJvcnMuQlVGRkVSX09WRVJSVU4se30pO2NvbnN0IG49aChlLHQrMSxyKTtyZXR1cm4gdCsxK3Irbj5lLmxlbmd0aCYmdS50aHJvd0Vycm9yKFwiZGF0YSBsb25nIHNlZ21lbnQgdG9vIHNob3J0XCIsZi5ZZC5lcnJvcnMuQlVGRkVSX09WRVJSVU4se30pLGIoZSx0LHQrMStyLHIrbil9aWYoZVt0XT49MTkyKXtjb25zdCByPWVbdF0tMTkyO3JldHVybiB0KzErcj5lLmxlbmd0aCYmdS50aHJvd0Vycm9yKFwiZGF0YSBhcnJheSB0b28gc2hvcnRcIixmLllkLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7fSksYihlLHQsdCsxLHIpfWlmKGVbdF0+PTE4NCl7Y29uc3Qgcj1lW3RdLTE4Mzt0KzErcj5lLmxlbmd0aCYmdS50aHJvd0Vycm9yKFwiZGF0YSBhcnJheSB0b28gc2hvcnRcIixmLllkLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7fSk7Y29uc3Qgbj1oKGUsdCsxLHIpO3JldHVybiB0KzErcituPmUubGVuZ3RoJiZ1LnRocm93RXJyb3IoXCJkYXRhIGFycmF5IHRvbyBzaG9ydFwiLGYuWWQuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHt9KSx7Y29uc3VtZWQ6MStyK24scmVzdWx0OigwLG8uRHYpKGUuc2xpY2UodCsxK3IsdCsxK3IrbikpfX1pZihlW3RdPj0xMjgpe2NvbnN0IHI9ZVt0XS0xMjg7cmV0dXJuIHQrMStyPmUubGVuZ3RoJiZ1LnRocm93RXJyb3IoXCJkYXRhIHRvbyBzaG9ydFwiLGYuWWQuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHt9KSx7Y29uc3VtZWQ6MStyLHJlc3VsdDooMCxvLkR2KShlLnNsaWNlKHQrMSx0KzErcikpfX1yZXR1cm57Y29uc3VtZWQ6MSxyZXN1bHQ6KDAsby5EdikoZVt0XSl9fWZ1bmN0aW9uIGcoZSl7Y29uc3QgdD0oMCxvLmxFKShlKSxyPXkodCwwKTtyZXR1cm4gci5jb25zdW1lZCE9PXQubGVuZ3RoJiZ1LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcmxwIGRhdGFcIixcImRhdGFcIixlKSxyLnJlc3VsdH12YXIgbT1yKDM1NTApLHY9ci5uKG0pLHc9cigzNzE1KSxfPXIubih3KTtmdW5jdGlvbiBTKGUsdCxyKXtyZXR1cm4gcj17cGF0aDp0LGV4cG9ydHM6e30scmVxdWlyZTpmdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIkR5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzXCIpfShudWxsPT10JiZyLnBhdGgpfX0sZShyLHIuZXhwb3J0cyksci5leHBvcnRzfVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09ci5nP3IuZzpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZjt2YXIgRT1BO2Z1bmN0aW9uIEEoZSx0KXtpZighZSl0aHJvdyBuZXcgRXJyb3IodHx8XCJBc3NlcnRpb24gZmFpbGVkXCIpfUEuZXF1YWw9ZnVuY3Rpb24oZSx0LHIpe2lmKGUhPXQpdGhyb3cgbmV3IEVycm9yKHJ8fFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIrZStcIiAhPSBcIit0KX07dmFyIHg9UygoZnVuY3Rpb24oZSx0KXt2YXIgcj10O2Z1bmN0aW9uIG4oZSl7cmV0dXJuIDE9PT1lLmxlbmd0aD9cIjBcIitlOmV9ZnVuY3Rpb24gaShlKXtmb3IodmFyIHQ9XCJcIixyPTA7cjxlLmxlbmd0aDtyKyspdCs9bihlW3JdLnRvU3RyaW5nKDE2KSk7cmV0dXJuIHR9ci50b0FycmF5PWZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZS5zbGljZSgpO2lmKCFlKXJldHVybltdO3ZhciByPVtdO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKylyW25dPTB8ZVtuXTtyZXR1cm4gcn1pZihcImhleFwiPT09dClmb3IoKGU9ZS5yZXBsYWNlKC9bXmEtejAtOV0rL2dpLFwiXCIpKS5sZW5ndGglMiE9MCYmKGU9XCIwXCIrZSksbj0wO248ZS5sZW5ndGg7bis9MilyLnB1c2gocGFyc2VJbnQoZVtuXStlW24rMV0sMTYpKTtlbHNlIGZvcihuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWUuY2hhckNvZGVBdChuKSxvPWk+Pjgscz0yNTUmaTtvP3IucHVzaChvLHMpOnIucHVzaChzKX1yZXR1cm4gcn0sci56ZXJvMj1uLHIudG9IZXg9aSxyLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVyblwiaGV4XCI9PT10P2koZSk6ZX19KSksaz1TKChmdW5jdGlvbihlLHQpe3ZhciByPXQ7ci5hc3NlcnQ9RSxyLnRvQXJyYXk9eC50b0FycmF5LHIuemVybzI9eC56ZXJvMixyLnRvSGV4PXgudG9IZXgsci5lbmNvZGU9eC5lbmNvZGUsci5nZXROQUY9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPW5ldyBBcnJheShNYXRoLm1heChlLmJpdExlbmd0aCgpLHIpKzEpO24uZmlsbCgwKTtmb3IodmFyIGk9MTw8dCsxLG89ZS5jbG9uZSgpLHM9MDtzPG4ubGVuZ3RoO3MrKyl7dmFyIGEsYz1vLmFuZGxuKGktMSk7by5pc09kZCgpPyhhPWM+KGk+PjEpLTE/KGk+PjEpLWM6YyxvLmlzdWJuKGEpKTphPTAsbltzXT1hLG8uaXVzaHJuKDEpfXJldHVybiBufSxyLmdldEpTRj1mdW5jdGlvbihlLHQpe3ZhciByPVtbXSxbXV07ZT1lLmNsb25lKCksdD10LmNsb25lKCk7Zm9yKHZhciBuLGk9MCxvPTA7ZS5jbXBuKC1pKT4wfHx0LmNtcG4oLW8pPjA7KXt2YXIgcyxhLGM9ZS5hbmRsbigzKStpJjMsZj10LmFuZGxuKDMpK28mMzszPT09YyYmKGM9LTEpLDM9PT1mJiYoZj0tMSkscz0wPT0oMSZjKT8wOjMhPShuPWUuYW5kbG4oNykraSY3KSYmNSE9PW58fDIhPT1mP2M6LWMsclswXS5wdXNoKHMpLGE9MD09KDEmZik/MDozIT0obj10LmFuZGxuKDcpK28mNykmJjUhPT1ufHwyIT09Yz9mOi1mLHJbMV0ucHVzaChhKSwyKmk9PT1zKzEmJihpPTEtaSksMipvPT09YSsxJiYobz0xLW8pLGUuaXVzaHJuKDEpLHQuaXVzaHJuKDEpfXJldHVybiByfSxyLmNhY2hlZFByb3BlcnR5PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1cIl9cIit0O2UucHJvdG90eXBlW3RdPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXNbbl0/dGhpc1tuXTp0aGlzW25dPXIuY2FsbCh0aGlzKX19LHIucGFyc2VCeXRlcz1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9yLnRvQXJyYXkoZSxcImhleFwiKTplfSxyLmludEZyb21MRT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3KHYoKSkoZSxcImhleFwiLFwibGVcIil9fSkpLFA9ay5nZXROQUYsTz1rLmdldEpTRixNPWsuYXNzZXJ0O2Z1bmN0aW9uIEkoZSx0KXt0aGlzLnR5cGU9ZSx0aGlzLnA9bmV3KHYoKSkodC5wLDE2KSx0aGlzLnJlZD10LnByaW1lP3YoKS5yZWQodC5wcmltZSk6digpLm1vbnQodGhpcy5wKSx0aGlzLnplcm89bmV3KHYoKSkoMCkudG9SZWQodGhpcy5yZWQpLHRoaXMub25lPW5ldyh2KCkpKDEpLnRvUmVkKHRoaXMucmVkKSx0aGlzLnR3bz1uZXcodigpKSgyKS50b1JlZCh0aGlzLnJlZCksdGhpcy5uPXQubiYmbmV3KHYoKSkodC5uLDE2KSx0aGlzLmc9dC5nJiZ0aGlzLnBvaW50RnJvbUpTT04odC5nLHQuZ1JlZCksdGhpcy5fd25hZlQxPW5ldyBBcnJheSg0KSx0aGlzLl93bmFmVDI9bmV3IEFycmF5KDQpLHRoaXMuX3duYWZUMz1uZXcgQXJyYXkoNCksdGhpcy5fd25hZlQ0PW5ldyBBcnJheSg0KSx0aGlzLl9iaXRMZW5ndGg9dGhpcy5uP3RoaXMubi5iaXRMZW5ndGgoKTowO3ZhciByPXRoaXMubiYmdGhpcy5wLmRpdih0aGlzLm4pOyFyfHxyLmNtcG4oMTAwKT4wP3RoaXMucmVkTj1udWxsOih0aGlzLl9tYXh3ZWxsVHJpY2s9ITAsdGhpcy5yZWROPXRoaXMubi50b1JlZCh0aGlzLnJlZCkpfXZhciBUPUk7ZnVuY3Rpb24gUihlLHQpe3RoaXMuY3VydmU9ZSx0aGlzLnR5cGU9dCx0aGlzLnByZWNvbXB1dGVkPW51bGx9SS5wcm90b3R5cGUucG9pbnQ9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIil9LEkucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpfSxJLnByb3RvdHlwZS5fZml4ZWROYWZNdWw9ZnVuY3Rpb24oZSx0KXtNKGUucHJlY29tcHV0ZWQpO3ZhciByPWUuX2dldERvdWJsZXMoKSxuPVAodCwxLHRoaXMuX2JpdExlbmd0aCksaT0oMTw8ci5zdGVwKzEpLShyLnN0ZXAlMj09MD8yOjEpO2kvPTM7dmFyIG8scyxhPVtdO2ZvcihvPTA7bzxuLmxlbmd0aDtvKz1yLnN0ZXApe3M9MDtmb3IodmFyIGM9bytyLnN0ZXAtMTtjPj1vO2MtLSlzPShzPDwxKStuW2NdO2EucHVzaChzKX1mb3IodmFyIGY9dGhpcy5qcG9pbnQobnVsbCxudWxsLG51bGwpLHU9dGhpcy5qcG9pbnQobnVsbCxudWxsLG51bGwpLGQ9aTtkPjA7ZC0tKXtmb3Iobz0wO288YS5sZW5ndGg7bysrKShzPWFbb10pPT09ZD91PXUubWl4ZWRBZGQoci5wb2ludHNbb10pOnM9PT0tZCYmKHU9dS5taXhlZEFkZChyLnBvaW50c1tvXS5uZWcoKSkpO2Y9Zi5hZGQodSl9cmV0dXJuIGYudG9QKCl9LEkucHJvdG90eXBlLl93bmFmTXVsPWZ1bmN0aW9uKGUsdCl7dmFyIHI9NCxuPWUuX2dldE5BRlBvaW50cyhyKTtyPW4ud25kO2Zvcih2YXIgaT1uLnBvaW50cyxvPVAodCxyLHRoaXMuX2JpdExlbmd0aCkscz10aGlzLmpwb2ludChudWxsLG51bGwsbnVsbCksYT1vLmxlbmd0aC0xO2E+PTA7YS0tKXtmb3IodmFyIGM9MDthPj0wJiYwPT09b1thXTthLS0pYysrO2lmKGE+PTAmJmMrKyxzPXMuZGJscChjKSxhPDApYnJlYWs7dmFyIGY9b1thXTtNKDAhPT1mKSxzPVwiYWZmaW5lXCI9PT1lLnR5cGU/Zj4wP3MubWl4ZWRBZGQoaVtmLTE+PjFdKTpzLm1peGVkQWRkKGlbLWYtMT4+MV0ubmVnKCkpOmY+MD9zLmFkZChpW2YtMT4+MV0pOnMuYWRkKGlbLWYtMT4+MV0ubmVnKCkpfXJldHVyblwiYWZmaW5lXCI9PT1lLnR5cGU/cy50b1AoKTpzfSxJLnByb3RvdHlwZS5fd25hZk11bEFkZD1mdW5jdGlvbihlLHQscixuLGkpe3ZhciBvLHMsYSxjPXRoaXMuX3duYWZUMSxmPXRoaXMuX3duYWZUMix1PXRoaXMuX3duYWZUMyxkPTA7Zm9yKG89MDtvPG47bysrKXt2YXIgaD0oYT10W29dKS5fZ2V0TkFGUG9pbnRzKGUpO2Nbb109aC53bmQsZltvXT1oLnBvaW50c31mb3Iobz1uLTE7bz49MTtvLT0yKXt2YXIgbD1vLTEscD1vO2lmKDE9PT1jW2xdJiYxPT09Y1twXSl7dmFyIGI9W3RbbF0sbnVsbCxudWxsLHRbcF1dOzA9PT10W2xdLnkuY21wKHRbcF0ueSk/KGJbMV09dFtsXS5hZGQodFtwXSksYlsyXT10W2xdLnRvSigpLm1peGVkQWRkKHRbcF0ubmVnKCkpKTowPT09dFtsXS55LmNtcCh0W3BdLnkucmVkTmVnKCkpPyhiWzFdPXRbbF0udG9KKCkubWl4ZWRBZGQodFtwXSksYlsyXT10W2xdLmFkZCh0W3BdLm5lZygpKSk6KGJbMV09dFtsXS50b0ooKS5taXhlZEFkZCh0W3BdKSxiWzJdPXRbbF0udG9KKCkubWl4ZWRBZGQodFtwXS5uZWcoKSkpO3ZhciB5PVstMywtMSwtNSwtNywwLDcsNSwxLDNdLGc9TyhyW2xdLHJbcF0pO2ZvcihkPU1hdGgubWF4KGdbMF0ubGVuZ3RoLGQpLHVbbF09bmV3IEFycmF5KGQpLHVbcF09bmV3IEFycmF5KGQpLHM9MDtzPGQ7cysrKXt2YXIgbT0wfGdbMF1bc10sdj0wfGdbMV1bc107dVtsXVtzXT15WzMqKG0rMSkrKHYrMSldLHVbcF1bc109MCxmW2xdPWJ9fWVsc2UgdVtsXT1QKHJbbF0sY1tsXSx0aGlzLl9iaXRMZW5ndGgpLHVbcF09UChyW3BdLGNbcF0sdGhpcy5fYml0TGVuZ3RoKSxkPU1hdGgubWF4KHVbbF0ubGVuZ3RoLGQpLGQ9TWF0aC5tYXgodVtwXS5sZW5ndGgsZCl9dmFyIHc9dGhpcy5qcG9pbnQobnVsbCxudWxsLG51bGwpLF89dGhpcy5fd25hZlQ0O2ZvcihvPWQ7bz49MDtvLS0pe2Zvcih2YXIgUz0wO28+PTA7KXt2YXIgRT0hMDtmb3Iocz0wO3M8bjtzKyspX1tzXT0wfHVbc11bb10sMCE9PV9bc10mJihFPSExKTtpZighRSlicmVhaztTKyssby0tfWlmKG8+PTAmJlMrKyx3PXcuZGJscChTKSxvPDApYnJlYWs7Zm9yKHM9MDtzPG47cysrKXt2YXIgQT1fW3NdOzAhPT1BJiYoQT4wP2E9ZltzXVtBLTE+PjFdOkE8MCYmKGE9ZltzXVstQS0xPj4xXS5uZWcoKSksdz1cImFmZmluZVwiPT09YS50eXBlP3cubWl4ZWRBZGQoYSk6dy5hZGQoYSkpfX1mb3Iobz0wO288bjtvKyspZltvXT1udWxsO3JldHVybiBpP3c6dy50b1AoKX0sSS5CYXNlUG9pbnQ9UixSLnByb3RvdHlwZS5lcT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKX0sUi5wcm90b3R5cGUudmFsaWRhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJ2ZS52YWxpZGF0ZSh0aGlzKX0sSS5wcm90b3R5cGUuZGVjb2RlUG9pbnQ9ZnVuY3Rpb24oZSx0KXtlPWsudG9BcnJheShlLHQpO3ZhciByPXRoaXMucC5ieXRlTGVuZ3RoKCk7aWYoKDQ9PT1lWzBdfHw2PT09ZVswXXx8Nz09PWVbMF0pJiZlLmxlbmd0aC0xPT0yKnIpcmV0dXJuIDY9PT1lWzBdP00oZVtlLmxlbmd0aC0xXSUyPT0wKTo3PT09ZVswXSYmTShlW2UubGVuZ3RoLTFdJTI9PTEpLHRoaXMucG9pbnQoZS5zbGljZSgxLDErciksZS5zbGljZSgxK3IsMSsyKnIpKTtpZigoMj09PWVbMF18fDM9PT1lWzBdKSYmZS5sZW5ndGgtMT09PXIpcmV0dXJuIHRoaXMucG9pbnRGcm9tWChlLnNsaWNlKDEsMStyKSwzPT09ZVswXSk7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBwb2ludCBmb3JtYXRcIil9LFIucHJvdG90eXBlLmVuY29kZUNvbXByZXNzZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsITApfSxSLnByb3RvdHlwZS5fZW5jb2RlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCkscj10aGlzLmdldFgoKS50b0FycmF5KFwiYmVcIix0KTtyZXR1cm4gZT9bdGhpcy5nZXRZKCkuaXNFdmVuKCk/MjozXS5jb25jYXQocik6WzRdLmNvbmNhdChyLHRoaXMuZ2V0WSgpLnRvQXJyYXkoXCJiZVwiLHQpKX0sUi5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGsuZW5jb2RlKHRoaXMuX2VuY29kZSh0KSxlKX0sUi5wcm90b3R5cGUucHJlY29tcHV0ZT1mdW5jdGlvbihlKXtpZih0aGlzLnByZWNvbXB1dGVkKXJldHVybiB0aGlzO3ZhciB0PXtkb3VibGVzOm51bGwsbmFmOm51bGwsYmV0YTpudWxsfTtyZXR1cm4gdC5uYWY9dGhpcy5fZ2V0TkFGUG9pbnRzKDgpLHQuZG91Ymxlcz10aGlzLl9nZXREb3VibGVzKDQsZSksdC5iZXRhPXRoaXMuX2dldEJldGEoKSx0aGlzLnByZWNvbXB1dGVkPXQsdGhpc30sUi5wcm90b3R5cGUuX2hhc0RvdWJsZXM9ZnVuY3Rpb24oZSl7aWYoIXRoaXMucHJlY29tcHV0ZWQpcmV0dXJuITE7dmFyIHQ9dGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO3JldHVybiEhdCYmdC5wb2ludHMubGVuZ3RoPj1NYXRoLmNlaWwoKGUuYml0TGVuZ3RoKCkrMSkvdC5zdGVwKX0sUi5wcm90b3R5cGUuX2dldERvdWJsZXM9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLnByZWNvbXB1dGVkJiZ0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMpcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcztmb3IodmFyIHI9W3RoaXNdLG49dGhpcyxpPTA7aTx0O2krPWUpe2Zvcih2YXIgbz0wO288ZTtvKyspbj1uLmRibCgpO3IucHVzaChuKX1yZXR1cm57c3RlcDplLHBvaW50czpyfX0sUi5wcm90b3R5cGUuX2dldE5BRlBvaW50cz1mdW5jdGlvbihlKXtpZih0aGlzLnByZWNvbXB1dGVkJiZ0aGlzLnByZWNvbXB1dGVkLm5hZilyZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7Zm9yKHZhciB0PVt0aGlzXSxyPSgxPDxlKS0xLG49MT09PXI/bnVsbDp0aGlzLmRibCgpLGk9MTtpPHI7aSsrKXRbaV09dFtpLTFdLmFkZChuKTtyZXR1cm57d25kOmUscG9pbnRzOnR9fSxSLnByb3RvdHlwZS5fZ2V0QmV0YT1mdW5jdGlvbigpe3JldHVybiBudWxsfSxSLnByb3RvdHlwZS5kYmxwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLHI9MDtyPGU7cisrKXQ9dC5kYmwoKTtyZXR1cm4gdH07dmFyIE49UygoZnVuY3Rpb24oZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmNyZWF0ZT9lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt0JiYoZS5zdXBlcl89dCxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSl9OmUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKHQpe2Uuc3VwZXJfPXQ7dmFyIHI9ZnVuY3Rpb24oKXt9O3IucHJvdG90eXBlPXQucHJvdG90eXBlLGUucHJvdG90eXBlPW5ldyByLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWV9fX0pKSxDPWsuYXNzZXJ0O2Z1bmN0aW9uIGooZSl7VC5jYWxsKHRoaXMsXCJzaG9ydFwiLGUpLHRoaXMuYT1uZXcodigpKShlLmEsMTYpLnRvUmVkKHRoaXMucmVkKSx0aGlzLmI9bmV3KHYoKSkoZS5iLDE2KS50b1JlZCh0aGlzLnJlZCksdGhpcy50aW52PXRoaXMudHdvLnJlZEludm0oKSx0aGlzLnplcm9BPTA9PT10aGlzLmEuZnJvbVJlZCgpLmNtcG4oMCksdGhpcy50aHJlZUE9MD09PXRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMyksdGhpcy5lbmRvPXRoaXMuX2dldEVuZG9tb3JwaGlzbShlKSx0aGlzLl9lbmRvV25hZlQxPW5ldyBBcnJheSg0KSx0aGlzLl9lbmRvV25hZlQyPW5ldyBBcnJheSg0KX1OKGosVCk7dmFyIEI9ajtmdW5jdGlvbiBMKGUsdCxyLG4pe1QuQmFzZVBvaW50LmNhbGwodGhpcyxlLFwiYWZmaW5lXCIpLG51bGw9PT10JiZudWxsPT09cj8odGhpcy54PW51bGwsdGhpcy55PW51bGwsdGhpcy5pbmY9ITApOih0aGlzLng9bmV3KHYoKSkodCwxNiksdGhpcy55PW5ldyh2KCkpKHIsMTYpLG4mJih0aGlzLnguZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpLHRoaXMueS5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCkpLHRoaXMueC5yZWR8fCh0aGlzLng9dGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKSksdGhpcy55LnJlZHx8KHRoaXMueT10aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpKSx0aGlzLmluZj0hMSl9ZnVuY3Rpb24gRChlLHQscixuKXtULkJhc2VQb2ludC5jYWxsKHRoaXMsZSxcImphY29iaWFuXCIpLG51bGw9PT10JiZudWxsPT09ciYmbnVsbD09PW4/KHRoaXMueD10aGlzLmN1cnZlLm9uZSx0aGlzLnk9dGhpcy5jdXJ2ZS5vbmUsdGhpcy56PW5ldyh2KCkpKDApKToodGhpcy54PW5ldyh2KCkpKHQsMTYpLHRoaXMueT1uZXcodigpKShyLDE2KSx0aGlzLno9bmV3KHYoKSkobiwxNikpLHRoaXMueC5yZWR8fCh0aGlzLng9dGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKSksdGhpcy55LnJlZHx8KHRoaXMueT10aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpKSx0aGlzLnoucmVkfHwodGhpcy56PXRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCkpLHRoaXMuek9uZT10aGlzLno9PT10aGlzLmN1cnZlLm9uZX1qLnByb3RvdHlwZS5fZ2V0RW5kb21vcnBoaXNtPWZ1bmN0aW9uKGUpe2lmKHRoaXMuemVyb0EmJnRoaXMuZyYmdGhpcy5uJiYxPT09dGhpcy5wLm1vZG4oMykpe3ZhciB0LHI7aWYoZS5iZXRhKXQ9bmV3KHYoKSkoZS5iZXRhLDE2KS50b1JlZCh0aGlzLnJlZCk7ZWxzZXt2YXIgbj10aGlzLl9nZXRFbmRvUm9vdHModGhpcy5wKTt0PSh0PW5bMF0uY21wKG5bMV0pPDA/blswXTpuWzFdKS50b1JlZCh0aGlzLnJlZCl9aWYoZS5sYW1iZGEpcj1uZXcodigpKShlLmxhbWJkYSwxNik7ZWxzZXt2YXIgaT10aGlzLl9nZXRFbmRvUm9vdHModGhpcy5uKTswPT09dGhpcy5nLm11bChpWzBdKS54LmNtcCh0aGlzLmcueC5yZWRNdWwodCkpP3I9aVswXToocj1pWzFdLEMoMD09PXRoaXMuZy5tdWwocikueC5jbXAodGhpcy5nLngucmVkTXVsKHQpKSkpfXJldHVybntiZXRhOnQsbGFtYmRhOnIsYmFzaXM6ZS5iYXNpcz9lLmJhc2lzLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJue2E6bmV3KHYoKSkoZS5hLDE2KSxiOm5ldyh2KCkpKGUuYiwxNil9fSkpOnRoaXMuX2dldEVuZG9CYXNpcyhyKX19fSxqLnByb3RvdHlwZS5fZ2V0RW5kb1Jvb3RzPWZ1bmN0aW9uKGUpe3ZhciB0PWU9PT10aGlzLnA/dGhpcy5yZWQ6digpLm1vbnQoZSkscj1uZXcodigpKSgyKS50b1JlZCh0KS5yZWRJbnZtKCksbj1yLnJlZE5lZygpLGk9bmV3KHYoKSkoMykudG9SZWQodCkucmVkTmVnKCkucmVkU3FydCgpLnJlZE11bChyKTtyZXR1cm5bbi5yZWRBZGQoaSkuZnJvbVJlZCgpLG4ucmVkU3ViKGkpLmZyb21SZWQoKV19LGoucHJvdG90eXBlLl9nZXRFbmRvQmFzaXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHIsbixpLG8scyxhLGMsZix1PXRoaXMubi51c2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKS8yKSksZD1lLGg9dGhpcy5uLmNsb25lKCksbD1uZXcodigpKSgxKSxwPW5ldyh2KCkpKDApLGI9bmV3KHYoKSkoMCkseT1uZXcodigpKSgxKSxnPTA7MCE9PWQuY21wbigwKTspe3ZhciBtPWguZGl2KGQpO2M9aC5zdWIobS5tdWwoZCkpLGY9Yi5zdWIobS5tdWwobCkpO3ZhciB3PXkuc3ViKG0ubXVsKHApKTtpZighbiYmYy5jbXAodSk8MCl0PWEubmVnKCkscj1sLG49Yy5uZWcoKSxpPWY7ZWxzZSBpZihuJiYyPT0rK2cpYnJlYWs7YT1jLGg9ZCxkPWMsYj1sLGw9Zix5PXAscD13fW89Yy5uZWcoKSxzPWY7dmFyIF89bi5zcXIoKS5hZGQoaS5zcXIoKSk7cmV0dXJuIG8uc3FyKCkuYWRkKHMuc3FyKCkpLmNtcChfKT49MCYmKG89dCxzPXIpLG4ubmVnYXRpdmUmJihuPW4ubmVnKCksaT1pLm5lZygpKSxvLm5lZ2F0aXZlJiYobz1vLm5lZygpLHM9cy5uZWcoKSksW3thOm4sYjppfSx7YTpvLGI6c31dfSxqLnByb3RvdHlwZS5fZW5kb1NwbGl0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZW5kby5iYXNpcyxyPXRbMF0sbj10WzFdLGk9bi5iLm11bChlKS5kaXZSb3VuZCh0aGlzLm4pLG89ci5iLm5lZygpLm11bChlKS5kaXZSb3VuZCh0aGlzLm4pLHM9aS5tdWwoci5hKSxhPW8ubXVsKG4uYSksYz1pLm11bChyLmIpLGY9by5tdWwobi5iKTtyZXR1cm57azE6ZS5zdWIocykuc3ViKGEpLGsyOmMuYWRkKGYpLm5lZygpfX0sai5wcm90b3R5cGUucG9pbnRGcm9tWD1mdW5jdGlvbihlLHQpeyhlPW5ldyh2KCkpKGUsMTYpKS5yZWR8fChlPWUudG9SZWQodGhpcy5yZWQpKTt2YXIgcj1lLnJlZFNxcigpLnJlZE11bChlKS5yZWRJQWRkKGUucmVkTXVsKHRoaXMuYSkpLnJlZElBZGQodGhpcy5iKSxuPXIucmVkU3FydCgpO2lmKDAhPT1uLnJlZFNxcigpLnJlZFN1YihyKS5jbXAodGhpcy56ZXJvKSl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBvaW50XCIpO3ZhciBpPW4uZnJvbVJlZCgpLmlzT2RkKCk7cmV0dXJuKHQmJiFpfHwhdCYmaSkmJihuPW4ucmVkTmVnKCkpLHRoaXMucG9pbnQoZSxuKX0sai5wcm90b3R5cGUudmFsaWRhdGU9ZnVuY3Rpb24oZSl7aWYoZS5pbmYpcmV0dXJuITA7dmFyIHQ9ZS54LHI9ZS55LG49dGhpcy5hLnJlZE11bCh0KSxpPXQucmVkU3FyKCkucmVkTXVsKHQpLnJlZElBZGQobikucmVkSUFkZCh0aGlzLmIpO3JldHVybiAwPT09ci5yZWRTcXIoKS5yZWRJU3ViKGkpLmNtcG4oMCl9LGoucHJvdG90eXBlLl9lbmRvV25hZk11bEFkZD1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBuPXRoaXMuX2VuZG9XbmFmVDEsaT10aGlzLl9lbmRvV25hZlQyLG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHM9dGhpcy5fZW5kb1NwbGl0KHRbb10pLGE9ZVtvXSxjPWEuX2dldEJldGEoKTtzLmsxLm5lZ2F0aXZlJiYocy5rMS5pbmVnKCksYT1hLm5lZyghMCkpLHMuazIubmVnYXRpdmUmJihzLmsyLmluZWcoKSxjPWMubmVnKCEwKSksblsyKm9dPWEsblsyKm8rMV09YyxpWzIqb109cy5rMSxpWzIqbysxXT1zLmsyfWZvcih2YXIgZj10aGlzLl93bmFmTXVsQWRkKDEsbixpLDIqbyxyKSx1PTA7dTwyKm87dSsrKW5bdV09bnVsbCxpW3VdPW51bGw7cmV0dXJuIGZ9LE4oTCxULkJhc2VQb2ludCksai5wcm90b3R5cGUucG9pbnQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuZXcgTCh0aGlzLGUsdCxyKX0sai5wcm90b3R5cGUucG9pbnRGcm9tSlNPTj1mdW5jdGlvbihlLHQpe3JldHVybiBMLmZyb21KU09OKHRoaXMsZSx0KX0sTC5wcm90b3R5cGUuX2dldEJldGE9ZnVuY3Rpb24oKXtpZih0aGlzLmN1cnZlLmVuZG8pe3ZhciBlPXRoaXMucHJlY29tcHV0ZWQ7aWYoZSYmZS5iZXRhKXJldHVybiBlLmJldGE7dmFyIHQ9dGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTXVsKHRoaXMuY3VydmUuZW5kby5iZXRhKSx0aGlzLnkpO2lmKGUpe3ZhciByPXRoaXMuY3VydmUsbj1mdW5jdGlvbihlKXtyZXR1cm4gci5wb2ludChlLngucmVkTXVsKHIuZW5kby5iZXRhKSxlLnkpfTtlLmJldGE9dCx0LnByZWNvbXB1dGVkPXtiZXRhOm51bGwsbmFmOmUubmFmJiZ7d25kOmUubmFmLnduZCxwb2ludHM6ZS5uYWYucG9pbnRzLm1hcChuKX0sZG91YmxlczplLmRvdWJsZXMmJntzdGVwOmUuZG91Ymxlcy5zdGVwLHBvaW50czplLmRvdWJsZXMucG9pbnRzLm1hcChuKX19fXJldHVybiB0fX0sTC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJlY29tcHV0ZWQ/W3RoaXMueCx0aGlzLnksdGhpcy5wcmVjb21wdXRlZCYme2RvdWJsZXM6dGhpcy5wcmVjb21wdXRlZC5kb3VibGVzJiZ7c3RlcDp0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMuc3RlcCxwb2ludHM6dGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnBvaW50cy5zbGljZSgxKX0sbmFmOnRoaXMucHJlY29tcHV0ZWQubmFmJiZ7d25kOnRoaXMucHJlY29tcHV0ZWQubmFmLnduZCxwb2ludHM6dGhpcy5wcmVjb21wdXRlZC5uYWYucG9pbnRzLnNsaWNlKDEpfX1dOlt0aGlzLngsdGhpcy55XX0sTC5mcm9tSlNPTj1mdW5jdGlvbihlLHQscil7XCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PUpTT04ucGFyc2UodCkpO3ZhciBuPWUucG9pbnQodFswXSx0WzFdLHIpO2lmKCF0WzJdKXJldHVybiBuO2Z1bmN0aW9uIGkodCl7cmV0dXJuIGUucG9pbnQodFswXSx0WzFdLHIpfXZhciBvPXRbMl07cmV0dXJuIG4ucHJlY29tcHV0ZWQ9e2JldGE6bnVsbCxkb3VibGVzOm8uZG91YmxlcyYme3N0ZXA6by5kb3VibGVzLnN0ZXAscG9pbnRzOltuXS5jb25jYXQoby5kb3VibGVzLnBvaW50cy5tYXAoaSkpfSxuYWY6by5uYWYmJnt3bmQ6by5uYWYud25kLHBvaW50czpbbl0uY29uY2F0KG8ubmFmLnBvaW50cy5tYXAoaSkpfX0sbn0sTC5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzSW5maW5pdHkoKT9cIjxFQyBQb2ludCBJbmZpbml0eT5cIjpcIjxFQyBQb2ludCB4OiBcIit0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LDIpK1wiIHk6IFwiK3RoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsMikrXCI+XCJ9LEwucHJvdG90eXBlLmlzSW5maW5pdHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbmZ9LEwucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXtpZih0aGlzLmluZilyZXR1cm4gZTtpZihlLmluZilyZXR1cm4gdGhpcztpZih0aGlzLmVxKGUpKXJldHVybiB0aGlzLmRibCgpO2lmKHRoaXMubmVnKCkuZXEoZSkpcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCxudWxsKTtpZigwPT09dGhpcy54LmNtcChlLngpKXJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsbnVsbCk7dmFyIHQ9dGhpcy55LnJlZFN1YihlLnkpOzAhPT10LmNtcG4oMCkmJih0PXQucmVkTXVsKHRoaXMueC5yZWRTdWIoZS54KS5yZWRJbnZtKCkpKTt2YXIgcj10LnJlZFNxcigpLnJlZElTdWIodGhpcy54KS5yZWRJU3ViKGUueCksbj10LnJlZE11bCh0aGlzLngucmVkU3ViKHIpKS5yZWRJU3ViKHRoaXMueSk7cmV0dXJuIHRoaXMuY3VydmUucG9pbnQocixuKX0sTC5wcm90b3R5cGUuZGJsPWZ1bmN0aW9uKCl7aWYodGhpcy5pbmYpcmV0dXJuIHRoaXM7dmFyIGU9dGhpcy55LnJlZEFkZCh0aGlzLnkpO2lmKDA9PT1lLmNtcG4oMCkpcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCxudWxsKTt2YXIgdD10aGlzLmN1cnZlLmEscj10aGlzLngucmVkU3FyKCksbj1lLnJlZEludm0oKSxpPXIucmVkQWRkKHIpLnJlZElBZGQocikucmVkSUFkZCh0KS5yZWRNdWwobiksbz1pLnJlZFNxcigpLnJlZElTdWIodGhpcy54LnJlZEFkZCh0aGlzLngpKSxzPWkucmVkTXVsKHRoaXMueC5yZWRTdWIobykpLnJlZElTdWIodGhpcy55KTtyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChvLHMpfSxMLnByb3RvdHlwZS5nZXRYPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueC5mcm9tUmVkKCl9LEwucHJvdG90eXBlLmdldFk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy55LmZyb21SZWQoKX0sTC5wcm90b3R5cGUubXVsPWZ1bmN0aW9uKGUpe3JldHVybiBlPW5ldyh2KCkpKGUsMTYpLHRoaXMuaXNJbmZpbml0eSgpP3RoaXM6dGhpcy5faGFzRG91YmxlcyhlKT90aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLGUpOnRoaXMuY3VydmUuZW5kbz90aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChbdGhpc10sW2VdKTp0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsZSl9LEwucHJvdG90eXBlLm11bEFkZD1mdW5jdGlvbihlLHQscil7dmFyIG49W3RoaXMsdF0saT1bZSxyXTtyZXR1cm4gdGhpcy5jdXJ2ZS5lbmRvP3RoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKG4saSk6dGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLG4saSwyKX0sTC5wcm90b3R5cGUuam11bEFkZD1mdW5jdGlvbihlLHQscil7dmFyIG49W3RoaXMsdF0saT1bZSxyXTtyZXR1cm4gdGhpcy5jdXJ2ZS5lbmRvP3RoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKG4saSwhMCk6dGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLG4saSwyLCEwKX0sTC5wcm90b3R5cGUuZXE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXM9PT1lfHx0aGlzLmluZj09PWUuaW5mJiYodGhpcy5pbmZ8fDA9PT10aGlzLnguY21wKGUueCkmJjA9PT10aGlzLnkuY21wKGUueSkpfSxMLnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24oZSl7aWYodGhpcy5pbmYpcmV0dXJuIHRoaXM7dmFyIHQ9dGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngsdGhpcy55LnJlZE5lZygpKTtpZihlJiZ0aGlzLnByZWNvbXB1dGVkKXt2YXIgcj10aGlzLnByZWNvbXB1dGVkLG49ZnVuY3Rpb24oZSl7cmV0dXJuIGUubmVnKCl9O3QucHJlY29tcHV0ZWQ9e25hZjpyLm5hZiYme3duZDpyLm5hZi53bmQscG9pbnRzOnIubmFmLnBvaW50cy5tYXAobil9LGRvdWJsZXM6ci5kb3VibGVzJiZ7c3RlcDpyLmRvdWJsZXMuc3RlcCxwb2ludHM6ci5kb3VibGVzLnBvaW50cy5tYXAobil9fX1yZXR1cm4gdH0sTC5wcm90b3R5cGUudG9KPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5mP3RoaXMuY3VydmUuanBvaW50KG51bGwsbnVsbCxudWxsKTp0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsdGhpcy55LHRoaXMuY3VydmUub25lKX0sTihELFQuQmFzZVBvaW50KSxqLnByb3RvdHlwZS5qcG9pbnQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuZXcgRCh0aGlzLGUsdCxyKX0sRC5wcm90b3R5cGUudG9QPWZ1bmN0aW9uKCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCxudWxsKTt2YXIgZT10aGlzLnoucmVkSW52bSgpLHQ9ZS5yZWRTcXIoKSxyPXRoaXMueC5yZWRNdWwodCksbj10aGlzLnkucmVkTXVsKHQpLnJlZE11bChlKTtyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChyLG4pfSxELnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LHRoaXMueS5yZWROZWcoKSx0aGlzLnopfSxELnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIGU7aWYoZS5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXM7dmFyIHQ9ZS56LnJlZFNxcigpLHI9dGhpcy56LnJlZFNxcigpLG49dGhpcy54LnJlZE11bCh0KSxpPWUueC5yZWRNdWwociksbz10aGlzLnkucmVkTXVsKHQucmVkTXVsKGUueikpLHM9ZS55LnJlZE11bChyLnJlZE11bCh0aGlzLnopKSxhPW4ucmVkU3ViKGkpLGM9by5yZWRTdWIocyk7aWYoMD09PWEuY21wbigwKSlyZXR1cm4gMCE9PWMuY21wbigwKT90aGlzLmN1cnZlLmpwb2ludChudWxsLG51bGwsbnVsbCk6dGhpcy5kYmwoKTt2YXIgZj1hLnJlZFNxcigpLHU9Zi5yZWRNdWwoYSksZD1uLnJlZE11bChmKSxoPWMucmVkU3FyKCkucmVkSUFkZCh1KS5yZWRJU3ViKGQpLnJlZElTdWIoZCksbD1jLnJlZE11bChkLnJlZElTdWIoaCkpLnJlZElTdWIoby5yZWRNdWwodSkpLHA9dGhpcy56LnJlZE11bChlLnopLnJlZE11bChhKTtyZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoaCxsLHApfSxELnByb3RvdHlwZS5taXhlZEFkZD1mdW5jdGlvbihlKXtpZih0aGlzLmlzSW5maW5pdHkoKSlyZXR1cm4gZS50b0ooKTtpZihlLmlzSW5maW5pdHkoKSlyZXR1cm4gdGhpczt2YXIgdD10aGlzLnoucmVkU3FyKCkscj10aGlzLngsbj1lLngucmVkTXVsKHQpLGk9dGhpcy55LG89ZS55LnJlZE11bCh0KS5yZWRNdWwodGhpcy56KSxzPXIucmVkU3ViKG4pLGE9aS5yZWRTdWIobyk7aWYoMD09PXMuY21wbigwKSlyZXR1cm4gMCE9PWEuY21wbigwKT90aGlzLmN1cnZlLmpwb2ludChudWxsLG51bGwsbnVsbCk6dGhpcy5kYmwoKTt2YXIgYz1zLnJlZFNxcigpLGY9Yy5yZWRNdWwocyksdT1yLnJlZE11bChjKSxkPWEucmVkU3FyKCkucmVkSUFkZChmKS5yZWRJU3ViKHUpLnJlZElTdWIodSksaD1hLnJlZE11bCh1LnJlZElTdWIoZCkpLnJlZElTdWIoaS5yZWRNdWwoZikpLGw9dGhpcy56LnJlZE11bChzKTtyZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoZCxoLGwpfSxELnByb3RvdHlwZS5kYmxwPWZ1bmN0aW9uKGUpe2lmKDA9PT1lKXJldHVybiB0aGlzO2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO2lmKCFlKXJldHVybiB0aGlzLmRibCgpO3ZhciB0O2lmKHRoaXMuY3VydmUuemVyb0F8fHRoaXMuY3VydmUudGhyZWVBKXt2YXIgcj10aGlzO2Zvcih0PTA7dDxlO3QrKylyPXIuZGJsKCk7cmV0dXJuIHJ9dmFyIG49dGhpcy5jdXJ2ZS5hLGk9dGhpcy5jdXJ2ZS50aW52LG89dGhpcy54LHM9dGhpcy55LGE9dGhpcy56LGM9YS5yZWRTcXIoKS5yZWRTcXIoKSxmPXMucmVkQWRkKHMpO2Zvcih0PTA7dDxlO3QrKyl7dmFyIHU9by5yZWRTcXIoKSxkPWYucmVkU3FyKCksaD1kLnJlZFNxcigpLGw9dS5yZWRBZGQodSkucmVkSUFkZCh1KS5yZWRJQWRkKG4ucmVkTXVsKGMpKSxwPW8ucmVkTXVsKGQpLGI9bC5yZWRTcXIoKS5yZWRJU3ViKHAucmVkQWRkKHApKSx5PXAucmVkSVN1YihiKSxnPWwucmVkTXVsKHkpO2c9Zy5yZWRJQWRkKGcpLnJlZElTdWIoaCk7dmFyIG09Zi5yZWRNdWwoYSk7dCsxPGUmJihjPWMucmVkTXVsKGgpKSxvPWIsYT1tLGY9Z31yZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobyxmLnJlZE11bChpKSxhKX0sRC5wcm90b3R5cGUuZGJsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNJbmZpbml0eSgpP3RoaXM6dGhpcy5jdXJ2ZS56ZXJvQT90aGlzLl96ZXJvRGJsKCk6dGhpcy5jdXJ2ZS50aHJlZUE/dGhpcy5fdGhyZWVEYmwoKTp0aGlzLl9kYmwoKX0sRC5wcm90b3R5cGUuX3plcm9EYmw9ZnVuY3Rpb24oKXt2YXIgZSx0LHI7aWYodGhpcy56T25lKXt2YXIgbj10aGlzLngucmVkU3FyKCksaT10aGlzLnkucmVkU3FyKCksbz1pLnJlZFNxcigpLHM9dGhpcy54LnJlZEFkZChpKS5yZWRTcXIoKS5yZWRJU3ViKG4pLnJlZElTdWIobyk7cz1zLnJlZElBZGQocyk7dmFyIGE9bi5yZWRBZGQobikucmVkSUFkZChuKSxjPWEucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpLGY9by5yZWRJQWRkKG8pO2Y9KGY9Zi5yZWRJQWRkKGYpKS5yZWRJQWRkKGYpLGU9Yyx0PWEucmVkTXVsKHMucmVkSVN1YihjKSkucmVkSVN1YihmKSxyPXRoaXMueS5yZWRBZGQodGhpcy55KX1lbHNle3ZhciB1PXRoaXMueC5yZWRTcXIoKSxkPXRoaXMueS5yZWRTcXIoKSxoPWQucmVkU3FyKCksbD10aGlzLngucmVkQWRkKGQpLnJlZFNxcigpLnJlZElTdWIodSkucmVkSVN1YihoKTtsPWwucmVkSUFkZChsKTt2YXIgcD11LnJlZEFkZCh1KS5yZWRJQWRkKHUpLGI9cC5yZWRTcXIoKSx5PWgucmVkSUFkZChoKTt5PSh5PXkucmVkSUFkZCh5KSkucmVkSUFkZCh5KSxlPWIucmVkSVN1YihsKS5yZWRJU3ViKGwpLHQ9cC5yZWRNdWwobC5yZWRJU3ViKGUpKS5yZWRJU3ViKHkpLHI9KHI9dGhpcy55LnJlZE11bCh0aGlzLnopKS5yZWRJQWRkKHIpfXJldHVybiB0aGlzLmN1cnZlLmpwb2ludChlLHQscil9LEQucHJvdG90eXBlLl90aHJlZURibD1mdW5jdGlvbigpe3ZhciBlLHQscjtpZih0aGlzLnpPbmUpe3ZhciBuPXRoaXMueC5yZWRTcXIoKSxpPXRoaXMueS5yZWRTcXIoKSxvPWkucmVkU3FyKCkscz10aGlzLngucmVkQWRkKGkpLnJlZFNxcigpLnJlZElTdWIobikucmVkSVN1YihvKTtzPXMucmVkSUFkZChzKTt2YXIgYT1uLnJlZEFkZChuKS5yZWRJQWRkKG4pLnJlZElBZGQodGhpcy5jdXJ2ZS5hKSxjPWEucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO2U9Yzt2YXIgZj1vLnJlZElBZGQobyk7Zj0oZj1mLnJlZElBZGQoZikpLnJlZElBZGQoZiksdD1hLnJlZE11bChzLnJlZElTdWIoYykpLnJlZElTdWIoZikscj10aGlzLnkucmVkQWRkKHRoaXMueSl9ZWxzZXt2YXIgdT10aGlzLnoucmVkU3FyKCksZD10aGlzLnkucmVkU3FyKCksaD10aGlzLngucmVkTXVsKGQpLGw9dGhpcy54LnJlZFN1Yih1KS5yZWRNdWwodGhpcy54LnJlZEFkZCh1KSk7bD1sLnJlZEFkZChsKS5yZWRJQWRkKGwpO3ZhciBwPWgucmVkSUFkZChoKSxiPShwPXAucmVkSUFkZChwKSkucmVkQWRkKHApO2U9bC5yZWRTcXIoKS5yZWRJU3ViKGIpLHI9dGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZCkucmVkSVN1Yih1KTt2YXIgeT1kLnJlZFNxcigpO3k9KHk9KHk9eS5yZWRJQWRkKHkpKS5yZWRJQWRkKHkpKS5yZWRJQWRkKHkpLHQ9bC5yZWRNdWwocC5yZWRJU3ViKGUpKS5yZWRJU3ViKHkpfXJldHVybiB0aGlzLmN1cnZlLmpwb2ludChlLHQscil9LEQucHJvdG90eXBlLl9kYmw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmN1cnZlLmEsdD10aGlzLngscj10aGlzLnksbj10aGlzLnosaT1uLnJlZFNxcigpLnJlZFNxcigpLG89dC5yZWRTcXIoKSxzPXIucmVkU3FyKCksYT1vLnJlZEFkZChvKS5yZWRJQWRkKG8pLnJlZElBZGQoZS5yZWRNdWwoaSkpLGM9dC5yZWRBZGQodCksZj0oYz1jLnJlZElBZGQoYykpLnJlZE11bChzKSx1PWEucmVkU3FyKCkucmVkSVN1YihmLnJlZEFkZChmKSksZD1mLnJlZElTdWIodSksaD1zLnJlZFNxcigpO2g9KGg9KGg9aC5yZWRJQWRkKGgpKS5yZWRJQWRkKGgpKS5yZWRJQWRkKGgpO3ZhciBsPWEucmVkTXVsKGQpLnJlZElTdWIoaCkscD1yLnJlZEFkZChyKS5yZWRNdWwobik7cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KHUsbCxwKX0sRC5wcm90b3R5cGUudHJwbD1mdW5jdGlvbigpe2lmKCF0aGlzLmN1cnZlLnplcm9BKXJldHVybiB0aGlzLmRibCgpLmFkZCh0aGlzKTt2YXIgZT10aGlzLngucmVkU3FyKCksdD10aGlzLnkucmVkU3FyKCkscj10aGlzLnoucmVkU3FyKCksbj10LnJlZFNxcigpLGk9ZS5yZWRBZGQoZSkucmVkSUFkZChlKSxvPWkucmVkU3FyKCkscz10aGlzLngucmVkQWRkKHQpLnJlZFNxcigpLnJlZElTdWIoZSkucmVkSVN1YihuKSxhPShzPShzPShzPXMucmVkSUFkZChzKSkucmVkQWRkKHMpLnJlZElBZGQocykpLnJlZElTdWIobykpLnJlZFNxcigpLGM9bi5yZWRJQWRkKG4pO2M9KGM9KGM9Yy5yZWRJQWRkKGMpKS5yZWRJQWRkKGMpKS5yZWRJQWRkKGMpO3ZhciBmPWkucmVkSUFkZChzKS5yZWRTcXIoKS5yZWRJU3ViKG8pLnJlZElTdWIoYSkucmVkSVN1YihjKSx1PXQucmVkTXVsKGYpO3U9KHU9dS5yZWRJQWRkKHUpKS5yZWRJQWRkKHUpO3ZhciBkPXRoaXMueC5yZWRNdWwoYSkucmVkSVN1Yih1KTtkPShkPWQucmVkSUFkZChkKSkucmVkSUFkZChkKTt2YXIgaD10aGlzLnkucmVkTXVsKGYucmVkTXVsKGMucmVkSVN1YihmKSkucmVkSVN1YihzLnJlZE11bChhKSkpO2g9KGg9KGg9aC5yZWRJQWRkKGgpKS5yZWRJQWRkKGgpKS5yZWRJQWRkKGgpO3ZhciBsPXRoaXMuei5yZWRBZGQocykucmVkU3FyKCkucmVkSVN1YihyKS5yZWRJU3ViKGEpO3JldHVybiB0aGlzLmN1cnZlLmpwb2ludChkLGgsbCl9LEQucHJvdG90eXBlLm11bD1mdW5jdGlvbihlLHQpe3JldHVybiBlPW5ldyh2KCkpKGUsdCksdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLGUpfSxELnByb3RvdHlwZS5lcT1mdW5jdGlvbihlKXtpZihcImFmZmluZVwiPT09ZS50eXBlKXJldHVybiB0aGlzLmVxKGUudG9KKCkpO2lmKHRoaXM9PT1lKXJldHVybiEwO3ZhciB0PXRoaXMuei5yZWRTcXIoKSxyPWUuei5yZWRTcXIoKTtpZigwIT09dGhpcy54LnJlZE11bChyKS5yZWRJU3ViKGUueC5yZWRNdWwodCkpLmNtcG4oMCkpcmV0dXJuITE7dmFyIG49dC5yZWRNdWwodGhpcy56KSxpPXIucmVkTXVsKGUueik7cmV0dXJuIDA9PT10aGlzLnkucmVkTXVsKGkpLnJlZElTdWIoZS55LnJlZE11bChuKSkuY21wbigwKX0sRC5wcm90b3R5cGUuZXFYVG9QPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuei5yZWRTcXIoKSxyPWUudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh0KTtpZigwPT09dGhpcy54LmNtcChyKSlyZXR1cm4hMDtmb3IodmFyIG49ZS5jbG9uZSgpLGk9dGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh0KTs7KXtpZihuLmlhZGQodGhpcy5jdXJ2ZS5uKSxuLmNtcCh0aGlzLmN1cnZlLnApPj0wKXJldHVybiExO2lmKHIucmVkSUFkZChpKSwwPT09dGhpcy54LmNtcChyKSlyZXR1cm4hMH19LEQucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0luZmluaXR5KCk/XCI8RUMgSlBvaW50IEluZmluaXR5PlwiOlwiPEVDIEpQb2ludCB4OiBcIit0aGlzLngudG9TdHJpbmcoMTYsMikrXCIgeTogXCIrdGhpcy55LnRvU3RyaW5nKDE2LDIpK1wiIHo6IFwiK3RoaXMuei50b1N0cmluZygxNiwyKStcIj5cIn0sRC5wcm90b3R5cGUuaXNJbmZpbml0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy56LmNtcG4oMCl9O3ZhciBVPVMoKGZ1bmN0aW9uKGUsdCl7dmFyIHI9dDtyLmJhc2U9VCxyLnNob3J0PUIsci5tb250PW51bGwsci5lZHdhcmRzPW51bGx9KSkscT1TKChmdW5jdGlvbihlLHQpe3ZhciByLG49dCxpPWsuYXNzZXJ0O2Z1bmN0aW9uIG8oZSl7XCJzaG9ydFwiPT09ZS50eXBlP3RoaXMuY3VydmU9bmV3IFUuc2hvcnQoZSk6XCJlZHdhcmRzXCI9PT1lLnR5cGU/dGhpcy5jdXJ2ZT1uZXcgVS5lZHdhcmRzKGUpOnRoaXMuY3VydmU9bmV3IFUubW9udChlKSx0aGlzLmc9dGhpcy5jdXJ2ZS5nLHRoaXMubj10aGlzLmN1cnZlLm4sdGhpcy5oYXNoPWUuaGFzaCxpKHRoaXMuZy52YWxpZGF0ZSgpLFwiSW52YWxpZCBjdXJ2ZVwiKSxpKHRoaXMuZy5tdWwodGhpcy5uKS5pc0luZmluaXR5KCksXCJJbnZhbGlkIGN1cnZlLCBHKk4gIT0gT1wiKX1mdW5jdGlvbiBzKGUsdCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sZSx7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9bmV3IG8odCk7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLGUse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOnJ9KSxyfX0pfW4uUHJlc2V0Q3VydmU9byxzKFwicDE5MlwiLHt0eXBlOlwic2hvcnRcIixwcmltZTpcInAxOTJcIixwOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmZcIixhOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmNcIixiOlwiNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjFcIixuOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgOTlkZWY4MzYgMTQ2YmM5YjEgYjRkMjI4MzFcIixoYXNoOl8oKS5zaGEyNTYsZ1JlZDohMSxnOltcIjE4OGRhODBlIGIwMzA5MGY2IDdjYmYyMGViIDQzYTE4ODAwIGY0ZmYwYWZkIDgyZmYxMDEyXCIsXCIwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5NDgxMVwiXX0pLHMoXCJwMjI0XCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOlwicDIyNFwiLHA6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMVwiLGE6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZVwiLGI6XCJiNDA1MGE4NSAwYzA0YjNhYiBmNTQxMzI1NiA1MDQ0YjBiNyBkN2JmZDhiYSAyNzBiMzk0MyAyMzU1ZmZiNFwiLG46XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmMTZhMiBlMGI4ZjAzZSAxM2RkMjk0NSA1YzVjMmEzZFwiLGhhc2g6XygpLnNoYTI1NixnUmVkOiExLGc6W1wiYjcwZTBjYmQgNmJiNGJmN2YgMzIxMzkwYjkgNGEwM2MxZDMgNTZjMjExMjIgMzQzMjgwZDYgMTE1YzFkMjFcIixcImJkMzc2Mzg4IGI1ZjcyM2ZiIDRjMjJkZmU2IGNkNDM3NWEwIDVhMDc0NzY0IDQ0ZDU4MTk5IDg1MDA3ZTM0XCJdfSkscyhcInAyNTZcIix7dHlwZTpcInNob3J0XCIscHJpbWU6bnVsbCxwOlwiZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmZcIixhOlwiZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmNcIixiOlwiNWFjNjM1ZDggYWEzYTkzZTcgYjNlYmJkNTUgNzY5ODg2YmMgNjUxZDA2YjAgY2M1M2IwZjYgM2JjZTNjM2UgMjdkMjYwNGJcIixuOlwiZmZmZmZmZmYgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgYmNlNmZhYWQgYTcxNzllODQgZjNiOWNhYzIgZmM2MzI1NTFcIixoYXNoOl8oKS5zaGEyNTYsZ1JlZDohMSxnOltcIjZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyIDc3MDM3ZDgxIDJkZWIzM2EwIGY0YTEzOTQ1IGQ4OThjMjk2XCIsXCI0ZmUzNDJlMiBmZTFhN2Y5YiA4ZWU3ZWI0YSA3YzBmOWUxNiAyYmNlMzM1NyA2YjMxNWVjZSBjYmI2NDA2OCAzN2JmNTFmNVwiXX0pLHMoXCJwMzg0XCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOm51bGwscDpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmXCIsYTpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZjXCIsYjpcImIzMzEyZmE3IGUyM2VlN2U0IDk4OGUwNTZiIGUzZjgyZDE5IDE4MWQ5YzZlIGZlODE0MTEyIDAzMTQwODhmIDUwMTM4NzVhIGM2NTYzOThkIDhhMmVkMTlkIDJhODVjOGVkIGQzZWMyYWVmXCIsbjpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGM3NjM0ZDgxIGY0MzcyZGRmIDU4MWEwZGIyIDQ4YjBhNzdhIGVjZWMxOTZhIGNjYzUyOTczXCIsaGFzaDpfKCkuc2hhMzg0LGdSZWQ6ITEsZzpbXCJhYTg3Y2EyMiBiZThiMDUzNyA4ZWIxYzcxZSBmMzIwYWQ3NCA2ZTFkM2I2MiA4YmE3OWI5OCA1OWY3NDFlMCA4MjU0MmEzOCA1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiN1wiLFwiMzYxN2RlNGEgOTYyNjJjNmYgNWQ5ZTk4YmYgOTI5MmRjMjkgZjhmNDFkYmQgMjg5YTE0N2MgZTlkYTMxMTMgYjVmMGI4YzAgMGE2MGIxY2UgMWQ3ZTgxOWQgN2E0MzFkN2MgOTBlYTBlNWZcIl19KSxzKFwicDUyMVwiLHt0eXBlOlwic2hvcnRcIixwcmltZTpudWxsLHA6XCIwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZlwiLGE6XCIwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmY1wiLGI6XCIwMDAwMDA1MSA5NTNlYjk2MSA4ZTFjOWExZiA5MjlhMjFhMCBiNjg1NDBlZSBhMmRhNzI1YiA5OWIzMTVmMyBiOGI0ODk5MSA4ZWYxMDllMSA1NjE5Mzk1MSBlYzdlOTM3YiAxNjUyYzBiZCAzYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMFwiLG46XCIwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYSA1MTg2ODc4MyBiZjJmOTY2YiA3ZmNjMDE0OCBmNzA5YTVkMCAzYmI1YzliOCA4OTljNDdhZSBiYjZmYjcxZSA5MTM4NjQwOVwiLGhhc2g6XygpLnNoYTUxMixnUmVkOiExLGc6W1wiMDAwMDAwYzYgODU4ZTA2YjcgMDQwNGU5Y2QgOWUzZWNiNjYgMjM5NWI0NDIgOWM2NDgxMzkgMDUzZmI1MjEgZjgyOGFmNjAgNmI0ZDNkYmEgYTE0YjVlNzcgZWZlNzU5MjggZmUxZGMxMjcgYTJmZmE4ZGUgMzM0OGIzYzEgODU2YTQyOWIgZjk3ZTdlMzEgYzJlNWJkNjZcIixcIjAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5IDU3OWI0NDY4IDE3YWZiZDE3IDI3M2U2NjJjIDk3ZWU3Mjk5IDVlZjQyNjQwIGM1NTBiOTAxIDNmYWQwNzYxIDM1M2M3MDg2IGEyNzJjMjQwIDg4YmU5NDc2IDlmZDE2NjUwXCJdfSkscyhcImN1cnZlMjU1MTlcIix7dHlwZTpcIm1vbnRcIixwcmltZTpcInAyNTUxOVwiLHA6XCI3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkXCIsYTpcIjc2ZDA2XCIsYjpcIjFcIixuOlwiMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZFwiLGhhc2g6XygpLnNoYTI1NixnUmVkOiExLGc6W1wiOVwiXX0pLHMoXCJlZDI1NTE5XCIse3R5cGU6XCJlZHdhcmRzXCIscHJpbWU6XCJwMjU1MTlcIixwOlwiN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZFwiLGE6XCItMVwiLGM6XCIxXCIsZDpcIjUyMDM2Y2VlMmI2ZmZlNzMgOGNjNzQwNzk3Nzc5ZTg5OCAwMDcwMGE0ZDQxNDFkOGFiIDc1ZWI0ZGNhMTM1OTc4YTNcIixuOlwiMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZFwiLGhhc2g6XygpLnNoYTI1NixnUmVkOiExLGc6W1wiMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYVwiLFwiNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OFwiXX0pO3RyeXtyPW51bGwuY3Jhc2goKX1jYXRjaChlKXtyPXZvaWQgMH1zKFwic2VjcDI1NmsxXCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOlwiazI1NlwiLHA6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZlwiLGE6XCIwXCIsYjpcIjdcIixuOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDFcIixoOlwiMVwiLGhhc2g6XygpLnNoYTI1NixiZXRhOlwiN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZVwiLGxhbWJkYTpcIjUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzJcIixiYXNpczpbe2E6XCIzMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNVwiLGI6XCItZTQ0MzdlZDYwMTBlODgyODZmNTQ3ZmE5MGFiZmU0YzNcIn0se2E6XCIxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDhcIixiOlwiMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTVcIn1dLGdSZWQ6ITEsZzpbXCI3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4XCIsXCI0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4XCIscl19KX0pKTtmdW5jdGlvbiBGKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEYpKXJldHVybiBuZXcgRihlKTt0aGlzLmhhc2g9ZS5oYXNoLHRoaXMucHJlZFJlc2lzdD0hIWUucHJlZFJlc2lzdCx0aGlzLm91dExlbj10aGlzLmhhc2gub3V0U2l6ZSx0aGlzLm1pbkVudHJvcHk9ZS5taW5FbnRyb3B5fHx0aGlzLmhhc2guaG1hY1N0cmVuZ3RoLHRoaXMuX3Jlc2VlZD1udWxsLHRoaXMucmVzZWVkSW50ZXJ2YWw9bnVsbCx0aGlzLks9bnVsbCx0aGlzLlY9bnVsbDt2YXIgdD14LnRvQXJyYXkoZS5lbnRyb3B5LGUuZW50cm9weUVuY3x8XCJoZXhcIikscj14LnRvQXJyYXkoZS5ub25jZSxlLm5vbmNlRW5jfHxcImhleFwiKSxuPXgudG9BcnJheShlLnBlcnMsZS5wZXJzRW5jfHxcImhleFwiKTtFKHQubGVuZ3RoPj10aGlzLm1pbkVudHJvcHkvOCxcIk5vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogXCIrdGhpcy5taW5FbnRyb3B5K1wiIGJpdHNcIiksdGhpcy5faW5pdCh0LHIsbil9dmFyIEg9RjtGLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbihlLHQscil7dmFyIG49ZS5jb25jYXQodCkuY29uY2F0KHIpO3RoaXMuSz1uZXcgQXJyYXkodGhpcy5vdXRMZW4vOCksdGhpcy5WPW5ldyBBcnJheSh0aGlzLm91dExlbi84KTtmb3IodmFyIGk9MDtpPHRoaXMuVi5sZW5ndGg7aSsrKXRoaXMuS1tpXT0wLHRoaXMuVltpXT0xO3RoaXMuX3VwZGF0ZShuKSx0aGlzLl9yZXNlZWQ9MSx0aGlzLnJlc2VlZEludGVydmFsPTI4MTQ3NDk3NjcxMDY1Nn0sRi5wcm90b3R5cGUuX2htYWM9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3KF8oKS5obWFjKSh0aGlzLmhhc2gsdGhpcy5LKX0sRi5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikudXBkYXRlKFswXSk7ZSYmKHQ9dC51cGRhdGUoZSkpLHRoaXMuSz10LmRpZ2VzdCgpLHRoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCksZSYmKHRoaXMuSz10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikudXBkYXRlKFsxXSkudXBkYXRlKGUpLmRpZ2VzdCgpLHRoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCkpfSxGLnByb3RvdHlwZS5yZXNlZWQ9ZnVuY3Rpb24oZSx0LHIsbil7XCJzdHJpbmdcIiE9dHlwZW9mIHQmJihuPXIscj10LHQ9bnVsbCksZT14LnRvQXJyYXkoZSx0KSxyPXgudG9BcnJheShyLG4pLEUoZS5sZW5ndGg+PXRoaXMubWluRW50cm9weS84LFwiTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiBcIit0aGlzLm1pbkVudHJvcHkrXCIgYml0c1wiKSx0aGlzLl91cGRhdGUoZS5jb25jYXQocnx8W10pKSx0aGlzLl9yZXNlZWQ9MX0sRi5wcm90b3R5cGUuZ2VuZXJhdGU9ZnVuY3Rpb24oZSx0LHIsbil7aWYodGhpcy5fcmVzZWVkPnRoaXMucmVzZWVkSW50ZXJ2YWwpdGhyb3cgbmV3IEVycm9yKFwiUmVzZWVkIGlzIHJlcXVpcmVkXCIpO1wic3RyaW5nXCIhPXR5cGVvZiB0JiYobj1yLHI9dCx0PW51bGwpLHImJihyPXgudG9BcnJheShyLG58fFwiaGV4XCIpLHRoaXMuX3VwZGF0ZShyKSk7Zm9yKHZhciBpPVtdO2kubGVuZ3RoPGU7KXRoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCksaT1pLmNvbmNhdCh0aGlzLlYpO3ZhciBvPWkuc2xpY2UoMCxlKTtyZXR1cm4gdGhpcy5fdXBkYXRlKHIpLHRoaXMuX3Jlc2VlZCsrLHguZW5jb2RlKG8sdCl9O3ZhciB6PWsuYXNzZXJ0O2Z1bmN0aW9uIEsoZSx0KXt0aGlzLmVjPWUsdGhpcy5wcml2PW51bGwsdGhpcy5wdWI9bnVsbCx0LnByaXYmJnRoaXMuX2ltcG9ydFByaXZhdGUodC5wcml2LHQucHJpdkVuYyksdC5wdWImJnRoaXMuX2ltcG9ydFB1YmxpYyh0LnB1Yix0LnB1YkVuYyl9dmFyIFY9SztLLmZyb21QdWJsaWM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0IGluc3RhbmNlb2YgSz90Om5ldyBLKGUse3B1Yjp0LHB1YkVuYzpyfSl9LEsuZnJvbVByaXZhdGU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0IGluc3RhbmNlb2YgSz90Om5ldyBLKGUse3ByaXY6dCxwcml2RW5jOnJ9KX0sSy5wcm90b3R5cGUudmFsaWRhdGU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmdldFB1YmxpYygpO3JldHVybiBlLmlzSW5maW5pdHkoKT97cmVzdWx0OiExLHJlYXNvbjpcIkludmFsaWQgcHVibGljIGtleVwifTplLnZhbGlkYXRlKCk/ZS5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCk/e3Jlc3VsdDohMCxyZWFzb246bnVsbH06e3Jlc3VsdDohMSxyZWFzb246XCJQdWJsaWMga2V5ICogTiAhPSBPXCJ9OntyZXN1bHQ6ITEscmVhc29uOlwiUHVibGljIGtleSBpcyBub3QgYSBwb2ludFwifX0sSy5wcm90b3R5cGUuZ2V0UHVibGljPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJih0PWUsZT1udWxsKSx0aGlzLnB1Ynx8KHRoaXMucHViPXRoaXMuZWMuZy5tdWwodGhpcy5wcml2KSksdD90aGlzLnB1Yi5lbmNvZGUodCxlKTp0aGlzLnB1Yn0sSy5wcm90b3R5cGUuZ2V0UHJpdmF0ZT1mdW5jdGlvbihlKXtyZXR1cm5cImhleFwiPT09ZT90aGlzLnByaXYudG9TdHJpbmcoMTYsMik6dGhpcy5wcml2fSxLLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZT1mdW5jdGlvbihlLHQpe3RoaXMucHJpdj1uZXcodigpKShlLHR8fDE2KSx0aGlzLnByaXY9dGhpcy5wcml2LnVtb2QodGhpcy5lYy5jdXJ2ZS5uKX0sSy5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYz1mdW5jdGlvbihlLHQpe2lmKGUueHx8ZS55KXJldHVyblwibW9udFwiPT09dGhpcy5lYy5jdXJ2ZS50eXBlP3ooZS54LFwiTmVlZCB4IGNvb3JkaW5hdGVcIik6XCJzaG9ydFwiIT09dGhpcy5lYy5jdXJ2ZS50eXBlJiZcImVkd2FyZHNcIiE9PXRoaXMuZWMuY3VydmUudHlwZXx8eihlLngmJmUueSxcIk5lZWQgYm90aCB4IGFuZCB5IGNvb3JkaW5hdGVcIiksdm9pZCh0aGlzLnB1Yj10aGlzLmVjLmN1cnZlLnBvaW50KGUueCxlLnkpKTt0aGlzLnB1Yj10aGlzLmVjLmN1cnZlLmRlY29kZVBvaW50KGUsdCl9LEsucHJvdG90eXBlLmRlcml2ZT1mdW5jdGlvbihlKXtyZXR1cm4gZS52YWxpZGF0ZSgpfHx6KGUudmFsaWRhdGUoKSxcInB1YmxpYyBwb2ludCBub3QgdmFsaWRhdGVkXCIpLGUubXVsKHRoaXMucHJpdikuZ2V0WCgpfSxLLnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5lYy5zaWduKGUsdGhpcyx0LHIpfSxLLnByb3RvdHlwZS52ZXJpZnk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYy52ZXJpZnkoZSx0LHRoaXMpfSxLLnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uKCl7cmV0dXJuXCI8S2V5IHByaXY6IFwiKyh0aGlzLnByaXYmJnRoaXMucHJpdi50b1N0cmluZygxNiwyKSkrXCIgcHViOiBcIisodGhpcy5wdWImJnRoaXMucHViLmluc3BlY3QoKSkrXCIgPlwifTt2YXIgRz1rLmFzc2VydDtmdW5jdGlvbiBXKGUsdCl7aWYoZSBpbnN0YW5jZW9mIFcpcmV0dXJuIGU7dGhpcy5faW1wb3J0REVSKGUsdCl8fChHKGUuciYmZS5zLFwiU2lnbmF0dXJlIHdpdGhvdXQgciBvciBzXCIpLHRoaXMucj1uZXcodigpKShlLnIsMTYpLHRoaXMucz1uZXcodigpKShlLnMsMTYpLHZvaWQgMD09PWUucmVjb3ZlcnlQYXJhbT90aGlzLnJlY292ZXJ5UGFyYW09bnVsbDp0aGlzLnJlY292ZXJ5UGFyYW09ZS5yZWNvdmVyeVBhcmFtKX12YXIgWD1XO2Z1bmN0aW9uIFkoKXt0aGlzLnBsYWNlPTB9ZnVuY3Rpb24gSihlLHQpe3ZhciByPWVbdC5wbGFjZSsrXTtpZighKDEyOCZyKSlyZXR1cm4gcjt2YXIgbj0xNSZyO2lmKDA9PT1ufHxuPjQpcmV0dXJuITE7Zm9yKHZhciBpPTAsbz0wLHM9dC5wbGFjZTtvPG47bysrLHMrKylpPDw9OCxpfD1lW3NdLGk+Pj49MDtyZXR1cm4hKGk8PTEyNykmJih0LnBsYWNlPXMsaSl9ZnVuY3Rpb24gJChlKXtmb3IodmFyIHQ9MCxyPWUubGVuZ3RoLTE7IWVbdF0mJiEoMTI4JmVbdCsxXSkmJnQ8cjspdCsrO3JldHVybiAwPT09dD9lOmUuc2xpY2UodCl9ZnVuY3Rpb24gWihlLHQpe2lmKHQ8MTI4KWUucHVzaCh0KTtlbHNle3ZhciByPTErKE1hdGgubG9nKHQpL01hdGguTE4yPj4+Myk7Zm9yKGUucHVzaCgxMjh8cik7LS1yOyllLnB1c2godD4+PihyPDwzKSYyNTUpO2UucHVzaCh0KX19Vy5wcm90b3R5cGUuX2ltcG9ydERFUj1mdW5jdGlvbihlLHQpe2U9ay50b0FycmF5KGUsdCk7dmFyIHI9bmV3IFk7aWYoNDghPT1lW3IucGxhY2UrK10pcmV0dXJuITE7dmFyIG49SihlLHIpO2lmKCExPT09bilyZXR1cm4hMTtpZihuK3IucGxhY2UhPT1lLmxlbmd0aClyZXR1cm4hMTtpZigyIT09ZVtyLnBsYWNlKytdKXJldHVybiExO3ZhciBpPUooZSxyKTtpZighMT09PWkpcmV0dXJuITE7dmFyIG89ZS5zbGljZShyLnBsYWNlLGkrci5wbGFjZSk7aWYoci5wbGFjZSs9aSwyIT09ZVtyLnBsYWNlKytdKXJldHVybiExO3ZhciBzPUooZSxyKTtpZighMT09PXMpcmV0dXJuITE7aWYoZS5sZW5ndGghPT1zK3IucGxhY2UpcmV0dXJuITE7dmFyIGE9ZS5zbGljZShyLnBsYWNlLHMrci5wbGFjZSk7aWYoMD09PW9bMF0pe2lmKCEoMTI4Jm9bMV0pKXJldHVybiExO289by5zbGljZSgxKX1pZigwPT09YVswXSl7aWYoISgxMjgmYVsxXSkpcmV0dXJuITE7YT1hLnNsaWNlKDEpfXJldHVybiB0aGlzLnI9bmV3KHYoKSkobyksdGhpcy5zPW5ldyh2KCkpKGEpLHRoaXMucmVjb3ZlcnlQYXJhbT1udWxsLCEwfSxXLnByb3RvdHlwZS50b0RFUj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnIudG9BcnJheSgpLHI9dGhpcy5zLnRvQXJyYXkoKTtmb3IoMTI4JnRbMF0mJih0PVswXS5jb25jYXQodCkpLDEyOCZyWzBdJiYocj1bMF0uY29uY2F0KHIpKSx0PSQodCkscj0kKHIpOyEoclswXXx8MTI4JnJbMV0pOylyPXIuc2xpY2UoMSk7dmFyIG49WzJdO1oobix0Lmxlbmd0aCksKG49bi5jb25jYXQodCkpLnB1c2goMiksWihuLHIubGVuZ3RoKTt2YXIgaT1uLmNvbmNhdChyKSxvPVs0OF07cmV0dXJuIFoobyxpLmxlbmd0aCksbz1vLmNvbmNhdChpKSxrLmVuY29kZShvLGUpfTt2YXIgUT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkXCIpfSxlZT1rLmFzc2VydDtmdW5jdGlvbiB0ZShlKXtpZighKHRoaXMgaW5zdGFuY2VvZiB0ZSkpcmV0dXJuIG5ldyB0ZShlKTtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGVlKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChxLGUpLFwiVW5rbm93biBjdXJ2ZSBcIitlKSxlPXFbZV0pLGUgaW5zdGFuY2VvZiBxLlByZXNldEN1cnZlJiYoZT17Y3VydmU6ZX0pLHRoaXMuY3VydmU9ZS5jdXJ2ZS5jdXJ2ZSx0aGlzLm49dGhpcy5jdXJ2ZS5uLHRoaXMubmg9dGhpcy5uLnVzaHJuKDEpLHRoaXMuZz10aGlzLmN1cnZlLmcsdGhpcy5nPWUuY3VydmUuZyx0aGlzLmcucHJlY29tcHV0ZShlLmN1cnZlLm4uYml0TGVuZ3RoKCkrMSksdGhpcy5oYXNoPWUuaGFzaHx8ZS5jdXJ2ZS5oYXNofXZhciByZT10ZTt0ZS5wcm90b3R5cGUua2V5UGFpcj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFYodGhpcyxlKX0sdGUucHJvdG90eXBlLmtleUZyb21Qcml2YXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIFYuZnJvbVByaXZhdGUodGhpcyxlLHQpfSx0ZS5wcm90b3R5cGUua2V5RnJvbVB1YmxpYz1mdW5jdGlvbihlLHQpe3JldHVybiBWLmZyb21QdWJsaWModGhpcyxlLHQpfSx0ZS5wcm90b3R5cGUuZ2VuS2V5UGFpcj1mdW5jdGlvbihlKXtlfHwoZT17fSk7Zm9yKHZhciB0PW5ldyBIKHtoYXNoOnRoaXMuaGFzaCxwZXJzOmUucGVycyxwZXJzRW5jOmUucGVyc0VuY3x8XCJ1dGY4XCIsZW50cm9weTplLmVudHJvcHl8fFEodGhpcy5oYXNoLmhtYWNTdHJlbmd0aCksZW50cm9weUVuYzplLmVudHJvcHkmJmUuZW50cm9weUVuY3x8XCJ1dGY4XCIsbm9uY2U6dGhpcy5uLnRvQXJyYXkoKX0pLHI9dGhpcy5uLmJ5dGVMZW5ndGgoKSxuPXRoaXMubi5zdWIobmV3KHYoKSkoMikpOzspe3ZhciBpPW5ldyh2KCkpKHQuZ2VuZXJhdGUocikpO2lmKCEoaS5jbXAobik+MCkpcmV0dXJuIGkuaWFkZG4oMSksdGhpcy5rZXlGcm9tUHJpdmF0ZShpKX19LHRlLnByb3RvdHlwZS5fdHJ1bmNhdGVUb049ZnVuY3Rpb24oZSx0KXt2YXIgcj04KmUuYnl0ZUxlbmd0aCgpLXRoaXMubi5iaXRMZW5ndGgoKTtyZXR1cm4gcj4wJiYoZT1lLnVzaHJuKHIpKSwhdCYmZS5jbXAodGhpcy5uKT49MD9lLnN1Yih0aGlzLm4pOmV9LHRlLnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKGUsdCxyLG4pe1wib2JqZWN0XCI9PXR5cGVvZiByJiYobj1yLHI9bnVsbCksbnx8KG49e30pLHQ9dGhpcy5rZXlGcm9tUHJpdmF0ZSh0LHIpLGU9dGhpcy5fdHJ1bmNhdGVUb04obmV3KHYoKSkoZSwxNikpO2Zvcih2YXIgaT10aGlzLm4uYnl0ZUxlbmd0aCgpLG89dC5nZXRQcml2YXRlKCkudG9BcnJheShcImJlXCIsaSkscz1lLnRvQXJyYXkoXCJiZVwiLGkpLGE9bmV3IEgoe2hhc2g6dGhpcy5oYXNoLGVudHJvcHk6byxub25jZTpzLHBlcnM6bi5wZXJzLHBlcnNFbmM6bi5wZXJzRW5jfHxcInV0ZjhcIn0pLGM9dGhpcy5uLnN1YihuZXcodigpKSgxKSksZj0wOztmKyspe3ZhciB1PW4uaz9uLmsoZik6bmV3KHYoKSkoYS5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7aWYoISgodT10aGlzLl90cnVuY2F0ZVRvTih1LCEwKSkuY21wbigxKTw9MHx8dS5jbXAoYyk+PTApKXt2YXIgZD10aGlzLmcubXVsKHUpO2lmKCFkLmlzSW5maW5pdHkoKSl7dmFyIGg9ZC5nZXRYKCksbD1oLnVtb2QodGhpcy5uKTtpZigwIT09bC5jbXBuKDApKXt2YXIgcD11Lmludm0odGhpcy5uKS5tdWwobC5tdWwodC5nZXRQcml2YXRlKCkpLmlhZGQoZSkpO2lmKDAhPT0ocD1wLnVtb2QodGhpcy5uKSkuY21wbigwKSl7dmFyIGI9KGQuZ2V0WSgpLmlzT2RkKCk/MTowKXwoMCE9PWguY21wKGwpPzI6MCk7cmV0dXJuIG4uY2Fub25pY2FsJiZwLmNtcCh0aGlzLm5oKT4wJiYocD10aGlzLm4uc3ViKHApLGJePTEpLG5ldyBYKHtyOmwsczpwLHJlY292ZXJ5UGFyYW06Yn0pfX19fX19LHRlLnByb3RvdHlwZS52ZXJpZnk9ZnVuY3Rpb24oZSx0LHIsbil7ZT10aGlzLl90cnVuY2F0ZVRvTihuZXcodigpKShlLDE2KSkscj10aGlzLmtleUZyb21QdWJsaWMocixuKTt2YXIgaT0odD1uZXcgWCh0LFwiaGV4XCIpKS5yLG89dC5zO2lmKGkuY21wbigxKTwwfHxpLmNtcCh0aGlzLm4pPj0wKXJldHVybiExO2lmKG8uY21wbigxKTwwfHxvLmNtcCh0aGlzLm4pPj0wKXJldHVybiExO3ZhciBzLGE9by5pbnZtKHRoaXMubiksYz1hLm11bChlKS51bW9kKHRoaXMubiksZj1hLm11bChpKS51bW9kKHRoaXMubik7cmV0dXJuIHRoaXMuY3VydmUuX21heHdlbGxUcmljaz8hKHM9dGhpcy5nLmptdWxBZGQoYyxyLmdldFB1YmxpYygpLGYpKS5pc0luZmluaXR5KCkmJnMuZXFYVG9QKGkpOiEocz10aGlzLmcubXVsQWRkKGMsci5nZXRQdWJsaWMoKSxmKSkuaXNJbmZpbml0eSgpJiYwPT09cy5nZXRYKCkudW1vZCh0aGlzLm4pLmNtcChpKX0sdGUucHJvdG90eXBlLnJlY292ZXJQdWJLZXk9ZnVuY3Rpb24oZSx0LHIsbil7ZWUoKDMmcik9PT1yLFwiVGhlIHJlY292ZXJ5IHBhcmFtIGlzIG1vcmUgdGhhbiB0d28gYml0c1wiKSx0PW5ldyBYKHQsbik7dmFyIGk9dGhpcy5uLG89bmV3KHYoKSkoZSkscz10LnIsYT10LnMsYz0xJnIsZj1yPj4xO2lmKHMuY21wKHRoaXMuY3VydmUucC51bW9kKHRoaXMuY3VydmUubikpPj0wJiZmKXRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIHNlbmNvbmQga2V5IGNhbmRpbmF0ZVwiKTtzPWY/dGhpcy5jdXJ2ZS5wb2ludEZyb21YKHMuYWRkKHRoaXMuY3VydmUubiksYyk6dGhpcy5jdXJ2ZS5wb2ludEZyb21YKHMsYyk7dmFyIHU9dC5yLmludm0oaSksZD1pLnN1YihvKS5tdWwodSkudW1vZChpKSxoPWEubXVsKHUpLnVtb2QoaSk7cmV0dXJuIHRoaXMuZy5tdWxBZGQoZCxzLGgpfSx0ZS5wcm90b3R5cGUuZ2V0S2V5UmVjb3ZlcnlQYXJhbT1mdW5jdGlvbihlLHQscixuKXtpZihudWxsIT09KHQ9bmV3IFgodCxuKSkucmVjb3ZlcnlQYXJhbSlyZXR1cm4gdC5yZWNvdmVyeVBhcmFtO2Zvcih2YXIgaT0wO2k8NDtpKyspe3ZhciBvO3RyeXtvPXRoaXMucmVjb3ZlclB1YktleShlLHQsaSl9Y2F0Y2goZSl7Y29udGludWV9aWYoby5lcShyKSlyZXR1cm4gaX10aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3JcIil9O3ZhciBuZT1TKChmdW5jdGlvbihlLHQpe3ZhciByPXQ7ci52ZXJzaW9uPVwiNi41LjRcIixyLnV0aWxzPWssci5yYW5kPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWRcIil9LHIuY3VydmU9VSxyLmN1cnZlcz1xLHIuZWM9cmUsci5lZGRzYT1udWxsfSkpLmVjO2NvbnN0IGllPW5ldyBmLllkKFwic2lnbmluZy1rZXkvNS42LjJcIik7bGV0IG9lPW51bGw7ZnVuY3Rpb24gc2UoKXtyZXR1cm4gb2V8fChvZT1uZXcgbmUoXCJzZWNwMjU2azFcIikpLG9lfWNsYXNzIGFle2NvbnN0cnVjdG9yKGUpeygwLGMuekcpKHRoaXMsXCJjdXJ2ZVwiLFwic2VjcDI1NmsxXCIpLCgwLGMuekcpKHRoaXMsXCJwcml2YXRlS2V5XCIsKDAsby5EdikoZSkpLDMyIT09KDAsby5FMSkodGhpcy5wcml2YXRlS2V5KSYmaWUudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBwcml2YXRlIGtleVwiLFwicHJpdmF0ZUtleVwiLFwiW1sgUkVEQUNURUQgXV1cIik7Y29uc3QgdD1zZSgpLmtleUZyb21Qcml2YXRlKCgwLG8ubEUpKHRoaXMucHJpdmF0ZUtleSkpOygwLGMuekcpKHRoaXMsXCJwdWJsaWNLZXlcIixcIjB4XCIrdC5nZXRQdWJsaWMoITEsXCJoZXhcIikpLCgwLGMuekcpKHRoaXMsXCJjb21wcmVzc2VkUHVibGljS2V5XCIsXCIweFwiK3QuZ2V0UHVibGljKCEwLFwiaGV4XCIpKSwoMCxjLnpHKSh0aGlzLFwiX2lzU2lnbmluZ0tleVwiLCEwKX1fYWRkUG9pbnQoZSl7Y29uc3QgdD1zZSgpLmtleUZyb21QdWJsaWMoKDAsby5sRSkodGhpcy5wdWJsaWNLZXkpKSxyPXNlKCkua2V5RnJvbVB1YmxpYygoMCxvLmxFKShlKSk7cmV0dXJuXCIweFwiK3QucHViLmFkZChyLnB1YikuZW5jb2RlQ29tcHJlc3NlZChcImhleFwiKX1zaWduRGlnZXN0KGUpe2NvbnN0IHQ9c2UoKS5rZXlGcm9tUHJpdmF0ZSgoMCxvLmxFKSh0aGlzLnByaXZhdGVLZXkpKSxyPSgwLG8ubEUpKGUpOzMyIT09ci5sZW5ndGgmJmllLnRocm93QXJndW1lbnRFcnJvcihcImJhZCBkaWdlc3QgbGVuZ3RoXCIsXCJkaWdlc3RcIixlKTtjb25zdCBuPXQuc2lnbihyLHtjYW5vbmljYWw6ITB9KTtyZXR1cm4oMCxvLk4pKHtyZWNvdmVyeVBhcmFtOm4ucmVjb3ZlcnlQYXJhbSxyOigwLG8uJG0pKFwiMHhcIituLnIudG9TdHJpbmcoMTYpLDMyKSxzOigwLG8uJG0pKFwiMHhcIituLnMudG9TdHJpbmcoMTYpLDMyKX0pfWNvbXB1dGVTaGFyZWRTZWNyZXQoZSl7Y29uc3QgdD1zZSgpLmtleUZyb21Qcml2YXRlKCgwLG8ubEUpKHRoaXMucHJpdmF0ZUtleSkpLHI9c2UoKS5rZXlGcm9tUHVibGljKCgwLG8ubEUpKGNlKGUpKSk7cmV0dXJuKDAsby4kbSkoXCIweFwiK3QuZGVyaXZlKHIuZ2V0UHVibGljKCkpLnRvU3RyaW5nKDE2KSwzMil9c3RhdGljIGlzU2lnbmluZ0tleShlKXtyZXR1cm4hKCFlfHwhZS5faXNTaWduaW5nS2V5KX19ZnVuY3Rpb24gY2UoZSx0KXtjb25zdCByPSgwLG8ubEUpKGUpO2lmKDMyPT09ci5sZW5ndGgpe2NvbnN0IGU9bmV3IGFlKHIpO3JldHVybiB0P1wiMHhcIitzZSgpLmtleUZyb21Qcml2YXRlKHIpLmdldFB1YmxpYyghMCxcImhleFwiKTplLnB1YmxpY0tleX1yZXR1cm4gMzM9PT1yLmxlbmd0aD90PygwLG8uRHYpKHIpOlwiMHhcIitzZSgpLmtleUZyb21QdWJsaWMocikuZ2V0UHVibGljKCExLFwiaGV4XCIpOjY1PT09ci5sZW5ndGg/dD9cIjB4XCIrc2UoKS5rZXlGcm9tUHVibGljKHIpLmdldFB1YmxpYyghMCxcImhleFwiKTooMCxvLkR2KShyKTppZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHB1YmxpYyBvciBwcml2YXRlIGtleVwiLFwia2V5XCIsXCJbUkVEQUNURURdXCIpfWNvbnN0IGZlPW5ldyBmLllkKFwidHJhbnNhY3Rpb25zLzUuNi4yXCIpO3ZhciB1ZTtmdW5jdGlvbiBkZShlKXtyZXR1cm5cIjB4XCI9PT1lP251bGw6KDAsbi5LbikoZSl9ZnVuY3Rpb24gaGUoZSl7cmV0dXJuXCIweFwiPT09ZT9zLl9ZOmkuTyQuZnJvbShlKX0hZnVuY3Rpb24oZSl7ZVtlLmxlZ2FjeT0wXT1cImxlZ2FjeVwiLGVbZS5laXAyOTMwPTFdPVwiZWlwMjkzMFwiLGVbZS5laXAxNTU5PTJdPVwiZWlwMTU1OVwifSh1ZXx8KHVlPXt9KSk7Y29uc3QgbGU9W3tuYW1lOlwibm9uY2VcIixtYXhMZW5ndGg6MzIsbnVtZXJpYzohMH0se25hbWU6XCJnYXNQcmljZVwiLG1heExlbmd0aDozMixudW1lcmljOiEwfSx7bmFtZTpcImdhc0xpbWl0XCIsbWF4TGVuZ3RoOjMyLG51bWVyaWM6ITB9LHtuYW1lOlwidG9cIixsZW5ndGg6MjB9LHtuYW1lOlwidmFsdWVcIixtYXhMZW5ndGg6MzIsbnVtZXJpYzohMH0se25hbWU6XCJkYXRhXCJ9XSxwZT17Y2hhaW5JZDohMCxkYXRhOiEwLGdhc0xpbWl0OiEwLGdhc1ByaWNlOiEwLG5vbmNlOiEwLHRvOiEwLHR5cGU6ITAsdmFsdWU6ITB9O2Z1bmN0aW9uIGJlKGUpe2NvbnN0IHQ9Y2UoZSk7cmV0dXJuKDAsbi5LbikoKDAsby5wMykoKDAsYS53KSgoMCxvLnAzKSh0LDEpKSwxMikpfWZ1bmN0aW9uIHllKGUsdCl7cmV0dXJuIGJlKGZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj0oMCxvLk4pKHQpLG49e3I6KDAsby5sRSkoci5yKSxzOigwLG8ubEUpKHIucyl9O3JldHVyblwiMHhcIitzZSgpLnJlY292ZXJQdWJLZXkoKDAsby5sRSkoZSksbixyLnJlY292ZXJ5UGFyYW0pLmVuY29kZShcImhleFwiLCExKX0oKDAsby5sRSkoZSksdCkpfWZ1bmN0aW9uIGdlKGUsdCl7Y29uc3Qgcj0oMCxvLkcxKShpLk8kLmZyb20oZSkudG9IZXhTdHJpbmcoKSk7cmV0dXJuIHIubGVuZ3RoPjMyJiZmZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aCBmb3IgXCIrdCxcInRyYW5zYWN0aW9uOlwiK3QsZSkscn1mdW5jdGlvbiBtZShlLHQpe3JldHVybnthZGRyZXNzOigwLG4uS24pKGUpLHN0b3JhZ2VLZXlzOih0fHxbXSkubWFwKCgodCxyKT0+KDMyIT09KDAsby5FMSkodCkmJmZlLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWNjZXNzIGxpc3Qgc3RvcmFnZUtleVwiLGBhY2Nlc3NMaXN0WyR7ZX06JHtyfV1gLHQpLHQudG9Mb3dlckNhc2UoKSkpKX19ZnVuY3Rpb24gdmUoZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZS5tYXAoKChlLHQpPT5BcnJheS5pc0FycmF5KGUpPyhlLmxlbmd0aD4yJiZmZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJhY2Nlc3MgbGlzdCBleHBlY3RlZCB0byBiZSBbIGFkZHJlc3MsIHN0b3JhZ2VLZXlzW10gXVwiLGB2YWx1ZVske3R9XWAsZSksbWUoZVswXSxlWzFdKSk6bWUoZS5hZGRyZXNzLGUuc3RvcmFnZUtleXMpKSk7Y29uc3QgdD1PYmplY3Qua2V5cyhlKS5tYXAoKHQ9Pntjb25zdCByPWVbdF0ucmVkdWNlKCgoZSx0KT0+KGVbdF09ITAsZSkpLHt9KTtyZXR1cm4gbWUodCxPYmplY3Qua2V5cyhyKS5zb3J0KCkpfSkpO3JldHVybiB0LnNvcnQoKChlLHQpPT5lLmFkZHJlc3MubG9jYWxlQ29tcGFyZSh0LmFkZHJlc3MpKSksdH1mdW5jdGlvbiB3ZShlKXtyZXR1cm4gdmUoZSkubWFwKChlPT5bZS5hZGRyZXNzLGUuc3RvcmFnZUtleXNdKSl9ZnVuY3Rpb24gX2UoZSx0KXtpZihudWxsIT1lLmdhc1ByaWNlKXtjb25zdCB0PWkuTyQuZnJvbShlLmdhc1ByaWNlKSxyPWkuTyQuZnJvbShlLm1heEZlZVBlckdhc3x8MCk7dC5lcShyKXx8ZmUudGhyb3dBcmd1bWVudEVycm9yKFwibWlzbWF0Y2ggRUlQLTE1NTkgZ2FzUHJpY2UgIT0gbWF4RmVlUGVyR2FzXCIsXCJ0eFwiLHtnYXNQcmljZTp0LG1heEZlZVBlckdhczpyfSl9Y29uc3Qgcj1bZ2UoZS5jaGFpbklkfHwwLFwiY2hhaW5JZFwiKSxnZShlLm5vbmNlfHwwLFwibm9uY2VcIiksZ2UoZS5tYXhQcmlvcml0eUZlZVBlckdhc3x8MCxcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLGdlKGUubWF4RmVlUGVyR2FzfHwwLFwibWF4RmVlUGVyR2FzXCIpLGdlKGUuZ2FzTGltaXR8fDAsXCJnYXNMaW1pdFwiKSxudWxsIT1lLnRvPygwLG4uS24pKGUudG8pOlwiMHhcIixnZShlLnZhbHVlfHwwLFwidmFsdWVcIiksZS5kYXRhfHxcIjB4XCIsd2UoZS5hY2Nlc3NMaXN0fHxbXSldO2lmKHQpe2NvbnN0IGU9KDAsby5OKSh0KTtyLnB1c2goZ2UoZS5yZWNvdmVyeVBhcmFtLFwicmVjb3ZlcnlQYXJhbVwiKSksci5wdXNoKCgwLG8uRzEpKGUucikpLHIucHVzaCgoMCxvLkcxKShlLnMpKX1yZXR1cm4oMCxvLnhzKShbXCIweDAyXCIscChyKV0pfWZ1bmN0aW9uIFNlKGUsdCl7Y29uc3Qgcj1bZ2UoZS5jaGFpbklkfHwwLFwiY2hhaW5JZFwiKSxnZShlLm5vbmNlfHwwLFwibm9uY2VcIiksZ2UoZS5nYXNQcmljZXx8MCxcImdhc1ByaWNlXCIpLGdlKGUuZ2FzTGltaXR8fDAsXCJnYXNMaW1pdFwiKSxudWxsIT1lLnRvPygwLG4uS24pKGUudG8pOlwiMHhcIixnZShlLnZhbHVlfHwwLFwidmFsdWVcIiksZS5kYXRhfHxcIjB4XCIsd2UoZS5hY2Nlc3NMaXN0fHxbXSldO2lmKHQpe2NvbnN0IGU9KDAsby5OKSh0KTtyLnB1c2goZ2UoZS5yZWNvdmVyeVBhcmFtLFwicmVjb3ZlcnlQYXJhbVwiKSksci5wdXNoKCgwLG8uRzEpKGUucikpLHIucHVzaCgoMCxvLkcxKShlLnMpKX1yZXR1cm4oMCxvLnhzKShbXCIweDAxXCIscChyKV0pfWZ1bmN0aW9uIEVlKGUsdCl7aWYobnVsbD09ZS50eXBlfHwwPT09ZS50eXBlKXJldHVybiBudWxsIT1lLmFjY2Vzc0xpc3QmJmZlLnRocm93QXJndW1lbnRFcnJvcihcInVudHlwZWQgdHJhbnNhY3Rpb25zIGRvIG5vdCBzdXBwb3J0IGFjY2Vzc0xpc3Q7IGluY2x1ZGUgdHlwZTogMVwiLFwidHJhbnNhY3Rpb25cIixlKSxmdW5jdGlvbihlLHQpeygwLGMudWopKGUscGUpO2NvbnN0IHI9W107bGUuZm9yRWFjaCgoZnVuY3Rpb24odCl7bGV0IG49ZVt0Lm5hbWVdfHxbXTtjb25zdCBpPXt9O3QubnVtZXJpYyYmKGkuaGV4UGFkPVwibGVmdFwiKSxuPSgwLG8ubEUpKCgwLG8uRHYpKG4saSkpLHQubGVuZ3RoJiZuLmxlbmd0aCE9PXQubGVuZ3RoJiZuLmxlbmd0aD4wJiZmZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aCBmb3IgXCIrdC5uYW1lLFwidHJhbnNhY3Rpb246XCIrdC5uYW1lLG4pLHQubWF4TGVuZ3RoJiYobj0oMCxvLkcxKShuKSxuLmxlbmd0aD50Lm1heExlbmd0aCYmZmUudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBsZW5ndGggZm9yIFwiK3QubmFtZSxcInRyYW5zYWN0aW9uOlwiK3QubmFtZSxuKSksci5wdXNoKCgwLG8uRHYpKG4pKX0pKTtsZXQgbj0wO2lmKG51bGwhPWUuY2hhaW5JZD8obj1lLmNoYWluSWQsXCJudW1iZXJcIiE9dHlwZW9mIG4mJmZlLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHJhbnNhY3Rpb24uY2hhaW5JZFwiLFwidHJhbnNhY3Rpb25cIixlKSk6dCYmISgwLG8uWnEpKHQpJiZ0LnY+MjgmJihuPU1hdGguZmxvb3IoKHQudi0zNSkvMikpLDAhPT1uJiYoci5wdXNoKCgwLG8uRHYpKG4pKSxyLnB1c2goXCIweFwiKSxyLnB1c2goXCIweFwiKSksIXQpcmV0dXJuIHAocik7Y29uc3QgaT0oMCxvLk4pKHQpO2xldCBzPTI3K2kucmVjb3ZlcnlQYXJhbTtyZXR1cm4gMCE9PW4/KHIucG9wKCksci5wb3AoKSxyLnBvcCgpLHMrPTIqbis4LGkudj4yOCYmaS52IT09cyYmZmUudGhyb3dBcmd1bWVudEVycm9yKFwidHJhbnNhY3Rpb24uY2hhaW5JZC9zaWduYXR1cmUudiBtaXNtYXRjaFwiLFwic2lnbmF0dXJlXCIsdCkpOmkudiE9PXMmJmZlLnRocm93QXJndW1lbnRFcnJvcihcInRyYW5zYWN0aW9uLmNoYWluSWQvc2lnbmF0dXJlLnYgbWlzbWF0Y2hcIixcInNpZ25hdHVyZVwiLHQpLHIucHVzaCgoMCxvLkR2KShzKSksci5wdXNoKCgwLG8uRzEpKCgwLG8ubEUpKGkucikpKSxyLnB1c2goKDAsby5HMSkoKDAsby5sRSkoaS5zKSkpLHAocil9KGUsdCk7c3dpdGNoKGUudHlwZSl7Y2FzZSAxOnJldHVybiBTZShlLHQpO2Nhc2UgMjpyZXR1cm4gX2UoZSx0KX1yZXR1cm4gZmUudGhyb3dFcnJvcihgdW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZTogJHtlLnR5cGV9YCxmLllkLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInNlcmlhbGl6ZVRyYW5zYWN0aW9uXCIsdHJhbnNhY3Rpb25UeXBlOmUudHlwZX0pfWZ1bmN0aW9uIEFlKGUsdCxyKXt0cnl7Y29uc3Qgcj1oZSh0WzBdKS50b051bWJlcigpO2lmKDAhPT1yJiYxIT09cil0aHJvdyBuZXcgRXJyb3IoXCJiYWQgcmVjaWRcIik7ZS52PXJ9Y2F0Y2goZSl7ZmUudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB2IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAxXCIsXCJ2XCIsdFswXSl9ZS5yPSgwLG8uJG0pKHRbMV0sMzIpLGUucz0oMCxvLiRtKSh0WzJdLDMyKTt0cnl7Y29uc3QgdD0oMCxhLncpKHIoZSkpO2UuZnJvbT15ZSh0LHtyOmUucixzOmUucyxyZWNvdmVyeVBhcmFtOmUudn0pfWNhdGNoKGUpe319ZnVuY3Rpb24geGUoZSl7Y29uc3QgdD0oMCxvLmxFKShlKTtpZih0WzBdPjEyNylyZXR1cm4gZnVuY3Rpb24oZSl7Y29uc3QgdD1nKGUpOzkhPT10Lmxlbmd0aCYmNiE9PXQubGVuZ3RoJiZmZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHJhdyB0cmFuc2FjdGlvblwiLFwicmF3VHJhbnNhY3Rpb25cIixlKTtjb25zdCByPXtub25jZTpoZSh0WzBdKS50b051bWJlcigpLGdhc1ByaWNlOmhlKHRbMV0pLGdhc0xpbWl0OmhlKHRbMl0pLHRvOmRlKHRbM10pLHZhbHVlOmhlKHRbNF0pLGRhdGE6dFs1XSxjaGFpbklkOjB9O2lmKDY9PT10Lmxlbmd0aClyZXR1cm4gcjt0cnl7ci52PWkuTyQuZnJvbSh0WzZdKS50b051bWJlcigpfWNhdGNoKGUpe3JldHVybiByfWlmKHIucj0oMCxvLiRtKSh0WzddLDMyKSxyLnM9KDAsby4kbSkodFs4XSwzMiksaS5PJC5mcm9tKHIucikuaXNaZXJvKCkmJmkuTyQuZnJvbShyLnMpLmlzWmVybygpKXIuY2hhaW5JZD1yLnYsci52PTA7ZWxzZXtyLmNoYWluSWQ9TWF0aC5mbG9vcigoci52LTM1KS8yKSxyLmNoYWluSWQ8MCYmKHIuY2hhaW5JZD0wKTtsZXQgbj1yLnYtMjc7Y29uc3QgaT10LnNsaWNlKDAsNik7MCE9PXIuY2hhaW5JZCYmKGkucHVzaCgoMCxvLkR2KShyLmNoYWluSWQpKSxpLnB1c2goXCIweFwiKSxpLnB1c2goXCIweFwiKSxuLT0yKnIuY2hhaW5JZCs4KTtjb25zdCBzPSgwLGEudykocChpKSk7dHJ5e3IuZnJvbT15ZShzLHtyOigwLG8uRHYpKHIuciksczooMCxvLkR2KShyLnMpLHJlY292ZXJ5UGFyYW06bn0pfWNhdGNoKGUpe31yLmhhc2g9KDAsYS53KShlKX1yZXR1cm4gci50eXBlPW51bGwscn0odCk7c3dpdGNoKHRbMF0pe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24oZSl7Y29uc3QgdD1nKGUuc2xpY2UoMSkpOzghPT10Lmxlbmd0aCYmMTEhPT10Lmxlbmd0aCYmZmUudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBjb21wb25lbnQgY291bnQgZm9yIHRyYW5zYWN0aW9uIHR5cGU6IDFcIixcInBheWxvYWRcIiwoMCxvLkR2KShlKSk7Y29uc3Qgcj17dHlwZToxLGNoYWluSWQ6aGUodFswXSkudG9OdW1iZXIoKSxub25jZTpoZSh0WzFdKS50b051bWJlcigpLGdhc1ByaWNlOmhlKHRbMl0pLGdhc0xpbWl0OmhlKHRbM10pLHRvOmRlKHRbNF0pLHZhbHVlOmhlKHRbNV0pLGRhdGE6dFs2XSxhY2Nlc3NMaXN0OnZlKHRbN10pfTtyZXR1cm4gOD09PXQubGVuZ3RofHwoci5oYXNoPSgwLGEudykoZSksQWUocix0LnNsaWNlKDgpLFNlKSkscn0odCk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbihlKXtjb25zdCB0PWcoZS5zbGljZSgxKSk7OSE9PXQubGVuZ3RoJiYxMiE9PXQubGVuZ3RoJiZmZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbXBvbmVudCBjb3VudCBmb3IgdHJhbnNhY3Rpb24gdHlwZTogMlwiLFwicGF5bG9hZFwiLCgwLG8uRHYpKGUpKTtjb25zdCByPWhlKHRbMl0pLG49aGUodFszXSksaT17dHlwZToyLGNoYWluSWQ6aGUodFswXSkudG9OdW1iZXIoKSxub25jZTpoZSh0WzFdKS50b051bWJlcigpLG1heFByaW9yaXR5RmVlUGVyR2FzOnIsbWF4RmVlUGVyR2FzOm4sZ2FzUHJpY2U6bnVsbCxnYXNMaW1pdDpoZSh0WzRdKSx0bzpkZSh0WzVdKSx2YWx1ZTpoZSh0WzZdKSxkYXRhOnRbN10sYWNjZXNzTGlzdDp2ZSh0WzhdKX07cmV0dXJuIDk9PT10Lmxlbmd0aHx8KGkuaGFzaD0oMCxhLncpKGUpLEFlKGksdC5zbGljZSg5KSxfZSkpLGl9KHQpfXJldHVybiBmZS50aHJvd0Vycm9yKGB1bnN1cHBvcnRlZCB0cmFuc2FjdGlvbiB0eXBlOiAke3RbMF19YCxmLllkLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInBhcnNlVHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvblR5cGU6dFswXX0pfX0sNTUwODooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Db21wb3NlZFN0b3JlPXZvaWQgMDtjb25zdCBuPXIoODg3Nyk7Y2xhc3MgaSBleHRlbmRzIG4uT2JzZXJ2YWJsZVN0b3Jle2NvbnN0cnVjdG9yKGUpe3N1cGVyKHt9KSx0aGlzLl9jaGlsZHJlbj1lfHx7fSxPYmplY3Qua2V5cyh0aGlzLl9jaGlsZHJlbikuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9dGhpcy5fY2hpbGRyZW5bZV07dGhpcy5fYWRkQ2hpbGQoZSx0KX0pKX1fYWRkQ2hpbGQoZSx0KXtjb25zdCByPXQ9Pntjb25zdCByPXRoaXMuZ2V0U3RhdGUoKTtyW2VdPXQsdGhpcy5wdXRTdGF0ZShyKX07dC5zdWJzY3JpYmUocikscih0LmdldFN0YXRlKCkpfX10LkNvbXBvc2VkU3RvcmU9aX0sNDAxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lk1lcmdlZFN0b3JlPXZvaWQgMDtjb25zdCBuPXIoODg3Nyk7Y2xhc3MgaSBleHRlbmRzIG4uT2JzZXJ2YWJsZVN0b3Jle2NvbnN0cnVjdG9yKGU9W10pe3N1cGVyKHt9KSx0aGlzLl9jaGlsZHJlbj1lLGUuZm9yRWFjaCgoZT0+dGhpcy5fYWRkQ2hpbGQoZSkpKSx0aGlzLl91cGRhdGVXaG9sZVN0YXRlKCl9X2FkZENoaWxkKGUpe2Uuc3Vic2NyaWJlKCgoKT0+dGhpcy5fdXBkYXRlV2hvbGVTdGF0ZSgpKSl9X3VwZGF0ZVdob2xlU3RhdGUoKXtjb25zdCBlPXRoaXMuX2NoaWxkcmVuLm1hcCgoZT0+ZS5nZXRTdGF0ZSgpKSksdD1PYmplY3QuYXNzaWduKHt9LC4uLmUpO3RoaXMucHV0U3RhdGUodCl9fXQuTWVyZ2VkU3RvcmU9aX0sODg3NzpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5PYnNlcnZhYmxlU3RvcmU9dm9pZCAwO2NvbnN0IGk9bihyKDkzOTQpKTtjbGFzcyBvIGV4dGVuZHMgaS5kZWZhdWx0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKCksdGhpcy5fc3RhdGU9ZXx8e319Z2V0U3RhdGUoKXtyZXR1cm4gdGhpcy5fZ2V0U3RhdGUoKX1wdXRTdGF0ZShlKXt0aGlzLl9wdXRTdGF0ZShlKSx0aGlzLmVtaXQoXCJ1cGRhdGVcIixlKX11cGRhdGVTdGF0ZShlKXtpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSl7Y29uc3QgdD10aGlzLmdldFN0YXRlKCk7dGhpcy5wdXRTdGF0ZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdCksZSkpfWVsc2UgdGhpcy5wdXRTdGF0ZShlKX1zdWJzY3JpYmUoZSl7dGhpcy5vbihcInVwZGF0ZVwiLGUpfXVuc3Vic2NyaWJlKGUpe3RoaXMucmVtb3ZlTGlzdGVuZXIoXCJ1cGRhdGVcIixlKX1fZ2V0U3RhdGUoKXtyZXR1cm4gdGhpcy5fc3RhdGV9X3B1dFN0YXRlKGUpe3RoaXMuX3N0YXRlPWV9fXQuT2JzZXJ2YWJsZVN0b3JlPW99LDc5Njk6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuc3RvcmVBc1N0cmVhbT12b2lkIDA7Y29uc3Qgbj1yKDI4MzApO2NsYXNzIGkgZXh0ZW5kcyBuLkR1cGxleHtjb25zdHJ1Y3RvcihlKXtzdXBlcih7b2JqZWN0TW9kZTohMH0pLHRoaXMucmVzdW1lKCksdGhpcy5oYW5kbGVyPWU9PnRoaXMucHVzaChlKSx0aGlzLm9ic1N0b3JlPWUsdGhpcy5vYnNTdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVyKX1waXBlKGUsdCl7Y29uc3Qgcj1zdXBlci5waXBlKGUsdCk7cmV0dXJuIGUud3JpdGUodGhpcy5vYnNTdG9yZS5nZXRTdGF0ZSgpKSxyfV93cml0ZShlLHQscil7dGhpcy5vYnNTdG9yZS5wdXRTdGF0ZShlKSxyKCl9X3JlYWQoZSl7fV9kZXN0cm95KGUsdCl7dGhpcy5vYnNTdG9yZS51bnN1YnNjcmliZSh0aGlzLmhhbmRsZXIpLHN1cGVyLl9kZXN0cm95KGUsdCl9fXQuc3RvcmVBc1N0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGkoZSl9fSwyNzI0OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fY3JlYXRlQmluZGluZ3x8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24oZSx0LHIsbil7dm9pZCAwPT09biYmKG49ciksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtyXX19KX06ZnVuY3Rpb24oZSx0LHIsbil7dm9pZCAwPT09biYmKG49ciksZVtuXT10W3JdfSksaT10aGlzJiZ0aGlzLl9fZXhwb3J0U3Rhcnx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gZSlcImRlZmF1bHRcIj09PXJ8fE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LHIpfHxuKHQsZSxyKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksaShyKDc5NjkpLHQpLGkocig1NTA4KSx0KSxpKHIoNDAxKSx0KSxpKHIoODg3NyksdCksaShyKDY1NDYpLHQpfSw2NTQ2OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnN0b3JlVHJhbnNmb3JtU3RyZWFtPXZvaWQgMDtjb25zdCBuPXIoNDY1MCk7dC5zdG9yZVRyYW5zZm9ybVN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gbi5vYmooKCh0LHIsbik9Pnt0cnl7cmV0dXJuIHZvaWQgbihudWxsLGUodCkpfWNhdGNoKGUpe3JldHVybiB2b2lkIG4oZSl9fSkpfX0sOTM5NDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKDcxODcpO2Z1bmN0aW9uIGkoZSx0LHIpe3RyeXtSZWZsZWN0LmFwcGx5KGUsdCxyKX1jYXRjaChlKXtzZXRUaW1lb3V0KCgoKT0+e3Rocm93IGV9KSl9fWNsYXNzIG8gZXh0ZW5kcyBuLkV2ZW50RW1pdHRlcntlbWl0KGUsLi4udCl7bGV0IHI9XCJlcnJvclwiPT09ZTtjb25zdCBuPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1uKXI9ciYmdm9pZCAwPT09bi5lcnJvcjtlbHNlIGlmKCFyKXJldHVybiExO2lmKHIpe2xldCBlO2lmKHQubGVuZ3RoPjAmJihbZV09dCksZSBpbnN0YW5jZW9mIEVycm9yKXRocm93IGU7Y29uc3Qgcj1uZXcgRXJyb3IoXCJVbmhhbmRsZWQgZXJyb3IuXCIrKGU/YCAoJHtlLm1lc3NhZ2V9KWA6XCJcIikpO3Rocm93IHIuY29udGV4dD1lLHJ9Y29uc3Qgbz1uW2VdO2lmKHZvaWQgMD09PW8pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbylpKG8sdGhpcyx0KTtlbHNle2NvbnN0IGU9by5sZW5ndGgscj1mdW5jdGlvbihlKXtjb25zdCB0PWUubGVuZ3RoLHI9bmV3IEFycmF5KHQpO2ZvcihsZXQgbj0wO248dDtuKz0xKXJbbl09ZVtuXTtyZXR1cm4gcn0obyk7Zm9yKGxldCBuPTA7bjxlO24rPTEpaShyW25dLHRoaXMsdCl9cmV0dXJuITB9fXQuZGVmYXVsdD1vfSwyNDUwOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDg3NjQpLkJ1ZmZlcixpPW5ldygwLHIoNjI2NikuZWMpKFwic2VjcDI1NmsxXCIpLG89ci5nLmNyeXB0b3x8ci5nLm1zQ3J5cHRvfHx7fSxzPW8uc3VidGxlfHxvLndlYmtpdFN1YnRsZSxhPXIoNTgzNSk7Y29uc3QgYz1uLmZyb20oXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxXCIsXCJoZXhcIiksZj1uLmFsbG9jKDMyLDApO2Z1bmN0aW9uIHUoZSx0KXtpZighZSl0aHJvdyBuZXcgRXJyb3IodHx8XCJBc3NlcnRpb24gZmFpbGVkXCIpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIHQ9ZSwhKCFuLmlzQnVmZmVyKHQpfHwzMiE9PXQubGVuZ3RoKSYmZS5jb21wYXJlKGYpPjAmJmUuY29tcGFyZShjKTwwO3ZhciB0fWZ1bmN0aW9uIGgoZSl7dmFyIHQ9bmV3IFVpbnQ4QXJyYXkoZSk7cmV0dXJuIHZvaWQgMD09PW8uZ2V0UmFuZG9tVmFsdWVzP24uZnJvbShhLnJhbmRvbUJ5dGVzKGUpKTooby5nZXRSYW5kb21WYWx1ZXModCksbi5mcm9tKHQpKX1mdW5jdGlvbiBsKGUpe3JldHVybiBmdW5jdGlvbih0LHIsaSl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihvKXtpZihzKXJldHVybiBzLmltcG9ydEtleShcInJhd1wiLHIse25hbWU6XCJBRVMtQ0JDXCJ9LCExLFtlXSkudGhlbigoZnVuY3Rpb24ocil7dmFyIG49e25hbWU6XCJBRVMtQ0JDXCIsaXY6dH07cmV0dXJuIHNbZV0obixyLGkpfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe28obi5mcm9tKG5ldyBVaW50OEFycmF5KGUpKSl9KSk7aWYoXCJlbmNyeXB0XCI9PT1lKXt2YXIgYz1hLmNyZWF0ZUNpcGhlcml2KFwiYWVzLTI1Ni1jYmNcIixyLHQpO2xldCBlPWMudXBkYXRlKGkpLHM9Yy5maW5hbCgpO28obi5jb25jYXQoW2Usc10pKX1lbHNlIGlmKFwiZGVjcnlwdFwiPT09ZSl7dmFyIGY9YS5jcmVhdGVEZWNpcGhlcml2KFwiYWVzLTI1Ni1jYmNcIixyLHQpO2xldCBlPWYudXBkYXRlKGkpLHM9Zi5maW5hbCgpO28obi5jb25jYXQoW2Usc10pKX19KSl9fWwoXCJlbmNyeXB0XCIpO3ZhciBwPWwoXCJkZWNyeXB0XCIpO3Qub3E9ZnVuY3Rpb24oKXtmb3IodmFyIGU9aCgzMik7IWQoZSk7KWU9aCgzMik7cmV0dXJuIGV9O3QucmM9ZnVuY3Rpb24oZSl7cmV0dXJuIHUoMzI9PT1lLmxlbmd0aCxcIkJhZCBwcml2YXRlIGtleVwiKSx1KGQoZSksXCJCYWQgcHJpdmF0ZSBrZXlcIiksbi5mcm9tKGkua2V5RnJvbVByaXZhdGUoZSkuZ2V0UHVibGljKFwiYXJyXCIpKX07dC5wZT1mdW5jdGlvbihlLHQpe3ZhciByLG8scztyZXR1cm4obz1lLHM9dC5lcGhlbVB1YmxpY0tleSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSl7dShuLmlzQnVmZmVyKG8pLFwiQmFkIHByaXZhdGUga2V5XCIpLHUobi5pc0J1ZmZlcihzKSxcIkJhZCBwdWJsaWMga2V5XCIpLHUoMzI9PT1vLmxlbmd0aCxcIkJhZCBwcml2YXRlIGtleVwiKSx1KGQobyksXCJCYWQgcHJpdmF0ZSBrZXlcIiksdSg2NT09PXMubGVuZ3RofHwzMz09PXMubGVuZ3RoLFwiQmFkIHB1YmxpYyBrZXlcIiksNjU9PT1zLmxlbmd0aCYmdSg0PT09c1swXSxcIkJhZCBwdWJsaWMga2V5XCIpLDMzPT09cy5sZW5ndGgmJnUoMj09PXNbMF18fDM9PT1zWzBdLFwiQmFkIHB1YmxpYyBrZXlcIik7dmFyIHQ9aS5rZXlGcm9tUHJpdmF0ZShvKSxyPWkua2V5RnJvbVB1YmxpYyhzKSxhPXQuZGVyaXZlKHIuZ2V0UHVibGljKCkpO2Uobi5mcm9tKGEudG9BcnJheSgpKSl9KSkpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiB0PWUsbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUpe3ZhciByPWEuY3JlYXRlSGFzaChcInNoYTUxMlwiKS51cGRhdGUodCkuZGlnZXN0KCk7ZShuZXcgVWludDhBcnJheShyKSl9KSk7dmFyIHR9KSkudGhlbigoZnVuY3Rpb24oZSl7cj1lLnNsaWNlKDAsMzIpO3ZhciBpLG8scyxjPWUuc2xpY2UoMzIpLGY9bi5jb25jYXQoW3QuaXYsdC5lcGhlbVB1YmxpY0tleSx0LmNpcGhlcnRleHRdKTtyZXR1cm4gaT1jLG89ZixzPXQubWFjLG5ldyBQcm9taXNlKChmdW5jdGlvbihlKXt2YXIgdD1hLmNyZWF0ZUhtYWMoXCJzaGEyNTZcIixuLmZyb20oaSkpO3QudXBkYXRlKG8pLGUoZnVuY3Rpb24oZSx0KXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcj0wLG49MDtuPGUubGVuZ3RoO24rKylyfD1lW25dXnRbbl07cmV0dXJuIDA9PT1yfSh0LmRpZ2VzdCgpLHMpKX0pKX0pKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gdShlLFwiQmFkIE1BQ1wiKSxwKHQuaXYscix0LmNpcGhlcnRleHQpfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBuLmZyb20obmV3IFVpbnQ4QXJyYXkoZSkpfSkpfX0sOTgwOTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgbj10O24uYmlnbnVtPXIoMzU1MCksbi5kZWZpbmU9cigyNTAwKS5kZWZpbmUsbi5iYXNlPXIoMTk3OSksbi5jb25zdGFudHM9cig2ODI2KSxuLmRlY29kZXJzPXIoODMwNyksbi5lbmNvZGVycz1yKDY1NzkpfSwyNTAwOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXIoNjU3OSksaT1yKDgzMDcpLG89cig1NzE3KTtmdW5jdGlvbiBzKGUsdCl7dGhpcy5uYW1lPWUsdGhpcy5ib2R5PXQsdGhpcy5kZWNvZGVycz17fSx0aGlzLmVuY29kZXJzPXt9fXQuZGVmaW5lPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBzKGUsdCl9LHMucHJvdG90eXBlLl9jcmVhdGVOYW1lZD1mdW5jdGlvbihlKXtjb25zdCB0PXRoaXMubmFtZTtmdW5jdGlvbiByKGUpe3RoaXMuX2luaXROYW1lZChlLHQpfXJldHVybiBvKHIsZSksci5wcm90b3R5cGUuX2luaXROYW1lZD1mdW5jdGlvbih0LHIpe2UuY2FsbCh0aGlzLHQscil9LG5ldyByKHRoaXMpfSxzLnByb3RvdHlwZS5fZ2V0RGVjb2Rlcj1mdW5jdGlvbihlKXtyZXR1cm4gZT1lfHxcImRlclwiLHRoaXMuZGVjb2RlcnMuaGFzT3duUHJvcGVydHkoZSl8fCh0aGlzLmRlY29kZXJzW2VdPXRoaXMuX2NyZWF0ZU5hbWVkKGlbZV0pKSx0aGlzLmRlY29kZXJzW2VdfSxzLnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLl9nZXREZWNvZGVyKHQpLmRlY29kZShlLHIpfSxzLnByb3RvdHlwZS5fZ2V0RW5jb2Rlcj1mdW5jdGlvbihlKXtyZXR1cm4gZT1lfHxcImRlclwiLHRoaXMuZW5jb2RlcnMuaGFzT3duUHJvcGVydHkoZSl8fCh0aGlzLmVuY29kZXJzW2VdPXRoaXMuX2NyZWF0ZU5hbWVkKG5bZV0pKSx0aGlzLmVuY29kZXJzW2VdfSxzLnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLl9nZXRFbmNvZGVyKHQpLmVuY29kZShlLHIpfX0sNjYyNTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgbj1yKDU3MTcpLGk9cig4NDY1KS5iLG89cigyMzk5KS5CdWZmZXI7ZnVuY3Rpb24gcyhlLHQpe2kuY2FsbCh0aGlzLHQpLG8uaXNCdWZmZXIoZSk/KHRoaXMuYmFzZT1lLHRoaXMub2Zmc2V0PTAsdGhpcy5sZW5ndGg9ZS5sZW5ndGgpOnRoaXMuZXJyb3IoXCJJbnB1dCBub3QgQnVmZmVyXCIpfWZ1bmN0aW9uIGEoZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKXRoaXMubGVuZ3RoPTAsdGhpcy52YWx1ZT1lLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGEuaXNFbmNvZGVyQnVmZmVyKGUpfHwoZT1uZXcgYShlLHQpKSx0aGlzLmxlbmd0aCs9ZS5sZW5ndGgsZX0pLHRoaXMpO2Vsc2UgaWYoXCJudW1iZXJcIj09dHlwZW9mIGUpe2lmKCEoMDw9ZSYmZTw9MjU1KSlyZXR1cm4gdC5lcnJvcihcIm5vbi1ieXRlIEVuY29kZXJCdWZmZXIgdmFsdWVcIik7dGhpcy52YWx1ZT1lLHRoaXMubGVuZ3RoPTF9ZWxzZSBpZihcInN0cmluZ1wiPT10eXBlb2YgZSl0aGlzLnZhbHVlPWUsdGhpcy5sZW5ndGg9by5ieXRlTGVuZ3RoKGUpO2Vsc2V7aWYoIW8uaXNCdWZmZXIoZSkpcmV0dXJuIHQuZXJyb3IoXCJVbnN1cHBvcnRlZCB0eXBlOiBcIit0eXBlb2YgZSk7dGhpcy52YWx1ZT1lLHRoaXMubGVuZ3RoPWUubGVuZ3RofX1uKHMsaSksdC5DPXMscy5pc0RlY29kZXJCdWZmZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHxcIm9iamVjdFwiPT10eXBlb2YgZSYmby5pc0J1ZmZlcihlLmJhc2UpJiZcIkRlY29kZXJCdWZmZXJcIj09PWUuY29uc3RydWN0b3IubmFtZSYmXCJudW1iZXJcIj09dHlwZW9mIGUub2Zmc2V0JiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuc2F2ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZXN0b3JlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmlzRW1wdHkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUucmVhZFVJbnQ4JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnNraXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUucmF3fSxzLnByb3RvdHlwZS5zYXZlPWZ1bmN0aW9uKCl7cmV0dXJue29mZnNldDp0aGlzLm9mZnNldCxyZXBvcnRlcjppLnByb3RvdHlwZS5zYXZlLmNhbGwodGhpcyl9fSxzLnByb3RvdHlwZS5yZXN0b3JlPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9bmV3IHModGhpcy5iYXNlKTtyZXR1cm4gdC5vZmZzZXQ9ZS5vZmZzZXQsdC5sZW5ndGg9dGhpcy5vZmZzZXQsdGhpcy5vZmZzZXQ9ZS5vZmZzZXQsaS5wcm90b3R5cGUucmVzdG9yZS5jYWxsKHRoaXMsZS5yZXBvcnRlciksdH0scy5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm9mZnNldD09PXRoaXMubGVuZ3RofSxzLnByb3RvdHlwZS5yZWFkVUludDg9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMub2Zmc2V0KzE8PXRoaXMubGVuZ3RoP3RoaXMuYmFzZS5yZWFkVUludDgodGhpcy5vZmZzZXQrKywhMCk6dGhpcy5lcnJvcihlfHxcIkRlY29kZXJCdWZmZXIgb3ZlcnJ1blwiKX0scy5wcm90b3R5cGUuc2tpcD1mdW5jdGlvbihlLHQpe2lmKCEodGhpcy5vZmZzZXQrZTw9dGhpcy5sZW5ndGgpKXJldHVybiB0aGlzLmVycm9yKHR8fFwiRGVjb2RlckJ1ZmZlciBvdmVycnVuXCIpO2NvbnN0IHI9bmV3IHModGhpcy5iYXNlKTtyZXR1cm4gci5fcmVwb3J0ZXJTdGF0ZT10aGlzLl9yZXBvcnRlclN0YXRlLHIub2Zmc2V0PXRoaXMub2Zmc2V0LHIubGVuZ3RoPXRoaXMub2Zmc2V0K2UsdGhpcy5vZmZzZXQrPWUscn0scy5wcm90b3R5cGUucmF3PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmJhc2Uuc2xpY2UoZT9lLm9mZnNldDp0aGlzLm9mZnNldCx0aGlzLmxlbmd0aCl9LHQuUj1hLGEuaXNFbmNvZGVyQnVmZmVyPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8XCJvYmplY3RcIj09dHlwZW9mIGUmJlwiRW5jb2RlckJ1ZmZlclwiPT09ZS5jb25zdHJ1Y3Rvci5uYW1lJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuam9pbn0sYS5wcm90b3R5cGUuam9pbj1mdW5jdGlvbihlLHQpe3JldHVybiBlfHwoZT1vLmFsbG9jKHRoaXMubGVuZ3RoKSksdHx8KHQ9MCksMD09PXRoaXMubGVuZ3RofHwoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKT90aGlzLnZhbHVlLmZvckVhY2goKGZ1bmN0aW9uKHIpe3Iuam9pbihlLHQpLHQrPXIubGVuZ3RofSkpOihcIm51bWJlclwiPT10eXBlb2YgdGhpcy52YWx1ZT9lW3RdPXRoaXMudmFsdWU6XCJzdHJpbmdcIj09dHlwZW9mIHRoaXMudmFsdWU/ZS53cml0ZSh0aGlzLnZhbHVlLHQpOm8uaXNCdWZmZXIodGhpcy52YWx1ZSkmJnRoaXMudmFsdWUuY29weShlLHQpLHQrPXRoaXMubGVuZ3RoKSksZX19LDE5Nzk6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2NvbnN0IG49dDtuLlJlcG9ydGVyPXIoODQ2NSkuYixuLkRlY29kZXJCdWZmZXI9cig2NjI1KS5DLG4uRW5jb2RlckJ1ZmZlcj1yKDY2MjUpLlIsbi5Ob2RlPXIoMTk0OSl9LDE5NDk6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2NvbnN0IG49cig4NDY1KS5iLGk9cig2NjI1KS5SLG89cig2NjI1KS5DLHM9cig5NzQ2KSxhPVtcInNlcVwiLFwic2Vxb2ZcIixcInNldFwiLFwic2V0b2ZcIixcIm9iamlkXCIsXCJib29sXCIsXCJnZW50aW1lXCIsXCJ1dGN0aW1lXCIsXCJudWxsX1wiLFwiZW51bVwiLFwiaW50XCIsXCJvYmpEZXNjXCIsXCJiaXRzdHJcIixcImJtcHN0clwiLFwiY2hhcnN0clwiLFwiZ2Vuc3RyXCIsXCJncmFwaHN0clwiLFwiaWE1c3RyXCIsXCJpc282NDZzdHJcIixcIm51bXN0clwiLFwib2N0c3RyXCIsXCJwcmludHN0clwiLFwidDYxc3RyXCIsXCJ1bmlzdHJcIixcInV0ZjhzdHJcIixcInZpZGVvc3RyXCJdLGM9W1wia2V5XCIsXCJvYmpcIixcInVzZVwiLFwib3B0aW9uYWxcIixcImV4cGxpY2l0XCIsXCJpbXBsaWNpdFwiLFwiZGVmXCIsXCJjaG9pY2VcIixcImFueVwiLFwiY29udGFpbnNcIl0uY29uY2F0KGEpO2Z1bmN0aW9uIGYoZSx0LHIpe2NvbnN0IG49e307dGhpcy5fYmFzZVN0YXRlPW4sbi5uYW1lPXIsbi5lbmM9ZSxuLnBhcmVudD10fHxudWxsLG4uY2hpbGRyZW49bnVsbCxuLnRhZz1udWxsLG4uYXJncz1udWxsLG4ucmV2ZXJzZUFyZ3M9bnVsbCxuLmNob2ljZT1udWxsLG4ub3B0aW9uYWw9ITEsbi5hbnk9ITEsbi5vYmo9ITEsbi51c2U9bnVsbCxuLnVzZURlY29kZXI9bnVsbCxuLmtleT1udWxsLG4uZGVmYXVsdD1udWxsLG4uZXhwbGljaXQ9bnVsbCxuLmltcGxpY2l0PW51bGwsbi5jb250YWlucz1udWxsLG4ucGFyZW50fHwobi5jaGlsZHJlbj1bXSx0aGlzLl93cmFwKCkpfWUuZXhwb3J0cz1mO2NvbnN0IHU9W1wiZW5jXCIsXCJwYXJlbnRcIixcImNoaWxkcmVuXCIsXCJ0YWdcIixcImFyZ3NcIixcInJldmVyc2VBcmdzXCIsXCJjaG9pY2VcIixcIm9wdGlvbmFsXCIsXCJhbnlcIixcIm9ialwiLFwidXNlXCIsXCJhbHRlcmVkVXNlXCIsXCJrZXlcIixcImRlZmF1bHRcIixcImV4cGxpY2l0XCIsXCJpbXBsaWNpdFwiLFwiY29udGFpbnNcIl07Zi5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtjb25zdCBlPXRoaXMuX2Jhc2VTdGF0ZSx0PXt9O3UuZm9yRWFjaCgoZnVuY3Rpb24ocil7dFtyXT1lW3JdfSkpO2NvbnN0IHI9bmV3IHRoaXMuY29uc3RydWN0b3IodC5wYXJlbnQpO3JldHVybiByLl9iYXNlU3RhdGU9dCxyfSxmLnByb3RvdHlwZS5fd3JhcD1mdW5jdGlvbigpe2NvbnN0IGU9dGhpcy5fYmFzZVN0YXRlO2MuZm9yRWFjaCgoZnVuY3Rpb24odCl7dGhpc1t0XT1mdW5jdGlvbigpe2NvbnN0IHI9bmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7cmV0dXJuIGUuY2hpbGRyZW4ucHVzaChyKSxyW3RdLmFwcGx5KHIsYXJndW1lbnRzKX19KSx0aGlzKX0sZi5wcm90b3R5cGUuX2luaXQ9ZnVuY3Rpb24oZSl7Y29uc3QgdD10aGlzLl9iYXNlU3RhdGU7cyhudWxsPT09dC5wYXJlbnQpLGUuY2FsbCh0aGlzKSx0LmNoaWxkcmVuPXQuY2hpbGRyZW4uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gZS5fYmFzZVN0YXRlLnBhcmVudD09PXRoaXN9KSx0aGlzKSxzLmVxdWFsKHQuY2hpbGRyZW4ubGVuZ3RoLDEsXCJSb290IG5vZGUgY2FuIGhhdmUgb25seSBvbmUgY2hpbGRcIil9LGYucHJvdG90eXBlLl91c2VBcmdzPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9dGhpcy5fYmFzZVN0YXRlLHI9ZS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcn0pLHRoaXMpO2U9ZS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiEoZSBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpfSksdGhpcyksMCE9PXIubGVuZ3RoJiYocyhudWxsPT09dC5jaGlsZHJlbiksdC5jaGlsZHJlbj1yLHIuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5fYmFzZVN0YXRlLnBhcmVudD10aGlzfSksdGhpcykpLDAhPT1lLmxlbmd0aCYmKHMobnVsbD09PXQuYXJncyksdC5hcmdzPWUsdC5yZXZlcnNlQXJncz1lLm1hcCgoZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fGUuY29uc3RydWN0b3IhPT1PYmplY3QpcmV0dXJuIGU7Y29uc3QgdD17fTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24ocil7cj09KDB8cikmJihyfD0wKTtjb25zdCBuPWVbcl07dFtuXT1yfSkpLHR9KSkpfSxbXCJfcGVla1RhZ1wiLFwiX2RlY29kZVRhZ1wiLFwiX3VzZVwiLFwiX2RlY29kZVN0clwiLFwiX2RlY29kZU9iamlkXCIsXCJfZGVjb2RlVGltZVwiLFwiX2RlY29kZU51bGxcIixcIl9kZWNvZGVJbnRcIixcIl9kZWNvZGVCb29sXCIsXCJfZGVjb2RlTGlzdFwiLFwiX2VuY29kZUNvbXBvc2l0ZVwiLFwiX2VuY29kZVN0clwiLFwiX2VuY29kZU9iamlkXCIsXCJfZW5jb2RlVGltZVwiLFwiX2VuY29kZU51bGxcIixcIl9lbmNvZGVJbnRcIixcIl9lbmNvZGVCb29sXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2YucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7Y29uc3QgdD10aGlzLl9iYXNlU3RhdGU7dGhyb3cgbmV3IEVycm9yKGUrXCIgbm90IGltcGxlbWVudGVkIGZvciBlbmNvZGluZzogXCIrdC5lbmMpfX0pKSxhLmZvckVhY2goKGZ1bmN0aW9uKGUpe2YucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7Y29uc3QgdD10aGlzLl9iYXNlU3RhdGUscj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3JldHVybiBzKG51bGw9PT10LnRhZyksdC50YWc9ZSx0aGlzLl91c2VBcmdzKHIpLHRoaXN9fSkpLGYucHJvdG90eXBlLnVzZT1mdW5jdGlvbihlKXtzKGUpO2NvbnN0IHQ9dGhpcy5fYmFzZVN0YXRlO3JldHVybiBzKG51bGw9PT10LnVzZSksdC51c2U9ZSx0aGlzfSxmLnByb3RvdHlwZS5vcHRpb25hbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9iYXNlU3RhdGUub3B0aW9uYWw9ITAsdGhpc30sZi5wcm90b3R5cGUuZGVmPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9dGhpcy5fYmFzZVN0YXRlO3JldHVybiBzKG51bGw9PT10LmRlZmF1bHQpLHQuZGVmYXVsdD1lLHQub3B0aW9uYWw9ITAsdGhpc30sZi5wcm90b3R5cGUuZXhwbGljaXQ9ZnVuY3Rpb24oZSl7Y29uc3QgdD10aGlzLl9iYXNlU3RhdGU7cmV0dXJuIHMobnVsbD09PXQuZXhwbGljaXQmJm51bGw9PT10LmltcGxpY2l0KSx0LmV4cGxpY2l0PWUsdGhpc30sZi5wcm90b3R5cGUuaW1wbGljaXQ9ZnVuY3Rpb24oZSl7Y29uc3QgdD10aGlzLl9iYXNlU3RhdGU7cmV0dXJuIHMobnVsbD09PXQuZXhwbGljaXQmJm51bGw9PT10LmltcGxpY2l0KSx0LmltcGxpY2l0PWUsdGhpc30sZi5wcm90b3R5cGUub2JqPWZ1bmN0aW9uKCl7Y29uc3QgZT10aGlzLl9iYXNlU3RhdGUsdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3JldHVybiBlLm9iaj0hMCwwIT09dC5sZW5ndGgmJnRoaXMuX3VzZUFyZ3ModCksdGhpc30sZi5wcm90b3R5cGUua2V5PWZ1bmN0aW9uKGUpe2NvbnN0IHQ9dGhpcy5fYmFzZVN0YXRlO3JldHVybiBzKG51bGw9PT10LmtleSksdC5rZXk9ZSx0aGlzfSxmLnByb3RvdHlwZS5hbnk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYmFzZVN0YXRlLmFueT0hMCx0aGlzfSxmLnByb3RvdHlwZS5jaG9pY2U9ZnVuY3Rpb24oZSl7Y29uc3QgdD10aGlzLl9iYXNlU3RhdGU7cmV0dXJuIHMobnVsbD09PXQuY2hvaWNlKSx0LmNob2ljZT1lLHRoaXMuX3VzZUFyZ3MoT2JqZWN0LmtleXMoZSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pKSksdGhpc30sZi5wcm90b3R5cGUuY29udGFpbnM9ZnVuY3Rpb24oZSl7Y29uc3QgdD10aGlzLl9iYXNlU3RhdGU7cmV0dXJuIHMobnVsbD09PXQudXNlKSx0LmNvbnRhaW5zPWUsdGhpc30sZi5wcm90b3R5cGUuX2RlY29kZT1mdW5jdGlvbihlLHQpe2NvbnN0IHI9dGhpcy5fYmFzZVN0YXRlO2lmKG51bGw9PT1yLnBhcmVudClyZXR1cm4gZS53cmFwUmVzdWx0KHIuY2hpbGRyZW5bMF0uX2RlY29kZShlLHQpKTtsZXQgbixpPXIuZGVmYXVsdCxzPSEwLGE9bnVsbDtpZihudWxsIT09ci5rZXkmJihhPWUuZW50ZXJLZXkoci5rZXkpKSxyLm9wdGlvbmFsKXtsZXQgbj1udWxsO2lmKG51bGwhPT1yLmV4cGxpY2l0P249ci5leHBsaWNpdDpudWxsIT09ci5pbXBsaWNpdD9uPXIuaW1wbGljaXQ6bnVsbCE9PXIudGFnJiYobj1yLnRhZyksbnVsbCE9PW58fHIuYW55KXtpZihzPXRoaXMuX3BlZWtUYWcoZSxuLHIuYW55KSxlLmlzRXJyb3IocykpcmV0dXJuIHN9ZWxzZXtjb25zdCBuPWUuc2F2ZSgpO3RyeXtudWxsPT09ci5jaG9pY2U/dGhpcy5fZGVjb2RlR2VuZXJpYyhyLnRhZyxlLHQpOnRoaXMuX2RlY29kZUNob2ljZShlLHQpLHM9ITB9Y2F0Y2goZSl7cz0hMX1lLnJlc3RvcmUobil9fWlmKHIub2JqJiZzJiYobj1lLmVudGVyT2JqZWN0KCkpLHMpe2lmKG51bGwhPT1yLmV4cGxpY2l0KXtjb25zdCB0PXRoaXMuX2RlY29kZVRhZyhlLHIuZXhwbGljaXQpO2lmKGUuaXNFcnJvcih0KSlyZXR1cm4gdDtlPXR9Y29uc3Qgbj1lLm9mZnNldDtpZihudWxsPT09ci51c2UmJm51bGw9PT1yLmNob2ljZSl7bGV0IHQ7ci5hbnkmJih0PWUuc2F2ZSgpKTtjb25zdCBuPXRoaXMuX2RlY29kZVRhZyhlLG51bGwhPT1yLmltcGxpY2l0P3IuaW1wbGljaXQ6ci50YWcsci5hbnkpO2lmKGUuaXNFcnJvcihuKSlyZXR1cm4gbjtyLmFueT9pPWUucmF3KHQpOmU9bn1pZih0JiZ0LnRyYWNrJiZudWxsIT09ci50YWcmJnQudHJhY2soZS5wYXRoKCksbixlLmxlbmd0aCxcInRhZ2dlZFwiKSx0JiZ0LnRyYWNrJiZudWxsIT09ci50YWcmJnQudHJhY2soZS5wYXRoKCksZS5vZmZzZXQsZS5sZW5ndGgsXCJjb250ZW50XCIpLHIuYW55fHwoaT1udWxsPT09ci5jaG9pY2U/dGhpcy5fZGVjb2RlR2VuZXJpYyhyLnRhZyxlLHQpOnRoaXMuX2RlY29kZUNob2ljZShlLHQpKSxlLmlzRXJyb3IoaSkpcmV0dXJuIGk7aWYoci5hbnl8fG51bGwhPT1yLmNob2ljZXx8bnVsbD09PXIuY2hpbGRyZW58fHIuY2hpbGRyZW4uZm9yRWFjaCgoZnVuY3Rpb24ocil7ci5fZGVjb2RlKGUsdCl9KSksci5jb250YWlucyYmKFwib2N0c3RyXCI9PT1yLnRhZ3x8XCJiaXRzdHJcIj09PXIudGFnKSl7Y29uc3Qgbj1uZXcgbyhpKTtpPXRoaXMuX2dldFVzZShyLmNvbnRhaW5zLGUuX3JlcG9ydGVyU3RhdGUub2JqKS5fZGVjb2RlKG4sdCl9fXJldHVybiByLm9iaiYmcyYmKGk9ZS5sZWF2ZU9iamVjdChuKSksbnVsbD09PXIua2V5fHxudWxsPT09aSYmITAhPT1zP251bGwhPT1hJiZlLmV4aXRLZXkoYSk6ZS5sZWF2ZUtleShhLHIua2V5LGkpLGl9LGYucHJvdG90eXBlLl9kZWNvZGVHZW5lcmljPWZ1bmN0aW9uKGUsdCxyKXtjb25zdCBuPXRoaXMuX2Jhc2VTdGF0ZTtyZXR1cm5cInNlcVwiPT09ZXx8XCJzZXRcIj09PWU/bnVsbDpcInNlcW9mXCI9PT1lfHxcInNldG9mXCI9PT1lP3RoaXMuX2RlY29kZUxpc3QodCxlLG4uYXJnc1swXSxyKTovc3RyJC8udGVzdChlKT90aGlzLl9kZWNvZGVTdHIodCxlLHIpOlwib2JqaWRcIj09PWUmJm4uYXJncz90aGlzLl9kZWNvZGVPYmppZCh0LG4uYXJnc1swXSxuLmFyZ3NbMV0scik6XCJvYmppZFwiPT09ZT90aGlzLl9kZWNvZGVPYmppZCh0LG51bGwsbnVsbCxyKTpcImdlbnRpbWVcIj09PWV8fFwidXRjdGltZVwiPT09ZT90aGlzLl9kZWNvZGVUaW1lKHQsZSxyKTpcIm51bGxfXCI9PT1lP3RoaXMuX2RlY29kZU51bGwodCxyKTpcImJvb2xcIj09PWU/dGhpcy5fZGVjb2RlQm9vbCh0LHIpOlwib2JqRGVzY1wiPT09ZT90aGlzLl9kZWNvZGVTdHIodCxlLHIpOlwiaW50XCI9PT1lfHxcImVudW1cIj09PWU/dGhpcy5fZGVjb2RlSW50KHQsbi5hcmdzJiZuLmFyZ3NbMF0scik6bnVsbCE9PW4udXNlP3RoaXMuX2dldFVzZShuLnVzZSx0Ll9yZXBvcnRlclN0YXRlLm9iaikuX2RlY29kZSh0LHIpOnQuZXJyb3IoXCJ1bmtub3duIHRhZzogXCIrZSl9LGYucHJvdG90eXBlLl9nZXRVc2U9ZnVuY3Rpb24oZSx0KXtjb25zdCByPXRoaXMuX2Jhc2VTdGF0ZTtyZXR1cm4gci51c2VEZWNvZGVyPXRoaXMuX3VzZShlLHQpLHMobnVsbD09PXIudXNlRGVjb2Rlci5fYmFzZVN0YXRlLnBhcmVudCksci51c2VEZWNvZGVyPXIudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmNoaWxkcmVuWzBdLHIuaW1wbGljaXQhPT1yLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCYmKHIudXNlRGVjb2Rlcj1yLnVzZURlY29kZXIuY2xvbmUoKSxyLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdD1yLmltcGxpY2l0KSxyLnVzZURlY29kZXJ9LGYucHJvdG90eXBlLl9kZWNvZGVDaG9pY2U9ZnVuY3Rpb24oZSx0KXtjb25zdCByPXRoaXMuX2Jhc2VTdGF0ZTtsZXQgbj1udWxsLGk9ITE7cmV0dXJuIE9iamVjdC5rZXlzKHIuY2hvaWNlKS5zb21lKChmdW5jdGlvbihvKXtjb25zdCBzPWUuc2F2ZSgpLGE9ci5jaG9pY2Vbb107dHJ5e2NvbnN0IHI9YS5fZGVjb2RlKGUsdCk7aWYoZS5pc0Vycm9yKHIpKXJldHVybiExO249e3R5cGU6byx2YWx1ZTpyfSxpPSEwfWNhdGNoKHQpe3JldHVybiBlLnJlc3RvcmUocyksITF9cmV0dXJuITB9KSx0aGlzKSxpP246ZS5lcnJvcihcIkNob2ljZSBub3QgbWF0Y2hlZFwiKX0sZi5wcm90b3R5cGUuX2NyZWF0ZUVuY29kZXJCdWZmZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBpKGUsdGhpcy5yZXBvcnRlcil9LGYucHJvdG90eXBlLl9lbmNvZGU9ZnVuY3Rpb24oZSx0LHIpe2NvbnN0IG49dGhpcy5fYmFzZVN0YXRlO2lmKG51bGwhPT1uLmRlZmF1bHQmJm4uZGVmYXVsdD09PWUpcmV0dXJuO2NvbnN0IGk9dGhpcy5fZW5jb2RlVmFsdWUoZSx0LHIpO3JldHVybiB2b2lkIDA9PT1pfHx0aGlzLl9za2lwRGVmYXVsdChpLHQscik/dm9pZCAwOml9LGYucHJvdG90eXBlLl9lbmNvZGVWYWx1ZT1mdW5jdGlvbihlLHQscil7Y29uc3QgaT10aGlzLl9iYXNlU3RhdGU7aWYobnVsbD09PWkucGFyZW50KXJldHVybiBpLmNoaWxkcmVuWzBdLl9lbmNvZGUoZSx0fHxuZXcgbik7bGV0IG89bnVsbDtpZih0aGlzLnJlcG9ydGVyPXQsaS5vcHRpb25hbCYmdm9pZCAwPT09ZSl7aWYobnVsbD09PWkuZGVmYXVsdClyZXR1cm47ZT1pLmRlZmF1bHR9bGV0IHM9bnVsbCxhPSExO2lmKGkuYW55KW89dGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihlKTtlbHNlIGlmKGkuY2hvaWNlKW89dGhpcy5fZW5jb2RlQ2hvaWNlKGUsdCk7ZWxzZSBpZihpLmNvbnRhaW5zKXM9dGhpcy5fZ2V0VXNlKGkuY29udGFpbnMscikuX2VuY29kZShlLHQpLGE9ITA7ZWxzZSBpZihpLmNoaWxkcmVuKXM9aS5jaGlsZHJlbi5tYXAoKGZ1bmN0aW9uKHIpe2lmKFwibnVsbF9cIj09PXIuX2Jhc2VTdGF0ZS50YWcpcmV0dXJuIHIuX2VuY29kZShudWxsLHQsZSk7aWYobnVsbD09PXIuX2Jhc2VTdGF0ZS5rZXkpcmV0dXJuIHQuZXJyb3IoXCJDaGlsZCBzaG91bGQgaGF2ZSBhIGtleVwiKTtjb25zdCBuPXQuZW50ZXJLZXkoci5fYmFzZVN0YXRlLmtleSk7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuIHQuZXJyb3IoXCJDaGlsZCBleHBlY3RlZCwgYnV0IGlucHV0IGlzIG5vdCBvYmplY3RcIik7Y29uc3QgaT1yLl9lbmNvZGUoZVtyLl9iYXNlU3RhdGUua2V5XSx0LGUpO3JldHVybiB0LmxlYXZlS2V5KG4pLGl9KSx0aGlzKS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlfSkpLHM9dGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzKTtlbHNlIGlmKFwic2Vxb2ZcIj09PWkudGFnfHxcInNldG9mXCI9PT1pLnRhZyl7aWYoIWkuYXJnc3x8MSE9PWkuYXJncy5sZW5ndGgpcmV0dXJuIHQuZXJyb3IoXCJUb28gbWFueSBhcmdzIGZvciA6IFwiK2kudGFnKTtpZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gdC5lcnJvcihcInNlcW9mL3NldG9mLCBidXQgZGF0YSBpcyBub3QgQXJyYXlcIik7Y29uc3Qgcj10aGlzLmNsb25lKCk7ci5fYmFzZVN0YXRlLmltcGxpY2l0PW51bGwscz10aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGUubWFwKChmdW5jdGlvbihyKXtjb25zdCBuPXRoaXMuX2Jhc2VTdGF0ZTtyZXR1cm4gdGhpcy5fZ2V0VXNlKG4uYXJnc1swXSxlKS5fZW5jb2RlKHIsdCl9KSxyKSl9ZWxzZSBudWxsIT09aS51c2U/bz10aGlzLl9nZXRVc2UoaS51c2UscikuX2VuY29kZShlLHQpOihzPXRoaXMuX2VuY29kZVByaW1pdGl2ZShpLnRhZyxlKSxhPSEwKTtpZighaS5hbnkmJm51bGw9PT1pLmNob2ljZSl7Y29uc3QgZT1udWxsIT09aS5pbXBsaWNpdD9pLmltcGxpY2l0OmkudGFnLHI9bnVsbD09PWkuaW1wbGljaXQ/XCJ1bml2ZXJzYWxcIjpcImNvbnRleHRcIjtudWxsPT09ZT9udWxsPT09aS51c2UmJnQuZXJyb3IoXCJUYWcgY291bGQgYmUgb21pdHRlZCBvbmx5IGZvciAudXNlKClcIik6bnVsbD09PWkudXNlJiYobz10aGlzLl9lbmNvZGVDb21wb3NpdGUoZSxhLHIscykpfXJldHVybiBudWxsIT09aS5leHBsaWNpdCYmKG89dGhpcy5fZW5jb2RlQ29tcG9zaXRlKGkuZXhwbGljaXQsITEsXCJjb250ZXh0XCIsbykpLG99LGYucHJvdG90eXBlLl9lbmNvZGVDaG9pY2U9ZnVuY3Rpb24oZSx0KXtjb25zdCByPXRoaXMuX2Jhc2VTdGF0ZSxuPXIuY2hvaWNlW2UudHlwZV07cmV0dXJuIG58fHMoITEsZS50eXBlK1wiIG5vdCBmb3VuZCBpbiBcIitKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhyLmNob2ljZSkpKSxuLl9lbmNvZGUoZS52YWx1ZSx0KX0sZi5wcm90b3R5cGUuX2VuY29kZVByaW1pdGl2ZT1mdW5jdGlvbihlLHQpe2NvbnN0IHI9dGhpcy5fYmFzZVN0YXRlO2lmKC9zdHIkLy50ZXN0KGUpKXJldHVybiB0aGlzLl9lbmNvZGVTdHIodCxlKTtpZihcIm9iamlkXCI9PT1lJiZyLmFyZ3MpcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKHQsci5yZXZlcnNlQXJnc1swXSxyLmFyZ3NbMV0pO2lmKFwib2JqaWRcIj09PWUpcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKHQsbnVsbCxudWxsKTtpZihcImdlbnRpbWVcIj09PWV8fFwidXRjdGltZVwiPT09ZSlyZXR1cm4gdGhpcy5fZW5jb2RlVGltZSh0LGUpO2lmKFwibnVsbF9cIj09PWUpcmV0dXJuIHRoaXMuX2VuY29kZU51bGwoKTtpZihcImludFwiPT09ZXx8XCJlbnVtXCI9PT1lKXJldHVybiB0aGlzLl9lbmNvZGVJbnQodCxyLmFyZ3MmJnIucmV2ZXJzZUFyZ3NbMF0pO2lmKFwiYm9vbFwiPT09ZSlyZXR1cm4gdGhpcy5fZW5jb2RlQm9vbCh0KTtpZihcIm9iakRlc2NcIj09PWUpcmV0dXJuIHRoaXMuX2VuY29kZVN0cih0LGUpO3Rocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHRhZzogXCIrZSl9LGYucHJvdG90eXBlLl9pc051bXN0cj1mdW5jdGlvbihlKXtyZXR1cm4vXlswLTkgXSokLy50ZXN0KGUpfSxmLnByb3RvdHlwZS5faXNQcmludHN0cj1mdW5jdGlvbihlKXtyZXR1cm4vXltBLVphLXowLTkgJygpKywtLi86PT9dKiQvLnRlc3QoZSl9fSw4NDY1OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXIoNTcxNyk7ZnVuY3Rpb24gaShlKXt0aGlzLl9yZXBvcnRlclN0YXRlPXtvYmo6bnVsbCxwYXRoOltdLG9wdGlvbnM6ZXx8e30sZXJyb3JzOltdfX1mdW5jdGlvbiBvKGUsdCl7dGhpcy5wYXRoPWUsdGhpcy5yZXRocm93KHQpfXQuYj1pLGkucHJvdG90eXBlLmlzRXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBvfSxpLnByb3RvdHlwZS5zYXZlPWZ1bmN0aW9uKCl7Y29uc3QgZT10aGlzLl9yZXBvcnRlclN0YXRlO3JldHVybntvYmo6ZS5vYmoscGF0aExlbjplLnBhdGgubGVuZ3RofX0saS5wcm90b3R5cGUucmVzdG9yZT1mdW5jdGlvbihlKXtjb25zdCB0PXRoaXMuX3JlcG9ydGVyU3RhdGU7dC5vYmo9ZS5vYmosdC5wYXRoPXQucGF0aC5zbGljZSgwLGUucGF0aExlbil9LGkucHJvdG90eXBlLmVudGVyS2V5PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9yZXBvcnRlclN0YXRlLnBhdGgucHVzaChlKX0saS5wcm90b3R5cGUuZXhpdEtleT1mdW5jdGlvbihlKXtjb25zdCB0PXRoaXMuX3JlcG9ydGVyU3RhdGU7dC5wYXRoPXQucGF0aC5zbGljZSgwLGUtMSl9LGkucHJvdG90eXBlLmxlYXZlS2V5PWZ1bmN0aW9uKGUsdCxyKXtjb25zdCBuPXRoaXMuX3JlcG9ydGVyU3RhdGU7dGhpcy5leGl0S2V5KGUpLG51bGwhPT1uLm9iaiYmKG4ub2JqW3RdPXIpfSxpLnByb3RvdHlwZS5wYXRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5qb2luKFwiL1wiKX0saS5wcm90b3R5cGUuZW50ZXJPYmplY3Q9ZnVuY3Rpb24oKXtjb25zdCBlPXRoaXMuX3JlcG9ydGVyU3RhdGUsdD1lLm9iajtyZXR1cm4gZS5vYmo9e30sdH0saS5wcm90b3R5cGUubGVhdmVPYmplY3Q9ZnVuY3Rpb24oZSl7Y29uc3QgdD10aGlzLl9yZXBvcnRlclN0YXRlLHI9dC5vYmo7cmV0dXJuIHQub2JqPWUscn0saS5wcm90b3R5cGUuZXJyb3I9ZnVuY3Rpb24oZSl7bGV0IHQ7Y29uc3Qgcj10aGlzLl9yZXBvcnRlclN0YXRlLG49ZSBpbnN0YW5jZW9mIG87aWYodD1uP2U6bmV3IG8oci5wYXRoLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCJbXCIrSlNPTi5zdHJpbmdpZnkoZSkrXCJdXCJ9KSkuam9pbihcIlwiKSxlLm1lc3NhZ2V8fGUsZS5zdGFjayksIXIub3B0aW9ucy5wYXJ0aWFsKXRocm93IHQ7cmV0dXJuIG58fHIuZXJyb3JzLnB1c2godCksdH0saS5wcm90b3R5cGUud3JhcFJlc3VsdD1mdW5jdGlvbihlKXtjb25zdCB0PXRoaXMuX3JlcG9ydGVyU3RhdGU7cmV0dXJuIHQub3B0aW9ucy5wYXJ0aWFsP3tyZXN1bHQ6dGhpcy5pc0Vycm9yKGUpP251bGw6ZSxlcnJvcnM6dC5lcnJvcnN9OmV9LG4obyxFcnJvciksby5wcm90b3R5cGUucmV0aHJvdz1mdW5jdGlvbihlKXtpZih0aGlzLm1lc3NhZ2U9ZStcIiBhdDogXCIrKHRoaXMucGF0aHx8XCIoc2hhbGxvdylcIiksRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UmJkVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsbyksIXRoaXMuc3RhY2spdHJ5e3Rocm93IG5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpfWNhdGNoKGUpe3RoaXMuc3RhY2s9ZS5zdGFja31yZXR1cm4gdGhpc319LDE2MDooZSx0KT0+e1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y29uc3QgdD17fTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24ocil7KDB8cik9PXImJihyfD0wKTtjb25zdCBuPWVbcl07dFtuXT1yfSkpLHR9dC50YWdDbGFzcz17MDpcInVuaXZlcnNhbFwiLDE6XCJhcHBsaWNhdGlvblwiLDI6XCJjb250ZXh0XCIsMzpcInByaXZhdGVcIn0sdC50YWdDbGFzc0J5TmFtZT1yKHQudGFnQ2xhc3MpLHQudGFnPXswOlwiZW5kXCIsMTpcImJvb2xcIiwyOlwiaW50XCIsMzpcImJpdHN0clwiLDQ6XCJvY3RzdHJcIiw1OlwibnVsbF9cIiw2Olwib2JqaWRcIiw3Olwib2JqRGVzY1wiLDg6XCJleHRlcm5hbFwiLDk6XCJyZWFsXCIsMTA6XCJlbnVtXCIsMTE6XCJlbWJlZFwiLDEyOlwidXRmOHN0clwiLDEzOlwicmVsYXRpdmVPaWRcIiwxNjpcInNlcVwiLDE3Olwic2V0XCIsMTg6XCJudW1zdHJcIiwxOTpcInByaW50c3RyXCIsMjA6XCJ0NjFzdHJcIiwyMTpcInZpZGVvc3RyXCIsMjI6XCJpYTVzdHJcIiwyMzpcInV0Y3RpbWVcIiwyNDpcImdlbnRpbWVcIiwyNTpcImdyYXBoc3RyXCIsMjY6XCJpc282NDZzdHJcIiwyNzpcImdlbnN0clwiLDI4OlwidW5pc3RyXCIsMjk6XCJjaGFyc3RyXCIsMzA6XCJibXBzdHJcIn0sdC50YWdCeU5hbWU9cih0LnRhZyl9LDY4MjY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2NvbnN0IG49dDtuLl9yZXZlcnNlPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9e307cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uKHIpeygwfHIpPT1yJiYocnw9MCk7Y29uc3Qgbj1lW3JdO3Rbbl09cn0pKSx0fSxuLmRlcj1yKDE2MCl9LDE2NzE6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2NvbnN0IG49cig1NzE3KSxpPXIoMzU1MCksbz1yKDY2MjUpLkMscz1yKDE5NDkpLGE9cigxNjApO2Z1bmN0aW9uIGMoZSl7dGhpcy5lbmM9XCJkZXJcIix0aGlzLm5hbWU9ZS5uYW1lLHRoaXMuZW50aXR5PWUsdGhpcy50cmVlPW5ldyBmLHRoaXMudHJlZS5faW5pdChlLmJvZHkpfWZ1bmN0aW9uIGYoZSl7cy5jYWxsKHRoaXMsXCJkZXJcIixlKX1mdW5jdGlvbiB1KGUsdCl7bGV0IHI9ZS5yZWFkVUludDgodCk7aWYoZS5pc0Vycm9yKHIpKXJldHVybiByO2NvbnN0IG49YS50YWdDbGFzc1tyPj42XSxpPTA9PSgzMiZyKTtpZigzMT09KDMxJnIpKXtsZXQgbj1yO2ZvcihyPTA7MTI4PT0oMTI4Jm4pOyl7aWYobj1lLnJlYWRVSW50OCh0KSxlLmlzRXJyb3IobikpcmV0dXJuIG47cjw8PTcscnw9MTI3Jm59fWVsc2UgciY9MzE7cmV0dXJue2NsczpuLHByaW1pdGl2ZTppLHRhZzpyLHRhZ1N0cjphLnRhZ1tyXX19ZnVuY3Rpb24gZChlLHQscil7bGV0IG49ZS5yZWFkVUludDgocik7aWYoZS5pc0Vycm9yKG4pKXJldHVybiBuO2lmKCF0JiYxMjg9PT1uKXJldHVybiBudWxsO2lmKDA9PSgxMjgmbikpcmV0dXJuIG47Y29uc3QgaT0xMjcmbjtpZihpPjQpcmV0dXJuIGUuZXJyb3IoXCJsZW5ndGggb2N0ZWN0IGlzIHRvbyBsb25nXCIpO249MDtmb3IobGV0IHQ9MDt0PGk7dCsrKXtuPDw9ODtjb25zdCB0PWUucmVhZFVJbnQ4KHIpO2lmKGUuaXNFcnJvcih0KSlyZXR1cm4gdDtufD10fXJldHVybiBufWUuZXhwb3J0cz1jLGMucHJvdG90eXBlLmRlY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiBvLmlzRGVjb2RlckJ1ZmZlcihlKXx8KGU9bmV3IG8oZSx0KSksdGhpcy50cmVlLl9kZWNvZGUoZSx0KX0sbihmLHMpLGYucHJvdG90eXBlLl9wZWVrVGFnPWZ1bmN0aW9uKGUsdCxyKXtpZihlLmlzRW1wdHkoKSlyZXR1cm4hMTtjb25zdCBuPWUuc2F2ZSgpLGk9dShlLCdGYWlsZWQgdG8gcGVlayB0YWc6IFwiJyt0KydcIicpO3JldHVybiBlLmlzRXJyb3IoaSk/aTooZS5yZXN0b3JlKG4pLGkudGFnPT09dHx8aS50YWdTdHI9PT10fHxpLnRhZ1N0citcIm9mXCI9PT10fHxyKX0sZi5wcm90b3R5cGUuX2RlY29kZVRhZz1mdW5jdGlvbihlLHQscil7Y29uc3Qgbj11KGUsJ0ZhaWxlZCB0byBkZWNvZGUgdGFnIG9mIFwiJyt0KydcIicpO2lmKGUuaXNFcnJvcihuKSlyZXR1cm4gbjtsZXQgaT1kKGUsbi5wcmltaXRpdmUsJ0ZhaWxlZCB0byBnZXQgbGVuZ3RoIG9mIFwiJyt0KydcIicpO2lmKGUuaXNFcnJvcihpKSlyZXR1cm4gaTtpZighciYmbi50YWchPT10JiZuLnRhZ1N0ciE9PXQmJm4udGFnU3RyK1wib2ZcIiE9PXQpcmV0dXJuIGUuZXJyb3IoJ0ZhaWxlZCB0byBtYXRjaCB0YWc6IFwiJyt0KydcIicpO2lmKG4ucHJpbWl0aXZlfHxudWxsIT09aSlyZXR1cm4gZS5za2lwKGksJ0ZhaWxlZCB0byBtYXRjaCBib2R5IG9mOiBcIicrdCsnXCInKTtjb25zdCBvPWUuc2F2ZSgpLHM9dGhpcy5fc2tpcFVudGlsRW5kKGUsJ0ZhaWxlZCB0byBza2lwIGluZGVmaW5pdGUgbGVuZ3RoIGJvZHk6IFwiJyt0aGlzLnRhZysnXCInKTtyZXR1cm4gZS5pc0Vycm9yKHMpP3M6KGk9ZS5vZmZzZXQtby5vZmZzZXQsZS5yZXN0b3JlKG8pLGUuc2tpcChpLCdGYWlsZWQgdG8gbWF0Y2ggYm9keSBvZjogXCInK3QrJ1wiJykpfSxmLnByb3RvdHlwZS5fc2tpcFVudGlsRW5kPWZ1bmN0aW9uKGUsdCl7Zm9yKDs7KXtjb25zdCByPXUoZSx0KTtpZihlLmlzRXJyb3IocikpcmV0dXJuIHI7Y29uc3Qgbj1kKGUsci5wcmltaXRpdmUsdCk7aWYoZS5pc0Vycm9yKG4pKXJldHVybiBuO2xldCBpO2lmKGk9ci5wcmltaXRpdmV8fG51bGwhPT1uP2Uuc2tpcChuKTp0aGlzLl9za2lwVW50aWxFbmQoZSx0KSxlLmlzRXJyb3IoaSkpcmV0dXJuIGk7aWYoXCJlbmRcIj09PXIudGFnU3RyKWJyZWFrfX0sZi5wcm90b3R5cGUuX2RlY29kZUxpc3Q9ZnVuY3Rpb24oZSx0LHIsbil7Y29uc3QgaT1bXTtmb3IoOyFlLmlzRW1wdHkoKTspe2NvbnN0IHQ9dGhpcy5fcGVla1RhZyhlLFwiZW5kXCIpO2lmKGUuaXNFcnJvcih0KSlyZXR1cm4gdDtjb25zdCBvPXIuZGVjb2RlKGUsXCJkZXJcIixuKTtpZihlLmlzRXJyb3IobykmJnQpYnJlYWs7aS5wdXNoKG8pfXJldHVybiBpfSxmLnByb3RvdHlwZS5fZGVjb2RlU3RyPWZ1bmN0aW9uKGUsdCl7aWYoXCJiaXRzdHJcIj09PXQpe2NvbnN0IHQ9ZS5yZWFkVUludDgoKTtyZXR1cm4gZS5pc0Vycm9yKHQpP3Q6e3VudXNlZDp0LGRhdGE6ZS5yYXcoKX19aWYoXCJibXBzdHJcIj09PXQpe2NvbnN0IHQ9ZS5yYXcoKTtpZih0Lmxlbmd0aCUyPT0xKXJldHVybiBlLmVycm9yKFwiRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IGJtcHN0ciBsZW5ndGggbWlzbWF0Y2hcIik7bGV0IHI9XCJcIjtmb3IobGV0IGU9MDtlPHQubGVuZ3RoLzI7ZSsrKXIrPVN0cmluZy5mcm9tQ2hhckNvZGUodC5yZWFkVUludDE2QkUoMiplKSk7cmV0dXJuIHJ9aWYoXCJudW1zdHJcIj09PXQpe2NvbnN0IHQ9ZS5yYXcoKS50b1N0cmluZyhcImFzY2lpXCIpO3JldHVybiB0aGlzLl9pc051bXN0cih0KT90OmUuZXJyb3IoXCJEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogbnVtc3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnNcIil9aWYoXCJvY3RzdHJcIj09PXQpcmV0dXJuIGUucmF3KCk7aWYoXCJvYmpEZXNjXCI9PT10KXJldHVybiBlLnJhdygpO2lmKFwicHJpbnRzdHJcIj09PXQpe2NvbnN0IHQ9ZS5yYXcoKS50b1N0cmluZyhcImFzY2lpXCIpO3JldHVybiB0aGlzLl9pc1ByaW50c3RyKHQpP3Q6ZS5lcnJvcihcIkRlY29kaW5nIG9mIHN0cmluZyB0eXBlOiBwcmludHN0ciB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzXCIpfXJldHVybi9zdHIkLy50ZXN0KHQpP2UucmF3KCkudG9TdHJpbmcoKTplLmVycm9yKFwiRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IFwiK3QrXCIgdW5zdXBwb3J0ZWRcIil9LGYucHJvdG90eXBlLl9kZWNvZGVPYmppZD1mdW5jdGlvbihlLHQscil7bGV0IG47Y29uc3QgaT1bXTtsZXQgbz0wLHM9MDtmb3IoOyFlLmlzRW1wdHkoKTspcz1lLnJlYWRVSW50OCgpLG88PD03LG98PTEyNyZzLDA9PSgxMjgmcykmJihpLnB1c2gobyksbz0wKTsxMjgmcyYmaS5wdXNoKG8pO2NvbnN0IGE9aVswXS80MHwwLGM9aVswXSU0MDtpZihuPXI/aTpbYSxjXS5jb25jYXQoaS5zbGljZSgxKSksdCl7bGV0IGU9dFtuLmpvaW4oXCIgXCIpXTt2b2lkIDA9PT1lJiYoZT10W24uam9pbihcIi5cIildKSx2b2lkIDAhPT1lJiYobj1lKX1yZXR1cm4gbn0sZi5wcm90b3R5cGUuX2RlY29kZVRpbWU9ZnVuY3Rpb24oZSx0KXtjb25zdCByPWUucmF3KCkudG9TdHJpbmcoKTtsZXQgbixpLG8scyxhLGM7aWYoXCJnZW50aW1lXCI9PT10KW49MHxyLnNsaWNlKDAsNCksaT0wfHIuc2xpY2UoNCw2KSxvPTB8ci5zbGljZSg2LDgpLHM9MHxyLnNsaWNlKDgsMTApLGE9MHxyLnNsaWNlKDEwLDEyKSxjPTB8ci5zbGljZSgxMiwxNCk7ZWxzZXtpZihcInV0Y3RpbWVcIiE9PXQpcmV0dXJuIGUuZXJyb3IoXCJEZWNvZGluZyBcIit0K1wiIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXRcIik7bj0wfHIuc2xpY2UoMCwyKSxpPTB8ci5zbGljZSgyLDQpLG89MHxyLnNsaWNlKDQsNikscz0wfHIuc2xpY2UoNiw4KSxhPTB8ci5zbGljZSg4LDEwKSxjPTB8ci5zbGljZSgxMCwxMiksbj1uPDcwPzJlMytuOjE5MDArbn1yZXR1cm4gRGF0ZS5VVEMobixpLTEsbyxzLGEsYywwKX0sZi5wcm90b3R5cGUuX2RlY29kZU51bGw9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZi5wcm90b3R5cGUuX2RlY29kZUJvb2w9ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLnJlYWRVSW50OCgpO3JldHVybiBlLmlzRXJyb3IodCk/dDowIT09dH0sZi5wcm90b3R5cGUuX2RlY29kZUludD1mdW5jdGlvbihlLHQpe2NvbnN0IHI9ZS5yYXcoKTtsZXQgbj1uZXcgaShyKTtyZXR1cm4gdCYmKG49dFtuLnRvU3RyaW5nKDEwKV18fG4pLG59LGYucHJvdG90eXBlLl91c2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYoZT1lKHQpKSxlLl9nZXREZWNvZGVyKFwiZGVyXCIpLnRyZWV9fSw4MzA3OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXQ7bi5kZXI9cigxNjcxKSxuLnBlbT1yKDk2MzEpfSw5NjMxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXIoNTcxNyksaT1yKDIzOTkpLkJ1ZmZlcixvPXIoMTY3MSk7ZnVuY3Rpb24gcyhlKXtvLmNhbGwodGhpcyxlKSx0aGlzLmVuYz1cInBlbVwifW4ocyxvKSxlLmV4cG9ydHM9cyxzLnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtjb25zdCByPWUudG9TdHJpbmcoKS5zcGxpdCgvW1xcclxcbl0rL2cpLG49dC5sYWJlbC50b1VwcGVyQ2FzZSgpLHM9L14tLS0tLShCRUdJTnxFTkQpIChbXi1dKyktLS0tLSQvO2xldCBhPS0xLGM9LTE7Zm9yKGxldCBlPTA7ZTxyLmxlbmd0aDtlKyspe2NvbnN0IHQ9cltlXS5tYXRjaChzKTtpZihudWxsIT09dCYmdFsyXT09PW4pe2lmKC0xIT09YSl7aWYoXCJFTkRcIiE9PXRbMV0pYnJlYWs7Yz1lO2JyZWFrfWlmKFwiQkVHSU5cIiE9PXRbMV0pYnJlYWs7YT1lfX1pZigtMT09PWF8fC0xPT09Yyl0aHJvdyBuZXcgRXJyb3IoXCJQRU0gc2VjdGlvbiBub3QgZm91bmQgZm9yOiBcIituKTtjb25zdCBmPXIuc2xpY2UoYSsxLGMpLmpvaW4oXCJcIik7Zi5yZXBsYWNlKC9bXmEtejAtOSsvPV0rL2dpLFwiXCIpO2NvbnN0IHU9aS5mcm9tKGYsXCJiYXNlNjRcIik7cmV0dXJuIG8ucHJvdG90eXBlLmRlY29kZS5jYWxsKHRoaXMsdSx0KX19LDY5ODQ6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2NvbnN0IG49cig1NzE3KSxpPXIoMjM5OSkuQnVmZmVyLG89cigxOTQ5KSxzPXIoMTYwKTtmdW5jdGlvbiBhKGUpe3RoaXMuZW5jPVwiZGVyXCIsdGhpcy5uYW1lPWUubmFtZSx0aGlzLmVudGl0eT1lLHRoaXMudHJlZT1uZXcgYyx0aGlzLnRyZWUuX2luaXQoZS5ib2R5KX1mdW5jdGlvbiBjKGUpe28uY2FsbCh0aGlzLFwiZGVyXCIsZSl9ZnVuY3Rpb24gZihlKXtyZXR1cm4gZTwxMD9cIjBcIitlOmV9ZS5leHBvcnRzPWEsYS5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMudHJlZS5fZW5jb2RlKGUsdCkuam9pbigpfSxuKGMsbyksYy5wcm90b3R5cGUuX2VuY29kZUNvbXBvc2l0ZT1mdW5jdGlvbihlLHQscixuKXtjb25zdCBvPWZ1bmN0aW9uKGUsdCxyLG4pe2xldCBpO2lmKFwic2Vxb2ZcIj09PWU/ZT1cInNlcVwiOlwic2V0b2ZcIj09PWUmJihlPVwic2V0XCIpLHMudGFnQnlOYW1lLmhhc093blByb3BlcnR5KGUpKWk9cy50YWdCeU5hbWVbZV07ZWxzZXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8KDB8ZSkhPT1lKXJldHVybiBuLmVycm9yKFwiVW5rbm93biB0YWc6IFwiK2UpO2k9ZX1yZXR1cm4gaT49MzE/bi5lcnJvcihcIk11bHRpLW9jdGV0IHRhZyBlbmNvZGluZyB1bnN1cHBvcnRlZFwiKToodHx8KGl8PTMyKSxpfD1zLnRhZ0NsYXNzQnlOYW1lW3J8fFwidW5pdmVyc2FsXCJdPDw2LGkpfShlLHQscix0aGlzLnJlcG9ydGVyKTtpZihuLmxlbmd0aDwxMjgpe2NvbnN0IGU9aS5hbGxvYygyKTtyZXR1cm4gZVswXT1vLGVbMV09bi5sZW5ndGgsdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbZSxuXSl9bGV0IGE9MTtmb3IobGV0IGU9bi5sZW5ndGg7ZT49MjU2O2U+Pj04KWErKztjb25zdCBjPWkuYWxsb2MoMithKTtjWzBdPW8sY1sxXT0xMjh8YTtmb3IobGV0IGU9MSthLHQ9bi5sZW5ndGg7dD4wO2UtLSx0Pj49OCljW2VdPTI1NSZ0O3JldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFtjLG5dKX0sYy5wcm90b3R5cGUuX2VuY29kZVN0cj1mdW5jdGlvbihlLHQpe2lmKFwiYml0c3RyXCI9PT10KXJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFswfGUudW51c2VkLGUuZGF0YV0pO2lmKFwiYm1wc3RyXCI9PT10KXtjb25zdCB0PWkuYWxsb2MoMiplLmxlbmd0aCk7Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKyspdC53cml0ZVVJbnQxNkJFKGUuY2hhckNvZGVBdChyKSwyKnIpO3JldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHQpfXJldHVyblwibnVtc3RyXCI9PT10P3RoaXMuX2lzTnVtc3RyKGUpP3RoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoZSk6dGhpcy5yZXBvcnRlci5lcnJvcihcIkVuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBudW1zdHIgc3VwcG9ydHMgb25seSBkaWdpdHMgYW5kIHNwYWNlXCIpOlwicHJpbnRzdHJcIj09PXQ/dGhpcy5faXNQcmludHN0cihlKT90aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGUpOnRoaXMucmVwb3J0ZXIuZXJyb3IoXCJFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogcHJpbnRzdHIgc3VwcG9ydHMgb25seSBsYXRpbiB1cHBlciBhbmQgbG93ZXIgY2FzZSBsZXR0ZXJzLCBkaWdpdHMsIHNwYWNlLCBhcG9zdHJvcGhlLCBsZWZ0IGFuZCByaWd0aCBwYXJlbnRoZXNpcywgcGx1cyBzaWduLCBjb21tYSwgaHlwaGVuLCBkb3QsIHNsYXNoLCBjb2xvbiwgZXF1YWwgc2lnbiwgcXVlc3Rpb24gbWFya1wiKTovc3RyJC8udGVzdCh0KXx8XCJvYmpEZXNjXCI9PT10P3RoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoZSk6dGhpcy5yZXBvcnRlci5lcnJvcihcIkVuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBcIit0K1wiIHVuc3VwcG9ydGVkXCIpfSxjLnByb3RvdHlwZS5fZW5jb2RlT2JqaWQ9ZnVuY3Rpb24oZSx0LHIpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZighdClyZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcihcInN0cmluZyBvYmppZCBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAgZm91bmRcIik7aWYoIXQuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoXCJvYmppZCBub3QgZm91bmQgaW4gdmFsdWVzIG1hcFwiKTtlPXRbZV0uc3BsaXQoL1tcXHMuXSsvZyk7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0KyspZVt0XXw9MH1lbHNlIGlmKEFycmF5LmlzQXJyYXkoZSkpe2U9ZS5zbGljZSgpO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF18PTB9aWYoIUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoXCJvYmppZCgpIHNob3VsZCBiZSBlaXRoZXIgYXJyYXkgb3Igc3RyaW5nLCBnb3Q6IFwiK0pTT04uc3RyaW5naWZ5KGUpKTtpZighcil7aWYoZVsxXT49NDApcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoXCJTZWNvbmQgb2JqaWQgaWRlbnRpZmllciBPT0JcIik7ZS5zcGxpY2UoMCwyLDQwKmVbMF0rZVsxXSl9bGV0IG49MDtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyl7bGV0IHI9ZVt0XTtmb3IobisrO3I+PTEyODtyPj49NyluKyt9Y29uc3Qgbz1pLmFsbG9jKG4pO2xldCBzPW8ubGVuZ3RoLTE7Zm9yKGxldCB0PWUubGVuZ3RoLTE7dD49MDt0LS0pe2xldCByPWVbdF07Zm9yKG9bcy0tXT0xMjcmcjsocj4+PTcpPjA7KW9bcy0tXT0xMjh8MTI3JnJ9cmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobyl9LGMucHJvdG90eXBlLl9lbmNvZGVUaW1lPWZ1bmN0aW9uKGUsdCl7bGV0IHI7Y29uc3Qgbj1uZXcgRGF0ZShlKTtyZXR1cm5cImdlbnRpbWVcIj09PXQ/cj1bZihuLmdldFVUQ0Z1bGxZZWFyKCkpLGYobi5nZXRVVENNb250aCgpKzEpLGYobi5nZXRVVENEYXRlKCkpLGYobi5nZXRVVENIb3VycygpKSxmKG4uZ2V0VVRDTWludXRlcygpKSxmKG4uZ2V0VVRDU2Vjb25kcygpKSxcIlpcIl0uam9pbihcIlwiKTpcInV0Y3RpbWVcIj09PXQ/cj1bZihuLmdldFVUQ0Z1bGxZZWFyKCklMTAwKSxmKG4uZ2V0VVRDTW9udGgoKSsxKSxmKG4uZ2V0VVRDRGF0ZSgpKSxmKG4uZ2V0VVRDSG91cnMoKSksZihuLmdldFVUQ01pbnV0ZXMoKSksZihuLmdldFVUQ1NlY29uZHMoKSksXCJaXCJdLmpvaW4oXCJcIik6dGhpcy5yZXBvcnRlci5lcnJvcihcIkVuY29kaW5nIFwiK3QrXCIgdGltZSBpcyBub3Qgc3VwcG9ydGVkIHlldFwiKSx0aGlzLl9lbmNvZGVTdHIocixcIm9jdHN0clwiKX0sYy5wcm90b3R5cGUuX2VuY29kZU51bGw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihcIlwiKX0sYy5wcm90b3R5cGUuX2VuY29kZUludD1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZighdClyZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcihcIlN0cmluZyBpbnQgb3IgZW51bSBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXBcIik7aWYoIXQuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoXCJWYWx1ZXMgbWFwIGRvZXNuJ3QgY29udGFpbjogXCIrSlNPTi5zdHJpbmdpZnkoZSkpO2U9dFtlXX1pZihcIm51bWJlclwiIT10eXBlb2YgZSYmIWkuaXNCdWZmZXIoZSkpe2NvbnN0IHQ9ZS50b0FycmF5KCk7IWUuc2lnbiYmMTI4JnRbMF0mJnQudW5zaGlmdCgwKSxlPWkuZnJvbSh0KX1pZihpLmlzQnVmZmVyKGUpKXtsZXQgdD1lLmxlbmd0aDswPT09ZS5sZW5ndGgmJnQrKztjb25zdCByPWkuYWxsb2ModCk7cmV0dXJuIGUuY29weShyKSwwPT09ZS5sZW5ndGgmJihyWzBdPTApLHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIocil9aWYoZTwxMjgpcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoZSk7aWYoZTwyNTYpcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWzAsZV0pO2xldCByPTE7Zm9yKGxldCB0PWU7dD49MjU2O3Q+Pj04KXIrKztjb25zdCBuPW5ldyBBcnJheShyKTtmb3IobGV0IHQ9bi5sZW5ndGgtMTt0Pj0wO3QtLSluW3RdPTI1NSZlLGU+Pj04O3JldHVybiAxMjgmblswXSYmbi51bnNoaWZ0KDApLHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoaS5mcm9tKG4pKX0sYy5wcm90b3R5cGUuX2VuY29kZUJvb2w9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoZT8yNTU6MCl9LGMucHJvdG90eXBlLl91c2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYoZT1lKHQpKSxlLl9nZXRFbmNvZGVyKFwiZGVyXCIpLnRyZWV9LGMucHJvdG90eXBlLl9za2lwRGVmYXVsdD1mdW5jdGlvbihlLHQscil7Y29uc3Qgbj10aGlzLl9iYXNlU3RhdGU7bGV0IGk7aWYobnVsbD09PW4uZGVmYXVsdClyZXR1cm4hMTtjb25zdCBvPWUuam9pbigpO2lmKHZvaWQgMD09PW4uZGVmYXVsdEJ1ZmZlciYmKG4uZGVmYXVsdEJ1ZmZlcj10aGlzLl9lbmNvZGVWYWx1ZShuLmRlZmF1bHQsdCxyKS5qb2luKCkpLG8ubGVuZ3RoIT09bi5kZWZhdWx0QnVmZmVyLmxlbmd0aClyZXR1cm4hMTtmb3IoaT0wO2k8by5sZW5ndGg7aSsrKWlmKG9baV0hPT1uLmRlZmF1bHRCdWZmZXJbaV0pcmV0dXJuITE7cmV0dXJuITB9fSw2NTc5OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXQ7bi5kZXI9cig2OTg0KSxuLnBlbT1yKDI4ODMpfSwyODgzOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXIoNTcxNyksaT1yKDY5ODQpO2Z1bmN0aW9uIG8oZSl7aS5jYWxsKHRoaXMsZSksdGhpcy5lbmM9XCJwZW1cIn1uKG8saSksZS5leHBvcnRzPW8sby5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj1pLnByb3RvdHlwZS5lbmNvZGUuY2FsbCh0aGlzLGUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpLG49W1wiLS0tLS1CRUdJTiBcIit0LmxhYmVsK1wiLS0tLS1cIl07Zm9yKGxldCBlPTA7ZTxyLmxlbmd0aDtlKz02NCluLnB1c2goci5zbGljZShlLGUrNjQpKTtyZXR1cm4gbi5wdXNoKFwiLS0tLS1FTkQgXCIrdC5sYWJlbCtcIi0tLS0tXCIpLG4uam9pbihcIlxcblwiKX19LDkyODI6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDE1NSk7ZnVuY3Rpb24gaShlKXtyZXR1cm4gaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxpKGUpfXZhciBvLHMsYT1yKDIxMzYpLmNvZGVzLGM9YS5FUlJfQU1CSUdVT1VTX0FSR1VNRU5ULGY9YS5FUlJfSU5WQUxJRF9BUkdfVFlQRSx1PWEuRVJSX0lOVkFMSURfQVJHX1ZBTFVFLGQ9YS5FUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUsaD1hLkVSUl9NSVNTSU5HX0FSR1MsbD1yKDU5NjEpLHA9cig5NTM5KS5pbnNwZWN0LGI9cig5NTM5KS50eXBlcyx5PWIuaXNQcm9taXNlLGc9Yi5pc1JlZ0V4cCxtPU9iamVjdC5hc3NpZ24/T2JqZWN0LmFzc2lnbjpyKDgwOTEpLmFzc2lnbix2PU9iamVjdC5pcz9PYmplY3QuaXM6cig2MDkpO2Z1bmN0aW9uIHcoKXt2YXIgZT1yKDkxNTgpO289ZS5pc0RlZXBFcXVhbCxzPWUuaXNEZWVwU3RyaWN0RXF1YWx9bmV3IE1hcDt2YXIgXz0hMSxTPWUuZXhwb3J0cz1rLEU9e307ZnVuY3Rpb24gQShlKXtpZihlLm1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBlLm1lc3NhZ2U7dGhyb3cgbmV3IGwoZSl9ZnVuY3Rpb24geChlLHQscixuKXtpZighcil7dmFyIGk9ITE7aWYoMD09PXQpaT0hMCxuPVwiTm8gdmFsdWUgYXJndW1lbnQgcGFzc2VkIHRvIGBhc3NlcnQub2soKWBcIjtlbHNlIGlmKG4gaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBuO3ZhciBvPW5ldyBsKHthY3R1YWw6cixleHBlY3RlZDohMCxtZXNzYWdlOm4sb3BlcmF0b3I6XCI9PVwiLHN0YWNrU3RhcnRGbjplfSk7dGhyb3cgby5nZW5lcmF0ZWRNZXNzYWdlPWksb319ZnVuY3Rpb24gaygpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09YXJndW1lbnRzW3JdO3guYXBwbHkodm9pZCAwLFtrLHQubGVuZ3RoXS5jb25jYXQodCkpfVMuZmFpbD1mdW5jdGlvbiBlKHQscixpLG8scyl7dmFyIGEsYz1hcmd1bWVudHMubGVuZ3RoO2lmKDA9PT1jKWE9XCJGYWlsZWRcIjtlbHNlIGlmKDE9PT1jKWk9dCx0PXZvaWQgMDtlbHNle2lmKCExPT09Xyl7Xz0hMDt2YXIgZj1uLmVtaXRXYXJuaW5nP24uZW1pdFdhcm5pbmc6Y29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7ZihcImFzc2VydC5mYWlsKCkgd2l0aCBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYXNzZXJ0LnN0cmljdEVxdWFsKCkgaW5zdGVhZCBvciBvbmx5IHBhc3MgYSBtZXNzYWdlLlwiLFwiRGVwcmVjYXRpb25XYXJuaW5nXCIsXCJERVAwMDk0XCIpfTI9PT1jJiYobz1cIiE9XCIpfWlmKGkgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBpO3ZhciB1PXthY3R1YWw6dCxleHBlY3RlZDpyLG9wZXJhdG9yOnZvaWQgMD09PW8/XCJmYWlsXCI6byxzdGFja1N0YXJ0Rm46c3x8ZX07dm9pZCAwIT09aSYmKHUubWVzc2FnZT1pKTt2YXIgZD1uZXcgbCh1KTt0aHJvdyBhJiYoZC5tZXNzYWdlPWEsZC5nZW5lcmF0ZWRNZXNzYWdlPSEwKSxkfSxTLkFzc2VydGlvbkVycm9yPWwsUy5vaz1rLFMuZXF1YWw9ZnVuY3Rpb24gZSh0LHIsbil7aWYoYXJndW1lbnRzLmxlbmd0aDwyKXRocm93IG5ldyBoKFwiYWN0dWFsXCIsXCJleHBlY3RlZFwiKTt0IT1yJiZBKHthY3R1YWw6dCxleHBlY3RlZDpyLG1lc3NhZ2U6bixvcGVyYXRvcjpcIj09XCIsc3RhY2tTdGFydEZuOmV9KX0sUy5ub3RFcXVhbD1mdW5jdGlvbiBlKHQscixuKXtpZihhcmd1bWVudHMubGVuZ3RoPDIpdGhyb3cgbmV3IGgoXCJhY3R1YWxcIixcImV4cGVjdGVkXCIpO3Q9PXImJkEoe2FjdHVhbDp0LGV4cGVjdGVkOnIsbWVzc2FnZTpuLG9wZXJhdG9yOlwiIT1cIixzdGFja1N0YXJ0Rm46ZX0pfSxTLmRlZXBFcXVhbD1mdW5jdGlvbiBlKHQscixuKXtpZihhcmd1bWVudHMubGVuZ3RoPDIpdGhyb3cgbmV3IGgoXCJhY3R1YWxcIixcImV4cGVjdGVkXCIpO3ZvaWQgMD09PW8mJncoKSxvKHQscil8fEEoe2FjdHVhbDp0LGV4cGVjdGVkOnIsbWVzc2FnZTpuLG9wZXJhdG9yOlwiZGVlcEVxdWFsXCIsc3RhY2tTdGFydEZuOmV9KX0sUy5ub3REZWVwRXF1YWw9ZnVuY3Rpb24gZSh0LHIsbil7aWYoYXJndW1lbnRzLmxlbmd0aDwyKXRocm93IG5ldyBoKFwiYWN0dWFsXCIsXCJleHBlY3RlZFwiKTt2b2lkIDA9PT1vJiZ3KCksbyh0LHIpJiZBKHthY3R1YWw6dCxleHBlY3RlZDpyLG1lc3NhZ2U6bixvcGVyYXRvcjpcIm5vdERlZXBFcXVhbFwiLHN0YWNrU3RhcnRGbjplfSl9LFMuZGVlcFN0cmljdEVxdWFsPWZ1bmN0aW9uIGUodCxyLG4pe2lmKGFyZ3VtZW50cy5sZW5ndGg8Mil0aHJvdyBuZXcgaChcImFjdHVhbFwiLFwiZXhwZWN0ZWRcIik7dm9pZCAwPT09byYmdygpLHModCxyKXx8QSh7YWN0dWFsOnQsZXhwZWN0ZWQ6cixtZXNzYWdlOm4sb3BlcmF0b3I6XCJkZWVwU3RyaWN0RXF1YWxcIixzdGFja1N0YXJ0Rm46ZX0pfSxTLm5vdERlZXBTdHJpY3RFcXVhbD1mdW5jdGlvbiBlKHQscixuKXtpZihhcmd1bWVudHMubGVuZ3RoPDIpdGhyb3cgbmV3IGgoXCJhY3R1YWxcIixcImV4cGVjdGVkXCIpO3ZvaWQgMD09PW8mJncoKSxzKHQscikmJkEoe2FjdHVhbDp0LGV4cGVjdGVkOnIsbWVzc2FnZTpuLG9wZXJhdG9yOlwibm90RGVlcFN0cmljdEVxdWFsXCIsc3RhY2tTdGFydEZuOmV9KX0sUy5zdHJpY3RFcXVhbD1mdW5jdGlvbiBlKHQscixuKXtpZihhcmd1bWVudHMubGVuZ3RoPDIpdGhyb3cgbmV3IGgoXCJhY3R1YWxcIixcImV4cGVjdGVkXCIpO3YodCxyKXx8QSh7YWN0dWFsOnQsZXhwZWN0ZWQ6cixtZXNzYWdlOm4sb3BlcmF0b3I6XCJzdHJpY3RFcXVhbFwiLHN0YWNrU3RhcnRGbjplfSl9LFMubm90U3RyaWN0RXF1YWw9ZnVuY3Rpb24gZSh0LHIsbil7aWYoYXJndW1lbnRzLmxlbmd0aDwyKXRocm93IG5ldyBoKFwiYWN0dWFsXCIsXCJleHBlY3RlZFwiKTt2KHQscikmJkEoe2FjdHVhbDp0LGV4cGVjdGVkOnIsbWVzc2FnZTpuLG9wZXJhdG9yOlwibm90U3RyaWN0RXF1YWxcIixzdGFja1N0YXJ0Rm46ZX0pfTt2YXIgUD1mdW5jdGlvbiBlKHQscixuKXt2YXIgaT10aGlzOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksci5mb3JFYWNoKChmdW5jdGlvbihlKXtlIGluIHQmJih2b2lkIDAhPT1uJiZcInN0cmluZ1wiPT10eXBlb2YgbltlXSYmZyh0W2VdKSYmdFtlXS50ZXN0KG5bZV0pP2lbZV09bltlXTppW2VdPXRbZV0pfSkpfTtmdW5jdGlvbiBPKGUsdCxyLG4saSxvKXtpZighKHIgaW4gZSl8fCFzKGVbcl0sdFtyXSkpe2lmKCFuKXt2YXIgYT1uZXcgUChlLGkpLGM9bmV3IFAodCxpLGUpLGY9bmV3IGwoe2FjdHVhbDphLGV4cGVjdGVkOmMsb3BlcmF0b3I6XCJkZWVwU3RyaWN0RXF1YWxcIixzdGFja1N0YXJ0Rm46b30pO3Rocm93IGYuYWN0dWFsPWUsZi5leHBlY3RlZD10LGYub3BlcmF0b3I9by5uYW1lLGZ9QSh7YWN0dWFsOmUsZXhwZWN0ZWQ6dCxtZXNzYWdlOm4sb3BlcmF0b3I6by5uYW1lLHN0YWNrU3RhcnRGbjpvfSl9fWZ1bmN0aW9uIE0oZSx0LHIsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl7aWYoZyh0KSlyZXR1cm4gdC50ZXN0KGUpO2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXRocm93IG5ldyBmKFwiZXhwZWN0ZWRcIixbXCJGdW5jdGlvblwiLFwiUmVnRXhwXCJdLHQpO2lmKFwib2JqZWN0XCIhPT1pKGUpfHxudWxsPT09ZSl7dmFyIHM9bmV3IGwoe2FjdHVhbDplLGV4cGVjdGVkOnQsbWVzc2FnZTpyLG9wZXJhdG9yOlwiZGVlcFN0cmljdEVxdWFsXCIsc3RhY2tTdGFydEZuOm59KTt0aHJvdyBzLm9wZXJhdG9yPW4ubmFtZSxzfXZhciBhPU9iamVjdC5rZXlzKHQpO2lmKHQgaW5zdGFuY2VvZiBFcnJvcilhLnB1c2goXCJuYW1lXCIsXCJtZXNzYWdlXCIpO2Vsc2UgaWYoMD09PWEubGVuZ3RoKXRocm93IG5ldyB1KFwiZXJyb3JcIix0LFwibWF5IG5vdCBiZSBhbiBlbXB0eSBvYmplY3RcIik7cmV0dXJuIHZvaWQgMD09PW8mJncoKSxhLmZvckVhY2goKGZ1bmN0aW9uKGkpe1wic3RyaW5nXCI9PXR5cGVvZiBlW2ldJiZnKHRbaV0pJiZ0W2ldLnRlc3QoZVtpXSl8fE8oZSx0LGkscixhLG4pfSkpLCEwfXJldHVybiB2b2lkIDAhPT10LnByb3RvdHlwZSYmZSBpbnN0YW5jZW9mIHR8fCFFcnJvci5pc1Byb3RvdHlwZU9mKHQpJiYhMD09PXQuY2FsbCh7fSxlKX1mdW5jdGlvbiBJKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IGYoXCJmblwiLFwiRnVuY3Rpb25cIixlKTt0cnl7ZSgpfWNhdGNoKGUpe3JldHVybiBlfXJldHVybiBFfWZ1bmN0aW9uIFQoZSl7cmV0dXJuIHkoZSl8fG51bGwhPT1lJiZcIm9iamVjdFwiPT09aShlKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS50aGVuJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmNhdGNofWZ1bmN0aW9uIFIoZSl7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIHQ7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZSl7aWYoIVQodD1lKCkpKXRocm93IG5ldyBkKFwiaW5zdGFuY2Ugb2YgUHJvbWlzZVwiLFwicHJvbWlzZUZuXCIsdCl9ZWxzZXtpZighVChlKSl0aHJvdyBuZXcgZihcInByb21pc2VGblwiLFtcIkZ1bmN0aW9uXCIsXCJQcm9taXNlXCJdLGUpO3Q9ZX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gdH0pKS50aGVuKChmdW5jdGlvbigpe3JldHVybiBFfSkpLmNhdGNoKChmdW5jdGlvbihlKXtyZXR1cm4gZX0pKX0pKX1mdW5jdGlvbiBOKGUsdCxyLG4pe2lmKFwic3RyaW5nXCI9PXR5cGVvZiByKXtpZig0PT09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgZihcImVycm9yXCIsW1wiT2JqZWN0XCIsXCJFcnJvclwiLFwiRnVuY3Rpb25cIixcIlJlZ0V4cFwiXSxyKTtpZihcIm9iamVjdFwiPT09aSh0KSYmbnVsbCE9PXQpe2lmKHQubWVzc2FnZT09PXIpdGhyb3cgbmV3IGMoXCJlcnJvci9tZXNzYWdlXCIsJ1RoZSBlcnJvciBtZXNzYWdlIFwiJy5jb25jYXQodC5tZXNzYWdlLCdcIiBpcyBpZGVudGljYWwgdG8gdGhlIG1lc3NhZ2UuJykpfWVsc2UgaWYodD09PXIpdGhyb3cgbmV3IGMoXCJlcnJvci9tZXNzYWdlXCIsJ1RoZSBlcnJvciBcIicuY29uY2F0KHQsJ1wiIGlzIGlkZW50aWNhbCB0byB0aGUgbWVzc2FnZS4nKSk7bj1yLHI9dm9pZCAwfWVsc2UgaWYobnVsbCE9ciYmXCJvYmplY3RcIiE9PWkocikmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHIpdGhyb3cgbmV3IGYoXCJlcnJvclwiLFtcIk9iamVjdFwiLFwiRXJyb3JcIixcIkZ1bmN0aW9uXCIsXCJSZWdFeHBcIl0scik7aWYodD09PUUpe3ZhciBvPVwiXCI7ciYmci5uYW1lJiYobys9XCIgKFwiLmNvbmNhdChyLm5hbWUsXCIpXCIpKSxvKz1uP1wiOiBcIi5jb25jYXQobik6XCIuXCI7dmFyIHM9XCJyZWplY3RzXCI9PT1lLm5hbWU/XCJyZWplY3Rpb25cIjpcImV4Y2VwdGlvblwiO0Eoe2FjdHVhbDp2b2lkIDAsZXhwZWN0ZWQ6cixvcGVyYXRvcjplLm5hbWUsbWVzc2FnZTpcIk1pc3NpbmcgZXhwZWN0ZWQgXCIuY29uY2F0KHMpLmNvbmNhdChvKSxzdGFja1N0YXJ0Rm46ZX0pfWlmKHImJiFNKHQscixuLGUpKXRocm93IHR9ZnVuY3Rpb24gQyhlLHQscixuKXtpZih0IT09RSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHImJihuPXIscj12b2lkIDApLCFyfHxNKHQscikpe3ZhciBpPW4/XCI6IFwiLmNvbmNhdChuKTpcIi5cIixvPVwiZG9lc05vdFJlamVjdFwiPT09ZS5uYW1lP1wicmVqZWN0aW9uXCI6XCJleGNlcHRpb25cIjtBKHthY3R1YWw6dCxleHBlY3RlZDpyLG9wZXJhdG9yOmUubmFtZSxtZXNzYWdlOlwiR290IHVud2FudGVkIFwiLmNvbmNhdChvKS5jb25jYXQoaSxcIlxcblwiKSsnQWN0dWFsIG1lc3NhZ2U6IFwiJy5jb25jYXQodCYmdC5tZXNzYWdlLCdcIicpLHN0YWNrU3RhcnRGbjplfSl9dGhyb3cgdH19ZnVuY3Rpb24gaigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09YXJndW1lbnRzW3JdO3guYXBwbHkodm9pZCAwLFtqLHQubGVuZ3RoXS5jb25jYXQodCkpfVMudGhyb3dzPWZ1bmN0aW9uIGUodCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkocj4xP3ItMTowKSxpPTE7aTxyO2krKyluW2ktMV09YXJndW1lbnRzW2ldO04uYXBwbHkodm9pZCAwLFtlLEkodCldLmNvbmNhdChuKSl9LFMucmVqZWN0cz1mdW5jdGlvbiBlKHQpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHI+MT9yLTE6MCksaT0xO2k8cjtpKyspbltpLTFdPWFyZ3VtZW50c1tpXTtyZXR1cm4gUih0KS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gTi5hcHBseSh2b2lkIDAsW2UsdF0uY29uY2F0KG4pKX0pKX0sUy5kb2VzTm90VGhyb3c9ZnVuY3Rpb24gZSh0KXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShyPjE/ci0xOjApLGk9MTtpPHI7aSsrKW5baS0xXT1hcmd1bWVudHNbaV07Qy5hcHBseSh2b2lkIDAsW2UsSSh0KV0uY29uY2F0KG4pKX0sUy5kb2VzTm90UmVqZWN0PWZ1bmN0aW9uIGUodCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkocj4xP3ItMTowKSxpPTE7aTxyO2krKyluW2ktMV09YXJndW1lbnRzW2ldO3JldHVybiBSKHQpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBDLmFwcGx5KHZvaWQgMCxbZSx0XS5jb25jYXQobikpfSkpfSxTLmlmRXJyb3I9ZnVuY3Rpb24gZSh0KXtpZihudWxsIT10KXt2YXIgcj1cImlmRXJyb3IgZ290IHVud2FudGVkIGV4Y2VwdGlvbjogXCI7XCJvYmplY3RcIj09PWkodCkmJlwic3RyaW5nXCI9PXR5cGVvZiB0Lm1lc3NhZ2U/MD09PXQubWVzc2FnZS5sZW5ndGgmJnQuY29uc3RydWN0b3I/cis9dC5jb25zdHJ1Y3Rvci5uYW1lOnIrPXQubWVzc2FnZTpyKz1wKHQpO3ZhciBuPW5ldyBsKHthY3R1YWw6dCxleHBlY3RlZDpudWxsLG9wZXJhdG9yOlwiaWZFcnJvclwiLG1lc3NhZ2U6cixzdGFja1N0YXJ0Rm46ZX0pLG89dC5zdGFjaztpZihcInN0cmluZ1wiPT10eXBlb2Ygbyl7dmFyIHM9by5zcGxpdChcIlxcblwiKTtzLnNoaWZ0KCk7Zm9yKHZhciBhPW4uc3RhY2suc3BsaXQoXCJcXG5cIiksYz0wO2M8cy5sZW5ndGg7YysrKXt2YXIgZj1hLmluZGV4T2Yoc1tjXSk7aWYoLTEhPT1mKXthPWEuc2xpY2UoMCxmKTticmVha319bi5zdGFjaz1cIlwiLmNvbmNhdChhLmpvaW4oXCJcXG5cIiksXCJcXG5cIikuY29uY2F0KHMuam9pbihcIlxcblwiKSl9dGhyb3cgbn19LFMuc3RyaWN0PW0oaixTLHtlcXVhbDpTLnN0cmljdEVxdWFsLGRlZXBFcXVhbDpTLmRlZXBTdHJpY3RFcXVhbCxub3RFcXVhbDpTLm5vdFN0cmljdEVxdWFsLG5vdERlZXBFcXVhbDpTLm5vdERlZXBTdHJpY3RFcXVhbH0pLFMuc3RyaWN0LnN0cmljdD1TLnN0cmljdH0sNTk2MTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0MTU1KTtmdW5jdGlvbiBpKGUsdCxyKXtyZXR1cm4gdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPXIsZX1mdW5jdGlvbiBvKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1mdW5jdGlvbiBzKGUsdCl7cmV0dXJuIXR8fFwib2JqZWN0XCIhPT1sKHQpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2EoZSk6dH1mdW5jdGlvbiBhKGUpe2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiBlfWZ1bmN0aW9uIGMoZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBjPWZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lfHwocj1lLC0xPT09RnVuY3Rpb24udG9TdHJpbmcuY2FsbChyKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSkpcmV0dXJuIGU7dmFyIHI7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7aWYodm9pZCAwIT09dCl7aWYodC5oYXMoZSkpcmV0dXJuIHQuZ2V0KGUpO3Quc2V0KGUsbil9ZnVuY3Rpb24gbigpe3JldHVybiB1KGUsYXJndW1lbnRzLGgodGhpcykuY29uc3RydWN0b3IpfXJldHVybiBuLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6bixlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxkKG4sZSl9LGMoZSl9ZnVuY3Rpb24gZigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX1mdW5jdGlvbiB1KGUsdCxyKXtyZXR1cm4gdT1mKCk/UmVmbGVjdC5jb25zdHJ1Y3Q6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPVtudWxsXTtuLnB1c2guYXBwbHkobix0KTt2YXIgaT1uZXcoRnVuY3Rpb24uYmluZC5hcHBseShlLG4pKTtyZXR1cm4gciYmZChpLHIucHJvdG90eXBlKSxpfSx1LmFwcGx5KG51bGwsYXJndW1lbnRzKX1mdW5jdGlvbiBkKGUsdCl7cmV0dXJuIGQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlLHQpe3JldHVybiBlLl9fcHJvdG9fXz10LGV9LGQoZSx0KX1mdW5jdGlvbiBoKGUpe3JldHVybiBoPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSl9LGgoZSl9ZnVuY3Rpb24gbChlKXtyZXR1cm4gbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxsKGUpfXZhciBwPXIoOTUzOSkuaW5zcGVjdCxiPXIoMjEzNikuY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEU7ZnVuY3Rpb24geShlLHQscil7cmV0dXJuKHZvaWQgMD09PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCksZS5zdWJzdHJpbmcoci10Lmxlbmd0aCxyKT09PXR9dmFyIGc9XCJcIixtPVwiXCIsdj1cIlwiLHc9XCJcIixfPXtkZWVwU3RyaWN0RXF1YWw6XCJFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgc3RyaWN0bHkgZGVlcC1lcXVhbDpcIixzdHJpY3RFcXVhbDpcIkV4cGVjdGVkIHZhbHVlcyB0byBiZSBzdHJpY3RseSBlcXVhbDpcIixzdHJpY3RFcXVhbE9iamVjdDonRXhwZWN0ZWQgXCJhY3R1YWxcIiB0byBiZSByZWZlcmVuY2UtZXF1YWwgdG8gXCJleHBlY3RlZFwiOicsZGVlcEVxdWFsOlwiRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIGxvb3NlbHkgZGVlcC1lcXVhbDpcIixlcXVhbDpcIkV4cGVjdGVkIHZhbHVlcyB0byBiZSBsb29zZWx5IGVxdWFsOlwiLG5vdERlZXBTdHJpY3RFcXVhbDonRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgc3RyaWN0bHkgZGVlcC1lcXVhbCB0bzonLG5vdFN0cmljdEVxdWFsOidFeHBlY3RlZCBcImFjdHVhbFwiIHRvIGJlIHN0cmljdGx5IHVuZXF1YWwgdG86Jyxub3RTdHJpY3RFcXVhbE9iamVjdDonRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgcmVmZXJlbmNlLWVxdWFsIHRvIFwiZXhwZWN0ZWRcIjonLG5vdERlZXBFcXVhbDonRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgbG9vc2VseSBkZWVwLWVxdWFsIHRvOicsbm90RXF1YWw6J0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgbG9vc2VseSB1bmVxdWFsIHRvOicsbm90SWRlbnRpY2FsOlwiVmFsdWVzIGlkZW50aWNhbCBidXQgbm90IHJlZmVyZW5jZS1lcXVhbDpcIn07ZnVuY3Rpb24gUyhlKXt2YXIgdD1PYmplY3Qua2V5cyhlKSxyPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtyW3RdPWVbdF19KSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJtZXNzYWdlXCIse3ZhbHVlOmUubWVzc2FnZX0pLHJ9ZnVuY3Rpb24gRShlKXtyZXR1cm4gcChlLHtjb21wYWN0OiExLGN1c3RvbUluc3BlY3Q6ITEsZGVwdGg6MWUzLG1heEFycmF5TGVuZ3RoOjEvMCxzaG93SGlkZGVuOiExLGJyZWFrTGVuZ3RoOjEvMCxzaG93UHJveHk6ITEsc29ydGVkOiEwLGdldHRlcnM6ITB9KX12YXIgQT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3ZhciByO2lmKGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSxcIm9iamVjdFwiIT09bChlKXx8bnVsbD09PWUpdGhyb3cgbmV3IGIoXCJvcHRpb25zXCIsXCJPYmplY3RcIixlKTt2YXIgaT1lLm1lc3NhZ2Usbz1lLm9wZXJhdG9yLGM9ZS5zdGFja1N0YXJ0Rm4sZj1lLmFjdHVhbCx1PWUuZXhwZWN0ZWQsZD1FcnJvci5zdGFja1RyYWNlTGltaXQ7aWYoRXJyb3Iuc3RhY2tUcmFjZUxpbWl0PTAsbnVsbCE9aSlyPXModGhpcyxoKHQpLmNhbGwodGhpcyxTdHJpbmcoaSkpKTtlbHNlIGlmKG4uc3RkZXJyJiZuLnN0ZGVyci5pc1RUWSYmKG4uc3RkZXJyJiZuLnN0ZGVyci5nZXRDb2xvckRlcHRoJiYxIT09bi5zdGRlcnIuZ2V0Q29sb3JEZXB0aCgpPyhnPVwiXHUwMDFiWzM0bVwiLG09XCJcdTAwMWJbMzJtXCIsdz1cIlx1MDAxYlszOW1cIix2PVwiXHUwMDFiWzMxbVwiKTooZz1cIlwiLG09XCJcIix3PVwiXCIsdj1cIlwiKSksXCJvYmplY3RcIj09PWwoZikmJm51bGwhPT1mJiZcIm9iamVjdFwiPT09bCh1KSYmbnVsbCE9PXUmJlwic3RhY2tcImluIGYmJmYgaW5zdGFuY2VvZiBFcnJvciYmXCJzdGFja1wiaW4gdSYmdSBpbnN0YW5jZW9mIEVycm9yJiYoZj1TKGYpLHU9Uyh1KSksXCJkZWVwU3RyaWN0RXF1YWxcIj09PW98fFwic3RyaWN0RXF1YWxcIj09PW8pcj1zKHRoaXMsaCh0KS5jYWxsKHRoaXMsZnVuY3Rpb24oZSx0LHIpe3ZhciBpPVwiXCIsbz1cIlwiLHM9MCxhPVwiXCIsYz0hMSxmPUUoZSksdT1mLnNwbGl0KFwiXFxuXCIpLGQ9RSh0KS5zcGxpdChcIlxcblwiKSxoPTAscD1cIlwiO2lmKFwic3RyaWN0RXF1YWxcIj09PXImJlwib2JqZWN0XCI9PT1sKGUpJiZcIm9iamVjdFwiPT09bCh0KSYmbnVsbCE9PWUmJm51bGwhPT10JiYocj1cInN0cmljdEVxdWFsT2JqZWN0XCIpLDE9PT11Lmxlbmd0aCYmMT09PWQubGVuZ3RoJiZ1WzBdIT09ZFswXSl7dmFyIGI9dVswXS5sZW5ndGgrZFswXS5sZW5ndGg7aWYoYjw9MTApe2lmKCEoXCJvYmplY3RcIj09PWwoZSkmJm51bGwhPT1lfHxcIm9iamVjdFwiPT09bCh0KSYmbnVsbCE9PXR8fDA9PT1lJiYwPT09dCkpcmV0dXJuXCJcIi5jb25jYXQoX1tyXSxcIlxcblxcblwiKStcIlwiLmNvbmNhdCh1WzBdLFwiICE9PSBcIikuY29uY2F0KGRbMF0sXCJcXG5cIil9ZWxzZSBpZihcInN0cmljdEVxdWFsT2JqZWN0XCIhPT1yJiZiPChuLnN0ZGVyciYmbi5zdGRlcnIuaXNUVFk/bi5zdGRlcnIuY29sdW1uczo4MCkpe2Zvcig7dVswXVtoXT09PWRbMF1baF07KWgrKztoPjImJihwPVwiXFxuICBcIi5jb25jYXQoZnVuY3Rpb24oZSx0KXtpZih0PU1hdGguZmxvb3IodCksMD09ZS5sZW5ndGh8fDA9PXQpcmV0dXJuXCJcIjt2YXIgcj1lLmxlbmd0aCp0O2Zvcih0PU1hdGguZmxvb3IoTWF0aC5sb2codCkvTWF0aC5sb2coMikpO3Q7KWUrPWUsdC0tO3JldHVybiBlK2Uuc3Vic3RyaW5nKDAsci1lLmxlbmd0aCl9KFwiIFwiLGgpLFwiXlwiKSxoPTApfX1mb3IodmFyIFM9dVt1Lmxlbmd0aC0xXSxBPWRbZC5sZW5ndGgtMV07Uz09PUEmJihoKys8Mj9hPVwiXFxuICBcIi5jb25jYXQoUykuY29uY2F0KGEpOmk9Uyx1LnBvcCgpLGQucG9wKCksMCE9PXUubGVuZ3RoJiYwIT09ZC5sZW5ndGgpOylTPXVbdS5sZW5ndGgtMV0sQT1kW2QubGVuZ3RoLTFdO3ZhciB4PU1hdGgubWF4KHUubGVuZ3RoLGQubGVuZ3RoKTtpZigwPT09eCl7dmFyIGs9Zi5zcGxpdChcIlxcblwiKTtpZihrLmxlbmd0aD4zMClmb3Ioa1syNl09XCJcIi5jb25jYXQoZyxcIi4uLlwiKS5jb25jYXQodyk7ay5sZW5ndGg+Mjc7KWsucG9wKCk7cmV0dXJuXCJcIi5jb25jYXQoXy5ub3RJZGVudGljYWwsXCJcXG5cXG5cIikuY29uY2F0KGsuam9pbihcIlxcblwiKSxcIlxcblwiKX1oPjMmJihhPVwiXFxuXCIuY29uY2F0KGcsXCIuLi5cIikuY29uY2F0KHcpLmNvbmNhdChhKSxjPSEwKSxcIlwiIT09aSYmKGE9XCJcXG4gIFwiLmNvbmNhdChpKS5jb25jYXQoYSksaT1cIlwiKTt2YXIgUD0wLE89X1tyXStcIlxcblwiLmNvbmNhdChtLFwiKyBhY3R1YWxcIikuY29uY2F0KHcsXCIgXCIpLmNvbmNhdCh2LFwiLSBleHBlY3RlZFwiKS5jb25jYXQodyksTT1cIiBcIi5jb25jYXQoZyxcIi4uLlwiKS5jb25jYXQodyxcIiBMaW5lcyBza2lwcGVkXCIpO2ZvcihoPTA7aDx4O2grKyl7dmFyIEk9aC1zO2lmKHUubGVuZ3RoPGgrMSlJPjEmJmg+MiYmKEk+ND8obys9XCJcXG5cIi5jb25jYXQoZyxcIi4uLlwiKS5jb25jYXQodyksYz0hMCk6ST4zJiYobys9XCJcXG4gIFwiLmNvbmNhdChkW2gtMl0pLFArKyksbys9XCJcXG4gIFwiLmNvbmNhdChkW2gtMV0pLFArKykscz1oLGkrPVwiXFxuXCIuY29uY2F0KHYsXCItXCIpLmNvbmNhdCh3LFwiIFwiKS5jb25jYXQoZFtoXSksUCsrO2Vsc2UgaWYoZC5sZW5ndGg8aCsxKUk+MSYmaD4yJiYoST40PyhvKz1cIlxcblwiLmNvbmNhdChnLFwiLi4uXCIpLmNvbmNhdCh3KSxjPSEwKTpJPjMmJihvKz1cIlxcbiAgXCIuY29uY2F0KHVbaC0yXSksUCsrKSxvKz1cIlxcbiAgXCIuY29uY2F0KHVbaC0xXSksUCsrKSxzPWgsbys9XCJcXG5cIi5jb25jYXQobSxcIitcIikuY29uY2F0KHcsXCIgXCIpLmNvbmNhdCh1W2hdKSxQKys7ZWxzZXt2YXIgVD1kW2hdLFI9dVtoXSxOPVIhPT1UJiYoIXkoUixcIixcIil8fFIuc2xpY2UoMCwtMSkhPT1UKTtOJiZ5KFQsXCIsXCIpJiZULnNsaWNlKDAsLTEpPT09UiYmKE49ITEsUis9XCIsXCIpLE4/KEk+MSYmaD4yJiYoST40PyhvKz1cIlxcblwiLmNvbmNhdChnLFwiLi4uXCIpLmNvbmNhdCh3KSxjPSEwKTpJPjMmJihvKz1cIlxcbiAgXCIuY29uY2F0KHVbaC0yXSksUCsrKSxvKz1cIlxcbiAgXCIuY29uY2F0KHVbaC0xXSksUCsrKSxzPWgsbys9XCJcXG5cIi5jb25jYXQobSxcIitcIikuY29uY2F0KHcsXCIgXCIpLmNvbmNhdChSKSxpKz1cIlxcblwiLmNvbmNhdCh2LFwiLVwiKS5jb25jYXQodyxcIiBcIikuY29uY2F0KFQpLFArPTIpOihvKz1pLGk9XCJcIiwxIT09SSYmMCE9PWh8fChvKz1cIlxcbiAgXCIuY29uY2F0KFIpLFArKykpfWlmKFA+MjAmJmg8eC0yKXJldHVyblwiXCIuY29uY2F0KE8pLmNvbmNhdChNLFwiXFxuXCIpLmNvbmNhdChvLFwiXFxuXCIpLmNvbmNhdChnLFwiLi4uXCIpLmNvbmNhdCh3KS5jb25jYXQoaSxcIlxcblwiKStcIlwiLmNvbmNhdChnLFwiLi4uXCIpLmNvbmNhdCh3KX1yZXR1cm5cIlwiLmNvbmNhdChPKS5jb25jYXQoYz9NOlwiXCIsXCJcXG5cIikuY29uY2F0KG8pLmNvbmNhdChpKS5jb25jYXQoYSkuY29uY2F0KHApfShmLHUsbykpKTtlbHNlIGlmKFwibm90RGVlcFN0cmljdEVxdWFsXCI9PT1vfHxcIm5vdFN0cmljdEVxdWFsXCI9PT1vKXt2YXIgcD1fW29dLEE9RShmKS5zcGxpdChcIlxcblwiKTtpZihcIm5vdFN0cmljdEVxdWFsXCI9PT1vJiZcIm9iamVjdFwiPT09bChmKSYmbnVsbCE9PWYmJihwPV8ubm90U3RyaWN0RXF1YWxPYmplY3QpLEEubGVuZ3RoPjMwKWZvcihBWzI2XT1cIlwiLmNvbmNhdChnLFwiLi4uXCIpLmNvbmNhdCh3KTtBLmxlbmd0aD4yNzspQS5wb3AoKTtyPTE9PT1BLmxlbmd0aD9zKHRoaXMsaCh0KS5jYWxsKHRoaXMsXCJcIi5jb25jYXQocCxcIiBcIikuY29uY2F0KEFbMF0pKSk6cyh0aGlzLGgodCkuY2FsbCh0aGlzLFwiXCIuY29uY2F0KHAsXCJcXG5cXG5cIikuY29uY2F0KEEuam9pbihcIlxcblwiKSxcIlxcblwiKSkpfWVsc2V7dmFyIHg9RShmKSxrPVwiXCIsUD1fW29dO1wibm90RGVlcEVxdWFsXCI9PT1vfHxcIm5vdEVxdWFsXCI9PT1vPyh4PVwiXCIuY29uY2F0KF9bb10sXCJcXG5cXG5cIikuY29uY2F0KHgpKS5sZW5ndGg+MTAyNCYmKHg9XCJcIi5jb25jYXQoeC5zbGljZSgwLDEwMjEpLFwiLi4uXCIpKTooaz1cIlwiLmNvbmNhdChFKHUpKSx4Lmxlbmd0aD41MTImJih4PVwiXCIuY29uY2F0KHguc2xpY2UoMCw1MDkpLFwiLi4uXCIpKSxrLmxlbmd0aD41MTImJihrPVwiXCIuY29uY2F0KGsuc2xpY2UoMCw1MDkpLFwiLi4uXCIpKSxcImRlZXBFcXVhbFwiPT09b3x8XCJlcXVhbFwiPT09bz94PVwiXCIuY29uY2F0KFAsXCJcXG5cXG5cIikuY29uY2F0KHgsXCJcXG5cXG5zaG91bGQgZXF1YWxcXG5cXG5cIik6az1cIiBcIi5jb25jYXQobyxcIiBcIikuY29uY2F0KGspKSxyPXModGhpcyxoKHQpLmNhbGwodGhpcyxcIlwiLmNvbmNhdCh4KS5jb25jYXQoaykpKX1yZXR1cm4gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0PWQsci5nZW5lcmF0ZWRNZXNzYWdlPSFpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhKHIpLFwibmFtZVwiLHt2YWx1ZTpcIkFzc2VydGlvbkVycm9yIFtFUlJfQVNTRVJUSU9OXVwiLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksci5jb2RlPVwiRVJSX0FTU0VSVElPTlwiLHIuYWN0dWFsPWYsci5leHBlY3RlZD11LHIub3BlcmF0b3I9byxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoYShyKSxjKSxyLnN0YWNrLHIubmFtZT1cIkFzc2VydGlvbkVycm9yXCIscyhyKX12YXIgcixjO3JldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmZChlLHQpfSh0LGUpLHI9dCxjPVt7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiXCIuY29uY2F0KHRoaXMubmFtZSxcIiBbXCIpLmNvbmNhdCh0aGlzLmNvZGUsXCJdOiBcIikuY29uY2F0KHRoaXMubWVzc2FnZSl9fSx7a2V5OnAuY3VzdG9tLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHAodGhpcyxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcj1udWxsIT1hcmd1bWVudHNbdF0/YXJndW1lbnRzW3RdOnt9LG49T2JqZWN0LmtleXMocik7XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyYmKG49bi5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhyKS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsZSkuZW51bWVyYWJsZX0pKSkpLG4uZm9yRWFjaCgoZnVuY3Rpb24odCl7aShlLHQsclt0XSl9KSl9cmV0dXJuIGV9KHt9LHQse2N1c3RvbUluc3BlY3Q6ITEsZGVwdGg6MH0pKX19XSxjJiZvKHIucHJvdG90eXBlLGMpLHR9KGMoRXJyb3IpKTtlLmV4cG9ydHM9QX0sMjEzNjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxuKGUpfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIGk9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKX0saShlKX1mdW5jdGlvbiBvKGUsdCl7cmV0dXJuIG89T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlLHQpe3JldHVybiBlLl9fcHJvdG9fXz10LGV9LG8oZSx0KX12YXIgcyxhLGM9e307ZnVuY3Rpb24gZihlLHQscil7cnx8KHI9RXJyb3IpO3ZhciBzPWZ1bmN0aW9uKHIpe2Z1bmN0aW9uIHMocixvLGEpe3ZhciBjO3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMscyksYz1mdW5jdGlvbihlLHQpe3JldHVybiF0fHxcIm9iamVjdFwiIT09bih0KSYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gZX0oZSk6dH0odGhpcyxpKHMpLmNhbGwodGhpcyxmdW5jdGlvbihlLHIsbil7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp0KGUscixuKX0ocixvLGEpKSksYy5jb2RlPWUsY31yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJm8oZSx0KX0ocyxyKSxzfShyKTtjW2VdPXN9ZnVuY3Rpb24gdShlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciByPWUubGVuZ3RoO3JldHVybiBlPWUubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nKGUpfSkpLHI+Mj9cIm9uZSBvZiBcIi5jb25jYXQodCxcIiBcIikuY29uY2F0KGUuc2xpY2UoMCxyLTEpLmpvaW4oXCIsIFwiKSxcIiwgb3IgXCIpK2Vbci0xXToyPT09cj9cIm9uZSBvZiBcIi5jb25jYXQodCxcIiBcIikuY29uY2F0KGVbMF0sXCIgb3IgXCIpLmNvbmNhdChlWzFdKTpcIm9mIFwiLmNvbmNhdCh0LFwiIFwiKS5jb25jYXQoZVswXSl9cmV0dXJuXCJvZiBcIi5jb25jYXQodCxcIiBcIikuY29uY2F0KFN0cmluZyhlKSl9ZihcIkVSUl9BTUJJR1VPVVNfQVJHVU1FTlRcIiwnVGhlIFwiJXNcIiBhcmd1bWVudCBpcyBhbWJpZ3VvdXMuICVzJyxUeXBlRXJyb3IpLGYoXCJFUlJfSU5WQUxJRF9BUkdfVFlQRVwiLChmdW5jdGlvbihlLHQsaSl7dmFyIG8sYSxjLGYsZDtpZih2b2lkIDA9PT1zJiYocz1yKDkyODIpKSxzKFwic3RyaW5nXCI9PXR5cGVvZiBlLFwiJ25hbWUnIG11c3QgYmUgYSBzdHJpbmdcIiksXCJzdHJpbmdcIj09dHlwZW9mIHQmJihhPVwibm90IFwiLHQuc3Vic3RyKDAsYS5sZW5ndGgpPT09YSk/KG89XCJtdXN0IG5vdCBiZVwiLHQ9dC5yZXBsYWNlKC9ebm90IC8sXCJcIikpOm89XCJtdXN0IGJlXCIsZnVuY3Rpb24oZSx0LHIpe3JldHVybih2b2lkIDA9PT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpLGUuc3Vic3RyaW5nKHItdC5sZW5ndGgscik9PT10fShlLFwiIGFyZ3VtZW50XCIpKWM9XCJUaGUgXCIuY29uY2F0KGUsXCIgXCIpLmNvbmNhdChvLFwiIFwiKS5jb25jYXQodSh0LFwidHlwZVwiKSk7ZWxzZXt2YXIgaD0oXCJudW1iZXJcIiE9dHlwZW9mIGQmJihkPTApLGQrXCIuXCIubGVuZ3RoPihmPWUpLmxlbmd0aHx8LTE9PT1mLmluZGV4T2YoXCIuXCIsZCk/XCJhcmd1bWVudFwiOlwicHJvcGVydHlcIik7Yz0nVGhlIFwiJy5jb25jYXQoZSwnXCIgJykuY29uY2F0KGgsXCIgXCIpLmNvbmNhdChvLFwiIFwiKS5jb25jYXQodSh0LFwidHlwZVwiKSl9cmV0dXJuIGMrXCIuIFJlY2VpdmVkIHR5cGUgXCIuY29uY2F0KG4oaSkpfSksVHlwZUVycm9yKSxmKFwiRVJSX0lOVkFMSURfQVJHX1ZBTFVFXCIsKGZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOlwiaXMgaW52YWxpZFwiO3ZvaWQgMD09PWEmJihhPXIoOTUzOSkpO3ZhciBpPWEuaW5zcGVjdCh0KTtyZXR1cm4gaS5sZW5ndGg+MTI4JiYoaT1cIlwiLmNvbmNhdChpLnNsaWNlKDAsMTI4KSxcIi4uLlwiKSksXCJUaGUgYXJndW1lbnQgJ1wiLmNvbmNhdChlLFwiJyBcIikuY29uY2F0KG4sXCIuIFJlY2VpdmVkIFwiKS5jb25jYXQoaSl9KSxUeXBlRXJyb3IsUmFuZ2VFcnJvciksZihcIkVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRVwiLChmdW5jdGlvbihlLHQscil7dmFyIGk7cmV0dXJuIGk9ciYmci5jb25zdHJ1Y3RvciYmci5jb25zdHJ1Y3Rvci5uYW1lP1wiaW5zdGFuY2Ugb2YgXCIuY29uY2F0KHIuY29uc3RydWN0b3IubmFtZSk6XCJ0eXBlIFwiLmNvbmNhdChuKHIpKSxcIkV4cGVjdGVkIFwiLmNvbmNhdChlLCcgdG8gYmUgcmV0dXJuZWQgZnJvbSB0aGUgXCInKS5jb25jYXQodCwnXCInKStcIiBmdW5jdGlvbiBidXQgZ290IFwiLmNvbmNhdChpLFwiLlwiKX0pLFR5cGVFcnJvciksZihcIkVSUl9NSVNTSU5HX0FSR1NcIiwoZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxuPTA7bjxlO24rKyl0W25dPWFyZ3VtZW50c1tuXTt2b2lkIDA9PT1zJiYocz1yKDkyODIpKSxzKHQubGVuZ3RoPjAsXCJBdCBsZWFzdCBvbmUgYXJnIG5lZWRzIHRvIGJlIHNwZWNpZmllZFwiKTt2YXIgaT1cIlRoZSBcIixvPXQubGVuZ3RoO3N3aXRjaCh0PXQubWFwKChmdW5jdGlvbihlKXtyZXR1cm4nXCInLmNvbmNhdChlLCdcIicpfSkpLG8pe2Nhc2UgMTppKz1cIlwiLmNvbmNhdCh0WzBdLFwiIGFyZ3VtZW50XCIpO2JyZWFrO2Nhc2UgMjppKz1cIlwiLmNvbmNhdCh0WzBdLFwiIGFuZCBcIikuY29uY2F0KHRbMV0sXCIgYXJndW1lbnRzXCIpO2JyZWFrO2RlZmF1bHQ6aSs9dC5zbGljZSgwLG8tMSkuam9pbihcIiwgXCIpLGkrPVwiLCBhbmQgXCIuY29uY2F0KHRbby0xXSxcIiBhcmd1bWVudHNcIil9cmV0dXJuXCJcIi5jb25jYXQoaSxcIiBtdXN0IGJlIHNwZWNpZmllZFwiKX0pLFR5cGVFcnJvciksZS5leHBvcnRzLmNvZGVzPWN9LDkxNTg6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZX0oZSl8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9W10sbj0hMCxpPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIHMsYT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKG49KHM9YS5uZXh0KCkpLmRvbmUpJiYoci5wdXNoKHMudmFsdWUpLCF0fHxyLmxlbmd0aCE9PXQpO249ITApO31jYXRjaChlKXtpPSEwLG89ZX1maW5hbGx5e3RyeXtufHxudWxsPT1hLnJldHVybnx8YS5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgb319cmV0dXJuIHJ9KGUsdCl8fGZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIil9KCl9ZnVuY3Rpb24gaShlKXtyZXR1cm4gaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxpKGUpfXZhciBvPXZvaWQgMCE9PS9hL2cuZmxhZ3Mscz1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gdC5wdXNoKGUpfSkpLHR9LGE9ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5wdXNoKFtyLGVdKX0pKSx0fSxjPU9iamVjdC5pcz9PYmplY3QuaXM6cig2MDkpLGY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzOmZ1bmN0aW9uKCl7cmV0dXJuW119LHU9TnVtYmVyLmlzTmFOP051bWJlci5pc05hTjpyKDM2MCk7ZnVuY3Rpb24gZChlKXtyZXR1cm4gZS5jYWxsLmJpbmQoZSl9dmFyIGg9ZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KSxsPWQoT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSkscD1kKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpLGI9cig5NTM5KS50eXBlcyx5PWIuaXNBbnlBcnJheUJ1ZmZlcixnPWIuaXNBcnJheUJ1ZmZlclZpZXcsbT1iLmlzRGF0ZSx2PWIuaXNNYXAsdz1iLmlzUmVnRXhwLF89Yi5pc1NldCxTPWIuaXNOYXRpdmVFcnJvcixFPWIuaXNCb3hlZFByaW1pdGl2ZSxBPWIuaXNOdW1iZXJPYmplY3QseD1iLmlzU3RyaW5nT2JqZWN0LGs9Yi5pc0Jvb2xlYW5PYmplY3QsUD1iLmlzQmlnSW50T2JqZWN0LE89Yi5pc1N5bWJvbE9iamVjdCxNPWIuaXNGbG9hdDMyQXJyYXksST1iLmlzRmxvYXQ2NEFycmF5O2Z1bmN0aW9uIFQoZSl7aWYoMD09PWUubGVuZ3RofHxlLmxlbmd0aD4xMClyZXR1cm4hMDtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIHI9ZS5jaGFyQ29kZUF0KHQpO2lmKHI8NDh8fHI+NTcpcmV0dXJuITB9cmV0dXJuIDEwPT09ZS5sZW5ndGgmJmU+PU1hdGgucG93KDIsMzIpfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZpbHRlcihUKS5jb25jYXQoZihlKS5maWx0ZXIoT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5iaW5kKGUpKSl9ZnVuY3Rpb24gTihlLHQpe2lmKGU9PT10KXJldHVybiAwO2Zvcih2YXIgcj1lLmxlbmd0aCxuPXQubGVuZ3RoLGk9MCxvPU1hdGgubWluKHIsbik7aTxvOysraSlpZihlW2ldIT09dFtpXSl7cj1lW2ldLG49dFtpXTticmVha31yZXR1cm4gcjxuPy0xOm48cj8xOjB9ZnVuY3Rpb24gQyhlLHQscixuKXtpZihlPT09dClyZXR1cm4gMCE9PWV8fCFyfHxjKGUsdCk7aWYocil7aWYoXCJvYmplY3RcIiE9PWkoZSkpcmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGUmJnUoZSkmJnUodCk7aWYoXCJvYmplY3RcIiE9PWkodCl8fG51bGw9PT1lfHxudWxsPT09dClyZXR1cm4hMTtpZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkhPT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpcmV0dXJuITF9ZWxzZXtpZihudWxsPT09ZXx8XCJvYmplY3RcIiE9PWkoZSkpcmV0dXJuKG51bGw9PT10fHxcIm9iamVjdFwiIT09aSh0KSkmJmU9PXQ7aWYobnVsbD09PXR8fFwib2JqZWN0XCIhPT1pKHQpKXJldHVybiExfXZhciBzLGEsZixkLGg9cChlKTtpZihoIT09cCh0KSlyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUpKXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO3ZhciBsPVIoZSksYj1SKHQpO3JldHVybiBsLmxlbmd0aD09PWIubGVuZ3RoJiZCKGUsdCxyLG4sMSxsKX1pZihcIltvYmplY3QgT2JqZWN0XVwiPT09aCYmKCF2KGUpJiZ2KHQpfHwhXyhlKSYmXyh0KSkpcmV0dXJuITE7aWYobShlKSl7aWYoIW0odCl8fERhdGUucHJvdG90eXBlLmdldFRpbWUuY2FsbChlKSE9PURhdGUucHJvdG90eXBlLmdldFRpbWUuY2FsbCh0KSlyZXR1cm4hMX1lbHNlIGlmKHcoZSkpe2lmKCF3KHQpfHwoZj1lLGQ9dCwhKG8/Zi5zb3VyY2U9PT1kLnNvdXJjZSYmZi5mbGFncz09PWQuZmxhZ3M6UmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGYpPT09UmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGQpKSkpcmV0dXJuITF9ZWxzZSBpZihTKGUpfHxlIGluc3RhbmNlb2YgRXJyb3Ipe2lmKGUubWVzc2FnZSE9PXQubWVzc2FnZXx8ZS5uYW1lIT09dC5uYW1lKXJldHVybiExfWVsc2V7aWYoZyhlKSl7aWYocnx8IU0oZSkmJiFJKGUpKXtpZighZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5ieXRlTGVuZ3RoPT09dC5ieXRlTGVuZ3RoJiYwPT09TihuZXcgVWludDhBcnJheShlLmJ1ZmZlcixlLmJ5dGVPZmZzZXQsZS5ieXRlTGVuZ3RoKSxuZXcgVWludDhBcnJheSh0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQsdC5ieXRlTGVuZ3RoKSl9KGUsdCkpcmV0dXJuITF9ZWxzZSBpZighZnVuY3Rpb24oZSx0KXtpZihlLmJ5dGVMZW5ndGghPT10LmJ5dGVMZW5ndGgpcmV0dXJuITE7Zm9yKHZhciByPTA7cjxlLmJ5dGVMZW5ndGg7cisrKWlmKGVbcl0hPT10W3JdKXJldHVybiExO3JldHVybiEwfShlLHQpKXJldHVybiExO3ZhciBUPVIoZSksQz1SKHQpO3JldHVybiBULmxlbmd0aD09PUMubGVuZ3RoJiZCKGUsdCxyLG4sMCxUKX1pZihfKGUpKXJldHVybiEoIV8odCl8fGUuc2l6ZSE9PXQuc2l6ZSkmJkIoZSx0LHIsbiwyKTtpZih2KGUpKXJldHVybiEoIXYodCl8fGUuc2l6ZSE9PXQuc2l6ZSkmJkIoZSx0LHIsbiwzKTtpZih5KGUpKXtpZihhPXQsKHM9ZSkuYnl0ZUxlbmd0aCE9PWEuYnl0ZUxlbmd0aHx8MCE9PU4obmV3IFVpbnQ4QXJyYXkocyksbmV3IFVpbnQ4QXJyYXkoYSkpKXJldHVybiExfWVsc2UgaWYoRShlKSYmIWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEEoZSk/QSh0KSYmYyhOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YuY2FsbChlKSxOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh0KSk6eChlKT94KHQpJiZTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YuY2FsbChlKT09PVN0cmluZy5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHQpOmsoZSk/ayh0KSYmQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKGUpPT09Qm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHQpOlAoZSk/UCh0KSYmQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoZSk9PT1CaWdJbnQucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh0KTpPKHQpJiZTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YuY2FsbChlKT09PVN5bWJvbC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHQpfShlLHQpKXJldHVybiExfXJldHVybiBCKGUsdCxyLG4sMCl9ZnVuY3Rpb24gaihlLHQpe3JldHVybiB0LmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIGwoZSx0KX0pKX1mdW5jdGlvbiBCKGUsdCxyLG4saSxvKXtpZig1PT09YXJndW1lbnRzLmxlbmd0aCl7bz1PYmplY3Qua2V5cyhlKTt2YXIgcz1PYmplY3Qua2V5cyh0KTtpZihvLmxlbmd0aCE9PXMubGVuZ3RoKXJldHVybiExfWZvcih2YXIgYT0wO2E8by5sZW5ndGg7YSsrKWlmKCFoKHQsb1thXSkpcmV0dXJuITE7aWYociYmNT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBjPWYoZSk7aWYoMCE9PWMubGVuZ3RoKXt2YXIgdT0wO2ZvcihhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07aWYobChlLGQpKXtpZighbCh0LGQpKXJldHVybiExO28ucHVzaChkKSx1Kyt9ZWxzZSBpZihsKHQsZCkpcmV0dXJuITF9dmFyIHA9Zih0KTtpZihjLmxlbmd0aCE9PXAubGVuZ3RoJiZqKHQscCkubGVuZ3RoIT09dSlyZXR1cm4hMX1lbHNle3ZhciBiPWYodCk7aWYoMCE9PWIubGVuZ3RoJiYwIT09aih0LGIpLmxlbmd0aClyZXR1cm4hMX19aWYoMD09PW8ubGVuZ3RoJiYoMD09PWl8fDE9PT1pJiYwPT09ZS5sZW5ndGh8fDA9PT1lLnNpemUpKXJldHVybiEwO2lmKHZvaWQgMD09PW4pbj17dmFsMTpuZXcgTWFwLHZhbDI6bmV3IE1hcCxwb3NpdGlvbjowfTtlbHNle3ZhciB5PW4udmFsMS5nZXQoZSk7aWYodm9pZCAwIT09eSl7dmFyIGc9bi52YWwyLmdldCh0KTtpZih2b2lkIDAhPT1nKXJldHVybiB5PT09Z31uLnBvc2l0aW9uKyt9bi52YWwxLnNldChlLG4ucG9zaXRpb24pLG4udmFsMi5zZXQodCxuLnBvc2l0aW9uKTt2YXIgbT1IKGUsdCxyLG8sbixpKTtyZXR1cm4gbi52YWwxLmRlbGV0ZShlKSxuLnZhbDIuZGVsZXRlKHQpLG19ZnVuY3Rpb24gTChlLHQscixuKXtmb3IodmFyIGk9cyhlKSxvPTA7bzxpLmxlbmd0aDtvKyspe3ZhciBhPWlbb107aWYoQyh0LGEscixuKSlyZXR1cm4gZS5kZWxldGUoYSksITB9cmV0dXJuITF9ZnVuY3Rpb24gRChlKXtzd2l0Y2goaShlKSl7Y2FzZVwidW5kZWZpbmVkXCI6cmV0dXJuIG51bGw7Y2FzZVwib2JqZWN0XCI6cmV0dXJuO2Nhc2VcInN5bWJvbFwiOnJldHVybiExO2Nhc2VcInN0cmluZ1wiOmU9K2U7Y2FzZVwibnVtYmVyXCI6aWYodShlKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBVKGUsdCxyKXt2YXIgbj1EKHIpO3JldHVybiBudWxsIT1uP246dC5oYXMobikmJiFlLmhhcyhuKX1mdW5jdGlvbiBxKGUsdCxyLG4saSl7dmFyIG89RChyKTtpZihudWxsIT1vKXJldHVybiBvO3ZhciBzPXQuZ2V0KG8pO3JldHVybiEodm9pZCAwPT09cyYmIXQuaGFzKG8pfHwhQyhuLHMsITEsaSkpJiYhZS5oYXMobykmJkMobixzLCExLGkpfWZ1bmN0aW9uIEYoZSx0LHIsbixpLG8pe2Zvcih2YXIgYT1zKGUpLGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGY9YVtjXTtpZihDKHIsZixpLG8pJiZDKG4sdC5nZXQoZiksaSxvKSlyZXR1cm4gZS5kZWxldGUoZiksITB9cmV0dXJuITF9ZnVuY3Rpb24gSChlLHQscixvLGMsZil7dmFyIHU9MDtpZigyPT09Zil7aWYoIWZ1bmN0aW9uKGUsdCxyLG4pe2Zvcih2YXIgbz1udWxsLGE9cyhlKSxjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBmPWFbY107aWYoXCJvYmplY3RcIj09PWkoZikmJm51bGwhPT1mKW51bGw9PT1vJiYobz1uZXcgU2V0KSxvLmFkZChmKTtlbHNlIGlmKCF0LmhhcyhmKSl7aWYocilyZXR1cm4hMTtpZighVShlLHQsZikpcmV0dXJuITE7bnVsbD09PW8mJihvPW5ldyBTZXQpLG8uYWRkKGYpfX1pZihudWxsIT09byl7Zm9yKHZhciB1PXModCksZD0wO2Q8dS5sZW5ndGg7ZCsrKXt2YXIgaD11W2RdO2lmKFwib2JqZWN0XCI9PT1pKGgpJiZudWxsIT09aCl7aWYoIUwobyxoLHIsbikpcmV0dXJuITF9ZWxzZSBpZighciYmIWUuaGFzKGgpJiYhTChvLGgscixuKSlyZXR1cm4hMX1yZXR1cm4gMD09PW8uc2l6ZX1yZXR1cm4hMH0oZSx0LHIsYykpcmV0dXJuITF9ZWxzZSBpZigzPT09Zil7aWYoIWZ1bmN0aW9uKGUsdCxyLG8pe2Zvcih2YXIgcz1udWxsLGM9YShlKSxmPTA7ZjxjLmxlbmd0aDtmKyspe3ZhciB1PW4oY1tmXSwyKSxkPXVbMF0saD11WzFdO2lmKFwib2JqZWN0XCI9PT1pKGQpJiZudWxsIT09ZCludWxsPT09cyYmKHM9bmV3IFNldCkscy5hZGQoZCk7ZWxzZXt2YXIgbD10LmdldChkKTtpZih2b2lkIDA9PT1sJiYhdC5oYXMoZCl8fCFDKGgsbCxyLG8pKXtpZihyKXJldHVybiExO2lmKCFxKGUsdCxkLGgsbykpcmV0dXJuITE7bnVsbD09PXMmJihzPW5ldyBTZXQpLHMuYWRkKGQpfX19aWYobnVsbCE9PXMpe2Zvcih2YXIgcD1hKHQpLGI9MDtiPHAubGVuZ3RoO2IrKyl7dmFyIHk9bihwW2JdLDIpLGc9KGQ9eVswXSx5WzFdKTtpZihcIm9iamVjdFwiPT09aShkKSYmbnVsbCE9PWQpe2lmKCFGKHMsZSxkLGcscixvKSlyZXR1cm4hMX1lbHNlIGlmKCEocnx8ZS5oYXMoZCkmJkMoZS5nZXQoZCksZywhMSxvKXx8RihzLGUsZCxnLCExLG8pKSlyZXR1cm4hMX1yZXR1cm4gMD09PXMuc2l6ZX1yZXR1cm4hMH0oZSx0LHIsYykpcmV0dXJuITF9ZWxzZSBpZigxPT09Zilmb3IoO3U8ZS5sZW5ndGg7dSsrKXtpZighaChlLHUpKXtpZihoKHQsdSkpcmV0dXJuITE7Zm9yKHZhciBkPU9iamVjdC5rZXlzKGUpO3U8ZC5sZW5ndGg7dSsrKXt2YXIgbD1kW3VdO2lmKCFoKHQsbCl8fCFDKGVbbF0sdFtsXSxyLGMpKXJldHVybiExfXJldHVybiBkLmxlbmd0aD09PU9iamVjdC5rZXlzKHQpLmxlbmd0aH1pZighaCh0LHUpfHwhQyhlW3VdLHRbdV0scixjKSlyZXR1cm4hMX1mb3IodT0wO3U8by5sZW5ndGg7dSsrKXt2YXIgcD1vW3VdO2lmKCFDKGVbcF0sdFtwXSxyLGMpKXJldHVybiExfXJldHVybiEwfWUuZXhwb3J0cz17aXNEZWVwRXF1YWw6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gQyhlLHQsITEpfSxpc0RlZXBTdHJpY3RFcXVhbDpmdW5jdGlvbihlLHQpe3JldHVybiBDKGUsdCwhMCl9fX0sOTc0MjooZSx0KT0+e1widXNlIHN0cmljdFwiO3QuYnl0ZUxlbmd0aD1mdW5jdGlvbihlKXt2YXIgdD1jKGUpLHI9dFswXSxuPXRbMV07cmV0dXJuIDMqKHIrbikvNC1ufSx0LnRvQnl0ZUFycmF5PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbz1jKGUpLHM9b1swXSxhPW9bMV0sZj1uZXcgaShmdW5jdGlvbihlLHQscil7cmV0dXJuIDMqKHQrcikvNC1yfSgwLHMsYSkpLHU9MCxkPWE+MD9zLTQ6cztmb3Iocj0wO3I8ZDtyKz00KXQ9bltlLmNoYXJDb2RlQXQocildPDwxOHxuW2UuY2hhckNvZGVBdChyKzEpXTw8MTJ8bltlLmNoYXJDb2RlQXQocisyKV08PDZ8bltlLmNoYXJDb2RlQXQociszKV0sZlt1KytdPXQ+PjE2JjI1NSxmW3UrK109dD4+OCYyNTUsZlt1KytdPTI1NSZ0O3JldHVybiAyPT09YSYmKHQ9bltlLmNoYXJDb2RlQXQocildPDwyfG5bZS5jaGFyQ29kZUF0KHIrMSldPj40LGZbdSsrXT0yNTUmdCksMT09PWEmJih0PW5bZS5jaGFyQ29kZUF0KHIpXTw8MTB8bltlLmNoYXJDb2RlQXQocisxKV08PDR8bltlLmNoYXJDb2RlQXQocisyKV0+PjIsZlt1KytdPXQ+PjgmMjU1LGZbdSsrXT0yNTUmdCksZn0sdC5mcm9tQnl0ZUFycmF5PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPWUubGVuZ3RoLGk9biUzLG89W10scz0xNjM4MyxhPTAsYz1uLWk7YTxjO2ErPXMpby5wdXNoKGYoZSxhLGErcz5jP2M6YStzKSk7cmV0dXJuIDE9PT1pPyh0PWVbbi0xXSxvLnB1c2goclt0Pj4yXStyW3Q8PDQmNjNdK1wiPT1cIikpOjI9PT1pJiYodD0oZVtuLTJdPDw4KStlW24tMV0sby5wdXNoKHJbdD4+MTBdK3JbdD4+NCY2M10rclt0PDwyJjYzXStcIj1cIikpLG8uam9pbihcIlwiKX07Zm9yKHZhciByPVtdLG49W10saT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheT9VaW50OEFycmF5OkFycmF5LG89XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIscz0wLGE9by5sZW5ndGg7czxhOysrcylyW3NdPW9bc10sbltvLmNoYXJDb2RlQXQocyldPXM7ZnVuY3Rpb24gYyhlKXt2YXIgdD1lLmxlbmd0aDtpZih0JTQ+MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0XCIpO3ZhciByPWUuaW5kZXhPZihcIj1cIik7cmV0dXJuLTE9PT1yJiYocj10KSxbcixyPT09dD8wOjQtciU0XX1mdW5jdGlvbiBmKGUsdCxuKXtmb3IodmFyIGksbyxzPVtdLGE9dDthPG47YSs9MylpPShlW2FdPDwxNiYxNjcxMTY4MCkrKGVbYSsxXTw8OCY2NTI4MCkrKDI1NSZlW2ErMl0pLHMucHVzaChyWyhvPWkpPj4xOCY2M10rcltvPj4xMiY2M10rcltvPj42JjYzXStyWzYzJm9dKTtyZXR1cm4gcy5qb2luKFwiXCIpfW5bXCItXCIuY2hhckNvZGVBdCgwKV09NjIsbltcIl9cIi5jaGFyQ29kZUF0KDApXT02M30sMjI0MDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4NzY0KS5CdWZmZXIsaT1yKDE1MTgpO2Z1bmN0aW9uIG8oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJ1dGY4XCIpLG4uaXNCdWZmZXIoZSk/YShlLnRvU3RyaW5nKFwiYmFzZTY0XCIpKTphKG4uZnJvbShlLHQpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKX1mdW5jdGlvbiBzKGUpe3JldHVybiBlPWUudG9TdHJpbmcoKSxpLmRlZmF1bHQoZSkucmVwbGFjZSgvXFwtL2csXCIrXCIpLnJlcGxhY2UoL18vZyxcIi9cIil9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZS5yZXBsYWNlKC89L2csXCJcIikucmVwbGFjZSgvXFwrL2csXCItXCIpLnJlcGxhY2UoL1xcLy9nLFwiX1wiKX12YXIgYz1vO2MuZW5jb2RlPW8sYy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJ1dGY4XCIpLG4uZnJvbShzKGUpLFwiYmFzZTY0XCIpLnRvU3RyaW5nKHQpfSxjLnRvQmFzZTY0PXMsYy5mcm9tQmFzZTY0PWEsYy50b0J1ZmZlcj1mdW5jdGlvbihlKXtyZXR1cm4gbi5mcm9tKHMoZSksXCJiYXNlNjRcIil9LHQuZGVmYXVsdD1jfSwxNTE4OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDg3NjQpLkJ1ZmZlcjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGgscj10JTQ7aWYoIXIpcmV0dXJuIGU7dmFyIGk9dCxvPTQtcixzPXQrbyxhPW4uYWxsb2Mocyk7Zm9yKGEud3JpdGUoZSk7by0tOylhLndyaXRlKFwiPVwiLGkrKyk7cmV0dXJuIGEudG9TdHJpbmcoKX19LDMzNjM6KGUsdCxyKT0+e2UuZXhwb3J0cz1yKDIyNDApLmRlZmF1bHQsZS5leHBvcnRzLmRlZmF1bHQ9ZS5leHBvcnRzfSwzNTUwOmZ1bmN0aW9uKGUsdCxyKXshZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKHR8fFwiQXNzZXJ0aW9uIGZhaWxlZFwiKX1mdW5jdGlvbiBpKGUsdCl7ZS5zdXBlcl89dDt2YXIgcj1mdW5jdGlvbigpe307ci5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IHIsZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZX1mdW5jdGlvbiBvKGUsdCxyKXtpZihvLmlzQk4oZSkpcmV0dXJuIGU7dGhpcy5uZWdhdGl2ZT0wLHRoaXMud29yZHM9bnVsbCx0aGlzLmxlbmd0aD0wLHRoaXMucmVkPW51bGwsbnVsbCE9PWUmJihcImxlXCIhPT10JiZcImJlXCIhPT10fHwocj10LHQ9MTApLHRoaXMuX2luaXQoZXx8MCx0fHwxMCxyfHxcImJlXCIpKX12YXIgcztcIm9iamVjdFwiPT10eXBlb2YgZT9lLmV4cG9ydHM9bzp0LkJOPW8sby5CTj1vLG8ud29yZFNpemU9MjY7dHJ5e3M9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmdm9pZCAwIT09d2luZG93LkJ1ZmZlcj93aW5kb3cuQnVmZmVyOnIoNjYwMSkuQnVmZmVyfWNhdGNoKGUpe31mdW5jdGlvbiBhKGUsdCl7dmFyIHI9ZS5jaGFyQ29kZUF0KHQpO3JldHVybiByPj00OCYmcjw9NTc/ci00ODpyPj02NSYmcjw9NzA/ci01NTpyPj05NyYmcjw9MTAyP3ItODc6dm9pZCBuKCExLFwiSW52YWxpZCBjaGFyYWN0ZXIgaW4gXCIrZSl9ZnVuY3Rpb24gYyhlLHQscil7dmFyIG49YShlLHIpO3JldHVybiByLTE+PXQmJihufD1hKGUsci0xKTw8NCksbn1mdW5jdGlvbiBmKGUsdCxyLGkpe2Zvcih2YXIgbz0wLHM9MCxhPU1hdGgubWluKGUubGVuZ3RoLHIpLGM9dDtjPGE7YysrKXt2YXIgZj1lLmNoYXJDb2RlQXQoYyktNDg7byo9aSxzPWY+PTQ5P2YtNDkrMTA6Zj49MTc/Zi0xNysxMDpmLG4oZj49MCYmczxpLFwiSW52YWxpZCBjaGFyYWN0ZXJcIiksbys9c31yZXR1cm4gb31mdW5jdGlvbiB1KGUsdCl7ZS53b3Jkcz10LndvcmRzLGUubGVuZ3RoPXQubGVuZ3RoLGUubmVnYXRpdmU9dC5uZWdhdGl2ZSxlLnJlZD10LnJlZH1pZihvLmlzQk49ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBvfHxudWxsIT09ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUuY29uc3RydWN0b3Iud29yZFNpemU9PT1vLndvcmRTaXplJiZBcnJheS5pc0FycmF5KGUud29yZHMpfSxvLm1heD1mdW5jdGlvbihlLHQpe3JldHVybiBlLmNtcCh0KT4wP2U6dH0sby5taW49ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jbXAodCk8MD9lOnR9LG8ucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKGUsdCxyKXtpZihcIm51bWJlclwiPT10eXBlb2YgZSlyZXR1cm4gdGhpcy5faW5pdE51bWJlcihlLHQscik7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpcmV0dXJuIHRoaXMuX2luaXRBcnJheShlLHQscik7XCJoZXhcIj09PXQmJih0PTE2KSxuKHQ9PT0oMHx0KSYmdD49MiYmdDw9MzYpO3ZhciBpPTA7XCItXCI9PT0oZT1lLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLFwiXCIpKVswXSYmKGkrKyx0aGlzLm5lZ2F0aXZlPTEpLGk8ZS5sZW5ndGgmJigxNj09PXQ/dGhpcy5fcGFyc2VIZXgoZSxpLHIpOih0aGlzLl9wYXJzZUJhc2UoZSx0LGkpLFwibGVcIj09PXImJnRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSx0LHIpKSl9LG8ucHJvdG90eXBlLl9pbml0TnVtYmVyPWZ1bmN0aW9uKGUsdCxyKXtlPDAmJih0aGlzLm5lZ2F0aXZlPTEsZT0tZSksZTw2NzEwODg2ND8odGhpcy53b3Jkcz1bNjcxMDg4NjMmZV0sdGhpcy5sZW5ndGg9MSk6ZTw0NTAzNTk5NjI3MzcwNDk2Pyh0aGlzLndvcmRzPVs2NzEwODg2MyZlLGUvNjcxMDg4NjQmNjcxMDg4NjNdLHRoaXMubGVuZ3RoPTIpOihuKGU8OTAwNzE5OTI1NDc0MDk5MiksdGhpcy53b3Jkcz1bNjcxMDg4NjMmZSxlLzY3MTA4ODY0JjY3MTA4ODYzLDFdLHRoaXMubGVuZ3RoPTMpLFwibGVcIj09PXImJnRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSx0LHIpfSxvLnByb3RvdHlwZS5faW5pdEFycmF5PWZ1bmN0aW9uKGUsdCxyKXtpZihuKFwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCksZS5sZW5ndGg8PTApcmV0dXJuIHRoaXMud29yZHM9WzBdLHRoaXMubGVuZ3RoPTEsdGhpczt0aGlzLmxlbmd0aD1NYXRoLmNlaWwoZS5sZW5ndGgvMyksdGhpcy53b3Jkcz1uZXcgQXJyYXkodGhpcy5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8dGhpcy5sZW5ndGg7aSsrKXRoaXMud29yZHNbaV09MDt2YXIgbyxzLGE9MDtpZihcImJlXCI9PT1yKWZvcihpPWUubGVuZ3RoLTEsbz0wO2k+PTA7aS09MylzPWVbaV18ZVtpLTFdPDw4fGVbaS0yXTw8MTYsdGhpcy53b3Jkc1tvXXw9czw8YSY2NzEwODg2Myx0aGlzLndvcmRzW28rMV09cz4+PjI2LWEmNjcxMDg4NjMsKGErPTI0KT49MjYmJihhLT0yNixvKyspO2Vsc2UgaWYoXCJsZVwiPT09cilmb3IoaT0wLG89MDtpPGUubGVuZ3RoO2krPTMpcz1lW2ldfGVbaSsxXTw8OHxlW2krMl08PDE2LHRoaXMud29yZHNbb118PXM8PGEmNjcxMDg4NjMsdGhpcy53b3Jkc1tvKzFdPXM+Pj4yNi1hJjY3MTA4ODYzLChhKz0yNCk+PTI2JiYoYS09MjYsbysrKTtyZXR1cm4gdGhpcy5fc3RyaXAoKX0sby5wcm90b3R5cGUuX3BhcnNlSGV4PWZ1bmN0aW9uKGUsdCxyKXt0aGlzLmxlbmd0aD1NYXRoLmNlaWwoKGUubGVuZ3RoLXQpLzYpLHRoaXMud29yZHM9bmV3IEFycmF5KHRoaXMubGVuZ3RoKTtmb3IodmFyIG49MDtuPHRoaXMubGVuZ3RoO24rKyl0aGlzLndvcmRzW25dPTA7dmFyIGksbz0wLHM9MDtpZihcImJlXCI9PT1yKWZvcihuPWUubGVuZ3RoLTE7bj49dDtuLT0yKWk9YyhlLHQsbik8PG8sdGhpcy53b3Jkc1tzXXw9NjcxMDg4NjMmaSxvPj0xOD8oby09MTgscys9MSx0aGlzLndvcmRzW3NdfD1pPj4+MjYpOm8rPTg7ZWxzZSBmb3Iobj0oZS5sZW5ndGgtdCklMj09MD90KzE6dDtuPGUubGVuZ3RoO24rPTIpaT1jKGUsdCxuKTw8byx0aGlzLndvcmRzW3NdfD02NzEwODg2MyZpLG8+PTE4PyhvLT0xOCxzKz0xLHRoaXMud29yZHNbc118PWk+Pj4yNik6bys9ODt0aGlzLl9zdHJpcCgpfSxvLnByb3RvdHlwZS5fcGFyc2VCYXNlPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLndvcmRzPVswXSx0aGlzLmxlbmd0aD0xO2Zvcih2YXIgbj0wLGk9MTtpPD02NzEwODg2MztpKj10KW4rKztuLS0saT1pL3R8MDtmb3IodmFyIG89ZS5sZW5ndGgtcixzPW8lbixhPU1hdGgubWluKG8sby1zKStyLGM9MCx1PXI7dTxhO3UrPW4pYz1mKGUsdSx1K24sdCksdGhpcy5pbXVsbihpKSx0aGlzLndvcmRzWzBdK2M8NjcxMDg4NjQ/dGhpcy53b3Jkc1swXSs9Yzp0aGlzLl9pYWRkbihjKTtpZigwIT09cyl7dmFyIGQ9MTtmb3IoYz1mKGUsdSxlLmxlbmd0aCx0KSx1PTA7dTxzO3UrKylkKj10O3RoaXMuaW11bG4oZCksdGhpcy53b3Jkc1swXStjPDY3MTA4ODY0P3RoaXMud29yZHNbMF0rPWM6dGhpcy5faWFkZG4oYyl9dGhpcy5fc3RyaXAoKX0sby5wcm90b3R5cGUuY29weT1mdW5jdGlvbihlKXtlLndvcmRzPW5ldyBBcnJheSh0aGlzLmxlbmd0aCk7Zm9yKHZhciB0PTA7dDx0aGlzLmxlbmd0aDt0KyspZS53b3Jkc1t0XT10aGlzLndvcmRzW3RdO2UubGVuZ3RoPXRoaXMubGVuZ3RoLGUubmVnYXRpdmU9dGhpcy5uZWdhdGl2ZSxlLnJlZD10aGlzLnJlZH0sby5wcm90b3R5cGUuX21vdmU9ZnVuY3Rpb24oZSl7dShlLHRoaXMpfSxvLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvKG51bGwpO3JldHVybiB0aGlzLmNvcHkoZSksZX0sby5wcm90b3R5cGUuX2V4cGFuZD1mdW5jdGlvbihlKXtmb3IoO3RoaXMubGVuZ3RoPGU7KXRoaXMud29yZHNbdGhpcy5sZW5ndGgrK109MDtyZXR1cm4gdGhpc30sby5wcm90b3R5cGUuX3N0cmlwPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLmxlbmd0aD4xJiYwPT09dGhpcy53b3Jkc1t0aGlzLmxlbmd0aC0xXTspdGhpcy5sZW5ndGgtLTtyZXR1cm4gdGhpcy5fbm9ybVNpZ24oKX0sby5wcm90b3R5cGUuX25vcm1TaWduPWZ1bmN0aW9uKCl7cmV0dXJuIDE9PT10aGlzLmxlbmd0aCYmMD09PXRoaXMud29yZHNbMF0mJih0aGlzLm5lZ2F0aXZlPTApLHRoaXN9LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbC5mb3IpdHJ5e28ucHJvdG90eXBlW1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKV09ZH1jYXRjaChlKXtvLnByb3RvdHlwZS5pbnNwZWN0PWR9ZWxzZSBvLnByb3RvdHlwZS5pbnNwZWN0PWQ7ZnVuY3Rpb24gZCgpe3JldHVybih0aGlzLnJlZD9cIjxCTi1SOiBcIjpcIjxCTjogXCIpK3RoaXMudG9TdHJpbmcoMTYpK1wiPlwifXZhciBoPVtcIlwiLFwiMFwiLFwiMDBcIixcIjAwMFwiLFwiMDAwMFwiLFwiMDAwMDBcIixcIjAwMDAwMFwiLFwiMDAwMDAwMFwiLFwiMDAwMDAwMDBcIixcIjAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiXSxsPVswLDAsMjUsMTYsMTIsMTEsMTAsOSw4LDgsNyw3LDcsNyw2LDYsNiw2LDYsNiw2LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDVdLHA9WzAsMCwzMzU1NDQzMiw0MzA0NjcyMSwxNjc3NzIxNiw0ODgyODEyNSw2MDQ2NjE3Niw0MDM1MzYwNywxNjc3NzIxNiw0MzA0NjcyMSwxZTcsMTk0ODcxNzEsMzU4MzE4MDgsNjI3NDg1MTcsNzUyOTUzNiwxMTM5MDYyNSwxNjc3NzIxNiwyNDEzNzU2OSwzNDAxMjIyNCw0NzA0NTg4MSw2NGU2LDQwODQxMDEsNTE1MzYzMiw2NDM2MzQzLDc5NjI2MjQsOTc2NTYyNSwxMTg4MTM3NiwxNDM0ODkwNywxNzIxMDM2OCwyMDUxMTE0OSwyNDNlNSwyODYyOTE1MSwzMzU1NDQzMiwzOTEzNTM5Myw0NTQzNTQyNCw1MjUyMTg3NSw2MDQ2NjE3Nl07ZnVuY3Rpb24gYihlLHQscil7ci5uZWdhdGl2ZT10Lm5lZ2F0aXZlXmUubmVnYXRpdmU7dmFyIG49ZS5sZW5ndGgrdC5sZW5ndGh8MDtyLmxlbmd0aD1uLG49bi0xfDA7dmFyIGk9MHxlLndvcmRzWzBdLG89MHx0LndvcmRzWzBdLHM9aSpvLGE9NjcxMDg4NjMmcyxjPXMvNjcxMDg4NjR8MDtyLndvcmRzWzBdPWE7Zm9yKHZhciBmPTE7ZjxuO2YrKyl7Zm9yKHZhciB1PWM+Pj4yNixkPTY3MTA4ODYzJmMsaD1NYXRoLm1pbihmLHQubGVuZ3RoLTEpLGw9TWF0aC5tYXgoMCxmLWUubGVuZ3RoKzEpO2w8PWg7bCsrKXt2YXIgcD1mLWx8MDt1Kz0ocz0oaT0wfGUud29yZHNbcF0pKihvPTB8dC53b3Jkc1tsXSkrZCkvNjcxMDg4NjR8MCxkPTY3MTA4ODYzJnN9ci53b3Jkc1tmXT0wfGQsYz0wfHV9cmV0dXJuIDAhPT1jP3Iud29yZHNbZl09MHxjOnIubGVuZ3RoLS0sci5fc3RyaXAoKX1vLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbihlLHQpe3ZhciByO2lmKHQ9MHx0fHwxLDE2PT09KGU9ZXx8MTApfHxcImhleFwiPT09ZSl7cj1cIlwiO2Zvcih2YXIgaT0wLG89MCxzPTA7czx0aGlzLmxlbmd0aDtzKyspe3ZhciBhPXRoaXMud29yZHNbc10sYz0oMTY3NzcyMTUmKGE8PGl8bykpLnRvU3RyaW5nKDE2KTtvPWE+Pj4yNC1pJjE2Nzc3MjE1LChpKz0yKT49MjYmJihpLT0yNixzLS0pLHI9MCE9PW98fHMhPT10aGlzLmxlbmd0aC0xP2hbNi1jLmxlbmd0aF0rYytyOmMrcn1mb3IoMCE9PW8mJihyPW8udG9TdHJpbmcoMTYpK3IpO3IubGVuZ3RoJXQhPTA7KXI9XCIwXCIrcjtyZXR1cm4gMCE9PXRoaXMubmVnYXRpdmUmJihyPVwiLVwiK3IpLHJ9aWYoZT09PSgwfGUpJiZlPj0yJiZlPD0zNil7dmFyIGY9bFtlXSx1PXBbZV07cj1cIlwiO3ZhciBkPXRoaXMuY2xvbmUoKTtmb3IoZC5uZWdhdGl2ZT0wOyFkLmlzWmVybygpOyl7dmFyIGI9ZC5tb2Rybih1KS50b1N0cmluZyhlKTtyPShkPWQuaWRpdm4odSkpLmlzWmVybygpP2IrcjpoW2YtYi5sZW5ndGhdK2Ircn1mb3IodGhpcy5pc1plcm8oKSYmKHI9XCIwXCIrcik7ci5sZW5ndGgldCE9MDspcj1cIjBcIityO3JldHVybiAwIT09dGhpcy5uZWdhdGl2ZSYmKHI9XCItXCIrcikscn1uKCExLFwiQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNlwiKX0sby5wcm90b3R5cGUudG9OdW1iZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLndvcmRzWzBdO3JldHVybiAyPT09dGhpcy5sZW5ndGg/ZSs9NjcxMDg4NjQqdGhpcy53b3Jkc1sxXTozPT09dGhpcy5sZW5ndGgmJjE9PT10aGlzLndvcmRzWzJdP2UrPTQ1MDM1OTk2MjczNzA0OTYrNjcxMDg4NjQqdGhpcy53b3Jkc1sxXTp0aGlzLmxlbmd0aD4yJiZuKCExLFwiTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzXCIpLDAhPT10aGlzLm5lZ2F0aXZlPy1lOmV9LG8ucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRvU3RyaW5nKDE2LDIpfSxzJiYoby5wcm90b3R5cGUudG9CdWZmZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy50b0FycmF5TGlrZShzLGUsdCl9KSxvLnByb3RvdHlwZS50b0FycmF5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksZSx0KX0sby5wcm90b3R5cGUudG9BcnJheUxpa2U9ZnVuY3Rpb24oZSx0LHIpe3RoaXMuX3N0cmlwKCk7dmFyIGk9dGhpcy5ieXRlTGVuZ3RoKCksbz1yfHxNYXRoLm1heCgxLGkpO24oaTw9byxcImJ5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGhcIiksbihvPjAsXCJSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDBcIik7dmFyIHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5hbGxvY1Vuc2FmZT9lLmFsbG9jVW5zYWZlKHQpOm5ldyBlKHQpfShlLG8pO3JldHVybiB0aGlzW1wiX3RvQXJyYXlMaWtlXCIrKFwibGVcIj09PXQ/XCJMRVwiOlwiQkVcIildKHMsaSksc30sby5wcm90b3R5cGUuX3RvQXJyYXlMaWtlTEU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MCxuPTAsaT0wLG89MDtpPHRoaXMubGVuZ3RoO2krKyl7dmFyIHM9dGhpcy53b3Jkc1tpXTw8b3xuO2VbcisrXT0yNTUmcyxyPGUubGVuZ3RoJiYoZVtyKytdPXM+PjgmMjU1KSxyPGUubGVuZ3RoJiYoZVtyKytdPXM+PjE2JjI1NSksNj09PW8/KHI8ZS5sZW5ndGgmJihlW3IrK109cz4+MjQmMjU1KSxuPTAsbz0wKToobj1zPj4+MjQsbys9Mil9aWYocjxlLmxlbmd0aClmb3IoZVtyKytdPW47cjxlLmxlbmd0aDspZVtyKytdPTB9LG8ucHJvdG90eXBlLl90b0FycmF5TGlrZUJFPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPWUubGVuZ3RoLTEsbj0wLGk9MCxvPTA7aTx0aGlzLmxlbmd0aDtpKyspe3ZhciBzPXRoaXMud29yZHNbaV08PG98bjtlW3ItLV09MjU1JnMscj49MCYmKGVbci0tXT1zPj44JjI1NSkscj49MCYmKGVbci0tXT1zPj4xNiYyNTUpLDY9PT1vPyhyPj0wJiYoZVtyLS1dPXM+PjI0JjI1NSksbj0wLG89MCk6KG49cz4+PjI0LG8rPTIpfWlmKHI+PTApZm9yKGVbci0tXT1uO3I+PTA7KWVbci0tXT0wfSxNYXRoLmNsejMyP28ucHJvdG90eXBlLl9jb3VudEJpdHM9ZnVuY3Rpb24oZSl7cmV0dXJuIDMyLU1hdGguY2x6MzIoZSl9Om8ucHJvdG90eXBlLl9jb3VudEJpdHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZSxyPTA7cmV0dXJuIHQ+PTQwOTYmJihyKz0xMyx0Pj4+PTEzKSx0Pj02NCYmKHIrPTcsdD4+Pj03KSx0Pj04JiYocis9NCx0Pj4+PTQpLHQ+PTImJihyKz0yLHQ+Pj49Mikscit0fSxvLnByb3RvdHlwZS5femVyb0JpdHM9ZnVuY3Rpb24oZSl7aWYoMD09PWUpcmV0dXJuIDI2O3ZhciB0PWUscj0wO3JldHVybiAwPT0oODE5MSZ0KSYmKHIrPTEzLHQ+Pj49MTMpLDA9PSgxMjcmdCkmJihyKz03LHQ+Pj49NyksMD09KDE1JnQpJiYocis9NCx0Pj4+PTQpLDA9PSgzJnQpJiYocis9Mix0Pj4+PTIpLDA9PSgxJnQpJiZyKysscn0sby5wcm90b3R5cGUuYml0TGVuZ3RoPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy53b3Jkc1t0aGlzLmxlbmd0aC0xXSx0PXRoaXMuX2NvdW50Qml0cyhlKTtyZXR1cm4gMjYqKHRoaXMubGVuZ3RoLTEpK3R9LG8ucHJvdG90eXBlLnplcm9CaXRzPWZ1bmN0aW9uKCl7aWYodGhpcy5pc1plcm8oKSlyZXR1cm4gMDtmb3IodmFyIGU9MCx0PTA7dDx0aGlzLmxlbmd0aDt0Kyspe3ZhciByPXRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbdF0pO2lmKGUrPXIsMjYhPT1yKWJyZWFrfXJldHVybiBlfSxvLnByb3RvdHlwZS5ieXRlTGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpLzgpfSxvLnByb3RvdHlwZS50b1R3b3M9ZnVuY3Rpb24oZSl7cmV0dXJuIDAhPT10aGlzLm5lZ2F0aXZlP3RoaXMuYWJzKCkuaW5vdG4oZSkuaWFkZG4oMSk6dGhpcy5jbG9uZSgpfSxvLnByb3RvdHlwZS5mcm9tVHdvcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50ZXN0bihlLTEpP3RoaXMubm90bihlKS5pYWRkbigxKS5pbmVnKCk6dGhpcy5jbG9uZSgpfSxvLnByb3RvdHlwZS5pc05lZz1mdW5jdGlvbigpe3JldHVybiAwIT09dGhpcy5uZWdhdGl2ZX0sby5wcm90b3R5cGUubmVnPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCl9LG8ucHJvdG90eXBlLmluZWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1plcm8oKXx8KHRoaXMubmVnYXRpdmVePTEpLHRoaXN9LG8ucHJvdG90eXBlLml1b3I9ZnVuY3Rpb24oZSl7Zm9yKDt0aGlzLmxlbmd0aDxlLmxlbmd0aDspdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXT0wO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXRoaXMud29yZHNbdF09dGhpcy53b3Jkc1t0XXxlLndvcmRzW3RdO3JldHVybiB0aGlzLl9zdHJpcCgpfSxvLnByb3RvdHlwZS5pb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oMD09KHRoaXMubmVnYXRpdmV8ZS5uZWdhdGl2ZSkpLHRoaXMuaXVvcihlKX0sby5wcm90b3R5cGUub3I9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMubGVuZ3RoPmUubGVuZ3RoP3RoaXMuY2xvbmUoKS5pb3IoZSk6ZS5jbG9uZSgpLmlvcih0aGlzKX0sby5wcm90b3R5cGUudW9yPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmxlbmd0aD5lLmxlbmd0aD90aGlzLmNsb25lKCkuaXVvcihlKTplLmNsb25lKCkuaXVvcih0aGlzKX0sby5wcm90b3R5cGUuaXVhbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ7dD10aGlzLmxlbmd0aD5lLmxlbmd0aD9lOnRoaXM7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53b3Jkc1tyXT10aGlzLndvcmRzW3JdJmUud29yZHNbcl07cmV0dXJuIHRoaXMubGVuZ3RoPXQubGVuZ3RoLHRoaXMuX3N0cmlwKCl9LG8ucHJvdG90eXBlLmlhbmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oMD09KHRoaXMubmVnYXRpdmV8ZS5uZWdhdGl2ZSkpLHRoaXMuaXVhbmQoZSl9LG8ucHJvdG90eXBlLmFuZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5sZW5ndGg+ZS5sZW5ndGg/dGhpcy5jbG9uZSgpLmlhbmQoZSk6ZS5jbG9uZSgpLmlhbmQodGhpcyl9LG8ucHJvdG90eXBlLnVhbmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMubGVuZ3RoPmUubGVuZ3RoP3RoaXMuY2xvbmUoKS5pdWFuZChlKTplLmNsb25lKCkuaXVhbmQodGhpcyl9LG8ucHJvdG90eXBlLml1eG9yPWZ1bmN0aW9uKGUpe3ZhciB0LHI7dGhpcy5sZW5ndGg+ZS5sZW5ndGg/KHQ9dGhpcyxyPWUpOih0PWUscj10aGlzKTtmb3IodmFyIG49MDtuPHIubGVuZ3RoO24rKyl0aGlzLndvcmRzW25dPXQud29yZHNbbl1eci53b3Jkc1tuXTtpZih0aGlzIT09dClmb3IoO248dC5sZW5ndGg7bisrKXRoaXMud29yZHNbbl09dC53b3Jkc1tuXTtyZXR1cm4gdGhpcy5sZW5ndGg9dC5sZW5ndGgsdGhpcy5fc3RyaXAoKX0sby5wcm90b3R5cGUuaXhvcj1mdW5jdGlvbihlKXtyZXR1cm4gbigwPT0odGhpcy5uZWdhdGl2ZXxlLm5lZ2F0aXZlKSksdGhpcy5pdXhvcihlKX0sby5wcm90b3R5cGUueG9yPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmxlbmd0aD5lLmxlbmd0aD90aGlzLmNsb25lKCkuaXhvcihlKTplLmNsb25lKCkuaXhvcih0aGlzKX0sby5wcm90b3R5cGUudXhvcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5sZW5ndGg+ZS5sZW5ndGg/dGhpcy5jbG9uZSgpLml1eG9yKGUpOmUuY2xvbmUoKS5pdXhvcih0aGlzKX0sby5wcm90b3R5cGUuaW5vdG49ZnVuY3Rpb24oZSl7bihcIm51bWJlclwiPT10eXBlb2YgZSYmZT49MCk7dmFyIHQ9MHxNYXRoLmNlaWwoZS8yNikscj1lJTI2O3RoaXMuX2V4cGFuZCh0KSxyPjAmJnQtLTtmb3IodmFyIGk9MDtpPHQ7aSsrKXRoaXMud29yZHNbaV09NjcxMDg4NjMmfnRoaXMud29yZHNbaV07cmV0dXJuIHI+MCYmKHRoaXMud29yZHNbaV09fnRoaXMud29yZHNbaV0mNjcxMDg4NjM+PjI2LXIpLHRoaXMuX3N0cmlwKCl9LG8ucHJvdG90eXBlLm5vdG49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pbm90bihlKX0sby5wcm90b3R5cGUuc2V0bj1mdW5jdGlvbihlLHQpe24oXCJudW1iZXJcIj09dHlwZW9mIGUmJmU+PTApO3ZhciByPWUvMjZ8MCxpPWUlMjY7cmV0dXJuIHRoaXMuX2V4cGFuZChyKzEpLHRoaXMud29yZHNbcl09dD90aGlzLndvcmRzW3JdfDE8PGk6dGhpcy53b3Jkc1tyXSZ+KDE8PGkpLHRoaXMuX3N0cmlwKCl9LG8ucHJvdG90eXBlLmlhZGQ9ZnVuY3Rpb24oZSl7dmFyIHQscixuO2lmKDAhPT10aGlzLm5lZ2F0aXZlJiYwPT09ZS5uZWdhdGl2ZSlyZXR1cm4gdGhpcy5uZWdhdGl2ZT0wLHQ9dGhpcy5pc3ViKGUpLHRoaXMubmVnYXRpdmVePTEsdGhpcy5fbm9ybVNpZ24oKTtpZigwPT09dGhpcy5uZWdhdGl2ZSYmMCE9PWUubmVnYXRpdmUpcmV0dXJuIGUubmVnYXRpdmU9MCx0PXRoaXMuaXN1YihlKSxlLm5lZ2F0aXZlPTEsdC5fbm9ybVNpZ24oKTt0aGlzLmxlbmd0aD5lLmxlbmd0aD8ocj10aGlzLG49ZSk6KHI9ZSxuPXRoaXMpO2Zvcih2YXIgaT0wLG89MDtvPG4ubGVuZ3RoO28rKyl0PSgwfHIud29yZHNbb10pKygwfG4ud29yZHNbb10pK2ksdGhpcy53b3Jkc1tvXT02NzEwODg2MyZ0LGk9dD4+PjI2O2Zvcig7MCE9PWkmJm88ci5sZW5ndGg7bysrKXQ9KDB8ci53b3Jkc1tvXSkraSx0aGlzLndvcmRzW29dPTY3MTA4ODYzJnQsaT10Pj4+MjY7aWYodGhpcy5sZW5ndGg9ci5sZW5ndGgsMCE9PWkpdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF09aSx0aGlzLmxlbmd0aCsrO2Vsc2UgaWYociE9PXRoaXMpZm9yKDtvPHIubGVuZ3RoO28rKyl0aGlzLndvcmRzW29dPXIud29yZHNbb107cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gMCE9PWUubmVnYXRpdmUmJjA9PT10aGlzLm5lZ2F0aXZlPyhlLm5lZ2F0aXZlPTAsdD10aGlzLnN1YihlKSxlLm5lZ2F0aXZlXj0xLHQpOjA9PT1lLm5lZ2F0aXZlJiYwIT09dGhpcy5uZWdhdGl2ZT8odGhpcy5uZWdhdGl2ZT0wLHQ9ZS5zdWIodGhpcyksdGhpcy5uZWdhdGl2ZT0xLHQpOnRoaXMubGVuZ3RoPmUubGVuZ3RoP3RoaXMuY2xvbmUoKS5pYWRkKGUpOmUuY2xvbmUoKS5pYWRkKHRoaXMpfSxvLnByb3RvdHlwZS5pc3ViPWZ1bmN0aW9uKGUpe2lmKDAhPT1lLm5lZ2F0aXZlKXtlLm5lZ2F0aXZlPTA7dmFyIHQ9dGhpcy5pYWRkKGUpO3JldHVybiBlLm5lZ2F0aXZlPTEsdC5fbm9ybVNpZ24oKX1pZigwIT09dGhpcy5uZWdhdGl2ZSlyZXR1cm4gdGhpcy5uZWdhdGl2ZT0wLHRoaXMuaWFkZChlKSx0aGlzLm5lZ2F0aXZlPTEsdGhpcy5fbm9ybVNpZ24oKTt2YXIgcixuLGk9dGhpcy5jbXAoZSk7aWYoMD09PWkpcmV0dXJuIHRoaXMubmVnYXRpdmU9MCx0aGlzLmxlbmd0aD0xLHRoaXMud29yZHNbMF09MCx0aGlzO2k+MD8ocj10aGlzLG49ZSk6KHI9ZSxuPXRoaXMpO2Zvcih2YXIgbz0wLHM9MDtzPG4ubGVuZ3RoO3MrKylvPSh0PSgwfHIud29yZHNbc10pLSgwfG4ud29yZHNbc10pK28pPj4yNix0aGlzLndvcmRzW3NdPTY3MTA4ODYzJnQ7Zm9yKDswIT09byYmczxyLmxlbmd0aDtzKyspbz0odD0oMHxyLndvcmRzW3NdKStvKT4+MjYsdGhpcy53b3Jkc1tzXT02NzEwODg2MyZ0O2lmKDA9PT1vJiZzPHIubGVuZ3RoJiZyIT09dGhpcylmb3IoO3M8ci5sZW5ndGg7cysrKXRoaXMud29yZHNbc109ci53b3Jkc1tzXTtyZXR1cm4gdGhpcy5sZW5ndGg9TWF0aC5tYXgodGhpcy5sZW5ndGgscyksciE9PXRoaXMmJih0aGlzLm5lZ2F0aXZlPTEpLHRoaXMuX3N0cmlwKCl9LG8ucHJvdG90eXBlLnN1Yj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIoZSl9O3ZhciB5PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG8scz1lLndvcmRzLGE9dC53b3JkcyxjPXIud29yZHMsZj0wLHU9MHxzWzBdLGQ9ODE5MSZ1LGg9dT4+PjEzLGw9MHxzWzFdLHA9ODE5MSZsLGI9bD4+PjEzLHk9MHxzWzJdLGc9ODE5MSZ5LG09eT4+PjEzLHY9MHxzWzNdLHc9ODE5MSZ2LF89dj4+PjEzLFM9MHxzWzRdLEU9ODE5MSZTLEE9Uz4+PjEzLHg9MHxzWzVdLGs9ODE5MSZ4LFA9eD4+PjEzLE89MHxzWzZdLE09ODE5MSZPLEk9Tz4+PjEzLFQ9MHxzWzddLFI9ODE5MSZULE49VD4+PjEzLEM9MHxzWzhdLGo9ODE5MSZDLEI9Qz4+PjEzLEw9MHxzWzldLEQ9ODE5MSZMLFU9TD4+PjEzLHE9MHxhWzBdLEY9ODE5MSZxLEg9cT4+PjEzLHo9MHxhWzFdLEs9ODE5MSZ6LFY9ej4+PjEzLEc9MHxhWzJdLFc9ODE5MSZHLFg9Rz4+PjEzLFk9MHxhWzNdLEo9ODE5MSZZLCQ9WT4+PjEzLFo9MHxhWzRdLFE9ODE5MSZaLGVlPVo+Pj4xMyx0ZT0wfGFbNV0scmU9ODE5MSZ0ZSxuZT10ZT4+PjEzLGllPTB8YVs2XSxvZT04MTkxJmllLHNlPWllPj4+MTMsYWU9MHxhWzddLGNlPTgxOTEmYWUsZmU9YWU+Pj4xMyx1ZT0wfGFbOF0sZGU9ODE5MSZ1ZSxoZT11ZT4+PjEzLGxlPTB8YVs5XSxwZT04MTkxJmxlLGJlPWxlPj4+MTM7ci5uZWdhdGl2ZT1lLm5lZ2F0aXZlXnQubmVnYXRpdmUsci5sZW5ndGg9MTk7dmFyIHllPShmKyhuPU1hdGguaW11bChkLEYpKXwwKSsoKDgxOTEmKGk9KGk9TWF0aC5pbXVsKGQsSCkpK01hdGguaW11bChoLEYpfDApKTw8MTMpfDA7Zj0oKG89TWF0aC5pbXVsKGgsSCkpKyhpPj4+MTMpfDApKyh5ZT4+PjI2KXwwLHllJj02NzEwODg2MyxuPU1hdGguaW11bChwLEYpLGk9KGk9TWF0aC5pbXVsKHAsSCkpK01hdGguaW11bChiLEYpfDAsbz1NYXRoLmltdWwoYixIKTt2YXIgZ2U9KGYrKG49bitNYXRoLmltdWwoZCxLKXwwKXwwKSsoKDgxOTEmKGk9KGk9aStNYXRoLmltdWwoZCxWKXwwKStNYXRoLmltdWwoaCxLKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKGgsVil8MCkrKGk+Pj4xMyl8MCkrKGdlPj4+MjYpfDAsZ2UmPTY3MTA4ODYzLG49TWF0aC5pbXVsKGcsRiksaT0oaT1NYXRoLmltdWwoZyxIKSkrTWF0aC5pbXVsKG0sRil8MCxvPU1hdGguaW11bChtLEgpLG49bitNYXRoLmltdWwocCxLKXwwLGk9KGk9aStNYXRoLmltdWwocCxWKXwwKStNYXRoLmltdWwoYixLKXwwLG89bytNYXRoLmltdWwoYixWKXwwO3ZhciBtZT0oZisobj1uK01hdGguaW11bChkLFcpfDApfDApKygoODE5MSYoaT0oaT1pK01hdGguaW11bChkLFgpfDApK01hdGguaW11bChoLFcpfDApKTw8MTMpfDA7Zj0oKG89bytNYXRoLmltdWwoaCxYKXwwKSsoaT4+PjEzKXwwKSsobWU+Pj4yNil8MCxtZSY9NjcxMDg4NjMsbj1NYXRoLmltdWwodyxGKSxpPShpPU1hdGguaW11bCh3LEgpKStNYXRoLmltdWwoXyxGKXwwLG89TWF0aC5pbXVsKF8sSCksbj1uK01hdGguaW11bChnLEspfDAsaT0oaT1pK01hdGguaW11bChnLFYpfDApK01hdGguaW11bChtLEspfDAsbz1vK01hdGguaW11bChtLFYpfDAsbj1uK01hdGguaW11bChwLFcpfDAsaT0oaT1pK01hdGguaW11bChwLFgpfDApK01hdGguaW11bChiLFcpfDAsbz1vK01hdGguaW11bChiLFgpfDA7dmFyIHZlPShmKyhuPW4rTWF0aC5pbXVsKGQsSil8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKGQsJCl8MCkrTWF0aC5pbXVsKGgsSil8MCkpPDwxMyl8MDtmPSgobz1vK01hdGguaW11bChoLCQpfDApKyhpPj4+MTMpfDApKyh2ZT4+PjI2KXwwLHZlJj02NzEwODg2MyxuPU1hdGguaW11bChFLEYpLGk9KGk9TWF0aC5pbXVsKEUsSCkpK01hdGguaW11bChBLEYpfDAsbz1NYXRoLmltdWwoQSxIKSxuPW4rTWF0aC5pbXVsKHcsSyl8MCxpPShpPWkrTWF0aC5pbXVsKHcsVil8MCkrTWF0aC5pbXVsKF8sSyl8MCxvPW8rTWF0aC5pbXVsKF8sVil8MCxuPW4rTWF0aC5pbXVsKGcsVyl8MCxpPShpPWkrTWF0aC5pbXVsKGcsWCl8MCkrTWF0aC5pbXVsKG0sVyl8MCxvPW8rTWF0aC5pbXVsKG0sWCl8MCxuPW4rTWF0aC5pbXVsKHAsSil8MCxpPShpPWkrTWF0aC5pbXVsKHAsJCl8MCkrTWF0aC5pbXVsKGIsSil8MCxvPW8rTWF0aC5pbXVsKGIsJCl8MDt2YXIgd2U9KGYrKG49bitNYXRoLmltdWwoZCxRKXwwKXwwKSsoKDgxOTEmKGk9KGk9aStNYXRoLmltdWwoZCxlZSl8MCkrTWF0aC5pbXVsKGgsUSl8MCkpPDwxMyl8MDtmPSgobz1vK01hdGguaW11bChoLGVlKXwwKSsoaT4+PjEzKXwwKSsod2U+Pj4yNil8MCx3ZSY9NjcxMDg4NjMsbj1NYXRoLmltdWwoayxGKSxpPShpPU1hdGguaW11bChrLEgpKStNYXRoLmltdWwoUCxGKXwwLG89TWF0aC5pbXVsKFAsSCksbj1uK01hdGguaW11bChFLEspfDAsaT0oaT1pK01hdGguaW11bChFLFYpfDApK01hdGguaW11bChBLEspfDAsbz1vK01hdGguaW11bChBLFYpfDAsbj1uK01hdGguaW11bCh3LFcpfDAsaT0oaT1pK01hdGguaW11bCh3LFgpfDApK01hdGguaW11bChfLFcpfDAsbz1vK01hdGguaW11bChfLFgpfDAsbj1uK01hdGguaW11bChnLEopfDAsaT0oaT1pK01hdGguaW11bChnLCQpfDApK01hdGguaW11bChtLEopfDAsbz1vK01hdGguaW11bChtLCQpfDAsbj1uK01hdGguaW11bChwLFEpfDAsaT0oaT1pK01hdGguaW11bChwLGVlKXwwKStNYXRoLmltdWwoYixRKXwwLG89bytNYXRoLmltdWwoYixlZSl8MDt2YXIgX2U9KGYrKG49bitNYXRoLmltdWwoZCxyZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKGQsbmUpfDApK01hdGguaW11bChoLHJlKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKGgsbmUpfDApKyhpPj4+MTMpfDApKyhfZT4+PjI2KXwwLF9lJj02NzEwODg2MyxuPU1hdGguaW11bChNLEYpLGk9KGk9TWF0aC5pbXVsKE0sSCkpK01hdGguaW11bChJLEYpfDAsbz1NYXRoLmltdWwoSSxIKSxuPW4rTWF0aC5pbXVsKGssSyl8MCxpPShpPWkrTWF0aC5pbXVsKGssVil8MCkrTWF0aC5pbXVsKFAsSyl8MCxvPW8rTWF0aC5pbXVsKFAsVil8MCxuPW4rTWF0aC5pbXVsKEUsVyl8MCxpPShpPWkrTWF0aC5pbXVsKEUsWCl8MCkrTWF0aC5pbXVsKEEsVyl8MCxvPW8rTWF0aC5pbXVsKEEsWCl8MCxuPW4rTWF0aC5pbXVsKHcsSil8MCxpPShpPWkrTWF0aC5pbXVsKHcsJCl8MCkrTWF0aC5pbXVsKF8sSil8MCxvPW8rTWF0aC5pbXVsKF8sJCl8MCxuPW4rTWF0aC5pbXVsKGcsUSl8MCxpPShpPWkrTWF0aC5pbXVsKGcsZWUpfDApK01hdGguaW11bChtLFEpfDAsbz1vK01hdGguaW11bChtLGVlKXwwLG49bitNYXRoLmltdWwocCxyZSl8MCxpPShpPWkrTWF0aC5pbXVsKHAsbmUpfDApK01hdGguaW11bChiLHJlKXwwLG89bytNYXRoLmltdWwoYixuZSl8MDt2YXIgU2U9KGYrKG49bitNYXRoLmltdWwoZCxvZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKGQsc2UpfDApK01hdGguaW11bChoLG9lKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKGgsc2UpfDApKyhpPj4+MTMpfDApKyhTZT4+PjI2KXwwLFNlJj02NzEwODg2MyxuPU1hdGguaW11bChSLEYpLGk9KGk9TWF0aC5pbXVsKFIsSCkpK01hdGguaW11bChOLEYpfDAsbz1NYXRoLmltdWwoTixIKSxuPW4rTWF0aC5pbXVsKE0sSyl8MCxpPShpPWkrTWF0aC5pbXVsKE0sVil8MCkrTWF0aC5pbXVsKEksSyl8MCxvPW8rTWF0aC5pbXVsKEksVil8MCxuPW4rTWF0aC5pbXVsKGssVyl8MCxpPShpPWkrTWF0aC5pbXVsKGssWCl8MCkrTWF0aC5pbXVsKFAsVyl8MCxvPW8rTWF0aC5pbXVsKFAsWCl8MCxuPW4rTWF0aC5pbXVsKEUsSil8MCxpPShpPWkrTWF0aC5pbXVsKEUsJCl8MCkrTWF0aC5pbXVsKEEsSil8MCxvPW8rTWF0aC5pbXVsKEEsJCl8MCxuPW4rTWF0aC5pbXVsKHcsUSl8MCxpPShpPWkrTWF0aC5pbXVsKHcsZWUpfDApK01hdGguaW11bChfLFEpfDAsbz1vK01hdGguaW11bChfLGVlKXwwLG49bitNYXRoLmltdWwoZyxyZSl8MCxpPShpPWkrTWF0aC5pbXVsKGcsbmUpfDApK01hdGguaW11bChtLHJlKXwwLG89bytNYXRoLmltdWwobSxuZSl8MCxuPW4rTWF0aC5pbXVsKHAsb2UpfDAsaT0oaT1pK01hdGguaW11bChwLHNlKXwwKStNYXRoLmltdWwoYixvZSl8MCxvPW8rTWF0aC5pbXVsKGIsc2UpfDA7dmFyIEVlPShmKyhuPW4rTWF0aC5pbXVsKGQsY2UpfDApfDApKygoODE5MSYoaT0oaT1pK01hdGguaW11bChkLGZlKXwwKStNYXRoLmltdWwoaCxjZSl8MCkpPDwxMyl8MDtmPSgobz1vK01hdGguaW11bChoLGZlKXwwKSsoaT4+PjEzKXwwKSsoRWU+Pj4yNil8MCxFZSY9NjcxMDg4NjMsbj1NYXRoLmltdWwoaixGKSxpPShpPU1hdGguaW11bChqLEgpKStNYXRoLmltdWwoQixGKXwwLG89TWF0aC5pbXVsKEIsSCksbj1uK01hdGguaW11bChSLEspfDAsaT0oaT1pK01hdGguaW11bChSLFYpfDApK01hdGguaW11bChOLEspfDAsbz1vK01hdGguaW11bChOLFYpfDAsbj1uK01hdGguaW11bChNLFcpfDAsaT0oaT1pK01hdGguaW11bChNLFgpfDApK01hdGguaW11bChJLFcpfDAsbz1vK01hdGguaW11bChJLFgpfDAsbj1uK01hdGguaW11bChrLEopfDAsaT0oaT1pK01hdGguaW11bChrLCQpfDApK01hdGguaW11bChQLEopfDAsbz1vK01hdGguaW11bChQLCQpfDAsbj1uK01hdGguaW11bChFLFEpfDAsaT0oaT1pK01hdGguaW11bChFLGVlKXwwKStNYXRoLmltdWwoQSxRKXwwLG89bytNYXRoLmltdWwoQSxlZSl8MCxuPW4rTWF0aC5pbXVsKHcscmUpfDAsaT0oaT1pK01hdGguaW11bCh3LG5lKXwwKStNYXRoLmltdWwoXyxyZSl8MCxvPW8rTWF0aC5pbXVsKF8sbmUpfDAsbj1uK01hdGguaW11bChnLG9lKXwwLGk9KGk9aStNYXRoLmltdWwoZyxzZSl8MCkrTWF0aC5pbXVsKG0sb2UpfDAsbz1vK01hdGguaW11bChtLHNlKXwwLG49bitNYXRoLmltdWwocCxjZSl8MCxpPShpPWkrTWF0aC5pbXVsKHAsZmUpfDApK01hdGguaW11bChiLGNlKXwwLG89bytNYXRoLmltdWwoYixmZSl8MDt2YXIgQWU9KGYrKG49bitNYXRoLmltdWwoZCxkZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKGQsaGUpfDApK01hdGguaW11bChoLGRlKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKGgsaGUpfDApKyhpPj4+MTMpfDApKyhBZT4+PjI2KXwwLEFlJj02NzEwODg2MyxuPU1hdGguaW11bChELEYpLGk9KGk9TWF0aC5pbXVsKEQsSCkpK01hdGguaW11bChVLEYpfDAsbz1NYXRoLmltdWwoVSxIKSxuPW4rTWF0aC5pbXVsKGosSyl8MCxpPShpPWkrTWF0aC5pbXVsKGosVil8MCkrTWF0aC5pbXVsKEIsSyl8MCxvPW8rTWF0aC5pbXVsKEIsVil8MCxuPW4rTWF0aC5pbXVsKFIsVyl8MCxpPShpPWkrTWF0aC5pbXVsKFIsWCl8MCkrTWF0aC5pbXVsKE4sVyl8MCxvPW8rTWF0aC5pbXVsKE4sWCl8MCxuPW4rTWF0aC5pbXVsKE0sSil8MCxpPShpPWkrTWF0aC5pbXVsKE0sJCl8MCkrTWF0aC5pbXVsKEksSil8MCxvPW8rTWF0aC5pbXVsKEksJCl8MCxuPW4rTWF0aC5pbXVsKGssUSl8MCxpPShpPWkrTWF0aC5pbXVsKGssZWUpfDApK01hdGguaW11bChQLFEpfDAsbz1vK01hdGguaW11bChQLGVlKXwwLG49bitNYXRoLmltdWwoRSxyZSl8MCxpPShpPWkrTWF0aC5pbXVsKEUsbmUpfDApK01hdGguaW11bChBLHJlKXwwLG89bytNYXRoLmltdWwoQSxuZSl8MCxuPW4rTWF0aC5pbXVsKHcsb2UpfDAsaT0oaT1pK01hdGguaW11bCh3LHNlKXwwKStNYXRoLmltdWwoXyxvZSl8MCxvPW8rTWF0aC5pbXVsKF8sc2UpfDAsbj1uK01hdGguaW11bChnLGNlKXwwLGk9KGk9aStNYXRoLmltdWwoZyxmZSl8MCkrTWF0aC5pbXVsKG0sY2UpfDAsbz1vK01hdGguaW11bChtLGZlKXwwLG49bitNYXRoLmltdWwocCxkZSl8MCxpPShpPWkrTWF0aC5pbXVsKHAsaGUpfDApK01hdGguaW11bChiLGRlKXwwLG89bytNYXRoLmltdWwoYixoZSl8MDt2YXIgeGU9KGYrKG49bitNYXRoLmltdWwoZCxwZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKGQsYmUpfDApK01hdGguaW11bChoLHBlKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKGgsYmUpfDApKyhpPj4+MTMpfDApKyh4ZT4+PjI2KXwwLHhlJj02NzEwODg2MyxuPU1hdGguaW11bChELEspLGk9KGk9TWF0aC5pbXVsKEQsVikpK01hdGguaW11bChVLEspfDAsbz1NYXRoLmltdWwoVSxWKSxuPW4rTWF0aC5pbXVsKGosVyl8MCxpPShpPWkrTWF0aC5pbXVsKGosWCl8MCkrTWF0aC5pbXVsKEIsVyl8MCxvPW8rTWF0aC5pbXVsKEIsWCl8MCxuPW4rTWF0aC5pbXVsKFIsSil8MCxpPShpPWkrTWF0aC5pbXVsKFIsJCl8MCkrTWF0aC5pbXVsKE4sSil8MCxvPW8rTWF0aC5pbXVsKE4sJCl8MCxuPW4rTWF0aC5pbXVsKE0sUSl8MCxpPShpPWkrTWF0aC5pbXVsKE0sZWUpfDApK01hdGguaW11bChJLFEpfDAsbz1vK01hdGguaW11bChJLGVlKXwwLG49bitNYXRoLmltdWwoayxyZSl8MCxpPShpPWkrTWF0aC5pbXVsKGssbmUpfDApK01hdGguaW11bChQLHJlKXwwLG89bytNYXRoLmltdWwoUCxuZSl8MCxuPW4rTWF0aC5pbXVsKEUsb2UpfDAsaT0oaT1pK01hdGguaW11bChFLHNlKXwwKStNYXRoLmltdWwoQSxvZSl8MCxvPW8rTWF0aC5pbXVsKEEsc2UpfDAsbj1uK01hdGguaW11bCh3LGNlKXwwLGk9KGk9aStNYXRoLmltdWwodyxmZSl8MCkrTWF0aC5pbXVsKF8sY2UpfDAsbz1vK01hdGguaW11bChfLGZlKXwwLG49bitNYXRoLmltdWwoZyxkZSl8MCxpPShpPWkrTWF0aC5pbXVsKGcsaGUpfDApK01hdGguaW11bChtLGRlKXwwLG89bytNYXRoLmltdWwobSxoZSl8MDt2YXIga2U9KGYrKG49bitNYXRoLmltdWwocCxwZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKHAsYmUpfDApK01hdGguaW11bChiLHBlKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKGIsYmUpfDApKyhpPj4+MTMpfDApKyhrZT4+PjI2KXwwLGtlJj02NzEwODg2MyxuPU1hdGguaW11bChELFcpLGk9KGk9TWF0aC5pbXVsKEQsWCkpK01hdGguaW11bChVLFcpfDAsbz1NYXRoLmltdWwoVSxYKSxuPW4rTWF0aC5pbXVsKGosSil8MCxpPShpPWkrTWF0aC5pbXVsKGosJCl8MCkrTWF0aC5pbXVsKEIsSil8MCxvPW8rTWF0aC5pbXVsKEIsJCl8MCxuPW4rTWF0aC5pbXVsKFIsUSl8MCxpPShpPWkrTWF0aC5pbXVsKFIsZWUpfDApK01hdGguaW11bChOLFEpfDAsbz1vK01hdGguaW11bChOLGVlKXwwLG49bitNYXRoLmltdWwoTSxyZSl8MCxpPShpPWkrTWF0aC5pbXVsKE0sbmUpfDApK01hdGguaW11bChJLHJlKXwwLG89bytNYXRoLmltdWwoSSxuZSl8MCxuPW4rTWF0aC5pbXVsKGssb2UpfDAsaT0oaT1pK01hdGguaW11bChrLHNlKXwwKStNYXRoLmltdWwoUCxvZSl8MCxvPW8rTWF0aC5pbXVsKFAsc2UpfDAsbj1uK01hdGguaW11bChFLGNlKXwwLGk9KGk9aStNYXRoLmltdWwoRSxmZSl8MCkrTWF0aC5pbXVsKEEsY2UpfDAsbz1vK01hdGguaW11bChBLGZlKXwwLG49bitNYXRoLmltdWwodyxkZSl8MCxpPShpPWkrTWF0aC5pbXVsKHcsaGUpfDApK01hdGguaW11bChfLGRlKXwwLG89bytNYXRoLmltdWwoXyxoZSl8MDt2YXIgUGU9KGYrKG49bitNYXRoLmltdWwoZyxwZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKGcsYmUpfDApK01hdGguaW11bChtLHBlKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKG0sYmUpfDApKyhpPj4+MTMpfDApKyhQZT4+PjI2KXwwLFBlJj02NzEwODg2MyxuPU1hdGguaW11bChELEopLGk9KGk9TWF0aC5pbXVsKEQsJCkpK01hdGguaW11bChVLEopfDAsbz1NYXRoLmltdWwoVSwkKSxuPW4rTWF0aC5pbXVsKGosUSl8MCxpPShpPWkrTWF0aC5pbXVsKGosZWUpfDApK01hdGguaW11bChCLFEpfDAsbz1vK01hdGguaW11bChCLGVlKXwwLG49bitNYXRoLmltdWwoUixyZSl8MCxpPShpPWkrTWF0aC5pbXVsKFIsbmUpfDApK01hdGguaW11bChOLHJlKXwwLG89bytNYXRoLmltdWwoTixuZSl8MCxuPW4rTWF0aC5pbXVsKE0sb2UpfDAsaT0oaT1pK01hdGguaW11bChNLHNlKXwwKStNYXRoLmltdWwoSSxvZSl8MCxvPW8rTWF0aC5pbXVsKEksc2UpfDAsbj1uK01hdGguaW11bChrLGNlKXwwLGk9KGk9aStNYXRoLmltdWwoayxmZSl8MCkrTWF0aC5pbXVsKFAsY2UpfDAsbz1vK01hdGguaW11bChQLGZlKXwwLG49bitNYXRoLmltdWwoRSxkZSl8MCxpPShpPWkrTWF0aC5pbXVsKEUsaGUpfDApK01hdGguaW11bChBLGRlKXwwLG89bytNYXRoLmltdWwoQSxoZSl8MDt2YXIgT2U9KGYrKG49bitNYXRoLmltdWwodyxwZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKHcsYmUpfDApK01hdGguaW11bChfLHBlKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKF8sYmUpfDApKyhpPj4+MTMpfDApKyhPZT4+PjI2KXwwLE9lJj02NzEwODg2MyxuPU1hdGguaW11bChELFEpLGk9KGk9TWF0aC5pbXVsKEQsZWUpKStNYXRoLmltdWwoVSxRKXwwLG89TWF0aC5pbXVsKFUsZWUpLG49bitNYXRoLmltdWwoaixyZSl8MCxpPShpPWkrTWF0aC5pbXVsKGosbmUpfDApK01hdGguaW11bChCLHJlKXwwLG89bytNYXRoLmltdWwoQixuZSl8MCxuPW4rTWF0aC5pbXVsKFIsb2UpfDAsaT0oaT1pK01hdGguaW11bChSLHNlKXwwKStNYXRoLmltdWwoTixvZSl8MCxvPW8rTWF0aC5pbXVsKE4sc2UpfDAsbj1uK01hdGguaW11bChNLGNlKXwwLGk9KGk9aStNYXRoLmltdWwoTSxmZSl8MCkrTWF0aC5pbXVsKEksY2UpfDAsbz1vK01hdGguaW11bChJLGZlKXwwLG49bitNYXRoLmltdWwoayxkZSl8MCxpPShpPWkrTWF0aC5pbXVsKGssaGUpfDApK01hdGguaW11bChQLGRlKXwwLG89bytNYXRoLmltdWwoUCxoZSl8MDt2YXIgTWU9KGYrKG49bitNYXRoLmltdWwoRSxwZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKEUsYmUpfDApK01hdGguaW11bChBLHBlKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKEEsYmUpfDApKyhpPj4+MTMpfDApKyhNZT4+PjI2KXwwLE1lJj02NzEwODg2MyxuPU1hdGguaW11bChELHJlKSxpPShpPU1hdGguaW11bChELG5lKSkrTWF0aC5pbXVsKFUscmUpfDAsbz1NYXRoLmltdWwoVSxuZSksbj1uK01hdGguaW11bChqLG9lKXwwLGk9KGk9aStNYXRoLmltdWwoaixzZSl8MCkrTWF0aC5pbXVsKEIsb2UpfDAsbz1vK01hdGguaW11bChCLHNlKXwwLG49bitNYXRoLmltdWwoUixjZSl8MCxpPShpPWkrTWF0aC5pbXVsKFIsZmUpfDApK01hdGguaW11bChOLGNlKXwwLG89bytNYXRoLmltdWwoTixmZSl8MCxuPW4rTWF0aC5pbXVsKE0sZGUpfDAsaT0oaT1pK01hdGguaW11bChNLGhlKXwwKStNYXRoLmltdWwoSSxkZSl8MCxvPW8rTWF0aC5pbXVsKEksaGUpfDA7dmFyIEllPShmKyhuPW4rTWF0aC5pbXVsKGsscGUpfDApfDApKygoODE5MSYoaT0oaT1pK01hdGguaW11bChrLGJlKXwwKStNYXRoLmltdWwoUCxwZSl8MCkpPDwxMyl8MDtmPSgobz1vK01hdGguaW11bChQLGJlKXwwKSsoaT4+PjEzKXwwKSsoSWU+Pj4yNil8MCxJZSY9NjcxMDg4NjMsbj1NYXRoLmltdWwoRCxvZSksaT0oaT1NYXRoLmltdWwoRCxzZSkpK01hdGguaW11bChVLG9lKXwwLG89TWF0aC5pbXVsKFUsc2UpLG49bitNYXRoLmltdWwoaixjZSl8MCxpPShpPWkrTWF0aC5pbXVsKGosZmUpfDApK01hdGguaW11bChCLGNlKXwwLG89bytNYXRoLmltdWwoQixmZSl8MCxuPW4rTWF0aC5pbXVsKFIsZGUpfDAsaT0oaT1pK01hdGguaW11bChSLGhlKXwwKStNYXRoLmltdWwoTixkZSl8MCxvPW8rTWF0aC5pbXVsKE4saGUpfDA7dmFyIFRlPShmKyhuPW4rTWF0aC5pbXVsKE0scGUpfDApfDApKygoODE5MSYoaT0oaT1pK01hdGguaW11bChNLGJlKXwwKStNYXRoLmltdWwoSSxwZSl8MCkpPDwxMyl8MDtmPSgobz1vK01hdGguaW11bChJLGJlKXwwKSsoaT4+PjEzKXwwKSsoVGU+Pj4yNil8MCxUZSY9NjcxMDg4NjMsbj1NYXRoLmltdWwoRCxjZSksaT0oaT1NYXRoLmltdWwoRCxmZSkpK01hdGguaW11bChVLGNlKXwwLG89TWF0aC5pbXVsKFUsZmUpLG49bitNYXRoLmltdWwoaixkZSl8MCxpPShpPWkrTWF0aC5pbXVsKGosaGUpfDApK01hdGguaW11bChCLGRlKXwwLG89bytNYXRoLmltdWwoQixoZSl8MDt2YXIgUmU9KGYrKG49bitNYXRoLmltdWwoUixwZSl8MCl8MCkrKCg4MTkxJihpPShpPWkrTWF0aC5pbXVsKFIsYmUpfDApK01hdGguaW11bChOLHBlKXwwKSk8PDEzKXwwO2Y9KChvPW8rTWF0aC5pbXVsKE4sYmUpfDApKyhpPj4+MTMpfDApKyhSZT4+PjI2KXwwLFJlJj02NzEwODg2MyxuPU1hdGguaW11bChELGRlKSxpPShpPU1hdGguaW11bChELGhlKSkrTWF0aC5pbXVsKFUsZGUpfDAsbz1NYXRoLmltdWwoVSxoZSk7dmFyIE5lPShmKyhuPW4rTWF0aC5pbXVsKGoscGUpfDApfDApKygoODE5MSYoaT0oaT1pK01hdGguaW11bChqLGJlKXwwKStNYXRoLmltdWwoQixwZSl8MCkpPDwxMyl8MDtmPSgobz1vK01hdGguaW11bChCLGJlKXwwKSsoaT4+PjEzKXwwKSsoTmU+Pj4yNil8MCxOZSY9NjcxMDg4NjM7dmFyIENlPShmKyhuPU1hdGguaW11bChELHBlKSl8MCkrKCg4MTkxJihpPShpPU1hdGguaW11bChELGJlKSkrTWF0aC5pbXVsKFUscGUpfDApKTw8MTMpfDA7cmV0dXJuIGY9KChvPU1hdGguaW11bChVLGJlKSkrKGk+Pj4xMyl8MCkrKENlPj4+MjYpfDAsQ2UmPTY3MTA4ODYzLGNbMF09eWUsY1sxXT1nZSxjWzJdPW1lLGNbM109dmUsY1s0XT13ZSxjWzVdPV9lLGNbNl09U2UsY1s3XT1FZSxjWzhdPUFlLGNbOV09eGUsY1sxMF09a2UsY1sxMV09UGUsY1sxMl09T2UsY1sxM109TWUsY1sxNF09SWUsY1sxNV09VGUsY1sxNl09UmUsY1sxN109TmUsY1sxOF09Q2UsMCE9PWYmJihjWzE5XT1mLHIubGVuZ3RoKyspLHJ9O2Z1bmN0aW9uIGcoZSx0LHIpe3IubmVnYXRpdmU9dC5uZWdhdGl2ZV5lLm5lZ2F0aXZlLHIubGVuZ3RoPWUubGVuZ3RoK3QubGVuZ3RoO2Zvcih2YXIgbj0wLGk9MCxvPTA7bzxyLmxlbmd0aC0xO28rKyl7dmFyIHM9aTtpPTA7Zm9yKHZhciBhPTY3MTA4ODYzJm4sYz1NYXRoLm1pbihvLHQubGVuZ3RoLTEpLGY9TWF0aC5tYXgoMCxvLWUubGVuZ3RoKzEpO2Y8PWM7ZisrKXt2YXIgdT1vLWYsZD0oMHxlLndvcmRzW3VdKSooMHx0LndvcmRzW2ZdKSxoPTY3MTA4ODYzJmQ7YT02NzEwODg2MyYoaD1oK2F8MCksaSs9KHM9KHM9cysoZC82NzEwODg2NHwwKXwwKSsoaD4+PjI2KXwwKT4+PjI2LHMmPTY3MTA4ODYzfXIud29yZHNbb109YSxuPXMscz1pfXJldHVybiAwIT09bj9yLndvcmRzW29dPW46ci5sZW5ndGgtLSxyLl9zdHJpcCgpfWZ1bmN0aW9uIG0oZSx0LHIpe3JldHVybiBnKGUsdCxyKX1mdW5jdGlvbiB2KGUsdCl7dGhpcy54PWUsdGhpcy55PXR9TWF0aC5pbXVsfHwoeT1iKSxvLnByb3RvdHlwZS5tdWxUbz1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMubGVuZ3RoK2UubGVuZ3RoO3JldHVybiAxMD09PXRoaXMubGVuZ3RoJiYxMD09PWUubGVuZ3RoP3kodGhpcyxlLHQpOnI8NjM/Yih0aGlzLGUsdCk6cjwxMDI0P2codGhpcyxlLHQpOm0odGhpcyxlLHQpfSx2LnByb3RvdHlwZS5tYWtlUkJUPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZSkscj1vLnByb3RvdHlwZS5fY291bnRCaXRzKGUpLTEsbj0wO248ZTtuKyspdFtuXT10aGlzLnJldkJpbihuLHIsZSk7cmV0dXJuIHR9LHYucHJvdG90eXBlLnJldkJpbj1mdW5jdGlvbihlLHQscil7aWYoMD09PWV8fGU9PT1yLTEpcmV0dXJuIGU7Zm9yKHZhciBuPTAsaT0wO2k8dDtpKyspbnw9KDEmZSk8PHQtaS0xLGU+Pj0xO3JldHVybiBufSx2LnByb3RvdHlwZS5wZXJtdXRlPWZ1bmN0aW9uKGUsdCxyLG4saSxvKXtmb3IodmFyIHM9MDtzPG87cysrKW5bc109dFtlW3NdXSxpW3NdPXJbZVtzXV19LHYucHJvdG90eXBlLnRyYW5zZm9ybT1mdW5jdGlvbihlLHQscixuLGksbyl7dGhpcy5wZXJtdXRlKG8sZSx0LHIsbixpKTtmb3IodmFyIHM9MTtzPGk7czw8PTEpZm9yKHZhciBhPXM8PDEsYz1NYXRoLmNvcygyKk1hdGguUEkvYSksZj1NYXRoLnNpbigyKk1hdGguUEkvYSksdT0wO3U8aTt1Kz1hKWZvcih2YXIgZD1jLGg9ZixsPTA7bDxzO2wrKyl7dmFyIHA9clt1K2xdLGI9blt1K2xdLHk9clt1K2wrc10sZz1uW3UrbCtzXSxtPWQqeS1oKmc7Zz1kKmcraCp5LHk9bSxyW3UrbF09cCt5LG5bdStsXT1iK2csclt1K2wrc109cC15LG5bdStsK3NdPWItZyxsIT09YSYmKG09YypkLWYqaCxoPWMqaCtmKmQsZD1tKX19LHYucHJvdG90eXBlLmd1ZXNzTGVuMTNiPWZ1bmN0aW9uKGUsdCl7dmFyIHI9MXxNYXRoLm1heCh0LGUpLG49MSZyLGk9MDtmb3Iocj1yLzJ8MDtyO3I+Pj49MSlpKys7cmV0dXJuIDE8PGkrMStufSx2LnByb3RvdHlwZS5jb25qdWdhdGU9ZnVuY3Rpb24oZSx0LHIpe2lmKCEocjw9MSkpZm9yKHZhciBuPTA7bjxyLzI7bisrKXt2YXIgaT1lW25dO2Vbbl09ZVtyLW4tMV0sZVtyLW4tMV09aSxpPXRbbl0sdFtuXT0tdFtyLW4tMV0sdFtyLW4tMV09LWl9fSx2LnByb3RvdHlwZS5ub3JtYWxpemUxM2I9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MCxuPTA7bjx0LzI7bisrKXt2YXIgaT04MTkyKk1hdGgucm91bmQoZVsyKm4rMV0vdCkrTWF0aC5yb3VuZChlWzIqbl0vdCkrcjtlW25dPTY3MTA4ODYzJmkscj1pPDY3MTA4ODY0PzA6aS82NzEwODg2NHwwfXJldHVybiBlfSx2LnByb3RvdHlwZS5jb252ZXJ0MTNiPWZ1bmN0aW9uKGUsdCxyLGkpe2Zvcih2YXIgbz0wLHM9MDtzPHQ7cysrKW8rPTB8ZVtzXSxyWzIqc109ODE5MSZvLG8+Pj49MTMsclsyKnMrMV09ODE5MSZvLG8+Pj49MTM7Zm9yKHM9Mip0O3M8aTsrK3MpcltzXT0wO24oMD09PW8pLG4oMD09KC04MTkyJm8pKX0sdi5wcm90b3R5cGUuc3R1Yj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09MDtyZXR1cm4gdH0sdi5wcm90b3R5cGUubXVscD1mdW5jdGlvbihlLHQscil7dmFyIG49Mip0aGlzLmd1ZXNzTGVuMTNiKGUubGVuZ3RoLHQubGVuZ3RoKSxpPXRoaXMubWFrZVJCVChuKSxvPXRoaXMuc3R1YihuKSxzPW5ldyBBcnJheShuKSxhPW5ldyBBcnJheShuKSxjPW5ldyBBcnJheShuKSxmPW5ldyBBcnJheShuKSx1PW5ldyBBcnJheShuKSxkPW5ldyBBcnJheShuKSxoPXIud29yZHM7aC5sZW5ndGg9bix0aGlzLmNvbnZlcnQxM2IoZS53b3JkcyxlLmxlbmd0aCxzLG4pLHRoaXMuY29udmVydDEzYih0LndvcmRzLHQubGVuZ3RoLGYsbiksdGhpcy50cmFuc2Zvcm0ocyxvLGEsYyxuLGkpLHRoaXMudHJhbnNmb3JtKGYsbyx1LGQsbixpKTtmb3IodmFyIGw9MDtsPG47bCsrKXt2YXIgcD1hW2xdKnVbbF0tY1tsXSpkW2xdO2NbbF09YVtsXSpkW2xdK2NbbF0qdVtsXSxhW2xdPXB9cmV0dXJuIHRoaXMuY29uanVnYXRlKGEsYyxuKSx0aGlzLnRyYW5zZm9ybShhLGMsaCxvLG4saSksdGhpcy5jb25qdWdhdGUoaCxvLG4pLHRoaXMubm9ybWFsaXplMTNiKGgsbiksci5uZWdhdGl2ZT1lLm5lZ2F0aXZlXnQubmVnYXRpdmUsci5sZW5ndGg9ZS5sZW5ndGgrdC5sZW5ndGgsci5fc3RyaXAoKX0sby5wcm90b3R5cGUubXVsPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBvKG51bGwpO3JldHVybiB0LndvcmRzPW5ldyBBcnJheSh0aGlzLmxlbmd0aCtlLmxlbmd0aCksdGhpcy5tdWxUbyhlLHQpfSxvLnByb3RvdHlwZS5tdWxmPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBvKG51bGwpO3JldHVybiB0LndvcmRzPW5ldyBBcnJheSh0aGlzLmxlbmd0aCtlLmxlbmd0aCksbSh0aGlzLGUsdCl9LG8ucHJvdG90eXBlLmltdWw9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhlLHRoaXMpfSxvLnByb3RvdHlwZS5pbXVsbj1mdW5jdGlvbihlKXt2YXIgdD1lPDA7dCYmKGU9LWUpLG4oXCJudW1iZXJcIj09dHlwZW9mIGUpLG4oZTw2NzEwODg2NCk7Zm9yKHZhciByPTAsaT0wO2k8dGhpcy5sZW5ndGg7aSsrKXt2YXIgbz0oMHx0aGlzLndvcmRzW2ldKSplLHM9KDY3MTA4ODYzJm8pKyg2NzEwODg2MyZyKTtyPj49MjYscis9by82NzEwODg2NHwwLHIrPXM+Pj4yNix0aGlzLndvcmRzW2ldPTY3MTA4ODYzJnN9cmV0dXJuIDAhPT1yJiYodGhpcy53b3Jkc1tpXT1yLHRoaXMubGVuZ3RoKyspLHQ/dGhpcy5pbmVnKCk6dGhpc30sby5wcm90b3R5cGUubXVsbj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKGUpfSxvLnByb3RvdHlwZS5zcXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tdWwodGhpcyl9LG8ucHJvdG90eXBlLmlzcXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSl9LG8ucHJvdG90eXBlLnBvdz1mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IEFycmF5KGUuYml0TGVuZ3RoKCkpLHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49ci8yNnwwLGk9ciUyNjt0W3JdPWUud29yZHNbbl0+Pj5pJjF9cmV0dXJuIHR9KGUpO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gbmV3IG8oMSk7Zm9yKHZhciByPXRoaXMsbj0wO248dC5sZW5ndGgmJjA9PT10W25dO24rKyxyPXIuc3FyKCkpO2lmKCsrbjx0Lmxlbmd0aClmb3IodmFyIGk9ci5zcXIoKTtuPHQubGVuZ3RoO24rKyxpPWkuc3FyKCkpMCE9PXRbbl0mJihyPXIubXVsKGkpKTtyZXR1cm4gcn0sby5wcm90b3R5cGUuaXVzaGxuPWZ1bmN0aW9uKGUpe24oXCJudW1iZXJcIj09dHlwZW9mIGUmJmU+PTApO3ZhciB0LHI9ZSUyNixpPShlLXIpLzI2LG89NjcxMDg4NjM+Pj4yNi1yPDwyNi1yO2lmKDAhPT1yKXt2YXIgcz0wO2Zvcih0PTA7dDx0aGlzLmxlbmd0aDt0Kyspe3ZhciBhPXRoaXMud29yZHNbdF0mbyxjPSgwfHRoaXMud29yZHNbdF0pLWE8PHI7dGhpcy53b3Jkc1t0XT1jfHMscz1hPj4+MjYtcn1zJiYodGhpcy53b3Jkc1t0XT1zLHRoaXMubGVuZ3RoKyspfWlmKDAhPT1pKXtmb3IodD10aGlzLmxlbmd0aC0xO3Q+PTA7dC0tKXRoaXMud29yZHNbdCtpXT10aGlzLndvcmRzW3RdO2Zvcih0PTA7dDxpO3QrKyl0aGlzLndvcmRzW3RdPTA7dGhpcy5sZW5ndGgrPWl9cmV0dXJuIHRoaXMuX3N0cmlwKCl9LG8ucHJvdG90eXBlLmlzaGxuPWZ1bmN0aW9uKGUpe3JldHVybiBuKDA9PT10aGlzLm5lZ2F0aXZlKSx0aGlzLml1c2hsbihlKX0sby5wcm90b3R5cGUuaXVzaHJuPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaTtuKFwibnVtYmVyXCI9PXR5cGVvZiBlJiZlPj0wKSxpPXQ/KHQtdCUyNikvMjY6MDt2YXIgbz1lJTI2LHM9TWF0aC5taW4oKGUtbykvMjYsdGhpcy5sZW5ndGgpLGE9NjcxMDg4NjNeNjcxMDg4NjM+Pj5vPDxvLGM9cjtpZihpLT1zLGk9TWF0aC5tYXgoMCxpKSxjKXtmb3IodmFyIGY9MDtmPHM7ZisrKWMud29yZHNbZl09dGhpcy53b3Jkc1tmXTtjLmxlbmd0aD1zfWlmKDA9PT1zKTtlbHNlIGlmKHRoaXMubGVuZ3RoPnMpZm9yKHRoaXMubGVuZ3RoLT1zLGY9MDtmPHRoaXMubGVuZ3RoO2YrKyl0aGlzLndvcmRzW2ZdPXRoaXMud29yZHNbZitzXTtlbHNlIHRoaXMud29yZHNbMF09MCx0aGlzLmxlbmd0aD0xO3ZhciB1PTA7Zm9yKGY9dGhpcy5sZW5ndGgtMTtmPj0wJiYoMCE9PXV8fGY+PWkpO2YtLSl7dmFyIGQ9MHx0aGlzLndvcmRzW2ZdO3RoaXMud29yZHNbZl09dTw8MjYtb3xkPj4+byx1PWQmYX1yZXR1cm4gYyYmMCE9PXUmJihjLndvcmRzW2MubGVuZ3RoKytdPXUpLDA9PT10aGlzLmxlbmd0aCYmKHRoaXMud29yZHNbMF09MCx0aGlzLmxlbmd0aD0xKSx0aGlzLl9zdHJpcCgpfSxvLnByb3RvdHlwZS5pc2hybj1mdW5jdGlvbihlLHQscil7cmV0dXJuIG4oMD09PXRoaXMubmVnYXRpdmUpLHRoaXMuaXVzaHJuKGUsdCxyKX0sby5wcm90b3R5cGUuc2hsbj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlzaGxuKGUpfSxvLnByb3RvdHlwZS51c2hsbj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihlKX0sby5wcm90b3R5cGUuc2hybj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGUpfSxvLnByb3RvdHlwZS51c2hybj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihlKX0sby5wcm90b3R5cGUudGVzdG49ZnVuY3Rpb24oZSl7bihcIm51bWJlclwiPT10eXBlb2YgZSYmZT49MCk7dmFyIHQ9ZSUyNixyPShlLXQpLzI2LGk9MTw8dDtyZXR1cm4hKHRoaXMubGVuZ3RoPD1yfHwhKHRoaXMud29yZHNbcl0maSkpfSxvLnByb3RvdHlwZS5pbWFza249ZnVuY3Rpb24oZSl7bihcIm51bWJlclwiPT10eXBlb2YgZSYmZT49MCk7dmFyIHQ9ZSUyNixyPShlLXQpLzI2O2lmKG4oMD09PXRoaXMubmVnYXRpdmUsXCJpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnNcIiksdGhpcy5sZW5ndGg8PXIpcmV0dXJuIHRoaXM7aWYoMCE9PXQmJnIrKyx0aGlzLmxlbmd0aD1NYXRoLm1pbihyLHRoaXMubGVuZ3RoKSwwIT09dCl7dmFyIGk9NjcxMDg4NjNeNjcxMDg4NjM+Pj50PDx0O3RoaXMud29yZHNbdGhpcy5sZW5ndGgtMV0mPWl9cmV0dXJuIHRoaXMuX3N0cmlwKCl9LG8ucHJvdG90eXBlLm1hc2tuPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGUpfSxvLnByb3RvdHlwZS5pYWRkbj1mdW5jdGlvbihlKXtyZXR1cm4gbihcIm51bWJlclwiPT10eXBlb2YgZSksbihlPDY3MTA4ODY0KSxlPDA/dGhpcy5pc3VibigtZSk6MCE9PXRoaXMubmVnYXRpdmU/MT09PXRoaXMubGVuZ3RoJiYoMHx0aGlzLndvcmRzWzBdKTw9ZT8odGhpcy53b3Jkc1swXT1lLSgwfHRoaXMud29yZHNbMF0pLHRoaXMubmVnYXRpdmU9MCx0aGlzKToodGhpcy5uZWdhdGl2ZT0wLHRoaXMuaXN1Ym4oZSksdGhpcy5uZWdhdGl2ZT0xLHRoaXMpOnRoaXMuX2lhZGRuKGUpfSxvLnByb3RvdHlwZS5faWFkZG49ZnVuY3Rpb24oZSl7dGhpcy53b3Jkc1swXSs9ZTtmb3IodmFyIHQ9MDt0PHRoaXMubGVuZ3RoJiZ0aGlzLndvcmRzW3RdPj02NzEwODg2NDt0KyspdGhpcy53b3Jkc1t0XS09NjcxMDg4NjQsdD09PXRoaXMubGVuZ3RoLTE/dGhpcy53b3Jkc1t0KzFdPTE6dGhpcy53b3Jkc1t0KzFdKys7cmV0dXJuIHRoaXMubGVuZ3RoPU1hdGgubWF4KHRoaXMubGVuZ3RoLHQrMSksdGhpc30sby5wcm90b3R5cGUuaXN1Ym49ZnVuY3Rpb24oZSl7aWYobihcIm51bWJlclwiPT10eXBlb2YgZSksbihlPDY3MTA4ODY0KSxlPDApcmV0dXJuIHRoaXMuaWFkZG4oLWUpO2lmKDAhPT10aGlzLm5lZ2F0aXZlKXJldHVybiB0aGlzLm5lZ2F0aXZlPTAsdGhpcy5pYWRkbihlKSx0aGlzLm5lZ2F0aXZlPTEsdGhpcztpZih0aGlzLndvcmRzWzBdLT1lLDE9PT10aGlzLmxlbmd0aCYmdGhpcy53b3Jkc1swXTwwKXRoaXMud29yZHNbMF09LXRoaXMud29yZHNbMF0sdGhpcy5uZWdhdGl2ZT0xO2Vsc2UgZm9yKHZhciB0PTA7dDx0aGlzLmxlbmd0aCYmdGhpcy53b3Jkc1t0XTwwO3QrKyl0aGlzLndvcmRzW3RdKz02NzEwODg2NCx0aGlzLndvcmRzW3QrMV0tPTE7cmV0dXJuIHRoaXMuX3N0cmlwKCl9LG8ucHJvdG90eXBlLmFkZG49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihlKX0sby5wcm90b3R5cGUuc3Vibj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKGUpfSxvLnByb3RvdHlwZS5pYWJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmVnYXRpdmU9MCx0aGlzfSxvLnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKX0sby5wcm90b3R5cGUuX2lzaGxuc3VibXVsPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvLHM9ZS5sZW5ndGgrcjt0aGlzLl9leHBhbmQocyk7dmFyIGE9MDtmb3IoaT0wO2k8ZS5sZW5ndGg7aSsrKXtvPSgwfHRoaXMud29yZHNbaStyXSkrYTt2YXIgYz0oMHxlLndvcmRzW2ldKSp0O2E9KChvLT02NzEwODg2MyZjKT4+MjYpLShjLzY3MTA4ODY0fDApLHRoaXMud29yZHNbaStyXT02NzEwODg2MyZvfWZvcig7aTx0aGlzLmxlbmd0aC1yO2krKylhPShvPSgwfHRoaXMud29yZHNbaStyXSkrYSk+PjI2LHRoaXMud29yZHNbaStyXT02NzEwODg2MyZvO2lmKDA9PT1hKXJldHVybiB0aGlzLl9zdHJpcCgpO2ZvcihuKC0xPT09YSksYT0wLGk9MDtpPHRoaXMubGVuZ3RoO2krKylhPShvPS0oMHx0aGlzLndvcmRzW2ldKSthKT4+MjYsdGhpcy53b3Jkc1tpXT02NzEwODg2MyZvO3JldHVybiB0aGlzLm5lZ2F0aXZlPTEsdGhpcy5fc3RyaXAoKX0sby5wcm90b3R5cGUuX3dvcmREaXY9ZnVuY3Rpb24oZSx0KXt2YXIgcj0odGhpcy5sZW5ndGgsZS5sZW5ndGgpLG49dGhpcy5jbG9uZSgpLGk9ZSxzPTB8aS53b3Jkc1tpLmxlbmd0aC0xXTswIT0ocj0yNi10aGlzLl9jb3VudEJpdHMocykpJiYoaT1pLnVzaGxuKHIpLG4uaXVzaGxuKHIpLHM9MHxpLndvcmRzW2kubGVuZ3RoLTFdKTt2YXIgYSxjPW4ubGVuZ3RoLWkubGVuZ3RoO2lmKFwibW9kXCIhPT10KXsoYT1uZXcgbyhudWxsKSkubGVuZ3RoPWMrMSxhLndvcmRzPW5ldyBBcnJheShhLmxlbmd0aCk7Zm9yKHZhciBmPTA7ZjxhLmxlbmd0aDtmKyspYS53b3Jkc1tmXT0wfXZhciB1PW4uY2xvbmUoKS5faXNobG5zdWJtdWwoaSwxLGMpOzA9PT11Lm5lZ2F0aXZlJiYobj11LGEmJihhLndvcmRzW2NdPTEpKTtmb3IodmFyIGQ9Yy0xO2Q+PTA7ZC0tKXt2YXIgaD02NzEwODg2NCooMHxuLndvcmRzW2kubGVuZ3RoK2RdKSsoMHxuLndvcmRzW2kubGVuZ3RoK2QtMV0pO2ZvcihoPU1hdGgubWluKGgvc3wwLDY3MTA4ODYzKSxuLl9pc2hsbnN1Ym11bChpLGgsZCk7MCE9PW4ubmVnYXRpdmU7KWgtLSxuLm5lZ2F0aXZlPTAsbi5faXNobG5zdWJtdWwoaSwxLGQpLG4uaXNaZXJvKCl8fChuLm5lZ2F0aXZlXj0xKTthJiYoYS53b3Jkc1tkXT1oKX1yZXR1cm4gYSYmYS5fc3RyaXAoKSxuLl9zdHJpcCgpLFwiZGl2XCIhPT10JiYwIT09ciYmbi5pdXNocm4ocikse2RpdjphfHxudWxsLG1vZDpufX0sby5wcm90b3R5cGUuZGl2bW9kPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbighZS5pc1plcm8oKSksdGhpcy5pc1plcm8oKT97ZGl2Om5ldyBvKDApLG1vZDpuZXcgbygwKX06MCE9PXRoaXMubmVnYXRpdmUmJjA9PT1lLm5lZ2F0aXZlPyhhPXRoaXMubmVnKCkuZGl2bW9kKGUsdCksXCJtb2RcIiE9PXQmJihpPWEuZGl2Lm5lZygpKSxcImRpdlwiIT09dCYmKHM9YS5tb2QubmVnKCksciYmMCE9PXMubmVnYXRpdmUmJnMuaWFkZChlKSkse2RpdjppLG1vZDpzfSk6MD09PXRoaXMubmVnYXRpdmUmJjAhPT1lLm5lZ2F0aXZlPyhhPXRoaXMuZGl2bW9kKGUubmVnKCksdCksXCJtb2RcIiE9PXQmJihpPWEuZGl2Lm5lZygpKSx7ZGl2OmksbW9kOmEubW9kfSk6MCE9KHRoaXMubmVnYXRpdmUmZS5uZWdhdGl2ZSk/KGE9dGhpcy5uZWcoKS5kaXZtb2QoZS5uZWcoKSx0KSxcImRpdlwiIT09dCYmKHM9YS5tb2QubmVnKCksciYmMCE9PXMubmVnYXRpdmUmJnMuaXN1YihlKSkse2RpdjphLmRpdixtb2Q6c30pOmUubGVuZ3RoPnRoaXMubGVuZ3RofHx0aGlzLmNtcChlKTwwP3tkaXY6bmV3IG8oMCksbW9kOnRoaXN9OjE9PT1lLmxlbmd0aD9cImRpdlwiPT09dD97ZGl2OnRoaXMuZGl2bihlLndvcmRzWzBdKSxtb2Q6bnVsbH06XCJtb2RcIj09PXQ/e2RpdjpudWxsLG1vZDpuZXcgbyh0aGlzLm1vZHJuKGUud29yZHNbMF0pKX06e2Rpdjp0aGlzLmRpdm4oZS53b3Jkc1swXSksbW9kOm5ldyBvKHRoaXMubW9kcm4oZS53b3Jkc1swXSkpfTp0aGlzLl93b3JkRGl2KGUsdCk7dmFyIGkscyxhfSxvLnByb3RvdHlwZS5kaXY9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGl2bW9kKGUsXCJkaXZcIiwhMSkuZGl2fSxvLnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGl2bW9kKGUsXCJtb2RcIiwhMSkubW9kfSxvLnByb3RvdHlwZS51bW9kPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmRpdm1vZChlLFwibW9kXCIsITApLm1vZH0sby5wcm90b3R5cGUuZGl2Um91bmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5kaXZtb2QoZSk7aWYodC5tb2QuaXNaZXJvKCkpcmV0dXJuIHQuZGl2O3ZhciByPTAhPT10LmRpdi5uZWdhdGl2ZT90Lm1vZC5pc3ViKGUpOnQubW9kLG49ZS51c2hybigxKSxpPWUuYW5kbG4oMSksbz1yLmNtcChuKTtyZXR1cm4gbzwwfHwxPT09aSYmMD09PW8/dC5kaXY6MCE9PXQuZGl2Lm5lZ2F0aXZlP3QuZGl2LmlzdWJuKDEpOnQuZGl2LmlhZGRuKDEpfSxvLnByb3RvdHlwZS5tb2Rybj1mdW5jdGlvbihlKXt2YXIgdD1lPDA7dCYmKGU9LWUpLG4oZTw9NjcxMDg4NjMpO2Zvcih2YXIgcj0oMTw8MjYpJWUsaT0wLG89dGhpcy5sZW5ndGgtMTtvPj0wO28tLSlpPShyKmkrKDB8dGhpcy53b3Jkc1tvXSkpJWU7cmV0dXJuIHQ/LWk6aX0sby5wcm90b3R5cGUubW9kbj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5tb2RybihlKX0sby5wcm90b3R5cGUuaWRpdm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZTwwO3QmJihlPS1lKSxuKGU8PTY3MTA4ODYzKTtmb3IodmFyIHI9MCxpPXRoaXMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBvPSgwfHRoaXMud29yZHNbaV0pKzY3MTA4ODY0KnI7dGhpcy53b3Jkc1tpXT1vL2V8MCxyPW8lZX1yZXR1cm4gdGhpcy5fc3RyaXAoKSx0P3RoaXMuaW5lZygpOnRoaXN9LG8ucHJvdG90eXBlLmRpdm49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihlKX0sby5wcm90b3R5cGUuZWdjZD1mdW5jdGlvbihlKXtuKDA9PT1lLm5lZ2F0aXZlKSxuKCFlLmlzWmVybygpKTt2YXIgdD10aGlzLHI9ZS5jbG9uZSgpO3Q9MCE9PXQubmVnYXRpdmU/dC51bW9kKGUpOnQuY2xvbmUoKTtmb3IodmFyIGk9bmV3IG8oMSkscz1uZXcgbygwKSxhPW5ldyBvKDApLGM9bmV3IG8oMSksZj0wO3QuaXNFdmVuKCkmJnIuaXNFdmVuKCk7KXQuaXVzaHJuKDEpLHIuaXVzaHJuKDEpLCsrZjtmb3IodmFyIHU9ci5jbG9uZSgpLGQ9dC5jbG9uZSgpOyF0LmlzWmVybygpOyl7Zm9yKHZhciBoPTAsbD0xOzA9PSh0LndvcmRzWzBdJmwpJiZoPDI2OysraCxsPDw9MSk7aWYoaD4wKWZvcih0Lml1c2hybihoKTtoLS0gPjA7KShpLmlzT2RkKCl8fHMuaXNPZGQoKSkmJihpLmlhZGQodSkscy5pc3ViKGQpKSxpLml1c2hybigxKSxzLml1c2hybigxKTtmb3IodmFyIHA9MCxiPTE7MD09KHIud29yZHNbMF0mYikmJnA8MjY7KytwLGI8PD0xKTtpZihwPjApZm9yKHIuaXVzaHJuKHApO3AtLSA+MDspKGEuaXNPZGQoKXx8Yy5pc09kZCgpKSYmKGEuaWFkZCh1KSxjLmlzdWIoZCkpLGEuaXVzaHJuKDEpLGMuaXVzaHJuKDEpO3QuY21wKHIpPj0wPyh0LmlzdWIociksaS5pc3ViKGEpLHMuaXN1YihjKSk6KHIuaXN1Yih0KSxhLmlzdWIoaSksYy5pc3ViKHMpKX1yZXR1cm57YSxiOmMsZ2NkOnIuaXVzaGxuKGYpfX0sby5wcm90b3R5cGUuX2ludm1wPWZ1bmN0aW9uKGUpe24oMD09PWUubmVnYXRpdmUpLG4oIWUuaXNaZXJvKCkpO3ZhciB0PXRoaXMscj1lLmNsb25lKCk7dD0wIT09dC5uZWdhdGl2ZT90LnVtb2QoZSk6dC5jbG9uZSgpO2Zvcih2YXIgaSxzPW5ldyBvKDEpLGE9bmV3IG8oMCksYz1yLmNsb25lKCk7dC5jbXBuKDEpPjAmJnIuY21wbigxKT4wOyl7Zm9yKHZhciBmPTAsdT0xOzA9PSh0LndvcmRzWzBdJnUpJiZmPDI2OysrZix1PDw9MSk7aWYoZj4wKWZvcih0Lml1c2hybihmKTtmLS0gPjA7KXMuaXNPZGQoKSYmcy5pYWRkKGMpLHMuaXVzaHJuKDEpO2Zvcih2YXIgZD0wLGg9MTswPT0oci53b3Jkc1swXSZoKSYmZDwyNjsrK2QsaDw8PTEpO2lmKGQ+MClmb3Ioci5pdXNocm4oZCk7ZC0tID4wOylhLmlzT2RkKCkmJmEuaWFkZChjKSxhLml1c2hybigxKTt0LmNtcChyKT49MD8odC5pc3ViKHIpLHMuaXN1YihhKSk6KHIuaXN1Yih0KSxhLmlzdWIocykpfXJldHVybihpPTA9PT10LmNtcG4oMSk/czphKS5jbXBuKDApPDAmJmkuaWFkZChlKSxpfSxvLnByb3RvdHlwZS5nY2Q9ZnVuY3Rpb24oZSl7aWYodGhpcy5pc1plcm8oKSlyZXR1cm4gZS5hYnMoKTtpZihlLmlzWmVybygpKXJldHVybiB0aGlzLmFicygpO3ZhciB0PXRoaXMuY2xvbmUoKSxyPWUuY2xvbmUoKTt0Lm5lZ2F0aXZlPTAsci5uZWdhdGl2ZT0wO2Zvcih2YXIgbj0wO3QuaXNFdmVuKCkmJnIuaXNFdmVuKCk7bisrKXQuaXVzaHJuKDEpLHIuaXVzaHJuKDEpO2Zvcig7Oyl7Zm9yKDt0LmlzRXZlbigpOyl0Lml1c2hybigxKTtmb3IoO3IuaXNFdmVuKCk7KXIuaXVzaHJuKDEpO3ZhciBpPXQuY21wKHIpO2lmKGk8MCl7dmFyIG89dDt0PXIscj1vfWVsc2UgaWYoMD09PWl8fDA9PT1yLmNtcG4oMSkpYnJlYWs7dC5pc3ViKHIpfXJldHVybiByLml1c2hsbihuKX0sby5wcm90b3R5cGUuaW52bT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lZ2NkKGUpLmEudW1vZChlKX0sby5wcm90b3R5cGUuaXNFdmVuPWZ1bmN0aW9uKCl7cmV0dXJuIDA9PSgxJnRoaXMud29yZHNbMF0pfSxvLnByb3RvdHlwZS5pc09kZD1mdW5jdGlvbigpe3JldHVybiAxPT0oMSZ0aGlzLndvcmRzWzBdKX0sby5wcm90b3R5cGUuYW5kbG49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMud29yZHNbMF0mZX0sby5wcm90b3R5cGUuYmluY249ZnVuY3Rpb24oZSl7bihcIm51bWJlclwiPT10eXBlb2YgZSk7dmFyIHQ9ZSUyNixyPShlLXQpLzI2LGk9MTw8dDtpZih0aGlzLmxlbmd0aDw9cilyZXR1cm4gdGhpcy5fZXhwYW5kKHIrMSksdGhpcy53b3Jkc1tyXXw9aSx0aGlzO2Zvcih2YXIgbz1pLHM9cjswIT09byYmczx0aGlzLmxlbmd0aDtzKyspe3ZhciBhPTB8dGhpcy53b3Jkc1tzXTtvPShhKz1vKT4+PjI2LGEmPTY3MTA4ODYzLHRoaXMud29yZHNbc109YX1yZXR1cm4gMCE9PW8mJih0aGlzLndvcmRzW3NdPW8sdGhpcy5sZW5ndGgrKyksdGhpc30sby5wcm90b3R5cGUuaXNaZXJvPWZ1bmN0aW9uKCl7cmV0dXJuIDE9PT10aGlzLmxlbmd0aCYmMD09PXRoaXMud29yZHNbMF19LG8ucHJvdG90eXBlLmNtcG49ZnVuY3Rpb24oZSl7dmFyIHQscj1lPDA7aWYoMCE9PXRoaXMubmVnYXRpdmUmJiFyKXJldHVybi0xO2lmKDA9PT10aGlzLm5lZ2F0aXZlJiZyKXJldHVybiAxO2lmKHRoaXMuX3N0cmlwKCksdGhpcy5sZW5ndGg+MSl0PTE7ZWxzZXtyJiYoZT0tZSksbihlPD02NzEwODg2MyxcIk51bWJlciBpcyB0b28gYmlnXCIpO3ZhciBpPTB8dGhpcy53b3Jkc1swXTt0PWk9PT1lPzA6aTxlPy0xOjF9cmV0dXJuIDAhPT10aGlzLm5lZ2F0aXZlPzB8LXQ6dH0sby5wcm90b3R5cGUuY21wPWZ1bmN0aW9uKGUpe2lmKDAhPT10aGlzLm5lZ2F0aXZlJiYwPT09ZS5uZWdhdGl2ZSlyZXR1cm4tMTtpZigwPT09dGhpcy5uZWdhdGl2ZSYmMCE9PWUubmVnYXRpdmUpcmV0dXJuIDE7dmFyIHQ9dGhpcy51Y21wKGUpO3JldHVybiAwIT09dGhpcy5uZWdhdGl2ZT8wfC10OnR9LG8ucHJvdG90eXBlLnVjbXA9ZnVuY3Rpb24oZSl7aWYodGhpcy5sZW5ndGg+ZS5sZW5ndGgpcmV0dXJuIDE7aWYodGhpcy5sZW5ndGg8ZS5sZW5ndGgpcmV0dXJuLTE7Zm9yKHZhciB0PTAscj10aGlzLmxlbmd0aC0xO3I+PTA7ci0tKXt2YXIgbj0wfHRoaXMud29yZHNbcl0saT0wfGUud29yZHNbcl07aWYobiE9PWkpe248aT90PS0xOm4+aSYmKHQ9MSk7YnJlYWt9fXJldHVybiB0fSxvLnByb3RvdHlwZS5ndG49ZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT10aGlzLmNtcG4oZSl9LG8ucHJvdG90eXBlLmd0PWZ1bmN0aW9uKGUpe3JldHVybiAxPT09dGhpcy5jbXAoZSl9LG8ucHJvdG90eXBlLmd0ZW49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY21wbihlKT49MH0sby5wcm90b3R5cGUuZ3RlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKT49MH0sby5wcm90b3R5cGUubHRuPWZ1bmN0aW9uKGUpe3JldHVybi0xPT09dGhpcy5jbXBuKGUpfSxvLnByb3RvdHlwZS5sdD1mdW5jdGlvbihlKXtyZXR1cm4tMT09PXRoaXMuY21wKGUpfSxvLnByb3RvdHlwZS5sdGVuPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcG4oZSk8PTB9LG8ucHJvdG90eXBlLmx0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbXAoZSk8PTB9LG8ucHJvdG90eXBlLmVxbj1mdW5jdGlvbihlKXtyZXR1cm4gMD09PXRoaXMuY21wbihlKX0sby5wcm90b3R5cGUuZXE9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT10aGlzLmNtcChlKX0sby5yZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBrKGUpfSxvLnByb3RvdHlwZS50b1JlZD1mdW5jdGlvbihlKXtyZXR1cm4gbighdGhpcy5yZWQsXCJBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0XCIpLG4oMD09PXRoaXMubmVnYXRpdmUsXCJyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlc1wiKSxlLmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoZSl9LG8ucHJvdG90eXBlLmZyb21SZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLnJlZCxcImZyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHRcIiksdGhpcy5yZWQuY29udmVydEZyb20odGhpcyl9LG8ucHJvdG90eXBlLl9mb3JjZVJlZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZWQ9ZSx0aGlzfSxvLnByb3RvdHlwZS5mb3JjZVJlZD1mdW5jdGlvbihlKXtyZXR1cm4gbighdGhpcy5yZWQsXCJBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0XCIpLHRoaXMuX2ZvcmNlUmVkKGUpfSxvLnByb3RvdHlwZS5yZWRBZGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG4odGhpcy5yZWQsXCJyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpLHRoaXMucmVkLmFkZCh0aGlzLGUpfSxvLnByb3RvdHlwZS5yZWRJQWRkPWZ1bmN0aW9uKGUpe3JldHVybiBuKHRoaXMucmVkLFwicmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIiksdGhpcy5yZWQuaWFkZCh0aGlzLGUpfSxvLnByb3RvdHlwZS5yZWRTdWI9ZnVuY3Rpb24oZSl7cmV0dXJuIG4odGhpcy5yZWQsXCJyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpLHRoaXMucmVkLnN1Yih0aGlzLGUpfSxvLnByb3RvdHlwZS5yZWRJU3ViPWZ1bmN0aW9uKGUpe3JldHVybiBuKHRoaXMucmVkLFwicmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIiksdGhpcy5yZWQuaXN1Yih0aGlzLGUpfSxvLnByb3RvdHlwZS5yZWRTaGw9ZnVuY3Rpb24oZSl7cmV0dXJuIG4odGhpcy5yZWQsXCJyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpLHRoaXMucmVkLnNobCh0aGlzLGUpfSxvLnByb3RvdHlwZS5yZWRNdWw9ZnVuY3Rpb24oZSl7cmV0dXJuIG4odGhpcy5yZWQsXCJyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpLHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsZSksdGhpcy5yZWQubXVsKHRoaXMsZSl9LG8ucHJvdG90eXBlLnJlZElNdWw9ZnVuY3Rpb24oZSl7cmV0dXJuIG4odGhpcy5yZWQsXCJyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpLHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsZSksdGhpcy5yZWQuaW11bCh0aGlzLGUpfSxvLnByb3RvdHlwZS5yZWRTcXI9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLnJlZCxcInJlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIiksdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyksdGhpcy5yZWQuc3FyKHRoaXMpfSxvLnByb3RvdHlwZS5yZWRJU3FyPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcy5yZWQsXCJyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKSx0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKSx0aGlzLnJlZC5pc3FyKHRoaXMpfSxvLnByb3RvdHlwZS5yZWRTcXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcy5yZWQsXCJyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKSx0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKSx0aGlzLnJlZC5zcXJ0KHRoaXMpfSxvLnByb3RvdHlwZS5yZWRJbnZtPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcy5yZWQsXCJyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKSx0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKSx0aGlzLnJlZC5pbnZtKHRoaXMpfSxvLnByb3RvdHlwZS5yZWROZWc9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLnJlZCxcInJlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIiksdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyksdGhpcy5yZWQubmVnKHRoaXMpfSxvLnByb3RvdHlwZS5yZWRQb3c9ZnVuY3Rpb24oZSl7cmV0dXJuIG4odGhpcy5yZWQmJiFlLnJlZCxcInJlZFBvdyhub3JtYWxOdW0pXCIpLHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpLHRoaXMucmVkLnBvdyh0aGlzLGUpfTt2YXIgdz17azI1NjpudWxsLHAyMjQ6bnVsbCxwMTkyOm51bGwscDI1NTE5Om51bGx9O2Z1bmN0aW9uIF8oZSx0KXt0aGlzLm5hbWU9ZSx0aGlzLnA9bmV3IG8odCwxNiksdGhpcy5uPXRoaXMucC5iaXRMZW5ndGgoKSx0aGlzLms9bmV3IG8oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApLHRoaXMudG1wPXRoaXMuX3RtcCgpfWZ1bmN0aW9uIFMoKXtfLmNhbGwodGhpcyxcImsyNTZcIixcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmXCIpfWZ1bmN0aW9uIEUoKXtfLmNhbGwodGhpcyxcInAyMjRcIixcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxXCIpfWZ1bmN0aW9uIEEoKXtfLmNhbGwodGhpcyxcInAxOTJcIixcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmXCIpfWZ1bmN0aW9uIHgoKXtfLmNhbGwodGhpcyxcIjI1NTE5XCIsXCI3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkXCIpfWZ1bmN0aW9uIGsoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciB0PW8uX3ByaW1lKGUpO3RoaXMubT10LnAsdGhpcy5wcmltZT10fWVsc2UgbihlLmd0bigxKSxcIm1vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMVwiKSx0aGlzLm09ZSx0aGlzLnByaW1lPW51bGx9ZnVuY3Rpb24gUChlKXtrLmNhbGwodGhpcyxlKSx0aGlzLnNoaWZ0PXRoaXMubS5iaXRMZW5ndGgoKSx0aGlzLnNoaWZ0JTI2IT0wJiYodGhpcy5zaGlmdCs9MjYtdGhpcy5zaGlmdCUyNiksdGhpcy5yPW5ldyBvKDEpLml1c2hsbih0aGlzLnNoaWZ0KSx0aGlzLnIyPXRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpLHRoaXMucmludj10aGlzLnIuX2ludm1wKHRoaXMubSksdGhpcy5taW52PXRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKSx0aGlzLm1pbnY9dGhpcy5taW52LnVtb2QodGhpcy5yKSx0aGlzLm1pbnY9dGhpcy5yLnN1Yih0aGlzLm1pbnYpfV8ucHJvdG90eXBlLl90bXA9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgbyhudWxsKTtyZXR1cm4gZS53b3Jkcz1uZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubi8xMykpLGV9LF8ucHJvdG90eXBlLmlyZWR1Y2U9ZnVuY3Rpb24oZSl7dmFyIHQscj1lO2Rve3RoaXMuc3BsaXQocix0aGlzLnRtcCksdD0ocj0ocj10aGlzLmltdWxLKHIpKS5pYWRkKHRoaXMudG1wKSkuYml0TGVuZ3RoKCl9d2hpbGUodD50aGlzLm4pO3ZhciBuPXQ8dGhpcy5uPy0xOnIudWNtcCh0aGlzLnApO3JldHVybiAwPT09bj8oci53b3Jkc1swXT0wLHIubGVuZ3RoPTEpOm4+MD9yLmlzdWIodGhpcy5wKTp2b2lkIDAhPT1yLnN0cmlwP3Iuc3RyaXAoKTpyLl9zdHJpcCgpLHJ9LF8ucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKGUsdCl7ZS5pdXNocm4odGhpcy5uLDAsdCl9LF8ucHJvdG90eXBlLmltdWxLPWZ1bmN0aW9uKGUpe3JldHVybiBlLmltdWwodGhpcy5rKX0saShTLF8pLFMucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTQxOTQzMDMsbj1NYXRoLm1pbihlLmxlbmd0aCw5KSxpPTA7aTxuO2krKyl0LndvcmRzW2ldPWUud29yZHNbaV07aWYodC5sZW5ndGg9bixlLmxlbmd0aDw9OSlyZXR1cm4gZS53b3Jkc1swXT0wLHZvaWQoZS5sZW5ndGg9MSk7dmFyIG89ZS53b3Jkc1s5XTtmb3IodC53b3Jkc1t0Lmxlbmd0aCsrXT1vJnIsaT0xMDtpPGUubGVuZ3RoO2krKyl7dmFyIHM9MHxlLndvcmRzW2ldO2Uud29yZHNbaS0xMF09KHMmcik8PDR8bz4+PjIyLG89c31vPj4+PTIyLGUud29yZHNbaS0xMF09bywwPT09byYmZS5sZW5ndGg+MTA/ZS5sZW5ndGgtPTEwOmUubGVuZ3RoLT05fSxTLnByb3RvdHlwZS5pbXVsSz1mdW5jdGlvbihlKXtlLndvcmRzW2UubGVuZ3RoXT0wLGUud29yZHNbZS5sZW5ndGgrMV09MCxlLmxlbmd0aCs9Mjtmb3IodmFyIHQ9MCxyPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPTB8ZS53b3Jkc1tyXTt0Kz05NzcqbixlLndvcmRzW3JdPTY3MTA4ODYzJnQsdD02NCpuKyh0LzY3MTA4ODY0fDApfXJldHVybiAwPT09ZS53b3Jkc1tlLmxlbmd0aC0xXSYmKGUubGVuZ3RoLS0sMD09PWUud29yZHNbZS5sZW5ndGgtMV0mJmUubGVuZ3RoLS0pLGV9LGkoRSxfKSxpKEEsXyksaSh4LF8pLHgucHJvdG90eXBlLmltdWxLPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49MTkqKDB8ZS53b3Jkc1tyXSkrdCxpPTY3MTA4ODYzJm47bj4+Pj0yNixlLndvcmRzW3JdPWksdD1ufXJldHVybiAwIT09dCYmKGUud29yZHNbZS5sZW5ndGgrK109dCksZX0sby5fcHJpbWU9ZnVuY3Rpb24oZSl7aWYod1tlXSlyZXR1cm4gd1tlXTt2YXIgdDtpZihcImsyNTZcIj09PWUpdD1uZXcgUztlbHNlIGlmKFwicDIyNFwiPT09ZSl0PW5ldyBFO2Vsc2UgaWYoXCJwMTkyXCI9PT1lKXQ9bmV3IEE7ZWxzZXtpZihcInAyNTUxOVwiIT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHByaW1lIFwiK2UpO3Q9bmV3IHh9cmV0dXJuIHdbZV09dCx0fSxrLnByb3RvdHlwZS5fdmVyaWZ5MT1mdW5jdGlvbihlKXtuKDA9PT1lLm5lZ2F0aXZlLFwicmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXNcIiksbihlLnJlZCxcInJlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIil9LGsucHJvdG90eXBlLl92ZXJpZnkyPWZ1bmN0aW9uKGUsdCl7bigwPT0oZS5uZWdhdGl2ZXx0Lm5lZ2F0aXZlKSxcInJlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzXCIpLG4oZS5yZWQmJmUucmVkPT09dC5yZWQsXCJyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpfSxrLnByb3RvdHlwZS5pbW9kPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnByaW1lP3RoaXMucHJpbWUuaXJlZHVjZShlKS5fZm9yY2VSZWQodGhpcyk6KHUoZSxlLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcykpLGUpfSxrLnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuaXNaZXJvKCk/ZS5jbG9uZSgpOnRoaXMubS5zdWIoZSkuX2ZvcmNlUmVkKHRoaXMpfSxrLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSx0KXt0aGlzLl92ZXJpZnkyKGUsdCk7dmFyIHI9ZS5hZGQodCk7cmV0dXJuIHIuY21wKHRoaXMubSk+PTAmJnIuaXN1Yih0aGlzLm0pLHIuX2ZvcmNlUmVkKHRoaXMpfSxrLnByb3RvdHlwZS5pYWRkPWZ1bmN0aW9uKGUsdCl7dGhpcy5fdmVyaWZ5MihlLHQpO3ZhciByPWUuaWFkZCh0KTtyZXR1cm4gci5jbXAodGhpcy5tKT49MCYmci5pc3ViKHRoaXMubSkscn0say5wcm90b3R5cGUuc3ViPWZ1bmN0aW9uKGUsdCl7dGhpcy5fdmVyaWZ5MihlLHQpO3ZhciByPWUuc3ViKHQpO3JldHVybiByLmNtcG4oMCk8MCYmci5pYWRkKHRoaXMubSksci5fZm9yY2VSZWQodGhpcyl9LGsucHJvdG90eXBlLmlzdWI9ZnVuY3Rpb24oZSx0KXt0aGlzLl92ZXJpZnkyKGUsdCk7dmFyIHI9ZS5pc3ViKHQpO3JldHVybiByLmNtcG4oMCk8MCYmci5pYWRkKHRoaXMubSkscn0say5wcm90b3R5cGUuc2hsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX3ZlcmlmeTEoZSksdGhpcy5pbW9kKGUudXNobG4odCkpfSxrLnByb3RvdHlwZS5pbXVsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX3ZlcmlmeTIoZSx0KSx0aGlzLmltb2QoZS5pbXVsKHQpKX0say5wcm90b3R5cGUubXVsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX3ZlcmlmeTIoZSx0KSx0aGlzLmltb2QoZS5tdWwodCkpfSxrLnByb3RvdHlwZS5pc3FyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmltdWwoZSxlLmNsb25lKCkpfSxrLnByb3RvdHlwZS5zcXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMubXVsKGUsZSl9LGsucHJvdG90eXBlLnNxcnQ9ZnVuY3Rpb24oZSl7aWYoZS5pc1plcm8oKSlyZXR1cm4gZS5jbG9uZSgpO3ZhciB0PXRoaXMubS5hbmRsbigzKTtpZihuKHQlMj09MSksMz09PXQpe3ZhciByPXRoaXMubS5hZGQobmV3IG8oMSkpLml1c2hybigyKTtyZXR1cm4gdGhpcy5wb3coZSxyKX1mb3IodmFyIGk9dGhpcy5tLnN1Ym4oMSkscz0wOyFpLmlzWmVybygpJiYwPT09aS5hbmRsbigxKTspcysrLGkuaXVzaHJuKDEpO24oIWkuaXNaZXJvKCkpO3ZhciBhPW5ldyBvKDEpLnRvUmVkKHRoaXMpLGM9YS5yZWROZWcoKSxmPXRoaXMubS5zdWJuKDEpLml1c2hybigxKSx1PXRoaXMubS5iaXRMZW5ndGgoKTtmb3IodT1uZXcgbygyKnUqdSkudG9SZWQodGhpcyk7MCE9PXRoaXMucG93KHUsZikuY21wKGMpOyl1LnJlZElBZGQoYyk7Zm9yKHZhciBkPXRoaXMucG93KHUsaSksaD10aGlzLnBvdyhlLGkuYWRkbigxKS5pdXNocm4oMSkpLGw9dGhpcy5wb3coZSxpKSxwPXM7MCE9PWwuY21wKGEpOyl7Zm9yKHZhciBiPWwseT0wOzAhPT1iLmNtcChhKTt5KyspYj1iLnJlZFNxcigpO24oeTxwKTt2YXIgZz10aGlzLnBvdyhkLG5ldyBvKDEpLml1c2hsbihwLXktMSkpO2g9aC5yZWRNdWwoZyksZD1nLnJlZFNxcigpLGw9bC5yZWRNdWwoZCkscD15fXJldHVybiBofSxrLnByb3RvdHlwZS5pbnZtPWZ1bmN0aW9uKGUpe3ZhciB0PWUuX2ludm1wKHRoaXMubSk7cmV0dXJuIDAhPT10Lm5lZ2F0aXZlPyh0Lm5lZ2F0aXZlPTAsdGhpcy5pbW9kKHQpLnJlZE5lZygpKTp0aGlzLmltb2QodCl9LGsucHJvdG90eXBlLnBvdz1mdW5jdGlvbihlLHQpe2lmKHQuaXNaZXJvKCkpcmV0dXJuIG5ldyBvKDEpLnRvUmVkKHRoaXMpO2lmKDA9PT10LmNtcG4oMSkpcmV0dXJuIGUuY2xvbmUoKTt2YXIgcj1uZXcgQXJyYXkoMTYpO3JbMF09bmV3IG8oMSkudG9SZWQodGhpcyksclsxXT1lO2Zvcih2YXIgbj0yO248ci5sZW5ndGg7bisrKXJbbl09dGhpcy5tdWwocltuLTFdLGUpO3ZhciBpPXJbMF0scz0wLGE9MCxjPXQuYml0TGVuZ3RoKCklMjY7Zm9yKDA9PT1jJiYoYz0yNiksbj10Lmxlbmd0aC0xO24+PTA7bi0tKXtmb3IodmFyIGY9dC53b3Jkc1tuXSx1PWMtMTt1Pj0wO3UtLSl7dmFyIGQ9Zj4+dSYxO2khPT1yWzBdJiYoaT10aGlzLnNxcihpKSksMCE9PWR8fDAhPT1zPyhzPDw9MSxzfD1kLCg0PT0rK2F8fDA9PT1uJiYwPT09dSkmJihpPXRoaXMubXVsKGkscltzXSksYT0wLHM9MCkpOmE9MH1jPTI2fXJldHVybiBpfSxrLnByb3RvdHlwZS5jb252ZXJ0VG89ZnVuY3Rpb24oZSl7dmFyIHQ9ZS51bW9kKHRoaXMubSk7cmV0dXJuIHQ9PT1lP3QuY2xvbmUoKTp0fSxrLnByb3RvdHlwZS5jb252ZXJ0RnJvbT1mdW5jdGlvbihlKXt2YXIgdD1lLmNsb25lKCk7cmV0dXJuIHQucmVkPW51bGwsdH0sby5tb250PWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUChlKX0saShQLGspLFAucHJvdG90eXBlLmNvbnZlcnRUbz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pbW9kKGUudXNobG4odGhpcy5zaGlmdCkpfSxQLnByb3RvdHlwZS5jb252ZXJ0RnJvbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmltb2QoZS5tdWwodGhpcy5yaW52KSk7cmV0dXJuIHQucmVkPW51bGwsdH0sUC5wcm90b3R5cGUuaW11bD1mdW5jdGlvbihlLHQpe2lmKGUuaXNaZXJvKCl8fHQuaXNaZXJvKCkpcmV0dXJuIGUud29yZHNbMF09MCxlLmxlbmd0aD0xLGU7dmFyIHI9ZS5pbXVsKHQpLG49ci5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSksaT1yLmlzdWIobikuaXVzaHJuKHRoaXMuc2hpZnQpLG89aTtyZXR1cm4gaS5jbXAodGhpcy5tKT49MD9vPWkuaXN1Yih0aGlzLm0pOmkuY21wbigwKTwwJiYobz1pLmlhZGQodGhpcy5tKSksby5fZm9yY2VSZWQodGhpcyl9LFAucHJvdG90eXBlLm11bD1mdW5jdGlvbihlLHQpe2lmKGUuaXNaZXJvKCl8fHQuaXNaZXJvKCkpcmV0dXJuIG5ldyBvKDApLl9mb3JjZVJlZCh0aGlzKTt2YXIgcj1lLm11bCh0KSxuPXIubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pLGk9ci5pc3ViKG4pLml1c2hybih0aGlzLnNoaWZ0KSxzPWk7cmV0dXJuIGkuY21wKHRoaXMubSk+PTA/cz1pLmlzdWIodGhpcy5tKTppLmNtcG4oMCk8MCYmKHM9aS5pYWRkKHRoaXMubSkpLHMuX2ZvcmNlUmVkKHRoaXMpfSxQLnByb3RvdHlwZS5pbnZtPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmltb2QoZS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpLl9mb3JjZVJlZCh0aGlzKX19KGU9ci5ubWQoZSksdGhpcyl9LDk5MzE6KGUsdCxyKT0+e3ZhciBuO2Z1bmN0aW9uIGkoZSl7dGhpcy5yYW5kPWV9aWYoZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBufHwobj1uZXcgaShudWxsKSksbi5nZW5lcmF0ZShlKX0sZS5leHBvcnRzLlJhbmQ9aSxpLnByb3RvdHlwZS5nZW5lcmF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fcmFuZChlKX0saS5wcm90b3R5cGUuX3JhbmQ9ZnVuY3Rpb24oZSl7aWYodGhpcy5yYW5kLmdldEJ5dGVzKXJldHVybiB0aGlzLnJhbmQuZ2V0Qnl0ZXMoZSk7Zm9yKHZhciB0PW5ldyBVaW50OEFycmF5KGUpLHI9MDtyPHQubGVuZ3RoO3IrKyl0W3JdPXRoaXMucmFuZC5nZXRCeXRlKCk7cmV0dXJuIHR9LFwib2JqZWN0XCI9PXR5cGVvZiBzZWxmKXNlbGYuY3J5cHRvJiZzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXM/aS5wcm90b3R5cGUuX3JhbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IFVpbnQ4QXJyYXkoZSk7cmV0dXJuIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh0KSx0fTpzZWxmLm1zQ3J5cHRvJiZzZWxmLm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcz9pLnByb3RvdHlwZS5fcmFuZD1mdW5jdGlvbihlKXt2YXIgdD1uZXcgVWludDhBcnJheShlKTtyZXR1cm4gc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXModCksdH06XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmKGkucHJvdG90eXBlLl9yYW5kPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkIHlldFwiKX0pO2Vsc2UgdHJ5e3ZhciBvPXIoOTIxNCk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygby5yYW5kb21CeXRlcyl0aHJvdyBuZXcgRXJyb3IoXCJOb3Qgc3VwcG9ydGVkXCIpO2kucHJvdG90eXBlLl9yYW5kPWZ1bmN0aW9uKGUpe3JldHVybiBvLnJhbmRvbUJ5dGVzKGUpfX1jYXRjaChlKXt9fSw0NDk3OihlLHQscik9Pnt2YXIgbj1yKDk1MDkpLkJ1ZmZlcjtmdW5jdGlvbiBpKGUpe24uaXNCdWZmZXIoZSl8fChlPW4uZnJvbShlKSk7Zm9yKHZhciB0PWUubGVuZ3RoLzR8MCxyPW5ldyBBcnJheSh0KSxpPTA7aTx0O2krKylyW2ldPWUucmVhZFVJbnQzMkJFKDQqaSk7cmV0dXJuIHJ9ZnVuY3Rpb24gbyhlKXtmb3IoOzA8ZS5sZW5ndGg7ZSsrKWVbMF09MH1mdW5jdGlvbiBzKGUsdCxyLG4saSl7Zm9yKHZhciBvLHMsYSxjLGY9clswXSx1PXJbMV0sZD1yWzJdLGg9clszXSxsPWVbMF1edFswXSxwPWVbMV1edFsxXSxiPWVbMl1edFsyXSx5PWVbM11edFszXSxnPTQsbT0xO208aTttKyspbz1mW2w+Pj4yNF1edVtwPj4+MTYmMjU1XV5kW2I+Pj44JjI1NV1eaFsyNTUmeV1edFtnKytdLHM9ZltwPj4+MjRdXnVbYj4+PjE2JjI1NV1eZFt5Pj4+OCYyNTVdXmhbMjU1JmxdXnRbZysrXSxhPWZbYj4+PjI0XV51W3k+Pj4xNiYyNTVdXmRbbD4+PjgmMjU1XV5oWzI1NSZwXV50W2crK10sYz1mW3k+Pj4yNF1edVtsPj4+MTYmMjU1XV5kW3A+Pj44JjI1NV1eaFsyNTUmYl1edFtnKytdLGw9byxwPXMsYj1hLHk9YztyZXR1cm4gbz0obltsPj4+MjRdPDwyNHxuW3A+Pj4xNiYyNTVdPDwxNnxuW2I+Pj44JjI1NV08PDh8blsyNTUmeV0pXnRbZysrXSxzPShuW3A+Pj4yNF08PDI0fG5bYj4+PjE2JjI1NV08PDE2fG5beT4+PjgmMjU1XTw8OHxuWzI1NSZsXSledFtnKytdLGE9KG5bYj4+PjI0XTw8MjR8blt5Pj4+MTYmMjU1XTw8MTZ8bltsPj4+OCYyNTVdPDw4fG5bMjU1JnBdKV50W2crK10sYz0oblt5Pj4+MjRdPDwyNHxuW2w+Pj4xNiYyNTVdPDwxNnxuW3A+Pj44JjI1NV08PDh8blsyNTUmYl0pXnRbZysrXSxbbz4+Pj0wLHM+Pj49MCxhPj4+PTAsYz4+Pj0wXX12YXIgYT1bMCwxLDIsNCw4LDE2LDMyLDY0LDEyOCwyNyw1NF0sYz1mdW5jdGlvbigpe2Zvcih2YXIgZT1uZXcgQXJyYXkoMjU2KSx0PTA7dDwyNTY7dCsrKWVbdF09dDwxMjg/dDw8MTp0PDwxXjI4Mztmb3IodmFyIHI9W10sbj1bXSxpPVtbXSxbXSxbXSxbXV0sbz1bW10sW10sW10sW11dLHM9MCxhPTAsYz0wO2M8MjU2OysrYyl7dmFyIGY9YV5hPDwxXmE8PDJeYTw8M15hPDw0O2Y9Zj4+PjheMjU1JmZeOTkscltzXT1mLG5bZl09czt2YXIgdT1lW3NdLGQ9ZVt1XSxoPWVbZF0sbD0yNTcqZVtmXV4xNjg0MzAwOCpmO2lbMF1bc109bDw8MjR8bD4+PjgsaVsxXVtzXT1sPDwxNnxsPj4+MTYsaVsyXVtzXT1sPDw4fGw+Pj4yNCxpWzNdW3NdPWwsbD0xNjg0MzAwOSpoXjY1NTM3KmReMjU3KnVeMTY4NDMwMDgqcyxvWzBdW2ZdPWw8PDI0fGw+Pj44LG9bMV1bZl09bDw8MTZ8bD4+PjE2LG9bMl1bZl09bDw8OHxsPj4+MjQsb1szXVtmXT1sLDA9PT1zP3M9YT0xOihzPXVeZVtlW2VbaF51XV1dLGFePWVbZVthXV0pfXJldHVybntTQk9YOnIsSU5WX1NCT1g6bixTVUJfTUlYOmksSU5WX1NVQl9NSVg6b319KCk7ZnVuY3Rpb24gZihlKXt0aGlzLl9rZXk9aShlKSx0aGlzLl9yZXNldCgpfWYuYmxvY2tTaXplPTE2LGYua2V5U2l6ZT0zMixmLnByb3RvdHlwZS5ibG9ja1NpemU9Zi5ibG9ja1NpemUsZi5wcm90b3R5cGUua2V5U2l6ZT1mLmtleVNpemUsZi5wcm90b3R5cGUuX3Jlc2V0PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuX2tleSx0PWUubGVuZ3RoLHI9dCs2LG49NCoocisxKSxpPVtdLG89MDtvPHQ7bysrKWlbb109ZVtvXTtmb3Iobz10O288bjtvKyspe3ZhciBzPWlbby0xXTtvJXQ9PTA/KHM9czw8OHxzPj4+MjQscz1jLlNCT1hbcz4+PjI0XTw8MjR8Yy5TQk9YW3M+Pj4xNiYyNTVdPDwxNnxjLlNCT1hbcz4+PjgmMjU1XTw8OHxjLlNCT1hbMjU1JnNdLHNePWFbby90fDBdPDwyNCk6dD42JiZvJXQ9PTQmJihzPWMuU0JPWFtzPj4+MjRdPDwyNHxjLlNCT1hbcz4+PjE2JjI1NV08PDE2fGMuU0JPWFtzPj4+OCYyNTVdPDw4fGMuU0JPWFsyNTUmc10pLGlbb109aVtvLXRdXnN9Zm9yKHZhciBmPVtdLHU9MDt1PG47dSsrKXt2YXIgZD1uLXUsaD1pW2QtKHUlND8wOjQpXTtmW3VdPXU8NHx8ZDw9ND9oOmMuSU5WX1NVQl9NSVhbMF1bYy5TQk9YW2g+Pj4yNF1dXmMuSU5WX1NVQl9NSVhbMV1bYy5TQk9YW2g+Pj4xNiYyNTVdXV5jLklOVl9TVUJfTUlYWzJdW2MuU0JPWFtoPj4+OCYyNTVdXV5jLklOVl9TVUJfTUlYWzNdW2MuU0JPWFsyNTUmaF1dfXRoaXMuX25Sb3VuZHM9cix0aGlzLl9rZXlTY2hlZHVsZT1pLHRoaXMuX2ludktleVNjaGVkdWxlPWZ9LGYucHJvdG90eXBlLmVuY3J5cHRCbG9ja1Jhdz1mdW5jdGlvbihlKXtyZXR1cm4gcyhlPWkoZSksdGhpcy5fa2V5U2NoZWR1bGUsYy5TVUJfTUlYLGMuU0JPWCx0aGlzLl9uUm91bmRzKX0sZi5wcm90b3R5cGUuZW5jcnlwdEJsb2NrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZW5jcnlwdEJsb2NrUmF3KGUpLHI9bi5hbGxvY1Vuc2FmZSgxNik7cmV0dXJuIHIud3JpdGVVSW50MzJCRSh0WzBdLDApLHIud3JpdGVVSW50MzJCRSh0WzFdLDQpLHIud3JpdGVVSW50MzJCRSh0WzJdLDgpLHIud3JpdGVVSW50MzJCRSh0WzNdLDEyKSxyfSxmLnByb3RvdHlwZS5kZWNyeXB0QmxvY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9KGU9aShlKSlbMV07ZVsxXT1lWzNdLGVbM109dDt2YXIgcj1zKGUsdGhpcy5faW52S2V5U2NoZWR1bGUsYy5JTlZfU1VCX01JWCxjLklOVl9TQk9YLHRoaXMuX25Sb3VuZHMpLG89bi5hbGxvY1Vuc2FmZSgxNik7cmV0dXJuIG8ud3JpdGVVSW50MzJCRShyWzBdLDApLG8ud3JpdGVVSW50MzJCRShyWzNdLDQpLG8ud3JpdGVVSW50MzJCRShyWzJdLDgpLG8ud3JpdGVVSW50MzJCRShyWzFdLDEyKSxvfSxmLnByb3RvdHlwZS5zY3J1Yj1mdW5jdGlvbigpe28odGhpcy5fa2V5U2NoZWR1bGUpLG8odGhpcy5faW52S2V5U2NoZWR1bGUpLG8odGhpcy5fa2V5KX0sZS5leHBvcnRzLkFFUz1mfSwyNDIyOihlLHQscik9Pnt2YXIgbj1yKDQ0OTcpLGk9cig5NTA5KS5CdWZmZXIsbz1yKDEwMjcpLHM9cig1NzE3KSxhPXIoMzI4OCksYz1yKDcyOTUpLGY9cig2ODUpO2Z1bmN0aW9uIHUoZSx0LHIscyl7by5jYWxsKHRoaXMpO3ZhciBjPWkuYWxsb2MoNCwwKTt0aGlzLl9jaXBoZXI9bmV3IG4uQUVTKHQpO3ZhciB1PXRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soYyk7dGhpcy5fZ2hhc2g9bmV3IGEodSkscj1mdW5jdGlvbihlLHQscil7aWYoMTI9PT10Lmxlbmd0aClyZXR1cm4gZS5fZmluSUQ9aS5jb25jYXQoW3QsaS5mcm9tKFswLDAsMCwxXSldKSxpLmNvbmNhdChbdCxpLmZyb20oWzAsMCwwLDJdKV0pO3ZhciBuPW5ldyBhKHIpLG89dC5sZW5ndGgscz1vJTE2O24udXBkYXRlKHQpLHMmJihzPTE2LXMsbi51cGRhdGUoaS5hbGxvYyhzLDApKSksbi51cGRhdGUoaS5hbGxvYyg4LDApKTt2YXIgYz04Km8sdT1pLmFsbG9jKDgpO3Uud3JpdGVVSW50QkUoYywwLDgpLG4udXBkYXRlKHUpLGUuX2ZpbklEPW4uc3RhdGU7dmFyIGQ9aS5mcm9tKGUuX2ZpbklEKTtyZXR1cm4gZihkKSxkfSh0aGlzLHIsdSksdGhpcy5fcHJldj1pLmZyb20ociksdGhpcy5fY2FjaGU9aS5hbGxvY1Vuc2FmZSgwKSx0aGlzLl9zZWNDYWNoZT1pLmFsbG9jVW5zYWZlKDApLHRoaXMuX2RlY3J5cHQ9cyx0aGlzLl9hbGVuPTAsdGhpcy5fbGVuPTAsdGhpcy5fbW9kZT1lLHRoaXMuX2F1dGhUYWc9bnVsbCx0aGlzLl9jYWxsZWQ9ITF9cyh1LG8pLHUucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24oZSl7aWYoIXRoaXMuX2NhbGxlZCYmdGhpcy5fYWxlbil7dmFyIHQ9MTYtdGhpcy5fYWxlbiUxNjt0PDE2JiYodD1pLmFsbG9jKHQsMCksdGhpcy5fZ2hhc2gudXBkYXRlKHQpKX10aGlzLl9jYWxsZWQ9ITA7dmFyIHI9dGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsZSk7cmV0dXJuIHRoaXMuX2RlY3J5cHQ/dGhpcy5fZ2hhc2gudXBkYXRlKGUpOnRoaXMuX2doYXNoLnVwZGF0ZShyKSx0aGlzLl9sZW4rPWUubGVuZ3RoLHJ9LHUucHJvdG90eXBlLl9maW5hbD1mdW5jdGlvbigpe2lmKHRoaXMuX2RlY3J5cHQmJiF0aGlzLl9hdXRoVGFnKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YVwiKTt2YXIgZT1jKHRoaXMuX2doYXNoLmZpbmFsKDgqdGhpcy5fYWxlbiw4KnRoaXMuX2xlbiksdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpO2lmKHRoaXMuX2RlY3J5cHQmJmZ1bmN0aW9uKGUsdCl7dmFyIHI9MDtlLmxlbmd0aCE9PXQubGVuZ3RoJiZyKys7Zm9yKHZhciBuPU1hdGgubWluKGUubGVuZ3RoLHQubGVuZ3RoKSxpPTA7aTxuOysraSlyKz1lW2ldXnRbaV07cmV0dXJuIHJ9KGUsdGhpcy5fYXV0aFRhZykpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhXCIpO3RoaXMuX2F1dGhUYWc9ZSx0aGlzLl9jaXBoZXIuc2NydWIoKX0sdS5wcm90b3R5cGUuZ2V0QXV0aFRhZz1mdW5jdGlvbigpe2lmKHRoaXMuX2RlY3J5cHR8fCFpLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKXRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlXCIpO3JldHVybiB0aGlzLl9hdXRoVGFnfSx1LnByb3RvdHlwZS5zZXRBdXRoVGFnPWZ1bmN0aW9uKGUpe2lmKCF0aGlzLl9kZWNyeXB0KXRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlXCIpO3RoaXMuX2F1dGhUYWc9ZX0sdS5wcm90b3R5cGUuc2V0QUFEPWZ1bmN0aW9uKGUpe2lmKHRoaXMuX2NhbGxlZCl0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGVcIik7dGhpcy5fZ2hhc2gudXBkYXRlKGUpLHRoaXMuX2FsZW4rPWUubGVuZ3RofSxlLmV4cG9ydHM9dX0sNDY5NjooZSx0LHIpPT57dmFyIG49cigxNDk0KSxpPXIoNjE5Myksbz1yKDQ5NDYpO3QuY3JlYXRlQ2lwaGVyPXQuQ2lwaGVyPW4uY3JlYXRlQ2lwaGVyLHQuY3JlYXRlQ2lwaGVyaXY9dC5DaXBoZXJpdj1uLmNyZWF0ZUNpcGhlcml2LHQuY3JlYXRlRGVjaXBoZXI9dC5EZWNpcGhlcj1pLmNyZWF0ZURlY2lwaGVyLHQuY3JlYXRlRGVjaXBoZXJpdj10LkRlY2lwaGVyaXY9aS5jcmVhdGVEZWNpcGhlcml2LHQubGlzdENpcGhlcnM9dC5nZXRDaXBoZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKG8pfX0sNjE5MzooZSx0LHIpPT57dmFyIG49cigyNDIyKSxpPXIoOTUwOSkuQnVmZmVyLG89cig0NSkscz1yKDU5NjkpLGE9cigxMDI3KSxjPXIoNDQ5NyksZj1yKDMwNDgpO2Z1bmN0aW9uIHUoZSx0LHIpe2EuY2FsbCh0aGlzKSx0aGlzLl9jYWNoZT1uZXcgZCx0aGlzLl9sYXN0PXZvaWQgMCx0aGlzLl9jaXBoZXI9bmV3IGMuQUVTKHQpLHRoaXMuX3ByZXY9aS5mcm9tKHIpLHRoaXMuX21vZGU9ZSx0aGlzLl9hdXRvcGFkZGluZz0hMH1mdW5jdGlvbiBkKCl7dGhpcy5jYWNoZT1pLmFsbG9jVW5zYWZlKDApfWZ1bmN0aW9uIGgoZSx0LHIpe3ZhciBhPW9bZS50b0xvd2VyQ2FzZSgpXTtpZighYSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBzdWl0ZSB0eXBlXCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiByJiYocj1pLmZyb20ocikpLFwiR0NNXCIhPT1hLm1vZGUmJnIubGVuZ3RoIT09YS5pdil0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBpdiBsZW5ndGggXCIrci5sZW5ndGgpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1pLmZyb20odCkpLHQubGVuZ3RoIT09YS5rZXkvOCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBrZXkgbGVuZ3RoIFwiK3QubGVuZ3RoKTtyZXR1cm5cInN0cmVhbVwiPT09YS50eXBlP25ldyBzKGEubW9kdWxlLHQsciwhMCk6XCJhdXRoXCI9PT1hLnR5cGU/bmV3IG4oYS5tb2R1bGUsdCxyLCEwKTpuZXcgdShhLm1vZHVsZSx0LHIpfXIoNTcxNykodSxhKSx1LnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKGUpe3ZhciB0LHI7dGhpcy5fY2FjaGUuYWRkKGUpO2Zvcih2YXIgbj1bXTt0PXRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZyk7KXI9dGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsdCksbi5wdXNoKHIpO3JldHVybiBpLmNvbmNhdChuKX0sdS5wcm90b3R5cGUuX2ZpbmFsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fY2FjaGUuZmx1c2goKTtpZih0aGlzLl9hdXRvcGFkZGluZylyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZVsxNV07aWYodDwxfHx0PjE2KXRocm93IG5ldyBFcnJvcihcInVuYWJsZSB0byBkZWNyeXB0IGRhdGFcIik7Zm9yKHZhciByPS0xOysrcjx0OylpZihlW3IrKDE2LXQpXSE9PXQpdGhyb3cgbmV3IEVycm9yKFwidW5hYmxlIHRvIGRlY3J5cHQgZGF0YVwiKTtpZigxNiE9PXQpcmV0dXJuIGUuc2xpY2UoMCwxNi10KX0odGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsZSkpO2lmKGUpdGhyb3cgbmV3IEVycm9yKFwiZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoXCIpfSx1LnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fYXV0b3BhZGRpbmc9ISFlLHRoaXN9LGQucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXt0aGlzLmNhY2hlPWkuY29uY2F0KFt0aGlzLmNhY2hlLGVdKX0sZC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpe2lmKHRoaXMuY2FjaGUubGVuZ3RoPjE2KXJldHVybiB0PXRoaXMuY2FjaGUuc2xpY2UoMCwxNiksdGhpcy5jYWNoZT10aGlzLmNhY2hlLnNsaWNlKDE2KSx0fWVsc2UgaWYodGhpcy5jYWNoZS5sZW5ndGg+PTE2KXJldHVybiB0PXRoaXMuY2FjaGUuc2xpY2UoMCwxNiksdGhpcy5jYWNoZT10aGlzLmNhY2hlLnNsaWNlKDE2KSx0O3JldHVybiBudWxsfSxkLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2lmKHRoaXMuY2FjaGUubGVuZ3RoKXJldHVybiB0aGlzLmNhY2hlfSx0LmNyZWF0ZURlY2lwaGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9b1tlLnRvTG93ZXJDYXNlKCldO2lmKCFyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIHN1aXRlIHR5cGVcIik7dmFyIG49Zih0LCExLHIua2V5LHIuaXYpO3JldHVybiBoKGUsbi5rZXksbi5pdil9LHQuY3JlYXRlRGVjaXBoZXJpdj1ofSwxNDk0OihlLHQscik9Pnt2YXIgbj1yKDQ1KSxpPXIoMjQyMiksbz1yKDk1MDkpLkJ1ZmZlcixzPXIoNTk2OSksYT1yKDEwMjcpLGM9cig0NDk3KSxmPXIoMzA0OCk7ZnVuY3Rpb24gdShlLHQscil7YS5jYWxsKHRoaXMpLHRoaXMuX2NhY2hlPW5ldyBoLHRoaXMuX2NpcGhlcj1uZXcgYy5BRVModCksdGhpcy5fcHJldj1vLmZyb20ociksdGhpcy5fbW9kZT1lLHRoaXMuX2F1dG9wYWRkaW5nPSEwfXIoNTcxNykodSxhKSx1LnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKGUpe3ZhciB0LHI7dGhpcy5fY2FjaGUuYWRkKGUpO2Zvcih2YXIgbj1bXTt0PXRoaXMuX2NhY2hlLmdldCgpOylyPXRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLHQpLG4ucHVzaChyKTtyZXR1cm4gby5jb25jYXQobil9O3ZhciBkPW8uYWxsb2MoMTYsMTYpO2Z1bmN0aW9uIGgoKXt0aGlzLmNhY2hlPW8uYWxsb2NVbnNhZmUoMCl9ZnVuY3Rpb24gbChlLHQscil7dmFyIGE9bltlLnRvTG93ZXJDYXNlKCldO2lmKCFhKXRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIHN1aXRlIHR5cGVcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PW8uZnJvbSh0KSksdC5sZW5ndGghPT1hLmtleS84KXRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGtleSBsZW5ndGggXCIrdC5sZW5ndGgpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiByJiYocj1vLmZyb20ocikpLFwiR0NNXCIhPT1hLm1vZGUmJnIubGVuZ3RoIT09YS5pdil0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBpdiBsZW5ndGggXCIrci5sZW5ndGgpO3JldHVyblwic3RyZWFtXCI9PT1hLnR5cGU/bmV3IHMoYS5tb2R1bGUsdCxyKTpcImF1dGhcIj09PWEudHlwZT9uZXcgaShhLm1vZHVsZSx0LHIpOm5ldyB1KGEubW9kdWxlLHQscil9dS5wcm90b3R5cGUuX2ZpbmFsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fY2FjaGUuZmx1c2goKTtpZih0aGlzLl9hdXRvcGFkZGluZylyZXR1cm4gZT10aGlzLl9tb2RlLmVuY3J5cHQodGhpcyxlKSx0aGlzLl9jaXBoZXIuc2NydWIoKSxlO2lmKCFlLmVxdWFscyhkKSl0aHJvdyB0aGlzLl9jaXBoZXIuc2NydWIoKSxuZXcgRXJyb3IoXCJkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGhcIil9LHUucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9hdXRvcGFkZGluZz0hIWUsdGhpc30saC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3RoaXMuY2FjaGU9by5jb25jYXQoW3RoaXMuY2FjaGUsZV0pfSxoLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtpZih0aGlzLmNhY2hlLmxlbmd0aD4xNSl7dmFyIGU9dGhpcy5jYWNoZS5zbGljZSgwLDE2KTtyZXR1cm4gdGhpcy5jYWNoZT10aGlzLmNhY2hlLnNsaWNlKDE2KSxlfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2Zvcih2YXIgZT0xNi10aGlzLmNhY2hlLmxlbmd0aCx0PW8uYWxsb2NVbnNhZmUoZSkscj0tMTsrK3I8ZTspdC53cml0ZVVJbnQ4KGUscik7cmV0dXJuIG8uY29uY2F0KFt0aGlzLmNhY2hlLHRdKX0sdC5jcmVhdGVDaXBoZXJpdj1sLHQuY3JlYXRlQ2lwaGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bltlLnRvTG93ZXJDYXNlKCldO2lmKCFyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIHN1aXRlIHR5cGVcIik7dmFyIGk9Zih0LCExLHIua2V5LHIuaXYpO3JldHVybiBsKGUsaS5rZXksaS5pdil9fSwzMjg4OihlLHQscik9Pnt2YXIgbj1yKDk1MDkpLkJ1ZmZlcixpPW4uYWxsb2MoMTYsMCk7ZnVuY3Rpb24gbyhlKXt2YXIgdD1uLmFsbG9jVW5zYWZlKDE2KTtyZXR1cm4gdC53cml0ZVVJbnQzMkJFKGVbMF0+Pj4wLDApLHQud3JpdGVVSW50MzJCRShlWzFdPj4+MCw0KSx0LndyaXRlVUludDMyQkUoZVsyXT4+PjAsOCksdC53cml0ZVVJbnQzMkJFKGVbM10+Pj4wLDEyKSx0fWZ1bmN0aW9uIHMoZSl7dGhpcy5oPWUsdGhpcy5zdGF0ZT1uLmFsbG9jKDE2LDApLHRoaXMuY2FjaGU9bi5hbGxvY1Vuc2FmZSgwKX1zLnByb3RvdHlwZS5naGFzaD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9LTE7Kyt0PGUubGVuZ3RoOyl0aGlzLnN0YXRlW3RdXj1lW3RdO3RoaXMuX211bHRpcGx5KCl9LHMucHJvdG90eXBlLl9tdWx0aXBseT1mdW5jdGlvbigpe2Zvcih2YXIgZSx0LHIsbj1bKGU9dGhpcy5oKS5yZWFkVUludDMyQkUoMCksZS5yZWFkVUludDMyQkUoNCksZS5yZWFkVUludDMyQkUoOCksZS5yZWFkVUludDMyQkUoMTIpXSxpPVswLDAsMCwwXSxzPS0xOysrczwxMjg7KXtmb3IoMCE9KHRoaXMuc3RhdGVbfn4ocy84KV0mMTw8Ny1zJTgpJiYoaVswXV49blswXSxpWzFdXj1uWzFdLGlbMl1ePW5bMl0saVszXV49blszXSkscj0wIT0oMSZuWzNdKSx0PTM7dD4wO3QtLSluW3RdPW5bdF0+Pj4xfCgxJm5bdC0xXSk8PDMxO25bMF09blswXT4+PjEsciYmKG5bMF09blswXV4yMjU8PDI0KX10aGlzLnN0YXRlPW8oaSl9LHMucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihlKXt2YXIgdDtmb3IodGhpcy5jYWNoZT1uLmNvbmNhdChbdGhpcy5jYWNoZSxlXSk7dGhpcy5jYWNoZS5sZW5ndGg+PTE2Oyl0PXRoaXMuY2FjaGUuc2xpY2UoMCwxNiksdGhpcy5jYWNoZT10aGlzLmNhY2hlLnNsaWNlKDE2KSx0aGlzLmdoYXNoKHQpfSxzLnByb3RvdHlwZS5maW5hbD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmNhY2hlLmxlbmd0aCYmdGhpcy5naGFzaChuLmNvbmNhdChbdGhpcy5jYWNoZSxpXSwxNikpLHRoaXMuZ2hhc2gobyhbMCxlLDAsdF0pKSx0aGlzLnN0YXRlfSxlLmV4cG9ydHM9c30sNjg1OmU9PntlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9ZS5sZW5ndGg7ci0tOyl7aWYoMjU1IT09KHQ9ZS5yZWFkVUludDgocikpKXt0KyssZS53cml0ZVVJbnQ4KHQscik7YnJlYWt9ZS53cml0ZVVJbnQ4KDAscil9fX0sNTI5MjooZSx0LHIpPT57dmFyIG49cig3Mjk1KTt0LmVuY3J5cHQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uKHQsZS5fcHJldik7cmV0dXJuIGUuX3ByZXY9ZS5fY2lwaGVyLmVuY3J5cHRCbG9jayhyKSxlLl9wcmV2fSx0LmRlY3J5cHQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLl9wcmV2O2UuX3ByZXY9dDt2YXIgaT1lLl9jaXBoZXIuZGVjcnlwdEJsb2NrKHQpO3JldHVybiBuKGkscil9fSw2MzExOihlLHQscik9Pnt2YXIgbj1yKDk1MDkpLkJ1ZmZlcixpPXIoNzI5NSk7ZnVuY3Rpb24gbyhlLHQscil7dmFyIG89dC5sZW5ndGgscz1pKHQsZS5fY2FjaGUpO3JldHVybiBlLl9jYWNoZT1lLl9jYWNoZS5zbGljZShvKSxlLl9wcmV2PW4uY29uY2F0KFtlLl9wcmV2LHI/dDpzXSksc310LmVuY3J5cHQ9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgaSxzPW4uYWxsb2NVbnNhZmUoMCk7dC5sZW5ndGg7KXtpZigwPT09ZS5fY2FjaGUubGVuZ3RoJiYoZS5fY2FjaGU9ZS5fY2lwaGVyLmVuY3J5cHRCbG9jayhlLl9wcmV2KSxlLl9wcmV2PW4uYWxsb2NVbnNhZmUoMCkpLCEoZS5fY2FjaGUubGVuZ3RoPD10Lmxlbmd0aCkpe3M9bi5jb25jYXQoW3MsbyhlLHQscildKTticmVha31pPWUuX2NhY2hlLmxlbmd0aCxzPW4uY29uY2F0KFtzLG8oZSx0LnNsaWNlKDAsaSkscildKSx0PXQuc2xpY2UoaSl9cmV0dXJuIHN9fSwxNTEwOihlLHQscik9Pnt2YXIgbj1yKDk1MDkpLkJ1ZmZlcjtmdW5jdGlvbiBpKGUsdCxyKXtmb3IodmFyIG4saSxzPS0xLGE9MDsrK3M8ODspbj10JjE8PDctcz8xMjg6MCxhKz0oMTI4JihpPWUuX2NpcGhlci5lbmNyeXB0QmxvY2soZS5fcHJldilbMF1ebikpPj5zJTgsZS5fcHJldj1vKGUuX3ByZXYscj9uOmkpO3JldHVybiBhfWZ1bmN0aW9uIG8oZSx0KXt2YXIgcj1lLmxlbmd0aCxpPS0xLG89bi5hbGxvY1Vuc2FmZShlLmxlbmd0aCk7Zm9yKGU9bi5jb25jYXQoW2Usbi5mcm9tKFt0XSldKTsrK2k8cjspb1tpXT1lW2ldPDwxfGVbaSsxXT4+NztyZXR1cm4gb310LmVuY3J5cHQ9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbz10Lmxlbmd0aCxzPW4uYWxsb2NVbnNhZmUobyksYT0tMTsrK2E8bzspc1thXT1pKGUsdFthXSxyKTtyZXR1cm4gc319LDE5NjQ6KGUsdCxyKT0+e3ZhciBuPXIoOTUwOSkuQnVmZmVyO2Z1bmN0aW9uIGkoZSx0LHIpe3ZhciBpPWUuX2NpcGhlci5lbmNyeXB0QmxvY2soZS5fcHJldilbMF1edDtyZXR1cm4gZS5fcHJldj1uLmNvbmNhdChbZS5fcHJldi5zbGljZSgxKSxuLmZyb20oW3I/dDppXSldKSxpfXQuZW5jcnlwdD1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBvPXQubGVuZ3RoLHM9bi5hbGxvY1Vuc2FmZShvKSxhPS0xOysrYTxvOylzW2FdPWkoZSx0W2FdLHIpO3JldHVybiBzfX0sNjAwOTooZSx0LHIpPT57dmFyIG49cig3Mjk1KSxpPXIoOTUwOSkuQnVmZmVyLG89cig2ODUpO2Z1bmN0aW9uIHMoZSl7dmFyIHQ9ZS5fY2lwaGVyLmVuY3J5cHRCbG9ja1JhdyhlLl9wcmV2KTtyZXR1cm4gbyhlLl9wcmV2KSx0fXQuZW5jcnlwdD1mdW5jdGlvbihlLHQpe3ZhciByPU1hdGguY2VpbCh0Lmxlbmd0aC8xNiksbz1lLl9jYWNoZS5sZW5ndGg7ZS5fY2FjaGU9aS5jb25jYXQoW2UuX2NhY2hlLGkuYWxsb2NVbnNhZmUoMTYqcildKTtmb3IodmFyIGE9MDthPHI7YSsrKXt2YXIgYz1zKGUpLGY9bysxNiphO2UuX2NhY2hlLndyaXRlVUludDMyQkUoY1swXSxmKzApLGUuX2NhY2hlLndyaXRlVUludDMyQkUoY1sxXSxmKzQpLGUuX2NhY2hlLndyaXRlVUludDMyQkUoY1syXSxmKzgpLGUuX2NhY2hlLndyaXRlVUludDMyQkUoY1szXSxmKzEyKX12YXIgdT1lLl9jYWNoZS5zbGljZSgwLHQubGVuZ3RoKTtyZXR1cm4gZS5fY2FjaGU9ZS5fY2FjaGUuc2xpY2UodC5sZW5ndGgpLG4odCx1KX19LDEwODQ6KGUsdCk9Pnt0LmVuY3J5cHQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5fY2lwaGVyLmVuY3J5cHRCbG9jayh0KX0sdC5kZWNyeXB0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX2NpcGhlci5kZWNyeXB0QmxvY2sodCl9fSw0NTooZSx0LHIpPT57dmFyIG49e0VDQjpyKDEwODQpLENCQzpyKDUyOTIpLENGQjpyKDYzMTEpLENGQjg6cigxOTY0KSxDRkIxOnIoMTUxMCksT0ZCOnIoODg2MSksQ1RSOnIoNjAwOSksR0NNOnIoNjAwOSl9LGk9cig0OTQ2KTtmb3IodmFyIG8gaW4gaSlpW29dLm1vZHVsZT1uW2lbb10ubW9kZV07ZS5leHBvcnRzPWl9LDg4NjE6KGUsdCxyKT0+e3ZhciBuPXIoODc2NCkuQnVmZmVyLGk9cig3Mjk1KTtmdW5jdGlvbiBvKGUpe3JldHVybiBlLl9wcmV2PWUuX2NpcGhlci5lbmNyeXB0QmxvY2soZS5fcHJldiksZS5fcHJldn10LmVuY3J5cHQ9ZnVuY3Rpb24oZSx0KXtmb3IoO2UuX2NhY2hlLmxlbmd0aDx0Lmxlbmd0aDspZS5fY2FjaGU9bi5jb25jYXQoW2UuX2NhY2hlLG8oZSldKTt2YXIgcj1lLl9jYWNoZS5zbGljZSgwLHQubGVuZ3RoKTtyZXR1cm4gZS5fY2FjaGU9ZS5fY2FjaGUuc2xpY2UodC5sZW5ndGgpLGkodCxyKX19LDU5Njk6KGUsdCxyKT0+e3ZhciBuPXIoNDQ5NyksaT1yKDk1MDkpLkJ1ZmZlcixvPXIoMTAyNyk7ZnVuY3Rpb24gcyhlLHQscixzKXtvLmNhbGwodGhpcyksdGhpcy5fY2lwaGVyPW5ldyBuLkFFUyh0KSx0aGlzLl9wcmV2PWkuZnJvbShyKSx0aGlzLl9jYWNoZT1pLmFsbG9jVW5zYWZlKDApLHRoaXMuX3NlY0NhY2hlPWkuYWxsb2NVbnNhZmUoMCksdGhpcy5fZGVjcnlwdD1zLHRoaXMuX21vZGU9ZX1yKDU3MTcpKHMsbykscy5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsZSx0aGlzLl9kZWNyeXB0KX0scy5wcm90b3R5cGUuX2ZpbmFsPWZ1bmN0aW9uKCl7dGhpcy5fY2lwaGVyLnNjcnViKCl9LGUuZXhwb3J0cz1zfSwzNjE0OihlLHQscik9Pnt2YXIgbj1yKDc2NjcpLGk9cig0Njk2KSxvPXIoNDUpLHM9cig5NzE1KSxhPXIoMzA0OCk7ZnVuY3Rpb24gYyhlLHQscil7aWYoZT1lLnRvTG93ZXJDYXNlKCksb1tlXSlyZXR1cm4gaS5jcmVhdGVDaXBoZXJpdihlLHQscik7aWYoc1tlXSlyZXR1cm4gbmV3IG4oe2tleTp0LGl2OnIsbW9kZTplfSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgc3VpdGUgdHlwZVwiKX1mdW5jdGlvbiBmKGUsdCxyKXtpZihlPWUudG9Mb3dlckNhc2UoKSxvW2VdKXJldHVybiBpLmNyZWF0ZURlY2lwaGVyaXYoZSx0LHIpO2lmKHNbZV0pcmV0dXJuIG5ldyBuKHtrZXk6dCxpdjpyLG1vZGU6ZSxkZWNyeXB0OiEwfSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgc3VpdGUgdHlwZVwiKX10LmNyZWF0ZUNpcGhlcj10LkNpcGhlcj1mdW5jdGlvbihlLHQpe3ZhciByLG47aWYoZT1lLnRvTG93ZXJDYXNlKCksb1tlXSlyPW9bZV0ua2V5LG49b1tlXS5pdjtlbHNle2lmKCFzW2VdKXRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIHN1aXRlIHR5cGVcIik7cj04KnNbZV0ua2V5LG49c1tlXS5pdn12YXIgaT1hKHQsITEscixuKTtyZXR1cm4gYyhlLGkua2V5LGkuaXYpfSx0LmNyZWF0ZUNpcGhlcml2PXQuQ2lwaGVyaXY9Yyx0LmNyZWF0ZURlY2lwaGVyPXQuRGVjaXBoZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcixuO2lmKGU9ZS50b0xvd2VyQ2FzZSgpLG9bZV0pcj1vW2VdLmtleSxuPW9bZV0uaXY7ZWxzZXtpZighc1tlXSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBzdWl0ZSB0eXBlXCIpO3I9OCpzW2VdLmtleSxuPXNbZV0uaXZ9dmFyIGk9YSh0LCExLHIsbik7cmV0dXJuIGYoZSxpLmtleSxpLml2KX0sdC5jcmVhdGVEZWNpcGhlcml2PXQuRGVjaXBoZXJpdj1mLHQubGlzdENpcGhlcnM9dC5nZXRDaXBoZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHMpLmNvbmNhdChpLmdldENpcGhlcnMoKSl9fSw3NjY3OihlLHQscik9Pnt2YXIgbj1yKDEwMjcpLGk9cig1MjUxKSxvPXIoNTcxNykscz1yKDk1MDkpLkJ1ZmZlcixhPXtcImRlcy1lZGUzLWNiY1wiOmkuQ0JDLmluc3RhbnRpYXRlKGkuRURFKSxcImRlcy1lZGUzXCI6aS5FREUsXCJkZXMtZWRlLWNiY1wiOmkuQ0JDLmluc3RhbnRpYXRlKGkuRURFKSxcImRlcy1lZGVcIjppLkVERSxcImRlcy1jYmNcIjppLkNCQy5pbnN0YW50aWF0ZShpLkRFUyksXCJkZXMtZWNiXCI6aS5ERVN9O2Z1bmN0aW9uIGMoZSl7bi5jYWxsKHRoaXMpO3ZhciB0LHI9ZS5tb2RlLnRvTG93ZXJDYXNlKCksaT1hW3JdO3Q9ZS5kZWNyeXB0P1wiZGVjcnlwdFwiOlwiZW5jcnlwdFwiO3ZhciBvPWUua2V5O3MuaXNCdWZmZXIobyl8fChvPXMuZnJvbShvKSksXCJkZXMtZWRlXCIhPT1yJiZcImRlcy1lZGUtY2JjXCIhPT1yfHwobz1zLmNvbmNhdChbbyxvLnNsaWNlKDAsOCldKSk7dmFyIGM9ZS5pdjtzLmlzQnVmZmVyKGMpfHwoYz1zLmZyb20oYykpLHRoaXMuX2Rlcz1pLmNyZWF0ZSh7a2V5Om8saXY6Yyx0eXBlOnR9KX1hLmRlcz1hW1wiZGVzLWNiY1wiXSxhLmRlczM9YVtcImRlcy1lZGUzLWNiY1wiXSxlLmV4cG9ydHM9YyxvKGMsbiksYy5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gcy5mcm9tKHRoaXMuX2Rlcy51cGRhdGUoZSkpfSxjLnByb3RvdHlwZS5fZmluYWw9ZnVuY3Rpb24oKXtyZXR1cm4gcy5mcm9tKHRoaXMuX2Rlcy5maW5hbCgpKX19LDk3MTU6KGUsdCk9Pnt0W1wiZGVzLWVjYlwiXT17a2V5OjgsaXY6MH0sdFtcImRlcy1jYmNcIl09dC5kZXM9e2tleTo4LGl2Ojh9LHRbXCJkZXMtZWRlMy1jYmNcIl09dC5kZXMzPXtrZXk6MjQsaXY6OH0sdFtcImRlcy1lZGUzXCJdPXtrZXk6MjQsaXY6MH0sdFtcImRlcy1lZGUtY2JjXCJdPXtrZXk6MTYsaXY6OH0sdFtcImRlcy1lZGVcIl09e2tleToxNixpdjowfX0sMzY2MzooZSx0LHIpPT57dmFyIG49cig4NzY0KS5CdWZmZXIsaT1yKDM1NTApLG89cigxNzk4KTtmdW5jdGlvbiBzKGUpe3ZhciB0LHI9ZS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtkb3t0PW5ldyBpKG8ocikpfXdoaWxlKHQuY21wKGUubW9kdWx1cyk+PTB8fCF0LnVtb2QoZS5wcmltZTEpfHwhdC51bW9kKGUucHJpbWUyKSk7cmV0dXJuIHR9ZnVuY3Rpb24gYShlLHQpe3ZhciByPWZ1bmN0aW9uKGUpe3ZhciB0PXMoZSk7cmV0dXJue2JsaW5kZXI6dC50b1JlZChpLm1vbnQoZS5tb2R1bHVzKSkucmVkUG93KG5ldyBpKGUucHVibGljRXhwb25lbnQpKS5mcm9tUmVkKCksdW5ibGluZGVyOnQuaW52bShlLm1vZHVsdXMpfX0odCksbz10Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpLGE9bmV3IGkoZSkubXVsKHIuYmxpbmRlcikudW1vZCh0Lm1vZHVsdXMpLGM9YS50b1JlZChpLm1vbnQodC5wcmltZTEpKSxmPWEudG9SZWQoaS5tb250KHQucHJpbWUyKSksdT10LmNvZWZmaWNpZW50LGQ9dC5wcmltZTEsaD10LnByaW1lMixsPWMucmVkUG93KHQuZXhwb25lbnQxKS5mcm9tUmVkKCkscD1mLnJlZFBvdyh0LmV4cG9uZW50MikuZnJvbVJlZCgpLGI9bC5pc3ViKHApLmltdWwodSkudW1vZChkKS5pbXVsKGgpO3JldHVybiBwLmlhZGQoYikuaW11bChyLnVuYmxpbmRlcikudW1vZCh0Lm1vZHVsdXMpLnRvQXJyYXlMaWtlKG4sXCJiZVwiLG8pfWEuZ2V0cj1zLGUuZXhwb3J0cz1hfSw2MDQyOihlLHQscik9PntlLmV4cG9ydHM9cig1MjA3KX0sNDc0MzooZSx0LHIpPT57dmFyIG49cig5NTA5KS5CdWZmZXIsaT1yKDM0ODIpLG89cig4NDczKSxzPXIoNTcxNyksYT1yKDI5NTcpLGM9cig3NzUzKSxmPXIoNTIwNyk7ZnVuY3Rpb24gdShlKXtvLldyaXRhYmxlLmNhbGwodGhpcyk7dmFyIHQ9ZltlXTtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIG1lc3NhZ2UgZGlnZXN0XCIpO3RoaXMuX2hhc2hUeXBlPXQuaGFzaCx0aGlzLl9oYXNoPWkodC5oYXNoKSx0aGlzLl90YWc9dC5pZCx0aGlzLl9zaWduVHlwZT10LnNpZ259ZnVuY3Rpb24gZChlKXtvLldyaXRhYmxlLmNhbGwodGhpcyk7dmFyIHQ9ZltlXTtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIG1lc3NhZ2UgZGlnZXN0XCIpO3RoaXMuX2hhc2g9aSh0Lmhhc2gpLHRoaXMuX3RhZz10LmlkLHRoaXMuX3NpZ25UeXBlPXQuc2lnbn1mdW5jdGlvbiBoKGUpe3JldHVybiBuZXcgdShlKX1mdW5jdGlvbiBsKGUpe3JldHVybiBuZXcgZChlKX1PYmplY3Qua2V5cyhmKS5mb3JFYWNoKChmdW5jdGlvbihlKXtmW2VdLmlkPW4uZnJvbShmW2VdLmlkLFwiaGV4XCIpLGZbZS50b0xvd2VyQ2FzZSgpXT1mW2VdfSkpLHModSxvLldyaXRhYmxlKSx1LnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24oZSx0LHIpe3RoaXMuX2hhc2gudXBkYXRlKGUpLHIoKX0sdS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPW4uZnJvbShlLHQpKSx0aGlzLl9oYXNoLnVwZGF0ZShlKSx0aGlzfSx1LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKGUsdCl7dGhpcy5lbmQoKTt2YXIgcj10aGlzLl9oYXNoLmRpZ2VzdCgpLG49YShyLGUsdGhpcy5faGFzaFR5cGUsdGhpcy5fc2lnblR5cGUsdGhpcy5fdGFnKTtyZXR1cm4gdD9uLnRvU3RyaW5nKHQpOm59LHMoZCxvLldyaXRhYmxlKSxkLnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24oZSx0LHIpe3RoaXMuX2hhc2gudXBkYXRlKGUpLHIoKX0sZC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPW4uZnJvbShlLHQpKSx0aGlzLl9oYXNoLnVwZGF0ZShlKSx0aGlzfSxkLnByb3RvdHlwZS52ZXJpZnk9ZnVuY3Rpb24oZSx0LHIpe1wic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1uLmZyb20odCxyKSksdGhpcy5lbmQoKTt2YXIgaT10aGlzLl9oYXNoLmRpZ2VzdCgpO3JldHVybiBjKHQsaSxlLHRoaXMuX3NpZ25UeXBlLHRoaXMuX3RhZyl9LGUuZXhwb3J0cz17U2lnbjpoLFZlcmlmeTpsLGNyZWF0ZVNpZ246aCxjcmVhdGVWZXJpZnk6bH19LDI5NTc6KGUsdCxyKT0+e3ZhciBuPXIoOTUwOSkuQnVmZmVyLGk9cig3Mzk0KSxvPXIoMzY2Mykscz1yKDYyNjYpLmVjLGE9cigzNTUwKSxjPXIoOTgwKSxmPXIoMTMwOCk7ZnVuY3Rpb24gdShlLHQscixvKXtpZigoZT1uLmZyb20oZS50b0FycmF5KCkpKS5sZW5ndGg8dC5ieXRlTGVuZ3RoKCkpe3ZhciBzPW4uYWxsb2ModC5ieXRlTGVuZ3RoKCktZS5sZW5ndGgpO2U9bi5jb25jYXQoW3MsZV0pfXZhciBhPXIubGVuZ3RoLGM9ZnVuY3Rpb24oZSx0KXtlPShlPWQoZSx0KSkubW9kKHQpO3ZhciByPW4uZnJvbShlLnRvQXJyYXkoKSk7aWYoci5sZW5ndGg8dC5ieXRlTGVuZ3RoKCkpe3ZhciBpPW4uYWxsb2ModC5ieXRlTGVuZ3RoKCktci5sZW5ndGgpO3I9bi5jb25jYXQoW2kscl0pfXJldHVybiByfShyLHQpLGY9bi5hbGxvYyhhKTtmLmZpbGwoMSk7dmFyIHU9bi5hbGxvYyhhKTtyZXR1cm4gdT1pKG8sdSkudXBkYXRlKGYpLnVwZGF0ZShuLmZyb20oWzBdKSkudXBkYXRlKGUpLnVwZGF0ZShjKS5kaWdlc3QoKSxmPWkobyx1KS51cGRhdGUoZikuZGlnZXN0KCkse2s6dT1pKG8sdSkudXBkYXRlKGYpLnVwZGF0ZShuLmZyb20oWzFdKSkudXBkYXRlKGUpLnVwZGF0ZShjKS5kaWdlc3QoKSx2OmY9aShvLHUpLnVwZGF0ZShmKS5kaWdlc3QoKX19ZnVuY3Rpb24gZChlLHQpe3ZhciByPW5ldyBhKGUpLG49KGUubGVuZ3RoPDwzKS10LmJpdExlbmd0aCgpO3JldHVybiBuPjAmJnIuaXNocm4obikscn1mdW5jdGlvbiBoKGUsdCxyKXt2YXIgbyxzO2Rve2ZvcihvPW4uYWxsb2MoMCk7OCpvLmxlbmd0aDxlLmJpdExlbmd0aCgpOyl0LnY9aShyLHQuaykudXBkYXRlKHQudikuZGlnZXN0KCksbz1uLmNvbmNhdChbbyx0LnZdKTtzPWQobyxlKSx0Lms9aShyLHQuaykudXBkYXRlKHQudikudXBkYXRlKG4uZnJvbShbMF0pKS5kaWdlc3QoKSx0LnY9aShyLHQuaykudXBkYXRlKHQudikuZGlnZXN0KCl9d2hpbGUoLTEhPT1zLmNtcChlKSk7cmV0dXJuIHN9ZnVuY3Rpb24gbChlLHQscixuKXtyZXR1cm4gZS50b1JlZChhLm1vbnQocikpLnJlZFBvdyh0KS5mcm9tUmVkKCkubW9kKG4pfWUuZXhwb3J0cz1mdW5jdGlvbihlLHQscixpLHApe3ZhciBiPWModCk7aWYoYi5jdXJ2ZSl7aWYoXCJlY2RzYVwiIT09aSYmXCJlY2RzYS9yc2FcIiE9PWkpdGhyb3cgbmV3IEVycm9yKFwid3JvbmcgcHJpdmF0ZSBrZXkgdHlwZVwiKTtyZXR1cm4gZnVuY3Rpb24oZSx0KXt2YXIgcj1mW3QuY3VydmUuam9pbihcIi5cIildO2lmKCFyKXRocm93IG5ldyBFcnJvcihcInVua25vd24gY3VydmUgXCIrdC5jdXJ2ZS5qb2luKFwiLlwiKSk7dmFyIGk9bmV3IHMocikua2V5RnJvbVByaXZhdGUodC5wcml2YXRlS2V5KS5zaWduKGUpO3JldHVybiBuLmZyb20oaS50b0RFUigpKX0oZSxiKX1pZihcImRzYVwiPT09Yi50eXBlKXtpZihcImRzYVwiIT09aSl0aHJvdyBuZXcgRXJyb3IoXCJ3cm9uZyBwcml2YXRlIGtleSB0eXBlXCIpO3JldHVybiBmdW5jdGlvbihlLHQscil7Zm9yKHZhciBpLG89dC5wYXJhbXMucHJpdl9rZXkscz10LnBhcmFtcy5wLGM9dC5wYXJhbXMucSxmPXQucGFyYW1zLmcscD1uZXcgYSgwKSxiPWQoZSxjKS5tb2QoYykseT0hMSxnPXUobyxjLGUscik7ITE9PT15OylwPWwoZixpPWgoYyxnLHIpLHMsYyksMD09PSh5PWkuaW52bShjKS5pbXVsKGIuYWRkKG8ubXVsKHApKSkubW9kKGMpKS5jbXBuKDApJiYoeT0hMSxwPW5ldyBhKDApKTtyZXR1cm4gZnVuY3Rpb24oZSx0KXtlPWUudG9BcnJheSgpLHQ9dC50b0FycmF5KCksMTI4JmVbMF0mJihlPVswXS5jb25jYXQoZSkpLDEyOCZ0WzBdJiYodD1bMF0uY29uY2F0KHQpKTt2YXIgcj1bNDgsZS5sZW5ndGgrdC5sZW5ndGgrNCwyLGUubGVuZ3RoXTtyZXR1cm4gcj1yLmNvbmNhdChlLFsyLHQubGVuZ3RoXSx0KSxuLmZyb20ocil9KHAseSl9KGUsYixyKX1pZihcInJzYVwiIT09aSYmXCJlY2RzYS9yc2FcIiE9PWkpdGhyb3cgbmV3IEVycm9yKFwid3JvbmcgcHJpdmF0ZSBrZXkgdHlwZVwiKTtlPW4uY29uY2F0KFtwLGVdKTtmb3IodmFyIHk9Yi5tb2R1bHVzLmJ5dGVMZW5ndGgoKSxnPVswLDFdO2UubGVuZ3RoK2cubGVuZ3RoKzE8eTspZy5wdXNoKDI1NSk7Zy5wdXNoKDApO2Zvcih2YXIgbT0tMTsrK208ZS5sZW5ndGg7KWcucHVzaChlW21dKTtyZXR1cm4gbyhnLGIpfSxlLmV4cG9ydHMuZ2V0S2V5PXUsZS5leHBvcnRzLm1ha2VLZXk9aH0sNzc1MzooZSx0LHIpPT57dmFyIG49cig5NTA5KS5CdWZmZXIsaT1yKDM1NTApLG89cig2MjY2KS5lYyxzPXIoOTgwKSxhPXIoMTMwOCk7ZnVuY3Rpb24gYyhlLHQpe2lmKGUuY21wbigwKTw9MCl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpZ1wiKTtpZihlLmNtcCh0KT49dCl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpZ1wiKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsZix1KXt2YXIgZD1zKHIpO2lmKFwiZWNcIj09PWQudHlwZSl7aWYoXCJlY2RzYVwiIT09ZiYmXCJlY2RzYS9yc2FcIiE9PWYpdGhyb3cgbmV3IEVycm9yKFwid3JvbmcgcHVibGljIGtleSB0eXBlXCIpO3JldHVybiBmdW5jdGlvbihlLHQscil7dmFyIG49YVtyLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpvaW4oXCIuXCIpXTtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGN1cnZlIFwiK3IuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbihcIi5cIikpO3ZhciBpPW5ldyBvKG4pLHM9ci5kYXRhLnN1YmplY3RQcml2YXRlS2V5LmRhdGE7cmV0dXJuIGkudmVyaWZ5KHQsZSxzKX0oZSx0LGQpfWlmKFwiZHNhXCI9PT1kLnR5cGUpe2lmKFwiZHNhXCIhPT1mKXRocm93IG5ldyBFcnJvcihcIndyb25nIHB1YmxpYyBrZXkgdHlwZVwiKTtyZXR1cm4gZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIuZGF0YS5wLG89ci5kYXRhLnEsYT1yLmRhdGEuZyxmPXIuZGF0YS5wdWJfa2V5LHU9cy5zaWduYXR1cmUuZGVjb2RlKGUsXCJkZXJcIiksZD11LnMsaD11LnI7YyhkLG8pLGMoaCxvKTt2YXIgbD1pLm1vbnQobikscD1kLmludm0obyk7cmV0dXJuIDA9PT1hLnRvUmVkKGwpLnJlZFBvdyhuZXcgaSh0KS5tdWwocCkubW9kKG8pKS5mcm9tUmVkKCkubXVsKGYudG9SZWQobCkucmVkUG93KGgubXVsKHApLm1vZChvKSkuZnJvbVJlZCgpKS5tb2QobikubW9kKG8pLmNtcChoKX0oZSx0LGQpfWlmKFwicnNhXCIhPT1mJiZcImVjZHNhL3JzYVwiIT09Zil0aHJvdyBuZXcgRXJyb3IoXCJ3cm9uZyBwdWJsaWMga2V5IHR5cGVcIik7dD1uLmNvbmNhdChbdSx0XSk7Zm9yKHZhciBoPWQubW9kdWx1cy5ieXRlTGVuZ3RoKCksbD1bMV0scD0wO3QubGVuZ3RoK2wubGVuZ3RoKzI8aDspbC5wdXNoKDI1NSkscCsrO2wucHVzaCgwKTtmb3IodmFyIGI9LTE7KytiPHQubGVuZ3RoOylsLnB1c2godFtiXSk7bD1uLmZyb20obCk7dmFyIHk9aS5tb250KGQubW9kdWx1cyk7ZT0oZT1uZXcgaShlKS50b1JlZCh5KSkucmVkUG93KG5ldyBpKGQucHVibGljRXhwb25lbnQpKSxlPW4uZnJvbShlLmZyb21SZWQoKS50b0FycmF5KCkpO3ZhciBnPXA8OD8xOjA7Zm9yKGg9TWF0aC5taW4oZS5sZW5ndGgsbC5sZW5ndGgpLGUubGVuZ3RoIT09bC5sZW5ndGgmJihnPTEpLGI9LTE7KytiPGg7KWd8PWVbYl1ebFtiXTtyZXR1cm4gMD09PWd9fSw3Mjk1OihlLHQscik9Pnt2YXIgbj1yKDg3NjQpLkJ1ZmZlcjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9TWF0aC5taW4oZS5sZW5ndGgsdC5sZW5ndGgpLGk9bmV3IG4ociksbz0wO288cjsrK28paVtvXT1lW29dXnRbb107cmV0dXJuIGl9fSw4NzY0OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDk3NDIpLGk9cig2NDUpLG89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wuZm9yP1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKTpudWxsO3QuQnVmZmVyPWMsdC5TbG93QnVmZmVyPWZ1bmN0aW9uKGUpe3JldHVybitlIT1lJiYoZT0wKSxjLmFsbG9jKCtlKX0sdC5JTlNQRUNUX01BWF9CWVRFUz01MDt2YXIgcz0yMTQ3NDgzNjQ3O2Z1bmN0aW9uIGEoZSl7aWYoZT5zKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInK2UrJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpO3ZhciB0PW5ldyBVaW50OEFycmF5KGUpO3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YodCxjLnByb3RvdHlwZSksdH1mdW5jdGlvbiBjKGUsdCxyKXtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInKTtyZXR1cm4gZChlKX1yZXR1cm4gZihlLHQscil9ZnVuY3Rpb24gZihlLHQscil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJlwiXCIhPT10fHwodD1cInV0ZjhcIiksIWMuaXNFbmNvZGluZyh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrdCk7dmFyIHI9MHxiKGUsdCksbj1hKHIpLGk9bi53cml0ZShlLHQpO3JldHVybiBpIT09ciYmKG49bi5zbGljZSgwLGkpKSxufShlLHQpO2lmKEFycmF5QnVmZmVyLmlzVmlldyhlKSlyZXR1cm4gZnVuY3Rpb24oZSl7aWYoRihlLFVpbnQ4QXJyYXkpKXt2YXIgdD1uZXcgVWludDhBcnJheShlKTtyZXR1cm4gbCh0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQsdC5ieXRlTGVuZ3RoKX1yZXR1cm4gaChlKX0oZSk7aWYobnVsbD09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgXCIrdHlwZW9mIGUpO2lmKEYoZSxBcnJheUJ1ZmZlcil8fGUmJkYoZS5idWZmZXIsQXJyYXlCdWZmZXIpKXJldHVybiBsKGUsdCxyKTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXImJihGKGUsU2hhcmVkQXJyYXlCdWZmZXIpfHxlJiZGKGUuYnVmZmVyLFNoYXJlZEFycmF5QnVmZmVyKSkpcmV0dXJuIGwoZSx0LHIpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJyk7dmFyIG49ZS52YWx1ZU9mJiZlLnZhbHVlT2YoKTtpZihudWxsIT1uJiZuIT09ZSlyZXR1cm4gYy5mcm9tKG4sdCxyKTt2YXIgaT1mdW5jdGlvbihlKXtpZihjLmlzQnVmZmVyKGUpKXt2YXIgdD0wfHAoZS5sZW5ndGgpLHI9YSh0KTtyZXR1cm4gMD09PXIubGVuZ3RofHxlLmNvcHkociwwLDAsdCkscn1yZXR1cm4gdm9pZCAwIT09ZS5sZW5ndGg/XCJudW1iZXJcIiE9dHlwZW9mIGUubGVuZ3RofHxIKGUubGVuZ3RoKT9hKDApOmgoZSk6XCJCdWZmZXJcIj09PWUudHlwZSYmQXJyYXkuaXNBcnJheShlLmRhdGEpP2goZS5kYXRhKTp2b2lkIDB9KGUpO2lmKGkpcmV0dXJuIGk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmbnVsbCE9U3ltYm9sLnRvUHJpbWl0aXZlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlW1N5bWJvbC50b1ByaW1pdGl2ZV0pcmV0dXJuIGMuZnJvbShlW1N5bWJvbC50b1ByaW1pdGl2ZV0oXCJzdHJpbmdcIiksdCxyKTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgXCIrdHlwZW9mIGUpfWZ1bmN0aW9uIHUoZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpO2lmKGU8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKX1mdW5jdGlvbiBkKGUpe3JldHVybiB1KGUpLGEoZTwwPzA6MHxwKGUpKX1mdW5jdGlvbiBoKGUpe2Zvcih2YXIgdD1lLmxlbmd0aDwwPzA6MHxwKGUubGVuZ3RoKSxyPWEodCksbj0wO248dDtuKz0xKXJbbl09MjU1JmVbbl07cmV0dXJuIHJ9ZnVuY3Rpb24gbChlLHQscil7aWYodDwwfHxlLmJ5dGVMZW5ndGg8dCl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKTtpZihlLmJ5dGVMZW5ndGg8dCsocnx8MCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7dmFyIG47cmV0dXJuIG49dm9pZCAwPT09dCYmdm9pZCAwPT09cj9uZXcgVWludDhBcnJheShlKTp2b2lkIDA9PT1yP25ldyBVaW50OEFycmF5KGUsdCk6bmV3IFVpbnQ4QXJyYXkoZSx0LHIpLE9iamVjdC5zZXRQcm90b3R5cGVPZihuLGMucHJvdG90eXBlKSxufWZ1bmN0aW9uIHAoZSl7aWYoZT49cyl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gc2l6ZTogMHhcIitzLnRvU3RyaW5nKDE2KStcIiBieXRlc1wiKTtyZXR1cm4gMHxlfWZ1bmN0aW9uIGIoZSx0KXtpZihjLmlzQnVmZmVyKGUpKXJldHVybiBlLmxlbmd0aDtpZihBcnJheUJ1ZmZlci5pc1ZpZXcoZSl8fEYoZSxBcnJheUJ1ZmZlcikpcmV0dXJuIGUuYnl0ZUxlbmd0aDtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKTt2YXIgcj1lLmxlbmd0aCxuPWFyZ3VtZW50cy5sZW5ndGg+MiYmITA9PT1hcmd1bWVudHNbMl07aWYoIW4mJjA9PT1yKXJldHVybiAwO2Zvcih2YXIgaT0hMTs7KXN3aXRjaCh0KXtjYXNlXCJhc2NpaVwiOmNhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiByO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBEKGUpLmxlbmd0aDtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gMipyO2Nhc2VcImhleFwiOnJldHVybiByPj4+MTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gVShlKS5sZW5ndGg7ZGVmYXVsdDppZihpKXJldHVybiBuPy0xOkQoZSkubGVuZ3RoO3Q9KFwiXCIrdCkudG9Mb3dlckNhc2UoKSxpPSEwfX1mdW5jdGlvbiB5KGUsdCxyKXt2YXIgbj0hMTtpZigodm9pZCAwPT09dHx8dDwwKSYmKHQ9MCksdD50aGlzLmxlbmd0aClyZXR1cm5cIlwiO2lmKCh2b2lkIDA9PT1yfHxyPnRoaXMubGVuZ3RoKSYmKHI9dGhpcy5sZW5ndGgpLHI8PTApcmV0dXJuXCJcIjtpZigocj4+Pj0wKTw9KHQ+Pj49MCkpcmV0dXJuXCJcIjtmb3IoZXx8KGU9XCJ1dGY4XCIpOzspc3dpdGNoKGUpe2Nhc2VcImhleFwiOnJldHVybiBJKHRoaXMsdCxyKTtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4gayh0aGlzLHQscik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gTyh0aGlzLHQscik7Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIE0odGhpcyx0LHIpO2Nhc2VcImJhc2U2NFwiOnJldHVybiB4KHRoaXMsdCxyKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gVCh0aGlzLHQscik7ZGVmYXVsdDppZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitlKTtlPShlK1wiXCIpLnRvTG93ZXJDYXNlKCksbj0hMH19ZnVuY3Rpb24gZyhlLHQscil7dmFyIG49ZVt0XTtlW3RdPWVbcl0sZVtyXT1ufWZ1bmN0aW9uIG0oZSx0LHIsbixpKXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuLTE7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHI/KG49cixyPTApOnI+MjE0NzQ4MzY0Nz9yPTIxNDc0ODM2NDc6cjwtMjE0NzQ4MzY0OCYmKHI9LTIxNDc0ODM2NDgpLEgocj0rcikmJihyPWk/MDplLmxlbmd0aC0xKSxyPDAmJihyPWUubGVuZ3RoK3IpLHI+PWUubGVuZ3RoKXtpZihpKXJldHVybi0xO3I9ZS5sZW5ndGgtMX1lbHNlIGlmKHI8MCl7aWYoIWkpcmV0dXJuLTE7cj0wfWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1jLmZyb20odCxuKSksYy5pc0J1ZmZlcih0KSlyZXR1cm4gMD09PXQubGVuZ3RoPy0xOnYoZSx0LHIsbixpKTtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdCY9MjU1LFwiZnVuY3Rpb25cIj09dHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2Y/aT9VaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoZSx0LHIpOlVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoZSx0LHIpOnYoZSxbdF0scixuLGkpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJ2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXJcIil9ZnVuY3Rpb24gdihlLHQscixuLGkpe3ZhciBvLHM9MSxhPWUubGVuZ3RoLGM9dC5sZW5ndGg7aWYodm9pZCAwIT09biYmKFwidWNzMlwiPT09KG49U3RyaW5nKG4pLnRvTG93ZXJDYXNlKCkpfHxcInVjcy0yXCI9PT1ufHxcInV0ZjE2bGVcIj09PW58fFwidXRmLTE2bGVcIj09PW4pKXtpZihlLmxlbmd0aDwyfHx0Lmxlbmd0aDwyKXJldHVybi0xO3M9MixhLz0yLGMvPTIsci89Mn1mdW5jdGlvbiBmKGUsdCl7cmV0dXJuIDE9PT1zP2VbdF06ZS5yZWFkVUludDE2QkUodCpzKX1pZihpKXt2YXIgdT0tMTtmb3Iobz1yO288YTtvKyspaWYoZihlLG8pPT09Zih0LC0xPT09dT8wOm8tdSkpe2lmKC0xPT09dSYmKHU9byksby11KzE9PT1jKXJldHVybiB1KnN9ZWxzZS0xIT09dSYmKG8tPW8tdSksdT0tMX1lbHNlIGZvcihyK2M+YSYmKHI9YS1jKSxvPXI7bz49MDtvLS0pe2Zvcih2YXIgZD0hMCxoPTA7aDxjO2grKylpZihmKGUsbytoKSE9PWYodCxoKSl7ZD0hMTticmVha31pZihkKXJldHVybiBvfXJldHVybi0xfWZ1bmN0aW9uIHcoZSx0LHIsbil7cj1OdW1iZXIocil8fDA7dmFyIGk9ZS5sZW5ndGgtcjtuPyhuPU51bWJlcihuKSk+aSYmKG49aSk6bj1pO3ZhciBvPXQubGVuZ3RoO24+by8yJiYobj1vLzIpO2Zvcih2YXIgcz0wO3M8bjsrK3Mpe3ZhciBhPXBhcnNlSW50KHQuc3Vic3RyKDIqcywyKSwxNik7aWYoSChhKSlyZXR1cm4gcztlW3Irc109YX1yZXR1cm4gc31mdW5jdGlvbiBfKGUsdCxyLG4pe3JldHVybiBxKEQodCxlLmxlbmd0aC1yKSxlLHIsbil9ZnVuY3Rpb24gUyhlLHQscixuKXtyZXR1cm4gcShmdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0wO3I8ZS5sZW5ndGg7KytyKXQucHVzaCgyNTUmZS5jaGFyQ29kZUF0KHIpKTtyZXR1cm4gdH0odCksZSxyLG4pfWZ1bmN0aW9uIEUoZSx0LHIsbil7cmV0dXJuIHEoVSh0KSxlLHIsbil9ZnVuY3Rpb24gQShlLHQscixuKXtyZXR1cm4gcShmdW5jdGlvbihlLHQpe2Zvcih2YXIgcixuLGksbz1bXSxzPTA7czxlLmxlbmd0aCYmISgodC09Mik8MCk7KytzKW49KHI9ZS5jaGFyQ29kZUF0KHMpKT4+OCxpPXIlMjU2LG8ucHVzaChpKSxvLnB1c2gobik7cmV0dXJuIG99KHQsZS5sZW5ndGgtciksZSxyLG4pfWZ1bmN0aW9uIHgoZSx0LHIpe3JldHVybiAwPT09dCYmcj09PWUubGVuZ3RoP24uZnJvbUJ5dGVBcnJheShlKTpuLmZyb21CeXRlQXJyYXkoZS5zbGljZSh0LHIpKX1mdW5jdGlvbiBrKGUsdCxyKXtyPU1hdGgubWluKGUubGVuZ3RoLHIpO2Zvcih2YXIgbj1bXSxpPXQ7aTxyOyl7dmFyIG8scyxhLGMsZj1lW2ldLHU9bnVsbCxkPWY+MjM5PzQ6Zj4yMjM/MzpmPjE5MT8yOjE7aWYoaStkPD1yKXN3aXRjaChkKXtjYXNlIDE6ZjwxMjgmJih1PWYpO2JyZWFrO2Nhc2UgMjoxMjg9PSgxOTImKG89ZVtpKzFdKSkmJihjPSgzMSZmKTw8Nnw2MyZvKT4xMjcmJih1PWMpO2JyZWFrO2Nhc2UgMzpvPWVbaSsxXSxzPWVbaSsyXSwxMjg9PSgxOTImbykmJjEyOD09KDE5MiZzKSYmKGM9KDE1JmYpPDwxMnwoNjMmbyk8PDZ8NjMmcyk+MjA0NyYmKGM8NTUyOTZ8fGM+NTczNDMpJiYodT1jKTticmVhaztjYXNlIDQ6bz1lW2krMV0scz1lW2krMl0sYT1lW2krM10sMTI4PT0oMTkyJm8pJiYxMjg9PSgxOTImcykmJjEyOD09KDE5MiZhKSYmKGM9KDE1JmYpPDwxOHwoNjMmbyk8PDEyfCg2MyZzKTw8Nnw2MyZhKT42NTUzNSYmYzwxMTE0MTEyJiYodT1jKX1udWxsPT09dT8odT02NTUzMyxkPTEpOnU+NjU1MzUmJih1LT02NTUzNixuLnB1c2godT4+PjEwJjEwMjN8NTUyOTYpLHU9NTYzMjB8MTAyMyZ1KSxuLnB1c2godSksaSs9ZH1yZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGg7aWYodDw9UClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZSk7Zm9yKHZhciByPVwiXCIsbj0wO248dDspcis9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZS5zbGljZShuLG4rPVApKTtyZXR1cm4gcn0obil9dC5rTWF4TGVuZ3RoPXMsYy5UWVBFRF9BUlJBWV9TVVBQT1JUPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPW5ldyBVaW50OEFycmF5KDEpLHQ9e2ZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19O3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YodCxVaW50OEFycmF5LnByb3RvdHlwZSksT2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCksNDI9PT1lLmZvbygpfWNhdGNoKGUpe3JldHVybiExfX0oKSxjLlRZUEVEX0FSUkFZX1NVUFBPUlR8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBjb25zb2xlfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBjb25zb2xlLmVycm9yfHxjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5IGBidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuXCIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjLnByb3RvdHlwZSxcInBhcmVudFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe2lmKGMuaXNCdWZmZXIodGhpcykpcmV0dXJuIHRoaXMuYnVmZmVyfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjLnByb3RvdHlwZSxcIm9mZnNldFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe2lmKGMuaXNCdWZmZXIodGhpcykpcmV0dXJuIHRoaXMuYnl0ZU9mZnNldH19KSxjLnBvb2xTaXplPTgxOTIsYy5mcm9tPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZihlLHQscil9LE9iamVjdC5zZXRQcm90b3R5cGVPZihjLnByb3RvdHlwZSxVaW50OEFycmF5LnByb3RvdHlwZSksT2JqZWN0LnNldFByb3RvdHlwZU9mKGMsVWludDhBcnJheSksYy5hbGxvYz1mdW5jdGlvbihlLHQscil7cmV0dXJuIGZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdShlKSxlPD0wP2EoZSk6dm9pZCAwIT09dD9cInN0cmluZ1wiPT10eXBlb2Ygcj9hKGUpLmZpbGwodCxyKTphKGUpLmZpbGwodCk6YShlKX0oZSx0LHIpfSxjLmFsbG9jVW5zYWZlPWZ1bmN0aW9uKGUpe3JldHVybiBkKGUpfSxjLmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbihlKXtyZXR1cm4gZChlKX0sYy5pc0J1ZmZlcj1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmITA9PT1lLl9pc0J1ZmZlciYmZSE9PWMucHJvdG90eXBlfSxjLmNvbXBhcmU9ZnVuY3Rpb24oZSx0KXtpZihGKGUsVWludDhBcnJheSkmJihlPWMuZnJvbShlLGUub2Zmc2V0LGUuYnl0ZUxlbmd0aCkpLEYodCxVaW50OEFycmF5KSYmKHQ9Yy5mcm9tKHQsdC5vZmZzZXQsdC5ieXRlTGVuZ3RoKSksIWMuaXNCdWZmZXIoZSl8fCFjLmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKTtpZihlPT09dClyZXR1cm4gMDtmb3IodmFyIHI9ZS5sZW5ndGgsbj10Lmxlbmd0aCxpPTAsbz1NYXRoLm1pbihyLG4pO2k8bzsrK2kpaWYoZVtpXSE9PXRbaV0pe3I9ZVtpXSxuPXRbaV07YnJlYWt9cmV0dXJuIHI8bj8tMTpuPHI/MTowfSxjLmlzRW5jb2Rpbmc9ZnVuY3Rpb24oZSl7c3dpdGNoKFN0cmluZyhlKS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJoZXhcIjpjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlXCJhc2NpaVwiOmNhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOmNhc2VcImJhc2U2NFwiOmNhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fSxjLmNvbmNhdD1mdW5jdGlvbihlLHQpe2lmKCFBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gYy5hbGxvYygwKTt2YXIgcjtpZih2b2lkIDA9PT10KWZvcih0PTAscj0wO3I8ZS5sZW5ndGg7KytyKXQrPWVbcl0ubGVuZ3RoO3ZhciBuPWMuYWxsb2NVbnNhZmUodCksaT0wO2ZvcihyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07aWYoRihvLFVpbnQ4QXJyYXkpKWkrby5sZW5ndGg+bi5sZW5ndGg/Yy5mcm9tKG8pLmNvcHkobixpKTpVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChuLG8saSk7ZWxzZXtpZighYy5pc0J1ZmZlcihvKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKTtvLmNvcHkobixpKX1pKz1vLmxlbmd0aH1yZXR1cm4gbn0sYy5ieXRlTGVuZ3RoPWIsYy5wcm90b3R5cGUuX2lzQnVmZmVyPSEwLGMucHJvdG90eXBlLnN3YXAxNj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlMiE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz0yKWcodGhpcyx0LHQrMSk7cmV0dXJuIHRoaXN9LGMucHJvdG90eXBlLnN3YXAzMj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlNCE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz00KWcodGhpcyx0LHQrMyksZyh0aGlzLHQrMSx0KzIpO3JldHVybiB0aGlzfSxjLnByb3RvdHlwZS5zd2FwNjQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxlbmd0aDtpZihlJTghPTApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0c1wiKTtmb3IodmFyIHQ9MDt0PGU7dCs9OClnKHRoaXMsdCx0KzcpLGcodGhpcyx0KzEsdCs2KSxnKHRoaXMsdCsyLHQrNSksZyh0aGlzLHQrMyx0KzQpO3JldHVybiB0aGlzfSxjLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO3JldHVybiAwPT09ZT9cIlwiOjA9PT1hcmd1bWVudHMubGVuZ3RoP2sodGhpcywwLGUpOnkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZz1jLnByb3RvdHlwZS50b1N0cmluZyxjLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24oZSl7aWYoIWMuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXJcIik7cmV0dXJuIHRoaXM9PT1lfHwwPT09Yy5jb21wYXJlKHRoaXMsZSl9LGMucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24oKXt2YXIgZT1cIlwiLHI9dC5JTlNQRUNUX01BWF9CWVRFUztyZXR1cm4gZT10aGlzLnRvU3RyaW5nKFwiaGV4XCIsMCxyKS5yZXBsYWNlKC8oLnsyfSkvZyxcIiQxIFwiKS50cmltKCksdGhpcy5sZW5ndGg+ciYmKGUrPVwiIC4uLiBcIiksXCI8QnVmZmVyIFwiK2UrXCI+XCJ9LG8mJihjLnByb3RvdHlwZVtvXT1jLnByb3RvdHlwZS5pbnNwZWN0KSxjLnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uKGUsdCxyLG4saSl7aWYoRihlLFVpbnQ4QXJyYXkpJiYoZT1jLmZyb20oZSxlLm9mZnNldCxlLmJ5dGVMZW5ndGgpKSwhYy5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGUpO2lmKHZvaWQgMD09PXQmJih0PTApLHZvaWQgMD09PXImJihyPWU/ZS5sZW5ndGg6MCksdm9pZCAwPT09biYmKG49MCksdm9pZCAwPT09aSYmKGk9dGhpcy5sZW5ndGgpLHQ8MHx8cj5lLmxlbmd0aHx8bjwwfHxpPnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKG4+PWkmJnQ+PXIpcmV0dXJuIDA7aWYobj49aSlyZXR1cm4tMTtpZih0Pj1yKXJldHVybiAxO2lmKHRoaXM9PT1lKXJldHVybiAwO2Zvcih2YXIgbz0oaT4+Pj0wKS0obj4+Pj0wKSxzPShyPj4+PTApLSh0Pj4+PTApLGE9TWF0aC5taW4obyxzKSxmPXRoaXMuc2xpY2UobixpKSx1PWUuc2xpY2UodCxyKSxkPTA7ZDxhOysrZClpZihmW2RdIT09dVtkXSl7bz1mW2RdLHM9dVtkXTticmVha31yZXR1cm4gbzxzPy0xOnM8bz8xOjB9LGMucHJvdG90eXBlLmluY2x1ZGVzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4tMSE9PXRoaXMuaW5kZXhPZihlLHQscil9LGMucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBtKHRoaXMsZSx0LHIsITApfSxjLnByb3RvdHlwZS5sYXN0SW5kZXhPZj1mdW5jdGlvbihlLHQscil7cmV0dXJuIG0odGhpcyxlLHQsciwhMSl9LGMucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKGUsdCxyLG4pe2lmKHZvaWQgMD09PXQpbj1cInV0ZjhcIixyPXRoaXMubGVuZ3RoLHQ9MDtlbHNlIGlmKHZvaWQgMD09PXImJlwic3RyaW5nXCI9PXR5cGVvZiB0KW49dCxyPXRoaXMubGVuZ3RoLHQ9MDtlbHNle2lmKCFpc0Zpbml0ZSh0KSl0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZFwiKTt0Pj4+PTAsaXNGaW5pdGUocik/KHI+Pj49MCx2b2lkIDA9PT1uJiYobj1cInV0ZjhcIikpOihuPXIscj12b2lkIDApfXZhciBpPXRoaXMubGVuZ3RoLXQ7aWYoKHZvaWQgMD09PXJ8fHI+aSkmJihyPWkpLGUubGVuZ3RoPjAmJihyPDB8fHQ8MCl8fHQ+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kc1wiKTtufHwobj1cInV0ZjhcIik7Zm9yKHZhciBvPSExOzspc3dpdGNoKG4pe2Nhc2VcImhleFwiOnJldHVybiB3KHRoaXMsZSx0LHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBfKHRoaXMsZSx0LHIpO2Nhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIFModGhpcyxlLHQscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIEUodGhpcyxlLHQscik7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIEEodGhpcyxlLHQscik7ZGVmYXVsdDppZihvKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIituKTtuPShcIlwiK24pLnRvTG93ZXJDYXNlKCksbz0hMH19LGMucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt0eXBlOlwiQnVmZmVyXCIsZGF0YTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnJ8fHRoaXMsMCl9fTt2YXIgUD00MDk2O2Z1bmN0aW9uIE8oZSx0LHIpe3ZhciBuPVwiXCI7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIGk9dDtpPHI7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoMTI3JmVbaV0pO3JldHVybiBufWZ1bmN0aW9uIE0oZSx0LHIpe3ZhciBuPVwiXCI7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIGk9dDtpPHI7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtpXSk7cmV0dXJuIG59ZnVuY3Rpb24gSShlLHQscil7dmFyIG49ZS5sZW5ndGg7KCF0fHx0PDApJiYodD0wKSwoIXJ8fHI8MHx8cj5uKSYmKHI9bik7Zm9yKHZhciBpPVwiXCIsbz10O288cjsrK28paSs9eltlW29dXTtyZXR1cm4gaX1mdW5jdGlvbiBUKGUsdCxyKXtmb3IodmFyIG49ZS5zbGljZSh0LHIpLGk9XCJcIixvPTA7bzxuLmxlbmd0aC0xO28rPTIpaSs9U3RyaW5nLmZyb21DaGFyQ29kZShuW29dKzI1NipuW28rMV0pO3JldHVybiBpfWZ1bmN0aW9uIFIoZSx0LHIpe2lmKGUlMSE9MHx8ZTwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwib2Zmc2V0IGlzIG5vdCB1aW50XCIpO2lmKGUrdD5yKXRocm93IG5ldyBSYW5nZUVycm9yKFwiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aFwiKX1mdW5jdGlvbiBOKGUsdCxyLG4saSxvKXtpZighYy5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtpZih0Pml8fHQ8byl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKTtpZihyK24+ZS5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIil9ZnVuY3Rpb24gQyhlLHQscixuLGksbyl7aWYocituPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1mdW5jdGlvbiBqKGUsdCxyLG4sbyl7cmV0dXJuIHQ9K3Qscj4+Pj0wLG98fEMoZSwwLHIsNCksaS53cml0ZShlLHQscixuLDIzLDQpLHIrNH1mdW5jdGlvbiBCKGUsdCxyLG4sbyl7cmV0dXJuIHQ9K3Qscj4+Pj0wLG98fEMoZSwwLHIsOCksaS53cml0ZShlLHQscixuLDUyLDgpLHIrOH1jLnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMubGVuZ3RoOyhlPX5+ZSk8MD8oZSs9cik8MCYmKGU9MCk6ZT5yJiYoZT1yKSwodD12b2lkIDA9PT10P3I6fn50KTwwPyh0Kz1yKTwwJiYodD0wKTp0PnImJih0PXIpLHQ8ZSYmKHQ9ZSk7dmFyIG49dGhpcy5zdWJhcnJheShlLHQpO3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YobixjLnByb3RvdHlwZSksbn0sYy5wcm90b3R5cGUucmVhZFVpbnRMRT1jLnByb3RvdHlwZS5yZWFkVUludExFPWZ1bmN0aW9uKGUsdCxyKXtlPj4+PTAsdD4+Pj0wLHJ8fFIoZSx0LHRoaXMubGVuZ3RoKTtmb3IodmFyIG49dGhpc1tlXSxpPTEsbz0wOysrbzx0JiYoaSo9MjU2KTspbis9dGhpc1tlK29dKmk7cmV0dXJuIG59LGMucHJvdG90eXBlLnJlYWRVaW50QkU9Yy5wcm90b3R5cGUucmVhZFVJbnRCRT1mdW5jdGlvbihlLHQscil7ZT4+Pj0wLHQ+Pj49MCxyfHxSKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbZSstLXRdLGk9MTt0PjAmJihpKj0yNTYpOyluKz10aGlzW2UrLS10XSppO3JldHVybiBufSxjLnByb3RvdHlwZS5yZWFkVWludDg9Yy5wcm90b3R5cGUucmVhZFVJbnQ4PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxSKGUsMSx0aGlzLmxlbmd0aCksdGhpc1tlXX0sYy5wcm90b3R5cGUucmVhZFVpbnQxNkxFPWMucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8UihlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlKzFdPDw4fSxjLnByb3RvdHlwZS5yZWFkVWludDE2QkU9Yy5wcm90b3R5cGUucmVhZFVJbnQxNkJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxSKGUsMix0aGlzLmxlbmd0aCksdGhpc1tlXTw8OHx0aGlzW2UrMV19LGMucHJvdG90eXBlLnJlYWRVaW50MzJMRT1jLnByb3RvdHlwZS5yZWFkVUludDMyTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fFIoZSw0LHRoaXMubGVuZ3RoKSwodGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNikrMTY3NzcyMTYqdGhpc1tlKzNdfSxjLnByb3RvdHlwZS5yZWFkVWludDMyQkU9Yy5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxSKGUsNCx0aGlzLmxlbmd0aCksMTY3NzcyMTYqdGhpc1tlXSsodGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdKX0sYy5wcm90b3R5cGUucmVhZEludExFPWZ1bmN0aW9uKGUsdCxyKXtlPj4+PTAsdD4+Pj0wLHJ8fFIoZSx0LHRoaXMubGVuZ3RoKTtmb3IodmFyIG49dGhpc1tlXSxpPTEsbz0wOysrbzx0JiYoaSo9MjU2KTspbis9dGhpc1tlK29dKmk7cmV0dXJuIG4+PShpKj0xMjgpJiYobi09TWF0aC5wb3coMiw4KnQpKSxufSxjLnByb3RvdHlwZS5yZWFkSW50QkU9ZnVuY3Rpb24oZSx0LHIpe2U+Pj49MCx0Pj4+PTAscnx8UihlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgbj10LGk9MSxvPXRoaXNbZSstLW5dO24+MCYmKGkqPTI1Nik7KW8rPXRoaXNbZSstLW5dKmk7cmV0dXJuIG8+PShpKj0xMjgpJiYoby09TWF0aC5wb3coMiw4KnQpKSxvfSxjLnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8UihlLDEsdGhpcy5sZW5ndGgpLDEyOCZ0aGlzW2VdPy0xKigyNTUtdGhpc1tlXSsxKTp0aGlzW2VdfSxjLnByb3RvdHlwZS5yZWFkSW50MTZMRT1mdW5jdGlvbihlLHQpe2U+Pj49MCx0fHxSKGUsMix0aGlzLmxlbmd0aCk7dmFyIHI9dGhpc1tlXXx0aGlzW2UrMV08PDg7cmV0dXJuIDMyNzY4JnI/NDI5NDkwMTc2MHxyOnJ9LGMucHJvdG90eXBlLnJlYWRJbnQxNkJFPWZ1bmN0aW9uKGUsdCl7ZT4+Pj0wLHR8fFIoZSwyLHRoaXMubGVuZ3RoKTt2YXIgcj10aGlzW2UrMV18dGhpc1tlXTw8ODtyZXR1cm4gMzI3Njgmcj80Mjk0OTAxNzYwfHI6cn0sYy5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fFIoZSw0LHRoaXMubGVuZ3RoKSx0aGlzW2VdfHRoaXNbZSsxXTw8OHx0aGlzW2UrMl08PDE2fHRoaXNbZSszXTw8MjR9LGMucHJvdG90eXBlLnJlYWRJbnQzMkJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxSKGUsNCx0aGlzLmxlbmd0aCksdGhpc1tlXTw8MjR8dGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdfSxjLnByb3RvdHlwZS5yZWFkRmxvYXRMRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8UihlLDQsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITAsMjMsNCl9LGMucHJvdG90eXBlLnJlYWRGbG9hdEJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxSKGUsNCx0aGlzLmxlbmd0aCksaS5yZWFkKHRoaXMsZSwhMSwyMyw0KX0sYy5wcm90b3R5cGUucmVhZERvdWJsZUxFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxSKGUsOCx0aGlzLmxlbmd0aCksaS5yZWFkKHRoaXMsZSwhMCw1Miw4KX0sYy5wcm90b3R5cGUucmVhZERvdWJsZUJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxSKGUsOCx0aGlzLmxlbmd0aCksaS5yZWFkKHRoaXMsZSwhMSw1Miw4KX0sYy5wcm90b3R5cGUud3JpdGVVaW50TEU9Yy5wcm90b3R5cGUud3JpdGVVSW50TEU9ZnVuY3Rpb24oZSx0LHIsbil7ZT0rZSx0Pj4+PTAscj4+Pj0wLG58fE4odGhpcyxlLHQscixNYXRoLnBvdygyLDgqciktMSwwKTt2YXIgaT0xLG89MDtmb3IodGhpc1t0XT0yNTUmZTsrK288ciYmKGkqPTI1Nik7KXRoaXNbdCtvXT1lL2kmMjU1O3JldHVybiB0K3J9LGMucHJvdG90eXBlLndyaXRlVWludEJFPWMucHJvdG90eXBlLndyaXRlVUludEJFPWZ1bmN0aW9uKGUsdCxyLG4pe2U9K2UsdD4+Pj0wLHI+Pj49MCxufHxOKHRoaXMsZSx0LHIsTWF0aC5wb3coMiw4KnIpLTEsMCk7dmFyIGk9ci0xLG89MTtmb3IodGhpc1t0K2ldPTI1NSZlOy0taT49MCYmKG8qPTI1Nik7KXRoaXNbdCtpXT1lL28mMjU1O3JldHVybiB0K3J9LGMucHJvdG90eXBlLndyaXRlVWludDg9Yy5wcm90b3R5cGUud3JpdGVVSW50OD1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fE4odGhpcyxlLHQsMSwyNTUsMCksdGhpc1t0XT0yNTUmZSx0KzF9LGMucHJvdG90eXBlLndyaXRlVWludDE2TEU9Yy5wcm90b3R5cGUud3JpdGVVSW50MTZMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fE4odGhpcyxlLHQsMiw2NTUzNSwwKSx0aGlzW3RdPTI1NSZlLHRoaXNbdCsxXT1lPj4+OCx0KzJ9LGMucHJvdG90eXBlLndyaXRlVWludDE2QkU9Yy5wcm90b3R5cGUud3JpdGVVSW50MTZCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fE4odGhpcyxlLHQsMiw2NTUzNSwwKSx0aGlzW3RdPWU+Pj44LHRoaXNbdCsxXT0yNTUmZSx0KzJ9LGMucHJvdG90eXBlLndyaXRlVWludDMyTEU9Yy5wcm90b3R5cGUud3JpdGVVSW50MzJMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fE4odGhpcyxlLHQsNCw0Mjk0OTY3Mjk1LDApLHRoaXNbdCszXT1lPj4+MjQsdGhpc1t0KzJdPWU+Pj4xNix0aGlzW3QrMV09ZT4+PjgsdGhpc1t0XT0yNTUmZSx0KzR9LGMucHJvdG90eXBlLndyaXRlVWludDMyQkU9Yy5wcm90b3R5cGUud3JpdGVVSW50MzJCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fE4odGhpcyxlLHQsNCw0Mjk0OTY3Mjk1LDApLHRoaXNbdF09ZT4+PjI0LHRoaXNbdCsxXT1lPj4+MTYsdGhpc1t0KzJdPWU+Pj44LHRoaXNbdCszXT0yNTUmZSx0KzR9LGMucHJvdG90eXBlLndyaXRlSW50TEU9ZnVuY3Rpb24oZSx0LHIsbil7aWYoZT0rZSx0Pj4+PTAsIW4pe3ZhciBpPU1hdGgucG93KDIsOCpyLTEpO04odGhpcyxlLHQscixpLTEsLWkpfXZhciBvPTAscz0xLGE9MDtmb3IodGhpc1t0XT0yNTUmZTsrK288ciYmKHMqPTI1Nik7KWU8MCYmMD09PWEmJjAhPT10aGlzW3Qrby0xXSYmKGE9MSksdGhpc1t0K29dPShlL3M+PjApLWEmMjU1O3JldHVybiB0K3J9LGMucHJvdG90eXBlLndyaXRlSW50QkU9ZnVuY3Rpb24oZSx0LHIsbil7aWYoZT0rZSx0Pj4+PTAsIW4pe3ZhciBpPU1hdGgucG93KDIsOCpyLTEpO04odGhpcyxlLHQscixpLTEsLWkpfXZhciBvPXItMSxzPTEsYT0wO2Zvcih0aGlzW3Qrb109MjU1JmU7LS1vPj0wJiYocyo9MjU2KTspZTwwJiYwPT09YSYmMCE9PXRoaXNbdCtvKzFdJiYoYT0xKSx0aGlzW3Qrb109KGUvcz4+MCktYSYyNTU7cmV0dXJuIHQrcn0sYy5wcm90b3R5cGUud3JpdGVJbnQ4PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0Pj4+PTAscnx8Tih0aGlzLGUsdCwxLDEyNywtMTI4KSxlPDAmJihlPTI1NStlKzEpLHRoaXNbdF09MjU1JmUsdCsxfSxjLnByb3RvdHlwZS53cml0ZUludDE2TEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxOKHRoaXMsZSx0LDIsMzI3NjcsLTMyNzY4KSx0aGlzW3RdPTI1NSZlLHRoaXNbdCsxXT1lPj4+OCx0KzJ9LGMucHJvdG90eXBlLndyaXRlSW50MTZCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fE4odGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHRoaXNbdF09ZT4+PjgsdGhpc1t0KzFdPTI1NSZlLHQrMn0sYy5wcm90b3R5cGUud3JpdGVJbnQzMkxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0Pj4+PTAscnx8Tih0aGlzLGUsdCw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44LHRoaXNbdCsyXT1lPj4+MTYsdGhpc1t0KzNdPWU+Pj4yNCx0KzR9LGMucHJvdG90eXBlLndyaXRlSW50MzJCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fE4odGhpcyxlLHQsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSxlPDAmJihlPTQyOTQ5NjcyOTUrZSsxKSx0aGlzW3RdPWU+Pj4yNCx0aGlzW3QrMV09ZT4+PjE2LHRoaXNbdCsyXT1lPj4+OCx0aGlzW3QrM109MjU1JmUsdCs0fSxjLnByb3RvdHlwZS53cml0ZUZsb2F0TEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBqKHRoaXMsZSx0LCEwLHIpfSxjLnByb3RvdHlwZS53cml0ZUZsb2F0QkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBqKHRoaXMsZSx0LCExLHIpfSxjLnByb3RvdHlwZS53cml0ZURvdWJsZUxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gQih0aGlzLGUsdCwhMCxyKX0sYy5wcm90b3R5cGUud3JpdGVEb3VibGVCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIEIodGhpcyxlLHQsITEscil9LGMucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWMuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImFyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlclwiKTtpZihyfHwocj0wKSxufHwwPT09bnx8KG49dGhpcy5sZW5ndGgpLHQ+PWUubGVuZ3RoJiYodD1lLmxlbmd0aCksdHx8KHQ9MCksbj4wJiZuPHImJihuPXIpLG49PT1yKXJldHVybiAwO2lmKDA9PT1lLmxlbmd0aHx8MD09PXRoaXMubGVuZ3RoKXJldHVybiAwO2lmKHQ8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRhcmdldFN0YXJ0IG91dCBvZiBib3VuZHNcIik7aWYocjwwfHxyPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZihuPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzb3VyY2VFbmQgb3V0IG9mIGJvdW5kc1wiKTtuPnRoaXMubGVuZ3RoJiYobj10aGlzLmxlbmd0aCksZS5sZW5ndGgtdDxuLXImJihuPWUubGVuZ3RoLXQrcik7dmFyIGk9bi1yO3JldHVybiB0aGlzPT09ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbj90aGlzLmNvcHlXaXRoaW4odCxyLG4pOlVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKGUsdGhpcy5zdWJhcnJheShyLG4pLHQpLGl9LGMucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24oZSx0LHIsbil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0PyhuPXQsdD0wLHI9dGhpcy5sZW5ndGgpOlwic3RyaW5nXCI9PXR5cGVvZiByJiYobj1yLHI9dGhpcy5sZW5ndGgpLHZvaWQgMCE9PW4mJlwic3RyaW5nXCIhPXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuJiYhYy5pc0VuY29kaW5nKG4pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIituKTtpZigxPT09ZS5sZW5ndGgpe3ZhciBpPWUuY2hhckNvZGVBdCgwKTsoXCJ1dGY4XCI9PT1uJiZpPDEyOHx8XCJsYXRpbjFcIj09PW4pJiYoZT1pKX19ZWxzZVwibnVtYmVyXCI9PXR5cGVvZiBlP2UmPTI1NTpcImJvb2xlYW5cIj09dHlwZW9mIGUmJihlPU51bWJlcihlKSk7aWYodDwwfHx0aGlzLmxlbmd0aDx0fHx0aGlzLmxlbmd0aDxyKXRocm93IG5ldyBSYW5nZUVycm9yKFwiT3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKHI8PXQpcmV0dXJuIHRoaXM7dmFyIG87aWYodD4+Pj0wLHI9dm9pZCAwPT09cj90aGlzLmxlbmd0aDpyPj4+MCxlfHwoZT0wKSxcIm51bWJlclwiPT10eXBlb2YgZSlmb3Iobz10O288cjsrK28pdGhpc1tvXT1lO2Vsc2V7dmFyIHM9Yy5pc0J1ZmZlcihlKT9lOmMuZnJvbShlLG4pLGE9cy5sZW5ndGg7aWYoMD09PWEpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKTtmb3Iobz0wO288ci10Oysrbyl0aGlzW28rdF09c1tvJWFdfXJldHVybiB0aGlzfTt2YXIgTD0vW14rLzAtOUEtWmEtei1fXS9nO2Z1bmN0aW9uIEQoZSx0KXt2YXIgcjt0PXR8fDEvMDtmb3IodmFyIG49ZS5sZW5ndGgsaT1udWxsLG89W10scz0wO3M8bjsrK3Mpe2lmKChyPWUuY2hhckNvZGVBdChzKSk+NTUyOTUmJnI8NTczNDQpe2lmKCFpKXtpZihyPjU2MzE5KXsodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9aWYocysxPT09bil7KHQtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWk9cjtjb250aW51ZX1pZihyPDU2MzIwKXsodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSksaT1yO2NvbnRpbnVlfXI9NjU1MzYrKGktNTUyOTY8PDEwfHItNTYzMjApfWVsc2UgaSYmKHQtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2lmKGk9bnVsbCxyPDEyOCl7aWYoKHQtPTEpPDApYnJlYWs7by5wdXNoKHIpfWVsc2UgaWYocjwyMDQ4KXtpZigodC09Mik8MClicmVhaztvLnB1c2gocj4+NnwxOTIsNjMmcnwxMjgpfWVsc2UgaWYocjw2NTUzNil7aWYoKHQtPTMpPDApYnJlYWs7by5wdXNoKHI+PjEyfDIyNCxyPj42JjYzfDEyOCw2MyZyfDEyOCl9ZWxzZXtpZighKHI8MTExNDExMikpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2RlIHBvaW50XCIpO2lmKCh0LT00KTwwKWJyZWFrO28ucHVzaChyPj4xOHwyNDAscj4+MTImNjN8MTI4LHI+PjYmNjN8MTI4LDYzJnJ8MTI4KX19cmV0dXJuIG99ZnVuY3Rpb24gVShlKXtyZXR1cm4gbi50b0J5dGVBcnJheShmdW5jdGlvbihlKXtpZigoZT0oZT1lLnNwbGl0KFwiPVwiKVswXSkudHJpbSgpLnJlcGxhY2UoTCxcIlwiKSkubGVuZ3RoPDIpcmV0dXJuXCJcIjtmb3IoO2UubGVuZ3RoJTQhPTA7KWUrPVwiPVwiO3JldHVybiBlfShlKSl9ZnVuY3Rpb24gcShlLHQscixuKXtmb3IodmFyIGk9MDtpPG4mJiEoaStyPj10Lmxlbmd0aHx8aT49ZS5sZW5ndGgpOysraSl0W2krcl09ZVtpXTtyZXR1cm4gaX1mdW5jdGlvbiBGKGUsdCl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0fHxudWxsIT1lJiZudWxsIT1lLmNvbnN0cnVjdG9yJiZudWxsIT1lLmNvbnN0cnVjdG9yLm5hbWUmJmUuY29uc3RydWN0b3IubmFtZT09PXQubmFtZX1mdW5jdGlvbiBIKGUpe3JldHVybiBlIT1lfXZhciB6PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVwiMDEyMzQ1Njc4OWFiY2RlZlwiLHQ9bmV3IEFycmF5KDI1Nikscj0wO3I8MTY7KytyKWZvcih2YXIgbj0xNipyLGk9MDtpPDE2OysraSl0W24raV09ZVtyXStlW2ldO3JldHVybiB0fSgpfSw1ODQ6ZT0+e2UuZXhwb3J0cz17MTAwOlwiQ29udGludWVcIiwxMDE6XCJTd2l0Y2hpbmcgUHJvdG9jb2xzXCIsMTAyOlwiUHJvY2Vzc2luZ1wiLDIwMDpcIk9LXCIsMjAxOlwiQ3JlYXRlZFwiLDIwMjpcIkFjY2VwdGVkXCIsMjAzOlwiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb25cIiwyMDQ6XCJObyBDb250ZW50XCIsMjA1OlwiUmVzZXQgQ29udGVudFwiLDIwNjpcIlBhcnRpYWwgQ29udGVudFwiLDIwNzpcIk11bHRpLVN0YXR1c1wiLDIwODpcIkFscmVhZHkgUmVwb3J0ZWRcIiwyMjY6XCJJTSBVc2VkXCIsMzAwOlwiTXVsdGlwbGUgQ2hvaWNlc1wiLDMwMTpcIk1vdmVkIFBlcm1hbmVudGx5XCIsMzAyOlwiRm91bmRcIiwzMDM6XCJTZWUgT3RoZXJcIiwzMDQ6XCJOb3QgTW9kaWZpZWRcIiwzMDU6XCJVc2UgUHJveHlcIiwzMDc6XCJUZW1wb3JhcnkgUmVkaXJlY3RcIiwzMDg6XCJQZXJtYW5lbnQgUmVkaXJlY3RcIiw0MDA6XCJCYWQgUmVxdWVzdFwiLDQwMTpcIlVuYXV0aG9yaXplZFwiLDQwMjpcIlBheW1lbnQgUmVxdWlyZWRcIiw0MDM6XCJGb3JiaWRkZW5cIiw0MDQ6XCJOb3QgRm91bmRcIiw0MDU6XCJNZXRob2QgTm90IEFsbG93ZWRcIiw0MDY6XCJOb3QgQWNjZXB0YWJsZVwiLDQwNzpcIlByb3h5IEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCIsNDA4OlwiUmVxdWVzdCBUaW1lb3V0XCIsNDA5OlwiQ29uZmxpY3RcIiw0MTA6XCJHb25lXCIsNDExOlwiTGVuZ3RoIFJlcXVpcmVkXCIsNDEyOlwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLDQxMzpcIlBheWxvYWQgVG9vIExhcmdlXCIsNDE0OlwiVVJJIFRvbyBMb25nXCIsNDE1OlwiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZVwiLDQxNjpcIlJhbmdlIE5vdCBTYXRpc2ZpYWJsZVwiLDQxNzpcIkV4cGVjdGF0aW9uIEZhaWxlZFwiLDQxODpcIkknbSBhIHRlYXBvdFwiLDQyMTpcIk1pc2RpcmVjdGVkIFJlcXVlc3RcIiw0MjI6XCJVbnByb2Nlc3NhYmxlIEVudGl0eVwiLDQyMzpcIkxvY2tlZFwiLDQyNDpcIkZhaWxlZCBEZXBlbmRlbmN5XCIsNDI1OlwiVW5vcmRlcmVkIENvbGxlY3Rpb25cIiw0MjY6XCJVcGdyYWRlIFJlcXVpcmVkXCIsNDI4OlwiUHJlY29uZGl0aW9uIFJlcXVpcmVkXCIsNDI5OlwiVG9vIE1hbnkgUmVxdWVzdHNcIiw0MzE6XCJSZXF1ZXN0IEhlYWRlciBGaWVsZHMgVG9vIExhcmdlXCIsNDUxOlwiVW5hdmFpbGFibGUgRm9yIExlZ2FsIFJlYXNvbnNcIiw1MDA6XCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIiw1MDE6XCJOb3QgSW1wbGVtZW50ZWRcIiw1MDI6XCJCYWQgR2F0ZXdheVwiLDUwMzpcIlNlcnZpY2UgVW5hdmFpbGFibGVcIiw1MDQ6XCJHYXRld2F5IFRpbWVvdXRcIiw1MDU6XCJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZFwiLDUwNjpcIlZhcmlhbnQgQWxzbyBOZWdvdGlhdGVzXCIsNTA3OlwiSW5zdWZmaWNpZW50IFN0b3JhZ2VcIiw1MDg6XCJMb29wIERldGVjdGVkXCIsNTA5OlwiQmFuZHdpZHRoIExpbWl0IEV4Y2VlZGVkXCIsNTEwOlwiTm90IEV4dGVuZGVkXCIsNTExOlwiTmV0d29yayBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwifX0sMTkyNDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyMTApLGk9cig1NTU5KSxvPWkobihcIlN0cmluZy5wcm90b3R5cGUuaW5kZXhPZlwiKSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bihlLCEhdCk7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgciYmbyhlLFwiLnByb3RvdHlwZS5cIik+LTE/aShyKTpyfX0sNTU1OTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4NjEyKSxpPXIoMjEwKSxvPWkoXCIlRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JVwiKSxzPWkoXCIlRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlXCIpLGE9aShcIiVSZWZsZWN0LmFwcGx5JVwiLCEwKXx8bi5jYWxsKHMsbyksYz1pKFwiJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlXCIsITApLGY9aShcIiVPYmplY3QuZGVmaW5lUHJvcGVydHklXCIsITApLHU9aShcIiVNYXRoLm1heCVcIik7aWYoZil0cnl7Zih7fSxcImFcIix7dmFsdWU6MX0pfWNhdGNoKGUpe2Y9bnVsbH1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9YShuLHMsYXJndW1lbnRzKTtpZihjJiZmKXt2YXIgcj1jKHQsXCJsZW5ndGhcIik7ci5jb25maWd1cmFibGUmJmYodCxcImxlbmd0aFwiLHt2YWx1ZToxK3UoMCxlLmxlbmd0aC0oYXJndW1lbnRzLmxlbmd0aC0xKSl9KX1yZXR1cm4gdH07dmFyIGQ9ZnVuY3Rpb24oKXtyZXR1cm4gYShuLG8sYXJndW1lbnRzKX07Zj9mKGUuZXhwb3J0cyxcImFwcGx5XCIse3ZhbHVlOmR9KTplLmV4cG9ydHMuYXBwbHk9ZH0sMTAyNzooZSx0LHIpPT57dmFyIG49cig5NTA5KS5CdWZmZXIsaT1yKDI4MzApLlRyYW5zZm9ybSxvPXIoMjU1MykucztmdW5jdGlvbiBzKGUpe2kuY2FsbCh0aGlzKSx0aGlzLmhhc2hNb2RlPVwic3RyaW5nXCI9PXR5cGVvZiBlLHRoaXMuaGFzaE1vZGU/dGhpc1tlXT10aGlzLl9maW5hbE9yRGlnZXN0OnRoaXMuZmluYWw9dGhpcy5fZmluYWxPckRpZ2VzdCx0aGlzLl9maW5hbCYmKHRoaXMuX19maW5hbD10aGlzLl9maW5hbCx0aGlzLl9maW5hbD1udWxsKSx0aGlzLl9kZWNvZGVyPW51bGwsdGhpcy5fZW5jb2Rpbmc9bnVsbH1yKDU3MTcpKHMsaSkscy5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUsdCxyKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9bi5mcm9tKGUsdCkpO3ZhciBpPXRoaXMuX3VwZGF0ZShlKTtyZXR1cm4gdGhpcy5oYXNoTW9kZT90aGlzOihyJiYoaT10aGlzLl90b1N0cmluZyhpLHIpKSxpKX0scy5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmc9ZnVuY3Rpb24oKXt9LHMucHJvdG90eXBlLmdldEF1dGhUYWc9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJ0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlXCIpfSxzLnByb3RvdHlwZS5zZXRBdXRoVGFnPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwidHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZVwiKX0scy5wcm90b3R5cGUuc2V0QUFEPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwidHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGVcIil9LHMucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO3RyeXt0aGlzLmhhc2hNb2RlP3RoaXMuX3VwZGF0ZShlKTp0aGlzLnB1c2godGhpcy5fdXBkYXRlKGUpKX1jYXRjaChlKXtuPWV9ZmluYWxseXtyKG4pfX0scy5wcm90b3R5cGUuX2ZsdXNoPWZ1bmN0aW9uKGUpe3ZhciB0O3RyeXt0aGlzLnB1c2godGhpcy5fX2ZpbmFsKCkpfWNhdGNoKGUpe3Q9ZX1lKHQpfSxzLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9fZmluYWwoKXx8bi5hbGxvYygwKTtyZXR1cm4gZSYmKHQ9dGhpcy5fdG9TdHJpbmcodCxlLCEwKSksdH0scy5wcm90b3R5cGUuX3RvU3RyaW5nPWZ1bmN0aW9uKGUsdCxyKXtpZih0aGlzLl9kZWNvZGVyfHwodGhpcy5fZGVjb2Rlcj1uZXcgbyh0KSx0aGlzLl9lbmNvZGluZz10KSx0aGlzLl9lbmNvZGluZyE9PXQpdGhyb3cgbmV3IEVycm9yKFwiY2FuJ3Qgc3dpdGNoIGVuY29kaW5nc1wiKTt2YXIgbj10aGlzLl9kZWNvZGVyLndyaXRlKGUpO3JldHVybiByJiYobis9dGhpcy5fZGVjb2Rlci5lbmQoKSksbn0sZS5leHBvcnRzPXN9LDc4NjY6KGUsdCk9PnshZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHQscixuLGkpe3JldHVybiB0aGlzIGluc3RhbmNlb2YgZT8odGhpcy5kb21haW49dHx8dm9pZCAwLHRoaXMucGF0aD1yfHxcIi9cIix0aGlzLnNlY3VyZT0hIW4sdGhpcy5zY3JpcHQ9ISFpLHRoaXMpOm5ldyBlKHQscixuLGkpfWZ1bmN0aW9uIHIoZSx0LG4pe3JldHVybiBlIGluc3RhbmNlb2Ygcj9lOnRoaXMgaW5zdGFuY2VvZiByPyh0aGlzLm5hbWU9bnVsbCx0aGlzLnZhbHVlPW51bGwsdGhpcy5leHBpcmF0aW9uX2RhdGU9MS8wLHRoaXMucGF0aD1TdHJpbmcobnx8XCIvXCIpLHRoaXMuZXhwbGljaXRfcGF0aD0hMSx0aGlzLmRvbWFpbj10fHxudWxsLHRoaXMuZXhwbGljaXRfZG9tYWluPSExLHRoaXMuc2VjdXJlPSExLHRoaXMubm9zY3JpcHQ9ITEsZSYmdGhpcy5wYXJzZShlLHQsbiksdGhpcyk6bmV3IHIoZSx0LG4pfWUuQWxsPU9iamVjdC5mcmVlemUoT2JqZWN0LmNyZWF0ZShudWxsKSksdC5Db29raWVBY2Nlc3NJbmZvPWUsdC5Db29raWU9cixyLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPVt0aGlzLm5hbWUrXCI9XCIrdGhpcy52YWx1ZV07cmV0dXJuIHRoaXMuZXhwaXJhdGlvbl9kYXRlIT09MS8wJiZlLnB1c2goXCJleHBpcmVzPVwiK25ldyBEYXRlKHRoaXMuZXhwaXJhdGlvbl9kYXRlKS50b0dNVFN0cmluZygpKSx0aGlzLmRvbWFpbiYmZS5wdXNoKFwiZG9tYWluPVwiK3RoaXMuZG9tYWluKSx0aGlzLnBhdGgmJmUucHVzaChcInBhdGg9XCIrdGhpcy5wYXRoKSx0aGlzLnNlY3VyZSYmZS5wdXNoKFwic2VjdXJlXCIpLHRoaXMubm9zY3JpcHQmJmUucHVzaChcImh0dHBvbmx5XCIpLGUuam9pbihcIjsgXCIpfSxyLnByb3RvdHlwZS50b1ZhbHVlU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmFtZStcIj1cIit0aGlzLnZhbHVlfTt2YXIgbj0vWzpdKD89XFxzKlthLXpBLVowLTlfXFwtXStcXHMqWz1dKS9nO2Z1bmN0aW9uIGkoKXt2YXIgZSx0O3JldHVybiB0aGlzIGluc3RhbmNlb2YgaT8oZT1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuc2V0Q29va2llPWZ1bmN0aW9uKG4saSxvKXt2YXIgcyxhO2lmKHM9KG49bmV3IHIobixpLG8pKS5leHBpcmF0aW9uX2RhdGU8PURhdGUubm93KCksdm9pZCAwIT09ZVtuLm5hbWVdKXtmb3IodD1lW24ubmFtZV0sYT0wO2E8dC5sZW5ndGg7YSs9MSlpZih0W2FdLmNvbGxpZGVzV2l0aChuKSlyZXR1cm4gcz8odC5zcGxpY2UoYSwxKSwwPT09dC5sZW5ndGgmJmRlbGV0ZSBlW24ubmFtZV0sITEpOih0W2FdPW4sbik7cmV0dXJuIXMmJih0LnB1c2gobiksbil9cmV0dXJuIXMmJihlW24ubmFtZV09W25dLGVbbi5uYW1lXSl9LHRoaXMuZ2V0Q29va2llPWZ1bmN0aW9uKHIsbil7dmFyIGksbztpZih0PWVbcl0pZm9yKG89MDtvPHQubGVuZ3RoO28rPTEpaWYoKGk9dFtvXSkuZXhwaXJhdGlvbl9kYXRlPD1EYXRlLm5vdygpKTA9PT10Lmxlbmd0aCYmZGVsZXRlIGVbaS5uYW1lXTtlbHNlIGlmKGkubWF0Y2hlcyhuKSlyZXR1cm4gaX0sdGhpcy5nZXRDb29raWVzPWZ1bmN0aW9uKHQpe3ZhciByLG4saT1bXTtmb3IociBpbiBlKShuPXRoaXMuZ2V0Q29va2llKHIsdCkpJiZpLnB1c2gobik7cmV0dXJuIGkudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gaS5qb2luKFwiOlwiKX0saS50b1ZhbHVlU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGkubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS50b1ZhbHVlU3RyaW5nKCl9KSkuam9pbihcIjsgXCIpfSxpfSx0aGlzKTpuZXcgaX1yLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihlLHQsbil7aWYodGhpcyBpbnN0YW5jZW9mIHIpe3ZhciBpLG89ZS5zcGxpdChcIjtcIikuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4hIWV9KSkscz1vWzBdLm1hdGNoKC8oW149XSspPShbXFxzXFxTXSopLyk7aWYoIXMpcmV0dXJuIHZvaWQgY29uc29sZS53YXJuKFwiSW52YWxpZCBjb29raWUgaGVhZGVyIGVuY291bnRlcmVkLiBIZWFkZXI6ICdcIitlK1wiJ1wiKTt2YXIgYT1zWzFdLGM9c1syXTtpZihcInN0cmluZ1wiIT10eXBlb2YgYXx8MD09PWEubGVuZ3RofHxcInN0cmluZ1wiIT10eXBlb2YgYylyZXR1cm4gdm9pZCBjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gZXh0cmFjdCB2YWx1ZXMgZnJvbSBjb29raWUgaGVhZGVyLiBDb29raWU6ICdcIitlK1wiJ1wiKTtmb3IodGhpcy5uYW1lPWEsdGhpcy52YWx1ZT1jLGk9MTtpPG8ubGVuZ3RoO2krPTEpc3dpdGNoKGE9KHM9b1tpXS5tYXRjaCgvKFtePV0rKSg/Oj0oW1xcc1xcU10qKSk/LykpWzFdLnRyaW0oKS50b0xvd2VyQ2FzZSgpLGM9c1syXSxhKXtjYXNlXCJodHRwb25seVwiOnRoaXMubm9zY3JpcHQ9ITA7YnJlYWs7Y2FzZVwiZXhwaXJlc1wiOnRoaXMuZXhwaXJhdGlvbl9kYXRlPWM/TnVtYmVyKERhdGUucGFyc2UoYykpOjEvMDticmVhaztjYXNlXCJwYXRoXCI6dGhpcy5wYXRoPWM/Yy50cmltKCk6XCJcIix0aGlzLmV4cGxpY2l0X3BhdGg9ITA7YnJlYWs7Y2FzZVwiZG9tYWluXCI6dGhpcy5kb21haW49Yz9jLnRyaW0oKTpcIlwiLHRoaXMuZXhwbGljaXRfZG9tYWluPSEhdGhpcy5kb21haW47YnJlYWs7Y2FzZVwic2VjdXJlXCI6dGhpcy5zZWN1cmU9ITB9cmV0dXJuIHRoaXMuZXhwbGljaXRfcGF0aHx8KHRoaXMucGF0aD1ufHxcIi9cIiksdGhpcy5leHBsaWNpdF9kb21haW58fCh0aGlzLmRvbWFpbj10KSx0aGlzfXJldHVybihuZXcgcikucGFyc2UoZSx0LG4pfSxyLnByb3RvdHlwZS5tYXRjaGVzPWZ1bmN0aW9uKHQpe3JldHVybiB0PT09ZS5BbGx8fCEodGhpcy5ub3NjcmlwdCYmdC5zY3JpcHR8fHRoaXMuc2VjdXJlJiYhdC5zZWN1cmV8fCF0aGlzLmNvbGxpZGVzV2l0aCh0KSl9LHIucHJvdG90eXBlLmNvbGxpZGVzV2l0aD1mdW5jdGlvbihlKXtpZih0aGlzLnBhdGgmJiFlLnBhdGh8fHRoaXMuZG9tYWluJiYhZS5kb21haW4pcmV0dXJuITE7aWYodGhpcy5wYXRoJiYwIT09ZS5wYXRoLmluZGV4T2YodGhpcy5wYXRoKSlyZXR1cm4hMTtpZih0aGlzLmV4cGxpY2l0X3BhdGgmJjAhPT1lLnBhdGguaW5kZXhPZih0aGlzLnBhdGgpKXJldHVybiExO3ZhciB0PWUuZG9tYWluJiZlLmRvbWFpbi5yZXBsYWNlKC9eW1xcLl0vLFwiXCIpLHI9dGhpcy5kb21haW4mJnRoaXMuZG9tYWluLnJlcGxhY2UoL15bXFwuXS8sXCJcIik7aWYocj09PXQpcmV0dXJuITA7aWYocil7aWYoIXRoaXMuZXhwbGljaXRfZG9tYWluKXJldHVybiExO3ZhciBuPXQuaW5kZXhPZihyKTtyZXR1cm4tMSE9PW4mJm49PT10Lmxlbmd0aC1yLmxlbmd0aH1yZXR1cm4hMH0sdC5Db29raWVKYXI9aSxpLnByb3RvdHlwZS5zZXRDb29raWVzPWZ1bmN0aW9uKGUsdCxpKXt2YXIgbyxzLGE9W107Zm9yKGU9KGU9QXJyYXkuaXNBcnJheShlKT9lOmUuc3BsaXQobikpLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyByKGUsdCxpKX0pKSxvPTA7bzxlLmxlbmd0aDtvKz0xKXM9ZVtvXSx0aGlzLnNldENvb2tpZShzLHQsaSkmJmEucHVzaChzKTtyZXR1cm4gYX19KCl9LDY0OTc6KGUsdCxyKT0+e2Z1bmN0aW9uIG4oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX10LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXk/QXJyYXkuaXNBcnJheShlKTpcIltvYmplY3QgQXJyYXldXCI9PT1uKGUpfSx0LmlzQm9vbGVhbj1mdW5jdGlvbihlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGV9LHQuaXNOdWxsPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZX0sdC5pc051bGxPclVuZGVmaW5lZD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZX0sdC5pc051bWJlcj1mdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZX0sdC5pc1N0cmluZz1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZX0sdC5pc1N5bWJvbD1mdW5jdGlvbihlKXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZX0sdC5pc1VuZGVmaW5lZD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZX0sdC5pc1JlZ0V4cD1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09bihlKX0sdC5pc09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWV9LHQuaXNEYXRlPWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBEYXRlXVwiPT09bihlKX0sdC5pc0Vycm9yPWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBFcnJvcl1cIj09PW4oZSl8fGUgaW5zdGFuY2VvZiBFcnJvcn0sdC5pc0Z1bmN0aW9uPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9LHQuaXNQcmltaXRpdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlfHxcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJzeW1ib2xcIj09dHlwZW9mIGV8fHZvaWQgMD09PWV9LHQuaXNCdWZmZXI9cig4NzY0KS5CdWZmZXIuaXNCdWZmZXJ9LDYzOTM6KGUsdCxyKT0+e3ZhciBuPXIoODc2NCkuQnVmZmVyLGk9cig2MjY2KSxvPXIoMzU1MCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgYShlKX07dmFyIHM9e3NlY3AyNTZrMTp7bmFtZTpcInNlY3AyNTZrMVwiLGJ5dGVMZW5ndGg6MzJ9LHNlY3AyMjRyMTp7bmFtZTpcInAyMjRcIixieXRlTGVuZ3RoOjI4fSxwcmltZTI1NnYxOntuYW1lOlwicDI1NlwiLGJ5dGVMZW5ndGg6MzJ9LHByaW1lMTkydjE6e25hbWU6XCJwMTkyXCIsYnl0ZUxlbmd0aDoyNH0sZWQyNTUxOTp7bmFtZTpcImVkMjU1MTlcIixieXRlTGVuZ3RoOjMyfSxzZWNwMzg0cjE6e25hbWU6XCJwMzg0XCIsYnl0ZUxlbmd0aDo0OH0sc2VjcDUyMXIxOntuYW1lOlwicDUyMVwiLGJ5dGVMZW5ndGg6NjZ9fTtmdW5jdGlvbiBhKGUpe3RoaXMuY3VydmVUeXBlPXNbZV0sdGhpcy5jdXJ2ZVR5cGV8fCh0aGlzLmN1cnZlVHlwZT17bmFtZTplfSksdGhpcy5jdXJ2ZT1uZXcgaS5lYyh0aGlzLmN1cnZlVHlwZS5uYW1lKSx0aGlzLmtleXM9dm9pZCAwfWZ1bmN0aW9uIGMoZSx0LHIpe0FycmF5LmlzQXJyYXkoZSl8fChlPWUudG9BcnJheSgpKTt2YXIgaT1uZXcgbihlKTtpZihyJiZpLmxlbmd0aDxyKXt2YXIgbz1uZXcgbihyLWkubGVuZ3RoKTtvLmZpbGwoMCksaT1uLmNvbmNhdChbbyxpXSl9cmV0dXJuIHQ/aS50b1N0cmluZyh0KTppfXMucDIyND1zLnNlY3AyMjRyMSxzLnAyNTY9cy5zZWNwMjU2cjE9cy5wcmltZTI1NnYxLHMucDE5Mj1zLnNlY3AxOTJyMT1zLnByaW1lMTkydjEscy5wMzg0PXMuc2VjcDM4NHIxLHMucDUyMT1zLnNlY3A1MjFyMSxhLnByb3RvdHlwZS5nZW5lcmF0ZUtleXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5rZXlzPXRoaXMuY3VydmUuZ2VuS2V5UGFpcigpLHRoaXMuZ2V0UHVibGljS2V5KGUsdCl9LGEucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0PXR8fFwidXRmOFwiLG4uaXNCdWZmZXIoZSl8fChlPW5ldyBuKGUsdCkpLGModGhpcy5jdXJ2ZS5rZXlGcm9tUHVibGljKGUpLmdldFB1YmxpYygpLm11bCh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpKS5nZXRYKCkscix0aGlzLmN1cnZlVHlwZS5ieXRlTGVuZ3RoKX0sYS5wcm90b3R5cGUuZ2V0UHVibGljS2V5PWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5rZXlzLmdldFB1YmxpYyhcImNvbXByZXNzZWRcIj09PXQsITApO3JldHVyblwiaHlicmlkXCI9PT10JiYocltyLmxlbmd0aC0xXSUyP3JbMF09NzpyWzBdPTYpLGMocixlKX0sYS5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleT1mdW5jdGlvbihlKXtyZXR1cm4gYyh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpLGUpfSxhLnByb3RvdHlwZS5zZXRQdWJsaWNLZXk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxcInV0ZjhcIixuLmlzQnVmZmVyKGUpfHwoZT1uZXcgbihlLHQpKSx0aGlzLmtleXMuX2ltcG9ydFB1YmxpYyhlKSx0aGlzfSxhLnByb3RvdHlwZS5zZXRQcml2YXRlS2V5PWZ1bmN0aW9uKGUsdCl7dD10fHxcInV0ZjhcIixuLmlzQnVmZmVyKGUpfHwoZT1uZXcgbihlLHQpKTt2YXIgcj1uZXcgbyhlKTtyZXR1cm4gcj1yLnRvU3RyaW5nKDE2KSx0aGlzLmtleXM9dGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKCksdGhpcy5rZXlzLl9pbXBvcnRQcml2YXRlKHIpLHRoaXN9fSwzNDgyOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDU3MTcpLGk9cigyMzE4KSxvPXIoOTc4NSkscz1yKDkwNzIpLGE9cigxMDI3KTtmdW5jdGlvbiBjKGUpe2EuY2FsbCh0aGlzLFwiZGlnZXN0XCIpLHRoaXMuX2hhc2g9ZX1uKGMsYSksYy5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlKXt0aGlzLl9oYXNoLnVwZGF0ZShlKX0sYy5wcm90b3R5cGUuX2ZpbmFsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hhc2guZGlnZXN0KCl9LGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm5cIm1kNVwiPT09KGU9ZS50b0xvd2VyQ2FzZSgpKT9uZXcgaTpcInJtZDE2MFwiPT09ZXx8XCJyaXBlbWQxNjBcIj09PWU/bmV3IG86bmV3IGMocyhlKSl9fSw4MDI4OihlLHQscik9Pnt2YXIgbj1yKDIzMTgpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4obmV3IG4pLnVwZGF0ZShlKS5kaWdlc3QoKX19LDczOTQ6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNTcxNyksaT1yKDEwMzEpLG89cigxMDI3KSxzPXIoOTUwOSkuQnVmZmVyLGE9cig4MDI4KSxjPXIoOTc4NSksZj1yKDkwNzIpLHU9cy5hbGxvYygxMjgpO2Z1bmN0aW9uIGQoZSx0KXtvLmNhbGwodGhpcyxcImRpZ2VzdFwiKSxcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9cy5mcm9tKHQpKTt2YXIgcj1cInNoYTUxMlwiPT09ZXx8XCJzaGEzODRcIj09PWU/MTI4OjY0O3RoaXMuX2FsZz1lLHRoaXMuX2tleT10LHQubGVuZ3RoPnI/dD0oXCJybWQxNjBcIj09PWU/bmV3IGM6ZihlKSkudXBkYXRlKHQpLmRpZ2VzdCgpOnQubGVuZ3RoPHImJih0PXMuY29uY2F0KFt0LHVdLHIpKTtmb3IodmFyIG49dGhpcy5faXBhZD1zLmFsbG9jVW5zYWZlKHIpLGk9dGhpcy5fb3BhZD1zLmFsbG9jVW5zYWZlKHIpLGE9MDthPHI7YSsrKW5bYV09NTRedFthXSxpW2FdPTkyXnRbYV07dGhpcy5faGFzaD1cInJtZDE2MFwiPT09ZT9uZXcgYzpmKGUpLHRoaXMuX2hhc2gudXBkYXRlKG4pfW4oZCxvKSxkLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKGUpe3RoaXMuX2hhc2gudXBkYXRlKGUpfSxkLnByb3RvdHlwZS5fZmluYWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9oYXNoLmRpZ2VzdCgpO3JldHVybihcInJtZDE2MFwiPT09dGhpcy5fYWxnP25ldyBjOmYodGhpcy5fYWxnKSkudXBkYXRlKHRoaXMuX29wYWQpLnVwZGF0ZShlKS5kaWdlc3QoKX0sZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJybWQxNjBcIj09PShlPWUudG9Mb3dlckNhc2UoKSl8fFwicmlwZW1kMTYwXCI9PT1lP25ldyBkKFwicm1kMTYwXCIsdCk6XCJtZDVcIj09PWU/bmV3IGkoYSx0KTpuZXcgZChlLHQpfX0sMTAzMTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig1NzE3KSxpPXIoOTUwOSkuQnVmZmVyLG89cigxMDI3KSxzPWkuYWxsb2MoMTI4KSxhPTY0O2Z1bmN0aW9uIGMoZSx0KXtvLmNhbGwodGhpcyxcImRpZ2VzdFwiKSxcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9aS5mcm9tKHQpKSx0aGlzLl9hbGc9ZSx0aGlzLl9rZXk9dCx0Lmxlbmd0aD5hP3Q9ZSh0KTp0Lmxlbmd0aDxhJiYodD1pLmNvbmNhdChbdCxzXSxhKSk7Zm9yKHZhciByPXRoaXMuX2lwYWQ9aS5hbGxvY1Vuc2FmZShhKSxuPXRoaXMuX29wYWQ9aS5hbGxvY1Vuc2FmZShhKSxjPTA7YzxhO2MrKylyW2NdPTU0XnRbY10sbltjXT05Ml50W2NdO3RoaXMuX2hhc2g9W3JdfW4oYyxvKSxjLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKGUpe3RoaXMuX2hhc2gucHVzaChlKX0sYy5wcm90b3R5cGUuX2ZpbmFsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fYWxnKGkuY29uY2F0KHRoaXMuX2hhc2gpKTtyZXR1cm4gdGhpcy5fYWxnKGkuY29uY2F0KFt0aGlzLl9vcGFkLGVdKSl9LGUuZXhwb3J0cz1jfSw1ODM1OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt0LnJhbmRvbUJ5dGVzPXQucm5nPXQucHNldWRvUmFuZG9tQnl0ZXM9dC5wcm5nPXIoMTc5OCksdC5jcmVhdGVIYXNoPXQuSGFzaD1yKDM0ODIpLHQuY3JlYXRlSG1hYz10LkhtYWM9cig3Mzk0KTt2YXIgbj1yKDYwNDIpLGk9T2JqZWN0LmtleXMobiksbz1bXCJzaGExXCIsXCJzaGEyMjRcIixcInNoYTI1NlwiLFwic2hhMzg0XCIsXCJzaGE1MTJcIixcIm1kNVwiLFwicm1kMTYwXCJdLmNvbmNhdChpKTt0LmdldEhhc2hlcz1mdW5jdGlvbigpe3JldHVybiBvfTt2YXIgcz1yKDU2MzIpO3QucGJrZGYyPXMucGJrZGYyLHQucGJrZGYyU3luYz1zLnBia2RmMlN5bmM7dmFyIGE9cigzNjE0KTt0LkNpcGhlcj1hLkNpcGhlcix0LmNyZWF0ZUNpcGhlcj1hLmNyZWF0ZUNpcGhlcix0LkNpcGhlcml2PWEuQ2lwaGVyaXYsdC5jcmVhdGVDaXBoZXJpdj1hLmNyZWF0ZUNpcGhlcml2LHQuRGVjaXBoZXI9YS5EZWNpcGhlcix0LmNyZWF0ZURlY2lwaGVyPWEuY3JlYXRlRGVjaXBoZXIsdC5EZWNpcGhlcml2PWEuRGVjaXBoZXJpdix0LmNyZWF0ZURlY2lwaGVyaXY9YS5jcmVhdGVEZWNpcGhlcml2LHQuZ2V0Q2lwaGVycz1hLmdldENpcGhlcnMsdC5saXN0Q2lwaGVycz1hLmxpc3RDaXBoZXJzO3ZhciBjPXIoMjYwNyk7dC5EaWZmaWVIZWxsbWFuR3JvdXA9Yy5EaWZmaWVIZWxsbWFuR3JvdXAsdC5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXA9Yy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAsdC5nZXREaWZmaWVIZWxsbWFuPWMuZ2V0RGlmZmllSGVsbG1hbix0LmNyZWF0ZURpZmZpZUhlbGxtYW49Yy5jcmVhdGVEaWZmaWVIZWxsbWFuLHQuRGlmZmllSGVsbG1hbj1jLkRpZmZpZUhlbGxtYW47dmFyIGY9cig0NzQzKTt0LmNyZWF0ZVNpZ249Zi5jcmVhdGVTaWduLHQuU2lnbj1mLlNpZ24sdC5jcmVhdGVWZXJpZnk9Zi5jcmVhdGVWZXJpZnksdC5WZXJpZnk9Zi5WZXJpZnksdC5jcmVhdGVFQ0RIPXIoNjM5Myk7dmFyIHU9cig3OTAwKTt0LnB1YmxpY0VuY3J5cHQ9dS5wdWJsaWNFbmNyeXB0LHQucHJpdmF0ZUVuY3J5cHQ9dS5wcml2YXRlRW5jcnlwdCx0LnB1YmxpY0RlY3J5cHQ9dS5wdWJsaWNEZWNyeXB0LHQucHJpdmF0ZURlY3J5cHQ9dS5wcml2YXRlRGVjcnlwdDt2YXIgZD1yKDc5NjMpO3QucmFuZG9tRmlsbD1kLnJhbmRvbUZpbGwsdC5yYW5kb21GaWxsU3luYz1kLnJhbmRvbUZpbGxTeW5jLHQuY3JlYXRlQ3JlZGVudGlhbHM9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoW1wic29ycnksIGNyZWF0ZUNyZWRlbnRpYWxzIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXRcIixcIndlIGFjY2VwdCBwdWxsIHJlcXVlc3RzXCIsXCJodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnlcIl0uam9pbihcIlxcblwiKSl9LHQuY29uc3RhbnRzPXtESF9DSEVDS19QX05PVF9TQUZFX1BSSU1FOjIsREhfQ0hFQ0tfUF9OT1RfUFJJTUU6MSxESF9VTkFCTEVfVE9fQ0hFQ0tfR0VORVJBVE9SOjQsREhfTk9UX1NVSVRBQkxFX0dFTkVSQVRPUjo4LE5QTl9FTkFCTEVEOjEsQUxQTl9FTkFCTEVEOjEsUlNBX1BLQ1MxX1BBRERJTkc6MSxSU0FfU1NMVjIzX1BBRERJTkc6MixSU0FfTk9fUEFERElORzozLFJTQV9QS0NTMV9PQUVQX1BBRERJTkc6NCxSU0FfWDkzMV9QQURESU5HOjUsUlNBX1BLQ1MxX1BTU19QQURESU5HOjYsUE9JTlRfQ09OVkVSU0lPTl9DT01QUkVTU0VEOjIsUE9JTlRfQ09OVkVSU0lPTl9VTkNPTVBSRVNTRUQ6NCxQT0lOVF9DT05WRVJTSU9OX0hZQlJJRDo2fX0sNDI4OTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyMjE1KSxpPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcImZvb1wiKSxvPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcscz1BcnJheS5wcm90b3R5cGUuY29uY2F0LGE9T2JqZWN0LmRlZmluZVByb3BlcnR5LGM9cigxMDQ0KSgpLGY9YSYmYyx1PWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpOyghKHQgaW4gZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mKGk9bikmJlwiW29iamVjdCBGdW5jdGlvbl1cIj09PW8uY2FsbChpKSYmbigpKSYmKGY/YShlLHQse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHZhbHVlOnIsd3JpdGFibGU6ITB9KTplW3RdPXIpfSxkPWZ1bmN0aW9uKGUsdCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4yP2FyZ3VtZW50c1syXTp7fSxvPW4odCk7aSYmKG89cy5jYWxsKG8sT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KSkpO2Zvcih2YXIgYT0wO2E8by5sZW5ndGg7YSs9MSl1KGUsb1thXSx0W29bYV1dLHJbb1thXV0pfTtkLnN1cHBvcnRzRGVzY3JpcHRvcnM9ISFmLGUuZXhwb3J0cz1kfSw1MjUxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt0LnV0aWxzPXIoMTI3OCksdC5DaXBoZXI9cig1NzU2KSx0LkRFUz1yKDMyNyksdC5DQkM9cig5MDUxKSx0LkVERT1yKDY1MSl9LDkwNTE6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoOTc0NiksaT1yKDU3MTcpLG89e307ZnVuY3Rpb24gcyhlKXtuLmVxdWFsKGUubGVuZ3RoLDgsXCJJbnZhbGlkIElWIGxlbmd0aFwiKSx0aGlzLml2PW5ldyBBcnJheSg4KTtmb3IodmFyIHQ9MDt0PHRoaXMuaXYubGVuZ3RoO3QrKyl0aGlzLml2W3RdPWVbdF19dC5pbnN0YW50aWF0ZT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe2UuY2FsbCh0aGlzLHQpLHRoaXMuX2NiY0luaXQoKX1pKHQsZSk7Zm9yKHZhciByPU9iamVjdC5rZXlzKG8pLG49MDtuPHIubGVuZ3RoO24rKyl7dmFyIHM9cltuXTt0LnByb3RvdHlwZVtzXT1vW3NdfXJldHVybiB0LmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHQoZSl9LHR9LG8uX2NiY0luaXQ9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcyh0aGlzLm9wdGlvbnMuaXYpO3RoaXMuX2NiY1N0YXRlPWV9LG8uX3VwZGF0ZT1mdW5jdGlvbihlLHQscixuKXt2YXIgaT10aGlzLl9jYmNTdGF0ZSxvPXRoaXMuY29uc3RydWN0b3Iuc3VwZXJfLnByb3RvdHlwZSxzPWkuaXY7aWYoXCJlbmNyeXB0XCI9PT10aGlzLnR5cGUpe2Zvcih2YXIgYT0wO2E8dGhpcy5ibG9ja1NpemU7YSsrKXNbYV1ePWVbdCthXTtmb3Ioby5fdXBkYXRlLmNhbGwodGhpcyxzLDAscixuKSxhPTA7YTx0aGlzLmJsb2NrU2l6ZTthKyspc1thXT1yW24rYV19ZWxzZXtmb3Ioby5fdXBkYXRlLmNhbGwodGhpcyxlLHQscixuKSxhPTA7YTx0aGlzLmJsb2NrU2l6ZTthKyspcltuK2FdXj1zW2FdO2ZvcihhPTA7YTx0aGlzLmJsb2NrU2l6ZTthKyspc1thXT1lW3QrYV19fX0sNTc1NjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig5NzQ2KTtmdW5jdGlvbiBpKGUpe3RoaXMub3B0aW9ucz1lLHRoaXMudHlwZT10aGlzLm9wdGlvbnMudHlwZSx0aGlzLmJsb2NrU2l6ZT04LHRoaXMuX2luaXQoKSx0aGlzLmJ1ZmZlcj1uZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpLHRoaXMuYnVmZmVyT2ZmPTB9ZS5leHBvcnRzPWksaS5wcm90b3R5cGUuX2luaXQ9ZnVuY3Rpb24oKXt9LGkucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWUubGVuZ3RoP1tdOlwiZGVjcnlwdFwiPT09dGhpcy50eXBlP3RoaXMuX3VwZGF0ZURlY3J5cHQoZSk6dGhpcy5fdXBkYXRlRW5jcnlwdChlKX0saS5wcm90b3R5cGUuX2J1ZmZlcj1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1NYXRoLm1pbih0aGlzLmJ1ZmZlci5sZW5ndGgtdGhpcy5idWZmZXJPZmYsZS5sZW5ndGgtdCksbj0wO248cjtuKyspdGhpcy5idWZmZXJbdGhpcy5idWZmZXJPZmYrbl09ZVt0K25dO3JldHVybiB0aGlzLmJ1ZmZlck9mZis9cixyfSxpLnByb3RvdHlwZS5fZmx1c2hCdWZmZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLDAsZSx0KSx0aGlzLmJ1ZmZlck9mZj0wLHRoaXMuYmxvY2tTaXplfSxpLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdD1mdW5jdGlvbihlKXt2YXIgdD0wLHI9MCxuPSh0aGlzLmJ1ZmZlck9mZitlLmxlbmd0aCkvdGhpcy5ibG9ja1NpemV8MCxpPW5ldyBBcnJheShuKnRoaXMuYmxvY2tTaXplKTswIT09dGhpcy5idWZmZXJPZmYmJih0Kz10aGlzLl9idWZmZXIoZSx0KSx0aGlzLmJ1ZmZlck9mZj09PXRoaXMuYnVmZmVyLmxlbmd0aCYmKHIrPXRoaXMuX2ZsdXNoQnVmZmVyKGkscikpKTtmb3IodmFyIG89ZS5sZW5ndGgtKGUubGVuZ3RoLXQpJXRoaXMuYmxvY2tTaXplO3Q8bzt0Kz10aGlzLmJsb2NrU2l6ZSl0aGlzLl91cGRhdGUoZSx0LGkscikscis9dGhpcy5ibG9ja1NpemU7Zm9yKDt0PGUubGVuZ3RoO3QrKyx0aGlzLmJ1ZmZlck9mZisrKXRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmXT1lW3RdO3JldHVybiBpfSxpLnByb3RvdHlwZS5fdXBkYXRlRGVjcnlwdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxyPTAsbj1NYXRoLmNlaWwoKHRoaXMuYnVmZmVyT2ZmK2UubGVuZ3RoKS90aGlzLmJsb2NrU2l6ZSktMSxpPW5ldyBBcnJheShuKnRoaXMuYmxvY2tTaXplKTtuPjA7bi0tKXQrPXRoaXMuX2J1ZmZlcihlLHQpLHIrPXRoaXMuX2ZsdXNoQnVmZmVyKGkscik7cmV0dXJuIHQrPXRoaXMuX2J1ZmZlcihlLHQpLGl9LGkucHJvdG90eXBlLmZpbmFsPWZ1bmN0aW9uKGUpe3ZhciB0LHI7cmV0dXJuIGUmJih0PXRoaXMudXBkYXRlKGUpKSxyPVwiZW5jcnlwdFwiPT09dGhpcy50eXBlP3RoaXMuX2ZpbmFsRW5jcnlwdCgpOnRoaXMuX2ZpbmFsRGVjcnlwdCgpLHQ/dC5jb25jYXQocik6cn0saS5wcm90b3R5cGUuX3BhZD1mdW5jdGlvbihlLHQpe2lmKDA9PT10KXJldHVybiExO2Zvcig7dDxlLmxlbmd0aDspZVt0KytdPTA7cmV0dXJuITB9LGkucHJvdG90eXBlLl9maW5hbEVuY3J5cHQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fcGFkKHRoaXMuYnVmZmVyLHRoaXMuYnVmZmVyT2ZmKSlyZXR1cm5bXTt2YXIgZT1uZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO3JldHVybiB0aGlzLl91cGRhdGUodGhpcy5idWZmZXIsMCxlLDApLGV9LGkucHJvdG90eXBlLl91bnBhZD1mdW5jdGlvbihlKXtyZXR1cm4gZX0saS5wcm90b3R5cGUuX2ZpbmFsRGVjcnlwdD1mdW5jdGlvbigpe24uZXF1YWwodGhpcy5idWZmZXJPZmYsdGhpcy5ibG9ja1NpemUsXCJOb3QgZW5vdWdoIGRhdGEgdG8gZGVjcnlwdFwiKTt2YXIgZT1uZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO3JldHVybiB0aGlzLl9mbHVzaEJ1ZmZlcihlLDApLHRoaXMuX3VucGFkKGUpfX0sMzI3OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDk3NDYpLGk9cig1NzE3KSxvPXIoMTI3OCkscz1yKDU3NTYpO2Z1bmN0aW9uIGEoKXt0aGlzLnRtcD1uZXcgQXJyYXkoMiksdGhpcy5rZXlzPW51bGx9ZnVuY3Rpb24gYyhlKXtzLmNhbGwodGhpcyxlKTt2YXIgdD1uZXcgYTt0aGlzLl9kZXNTdGF0ZT10LHRoaXMuZGVyaXZlS2V5cyh0LGUua2V5KX1pKGMscyksZS5leHBvcnRzPWMsYy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBjKGUpfTt2YXIgZj1bMSwxLDIsMiwyLDIsMiwyLDEsMiwyLDIsMiwyLDIsMV07Yy5wcm90b3R5cGUuZGVyaXZlS2V5cz1mdW5jdGlvbihlLHQpe2Uua2V5cz1uZXcgQXJyYXkoMzIpLG4uZXF1YWwodC5sZW5ndGgsdGhpcy5ibG9ja1NpemUsXCJJbnZhbGlkIGtleSBsZW5ndGhcIik7dmFyIHI9by5yZWFkVUludDMyQkUodCwwKSxpPW8ucmVhZFVJbnQzMkJFKHQsNCk7by5wYzEocixpLGUudG1wLDApLHI9ZS50bXBbMF0saT1lLnRtcFsxXTtmb3IodmFyIHM9MDtzPGUua2V5cy5sZW5ndGg7cys9Mil7dmFyIGE9ZltzPj4+MV07cj1vLnIyOHNobChyLGEpLGk9by5yMjhzaGwoaSxhKSxvLnBjMihyLGksZS5rZXlzLHMpfX0sYy5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlLHQscixuKXt2YXIgaT10aGlzLl9kZXNTdGF0ZSxzPW8ucmVhZFVJbnQzMkJFKGUsdCksYT1vLnJlYWRVSW50MzJCRShlLHQrNCk7by5pcChzLGEsaS50bXAsMCkscz1pLnRtcFswXSxhPWkudG1wWzFdLFwiZW5jcnlwdFwiPT09dGhpcy50eXBlP3RoaXMuX2VuY3J5cHQoaSxzLGEsaS50bXAsMCk6dGhpcy5fZGVjcnlwdChpLHMsYSxpLnRtcCwwKSxzPWkudG1wWzBdLGE9aS50bXBbMV0sby53cml0ZVVJbnQzMkJFKHIscyxuKSxvLndyaXRlVUludDMyQkUocixhLG4rNCl9LGMucHJvdG90eXBlLl9wYWQ9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9ZS5sZW5ndGgtdCxuPXQ7bjxlLmxlbmd0aDtuKyspZVtuXT1yO3JldHVybiEwfSxjLnByb3RvdHlwZS5fdW5wYWQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWVbZS5sZW5ndGgtMV0scj1lLmxlbmd0aC10O3I8ZS5sZW5ndGg7cisrKW4uZXF1YWwoZVtyXSx0KTtyZXR1cm4gZS5zbGljZSgwLGUubGVuZ3RoLXQpfSxjLnByb3RvdHlwZS5fZW5jcnlwdD1mdW5jdGlvbihlLHQscixuLGkpe2Zvcih2YXIgcz10LGE9cixjPTA7YzxlLmtleXMubGVuZ3RoO2MrPTIpe3ZhciBmPWUua2V5c1tjXSx1PWUua2V5c1tjKzFdO28uZXhwYW5kKGEsZS50bXAsMCksZl49ZS50bXBbMF0sdV49ZS50bXBbMV07dmFyIGQ9by5zdWJzdGl0dXRlKGYsdSksaD1hO2E9KHNeby5wZXJtdXRlKGQpKT4+PjAscz1ofW8ucmlwKGEscyxuLGkpfSxjLnByb3RvdHlwZS5fZGVjcnlwdD1mdW5jdGlvbihlLHQscixuLGkpe2Zvcih2YXIgcz1yLGE9dCxjPWUua2V5cy5sZW5ndGgtMjtjPj0wO2MtPTIpe3ZhciBmPWUua2V5c1tjXSx1PWUua2V5c1tjKzFdO28uZXhwYW5kKHMsZS50bXAsMCksZl49ZS50bXBbMF0sdV49ZS50bXBbMV07dmFyIGQ9by5zdWJzdGl0dXRlKGYsdSksaD1zO3M9KGFeby5wZXJtdXRlKGQpKT4+PjAsYT1ofW8ucmlwKHMsYSxuLGkpfX0sNjUxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDk3NDYpLGk9cig1NzE3KSxvPXIoNTc1Nikscz1yKDMyNyk7ZnVuY3Rpb24gYShlLHQpe24uZXF1YWwodC5sZW5ndGgsMjQsXCJJbnZhbGlkIGtleSBsZW5ndGhcIik7dmFyIHI9dC5zbGljZSgwLDgpLGk9dC5zbGljZSg4LDE2KSxvPXQuc2xpY2UoMTYsMjQpO3RoaXMuY2lwaGVycz1cImVuY3J5cHRcIj09PWU/W3MuY3JlYXRlKHt0eXBlOlwiZW5jcnlwdFwiLGtleTpyfSkscy5jcmVhdGUoe3R5cGU6XCJkZWNyeXB0XCIsa2V5Oml9KSxzLmNyZWF0ZSh7dHlwZTpcImVuY3J5cHRcIixrZXk6b30pXTpbcy5jcmVhdGUoe3R5cGU6XCJkZWNyeXB0XCIsa2V5Om99KSxzLmNyZWF0ZSh7dHlwZTpcImVuY3J5cHRcIixrZXk6aX0pLHMuY3JlYXRlKHt0eXBlOlwiZGVjcnlwdFwiLGtleTpyfSldfWZ1bmN0aW9uIGMoZSl7by5jYWxsKHRoaXMsZSk7dmFyIHQ9bmV3IGEodGhpcy50eXBlLHRoaXMub3B0aW9ucy5rZXkpO3RoaXMuX2VkZVN0YXRlPXR9aShjLG8pLGUuZXhwb3J0cz1jLGMuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgYyhlKX0sYy5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlLHQscixuKXt2YXIgaT10aGlzLl9lZGVTdGF0ZTtpLmNpcGhlcnNbMF0uX3VwZGF0ZShlLHQscixuKSxpLmNpcGhlcnNbMV0uX3VwZGF0ZShyLG4scixuKSxpLmNpcGhlcnNbMl0uX3VwZGF0ZShyLG4scixuKX0sYy5wcm90b3R5cGUuX3BhZD1zLnByb3RvdHlwZS5fcGFkLGMucHJvdG90eXBlLl91bnBhZD1zLnByb3RvdHlwZS5fdW5wYWR9LDEyNzg6KGUsdCk9PntcInVzZSBzdHJpY3RcIjt0LnJlYWRVSW50MzJCRT1mdW5jdGlvbihlLHQpe3JldHVybihlWzArdF08PDI0fGVbMSt0XTw8MTZ8ZVsyK3RdPDw4fGVbMyt0XSk+Pj4wfSx0LndyaXRlVUludDMyQkU9ZnVuY3Rpb24oZSx0LHIpe2VbMCtyXT10Pj4+MjQsZVsxK3JdPXQ+Pj4xNiYyNTUsZVsyK3JdPXQ+Pj44JjI1NSxlWzMrcl09MjU1JnR9LHQuaXA9ZnVuY3Rpb24oZSx0LHIsbil7Zm9yKHZhciBpPTAsbz0wLHM9NjtzPj0wO3MtPTIpe2Zvcih2YXIgYT0wO2E8PTI0O2ErPTgpaTw8PTEsaXw9dD4+PmErcyYxO2ZvcihhPTA7YTw9MjQ7YSs9OClpPDw9MSxpfD1lPj4+YStzJjF9Zm9yKHM9NjtzPj0wO3MtPTIpe2ZvcihhPTE7YTw9MjU7YSs9OClvPDw9MSxvfD10Pj4+YStzJjE7Zm9yKGE9MTthPD0yNTthKz04KW88PD0xLG98PWU+Pj5hK3MmMX1yW24rMF09aT4+PjAscltuKzFdPW8+Pj4wfSx0LnJpcD1mdW5jdGlvbihlLHQscixuKXtmb3IodmFyIGk9MCxvPTAscz0wO3M8NDtzKyspZm9yKHZhciBhPTI0O2E+PTA7YS09OClpPDw9MSxpfD10Pj4+YStzJjEsaTw8PTEsaXw9ZT4+PmErcyYxO2ZvcihzPTQ7czw4O3MrKylmb3IoYT0yNDthPj0wO2EtPTgpbzw8PTEsb3w9dD4+PmErcyYxLG88PD0xLG98PWU+Pj5hK3MmMTtyW24rMF09aT4+PjAscltuKzFdPW8+Pj4wfSx0LnBjMT1mdW5jdGlvbihlLHQscixuKXtmb3IodmFyIGk9MCxvPTAscz03O3M+PTU7cy0tKXtmb3IodmFyIGE9MDthPD0yNDthKz04KWk8PD0xLGl8PXQ+PmErcyYxO2ZvcihhPTA7YTw9MjQ7YSs9OClpPDw9MSxpfD1lPj5hK3MmMX1mb3IoYT0wO2E8PTI0O2ErPTgpaTw8PTEsaXw9dD4+YStzJjE7Zm9yKHM9MTtzPD0zO3MrKyl7Zm9yKGE9MDthPD0yNDthKz04KW88PD0xLG98PXQ+PmErcyYxO2ZvcihhPTA7YTw9MjQ7YSs9OClvPDw9MSxvfD1lPj5hK3MmMX1mb3IoYT0wO2E8PTI0O2ErPTgpbzw8PTEsb3w9ZT4+YStzJjE7cltuKzBdPWk+Pj4wLHJbbisxXT1vPj4+MH0sdC5yMjhzaGw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTw8dCYyNjg0MzU0NTV8ZT4+PjI4LXR9O3ZhciByPVsxNCwxMSwxNyw0LDI3LDIzLDI1LDAsMTMsMjIsNywxOCw1LDksMTYsMjQsMiwyMCwxMiwyMSwxLDgsMTUsMjYsMTUsNCwyNSwxOSw5LDEsMjYsMTYsNSwxMSwyMyw4LDEyLDcsMTcsMCwyMiwzLDEwLDE0LDYsMjAsMjcsMjRdO3QucGMyPWZ1bmN0aW9uKGUsdCxuLGkpe2Zvcih2YXIgbz0wLHM9MCxhPXIubGVuZ3RoPj4+MSxjPTA7YzxhO2MrKylvPDw9MSxvfD1lPj4+cltjXSYxO2ZvcihjPWE7YzxyLmxlbmd0aDtjKyspczw8PTEsc3w9dD4+PnJbY10mMTtuW2krMF09bz4+PjAsbltpKzFdPXM+Pj4wfSx0LmV4cGFuZD1mdW5jdGlvbihlLHQscil7dmFyIG49MCxpPTA7bj0oMSZlKTw8NXxlPj4+Mjc7Zm9yKHZhciBvPTIzO28+PTE1O28tPTQpbjw8PTYsbnw9ZT4+Pm8mNjM7Zm9yKG89MTE7bz49MztvLT00KWl8PWU+Pj5vJjYzLGk8PD02O2l8PSgzMSZlKTw8MXxlPj4+MzEsdFtyKzBdPW4+Pj4wLHRbcisxXT1pPj4+MH07dmFyIG49WzE0LDAsNCwxNSwxMyw3LDEsNCwyLDE0LDE1LDIsMTEsMTMsOCwxLDMsMTAsMTAsNiw2LDEyLDEyLDExLDUsOSw5LDUsMCwzLDcsOCw0LDE1LDEsMTIsMTQsOCw4LDIsMTMsNCw2LDksMiwxLDExLDcsMTUsNSwxMiwxMSw5LDMsNywxNCwzLDEwLDEwLDAsNSw2LDAsMTMsMTUsMywxLDEzLDgsNCwxNCw3LDYsMTUsMTEsMiwzLDgsNCwxNCw5LDEyLDcsMCwyLDEsMTMsMTAsMTIsNiwwLDksNSwxMSwxMCw1LDAsMTMsMTQsOCw3LDEwLDExLDEsMTAsMyw0LDE1LDEzLDQsMSwyLDUsMTEsOCw2LDEyLDcsNiwxMiw5LDAsMyw1LDIsMTQsMTUsOSwxMCwxMywwLDcsOSwwLDE0LDksNiwzLDMsNCwxNSw2LDUsMTAsMSwyLDEzLDgsMTIsNSw3LDE0LDExLDEyLDQsMTEsMiwxNSw4LDEsMTMsMSw2LDEwLDQsMTMsOSwwLDgsNiwxNSw5LDMsOCwwLDcsMTEsNCwxLDE1LDIsMTQsMTIsMyw1LDExLDEwLDUsMTQsMiw3LDEyLDcsMTMsMTMsOCwxNCwxMSwzLDUsMCw2LDYsMTUsOSwwLDEwLDMsMSw0LDIsNyw4LDIsNSwxMiwxMSwxLDEyLDEwLDQsMTQsMTUsOSwxMCwzLDYsMTUsOSwwLDAsNiwxMiwxMCwxMSwxLDcsMTMsMTMsOCwxNSw5LDEsNCwzLDUsMTQsMTEsNSwxMiwyLDcsOCwyLDQsMTQsMiwxNCwxMiwxMSw0LDIsMSwxMiw3LDQsMTAsNywxMSwxMyw2LDEsOCw1LDUsMCwzLDE1LDE1LDEwLDEzLDMsMCw5LDE0LDgsOSw2LDQsMTEsMiw4LDEsMTIsMTEsNywxMCwxLDEzLDE0LDcsMiw4LDEzLDE1LDYsOSwxNSwxMiwwLDUsOSw2LDEwLDMsNCwwLDUsMTQsMywxMiwxMCwxLDE1LDEwLDQsMTUsMiw5LDcsMiwxMiw2LDksOCw1LDAsNiwxMywxLDMsMTMsNCwxNCwxNCwwLDcsMTEsNSwzLDExLDgsOSw0LDE0LDMsMTUsMiw1LDEyLDIsOSw4LDUsMTIsMTUsMywxMCw3LDExLDAsMTQsNCwxLDEwLDcsMSw2LDEzLDAsMTEsOCw2LDEzLDQsMTMsMTEsMCwyLDExLDE0LDcsMTUsNCwwLDksOCwxLDEzLDEwLDMsMTQsMTIsMyw5LDUsNywxMiw1LDIsMTAsMTUsNiw4LDEsNiwxLDYsNCwxMSwxMSwxMywxMyw4LDEyLDEsMyw0LDcsMTAsMTQsNywxMCw5LDE1LDUsNiwwLDgsMTUsMCwxNCw1LDIsOSwzLDIsMTIsMTMsMSwyLDE1LDgsMTMsNCw4LDYsMTAsMTUsMywxMSw3LDEsNCwxMCwxMiw5LDUsMyw2LDE0LDExLDUsMCwwLDE0LDEyLDksNywyLDcsMiwxMSwxLDQsMTQsMSw3LDksNCwxMiwxMCwxNCw4LDIsMTMsMCwxNSw2LDEyLDEwLDksMTMsMCwxNSwzLDMsNSw1LDYsOCwxMV07dC5zdWJzdGl0dXRlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTAsaT0wO2k8NDtpKyspcjw8PTQscnw9bls2NCppKyhlPj4+MTgtNippJjYzKV07Zm9yKGk9MDtpPDQ7aSsrKXI8PD00LHJ8PW5bMjU2KzY0KmkrKHQ+Pj4xOC02KmkmNjMpXTtyZXR1cm4gcj4+PjB9O3ZhciBpPVsxNiwyNSwxMiwxMSwzLDIwLDQsMTUsMzEsMTcsOSw2LDI3LDE0LDEsMjIsMzAsMjQsOCwxOCwwLDUsMjksMjMsMTMsMTksMiwyNiwxMCwyMSwyOCw3XTt0LnBlcm11dGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAscj0wO3I8aS5sZW5ndGg7cisrKXQ8PD0xLHR8PWU+Pj5pW3JdJjE7cmV0dXJuIHQ+Pj4wfSx0LnBhZFNwbGl0PWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49ZS50b1N0cmluZygyKTtuLmxlbmd0aDx0OyluPVwiMFwiK247Zm9yKHZhciBpPVtdLG89MDtvPHQ7bys9cilpLnB1c2gobi5zbGljZShvLG8rcikpO3JldHVybiBpLmpvaW4oXCIgXCIpfX0sMjYwNzooZSx0LHIpPT57dmFyIG49cig4NzY0KS5CdWZmZXIsaT1yKDM1OTApLG89cig5Nzk5KSxzPXIoNzQyNiksYT17YmluYXJ5OiEwLGhleDohMCxiYXNlNjQ6ITB9O3QuRGlmZmllSGVsbG1hbkdyb3VwPXQuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwPXQuZ2V0RGlmZmllSGVsbG1hbj1mdW5jdGlvbihlKXt2YXIgdD1uZXcgbihvW2VdLnByaW1lLFwiaGV4XCIpLHI9bmV3IG4ob1tlXS5nZW4sXCJoZXhcIik7cmV0dXJuIG5ldyBzKHQscil9LHQuY3JlYXRlRGlmZmllSGVsbG1hbj10LkRpZmZpZUhlbGxtYW49ZnVuY3Rpb24gZSh0LHIsbyxjKXtyZXR1cm4gbi5pc0J1ZmZlcihyKXx8dm9pZCAwPT09YVtyXT9lKHQsXCJiaW5hcnlcIixyLG8pOihyPXJ8fFwiYmluYXJ5XCIsYz1jfHxcImJpbmFyeVwiLG89b3x8bmV3IG4oWzJdKSxuLmlzQnVmZmVyKG8pfHwobz1uZXcgbihvLGMpKSxcIm51bWJlclwiPT10eXBlb2YgdD9uZXcgcyhpKHQsbyksbywhMCk6KG4uaXNCdWZmZXIodCl8fCh0PW5ldyBuKHQscikpLG5ldyBzKHQsbywhMCkpKX19LDc0MjY6KGUsdCxyKT0+e3ZhciBuPXIoODc2NCkuQnVmZmVyLGk9cigzNTUwKSxvPW5ldyhyKDMwNDcpKSxzPW5ldyBpKDI0KSxhPW5ldyBpKDExKSxjPW5ldyBpKDEwKSxmPW5ldyBpKDMpLHU9bmV3IGkoNyksZD1yKDM1OTApLGg9cigxNzk4KTtmdW5jdGlvbiBsKGUsdCl7cmV0dXJuIHQ9dHx8XCJ1dGY4XCIsbi5pc0J1ZmZlcihlKXx8KGU9bmV3IG4oZSx0KSksdGhpcy5fcHViPW5ldyBpKGUpLHRoaXN9ZnVuY3Rpb24gcChlLHQpe3JldHVybiB0PXR8fFwidXRmOFwiLG4uaXNCdWZmZXIoZSl8fChlPW5ldyBuKGUsdCkpLHRoaXMuX3ByaXY9bmV3IGkoZSksdGhpc31lLmV4cG9ydHM9eTt2YXIgYj17fTtmdW5jdGlvbiB5KGUsdCxyKXt0aGlzLnNldEdlbmVyYXRvcih0KSx0aGlzLl9fcHJpbWU9bmV3IGkoZSksdGhpcy5fcHJpbWU9aS5tb250KHRoaXMuX19wcmltZSksdGhpcy5fcHJpbWVMZW49ZS5sZW5ndGgsdGhpcy5fcHViPXZvaWQgMCx0aGlzLl9wcml2PXZvaWQgMCx0aGlzLl9wcmltZUNvZGU9dm9pZCAwLHI/KHRoaXMuc2V0UHVibGljS2V5PWwsdGhpcy5zZXRQcml2YXRlS2V5PXApOnRoaXMuX3ByaW1lQ29kZT04fWZ1bmN0aW9uIGcoZSx0KXt2YXIgcj1uZXcgbihlLnRvQXJyYXkoKSk7cmV0dXJuIHQ/ci50b1N0cmluZyh0KTpyfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LnByb3RvdHlwZSxcInZlcmlmeUVycm9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJudW1iZXJcIiE9dHlwZW9mIHRoaXMuX3ByaW1lQ29kZSYmKHRoaXMuX3ByaW1lQ29kZT1mdW5jdGlvbihlLHQpe3ZhciByPXQudG9TdHJpbmcoXCJoZXhcIiksbj1bcixlLnRvU3RyaW5nKDE2KV0uam9pbihcIl9cIik7aWYobiBpbiBiKXJldHVybiBiW25dO3ZhciBpLGg9MDtpZihlLmlzRXZlbigpfHwhZC5zaW1wbGVTaWV2ZXx8IWQuZmVybWF0VGVzdChlKXx8IW8udGVzdChlKSlyZXR1cm4gaCs9MSxoKz1cIjAyXCI9PT1yfHxcIjA1XCI9PT1yPzg6NCxiW25dPWgsaDtzd2l0Y2goby50ZXN0KGUuc2hybigxKSl8fChoKz0yKSxyKXtjYXNlXCIwMlwiOmUubW9kKHMpLmNtcChhKSYmKGgrPTgpO2JyZWFrO2Nhc2VcIjA1XCI6KGk9ZS5tb2QoYykpLmNtcChmKSYmaS5jbXAodSkmJihoKz04KTticmVhaztkZWZhdWx0OmgrPTR9cmV0dXJuIGJbbl09aCxofSh0aGlzLl9fcHJpbWUsdGhpcy5fX2dlbikpLHRoaXMuX3ByaW1lQ29kZX19KSx5LnByb3RvdHlwZS5nZW5lcmF0ZUtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJpdnx8KHRoaXMuX3ByaXY9bmV3IGkoaCh0aGlzLl9wcmltZUxlbikpKSx0aGlzLl9wdWI9dGhpcy5fZ2VuLnRvUmVkKHRoaXMuX3ByaW1lKS5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpLHRoaXMuZ2V0UHVibGljS2V5KCl9LHkucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9KGU9KGU9bmV3IGkoZSkpLnRvUmVkKHRoaXMuX3ByaW1lKSkucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKSxyPW5ldyBuKHQudG9BcnJheSgpKSxvPXRoaXMuZ2V0UHJpbWUoKTtpZihyLmxlbmd0aDxvLmxlbmd0aCl7dmFyIHM9bmV3IG4oby5sZW5ndGgtci5sZW5ndGgpO3MuZmlsbCgwKSxyPW4uY29uY2F0KFtzLHJdKX1yZXR1cm4gcn0seS5wcm90b3R5cGUuZ2V0UHVibGljS2V5PWZ1bmN0aW9uKGUpe3JldHVybiBnKHRoaXMuX3B1YixlKX0seS5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleT1mdW5jdGlvbihlKXtyZXR1cm4gZyh0aGlzLl9wcml2LGUpfSx5LnByb3RvdHlwZS5nZXRQcmltZT1mdW5jdGlvbihlKXtyZXR1cm4gZyh0aGlzLl9fcHJpbWUsZSl9LHkucHJvdG90eXBlLmdldEdlbmVyYXRvcj1mdW5jdGlvbihlKXtyZXR1cm4gZyh0aGlzLl9nZW4sZSl9LHkucHJvdG90eXBlLnNldEdlbmVyYXRvcj1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fFwidXRmOFwiLG4uaXNCdWZmZXIoZSl8fChlPW5ldyBuKGUsdCkpLHRoaXMuX19nZW49ZSx0aGlzLl9nZW49bmV3IGkoZSksdGhpc319LDM1OTA6KGUsdCxyKT0+e3ZhciBuPXIoMTc5OCk7ZS5leHBvcnRzPW0sbS5zaW1wbGVTaWV2ZT15LG0uZmVybWF0VGVzdD1nO3ZhciBpPXIoMzU1MCksbz1uZXcgaSgyNCkscz1uZXcocigzMDQ3KSksYT1uZXcgaSgxKSxjPW5ldyBpKDIpLGY9bmV3IGkoNSksdT0obmV3IGkoMTYpLG5ldyBpKDgpLG5ldyBpKDEwKSksZD1uZXcgaSgzKSxoPShuZXcgaSg3KSxuZXcgaSgxMSkpLGw9bmV3IGkoNCkscD0obmV3IGkoMTIpLG51bGwpO2Z1bmN0aW9uIGIoKXtpZihudWxsIT09cClyZXR1cm4gcDt2YXIgZT1bXTtlWzBdPTI7Zm9yKHZhciB0PTEscj0zO3I8MTA0ODU3NjtyKz0yKXtmb3IodmFyIG49TWF0aC5jZWlsKE1hdGguc3FydChyKSksaT0wO2k8dCYmZVtpXTw9biYmciVlW2ldIT0wO2krKyk7dCE9PWkmJmVbaV08PW58fChlW3QrK109cil9cmV0dXJuIHA9ZSxlfWZ1bmN0aW9uIHkoZSl7Zm9yKHZhciB0PWIoKSxyPTA7cjx0Lmxlbmd0aDtyKyspaWYoMD09PWUubW9kbih0W3JdKSlyZXR1cm4gMD09PWUuY21wbih0W3JdKTtyZXR1cm4hMH1mdW5jdGlvbiBnKGUpe3ZhciB0PWkubW9udChlKTtyZXR1cm4gMD09PWMudG9SZWQodCkucmVkUG93KGUuc3VibigxKSkuZnJvbVJlZCgpLmNtcG4oMSl9ZnVuY3Rpb24gbShlLHQpe2lmKGU8MTYpcmV0dXJuIG5ldyBpKDI9PT10fHw1PT09dD9bMTQwLDEyM106WzE0MCwzOV0pO3ZhciByLHA7Zm9yKHQ9bmV3IGkodCk7Oyl7Zm9yKHI9bmV3IGkobihNYXRoLmNlaWwoZS84KSkpO3IuYml0TGVuZ3RoKCk+ZTspci5pc2hybigxKTtpZihyLmlzRXZlbigpJiZyLmlhZGQoYSksci50ZXN0bigxKXx8ci5pYWRkKGMpLHQuY21wKGMpKXtpZighdC5jbXAoZikpZm9yKDtyLm1vZCh1KS5jbXAoZCk7KXIuaWFkZChsKX1lbHNlIGZvcig7ci5tb2QobykuY21wKGgpOylyLmlhZGQobCk7aWYoeShwPXIuc2hybigxKSkmJnkocikmJmcocCkmJmcocikmJnMudGVzdChwKSYmcy50ZXN0KHIpKXJldHVybiByfX19LDYyNjY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXQ7bi52ZXJzaW9uPXIoODU5NykuaTgsbi51dGlscz1yKDk1Myksbi5yYW5kPXIoOTkzMSksbi5jdXJ2ZT1yKDgyNTQpLG4uY3VydmVzPXIoNTQyNyksbi5lYz1yKDc5NTQpLG4uZWRkc2E9cig1OTgwKX0sNDkxODooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzNTUwKSxpPXIoOTUzKSxvPWkuZ2V0TkFGLHM9aS5nZXRKU0YsYT1pLmFzc2VydDtmdW5jdGlvbiBjKGUsdCl7dGhpcy50eXBlPWUsdGhpcy5wPW5ldyBuKHQucCwxNiksdGhpcy5yZWQ9dC5wcmltZT9uLnJlZCh0LnByaW1lKTpuLm1vbnQodGhpcy5wKSx0aGlzLnplcm89bmV3IG4oMCkudG9SZWQodGhpcy5yZWQpLHRoaXMub25lPW5ldyBuKDEpLnRvUmVkKHRoaXMucmVkKSx0aGlzLnR3bz1uZXcgbigyKS50b1JlZCh0aGlzLnJlZCksdGhpcy5uPXQubiYmbmV3IG4odC5uLDE2KSx0aGlzLmc9dC5nJiZ0aGlzLnBvaW50RnJvbUpTT04odC5nLHQuZ1JlZCksdGhpcy5fd25hZlQxPW5ldyBBcnJheSg0KSx0aGlzLl93bmFmVDI9bmV3IEFycmF5KDQpLHRoaXMuX3duYWZUMz1uZXcgQXJyYXkoNCksdGhpcy5fd25hZlQ0PW5ldyBBcnJheSg0KSx0aGlzLl9iaXRMZW5ndGg9dGhpcy5uP3RoaXMubi5iaXRMZW5ndGgoKTowO3ZhciByPXRoaXMubiYmdGhpcy5wLmRpdih0aGlzLm4pOyFyfHxyLmNtcG4oMTAwKT4wP3RoaXMucmVkTj1udWxsOih0aGlzLl9tYXh3ZWxsVHJpY2s9ITAsdGhpcy5yZWROPXRoaXMubi50b1JlZCh0aGlzLnJlZCkpfWZ1bmN0aW9uIGYoZSx0KXt0aGlzLmN1cnZlPWUsdGhpcy50eXBlPXQsdGhpcy5wcmVjb21wdXRlZD1udWxsfWUuZXhwb3J0cz1jLGMucHJvdG90eXBlLnBvaW50PWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpfSxjLnByb3RvdHlwZS52YWxpZGF0ZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKX0sYy5wcm90b3R5cGUuX2ZpeGVkTmFmTXVsPWZ1bmN0aW9uKGUsdCl7YShlLnByZWNvbXB1dGVkKTt2YXIgcj1lLl9nZXREb3VibGVzKCksbj1vKHQsMSx0aGlzLl9iaXRMZW5ndGgpLGk9KDE8PHIuc3RlcCsxKS0oci5zdGVwJTI9PTA/MjoxKTtpLz0zO3ZhciBzLGMsZj1bXTtmb3Iocz0wO3M8bi5sZW5ndGg7cys9ci5zdGVwKXtjPTA7Zm9yKHZhciB1PXMrci5zdGVwLTE7dT49czt1LS0pYz0oYzw8MSkrblt1XTtmLnB1c2goYyl9Zm9yKHZhciBkPXRoaXMuanBvaW50KG51bGwsbnVsbCxudWxsKSxoPXRoaXMuanBvaW50KG51bGwsbnVsbCxudWxsKSxsPWk7bD4wO2wtLSl7Zm9yKHM9MDtzPGYubGVuZ3RoO3MrKykoYz1mW3NdKT09PWw/aD1oLm1peGVkQWRkKHIucG9pbnRzW3NdKTpjPT09LWwmJihoPWgubWl4ZWRBZGQoci5wb2ludHNbc10ubmVnKCkpKTtkPWQuYWRkKGgpfXJldHVybiBkLnRvUCgpfSxjLnByb3RvdHlwZS5fd25hZk11bD1mdW5jdGlvbihlLHQpe3ZhciByPTQsbj1lLl9nZXROQUZQb2ludHMocik7cj1uLnduZDtmb3IodmFyIGk9bi5wb2ludHMscz1vKHQscix0aGlzLl9iaXRMZW5ndGgpLGM9dGhpcy5qcG9pbnQobnVsbCxudWxsLG51bGwpLGY9cy5sZW5ndGgtMTtmPj0wO2YtLSl7Zm9yKHZhciB1PTA7Zj49MCYmMD09PXNbZl07Zi0tKXUrKztpZihmPj0wJiZ1KyssYz1jLmRibHAodSksZjwwKWJyZWFrO3ZhciBkPXNbZl07YSgwIT09ZCksYz1cImFmZmluZVwiPT09ZS50eXBlP2Q+MD9jLm1peGVkQWRkKGlbZC0xPj4xXSk6Yy5taXhlZEFkZChpWy1kLTE+PjFdLm5lZygpKTpkPjA/Yy5hZGQoaVtkLTE+PjFdKTpjLmFkZChpWy1kLTE+PjFdLm5lZygpKX1yZXR1cm5cImFmZmluZVwiPT09ZS50eXBlP2MudG9QKCk6Y30sYy5wcm90b3R5cGUuX3duYWZNdWxBZGQ9ZnVuY3Rpb24oZSx0LHIsbixpKXt2YXIgYSxjLGYsdT10aGlzLl93bmFmVDEsZD10aGlzLl93bmFmVDIsaD10aGlzLl93bmFmVDMsbD0wO2ZvcihhPTA7YTxuO2ErKyl7dmFyIHA9KGY9dFthXSkuX2dldE5BRlBvaW50cyhlKTt1W2FdPXAud25kLGRbYV09cC5wb2ludHN9Zm9yKGE9bi0xO2E+PTE7YS09Mil7dmFyIGI9YS0xLHk9YTtpZigxPT09dVtiXSYmMT09PXVbeV0pe3ZhciBnPVt0W2JdLG51bGwsbnVsbCx0W3ldXTswPT09dFtiXS55LmNtcCh0W3ldLnkpPyhnWzFdPXRbYl0uYWRkKHRbeV0pLGdbMl09dFtiXS50b0ooKS5taXhlZEFkZCh0W3ldLm5lZygpKSk6MD09PXRbYl0ueS5jbXAodFt5XS55LnJlZE5lZygpKT8oZ1sxXT10W2JdLnRvSigpLm1peGVkQWRkKHRbeV0pLGdbMl09dFtiXS5hZGQodFt5XS5uZWcoKSkpOihnWzFdPXRbYl0udG9KKCkubWl4ZWRBZGQodFt5XSksZ1syXT10W2JdLnRvSigpLm1peGVkQWRkKHRbeV0ubmVnKCkpKTt2YXIgbT1bLTMsLTEsLTUsLTcsMCw3LDUsMSwzXSx2PXMocltiXSxyW3ldKTtmb3IobD1NYXRoLm1heCh2WzBdLmxlbmd0aCxsKSxoW2JdPW5ldyBBcnJheShsKSxoW3ldPW5ldyBBcnJheShsKSxjPTA7YzxsO2MrKyl7dmFyIHc9MHx2WzBdW2NdLF89MHx2WzFdW2NdO2hbYl1bY109bVszKih3KzEpKyhfKzEpXSxoW3ldW2NdPTAsZFtiXT1nfX1lbHNlIGhbYl09byhyW2JdLHVbYl0sdGhpcy5fYml0TGVuZ3RoKSxoW3ldPW8oclt5XSx1W3ldLHRoaXMuX2JpdExlbmd0aCksbD1NYXRoLm1heChoW2JdLmxlbmd0aCxsKSxsPU1hdGgubWF4KGhbeV0ubGVuZ3RoLGwpfXZhciBTPXRoaXMuanBvaW50KG51bGwsbnVsbCxudWxsKSxFPXRoaXMuX3duYWZUNDtmb3IoYT1sO2E+PTA7YS0tKXtmb3IodmFyIEE9MDthPj0wOyl7dmFyIHg9ITA7Zm9yKGM9MDtjPG47YysrKUVbY109MHxoW2NdW2FdLDAhPT1FW2NdJiYoeD0hMSk7aWYoIXgpYnJlYWs7QSsrLGEtLX1pZihhPj0wJiZBKyssUz1TLmRibHAoQSksYTwwKWJyZWFrO2ZvcihjPTA7YzxuO2MrKyl7dmFyIGs9RVtjXTswIT09ayYmKGs+MD9mPWRbY11bay0xPj4xXTprPDAmJihmPWRbY11bLWstMT4+MV0ubmVnKCkpLFM9XCJhZmZpbmVcIj09PWYudHlwZT9TLm1peGVkQWRkKGYpOlMuYWRkKGYpKX19Zm9yKGE9MDthPG47YSsrKWRbYV09bnVsbDtyZXR1cm4gaT9TOlMudG9QKCl9LGMuQmFzZVBvaW50PWYsZi5wcm90b3R5cGUuZXE9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIil9LGYucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyl9LGMucHJvdG90eXBlLmRlY29kZVBvaW50PWZ1bmN0aW9uKGUsdCl7ZT1pLnRvQXJyYXkoZSx0KTt2YXIgcj10aGlzLnAuYnl0ZUxlbmd0aCgpO2lmKCg0PT09ZVswXXx8Nj09PWVbMF18fDc9PT1lWzBdKSYmZS5sZW5ndGgtMT09MipyKXJldHVybiA2PT09ZVswXT9hKGVbZS5sZW5ndGgtMV0lMj09MCk6Nz09PWVbMF0mJmEoZVtlLmxlbmd0aC0xXSUyPT0xKSx0aGlzLnBvaW50KGUuc2xpY2UoMSwxK3IpLGUuc2xpY2UoMStyLDErMipyKSk7aWYoKDI9PT1lWzBdfHwzPT09ZVswXSkmJmUubGVuZ3RoLTE9PT1yKXJldHVybiB0aGlzLnBvaW50RnJvbVgoZS5zbGljZSgxLDErciksMz09PWVbMF0pO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gcG9pbnQgZm9ybWF0XCIpfSxmLnByb3RvdHlwZS5lbmNvZGVDb21wcmVzc2VkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVuY29kZShlLCEwKX0sZi5wcm90b3R5cGUuX2VuY29kZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpLHI9dGhpcy5nZXRYKCkudG9BcnJheShcImJlXCIsdCk7cmV0dXJuIGU/W3RoaXMuZ2V0WSgpLmlzRXZlbigpPzI6M10uY29uY2F0KHIpOls0XS5jb25jYXQocix0aGlzLmdldFkoKS50b0FycmF5KFwiYmVcIix0KSl9LGYucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiBpLmVuY29kZSh0aGlzLl9lbmNvZGUodCksZSl9LGYucHJvdG90eXBlLnByZWNvbXB1dGU9ZnVuY3Rpb24oZSl7aWYodGhpcy5wcmVjb21wdXRlZClyZXR1cm4gdGhpczt2YXIgdD17ZG91YmxlczpudWxsLG5hZjpudWxsLGJldGE6bnVsbH07cmV0dXJuIHQubmFmPXRoaXMuX2dldE5BRlBvaW50cyg4KSx0LmRvdWJsZXM9dGhpcy5fZ2V0RG91Ymxlcyg0LGUpLHQuYmV0YT10aGlzLl9nZXRCZXRhKCksdGhpcy5wcmVjb21wdXRlZD10LHRoaXN9LGYucHJvdG90eXBlLl9oYXNEb3VibGVzPWZ1bmN0aW9uKGUpe2lmKCF0aGlzLnByZWNvbXB1dGVkKXJldHVybiExO3ZhciB0PXRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztyZXR1cm4hIXQmJnQucG9pbnRzLmxlbmd0aD49TWF0aC5jZWlsKChlLmJpdExlbmd0aCgpKzEpL3Quc3RlcCl9LGYucHJvdG90eXBlLl9nZXREb3VibGVzPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5wcmVjb21wdXRlZCYmdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzKXJldHVybiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7Zm9yKHZhciByPVt0aGlzXSxuPXRoaXMsaT0wO2k8dDtpKz1lKXtmb3IodmFyIG89MDtvPGU7bysrKW49bi5kYmwoKTtyLnB1c2gobil9cmV0dXJue3N0ZXA6ZSxwb2ludHM6cn19LGYucHJvdG90eXBlLl9nZXROQUZQb2ludHM9ZnVuY3Rpb24oZSl7aWYodGhpcy5wcmVjb21wdXRlZCYmdGhpcy5wcmVjb21wdXRlZC5uYWYpcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQubmFmO2Zvcih2YXIgdD1bdGhpc10scj0oMTw8ZSktMSxuPTE9PT1yP251bGw6dGhpcy5kYmwoKSxpPTE7aTxyO2krKyl0W2ldPXRbaS0xXS5hZGQobik7cmV0dXJue3duZDplLHBvaW50czp0fX0sZi5wcm90b3R5cGUuX2dldEJldGE9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZi5wcm90b3R5cGUuZGJscD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcyxyPTA7cjxlO3IrKyl0PXQuZGJsKCk7cmV0dXJuIHR9fSwxMTM4OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDk1MyksaT1yKDM1NTApLG89cig1NzE3KSxzPXIoNDkxOCksYT1uLmFzc2VydDtmdW5jdGlvbiBjKGUpe3RoaXMudHdpc3RlZD0xIT0oMHxlLmEpLHRoaXMubU9uZUE9dGhpcy50d2lzdGVkJiYtMT09KDB8ZS5hKSx0aGlzLmV4dGVuZGVkPXRoaXMubU9uZUEscy5jYWxsKHRoaXMsXCJlZHdhcmRzXCIsZSksdGhpcy5hPW5ldyBpKGUuYSwxNikudW1vZCh0aGlzLnJlZC5tKSx0aGlzLmE9dGhpcy5hLnRvUmVkKHRoaXMucmVkKSx0aGlzLmM9bmV3IGkoZS5jLDE2KS50b1JlZCh0aGlzLnJlZCksdGhpcy5jMj10aGlzLmMucmVkU3FyKCksdGhpcy5kPW5ldyBpKGUuZCwxNikudG9SZWQodGhpcy5yZWQpLHRoaXMuZGQ9dGhpcy5kLnJlZEFkZCh0aGlzLmQpLGEoIXRoaXMudHdpc3RlZHx8MD09PXRoaXMuYy5mcm9tUmVkKCkuY21wbigxKSksdGhpcy5vbmVDPTE9PSgwfGUuYyl9ZnVuY3Rpb24gZihlLHQscixuLG8pe3MuQmFzZVBvaW50LmNhbGwodGhpcyxlLFwicHJvamVjdGl2ZVwiKSxudWxsPT09dCYmbnVsbD09PXImJm51bGw9PT1uPyh0aGlzLng9dGhpcy5jdXJ2ZS56ZXJvLHRoaXMueT10aGlzLmN1cnZlLm9uZSx0aGlzLno9dGhpcy5jdXJ2ZS5vbmUsdGhpcy50PXRoaXMuY3VydmUuemVybyx0aGlzLnpPbmU9ITApOih0aGlzLng9bmV3IGkodCwxNiksdGhpcy55PW5ldyBpKHIsMTYpLHRoaXMuej1uP25ldyBpKG4sMTYpOnRoaXMuY3VydmUub25lLHRoaXMudD1vJiZuZXcgaShvLDE2KSx0aGlzLngucmVkfHwodGhpcy54PXRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCkpLHRoaXMueS5yZWR8fCh0aGlzLnk9dGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKSksdGhpcy56LnJlZHx8KHRoaXMuej10aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpKSx0aGlzLnQmJiF0aGlzLnQucmVkJiYodGhpcy50PXRoaXMudC50b1JlZCh0aGlzLmN1cnZlLnJlZCkpLHRoaXMuek9uZT10aGlzLno9PT10aGlzLmN1cnZlLm9uZSx0aGlzLmN1cnZlLmV4dGVuZGVkJiYhdGhpcy50JiYodGhpcy50PXRoaXMueC5yZWRNdWwodGhpcy55KSx0aGlzLnpPbmV8fCh0aGlzLnQ9dGhpcy50LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKSkpKX1vKGMscyksZS5leHBvcnRzPWMsYy5wcm90b3R5cGUuX211bEE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMubU9uZUE/ZS5yZWROZWcoKTp0aGlzLmEucmVkTXVsKGUpfSxjLnByb3RvdHlwZS5fbXVsQz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5vbmVDP2U6dGhpcy5jLnJlZE11bChlKX0sYy5wcm90b3R5cGUuanBvaW50PWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiB0aGlzLnBvaW50KGUsdCxyLG4pfSxjLnByb3RvdHlwZS5wb2ludEZyb21YPWZ1bmN0aW9uKGUsdCl7KGU9bmV3IGkoZSwxNikpLnJlZHx8KGU9ZS50b1JlZCh0aGlzLnJlZCkpO3ZhciByPWUucmVkU3FyKCksbj10aGlzLmMyLnJlZFN1Yih0aGlzLmEucmVkTXVsKHIpKSxvPXRoaXMub25lLnJlZFN1Yih0aGlzLmMyLnJlZE11bCh0aGlzLmQpLnJlZE11bChyKSkscz1uLnJlZE11bChvLnJlZEludm0oKSksYT1zLnJlZFNxcnQoKTtpZigwIT09YS5yZWRTcXIoKS5yZWRTdWIocykuY21wKHRoaXMuemVybykpdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwb2ludFwiKTt2YXIgYz1hLmZyb21SZWQoKS5pc09kZCgpO3JldHVybih0JiYhY3x8IXQmJmMpJiYoYT1hLnJlZE5lZygpKSx0aGlzLnBvaW50KGUsYSl9LGMucHJvdG90eXBlLnBvaW50RnJvbVk9ZnVuY3Rpb24oZSx0KXsoZT1uZXcgaShlLDE2KSkucmVkfHwoZT1lLnRvUmVkKHRoaXMucmVkKSk7dmFyIHI9ZS5yZWRTcXIoKSxuPXIucmVkU3ViKHRoaXMuYzIpLG89ci5yZWRNdWwodGhpcy5kKS5yZWRNdWwodGhpcy5jMikucmVkU3ViKHRoaXMuYSkscz1uLnJlZE11bChvLnJlZEludm0oKSk7aWYoMD09PXMuY21wKHRoaXMuemVybykpe2lmKHQpdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwb2ludFwiKTtyZXR1cm4gdGhpcy5wb2ludCh0aGlzLnplcm8sZSl9dmFyIGE9cy5yZWRTcXJ0KCk7aWYoMCE9PWEucmVkU3FyKCkucmVkU3ViKHMpLmNtcCh0aGlzLnplcm8pKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgcG9pbnRcIik7cmV0dXJuIGEuZnJvbVJlZCgpLmlzT2RkKCkhPT10JiYoYT1hLnJlZE5lZygpKSx0aGlzLnBvaW50KGEsZSl9LGMucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uKGUpe2lmKGUuaXNJbmZpbml0eSgpKXJldHVybiEwO2Uubm9ybWFsaXplKCk7dmFyIHQ9ZS54LnJlZFNxcigpLHI9ZS55LnJlZFNxcigpLG49dC5yZWRNdWwodGhpcy5hKS5yZWRBZGQociksaT10aGlzLmMyLnJlZE11bCh0aGlzLm9uZS5yZWRBZGQodGhpcy5kLnJlZE11bCh0KS5yZWRNdWwocikpKTtyZXR1cm4gMD09PW4uY21wKGkpfSxvKGYscy5CYXNlUG9pbnQpLGMucHJvdG90eXBlLnBvaW50RnJvbUpTT049ZnVuY3Rpb24oZSl7cmV0dXJuIGYuZnJvbUpTT04odGhpcyxlKX0sYy5wcm90b3R5cGUucG9pbnQ9ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIG5ldyBmKHRoaXMsZSx0LHIsbil9LGYuZnJvbUpTT049ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IGYoZSx0WzBdLHRbMV0sdFsyXSl9LGYucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0luZmluaXR5KCk/XCI8RUMgUG9pbnQgSW5maW5pdHk+XCI6XCI8RUMgUG9pbnQgeDogXCIrdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwyKStcIiB5OiBcIit0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LDIpK1wiIHo6IFwiK3RoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsMikrXCI+XCJ9LGYucHJvdG90eXBlLmlzSW5maW5pdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMueC5jbXBuKDApJiYoMD09PXRoaXMueS5jbXAodGhpcy56KXx8dGhpcy56T25lJiYwPT09dGhpcy55LmNtcCh0aGlzLmN1cnZlLmMpKX0sZi5wcm90b3R5cGUuX2V4dERibD1mdW5jdGlvbigpe3ZhciBlPXRoaXMueC5yZWRTcXIoKSx0PXRoaXMueS5yZWRTcXIoKSxyPXRoaXMuei5yZWRTcXIoKTtyPXIucmVkSUFkZChyKTt2YXIgbj10aGlzLmN1cnZlLl9tdWxBKGUpLGk9dGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpLnJlZElTdWIoZSkucmVkSVN1Yih0KSxvPW4ucmVkQWRkKHQpLHM9by5yZWRTdWIociksYT1uLnJlZFN1Yih0KSxjPWkucmVkTXVsKHMpLGY9by5yZWRNdWwoYSksdT1pLnJlZE11bChhKSxkPXMucmVkTXVsKG8pO3JldHVybiB0aGlzLmN1cnZlLnBvaW50KGMsZixkLHUpfSxmLnByb3RvdHlwZS5fcHJvakRibD1mdW5jdGlvbigpe3ZhciBlLHQscixuLGksbyxzPXRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKSxhPXRoaXMueC5yZWRTcXIoKSxjPXRoaXMueS5yZWRTcXIoKTtpZih0aGlzLmN1cnZlLnR3aXN0ZWQpe3ZhciBmPShuPXRoaXMuY3VydmUuX211bEEoYSkpLnJlZEFkZChjKTt0aGlzLnpPbmU/KGU9cy5yZWRTdWIoYSkucmVkU3ViKGMpLnJlZE11bChmLnJlZFN1Yih0aGlzLmN1cnZlLnR3bykpLHQ9Zi5yZWRNdWwobi5yZWRTdWIoYykpLHI9Zi5yZWRTcXIoKS5yZWRTdWIoZikucmVkU3ViKGYpKTooaT10aGlzLnoucmVkU3FyKCksbz1mLnJlZFN1YihpKS5yZWRJU3ViKGkpLGU9cy5yZWRTdWIoYSkucmVkSVN1YihjKS5yZWRNdWwobyksdD1mLnJlZE11bChuLnJlZFN1YihjKSkscj1mLnJlZE11bChvKSl9ZWxzZSBuPWEucmVkQWRkKGMpLGk9dGhpcy5jdXJ2ZS5fbXVsQyh0aGlzLnopLnJlZFNxcigpLG89bi5yZWRTdWIoaSkucmVkU3ViKGkpLGU9dGhpcy5jdXJ2ZS5fbXVsQyhzLnJlZElTdWIobikpLnJlZE11bChvKSx0PXRoaXMuY3VydmUuX211bEMobikucmVkTXVsKGEucmVkSVN1YihjKSkscj1uLnJlZE11bChvKTtyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChlLHQscil9LGYucHJvdG90eXBlLmRibD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzSW5maW5pdHkoKT90aGlzOnRoaXMuY3VydmUuZXh0ZW5kZWQ/dGhpcy5fZXh0RGJsKCk6dGhpcy5fcHJvakRibCgpfSxmLnByb3RvdHlwZS5fZXh0QWRkPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMueS5yZWRTdWIodGhpcy54KS5yZWRNdWwoZS55LnJlZFN1YihlLngpKSxyPXRoaXMueS5yZWRBZGQodGhpcy54KS5yZWRNdWwoZS55LnJlZEFkZChlLngpKSxuPXRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKGUudCksaT10aGlzLnoucmVkTXVsKGUuei5yZWRBZGQoZS56KSksbz1yLnJlZFN1Yih0KSxzPWkucmVkU3ViKG4pLGE9aS5yZWRBZGQobiksYz1yLnJlZEFkZCh0KSxmPW8ucmVkTXVsKHMpLHU9YS5yZWRNdWwoYyksZD1vLnJlZE11bChjKSxoPXMucmVkTXVsKGEpO3JldHVybiB0aGlzLmN1cnZlLnBvaW50KGYsdSxoLGQpfSxmLnByb3RvdHlwZS5fcHJvakFkZD1mdW5jdGlvbihlKXt2YXIgdCxyLG49dGhpcy56LnJlZE11bChlLnopLGk9bi5yZWRTcXIoKSxvPXRoaXMueC5yZWRNdWwoZS54KSxzPXRoaXMueS5yZWRNdWwoZS55KSxhPXRoaXMuY3VydmUuZC5yZWRNdWwobykucmVkTXVsKHMpLGM9aS5yZWRTdWIoYSksZj1pLnJlZEFkZChhKSx1PXRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwoZS54LnJlZEFkZChlLnkpKS5yZWRJU3ViKG8pLnJlZElTdWIocyksZD1uLnJlZE11bChjKS5yZWRNdWwodSk7cmV0dXJuIHRoaXMuY3VydmUudHdpc3RlZD8odD1uLnJlZE11bChmKS5yZWRNdWwocy5yZWRTdWIodGhpcy5jdXJ2ZS5fbXVsQShvKSkpLHI9Yy5yZWRNdWwoZikpOih0PW4ucmVkTXVsKGYpLnJlZE11bChzLnJlZFN1YihvKSkscj10aGlzLmN1cnZlLl9tdWxDKGMpLnJlZE11bChmKSksdGhpcy5jdXJ2ZS5wb2ludChkLHQscil9LGYucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pc0luZmluaXR5KCk/ZTplLmlzSW5maW5pdHkoKT90aGlzOnRoaXMuY3VydmUuZXh0ZW5kZWQ/dGhpcy5fZXh0QWRkKGUpOnRoaXMuX3Byb2pBZGQoZSl9LGYucHJvdG90eXBlLm11bD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faGFzRG91YmxlcyhlKT90aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLGUpOnRoaXMuY3VydmUuX3duYWZNdWwodGhpcyxlKX0sZi5wcm90b3R5cGUubXVsQWRkPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLFt0aGlzLHRdLFtlLHJdLDIsITEpfSxmLnByb3RvdHlwZS5qbXVsQWRkPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLFt0aGlzLHRdLFtlLHJdLDIsITApfSxmLnByb3RvdHlwZS5ub3JtYWxpemU9ZnVuY3Rpb24oKXtpZih0aGlzLnpPbmUpcmV0dXJuIHRoaXM7dmFyIGU9dGhpcy56LnJlZEludm0oKTtyZXR1cm4gdGhpcy54PXRoaXMueC5yZWRNdWwoZSksdGhpcy55PXRoaXMueS5yZWRNdWwoZSksdGhpcy50JiYodGhpcy50PXRoaXMudC5yZWRNdWwoZSkpLHRoaXMuej10aGlzLmN1cnZlLm9uZSx0aGlzLnpPbmU9ITAsdGhpc30sZi5wcm90b3R5cGUubmVnPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE5lZygpLHRoaXMueSx0aGlzLnosdGhpcy50JiZ0aGlzLnQucmVkTmVnKCkpfSxmLnByb3RvdHlwZS5nZXRYPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9ybWFsaXplKCksdGhpcy54LmZyb21SZWQoKX0sZi5wcm90b3R5cGUuZ2V0WT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5vcm1hbGl6ZSgpLHRoaXMueS5mcm9tUmVkKCl9LGYucHJvdG90eXBlLmVxPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzPT09ZXx8MD09PXRoaXMuZ2V0WCgpLmNtcChlLmdldFgoKSkmJjA9PT10aGlzLmdldFkoKS5jbXAoZS5nZXRZKCkpfSxmLnByb3RvdHlwZS5lcVhUb1A9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHRoaXMueik7aWYoMD09PXRoaXMueC5jbXAodCkpcmV0dXJuITA7Zm9yKHZhciByPWUuY2xvbmUoKSxuPXRoaXMuY3VydmUucmVkTi5yZWRNdWwodGhpcy56KTs7KXtpZihyLmlhZGQodGhpcy5jdXJ2ZS5uKSxyLmNtcCh0aGlzLmN1cnZlLnApPj0wKXJldHVybiExO2lmKHQucmVkSUFkZChuKSwwPT09dGhpcy54LmNtcCh0KSlyZXR1cm4hMH19LGYucHJvdG90eXBlLnRvUD1mLnByb3RvdHlwZS5ub3JtYWxpemUsZi5wcm90b3R5cGUubWl4ZWRBZGQ9Zi5wcm90b3R5cGUuYWRkfSw4MjU0OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj10O24uYmFzZT1yKDQ5MTgpLG4uc2hvcnQ9cig2NjczKSxuLm1vbnQ9cigyODgxKSxuLmVkd2FyZHM9cigxMTM4KX0sMjg4MTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzNTUwKSxpPXIoNTcxNyksbz1yKDQ5MTgpLHM9cig5NTMpO2Z1bmN0aW9uIGEoZSl7by5jYWxsKHRoaXMsXCJtb250XCIsZSksdGhpcy5hPW5ldyBuKGUuYSwxNikudG9SZWQodGhpcy5yZWQpLHRoaXMuYj1uZXcgbihlLmIsMTYpLnRvUmVkKHRoaXMucmVkKSx0aGlzLmk0PW5ldyBuKDQpLnRvUmVkKHRoaXMucmVkKS5yZWRJbnZtKCksdGhpcy50d289bmV3IG4oMikudG9SZWQodGhpcy5yZWQpLHRoaXMuYTI0PXRoaXMuaTQucmVkTXVsKHRoaXMuYS5yZWRBZGQodGhpcy50d28pKX1mdW5jdGlvbiBjKGUsdCxyKXtvLkJhc2VQb2ludC5jYWxsKHRoaXMsZSxcInByb2plY3RpdmVcIiksbnVsbD09PXQmJm51bGw9PT1yPyh0aGlzLng9dGhpcy5jdXJ2ZS5vbmUsdGhpcy56PXRoaXMuY3VydmUuemVybyk6KHRoaXMueD1uZXcgbih0LDE2KSx0aGlzLno9bmV3IG4ociwxNiksdGhpcy54LnJlZHx8KHRoaXMueD10aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpKSx0aGlzLnoucmVkfHwodGhpcy56PXRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCkpKX1pKGEsbyksZS5leHBvcnRzPWEsYS5wcm90b3R5cGUudmFsaWRhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub3JtYWxpemUoKS54LHI9dC5yZWRTcXIoKSxuPXIucmVkTXVsKHQpLnJlZEFkZChyLnJlZE11bCh0aGlzLmEpKS5yZWRBZGQodCk7cmV0dXJuIDA9PT1uLnJlZFNxcnQoKS5yZWRTcXIoKS5jbXAobil9LGkoYyxvLkJhc2VQb2ludCksYS5wcm90b3R5cGUuZGVjb2RlUG9pbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5wb2ludChzLnRvQXJyYXkoZSx0KSwxKX0sYS5wcm90b3R5cGUucG9pbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IGModGhpcyxlLHQpfSxhLnByb3RvdHlwZS5wb2ludEZyb21KU09OPWZ1bmN0aW9uKGUpe3JldHVybiBjLmZyb21KU09OKHRoaXMsZSl9LGMucHJvdG90eXBlLnByZWNvbXB1dGU9ZnVuY3Rpb24oKXt9LGMucHJvdG90eXBlLl9lbmNvZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRYKCkudG9BcnJheShcImJlXCIsdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKSl9LGMuZnJvbUpTT049ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IGMoZSx0WzBdLHRbMV18fGUub25lKX0sYy5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzSW5maW5pdHkoKT9cIjxFQyBQb2ludCBJbmZpbml0eT5cIjpcIjxFQyBQb2ludCB4OiBcIit0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LDIpK1wiIHo6IFwiK3RoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsMikrXCI+XCJ9LGMucHJvdG90eXBlLmlzSW5maW5pdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuei5jbXBuKDApfSxjLnByb3RvdHlwZS5kYmw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLngucmVkQWRkKHRoaXMueikucmVkU3FyKCksdD10aGlzLngucmVkU3ViKHRoaXMueikucmVkU3FyKCkscj1lLnJlZFN1Yih0KSxuPWUucmVkTXVsKHQpLGk9ci5yZWRNdWwodC5yZWRBZGQodGhpcy5jdXJ2ZS5hMjQucmVkTXVsKHIpKSk7cmV0dXJuIHRoaXMuY3VydmUucG9pbnQobixpKX0sYy5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlXCIpfSxjLnByb3RvdHlwZS5kaWZmQWRkPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy54LnJlZEFkZCh0aGlzLnopLG49dGhpcy54LnJlZFN1Yih0aGlzLnopLGk9ZS54LnJlZEFkZChlLnopLG89ZS54LnJlZFN1YihlLnopLnJlZE11bChyKSxzPWkucmVkTXVsKG4pLGE9dC56LnJlZE11bChvLnJlZEFkZChzKS5yZWRTcXIoKSksYz10LngucmVkTXVsKG8ucmVkSVN1YihzKS5yZWRTcXIoKSk7cmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYSxjKX0sYy5wcm90b3R5cGUubXVsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmNsb25lKCkscj10aGlzLG49dGhpcy5jdXJ2ZS5wb2ludChudWxsLG51bGwpLGk9W107MCE9PXQuY21wbigwKTt0Lml1c2hybigxKSlpLnB1c2godC5hbmRsbigxKSk7Zm9yKHZhciBvPWkubGVuZ3RoLTE7bz49MDtvLS0pMD09PWlbb10/KHI9ci5kaWZmQWRkKG4sdGhpcyksbj1uLmRibCgpKToobj1yLmRpZmZBZGQobix0aGlzKSxyPXIuZGJsKCkpO3JldHVybiBufSxjLnByb3RvdHlwZS5tdWxBZGQ9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmVcIil9LGMucHJvdG90eXBlLmp1bWxBZGQ9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmVcIil9LGMucHJvdG90eXBlLmVxPWZ1bmN0aW9uKGUpe3JldHVybiAwPT09dGhpcy5nZXRYKCkuY21wKGUuZ2V0WCgpKX0sYy5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueD10aGlzLngucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpLHRoaXMuej10aGlzLmN1cnZlLm9uZSx0aGlzfSxjLnByb3RvdHlwZS5nZXRYPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9ybWFsaXplKCksdGhpcy54LmZyb21SZWQoKX19LDY2NzM6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoOTUzKSxpPXIoMzU1MCksbz1yKDU3MTcpLHM9cig0OTE4KSxhPW4uYXNzZXJ0O2Z1bmN0aW9uIGMoZSl7cy5jYWxsKHRoaXMsXCJzaG9ydFwiLGUpLHRoaXMuYT1uZXcgaShlLmEsMTYpLnRvUmVkKHRoaXMucmVkKSx0aGlzLmI9bmV3IGkoZS5iLDE2KS50b1JlZCh0aGlzLnJlZCksdGhpcy50aW52PXRoaXMudHdvLnJlZEludm0oKSx0aGlzLnplcm9BPTA9PT10aGlzLmEuZnJvbVJlZCgpLmNtcG4oMCksdGhpcy50aHJlZUE9MD09PXRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMyksdGhpcy5lbmRvPXRoaXMuX2dldEVuZG9tb3JwaGlzbShlKSx0aGlzLl9lbmRvV25hZlQxPW5ldyBBcnJheSg0KSx0aGlzLl9lbmRvV25hZlQyPW5ldyBBcnJheSg0KX1mdW5jdGlvbiBmKGUsdCxyLG4pe3MuQmFzZVBvaW50LmNhbGwodGhpcyxlLFwiYWZmaW5lXCIpLG51bGw9PT10JiZudWxsPT09cj8odGhpcy54PW51bGwsdGhpcy55PW51bGwsdGhpcy5pbmY9ITApOih0aGlzLng9bmV3IGkodCwxNiksdGhpcy55PW5ldyBpKHIsMTYpLG4mJih0aGlzLnguZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpLHRoaXMueS5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCkpLHRoaXMueC5yZWR8fCh0aGlzLng9dGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKSksdGhpcy55LnJlZHx8KHRoaXMueT10aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpKSx0aGlzLmluZj0hMSl9ZnVuY3Rpb24gdShlLHQscixuKXtzLkJhc2VQb2ludC5jYWxsKHRoaXMsZSxcImphY29iaWFuXCIpLG51bGw9PT10JiZudWxsPT09ciYmbnVsbD09PW4/KHRoaXMueD10aGlzLmN1cnZlLm9uZSx0aGlzLnk9dGhpcy5jdXJ2ZS5vbmUsdGhpcy56PW5ldyBpKDApKToodGhpcy54PW5ldyBpKHQsMTYpLHRoaXMueT1uZXcgaShyLDE2KSx0aGlzLno9bmV3IGkobiwxNikpLHRoaXMueC5yZWR8fCh0aGlzLng9dGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKSksdGhpcy55LnJlZHx8KHRoaXMueT10aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpKSx0aGlzLnoucmVkfHwodGhpcy56PXRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCkpLHRoaXMuek9uZT10aGlzLno9PT10aGlzLmN1cnZlLm9uZX1vKGMscyksZS5leHBvcnRzPWMsYy5wcm90b3R5cGUuX2dldEVuZG9tb3JwaGlzbT1mdW5jdGlvbihlKXtpZih0aGlzLnplcm9BJiZ0aGlzLmcmJnRoaXMubiYmMT09PXRoaXMucC5tb2RuKDMpKXt2YXIgdCxyO2lmKGUuYmV0YSl0PW5ldyBpKGUuYmV0YSwxNikudG9SZWQodGhpcy5yZWQpO2Vsc2V7dmFyIG49dGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMucCk7dD0odD1uWzBdLmNtcChuWzFdKTwwP25bMF06blsxXSkudG9SZWQodGhpcy5yZWQpfWlmKGUubGFtYmRhKXI9bmV3IGkoZS5sYW1iZGEsMTYpO2Vsc2V7dmFyIG89dGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMubik7MD09PXRoaXMuZy5tdWwob1swXSkueC5jbXAodGhpcy5nLngucmVkTXVsKHQpKT9yPW9bMF06KHI9b1sxXSxhKDA9PT10aGlzLmcubXVsKHIpLnguY21wKHRoaXMuZy54LnJlZE11bCh0KSkpKX1yZXR1cm57YmV0YTp0LGxhbWJkYTpyLGJhc2lzOmUuYmFzaXM/ZS5iYXNpcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybnthOm5ldyBpKGUuYSwxNiksYjpuZXcgaShlLmIsMTYpfX0pKTp0aGlzLl9nZXRFbmRvQmFzaXMocil9fX0sYy5wcm90b3R5cGUuX2dldEVuZG9Sb290cz1mdW5jdGlvbihlKXt2YXIgdD1lPT09dGhpcy5wP3RoaXMucmVkOmkubW9udChlKSxyPW5ldyBpKDIpLnRvUmVkKHQpLnJlZEludm0oKSxuPXIucmVkTmVnKCksbz1uZXcgaSgzKS50b1JlZCh0KS5yZWROZWcoKS5yZWRTcXJ0KCkucmVkTXVsKHIpO3JldHVybltuLnJlZEFkZChvKS5mcm9tUmVkKCksbi5yZWRTdWIobykuZnJvbVJlZCgpXX0sYy5wcm90b3R5cGUuX2dldEVuZG9CYXNpcz1mdW5jdGlvbihlKXtmb3IodmFyIHQscixuLG8scyxhLGMsZix1LGQ9dGhpcy5uLnVzaHJuKE1hdGguZmxvb3IodGhpcy5uLmJpdExlbmd0aCgpLzIpKSxoPWUsbD10aGlzLm4uY2xvbmUoKSxwPW5ldyBpKDEpLGI9bmV3IGkoMCkseT1uZXcgaSgwKSxnPW5ldyBpKDEpLG09MDswIT09aC5jbXBuKDApOyl7dmFyIHY9bC5kaXYoaCk7Zj1sLnN1Yih2Lm11bChoKSksdT15LnN1Yih2Lm11bChwKSk7dmFyIHc9Zy5zdWIodi5tdWwoYikpO2lmKCFuJiZmLmNtcChkKTwwKXQ9Yy5uZWcoKSxyPXAsbj1mLm5lZygpLG89dTtlbHNlIGlmKG4mJjI9PSsrbSlicmVhaztjPWYsbD1oLGg9Zix5PXAscD11LGc9YixiPXd9cz1mLm5lZygpLGE9dTt2YXIgXz1uLnNxcigpLmFkZChvLnNxcigpKTtyZXR1cm4gcy5zcXIoKS5hZGQoYS5zcXIoKSkuY21wKF8pPj0wJiYocz10LGE9ciksbi5uZWdhdGl2ZSYmKG49bi5uZWcoKSxvPW8ubmVnKCkpLHMubmVnYXRpdmUmJihzPXMubmVnKCksYT1hLm5lZygpKSxbe2E6bixiOm99LHthOnMsYjphfV19LGMucHJvdG90eXBlLl9lbmRvU3BsaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5lbmRvLmJhc2lzLHI9dFswXSxuPXRbMV0saT1uLmIubXVsKGUpLmRpdlJvdW5kKHRoaXMubiksbz1yLmIubmVnKCkubXVsKGUpLmRpdlJvdW5kKHRoaXMubikscz1pLm11bChyLmEpLGE9by5tdWwobi5hKSxjPWkubXVsKHIuYiksZj1vLm11bChuLmIpO3JldHVybntrMTplLnN1YihzKS5zdWIoYSksazI6Yy5hZGQoZikubmVnKCl9fSxjLnByb3RvdHlwZS5wb2ludEZyb21YPWZ1bmN0aW9uKGUsdCl7KGU9bmV3IGkoZSwxNikpLnJlZHx8KGU9ZS50b1JlZCh0aGlzLnJlZCkpO3ZhciByPWUucmVkU3FyKCkucmVkTXVsKGUpLnJlZElBZGQoZS5yZWRNdWwodGhpcy5hKSkucmVkSUFkZCh0aGlzLmIpLG49ci5yZWRTcXJ0KCk7aWYoMCE9PW4ucmVkU3FyKCkucmVkU3ViKHIpLmNtcCh0aGlzLnplcm8pKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgcG9pbnRcIik7dmFyIG89bi5mcm9tUmVkKCkuaXNPZGQoKTtyZXR1cm4odCYmIW98fCF0JiZvKSYmKG49bi5yZWROZWcoKSksdGhpcy5wb2ludChlLG4pfSxjLnByb3RvdHlwZS52YWxpZGF0ZT1mdW5jdGlvbihlKXtpZihlLmluZilyZXR1cm4hMDt2YXIgdD1lLngscj1lLnksbj10aGlzLmEucmVkTXVsKHQpLGk9dC5yZWRTcXIoKS5yZWRNdWwodCkucmVkSUFkZChuKS5yZWRJQWRkKHRoaXMuYik7cmV0dXJuIDA9PT1yLnJlZFNxcigpLnJlZElTdWIoaSkuY21wbigwKX0sYy5wcm90b3R5cGUuX2VuZG9XbmFmTXVsQWRkPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49dGhpcy5fZW5kb1duYWZUMSxpPXRoaXMuX2VuZG9XbmFmVDIsbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcz10aGlzLl9lbmRvU3BsaXQodFtvXSksYT1lW29dLGM9YS5fZ2V0QmV0YSgpO3MuazEubmVnYXRpdmUmJihzLmsxLmluZWcoKSxhPWEubmVnKCEwKSkscy5rMi5uZWdhdGl2ZSYmKHMuazIuaW5lZygpLGM9Yy5uZWcoITApKSxuWzIqb109YSxuWzIqbysxXT1jLGlbMipvXT1zLmsxLGlbMipvKzFdPXMuazJ9Zm9yKHZhciBmPXRoaXMuX3duYWZNdWxBZGQoMSxuLGksMipvLHIpLHU9MDt1PDIqbzt1Kyspblt1XT1udWxsLGlbdV09bnVsbDtyZXR1cm4gZn0sbyhmLHMuQmFzZVBvaW50KSxjLnByb3RvdHlwZS5wb2ludD1mdW5jdGlvbihlLHQscil7cmV0dXJuIG5ldyBmKHRoaXMsZSx0LHIpfSxjLnByb3RvdHlwZS5wb2ludEZyb21KU09OPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGYuZnJvbUpTT04odGhpcyxlLHQpfSxmLnByb3RvdHlwZS5fZ2V0QmV0YT1mdW5jdGlvbigpe2lmKHRoaXMuY3VydmUuZW5kbyl7dmFyIGU9dGhpcy5wcmVjb21wdXRlZDtpZihlJiZlLmJldGEpcmV0dXJuIGUuYmV0YTt2YXIgdD10aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWRNdWwodGhpcy5jdXJ2ZS5lbmRvLmJldGEpLHRoaXMueSk7aWYoZSl7dmFyIHI9dGhpcy5jdXJ2ZSxuPWZ1bmN0aW9uKGUpe3JldHVybiByLnBvaW50KGUueC5yZWRNdWwoci5lbmRvLmJldGEpLGUueSl9O2UuYmV0YT10LHQucHJlY29tcHV0ZWQ9e2JldGE6bnVsbCxuYWY6ZS5uYWYmJnt3bmQ6ZS5uYWYud25kLHBvaW50czplLm5hZi5wb2ludHMubWFwKG4pfSxkb3VibGVzOmUuZG91YmxlcyYme3N0ZXA6ZS5kb3VibGVzLnN0ZXAscG9pbnRzOmUuZG91Ymxlcy5wb2ludHMubWFwKG4pfX19cmV0dXJuIHR9fSxmLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmVjb21wdXRlZD9bdGhpcy54LHRoaXMueSx0aGlzLnByZWNvbXB1dGVkJiZ7ZG91Ymxlczp0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMmJntzdGVwOnRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5zdGVwLHBvaW50czp0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMucG9pbnRzLnNsaWNlKDEpfSxuYWY6dGhpcy5wcmVjb21wdXRlZC5uYWYmJnt3bmQ6dGhpcy5wcmVjb21wdXRlZC5uYWYud25kLHBvaW50czp0aGlzLnByZWNvbXB1dGVkLm5hZi5wb2ludHMuc2xpY2UoMSl9fV06W3RoaXMueCx0aGlzLnldfSxmLmZyb21KU09OPWZ1bmN0aW9uKGUsdCxyKXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9SlNPTi5wYXJzZSh0KSk7dmFyIG49ZS5wb2ludCh0WzBdLHRbMV0scik7aWYoIXRbMl0pcmV0dXJuIG47ZnVuY3Rpb24gaSh0KXtyZXR1cm4gZS5wb2ludCh0WzBdLHRbMV0scil9dmFyIG89dFsyXTtyZXR1cm4gbi5wcmVjb21wdXRlZD17YmV0YTpudWxsLGRvdWJsZXM6by5kb3VibGVzJiZ7c3RlcDpvLmRvdWJsZXMuc3RlcCxwb2ludHM6W25dLmNvbmNhdChvLmRvdWJsZXMucG9pbnRzLm1hcChpKSl9LG5hZjpvLm5hZiYme3duZDpvLm5hZi53bmQscG9pbnRzOltuXS5jb25jYXQoby5uYWYucG9pbnRzLm1hcChpKSl9fSxufSxmLnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNJbmZpbml0eSgpP1wiPEVDIFBvaW50IEluZmluaXR5PlwiOlwiPEVDIFBvaW50IHg6IFwiK3RoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsMikrXCIgeTogXCIrdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwyKStcIj5cIn0sZi5wcm90b3R5cGUuaXNJbmZpbml0eT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmluZn0sZi5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe2lmKHRoaXMuaW5mKXJldHVybiBlO2lmKGUuaW5mKXJldHVybiB0aGlzO2lmKHRoaXMuZXEoZSkpcmV0dXJuIHRoaXMuZGJsKCk7aWYodGhpcy5uZWcoKS5lcShlKSlyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLG51bGwpO2lmKDA9PT10aGlzLnguY21wKGUueCkpcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCxudWxsKTt2YXIgdD10aGlzLnkucmVkU3ViKGUueSk7MCE9PXQuY21wbigwKSYmKHQ9dC5yZWRNdWwodGhpcy54LnJlZFN1YihlLngpLnJlZEludm0oKSkpO3ZhciByPXQucmVkU3FyKCkucmVkSVN1Yih0aGlzLngpLnJlZElTdWIoZS54KSxuPXQucmVkTXVsKHRoaXMueC5yZWRTdWIocikpLnJlZElTdWIodGhpcy55KTtyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChyLG4pfSxmLnByb3RvdHlwZS5kYmw9ZnVuY3Rpb24oKXtpZih0aGlzLmluZilyZXR1cm4gdGhpczt2YXIgZT10aGlzLnkucmVkQWRkKHRoaXMueSk7aWYoMD09PWUuY21wbigwKSlyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLG51bGwpO3ZhciB0PXRoaXMuY3VydmUuYSxyPXRoaXMueC5yZWRTcXIoKSxuPWUucmVkSW52bSgpLGk9ci5yZWRBZGQocikucmVkSUFkZChyKS5yZWRJQWRkKHQpLnJlZE11bChuKSxvPWkucmVkU3FyKCkucmVkSVN1Yih0aGlzLngucmVkQWRkKHRoaXMueCkpLHM9aS5yZWRNdWwodGhpcy54LnJlZFN1YihvKSkucmVkSVN1Yih0aGlzLnkpO3JldHVybiB0aGlzLmN1cnZlLnBvaW50KG8scyl9LGYucHJvdG90eXBlLmdldFg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54LmZyb21SZWQoKX0sZi5wcm90b3R5cGUuZ2V0WT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnkuZnJvbVJlZCgpfSxmLnByb3RvdHlwZS5tdWw9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9bmV3IGkoZSwxNiksdGhpcy5pc0luZmluaXR5KCk/dGhpczp0aGlzLl9oYXNEb3VibGVzKGUpP3RoaXMuY3VydmUuX2ZpeGVkTmFmTXVsKHRoaXMsZSk6dGhpcy5jdXJ2ZS5lbmRvP3RoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKFt0aGlzXSxbZV0pOnRoaXMuY3VydmUuX3duYWZNdWwodGhpcyxlKX0sZi5wcm90b3R5cGUubXVsQWRkPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1bdGhpcyx0XSxpPVtlLHJdO3JldHVybiB0aGlzLmN1cnZlLmVuZG8/dGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQobixpKTp0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsbixpLDIpfSxmLnByb3RvdHlwZS5qbXVsQWRkPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1bdGhpcyx0XSxpPVtlLHJdO3JldHVybiB0aGlzLmN1cnZlLmVuZG8/dGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQobixpLCEwKTp0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsbixpLDIsITApfSxmLnByb3RvdHlwZS5lcT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcz09PWV8fHRoaXMuaW5mPT09ZS5pbmYmJih0aGlzLmluZnx8MD09PXRoaXMueC5jbXAoZS54KSYmMD09PXRoaXMueS5jbXAoZS55KSl9LGYucHJvdG90eXBlLm5lZz1mdW5jdGlvbihlKXtpZih0aGlzLmluZilyZXR1cm4gdGhpczt2YXIgdD10aGlzLmN1cnZlLnBvaW50KHRoaXMueCx0aGlzLnkucmVkTmVnKCkpO2lmKGUmJnRoaXMucHJlY29tcHV0ZWQpe3ZhciByPXRoaXMucHJlY29tcHV0ZWQsbj1mdW5jdGlvbihlKXtyZXR1cm4gZS5uZWcoKX07dC5wcmVjb21wdXRlZD17bmFmOnIubmFmJiZ7d25kOnIubmFmLnduZCxwb2ludHM6ci5uYWYucG9pbnRzLm1hcChuKX0sZG91YmxlczpyLmRvdWJsZXMmJntzdGVwOnIuZG91Ymxlcy5zdGVwLHBvaW50czpyLmRvdWJsZXMucG9pbnRzLm1hcChuKX19fXJldHVybiB0fSxmLnByb3RvdHlwZS50b0o9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbmY/dGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCxudWxsLG51bGwpOnRoaXMuY3VydmUuanBvaW50KHRoaXMueCx0aGlzLnksdGhpcy5jdXJ2ZS5vbmUpfSxvKHUscy5CYXNlUG9pbnQpLGMucHJvdG90eXBlLmpwb2ludD1mdW5jdGlvbihlLHQscil7cmV0dXJuIG5ldyB1KHRoaXMsZSx0LHIpfSx1LnByb3RvdHlwZS50b1A9ZnVuY3Rpb24oKXtpZih0aGlzLmlzSW5maW5pdHkoKSlyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLG51bGwpO3ZhciBlPXRoaXMuei5yZWRJbnZtKCksdD1lLnJlZFNxcigpLHI9dGhpcy54LnJlZE11bCh0KSxuPXRoaXMueS5yZWRNdWwodCkucmVkTXVsKGUpO3JldHVybiB0aGlzLmN1cnZlLnBvaW50KHIsbil9LHUucHJvdG90eXBlLm5lZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsdGhpcy55LnJlZE5lZygpLHRoaXMueil9LHUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXtpZih0aGlzLmlzSW5maW5pdHkoKSlyZXR1cm4gZTtpZihlLmlzSW5maW5pdHkoKSlyZXR1cm4gdGhpczt2YXIgdD1lLnoucmVkU3FyKCkscj10aGlzLnoucmVkU3FyKCksbj10aGlzLngucmVkTXVsKHQpLGk9ZS54LnJlZE11bChyKSxvPXRoaXMueS5yZWRNdWwodC5yZWRNdWwoZS56KSkscz1lLnkucmVkTXVsKHIucmVkTXVsKHRoaXMueikpLGE9bi5yZWRTdWIoaSksYz1vLnJlZFN1YihzKTtpZigwPT09YS5jbXBuKDApKXJldHVybiAwIT09Yy5jbXBuKDApP3RoaXMuY3VydmUuanBvaW50KG51bGwsbnVsbCxudWxsKTp0aGlzLmRibCgpO3ZhciBmPWEucmVkU3FyKCksdT1mLnJlZE11bChhKSxkPW4ucmVkTXVsKGYpLGg9Yy5yZWRTcXIoKS5yZWRJQWRkKHUpLnJlZElTdWIoZCkucmVkSVN1YihkKSxsPWMucmVkTXVsKGQucmVkSVN1YihoKSkucmVkSVN1YihvLnJlZE11bCh1KSkscD10aGlzLnoucmVkTXVsKGUueikucmVkTXVsKGEpO3JldHVybiB0aGlzLmN1cnZlLmpwb2ludChoLGwscCl9LHUucHJvdG90eXBlLm1peGVkQWRkPWZ1bmN0aW9uKGUpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiBlLnRvSigpO2lmKGUuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO3ZhciB0PXRoaXMuei5yZWRTcXIoKSxyPXRoaXMueCxuPWUueC5yZWRNdWwodCksaT10aGlzLnksbz1lLnkucmVkTXVsKHQpLnJlZE11bCh0aGlzLnopLHM9ci5yZWRTdWIobiksYT1pLnJlZFN1YihvKTtpZigwPT09cy5jbXBuKDApKXJldHVybiAwIT09YS5jbXBuKDApP3RoaXMuY3VydmUuanBvaW50KG51bGwsbnVsbCxudWxsKTp0aGlzLmRibCgpO3ZhciBjPXMucmVkU3FyKCksZj1jLnJlZE11bChzKSx1PXIucmVkTXVsKGMpLGQ9YS5yZWRTcXIoKS5yZWRJQWRkKGYpLnJlZElTdWIodSkucmVkSVN1Yih1KSxoPWEucmVkTXVsKHUucmVkSVN1YihkKSkucmVkSVN1YihpLnJlZE11bChmKSksbD10aGlzLnoucmVkTXVsKHMpO3JldHVybiB0aGlzLmN1cnZlLmpwb2ludChkLGgsbCl9LHUucHJvdG90eXBlLmRibHA9ZnVuY3Rpb24oZSl7aWYoMD09PWUpcmV0dXJuIHRoaXM7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXM7aWYoIWUpcmV0dXJuIHRoaXMuZGJsKCk7dmFyIHQ7aWYodGhpcy5jdXJ2ZS56ZXJvQXx8dGhpcy5jdXJ2ZS50aHJlZUEpe3ZhciByPXRoaXM7Zm9yKHQ9MDt0PGU7dCsrKXI9ci5kYmwoKTtyZXR1cm4gcn12YXIgbj10aGlzLmN1cnZlLmEsaT10aGlzLmN1cnZlLnRpbnYsbz10aGlzLngscz10aGlzLnksYT10aGlzLnosYz1hLnJlZFNxcigpLnJlZFNxcigpLGY9cy5yZWRBZGQocyk7Zm9yKHQ9MDt0PGU7dCsrKXt2YXIgdT1vLnJlZFNxcigpLGQ9Zi5yZWRTcXIoKSxoPWQucmVkU3FyKCksbD11LnJlZEFkZCh1KS5yZWRJQWRkKHUpLnJlZElBZGQobi5yZWRNdWwoYykpLHA9by5yZWRNdWwoZCksYj1sLnJlZFNxcigpLnJlZElTdWIocC5yZWRBZGQocCkpLHk9cC5yZWRJU3ViKGIpLGc9bC5yZWRNdWwoeSk7Zz1nLnJlZElBZGQoZykucmVkSVN1YihoKTt2YXIgbT1mLnJlZE11bChhKTt0KzE8ZSYmKGM9Yy5yZWRNdWwoaCkpLG89YixhPW0sZj1nfXJldHVybiB0aGlzLmN1cnZlLmpwb2ludChvLGYucmVkTXVsKGkpLGEpfSx1LnByb3RvdHlwZS5kYmw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0luZmluaXR5KCk/dGhpczp0aGlzLmN1cnZlLnplcm9BP3RoaXMuX3plcm9EYmwoKTp0aGlzLmN1cnZlLnRocmVlQT90aGlzLl90aHJlZURibCgpOnRoaXMuX2RibCgpfSx1LnByb3RvdHlwZS5femVyb0RibD1mdW5jdGlvbigpe3ZhciBlLHQscjtpZih0aGlzLnpPbmUpe3ZhciBuPXRoaXMueC5yZWRTcXIoKSxpPXRoaXMueS5yZWRTcXIoKSxvPWkucmVkU3FyKCkscz10aGlzLngucmVkQWRkKGkpLnJlZFNxcigpLnJlZElTdWIobikucmVkSVN1YihvKTtzPXMucmVkSUFkZChzKTt2YXIgYT1uLnJlZEFkZChuKS5yZWRJQWRkKG4pLGM9YS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyksZj1vLnJlZElBZGQobyk7Zj0oZj1mLnJlZElBZGQoZikpLnJlZElBZGQoZiksZT1jLHQ9YS5yZWRNdWwocy5yZWRJU3ViKGMpKS5yZWRJU3ViKGYpLHI9dGhpcy55LnJlZEFkZCh0aGlzLnkpfWVsc2V7dmFyIHU9dGhpcy54LnJlZFNxcigpLGQ9dGhpcy55LnJlZFNxcigpLGg9ZC5yZWRTcXIoKSxsPXRoaXMueC5yZWRBZGQoZCkucmVkU3FyKCkucmVkSVN1Yih1KS5yZWRJU3ViKGgpO2w9bC5yZWRJQWRkKGwpO3ZhciBwPXUucmVkQWRkKHUpLnJlZElBZGQodSksYj1wLnJlZFNxcigpLHk9aC5yZWRJQWRkKGgpO3k9KHk9eS5yZWRJQWRkKHkpKS5yZWRJQWRkKHkpLGU9Yi5yZWRJU3ViKGwpLnJlZElTdWIobCksdD1wLnJlZE11bChsLnJlZElTdWIoZSkpLnJlZElTdWIoeSkscj0ocj10aGlzLnkucmVkTXVsKHRoaXMueikpLnJlZElBZGQocil9cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KGUsdCxyKX0sdS5wcm90b3R5cGUuX3RocmVlRGJsPWZ1bmN0aW9uKCl7dmFyIGUsdCxyO2lmKHRoaXMuek9uZSl7dmFyIG49dGhpcy54LnJlZFNxcigpLGk9dGhpcy55LnJlZFNxcigpLG89aS5yZWRTcXIoKSxzPXRoaXMueC5yZWRBZGQoaSkucmVkU3FyKCkucmVkSVN1YihuKS5yZWRJU3ViKG8pO3M9cy5yZWRJQWRkKHMpO3ZhciBhPW4ucmVkQWRkKG4pLnJlZElBZGQobikucmVkSUFkZCh0aGlzLmN1cnZlLmEpLGM9YS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7ZT1jO3ZhciBmPW8ucmVkSUFkZChvKTtmPShmPWYucmVkSUFkZChmKSkucmVkSUFkZChmKSx0PWEucmVkTXVsKHMucmVkSVN1YihjKSkucmVkSVN1YihmKSxyPXRoaXMueS5yZWRBZGQodGhpcy55KX1lbHNle3ZhciB1PXRoaXMuei5yZWRTcXIoKSxkPXRoaXMueS5yZWRTcXIoKSxoPXRoaXMueC5yZWRNdWwoZCksbD10aGlzLngucmVkU3ViKHUpLnJlZE11bCh0aGlzLngucmVkQWRkKHUpKTtsPWwucmVkQWRkKGwpLnJlZElBZGQobCk7dmFyIHA9aC5yZWRJQWRkKGgpLGI9KHA9cC5yZWRJQWRkKHApKS5yZWRBZGQocCk7ZT1sLnJlZFNxcigpLnJlZElTdWIoYikscj10aGlzLnkucmVkQWRkKHRoaXMueikucmVkU3FyKCkucmVkSVN1YihkKS5yZWRJU3ViKHUpO3ZhciB5PWQucmVkU3FyKCk7eT0oeT0oeT15LnJlZElBZGQoeSkpLnJlZElBZGQoeSkpLnJlZElBZGQoeSksdD1sLnJlZE11bChwLnJlZElTdWIoZSkpLnJlZElTdWIoeSl9cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KGUsdCxyKX0sdS5wcm90b3R5cGUuX2RibD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3VydmUuYSx0PXRoaXMueCxyPXRoaXMueSxuPXRoaXMueixpPW4ucmVkU3FyKCkucmVkU3FyKCksbz10LnJlZFNxcigpLHM9ci5yZWRTcXIoKSxhPW8ucmVkQWRkKG8pLnJlZElBZGQobykucmVkSUFkZChlLnJlZE11bChpKSksYz10LnJlZEFkZCh0KSxmPShjPWMucmVkSUFkZChjKSkucmVkTXVsKHMpLHU9YS5yZWRTcXIoKS5yZWRJU3ViKGYucmVkQWRkKGYpKSxkPWYucmVkSVN1Yih1KSxoPXMucmVkU3FyKCk7aD0oaD0oaD1oLnJlZElBZGQoaCkpLnJlZElBZGQoaCkpLnJlZElBZGQoaCk7dmFyIGw9YS5yZWRNdWwoZCkucmVkSVN1YihoKSxwPXIucmVkQWRkKHIpLnJlZE11bChuKTtyZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodSxsLHApfSx1LnByb3RvdHlwZS50cnBsPWZ1bmN0aW9uKCl7aWYoIXRoaXMuY3VydmUuemVyb0EpcmV0dXJuIHRoaXMuZGJsKCkuYWRkKHRoaXMpO3ZhciBlPXRoaXMueC5yZWRTcXIoKSx0PXRoaXMueS5yZWRTcXIoKSxyPXRoaXMuei5yZWRTcXIoKSxuPXQucmVkU3FyKCksaT1lLnJlZEFkZChlKS5yZWRJQWRkKGUpLG89aS5yZWRTcXIoKSxzPXRoaXMueC5yZWRBZGQodCkucmVkU3FyKCkucmVkSVN1YihlKS5yZWRJU3ViKG4pLGE9KHM9KHM9KHM9cy5yZWRJQWRkKHMpKS5yZWRBZGQocykucmVkSUFkZChzKSkucmVkSVN1YihvKSkucmVkU3FyKCksYz1uLnJlZElBZGQobik7Yz0oYz0oYz1jLnJlZElBZGQoYykpLnJlZElBZGQoYykpLnJlZElBZGQoYyk7dmFyIGY9aS5yZWRJQWRkKHMpLnJlZFNxcigpLnJlZElTdWIobykucmVkSVN1YihhKS5yZWRJU3ViKGMpLHU9dC5yZWRNdWwoZik7dT0odT11LnJlZElBZGQodSkpLnJlZElBZGQodSk7dmFyIGQ9dGhpcy54LnJlZE11bChhKS5yZWRJU3ViKHUpO2Q9KGQ9ZC5yZWRJQWRkKGQpKS5yZWRJQWRkKGQpO3ZhciBoPXRoaXMueS5yZWRNdWwoZi5yZWRNdWwoYy5yZWRJU3ViKGYpKS5yZWRJU3ViKHMucmVkTXVsKGEpKSk7aD0oaD0oaD1oLnJlZElBZGQoaCkpLnJlZElBZGQoaCkpLnJlZElBZGQoaCk7dmFyIGw9dGhpcy56LnJlZEFkZChzKS5yZWRTcXIoKS5yZWRJU3ViKHIpLnJlZElTdWIoYSk7cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KGQsaCxsKX0sdS5wcm90b3R5cGUubXVsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bmV3IGkoZSx0KSx0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsZSl9LHUucHJvdG90eXBlLmVxPWZ1bmN0aW9uKGUpe2lmKFwiYWZmaW5lXCI9PT1lLnR5cGUpcmV0dXJuIHRoaXMuZXEoZS50b0ooKSk7aWYodGhpcz09PWUpcmV0dXJuITA7dmFyIHQ9dGhpcy56LnJlZFNxcigpLHI9ZS56LnJlZFNxcigpO2lmKDAhPT10aGlzLngucmVkTXVsKHIpLnJlZElTdWIoZS54LnJlZE11bCh0KSkuY21wbigwKSlyZXR1cm4hMTt2YXIgbj10LnJlZE11bCh0aGlzLnopLGk9ci5yZWRNdWwoZS56KTtyZXR1cm4gMD09PXRoaXMueS5yZWRNdWwoaSkucmVkSVN1YihlLnkucmVkTXVsKG4pKS5jbXBuKDApfSx1LnByb3RvdHlwZS5lcVhUb1A9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy56LnJlZFNxcigpLHI9ZS50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHQpO2lmKDA9PT10aGlzLnguY21wKHIpKXJldHVybiEwO2Zvcih2YXIgbj1lLmNsb25lKCksaT10aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHQpOzspe2lmKG4uaWFkZCh0aGlzLmN1cnZlLm4pLG4uY21wKHRoaXMuY3VydmUucCk+PTApcmV0dXJuITE7aWYoci5yZWRJQWRkKGkpLDA9PT10aGlzLnguY21wKHIpKXJldHVybiEwfX0sdS5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzSW5maW5pdHkoKT9cIjxFQyBKUG9pbnQgSW5maW5pdHk+XCI6XCI8RUMgSlBvaW50IHg6IFwiK3RoaXMueC50b1N0cmluZygxNiwyKStcIiB5OiBcIit0aGlzLnkudG9TdHJpbmcoMTYsMikrXCIgejogXCIrdGhpcy56LnRvU3RyaW5nKDE2LDIpK1wiPlwifSx1LnByb3RvdHlwZS5pc0luZmluaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLnouY21wbigwKX19LDU0Mjc6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuLGk9dCxvPXIoMzcxNSkscz1yKDgyNTQpLGE9cig5NTMpLmFzc2VydDtmdW5jdGlvbiBjKGUpe1wic2hvcnRcIj09PWUudHlwZT90aGlzLmN1cnZlPW5ldyBzLnNob3J0KGUpOlwiZWR3YXJkc1wiPT09ZS50eXBlP3RoaXMuY3VydmU9bmV3IHMuZWR3YXJkcyhlKTp0aGlzLmN1cnZlPW5ldyBzLm1vbnQoZSksdGhpcy5nPXRoaXMuY3VydmUuZyx0aGlzLm49dGhpcy5jdXJ2ZS5uLHRoaXMuaGFzaD1lLmhhc2gsYSh0aGlzLmcudmFsaWRhdGUoKSxcIkludmFsaWQgY3VydmVcIiksYSh0aGlzLmcubXVsKHRoaXMubikuaXNJbmZpbml0eSgpLFwiSW52YWxpZCBjdXJ2ZSwgRypOICE9IE9cIil9ZnVuY3Rpb24gZihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShpLGUse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3ZhciByPW5ldyBjKHQpO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxlLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx2YWx1ZTpyfSkscn19KX1pLlByZXNldEN1cnZlPWMsZihcInAxOTJcIix7dHlwZTpcInNob3J0XCIscHJpbWU6XCJwMTkyXCIscDpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmXCIsYTpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZjXCIsYjpcIjY0MjEwNTE5IGU1OWM4MGU3IDBmYTdlOWFiIDcyMjQzMDQ5IGZlYjhkZWVjIGMxNDZiOWIxXCIsbjpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDk5ZGVmODM2IDE0NmJjOWIxIGI0ZDIyODMxXCIsaGFzaDpvLnNoYTI1NixnUmVkOiExLGc6W1wiMTg4ZGE4MGUgYjAzMDkwZjYgN2NiZjIwZWIgNDNhMTg4MDAgZjRmZjBhZmQgODJmZjEwMTJcIixcIjA3MTkyYjk1IGZmYzhkYTc4IDYzMTAxMWVkIDZiMjRjZGQ1IDczZjk3N2ExIDFlNzk0ODExXCJdfSksZihcInAyMjRcIix7dHlwZTpcInNob3J0XCIscHJpbWU6XCJwMjI0XCIscDpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxXCIsYTpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlXCIsYjpcImI0MDUwYTg1IDBjMDRiM2FiIGY1NDEzMjU2IDUwNDRiMGI3IGQ3YmZkOGJhIDI3MGIzOTQzIDIzNTVmZmI0XCIsbjpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmYxNmEyIGUwYjhmMDNlIDEzZGQyOTQ1IDVjNWMyYTNkXCIsaGFzaDpvLnNoYTI1NixnUmVkOiExLGc6W1wiYjcwZTBjYmQgNmJiNGJmN2YgMzIxMzkwYjkgNGEwM2MxZDMgNTZjMjExMjIgMzQzMjgwZDYgMTE1YzFkMjFcIixcImJkMzc2Mzg4IGI1ZjcyM2ZiIDRjMjJkZmU2IGNkNDM3NWEwIDVhMDc0NzY0IDQ0ZDU4MTk5IDg1MDA3ZTM0XCJdfSksZihcInAyNTZcIix7dHlwZTpcInNob3J0XCIscHJpbWU6bnVsbCxwOlwiZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmZcIixhOlwiZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmNcIixiOlwiNWFjNjM1ZDggYWEzYTkzZTcgYjNlYmJkNTUgNzY5ODg2YmMgNjUxZDA2YjAgY2M1M2IwZjYgM2JjZTNjM2UgMjdkMjYwNGJcIixuOlwiZmZmZmZmZmYgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgYmNlNmZhYWQgYTcxNzllODQgZjNiOWNhYzIgZmM2MzI1NTFcIixoYXNoOm8uc2hhMjU2LGdSZWQ6ITEsZzpbXCI2YjE3ZDFmMiBlMTJjNDI0NyBmOGJjZTZlNSA2M2E0NDBmMiA3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NlwiLFwiNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYgMmJjZTMzNTcgNmIzMTVlY2UgY2JiNjQwNjggMzdiZjUxZjVcIl19KSxmKFwicDM4NFwiLHt0eXBlOlwic2hvcnRcIixwcmltZTpudWxsLHA6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZlwiLGE6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmY1wiLGI6XCJiMzMxMmZhNyBlMjNlZTdlNCA5ODhlMDU2YiBlM2Y4MmQxOSAxODFkOWM2ZSBmZTgxNDExMiAwMzE0MDg4ZiA1MDEzODc1YSBjNjU2Mzk4ZCA4YTJlZDE5ZCAyYTg1YzhlZCBkM2VjMmFlZlwiLG46XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBjNzYzNGQ4MSBmNDM3MmRkZiA1ODFhMGRiMiA0OGIwYTc3YSBlY2VjMTk2YSBjY2M1Mjk3M1wiLGhhc2g6by5zaGEzODQsZ1JlZDohMSxnOltcImFhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0IDZlMWQzYjYyIDhiYTc5Yjk4IDU5Zjc0MWUwIDgyNTQyYTM4IDU1MDJmMjVkIGJmNTUyOTZjIDNhNTQ1ZTM4IDcyNzYwYWI3XCIsXCIzNjE3ZGU0YSA5NjI2MmM2ZiA1ZDllOThiZiA5MjkyZGMyOSBmOGY0MWRiZCAyODlhMTQ3YyBlOWRhMzExMyBiNWYwYjhjMCAwYTYwYjFjZSAxZDdlODE5ZCA3YTQzMWQ3YyA5MGVhMGU1ZlwiXX0pLGYoXCJwNTIxXCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOm51bGwscDpcIjAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmXCIsYTpcIjAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjXCIsYjpcIjAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViIDk5YjMxNWYzIGI4YjQ4OTkxIDhlZjEwOWUxIDU2MTkzOTUxIGVjN2U5MzdiIDE2NTJjMGJkIDNiYjFiZjA3IDM1NzNkZjg4IDNkMmMzNGYxIGVmNDUxZmQ0IDZiNTAzZjAwXCIsbjpcIjAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZhIDUxODY4NzgzIGJmMmY5NjZiIDdmY2MwMTQ4IGY3MDlhNWQwIDNiYjVjOWI4IDg5OWM0N2FlIGJiNmZiNzFlIDkxMzg2NDA5XCIsaGFzaDpvLnNoYTUxMixnUmVkOiExLGc6W1wiMDAwMDAwYzYgODU4ZTA2YjcgMDQwNGU5Y2QgOWUzZWNiNjYgMjM5NWI0NDIgOWM2NDgxMzkgMDUzZmI1MjEgZjgyOGFmNjAgNmI0ZDNkYmEgYTE0YjVlNzcgZWZlNzU5MjggZmUxZGMxMjcgYTJmZmE4ZGUgMzM0OGIzYzEgODU2YTQyOWIgZjk3ZTdlMzEgYzJlNWJkNjZcIixcIjAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5IDU3OWI0NDY4IDE3YWZiZDE3IDI3M2U2NjJjIDk3ZWU3Mjk5IDVlZjQyNjQwIGM1NTBiOTAxIDNmYWQwNzYxIDM1M2M3MDg2IGEyNzJjMjQwIDg4YmU5NDc2IDlmZDE2NjUwXCJdfSksZihcImN1cnZlMjU1MTlcIix7dHlwZTpcIm1vbnRcIixwcmltZTpcInAyNTUxOVwiLHA6XCI3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkXCIsYTpcIjc2ZDA2XCIsYjpcIjFcIixuOlwiMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZFwiLGhhc2g6by5zaGEyNTYsZ1JlZDohMSxnOltcIjlcIl19KSxmKFwiZWQyNTUxOVwiLHt0eXBlOlwiZWR3YXJkc1wiLHByaW1lOlwicDI1NTE5XCIscDpcIjdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWRcIixhOlwiLTFcIixjOlwiMVwiLGQ6XCI1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzXCIsbjpcIjEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWRcIixoYXNoOm8uc2hhMjU2LGdSZWQ6ITEsZzpbXCIyMTY5MzZkM2NkNmU1M2ZlYzBhNGUyMzFmZGQ2ZGM1YzY5MmNjNzYwOTUyNWE3YjJjOTU2MmQ2MDhmMjVkNTFhXCIsXCI2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjU4XCJdfSk7dHJ5e249cigxMDM3KX1jYXRjaChlKXtuPXZvaWQgMH1mKFwic2VjcDI1NmsxXCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOlwiazI1NlwiLHA6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZlwiLGE6XCIwXCIsYjpcIjdcIixuOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDFcIixoOlwiMVwiLGhhc2g6by5zaGEyNTYsYmV0YTpcIjdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWVcIixsYW1iZGE6XCI1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyXCIsYmFzaXM6W3thOlwiMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTVcIixiOlwiLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzXCJ9LHthOlwiMTE0Y2E1MGY3YThlMmYzZjY1N2MxMTA4ZDlkNDRjZmQ4XCIsYjpcIjMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1XCJ9XSxnUmVkOiExLGc6W1wiNzliZTY2N2VmOWRjYmJhYzU1YTA2Mjk1Y2U4NzBiMDcwMjliZmNkYjJkY2UyOGQ5NTlmMjgxNWIxNmY4MTc5OFwiLFwiNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOFwiLG5dfSl9LDc5NTQ6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoMzU1MCksaT1yKDIxNTYpLG89cig5NTMpLHM9cig1NDI3KSxhPXIoOTkzMSksYz1vLmFzc2VydCxmPXIoMTI1MSksdT1yKDYxMSk7ZnVuY3Rpb24gZChlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBkKSlyZXR1cm4gbmV3IGQoZSk7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihjKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLGUpLFwiVW5rbm93biBjdXJ2ZSBcIitlKSxlPXNbZV0pLGUgaW5zdGFuY2VvZiBzLlByZXNldEN1cnZlJiYoZT17Y3VydmU6ZX0pLHRoaXMuY3VydmU9ZS5jdXJ2ZS5jdXJ2ZSx0aGlzLm49dGhpcy5jdXJ2ZS5uLHRoaXMubmg9dGhpcy5uLnVzaHJuKDEpLHRoaXMuZz10aGlzLmN1cnZlLmcsdGhpcy5nPWUuY3VydmUuZyx0aGlzLmcucHJlY29tcHV0ZShlLmN1cnZlLm4uYml0TGVuZ3RoKCkrMSksdGhpcy5oYXNoPWUuaGFzaHx8ZS5jdXJ2ZS5oYXNofWUuZXhwb3J0cz1kLGQucHJvdG90eXBlLmtleVBhaXI9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBmKHRoaXMsZSl9LGQucHJvdG90eXBlLmtleUZyb21Qcml2YXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGYuZnJvbVByaXZhdGUodGhpcyxlLHQpfSxkLnByb3RvdHlwZS5rZXlGcm9tUHVibGljPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGYuZnJvbVB1YmxpYyh0aGlzLGUsdCl9LGQucHJvdG90eXBlLmdlbktleVBhaXI9ZnVuY3Rpb24oZSl7ZXx8KGU9e30pO2Zvcih2YXIgdD1uZXcgaSh7aGFzaDp0aGlzLmhhc2gscGVyczplLnBlcnMscGVyc0VuYzplLnBlcnNFbmN8fFwidXRmOFwiLGVudHJvcHk6ZS5lbnRyb3B5fHxhKHRoaXMuaGFzaC5obWFjU3RyZW5ndGgpLGVudHJvcHlFbmM6ZS5lbnRyb3B5JiZlLmVudHJvcHlFbmN8fFwidXRmOFwiLG5vbmNlOnRoaXMubi50b0FycmF5KCl9KSxyPXRoaXMubi5ieXRlTGVuZ3RoKCksbz10aGlzLm4uc3ViKG5ldyBuKDIpKTs7KXt2YXIgcz1uZXcgbih0LmdlbmVyYXRlKHIpKTtpZighKHMuY21wKG8pPjApKXJldHVybiBzLmlhZGRuKDEpLHRoaXMua2V5RnJvbVByaXZhdGUocyl9fSxkLnByb3RvdHlwZS5fdHJ1bmNhdGVUb049ZnVuY3Rpb24oZSx0KXt2YXIgcj04KmUuYnl0ZUxlbmd0aCgpLXRoaXMubi5iaXRMZW5ndGgoKTtyZXR1cm4gcj4wJiYoZT1lLnVzaHJuKHIpKSwhdCYmZS5jbXAodGhpcy5uKT49MD9lLnN1Yih0aGlzLm4pOmV9LGQucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24oZSx0LHIsbyl7XCJvYmplY3RcIj09dHlwZW9mIHImJihvPXIscj1udWxsKSxvfHwobz17fSksdD10aGlzLmtleUZyb21Qcml2YXRlKHQsciksZT10aGlzLl90cnVuY2F0ZVRvTihuZXcgbihlLDE2KSk7Zm9yKHZhciBzPXRoaXMubi5ieXRlTGVuZ3RoKCksYT10LmdldFByaXZhdGUoKS50b0FycmF5KFwiYmVcIixzKSxjPWUudG9BcnJheShcImJlXCIscyksZj1uZXcgaSh7aGFzaDp0aGlzLmhhc2gsZW50cm9weTphLG5vbmNlOmMscGVyczpvLnBlcnMscGVyc0VuYzpvLnBlcnNFbmN8fFwidXRmOFwifSksZD10aGlzLm4uc3ViKG5ldyBuKDEpKSxoPTA7O2grKyl7dmFyIGw9by5rP28uayhoKTpuZXcgbihmLmdlbmVyYXRlKHRoaXMubi5ieXRlTGVuZ3RoKCkpKTtpZighKChsPXRoaXMuX3RydW5jYXRlVG9OKGwsITApKS5jbXBuKDEpPD0wfHxsLmNtcChkKT49MCkpe3ZhciBwPXRoaXMuZy5tdWwobCk7aWYoIXAuaXNJbmZpbml0eSgpKXt2YXIgYj1wLmdldFgoKSx5PWIudW1vZCh0aGlzLm4pO2lmKDAhPT15LmNtcG4oMCkpe3ZhciBnPWwuaW52bSh0aGlzLm4pLm11bCh5Lm11bCh0LmdldFByaXZhdGUoKSkuaWFkZChlKSk7aWYoMCE9PShnPWcudW1vZCh0aGlzLm4pKS5jbXBuKDApKXt2YXIgbT0ocC5nZXRZKCkuaXNPZGQoKT8xOjApfCgwIT09Yi5jbXAoeSk/MjowKTtyZXR1cm4gby5jYW5vbmljYWwmJmcuY21wKHRoaXMubmgpPjAmJihnPXRoaXMubi5zdWIoZyksbV49MSksbmV3IHUoe3I6eSxzOmcscmVjb3ZlcnlQYXJhbTptfSl9fX19fX0sZC5wcm90b3R5cGUudmVyaWZ5PWZ1bmN0aW9uKGUsdCxyLGkpe2U9dGhpcy5fdHJ1bmNhdGVUb04obmV3IG4oZSwxNikpLHI9dGhpcy5rZXlGcm9tUHVibGljKHIsaSk7dmFyIG89KHQ9bmV3IHUodCxcImhleFwiKSkucixzPXQucztpZihvLmNtcG4oMSk8MHx8by5jbXAodGhpcy5uKT49MClyZXR1cm4hMTtpZihzLmNtcG4oMSk8MHx8cy5jbXAodGhpcy5uKT49MClyZXR1cm4hMTt2YXIgYSxjPXMuaW52bSh0aGlzLm4pLGY9Yy5tdWwoZSkudW1vZCh0aGlzLm4pLGQ9Yy5tdWwobykudW1vZCh0aGlzLm4pO3JldHVybiB0aGlzLmN1cnZlLl9tYXh3ZWxsVHJpY2s/IShhPXRoaXMuZy5qbXVsQWRkKGYsci5nZXRQdWJsaWMoKSxkKSkuaXNJbmZpbml0eSgpJiZhLmVxWFRvUChvKTohKGE9dGhpcy5nLm11bEFkZChmLHIuZ2V0UHVibGljKCksZCkpLmlzSW5maW5pdHkoKSYmMD09PWEuZ2V0WCgpLnVtb2QodGhpcy5uKS5jbXAobyl9LGQucHJvdG90eXBlLnJlY292ZXJQdWJLZXk9ZnVuY3Rpb24oZSx0LHIsaSl7YygoMyZyKT09PXIsXCJUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzXCIpLHQ9bmV3IHUodCxpKTt2YXIgbz10aGlzLm4scz1uZXcgbihlKSxhPXQucixmPXQucyxkPTEmcixoPXI+PjE7aWYoYS5jbXAodGhpcy5jdXJ2ZS5wLnVtb2QodGhpcy5jdXJ2ZS5uKSk+PTAmJmgpdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGZpbmQgc2VuY29uZCBrZXkgY2FuZGluYXRlXCIpO2E9aD90aGlzLmN1cnZlLnBvaW50RnJvbVgoYS5hZGQodGhpcy5jdXJ2ZS5uKSxkKTp0aGlzLmN1cnZlLnBvaW50RnJvbVgoYSxkKTt2YXIgbD10LnIuaW52bShvKSxwPW8uc3ViKHMpLm11bChsKS51bW9kKG8pLGI9Zi5tdWwobCkudW1vZChvKTtyZXR1cm4gdGhpcy5nLm11bEFkZChwLGEsYil9LGQucHJvdG90eXBlLmdldEtleVJlY292ZXJ5UGFyYW09ZnVuY3Rpb24oZSx0LHIsbil7aWYobnVsbCE9PSh0PW5ldyB1KHQsbikpLnJlY292ZXJ5UGFyYW0pcmV0dXJuIHQucmVjb3ZlcnlQYXJhbTtmb3IodmFyIGk9MDtpPDQ7aSsrKXt2YXIgbzt0cnl7bz10aGlzLnJlY292ZXJQdWJLZXkoZSx0LGkpfWNhdGNoKGUpe2NvbnRpbnVlfWlmKG8uZXEocikpcmV0dXJuIGl9dGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGZpbmQgdmFsaWQgcmVjb3ZlcnkgZmFjdG9yXCIpfX0sMTI1MTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzNTUwKSxpPXIoOTUzKS5hc3NlcnQ7ZnVuY3Rpb24gbyhlLHQpe3RoaXMuZWM9ZSx0aGlzLnByaXY9bnVsbCx0aGlzLnB1Yj1udWxsLHQucHJpdiYmdGhpcy5faW1wb3J0UHJpdmF0ZSh0LnByaXYsdC5wcml2RW5jKSx0LnB1YiYmdGhpcy5faW1wb3J0UHVibGljKHQucHViLHQucHViRW5jKX1lLmV4cG9ydHM9byxvLmZyb21QdWJsaWM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0IGluc3RhbmNlb2Ygbz90Om5ldyBvKGUse3B1Yjp0LHB1YkVuYzpyfSl9LG8uZnJvbVByaXZhdGU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0IGluc3RhbmNlb2Ygbz90Om5ldyBvKGUse3ByaXY6dCxwcml2RW5jOnJ9KX0sby5wcm90b3R5cGUudmFsaWRhdGU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmdldFB1YmxpYygpO3JldHVybiBlLmlzSW5maW5pdHkoKT97cmVzdWx0OiExLHJlYXNvbjpcIkludmFsaWQgcHVibGljIGtleVwifTplLnZhbGlkYXRlKCk/ZS5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCk/e3Jlc3VsdDohMCxyZWFzb246bnVsbH06e3Jlc3VsdDohMSxyZWFzb246XCJQdWJsaWMga2V5ICogTiAhPSBPXCJ9OntyZXN1bHQ6ITEscmVhc29uOlwiUHVibGljIGtleSBpcyBub3QgYSBwb2ludFwifX0sby5wcm90b3R5cGUuZ2V0UHVibGljPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJih0PWUsZT1udWxsKSx0aGlzLnB1Ynx8KHRoaXMucHViPXRoaXMuZWMuZy5tdWwodGhpcy5wcml2KSksdD90aGlzLnB1Yi5lbmNvZGUodCxlKTp0aGlzLnB1Yn0sby5wcm90b3R5cGUuZ2V0UHJpdmF0ZT1mdW5jdGlvbihlKXtyZXR1cm5cImhleFwiPT09ZT90aGlzLnByaXYudG9TdHJpbmcoMTYsMik6dGhpcy5wcml2fSxvLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZT1mdW5jdGlvbihlLHQpe3RoaXMucHJpdj1uZXcgbihlLHR8fDE2KSx0aGlzLnByaXY9dGhpcy5wcml2LnVtb2QodGhpcy5lYy5jdXJ2ZS5uKX0sby5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYz1mdW5jdGlvbihlLHQpe2lmKGUueHx8ZS55KXJldHVyblwibW9udFwiPT09dGhpcy5lYy5jdXJ2ZS50eXBlP2koZS54LFwiTmVlZCB4IGNvb3JkaW5hdGVcIik6XCJzaG9ydFwiIT09dGhpcy5lYy5jdXJ2ZS50eXBlJiZcImVkd2FyZHNcIiE9PXRoaXMuZWMuY3VydmUudHlwZXx8aShlLngmJmUueSxcIk5lZWQgYm90aCB4IGFuZCB5IGNvb3JkaW5hdGVcIiksdm9pZCh0aGlzLnB1Yj10aGlzLmVjLmN1cnZlLnBvaW50KGUueCxlLnkpKTt0aGlzLnB1Yj10aGlzLmVjLmN1cnZlLmRlY29kZVBvaW50KGUsdCl9LG8ucHJvdG90eXBlLmRlcml2ZT1mdW5jdGlvbihlKXtyZXR1cm4gZS52YWxpZGF0ZSgpfHxpKGUudmFsaWRhdGUoKSxcInB1YmxpYyBwb2ludCBub3QgdmFsaWRhdGVkXCIpLGUubXVsKHRoaXMucHJpdikuZ2V0WCgpfSxvLnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5lYy5zaWduKGUsdGhpcyx0LHIpfSxvLnByb3RvdHlwZS52ZXJpZnk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYy52ZXJpZnkoZSx0LHRoaXMpfSxvLnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uKCl7cmV0dXJuXCI8S2V5IHByaXY6IFwiKyh0aGlzLnByaXYmJnRoaXMucHJpdi50b1N0cmluZygxNiwyKSkrXCIgcHViOiBcIisodGhpcy5wdWImJnRoaXMucHViLmluc3BlY3QoKSkrXCIgPlwifX0sNjExOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDM1NTApLGk9cig5NTMpLG89aS5hc3NlcnQ7ZnVuY3Rpb24gcyhlLHQpe2lmKGUgaW5zdGFuY2VvZiBzKXJldHVybiBlO3RoaXMuX2ltcG9ydERFUihlLHQpfHwobyhlLnImJmUucyxcIlNpZ25hdHVyZSB3aXRob3V0IHIgb3Igc1wiKSx0aGlzLnI9bmV3IG4oZS5yLDE2KSx0aGlzLnM9bmV3IG4oZS5zLDE2KSx2b2lkIDA9PT1lLnJlY292ZXJ5UGFyYW0/dGhpcy5yZWNvdmVyeVBhcmFtPW51bGw6dGhpcy5yZWNvdmVyeVBhcmFtPWUucmVjb3ZlcnlQYXJhbSl9ZnVuY3Rpb24gYSgpe3RoaXMucGxhY2U9MH1mdW5jdGlvbiBjKGUsdCl7dmFyIHI9ZVt0LnBsYWNlKytdO2lmKCEoMTI4JnIpKXJldHVybiByO3ZhciBuPTE1JnI7aWYoMD09PW58fG4+NClyZXR1cm4hMTtmb3IodmFyIGk9MCxvPTAscz10LnBsYWNlO288bjtvKysscysrKWk8PD04LGl8PWVbc10saT4+Pj0wO3JldHVybiEoaTw9MTI3KSYmKHQucGxhY2U9cyxpKX1mdW5jdGlvbiBmKGUpe2Zvcih2YXIgdD0wLHI9ZS5sZW5ndGgtMTshZVt0XSYmISgxMjgmZVt0KzFdKSYmdDxyOyl0Kys7cmV0dXJuIDA9PT10P2U6ZS5zbGljZSh0KX1mdW5jdGlvbiB1KGUsdCl7aWYodDwxMjgpZS5wdXNoKHQpO2Vsc2V7dmFyIHI9MSsoTWF0aC5sb2codCkvTWF0aC5MTjI+Pj4zKTtmb3IoZS5wdXNoKDEyOHxyKTstLXI7KWUucHVzaCh0Pj4+KHI8PDMpJjI1NSk7ZS5wdXNoKHQpfX1lLmV4cG9ydHM9cyxzLnByb3RvdHlwZS5faW1wb3J0REVSPWZ1bmN0aW9uKGUsdCl7ZT1pLnRvQXJyYXkoZSx0KTt2YXIgcj1uZXcgYTtpZig0OCE9PWVbci5wbGFjZSsrXSlyZXR1cm4hMTt2YXIgbz1jKGUscik7aWYoITE9PT1vKXJldHVybiExO2lmKG8rci5wbGFjZSE9PWUubGVuZ3RoKXJldHVybiExO2lmKDIhPT1lW3IucGxhY2UrK10pcmV0dXJuITE7dmFyIHM9YyhlLHIpO2lmKCExPT09cylyZXR1cm4hMTt2YXIgZj1lLnNsaWNlKHIucGxhY2UscytyLnBsYWNlKTtpZihyLnBsYWNlKz1zLDIhPT1lW3IucGxhY2UrK10pcmV0dXJuITE7dmFyIHU9YyhlLHIpO2lmKCExPT09dSlyZXR1cm4hMTtpZihlLmxlbmd0aCE9PXUrci5wbGFjZSlyZXR1cm4hMTt2YXIgZD1lLnNsaWNlKHIucGxhY2UsdStyLnBsYWNlKTtpZigwPT09ZlswXSl7aWYoISgxMjgmZlsxXSkpcmV0dXJuITE7Zj1mLnNsaWNlKDEpfWlmKDA9PT1kWzBdKXtpZighKDEyOCZkWzFdKSlyZXR1cm4hMTtkPWQuc2xpY2UoMSl9cmV0dXJuIHRoaXMucj1uZXcgbihmKSx0aGlzLnM9bmV3IG4oZCksdGhpcy5yZWNvdmVyeVBhcmFtPW51bGwsITB9LHMucHJvdG90eXBlLnRvREVSPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuci50b0FycmF5KCkscj10aGlzLnMudG9BcnJheSgpO2ZvcigxMjgmdFswXSYmKHQ9WzBdLmNvbmNhdCh0KSksMTI4JnJbMF0mJihyPVswXS5jb25jYXQocikpLHQ9Zih0KSxyPWYocik7IShyWzBdfHwxMjgmclsxXSk7KXI9ci5zbGljZSgxKTt2YXIgbj1bMl07dShuLHQubGVuZ3RoKSwobj1uLmNvbmNhdCh0KSkucHVzaCgyKSx1KG4sci5sZW5ndGgpO3ZhciBvPW4uY29uY2F0KHIpLHM9WzQ4XTtyZXR1cm4gdShzLG8ubGVuZ3RoKSxzPXMuY29uY2F0KG8pLGkuZW5jb2RlKHMsZSl9fSw1OTgwOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDM3MTUpLGk9cig1NDI3KSxvPXIoOTUzKSxzPW8uYXNzZXJ0LGE9by5wYXJzZUJ5dGVzLGM9cig5MDg3KSxmPXIoMzYyMik7ZnVuY3Rpb24gdShlKXtpZihzKFwiZWQyNTUxOVwiPT09ZSxcIm9ubHkgdGVzdGVkIHdpdGggZWQyNTUxOSBzbyBmYXJcIiksISh0aGlzIGluc3RhbmNlb2YgdSkpcmV0dXJuIG5ldyB1KGUpO2U9aVtlXS5jdXJ2ZSx0aGlzLmN1cnZlPWUsdGhpcy5nPWUuZyx0aGlzLmcucHJlY29tcHV0ZShlLm4uYml0TGVuZ3RoKCkrMSksdGhpcy5wb2ludENsYXNzPWUucG9pbnQoKS5jb25zdHJ1Y3Rvcix0aGlzLmVuY29kaW5nTGVuZ3RoPU1hdGguY2VpbChlLm4uYml0TGVuZ3RoKCkvOCksdGhpcy5oYXNoPW4uc2hhNTEyfWUuZXhwb3J0cz11LHUucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24oZSx0KXtlPWEoZSk7dmFyIHI9dGhpcy5rZXlGcm9tU2VjcmV0KHQpLG49dGhpcy5oYXNoSW50KHIubWVzc2FnZVByZWZpeCgpLGUpLGk9dGhpcy5nLm11bChuKSxvPXRoaXMuZW5jb2RlUG9pbnQoaSkscz10aGlzLmhhc2hJbnQobyxyLnB1YkJ5dGVzKCksZSkubXVsKHIucHJpdigpKSxjPW4uYWRkKHMpLnVtb2QodGhpcy5jdXJ2ZS5uKTtyZXR1cm4gdGhpcy5tYWtlU2lnbmF0dXJlKHtSOmksUzpjLFJlbmNvZGVkOm99KX0sdS5wcm90b3R5cGUudmVyaWZ5PWZ1bmN0aW9uKGUsdCxyKXtlPWEoZSksdD10aGlzLm1ha2VTaWduYXR1cmUodCk7dmFyIG49dGhpcy5rZXlGcm9tUHVibGljKHIpLGk9dGhpcy5oYXNoSW50KHQuUmVuY29kZWQoKSxuLnB1YkJ5dGVzKCksZSksbz10aGlzLmcubXVsKHQuUygpKTtyZXR1cm4gdC5SKCkuYWRkKG4ucHViKCkubXVsKGkpKS5lcShvKX0sdS5wcm90b3R5cGUuaGFzaEludD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmhhc2goKSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllLnVwZGF0ZShhcmd1bWVudHNbdF0pO3JldHVybiBvLmludEZyb21MRShlLmRpZ2VzdCgpKS51bW9kKHRoaXMuY3VydmUubil9LHUucHJvdG90eXBlLmtleUZyb21QdWJsaWM9ZnVuY3Rpb24oZSl7cmV0dXJuIGMuZnJvbVB1YmxpYyh0aGlzLGUpfSx1LnByb3RvdHlwZS5rZXlGcm9tU2VjcmV0PWZ1bmN0aW9uKGUpe3JldHVybiBjLmZyb21TZWNyZXQodGhpcyxlKX0sdS5wcm90b3R5cGUubWFrZVNpZ25hdHVyZT1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGY/ZTpuZXcgZih0aGlzLGUpfSx1LnByb3RvdHlwZS5lbmNvZGVQb2ludD1mdW5jdGlvbihlKXt2YXIgdD1lLmdldFkoKS50b0FycmF5KFwibGVcIix0aGlzLmVuY29kaW5nTGVuZ3RoKTtyZXR1cm4gdFt0aGlzLmVuY29kaW5nTGVuZ3RoLTFdfD1lLmdldFgoKS5pc09kZCgpPzEyODowLHR9LHUucHJvdG90eXBlLmRlY29kZVBvaW50PWZ1bmN0aW9uKGUpe3ZhciB0PShlPW8ucGFyc2VCeXRlcyhlKSkubGVuZ3RoLTEscj1lLnNsaWNlKDAsdCkuY29uY2F0KC0xMjkmZVt0XSksbj0wIT0oMTI4JmVbdF0pLGk9by5pbnRGcm9tTEUocik7cmV0dXJuIHRoaXMuY3VydmUucG9pbnRGcm9tWShpLG4pfSx1LnByb3RvdHlwZS5lbmNvZGVJbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9BcnJheShcImxlXCIsdGhpcy5lbmNvZGluZ0xlbmd0aCl9LHUucHJvdG90eXBlLmRlY29kZUludD1mdW5jdGlvbihlKXtyZXR1cm4gby5pbnRGcm9tTEUoZSl9LHUucHJvdG90eXBlLmlzUG9pbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0aGlzLnBvaW50Q2xhc3N9fSw5MDg3OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDk1MyksaT1uLmFzc2VydCxvPW4ucGFyc2VCeXRlcyxzPW4uY2FjaGVkUHJvcGVydHk7ZnVuY3Rpb24gYShlLHQpe3RoaXMuZWRkc2E9ZSx0aGlzLl9zZWNyZXQ9byh0LnNlY3JldCksZS5pc1BvaW50KHQucHViKT90aGlzLl9wdWI9dC5wdWI6dGhpcy5fcHViQnl0ZXM9byh0LnB1Yil9YS5mcm9tUHVibGljPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBhP3Q6bmV3IGEoZSx7cHViOnR9KX0sYS5mcm9tU2VjcmV0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBhP3Q6bmV3IGEoZSx7c2VjcmV0OnR9KX0sYS5wcm90b3R5cGUuc2VjcmV0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlY3JldH0scyhhLFwicHViQnl0ZXNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLnB1YigpKX0pKSxzKGEsXCJwdWJcIiwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHViQnl0ZXM/dGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLl9wdWJCeXRlcyk6dGhpcy5lZGRzYS5nLm11bCh0aGlzLnByaXYoKSl9KSkscyhhLFwicHJpdkJ5dGVzXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lZGRzYSx0PXRoaXMuaGFzaCgpLHI9ZS5lbmNvZGluZ0xlbmd0aC0xLG49dC5zbGljZSgwLGUuZW5jb2RpbmdMZW5ndGgpO3JldHVybiBuWzBdJj0yNDgsbltyXSY9MTI3LG5bcl18PTY0LG59KSkscyhhLFwicHJpdlwiLChmdW5jdGlvbigpe3JldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLnByaXZCeXRlcygpKX0pKSxzKGEsXCJoYXNoXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRkc2EuaGFzaCgpLnVwZGF0ZSh0aGlzLnNlY3JldCgpKS5kaWdlc3QoKX0pKSxzKGEsXCJtZXNzYWdlUHJlZml4XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzaCgpLnNsaWNlKHRoaXMuZWRkc2EuZW5jb2RpbmdMZW5ndGgpfSkpLGEucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcy5fc2VjcmV0LFwiS2V5UGFpciBjYW4gb25seSB2ZXJpZnlcIiksdGhpcy5lZGRzYS5zaWduKGUsdGhpcyl9LGEucHJvdG90eXBlLnZlcmlmeT1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVkZHNhLnZlcmlmeShlLHQsdGhpcyl9LGEucHJvdG90eXBlLmdldFNlY3JldD1mdW5jdGlvbihlKXtyZXR1cm4gaSh0aGlzLl9zZWNyZXQsXCJLZXlQYWlyIGlzIHB1YmxpYyBvbmx5XCIpLG4uZW5jb2RlKHRoaXMuc2VjcmV0KCksZSl9LGEucHJvdG90eXBlLmdldFB1YmxpYz1mdW5jdGlvbihlKXtyZXR1cm4gbi5lbmNvZGUodGhpcy5wdWJCeXRlcygpLGUpfSxlLmV4cG9ydHM9YX0sMzYyMjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzNTUwKSxpPXIoOTUzKSxvPWkuYXNzZXJ0LHM9aS5jYWNoZWRQcm9wZXJ0eSxhPWkucGFyc2VCeXRlcztmdW5jdGlvbiBjKGUsdCl7dGhpcy5lZGRzYT1lLFwib2JqZWN0XCIhPXR5cGVvZiB0JiYodD1hKHQpKSxBcnJheS5pc0FycmF5KHQpJiYodD17Ujp0LnNsaWNlKDAsZS5lbmNvZGluZ0xlbmd0aCksUzp0LnNsaWNlKGUuZW5jb2RpbmdMZW5ndGgpfSksbyh0LlImJnQuUyxcIlNpZ25hdHVyZSB3aXRob3V0IFIgb3IgU1wiKSxlLmlzUG9pbnQodC5SKSYmKHRoaXMuX1I9dC5SKSx0LlMgaW5zdGFuY2VvZiBuJiYodGhpcy5fUz10LlMpLHRoaXMuX1JlbmNvZGVkPUFycmF5LmlzQXJyYXkodC5SKT90LlI6dC5SZW5jb2RlZCx0aGlzLl9TZW5jb2RlZD1BcnJheS5pc0FycmF5KHQuUyk/dC5TOnQuU2VuY29kZWR9cyhjLFwiU1wiLChmdW5jdGlvbigpe3JldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLlNlbmNvZGVkKCkpfSkpLHMoYyxcIlJcIiwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLlJlbmNvZGVkKCkpfSkpLHMoYyxcIlJlbmNvZGVkXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5SKCkpfSkpLHMoYyxcIlNlbmNvZGVkXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlSW50KHRoaXMuUygpKX0pKSxjLnByb3RvdHlwZS50b0J5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuUmVuY29kZWQoKS5jb25jYXQodGhpcy5TZW5jb2RlZCgpKX0sYy5wcm90b3R5cGUudG9IZXg9ZnVuY3Rpb24oKXtyZXR1cm4gaS5lbmNvZGUodGhpcy50b0J5dGVzKCksXCJoZXhcIikudG9VcHBlckNhc2UoKX0sZS5leHBvcnRzPWN9LDEwMzc6ZT0+e2UuZXhwb3J0cz17ZG91Ymxlczp7c3RlcDo0LHBvaW50czpbW1wiZTYwZmNlOTNiNTllOWVjNTMwMTFhYWJjMjFjMjNlOTdiMmEzMTM2OWI4N2E1YWU5YzQ0ZWU4OWUyYTZkZWMwYVwiLFwiZjdlMzUwNzM5OWU1OTU5MjlkYjk5ZjM0ZjU3OTM3MTAxMjk2ODkxZTQ0ZDIzZjBiZTFmMzJjY2U2OTYxNjgyMVwiXSxbXCI4MjgyMjYzMjEyYzYwOWQ5ZWEyYTZlM2UxNzJkZTIzOGQ4YzM5Y2FiZDVhYzFjYTEwNjQ2ZTIzZmQ1ZjUxNTA4XCIsXCIxMWY4YTgwOTg1NTdkZmU0NWU4MjU2ZTgzMGI2MGFjZTYyZDYxM2FjMmY3YjE3YmVkMzFiNmVhZmY2ZTI2Y2FmXCJdLFtcIjE3NWUxNTlmNzI4Yjg2NWE3MmY5OWNjNmM2ZmM4NDZkZTBiOTM4MzNmZDIyMjJlZDczZmNlNWI1NTFlNWI3MzlcIixcImQzNTA2ZTBkOWUzYzc5ZWJhNGVmOTdhNTFmZjcxZjVlYWNiNTk1NWFkZDI0MzQ1YzZlZmE2ZmZlZTlmZWQ2OTVcIl0sW1wiMzYzZDkwZDQ0N2IwMGM5Yzk5Y2VhYzA1YjYyNjJlZTA1MzQ0MWM3ZTU1NTUyZmZlNTI2YmFkOGY4M2ZmNDY0MFwiLFwiNGUyNzNhZGZjNzMyMjIxOTUzYjQ0NTM5N2YzMzYzMTQ1YjlhODkwMDgxOTllY2I2MjAwM2M3ZjNiZWU5ZGU5XCJdLFtcIjhiNGI1ZjE2NWRmM2MyYmU4YzYyNDRiNWI3NDU2Mzg4NDNlNGE3ODFhMTViY2QxYjY5Zjc5YTU1ZGZmZGY4MGNcIixcIjRhYWQwYTZmNjhkMzA4YjRiM2ZiZDc4MTNhYjBkYTA0ZjllMzM2NTQ2MTYyZWU1NmIzZWZmMGM2NWZkNGZkMzZcIl0sW1wiNzIzY2JhYTZlNWRiOTk2ZDZiZjc3MWMwMGJkNTQ4YzdiNzAwZGJmZmE2YzBlNzdiY2I2MTE1OTI1MjMyZmNkYVwiLFwiOTZlODY3YjU1OTVjYzQ5OGE5MjExMzc0ODg4MjRkNmUyNjYwYTA2NTM3Nzk0OTQ4MDFkYzA2OWQ5ZWIzOWY1ZlwiXSxbXCJlZWJmYTRkNDkzYmViZjk4YmE1ZmVlYzgxMmMyZDNiNTA5NDc5NjEyMzdhOTE5ODM5YTUzM2VjYTBlN2RkN2ZhXCIsXCI1ZDlhOGNhMzk3MGVmMGYyNjllZTdlZGFmMTc4MDg5ZDlhZTRjZGMzYTcxMWY3MTJkZGZkNGZkYWUxZGU4OTk5XCJdLFtcIjEwMGY0NGRhNjk2ZTcxNjcyNzkxZDBhMDliN2JkZTQ1OWYxMjE1YTI5YjNjMDNiZmVmZDc4MzViMzlhNDhkYjBcIixcImNkZDllMTMxOTJhMDBiNzcyZWM4ZjMzMDBjMDkwNjY2YjdmZjRhMThmZjUxOTVhYzBmYmQ1Y2Q2MmJjNjVhMDlcIl0sW1wiZTEwMzFiZTI2MmM3ZWQxYjFkYzkyMjdhNGEwNGMwMTdhNzdmOGQ0NDY0ZjNiMzg1MmM4YWNkZTZlNTM0ZmQyZFwiLFwiOWQ3MDYxOTI4OTQwNDA1ZTZiYjZhNDE3NjU5NzUzNWFmMjkyZGQ0MTllMWNlZDc5YTQ0ZjE4ZjI5NDU2YTAwZFwiXSxbXCJmZWVhNmNhZTQ2ZDU1YjUzMGFjMjgzOWYxNDNiZDdlYzVjZjhiMjY2YTQxZDZhZjUyZDVlNjg4ZDkwOTQ2OTZkXCIsXCJlNTdjNmI2Yzk3ZGNlMWJhYjA2ZTRlMTJiZjNlY2Q1Yzk4MWM4OTU3Y2M0MTQ0MmQzMTU1ZGViZjE4MDkwMDg4XCJdLFtcImRhNjdhOTFkOTEwNDljZGNiMzY3YmU0YmU2ZmZjYTNjZmVlZDY1N2Q4MDg1ODNkZTMzZmE5NzhiYzFlYzZjYjFcIixcIjliYWNhYTM1NDgxNjQyYmM0MWY0NjNmN2VjOTc4MGU1ZGVjN2FkYzUwOGY3NDBhMTdlOWVhOGUyN2E2OGJlMWRcIl0sW1wiNTM5MDRmYWEwYjMzNGNkZGE2ZTAwMDkzNWVmMjIxNTFlYzA4ZDBmN2JiMTEwNjlmNTc1NDVjY2MxYTM3YjdjMFwiLFwiNWJjMDg3ZDBiYzgwMTA2ZDg4YzllY2NhYzIwZDNjMWMxMzk5OTk4MWUxNDQzNDY5OWRjYjA5NmIwMjI3NzFjOFwiXSxbXCI4ZTdiY2QwYmQzNTk4M2E3NzE5Y2NhNzc2NGNhOTA2Nzc5YjUzYTA0M2E5YjhiY2FlZmY5NTlmNDNhZDg2MDQ3XCIsXCIxMGI3NzcwYjJhM2RhNGIzOTQwMzEwNDIwY2E5NTE0NTc5ZTg4ZTJlNDdmZDY4YjNlYTEwMDQ3ZTg0NjAzNzJhXCJdLFtcIjM4NWVlZDM0YzFjZGZmMjFlNmQwODE4Njg5YjgxYmRlNzFhN2Y0ZjE4Mzk3ZTY2OTBhODQxZTE1OTljNDM4NjJcIixcIjI4M2JlYmMzZThlYTIzZjU2NzAxZGUxOWU5ZWJmNDU3NmIzMDRlZWMyMDg2ZGM4Y2MwNDU4ZmU1NTQyZTU0NTNcIl0sW1wiNmY5ZDliODAzZWNmMTkxNjM3YzczYTQ0MTNkZmExODBmZGRmODRhNTk0N2ZiYzljNjA2ZWQ4NmMzZmFjM2E3XCIsXCI3YzgwYzY4ZTYwMzA1OWJhNjliOGUyYTMwZTQ1YzRkNDdlYTRkZDJmNWMyODEwMDJkODY4OTA2MDNhODQyMTYwXCJdLFtcIjMzMjJkNDAxMjQzYzRlMjU4MmEyMTQ3YzEwNGQ2ZWNiZjc3NGQxNjNkYjBmNWU1MzEzYjdlMGU3NDJkMGU2YmRcIixcIjU2ZTcwNzk3ZTk2NjRlZjViZmIwMTliYzRkZGFmOWI3MjgwNWY2M2VhMjg3M2FmNjI0ZjNhMmU5NmMyOGIyYTBcIl0sW1wiODU2NzJjN2QyZGUwYjdkYTJiZDE3NzBkODk2NjU4Njg3NDFiM2Y5YWY3NjQzMzk3NzIxZDc0ZDI4MTM0YWI4M1wiLFwiN2M0ODFiOWI1YjQzYjJlYjYzNzQwNDliZmE2MmMyZTVlNzdmMTdmY2M1Mjk4ZjQ0YzhlMzA5NGY3OTAzMTNhNlwiXSxbXCI5NDhiZjgwOWIxOTg4YTQ2YjA2YzlmMTkxOTQxM2IxMGY5MjI2YzYwZjY2ODgzMmZmZDk1OWFmNjBjODJhMGFcIixcIjUzYTU2Mjg1NmRjYjY2NDZkYzZiNzRjNWQxYzM0MThjNmQ0ZGZmMDhjOTdjZDJiZWQ0Y2I3Zjg4ZDhjOGU1ODlcIl0sW1wiNjI2MGNlN2Y0NjE4MDFjMzRmMDY3Y2UwZjAyODczYThmMWIwZTQ0ZGZjNjk3NTJhY2NlY2Q4MTlmMzhmZDhlOFwiLFwiYmMyZGE4MmI2ZmE1YjU3MWE3ZjA5MDQ5Nzc2YTFlZjdlY2QyOTIyMzgwNTFjMTk4YzFhODRlOTViMmI0YWUxN1wiXSxbXCJlNTAzN2RlMGFmYzFkOGQ0M2Q4MzQ4NDE0YmJmNDEwMzA0M2VjOGY1NzViZmRjNDMyOTUzY2M4ZDIwMzdmYTJkXCIsXCI0NTcxNTM0YmFhOTRkM2I1ZjlmOThkMDlmYjk5MGJkZGJkNWY1YjAzZWM0ODFmMTBlMGU1ZGM4NDFkNzU1YmRhXCJdLFtcImUwNjM3MmIwZjRhMjA3YWRmNWVhOTA1ZThmMTc3MWI0ZTdlOGRiZDFjNmE2YzViNzI1ODY2YTBhZTRmY2U3MjVcIixcIjdhOTA4OTc0YmNlMThjZmUxMmEyN2JiMmFkNWE0ODhjZDc0ODRhNzc4NzEwNDg3MGIyNzAzNGY5NGVlZTMxZGRcIl0sW1wiMjEzYzdhNzE1Y2Q1ZDQ1MzU4ZDBiYmY5ZGMwY2UwMjIwNGIxMGJkZGUyYTNmNTg1NDBhZDY5MDhkMDU1OTc1NFwiLFwiNGI2ZGFkMGI1YWU0NjI1MDcwMTNhZDA2MjQ1YmExOTBiYjQ4NTBmNWYzNmE3ZWVkZGZmMmMyNzUzNGI0NThmMlwiXSxbXCI0ZTdjMjcyYTdhZjRiMzRlOGRiYjkzNTJhNTQxOWE4N2UyODM4YzcwYWRjNjJjZGRmMGNjM2EzYjA4ZmJkNTNjXCIsXCIxNzc0OWM3NjZjOWQwYjE4ZTE2ZmQwOWY2ZGVmNjgxYjUzMGI5NjE0YmZmN2RkMzNlMGIzOTQxODE3ZGNhYWU2XCJdLFtcImZlYTc0ZTNkYmU3NzhiMWIxMGYyMzhhZDYxNjg2YWE1Yzc2ZTNkYjJiZTQzMDU3NjMyNDI3ZTI4NDBmYjI3YjZcIixcIjZlMDU2OGRiOWIwYjEzMjk3Y2Y2NzRkZWNjYjZhZjkzMTI2YjU5NmI5NzNmN2I3NzcwMWQzZGI3ZjIzY2I5NmZcIl0sW1wiNzZlNjQxMTNmNjc3Y2YwZTEwYTI1NzBkNTk5OTY4ZDMxNTQ0ZTE3OWI3NjA0MzI5NTJjMDJhNDQxN2JkZGUzOVwiLFwiYzkwZGRmOGRlZTRlOTVjZjU3NzA2NmQ3MDY4MWYwZDM1ZTJhMzNkMmI1NmQyMDMyYjRiMTc1MmQxOTAxYWMwMVwiXSxbXCJjNzM4YzU2YjAzYjJhYmUxZTgyODFiYWE3NDNmOGY5YThmN2NjNjQzZGYyNmNiZWUzYWIxNTAyNDJiY2JiODkxXCIsXCI4OTNmYjU3ODk1MWFkMjUzN2Y3MThmMmVhY2JmYmJiYjgyMzE0ZWVmNzg4MGNmZTkxN2U3MzVkOTY5OWE4NGMzXCJdLFtcImQ4OTU2MjY1NDhiNjViODFlMjY0Yzc2MzdjOTcyODc3ZDFkNzJlNWYzYTkyNTAxNDM3MmU5ZjY1ODhmNmMxNGJcIixcImZlYmZhYTM4ZjJiYzdlYWU3MjhlYzYwODE4YzM0MGViMDM0MjhkNjMyYmIwNjdlMTc5MzYzZWQ3NWQ3ZDk5MWZcIl0sW1wiYjhkYTk0MDMyYTk1NzUxOGViMGY2NDMzNTcxZTg3NjFjZWZmYzczNjkzZTg0ZWRkNDkxNTBhNTY0ZjY3NmUwM1wiLFwiMjgwNGRmYTQ0ODA1YTFlNGQ3Yzk5Y2M5NzYyODA4YjA5MmNjNTg0ZDk1ZmYzYjUxMTQ4OGU0ZTc0ZWZkZjZlN1wiXSxbXCJlODBmZWExNDQ0MWZiMzNhN2Q4YWRhYjk0NzVkN2ZhYjIwMTllZmZiNTE1NmE3OTJmMWExMTc3OGUzYzBkZjVkXCIsXCJlZWQxZGU3ZjYzOGUwMDc3MWU4OTc2OGNhM2NhOTQ0NzJkMTU1ZTgwYWYzMjJlYTlmY2I0MjkxYjZhYzllYzc4XCJdLFtcImEzMDE2OTdiZGZjZDcwNDMxM2JhNDhlNTFkNTY3NTQzZjJhMTgyMDMxZWZkNjkxNWRkYzA3YmJjYzRlMTYwNzBcIixcIjczNzBmOTFjZmI2N2U0ZjUwODE4MDlmYTI1ZDQwZjliMTczNWRiZjdjMGExMWExMzBjMGQxYTA0MWUxNzdlYTFcIl0sW1wiOTBhZDg1YjM4OWQ2YjkzNjQ2M2Y5ZDA1MTI2NzhkZTIwOGNjMzMwYjExMzA3ZmZmYWI3YWM2M2UzZmIwNGVkNFwiLFwiZTUwN2EzNjIwYTM4MjYxYWZmZGNiZDk0MjcyMjJiODM5YWVmYWJlMTU4Mjg5NGQ5OTFkNGQ0OGNiNmVmMTUwXCJdLFtcIjhmNjhiOWQyZjYzYjVmMzM5MjM5YzFhZDk4MWYxNjJlZTg4YzU2Nzg3MjNlYTMzNTFiN2I0NDRjOWVjNGMwZGFcIixcIjY2MmE5ZjJkYmEwNjM5ODZkZTFkOTBjMmI2YmUyMTVkYmJlYTJjZmU5NTUxMGJmZGYyM2NiZjc5NTAxZmZmODJcIl0sW1wiZTRmM2ZiMDE3NmFmODVkNjVmZjk5ZmY5MTk4YzM2MDkxZjQ4ZTg2NTAzNjgxZTNlNjY4NmZkNTA1MzIzMWUxMVwiLFwiMWU2MzYzM2FkMGVmNGYxYzE2NjFhNmQwZWEwMmI3Mjg2Y2M3ZTc0ZWM5NTFkMWM5ODIyYzM4NTc2ZmViNzNiY1wiXSxbXCI4YzAwZmE5YjE4ZWJmMzMxZWI5NjE1MzdhNDVhNDI2NmM3MDM0ZjJmMGQ0ZTFkMDcxNmZiNmVhZTIwZWFlMjllXCIsXCJlZmE0NzI2N2ZlYTUyMWExYTlkYzM0M2EzNzM2Yzk3NGMyZmFkYWZhODFlMzZjNTRlN2QyYTRjNjY3MDI0MTRiXCJdLFtcImU3YTI2Y2U2OWRkNDgyOWYzZTEwY2VjMGE5ZTk4ZWQzMTQzZDA4NGYzMDhiOTJjMDk5N2ZkZGZjNjBjYjNlNDFcIixcIjJhNzU4ZTMwMGZhNzk4NGI0NzFiMDA2YTFhYWZiYjE4ZDBhNmIyYzA0MjBlODNlMjBlOGE5NDIxY2YyY2ZkNTFcIl0sW1wiYjY0NTllMGVlMzY2MmVjOGQyMzU0MGMyMjNiY2JkYzU3MWNiY2I5NjdkNzk0MjRmM2NmMjllYjNkZTZiODBlZlwiLFwiNjdjODc2ZDA2ZjNlMDZkZTFkYWRmMTZlNTY2MWRiM2M0YjNhZTZkNDhlMzViMmZmMzBiZjBiNjFhNzFiYTQ1XCJdLFtcImQ2OGE4MGM4MjgwYmI4NDA3OTMyMzRhYTExOGYwNjIzMWQ2ZjFmYzY3ZTczYzVhNWRlZGEwZjViNDk2OTQzZThcIixcImRiOGJhOWZmZjRiNTg2ZDAwYzRiMWY5MTc3YjBlMjhiNWIwZTdiOGY3ODQ1Mjk1YTI5NGM4NDI2NmIxMzMxMjBcIl0sW1wiMzI0YWVkN2RmNjVjODA0MjUyZGMwMjcwOTA3YTMwYjA5NjEyYWViOTczNDQ5Y2VhNDA5NTk4MGZjMjhkM2Q1ZFwiLFwiNjQ4YTM2NTc3NGI2MWYyZmYxMzBjMGMzNWFlYzFmNGYxOTIxM2IwYzdlMzMyODQzOTY3MjI0YWY5NmFiN2M4NFwiXSxbXCI0ZGY5YzE0OTE5Y2RlNjFmNmQ1MWRmZGJlNWZlZTVkY2VlYzQxNDNiYThkMWNhODg4ZThiZDM3M2ZkMDU0Yzk2XCIsXCIzNWVjNTEwOTJkODcyODA1MDk3NGMyM2ExZDg1ZDRiNWQ1MDZjZGMyODg0OTAxOTJlYmFjMDZjYWQxMGQ1ZFwiXSxbXCI5YzM5MTlhODRhNDc0ODcwZmFlZDhhOWMxY2M2NjAyMTUyMzQ4OTA1NGQ3ZjAzMDhjYmZjOTljOGFjMWY5OGNkXCIsXCJkZGI4NGYwZjRhNGRkZDU3NTg0ZjA0NGJmMjYwZTY0MTkwNTMyNmY3NmM2NGM4ZTZiZTdlNWUwM2Q0ZmM1OTlkXCJdLFtcIjYwNTcxNzBiMWRkMTJmZGY4ZGUwNWYyODFkOGUwNmJiOTFlMTQ5M2E4YjkxZDRjYzVhMjEzODIxMjBhOTU5ZTVcIixcIjlhMWFmMGIyNmE2YTQ4MDdhZGQ5YTJkYWY3MWRmMjYyNDY1MTUyYmMzZWUyNGM2NWU4OTliZTkzMjM4NWEyYThcIl0sW1wiYTU3NmRmOGUyM2EwODQxMTQyMTQzOWE0NTE4ZGEzMTg4MGNlZjBmYmE3ZDRkZjEyYjFhNjk3M2VlY2I5NDI2NlwiLFwiNDBhNmJmMjBlNzY2NDBiMmM5MmI5N2FmZTU4Y2Q4MmM0MzJlMTBhN2Y1MTRkOWYzZWU4YmUxMWFlMWIyOGVjOFwiXSxbXCI3Nzc4YTc4YzI4ZGVjM2UzMGEwNWZlOTYyOWRlOGMzOGJiMzBkMWY1Y2Y5YTNhMjA4Zjc2Mzg4OWJlNThhZDcxXCIsXCIzNDYyNmQ5YWI1YTViMjJmZjcwOThlMTJmMmZmNTgwMDg3YjM4NDExZmYyNGFjNTYzYjUxM2ZjMWZkOWY0M2FjXCJdLFtcIjkyODk1NWVlNjM3YTg0NDYzNzI5ZmQzMGU3YWZkMmVkNWY5NjI3NGU1YWQ3ZTVjYjA5ZWRhOWMwNmQ5MDNhY1wiLFwiYzI1NjIxMDAzZDNmNDJhODI3Yjc4YTEzMDkzYTk1ZWVhYzNkMjZlZmE4YThkODNmYzUxODBlOTM1YmNkMDkxZlwiXSxbXCI4NWQwZmVmM2VjNmRiMTA5Mzk5MDY0ZjNhMGUzYjI4NTU2NDViNGE5MDdhZDM1NDUyN2FhZTc1MTYzZDgyNzUxXCIsXCIxZjAzNjQ4NDEzYTM4YzBiZTI5ZDQ5NmU1ODJjZjU2NjNlODc1MWU5Njg3NzMzMTU4MmMyMzdhMjRlYjFmOTYyXCJdLFtcImZmMmIwZGNlOTdlZWNlOTdjMWM5YjYwNDE3OThiODVkZmRmYjZkODg4MmRhMjAzMDhmNTQwNDgyNDUyNjA4N2VcIixcIjQ5M2QxM2ZlZjUyNGJhMTg4YWY0YzRkYzU0ZDA3OTM2YzdiN2VkNmZiOTBlMmNlYjJjOTUxZTAxZjBjMjk5MDdcIl0sW1wiODI3ZmJiZTRiMWU4ODBlYTllZDJiMmU2MzAxYjIxMmI1N2YxZWUxNDhjZDZkZDI4NzgwZTVlMmNmODU2ZTI0MVwiLFwiYzYwZjljOTIzYzcyN2IwYjcxYmVmMmM2N2QxZDEyNjg3ZmY3YTYzMTg2OTAzMTY2ZDYwNWI2OGJhZWMyOTNlY1wiXSxbXCJlYWE2NDlmMjFmNTFiZGJhZTdiZTRhZTM0Y2U2ZTUyMTdhNThmZGNlN2Y0N2Y5YWE3ZjNiNThmYTIxMjBlMmIzXCIsXCJiZTMyNzllZDViYmJiMDNhYzY5YTgwZjg5ODc5YWE1YTAxYTZiOTY1ZjEzZjdlNTlkNDdhNTMwNWJhNWFkOTNkXCJdLFtcImU0YTQyZDQzYzVjZjE2OWQ5MzkxZGY2ZGVjZjQyZWU1NDFiNmQ4ZjBjOWExMzc0MDFlMjM2MzJkZGEzNGQyNGZcIixcIjRkOWY5MmU3MTZkMWM3MzUyNmZjOTljY2ZiOGFkMzRjZTg4NmVlZGZhOGQ4ZTRmMTNhN2Y3MTMxZGViYTk0MTRcIl0sW1wiMWVjODBmZWYzNjBjYmRkOTU0MTYwZmFkYWIzNTJiNmI5MmI1MzU3NmE4OGZlYTQ5NDcxNzNiOWQ0MzAwYmYxOVwiLFwiYWVlZmU5Mzc1NmI1MzQwZDJmM2E0OTU4YTdhYmJmNWUwMTQ2ZTc3ZjYyOTVhMDdiNjcxY2RjMWNjMTA3Y2VmZFwiXSxbXCIxNDZhNzc4YzA0NjcwYzJmOTFiMDBhZjQ2ODBkZmE4YmNlMzQ5MDcxN2Q1OGJhODg5ZGRiNTkyODM2NjY0MmJlXCIsXCJiMzE4ZTBlYzMzNTQwMjhhZGQ2Njk4MjdmOWQ0YjI4NzBhYWE5NzFkMmY3ZTVlZDFkMGIyOTc0ODNkODNlZmQwXCJdLFtcImZhNTBjMGY2MWQyMmU1ZjA3ZTNhY2ViYjFhYTA3YjEyOGQwMDEyMjA5YTI4Yjk3NzZkNzZhODc5MzE4MGVlZjlcIixcIjZiODRjNjkyMjM5N2ViYTliNzJjZDI4NzIyODFhNjhhNWU2ODMyOTNhNTdhMjEzYjM4Y2Q4ZDdkM2Y0ZjI4MTFcIl0sW1wiZGExZDYxZDBjYTcyMWExMWIxYTViZjZiN2Q4OGU4NDIxYTI4OGFiNWQ1YmJhNTIyMGU1M2QzMmI1ZjA2N2VjMlwiLFwiODE1N2Y1NWE3Yzk5MzA2Yzc5YzA3NjYxNjFjOTFlMjk2NmE3Mzg5OWQyNzliNDhhNjU1ZmJhMGYxYWQ4MzZmMVwiXSxbXCJhOGUyODJmZjBjOTcwNjkwNzIxNWZmOThlOGZkNDE2NjE1MzExZGUwNDQ2ZjFlMDYyYTczYjA2MTBkMDY0ZTEzXCIsXCI3Zjk3MzU1YjhkYjgxYzA5YWJmYjdmM2M1YjI1MTU4ODhiNjc5YTNlNTBkZDZiZDZjZWY3YzczMTExZjRjYzBjXCJdLFtcIjE3NGE1M2I5YzlhMjg1ODcyZDM5ZTU2ZTY5MTNjYWIxNWQ1OWIxZmE1MTI1MDhjMDIyZjM4MmRlODMxOTQ5N2NcIixcImNjYzlkYzM3YWJmYzljMTY1N2I0MTU1ZjJjNDdmOWU2NjQ2YjNhMWQ4Y2I5ODU0MzgzZGExM2FjMDc5YWZhNzNcIl0sW1wiOTU5Mzk2OTgxOTQzNzg1YzNkM2U1N2VkZjUwMThjZGJlMDM5ZTczMGU0OTE4YjNkODg0ZmRmZjA5NDc1YjdiYVwiLFwiMmU3ZTU1Mjg4OGMzMzFkZDhiYTAzODZhNGI5Y2Q2ODQ5YzY1M2Y2NGM4NzA5Mzg1ZTliOGFiZjg3NTI0ZjJmZFwiXSxbXCJkMmE2M2E1MGFlNDAxZTU2ZDY0NWExMTUzYjEwOWE4ZmNjYTBhNDNkNTYxZmJhMmRiYjUxMzQwYzlkODJiMTUxXCIsXCJlODJkODZmYjY0NDNmY2I3NTY1YWVlNThiMjk0ODIyMGE3MGY3NTBhZjQ4NGNhNTJkNDE0MjE3NGRjZjg5NDA1XCJdLFtcIjY0NTg3ZTIzMzU0NzFlYjg5MGVlNzg5NmQ3Y2ZkYzg2NmJhY2JkYmQzODM5MzE3YjM0MzZmOWI0NTYxN2UwNzNcIixcImQ5OWZjZGQ1YmY2OTAyZTJhZTk2ZGQ2NDQ3YzI5OWExODViOTBhMzkxMzNhZWFiMzU4Mjk5ZTVlOWZhZjY1ODlcIl0sW1wiODQ4MWJkZTBlNGU0ZDg4NWIzYTU0NmQzZTU0OWRlMDQyZjBhYTZjZWEyNTBlN2ZkMzU4ZDZjODZkZDQ1ZTQ1OFwiLFwiMzhlZTdiOGNiYTU0MDRkZDg0YTI1YmYzOWNlY2IyY2E5MDBhNzljNDJiMjYyZTU1NmQ2NGIxYjU5Nzc5MDU3ZVwiXSxbXCIxMzQ2NGE1N2E3ODEwMmFhNjJiNjk3OWFlODE3ZjQ2MzdmZmNmZWQzYzRiMWNlMzBiY2Q2MzAzZjZjYWY2NjZiXCIsXCI2OWJlMTU5MDA0NjE0NTgwZWY3ZTQzMzQ1M2NjYjBjYTQ4ZjMwMGE4MWQwOTQyZTEzZjQ5NWE5MDdmNmVjYzI3XCJdLFtcImJjNGE5ZGY1YjcxM2ZlMmU5YWVmNDMwYmNjMWRjOTdhMGNkOWNjZWRlMmYyODU4OGNhZGEzYTBkMmQ4M2YzNjZcIixcImQzYTgxY2E2ZTc4NWMwNjM4MzkzN2FkZjRiNzk4Y2FhNmU4YTlmYmZhNTQ3YjE2ZDc1OGQ2NjY1ODFmMzNjMVwiXSxbXCI4YzI4YTk3YmY4Mjk4YmMwZDIzZDhjNzQ5NDUyYTMyZTY5NGI2NWUzMGE5NDcyYTM5NTRhYjMwZmU1MzI0Y2FhXCIsXCI0MGEzMDQ2M2EzMzA1MTkzMzc4ZmVkZjMxZjdjYzBlYjdhZTc4NGYwNDUxY2I5NDU5ZTcxZGM3M2NiZWY5NDgyXCJdLFtcIjhlYTk2NjYxMzk1MjdhOGMxZGQ5NGNlNGYwNzFmZDIzYzhiMzUwYzVhNGJiMzM3NDhjNGJhMTExZmFjY2FlMFwiLFwiNjIwZWZhYmJjOGVlMjc4MmUyNGU3YzBjZmI5NWM1ZDczNWI3ODNiZTljZjBmOGU5NTVhZjM0YTMwZTYyYjk0NVwiXSxbXCJkZDM2MjVmYWVmNWJhMDYwNzQ2Njk3MTZiYmQzNzg4ZDg5YmRkZTgxNTk1OTk2ODA5MmY3NmNjNGViOWE5Nzg3XCIsXCI3YTE4OGZhMzUyMGUzMGQ0NjFkYTI1MDEwNDU3MzFjYTk0MTQ2MTk4Mjg4MzM5NTkzN2Y2OGQwMGM2NDRhNTczXCJdLFtcImY3MTBkNzlkOWViOTYyMjk3ZTRmNjIzMmI0MGU4ZjdmZWIyYmM2MzgxNDYxNGQ2OTJjMTJkZTc1MjQwODIyMWVcIixcImVhOThlNjcyMzJkM2IzMjk1ZDNiNTM1NTMyMTE1Y2NhYzg2MTJjNzIxODUxNjE3NTI2YWU0N2E5Yzc3YmZjODJcIl1dfSxuYWY6e3duZDo3LHBvaW50czpbW1wiZjkzMDhhMDE5MjU4YzMxMDQ5MzQ0Zjg1Zjg5ZDUyMjliNTMxYzg0NTgzNmY5OWIwODYwMWYxMTNiY2UwMzZmOVwiLFwiMzg4ZjdiMGY2MzJkZTgxNDBmZTMzN2U2MmEzN2YzNTY2NTAwYTk5OTM0YzIyMzFiNmNiOWZkNzU4NGI4ZTY3MlwiXSxbXCIyZjhiZGU0ZDFhMDcyMDkzNTViNGE3MjUwYTVjNTEyOGU4OGI4NGJkZGM2MTlhYjdjYmE4ZDU2OWIyNDBlZmU0XCIsXCJkOGFjMjIyNjM2ZTVlM2Q2ZDRkYmE5ZGRhNmM5YzQyNmY3ODgyNzFiYWIwZDY4NDBkY2E4N2QzYWE2YWM2MmQ2XCJdLFtcIjVjYmRmMDY0NmU1ZGI0ZWFhMzk4ZjM2NWYyZWE3YTBlM2Q0MTliN2UwMzMwZTM5Y2U5MmJkZGVkY2FjNGY5YmNcIixcIjZhZWJjYTQwYmEyNTU5NjBhMzE3OGQ2ZDg2MWE1NGRiYTgxM2QwYjgxM2ZkZTdiNWE1MDgyNjI4MDg3MjY0ZGFcIl0sW1wiYWNkNDg0ZTJmMGM3ZjY1MzA5YWQxNzhhOWY1NTlhYmRlMDk3OTY5NzRjNTdlNzE0YzM1ZjExMGRmYzI3Y2NiZVwiLFwiY2MzMzg5MjFiMGE3ZDlmZDY0MzgwOTcxNzYzYjYxZTlhZGQ4ODhhNDM3NWY4ZTBmMDVjYzI2MmFjNjRmOWMzN1wiXSxbXCI3NzRhZTdmODU4YTk0MTFlNWVmNDI0NmI3MGM2NWFhYzU2NDk5ODBiZTVjMTc4OTFiYmVjMTc4OTVkYTAwOGNiXCIsXCJkOTg0YTAzMmViNmI1ZTE5MDI0M2RkNTZkN2I3YjM2NTM3MmRiMWUyZGZmOWQ2YTgzMDFkNzRjOWM5NTNjNjFiXCJdLFtcImYyODc3M2MyZDk3NTI4OGJjN2QxZDIwNWMzNzQ4NjUxYjA3NWZiYzY2MTBlNThjZGRlZWRkZjhmMTk0MDVhYThcIixcImFiMDkwMmU4ZDg4MGE4OTc1ODIxMmViNjVjZGFmNDczYTFhMDZkYTUyMWZhOTFmMjliNWNiNTJkYjAzZWQ4MVwiXSxbXCJkNzkyNGQ0ZjdkNDNlYTk2NWE0NjVhZTMwOTVmZjQxMTMxZTU5NDZmM2M4NWY3OWU0NGFkYmNmOGUyN2UwODBlXCIsXCI1ODFlMjg3MmE4NmM3MmE2ODM4NDJlYzIyOGNjNmRlZmVhNDBhZjJiZDg5NmQzYTVjNTA0ZGM5ZmY2YTI2YjU4XCJdLFtcImRlZmRlYTRjZGI2Nzc3NTBhNDIwZmVlODA3ZWFjZjIxZWI5ODk4YWU3OWI5NzY4NzY2ZTRmYWEwNGEyZDRhMzRcIixcIjQyMTFhYjA2OTQ2MzUxNjhlOTk3YjBlYWQyYTkzZGFlY2VkMWY0YTA0YTk1YzBmNmNmYjE5OWY2OWU1NmViNzdcIl0sW1wiMmI0ZWEwYTc5N2E0NDNkMjkzZWY1Y2ZmNDQ0ZjQ5NzlmMDZhY2ZlYmQ3ZTg2ZDI3NzQ3NTY1NjEzODM4NWI2Y1wiLFwiODVlODliYzAzNzk0NWQ5M2IzNDMwODNiNWExYzg2MTMxYTAxZjYwYzUwMjY5NzYzYjU3MGM4NTRlNWMwOWI3YVwiXSxbXCIzNTJiYmY0YTRjZGQxMjU2NGY5M2ZhMzMyY2UzMzMzMDFkOWFkNDAyNzFmODEwNzE4MTM0MGFlZjI1YmU1OWQ1XCIsXCIzMjFlYjQwNzUzNDhmNTM0ZDU5YzE4MjU5ZGRhM2UxZjRhMWIzYjJlNzFiMTAzOWM2N2JkM2Q4YmNmODE5OThjXCJdLFtcIjJmYTIxMDRkNmIzOGQxMWIwMjMwMDEwNTU5ODc5MTI0ZTQyYWI4ZGZlZmY1ZmYyOWRjOWNkYWRkNGVjYWNjM2ZcIixcIjJkZTEwNjgyOTVkZDg2NWI2NDU2OTMzNWJkNWRkODAxODFkNzBlY2ZjODgyNjQ4NDIzYmE3NmI1MzJiN2Q2N1wiXSxbXCI5MjQ4Mjc5YjA5YjRkNjhkYWIyMWE5YjA2NmVkZGE4MzI2M2MzZDg0ZTA5NTcyZTI2OWNhMGNkN2Y1NDUzNzE0XCIsXCI3MzAxNmY3YmYyMzRhYWRlNWQxYWE3MWJkZWEyYjFmZjNmYzBkZTJhODg3OTEyZmZlNTRhMzJjZTk3Y2IzNDAyXCJdLFtcImRhZWQ0ZjJiZTNhOGJmMjc4ZTcwMTMyZmIwYmViNzUyMmY1NzBlMTQ0YmY2MTVjMDdlOTk2ZDQ0M2RlZTg3MjlcIixcImE2OWRjZTRhN2Q2Yzk4ZThkNGExYWNhODdlZjhkNzAwM2Y4M2MyMzBmM2FmYTcyNmFiNDBlNTIyOTBiZTFjNTVcIl0sW1wiYzQ0ZDEyYzcwNjVkODEyZThhY2YyOGQ3Y2JiMTlmOTAxMWVjZDllOWZkZjI4MWIwZTZhM2I1ZTg3ZDIyZTdkYlwiLFwiMjExOWE0NjBjZTMyNmNkYzc2YzQ1OTI2Yzk4MmZkYWMwZTEwNmU4NjFlZGY2MWM1YTAzOTA2M2YwZTBlNjQ4MlwiXSxbXCI2YTI0NWJmNmRjNjk4NTA0Yzg5YTIwY2ZkZWQ2MDg1MzE1MmI2OTUzMzZjMjgwNjNiNjFjNjVjYmQyNjllNmI0XCIsXCJlMDIyY2Y0MmMyYmQ0YTcwOGIzZjUxMjZmMTZhMjRhZDhiMzNiYTQ4ZDA0MjNiNmVmZDVlNjM0ODEwMGQ4YTgyXCJdLFtcIjE2OTdmZmE2ZmQ5ZGU2MjdjMDc3ZTNkMmZlNTQxMDg0Y2UxMzMwMGIwYmVjMTE0NmY5NWFlNTdmMGQwYmQ2YTVcIixcImI5YzM5OGYxODY4MDZmNWQyNzU2MTUwNmU0NTU3NDMzYTJjZjE1MDA5ZTQ5OGFlN2FkZWU5ZDYzZDAxYjIzOTZcIl0sW1wiNjA1YmRiMDE5OTgxNzE4Yjk4NmQwZjA3ZTgzNGNiMGQ5ZGViODM2MGZmYjdmNjFkZjk4MjM0NWVmMjdhNzQ3OVwiLFwiMjk3MmQyZGU0ZjhkMjA2ODFhNzhkOTNlYzk2ZmUyM2MyNmJmYWU4NGZiMTRkYjQzYjAxZTFlOTA1NmI4YzQ5XCJdLFtcIjYyZDE0ZGFiNDE1MGJmNDk3NDAyZmRjNDVhMjE1ZTEwZGNiMDFjMzU0OTU5YjEwY2ZlMzFjN2U5ZDg3ZmYzM2RcIixcIjgwZmMwNmJkOGNjNWIwMTA5ODA4OGExOTUwZWVkMGRiMDFhYTEzMjk2N2FiNDcyMjM1ZjU2NDI0ODNiMjVlYWZcIl0sW1wiODBjNjBhZDAwNDBmMjdkYWRlNWI0YjA2YzQwOGU1NmIyYzUwZTlmNTZiOWI4YjQyNWU1NTVjMmY4NjMwOGI2ZlwiLFwiMWMzODMwM2YxY2M1YzMwZjI2ZTY2YmFkN2ZlNzJmNzBhNjVlZWQ0Y2JlNzAyNGViMWFhMDFmNTY0MzBiZDU3YVwiXSxbXCI3YTkzNzVhZDYxNjdhZDU0YWE3NGM2MzQ4Y2M1NGQzNDRjYzVkYzk0ODdkODQ3MDQ5ZDVlYWJiMGZhMDNjOGZiXCIsXCJkMGUzZmE5ZWNhODcyNjkwOTU1OWUwZDc5MjY5MDQ2YmRjNTllYTEwYzcwY2UyYjAyZDQ5OWVjMjI0ZGM3ZjdcIl0sW1wiZDUyOGVjZDliNjk2YjU0YzkwN2E5ZWQwNDU0NDdhNzliYjQwOGVjMzliNjhkZjUwNGJiNTFmNDU5YmMzZmZjOVwiLFwiZWVjZjQxMjUzMTM2ZTVmOTk5NjZmMjE4ODFmZDY1NmViYzQzNDU0MDVjNTIwZGJjMDYzNDY1YjUyMTQwOTkzM1wiXSxbXCI0OTM3MGE0YjVmNDM0MTJlYTI1ZjUxNGU4ZWNkYWQwNTI2NjExNWU0YTdlY2IxMzg3MjMxODA4ZjhiNDU5NjNcIixcIjc1OGYzZjQxYWZkNmVkNDI4YjMwODFiMDUxMmZkNjJhNTRjM2YzYWZiYjViNjc2NGI2NTMwNTJhMTI5NDljOWFcIl0sW1wiNzdmMjMwOTM2ZWU4OGNiYmQ3M2RmOTMwZDY0NzAyZWY4ODFkODExZTBlMTQ5OGUyZjFjMTNlYjFmYzM0NWQ3NFwiLFwiOTU4ZWY0MmE3ODg2YjY0MDBhMDgyNjZlOWJhMWIzNzg5NmM5NTMzMGQ5NzA3N2NiYmU4ZWIzYzc2NzFjNjBkNlwiXSxbXCJmMmRhYzk5MWNjNGNlNGI5ZWE0NDg4N2U1YzdjMGJjZTU4YzgwMDc0YWI5ZDRkYmFlYjI4NTMxYjc3MzlmNTMwXCIsXCJlMGRlZGM5YjNiMmY4ZGFkNGRhMWYzMmRlYzI1MzFkZjllYjVmYmViMDU5OGU0ZmQxYTExN2RiYTcwM2EzYzM3XCJdLFtcIjQ2M2IzZDlmNjYyNjIxZmIxYjRiZThmYmJlMjUyMDEyNWEyMTZjZGZjOWRhZTNkZWJjYmE0ODUwYzY5MGQ0NWJcIixcIjVlZDQzMGQ3OGMyOTZjMzU0MzExNDMwNmRkODYyMmQ3YzYyMmUyN2M5NzBhMWRlMzFjYjM3N2IwMWFmNzMwN2VcIl0sW1wiZjE2ZjgwNDI0NGU0NmUyYTA5MjMyZDRhZmYzYjU5OTc2Yjk4ZmFjMTQzMjhhMmQxYTMyNDk2YjQ5OTk4ZjI0N1wiLFwiY2VkYWJkOWI4MjIwM2Y3ZTEzZDIwNmZjZGY0ZTMzZDkyYTZjNTNjMjZlNWNjZTI2ZDY1Nzk5NjJjNGUzMWRmNlwiXSxbXCJjYWY3NTQyNzJkYzg0NTYzYjAzNTJiN2ExNDMxMWFmNTVkMjQ1MzE1YWNlMjdjNjUzNjllMTVmNzE1MWQ0MWQxXCIsXCJjYjQ3NDY2MGVmMzVmNWYyYTQxYjY0M2ZhNWU0NjA1NzVmNGZhOWI3OTYyMjMyYTVjMzJmOTA4MzE4YTA0NDc2XCJdLFtcIjI2MDBjYTRiMjgyY2I5ODZmODVkMGYxNzA5OTc5ZDhiNDRhMDljMDdjYjg2ZDdjMTI0NDk3YmM4NmYwODIxMjBcIixcIjQxMTliODg3NTNjMTViZDZhNjkzYjAzZmNkZGJiNDVkNWFjNmJlNzRhYjVmMGVmNDRiMGJlOTQ3NWE3ZTRiNDBcIl0sW1wiNzYzNWNhNzJkN2U4NDMyYzMzOGVjNTNjZDEyMjIwYmMwMWM0ODY4NWUyNGY3ZGM4YzYwMmE3NzQ2OTk4ZTQzNVwiLFwiOTFiNjQ5NjA5NDg5ZDYxM2QxZDVlNTkwZjc4ZTZkNzRlY2ZjMDYxZDU3MDQ4YmFkOWU3NmYzMDJjNWI5YzYxXCJdLFtcIjc1NGUzMjM5ZjMyNTU3MGNkYmJmNGE4N2RlZWU4YTY2YjdmMmIzMzQ3OWQ0NjhmYmMxYTUwNzQzYmY1NmNjMThcIixcIjY3M2ZiODZlNWJkYTMwZmIzY2QwZWQzMDRlYTQ5YTAyM2VlMzNkMDE5N2E2OTVkMGM1ZDk4MDkzYzUzNjY4M1wiXSxbXCJlM2U2YmQxMDcxYTFlOTZhZmY1Nzg1OWM4MmQ1NzBmMDMzMDgwMDY2MWQxYzk1MmY5ZmUyNjk0NjkxZDliOWU4XCIsXCI1OWM5ZTBiYmEzOTRlNzZmNDBjMGFhNTgzNzlhM2NiNmE1YTIyODM5OTNlOTBjNDE2NzAwMmFmNDkyMGUzN2Y1XCJdLFtcIjE4NmI0ODNkMDU2YTAzMzgyNmFlNzNkODhmNzMyOTg1YzRjY2IxZjMyYmEzNWY0YjRjYzQ3ZmRjZjA0YWE2ZWJcIixcIjNiOTUyZDMyYzY3Y2Y3N2UyZTE3NDQ2ZTIwNDE4MGFiMjFmYjgwOTA4OTUxMzhiNGE0YTc5N2Y4NmU4MDg4OGJcIl0sW1wiZGY5ZDcwYTZiOTg3NmNlNTQ0Yzk4NTYxZjRiZTRmNzI1NDQyZTZkMmI3MzdkOWM5MWE4MzIxNzI0Y2UwOTYzZlwiLFwiNTVlYjJkYWZkODRkNmNjZDVmODYyYjc4NWRjMzlkNGFiMTU3MjIyNzIwZWY5ZGEyMTdiOGM0NWNmMmJhMjQxN1wiXSxbXCI1ZWRkNWNjMjNjNTFlODdhNDk3Y2E4MTVkNWRjZTBmOGFiNTI1NTRmODQ5ZWQ4OTk1ZGU2NGM1ZjM0Y2U3MTQzXCIsXCJlZmFlOWM4ZGJjMTQxMzA2NjFlOGNlYzAzMGM4OWFkMGMxM2M2NmMwZDE3YTI5MDVjZGM3MDZhYjczOTlhODY4XCJdLFtcIjI5MDc5OGMyYjY0NzY4MzBkYTEyZmUwMjI4N2U5ZTc3N2FhM2ZiYTFjMzU1YjE3YTcyMmQzNjJmODQ2MTRmYmFcIixcImUzOGRhNzZkY2Q0NDA2MjE5ODhkMDBiY2Y3OWFmMjVkNWIyOWMwOTRkYjJhMjMxNDZkMDAzYWZkNDE5NDNlN2FcIl0sW1wiYWYzYzQyM2E5NWQ5ZjViMzA1NDc1NGVmYTE1MGFjMzljZDI5NTUyZmUzNjAyNTczNjJkZmRlY2VmNDA1M2I0NVwiLFwiZjk4YTNmZDgzMWViMmI3NDlhOTNiMGU2ZjM1Y2ZiNDBjOGNkNWFhNjY3YTE1NTgxYmMyZmVkZWQ0OThmZDljNlwiXSxbXCI3NjZkYmIyNGQxMzRlNzQ1Y2NjYWEyOGM5OWJmMjc0OTA2YmI2NmIyNmRjZjk4ZGY4ZDJmZWQ1MGQ4ODQyNDlhXCIsXCI3NDRiMTE1MmVhY2JlNWUzOGRjYzg4Nzk4MGRhMzhiODk3NTg0YTY1ZmEwNmNlZGQyYzkyNGY5N2NiYWM1OTk2XCJdLFtcIjU5ZGJmNDZmOGM5NDc1OWJhMjEyNzdjMzM3ODRmNDE2NDVmN2I0NGY2YzU5NmE1OGNlOTJlNjY2MTkxYWJlM2VcIixcImM1MzRhZDQ0MTc1ZmJjMzAwZjRlYTZjZTY0ODMwOWEwNDJjZTczOWE3OTE5Nzk4Y2Q4NWUyMTZjNGEzMDdmNmVcIl0sW1wiZjEzYWRhOTUxMDNjNDUzNzMwNWU2OTFlNzRlOWE0YThkZDY0N2U3MTFhOTVlNzNjYjYyZGM2MDE4Y2ZkODdiOFwiLFwiZTEzODE3YjQ0ZWUxNGRlNjYzYmY0YmM4MDgzNDFmMzI2OTQ5ZTIxYTZhNzVjMjU3MDc3ODQxOWJkYWY1NzMzZFwiXSxbXCI3NzU0YjRmYTBlOGFjZWQwNmQ0MTY3YTJjNTljY2E0Y2RhMTg2OWMwNmViYWRmYjY0ODg1NTAwMTVhODg1MjJjXCIsXCIzMGU5M2U4NjRlNjY5ZDgyMjI0Yjk2N2MzMDIwYjhmYThkMWU0ZTM1MGI2Y2JjYzUzN2E0OGI1Nzg0MTE2M2EyXCJdLFtcIjk0OGRjYWRmNTk5MGUwNDhhYTM4NzRkNDZhYmVmOWQ3MDE4NThmOTVkZTgwNDFkMmE2ODI4Yzk5ZTIyNjI1MTlcIixcImU0OTFhNDI1MzdmNmU1OTdkNWQyOGEzMjI0YjFiYzI1ZGY5MTU0ZWZiZDJlZjFkMmNiYmEyY2FlNTM0N2Q1N2VcIl0sW1wiNzk2MjQxNDQ1MGM3NmMxNjg5YzdiNDhmODIwMmVjMzdmYjIyNGNmNWFjMGJmYTE1NzAzMjhhOGEzZDdjNzdhYlwiLFwiMTAwYjYxMGVjNGZmYjQ3NjBkNWMxZmMxMzNlZjZmNmIxMjUwN2EwNTFmMDRhYzU3NjBhZmE1YjI5ZGI4MzQzN1wiXSxbXCIzNTE0MDg3ODM0OTY0YjU0YjE1YjE2MDY0NGQ5MTU0ODVhMTY5NzcyMjViODg0N2JiMGRkMDg1MTM3ZWM0N2NhXCIsXCJlZjBhZmJiMjA1NjIwNTQ0OGUxNjUyYzQ4ZTgxMjdmYzYwMzllNzdjMTVjMjM3OGI3ZTdkMTVhMGRlMjkzMzExXCJdLFtcImQzY2MzMGFkNmI0ODNlNGJjNzljZTJjOWRkOGJjNTQ5OTNlOTQ3ZWI4ZGY3ODdiNDQyOTQzZDNmN2I1MjdlYWZcIixcIjhiMzc4YTIyZDgyNzI3OGQ4OWM1ZTliZThmOTUwOGFlM2MyYWQ0NjI5MDM1ODYzMGFmYjM0ZGIwNGVlZGUwYTRcIl0sW1wiMTYyNGQ4NDc4MDczMjg2MGNlMWM3OGZjYmZlZmUwOGIyYjI5ODIzZGI5MTNmNjQ5Mzk3NWJhMGZmNDg0NzYxMFwiLFwiNjg2NTFjZjliNmRhOTAzZTA5MTQ0NDhjNmNkOWQ0Y2E4OTY4NzhmNTI4MmJlNGM4Y2MwNmUyYTQwNDA3ODU3NVwiXSxbXCI3MzNjZTgwZGE5NTVhOGEyNjkwMmM5NTYzM2U2MmE5ODUxOTI0NzRiNWFmMjA3ZGE2ZGY3YjRmZDVmYzYxY2Q0XCIsXCJmNTQzNWEyYmQyYmFkZjdkNDg1YTRkOGI4ZGI5ZmNjZTNlMWVmOGUwMjAxZTQ1NzhjNTQ2NzNiYzFkYzVlYTFkXCJdLFtcIjE1ZDk0NDEyNTQ5NDUwNjRjZjFhMWMzM2JiZDNiNDlmODk2NmM1MDkyMTcxZTY5OWVmMjU4ZGZhYjgxYzA0NWNcIixcImQ1NmViMzBiNjk0NjNlNzIzNGY1MTM3YjczYjg0MTc3NDM0ODAwYmFjZWJmYzY4NWZjMzdiYmU5ZWZlNDA3MGRcIl0sW1wiYTFkMGZjZjJlYzlkZTY3NWI2MTIxMzZlNWNlNzBkMjcxYzIxNDE3YzlkMmI4YWFhYWMxMzg1OTlkMDcxNzk0MFwiLFwiZWRkNzdmNTBiY2I1YTNjYWIyZTkwNzM3MzA5NjY3ZjI2NDE0NjJhNTQwNzBmM2Q1MTkyMTJkMzljMTk3YTYyOVwiXSxbXCJlMjJmYmUxNWMwYWY4Y2NjNTc4MGMwNzM1Zjg0ZGJlOWE3OTBiYWRlZTgyNDVjMDZjN2NhMzczMzFjYjM2OTgwXCIsXCJhODU1YmFiYWQ1Y2Q2MGM4OGI0MzBhNjlmNTNhMWE3YTM4Mjg5MTU0OTY0Nzk5YmU0M2QwNmQ3N2QzMWRhMDZcIl0sW1wiMzExMDkxZGQ5ODYwZThlMjBlZTEzNDczYzExNTVmNWY2OTYzNWUzOTQ3MDRlYWE3NDAwOTQ1MjI0NmNmYTliM1wiLFwiNjZkYjY1NmY4N2QxZjA0ZmZmZDFmMDQ3ODhjMDY4MzA4NzFlYzVhNjRmZWVlNjg1YmQ4MGYwYjEyODZkODM3NFwiXSxbXCIzNGMxZmQwNGQzMDFiZTg5YjMxYzA0NDJkM2U2YWMyNDg4MzkyOGI0NWE5MzQwNzgxODY3ZDQyMzJlYzJkYmRmXCIsXCI5NDE0Njg1ZTk3YjFiNTk1NGJkNDZmNzMwMTc0MTM2ZDU3ZjFjZWViNDg3NDQzZGM1MzIxODU3YmE3M2FiZWVcIl0sW1wiZjIxOWVhNWQ2YjU0NzAxYzFjMTRkZTViNTU3ZWI0MmE4ZDEzZjNhYmJjZDA4YWZmY2MyYTVlNmIwNDliOGQ2M1wiLFwiNGNiOTU5NTdlODNkNDBiMGY3M2FmNDU0NGNjY2Y2YjFmNGIwOGQzYzA3YjI3ZmI4ZDhjMjk2MmE0MDA3NjZkMVwiXSxbXCJkN2I4NzQwZjc0YThmYmFhYjFmNjgzZGI4ZjQ1ZGUyNjU0M2E1NDkwYmNhNjI3MDg3MjM2OTEyNDY5YTBiNDQ4XCIsXCJmYTc3OTY4MTI4ZDljOTJlZTEwMTBmMzM3YWQ0NzE3ZWZmMTVkYjVlZDNjMDQ5YjM0MTFlMDMxNWVhYTQ1OTNiXCJdLFtcIjMyZDMxYzIyMmY4ZjZmMGVmODZmN2M5OGQzYTMzMzVlYWQ1YmNkMzJhYmRkOTQyODlmZTRkMzA5MWFhODI0YmZcIixcIjVmMzAzMmY1ODkyMTU2ZTM5Y2NkM2Q3OTE1YjllMWRhMmU2ZGFjOWU2ZjI2ZTk2MTExOGQxNGI4NDYyZTE2NjFcIl0sW1wiNzQ2MWYzNzE5MTRhYjMyNjcxMDQ1YTE1NWQ5ODMxZWE4NzkzZDc3Y2Q1OTU5MmM0MzQwZjg2Y2JjMTgzNDdiNVwiLFwiOGVjMGJhMjM4Yjk2YmVjMGNiZGRkY2FlMGFhNDQyNTQyZWVlMWZmNTBjOTg2ZWE2YjM5ODQ3YjNjYzA5MmZmNlwiXSxbXCJlZTA3OWFkYjFkZjE4NjAwNzQzNTZhMjVhYTM4MjA2YTZkNzE2YjJjM2U2NzQ1M2QyODc2OThiYWQ3YjJiMmQ2XCIsXCI4ZGMyNDEyYWFmZTNiZTVjNGM1ZjM3ZTBlY2M1ZjlmNmE0NDY5ODlhZjA0YzRlMjVlYmFhYzQ3OWVjMWM4YzFlXCJdLFtcIjE2ZWM5M2U0NDdlYzgzZjA0NjdiMTgzMDJlZTYyMGY3ZTY1ZGUzMzE4NzRjOWRjNzJiZmQ4NjE2YmE5ZGE2YjVcIixcIjVlNDYzMTE1MGU2MmZiNDBkMGU4YzJhN2NhNTgwNGEzOWQ1ODE4NmE1MGU0OTcxMzk2MjY3NzhlMjViMDY3NGRcIl0sW1wiZWFhNWY5ODBjMjQ1ZjZmMDM4OTc4MjkwYWZhNzBiNmJkODg1NTg5N2Y5OGI2YWE0ODViOTYwNjVkNTM3YmQ5OVwiLFwiZjY1ZjVkM2UyOTJjMmUwODE5YTUyODM5MWM5OTQ2MjRkNzg0ODY5ZDdlNmVhNjdmYjE4MDQxMDI0ZWRjMDdkY1wiXSxbXCI3OGM5NDA3NTQ0YWMxMzI2OTJlZTE5MTBhMDI0Mzk5NThhZTA0ODc3MTUxMzQyZWE5NmM0YjZiMzVhNDlmNTFcIixcImYzZTAzMTkxNjllYjliODVkNTQwNDc5NTUzOWE1ZTY4ZmExZmJkNTgzYzA2NGQyNDYyYjY3NWYxOTRhM2RkYjRcIl0sW1wiNDk0ZjRiZTIxOWExYTc3MDE2ZGNkODM4NDMxYWVhMDAwMWNkYzhhZTdhNmZjNjg4NzI2NTc4ZDk3MDI4NTdhNVwiLFwiNDIyNDJhOTY5MjgzYTVmMzM5YmE3ZjA3NWUzNmJhMmFmOTI1Y2UzMGQ3NjdlZDZlNTVmNGIwMzE4ODBkNTYyY1wiXSxbXCJhNTk4YTgwMzBkYTZkODZjNmJjN2YyZjUxNDRlYTU0OWQyODIxMWVhNThmYWE3MGViZjRjMWU2NjVjMWZlOWI1XCIsXCIyMDRiNWQ2Zjg0ODIyYzMwN2U0YjRhNzE0MDczN2FlYzIzZmM2M2I2NWIzNWY4NmExMDAyNmRiZDJkODY0ZTZiXCJdLFtcImM0MTkxNjM2NWFiYjJiNWQwOTE5MmY1ZjJkYmVhZmVjMjA4ZjAyMGYxMjU3MGExODRkYmFkYzNlNTg1OTU5OTdcIixcIjRmMTQzNTFkMDA4N2VmYTQ5ZDI0NWIzMjg5ODQ5ODlkNWNhZjk0NTBmMzRiZmMwZWQxNmU5NmI1OGZhOTkxM1wiXSxbXCI4NDFkNjA2M2E1ODZmYTQ3NWE3MjQ2MDRkYTAzYmM1YjkyYTJlMGQyZTBhMzZhY2ZlNGM3M2E1NTE0NzQyODgxXCIsXCI3Mzg2N2Y1OWMwNjU5ZTgxOTA0ZjlhMWM3NTQzNjk4ZTYyNTYyZDY3NDRjMTY5Y2U3YTM2ZGUwMWE4ZDYxNTRcIl0sW1wiNWU5NWJiMzk5YTY5NzFkMzc2MDI2OTQ3Zjg5YmRlMmYyODJiMzM4MTA5MjhiZTRkZWQxMTJhYzRkNzBlMjBkNVwiLFwiMzlmMjNmMzY2ODA5MDg1YmVlYmZjNzExODEzMTM3NzVhOTljOWFlZDdkOGJhMzhiMTYxMzg0Yzc0NjAxMjg2NVwiXSxbXCIzNmU0NjQxYTUzOTQ4ZmQ0NzZjMzlmOGE5OWZkOTc0ZTVlYzA3NTY0YjUzMTVkOGJmOTk0NzFiY2EwZWYyZjY2XCIsXCJkMjQyNGIxYjFhYmU0ZWI4MTY0MjI3YjA4NWM5YWE5NDU2ZWExMzQ5M2ZkNTYzZTA2ZmQ1MWNmNTY5NGM3OGZjXCJdLFtcIjMzNjU4MWVhN2JmYmJiMjkwYzE5MWEyZjUwN2E0MWNmNTY0Mzg0MjE3MGU5MTRmYWVhYjI3YzJjNTc5ZjcyNlwiLFwiZWFkMTIxNjg1OTVmZTFiZTk5MjUyMTI5YjZlNTZiMzM5MWY3YWIxNDEwY2QxZTBlZjNkY2RjYWJkMmZkYTIyNFwiXSxbXCI4YWI4OTgxNmRhZGZkNmI2YTFmMjYzNGZjZjAwZWM4NDAzNzgxMDI1ZWQ2ODkwYzQ4NDk3NDI3MDZiZDQzZWRlXCIsXCI2ZmRjZWYwOWYyZjZkMGEwNDRlNjU0YWVmNjI0MTM2ZjUwM2Q0NTljM2U4OTg0NTg1OGE0N2E5MTI5Y2RkMjRlXCJdLFtcIjFlMzNmMWE3NDZjOWM1Nzc4MTMzMzQ0ZDkyOTlmY2FhMjBiMDkzOGU4YWNmZjI1NDRiYjQwMjg0YjhjNWZiOTRcIixcIjYwNjYwMjU3ZGQxMWIzYWE5YzhlZDYxOGQyNGVkZmYyMzA2ZDMyMGYxZDAzMDEwZTMzYTdkMjA1N2YzYjNiNlwiXSxbXCI4NWI3YzFkY2IzY2VjMWI3ZWU3ZjMwZGVkNzlkZDIwYTBlZDFmNGNjMThjYmNmY2ZhNDEwMzYxZmQ4ZjA4ZjMxXCIsXCIzZDk4YTljZGQwMjZkZDQzZjM5MDQ4ZjI1YTg4NDdmNGZjYWZhZDE4OTVkN2E2MzNjNmZlZDNjMzVlOTk5NTExXCJdLFtcIjI5ZGY5ZmJkOGQ5ZTQ2NTA5Mjc1ZjRiMTI1ZDZkNDVkN2ZiZTlhM2I4NzhhN2FmODcyYTI4MDA2NjFhYzVmNTFcIixcImI0YzRmZTk5Yzc3NWE2MDZlMmQ4ODYyMTc5MTM5ZmZkYTYxZGM4NjFjMDE5ZTU1Y2QyODc2ZWIyYTI3ZDg0YlwiXSxbXCJhMGIxY2FlMDZiMGE4NDdhM2ZlYTZlNjcxYWFmOGFkZmRmZTU4Y2EyZjc2ODEwNWM4MDgyYjJlNDQ5ZmNlMjUyXCIsXCJhZTQzNDEwMmVkZGUwOTU4ZWM0YjE5ZDkxN2E2YTI4ZTZiNzJkYTE4MzRhZmYwZTY1MGYwNDk1MDNhMjk2Y2YyXCJdLFtcIjRlOGNlYWZiOWIzZTlhMTM2ZGM3ZmY2N2U4NDAyOTViNDk5ZGZiM2IyMTMzZTRiYTExM2YyZTRjMGUxMjFlNVwiLFwiY2YyMTc0MTE4YzhiNmQ3YTRiNDhmNmQ1MzRjZTVjNzk0MjJjMDg2YTYzNDYwNTAyYjgyN2NlNjJhMzI2NjgzY1wiXSxbXCJkMjRhNDRlMDQ3ZTE5YjZmNWFmYjgxYzdjYTJmNjkwODBhNTA3NjY4OWEwMTA5MTlmNDI3MjVjMmI3ODlhMzNiXCIsXCI2ZmI4ZDU1OTFiNDY2ZjhmYzYzZGI1MGYxYzBmMWM2OTAxM2Y5OTY4ODdiODI0NGQyY2RlYzQxN2FmZWE4ZmEzXCJdLFtcImVhMDE2MDZhN2E2YzljZGQyNDlmZGZjZmFjYjk5NTg0MDAxZWRkMjhhYmJhYjc3YjUxMDRlOThlOGUzYjM1ZDRcIixcIjMyMmFmNDkwOGM3MzEyYjBjZmJmZTM2OWY3YTdiM2NkYjdkNDQ5NGJjMjgyMzcwMGNmZDY1MjE4OGEzZWE5OGRcIl0sW1wiYWY4YWRkYmYyYjY2MWM4YTZjNjMyODY1NWViOTY2NTEyNTIwMDdkOGM1ZWEzMWJlNGFkMTk2ZGU4Y2UyMTMxZlwiLFwiNjc0OWU2N2MwMjliODVmNTJhMDM0ZWFmZDA5NjgzNmIyNTIwODE4NjgwZTI2YWM4ZjNkZmJjZGI3MTc0OTcwMFwiXSxbXCJlM2FlMTk3NDU2NmNhMDZjYzUxNmQ0N2UwZmIxNjVhNjc0YTNkYWJjZmNhMTVlNzIyZjBlMzQ1MGY0NTg4OVwiLFwiMmFlYWJlN2U0NTMxNTEwMTE2MjE3ZjA3YmY0ZDA3MzAwZGU5N2U0ODc0ZjgxZjUzMzQyMGE3MmVlYjBiZDZhNFwiXSxbXCI1OTFlZTM1NTMxM2Q5OTcyMWNmNjk5M2ZmZWQxZTNlMzAxOTkzZmYzZWQyNTg4MDIwNzVlYThjZWQzOTdlMjQ2XCIsXCJiMGVhNTU4YTExM2MzMGJlYTYwZmM0Nzc1NDYwYzc5MDFmZjBiMDUzZDI1Y2EyYmRlZWU5OGYxYTRiZTVkMTk2XCJdLFtcIjExMzk2ZDU1ZmRhNTRjNDlmMTlhYTk3MzE4ZDhkYTYxZmE4NTg0ZTQ3YjA4NDk0NTA3N2NmMDMyNTViNTI5ODRcIixcIjk5OGM3NGE4Y2Q0NWFjMDEyODlkNTgzM2E3YmViNDc0NGZmNTM2YjAxYjI1N2JlNGM1NzY3YmVhOTNlYTU3YTRcIl0sW1wiM2M1ZDJhMWJhMzljNWExNzkwMDAwNzM4YzllMGM0MGI4ZGNkZmQ1NDY4NzU0YjY0MDU1NDAxNTdlMDE3YWE3YVwiLFwiYjIyODQyNzk5OTVhMzRlMmY5ZDRkZTczOTZmYzE4YjgwZjliOGI5ZmRkMjcwZjY2NjFmNzljYTRjODFiZDI1N1wiXSxbXCJjYzg3MDRiOGE2MGEwZGVmYTNhOTlhNzI5OWYyZTljM2ZiYzM5NWFmYjA0YWMwNzg0MjVlZjhhMTc5M2NjMDMwXCIsXCJiZGQ0NjAzOWZlZWQxNzg4MWQxZTA4NjJkYjM0N2Y4Y2YzOTViNzRmYzRiY2RjNGU5NDBiNzRlM2FjMWYxYjEzXCJdLFtcImM1MzNlNGY3ZWE4NTU1YWFjZDk3NzdhYzVjYWQyOWI5N2RkNGRlZmNjYzUzZWU3ZWEyMDQxMTliMjg4OWIxOTdcIixcIjZmMGEyNTZiYzVlZmRmNDI5YTJmYjYyNDJmMWE0M2EyZDliOTI1YmI0YTRiM2EyNmJiOGUwZjQ1ZWI1OTYwOTZcIl0sW1wiYzE0ZjhmMmNjYjI3ZDZmMTA5ZjZkMDhkMDNjYzk2YTY5YmE4YzM0ZWVjMDdiYmNmNTY2ZDQ4ZTMzZGE2NTkzXCIsXCJjMzU5ZDY5MjNiYjM5OGY3ZmQ0NDczZTE2ZmUxYzI4NDc1Yjc0MGRkMDk4MDc1ZTZjMGU4NjQ5MTEzZGMzYTM4XCJdLFtcImE2Y2JjMzA0NmJjNmE0NTBiYWMyNDc4OWZhMTcxMTVhNGM5NzM5ZWQ3NWY4ZjIxY2U0NDFmNzJlMGI5MGU2ZWZcIixcIjIxYWU3ZjQ2ODBlODg5YmIxMzA2MTllMmMwZjk1YTM2MGNlYjU3M2M3MDYwMzEzOTg2MmFmZDYxN2ZhOWI5ZlwiXSxbXCIzNDdkNmQ5YTAyYzQ4OTI3ZWJmYjg2YzEzNTliMWNhZjEzMGEzYzAyNjdkMTFjZTYzNDRiMzlmOTlkNDNjYzM4XCIsXCI2MGVhN2Y2MWEzNTM1MjRkMWM5ODdmNmVjZWM5MmYwODZkNTY1YWI2ODc4NzBjYjEyNjg5ZmYxZTMxYzc0NDQ4XCJdLFtcImRhNjU0NWQyMTgxZGI4ZDk4M2Y3ZGNiMzc1ZWY1ODY2ZDQ3YzY3YjFiZjMxYzhjZjg1NWVmNzQzN2I3MjY1NmFcIixcIjQ5Yjk2NzE1YWI2ODc4YTc5ZTc4ZjA3Y2U1NjgwYzVkNjY3MzA1MWI0OTM1YmQ4OTdmZWE4MjRiNzdkYzIwOGFcIl0sW1wiYzQwNzQ3Y2M5ZDAxMmNiMWExM2I4MTQ4MzA5YzZkZTdlYzI1ZDY5NDVkNjU3MTQ2YjlkNTk5NGI4ZmViMTExMVwiLFwiNWNhNTYwNzUzYmUyYTEyZmM2ZGU2Y2FmMmNiNDg5NTY1ZGI5MzYxNTZiOTUxNGUxYmI1ZTgzMDM3ZTBmYTJkNFwiXSxbXCI0ZTQyYzhlYzgyYzk5Nzk4Y2NmM2E2MTBiZTg3MGU3ODMzOGM3ZjcxMzM0OGJkMzRjODIwM2VmNDAzN2YzNTAyXCIsXCI3NTcxZDc0ZWU1ZTBmYjkyYTdhOGIzM2EwNzc4MzM0MWE1NDkyMTQ0Y2M1NGJjYzQwYTk0NDczNjkzNjA2NDM3XCJdLFtcIjM3NzVhYjcwODliYzZhZjgyM2FiYTJlMWFmNzBiMjM2ZDI1MWNhZGIwYzg2NzQzMjg3NTIyYTFiM2IwZGVkZWFcIixcImJlNTJkMTA3YmNmYTA5ZDhiY2I5NzM2YTgyOGNmYTdmYWM4ZGIxN2JmN2E3NmEyYzQyYWQ5NjE0MDkwMThjZjdcIl0sW1wiY2VlMzFjYmY3ZTM0ZWMzNzlkOTRmYjgxNGQzZDc3NWFkOTU0NTk1ZDEzMTRiYTg4NDY5NTllM2U4MmY3NGUyNlwiLFwiOGZkNjRhMTRjMDZiNTg5YzI2Yjk0N2FlMmJjZjZiZmEwMTQ5ZWYwYmUxNGVkNGQ4MGY0NDhhMDFjNDNiMWM2ZFwiXSxbXCJiNGY5ZWFlYTA5YjY5MTc2MTlmNmVhNmE0ZWI1NDY0ZWZkZGI1OGZkNDViMWViZWZjZGMxYTAxZDA4YjQ3OTg2XCIsXCIzOWU1Yzk5MjViNWE1NGIwNzQzM2E0ZjE4YzYxNzI2ZjhiYjEzMWMwMTJjYTU0MmViMjRhOGFjMDcyMDA2ODJhXCJdLFtcImQ0MjYzZGZjM2QyZGY5MjNhMDE3OWE0ODk2NmQzMGNlODRlMjUxNWFmYzNkY2NjMWI3NzkwNzc5MmViY2M2MGVcIixcIjYyZGZhZjA3YTBmNzhmZWIzMGUzMGQ2Mjk1ODUzY2UxODllMTI3NzYwYWQ2Y2Y3ZmFlMTY0ZTEyMmEyMDhkNTRcIl0sW1wiNDg0NTc1MjQ4MjBmYTY1YTRmOGQzNWViNjkzMDg1N2MwMDMyYWNjMGE0YTJkZTQyMjIzM2VlZGE4OTc2MTJjNFwiLFwiMjVhNzQ4YWIzNjc5NzlkOTg3MzNjMzhhMWZhMWMyZTdkYzZjYzA3ZGIyZDYwYTlhZTdhNzZhYWE0OWJkMGY3N1wiXSxbXCJkZmVlZWYxODgxMTAxZjJjYjExNjQ0ZjNhMmFmZGZjMjA0NWUxOTkxOTE1MjkyM2YzNjdhMTc2N2MxMWNjZWRhXCIsXCJlY2ZiNzA1NmNmMWRlMDQyZjk0MjBiYWIzOTY3OTNjMGMzOTBiZGU3NGI0YmJkZmYxNmE4M2FlMDlhOWE3NTE3XCJdLFtcIjZkN2VmNmIxNzU0M2Y4MzczYzU3M2Y0NGUxZjM4OTgzNWQ4OWJjYmM2MDYyY2VkMzZjODJkZjgzYjhmYWU4NTlcIixcImNkNDUwZWMzMzU0Mzg5ODZkZmVmYTEwYzU3ZmVhOWJjYzUyMWEwOTU5YjJkODBiYmY3NGIxOTBkY2E3MTJkMTBcIl0sW1wiZTc1NjA1ZDU5MTAyYTVhMjY4NDUwMGQzYjk5MWYyZTNmM2M4OGI5MzIyNTU0NzAzNWFmMjVhZjY2ZTA0NTQxZlwiLFwiZjVjNTQ3NTRhOGY3MWVlNTQwYjliNDg3Mjg0NzNlMzE0ZjcyOWFjNTMwOGIwNjkzODM2MDk5MGUyYmZhZDEyNVwiXSxbXCJlYjk4NjYwZjRjNGRmYWEwNmEyYmU0NTNkNTAyMGJjOTlhMGMyZTYwYWJlMzg4NDU3ZGQ0M2ZlZmIxZWQ2MjBjXCIsXCI2Y2I5YTg4NzZkOWNiODUyMDYwOWFmM2FkZDI2Y2QyMGEwYTdjZDhhOTQxMTEzMWNlODVmNDQxMDAwOTkyMjNlXCJdLFtcIjEzZTg3YjAyN2Q4NTE0ZDM1OTM5ZjJlNjg5MmIxOTkyMjE1NDU5Njk0MTg4ODMzNmRjMzU2M2UzYjhkYmE5NDJcIixcImZlZjVhM2M2ODA1OWE2ZGVjNWQ2MjQxMTRiZjFlOTFhYWMyYjlkYTU2OGQ2YWJlYjI1NzBkNTU2NDZiOGFkZjFcIl0sW1wiZWUxNjMwMjZlOWZkNmZlMDE3YzM4ZjA2YTViZTZmYzEyNTQyNGIzNzFjZTI3MDhlN2JmNDQ5MTY5MWU1NzY0YVwiLFwiMWFjYjI1MGYyNTVkZDYxYzQzZDk0Y2NjNjcwZDBmNThmNDlhZTNmYTE1Yjk2NjIzZTU0MzBkYTBhZDZjNjJiMlwiXSxbXCJiMjY4ZjVlZjlhZDUxZTRkNzhkZTNhNzUwYzJkYzg5YjFlNjI2ZDQzNTA1ODY3OTk5OTMyZTVkYjMzYWYzZDgwXCIsXCI1ZjMxMGQ0YjNjOTliOWViYjE5Zjc3ZDQxYzFkZWUwMThjZjBkMzRmZDQxOTE2MTQwMDNlOTQ1YTEyMTZlNDIzXCJdLFtcImZmMDdmMzExOGE5ZGYwMzVlOWZhZDg1ZWI2YzdiZmU0MmIwMmYwMWNhOTljZWVhM2JmN2ZmZGJhOTNjNDc1MGRcIixcIjQzODEzNmQ2MDNlODU4YTNhNWM0NDBjMzhlY2NiYWRkYzFkMjk0MjExNGUyZWRkZDQ3NDBkMDk4Y2VkMWYwZDhcIl0sW1wiOGQ4Yjk4NTVjN2MwNTJhMzQxNDZmZDIwZmZiNjU4YmVhNGI5ZjY5ZTBkODI1ZWJlYzE2ZThjM2NlMmI1MjZhMVwiLFwiY2RiNTU5ZWVkYzJkNzlmOTI2YmFmNDRmYjg0ZWE0ZDQ0YmNmNTBmZWU1MWQ3Y2ViMzBlMmU3ZjQ2MzAzNjc1OFwiXSxbXCI1MmRiMGI1Mzg0ZGZiZjA1YmZhOWQ0NzJkN2FlMjZkZmU0Yjg1MWNlY2E5MWIxZWJhNTQyNjMxODBkYTMyYjYzXCIsXCJjM2I5OTdkMDUwZWU1ZDQyM2ViYWY2NmE2ZGI5ZjU3YjMxODBjOTAyODc1Njc5ZGU5MjRiNjlkODRhN2IzNzVcIl0sW1wiZTYyZjk0OTBkM2Q1MWRhNjM5NWVmZDI0ZTgwOTE5Y2M3ZDBmMjljM2YzZmE0OGM2ZmZmNTQzYmVjYmQ0MzM1MlwiLFwiNmQ4OWFkN2JhNDg3NmIwYjIyYzJjYTI4MGM2ODI4NjJmMzQyYzg1OTFmMWRhZjUxNzBlMDdiZmQ5Y2NhZmE3ZFwiXSxbXCI3ZjMwZWEyNDc2YjM5OWI0OTU3NTA5Yzg4Zjc3ZDAxOTFhZmEyZmY1Y2I3YjE0ZmQ2ZDhlN2Q2NWFhYWIxMTkzXCIsXCJjYTVlZjdkNGIyMzFjOTRjM2IxNTM4OWE1ZjYzMTFlOWRhZmY3YmI2N2IxMDNlOTg4MGVmNGJmZjYzN2FjYWVjXCJdLFtcIjUwOThmZjFlMWQ5ZjE0ZmI0NmEyMTBmYWRhNmM5MDNmZWYwZmI3YjRhMWRkMWQ5YWM2MGEwMzYxODAwYjdhMDBcIixcIjk3MzExNDFkODFmYzhmODA4NGQzN2M2ZTc1NDIwMDZiM2VlMWI0MGQ2MGRmZTUzNjJhNWIxMzJmZDE3ZGRjMFwiXSxbXCIzMmI3OGM3ZGU5ZWU1MTJhNzI4OTViZTZiOWNiZWZhNmUyZjNjNGNjY2U0NDVjOTZiOWYyYzgxZTI3NzhhZDU4XCIsXCJlZTE4NDlmNTEzZGY3MWUzMmVmYzM4OTZlZTI4MjYwYzczYmI4MDU0N2FlMjI3NWJhNDk3MjM3Nzk0Yzg3NTNjXCJdLFtcImUyY2I3NGZkZGM4ZTlmYmNkMDc2ZWVmMmE3YzcyYjBjZTM3ZDUwZjA4MjY5ZGZjMDc0YjU4MTU1MDU0N2E0ZjdcIixcImQzYWEyZWQ3MWM5ZGQyMjQ3YTYyZGYwNjI3MzZlYjBiYWRkZWE5ZTM2MTIyZDJiZTg2NDFhYmNiMDA1Y2M0YTRcIl0sW1wiODQzODQ0NzU2NmQ0ZDdiZWRhZGMyOTk0OTZhYjM1NzQyNjAwOWEzNWYyMzVjYjE0MWJlMGQ5OWNkMTBhZTNhOFwiLFwiYzRlMTAyMDkxNjk4MGE0ZGE1ZDAxYWM1ZTZhZDMzMDczNGVmMGQ3OTA2NjMxYzRmMjM5MDQyNmIyZWRkNzkxZlwiXSxbXCI0MTYyZDQ4OGI4OTQwMjAzOWI1ODRjNmZjNmMzMDg4NzA1ODdkOWM0NmY2NjBiODc4YWI2NWM4MmM3MTFkNjdlXCIsXCI2NzE2M2U5MDMyMzYyODlmNzc2ZjIyYzI1ZmI4YTNhZmMxNzMyZjJiODRiNGU5NWRiZGE0N2FlNWEwODUyNjQ5XCJdLFtcIjNmYWQzZmE4NGNhZjBmMzRmMGY4OWJmZDJkY2Y1NGZjMTc1ZDc2N2FlYzNlNTA2ODRmM2JhNGE0YmY1ZjY4M2RcIixcImNkMWJjN2NiNmNjNDA3YmIyZjBjYTY0N2M3MThhNzMwY2Y3MTg3MmU3ZDBkMmE1M2ZhMjBlZmNkZmU2MTgyNlwiXSxbXCI2NzRmMjYwMGEzMDA3YTAwNTY4YzFhN2NlMDVkMDgxNmMxZmI4NGJmMTM3MDc5OGYxYzY5NTMyZmFlYjFhODZiXCIsXCIyOTlkMjFmOTQxM2YzM2IzZWRmNDNiMjU3MDA0NTgwYjcwZGI1N2RhMGIxODIyNTllMDllZWNjNjllMGQzOGE1XCJdLFtcImQzMmY0ZGE1NGFkZTc0YWJiODFiODE1YWQxZmIzYjI2M2Q4MmQ2YzY5MjcxNGJjZmY4N2QyOWJkNWVlOWYwOGZcIixcImY5NDI5ZTczOGI4ZTUzYjk2OGU5OTAxNmMwNTk3MDc3ODJlMTRmNDUzNTM1OWQ1ODJmYzQxNjkxMGIzZWVhODdcIl0sW1wiMzBlNGU2NzA0MzUzODU1NTZlNTkzNjU3MTM1ODQ1ZDM2ZmJiNjkzMWY3MmIwOGNiMWVkOTU0ZjFlM2NlM2ZmNlwiLFwiNDYyZjliY2U2MTk4OTg2Mzg0OTkzNTAxMTNiYmM5YjEwYTg3OGQzNWRhNzA3NDBkYzY5NWE1NTllYjg4ZGI3YlwiXSxbXCJiZTIwNjIwMDNjNTFjYzMwMDQ2ODI5MDQzMzBlNGRlZTdmM2RjZDEwYjAxZTU4MGJmMTk3MWIwNGQ0Y2FkMjk3XCIsXCI2MjE4OGJjNDlkNjFlNTQyODU3M2Q0OGE3NGUxYzY1NWIxYzYxMDkwOTA1NjgyYTBkNTU1OGVkNzJkY2NiOWJjXCJdLFtcIjkzMTQ0NDIzYWNlMzQ1MWVkMjllMGZiOWFjMmFmMjExY2I2ZTg0YTYwMWRmNTk5M2M0MTk4NTlmZmY1ZGYwNGFcIixcIjdjMTBkZmIxNjRjMzQyNWY1YzcxYTNmOWQ3OTkyMDM4ZjEwNjUyMjRmNzJiYjlkMWQ5MDJhNmQxMzAzN2I0N2NcIl0sW1wiYjAxNWY4MDQ0ZjVmY2JkY2YyMWNhMjZkNmMzNGZiODE5NzgyOTIwNWM3YjdkMmE3Y2I2NjQxOGMxNTdiMTEyY1wiLFwiYWI4YzFlMDg2ZDA0ZTgxMzc0NGE2NTViMmRmOGQ1ZjgzYjNjZGM2ZmFhMzA4OGMxZDNhZWExNDU0ZTNhMWQ1ZlwiXSxbXCJkNWU5ZTFkYTY0OWQ5N2Q4OWU0ODY4MTE3YTQ2NWEzYTRmOGExOGRlNTdhMTQwZDM2YjNmMmFmMzQxYTIxYjUyXCIsXCI0Y2IwNDQzN2YzOTFlZDczMTExYTEzY2MxZDRkZDBkYjE2OTM0NjVjMjI0MDQ4MGQ4OTU1ZTg1OTJmMjc0NDdhXCJdLFtcImQzYWU0MTA0N2RkN2NhMDY1ZGJmOGVkNzdiOTkyNDM5OTgzMDA1Y2Q3MmUxNmQ2Zjk5NmE1MzE2ZDM2OTY2YmJcIixcImJkMWFlYjIxYWQyMmViYjIyYTEwZjAzMDM0MTdjNmQ5NjRmOGNkZDdkZjBhY2E2MTRiMTBkYzE0ZDEyNWFjNDZcIl0sW1wiNDYzZTI3NjNkODg1Zjk1OGZjNjZjZGQyMjgwMGYwYTQ4NzE5N2QwYTgyZTM3N2I0OWY4MGFmODdjODk3YjA2NVwiLFwiYmZlZmFjZGIwZTVkMGZkN2RmM2EzMTFhOTRkZTA2MmIyNmI4MGM2MWZiYzk3NTA4Yjc5OTkyNjcxZWY3Y2E3ZlwiXSxbXCI3OTg1ZmRmZDEyN2MwNTY3YzZmNTNlYzFiYjYzZWMzMTU4ZTU5N2M0MGJmZTc0N2M4M2NkZGZjOTEwNjQxOTE3XCIsXCI2MDNjMTJkYWYzZDk4NjJlZjJiMjVmZTFkZTI4OWFlZDI0ZWQyOTFlMGVjNjcwODcwM2E1YmQ1NjdmMzJlZDAzXCJdLFtcIjc0YTFhZDZiNWY3NmUzOWRiMmRkMjQ5NDEwZWFjN2Y5OWU3NGM1OWNiODNkMmQwZWQ1ZmYxNTQzZGE3NzAzZTlcIixcImNjNjE1N2VmMThjOWM2M2NkNjE5M2Q4MzYzMWJiZWEwMDkzZTA5Njg5NDJlOGMzM2Q1NzM3ZmQ3OTBlMGRiMDhcIl0sW1wiMzA2ODJhNTA3MDMzNzVmNjAyZDQxNjY2NGJhMTliN2ZjOWJhYjQyYzcyNzQ3NDYzYTcxZDA4OTZiMjJmNmRhM1wiLFwiNTUzZTA0ZjZiMDE4YjRmYTZjOGYzOWU3ZjMxMWQzMTc2MjkwZDBlMGYxOWNhNzNmMTc3MTRkOTk3N2EyMmZmOFwiXSxbXCI5ZTIxNThmMGQ3YzBkNWYyNmMzNzkxZWZlZmE3OTU5NzY1NGU3YTJiMjQ2NGY1MmIxZWU2YzEzNDc3NjllZjU3XCIsXCI3MTJmY2RkMWI5MDUzZjA5MDAzYTM0ODFmYTc3NjJlOWZmZDdjOGVmMzVhMzg1MDllMmZiZjI2MjkwMDgzNzNcIl0sW1wiMTc2ZTI2OTg5YTQzYzljZmViYTQwMjljMjAyNTM4YzI4MTcyZTU2NmUzYzRmY2U3MzIyODU3ZjNiZTMyN2Q2NlwiLFwiZWQ4Y2M5ZDA0YjI5ZWI4NzdkMjcwYjQ4NzhkYzQzYzE5YWVmZDMxZjRlZWUwOWVlN2I0NzgzNGMxZmE0YjFjM1wiXSxbXCI3NWQ0NmVmZWEzNzcxZTZlNjhhYmI4OWExM2FkNzQ3ZWNmMTg5MjM5M2RmYzRmMWI3MDA0Nzg4YzUwMzc0ZGE4XCIsXCI5ODUyMzkwYTk5NTA3Njc5ZmQwYjg2ZmQyYjM5YTg2OGQ3ZWZjMjIxNTEzNDZlMWEzY2E0NzI2NTg2YTZiZWQ4XCJdLFtcIjgwOWEyMGM2N2Q2NDkwMGZmYjY5OGM0YzgyNWY2ZDVmMjMxMGZiMDQ1MWM4NjkzNDViNzMxOWY2NDU2MDU3MjFcIixcIjllOTk0OTgwZDk5MTdlMjJiNzZiMDYxOTI3ZmEwNDE0M2QwOTZjY2M1NDk2M2U2YTVlYmZhNWYzZjhlMjg2YzFcIl0sW1wiMWIzODkwM2E0M2Y3ZjExNGVkNDUwMGI0ZWFjNzA4M2ZkZWZlY2UxY2YyOWM2MzUyOGQ1NjM0NDZmOTcyYzE4MFwiLFwiNDAzNmVkYzkzMWE2MGFlODg5MzUzZjc3ZmQ1M2RlNGEyNzA4YjI2YjZmNWRhNzJhZDMzOTQxMTlkYWY0MDhmOVwiXV19fX0sOTUzOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj10LGk9cigzNTUwKSxvPXIoOTc0Nikscz1yKDQ1MDQpO24uYXNzZXJ0PW8sbi50b0FycmF5PXMudG9BcnJheSxuLnplcm8yPXMuemVybzIsbi50b0hleD1zLnRvSGV4LG4uZW5jb2RlPXMuZW5jb2RlLG4uZ2V0TkFGPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1uZXcgQXJyYXkoTWF0aC5tYXgoZS5iaXRMZW5ndGgoKSxyKSsxKTtuLmZpbGwoMCk7Zm9yKHZhciBpPTE8PHQrMSxvPWUuY2xvbmUoKSxzPTA7czxuLmxlbmd0aDtzKyspe3ZhciBhLGM9by5hbmRsbihpLTEpO28uaXNPZGQoKT8oYT1jPihpPj4xKS0xPyhpPj4xKS1jOmMsby5pc3VibihhKSk6YT0wLG5bc109YSxvLml1c2hybigxKX1yZXR1cm4gbn0sbi5nZXRKU0Y9ZnVuY3Rpb24oZSx0KXt2YXIgcj1bW10sW11dO2U9ZS5jbG9uZSgpLHQ9dC5jbG9uZSgpO2Zvcih2YXIgbixpPTAsbz0wO2UuY21wbigtaSk+MHx8dC5jbXBuKC1vKT4wOyl7dmFyIHMsYSxjPWUuYW5kbG4oMykraSYzLGY9dC5hbmRsbigzKStvJjM7Mz09PWMmJihjPS0xKSwzPT09ZiYmKGY9LTEpLHM9MD09KDEmYyk/MDozIT0obj1lLmFuZGxuKDcpK2kmNykmJjUhPT1ufHwyIT09Zj9jOi1jLHJbMF0ucHVzaChzKSxhPTA9PSgxJmYpPzA6MyE9KG49dC5hbmRsbig3KStvJjcpJiY1IT09bnx8MiE9PWM/ZjotZixyWzFdLnB1c2goYSksMippPT09cysxJiYoaT0xLWkpLDIqbz09PWErMSYmKG89MS1vKSxlLml1c2hybigxKSx0Lml1c2hybigxKX1yZXR1cm4gcn0sbi5jYWNoZWRQcm9wZXJ0eT1mdW5jdGlvbihlLHQscil7dmFyIG49XCJfXCIrdDtlLnByb3RvdHlwZVt0XT1mdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzW25dP3RoaXNbbl06dGhpc1tuXT1yLmNhbGwodGhpcyl9fSxuLnBhcnNlQnl0ZXM9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/bi50b0FycmF5KGUsXCJoZXhcIik6ZX0sbi5pbnRGcm9tTEU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBpKGUsXCJoZXhcIixcImxlXCIpfX0sMTIyNzplPT57ZS5leHBvcnRzPW51bGx9LDI4NDA6KGUsdCxyKT0+e3ZhciBuPXIoNDE1NSksaT1yKDc3OCksbz1mdW5jdGlvbigpe30scz1mdW5jdGlvbihlLHQscil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gcyhlLG51bGwsdCk7dHx8KHQ9e30pLHI9aShyfHxvKTt2YXIgYT1lLl93cml0YWJsZVN0YXRlLGM9ZS5fcmVhZGFibGVTdGF0ZSxmPXQucmVhZGFibGV8fCExIT09dC5yZWFkYWJsZSYmZS5yZWFkYWJsZSx1PXQud3JpdGFibGV8fCExIT09dC53cml0YWJsZSYmZS53cml0YWJsZSxkPSExLGg9ZnVuY3Rpb24oKXtlLndyaXRhYmxlfHxsKCl9LGw9ZnVuY3Rpb24oKXt1PSExLGZ8fHIuY2FsbChlKX0scD1mdW5jdGlvbigpe2Y9ITEsdXx8ci5jYWxsKGUpfSxiPWZ1bmN0aW9uKHQpe3IuY2FsbChlLHQ/bmV3IEVycm9yKFwiZXhpdGVkIHdpdGggZXJyb3IgY29kZTogXCIrdCk6bnVsbCl9LHk9ZnVuY3Rpb24odCl7ci5jYWxsKGUsdCl9LGc9ZnVuY3Rpb24oKXtuLm5leHRUaWNrKG0pfSxtPWZ1bmN0aW9uKCl7aWYoIWQpcmV0dXJuKCFmfHxjJiZjLmVuZGVkJiYhYy5kZXN0cm95ZWQpJiYoIXV8fGEmJmEuZW5kZWQmJiFhLmRlc3Ryb3llZCk/dm9pZCAwOnIuY2FsbChlLG5ldyBFcnJvcihcInByZW1hdHVyZSBjbG9zZVwiKSl9LHY9ZnVuY3Rpb24oKXtlLnJlcS5vbihcImZpbmlzaFwiLGwpfTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGUuc2V0SGVhZGVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmFib3J0fShlKT8oZS5vbihcImNvbXBsZXRlXCIsbCksZS5vbihcImFib3J0XCIsZyksZS5yZXE/digpOmUub24oXCJyZXF1ZXN0XCIsdikpOnUmJiFhJiYoZS5vbihcImVuZFwiLGgpLGUub24oXCJjbG9zZVwiLGgpKSxmdW5jdGlvbihlKXtyZXR1cm4gZS5zdGRpbyYmQXJyYXkuaXNBcnJheShlLnN0ZGlvKSYmMz09PWUuc3RkaW8ubGVuZ3RofShlKSYmZS5vbihcImV4aXRcIixiKSxlLm9uKFwiZW5kXCIscCksZS5vbihcImZpbmlzaFwiLGwpLCExIT09dC5lcnJvciYmZS5vbihcImVycm9yXCIseSksZS5vbihcImNsb3NlXCIsZyksZnVuY3Rpb24oKXtkPSEwLGUucmVtb3ZlTGlzdGVuZXIoXCJjb21wbGV0ZVwiLGwpLGUucmVtb3ZlTGlzdGVuZXIoXCJhYm9ydFwiLGcpLGUucmVtb3ZlTGlzdGVuZXIoXCJyZXF1ZXN0XCIsdiksZS5yZXEmJmUucmVxLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsbCksZS5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLGgpLGUucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGgpLGUucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixsKSxlLnJlbW92ZUxpc3RlbmVyKFwiZXhpdFwiLGIpLGUucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixwKSxlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix5KSxlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixnKX19O2UuZXhwb3J0cz1zfSw4MDkxOmU9PntcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUsdCl7aWYobnVsbD09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0XCIpO2Zvcih2YXIgcj1PYmplY3QoZSksbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspe3ZhciBpPWFyZ3VtZW50c1tuXTtpZihudWxsIT1pKWZvcih2YXIgbz1PYmplY3Qua2V5cyhPYmplY3QoaSkpLHM9MCxhPW8ubGVuZ3RoO3M8YTtzKyspe3ZhciBjPW9bc10sZj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGksYyk7dm9pZCAwIT09ZiYmZi5lbnVtZXJhYmxlJiYocltjXT1pW2NdKX19cmV0dXJuIHJ9ZS5leHBvcnRzPXthc3NpZ246dCxwb2x5ZmlsbDpmdW5jdGlvbigpe09iamVjdC5hc3NpZ258fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsXCJhc3NpZ25cIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dH0pfX19LDIyOTQ6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRXRoZXJldW1Qcm92aWRlckVycm9yPXQuRXRoZXJldW1ScGNFcnJvcj12b2lkIDA7Y29uc3Qgbj1yKDQ0NDUpO2NsYXNzIGkgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlLHQscil7aWYoIU51bWJlci5pc0ludGVnZXIoZSkpdGhyb3cgbmV3IEVycm9yKCdcImNvZGVcIiBtdXN0IGJlIGFuIGludGVnZXIuJyk7aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcignXCJtZXNzYWdlXCIgbXVzdCBiZSBhIG5vbmVtcHR5IHN0cmluZy4nKTtzdXBlcih0KSx0aGlzLmNvZGU9ZSx2b2lkIDAhPT1yJiYodGhpcy5kYXRhPXIpfXNlcmlhbGl6ZSgpe2NvbnN0IGU9e2NvZGU6dGhpcy5jb2RlLG1lc3NhZ2U6dGhpcy5tZXNzYWdlfTtyZXR1cm4gdm9pZCAwIT09dGhpcy5kYXRhJiYoZS5kYXRhPXRoaXMuZGF0YSksdGhpcy5zdGFjayYmKGUuc3RhY2s9dGhpcy5zdGFjayksZX10b1N0cmluZygpe3JldHVybiBuLmRlZmF1bHQodGhpcy5zZXJpYWxpemUoKSxvLDIpfX1mdW5jdGlvbiBvKGUsdCl7aWYoXCJbQ2lyY3VsYXJdXCIhPT10KXJldHVybiB0fXQuRXRoZXJldW1ScGNFcnJvcj1pLHQuRXRoZXJldW1Qcm92aWRlckVycm9yPWNsYXNzIGV4dGVuZHMgaXtjb25zdHJ1Y3RvcihlLHQscil7aWYoIWZ1bmN0aW9uKGUpe3JldHVybiBOdW1iZXIuaXNJbnRlZ2VyKGUpJiZlPj0xZTMmJmU8PTQ5OTl9KGUpKXRocm93IG5ldyBFcnJvcignXCJjb2RlXCIgbXVzdCBiZSBhbiBpbnRlZ2VyIHN1Y2ggdGhhdDogMTAwMCA8PSBjb2RlIDw9IDQ5OTknKTtzdXBlcihlLHQscil9fX0sMjY2MjooZSx0KT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZXJyb3JWYWx1ZXM9dC5lcnJvckNvZGVzPXZvaWQgMCx0LmVycm9yQ29kZXM9e3JwYzp7aW52YWxpZElucHV0Oi0zMmUzLHJlc291cmNlTm90Rm91bmQ6LTMyMDAxLHJlc291cmNlVW5hdmFpbGFibGU6LTMyMDAyLHRyYW5zYWN0aW9uUmVqZWN0ZWQ6LTMyMDAzLG1ldGhvZE5vdFN1cHBvcnRlZDotMzIwMDQsbGltaXRFeGNlZWRlZDotMzIwMDUscGFyc2U6LTMyNzAwLGludmFsaWRSZXF1ZXN0Oi0zMjYwMCxtZXRob2ROb3RGb3VuZDotMzI2MDEsaW52YWxpZFBhcmFtczotMzI2MDIsaW50ZXJuYWw6LTMyNjAzfSxwcm92aWRlcjp7dXNlclJlamVjdGVkUmVxdWVzdDo0MDAxLHVuYXV0aG9yaXplZDo0MTAwLHVuc3VwcG9ydGVkTWV0aG9kOjQyMDAsZGlzY29ubmVjdGVkOjQ5MDAsY2hhaW5EaXNjb25uZWN0ZWQ6NDkwMX19LHQuZXJyb3JWYWx1ZXM9e1wiLTMyNzAwXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIkludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci4gQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXCJ9LFwiLTMyNjAwXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIlRoZSBKU09OIHNlbnQgaXMgbm90IGEgdmFsaWQgUmVxdWVzdCBvYmplY3QuXCJ9LFwiLTMyNjAxXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIlRoZSBtZXRob2QgZG9lcyBub3QgZXhpc3QgLyBpcyBub3QgYXZhaWxhYmxlLlwifSxcIi0zMjYwMlwiOntzdGFuZGFyZDpcIkpTT04gUlBDIDIuMFwiLG1lc3NhZ2U6XCJJbnZhbGlkIG1ldGhvZCBwYXJhbWV0ZXIocykuXCJ9LFwiLTMyNjAzXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIkludGVybmFsIEpTT04tUlBDIGVycm9yLlwifSxcIi0zMjAwMFwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIkludmFsaWQgaW5wdXQuXCJ9LFwiLTMyMDAxXCI6e3N0YW5kYXJkOlwiRUlQLTE0NzRcIixtZXNzYWdlOlwiUmVzb3VyY2Ugbm90IGZvdW5kLlwifSxcIi0zMjAwMlwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlJlc291cmNlIHVuYXZhaWxhYmxlLlwifSxcIi0zMjAwM1wiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlRyYW5zYWN0aW9uIHJlamVjdGVkLlwifSxcIi0zMjAwNFwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIk1ldGhvZCBub3Qgc3VwcG9ydGVkLlwifSxcIi0zMjAwNVwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlJlcXVlc3QgbGltaXQgZXhjZWVkZWQuXCJ9LDQwMDE6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVXNlciByZWplY3RlZCB0aGUgcmVxdWVzdC5cIn0sNDEwMDp7c3RhbmRhcmQ6XCJFSVAtMTE5M1wiLG1lc3NhZ2U6XCJUaGUgcmVxdWVzdGVkIGFjY291bnQgYW5kL29yIG1ldGhvZCBoYXMgbm90IGJlZW4gYXV0aG9yaXplZCBieSB0aGUgdXNlci5cIn0sNDIwMDp7c3RhbmRhcmQ6XCJFSVAtMTE5M1wiLG1lc3NhZ2U6XCJUaGUgcmVxdWVzdGVkIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgRXRoZXJldW0gcHJvdmlkZXIuXCJ9LDQ5MDA6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIGFsbCBjaGFpbnMuXCJ9LDQ5MDE6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBzcGVjaWZpZWQgY2hhaW4uXCJ9fX0sODc5NzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5ldGhFcnJvcnM9dm9pZCAwO2NvbnN0IG49cigyMjk0KSxpPXIoODc1Myksbz1yKDI2NjIpO2Z1bmN0aW9uIHMoZSx0KXtjb25zdFtyLG9dPWModCk7cmV0dXJuIG5ldyBuLkV0aGVyZXVtUnBjRXJyb3IoZSxyfHxpLmdldE1lc3NhZ2VGcm9tQ29kZShlKSxvKX1mdW5jdGlvbiBhKGUsdCl7Y29uc3RbcixvXT1jKHQpO3JldHVybiBuZXcgbi5FdGhlcmV1bVByb3ZpZGVyRXJyb3IoZSxyfHxpLmdldE1lc3NhZ2VGcm9tQ29kZShlKSxvKX1mdW5jdGlvbiBjKGUpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybltlXTtpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmIUFycmF5LmlzQXJyYXkoZSkpe2NvbnN0e21lc3NhZ2U6dCxkYXRhOnJ9PWU7aWYodCYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBzcGVjaWZ5IHN0cmluZyBtZXNzYWdlLlwiKTtyZXR1cm5bdHx8dm9pZCAwLHJdfX1yZXR1cm5bXX10LmV0aEVycm9ycz17cnBjOntwYXJzZTplPT5zKG8uZXJyb3JDb2Rlcy5ycGMucGFyc2UsZSksaW52YWxpZFJlcXVlc3Q6ZT0+cyhvLmVycm9yQ29kZXMucnBjLmludmFsaWRSZXF1ZXN0LGUpLGludmFsaWRQYXJhbXM6ZT0+cyhvLmVycm9yQ29kZXMucnBjLmludmFsaWRQYXJhbXMsZSksbWV0aG9kTm90Rm91bmQ6ZT0+cyhvLmVycm9yQ29kZXMucnBjLm1ldGhvZE5vdEZvdW5kLGUpLGludGVybmFsOmU9PnMoby5lcnJvckNvZGVzLnJwYy5pbnRlcm5hbCxlKSxzZXJ2ZXI6ZT0+e2lmKCFlfHxcIm9iamVjdFwiIT10eXBlb2YgZXx8QXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoXCJFdGhlcmV1bSBSUEMgU2VydmVyIGVycm9ycyBtdXN0IHByb3ZpZGUgc2luZ2xlIG9iamVjdCBhcmd1bWVudC5cIik7Y29uc3R7Y29kZTp0fT1lO2lmKCFOdW1iZXIuaXNJbnRlZ2VyKHQpfHx0Pi0zMjAwNXx8dDwtMzIwOTkpdGhyb3cgbmV3IEVycm9yKCdcImNvZGVcIiBtdXN0IGJlIGFuIGludGVnZXIgc3VjaCB0aGF0OiAtMzIwOTkgPD0gY29kZSA8PSAtMzIwMDUnKTtyZXR1cm4gcyh0LGUpfSxpbnZhbGlkSW5wdXQ6ZT0+cyhvLmVycm9yQ29kZXMucnBjLmludmFsaWRJbnB1dCxlKSxyZXNvdXJjZU5vdEZvdW5kOmU9PnMoby5lcnJvckNvZGVzLnJwYy5yZXNvdXJjZU5vdEZvdW5kLGUpLHJlc291cmNlVW5hdmFpbGFibGU6ZT0+cyhvLmVycm9yQ29kZXMucnBjLnJlc291cmNlVW5hdmFpbGFibGUsZSksdHJhbnNhY3Rpb25SZWplY3RlZDplPT5zKG8uZXJyb3JDb2Rlcy5ycGMudHJhbnNhY3Rpb25SZWplY3RlZCxlKSxtZXRob2ROb3RTdXBwb3J0ZWQ6ZT0+cyhvLmVycm9yQ29kZXMucnBjLm1ldGhvZE5vdFN1cHBvcnRlZCxlKSxsaW1pdEV4Y2VlZGVkOmU9PnMoby5lcnJvckNvZGVzLnJwYy5saW1pdEV4Y2VlZGVkLGUpfSxwcm92aWRlcjp7dXNlclJlamVjdGVkUmVxdWVzdDplPT5hKG8uZXJyb3JDb2Rlcy5wcm92aWRlci51c2VyUmVqZWN0ZWRSZXF1ZXN0LGUpLHVuYXV0aG9yaXplZDplPT5hKG8uZXJyb3JDb2Rlcy5wcm92aWRlci51bmF1dGhvcml6ZWQsZSksdW5zdXBwb3J0ZWRNZXRob2Q6ZT0+YShvLmVycm9yQ29kZXMucHJvdmlkZXIudW5zdXBwb3J0ZWRNZXRob2QsZSksZGlzY29ubmVjdGVkOmU9PmEoby5lcnJvckNvZGVzLnByb3ZpZGVyLmRpc2Nvbm5lY3RlZCxlKSxjaGFpbkRpc2Nvbm5lY3RlZDplPT5hKG8uZXJyb3JDb2Rlcy5wcm92aWRlci5jaGFpbkRpc2Nvbm5lY3RlZCxlKSxjdXN0b206ZT0+e2lmKCFlfHxcIm9iamVjdFwiIT10eXBlb2YgZXx8QXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoXCJFdGhlcmV1bSBQcm92aWRlciBjdXN0b20gZXJyb3JzIG11c3QgcHJvdmlkZSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50LlwiKTtjb25zdHtjb2RlOnQsbWVzc2FnZTpyLGRhdGE6aX09ZTtpZighcnx8XCJzdHJpbmdcIiE9dHlwZW9mIHIpdGhyb3cgbmV3IEVycm9yKCdcIm1lc3NhZ2VcIiBtdXN0IGJlIGEgbm9uZW1wdHkgc3RyaW5nJyk7cmV0dXJuIG5ldyBuLkV0aGVyZXVtUHJvdmlkZXJFcnJvcih0LHIsaSl9fX19LDk4MjY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3QuWHk9dC5DZz10LlN5PXZvaWQgMDtjb25zdCBuPXIoMjI5NCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJDZ1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBuLkV0aGVyZXVtUnBjRXJyb3J9fSk7Y29uc3QgaT1yKDg3NTMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiWHlcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5zZXJpYWxpemVFcnJvcn19KTtjb25zdCBvPXIoODc5Nyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJTeVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvLmV0aEVycm9yc319KTtyKDI2NjIpfSw4NzUzOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnNlcmlhbGl6ZUVycm9yPXQuaXNWYWxpZENvZGU9dC5nZXRNZXNzYWdlRnJvbUNvZGU9dC5KU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRT12b2lkIDA7Y29uc3Qgbj1yKDI2NjIpLGk9cigyMjk0KSxvPW4uZXJyb3JDb2Rlcy5ycGMuaW50ZXJuYWwscz17Y29kZTpvLG1lc3NhZ2U6YShvKX07ZnVuY3Rpb24gYShlLHI9XCJVbnNwZWNpZmllZCBlcnJvciBtZXNzYWdlLiBUaGlzIGlzIGEgYnVnLCBwbGVhc2UgcmVwb3J0IGl0LlwiKXtpZihOdW1iZXIuaXNJbnRlZ2VyKGUpKXtjb25zdCByPWUudG9TdHJpbmcoKTtpZihkKG4uZXJyb3JWYWx1ZXMscikpcmV0dXJuIG4uZXJyb3JWYWx1ZXNbcl0ubWVzc2FnZTtpZihmKGUpKXJldHVybiB0LkpTT05fUlBDX1NFUlZFUl9FUlJPUl9NRVNTQUdFfXJldHVybiByfWZ1bmN0aW9uIGMoZSl7aWYoIU51bWJlci5pc0ludGVnZXIoZSkpcmV0dXJuITE7Y29uc3QgdD1lLnRvU3RyaW5nKCk7cmV0dXJuISFuLmVycm9yVmFsdWVzW3RdfHwhIWYoZSl9ZnVuY3Rpb24gZihlKXtyZXR1cm4gZT49LTMyMDk5JiZlPD0tMzJlM31mdW5jdGlvbiB1KGUpe3JldHVybiBlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmIUFycmF5LmlzQXJyYXkoZSk/T2JqZWN0LmFzc2lnbih7fSxlKTplfWZ1bmN0aW9uIGQoZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9dC5KU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRT1cIlVuc3BlY2lmaWVkIHNlcnZlciBlcnJvci5cIix0LmdldE1lc3NhZ2VGcm9tQ29kZT1hLHQuaXNWYWxpZENvZGU9Yyx0LnNlcmlhbGl6ZUVycm9yPWZ1bmN0aW9uKGUse2ZhbGxiYWNrRXJyb3I6dD1zLHNob3VsZEluY2x1ZGVTdGFjazpyPSExfT17fSl7dmFyIG4sbztpZighdHx8IU51bWJlci5pc0ludGVnZXIodC5jb2RlKXx8XCJzdHJpbmdcIiE9dHlwZW9mIHQubWVzc2FnZSl0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IHByb3ZpZGUgZmFsbGJhY2sgZXJyb3Igd2l0aCBpbnRlZ2VyIG51bWJlciBjb2RlIGFuZCBzdHJpbmcgbWVzc2FnZS5cIik7aWYoZSBpbnN0YW5jZW9mIGkuRXRoZXJldW1ScGNFcnJvcilyZXR1cm4gZS5zZXJpYWxpemUoKTtjb25zdCBmPXt9O2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiYhQXJyYXkuaXNBcnJheShlKSYmZChlLFwiY29kZVwiKSYmYyhlLmNvZGUpKXtjb25zdCB0PWU7Zi5jb2RlPXQuY29kZSx0Lm1lc3NhZ2UmJlwic3RyaW5nXCI9PXR5cGVvZiB0Lm1lc3NhZ2U/KGYubWVzc2FnZT10Lm1lc3NhZ2UsZCh0LFwiZGF0YVwiKSYmKGYuZGF0YT10LmRhdGEpKTooZi5tZXNzYWdlPWEoZi5jb2RlKSxmLmRhdGE9e29yaWdpbmFsRXJyb3I6dShlKX0pfWVsc2V7Zi5jb2RlPXQuY29kZTtjb25zdCByPW51bGw9PT0obj1lKXx8dm9pZCAwPT09bj92b2lkIDA6bi5tZXNzYWdlO2YubWVzc2FnZT1yJiZcInN0cmluZ1wiPT10eXBlb2Ygcj9yOnQubWVzc2FnZSxmLmRhdGE9e29yaWdpbmFsRXJyb3I6dShlKX19Y29uc3QgaD1udWxsPT09KG89ZSl8fHZvaWQgMD09PW8/dm9pZCAwOm8uc3RhY2s7cmV0dXJuIHImJmUmJmgmJlwic3RyaW5nXCI9PXR5cGVvZiBoJiYoZi5zdGFjaz1oKSxmfX0sNjg3NzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKDMzOSk7ZnVuY3Rpb24gaShlKXtyZXR1cm4hKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwhL14oMHgpP1swLTlhLWZdezUxMn0kL2kudGVzdChlKXx8IS9eKDB4KT9bMC05YS1mXXs1MTJ9JC8udGVzdChlKSYmIS9eKDB4KT9bMC05QS1GXXs1MTJ9JC8udGVzdChlKSl9ZnVuY3Rpb24gbyhlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiB0JiZ0LmNvbnN0cnVjdG9yPT09VWludDhBcnJheSYmKHQ9bi5ieXRlc1RvSGV4KHQpKTtjb25zdCByPW4ua2VjY2FrMjU2KHQpLnJlcGxhY2UoXCIweFwiLFwiXCIpO2ZvcihsZXQgdD0wO3Q8MTI7dCs9NCl7Y29uc3Qgbj0ocGFyc2VJbnQoci5zdWJzdHIodCwyKSwxNik8PDgpK3BhcnNlSW50KHIuc3Vic3RyKHQrMiwyKSwxNikmMjA0NyxpPTE8PG4lNDtpZigocyhlLmNoYXJDb2RlQXQoZS5sZW5ndGgtMS1NYXRoLmZsb29yKG4vNCkpKSZpKSE9PWkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gcyhlKXtpZihlPj00OCYmZTw9NTcpcmV0dXJuIGUtNDg7aWYoZT49NjUmJmU8PTcwKXJldHVybiBlLTU1O2lmKGU+PTk3JiZlPD0xMDIpcmV0dXJuIGUtODc7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBibG9vbVwiKX1mdW5jdGlvbiBhKGUpe3JldHVybiEoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCEvXigweCk/WzAtOWEtZl17NjR9JC9pLnRlc3QoZSl8fCEvXigweCk/WzAtOWEtZl17NjR9JC8udGVzdChlKSYmIS9eKDB4KT9bMC05QS1GXXs2NH0kLy50ZXN0KGUpKX1mdW5jdGlvbiBjKGUpe3JldHVybiEoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCFlLm1hdGNoKC9eKDB4KT9bMC05YS1mQS1GXXs0MH0kLykmJiFlLm1hdGNoKC9eWEVbMC05XXsyfVswLTlBLVphLXpdezMwLDMxfSQvKSl9dC5pc0Jsb29tPWksdC5pc0luQmxvb209byx0LmlzVXNlckV0aGVyZXVtQWRkcmVzc0luQmxvb209ZnVuY3Rpb24oZSx0KXtpZighaShlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJsb29tIGdpdmVuXCIpO2lmKCFjKHQpKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBldGhlcmV1bSBhZGRyZXNzIGdpdmVuOiBcIiR7dH1cImApO3JldHVybiBvKGUsbi5wYWRMZWZ0KHQsNjQpKX0sdC5pc0NvbnRyYWN0QWRkcmVzc0luQmxvb209ZnVuY3Rpb24oZSx0KXtpZighaShlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJsb29tIGdpdmVuXCIpO2lmKCFjKHQpKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb250cmFjdCBhZGRyZXNzIGdpdmVuOiBcIiR7dH1cImApO3JldHVybiBvKGUsdCl9LHQuaXNUb3BpY0luQmxvb209ZnVuY3Rpb24oZSx0KXtpZighaShlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJsb29tIGdpdmVuXCIpO2lmKCFhKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdG9waWNcIik7cmV0dXJuIG8oZSx0KX0sdC5pc1RvcGljPWEsdC5pc0FkZHJlc3M9Y30sMzM5OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIoMTA5NCk7ZnVuY3Rpb24gaShlKXtpZihudWxsPT1lKXRocm93IG5ldyBFcnJvcihcImNhbm5vdCBjb252ZXJ0IG51bGwgdmFsdWUgdG8gYXJyYXlcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2NvbnN0IHQ9ZS5tYXRjaCgvXigweCk/WzAtOWEtZkEtRl0qJC8pO2lmKCF0KXRocm93IG5ldyBFcnJvcihcImludmFsaWQgaGV4aWRlY2ltYWwgc3RyaW5nXCIpO2lmKFwiMHhcIiE9PXRbMV0pdGhyb3cgbmV3IEVycm9yKFwiaGV4IHN0cmluZyBtdXN0IGhhdmUgMHggcHJlZml4XCIpOyhlPWUuc3Vic3RyaW5nKDIpKS5sZW5ndGglMiYmKGU9XCIwXCIrZSk7Y29uc3Qgcj1bXTtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrPTIpci5wdXNoKHBhcnNlSW50KGUuc3Vic3RyKHQsMiksMTYpKTtyZXR1cm4gbyhuZXcgVWludDhBcnJheShyKSl9aWYoZnVuY3Rpb24oZSl7aWYoIWV8fHBhcnNlSW50KFN0cmluZyhlLmxlbmd0aCkpIT1lLmxlbmd0aHx8XCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuITE7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2NvbnN0IHI9ZVt0XTtpZihyPDB8fHI+PTI1Nnx8cGFyc2VJbnQoU3RyaW5nKHIpKSE9cilyZXR1cm4hMX1yZXR1cm4hMH0oZSkpcmV0dXJuIG8obmV3IFVpbnQ4QXJyYXkoZSkpO3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgYXJyYXlpZnkgdmFsdWVcIil9ZnVuY3Rpb24gbyhlKXtyZXR1cm4gdm9pZCAwIT09ZS5zbGljZXx8KGUuc2xpY2U9KCk9Pntjb25zdCB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7cmV0dXJuIG8obmV3IFVpbnQ4QXJyYXkoQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGUsdCkpKX0pLGV9dC5rZWNjYWsyNTY9ZnVuY3Rpb24oZSl7cmV0dXJuXCIweFwiK24ua2VjY2FrXzI1NihpKGUpKX0sdC5wYWRMZWZ0PShlLHQpPT57Y29uc3Qgcj0vXjB4L2kudGVzdChlKXx8XCJudW1iZXJcIj09dHlwZW9mIGUsbj10LShlPWUudG9TdHJpbmcoKS5yZXBsYWNlKC9eMHgvaSxcIlwiKSkubGVuZ3RoKzE+PTA/dC1lLmxlbmd0aCsxOjA7cmV0dXJuKHI/XCIweFwiOlwiXCIpK25ldyBBcnJheShuKS5qb2luKFwiMFwiKStlfSx0LmJ5dGVzVG9IZXg9ZnVuY3Rpb24oZSl7Y29uc3QgdD1bXTtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl0LnB1c2goKGVbcl0+Pj40KS50b1N0cmluZygxNikpLHQucHVzaCgoMTUmZVtyXSkudG9TdHJpbmcoMTYpKTtyZXR1cm5gMHgke3Quam9pbihcIlwiKS5yZXBsYWNlKC9eMCsvLFwiXCIpfWB9LHQudG9CeXRlQXJyYXk9aX0sNTQ0MzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4NzY0KS5CdWZmZXI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5jcmVhdGVIYXNoRnVuY3Rpb249ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciByPWUoKTtyZXR1cm4gci51cGRhdGUodCksbi5mcm9tKHIuZGlnZXN0KCkpfX19LDIxOTI6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNTQ0MyksaT1yKDU4MTEpO3Qua2VjY2FrMjI0PW4uY3JlYXRlSGFzaEZ1bmN0aW9uKChmdW5jdGlvbigpe3JldHVybiBpKFwia2VjY2FrMjI0XCIpfSkpLHQua2VjY2FrMjU2PW4uY3JlYXRlSGFzaEZ1bmN0aW9uKChmdW5jdGlvbigpe3JldHVybiBpKFwia2VjY2FrMjU2XCIpfSkpLHQua2VjY2FrMzg0PW4uY3JlYXRlSGFzaEZ1bmN0aW9uKChmdW5jdGlvbigpe3JldHVybiBpKFwia2VjY2FrMzg0XCIpfSkpLHQua2VjY2FrNTEyPW4uY3JlYXRlSGFzaEZ1bmN0aW9uKChmdW5jdGlvbigpe3JldHVybiBpKFwia2VjY2FrNTEyXCIpfSkpfSwzMjQyOihlLHQscik9PntlLmV4cG9ydHM9cig5MjAzKShyKDUxNjYpKX0sNTE2NjooZSx0LHIpPT57Y29uc3Qgbj1uZXcoMCxyKDYyNjYpLmVjKShcInNlY3AyNTZrMVwiKSxpPW4uY3VydmUsbz1pLm4uY29uc3RydWN0b3I7ZnVuY3Rpb24gcyhlKXtjb25zdCB0PWVbMF07c3dpdGNoKHQpe2Nhc2UgMjpjYXNlIDM6cmV0dXJuIDMzIT09ZS5sZW5ndGg/bnVsbDpmdW5jdGlvbihlLHQpe2xldCByPW5ldyBvKHQpO2lmKHIuY21wKGkucCk+PTApcmV0dXJuIG51bGw7cj1yLnRvUmVkKGkucmVkKTtsZXQgcz1yLnJlZFNxcigpLnJlZElNdWwocikucmVkSUFkZChpLmIpLnJlZFNxcnQoKTtyZXR1cm4gMz09PWUhPT1zLmlzT2RkKCkmJihzPXMucmVkTmVnKCkpLG4ua2V5UGFpcih7cHViOnt4OnIseTpzfX0pfSh0LGUuc3ViYXJyYXkoMSwzMykpO2Nhc2UgNDpjYXNlIDY6Y2FzZSA3OnJldHVybiA2NSE9PWUubGVuZ3RoP251bGw6ZnVuY3Rpb24oZSx0LHIpe2xldCBzPW5ldyBvKHQpLGE9bmV3IG8ocik7aWYocy5jbXAoaS5wKT49MHx8YS5jbXAoaS5wKT49MClyZXR1cm4gbnVsbDtpZihzPXMudG9SZWQoaS5yZWQpLGE9YS50b1JlZChpLnJlZCksKDY9PT1lfHw3PT09ZSkmJmEuaXNPZGQoKSE9PSg3PT09ZSkpcmV0dXJuIG51bGw7Y29uc3QgYz1zLnJlZFNxcigpLnJlZElNdWwocyk7cmV0dXJuIGEucmVkU3FyKCkucmVkSVN1YihjLnJlZElBZGQoaS5iKSkuaXNaZXJvKCk/bi5rZXlQYWlyKHtwdWI6e3g6cyx5OmF9fSk6bnVsbH0odCxlLnN1YmFycmF5KDEsMzMpLGUuc3ViYXJyYXkoMzMsNjUpKTtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBhKGUsdCl7Y29uc3Qgcj10LmVuY29kZShudWxsLDMzPT09ZS5sZW5ndGgpO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7Kyt0KWVbdF09clt0XX1lLmV4cG9ydHM9e2NvbnRleHRSYW5kb21pemU6KCk9PjAscHJpdmF0ZUtleVZlcmlmeShlKXtjb25zdCB0PW5ldyBvKGUpO3JldHVybiB0LmNtcChpLm4pPDAmJiF0LmlzWmVybygpPzA6MX0scHJpdmF0ZUtleU5lZ2F0ZShlKXtjb25zdCB0PW5ldyBvKGUpLHI9aS5uLnN1Yih0KS51bW9kKGkubikudG9BcnJheUxpa2UoVWludDhBcnJheSxcImJlXCIsMzIpO3JldHVybiBlLnNldChyKSwwfSxwcml2YXRlS2V5VHdlYWtBZGQoZSx0KXtjb25zdCByPW5ldyBvKHQpO2lmKHIuY21wKGkubik+PTApcmV0dXJuIDE7aWYoci5pYWRkKG5ldyBvKGUpKSxyLmNtcChpLm4pPj0wJiZyLmlzdWIoaS5uKSxyLmlzWmVybygpKXJldHVybiAxO2NvbnN0IG49ci50b0FycmF5TGlrZShVaW50OEFycmF5LFwiYmVcIiwzMik7cmV0dXJuIGUuc2V0KG4pLDB9LHByaXZhdGVLZXlUd2Vha011bChlLHQpe2xldCByPW5ldyBvKHQpO2lmKHIuY21wKGkubik+PTB8fHIuaXNaZXJvKCkpcmV0dXJuIDE7ci5pbXVsKG5ldyBvKGUpKSxyLmNtcChpLm4pPj0wJiYocj1yLnVtb2QoaS5uKSk7Y29uc3Qgbj1yLnRvQXJyYXlMaWtlKFVpbnQ4QXJyYXksXCJiZVwiLDMyKTtyZXR1cm4gZS5zZXQobiksMH0scHVibGljS2V5VmVyaWZ5OmU9Pm51bGw9PT1zKGUpPzE6MCxwdWJsaWNLZXlDcmVhdGUoZSx0KXtjb25zdCByPW5ldyBvKHQpO3JldHVybiByLmNtcChpLm4pPj0wfHxyLmlzWmVybygpPzE6KGEoZSxuLmtleUZyb21Qcml2YXRlKHQpLmdldFB1YmxpYygpKSwwKX0scHVibGljS2V5Q29udmVydChlLHQpe2NvbnN0IHI9cyh0KTtyZXR1cm4gbnVsbD09PXI/MTooYShlLHIuZ2V0UHVibGljKCkpLDApfSxwdWJsaWNLZXlOZWdhdGUoZSx0KXtjb25zdCByPXModCk7aWYobnVsbD09PXIpcmV0dXJuIDE7Y29uc3Qgbj1yLmdldFB1YmxpYygpO3JldHVybiBuLnk9bi55LnJlZE5lZygpLGEoZSxuKSwwfSxwdWJsaWNLZXlDb21iaW5lKGUsdCl7Y29uc3Qgcj1uZXcgQXJyYXkodC5sZW5ndGgpO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7KytlKWlmKHJbZV09cyh0W2VdKSxudWxsPT09cltlXSlyZXR1cm4gMTtsZXQgbj1yWzBdLmdldFB1YmxpYygpO2ZvcihsZXQgZT0xO2U8ci5sZW5ndGg7KytlKW49bi5hZGQocltlXS5wdWIpO3JldHVybiBuLmlzSW5maW5pdHkoKT8yOihhKGUsbiksMCl9LHB1YmxpY0tleVR3ZWFrQWRkKGUsdCxyKXtjb25zdCBuPXModCk7aWYobnVsbD09PW4pcmV0dXJuIDE7aWYoKHI9bmV3IG8ocikpLmNtcChpLm4pPj0wKXJldHVybiAyO2NvbnN0IGM9bi5nZXRQdWJsaWMoKS5hZGQoaS5nLm11bChyKSk7cmV0dXJuIGMuaXNJbmZpbml0eSgpPzI6KGEoZSxjKSwwKX0scHVibGljS2V5VHdlYWtNdWwoZSx0LHIpe2NvbnN0IG49cyh0KTtyZXR1cm4gbnVsbD09PW4/MToocj1uZXcgbyhyKSkuY21wKGkubik+PTB8fHIuaXNaZXJvKCk/MjooYShlLG4uZ2V0UHVibGljKCkubXVsKHIpKSwwKX0sc2lnbmF0dXJlTm9ybWFsaXplKGUpe2NvbnN0IHQ9bmV3IG8oZS5zdWJhcnJheSgwLDMyKSkscj1uZXcgbyhlLnN1YmFycmF5KDMyLDY0KSk7cmV0dXJuIHQuY21wKGkubik+PTB8fHIuY21wKGkubik+PTA/MTooMT09PXIuY21wKG4ubmgpJiZlLnNldChpLm4uc3ViKHIpLnRvQXJyYXlMaWtlKFVpbnQ4QXJyYXksXCJiZVwiLDMyKSwzMiksMCl9LHNpZ25hdHVyZUV4cG9ydChlLHQpe2NvbnN0IHI9dC5zdWJhcnJheSgwLDMyKSxuPXQuc3ViYXJyYXkoMzIsNjQpO2lmKG5ldyBvKHIpLmNtcChpLm4pPj0wKXJldHVybiAxO2lmKG5ldyBvKG4pLmNtcChpLm4pPj0wKXJldHVybiAxO2NvbnN0e291dHB1dDpzfT1lO2xldCBhPXMuc3ViYXJyYXkoNCwzNyk7YVswXT0wLGEuc2V0KHIsMSk7bGV0IGM9MzMsZj0wO2Zvcig7Yz4xJiYwPT09YVtmXSYmISgxMjgmYVtmKzFdKTstLWMsKytmKTtpZihhPWEuc3ViYXJyYXkoZiksMTI4JmFbMF0pcmV0dXJuIDE7aWYoYz4xJiYwPT09YVswXSYmISgxMjgmYVsxXSkpcmV0dXJuIDE7bGV0IHU9cy5zdWJhcnJheSgzOSw3Mik7dVswXT0wLHUuc2V0KG4sMSk7bGV0IGQ9MzMsaD0wO2Zvcig7ZD4xJiYwPT09dVtoXSYmISgxMjgmdVtoKzFdKTstLWQsKytoKTtyZXR1cm4gdT11LnN1YmFycmF5KGgpLDEyOCZ1WzBdfHxkPjEmJjA9PT11WzBdJiYhKDEyOCZ1WzFdKT8xOihlLm91dHB1dGxlbj02K2MrZCxzWzBdPTQ4LHNbMV09ZS5vdXRwdXRsZW4tMixzWzJdPTIsc1szXT1hLmxlbmd0aCxzLnNldChhLDQpLHNbNCtjXT0yLHNbNStjXT11Lmxlbmd0aCxzLnNldCh1LDYrYyksMCl9LHNpZ25hdHVyZUltcG9ydChlLHQpe2lmKHQubGVuZ3RoPDgpcmV0dXJuIDE7aWYodC5sZW5ndGg+NzIpcmV0dXJuIDE7aWYoNDghPT10WzBdKXJldHVybiAxO2lmKHRbMV0hPT10Lmxlbmd0aC0yKXJldHVybiAxO2lmKDIhPT10WzJdKXJldHVybiAxO2NvbnN0IHI9dFszXTtpZigwPT09cilyZXR1cm4gMTtpZig1K3I+PXQubGVuZ3RoKXJldHVybiAxO2lmKDIhPT10WzQrcl0pcmV0dXJuIDE7Y29uc3Qgbj10WzUrcl07aWYoMD09PW4pcmV0dXJuIDE7aWYoNityK24hPT10Lmxlbmd0aClyZXR1cm4gMTtpZigxMjgmdFs0XSlyZXR1cm4gMTtpZihyPjEmJjA9PT10WzRdJiYhKDEyOCZ0WzVdKSlyZXR1cm4gMTtpZigxMjgmdFtyKzZdKXJldHVybiAxO2lmKG4+MSYmMD09PXRbcis2XSYmISgxMjgmdFtyKzddKSlyZXR1cm4gMTtsZXQgcz10LnN1YmFycmF5KDQsNCtyKTtpZigzMz09PXMubGVuZ3RoJiYwPT09c1swXSYmKHM9cy5zdWJhcnJheSgxKSkscy5sZW5ndGg+MzIpcmV0dXJuIDE7bGV0IGE9dC5zdWJhcnJheSg2K3IpO2lmKDMzPT09YS5sZW5ndGgmJjA9PT1hWzBdJiYoYT1hLnNsaWNlKDEpKSxhLmxlbmd0aD4zMil0aHJvdyBuZXcgRXJyb3IoXCJTIGxlbmd0aCBpcyB0b28gbG9uZ1wiKTtsZXQgYz1uZXcgbyhzKTtjLmNtcChpLm4pPj0wJiYoYz1uZXcgbygwKSk7bGV0IGY9bmV3IG8odC5zdWJhcnJheSg2K3IpKTtyZXR1cm4gZi5jbXAoaS5uKT49MCYmKGY9bmV3IG8oMCkpLGUuc2V0KGMudG9BcnJheUxpa2UoVWludDhBcnJheSxcImJlXCIsMzIpLDApLGUuc2V0KGYudG9BcnJheUxpa2UoVWludDhBcnJheSxcImJlXCIsMzIpLDMyKSwwfSxlY2RzYVNpZ24oZSx0LHIscyxhKXtpZihhKXtjb25zdCBlPWE7YT1uPT57Y29uc3QgaT1lKHQscixudWxsLHMsbik7aWYoIShpIGluc3RhbmNlb2YgVWludDhBcnJheSYmMzI9PT1pLmxlbmd0aCkpdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBpcyB0aGUgd2F5XCIpO3JldHVybiBuZXcgbyhpKX19Y29uc3QgYz1uZXcgbyhyKTtpZihjLmNtcChpLm4pPj0wfHxjLmlzWmVybygpKXJldHVybiAxO2xldCBmO3RyeXtmPW4uc2lnbih0LHIse2Nhbm9uaWNhbDohMCxrOmEscGVyczpzfSl9Y2F0Y2goZSl7cmV0dXJuIDF9cmV0dXJuIGUuc2lnbmF0dXJlLnNldChmLnIudG9BcnJheUxpa2UoVWludDhBcnJheSxcImJlXCIsMzIpLDApLGUuc2lnbmF0dXJlLnNldChmLnMudG9BcnJheUxpa2UoVWludDhBcnJheSxcImJlXCIsMzIpLDMyKSxlLnJlY2lkPWYucmVjb3ZlcnlQYXJhbSwwfSxlY2RzYVZlcmlmeShlLHQscil7Y29uc3QgYT17cjplLnN1YmFycmF5KDAsMzIpLHM6ZS5zdWJhcnJheSgzMiw2NCl9LGM9bmV3IG8oYS5yKSxmPW5ldyBvKGEucyk7aWYoYy5jbXAoaS5uKT49MHx8Zi5jbXAoaS5uKT49MClyZXR1cm4gMTtpZigxPT09Zi5jbXAobi5uaCl8fGMuaXNaZXJvKCl8fGYuaXNaZXJvKCkpcmV0dXJuIDM7Y29uc3QgdT1zKHIpO2lmKG51bGw9PT11KXJldHVybiAyO2NvbnN0IGQ9dS5nZXRQdWJsaWMoKTtyZXR1cm4gbi52ZXJpZnkodCxhLGQpPzA6M30sZWNkc2FSZWNvdmVyKGUsdCxyLHMpe2NvbnN0IGM9e3I6dC5zbGljZSgwLDMyKSxzOnQuc2xpY2UoMzIsNjQpfSxmPW5ldyBvKGMuciksdT1uZXcgbyhjLnMpO2lmKGYuY21wKGkubik+PTB8fHUuY21wKGkubik+PTApcmV0dXJuIDE7aWYoZi5pc1plcm8oKXx8dS5pc1plcm8oKSlyZXR1cm4gMjtsZXQgZDt0cnl7ZD1uLnJlY292ZXJQdWJLZXkocyxjLHIpfWNhdGNoKGUpe3JldHVybiAyfXJldHVybiBhKGUsZCksMH0sZWNkaChlLHQscixhLGMsZix1KXtjb25zdCBkPXModCk7aWYobnVsbD09PWQpcmV0dXJuIDE7Y29uc3QgaD1uZXcgbyhyKTtpZihoLmNtcChpLm4pPj0wfHxoLmlzWmVybygpKXJldHVybiAyO2NvbnN0IGw9ZC5nZXRQdWJsaWMoKS5tdWwoaCk7aWYodm9pZCAwPT09Yyl7Y29uc3QgdD1sLmVuY29kZShudWxsLCEwKSxyPW4uaGFzaCgpLnVwZGF0ZSh0KS5kaWdlc3QoKTtmb3IobGV0IHQ9MDt0PDMyOysrdCllW3RdPXJbdF19ZWxzZXtmfHwoZj1uZXcgVWludDhBcnJheSgzMikpO2NvbnN0IHQ9bC5nZXRYKCkudG9BcnJheShcImJlXCIsMzIpO2ZvcihsZXQgZT0wO2U8MzI7KytlKWZbZV09dFtlXTt1fHwodT1uZXcgVWludDhBcnJheSgzMikpO2NvbnN0IHI9bC5nZXRZKCkudG9BcnJheShcImJlXCIsMzIpO2ZvcihsZXQgZT0wO2U8MzI7KytlKXVbZV09cltlXTtjb25zdCBuPWMoZix1LGEpO2lmKCEobiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkmJm4ubGVuZ3RoPT09ZS5sZW5ndGgpKXJldHVybiAyO2Uuc2V0KG4pfXJldHVybiAwfX19LDkyMDM6ZT0+e2NvbnN0IHQ9XCJJbXBvc3NpYmxlIGNhc2UuIFBsZWFzZSBjcmVhdGUgaXNzdWUuXCIscj1cIlRoZSB0d2VhayB3YXMgb3V0IG9mIHJhbmdlIG9yIHRoZSByZXN1bHRlZCBwcml2YXRlIGtleSBpcyBpbnZhbGlkXCIsbj1cIlRoZSB0d2VhayB3YXMgb3V0IG9mIHJhbmdlIG9yIGVxdWFsIHRvIHplcm9cIixpPVwiUHVibGljIEtleSBjb3VsZCBub3QgYmUgcGFyc2VkXCIsbz1cIlB1YmxpYyBLZXkgc2VyaWFsaXphdGlvbiBlcnJvclwiLHM9XCJTaWduYXR1cmUgY291bGQgbm90IGJlIHBhcnNlZFwiO2Z1bmN0aW9uIGEoZSx0KXtpZighZSl0aHJvdyBuZXcgRXJyb3IodCl9ZnVuY3Rpb24gYyhlLHQscil7aWYoYSh0IGluc3RhbmNlb2YgVWludDhBcnJheSxgRXhwZWN0ZWQgJHtlfSB0byBiZSBhbiBVaW50OEFycmF5YCksdm9pZCAwIT09cilpZihBcnJheS5pc0FycmF5KHIpKXtjb25zdCBuPWBFeHBlY3RlZCAke2V9IHRvIGJlIGFuIFVpbnQ4QXJyYXkgd2l0aCBsZW5ndGggWyR7ci5qb2luKFwiLCBcIil9XWA7YShyLmluY2x1ZGVzKHQubGVuZ3RoKSxuKX1lbHNle2NvbnN0IG49YEV4cGVjdGVkICR7ZX0gdG8gYmUgYW4gVWludDhBcnJheSB3aXRoIGxlbmd0aCAke3J9YDthKHQubGVuZ3RoPT09cixuKX19ZnVuY3Rpb24gZihlKXthKFwiQm9vbGVhblwiPT09ZChlKSxcIkV4cGVjdGVkIGNvbXByZXNzZWQgdG8gYmUgYSBCb29sZWFuXCIpfWZ1bmN0aW9uIHUoZT0oZT0+bmV3IFVpbnQ4QXJyYXkoZSkpLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihlPWUodCkpLGMoXCJvdXRwdXRcIixlLHQpLGV9ZnVuY3Rpb24gZChlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfWUuZXhwb3J0cz1lPT4oe2NvbnRleHRSYW5kb21pemUodCl7aWYoYShudWxsPT09dHx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXksXCJFeHBlY3RlZCBzZWVkIHRvIGJlIGFuIFVpbnQ4QXJyYXkgb3IgbnVsbFwiKSxudWxsIT09dCYmYyhcInNlZWRcIix0LDMyKSwxPT09ZS5jb250ZXh0UmFuZG9taXplKHQpKXRocm93IG5ldyBFcnJvcihcIlVua25vdyBlcnJvciBvbiBjb250ZXh0IHJhbmRvbWl6YXRpb25cIil9LHByaXZhdGVLZXlWZXJpZnk6dD0+KGMoXCJwcml2YXRlIGtleVwiLHQsMzIpLDA9PT1lLnByaXZhdGVLZXlWZXJpZnkodCkpLHByaXZhdGVLZXlOZWdhdGUocil7c3dpdGNoKGMoXCJwcml2YXRlIGtleVwiLHIsMzIpLGUucHJpdmF0ZUtleU5lZ2F0ZShyKSl7Y2FzZSAwOnJldHVybiByO2Nhc2UgMTp0aHJvdyBuZXcgRXJyb3IodCl9fSxwcml2YXRlS2V5VHdlYWtBZGQodCxuKXtzd2l0Y2goYyhcInByaXZhdGUga2V5XCIsdCwzMiksYyhcInR3ZWFrXCIsbiwzMiksZS5wcml2YXRlS2V5VHdlYWtBZGQodCxuKSl7Y2FzZSAwOnJldHVybiB0O2Nhc2UgMTp0aHJvdyBuZXcgRXJyb3Iocil9fSxwcml2YXRlS2V5VHdlYWtNdWwodCxyKXtzd2l0Y2goYyhcInByaXZhdGUga2V5XCIsdCwzMiksYyhcInR3ZWFrXCIsciwzMiksZS5wcml2YXRlS2V5VHdlYWtNdWwodCxyKSl7Y2FzZSAwOnJldHVybiB0O2Nhc2UgMTp0aHJvdyBuZXcgRXJyb3Iobil9fSxwdWJsaWNLZXlWZXJpZnk6dD0+KGMoXCJwdWJsaWMga2V5XCIsdCxbMzMsNjVdKSwwPT09ZS5wdWJsaWNLZXlWZXJpZnkodCkpLHB1YmxpY0tleUNyZWF0ZSh0LHI9ITAsbil7c3dpdGNoKGMoXCJwcml2YXRlIGtleVwiLHQsMzIpLGYociksbj11KG4scj8zMzo2NSksZS5wdWJsaWNLZXlDcmVhdGUobix0KSl7Y2FzZSAwOnJldHVybiBuO2Nhc2UgMTp0aHJvdyBuZXcgRXJyb3IoXCJQcml2YXRlIEtleSBpcyBpbnZhbGlkXCIpO2Nhc2UgMjp0aHJvdyBuZXcgRXJyb3Iobyl9fSxwdWJsaWNLZXlDb252ZXJ0KHQscj0hMCxuKXtzd2l0Y2goYyhcInB1YmxpYyBrZXlcIix0LFszMyw2NV0pLGYociksbj11KG4scj8zMzo2NSksZS5wdWJsaWNLZXlDb252ZXJ0KG4sdCkpe2Nhc2UgMDpyZXR1cm4gbjtjYXNlIDE6dGhyb3cgbmV3IEVycm9yKGkpO2Nhc2UgMjp0aHJvdyBuZXcgRXJyb3Iobyl9fSxwdWJsaWNLZXlOZWdhdGUocixuPSEwLHMpe3N3aXRjaChjKFwicHVibGljIGtleVwiLHIsWzMzLDY1XSksZihuKSxzPXUocyxuPzMzOjY1KSxlLnB1YmxpY0tleU5lZ2F0ZShzLHIpKXtjYXNlIDA6cmV0dXJuIHM7Y2FzZSAxOnRocm93IG5ldyBFcnJvcihpKTtjYXNlIDI6dGhyb3cgbmV3IEVycm9yKHQpO2Nhc2UgMzp0aHJvdyBuZXcgRXJyb3Iobyl9fSxwdWJsaWNLZXlDb21iaW5lKHQscj0hMCxuKXthKEFycmF5LmlzQXJyYXkodCksXCJFeHBlY3RlZCBwdWJsaWMga2V5cyB0byBiZSBhbiBBcnJheVwiKSxhKHQubGVuZ3RoPjAsXCJFeHBlY3RlZCBwdWJsaWMga2V5cyBhcnJheSB3aWxsIGhhdmUgbW9yZSB0aGFuIHplcm8gaXRlbXNcIik7Zm9yKGNvbnN0IGUgb2YgdCljKFwicHVibGljIGtleVwiLGUsWzMzLDY1XSk7c3dpdGNoKGYociksbj11KG4scj8zMzo2NSksZS5wdWJsaWNLZXlDb21iaW5lKG4sdCkpe2Nhc2UgMDpyZXR1cm4gbjtjYXNlIDE6dGhyb3cgbmV3IEVycm9yKGkpO2Nhc2UgMjp0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3VtIG9mIHRoZSBwdWJsaWMga2V5cyBpcyBub3QgdmFsaWRcIik7Y2FzZSAzOnRocm93IG5ldyBFcnJvcihvKX19LHB1YmxpY0tleVR3ZWFrQWRkKHQsbixvPSEwLHMpe3N3aXRjaChjKFwicHVibGljIGtleVwiLHQsWzMzLDY1XSksYyhcInR3ZWFrXCIsbiwzMiksZihvKSxzPXUocyxvPzMzOjY1KSxlLnB1YmxpY0tleVR3ZWFrQWRkKHMsdCxuKSl7Y2FzZSAwOnJldHVybiBzO2Nhc2UgMTp0aHJvdyBuZXcgRXJyb3IoaSk7Y2FzZSAyOnRocm93IG5ldyBFcnJvcihyKX19LHB1YmxpY0tleVR3ZWFrTXVsKHQscixvPSEwLHMpe3N3aXRjaChjKFwicHVibGljIGtleVwiLHQsWzMzLDY1XSksYyhcInR3ZWFrXCIsciwzMiksZihvKSxzPXUocyxvPzMzOjY1KSxlLnB1YmxpY0tleVR3ZWFrTXVsKHMsdCxyKSl7Y2FzZSAwOnJldHVybiBzO2Nhc2UgMTp0aHJvdyBuZXcgRXJyb3IoaSk7Y2FzZSAyOnRocm93IG5ldyBFcnJvcihuKX19LHNpZ25hdHVyZU5vcm1hbGl6ZSh0KXtzd2l0Y2goYyhcInNpZ25hdHVyZVwiLHQsNjQpLGUuc2lnbmF0dXJlTm9ybWFsaXplKHQpKXtjYXNlIDA6cmV0dXJuIHQ7Y2FzZSAxOnRocm93IG5ldyBFcnJvcihzKX19LHNpZ25hdHVyZUV4cG9ydChyLG4pe2MoXCJzaWduYXR1cmVcIixyLDY0KTtjb25zdCBpPXtvdXRwdXQ6bj11KG4sNzIpLG91dHB1dGxlbjo3Mn07c3dpdGNoKGUuc2lnbmF0dXJlRXhwb3J0KGkscikpe2Nhc2UgMDpyZXR1cm4gbi5zbGljZSgwLGkub3V0cHV0bGVuKTtjYXNlIDE6dGhyb3cgbmV3IEVycm9yKHMpO2Nhc2UgMjp0aHJvdyBuZXcgRXJyb3IodCl9fSxzaWduYXR1cmVJbXBvcnQocixuKXtzd2l0Y2goYyhcInNpZ25hdHVyZVwiLHIpLG49dShuLDY0KSxlLnNpZ25hdHVyZUltcG9ydChuLHIpKXtjYXNlIDA6cmV0dXJuIG47Y2FzZSAxOnRocm93IG5ldyBFcnJvcihzKTtjYXNlIDI6dGhyb3cgbmV3IEVycm9yKHQpfX0sZWNkc2FTaWduKHIsbixpPXt9LG8pe2MoXCJtZXNzYWdlXCIsciwzMiksYyhcInByaXZhdGUga2V5XCIsbiwzMiksYShcIk9iamVjdFwiPT09ZChpKSxcIkV4cGVjdGVkIG9wdGlvbnMgdG8gYmUgYW4gT2JqZWN0XCIpLHZvaWQgMCE9PWkuZGF0YSYmYyhcIm9wdGlvbnMuZGF0YVwiLGkuZGF0YSksdm9pZCAwIT09aS5ub25jZWZuJiZhKFwiRnVuY3Rpb25cIj09PWQoaS5ub25jZWZuKSxcIkV4cGVjdGVkIG9wdGlvbnMubm9uY2VmbiB0byBiZSBhIEZ1bmN0aW9uXCIpO2NvbnN0IHM9e3NpZ25hdHVyZTpvPXUobyw2NCkscmVjaWQ6bnVsbH07c3dpdGNoKGUuZWNkc2FTaWduKHMscixuLGkuZGF0YSxpLm5vbmNlZm4pKXtjYXNlIDA6cmV0dXJuIHM7Y2FzZSAxOnRocm93IG5ldyBFcnJvcihcIlRoZSBub25jZSBnZW5lcmF0aW9uIGZ1bmN0aW9uIGZhaWxlZCwgb3IgdGhlIHByaXZhdGUga2V5IHdhcyBpbnZhbGlkXCIpO2Nhc2UgMjp0aHJvdyBuZXcgRXJyb3IodCl9fSxlY2RzYVZlcmlmeSh0LHIsbil7c3dpdGNoKGMoXCJzaWduYXR1cmVcIix0LDY0KSxjKFwibWVzc2FnZVwiLHIsMzIpLGMoXCJwdWJsaWMga2V5XCIsbixbMzMsNjVdKSxlLmVjZHNhVmVyaWZ5KHQscixuKSl7Y2FzZSAwOnJldHVybiEwO2Nhc2UgMzpyZXR1cm4hMTtjYXNlIDE6dGhyb3cgbmV3IEVycm9yKHMpO2Nhc2UgMjp0aHJvdyBuZXcgRXJyb3IoaSl9fSxlY2RzYVJlY292ZXIocixuLGksbz0hMCxoKXtzd2l0Y2goYyhcInNpZ25hdHVyZVwiLHIsNjQpLGEoXCJOdW1iZXJcIj09PWQobikmJm4+PTAmJm48PTMsXCJFeHBlY3RlZCByZWNvdmVyeSBpZCB0byBiZSBhIE51bWJlciB3aXRoaW4gaW50ZXJ2YWwgWzAsIDNdXCIpLGMoXCJtZXNzYWdlXCIsaSwzMiksZihvKSxoPXUoaCxvPzMzOjY1KSxlLmVjZHNhUmVjb3ZlcihoLHIsbixpKSl7Y2FzZSAwOnJldHVybiBoO2Nhc2UgMTp0aHJvdyBuZXcgRXJyb3Iocyk7Y2FzZSAyOnRocm93IG5ldyBFcnJvcihcIlB1YmxpYyBrZXkgY291bGQgbm90IGJlIHJlY292ZXJcIik7Y2FzZSAzOnRocm93IG5ldyBFcnJvcih0KX19LGVjZGgodCxyLG49e30sbyl7c3dpdGNoKGMoXCJwdWJsaWMga2V5XCIsdCxbMzMsNjVdKSxjKFwicHJpdmF0ZSBrZXlcIixyLDMyKSxhKFwiT2JqZWN0XCI9PT1kKG4pLFwiRXhwZWN0ZWQgb3B0aW9ucyB0byBiZSBhbiBPYmplY3RcIiksdm9pZCAwIT09bi5kYXRhJiZjKFwib3B0aW9ucy5kYXRhXCIsbi5kYXRhKSx2b2lkIDAhPT1uLmhhc2hmbj8oYShcIkZ1bmN0aW9uXCI9PT1kKG4uaGFzaGZuKSxcIkV4cGVjdGVkIG9wdGlvbnMuaGFzaGZuIHRvIGJlIGEgRnVuY3Rpb25cIiksdm9pZCAwIT09bi54YnVmJiZjKFwib3B0aW9ucy54YnVmXCIsbi54YnVmLDMyKSx2b2lkIDAhPT1uLnlidWYmJmMoXCJvcHRpb25zLnlidWZcIixuLnlidWYsMzIpLGMoXCJvdXRwdXRcIixvKSk6bz11KG8sMzIpLGUuZWNkaChvLHQscixuLmRhdGEsbi5oYXNoZm4sbi54YnVmLG4ueWJ1Zikpe2Nhc2UgMDpyZXR1cm4gbztjYXNlIDE6dGhyb3cgbmV3IEVycm9yKGkpO2Nhc2UgMjp0aHJvdyBuZXcgRXJyb3IoXCJTY2FsYXIgd2FzIGludmFsaWQgKHplcm8gb3Igb3ZlcmZsb3cpXCIpfX19KX0sNDcyOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDE3OTgpO3QuZ2V0UmFuZG9tQnl0ZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LHIpe24oZSwoZnVuY3Rpb24oZSxuKXtlP3IoZSk6dChuKX0pKX0pKX0sdC5nZXRSYW5kb21CeXRlc1N5bmM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSl9fSw1MDUzOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fYXdhaXRlcnx8ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIG5ldyhyfHwocj1Qcm9taXNlKSkoKGZ1bmN0aW9uKGksbyl7ZnVuY3Rpb24gcyhlKXt0cnl7YyhuLm5leHQoZSkpfWNhdGNoKGUpe28oZSl9fWZ1bmN0aW9uIGEoZSl7dHJ5e2Mobi50aHJvdyhlKSl9Y2F0Y2goZSl7byhlKX19ZnVuY3Rpb24gYyhlKXt2YXIgdDtlLmRvbmU/aShlLnZhbHVlKToodD1lLnZhbHVlLHQgaW5zdGFuY2VvZiByP3Q6bmV3IHIoKGZ1bmN0aW9uKGUpe2UodCl9KSkpLnRoZW4ocyxhKX1jKChuPW4uYXBwbHkoZSx0fHxbXSkpLm5leHQoKSl9KSl9LGk9dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxzPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBvPXtuZXh0OmEoMCksdGhyb3c6YSgxKSxyZXR1cm46YSgyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYob1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxvO2Z1bmN0aW9uIGEobyl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihvKXtpZihyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7czspdHJ5e2lmKHI9MSxuJiYoaT0yJm9bMF0/bi5yZXR1cm46b1swXT9uLnRocm93fHwoKGk9bi5yZXR1cm4pJiZpLmNhbGwobiksMCk6bi5uZXh0KSYmIShpPWkuY2FsbChuLG9bMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChuPTAsaSYmKG89WzImb1swXSxpLnZhbHVlXSksb1swXSl7Y2FzZSAwOmNhc2UgMTppPW87YnJlYWs7Y2FzZSA0OnJldHVybiBzLmxhYmVsKysse3ZhbHVlOm9bMV0sZG9uZTohMX07Y2FzZSA1OnMubGFiZWwrKyxuPW9bMV0sbz1bMF07Y29udGludWU7Y2FzZSA3Om89cy5vcHMucG9wKCkscy50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoISgoaT0oaT1zLnRyeXMpLmxlbmd0aD4wJiZpW2kubGVuZ3RoLTFdKXx8NiE9PW9bMF0mJjIhPT1vWzBdKSl7cz0wO2NvbnRpbnVlfWlmKDM9PT1vWzBdJiYoIWl8fG9bMV0+aVswXSYmb1sxXTxpWzNdKSl7cy5sYWJlbD1vWzFdO2JyZWFrfWlmKDY9PT1vWzBdJiZzLmxhYmVsPGlbMV0pe3MubGFiZWw9aVsxXSxpPW87YnJlYWt9aWYoaSYmcy5sYWJlbDxpWzJdKXtzLmxhYmVsPWlbMl0scy5vcHMucHVzaChvKTticmVha31pWzJdJiZzLm9wcy5wb3AoKSxzLnRyeXMucG9wKCk7Y29udGludWV9bz10LmNhbGwoZSxzKX1jYXRjaChlKXtvPVs2LGVdLG49MH1maW5hbGx5e3I9aT0wfWlmKDUmb1swXSl0aHJvdyBvWzFdO3JldHVybnt2YWx1ZTpvWzBdP29bMV06dm9pZCAwLGRvbmU6ITB9fShbbyxhXSl9fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigzMjQyKSxzPXIoNDcyKTt0LmNyZWF0ZVByaXZhdGVLZXk9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIGkodGhpcywoZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCxzLmdldFJhbmRvbUJ5dGVzKDMyKV07Y2FzZSAxOnJldHVybiBlPXQuc2VudCgpLG8ucHJpdmF0ZUtleVZlcmlmeShlKT9bMixlXTpbMywwXTtjYXNlIDI6cmV0dXJuWzJdfX0pKX0pKX0sdC5jcmVhdGVQcml2YXRlS2V5U3luYz1mdW5jdGlvbigpe2Zvcig7Oyl7dmFyIGU9cy5nZXRSYW5kb21CeXRlc1N5bmMoMzIpO2lmKG8ucHJpdmF0ZUtleVZlcmlmeShlKSlyZXR1cm4gZX19LGZ1bmN0aW9uKGUpe2Zvcih2YXIgciBpbiBlKXQuaGFzT3duUHJvcGVydHkocil8fCh0W3JdPWVbcl0pfShyKDMyNDIpKX0sODY3MDpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4NzY0KS5CdWZmZXIsaT10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLHM9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspcy5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gc30sbz10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmlzWmVyb0FkZHJlc3M9dC56ZXJvQWRkcmVzcz10LmltcG9ydFB1YmxpYz10LnByaXZhdGVUb0FkZHJlc3M9dC5wcml2YXRlVG9QdWJsaWM9dC5wdWJsaWNUb0FkZHJlc3M9dC5wdWJUb0FkZHJlc3M9dC5pc1ZhbGlkUHVibGljPXQuaXNWYWxpZFByaXZhdGU9dC5nZW5lcmF0ZUFkZHJlc3MyPXQuZ2VuZXJhdGVBZGRyZXNzPXQuaXNWYWxpZENoZWNrc3VtQWRkcmVzcz10LnRvQ2hlY2tzdW1BZGRyZXNzPXQuaXNWYWxpZEFkZHJlc3M9dC5BY2NvdW50PXZvaWQgMDt2YXIgcz1vKHIoOTI4MikpLGE9cig0NTM4KSxjPXIoNTA1MyksZj1yKDQ4NDYpLHU9cig2ODYxKSxkPXIoNDY1MSksaD1yKDU2NDEpLGw9cigzNzQ2KSxwPXIoMjk3MSksYj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LHIsbil7dm9pZCAwPT09ZSYmKGU9bmV3IGEuQk4oMCkpLHZvaWQgMD09PXQmJih0PW5ldyBhLkJOKDApKSx2b2lkIDA9PT1yJiYocj11LktFQ0NBSzI1Nl9STFApLHZvaWQgMD09PW4mJihuPXUuS0VDQ0FLMjU2X05VTEwpLHRoaXMubm9uY2U9ZSx0aGlzLmJhbGFuY2U9dCx0aGlzLnN0YXRlUm9vdD1yLHRoaXMuY29kZUhhc2g9bix0aGlzLl92YWxpZGF0ZSgpfXJldHVybiBlLmZyb21BY2NvdW50RGF0YT1mdW5jdGlvbih0KXt2YXIgcj10Lm5vbmNlLG49dC5iYWxhbmNlLGk9dC5zdGF0ZVJvb3Qsbz10LmNvZGVIYXNoO3JldHVybiBuZXcgZShyP25ldyBhLkJOKCgwLGQudG9CdWZmZXIpKHIpKTp2b2lkIDAsbj9uZXcgYS5CTigoMCxkLnRvQnVmZmVyKShuKSk6dm9pZCAwLGk/KDAsZC50b0J1ZmZlcikoaSk6dm9pZCAwLG8/KDAsZC50b0J1ZmZlcikobyk6dm9pZCAwKX0sZS5mcm9tUmxwU2VyaWFsaXplZEFjY291bnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9YS5ybHAuZGVjb2RlKGUpO2lmKCFBcnJheS5pc0FycmF5KHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc2VyaWFsaXplZCBhY2NvdW50IGlucHV0LiBNdXN0IGJlIGFycmF5XCIpO3JldHVybiB0aGlzLmZyb21WYWx1ZXNBcnJheSh0KX0sZS5mcm9tVmFsdWVzQXJyYXk9ZnVuY3Rpb24odCl7dmFyIHI9aSh0LDQpLG49clswXSxvPXJbMV0scz1yWzJdLGM9clszXTtyZXR1cm4gbmV3IGUobmV3IGEuQk4obiksbmV3IGEuQk4obykscyxjKX0sZS5wcm90b3R5cGUuX3ZhbGlkYXRlPWZ1bmN0aW9uKCl7aWYodGhpcy5ub25jZS5sdChuZXcgYS5CTigwKSkpdGhyb3cgbmV3IEVycm9yKFwibm9uY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyb1wiKTtpZih0aGlzLmJhbGFuY2UubHQobmV3IGEuQk4oMCkpKXRocm93IG5ldyBFcnJvcihcImJhbGFuY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyb1wiKTtpZigzMiE9PXRoaXMuc3RhdGVSb290Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJzdGF0ZVJvb3QgbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDMyXCIpO2lmKDMyIT09dGhpcy5jb2RlSGFzaC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiY29kZUhhc2ggbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDMyXCIpfSxlLnByb3RvdHlwZS5yYXc9ZnVuY3Rpb24oKXtyZXR1cm5bKDAscC5iblRvVW5wYWRkZWRCdWZmZXIpKHRoaXMubm9uY2UpLCgwLHAuYm5Ub1VucGFkZGVkQnVmZmVyKSh0aGlzLmJhbGFuY2UpLHRoaXMuc3RhdGVSb290LHRoaXMuY29kZUhhc2hdfSxlLnByb3RvdHlwZS5zZXJpYWxpemU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5ybHAuZW5jb2RlKHRoaXMucmF3KCkpfSxlLnByb3RvdHlwZS5pc0NvbnRyYWN0PWZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuY29kZUhhc2guZXF1YWxzKHUuS0VDQ0FLMjU2X05VTEwpfSxlLnByb3RvdHlwZS5pc0VtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYmFsYW5jZS5pc1plcm8oKSYmdGhpcy5ub25jZS5pc1plcm8oKSYmdGhpcy5jb2RlSGFzaC5lcXVhbHModS5LRUNDQUsyNTZfTlVMTCl9LGV9KCk7dC5BY2NvdW50PWIsdC5pc1ZhbGlkQWRkcmVzcz1mdW5jdGlvbihlKXt0cnl7KDAsbC5hc3NlcnRJc1N0cmluZykoZSl9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuL14weFswLTlhLWZBLUZdezQwfSQvLnRlc3QoZSl9LHQudG9DaGVja3N1bUFkZHJlc3M9ZnVuY3Rpb24oZSx0KXsoMCxsLmFzc2VydElzSGV4U3RyaW5nKShlKTt2YXIgcj0oMCxmLnN0cmlwSGV4UHJlZml4KShlKS50b0xvd2VyQ2FzZSgpLG49XCJcIjt0JiYobj0oMCxwLnRvVHlwZSkodCxwLlR5cGVPdXRwdXQuQk4pLnRvU3RyaW5nKCkrXCIweFwiKTtmb3IodmFyIGk9KDAsaC5rZWNjYWtGcm9tU3RyaW5nKShuK3IpLnRvU3RyaW5nKFwiaGV4XCIpLG89XCIweFwiLHM9MDtzPHIubGVuZ3RoO3MrKylwYXJzZUludChpW3NdLDE2KT49OD9vKz1yW3NdLnRvVXBwZXJDYXNlKCk6bys9cltzXTtyZXR1cm4gb30sdC5pc1ZhbGlkQ2hlY2tzdW1BZGRyZXNzPWZ1bmN0aW9uKGUscil7cmV0dXJuKDAsdC5pc1ZhbGlkQWRkcmVzcykoZSkmJigwLHQudG9DaGVja3N1bUFkZHJlc3MpKGUscik9PT1lfSx0LmdlbmVyYXRlQWRkcmVzcz1mdW5jdGlvbihlLHQpeygwLGwuYXNzZXJ0SXNCdWZmZXIpKGUpLCgwLGwuYXNzZXJ0SXNCdWZmZXIpKHQpO3ZhciByPW5ldyBhLkJOKHQpO3JldHVybiByLmlzWmVybygpPygwLGgucmxwaGFzaCkoW2UsbnVsbF0pLnNsaWNlKC0yMCk6KDAsaC5ybHBoYXNoKShbZSxuLmZyb20oci50b0FycmF5KCkpXSkuc2xpY2UoLTIwKX0sdC5nZW5lcmF0ZUFkZHJlc3MyPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4oMCxsLmFzc2VydElzQnVmZmVyKShlKSwoMCxsLmFzc2VydElzQnVmZmVyKSh0KSwoMCxsLmFzc2VydElzQnVmZmVyKShyKSwoMCxzLmRlZmF1bHQpKDIwPT09ZS5sZW5ndGgpLCgwLHMuZGVmYXVsdCkoMzI9PT10Lmxlbmd0aCksKDAsaC5rZWNjYWsyNTYpKG4uY29uY2F0KFtuLmZyb20oXCJmZlwiLFwiaGV4XCIpLGUsdCwoMCxoLmtlY2NhazI1NikocildKSkuc2xpY2UoLTIwKX0sdC5pc1ZhbGlkUHJpdmF0ZT1mdW5jdGlvbihlKXtyZXR1cm4oMCxjLnByaXZhdGVLZXlWZXJpZnkpKGUpfSx0LmlzVmFsaWRQdWJsaWM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITEpLCgwLGwuYXNzZXJ0SXNCdWZmZXIpKGUpLDY0PT09ZS5sZW5ndGg/KDAsYy5wdWJsaWNLZXlWZXJpZnkpKG4uY29uY2F0KFtuLmZyb20oWzRdKSxlXSkpOiEhdCYmKDAsYy5wdWJsaWNLZXlWZXJpZnkpKGUpfSx0LnB1YlRvQWRkcmVzcz1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0hMSksKDAsbC5hc3NlcnRJc0J1ZmZlcikoZSksdCYmNjQhPT1lLmxlbmd0aCYmKGU9bi5mcm9tKCgwLGMucHVibGljS2V5Q29udmVydCkoZSwhMSkuc2xpY2UoMSkpKSwoMCxzLmRlZmF1bHQpKDY0PT09ZS5sZW5ndGgpLCgwLGgua2VjY2FrKShlKS5zbGljZSgtMjApfSx0LnB1YmxpY1RvQWRkcmVzcz10LnB1YlRvQWRkcmVzcyx0LnByaXZhdGVUb1B1YmxpYz1mdW5jdGlvbihlKXtyZXR1cm4oMCxsLmFzc2VydElzQnVmZmVyKShlKSxuLmZyb20oKDAsYy5wdWJsaWNLZXlDcmVhdGUpKGUsITEpKS5zbGljZSgxKX0sdC5wcml2YXRlVG9BZGRyZXNzPWZ1bmN0aW9uKGUpe3JldHVybigwLHQucHVibGljVG9BZGRyZXNzKSgoMCx0LnByaXZhdGVUb1B1YmxpYykoZSkpfSx0LmltcG9ydFB1YmxpYz1mdW5jdGlvbihlKXtyZXR1cm4oMCxsLmFzc2VydElzQnVmZmVyKShlKSw2NCE9PWUubGVuZ3RoJiYoZT1uLmZyb20oKDAsYy5wdWJsaWNLZXlDb252ZXJ0KShlLCExKS5zbGljZSgxKSkpLGV9LHQuemVyb0FkZHJlc3M9ZnVuY3Rpb24oKXt2YXIgZT0oMCxkLnplcm9zKSgyMCk7cmV0dXJuKDAsZC5idWZmZXJUb0hleCkoZSl9LHQuaXNaZXJvQWRkcmVzcz1mdW5jdGlvbihlKXt0cnl7KDAsbC5hc3NlcnRJc1N0cmluZykoZSl9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuKDAsdC56ZXJvQWRkcmVzcykoKT09PWV9fSw2ODcxOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDg3NjQpLkJ1ZmZlcixpPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQWRkcmVzcz12b2lkIDA7dmFyIG89aShyKDkyODIpKSxzPXIoNDUzOCksYT1yKDQ2NTEpLGM9cig4NjcwKSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXsoMCxvLmRlZmF1bHQpKDIwPT09ZS5sZW5ndGgsXCJJbnZhbGlkIGFkZHJlc3MgbGVuZ3RoXCIpLHRoaXMuYnVmPWV9cmV0dXJuIGUuemVybz1mdW5jdGlvbigpe3JldHVybiBuZXcgZSgoMCxhLnplcm9zKSgyMCkpfSxlLmZyb21TdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuKDAsby5kZWZhdWx0KSgoMCxjLmlzVmFsaWRBZGRyZXNzKSh0KSxcIkludmFsaWQgYWRkcmVzc1wiKSxuZXcgZSgoMCxhLnRvQnVmZmVyKSh0KSl9LGUuZnJvbVB1YmxpY0tleT1mdW5jdGlvbih0KXtyZXR1cm4oMCxvLmRlZmF1bHQpKG4uaXNCdWZmZXIodCksXCJQdWJsaWMga2V5IHNob3VsZCBiZSBCdWZmZXJcIiksbmV3IGUoKDAsYy5wdWJUb0FkZHJlc3MpKHQpKX0sZS5mcm9tUHJpdmF0ZUtleT1mdW5jdGlvbih0KXtyZXR1cm4oMCxvLmRlZmF1bHQpKG4uaXNCdWZmZXIodCksXCJQcml2YXRlIGtleSBzaG91bGQgYmUgQnVmZmVyXCIpLG5ldyBlKCgwLGMucHJpdmF0ZVRvQWRkcmVzcykodCkpfSxlLmdlbmVyYXRlPWZ1bmN0aW9uKHQscil7cmV0dXJuKDAsby5kZWZhdWx0KShzLkJOLmlzQk4ocikpLG5ldyBlKCgwLGMuZ2VuZXJhdGVBZGRyZXNzKSh0LmJ1ZixyLnRvQXJyYXlMaWtlKG4pKSl9LGUuZ2VuZXJhdGUyPWZ1bmN0aW9uKHQscixpKXtyZXR1cm4oMCxvLmRlZmF1bHQpKG4uaXNCdWZmZXIocikpLCgwLG8uZGVmYXVsdCkobi5pc0J1ZmZlcihpKSksbmV3IGUoKDAsYy5nZW5lcmF0ZUFkZHJlc3MyKSh0LmJ1ZixyLGkpKX0sZS5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmJ1Zi5lcXVhbHMoZS5idWYpfSxlLnByb3RvdHlwZS5pc1plcm89ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcXVhbHMoZS56ZXJvKCkpfSxlLnByb3RvdHlwZS5pc1ByZWNvbXBpbGVPclN5c3RlbUFkZHJlc3M9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CTih0aGlzLmJ1ZiksdD1uZXcgcy5CTigwKSxyPW5ldyBzLkJOKFwiZmZmZlwiLFwiaGV4XCIpO3JldHVybiBlLmd0ZSh0KSYmZS5sdGUocil9LGUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIweFwiK3RoaXMuYnVmLnRvU3RyaW5nKFwiaGV4XCIpfSxlLnByb3RvdHlwZS50b0J1ZmZlcj1mdW5jdGlvbigpe3JldHVybiBuLmZyb20odGhpcy5idWYpfSxlfSgpO3QuQWRkcmVzcz1mfSw0NjUxOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDg3NjQpLkJ1ZmZlcixpPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LG89dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxzPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KXMucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIHN9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuYnVmQXJyVG9BcnI9dC5hcnJUb0J1ZkFycj10LnZhbGlkYXRlTm9MZWFkaW5nWmVyb2VzPXQuYmFUb0pTT049dC50b1V0Zjg9dC5hZGRIZXhQcmVmaXg9dC50b1Vuc2lnbmVkPXQuZnJvbVNpZ25lZD10LmJ1ZmZlclRvSGV4PXQuYnVmZmVyVG9JbnQ9dC50b0J1ZmZlcj10LnVucGFkSGV4U3RyaW5nPXQudW5wYWRBcnJheT10LnVucGFkQnVmZmVyPXQuc2V0TGVuZ3RoUmlnaHQ9dC5zZXRMZW5ndGhMZWZ0PXQuemVyb3M9dC5pbnRUb0J1ZmZlcj10LmludFRvSGV4PXZvaWQgMDt2YXIgcz1yKDQ1MzgpLGE9cig0ODQ2KSxjPXIoMzc0Nik7dC5pbnRUb0hleD1mdW5jdGlvbihlKXtpZighTnVtYmVyLmlzU2FmZUludGVnZXIoZSl8fGU8MCl0aHJvdyBuZXcgRXJyb3IoXCJSZWNlaXZlZCBhbiBpbnZhbGlkIGludGVnZXIgdHlwZTogXCIuY29uY2F0KGUpKTtyZXR1cm5cIjB4XCIuY29uY2F0KGUudG9TdHJpbmcoMTYpKX0sdC5pbnRUb0J1ZmZlcj1mdW5jdGlvbihlKXt2YXIgcj0oMCx0LmludFRvSGV4KShlKTtyZXR1cm4gbi5mcm9tKCgwLGEucGFkVG9FdmVuKShyLnNsaWNlKDIpKSxcImhleFwiKX0sdC56ZXJvcz1mdW5jdGlvbihlKXtyZXR1cm4gbi5hbGxvY1Vuc2FmZShlKS5maWxsKDApfTt2YXIgZj1mdW5jdGlvbihlLHIsbil7dmFyIGk9KDAsdC56ZXJvcykocik7cmV0dXJuIG4/ZS5sZW5ndGg8cj8oZS5jb3B5KGkpLGkpOmUuc2xpY2UoMCxyKTplLmxlbmd0aDxyPyhlLmNvcHkoaSxyLWUubGVuZ3RoKSxpKTplLnNsaWNlKC1yKX07dC5zZXRMZW5ndGhMZWZ0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuKDAsYy5hc3NlcnRJc0J1ZmZlcikoZSksZihlLHQsITEpfSx0LnNldExlbmd0aFJpZ2h0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuKDAsYy5hc3NlcnRJc0J1ZmZlcikoZSksZihlLHQsITApfTt2YXIgdT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZVswXTtlLmxlbmd0aD4wJiZcIjBcIj09PXQudG9TdHJpbmcoKTspdD0oZT1lLnNsaWNlKDEpKVswXTtyZXR1cm4gZX07dC51bnBhZEJ1ZmZlcj1mdW5jdGlvbihlKXtyZXR1cm4oMCxjLmFzc2VydElzQnVmZmVyKShlKSx1KGUpfSx0LnVucGFkQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuKDAsYy5hc3NlcnRJc0FycmF5KShlKSx1KGUpfSx0LnVucGFkSGV4U3RyaW5nPWZ1bmN0aW9uKGUpe3JldHVybigwLGMuYXNzZXJ0SXNIZXhTdHJpbmcpKGUpLGU9KDAsYS5zdHJpcEhleFByZWZpeCkoZSksdShlKX0sdC50b0J1ZmZlcj1mdW5jdGlvbihlKXtpZihudWxsPT1lKXJldHVybiBuLmFsbG9jVW5zYWZlKDApO2lmKG4uaXNCdWZmZXIoZSkpcmV0dXJuIG4uZnJvbShlKTtpZihBcnJheS5pc0FycmF5KGUpfHxlIGluc3RhbmNlb2YgVWludDhBcnJheSlyZXR1cm4gbi5mcm9tKGUpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZighKDAsYS5pc0hleFN0cmluZykoZSkpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbnZlcnQgc3RyaW5nIHRvIGJ1ZmZlci4gdG9CdWZmZXIgb25seSBzdXBwb3J0cyAweC1wcmVmaXhlZCBoZXggc3RyaW5ncyBhbmQgdGhpcyBzdHJpbmcgd2FzIGdpdmVuOiBcIi5jb25jYXQoZSkpO3JldHVybiBuLmZyb20oKDAsYS5wYWRUb0V2ZW4pKCgwLGEuc3RyaXBIZXhQcmVmaXgpKGUpKSxcImhleFwiKX1pZihcIm51bWJlclwiPT10eXBlb2YgZSlyZXR1cm4oMCx0LmludFRvQnVmZmVyKShlKTtpZihzLkJOLmlzQk4oZSkpe2lmKGUuaXNOZWcoKSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29udmVydCBuZWdhdGl2ZSBCTiB0byBidWZmZXIuIEdpdmVuOiBcIi5jb25jYXQoZSkpO3JldHVybiBlLnRvQXJyYXlMaWtlKG4pfWlmKGUudG9BcnJheSlyZXR1cm4gbi5mcm9tKGUudG9BcnJheSgpKTtpZihlLnRvQnVmZmVyKXJldHVybiBuLmZyb20oZS50b0J1ZmZlcigpKTt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHR5cGVcIil9LHQuYnVmZmVyVG9JbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBzLkJOKCgwLHQudG9CdWZmZXIpKGUpKS50b051bWJlcigpfSx0LmJ1ZmZlclRvSGV4PWZ1bmN0aW9uKGUpe3JldHVyblwiMHhcIisoZT0oMCx0LnRvQnVmZmVyKShlKSkudG9TdHJpbmcoXCJoZXhcIil9LHQuZnJvbVNpZ25lZD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHMuQk4oZSkuZnJvbVR3b3MoMjU2KX0sdC50b1Vuc2lnbmVkPWZ1bmN0aW9uKGUpe3JldHVybiBuLmZyb20oZS50b1R3b3MoMjU2KS50b0FycmF5KCkpfSx0LmFkZEhleFByZWZpeD1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZXx8KDAsYS5pc0hleFByZWZpeGVkKShlKT9lOlwiMHhcIitlfSx0LnRvVXRmOD1mdW5jdGlvbihlKXtpZigoZT0oMCxhLnN0cmlwSGV4UHJlZml4KShlKSkubGVuZ3RoJTIhPTApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBub24tZXZlbiBoZXggc3RyaW5nIGlucHV0IGZvciB0b1V0ZjgoKSBwcm92aWRlZFwiKTtyZXR1cm4gbi5mcm9tKGUucmVwbGFjZSgvXigwMCkrfCgwMCkrJC9nLFwiXCIpLFwiaGV4XCIpLnRvU3RyaW5nKFwidXRmOFwiKX0sdC5iYVRvSlNPTj1mdW5jdGlvbihlKXtpZihuLmlzQnVmZmVyKGUpKXJldHVyblwiMHhcIi5jb25jYXQoZS50b1N0cmluZyhcImhleFwiKSk7aWYoZSBpbnN0YW5jZW9mIEFycmF5KXtmb3IodmFyIHI9W10saT0wO2k8ZS5sZW5ndGg7aSsrKXIucHVzaCgoMCx0LmJhVG9KU09OKShlW2ldKSk7cmV0dXJuIHJ9fSx0LnZhbGlkYXRlTm9MZWFkaW5nWmVyb2VzPWZ1bmN0aW9uKGUpe3ZhciB0LHI7dHJ5e2Zvcih2YXIgbj1pKE9iamVjdC5lbnRyaWVzKGUpKSxzPW4ubmV4dCgpOyFzLmRvbmU7cz1uLm5leHQoKSl7dmFyIGE9byhzLnZhbHVlLDIpLGM9YVswXSxmPWFbMV07aWYodm9pZCAwIT09ZiYmZi5sZW5ndGg+MCYmMD09PWZbMF0pdGhyb3cgbmV3IEVycm9yKFwiXCIuY29uY2F0KGMsXCIgY2Fubm90IGhhdmUgbGVhZGluZyB6ZXJvZXMsIHJlY2VpdmVkOiBcIikuY29uY2F0KGYudG9TdHJpbmcoXCJoZXhcIikpKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKHI9bi5yZXR1cm4pJiZyLmNhbGwobil9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fX0sdC5hcnJUb0J1ZkFycj1mdW5jdGlvbiBlKHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpP3QubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZSh0KX0pKTpuLmZyb20odCl9LHQuYnVmQXJyVG9BcnI9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGUodCl9KSk6VWludDhBcnJheS5mcm9tKG51bGwhPXQ/dDpbXSl9fSw2ODYxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LktFQ0NBSzI1Nl9STFA9dC5LRUNDQUsyNTZfUkxQX1M9dC5LRUNDQUsyNTZfUkxQX0FSUkFZPXQuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TPXQuS0VDQ0FLMjU2X05VTEw9dC5LRUNDQUsyNTZfTlVMTF9TPXQuVFdPX1BPVzI1Nj10Lk1BWF9JTlRFR0VSPXQuTUFYX1VJTlQ2ND12b2lkIDA7dmFyIG49cig4NzY0KSxpPXIoNDUzOCk7dC5NQVhfVUlOVDY0PW5ldyBpLkJOKFwiZmZmZmZmZmZmZmZmZmZmZlwiLDE2KSx0Lk1BWF9JTlRFR0VSPW5ldyBpLkJOKFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiLDE2KSx0LlRXT19QT1cyNTY9bmV3IGkuQk4oXCIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLDE2KSx0LktFQ0NBSzI1Nl9OVUxMX1M9XCJjNWQyNDYwMTg2ZjcyMzNjOTI3ZTdkYjJkY2M3MDNjMGU1MDBiNjUzY2E4MjI3M2I3YmZhZDgwNDVkODVhNDcwXCIsdC5LRUNDQUsyNTZfTlVMTD1uLkJ1ZmZlci5mcm9tKHQuS0VDQ0FLMjU2X05VTExfUyxcImhleFwiKSx0LktFQ0NBSzI1Nl9STFBfQVJSQVlfUz1cIjFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDdcIix0LktFQ0NBSzI1Nl9STFBfQVJSQVk9bi5CdWZmZXIuZnJvbSh0LktFQ0NBSzI1Nl9STFBfQVJSQVlfUyxcImhleFwiKSx0LktFQ0NBSzI1Nl9STFBfUz1cIjU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjFcIix0LktFQ0NBSzI1Nl9STFA9bi5CdWZmZXIuZnJvbSh0LktFQ0NBSzI1Nl9STFBfUyxcImhleFwiKX0sNDUzODpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PW4mJihuPXIpO3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpJiYhKFwiZ2V0XCJpbiBpPyF0Ll9fZXNNb2R1bGU6aS53cml0YWJsZXx8aS5jb25maWd1cmFibGUpfHwoaT17ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtyXX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLGkpfTpmdW5jdGlvbihlLHQscixuKXt2b2lkIDA9PT1uJiYobj1yKSxlW25dPXRbcl19KSxpPXRoaXMmJnRoaXMuX19zZXRNb2R1bGVEZWZhdWx0fHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KX06ZnVuY3Rpb24oZSx0KXtlLmRlZmF1bHQ9dH0pLG89dGhpcyYmdGhpcy5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgciBpbiBlKVwiZGVmYXVsdFwiIT09ciYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJm4odCxlLHIpO3JldHVybiBpKHQsZSksdH0scz10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnJscD10LkJOPXZvaWQgMDt2YXIgYT1zKHIoMzU1MCkpO3QuQk49YS5kZWZhdWx0O3ZhciBjPW8ocigxNjc1KSk7dC5ybHA9Y30sNTY0MTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4NzY0KS5CdWZmZXI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5ybHBoYXNoPXQucmlwZW1kMTYwRnJvbUFycmF5PXQucmlwZW1kMTYwRnJvbVN0cmluZz10LnJpcGVtZDE2MD10LnNoYTI1NkZyb21BcnJheT10LnNoYTI1NkZyb21TdHJpbmc9dC5zaGEyNTY9dC5rZWNjYWtGcm9tQXJyYXk9dC5rZWNjYWtGcm9tSGV4U3RyaW5nPXQua2VjY2FrRnJvbVN0cmluZz10LmtlY2NhazI1Nj10LmtlY2Nhaz12b2lkIDA7dmFyIGk9cigyMTkyKSxvPXIoMzQ4Mikscz1yKDQ1MzgpLGE9cig0NjUxKSxjPXIoMzc0Nik7dC5rZWNjYWs9ZnVuY3Rpb24oZSx0KXtzd2l0Y2godm9pZCAwPT09dCYmKHQ9MjU2KSwoMCxjLmFzc2VydElzQnVmZmVyKShlKSx0KXtjYXNlIDIyNDpyZXR1cm4oMCxpLmtlY2NhazIyNCkoZSk7Y2FzZSAyNTY6cmV0dXJuKDAsaS5rZWNjYWsyNTYpKGUpO2Nhc2UgMzg0OnJldHVybigwLGkua2VjY2FrMzg0KShlKTtjYXNlIDUxMjpyZXR1cm4oMCxpLmtlY2NhazUxMikoZSk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGQgYWxnb3JpdGhtOiBrZWNjYWtcIi5jb25jYXQodCkpfX0sdC5rZWNjYWsyNTY9ZnVuY3Rpb24oZSl7cmV0dXJuKDAsdC5rZWNjYWspKGUpfSx0LmtlY2Nha0Zyb21TdHJpbmc9ZnVuY3Rpb24oZSxyKXt2b2lkIDA9PT1yJiYocj0yNTYpLCgwLGMuYXNzZXJ0SXNTdHJpbmcpKGUpO3ZhciBpPW4uZnJvbShlLFwidXRmOFwiKTtyZXR1cm4oMCx0LmtlY2NhaykoaSxyKX0sdC5rZWNjYWtGcm9tSGV4U3RyaW5nPWZ1bmN0aW9uKGUscil7cmV0dXJuIHZvaWQgMD09PXImJihyPTI1NiksKDAsYy5hc3NlcnRJc0hleFN0cmluZykoZSksKDAsdC5rZWNjYWspKCgwLGEudG9CdWZmZXIpKGUpLHIpfSx0LmtlY2Nha0Zyb21BcnJheT1mdW5jdGlvbihlLHIpe3JldHVybiB2b2lkIDA9PT1yJiYocj0yNTYpLCgwLGMuYXNzZXJ0SXNBcnJheSkoZSksKDAsdC5rZWNjYWspKCgwLGEudG9CdWZmZXIpKGUpLHIpfTt2YXIgZj1mdW5jdGlvbihlKXtyZXR1cm4gZT0oMCxhLnRvQnVmZmVyKShlKSxvKFwic2hhMjU2XCIpLnVwZGF0ZShlKS5kaWdlc3QoKX07dC5zaGEyNTY9ZnVuY3Rpb24oZSl7cmV0dXJuKDAsYy5hc3NlcnRJc0J1ZmZlcikoZSksZihlKX0sdC5zaGEyNTZGcm9tU3RyaW5nPWZ1bmN0aW9uKGUpe3JldHVybigwLGMuYXNzZXJ0SXNTdHJpbmcpKGUpLGYoZSl9LHQuc2hhMjU2RnJvbUFycmF5PWZ1bmN0aW9uKGUpe3JldHVybigwLGMuYXNzZXJ0SXNBcnJheSkoZSksZihlKX07dmFyIHU9ZnVuY3Rpb24oZSx0KXtlPSgwLGEudG9CdWZmZXIpKGUpO3ZhciByPW8oXCJybWQxNjBcIikudXBkYXRlKGUpLmRpZ2VzdCgpO3JldHVybiEwPT09dD8oMCxhLnNldExlbmd0aExlZnQpKHIsMzIpOnJ9O3QucmlwZW1kMTYwPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKDAsYy5hc3NlcnRJc0J1ZmZlcikoZSksdShlLHQpfSx0LnJpcGVtZDE2MEZyb21TdHJpbmc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oMCxjLmFzc2VydElzU3RyaW5nKShlKSx1KGUsdCl9LHQucmlwZW1kMTYwRnJvbUFycmF5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuKDAsYy5hc3NlcnRJc0FycmF5KShlKSx1KGUsdCl9LHQucmxwaGFzaD1mdW5jdGlvbihlKXtyZXR1cm4oMCx0LmtlY2Nhaykocy5ybHAuZW5jb2RlKGUpKX19LDM3NDY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoODc2NCkuQnVmZmVyO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuYXNzZXJ0SXNTdHJpbmc9dC5hc3NlcnRJc0FycmF5PXQuYXNzZXJ0SXNCdWZmZXI9dC5hc3NlcnRJc0hleFN0cmluZz12b2lkIDA7dmFyIGk9cig0ODQ2KTt0LmFzc2VydElzSGV4U3RyaW5nPWZ1bmN0aW9uKGUpe2lmKCEoMCxpLmlzSGV4U3RyaW5nKShlKSl7dmFyIHQ9XCJUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIDB4LXByZWZpeGVkIGhleCBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6IFwiLmNvbmNhdChlKTt0aHJvdyBuZXcgRXJyb3IodCl9fSx0LmFzc2VydElzQnVmZmVyPWZ1bmN0aW9uKGUpe2lmKCFuLmlzQnVmZmVyKGUpKXt2YXIgdD1cIlRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgQnVmZmVyIGJ1dCBpbnB1dCB3YXM6IFwiLmNvbmNhdChlKTt0aHJvdyBuZXcgRXJyb3IodCl9fSx0LmFzc2VydElzQXJyYXk9ZnVuY3Rpb24oZSl7aWYoIUFycmF5LmlzQXJyYXkoZSkpe3ZhciB0PVwiVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBudW1iZXIgYXJyYXlzIGJ1dCBpbnB1dCB3YXM6IFwiLmNvbmNhdChlKTt0aHJvdyBuZXcgRXJyb3IodCl9fSx0LmFzc2VydElzU3RyaW5nPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXt2YXIgdD1cIlRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgc3RyaW5ncyBidXQgaW5wdXQgd2FzOiBcIi5jb25jYXQoZSk7dGhyb3cgbmV3IEVycm9yKHQpfX19LDI3NTE6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19jcmVhdGVCaW5kaW5nfHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQscixuKXt2b2lkIDA9PT1uJiYobj1yKTt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aSYmIShcImdldFwiaW4gaT8hdC5fX2VzTW9kdWxlOmkud3JpdGFibGV8fGkuY29uZmlndXJhYmxlKXx8KGk9e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbcl19fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbixpKX06ZnVuY3Rpb24oZSx0LHIsbil7dm9pZCAwPT09biYmKG49ciksZVtuXT10W3JdfSksaT10aGlzJiZ0aGlzLl9fZXhwb3J0U3Rhcnx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gZSlcImRlZmF1bHRcIj09PXJ8fE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LHIpfHxuKHQsZSxyKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5pc0hleFN0cmluZz10LmdldEtleXM9dC5mcm9tQXNjaWk9dC5mcm9tVXRmOD10LnRvQXNjaWk9dC5hcnJheUNvbnRhaW5zQXJyYXk9dC5nZXRCaW5hcnlTaXplPXQucGFkVG9FdmVuPXQuc3RyaXBIZXhQcmVmaXg9dC5pc0hleFByZWZpeGVkPXZvaWQgMCxpKHIoNjg2MSksdCksaShyKDg2NzApLHQpLGkocig2ODcxKSx0KSxpKHIoNTY0MSksdCksaShyKDcxMTIpLHQpLGkocig0NjUxKSx0KSxpKHIoODY3KSx0KSxpKHIoNDUzOCksdCksaShyKDI5NzEpLHQpO3ZhciBvPXIoNDg0Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJpc0hleFByZWZpeGVkXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG8uaXNIZXhQcmVmaXhlZH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInN0cmlwSGV4UHJlZml4XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG8uc3RyaXBIZXhQcmVmaXh9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwYWRUb0V2ZW5cIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5wYWRUb0V2ZW59fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJnZXRCaW5hcnlTaXplXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG8uZ2V0QmluYXJ5U2l6ZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImFycmF5Q29udGFpbnNBcnJheVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvLmFycmF5Q29udGFpbnNBcnJheX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInRvQXNjaWlcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby50b0FzY2lpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiZnJvbVV0ZjhcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5mcm9tVXRmOH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImZyb21Bc2NpaVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvLmZyb21Bc2NpaX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImdldEtleXNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5nZXRLZXlzfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiaXNIZXhTdHJpbmdcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5pc0hleFN0cmluZ319KX0sNDg0NjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4NzY0KS5CdWZmZXI7ZnVuY3Rpb24gaShlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJbaXNIZXhQcmVmaXhlZF0gaW5wdXQgbXVzdCBiZSB0eXBlICdzdHJpbmcnLCByZWNlaXZlZCB0eXBlIFwiLmNvbmNhdCh0eXBlb2YgZSkpO3JldHVyblwiMFwiPT09ZVswXSYmXCJ4XCI9PT1lWzFdfWZ1bmN0aW9uIG8oZSl7dmFyIHQ9ZTtpZihcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJbcGFkVG9FdmVuXSB2YWx1ZSBtdXN0IGJlIHR5cGUgJ3N0cmluZycsIHJlY2VpdmVkIFwiLmNvbmNhdCh0eXBlb2YgdCkpO3JldHVybiB0Lmxlbmd0aCUyJiYodD1cIjBcIi5jb25jYXQodCkpLHR9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5pc0hleFN0cmluZz10LmdldEtleXM9dC5mcm9tQXNjaWk9dC5mcm9tVXRmOD10LnRvQXNjaWk9dC5hcnJheUNvbnRhaW5zQXJyYXk9dC5nZXRCaW5hcnlTaXplPXQucGFkVG9FdmVuPXQuc3RyaXBIZXhQcmVmaXg9dC5pc0hleFByZWZpeGVkPXZvaWQgMCx0LmlzSGV4UHJlZml4ZWQ9aSx0LnN0cmlwSGV4UHJlZml4PWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIltzdHJpcEhleFByZWZpeF0gaW5wdXQgbXVzdCBiZSB0eXBlICdzdHJpbmcnLCByZWNlaXZlZCBcIi5jb25jYXQodHlwZW9mIGUpKTtyZXR1cm4gaShlKT9lLnNsaWNlKDIpOmV9LHQucGFkVG9FdmVuPW8sdC5nZXRCaW5hcnlTaXplPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIltnZXRCaW5hcnlTaXplXSBtZXRob2QgcmVxdWlyZXMgaW5wdXQgdHlwZSAnc3RyaW5nJywgcmVjaWV2ZWQgXCIuY29uY2F0KHR5cGVvZiBlKSk7cmV0dXJuIG4uYnl0ZUxlbmd0aChlLFwidXRmOFwiKX0sdC5hcnJheUNvbnRhaW5zQXJyYXk9ZnVuY3Rpb24oZSx0LHIpe2lmKCEwIT09QXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoXCJbYXJyYXlDb250YWluc0FycmF5XSBtZXRob2QgcmVxdWlyZXMgaW5wdXQgJ3N1cGVyc2V0JyB0byBiZSBhbiBhcnJheSwgZ290IHR5cGUgJ1wiLmNvbmNhdCh0eXBlb2YgZSxcIidcIikpO2lmKCEwIT09QXJyYXkuaXNBcnJheSh0KSl0aHJvdyBuZXcgRXJyb3IoXCJbYXJyYXlDb250YWluc0FycmF5XSBtZXRob2QgcmVxdWlyZXMgaW5wdXQgJ3N1YnNldCcgdG8gYmUgYW4gYXJyYXksIGdvdCB0eXBlICdcIi5jb25jYXQodHlwZW9mIHQsXCInXCIpKTtyZXR1cm4gdFtyP1wic29tZVwiOlwiZXZlcnlcIl0oKGZ1bmN0aW9uKHQpe3JldHVybiBlLmluZGV4T2YodCk+PTB9KSl9LHQudG9Bc2NpaT1mdW5jdGlvbihlKXt2YXIgdD1cIlwiLHI9MCxuPWUubGVuZ3RoO2ZvcihcIjB4XCI9PT1lLnN1YnN0cmluZygwLDIpJiYocj0yKTtyPG47cis9Mil7dmFyIGk9cGFyc2VJbnQoZS5zdWJzdHIociwyKSwxNik7dCs9U3RyaW5nLmZyb21DaGFyQ29kZShpKX1yZXR1cm4gdH0sdC5mcm9tVXRmOD1mdW5jdGlvbihlKXt2YXIgdD1uLmZyb20oZSxcInV0ZjhcIik7cmV0dXJuXCIweFwiLmNvbmNhdChvKHQudG9TdHJpbmcoXCJoZXhcIikpLnJlcGxhY2UoL14wK3wwKyQvZyxcIlwiKSl9LHQuZnJvbUFzY2lpPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cIlwiLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZS5jaGFyQ29kZUF0KHIpLnRvU3RyaW5nKDE2KTt0Kz1uLmxlbmd0aDwyP1wiMFwiLmNvbmNhdChuKTpufXJldHVyblwiMHhcIi5jb25jYXQodCl9LHQuZ2V0S2V5cz1mdW5jdGlvbihlLHQscil7aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEVycm9yKFwiW2dldEtleXNdIG1ldGhvZCBleHBlY3RzIGlucHV0ICdwYXJhbXMnIHRvIGJlIGFuIGFycmF5LCBnb3QgXCIuY29uY2F0KHR5cGVvZiBlKSk7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiW2dldEtleXNdIG1ldGhvZCBleHBlY3RzIGlucHV0ICdrZXknIHRvIGJlIHR5cGUgJ3N0cmluZycsIGdvdCBcIi5jb25jYXQodHlwZW9mIGUpKTtmb3IodmFyIG49W10saT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgbz1lW2ldW3RdO2lmKHImJiFvKW89XCJcIjtlbHNlIGlmKFwic3RyaW5nXCIhPXR5cGVvZiBvKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgYWJpIC0gZXhwZWN0ZWQgdHlwZSAnc3RyaW5nJywgcmVjZWl2ZWQgXCIuY29uY2F0KHR5cGVvZiBvKSk7bi5wdXNoKG8pfXJldHVybiBufSx0LmlzSGV4U3RyaW5nPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIShcInN0cmluZ1wiIT10eXBlb2YgZXx8IWUubWF0Y2goL14weFswLTlBLUZhLWZdKiQvKXx8dCYmZS5sZW5ndGghPT0yKzIqdCl9fSw4Njc6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoODc2NCkuQnVmZmVyLGk9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZpbmVQcm9wZXJ0aWVzPXZvaWQgMDt2YXIgbz1pKHIoOTI4MikpLHM9cig0ODQ2KSxhPXIoNDUzOCksYz1yKDQ2NTEpO3QuZGVmaW5lUHJvcGVydGllcz1mdW5jdGlvbihlLHQscil7aWYoZS5yYXc9W10sZS5fZmllbGRzPVtdLGUudG9KU09OPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQmJih0PSExKSx0KXt2YXIgcj17fTtyZXR1cm4gZS5fZmllbGRzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JbdF09XCIweFwiLmNvbmNhdChlW3RdLnRvU3RyaW5nKFwiaGV4XCIpKX0pKSxyfXJldHVybigwLGMuYmFUb0pTT04pKGUucmF3KX0sZS5zZXJpYWxpemU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5ybHAuZW5jb2RlKGUucmF3KX0sdC5mb3JFYWNoKChmdW5jdGlvbih0LHIpe2Z1bmN0aW9uIGkoKXtyZXR1cm4gZS5yYXdbcl19ZnVuY3Rpb24gcyhpKXtcIjAwXCIhPT0oaT0oMCxjLnRvQnVmZmVyKShpKSkudG9TdHJpbmcoXCJoZXhcIil8fHQuYWxsb3daZXJvfHwoaT1uLmFsbG9jVW5zYWZlKDApKSx0LmFsbG93TGVzcyYmdC5sZW5ndGg/KGk9KDAsYy51bnBhZEJ1ZmZlcikoaSksKDAsby5kZWZhdWx0KSh0Lmxlbmd0aD49aS5sZW5ndGgsXCJUaGUgZmllbGQgXCIuY29uY2F0KHQubmFtZSxcIiBtdXN0IG5vdCBoYXZlIG1vcmUgXCIpLmNvbmNhdCh0Lmxlbmd0aCxcIiBieXRlc1wiKSkpOnQuYWxsb3daZXJvJiYwPT09aS5sZW5ndGh8fCF0Lmxlbmd0aHx8KDAsby5kZWZhdWx0KSh0Lmxlbmd0aD09PWkubGVuZ3RoLFwiVGhlIGZpZWxkIFwiLmNvbmNhdCh0Lm5hbWUsXCIgbXVzdCBoYXZlIGJ5dGUgbGVuZ3RoIG9mIFwiKS5jb25jYXQodC5sZW5ndGgpKSxlLnJhd1tyXT1pfWUuX2ZpZWxkcy5wdXNoKHQubmFtZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdC5uYW1lLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6aSxzZXQ6c30pLHQuZGVmYXVsdCYmKGVbdC5uYW1lXT10LmRlZmF1bHQpLHQuYWxpYXMmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQuYWxpYXMse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwLHNldDpzLGdldDppfSl9KSkscilpZihcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9bi5mcm9tKCgwLHMuc3RyaXBIZXhQcmVmaXgpKHIpLFwiaGV4XCIpKSxuLmlzQnVmZmVyKHIpJiYocj1hLnJscC5kZWNvZGUocikpLEFycmF5LmlzQXJyYXkocikpe2lmKHIubGVuZ3RoPmUuX2ZpZWxkcy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwid3JvbmcgbnVtYmVyIG9mIGZpZWxkcyBpbiBkYXRhXCIpO3IuZm9yRWFjaCgoZnVuY3Rpb24odCxyKXtlW2UuX2ZpZWxkc1tyXV09KDAsYy50b0J1ZmZlcikodCl9KSl9ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2Ygcil0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGRhdGFcIik7dmFyIGk9T2JqZWN0LmtleXMocik7dC5mb3JFYWNoKChmdW5jdGlvbih0KXstMSE9PWkuaW5kZXhPZih0Lm5hbWUpJiYoZVt0Lm5hbWVdPXJbdC5uYW1lXSksLTEhPT1pLmluZGV4T2YodC5hbGlhcykmJihlW3QuYWxpYXNdPXJbdC5hbGlhc10pfSkpfX19LDcxMTI6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoODc2NCkuQnVmZmVyO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuaGFzaFBlcnNvbmFsTWVzc2FnZT10LmlzVmFsaWRTaWduYXR1cmU9dC5mcm9tUnBjU2lnPXQudG9Db21wYWN0U2lnPXQudG9ScGNTaWc9dC5lY3JlY292ZXI9dC5lY3NpZ249dm9pZCAwO3ZhciBpPXIoNTA1Myksbz1yKDQ1MzgpLHM9cig0NjUxKSxhPXIoNTY0MSksYz1yKDM3NDYpLGY9cigyOTcxKTtmdW5jdGlvbiB1KGUsdCl7dmFyIHI9KDAsZi50b1R5cGUpKGUsZi5UeXBlT3V0cHV0LkJOKTtpZihyLmVxbigwKXx8ci5lcW4oMSkpcmV0dXJuKDAsZi50b1R5cGUpKGUsZi5UeXBlT3V0cHV0LkJOKTtpZighdClyZXR1cm4gci5zdWJuKDI3KTt2YXIgbj0oMCxmLnRvVHlwZSkodCxmLlR5cGVPdXRwdXQuQk4pO3JldHVybiByLnN1YihuLm11bG4oMikuYWRkbigzNSkpfWZ1bmN0aW9uIGQoZSl7dmFyIHQ9bmV3IG8uQk4oZSk7cmV0dXJuIHQuZXFuKDApfHx0LmVxbigxKX10LmVjc2lnbj1mdW5jdGlvbihlLHQscil7dmFyIG89KDAsaS5lY2RzYVNpZ24pKGUsdCkscz1vLnNpZ25hdHVyZSxhPW8ucmVjaWQsYz1uLmZyb20ocy5zbGljZSgwLDMyKSksdT1uLmZyb20ocy5zbGljZSgzMiw2NCkpO2lmKCFyfHxcIm51bWJlclwiPT10eXBlb2Ygcil7aWYociYmIU51bWJlci5pc1NhZmVJbnRlZ2VyKHIpKXRocm93IG5ldyBFcnJvcihcIlRoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgaW5wdXQgdHlwZSlcIik7cmV0dXJue3I6YyxzOnUsdjpyP2ErKDIqciszNSk6YSsyN319cmV0dXJue3I6YyxzOnUsdjooMCxmLnRvVHlwZSkocixmLlR5cGVPdXRwdXQuQk4pLm11bG4oMikuYWRkbigzNSkuYWRkbihhKS50b0FycmF5TGlrZShuKX19LHQuZWNyZWNvdmVyPWZ1bmN0aW9uKGUsdCxyLG8sYSl7dmFyIGM9bi5jb25jYXQoWygwLHMuc2V0TGVuZ3RoTGVmdCkociwzMiksKDAscy5zZXRMZW5ndGhMZWZ0KShvLDMyKV0sNjQpLGY9dSh0LGEpO2lmKCFkKGYpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWVcIik7dmFyIGg9KDAsaS5lY2RzYVJlY292ZXIpKGMsZi50b051bWJlcigpLGUpO3JldHVybiBuLmZyb20oKDAsaS5wdWJsaWNLZXlDb252ZXJ0KShoLCExKS5zbGljZSgxKSl9LHQudG9ScGNTaWc9ZnVuY3Rpb24oZSx0LHIsaSl7aWYoIWQodShlLGkpKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNpZ25hdHVyZSB2IHZhbHVlXCIpO3JldHVybigwLHMuYnVmZmVyVG9IZXgpKG4uY29uY2F0KFsoMCxzLnNldExlbmd0aExlZnQpKHQsMzIpLCgwLHMuc2V0TGVuZ3RoTGVmdCkociwzMiksKDAscy50b0J1ZmZlcikoZSldKSl9LHQudG9Db21wYWN0U2lnPWZ1bmN0aW9uKGUsdCxyLGkpe2lmKCFkKHUoZSxpKSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzaWduYXR1cmUgdiB2YWx1ZVwiKTt2YXIgbz0oMCxmLnRvVHlwZSkoZSxmLlR5cGVPdXRwdXQuTnVtYmVyKSxhPXI7cmV0dXJuKG8+MjgmJm8lMj09MXx8MT09PW98fDI4PT09bykmJigoYT1uLmZyb20ocikpWzBdfD0xMjgpLCgwLHMuYnVmZmVyVG9IZXgpKG4uY29uY2F0KFsoMCxzLnNldExlbmd0aExlZnQpKHQsMzIpLCgwLHMuc2V0TGVuZ3RoTGVmdCkoYSwzMildKSl9LHQuZnJvbVJwY1NpZz1mdW5jdGlvbihlKXt2YXIgdCxyLG4saT0oMCxzLnRvQnVmZmVyKShlKTtpZihpLmxlbmd0aD49NjUpdD1pLnNsaWNlKDAsMzIpLHI9aS5zbGljZSgzMiw2NCksbj0oMCxzLmJ1ZmZlclRvSW50KShpLnNsaWNlKDY0KSk7ZWxzZXtpZig2NCE9PWkubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc2lnbmF0dXJlIGxlbmd0aFwiKTt0PWkuc2xpY2UoMCwzMikscj1pLnNsaWNlKDMyLDY0KSxuPSgwLHMuYnVmZmVyVG9JbnQpKGkuc2xpY2UoMzIsMzMpKT4+NyxyWzBdJj0xMjd9cmV0dXJuIG48MjcmJihuKz0yNykse3Y6bixyOnQsczpyfX0sdC5pc1ZhbGlkU2lnbmF0dXJlPWZ1bmN0aW9uKGUsdCxyLG4saSl7dm9pZCAwPT09biYmKG49ITApO3ZhciBzPW5ldyBvLkJOKFwiN2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY1ZDU3NmU3MzU3YTQ1MDFkZGZlOTJmNDY2ODFiMjBhMFwiLDE2KSxhPW5ldyBvLkJOKFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MVwiLDE2KTtpZigzMiE9PXQubGVuZ3RofHwzMiE9PXIubGVuZ3RoKXJldHVybiExO2lmKCFkKHUoZSxpKSkpcmV0dXJuITE7dmFyIGM9bmV3IG8uQk4odCksZj1uZXcgby5CTihyKTtyZXR1cm4hKGMuaXNaZXJvKCl8fGMuZ3QoYSl8fGYuaXNaZXJvKCl8fGYuZ3QoYSl8fG4mJjE9PT1mLmNtcChzKSl9LHQuaGFzaFBlcnNvbmFsTWVzc2FnZT1mdW5jdGlvbihlKXsoMCxjLmFzc2VydElzQnVmZmVyKShlKTt2YXIgdD1uLmZyb20oXCJcdTAwMTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG5cIi5jb25jYXQoZS5sZW5ndGgpLFwidXRmLThcIik7cmV0dXJuKDAsYS5rZWNjYWspKG4uY29uY2F0KFt0LGVdKSl9fSwyOTcxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDg3NjQpLkJ1ZmZlcjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnRvVHlwZT10LlR5cGVPdXRwdXQ9dC5iblRvUmxwPXQuYm5Ub1VucGFkZGVkQnVmZmVyPXQuYm5Ub0hleD12b2lkIDA7dmFyIGksbz1yKDQ1MzgpLHM9cig0ODQ2KSxhPXIoNDY1MSk7ZnVuY3Rpb24gYyhlKXtyZXR1cm4oMCxhLnVucGFkQnVmZmVyKShlLnRvQXJyYXlMaWtlKG4pKX10LmJuVG9IZXg9ZnVuY3Rpb24oZSl7cmV0dXJuXCIweFwiLmNvbmNhdChlLnRvU3RyaW5nKDE2KSl9LHQuYm5Ub1VucGFkZGVkQnVmZmVyPWMsdC5iblRvUmxwPWZ1bmN0aW9uKGUpe3JldHVybiBjKGUpfSxmdW5jdGlvbihlKXtlW2UuTnVtYmVyPTBdPVwiTnVtYmVyXCIsZVtlLkJOPTFdPVwiQk5cIixlW2UuQnVmZmVyPTJdPVwiQnVmZmVyXCIsZVtlLlByZWZpeGVkSGV4U3RyaW5nPTNdPVwiUHJlZml4ZWRIZXhTdHJpbmdcIn0oaT10LlR5cGVPdXRwdXR8fCh0LlR5cGVPdXRwdXQ9e30pKSx0LnRvVHlwZT1mdW5jdGlvbihlLHQpe2lmKG51bGw9PT1lKXJldHVybiBudWxsO2lmKHZvaWQgMCE9PWUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYhKDAscy5pc0hleFN0cmluZykoZSkpdGhyb3cgbmV3IEVycm9yKFwiQSBzdHJpbmcgbXVzdCBiZSBwcm92aWRlZCB3aXRoIGEgMHgtcHJlZml4LCBnaXZlbjogXCIuY29uY2F0KGUpKTtpZihcIm51bWJlclwiPT10eXBlb2YgZSYmIU51bWJlci5pc1NhZmVJbnRlZ2VyKGUpKXRocm93IG5ldyBFcnJvcihcIlRoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgaW5wdXQgdHlwZSlcIik7dmFyIHI9KDAsYS50b0J1ZmZlcikoZSk7aWYodD09PWkuQnVmZmVyKXJldHVybiByO2lmKHQ9PT1pLkJOKXJldHVybiBuZXcgby5CTihyKTtpZih0PT09aS5OdW1iZXIpe3ZhciBuPW5ldyBvLkJOKHIpLGM9bmV3IG8uQk4oTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIudG9TdHJpbmcoKSk7aWYobi5ndChjKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIG91dHB1dCB0eXBlKVwiKTtyZXR1cm4gbi50b051bWJlcigpfXJldHVyblwiMHhcIi5jb25jYXQoci50b1N0cmluZyhcImhleFwiKSl9fX0sNDI3ODooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzNTUwKSxpPXIoMzIwNiksbz1uZXcgbigwKSxzPW5ldyBuKC0xKSxhPXtub2V0aGVyOlwiMFwiLHdlaTpcIjFcIixrd2VpOlwiMTAwMFwiLEt3ZWk6XCIxMDAwXCIsYmFiYmFnZTpcIjEwMDBcIixmZW10b2V0aGVyOlwiMTAwMFwiLG13ZWk6XCIxMDAwMDAwXCIsTXdlaTpcIjEwMDAwMDBcIixsb3ZlbGFjZTpcIjEwMDAwMDBcIixwaWNvZXRoZXI6XCIxMDAwMDAwXCIsZ3dlaTpcIjEwMDAwMDAwMDBcIixHd2VpOlwiMTAwMDAwMDAwMFwiLHNoYW5ub246XCIxMDAwMDAwMDAwXCIsbmFub2V0aGVyOlwiMTAwMDAwMDAwMFwiLG5hbm86XCIxMDAwMDAwMDAwXCIsc3phYm86XCIxMDAwMDAwMDAwMDAwXCIsbWljcm9ldGhlcjpcIjEwMDAwMDAwMDAwMDBcIixtaWNybzpcIjEwMDAwMDAwMDAwMDBcIixmaW5uZXk6XCIxMDAwMDAwMDAwMDAwMDAwXCIsbWlsbGlldGhlcjpcIjEwMDAwMDAwMDAwMDAwMDBcIixtaWxsaTpcIjEwMDAwMDAwMDAwMDAwMDBcIixldGhlcjpcIjEwMDAwMDAwMDAwMDAwMDAwMDBcIixrZXRoZXI6XCIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsZ3JhbmQ6XCIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsbWV0aGVyOlwiMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLGdldGhlcjpcIjEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIix0ZXRoZXI6XCIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCJ9O2Z1bmN0aW9uIGMoZSl7dmFyIHQ9ZT9lLnRvTG93ZXJDYXNlKCk6XCJldGhlclwiLHI9YVt0XTtpZihcInN0cmluZ1wiIT10eXBlb2Ygcil0aHJvdyBuZXcgRXJyb3IoXCJbZXRoanMtdW5pdF0gdGhlIHVuaXQgcHJvdmlkZWQgXCIrZStcIiBkb2Vzbid0IGV4aXN0cywgcGxlYXNlIHVzZSB0aGUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdW5pdHMgXCIrSlNPTi5zdHJpbmdpZnkoYSxudWxsLDIpKTtyZXR1cm4gbmV3IG4ociwxMCl9ZnVuY3Rpb24gZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYoIWUubWF0Y2goL14tP1swLTkuXSskLykpdGhyb3cgbmV3IEVycm9yKFwid2hpbGUgY29udmVydGluZyBudW1iZXIgdG8gc3RyaW5nLCBpbnZhbGlkIG51bWJlciB2YWx1ZSAnXCIrZStcIicsIHNob3VsZCBiZSBhIG51bWJlciBtYXRjaGluZyAoXi0/WzAtOS5dKykuXCIpO3JldHVybiBlfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBTdHJpbmcoZSk7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUmJmUudG9TdHJpbmcmJihlLnRvVHdvc3x8ZS5kaXZpZGVkVG9JbnRlZ2VyQnkpKXJldHVybiBlLnRvUHJlY2lzaW9uP1N0cmluZyhlLnRvUHJlY2lzaW9uKCkpOmUudG9TdHJpbmcoMTApO3Rocm93IG5ldyBFcnJvcihcIndoaWxlIGNvbnZlcnRpbmcgbnVtYmVyIHRvIHN0cmluZywgaW52YWxpZCBudW1iZXIgdmFsdWUgJ1wiK2UrXCInIHR5cGUgXCIrdHlwZW9mIGUrXCIuXCIpfWUuZXhwb3J0cz17dW5pdE1hcDphLG51bWJlclRvU3RyaW5nOmYsZ2V0VmFsdWVPZlVuaXQ6Yyxmcm9tV2VpOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1pKGUpLGY9bi5sdChvKSx1PWModCksZD1hW3RdLmxlbmd0aC0xfHwxLGg9cnx8e307ZiYmKG49bi5tdWwocykpO2Zvcih2YXIgbD1uLm1vZCh1KS50b1N0cmluZygxMCk7bC5sZW5ndGg8ZDspbD1cIjBcIitsO2gucGFkfHwobD1sLm1hdGNoKC9eKFswLTldKlsxLTldfDApKDAqKS8pWzFdKTt2YXIgcD1uLmRpdih1KS50b1N0cmluZygxMCk7aC5jb21taWZ5JiYocD1wLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csXCIsXCIpKTt2YXIgYj1wKyhcIjBcIj09bD9cIlwiOlwiLlwiK2wpO3JldHVybiBmJiYoYj1cIi1cIitiKSxifSx0b1dlaTpmdW5jdGlvbihlLHQpe3ZhciByPWYoZSksaT1jKHQpLG89YVt0XS5sZW5ndGgtMXx8MSx1PVwiLVwiPT09ci5zdWJzdHJpbmcoMCwxKTtpZih1JiYocj1yLnN1YnN0cmluZygxKSksXCIuXCI9PT1yKXRocm93IG5ldyBFcnJvcihcIltldGhqcy11bml0XSB3aGlsZSBjb252ZXJ0aW5nIG51bWJlciBcIitlK1wiIHRvIHdlaSwgaW52YWxpZCB2YWx1ZVwiKTt2YXIgZD1yLnNwbGl0KFwiLlwiKTtpZihkLmxlbmd0aD4yKXRocm93IG5ldyBFcnJvcihcIltldGhqcy11bml0XSB3aGlsZSBjb252ZXJ0aW5nIG51bWJlciBcIitlK1wiIHRvIHdlaSwgIHRvbyBtYW55IGRlY2ltYWwgcG9pbnRzXCIpO3ZhciBoPWRbMF0sbD1kWzFdO2lmKGh8fChoPVwiMFwiKSxsfHwobD1cIjBcIiksbC5sZW5ndGg+byl0aHJvdyBuZXcgRXJyb3IoXCJbZXRoanMtdW5pdF0gd2hpbGUgY29udmVydGluZyBudW1iZXIgXCIrZStcIiB0byB3ZWksIHRvbyBtYW55IGRlY2ltYWwgcGxhY2VzXCIpO2Zvcig7bC5sZW5ndGg8bzspbCs9XCIwXCI7aD1uZXcgbihoKSxsPW5ldyBuKGwpO3ZhciBwPWgubXVsKGkpLmFkZChsKTtyZXR1cm4gdSYmKHA9cC5tdWwocykpLG5ldyBuKHAudG9TdHJpbmcoMTApLDEwKX19fSw2NzI5OmU9PntcInVzZSBzdHJpY3RcIjt2YXIgdD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHI9XCJ+XCI7ZnVuY3Rpb24gbigpe31mdW5jdGlvbiBpKGUsdCxyKXt0aGlzLmZuPWUsdGhpcy5jb250ZXh0PXQsdGhpcy5vbmNlPXJ8fCExfWZ1bmN0aW9uIG8oZSx0LG4sbyxzKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO3ZhciBhPW5ldyBpKG4sb3x8ZSxzKSxjPXI/cit0OnQ7cmV0dXJuIGUuX2V2ZW50c1tjXT9lLl9ldmVudHNbY10uZm4/ZS5fZXZlbnRzW2NdPVtlLl9ldmVudHNbY10sYV06ZS5fZXZlbnRzW2NdLnB1c2goYSk6KGUuX2V2ZW50c1tjXT1hLGUuX2V2ZW50c0NvdW50KyspLGV9ZnVuY3Rpb24gcyhlLHQpezA9PS0tZS5fZXZlbnRzQ291bnQ/ZS5fZXZlbnRzPW5ldyBuOmRlbGV0ZSBlLl9ldmVudHNbdF19ZnVuY3Rpb24gYSgpe3RoaXMuX2V2ZW50cz1uZXcgbix0aGlzLl9ldmVudHNDb3VudD0wfU9iamVjdC5jcmVhdGUmJihuLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG51bGwpLChuZXcgbikuX19wcm90b19ffHwocj0hMSkpLGEucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXt2YXIgZSxuLGk9W107aWYoMD09PXRoaXMuX2V2ZW50c0NvdW50KXJldHVybiBpO2ZvcihuIGluIGU9dGhpcy5fZXZlbnRzKXQuY2FsbChlLG4pJiZpLnB1c2gocj9uLnNsaWNlKDEpOm4pO3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2kuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSkpOml9LGEucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdD1yP3IrZTplLG49dGhpcy5fZXZlbnRzW3RdO2lmKCFuKXJldHVybltdO2lmKG4uZm4pcmV0dXJuW24uZm5dO2Zvcih2YXIgaT0wLG89bi5sZW5ndGgscz1uZXcgQXJyYXkobyk7aTxvO2krKylzW2ldPW5baV0uZm47cmV0dXJuIHN9LGEucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9cj9yK2U6ZSxuPXRoaXMuX2V2ZW50c1t0XTtyZXR1cm4gbj9uLmZuPzE6bi5sZW5ndGg6MH0sYS5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlLHQsbixpLG8scyl7dmFyIGE9cj9yK2U6ZTtpZighdGhpcy5fZXZlbnRzW2FdKXJldHVybiExO3ZhciBjLGYsdT10aGlzLl9ldmVudHNbYV0sZD1hcmd1bWVudHMubGVuZ3RoO2lmKHUuZm4pe3N3aXRjaCh1Lm9uY2UmJnRoaXMucmVtb3ZlTGlzdGVuZXIoZSx1LmZuLHZvaWQgMCwhMCksZCl7Y2FzZSAxOnJldHVybiB1LmZuLmNhbGwodS5jb250ZXh0KSwhMDtjYXNlIDI6cmV0dXJuIHUuZm4uY2FsbCh1LmNvbnRleHQsdCksITA7Y2FzZSAzOnJldHVybiB1LmZuLmNhbGwodS5jb250ZXh0LHQsbiksITA7Y2FzZSA0OnJldHVybiB1LmZuLmNhbGwodS5jb250ZXh0LHQsbixpKSwhMDtjYXNlIDU6cmV0dXJuIHUuZm4uY2FsbCh1LmNvbnRleHQsdCxuLGksbyksITA7Y2FzZSA2OnJldHVybiB1LmZuLmNhbGwodS5jb250ZXh0LHQsbixpLG8scyksITB9Zm9yKGY9MSxjPW5ldyBBcnJheShkLTEpO2Y8ZDtmKyspY1tmLTFdPWFyZ3VtZW50c1tmXTt1LmZuLmFwcGx5KHUuY29udGV4dCxjKX1lbHNle3ZhciBoLGw9dS5sZW5ndGg7Zm9yKGY9MDtmPGw7ZisrKXN3aXRjaCh1W2ZdLm9uY2UmJnRoaXMucmVtb3ZlTGlzdGVuZXIoZSx1W2ZdLmZuLHZvaWQgMCwhMCksZCl7Y2FzZSAxOnVbZl0uZm4uY2FsbCh1W2ZdLmNvbnRleHQpO2JyZWFrO2Nhc2UgMjp1W2ZdLmZuLmNhbGwodVtmXS5jb250ZXh0LHQpO2JyZWFrO2Nhc2UgMzp1W2ZdLmZuLmNhbGwodVtmXS5jb250ZXh0LHQsbik7YnJlYWs7Y2FzZSA0OnVbZl0uZm4uY2FsbCh1W2ZdLmNvbnRleHQsdCxuLGkpO2JyZWFrO2RlZmF1bHQ6aWYoIWMpZm9yKGg9MSxjPW5ldyBBcnJheShkLTEpO2g8ZDtoKyspY1toLTFdPWFyZ3VtZW50c1toXTt1W2ZdLmZuLmFwcGx5KHVbZl0uY29udGV4dCxjKX19cmV0dXJuITB9LGEucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbyh0aGlzLGUsdCxyLCExKX0sYS5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQscil7cmV0dXJuIG8odGhpcyxlLHQsciwhMCl9LGEucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCxuLGkpe3ZhciBvPXI/citlOmU7aWYoIXRoaXMuX2V2ZW50c1tvXSlyZXR1cm4gdGhpcztpZighdClyZXR1cm4gcyh0aGlzLG8pLHRoaXM7dmFyIGE9dGhpcy5fZXZlbnRzW29dO2lmKGEuZm4pYS5mbiE9PXR8fGkmJiFhLm9uY2V8fG4mJmEuY29udGV4dCE9PW58fHModGhpcyxvKTtlbHNle2Zvcih2YXIgYz0wLGY9W10sdT1hLmxlbmd0aDtjPHU7YysrKShhW2NdLmZuIT09dHx8aSYmIWFbY10ub25jZXx8biYmYVtjXS5jb250ZXh0IT09bikmJmYucHVzaChhW2NdKTtmLmxlbmd0aD90aGlzLl9ldmVudHNbb109MT09PWYubGVuZ3RoP2ZbMF06ZjpzKHRoaXMsbyl9cmV0dXJuIHRoaXN9LGEucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gZT8odD1yP3IrZTplLHRoaXMuX2V2ZW50c1t0XSYmcyh0aGlzLHQpKToodGhpcy5fZXZlbnRzPW5ldyBuLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXN9LGEucHJvdG90eXBlLm9mZj1hLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixhLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1hLnByb3RvdHlwZS5vbixhLnByZWZpeGVkPXIsYS5FdmVudEVtaXR0ZXI9YSxlLmV4cG9ydHM9YX0sNzE4NzplPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHQscj1cIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdD9SZWZsZWN0Om51bGwsbj1yJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmFwcGx5P3IuYXBwbHk6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChlLHQscil9O3Q9ciYmXCJmdW5jdGlvblwiPT10eXBlb2Ygci5vd25LZXlzP3Iub3duS2V5czpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKSl9OmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKX07dmFyIGk9TnVtYmVyLmlzTmFOfHxmdW5jdGlvbihlKXtyZXR1cm4gZSE9ZX07ZnVuY3Rpb24gbygpe28uaW5pdC5jYWxsKHRoaXMpfWUuZXhwb3J0cz1vLGUuZXhwb3J0cy5vbmNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyLG4pe2Z1bmN0aW9uIGkocil7ZS5yZW1vdmVMaXN0ZW5lcih0LG8pLG4ocil9ZnVuY3Rpb24gbygpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUucmVtb3ZlTGlzdGVuZXImJmUucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGkpLHIoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKX1iKGUsdCxvLHtvbmNlOiEwfSksXCJlcnJvclwiIT09dCYmZnVuY3Rpb24oZSx0LHIpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUub24mJmIoZSxcImVycm9yXCIsdCx7b25jZTohMH0pfShlLGkpfSkpfSxvLkV2ZW50RW1pdHRlcj1vLG8ucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLG8ucHJvdG90eXBlLl9ldmVudHNDb3VudD0wLG8ucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwO3ZhciBzPTEwO2Z1bmN0aW9uIGEoZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKX1mdW5jdGlvbiBjKGUpe3JldHVybiB2b2lkIDA9PT1lLl9tYXhMaXN0ZW5lcnM/by5kZWZhdWx0TWF4TGlzdGVuZXJzOmUuX21heExpc3RlbmVyc31mdW5jdGlvbiBmKGUsdCxyLG4pe3ZhciBpLG8scyxmO2lmKGEociksdm9pZCAwPT09KG89ZS5fZXZlbnRzKT8obz1lLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSxlLl9ldmVudHNDb3VudD0wKToodm9pZCAwIT09by5uZXdMaXN0ZW5lciYmKGUuZW1pdChcIm5ld0xpc3RlbmVyXCIsdCxyLmxpc3RlbmVyP3IubGlzdGVuZXI6ciksbz1lLl9ldmVudHMpLHM9b1t0XSksdm9pZCAwPT09cylzPW9bdF09ciwrK2UuX2V2ZW50c0NvdW50O2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygcz9zPW9bdF09bj9bcixzXTpbcyxyXTpuP3MudW5zaGlmdChyKTpzLnB1c2gociksKGk9YyhlKSk+MCYmcy5sZW5ndGg+aSYmIXMud2FybmVkKXtzLndhcm5lZD0hMDt2YXIgdT1uZXcgRXJyb3IoXCJQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuIFwiK3MubGVuZ3RoK1wiIFwiK1N0cmluZyh0KStcIiBsaXN0ZW5lcnMgYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0XCIpO3UubmFtZT1cIk1heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZ1wiLHUuZW1pdHRlcj1lLHUudHlwZT10LHUuY291bnQ9cy5sZW5ndGgsZj11LGNvbnNvbGUmJmNvbnNvbGUud2FybiYmY29uc29sZS53YXJuKGYpfXJldHVybiBlfWZ1bmN0aW9uIHUoKXtpZighdGhpcy5maXJlZClyZXR1cm4gdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKSx0aGlzLmZpcmVkPSEwLDA9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk6dGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCxhcmd1bWVudHMpfWZ1bmN0aW9uIGQoZSx0LHIpe3ZhciBuPXtmaXJlZDohMSx3cmFwRm46dm9pZCAwLHRhcmdldDplLHR5cGU6dCxsaXN0ZW5lcjpyfSxpPXUuYmluZChuKTtyZXR1cm4gaS5saXN0ZW5lcj1yLG4ud3JhcEZuPWksaX1mdW5jdGlvbiBoKGUsdCxyKXt2YXIgbj1lLl9ldmVudHM7aWYodm9pZCAwPT09bilyZXR1cm5bXTt2YXIgaT1uW3RdO3JldHVybiB2b2lkIDA9PT1pP1tdOlwiZnVuY3Rpb25cIj09dHlwZW9mIGk/cj9baS5saXN0ZW5lcnx8aV06W2ldOnI/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW5ldyBBcnJheShlLmxlbmd0aCkscj0wO3I8dC5sZW5ndGg7KytyKXRbcl09ZVtyXS5saXN0ZW5lcnx8ZVtyXTtyZXR1cm4gdH0oaSk6cChpLGkubGVuZ3RoKX1mdW5jdGlvbiBsKGUpe3ZhciB0PXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT10KXt2YXIgcj10W2VdO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHIpcmV0dXJuIDE7aWYodm9pZCAwIT09cilyZXR1cm4gci5sZW5ndGh9cmV0dXJuIDB9ZnVuY3Rpb24gcChlLHQpe2Zvcih2YXIgcj1uZXcgQXJyYXkodCksbj0wO248dDsrK24pcltuXT1lW25dO3JldHVybiByfWZ1bmN0aW9uIGIoZSx0LHIsbil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbiluLm9uY2U/ZS5vbmNlKHQscik6ZS5vbih0LHIpO2Vsc2V7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZS5hZGRFdmVudExpc3RlbmVyKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGUpO2UuYWRkRXZlbnRMaXN0ZW5lcih0LChmdW5jdGlvbiBpKG8pe24ub25jZSYmZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsaSkscihvKX0pKX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwwfHxpKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlK1wiLlwiKTtzPWV9fSksby5pbml0PWZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHMhPT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHZvaWQgMH0sby5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fGkoZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9ZSx0aGlzfSxvLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtyZXR1cm4gYyh0aGlzKX0sby5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdC5wdXNoKGFyZ3VtZW50c1tyXSk7dmFyIGk9XCJlcnJvclwiPT09ZSxvPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1vKWk9aSYmdm9pZCAwPT09by5lcnJvcjtlbHNlIGlmKCFpKXJldHVybiExO2lmKGkpe3ZhciBzO2lmKHQubGVuZ3RoPjAmJihzPXRbMF0pLHMgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBzO3ZhciBhPW5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIisocz9cIiAoXCIrcy5tZXNzYWdlK1wiKVwiOlwiXCIpKTt0aHJvdyBhLmNvbnRleHQ9cyxhfXZhciBjPW9bZV07aWYodm9pZCAwPT09YylyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBjKW4oYyx0aGlzLHQpO2Vsc2V7dmFyIGY9Yy5sZW5ndGgsdT1wKGMsZik7Zm9yKHI9MDtyPGY7KytyKW4odVtyXSx0aGlzLHQpfXJldHVybiEwfSxvLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBmKHRoaXMsZSx0LCExKX0sby5wcm90b3R5cGUub249by5wcm90b3R5cGUuYWRkTGlzdGVuZXIsby5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGYodGhpcyxlLHQsITApfSxvLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGEodCksdGhpcy5vbihlLGQodGhpcyxlLHQpKSx0aGlzfSxvLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGEodCksdGhpcy5wcmVwZW5kTGlzdGVuZXIoZSxkKHRoaXMsZSx0KSksdGhpc30sby5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxzO2lmKGEodCksdm9pZCAwPT09KG49dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT0ocj1uW2VdKSlyZXR1cm4gdGhpcztpZihyPT09dHx8ci5saXN0ZW5lcj09PXQpMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTooZGVsZXRlIG5bZV0sbi5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLHIubGlzdGVuZXJ8fHQpKTtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIpe2ZvcihpPS0xLG89ci5sZW5ndGgtMTtvPj0wO28tLSlpZihyW29dPT09dHx8cltvXS5saXN0ZW5lcj09PXQpe3M9cltvXS5saXN0ZW5lcixpPW87YnJlYWt9aWYoaTwwKXJldHVybiB0aGlzOzA9PT1pP3Iuc2hpZnQoKTpmdW5jdGlvbihlLHQpe2Zvcig7dCsxPGUubGVuZ3RoO3QrKyllW3RdPWVbdCsxXTtlLnBvcCgpfShyLGkpLDE9PT1yLmxlbmd0aCYmKG5bZV09clswXSksdm9pZCAwIT09bi5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLHN8fHQpfXJldHVybiB0aGlzfSxvLnByb3RvdHlwZS5vZmY9by5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIsby5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbjtpZih2b2lkIDA9PT0ocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PXIucmVtb3ZlTGlzdGVuZXIpcmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTp2b2lkIDAhPT1yW2VdJiYoMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgcltlXSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGksbz1PYmplY3Qua2V5cyhyKTtmb3Iobj0wO248by5sZW5ndGg7KytuKVwicmVtb3ZlTGlzdGVuZXJcIiE9PShpPW9bbl0pJiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhpKTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YodD1yW2VdKSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdCk7ZWxzZSBpZih2b2lkIDAhPT10KWZvcihuPXQubGVuZ3RoLTE7bj49MDtuLS0pdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHRbbl0pO3JldHVybiB0aGlzfSxvLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGgodGhpcyxlLCEwKX0sby5wcm90b3R5cGUucmF3TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiBoKHRoaXMsZSwhMSl9LG8ubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUubGlzdGVuZXJDb3VudD9lLmxpc3RlbmVyQ291bnQodCk6bC5jYWxsKGUsdCl9LG8ucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9bCxvLnByb3RvdHlwZS5ldmVudE5hbWVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50PjA/dCh0aGlzLl9ldmVudHMpOltdfX0sMzA0ODooZSx0LHIpPT57dmFyIG49cig5NTA5KS5CdWZmZXIsaT1yKDIzMTgpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscixvKXtpZihuLmlzQnVmZmVyKGUpfHwoZT1uLmZyb20oZSxcImJpbmFyeVwiKSksdCYmKG4uaXNCdWZmZXIodCl8fCh0PW4uZnJvbSh0LFwiYmluYXJ5XCIpKSw4IT09dC5sZW5ndGgpKXRocm93IG5ldyBSYW5nZUVycm9yKFwic2FsdCBzaG91bGQgYmUgQnVmZmVyIHdpdGggOCBieXRlIGxlbmd0aFwiKTtmb3IodmFyIHM9ci84LGE9bi5hbGxvYyhzKSxjPW4uYWxsb2Mob3x8MCksZj1uLmFsbG9jKDApO3M+MHx8bz4wOyl7dmFyIHU9bmV3IGk7dS51cGRhdGUoZiksdS51cGRhdGUoZSksdCYmdS51cGRhdGUodCksZj11LmRpZ2VzdCgpO3ZhciBkPTA7aWYocz4wKXt2YXIgaD1hLmxlbmd0aC1zO2Q9TWF0aC5taW4ocyxmLmxlbmd0aCksZi5jb3B5KGEsaCwwLGQpLHMtPWR9aWYoZDxmLmxlbmd0aCYmbz4wKXt2YXIgbD1jLmxlbmd0aC1vLHA9TWF0aC5taW4obyxmLmxlbmd0aC1kKTtmLmNvcHkoYyxsLGQsZCtwKSxvLT1wfX1yZXR1cm4gZi5maWxsKDApLHtrZXk6YSxpdjpjfX19LDQwNjM6ZT0+e1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbiBlKHQscil7aWYodD09PXIpcmV0dXJuITA7aWYodCYmciYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwib2JqZWN0XCI9PXR5cGVvZiByKXtpZih0LmNvbnN0cnVjdG9yIT09ci5jb25zdHJ1Y3RvcilyZXR1cm4hMTt2YXIgbixpLG87aWYoQXJyYXkuaXNBcnJheSh0KSl7aWYoKG49dC5sZW5ndGgpIT1yLmxlbmd0aClyZXR1cm4hMTtmb3IoaT1uOzAhPWktLTspaWYoIWUodFtpXSxyW2ldKSlyZXR1cm4hMTtyZXR1cm4hMH1pZih0LmNvbnN0cnVjdG9yPT09UmVnRXhwKXJldHVybiB0LnNvdXJjZT09PXIuc291cmNlJiZ0LmZsYWdzPT09ci5mbGFncztpZih0LnZhbHVlT2YhPT1PYmplY3QucHJvdG90eXBlLnZhbHVlT2YpcmV0dXJuIHQudmFsdWVPZigpPT09ci52YWx1ZU9mKCk7aWYodC50b1N0cmluZyE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpcmV0dXJuIHQudG9TdHJpbmcoKT09PXIudG9TdHJpbmcoKTtpZigobj0obz1PYmplY3Qua2V5cyh0KSkubGVuZ3RoKSE9PU9iamVjdC5rZXlzKHIpLmxlbmd0aClyZXR1cm4hMTtmb3IoaT1uOzAhPWktLTspaWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLG9baV0pKXJldHVybiExO2ZvcihpPW47MCE9aS0tOyl7dmFyIHM9b1tpXTtpZighZSh0W3NdLHJbc10pKXJldHVybiExfXJldHVybiEwfXJldHVybiB0IT10JiZyIT1yfX0sNDQ0NTplPT57ZS5leHBvcnRzPXMscy5kZWZhdWx0PXMscy5zdGFibGU9dSxzLnN0YWJsZVN0cmluZ2lmeT11O3ZhciB0PVwiWy4uLl1cIixyPVwiW0NpcmN1bGFyXVwiLG49W10saT1bXTtmdW5jdGlvbiBvKCl7cmV0dXJue2RlcHRoTGltaXQ6TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsZWRnZXNMaW1pdDpOdW1iZXIuTUFYX1NBRkVfSU5URUdFUn19ZnVuY3Rpb24gcyhlLHQscixzKXt2YXIgYTt2b2lkIDA9PT1zJiYocz1vKCkpLGMoZSxcIlwiLDAsW10sdm9pZCAwLDAscyk7dHJ5e2E9MD09PWkubGVuZ3RoP0pTT04uc3RyaW5naWZ5KGUsdCxyKTpKU09OLnN0cmluZ2lmeShlLGgodCkscil9Y2F0Y2goZSl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KFwiW3VuYWJsZSB0byBzZXJpYWxpemUsIGNpcmN1bGFyIHJlZmVyZW5jZSBpcyB0b28gY29tcGxleCB0byBhbmFseXplXVwiKX1maW5hbGx5e2Zvcig7MCE9PW4ubGVuZ3RoOyl7dmFyIGY9bi5wb3AoKTs0PT09Zi5sZW5ndGg/T2JqZWN0LmRlZmluZVByb3BlcnR5KGZbMF0sZlsxXSxmWzNdKTpmWzBdW2ZbMV1dPWZbMl19fXJldHVybiBhfWZ1bmN0aW9uIGEoZSx0LHIsbyl7dmFyIHM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLHIpO3ZvaWQgMCE9PXMuZ2V0P3MuY29uZmlndXJhYmxlPyhPYmplY3QuZGVmaW5lUHJvcGVydHkobyxyLHt2YWx1ZTplfSksbi5wdXNoKFtvLHIsdCxzXSkpOmkucHVzaChbdCxyLGVdKToob1tyXT1lLG4ucHVzaChbbyxyLHRdKSl9ZnVuY3Rpb24gYyhlLG4saSxvLHMsZix1KXt2YXIgZDtpZihmKz0xLFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSl7Zm9yKGQ9MDtkPG8ubGVuZ3RoO2QrKylpZihvW2RdPT09ZSlyZXR1cm4gdm9pZCBhKHIsZSxuLHMpO2lmKHZvaWQgMCE9PXUuZGVwdGhMaW1pdCYmZj51LmRlcHRoTGltaXQpcmV0dXJuIHZvaWQgYSh0LGUsbixzKTtpZih2b2lkIDAhPT11LmVkZ2VzTGltaXQmJmkrMT51LmVkZ2VzTGltaXQpcmV0dXJuIHZvaWQgYSh0LGUsbixzKTtpZihvLnB1c2goZSksQXJyYXkuaXNBcnJheShlKSlmb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKWMoZVtkXSxkLGQsbyxlLGYsdSk7ZWxzZXt2YXIgaD1PYmplY3Qua2V5cyhlKTtmb3IoZD0wO2Q8aC5sZW5ndGg7ZCsrKXt2YXIgbD1oW2RdO2MoZVtsXSxsLGQsbyxlLGYsdSl9fW8ucG9wKCl9fWZ1bmN0aW9uIGYoZSx0KXtyZXR1cm4gZTx0Py0xOmU+dD8xOjB9ZnVuY3Rpb24gdShlLHQscixzKXt2b2lkIDA9PT1zJiYocz1vKCkpO3ZhciBhLGM9ZChlLFwiXCIsMCxbXSx2b2lkIDAsMCxzKXx8ZTt0cnl7YT0wPT09aS5sZW5ndGg/SlNPTi5zdHJpbmdpZnkoYyx0LHIpOkpTT04uc3RyaW5naWZ5KGMsaCh0KSxyKX1jYXRjaChlKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoXCJbdW5hYmxlIHRvIHNlcmlhbGl6ZSwgY2lyY3VsYXIgcmVmZXJlbmNlIGlzIHRvbyBjb21wbGV4IHRvIGFuYWx5emVdXCIpfWZpbmFsbHl7Zm9yKDswIT09bi5sZW5ndGg7KXt2YXIgZj1uLnBvcCgpOzQ9PT1mLmxlbmd0aD9PYmplY3QuZGVmaW5lUHJvcGVydHkoZlswXSxmWzFdLGZbM10pOmZbMF1bZlsxXV09ZlsyXX19cmV0dXJuIGF9ZnVuY3Rpb24gZChlLGksbyxzLGMsdSxoKXt2YXIgbDtpZih1Kz0xLFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSl7Zm9yKGw9MDtsPHMubGVuZ3RoO2wrKylpZihzW2xdPT09ZSlyZXR1cm4gdm9pZCBhKHIsZSxpLGMpO3RyeXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRvSlNPTilyZXR1cm59Y2F0Y2goZSl7cmV0dXJufWlmKHZvaWQgMCE9PWguZGVwdGhMaW1pdCYmdT5oLmRlcHRoTGltaXQpcmV0dXJuIHZvaWQgYSh0LGUsaSxjKTtpZih2b2lkIDAhPT1oLmVkZ2VzTGltaXQmJm8rMT5oLmVkZ2VzTGltaXQpcmV0dXJuIHZvaWQgYSh0LGUsaSxjKTtpZihzLnB1c2goZSksQXJyYXkuaXNBcnJheShlKSlmb3IobD0wO2w8ZS5sZW5ndGg7bCsrKWQoZVtsXSxsLGwscyxlLHUsaCk7ZWxzZXt2YXIgcD17fSxiPU9iamVjdC5rZXlzKGUpLnNvcnQoZik7Zm9yKGw9MDtsPGIubGVuZ3RoO2wrKyl7dmFyIHk9YltsXTtkKGVbeV0seSxsLHMsZSx1LGgpLHBbeV09ZVt5XX1pZih2b2lkIDA9PT1jKXJldHVybiBwO24ucHVzaChbYyxpLGVdKSxjW2ldPXB9cy5wb3AoKX19ZnVuY3Rpb24gaChlKXtyZXR1cm4gZT12b2lkIDAhPT1lP2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0sZnVuY3Rpb24odCxyKXtpZihpLmxlbmd0aD4wKWZvcih2YXIgbj0wO248aS5sZW5ndGg7bisrKXt2YXIgbz1pW25dO2lmKG9bMV09PT10JiZvWzBdPT09cil7cj1vWzJdLGkuc3BsaWNlKG4sMSk7YnJlYWt9fXJldHVybiBlLmNhbGwodGhpcyx0LHIpfX19LDQwMjk6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNTMyMCksaT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLG89T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49MCxpPWUubGVuZ3RoO248aTtuKyspby5jYWxsKGUsbikmJihudWxsPT1yP3QoZVtuXSxuLGUpOnQuY2FsbChyLGVbbl0sbixlKSl9LGE9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbj0wLGk9ZS5sZW5ndGg7bjxpO24rKyludWxsPT1yP3QoZS5jaGFyQXQobiksbixlKTp0LmNhbGwocixlLmNoYXJBdChuKSxuLGUpfSxjPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG4gaW4gZSlvLmNhbGwoZSxuKSYmKG51bGw9PXI/dChlW25dLG4sZSk6dC5jYWxsKHIsZVtuXSxuLGUpKX07ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtpZighbih0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO3ZhciBvO2FyZ3VtZW50cy5sZW5ndGg+PTMmJihvPXIpLFwiW29iamVjdCBBcnJheV1cIj09PWkuY2FsbChlKT9zKGUsdCxvKTpcInN0cmluZ1wiPT10eXBlb2YgZT9hKGUsdCxvKTpjKGUsdCxvKX19LDc2NDg6ZT0+e1widXNlIHN0cmljdFwiO3ZhciB0PVwiRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSBcIixyPUFycmF5LnByb3RvdHlwZS5zbGljZSxuPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsaT1cIltvYmplY3QgRnVuY3Rpb25dXCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciBvPXRoaXM7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygb3x8bi5jYWxsKG8pIT09aSl0aHJvdyBuZXcgVHlwZUVycm9yKHQrbyk7Zm9yKHZhciBzLGE9ci5jYWxsKGFyZ3VtZW50cywxKSxjPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIHMpe3ZhciB0PW8uYXBwbHkodGhpcyxhLmNvbmNhdChyLmNhbGwoYXJndW1lbnRzKSkpO3JldHVybiBPYmplY3QodCk9PT10P3Q6dGhpc31yZXR1cm4gby5hcHBseShlLGEuY29uY2F0KHIuY2FsbChhcmd1bWVudHMpKSl9LGY9TWF0aC5tYXgoMCxvLmxlbmd0aC1hLmxlbmd0aCksdT1bXSxkPTA7ZDxmO2QrKyl1LnB1c2goXCIkXCIrZCk7aWYocz1GdW5jdGlvbihcImJpbmRlclwiLFwicmV0dXJuIGZ1bmN0aW9uIChcIit1LmpvaW4oXCIsXCIpK1wiKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH1cIikoYyksby5wcm90b3R5cGUpe3ZhciBoPWZ1bmN0aW9uKCl7fTtoLnByb3RvdHlwZT1vLnByb3RvdHlwZSxzLnByb3RvdHlwZT1uZXcgaCxoLnByb3RvdHlwZT1udWxsfXJldHVybiBzfX0sODYxMjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig3NjQ4KTtlLmV4cG9ydHM9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmR8fG59LDIxMDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT1TeW50YXhFcnJvcixvPUZ1bmN0aW9uLHM9VHlwZUVycm9yLGE9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBvKCdcInVzZSBzdHJpY3RcIjsgcmV0dXJuICgnK2UrXCIpLmNvbnN0cnVjdG9yO1wiKSgpfWNhdGNoKGUpe319LGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtpZihjKXRyeXtjKHt9LFwiXCIpfWNhdGNoKGUpe2M9bnVsbH12YXIgZj1mdW5jdGlvbigpe3Rocm93IG5ldyBzfSx1PWM/ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGZ9Y2F0Y2goZSl7dHJ5e3JldHVybiBjKGFyZ3VtZW50cyxcImNhbGxlZVwiKS5nZXR9Y2F0Y2goZSl7cmV0dXJuIGZ9fX0oKTpmLGQ9cigxNDA1KSgpLGg9T2JqZWN0LmdldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX199LGw9e30scD1cInVuZGVmaW5lZFwiPT10eXBlb2YgVWludDhBcnJheT9uOmgoVWludDhBcnJheSksYj17XCIlQWdncmVnYXRlRXJyb3IlXCI6XCJ1bmRlZmluZWRcIj09dHlwZW9mIEFnZ3JlZ2F0ZUVycm9yP246QWdncmVnYXRlRXJyb3IsXCIlQXJyYXklXCI6QXJyYXksXCIlQXJyYXlCdWZmZXIlXCI6XCJ1bmRlZmluZWRcIj09dHlwZW9mIEFycmF5QnVmZmVyP246QXJyYXlCdWZmZXIsXCIlQXJyYXlJdGVyYXRvclByb3RvdHlwZSVcIjpkP2goW11bU3ltYm9sLml0ZXJhdG9yXSgpKTpuLFwiJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSVcIjpuLFwiJUFzeW5jRnVuY3Rpb24lXCI6bCxcIiVBc3luY0dlbmVyYXRvciVcIjpsLFwiJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lXCI6bCxcIiVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJVwiOmwsXCIlQXRvbWljcyVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgQXRvbWljcz9uOkF0b21pY3MsXCIlQmlnSW50JVwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBCaWdJbnQ/bjpCaWdJbnQsXCIlQm9vbGVhbiVcIjpCb29sZWFuLFwiJURhdGFWaWV3JVwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBEYXRhVmlldz9uOkRhdGFWaWV3LFwiJURhdGUlXCI6RGF0ZSxcIiVkZWNvZGVVUkklXCI6ZGVjb2RlVVJJLFwiJWRlY29kZVVSSUNvbXBvbmVudCVcIjpkZWNvZGVVUklDb21wb25lbnQsXCIlZW5jb2RlVVJJJVwiOmVuY29kZVVSSSxcIiVlbmNvZGVVUklDb21wb25lbnQlXCI6ZW5jb2RlVVJJQ29tcG9uZW50LFwiJUVycm9yJVwiOkVycm9yLFwiJWV2YWwlXCI6ZXZhbCxcIiVFdmFsRXJyb3IlXCI6RXZhbEVycm9yLFwiJUZsb2F0MzJBcnJheSVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgRmxvYXQzMkFycmF5P246RmxvYXQzMkFycmF5LFwiJUZsb2F0NjRBcnJheSVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgRmxvYXQ2NEFycmF5P246RmxvYXQ2NEFycmF5LFwiJUZpbmFsaXphdGlvblJlZ2lzdHJ5JVwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeT9uOkZpbmFsaXphdGlvblJlZ2lzdHJ5LFwiJUZ1bmN0aW9uJVwiOm8sXCIlR2VuZXJhdG9yRnVuY3Rpb24lXCI6bCxcIiVJbnQ4QXJyYXklXCI6XCJ1bmRlZmluZWRcIj09dHlwZW9mIEludDhBcnJheT9uOkludDhBcnJheSxcIiVJbnQxNkFycmF5JVwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBJbnQxNkFycmF5P246SW50MTZBcnJheSxcIiVJbnQzMkFycmF5JVwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBJbnQzMkFycmF5P246SW50MzJBcnJheSxcIiVpc0Zpbml0ZSVcIjppc0Zpbml0ZSxcIiVpc05hTiVcIjppc05hTixcIiVJdGVyYXRvclByb3RvdHlwZSVcIjpkP2goaChbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKTpuLFwiJUpTT04lXCI6XCJvYmplY3RcIj09dHlwZW9mIEpTT04/SlNPTjpuLFwiJU1hcCVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgTWFwP246TWFwLFwiJU1hcEl0ZXJhdG9yUHJvdG90eXBlJVwiOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAmJmQ/aCgobmV3IE1hcClbU3ltYm9sLml0ZXJhdG9yXSgpKTpuLFwiJU1hdGglXCI6TWF0aCxcIiVOdW1iZXIlXCI6TnVtYmVyLFwiJU9iamVjdCVcIjpPYmplY3QsXCIlcGFyc2VGbG9hdCVcIjpwYXJzZUZsb2F0LFwiJXBhcnNlSW50JVwiOnBhcnNlSW50LFwiJVByb21pc2UlXCI6XCJ1bmRlZmluZWRcIj09dHlwZW9mIFByb21pc2U/bjpQcm9taXNlLFwiJVByb3h5JVwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBQcm94eT9uOlByb3h5LFwiJVJhbmdlRXJyb3IlXCI6UmFuZ2VFcnJvcixcIiVSZWZlcmVuY2VFcnJvciVcIjpSZWZlcmVuY2VFcnJvcixcIiVSZWZsZWN0JVwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0P246UmVmbGVjdCxcIiVSZWdFeHAlXCI6UmVnRXhwLFwiJVNldCVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgU2V0P246U2V0LFwiJVNldEl0ZXJhdG9yUHJvdG90eXBlJVwiOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBTZXQmJmQ/aCgobmV3IFNldClbU3ltYm9sLml0ZXJhdG9yXSgpKTpuLFwiJVNoYXJlZEFycmF5QnVmZmVyJVwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcj9uOlNoYXJlZEFycmF5QnVmZmVyLFwiJVN0cmluZyVcIjpTdHJpbmcsXCIlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlXCI6ZD9oKFwiXCJbU3ltYm9sLml0ZXJhdG9yXSgpKTpuLFwiJVN5bWJvbCVcIjpkP1N5bWJvbDpuLFwiJVN5bnRheEVycm9yJVwiOmksXCIlVGhyb3dUeXBlRXJyb3IlXCI6dSxcIiVUeXBlZEFycmF5JVwiOnAsXCIlVHlwZUVycm9yJVwiOnMsXCIlVWludDhBcnJheSVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgVWludDhBcnJheT9uOlVpbnQ4QXJyYXksXCIlVWludDhDbGFtcGVkQXJyYXklXCI6XCJ1bmRlZmluZWRcIj09dHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5P246VWludDhDbGFtcGVkQXJyYXksXCIlVWludDE2QXJyYXklXCI6XCJ1bmRlZmluZWRcIj09dHlwZW9mIFVpbnQxNkFycmF5P246VWludDE2QXJyYXksXCIlVWludDMyQXJyYXklXCI6XCJ1bmRlZmluZWRcIj09dHlwZW9mIFVpbnQzMkFycmF5P246VWludDMyQXJyYXksXCIlVVJJRXJyb3IlXCI6VVJJRXJyb3IsXCIlV2Vha01hcCVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgV2Vha01hcD9uOldlYWtNYXAsXCIlV2Vha1JlZiVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgV2Vha1JlZj9uOldlYWtSZWYsXCIlV2Vha1NldCVcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgV2Vha1NldD9uOldlYWtTZXR9LHk9ZnVuY3Rpb24gZSh0KXt2YXIgcjtpZihcIiVBc3luY0Z1bmN0aW9uJVwiPT09dClyPWEoXCJhc3luYyBmdW5jdGlvbiAoKSB7fVwiKTtlbHNlIGlmKFwiJUdlbmVyYXRvckZ1bmN0aW9uJVwiPT09dClyPWEoXCJmdW5jdGlvbiogKCkge31cIik7ZWxzZSBpZihcIiVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJVwiPT09dClyPWEoXCJhc3luYyBmdW5jdGlvbiogKCkge31cIik7ZWxzZSBpZihcIiVBc3luY0dlbmVyYXRvciVcIj09PXQpe3ZhciBuPWUoXCIlQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiVcIik7biYmKHI9bi5wcm90b3R5cGUpfWVsc2UgaWYoXCIlQXN5bmNJdGVyYXRvclByb3RvdHlwZSVcIj09PXQpe3ZhciBpPWUoXCIlQXN5bmNHZW5lcmF0b3IlXCIpO2kmJihyPWgoaS5wcm90b3R5cGUpKX1yZXR1cm4gYlt0XT1yLHJ9LGc9e1wiJUFycmF5QnVmZmVyUHJvdG90eXBlJVwiOltcIkFycmF5QnVmZmVyXCIsXCJwcm90b3R5cGVcIl0sXCIlQXJyYXlQcm90b3R5cGUlXCI6W1wiQXJyYXlcIixcInByb3RvdHlwZVwiXSxcIiVBcnJheVByb3RvX2VudHJpZXMlXCI6W1wiQXJyYXlcIixcInByb3RvdHlwZVwiLFwiZW50cmllc1wiXSxcIiVBcnJheVByb3RvX2ZvckVhY2glXCI6W1wiQXJyYXlcIixcInByb3RvdHlwZVwiLFwiZm9yRWFjaFwiXSxcIiVBcnJheVByb3RvX2tleXMlXCI6W1wiQXJyYXlcIixcInByb3RvdHlwZVwiLFwia2V5c1wiXSxcIiVBcnJheVByb3RvX3ZhbHVlcyVcIjpbXCJBcnJheVwiLFwicHJvdG90eXBlXCIsXCJ2YWx1ZXNcIl0sXCIlQXN5bmNGdW5jdGlvblByb3RvdHlwZSVcIjpbXCJBc3luY0Z1bmN0aW9uXCIsXCJwcm90b3R5cGVcIl0sXCIlQXN5bmNHZW5lcmF0b3IlXCI6W1wiQXN5bmNHZW5lcmF0b3JGdW5jdGlvblwiLFwicHJvdG90eXBlXCJdLFwiJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJVwiOltcIkFzeW5jR2VuZXJhdG9yRnVuY3Rpb25cIixcInByb3RvdHlwZVwiLFwicHJvdG90eXBlXCJdLFwiJUJvb2xlYW5Qcm90b3R5cGUlXCI6W1wiQm9vbGVhblwiLFwicHJvdG90eXBlXCJdLFwiJURhdGFWaWV3UHJvdG90eXBlJVwiOltcIkRhdGFWaWV3XCIsXCJwcm90b3R5cGVcIl0sXCIlRGF0ZVByb3RvdHlwZSVcIjpbXCJEYXRlXCIsXCJwcm90b3R5cGVcIl0sXCIlRXJyb3JQcm90b3R5cGUlXCI6W1wiRXJyb3JcIixcInByb3RvdHlwZVwiXSxcIiVFdmFsRXJyb3JQcm90b3R5cGUlXCI6W1wiRXZhbEVycm9yXCIsXCJwcm90b3R5cGVcIl0sXCIlRmxvYXQzMkFycmF5UHJvdG90eXBlJVwiOltcIkZsb2F0MzJBcnJheVwiLFwicHJvdG90eXBlXCJdLFwiJUZsb2F0NjRBcnJheVByb3RvdHlwZSVcIjpbXCJGbG9hdDY0QXJyYXlcIixcInByb3RvdHlwZVwiXSxcIiVGdW5jdGlvblByb3RvdHlwZSVcIjpbXCJGdW5jdGlvblwiLFwicHJvdG90eXBlXCJdLFwiJUdlbmVyYXRvciVcIjpbXCJHZW5lcmF0b3JGdW5jdGlvblwiLFwicHJvdG90eXBlXCJdLFwiJUdlbmVyYXRvclByb3RvdHlwZSVcIjpbXCJHZW5lcmF0b3JGdW5jdGlvblwiLFwicHJvdG90eXBlXCIsXCJwcm90b3R5cGVcIl0sXCIlSW50OEFycmF5UHJvdG90eXBlJVwiOltcIkludDhBcnJheVwiLFwicHJvdG90eXBlXCJdLFwiJUludDE2QXJyYXlQcm90b3R5cGUlXCI6W1wiSW50MTZBcnJheVwiLFwicHJvdG90eXBlXCJdLFwiJUludDMyQXJyYXlQcm90b3R5cGUlXCI6W1wiSW50MzJBcnJheVwiLFwicHJvdG90eXBlXCJdLFwiJUpTT05QYXJzZSVcIjpbXCJKU09OXCIsXCJwYXJzZVwiXSxcIiVKU09OU3RyaW5naWZ5JVwiOltcIkpTT05cIixcInN0cmluZ2lmeVwiXSxcIiVNYXBQcm90b3R5cGUlXCI6W1wiTWFwXCIsXCJwcm90b3R5cGVcIl0sXCIlTnVtYmVyUHJvdG90eXBlJVwiOltcIk51bWJlclwiLFwicHJvdG90eXBlXCJdLFwiJU9iamVjdFByb3RvdHlwZSVcIjpbXCJPYmplY3RcIixcInByb3RvdHlwZVwiXSxcIiVPYmpQcm90b190b1N0cmluZyVcIjpbXCJPYmplY3RcIixcInByb3RvdHlwZVwiLFwidG9TdHJpbmdcIl0sXCIlT2JqUHJvdG9fdmFsdWVPZiVcIjpbXCJPYmplY3RcIixcInByb3RvdHlwZVwiLFwidmFsdWVPZlwiXSxcIiVQcm9taXNlUHJvdG90eXBlJVwiOltcIlByb21pc2VcIixcInByb3RvdHlwZVwiXSxcIiVQcm9taXNlUHJvdG9fdGhlbiVcIjpbXCJQcm9taXNlXCIsXCJwcm90b3R5cGVcIixcInRoZW5cIl0sXCIlUHJvbWlzZV9hbGwlXCI6W1wiUHJvbWlzZVwiLFwiYWxsXCJdLFwiJVByb21pc2VfcmVqZWN0JVwiOltcIlByb21pc2VcIixcInJlamVjdFwiXSxcIiVQcm9taXNlX3Jlc29sdmUlXCI6W1wiUHJvbWlzZVwiLFwicmVzb2x2ZVwiXSxcIiVSYW5nZUVycm9yUHJvdG90eXBlJVwiOltcIlJhbmdlRXJyb3JcIixcInByb3RvdHlwZVwiXSxcIiVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSVcIjpbXCJSZWZlcmVuY2VFcnJvclwiLFwicHJvdG90eXBlXCJdLFwiJVJlZ0V4cFByb3RvdHlwZSVcIjpbXCJSZWdFeHBcIixcInByb3RvdHlwZVwiXSxcIiVTZXRQcm90b3R5cGUlXCI6W1wiU2V0XCIsXCJwcm90b3R5cGVcIl0sXCIlU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlXCI6W1wiU2hhcmVkQXJyYXlCdWZmZXJcIixcInByb3RvdHlwZVwiXSxcIiVTdHJpbmdQcm90b3R5cGUlXCI6W1wiU3RyaW5nXCIsXCJwcm90b3R5cGVcIl0sXCIlU3ltYm9sUHJvdG90eXBlJVwiOltcIlN5bWJvbFwiLFwicHJvdG90eXBlXCJdLFwiJVN5bnRheEVycm9yUHJvdG90eXBlJVwiOltcIlN5bnRheEVycm9yXCIsXCJwcm90b3R5cGVcIl0sXCIlVHlwZWRBcnJheVByb3RvdHlwZSVcIjpbXCJUeXBlZEFycmF5XCIsXCJwcm90b3R5cGVcIl0sXCIlVHlwZUVycm9yUHJvdG90eXBlJVwiOltcIlR5cGVFcnJvclwiLFwicHJvdG90eXBlXCJdLFwiJVVpbnQ4QXJyYXlQcm90b3R5cGUlXCI6W1wiVWludDhBcnJheVwiLFwicHJvdG90eXBlXCJdLFwiJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJVwiOltcIlVpbnQ4Q2xhbXBlZEFycmF5XCIsXCJwcm90b3R5cGVcIl0sXCIlVWludDE2QXJyYXlQcm90b3R5cGUlXCI6W1wiVWludDE2QXJyYXlcIixcInByb3RvdHlwZVwiXSxcIiVVaW50MzJBcnJheVByb3RvdHlwZSVcIjpbXCJVaW50MzJBcnJheVwiLFwicHJvdG90eXBlXCJdLFwiJVVSSUVycm9yUHJvdG90eXBlJVwiOltcIlVSSUVycm9yXCIsXCJwcm90b3R5cGVcIl0sXCIlV2Vha01hcFByb3RvdHlwZSVcIjpbXCJXZWFrTWFwXCIsXCJwcm90b3R5cGVcIl0sXCIlV2Vha1NldFByb3RvdHlwZSVcIjpbXCJXZWFrU2V0XCIsXCJwcm90b3R5cGVcIl19LG09cig4NjEyKSx2PXIoNzY0Miksdz1tLmNhbGwoRnVuY3Rpb24uY2FsbCxBcnJheS5wcm90b3R5cGUuY29uY2F0KSxfPW0uY2FsbChGdW5jdGlvbi5hcHBseSxBcnJheS5wcm90b3R5cGUuc3BsaWNlKSxTPW0uY2FsbChGdW5jdGlvbi5jYWxsLFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSksRT1tLmNhbGwoRnVuY3Rpb24uY2FsbCxTdHJpbmcucHJvdG90eXBlLnNsaWNlKSxBPS9bXiUuW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JSQpKS9nLHg9L1xcXFwoXFxcXCk/L2csaz1mdW5jdGlvbihlKXt2YXIgdD1FKGUsMCwxKSxyPUUoZSwtMSk7aWYoXCIlXCI9PT10JiZcIiVcIiE9PXIpdGhyb3cgbmV3IGkoXCJpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgXCIpO2lmKFwiJVwiPT09ciYmXCIlXCIhPT10KXRocm93IG5ldyBpKFwiaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBvcGVuaW5nIGAlYFwiKTt2YXIgbj1bXTtyZXR1cm4gUyhlLEEsKGZ1bmN0aW9uKGUsdCxyLGkpe25bbi5sZW5ndGhdPXI/UyhpLHgsXCIkMVwiKTp0fHxlfSkpLG59LFA9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPWU7aWYodihnLG4pJiYobj1cIiVcIisocj1nW25dKVswXStcIiVcIiksdihiLG4pKXt2YXIgbz1iW25dO2lmKG89PT1sJiYobz15KG4pKSx2b2lkIDA9PT1vJiYhdCl0aHJvdyBuZXcgcyhcImludHJpbnNpYyBcIitlK1wiIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIVwiKTtyZXR1cm57YWxpYXM6cixuYW1lOm4sdmFsdWU6b319dGhyb3cgbmV3IGkoXCJpbnRyaW5zaWMgXCIrZStcIiBkb2VzIG5vdCBleGlzdCFcIil9O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwwPT09ZS5sZW5ndGgpdGhyb3cgbmV3IHMoXCJpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKTtpZihhcmd1bWVudHMubGVuZ3RoPjEmJlwiYm9vbGVhblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgcygnXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO3ZhciByPWsoZSksbj1yLmxlbmd0aD4wP3JbMF06XCJcIixvPVAoXCIlXCIrbitcIiVcIix0KSxhPW8ubmFtZSxmPW8udmFsdWUsdT0hMSxkPW8uYWxpYXM7ZCYmKG49ZFswXSxfKHIsdyhbMCwxXSxkKSkpO2Zvcih2YXIgaD0xLGw9ITA7aDxyLmxlbmd0aDtoKz0xKXt2YXIgcD1yW2hdLHk9RShwLDAsMSksZz1FKHAsLTEpO2lmKCgnXCInPT09eXx8XCInXCI9PT15fHxcImBcIj09PXl8fCdcIic9PT1nfHxcIidcIj09PWd8fFwiYFwiPT09ZykmJnkhPT1nKXRocm93IG5ldyBpKFwicHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3Rlc1wiKTtpZihcImNvbnN0cnVjdG9yXCIhPT1wJiZsfHwodT0hMCksdihiLGE9XCIlXCIrKG4rPVwiLlwiK3ApK1wiJVwiKSlmPWJbYV07ZWxzZSBpZihudWxsIT1mKXtpZighKHAgaW4gZikpe2lmKCF0KXRocm93IG5ldyBzKFwiYmFzZSBpbnRyaW5zaWMgZm9yIFwiK2UrXCIgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuXCIpO3JldHVybn1pZihjJiZoKzE+PXIubGVuZ3RoKXt2YXIgbT1jKGYscCk7Zj0obD0hIW0pJiZcImdldFwiaW4gbSYmIShcIm9yaWdpbmFsVmFsdWVcImluIG0uZ2V0KT9tLmdldDpmW3BdfWVsc2UgbD12KGYscCksZj1mW3BdO2wmJiF1JiYoYlthXT1mKX19cmV0dXJuIGZ9fSwxMDQ0OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDIxMCkoXCIlT2JqZWN0LmRlZmluZVByb3BlcnR5JVwiLCEwKSxpPWZ1bmN0aW9uKCl7aWYobil0cnl7cmV0dXJuIG4oe30sXCJhXCIse3ZhbHVlOjF9KSwhMH1jYXRjaChlKXtyZXR1cm4hMX1yZXR1cm4hMX07aS5oYXNBcnJheUxlbmd0aERlZmluZUJ1Zz1mdW5jdGlvbigpe2lmKCFpKCkpcmV0dXJuIG51bGw7dHJ5e3JldHVybiAxIT09bihbXSxcImxlbmd0aFwiLHt2YWx1ZToxfSkubGVuZ3RofWNhdGNoKGUpe3JldHVybiEwfX0sZS5leHBvcnRzPWl9LDE0MDU6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbCxpPXIoNTQxOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgbihcImZvb1wiKSYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcImJhclwiKSYmaSgpfX0sNTQxOTplPT57XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgU3ltYm9sfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXJldHVybiExO2lmKFwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3IpcmV0dXJuITA7dmFyIGU9e30sdD1TeW1ib2woXCJ0ZXN0XCIpLHI9T2JqZWN0KHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVybiExO2lmKFwiW29iamVjdCBTeW1ib2xdXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpcmV0dXJuITE7aWYoXCJbb2JqZWN0IFN5bWJvbF1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyKSlyZXR1cm4hMTtmb3IodCBpbiBlW3RdPTQyLGUpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmtleXMmJjAhPT1PYmplY3Qua2V5cyhlKS5sZW5ndGgpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMmJjAhPT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5sZW5ndGgpcmV0dXJuITE7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtpZigxIT09bi5sZW5ndGh8fG5bMF0hPT10KXJldHVybiExO2lmKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZSx0KSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKXt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCk7aWYoNDIhPT1pLnZhbHVlfHwhMCE9PWkuZW51bWVyYWJsZSlyZXR1cm4hMX1yZXR1cm4hMH19LDY0MTA6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNTQxOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4oKSYmISFTeW1ib2wudG9TdHJpbmdUYWd9fSw3NjQyOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDg2MTIpO2UuZXhwb3J0cz1uLmNhbGwoRnVuY3Rpb24uY2FsbCxPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KX0sMzM0OTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig5NTA5KS5CdWZmZXIsaT1yKDg0NzMpLlRyYW5zZm9ybTtmdW5jdGlvbiBvKGUpe2kuY2FsbCh0aGlzKSx0aGlzLl9ibG9jaz1uLmFsbG9jVW5zYWZlKGUpLHRoaXMuX2Jsb2NrU2l6ZT1lLHRoaXMuX2Jsb2NrT2Zmc2V0PTAsdGhpcy5fbGVuZ3RoPVswLDAsMCwwXSx0aGlzLl9maW5hbGl6ZWQ9ITF9cig1NzE3KShvLGkpLG8ucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPW51bGw7dHJ5e3RoaXMudXBkYXRlKGUsdCl9Y2F0Y2goZSl7bj1lfXIobil9LG8ucHJvdG90eXBlLl9mbHVzaD1mdW5jdGlvbihlKXt2YXIgdD1udWxsO3RyeXt0aGlzLnB1c2godGhpcy5kaWdlc3QoKSl9Y2F0Y2goZSl7dD1lfWUodCl9LG8ucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihlLHQpe2lmKGZ1bmN0aW9uKGUsdCl7aWYoIW4uaXNCdWZmZXIoZSkmJlwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEYXRhIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBidWZmZXJcIil9KGUpLHRoaXMuX2ZpbmFsaXplZCl0aHJvdyBuZXcgRXJyb3IoXCJEaWdlc3QgYWxyZWFkeSBjYWxsZWRcIik7bi5pc0J1ZmZlcihlKXx8KGU9bi5mcm9tKGUsdCkpO2Zvcih2YXIgcj10aGlzLl9ibG9jayxpPTA7dGhpcy5fYmxvY2tPZmZzZXQrZS5sZW5ndGgtaT49dGhpcy5fYmxvY2tTaXplOyl7Zm9yKHZhciBvPXRoaXMuX2Jsb2NrT2Zmc2V0O288dGhpcy5fYmxvY2tTaXplOylyW28rK109ZVtpKytdO3RoaXMuX3VwZGF0ZSgpLHRoaXMuX2Jsb2NrT2Zmc2V0PTB9Zm9yKDtpPGUubGVuZ3RoOylyW3RoaXMuX2Jsb2NrT2Zmc2V0KytdPWVbaSsrXTtmb3IodmFyIHM9MCxhPTgqZS5sZW5ndGg7YT4wOysrcyl0aGlzLl9sZW5ndGhbc10rPWEsKGE9dGhpcy5fbGVuZ3RoW3NdLzQyOTQ5NjcyOTZ8MCk+MCYmKHRoaXMuX2xlbmd0aFtzXS09NDI5NDk2NzI5NiphKTtyZXR1cm4gdGhpc30sby5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIl91cGRhdGUgaXMgbm90IGltcGxlbWVudGVkXCIpfSxvLnByb3RvdHlwZS5kaWdlc3Q9ZnVuY3Rpb24oZSl7aWYodGhpcy5fZmluYWxpemVkKXRocm93IG5ldyBFcnJvcihcIkRpZ2VzdCBhbHJlYWR5IGNhbGxlZFwiKTt0aGlzLl9maW5hbGl6ZWQ9ITA7dmFyIHQ9dGhpcy5fZGlnZXN0KCk7dm9pZCAwIT09ZSYmKHQ9dC50b1N0cmluZyhlKSksdGhpcy5fYmxvY2suZmlsbCgwKSx0aGlzLl9ibG9ja09mZnNldD0wO2Zvcih2YXIgcj0wO3I8NDsrK3IpdGhpcy5fbGVuZ3RoW3JdPTA7cmV0dXJuIHR9LG8ucHJvdG90eXBlLl9kaWdlc3Q9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJfZGlnZXN0IGlzIG5vdCBpbXBsZW1lbnRlZFwiKX0sZS5leHBvcnRzPW99LDM3MTU6KGUsdCxyKT0+e3ZhciBuPXQ7bi51dGlscz1yKDY0MzYpLG4uY29tbW9uPXIoNTc3Miksbi5zaGE9cig5MDQxKSxuLnJpcGVtZD1yKDI5NDkpLG4uaG1hYz1yKDIzNDQpLG4uc2hhMT1uLnNoYS5zaGExLG4uc2hhMjU2PW4uc2hhLnNoYTI1NixuLnNoYTIyND1uLnNoYS5zaGEyMjQsbi5zaGEzODQ9bi5zaGEuc2hhMzg0LG4uc2hhNTEyPW4uc2hhLnNoYTUxMixuLnJpcGVtZDE2MD1uLnJpcGVtZC5yaXBlbWQxNjB9LDU3NzI6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNjQzNiksaT1yKDk3NDYpO2Z1bmN0aW9uIG8oKXt0aGlzLnBlbmRpbmc9bnVsbCx0aGlzLnBlbmRpbmdUb3RhbD0wLHRoaXMuYmxvY2tTaXplPXRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplLHRoaXMub3V0U2l6ZT10aGlzLmNvbnN0cnVjdG9yLm91dFNpemUsdGhpcy5obWFjU3RyZW5ndGg9dGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGgsdGhpcy5wYWRMZW5ndGg9dGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGgvOCx0aGlzLmVuZGlhbj1cImJpZ1wiLHRoaXMuX2RlbHRhOD10aGlzLmJsb2NrU2l6ZS84LHRoaXMuX2RlbHRhMzI9dGhpcy5ibG9ja1NpemUvMzJ9dC5CbG9ja0hhc2g9byxvLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oZSx0KXtpZihlPW4udG9BcnJheShlLHQpLHRoaXMucGVuZGluZz90aGlzLnBlbmRpbmc9dGhpcy5wZW5kaW5nLmNvbmNhdChlKTp0aGlzLnBlbmRpbmc9ZSx0aGlzLnBlbmRpbmdUb3RhbCs9ZS5sZW5ndGgsdGhpcy5wZW5kaW5nLmxlbmd0aD49dGhpcy5fZGVsdGE4KXt2YXIgcj0oZT10aGlzLnBlbmRpbmcpLmxlbmd0aCV0aGlzLl9kZWx0YTg7dGhpcy5wZW5kaW5nPWUuc2xpY2UoZS5sZW5ndGgtcixlLmxlbmd0aCksMD09PXRoaXMucGVuZGluZy5sZW5ndGgmJih0aGlzLnBlbmRpbmc9bnVsbCksZT1uLmpvaW4zMihlLDAsZS5sZW5ndGgtcix0aGlzLmVuZGlhbik7Zm9yKHZhciBpPTA7aTxlLmxlbmd0aDtpKz10aGlzLl9kZWx0YTMyKXRoaXMuX3VwZGF0ZShlLGksaSt0aGlzLl9kZWx0YTMyKX1yZXR1cm4gdGhpc30sby5wcm90b3R5cGUuZGlnZXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSksaShudWxsPT09dGhpcy5wZW5kaW5nKSx0aGlzLl9kaWdlc3QoZSl9LG8ucHJvdG90eXBlLl9wYWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnBlbmRpbmdUb3RhbCx0PXRoaXMuX2RlbHRhOCxyPXQtKGUrdGhpcy5wYWRMZW5ndGgpJXQsbj1uZXcgQXJyYXkocit0aGlzLnBhZExlbmd0aCk7blswXT0xMjg7Zm9yKHZhciBpPTE7aTxyO2krKyluW2ldPTA7aWYoZTw8PTMsXCJiaWdcIj09PXRoaXMuZW5kaWFuKXtmb3IodmFyIG89ODtvPHRoaXMucGFkTGVuZ3RoO28rKyluW2krK109MDtuW2krK109MCxuW2krK109MCxuW2krK109MCxuW2krK109MCxuW2krK109ZT4+PjI0JjI1NSxuW2krK109ZT4+PjE2JjI1NSxuW2krK109ZT4+PjgmMjU1LG5baSsrXT0yNTUmZX1lbHNlIGZvcihuW2krK109MjU1JmUsbltpKytdPWU+Pj44JjI1NSxuW2krK109ZT4+PjE2JjI1NSxuW2krK109ZT4+PjI0JjI1NSxuW2krK109MCxuW2krK109MCxuW2krK109MCxuW2krK109MCxvPTg7bzx0aGlzLnBhZExlbmd0aDtvKyspbltpKytdPTA7cmV0dXJuIG59fSwyMzQ0OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDY0MzYpLGk9cig5NzQ2KTtmdW5jdGlvbiBvKGUsdCxyKXtpZighKHRoaXMgaW5zdGFuY2VvZiBvKSlyZXR1cm4gbmV3IG8oZSx0LHIpO3RoaXMuSGFzaD1lLHRoaXMuYmxvY2tTaXplPWUuYmxvY2tTaXplLzgsdGhpcy5vdXRTaXplPWUub3V0U2l6ZS84LHRoaXMuaW5uZXI9bnVsbCx0aGlzLm91dGVyPW51bGwsdGhpcy5faW5pdChuLnRvQXJyYXkodCxyKSl9ZS5leHBvcnRzPW8sby5wcm90b3R5cGUuX2luaXQ9ZnVuY3Rpb24oZSl7ZS5sZW5ndGg+dGhpcy5ibG9ja1NpemUmJihlPShuZXcgdGhpcy5IYXNoKS51cGRhdGUoZSkuZGlnZXN0KCkpLGkoZS5sZW5ndGg8PXRoaXMuYmxvY2tTaXplKTtmb3IodmFyIHQ9ZS5sZW5ndGg7dDx0aGlzLmJsb2NrU2l6ZTt0KyspZS5wdXNoKDApO2Zvcih0PTA7dDxlLmxlbmd0aDt0KyspZVt0XV49NTQ7Zm9yKHRoaXMuaW5uZXI9KG5ldyB0aGlzLkhhc2gpLnVwZGF0ZShlKSx0PTA7dDxlLmxlbmd0aDt0KyspZVt0XV49MTA2O3RoaXMub3V0ZXI9KG5ldyB0aGlzLkhhc2gpLnVwZGF0ZShlKX0sby5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaW5uZXIudXBkYXRlKGUsdCksdGhpc30sby5wcm90b3R5cGUuZGlnZXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmlubmVyLmRpZ2VzdCgpKSx0aGlzLm91dGVyLmRpZ2VzdChlKX19LDI5NDk6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNjQzNiksaT1yKDU3NzIpLG89bi5yb3RsMzIscz1uLnN1bTMyLGE9bi5zdW0zMl8zLGM9bi5zdW0zMl80LGY9aS5CbG9ja0hhc2g7ZnVuY3Rpb24gdSgpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHUpKXJldHVybiBuZXcgdTtmLmNhbGwodGhpcyksdGhpcy5oPVsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF0sdGhpcy5lbmRpYW49XCJsaXR0bGVcIn1mdW5jdGlvbiBkKGUsdCxyLG4pe3JldHVybiBlPD0xNT90XnJebjplPD0zMT90JnJ8fnQmbjplPD00Nz8odHx+cilebjplPD02Mz90Jm58ciZ+bjp0XihyfH5uKX1mdW5jdGlvbiBoKGUpe3JldHVybiBlPD0xNT8wOmU8PTMxPzE1MTg1MDAyNDk6ZTw9NDc/MTg1OTc3NTM5MzplPD02Mz8yNDAwOTU5NzA4OjI4NDA4NTM4Mzh9ZnVuY3Rpb24gbChlKXtyZXR1cm4gZTw9MTU/MTM1MjgyOTkyNjplPD0zMT8xNTQ4NjAzNjg0OmU8PTQ3PzE4MzYwNzI2OTE6ZTw9NjM/MjA1Mzk5NDIxNzowfW4uaW5oZXJpdHModSxmKSx0LnJpcGVtZDE2MD11LHUuYmxvY2tTaXplPTUxMix1Lm91dFNpemU9MTYwLHUuaG1hY1N0cmVuZ3RoPTE5Mix1LnBhZExlbmd0aD02NCx1LnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMuaFswXSxuPXRoaXMuaFsxXSxpPXRoaXMuaFsyXSxmPXRoaXMuaFszXSx1PXRoaXMuaFs0XSxtPXIsdj1uLHc9aSxfPWYsUz11LEU9MDtFPDgwO0UrKyl7dmFyIEE9cyhvKGMocixkKEUsbixpLGYpLGVbcFtFXSt0XSxoKEUpKSx5W0VdKSx1KTtyPXUsdT1mLGY9byhpLDEwKSxpPW4sbj1BLEE9cyhvKGMobSxkKDc5LUUsdix3LF8pLGVbYltFXSt0XSxsKEUpKSxnW0VdKSxTKSxtPVMsUz1fLF89byh3LDEwKSx3PXYsdj1BfUE9YSh0aGlzLmhbMV0saSxfKSx0aGlzLmhbMV09YSh0aGlzLmhbMl0sZixTKSx0aGlzLmhbMl09YSh0aGlzLmhbM10sdSxtKSx0aGlzLmhbM109YSh0aGlzLmhbNF0scix2KSx0aGlzLmhbNF09YSh0aGlzLmhbMF0sbix3KSx0aGlzLmhbMF09QX0sdS5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbihlKXtyZXR1cm5cImhleFwiPT09ZT9uLnRvSGV4MzIodGhpcy5oLFwibGl0dGxlXCIpOm4uc3BsaXQzMih0aGlzLmgsXCJsaXR0bGVcIil9O3ZhciBwPVswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDcsNCwxMywxLDEwLDYsMTUsMywxMiwwLDksNSwyLDE0LDExLDgsMywxMCwxNCw0LDksMTUsOCwxLDIsNywwLDYsMTMsMTEsNSwxMiwxLDksMTEsMTAsMCw4LDEyLDQsMTMsMyw3LDE1LDE0LDUsNiwyLDQsMCw1LDksNywxMiwyLDEwLDE0LDEsMyw4LDExLDYsMTUsMTNdLGI9WzUsMTQsNywwLDksMiwxMSw0LDEzLDYsMTUsOCwxLDEwLDMsMTIsNiwxMSwzLDcsMCwxMyw1LDEwLDE0LDE1LDgsMTIsNCw5LDEsMiwxNSw1LDEsMyw3LDE0LDYsOSwxMSw4LDEyLDIsMTAsMCw0LDEzLDgsNiw0LDEsMywxMSwxNSwwLDUsMTIsMiwxMyw5LDcsMTAsMTQsMTIsMTUsMTAsNCwxLDUsOCw3LDYsMiwxMywxNCwwLDMsOSwxMV0seT1bMTEsMTQsMTUsMTIsNSw4LDcsOSwxMSwxMywxNCwxNSw2LDcsOSw4LDcsNiw4LDEzLDExLDksNywxNSw3LDEyLDE1LDksMTEsNywxMywxMiwxMSwxMyw2LDcsMTQsOSwxMywxNSwxNCw4LDEzLDYsNSwxMiw3LDUsMTEsMTIsMTQsMTUsMTQsMTUsOSw4LDksMTQsNSw2LDgsNiw1LDEyLDksMTUsNSwxMSw2LDgsMTMsMTIsNSwxMiwxMywxNCwxMSw4LDUsNl0sZz1bOCw5LDksMTEsMTMsMTUsMTUsNSw3LDcsOCwxMSwxNCwxNCwxMiw2LDksMTMsMTUsNywxMiw4LDksMTEsNyw3LDEyLDcsNiwxNSwxMywxMSw5LDcsMTUsMTEsOCw2LDYsMTQsMTIsMTMsNSwxNCwxMywxMyw3LDUsMTUsNSw4LDExLDE0LDE0LDYsMTQsNiw5LDEyLDksMTIsNSwxNSw4LDgsNSwxMiw5LDEyLDUsMTQsNiw4LDEzLDYsNSwxNSwxMywxMSwxMV19LDkwNDE6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3Quc2hhMT1yKDQ3NjEpLHQuc2hhMjI0PXIoNzk5KSx0LnNoYTI1Nj1yKDkzNDQpLHQuc2hhMzg0PXIoNzcyKSx0LnNoYTUxMj1yKDU5MDApfSw0NzYxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDY0MzYpLGk9cig1NzcyKSxvPXIoNzAzOCkscz1uLnJvdGwzMixhPW4uc3VtMzIsYz1uLnN1bTMyXzUsZj1vLmZ0XzEsdT1pLkJsb2NrSGFzaCxkPVsxNTE4NTAwMjQ5LDE4NTk3NzUzOTMsMjQwMDk1OTcwOCwzMzk1NDY5NzgyXTtmdW5jdGlvbiBoKCl7aWYoISh0aGlzIGluc3RhbmNlb2YgaCkpcmV0dXJuIG5ldyBoO3UuY2FsbCh0aGlzKSx0aGlzLmg9WzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSx0aGlzLlc9bmV3IEFycmF5KDgwKX1uLmluaGVyaXRzKGgsdSksZS5leHBvcnRzPWgsaC5ibG9ja1NpemU9NTEyLGgub3V0U2l6ZT0xNjAsaC5obWFjU3RyZW5ndGg9ODAsaC5wYWRMZW5ndGg9NjQsaC5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj10aGlzLlcsbj0wO248MTY7bisrKXJbbl09ZVt0K25dO2Zvcig7bjxyLmxlbmd0aDtuKyspcltuXT1zKHJbbi0zXV5yW24tOF1ecltuLTE0XV5yW24tMTZdLDEpO3ZhciBpPXRoaXMuaFswXSxvPXRoaXMuaFsxXSx1PXRoaXMuaFsyXSxoPXRoaXMuaFszXSxsPXRoaXMuaFs0XTtmb3Iobj0wO248ci5sZW5ndGg7bisrKXt2YXIgcD1+fihuLzIwKSxiPWMocyhpLDUpLGYocCxvLHUsaCksbCxyW25dLGRbcF0pO2w9aCxoPXUsdT1zKG8sMzApLG89aSxpPWJ9dGhpcy5oWzBdPWEodGhpcy5oWzBdLGkpLHRoaXMuaFsxXT1hKHRoaXMuaFsxXSxvKSx0aGlzLmhbMl09YSh0aGlzLmhbMl0sdSksdGhpcy5oWzNdPWEodGhpcy5oWzNdLGgpLHRoaXMuaFs0XT1hKHRoaXMuaFs0XSxsKX0saC5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbihlKXtyZXR1cm5cImhleFwiPT09ZT9uLnRvSGV4MzIodGhpcy5oLFwiYmlnXCIpOm4uc3BsaXQzMih0aGlzLmgsXCJiaWdcIil9fSw3OTk6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNjQzNiksaT1yKDkzNDQpO2Z1bmN0aW9uIG8oKXtpZighKHRoaXMgaW5zdGFuY2VvZiBvKSlyZXR1cm4gbmV3IG87aS5jYWxsKHRoaXMpLHRoaXMuaD1bMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF19bi5pbmhlcml0cyhvLGkpLGUuZXhwb3J0cz1vLG8uYmxvY2tTaXplPTUxMixvLm91dFNpemU9MjI0LG8uaG1hY1N0cmVuZ3RoPTE5MixvLnBhZExlbmd0aD02NCxvLnByb3RvdHlwZS5fZGlnZXN0PWZ1bmN0aW9uKGUpe3JldHVyblwiaGV4XCI9PT1lP24udG9IZXgzMih0aGlzLmguc2xpY2UoMCw3KSxcImJpZ1wiKTpuLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsNyksXCJiaWdcIil9fSw5MzQ0OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDY0MzYpLGk9cig1NzcyKSxvPXIoNzAzOCkscz1yKDk3NDYpLGE9bi5zdW0zMixjPW4uc3VtMzJfNCxmPW4uc3VtMzJfNSx1PW8uY2gzMixkPW8ubWFqMzIsaD1vLnMwXzI1NixsPW8uczFfMjU2LHA9by5nMF8yNTYsYj1vLmcxXzI1Nix5PWkuQmxvY2tIYXNoLGc9WzExMTYzNTI0MDgsMTg5OTQ0NzQ0MSwzMDQ5MzIzNDcxLDM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCwxNDI2ODgxOTg3LDE5MjUwNzgzODgsMjE2MjA3ODIwNiwyNjE0ODg4MTAzLDMyNDgyMjI1ODAsMzgzNTM5MDQwMSw0MDIyMjI0Nzc0LDI2NDM0NzA3OCw2MDQ4MDc2MjgsNzcwMjU1OTgzLDEyNDkxNTAxMjIsMTU1NTA4MTY5MiwxOTk2MDY0OTg2LDI1NTQyMjA4ODIsMjgyMTgzNDM0OSwyOTUyOTk2ODA4LDMyMTAzMTM2NzEsMzMzNjU3MTg5MSwzNTg0NTI4NzExLDExMzkyNjk5MywzMzgyNDE4OTUsNjY2MzA3MjA1LDc3MzUyOTkxMiwxMjk0NzU3MzcyLDEzOTYxODIyOTEsMTY5NTE4MzcwMCwxOTg2NjYxMDUxLDIxNzcwMjYzNTAsMjQ1Njk1NjAzNywyNzMwNDg1OTIxLDI4MjAzMDI0MTEsMzI1OTczMDgwMCwzMzQ1NzY0NzcxLDM1MTYwNjU4MTcsMzYwMDM1MjgwNCw0MDk0NTcxOTA5LDI3NTQyMzM0NCw0MzAyMjc3MzQsNTA2OTQ4NjE2LDY1OTA2MDU1Niw4ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF07ZnVuY3Rpb24gbSgpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG0pKXJldHVybiBuZXcgbTt5LmNhbGwodGhpcyksdGhpcy5oPVsxNzc5MDMzNzAzLDMxNDQxMzQyNzcsMTAxMzkwNDI0MiwyNzczNDgwNzYyLDEzNTk4OTMxMTksMjYwMDgyMjkyNCw1Mjg3MzQ2MzUsMTU0MTQ1OTIyNV0sdGhpcy5rPWcsdGhpcy5XPW5ldyBBcnJheSg2NCl9bi5pbmhlcml0cyhtLHkpLGUuZXhwb3J0cz1tLG0uYmxvY2tTaXplPTUxMixtLm91dFNpemU9MjU2LG0uaG1hY1N0cmVuZ3RoPTE5MixtLnBhZExlbmd0aD02NCxtLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMuVyxuPTA7bjwxNjtuKyspcltuXT1lW3Qrbl07Zm9yKDtuPHIubGVuZ3RoO24rKylyW25dPWMoYihyW24tMl0pLHJbbi03XSxwKHJbbi0xNV0pLHJbbi0xNl0pO3ZhciBpPXRoaXMuaFswXSxvPXRoaXMuaFsxXSx5PXRoaXMuaFsyXSxnPXRoaXMuaFszXSxtPXRoaXMuaFs0XSx2PXRoaXMuaFs1XSx3PXRoaXMuaFs2XSxfPXRoaXMuaFs3XTtmb3Iocyh0aGlzLmsubGVuZ3RoPT09ci5sZW5ndGgpLG49MDtuPHIubGVuZ3RoO24rKyl7dmFyIFM9ZihfLGwobSksdShtLHYsdyksdGhpcy5rW25dLHJbbl0pLEU9YShoKGkpLGQoaSxvLHkpKTtfPXcsdz12LHY9bSxtPWEoZyxTKSxnPXkseT1vLG89aSxpPWEoUyxFKX10aGlzLmhbMF09YSh0aGlzLmhbMF0saSksdGhpcy5oWzFdPWEodGhpcy5oWzFdLG8pLHRoaXMuaFsyXT1hKHRoaXMuaFsyXSx5KSx0aGlzLmhbM109YSh0aGlzLmhbM10sZyksdGhpcy5oWzRdPWEodGhpcy5oWzRdLG0pLHRoaXMuaFs1XT1hKHRoaXMuaFs1XSx2KSx0aGlzLmhbNl09YSh0aGlzLmhbNl0sdyksdGhpcy5oWzddPWEodGhpcy5oWzddLF8pfSxtLnByb3RvdHlwZS5fZGlnZXN0PWZ1bmN0aW9uKGUpe3JldHVyblwiaGV4XCI9PT1lP24udG9IZXgzMih0aGlzLmgsXCJiaWdcIik6bi5zcGxpdDMyKHRoaXMuaCxcImJpZ1wiKX19LDc3MjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig2NDM2KSxpPXIoNTkwMCk7ZnVuY3Rpb24gbygpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG8pKXJldHVybiBuZXcgbztpLmNhbGwodGhpcyksdGhpcy5oPVszNDE4MDcwMzY1LDMyMzgzNzEwMzIsMTY1NDI3MDI1MCw5MTQxNTA2NjMsMjQzODUyOTM3MCw4MTI3MDI5OTksMzU1NDYyMzYwLDQxNDQ5MTI2OTcsMTczMTQwNTQxNSw0MjkwNzc1ODU3LDIzOTQxODAyMzEsMTc1MDYwMzAyNSwzNjc1MDA4NTI1LDE2OTQwNzY4MzksMTIwMzA2MjgxMywzMjA0MDc1NDI4XX1uLmluaGVyaXRzKG8saSksZS5leHBvcnRzPW8sby5ibG9ja1NpemU9MTAyNCxvLm91dFNpemU9Mzg0LG8uaG1hY1N0cmVuZ3RoPTE5MixvLnBhZExlbmd0aD0xMjgsby5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbihlKXtyZXR1cm5cImhleFwiPT09ZT9uLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsMTIpLFwiYmlnXCIpOm4uc3BsaXQzMih0aGlzLmguc2xpY2UoMCwxMiksXCJiaWdcIil9fSw1OTAwOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDY0MzYpLGk9cig1NzcyKSxvPXIoOTc0Nikscz1uLnJvdHI2NF9oaSxhPW4ucm90cjY0X2xvLGM9bi5zaHI2NF9oaSxmPW4uc2hyNjRfbG8sdT1uLnN1bTY0LGQ9bi5zdW02NF9oaSxoPW4uc3VtNjRfbG8sbD1uLnN1bTY0XzRfaGkscD1uLnN1bTY0XzRfbG8sYj1uLnN1bTY0XzVfaGkseT1uLnN1bTY0XzVfbG8sZz1pLkJsb2NrSGFzaCxtPVsxMTE2MzUyNDA4LDM2MDk3Njc0NTgsMTg5OTQ0NzQ0MSw2MDI4OTE3MjUsMzA0OTMyMzQ3MSwzOTY0NDg0Mzk5LDM5MjEwMDk1NzMsMjE3MzI5NTU0OCw5NjE5ODcxNjMsNDA4MTYyODQ3MiwxNTA4OTcwOTkzLDMwNTM4MzQyNjUsMjQ1MzYzNTc0OCwyOTM3NjcxNTc5LDI4NzA3NjMyMjEsMzY2NDYwOTU2MCwzNjI0MzgxMDgwLDI3MzQ4ODMzOTQsMzEwNTk4NDAxLDExNjQ5OTY1NDIsNjA3MjI1Mjc4LDEzMjM2MTA3NjQsMTQyNjg4MTk4NywzNTkwMzA0OTk0LDE5MjUwNzgzODgsNDA2ODE4MjM4MywyMTYyMDc4MjA2LDk5MTMzNjExMywyNjE0ODg4MTAzLDYzMzgwMzMxNywzMjQ4MjIyNTgwLDM0Nzk3NzQ4NjgsMzgzNTM5MDQwMSwyNjY2NjEzNDU4LDQwMjIyMjQ3NzQsOTQ0NzExMTM5LDI2NDM0NzA3OCwyMzQxMjYyNzczLDYwNDgwNzYyOCwyMDA3ODAwOTMzLDc3MDI1NTk4MywxNDk1OTkwOTAxLDEyNDkxNTAxMjIsMTg1NjQzMTIzNSwxNTU1MDgxNjkyLDMxNzUyMTgxMzIsMTk5NjA2NDk4NiwyMTk4OTUwODM3LDI1NTQyMjA4ODIsMzk5OTcxOTMzOSwyODIxODM0MzQ5LDc2Njc4NDAxNiwyOTUyOTk2ODA4LDI1NjY1OTQ4NzksMzIxMDMxMzY3MSwzMjAzMzM3OTU2LDMzMzY1NzE4OTEsMTAzNDQ1NzAyNiwzNTg0NTI4NzExLDI0NjY5NDg5MDEsMTEzOTI2OTkzLDM3NTgzMjYzODMsMzM4MjQxODk1LDE2ODcxNzkzNiw2NjYzMDcyMDUsMTE4ODE3OTk2NCw3NzM1Mjk5MTIsMTU0NjA0NTczNCwxMjk0NzU3MzcyLDE1MjI4MDU0ODUsMTM5NjE4MjI5MSwyNjQzODMzODIzLDE2OTUxODM3MDAsMjM0MzUyNzM5MCwxOTg2NjYxMDUxLDEwMTQ0Nzc0ODAsMjE3NzAyNjM1MCwxMjA2NzU5MTQyLDI0NTY5NTYwMzcsMzQ0MDc3NjI3LDI3MzA0ODU5MjEsMTI5MDg2MzQ2MCwyODIwMzAyNDExLDMxNTg0NTQyNzMsMzI1OTczMDgwMCwzNTA1OTUyNjU3LDMzNDU3NjQ3NzEsMTA2MjE3MDA4LDM1MTYwNjU4MTcsMzYwNjAwODM0NCwzNjAwMzUyODA0LDE0MzI3MjU3NzYsNDA5NDU3MTkwOSwxNDY3MDMxNTk0LDI3NTQyMzM0NCw4NTExNjk3MjAsNDMwMjI3NzM0LDMxMDA4MjM3NTIsNTA2OTQ4NjE2LDEzNjMyNTgxOTUsNjU5MDYwNTU2LDM3NTA2ODU1OTMsODgzOTk3ODc3LDM3ODUwNTAyODAsOTU4MTM5NTcxLDMzMTgzMDc0MjcsMTMyMjgyMjIxOCwzODEyNzIzNDAzLDE1MzcwMDIwNjMsMjAwMzAzNDk5NSwxNzQ3ODczNzc5LDM2MDIwMzY4OTksMTk1NTU2MjIyMiwxNTc1OTkwMDEyLDIwMjQxMDQ4MTUsMTEyNTU5MjkyOCwyMjI3NzMwNDUyLDI3MTY5MDQzMDYsMjM2MTg1MjQyNCw0NDI3NzYwNDQsMjQyODQzNjQ3NCw1OTM2OTgzNDQsMjc1NjczNDE4NywzNzMzMTEwMjQ5LDMyMDQwMzE0NzksMjk5OTM1MTU3MywzMzI5MzI1Mjk4LDM4MTU5MjA0MjcsMzM5MTU2OTYxNCwzOTI4MzgzOTAwLDM1MTUyNjcyNzEsNTY2MjgwNzExLDM5NDAxODc2MDYsMzQ1NDA2OTUzNCw0MTE4NjMwMjcxLDQwMDAyMzk5OTIsMTE2NDE4NDc0LDE5MTQxMzg1NTQsMTc0MjkyNDIxLDI3MzEwNTUyNzAsMjg5MzgwMzU2LDMyMDM5OTMwMDYsNDYwMzkzMjY5LDMyMDYyMDMxNSw2ODU0NzE3MzMsNTg3NDk2ODM2LDg1MjE0Mjk3MSwxMDg2NzkyODUxLDEwMTcwMzYyOTgsMzY1NTQzMTAwLDExMjYwMDA1ODAsMjYxODI5NzY3NiwxMjg4MDMzNDcwLDM0MDk4NTUxNTgsMTUwMTUwNTk0OCw0MjM0NTA5ODY2LDE2MDcxNjc5MTUsOTg3MTY3NDY4LDE4MTY0MDIzMTYsMTI0NjE4OTU5MV07ZnVuY3Rpb24gdigpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHYpKXJldHVybiBuZXcgdjtnLmNhbGwodGhpcyksdGhpcy5oPVsxNzc5MDMzNzAzLDQwODkyMzU3MjAsMzE0NDEzNDI3NywyMjI3ODczNTk1LDEwMTM5MDQyNDIsNDI3MTE3NTcyMywyNzczNDgwNzYyLDE1OTU3NTAxMjksMTM1OTg5MzExOSwyOTE3NTY1MTM3LDI2MDA4MjI5MjQsNzI1NTExMTk5LDUyODczNDYzNSw0MjE1Mzg5NTQ3LDE1NDE0NTkyMjUsMzI3MDMzMjA5XSx0aGlzLms9bSx0aGlzLlc9bmV3IEFycmF5KDE2MCl9ZnVuY3Rpb24gdyhlLHQscixuLGkpe3ZhciBvPWUmcl5+ZSZpO3JldHVybiBvPDAmJihvKz00Mjk0OTY3Mjk2KSxvfWZ1bmN0aW9uIF8oZSx0LHIsbixpLG8pe3ZhciBzPXQmbl5+dCZvO3JldHVybiBzPDAmJihzKz00Mjk0OTY3Mjk2KSxzfWZ1bmN0aW9uIFMoZSx0LHIsbixpKXt2YXIgbz1lJnJeZSZpXnImaTtyZXR1cm4gbzwwJiYobys9NDI5NDk2NzI5Niksb31mdW5jdGlvbiBFKGUsdCxyLG4saSxvKXt2YXIgcz10Jm5edCZvXm4mbztyZXR1cm4gczwwJiYocys9NDI5NDk2NzI5Niksc31mdW5jdGlvbiBBKGUsdCl7dmFyIHI9cyhlLHQsMjgpXnModCxlLDIpXnModCxlLDcpO3JldHVybiByPDAmJihyKz00Mjk0OTY3Mjk2KSxyfWZ1bmN0aW9uIHgoZSx0KXt2YXIgcj1hKGUsdCwyOCleYSh0LGUsMileYSh0LGUsNyk7cmV0dXJuIHI8MCYmKHIrPTQyOTQ5NjcyOTYpLHJ9ZnVuY3Rpb24gayhlLHQpe3ZhciByPWEoZSx0LDE0KV5hKGUsdCwxOCleYSh0LGUsOSk7cmV0dXJuIHI8MCYmKHIrPTQyOTQ5NjcyOTYpLHJ9ZnVuY3Rpb24gUChlLHQpe3ZhciByPXMoZSx0LDEpXnMoZSx0LDgpXmMoZSx0LDcpO3JldHVybiByPDAmJihyKz00Mjk0OTY3Mjk2KSxyfWZ1bmN0aW9uIE8oZSx0KXt2YXIgcj1hKGUsdCwxKV5hKGUsdCw4KV5mKGUsdCw3KTtyZXR1cm4gcjwwJiYocis9NDI5NDk2NzI5Nikscn1mdW5jdGlvbiBNKGUsdCl7dmFyIHI9YShlLHQsMTkpXmEodCxlLDI5KV5mKGUsdCw2KTtyZXR1cm4gcjwwJiYocis9NDI5NDk2NzI5Nikscn1uLmluaGVyaXRzKHYsZyksZS5leHBvcnRzPXYsdi5ibG9ja1NpemU9MTAyNCx2Lm91dFNpemU9NTEyLHYuaG1hY1N0cmVuZ3RoPTE5Mix2LnBhZExlbmd0aD0xMjgsdi5wcm90b3R5cGUuX3ByZXBhcmVCbG9jaz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj10aGlzLlcsbj0wO248MzI7bisrKXJbbl09ZVt0K25dO2Zvcig7bjxyLmxlbmd0aDtuKz0yKXt2YXIgaT0oeT1yW24tNF0sZz1yW24tM10sbT12b2lkIDAsKG09cyh5LGcsMTkpXnMoZyx5LDI5KV5jKHksZyw2KSk8MCYmKG0rPTQyOTQ5NjcyOTYpLG0pLG89TShyW24tNF0scltuLTNdKSxhPXJbbi0xNF0sZj1yW24tMTNdLHU9UChyW24tMzBdLHJbbi0yOV0pLGQ9TyhyW24tMzBdLHJbbi0yOV0pLGg9cltuLTMyXSxiPXJbbi0zMV07cltuXT1sKGksbyxhLGYsdSxkLGgsYikscltuKzFdPXAoaSxvLGEsZix1LGQsaCxiKX12YXIgeSxnLG19LHYucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24oZSx0KXt0aGlzLl9wcmVwYXJlQmxvY2soZSx0KTt2YXIgcixuLGksYT10aGlzLlcsYz10aGlzLmhbMF0sZj10aGlzLmhbMV0sbD10aGlzLmhbMl0scD10aGlzLmhbM10sZz10aGlzLmhbNF0sbT10aGlzLmhbNV0sdj10aGlzLmhbNl0sUD10aGlzLmhbN10sTz10aGlzLmhbOF0sTT10aGlzLmhbOV0sST10aGlzLmhbMTBdLFQ9dGhpcy5oWzExXSxSPXRoaXMuaFsxMl0sTj10aGlzLmhbMTNdLEM9dGhpcy5oWzE0XSxqPXRoaXMuaFsxNV07byh0aGlzLmsubGVuZ3RoPT09YS5sZW5ndGgpO2Zvcih2YXIgQj0wO0I8YS5sZW5ndGg7Qis9Mil7dmFyIEw9QyxEPWosVT0oaT12b2lkIDAsKGk9cyhyPU8sbj1NLDE0KV5zKHIsbiwxOClecyhuLHIsOSkpPDAmJihpKz00Mjk0OTY3Mjk2KSxpKSxxPWsoTyxNKSxGPXcoTywwLEksMCxSKSxIPV8oMCxNLDAsVCwwLE4pLHo9dGhpcy5rW0JdLEs9dGhpcy5rW0IrMV0sVj1hW0JdLEc9YVtCKzFdLFc9YihMLEQsVSxxLEYsSCx6LEssVixHKSxYPXkoTCxELFUscSxGLEgseixLLFYsRyk7TD1BKGMsZiksRD14KGMsZiksVT1TKGMsMCxsLDAsZykscT1FKDAsZiwwLHAsMCxtKTt2YXIgWT1kKEwsRCxVLHEpLEo9aChMLEQsVSxxKTtDPVIsaj1OLFI9SSxOPVQsST1PLFQ9TSxPPWQodixQLFcsWCksTT1oKFAsUCxXLFgpLHY9ZyxQPW0sZz1sLG09cCxsPWMscD1mLGM9ZChXLFgsWSxKKSxmPWgoVyxYLFksSil9dSh0aGlzLmgsMCxjLGYpLHUodGhpcy5oLDIsbCxwKSx1KHRoaXMuaCw0LGcsbSksdSh0aGlzLmgsNix2LFApLHUodGhpcy5oLDgsTyxNKSx1KHRoaXMuaCwxMCxJLFQpLHUodGhpcy5oLDEyLFIsTiksdSh0aGlzLmgsMTQsQyxqKX0sdi5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbihlKXtyZXR1cm5cImhleFwiPT09ZT9uLnRvSGV4MzIodGhpcy5oLFwiYmlnXCIpOm4uc3BsaXQzMih0aGlzLmgsXCJiaWdcIil9fSw3MDM4OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDY0MzYpLnJvdHIzMjtmdW5jdGlvbiBpKGUsdCxyKXtyZXR1cm4gZSZ0Xn5lJnJ9ZnVuY3Rpb24gbyhlLHQscil7cmV0dXJuIGUmdF5lJnJedCZyfWZ1bmN0aW9uIHMoZSx0LHIpe3JldHVybiBlXnRecn10LmZ0XzE9ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIDA9PT1lP2kodCxyLG4pOjE9PT1lfHwzPT09ZT9zKHQscixuKToyPT09ZT9vKHQscixuKTp2b2lkIDB9LHQuY2gzMj1pLHQubWFqMzI9byx0LnAzMj1zLHQuczBfMjU2PWZ1bmN0aW9uKGUpe3JldHVybiBuKGUsMilebihlLDEzKV5uKGUsMjIpfSx0LnMxXzI1Nj1mdW5jdGlvbihlKXtyZXR1cm4gbihlLDYpXm4oZSwxMSlebihlLDI1KX0sdC5nMF8yNTY9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSw3KV5uKGUsMTgpXmU+Pj4zfSx0LmcxXzI1Nj1mdW5jdGlvbihlKXtyZXR1cm4gbihlLDE3KV5uKGUsMTkpXmU+Pj4xMH19LDY0MzY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoOTc0NiksaT1yKDU3MTcpO2Z1bmN0aW9uIG8oZSx0KXtyZXR1cm4gNTUyOTY9PSg2NDUxMiZlLmNoYXJDb2RlQXQodCkpJiYhKHQ8MHx8dCsxPj1lLmxlbmd0aCkmJjU2MzIwPT0oNjQ1MTImZS5jaGFyQ29kZUF0KHQrMSkpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuKGU+Pj4yNHxlPj4+OCY2NTI4MHxlPDw4JjE2NzExNjgwfCgyNTUmZSk8PDI0KT4+PjB9ZnVuY3Rpb24gYShlKXtyZXR1cm4gMT09PWUubGVuZ3RoP1wiMFwiK2U6ZX1mdW5jdGlvbiBjKGUpe3JldHVybiA3PT09ZS5sZW5ndGg/XCIwXCIrZTo2PT09ZS5sZW5ndGg/XCIwMFwiK2U6NT09PWUubGVuZ3RoP1wiMDAwXCIrZTo0PT09ZS5sZW5ndGg/XCIwMDAwXCIrZTozPT09ZS5sZW5ndGg/XCIwMDAwMFwiK2U6Mj09PWUubGVuZ3RoP1wiMDAwMDAwXCIrZToxPT09ZS5sZW5ndGg/XCIwMDAwMDAwXCIrZTplfXQuaW5oZXJpdHM9aSx0LnRvQXJyYXk9ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlLnNsaWNlKCk7aWYoIWUpcmV0dXJuW107dmFyIHI9W107aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpaWYodCl7aWYoXCJoZXhcIj09PXQpZm9yKChlPWUucmVwbGFjZSgvW15hLXowLTldKy9naSxcIlwiKSkubGVuZ3RoJTIhPTAmJihlPVwiMFwiK2UpLGk9MDtpPGUubGVuZ3RoO2krPTIpci5wdXNoKHBhcnNlSW50KGVbaV0rZVtpKzFdLDE2KSl9ZWxzZSBmb3IodmFyIG49MCxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBzPWUuY2hhckNvZGVBdChpKTtzPDEyOD9yW24rK109czpzPDIwNDg/KHJbbisrXT1zPj42fDE5MixyW24rK109NjMmc3wxMjgpOm8oZSxpKT8ocz02NTUzNisoKDEwMjMmcyk8PDEwKSsoMTAyMyZlLmNoYXJDb2RlQXQoKytpKSkscltuKytdPXM+PjE4fDI0MCxyW24rK109cz4+MTImNjN8MTI4LHJbbisrXT1zPj42JjYzfDEyOCxyW24rK109NjMmc3wxMjgpOihyW24rK109cz4+MTJ8MjI0LHJbbisrXT1zPj42JjYzfDEyOCxyW24rK109NjMmc3wxMjgpfWVsc2UgZm9yKGk9MDtpPGUubGVuZ3RoO2krKylyW2ldPTB8ZVtpXTtyZXR1cm4gcn0sdC50b0hleD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIixyPTA7cjxlLmxlbmd0aDtyKyspdCs9YShlW3JdLnRvU3RyaW5nKDE2KSk7cmV0dXJuIHR9LHQuaHRvbmw9cyx0LnRvSGV4MzI9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9XCJcIixuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWVbbl07XCJsaXR0bGVcIj09PXQmJihpPXMoaSkpLHIrPWMoaS50b1N0cmluZygxNikpfXJldHVybiByfSx0Lnplcm8yPWEsdC56ZXJvOD1jLHQuam9pbjMyPWZ1bmN0aW9uKGUsdCxyLGkpe3ZhciBvPXItdDtuKG8lND09MCk7Zm9yKHZhciBzPW5ldyBBcnJheShvLzQpLGE9MCxjPXQ7YTxzLmxlbmd0aDthKyssYys9NCl7dmFyIGY7Zj1cImJpZ1wiPT09aT9lW2NdPDwyNHxlW2MrMV08PDE2fGVbYysyXTw8OHxlW2MrM106ZVtjKzNdPDwyNHxlW2MrMl08PDE2fGVbYysxXTw8OHxlW2NdLHNbYV09Zj4+PjB9cmV0dXJuIHN9LHQuc3BsaXQzMj1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1uZXcgQXJyYXkoNCplLmxlbmd0aCksbj0wLGk9MDtuPGUubGVuZ3RoO24rKyxpKz00KXt2YXIgbz1lW25dO1wiYmlnXCI9PT10PyhyW2ldPW8+Pj4yNCxyW2krMV09bz4+PjE2JjI1NSxyW2krMl09bz4+PjgmMjU1LHJbaSszXT0yNTUmbyk6KHJbaSszXT1vPj4+MjQscltpKzJdPW8+Pj4xNiYyNTUscltpKzFdPW8+Pj44JjI1NSxyW2ldPTI1NSZvKX1yZXR1cm4gcn0sdC5yb3RyMzI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+PnR8ZTw8MzItdH0sdC5yb3RsMzI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTw8dHxlPj4+MzItdH0sdC5zdW0zMj1mdW5jdGlvbihlLHQpe3JldHVybiBlK3Q+Pj4wfSx0LnN1bTMyXzM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlK3Qrcj4+PjB9LHQuc3VtMzJfND1mdW5jdGlvbihlLHQscixuKXtyZXR1cm4gZSt0K3Irbj4+PjB9LHQuc3VtMzJfNT1mdW5jdGlvbihlLHQscixuLGkpe3JldHVybiBlK3QrcituK2k+Pj4wfSx0LnN1bTY0PWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPWVbdF0sbz1uK2VbdCsxXT4+PjAscz0obzxuPzE6MCkrcitpO2VbdF09cz4+PjAsZVt0KzFdPW99LHQuc3VtNjRfaGk9ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuKHQrbj4+PjA8dD8xOjApK2Urcj4+PjB9LHQuc3VtNjRfbG89ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIHQrbj4+PjB9LHQuc3VtNjRfNF9oaT1mdW5jdGlvbihlLHQscixuLGksbyxzLGEpe3ZhciBjPTAsZj10O3JldHVybiBjKz0oZj1mK24+Pj4wKTx0PzE6MCxjKz0oZj1mK28+Pj4wKTxvPzE6MCxlK3IraStzKyhjKz0oZj1mK2E+Pj4wKTxhPzE6MCk+Pj4wfSx0LnN1bTY0XzRfbG89ZnVuY3Rpb24oZSx0LHIsbixpLG8scyxhKXtyZXR1cm4gdCtuK28rYT4+PjB9LHQuc3VtNjRfNV9oaT1mdW5jdGlvbihlLHQscixuLGksbyxzLGEsYyxmKXt2YXIgdT0wLGQ9dDtyZXR1cm4gdSs9KGQ9ZCtuPj4+MCk8dD8xOjAsdSs9KGQ9ZCtvPj4+MCk8bz8xOjAsdSs9KGQ9ZCthPj4+MCk8YT8xOjAsZStyK2krcytjKyh1Kz0oZD1kK2Y+Pj4wKTxmPzE6MCk+Pj4wfSx0LnN1bTY0XzVfbG89ZnVuY3Rpb24oZSx0LHIsbixpLG8scyxhLGMsZil7cmV0dXJuIHQrbitvK2ErZj4+PjB9LHQucm90cjY0X2hpPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4odDw8MzItcnxlPj4+cik+Pj4wfSx0LnJvdHI2NF9sbz1mdW5jdGlvbihlLHQscil7cmV0dXJuKGU8PDMyLXJ8dD4+PnIpPj4+MH0sdC5zaHI2NF9oaT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU+Pj5yfSx0LnNocjY0X2xvPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4oZTw8MzItcnx0Pj4+cik+Pj4wfX0sMjE1NjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzNzE1KSxpPXIoNDUwNCksbz1yKDk3NDYpO2Z1bmN0aW9uIHMoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcykpcmV0dXJuIG5ldyBzKGUpO3RoaXMuaGFzaD1lLmhhc2gsdGhpcy5wcmVkUmVzaXN0PSEhZS5wcmVkUmVzaXN0LHRoaXMub3V0TGVuPXRoaXMuaGFzaC5vdXRTaXplLHRoaXMubWluRW50cm9weT1lLm1pbkVudHJvcHl8fHRoaXMuaGFzaC5obWFjU3RyZW5ndGgsdGhpcy5fcmVzZWVkPW51bGwsdGhpcy5yZXNlZWRJbnRlcnZhbD1udWxsLHRoaXMuSz1udWxsLHRoaXMuVj1udWxsO3ZhciB0PWkudG9BcnJheShlLmVudHJvcHksZS5lbnRyb3B5RW5jfHxcImhleFwiKSxyPWkudG9BcnJheShlLm5vbmNlLGUubm9uY2VFbmN8fFwiaGV4XCIpLG49aS50b0FycmF5KGUucGVycyxlLnBlcnNFbmN8fFwiaGV4XCIpO28odC5sZW5ndGg+PXRoaXMubWluRW50cm9weS84LFwiTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiBcIit0aGlzLm1pbkVudHJvcHkrXCIgYml0c1wiKSx0aGlzLl9pbml0KHQscixuKX1lLmV4cG9ydHM9cyxzLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbihlLHQscil7dmFyIG49ZS5jb25jYXQodCkuY29uY2F0KHIpO3RoaXMuSz1uZXcgQXJyYXkodGhpcy5vdXRMZW4vOCksdGhpcy5WPW5ldyBBcnJheSh0aGlzLm91dExlbi84KTtmb3IodmFyIGk9MDtpPHRoaXMuVi5sZW5ndGg7aSsrKXRoaXMuS1tpXT0wLHRoaXMuVltpXT0xO3RoaXMuX3VwZGF0ZShuKSx0aGlzLl9yZXNlZWQ9MSx0aGlzLnJlc2VlZEludGVydmFsPTI4MTQ3NDk3NjcxMDY1Nn0scy5wcm90b3R5cGUuX2htYWM9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4uaG1hYyh0aGlzLmhhc2gsdGhpcy5LKX0scy5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikudXBkYXRlKFswXSk7ZSYmKHQ9dC51cGRhdGUoZSkpLHRoaXMuSz10LmRpZ2VzdCgpLHRoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCksZSYmKHRoaXMuSz10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikudXBkYXRlKFsxXSkudXBkYXRlKGUpLmRpZ2VzdCgpLHRoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCkpfSxzLnByb3RvdHlwZS5yZXNlZWQ9ZnVuY3Rpb24oZSx0LHIsbil7XCJzdHJpbmdcIiE9dHlwZW9mIHQmJihuPXIscj10LHQ9bnVsbCksZT1pLnRvQXJyYXkoZSx0KSxyPWkudG9BcnJheShyLG4pLG8oZS5sZW5ndGg+PXRoaXMubWluRW50cm9weS84LFwiTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiBcIit0aGlzLm1pbkVudHJvcHkrXCIgYml0c1wiKSx0aGlzLl91cGRhdGUoZS5jb25jYXQocnx8W10pKSx0aGlzLl9yZXNlZWQ9MX0scy5wcm90b3R5cGUuZ2VuZXJhdGU9ZnVuY3Rpb24oZSx0LHIsbil7aWYodGhpcy5fcmVzZWVkPnRoaXMucmVzZWVkSW50ZXJ2YWwpdGhyb3cgbmV3IEVycm9yKFwiUmVzZWVkIGlzIHJlcXVpcmVkXCIpO1wic3RyaW5nXCIhPXR5cGVvZiB0JiYobj1yLHI9dCx0PW51bGwpLHImJihyPWkudG9BcnJheShyLG58fFwiaGV4XCIpLHRoaXMuX3VwZGF0ZShyKSk7Zm9yKHZhciBvPVtdO28ubGVuZ3RoPGU7KXRoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCksbz1vLmNvbmNhdCh0aGlzLlYpO3ZhciBzPW8uc2xpY2UoMCxlKTtyZXR1cm4gdGhpcy5fdXBkYXRlKHIpLHRoaXMuX3Jlc2VlZCsrLGkuZW5jb2RlKHMsdCl9fSw5MjY3OihlLHQscik9Pnt2YXIgbj1yKDg1MDEpLGk9cig4NTc1KSxvPWUuZXhwb3J0cztmb3IodmFyIHMgaW4gbiluLmhhc093blByb3BlcnR5KHMpJiYob1tzXT1uW3NdKTtmdW5jdGlvbiBhKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1pLnBhcnNlKGUpKSxlLnByb3RvY29sfHwoZS5wcm90b2NvbD1cImh0dHBzOlwiKSxcImh0dHBzOlwiIT09ZS5wcm90b2NvbCl0aHJvdyBuZXcgRXJyb3IoJ1Byb3RvY29sIFwiJytlLnByb3RvY29sKydcIiBub3Qgc3VwcG9ydGVkLiBFeHBlY3RlZCBcImh0dHBzOlwiJyk7cmV0dXJuIGV9by5yZXF1ZXN0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9YShlKSxuLnJlcXVlc3QuY2FsbCh0aGlzLGUsdCl9LG8uZ2V0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9YShlKSxuLmdldC5jYWxsKHRoaXMsZSx0KX19LDY0NTooZSx0KT0+e3QucmVhZD1mdW5jdGlvbihlLHQscixuLGkpe3ZhciBvLHMsYT04Kmktbi0xLGM9KDE8PGEpLTEsZj1jPj4xLHU9LTcsZD1yP2ktMTowLGg9cj8tMToxLGw9ZVt0K2RdO2ZvcihkKz1oLG89bCYoMTw8LXUpLTEsbD4+PS11LHUrPWE7dT4wO289MjU2Km8rZVt0K2RdLGQrPWgsdS09OCk7Zm9yKHM9byYoMTw8LXUpLTEsbz4+PS11LHUrPW47dT4wO3M9MjU2KnMrZVt0K2RdLGQrPWgsdS09OCk7aWYoMD09PW8pbz0xLWY7ZWxzZXtpZihvPT09YylyZXR1cm4gcz9OYU46MS8wKihsPy0xOjEpO3MrPU1hdGgucG93KDIsbiksby09Zn1yZXR1cm4obD8tMToxKSpzKk1hdGgucG93KDIsby1uKX0sdC53cml0ZT1mdW5jdGlvbihlLHQscixuLGksbyl7dmFyIHMsYSxjLGY9OCpvLWktMSx1PSgxPDxmKS0xLGQ9dT4+MSxoPTIzPT09aT9NYXRoLnBvdygyLC0yNCktTWF0aC5wb3coMiwtNzcpOjAsbD1uPzA6by0xLHA9bj8xOi0xLGI9dDwwfHwwPT09dCYmMS90PDA/MTowO2Zvcih0PU1hdGguYWJzKHQpLGlzTmFOKHQpfHx0PT09MS8wPyhhPWlzTmFOKHQpPzE6MCxzPXUpOihzPU1hdGguZmxvb3IoTWF0aC5sb2codCkvTWF0aC5MTjIpLHQqKGM9TWF0aC5wb3coMiwtcykpPDEmJihzLS0sYyo9MiksKHQrPXMrZD49MT9oL2M6aCpNYXRoLnBvdygyLDEtZCkpKmM+PTImJihzKyssYy89MikscytkPj11PyhhPTAscz11KTpzK2Q+PTE/KGE9KHQqYy0xKSpNYXRoLnBvdygyLGkpLHMrPWQpOihhPXQqTWF0aC5wb3coMixkLTEpKk1hdGgucG93KDIsaSkscz0wKSk7aT49ODtlW3IrbF09MjU1JmEsbCs9cCxhLz0yNTYsaS09OCk7Zm9yKHM9czw8aXxhLGYrPWk7Zj4wO2VbcitsXT0yNTUmcyxsKz1wLHMvPTI1NixmLT04KTtlW3IrbC1wXXw9MTI4KmJ9fSw1NzE3OmU9PntcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuY3JlYXRlP2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3QmJihlLnN1cGVyXz10LGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pKX06ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYodCl7ZS5zdXBlcl89dDt2YXIgcj1mdW5jdGlvbigpe307ci5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IHIsZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZX19fSwyNTg0OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDY0MTApKCksaT1yKDE5MjQpKFwiT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1wiKSxvPWZ1bmN0aW9uKGUpe3JldHVybiEobiYmZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlN5bWJvbC50b1N0cmluZ1RhZyBpbiBlKSYmXCJbb2JqZWN0IEFyZ3VtZW50c11cIj09PWkoZSl9LHM9ZnVuY3Rpb24oZSl7cmV0dXJuISFvKGUpfHxudWxsIT09ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCYmZS5sZW5ndGg+PTAmJlwiW29iamVjdCBBcnJheV1cIiE9PWkoZSkmJlwiW29iamVjdCBGdW5jdGlvbl1cIj09PWkoZS5jYWxsZWUpfSxhPWZ1bmN0aW9uKCl7cmV0dXJuIG8oYXJndW1lbnRzKX0oKTtvLmlzTGVnYWN5QXJndW1lbnRzPXMsZS5leHBvcnRzPWE/bzpzfSw1MzIwOmU9PntcInVzZSBzdHJpY3RcIjt2YXIgdCxyLG49RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLGk9XCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3QmJm51bGwhPT1SZWZsZWN0JiZSZWZsZWN0LmFwcGx5O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSl0cnl7dD1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJsZW5ndGhcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgcn19KSxyPXt9LGkoKGZ1bmN0aW9uKCl7dGhyb3cgNDJ9KSxudWxsLHQpfWNhdGNoKGUpe2UhPT1yJiYoaT1udWxsKX1lbHNlIGk9bnVsbDt2YXIgbz0vXlxccypjbGFzc1xcYi8scz1mdW5jdGlvbihlKXt0cnl7dmFyIHQ9bi5jYWxsKGUpO3JldHVybiBvLnRlc3QodCl9Y2F0Y2goZSl7cmV0dXJuITF9fSxhPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJiEhU3ltYm9sLnRvU3RyaW5nVGFnLGY9XCJvYmplY3RcIj09dHlwZW9mIGRvY3VtZW50JiZ2b2lkIDA9PT1kb2N1bWVudC5hbGwmJnZvaWQgMCE9PWRvY3VtZW50LmFsbD9kb2N1bWVudC5hbGw6e307ZS5leHBvcnRzPWk/ZnVuY3Rpb24oZSl7aWYoZT09PWYpcmV0dXJuITA7aWYoIWUpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmIWUucHJvdG90eXBlKXJldHVybiEwO3RyeXtpKGUsbnVsbCx0KX1jYXRjaChlKXtpZihlIT09cilyZXR1cm4hMX1yZXR1cm4hcyhlKX06ZnVuY3Rpb24oZSl7aWYoZT09PWYpcmV0dXJuITA7aWYoIWUpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmIWUucHJvdG90eXBlKXJldHVybiEwO2lmKGMpcmV0dXJuIGZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hcyhlKSYmKG4uY2FsbChlKSwhMCl9Y2F0Y2goZSl7cmV0dXJuITF9fShlKTtpZihzKGUpKXJldHVybiExO3ZhciB0PWEuY2FsbChlKTtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PT10fHxcIltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dXCI9PT10fX0sODY2MjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLG89RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLHM9L15cXHMqKD86ZnVuY3Rpb24pP1xcKi8sYT1yKDY0MTApKCksYz1PYmplY3QuZ2V0UHJvdG90eXBlT2Y7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJuITE7aWYocy50ZXN0KG8uY2FsbChlKSkpcmV0dXJuITA7aWYoIWEpcmV0dXJuXCJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXVwiPT09aS5jYWxsKGUpO2lmKCFjKXJldHVybiExO2lmKHZvaWQgMD09PW4pe3ZhciB0PWZ1bmN0aW9uKCl7aWYoIWEpcmV0dXJuITE7dHJ5e3JldHVybiBGdW5jdGlvbihcInJldHVybiBmdW5jdGlvbiooKSB7fVwiKSgpfWNhdGNoKGUpe319KCk7bj0hIXQmJmModCl9cmV0dXJuIGMoZSk9PT1ufX0sMzk0NDplPT57ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIltpcy1oZXgtcHJlZml4ZWRdIHZhbHVlIG11c3QgYmUgdHlwZSAnc3RyaW5nJywgaXMgY3VycmVudGx5IHR5cGUgXCIrdHlwZW9mIGUrXCIsIHdoaWxlIGNoZWNraW5nIGlzSGV4UHJlZml4ZWQuXCIpO3JldHVyblwiMHhcIj09PWUuc2xpY2UoMCwyKX19LDg2MTE6ZT0+e1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZSE9ZX19LDM2MDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig1NTU5KSxpPXIoNDI4OSksbz1yKDg2MTEpLHM9cig5NDE1KSxhPXIoMzE5NCksYz1uKHMoKSxOdW1iZXIpO2koYyx7Z2V0UG9seWZpbGw6cyxpbXBsZW1lbnRhdGlvbjpvLHNoaW06YX0pLGUuZXhwb3J0cz1jfSw5NDE1OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDg2MTEpO2UuZXhwb3J0cz1mdW5jdGlvbigpe3JldHVybiBOdW1iZXIuaXNOYU4mJk51bWJlci5pc05hTihOYU4pJiYhTnVtYmVyLmlzTmFOKFwiYVwiKT9OdW1iZXIuaXNOYU46bn19LDMxOTQ6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDI4OSksaT1yKDk0MTUpO2UuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlPWkoKTtyZXR1cm4gbihOdW1iZXIse2lzTmFOOmV9LHtpc05hTjpmdW5jdGlvbigpe3JldHVybiBOdW1iZXIuaXNOYU4hPT1lfX0pLGV9fSw0OTcwOmU9PntcInVzZSBzdHJpY3RcIjtjb25zdCB0PWU9Pm51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5waXBlO3Qud3JpdGFibGU9ZT0+dChlKSYmITEhPT1lLndyaXRhYmxlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLl93cml0ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUuX3dyaXRhYmxlU3RhdGUsdC5yZWFkYWJsZT1lPT50KGUpJiYhMSE9PWUucmVhZGFibGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuX3JlYWQmJlwib2JqZWN0XCI9PXR5cGVvZiBlLl9yZWFkYWJsZVN0YXRlLHQuZHVwbGV4PWU9PnQud3JpdGFibGUoZSkmJnQucmVhZGFibGUoZSksdC50cmFuc2Zvcm09ZT0+dC5kdXBsZXgoZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuX3RyYW5zZm9ybSxlLmV4cG9ydHM9dH0sNTY5MjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0MDI5KSxpPXIoMzA4Myksbz1yKDE5MjQpLHM9byhcIk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcIiksYT1yKDY0MTApKCksYz1cInVuZGVmaW5lZFwiPT10eXBlb2YgZ2xvYmFsVGhpcz9yLmc6Z2xvYmFsVGhpcyxmPWkoKSx1PW8oXCJBcnJheS5wcm90b3R5cGUuaW5kZXhPZlwiLCEwKXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrPTEpaWYoZVtyXT09PXQpcmV0dXJuIHI7cmV0dXJuLTF9LGQ9byhcIlN0cmluZy5wcm90b3R5cGUuc2xpY2VcIiksaD17fSxsPXIoODgyKSxwPU9iamVjdC5nZXRQcm90b3R5cGVPZjthJiZsJiZwJiZuKGYsKGZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBjW2VdO2lmKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB0KXt2YXIgcj1wKHQpLG49bChyLFN5bWJvbC50b1N0cmluZ1RhZyk7aWYoIW4pe3ZhciBpPXAocik7bj1sKGksU3ltYm9sLnRvU3RyaW5nVGFnKX1oW2VdPW4uZ2V0fX0pKSxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlKXJldHVybiExO2lmKCFhfHwhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBlKSl7dmFyIHQ9ZChzKGUpLDgsLTEpO3JldHVybiB1KGYsdCk+LTF9cmV0dXJuISFsJiZmdW5jdGlvbihlKXt2YXIgdD0hMTtyZXR1cm4gbihoLChmdW5jdGlvbihyLG4pe2lmKCF0KXRyeXt0PXIuY2FsbChlKT09PW59Y2F0Y2goZSl7fX0pKSx0fShlKX19LDEwOTQ6KGUsdCxyKT0+e3ZhciBuLGk9cig0MTU1KTshZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1cImlucHV0IGlzIGludmFsaWQgdHlwZVwiLHM9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyxhPXM/d2luZG93Ont9O2EuSlNfU0hBM19OT19XSU5ET1cmJihzPSExKTt2YXIgYz0hcyYmXCJvYmplY3RcIj09dHlwZW9mIHNlbGY7IWEuSlNfU0hBM19OT19OT0RFX0pTJiZcIm9iamVjdFwiPT10eXBlb2YgaSYmaS52ZXJzaW9ucyYmaS52ZXJzaW9ucy5ub2RlP2E9ci5nOmMmJihhPXNlbGYpO3ZhciBmPSFhLkpTX1NIQTNfTk9fQ09NTU9OX0pTJiZlLmV4cG9ydHMsdT1yLmFtZE8sZD0hYS5KU19TSEEzX05PX0FSUkFZX0JVRkZFUiYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyLGg9XCIwMTIzNDU2Nzg5YWJjZGVmXCIuc3BsaXQoXCJcIiksbD1bNCwxMDI0LDI2MjE0NCw2NzEwODg2NF0scD1bMCw4LDE2LDI0XSxiPVsxLDAsMzI4OTgsMCwzMjkwNiwyMTQ3NDgzNjQ4LDIxNDc1MTY0MTYsMjE0NzQ4MzY0OCwzMjkwNywwLDIxNDc0ODM2NDksMCwyMTQ3NTE2NTQ1LDIxNDc0ODM2NDgsMzI3NzcsMjE0NzQ4MzY0OCwxMzgsMCwxMzYsMCwyMTQ3NTE2NDI1LDAsMjE0NzQ4MzY1OCwwLDIxNDc1MTY1NTUsMCwxMzksMjE0NzQ4MzY0OCwzMjkwNSwyMTQ3NDgzNjQ4LDMyNzcxLDIxNDc0ODM2NDgsMzI3NzAsMjE0NzQ4MzY0OCwxMjgsMjE0NzQ4MzY0OCwzMjc3OCwwLDIxNDc0ODM2NTgsMjE0NzQ4MzY0OCwyMTQ3NTE2NTQ1LDIxNDc0ODM2NDgsMzI4OTYsMjE0NzQ4MzY0OCwyMTQ3NDgzNjQ5LDAsMjE0NzUxNjQyNCwyMTQ3NDgzNjQ4XSx5PVsyMjQsMjU2LDM4NCw1MTJdLGc9WzEyOCwyNTZdLG09W1wiaGV4XCIsXCJidWZmZXJcIixcImFycmF5QnVmZmVyXCIsXCJhcnJheVwiLFwiZGlnZXN0XCJdLHY9ezEyODoxNjgsMjU2OjEzNn07IWEuSlNfU0hBM19OT19OT0RFX0pTJiZBcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9KSwhZHx8IWEuSlNfU0hBM19OT19BUlJBWV9CVUZGRVJfSVNfVklFVyYmQXJyYXlCdWZmZXIuaXNWaWV3fHwoQXJyYXlCdWZmZXIuaXNWaWV3PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZlLmJ1ZmZlciYmZS5idWZmZXIuY29uc3RydWN0b3I9PT1BcnJheUJ1ZmZlcn0pO2Zvcih2YXIgdz1mdW5jdGlvbihlLHQscil7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBuZXcgaihlLHQsZSkudXBkYXRlKG4pW3JdKCl9fSxfPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZnVuY3Rpb24obixpKXtyZXR1cm4gbmV3IGooZSx0LGkpLnVwZGF0ZShuKVtyXSgpfX0sUz1mdW5jdGlvbihlLHQscil7cmV0dXJuIGZ1bmN0aW9uKHQsbixpLG8pe3JldHVybiBQW1wiY3NoYWtlXCIrZV0udXBkYXRlKHQsbixpLG8pW3JdKCl9fSxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZnVuY3Rpb24odCxuLGksbyl7cmV0dXJuIFBbXCJrbWFjXCIrZV0udXBkYXRlKHQsbixpLG8pW3JdKCl9fSxBPWZ1bmN0aW9uKGUsdCxyLG4pe2Zvcih2YXIgaT0wO2k8bS5sZW5ndGg7KytpKXt2YXIgbz1tW2ldO2Vbb109dChyLG4sbyl9cmV0dXJuIGV9LHg9ZnVuY3Rpb24oZSx0KXt2YXIgcj13KGUsdCxcImhleFwiKTtyZXR1cm4gci5jcmVhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGooZSx0LGUpfSxyLnVwZGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gci5jcmVhdGUoKS51cGRhdGUoZSl9LEEocix3LGUsdCl9LGs9W3tuYW1lOlwia2VjY2FrXCIscGFkZGluZzpbMSwyNTYsNjU1MzYsMTY3NzcyMTZdLGJpdHM6eSxjcmVhdGVNZXRob2Q6eH0se25hbWU6XCJzaGEzXCIscGFkZGluZzpbNiwxNTM2LDM5MzIxNiwxMDA2NjMyOTZdLGJpdHM6eSxjcmVhdGVNZXRob2Q6eH0se25hbWU6XCJzaGFrZVwiLHBhZGRpbmc6WzMxLDc5MzYsMjAzMTYxNiw1MjAwOTM2OTZdLGJpdHM6ZyxjcmVhdGVNZXRob2Q6ZnVuY3Rpb24oZSx0KXt2YXIgcj1fKGUsdCxcImhleFwiKTtyZXR1cm4gci5jcmVhdGU9ZnVuY3Rpb24ocil7cmV0dXJuIG5ldyBqKGUsdCxyKX0sci51cGRhdGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5jcmVhdGUodCkudXBkYXRlKGUpfSxBKHIsXyxlLHQpfX0se25hbWU6XCJjc2hha2VcIixwYWRkaW5nOmwsYml0czpnLGNyZWF0ZU1ldGhvZDpmdW5jdGlvbihlLHQpe3ZhciByPXZbZV0sbj1TKGUsMCxcImhleFwiKTtyZXR1cm4gbi5jcmVhdGU9ZnVuY3Rpb24obixpLG8pe3JldHVybiBpfHxvP25ldyBqKGUsdCxuKS5ieXRlcGFkKFtpLG9dLHIpOlBbXCJzaGFrZVwiK2VdLmNyZWF0ZShuKX0sbi51cGRhdGU9ZnVuY3Rpb24oZSx0LHIsaSl7cmV0dXJuIG4uY3JlYXRlKHQscixpKS51cGRhdGUoZSl9LEEobixTLGUsdCl9fSx7bmFtZTpcImttYWNcIixwYWRkaW5nOmwsYml0czpnLGNyZWF0ZU1ldGhvZDpmdW5jdGlvbihlLHQpe3ZhciByPXZbZV0sbj1FKGUsMCxcImhleFwiKTtyZXR1cm4gbi5jcmVhdGU9ZnVuY3Rpb24obixpLG8pe3JldHVybiBuZXcgQihlLHQsaSkuYnl0ZXBhZChbXCJLTUFDXCIsb10scikuYnl0ZXBhZChbbl0scil9LG4udXBkYXRlPWZ1bmN0aW9uKGUsdCxyLGkpe3JldHVybiBuLmNyZWF0ZShlLHIsaSkudXBkYXRlKHQpfSxBKG4sRSxlLHQpfX1dLFA9e30sTz1bXSxNPTA7TTxrLmxlbmd0aDsrK00pZm9yKHZhciBJPWtbTV0sVD1JLmJpdHMsUj0wO1I8VC5sZW5ndGg7KytSKXt2YXIgTj1JLm5hbWUrXCJfXCIrVFtSXTtpZihPLnB1c2goTiksUFtOXT1JLmNyZWF0ZU1ldGhvZChUW1JdLEkucGFkZGluZyksXCJzaGEzXCIhPT1JLm5hbWUpe3ZhciBDPUkubmFtZStUW1JdO08ucHVzaChDKSxQW0NdPVBbTl19fWZ1bmN0aW9uIGooZSx0LHIpe3RoaXMuYmxvY2tzPVtdLHRoaXMucz1bXSx0aGlzLnBhZGRpbmc9dCx0aGlzLm91dHB1dEJpdHM9cix0aGlzLnJlc2V0PSEwLHRoaXMuZmluYWxpemVkPSExLHRoaXMuYmxvY2s9MCx0aGlzLnN0YXJ0PTAsdGhpcy5ibG9ja0NvdW50PTE2MDAtKGU8PDEpPj41LHRoaXMuYnl0ZUNvdW50PXRoaXMuYmxvY2tDb3VudDw8Mix0aGlzLm91dHB1dEJsb2Nrcz1yPj41LHRoaXMuZXh0cmFCeXRlcz0oMzEmcik+PjM7Zm9yKHZhciBuPTA7bjw1MDsrK24pdGhpcy5zW25dPTB9ZnVuY3Rpb24gQihlLHQscil7ai5jYWxsKHRoaXMsZSx0LHIpfWoucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihlKXtpZih0aGlzLmZpbmFsaXplZCl0aHJvdyBuZXcgRXJyb3IoXCJmaW5hbGl6ZSBhbHJlYWR5IGNhbGxlZFwiKTt2YXIgdCxyPXR5cGVvZiBlO2lmKFwic3RyaW5nXCIhPT1yKXtpZihcIm9iamVjdFwiIT09cil0aHJvdyBuZXcgRXJyb3Iobyk7aWYobnVsbD09PWUpdGhyb3cgbmV3IEVycm9yKG8pO2lmKGQmJmUuY29uc3RydWN0b3I9PT1BcnJheUJ1ZmZlcillPW5ldyBVaW50OEFycmF5KGUpO2Vsc2UgaWYoIShBcnJheS5pc0FycmF5KGUpfHxkJiZBcnJheUJ1ZmZlci5pc1ZpZXcoZSkpKXRocm93IG5ldyBFcnJvcihvKTt0PSEwfWZvcih2YXIgbixpLHM9dGhpcy5ibG9ja3MsYT10aGlzLmJ5dGVDb3VudCxjPWUubGVuZ3RoLGY9dGhpcy5ibG9ja0NvdW50LHU9MCxoPXRoaXMuczt1PGM7KXtpZih0aGlzLnJlc2V0KWZvcih0aGlzLnJlc2V0PSExLHNbMF09dGhpcy5ibG9jayxuPTE7bjxmKzE7KytuKXNbbl09MDtpZih0KWZvcihuPXRoaXMuc3RhcnQ7dTxjJiZuPGE7Kyt1KXNbbj4+Ml18PWVbdV08PHBbMyZuKytdO2Vsc2UgZm9yKG49dGhpcy5zdGFydDt1PGMmJm48YTsrK3UpKGk9ZS5jaGFyQ29kZUF0KHUpKTwxMjg/c1tuPj4yXXw9aTw8cFszJm4rK106aTwyMDQ4PyhzW24+PjJdfD0oMTkyfGk+PjYpPDxwWzMmbisrXSxzW24+PjJdfD0oMTI4fDYzJmkpPDxwWzMmbisrXSk6aTw1NTI5Nnx8aT49NTczNDQ/KHNbbj4+Ml18PSgyMjR8aT4+MTIpPDxwWzMmbisrXSxzW24+PjJdfD0oMTI4fGk+PjYmNjMpPDxwWzMmbisrXSxzW24+PjJdfD0oMTI4fDYzJmkpPDxwWzMmbisrXSk6KGk9NjU1MzYrKCgxMDIzJmkpPDwxMHwxMDIzJmUuY2hhckNvZGVBdCgrK3UpKSxzW24+PjJdfD0oMjQwfGk+PjE4KTw8cFszJm4rK10sc1tuPj4yXXw9KDEyOHxpPj4xMiY2Myk8PHBbMyZuKytdLHNbbj4+Ml18PSgxMjh8aT4+NiY2Myk8PHBbMyZuKytdLHNbbj4+Ml18PSgxMjh8NjMmaSk8PHBbMyZuKytdKTtpZih0aGlzLmxhc3RCeXRlSW5kZXg9bixuPj1hKXtmb3IodGhpcy5zdGFydD1uLWEsdGhpcy5ibG9jaz1zW2ZdLG49MDtuPGY7KytuKWhbbl1ePXNbbl07TChoKSx0aGlzLnJlc2V0PSEwfWVsc2UgdGhpcy5zdGFydD1ufXJldHVybiB0aGlzfSxqLnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj0yNTUmZSxuPTEsaT1bcl07Zm9yKHI9MjU1JihlPj49OCk7cj4wOylpLnVuc2hpZnQocikscj0yNTUmKGU+Pj04KSwrK247cmV0dXJuIHQ/aS5wdXNoKG4pOmkudW5zaGlmdChuKSx0aGlzLnVwZGF0ZShpKSxpLmxlbmd0aH0sai5wcm90b3R5cGUuZW5jb2RlU3RyaW5nPWZ1bmN0aW9uKGUpe3ZhciB0LHI9dHlwZW9mIGU7aWYoXCJzdHJpbmdcIiE9PXIpe2lmKFwib2JqZWN0XCIhPT1yKXRocm93IG5ldyBFcnJvcihvKTtpZihudWxsPT09ZSl0aHJvdyBuZXcgRXJyb3Iobyk7aWYoZCYmZS5jb25zdHJ1Y3Rvcj09PUFycmF5QnVmZmVyKWU9bmV3IFVpbnQ4QXJyYXkoZSk7ZWxzZSBpZighKEFycmF5LmlzQXJyYXkoZSl8fGQmJkFycmF5QnVmZmVyLmlzVmlldyhlKSkpdGhyb3cgbmV3IEVycm9yKG8pO3Q9ITB9dmFyIG49MCxpPWUubGVuZ3RoO2lmKHQpbj1pO2Vsc2UgZm9yKHZhciBzPTA7czxlLmxlbmd0aDsrK3Mpe3ZhciBhPWUuY2hhckNvZGVBdChzKTthPDEyOD9uKz0xOmE8MjA0OD9uKz0yOmE8NTUyOTZ8fGE+PTU3MzQ0P24rPTM6KGE9NjU1MzYrKCgxMDIzJmEpPDwxMHwxMDIzJmUuY2hhckNvZGVBdCgrK3MpKSxuKz00KX1yZXR1cm4gbis9dGhpcy5lbmNvZGUoOCpuKSx0aGlzLnVwZGF0ZShlKSxufSxqLnByb3RvdHlwZS5ieXRlcGFkPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMuZW5jb2RlKHQpLG49MDtuPGUubGVuZ3RoOysrbilyKz10aGlzLmVuY29kZVN0cmluZyhlW25dKTt2YXIgaT10LXIldCxvPVtdO3JldHVybiBvLmxlbmd0aD1pLHRoaXMudXBkYXRlKG8pLHRoaXN9LGoucHJvdG90eXBlLmZpbmFsaXplPWZ1bmN0aW9uKCl7aWYoIXRoaXMuZmluYWxpemVkKXt0aGlzLmZpbmFsaXplZD0hMDt2YXIgZT10aGlzLmJsb2Nrcyx0PXRoaXMubGFzdEJ5dGVJbmRleCxyPXRoaXMuYmxvY2tDb3VudCxuPXRoaXMucztpZihlW3Q+PjJdfD10aGlzLnBhZGRpbmdbMyZ0XSx0aGlzLmxhc3RCeXRlSW5kZXg9PT10aGlzLmJ5dGVDb3VudClmb3IoZVswXT1lW3JdLHQ9MTt0PHIrMTsrK3QpZVt0XT0wO2ZvcihlW3ItMV18PTIxNDc0ODM2NDgsdD0wO3Q8cjsrK3Qpblt0XV49ZVt0XTtMKG4pfX0sai5wcm90b3R5cGUudG9TdHJpbmc9ai5wcm90b3R5cGUuaGV4PWZ1bmN0aW9uKCl7dGhpcy5maW5hbGl6ZSgpO2Zvcih2YXIgZSx0PXRoaXMuYmxvY2tDb3VudCxyPXRoaXMucyxuPXRoaXMub3V0cHV0QmxvY2tzLGk9dGhpcy5leHRyYUJ5dGVzLG89MCxzPTAsYT1cIlwiO3M8bjspe2ZvcihvPTA7bzx0JiZzPG47KytvLCsrcyllPXJbb10sYSs9aFtlPj40JjE1XStoWzE1JmVdK2hbZT4+MTImMTVdK2hbZT4+OCYxNV0raFtlPj4yMCYxNV0raFtlPj4xNiYxNV0raFtlPj4yOCYxNV0raFtlPj4yNCYxNV07cyV0PT0wJiYoTChyKSxvPTApfXJldHVybiBpJiYoZT1yW29dLGErPWhbZT4+NCYxNV0raFsxNSZlXSxpPjEmJihhKz1oW2U+PjEyJjE1XStoW2U+PjgmMTVdKSxpPjImJihhKz1oW2U+PjIwJjE1XStoW2U+PjE2JjE1XSkpLGF9LGoucHJvdG90eXBlLmFycmF5QnVmZmVyPWZ1bmN0aW9uKCl7dGhpcy5maW5hbGl6ZSgpO3ZhciBlLHQ9dGhpcy5ibG9ja0NvdW50LHI9dGhpcy5zLG49dGhpcy5vdXRwdXRCbG9ja3MsaT10aGlzLmV4dHJhQnl0ZXMsbz0wLHM9MCxhPXRoaXMub3V0cHV0Qml0cz4+MztlPWk/bmV3IEFycmF5QnVmZmVyKG4rMTw8Mik6bmV3IEFycmF5QnVmZmVyKGEpO2Zvcih2YXIgYz1uZXcgVWludDMyQXJyYXkoZSk7czxuOyl7Zm9yKG89MDtvPHQmJnM8bjsrK28sKytzKWNbc109cltvXTtzJXQ9PTAmJkwocil9cmV0dXJuIGkmJihjW29dPXJbb10sZT1lLnNsaWNlKDAsYSkpLGV9LGoucHJvdG90eXBlLmJ1ZmZlcj1qLnByb3RvdHlwZS5hcnJheUJ1ZmZlcixqLnByb3RvdHlwZS5kaWdlc3Q9ai5wcm90b3R5cGUuYXJyYXk9ZnVuY3Rpb24oKXt0aGlzLmZpbmFsaXplKCk7Zm9yKHZhciBlLHQscj10aGlzLmJsb2NrQ291bnQsbj10aGlzLnMsaT10aGlzLm91dHB1dEJsb2NrcyxvPXRoaXMuZXh0cmFCeXRlcyxzPTAsYT0wLGM9W107YTxpOyl7Zm9yKHM9MDtzPHImJmE8aTsrK3MsKythKWU9YTw8Mix0PW5bc10sY1tlXT0yNTUmdCxjW2UrMV09dD4+OCYyNTUsY1tlKzJdPXQ+PjE2JjI1NSxjW2UrM109dD4+MjQmMjU1O2Elcj09MCYmTChuKX1yZXR1cm4gbyYmKGU9YTw8Mix0PW5bc10sY1tlXT0yNTUmdCxvPjEmJihjW2UrMV09dD4+OCYyNTUpLG8+MiYmKGNbZSsyXT10Pj4xNiYyNTUpKSxjfSxCLnByb3RvdHlwZT1uZXcgaixCLnByb3RvdHlwZS5maW5hbGl6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuY29kZSh0aGlzLm91dHB1dEJpdHMsITApLGoucHJvdG90eXBlLmZpbmFsaXplLmNhbGwodGhpcyl9O3ZhciBMPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLG8scyxhLGMsZix1LGQsaCxsLHAseSxnLG0sdix3LF8sUyxFLEEseCxrLFAsTyxNLEksVCxSLE4sQyxqLEIsTCxELFUscSxGLEgseixLLFYsRyxXLFgsWSxKLCQsWixRLGVlLHRlLHJlLG5lLGllLG9lLHNlLGFlLGNlLGZlLHVlO2ZvcihuPTA7bjw0ODtuKz0yKWk9ZVswXV5lWzEwXV5lWzIwXV5lWzMwXV5lWzQwXSxvPWVbMV1eZVsxMV1eZVsyMV1eZVszMV1eZVs0MV0scz1lWzJdXmVbMTJdXmVbMjJdXmVbMzJdXmVbNDJdLGE9ZVszXV5lWzEzXV5lWzIzXV5lWzMzXV5lWzQzXSxjPWVbNF1eZVsxNF1eZVsyNF1eZVszNF1eZVs0NF0sZj1lWzVdXmVbMTVdXmVbMjVdXmVbMzVdXmVbNDVdLHU9ZVs2XV5lWzE2XV5lWzI2XV5lWzM2XV5lWzQ2XSxkPWVbN11eZVsxN11eZVsyN11eZVszN11eZVs0N10sdD0oaD1lWzhdXmVbMThdXmVbMjhdXmVbMzhdXmVbNDhdKV4oczw8MXxhPj4+MzEpLHI9KGw9ZVs5XV5lWzE5XV5lWzI5XV5lWzM5XV5lWzQ5XSleKGE8PDF8cz4+PjMxKSxlWzBdXj10LGVbMV1ePXIsZVsxMF1ePXQsZVsxMV1ePXIsZVsyMF1ePXQsZVsyMV1ePXIsZVszMF1ePXQsZVszMV1ePXIsZVs0MF1ePXQsZVs0MV1ePXIsdD1pXihjPDwxfGY+Pj4zMSkscj1vXihmPDwxfGM+Pj4zMSksZVsyXV49dCxlWzNdXj1yLGVbMTJdXj10LGVbMTNdXj1yLGVbMjJdXj10LGVbMjNdXj1yLGVbMzJdXj10LGVbMzNdXj1yLGVbNDJdXj10LGVbNDNdXj1yLHQ9c14odTw8MXxkPj4+MzEpLHI9YV4oZDw8MXx1Pj4+MzEpLGVbNF1ePXQsZVs1XV49cixlWzE0XV49dCxlWzE1XV49cixlWzI0XV49dCxlWzI1XV49cixlWzM0XV49dCxlWzM1XV49cixlWzQ0XV49dCxlWzQ1XV49cix0PWNeKGg8PDF8bD4+PjMxKSxyPWZeKGw8PDF8aD4+PjMxKSxlWzZdXj10LGVbN11ePXIsZVsxNl1ePXQsZVsxN11ePXIsZVsyNl1ePXQsZVsyN11ePXIsZVszNl1ePXQsZVszN11ePXIsZVs0Nl1ePXQsZVs0N11ePXIsdD11XihpPDwxfG8+Pj4zMSkscj1kXihvPDwxfGk+Pj4zMSksZVs4XV49dCxlWzldXj1yLGVbMThdXj10LGVbMTldXj1yLGVbMjhdXj10LGVbMjldXj1yLGVbMzhdXj10LGVbMzldXj1yLGVbNDhdXj10LGVbNDldXj1yLHA9ZVswXSx5PWVbMV0sVz1lWzExXTw8NHxlWzEwXT4+PjI4LFg9ZVsxMF08PDR8ZVsxMV0+Pj4yOCxNPWVbMjBdPDwzfGVbMjFdPj4+MjksST1lWzIxXTw8M3xlWzIwXT4+PjI5LGFlPWVbMzFdPDw5fGVbMzBdPj4+MjMsY2U9ZVszMF08PDl8ZVszMV0+Pj4yMyx6PWVbNDBdPDwxOHxlWzQxXT4+PjE0LEs9ZVs0MV08PDE4fGVbNDBdPj4+MTQsaj1lWzJdPDwxfGVbM10+Pj4zMSxCPWVbM108PDF8ZVsyXT4+PjMxLGc9ZVsxM108PDEyfGVbMTJdPj4+MjAsbT1lWzEyXTw8MTJ8ZVsxM10+Pj4yMCxZPWVbMjJdPDwxMHxlWzIzXT4+PjIyLEo9ZVsyM108PDEwfGVbMjJdPj4+MjIsVD1lWzMzXTw8MTN8ZVszMl0+Pj4xOSxSPWVbMzJdPDwxM3xlWzMzXT4+PjE5LGZlPWVbNDJdPDwyfGVbNDNdPj4+MzAsdWU9ZVs0M108PDJ8ZVs0Ml0+Pj4zMCx0ZT1lWzVdPDwzMHxlWzRdPj4+MixyZT1lWzRdPDwzMHxlWzVdPj4+MixMPWVbMTRdPDw2fGVbMTVdPj4+MjYsRD1lWzE1XTw8NnxlWzE0XT4+PjI2LHY9ZVsyNV08PDExfGVbMjRdPj4+MjEsdz1lWzI0XTw8MTF8ZVsyNV0+Pj4yMSwkPWVbMzRdPDwxNXxlWzM1XT4+PjE3LFo9ZVszNV08PDE1fGVbMzRdPj4+MTcsTj1lWzQ1XTw8Mjl8ZVs0NF0+Pj4zLEM9ZVs0NF08PDI5fGVbNDVdPj4+Myx4PWVbNl08PDI4fGVbN10+Pj40LGs9ZVs3XTw8Mjh8ZVs2XT4+PjQsbmU9ZVsxN108PDIzfGVbMTZdPj4+OSxpZT1lWzE2XTw8MjN8ZVsxN10+Pj45LFU9ZVsyNl08PDI1fGVbMjddPj4+NyxxPWVbMjddPDwyNXxlWzI2XT4+PjcsXz1lWzM2XTw8MjF8ZVszN10+Pj4xMSxTPWVbMzddPDwyMXxlWzM2XT4+PjExLFE9ZVs0N108PDI0fGVbNDZdPj4+OCxlZT1lWzQ2XTw8MjR8ZVs0N10+Pj44LFY9ZVs4XTw8Mjd8ZVs5XT4+PjUsRz1lWzldPDwyN3xlWzhdPj4+NSxQPWVbMThdPDwyMHxlWzE5XT4+PjEyLE89ZVsxOV08PDIwfGVbMThdPj4+MTIsb2U9ZVsyOV08PDd8ZVsyOF0+Pj4yNSxzZT1lWzI4XTw8N3xlWzI5XT4+PjI1LEY9ZVszOF08PDh8ZVszOV0+Pj4yNCxIPWVbMzldPDw4fGVbMzhdPj4+MjQsRT1lWzQ4XTw8MTR8ZVs0OV0+Pj4xOCxBPWVbNDldPDwxNHxlWzQ4XT4+PjE4LGVbMF09cF5+ZyZ2LGVbMV09eV5+bSZ3LGVbMTBdPXheflAmTSxlWzExXT1rXn5PJkksZVsyMF09al5+TCZVLGVbMjFdPUJefkQmcSxlWzMwXT1WXn5XJlksZVszMV09R15+WCZKLGVbNDBdPXRlXn5uZSZvZSxlWzQxXT1yZV5+aWUmc2UsZVsyXT1nXn52Jl8sZVszXT1tXn53JlMsZVsxMl09UF5+TSZULGVbMTNdPU9efkkmUixlWzIyXT1MXn5VJkYsZVsyM109RF5+cSZILGVbMzJdPVdeflkmJCxlWzMzXT1YXn5KJlosZVs0Ml09bmVefm9lJmFlLGVbNDNdPWllXn5zZSZjZSxlWzRdPXZefl8mRSxlWzVdPXdeflMmQSxlWzE0XT1NXn5UJk4sZVsxNV09SV5+UiZDLGVbMjRdPVVefkYmeixlWzI1XT1xXn5IJkssZVszNF09WV5+JCZRLGVbMzVdPUpeflomZWUsZVs0NF09b2VefmFlJmZlLGVbNDVdPXNlXn5jZSZ1ZSxlWzZdPV9efkUmcCxlWzddPVNefkEmeSxlWzE2XT1UXn5OJngsZVsxN109Ul5+QyZrLGVbMjZdPUZefnomaixlWzI3XT1IXn5LJkIsZVszNl09JF5+USZWLGVbMzddPVpefmVlJkcsZVs0Nl09YWVefmZlJnRlLGVbNDddPWNlXn51ZSZyZSxlWzhdPUVefnAmZyxlWzldPUFefnkmbSxlWzE4XT1OXn54JlAsZVsxOV09Q15+ayZPLGVbMjhdPXpefmomTCxlWzI5XT1LXn5CJkQsZVszOF09UV5+ViZXLGVbMzldPWVlXn5HJlgsZVs0OF09ZmVefnRlJm5lLGVbNDldPXVlXn5yZSZpZSxlWzBdXj1iW25dLGVbMV1ePWJbbisxXX07aWYoZillLmV4cG9ydHM9UDtlbHNle2ZvcihNPTA7TTxPLmxlbmd0aDsrK00pYVtPW01dXT1QW09bTV1dO3UmJih2b2lkIDA9PT0obj1mdW5jdGlvbigpe3JldHVybiBQfS5jYWxsKHQscix0LGUpKXx8KGUuZXhwb3J0cz1uKSl9fSgpfSw3MjY2OihlLHQscik9Pnt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgSlNPTj9KU09OOnIoODQxOCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dHx8KHQ9e30pLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJih0PXtjbXA6dH0pO3ZhciByPXQuc3BhY2V8fFwiXCI7XCJudW1iZXJcIj09dHlwZW9mIHImJihyPUFycmF5KHIrMSkuam9pbihcIiBcIikpO3ZhciBzLGE9XCJib29sZWFuXCI9PXR5cGVvZiB0LmN5Y2xlcyYmdC5jeWNsZXMsYz10LnJlcGxhY2VyfHxmdW5jdGlvbihlLHQpe3JldHVybiB0fSxmPXQuY21wJiYocz10LmNtcCxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgbj17a2V5OnQsdmFsdWU6ZVt0XX0saT17a2V5OnIsdmFsdWU6ZVtyXX07cmV0dXJuIHMobixpKX19KSx1PVtdO3JldHVybiBmdW5jdGlvbiBlKHQscyxkLGgpe3ZhciBsPXI/XCJcXG5cIituZXcgQXJyYXkoaCsxKS5qb2luKHIpOlwiXCIscD1yP1wiOiBcIjpcIjpcIjtpZihkJiZkLnRvSlNPTiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZC50b0pTT04mJihkPWQudG9KU09OKCkpLHZvaWQgMCE9PShkPWMuY2FsbCh0LHMsZCkpKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZHx8bnVsbD09PWQpcmV0dXJuIG4uc3RyaW5naWZ5KGQpO2lmKGkoZCkpe2Zvcih2YXIgYj1bXSx5PTA7eTxkLmxlbmd0aDt5Kyspe3ZhciBnPWUoZCx5LGRbeV0saCsxKXx8bi5zdHJpbmdpZnkobnVsbCk7Yi5wdXNoKGwrcitnKX1yZXR1cm5cIltcIitiLmpvaW4oXCIsXCIpK2wrXCJdXCJ9aWYoLTEhPT11LmluZGV4T2YoZCkpe2lmKGEpcmV0dXJuIG4uc3RyaW5naWZ5KFwiX19jeWNsZV9fXCIpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDb252ZXJ0aW5nIGNpcmN1bGFyIHN0cnVjdHVyZSB0byBKU09OXCIpfXUucHVzaChkKTt2YXIgbT1vKGQpLnNvcnQoZiYmZihkKSk7Zm9yKGI9W10seT0wO3k8bS5sZW5ndGg7eSsrKXt2YXIgdj1lKGQscz1tW3ldLGRbc10saCsxKTtpZih2KXt2YXIgdz1uLnN0cmluZ2lmeShzKStwK3Y7Yi5wdXNoKGwrcit3KX19cmV0dXJuIHUuc3BsaWNlKHUuaW5kZXhPZihkKSwxKSxcIntcIitiLmpvaW4oXCIsXCIpK2wrXCJ9XCJ9fSh7XCJcIjplfSxcIlwiLGUsMCl9O3ZhciBpPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PXt9LnRvU3RyaW5nLmNhbGwoZSl9LG89T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3ZhciB0PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHl8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LHI9W107Zm9yKHZhciBuIGluIGUpdC5jYWxsKGUsbikmJnIucHVzaChuKTtyZXR1cm4gcn19LDg0MTg6KGUsdCxyKT0+e3QucGFyc2U9cigxMzk2KSx0LnN0cmluZ2lmeT1yKDYxNzcpfSwxMzk2OmU9Pnt2YXIgdCxyLG4saSxvPXsnXCInOidcIicsXCJcXFxcXCI6XCJcXFxcXCIsXCIvXCI6XCIvXCIsYjpcIlxcYlwiLGY6XCJcXGZcIixuOlwiXFxuXCIscjpcIlxcclwiLHQ6XCJcXHRcIn0scz1mdW5jdGlvbihlKXt0aHJvd3tuYW1lOlwiU3ludGF4RXJyb3JcIixtZXNzYWdlOmUsYXQ6dCx0ZXh0Om59fSxhPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlIT09ciYmcyhcIkV4cGVjdGVkICdcIitlK1wiJyBpbnN0ZWFkIG9mICdcIityK1wiJ1wiKSxyPW4uY2hhckF0KHQpLHQrPTEscn0sYz1mdW5jdGlvbigpe3ZhciBlLHQ9XCJcIjtmb3IoXCItXCI9PT1yJiYodD1cIi1cIixhKFwiLVwiKSk7cj49XCIwXCImJnI8PVwiOVwiOyl0Kz1yLGEoKTtpZihcIi5cIj09PXIpZm9yKHQrPVwiLlwiO2EoKSYmcj49XCIwXCImJnI8PVwiOVwiOyl0Kz1yO2lmKFwiZVwiPT09cnx8XCJFXCI9PT1yKWZvcih0Kz1yLGEoKSxcIi1cIiE9PXImJlwiK1wiIT09cnx8KHQrPXIsYSgpKTtyPj1cIjBcIiYmcjw9XCI5XCI7KXQrPXIsYSgpO2lmKGU9K3QsaXNGaW5pdGUoZSkpcmV0dXJuIGU7cyhcIkJhZCBudW1iZXJcIil9LGY9ZnVuY3Rpb24oKXt2YXIgZSx0LG4saT1cIlwiO2lmKCdcIic9PT1yKWZvcig7YSgpOyl7aWYoJ1wiJz09PXIpcmV0dXJuIGEoKSxpO2lmKFwiXFxcXFwiPT09cilpZihhKCksXCJ1XCI9PT1yKXtmb3Iobj0wLHQ9MDt0PDQmJihlPXBhcnNlSW50KGEoKSwxNiksaXNGaW5pdGUoZSkpO3QrPTEpbj0xNipuK2U7aSs9U3RyaW5nLmZyb21DaGFyQ29kZShuKX1lbHNle2lmKFwic3RyaW5nXCIhPXR5cGVvZiBvW3JdKWJyZWFrO2krPW9bcl19ZWxzZSBpKz1yfXMoXCJCYWQgc3RyaW5nXCIpfSx1PWZ1bmN0aW9uKCl7Zm9yKDtyJiZyPD1cIiBcIjspYSgpfTtpPWZ1bmN0aW9uKCl7c3dpdGNoKHUoKSxyKXtjYXNlXCJ7XCI6cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUsdD17fTtpZihcIntcIj09PXIpe2lmKGEoXCJ7XCIpLHUoKSxcIn1cIj09PXIpcmV0dXJuIGEoXCJ9XCIpLHQ7Zm9yKDtyOyl7aWYoZT1mKCksdSgpLGEoXCI6XCIpLE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkmJnMoJ0R1cGxpY2F0ZSBrZXkgXCInK2UrJ1wiJyksdFtlXT1pKCksdSgpLFwifVwiPT09cilyZXR1cm4gYShcIn1cIiksdDthKFwiLFwiKSx1KCl9fXMoXCJCYWQgb2JqZWN0XCIpfSgpO2Nhc2VcIltcIjpyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1bXTtpZihcIltcIj09PXIpe2lmKGEoXCJbXCIpLHUoKSxcIl1cIj09PXIpcmV0dXJuIGEoXCJdXCIpLGU7Zm9yKDtyOyl7aWYoZS5wdXNoKGkoKSksdSgpLFwiXVwiPT09cilyZXR1cm4gYShcIl1cIiksZTthKFwiLFwiKSx1KCl9fXMoXCJCYWQgYXJyYXlcIil9KCk7Y2FzZSdcIic6cmV0dXJuIGYoKTtjYXNlXCItXCI6cmV0dXJuIGMoKTtkZWZhdWx0OnJldHVybiByPj1cIjBcIiYmcjw9XCI5XCI/YygpOmZ1bmN0aW9uKCl7c3dpdGNoKHIpe2Nhc2VcInRcIjpyZXR1cm4gYShcInRcIiksYShcInJcIiksYShcInVcIiksYShcImVcIiksITA7Y2FzZVwiZlwiOnJldHVybiBhKFwiZlwiKSxhKFwiYVwiKSxhKFwibFwiKSxhKFwic1wiKSxhKFwiZVwiKSwhMTtjYXNlXCJuXCI6cmV0dXJuIGEoXCJuXCIpLGEoXCJ1XCIpLGEoXCJsXCIpLGEoXCJsXCIpLG51bGx9cyhcIlVuZXhwZWN0ZWQgJ1wiK3IrXCInXCIpfSgpfX0sZS5leHBvcnRzPWZ1bmN0aW9uKGUsbyl7dmFyIGE7cmV0dXJuIG49ZSx0PTAscj1cIiBcIixhPWkoKSx1KCksciYmcyhcIlN5bnRheCBlcnJvclwiKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBvP2Z1bmN0aW9uIGUodCxyKXt2YXIgbixpLHM9dFtyXTtpZihzJiZcIm9iamVjdFwiPT10eXBlb2Ygcylmb3IobiBpbiBzKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLG4pJiYodm9pZCAwIT09KGk9ZShzLG4pKT9zW25dPWk6ZGVsZXRlIHNbbl0pO3JldHVybiBvLmNhbGwodCxyLHMpfSh7XCJcIjphfSxcIlwiKTphfX0sNjE3NzplPT57dmFyIHQscixuLGk9L1tcXFxcXFxcIlxceDAwLVxceDFmXFx4N2YtXFx4OWZcXHUwMGFkXFx1MDYwMC1cXHUwNjA0XFx1MDcwZlxcdTE3YjRcXHUxN2I1XFx1MjAwYy1cXHUyMDBmXFx1MjAyOC1cXHUyMDJmXFx1MjA2MC1cXHUyMDZmXFx1ZmVmZlxcdWZmZjAtXFx1ZmZmZl0vZyxvPXtcIlxcYlwiOlwiXFxcXGJcIixcIlxcdFwiOlwiXFxcXHRcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcZlwiOlwiXFxcXGZcIixcIlxcclwiOlwiXFxcXHJcIiwnXCInOidcXFxcXCInLFwiXFxcXFwiOlwiXFxcXFxcXFxcIn07ZnVuY3Rpb24gcyhlKXtyZXR1cm4gaS5sYXN0SW5kZXg9MCxpLnRlc3QoZSk/J1wiJytlLnJlcGxhY2UoaSwoZnVuY3Rpb24oZSl7dmFyIHQ9b1tlXTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD90OlwiXFxcXHVcIisoXCIwMDAwXCIrZS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpfSkpKydcIic6J1wiJytlKydcIid9ZnVuY3Rpb24gYShlLGkpe3ZhciBvLGMsZix1LGQsaD10LGw9aVtlXTtzd2l0Y2gobCYmXCJvYmplY3RcIj09dHlwZW9mIGwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGwudG9KU09OJiYobD1sLnRvSlNPTihlKSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKGw9bi5jYWxsKGksZSxsKSksdHlwZW9mIGwpe2Nhc2VcInN0cmluZ1wiOnJldHVybiBzKGwpO2Nhc2VcIm51bWJlclwiOnJldHVybiBpc0Zpbml0ZShsKT9TdHJpbmcobCk6XCJudWxsXCI7Y2FzZVwiYm9vbGVhblwiOmNhc2VcIm51bGxcIjpyZXR1cm4gU3RyaW5nKGwpO2Nhc2VcIm9iamVjdFwiOmlmKCFsKXJldHVyblwibnVsbFwiO2lmKHQrPXIsZD1bXSxcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KGwpKXtmb3IodT1sLmxlbmd0aCxvPTA7bzx1O28rPTEpZFtvXT1hKG8sbCl8fFwibnVsbFwiO3JldHVybiBmPTA9PT1kLmxlbmd0aD9cIltdXCI6dD9cIltcXG5cIit0K2Quam9pbihcIixcXG5cIit0KStcIlxcblwiK2grXCJdXCI6XCJbXCIrZC5qb2luKFwiLFwiKStcIl1cIix0PWgsZn1pZihuJiZcIm9iamVjdFwiPT10eXBlb2Ygbilmb3IodT1uLmxlbmd0aCxvPTA7bzx1O28rPTEpXCJzdHJpbmdcIj09dHlwZW9mKGM9bltvXSkmJihmPWEoYyxsKSkmJmQucHVzaChzKGMpKyh0P1wiOiBcIjpcIjpcIikrZik7ZWxzZSBmb3IoYyBpbiBsKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChsLGMpJiYoZj1hKGMsbCkpJiZkLnB1c2gocyhjKSsodD9cIjogXCI6XCI6XCIpK2YpO3JldHVybiBmPTA9PT1kLmxlbmd0aD9cInt9XCI6dD9cIntcXG5cIit0K2Quam9pbihcIixcXG5cIit0KStcIlxcblwiK2grXCJ9XCI6XCJ7XCIrZC5qb2luKFwiLFwiKStcIn1cIix0PWgsZn19ZS5leHBvcnRzPWZ1bmN0aW9uKGUsaSxvKXt2YXIgcztpZih0PVwiXCIscj1cIlwiLFwibnVtYmVyXCI9PXR5cGVvZiBvKWZvcihzPTA7czxvO3MrPTEpcis9XCIgXCI7ZWxzZVwic3RyaW5nXCI9PXR5cGVvZiBvJiYocj1vKTtpZihuPWksaSYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSYmKFwib2JqZWN0XCIhPXR5cGVvZiBpfHxcIm51bWJlclwiIT10eXBlb2YgaS5sZW5ndGgpKXRocm93IG5ldyBFcnJvcihcIkpTT04uc3RyaW5naWZ5XCIpO3JldHVybiBhKFwiXCIse1wiXCI6ZX0pfX0sNTgxMTooZSx0LHIpPT57ZS5leHBvcnRzPXIoNjA2Nikocig5NjUzKSl9LDYwNjY6KGUsdCxyKT0+e2NvbnN0IG49cig3MDE2KSxpPXIoNTY3NSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9bihlKSxyPWkoZSk7cmV0dXJuIGZ1bmN0aW9uKGUsbil7c3dpdGNoKFwic3RyaW5nXCI9PXR5cGVvZiBlP2UudG9Mb3dlckNhc2UoKTplKXtjYXNlXCJrZWNjYWsyMjRcIjpyZXR1cm4gbmV3IHQoMTE1Miw0NDgsbnVsbCwyMjQsbik7Y2FzZVwia2VjY2FrMjU2XCI6cmV0dXJuIG5ldyB0KDEwODgsNTEyLG51bGwsMjU2LG4pO2Nhc2VcImtlY2NhazM4NFwiOnJldHVybiBuZXcgdCg4MzIsNzY4LG51bGwsMzg0LG4pO2Nhc2VcImtlY2NhazUxMlwiOnJldHVybiBuZXcgdCg1NzYsMTAyNCxudWxsLDUxMixuKTtjYXNlXCJzaGEzLTIyNFwiOnJldHVybiBuZXcgdCgxMTUyLDQ0OCw2LDIyNCxuKTtjYXNlXCJzaGEzLTI1NlwiOnJldHVybiBuZXcgdCgxMDg4LDUxMiw2LDI1NixuKTtjYXNlXCJzaGEzLTM4NFwiOnJldHVybiBuZXcgdCg4MzIsNzY4LDYsMzg0LG4pO2Nhc2VcInNoYTMtNTEyXCI6cmV0dXJuIG5ldyB0KDU3NiwxMDI0LDYsNTEyLG4pO2Nhc2VcInNoYWtlMTI4XCI6cmV0dXJuIG5ldyByKDEzNDQsMjU2LDMxLG4pO2Nhc2VcInNoYWtlMjU2XCI6cmV0dXJuIG5ldyByKDEwODgsNTEyLDMxLG4pO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiSW52YWxkIGFsZ29yaXRobTogXCIrZSl9fX19LDcwMTY6KGUsdCxyKT0+e3ZhciBuPXIoODc2NCkuQnVmZmVyO2NvbnN0e1RyYW5zZm9ybTppfT1yKDg0NzMpO2UuZXhwb3J0cz1lPT5jbGFzcyB0IGV4dGVuZHMgaXtjb25zdHJ1Y3Rvcih0LHIsbixpLG8pe3N1cGVyKG8pLHRoaXMuX3JhdGU9dCx0aGlzLl9jYXBhY2l0eT1yLHRoaXMuX2RlbGltaXRlZFN1ZmZpeD1uLHRoaXMuX2hhc2hCaXRMZW5ndGg9aSx0aGlzLl9vcHRpb25zPW8sdGhpcy5fc3RhdGU9bmV3IGUsdGhpcy5fc3RhdGUuaW5pdGlhbGl6ZSh0LHIpLHRoaXMuX2ZpbmFsaXplZD0hMX1fdHJhbnNmb3JtKGUsdCxyKXtsZXQgbj1udWxsO3RyeXt0aGlzLnVwZGF0ZShlLHQpfWNhdGNoKGUpe249ZX1yKG4pfV9mbHVzaChlKXtsZXQgdD1udWxsO3RyeXt0aGlzLnB1c2godGhpcy5kaWdlc3QoKSl9Y2F0Y2goZSl7dD1lfWUodCl9dXBkYXRlKGUsdCl7aWYoIW4uaXNCdWZmZXIoZSkmJlwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEYXRhIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBidWZmZXJcIik7aWYodGhpcy5fZmluYWxpemVkKXRocm93IG5ldyBFcnJvcihcIkRpZ2VzdCBhbHJlYWR5IGNhbGxlZFwiKTtyZXR1cm4gbi5pc0J1ZmZlcihlKXx8KGU9bi5mcm9tKGUsdCkpLHRoaXMuX3N0YXRlLmFic29yYihlKSx0aGlzfWRpZ2VzdChlKXtpZih0aGlzLl9maW5hbGl6ZWQpdGhyb3cgbmV3IEVycm9yKFwiRGlnZXN0IGFscmVhZHkgY2FsbGVkXCIpO3RoaXMuX2ZpbmFsaXplZD0hMCx0aGlzLl9kZWxpbWl0ZWRTdWZmaXgmJnRoaXMuX3N0YXRlLmFic29yYkxhc3RGZXdCaXRzKHRoaXMuX2RlbGltaXRlZFN1ZmZpeCk7bGV0IHQ9dGhpcy5fc3RhdGUuc3F1ZWV6ZSh0aGlzLl9oYXNoQml0TGVuZ3RoLzgpO3JldHVybiB2b2lkIDAhPT1lJiYodD10LnRvU3RyaW5nKGUpKSx0aGlzLl9yZXNldFN0YXRlKCksdH1fcmVzZXRTdGF0ZSgpe3JldHVybiB0aGlzLl9zdGF0ZS5pbml0aWFsaXplKHRoaXMuX3JhdGUsdGhpcy5fY2FwYWNpdHkpLHRoaXN9X2Nsb25lKCl7Y29uc3QgZT1uZXcgdCh0aGlzLl9yYXRlLHRoaXMuX2NhcGFjaXR5LHRoaXMuX2RlbGltaXRlZFN1ZmZpeCx0aGlzLl9oYXNoQml0TGVuZ3RoLHRoaXMuX29wdGlvbnMpO3JldHVybiB0aGlzLl9zdGF0ZS5jb3B5KGUuX3N0YXRlKSxlLl9maW5hbGl6ZWQ9dGhpcy5fZmluYWxpemVkLGV9fX0sNTY3NTooZSx0LHIpPT57dmFyIG49cig4NzY0KS5CdWZmZXI7Y29uc3R7VHJhbnNmb3JtOml9PXIoODQ3Myk7ZS5leHBvcnRzPWU9PmNsYXNzIHQgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKHQscixuLGkpe3N1cGVyKGkpLHRoaXMuX3JhdGU9dCx0aGlzLl9jYXBhY2l0eT1yLHRoaXMuX2RlbGltaXRlZFN1ZmZpeD1uLHRoaXMuX29wdGlvbnM9aSx0aGlzLl9zdGF0ZT1uZXcgZSx0aGlzLl9zdGF0ZS5pbml0aWFsaXplKHQsciksdGhpcy5fZmluYWxpemVkPSExfV90cmFuc2Zvcm0oZSx0LHIpe2xldCBuPW51bGw7dHJ5e3RoaXMudXBkYXRlKGUsdCl9Y2F0Y2goZSl7bj1lfXIobil9X2ZsdXNoKCl7fV9yZWFkKGUpe3RoaXMucHVzaCh0aGlzLnNxdWVlemUoZSkpfXVwZGF0ZShlLHQpe2lmKCFuLmlzQnVmZmVyKGUpJiZcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGF0YSBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYnVmZmVyXCIpO2lmKHRoaXMuX2ZpbmFsaXplZCl0aHJvdyBuZXcgRXJyb3IoXCJTcXVlZXplIGFscmVhZHkgY2FsbGVkXCIpO3JldHVybiBuLmlzQnVmZmVyKGUpfHwoZT1uLmZyb20oZSx0KSksdGhpcy5fc3RhdGUuYWJzb3JiKGUpLHRoaXN9c3F1ZWV6ZShlLHQpe3RoaXMuX2ZpbmFsaXplZHx8KHRoaXMuX2ZpbmFsaXplZD0hMCx0aGlzLl9zdGF0ZS5hYnNvcmJMYXN0RmV3Qml0cyh0aGlzLl9kZWxpbWl0ZWRTdWZmaXgpKTtsZXQgcj10aGlzLl9zdGF0ZS5zcXVlZXplKGUpO3JldHVybiB2b2lkIDAhPT10JiYocj1yLnRvU3RyaW5nKHQpKSxyfV9yZXNldFN0YXRlKCl7cmV0dXJuIHRoaXMuX3N0YXRlLmluaXRpYWxpemUodGhpcy5fcmF0ZSx0aGlzLl9jYXBhY2l0eSksdGhpc31fY2xvbmUoKXtjb25zdCBlPW5ldyB0KHRoaXMuX3JhdGUsdGhpcy5fY2FwYWNpdHksdGhpcy5fZGVsaW1pdGVkU3VmZml4LHRoaXMuX29wdGlvbnMpO3JldHVybiB0aGlzLl9zdGF0ZS5jb3B5KGUuX3N0YXRlKSxlLl9maW5hbGl6ZWQ9dGhpcy5fZmluYWxpemVkLGV9fX0sNDA0MDooZSx0KT0+e2NvbnN0IHI9WzEsMCwzMjg5OCwwLDMyOTA2LDIxNDc0ODM2NDgsMjE0NzUxNjQxNiwyMTQ3NDgzNjQ4LDMyOTA3LDAsMjE0NzQ4MzY0OSwwLDIxNDc1MTY1NDUsMjE0NzQ4MzY0OCwzMjc3NywyMTQ3NDgzNjQ4LDEzOCwwLDEzNiwwLDIxNDc1MTY0MjUsMCwyMTQ3NDgzNjU4LDAsMjE0NzUxNjU1NSwwLDEzOSwyMTQ3NDgzNjQ4LDMyOTA1LDIxNDc0ODM2NDgsMzI3NzEsMjE0NzQ4MzY0OCwzMjc3MCwyMTQ3NDgzNjQ4LDEyOCwyMTQ3NDgzNjQ4LDMyNzc4LDAsMjE0NzQ4MzY1OCwyMTQ3NDgzNjQ4LDIxNDc1MTY1NDUsMjE0NzQ4MzY0OCwzMjg5NiwyMTQ3NDgzNjQ4LDIxNDc0ODM2NDksMCwyMTQ3NTE2NDI0LDIxNDc0ODM2NDhdO3QucDE2MDA9ZnVuY3Rpb24oZSl7Zm9yKGxldCB0PTA7dDwyNDsrK3Qpe2NvbnN0IG49ZVswXV5lWzEwXV5lWzIwXV5lWzMwXV5lWzQwXSxpPWVbMV1eZVsxMV1eZVsyMV1eZVszMV1eZVs0MV0sbz1lWzJdXmVbMTJdXmVbMjJdXmVbMzJdXmVbNDJdLHM9ZVszXV5lWzEzXV5lWzIzXV5lWzMzXV5lWzQzXSxhPWVbNF1eZVsxNF1eZVsyNF1eZVszNF1eZVs0NF0sYz1lWzVdXmVbMTVdXmVbMjVdXmVbMzVdXmVbNDVdLGY9ZVs2XV5lWzE2XV5lWzI2XV5lWzM2XV5lWzQ2XSx1PWVbN11eZVsxN11eZVsyN11eZVszN11eZVs0N10sZD1lWzhdXmVbMThdXmVbMjhdXmVbMzhdXmVbNDhdLGg9ZVs5XV5lWzE5XV5lWzI5XV5lWzM5XV5lWzQ5XTtsZXQgbD1kXihvPDwxfHM+Pj4zMSkscD1oXihzPDwxfG8+Pj4zMSk7Y29uc3QgYj1lWzBdXmwseT1lWzFdXnAsZz1lWzEwXV5sLG09ZVsxMV1ecCx2PWVbMjBdXmwsdz1lWzIxXV5wLF89ZVszMF1ebCxTPWVbMzFdXnAsRT1lWzQwXV5sLEE9ZVs0MV1ecDtsPW5eKGE8PDF8Yz4+PjMxKSxwPWleKGM8PDF8YT4+PjMxKTtjb25zdCB4PWVbMl1ebCxrPWVbM11ecCxQPWVbMTJdXmwsTz1lWzEzXV5wLE09ZVsyMl1ebCxJPWVbMjNdXnAsVD1lWzMyXV5sLFI9ZVszM11ecCxOPWVbNDJdXmwsQz1lWzQzXV5wO2w9b14oZjw8MXx1Pj4+MzEpLHA9c14odTw8MXxmPj4+MzEpO2NvbnN0IGo9ZVs0XV5sLEI9ZVs1XV5wLEw9ZVsxNF1ebCxEPWVbMTVdXnAsVT1lWzI0XV5sLHE9ZVsyNV1ecCxGPWVbMzRdXmwsSD1lWzM1XV5wLHo9ZVs0NF1ebCxLPWVbNDVdXnA7bD1hXihkPDwxfGg+Pj4zMSkscD1jXihoPDwxfGQ+Pj4zMSk7Y29uc3QgVj1lWzZdXmwsRz1lWzddXnAsVz1lWzE2XV5sLFg9ZVsxN11ecCxZPWVbMjZdXmwsSj1lWzI3XV5wLCQ9ZVszNl1ebCxaPWVbMzddXnAsUT1lWzQ2XV5sLGVlPWVbNDddXnA7bD1mXihuPDwxfGk+Pj4zMSkscD11XihpPDwxfG4+Pj4zMSk7Y29uc3QgdGU9ZVs4XV5sLHJlPWVbOV1ecCxuZT1lWzE4XV5sLGllPWVbMTldXnAsb2U9ZVsyOF1ebCxzZT1lWzI5XV5wLGFlPWVbMzhdXmwsY2U9ZVszOV1ecCxmZT1lWzQ4XV5sLHVlPWVbNDldXnAsZGU9YixoZT15LGxlPW08PDR8Zz4+PjI4LHBlPWc8PDR8bT4+PjI4LGJlPXY8PDN8dz4+PjI5LHllPXc8PDN8dj4+PjI5LGdlPVM8PDl8Xz4+PjIzLG1lPV88PDl8Uz4+PjIzLHZlPUU8PDE4fEE+Pj4xNCx3ZT1BPDwxOHxFPj4+MTQsX2U9eDw8MXxrPj4+MzEsU2U9azw8MXx4Pj4+MzEsRWU9Tzw8MTJ8UD4+PjIwLEFlPVA8PDEyfE8+Pj4yMCx4ZT1NPDwxMHxJPj4+MjIsa2U9STw8MTB8TT4+PjIyLFBlPVI8PDEzfFQ+Pj4xOSxPZT1UPDwxM3xSPj4+MTksTWU9Tjw8MnxDPj4+MzAsSWU9Qzw8MnxOPj4+MzAsVGU9Qjw8MzB8aj4+PjIsUmU9ajw8MzB8Qj4+PjIsTmU9TDw8NnxEPj4+MjYsQ2U9RDw8NnxMPj4+MjYsamU9cTw8MTF8VT4+PjIxLEJlPVU8PDExfHE+Pj4yMSxMZT1GPDwxNXxIPj4+MTcsRGU9SDw8MTV8Rj4+PjE3LFVlPUs8PDI5fHo+Pj4zLHFlPXo8PDI5fEs+Pj4zLEZlPVY8PDI4fEc+Pj40LEhlPUc8PDI4fFY+Pj40LHplPVg8PDIzfFc+Pj45LEtlPVc8PDIzfFg+Pj45LFZlPVk8PDI1fEo+Pj43LEdlPUo8PDI1fFk+Pj43LFdlPSQ8PDIxfFo+Pj4xMSxYZT1aPDwyMXwkPj4+MTEsWWU9ZWU8PDI0fFE+Pj44LEplPVE8PDI0fGVlPj4+OCwkZT10ZTw8Mjd8cmU+Pj41LFplPXJlPDwyN3x0ZT4+PjUsUWU9bmU8PDIwfGllPj4+MTIsZXQ9aWU8PDIwfG5lPj4+MTIsdHQ9c2U8PDd8b2U+Pj4yNSxydD1vZTw8N3xzZT4+PjI1LG50PWFlPDw4fGNlPj4+MjQsaXQ9Y2U8PDh8YWU+Pj4yNCxvdD1mZTw8MTR8dWU+Pj4xOCxzdD11ZTw8MTR8ZmU+Pj4xODtlWzBdPWRlXn5FZSZqZSxlWzFdPWhlXn5BZSZCZSxlWzEwXT1GZV5+UWUmYmUsZVsxMV09SGVefmV0JnllLGVbMjBdPV9lXn5OZSZWZSxlWzIxXT1TZV5+Q2UmR2UsZVszMF09JGVefmxlJnhlLGVbMzFdPVplXn5wZSZrZSxlWzQwXT1UZV5+emUmdHQsZVs0MV09UmVefktlJnJ0LGVbMl09RWVefmplJldlLGVbM109QWVefkJlJlhlLGVbMTJdPVFlXn5iZSZQZSxlWzEzXT1ldF5+eWUmT2UsZVsyMl09TmVeflZlJm50LGVbMjNdPUNlXn5HZSZpdCxlWzMyXT1sZV5+eGUmTGUsZVszM109cGVefmtlJkRlLGVbNDJdPXplXn50dCZnZSxlWzQzXT1LZV5+cnQmbWUsZVs0XT1qZV5+V2Umb3QsZVs1XT1CZV5+WGUmc3QsZVsxNF09YmVeflBlJlVlLGVbMTVdPXllXn5PZSZxZSxlWzI0XT1WZV5+bnQmdmUsZVsyNV09R2Vefml0JndlLGVbMzRdPXhlXn5MZSZZZSxlWzM1XT1rZV5+RGUmSmUsZVs0NF09dHRefmdlJk1lLGVbNDVdPXJ0Xn5tZSZJZSxlWzZdPVdlXn5vdCZkZSxlWzddPVhlXn5zdCZoZSxlWzE2XT1QZV5+VWUmRmUsZVsxN109T2VefnFlJkhlLGVbMjZdPW50Xn52ZSZfZSxlWzI3XT1pdF5+d2UmU2UsZVszNl09TGVeflllJiRlLGVbMzddPURlXn5KZSZaZSxlWzQ2XT1nZV5+TWUmVGUsZVs0N109bWVefkllJlJlLGVbOF09b3RefmRlJkVlLGVbOV09c3RefmhlJkFlLGVbMThdPVVlXn5GZSZRZSxlWzE5XT1xZV5+SGUmZXQsZVsyOF09dmVefl9lJk5lLGVbMjldPXdlXn5TZSZDZSxlWzM4XT1ZZV5+JGUmbGUsZVszOV09SmVeflplJnBlLGVbNDhdPU1lXn5UZSZ6ZSxlWzQ5XT1JZV5+UmUmS2UsZVswXV49clsyKnRdLGVbMV1ePXJbMip0KzFdfX19LDk2NTM6KGUsdCxyKT0+e3ZhciBuPXIoODc2NCkuQnVmZmVyO2NvbnN0IGk9cig0MDQwKTtmdW5jdGlvbiBvKCl7dGhpcy5zdGF0ZT1bMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sdGhpcy5ibG9ja1NpemU9bnVsbCx0aGlzLmNvdW50PTAsdGhpcy5zcXVlZXppbmc9ITF9by5wcm90b3R5cGUuaW5pdGlhbGl6ZT1mdW5jdGlvbihlLHQpe2ZvcihsZXQgZT0wO2U8NTA7KytlKXRoaXMuc3RhdGVbZV09MDt0aGlzLmJsb2NrU2l6ZT1lLzgsdGhpcy5jb3VudD0wLHRoaXMuc3F1ZWV6aW5nPSExfSxvLnByb3RvdHlwZS5hYnNvcmI9ZnVuY3Rpb24oZSl7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDsrK3QpdGhpcy5zdGF0ZVt+fih0aGlzLmNvdW50LzQpXV49ZVt0XTw8dGhpcy5jb3VudCU0KjgsdGhpcy5jb3VudCs9MSx0aGlzLmNvdW50PT09dGhpcy5ibG9ja1NpemUmJihpLnAxNjAwKHRoaXMuc3RhdGUpLHRoaXMuY291bnQ9MCl9LG8ucHJvdG90eXBlLmFic29yYkxhc3RGZXdCaXRzPWZ1bmN0aW9uKGUpe3RoaXMuc3RhdGVbfn4odGhpcy5jb3VudC80KV1ePWU8PHRoaXMuY291bnQlNCo4LDAhPSgxMjgmZSkmJnRoaXMuY291bnQ9PT10aGlzLmJsb2NrU2l6ZS0xJiZpLnAxNjAwKHRoaXMuc3RhdGUpLHRoaXMuc3RhdGVbfn4oKHRoaXMuYmxvY2tTaXplLTEpLzQpXV49MTI4PDwodGhpcy5ibG9ja1NpemUtMSklNCo4LGkucDE2MDAodGhpcy5zdGF0ZSksdGhpcy5jb3VudD0wLHRoaXMuc3F1ZWV6aW5nPSEwfSxvLnByb3RvdHlwZS5zcXVlZXplPWZ1bmN0aW9uKGUpe3RoaXMuc3F1ZWV6aW5nfHx0aGlzLmFic29yYkxhc3RGZXdCaXRzKDEpO2NvbnN0IHQ9bi5hbGxvYyhlKTtmb3IobGV0IHI9MDtyPGU7KytyKXRbcl09dGhpcy5zdGF0ZVt+fih0aGlzLmNvdW50LzQpXT4+PnRoaXMuY291bnQlNCo4JjI1NSx0aGlzLmNvdW50Kz0xLHRoaXMuY291bnQ9PT10aGlzLmJsb2NrU2l6ZSYmKGkucDE2MDAodGhpcy5zdGF0ZSksdGhpcy5jb3VudD0wKTtyZXR1cm4gdH0sby5wcm90b3R5cGUuY29weT1mdW5jdGlvbihlKXtmb3IobGV0IHQ9MDt0PDUwOysrdCllLnN0YXRlW3RdPXRoaXMuc3RhdGVbdF07ZS5ibG9ja1NpemU9dGhpcy5ibG9ja1NpemUsZS5jb3VudD10aGlzLmNvdW50LGUuc3F1ZWV6aW5nPXRoaXMuc3F1ZWV6aW5nfSxlLmV4cG9ydHM9b30sMjM3ODooZSx0LHIpPT57ZT1yLm5tZChlKTt2YXIgbj1cIl9fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX19cIixpPTkwMDcxOTkyNTQ3NDA5OTEsbz1cIltvYmplY3QgQXJndW1lbnRzXVwiLHM9XCJbb2JqZWN0IEZ1bmN0aW9uXVwiLGE9XCJbb2JqZWN0IE9iamVjdF1cIixjPS9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC8sZj0vXig/OjB8WzEtOV1cXGQqKSQvLHU9e307dVtcIltvYmplY3QgRmxvYXQzMkFycmF5XVwiXT11W1wiW29iamVjdCBGbG9hdDY0QXJyYXldXCJdPXVbXCJbb2JqZWN0IEludDhBcnJheV1cIl09dVtcIltvYmplY3QgSW50MTZBcnJheV1cIl09dVtcIltvYmplY3QgSW50MzJBcnJheV1cIl09dVtcIltvYmplY3QgVWludDhBcnJheV1cIl09dVtcIltvYmplY3QgVWludDhDbGFtcGVkQXJyYXldXCJdPXVbXCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiXT11W1wiW29iamVjdCBVaW50MzJBcnJheV1cIl09ITAsdVtvXT11W1wiW29iamVjdCBBcnJheV1cIl09dVtcIltvYmplY3QgQXJyYXlCdWZmZXJdXCJdPXVbXCJbb2JqZWN0IEJvb2xlYW5dXCJdPXVbXCJbb2JqZWN0IERhdGFWaWV3XVwiXT11W1wiW29iamVjdCBEYXRlXVwiXT11W1wiW29iamVjdCBFcnJvcl1cIl09dVtzXT11W1wiW29iamVjdCBNYXBdXCJdPXVbXCJbb2JqZWN0IE51bWJlcl1cIl09dVthXT11W1wiW29iamVjdCBSZWdFeHBdXCJdPXVbXCJbb2JqZWN0IFNldF1cIl09dVtcIltvYmplY3QgU3RyaW5nXVwiXT11W1wiW29iamVjdCBXZWFrTWFwXVwiXT0hMTt2YXIgZD1cIm9iamVjdFwiPT10eXBlb2Ygci5nJiZyLmcmJnIuZy5PYmplY3Q9PT1PYmplY3QmJnIuZyxoPVwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZixsPWR8fGh8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSxwPXQmJiF0Lm5vZGVUeXBlJiZ0LGI9cCYmZSYmIWUubm9kZVR5cGUmJmUseT1iJiZiLmV4cG9ydHM9PT1wLGc9eSYmZC5wcm9jZXNzLG09ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGImJmIucmVxdWlyZSYmYi5yZXF1aXJlKFwidXRpbFwiKS50eXBlc3x8ZyYmZy5iaW5kaW5nJiZnLmJpbmRpbmcoXCJ1dGlsXCIpfWNhdGNoKGUpe319KCksdj1tJiZtLmlzVHlwZWRBcnJheTtmdW5jdGlvbiB3KGUsdCxyKXtzd2l0Y2goci5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gZS5jYWxsKHQpO2Nhc2UgMTpyZXR1cm4gZS5jYWxsKHQsclswXSk7Y2FzZSAyOnJldHVybiBlLmNhbGwodCxyWzBdLHJbMV0pO2Nhc2UgMzpyZXR1cm4gZS5jYWxsKHQsclswXSxyWzFdLHJbMl0pfXJldHVybiBlLmFwcGx5KHQscil9dmFyIF8sUyxFLEE9QXJyYXkucHJvdG90eXBlLHg9RnVuY3Rpb24ucHJvdG90eXBlLGs9T2JqZWN0LnByb3RvdHlwZSxQPWxbXCJfX2NvcmUtanNfc2hhcmVkX19cIl0sTz14LnRvU3RyaW5nLE09ay5oYXNPd25Qcm9wZXJ0eSxJPShfPS9bXi5dKyQvLmV4ZWMoUCYmUC5rZXlzJiZQLmtleXMuSUVfUFJPVE98fFwiXCIpKT9cIlN5bWJvbChzcmMpXzEuXCIrXzpcIlwiLFQ9ay50b1N0cmluZyxSPU8uY2FsbChPYmplY3QpLE49UmVnRXhwKFwiXlwiK08uY2FsbChNKS5yZXBsYWNlKC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcIlxcXFwkJlwiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLFwiJDEuKj9cIikrXCIkXCIpLEM9eT9sLkJ1ZmZlcjp2b2lkIDAsaj1sLlN5bWJvbCxCPWwuVWludDhBcnJheSxMPShDJiZDLmFsbG9jVW5zYWZlLFM9T2JqZWN0LmdldFByb3RvdHlwZU9mLEU9T2JqZWN0LGZ1bmN0aW9uKGUpe3JldHVybiBTKEUoZSkpfSksRD1PYmplY3QuY3JlYXRlLFU9ay5wcm9wZXJ0eUlzRW51bWVyYWJsZSxxPUEuc3BsaWNlLEY9aj9qLnRvU3RyaW5nVGFnOnZvaWQgMCxIPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPWNlKE9iamVjdCxcImRlZmluZVByb3BlcnR5XCIpO3JldHVybiBlKHt9LFwiXCIse30pLGV9Y2F0Y2goZSl7fX0oKSx6PUM/Qy5pc0J1ZmZlcjp2b2lkIDAsSz1NYXRoLm1heCxWPURhdGUubm93LEc9Y2UobCxcIk1hcFwiKSxXPWNlKE9iamVjdCxcImNyZWF0ZVwiKSxYPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZnVuY3Rpb24odCl7aWYoIXdlKHQpKXJldHVybnt9O2lmKEQpcmV0dXJuIEQodCk7ZS5wcm90b3R5cGU9dDt2YXIgcj1uZXcgZTtyZXR1cm4gZS5wcm90b3R5cGU9dm9pZCAwLHJ9fSgpO2Z1bmN0aW9uIFkoZSl7dmFyIHQ9LTEscj1udWxsPT1lPzA6ZS5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3Q8cjspe3ZhciBuPWVbdF07dGhpcy5zZXQoblswXSxuWzFdKX19ZnVuY3Rpb24gSihlKXt2YXIgdD0tMSxyPW51bGw9PWU/MDplLmxlbmd0aDtmb3IodGhpcy5jbGVhcigpOysrdDxyOyl7dmFyIG49ZVt0XTt0aGlzLnNldChuWzBdLG5bMV0pfX1mdW5jdGlvbiAkKGUpe3ZhciB0PS0xLHI9bnVsbD09ZT8wOmUubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7Kyt0PHI7KXt2YXIgbj1lW3RdO3RoaXMuc2V0KG5bMF0sblsxXSl9fWZ1bmN0aW9uIFooZSl7dmFyIHQ9dGhpcy5fX2RhdGFfXz1uZXcgSihlKTt0aGlzLnNpemU9dC5zaXplfWZ1bmN0aW9uIFEoZSx0LHIpeyh2b2lkIDAhPT1yJiYhbGUoZVt0XSxyKXx8dm9pZCAwPT09ciYmISh0IGluIGUpKSYmcmUoZSx0LHIpfWZ1bmN0aW9uIGVlKGUsdCxyKXt2YXIgbj1lW3RdO00uY2FsbChlLHQpJiZsZShuLHIpJiYodm9pZCAwIT09cnx8dCBpbiBlKXx8cmUoZSx0LHIpfWZ1bmN0aW9uIHRlKGUsdCl7Zm9yKHZhciByPWUubGVuZ3RoO3ItLTspaWYobGUoZVtyXVswXSx0KSlyZXR1cm4gcjtyZXR1cm4tMX1mdW5jdGlvbiByZShlLHQscil7XCJfX3Byb3RvX19cIj09dCYmSD9IKGUsdCx7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6cix3cml0YWJsZTohMH0pOmVbdF09cn1ZLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189Vz9XKG51bGwpOnt9LHRoaXMuc2l6ZT0wfSxZLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5oYXMoZSkmJmRlbGV0ZSB0aGlzLl9fZGF0YV9fW2VdO3JldHVybiB0aGlzLnNpemUtPXQ/MTowLHR9LFkucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9fZGF0YV9fO2lmKFcpe3ZhciByPXRbZV07cmV0dXJuIHI9PT1uP3ZvaWQgMDpyfXJldHVybiBNLmNhbGwodCxlKT90W2VdOnZvaWQgMH0sWS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX19kYXRhX187cmV0dXJuIFc/dm9pZCAwIT09dFtlXTpNLmNhbGwodCxlKX0sWS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5fX2RhdGFfXztyZXR1cm4gdGhpcy5zaXplKz10aGlzLmhhcyhlKT8wOjEscltlXT1XJiZ2b2lkIDA9PT10P246dCx0aGlzfSxKLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189W10sdGhpcy5zaXplPTB9LEoucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9fZGF0YV9fLHI9dGUodCxlKTtyZXR1cm4hKHI8MHx8KHI9PXQubGVuZ3RoLTE/dC5wb3AoKTpxLmNhbGwodCxyLDEpLC0tdGhpcy5zaXplLDApKX0sSi5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX19kYXRhX18scj10ZSh0LGUpO3JldHVybiByPDA/dm9pZCAwOnRbcl1bMV19LEoucHJvdG90eXBlLmhhcz1mdW5jdGlvbihlKXtyZXR1cm4gdGUodGhpcy5fX2RhdGFfXyxlKT4tMX0sSi5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5fX2RhdGFfXyxuPXRlKHIsZSk7cmV0dXJuIG48MD8oKyt0aGlzLnNpemUsci5wdXNoKFtlLHRdKSk6cltuXVsxXT10LHRoaXN9LCQucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5zaXplPTAsdGhpcy5fX2RhdGFfXz17aGFzaDpuZXcgWSxtYXA6bmV3KEd8fEopLHN0cmluZzpuZXcgWX19LCQucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihlKXt2YXIgdD1hZSh0aGlzLGUpLmRlbGV0ZShlKTtyZXR1cm4gdGhpcy5zaXplLT10PzE6MCx0fSwkLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGFlKHRoaXMsZSkuZ2V0KGUpfSwkLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGFlKHRoaXMsZSkuaGFzKGUpfSwkLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1hZSh0aGlzLGUpLG49ci5zaXplO3JldHVybiByLnNldChlLHQpLHRoaXMuc2l6ZSs9ci5zaXplPT1uPzA6MSx0aGlzfSxaLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189bmV3IEosdGhpcy5zaXplPTB9LFoucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9fZGF0YV9fLHI9dC5kZWxldGUoZSk7cmV0dXJuIHRoaXMuc2l6ZT10LnNpemUscn0sWi5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9fZGF0YV9fLmdldChlKX0sWi5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhlKX0sWi5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5fX2RhdGFfXztpZihyIGluc3RhbmNlb2YgSil7dmFyIG49ci5fX2RhdGFfXztpZighR3x8bi5sZW5ndGg8MTk5KXJldHVybiBuLnB1c2goW2UsdF0pLHRoaXMuc2l6ZT0rK3Iuc2l6ZSx0aGlzO3I9dGhpcy5fX2RhdGFfXz1uZXcgJChuKX1yZXR1cm4gci5zZXQoZSx0KSx0aGlzLnNpemU9ci5zaXplLHRoaXN9O2Z1bmN0aW9uIG5lKGUpe3JldHVybiBudWxsPT1lP3ZvaWQgMD09PWU/XCJbb2JqZWN0IFVuZGVmaW5lZF1cIjpcIltvYmplY3QgTnVsbF1cIjpGJiZGIGluIE9iamVjdChlKT9mdW5jdGlvbihlKXt2YXIgdD1NLmNhbGwoZSxGKSxyPWVbRl07dHJ5e2VbRl09dm9pZCAwO3ZhciBuPSEwfWNhdGNoKGUpe312YXIgaT1ULmNhbGwoZSk7cmV0dXJuIG4mJih0P2VbRl09cjpkZWxldGUgZVtGXSksaX0oZSk6ZnVuY3Rpb24oZSl7cmV0dXJuIFQuY2FsbChlKX0oZSl9ZnVuY3Rpb24gaWUoZSl7cmV0dXJuIF9lKGUpJiZuZShlKT09b31mdW5jdGlvbiBvZShlLHQscixuLGkpe2UhPT10JiZmdW5jdGlvbihlLHQscil7Zm9yKHZhciBuPS0xLGk9T2JqZWN0KGUpLG89cihlKSxzPW8ubGVuZ3RoO3MtLTspe3ZhciBhPW9bKytuXTtpZighMT09PXQoaVthXSxhLGkpKWJyZWFrfX0odCwoZnVuY3Rpb24obyxzKXtpZihpfHwoaT1uZXcgWiksd2UobykpIWZ1bmN0aW9uKGUsdCxyLG4saSxvLHMpe3ZhciBjPWRlKGUsciksZj1kZSh0LHIpLHU9cy5nZXQoZik7aWYodSlRKGUscix1KTtlbHNle3ZhciBkLGgsbCxwLGIseT1vP28oYyxmLHIrXCJcIixlLHQscyk6dm9pZCAwLGc9dm9pZCAwPT09eTtpZihnKXt2YXIgbT1iZShmKSx2PSFtJiZnZShmKSx3PSFtJiYhdiYmU2UoZik7eT1mLG18fHZ8fHc/YmUoYyk/eT1jOl9lKGI9YykmJnllKGIpP3k9ZnVuY3Rpb24oZSx0KXt2YXIgcj0tMSxuPWUubGVuZ3RoO2Zvcih0fHwodD1BcnJheShuKSk7KytyPG47KXRbcl09ZVtyXTtyZXR1cm4gdH0oYyk6dj8oZz0hMSx5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuc2xpY2UoKX0oZikpOnc/KGc9ITEscD1uZXcobD0oZD1mKS5idWZmZXIpLmNvbnN0cnVjdG9yKGwuYnl0ZUxlbmd0aCksbmV3IEIocCkuc2V0KG5ldyBCKGwpKSxoPXAseT1uZXcgZC5jb25zdHJ1Y3RvcihoLGQuYnl0ZU9mZnNldCxkLmxlbmd0aCkpOnk9W106ZnVuY3Rpb24oZSl7aWYoIV9lKGUpfHxuZShlKSE9YSlyZXR1cm4hMTt2YXIgdD1MKGUpO2lmKG51bGw9PT10KXJldHVybiEwO3ZhciByPU0uY2FsbCh0LFwiY29uc3RydWN0b3JcIikmJnQuY29uc3RydWN0b3I7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgciYmciBpbnN0YW5jZW9mIHImJk8uY2FsbChyKT09Un0oZil8fHBlKGYpPyh5PWMscGUoYyk/eT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9IXI7cnx8KHI9e30pO2Zvcih2YXIgbz0tMSxzPXQubGVuZ3RoOysrbzxzOyl7dmFyIGE9dFtvXSxjPXZvaWQgMDt2b2lkIDA9PT1jJiYoYz1lW2FdKSxpP3JlKHIsYSxjKTplZShyLGEsYyl9cmV0dXJuIHJ9KGUsRWUoZSkpfShjKTp3ZShjKSYmIW1lKGMpfHwoeT1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCIhPXR5cGVvZiBlLmNvbnN0cnVjdG9yfHx1ZShlKT97fTpYKEwoZSkpfShmKSkpOmc9ITF9ZyYmKHMuc2V0KGYseSksaSh5LGYsbixvLHMpLHMuZGVsZXRlKGYpKSxRKGUscix5KX19KGUsdCxzLHIsb2UsbixpKTtlbHNle3ZhciBjPW4/bihkZShlLHMpLG8scytcIlwiLGUsdCxpKTp2b2lkIDA7dm9pZCAwPT09YyYmKGM9byksUShlLHMsYyl9fSksRWUpfXZhciBzZT1IP2Z1bmN0aW9uKGUsdCl7cmV0dXJuIEgoZSxcInRvU3RyaW5nXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHZhbHVlOihyPXQsZnVuY3Rpb24oKXtyZXR1cm4gcn0pLHdyaXRhYmxlOiEwfSk7dmFyIHJ9OmtlO2Z1bmN0aW9uIGFlKGUsdCl7dmFyIHIsbixpPWUuX19kYXRhX187cmV0dXJuKFwic3RyaW5nXCI9PShuPXR5cGVvZihyPXQpKXx8XCJudW1iZXJcIj09bnx8XCJzeW1ib2xcIj09bnx8XCJib29sZWFuXCI9PW4/XCJfX3Byb3RvX19cIiE9PXI6bnVsbD09PXIpP2lbXCJzdHJpbmdcIj09dHlwZW9mIHQ/XCJzdHJpbmdcIjpcImhhc2hcIl06aS5tYXB9ZnVuY3Rpb24gY2UoZSx0KXt2YXIgcj1mdW5jdGlvbihlLHQpe3JldHVybiBudWxsPT1lP3ZvaWQgMDplW3RdfShlLHQpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4hKCF3ZShlKXx8ZnVuY3Rpb24oZSl7cmV0dXJuISFJJiZJIGluIGV9KGUpKSYmKG1lKGUpP046YykudGVzdChmdW5jdGlvbihlKXtpZihudWxsIT1lKXt0cnl7cmV0dXJuIE8uY2FsbChlKX1jYXRjaChlKXt9dHJ5e3JldHVybiBlK1wiXCJ9Y2F0Y2goZSl7fX1yZXR1cm5cIlwifShlKSl9KHIpP3I6dm9pZCAwfWZ1bmN0aW9uIGZlKGUsdCl7dmFyIHI9dHlwZW9mIGU7cmV0dXJuISEodD1udWxsPT10P2k6dCkmJihcIm51bWJlclwiPT1yfHxcInN5bWJvbFwiIT1yJiZmLnRlc3QoZSkpJiZlPi0xJiZlJTE9PTAmJmU8dH1mdW5jdGlvbiB1ZShlKXt2YXIgdD1lJiZlLmNvbnN0cnVjdG9yO3JldHVybiBlPT09KFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQucHJvdG90eXBlfHxrKX1mdW5jdGlvbiBkZShlLHQpe2lmKChcImNvbnN0cnVjdG9yXCIhPT10fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBlW3RdKSYmXCJfX3Byb3RvX19cIiE9dClyZXR1cm4gZVt0XX12YXIgaGU9ZnVuY3Rpb24oZSl7dmFyIHQ9MCxyPTA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49VigpLGk9MTYtKG4tcik7aWYocj1uLGk+MCl7aWYoKyt0Pj04MDApcmV0dXJuIGFyZ3VtZW50c1swXX1lbHNlIHQ9MDtyZXR1cm4gZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX19KHNlKTtmdW5jdGlvbiBsZShlLHQpe3JldHVybiBlPT09dHx8ZSE9ZSYmdCE9dH12YXIgcGU9aWUoZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzfSgpKT9pZTpmdW5jdGlvbihlKXtyZXR1cm4gX2UoZSkmJk0uY2FsbChlLFwiY2FsbGVlXCIpJiYhVS5jYWxsKGUsXCJjYWxsZWVcIil9LGJlPUFycmF5LmlzQXJyYXk7ZnVuY3Rpb24geWUoZSl7cmV0dXJuIG51bGwhPWUmJnZlKGUubGVuZ3RoKSYmIW1lKGUpfXZhciBnZT16fHxmdW5jdGlvbigpe3JldHVybiExfTtmdW5jdGlvbiBtZShlKXtpZighd2UoZSkpcmV0dXJuITE7dmFyIHQ9bmUoZSk7cmV0dXJuIHQ9PXN8fFwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIj09dHx8XCJbb2JqZWN0IEFzeW5jRnVuY3Rpb25dXCI9PXR8fFwiW29iamVjdCBQcm94eV1cIj09dH1mdW5jdGlvbiB2ZShlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZSYmZT4tMSYmZSUxPT0wJiZlPD1pfWZ1bmN0aW9uIHdlKGUpe3ZhciB0PXR5cGVvZiBlO3JldHVybiBudWxsIT1lJiYoXCJvYmplY3RcIj09dHx8XCJmdW5jdGlvblwiPT10KX1mdW5jdGlvbiBfZShlKXtyZXR1cm4gbnVsbCE9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGV9dmFyIFNlPXY/ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfX0odik6ZnVuY3Rpb24oZSl7cmV0dXJuIF9lKGUpJiZ2ZShlLmxlbmd0aCkmJiEhdVtuZShlKV19O2Z1bmN0aW9uIEVlKGUpe3JldHVybiB5ZShlKT9mdW5jdGlvbihlLHQpe3ZhciByPWJlKGUpLG49IXImJnBlKGUpLGk9IXImJiFuJiZnZShlKSxvPSFyJiYhbiYmIWkmJlNlKGUpLHM9cnx8bnx8aXx8byxhPXM/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9LTEsbj1BcnJheShlKTsrK3I8ZTspbltyXT10KHIpO3JldHVybiBufShlLmxlbmd0aCxTdHJpbmcpOltdLGM9YS5sZW5ndGg7Zm9yKHZhciBmIGluIGUpIXQmJiFNLmNhbGwoZSxmKXx8cyYmKFwibGVuZ3RoXCI9PWZ8fGkmJihcIm9mZnNldFwiPT1mfHxcInBhcmVudFwiPT1mKXx8byYmKFwiYnVmZmVyXCI9PWZ8fFwiYnl0ZUxlbmd0aFwiPT1mfHxcImJ5dGVPZmZzZXRcIj09Zil8fGZlKGYsYykpfHxhLnB1c2goZik7cmV0dXJuIGF9KGUsITApOmZ1bmN0aW9uKGUpe2lmKCF3ZShlKSlyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9W107aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gT2JqZWN0KGUpKXQucHVzaChyKTtyZXR1cm4gdH0oZSk7dmFyIHQ9dWUoZSkscj1bXTtmb3IodmFyIG4gaW4gZSkoXCJjb25zdHJ1Y3RvclwiIT1ufHwhdCYmTS5jYWxsKGUsbikpJiZyLnB1c2gobik7cmV0dXJuIHJ9KGUpfXZhciBBZSx4ZT0oQWU9ZnVuY3Rpb24oZSx0LHIpe29lKGUsdCxyKX0sZnVuY3Rpb24oZSx0KXtyZXR1cm4gaGUoZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0PUsodm9pZCAwPT09dD9lLmxlbmd0aC0xOnQsMCksZnVuY3Rpb24oKXtmb3IodmFyIG49YXJndW1lbnRzLGk9LTEsbz1LKG4ubGVuZ3RoLXQsMCkscz1BcnJheShvKTsrK2k8bzspc1tpXT1uW3QraV07aT0tMTtmb3IodmFyIGE9QXJyYXkodCsxKTsrK2k8dDspYVtpXT1uW2ldO3JldHVybiBhW3RdPXIocyksdyhlLHRoaXMsYSl9fShlLHQsa2UpLGUrXCJcIil9KChmdW5jdGlvbihlLHQpe3ZhciByPS0xLG49dC5sZW5ndGgsaT1uPjE/dFtuLTFdOnZvaWQgMCxvPW4+Mj90WzJdOnZvaWQgMDtmb3IoaT1BZS5sZW5ndGg+MyYmXCJmdW5jdGlvblwiPT10eXBlb2YgaT8obi0tLGkpOnZvaWQgMCxvJiZmdW5jdGlvbihlLHQscil7aWYoIXdlKHIpKXJldHVybiExO3ZhciBuPXR5cGVvZiB0O3JldHVybiEhKFwibnVtYmVyXCI9PW4/eWUocikmJmZlKHQsci5sZW5ndGgpOlwic3RyaW5nXCI9PW4mJnQgaW4gcikmJmxlKHJbdF0sZSl9KHRbMF0sdFsxXSxvKSYmKGk9bjwzP3ZvaWQgMDppLG49MSksZT1PYmplY3QoZSk7KytyPG47KXt2YXIgcz10W3JdO3MmJkFlKGUscyxyKX1yZXR1cm4gZX0pKSk7ZnVuY3Rpb24ga2UoZSl7cmV0dXJuIGV9ZS5leHBvcnRzPXhlfSwyMDQzOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpOyFmdW5jdGlvbihvLHMpe1widXNlIHN0cmljdFwiO249ZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbigpe30sdD1cInVuZGVmaW5lZFwiLHI9dHlwZW9mIHdpbmRvdyE9PXQmJnR5cGVvZiB3aW5kb3cubmF2aWdhdG9yIT09dCYmL1RyaWRlbnRcXC98TVNJRSAvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLG49W1widHJhY2VcIixcImRlYnVnXCIsXCJpbmZvXCIsXCJ3YXJuXCIsXCJlcnJvclwiXTtmdW5jdGlvbiBpKGUsdCl7dmFyIHI9ZVt0XTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmJpbmQpcmV0dXJuIHIuYmluZChlKTt0cnl7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwocixlKX1jYXRjaCh0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KHIsW2UsYXJndW1lbnRzXSl9fX1mdW5jdGlvbiBvKCl7Y29uc29sZS5sb2cmJihjb25zb2xlLmxvZy5hcHBseT9jb25zb2xlLmxvZy5hcHBseShjb25zb2xlLGFyZ3VtZW50cyk6RnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KGNvbnNvbGUubG9nLFtjb25zb2xlLGFyZ3VtZW50c10pKSxjb25zb2xlLnRyYWNlJiZjb25zb2xlLnRyYWNlKCl9ZnVuY3Rpb24gcyhuKXtyZXR1cm5cImRlYnVnXCI9PT1uJiYobj1cImxvZ1wiKSx0eXBlb2YgY29uc29sZSE9PXQmJihcInRyYWNlXCI9PT1uJiZyP286dm9pZCAwIT09Y29uc29sZVtuXT9pKGNvbnNvbGUsbik6dm9pZCAwIT09Y29uc29sZS5sb2c/aShjb25zb2xlLFwibG9nXCIpOmUpfWZ1bmN0aW9uIGEodCxyKXtmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIG89bltpXTt0aGlzW29dPWk8dD9lOnRoaXMubWV0aG9kRmFjdG9yeShvLHQscil9dGhpcy5sb2c9dGhpcy5kZWJ1Z31mdW5jdGlvbiBjKGUscixuKXtyZXR1cm4gZnVuY3Rpb24oKXt0eXBlb2YgY29uc29sZSE9PXQmJihhLmNhbGwodGhpcyxyLG4pLHRoaXNbZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpKX19ZnVuY3Rpb24gZihlLHQscil7cmV0dXJuIHMoZSl8fGMuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIHUoZSxyLGkpe3ZhciBvLHM9dGhpcztyPW51bGw9PXI/XCJXQVJOXCI6cjt2YXIgYz1cImxvZ2xldmVsXCI7ZnVuY3Rpb24gdSgpe3ZhciBlO2lmKHR5cGVvZiB3aW5kb3chPT10JiZjKXt0cnl7ZT13aW5kb3cubG9jYWxTdG9yYWdlW2NdfWNhdGNoKGUpe31pZih0eXBlb2YgZT09PXQpdHJ5e3ZhciByPXdpbmRvdy5kb2N1bWVudC5jb29raWUsbj1yLmluZGV4T2YoZW5jb2RlVVJJQ29tcG9uZW50KGMpK1wiPVwiKTstMSE9PW4mJihlPS9eKFteO10rKS8uZXhlYyhyLnNsaWNlKG4pKVsxXSl9Y2F0Y2goZSl7fXJldHVybiB2b2lkIDA9PT1zLmxldmVsc1tlXSYmKGU9dm9pZCAwKSxlfX1cInN0cmluZ1wiPT10eXBlb2YgZT9jKz1cIjpcIitlOlwic3ltYm9sXCI9PXR5cGVvZiBlJiYoYz12b2lkIDApLHMubmFtZT1lLHMubGV2ZWxzPXtUUkFDRTowLERFQlVHOjEsSU5GTzoyLFdBUk46MyxFUlJPUjo0LFNJTEVOVDo1fSxzLm1ldGhvZEZhY3Rvcnk9aXx8ZixzLmdldExldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIG99LHMuc2V0TGV2ZWw9ZnVuY3Rpb24ocixpKXtpZihcInN0cmluZ1wiPT10eXBlb2YgciYmdm9pZCAwIT09cy5sZXZlbHNbci50b1VwcGVyQ2FzZSgpXSYmKHI9cy5sZXZlbHNbci50b1VwcGVyQ2FzZSgpXSksIShcIm51bWJlclwiPT10eXBlb2YgciYmcj49MCYmcjw9cy5sZXZlbHMuU0lMRU5UKSl0aHJvd1wibG9nLnNldExldmVsKCkgY2FsbGVkIHdpdGggaW52YWxpZCBsZXZlbDogXCIrcjtpZihvPXIsITEhPT1pJiZmdW5jdGlvbihlKXt2YXIgcj0obltlXXx8XCJzaWxlbnRcIikudG9VcHBlckNhc2UoKTtpZih0eXBlb2Ygd2luZG93IT09dCYmYyl7dHJ5e3JldHVybiB2b2lkKHdpbmRvdy5sb2NhbFN0b3JhZ2VbY109cil9Y2F0Y2goZSl7fXRyeXt3aW5kb3cuZG9jdW1lbnQuY29va2llPWVuY29kZVVSSUNvbXBvbmVudChjKStcIj1cIityK1wiO1wifWNhdGNoKGUpe319fShyKSxhLmNhbGwocyxyLGUpLHR5cGVvZiBjb25zb2xlPT09dCYmcjxzLmxldmVscy5TSUxFTlQpcmV0dXJuXCJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZ1wifSxzLnNldERlZmF1bHRMZXZlbD1mdW5jdGlvbihlKXtyPWUsdSgpfHxzLnNldExldmVsKGUsITEpfSxzLnJlc2V0TGV2ZWw9ZnVuY3Rpb24oKXtzLnNldExldmVsKHIsITEpLGZ1bmN0aW9uKCl7aWYodHlwZW9mIHdpbmRvdyE9PXQmJmMpe3RyeXtyZXR1cm4gdm9pZCB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYyl9Y2F0Y2goZSl7fXRyeXt3aW5kb3cuZG9jdW1lbnQuY29va2llPWVuY29kZVVSSUNvbXBvbmVudChjKStcIj07IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBVVENcIn1jYXRjaChlKXt9fX0oKX0scy5lbmFibGVBbGw9ZnVuY3Rpb24oZSl7cy5zZXRMZXZlbChzLmxldmVscy5UUkFDRSxlKX0scy5kaXNhYmxlQWxsPWZ1bmN0aW9uKGUpe3Muc2V0TGV2ZWwocy5sZXZlbHMuU0lMRU5ULGUpfTt2YXIgZD11KCk7bnVsbD09ZCYmKGQ9cikscy5zZXRMZXZlbChkLCExKX12YXIgZD1uZXcgdSxoPXt9O2QuZ2V0TG9nZ2VyPWZ1bmN0aW9uKGUpe2lmKFwic3ltYm9sXCIhPXR5cGVvZiBlJiZcInN0cmluZ1wiIT10eXBlb2YgZXx8XCJcIj09PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci5cIik7dmFyIHQ9aFtlXTtyZXR1cm4gdHx8KHQ9aFtlXT1uZXcgdShlLGQuZ2V0TGV2ZWwoKSxkLm1ldGhvZEZhY3RvcnkpKSx0fTt2YXIgbD10eXBlb2Ygd2luZG93IT09dD93aW5kb3cubG9nOnZvaWQgMDtyZXR1cm4gZC5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHR5cGVvZiB3aW5kb3chPT10JiZ3aW5kb3cubG9nPT09ZCYmKHdpbmRvdy5sb2c9bCksZH0sZC5nZXRMb2dnZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIGh9LGQuZGVmYXVsdD1kLGR9LHZvaWQgMD09PShpPW4uY2FsbCh0LHIsdCxlKSl8fChlLmV4cG9ydHM9aSl9KCl9LDIzMTg6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNTcxNyksaT1yKDMzNDkpLG89cig5NTA5KS5CdWZmZXIscz1uZXcgQXJyYXkoMTYpO2Z1bmN0aW9uIGEoKXtpLmNhbGwodGhpcyw2NCksdGhpcy5fYT0xNzMyNTg0MTkzLHRoaXMuX2I9NDAyMzIzMzQxNyx0aGlzLl9jPTI1NjIzODMxMDIsdGhpcy5fZD0yNzE3MzM4Nzh9ZnVuY3Rpb24gYyhlLHQpe3JldHVybiBlPDx0fGU+Pj4zMi10fWZ1bmN0aW9uIGYoZSx0LHIsbixpLG8scyl7cmV0dXJuIGMoZSsodCZyfH50Jm4pK2krb3wwLHMpK3R8MH1mdW5jdGlvbiB1KGUsdCxyLG4saSxvLHMpe3JldHVybiBjKGUrKHQmbnxyJn5uKStpK298MCxzKSt0fDB9ZnVuY3Rpb24gZChlLHQscixuLGksbyxzKXtyZXR1cm4gYyhlKyh0XnJebikraStvfDAscykrdHwwfWZ1bmN0aW9uIGgoZSx0LHIsbixpLG8scyl7cmV0dXJuIGMoZSsocl4odHx+bikpK2krb3wwLHMpK3R8MH1uKGEsaSksYS5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbigpe2Zvcih2YXIgZT1zLHQ9MDt0PDE2OysrdCllW3RdPXRoaXMuX2Jsb2NrLnJlYWRJbnQzMkxFKDQqdCk7dmFyIHI9dGhpcy5fYSxuPXRoaXMuX2IsaT10aGlzLl9jLG89dGhpcy5fZDtyPWYocixuLGksbyxlWzBdLDM2MTQwOTAzNjAsNyksbz1mKG8scixuLGksZVsxXSwzOTA1NDAyNzEwLDEyKSxpPWYoaSxvLHIsbixlWzJdLDYwNjEwNTgxOSwxNyksbj1mKG4saSxvLHIsZVszXSwzMjUwNDQxOTY2LDIyKSxyPWYocixuLGksbyxlWzRdLDQxMTg1NDgzOTksNyksbz1mKG8scixuLGksZVs1XSwxMjAwMDgwNDI2LDEyKSxpPWYoaSxvLHIsbixlWzZdLDI4MjE3MzU5NTUsMTcpLG49ZihuLGksbyxyLGVbN10sNDI0OTI2MTMxMywyMikscj1mKHIsbixpLG8sZVs4XSwxNzcwMDM1NDE2LDcpLG89ZihvLHIsbixpLGVbOV0sMjMzNjU1Mjg3OSwxMiksaT1mKGksbyxyLG4sZVsxMF0sNDI5NDkyNTIzMywxNyksbj1mKG4saSxvLHIsZVsxMV0sMjMwNDU2MzEzNCwyMikscj1mKHIsbixpLG8sZVsxMl0sMTgwNDYwMzY4Miw3KSxvPWYobyxyLG4saSxlWzEzXSw0MjU0NjI2MTk1LDEyKSxpPWYoaSxvLHIsbixlWzE0XSwyNzkyOTY1MDA2LDE3KSxyPXUocixuPWYobixpLG8scixlWzE1XSwxMjM2NTM1MzI5LDIyKSxpLG8sZVsxXSw0MTI5MTcwNzg2LDUpLG89dShvLHIsbixpLGVbNl0sMzIyNTQ2NTY2NCw5KSxpPXUoaSxvLHIsbixlWzExXSw2NDM3MTc3MTMsMTQpLG49dShuLGksbyxyLGVbMF0sMzkyMTA2OTk5NCwyMCkscj11KHIsbixpLG8sZVs1XSwzNTkzNDA4NjA1LDUpLG89dShvLHIsbixpLGVbMTBdLDM4MDE2MDgzLDkpLGk9dShpLG8scixuLGVbMTVdLDM2MzQ0ODg5NjEsMTQpLG49dShuLGksbyxyLGVbNF0sMzg4OTQyOTQ0OCwyMCkscj11KHIsbixpLG8sZVs5XSw1Njg0NDY0MzgsNSksbz11KG8scixuLGksZVsxNF0sMzI3NTE2MzYwNiw5KSxpPXUoaSxvLHIsbixlWzNdLDQxMDc2MDMzMzUsMTQpLG49dShuLGksbyxyLGVbOF0sMTE2MzUzMTUwMSwyMCkscj11KHIsbixpLG8sZVsxM10sMjg1MDI4NTgyOSw1KSxvPXUobyxyLG4saSxlWzJdLDQyNDM1NjM1MTIsOSksaT11KGksbyxyLG4sZVs3XSwxNzM1MzI4NDczLDE0KSxyPWQocixuPXUobixpLG8scixlWzEyXSwyMzY4MzU5NTYyLDIwKSxpLG8sZVs1XSw0Mjk0NTg4NzM4LDQpLG89ZChvLHIsbixpLGVbOF0sMjI3MjM5MjgzMywxMSksaT1kKGksbyxyLG4sZVsxMV0sMTgzOTAzMDU2MiwxNiksbj1kKG4saSxvLHIsZVsxNF0sNDI1OTY1Nzc0MCwyMykscj1kKHIsbixpLG8sZVsxXSwyNzYzOTc1MjM2LDQpLG89ZChvLHIsbixpLGVbNF0sMTI3Mjg5MzM1MywxMSksaT1kKGksbyxyLG4sZVs3XSw0MTM5NDY5NjY0LDE2KSxuPWQobixpLG8scixlWzEwXSwzMjAwMjM2NjU2LDIzKSxyPWQocixuLGksbyxlWzEzXSw2ODEyNzkxNzQsNCksbz1kKG8scixuLGksZVswXSwzOTM2NDMwMDc0LDExKSxpPWQoaSxvLHIsbixlWzNdLDM1NzI0NDUzMTcsMTYpLG49ZChuLGksbyxyLGVbNl0sNzYwMjkxODksMjMpLHI9ZChyLG4saSxvLGVbOV0sMzY1NDYwMjgwOSw0KSxvPWQobyxyLG4saSxlWzEyXSwzODczMTUxNDYxLDExKSxpPWQoaSxvLHIsbixlWzE1XSw1MzA3NDI1MjAsMTYpLHI9aChyLG49ZChuLGksbyxyLGVbMl0sMzI5OTYyODY0NSwyMyksaSxvLGVbMF0sNDA5NjMzNjQ1Miw2KSxvPWgobyxyLG4saSxlWzddLDExMjY4OTE0MTUsMTApLGk9aChpLG8scixuLGVbMTRdLDI4Nzg2MTIzOTEsMTUpLG49aChuLGksbyxyLGVbNV0sNDIzNzUzMzI0MSwyMSkscj1oKHIsbixpLG8sZVsxMl0sMTcwMDQ4NTU3MSw2KSxvPWgobyxyLG4saSxlWzNdLDIzOTk5ODA2OTAsMTApLGk9aChpLG8scixuLGVbMTBdLDQyOTM5MTU3NzMsMTUpLG49aChuLGksbyxyLGVbMV0sMjI0MDA0NDQ5NywyMSkscj1oKHIsbixpLG8sZVs4XSwxODczMzEzMzU5LDYpLG89aChvLHIsbixpLGVbMTVdLDQyNjQzNTU1NTIsMTApLGk9aChpLG8scixuLGVbNl0sMjczNDc2ODkxNiwxNSksbj1oKG4saSxvLHIsZVsxM10sMTMwOTE1MTY0OSwyMSkscj1oKHIsbixpLG8sZVs0XSw0MTQ5NDQ0MjI2LDYpLG89aChvLHIsbixpLGVbMTFdLDMxNzQ3NTY5MTcsMTApLGk9aChpLG8scixuLGVbMl0sNzE4Nzg3MjU5LDE1KSxuPWgobixpLG8scixlWzldLDM5NTE0ODE3NDUsMjEpLHRoaXMuX2E9dGhpcy5fYStyfDAsdGhpcy5fYj10aGlzLl9iK258MCx0aGlzLl9jPXRoaXMuX2MraXwwLHRoaXMuX2Q9dGhpcy5fZCtvfDB9LGEucHJvdG90eXBlLl9kaWdlc3Q9ZnVuY3Rpb24oKXt0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXT0xMjgsdGhpcy5fYmxvY2tPZmZzZXQ+NTYmJih0aGlzLl9ibG9jay5maWxsKDAsdGhpcy5fYmxvY2tPZmZzZXQsNjQpLHRoaXMuX3VwZGF0ZSgpLHRoaXMuX2Jsb2NrT2Zmc2V0PTApLHRoaXMuX2Jsb2NrLmZpbGwoMCx0aGlzLl9ibG9ja09mZnNldCw1NiksdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMF0sNTYpLHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLDYwKSx0aGlzLl91cGRhdGUoKTt2YXIgZT1vLmFsbG9jVW5zYWZlKDE2KTtyZXR1cm4gZS53cml0ZUludDMyTEUodGhpcy5fYSwwKSxlLndyaXRlSW50MzJMRSh0aGlzLl9iLDQpLGUud3JpdGVJbnQzMkxFKHRoaXMuX2MsOCksZS53cml0ZUludDMyTEUodGhpcy5fZCwxMiksZX0sZS5leHBvcnRzPWF9LDMwNDc6KGUsdCxyKT0+e3ZhciBuPXIoMzU1MCksaT1yKDk5MzEpO2Z1bmN0aW9uIG8oZSl7dGhpcy5yYW5kPWV8fG5ldyBpLlJhbmR9ZS5leHBvcnRzPW8sby5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBvKGUpfSxvLnByb3RvdHlwZS5fcmFuZGJlbG93PWZ1bmN0aW9uKGUpe3ZhciB0PWUuYml0TGVuZ3RoKCkscj1NYXRoLmNlaWwodC84KTtkb3t2YXIgaT1uZXcgbih0aGlzLnJhbmQuZ2VuZXJhdGUocikpfXdoaWxlKGkuY21wKGUpPj0wKTtyZXR1cm4gaX0sby5wcm90b3R5cGUuX3JhbmRyYW5nZT1mdW5jdGlvbihlLHQpe3ZhciByPXQuc3ViKGUpO3JldHVybiBlLmFkZCh0aGlzLl9yYW5kYmVsb3cocikpfSxvLnByb3RvdHlwZS50ZXN0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1lLmJpdExlbmd0aCgpLG89bi5tb250KGUpLHM9bmV3IG4oMSkudG9SZWQobyk7dHx8KHQ9TWF0aC5tYXgoMSxpLzQ4fDApKTtmb3IodmFyIGE9ZS5zdWJuKDEpLGM9MDshYS50ZXN0bihjKTtjKyspO2Zvcih2YXIgZj1lLnNocm4oYyksdT1hLnRvUmVkKG8pO3Q+MDt0LS0pe3ZhciBkPXRoaXMuX3JhbmRyYW5nZShuZXcgbigyKSxhKTtyJiZyKGQpO3ZhciBoPWQudG9SZWQobykucmVkUG93KGYpO2lmKDAhPT1oLmNtcChzKSYmMCE9PWguY21wKHUpKXtmb3IodmFyIGw9MTtsPGM7bCsrKXtpZigwPT09KGg9aC5yZWRTcXIoKSkuY21wKHMpKXJldHVybiExO2lmKDA9PT1oLmNtcCh1KSlicmVha31pZihsPT09YylyZXR1cm4hMX19cmV0dXJuITB9LG8ucHJvdG90eXBlLmdldERpdmlzb3I9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLmJpdExlbmd0aCgpLGk9bi5tb250KGUpLG89bmV3IG4oMSkudG9SZWQoaSk7dHx8KHQ9TWF0aC5tYXgoMSxyLzQ4fDApKTtmb3IodmFyIHM9ZS5zdWJuKDEpLGE9MDshcy50ZXN0bihhKTthKyspO2Zvcih2YXIgYz1lLnNocm4oYSksZj1zLnRvUmVkKGkpO3Q+MDt0LS0pe3ZhciB1PXRoaXMuX3JhbmRyYW5nZShuZXcgbigyKSxzKSxkPWUuZ2NkKHUpO2lmKDAhPT1kLmNtcG4oMSkpcmV0dXJuIGQ7dmFyIGg9dS50b1JlZChpKS5yZWRQb3coYyk7aWYoMCE9PWguY21wKG8pJiYwIT09aC5jbXAoZikpe2Zvcih2YXIgbD0xO2w8YTtsKyspe2lmKDA9PT0oaD1oLnJlZFNxcigpKS5jbXAobykpcmV0dXJuIGguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKGUpO2lmKDA9PT1oLmNtcChmKSlicmVha31pZihsPT09YSlyZXR1cm4oaD1oLnJlZFNxcigpKS5mcm9tUmVkKCkuc3VibigxKS5nY2QoZSl9fXJldHVybiExfX0sOTc0NjplPT57ZnVuY3Rpb24gdChlLHQpe2lmKCFlKXRocm93IG5ldyBFcnJvcih0fHxcIkFzc2VydGlvbiBmYWlsZWRcIil9ZS5leHBvcnRzPXQsdC5lcXVhbD1mdW5jdGlvbihlLHQscil7aWYoZSE9dCl0aHJvdyBuZXcgRXJyb3Iocnx8XCJBc3NlcnRpb24gZmFpbGVkOiBcIitlK1wiICE9IFwiK3QpfX0sNDUwNDooZSx0KT0+e1widXNlIHN0cmljdFwiO3ZhciByPXQ7ZnVuY3Rpb24gbihlKXtyZXR1cm4gMT09PWUubGVuZ3RoP1wiMFwiK2U6ZX1mdW5jdGlvbiBpKGUpe2Zvcih2YXIgdD1cIlwiLHI9MDtyPGUubGVuZ3RoO3IrKyl0Kz1uKGVbcl0udG9TdHJpbmcoMTYpKTtyZXR1cm4gdH1yLnRvQXJyYXk9ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlLnNsaWNlKCk7aWYoIWUpcmV0dXJuW107dmFyIHI9W107aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXJbbl09MHxlW25dO3JldHVybiByfWlmKFwiaGV4XCI9PT10KWZvcigoZT1lLnJlcGxhY2UoL1teYS16MC05XSsvZ2ksXCJcIikpLmxlbmd0aCUyIT0wJiYoZT1cIjBcIitlKSxuPTA7bjxlLmxlbmd0aDtuKz0yKXIucHVzaChwYXJzZUludChlW25dK2VbbisxXSwxNikpO2Vsc2UgZm9yKG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIGk9ZS5jaGFyQ29kZUF0KG4pLG89aT4+OCxzPTI1NSZpO28/ci5wdXNoKG8scyk6ci5wdXNoKHMpfXJldHVybiByfSxyLnplcm8yPW4sci50b0hleD1pLHIuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJoZXhcIj09PXQ/aShlKTplfX0sMzIwNjooZSx0LHIpPT57dmFyIG49cigzNTUwKSxpPXIoOTYwNCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZSl7dmFyIHQ9bmV3IG4oMSkscj1TdHJpbmcoZSkudG9Mb3dlckNhc2UoKS50cmltKCksbz1cIjB4XCI9PT1yLnN1YnN0cigwLDIpfHxcIi0weFwiPT09ci5zdWJzdHIoMCwzKSxzPWkocik7aWYoXCItXCI9PT1zLnN1YnN0cigwLDEpJiYocz1pKHMuc2xpY2UoMSkpLHQ9bmV3IG4oLTEsMTApKSwhKHM9XCJcIj09PXM/XCIwXCI6cykubWF0Y2goL14tP1swLTldKyQvKSYmcy5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKXx8cy5tYXRjaCgvXlthLWZBLUZdKyQvKXx8ITA9PT1vJiZzLm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKXJldHVybiBuZXcgbihzLDE2KS5tdWwodCk7aWYoKHMubWF0Y2goL14tP1swLTldKyQvKXx8XCJcIj09PXMpJiYhMT09PW8pcmV0dXJuIG5ldyBuKHMsMTApLm11bCh0KX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlJiZlLnRvU3RyaW5nJiYhZS5wb3AmJiFlLnB1c2gmJmUudG9TdHJpbmcoMTApLm1hdGNoKC9eLT9bMC05XSskLykmJihlLm11bHx8ZS5kaXZpZGVkVG9JbnRlZ2VyQnkpKXJldHVybiBuZXcgbihlLnRvU3RyaW5nKDEwKSwxMCk7dGhyb3cgbmV3IEVycm9yKFwiW251bWJlci10by1ibl0gd2hpbGUgY29udmVydGluZyBudW1iZXIgXCIrSlNPTi5zdHJpbmdpZnkoZSkrXCIgdG8gQk4uanMgaW5zdGFuY2UsIGVycm9yOiBpbnZhbGlkIG51bWJlciB2YWx1ZS4gVmFsdWUgbXVzdCBiZSBhbiBpbnRlZ2VyLCBoZXggc3RyaW5nLCBCTiBvciBCaWdOdW1iZXIgaW5zdGFuY2UuIE5vdGUsIGRlY2ltYWxzIGFyZSBub3Qgc3VwcG9ydGVkLlwiKX19LDQyNDQ6ZT0+e1widXNlIHN0cmljdFwiO3ZhciB0PWZ1bmN0aW9uKGUpe3JldHVybiBlIT1lfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gMD09PWUmJjA9PT1yPzEvZT09MS9yOmU9PT1yfHwhKCF0KGUpfHwhdChyKSl9fSw2MDk6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDI4OSksaT1yKDU1NTkpLG89cig0MjQ0KSxzPXIoNTYyNCksYT1yKDIyODEpLGM9aShzKCksT2JqZWN0KTtuKGMse2dldFBvbHlmaWxsOnMsaW1wbGVtZW50YXRpb246byxzaGltOmF9KSxlLmV4cG9ydHM9Y30sNTYyNDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0MjQ0KTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOm59fSwyMjgxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDU2MjQpLGk9cig0Mjg5KTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZT1uKCk7cmV0dXJuIGkoT2JqZWN0LHtpczplfSx7aXM6ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmlzIT09ZX19KSxlfX0sODk4NzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG47aWYoIU9iamVjdC5rZXlzKXt2YXIgaT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG89T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxzPXIoMTQxNCksYT1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLGM9IWEuY2FsbCh7dG9TdHJpbmc6bnVsbH0sXCJ0b1N0cmluZ1wiKSxmPWEuY2FsbCgoZnVuY3Rpb24oKXt9KSxcInByb3RvdHlwZVwiKSx1PVtcInRvU3RyaW5nXCIsXCJ0b0xvY2FsZVN0cmluZ1wiLFwidmFsdWVPZlwiLFwiaGFzT3duUHJvcGVydHlcIixcImlzUHJvdG90eXBlT2ZcIixcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsXCJjb25zdHJ1Y3RvclwiXSxkPWZ1bmN0aW9uKGUpe3ZhciB0PWUuY29uc3RydWN0b3I7cmV0dXJuIHQmJnQucHJvdG90eXBlPT09ZX0saD17JGFwcGxpY2F0aW9uQ2FjaGU6ITAsJGNvbnNvbGU6ITAsJGV4dGVybmFsOiEwLCRmcmFtZTohMCwkZnJhbWVFbGVtZW50OiEwLCRmcmFtZXM6ITAsJGlubmVySGVpZ2h0OiEwLCRpbm5lcldpZHRoOiEwLCRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6ITAsJG9ubW96ZnVsbHNjcmVlbmVycm9yOiEwLCRvdXRlckhlaWdodDohMCwkb3V0ZXJXaWR0aDohMCwkcGFnZVhPZmZzZXQ6ITAsJHBhZ2VZT2Zmc2V0OiEwLCRwYXJlbnQ6ITAsJHNjcm9sbExlZnQ6ITAsJHNjcm9sbFRvcDohMCwkc2Nyb2xsWDohMCwkc2Nyb2xsWTohMCwkc2VsZjohMCwkd2Via2l0SW5kZXhlZERCOiEwLCR3ZWJraXRTdG9yYWdlSW5mbzohMCwkd2luZG93OiEwfSxsPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdylyZXR1cm4hMTtmb3IodmFyIGUgaW4gd2luZG93KXRyeXtpZighaFtcIiRcIitlXSYmaS5jYWxsKHdpbmRvdyxlKSYmbnVsbCE9PXdpbmRvd1tlXSYmXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvd1tlXSl0cnl7ZCh3aW5kb3dbZV0pfWNhdGNoKGUpe3JldHVybiEwfX1jYXRjaChlKXtyZXR1cm4hMH1yZXR1cm4hMX0oKTtuPWZ1bmN0aW9uKGUpe3ZhciB0PW51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSxyPVwiW29iamVjdCBGdW5jdGlvbl1cIj09PW8uY2FsbChlKSxuPXMoZSksYT10JiZcIltvYmplY3QgU3RyaW5nXVwiPT09by5jYWxsKGUpLGg9W107aWYoIXQmJiFyJiYhbil0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdFwiKTt2YXIgcD1mJiZyO2lmKGEmJmUubGVuZ3RoPjAmJiFpLmNhbGwoZSwwKSlmb3IodmFyIGI9MDtiPGUubGVuZ3RoOysrYiloLnB1c2goU3RyaW5nKGIpKTtpZihuJiZlLmxlbmd0aD4wKWZvcih2YXIgeT0wO3k8ZS5sZW5ndGg7Kyt5KWgucHVzaChTdHJpbmcoeSkpO2Vsc2UgZm9yKHZhciBnIGluIGUpcCYmXCJwcm90b3R5cGVcIj09PWd8fCFpLmNhbGwoZSxnKXx8aC5wdXNoKFN0cmluZyhnKSk7aWYoYylmb3IodmFyIG09ZnVuY3Rpb24oZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvd3x8IWwpcmV0dXJuIGQoZSk7dHJ5e3JldHVybiBkKGUpfWNhdGNoKGUpe3JldHVybiExfX0oZSksdj0wO3Y8dS5sZW5ndGg7Kyt2KW0mJlwiY29uc3RydWN0b3JcIj09PXVbdl18fCFpLmNhbGwoZSx1W3ZdKXx8aC5wdXNoKHVbdl0pO3JldHVybiBofX1lLmV4cG9ydHM9bn0sMjIxNTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49QXJyYXkucHJvdG90eXBlLnNsaWNlLGk9cigxNDE0KSxvPU9iamVjdC5rZXlzLHM9bz9mdW5jdGlvbihlKXtyZXR1cm4gbyhlKX06cig4OTg3KSxhPU9iamVjdC5rZXlzO3Muc2hpbT1mdW5jdGlvbigpe2lmKE9iamVjdC5rZXlzKXt2YXIgZT1mdW5jdGlvbigpe3ZhciBlPU9iamVjdC5rZXlzKGFyZ3VtZW50cyk7cmV0dXJuIGUmJmUubGVuZ3RoPT09YXJndW1lbnRzLmxlbmd0aH0oMSwyKTtlfHwoT2JqZWN0LmtleXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGkoZSk/YShuLmNhbGwoZSkpOmEoZSl9KX1lbHNlIE9iamVjdC5rZXlzPXM7cmV0dXJuIE9iamVjdC5rZXlzfHxzfSxlLmV4cG9ydHM9c30sMTQxNDplPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI9dC5jYWxsKGUpLG49XCJbb2JqZWN0IEFyZ3VtZW50c11cIj09PXI7cmV0dXJuIG58fChuPVwiW29iamVjdCBBcnJheV1cIiE9PXImJm51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoJiZlLmxlbmd0aD49MCYmXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09dC5jYWxsKGUuY2FsbGVlKSksbn19LDc3ODooZSx0LHIpPT57dmFyIG49cigyNDc5KTtmdW5jdGlvbiBpKGUpe3ZhciB0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuY2FsbGVkP3QudmFsdWU6KHQuY2FsbGVkPSEwLHQudmFsdWU9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfTtyZXR1cm4gdC5jYWxsZWQ9ITEsdH1mdW5jdGlvbiBvKGUpe3ZhciB0PWZ1bmN0aW9uKCl7aWYodC5jYWxsZWQpdGhyb3cgbmV3IEVycm9yKHQub25jZUVycm9yKTtyZXR1cm4gdC5jYWxsZWQ9ITAsdC52YWx1ZT1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0scj1lLm5hbWV8fFwiRnVuY3Rpb24gd3JhcHBlZCB3aXRoIGBvbmNlYFwiO3JldHVybiB0Lm9uY2VFcnJvcj1yK1wiIHNob3VsZG4ndCBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2VcIix0LmNhbGxlZD0hMSx0fWUuZXhwb3J0cz1uKGkpLGUuZXhwb3J0cy5zdHJpY3Q9bihvKSxpLnByb3RvPWkoKGZ1bmN0aW9uKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSxcIm9uY2VcIix7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gaSh0aGlzKX0sY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSxcIm9uY2VTdHJpY3RcIix7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbyh0aGlzKX0sY29uZmlndXJhYmxlOiEwfSl9KSl9LDc0MzU6KGUsdCk9Pnt0LmVuZGlhbm5lc3M9ZnVuY3Rpb24oKXtyZXR1cm5cIkxFXCJ9LHQuaG9zdG5hbWU9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgbG9jYXRpb24/bG9jYXRpb24uaG9zdG5hbWU6XCJcIn0sdC5sb2FkYXZnPWZ1bmN0aW9uKCl7cmV0dXJuW119LHQudXB0aW1lPWZ1bmN0aW9uKCl7cmV0dXJuIDB9LHQuZnJlZW1lbT1mdW5jdGlvbigpe3JldHVybiBOdW1iZXIuTUFYX1ZBTFVFfSx0LnRvdGFsbWVtPWZ1bmN0aW9uKCl7cmV0dXJuIE51bWJlci5NQVhfVkFMVUV9LHQuY3B1cz1mdW5jdGlvbigpe3JldHVybltdfSx0LnR5cGU9ZnVuY3Rpb24oKXtyZXR1cm5cIkJyb3dzZXJcIn0sdC5yZWxlYXNlPWZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvcj9uYXZpZ2F0b3IuYXBwVmVyc2lvbjpcIlwifSx0Lm5ldHdvcmtJbnRlcmZhY2VzPXQuZ2V0TmV0d29ya0ludGVyZmFjZXM9ZnVuY3Rpb24oKXtyZXR1cm57fX0sdC5hcmNoPWZ1bmN0aW9uKCl7cmV0dXJuXCJqYXZhc2NyaXB0XCJ9LHQucGxhdGZvcm09ZnVuY3Rpb24oKXtyZXR1cm5cImJyb3dzZXJcIn0sdC50bXBkaXI9dC50bXBEaXI9ZnVuY3Rpb24oKXtyZXR1cm5cIi90bXBcIn0sdC5FT0w9XCJcXG5cIix0LmhvbWVkaXI9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn19LDI4MTg6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoOTgwOSk7dC5jZXJ0aWZpY2F0ZT1yKDE5MzQpO3ZhciBpPW4uZGVmaW5lKFwiUlNBUHJpdmF0ZUtleVwiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwidmVyc2lvblwiKS5pbnQoKSx0aGlzLmtleShcIm1vZHVsdXNcIikuaW50KCksdGhpcy5rZXkoXCJwdWJsaWNFeHBvbmVudFwiKS5pbnQoKSx0aGlzLmtleShcInByaXZhdGVFeHBvbmVudFwiKS5pbnQoKSx0aGlzLmtleShcInByaW1lMVwiKS5pbnQoKSx0aGlzLmtleShcInByaW1lMlwiKS5pbnQoKSx0aGlzLmtleShcImV4cG9uZW50MVwiKS5pbnQoKSx0aGlzLmtleShcImV4cG9uZW50MlwiKS5pbnQoKSx0aGlzLmtleShcImNvZWZmaWNpZW50XCIpLmludCgpKX0pKTt0LlJTQVByaXZhdGVLZXk9aTt2YXIgbz1uLmRlZmluZShcIlJTQVB1YmxpY0tleVwiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwibW9kdWx1c1wiKS5pbnQoKSx0aGlzLmtleShcInB1YmxpY0V4cG9uZW50XCIpLmludCgpKX0pKTt0LlJTQVB1YmxpY0tleT1vO3ZhciBzPW4uZGVmaW5lKFwiU3ViamVjdFB1YmxpY0tleUluZm9cIiwoZnVuY3Rpb24oKXt0aGlzLnNlcSgpLm9iaih0aGlzLmtleShcImFsZ29yaXRobVwiKS51c2UoYSksdGhpcy5rZXkoXCJzdWJqZWN0UHVibGljS2V5XCIpLmJpdHN0cigpKX0pKTt0LlB1YmxpY0tleT1zO3ZhciBhPW4uZGVmaW5lKFwiQWxnb3JpdGhtSWRlbnRpZmllclwiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwiYWxnb3JpdGhtXCIpLm9iamlkKCksdGhpcy5rZXkoXCJub25lXCIpLm51bGxfKCkub3B0aW9uYWwoKSx0aGlzLmtleShcImN1cnZlXCIpLm9iamlkKCkub3B0aW9uYWwoKSx0aGlzLmtleShcInBhcmFtc1wiKS5zZXEoKS5vYmoodGhpcy5rZXkoXCJwXCIpLmludCgpLHRoaXMua2V5KFwicVwiKS5pbnQoKSx0aGlzLmtleShcImdcIikuaW50KCkpLm9wdGlvbmFsKCkpfSkpLGM9bi5kZWZpbmUoXCJQcml2YXRlS2V5SW5mb1wiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwidmVyc2lvblwiKS5pbnQoKSx0aGlzLmtleShcImFsZ29yaXRobVwiKS51c2UoYSksdGhpcy5rZXkoXCJzdWJqZWN0UHJpdmF0ZUtleVwiKS5vY3RzdHIoKSl9KSk7dC5Qcml2YXRlS2V5PWM7dmFyIGY9bi5kZWZpbmUoXCJFbmNyeXB0ZWRQcml2YXRlS2V5SW5mb1wiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwiYWxnb3JpdGhtXCIpLnNlcSgpLm9iaih0aGlzLmtleShcImlkXCIpLm9iamlkKCksdGhpcy5rZXkoXCJkZWNyeXB0XCIpLnNlcSgpLm9iaih0aGlzLmtleShcImtkZVwiKS5zZXEoKS5vYmoodGhpcy5rZXkoXCJpZFwiKS5vYmppZCgpLHRoaXMua2V5KFwia2RlcGFyYW1zXCIpLnNlcSgpLm9iaih0aGlzLmtleShcInNhbHRcIikub2N0c3RyKCksdGhpcy5rZXkoXCJpdGVyc1wiKS5pbnQoKSkpLHRoaXMua2V5KFwiY2lwaGVyXCIpLnNlcSgpLm9iaih0aGlzLmtleShcImFsZ29cIikub2JqaWQoKSx0aGlzLmtleShcIml2XCIpLm9jdHN0cigpKSkpLHRoaXMua2V5KFwic3ViamVjdFByaXZhdGVLZXlcIikub2N0c3RyKCkpfSkpO3QuRW5jcnlwdGVkUHJpdmF0ZUtleT1mO3ZhciB1PW4uZGVmaW5lKFwiRFNBUHJpdmF0ZUtleVwiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwidmVyc2lvblwiKS5pbnQoKSx0aGlzLmtleShcInBcIikuaW50KCksdGhpcy5rZXkoXCJxXCIpLmludCgpLHRoaXMua2V5KFwiZ1wiKS5pbnQoKSx0aGlzLmtleShcInB1Yl9rZXlcIikuaW50KCksdGhpcy5rZXkoXCJwcml2X2tleVwiKS5pbnQoKSl9KSk7dC5EU0FQcml2YXRlS2V5PXUsdC5EU0FwYXJhbT1uLmRlZmluZShcIkRTQXBhcmFtXCIsKGZ1bmN0aW9uKCl7dGhpcy5pbnQoKX0pKTt2YXIgZD1uLmRlZmluZShcIkVDUHJpdmF0ZUtleVwiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwidmVyc2lvblwiKS5pbnQoKSx0aGlzLmtleShcInByaXZhdGVLZXlcIikub2N0c3RyKCksdGhpcy5rZXkoXCJwYXJhbWV0ZXJzXCIpLm9wdGlvbmFsKCkuZXhwbGljaXQoMCkudXNlKGgpLHRoaXMua2V5KFwicHVibGljS2V5XCIpLm9wdGlvbmFsKCkuZXhwbGljaXQoMSkuYml0c3RyKCkpfSkpO3QuRUNQcml2YXRlS2V5PWQ7dmFyIGg9bi5kZWZpbmUoXCJFQ1BhcmFtZXRlcnNcIiwoZnVuY3Rpb24oKXt0aGlzLmNob2ljZSh7bmFtZWRDdXJ2ZTp0aGlzLm9iamlkKCl9KX0pKTt0LnNpZ25hdHVyZT1uLmRlZmluZShcInNpZ25hdHVyZVwiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwiclwiKS5pbnQoKSx0aGlzLmtleShcInNcIikuaW50KCkpfSkpfSwxOTM0OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDk4MDkpLGk9bi5kZWZpbmUoXCJUaW1lXCIsKGZ1bmN0aW9uKCl7dGhpcy5jaG9pY2Uoe3V0Y1RpbWU6dGhpcy51dGN0aW1lKCksZ2VuZXJhbFRpbWU6dGhpcy5nZW50aW1lKCl9KX0pKSxvPW4uZGVmaW5lKFwiQXR0cmlidXRlVHlwZVZhbHVlXCIsKGZ1bmN0aW9uKCl7dGhpcy5zZXEoKS5vYmoodGhpcy5rZXkoXCJ0eXBlXCIpLm9iamlkKCksdGhpcy5rZXkoXCJ2YWx1ZVwiKS5hbnkoKSl9KSkscz1uLmRlZmluZShcIkFsZ29yaXRobUlkZW50aWZpZXJcIiwoZnVuY3Rpb24oKXt0aGlzLnNlcSgpLm9iaih0aGlzLmtleShcImFsZ29yaXRobVwiKS5vYmppZCgpLHRoaXMua2V5KFwicGFyYW1ldGVyc1wiKS5vcHRpb25hbCgpLHRoaXMua2V5KFwiY3VydmVcIikub2JqaWQoKS5vcHRpb25hbCgpKX0pKSxhPW4uZGVmaW5lKFwiU3ViamVjdFB1YmxpY0tleUluZm9cIiwoZnVuY3Rpb24oKXt0aGlzLnNlcSgpLm9iaih0aGlzLmtleShcImFsZ29yaXRobVwiKS51c2UocyksdGhpcy5rZXkoXCJzdWJqZWN0UHVibGljS2V5XCIpLmJpdHN0cigpKX0pKSxjPW4uZGVmaW5lKFwiUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZVwiLChmdW5jdGlvbigpe3RoaXMuc2V0b2Yobyl9KSksZj1uLmRlZmluZShcIlJETlNlcXVlbmNlXCIsKGZ1bmN0aW9uKCl7dGhpcy5zZXFvZihjKX0pKSx1PW4uZGVmaW5lKFwiTmFtZVwiLChmdW5jdGlvbigpe3RoaXMuY2hvaWNlKHtyZG5TZXF1ZW5jZTp0aGlzLnVzZShmKX0pfSkpLGQ9bi5kZWZpbmUoXCJWYWxpZGl0eVwiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwibm90QmVmb3JlXCIpLnVzZShpKSx0aGlzLmtleShcIm5vdEFmdGVyXCIpLnVzZShpKSl9KSksaD1uLmRlZmluZShcIkV4dGVuc2lvblwiLChmdW5jdGlvbigpe3RoaXMuc2VxKCkub2JqKHRoaXMua2V5KFwiZXh0bklEXCIpLm9iamlkKCksdGhpcy5rZXkoXCJjcml0aWNhbFwiKS5ib29sKCkuZGVmKCExKSx0aGlzLmtleShcImV4dG5WYWx1ZVwiKS5vY3RzdHIoKSl9KSksbD1uLmRlZmluZShcIlRCU0NlcnRpZmljYXRlXCIsKGZ1bmN0aW9uKCl7dGhpcy5zZXEoKS5vYmoodGhpcy5rZXkoXCJ2ZXJzaW9uXCIpLmV4cGxpY2l0KDApLmludCgpLm9wdGlvbmFsKCksdGhpcy5rZXkoXCJzZXJpYWxOdW1iZXJcIikuaW50KCksdGhpcy5rZXkoXCJzaWduYXR1cmVcIikudXNlKHMpLHRoaXMua2V5KFwiaXNzdWVyXCIpLnVzZSh1KSx0aGlzLmtleShcInZhbGlkaXR5XCIpLnVzZShkKSx0aGlzLmtleShcInN1YmplY3RcIikudXNlKHUpLHRoaXMua2V5KFwic3ViamVjdFB1YmxpY0tleUluZm9cIikudXNlKGEpLHRoaXMua2V5KFwiaXNzdWVyVW5pcXVlSURcIikuaW1wbGljaXQoMSkuYml0c3RyKCkub3B0aW9uYWwoKSx0aGlzLmtleShcInN1YmplY3RVbmlxdWVJRFwiKS5pbXBsaWNpdCgyKS5iaXRzdHIoKS5vcHRpb25hbCgpLHRoaXMua2V5KFwiZXh0ZW5zaW9uc1wiKS5leHBsaWNpdCgzKS5zZXFvZihoKS5vcHRpb25hbCgpKX0pKSxwPW4uZGVmaW5lKFwiWDUwOUNlcnRpZmljYXRlXCIsKGZ1bmN0aW9uKCl7dGhpcy5zZXEoKS5vYmoodGhpcy5rZXkoXCJ0YnNDZXJ0aWZpY2F0ZVwiKS51c2UobCksdGhpcy5rZXkoXCJzaWduYXR1cmVBbGdvcml0aG1cIikudXNlKHMpLHRoaXMua2V5KFwic2lnbmF0dXJlVmFsdWVcIikuYml0c3RyKCkpfSkpO2UuZXhwb3J0cz1wfSw3NjMxOihlLHQscik9Pnt2YXIgbj0vUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFtcXG5cXHJdK0RFSy1JbmZvOiBBRVMtKCg/OjEyOCl8KD86MTkyKXwoPzoyNTYpKS1DQkMsKFswLTlBLUhdKylbXFxuXFxyXSsoWzAtOUEtelxcblxccisvPV0rKVtcXG5cXHJdKy9tLGk9L14tLS0tLUJFR0lOICgoPzouKj8gS0VZKXxDRVJUSUZJQ0FURSktLS0tLS9tLG89L14tLS0tLUJFR0lOICgoPzouKj8gS0VZKXxDRVJUSUZJQ0FURSktLS0tLShbMC05QS16XFxuXFxyKy89XSspLS0tLS1FTkQgXFwxLS0tLS0kL20scz1yKDMwNDgpLGE9cig0Njk2KSxjPXIoOTUwOSkuQnVmZmVyO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLGY9ZS50b1N0cmluZygpLHU9Zi5tYXRjaChuKTtpZih1KXt2YXIgZD1cImFlc1wiK3VbMV0saD1jLmZyb20odVsyXSxcImhleFwiKSxsPWMuZnJvbSh1WzNdLnJlcGxhY2UoL1tcXHJcXG5dL2csXCJcIiksXCJiYXNlNjRcIikscD1zKHQsaC5zbGljZSgwLDgpLHBhcnNlSW50KHVbMV0sMTApKS5rZXksYj1bXSx5PWEuY3JlYXRlRGVjaXBoZXJpdihkLHAsaCk7Yi5wdXNoKHkudXBkYXRlKGwpKSxiLnB1c2goeS5maW5hbCgpKSxyPWMuY29uY2F0KGIpfWVsc2V7dmFyIGc9Zi5tYXRjaChvKTtyPWMuZnJvbShnWzJdLnJlcGxhY2UoL1tcXHJcXG5dL2csXCJcIiksXCJiYXNlNjRcIil9cmV0dXJue3RhZzpmLm1hdGNoKGkpWzFdLGRhdGE6cn19fSw5ODA6KGUsdCxyKT0+e3ZhciBuPXIoMjgxOCksaT1yKDI1NjIpLG89cig3NjMxKSxzPXIoNDY5NiksYT1yKDU2MzIpLGM9cig5NTA5KS5CdWZmZXI7ZnVuY3Rpb24gZihlKXt2YXIgdDtcIm9iamVjdFwiIT10eXBlb2YgZXx8Yy5pc0J1ZmZlcihlKXx8KHQ9ZS5wYXNzcGhyYXNlLGU9ZS5rZXkpLFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1jLmZyb20oZSkpO3ZhciByLGYsdT1vKGUsdCksZD11LnRhZyxoPXUuZGF0YTtzd2l0Y2goZCl7Y2FzZVwiQ0VSVElGSUNBVEVcIjpmPW4uY2VydGlmaWNhdGUuZGVjb2RlKGgsXCJkZXJcIikudGJzQ2VydGlmaWNhdGUuc3ViamVjdFB1YmxpY0tleUluZm87Y2FzZVwiUFVCTElDIEtFWVwiOnN3aXRjaChmfHwoZj1uLlB1YmxpY0tleS5kZWNvZGUoaCxcImRlclwiKSkscj1mLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbihcIi5cIikpe2Nhc2VcIjEuMi44NDAuMTEzNTQ5LjEuMS4xXCI6cmV0dXJuIG4uUlNBUHVibGljS2V5LmRlY29kZShmLnN1YmplY3RQdWJsaWNLZXkuZGF0YSxcImRlclwiKTtjYXNlXCIxLjIuODQwLjEwMDQ1LjIuMVwiOnJldHVybiBmLnN1YmplY3RQcml2YXRlS2V5PWYuc3ViamVjdFB1YmxpY0tleSx7dHlwZTpcImVjXCIsZGF0YTpmfTtjYXNlXCIxLjIuODQwLjEwMDQwLjQuMVwiOnJldHVybiBmLmFsZ29yaXRobS5wYXJhbXMucHViX2tleT1uLkRTQXBhcmFtLmRlY29kZShmLnN1YmplY3RQdWJsaWNLZXkuZGF0YSxcImRlclwiKSx7dHlwZTpcImRzYVwiLGRhdGE6Zi5hbGdvcml0aG0ucGFyYW1zfTtkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcInVua25vd24ga2V5IGlkIFwiK3IpfWNhc2VcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiOmg9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdCxuPXBhcnNlSW50KGUuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5pdGVycy50b1N0cmluZygpLDEwKSxvPWlbZS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKFwiLlwiKV0sZj1lLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5pdix1PWUuc3ViamVjdFByaXZhdGVLZXksZD1wYXJzZUludChvLnNwbGl0KFwiLVwiKVsxXSwxMCkvOCxoPWEucGJrZGYyU3luYyh0LHIsbixkLFwic2hhMVwiKSxsPXMuY3JlYXRlRGVjaXBoZXJpdihvLGgsZikscD1bXTtyZXR1cm4gcC5wdXNoKGwudXBkYXRlKHUpKSxwLnB1c2gobC5maW5hbCgpKSxjLmNvbmNhdChwKX0oaD1uLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGgsXCJkZXJcIiksdCk7Y2FzZVwiUFJJVkFURSBLRVlcIjpzd2l0Y2gocj0oZj1uLlByaXZhdGVLZXkuZGVjb2RlKGgsXCJkZXJcIikpLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbihcIi5cIikpe2Nhc2VcIjEuMi44NDAuMTEzNTQ5LjEuMS4xXCI6cmV0dXJuIG4uUlNBUHJpdmF0ZUtleS5kZWNvZGUoZi5zdWJqZWN0UHJpdmF0ZUtleSxcImRlclwiKTtjYXNlXCIxLjIuODQwLjEwMDQ1LjIuMVwiOnJldHVybntjdXJ2ZTpmLmFsZ29yaXRobS5jdXJ2ZSxwcml2YXRlS2V5Om4uRUNQcml2YXRlS2V5LmRlY29kZShmLnN1YmplY3RQcml2YXRlS2V5LFwiZGVyXCIpLnByaXZhdGVLZXl9O2Nhc2VcIjEuMi44NDAuMTAwNDAuNC4xXCI6cmV0dXJuIGYuYWxnb3JpdGhtLnBhcmFtcy5wcml2X2tleT1uLkRTQXBhcmFtLmRlY29kZShmLnN1YmplY3RQcml2YXRlS2V5LFwiZGVyXCIpLHt0eXBlOlwiZHNhXCIscGFyYW1zOmYuYWxnb3JpdGhtLnBhcmFtc307ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGtleSBpZCBcIityKX1jYXNlXCJSU0EgUFVCTElDIEtFWVwiOnJldHVybiBuLlJTQVB1YmxpY0tleS5kZWNvZGUoaCxcImRlclwiKTtjYXNlXCJSU0EgUFJJVkFURSBLRVlcIjpyZXR1cm4gbi5SU0FQcml2YXRlS2V5LmRlY29kZShoLFwiZGVyXCIpO2Nhc2VcIkRTQSBQUklWQVRFIEtFWVwiOnJldHVybnt0eXBlOlwiZHNhXCIscGFyYW1zOm4uRFNBUHJpdmF0ZUtleS5kZWNvZGUoaCxcImRlclwiKX07Y2FzZVwiRUMgUFJJVkFURSBLRVlcIjpyZXR1cm57Y3VydmU6KGg9bi5FQ1ByaXZhdGVLZXkuZGVjb2RlKGgsXCJkZXJcIikpLnBhcmFtZXRlcnMudmFsdWUscHJpdmF0ZUtleTpoLnByaXZhdGVLZXl9O2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBrZXkgdHlwZSBcIitkKX19ZS5leHBvcnRzPWYsZi5zaWduYXR1cmU9bi5zaWduYXR1cmV9LDU2MzI6KGUsdCxyKT0+e3QucGJrZGYyPXIoODYzOCksdC5wYmtkZjJTeW5jPXIoMTI1Nyl9LDg2Mzg6KGUsdCxyKT0+e3ZhciBuLGksbz1yKDk1MDkpLkJ1ZmZlcixzPXIoNzM1NyksYT1yKDIzNjgpLGM9cigxMjU3KSxmPXIoNzc3NyksdT1yLmcuY3J5cHRvJiZyLmcuY3J5cHRvLnN1YnRsZSxkPXtzaGE6XCJTSEEtMVwiLFwic2hhLTFcIjpcIlNIQS0xXCIsc2hhMTpcIlNIQS0xXCIsc2hhMjU2OlwiU0hBLTI1NlwiLFwic2hhLTI1NlwiOlwiU0hBLTI1NlwiLHNoYTM4NDpcIlNIQS0zODRcIixcInNoYS0zODRcIjpcIlNIQS0zODRcIixcInNoYS01MTJcIjpcIlNIQS01MTJcIixzaGE1MTI6XCJTSEEtNTEyXCJ9LGg9W107ZnVuY3Rpb24gbCgpe3JldHVybiBpfHwoaT1yLmcucHJvY2VzcyYmci5nLnByb2Nlc3MubmV4dFRpY2s/ci5nLnByb2Nlc3MubmV4dFRpY2s6ci5nLnF1ZXVlTWljcm90YXNrP3IuZy5xdWV1ZU1pY3JvdGFzazpyLmcuc2V0SW1tZWRpYXRlP3IuZy5zZXRJbW1lZGlhdGU6ci5nLnNldFRpbWVvdXQpfWZ1bmN0aW9uIHAoZSx0LHIsbixpKXtyZXR1cm4gdS5pbXBvcnRLZXkoXCJyYXdcIixlLHtuYW1lOlwiUEJLREYyXCJ9LCExLFtcImRlcml2ZUJpdHNcIl0pLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiB1LmRlcml2ZUJpdHMoe25hbWU6XCJQQktERjJcIixzYWx0OnQsaXRlcmF0aW9uczpyLGhhc2g6e25hbWU6aX19LGUsbjw8Myl9KSkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIG8uZnJvbShlKX0pKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LGksYix5LGcpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHkmJihnPXkseT12b2lkIDApO3ZhciBtPWRbKHk9eXx8XCJzaGExXCIpLnRvTG93ZXJDYXNlKCldO2lmKG0mJlwiZnVuY3Rpb25cIj09dHlwZW9mIHIuZy5Qcm9taXNlKXtpZihzKGksYiksZT1mKGUsYSxcIlBhc3N3b3JkXCIpLHQ9Zih0LGEsXCJTYWx0XCIpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIGcpdGhyb3cgbmV3IEVycm9yKFwiTm8gY2FsbGJhY2sgcHJvdmlkZWQgdG8gcGJrZGYyXCIpOyFmdW5jdGlvbihlLHQpe2UudGhlbigoZnVuY3Rpb24oZSl7bCgpKChmdW5jdGlvbigpe3QobnVsbCxlKX0pKX0pLChmdW5jdGlvbihlKXtsKCkoKGZ1bmN0aW9uKCl7dChlKX0pKX0pKX0oZnVuY3Rpb24oZSl7aWYoci5nLnByb2Nlc3MmJiFyLmcucHJvY2Vzcy5icm93c2VyKXJldHVybiBQcm9taXNlLnJlc29sdmUoITEpO2lmKCF1fHwhdS5pbXBvcnRLZXl8fCF1LmRlcml2ZUJpdHMpcmV0dXJuIFByb21pc2UucmVzb2x2ZSghMSk7aWYodm9pZCAwIT09aFtlXSlyZXR1cm4gaFtlXTt2YXIgdD1wKG49bnx8by5hbGxvYyg4KSxuLDEwLDEyOCxlKS50aGVuKChmdW5jdGlvbigpe3JldHVybiEwfSkpLmNhdGNoKChmdW5jdGlvbigpe3JldHVybiExfSkpO3JldHVybiBoW2VdPXQsdH0obSkudGhlbigoZnVuY3Rpb24ocil7cmV0dXJuIHI/cChlLHQsaSxiLG0pOmMoZSx0LGksYix5KX0pKSxnKX1lbHNlIGwoKSgoZnVuY3Rpb24oKXt2YXIgcjt0cnl7cj1jKGUsdCxpLGIseSl9Y2F0Y2goZSl7cmV0dXJuIGcoZSl9ZyhudWxsLHIpfSkpfX0sMjM2ODooZSx0LHIpPT57dmFyIG4saT1yKDQxNTUpO249ci5nLnByb2Nlc3MmJnIuZy5wcm9jZXNzLmJyb3dzZXI/XCJ1dGYtOFwiOnIuZy5wcm9jZXNzJiZyLmcucHJvY2Vzcy52ZXJzaW9uP3BhcnNlSW50KGkudmVyc2lvbi5zcGxpdChcIi5cIilbMF0uc2xpY2UoMSksMTApPj02P1widXRmLThcIjpcImJpbmFyeVwiOlwidXRmLThcIixlLmV4cG9ydHM9bn0sNzM1NzplPT57dmFyIHQ9TWF0aC5wb3coMiwzMCktMTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSXRlcmF0aW9ucyBub3QgYSBudW1iZXJcIik7aWYoZTwwKXRocm93IG5ldyBUeXBlRXJyb3IoXCJCYWQgaXRlcmF0aW9uc1wiKTtpZihcIm51bWJlclwiIT10eXBlb2Ygcil0aHJvdyBuZXcgVHlwZUVycm9yKFwiS2V5IGxlbmd0aCBub3QgYSBudW1iZXJcIik7aWYocjwwfHxyPnR8fHIhPXIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkJhZCBrZXkgbGVuZ3RoXCIpfX0sMTI1NzooZSx0LHIpPT57dmFyIG49cig4MDI4KSxpPXIoOTc4NSksbz1yKDkwNzIpLHM9cig5NTA5KS5CdWZmZXIsYT1yKDczNTcpLGM9cigyMzY4KSxmPXIoNzc3NyksdT1zLmFsbG9jKDEyOCksZD17bWQ1OjE2LHNoYTE6MjAsc2hhMjI0OjI4LHNoYTI1NjozMixzaGEzODQ6NDgsc2hhNTEyOjY0LHJtZDE2MDoyMCxyaXBlbWQxNjA6MjB9O2Z1bmN0aW9uIGgoZSx0LHIpe3ZhciBhPWZ1bmN0aW9uKGUpe3JldHVyblwicm1kMTYwXCI9PT1lfHxcInJpcGVtZDE2MFwiPT09ZT9mdW5jdGlvbihlKXtyZXR1cm4obmV3IGkpLnVwZGF0ZShlKS5kaWdlc3QoKX06XCJtZDVcIj09PWU/bjpmdW5jdGlvbih0KXtyZXR1cm4gbyhlKS51cGRhdGUodCkuZGlnZXN0KCl9fShlKSxjPVwic2hhNTEyXCI9PT1lfHxcInNoYTM4NFwiPT09ZT8xMjg6NjQ7dC5sZW5ndGg+Yz90PWEodCk6dC5sZW5ndGg8YyYmKHQ9cy5jb25jYXQoW3QsdV0sYykpO2Zvcih2YXIgZj1zLmFsbG9jVW5zYWZlKGMrZFtlXSksaD1zLmFsbG9jVW5zYWZlKGMrZFtlXSksbD0wO2w8YztsKyspZltsXT01NF50W2xdLGhbbF09OTJedFtsXTt2YXIgcD1zLmFsbG9jVW5zYWZlKGMrcis0KTtmLmNvcHkocCwwLDAsYyksdGhpcy5pcGFkMT1wLHRoaXMuaXBhZDI9Zix0aGlzLm9wYWQ9aCx0aGlzLmFsZz1lLHRoaXMuYmxvY2tzaXplPWMsdGhpcy5oYXNoPWEsdGhpcy5zaXplPWRbZV19aC5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuY29weSh0LHRoaXMuYmxvY2tzaXplKSx0aGlzLmhhc2godCkuY29weSh0aGlzLm9wYWQsdGhpcy5ibG9ja3NpemUpLHRoaXMuaGFzaCh0aGlzLm9wYWQpfSxlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbixpKXthKHIsbik7dmFyIG89bmV3IGgoaT1pfHxcInNoYTFcIixlPWYoZSxjLFwiUGFzc3dvcmRcIiksKHQ9Zih0LGMsXCJTYWx0XCIpKS5sZW5ndGgpLHU9cy5hbGxvY1Vuc2FmZShuKSxsPXMuYWxsb2NVbnNhZmUodC5sZW5ndGgrNCk7dC5jb3B5KGwsMCwwLHQubGVuZ3RoKTtmb3IodmFyIHA9MCxiPWRbaV0seT1NYXRoLmNlaWwobi9iKSxnPTE7Zzw9eTtnKyspe2wud3JpdGVVSW50MzJCRShnLHQubGVuZ3RoKTtmb3IodmFyIG09by5ydW4obCxvLmlwYWQxKSx2PW0sdz0xO3c8cjt3Kyspe3Y9by5ydW4odixvLmlwYWQyKTtmb3IodmFyIF89MDtfPGI7XysrKW1bX11ePXZbX119bS5jb3B5KHUscCkscCs9Yn1yZXR1cm4gdX19LDc3Nzc6KGUsdCxyKT0+e3ZhciBuPXIoOTUwOSkuQnVmZmVyO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobi5pc0J1ZmZlcihlKSlyZXR1cm4gZTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gbi5mcm9tKGUsdCk7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXJldHVybiBuLmZyb20oZS5idWZmZXIpO3Rocm93IG5ldyBUeXBlRXJyb3IocitcIiBtdXN0IGJlIGEgc3RyaW5nLCBhIEJ1ZmZlciwgYSB0eXBlZCBhcnJheSBvciBhIERhdGFWaWV3XCIpfX0sODIxMjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0MTU1KTt2b2lkIDA9PT1ufHwhbi52ZXJzaW9ufHwwPT09bi52ZXJzaW9uLmluZGV4T2YoXCJ2MC5cIil8fDA9PT1uLnZlcnNpb24uaW5kZXhPZihcInYxLlwiKSYmMCE9PW4udmVyc2lvbi5pbmRleE9mKFwidjEuOC5cIik/ZS5leHBvcnRzPXtuZXh0VGljazpmdW5jdGlvbihlLHQscixpKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTt2YXIgbyxzLGE9YXJndW1lbnRzLmxlbmd0aDtzd2l0Y2goYSl7Y2FzZSAwOmNhc2UgMTpyZXR1cm4gbi5uZXh0VGljayhlKTtjYXNlIDI6cmV0dXJuIG4ubmV4dFRpY2soKGZ1bmN0aW9uKCl7ZS5jYWxsKG51bGwsdCl9KSk7Y2FzZSAzOnJldHVybiBuLm5leHRUaWNrKChmdW5jdGlvbigpe2UuY2FsbChudWxsLHQscil9KSk7Y2FzZSA0OnJldHVybiBuLm5leHRUaWNrKChmdW5jdGlvbigpe2UuY2FsbChudWxsLHQscixpKX0pKTtkZWZhdWx0OmZvcihvPW5ldyBBcnJheShhLTEpLHM9MDtzPG8ubGVuZ3RoOylvW3MrK109YXJndW1lbnRzW3NdO3JldHVybiBuLm5leHRUaWNrKChmdW5jdGlvbigpe2UuYXBwbHkobnVsbCxvKX0pKX19fTplLmV4cG9ydHM9bn0sNDE1NTplPT57dmFyIHQscixuPWUuZXhwb3J0cz17fTtmdW5jdGlvbiBpKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBvKCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIHMoZSl7aWYodD09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigodD09PWl8fCF0KSYmc2V0VGltZW91dClyZXR1cm4gdD1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIHQoZSwwKX1jYXRjaChyKXt0cnl7cmV0dXJuIHQuY2FsbChudWxsLGUsMCl9Y2F0Y2gocil7cmV0dXJuIHQuY2FsbCh0aGlzLGUsMCl9fX0hZnVuY3Rpb24oKXt0cnl7dD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6aX1jYXRjaChlKXt0PWl9dHJ5e3I9XCJmdW5jdGlvblwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpvfWNhdGNoKGUpe3I9b319KCk7dmFyIGEsYz1bXSxmPSExLHU9LTE7ZnVuY3Rpb24gZCgpe2YmJmEmJihmPSExLGEubGVuZ3RoP2M9YS5jb25jYXQoYyk6dT0tMSxjLmxlbmd0aCYmaCgpKX1mdW5jdGlvbiBoKCl7aWYoIWYpe3ZhciBlPXMoZCk7Zj0hMDtmb3IodmFyIHQ9Yy5sZW5ndGg7dDspe2ZvcihhPWMsYz1bXTsrK3U8dDspYSYmYVt1XS5ydW4oKTt1PS0xLHQ9Yy5sZW5ndGh9YT1udWxsLGY9ITEsZnVuY3Rpb24oZSl7aWYocj09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KGUpO2lmKChyPT09b3x8IXIpJiZjbGVhclRpbWVvdXQpcmV0dXJuIHI9Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dChlKTt0cnl7cihlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIHIuY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiByLmNhbGwodGhpcyxlKX19fShlKX19ZnVuY3Rpb24gbChlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIHAoKXt9bi5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO2MucHVzaChuZXcgbChlLHQpKSwxIT09Yy5sZW5ndGh8fGZ8fHMoaCl9LGwucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LG4udGl0bGU9XCJicm93c2VyXCIsbi5icm93c2VyPSEwLG4uZW52PXt9LG4uYXJndj1bXSxuLnZlcnNpb249XCJcIixuLnZlcnNpb25zPXt9LG4ub249cCxuLmFkZExpc3RlbmVyPXAsbi5vbmNlPXAsbi5vZmY9cCxuLnJlbW92ZUxpc3RlbmVyPXAsbi5yZW1vdmVBbGxMaXN0ZW5lcnM9cCxuLmVtaXQ9cCxuLnByZXBlbmRMaXN0ZW5lcj1wLG4ucHJlcGVuZE9uY2VMaXN0ZW5lcj1wLG4ubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybltdfSxuLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9LG4uY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9LG4uY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfSxuLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSw3OTAwOihlLHQscik9Pnt0LnB1YmxpY0VuY3J5cHQ9cig2NTU5KSx0LnByaXZhdGVEZWNyeXB0PXIoNjEzOCksdC5wcml2YXRlRW5jcnlwdD1mdW5jdGlvbihlLHIpe3JldHVybiB0LnB1YmxpY0VuY3J5cHQoZSxyLCEwKX0sdC5wdWJsaWNEZWNyeXB0PWZ1bmN0aW9uKGUscil7cmV0dXJuIHQucHJpdmF0ZURlY3J5cHQoZSxyLCEwKX19LDkxOTk6KGUsdCxyKT0+e3ZhciBuPXIoMzQ4MiksaT1yKDk1MDkpLkJ1ZmZlcjtmdW5jdGlvbiBvKGUpe3ZhciB0PWkuYWxsb2NVbnNhZmUoNCk7cmV0dXJuIHQud3JpdGVVSW50MzJCRShlLDApLHR9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLHM9aS5hbGxvYygwKSxhPTA7cy5sZW5ndGg8dDspcj1vKGErKykscz1pLmNvbmNhdChbcyxuKFwic2hhMVwiKS51cGRhdGUoZSkudXBkYXRlKHIpLmRpZ2VzdCgpXSk7cmV0dXJuIHMuc2xpY2UoMCx0KX19LDYxMzg6KGUsdCxyKT0+e3ZhciBuPXIoOTgwKSxpPXIoOTE5OSksbz1yKDc4NTkpLHM9cigzNTUwKSxhPXIoMzY2MyksYz1yKDM0ODIpLGY9cig0ODE4KSx1PXIoOTUwOSkuQnVmZmVyO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIGQ7ZD1lLnBhZGRpbmc/ZS5wYWRkaW5nOnI/MTo0O3ZhciBoLGw9bihlKSxwPWwubW9kdWx1cy5ieXRlTGVuZ3RoKCk7aWYodC5sZW5ndGg+cHx8bmV3IHModCkuY21wKGwubW9kdWx1cyk+PTApdGhyb3cgbmV3IEVycm9yKFwiZGVjcnlwdGlvbiBlcnJvclwiKTtoPXI/ZihuZXcgcyh0KSxsKTphKHQsbCk7dmFyIGI9dS5hbGxvYyhwLWgubGVuZ3RoKTtpZihoPXUuY29uY2F0KFtiLGhdLHApLDQ9PT1kKXJldHVybiBmdW5jdGlvbihlLHQpe3ZhciByPWUubW9kdWx1cy5ieXRlTGVuZ3RoKCksbj1jKFwic2hhMVwiKS51cGRhdGUodS5hbGxvYygwKSkuZGlnZXN0KCkscz1uLmxlbmd0aDtpZigwIT09dFswXSl0aHJvdyBuZXcgRXJyb3IoXCJkZWNyeXB0aW9uIGVycm9yXCIpO3ZhciBhPXQuc2xpY2UoMSxzKzEpLGY9dC5zbGljZShzKzEpLGQ9byhhLGkoZixzKSksaD1vKGYsaShkLHItcy0xKSk7aWYoZnVuY3Rpb24oZSx0KXtlPXUuZnJvbShlKSx0PXUuZnJvbSh0KTt2YXIgcj0wLG49ZS5sZW5ndGg7ZS5sZW5ndGghPT10Lmxlbmd0aCYmKHIrKyxuPU1hdGgubWluKGUubGVuZ3RoLHQubGVuZ3RoKSk7Zm9yKHZhciBpPS0xOysraTxuOylyKz1lW2ldXnRbaV07cmV0dXJuIHJ9KG4saC5zbGljZSgwLHMpKSl0aHJvdyBuZXcgRXJyb3IoXCJkZWNyeXB0aW9uIGVycm9yXCIpO2Zvcih2YXIgbD1zOzA9PT1oW2xdOylsKys7aWYoMSE9PWhbbCsrXSl0aHJvdyBuZXcgRXJyb3IoXCJkZWNyeXB0aW9uIGVycm9yXCIpO3JldHVybiBoLnNsaWNlKGwpfShsLGgpO2lmKDE9PT1kKXJldHVybiBmdW5jdGlvbihlLHQscil7Zm9yKHZhciBuPXQuc2xpY2UoMCwyKSxpPTIsbz0wOzAhPT10W2krK107KWlmKGk+PXQubGVuZ3RoKXtvKys7YnJlYWt9dmFyIHM9dC5zbGljZSgyLGktMSk7aWYoKFwiMDAwMlwiIT09bi50b1N0cmluZyhcImhleFwiKSYmIXJ8fFwiMDAwMVwiIT09bi50b1N0cmluZyhcImhleFwiKSYmcikmJm8rKyxzLmxlbmd0aDw4JiZvKyssbyl0aHJvdyBuZXcgRXJyb3IoXCJkZWNyeXB0aW9uIGVycm9yXCIpO3JldHVybiB0LnNsaWNlKGkpfSgwLGgscik7aWYoMz09PWQpcmV0dXJuIGg7dGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBwYWRkaW5nXCIpfX0sNjU1OTooZSx0LHIpPT57dmFyIG49cig5ODApLGk9cigxNzk4KSxvPXIoMzQ4Mikscz1yKDkxOTkpLGE9cig3ODU5KSxjPXIoMzU1MCksZj1yKDQ4MTgpLHU9cigzNjYzKSxkPXIoOTUwOSkuQnVmZmVyO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIGg7aD1lLnBhZGRpbmc/ZS5wYWRkaW5nOnI/MTo0O3ZhciBsLHA9bihlKTtpZig0PT09aClsPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5tb2R1bHVzLmJ5dGVMZW5ndGgoKSxuPXQubGVuZ3RoLGY9byhcInNoYTFcIikudXBkYXRlKGQuYWxsb2MoMCkpLmRpZ2VzdCgpLHU9Zi5sZW5ndGgsaD0yKnU7aWYobj5yLWgtMil0aHJvdyBuZXcgRXJyb3IoXCJtZXNzYWdlIHRvbyBsb25nXCIpO3ZhciBsPWQuYWxsb2Moci1uLWgtMikscD1yLXUtMSxiPWkodSkseT1hKGQuY29uY2F0KFtmLGwsZC5hbGxvYygxLDEpLHRdLHApLHMoYixwKSksZz1hKGIscyh5LHUpKTtyZXR1cm4gbmV3IGMoZC5jb25jYXQoW2QuYWxsb2MoMSksZyx5XSxyKSl9KHAsdCk7ZWxzZSBpZigxPT09aClsPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbixvPXQubGVuZ3RoLHM9ZS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtpZihvPnMtMTEpdGhyb3cgbmV3IEVycm9yKFwibWVzc2FnZSB0b28gbG9uZ1wiKTtyZXR1cm4gbj1yP2QuYWxsb2Mocy1vLTMsMjU1KTpmdW5jdGlvbihlKXtmb3IodmFyIHQscj1kLmFsbG9jVW5zYWZlKGUpLG49MCxvPWkoMiplKSxzPTA7bjxlOylzPT09by5sZW5ndGgmJihvPWkoMiplKSxzPTApLCh0PW9bcysrXSkmJihyW24rK109dCk7cmV0dXJuIHJ9KHMtby0zKSxuZXcgYyhkLmNvbmNhdChbZC5mcm9tKFswLHI/MToyXSksbixkLmFsbG9jKDEpLHRdLHMpKX0ocCx0LHIpO2Vsc2V7aWYoMyE9PWgpdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBwYWRkaW5nXCIpO2lmKChsPW5ldyBjKHQpKS5jbXAocC5tb2R1bHVzKT49MCl0aHJvdyBuZXcgRXJyb3IoXCJkYXRhIHRvbyBsb25nIGZvciBtb2R1bHVzXCIpfXJldHVybiByP3UobCxwKTpmKGwscCl9fSw0ODE4OihlLHQscik9Pnt2YXIgbj1yKDM1NTApLGk9cig5NTA5KS5CdWZmZXI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkuZnJvbShlLnRvUmVkKG4ubW9udCh0Lm1vZHVsdXMpKS5yZWRQb3cobmV3IG4odC5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKS50b0FycmF5KCkpfX0sNzg1OTplPT57ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPWUubGVuZ3RoLG49LTE7KytuPHI7KWVbbl1ePXRbbl07cmV0dXJuIGV9fSw0Mjg2OihlLHQscik9Pnt2YXIgbj1yKDQxNTUpLGk9cig3NzgpLG89cigyODQwKSxzPXIoMTE1NiksYT1mdW5jdGlvbigpe30sYz0vXnY/XFwuMC8udGVzdChuLnZlcnNpb24pLGY9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX0sdT1mdW5jdGlvbihlLHQscixuKXtuPWkobik7dmFyIHU9ITE7ZS5vbihcImNsb3NlXCIsKGZ1bmN0aW9uKCl7dT0hMH0pKSxvKGUse3JlYWRhYmxlOnQsd3JpdGFibGU6cn0sKGZ1bmN0aW9uKGUpe2lmKGUpcmV0dXJuIG4oZSk7dT0hMCxuKCl9KSk7dmFyIGQ9ITE7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKCF1JiYhZClyZXR1cm4gZD0hMCxmdW5jdGlvbihlKXtyZXR1cm4hIWMmJiEhcyYmKGUgaW5zdGFuY2VvZihzLlJlYWRTdHJlYW18fGEpfHxlIGluc3RhbmNlb2Yocy5Xcml0ZVN0cmVhbXx8YSkpJiZmKGUuY2xvc2UpfShlKT9lLmNsb3NlKGEpOmZ1bmN0aW9uKGUpe3JldHVybiBlLnNldEhlYWRlciYmZihlLmFib3J0KX0oZSk/ZS5hYm9ydCgpOmYoZS5kZXN0cm95KT9lLmRlc3Ryb3koKTp2b2lkIG4odHx8bmV3IEVycm9yKFwic3RyZWFtIHdhcyBkZXN0cm95ZWRcIikpfX0sZD1mdW5jdGlvbihlKXtlKCl9LGg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5waXBlKHQpfTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZSx0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykscj1mKHRbdC5sZW5ndGgtMV18fGEpJiZ0LnBvcCgpfHxhO2lmKEFycmF5LmlzQXJyYXkodFswXSkmJih0PXRbMF0pLHQubGVuZ3RoPDIpdGhyb3cgbmV3IEVycm9yKFwicHVtcCByZXF1aXJlcyB0d28gc3RyZWFtcyBwZXIgbWluaW11bVwiKTt2YXIgbj10Lm1hcCgoZnVuY3Rpb24oaSxvKXt2YXIgcz1vPHQubGVuZ3RoLTE7cmV0dXJuIHUoaSxzLG8+MCwoZnVuY3Rpb24odCl7ZXx8KGU9dCksdCYmbi5mb3JFYWNoKGQpLHN8fChuLmZvckVhY2goZCkscihlKSl9KSl9KSk7cmV0dXJuIHQucmVkdWNlKGgpfX0sMjU4NzplPT57XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLG4saSl7cj1yfHxcIiZcIixuPW58fFwiPVwiO3ZhciBvPXt9O2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwwPT09ZS5sZW5ndGgpcmV0dXJuIG87dmFyIHM9L1xcKy9nO2U9ZS5zcGxpdChyKTt2YXIgYT0xZTM7aSYmXCJudW1iZXJcIj09dHlwZW9mIGkubWF4S2V5cyYmKGE9aS5tYXhLZXlzKTt2YXIgYz1lLmxlbmd0aDthPjAmJmM+YSYmKGM9YSk7Zm9yKHZhciBmPTA7ZjxjOysrZil7dmFyIHUsZCxoLGwscD1lW2ZdLnJlcGxhY2UocyxcIiUyMFwiKSxiPXAuaW5kZXhPZihuKTtiPj0wPyh1PXAuc3Vic3RyKDAsYiksZD1wLnN1YnN0cihiKzEpKToodT1wLGQ9XCJcIiksaD1kZWNvZGVVUklDb21wb25lbnQodSksbD1kZWNvZGVVUklDb21wb25lbnQoZCksdChvLGgpP0FycmF5LmlzQXJyYXkob1toXSk/b1toXS5wdXNoKGwpOm9baF09W29baF0sbF06b1toXT1sfXJldHVybiBvfX0sMjE4MjplPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9ZnVuY3Rpb24oZSl7c3dpdGNoKHR5cGVvZiBlKXtjYXNlXCJzdHJpbmdcIjpyZXR1cm4gZTtjYXNlXCJib29sZWFuXCI6cmV0dXJuIGU/XCJ0cnVlXCI6XCJmYWxzZVwiO2Nhc2VcIm51bWJlclwiOnJldHVybiBpc0Zpbml0ZShlKT9lOlwiXCI7ZGVmYXVsdDpyZXR1cm5cIlwifX07ZS5leHBvcnRzPWZ1bmN0aW9uKGUscixuLGkpe3JldHVybiByPXJ8fFwiJlwiLG49bnx8XCI9XCIsbnVsbD09PWUmJihlPXZvaWQgMCksXCJvYmplY3RcIj09dHlwZW9mIGU/T2JqZWN0LmtleXMoZSkubWFwKChmdW5jdGlvbihpKXt2YXIgbz1lbmNvZGVVUklDb21wb25lbnQodChpKSkrbjtyZXR1cm4gQXJyYXkuaXNBcnJheShlW2ldKT9lW2ldLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIG8rZW5jb2RlVVJJQ29tcG9uZW50KHQoZSkpfSkpLmpvaW4ocik6bytlbmNvZGVVUklDb21wb25lbnQodChlW2ldKSl9KSkuam9pbihyKTppP2VuY29kZVVSSUNvbXBvbmVudCh0KGkpKStuK2VuY29kZVVSSUNvbXBvbmVudCh0KGUpKTpcIlwifX0sNzY3MzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dC5kZWNvZGU9dC5wYXJzZT1yKDI1ODcpLHQuZW5jb2RlPXQuc3RyaW5naWZ5PXIoMjE4Mil9LDE3OTg6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDE1NSksaT02NTUzNixvPXIoOTUwOSkuQnVmZmVyLHM9ci5nLmNyeXB0b3x8ci5nLm1zQ3J5cHRvO3MmJnMuZ2V0UmFuZG9tVmFsdWVzP2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKGU+NDI5NDk2NzI5NSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInJlcXVlc3RlZCB0b28gbWFueSByYW5kb20gYnl0ZXNcIik7dmFyIHI9by5hbGxvY1Vuc2FmZShlKTtpZihlPjApaWYoZT5pKWZvcih2YXIgYT0wO2E8ZTthKz1pKXMuZ2V0UmFuZG9tVmFsdWVzKHIuc2xpY2UoYSxhK2kpKTtlbHNlIHMuZ2V0UmFuZG9tVmFsdWVzKHIpO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/bi5uZXh0VGljaygoZnVuY3Rpb24oKXt0KG51bGwscil9KSk6cn06ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiU2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci5cXG5Vc2UgQ2hyb21lLCBGaXJlZm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExXCIpfX0sNzk2MzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0MTU1KTtmdW5jdGlvbiBpKCl7dGhyb3cgbmV3IEVycm9yKFwic2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclxcbnVzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTFcIil9dmFyIG89cig5NTA5KSxzPXIoMTc5OCksYT1vLkJ1ZmZlcixjPW8ua01heExlbmd0aCxmPXIuZy5jcnlwdG98fHIuZy5tc0NyeXB0byx1PU1hdGgucG93KDIsMzIpLTE7ZnVuY3Rpb24gZChlLHQpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlIT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJvZmZzZXQgbXVzdCBiZSBhIG51bWJlclwiKTtpZihlPnV8fGU8MCl0aHJvdyBuZXcgVHlwZUVycm9yKFwib2Zmc2V0IG11c3QgYmUgYSB1aW50MzJcIik7aWYoZT5jfHxlPnQpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvZmZzZXQgb3V0IG9mIHJhbmdlXCIpfWZ1bmN0aW9uIGgoZSx0LHIpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlIT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJzaXplIG11c3QgYmUgYSBudW1iZXJcIik7aWYoZT51fHxlPDApdGhyb3cgbmV3IFR5cGVFcnJvcihcInNpemUgbXVzdCBiZSBhIHVpbnQzMlwiKTtpZihlK3Q+cnx8ZT5jKXRocm93IG5ldyBSYW5nZUVycm9yKFwiYnVmZmVyIHRvbyBzbWFsbFwiKX1mdW5jdGlvbiBsKGUsdCxyLGkpe2lmKG4uYnJvd3Nlcil7dmFyIG89ZS5idWZmZXIsYT1uZXcgVWludDhBcnJheShvLHQscik7cmV0dXJuIGYuZ2V0UmFuZG9tVmFsdWVzKGEpLGk/dm9pZCBuLm5leHRUaWNrKChmdW5jdGlvbigpe2kobnVsbCxlKX0pKTplfWlmKCFpKXJldHVybiBzKHIpLmNvcHkoZSx0KSxlO3MociwoZnVuY3Rpb24ocixuKXtpZihyKXJldHVybiBpKHIpO24uY29weShlLHQpLGkobnVsbCxlKX0pKX1mJiZmLmdldFJhbmRvbVZhbHVlc3x8IW4uYnJvd3Nlcj8odC5yYW5kb21GaWxsPWZ1bmN0aW9uKGUsdCxuLGkpe2lmKCEoYS5pc0J1ZmZlcihlKXx8ZSBpbnN0YW5jZW9mIHIuZy5VaW50OEFycmF5KSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZlwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpaT10LHQ9MCxuPWUubGVuZ3RoO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilpPW4sbj1lLmxlbmd0aC10O2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNiXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7cmV0dXJuIGQodCxlLmxlbmd0aCksaChuLHQsZS5sZW5ndGgpLGwoZSx0LG4saSl9LHQucmFuZG9tRmlsbFN5bmM9ZnVuY3Rpb24oZSx0LG4pe2lmKHZvaWQgMD09PXQmJih0PTApLCEoYS5pc0J1ZmZlcihlKXx8ZSBpbnN0YW5jZW9mIHIuZy5VaW50OEFycmF5KSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZlwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpO3JldHVybiBkKHQsZS5sZW5ndGgpLHZvaWQgMD09PW4mJihuPWUubGVuZ3RoLXQpLGgobix0LGUubGVuZ3RoKSxsKGUsdCxuKX0pOih0LnJhbmRvbUZpbGw9aSx0LnJhbmRvbUZpbGxTeW5jPWkpfSw0MjgxOmU9PntcInVzZSBzdHJpY3RcIjt2YXIgdD17fTtmdW5jdGlvbiByKGUscixuKXtufHwobj1FcnJvcik7dmFyIGk9ZnVuY3Rpb24oZSl7dmFyIHQsbjtmdW5jdGlvbiBpKHQsbixpKXtyZXR1cm4gZS5jYWxsKHRoaXMsZnVuY3Rpb24oZSx0LG4pe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiByP3I6cihlLHQsbil9KHQsbixpKSl8fHRoaXN9cmV0dXJuIG49ZSwodD1pKS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSksdC5wcm90b3R5cGUuY29uc3RydWN0b3I9dCx0Ll9fcHJvdG9fXz1uLGl9KG4pO2kucHJvdG90eXBlLm5hbWU9bi5uYW1lLGkucHJvdG90eXBlLmNvZGU9ZSx0W2VdPWl9ZnVuY3Rpb24gbihlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciByPWUubGVuZ3RoO3JldHVybiBlPWUubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nKGUpfSkpLHI+Mj9cIm9uZSBvZiBcIi5jb25jYXQodCxcIiBcIikuY29uY2F0KGUuc2xpY2UoMCxyLTEpLmpvaW4oXCIsIFwiKSxcIiwgb3IgXCIpK2Vbci0xXToyPT09cj9cIm9uZSBvZiBcIi5jb25jYXQodCxcIiBcIikuY29uY2F0KGVbMF0sXCIgb3IgXCIpLmNvbmNhdChlWzFdKTpcIm9mIFwiLmNvbmNhdCh0LFwiIFwiKS5jb25jYXQoZVswXSl9cmV0dXJuXCJvZiBcIi5jb25jYXQodCxcIiBcIikuY29uY2F0KFN0cmluZyhlKSl9cihcIkVSUl9JTlZBTElEX09QVF9WQUxVRVwiLChmdW5jdGlvbihlLHQpe3JldHVybidUaGUgdmFsdWUgXCInK3QrJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcIicrZSsnXCInfSksVHlwZUVycm9yKSxyKFwiRVJSX0lOVkFMSURfQVJHX1RZUEVcIiwoZnVuY3Rpb24oZSx0LHIpe3ZhciBpLG8scyxhLGM7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJihvPVwibm90IFwiLHQuc3Vic3RyKDAsby5sZW5ndGgpPT09byk/KGk9XCJtdXN0IG5vdCBiZVwiLHQ9dC5yZXBsYWNlKC9ebm90IC8sXCJcIikpOmk9XCJtdXN0IGJlXCIsZnVuY3Rpb24oZSx0LHIpe3JldHVybih2b2lkIDA9PT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpLGUuc3Vic3RyaW5nKHItdC5sZW5ndGgscik9PT10fShlLFwiIGFyZ3VtZW50XCIpKXM9XCJUaGUgXCIuY29uY2F0KGUsXCIgXCIpLmNvbmNhdChpLFwiIFwiKS5jb25jYXQobih0LFwidHlwZVwiKSk7ZWxzZXt2YXIgZj0oXCJudW1iZXJcIiE9dHlwZW9mIGMmJihjPTApLGMrXCIuXCIubGVuZ3RoPihhPWUpLmxlbmd0aHx8LTE9PT1hLmluZGV4T2YoXCIuXCIsYyk/XCJhcmd1bWVudFwiOlwicHJvcGVydHlcIik7cz0nVGhlIFwiJy5jb25jYXQoZSwnXCIgJykuY29uY2F0KGYsXCIgXCIpLmNvbmNhdChpLFwiIFwiKS5jb25jYXQobih0LFwidHlwZVwiKSl9cmV0dXJuIHMrXCIuIFJlY2VpdmVkIHR5cGUgXCIuY29uY2F0KHR5cGVvZiByKX0pLFR5cGVFcnJvcikscihcIkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0ZcIixcInN0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GXCIpLHIoXCJFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRFwiLChmdW5jdGlvbihlKXtyZXR1cm5cIlRoZSBcIitlK1wiIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWRcIn0pKSxyKFwiRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0VcIixcIlByZW1hdHVyZSBjbG9zZVwiKSxyKFwiRVJSX1NUUkVBTV9ERVNUUk9ZRURcIiwoZnVuY3Rpb24oZSl7cmV0dXJuXCJDYW5ub3QgY2FsbCBcIitlK1wiIGFmdGVyIGEgc3RyZWFtIHdhcyBkZXN0cm95ZWRcIn0pKSxyKFwiRVJSX01VTFRJUExFX0NBTExCQUNLXCIsXCJDYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXNcIikscihcIkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEVcIixcIkNhbm5vdCBwaXBlLCBub3QgcmVhZGFibGVcIikscihcIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EXCIsXCJ3cml0ZSBhZnRlciBlbmRcIikscihcIkVSUl9TVFJFQU1fTlVMTF9WQUxVRVNcIixcIk1heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtXCIsVHlwZUVycm9yKSxyKFwiRVJSX1VOS05PV05fRU5DT0RJTkdcIiwoZnVuY3Rpb24oZSl7cmV0dXJuXCJVbmtub3duIGVuY29kaW5nOiBcIitlfSksVHlwZUVycm9yKSxyKFwiRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVFwiLFwic3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnRcIiksZS5leHBvcnRzLnE9dH0sNjc1MzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0MTU1KSxpPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSl0LnB1c2gocik7cmV0dXJuIHR9O2UuZXhwb3J0cz11O3ZhciBvPXIoOTQ4MSkscz1yKDQyMjkpO3IoNTcxNykodSxvKTtmb3IodmFyIGE9aShzLnByb3RvdHlwZSksYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZj1hW2NdO3UucHJvdG90eXBlW2ZdfHwodS5wcm90b3R5cGVbZl09cy5wcm90b3R5cGVbZl0pfWZ1bmN0aW9uIHUoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgdSkpcmV0dXJuIG5ldyB1KGUpO28uY2FsbCh0aGlzLGUpLHMuY2FsbCh0aGlzLGUpLHRoaXMuYWxsb3dIYWxmT3Blbj0hMCxlJiYoITE9PT1lLnJlYWRhYmxlJiYodGhpcy5yZWFkYWJsZT0hMSksITE9PT1lLndyaXRhYmxlJiYodGhpcy53cml0YWJsZT0hMSksITE9PT1lLmFsbG93SGFsZk9wZW4mJih0aGlzLmFsbG93SGFsZk9wZW49ITEsdGhpcy5vbmNlKFwiZW5kXCIsZCkpKX1mdW5jdGlvbiBkKCl7dGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZHx8bi5uZXh0VGljayhoLHRoaXMpfWZ1bmN0aW9uIGgoZSl7ZS5lbmQoKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodS5wcm90b3R5cGUsXCJ3cml0YWJsZUhpZ2hXYXRlck1hcmtcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LnByb3RvdHlwZSxcIndyaXRhYmxlQnVmZmVyXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyKCl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHUucHJvdG90eXBlLFwid3JpdGFibGVMZW5ndGhcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGh9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHUucHJvdG90eXBlLFwiZGVzdHJveWVkXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuX3JlYWRhYmxlU3RhdGUmJnZvaWQgMCE9PXRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkJiZ0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZH0sc2V0OmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PXRoaXMuX3JlYWRhYmxlU3RhdGUmJnZvaWQgMCE9PXRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD1lLHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPWUpfX0pfSwyNzI1OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9aTt2YXIgbj1yKDQ2MDUpO2Z1bmN0aW9uIGkoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgaSkpcmV0dXJuIG5ldyBpKGUpO24uY2FsbCh0aGlzLGUpfXIoNTcxNykoaSxuKSxpLnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKGUsdCxyKXtyKG51bGwsZSl9fSw5NDgxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbixpPXIoNDE1NSk7ZS5leHBvcnRzPXgseC5SZWFkYWJsZVN0YXRlPUEscig3MTg3KS5FdmVudEVtaXR0ZXI7dmFyIG8scz1mdW5jdGlvbihlLHQpe3JldHVybiBlLmxpc3RlbmVycyh0KS5sZW5ndGh9LGE9cigyNTAzKSxjPXIoODc2NCkuQnVmZmVyLGY9ci5nLlVpbnQ4QXJyYXl8fGZ1bmN0aW9uKCl7fSx1PXIoNDYxNik7bz11JiZ1LmRlYnVnbG9nP3UuZGVidWdsb2coXCJzdHJlYW1cIik6ZnVuY3Rpb24oKXt9O3ZhciBkLGgsbCxwPXIoNzMyNyksYj1yKDExOTUpLHk9cigyNDU3KS5nZXRIaWdoV2F0ZXJNYXJrLGc9cig0MjgxKS5xLG09Zy5FUlJfSU5WQUxJRF9BUkdfVFlQRSx2PWcuRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRix3PWcuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsXz1nLkVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQ7cig1NzE3KSh4LGEpO3ZhciBTPWIuZXJyb3JPckRlc3Ryb3ksRT1bXCJlcnJvclwiLFwiY2xvc2VcIixcImRlc3Ryb3lcIixcInBhdXNlXCIsXCJyZXN1bWVcIl07ZnVuY3Rpb24gQShlLHQsaSl7bj1ufHxyKDY3NTMpLGU9ZXx8e30sXCJib29sZWFuXCIhPXR5cGVvZiBpJiYoaT10IGluc3RhbmNlb2YgbiksdGhpcy5vYmplY3RNb2RlPSEhZS5vYmplY3RNb2RlLGkmJih0aGlzLm9iamVjdE1vZGU9dGhpcy5vYmplY3RNb2RlfHwhIWUucmVhZGFibGVPYmplY3RNb2RlKSx0aGlzLmhpZ2hXYXRlck1hcms9eSh0aGlzLGUsXCJyZWFkYWJsZUhpZ2hXYXRlck1hcmtcIixpKSx0aGlzLmJ1ZmZlcj1uZXcgcCx0aGlzLmxlbmd0aD0wLHRoaXMucGlwZXM9bnVsbCx0aGlzLnBpcGVzQ291bnQ9MCx0aGlzLmZsb3dpbmc9bnVsbCx0aGlzLmVuZGVkPSExLHRoaXMuZW5kRW1pdHRlZD0hMSx0aGlzLnJlYWRpbmc9ITEsdGhpcy5zeW5jPSEwLHRoaXMubmVlZFJlYWRhYmxlPSExLHRoaXMuZW1pdHRlZFJlYWRhYmxlPSExLHRoaXMucmVhZGFibGVMaXN0ZW5pbmc9ITEsdGhpcy5yZXN1bWVTY2hlZHVsZWQ9ITEsdGhpcy5wYXVzZWQ9ITAsdGhpcy5lbWl0Q2xvc2U9ITEhPT1lLmVtaXRDbG9zZSx0aGlzLmF1dG9EZXN0cm95PSEhZS5hdXRvRGVzdHJveSx0aGlzLmRlc3Ryb3llZD0hMSx0aGlzLmRlZmF1bHRFbmNvZGluZz1lLmRlZmF1bHRFbmNvZGluZ3x8XCJ1dGY4XCIsdGhpcy5hd2FpdERyYWluPTAsdGhpcy5yZWFkaW5nTW9yZT0hMSx0aGlzLmRlY29kZXI9bnVsbCx0aGlzLmVuY29kaW5nPW51bGwsZS5lbmNvZGluZyYmKGR8fChkPXIoMjU1MykucyksdGhpcy5kZWNvZGVyPW5ldyBkKGUuZW5jb2RpbmcpLHRoaXMuZW5jb2Rpbmc9ZS5lbmNvZGluZyl9ZnVuY3Rpb24geChlKXtpZihuPW58fHIoNjc1MyksISh0aGlzIGluc3RhbmNlb2YgeCkpcmV0dXJuIG5ldyB4KGUpO3ZhciB0PXRoaXMgaW5zdGFuY2VvZiBuO3RoaXMuX3JlYWRhYmxlU3RhdGU9bmV3IEEoZSx0aGlzLHQpLHRoaXMucmVhZGFibGU9ITAsZSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUucmVhZCYmKHRoaXMuX3JlYWQ9ZS5yZWFkKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmRlc3Ryb3kmJih0aGlzLl9kZXN0cm95PWUuZGVzdHJveSkpLGEuY2FsbCh0aGlzKX1mdW5jdGlvbiBrKGUsdCxyLG4saSl7byhcInJlYWRhYmxlQWRkQ2h1bmtcIix0KTt2YXIgcyxhPWUuX3JlYWRhYmxlU3RhdGU7aWYobnVsbD09PXQpYS5yZWFkaW5nPSExLGZ1bmN0aW9uKGUsdCl7aWYobyhcIm9uRW9mQ2h1bmtcIiksIXQuZW5kZWQpe2lmKHQuZGVjb2Rlcil7dmFyIHI9dC5kZWNvZGVyLmVuZCgpO3ImJnIubGVuZ3RoJiYodC5idWZmZXIucHVzaChyKSx0Lmxlbmd0aCs9dC5vYmplY3RNb2RlPzE6ci5sZW5ndGgpfXQuZW5kZWQ9ITAsdC5zeW5jP0koZSk6KHQubmVlZFJlYWRhYmxlPSExLHQuZW1pdHRlZFJlYWRhYmxlfHwodC5lbWl0dGVkUmVhZGFibGU9ITAsVChlKSkpfX0oZSxhKTtlbHNlIGlmKGl8fChzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbjtyZXR1cm4gbj10LGMuaXNCdWZmZXIobil8fG4gaW5zdGFuY2VvZiBmfHxcInN0cmluZ1wiPT10eXBlb2YgdHx8dm9pZCAwPT09dHx8ZS5vYmplY3RNb2RlfHwocj1uZXcgbShcImNodW5rXCIsW1wic3RyaW5nXCIsXCJCdWZmZXJcIixcIlVpbnQ4QXJyYXlcIl0sdCkpLHJ9KGEsdCkpLHMpUyhlLHMpO2Vsc2UgaWYoYS5vYmplY3RNb2RlfHx0JiZ0Lmxlbmd0aD4wKWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0fHxhLm9iamVjdE1vZGV8fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KT09PWMucHJvdG90eXBlfHwodD1mdW5jdGlvbihlKXtyZXR1cm4gYy5mcm9tKGUpfSh0KSksbilhLmVuZEVtaXR0ZWQ/UyhlLG5ldyBfKTpQKGUsYSx0LCEwKTtlbHNlIGlmKGEuZW5kZWQpUyhlLG5ldyB2KTtlbHNle2lmKGEuZGVzdHJveWVkKXJldHVybiExO2EucmVhZGluZz0hMSxhLmRlY29kZXImJiFyPyh0PWEuZGVjb2Rlci53cml0ZSh0KSxhLm9iamVjdE1vZGV8fDAhPT10Lmxlbmd0aD9QKGUsYSx0LCExKTpSKGUsYSkpOlAoZSxhLHQsITEpfWVsc2Ugbnx8KGEucmVhZGluZz0hMSxSKGUsYSkpO3JldHVybiFhLmVuZGVkJiYoYS5sZW5ndGg8YS5oaWdoV2F0ZXJNYXJrfHwwPT09YS5sZW5ndGgpfWZ1bmN0aW9uIFAoZSx0LHIsbil7dC5mbG93aW5nJiYwPT09dC5sZW5ndGgmJiF0LnN5bmM/KHQuYXdhaXREcmFpbj0wLGUuZW1pdChcImRhdGFcIixyKSk6KHQubGVuZ3RoKz10Lm9iamVjdE1vZGU/MTpyLmxlbmd0aCxuP3QuYnVmZmVyLnVuc2hpZnQocik6dC5idWZmZXIucHVzaChyKSx0Lm5lZWRSZWFkYWJsZSYmSShlKSksUihlLHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh4LnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLl9yZWFkYWJsZVN0YXRlJiZ0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD1lKX19KSx4LnByb3RvdHlwZS5kZXN0cm95PWIuZGVzdHJveSx4LnByb3RvdHlwZS5fdW5kZXN0cm95PWIudW5kZXN0cm95LHgucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKGUsdCl7dChlKX0seC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3ZhciByLG49dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gbi5vYmplY3RNb2RlP3I9ITA6XCJzdHJpbmdcIj09dHlwZW9mIGUmJigodD10fHxuLmRlZmF1bHRFbmNvZGluZykhPT1uLmVuY29kaW5nJiYoZT1jLmZyb20oZSx0KSx0PVwiXCIpLHI9ITApLGsodGhpcyxlLHQsITEscil9LHgucHJvdG90eXBlLnVuc2hpZnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGsodGhpcyxlLG51bGwsITAsITEpfSx4LnByb3RvdHlwZS5pc1BhdXNlZD1mdW5jdGlvbigpe3JldHVybiExPT09dGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nfSx4LnByb3RvdHlwZS5zZXRFbmNvZGluZz1mdW5jdGlvbihlKXtkfHwoZD1yKDI1NTMpLnMpO3ZhciB0PW5ldyBkKGUpO3RoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlcj10LHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2Rpbmc9dGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyLmVuY29kaW5nO2Zvcih2YXIgbj10aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5oZWFkLGk9XCJcIjtudWxsIT09bjspaSs9dC53cml0ZShuLmRhdGEpLG49bi5uZXh0O3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5jbGVhcigpLFwiXCIhPT1pJiZ0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5wdXNoKGkpLHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoPWkubGVuZ3RoLHRoaXN9O3ZhciBPPTEwNzM3NDE4MjQ7ZnVuY3Rpb24gTShlLHQpe3JldHVybiBlPD0wfHwwPT09dC5sZW5ndGgmJnQuZW5kZWQ/MDp0Lm9iamVjdE1vZGU/MTplIT1lP3QuZmxvd2luZyYmdC5sZW5ndGg/dC5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDp0Lmxlbmd0aDooZT50LmhpZ2hXYXRlck1hcmsmJih0LmhpZ2hXYXRlck1hcms9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PU8/ZT1POihlLS0sZXw9ZT4+PjEsZXw9ZT4+PjIsZXw9ZT4+PjQsZXw9ZT4+PjgsZXw9ZT4+PjE2LGUrKyksZX0oZSkpLGU8PXQubGVuZ3RoP2U6dC5lbmRlZD90Lmxlbmd0aDoodC5uZWVkUmVhZGFibGU9ITAsMCkpfWZ1bmN0aW9uIEkoZSl7dmFyIHQ9ZS5fcmVhZGFibGVTdGF0ZTtvKFwiZW1pdFJlYWRhYmxlXCIsdC5uZWVkUmVhZGFibGUsdC5lbWl0dGVkUmVhZGFibGUpLHQubmVlZFJlYWRhYmxlPSExLHQuZW1pdHRlZFJlYWRhYmxlfHwobyhcImVtaXRSZWFkYWJsZVwiLHQuZmxvd2luZyksdC5lbWl0dGVkUmVhZGFibGU9ITAsaS5uZXh0VGljayhULGUpKX1mdW5jdGlvbiBUKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7byhcImVtaXRSZWFkYWJsZV9cIix0LmRlc3Ryb3llZCx0Lmxlbmd0aCx0LmVuZGVkKSx0LmRlc3Ryb3llZHx8IXQubGVuZ3RoJiYhdC5lbmRlZHx8KGUuZW1pdChcInJlYWRhYmxlXCIpLHQuZW1pdHRlZFJlYWRhYmxlPSExKSx0Lm5lZWRSZWFkYWJsZT0hdC5mbG93aW5nJiYhdC5lbmRlZCYmdC5sZW5ndGg8PXQuaGlnaFdhdGVyTWFyayxMKGUpfWZ1bmN0aW9uIFIoZSx0KXt0LnJlYWRpbmdNb3JlfHwodC5yZWFkaW5nTW9yZT0hMCxpLm5leHRUaWNrKE4sZSx0KSl9ZnVuY3Rpb24gTihlLHQpe2Zvcig7IXQucmVhZGluZyYmIXQuZW5kZWQmJih0Lmxlbmd0aDx0LmhpZ2hXYXRlck1hcmt8fHQuZmxvd2luZyYmMD09PXQubGVuZ3RoKTspe3ZhciByPXQubGVuZ3RoO2lmKG8oXCJtYXliZVJlYWRNb3JlIHJlYWQgMFwiKSxlLnJlYWQoMCkscj09PXQubGVuZ3RoKWJyZWFrfXQucmVhZGluZ01vcmU9ITF9ZnVuY3Rpb24gQyhlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO3QucmVhZGFibGVMaXN0ZW5pbmc9ZS5saXN0ZW5lckNvdW50KFwicmVhZGFibGVcIik+MCx0LnJlc3VtZVNjaGVkdWxlZCYmIXQucGF1c2VkP3QuZmxvd2luZz0hMDplLmxpc3RlbmVyQ291bnQoXCJkYXRhXCIpPjAmJmUucmVzdW1lKCl9ZnVuY3Rpb24gaihlKXtvKFwicmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwXCIpLGUucmVhZCgwKX1mdW5jdGlvbiBCKGUsdCl7byhcInJlc3VtZVwiLHQucmVhZGluZyksdC5yZWFkaW5nfHxlLnJlYWQoMCksdC5yZXN1bWVTY2hlZHVsZWQ9ITEsZS5lbWl0KFwicmVzdW1lXCIpLEwoZSksdC5mbG93aW5nJiYhdC5yZWFkaW5nJiZlLnJlYWQoMCl9ZnVuY3Rpb24gTChlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO2ZvcihvKFwiZmxvd1wiLHQuZmxvd2luZyk7dC5mbG93aW5nJiZudWxsIT09ZS5yZWFkKCk7KTt9ZnVuY3Rpb24gRChlLHQpe3JldHVybiAwPT09dC5sZW5ndGg/bnVsbDoodC5vYmplY3RNb2RlP3I9dC5idWZmZXIuc2hpZnQoKTohZXx8ZT49dC5sZW5ndGg/KHI9dC5kZWNvZGVyP3QuYnVmZmVyLmpvaW4oXCJcIik6MT09PXQuYnVmZmVyLmxlbmd0aD90LmJ1ZmZlci5maXJzdCgpOnQuYnVmZmVyLmNvbmNhdCh0Lmxlbmd0aCksdC5idWZmZXIuY2xlYXIoKSk6cj10LmJ1ZmZlci5jb25zdW1lKGUsdC5kZWNvZGVyKSxyKTt2YXIgcn1mdW5jdGlvbiBVKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7byhcImVuZFJlYWRhYmxlXCIsdC5lbmRFbWl0dGVkKSx0LmVuZEVtaXR0ZWR8fCh0LmVuZGVkPSEwLGkubmV4dFRpY2socSx0LGUpKX1mdW5jdGlvbiBxKGUsdCl7aWYobyhcImVuZFJlYWRhYmxlTlRcIixlLmVuZEVtaXR0ZWQsZS5sZW5ndGgpLCFlLmVuZEVtaXR0ZWQmJjA9PT1lLmxlbmd0aCYmKGUuZW5kRW1pdHRlZD0hMCx0LnJlYWRhYmxlPSExLHQuZW1pdChcImVuZFwiKSxlLmF1dG9EZXN0cm95KSl7dmFyIHI9dC5fd3JpdGFibGVTdGF0ZTsoIXJ8fHIuYXV0b0Rlc3Ryb3kmJnIuZmluaXNoZWQpJiZ0LmRlc3Ryb3koKX19ZnVuY3Rpb24gRihlLHQpe2Zvcih2YXIgcj0wLG49ZS5sZW5ndGg7cjxuO3IrKylpZihlW3JdPT09dClyZXR1cm4gcjtyZXR1cm4tMX14LnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKGUpe28oXCJyZWFkXCIsZSksZT1wYXJzZUludChlLDEwKTt2YXIgdD10aGlzLl9yZWFkYWJsZVN0YXRlLHI9ZTtpZigwIT09ZSYmKHQuZW1pdHRlZFJlYWRhYmxlPSExKSwwPT09ZSYmdC5uZWVkUmVhZGFibGUmJigoMCE9PXQuaGlnaFdhdGVyTWFyaz90Lmxlbmd0aD49dC5oaWdoV2F0ZXJNYXJrOnQubGVuZ3RoPjApfHx0LmVuZGVkKSlyZXR1cm4gbyhcInJlYWQ6IGVtaXRSZWFkYWJsZVwiLHQubGVuZ3RoLHQuZW5kZWQpLDA9PT10Lmxlbmd0aCYmdC5lbmRlZD9VKHRoaXMpOkkodGhpcyksbnVsbDtpZigwPT09KGU9TShlLHQpKSYmdC5lbmRlZClyZXR1cm4gMD09PXQubGVuZ3RoJiZVKHRoaXMpLG51bGw7dmFyIG4saT10Lm5lZWRSZWFkYWJsZTtyZXR1cm4gbyhcIm5lZWQgcmVhZGFibGVcIixpKSwoMD09PXQubGVuZ3RofHx0Lmxlbmd0aC1lPHQuaGlnaFdhdGVyTWFyaykmJm8oXCJsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFya1wiLGk9ITApLHQuZW5kZWR8fHQucmVhZGluZz9vKFwicmVhZGluZyBvciBlbmRlZFwiLGk9ITEpOmkmJihvKFwiZG8gcmVhZFwiKSx0LnJlYWRpbmc9ITAsdC5zeW5jPSEwLDA9PT10Lmxlbmd0aCYmKHQubmVlZFJlYWRhYmxlPSEwKSx0aGlzLl9yZWFkKHQuaGlnaFdhdGVyTWFyayksdC5zeW5jPSExLHQucmVhZGluZ3x8KGU9TShyLHQpKSksbnVsbD09PShuPWU+MD9EKGUsdCk6bnVsbCk/KHQubmVlZFJlYWRhYmxlPXQubGVuZ3RoPD10LmhpZ2hXYXRlck1hcmssZT0wKToodC5sZW5ndGgtPWUsdC5hd2FpdERyYWluPTApLDA9PT10Lmxlbmd0aCYmKHQuZW5kZWR8fCh0Lm5lZWRSZWFkYWJsZT0hMCksciE9PWUmJnQuZW5kZWQmJlUodGhpcykpLG51bGwhPT1uJiZ0aGlzLmVtaXQoXCJkYXRhXCIsbiksbn0seC5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oZSl7Uyh0aGlzLG5ldyB3KFwiX3JlYWQoKVwiKSl9LHgucHJvdG90eXBlLnBpcGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49dGhpcy5fcmVhZGFibGVTdGF0ZTtzd2l0Y2gobi5waXBlc0NvdW50KXtjYXNlIDA6bi5waXBlcz1lO2JyZWFrO2Nhc2UgMTpuLnBpcGVzPVtuLnBpcGVzLGVdO2JyZWFrO2RlZmF1bHQ6bi5waXBlcy5wdXNoKGUpfW4ucGlwZXNDb3VudCs9MSxvKFwicGlwZSBjb3VudD0lZCBvcHRzPSVqXCIsbi5waXBlc0NvdW50LHQpO3ZhciBhPXQmJiExPT09dC5lbmR8fGU9PT1pLnN0ZG91dHx8ZT09PWkuc3RkZXJyP2I6YztmdW5jdGlvbiBjKCl7byhcIm9uZW5kXCIpLGUuZW5kKCl9bi5lbmRFbWl0dGVkP2kubmV4dFRpY2soYSk6ci5vbmNlKFwiZW5kXCIsYSksZS5vbihcInVucGlwZVwiLChmdW5jdGlvbiB0KGkscyl7byhcIm9udW5waXBlXCIpLGk9PT1yJiZzJiYhMT09PXMuaGFzVW5waXBlZCYmKHMuaGFzVW5waXBlZD0hMCxvKFwiY2xlYW51cFwiKSxlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixsKSxlLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIscCksZS5yZW1vdmVMaXN0ZW5lcihcImRyYWluXCIsZiksZS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsaCksZS5yZW1vdmVMaXN0ZW5lcihcInVucGlwZVwiLHQpLHIucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixjKSxyLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsYiksci5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIixkKSx1PSEwLCFuLmF3YWl0RHJhaW58fGUuX3dyaXRhYmxlU3RhdGUmJiFlLl93cml0YWJsZVN0YXRlLm5lZWREcmFpbnx8ZigpKX0pKTt2YXIgZj1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO28oXCJwaXBlT25EcmFpblwiLHQuYXdhaXREcmFpbiksdC5hd2FpdERyYWluJiZ0LmF3YWl0RHJhaW4tLSwwPT09dC5hd2FpdERyYWluJiZzKGUsXCJkYXRhXCIpJiYodC5mbG93aW5nPSEwLEwoZSkpfX0ocik7ZS5vbihcImRyYWluXCIsZik7dmFyIHU9ITE7ZnVuY3Rpb24gZCh0KXtvKFwib25kYXRhXCIpO3ZhciBpPWUud3JpdGUodCk7byhcImRlc3Qud3JpdGVcIixpKSwhMT09PWkmJigoMT09PW4ucGlwZXNDb3VudCYmbi5waXBlcz09PWV8fG4ucGlwZXNDb3VudD4xJiYtMSE9PUYobi5waXBlcyxlKSkmJiF1JiYobyhcImZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZVwiLG4uYXdhaXREcmFpbiksbi5hd2FpdERyYWluKyspLHIucGF1c2UoKSl9ZnVuY3Rpb24gaCh0KXtvKFwib25lcnJvclwiLHQpLGIoKSxlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixoKSwwPT09cyhlLFwiZXJyb3JcIikmJlMoZSx0KX1mdW5jdGlvbiBsKCl7ZS5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLHApLGIoKX1mdW5jdGlvbiBwKCl7byhcIm9uZmluaXNoXCIpLGUucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGwpLGIoKX1mdW5jdGlvbiBiKCl7byhcInVucGlwZVwiKSxyLnVucGlwZShlKX1yZXR1cm4gci5vbihcImRhdGFcIixkKSxmdW5jdGlvbihlLHQscil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5wcmVwZW5kTGlzdGVuZXIpcmV0dXJuIGUucHJlcGVuZExpc3RlbmVyKHQscik7ZS5fZXZlbnRzJiZlLl9ldmVudHMuZXJyb3I/QXJyYXkuaXNBcnJheShlLl9ldmVudHMuZXJyb3IpP2UuX2V2ZW50cy5lcnJvci51bnNoaWZ0KHIpOmUuX2V2ZW50cy5lcnJvcj1bcixlLl9ldmVudHMuZXJyb3JdOmUub24odCxyKX0oZSxcImVycm9yXCIsaCksZS5vbmNlKFwiY2xvc2VcIixsKSxlLm9uY2UoXCJmaW5pc2hcIixwKSxlLmVtaXQoXCJwaXBlXCIsciksbi5mbG93aW5nfHwobyhcInBpcGUgcmVzdW1lXCIpLHIucmVzdW1lKCkpLGV9LHgucHJvdG90eXBlLnVucGlwZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9yZWFkYWJsZVN0YXRlLHI9e2hhc1VucGlwZWQ6ITF9O2lmKDA9PT10LnBpcGVzQ291bnQpcmV0dXJuIHRoaXM7aWYoMT09PXQucGlwZXNDb3VudClyZXR1cm4gZSYmZSE9PXQucGlwZXN8fChlfHwoZT10LnBpcGVzKSx0LnBpcGVzPW51bGwsdC5waXBlc0NvdW50PTAsdC5mbG93aW5nPSExLGUmJmUuZW1pdChcInVucGlwZVwiLHRoaXMscikpLHRoaXM7aWYoIWUpe3ZhciBuPXQucGlwZXMsaT10LnBpcGVzQ291bnQ7dC5waXBlcz1udWxsLHQucGlwZXNDb3VudD0wLHQuZmxvd2luZz0hMTtmb3IodmFyIG89MDtvPGk7bysrKW5bb10uZW1pdChcInVucGlwZVwiLHRoaXMse2hhc1VucGlwZWQ6ITF9KTtyZXR1cm4gdGhpc312YXIgcz1GKHQucGlwZXMsZSk7cmV0dXJuLTE9PT1zfHwodC5waXBlcy5zcGxpY2UocywxKSx0LnBpcGVzQ291bnQtPTEsMT09PXQucGlwZXNDb3VudCYmKHQucGlwZXM9dC5waXBlc1swXSksZS5lbWl0KFwidW5waXBlXCIsdGhpcyxyKSksdGhpc30seC5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0KXt2YXIgcj1hLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsZSx0KSxuPXRoaXMuX3JlYWRhYmxlU3RhdGU7cmV0dXJuXCJkYXRhXCI9PT1lPyhuLnJlYWRhYmxlTGlzdGVuaW5nPXRoaXMubGlzdGVuZXJDb3VudChcInJlYWRhYmxlXCIpPjAsITEhPT1uLmZsb3dpbmcmJnRoaXMucmVzdW1lKCkpOlwicmVhZGFibGVcIj09PWUmJihuLmVuZEVtaXR0ZWR8fG4ucmVhZGFibGVMaXN0ZW5pbmd8fChuLnJlYWRhYmxlTGlzdGVuaW5nPW4ubmVlZFJlYWRhYmxlPSEwLG4uZmxvd2luZz0hMSxuLmVtaXR0ZWRSZWFkYWJsZT0hMSxvKFwib24gcmVhZGFibGVcIixuLmxlbmd0aCxuLnJlYWRpbmcpLG4ubGVuZ3RoP0kodGhpcyk6bi5yZWFkaW5nfHxpLm5leHRUaWNrKGosdGhpcykpKSxyfSx4LnByb3RvdHlwZS5hZGRMaXN0ZW5lcj14LnByb3RvdHlwZS5vbix4LnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciByPWEucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLmNhbGwodGhpcyxlLHQpO3JldHVyblwicmVhZGFibGVcIj09PWUmJmkubmV4dFRpY2soQyx0aGlzKSxyfSx4LnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQ9YS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm5cInJlYWRhYmxlXCIhPT1lJiZ2b2lkIDAhPT1lfHxpLm5leHRUaWNrKEMsdGhpcyksdH0seC5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gZS5mbG93aW5nfHwobyhcInJlc3VtZVwiKSxlLmZsb3dpbmc9IWUucmVhZGFibGVMaXN0ZW5pbmcsZnVuY3Rpb24oZSx0KXt0LnJlc3VtZVNjaGVkdWxlZHx8KHQucmVzdW1lU2NoZWR1bGVkPSEwLGkubmV4dFRpY2soQixlLHQpKX0odGhpcyxlKSksZS5wYXVzZWQ9ITEsdGhpc30seC5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXtyZXR1cm4gbyhcImNhbGwgcGF1c2UgZmxvd2luZz0lalwiLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyksITEhPT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcmJihvKFwicGF1c2VcIiksdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPSExLHRoaXMuZW1pdChcInBhdXNlXCIpKSx0aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZD0hMCx0aGlzfSx4LnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzLl9yZWFkYWJsZVN0YXRlLG49ITE7Zm9yKHZhciBpIGluIGUub24oXCJlbmRcIiwoZnVuY3Rpb24oKXtpZihvKFwid3JhcHBlZCBlbmRcIiksci5kZWNvZGVyJiYhci5lbmRlZCl7dmFyIGU9ci5kZWNvZGVyLmVuZCgpO2UmJmUubGVuZ3RoJiZ0LnB1c2goZSl9dC5wdXNoKG51bGwpfSkpLGUub24oXCJkYXRhXCIsKGZ1bmN0aW9uKGkpe28oXCJ3cmFwcGVkIGRhdGFcIiksci5kZWNvZGVyJiYoaT1yLmRlY29kZXIud3JpdGUoaSkpLHIub2JqZWN0TW9kZSYmbnVsbD09aXx8KHIub2JqZWN0TW9kZXx8aSYmaS5sZW5ndGgpJiYodC5wdXNoKGkpfHwobj0hMCxlLnBhdXNlKCkpKX0pKSxlKXZvaWQgMD09PXRoaXNbaV0mJlwiZnVuY3Rpb25cIj09dHlwZW9mIGVbaV0mJih0aGlzW2ldPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlW3RdLmFwcGx5KGUsYXJndW1lbnRzKX19KGkpKTtmb3IodmFyIHM9MDtzPEUubGVuZ3RoO3MrKyllLm9uKEVbc10sdGhpcy5lbWl0LmJpbmQodGhpcyxFW3NdKSk7cmV0dXJuIHRoaXMuX3JlYWQ9ZnVuY3Rpb24odCl7byhcIndyYXBwZWQgX3JlYWRcIix0KSxuJiYobj0hMSxlLnJlc3VtZSgpKX0sdGhpc30sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoeC5wcm90b3R5cGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PWgmJihoPXIoNTg1MCkpLGgodGhpcyl9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoeC5wcm90b3R5cGUsXCJyZWFkYWJsZUhpZ2hXYXRlck1hcmtcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh4LnByb3RvdHlwZSxcInJlYWRhYmxlQnVmZmVyXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUmJnRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh4LnByb3RvdHlwZSxcInJlYWRhYmxlRmxvd2luZ1wiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmd9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPWUpfX0pLHguX2Zyb21MaXN0PUQsT2JqZWN0LmRlZmluZVByb3BlcnR5KHgucHJvdG90eXBlLFwicmVhZGFibGVMZW5ndGhcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5sZW5ndGh9fSksXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoeC5mcm9tPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PWwmJihsPXIoNTE2NykpLGwoeCxlLHQpfSl9LDQ2MDU6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz11O3ZhciBuPXIoNDI4MSkucSxpPW4uRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsbz1uLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxzPW4uRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyxhPW4uRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wLGM9cig2NzUzKTtmdW5jdGlvbiBmKGUsdCl7dmFyIHI9dGhpcy5fdHJhbnNmb3JtU3RhdGU7ci50cmFuc2Zvcm1pbmc9ITE7dmFyIG49ci53cml0ZWNiO2lmKG51bGw9PT1uKXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBvKTtyLndyaXRlY2h1bms9bnVsbCxyLndyaXRlY2I9bnVsbCxudWxsIT10JiZ0aGlzLnB1c2godCksbihlKTt2YXIgaT10aGlzLl9yZWFkYWJsZVN0YXRlO2kucmVhZGluZz0hMSwoaS5uZWVkUmVhZGFibGV8fGkubGVuZ3RoPGkuaGlnaFdhdGVyTWFyaykmJnRoaXMuX3JlYWQoaS5oaWdoV2F0ZXJNYXJrKX1mdW5jdGlvbiB1KGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHUpKXJldHVybiBuZXcgdShlKTtjLmNhbGwodGhpcyxlKSx0aGlzLl90cmFuc2Zvcm1TdGF0ZT17YWZ0ZXJUcmFuc2Zvcm06Zi5iaW5kKHRoaXMpLG5lZWRUcmFuc2Zvcm06ITEsdHJhbnNmb3JtaW5nOiExLHdyaXRlY2I6bnVsbCx3cml0ZWNodW5rOm51bGwsd3JpdGVlbmNvZGluZzpudWxsfSx0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZT0hMCx0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmM9ITEsZSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudHJhbnNmb3JtJiYodGhpcy5fdHJhbnNmb3JtPWUudHJhbnNmb3JtKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmZsdXNoJiYodGhpcy5fZmx1c2g9ZS5mbHVzaCkpLHRoaXMub24oXCJwcmVmaW5pc2hcIixkKX1mdW5jdGlvbiBkKCl7dmFyIGU9dGhpcztcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzLl9mbHVzaHx8dGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ/aCh0aGlzLG51bGwsbnVsbCk6dGhpcy5fZmx1c2goKGZ1bmN0aW9uKHQscil7aChlLHQscil9KSl9ZnVuY3Rpb24gaChlLHQscil7aWYodClyZXR1cm4gZS5lbWl0KFwiZXJyb3JcIix0KTtpZihudWxsIT1yJiZlLnB1c2gociksZS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpdGhyb3cgbmV3IGE7aWYoZS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKXRocm93IG5ldyBzO3JldHVybiBlLnB1c2gobnVsbCl9cig1NzE3KSh1LGMpLHUucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybT0hMSxjLnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcyxlLHQpfSx1LnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKGUsdCxyKXtyKG5ldyBpKFwiX3RyYW5zZm9ybSgpXCIpKX0sdS5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzLl90cmFuc2Zvcm1TdGF0ZTtpZihuLndyaXRlY2I9cixuLndyaXRlY2h1bms9ZSxuLndyaXRlZW5jb2Rpbmc9dCwhbi50cmFuc2Zvcm1pbmcpe3ZhciBpPXRoaXMuX3JlYWRhYmxlU3RhdGU7KG4ubmVlZFRyYW5zZm9ybXx8aS5uZWVkUmVhZGFibGV8fGkubGVuZ3RoPGkuaGlnaFdhdGVyTWFyaykmJnRoaXMuX3JlYWQoaS5oaWdoV2F0ZXJNYXJrKX19LHUucHJvdG90eXBlLl9yZWFkPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX3RyYW5zZm9ybVN0YXRlO251bGw9PT10LndyaXRlY2h1bmt8fHQudHJhbnNmb3JtaW5nP3QubmVlZFRyYW5zZm9ybT0hMDoodC50cmFuc2Zvcm1pbmc9ITAsdGhpcy5fdHJhbnNmb3JtKHQud3JpdGVjaHVuayx0LndyaXRlZW5jb2RpbmcsdC5hZnRlclRyYW5zZm9ybSkpfSx1LnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbihlLHQpe2MucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcyxlLChmdW5jdGlvbihlKXt0KGUpfSkpfX0sNDIyOTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT1yKDQxNTUpO2Z1bmN0aW9uIG8oZSl7dmFyIHQ9dGhpczt0aGlzLm5leHQ9bnVsbCx0aGlzLmVudHJ5PW51bGwsdGhpcy5maW5pc2g9ZnVuY3Rpb24oKXshZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUuZW50cnk7Zm9yKGUuZW50cnk9bnVsbDtuOyl7dmFyIGk9bi5jYWxsYmFjazt0LnBlbmRpbmdjYi0tLGkodW5kZWZpbmVkKSxuPW4ubmV4dH10LmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0PWV9KHQsZSl9fWUuZXhwb3J0cz14LHguV3JpdGFibGVTdGF0ZT1BO3ZhciBzLGE9e2RlcHJlY2F0ZTpyKDQ5MjcpfSxjPXIoMjUwMyksZj1yKDg3NjQpLkJ1ZmZlcix1PXIuZy5VaW50OEFycmF5fHxmdW5jdGlvbigpe30sZD1yKDExOTUpLGg9cigyNDU3KS5nZXRIaWdoV2F0ZXJNYXJrLGw9cig0MjgxKS5xLHA9bC5FUlJfSU5WQUxJRF9BUkdfVFlQRSxiPWwuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQseT1sLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxnPWwuRVJSX1NUUkVBTV9DQU5OT1RfUElQRSxtPWwuRVJSX1NUUkVBTV9ERVNUUk9ZRUQsdj1sLkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMsdz1sLkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5ELF89bC5FUlJfVU5LTk9XTl9FTkNPRElORyxTPWQuZXJyb3JPckRlc3Ryb3k7ZnVuY3Rpb24gRSgpe31mdW5jdGlvbiBBKGUsdCxzKXtuPW58fHIoNjc1MyksZT1lfHx7fSxcImJvb2xlYW5cIiE9dHlwZW9mIHMmJihzPXQgaW5zdGFuY2VvZiBuKSx0aGlzLm9iamVjdE1vZGU9ISFlLm9iamVjdE1vZGUscyYmKHRoaXMub2JqZWN0TW9kZT10aGlzLm9iamVjdE1vZGV8fCEhZS53cml0YWJsZU9iamVjdE1vZGUpLHRoaXMuaGlnaFdhdGVyTWFyaz1oKHRoaXMsZSxcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLHMpLHRoaXMuZmluYWxDYWxsZWQ9ITEsdGhpcy5uZWVkRHJhaW49ITEsdGhpcy5lbmRpbmc9ITEsdGhpcy5lbmRlZD0hMSx0aGlzLmZpbmlzaGVkPSExLHRoaXMuZGVzdHJveWVkPSExO3ZhciBhPSExPT09ZS5kZWNvZGVTdHJpbmdzO3RoaXMuZGVjb2RlU3RyaW5ncz0hYSx0aGlzLmRlZmF1bHRFbmNvZGluZz1lLmRlZmF1bHRFbmNvZGluZ3x8XCJ1dGY4XCIsdGhpcy5sZW5ndGg9MCx0aGlzLndyaXRpbmc9ITEsdGhpcy5jb3JrZWQ9MCx0aGlzLnN5bmM9ITAsdGhpcy5idWZmZXJQcm9jZXNzaW5nPSExLHRoaXMub253cml0ZT1mdW5jdGlvbihlKXshZnVuY3Rpb24oZSx0KXt2YXIgcj1lLl93cml0YWJsZVN0YXRlLG49ci5zeW5jLG89ci53cml0ZWNiO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG8pdGhyb3cgbmV3IHk7aWYoZnVuY3Rpb24oZSl7ZS53cml0aW5nPSExLGUud3JpdGVjYj1udWxsLGUubGVuZ3RoLT1lLndyaXRlbGVuLGUud3JpdGVsZW49MH0ociksdCkhZnVuY3Rpb24oZSx0LHIsbixvKXstLXQucGVuZGluZ2NiLHI/KGkubmV4dFRpY2sobyxuKSxpLm5leHRUaWNrKFQsZSx0KSxlLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMCxTKGUsbikpOihvKG4pLGUuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLFMoZSxuKSxUKGUsdCkpfShlLHIsbix0LG8pO2Vsc2V7dmFyIHM9TShyKXx8ZS5kZXN0cm95ZWQ7c3x8ci5jb3JrZWR8fHIuYnVmZmVyUHJvY2Vzc2luZ3x8IXIuYnVmZmVyZWRSZXF1ZXN0fHxPKGUsciksbj9pLm5leHRUaWNrKFAsZSxyLHMsbyk6UChlLHIscyxvKX19KHQsZSl9LHRoaXMud3JpdGVjYj1udWxsLHRoaXMud3JpdGVsZW49MCx0aGlzLmJ1ZmZlcmVkUmVxdWVzdD1udWxsLHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsLHRoaXMucGVuZGluZ2NiPTAsdGhpcy5wcmVmaW5pc2hlZD0hMSx0aGlzLmVycm9yRW1pdHRlZD0hMSx0aGlzLmVtaXRDbG9zZT0hMSE9PWUuZW1pdENsb3NlLHRoaXMuYXV0b0Rlc3Ryb3k9ISFlLmF1dG9EZXN0cm95LHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQ9MCx0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZT1uZXcgbyh0aGlzKX1mdW5jdGlvbiB4KGUpe3ZhciB0PXRoaXMgaW5zdGFuY2VvZihuPW58fHIoNjc1MykpO2lmKCF0JiYhcy5jYWxsKHgsdGhpcykpcmV0dXJuIG5ldyB4KGUpO3RoaXMuX3dyaXRhYmxlU3RhdGU9bmV3IEEoZSx0aGlzLHQpLHRoaXMud3JpdGFibGU9ITAsZSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUud3JpdGUmJih0aGlzLl93cml0ZT1lLndyaXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLndyaXRldiYmKHRoaXMuX3dyaXRldj1lLndyaXRldiksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5kZXN0cm95JiYodGhpcy5fZGVzdHJveT1lLmRlc3Ryb3kpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZmluYWwmJih0aGlzLl9maW5hbD1lLmZpbmFsKSksYy5jYWxsKHRoaXMpfWZ1bmN0aW9uIGsoZSx0LHIsbixpLG8scyl7dC53cml0ZWxlbj1uLHQud3JpdGVjYj1zLHQud3JpdGluZz0hMCx0LnN5bmM9ITAsdC5kZXN0cm95ZWQ/dC5vbndyaXRlKG5ldyBtKFwid3JpdGVcIikpOnI/ZS5fd3JpdGV2KGksdC5vbndyaXRlKTplLl93cml0ZShpLG8sdC5vbndyaXRlKSx0LnN5bmM9ITF9ZnVuY3Rpb24gUChlLHQscixuKXtyfHxmdW5jdGlvbihlLHQpezA9PT10Lmxlbmd0aCYmdC5uZWVkRHJhaW4mJih0Lm5lZWREcmFpbj0hMSxlLmVtaXQoXCJkcmFpblwiKSl9KGUsdCksdC5wZW5kaW5nY2ItLSxuKCksVChlLHQpfWZ1bmN0aW9uIE8oZSx0KXt0LmJ1ZmZlclByb2Nlc3Npbmc9ITA7dmFyIHI9dC5idWZmZXJlZFJlcXVlc3Q7aWYoZS5fd3JpdGV2JiZyJiZyLm5leHQpe3ZhciBuPXQuYnVmZmVyZWRSZXF1ZXN0Q291bnQsaT1uZXcgQXJyYXkobikscz10LmNvcmtlZFJlcXVlc3RzRnJlZTtzLmVudHJ5PXI7Zm9yKHZhciBhPTAsYz0hMDtyOylpW2FdPXIsci5pc0J1Znx8KGM9ITEpLHI9ci5uZXh0LGErPTE7aS5hbGxCdWZmZXJzPWMsayhlLHQsITAsdC5sZW5ndGgsaSxcIlwiLHMuZmluaXNoKSx0LnBlbmRpbmdjYisrLHQubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsLHMubmV4dD8odC5jb3JrZWRSZXF1ZXN0c0ZyZWU9cy5uZXh0LHMubmV4dD1udWxsKTp0LmNvcmtlZFJlcXVlc3RzRnJlZT1uZXcgbyh0KSx0LmJ1ZmZlcmVkUmVxdWVzdENvdW50PTB9ZWxzZXtmb3IoO3I7KXt2YXIgZj1yLmNodW5rLHU9ci5lbmNvZGluZyxkPXIuY2FsbGJhY2s7aWYoayhlLHQsITEsdC5vYmplY3RNb2RlPzE6Zi5sZW5ndGgsZix1LGQpLHI9ci5uZXh0LHQuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLSx0LndyaXRpbmcpYnJlYWt9bnVsbD09PXImJih0Lmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCl9dC5idWZmZXJlZFJlcXVlc3Q9cix0LmJ1ZmZlclByb2Nlc3Npbmc9ITF9ZnVuY3Rpb24gTShlKXtyZXR1cm4gZS5lbmRpbmcmJjA9PT1lLmxlbmd0aCYmbnVsbD09PWUuYnVmZmVyZWRSZXF1ZXN0JiYhZS5maW5pc2hlZCYmIWUud3JpdGluZ31mdW5jdGlvbiBJKGUsdCl7ZS5fZmluYWwoKGZ1bmN0aW9uKHIpe3QucGVuZGluZ2NiLS0sciYmUyhlLHIpLHQucHJlZmluaXNoZWQ9ITAsZS5lbWl0KFwicHJlZmluaXNoXCIpLFQoZSx0KX0pKX1mdW5jdGlvbiBUKGUsdCl7dmFyIHI9TSh0KTtpZihyJiYoZnVuY3Rpb24oZSx0KXt0LnByZWZpbmlzaGVkfHx0LmZpbmFsQ2FsbGVkfHwoXCJmdW5jdGlvblwiIT10eXBlb2YgZS5fZmluYWx8fHQuZGVzdHJveWVkPyh0LnByZWZpbmlzaGVkPSEwLGUuZW1pdChcInByZWZpbmlzaFwiKSk6KHQucGVuZGluZ2NiKyssdC5maW5hbENhbGxlZD0hMCxpLm5leHRUaWNrKEksZSx0KSkpfShlLHQpLDA9PT10LnBlbmRpbmdjYiYmKHQuZmluaXNoZWQ9ITAsZS5lbWl0KFwiZmluaXNoXCIpLHQuYXV0b0Rlc3Ryb3kpKSl7dmFyIG49ZS5fcmVhZGFibGVTdGF0ZTsoIW58fG4uYXV0b0Rlc3Ryb3kmJm4uZW5kRW1pdHRlZCkmJmUuZGVzdHJveSgpfXJldHVybiByfXIoNTcxNykoeCxjKSxBLnByb3RvdHlwZS5nZXRCdWZmZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5idWZmZXJlZFJlcXVlc3QsdD1bXTtlOyl0LnB1c2goZSksZT1lLm5leHQ7cmV0dXJuIHR9LGZ1bmN0aW9uKCl7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShBLnByb3RvdHlwZSxcImJ1ZmZlclwiLHtnZXQ6YS5kZXByZWNhdGUoKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCl9KSxcIl93cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyIGluc3RlYWQuXCIsXCJERVAwMDAzXCIpfSl9Y2F0Y2goZSl7fX0oKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5oYXNJbnN0YW5jZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0/KHM9RnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHgsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4hIXMuY2FsbCh0aGlzLGUpfHx0aGlzPT09eCYmZSYmZS5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIEF9fSkpOnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0aGlzfSx4LnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKCl7Uyh0aGlzLG5ldyBnKX0seC5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLG89dGhpcy5fd3JpdGFibGVTdGF0ZSxzPSExLGE9IW8ub2JqZWN0TW9kZSYmKG49ZSxmLmlzQnVmZmVyKG4pfHxuIGluc3RhbmNlb2YgdSk7cmV0dXJuIGEmJiFmLmlzQnVmZmVyKGUpJiYoZT1mdW5jdGlvbihlKXtyZXR1cm4gZi5mcm9tKGUpfShlKSksXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHI9dCx0PW51bGwpLGE/dD1cImJ1ZmZlclwiOnR8fCh0PW8uZGVmYXVsdEVuY29kaW5nKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiByJiYocj1FKSxvLmVuZGluZz9mdW5jdGlvbihlLHQpe3ZhciByPW5ldyB3O1MoZSxyKSxpLm5leHRUaWNrKHQscil9KHRoaXMscik6KGF8fGZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBvO3JldHVybiBudWxsPT09cj9vPW5ldyB2Olwic3RyaW5nXCI9PXR5cGVvZiByfHx0Lm9iamVjdE1vZGV8fChvPW5ldyBwKFwiY2h1bmtcIixbXCJzdHJpbmdcIixcIkJ1ZmZlclwiXSxyKSksIW98fChTKGUsbyksaS5uZXh0VGljayhuLG8pLCExKX0odGhpcyxvLGUscikpJiYoby5wZW5kaW5nY2IrKyxzPWZ1bmN0aW9uKGUsdCxyLG4saSxvKXtpZighcil7dmFyIHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlLm9iamVjdE1vZGV8fCExPT09ZS5kZWNvZGVTdHJpbmdzfHxcInN0cmluZ1wiIT10eXBlb2YgdHx8KHQ9Zi5mcm9tKHQscikpLHR9KHQsbixpKTtuIT09cyYmKHI9ITAsaT1cImJ1ZmZlclwiLG49cyl9dmFyIGE9dC5vYmplY3RNb2RlPzE6bi5sZW5ndGg7dC5sZW5ndGgrPWE7dmFyIGM9dC5sZW5ndGg8dC5oaWdoV2F0ZXJNYXJrO2lmKGN8fCh0Lm5lZWREcmFpbj0hMCksdC53cml0aW5nfHx0LmNvcmtlZCl7dmFyIHU9dC5sYXN0QnVmZmVyZWRSZXF1ZXN0O3QubGFzdEJ1ZmZlcmVkUmVxdWVzdD17Y2h1bms6bixlbmNvZGluZzppLGlzQnVmOnIsY2FsbGJhY2s6byxuZXh0Om51bGx9LHU/dS5uZXh0PXQubGFzdEJ1ZmZlcmVkUmVxdWVzdDp0LmJ1ZmZlcmVkUmVxdWVzdD10Lmxhc3RCdWZmZXJlZFJlcXVlc3QsdC5idWZmZXJlZFJlcXVlc3RDb3VudCs9MX1lbHNlIGsoZSx0LCExLGEsbixpLG8pO3JldHVybiBjfSh0aGlzLG8sYSxlLHQscikpLHN9LHgucHJvdG90eXBlLmNvcms9ZnVuY3Rpb24oKXt0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrfSx4LnByb3RvdHlwZS51bmNvcms9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl93cml0YWJsZVN0YXRlO2UuY29ya2VkJiYoZS5jb3JrZWQtLSxlLndyaXRpbmd8fGUuY29ya2VkfHxlLmJ1ZmZlclByb2Nlc3Npbmd8fCFlLmJ1ZmZlcmVkUmVxdWVzdHx8Tyh0aGlzLGUpKX0seC5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1lLnRvTG93ZXJDYXNlKCkpLCEoW1wiaGV4XCIsXCJ1dGY4XCIsXCJ1dGYtOFwiLFwiYXNjaWlcIixcImJpbmFyeVwiLFwiYmFzZTY0XCIsXCJ1Y3MyXCIsXCJ1Y3MtMlwiLFwidXRmMTZsZVwiLFwidXRmLTE2bGVcIixcInJhd1wiXS5pbmRleE9mKChlK1wiXCIpLnRvTG93ZXJDYXNlKCkpPi0xKSl0aHJvdyBuZXcgXyhlKTtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2Rpbmc9ZSx0aGlzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoeC5wcm90b3R5cGUsXCJ3cml0YWJsZUJ1ZmZlclwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh4LnByb3RvdHlwZSxcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSkseC5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKGUsdCxyKXtyKG5ldyBiKFwiX3dyaXRlKClcIikpfSx4LnByb3RvdHlwZS5fd3JpdGV2PW51bGwseC5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzLl93cml0YWJsZVN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGU/KHI9ZSxlPW51bGwsdD1udWxsKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYocj10LHQ9bnVsbCksbnVsbCE9ZSYmdGhpcy53cml0ZShlLHQpLG4uY29ya2VkJiYobi5jb3JrZWQ9MSx0aGlzLnVuY29yaygpKSxuLmVuZGluZ3x8ZnVuY3Rpb24oZSx0LHIpe3QuZW5kaW5nPSEwLFQoZSx0KSxyJiYodC5maW5pc2hlZD9pLm5leHRUaWNrKHIpOmUub25jZShcImZpbmlzaFwiLHIpKSx0LmVuZGVkPSEwLGUud3JpdGFibGU9ITF9KHRoaXMsbixyKSx0aGlzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoeC5wcm90b3R5cGUsXCJ3cml0YWJsZUxlbmd0aFwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmxlbmd0aH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoeC5wcm90b3R5cGUsXCJkZXN0cm95ZWRcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fd3JpdGFibGVTdGF0ZSYmdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9ZSl9fSkseC5wcm90b3R5cGUuZGVzdHJveT1kLmRlc3Ryb3kseC5wcm90b3R5cGUuX3VuZGVzdHJveT1kLnVuZGVzdHJveSx4LnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbihlLHQpe3QoZSl9fSw1ODUwOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbixpPXIoNDE1NSk7ZnVuY3Rpb24gbyhlLHQscil7cmV0dXJuIHQgaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1yLGV9dmFyIHM9cig4NjEwKSxhPVN5bWJvbChcImxhc3RSZXNvbHZlXCIpLGM9U3ltYm9sKFwibGFzdFJlamVjdFwiKSxmPVN5bWJvbChcImVycm9yXCIpLHU9U3ltYm9sKFwiZW5kZWRcIiksZD1TeW1ib2woXCJsYXN0UHJvbWlzZVwiKSxoPVN5bWJvbChcImhhbmRsZVByb21pc2VcIiksbD1TeW1ib2woXCJzdHJlYW1cIik7ZnVuY3Rpb24gcChlLHQpe3JldHVybnt2YWx1ZTplLGRvbmU6dH19ZnVuY3Rpb24gYihlKXt2YXIgdD1lW2FdO2lmKG51bGwhPT10KXt2YXIgcj1lW2xdLnJlYWQoKTtudWxsIT09ciYmKGVbZF09bnVsbCxlW2FdPW51bGwsZVtjXT1udWxsLHQocChyLCExKSkpfX1mdW5jdGlvbiB5KGUpe2kubmV4dFRpY2soYixlKX12YXIgZz1PYmplY3QuZ2V0UHJvdG90eXBlT2YoKGZ1bmN0aW9uKCl7fSkpLG09T2JqZWN0LnNldFByb3RvdHlwZU9mKChvKG49e2dldCBzdHJlYW0oKXtyZXR1cm4gdGhpc1tsXX0sbmV4dDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzW2ZdO2lmKG51bGwhPT10KXJldHVybiBQcm9taXNlLnJlamVjdCh0KTtpZih0aGlzW3VdKXJldHVybiBQcm9taXNlLnJlc29sdmUocCh2b2lkIDAsITApKTtpZih0aGlzW2xdLmRlc3Ryb3llZClyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQscil7aS5uZXh0VGljaygoZnVuY3Rpb24oKXtlW2ZdP3IoZVtmXSk6dChwKHZvaWQgMCwhMCkpfSkpfSkpO3ZhciByLG49dGhpc1tkXTtpZihuKXI9bmV3IFByb21pc2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24ocixuKXtlLnRoZW4oKGZ1bmN0aW9uKCl7dFt1XT9yKHAodm9pZCAwLCEwKSk6dFtoXShyLG4pfSksbil9fShuLHRoaXMpKTtlbHNle3ZhciBvPXRoaXNbbF0ucmVhZCgpO2lmKG51bGwhPT1vKXJldHVybiBQcm9taXNlLnJlc29sdmUocChvLCExKSk7cj1uZXcgUHJvbWlzZSh0aGlzW2hdKX1yZXR1cm4gdGhpc1tkXT1yLHJ9fSxTeW1ib2wuYXN5bmNJdGVyYXRvciwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pKSxvKG4sXCJyZXR1cm5cIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxyKXtlW2xdLmRlc3Ryb3kobnVsbCwoZnVuY3Rpb24oZSl7ZT9yKGUpOnQocCh2b2lkIDAsITApKX0pKX0pKX0pKSxuKSxnKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQscj1PYmplY3QuY3JlYXRlKG0sKG8odD17fSxsLHt2YWx1ZTplLHdyaXRhYmxlOiEwfSksbyh0LGEse3ZhbHVlOm51bGwsd3JpdGFibGU6ITB9KSxvKHQsYyx7dmFsdWU6bnVsbCx3cml0YWJsZTohMH0pLG8odCxmLHt2YWx1ZTpudWxsLHdyaXRhYmxlOiEwfSksbyh0LHUse3ZhbHVlOmUuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCx3cml0YWJsZTohMH0pLG8odCxoLHt2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXJbbF0ucmVhZCgpO24/KHJbZF09bnVsbCxyW2FdPW51bGwscltjXT1udWxsLGUocChuLCExKSkpOihyW2FdPWUscltjXT10KX0sd3JpdGFibGU6ITB9KSx0KSk7cmV0dXJuIHJbZF09bnVsbCxzKGUsKGZ1bmN0aW9uKGUpe2lmKGUmJlwiRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0VcIiE9PWUuY29kZSl7dmFyIHQ9cltjXTtyZXR1cm4gbnVsbCE9PXQmJihyW2RdPW51bGwsclthXT1udWxsLHJbY109bnVsbCx0KGUpKSx2b2lkKHJbZl09ZSl9dmFyIG49clthXTtudWxsIT09biYmKHJbZF09bnVsbCxyW2FdPW51bGwscltjXT1udWxsLG4ocCh2b2lkIDAsITApKSksclt1XT0hMH0pKSxlLm9uKFwicmVhZGFibGVcIix5LmJpbmQobnVsbCxyKSkscn19LDczMjc6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXt2YXIgcj1PYmplY3Qua2V5cyhlKTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO3QmJihuPW4uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KSkpLHIucHVzaC5hcHBseShyLG4pfXJldHVybiByfWZ1bmN0aW9uIGkoZSx0LHIpe3JldHVybiB0IGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09cixlfWZ1bmN0aW9uIG8oZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXZhciBzPXIoODc2NCkuQnVmZmVyLGE9cigyMzYxKS5pbnNwZWN0LGM9YSYmYS5jdXN0b218fFwiaW5zcGVjdFwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuaGVhZD1udWxsLHRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9dmFyIHQscjtyZXR1cm4gdD1lLHI9W3trZXk6XCJwdXNoXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9e2RhdGE6ZSxuZXh0Om51bGx9O3RoaXMubGVuZ3RoPjA/dGhpcy50YWlsLm5leHQ9dDp0aGlzLmhlYWQ9dCx0aGlzLnRhaWw9dCwrK3RoaXMubGVuZ3RofX0se2tleTpcInVuc2hpZnRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17ZGF0YTplLG5leHQ6dGhpcy5oZWFkfTswPT09dGhpcy5sZW5ndGgmJih0aGlzLnRhaWw9dCksdGhpcy5oZWFkPXQsKyt0aGlzLmxlbmd0aH19LHtrZXk6XCJzaGlmdFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoMCE9PXRoaXMubGVuZ3RoKXt2YXIgZT10aGlzLmhlYWQuZGF0YTtyZXR1cm4gMT09PXRoaXMubGVuZ3RoP3RoaXMuaGVhZD10aGlzLnRhaWw9bnVsbDp0aGlzLmhlYWQ9dGhpcy5oZWFkLm5leHQsLS10aGlzLmxlbmd0aCxlfX19LHtrZXk6XCJjbGVhclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9fSx7a2V5Olwiam9pblwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm5cIlwiO2Zvcih2YXIgdD10aGlzLmhlYWQscj1cIlwiK3QuZGF0YTt0PXQubmV4dDspcis9ZSt0LmRhdGE7cmV0dXJuIHJ9fSx7a2V5OlwiY29uY2F0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoMD09PXRoaXMubGVuZ3RoKXJldHVybiBzLmFsbG9jKDApO2Zvcih2YXIgdCxyLG4saT1zLmFsbG9jVW5zYWZlKGU+Pj4wKSxvPXRoaXMuaGVhZCxhPTA7bzspdD1vLmRhdGEscj1pLG49YSxzLnByb3RvdHlwZS5jb3B5LmNhbGwodCxyLG4pLGErPW8uZGF0YS5sZW5ndGgsbz1vLm5leHQ7cmV0dXJuIGl9fSx7a2V5OlwiY29uc3VtZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIGU8dGhpcy5oZWFkLmRhdGEubGVuZ3RoPyhyPXRoaXMuaGVhZC5kYXRhLnNsaWNlKDAsZSksdGhpcy5oZWFkLmRhdGE9dGhpcy5oZWFkLmRhdGEuc2xpY2UoZSkpOnI9ZT09PXRoaXMuaGVhZC5kYXRhLmxlbmd0aD90aGlzLnNoaWZ0KCk6dD90aGlzLl9nZXRTdHJpbmcoZSk6dGhpcy5fZ2V0QnVmZmVyKGUpLHJ9fSx7a2V5OlwiZmlyc3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhlYWQuZGF0YX19LHtrZXk6XCJfZ2V0U3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5oZWFkLHI9MSxuPXQuZGF0YTtmb3IoZS09bi5sZW5ndGg7dD10Lm5leHQ7KXt2YXIgaT10LmRhdGEsbz1lPmkubGVuZ3RoP2kubGVuZ3RoOmU7aWYobz09PWkubGVuZ3RoP24rPWk6bis9aS5zbGljZSgwLGUpLDA9PShlLT1vKSl7bz09PWkubGVuZ3RoPygrK3IsdC5uZXh0P3RoaXMuaGVhZD10Lm5leHQ6dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsKToodGhpcy5oZWFkPXQsdC5kYXRhPWkuc2xpY2UobykpO2JyZWFrfSsrcn1yZXR1cm4gdGhpcy5sZW5ndGgtPXIsbn19LHtrZXk6XCJfZ2V0QnVmZmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9cy5hbGxvY1Vuc2FmZShlKSxyPXRoaXMuaGVhZCxuPTE7Zm9yKHIuZGF0YS5jb3B5KHQpLGUtPXIuZGF0YS5sZW5ndGg7cj1yLm5leHQ7KXt2YXIgaT1yLmRhdGEsbz1lPmkubGVuZ3RoP2kubGVuZ3RoOmU7aWYoaS5jb3B5KHQsdC5sZW5ndGgtZSwwLG8pLDA9PShlLT1vKSl7bz09PWkubGVuZ3RoPygrK24sci5uZXh0P3RoaXMuaGVhZD1yLm5leHQ6dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsKToodGhpcy5oZWFkPXIsci5kYXRhPWkuc2xpY2UobykpO2JyZWFrfSsrbn1yZXR1cm4gdGhpcy5sZW5ndGgtPW4sdH19LHtrZXk6Yyx2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiBhKHRoaXMsZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIHI9bnVsbCE9YXJndW1lbnRzW3RdP2FyZ3VtZW50c1t0XTp7fTt0JTI/bihPYmplY3QociksITApLmZvckVhY2goKGZ1bmN0aW9uKHQpe2koZSx0LHJbdF0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocikpOm4oT2JqZWN0KHIpKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KSl9KSl9cmV0dXJuIGV9KHt9LHQse2RlcHRoOjAsY3VzdG9tSW5zcGVjdDohMX0pKX19XSxyJiZvKHQucHJvdG90eXBlLHIpLGV9KCl9LDExOTU6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDE1NSk7ZnVuY3Rpb24gaShlLHQpe3MoZSx0KSxvKGUpfWZ1bmN0aW9uIG8oZSl7ZS5fd3JpdGFibGVTdGF0ZSYmIWUuX3dyaXRhYmxlU3RhdGUuZW1pdENsb3NlfHxlLl9yZWFkYWJsZVN0YXRlJiYhZS5fcmVhZGFibGVTdGF0ZS5lbWl0Q2xvc2V8fGUuZW1pdChcImNsb3NlXCIpfWZ1bmN0aW9uIHMoZSx0KXtlLmVtaXQoXCJlcnJvclwiLHQpfWUuZXhwb3J0cz17ZGVzdHJveTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsYT10aGlzLl9yZWFkYWJsZVN0YXRlJiZ0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCxjPXRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO3JldHVybiBhfHxjPyh0P3QoZSk6ZSYmKHRoaXMuX3dyaXRhYmxlU3RhdGU/dGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWR8fCh0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMCxuLm5leHRUaWNrKHMsdGhpcyxlKSk6bi5uZXh0VGljayhzLHRoaXMsZSkpLHRoaXMpOih0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9ITApLHRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD0hMCksdGhpcy5fZGVzdHJveShlfHxudWxsLChmdW5jdGlvbihlKXshdCYmZT9yLl93cml0YWJsZVN0YXRlP3IuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkP24ubmV4dFRpY2sobyxyKTooci5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQ9ITAsbi5uZXh0VGljayhpLHIsZSkpOm4ubmV4dFRpY2soaSxyLGUpOnQ/KG4ubmV4dFRpY2sobyxyKSx0KGUpKTpuLm5leHRUaWNrKG8scil9KSksdGhpcyl9LHVuZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD0hMSx0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmc9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZD0hMSx0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ9ITEpLHRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQ9ITEsdGhpcy5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSExKX0sZXJyb3JPckRlc3Ryb3k6ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLl9yZWFkYWJsZVN0YXRlLG49ZS5fd3JpdGFibGVTdGF0ZTtyJiZyLmF1dG9EZXN0cm95fHxuJiZuLmF1dG9EZXN0cm95P2UuZGVzdHJveSh0KTplLmVtaXQoXCJlcnJvclwiLHQpfX19LDg2MTA6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDI4MSkucS5FUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRTtmdW5jdGlvbiBpKCl7fWUuZXhwb3J0cz1mdW5jdGlvbiBlKHQscixvKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXJldHVybiBlKHQsbnVsbCxyKTtyfHwocj17fSksbz1mdW5jdGlvbihlKXt2YXIgdD0hMTtyZXR1cm4gZnVuY3Rpb24oKXtpZighdCl7dD0hMDtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShyKSxpPTA7aTxyO2krKyluW2ldPWFyZ3VtZW50c1tpXTtlLmFwcGx5KHRoaXMsbil9fX0ob3x8aSk7dmFyIHM9ci5yZWFkYWJsZXx8ITEhPT1yLnJlYWRhYmxlJiZ0LnJlYWRhYmxlLGE9ci53cml0YWJsZXx8ITEhPT1yLndyaXRhYmxlJiZ0LndyaXRhYmxlLGM9ZnVuY3Rpb24oKXt0LndyaXRhYmxlfHx1KCl9LGY9dC5fd3JpdGFibGVTdGF0ZSYmdC5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCx1PWZ1bmN0aW9uKCl7YT0hMSxmPSEwLHN8fG8uY2FsbCh0KX0sZD10Ll9yZWFkYWJsZVN0YXRlJiZ0Ll9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQsaD1mdW5jdGlvbigpe3M9ITEsZD0hMCxhfHxvLmNhbGwodCl9LGw9ZnVuY3Rpb24oZSl7by5jYWxsKHQsZSl9LHA9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gcyYmIWQ/KHQuX3JlYWRhYmxlU3RhdGUmJnQuX3JlYWRhYmxlU3RhdGUuZW5kZWR8fChlPW5ldyBuKSxvLmNhbGwodCxlKSk6YSYmIWY/KHQuX3dyaXRhYmxlU3RhdGUmJnQuX3dyaXRhYmxlU3RhdGUuZW5kZWR8fChlPW5ldyBuKSxvLmNhbGwodCxlKSk6dm9pZCAwfSxiPWZ1bmN0aW9uKCl7dC5yZXEub24oXCJmaW5pc2hcIix1KX07cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlLnNldEhlYWRlciYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5hYm9ydH0odCk/KHQub24oXCJjb21wbGV0ZVwiLHUpLHQub24oXCJhYm9ydFwiLHApLHQucmVxP2IoKTp0Lm9uKFwicmVxdWVzdFwiLGIpKTphJiYhdC5fd3JpdGFibGVTdGF0ZSYmKHQub24oXCJlbmRcIixjKSx0Lm9uKFwiY2xvc2VcIixjKSksdC5vbihcImVuZFwiLGgpLHQub24oXCJmaW5pc2hcIix1KSwhMSE9PXIuZXJyb3ImJnQub24oXCJlcnJvclwiLGwpLHQub24oXCJjbG9zZVwiLHApLGZ1bmN0aW9uKCl7dC5yZW1vdmVMaXN0ZW5lcihcImNvbXBsZXRlXCIsdSksdC5yZW1vdmVMaXN0ZW5lcihcImFib3J0XCIscCksdC5yZW1vdmVMaXN0ZW5lcihcInJlcXVlc3RcIixiKSx0LnJlcSYmdC5yZXEucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIix1KSx0LnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsYyksdC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsYyksdC5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLHUpLHQucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixoKSx0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixsKSx0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixwKX19fSw1MTY3OmU9PntlLmV4cG9ydHM9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJSZWFkYWJsZS5mcm9tIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJyb3dzZXJcIil9fSw5OTQ2OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbixpPXIoNDI4MSkucSxvPWkuRVJSX01JU1NJTkdfQVJHUyxzPWkuRVJSX1NUUkVBTV9ERVNUUk9ZRUQ7ZnVuY3Rpb24gYShlKXtpZihlKXRocm93IGV9ZnVuY3Rpb24gYyhlLHQsaSxvKXtvPWZ1bmN0aW9uKGUpe3ZhciB0PSExO3JldHVybiBmdW5jdGlvbigpe3R8fCh0PSEwLGUuYXBwbHkodm9pZCAwLGFyZ3VtZW50cykpfX0obyk7dmFyIGE9ITE7ZS5vbihcImNsb3NlXCIsKGZ1bmN0aW9uKCl7YT0hMH0pKSx2b2lkIDA9PT1uJiYobj1yKDg2MTApKSxuKGUse3JlYWRhYmxlOnQsd3JpdGFibGU6aX0sKGZ1bmN0aW9uKGUpe2lmKGUpcmV0dXJuIG8oZSk7YT0hMCxvKCl9KSk7dmFyIGM9ITE7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKCFhJiYhYylyZXR1cm4gYz0hMCxmdW5jdGlvbihlKXtyZXR1cm4gZS5zZXRIZWFkZXImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuYWJvcnR9KGUpP2UuYWJvcnQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmRlc3Ryb3k/ZS5kZXN0cm95KCk6dm9pZCBvKHR8fG5ldyBzKFwicGlwZVwiKSl9fWZ1bmN0aW9uIGYoZSl7ZSgpfWZ1bmN0aW9uIHUoZSx0KXtyZXR1cm4gZS5waXBlKHQpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIGUubGVuZ3RoP1wiZnVuY3Rpb25cIiE9dHlwZW9mIGVbZS5sZW5ndGgtMV0/YTplLnBvcCgpOmF9ZS5leHBvcnRzPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspdFtyXT1hcmd1bWVudHNbcl07dmFyIG4saT1kKHQpO2lmKEFycmF5LmlzQXJyYXkodFswXSkmJih0PXRbMF0pLHQubGVuZ3RoPDIpdGhyb3cgbmV3IG8oXCJzdHJlYW1zXCIpO3ZhciBzPXQubWFwKChmdW5jdGlvbihlLHIpe3ZhciBvPXI8dC5sZW5ndGgtMTtyZXR1cm4gYyhlLG8scj4wLChmdW5jdGlvbihlKXtufHwobj1lKSxlJiZzLmZvckVhY2goZiksb3x8KHMuZm9yRWFjaChmKSxpKG4pKX0pKX0pKTtyZXR1cm4gdC5yZWR1Y2UodSl9fSwyNDU3OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQyODEpLnEuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO2UuZXhwb3J0cz17Z2V0SGlnaFdhdGVyTWFyazpmdW5jdGlvbihlLHQscixpKXt2YXIgbz1mdW5jdGlvbihlLHQscil7cmV0dXJuIG51bGwhPWUuaGlnaFdhdGVyTWFyaz9lLmhpZ2hXYXRlck1hcms6dD9lW3JdOm51bGx9KHQsaSxyKTtpZihudWxsIT1vKXtpZighaXNGaW5pdGUobyl8fE1hdGguZmxvb3IobykhPT1vfHxvPDApdGhyb3cgbmV3IG4oaT9yOlwiaGlnaFdhdGVyTWFya1wiLG8pO3JldHVybiBNYXRoLmZsb29yKG8pfXJldHVybiBlLm9iamVjdE1vZGU/MTY6MTYzODR9fX0sMjUwMzooZSx0LHIpPT57ZS5leHBvcnRzPXIoNzE4NykuRXZlbnRFbWl0dGVyfSw4NDczOihlLHQscik9PnsodD1lLmV4cG9ydHM9cig5NDgxKSkuU3RyZWFtPXQsdC5SZWFkYWJsZT10LHQuV3JpdGFibGU9cig0MjI5KSx0LkR1cGxleD1yKDY3NTMpLHQuVHJhbnNmb3JtPXIoNDYwNSksdC5QYXNzVGhyb3VnaD1yKDI3MjUpLHQuZmluaXNoZWQ9cig4NjEwKSx0LnBpcGVsaW5lPXIoOTk0Nil9LDk3ODU6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoODc2NCkuQnVmZmVyLGk9cig1NzE3KSxvPXIoMzM0OSkscz1uZXcgQXJyYXkoMTYpLGE9WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsNyw0LDEzLDEsMTAsNiwxNSwzLDEyLDAsOSw1LDIsMTQsMTEsOCwzLDEwLDE0LDQsOSwxNSw4LDEsMiw3LDAsNiwxMywxMSw1LDEyLDEsOSwxMSwxMCwwLDgsMTIsNCwxMywzLDcsMTUsMTQsNSw2LDIsNCwwLDUsOSw3LDEyLDIsMTAsMTQsMSwzLDgsMTEsNiwxNSwxM10sYz1bNSwxNCw3LDAsOSwyLDExLDQsMTMsNiwxNSw4LDEsMTAsMywxMiw2LDExLDMsNywwLDEzLDUsMTAsMTQsMTUsOCwxMiw0LDksMSwyLDE1LDUsMSwzLDcsMTQsNiw5LDExLDgsMTIsMiwxMCwwLDQsMTMsOCw2LDQsMSwzLDExLDE1LDAsNSwxMiwyLDEzLDksNywxMCwxNCwxMiwxNSwxMCw0LDEsNSw4LDcsNiwyLDEzLDE0LDAsMyw5LDExXSxmPVsxMSwxNCwxNSwxMiw1LDgsNyw5LDExLDEzLDE0LDE1LDYsNyw5LDgsNyw2LDgsMTMsMTEsOSw3LDE1LDcsMTIsMTUsOSwxMSw3LDEzLDEyLDExLDEzLDYsNywxNCw5LDEzLDE1LDE0LDgsMTMsNiw1LDEyLDcsNSwxMSwxMiwxNCwxNSwxNCwxNSw5LDgsOSwxNCw1LDYsOCw2LDUsMTIsOSwxNSw1LDExLDYsOCwxMywxMiw1LDEyLDEzLDE0LDExLDgsNSw2XSx1PVs4LDksOSwxMSwxMywxNSwxNSw1LDcsNyw4LDExLDE0LDE0LDEyLDYsOSwxMywxNSw3LDEyLDgsOSwxMSw3LDcsMTIsNyw2LDE1LDEzLDExLDksNywxNSwxMSw4LDYsNiwxNCwxMiwxMyw1LDE0LDEzLDEzLDcsNSwxNSw1LDgsMTEsMTQsMTQsNiwxNCw2LDksMTIsOSwxMiw1LDE1LDgsOCw1LDEyLDksMTIsNSwxNCw2LDgsMTMsNiw1LDE1LDEzLDExLDExXSxkPVswLDE1MTg1MDAyNDksMTg1OTc3NTM5MywyNDAwOTU5NzA4LDI4NDA4NTM4MzhdLGg9WzEzNTI4Mjk5MjYsMTU0ODYwMzY4NCwxODM2MDcyNjkxLDIwNTM5OTQyMTcsMF07ZnVuY3Rpb24gbCgpe28uY2FsbCh0aGlzLDY0KSx0aGlzLl9hPTE3MzI1ODQxOTMsdGhpcy5fYj00MDIzMjMzNDE3LHRoaXMuX2M9MjU2MjM4MzEwMix0aGlzLl9kPTI3MTczMzg3OCx0aGlzLl9lPTMyODUzNzc1MjB9ZnVuY3Rpb24gcChlLHQpe3JldHVybiBlPDx0fGU+Pj4zMi10fWZ1bmN0aW9uIGIoZSx0LHIsbixpLG8scyxhKXtyZXR1cm4gcChlKyh0XnJebikrbytzfDAsYSkraXwwfWZ1bmN0aW9uIHkoZSx0LHIsbixpLG8scyxhKXtyZXR1cm4gcChlKyh0JnJ8fnQmbikrbytzfDAsYSkraXwwfWZ1bmN0aW9uIGcoZSx0LHIsbixpLG8scyxhKXtyZXR1cm4gcChlKygodHx+cilebikrbytzfDAsYSkraXwwfWZ1bmN0aW9uIG0oZSx0LHIsbixpLG8scyxhKXtyZXR1cm4gcChlKyh0Jm58ciZ+bikrbytzfDAsYSkraXwwfWZ1bmN0aW9uIHYoZSx0LHIsbixpLG8scyxhKXtyZXR1cm4gcChlKyh0XihyfH5uKSkrbytzfDAsYSkraXwwfWkobCxvKSxsLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXMsdD0wO3Q8MTY7Kyt0KWVbdF09dGhpcy5fYmxvY2sucmVhZEludDMyTEUoNCp0KTtmb3IodmFyIHI9MHx0aGlzLl9hLG49MHx0aGlzLl9iLGk9MHx0aGlzLl9jLG89MHx0aGlzLl9kLGw9MHx0aGlzLl9lLHc9MHx0aGlzLl9hLF89MHx0aGlzLl9iLFM9MHx0aGlzLl9jLEU9MHx0aGlzLl9kLEE9MHx0aGlzLl9lLHg9MDt4PDgwO3grPTEpe3ZhciBrLFA7eDwxNj8oaz1iKHIsbixpLG8sbCxlW2FbeF1dLGRbMF0sZlt4XSksUD12KHcsXyxTLEUsQSxlW2NbeF1dLGhbMF0sdVt4XSkpOng8MzI/KGs9eShyLG4saSxvLGwsZVthW3hdXSxkWzFdLGZbeF0pLFA9bSh3LF8sUyxFLEEsZVtjW3hdXSxoWzFdLHVbeF0pKTp4PDQ4PyhrPWcocixuLGksbyxsLGVbYVt4XV0sZFsyXSxmW3hdKSxQPWcodyxfLFMsRSxBLGVbY1t4XV0saFsyXSx1W3hdKSk6eDw2ND8oaz1tKHIsbixpLG8sbCxlW2FbeF1dLGRbM10sZlt4XSksUD15KHcsXyxTLEUsQSxlW2NbeF1dLGhbM10sdVt4XSkpOihrPXYocixuLGksbyxsLGVbYVt4XV0sZFs0XSxmW3hdKSxQPWIodyxfLFMsRSxBLGVbY1t4XV0saFs0XSx1W3hdKSkscj1sLGw9byxvPXAoaSwxMCksaT1uLG49ayx3PUEsQT1FLEU9cChTLDEwKSxTPV8sXz1QfXZhciBPPXRoaXMuX2IraStFfDA7dGhpcy5fYj10aGlzLl9jK28rQXwwLHRoaXMuX2M9dGhpcy5fZCtsK3d8MCx0aGlzLl9kPXRoaXMuX2UrcitffDAsdGhpcy5fZT10aGlzLl9hK24rU3wwLHRoaXMuX2E9T30sbC5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbigpe3RoaXMuX2Jsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdPTEyOCx0aGlzLl9ibG9ja09mZnNldD41NiYmKHRoaXMuX2Jsb2NrLmZpbGwoMCx0aGlzLl9ibG9ja09mZnNldCw2NCksdGhpcy5fdXBkYXRlKCksdGhpcy5fYmxvY2tPZmZzZXQ9MCksdGhpcy5fYmxvY2suZmlsbCgwLHRoaXMuX2Jsb2NrT2Zmc2V0LDU2KSx0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSw1NiksdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sNjApLHRoaXMuX3VwZGF0ZSgpO3ZhciBlPW4uYWxsb2M/bi5hbGxvYygyMCk6bmV3IG4oMjApO3JldHVybiBlLndyaXRlSW50MzJMRSh0aGlzLl9hLDApLGUud3JpdGVJbnQzMkxFKHRoaXMuX2IsNCksZS53cml0ZUludDMyTEUodGhpcy5fYyw4KSxlLndyaXRlSW50MzJMRSh0aGlzLl9kLDEyKSxlLndyaXRlSW50MzJMRSh0aGlzLl9lLDE2KSxlfSxlLmV4cG9ydHM9bH0sMTY3NTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4NzY0KS5CdWZmZXIsaT10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmdldExlbmd0aD10LmRlY29kZT10LmVuY29kZT12b2lkIDA7dmFyIG89aShyKDM1NTApKTtmdW5jdGlvbiBzKGUsdCl7aWYoXCIwXCI9PT1lWzBdJiZcIjBcIj09PWVbMV0pdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBSTFA6IGV4dHJhIHplcm9zXCIpO3JldHVybiBwYXJzZUludChlLHQpfWZ1bmN0aW9uIGEoZSx0KXtpZihlPDU2KXJldHVybiBuLmZyb20oW2UrdF0pO3ZhciByPXUoZSksaT11KHQrNTUrci5sZW5ndGgvMik7cmV0dXJuIG4uZnJvbShpK3IsXCJoZXhcIil9ZnVuY3Rpb24gYyhlKXt2YXIgdCxyLGksbyxhLGY9W10sdT1lWzBdO2lmKHU8PTEyNylyZXR1cm57ZGF0YTplLnNsaWNlKDAsMSkscmVtYWluZGVyOmUuc2xpY2UoMSl9O2lmKHU8PTE4Myl7aWYodD11LTEyNyxpPTEyOD09PXU/bi5mcm9tKFtdKTplLnNsaWNlKDEsdCksMj09PXQmJmlbMF08MTI4KXRocm93IG5ldyBFcnJvcihcImludmFsaWQgcmxwIGVuY29kaW5nOiBieXRlIG11c3QgYmUgbGVzcyAweDgwXCIpO3JldHVybntkYXRhOmkscmVtYWluZGVyOmUuc2xpY2UodCl9fWlmKHU8PTE5MSl7aWYocj11LTE4MixlLmxlbmd0aC0xPHIpdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBSTFA6IG5vdCBlbm91Z2ggYnl0ZXMgZm9yIHN0cmluZyBsZW5ndGhcIik7aWYoKHQ9cyhlLnNsaWNlKDEscikudG9TdHJpbmcoXCJoZXhcIiksMTYpKTw9NTUpdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBSTFA6IGV4cGVjdGVkIHN0cmluZyBsZW5ndGggdG8gYmUgZ3JlYXRlciB0aGFuIDU1XCIpO2lmKChpPWUuc2xpY2Uocix0K3IpKS5sZW5ndGg8dCl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIFJMUDogbm90IGVub3VnaCBieXRlcyBmb3Igc3RyaW5nXCIpO3JldHVybntkYXRhOmkscmVtYWluZGVyOmUuc2xpY2UodCtyKX19aWYodTw9MjQ3KXtmb3IodD11LTE5MSxvPWUuc2xpY2UoMSx0KTtvLmxlbmd0aDspYT1jKG8pLGYucHVzaChhLmRhdGEpLG89YS5yZW1haW5kZXI7cmV0dXJue2RhdGE6ZixyZW1haW5kZXI6ZS5zbGljZSh0KX19dmFyIGQ9KHI9dS0yNDYpKyh0PXMoZS5zbGljZSgxLHIpLnRvU3RyaW5nKFwiaGV4XCIpLDE2KSk7aWYoZD5lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHJscDogdG90YWwgbGVuZ3RoIGlzIGxhcmdlciB0aGFuIHRoZSBkYXRhXCIpO2lmKDA9PT0obz1lLnNsaWNlKHIsZCkpLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHJscCwgTGlzdCBoYXMgYSBpbnZhbGlkIGxlbmd0aFwiKTtmb3IoO28ubGVuZ3RoOylhPWMobyksZi5wdXNoKGEuZGF0YSksbz1hLnJlbWFpbmRlcjtyZXR1cm57ZGF0YTpmLHJlbWFpbmRlcjplLnNsaWNlKGQpfX1mdW5jdGlvbiBmKGUpe3JldHVyblwiMHhcIj09PWUuc2xpY2UoMCwyKX1mdW5jdGlvbiB1KGUpe2lmKGU8MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGludGVnZXIgYXMgYXJndW1lbnQsIG11c3QgYmUgdW5zaWduZWQhXCIpO3ZhciB0PWUudG9TdHJpbmcoMTYpO3JldHVybiB0Lmxlbmd0aCUyP1wiMFwiK3Q6dH1mdW5jdGlvbiBkKGUpe2lmKCFuLmlzQnVmZmVyKGUpKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gZihlKT9uLmZyb20oKHI9XCJzdHJpbmdcIiE9dHlwZW9mKGk9ZSk/aTpmKGkpP2kuc2xpY2UoMik6aSkubGVuZ3RoJTI/XCIwXCIrcjpyLFwiaGV4XCIpOm4uZnJvbShlKTtpZihcIm51bWJlclwiPT10eXBlb2YgZXx8XCJiaWdpbnRcIj09dHlwZW9mIGUpcmV0dXJuIGU/KHQ9dShlKSxuLmZyb20odCxcImhleFwiKSk6bi5mcm9tKFtdKTtpZihudWxsPT1lKXJldHVybiBuLmZyb20oW10pO2lmKGUgaW5zdGFuY2VvZiBVaW50OEFycmF5KXJldHVybiBuLmZyb20oZSk7aWYoby5kZWZhdWx0LmlzQk4oZSkpcmV0dXJuIG4uZnJvbShlLnRvQXJyYXkoKSk7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB0eXBlXCIpfXZhciB0LHIsaTtyZXR1cm4gZX10LmVuY29kZT1mdW5jdGlvbiBlKHQpe2lmKEFycmF5LmlzQXJyYXkodCkpe2Zvcih2YXIgcj1bXSxpPTA7aTx0Lmxlbmd0aDtpKyspci5wdXNoKGUodFtpXSkpO3ZhciBvPW4uY29uY2F0KHIpO3JldHVybiBuLmNvbmNhdChbYShvLmxlbmd0aCwxOTIpLG9dKX12YXIgcz1kKHQpO3JldHVybiAxPT09cy5sZW5ndGgmJnNbMF08MTI4P3M6bi5jb25jYXQoW2Eocy5sZW5ndGgsMTI4KSxzXSl9LHQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9ITEpLCFlfHwwPT09ZS5sZW5ndGgpcmV0dXJuIG4uZnJvbShbXSk7dmFyIHI9YyhkKGUpKTtpZih0KXJldHVybiByO2lmKDAhPT1yLnJlbWFpbmRlci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCByZW1haW5kZXJcIik7cmV0dXJuIHIuZGF0YX0sdC5nZXRMZW5ndGg9ZnVuY3Rpb24oZSl7aWYoIWV8fDA9PT1lLmxlbmd0aClyZXR1cm4gbi5mcm9tKFtdKTt2YXIgdD1kKGUpLHI9dFswXTtpZihyPD0xMjcpcmV0dXJuIHQubGVuZ3RoO2lmKHI8PTE4MylyZXR1cm4gci0xMjc7aWYocjw9MTkxKXJldHVybiByLTE4MjtpZihyPD0yNDcpcmV0dXJuIHItMTkxO3ZhciBpPXItMjQ2O3JldHVybiBpK3ModC5zbGljZSgxLGkpLnRvU3RyaW5nKFwiaGV4XCIpLDE2KX19LDk1MDk6KGUsdCxyKT0+e3ZhciBuPXIoODc2NCksaT1uLkJ1ZmZlcjtmdW5jdGlvbiBvKGUsdCl7Zm9yKHZhciByIGluIGUpdFtyXT1lW3JdfWZ1bmN0aW9uIHMoZSx0LHIpe3JldHVybiBpKGUsdCxyKX1pLmZyb20mJmkuYWxsb2MmJmkuYWxsb2NVbnNhZmUmJmkuYWxsb2NVbnNhZmVTbG93P2UuZXhwb3J0cz1uOihvKG4sdCksdC5CdWZmZXI9cykscy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShpLnByb3RvdHlwZSksbyhpLHMpLHMuZnJvbT1mdW5jdGlvbihlLHQscil7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyXCIpO3JldHVybiBpKGUsdCxyKX0scy5hbGxvYz1mdW5jdGlvbihlLHQscil7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7dmFyIG49aShlKTtyZXR1cm4gdm9pZCAwIT09dD9cInN0cmluZ1wiPT10eXBlb2Ygcj9uLmZpbGwodCxyKTpuLmZpbGwodCk6bi5maWxsKDApLG59LHMuYWxsb2NVbnNhZmU9ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7cmV0dXJuIGkoZSl9LHMuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyXCIpO3JldHVybiBuLlNsb3dCdWZmZXIoZSl9fSwyMzk5OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbixpPXIoNDE1NSksbz1yKDg3NjQpLHM9by5CdWZmZXIsYT17fTtmb3IobiBpbiBvKW8uaGFzT3duUHJvcGVydHkobikmJlwiU2xvd0J1ZmZlclwiIT09biYmXCJCdWZmZXJcIiE9PW4mJihhW25dPW9bbl0pO3ZhciBjPWEuQnVmZmVyPXt9O2ZvcihuIGluIHMpcy5oYXNPd25Qcm9wZXJ0eShuKSYmXCJhbGxvY1Vuc2FmZVwiIT09biYmXCJhbGxvY1Vuc2FmZVNsb3dcIiE9PW4mJihjW25dPXNbbl0pO2lmKGEuQnVmZmVyLnByb3RvdHlwZT1zLnByb3RvdHlwZSxjLmZyb20mJmMuZnJvbSE9PVVpbnQ4QXJyYXkuZnJvbXx8KGMuZnJvbT1mdW5jdGlvbihlLHQscil7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKTtpZihlJiZ2b2lkIDA9PT1lLmxlbmd0aCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgXCIrdHlwZW9mIGUpO3JldHVybiBzKGUsdCxyKX0pLGMuYWxsb2N8fChjLmFsbG9jPWZ1bmN0aW9uKGUsdCxyKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKTtpZihlPDB8fGU+PTIqKDE8PDMwKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKTt2YXIgbj1zKGUpO3JldHVybiB0JiYwIT09dC5sZW5ndGg/XCJzdHJpbmdcIj09dHlwZW9mIHI/bi5maWxsKHQscik6bi5maWxsKHQpOm4uZmlsbCgwKSxufSksIWEua1N0cmluZ01heExlbmd0aCl0cnl7YS5rU3RyaW5nTWF4TGVuZ3RoPWkuYmluZGluZyhcImJ1ZmZlclwiKS5rU3RyaW5nTWF4TGVuZ3RofWNhdGNoKGUpe31hLmNvbnN0YW50c3x8KGEuY29uc3RhbnRzPXtNQVhfTEVOR1RIOmEua01heExlbmd0aH0sYS5rU3RyaW5nTWF4TGVuZ3RoJiYoYS5jb25zdGFudHMuTUFYX1NUUklOR19MRU5HVEg9YS5rU3RyaW5nTWF4TGVuZ3RoKSksZS5leHBvcnRzPWF9LDQxODk6KGUsdCxyKT0+e3ZhciBuPXIoOTUwOSkuQnVmZmVyO2Z1bmN0aW9uIGkoZSx0KXt0aGlzLl9ibG9jaz1uLmFsbG9jKGUpLHRoaXMuX2ZpbmFsU2l6ZT10LHRoaXMuX2Jsb2NrU2l6ZT1lLHRoaXMuX2xlbj0wfWkucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihlLHQpe1wic3RyaW5nXCI9PXR5cGVvZiBlJiYodD10fHxcInV0ZjhcIixlPW4uZnJvbShlLHQpKTtmb3IodmFyIHI9dGhpcy5fYmxvY2ssaT10aGlzLl9ibG9ja1NpemUsbz1lLmxlbmd0aCxzPXRoaXMuX2xlbixhPTA7YTxvOyl7Zm9yKHZhciBjPXMlaSxmPU1hdGgubWluKG8tYSxpLWMpLHU9MDt1PGY7dSsrKXJbYyt1XT1lW2ErdV07YSs9Ziwocys9ZiklaT09MCYmdGhpcy5fdXBkYXRlKHIpfXJldHVybiB0aGlzLl9sZW4rPW8sdGhpc30saS5wcm90b3R5cGUuZGlnZXN0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2xlbiV0aGlzLl9ibG9ja1NpemU7dGhpcy5fYmxvY2tbdF09MTI4LHRoaXMuX2Jsb2NrLmZpbGwoMCx0KzEpLHQ+PXRoaXMuX2ZpbmFsU2l6ZSYmKHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jayksdGhpcy5fYmxvY2suZmlsbCgwKSk7dmFyIHI9OCp0aGlzLl9sZW47aWYocjw9NDI5NDk2NzI5NSl0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKHIsdGhpcy5fYmxvY2tTaXplLTQpO2Vsc2V7dmFyIG49KDQyOTQ5NjcyOTUmcik+Pj4wLGk9KHItbikvNDI5NDk2NzI5Njt0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGksdGhpcy5fYmxvY2tTaXplLTgpLHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobix0aGlzLl9ibG9ja1NpemUtNCl9dGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKTt2YXIgbz10aGlzLl9oYXNoKCk7cmV0dXJuIGU/by50b1N0cmluZyhlKTpvfSxpLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiX3VwZGF0ZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzXCIpfSxlLmV4cG9ydHM9aX0sOTA3MjooZSx0LHIpPT57dmFyIG49ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2U9ZS50b0xvd2VyQ2FzZSgpO3ZhciB0PW5bZV07aWYoIXQpdGhyb3cgbmV3IEVycm9yKGUrXCIgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpXCIpO3JldHVybiBuZXcgdH07bi5zaGE9cig0NDQ4KSxuLnNoYTE9cig4MzM2KSxuLnNoYTIyND1yKDg0MzIpLG4uc2hhMjU2PXIoNzQ5OSksbi5zaGEzODQ9cigxNjg2KSxuLnNoYTUxMj1yKDc4MTYpfSw0NDQ4OihlLHQscik9Pnt2YXIgbj1yKDU3MTcpLGk9cig0MTg5KSxvPXIoOTUwOSkuQnVmZmVyLHM9WzE1MTg1MDAyNDksMTg1OTc3NTM5MywtMTg5NDAwNzU4OCwtODk5NDk3NTE0XSxhPW5ldyBBcnJheSg4MCk7ZnVuY3Rpb24gYygpe3RoaXMuaW5pdCgpLHRoaXMuX3c9YSxpLmNhbGwodGhpcyw2NCw1Nil9ZnVuY3Rpb24gZihlKXtyZXR1cm4gZTw8MzB8ZT4+PjJ9ZnVuY3Rpb24gdShlLHQscixuKXtyZXR1cm4gMD09PWU/dCZyfH50Jm46Mj09PWU/dCZyfHQmbnxyJm46dF5yXm59bihjLGkpLGMucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYT0xNzMyNTg0MTkzLHRoaXMuX2I9NDAyMzIzMzQxNyx0aGlzLl9jPTI1NjIzODMxMDIsdGhpcy5fZD0yNzE3MzM4NzgsdGhpcy5fZT0zMjg1Mzc3NTIwLHRoaXN9LGMucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9dGhpcy5fdyxuPTB8dGhpcy5fYSxpPTB8dGhpcy5fYixvPTB8dGhpcy5fYyxhPTB8dGhpcy5fZCxjPTB8dGhpcy5fZSxkPTA7ZDwxNjsrK2QpcltkXT1lLnJlYWRJbnQzMkJFKDQqZCk7Zm9yKDtkPDgwOysrZClyW2RdPXJbZC0zXV5yW2QtOF1ecltkLTE0XV5yW2QtMTZdO2Zvcih2YXIgaD0wO2g8ODA7KytoKXt2YXIgbD1+fihoLzIwKSxwPTB8KCh0PW4pPDw1fHQ+Pj4yNykrdShsLGksbyxhKStjK3JbaF0rc1tsXTtjPWEsYT1vLG89ZihpKSxpPW4sbj1wfXRoaXMuX2E9bit0aGlzLl9hfDAsdGhpcy5fYj1pK3RoaXMuX2J8MCx0aGlzLl9jPW8rdGhpcy5fY3wwLHRoaXMuX2Q9YSt0aGlzLl9kfDAsdGhpcy5fZT1jK3RoaXMuX2V8MH0sYy5wcm90b3R5cGUuX2hhc2g9ZnVuY3Rpb24oKXt2YXIgZT1vLmFsbG9jVW5zYWZlKDIwKTtyZXR1cm4gZS53cml0ZUludDMyQkUoMHx0aGlzLl9hLDApLGUud3JpdGVJbnQzMkJFKDB8dGhpcy5fYiw0KSxlLndyaXRlSW50MzJCRSgwfHRoaXMuX2MsOCksZS53cml0ZUludDMyQkUoMHx0aGlzLl9kLDEyKSxlLndyaXRlSW50MzJCRSgwfHRoaXMuX2UsMTYpLGV9LGUuZXhwb3J0cz1jfSw4MzM2OihlLHQscik9Pnt2YXIgbj1yKDU3MTcpLGk9cig0MTg5KSxvPXIoOTUwOSkuQnVmZmVyLHM9WzE1MTg1MDAyNDksMTg1OTc3NTM5MywtMTg5NDAwNzU4OCwtODk5NDk3NTE0XSxhPW5ldyBBcnJheSg4MCk7ZnVuY3Rpb24gYygpe3RoaXMuaW5pdCgpLHRoaXMuX3c9YSxpLmNhbGwodGhpcyw2NCw1Nil9ZnVuY3Rpb24gZihlKXtyZXR1cm4gZTw8NXxlPj4+Mjd9ZnVuY3Rpb24gdShlKXtyZXR1cm4gZTw8MzB8ZT4+PjJ9ZnVuY3Rpb24gZChlLHQscixuKXtyZXR1cm4gMD09PWU/dCZyfH50Jm46Mj09PWU/dCZyfHQmbnxyJm46dF5yXm59bihjLGkpLGMucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYT0xNzMyNTg0MTkzLHRoaXMuX2I9NDAyMzIzMzQxNyx0aGlzLl9jPTI1NjIzODMxMDIsdGhpcy5fZD0yNzE3MzM4NzgsdGhpcy5fZT0zMjg1Mzc3NTIwLHRoaXN9LGMucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9dGhpcy5fdyxuPTB8dGhpcy5fYSxpPTB8dGhpcy5fYixvPTB8dGhpcy5fYyxhPTB8dGhpcy5fZCxjPTB8dGhpcy5fZSxoPTA7aDwxNjsrK2gpcltoXT1lLnJlYWRJbnQzMkJFKDQqaCk7Zm9yKDtoPDgwOysraClyW2hdPSh0PXJbaC0zXV5yW2gtOF1ecltoLTE0XV5yW2gtMTZdKTw8MXx0Pj4+MzE7Zm9yKHZhciBsPTA7bDw4MDsrK2wpe3ZhciBwPX5+KGwvMjApLGI9ZihuKStkKHAsaSxvLGEpK2MrcltsXStzW3BdfDA7Yz1hLGE9byxvPXUoaSksaT1uLG49Yn10aGlzLl9hPW4rdGhpcy5fYXwwLHRoaXMuX2I9aSt0aGlzLl9ifDAsdGhpcy5fYz1vK3RoaXMuX2N8MCx0aGlzLl9kPWErdGhpcy5fZHwwLHRoaXMuX2U9Yyt0aGlzLl9lfDB9LGMucHJvdG90eXBlLl9oYXNoPWZ1bmN0aW9uKCl7dmFyIGU9by5hbGxvY1Vuc2FmZSgyMCk7cmV0dXJuIGUud3JpdGVJbnQzMkJFKDB8dGhpcy5fYSwwKSxlLndyaXRlSW50MzJCRSgwfHRoaXMuX2IsNCksZS53cml0ZUludDMyQkUoMHx0aGlzLl9jLDgpLGUud3JpdGVJbnQzMkJFKDB8dGhpcy5fZCwxMiksZS53cml0ZUludDMyQkUoMHx0aGlzLl9lLDE2KSxlfSxlLmV4cG9ydHM9Y30sODQzMjooZSx0LHIpPT57dmFyIG49cig1NzE3KSxpPXIoNzQ5OSksbz1yKDQxODkpLHM9cig5NTA5KS5CdWZmZXIsYT1uZXcgQXJyYXkoNjQpO2Z1bmN0aW9uIGMoKXt0aGlzLmluaXQoKSx0aGlzLl93PWEsby5jYWxsKHRoaXMsNjQsNTYpfW4oYyxpKSxjLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2E9MzIzODM3MTAzMix0aGlzLl9iPTkxNDE1MDY2Myx0aGlzLl9jPTgxMjcwMjk5OSx0aGlzLl9kPTQxNDQ5MTI2OTcsdGhpcy5fZT00MjkwNzc1ODU3LHRoaXMuX2Y9MTc1MDYwMzAyNSx0aGlzLl9nPTE2OTQwNzY4MzksdGhpcy5faD0zMjA0MDc1NDI4LHRoaXN9LGMucHJvdG90eXBlLl9oYXNoPWZ1bmN0aW9uKCl7dmFyIGU9cy5hbGxvY1Vuc2FmZSgyOCk7cmV0dXJuIGUud3JpdGVJbnQzMkJFKHRoaXMuX2EsMCksZS53cml0ZUludDMyQkUodGhpcy5fYiw0KSxlLndyaXRlSW50MzJCRSh0aGlzLl9jLDgpLGUud3JpdGVJbnQzMkJFKHRoaXMuX2QsMTIpLGUud3JpdGVJbnQzMkJFKHRoaXMuX2UsMTYpLGUud3JpdGVJbnQzMkJFKHRoaXMuX2YsMjApLGUud3JpdGVJbnQzMkJFKHRoaXMuX2csMjQpLGV9LGUuZXhwb3J0cz1jfSw3NDk5OihlLHQscik9Pnt2YXIgbj1yKDU3MTcpLGk9cig0MTg5KSxvPXIoOTUwOSkuQnVmZmVyLHM9WzExMTYzNTI0MDgsMTg5OTQ0NzQ0MSwzMDQ5MzIzNDcxLDM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCwxNDI2ODgxOTg3LDE5MjUwNzgzODgsMjE2MjA3ODIwNiwyNjE0ODg4MTAzLDMyNDgyMjI1ODAsMzgzNTM5MDQwMSw0MDIyMjI0Nzc0LDI2NDM0NzA3OCw2MDQ4MDc2MjgsNzcwMjU1OTgzLDEyNDkxNTAxMjIsMTU1NTA4MTY5MiwxOTk2MDY0OTg2LDI1NTQyMjA4ODIsMjgyMTgzNDM0OSwyOTUyOTk2ODA4LDMyMTAzMTM2NzEsMzMzNjU3MTg5MSwzNTg0NTI4NzExLDExMzkyNjk5MywzMzgyNDE4OTUsNjY2MzA3MjA1LDc3MzUyOTkxMiwxMjk0NzU3MzcyLDEzOTYxODIyOTEsMTY5NTE4MzcwMCwxOTg2NjYxMDUxLDIxNzcwMjYzNTAsMjQ1Njk1NjAzNywyNzMwNDg1OTIxLDI4MjAzMDI0MTEsMzI1OTczMDgwMCwzMzQ1NzY0NzcxLDM1MTYwNjU4MTcsMzYwMDM1MjgwNCw0MDk0NTcxOTA5LDI3NTQyMzM0NCw0MzAyMjc3MzQsNTA2OTQ4NjE2LDY1OTA2MDU1Niw4ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF0sYT1uZXcgQXJyYXkoNjQpO2Z1bmN0aW9uIGMoKXt0aGlzLmluaXQoKSx0aGlzLl93PWEsaS5jYWxsKHRoaXMsNjQsNTYpfWZ1bmN0aW9uIGYoZSx0LHIpe3JldHVybiByXmUmKHRecil9ZnVuY3Rpb24gdShlLHQscil7cmV0dXJuIGUmdHxyJihlfHQpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuKGU+Pj4yfGU8PDMwKV4oZT4+PjEzfGU8PDE5KV4oZT4+PjIyfGU8PDEwKX1mdW5jdGlvbiBoKGUpe3JldHVybihlPj4+NnxlPDwyNileKGU+Pj4xMXxlPDwyMSleKGU+Pj4yNXxlPDw3KX1mdW5jdGlvbiBsKGUpe3JldHVybihlPj4+N3xlPDwyNSleKGU+Pj4xOHxlPDwxNCleZT4+PjN9bihjLGkpLGMucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYT0xNzc5MDMzNzAzLHRoaXMuX2I9MzE0NDEzNDI3Nyx0aGlzLl9jPTEwMTM5MDQyNDIsdGhpcy5fZD0yNzczNDgwNzYyLHRoaXMuX2U9MTM1OTg5MzExOSx0aGlzLl9mPTI2MDA4MjI5MjQsdGhpcy5fZz01Mjg3MzQ2MzUsdGhpcy5faD0xNTQxNDU5MjI1LHRoaXN9LGMucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9dGhpcy5fdyxuPTB8dGhpcy5fYSxpPTB8dGhpcy5fYixvPTB8dGhpcy5fYyxhPTB8dGhpcy5fZCxjPTB8dGhpcy5fZSxwPTB8dGhpcy5fZixiPTB8dGhpcy5fZyx5PTB8dGhpcy5faCxnPTA7ZzwxNjsrK2cpcltnXT1lLnJlYWRJbnQzMkJFKDQqZyk7Zm9yKDtnPDY0OysrZylyW2ddPTB8KCgodD1yW2ctMl0pPj4+MTd8dDw8MTUpXih0Pj4+MTl8dDw8MTMpXnQ+Pj4xMCkrcltnLTddK2wocltnLTE1XSkrcltnLTE2XTtmb3IodmFyIG09MDttPDY0OysrbSl7dmFyIHY9eStoKGMpK2YoYyxwLGIpK3NbbV0rclttXXwwLHc9ZChuKSt1KG4saSxvKXwwO3k9YixiPXAscD1jLGM9YSt2fDAsYT1vLG89aSxpPW4sbj12K3d8MH10aGlzLl9hPW4rdGhpcy5fYXwwLHRoaXMuX2I9aSt0aGlzLl9ifDAsdGhpcy5fYz1vK3RoaXMuX2N8MCx0aGlzLl9kPWErdGhpcy5fZHwwLHRoaXMuX2U9Yyt0aGlzLl9lfDAsdGhpcy5fZj1wK3RoaXMuX2Z8MCx0aGlzLl9nPWIrdGhpcy5fZ3wwLHRoaXMuX2g9eSt0aGlzLl9ofDB9LGMucHJvdG90eXBlLl9oYXNoPWZ1bmN0aW9uKCl7dmFyIGU9by5hbGxvY1Vuc2FmZSgzMik7cmV0dXJuIGUud3JpdGVJbnQzMkJFKHRoaXMuX2EsMCksZS53cml0ZUludDMyQkUodGhpcy5fYiw0KSxlLndyaXRlSW50MzJCRSh0aGlzLl9jLDgpLGUud3JpdGVJbnQzMkJFKHRoaXMuX2QsMTIpLGUud3JpdGVJbnQzMkJFKHRoaXMuX2UsMTYpLGUud3JpdGVJbnQzMkJFKHRoaXMuX2YsMjApLGUud3JpdGVJbnQzMkJFKHRoaXMuX2csMjQpLGUud3JpdGVJbnQzMkJFKHRoaXMuX2gsMjgpLGV9LGUuZXhwb3J0cz1jfSwxNjg2OihlLHQscik9Pnt2YXIgbj1yKDU3MTcpLGk9cig3ODE2KSxvPXIoNDE4OSkscz1yKDk1MDkpLkJ1ZmZlcixhPW5ldyBBcnJheSgxNjApO2Z1bmN0aW9uIGMoKXt0aGlzLmluaXQoKSx0aGlzLl93PWEsby5jYWxsKHRoaXMsMTI4LDExMil9bihjLGkpLGMucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYWg9MzQxODA3MDM2NSx0aGlzLl9iaD0xNjU0MjcwMjUwLHRoaXMuX2NoPTI0Mzg1MjkzNzAsdGhpcy5fZGg9MzU1NDYyMzYwLHRoaXMuX2VoPTE3MzE0MDU0MTUsdGhpcy5fZmg9MjM5NDE4MDIzMSx0aGlzLl9naD0zNjc1MDA4NTI1LHRoaXMuX2hoPTEyMDMwNjI4MTMsdGhpcy5fYWw9MzIzODM3MTAzMix0aGlzLl9ibD05MTQxNTA2NjMsdGhpcy5fY2w9ODEyNzAyOTk5LHRoaXMuX2RsPTQxNDQ5MTI2OTcsdGhpcy5fZWw9NDI5MDc3NTg1Nyx0aGlzLl9mbD0xNzUwNjAzMDI1LHRoaXMuX2dsPTE2OTQwNzY4MzksdGhpcy5faGw9MzIwNDA3NTQyOCx0aGlzfSxjLnByb3RvdHlwZS5faGFzaD1mdW5jdGlvbigpe3ZhciBlPXMuYWxsb2NVbnNhZmUoNDgpO2Z1bmN0aW9uIHQodCxyLG4pe2Uud3JpdGVJbnQzMkJFKHQsbiksZS53cml0ZUludDMyQkUocixuKzQpfXJldHVybiB0KHRoaXMuX2FoLHRoaXMuX2FsLDApLHQodGhpcy5fYmgsdGhpcy5fYmwsOCksdCh0aGlzLl9jaCx0aGlzLl9jbCwxNiksdCh0aGlzLl9kaCx0aGlzLl9kbCwyNCksdCh0aGlzLl9laCx0aGlzLl9lbCwzMiksdCh0aGlzLl9maCx0aGlzLl9mbCw0MCksZX0sZS5leHBvcnRzPWN9LDc4MTY6KGUsdCxyKT0+e3ZhciBuPXIoNTcxNyksaT1yKDQxODkpLG89cig5NTA5KS5CdWZmZXIscz1bMTExNjM1MjQwOCwzNjA5NzY3NDU4LDE4OTk0NDc0NDEsNjAyODkxNzI1LDMwNDkzMjM0NzEsMzk2NDQ4NDM5OSwzOTIxMDA5NTczLDIxNzMyOTU1NDgsOTYxOTg3MTYzLDQwODE2Mjg0NzIsMTUwODk3MDk5MywzMDUzODM0MjY1LDI0NTM2MzU3NDgsMjkzNzY3MTU3OSwyODcwNzYzMjIxLDM2NjQ2MDk1NjAsMzYyNDM4MTA4MCwyNzM0ODgzMzk0LDMxMDU5ODQwMSwxMTY0OTk2NTQyLDYwNzIyNTI3OCwxMzIzNjEwNzY0LDE0MjY4ODE5ODcsMzU5MDMwNDk5NCwxOTI1MDc4Mzg4LDQwNjgxODIzODMsMjE2MjA3ODIwNiw5OTEzMzYxMTMsMjYxNDg4ODEwMyw2MzM4MDMzMTcsMzI0ODIyMjU4MCwzNDc5Nzc0ODY4LDM4MzUzOTA0MDEsMjY2NjYxMzQ1OCw0MDIyMjI0Nzc0LDk0NDcxMTEzOSwyNjQzNDcwNzgsMjM0MTI2Mjc3Myw2MDQ4MDc2MjgsMjAwNzgwMDkzMyw3NzAyNTU5ODMsMTQ5NTk5MDkwMSwxMjQ5MTUwMTIyLDE4NTY0MzEyMzUsMTU1NTA4MTY5MiwzMTc1MjE4MTMyLDE5OTYwNjQ5ODYsMjE5ODk1MDgzNywyNTU0MjIwODgyLDM5OTk3MTkzMzksMjgyMTgzNDM0OSw3NjY3ODQwMTYsMjk1Mjk5NjgwOCwyNTY2NTk0ODc5LDMyMTAzMTM2NzEsMzIwMzMzNzk1NiwzMzM2NTcxODkxLDEwMzQ0NTcwMjYsMzU4NDUyODcxMSwyNDY2OTQ4OTAxLDExMzkyNjk5MywzNzU4MzI2MzgzLDMzODI0MTg5NSwxNjg3MTc5MzYsNjY2MzA3MjA1LDExODgxNzk5NjQsNzczNTI5OTEyLDE1NDYwNDU3MzQsMTI5NDc1NzM3MiwxNTIyODA1NDg1LDEzOTYxODIyOTEsMjY0MzgzMzgyMywxNjk1MTgzNzAwLDIzNDM1MjczOTAsMTk4NjY2MTA1MSwxMDE0NDc3NDgwLDIxNzcwMjYzNTAsMTIwNjc1OTE0MiwyNDU2OTU2MDM3LDM0NDA3NzYyNywyNzMwNDg1OTIxLDEyOTA4NjM0NjAsMjgyMDMwMjQxMSwzMTU4NDU0MjczLDMyNTk3MzA4MDAsMzUwNTk1MjY1NywzMzQ1NzY0NzcxLDEwNjIxNzAwOCwzNTE2MDY1ODE3LDM2MDYwMDgzNDQsMzYwMDM1MjgwNCwxNDMyNzI1Nzc2LDQwOTQ1NzE5MDksMTQ2NzAzMTU5NCwyNzU0MjMzNDQsODUxMTY5NzIwLDQzMDIyNzczNCwzMTAwODIzNzUyLDUwNjk0ODYxNiwxMzYzMjU4MTk1LDY1OTA2MDU1NiwzNzUwNjg1NTkzLDg4Mzk5Nzg3NywzNzg1MDUwMjgwLDk1ODEzOTU3MSwzMzE4MzA3NDI3LDEzMjI4MjIyMTgsMzgxMjcyMzQwMywxNTM3MDAyMDYzLDIwMDMwMzQ5OTUsMTc0Nzg3Mzc3OSwzNjAyMDM2ODk5LDE5NTU1NjIyMjIsMTU3NTk5MDAxMiwyMDI0MTA0ODE1LDExMjU1OTI5MjgsMjIyNzczMDQ1MiwyNzE2OTA0MzA2LDIzNjE4NTI0MjQsNDQyNzc2MDQ0LDI0Mjg0MzY0NzQsNTkzNjk4MzQ0LDI3NTY3MzQxODcsMzczMzExMDI0OSwzMjA0MDMxNDc5LDI5OTkzNTE1NzMsMzMyOTMyNTI5OCwzODE1OTIwNDI3LDMzOTE1Njk2MTQsMzkyODM4MzkwMCwzNTE1MjY3MjcxLDU2NjI4MDcxMSwzOTQwMTg3NjA2LDM0NTQwNjk1MzQsNDExODYzMDI3MSw0MDAwMjM5OTkyLDExNjQxODQ3NCwxOTE0MTM4NTU0LDE3NDI5MjQyMSwyNzMxMDU1MjcwLDI4OTM4MDM1NiwzMjAzOTkzMDA2LDQ2MDM5MzI2OSwzMjA2MjAzMTUsNjg1NDcxNzMzLDU4NzQ5NjgzNiw4NTIxNDI5NzEsMTA4Njc5Mjg1MSwxMDE3MDM2Mjk4LDM2NTU0MzEwMCwxMTI2MDAwNTgwLDI2MTgyOTc2NzYsMTI4ODAzMzQ3MCwzNDA5ODU1MTU4LDE1MDE1MDU5NDgsNDIzNDUwOTg2NiwxNjA3MTY3OTE1LDk4NzE2NzQ2OCwxODE2NDAyMzE2LDEyNDYxODk1OTFdLGE9bmV3IEFycmF5KDE2MCk7ZnVuY3Rpb24gYygpe3RoaXMuaW5pdCgpLHRoaXMuX3c9YSxpLmNhbGwodGhpcywxMjgsMTEyKX1mdW5jdGlvbiBmKGUsdCxyKXtyZXR1cm4gcl5lJih0XnIpfWZ1bmN0aW9uIHUoZSx0LHIpe3JldHVybiBlJnR8ciYoZXx0KX1mdW5jdGlvbiBkKGUsdCl7cmV0dXJuKGU+Pj4yOHx0PDw0KV4odD4+PjJ8ZTw8MzApXih0Pj4+N3xlPDwyNSl9ZnVuY3Rpb24gaChlLHQpe3JldHVybihlPj4+MTR8dDw8MTgpXihlPj4+MTh8dDw8MTQpXih0Pj4+OXxlPDwyMyl9ZnVuY3Rpb24gbChlLHQpe3JldHVybihlPj4+MXx0PDwzMSleKGU+Pj44fHQ8PDI0KV5lPj4+N31mdW5jdGlvbiBwKGUsdCl7cmV0dXJuKGU+Pj4xfHQ8PDMxKV4oZT4+Pjh8dDw8MjQpXihlPj4+N3x0PDwyNSl9ZnVuY3Rpb24gYihlLHQpe3JldHVybihlPj4+MTl8dDw8MTMpXih0Pj4+Mjl8ZTw8MyleZT4+PjZ9ZnVuY3Rpb24geShlLHQpe3JldHVybihlPj4+MTl8dDw8MTMpXih0Pj4+Mjl8ZTw8MyleKGU+Pj42fHQ8PDI2KX1mdW5jdGlvbiBnKGUsdCl7cmV0dXJuIGU+Pj4wPHQ+Pj4wPzE6MH1uKGMsaSksYy5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9haD0xNzc5MDMzNzAzLHRoaXMuX2JoPTMxNDQxMzQyNzcsdGhpcy5fY2g9MTAxMzkwNDI0Mix0aGlzLl9kaD0yNzczNDgwNzYyLHRoaXMuX2VoPTEzNTk4OTMxMTksdGhpcy5fZmg9MjYwMDgyMjkyNCx0aGlzLl9naD01Mjg3MzQ2MzUsdGhpcy5faGg9MTU0MTQ1OTIyNSx0aGlzLl9hbD00MDg5MjM1NzIwLHRoaXMuX2JsPTIyMjc4NzM1OTUsdGhpcy5fY2w9NDI3MTE3NTcyMyx0aGlzLl9kbD0xNTk1NzUwMTI5LHRoaXMuX2VsPTI5MTc1NjUxMzcsdGhpcy5fZmw9NzI1NTExMTk5LHRoaXMuX2dsPTQyMTUzODk1NDcsdGhpcy5faGw9MzI3MDMzMjA5LHRoaXN9LGMucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMuX3cscj0wfHRoaXMuX2FoLG49MHx0aGlzLl9iaCxpPTB8dGhpcy5fY2gsbz0wfHRoaXMuX2RoLGE9MHx0aGlzLl9laCxjPTB8dGhpcy5fZmgsbT0wfHRoaXMuX2doLHY9MHx0aGlzLl9oaCx3PTB8dGhpcy5fYWwsXz0wfHRoaXMuX2JsLFM9MHx0aGlzLl9jbCxFPTB8dGhpcy5fZGwsQT0wfHRoaXMuX2VsLHg9MHx0aGlzLl9mbCxrPTB8dGhpcy5fZ2wsUD0wfHRoaXMuX2hsLE89MDtPPDMyO08rPTIpdFtPXT1lLnJlYWRJbnQzMkJFKDQqTyksdFtPKzFdPWUucmVhZEludDMyQkUoNCpPKzQpO2Zvcig7TzwxNjA7Tys9Mil7dmFyIE09dFtPLTMwXSxJPXRbTy0zMCsxXSxUPWwoTSxJKSxSPXAoSSxNKSxOPWIoTT10W08tNF0sST10W08tNCsxXSksQz15KEksTSksaj10W08tMTRdLEI9dFtPLTE0KzFdLEw9dFtPLTMyXSxEPXRbTy0zMisxXSxVPVIrQnwwLHE9VCtqK2coVSxSKXwwO3E9KHE9cStOK2coVT1VK0N8MCxDKXwwKStMK2coVT1VK0R8MCxEKXwwLHRbT109cSx0W08rMV09VX1mb3IodmFyIEY9MDtGPDE2MDtGKz0yKXtxPXRbRl0sVT10W0YrMV07dmFyIEg9dShyLG4saSksej11KHcsXyxTKSxLPWQocix3KSxWPWQodyxyKSxHPWgoYSxBKSxXPWgoQSxhKSxYPXNbRl0sWT1zW0YrMV0sSj1mKGEsYyxtKSwkPWYoQSx4LGspLFo9UCtXfDAsUT12K0crZyhaLFApfDA7UT0oUT0oUT1RK0orZyhaPVorJHwwLCQpfDApK1grZyhaPVorWXwwLFkpfDApK3ErZyhaPVorVXwwLFUpfDA7dmFyIGVlPVYrenwwLHRlPUsrSCtnKGVlLFYpfDA7dj1tLFA9ayxtPWMsaz14LGM9YSx4PUEsYT1vK1ErZyhBPUUrWnwwLEUpfDAsbz1pLEU9UyxpPW4sUz1fLG49cixfPXcscj1RK3RlK2codz1aK2VlfDAsWil8MH10aGlzLl9hbD10aGlzLl9hbCt3fDAsdGhpcy5fYmw9dGhpcy5fYmwrX3wwLHRoaXMuX2NsPXRoaXMuX2NsK1N8MCx0aGlzLl9kbD10aGlzLl9kbCtFfDAsdGhpcy5fZWw9dGhpcy5fZWwrQXwwLHRoaXMuX2ZsPXRoaXMuX2ZsK3h8MCx0aGlzLl9nbD10aGlzLl9nbCtrfDAsdGhpcy5faGw9dGhpcy5faGwrUHwwLHRoaXMuX2FoPXRoaXMuX2FoK3IrZyh0aGlzLl9hbCx3KXwwLHRoaXMuX2JoPXRoaXMuX2JoK24rZyh0aGlzLl9ibCxfKXwwLHRoaXMuX2NoPXRoaXMuX2NoK2krZyh0aGlzLl9jbCxTKXwwLHRoaXMuX2RoPXRoaXMuX2RoK28rZyh0aGlzLl9kbCxFKXwwLHRoaXMuX2VoPXRoaXMuX2VoK2ErZyh0aGlzLl9lbCxBKXwwLHRoaXMuX2ZoPXRoaXMuX2ZoK2MrZyh0aGlzLl9mbCx4KXwwLHRoaXMuX2doPXRoaXMuX2doK20rZyh0aGlzLl9nbCxrKXwwLHRoaXMuX2hoPXRoaXMuX2hoK3YrZyh0aGlzLl9obCxQKXwwfSxjLnByb3RvdHlwZS5faGFzaD1mdW5jdGlvbigpe3ZhciBlPW8uYWxsb2NVbnNhZmUoNjQpO2Z1bmN0aW9uIHQodCxyLG4pe2Uud3JpdGVJbnQzMkJFKHQsbiksZS53cml0ZUludDMyQkUocixuKzQpfXJldHVybiB0KHRoaXMuX2FoLHRoaXMuX2FsLDApLHQodGhpcy5fYmgsdGhpcy5fYmwsOCksdCh0aGlzLl9jaCx0aGlzLl9jbCwxNiksdCh0aGlzLl9kaCx0aGlzLl9kbCwyNCksdCh0aGlzLl9laCx0aGlzLl9lbCwzMiksdCh0aGlzLl9maCx0aGlzLl9mbCw0MCksdCh0aGlzLl9naCx0aGlzLl9nbCw0OCksdCh0aGlzLl9oaCx0aGlzLl9obCw1NiksZX0sZS5leHBvcnRzPWN9LDI4MzA6KGUsdCxyKT0+e2UuZXhwb3J0cz1pO3ZhciBuPXIoNzE4NykuRXZlbnRFbWl0dGVyO2Z1bmN0aW9uIGkoKXtuLmNhbGwodGhpcyl9cig1NzE3KShpLG4pLGkuUmVhZGFibGU9cig5NDgxKSxpLldyaXRhYmxlPXIoNDIyOSksaS5EdXBsZXg9cig2NzUzKSxpLlRyYW5zZm9ybT1yKDQ2MDUpLGkuUGFzc1Rocm91Z2g9cigyNzI1KSxpLmZpbmlzaGVkPXIoODYxMCksaS5waXBlbGluZT1yKDk5NDYpLGkuU3RyZWFtPWksaS5wcm90b3R5cGUucGlwZT1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7ZnVuY3Rpb24gaSh0KXtlLndyaXRhYmxlJiYhMT09PWUud3JpdGUodCkmJnIucGF1c2UmJnIucGF1c2UoKX1mdW5jdGlvbiBvKCl7ci5yZWFkYWJsZSYmci5yZXN1bWUmJnIucmVzdW1lKCl9ci5vbihcImRhdGFcIixpKSxlLm9uKFwiZHJhaW5cIixvKSxlLl9pc1N0ZGlvfHx0JiYhMT09PXQuZW5kfHwoci5vbihcImVuZFwiLGEpLHIub24oXCJjbG9zZVwiLGMpKTt2YXIgcz0hMTtmdW5jdGlvbiBhKCl7c3x8KHM9ITAsZS5lbmQoKSl9ZnVuY3Rpb24gYygpe3N8fChzPSEwLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZGVzdHJveSYmZS5kZXN0cm95KCkpfWZ1bmN0aW9uIGYoZSl7aWYodSgpLDA9PT1uLmxpc3RlbmVyQ291bnQodGhpcyxcImVycm9yXCIpKXRocm93IGV9ZnVuY3Rpb24gdSgpe3IucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsaSksZS5yZW1vdmVMaXN0ZW5lcihcImRyYWluXCIsbyksci5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLGEpLHIucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGMpLHIucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGYpLGUucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGYpLHIucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIix1KSxyLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIix1KSxlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIix1KX1yZXR1cm4gci5vbihcImVycm9yXCIsZiksZS5vbihcImVycm9yXCIsZiksci5vbihcImVuZFwiLHUpLHIub24oXCJjbG9zZVwiLHUpLGUub24oXCJjbG9zZVwiLHUpLGUuZW1pdChcInBpcGVcIixyKSxlfX0sODUwMTooZSx0LHIpPT57dmFyIG49cigxOTg5KSxpPXIoNTY3Niksbz1yKDc1MjkpLHM9cig1ODQpLGE9cig4NTc1KSxjPXQ7Yy5yZXF1ZXN0PWZ1bmN0aW9uKGUsdCl7ZT1cInN0cmluZ1wiPT10eXBlb2YgZT9hLnBhcnNlKGUpOm8oZSk7dmFyIGk9LTE9PT1yLmcubG9jYXRpb24ucHJvdG9jb2wuc2VhcmNoKC9eaHR0cHM/OiQvKT9cImh0dHA6XCI6XCJcIixzPWUucHJvdG9jb2x8fGksYz1lLmhvc3RuYW1lfHxlLmhvc3QsZj1lLnBvcnQsdT1lLnBhdGh8fFwiL1wiO2MmJi0xIT09Yy5pbmRleE9mKFwiOlwiKSYmKGM9XCJbXCIrYytcIl1cIiksZS51cmw9KGM/cytcIi8vXCIrYzpcIlwiKSsoZj9cIjpcIitmOlwiXCIpK3UsZS5tZXRob2Q9KGUubWV0aG9kfHxcIkdFVFwiKS50b1VwcGVyQ2FzZSgpLGUuaGVhZGVycz1lLmhlYWRlcnN8fHt9O3ZhciBkPW5ldyBuKGUpO3JldHVybiB0JiZkLm9uKFwicmVzcG9uc2VcIix0KSxkfSxjLmdldD1mdW5jdGlvbihlLHQpe3ZhciByPWMucmVxdWVzdChlLHQpO3JldHVybiByLmVuZCgpLHJ9LGMuQ2xpZW50UmVxdWVzdD1uLGMuSW5jb21pbmdNZXNzYWdlPWkuSW5jb21pbmdNZXNzYWdlLGMuQWdlbnQ9ZnVuY3Rpb24oKXt9LGMuQWdlbnQuZGVmYXVsdE1heFNvY2tldHM9NCxjLmdsb2JhbEFnZW50PW5ldyBjLkFnZW50LGMuU1RBVFVTX0NPREVTPXMsYy5NRVRIT0RTPVtcIkNIRUNLT1VUXCIsXCJDT05ORUNUXCIsXCJDT1BZXCIsXCJERUxFVEVcIixcIkdFVFwiLFwiSEVBRFwiLFwiTE9DS1wiLFwiTS1TRUFSQ0hcIixcIk1FUkdFXCIsXCJNS0FDVElWSVRZXCIsXCJNS0NPTFwiLFwiTU9WRVwiLFwiTk9USUZZXCIsXCJPUFRJT05TXCIsXCJQQVRDSFwiLFwiUE9TVFwiLFwiUFJPUEZJTkRcIixcIlBST1BQQVRDSFwiLFwiUFVSR0VcIixcIlBVVFwiLFwiUkVQT1JUXCIsXCJTRUFSQ0hcIixcIlNVQlNDUklCRVwiLFwiVFJBQ0VcIixcIlVOTE9DS1wiLFwiVU5TVUJTQ1JJQkVcIl19LDg3MjU6KGUsdCxyKT0+e3ZhciBuO2Z1bmN0aW9uIGkoKXtpZih2b2lkIDAhPT1uKXJldHVybiBuO2lmKHIuZy5YTUxIdHRwUmVxdWVzdCl7bj1uZXcgci5nLlhNTEh0dHBSZXF1ZXN0O3RyeXtuLm9wZW4oXCJHRVRcIixyLmcuWERvbWFpblJlcXVlc3Q/XCIvXCI6XCJodHRwczovL2V4YW1wbGUuY29tXCIpfWNhdGNoKGUpe249bnVsbH19ZWxzZSBuPW51bGw7cmV0dXJuIG59ZnVuY3Rpb24gbyhlKXt2YXIgdD1pKCk7aWYoIXQpcmV0dXJuITE7dHJ5e3JldHVybiB0LnJlc3BvbnNlVHlwZT1lLHQucmVzcG9uc2VUeXBlPT09ZX1jYXRjaChlKXt9cmV0dXJuITF9ZnVuY3Rpb24gcyhlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfXQuZmV0Y2g9cyhyLmcuZmV0Y2gpJiZzKHIuZy5SZWFkYWJsZVN0cmVhbSksdC53cml0YWJsZVN0cmVhbT1zKHIuZy5Xcml0YWJsZVN0cmVhbSksdC5hYm9ydENvbnRyb2xsZXI9cyhyLmcuQWJvcnRDb250cm9sbGVyKSx0LmFycmF5YnVmZmVyPXQuZmV0Y2h8fG8oXCJhcnJheWJ1ZmZlclwiKSx0Lm1zc3RyZWFtPSF0LmZldGNoJiZvKFwibXMtc3RyZWFtXCIpLHQubW96Y2h1bmtlZGFycmF5YnVmZmVyPSF0LmZldGNoJiZvKFwibW96LWNodW5rZWQtYXJyYXlidWZmZXJcIiksdC5vdmVycmlkZU1pbWVUeXBlPXQuZmV0Y2h8fCEhaSgpJiZzKGkoKS5vdmVycmlkZU1pbWVUeXBlKSxuPW51bGx9LDE5ODk6KGUsdCxyKT0+e3ZhciBuPXIoODc2NCkuQnVmZmVyLGk9cig0MTU1KSxvPXIoODcyNSkscz1yKDU3MTcpLGE9cig1Njc2KSxjPXIoODQ3MyksZj1hLkluY29taW5nTWVzc2FnZSx1PWEucmVhZHlTdGF0ZXMsZD1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQscj10aGlzO2MuV3JpdGFibGUuY2FsbChyKSxyLl9vcHRzPWUsci5fYm9keT1bXSxyLl9oZWFkZXJzPXt9LGUuYXV0aCYmci5zZXRIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsXCJCYXNpYyBcIituLmZyb20oZS5hdXRoKS50b1N0cmluZyhcImJhc2U2NFwiKSksT2JqZWN0LmtleXMoZS5oZWFkZXJzKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyLnNldEhlYWRlcih0LGUuaGVhZGVyc1t0XSl9KSk7dmFyIGk9ITA7aWYoXCJkaXNhYmxlLWZldGNoXCI9PT1lLm1vZGV8fFwicmVxdWVzdFRpbWVvdXRcImluIGUmJiFvLmFib3J0Q29udHJvbGxlcilpPSExLHQ9ITA7ZWxzZSBpZihcInByZWZlci1zdHJlYW1pbmdcIj09PWUubW9kZSl0PSExO2Vsc2UgaWYoXCJhbGxvdy13cm9uZy1jb250ZW50LXR5cGVcIj09PWUubW9kZSl0PSFvLm92ZXJyaWRlTWltZVR5cGU7ZWxzZXtpZihlLm1vZGUmJlwiZGVmYXVsdFwiIT09ZS5tb2RlJiZcInByZWZlci1mYXN0XCIhPT1lLm1vZGUpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0cy5tb2RlXCIpO3Q9ITB9ci5fbW9kZT1mdW5jdGlvbihlLHQpe3JldHVybiBvLmZldGNoJiZ0P1wiZmV0Y2hcIjpvLm1vemNodW5rZWRhcnJheWJ1ZmZlcj9cIm1vei1jaHVua2VkLWFycmF5YnVmZmVyXCI6by5tc3N0cmVhbT9cIm1zLXN0cmVhbVwiOm8uYXJyYXlidWZmZXImJmU/XCJhcnJheWJ1ZmZlclwiOlwidGV4dFwifSh0LGkpLHIuX2ZldGNoVGltZXI9bnVsbCxyLl9zb2NrZXRUaW1lb3V0PW51bGwsci5fc29ja2V0VGltZXI9bnVsbCxyLm9uKFwiZmluaXNoXCIsKGZ1bmN0aW9uKCl7ci5fb25GaW5pc2goKX0pKX07cyhkLGMuV3JpdGFibGUpLGQucHJvdG90eXBlLnNldEhlYWRlcj1mdW5jdGlvbihlLHQpe3ZhciByPWUudG9Mb3dlckNhc2UoKTstMT09PWguaW5kZXhPZihyKSYmKHRoaXMuX2hlYWRlcnNbcl09e25hbWU6ZSx2YWx1ZTp0fSl9LGQucHJvdG90eXBlLmdldEhlYWRlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9oZWFkZXJzW2UudG9Mb3dlckNhc2UoKV07cmV0dXJuIHQ/dC52YWx1ZTpudWxsfSxkLnByb3RvdHlwZS5yZW1vdmVIZWFkZXI9ZnVuY3Rpb24oZSl7ZGVsZXRlIHRoaXMuX2hlYWRlcnNbZS50b0xvd2VyQ2FzZSgpXX0sZC5wcm90b3R5cGUuX29uRmluaXNoPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighZS5fZGVzdHJveWVkKXt2YXIgdD1lLl9vcHRzO1widGltZW91dFwiaW4gdCYmMCE9PXQudGltZW91dCYmZS5zZXRUaW1lb3V0KHQudGltZW91dCk7dmFyIG49ZS5faGVhZGVycyxzPW51bGw7XCJHRVRcIiE9PXQubWV0aG9kJiZcIkhFQURcIiE9PXQubWV0aG9kJiYocz1uZXcgQmxvYihlLl9ib2R5LHt0eXBlOihuW1wiY29udGVudC10eXBlXCJdfHx7fSkudmFsdWV8fFwiXCJ9KSk7dmFyIGE9W107aWYoT2JqZWN0LmtleXMobikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQ9bltlXS5uYW1lLHI9bltlXS52YWx1ZTtBcnJheS5pc0FycmF5KHIpP3IuZm9yRWFjaCgoZnVuY3Rpb24oZSl7YS5wdXNoKFt0LGVdKX0pKTphLnB1c2goW3Qscl0pfSkpLFwiZmV0Y2hcIj09PWUuX21vZGUpe3ZhciBjPW51bGw7aWYoby5hYm9ydENvbnRyb2xsZXIpe3ZhciBmPW5ldyBBYm9ydENvbnRyb2xsZXI7Yz1mLnNpZ25hbCxlLl9mZXRjaEFib3J0Q29udHJvbGxlcj1mLFwicmVxdWVzdFRpbWVvdXRcImluIHQmJjAhPT10LnJlcXVlc3RUaW1lb3V0JiYoZS5fZmV0Y2hUaW1lcj1yLmcuc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmVtaXQoXCJyZXF1ZXN0VGltZW91dFwiKSxlLl9mZXRjaEFib3J0Q29udHJvbGxlciYmZS5fZmV0Y2hBYm9ydENvbnRyb2xsZXIuYWJvcnQoKX0pLHQucmVxdWVzdFRpbWVvdXQpKX1yLmcuZmV0Y2goZS5fb3B0cy51cmwse21ldGhvZDplLl9vcHRzLm1ldGhvZCxoZWFkZXJzOmEsYm9keTpzfHx2b2lkIDAsbW9kZTpcImNvcnNcIixjcmVkZW50aWFsczp0LndpdGhDcmVkZW50aWFscz9cImluY2x1ZGVcIjpcInNhbWUtb3JpZ2luXCIsc2lnbmFsOmN9KS50aGVuKChmdW5jdGlvbih0KXtlLl9mZXRjaFJlc3BvbnNlPXQsZS5fcmVzZXRUaW1lcnMoITEpLGUuX2Nvbm5lY3QoKX0pLChmdW5jdGlvbih0KXtlLl9yZXNldFRpbWVycyghMCksZS5fZGVzdHJveWVkfHxlLmVtaXQoXCJlcnJvclwiLHQpfSkpfWVsc2V7dmFyIGQ9ZS5feGhyPW5ldyByLmcuWE1MSHR0cFJlcXVlc3Q7dHJ5e2Qub3BlbihlLl9vcHRzLm1ldGhvZCxlLl9vcHRzLnVybCwhMCl9Y2F0Y2godCl7cmV0dXJuIHZvaWQgaS5uZXh0VGljaygoZnVuY3Rpb24oKXtlLmVtaXQoXCJlcnJvclwiLHQpfSkpfVwicmVzcG9uc2VUeXBlXCJpbiBkJiYoZC5yZXNwb25zZVR5cGU9ZS5fbW9kZSksXCJ3aXRoQ3JlZGVudGlhbHNcImluIGQmJihkLndpdGhDcmVkZW50aWFscz0hIXQud2l0aENyZWRlbnRpYWxzKSxcInRleHRcIj09PWUuX21vZGUmJlwib3ZlcnJpZGVNaW1lVHlwZVwiaW4gZCYmZC5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKSxcInJlcXVlc3RUaW1lb3V0XCJpbiB0JiYoZC50aW1lb3V0PXQucmVxdWVzdFRpbWVvdXQsZC5vbnRpbWVvdXQ9ZnVuY3Rpb24oKXtlLmVtaXQoXCJyZXF1ZXN0VGltZW91dFwiKX0pLGEuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZC5zZXRSZXF1ZXN0SGVhZGVyKGVbMF0sZVsxXSl9KSksZS5fcmVzcG9uc2U9bnVsbCxkLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3N3aXRjaChkLnJlYWR5U3RhdGUpe2Nhc2UgdS5MT0FESU5HOmNhc2UgdS5ET05FOmUuX29uWEhSUHJvZ3Jlc3MoKX19LFwibW96LWNodW5rZWQtYXJyYXlidWZmZXJcIj09PWUuX21vZGUmJihkLm9ucHJvZ3Jlc3M9ZnVuY3Rpb24oKXtlLl9vblhIUlByb2dyZXNzKCl9KSxkLm9uZXJyb3I9ZnVuY3Rpb24oKXtlLl9kZXN0cm95ZWR8fChlLl9yZXNldFRpbWVycyghMCksZS5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJYSFIgZXJyb3JcIikpKX07dHJ5e2Quc2VuZChzKX1jYXRjaCh0KXtyZXR1cm4gdm9pZCBpLm5leHRUaWNrKChmdW5jdGlvbigpe2UuZW1pdChcImVycm9yXCIsdCl9KSl9fX19LGQucHJvdG90eXBlLl9vblhIUlByb2dyZXNzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9yZXNldFRpbWVycyghMSksZnVuY3Rpb24oZSl7dHJ5e3ZhciB0PWUuc3RhdHVzO3JldHVybiBudWxsIT09dCYmMCE9PXR9Y2F0Y2goZSl7cmV0dXJuITF9fShlLl94aHIpJiYhZS5fZGVzdHJveWVkJiYoZS5fcmVzcG9uc2V8fGUuX2Nvbm5lY3QoKSxlLl9yZXNwb25zZS5fb25YSFJQcm9ncmVzcyhlLl9yZXNldFRpbWVycy5iaW5kKGUpKSl9LGQucHJvdG90eXBlLl9jb25uZWN0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9kZXN0cm95ZWR8fChlLl9yZXNwb25zZT1uZXcgZihlLl94aHIsZS5fZmV0Y2hSZXNwb25zZSxlLl9tb2RlLGUuX3Jlc2V0VGltZXJzLmJpbmQoZSkpLGUuX3Jlc3BvbnNlLm9uKFwiZXJyb3JcIiwoZnVuY3Rpb24odCl7ZS5lbWl0KFwiZXJyb3JcIix0KX0pKSxlLmVtaXQoXCJyZXNwb25zZVwiLGUuX3Jlc3BvbnNlKSl9LGQucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbihlLHQscil7dGhpcy5fYm9keS5wdXNoKGUpLHIoKX0sZC5wcm90b3R5cGUuX3Jlc2V0VGltZXJzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ci5nLmNsZWFyVGltZW91dCh0Ll9zb2NrZXRUaW1lciksdC5fc29ja2V0VGltZXI9bnVsbCxlPyhyLmcuY2xlYXJUaW1lb3V0KHQuX2ZldGNoVGltZXIpLHQuX2ZldGNoVGltZXI9bnVsbCk6dC5fc29ja2V0VGltZW91dCYmKHQuX3NvY2tldFRpbWVyPXIuZy5zZXRUaW1lb3V0KChmdW5jdGlvbigpe3QuZW1pdChcInRpbWVvdXRcIil9KSx0Ll9zb2NrZXRUaW1lb3V0KSl9LGQucHJvdG90eXBlLmFib3J0PWQucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0Ll9kZXN0cm95ZWQ9ITAsdC5fcmVzZXRUaW1lcnMoITApLHQuX3Jlc3BvbnNlJiYodC5fcmVzcG9uc2UuX2Rlc3Ryb3llZD0hMCksdC5feGhyP3QuX3hoci5hYm9ydCgpOnQuX2ZldGNoQWJvcnRDb250cm9sbGVyJiZ0Ll9mZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpLGUmJnQuZW1pdChcImVycm9yXCIsZSl9LGQucHJvdG90eXBlLmVuZD1mdW5jdGlvbihlLHQscil7XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKHI9ZSxlPXZvaWQgMCksYy5Xcml0YWJsZS5wcm90b3R5cGUuZW5kLmNhbGwodGhpcyxlLHQscil9LGQucHJvdG90eXBlLnNldFRpbWVvdXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3QmJnIub25jZShcInRpbWVvdXRcIix0KSxyLl9zb2NrZXRUaW1lb3V0PWUsci5fcmVzZXRUaW1lcnMoITEpfSxkLnByb3RvdHlwZS5mbHVzaEhlYWRlcnM9ZnVuY3Rpb24oKXt9LGQucHJvdG90eXBlLnNldE5vRGVsYXk9ZnVuY3Rpb24oKXt9LGQucHJvdG90eXBlLnNldFNvY2tldEtlZXBBbGl2ZT1mdW5jdGlvbigpe307dmFyIGg9W1wiYWNjZXB0LWNoYXJzZXRcIixcImFjY2VwdC1lbmNvZGluZ1wiLFwiYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1oZWFkZXJzXCIsXCJhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LW1ldGhvZFwiLFwiY29ubmVjdGlvblwiLFwiY29udGVudC1sZW5ndGhcIixcImNvb2tpZVwiLFwiY29va2llMlwiLFwiZGF0ZVwiLFwiZG50XCIsXCJleHBlY3RcIixcImhvc3RcIixcImtlZXAtYWxpdmVcIixcIm9yaWdpblwiLFwicmVmZXJlclwiLFwidGVcIixcInRyYWlsZXJcIixcInRyYW5zZmVyLWVuY29kaW5nXCIsXCJ1cGdyYWRlXCIsXCJ2aWFcIl19LDU2NzY6KGUsdCxyKT0+e3ZhciBuPXIoNDE1NSksaT1yKDg3NjQpLkJ1ZmZlcixvPXIoODcyNSkscz1yKDU3MTcpLGE9cig4NDczKSxjPXQucmVhZHlTdGF0ZXM9e1VOU0VOVDowLE9QRU5FRDoxLEhFQURFUlNfUkVDRUlWRUQ6MixMT0FESU5HOjMsRE9ORTo0fSxmPXQuSW5jb21pbmdNZXNzYWdlPWZ1bmN0aW9uKGUsdCxyLHMpe3ZhciBjPXRoaXM7aWYoYS5SZWFkYWJsZS5jYWxsKGMpLGMuX21vZGU9cixjLmhlYWRlcnM9e30sYy5yYXdIZWFkZXJzPVtdLGMudHJhaWxlcnM9e30sYy5yYXdUcmFpbGVycz1bXSxjLm9uKFwiZW5kXCIsKGZ1bmN0aW9uKCl7bi5uZXh0VGljaygoZnVuY3Rpb24oKXtjLmVtaXQoXCJjbG9zZVwiKX0pKX0pKSxcImZldGNoXCI9PT1yKXtpZihjLl9mZXRjaFJlc3BvbnNlPXQsYy51cmw9dC51cmwsYy5zdGF0dXNDb2RlPXQuc3RhdHVzLGMuc3RhdHVzTWVzc2FnZT10LnN0YXR1c1RleHQsdC5oZWFkZXJzLmZvckVhY2goKGZ1bmN0aW9uKGUsdCl7Yy5oZWFkZXJzW3QudG9Mb3dlckNhc2UoKV09ZSxjLnJhd0hlYWRlcnMucHVzaCh0LGUpfSkpLG8ud3JpdGFibGVTdHJlYW0pe3ZhciBmPW5ldyBXcml0YWJsZVN0cmVhbSh7d3JpdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHMoITEpLG5ldyBQcm9taXNlKChmdW5jdGlvbih0LHIpe2MuX2Rlc3Ryb3llZD9yKCk6Yy5wdXNoKGkuZnJvbShlKSk/dCgpOmMuX3Jlc3VtZUZldGNoPXR9KSl9LGNsb3NlOmZ1bmN0aW9uKCl7cyghMCksYy5fZGVzdHJveWVkfHxjLnB1c2gobnVsbCl9LGFib3J0OmZ1bmN0aW9uKGUpe3MoITApLGMuX2Rlc3Ryb3llZHx8Yy5lbWl0KFwiZXJyb3JcIixlKX19KTt0cnl7cmV0dXJuIHZvaWQgdC5ib2R5LnBpcGVUbyhmKS5jYXRjaCgoZnVuY3Rpb24oZSl7cyghMCksYy5fZGVzdHJveWVkfHxjLmVtaXQoXCJlcnJvclwiLGUpfSkpfWNhdGNoKGUpe319dmFyIHU9dC5ib2R5LmdldFJlYWRlcigpOyFmdW5jdGlvbiBlKCl7dS5yZWFkKCkudGhlbigoZnVuY3Rpb24odCl7Yy5fZGVzdHJveWVkfHwocyh0LmRvbmUpLHQuZG9uZT9jLnB1c2gobnVsbCk6KGMucHVzaChpLmZyb20odC52YWx1ZSkpLGUoKSkpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtzKCEwKSxjLl9kZXN0cm95ZWR8fGMuZW1pdChcImVycm9yXCIsZSl9KSl9KCl9ZWxzZSBpZihjLl94aHI9ZSxjLl9wb3M9MCxjLnVybD1lLnJlc3BvbnNlVVJMLGMuc3RhdHVzQ29kZT1lLnN0YXR1cyxjLnN0YXR1c01lc3NhZ2U9ZS5zdGF0dXNUZXh0LGUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdD1lLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pO2lmKHQpe3ZhciByPXRbMV0udG9Mb3dlckNhc2UoKTtcInNldC1jb29raWVcIj09PXI/KHZvaWQgMD09PWMuaGVhZGVyc1tyXSYmKGMuaGVhZGVyc1tyXT1bXSksYy5oZWFkZXJzW3JdLnB1c2godFsyXSkpOnZvaWQgMCE9PWMuaGVhZGVyc1tyXT9jLmhlYWRlcnNbcl0rPVwiLCBcIit0WzJdOmMuaGVhZGVyc1tyXT10WzJdLGMucmF3SGVhZGVycy5wdXNoKHRbMV0sdFsyXSl9fSkpLGMuX2NoYXJzZXQ9XCJ4LXVzZXItZGVmaW5lZFwiLCFvLm92ZXJyaWRlTWltZVR5cGUpe3ZhciBkPWMucmF3SGVhZGVyc1tcIm1pbWUtdHlwZVwiXTtpZihkKXt2YXIgaD1kLm1hdGNoKC87XFxzKmNoYXJzZXQ9KFteO10pKDt8JCkvKTtoJiYoYy5fY2hhcnNldD1oWzFdLnRvTG93ZXJDYXNlKCkpfWMuX2NoYXJzZXR8fChjLl9jaGFyc2V0PVwidXRmLThcIil9fTtzKGYsYS5SZWFkYWJsZSksZi5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9yZXN1bWVGZXRjaDtlJiYodGhpcy5fcmVzdW1lRmV0Y2g9bnVsbCxlKCkpfSxmLnByb3RvdHlwZS5fb25YSFJQcm9ncmVzcz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dC5feGhyLG89bnVsbDtzd2l0Y2godC5fbW9kZSl7Y2FzZVwidGV4dFwiOmlmKChvPW4ucmVzcG9uc2VUZXh0KS5sZW5ndGg+dC5fcG9zKXt2YXIgcz1vLnN1YnN0cih0Ll9wb3MpO2lmKFwieC11c2VyLWRlZmluZWRcIj09PXQuX2NoYXJzZXQpe2Zvcih2YXIgYT1pLmFsbG9jKHMubGVuZ3RoKSxmPTA7ZjxzLmxlbmd0aDtmKyspYVtmXT0yNTUmcy5jaGFyQ29kZUF0KGYpO3QucHVzaChhKX1lbHNlIHQucHVzaChzLHQuX2NoYXJzZXQpO3QuX3Bvcz1vLmxlbmd0aH1icmVhaztjYXNlXCJhcnJheWJ1ZmZlclwiOmlmKG4ucmVhZHlTdGF0ZSE9PWMuRE9ORXx8IW4ucmVzcG9uc2UpYnJlYWs7bz1uLnJlc3BvbnNlLHQucHVzaChpLmZyb20obmV3IFVpbnQ4QXJyYXkobykpKTticmVhaztjYXNlXCJtb3otY2h1bmtlZC1hcnJheWJ1ZmZlclwiOmlmKG89bi5yZXNwb25zZSxuLnJlYWR5U3RhdGUhPT1jLkxPQURJTkd8fCFvKWJyZWFrO3QucHVzaChpLmZyb20obmV3IFVpbnQ4QXJyYXkobykpKTticmVhaztjYXNlXCJtcy1zdHJlYW1cIjppZihvPW4ucmVzcG9uc2Usbi5yZWFkeVN0YXRlIT09Yy5MT0FESU5HKWJyZWFrO3ZhciB1PW5ldyByLmcuTVNTdHJlYW1SZWFkZXI7dS5vbnByb2dyZXNzPWZ1bmN0aW9uKCl7dS5yZXN1bHQuYnl0ZUxlbmd0aD50Ll9wb3MmJih0LnB1c2goaS5mcm9tKG5ldyBVaW50OEFycmF5KHUucmVzdWx0LnNsaWNlKHQuX3BvcykpKSksdC5fcG9zPXUucmVzdWx0LmJ5dGVMZW5ndGgpfSx1Lm9ubG9hZD1mdW5jdGlvbigpe2UoITApLHQucHVzaChudWxsKX0sdS5yZWFkQXNBcnJheUJ1ZmZlcihvKX10Ll94aHIucmVhZHlTdGF0ZT09PWMuRE9ORSYmXCJtcy1zdHJlYW1cIiE9PXQuX21vZGUmJihlKCEwKSx0LnB1c2gobnVsbCkpfX0sMjU1MzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig5NTA5KS5CdWZmZXIsaT1uLmlzRW5jb2Rpbmd8fGZ1bmN0aW9uKGUpe3N3aXRjaCgoZT1cIlwiK2UpJiZlLnRvTG93ZXJDYXNlKCkpe2Nhc2VcImhleFwiOmNhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwiYmluYXJ5XCI6Y2FzZVwiYmFzZTY0XCI6Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6Y2FzZVwicmF3XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19O2Z1bmN0aW9uIG8oZSl7dmFyIHQ7c3dpdGNoKHRoaXMuZW5jb2Rpbmc9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuXCJ1dGY4XCI7Zm9yKHZhciB0Ozspc3dpdGNoKGUpe2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVyblwidXRmOFwiO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVyblwidXRmMTZsZVwiO2Nhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVyblwibGF0aW4xXCI7Y2FzZVwiYmFzZTY0XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJoZXhcIjpyZXR1cm4gZTtkZWZhdWx0OmlmKHQpcmV0dXJuO2U9KFwiXCIrZSkudG9Mb3dlckNhc2UoKSx0PSEwfX0oZSk7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQmJihuLmlzRW5jb2Rpbmc9PT1pfHwhaShlKSkpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrZSk7cmV0dXJuIHR8fGV9KGUpLHRoaXMuZW5jb2Rpbmcpe2Nhc2VcInV0ZjE2bGVcIjp0aGlzLnRleHQ9Yyx0aGlzLmVuZD1mLHQ9NDticmVhaztjYXNlXCJ1dGY4XCI6dGhpcy5maWxsTGFzdD1hLHQ9NDticmVhaztjYXNlXCJiYXNlNjRcIjp0aGlzLnRleHQ9dSx0aGlzLmVuZD1kLHQ9MzticmVhaztkZWZhdWx0OnJldHVybiB0aGlzLndyaXRlPWgsdm9pZCh0aGlzLmVuZD1sKX10aGlzLmxhc3ROZWVkPTAsdGhpcy5sYXN0VG90YWw9MCx0aGlzLmxhc3RDaGFyPW4uYWxsb2NVbnNhZmUodCl9ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZTw9MTI3PzA6ZT4+NT09Nj8yOmU+PjQ9PTE0PzM6ZT4+Mz09MzA/NDplPj42PT0yPy0xOi0yfWZ1bmN0aW9uIGEoZSl7dmFyIHQ9dGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZCxyPWZ1bmN0aW9uKGUsdCxyKXtpZigxMjghPSgxOTImdFswXSkpcmV0dXJuIGUubGFzdE5lZWQ9MCxcIu+/vVwiO2lmKGUubGFzdE5lZWQ+MSYmdC5sZW5ndGg+MSl7aWYoMTI4IT0oMTkyJnRbMV0pKXJldHVybiBlLmxhc3ROZWVkPTEsXCLvv71cIjtpZihlLmxhc3ROZWVkPjImJnQubGVuZ3RoPjImJjEyOCE9KDE5MiZ0WzJdKSlyZXR1cm4gZS5sYXN0TmVlZD0yLFwi77+9XCJ9fSh0aGlzLGUpO3JldHVybiB2b2lkIDAhPT1yP3I6dGhpcy5sYXN0TmVlZDw9ZS5sZW5ndGg/KGUuY29weSh0aGlzLmxhc3RDaGFyLHQsMCx0aGlzLmxhc3ROZWVkKSx0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsMCx0aGlzLmxhc3RUb3RhbCkpOihlLmNvcHkodGhpcy5sYXN0Q2hhcix0LDAsZS5sZW5ndGgpLHZvaWQodGhpcy5sYXN0TmVlZC09ZS5sZW5ndGgpKX1mdW5jdGlvbiBjKGUsdCl7aWYoKGUubGVuZ3RoLXQpJTI9PTApe3ZhciByPWUudG9TdHJpbmcoXCJ1dGYxNmxlXCIsdCk7aWYocil7dmFyIG49ci5jaGFyQ29kZUF0KHIubGVuZ3RoLTEpO2lmKG4+PTU1Mjk2JiZuPD01NjMxOSlyZXR1cm4gdGhpcy5sYXN0TmVlZD0yLHRoaXMubGFzdFRvdGFsPTQsdGhpcy5sYXN0Q2hhclswXT1lW2UubGVuZ3RoLTJdLHRoaXMubGFzdENoYXJbMV09ZVtlLmxlbmd0aC0xXSxyLnNsaWNlKDAsLTEpfXJldHVybiByfXJldHVybiB0aGlzLmxhc3ROZWVkPTEsdGhpcy5sYXN0VG90YWw9Mix0aGlzLmxhc3RDaGFyWzBdPWVbZS5sZW5ndGgtMV0sZS50b1N0cmluZyhcInV0ZjE2bGVcIix0LGUubGVuZ3RoLTEpfWZ1bmN0aW9uIGYoZSl7dmFyIHQ9ZSYmZS5sZW5ndGg/dGhpcy53cml0ZShlKTpcIlwiO2lmKHRoaXMubGFzdE5lZWQpe3ZhciByPXRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQ7cmV0dXJuIHQrdGhpcy5sYXN0Q2hhci50b1N0cmluZyhcInV0ZjE2bGVcIiwwLHIpfXJldHVybiB0fWZ1bmN0aW9uIHUoZSx0KXt2YXIgcj0oZS5sZW5ndGgtdCklMztyZXR1cm4gMD09PXI/ZS50b1N0cmluZyhcImJhc2U2NFwiLHQpOih0aGlzLmxhc3ROZWVkPTMtcix0aGlzLmxhc3RUb3RhbD0zLDE9PT1yP3RoaXMubGFzdENoYXJbMF09ZVtlLmxlbmd0aC0xXToodGhpcy5sYXN0Q2hhclswXT1lW2UubGVuZ3RoLTJdLHRoaXMubGFzdENoYXJbMV09ZVtlLmxlbmd0aC0xXSksZS50b1N0cmluZyhcImJhc2U2NFwiLHQsZS5sZW5ndGgtcikpfWZ1bmN0aW9uIGQoZSl7dmFyIHQ9ZSYmZS5sZW5ndGg/dGhpcy53cml0ZShlKTpcIlwiO3JldHVybiB0aGlzLmxhc3ROZWVkP3QrdGhpcy5sYXN0Q2hhci50b1N0cmluZyhcImJhc2U2NFwiLDAsMy10aGlzLmxhc3ROZWVkKTp0fWZ1bmN0aW9uIGgoZSl7cmV0dXJuIGUudG9TdHJpbmcodGhpcy5lbmNvZGluZyl9ZnVuY3Rpb24gbChlKXtyZXR1cm4gZSYmZS5sZW5ndGg/dGhpcy53cml0ZShlKTpcIlwifXQucz1vLG8ucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKGUpe2lmKDA9PT1lLmxlbmd0aClyZXR1cm5cIlwiO3ZhciB0LHI7aWYodGhpcy5sYXN0TmVlZCl7aWYodm9pZCAwPT09KHQ9dGhpcy5maWxsTGFzdChlKSkpcmV0dXJuXCJcIjtyPXRoaXMubGFzdE5lZWQsdGhpcy5sYXN0TmVlZD0wfWVsc2Ugcj0wO3JldHVybiByPGUubGVuZ3RoP3Q/dCt0aGlzLnRleHQoZSxyKTp0aGlzLnRleHQoZSxyKTp0fHxcIlwifSxvLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5sZW5ndGg/dGhpcy53cml0ZShlKTpcIlwiO3JldHVybiB0aGlzLmxhc3ROZWVkP3QrXCLvv71cIjp0fSxvLnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQubGVuZ3RoLTE7aWYobjxyKXJldHVybiAwO3ZhciBpPXModFtuXSk7cmV0dXJuIGk+PTA/KGk+MCYmKGUubGFzdE5lZWQ9aS0xKSxpKTotLW48cnx8LTI9PT1pPzA6KGk9cyh0W25dKSk+PTA/KGk+MCYmKGUubGFzdE5lZWQ9aS0yKSxpKTotLW48cnx8LTI9PT1pPzA6KGk9cyh0W25dKSk+PTA/KGk+MCYmKDI9PT1pP2k9MDplLmxhc3ROZWVkPWktMyksaSk6MH0odGhpcyxlLHQpO2lmKCF0aGlzLmxhc3ROZWVkKXJldHVybiBlLnRvU3RyaW5nKFwidXRmOFwiLHQpO3RoaXMubGFzdFRvdGFsPXI7dmFyIG49ZS5sZW5ndGgtKHItdGhpcy5sYXN0TmVlZCk7cmV0dXJuIGUuY29weSh0aGlzLmxhc3RDaGFyLDAsbiksZS50b1N0cmluZyhcInV0ZjhcIix0LG4pfSxvLnByb3RvdHlwZS5maWxsTGFzdD1mdW5jdGlvbihlKXtpZih0aGlzLmxhc3ROZWVkPD1lLmxlbmd0aClyZXR1cm4gZS5jb3B5KHRoaXMubGFzdENoYXIsdGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZCwwLHRoaXMubGFzdE5lZWQpLHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywwLHRoaXMubGFzdFRvdGFsKTtlLmNvcHkodGhpcy5sYXN0Q2hhcix0aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkLDAsZS5sZW5ndGgpLHRoaXMubGFzdE5lZWQtPWUubGVuZ3RofX0sOTYwNDooZSx0LHIpPT57dmFyIG49cigzOTQ0KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGU/ZTpuKGUpP2Uuc2xpY2UoMik6ZX19LDU5NDA6ZT0+e3ZhciB0PXt9LnRvU3RyaW5nO2UuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PXQuY2FsbChlKX19LDU4Njc6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoODIxMiksaT1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0fTtlLmV4cG9ydHM9ZDt2YXIgbz1PYmplY3QuY3JlYXRlKHIoNjQ5NykpO28uaW5oZXJpdHM9cig1NzE3KTt2YXIgcz1yKDI0NDIpLGE9cig3NTkpO28uaW5oZXJpdHMoZCxzKTtmb3IodmFyIGM9aShhLnByb3RvdHlwZSksZj0wO2Y8Yy5sZW5ndGg7ZisrKXt2YXIgdT1jW2ZdO2QucHJvdG90eXBlW3VdfHwoZC5wcm90b3R5cGVbdV09YS5wcm90b3R5cGVbdV0pfWZ1bmN0aW9uIGQoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgZCkpcmV0dXJuIG5ldyBkKGUpO3MuY2FsbCh0aGlzLGUpLGEuY2FsbCh0aGlzLGUpLGUmJiExPT09ZS5yZWFkYWJsZSYmKHRoaXMucmVhZGFibGU9ITEpLGUmJiExPT09ZS53cml0YWJsZSYmKHRoaXMud3JpdGFibGU9ITEpLHRoaXMuYWxsb3dIYWxmT3Blbj0hMCxlJiYhMT09PWUuYWxsb3dIYWxmT3BlbiYmKHRoaXMuYWxsb3dIYWxmT3Blbj0hMSksdGhpcy5vbmNlKFwiZW5kXCIsaCl9ZnVuY3Rpb24gaCgpe3RoaXMuYWxsb3dIYWxmT3Blbnx8dGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZHx8bi5uZXh0VGljayhsLHRoaXMpfWZ1bmN0aW9uIGwoZSl7ZS5lbmQoKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZC5wcm90b3R5cGUsXCJ3cml0YWJsZUhpZ2hXYXRlck1hcmtcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkLnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fcmVhZGFibGVTdGF0ZSYmdm9pZCAwIT09dGhpcy5fd3JpdGFibGVTdGF0ZSYmdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkfSxzZXQ6ZnVuY3Rpb24oZSl7dm9pZCAwIT09dGhpcy5fcmVhZGFibGVTdGF0ZSYmdm9pZCAwIT09dGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkPWUsdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9ZSl9fSksZC5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24oZSx0KXt0aGlzLnB1c2gobnVsbCksdGhpcy5lbmQoKSxuLm5leHRUaWNrKHQsZSl9fSwzNDMxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9bzt2YXIgbj1yKDYyKSxpPU9iamVjdC5jcmVhdGUocig2NDk3KSk7ZnVuY3Rpb24gbyhlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBvKSlyZXR1cm4gbmV3IG8oZSk7bi5jYWxsKHRoaXMsZSl9aS5pbmhlcml0cz1yKDU3MTcpLGkuaW5oZXJpdHMobyxuKSxvLnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKGUsdCxyKXtyKG51bGwsZSl9fSwyNDQyOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQxNTUpLGk9cig4MjEyKTtlLmV4cG9ydHM9djt2YXIgbyxzPXIoNTk0MCk7di5SZWFkYWJsZVN0YXRlPW0scig3MTg3KS5FdmVudEVtaXR0ZXI7dmFyIGE9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5saXN0ZW5lcnModCkubGVuZ3RofSxjPXIoNDEwNCksZj1yKDQ1OTEpLkJ1ZmZlcix1PXIuZy5VaW50OEFycmF5fHxmdW5jdGlvbigpe30sZD1PYmplY3QuY3JlYXRlKHIoNjQ5NykpO2QuaW5oZXJpdHM9cig1NzE3KTt2YXIgaD1yKDY4ODIpLGw9dm9pZCAwO2w9aCYmaC5kZWJ1Z2xvZz9oLmRlYnVnbG9nKFwic3RyZWFtXCIpOmZ1bmN0aW9uKCl7fTt2YXIgcCxiPXIoMzkxMikseT1yKDU1MTMpO2QuaW5oZXJpdHModixjKTt2YXIgZz1bXCJlcnJvclwiLFwiY2xvc2VcIixcImRlc3Ryb3lcIixcInBhdXNlXCIsXCJyZXN1bWVcIl07ZnVuY3Rpb24gbShlLHQpe2U9ZXx8e307dmFyIG49dCBpbnN0YW5jZW9mKG89b3x8cig1ODY3KSk7dGhpcy5vYmplY3RNb2RlPSEhZS5vYmplY3RNb2RlLG4mJih0aGlzLm9iamVjdE1vZGU9dGhpcy5vYmplY3RNb2RlfHwhIWUucmVhZGFibGVPYmplY3RNb2RlKTt2YXIgaT1lLmhpZ2hXYXRlck1hcmsscz1lLnJlYWRhYmxlSGlnaFdhdGVyTWFyayxhPXRoaXMub2JqZWN0TW9kZT8xNjoxNjM4NDt0aGlzLmhpZ2hXYXRlck1hcms9aXx8MD09PWk/aTpuJiYoc3x8MD09PXMpP3M6YSx0aGlzLmhpZ2hXYXRlck1hcms9TWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspLHRoaXMuYnVmZmVyPW5ldyBiLHRoaXMubGVuZ3RoPTAsdGhpcy5waXBlcz1udWxsLHRoaXMucGlwZXNDb3VudD0wLHRoaXMuZmxvd2luZz1udWxsLHRoaXMuZW5kZWQ9ITEsdGhpcy5lbmRFbWl0dGVkPSExLHRoaXMucmVhZGluZz0hMSx0aGlzLnN5bmM9ITAsdGhpcy5uZWVkUmVhZGFibGU9ITEsdGhpcy5lbWl0dGVkUmVhZGFibGU9ITEsdGhpcy5yZWFkYWJsZUxpc3RlbmluZz0hMSx0aGlzLnJlc3VtZVNjaGVkdWxlZD0hMSx0aGlzLmRlc3Ryb3llZD0hMSx0aGlzLmRlZmF1bHRFbmNvZGluZz1lLmRlZmF1bHRFbmNvZGluZ3x8XCJ1dGY4XCIsdGhpcy5hd2FpdERyYWluPTAsdGhpcy5yZWFkaW5nTW9yZT0hMSx0aGlzLmRlY29kZXI9bnVsbCx0aGlzLmVuY29kaW5nPW51bGwsZS5lbmNvZGluZyYmKHB8fChwPXIoNzk4OSkucyksdGhpcy5kZWNvZGVyPW5ldyBwKGUuZW5jb2RpbmcpLHRoaXMuZW5jb2Rpbmc9ZS5lbmNvZGluZyl9ZnVuY3Rpb24gdihlKXtpZihvPW98fHIoNTg2NyksISh0aGlzIGluc3RhbmNlb2YgdikpcmV0dXJuIG5ldyB2KGUpO3RoaXMuX3JlYWRhYmxlU3RhdGU9bmV3IG0oZSx0aGlzKSx0aGlzLnJlYWRhYmxlPSEwLGUmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnJlYWQmJih0aGlzLl9yZWFkPWUucmVhZCksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5kZXN0cm95JiYodGhpcy5fZGVzdHJveT1lLmRlc3Ryb3kpKSxjLmNhbGwodGhpcyl9ZnVuY3Rpb24gdyhlLHQscixuLGkpe3ZhciBvLHM9ZS5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gbnVsbD09PXQ/KHMucmVhZGluZz0hMSxmdW5jdGlvbihlLHQpe2lmKCF0LmVuZGVkKXtpZih0LmRlY29kZXIpe3ZhciByPXQuZGVjb2Rlci5lbmQoKTtyJiZyLmxlbmd0aCYmKHQuYnVmZmVyLnB1c2gociksdC5sZW5ndGgrPXQub2JqZWN0TW9kZT8xOnIubGVuZ3RoKX10LmVuZGVkPSEwLEEoZSl9fShlLHMpKTooaXx8KG89ZnVuY3Rpb24oZSx0KXt2YXIgcixuO3JldHVybiBuPXQsZi5pc0J1ZmZlcihuKXx8biBpbnN0YW5jZW9mIHV8fFwic3RyaW5nXCI9PXR5cGVvZiB0fHx2b2lkIDA9PT10fHxlLm9iamVjdE1vZGV8fChyPW5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rXCIpKSxyfShzLHQpKSxvP2UuZW1pdChcImVycm9yXCIsbyk6cy5vYmplY3RNb2RlfHx0JiZ0Lmxlbmd0aD4wPyhcInN0cmluZ1wiPT10eXBlb2YgdHx8cy5vYmplY3RNb2RlfHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk9PT1mLnByb3RvdHlwZXx8KHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGYuZnJvbShlKX0odCkpLG4/cy5lbmRFbWl0dGVkP2UuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwic3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnRcIikpOl8oZSxzLHQsITApOnMuZW5kZWQ/ZS5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRlwiKSk6KHMucmVhZGluZz0hMSxzLmRlY29kZXImJiFyPyh0PXMuZGVjb2Rlci53cml0ZSh0KSxzLm9iamVjdE1vZGV8fDAhPT10Lmxlbmd0aD9fKGUscyx0LCExKTprKGUscykpOl8oZSxzLHQsITEpKSk6bnx8KHMucmVhZGluZz0hMSkpLGZ1bmN0aW9uKGUpe3JldHVybiFlLmVuZGVkJiYoZS5uZWVkUmVhZGFibGV8fGUubGVuZ3RoPGUuaGlnaFdhdGVyTWFya3x8MD09PWUubGVuZ3RoKX0ocyl9ZnVuY3Rpb24gXyhlLHQscixuKXt0LmZsb3dpbmcmJjA9PT10Lmxlbmd0aCYmIXQuc3luYz8oZS5lbWl0KFwiZGF0YVwiLHIpLGUucmVhZCgwKSk6KHQubGVuZ3RoKz10Lm9iamVjdE1vZGU/MTpyLmxlbmd0aCxuP3QuYnVmZmVyLnVuc2hpZnQocik6dC5idWZmZXIucHVzaChyKSx0Lm5lZWRSZWFkYWJsZSYmQShlKSksayhlLHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2LnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fcmVhZGFibGVTdGF0ZSYmdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9ZSl9fSksdi5wcm90b3R5cGUuZGVzdHJveT15LmRlc3Ryb3ksdi5wcm90b3R5cGUuX3VuZGVzdHJveT15LnVuZGVzdHJveSx2LnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbihlLHQpe3RoaXMucHVzaChudWxsKSx0KGUpfSx2LnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj10aGlzLl9yZWFkYWJsZVN0YXRlO3JldHVybiBuLm9iamVjdE1vZGU/cj0hMDpcInN0cmluZ1wiPT10eXBlb2YgZSYmKCh0PXR8fG4uZGVmYXVsdEVuY29kaW5nKSE9PW4uZW5jb2RpbmcmJihlPWYuZnJvbShlLHQpLHQ9XCJcIikscj0hMCksdyh0aGlzLGUsdCwhMSxyKX0sdi5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbihlKXtyZXR1cm4gdyh0aGlzLGUsbnVsbCwhMCwhMSl9LHYucHJvdG90eXBlLmlzUGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuITE9PT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmd9LHYucHJvdG90eXBlLnNldEVuY29kaW5nPWZ1bmN0aW9uKGUpe3JldHVybiBwfHwocD1yKDc5ODkpLnMpLHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlcj1uZXcgcChlKSx0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nPWUsdGhpc307dmFyIFM9ODM4ODYwODtmdW5jdGlvbiBFKGUsdCl7cmV0dXJuIGU8PTB8fDA9PT10Lmxlbmd0aCYmdC5lbmRlZD8wOnQub2JqZWN0TW9kZT8xOmUhPWU/dC5mbG93aW5nJiZ0Lmxlbmd0aD90LmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoOnQubGVuZ3RoOihlPnQuaGlnaFdhdGVyTWFyayYmKHQuaGlnaFdhdGVyTWFyaz1mdW5jdGlvbihlKXtyZXR1cm4gZT49Uz9lPVM6KGUtLSxlfD1lPj4+MSxlfD1lPj4+MixlfD1lPj4+NCxlfD1lPj4+OCxlfD1lPj4+MTYsZSsrKSxlfShlKSksZTw9dC5sZW5ndGg/ZTp0LmVuZGVkP3QubGVuZ3RoOih0Lm5lZWRSZWFkYWJsZT0hMCwwKSl9ZnVuY3Rpb24gQShlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO3QubmVlZFJlYWRhYmxlPSExLHQuZW1pdHRlZFJlYWRhYmxlfHwobChcImVtaXRSZWFkYWJsZVwiLHQuZmxvd2luZyksdC5lbWl0dGVkUmVhZGFibGU9ITAsdC5zeW5jP2kubmV4dFRpY2soeCxlKTp4KGUpKX1mdW5jdGlvbiB4KGUpe2woXCJlbWl0IHJlYWRhYmxlXCIpLGUuZW1pdChcInJlYWRhYmxlXCIpLEkoZSl9ZnVuY3Rpb24gayhlLHQpe3QucmVhZGluZ01vcmV8fCh0LnJlYWRpbmdNb3JlPSEwLGkubmV4dFRpY2soUCxlLHQpKX1mdW5jdGlvbiBQKGUsdCl7Zm9yKHZhciByPXQubGVuZ3RoOyF0LnJlYWRpbmcmJiF0LmZsb3dpbmcmJiF0LmVuZGVkJiZ0Lmxlbmd0aDx0LmhpZ2hXYXRlck1hcmsmJihsKFwibWF5YmVSZWFkTW9yZSByZWFkIDBcIiksZS5yZWFkKDApLHIhPT10Lmxlbmd0aCk7KXI9dC5sZW5ndGg7dC5yZWFkaW5nTW9yZT0hMX1mdW5jdGlvbiBPKGUpe2woXCJyZWFkYWJsZSBuZXh0dGljayByZWFkIDBcIiksZS5yZWFkKDApfWZ1bmN0aW9uIE0oZSx0KXt0LnJlYWRpbmd8fChsKFwicmVzdW1lIHJlYWQgMFwiKSxlLnJlYWQoMCkpLHQucmVzdW1lU2NoZWR1bGVkPSExLHQuYXdhaXREcmFpbj0wLGUuZW1pdChcInJlc3VtZVwiKSxJKGUpLHQuZmxvd2luZyYmIXQucmVhZGluZyYmZS5yZWFkKDApfWZ1bmN0aW9uIEkoZSl7dmFyIHQ9ZS5fcmVhZGFibGVTdGF0ZTtmb3IobChcImZsb3dcIix0LmZsb3dpbmcpO3QuZmxvd2luZyYmbnVsbCE9PWUucmVhZCgpOyk7fWZ1bmN0aW9uIFQoZSx0KXtyZXR1cm4gMD09PXQubGVuZ3RoP251bGw6KHQub2JqZWN0TW9kZT9yPXQuYnVmZmVyLnNoaWZ0KCk6IWV8fGU+PXQubGVuZ3RoPyhyPXQuZGVjb2Rlcj90LmJ1ZmZlci5qb2luKFwiXCIpOjE9PT10LmJ1ZmZlci5sZW5ndGg/dC5idWZmZXIuaGVhZC5kYXRhOnQuYnVmZmVyLmNvbmNhdCh0Lmxlbmd0aCksdC5idWZmZXIuY2xlYXIoKSk6cj1mdW5jdGlvbihlLHQscil7dmFyIG47cmV0dXJuIGU8dC5oZWFkLmRhdGEubGVuZ3RoPyhuPXQuaGVhZC5kYXRhLnNsaWNlKDAsZSksdC5oZWFkLmRhdGE9dC5oZWFkLmRhdGEuc2xpY2UoZSkpOm49ZT09PXQuaGVhZC5kYXRhLmxlbmd0aD90LnNoaWZ0KCk6cj9mdW5jdGlvbihlLHQpe3ZhciByPXQuaGVhZCxuPTEsaT1yLmRhdGE7Zm9yKGUtPWkubGVuZ3RoO3I9ci5uZXh0Oyl7dmFyIG89ci5kYXRhLHM9ZT5vLmxlbmd0aD9vLmxlbmd0aDplO2lmKHM9PT1vLmxlbmd0aD9pKz1vOmkrPW8uc2xpY2UoMCxlKSwwPT0oZS09cykpe3M9PT1vLmxlbmd0aD8oKytuLHIubmV4dD90LmhlYWQ9ci5uZXh0OnQuaGVhZD10LnRhaWw9bnVsbCk6KHQuaGVhZD1yLHIuZGF0YT1vLnNsaWNlKHMpKTticmVha30rK259cmV0dXJuIHQubGVuZ3RoLT1uLGl9KGUsdCk6ZnVuY3Rpb24oZSx0KXt2YXIgcj1mLmFsbG9jVW5zYWZlKGUpLG49dC5oZWFkLGk9MTtmb3Iobi5kYXRhLmNvcHkociksZS09bi5kYXRhLmxlbmd0aDtuPW4ubmV4dDspe3ZhciBvPW4uZGF0YSxzPWU+by5sZW5ndGg/by5sZW5ndGg6ZTtpZihvLmNvcHkocixyLmxlbmd0aC1lLDAscyksMD09KGUtPXMpKXtzPT09by5sZW5ndGg/KCsraSxuLm5leHQ/dC5oZWFkPW4ubmV4dDp0LmhlYWQ9dC50YWlsPW51bGwpOih0LmhlYWQ9bixuLmRhdGE9by5zbGljZShzKSk7YnJlYWt9KytpfXJldHVybiB0Lmxlbmd0aC09aSxyfShlLHQpLG59KGUsdC5idWZmZXIsdC5kZWNvZGVyKSxyKTt2YXIgcn1mdW5jdGlvbiBSKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7aWYodC5sZW5ndGg+MCl0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7dC5lbmRFbWl0dGVkfHwodC5lbmRlZD0hMCxpLm5leHRUaWNrKE4sdCxlKSl9ZnVuY3Rpb24gTihlLHQpe2UuZW5kRW1pdHRlZHx8MCE9PWUubGVuZ3RofHwoZS5lbmRFbWl0dGVkPSEwLHQucmVhZGFibGU9ITEsdC5lbWl0KFwiZW5kXCIpKX1mdW5jdGlvbiBDKGUsdCl7Zm9yKHZhciByPTAsbj1lLmxlbmd0aDtyPG47cisrKWlmKGVbcl09PT10KXJldHVybiByO3JldHVybi0xfXYucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24oZSl7bChcInJlYWRcIixlKSxlPXBhcnNlSW50KGUsMTApO3ZhciB0PXRoaXMuX3JlYWRhYmxlU3RhdGUscj1lO2lmKDAhPT1lJiYodC5lbWl0dGVkUmVhZGFibGU9ITEpLDA9PT1lJiZ0Lm5lZWRSZWFkYWJsZSYmKHQubGVuZ3RoPj10LmhpZ2hXYXRlck1hcmt8fHQuZW5kZWQpKXJldHVybiBsKFwicmVhZDogZW1pdFJlYWRhYmxlXCIsdC5sZW5ndGgsdC5lbmRlZCksMD09PXQubGVuZ3RoJiZ0LmVuZGVkP1IodGhpcyk6QSh0aGlzKSxudWxsO2lmKDA9PT0oZT1FKGUsdCkpJiZ0LmVuZGVkKXJldHVybiAwPT09dC5sZW5ndGgmJlIodGhpcyksbnVsbDt2YXIgbixpPXQubmVlZFJlYWRhYmxlO3JldHVybiBsKFwibmVlZCByZWFkYWJsZVwiLGkpLCgwPT09dC5sZW5ndGh8fHQubGVuZ3RoLWU8dC5oaWdoV2F0ZXJNYXJrKSYmbChcImxlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrXCIsaT0hMCksdC5lbmRlZHx8dC5yZWFkaW5nP2woXCJyZWFkaW5nIG9yIGVuZGVkXCIsaT0hMSk6aSYmKGwoXCJkbyByZWFkXCIpLHQucmVhZGluZz0hMCx0LnN5bmM9ITAsMD09PXQubGVuZ3RoJiYodC5uZWVkUmVhZGFibGU9ITApLHRoaXMuX3JlYWQodC5oaWdoV2F0ZXJNYXJrKSx0LnN5bmM9ITEsdC5yZWFkaW5nfHwoZT1FKHIsdCkpKSxudWxsPT09KG49ZT4wP1QoZSx0KTpudWxsKT8odC5uZWVkUmVhZGFibGU9ITAsZT0wKTp0Lmxlbmd0aC09ZSwwPT09dC5sZW5ndGgmJih0LmVuZGVkfHwodC5uZWVkUmVhZGFibGU9ITApLHIhPT1lJiZ0LmVuZGVkJiZSKHRoaXMpKSxudWxsIT09biYmdGhpcy5lbWl0KFwiZGF0YVwiLG4pLG59LHYucHJvdG90eXBlLl9yZWFkPWZ1bmN0aW9uKGUpe3RoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWRcIikpfSx2LnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcyxvPXRoaXMuX3JlYWRhYmxlU3RhdGU7c3dpdGNoKG8ucGlwZXNDb3VudCl7Y2FzZSAwOm8ucGlwZXM9ZTticmVhaztjYXNlIDE6by5waXBlcz1bby5waXBlcyxlXTticmVhaztkZWZhdWx0Om8ucGlwZXMucHVzaChlKX1vLnBpcGVzQ291bnQrPTEsbChcInBpcGUgY291bnQ9JWQgb3B0cz0lalwiLG8ucGlwZXNDb3VudCx0KTt2YXIgYz10JiYhMT09PXQuZW5kfHxlPT09bi5zdGRvdXR8fGU9PT1uLnN0ZGVycj9tOmY7ZnVuY3Rpb24gZigpe2woXCJvbmVuZFwiKSxlLmVuZCgpfW8uZW5kRW1pdHRlZD9pLm5leHRUaWNrKGMpOnIub25jZShcImVuZFwiLGMpLGUub24oXCJ1bnBpcGVcIiwoZnVuY3Rpb24gdChuLGkpe2woXCJvbnVucGlwZVwiKSxuPT09ciYmaSYmITE9PT1pLmhhc1VucGlwZWQmJihpLmhhc1VucGlwZWQ9ITAsbChcImNsZWFudXBcIiksZS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIseSksZS5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLGcpLGUucmVtb3ZlTGlzdGVuZXIoXCJkcmFpblwiLHUpLGUucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGIpLGUucmVtb3ZlTGlzdGVuZXIoXCJ1bnBpcGVcIix0KSxyLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsZiksci5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLG0pLHIucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIscCksZD0hMCwhby5hd2FpdERyYWlufHxlLl93cml0YWJsZVN0YXRlJiYhZS5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW58fHUoKSl9KSk7dmFyIHU9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9ZS5fcmVhZGFibGVTdGF0ZTtsKFwicGlwZU9uRHJhaW5cIix0LmF3YWl0RHJhaW4pLHQuYXdhaXREcmFpbiYmdC5hd2FpdERyYWluLS0sMD09PXQuYXdhaXREcmFpbiYmYShlLFwiZGF0YVwiKSYmKHQuZmxvd2luZz0hMCxJKGUpKX19KHIpO2Uub24oXCJkcmFpblwiLHUpO3ZhciBkPSExLGg9ITE7ZnVuY3Rpb24gcCh0KXtsKFwib25kYXRhXCIpLGg9ITEsITEhPT1lLndyaXRlKHQpfHxofHwoKDE9PT1vLnBpcGVzQ291bnQmJm8ucGlwZXM9PT1lfHxvLnBpcGVzQ291bnQ+MSYmLTEhPT1DKG8ucGlwZXMsZSkpJiYhZCYmKGwoXCJmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2VcIixyLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pLHIuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrLGg9ITApLHIucGF1c2UoKSl9ZnVuY3Rpb24gYih0KXtsKFwib25lcnJvclwiLHQpLG0oKSxlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixiKSwwPT09YShlLFwiZXJyb3JcIikmJmUuZW1pdChcImVycm9yXCIsdCl9ZnVuY3Rpb24geSgpe2UucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixnKSxtKCl9ZnVuY3Rpb24gZygpe2woXCJvbmZpbmlzaFwiKSxlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIix5KSxtKCl9ZnVuY3Rpb24gbSgpe2woXCJ1bnBpcGVcIiksci51bnBpcGUoZSl9cmV0dXJuIHIub24oXCJkYXRhXCIscCksZnVuY3Rpb24oZSx0LHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUucHJlcGVuZExpc3RlbmVyKXJldHVybiBlLnByZXBlbmRMaXN0ZW5lcih0LHIpO2UuX2V2ZW50cyYmZS5fZXZlbnRzLmVycm9yP3MoZS5fZXZlbnRzLmVycm9yKT9lLl9ldmVudHMuZXJyb3IudW5zaGlmdChyKTplLl9ldmVudHMuZXJyb3I9W3IsZS5fZXZlbnRzLmVycm9yXTplLm9uKHQscil9KGUsXCJlcnJvclwiLGIpLGUub25jZShcImNsb3NlXCIseSksZS5vbmNlKFwiZmluaXNoXCIsZyksZS5lbWl0KFwicGlwZVwiLHIpLG8uZmxvd2luZ3x8KGwoXCJwaXBlIHJlc3VtZVwiKSxyLnJlc3VtZSgpKSxlfSx2LnByb3RvdHlwZS51bnBpcGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fcmVhZGFibGVTdGF0ZSxyPXtoYXNVbnBpcGVkOiExfTtpZigwPT09dC5waXBlc0NvdW50KXJldHVybiB0aGlzO2lmKDE9PT10LnBpcGVzQ291bnQpcmV0dXJuIGUmJmUhPT10LnBpcGVzfHwoZXx8KGU9dC5waXBlcyksdC5waXBlcz1udWxsLHQucGlwZXNDb3VudD0wLHQuZmxvd2luZz0hMSxlJiZlLmVtaXQoXCJ1bnBpcGVcIix0aGlzLHIpKSx0aGlzO2lmKCFlKXt2YXIgbj10LnBpcGVzLGk9dC5waXBlc0NvdW50O3QucGlwZXM9bnVsbCx0LnBpcGVzQ291bnQ9MCx0LmZsb3dpbmc9ITE7Zm9yKHZhciBvPTA7bzxpO28rKyluW29dLmVtaXQoXCJ1bnBpcGVcIix0aGlzLHIpO3JldHVybiB0aGlzfXZhciBzPUModC5waXBlcyxlKTtyZXR1cm4tMT09PXN8fCh0LnBpcGVzLnNwbGljZShzLDEpLHQucGlwZXNDb3VudC09MSwxPT09dC5waXBlc0NvdW50JiYodC5waXBlcz10LnBpcGVzWzBdKSxlLmVtaXQoXCJ1bnBpcGVcIix0aGlzLHIpKSx0aGlzfSx2LnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLHQpe3ZhciByPWMucHJvdG90eXBlLm9uLmNhbGwodGhpcyxlLHQpO2lmKFwiZGF0YVwiPT09ZSkhMSE9PXRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyYmdGhpcy5yZXN1bWUoKTtlbHNlIGlmKFwicmVhZGFibGVcIj09PWUpe3ZhciBuPXRoaXMuX3JlYWRhYmxlU3RhdGU7bi5lbmRFbWl0dGVkfHxuLnJlYWRhYmxlTGlzdGVuaW5nfHwobi5yZWFkYWJsZUxpc3RlbmluZz1uLm5lZWRSZWFkYWJsZT0hMCxuLmVtaXR0ZWRSZWFkYWJsZT0hMSxuLnJlYWRpbmc/bi5sZW5ndGgmJkEodGhpcyk6aS5uZXh0VGljayhPLHRoaXMpKX1yZXR1cm4gcn0sdi5wcm90b3R5cGUuYWRkTGlzdGVuZXI9di5wcm90b3R5cGUub24sdi5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gZS5mbG93aW5nfHwobChcInJlc3VtZVwiKSxlLmZsb3dpbmc9ITAsZnVuY3Rpb24oZSx0KXt0LnJlc3VtZVNjaGVkdWxlZHx8KHQucmVzdW1lU2NoZWR1bGVkPSEwLGkubmV4dFRpY2soTSxlLHQpKX0odGhpcyxlKSksdGhpc30sdi5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXtyZXR1cm4gbChcImNhbGwgcGF1c2UgZmxvd2luZz0lalwiLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyksITEhPT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcmJihsKFwicGF1c2VcIiksdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPSExLHRoaXMuZW1pdChcInBhdXNlXCIpKSx0aGlzfSx2LnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzLl9yZWFkYWJsZVN0YXRlLG49ITE7Zm9yKHZhciBpIGluIGUub24oXCJlbmRcIiwoZnVuY3Rpb24oKXtpZihsKFwid3JhcHBlZCBlbmRcIiksci5kZWNvZGVyJiYhci5lbmRlZCl7dmFyIGU9ci5kZWNvZGVyLmVuZCgpO2UmJmUubGVuZ3RoJiZ0LnB1c2goZSl9dC5wdXNoKG51bGwpfSkpLGUub24oXCJkYXRhXCIsKGZ1bmN0aW9uKGkpe2woXCJ3cmFwcGVkIGRhdGFcIiksci5kZWNvZGVyJiYoaT1yLmRlY29kZXIud3JpdGUoaSkpLHIub2JqZWN0TW9kZSYmbnVsbD09aXx8KHIub2JqZWN0TW9kZXx8aSYmaS5sZW5ndGgpJiYodC5wdXNoKGkpfHwobj0hMCxlLnBhdXNlKCkpKX0pKSxlKXZvaWQgMD09PXRoaXNbaV0mJlwiZnVuY3Rpb25cIj09dHlwZW9mIGVbaV0mJih0aGlzW2ldPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlW3RdLmFwcGx5KGUsYXJndW1lbnRzKX19KGkpKTtmb3IodmFyIG89MDtvPGcubGVuZ3RoO28rKyllLm9uKGdbb10sdGhpcy5lbWl0LmJpbmQodGhpcyxnW29dKSk7cmV0dXJuIHRoaXMuX3JlYWQ9ZnVuY3Rpb24odCl7bChcIndyYXBwZWQgX3JlYWRcIix0KSxuJiYobj0hMSxlLnJlc3VtZSgpKX0sdGhpc30sT2JqZWN0LmRlZmluZVByb3BlcnR5KHYucHJvdG90eXBlLFwicmVhZGFibGVIaWdoV2F0ZXJNYXJrXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFya319KSx2Ll9mcm9tTGlzdD1UfSw2MjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXM7dmFyIG49cig1ODY3KSxpPU9iamVjdC5jcmVhdGUocig2NDk3KSk7ZnVuY3Rpb24gbyhlLHQpe3ZhciByPXRoaXMuX3RyYW5zZm9ybVN0YXRlO3IudHJhbnNmb3JtaW5nPSExO3ZhciBuPXIud3JpdGVjYjtpZighbilyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJ3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXNcIikpO3Iud3JpdGVjaHVuaz1udWxsLHIud3JpdGVjYj1udWxsLG51bGwhPXQmJnRoaXMucHVzaCh0KSxuKGUpO3ZhciBpPXRoaXMuX3JlYWRhYmxlU3RhdGU7aS5yZWFkaW5nPSExLChpLm5lZWRSZWFkYWJsZXx8aS5sZW5ndGg8aS5oaWdoV2F0ZXJNYXJrKSYmdGhpcy5fcmVhZChpLmhpZ2hXYXRlck1hcmspfWZ1bmN0aW9uIHMoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcykpcmV0dXJuIG5ldyBzKGUpO24uY2FsbCh0aGlzLGUpLHRoaXMuX3RyYW5zZm9ybVN0YXRlPXthZnRlclRyYW5zZm9ybTpvLmJpbmQodGhpcyksbmVlZFRyYW5zZm9ybTohMSx0cmFuc2Zvcm1pbmc6ITEsd3JpdGVjYjpudWxsLHdyaXRlY2h1bms6bnVsbCx3cml0ZWVuY29kaW5nOm51bGx9LHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlPSEwLHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYz0hMSxlJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS50cmFuc2Zvcm0mJih0aGlzLl90cmFuc2Zvcm09ZS50cmFuc2Zvcm0pLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZmx1c2gmJih0aGlzLl9mbHVzaD1lLmZsdXNoKSksdGhpcy5vbihcInByZWZpbmlzaFwiLGEpfWZ1bmN0aW9uIGEoKXt2YXIgZT10aGlzO1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuX2ZsdXNoP3RoaXMuX2ZsdXNoKChmdW5jdGlvbih0LHIpe2MoZSx0LHIpfSkpOmModGhpcyxudWxsLG51bGwpfWZ1bmN0aW9uIGMoZSx0LHIpe2lmKHQpcmV0dXJuIGUuZW1pdChcImVycm9yXCIsdCk7aWYobnVsbCE9ciYmZS5wdXNoKHIpLGUuX3dyaXRhYmxlU3RhdGUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkNhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMFwiKTtpZihlLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpdGhyb3cgbmV3IEVycm9yKFwiQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZ1wiKTtyZXR1cm4gZS5wdXNoKG51bGwpfWkuaW5oZXJpdHM9cig1NzE3KSxpLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtPSExLG4ucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLGUsdCl9LHMucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24oZSx0LHIpe3Rocm93IG5ldyBFcnJvcihcIl90cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWRcIil9LHMucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbihlLHQscil7dmFyIG49dGhpcy5fdHJhbnNmb3JtU3RhdGU7aWYobi53cml0ZWNiPXIsbi53cml0ZWNodW5rPWUsbi53cml0ZWVuY29kaW5nPXQsIW4udHJhbnNmb3JtaW5nKXt2YXIgaT10aGlzLl9yZWFkYWJsZVN0YXRlOyhuLm5lZWRUcmFuc2Zvcm18fGkubmVlZFJlYWRhYmxlfHxpLmxlbmd0aDxpLmhpZ2hXYXRlck1hcmspJiZ0aGlzLl9yZWFkKGkuaGlnaFdhdGVyTWFyayl9fSxzLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl90cmFuc2Zvcm1TdGF0ZTtudWxsIT09dC53cml0ZWNodW5rJiZ0LndyaXRlY2ImJiF0LnRyYW5zZm9ybWluZz8odC50cmFuc2Zvcm1pbmc9ITAsdGhpcy5fdHJhbnNmb3JtKHQud3JpdGVjaHVuayx0LndyaXRlZW5jb2RpbmcsdC5hZnRlclRyYW5zZm9ybSkpOnQubmVlZFRyYW5zZm9ybT0hMH0scy5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO24ucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcyxlLChmdW5jdGlvbihlKXt0KGUpLHIuZW1pdChcImNsb3NlXCIpfSkpfX0sNzU5OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQxNTUpLGk9cig4MjEyKTtmdW5jdGlvbiBvKGUpe3ZhciB0PXRoaXM7dGhpcy5uZXh0PW51bGwsdGhpcy5lbnRyeT1udWxsLHRoaXMuZmluaXNoPWZ1bmN0aW9uKCl7IWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1lLmVudHJ5O2ZvcihlLmVudHJ5PW51bGw7bjspe3ZhciBpPW4uY2FsbGJhY2s7dC5wZW5kaW5nY2ItLSxpKHVuZGVmaW5lZCksbj1uLm5leHR9dC5jb3JrZWRSZXF1ZXN0c0ZyZWU/dC5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dD1lOnQuY29ya2VkUmVxdWVzdHNGcmVlPWV9KHQsZSl9fWUuZXhwb3J0cz1nO3ZhciBzLGE9IW4uYnJvd3NlciYmW1widjAuMTBcIixcInYwLjkuXCJdLmluZGV4T2Yobi52ZXJzaW9uLnNsaWNlKDAsNSkpPi0xP3NldEltbWVkaWF0ZTppLm5leHRUaWNrO2cuV3JpdGFibGVTdGF0ZT15O3ZhciBjPU9iamVjdC5jcmVhdGUocig2NDk3KSk7Yy5pbmhlcml0cz1yKDU3MTcpO3ZhciBmLHU9e2RlcHJlY2F0ZTpyKDQ5MjcpfSxkPXIoNDEwNCksaD1yKDQ1OTEpLkJ1ZmZlcixsPXIuZy5VaW50OEFycmF5fHxmdW5jdGlvbigpe30scD1yKDU1MTMpO2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24geShlLHQpe3M9c3x8cig1ODY3KSxlPWV8fHt9O3ZhciBuPXQgaW5zdGFuY2VvZiBzO3RoaXMub2JqZWN0TW9kZT0hIWUub2JqZWN0TW9kZSxuJiYodGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISFlLndyaXRhYmxlT2JqZWN0TW9kZSk7dmFyIGM9ZS5oaWdoV2F0ZXJNYXJrLGY9ZS53cml0YWJsZUhpZ2hXYXRlck1hcmssdT10aGlzLm9iamVjdE1vZGU/MTY6MTYzODQ7dGhpcy5oaWdoV2F0ZXJNYXJrPWN8fDA9PT1jP2M6biYmKGZ8fDA9PT1mKT9mOnUsdGhpcy5oaWdoV2F0ZXJNYXJrPU1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKSx0aGlzLmZpbmFsQ2FsbGVkPSExLHRoaXMubmVlZERyYWluPSExLHRoaXMuZW5kaW5nPSExLHRoaXMuZW5kZWQ9ITEsdGhpcy5maW5pc2hlZD0hMSx0aGlzLmRlc3Ryb3llZD0hMTt2YXIgZD0hMT09PWUuZGVjb2RlU3RyaW5nczt0aGlzLmRlY29kZVN0cmluZ3M9IWQsdGhpcy5kZWZhdWx0RW5jb2Rpbmc9ZS5kZWZhdWx0RW5jb2Rpbmd8fFwidXRmOFwiLHRoaXMubGVuZ3RoPTAsdGhpcy53cml0aW5nPSExLHRoaXMuY29ya2VkPTAsdGhpcy5zeW5jPSEwLHRoaXMuYnVmZmVyUHJvY2Vzc2luZz0hMSx0aGlzLm9ud3JpdGU9ZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5fd3JpdGFibGVTdGF0ZSxuPXIuc3luYyxvPXIud3JpdGVjYjtpZihmdW5jdGlvbihlKXtlLndyaXRpbmc9ITEsZS53cml0ZWNiPW51bGwsZS5sZW5ndGgtPWUud3JpdGVsZW4sZS53cml0ZWxlbj0wfShyKSx0KSFmdW5jdGlvbihlLHQscixuLG8pey0tdC5wZW5kaW5nY2Iscj8oaS5uZXh0VGljayhvLG4pLGkubmV4dFRpY2soRSxlLHQpLGUuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLGUuZW1pdChcImVycm9yXCIsbikpOihvKG4pLGUuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLGUuZW1pdChcImVycm9yXCIsbiksRShlLHQpKX0oZSxyLG4sdCxvKTtlbHNle3ZhciBzPV8ocik7c3x8ci5jb3JrZWR8fHIuYnVmZmVyUHJvY2Vzc2luZ3x8IXIuYnVmZmVyZWRSZXF1ZXN0fHx3KGUsciksbj9hKHYsZSxyLHMsbyk6dihlLHIscyxvKX19KHQsZSl9LHRoaXMud3JpdGVjYj1udWxsLHRoaXMud3JpdGVsZW49MCx0aGlzLmJ1ZmZlcmVkUmVxdWVzdD1udWxsLHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsLHRoaXMucGVuZGluZ2NiPTAsdGhpcy5wcmVmaW5pc2hlZD0hMSx0aGlzLmVycm9yRW1pdHRlZD0hMSx0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50PTAsdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWU9bmV3IG8odGhpcyl9ZnVuY3Rpb24gZyhlKXtpZihzPXN8fHIoNTg2NyksIShmLmNhbGwoZyx0aGlzKXx8dGhpcyBpbnN0YW5jZW9mIHMpKXJldHVybiBuZXcgZyhlKTt0aGlzLl93cml0YWJsZVN0YXRlPW5ldyB5KGUsdGhpcyksdGhpcy53cml0YWJsZT0hMCxlJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS53cml0ZSYmKHRoaXMuX3dyaXRlPWUud3JpdGUpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUud3JpdGV2JiYodGhpcy5fd3JpdGV2PWUud3JpdGV2KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmRlc3Ryb3kmJih0aGlzLl9kZXN0cm95PWUuZGVzdHJveSksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5maW5hbCYmKHRoaXMuX2ZpbmFsPWUuZmluYWwpKSxkLmNhbGwodGhpcyl9ZnVuY3Rpb24gbShlLHQscixuLGksbyxzKXt0LndyaXRlbGVuPW4sdC53cml0ZWNiPXMsdC53cml0aW5nPSEwLHQuc3luYz0hMCxyP2UuX3dyaXRldihpLHQub253cml0ZSk6ZS5fd3JpdGUoaSxvLHQub253cml0ZSksdC5zeW5jPSExfWZ1bmN0aW9uIHYoZSx0LHIsbil7cnx8ZnVuY3Rpb24oZSx0KXswPT09dC5sZW5ndGgmJnQubmVlZERyYWluJiYodC5uZWVkRHJhaW49ITEsZS5lbWl0KFwiZHJhaW5cIikpfShlLHQpLHQucGVuZGluZ2NiLS0sbigpLEUoZSx0KX1mdW5jdGlvbiB3KGUsdCl7dC5idWZmZXJQcm9jZXNzaW5nPSEwO3ZhciByPXQuYnVmZmVyZWRSZXF1ZXN0O2lmKGUuX3dyaXRldiYmciYmci5uZXh0KXt2YXIgbj10LmJ1ZmZlcmVkUmVxdWVzdENvdW50LGk9bmV3IEFycmF5KG4pLHM9dC5jb3JrZWRSZXF1ZXN0c0ZyZWU7cy5lbnRyeT1yO2Zvcih2YXIgYT0wLGM9ITA7cjspaVthXT1yLHIuaXNCdWZ8fChjPSExKSxyPXIubmV4dCxhKz0xO2kuYWxsQnVmZmVycz1jLG0oZSx0LCEwLHQubGVuZ3RoLGksXCJcIixzLmZpbmlzaCksdC5wZW5kaW5nY2IrKyx0Lmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCxzLm5leHQ/KHQuY29ya2VkUmVxdWVzdHNGcmVlPXMubmV4dCxzLm5leHQ9bnVsbCk6dC5jb3JrZWRSZXF1ZXN0c0ZyZWU9bmV3IG8odCksdC5idWZmZXJlZFJlcXVlc3RDb3VudD0wfWVsc2V7Zm9yKDtyOyl7dmFyIGY9ci5jaHVuayx1PXIuZW5jb2RpbmcsZD1yLmNhbGxiYWNrO2lmKG0oZSx0LCExLHQub2JqZWN0TW9kZT8xOmYubGVuZ3RoLGYsdSxkKSxyPXIubmV4dCx0LmJ1ZmZlcmVkUmVxdWVzdENvdW50LS0sdC53cml0aW5nKWJyZWFrfW51bGw9PT1yJiYodC5sYXN0QnVmZmVyZWRSZXF1ZXN0PW51bGwpfXQuYnVmZmVyZWRSZXF1ZXN0PXIsdC5idWZmZXJQcm9jZXNzaW5nPSExfWZ1bmN0aW9uIF8oZSl7cmV0dXJuIGUuZW5kaW5nJiYwPT09ZS5sZW5ndGgmJm51bGw9PT1lLmJ1ZmZlcmVkUmVxdWVzdCYmIWUuZmluaXNoZWQmJiFlLndyaXRpbmd9ZnVuY3Rpb24gUyhlLHQpe2UuX2ZpbmFsKChmdW5jdGlvbihyKXt0LnBlbmRpbmdjYi0tLHImJmUuZW1pdChcImVycm9yXCIsciksdC5wcmVmaW5pc2hlZD0hMCxlLmVtaXQoXCJwcmVmaW5pc2hcIiksRShlLHQpfSkpfWZ1bmN0aW9uIEUoZSx0KXt2YXIgcj1fKHQpO3JldHVybiByJiYoZnVuY3Rpb24oZSx0KXt0LnByZWZpbmlzaGVkfHx0LmZpbmFsQ2FsbGVkfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5fZmluYWw/KHQucGVuZGluZ2NiKyssdC5maW5hbENhbGxlZD0hMCxpLm5leHRUaWNrKFMsZSx0KSk6KHQucHJlZmluaXNoZWQ9ITAsZS5lbWl0KFwicHJlZmluaXNoXCIpKSl9KGUsdCksMD09PXQucGVuZGluZ2NiJiYodC5maW5pc2hlZD0hMCxlLmVtaXQoXCJmaW5pc2hcIikpKSxyfWMuaW5oZXJpdHMoZyxkKSx5LnByb3RvdHlwZS5nZXRCdWZmZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5idWZmZXJlZFJlcXVlc3QsdD1bXTtlOyl0LnB1c2goZSksZT1lLm5leHQ7cmV0dXJuIHR9LGZ1bmN0aW9uKCl7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LnByb3RvdHlwZSxcImJ1ZmZlclwiLHtnZXQ6dS5kZXByZWNhdGUoKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCl9KSxcIl93cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyIGluc3RlYWQuXCIsXCJERVAwMDAzXCIpfSl9Y2F0Y2goZSl7fX0oKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5oYXNJbnN0YW5jZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0/KGY9RnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGcsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4hIWYuY2FsbCh0aGlzLGUpfHx0aGlzPT09ZyYmZSYmZS5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIHl9fSkpOmY9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0aGlzfSxnLnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKCl7dGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlXCIpKX0sZy5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLG89dGhpcy5fd3JpdGFibGVTdGF0ZSxzPSExLGE9IW8ub2JqZWN0TW9kZSYmKG49ZSxoLmlzQnVmZmVyKG4pfHxuIGluc3RhbmNlb2YgbCk7cmV0dXJuIGEmJiFoLmlzQnVmZmVyKGUpJiYoZT1mdW5jdGlvbihlKXtyZXR1cm4gaC5mcm9tKGUpfShlKSksXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHI9dCx0PW51bGwpLGE/dD1cImJ1ZmZlclwiOnR8fCh0PW8uZGVmYXVsdEVuY29kaW5nKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiByJiYocj1iKSxvLmVuZGVkP2Z1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IEVycm9yKFwid3JpdGUgYWZ0ZXIgZW5kXCIpO2UuZW1pdChcImVycm9yXCIsciksaS5uZXh0VGljayh0LHIpfSh0aGlzLHIpOihhfHxmdW5jdGlvbihlLHQscixuKXt2YXIgbz0hMCxzPSExO3JldHVybiBudWxsPT09cj9zPW5ldyBUeXBlRXJyb3IoXCJNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbVwiKTpcInN0cmluZ1wiPT10eXBlb2Ygcnx8dm9pZCAwPT09cnx8dC5vYmplY3RNb2RlfHwocz1uZXcgVHlwZUVycm9yKFwiSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVua1wiKSkscyYmKGUuZW1pdChcImVycm9yXCIscyksaS5uZXh0VGljayhuLHMpLG89ITEpLG99KHRoaXMsbyxlLHIpKSYmKG8ucGVuZGluZ2NiKysscz1mdW5jdGlvbihlLHQscixuLGksbyl7aWYoIXIpe3ZhciBzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZS5vYmplY3RNb2RlfHwhMT09PWUuZGVjb2RlU3RyaW5nc3x8XCJzdHJpbmdcIiE9dHlwZW9mIHR8fCh0PWguZnJvbSh0LHIpKSx0fSh0LG4saSk7biE9PXMmJihyPSEwLGk9XCJidWZmZXJcIixuPXMpfXZhciBhPXQub2JqZWN0TW9kZT8xOm4ubGVuZ3RoO3QubGVuZ3RoKz1hO3ZhciBjPXQubGVuZ3RoPHQuaGlnaFdhdGVyTWFyaztpZihjfHwodC5uZWVkRHJhaW49ITApLHQud3JpdGluZ3x8dC5jb3JrZWQpe3ZhciBmPXQubGFzdEJ1ZmZlcmVkUmVxdWVzdDt0Lmxhc3RCdWZmZXJlZFJlcXVlc3Q9e2NodW5rOm4sZW5jb2Rpbmc6aSxpc0J1ZjpyLGNhbGxiYWNrOm8sbmV4dDpudWxsfSxmP2YubmV4dD10Lmxhc3RCdWZmZXJlZFJlcXVlc3Q6dC5idWZmZXJlZFJlcXVlc3Q9dC5sYXN0QnVmZmVyZWRSZXF1ZXN0LHQuYnVmZmVyZWRSZXF1ZXN0Q291bnQrPTF9ZWxzZSBtKGUsdCwhMSxhLG4saSxvKTtyZXR1cm4gY30odGhpcyxvLGEsZSx0LHIpKSxzfSxnLnByb3RvdHlwZS5jb3JrPWZ1bmN0aW9uKCl7dGhpcy5fd3JpdGFibGVTdGF0ZS5jb3JrZWQrK30sZy5wcm90b3R5cGUudW5jb3JrPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fd3JpdGFibGVTdGF0ZTtlLmNvcmtlZCYmKGUuY29ya2VkLS0sZS53cml0aW5nfHxlLmNvcmtlZHx8ZS5maW5pc2hlZHx8ZS5idWZmZXJQcm9jZXNzaW5nfHwhZS5idWZmZXJlZFJlcXVlc3R8fHcodGhpcyxlKSl9LGcucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZz1mdW5jdGlvbihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9ZS50b0xvd2VyQ2FzZSgpKSwhKFtcImhleFwiLFwidXRmOFwiLFwidXRmLThcIixcImFzY2lpXCIsXCJiaW5hcnlcIixcImJhc2U2NFwiLFwidWNzMlwiLFwidWNzLTJcIixcInV0ZjE2bGVcIixcInV0Zi0xNmxlXCIsXCJyYXdcIl0uaW5kZXhPZigoZStcIlwiKS50b0xvd2VyQ2FzZSgpKT4tMSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2UpO3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZz1lLHRoaXN9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnLnByb3RvdHlwZSxcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksZy5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKGUsdCxyKXtyKG5ldyBFcnJvcihcIl93cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZFwiKSl9LGcucHJvdG90eXBlLl93cml0ZXY9bnVsbCxnLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXMuX3dyaXRhYmxlU3RhdGU7XCJmdW5jdGlvblwiPT10eXBlb2YgZT8ocj1lLGU9bnVsbCx0PW51bGwpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihyPXQsdD1udWxsKSxudWxsIT1lJiZ0aGlzLndyaXRlKGUsdCksbi5jb3JrZWQmJihuLmNvcmtlZD0xLHRoaXMudW5jb3JrKCkpLG4uZW5kaW5nfHxuLmZpbmlzaGVkfHxmdW5jdGlvbihlLHQscil7dC5lbmRpbmc9ITAsRShlLHQpLHImJih0LmZpbmlzaGVkP2kubmV4dFRpY2socik6ZS5vbmNlKFwiZmluaXNoXCIscikpLHQuZW5kZWQ9ITAsZS53cml0YWJsZT0hMX0odGhpcyxuLHIpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZy5wcm90b3R5cGUsXCJkZXN0cm95ZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPWUpfX0pLGcucHJvdG90eXBlLmRlc3Ryb3k9cC5kZXN0cm95LGcucHJvdG90eXBlLl91bmRlc3Ryb3k9cC51bmRlc3Ryb3ksZy5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24oZSx0KXt0aGlzLmVuZCgpLHQoZSl9fSwzOTEyOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQ1OTEpLkJ1ZmZlcixpPXIoNTIyKTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmhlYWQ9bnVsbCx0aGlzLnRhaWw9bnVsbCx0aGlzLmxlbmd0aD0wfXJldHVybiBlLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUpe3ZhciB0PXtkYXRhOmUsbmV4dDpudWxsfTt0aGlzLmxlbmd0aD4wP3RoaXMudGFpbC5uZXh0PXQ6dGhpcy5oZWFkPXQsdGhpcy50YWlsPXQsKyt0aGlzLmxlbmd0aH0sZS5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbihlKXt2YXIgdD17ZGF0YTplLG5leHQ6dGhpcy5oZWFkfTswPT09dGhpcy5sZW5ndGgmJih0aGlzLnRhaWw9dCksdGhpcy5oZWFkPXQsKyt0aGlzLmxlbmd0aH0sZS5wcm90b3R5cGUuc2hpZnQ9ZnVuY3Rpb24oKXtpZigwIT09dGhpcy5sZW5ndGgpe3ZhciBlPXRoaXMuaGVhZC5kYXRhO3JldHVybiAxPT09dGhpcy5sZW5ndGg/dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsOnRoaXMuaGVhZD10aGlzLmhlYWQubmV4dCwtLXRoaXMubGVuZ3RoLGV9fSxlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuaGVhZD10aGlzLnRhaWw9bnVsbCx0aGlzLmxlbmd0aD0wfSxlLnByb3RvdHlwZS5qb2luPWZ1bmN0aW9uKGUpe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm5cIlwiO2Zvcih2YXIgdD10aGlzLmhlYWQscj1cIlwiK3QuZGF0YTt0PXQubmV4dDspcis9ZSt0LmRhdGE7cmV0dXJuIHJ9LGUucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbihlKXtpZigwPT09dGhpcy5sZW5ndGgpcmV0dXJuIG4uYWxsb2MoMCk7aWYoMT09PXRoaXMubGVuZ3RoKXJldHVybiB0aGlzLmhlYWQuZGF0YTtmb3IodmFyIHQscixpPW4uYWxsb2NVbnNhZmUoZT4+PjApLG89dGhpcy5oZWFkLHM9MDtvOyl0PWkscj1zLG8uZGF0YS5jb3B5KHQscikscys9by5kYXRhLmxlbmd0aCxvPW8ubmV4dDtyZXR1cm4gaX0sZX0oKSxpJiZpLmluc3BlY3QmJmkuaW5zcGVjdC5jdXN0b20mJihlLmV4cG9ydHMucHJvdG90eXBlW2kuaW5zcGVjdC5jdXN0b21dPWZ1bmN0aW9uKCl7dmFyIGU9aS5pbnNwZWN0KHtsZW5ndGg6dGhpcy5sZW5ndGh9KTtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lK1wiIFwiK2V9KX0sNTUxMzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4MjEyKTtmdW5jdGlvbiBpKGUsdCl7ZS5lbWl0KFwiZXJyb3JcIix0KX1lLmV4cG9ydHM9e2Rlc3Ryb3k6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG89dGhpcy5fcmVhZGFibGVTdGF0ZSYmdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQscz10aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtyZXR1cm4gb3x8cz8odD90KGUpOiFlfHx0aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZHx8bi5uZXh0VGljayhpLHRoaXMsZSksdGhpcyk6KHRoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD0hMCksdGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPSEwKSx0aGlzLl9kZXN0cm95KGV8fG51bGwsKGZ1bmN0aW9uKGUpeyF0JiZlPyhuLm5leHRUaWNrKGkscixlKSxyLl93cml0YWJsZVN0YXRlJiYoci5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQ9ITApKTp0JiZ0KGUpfSkpLHRoaXMpfSx1bmRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nPSExLHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQ9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkPSExKSx0aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9ITEsdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZz0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSExKX19fSw0MTA0OihlLHQscik9PntlLmV4cG9ydHM9cig3MTg3KS5FdmVudEVtaXR0ZXJ9LDY4MDE6KGUsdCxyKT0+eyh0PWUuZXhwb3J0cz1yKDI0NDIpKS5TdHJlYW09dCx0LlJlYWRhYmxlPXQsdC5Xcml0YWJsZT1yKDc1OSksdC5EdXBsZXg9cig1ODY3KSx0LlRyYW5zZm9ybT1yKDYyKSx0LlBhc3NUaHJvdWdoPXIoMzQzMSl9LDQ1OTE6KGUsdCxyKT0+e3ZhciBuPXIoODc2NCksaT1uLkJ1ZmZlcjtmdW5jdGlvbiBvKGUsdCl7Zm9yKHZhciByIGluIGUpdFtyXT1lW3JdfWZ1bmN0aW9uIHMoZSx0LHIpe3JldHVybiBpKGUsdCxyKX1pLmZyb20mJmkuYWxsb2MmJmkuYWxsb2NVbnNhZmUmJmkuYWxsb2NVbnNhZmVTbG93P2UuZXhwb3J0cz1uOihvKG4sdCksdC5CdWZmZXI9cyksbyhpLHMpLHMuZnJvbT1mdW5jdGlvbihlLHQscil7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyXCIpO3JldHVybiBpKGUsdCxyKX0scy5hbGxvYz1mdW5jdGlvbihlLHQscil7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7dmFyIG49aShlKTtyZXR1cm4gdm9pZCAwIT09dD9cInN0cmluZ1wiPT10eXBlb2Ygcj9uLmZpbGwodCxyKTpuLmZpbGwodCk6bi5maWxsKDApLG59LHMuYWxsb2NVbnNhZmU9ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7cmV0dXJuIGkoZSl9LHMuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyXCIpO3JldHVybiBuLlNsb3dCdWZmZXIoZSl9fSw3OTg5OihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQ1OTEpLkJ1ZmZlcixpPW4uaXNFbmNvZGluZ3x8ZnVuY3Rpb24oZSl7c3dpdGNoKChlPVwiXCIrZSkmJmUudG9Mb3dlckNhc2UoKSl7Y2FzZVwiaGV4XCI6Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJiaW5hcnlcIjpjYXNlXCJiYXNlNjRcIjpjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpjYXNlXCJyYXdcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX07ZnVuY3Rpb24gbyhlKXt2YXIgdDtzd2l0Y2godGhpcy5lbmNvZGluZz1mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbihlKXtpZighZSlyZXR1cm5cInV0ZjhcIjtmb3IodmFyIHQ7Oylzd2l0Y2goZSl7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuXCJ1dGY4XCI7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuXCJ1dGYxNmxlXCI7Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuXCJsYXRpbjFcIjtjYXNlXCJiYXNlNjRcIjpjYXNlXCJhc2NpaVwiOmNhc2VcImhleFwiOnJldHVybiBlO2RlZmF1bHQ6aWYodClyZXR1cm47ZT0oXCJcIitlKS50b0xvd2VyQ2FzZSgpLHQ9ITB9fShlKTtpZihcInN0cmluZ1wiIT10eXBlb2YgdCYmKG4uaXNFbmNvZGluZz09PWl8fCFpKGUpKSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitlKTtyZXR1cm4gdHx8ZX0oZSksdGhpcy5lbmNvZGluZyl7Y2FzZVwidXRmMTZsZVwiOnRoaXMudGV4dD1jLHRoaXMuZW5kPWYsdD00O2JyZWFrO2Nhc2VcInV0ZjhcIjp0aGlzLmZpbGxMYXN0PWEsdD00O2JyZWFrO2Nhc2VcImJhc2U2NFwiOnRoaXMudGV4dD11LHRoaXMuZW5kPWQsdD0zO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIHRoaXMud3JpdGU9aCx2b2lkKHRoaXMuZW5kPWwpfXRoaXMubGFzdE5lZWQ9MCx0aGlzLmxhc3RUb3RhbD0wLHRoaXMubGFzdENoYXI9bi5hbGxvY1Vuc2FmZSh0KX1mdW5jdGlvbiBzKGUpe3JldHVybiBlPD0xMjc/MDplPj41PT02PzI6ZT4+ND09MTQ/MzplPj4zPT0zMD80OmU+PjY9PTI/LTE6LTJ9ZnVuY3Rpb24gYShlKXt2YXIgdD10aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkLHI9ZnVuY3Rpb24oZSx0LHIpe2lmKDEyOCE9KDE5MiZ0WzBdKSlyZXR1cm4gZS5sYXN0TmVlZD0wLFwi77+9XCI7aWYoZS5sYXN0TmVlZD4xJiZ0Lmxlbmd0aD4xKXtpZigxMjghPSgxOTImdFsxXSkpcmV0dXJuIGUubGFzdE5lZWQ9MSxcIu+/vVwiO2lmKGUubGFzdE5lZWQ+MiYmdC5sZW5ndGg+MiYmMTI4IT0oMTkyJnRbMl0pKXJldHVybiBlLmxhc3ROZWVkPTIsXCLvv71cIn19KHRoaXMsZSk7cmV0dXJuIHZvaWQgMCE9PXI/cjp0aGlzLmxhc3ROZWVkPD1lLmxlbmd0aD8oZS5jb3B5KHRoaXMubGFzdENoYXIsdCwwLHRoaXMubGFzdE5lZWQpLHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywwLHRoaXMubGFzdFRvdGFsKSk6KGUuY29weSh0aGlzLmxhc3RDaGFyLHQsMCxlLmxlbmd0aCksdm9pZCh0aGlzLmxhc3ROZWVkLT1lLmxlbmd0aCkpfWZ1bmN0aW9uIGMoZSx0KXtpZigoZS5sZW5ndGgtdCklMj09MCl7dmFyIHI9ZS50b1N0cmluZyhcInV0ZjE2bGVcIix0KTtpZihyKXt2YXIgbj1yLmNoYXJDb2RlQXQoci5sZW5ndGgtMSk7aWYobj49NTUyOTYmJm48PTU2MzE5KXJldHVybiB0aGlzLmxhc3ROZWVkPTIsdGhpcy5sYXN0VG90YWw9NCx0aGlzLmxhc3RDaGFyWzBdPWVbZS5sZW5ndGgtMl0sdGhpcy5sYXN0Q2hhclsxXT1lW2UubGVuZ3RoLTFdLHIuc2xpY2UoMCwtMSl9cmV0dXJuIHJ9cmV0dXJuIHRoaXMubGFzdE5lZWQ9MSx0aGlzLmxhc3RUb3RhbD0yLHRoaXMubGFzdENoYXJbMF09ZVtlLmxlbmd0aC0xXSxlLnRvU3RyaW5nKFwidXRmMTZsZVwiLHQsZS5sZW5ndGgtMSl9ZnVuY3Rpb24gZihlKXt2YXIgdD1lJiZlLmxlbmd0aD90aGlzLndyaXRlKGUpOlwiXCI7aWYodGhpcy5sYXN0TmVlZCl7dmFyIHI9dGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZDtyZXR1cm4gdCt0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKFwidXRmMTZsZVwiLDAscil9cmV0dXJuIHR9ZnVuY3Rpb24gdShlLHQpe3ZhciByPShlLmxlbmd0aC10KSUzO3JldHVybiAwPT09cj9lLnRvU3RyaW5nKFwiYmFzZTY0XCIsdCk6KHRoaXMubGFzdE5lZWQ9My1yLHRoaXMubGFzdFRvdGFsPTMsMT09PXI/dGhpcy5sYXN0Q2hhclswXT1lW2UubGVuZ3RoLTFdOih0aGlzLmxhc3RDaGFyWzBdPWVbZS5sZW5ndGgtMl0sdGhpcy5sYXN0Q2hhclsxXT1lW2UubGVuZ3RoLTFdKSxlLnRvU3RyaW5nKFwiYmFzZTY0XCIsdCxlLmxlbmd0aC1yKSl9ZnVuY3Rpb24gZChlKXt2YXIgdD1lJiZlLmxlbmd0aD90aGlzLndyaXRlKGUpOlwiXCI7cmV0dXJuIHRoaXMubGFzdE5lZWQ/dCt0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKFwiYmFzZTY0XCIsMCwzLXRoaXMubGFzdE5lZWQpOnR9ZnVuY3Rpb24gaChlKXtyZXR1cm4gZS50b1N0cmluZyh0aGlzLmVuY29kaW5nKX1mdW5jdGlvbiBsKGUpe3JldHVybiBlJiZlLmxlbmd0aD90aGlzLndyaXRlKGUpOlwiXCJ9dC5zPW8sby5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSl7aWYoMD09PWUubGVuZ3RoKXJldHVyblwiXCI7dmFyIHQscjtpZih0aGlzLmxhc3ROZWVkKXtpZih2b2lkIDA9PT0odD10aGlzLmZpbGxMYXN0KGUpKSlyZXR1cm5cIlwiO3I9dGhpcy5sYXN0TmVlZCx0aGlzLmxhc3ROZWVkPTB9ZWxzZSByPTA7cmV0dXJuIHI8ZS5sZW5ndGg/dD90K3RoaXMudGV4dChlLHIpOnRoaXMudGV4dChlLHIpOnR8fFwiXCJ9LG8ucHJvdG90eXBlLmVuZD1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLmxlbmd0aD90aGlzLndyaXRlKGUpOlwiXCI7cmV0dXJuIHRoaXMubGFzdE5lZWQ/dCtcIu+/vVwiOnR9LG8ucHJvdG90eXBlLnRleHQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1mdW5jdGlvbihlLHQscil7dmFyIG49dC5sZW5ndGgtMTtpZihuPHIpcmV0dXJuIDA7dmFyIGk9cyh0W25dKTtyZXR1cm4gaT49MD8oaT4wJiYoZS5sYXN0TmVlZD1pLTEpLGkpOi0tbjxyfHwtMj09PWk/MDooaT1zKHRbbl0pKT49MD8oaT4wJiYoZS5sYXN0TmVlZD1pLTIpLGkpOi0tbjxyfHwtMj09PWk/MDooaT1zKHRbbl0pKT49MD8oaT4wJiYoMj09PWk/aT0wOmUubGFzdE5lZWQ9aS0zKSxpKTowfSh0aGlzLGUsdCk7aWYoIXRoaXMubGFzdE5lZWQpcmV0dXJuIGUudG9TdHJpbmcoXCJ1dGY4XCIsdCk7dGhpcy5sYXN0VG90YWw9cjt2YXIgbj1lLmxlbmd0aC0oci10aGlzLmxhc3ROZWVkKTtyZXR1cm4gZS5jb3B5KHRoaXMubGFzdENoYXIsMCxuKSxlLnRvU3RyaW5nKFwidXRmOFwiLHQsbil9LG8ucHJvdG90eXBlLmZpbGxMYXN0PWZ1bmN0aW9uKGUpe2lmKHRoaXMubGFzdE5lZWQ8PWUubGVuZ3RoKXJldHVybiBlLmNvcHkodGhpcy5sYXN0Q2hhcix0aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkLDAsdGhpcy5sYXN0TmVlZCksdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLDAsdGhpcy5sYXN0VG90YWwpO2UuY29weSh0aGlzLmxhc3RDaGFyLHRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQsMCxlLmxlbmd0aCksdGhpcy5sYXN0TmVlZC09ZS5sZW5ndGh9fSw0NjUwOihlLHQscik9Pnt2YXIgbj1yKDQxNTUpLGk9cig2ODAxKS5UcmFuc2Zvcm0sbz1yKDk1MzkpLmluaGVyaXRzLHM9cig3NTI5KTtmdW5jdGlvbiBhKGUpe2kuY2FsbCh0aGlzLGUpLHRoaXMuX2Rlc3Ryb3llZD0hMX1mdW5jdGlvbiBjKGUsdCxyKXtyKG51bGwsZSl9ZnVuY3Rpb24gZihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihuPXIscj10LHQ9e30pLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHImJihyPWMpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJihuPW51bGwpLGUodCxyLG4pfX1vKGEsaSksYS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbihlKXtpZighdGhpcy5fZGVzdHJveWVkKXt0aGlzLl9kZXN0cm95ZWQ9ITA7dmFyIHQ9dGhpcztuLm5leHRUaWNrKChmdW5jdGlvbigpe2UmJnQuZW1pdChcImVycm9yXCIsZSksdC5lbWl0KFwiY2xvc2VcIil9KSl9fSxlLmV4cG9ydHM9ZigoZnVuY3Rpb24oZSx0LHIpe3ZhciBuPW5ldyBhKGUpO3JldHVybiBuLl90cmFuc2Zvcm09dCxyJiYobi5fZmx1c2g9ciksbn0pKSxlLmV4cG9ydHMuY3Rvcj1mKChmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbih0KXtpZighKHRoaXMgaW5zdGFuY2VvZiBuKSlyZXR1cm4gbmV3IG4odCk7dGhpcy5vcHRpb25zPXMoZSx0KSxhLmNhbGwodGhpcyx0aGlzLm9wdGlvbnMpfXJldHVybiBvKG4sYSksbi5wcm90b3R5cGUuX3RyYW5zZm9ybT10LHImJihuLnByb3RvdHlwZS5fZmx1c2g9ciksbn0pKSxlLmV4cG9ydHMub2JqPWYoKGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1uZXcgYShzKHtvYmplY3RNb2RlOiEwLGhpZ2hXYXRlck1hcms6MTZ9LGUpKTtyZXR1cm4gbi5fdHJhbnNmb3JtPXQsciYmKG4uX2ZsdXNoPXIpLG59KSl9LDI1MTE6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2U9ci5ubWQoZSksZnVuY3Rpb24oaSl7dCYmdC5ub2RlVHlwZSxlJiZlLm5vZGVUeXBlO3ZhciBvPVwib2JqZWN0XCI9PXR5cGVvZiByLmcmJnIuZztvLmdsb2JhbCE9PW8mJm8ud2luZG93IT09byYmby5zZWxmO3ZhciBzLGE9MjE0NzQ4MzY0NyxjPTM2LGY9L154bi0tLyx1PS9bXlxceDIwLVxceDdFXS8sZD0vW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLGg9e292ZXJmbG93OlwiT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3NcIixcIm5vdC1iYXNpY1wiOlwiSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KVwiLFwiaW52YWxpZC1pbnB1dFwiOlwiSW52YWxpZCBpbnB1dFwifSxsPU1hdGguZmxvb3IscD1TdHJpbmcuZnJvbUNoYXJDb2RlO2Z1bmN0aW9uIGIoZSl7dGhyb3cgUmFuZ2VFcnJvcihoW2VdKX1mdW5jdGlvbiB5KGUsdCl7Zm9yKHZhciByPWUubGVuZ3RoLG49W107ci0tOyluW3JdPXQoZVtyXSk7cmV0dXJuIG59ZnVuY3Rpb24gZyhlLHQpe3ZhciByPWUuc3BsaXQoXCJAXCIpLG49XCJcIjtyZXR1cm4gci5sZW5ndGg+MSYmKG49clswXStcIkBcIixlPXJbMV0pLG4reSgoZT1lLnJlcGxhY2UoZCxcIi5cIikpLnNwbGl0KFwiLlwiKSx0KS5qb2luKFwiLlwiKX1mdW5jdGlvbiBtKGUpe2Zvcih2YXIgdCxyLG49W10saT0wLG89ZS5sZW5ndGg7aTxvOykodD1lLmNoYXJDb2RlQXQoaSsrKSk+PTU1Mjk2JiZ0PD01NjMxOSYmaTxvPzU2MzIwPT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkrKykpKT9uLnB1c2goKCgxMDIzJnQpPDwxMCkrKDEwMjMmcikrNjU1MzYpOihuLnB1c2godCksaS0tKTpuLnB1c2godCk7cmV0dXJuIG59ZnVuY3Rpb24gdihlKXtyZXR1cm4geShlLChmdW5jdGlvbihlKXt2YXIgdD1cIlwiO3JldHVybiBlPjY1NTM1JiYodCs9cCgoZS09NjU1MzYpPj4+MTAmMTAyM3w1NTI5NiksZT01NjMyMHwxMDIzJmUpLHQrcChlKX0pKS5qb2luKFwiXCIpfWZ1bmN0aW9uIHcoZSx0KXtyZXR1cm4gZSsyMis3NSooZTwyNiktKCgwIT10KTw8NSl9ZnVuY3Rpb24gXyhlLHQscil7dmFyIG49MDtmb3IoZT1yP2woZS83MDApOmU+PjEsZSs9bChlL3QpO2U+NDU1O24rPWMpZT1sKGUvMzUpO3JldHVybiBsKG4rMzYqZS8oZSszOCkpfWZ1bmN0aW9uIFMoZSl7dmFyIHQscixuLGksbyxzLGYsdSxkLGgscCx5PVtdLGc9ZS5sZW5ndGgsbT0wLHc9MTI4LFM9NzI7Zm9yKChyPWUubGFzdEluZGV4T2YoXCItXCIpKTwwJiYocj0wKSxuPTA7bjxyOysrbillLmNoYXJDb2RlQXQobik+PTEyOCYmYihcIm5vdC1iYXNpY1wiKSx5LnB1c2goZS5jaGFyQ29kZUF0KG4pKTtmb3IoaT1yPjA/cisxOjA7aTxnOyl7Zm9yKG89bSxzPTEsZj1jO2k+PWcmJmIoXCJpbnZhbGlkLWlucHV0XCIpLCgodT0ocD1lLmNoYXJDb2RlQXQoaSsrKSktNDg8MTA/cC0yMjpwLTY1PDI2P3AtNjU6cC05NzwyNj9wLTk3OmMpPj1jfHx1PmwoKGEtbSkvcykpJiZiKFwib3ZlcmZsb3dcIiksbSs9dSpzLCEodTwoZD1mPD1TPzE6Zj49UysyNj8yNjpmLVMpKTtmKz1jKXM+bChhLyhoPWMtZCkpJiZiKFwib3ZlcmZsb3dcIikscyo9aDtTPV8obS1vLHQ9eS5sZW5ndGgrMSwwPT1vKSxsKG0vdCk+YS13JiZiKFwib3ZlcmZsb3dcIiksdys9bChtL3QpLG0lPXQseS5zcGxpY2UobSsrLDAsdyl9cmV0dXJuIHYoeSl9ZnVuY3Rpb24gRShlKXt2YXIgdCxyLG4saSxvLHMsZix1LGQsaCx5LGcsdixTLEUsQT1bXTtmb3IoZz0oZT1tKGUpKS5sZW5ndGgsdD0xMjgscj0wLG89NzIscz0wO3M8ZzsrK3MpKHk9ZVtzXSk8MTI4JiZBLnB1c2gocCh5KSk7Zm9yKG49aT1BLmxlbmd0aCxpJiZBLnB1c2goXCItXCIpO248Zzspe2ZvcihmPWEscz0wO3M8ZzsrK3MpKHk9ZVtzXSk+PXQmJnk8ZiYmKGY9eSk7Zm9yKGYtdD5sKChhLXIpLyh2PW4rMSkpJiZiKFwib3ZlcmZsb3dcIikscis9KGYtdCkqdix0PWYscz0wO3M8ZzsrK3MpaWYoKHk9ZVtzXSk8dCYmKytyPmEmJmIoXCJvdmVyZmxvd1wiKSx5PT10KXtmb3IodT1yLGQ9YzshKHU8KGg9ZDw9bz8xOmQ+PW8rMjY/MjY6ZC1vKSk7ZCs9YylFPXUtaCxTPWMtaCxBLnB1c2gocCh3KGgrRSVTLDApKSksdT1sKEUvUyk7QS5wdXNoKHAodyh1LDApKSksbz1fKHIsdixuPT1pKSxyPTAsKytufSsrciwrK3R9cmV0dXJuIEEuam9pbihcIlwiKX1zPXt2ZXJzaW9uOlwiMS4zLjJcIix1Y3MyOntkZWNvZGU6bSxlbmNvZGU6dn0sZGVjb2RlOlMsZW5jb2RlOkUsdG9BU0NJSTpmdW5jdGlvbihlKXtyZXR1cm4gZyhlLChmdW5jdGlvbihlKXtyZXR1cm4gdS50ZXN0KGUpP1wieG4tLVwiK0UoZSk6ZX0pKX0sdG9Vbmljb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBnKGUsKGZ1bmN0aW9uKGUpe3JldHVybiBmLnRlc3QoZSk/UyhlLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpOmV9KSl9fSx2b2lkIDA9PT0obj1mdW5jdGlvbigpe3JldHVybiBzfS5jYWxsKHQscix0LGUpKXx8KGUuZXhwb3J0cz1uKX0oKX0sODU3NTooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyNTExKSxpPXIoMjUwMik7ZnVuY3Rpb24gbygpe3RoaXMucHJvdG9jb2w9bnVsbCx0aGlzLnNsYXNoZXM9bnVsbCx0aGlzLmF1dGg9bnVsbCx0aGlzLmhvc3Q9bnVsbCx0aGlzLnBvcnQ9bnVsbCx0aGlzLmhvc3RuYW1lPW51bGwsdGhpcy5oYXNoPW51bGwsdGhpcy5zZWFyY2g9bnVsbCx0aGlzLnF1ZXJ5PW51bGwsdGhpcy5wYXRobmFtZT1udWxsLHRoaXMucGF0aD1udWxsLHRoaXMuaHJlZj1udWxsfXQucGFyc2U9dix0LnJlc29sdmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdihlLCExLCEwKS5yZXNvbHZlKHQpfSx0LnJlc29sdmVPYmplY3Q9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT92KGUsITEsITApLnJlc29sdmVPYmplY3QodCk6dH0sdC5mb3JtYXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGkuaXNTdHJpbmcoZSkmJihlPXYoZSkpLGUgaW5zdGFuY2VvZiBvP2UuZm9ybWF0KCk6by5wcm90b3R5cGUuZm9ybWF0LmNhbGwoZSl9LHQuVXJsPW87dmFyIHM9L14oW2EtejAtOS4rLV0rOikvaSxhPS86WzAtOV0qJC8sYz0vXihcXC9cXC8/KD8hXFwvKVteXFw/XFxzXSopKFxcP1teXFxzXSopPyQvLGY9W1wie1wiLFwifVwiLFwifFwiLFwiXFxcXFwiLFwiXlwiLFwiYFwiXS5jb25jYXQoW1wiPFwiLFwiPlwiLCdcIicsXCJgXCIsXCIgXCIsXCJcXHJcIixcIlxcblwiLFwiXFx0XCJdKSx1PVtcIidcIl0uY29uY2F0KGYpLGQ9W1wiJVwiLFwiL1wiLFwiP1wiLFwiO1wiLFwiI1wiXS5jb25jYXQodSksaD1bXCIvXCIsXCI/XCIsXCIjXCJdLGw9L15bK2EtejAtOUEtWl8tXXswLDYzfSQvLHA9L14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLGI9e2phdmFzY3JpcHQ6ITAsXCJqYXZhc2NyaXB0OlwiOiEwfSx5PXtqYXZhc2NyaXB0OiEwLFwiamF2YXNjcmlwdDpcIjohMH0sZz17aHR0cDohMCxodHRwczohMCxmdHA6ITAsZ29waGVyOiEwLGZpbGU6ITAsXCJodHRwOlwiOiEwLFwiaHR0cHM6XCI6ITAsXCJmdHA6XCI6ITAsXCJnb3BoZXI6XCI6ITAsXCJmaWxlOlwiOiEwfSxtPXIoNzY3Myk7ZnVuY3Rpb24gdihlLHQscil7aWYoZSYmaS5pc09iamVjdChlKSYmZSBpbnN0YW5jZW9mIG8pcmV0dXJuIGU7dmFyIG49bmV3IG87cmV0dXJuIG4ucGFyc2UoZSx0LHIpLG59by5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oZSx0LHIpe2lmKCFpLmlzU3RyaW5nKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiK3R5cGVvZiBlKTt2YXIgbz1lLmluZGV4T2YoXCI/XCIpLGE9LTEhPT1vJiZvPGUuaW5kZXhPZihcIiNcIik/XCI/XCI6XCIjXCIsZj1lLnNwbGl0KGEpO2ZbMF09ZlswXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpO3ZhciB2PWU9Zi5qb2luKGEpO2lmKHY9di50cmltKCksIXImJjE9PT1lLnNwbGl0KFwiI1wiKS5sZW5ndGgpe3ZhciB3PWMuZXhlYyh2KTtpZih3KXJldHVybiB0aGlzLnBhdGg9dix0aGlzLmhyZWY9dix0aGlzLnBhdGhuYW1lPXdbMV0sd1syXT8odGhpcy5zZWFyY2g9d1syXSx0aGlzLnF1ZXJ5PXQ/bS5wYXJzZSh0aGlzLnNlYXJjaC5zdWJzdHIoMSkpOnRoaXMuc2VhcmNoLnN1YnN0cigxKSk6dCYmKHRoaXMuc2VhcmNoPVwiXCIsdGhpcy5xdWVyeT17fSksdGhpc312YXIgXz1zLmV4ZWModik7aWYoXyl7dmFyIFM9KF89X1swXSkudG9Mb3dlckNhc2UoKTt0aGlzLnByb3RvY29sPVMsdj12LnN1YnN0cihfLmxlbmd0aCl9aWYocnx8X3x8di5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpe3ZhciBFPVwiLy9cIj09PXYuc3Vic3RyKDAsMik7IUV8fF8mJnlbX118fCh2PXYuc3Vic3RyKDIpLHRoaXMuc2xhc2hlcz0hMCl9aWYoIXlbX10mJihFfHxfJiYhZ1tfXSkpe2Zvcih2YXIgQSx4LGs9LTEsUD0wO1A8aC5sZW5ndGg7UCsrKS0xIT09KE89di5pbmRleE9mKGhbUF0pKSYmKC0xPT09a3x8TzxrKSYmKGs9Tyk7Zm9yKC0xIT09KHg9LTE9PT1rP3YubGFzdEluZGV4T2YoXCJAXCIpOnYubGFzdEluZGV4T2YoXCJAXCIsaykpJiYoQT12LnNsaWNlKDAseCksdj12LnNsaWNlKHgrMSksdGhpcy5hdXRoPWRlY29kZVVSSUNvbXBvbmVudChBKSksaz0tMSxQPTA7UDxkLmxlbmd0aDtQKyspe3ZhciBPOy0xIT09KE89di5pbmRleE9mKGRbUF0pKSYmKC0xPT09a3x8TzxrKSYmKGs9Tyl9LTE9PT1rJiYoaz12Lmxlbmd0aCksdGhpcy5ob3N0PXYuc2xpY2UoMCxrKSx2PXYuc2xpY2UoayksdGhpcy5wYXJzZUhvc3QoKSx0aGlzLmhvc3RuYW1lPXRoaXMuaG9zdG5hbWV8fFwiXCI7dmFyIE09XCJbXCI9PT10aGlzLmhvc3RuYW1lWzBdJiZcIl1cIj09PXRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGgtMV07aWYoIU0pZm9yKHZhciBJPXRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pLFQ9KFA9MCxJLmxlbmd0aCk7UDxUO1ArKyl7dmFyIFI9SVtQXTtpZihSJiYhUi5tYXRjaChsKSl7Zm9yKHZhciBOPVwiXCIsQz0wLGo9Ui5sZW5ndGg7QzxqO0MrKylSLmNoYXJDb2RlQXQoQyk+MTI3P04rPVwieFwiOk4rPVJbQ107aWYoIU4ubWF0Y2gobCkpe3ZhciBCPUkuc2xpY2UoMCxQKSxMPUkuc2xpY2UoUCsxKSxEPVIubWF0Y2gocCk7RCYmKEIucHVzaChEWzFdKSxMLnVuc2hpZnQoRFsyXSkpLEwubGVuZ3RoJiYodj1cIi9cIitMLmpvaW4oXCIuXCIpK3YpLHRoaXMuaG9zdG5hbWU9Qi5qb2luKFwiLlwiKTticmVha319fXRoaXMuaG9zdG5hbWUubGVuZ3RoPjI1NT90aGlzLmhvc3RuYW1lPVwiXCI6dGhpcy5ob3N0bmFtZT10aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCksTXx8KHRoaXMuaG9zdG5hbWU9bi50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpKTt2YXIgVT10aGlzLnBvcnQ/XCI6XCIrdGhpcy5wb3J0OlwiXCIscT10aGlzLmhvc3RuYW1lfHxcIlwiO3RoaXMuaG9zdD1xK1UsdGhpcy5ocmVmKz10aGlzLmhvc3QsTSYmKHRoaXMuaG9zdG5hbWU9dGhpcy5ob3N0bmFtZS5zdWJzdHIoMSx0aGlzLmhvc3RuYW1lLmxlbmd0aC0yKSxcIi9cIiE9PXZbMF0mJih2PVwiL1wiK3YpKX1pZighYltTXSlmb3IoUD0wLFQ9dS5sZW5ndGg7UDxUO1ArKyl7dmFyIEY9dVtQXTtpZigtMSE9PXYuaW5kZXhPZihGKSl7dmFyIEg9ZW5jb2RlVVJJQ29tcG9uZW50KEYpO0g9PT1GJiYoSD1lc2NhcGUoRikpLHY9di5zcGxpdChGKS5qb2luKEgpfX12YXIgej12LmluZGV4T2YoXCIjXCIpOy0xIT09eiYmKHRoaXMuaGFzaD12LnN1YnN0cih6KSx2PXYuc2xpY2UoMCx6KSk7dmFyIEs9di5pbmRleE9mKFwiP1wiKTtpZigtMSE9PUs/KHRoaXMuc2VhcmNoPXYuc3Vic3RyKEspLHRoaXMucXVlcnk9di5zdWJzdHIoSysxKSx0JiYodGhpcy5xdWVyeT1tLnBhcnNlKHRoaXMucXVlcnkpKSx2PXYuc2xpY2UoMCxLKSk6dCYmKHRoaXMuc2VhcmNoPVwiXCIsdGhpcy5xdWVyeT17fSksdiYmKHRoaXMucGF0aG5hbWU9diksZ1tTXSYmdGhpcy5ob3N0bmFtZSYmIXRoaXMucGF0aG5hbWUmJih0aGlzLnBhdGhuYW1lPVwiL1wiKSx0aGlzLnBhdGhuYW1lfHx0aGlzLnNlYXJjaCl7VT10aGlzLnBhdGhuYW1lfHxcIlwiO3ZhciBWPXRoaXMuc2VhcmNofHxcIlwiO3RoaXMucGF0aD1VK1Z9cmV0dXJuIHRoaXMuaHJlZj10aGlzLmZvcm1hdCgpLHRoaXN9LG8ucHJvdG90eXBlLmZvcm1hdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuYXV0aHx8XCJcIjtlJiYoZT0oZT1lbmNvZGVVUklDb21wb25lbnQoZSkpLnJlcGxhY2UoLyUzQS9pLFwiOlwiKSxlKz1cIkBcIik7dmFyIHQ9dGhpcy5wcm90b2NvbHx8XCJcIixyPXRoaXMucGF0aG5hbWV8fFwiXCIsbj10aGlzLmhhc2h8fFwiXCIsbz0hMSxzPVwiXCI7dGhpcy5ob3N0P289ZSt0aGlzLmhvc3Q6dGhpcy5ob3N0bmFtZSYmKG89ZSsoLTE9PT10aGlzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpP3RoaXMuaG9zdG5hbWU6XCJbXCIrdGhpcy5ob3N0bmFtZStcIl1cIiksdGhpcy5wb3J0JiYobys9XCI6XCIrdGhpcy5wb3J0KSksdGhpcy5xdWVyeSYmaS5pc09iamVjdCh0aGlzLnF1ZXJ5KSYmT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoJiYocz1tLnN0cmluZ2lmeSh0aGlzLnF1ZXJ5KSk7dmFyIGE9dGhpcy5zZWFyY2h8fHMmJlwiP1wiK3N8fFwiXCI7cmV0dXJuIHQmJlwiOlwiIT09dC5zdWJzdHIoLTEpJiYodCs9XCI6XCIpLHRoaXMuc2xhc2hlc3x8KCF0fHxnW3RdKSYmITEhPT1vPyhvPVwiLy9cIisob3x8XCJcIiksciYmXCIvXCIhPT1yLmNoYXJBdCgwKSYmKHI9XCIvXCIrcikpOm98fChvPVwiXCIpLG4mJlwiI1wiIT09bi5jaGFyQXQoMCkmJihuPVwiI1wiK24pLGEmJlwiP1wiIT09YS5jaGFyQXQoMCkmJihhPVwiP1wiK2EpLHQrbysocj1yLnJlcGxhY2UoL1s/I10vZywoZnVuY3Rpb24oZSl7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlKX0pKSkrKGE9YS5yZXBsYWNlKFwiI1wiLFwiJTIzXCIpKStufSxvLnByb3RvdHlwZS5yZXNvbHZlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlc29sdmVPYmplY3QodihlLCExLCEwKSkuZm9ybWF0KCl9LG8ucHJvdG90eXBlLnJlc29sdmVPYmplY3Q9ZnVuY3Rpb24oZSl7aWYoaS5pc1N0cmluZyhlKSl7dmFyIHQ9bmV3IG87dC5wYXJzZShlLCExLCEwKSxlPXR9Zm9yKHZhciByPW5ldyBvLG49T2JqZWN0LmtleXModGhpcykscz0wO3M8bi5sZW5ndGg7cysrKXt2YXIgYT1uW3NdO3JbYV09dGhpc1thXX1pZihyLmhhc2g9ZS5oYXNoLFwiXCI9PT1lLmhyZWYpcmV0dXJuIHIuaHJlZj1yLmZvcm1hdCgpLHI7aWYoZS5zbGFzaGVzJiYhZS5wcm90b2NvbCl7Zm9yKHZhciBjPU9iamVjdC5rZXlzKGUpLGY9MDtmPGMubGVuZ3RoO2YrKyl7dmFyIHU9Y1tmXTtcInByb3RvY29sXCIhPT11JiYoclt1XT1lW3VdKX1yZXR1cm4gZ1tyLnByb3RvY29sXSYmci5ob3N0bmFtZSYmIXIucGF0aG5hbWUmJihyLnBhdGg9ci5wYXRobmFtZT1cIi9cIiksci5ocmVmPXIuZm9ybWF0KCkscn1pZihlLnByb3RvY29sJiZlLnByb3RvY29sIT09ci5wcm90b2NvbCl7aWYoIWdbZS5wcm90b2NvbF0pe2Zvcih2YXIgZD1PYmplY3Qua2V5cyhlKSxoPTA7aDxkLmxlbmd0aDtoKyspe3ZhciBsPWRbaF07cltsXT1lW2xdfXJldHVybiByLmhyZWY9ci5mb3JtYXQoKSxyfWlmKHIucHJvdG9jb2w9ZS5wcm90b2NvbCxlLmhvc3R8fHlbZS5wcm90b2NvbF0pci5wYXRobmFtZT1lLnBhdGhuYW1lO2Vsc2V7Zm9yKHZhciBwPShlLnBhdGhuYW1lfHxcIlwiKS5zcGxpdChcIi9cIik7cC5sZW5ndGgmJiEoZS5ob3N0PXAuc2hpZnQoKSk7KTtlLmhvc3R8fChlLmhvc3Q9XCJcIiksZS5ob3N0bmFtZXx8KGUuaG9zdG5hbWU9XCJcIiksXCJcIiE9PXBbMF0mJnAudW5zaGlmdChcIlwiKSxwLmxlbmd0aDwyJiZwLnVuc2hpZnQoXCJcIiksci5wYXRobmFtZT1wLmpvaW4oXCIvXCIpfWlmKHIuc2VhcmNoPWUuc2VhcmNoLHIucXVlcnk9ZS5xdWVyeSxyLmhvc3Q9ZS5ob3N0fHxcIlwiLHIuYXV0aD1lLmF1dGgsci5ob3N0bmFtZT1lLmhvc3RuYW1lfHxlLmhvc3Qsci5wb3J0PWUucG9ydCxyLnBhdGhuYW1lfHxyLnNlYXJjaCl7dmFyIGI9ci5wYXRobmFtZXx8XCJcIixtPXIuc2VhcmNofHxcIlwiO3IucGF0aD1iK219cmV0dXJuIHIuc2xhc2hlcz1yLnNsYXNoZXN8fGUuc2xhc2hlcyxyLmhyZWY9ci5mb3JtYXQoKSxyfXZhciB2PXIucGF0aG5hbWUmJlwiL1wiPT09ci5wYXRobmFtZS5jaGFyQXQoMCksdz1lLmhvc3R8fGUucGF0aG5hbWUmJlwiL1wiPT09ZS5wYXRobmFtZS5jaGFyQXQoMCksXz13fHx2fHxyLmhvc3QmJmUucGF0aG5hbWUsUz1fLEU9ci5wYXRobmFtZSYmci5wYXRobmFtZS5zcGxpdChcIi9cIil8fFtdLEE9KHA9ZS5wYXRobmFtZSYmZS5wYXRobmFtZS5zcGxpdChcIi9cIil8fFtdLHIucHJvdG9jb2wmJiFnW3IucHJvdG9jb2xdKTtpZihBJiYoci5ob3N0bmFtZT1cIlwiLHIucG9ydD1udWxsLHIuaG9zdCYmKFwiXCI9PT1FWzBdP0VbMF09ci5ob3N0OkUudW5zaGlmdChyLmhvc3QpKSxyLmhvc3Q9XCJcIixlLnByb3RvY29sJiYoZS5ob3N0bmFtZT1udWxsLGUucG9ydD1udWxsLGUuaG9zdCYmKFwiXCI9PT1wWzBdP3BbMF09ZS5ob3N0OnAudW5zaGlmdChlLmhvc3QpKSxlLmhvc3Q9bnVsbCksXz1fJiYoXCJcIj09PXBbMF18fFwiXCI9PT1FWzBdKSksdylyLmhvc3Q9ZS5ob3N0fHxcIlwiPT09ZS5ob3N0P2UuaG9zdDpyLmhvc3Qsci5ob3N0bmFtZT1lLmhvc3RuYW1lfHxcIlwiPT09ZS5ob3N0bmFtZT9lLmhvc3RuYW1lOnIuaG9zdG5hbWUsci5zZWFyY2g9ZS5zZWFyY2gsci5xdWVyeT1lLnF1ZXJ5LEU9cDtlbHNlIGlmKHAubGVuZ3RoKUV8fChFPVtdKSxFLnBvcCgpLEU9RS5jb25jYXQocCksci5zZWFyY2g9ZS5zZWFyY2gsci5xdWVyeT1lLnF1ZXJ5O2Vsc2UgaWYoIWkuaXNOdWxsT3JVbmRlZmluZWQoZS5zZWFyY2gpKXJldHVybiBBJiYoci5ob3N0bmFtZT1yLmhvc3Q9RS5zaGlmdCgpLChNPSEhKHIuaG9zdCYmci5ob3N0LmluZGV4T2YoXCJAXCIpPjApJiZyLmhvc3Quc3BsaXQoXCJAXCIpKSYmKHIuYXV0aD1NLnNoaWZ0KCksci5ob3N0PXIuaG9zdG5hbWU9TS5zaGlmdCgpKSksci5zZWFyY2g9ZS5zZWFyY2gsci5xdWVyeT1lLnF1ZXJ5LGkuaXNOdWxsKHIucGF0aG5hbWUpJiZpLmlzTnVsbChyLnNlYXJjaCl8fChyLnBhdGg9KHIucGF0aG5hbWU/ci5wYXRobmFtZTpcIlwiKSsoci5zZWFyY2g/ci5zZWFyY2g6XCJcIikpLHIuaHJlZj1yLmZvcm1hdCgpLHI7aWYoIUUubGVuZ3RoKXJldHVybiByLnBhdGhuYW1lPW51bGwsci5zZWFyY2g/ci5wYXRoPVwiL1wiK3Iuc2VhcmNoOnIucGF0aD1udWxsLHIuaHJlZj1yLmZvcm1hdCgpLHI7Zm9yKHZhciB4PUUuc2xpY2UoLTEpWzBdLGs9KHIuaG9zdHx8ZS5ob3N0fHxFLmxlbmd0aD4xKSYmKFwiLlwiPT09eHx8XCIuLlwiPT09eCl8fFwiXCI9PT14LFA9MCxPPUUubGVuZ3RoO08+PTA7Ty0tKVwiLlwiPT09KHg9RVtPXSk/RS5zcGxpY2UoTywxKTpcIi4uXCI9PT14PyhFLnNwbGljZShPLDEpLFArKyk6UCYmKEUuc3BsaWNlKE8sMSksUC0tKTtpZighXyYmIVMpZm9yKDtQLS07UClFLnVuc2hpZnQoXCIuLlwiKTshX3x8XCJcIj09PUVbMF18fEVbMF0mJlwiL1wiPT09RVswXS5jaGFyQXQoMCl8fEUudW5zaGlmdChcIlwiKSxrJiZcIi9cIiE9PUUuam9pbihcIi9cIikuc3Vic3RyKC0xKSYmRS5wdXNoKFwiXCIpO3ZhciBNLEk9XCJcIj09PUVbMF18fEVbMF0mJlwiL1wiPT09RVswXS5jaGFyQXQoMCk7cmV0dXJuIEEmJihyLmhvc3RuYW1lPXIuaG9zdD1JP1wiXCI6RS5sZW5ndGg/RS5zaGlmdCgpOlwiXCIsKE09ISEoci5ob3N0JiZyLmhvc3QuaW5kZXhPZihcIkBcIik+MCkmJnIuaG9zdC5zcGxpdChcIkBcIikpJiYoci5hdXRoPU0uc2hpZnQoKSxyLmhvc3Q9ci5ob3N0bmFtZT1NLnNoaWZ0KCkpKSwoXz1ffHxyLmhvc3QmJkUubGVuZ3RoKSYmIUkmJkUudW5zaGlmdChcIlwiKSxFLmxlbmd0aD9yLnBhdGhuYW1lPUUuam9pbihcIi9cIik6KHIucGF0aG5hbWU9bnVsbCxyLnBhdGg9bnVsbCksaS5pc051bGwoci5wYXRobmFtZSkmJmkuaXNOdWxsKHIuc2VhcmNoKXx8KHIucGF0aD0oci5wYXRobmFtZT9yLnBhdGhuYW1lOlwiXCIpKyhyLnNlYXJjaD9yLnNlYXJjaDpcIlwiKSksci5hdXRoPWUuYXV0aHx8ci5hdXRoLHIuc2xhc2hlcz1yLnNsYXNoZXN8fGUuc2xhc2hlcyxyLmhyZWY9ci5mb3JtYXQoKSxyfSxvLnByb3RvdHlwZS5wYXJzZUhvc3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmhvc3QsdD1hLmV4ZWMoZSk7dCYmKFwiOlwiIT09KHQ9dFswXSkmJih0aGlzLnBvcnQ9dC5zdWJzdHIoMSkpLGU9ZS5zdWJzdHIoMCxlLmxlbmd0aC10Lmxlbmd0aCkpLGUmJih0aGlzLmhvc3RuYW1lPWUpfX0sMjUwMjplPT57XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtpc1N0cmluZzpmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZX0saXNPYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lfSxpc051bGw6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lfSxpc051bGxPclVuZGVmaW5lZDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZX19fSw3NDU4OihlLHQpPT57IWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpPVN0cmluZy5mcm9tQ2hhckNvZGU7ZnVuY3Rpb24gbyhlKXtmb3IodmFyIHQscixuPVtdLGk9MCxvPWUubGVuZ3RoO2k8bzspKHQ9ZS5jaGFyQ29kZUF0KGkrKykpPj01NTI5NiYmdDw9NTYzMTkmJmk8bz81NjMyMD09KDY0NTEyJihyPWUuY2hhckNvZGVBdChpKyspKSk/bi5wdXNoKCgoMTAyMyZ0KTw8MTApKygxMDIzJnIpKzY1NTM2KToobi5wdXNoKHQpLGktLSk6bi5wdXNoKHQpO3JldHVybiBufWZ1bmN0aW9uIHMoZSl7aWYoZT49NTUyOTYmJmU8PTU3MzQzKXRocm93IEVycm9yKFwiTG9uZSBzdXJyb2dhdGUgVStcIitlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpK1wiIGlzIG5vdCBhIHNjYWxhciB2YWx1ZVwiKX1mdW5jdGlvbiBhKGUsdCl7cmV0dXJuIGkoZT4+dCY2M3wxMjgpfWZ1bmN0aW9uIGMoZSl7aWYoMD09KDQyOTQ5NjcxNjgmZSkpcmV0dXJuIGkoZSk7dmFyIHQ9XCJcIjtyZXR1cm4gMD09KDQyOTQ5NjUyNDgmZSk/dD1pKGU+PjYmMzF8MTkyKTowPT0oNDI5NDkwMTc2MCZlKT8ocyhlKSx0PWkoZT4+MTImMTV8MjI0KSx0Kz1hKGUsNikpOjA9PSg0MjkyODcwMTQ0JmUpJiYodD1pKGU+PjE4Jjd8MjQwKSx0Kz1hKGUsMTIpLHQrPWEoZSw2KSksdCtpKDYzJmV8MTI4KX1mdW5jdGlvbiBmKCl7aWYobj49cil0aHJvdyBFcnJvcihcIkludmFsaWQgYnl0ZSBpbmRleFwiKTt2YXIgZT0yNTUmdFtuXTtpZihuKyssMTI4PT0oMTkyJmUpKXJldHVybiA2MyZlO3Rocm93IEVycm9yKFwiSW52YWxpZCBjb250aW51YXRpb24gYnl0ZVwiKX1mdW5jdGlvbiB1KCl7dmFyIGUsaTtpZihuPnIpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGJ5dGUgaW5kZXhcIik7aWYobj09cilyZXR1cm4hMTtpZihlPTI1NSZ0W25dLG4rKywwPT0oMTI4JmUpKXJldHVybiBlO2lmKDE5Mj09KDIyNCZlKSl7aWYoKGk9KDMxJmUpPDw2fGYoKSk+PTEyOClyZXR1cm4gaTt0aHJvdyBFcnJvcihcIkludmFsaWQgY29udGludWF0aW9uIGJ5dGVcIil9aWYoMjI0PT0oMjQwJmUpKXtpZigoaT0oMTUmZSk8PDEyfGYoKTw8NnxmKCkpPj0yMDQ4KXJldHVybiBzKGkpLGk7dGhyb3cgRXJyb3IoXCJJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlXCIpfWlmKDI0MD09KDI0OCZlKSYmKGk9KDcmZSk8PDE4fGYoKTw8MTJ8ZigpPDw2fGYoKSk+PTY1NTM2JiZpPD0xMTE0MTExKXJldHVybiBpO3Rocm93IEVycm9yKFwiSW52YWxpZCBVVEYtOCBkZXRlY3RlZFwiKX1lLnZlcnNpb249XCIzLjAuMFwiLGUuZW5jb2RlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1vKGUpLHI9dC5sZW5ndGgsbj0tMSxpPVwiXCI7KytuPHI7KWkrPWModFtuXSk7cmV0dXJuIGl9LGUuZGVjb2RlPWZ1bmN0aW9uKGUpe3Q9byhlKSxyPXQubGVuZ3RoLG49MDtmb3IodmFyIHMsYT1bXTshMSE9PShzPXUoKSk7KWEucHVzaChzKTtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9ZS5sZW5ndGgsbj0tMSxvPVwiXCI7KytuPHI7KSh0PWVbbl0pPjY1NTM1JiYobys9aSgodC09NjU1MzYpPj4+MTAmMTAyM3w1NTI5NiksdD01NjMyMHwxMDIzJnQpLG8rPWkodCk7cmV0dXJuIG99KGEpfX0odCl9LDQ5Mjc6KGUsdCxyKT0+e2Z1bmN0aW9uIG4oZSl7dHJ5e2lmKCFyLmcubG9jYWxTdG9yYWdlKXJldHVybiExfWNhdGNoKGUpe3JldHVybiExfXZhciB0PXIuZy5sb2NhbFN0b3JhZ2VbZV07cmV0dXJuIG51bGwhPXQmJlwidHJ1ZVwiPT09U3RyaW5nKHQpLnRvTG93ZXJDYXNlKCl9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYobihcIm5vRGVwcmVjYXRpb25cIikpcmV0dXJuIGU7dmFyIHI9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoIXIpe2lmKG4oXCJ0aHJvd0RlcHJlY2F0aW9uXCIpKXRocm93IG5ldyBFcnJvcih0KTtuKFwidHJhY2VEZXByZWNhdGlvblwiKT9jb25zb2xlLnRyYWNlKHQpOmNvbnNvbGUud2Fybih0KSxyPSEwfXJldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fSwzODQ6ZT0+e2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY29weSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5maWxsJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnJlYWRVSW50OH19LDU5NTU6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoMjU4NCksaT1yKDg2NjIpLG89cig2NDMwKSxzPXIoNTY5Mik7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZS5jYWxsLmJpbmQoZSl9dmFyIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJpZ0ludCxmPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wsdT1hKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpLGQ9YShOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YpLGg9YShTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YpLGw9YShCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mKTtpZihjKXZhciBwPWEoQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mKTtpZihmKXZhciBiPWEoU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mKTtmdW5jdGlvbiB5KGUsdCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuITE7dHJ5e3JldHVybiB0KGUpLCEwfWNhdGNoKGUpe3JldHVybiExfX1mdW5jdGlvbiBnKGUpe3JldHVyblwiW29iamVjdCBNYXBdXCI9PT11KGUpfWZ1bmN0aW9uIG0oZSl7cmV0dXJuXCJbb2JqZWN0IFNldF1cIj09PXUoZSl9ZnVuY3Rpb24gdihlKXtyZXR1cm5cIltvYmplY3QgV2Vha01hcF1cIj09PXUoZSl9ZnVuY3Rpb24gdyhlKXtyZXR1cm5cIltvYmplY3QgV2Vha1NldF1cIj09PXUoZSl9ZnVuY3Rpb24gXyhlKXtyZXR1cm5cIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11KGUpfWZ1bmN0aW9uIFMoZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiYoXy53b3JraW5nP18oZSk6ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKX1mdW5jdGlvbiBFKGUpe3JldHVyblwiW29iamVjdCBEYXRhVmlld11cIj09PXUoZSl9ZnVuY3Rpb24gQShlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgRGF0YVZpZXcmJihFLndvcmtpbmc/RShlKTplIGluc3RhbmNlb2YgRGF0YVZpZXcpfXQuaXNBcmd1bWVudHNPYmplY3Q9bix0LmlzR2VuZXJhdG9yRnVuY3Rpb249aSx0LmlzVHlwZWRBcnJheT1zLHQuaXNQcm9taXNlPWZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZlIGluc3RhbmNlb2YgUHJvbWlzZXx8bnVsbCE9PWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRoZW4mJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY2F0Y2h9LHQuaXNBcnJheUJ1ZmZlclZpZXc9ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZBcnJheUJ1ZmZlci5pc1ZpZXc/QXJyYXlCdWZmZXIuaXNWaWV3KGUpOnMoZSl8fEEoZSl9LHQuaXNVaW50OEFycmF5PWZ1bmN0aW9uKGUpe3JldHVyblwiVWludDhBcnJheVwiPT09byhlKX0sdC5pc1VpbnQ4Q2xhbXBlZEFycmF5PWZ1bmN0aW9uKGUpe3JldHVyblwiVWludDhDbGFtcGVkQXJyYXlcIj09PW8oZSl9LHQuaXNVaW50MTZBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIlVpbnQxNkFycmF5XCI9PT1vKGUpfSx0LmlzVWludDMyQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJVaW50MzJBcnJheVwiPT09byhlKX0sdC5pc0ludDhBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIkludDhBcnJheVwiPT09byhlKX0sdC5pc0ludDE2QXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJJbnQxNkFycmF5XCI9PT1vKGUpfSx0LmlzSW50MzJBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIkludDMyQXJyYXlcIj09PW8oZSl9LHQuaXNGbG9hdDMyQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJGbG9hdDMyQXJyYXlcIj09PW8oZSl9LHQuaXNGbG9hdDY0QXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJGbG9hdDY0QXJyYXlcIj09PW8oZSl9LHQuaXNCaWdJbnQ2NEFycmF5PWZ1bmN0aW9uKGUpe3JldHVyblwiQmlnSW50NjRBcnJheVwiPT09byhlKX0sdC5pc0JpZ1VpbnQ2NEFycmF5PWZ1bmN0aW9uKGUpe3JldHVyblwiQmlnVWludDY0QXJyYXlcIj09PW8oZSl9LGcud29ya2luZz1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwJiZnKG5ldyBNYXApLHQuaXNNYXA9ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIE1hcCYmKGcud29ya2luZz9nKGUpOmUgaW5zdGFuY2VvZiBNYXApfSxtLndvcmtpbmc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCYmbShuZXcgU2V0KSx0LmlzU2V0PWZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBTZXQmJihtLndvcmtpbmc/bShlKTplIGluc3RhbmNlb2YgU2V0KX0sdi53b3JraW5nPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBXZWFrTWFwJiZ2KG5ldyBXZWFrTWFwKSx0LmlzV2Vha01hcD1mdW5jdGlvbihlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgV2Vha01hcCYmKHYud29ya2luZz92KGUpOmUgaW5zdGFuY2VvZiBXZWFrTWFwKX0sdy53b3JraW5nPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBXZWFrU2V0JiZ3KG5ldyBXZWFrU2V0KSx0LmlzV2Vha1NldD1mdW5jdGlvbihlKXtyZXR1cm4gdyhlKX0sXy53b3JraW5nPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmXyhuZXcgQXJyYXlCdWZmZXIpLHQuaXNBcnJheUJ1ZmZlcj1TLEUud29ya2luZz1cInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBEYXRhVmlldyYmRShuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpLDAsMSkpLHQuaXNEYXRhVmlldz1BO3ZhciB4PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcj9TaGFyZWRBcnJheUJ1ZmZlcjp2b2lkIDA7ZnVuY3Rpb24gayhlKXtyZXR1cm5cIltvYmplY3QgU2hhcmVkQXJyYXlCdWZmZXJdXCI9PT11KGUpfWZ1bmN0aW9uIFAoZSl7cmV0dXJuIHZvaWQgMCE9PXgmJih2b2lkIDA9PT1rLndvcmtpbmcmJihrLndvcmtpbmc9ayhuZXcgeCkpLGsud29ya2luZz9rKGUpOmUgaW5zdGFuY2VvZiB4KX1mdW5jdGlvbiBPKGUpe3JldHVybiB5KGUsZCl9ZnVuY3Rpb24gTShlKXtyZXR1cm4geShlLGgpfWZ1bmN0aW9uIEkoZSl7cmV0dXJuIHkoZSxsKX1mdW5jdGlvbiBUKGUpe3JldHVybiBjJiZ5KGUscCl9ZnVuY3Rpb24gUihlKXtyZXR1cm4gZiYmeShlLGIpfXQuaXNTaGFyZWRBcnJheUJ1ZmZlcj1QLHQuaXNBc3luY0Z1bmN0aW9uPWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBc3luY0Z1bmN0aW9uXVwiPT09dShlKX0sdC5pc01hcEl0ZXJhdG9yPWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBNYXAgSXRlcmF0b3JdXCI9PT11KGUpfSx0LmlzU2V0SXRlcmF0b3I9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IFNldCBJdGVyYXRvcl1cIj09PXUoZSl9LHQuaXNHZW5lcmF0b3JPYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEdlbmVyYXRvcl1cIj09PXUoZSl9LHQuaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlPWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBXZWJBc3NlbWJseS5Nb2R1bGVdXCI9PT11KGUpfSx0LmlzTnVtYmVyT2JqZWN0PU8sdC5pc1N0cmluZ09iamVjdD1NLHQuaXNCb29sZWFuT2JqZWN0PUksdC5pc0JpZ0ludE9iamVjdD1ULHQuaXNTeW1ib2xPYmplY3Q9Uix0LmlzQm94ZWRQcmltaXRpdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIE8oZSl8fE0oZSl8fEkoZSl8fFQoZSl8fFIoZSl9LHQuaXNBbnlBcnJheUJ1ZmZlcj1mdW5jdGlvbihlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmKFMoZSl8fFAoZSkpfSxbXCJpc1Byb3h5XCIsXCJpc0V4dGVybmFsXCIsXCJpc01vZHVsZU5hbWVzcGFjZU9iamVjdFwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiExLHZhbHVlOmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKGUrXCIgaXMgbm90IHN1cHBvcnRlZCBpbiB1c2VybGFuZFwiKX19KX0pKX0sOTUzOTooZSx0LHIpPT57dmFyIG49cig0MTU1KSxpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSkscj17fSxuPTA7bjx0Lmxlbmd0aDtuKyspclt0W25dXT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdFtuXSk7cmV0dXJuIHJ9LG89LyVbc2RqJV0vZzt0LmZvcm1hdD1mdW5jdGlvbihlKXtpZighdihlKSl7Zm9yKHZhciB0PVtdLHI9MDtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXQucHVzaChmKGFyZ3VtZW50c1tyXSkpO3JldHVybiB0LmpvaW4oXCIgXCIpfXI9MTtmb3IodmFyIG49YXJndW1lbnRzLGk9bi5sZW5ndGgscz1TdHJpbmcoZSkucmVwbGFjZShvLChmdW5jdGlvbihlKXtpZihcIiUlXCI9PT1lKXJldHVyblwiJVwiO2lmKHI+PWkpcmV0dXJuIGU7c3dpdGNoKGUpe2Nhc2VcIiVzXCI6cmV0dXJuIFN0cmluZyhuW3IrK10pO2Nhc2VcIiVkXCI6cmV0dXJuIE51bWJlcihuW3IrK10pO2Nhc2VcIiVqXCI6dHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeShuW3IrK10pfWNhdGNoKGUpe3JldHVyblwiW0NpcmN1bGFyXVwifWRlZmF1bHQ6cmV0dXJuIGV9fSkpLGE9bltyXTtyPGk7YT1uWysrcl0pZyhhKXx8IVMoYSk/cys9XCIgXCIrYTpzKz1cIiBcIitmKGEpO3JldHVybiBzfSx0LmRlcHJlY2F0ZT1mdW5jdGlvbihlLHIpe2lmKHZvaWQgMCE9PW4mJiEwPT09bi5ub0RlcHJlY2F0aW9uKXJldHVybiBlO2lmKHZvaWQgMD09PW4pcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuZGVwcmVjYXRlKGUscikuYXBwbHkodGhpcyxhcmd1bWVudHMpfTt2YXIgaT0hMTtyZXR1cm4gZnVuY3Rpb24oKXtpZighaSl7aWYobi50aHJvd0RlcHJlY2F0aW9uKXRocm93IG5ldyBFcnJvcihyKTtuLnRyYWNlRGVwcmVjYXRpb24/Y29uc29sZS50cmFjZShyKTpjb25zb2xlLmVycm9yKHIpLGk9ITB9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX07dmFyIHM9e30sYT0vXiQvO2lmKG4uZW52Lk5PREVfREVCVUcpe3ZhciBjPW4uZW52Lk5PREVfREVCVUc7Yz1jLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrPy5dL2csXCJcXFxcJCZcIikucmVwbGFjZSgvXFwqL2csXCIuKlwiKS5yZXBsYWNlKC8sL2csXCIkfF5cIikudG9VcHBlckNhc2UoKSxhPW5ldyBSZWdFeHAoXCJeXCIrYytcIiRcIixcImlcIil9ZnVuY3Rpb24gZihlLHIpe3ZhciBuPXtzZWVuOltdLHN0eWxpemU6ZH07cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+PTMmJihuLmRlcHRoPWFyZ3VtZW50c1syXSksYXJndW1lbnRzLmxlbmd0aD49NCYmKG4uY29sb3JzPWFyZ3VtZW50c1szXSkseShyKT9uLnNob3dIaWRkZW49cjpyJiZ0Ll9leHRlbmQobixyKSx3KG4uc2hvd0hpZGRlbikmJihuLnNob3dIaWRkZW49ITEpLHcobi5kZXB0aCkmJihuLmRlcHRoPTIpLHcobi5jb2xvcnMpJiYobi5jb2xvcnM9ITEpLHcobi5jdXN0b21JbnNwZWN0KSYmKG4uY3VzdG9tSW5zcGVjdD0hMCksbi5jb2xvcnMmJihuLnN0eWxpemU9dSksaChuLGUsbi5kZXB0aCl9ZnVuY3Rpb24gdShlLHQpe3ZhciByPWYuc3R5bGVzW3RdO3JldHVybiByP1wiXHUwMDFiW1wiK2YuY29sb3JzW3JdWzBdK1wibVwiK2UrXCJcdTAwMWJbXCIrZi5jb2xvcnNbcl1bMV0rXCJtXCI6ZX1mdW5jdGlvbiBkKGUsdCl7cmV0dXJuIGV9ZnVuY3Rpb24gaChlLHIsbil7aWYoZS5jdXN0b21JbnNwZWN0JiZyJiZ4KHIuaW5zcGVjdCkmJnIuaW5zcGVjdCE9PXQuaW5zcGVjdCYmKCFyLmNvbnN0cnVjdG9yfHxyLmNvbnN0cnVjdG9yLnByb3RvdHlwZSE9PXIpKXt2YXIgaT1yLmluc3BlY3QobixlKTtyZXR1cm4gdihpKXx8KGk9aChlLGksbikpLGl9dmFyIG89ZnVuY3Rpb24oZSx0KXtpZih3KHQpKXJldHVybiBlLnN0eWxpemUoXCJ1bmRlZmluZWRcIixcInVuZGVmaW5lZFwiKTtpZih2KHQpKXt2YXIgcj1cIidcIitKU09OLnN0cmluZ2lmeSh0KS5yZXBsYWNlKC9eXCJ8XCIkL2csXCJcIikucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJykrXCInXCI7cmV0dXJuIGUuc3R5bGl6ZShyLFwic3RyaW5nXCIpfXJldHVybiBtKHQpP2Uuc3R5bGl6ZShcIlwiK3QsXCJudW1iZXJcIik6eSh0KT9lLnN0eWxpemUoXCJcIit0LFwiYm9vbGVhblwiKTpnKHQpP2Uuc3R5bGl6ZShcIm51bGxcIixcIm51bGxcIik6dm9pZCAwfShlLHIpO2lmKG8pcmV0dXJuIG87dmFyIHM9T2JqZWN0LmtleXMociksYT1mdW5jdGlvbihlKXt2YXIgdD17fTtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlLHIpe3RbZV09ITB9KSksdH0ocyk7aWYoZS5zaG93SGlkZGVuJiYocz1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyKSksQShyKSYmKHMuaW5kZXhPZihcIm1lc3NhZ2VcIik+PTB8fHMuaW5kZXhPZihcImRlc2NyaXB0aW9uXCIpPj0wKSlyZXR1cm4gbChyKTtpZigwPT09cy5sZW5ndGgpe2lmKHgocikpe3ZhciBjPXIubmFtZT9cIjogXCIrci5uYW1lOlwiXCI7cmV0dXJuIGUuc3R5bGl6ZShcIltGdW5jdGlvblwiK2MrXCJdXCIsXCJzcGVjaWFsXCIpfWlmKF8ocikpcmV0dXJuIGUuc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwociksXCJyZWdleHBcIik7aWYoRShyKSlyZXR1cm4gZS5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwociksXCJkYXRlXCIpO2lmKEEocikpcmV0dXJuIGwocil9dmFyIGYsdT1cIlwiLGQ9ITEsUz1bXCJ7XCIsXCJ9XCJdO3JldHVybiBiKHIpJiYoZD0hMCxTPVtcIltcIixcIl1cIl0pLHgocikmJih1PVwiIFtGdW5jdGlvblwiKyhyLm5hbWU/XCI6IFwiK3IubmFtZTpcIlwiKStcIl1cIiksXyhyKSYmKHU9XCIgXCIrUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHIpKSxFKHIpJiYodT1cIiBcIitEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHIpKSxBKHIpJiYodT1cIiBcIitsKHIpKSwwIT09cy5sZW5ndGh8fGQmJjAhPXIubGVuZ3RoP248MD9fKHIpP2Uuc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwociksXCJyZWdleHBcIik6ZS5zdHlsaXplKFwiW09iamVjdF1cIixcInNwZWNpYWxcIik6KGUuc2Vlbi5wdXNoKHIpLGY9ZD9mdW5jdGlvbihlLHQscixuLGkpe2Zvcih2YXIgbz1bXSxzPTAsYT10Lmxlbmd0aDtzPGE7KytzKUkodCxTdHJpbmcocykpP28ucHVzaChwKGUsdCxyLG4sU3RyaW5nKHMpLCEwKSk6by5wdXNoKFwiXCIpO3JldHVybiBpLmZvckVhY2goKGZ1bmN0aW9uKGkpe2kubWF0Y2goL15cXGQrJC8pfHxvLnB1c2gocChlLHQscixuLGksITApKX0pKSxvfShlLHIsbixhLHMpOnMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gcChlLHIsbixhLHQsZCl9KSksZS5zZWVuLnBvcCgpLGZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZS5yZWR1Y2UoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQuaW5kZXhPZihcIlxcblwiKSxlK3QucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csXCJcIikubGVuZ3RoKzF9KSwwKT42MD9yWzBdKyhcIlwiPT09dD9cIlwiOnQrXCJcXG4gXCIpK1wiIFwiK2Uuam9pbihcIixcXG4gIFwiKStcIiBcIityWzFdOnJbMF0rdCtcIiBcIitlLmpvaW4oXCIsIFwiKStcIiBcIityWzFdfShmLHUsUykpOlNbMF0rdStTWzFdfWZ1bmN0aW9uIGwoZSl7cmV0dXJuXCJbXCIrRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkrXCJdXCJ9ZnVuY3Rpb24gcChlLHQscixuLGksbyl7dmFyIHMsYSxjO2lmKChjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxpKXx8e3ZhbHVlOnRbaV19KS5nZXQ/YT1jLnNldD9lLnN0eWxpemUoXCJbR2V0dGVyL1NldHRlcl1cIixcInNwZWNpYWxcIik6ZS5zdHlsaXplKFwiW0dldHRlcl1cIixcInNwZWNpYWxcIik6Yy5zZXQmJihhPWUuc3R5bGl6ZShcIltTZXR0ZXJdXCIsXCJzcGVjaWFsXCIpKSxJKG4saSl8fChzPVwiW1wiK2krXCJdXCIpLGF8fChlLnNlZW4uaW5kZXhPZihjLnZhbHVlKTwwPyhhPWcocik/aChlLGMudmFsdWUsbnVsbCk6aChlLGMudmFsdWUsci0xKSkuaW5kZXhPZihcIlxcblwiKT4tMSYmKGE9bz9hLnNwbGl0KFwiXFxuXCIpLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCIgIFwiK2V9KSkuam9pbihcIlxcblwiKS5zdWJzdHIoMik6XCJcXG5cIithLnNwbGl0KFwiXFxuXCIpLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCIgICBcIitlfSkpLmpvaW4oXCJcXG5cIikpOmE9ZS5zdHlsaXplKFwiW0NpcmN1bGFyXVwiLFwic3BlY2lhbFwiKSksdyhzKSl7aWYobyYmaS5tYXRjaCgvXlxcZCskLykpcmV0dXJuIGE7KHM9SlNPTi5zdHJpbmdpZnkoXCJcIitpKSkubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pPyhzPXMuc3Vic3RyKDEscy5sZW5ndGgtMikscz1lLnN0eWxpemUocyxcIm5hbWVcIikpOihzPXMucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJykucmVwbGFjZSgvKF5cInxcIiQpL2csXCInXCIpLHM9ZS5zdHlsaXplKHMsXCJzdHJpbmdcIikpfXJldHVybiBzK1wiOiBcIithfWZ1bmN0aW9uIGIoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl9ZnVuY3Rpb24geShlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGV9ZnVuY3Rpb24gZyhlKXtyZXR1cm4gbnVsbD09PWV9ZnVuY3Rpb24gbShlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZX1mdW5jdGlvbiB2KGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIHcoZSl7cmV0dXJuIHZvaWQgMD09PWV9ZnVuY3Rpb24gXyhlKXtyZXR1cm4gUyhlKSYmXCJbb2JqZWN0IFJlZ0V4cF1cIj09PWsoZSl9ZnVuY3Rpb24gUyhlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWV9ZnVuY3Rpb24gRShlKXtyZXR1cm4gUyhlKSYmXCJbb2JqZWN0IERhdGVdXCI9PT1rKGUpfWZ1bmN0aW9uIEEoZSl7cmV0dXJuIFMoZSkmJihcIltvYmplY3QgRXJyb3JdXCI9PT1rKGUpfHxlIGluc3RhbmNlb2YgRXJyb3IpfWZ1bmN0aW9uIHgoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1mdW5jdGlvbiBrKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gUChlKXtyZXR1cm4gZTwxMD9cIjBcIitlLnRvU3RyaW5nKDEwKTplLnRvU3RyaW5nKDEwKX10LmRlYnVnbG9nPWZ1bmN0aW9uKGUpe2lmKGU9ZS50b1VwcGVyQ2FzZSgpLCFzW2VdKWlmKGEudGVzdChlKSl7dmFyIHI9bi5waWQ7c1tlXT1mdW5jdGlvbigpe3ZhciBuPXQuZm9ybWF0LmFwcGx5KHQsYXJndW1lbnRzKTtjb25zb2xlLmVycm9yKFwiJXMgJWQ6ICVzXCIsZSxyLG4pfX1lbHNlIHNbZV09ZnVuY3Rpb24oKXt9O3JldHVybiBzW2VdfSx0Lmluc3BlY3Q9ZixmLmNvbG9ycz17Ym9sZDpbMSwyMl0saXRhbGljOlszLDIzXSx1bmRlcmxpbmU6WzQsMjRdLGludmVyc2U6WzcsMjddLHdoaXRlOlszNywzOV0sZ3JleTpbOTAsMzldLGJsYWNrOlszMCwzOV0sYmx1ZTpbMzQsMzldLGN5YW46WzM2LDM5XSxncmVlbjpbMzIsMzldLG1hZ2VudGE6WzM1LDM5XSxyZWQ6WzMxLDM5XSx5ZWxsb3c6WzMzLDM5XX0sZi5zdHlsZXM9e3NwZWNpYWw6XCJjeWFuXCIsbnVtYmVyOlwieWVsbG93XCIsYm9vbGVhbjpcInllbGxvd1wiLHVuZGVmaW5lZDpcImdyZXlcIixudWxsOlwiYm9sZFwiLHN0cmluZzpcImdyZWVuXCIsZGF0ZTpcIm1hZ2VudGFcIixyZWdleHA6XCJyZWRcIn0sdC50eXBlcz1yKDU5NTUpLHQuaXNBcnJheT1iLHQuaXNCb29sZWFuPXksdC5pc051bGw9Zyx0LmlzTnVsbE9yVW5kZWZpbmVkPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lfSx0LmlzTnVtYmVyPW0sdC5pc1N0cmluZz12LHQuaXNTeW1ib2w9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGV9LHQuaXNVbmRlZmluZWQ9dyx0LmlzUmVnRXhwPV8sdC50eXBlcy5pc1JlZ0V4cD1fLHQuaXNPYmplY3Q9Uyx0LmlzRGF0ZT1FLHQudHlwZXMuaXNEYXRlPUUsdC5pc0Vycm9yPUEsdC50eXBlcy5pc05hdGl2ZUVycm9yPUEsdC5pc0Z1bmN0aW9uPXgsdC5pc1ByaW1pdGl2ZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWV8fFwiYm9vbGVhblwiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGV8fFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcInN5bWJvbFwiPT10eXBlb2YgZXx8dm9pZCAwPT09ZX0sdC5pc0J1ZmZlcj1yKDM4NCk7dmFyIE89W1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiXTtmdW5jdGlvbiBNKCl7dmFyIGU9bmV3IERhdGUsdD1bUChlLmdldEhvdXJzKCkpLFAoZS5nZXRNaW51dGVzKCkpLFAoZS5nZXRTZWNvbmRzKCkpXS5qb2luKFwiOlwiKTtyZXR1cm5bZS5nZXREYXRlKCksT1tlLmdldE1vbnRoKCldLHRdLmpvaW4oXCIgXCIpfWZ1bmN0aW9uIEkoZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9dC5sb2c9ZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcIiVzIC0gJXNcIixNKCksdC5mb3JtYXQuYXBwbHkodCxhcmd1bWVudHMpKX0sdC5pbmhlcml0cz1yKDU3MTcpLHQuX2V4dGVuZD1mdW5jdGlvbihlLHQpe2lmKCF0fHwhUyh0KSlyZXR1cm4gZTtmb3IodmFyIHI9T2JqZWN0LmtleXModCksbj1yLmxlbmd0aDtuLS07KWVbcltuXV09dFtyW25dXTtyZXR1cm4gZX07dmFyIFQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbD9TeW1ib2woXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIik6dm9pZCAwO2Z1bmN0aW9uIFIoZSx0KXtpZighZSl7dmFyIHI9bmV3IEVycm9yKFwiUHJvbWlzZSB3YXMgcmVqZWN0ZWQgd2l0aCBhIGZhbHN5IHZhbHVlXCIpO3IucmVhc29uPWUsZT1yfXJldHVybiB0KGUpfXQucHJvbWlzaWZ5PWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtpZihUJiZlW1RdKXt2YXIgdDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZih0PWVbVF0pKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInV0aWwucHJvbWlzaWZ5LmN1c3RvbVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCxULHt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksdH1mdW5jdGlvbiB0KCl7Zm9yKHZhciB0LHIsbj1uZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxuKXt0PWUscj1ufSkpLGk9W10sbz0wO288YXJndW1lbnRzLmxlbmd0aDtvKyspaS5wdXNoKGFyZ3VtZW50c1tvXSk7aS5wdXNoKChmdW5jdGlvbihlLG4pe2U/cihlKTp0KG4pfSkpO3RyeXtlLmFwcGx5KHRoaXMsaSl9Y2F0Y2goZSl7cihlKX1yZXR1cm4gbn1yZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKHQsT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKSxUJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxULHt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxpKGUpKX0sdC5wcm9taXNpZnkuY3VzdG9tPVQsdC5jYWxsYmFja2lmeT1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7ZnVuY3Rpb24gdCgpe2Zvcih2YXIgdD1bXSxyPTA7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0LnB1c2goYXJndW1lbnRzW3JdKTt2YXIgaT10LnBvcCgpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvblwiKTt2YXIgbz10aGlzLHM9ZnVuY3Rpb24oKXtyZXR1cm4gaS5hcHBseShvLGFyZ3VtZW50cyl9O2UuYXBwbHkodGhpcyx0KS50aGVuKChmdW5jdGlvbihlKXtuLm5leHRUaWNrKHMuYmluZChudWxsLG51bGwsZSkpfSksKGZ1bmN0aW9uKGUpe24ubmV4dFRpY2soUi5iaW5kKG51bGwsZSxzKSl9KSl9cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZih0LE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSksT2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxpKGUpKSx0fX0sNDkyODplPT57XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtFcnJvclJlc3BvbnNlOmZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuZXJyb3ImJmUuZXJyb3IubWVzc2FnZT9lLmVycm9yLm1lc3NhZ2U6SlNPTi5zdHJpbmdpZnkoZSkscj1lLmVycm9yJiZlLmVycm9yLmRhdGE/ZS5lcnJvci5kYXRhOm51bGwsbj1uZXcgRXJyb3IoXCJSZXR1cm5lZCBlcnJvcjogXCIrdCk7cmV0dXJuIG4uZGF0YT1yLG59LEludmFsaWROdW1iZXJPZlBhcmFtczpmdW5jdGlvbihlLHQscil7cmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBudW1iZXIgb2YgcGFyYW1ldGVycyBmb3IgXCInK3IrJ1wiLiBHb3QgJytlK1wiIGV4cGVjdGVkIFwiK3QrXCIhXCIpfSxJbnZhbGlkQ29ubmVjdGlvbjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLkNvbm5lY3Rpb25FcnJvcihcIkNPTk5FQ1RJT04gRVJST1I6IENvdWxkbid0IGNvbm5lY3QgdG8gbm9kZSBcIitlK1wiLlwiLHQpfSxJbnZhbGlkUHJvdmlkZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEVycm9yKFwiUHJvdmlkZXIgbm90IHNldCBvciBpbnZhbGlkXCIpfSxJbnZhbGlkUmVzcG9uc2U6ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5lcnJvciYmZS5lcnJvci5tZXNzYWdlP2UuZXJyb3IubWVzc2FnZTpcIkludmFsaWQgSlNPTiBSUEMgcmVzcG9uc2U6IFwiK0pTT04uc3RyaW5naWZ5KGUpO3JldHVybiBuZXcgRXJyb3IodCl9LENvbm5lY3Rpb25UaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgRXJyb3IoXCJDT05ORUNUSU9OIFRJTUVPVVQ6IHRpbWVvdXQgb2YgXCIrZStcIiBtcyBhY2hpdmVkXCIpfSxDb25uZWN0aW9uTm90T3BlbkVycm9yOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLkNvbm5lY3Rpb25FcnJvcihcImNvbm5lY3Rpb24gbm90IG9wZW4gb24gc2VuZCgpXCIsZSl9LENvbm5lY3Rpb25DbG9zZUVycm9yOmZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZlLmNvZGUmJmUucmVhc29uP3RoaXMuQ29ubmVjdGlvbkVycm9yKFwiQ09OTkVDVElPTiBFUlJPUjogVGhlIGNvbm5lY3Rpb24gZ290IGNsb3NlZCB3aXRoIHRoZSBjbG9zZSBjb2RlIGBcIitlLmNvZGUrXCJgIGFuZCB0aGUgZm9sbG93aW5nIHJlYXNvbiBzdHJpbmcgYFwiK2UucmVhc29uK1wiYFwiLGUpOm5ldyBFcnJvcihcIkNPTk5FQ1RJT04gRVJST1I6IFRoZSBjb25uZWN0aW9uIGNsb3NlZCB1bmV4cGVjdGVkbHlcIil9LE1heEF0dGVtcHRzUmVhY2hlZE9uUmVjb25uZWN0aW5nRXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEVycm9yKFwiTWF4aW11bSBudW1iZXIgb2YgcmVjb25uZWN0IGF0dGVtcHRzIHJlYWNoZWQhXCIpfSxQZW5kaW5nUmVxdWVzdHNPblJlY29ubmVjdGluZ0Vycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBFcnJvcihcIkNPTk5FQ1RJT04gRVJST1I6IFByb3ZpZGVyIHN0YXJ0ZWQgdG8gcmVjb25uZWN0IGJlZm9yZSB0aGUgcmVzcG9uc2UgZ290IHJlY2VpdmVkIVwiKX0sQ29ubmVjdGlvbkVycm9yOmZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj1uZXcgRXJyb3IoZSk7cmV0dXJuIHQmJihyLmNvZGU9dC5jb2RlLHIucmVhc29uPXQucmVhc29uKSxyfSxSZXZlcnRJbnN0cnVjdGlvbkVycm9yOmZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IEVycm9yKFwiWW91ciByZXF1ZXN0IGdvdCByZXZlcnRlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcmVhc29uIHN0cmluZzogXCIrZSk7cmV0dXJuIHIucmVhc29uPWUsci5zaWduYXR1cmU9dCxyfSxUcmFuc2FjdGlvblJldmVydEluc3RydWN0aW9uRXJyb3I6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPW5ldyBFcnJvcihcIlRyYW5zYWN0aW9uIGhhcyBiZWVuIHJldmVydGVkIGJ5IHRoZSBFVk06XFxuXCIrSlNPTi5zdHJpbmdpZnkocixudWxsLDIpKTtyZXR1cm4gbi5yZWFzb249ZSxuLnNpZ25hdHVyZT10LG4ucmVjZWlwdD1yLG59LFRyYW5zYWN0aW9uRXJyb3I6ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgRXJyb3IoZSk7cmV0dXJuIHIucmVjZWlwdD10LHJ9LE5vQ29udHJhY3RBZGRyZXNzRm91bmRFcnJvcjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5UcmFuc2FjdGlvbkVycm9yKFwiVGhlIHRyYW5zYWN0aW9uIHJlY2VpcHQgZGlkbid0IGNvbnRhaW4gYSBjb250cmFjdCBhZGRyZXNzLlwiLGUpfSxDb250cmFjdENvZGVOb3RTdG9yZWRFcnJvcjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5UcmFuc2FjdGlvbkVycm9yKFwiVGhlIGNvbnRyYWN0IGNvZGUgY291bGRuJ3QgYmUgc3RvcmVkLCBwbGVhc2UgY2hlY2sgeW91ciBnYXMgbGltaXQuXCIsZSl9LFRyYW5zYWN0aW9uUmV2ZXJ0ZWRXaXRob3V0UmVhc29uRXJyb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuVHJhbnNhY3Rpb25FcnJvcihcIlRyYW5zYWN0aW9uIGhhcyBiZWVuIHJldmVydGVkIGJ5IHRoZSBFVk06XFxuXCIrSlNPTi5zdHJpbmdpZnkoZSxudWxsLDIpLGUpfSxUcmFuc2FjdGlvbk91dE9mR2FzRXJyb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuVHJhbnNhY3Rpb25FcnJvcihcIlRyYW5zYWN0aW9uIHJhbiBvdXQgb2YgZ2FzLiBQbGVhc2UgcHJvdmlkZSBtb3JlIGdhczpcXG5cIitKU09OLnN0cmluZ2lmeShlLG51bGwsMiksZSl9LFJlc29sdmVyTWV0aG9kTWlzc2luZ0Vycm9yOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBFcnJvcihcIlRoZSByZXNvbHZlciBhdCBcIitlKydkb2VzIG5vdCBpbXBsZW1lbnQgcmVxdWVzdGVkIG1ldGhvZDogXCInK3QrJ1wiLicpfSxDb250cmFjdE1pc3NpbmdBQklFcnJvcjpmdW5jdGlvbigpe3JldHVybiBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwcm92aWRlIHRoZSBqc29uIGludGVyZmFjZSBvZiB0aGUgY29udHJhY3Qgd2hlbiBpbnN0YW50aWF0aW5nIGEgY29udHJhY3Qgb2JqZWN0LlwiKX0sQ29udHJhY3RPbmNlUmVxdWlyZXNDYWxsYmFja0Vycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBFcnJvcihcIk9uY2UgcmVxdWlyZXMgYSBjYWxsYmFjayBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlci5cIil9LENvbnRyYWN0RXZlbnREb2VzTm90RXhpc3RFcnJvcjpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IEVycm9yKCdFdmVudCBcIicrZStcIlxcXCIgZG9lc24ndCBleGlzdCBpbiB0aGlzIGNvbnRyYWN0LlwiKX0sQ29udHJhY3RSZXNlcnZlZEV2ZW50RXJyb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBFcnJvcignVGhlIGV2ZW50IFwiJytlK1wiXFxcIiBpcyBhIHJlc2VydmVkIGV2ZW50IG5hbWUsIHlvdSBjYW4ndCB1c2UgaXQuXCIpfSxDb250cmFjdE1pc3NpbmdEZXBsb3lEYXRhRXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEVycm9yKCdObyBcImRhdGFcIiBzcGVjaWZpZWQgaW4gbmVpdGhlciB0aGUgZ2l2ZW4gb3B0aW9ucywgbm9yIHRoZSBkZWZhdWx0IG9wdGlvbnMuJyl9LENvbnRyYWN0Tm9BZGRyZXNzRGVmaW5lZEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBFcnJvcihcIlRoaXMgY29udHJhY3Qgb2JqZWN0IGRvZXNuJ3QgaGF2ZSBhZGRyZXNzIHNldCB5ZXQsIHBsZWFzZSBzZXQgYW4gYWRkcmVzcyBmaXJzdC5cIil9LENvbnRyYWN0Tm9Gcm9tQWRkcmVzc0RlZmluZWRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBuZXcgRXJyb3IoJ05vIFwiZnJvbVwiIGFkZHJlc3Mgc3BlY2lmaWVkIGluIG5laXRoZXIgdGhlIGdpdmVuIG9wdGlvbnMsIG5vciB0aGUgZGVmYXVsdCBvcHRpb25zLicpfX19LDYyNjc6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoODI2OSksaT1yKDQ3NTEpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIG4udG9CTihlKS50b1N0cmluZygxMCl9LHM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwIT09ZSlyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuXCJsYXRlc3RcIj09PWV8fFwicGVuZGluZ1wiPT09ZXx8XCJlYXJsaWVzdFwiPT09ZX0oZSk/ZTpcImdlbmVzaXNcIj09PWU/XCIweDBcIjpuLmlzSGV4U3RyaWN0KGUpP1wic3RyaW5nXCI9PXR5cGVvZiBlP2UudG9Mb3dlckNhc2UoKTplOm4ubnVtYmVyVG9IZXgoZSl9LGE9ZnVuY3Rpb24oZSl7aWYoZS50byYmKGUudG89dShlLnRvKSksZS5kYXRhJiZlLmlucHV0KXRocm93IG5ldyBFcnJvcignWW91IGNhblxcJ3QgaGF2ZSBcImRhdGFcIiBhbmQgXCJpbnB1dFwiIGFzIHByb3BlcnRpZXMgb2YgdHJhbnNhY3Rpb25zIGF0IHRoZSBzYW1lIHRpbWUsIHBsZWFzZSB1c2UgZWl0aGVyIFwiZGF0YVwiIG9yIFwiaW5wdXRcIiBpbnN0ZWFkLicpO2lmKCFlLmRhdGEmJmUuaW5wdXQmJihlLmRhdGE9ZS5pbnB1dCxkZWxldGUgZS5pbnB1dCksZS5kYXRhJiYhZS5kYXRhLnN0YXJ0c1dpdGgoXCIweFwiKSYmKGUuZGF0YT1cIjB4XCIrZS5kYXRhKSxlLmRhdGEmJiFuLmlzSGV4KGUuZGF0YSkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGRhdGEgZmllbGQgbXVzdCBiZSBIRVggZW5jb2RlZCBkYXRhLlwiKTtyZXR1cm4oZS5nYXN8fGUuZ2FzTGltaXQpJiYoZS5nYXM9ZS5nYXN8fGUuZ2FzTGltaXQpLChlLm1heFByaW9yaXR5RmVlUGVyR2FzfHxlLm1heEZlZVBlckdhcykmJmRlbGV0ZSBlLmdhc1ByaWNlLFtcImdhc1ByaWNlXCIsXCJnYXNcIixcInZhbHVlXCIsXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiLFwibWF4RmVlUGVyR2FzXCIsXCJub25jZVwiXS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT1lW3RdfSkpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2VbdF09bi5udW1iZXJUb0hleChlW3RdKX0pKSxlfSxjPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZS5ibG9ja051bWJlciYmKGUuYmxvY2tOdW1iZXI9bi5oZXhUb051bWJlcihlLmJsb2NrTnVtYmVyKSksbnVsbCE9PWUudHJhbnNhY3Rpb25JbmRleCYmKGUudHJhbnNhY3Rpb25JbmRleD1uLmhleFRvTnVtYmVyKGUudHJhbnNhY3Rpb25JbmRleCkpLGUubm9uY2U9bi5oZXhUb051bWJlcihlLm5vbmNlKSxlLmdhcz1uLmhleFRvTnVtYmVyKGUuZ2FzKSxlLmdhc1ByaWNlJiYoZS5nYXNQcmljZT1vKGUuZ2FzUHJpY2UpKSxlLm1heEZlZVBlckdhcyYmKGUubWF4RmVlUGVyR2FzPW8oZS5tYXhGZWVQZXJHYXMpKSxlLm1heFByaW9yaXR5RmVlUGVyR2FzJiYoZS5tYXhQcmlvcml0eUZlZVBlckdhcz1vKGUubWF4UHJpb3JpdHlGZWVQZXJHYXMpKSxlLnR5cGUmJihlLnR5cGU9bi5oZXhUb051bWJlcihlLnR5cGUpKSxlLnZhbHVlPW8oZS52YWx1ZSksZS50byYmbi5pc0FkZHJlc3MoZS50byk/ZS50bz1uLnRvQ2hlY2tzdW1BZGRyZXNzKGUudG8pOmUudG89bnVsbCxlLmZyb20mJihlLmZyb209bi50b0NoZWNrc3VtQWRkcmVzcyhlLmZyb20pKSxlfSxmPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlLmJsb2NrSGFzaCYmXCJzdHJpbmdcIj09dHlwZW9mIGUudHJhbnNhY3Rpb25IYXNoJiZcInN0cmluZ1wiPT10eXBlb2YgZS5sb2dJbmRleCl7dmFyIHQ9bi5zaGEzKGUuYmxvY2tIYXNoLnJlcGxhY2UoXCIweFwiLFwiXCIpK2UudHJhbnNhY3Rpb25IYXNoLnJlcGxhY2UoXCIweFwiLFwiXCIpK2UubG9nSW5kZXgucmVwbGFjZShcIjB4XCIsXCJcIikpO2UuaWQ9XCJsb2dfXCIrdC5yZXBsYWNlKFwiMHhcIixcIlwiKS5zbGljZSgwLDgpfWVsc2UgZS5pZHx8KGUuaWQ9bnVsbCk7cmV0dXJuIG51bGwhPT1lLmJsb2NrTnVtYmVyJiYoZS5ibG9ja051bWJlcj1uLmhleFRvTnVtYmVyKGUuYmxvY2tOdW1iZXIpKSxudWxsIT09ZS50cmFuc2FjdGlvbkluZGV4JiYoZS50cmFuc2FjdGlvbkluZGV4PW4uaGV4VG9OdW1iZXIoZS50cmFuc2FjdGlvbkluZGV4KSksbnVsbCE9PWUubG9nSW5kZXgmJihlLmxvZ0luZGV4PW4uaGV4VG9OdW1iZXIoZS5sb2dJbmRleCkpLGUuYWRkcmVzcyYmKGUuYWRkcmVzcz1uLnRvQ2hlY2tzdW1BZGRyZXNzKGUuYWRkcmVzcykpLGV9LHU9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IGkoZSk7aWYodC5pc1ZhbGlkKCkmJnQuaXNEaXJlY3QoKSlyZXR1cm4gdC50b0FkZHJlc3MoKS50b0xvd2VyQ2FzZSgpO2lmKG4uaXNBZGRyZXNzKGUpKXJldHVyblwiMHhcIitlLnRvTG93ZXJDYXNlKCkucmVwbGFjZShcIjB4XCIsXCJcIik7dGhyb3cgbmV3IEVycm9yKGBQcm92aWRlZCBhZGRyZXNzICR7ZX0gaXMgaW52YWxpZCwgdGhlIGNhcGl0YWxpemF0aW9uIGNoZWNrc3VtIHRlc3QgZmFpbGVkLCBvciBpdCdzIGFuIGluZGlyZWN0IElCQU4gYWRkcmVzcyB3aGljaCBjYW4ndCBiZSBjb252ZXJ0ZWQuYCl9O2UuZXhwb3J0cz17aW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHModGhpcyYmbnVsbD09ZT90aGlzLmRlZmF1bHRCbG9jazplKX0saW5wdXRCbG9ja051bWJlckZvcm1hdHRlcjpzLGlucHV0Q2FsbEZvcm1hdHRlcjpmdW5jdGlvbihlKXt2YXIgdD0oZT1hKGUpKS5mcm9tfHwodGhpcz90aGlzLmRlZmF1bHRBY2NvdW50Om51bGwpO3JldHVybiB0JiYoZS5mcm9tPXUodCkpLGV9LGlucHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mKGU9YShlKSkuZnJvbSYmKCFlLmZyb218fFwib2JqZWN0XCIhPXR5cGVvZiBlLmZyb20pKXtpZihlLmZyb209ZS5mcm9tfHwodGhpcz90aGlzLmRlZmF1bHRBY2NvdW50Om51bGwpLCFlLmZyb20mJlwibnVtYmVyXCIhPXR5cGVvZiBlLmZyb20pdGhyb3cgbmV3IEVycm9yKCdUaGUgc2VuZCB0cmFuc2FjdGlvbnMgXCJmcm9tXCIgZmllbGQgbXVzdCBiZSBkZWZpbmVkIScpO2UuZnJvbT11KGUuZnJvbSl9cmV0dXJuIGV9LGlucHV0QWRkcmVzc0Zvcm1hdHRlcjp1LGlucHV0UG9zdEZvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gZS50dGwmJihlLnR0bD1uLm51bWJlclRvSGV4KGUudHRsKSksZS53b3JrVG9Qcm92ZSYmKGUud29ya1RvUHJvdmU9bi5udW1iZXJUb0hleChlLndvcmtUb1Byb3ZlKSksZS5wcmlvcml0eSYmKGUucHJpb3JpdHk9bi5udW1iZXJUb0hleChlLnByaW9yaXR5KSksQXJyYXkuaXNBcnJheShlLnRvcGljcyl8fChlLnRvcGljcz1lLnRvcGljcz9bZS50b3BpY3NdOltdKSxlLnRvcGljcz1lLnRvcGljcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZS5pbmRleE9mKFwiMHhcIik/ZTpuLmZyb21VdGY4KGUpfSkpLGV9LGlucHV0TG9nRm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP251bGw6MD09PShlPVN0cmluZyhlKSkuaW5kZXhPZihcIjB4XCIpP2U6bi5mcm9tVXRmOChlKX07cmV0dXJuIHZvaWQgMD09PWUmJihlPXt9KSx2b2lkIDA9PT1lLmZyb21CbG9jayYmKGU9ey4uLmUsZnJvbUJsb2NrOlwibGF0ZXN0XCJ9KSwoZS5mcm9tQmxvY2t8fDA9PT1lLmZyb21CbG9jaykmJihlLmZyb21CbG9jaz1zKGUuZnJvbUJsb2NrKSksKGUudG9CbG9ja3x8MD09PWUudG9CbG9jaykmJihlLnRvQmxvY2s9cyhlLnRvQmxvY2spKSxlLnRvcGljcz1lLnRvcGljc3x8W10sZS50b3BpY3M9ZS50b3BpY3MubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lLm1hcCh0KTp0KGUpfSkpLHQ9bnVsbCxlLmFkZHJlc3MmJihlLmFkZHJlc3M9QXJyYXkuaXNBcnJheShlLmFkZHJlc3MpP2UuYWRkcmVzcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB1KGUpfSkpOnUoZS5hZGRyZXNzKSksZX0saW5wdXRTaWduRm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBuLmlzSGV4U3RyaWN0KGUpP2U6bi51dGY4VG9IZXgoZSl9LGlucHV0U3RvcmFnZUtleXNGb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubWFwKG4ubnVtYmVyVG9IZXgpfSxvdXRwdXRQcm9vZkZvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gZS5hZGRyZXNzPW4udG9DaGVja3N1bUFkZHJlc3MoZS5hZGRyZXNzKSxlLm5vbmNlPW4uaGV4VG9OdW1iZXJTdHJpbmcoZS5ub25jZSksZS5iYWxhbmNlPW4uaGV4VG9OdW1iZXJTdHJpbmcoZS5iYWxhbmNlKSxlfSxvdXRwdXRCaWdOdW1iZXJGb3JtYXR0ZXI6byxvdXRwdXRUcmFuc2FjdGlvbkZvcm1hdHRlcjpjLG91dHB1dFRyYW5zYWN0aW9uUmVjZWlwdEZvcm1hdHRlcjpmdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJSZWNlaXZlZCByZWNlaXB0IGlzIGludmFsaWQ6IFwiK2UpO3JldHVybiBudWxsIT09ZS5ibG9ja051bWJlciYmKGUuYmxvY2tOdW1iZXI9bi5oZXhUb051bWJlcihlLmJsb2NrTnVtYmVyKSksbnVsbCE9PWUudHJhbnNhY3Rpb25JbmRleCYmKGUudHJhbnNhY3Rpb25JbmRleD1uLmhleFRvTnVtYmVyKGUudHJhbnNhY3Rpb25JbmRleCkpLGUuY3VtdWxhdGl2ZUdhc1VzZWQ9bi5oZXhUb051bWJlcihlLmN1bXVsYXRpdmVHYXNVc2VkKSxlLmdhc1VzZWQ9bi5oZXhUb051bWJlcihlLmdhc1VzZWQpLEFycmF5LmlzQXJyYXkoZS5sb2dzKSYmKGUubG9ncz1lLmxvZ3MubWFwKGYpKSxlLmVmZmVjdGl2ZUdhc1ByaWNlJiYoZS5lZmZlY3RpdmVHYXNQcmljZT1uLmhleFRvTnVtYmVyKGUuZWZmZWN0aXZlR2FzUHJpY2UpKSxlLmNvbnRyYWN0QWRkcmVzcyYmKGUuY29udHJhY3RBZGRyZXNzPW4udG9DaGVja3N1bUFkZHJlc3MoZS5jb250cmFjdEFkZHJlc3MpKSx2b2lkIDAhPT1lLnN0YXR1cyYmbnVsbCE9PWUuc3RhdHVzJiYoZS5zdGF0dXM9Qm9vbGVhbihwYXJzZUludChlLnN0YXR1cykpKSxlfSxvdXRwdXRCbG9ja0Zvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gZS5nYXNMaW1pdD1uLmhleFRvTnVtYmVyKGUuZ2FzTGltaXQpLGUuZ2FzVXNlZD1uLmhleFRvTnVtYmVyKGUuZ2FzVXNlZCksZS5zaXplPW4uaGV4VG9OdW1iZXIoZS5zaXplKSxlLnRpbWVzdGFtcD1uLmhleFRvTnVtYmVyKGUudGltZXN0YW1wKSxudWxsIT09ZS5udW1iZXImJihlLm51bWJlcj1uLmhleFRvTnVtYmVyKGUubnVtYmVyKSksZS5kaWZmaWN1bHR5JiYoZS5kaWZmaWN1bHR5PW8oZS5kaWZmaWN1bHR5KSksZS50b3RhbERpZmZpY3VsdHkmJihlLnRvdGFsRGlmZmljdWx0eT1vKGUudG90YWxEaWZmaWN1bHR5KSksQXJyYXkuaXNBcnJheShlLnRyYW5zYWN0aW9ucykmJmUudHJhbnNhY3Rpb25zLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBjKGUpfSkpLGUubWluZXImJihlLm1pbmVyPW4udG9DaGVja3N1bUFkZHJlc3MoZS5taW5lcikpLGUuYmFzZUZlZVBlckdhcyYmKGUuYmFzZUZlZVBlckdhcz1uLmhleFRvTnVtYmVyKGUuYmFzZUZlZVBlckdhcykpLGV9LG91dHB1dExvZ0Zvcm1hdHRlcjpmLG91dHB1dFBvc3RGb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZXhwaXJ5PW4uaGV4VG9OdW1iZXIoZS5leHBpcnkpLGUuc2VudD1uLmhleFRvTnVtYmVyKGUuc2VudCksZS50dGw9bi5oZXhUb051bWJlcihlLnR0bCksZS53b3JrUHJvdmVkPW4uaGV4VG9OdW1iZXIoZS53b3JrUHJvdmVkKSxlLnRvcGljc3x8KGUudG9waWNzPVtdKSxlLnRvcGljcz1lLnRvcGljcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBuLnRvVXRmOChlKX0pKSxlfSxvdXRwdXRTeW5jaW5nRm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBlLnN0YXJ0aW5nQmxvY2s9bi5oZXhUb051bWJlcihlLnN0YXJ0aW5nQmxvY2spLGUuY3VycmVudEJsb2NrPW4uaGV4VG9OdW1iZXIoZS5jdXJyZW50QmxvY2spLGUuaGlnaGVzdEJsb2NrPW4uaGV4VG9OdW1iZXIoZS5oaWdoZXN0QmxvY2spLGUua25vd25TdGF0ZXMmJihlLmtub3duU3RhdGVzPW4uaGV4VG9OdW1iZXIoZS5rbm93blN0YXRlcyksZS5wdWxsZWRTdGF0ZXM9bi5oZXhUb051bWJlcihlLnB1bGxlZFN0YXRlcykpLGV9fX0sNDM5MDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0OTI4KSxpPXIoNjI2Nyk7ZS5leHBvcnRzPXtlcnJvcnM6bixmb3JtYXR0ZXJzOml9fSwzOTUyOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQzOTApLmVycm9ycyxpPXIoNDM5MCkuZm9ybWF0dGVycyxvPXIoODI2OSkscz1yKDQwMTcpLGE9cig2NjAyKS5zdWJzY3JpcHRpb25zLGM9cig1NTA0KSxmPWZ1bmN0aW9uKGUpe2lmKCFlLmNhbGx8fCFlLm5hbWUpdGhyb3cgbmV3IEVycm9yKCdXaGVuIGNyZWF0aW5nIGEgbWV0aG9kIHlvdSBuZWVkIHRvIHByb3ZpZGUgYXQgbGVhc3QgdGhlIFwibmFtZVwiIGFuZCBcImNhbGxcIiBwcm9wZXJ0eS4nKTt0aGlzLm5hbWU9ZS5uYW1lLHRoaXMuY2FsbD1lLmNhbGwsdGhpcy5wYXJhbXM9ZS5wYXJhbXN8fDAsdGhpcy5pbnB1dEZvcm1hdHRlcj1lLmlucHV0Rm9ybWF0dGVyLHRoaXMub3V0cHV0Rm9ybWF0dGVyPWUub3V0cHV0Rm9ybWF0dGVyLHRoaXMudHJhbnNmb3JtUGF5bG9hZD1lLnRyYW5zZm9ybVBheWxvYWQsdGhpcy5leHRyYUZvcm1hdHRlcnM9ZS5leHRyYUZvcm1hdHRlcnMsdGhpcy5hYmlDb2Rlcj1lLmFiaUNvZGVyLHRoaXMucmVxdWVzdE1hbmFnZXI9ZS5yZXF1ZXN0TWFuYWdlcix0aGlzLmFjY291bnRzPWUuYWNjb3VudHMsdGhpcy5kZWZhdWx0QmxvY2s9ZS5kZWZhdWx0QmxvY2t8fFwibGF0ZXN0XCIsdGhpcy5kZWZhdWx0QWNjb3VudD1lLmRlZmF1bHRBY2NvdW50fHxudWxsLHRoaXMudHJhbnNhY3Rpb25CbG9ja1RpbWVvdXQ9ZS50cmFuc2FjdGlvbkJsb2NrVGltZW91dHx8NTAsdGhpcy50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2Nrcz1lLnRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzfHwyNCx0aGlzLnRyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXQ9ZS50cmFuc2FjdGlvblBvbGxpbmdUaW1lb3V0fHw3NTAsdGhpcy50cmFuc2FjdGlvblBvbGxpbmdJbnRlcnZhbD1lLnRyYW5zYWN0aW9uUG9sbGluZ0ludGVydmFsfHwxZTMsdGhpcy5ibG9ja0hlYWRlclRpbWVvdXQ9ZS5ibG9ja0hlYWRlclRpbWVvdXR8fDEwLHRoaXMuZGVmYXVsdENvbW1vbj1lLmRlZmF1bHRDb21tb24sdGhpcy5kZWZhdWx0Q2hhaW49ZS5kZWZhdWx0Q2hhaW4sdGhpcy5kZWZhdWx0SGFyZGZvcms9ZS5kZWZhdWx0SGFyZGZvcmssdGhpcy5oYW5kbGVSZXZlcnQ9ZS5oYW5kbGVSZXZlcnR9O2YucHJvdG90eXBlLnNldFJlcXVlc3RNYW5hZ2VyPWZ1bmN0aW9uKGUsdCl7dGhpcy5yZXF1ZXN0TWFuYWdlcj1lLHQmJih0aGlzLmFjY291bnRzPXQpfSxmLnByb3RvdHlwZS5jcmVhdGVGdW5jdGlvbj1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMuYnVpbGRDYWxsKCk7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiY2FsbFwiLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dGhpcy5jYWxsfSksdGhpcy5zZXRSZXF1ZXN0TWFuYWdlcihlfHx0aGlzLnJlcXVlc3RNYW5hZ2VyLHR8fHRoaXMuYWNjb3VudHMpLHJ9LGYucHJvdG90eXBlLmF0dGFjaFRvT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuYnVpbGRDYWxsKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJjYWxsXCIse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTp0aGlzLmNhbGx9KTt2YXIgcj10aGlzLm5hbWUuc3BsaXQoXCIuXCIpO3IubGVuZ3RoPjE/KGVbclswXV09ZVtyWzBdXXx8e30sZVtyWzBdXVtyWzFdXT10KTplW3JbMF1dPXR9LGYucHJvdG90eXBlLmdldENhbGw9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jYWxsP3RoaXMuY2FsbChlKTp0aGlzLmNhbGx9LGYucHJvdG90eXBlLmV4dHJhY3RDYWxsYmFjaz1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlW2UubGVuZ3RoLTFdKXJldHVybiBlLnBvcCgpfSxmLnByb3RvdHlwZS52YWxpZGF0ZUFyZ3M9ZnVuY3Rpb24oZSl7aWYoZS5sZW5ndGghPT10aGlzLnBhcmFtcyl0aHJvdyBuLkludmFsaWROdW1iZXJPZlBhcmFtcyhlLmxlbmd0aCx0aGlzLnBhcmFtcyx0aGlzLm5hbWUpfSxmLnByb3RvdHlwZS5mb3JtYXRJbnB1dD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiB0aGlzLmlucHV0Rm9ybWF0dGVyP3RoaXMuaW5wdXRGb3JtYXR0ZXIubWFwKChmdW5jdGlvbihyLG4pe3JldHVybiByP3IuY2FsbCh0LGVbbl0pOmVbbl19KSk6ZX0sZi5wcm90b3R5cGUuZm9ybWF0T3V0cHV0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB0Lm91dHB1dEZvcm1hdHRlciYmZT90Lm91dHB1dEZvcm1hdHRlcihlKTplfSkpOnRoaXMub3V0cHV0Rm9ybWF0dGVyJiZlP3RoaXMub3V0cHV0Rm9ybWF0dGVyKGUpOmV9LGYucHJvdG90eXBlLnRvUGF5bG9hZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldENhbGwoZSkscj10aGlzLmV4dHJhY3RDYWxsYmFjayhlKSxuPXRoaXMuZm9ybWF0SW5wdXQoZSk7dGhpcy52YWxpZGF0ZUFyZ3Mobik7dmFyIGk9e21ldGhvZDp0LHBhcmFtczpuLGNhbGxiYWNrOnJ9O3JldHVybiB0aGlzLnRyYW5zZm9ybVBheWxvYWQmJihpPXRoaXMudHJhbnNmb3JtUGF5bG9hZChpKSksaX0sZi5wcm90b3R5cGUuX2NvbmZpcm1UcmFuc2FjdGlvbj1mdW5jdGlvbihlLHQscil7dmFyIHU9dGhpcyxkPSExLGg9ITAsbD0wLHA9MCxiPW51bGwseT1udWxsLGc9bnVsbCxtPXIucGFyYW1zWzBdJiZcIm9iamVjdFwiPT10eXBlb2Ygci5wYXJhbXNbMF0mJnIucGFyYW1zWzBdLmdhcz9yLnBhcmFtc1swXS5nYXM6bnVsbCx2PSEhci5wYXJhbXNbMF0mJlwib2JqZWN0XCI9PXR5cGVvZiByLnBhcmFtc1swXSYmci5wYXJhbXNbMF0uZGF0YSYmci5wYXJhbXNbMF0uZnJvbSYmIXIucGFyYW1zWzBdLnRvLHc9diYmci5wYXJhbXNbMF0uZGF0YS5sZW5ndGg+MixfPVtuZXcgZih7bmFtZTpcImdldEJsb2NrQnlOdW1iZXJcIixjYWxsOlwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIixwYXJhbXM6MixpbnB1dEZvcm1hdHRlcjpbaS5pbnB1dEJsb2NrTnVtYmVyRm9ybWF0dGVyLGZ1bmN0aW9uKGUpe3JldHVybiEhZX1dLG91dHB1dEZvcm1hdHRlcjppLm91dHB1dEJsb2NrRm9ybWF0dGVyfSksbmV3IGYoe25hbWU6XCJnZXRUcmFuc2FjdGlvblJlY2VpcHRcIixjYWxsOlwiZXRoX2dldFRyYW5zYWN0aW9uUmVjZWlwdFwiLHBhcmFtczoxLGlucHV0Rm9ybWF0dGVyOltudWxsXSxvdXRwdXRGb3JtYXR0ZXI6aS5vdXRwdXRUcmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZXJ9KSxuZXcgZih7bmFtZTpcImdldENvZGVcIixjYWxsOlwiZXRoX2dldENvZGVcIixwYXJhbXM6MixpbnB1dEZvcm1hdHRlcjpbaS5pbnB1dEFkZHJlc3NGb3JtYXR0ZXIsaS5pbnB1dERlZmF1bHRCbG9ja051bWJlckZvcm1hdHRlcl19KSxuZXcgZih7bmFtZTpcImdldFRyYW5zYWN0aW9uQnlIYXNoXCIsY2FsbDpcImV0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaFwiLHBhcmFtczoxLGlucHV0Rm9ybWF0dGVyOltudWxsXSxvdXRwdXRGb3JtYXR0ZXI6aS5vdXRwdXRUcmFuc2FjdGlvbkZvcm1hdHRlcn0pLG5ldyBhKHtuYW1lOlwic3Vic2NyaWJlXCIsdHlwZTpcImV0aFwiLHN1YnNjcmlwdGlvbnM6e25ld0Jsb2NrSGVhZGVyczp7c3Vic2NyaXB0aW9uTmFtZTpcIm5ld0hlYWRzXCIscGFyYW1zOjAsb3V0cHV0Rm9ybWF0dGVyOmkub3V0cHV0QmxvY2tGb3JtYXR0ZXJ9fX0pXSxTPXt9O18uZm9yRWFjaCgoZT0+e2UuYXR0YWNoVG9PYmplY3QoUyksZS5yZXF1ZXN0TWFuYWdlcj11LnJlcXVlc3RNYW5hZ2VyfSkpO3ZhciBFPWZ1bmN0aW9uKGEsZixfLEUsQSl7aWYoIV8pcmV0dXJuIEF8fChBPXt1bnN1YnNjcmliZTpmdW5jdGlvbigpe2NsZWFySW50ZXJ2YWwoYiksY2xlYXJUaW1lb3V0KHkpfX0pLChhP3MucmVzb2x2ZShhKTpTLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe0EudW5zdWJzY3JpYmUoKSxkPSEwLG8uX2ZpcmVFcnJvcih7bWVzc2FnZTpcIkZhaWxlZCB0byBjaGVjayBmb3IgdHJhbnNhY3Rpb24gcmVjZWlwdDpcIixkYXRhOnR9LGUuZXZlbnRFbWl0dGVyLGUucmVqZWN0KX0pKS50aGVuKChhc3luYyBmdW5jdGlvbih0KXtpZighdHx8IXQuYmxvY2tIYXNoKXRocm93IG5ldyBFcnJvcihcIlJlY2VpcHQgbWlzc2luZyBvciBibG9ja0hhc2ggbnVsbFwiKTtpZih1LmV4dHJhRm9ybWF0dGVycyYmdS5leHRyYUZvcm1hdHRlcnMucmVjZWlwdEZvcm1hdHRlciYmKHQ9dS5leHRyYUZvcm1hdHRlcnMucmVjZWlwdEZvcm1hdHRlcih0KSksZS5ldmVudEVtaXR0ZXIubGlzdGVuZXJzKFwiY29uZmlybWF0aW9uXCIpLmxlbmd0aD4wKXt2YXIgcjtpZih2b2lkIDA9PT1hfHwwIT09cCl7dmFyIG49YXdhaXQgUy5nZXRCbG9ja0J5TnVtYmVyKFwibGF0ZXN0XCIpLGk9bj9uLmhhc2g6bnVsbDtmP2c/KHI9YXdhaXQgUy5nZXRCbG9ja0J5TnVtYmVyKGcubnVtYmVyKzEpKSYmKGc9cixlLmV2ZW50RW1pdHRlci5lbWl0KFwiY29uZmlybWF0aW9uXCIscCx0LGkpKToocj1hd2FpdCBTLmdldEJsb2NrQnlOdW1iZXIodC5ibG9ja051bWJlciksZz1yLGUuZXZlbnRFbWl0dGVyLmVtaXQoXCJjb25maXJtYXRpb25cIixwLHQsaSkpOmUuZXZlbnRFbWl0dGVyLmVtaXQoXCJjb25maXJtYXRpb25cIixwLHQsaSl9KGYmJnJ8fCFmKSYmcCsrLGg9ITEscD09PXUudHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3MrMSYmKEEudW5zdWJzY3JpYmUoKSxlLmV2ZW50RW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKSl9cmV0dXJuIHR9KSkudGhlbigoYXN5bmMgZnVuY3Rpb24odCl7aWYodiYmIWQpe2lmKCF0LmNvbnRyYWN0QWRkcmVzcylyZXR1cm4gaCYmKEEudW5zdWJzY3JpYmUoKSxkPSEwKSx2b2lkIG8uX2ZpcmVFcnJvcihuLk5vQ29udHJhY3RBZGRyZXNzRm91bmRFcnJvcih0KSxlLmV2ZW50RW1pdHRlcixlLnJlamVjdCxudWxsLHQpO3ZhciByO3RyeXtyPWF3YWl0IFMuZ2V0Q29kZSh0LmNvbnRyYWN0QWRkcmVzcyl9Y2F0Y2goZSl7fWlmKCFyKXJldHVybjshMD09PXQuc3RhdHVzJiZ3fHxyLmxlbmd0aD4yPyhlLmV2ZW50RW1pdHRlci5lbWl0KFwicmVjZWlwdFwiLHQpLHUuZXh0cmFGb3JtYXR0ZXJzJiZ1LmV4dHJhRm9ybWF0dGVycy5jb250cmFjdERlcGxveUZvcm1hdHRlcj9lLnJlc29sdmUodS5leHRyYUZvcm1hdHRlcnMuY29udHJhY3REZXBsb3lGb3JtYXR0ZXIodCkpOmUucmVzb2x2ZSh0KSxoJiZlLmV2ZW50RW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKSk6by5fZmlyZUVycm9yKG4uQ29udHJhY3RDb2RlTm90U3RvcmVkRXJyb3IodCksZS5ldmVudEVtaXR0ZXIsZS5yZWplY3QsbnVsbCx0KSxoJiZBLnVuc3Vic2NyaWJlKCksZD0hMH1yZXR1cm4gdH0pKS50aGVuKChhc3luYyBmdW5jdGlvbih0KXtpZighdiYmIWQpe2lmKHQub3V0T2ZHYXN8fG0mJm09PT10Lmdhc1VzZWR8fCEwIT09dC5zdGF0dXMmJlwiMHgxXCIhPT10LnN0YXR1cyYmdm9pZCAwIT09dC5zdGF0dXMpaWYoSlNPTi5zdHJpbmdpZnkodCxudWxsLDIpLCExPT09dC5zdGF0dXN8fFwiMHgwXCI9PT10LnN0YXR1cyl0cnl7dmFyIHM7aWYoIXUuaGFuZGxlUmV2ZXJ0fHxcImV0aF9zZW5kVHJhbnNhY3Rpb25cIiE9PXUuY2FsbCYmXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIhPT11LmNhbGwpdGhyb3chMTt2YXIgYT1yLnBhcmFtc1swXTtpZihcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIj09PXUuY2FsbCl7dmFyIGY9ci5wYXJhbXNbMF0sbD1jLnBhcnNlKGYpO2E9aS5pbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyKHtkYXRhOmwuZGF0YSx0bzpsLnRvLGZyb206bC5mcm9tLGdhczpsLmdhc0xpbWl0LnRvSGV4U3RyaW5nKCksZ2FzUHJpY2U6bC5nYXNQcmljZT9sLmdhc1ByaWNlLnRvSGV4U3RyaW5nKCk6dm9pZCAwLHZhbHVlOmwudmFsdWUudG9IZXhTdHJpbmcoKX0pfWlmKCEocz1hd2FpdCB1LmdldFJldmVydFJlYXNvbihhLHQuYmxvY2tOdW1iZXIpKSl0aHJvdyExO28uX2ZpcmVFcnJvcihuLlRyYW5zYWN0aW9uUmV2ZXJ0SW5zdHJ1Y3Rpb25FcnJvcihzLnJlYXNvbixzLnNpZ25hdHVyZSx0KSxlLmV2ZW50RW1pdHRlcixlLnJlamVjdCxudWxsLHQpfWNhdGNoKHIpe28uX2ZpcmVFcnJvcihuLlRyYW5zYWN0aW9uUmV2ZXJ0ZWRXaXRob3V0UmVhc29uRXJyb3IodCksZS5ldmVudEVtaXR0ZXIsZS5yZWplY3QsbnVsbCx0KX1lbHNlIG8uX2ZpcmVFcnJvcihuLlRyYW5zYWN0aW9uT3V0T2ZHYXNFcnJvcih0KSxlLmV2ZW50RW1pdHRlcixlLnJlamVjdCxudWxsLHQpO2Vsc2UgZS5ldmVudEVtaXR0ZXIuZW1pdChcInJlY2VpcHRcIix0KSxlLnJlc29sdmUodCksaCYmZS5ldmVudEVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7aCYmQS51bnN1YnNjcmliZSgpLGQ9ITB9fSkpLmNhdGNoKChmdW5jdGlvbigpe2wrKyxmP2wtMT49dS50cmFuc2FjdGlvblBvbGxpbmdUaW1lb3V0JiYoQS51bnN1YnNjcmliZSgpLGQ9ITAsby5fZmlyZUVycm9yKG4uVHJhbnNhY3Rpb25FcnJvcihcIlRyYW5zYWN0aW9uIHdhcyBub3QgbWluZWQgd2l0aGluIFwiK3UudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dCtcIiBzZWNvbmRzLCBwbGVhc2UgbWFrZSBzdXJlIHlvdXIgdHJhbnNhY3Rpb24gd2FzIHByb3Blcmx5IHNlbnQuIEJlIGF3YXJlIHRoYXQgaXQgbWlnaHQgc3RpbGwgYmUgbWluZWQhXCIpLGUuZXZlbnRFbWl0dGVyLGUucmVqZWN0KSk6bC0xPj11LnRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0JiYoQS51bnN1YnNjcmliZSgpLGQ9ITAsby5fZmlyZUVycm9yKG4uVHJhbnNhY3Rpb25FcnJvcihcIlRyYW5zYWN0aW9uIHdhcyBub3QgbWluZWQgd2l0aGluIFwiK3UudHJhbnNhY3Rpb25CbG9ja1RpbWVvdXQrXCIgYmxvY2tzLCBwbGVhc2UgbWFrZSBzdXJlIHlvdXIgdHJhbnNhY3Rpb24gd2FzIHByb3Blcmx5IHNlbnQuIEJlIGF3YXJlIHRoYXQgaXQgbWlnaHQgc3RpbGwgYmUgbWluZWQhXCIpLGUuZXZlbnRFbWl0dGVyLGUucmVqZWN0KSl9KSk7QS51bnN1YnNjcmliZSgpLGQ9ITAsby5fZmlyZUVycm9yKHttZXNzYWdlOlwiRmFpbGVkIHRvIHN1YnNjcmliZSB0byBuZXcgbmV3QmxvY2tIZWFkZXJzIHRvIGNvbmZpcm0gdGhlIHRyYW5zYWN0aW9uIHJlY2VpcHRzLlwiLGRhdGE6X30sZS5ldmVudEVtaXR0ZXIsZS5yZWplY3QpfSxBPWZ1bmN0aW9uKGUpe2xldCB0PSExO2NvbnN0IHI9KCk9PntiPXNldEludGVydmFsKEUuYmluZChudWxsLGUsITApLHUudHJhbnNhY3Rpb25Qb2xsaW5nSW50ZXJ2YWwpfTtpZighdGhpcy5yZXF1ZXN0TWFuYWdlci5wcm92aWRlci5vbilyZXR1cm4gcigpO1Muc3Vic2NyaWJlKFwibmV3QmxvY2tIZWFkZXJzXCIsKGZ1bmN0aW9uKG4saSxvKXtpZih0PSEwLG58fCFpKXJldHVybiByKCk7RShlLCExLG4sMCxvKX0pKSx5PXNldFRpbWVvdXQoKCgpPT57dHx8cigpfSksMWUzKnRoaXMuYmxvY2tIZWFkZXJUaW1lb3V0KX0uYmluZCh0aGlzKTtTLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0KS50aGVuKChmdW5jdGlvbih0KXt0JiZ0LmJsb2NrSGFzaD8oZS5ldmVudEVtaXR0ZXIubGlzdGVuZXJzKFwiY29uZmlybWF0aW9uXCIpLmxlbmd0aD4wJiZBKHQpLEUodCwhMSkpOmR8fEEoKX0pKS5jYXRjaCgoZnVuY3Rpb24oKXtkfHxBKCl9KSl9O3ZhciB1PWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGU/dC53YWxsZXRbZV06ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUuYWRkcmVzcyYmZS5wcml2YXRlS2V5P2U6dC53YWxsZXRbZS50b0xvd2VyQ2FzZSgpXX07ZnVuY3Rpb24gZChlLHQpe3JldHVybiBuZXcgUHJvbWlzZSgoKHIsbik9Pnt0cnl7dmFyIGk9bmV3IGYoe25hbWU6XCJnZXRCbG9ja0J5TnVtYmVyXCIsY2FsbDpcImV0aF9nZXRCbG9ja0J5TnVtYmVyXCIscGFyYW1zOjIsaW5wdXRGb3JtYXR0ZXI6W2Z1bmN0aW9uKGUpe3JldHVybiBlP28udG9IZXgoZSk6XCJsYXRlc3RcIn0sZnVuY3Rpb24oKXtyZXR1cm4hMX1dfSkuY3JlYXRlRnVuY3Rpb24oZS5yZXF1ZXN0TWFuYWdlcikscz1uZXcgZih7bmFtZTpcImdldEdhc1ByaWNlXCIsY2FsbDpcImV0aF9nYXNQcmljZVwiLHBhcmFtczowfSkuY3JlYXRlRnVuY3Rpb24oZS5yZXF1ZXN0TWFuYWdlcik7UHJvbWlzZS5hbGwoW2koKSxzKCldKS50aGVuKChlPT57Y29uc3RbbixpXT1lO2lmKChcIjB4MlwiPT09dC50eXBlfHx2b2lkIDA9PT10LnR5cGUpJiZuJiZuLmJhc2VGZWVQZXJHYXMpe2xldCBlLGk7dC5nYXNQcmljZT8oZT10Lmdhc1ByaWNlLGk9dC5nYXNQcmljZSxkZWxldGUgdC5nYXNQcmljZSk6KGU9dC5tYXhQcmlvcml0eUZlZVBlckdhc3x8XCIweDk1MDJGOTAwXCIsaT10Lm1heEZlZVBlckdhc3x8by50b0hleChvLnRvQk4obi5iYXNlRmVlUGVyR2FzKS5tdWwoby50b0JOKDIpKS5hZGQoby50b0JOKGUpKSkpLHIoe21heEZlZVBlckdhczppLG1heFByaW9yaXR5RmVlUGVyR2FzOmV9KX1lbHNle2lmKHQubWF4UHJpb3JpdHlGZWVQZXJHYXN8fHQubWF4RmVlUGVyR2FzKXRocm93IEVycm9yKFwiTmV0d29yayBkb2Vzbid0IHN1cHBvcnQgZWlwLTE1NTlcIik7cih7Z2FzUHJpY2U6aX0pfX0pKX1jYXRjaChlKXtuKGUpfX0pKX1mLnByb3RvdHlwZS5idWlsZENhbGw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9XCJldGhfc2VuZFRyYW5zYWN0aW9uXCI9PT1lLmNhbGx8fFwiZXRoX3NlbmRSYXdUcmFuc2FjdGlvblwiPT09ZS5jYWxsLHI9XCJldGhfY2FsbFwiPT09ZS5jYWxsLGk9ZnVuY3Rpb24oKXt2YXIgaT1zKCF0KSxhPWUudG9QYXlsb2FkKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpLGM9ZnVuY3Rpb24ocyxjKXt2YXIgZjtpZihlLmhhbmRsZVJldmVydCYmciYmZS5hYmlDb2RlciYmKCFzJiZlLmlzUmV2ZXJ0UmVhc29uU3RyaW5nKGMpP2Y9Yy5zdWJzdHJpbmcoMTApOnMmJnMuZGF0YSYmKGY9cy5kYXRhLnN1YnN0cmluZygxMCkpLGYpKXt2YXIgdT1lLmFiaUNvZGVyLmRlY29kZVBhcmFtZXRlcihcInN0cmluZ1wiLFwiMHhcIitmKSxkPVwiRXJyb3IoU3RyaW5nKVwiO28uX2ZpcmVFcnJvcihuLlJldmVydEluc3RydWN0aW9uRXJyb3IodSxkKSxpLmV2ZW50RW1pdHRlcixpLnJlamVjdCxhLmNhbGxiYWNrLHtyZWFzb246dSxzaWduYXR1cmU6ZH0pfWVsc2V7dHJ5e2M9ZS5mb3JtYXRPdXRwdXQoYyl9Y2F0Y2goZSl7cz1lfWlmKGMgaW5zdGFuY2VvZiBFcnJvciYmKHM9YykscylyZXR1cm4gcy5lcnJvciYmKHM9cy5lcnJvciksby5fZmlyZUVycm9yKHMsaS5ldmVudEVtaXR0ZXIsaS5yZWplY3QsYS5jYWxsYmFjayk7YS5jYWxsYmFjayYmYS5jYWxsYmFjayhudWxsLGMpLHQ/KGkuZXZlbnRFbWl0dGVyLmVtaXQoXCJ0cmFuc2FjdGlvbkhhc2hcIixjKSxlLl9jb25maXJtVHJhbnNhY3Rpb24oaSxjLGEpKTpzfHxpLnJlc29sdmUoYyl9fSxmPWZ1bmN0aW9uKHQpe3ZhciByPXsuLi5hLG1ldGhvZDpcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIixwYXJhbXM6W3QucmF3VHJhbnNhY3Rpb25dfTtlLnJlcXVlc3RNYW5hZ2VyLnNlbmQocixjKX0saD1mdW5jdGlvbihlLHQpe3ZhciByO2lmKHQmJnQuYWNjb3VudHMmJnQuYWNjb3VudHMud2FsbGV0JiZ0LmFjY291bnRzLndhbGxldC5sZW5ndGgpaWYoXCJldGhfc2VuZFRyYW5zYWN0aW9uXCI9PT1lLm1ldGhvZCl7dmFyIG49ZS5wYXJhbXNbMF07aWYoKHI9dShuJiZcIm9iamVjdFwiPT10eXBlb2Ygbj9uLmZyb206bnVsbCx0LmFjY291bnRzKSkmJnIucHJpdmF0ZUtleSlyZXR1cm4gZGVsZXRlKG49SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShuKSkpLmZyb20sdC5kZWZhdWx0Q2hhaW4mJiFuLmNoYWluJiYobi5jaGFpbj10LmRlZmF1bHRDaGFpbiksdC5kZWZhdWx0SGFyZGZvcmsmJiFuLmhhcmRmb3JrJiYobi5oYXJkZm9yaz10LmRlZmF1bHRIYXJkZm9yayksdC5kZWZhdWx0Q29tbW9uJiYhbi5jb21tb24mJihuLmNvbW1vbj10LmRlZmF1bHRDb21tb24pLHZvaWQgdC5hY2NvdW50cy5zaWduVHJhbnNhY3Rpb24obixyLnByaXZhdGVLZXkpLnRoZW4oZikuY2F0Y2goKGZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGkuZXZlbnRFbWl0dGVyLmxpc3RlbmVycyYmaS5ldmVudEVtaXR0ZXIubGlzdGVuZXJzKFwiZXJyb3JcIikubGVuZ3RoKXt0cnl7aS5ldmVudEVtaXR0ZXIuZW1pdChcImVycm9yXCIsZSl9Y2F0Y2goZSl7fWkuZXZlbnRFbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycygpLGkuZXZlbnRFbWl0dGVyLmNhdGNoKChmdW5jdGlvbigpe30pKX1pLnJlamVjdChlKX0pKX1lbHNlIGlmKFwiZXRoX3NpZ25cIj09PWUubWV0aG9kKXt2YXIgbz1lLnBhcmFtc1sxXTtpZigocj11KGUucGFyYW1zWzBdLHQuYWNjb3VudHMpKSYmci5wcml2YXRlS2V5KXt2YXIgcz10LmFjY291bnRzLnNpZ24obyxyLnByaXZhdGVLZXkpO3JldHVybiBlLmNhbGxiYWNrJiZlLmNhbGxiYWNrKG51bGwscy5zaWduYXR1cmUpLHZvaWQgaS5yZXNvbHZlKHMuc2lnbmF0dXJlKX19cmV0dXJuIHQucmVxdWVzdE1hbmFnZXIuc2VuZChlLGMpfTtyZXR1cm4gdCYmYS5wYXJhbXNbMF0mJlwib2JqZWN0XCI9PXR5cGVvZiBhLnBhcmFtc1swXSYmdm9pZCAwPT09YS5wYXJhbXNbMF0uZ2FzUHJpY2UmJih2b2lkIDA9PT1hLnBhcmFtc1swXS5tYXhQcmlvcml0eUZlZVBlckdhc3x8dm9pZCAwPT09YS5wYXJhbXNbMF0ubWF4RmVlUGVyR2FzKT9kKGUsYS5wYXJhbXNbMF0pLnRoZW4oKHI9Pnt2b2lkIDAhPT1yLmdhc1ByaWNlP2EucGFyYW1zWzBdLmdhc1ByaWNlPXIuZ2FzUHJpY2U6dm9pZCAwIT09ci5tYXhQcmlvcml0eUZlZVBlckdhcyYmdm9pZCAwIT09ci5tYXhGZWVQZXJHYXMmJihhLnBhcmFtc1swXS5tYXhQcmlvcml0eUZlZVBlckdhcz1yLm1heFByaW9yaXR5RmVlUGVyR2FzLGEucGFyYW1zWzBdLm1heEZlZVBlckdhcz1yLm1heEZlZVBlckdhcyksdCYmc2V0VGltZW91dCgoKCk9PntpLmV2ZW50RW1pdHRlci5lbWl0KFwic2VuZGluZ1wiLGEpfSksMCksaChhLGUpfSkpOih0JiZzZXRUaW1lb3V0KCgoKT0+e2kuZXZlbnRFbWl0dGVyLmVtaXQoXCJzZW5kaW5nXCIsYSl9KSwwKSxoKGEsZSkpLHQmJnNldFRpbWVvdXQoKCgpPT57aS5ldmVudEVtaXR0ZXIuZW1pdChcInNlbnRcIixhKX0pLDApLGkuZXZlbnRFbWl0dGVyfTtyZXR1cm4gaS5tZXRob2Q9ZSxpLnJlcXVlc3Q9dGhpcy5yZXF1ZXN0LmJpbmQodGhpcyksaX0sZi5wcm90b3R5cGUuZ2V0UmV2ZXJ0UmVhc29uPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4saSl7bmV3IGYoe25hbWU6XCJjYWxsXCIsY2FsbDpcImV0aF9jYWxsXCIscGFyYW1zOjIsYWJpQ29kZXI6ci5hYmlDb2RlcixoYW5kbGVSZXZlcnQ6ITB9KS5jcmVhdGVGdW5jdGlvbihyLnJlcXVlc3RNYW5hZ2VyKShlLG8ubnVtYmVyVG9IZXgodCkpLnRoZW4oKGZ1bmN0aW9uKCl7bighMSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe2UucmVhc29uP24oe3JlYXNvbjplLnJlYXNvbixzaWduYXR1cmU6ZS5zaWduYXR1cmV9KTppKGUpfSkpfSkpfSxmLnByb3RvdHlwZS5pc1JldmVydFJlYXNvblN0cmluZz1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKGUubGVuZ3RoLTIpLzIlMzI9PTQmJlwiMHgwOGMzNzlhMFwiPT09ZS5zdWJzdHJpbmcoMCwxMCl9LGYucHJvdG90eXBlLnJlcXVlc3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnRvUGF5bG9hZChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtyZXR1cm4gZS5mb3JtYXQ9dGhpcy5mb3JtYXRPdXRwdXQuYmluZCh0aGlzKSxlfSxlLmV4cG9ydHM9Zn0sNDAxNzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig2NzI5KSxpPWZ1bmN0aW9uKGUpe3ZhciB0LHIsaT1uZXcgUHJvbWlzZSgoZnVuY3Rpb24oKXt0PWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXX0pKTtpZihlKXJldHVybntyZXNvbHZlOnQscmVqZWN0OnIsZXZlbnRFbWl0dGVyOml9O3ZhciBvPW5ldyBuO3JldHVybiBpLl9ldmVudHM9by5fZXZlbnRzLGkuZW1pdD1vLmVtaXQsaS5vbj1vLm9uLGkub25jZT1vLm9uY2UsaS5vZmY9by5vZmYsaS5saXN0ZW5lcnM9by5saXN0ZW5lcnMsaS5hZGRMaXN0ZW5lcj1vLmFkZExpc3RlbmVyLGkucmVtb3ZlTGlzdGVuZXI9by5yZW1vdmVMaXN0ZW5lcixpLnJlbW92ZUFsbExpc3RlbmVycz1vLnJlbW92ZUFsbExpc3RlbmVycyx7cmVzb2x2ZTp0LHJlamVjdDpyLGV2ZW50RW1pdHRlcjppfX07aS5yZXNvbHZlPWZ1bmN0aW9uKGUpe3ZhciB0PWkoITApO3JldHVybiB0LnJlc29sdmUoZSksdC5ldmVudEVtaXR0ZXJ9LGUuZXhwb3J0cz1pfSw4OTkxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDg5MTEpLGk9cig0MzkwKS5lcnJvcnMsbz1mdW5jdGlvbihlKXt0aGlzLnJlcXVlc3RNYW5hZ2VyPWUsdGhpcy5yZXF1ZXN0cz1bXX07by5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3RoaXMucmVxdWVzdHMucHVzaChlKX0sby5wcm90b3R5cGUuZXhlY3V0ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMucmVxdWVzdHMsdD10aGlzLl9zb3J0UmVzcG9uc2VzLmJpbmQodGhpcyk7dGhpcy5yZXF1ZXN0TWFuYWdlci5zZW5kQmF0Y2goZSwoZnVuY3Rpb24ocixvKXtvPXQobyksZS5tYXAoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG9bdF18fHt9fSkpLmZvckVhY2goKGZ1bmN0aW9uKHQscil7aWYoZVtyXS5jYWxsYmFjayl7aWYodCYmdC5lcnJvcilyZXR1cm4gZVtyXS5jYWxsYmFjayhpLkVycm9yUmVzcG9uc2UodCkpO2lmKCFuLmlzVmFsaWRSZXNwb25zZSh0KSlyZXR1cm4gZVtyXS5jYWxsYmFjayhpLkludmFsaWRSZXNwb25zZSh0KSk7dHJ5e2Vbcl0uY2FsbGJhY2sobnVsbCxlW3JdLmZvcm1hdD9lW3JdLmZvcm1hdCh0LnJlc3VsdCk6dC5yZXN1bHQpfWNhdGNoKHQpe2Vbcl0uY2FsbGJhY2sodCl9fX0pKX0pKX0sby5wcm90b3R5cGUuX3NvcnRSZXNwb25zZXM9ZnVuY3Rpb24oZSl7cmV0dXJuKGV8fFtdKS5zb3J0KCgoZSx0KT0+ZS5pZC10LmlkKSl9LGUuZXhwb3J0cz1vfSwyMzE5OmU9PntcInVzZSBzdHJpY3RcIjt2YXIgdD1udWxsLHI9XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp2b2lkIDA7aWYoIXIpdHJ5e3I9RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpfWNhdGNoKGUpe3I9c2VsZn12b2lkIDAhPT1yLmV0aGVyZXVtP3Q9ci5ldGhlcmV1bTp2b2lkIDAhPT1yLndlYjMmJnIud2ViMy5jdXJyZW50UHJvdmlkZXImJihyLndlYjMuY3VycmVudFByb3ZpZGVyLnNlbmRBc3luYyYmKHIud2ViMy5jdXJyZW50UHJvdmlkZXIuc2VuZD1yLndlYjMuY3VycmVudFByb3ZpZGVyLnNlbmRBc3luYyxkZWxldGUgci53ZWIzLmN1cnJlbnRQcm92aWRlci5zZW5kQXN5bmMpLCFyLndlYjMuY3VycmVudFByb3ZpZGVyLm9uJiZyLndlYjMuY3VycmVudFByb3ZpZGVyLmNvbm5lY3Rpb24mJlwiaXBjUHJvdmlkZXJXcmFwcGVyXCI9PT1yLndlYjMuY3VycmVudFByb3ZpZGVyLmNvbm5lY3Rpb24uY29uc3RydWN0b3IubmFtZSYmKHIud2ViMy5jdXJyZW50UHJvdmlkZXIub249ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihcIlRoZSBzZWNvbmQgcGFyYW1ldGVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi5cIik7XCJkYXRhXCI9PT1lP3RoaXMuY29ubmVjdGlvbi5vbihcImRhdGFcIiwoZnVuY3Rpb24oZSl7dmFyIHI9XCJcIjtlPWUudG9TdHJpbmcoKTt0cnl7cj1KU09OLnBhcnNlKGUpfWNhdGNoKHIpe3JldHVybiB0KG5ldyBFcnJvcihcIkNvdWxkbid0IHBhcnNlIHJlc3BvbnNlIGRhdGFcIitlKSl9ci5pZHx8LTE9PT1yLm1ldGhvZC5pbmRleE9mKFwiX3N1YnNjcmlwdGlvblwiKXx8dChudWxsLHIpfSkpOnRoaXMuY29ubmVjdGlvbi5vbihlLHQpfSksdD1yLndlYjMuY3VycmVudFByb3ZpZGVyKSxlLmV4cG9ydHM9dH0sNDk4MzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7Y29uc3R7Y2FsbGJhY2tpZnk6bn09cig5NTM5KTt2YXIgaT1yKDQzOTApLmVycm9ycyxvPXIoODkxMSkscz1yKDg5OTEpLGE9cigyMzE5KSxjPWZ1bmN0aW9uIGUodCxyKXt0aGlzLnByb3ZpZGVyPW51bGwsdGhpcy5wcm92aWRlcnM9ZS5wcm92aWRlcnMsdGhpcy5zZXRQcm92aWRlcih0LHIpLHRoaXMuc3Vic2NyaXB0aW9ucz1uZXcgTWFwfTtjLmdpdmVuUHJvdmlkZXI9YSxjLnByb3ZpZGVycz17V2Vic29ja2V0UHJvdmlkZXI6cigxMjI3KSxIdHRwUHJvdmlkZXI6cig0MzUxKSxJcGNQcm92aWRlcjpyKDEyMjcpfSxjLnByb3RvdHlwZS5zZXRQcm92aWRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7aWYoZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUmJnRoaXMucHJvdmlkZXJzKWlmKC9eaHR0cChzKT86XFwvXFwvL2kudGVzdChlKSllPW5ldyB0aGlzLnByb3ZpZGVycy5IdHRwUHJvdmlkZXIoZSk7ZWxzZSBpZigvXndzKHMpPzpcXC9cXC8vaS50ZXN0KGUpKWU9bmV3IHRoaXMucHJvdmlkZXJzLldlYnNvY2tldFByb3ZpZGVyKGUpO2Vsc2UgaWYoZSYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29ubmVjdCllPW5ldyB0aGlzLnByb3ZpZGVycy5JcGNQcm92aWRlcihlLHQpO2Vsc2UgaWYoZSl0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBhdXRvZGV0ZWN0IHByb3ZpZGVyIGZvciBcXFwiXCIrZSsnXCInKTtpZih0aGlzLnByb3ZpZGVyJiZ0aGlzLnByb3ZpZGVyLmNvbm5lY3RlZCYmdGhpcy5jbGVhclN1YnNjcmlwdGlvbnMoKSx0aGlzLnByb3ZpZGVyPWV8fG51bGwsdGhpcy5wcm92aWRlciYmdGhpcy5wcm92aWRlci5vbil7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZXF1ZXN0P3RoaXMucHJvdmlkZXIub24oXCJtZXNzYWdlXCIsKGZ1bmN0aW9uKGUpe2lmKGUmJlwiZXRoX3N1YnNjcmlwdGlvblwiPT09ZS50eXBlJiZlLmRhdGEpe2NvbnN0IHQ9ZS5kYXRhO3Quc3Vic2NyaXB0aW9uJiZyLnN1YnNjcmlwdGlvbnMuaGFzKHQuc3Vic2NyaXB0aW9uKSYmci5zdWJzY3JpcHRpb25zLmdldCh0LnN1YnNjcmlwdGlvbikuY2FsbGJhY2sobnVsbCx0LnJlc3VsdCl9fSkpOnRoaXMucHJvdmlkZXIub24oXCJkYXRhXCIsKGZ1bmN0aW9uKGUsdCl7KGU9ZXx8dCkubWV0aG9kJiZlLnBhcmFtcyYmZS5wYXJhbXMuc3Vic2NyaXB0aW9uJiZyLnN1YnNjcmlwdGlvbnMuaGFzKGUucGFyYW1zLnN1YnNjcmlwdGlvbikmJnIuc3Vic2NyaXB0aW9ucy5nZXQoZS5wYXJhbXMuc3Vic2NyaXB0aW9uKS5jYWxsYmFjayhudWxsLGUucGFyYW1zLnJlc3VsdCl9KSksdGhpcy5wcm92aWRlci5vbihcImNvbm5lY3RcIiwoZnVuY3Rpb24oKXtyLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5zdWJzY3JpcHRpb24ucmVzdWJzY3JpYmUoKX0pKX0pKSx0aGlzLnByb3ZpZGVyLm9uKFwiZXJyb3JcIiwoZnVuY3Rpb24oZSl7ci5zdWJzY3JpcHRpb25zLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QuY2FsbGJhY2soZSl9KSl9KSk7Y29uc3QgdD1mdW5jdGlvbihlKXtyLl9pc0NsZWFuQ2xvc2VFdmVudChlKSYmIXIuX2lzSXBjQ2xvc2VFcnJvcihlKXx8KHIuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChmdW5jdGlvbih0KXt0LmNhbGxiYWNrKGkuQ29ubmVjdGlvbkNsb3NlRXJyb3IoZSkpLHIuc3Vic2NyaXB0aW9ucy5kZWxldGUodC5zdWJzY3JpcHRpb24uaWQpfSkpLHIucHJvdmlkZXImJnIucHJvdmlkZXIuZW1pdCYmci5wcm92aWRlci5lbWl0KFwiZXJyb3JcIixpLkNvbm5lY3Rpb25DbG9zZUVycm9yKGUpKSksci5wcm92aWRlciYmci5wcm92aWRlci5lbWl0JiZyLnByb3ZpZGVyLmVtaXQoXCJlbmRcIixlKX07dGhpcy5wcm92aWRlci5vbihcImRpc2Nvbm5lY3RcIix0KX19LGMucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fGZ1bmN0aW9uKCl7fSwhdGhpcy5wcm92aWRlcilyZXR1cm4gdChpLkludmFsaWRQcm92aWRlcigpKTtjb25zdHttZXRob2Q6cixwYXJhbXM6c309ZSxhPW8udG9QYXlsb2FkKHIscyksYz10aGlzLl9qc29ucnBjUmVzdWx0Q2FsbGJhY2sodCxhKTtpZih0aGlzLnByb3ZpZGVyLnJlcXVlc3Qpbih0aGlzLnByb3ZpZGVyLnJlcXVlc3QuYmluZCh0aGlzLnByb3ZpZGVyKSkoe21ldGhvZDpyLHBhcmFtczpzfSx0KTtlbHNlIGlmKHRoaXMucHJvdmlkZXIuc2VuZEFzeW5jKXRoaXMucHJvdmlkZXIuc2VuZEFzeW5jKGEsYyk7ZWxzZXtpZighdGhpcy5wcm92aWRlci5zZW5kKXRocm93IG5ldyBFcnJvcihcIlByb3ZpZGVyIGRvZXMgbm90IGhhdmUgYSByZXF1ZXN0IG9yIHNlbmQgbWV0aG9kIHRvIHVzZS5cIik7dGhpcy5wcm92aWRlci5zZW5kKGEsYyl9fSxjLnByb3RvdHlwZS5zZW5kQmF0Y2g9ZnVuY3Rpb24oZSx0KXtpZighdGhpcy5wcm92aWRlcilyZXR1cm4gdChpLkludmFsaWRQcm92aWRlcigpKTt2YXIgcj1vLnRvQmF0Y2hQYXlsb2FkKGUpO3RoaXMucHJvdmlkZXJbdGhpcy5wcm92aWRlci5zZW5kQXN5bmM/XCJzZW5kQXN5bmNcIjpcInNlbmRcIl0ociwoZnVuY3Rpb24oZSxyKXtyZXR1cm4gZT90KGUpOkFycmF5LmlzQXJyYXkocik/dm9pZCB0KG51bGwscik6dChpLkludmFsaWRSZXNwb25zZShyKSl9KSl9LGMucHJvdG90eXBlLmFkZFN1YnNjcmlwdGlvbj1mdW5jdGlvbihlLHQpe2lmKCF0aGlzLnByb3ZpZGVyLm9uKXRocm93IG5ldyBFcnJvcihcIlRoZSBwcm92aWRlciBkb2Vzbid0IHN1cHBvcnQgc3Vic2NyaXB0aW9uczogXCIrdGhpcy5wcm92aWRlci5jb25zdHJ1Y3Rvci5uYW1lKTt0aGlzLnN1YnNjcmlwdGlvbnMuc2V0KGUuaWQse2NhbGxiYWNrOnQsc3Vic2NyaXB0aW9uOmV9KX0sYy5wcm90b3R5cGUucmVtb3ZlU3Vic2NyaXB0aW9uPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5zdWJzY3JpcHRpb25zLmhhcyhlKSl7dmFyIHI9dGhpcy5zdWJzY3JpcHRpb25zLmdldChlKS5zdWJzY3JpcHRpb24ub3B0aW9ucy50eXBlO3JldHVybiB0aGlzLnN1YnNjcmlwdGlvbnMuZGVsZXRlKGUpLHZvaWQgdGhpcy5zZW5kKHttZXRob2Q6citcIl91bnN1YnNjcmliZVwiLHBhcmFtczpbZV19LHQpfVwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQobnVsbCl9LGMucHJvdG90eXBlLmNsZWFyU3Vic2NyaXB0aW9ucz1mdW5jdGlvbihlKXt0cnl7dmFyIHQ9dGhpcztyZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLnNpemU+MCYmdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goKGZ1bmN0aW9uKHIsbil7ZSYmXCJzeW5jaW5nXCI9PT1yLm5hbWV8fHQucmVtb3ZlU3Vic2NyaXB0aW9uKG4pfSkpLHRoaXMucHJvdmlkZXIucmVzZXQmJnRoaXMucHJvdmlkZXIucmVzZXQoKSwhMH1jYXRjaChlKXt0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHdoaWxlIGNsZWFyaW5nIHN1YnNjcmlwdGlvbnM6ICR7ZX1gKX19LGMucHJvdG90eXBlLl9pc0NsZWFuQ2xvc2VFdmVudD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmKFsxZTNdLmluY2x1ZGVzKGUuY29kZSl8fCEwPT09ZS53YXNDbGVhbil9LGMucHJvdG90eXBlLl9pc0lwY0Nsb3NlRXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBlJiZlfSxjLnByb3RvdHlwZS5fanNvbnJwY1Jlc3VsdENhbGxiYWNrPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKHIsbil7cmV0dXJuIG4mJm4uaWQmJnQuaWQhPT1uLmlkP2UobmV3IEVycm9yKGBXcm9uZyByZXNwb25zZSBpZCAke24uaWR9IChleHBlY3RlZDogJHt0LmlkfSkgaW4gJHtKU09OLnN0cmluZ2lmeSh0KX1gKSk6cj9lKHIpOm4mJm4uZXJyb3I/ZShpLkVycm9yUmVzcG9uc2UobikpOm8uaXNWYWxpZFJlc3BvbnNlKG4pP3ZvaWQgZShudWxsLG4ucmVzdWx0KTplKGkuSW52YWxpZFJlc3BvbnNlKG4pKX19LGUuZXhwb3J0cz17TWFuYWdlcjpjLEJhdGNoTWFuYWdlcjpzfX0sODkxMTplPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9e21lc3NhZ2VJZDowLHRvUGF5bG9hZDpmdW5jdGlvbihlLHIpe2lmKCFlKXRocm93IG5ldyBFcnJvcignSlNPTlJQQyBtZXRob2Qgc2hvdWxkIGJlIHNwZWNpZmllZCBmb3IgcGFyYW1zOiBcIicrSlNPTi5zdHJpbmdpZnkocikrJ1wiIScpO3JldHVybiB0Lm1lc3NhZ2VJZCsrLHtqc29ucnBjOlwiMi4wXCIsaWQ6dC5tZXNzYWdlSWQsbWV0aG9kOmUscGFyYW1zOnJ8fFtdfX0saXNWYWxpZFJlc3BvbnNlOmZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2UuZXZlcnkodCk6dChlKTtmdW5jdGlvbiB0KGUpe3JldHVybiEoIWV8fGUuZXJyb3J8fFwiMi4wXCIhPT1lLmpzb25ycGN8fFwibnVtYmVyXCIhPXR5cGVvZiBlLmlkJiZcInN0cmluZ1wiIT10eXBlb2YgZS5pZHx8dm9pZCAwPT09ZS5yZXN1bHQpfX0sdG9CYXRjaFBheWxvYWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gdC50b1BheWxvYWQoZS5tZXRob2QsZS5wYXJhbXMpfSkpfX07ZS5leHBvcnRzPXR9LDY2MDI6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNTgyNiksaT1mdW5jdGlvbihlKXt0aGlzLm5hbWU9ZS5uYW1lLHRoaXMudHlwZT1lLnR5cGUsdGhpcy5zdWJzY3JpcHRpb25zPWUuc3Vic2NyaXB0aW9uc3x8e30sdGhpcy5yZXF1ZXN0TWFuYWdlcj1udWxsfTtpLnByb3RvdHlwZS5zZXRSZXF1ZXN0TWFuYWdlcj1mdW5jdGlvbihlKXt0aGlzLnJlcXVlc3RNYW5hZ2VyPWV9LGkucHJvdG90eXBlLmF0dGFjaFRvT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuYnVpbGRDYWxsKCkscj10aGlzLm5hbWUuc3BsaXQoXCIuXCIpO3IubGVuZ3RoPjE/KGVbclswXV09ZVtyWzBdXXx8e30sZVtyWzBdXVtyWzFdXT10KTplW3JbMF1dPXR9LGkucHJvdG90eXBlLmJ1aWxkQ2FsbD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5zdWJzY3JpcHRpb25zW2FyZ3VtZW50c1swXV18fGNvbnNvbGUud2FybihcIlN1YnNjcmlwdGlvbiBcIitKU09OLnN0cmluZ2lmeShhcmd1bWVudHNbMF0pK1wiIGRvZXNuJ3QgZXhpc3QuIFN1YnNjcmliaW5nIGFueXdheS5cIik7dmFyIHQ9bmV3IG4oe3N1YnNjcmlwdGlvbjplLnN1YnNjcmlwdGlvbnNbYXJndW1lbnRzWzBdXXx8e30scmVxdWVzdE1hbmFnZXI6ZS5yZXF1ZXN0TWFuYWdlcix0eXBlOmUudHlwZX0pO3JldHVybiB0LnN1YnNjcmliZS5hcHBseSh0LGFyZ3VtZW50cyl9fSxlLmV4cG9ydHM9e3N1YnNjcmlwdGlvbnM6aSxzdWJzY3JpcHRpb246bn19LDU4MjY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDM5MCkuZXJyb3JzLGk9cig2NzI5KSxvPXIoNDM5MCkuZm9ybWF0dGVycztmdW5jdGlvbiBzKGUpe3JldHVybiBlfWZ1bmN0aW9uIGEoZSl7aS5jYWxsKHRoaXMpLHRoaXMuaWQ9bnVsbCx0aGlzLmNhbGxiYWNrPXMsdGhpcy5hcmd1bWVudHM9bnVsbCx0aGlzLmxhc3RCbG9jaz1udWxsLHRoaXMub3B0aW9ucz17c3Vic2NyaXB0aW9uOmUuc3Vic2NyaXB0aW9uLHR5cGU6ZS50eXBlLHJlcXVlc3RNYW5hZ2VyOmUucmVxdWVzdE1hbmFnZXJ9fWEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoaS5wcm90b3R5cGUpLGEucHJvdG90eXBlLmNvbnN0cnVjdG9yPWEsYS5wcm90b3R5cGUuX2V4dHJhY3RDYWxsYmFjaz1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlW2UubGVuZ3RoLTFdKXJldHVybiBlLnBvcCgpfSxhLnByb3RvdHlwZS5fdmFsaWRhdGVBcmdzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMub3B0aW9ucy5zdWJzY3JpcHRpb247aWYodHx8KHQ9e30pLHQucGFyYW1zfHwodC5wYXJhbXM9MCksZS5sZW5ndGghPT10LnBhcmFtcyl0aHJvdyBuLkludmFsaWROdW1iZXJPZlBhcmFtcyhlLmxlbmd0aCx0LnBhcmFtcyx0LnN1YnNjcmlwdGlvbk5hbWUpfSxhLnByb3RvdHlwZS5fZm9ybWF0SW5wdXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5vcHRpb25zLnN1YnNjcmlwdGlvbjtyZXR1cm4gdCYmdC5pbnB1dEZvcm1hdHRlcj90LmlucHV0Rm9ybWF0dGVyLm1hcCgoZnVuY3Rpb24odCxyKXtyZXR1cm4gdD90KGVbcl0pOmVbcl19KSk6ZX0sYS5wcm90b3R5cGUuX2Zvcm1hdE91dHB1dD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm9wdGlvbnMuc3Vic2NyaXB0aW9uO3JldHVybiB0JiZ0Lm91dHB1dEZvcm1hdHRlciYmZT90Lm91dHB1dEZvcm1hdHRlcihlKTplfSxhLnByb3RvdHlwZS5fdG9QYXlsb2FkPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2lmKHRoaXMuY2FsbGJhY2s9dGhpcy5fZXh0cmFjdENhbGxiYWNrKGUpfHxzLHRoaXMuc3Vic2NyaXB0aW9uTWV0aG9kfHwodGhpcy5zdWJzY3JpcHRpb25NZXRob2Q9ZS5zaGlmdCgpLHRoaXMub3B0aW9ucy5zdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9uTmFtZSYmKHRoaXMuc3Vic2NyaXB0aW9uTWV0aG9kPXRoaXMub3B0aW9ucy5zdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9uTmFtZSkpLHRoaXMuYXJndW1lbnRzfHwodGhpcy5hcmd1bWVudHM9dGhpcy5fZm9ybWF0SW5wdXQoZSksdGhpcy5fdmFsaWRhdGVBcmdzKHRoaXMuYXJndW1lbnRzKSxlPVtdKSx0LnB1c2godGhpcy5zdWJzY3JpcHRpb25NZXRob2QpLHQ9dC5jb25jYXQodGhpcy5hcmd1bWVudHMpLGUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk9ubHkgYSBjYWxsYmFjayBpcyBhbGxvd2VkIGFzIHBhcmFtZXRlciBvbiBhbiBhbHJlYWR5IGluc3RhbnRpYXRlZCBzdWJzY3JpcHRpb24uXCIpO3JldHVybnttZXRob2Q6dGhpcy5vcHRpb25zLnR5cGUrXCJfc3Vic2NyaWJlXCIscGFyYW1zOnR9fSxhLnByb3RvdHlwZS51bnN1YnNjcmliZT1mdW5jdGlvbihlKXt0aGlzLm9wdGlvbnMucmVxdWVzdE1hbmFnZXIucmVtb3ZlU3Vic2NyaXB0aW9uKHRoaXMuaWQsZSksdGhpcy5pZD1udWxsLHRoaXMubGFzdEJsb2NrPW51bGwsdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKX0sYS5wcm90b3R5cGUuc3Vic2NyaWJlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykscj10aGlzLl90b1BheWxvYWQodCk7aWYoIXIpcmV0dXJuIHRoaXM7aWYoIXRoaXMub3B0aW9ucy5yZXF1ZXN0TWFuYWdlci5wcm92aWRlcilyZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oKXt2YXIgdD1uZXcgRXJyb3IoXCJObyBwcm92aWRlciBzZXQuXCIpO2UuY2FsbGJhY2sodCxudWxsLGUpLGUuZW1pdChcImVycm9yXCIsdCl9KSwwKSx0aGlzO2lmKCF0aGlzLm9wdGlvbnMucmVxdWVzdE1hbmFnZXIucHJvdmlkZXIub24pcmV0dXJuIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dmFyIHQ9bmV3IEVycm9yKFwiVGhlIGN1cnJlbnQgcHJvdmlkZXIgZG9lc24ndCBzdXBwb3J0IHN1YnNjcmlwdGlvbnM6IFwiK2Uub3B0aW9ucy5yZXF1ZXN0TWFuYWdlci5wcm92aWRlci5jb25zdHJ1Y3Rvci5uYW1lKTtlLmNhbGxiYWNrKHQsbnVsbCxlKSxlLmVtaXQoXCJlcnJvclwiLHQpfSksMCksdGhpcztpZih0aGlzLmxhc3RCbG9jayYmdGhpcy5vcHRpb25zLnBhcmFtcyYmXCJvYmplY3RcIj09dHlwZW9mIHRoaXMub3B0aW9ucy5wYXJhbXMmJihyLnBhcmFtc1sxXT10aGlzLm9wdGlvbnMucGFyYW1zLHIucGFyYW1zWzFdLmZyb21CbG9jaz1vLmlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIodGhpcy5sYXN0QmxvY2srMSkpLHRoaXMuaWQmJnRoaXMudW5zdWJzY3JpYmUoKSx0aGlzLm9wdGlvbnMucGFyYW1zPXIucGFyYW1zWzFdLFwibG9nc1wiPT09ci5wYXJhbXNbMF0mJnIucGFyYW1zWzFdJiZcIm9iamVjdFwiPT10eXBlb2Ygci5wYXJhbXNbMV0mJnIucGFyYW1zWzFdLmhhc093blByb3BlcnR5KFwiZnJvbUJsb2NrXCIpJiZpc0Zpbml0ZShyLnBhcmFtc1sxXS5mcm9tQmxvY2spKXt2YXIgbj1PYmplY3QuYXNzaWduKHt9LHIucGFyYW1zWzFdKTt0aGlzLm9wdGlvbnMucmVxdWVzdE1hbmFnZXIuc2VuZCh7bWV0aG9kOlwiZXRoX2dldExvZ3NcIixwYXJhbXM6W25dfSwoZnVuY3Rpb24odCxyKXt0P3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5jYWxsYmFjayh0LG51bGwsZSksZS5lbWl0KFwiZXJyb3JcIix0KX0pLDApOnIuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIHI9ZS5fZm9ybWF0T3V0cHV0KHQpO2UuY2FsbGJhY2sobnVsbCxyLGUpLGUuZW1pdChcImRhdGFcIixyKX0pKX0pKX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2Ygci5wYXJhbXNbMV0mJmRlbGV0ZSByLnBhcmFtc1sxXS5mcm9tQmxvY2ssdGhpcy5vcHRpb25zLnJlcXVlc3RNYW5hZ2VyLnNlbmQociwoZnVuY3Rpb24odCxuKXshdCYmbj8oZS5pZD1uLGUubWV0aG9kPXIucGFyYW1zWzBdLGUub3B0aW9ucy5yZXF1ZXN0TWFuYWdlci5hZGRTdWJzY3JpcHRpb24oZSwoZnVuY3Rpb24odCxyKXt0PyhlLmNhbGxiYWNrKHQsITEsZSksZS5lbWl0KFwiZXJyb3JcIix0KSk6KEFycmF5LmlzQXJyYXkocil8fChyPVtyXSksci5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgcj1lLl9mb3JtYXRPdXRwdXQodCk7aWYoZS5sYXN0QmxvY2s9ciYmXCJvYmplY3RcIj09dHlwZW9mIHI/ci5ibG9ja051bWJlcjpudWxsLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUub3B0aW9ucy5zdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9uSGFuZGxlcilyZXR1cm4gZS5vcHRpb25zLnN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25IYW5kbGVyLmNhbGwoZSxyKTtlLmVtaXQoXCJkYXRhXCIsciksZS5jYWxsYmFjayhudWxsLHIsZSl9KSkpfSkpLGUuZW1pdChcImNvbm5lY3RlZFwiLG4pKTpzZXRUaW1lb3V0KChmdW5jdGlvbigpe2UuY2FsbGJhY2sodCwhMSxlKSxlLmVtaXQoXCJlcnJvclwiLHQpfSksMCl9KSksdGhpc30sYS5wcm90b3R5cGUucmVzdWJzY3JpYmU9ZnVuY3Rpb24oKXt0aGlzLm9wdGlvbnMucmVxdWVzdE1hbmFnZXIucmVtb3ZlU3Vic2NyaXB0aW9uKHRoaXMuaWQpLHRoaXMuaWQ9bnVsbCx0aGlzLnN1YnNjcmliZSh0aGlzLmNhbGxiYWNrKX0sZS5leHBvcnRzPWF9LDYwMTY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDM5MCkuZm9ybWF0dGVycyxpPXIoMzk1Miksbz1yKDgyNjkpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbih0KXt2YXIgcjtyZXR1cm4gdC5wcm9wZXJ0eT8oZVt0LnByb3BlcnR5XXx8KGVbdC5wcm9wZXJ0eV09e30pLHI9ZVt0LnByb3BlcnR5XSk6cj1lLHQubWV0aG9kcyYmdC5tZXRob2RzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBpfHwodD1uZXcgaSh0KSksdC5hdHRhY2hUb09iamVjdChyKSx0LnNldFJlcXVlc3RNYW5hZ2VyKGUuX3JlcXVlc3RNYW5hZ2VyKX0pKSxlfTtyZXR1cm4gdC5mb3JtYXR0ZXJzPW4sdC51dGlscz1vLHQuTWV0aG9kPWksdH19LDI5Mjg6KGUsdCxyKT0+e2NvbnN0IG49cig0OTgzKSxpPXIoNjAxNik7ZS5leHBvcnRzPXtwYWNrYWdlSW5pdDooZSx0KT0+e2lmKHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCksIWUpdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBpbnN0YW50aWF0ZSB1c2luZyB0aGUgXCJuZXdcIiBrZXl3b3JkLicpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiY3VycmVudFByb3ZpZGVyXCIse2dldDooKT0+ZS5fcHJvdmlkZXIsc2V0OnQ9PmUuc2V0UHJvdmlkZXIodCksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0WzBdJiZ0WzBdLl9yZXF1ZXN0TWFuYWdlcj9lLl9yZXF1ZXN0TWFuYWdlcj10WzBdLl9yZXF1ZXN0TWFuYWdlcjplLl9yZXF1ZXN0TWFuYWdlcj1uZXcgbi5NYW5hZ2VyKHRbMF0sdFsxXSksZS5naXZlblByb3ZpZGVyPW4uTWFuYWdlci5naXZlblByb3ZpZGVyLGUucHJvdmlkZXJzPW4uTWFuYWdlci5wcm92aWRlcnMsZS5fcHJvdmlkZXI9ZS5fcmVxdWVzdE1hbmFnZXIucHJvdmlkZXIsZS5zZXRQcm92aWRlcnx8KGUuc2V0UHJvdmlkZXI9KHQscik9PihlLl9yZXF1ZXN0TWFuYWdlci5zZXRQcm92aWRlcih0LHIpLGUuX3Byb3ZpZGVyPWUuX3JlcXVlc3RNYW5hZ2VyLnByb3ZpZGVyLCEwKSksZS5zZXRSZXF1ZXN0TWFuYWdlcj10PT57ZS5fcmVxdWVzdE1hbmFnZXI9dCxlLl9wcm92aWRlcj10LnByb3ZpZGVyfSxlLkJhdGNoUmVxdWVzdD1uLkJhdGNoTWFuYWdlci5iaW5kKG51bGwsZS5fcmVxdWVzdE1hbmFnZXIpLGUuZXh0ZW5kPWkoZSl9LGFkZFByb3ZpZGVyczplPT57ZS5naXZlblByb3ZpZGVyPW4uTWFuYWdlci5naXZlblByb3ZpZGVyLGUucHJvdmlkZXJzPW4uTWFuYWdlci5wcm92aWRlcnN9fX0sMzMzODooZSx0LHIpPT57dmFyIG49cig4NzY0KS5CdWZmZXIsaT1yKDgyNjkpLG89cig4MzQ5KS5SUSxzPXIoODM0OSkuX1IsYT1uZXcgbygoZnVuY3Rpb24oZSx0KXtyZXR1cm4hZS5tYXRjaCgvXnU/aW50Lyl8fEFycmF5LmlzQXJyYXkodCl8fHQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZcIkJOXCI9PT10LmNvbnN0cnVjdG9yLm5hbWU/dDp0LnRvU3RyaW5nKCl9KSk7ZnVuY3Rpb24gYygpe312YXIgZj1mdW5jdGlvbigpe307Zi5wcm90b3R5cGUuZW5jb2RlRnVuY3Rpb25TaWduYXR1cmU9ZnVuY3Rpb24oZSl7cmV0dXJuKFwiZnVuY3Rpb25cIj09dHlwZW9mIGV8fFwib2JqZWN0XCI9PXR5cGVvZiBlJiZlKSYmKGU9aS5fanNvbkludGVyZmFjZU1ldGhvZFRvU3RyaW5nKGUpKSxpLnNoYTMoZSkuc2xpY2UoMCwxMCl9LGYucHJvdG90eXBlLmVuY29kZUV2ZW50U2lnbmF0dXJlPWZ1bmN0aW9uKGUpe3JldHVybihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlfHxcIm9iamVjdFwiPT10eXBlb2YgZSYmZSkmJihlPWkuX2pzb25JbnRlcmZhY2VNZXRob2RUb1N0cmluZyhlKSksaS5zaGEzKGUpfSxmLnByb3RvdHlwZS5lbmNvZGVQYXJhbWV0ZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGVQYXJhbWV0ZXJzKFtlXSxbdF0pfSxmLnByb3RvdHlwZS5lbmNvZGVQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm4gZT1yLm1hcFR5cGVzKGUpLHQ9dC5tYXAoKGZ1bmN0aW9uKHQsbil7bGV0IGk9ZVtuXTtpZihcIm9iamVjdFwiPT10eXBlb2YgaSYmaS50eXBlJiYoaT1pLnR5cGUpLHQ9ci5mb3JtYXRQYXJhbShpLHQpLFwic3RyaW5nXCI9PXR5cGVvZiBpJiZpLmluY2x1ZGVzKFwidHVwbGVcIikpe2NvbnN0IGU9YS5fZ2V0Q29kZXIocy5mcm9tKGkpKSxuPShlLHQpPT57aWYoXCJhcnJheVwiPT09ZS5uYW1lKXtpZighZS50eXBlLm1hdGNoKC9cXFsoXFxkKylcXF0vKSlyZXR1cm4gdC5tYXAoKHQ9Pm4oYS5fZ2V0Q29kZXIocy5mcm9tKGUudHlwZS5yZXBsYWNlKFwiW11cIixcIlwiKSkpLHQpKSk7Y29uc3Qgcj1wYXJzZUludChlLnR5cGUubWF0Y2goL1xcWyhcXGQrKVxcXS8pWzFdKTtpZih0Lmxlbmd0aCE9PXIpdGhyb3cgbmV3IEVycm9yKFwiQXJyYXkgbGVuZ3RoIGRvZXMgbm90IG1hdGNoZXMgd2l0aCB0aGUgZ2l2ZW4gaW5wdXRcIik7cmV0dXJuIHQubWFwKCh0PT5uKGEuX2dldENvZGVyKHMuZnJvbShlLnR5cGUucmVwbGFjZSgvXFxbXFxkK1xcXS8sXCJcIikpKSx0KSkpfWUuY29kZXJzLmZvckVhY2goKChlLGkpPT57XCJ0dXBsZVwiPT09ZS5uYW1lP24oZSx0W2ldKTp0W2ldPXIuZm9ybWF0UGFyYW0oZS5uYW1lLHRbaV0pfSkpfTtuKGUsdCl9cmV0dXJuIHR9KSksYS5lbmNvZGUoZSx0KX0sZi5wcm90b3R5cGUubWFwVHlwZXM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPVtdO3JldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImZ1bmN0aW9uXCI9PT1lLnR5cGUmJihlPU9iamVjdC5hc3NpZ24oe30sZSx7dHlwZTpcImJ5dGVzMjRcIn0pKSx0LmlzU2ltcGxpZmllZFN0cnVjdEZvcm1hdChlKSl7dmFyIG49T2JqZWN0LmtleXMoZSlbMF07ci5wdXNoKE9iamVjdC5hc3NpZ24odC5tYXBTdHJ1Y3ROYW1lQW5kVHlwZShuKSx7Y29tcG9uZW50czp0Lm1hcFN0cnVjdFRvQ29kZXJGb3JtYXQoZVtuXSl9KSl9ZWxzZSByLnB1c2goZSl9KSkscn0sZi5wcm90b3R5cGUuaXNTaW1wbGlmaWVkU3RydWN0Rm9ybWF0PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZ2b2lkIDA9PT1lLmNvbXBvbmVudHMmJnZvaWQgMD09PWUubmFtZX0sZi5wcm90b3R5cGUubWFwU3RydWN0TmFtZUFuZFR5cGU9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJ0dXBsZVwiO3JldHVybiBlLmluZGV4T2YoXCJbXVwiKT4tMSYmKHQ9XCJ0dXBsZVtdXCIsZT1lLnNsaWNlKDAsLTIpKSx7dHlwZTp0LG5hbWU6ZX19LGYucHJvdG90eXBlLm1hcFN0cnVjdFRvQ29kZXJGb3JtYXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPVtdO3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihuKXtcIm9iamVjdFwiIT10eXBlb2YgZVtuXT9yLnB1c2goe25hbWU6bix0eXBlOmVbbl19KTpyLnB1c2goT2JqZWN0LmFzc2lnbih0Lm1hcFN0cnVjdE5hbWVBbmRUeXBlKG4pLHtjb21wb25lbnRzOnQubWFwU3RydWN0VG9Db2RlckZvcm1hdChlW25dKX0pKX0pKSxyfSxmLnByb3RvdHlwZS5mb3JtYXRQYXJhbT1mdW5jdGlvbihlLHQpe2NvbnN0IHI9bmV3IFJlZ0V4cCgvXmJ5dGVzKFswLTldKikkLyksbz1uZXcgUmVnRXhwKC9eYnl0ZXMoWzAtOV0qKVxcW1xcXSQvKSxzPW5ldyBSZWdFeHAoL14odT9pbnQpKFswLTldKikkLyksYT1uZXcgUmVnRXhwKC9eKHU/aW50KShbMC05XSopXFxbXFxdJC8pO2lmKGkuaXNCTih0KXx8aS5pc0JpZ051bWJlcih0KSlyZXR1cm4gdC50b1N0cmluZygxMCk7aWYoZS5tYXRjaChvKXx8ZS5tYXRjaChhKSlyZXR1cm4gdC5tYXAoKHQ9PnRoaXMuZm9ybWF0UGFyYW0oZS5yZXBsYWNlKFwiW11cIixcIlwiKSx0KSkpO2xldCBjPWUubWF0Y2gocyk7aWYoYyl7bGV0IGU9cGFyc2VJbnQoY1syXXx8XCIyNTZcIik7ZS84PHQubGVuZ3RoJiYodD1pLmxlZnRQYWQodCxlKSl9aWYoYz1lLm1hdGNoKHIpLGMpe24uaXNCdWZmZXIodCkmJih0PWkudG9IZXgodCkpO2xldCBlPXBhcnNlSW50KGNbMV0pO2lmKGUpe2xldCByPTIqZTtcIjB4XCI9PT10LnN1YnN0cmluZygwLDIpJiYocis9MiksdC5sZW5ndGg8ciYmKHQ9aS5yaWdodFBhZCh0LDIqZSkpfXQubGVuZ3RoJTI9PTEmJih0PVwiMHgwXCIrdC5zdWJzdHJpbmcoMikpfXJldHVybiB0fSxmLnByb3RvdHlwZS5lbmNvZGVGdW5jdGlvbkNhbGw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGVGdW5jdGlvblNpZ25hdHVyZShlKSt0aGlzLmVuY29kZVBhcmFtZXRlcnMoZS5pbnB1dHMsdCkucmVwbGFjZShcIjB4XCIsXCJcIil9LGYucHJvdG90eXBlLmRlY29kZVBhcmFtZXRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmRlY29kZVBhcmFtZXRlcnMoW2VdLHQpWzBdfSxmLnByb3RvdHlwZS5kZWNvZGVQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZGVjb2RlUGFyYW1ldGVyc1dpdGgoZSx0LCExKX0sZi5wcm90b3R5cGUuZGVjb2RlUGFyYW1ldGVyc1dpdGg9ZnVuY3Rpb24oZSx0LHIpe2lmKGUubGVuZ3RoPjAmJighdHx8XCIweFwiPT09dHx8XCIwWFwiPT09dCkpdGhyb3cgbmV3IEVycm9yKFwiUmV0dXJuZWQgdmFsdWVzIGFyZW4ndCB2YWxpZCwgZGlkIGl0IHJ1biBPdXQgb2YgR2FzPyBZb3UgbWlnaHQgYWxzbyBzZWUgdGhpcyBlcnJvciBpZiB5b3UgYXJlIG5vdCB1c2luZyB0aGUgY29ycmVjdCBBQkkgZm9yIHRoZSBjb250cmFjdCB5b3UgYXJlIHJldHJpZXZpbmcgZGF0YSBmcm9tLCByZXF1ZXN0aW5nIGRhdGEgZnJvbSBhIGJsb2NrIG51bWJlciB0aGF0IGRvZXMgbm90IGV4aXN0LCBvciBxdWVyeWluZyBhIG5vZGUgd2hpY2ggaXMgbm90IGZ1bGx5IHN5bmNlZC5cIik7dmFyIG49YS5kZWNvZGUodGhpcy5tYXBUeXBlcyhlKSxcIjB4XCIrdC5yZXBsYWNlKC8weC9pLFwiXCIpLHIpLGk9bmV3IGM7cmV0dXJuIGkuX19sZW5ndGhfXz0wLGUuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXt2YXIgcj1uW2kuX19sZW5ndGhfX107Y29uc3Qgbz1cIm9iamVjdFwiPT10eXBlb2YgZSYmZS50eXBlJiZcInN0cmluZ1wiPT09ZS50eXBlO3I9XCIweFwiIT09cnx8b3x8XCJzdHJpbmdcIj09dHlwZW9mIGUmJlwic3RyaW5nXCI9PT1lP3I6bnVsbCxpW3RdPXIsKFwiZnVuY3Rpb25cIj09dHlwZW9mIGV8fGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKSYmZS5uYW1lJiYoaVtlLm5hbWVdPXIpLGkuX19sZW5ndGhfXysrfSkpLGl9LGYucHJvdG90eXBlLmRlY29kZUxvZz1mdW5jdGlvbihlLHQscil7dmFyIG49dGhpcztyPUFycmF5LmlzQXJyYXkocik/cjpbcl0sdD10fHxcIlwiO3ZhciBpPVtdLG89W10scz0wO2UuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtlLmluZGV4ZWQ/KG9bdF09W1wiYm9vbFwiLFwiaW50XCIsXCJ1aW50XCIsXCJhZGRyZXNzXCIsXCJmaXhlZFwiLFwidWZpeGVkXCJdLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybi0xIT09ZS50eXBlLmluZGV4T2YodCl9KSk/bi5kZWNvZGVQYXJhbWV0ZXIoZS50eXBlLHJbc10pOnJbc10scysrKTppW3RdPWV9KSk7dmFyIGE9dCxmPWE/dGhpcy5kZWNvZGVQYXJhbWV0ZXJzV2l0aChpLGEsITApOltdLHU9bmV3IGM7cmV0dXJuIHUuX19sZW5ndGhfXz0wLGUuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXt1W3RdPVwic3RyaW5nXCI9PT1lLnR5cGU/XCJcIjpudWxsLHZvaWQgMCE9PWZbdF0mJih1W3RdPWZbdF0pLHZvaWQgMCE9PW9bdF0mJih1W3RdPW9bdF0pLGUubmFtZSYmKHVbZS5uYW1lXT11W3RdKSx1Ll9fbGVuZ3RoX18rK30pKSx1fTt2YXIgdT1uZXcgZjtlLmV4cG9ydHM9dX0sMTY5MjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyOTI4KSxpPXIoMzk1Miksbz1yKDgyNjkpLHM9cig2NjAyKS5zdWJzY3JpcHRpb24sYT1yKDQzOTApLmZvcm1hdHRlcnMsYz1yKDQzOTApLmVycm9ycyxmPXIoNDAxNyksdT1yKDMzMzgpLGQ9ZnVuY3Rpb24gZSh0LHIsaSl7dmFyIHM9dGhpcyxmPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7aWYoISh0aGlzIGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIGtleXdvcmQgdG8gaW5zdGFudGlhdGUgYSB3ZWIzLmV0aC5Db250cmFjdCgpIG9iamVjdCEnKTtpZih0aGlzLnNldFByb3ZpZGVyPWZ1bmN0aW9uKCl7bi5wYWNrYWdlSW5pdChzLGFyZ3VtZW50cykscy5jbGVhclN1YnNjcmlwdGlvbnM9cy5fcmVxdWVzdE1hbmFnZXIuY2xlYXJTdWJzY3JpcHRpb25zfSxuLnBhY2thZ2VJbml0KHRoaXMsW3RoaXMuY29uc3RydWN0b3JdKSx0aGlzLmNsZWFyU3Vic2NyaXB0aW9ucz10aGlzLl9yZXF1ZXN0TWFuYWdlci5jbGVhclN1YnNjcmlwdGlvbnMsIXR8fCFBcnJheS5pc0FycmF5KHQpKXRocm93IGMuQ29udHJhY3RNaXNzaW5nQUJJRXJyb3IoKTt0aGlzLm9wdGlvbnM9e307dmFyIGQ9ZltmLmxlbmd0aC0xXTtkJiZcIm9iamVjdFwiPT10eXBlb2YgZCYmIUFycmF5LmlzQXJyYXkoZCkmJihpPWQsdGhpcy5vcHRpb25zPXsuLi50aGlzLm9wdGlvbnMsLi4udGhpcy5fZ2V0T3JTZXREZWZhdWx0T3B0aW9ucyhpKX0sciYmXCJvYmplY3RcIj09dHlwZW9mIHImJihyPW51bGwpKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5vcHRpb25zLFwiYWRkcmVzc1wiLHtzZXQ6ZnVuY3Rpb24oZSl7ZSYmKHMuX2FkZHJlc3M9by50b0NoZWNrc3VtQWRkcmVzcyhhLmlucHV0QWRkcmVzc0Zvcm1hdHRlcihlKSkpfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5fYWRkcmVzc30sZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLm9wdGlvbnMsXCJqc29uSW50ZXJmYWNlXCIse3NldDpmdW5jdGlvbihlKXtyZXR1cm4gcy5tZXRob2RzPXt9LHMuZXZlbnRzPXt9LHMuX2pzb25JbnRlcmZhY2U9ZS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0LHI7aWYoZS5jb25zdGFudD1cInZpZXdcIj09PWUuc3RhdGVNdXRhYmlsaXR5fHxcInB1cmVcIj09PWUuc3RhdGVNdXRhYmlsaXR5fHxlLmNvbnN0YW50LGUucGF5YWJsZT1cInBheWFibGVcIj09PWUuc3RhdGVNdXRhYmlsaXR5fHxlLnBheWFibGUsZS5uYW1lJiYocj1vLl9qc29uSW50ZXJmYWNlTWV0aG9kVG9TdHJpbmcoZSkpLFwiZnVuY3Rpb25cIj09PWUudHlwZSl7aWYoZS5zaWduYXR1cmU9dS5lbmNvZGVGdW5jdGlvblNpZ25hdHVyZShyKSx0PXMuX2NyZWF0ZVR4T2JqZWN0LmJpbmQoe21ldGhvZDplLHBhcmVudDpzfSkscy5tZXRob2RzW2UubmFtZV0pe3ZhciBuPXMuX2NyZWF0ZVR4T2JqZWN0LmJpbmQoe21ldGhvZDplLHBhcmVudDpzLG5leHRNZXRob2Q6cy5tZXRob2RzW2UubmFtZV19KTtzLm1ldGhvZHNbZS5uYW1lXT1ufWVsc2Ugcy5tZXRob2RzW2UubmFtZV09dDtzLm1ldGhvZHNbZS5zaWduYXR1cmVdPXQscy5tZXRob2RzW3JdPXR9ZWxzZSBpZihcImV2ZW50XCI9PT1lLnR5cGUpe2Uuc2lnbmF0dXJlPXUuZW5jb2RlRXZlbnRTaWduYXR1cmUocik7dmFyIGk9cy5fb24uYmluZChzLGUuc2lnbmF0dXJlKTtzLmV2ZW50c1tlLm5hbWVdJiZcImJvdW5kIFwiIT09cy5ldmVudHNbZS5uYW1lXS5uYW1lfHwocy5ldmVudHNbZS5uYW1lXT1pKSxzLmV2ZW50c1tlLnNpZ25hdHVyZV09aSxzLmV2ZW50c1tyXT1pfXJldHVybiBlfSkpLHMuZXZlbnRzLmFsbEV2ZW50cz1zLl9vbi5iaW5kKHMsXCJhbGxldmVudHNcIikscy5fanNvbkludGVyZmFjZX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHMuX2pzb25JbnRlcmZhY2V9LGVudW1lcmFibGU6ITB9KTt2YXIgaD10aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRBY2NvdW50LGw9dGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0QmxvY2t8fFwibGF0ZXN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJoYW5kbGVSZXZlcnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuITE9PT1zLm9wdGlvbnMuaGFuZGxlUmV2ZXJ0fHwhMD09PXMub3B0aW9ucy5oYW5kbGVSZXZlcnQ/cy5vcHRpb25zLmhhbmRsZVJldmVydDp0aGlzLmNvbnN0cnVjdG9yLmhhbmRsZVJldmVydH0sc2V0OmZ1bmN0aW9uKGUpe3Mub3B0aW9ucy5oYW5kbGVSZXZlcnQ9ZX0sZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZGVmYXVsdENvbW1vblwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5vcHRpb25zLmNvbW1vbnx8dGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0Q29tbW9ufSxzZXQ6ZnVuY3Rpb24oZSl7cy5vcHRpb25zLmNvbW1vbj1lfSxlbnVtZXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0SGFyZGZvcmtcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHMub3B0aW9ucy5oYXJkZm9ya3x8dGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0SGFyZGZvcmt9LHNldDpmdW5jdGlvbihlKXtzLm9wdGlvbnMuaGFyZGZvcms9ZX0sZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZGVmYXVsdENoYWluXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBzLm9wdGlvbnMuY2hhaW58fHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdENoYWlufSxzZXQ6ZnVuY3Rpb24oZSl7cy5vcHRpb25zLmNoYWluPWV9LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInRyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT1zLm9wdGlvbnMudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dD9zLm9wdGlvbnMudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dDpzLm9wdGlvbnMudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dHx8dGhpcy5jb25zdHJ1Y3Rvci50cmFuc2FjdGlvblBvbGxpbmdUaW1lb3V0fSxzZXQ6ZnVuY3Rpb24oZSl7cy5vcHRpb25zLnRyYW5zYWN0aW9uUG9sbGluZ1RpbWVvdXQ9ZX0sZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidHJhbnNhY3Rpb25Qb2xsaW5nSW50ZXJ2YWxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT1zLm9wdGlvbnMudHJhbnNhY3Rpb25Qb2xsaW5nSW50ZXJ2YWw/cy5vcHRpb25zLnRyYW5zYWN0aW9uUG9sbGluZ0ludGVydmFsOnMub3B0aW9ucy50cmFuc2FjdGlvblBvbGxpbmdJbnRlcnZhbHx8dGhpcy5jb25zdHJ1Y3Rvci50cmFuc2FjdGlvblBvbGxpbmdJbnRlcnZhbH0sc2V0OmZ1bmN0aW9uKGUpe3Mub3B0aW9ucy50cmFuc2FjdGlvblBvbGxpbmdJbnRlcnZhbD1lfSxlbnVtZXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ0cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2Nrc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXMub3B0aW9ucy50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2Nrcz9zLm9wdGlvbnMudHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3M6cy5vcHRpb25zLnRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzfHx0aGlzLmNvbnN0cnVjdG9yLnRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzfSxzZXQ6ZnVuY3Rpb24oZSl7cy5vcHRpb25zLnRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzPWV9LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiAwPT09cy5vcHRpb25zLnRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0P3Mub3B0aW9ucy50cmFuc2FjdGlvbkJsb2NrVGltZW91dDpzLm9wdGlvbnMudHJhbnNhY3Rpb25CbG9ja1RpbWVvdXR8fHRoaXMuY29uc3RydWN0b3IudHJhbnNhY3Rpb25CbG9ja1RpbWVvdXR9LHNldDpmdW5jdGlvbihlKXtzLm9wdGlvbnMudHJhbnNhY3Rpb25CbG9ja1RpbWVvdXQ9ZX0sZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiYmxvY2tIZWFkZXJUaW1lb3V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiAwPT09cy5vcHRpb25zLmJsb2NrSGVhZGVyVGltZW91dD9zLm9wdGlvbnMuYmxvY2tIZWFkZXJUaW1lb3V0OnMub3B0aW9ucy5ibG9ja0hlYWRlclRpbWVvdXR8fHRoaXMuY29uc3RydWN0b3IuYmxvY2tIZWFkZXJUaW1lb3V0fSxzZXQ6ZnVuY3Rpb24oZSl7cy5vcHRpb25zLmJsb2NrSGVhZGVyVGltZW91dD1lfSxlbnVtZXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0QWNjb3VudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYoaD1vLnRvQ2hlY2tzdW1BZGRyZXNzKGEuaW5wdXRBZGRyZXNzRm9ybWF0dGVyKGUpKSksZX0sZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZGVmYXVsdEJsb2NrXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGw9ZSxlfSxlbnVtZXJhYmxlOiEwfSksdGhpcy5tZXRob2RzPXt9LHRoaXMuZXZlbnRzPXt9LHRoaXMuX2FkZHJlc3M9bnVsbCx0aGlzLl9qc29uSW50ZXJmYWNlPVtdLHRoaXMub3B0aW9ucy5hZGRyZXNzPXIsdGhpcy5vcHRpb25zLmpzb25JbnRlcmZhY2U9dH07ZC5zZXRQcm92aWRlcj1mdW5jdGlvbihlLHQpe24ucGFja2FnZUluaXQodGhpcyxbZV0pLHRoaXMuX2V0aEFjY291bnRzPXR9LGQucHJvdG90eXBlLl9nZXRDYWxsYmFjaz1mdW5jdGlvbihlKXtpZihlJiZlW2UubGVuZ3RoLTFdJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlW2UubGVuZ3RoLTFdKXJldHVybiBlLnBvcCgpfSxkLnByb3RvdHlwZS5fY2hlY2tMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe2lmKHQ9PT1lKXRocm93IGMuQ29udHJhY3RSZXNlcnZlZEV2ZW50RXJyb3IoZSl9LGQucHJvdG90eXBlLl9nZXRPclNldERlZmF1bHRPcHRpb25zPWZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2FzUHJpY2U/U3RyaW5nKGUuZ2FzUHJpY2UpOm51bGwscj1lLmZyb20/by50b0NoZWNrc3VtQWRkcmVzcyhhLmlucHV0QWRkcmVzc0Zvcm1hdHRlcihlLmZyb20pKTpudWxsO3JldHVybiBlLmRhdGE9ZS5kYXRhfHx0aGlzLm9wdGlvbnMuZGF0YSxlLmZyb209cnx8dGhpcy5vcHRpb25zLmZyb20sZS5nYXNQcmljZT10fHx0aGlzLm9wdGlvbnMuZ2FzUHJpY2UsZS5nYXM9ZS5nYXN8fGUuZ2FzTGltaXR8fHRoaXMub3B0aW9ucy5nYXMsZGVsZXRlIGUuZ2FzTGltaXQsZX0sZC5wcm90b3R5cGUuX2VuY29kZUV2ZW50QUJJPWZ1bmN0aW9uKGUsdCl7dmFyIHI9KHQ9dHx8e30pLmZpbHRlcnx8e30sbj17fTtpZihbXCJmcm9tQmxvY2tcIixcInRvQmxvY2tcIl0uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09dFtlXX0pKS5mb3JFYWNoKChmdW5jdGlvbihlKXtuW2VdPWEuaW5wdXRCbG9ja051bWJlckZvcm1hdHRlcih0W2VdKX0pKSxBcnJheS5pc0FycmF5KHQudG9waWNzKSluLnRvcGljcz10LnRvcGljcztlbHNle2lmKG4udG9waWNzPVtdLGUmJiFlLmFub255bW91cyYmXCJBTExFVkVOVFNcIiE9PWUubmFtZSYmbi50b3BpY3MucHVzaChlLnNpZ25hdHVyZSksXCJBTExFVkVOVFNcIiE9PWUubmFtZSl7dmFyIGk9ZS5pbnB1dHMuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4hMD09PWUuaW5kZXhlZH0pKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PXJbZS5uYW1lXTtyZXR1cm4gdD9BcnJheS5pc0FycmF5KHQpP3QubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdS5lbmNvZGVQYXJhbWV0ZXIoZS50eXBlLHQpfSkpOnUuZW5jb2RlUGFyYW1ldGVyKGUudHlwZSx0KTpudWxsfSkpO24udG9waWNzPW4udG9waWNzLmNvbmNhdChpKX1uLnRvcGljcy5sZW5ndGh8fGRlbGV0ZSBuLnRvcGljc31yZXR1cm4gdGhpcy5vcHRpb25zLmFkZHJlc3MmJihuLmFkZHJlc3M9dGhpcy5vcHRpb25zLmFkZHJlc3MudG9Mb3dlckNhc2UoKSksbn0sZC5wcm90b3R5cGUuX2RlY29kZUV2ZW50QUJJPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZS5kYXRhPWUuZGF0YXx8XCJcIixlLnRvcGljcz1lLnRvcGljc3x8W107dmFyIHI9YS5vdXRwdXRMb2dGb3JtYXR0ZXIoZSk7aWYoXCJBTExFVkVOVFNcIj09PXQubmFtZSYmKHQ9dC5qc29uSW50ZXJmYWNlLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNpZ25hdHVyZT09PWUudG9waWNzWzBdfSkpfHx7YW5vbnltb3VzOiEwfSksdC5pbnB1dHM9dC5pbnB1dHN8fFtdLCF0LmFub255bW91cyl7bGV0IHI9MDt0LmlucHV0cy5mb3JFYWNoKChlPT5lLmluZGV4ZWQ/cisrOm51bGwpKSxyPjAmJmUudG9waWNzLmxlbmd0aCE9PXIrMSYmKHQ9e2Fub255bW91czohMCxpbnB1dHM6W119KX12YXIgbj10LmFub255bW91cz9lLnRvcGljczplLnRvcGljcy5zbGljZSgxKTtyZXR1cm4gci5yZXR1cm5WYWx1ZXM9dS5kZWNvZGVMb2codC5pbnB1dHMsZS5kYXRhLG4pLGRlbGV0ZSByLnJldHVyblZhbHVlcy5fX2xlbmd0aF9fLHIuZXZlbnQ9dC5uYW1lLHIuc2lnbmF0dXJlPXQuYW5vbnltb3VzfHwhZS50b3BpY3NbMF0/bnVsbDplLnRvcGljc1swXSxyLnJhdz17ZGF0YTpyLmRhdGEsdG9waWNzOnIudG9waWNzfSxkZWxldGUgci5kYXRhLGRlbGV0ZSByLnRvcGljcyxyfSxkLnByb3RvdHlwZS5fZW5jb2RlTWV0aG9kQUJJPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fbWV0aG9kLnNpZ25hdHVyZSx0PXRoaXMuYXJndW1lbnRzfHxbXSxyPSExLG49dGhpcy5fcGFyZW50Lm9wdGlvbnMuanNvbkludGVyZmFjZS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVyblwiY29uc3RydWN0b3JcIj09PWUmJnQudHlwZT09PWV8fCh0LnNpZ25hdHVyZT09PWV8fHQuc2lnbmF0dXJlPT09ZS5yZXBsYWNlKFwiMHhcIixcIlwiKXx8dC5uYW1lPT09ZSkmJlwiZnVuY3Rpb25cIj09PXQudHlwZX0pKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciBuPUFycmF5LmlzQXJyYXkoZS5pbnB1dHMpP2UuaW5wdXRzLmxlbmd0aDowO2lmKG4hPT10Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBpcyBub3QgbWF0Y2hpbmcgdGhlIG1ldGhvZHMgcmVxdWlyZWQgbnVtYmVyLiBZb3UgbmVlZCB0byBwYXNzIFwiK24rXCIgYXJndW1lbnRzLlwiKTtyZXR1cm5cImZ1bmN0aW9uXCI9PT1lLnR5cGUmJihyPWUuc2lnbmF0dXJlKSxBcnJheS5pc0FycmF5KGUuaW5wdXRzKT9lLmlucHV0czpbXX0pKS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB1LmVuY29kZVBhcmFtZXRlcnMoZSx0KS5yZXBsYWNlKFwiMHhcIixcIlwiKX0pKVswXXx8XCJcIjtpZihcImNvbnN0cnVjdG9yXCI9PT1lKXtpZighdGhpcy5fZGVwbG95RGF0YSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29udHJhY3QgaGFzIG5vIGNvbnRyYWN0IGRhdGEgb3B0aW9uIHNldC4gVGhpcyBpcyBuZWNlc3NhcnkgdG8gYXBwZW5kIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzLlwiKTtyZXR1cm4gdGhpcy5fZGVwbG95RGF0YS5zdGFydHNXaXRoKFwiMHhcIil8fCh0aGlzLl9kZXBsb3lEYXRhPVwiMHhcIit0aGlzLl9kZXBsb3lEYXRhKSx0aGlzLl9kZXBsb3lEYXRhK259dmFyIGk9cj9yK246bjtpZighaSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgbWF0Y2hpbmcgY29udHJhY3QgbWV0aG9kIG5hbWVkIFxcXCJcIit0aGlzLl9tZXRob2QubmFtZSsnXCIuJyk7cmV0dXJuIGl9LGQucHJvdG90eXBlLl9kZWNvZGVNZXRob2RSZXR1cm49ZnVuY3Rpb24oZSx0KXtpZighdClyZXR1cm4gbnVsbDt0PXQubGVuZ3RoPj0yP3Quc2xpY2UoMik6dDt2YXIgcj11LmRlY29kZVBhcmFtZXRlcnMoZSx0KTtyZXR1cm4gMT09PXIuX19sZW5ndGhfXz9yWzBdOihkZWxldGUgci5fX2xlbmd0aF9fLHIpfSxkLnByb3RvdHlwZS5kZXBsb3k9ZnVuY3Rpb24oZSx0KXtpZigoZT1lfHx7fSkuYXJndW1lbnRzPWUuYXJndW1lbnRzfHxbXSwhKGU9dGhpcy5fZ2V0T3JTZXREZWZhdWx0T3B0aW9ucyhlKSkuZGF0YSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gdChjLkNvbnRyYWN0TWlzc2luZ0RlcGxveURhdGFFcnJvcigpKTt0aHJvdyBjLkNvbnRyYWN0TWlzc2luZ0RlcGxveURhdGFFcnJvcigpfXZhciByPXRoaXMub3B0aW9ucy5qc29uSW50ZXJmYWNlLmZpbmQoKGU9PlwiY29uc3RydWN0b3JcIj09PWUudHlwZSkpfHx7fTtyZXR1cm4gci5zaWduYXR1cmU9XCJjb25zdHJ1Y3RvclwiLHRoaXMuX2NyZWF0ZVR4T2JqZWN0LmFwcGx5KHttZXRob2Q6cixwYXJlbnQ6dGhpcyxkZXBsb3lEYXRhOmUuZGF0YSxfZXRoQWNjb3VudHM6dGhpcy5jb25zdHJ1Y3Rvci5fZXRoQWNjb3VudHN9LGUuYXJndW1lbnRzKX0sZC5wcm90b3R5cGUuX2dlbmVyYXRlRXZlbnRPcHRpb25zPWZ1bmN0aW9uKCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSx0PXRoaXMuX2dldENhbGxiYWNrKGUpLHI9XCJvYmplY3RcIj09PSghIWVbZS5sZW5ndGgtMV0mJnR5cGVvZiBlW2UubGVuZ3RoLTFdKT9lLnBvcCgpOnt9LG49XCJzdHJpbmdcIj09dHlwZW9mIGVbMF0/ZVswXTpcImFsbGV2ZW50c1wiLGk9XCJhbGxldmVudHNcIj09PW4udG9Mb3dlckNhc2UoKT97bmFtZTpcIkFMTEVWRU5UU1wiLGpzb25JbnRlcmZhY2U6dGhpcy5vcHRpb25zLmpzb25JbnRlcmZhY2V9OnRoaXMub3B0aW9ucy5qc29uSW50ZXJmYWNlLmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVyblwiZXZlbnRcIj09PWUudHlwZSYmKGUubmFtZT09PW58fGUuc2lnbmF0dXJlPT09XCIweFwiK24ucmVwbGFjZShcIjB4XCIsXCJcIikpfSkpO2lmKCFpKXRocm93IGMuQ29udHJhY3RFdmVudERvZXNOb3RFeGlzdEVycm9yKG4pO2lmKCFvLmlzQWRkcmVzcyh0aGlzLm9wdGlvbnMuYWRkcmVzcykpdGhyb3cgYy5Db250cmFjdE5vQWRkcmVzc0RlZmluZWRFcnJvcigpO3JldHVybntwYXJhbXM6dGhpcy5fZW5jb2RlRXZlbnRBQkkoaSxyKSxldmVudDppLGNhbGxiYWNrOnR9fSxkLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLm9wdGlvbnMuanNvbkludGVyZmFjZSx0aGlzLm9wdGlvbnMuYWRkcmVzcyx0aGlzLm9wdGlvbnMpfSxkLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO2lmKCEocj10aGlzLl9nZXRDYWxsYmFjayhuKSkpdGhyb3cgYy5Db250cmFjdE9uY2VSZXF1aXJlc0NhbGxiYWNrRXJyb3IoKTt0JiZkZWxldGUgdC5mcm9tQmxvY2ssdGhpcy5fb24oZSx0LChmdW5jdGlvbihlLHQsbil7bi51bnN1YnNjcmliZSgpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHImJnIoZSx0LG4pfSkpfSxkLnByb3RvdHlwZS5fb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9nZW5lcmF0ZUV2ZW50T3B0aW9ucy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7ZS5wYXJhbXMmJmUucGFyYW1zLnRvQmxvY2smJihkZWxldGUgZS5wYXJhbXMudG9CbG9jayxjb25zb2xlLndhcm4oXCJJbnZhbGlkIG9wdGlvbjogdG9CbG9jay4gVXNlIGdldFBhc3RFdmVudHMgZm9yIHNwZWNpZmljIHJhbmdlLlwiKSksdGhpcy5fY2hlY2tMaXN0ZW5lcihcIm5ld0xpc3RlbmVyXCIsZS5ldmVudC5uYW1lKSx0aGlzLl9jaGVja0xpc3RlbmVyKFwicmVtb3ZlTGlzdGVuZXJcIixlLmV2ZW50Lm5hbWUpO3ZhciB0PW5ldyBzKHtzdWJzY3JpcHRpb246e3BhcmFtczoxLGlucHV0Rm9ybWF0dGVyOlthLmlucHV0TG9nRm9ybWF0dGVyXSxvdXRwdXRGb3JtYXR0ZXI6dGhpcy5fZGVjb2RlRXZlbnRBQkkuYmluZChlLmV2ZW50KSxzdWJzY3JpcHRpb25IYW5kbGVyOmZ1bmN0aW9uKGUpe2UucmVtb3ZlZD90aGlzLmVtaXQoXCJjaGFuZ2VkXCIsZSk6dGhpcy5lbWl0KFwiZGF0YVwiLGUpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuY2FsbGJhY2smJnRoaXMuY2FsbGJhY2sobnVsbCxlLHRoaXMpfX0sdHlwZTpcImV0aFwiLHJlcXVlc3RNYW5hZ2VyOnRoaXMuX3JlcXVlc3RNYW5hZ2VyfSk7cmV0dXJuIHQuc3Vic2NyaWJlKFwibG9nc1wiLGUucGFyYW1zLGUuY2FsbGJhY2t8fGZ1bmN0aW9uKCl7fSksdH0sZC5wcm90b3R5cGUuZ2V0UGFzdEV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX2dlbmVyYXRlRXZlbnRPcHRpb25zLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0PW5ldyBpKHtuYW1lOlwiZ2V0UGFzdExvZ3NcIixjYWxsOlwiZXRoX2dldExvZ3NcIixwYXJhbXM6MSxpbnB1dEZvcm1hdHRlcjpbYS5pbnB1dExvZ0Zvcm1hdHRlcl0sb3V0cHV0Rm9ybWF0dGVyOnRoaXMuX2RlY29kZUV2ZW50QUJJLmJpbmQoZS5ldmVudCl9KTt0LnNldFJlcXVlc3RNYW5hZ2VyKHRoaXMuX3JlcXVlc3RNYW5hZ2VyKTt2YXIgcj10LmJ1aWxkQ2FsbCgpO3JldHVybiB0PW51bGwscihlLnBhcmFtcyxlLmNhbGxiYWNrKX0sZC5wcm90b3R5cGUuX2NyZWF0ZVR4T2JqZWN0PWZ1bmN0aW9uKCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSx0PXt9O2lmKFwiZnVuY3Rpb25cIj09PXRoaXMubWV0aG9kLnR5cGUmJih0LmNhbGw9dGhpcy5wYXJlbnQuX2V4ZWN1dGVNZXRob2QuYmluZCh0LFwiY2FsbFwiKSx0LmNhbGwucmVxdWVzdD10aGlzLnBhcmVudC5fZXhlY3V0ZU1ldGhvZC5iaW5kKHQsXCJjYWxsXCIsITApKSx0LnNlbmQ9dGhpcy5wYXJlbnQuX2V4ZWN1dGVNZXRob2QuYmluZCh0LFwic2VuZFwiKSx0LnNlbmQucmVxdWVzdD10aGlzLnBhcmVudC5fZXhlY3V0ZU1ldGhvZC5iaW5kKHQsXCJzZW5kXCIsITApLHQuZW5jb2RlQUJJPXRoaXMucGFyZW50Ll9lbmNvZGVNZXRob2RBQkkuYmluZCh0KSx0LmVzdGltYXRlR2FzPXRoaXMucGFyZW50Ll9leGVjdXRlTWV0aG9kLmJpbmQodCxcImVzdGltYXRlXCIpLHQuY3JlYXRlQWNjZXNzTGlzdD10aGlzLnBhcmVudC5fZXhlY3V0ZU1ldGhvZC5iaW5kKHQsXCJjcmVhdGVBY2Nlc3NMaXN0XCIpLGUmJnRoaXMubWV0aG9kLmlucHV0cyYmZS5sZW5ndGghPT10aGlzLm1ldGhvZC5pbnB1dHMubGVuZ3RoKXtpZih0aGlzLm5leHRNZXRob2QpcmV0dXJuIHRoaXMubmV4dE1ldGhvZC5hcHBseShudWxsLGUpO3Rocm93IGMuSW52YWxpZE51bWJlck9mUGFyYW1zKGUubGVuZ3RoLHRoaXMubWV0aG9kLmlucHV0cy5sZW5ndGgsdGhpcy5tZXRob2QubmFtZSl9cmV0dXJuIHQuYXJndW1lbnRzPWV8fFtdLHQuX21ldGhvZD10aGlzLm1ldGhvZCx0Ll9wYXJlbnQ9dGhpcy5wYXJlbnQsdC5fZXRoQWNjb3VudHM9dGhpcy5wYXJlbnQuY29uc3RydWN0b3IuX2V0aEFjY291bnRzfHx0aGlzLl9ldGhBY2NvdW50cyx0aGlzLmRlcGxveURhdGEmJih0Ll9kZXBsb3lEYXRhPXRoaXMuZGVwbG95RGF0YSksdH0sZC5wcm90b3R5cGUuX3Byb2Nlc3NFeGVjdXRlQXJndW1lbnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9e307aWYoci50eXBlPWUuc2hpZnQoKSxyLmNhbGxiYWNrPXRoaXMuX3BhcmVudC5fZ2V0Q2FsbGJhY2soZSksXCJjYWxsXCIhPT1yLnR5cGV8fCEwPT09ZVtlLmxlbmd0aC0xXXx8XCJzdHJpbmdcIiE9dHlwZW9mIGVbZS5sZW5ndGgtMV0mJiFpc0Zpbml0ZShlW2UubGVuZ3RoLTFdKXx8KHIuZGVmYXVsdEJsb2NrPWUucG9wKCkpLHIub3B0aW9ucz1cIm9iamVjdFwiPT09KCEhZVtlLmxlbmd0aC0xXSYmdHlwZW9mIGVbZS5sZW5ndGgtMV0pP2UucG9wKCk6e30sci5nZW5lcmF0ZVJlcXVlc3Q9ITA9PT1lW2UubGVuZ3RoLTFdJiZlLnBvcCgpLHIub3B0aW9ucz10aGlzLl9wYXJlbnQuX2dldE9yU2V0RGVmYXVsdE9wdGlvbnMoci5vcHRpb25zKSxyLm9wdGlvbnMuZGF0YT10aGlzLmVuY29kZUFCSSgpLCF0aGlzLl9kZXBsb3lEYXRhJiYhby5pc0FkZHJlc3ModGhpcy5fcGFyZW50Lm9wdGlvbnMuYWRkcmVzcykpdGhyb3cgYy5Db250cmFjdE5vQWRkcmVzc0RlZmluZWRFcnJvcigpO3JldHVybiB0aGlzLl9kZXBsb3lEYXRhfHwoci5vcHRpb25zLnRvPXRoaXMuX3BhcmVudC5vcHRpb25zLmFkZHJlc3MpLHIub3B0aW9ucy5kYXRhP3I6by5fZmlyZUVycm9yKG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBtYXRjaGluZyBjb250cmFjdCBtZXRob2QsIG9yIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBpcyB3cm9uZy5cIiksdC5ldmVudEVtaXR0ZXIsdC5yZWplY3Qsci5jYWxsYmFjayl9LGQucHJvdG90eXBlLl9leGVjdXRlTWV0aG9kPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMuX3BhcmVudC5fcHJvY2Vzc0V4ZWN1dGVBcmd1bWVudHMuY2FsbCh0aGlzLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykscikscj1mKFwic2VuZFwiIT09dC50eXBlKSxuPWUuY29uc3RydWN0b3IuX2V0aEFjY291bnRzfHxlLl9ldGhBY2NvdW50cztpZih0LmdlbmVyYXRlUmVxdWVzdCl7dmFyIHM9e3BhcmFtczpbYS5pbnB1dENhbGxGb3JtYXR0ZXIuY2FsbCh0aGlzLl9wYXJlbnQsdC5vcHRpb25zKV0sY2FsbGJhY2s6dC5jYWxsYmFja307cmV0dXJuXCJjYWxsXCI9PT10LnR5cGU/KHMucGFyYW1zLnB1c2goYS5pbnB1dERlZmF1bHRCbG9ja051bWJlckZvcm1hdHRlci5jYWxsKHRoaXMuX3BhcmVudCx0LmRlZmF1bHRCbG9jaykpLHMubWV0aG9kPVwiZXRoX2NhbGxcIixzLmZvcm1hdD10aGlzLl9wYXJlbnQuX2RlY29kZU1ldGhvZFJldHVybi5iaW5kKG51bGwsdGhpcy5fbWV0aG9kLm91dHB1dHMpKTpzLm1ldGhvZD1cImV0aF9zZW5kVHJhbnNhY3Rpb25cIixzfXN3aXRjaCh0LnR5cGUpe2Nhc2VcImNyZWF0ZUFjY2Vzc0xpc3RcIjppZighby5pc0FkZHJlc3ModC5vcHRpb25zLmZyb20pKXJldHVybiBvLl9maXJlRXJyb3IoYy5Db250cmFjdE5vRnJvbUFkZHJlc3NEZWZpbmVkRXJyb3IoKSxyLmV2ZW50RW1pdHRlcixyLnJlamVjdCx0LmNhbGxiYWNrKTt2YXIgZD1uZXcgaSh7bmFtZTpcImNyZWF0ZUFjY2Vzc0xpc3RcIixjYWxsOlwiZXRoX2NyZWF0ZUFjY2Vzc0xpc3RcIixwYXJhbXM6MixpbnB1dEZvcm1hdHRlcjpbYS5pbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyLGEuaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXJdLHJlcXVlc3RNYW5hZ2VyOmUuX3BhcmVudC5fcmVxdWVzdE1hbmFnZXIsYWNjb3VudHM6bixkZWZhdWx0QWNjb3VudDplLl9wYXJlbnQuZGVmYXVsdEFjY291bnQsZGVmYXVsdEJsb2NrOmUuX3BhcmVudC5kZWZhdWx0QmxvY2t9KS5jcmVhdGVGdW5jdGlvbigpO3JldHVybiBkKHQub3B0aW9ucyx0LmNhbGxiYWNrKTtjYXNlXCJlc3RpbWF0ZVwiOnZhciBoPW5ldyBpKHtuYW1lOlwiZXN0aW1hdGVHYXNcIixjYWxsOlwiZXRoX2VzdGltYXRlR2FzXCIscGFyYW1zOjEsaW5wdXRGb3JtYXR0ZXI6W2EuaW5wdXRDYWxsRm9ybWF0dGVyXSxvdXRwdXRGb3JtYXR0ZXI6by5oZXhUb051bWJlcixyZXF1ZXN0TWFuYWdlcjplLl9wYXJlbnQuX3JlcXVlc3RNYW5hZ2VyLGFjY291bnRzOm4sZGVmYXVsdEFjY291bnQ6ZS5fcGFyZW50LmRlZmF1bHRBY2NvdW50LGRlZmF1bHRCbG9jazplLl9wYXJlbnQuZGVmYXVsdEJsb2NrfSkuY3JlYXRlRnVuY3Rpb24oKTtyZXR1cm4gaCh0Lm9wdGlvbnMsdC5jYWxsYmFjayk7Y2FzZVwiY2FsbFwiOnZhciBsPW5ldyBpKHtuYW1lOlwiY2FsbFwiLGNhbGw6XCJldGhfY2FsbFwiLHBhcmFtczoyLGlucHV0Rm9ybWF0dGVyOlthLmlucHV0Q2FsbEZvcm1hdHRlcixhLmlucHV0RGVmYXVsdEJsb2NrTnVtYmVyRm9ybWF0dGVyXSxvdXRwdXRGb3JtYXR0ZXI6ZnVuY3Rpb24odCl7cmV0dXJuIGUuX3BhcmVudC5fZGVjb2RlTWV0aG9kUmV0dXJuKGUuX21ldGhvZC5vdXRwdXRzLHQpfSxyZXF1ZXN0TWFuYWdlcjplLl9wYXJlbnQuX3JlcXVlc3RNYW5hZ2VyLGFjY291bnRzOm4sZGVmYXVsdEFjY291bnQ6ZS5fcGFyZW50LmRlZmF1bHRBY2NvdW50LGRlZmF1bHRCbG9jazplLl9wYXJlbnQuZGVmYXVsdEJsb2NrLGhhbmRsZVJldmVydDplLl9wYXJlbnQuaGFuZGxlUmV2ZXJ0LGFiaUNvZGVyOnV9KS5jcmVhdGVGdW5jdGlvbigpO3JldHVybiBsKHQub3B0aW9ucyx0LmRlZmF1bHRCbG9jayx0LmNhbGxiYWNrKTtjYXNlXCJzZW5kXCI6aWYoIW8uaXNBZGRyZXNzKHQub3B0aW9ucy5mcm9tKSlyZXR1cm4gby5fZmlyZUVycm9yKGMuQ29udHJhY3ROb0Zyb21BZGRyZXNzRGVmaW5lZEVycm9yKCksci5ldmVudEVtaXR0ZXIsci5yZWplY3QsdC5jYWxsYmFjayk7aWYoXCJib29sZWFuXCI9PXR5cGVvZiB0aGlzLl9tZXRob2QucGF5YWJsZSYmIXRoaXMuX21ldGhvZC5wYXlhYmxlJiZ0Lm9wdGlvbnMudmFsdWUmJnQub3B0aW9ucy52YWx1ZT4wKXJldHVybiBvLl9maXJlRXJyb3IobmV3IEVycm9yKFwiQ2FuIG5vdCBzZW5kIHZhbHVlIHRvIG5vbi1wYXlhYmxlIGNvbnRyYWN0IG1ldGhvZCBvciBjb25zdHJ1Y3RvclwiKSxyLmV2ZW50RW1pdHRlcixyLnJlamVjdCx0LmNhbGxiYWNrKTt2YXIgcD17cmVjZWlwdEZvcm1hdHRlcjpmdW5jdGlvbih0KXtpZihBcnJheS5pc0FycmF5KHQubG9ncykpe3ZhciByPXQubG9ncy5tYXAoKHQ9PmUuX3BhcmVudC5fZGVjb2RlRXZlbnRBQkkuY2FsbCh7bmFtZTpcIkFMTEVWRU5UU1wiLGpzb25JbnRlcmZhY2U6ZS5fcGFyZW50Lm9wdGlvbnMuanNvbkludGVyZmFjZX0sdCkpKTt0LmV2ZW50cz17fTt2YXIgbj0wO3IuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5ldmVudD90LmV2ZW50c1tlLmV2ZW50XT9BcnJheS5pc0FycmF5KHQuZXZlbnRzW2UuZXZlbnRdKT90LmV2ZW50c1tlLmV2ZW50XS5wdXNoKGUpOnQuZXZlbnRzW2UuZXZlbnRdPVt0LmV2ZW50c1tlLmV2ZW50XSxlXTp0LmV2ZW50c1tlLmV2ZW50XT1lOih0LmV2ZW50c1tuXT1lLG4rKyl9KSksZGVsZXRlIHQubG9nc31yZXR1cm4gdH0sY29udHJhY3REZXBsb3lGb3JtYXR0ZXI6ZnVuY3Rpb24odCl7dmFyIHI9ZS5fcGFyZW50LmNsb25lKCk7cmV0dXJuIHIub3B0aW9ucy5hZGRyZXNzPXQuY29udHJhY3RBZGRyZXNzLHJ9fSxiPW5ldyBpKHtuYW1lOlwic2VuZFRyYW5zYWN0aW9uXCIsY2FsbDpcImV0aF9zZW5kVHJhbnNhY3Rpb25cIixwYXJhbXM6MSxpbnB1dEZvcm1hdHRlcjpbYS5pbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyXSxyZXF1ZXN0TWFuYWdlcjplLl9wYXJlbnQuX3JlcXVlc3RNYW5hZ2VyLGFjY291bnRzOmUuY29uc3RydWN0b3IuX2V0aEFjY291bnRzfHxlLl9ldGhBY2NvdW50cyxkZWZhdWx0QWNjb3VudDplLl9wYXJlbnQuZGVmYXVsdEFjY291bnQsZGVmYXVsdEJsb2NrOmUuX3BhcmVudC5kZWZhdWx0QmxvY2ssdHJhbnNhY3Rpb25CbG9ja1RpbWVvdXQ6ZS5fcGFyZW50LnRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0LHRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzOmUuX3BhcmVudC50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2Nrcyx0cmFuc2FjdGlvblBvbGxpbmdUaW1lb3V0OmUuX3BhcmVudC50cmFuc2FjdGlvblBvbGxpbmdUaW1lb3V0LHRyYW5zYWN0aW9uUG9sbGluZ0ludGVydmFsOmUuX3BhcmVudC50cmFuc2FjdGlvblBvbGxpbmdJbnRlcnZhbCxkZWZhdWx0Q29tbW9uOmUuX3BhcmVudC5kZWZhdWx0Q29tbW9uLGRlZmF1bHRDaGFpbjplLl9wYXJlbnQuZGVmYXVsdENoYWluLGRlZmF1bHRIYXJkZm9yazplLl9wYXJlbnQuZGVmYXVsdEhhcmRmb3JrLGhhbmRsZVJldmVydDplLl9wYXJlbnQuaGFuZGxlUmV2ZXJ0LGV4dHJhRm9ybWF0dGVyczpwLGFiaUNvZGVyOnV9KS5jcmVhdGVGdW5jdGlvbigpO3JldHVybiBiKHQub3B0aW9ucyx0LmNhbGxiYWNrKTtkZWZhdWx0OnRocm93IG5ldyBFcnJvcignTWV0aG9kIFwiJyt0LnR5cGUrJ1wiIG5vdCBpbXBsZW1lbnRlZC4nKX19LGUuZXhwb3J0cz1kfSw0NzUxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXIoODI2OSksaT1yKDM1NTApLG89ZnVuY3Rpb24oZSl7Y29uc3QgdD1cIkFcIi5jaGFyQ29kZUF0KDApLHI9XCJaXCIuY2hhckNvZGVBdCgwKTtyZXR1cm4oZT0oZT1lLnRvVXBwZXJDYXNlKCkpLnNsaWNlKDQpK2Uuc2xpY2UoMCw0KSkuc3BsaXQoXCJcIikubWFwKChmdW5jdGlvbihlKXtjb25zdCBuPWUuY2hhckNvZGVBdCgwKTtyZXR1cm4gbj49dCYmbjw9cj9uLXQrMTA6ZX0pKS5qb2luKFwiXCIpfSxzPWZ1bmN0aW9uKGUpe2xldCB0LHI9ZTtmb3IoO3IubGVuZ3RoPjI7KXQ9ci5zbGljZSgwLDkpLHI9cGFyc2VJbnQodCwxMCklOTcrci5zbGljZSh0Lmxlbmd0aCk7cmV0dXJuIHBhcnNlSW50KHIsMTApJTk3fTtjbGFzcyBhe2NvbnN0cnVjdG9yKGUpe3RoaXMuX2liYW49ZX1zdGF0aWMgdG9BZGRyZXNzKGUpe2lmKCEoZT1uZXcgYShlKSkuaXNEaXJlY3QoKSl0aHJvdyBuZXcgRXJyb3IoXCJJQkFOIGlzIGluZGlyZWN0IGFuZCBjYW4ndCBiZSBjb252ZXJ0ZWRcIik7cmV0dXJuIGUudG9BZGRyZXNzKCl9c3RhdGljIHRvSWJhbihlKXtyZXR1cm4gYS5mcm9tQWRkcmVzcyhlKS50b1N0cmluZygpfXN0YXRpYyBmcm9tQWRkcmVzcyhlKXtpZighbi5pc0FkZHJlc3MoZSkpdGhyb3cgbmV3IEVycm9yKFwiUHJvdmlkZWQgYWRkcmVzcyBpcyBub3QgYSB2YWxpZCBhZGRyZXNzOiBcIitlKTtlPWUucmVwbGFjZShcIjB4XCIsXCJcIikucmVwbGFjZShcIjBYXCIsXCJcIik7Y29uc3QgdD1mdW5jdGlvbihlLHQpe2xldCByPWU7Zm9yKDtyLmxlbmd0aDwzMDspcj1cIjBcIityO3JldHVybiByfShuZXcgaShlLDE2KS50b1N0cmluZygzNikpO3JldHVybiBhLmZyb21CYmFuKHQudG9VcHBlckNhc2UoKSl9c3RhdGljIGZyb21CYmFuKGUpe2NvbnN0IHQ9KFwiMFwiKyg5OC1zKG8oXCJYRTAwXCIrZSkpKSkuc2xpY2UoLTIpO3JldHVybiBuZXcgYShcIlhFXCIrdCtlKX1zdGF0aWMgY3JlYXRlSW5kaXJlY3QoZSl7cmV0dXJuIGEuZnJvbUJiYW4oXCJFVEhcIitlLmluc3RpdHV0aW9uK2UuaWRlbnRpZmllcil9c3RhdGljIGlzVmFsaWQoZSl7cmV0dXJuIG5ldyBhKGUpLmlzVmFsaWQoKX1pc1ZhbGlkKCl7cmV0dXJuL15YRVswLTldezJ9KEVUSFswLTlBLVpdezEzfXxbMC05QS1aXXszMCwzMX0pJC8udGVzdCh0aGlzLl9pYmFuKSYmMT09PXMobyh0aGlzLl9pYmFuKSl9aXNEaXJlY3QoKXtyZXR1cm4gMzQ9PT10aGlzLl9pYmFuLmxlbmd0aHx8MzU9PT10aGlzLl9pYmFuLmxlbmd0aH1pc0luZGlyZWN0KCl7cmV0dXJuIDIwPT09dGhpcy5faWJhbi5sZW5ndGh9Y2hlY2tzdW0oKXtyZXR1cm4gdGhpcy5faWJhbi5zbGljZSgyLDQpfWluc3RpdHV0aW9uKCl7cmV0dXJuIHRoaXMuaXNJbmRpcmVjdCgpP3RoaXMuX2liYW4uc2xpY2UoNywxMSk6XCJcIn1jbGllbnQoKXtyZXR1cm4gdGhpcy5pc0luZGlyZWN0KCk/dGhpcy5faWJhbi5zbGljZSgxMSk6XCJcIn10b0FkZHJlc3MoKXtpZih0aGlzLmlzRGlyZWN0KCkpe2NvbnN0IGU9dGhpcy5faWJhbi5zbGljZSg0KSx0PW5ldyBpKGUsMzYpO3JldHVybiBuLnRvQ2hlY2tzdW1BZGRyZXNzKHQudG9TdHJpbmcoMTYsMjApKX1yZXR1cm5cIlwifXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMuX2liYW59fWUuZXhwb3J0cz1hfSw0MzUxOihlLHQscik9Pnt2YXIgbj1yKDQzOTApLmVycm9ycyxpPXIoOTUzNikuWE1MSHR0cFJlcXVlc3Qsbz1yKDg1MDEpLHM9cig5MjY3KSxhPWZ1bmN0aW9uKGUsdCl7dD10fHx7fSx0aGlzLndpdGhDcmVkZW50aWFscz10LndpdGhDcmVkZW50aWFsc3x8ITEsdGhpcy50aW1lb3V0PXQudGltZW91dHx8MCx0aGlzLmhlYWRlcnM9dC5oZWFkZXJzLHRoaXMuYWdlbnQ9dC5hZ2VudCx0aGlzLmNvbm5lY3RlZD0hMTtjb25zdCByPSExIT09dC5rZWVwQWxpdmU7dGhpcy5ob3N0PWV8fFwiaHR0cDovL2xvY2FsaG9zdDo4NTQ1XCIsdGhpcy5hZ2VudHx8KFwiaHR0cHNcIj09PXRoaXMuaG9zdC5zdWJzdHJpbmcoMCw1KT90aGlzLmh0dHBzQWdlbnQ9bmV3IHMuQWdlbnQoe2tlZXBBbGl2ZTpyfSk6dGhpcy5odHRwQWdlbnQ9bmV3IG8uQWdlbnQoe2tlZXBBbGl2ZTpyfSkpfTthLnByb3RvdHlwZS5fcHJlcGFyZVJlcXVlc3Q9ZnVuY3Rpb24oKXt2YXIgZTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgWE1MSHR0cFJlcXVlc3QpZT1uZXcgWE1MSHR0cFJlcXVlc3Q7ZWxzZXtlPW5ldyBpO3ZhciB0PXtodHRwc0FnZW50OnRoaXMuaHR0cHNBZ2VudCxodHRwQWdlbnQ6dGhpcy5odHRwQWdlbnQsYmFzZVVybDp0aGlzLmJhc2VVcmx9O3RoaXMuYWdlbnQmJih0Lmh0dHBzQWdlbnQ9dGhpcy5hZ2VudC5odHRwcyx0Lmh0dHBBZ2VudD10aGlzLmFnZW50Lmh0dHAsdC5iYXNlVXJsPXRoaXMuYWdlbnQuYmFzZVVybCksZS5ub2RlanNTZXQodCl9cmV0dXJuIGUub3BlbihcIlBPU1RcIix0aGlzLmhvc3QsITApLGUuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLFwiYXBwbGljYXRpb24vanNvblwiKSxlLnRpbWVvdXQ9dGhpcy50aW1lb3V0LGUud2l0aENyZWRlbnRpYWxzPXRoaXMud2l0aENyZWRlbnRpYWxzLHRoaXMuaGVhZGVycyYmdGhpcy5oZWFkZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe2Uuc2V0UmVxdWVzdEhlYWRlcih0Lm5hbWUsdC52YWx1ZSl9KSksZX0sYS5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsaT10aGlzLl9wcmVwYXJlUmVxdWVzdCgpO2kub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYoND09PWkucmVhZHlTdGF0ZSYmMSE9PWkudGltZW91dCl7dmFyIGU9aS5yZXNwb25zZVRleHQsbz1udWxsO3RyeXtlPUpTT04ucGFyc2UoZSl9Y2F0Y2goZSl7bz1uLkludmFsaWRSZXNwb25zZShpLnJlc3BvbnNlVGV4dCl9ci5jb25uZWN0ZWQ9ITAsdChvLGUpfX0saS5vbnRpbWVvdXQ9ZnVuY3Rpb24oKXtyLmNvbm5lY3RlZD0hMSx0KG4uQ29ubmVjdGlvblRpbWVvdXQodGhpcy50aW1lb3V0KSl9O3RyeXtpLnNlbmQoSlNPTi5zdHJpbmdpZnkoZSkpfWNhdGNoKGUpe3RoaXMuY29ubmVjdGVkPSExLHQobi5JbnZhbGlkQ29ubmVjdGlvbih0aGlzLmhvc3QpKX19LGEucHJvdG90eXBlLmRpc2Nvbm5lY3Q9ZnVuY3Rpb24oKXt9LGEucHJvdG90eXBlLnN1cHBvcnRzU3Vic2NyaXB0aW9ucz1mdW5jdGlvbigpe3JldHVybiExfSxlLmV4cG9ydHM9YX0sODI2OTooZSx0LHIpPT57dmFyIG49cig0Mjc4KSxpPXIoMzI5KSxvPXIoODY2OCkscz1yKDE3OTgpLGE9cigzNTUwKSxjPWZ1bmN0aW9uKGUsdCl7dmFyIHI9W107cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIHQuY29tcG9uZW50cyl7aWYoXCJ0dXBsZVwiIT09dC50eXBlLnN1YnN0cmluZygwLDUpKXRocm93IG5ldyBFcnJvcihcImNvbXBvbmVudHMgZm91bmQgYnV0IHR5cGUgaXMgbm90IHR1cGxlOyByZXBvcnQgb24gR2l0SHViXCIpO3ZhciBuPVwiXCIsaT10LnR5cGUuaW5kZXhPZihcIltcIik7aT49MCYmKG49dC50eXBlLnN1YnN0cmluZyhpKSk7dmFyIG89YyhlLHQuY29tcG9uZW50cyk7QXJyYXkuaXNBcnJheShvKSYmZT9yLnB1c2goXCJ0dXBsZShcIitvLmpvaW4oXCIsXCIpK1wiKVwiK24pOmU/ci5wdXNoKFwiKFwiK28rXCIpXCIpOnIucHVzaChcIihcIitvLmpvaW4oXCIsXCIpK1wiKVwiK24pfWVsc2Ugci5wdXNoKHQudHlwZSl9KSkscn0sZj1mdW5jdGlvbihlKXtpZighaS5pc0hleFN0cmljdChlKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcGFyYW1ldGVyIG11c3QgYmUgYSB2YWxpZCBIRVggc3RyaW5nLlwiKTt2YXIgdD1cIlwiLHI9MCxuPWUubGVuZ3RoO2ZvcihcIjB4XCI9PT1lLnN1YnN0cmluZygwLDIpJiYocj0yKTtyPG47cis9Mil7dmFyIG89cGFyc2VJbnQoZS5zbGljZShyLHIrMiksMTYpO3QrPVN0cmluZy5mcm9tQ2hhckNvZGUobyl9cmV0dXJuIHR9LHU9ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuXCIweDAwXCI7Zm9yKHZhciB0PVwiXCIscj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1lLmNoYXJDb2RlQXQocikudG9TdHJpbmcoMTYpO3QrPW4ubGVuZ3RoPDI/XCIwXCIrbjpufXJldHVyblwiMHhcIit0fSxkPWZ1bmN0aW9uKGUpe2lmKGU9ZT9lLnRvTG93ZXJDYXNlKCk6XCJldGhlclwiLCFuLnVuaXRNYXBbZV0pdGhyb3cgbmV3IEVycm9yKCdUaGlzIHVuaXQgXCInK2UrXCJcXFwiIGRvZXNuJ3QgZXhpc3QsIHBsZWFzZSB1c2UgdGhlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHVuaXRzXCIrSlNPTi5zdHJpbmdpZnkobi51bml0TWFwLG51bGwsMikpO3JldHVybiBlfTtlLmV4cG9ydHM9e19maXJlRXJyb3I6ZnVuY3Rpb24oZSx0LHIsbixpKXtyZXR1cm4hZXx8XCJvYmplY3RcIiE9dHlwZW9mIGV8fGUgaW5zdGFuY2VvZiBFcnJvcnx8IWUuZGF0YXx8KChlLmRhdGEmJlwib2JqZWN0XCI9PXR5cGVvZiBlLmRhdGF8fEFycmF5LmlzQXJyYXkoZS5kYXRhKSkmJihlLmRhdGE9SlNPTi5zdHJpbmdpZnkoZS5kYXRhLG51bGwsMikpLGU9ZS5tZXNzYWdlK1wiXFxuXCIrZS5kYXRhKSxcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9bmV3IEVycm9yKGUpKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiZuKGUsaSksXCJmdW5jdGlvblwiPT10eXBlb2YgciYmKCh0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lmxpc3RlbmVycyYmdC5saXN0ZW5lcnMoXCJlcnJvclwiKS5sZW5ndGh8fFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pJiZ0LmNhdGNoKChmdW5jdGlvbigpe30pKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3IoZSl9KSwxKSksdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5lbWl0JiZzZXRUaW1lb3V0KChmdW5jdGlvbigpe3QuZW1pdChcImVycm9yXCIsZSxpKSx0LnJlbW92ZUFsbExpc3RlbmVycygpfSksMSksdH0sX2pzb25JbnRlcmZhY2VNZXRob2RUb1N0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUubmFtZSYmLTEhPT1lLm5hbWUuaW5kZXhPZihcIihcIik/ZS5uYW1lOmUubmFtZStcIihcIitjKCExLGUuaW5wdXRzKS5qb2luKFwiLFwiKStcIilcIn0sX2ZsYXR0ZW5UeXBlczpjLHJhbmRvbUhleDpmdW5jdGlvbihlKXtyZXR1cm5cIjB4XCIrcyhlKS50b1N0cmluZyhcImhleFwiKX0sQk46aS5CTixpc0JOOmkuaXNCTixpc0JpZ051bWJlcjppLmlzQmlnTnVtYmVyLGlzSGV4OmkuaXNIZXgsaXNIZXhTdHJpY3Q6aS5pc0hleFN0cmljdCxzaGEzOmkuc2hhMyxzaGEzUmF3Omkuc2hhM1JhdyxrZWNjYWsyNTY6aS5zaGEzLHNvbGlkaXR5U2hhMzpvLnNvbGlkaXR5U2hhMyxzb2xpZGl0eVNoYTNSYXc6by5zb2xpZGl0eVNoYTNSYXcsZW5jb2RlUGFja2VkOm8uZW5jb2RlUGFja2VkLGlzQWRkcmVzczppLmlzQWRkcmVzcyxjaGVja0FkZHJlc3NDaGVja3N1bTppLmNoZWNrQWRkcmVzc0NoZWNrc3VtLHRvQ2hlY2tzdW1BZGRyZXNzOmZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuXCJcIjtpZighL14oMHgpP1swLTlhLWZdezQwfSQvaS50ZXN0KGUpKXRocm93IG5ldyBFcnJvcignR2l2ZW4gYWRkcmVzcyBcIicrZSsnXCIgaXMgbm90IGEgdmFsaWQgRXRoZXJldW0gYWRkcmVzcy4nKTtlPWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9eMHgvaSxcIlwiKTtmb3IodmFyIHQ9aS5zaGEzKGUpLnJlcGxhY2UoL14weC9pLFwiXCIpLHI9XCIweFwiLG49MDtuPGUubGVuZ3RoO24rKylwYXJzZUludCh0W25dLDE2KT43P3IrPWVbbl0udG9VcHBlckNhc2UoKTpyKz1lW25dO3JldHVybiByfSx0b0hleDppLnRvSGV4LHRvQk46aS50b0JOLGJ5dGVzVG9IZXg6aS5ieXRlc1RvSGV4LGhleFRvQnl0ZXM6aS5oZXhUb0J5dGVzLGhleFRvTnVtYmVyU3RyaW5nOmkuaGV4VG9OdW1iZXJTdHJpbmcsaGV4VG9OdW1iZXI6aS5oZXhUb051bWJlcix0b0RlY2ltYWw6aS5oZXhUb051bWJlcixudW1iZXJUb0hleDppLm51bWJlclRvSGV4LGZyb21EZWNpbWFsOmkubnVtYmVyVG9IZXgsaGV4VG9VdGY4OmkuaGV4VG9VdGY4LGhleFRvU3RyaW5nOmkuaGV4VG9VdGY4LHRvVXRmODppLmhleFRvVXRmOCxzdHJpcEhleFByZWZpeDppLnN0cmlwSGV4UHJlZml4LHV0ZjhUb0hleDppLnV0ZjhUb0hleCxzdHJpbmdUb0hleDppLnV0ZjhUb0hleCxmcm9tVXRmODppLnV0ZjhUb0hleCxoZXhUb0FzY2lpOmYsdG9Bc2NpaTpmLGFzY2lpVG9IZXg6dSxmcm9tQXNjaWk6dSx1bml0TWFwOm4udW5pdE1hcCx0b1dlaTpmdW5jdGlvbihlLHQpe2lmKHQ9ZCh0KSwhaS5pc0JOKGUpJiZcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcGFzcyBudW1iZXJzIGFzIHN0cmluZ3Mgb3IgQk4gb2JqZWN0cyB0byBhdm9pZCBwcmVjaXNpb24gZXJyb3JzLlwiKTtyZXR1cm4gaS5pc0JOKGUpP24udG9XZWkoZSx0KTpuLnRvV2VpKGUsdCkudG9TdHJpbmcoMTApfSxmcm9tV2VpOmZ1bmN0aW9uKGUsdCl7aWYodD1kKHQpLCFpLmlzQk4oZSkmJlwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwYXNzIG51bWJlcnMgYXMgc3RyaW5ncyBvciBCTiBvYmplY3RzIHRvIGF2b2lkIHByZWNpc2lvbiBlcnJvcnMuXCIpO3JldHVybiBpLmlzQk4oZSk/bi5mcm9tV2VpKGUsdCk6bi5mcm9tV2VpKGUsdCkudG9TdHJpbmcoMTApfSxwYWRMZWZ0OmkubGVmdFBhZCxsZWZ0UGFkOmkubGVmdFBhZCxwYWRSaWdodDppLnJpZ2h0UGFkLHJpZ2h0UGFkOmkucmlnaHRQYWQsdG9Ud29zQ29tcGxlbWVudDppLnRvVHdvc0NvbXBsZW1lbnQsaXNCbG9vbTppLmlzQmxvb20saXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbTppLmlzVXNlckV0aGVyZXVtQWRkcmVzc0luQmxvb20saXNDb250cmFjdEFkZHJlc3NJbkJsb29tOmkuaXNDb250cmFjdEFkZHJlc3NJbkJsb29tLGlzVG9waWM6aS5pc1RvcGljLGlzVG9waWNJbkJsb29tOmkuaXNUb3BpY0luQmxvb20saXNJbkJsb29tOmkuaXNJbkJsb29tLGNvbXBhcmVCbG9ja051bWJlcnM6ZnVuY3Rpb24oZSx0KXtpZihlPT10KXJldHVybiAwO2lmKFwiZ2VuZXNpc1wiIT1lJiZcImVhcmxpZXN0XCIhPWUmJjAhPWV8fFwiZ2VuZXNpc1wiIT10JiZcImVhcmxpZXN0XCIhPXQmJjAhPXQpe2lmKFwiZ2VuZXNpc1wiPT1lfHxcImVhcmxpZXN0XCI9PWUpcmV0dXJuLTE7aWYoXCJnZW5lc2lzXCI9PXR8fFwiZWFybGllc3RcIj09dClyZXR1cm4gMTtpZihcImxhdGVzdFwiPT1lKXJldHVyblwicGVuZGluZ1wiPT10Py0xOjE7aWYoXCJsYXRlc3RcIj09PXQpcmV0dXJuXCJwZW5kaW5nXCI9PWU/MTotMTtpZihcInBlbmRpbmdcIj09ZSlyZXR1cm4gMTtpZihcInBlbmRpbmdcIj09dClyZXR1cm4tMTt7bGV0IHI9bmV3IGEoZSksbj1uZXcgYSh0KTtyZXR1cm4gci5sdChuKT8tMTpyLmVxKG4pPzA6MX19cmV0dXJuIDB9LHRvTnVtYmVyOmkudG9OdW1iZXJ9fSw4NjY4OihlLHQscik9Pnt2YXIgbj1yKDM1NTApLGk9cigzMjkpLG89ZnVuY3Rpb24oZSl7dmFyIHQ9dHlwZW9mIGU7aWYoXCJzdHJpbmdcIj09PXQpcmV0dXJuIGkuaXNIZXhTdHJpY3QoZSk/bmV3IG4oZS5yZXBsYWNlKC8weC9pLFwiXCIpLDE2KTpuZXcgbihlLDEwKTtpZihcIm51bWJlclwiPT09dClyZXR1cm4gbmV3IG4oZSk7aWYoaS5pc0JpZ051bWJlcihlKSlyZXR1cm4gbmV3IG4oZS50b1N0cmluZygxMCkpO2lmKGkuaXNCTihlKSlyZXR1cm4gZTt0aHJvdyBuZXcgRXJyb3IoZStcIiBpcyBub3QgYSBudW1iZXJcIil9LHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBzLGEsYztpZihcImJ5dGVzXCI9PT0oZT0oYz1lKS5zdGFydHNXaXRoKFwiaW50W1wiKT9cImludDI1NlwiK2Muc2xpY2UoMyk6XCJpbnRcIj09PWM/XCJpbnQyNTZcIjpjLnN0YXJ0c1dpdGgoXCJ1aW50W1wiKT9cInVpbnQyNTZcIitjLnNsaWNlKDQpOlwidWludFwiPT09Yz9cInVpbnQyNTZcIjpjLnN0YXJ0c1dpdGgoXCJmaXhlZFtcIik/XCJmaXhlZDEyOHgxMjhcIitjLnNsaWNlKDUpOlwiZml4ZWRcIj09PWM/XCJmaXhlZDEyOHgxMjhcIjpjLnN0YXJ0c1dpdGgoXCJ1Zml4ZWRbXCIpP1widWZpeGVkMTI4eDEyOFwiK2Muc2xpY2UoNik6XCJ1Zml4ZWRcIj09PWM/XCJ1Zml4ZWQxMjh4MTI4XCI6Yykpe2lmKHQucmVwbGFjZSgvXjB4L2ksXCJcIikubGVuZ3RoJTIhPTApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBieXRlcyBjaGFyYWN0ZXJzIFwiK3QubGVuZ3RoKTtyZXR1cm4gdH1pZihcInN0cmluZ1wiPT09ZSlyZXR1cm4gaS51dGY4VG9IZXgodCk7aWYoXCJib29sXCI9PT1lKXJldHVybiB0P1wiMDFcIjpcIjAwXCI7aWYoZS5zdGFydHNXaXRoKFwiYWRkcmVzc1wiKSl7aWYocz1yPzY0OjQwLCFpLmlzQWRkcmVzcyh0KSl0aHJvdyBuZXcgRXJyb3IodCtcIiBpcyBub3QgYSB2YWxpZCBhZGRyZXNzLCBvciB0aGUgY2hlY2tzdW0gaXMgaW52YWxpZC5cIik7cmV0dXJuIGkubGVmdFBhZCh0LnRvTG93ZXJDYXNlKCkscyl9aWYocz1mdW5jdGlvbihlKXt2YXIgdD0vXlxcRCsoXFxkKykuKiQvLmV4ZWMoZSk7cmV0dXJuIHQ/cGFyc2VJbnQodFsxXSwxMCk6bnVsbH0oZSksZS5zdGFydHNXaXRoKFwiYnl0ZXNcIikpe2lmKCFzKXRocm93IG5ldyBFcnJvcihcImJ5dGVzW10gbm90IHlldCBzdXBwb3J0ZWQgaW4gc29saWRpdHlcIik7aWYociYmKHM9MzIpLHM8MXx8cz4zMnx8czx0LnJlcGxhY2UoL14weC9pLFwiXCIpLmxlbmd0aC8yKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYnl0ZXNcIitzK1wiIGZvciBcIit0KTtyZXR1cm4gaS5yaWdodFBhZCh0LDIqcyl9aWYoZS5zdGFydHNXaXRoKFwidWludFwiKSl7aWYocyU4fHxzPDh8fHM+MjU2KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdWludFwiK3MrXCIgc2l6ZVwiKTtpZigoYT1vKHQpKS5iaXRMZW5ndGgoKT5zKXRocm93IG5ldyBFcnJvcihcIlN1cHBsaWVkIHVpbnQgZXhjZWVkcyB3aWR0aDogXCIrcytcIiB2cyBcIithLmJpdExlbmd0aCgpKTtpZihhLmx0KG5ldyBuKDApKSl0aHJvdyBuZXcgRXJyb3IoXCJTdXBwbGllZCB1aW50IFwiK2EudG9TdHJpbmcoKStcIiBpcyBuZWdhdGl2ZVwiKTtyZXR1cm4gcz9pLmxlZnRQYWQoYS50b1N0cmluZyhcImhleFwiKSxzLzgqMik6YX1pZihlLnN0YXJ0c1dpdGgoXCJpbnRcIikpe2lmKHMlOHx8czw4fHxzPjI1Nil0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGludFwiK3MrXCIgc2l6ZVwiKTtpZigoYT1vKHQpKS5iaXRMZW5ndGgoKT5zKXRocm93IG5ldyBFcnJvcihcIlN1cHBsaWVkIGludCBleGNlZWRzIHdpZHRoOiBcIitzK1wiIHZzIFwiK2EuYml0TGVuZ3RoKCkpO3JldHVybiBhLmx0KG5ldyBuKDApKT9hLnRvVHdvcyhzKS50b1N0cmluZyhcImhleFwiKTpzP2kubGVmdFBhZChhLnRvU3RyaW5nKFwiaGV4XCIpLHMvOCoyKTphfXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIG9yIGludmFsaWQgdHlwZTogXCIrZSl9LGE9ZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoXCJBdXRvZGV0ZWN0aW9uIG9mIGFycmF5IHR5cGVzIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO3ZhciB0LHIsbz1cIlwiO2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiYoZS5oYXNPd25Qcm9wZXJ0eShcInZcIil8fGUuaGFzT3duUHJvcGVydHkoXCJ0XCIpfHxlLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGUuaGFzT3duUHJvcGVydHkoXCJ0eXBlXCIpKT8odD1lLmhhc093blByb3BlcnR5KFwidFwiKT9lLnQ6ZS50eXBlLG89ZS5oYXNPd25Qcm9wZXJ0eShcInZcIik/ZS52OmUudmFsdWUpOih0PWkudG9IZXgoZSwhMCksbz1pLnRvSGV4KGUpLHQuc3RhcnRzV2l0aChcImludFwiKXx8dC5zdGFydHNXaXRoKFwidWludFwiKXx8KHQ9XCJieXRlc1wiKSksIXQuc3RhcnRzV2l0aChcImludFwiKSYmIXQuc3RhcnRzV2l0aChcInVpbnRcIil8fFwic3RyaW5nXCIhPXR5cGVvZiBvfHwvXigtKT8weC9pLnRlc3Qobyl8fChvPW5ldyBuKG8pKSxBcnJheS5pc0FycmF5KG8pKXtpZihyPWZ1bmN0aW9uKGUpe3ZhciB0PS9eXFxEK1xcZCpcXFsoXFxkKylcXF0kLy5leGVjKGUpO3JldHVybiB0P3BhcnNlSW50KHRbMV0sMTApOm51bGx9KHQpLHImJm8ubGVuZ3RoIT09cil0aHJvdyBuZXcgRXJyb3IodCtcIiBpcyBub3QgbWF0Y2hpbmcgdGhlIGdpdmVuIGFycmF5IFwiK0pTT04uc3RyaW5naWZ5KG8pKTtyPW8ubGVuZ3RofXJldHVybiBBcnJheS5pc0FycmF5KG8pP28ubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gcyh0LGUscikudG9TdHJpbmcoXCJoZXhcIikucmVwbGFjZShcIjB4XCIsXCJcIil9KSkuam9pbihcIlwiKTpzKHQsbyxyKS50b1N0cmluZyhcImhleFwiKS5yZXBsYWNlKFwiMHhcIixcIlwiKX07ZS5leHBvcnRzPXtzb2xpZGl0eVNoYTM6ZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLHQ9ZS5tYXAoYSk7cmV0dXJuIGkuc2hhMyhcIjB4XCIrdC5qb2luKFwiXCIpKX0sc29saWRpdHlTaGEzUmF3OmZ1bmN0aW9uKCl7cmV0dXJuIGkuc2hhM1JhdyhcIjB4XCIrQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5tYXAoYSkuam9pbihcIlwiKSl9LGVuY29kZVBhY2tlZDpmdW5jdGlvbigpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksdD1lLm1hcChhKTtyZXR1cm5cIjB4XCIrdC5qb2luKFwiXCIpLnRvTG93ZXJDYXNlKCl9fX0sMzI5OihlLHQscik9Pnt2YXIgbj1yKDg3NjQpLkJ1ZmZlcixpPXIoMzU1MCksbz1yKDMyMDYpLHM9cig3NDU4KSxhPXIoMjc1MSksYz1yKDY4NzcpLGY9ZnVuY3Rpb24oZSl7cmV0dXJuIGkuaXNCTihlKX0sdT1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5jb25zdHJ1Y3RvciYmXCJCaWdOdW1iZXJcIj09PWUuY29uc3RydWN0b3IubmFtZX0sZD1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIG8uYXBwbHkobnVsbCxhcmd1bWVudHMpfWNhdGNoKHQpe3Rocm93IG5ldyBFcnJvcih0KycgR2l2ZW4gdmFsdWU6IFwiJytlKydcIicpfX0saD1mdW5jdGlvbihlKXtyZXR1cm4hIS9eKDB4KT9bMC05YS1mXXs0MH0kL2kudGVzdChlKSYmKCEoIS9eKDB4fDBYKT9bMC05YS1mXXs0MH0kLy50ZXN0KGUpJiYhL14oMHh8MFgpP1swLTlBLUZdezQwfSQvLnRlc3QoZSkpfHxsKGUpKX0sbD1mdW5jdGlvbihlKXtlPWUucmVwbGFjZSgvXjB4L2ksXCJcIik7Zm9yKHZhciB0PV8oZS50b0xvd2VyQ2FzZSgpKS5yZXBsYWNlKC9eMHgvaSxcIlwiKSxyPTA7cjw0MDtyKyspaWYocGFyc2VJbnQodFtyXSwxNik+NyYmZVtyXS50b1VwcGVyQ2FzZSgpIT09ZVtyXXx8cGFyc2VJbnQodFtyXSwxNik8PTcmJmVbcl0udG9Mb3dlckNhc2UoKSE9PWVbcl0pcmV0dXJuITE7cmV0dXJuITB9LHA9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtlPShlPShlPShlPShlPXMuZW5jb2RlKGUpKS5yZXBsYWNlKC9eKD86XFx1MDAwMCkqLyxcIlwiKSkuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikpLnJlcGxhY2UoL14oPzpcXHUwMDAwKSovLFwiXCIpKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZS5jaGFyQ29kZUF0KHIpLnRvU3RyaW5nKDE2KTt0Kz1uLmxlbmd0aDwyP1wiMFwiK246bn1yZXR1cm5cIjB4XCIrdH0sYj1mdW5jdGlvbihlKXtpZighZSlyZXR1cm4gZTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmIW0oZSkpdGhyb3cgbmV3IEVycm9yKCdHaXZlbiB2YWx1ZSBcIicrZSsnXCIgaXMgbm90IGEgdmFsaWQgaGV4IHN0cmluZy4nKTtyZXR1cm4gZChlKS50b051bWJlcigpfSx5PWZ1bmN0aW9uKGUpe2lmKG51bGw9PWUpcmV0dXJuIGU7aWYoIWlzRmluaXRlKGUpJiYhbShlKSl0aHJvdyBuZXcgRXJyb3IoJ0dpdmVuIGlucHV0IFwiJytlKydcIiBpcyBub3QgYSBudW1iZXIuJyk7dmFyIHQ9ZChlKSxyPXQudG9TdHJpbmcoMTYpO3JldHVybiB0Lmx0KG5ldyBpKDApKT9cIi0weFwiK3Iuc2xpY2UoMSk6XCIweFwiK3J9LGc9ZnVuY3Rpb24oZSx0KXtpZihoKGUpKXJldHVybiB0P1wiYWRkcmVzc1wiOlwiMHhcIitlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXjB4L2ksXCJcIik7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBlKXJldHVybiB0P1wiYm9vbFwiOmU/XCIweDAxXCI6XCIweDAwXCI7aWYobi5pc0J1ZmZlcihlKSlyZXR1cm5cIjB4XCIrZS50b1N0cmluZyhcImhleFwiKTtpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmIXUoZSkmJiFmKGUpKXJldHVybiB0P1wic3RyaW5nXCI6cChKU09OLnN0cmluZ2lmeShlKSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKDA9PT1lLmluZGV4T2YoXCItMHhcIil8fDA9PT1lLmluZGV4T2YoXCItMFhcIikpcmV0dXJuIHQ/XCJpbnQyNTZcIjp5KGUpO2lmKDA9PT1lLmluZGV4T2YoXCIweFwiKXx8MD09PWUuaW5kZXhPZihcIjBYXCIpKXJldHVybiB0P1wiYnl0ZXNcIjplO2lmKCFpc0Zpbml0ZShlKSlyZXR1cm4gdD9cInN0cmluZ1wiOnAoZSl9cmV0dXJuIHQ/ZTwwP1wiaW50MjU2XCI6XCJ1aW50MjU2XCI6eShlKX0sbT1mdW5jdGlvbihlKXtyZXR1cm4oXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKSYmL14oLSk/MHhbMC05YS1mXSokL2kudGVzdChlKX0sdj1mdW5jdGlvbihlKXtyZXR1cm4oXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKSYmL14oLTB4fDB4KT9bMC05YS1mXSokL2kudGVzdChlKX0sdz1cIjB4YzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MFwiLF89ZnVuY3Rpb24oZSl7ZihlKSYmKGU9ZS50b1N0cmluZygpKSxtKGUpJiYvXjB4L2kudGVzdChlLnRvU3RyaW5nKCkpP2U9YS50b0J1ZmZlcihlKTpcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9bi5mcm9tKGUsXCJ1dGYtOFwiKSk7dmFyIHQ9YS5idWZmZXJUb0hleChhLmtlY2NhazI1NihlKSk7cmV0dXJuIHQ9PT13P251bGw6dH07Xy5fSGFzaD1hLmtlY2NhazI1Njt2YXIgUz1mdW5jdGlvbihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmZS5pbmNsdWRlcyhcIjB4XCIpKXtjb25zdFt0LHJdPWUudG9Mb2NhbGVMb3dlckNhc2UoKS5zdGFydHNXaXRoKFwiLVwiKT9bXCItXCIsZS5zbGljZSgzKV06W1wiXCIsZS5zbGljZSgyKV07cmV0dXJuIG5ldyBpKHQrciwxNil9cmV0dXJuIG5ldyBpKGUpfTtPYmplY3Quc2V0UHJvdG90eXBlT2YoUyxpKSxPYmplY3Quc2V0UHJvdG90eXBlT2YoUy5wcm90b3R5cGUsaS5wcm90b3R5cGUpLGUuZXhwb3J0cz17Qk46Uyxpc0JOOmYsaXNCaWdOdW1iZXI6dSx0b0JOOmQsaXNBZGRyZXNzOmgsaXNCbG9vbTpmdW5jdGlvbihlKXtyZXR1cm4gYy5pc0Jsb29tKGUpfSxpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGMuaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbShlLHQpfSxpc0NvbnRyYWN0QWRkcmVzc0luQmxvb206ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYy5pc0NvbnRyYWN0QWRkcmVzc0luQmxvb20oZSx0KX0saXNUb3BpYzpmdW5jdGlvbihlKXtyZXR1cm4gYy5pc1RvcGljKGUpfSxpc1RvcGljSW5CbG9vbTpmdW5jdGlvbihlLHQpe3JldHVybiBjLmlzVG9waWNJbkJsb29tKGUsdCl9LGlzSW5CbG9vbTpmdW5jdGlvbihlLHQpe3JldHVybiBjLmlzSW5CbG9vbShlLHQpfSxjaGVja0FkZHJlc3NDaGVja3N1bTpsLHV0ZjhUb0hleDpwLGhleFRvVXRmODpmdW5jdGlvbihlKXtpZighbShlKSl0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwYXJhbWV0ZXIgXCInK2UrJ1wiIG11c3QgYmUgYSB2YWxpZCBIRVggc3RyaW5nLicpO2Zvcih2YXIgdD1cIlwiLHI9MCxuPShlPShlPShlPShlPShlPWUucmVwbGFjZSgvXjB4L2ksXCJcIikpLnJlcGxhY2UoL14oPzowMCkqLyxcIlwiKSkuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikpLnJlcGxhY2UoL14oPzowMCkqLyxcIlwiKSkuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikpLmxlbmd0aCxpPTA7aTxuO2krPTIpcj1wYXJzZUludChlLnNsaWNlKGksaSsyKSwxNiksdCs9U3RyaW5nLmZyb21DaGFyQ29kZShyKTtyZXR1cm4gcy5kZWNvZGUodCl9LGhleFRvTnVtYmVyOmIsaGV4VG9OdW1iZXJTdHJpbmc6ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiFtKGUpKXRocm93IG5ldyBFcnJvcignR2l2ZW4gdmFsdWUgXCInK2UrJ1wiIGlzIG5vdCBhIHZhbGlkIGhleCBzdHJpbmcuJyk7cmV0dXJuIGQoZSkudG9TdHJpbmcoMTApfSxudW1iZXJUb0hleDp5LHRvSGV4OmcsaGV4VG9CeXRlczpmdW5jdGlvbihlKXtpZihlPWUudG9TdHJpbmcoMTYpLCFtKGUpKXRocm93IG5ldyBFcnJvcignR2l2ZW4gdmFsdWUgXCInK2UrJ1wiIGlzIG5vdCBhIHZhbGlkIGhleCBzdHJpbmcuJyk7ZT1lLnJlcGxhY2UoL14weC9pLFwiXCIpO2Zvcih2YXIgdD1bXSxyPTA7cjxlLmxlbmd0aDtyKz0yKXQucHVzaChwYXJzZUludChlLnNsaWNlKHIscisyKSwxNikpO3JldHVybiB0fSxieXRlc1RvSGV4OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTA7cjxlLmxlbmd0aDtyKyspdC5wdXNoKChlW3JdPj4+NCkudG9TdHJpbmcoMTYpKSx0LnB1c2goKDE1JmVbcl0pLnRvU3RyaW5nKDE2KSk7cmV0dXJuXCIweFwiK3Quam9pbihcIlwiKX0saXNIZXg6dixpc0hleFN0cmljdDptLHN0cmlwSGV4UHJlZml4OmZ1bmN0aW9uKGUpe3JldHVybiAwIT09ZSYmdihlKT9lLnJlcGxhY2UoL14oLSk/MHgvaSxcIiQxXCIpOmV9LGxlZnRQYWQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPS9eMHgvaS50ZXN0KGUpfHxcIm51bWJlclwiPT10eXBlb2YgZSxpPXQtKGU9ZS50b1N0cmluZygxNikucmVwbGFjZSgvXjB4L2ksXCJcIikpLmxlbmd0aCsxPj0wP3QtZS5sZW5ndGgrMTowO3JldHVybihuP1wiMHhcIjpcIlwiKStuZXcgQXJyYXkoaSkuam9pbihyfHxcIjBcIikrZX0scmlnaHRQYWQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPS9eMHgvaS50ZXN0KGUpfHxcIm51bWJlclwiPT10eXBlb2YgZSxpPXQtKGU9ZS50b1N0cmluZygxNikucmVwbGFjZSgvXjB4L2ksXCJcIikpLmxlbmd0aCsxPj0wP3QtZS5sZW5ndGgrMTowO3JldHVybihuP1wiMHhcIjpcIlwiKStlK25ldyBBcnJheShpKS5qb2luKHJ8fFwiMFwiKX0sdG9Ud29zQ29tcGxlbWVudDpmdW5jdGlvbihlKXtyZXR1cm5cIjB4XCIrZChlKS50b1R3b3MoMjU2KS50b1N0cmluZygxNiw2NCl9LHNoYTM6XyxzaGEzUmF3OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09KGU9XyhlKSk/dzplfSx0b051bWJlcjpmdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZT9lOmIoZyhlKSl9fX0sNjQzMDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0MDI5KSxpPXIoMzA4Myksbz1yKDE5MjQpLHM9byhcIk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcIiksYT1yKDY0MTApKCksYz1cInVuZGVmaW5lZFwiPT10eXBlb2YgZ2xvYmFsVGhpcz9yLmc6Z2xvYmFsVGhpcyxmPWkoKSx1PW8oXCJTdHJpbmcucHJvdG90eXBlLnNsaWNlXCIpLGQ9e30saD1yKDg4MiksbD1PYmplY3QuZ2V0UHJvdG90eXBlT2Y7YSYmaCYmbCYmbihmLChmdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBjW2VdKXt2YXIgdD1uZXcgY1tlXTtpZihTeW1ib2wudG9TdHJpbmdUYWcgaW4gdCl7dmFyIHI9bCh0KSxuPWgocixTeW1ib2wudG9TdHJpbmdUYWcpO2lmKCFuKXt2YXIgaT1sKHIpO249aChpLFN5bWJvbC50b1N0cmluZ1RhZyl9ZFtlXT1uLmdldH19fSkpO3ZhciBwPXIoNTY5Mik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiEhcChlKSYmKGEmJlN5bWJvbC50b1N0cmluZ1RhZyBpbiBlP2Z1bmN0aW9uKGUpe3ZhciB0PSExO3JldHVybiBuKGQsKGZ1bmN0aW9uKHIsbil7aWYoIXQpdHJ5e3ZhciBpPXIuY2FsbChlKTtpPT09biYmKHQ9aSl9Y2F0Y2goZSl7fX0pKSx0fShlKTp1KHMoZSksOCwtMSkpfX0sMjQ3OTplPT57ZS5leHBvcnRzPWZ1bmN0aW9uIGUodCxyKXtpZih0JiZyKXJldHVybiBlKHQpKHIpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5lZWQgd3JhcHBlciBmdW5jdGlvblwiKTtyZXR1cm4gT2JqZWN0LmtleXModCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7bltlXT10W2VdfSkpLG47ZnVuY3Rpb24gbigpe2Zvcih2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7cisrKWVbcl09YXJndW1lbnRzW3JdO3ZhciBuPXQuYXBwbHkodGhpcyxlKSxpPWVbZS5sZW5ndGgtMV07cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmbiE9PWkmJk9iamVjdC5rZXlzKGkpLmZvckVhY2goKGZ1bmN0aW9uKGUpe25bZV09aVtlXX0pKSxufX19LDgzNTU6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgcixuPXRoaXMmJnRoaXMuX19leHRlbmRzfHwocj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXIoZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihuLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgbil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG51bGwhPT1lJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gbih0LGUpLHR9KEVycm9yKTt0LlNlY3VyaXR5RXJyb3I9aTt2YXIgbz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG51bGwhPT1lJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gbih0LGUpLHR9KEVycm9yKTt0LkludmFsaWRTdGF0ZUVycm9yPW87dmFyIHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBudWxsIT09ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIG4odCxlKSx0fShFcnJvcik7dC5OZXR3b3JrRXJyb3I9czt2YXIgYT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG51bGwhPT1lJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gbih0LGUpLHR9KEVycm9yKTt0LlN5bnRheEVycm9yPWF9LDk1MzY6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUpe2Zvcih2YXIgciBpbiBlKXQuaGFzT3duUHJvcGVydHkocil8fCh0W3JdPWVbcl0pfShyKDY3NjMpKTt2YXIgbj1yKDMzNSk7dC5YTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0PW4uWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldH0sNzI5NjooZSx0KT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuUHJvZ3Jlc3NFdmVudD1mdW5jdGlvbihlKXt0aGlzLnR5cGU9ZSx0aGlzLmJ1YmJsZXM9ITEsdGhpcy5jYW5jZWxhYmxlPSExLHRoaXMubG9hZGVkPTAsdGhpcy5sZW5ndGhDb21wdXRhYmxlPSExLHRoaXMudG90YWw9MH19LDMzNTooZSx0KT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3RoaXMubGlzdGVuZXJzPXt9fXJldHVybiBlLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7ZT1lLnRvTG93ZXJDYXNlKCksdGhpcy5saXN0ZW5lcnNbZV09dGhpcy5saXN0ZW5lcnNbZV18fFtdLHRoaXMubGlzdGVuZXJzW2VdLnB1c2godC5oYW5kbGVFdmVudHx8dCl9LGUucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtpZihlPWUudG9Mb3dlckNhc2UoKSx0aGlzLmxpc3RlbmVyc1tlXSl7dmFyIHI9dGhpcy5saXN0ZW5lcnNbZV0uaW5kZXhPZih0LmhhbmRsZUV2ZW50fHx0KTtyPDB8fHRoaXMubGlzdGVuZXJzW2VdLnNwbGljZShyLDEpfX0sZS5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihlKXt2YXIgdD1lLnR5cGUudG9Mb3dlckNhc2UoKTtpZihlLnRhcmdldD10aGlzLHRoaXMubGlzdGVuZXJzW3RdKWZvcih2YXIgcj0wLG49dGhpcy5saXN0ZW5lcnNbdF07cjxuLmxlbmd0aDtyKyspbltyXS5jYWxsKHRoaXMsZSk7dmFyIGk9dGhpc1tcIm9uXCIrdF07cmV0dXJuIGkmJmkuY2FsbCh0aGlzLGUpLCEwfSxlfSgpO3QuWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldD1yfSw3OTgzOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXIoODc2NCkuQnVmZmVyLG89dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgdD1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHQuX2NvbnRlbnRUeXBlPW51bGwsdC5fYm9keT1udWxsLHQuX3Jlc2V0KCksdH1yZXR1cm4gbyh0LGUpLHQucHJvdG90eXBlLl9yZXNldD1mdW5jdGlvbigpe3RoaXMuX2NvbnRlbnRUeXBlPW51bGwsdGhpcy5fYm9keT1udWxsfSx0LnByb3RvdHlwZS5fc2V0RGF0YT1mdW5jdGlvbihlKXtpZihudWxsIT1lKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBlKTAhPT1lLmxlbmd0aCYmKHRoaXMuX2NvbnRlbnRUeXBlPVwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpLHRoaXMuX2JvZHk9bmV3IGkoZSxcInV0Zi04XCIpO2Vsc2UgaWYoaS5pc0J1ZmZlcihlKSl0aGlzLl9ib2R5PWU7ZWxzZSBpZihlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpe2Zvcih2YXIgdD1uZXcgaShlLmJ5dGVMZW5ndGgpLHI9bmV3IFVpbnQ4QXJyYXkoZSksbj0wO248ZS5ieXRlTGVuZ3RoO24rKyl0W25dPXJbbl07dGhpcy5fYm9keT10fWVsc2V7aWYoIShlLmJ1ZmZlciYmZS5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgc2VuZCgpIGRhdGEgXCIrZSk7dD1uZXcgaShlLmJ5dGVMZW5ndGgpO3ZhciBvPWUuYnl0ZU9mZnNldDtmb3Iocj1uZXcgVWludDhBcnJheShlLmJ1ZmZlciksbj0wO248ZS5ieXRlTGVuZ3RoO24rKyl0W25dPXJbbitvXTt0aGlzLl9ib2R5PXR9fSx0LnByb3RvdHlwZS5fZmluYWxpemVIZWFkZXJzPWZ1bmN0aW9uKGUsdCl7dGhpcy5fY29udGVudFR5cGUmJiF0W1wiY29udGVudC10eXBlXCJdJiYoZVtcIkNvbnRlbnQtVHlwZVwiXT10aGlzLl9jb250ZW50VHlwZSksdGhpcy5fYm9keSYmKGVbXCJDb250ZW50LUxlbmd0aFwiXT10aGlzLl9ib2R5Lmxlbmd0aC50b1N0cmluZygpKX0sdC5wcm90b3R5cGUuX3N0YXJ0VXBsb2FkPWZ1bmN0aW9uKGUpe3RoaXMuX2JvZHkmJmUud3JpdGUodGhpcy5fYm9keSksZS5lbmQoKX0sdH0ocigzMzUpLlhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQpO3QuWE1MSHR0cFJlcXVlc3RVcGxvYWQ9c30sNjc2MzpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT1yKDQxNTUpLG89cig4NzY0KS5CdWZmZXIscz10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSksYT10aGlzJiZ0aGlzLl9fYXNzaWdufHxPYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQscj0xLG49YXJndW1lbnRzLmxlbmd0aDtyPG47cisrKWZvcih2YXIgaSBpbiB0PWFyZ3VtZW50c1tyXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxpKSYmKGVbaV09dFtpXSk7cmV0dXJuIGV9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBjPXIoODUwMSksZj1yKDkyNjcpLHU9cig3NDM1KSxkPXIoODU3NSksaD1yKDcyOTYpLGw9cig4MzU1KSxwPXIoMzM1KSxiPXIoNzk4MykseT1yKDc4NjYpLGc9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChyKXt2b2lkIDA9PT1yJiYocj17fSk7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLlVOU0VOVD10LlVOU0VOVCxuLk9QRU5FRD10Lk9QRU5FRCxuLkhFQURFUlNfUkVDRUlWRUQ9dC5IRUFERVJTX1JFQ0VJVkVELG4uTE9BRElORz10LkxPQURJTkcsbi5ET05FPXQuRE9ORSxuLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLG4ucmVhZHlTdGF0ZT10LlVOU0VOVCxuLnJlc3BvbnNlPW51bGwsbi5yZXNwb25zZVRleHQ9XCJcIixuLnJlc3BvbnNlVHlwZT1cIlwiLG4uc3RhdHVzPTAsbi5zdGF0dXNUZXh0PVwiXCIsbi50aW1lb3V0PTAsbi51cGxvYWQ9bmV3IGIuWE1MSHR0cFJlcXVlc3RVcGxvYWQsbi5yZXNwb25zZVVybD1cIlwiLG4ud2l0aENyZWRlbnRpYWxzPSExLG4uX21ldGhvZD1udWxsLG4uX3VybD1udWxsLG4uX3N5bmM9ITEsbi5faGVhZGVycz17fSxuLl9sb3dlcmVkSGVhZGVycz17fSxuLl9taW1lT3ZlcnJpZGU9bnVsbCxuLl9yZXF1ZXN0PW51bGwsbi5fcmVzcG9uc2U9bnVsbCxuLl9yZXNwb25zZVBhcnRzPW51bGwsbi5fcmVzcG9uc2VIZWFkZXJzPW51bGwsbi5fYWJvcnRpbmc9bnVsbCxuLl9lcnJvcj1udWxsLG4uX2xvYWRlZEJ5dGVzPTAsbi5fdG90YWxCeXRlcz0wLG4uX2xlbmd0aENvbXB1dGFibGU9ITEsbi5fcmVzdHJpY3RlZE1ldGhvZHM9e0NPTk5FQ1Q6ITAsVFJBQ0U6ITAsVFJBQ0s6ITB9LG4uX3Jlc3RyaWN0ZWRIZWFkZXJzPXtcImFjY2VwdC1jaGFyc2V0XCI6ITAsXCJhY2NlcHQtZW5jb2RpbmdcIjohMCxcImFjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVyc1wiOiEwLFwiYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1tZXRob2RcIjohMCxjb25uZWN0aW9uOiEwLFwiY29udGVudC1sZW5ndGhcIjohMCxjb29raWU6ITAsY29va2llMjohMCxkYXRlOiEwLGRudDohMCxleHBlY3Q6ITAsaG9zdDohMCxcImtlZXAtYWxpdmVcIjohMCxvcmlnaW46ITAscmVmZXJlcjohMCx0ZTohMCx0cmFpbGVyOiEwLFwidHJhbnNmZXItZW5jb2RpbmdcIjohMCx1cGdyYWRlOiEwLFwidXNlci1hZ2VudFwiOiEwLHZpYTohMH0sbi5fcHJpdmF0ZUhlYWRlcnM9e1wic2V0LWNvb2tpZVwiOiEwLFwic2V0LWNvb2tpZTJcIjohMH0sbi5fdXNlckFnZW50PVwiTW96aWxsYS81LjAgKFwiK3UudHlwZSgpK1wiIFwiK3UuYXJjaCgpK1wiKSBub2RlLmpzL1wiK2kudmVyc2lvbnMubm9kZStcIiB2OC9cIitpLnZlcnNpb25zLnY4LG4uX2Fub255bW91cz1yLmFub258fCExLG59cmV0dXJuIHModCxlKSx0LnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKGUscixuLGksbyl7aWYodm9pZCAwPT09biYmKG49ITApLGU9ZS50b1VwcGVyQ2FzZSgpLHRoaXMuX3Jlc3RyaWN0ZWRNZXRob2RzW2VdKXRocm93IG5ldyB0LlNlY3VyaXR5RXJyb3IoXCJIVFRQIG1ldGhvZCBcIitlK1wiIGlzIG5vdCBhbGxvd2VkIGluIFhIUlwiKTt2YXIgcz10aGlzLl9wYXJzZVVybChyLGksbyk7dGhpcy5yZWFkeVN0YXRlPT09dC5IRUFERVJTX1JFQ0VJVkVEfHwodGhpcy5yZWFkeVN0YXRlLHQuTE9BRElORyksdGhpcy5fbWV0aG9kPWUsdGhpcy5fdXJsPXMsdGhpcy5fc3luYz0hbix0aGlzLl9oZWFkZXJzPXt9LHRoaXMuX2xvd2VyZWRIZWFkZXJzPXt9LHRoaXMuX21pbWVPdmVycmlkZT1udWxsLHRoaXMuX3NldFJlYWR5U3RhdGUodC5PUEVORUQpLHRoaXMuX3JlcXVlc3Q9bnVsbCx0aGlzLl9yZXNwb25zZT1udWxsLHRoaXMuc3RhdHVzPTAsdGhpcy5zdGF0dXNUZXh0PVwiXCIsdGhpcy5fcmVzcG9uc2VQYXJ0cz1bXSx0aGlzLl9yZXNwb25zZUhlYWRlcnM9bnVsbCx0aGlzLl9sb2FkZWRCeXRlcz0wLHRoaXMuX3RvdGFsQnl0ZXM9MCx0aGlzLl9sZW5ndGhDb21wdXRhYmxlPSExfSx0LnByb3RvdHlwZS5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKGUscil7aWYodGhpcy5yZWFkeVN0YXRlIT09dC5PUEVORUQpdGhyb3cgbmV3IHQuSW52YWxpZFN0YXRlRXJyb3IoXCJYSFIgcmVhZHlTdGF0ZSBtdXN0IGJlIE9QRU5FRFwiKTt2YXIgbj1lLnRvTG93ZXJDYXNlKCk7dGhpcy5fcmVzdHJpY3RlZEhlYWRlcnNbbl18fC9ec2VjLS8udGVzdChuKXx8L15wcm94eS0vLnRlc3Qobik/Y29uc29sZS53YXJuKCdSZWZ1c2VkIHRvIHNldCB1bnNhZmUgaGVhZGVyIFwiJytlKydcIicpOihyPXIudG9TdHJpbmcoKSxudWxsIT10aGlzLl9sb3dlcmVkSGVhZGVyc1tuXT8oZT10aGlzLl9sb3dlcmVkSGVhZGVyc1tuXSx0aGlzLl9oZWFkZXJzW2VdPXRoaXMuX2hlYWRlcnNbZV0rXCIsIFwiK3IpOih0aGlzLl9sb3dlcmVkSGVhZGVyc1tuXT1lLHRoaXMuX2hlYWRlcnNbZV09cikpfSx0LnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKGUpe2lmKHRoaXMucmVhZHlTdGF0ZSE9PXQuT1BFTkVEKXRocm93IG5ldyB0LkludmFsaWRTdGF0ZUVycm9yKFwiWEhSIHJlYWR5U3RhdGUgbXVzdCBiZSBPUEVORURcIik7aWYodGhpcy5fcmVxdWVzdCl0aHJvdyBuZXcgdC5JbnZhbGlkU3RhdGVFcnJvcihcInNlbmQoKSBhbHJlYWR5IGNhbGxlZFwiKTtzd2l0Y2godGhpcy5fdXJsLnByb3RvY29sKXtjYXNlXCJmaWxlOlwiOnJldHVybiB0aGlzLl9zZW5kRmlsZShlKTtjYXNlXCJodHRwOlwiOmNhc2VcImh0dHBzOlwiOnJldHVybiB0aGlzLl9zZW5kSHR0cChlKTtkZWZhdWx0OnRocm93IG5ldyB0Lk5ldHdvcmtFcnJvcihcIlVuc3VwcG9ydGVkIHByb3RvY29sIFwiK3RoaXMuX3VybC5wcm90b2NvbCl9fSx0LnByb3RvdHlwZS5hYm9ydD1mdW5jdGlvbigpe251bGwhPXRoaXMuX3JlcXVlc3QmJih0aGlzLl9yZXF1ZXN0LmFib3J0KCksdGhpcy5fc2V0RXJyb3IoKSx0aGlzLl9kaXNwYXRjaFByb2dyZXNzKFwiYWJvcnRcIiksdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcyhcImxvYWRlbmRcIikpfSx0LnByb3RvdHlwZS5nZXRSZXNwb25zZUhlYWRlcj1mdW5jdGlvbihlKXtpZihudWxsPT10aGlzLl9yZXNwb25zZUhlYWRlcnN8fG51bGw9PWUpcmV0dXJuIG51bGw7dmFyIHQ9ZS50b0xvd2VyQ2FzZSgpO3JldHVybiB0aGlzLl9yZXNwb25zZUhlYWRlcnMuaGFzT3duUHJvcGVydHkodCk/dGhpcy5fcmVzcG9uc2VIZWFkZXJzW2UudG9Mb3dlckNhc2UoKV06bnVsbH0sdC5wcm90b3R5cGUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gbnVsbD09dGhpcy5fcmVzcG9uc2VIZWFkZXJzP1wiXCI6T2JqZWN0LmtleXModGhpcy5fcmVzcG9uc2VIZWFkZXJzKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0K1wiOiBcIitlLl9yZXNwb25zZUhlYWRlcnNbdF19KSkuam9pbihcIlxcclxcblwiKX0sdC5wcm90b3R5cGUub3ZlcnJpZGVNaW1lVHlwZT1mdW5jdGlvbihlKXtpZih0aGlzLnJlYWR5U3RhdGU9PT10LkxPQURJTkd8fHRoaXMucmVhZHlTdGF0ZT09PXQuRE9ORSl0aHJvdyBuZXcgdC5JbnZhbGlkU3RhdGVFcnJvcihcIm92ZXJyaWRlTWltZVR5cGUoKSBub3QgYWxsb3dlZCBpbiBMT0FESU5HIG9yIERPTkVcIik7dGhpcy5fbWltZU92ZXJyaWRlPWUudG9Mb3dlckNhc2UoKX0sdC5wcm90b3R5cGUubm9kZWpzU2V0PWZ1bmN0aW9uKGUpe2lmKHRoaXMubm9kZWpzSHR0cEFnZW50PWUuaHR0cEFnZW50fHx0aGlzLm5vZGVqc0h0dHBBZ2VudCx0aGlzLm5vZGVqc0h0dHBzQWdlbnQ9ZS5odHRwc0FnZW50fHx0aGlzLm5vZGVqc0h0dHBzQWdlbnQsZS5oYXNPd25Qcm9wZXJ0eShcImJhc2VVcmxcIikpe2lmKG51bGwhPWUuYmFzZVVybCYmIWQucGFyc2UoZS5iYXNlVXJsLCExLCEwKS5wcm90b2NvbCl0aHJvdyBuZXcgdC5TeW50YXhFcnJvcihcImJhc2VVcmwgbXVzdCBiZSBhbiBhYnNvbHV0ZSBVUkxcIik7dGhpcy5ub2RlanNCYXNlVXJsPWUuYmFzZVVybH19LHQubm9kZWpzU2V0PWZ1bmN0aW9uKGUpe3QucHJvdG90eXBlLm5vZGVqc1NldChlKX0sdC5wcm90b3R5cGUuX3NldFJlYWR5U3RhdGU9ZnVuY3Rpb24oZSl7dGhpcy5yZWFkeVN0YXRlPWUsdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBoLlByb2dyZXNzRXZlbnQoXCJyZWFkeXN0YXRlY2hhbmdlXCIpKX0sdC5wcm90b3R5cGUuX3NlbmRGaWxlPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlByb3RvY29sIGZpbGU6IG5vdCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuX3NlbmRIdHRwPWZ1bmN0aW9uKGUpe2lmKHRoaXMuX3N5bmMpdGhyb3cgbmV3IEVycm9yKFwiU3luY2hyb25vdXMgWEhSIHByb2Nlc3Npbmcgbm90IGltcGxlbWVudGVkXCIpOyFlfHxcIkdFVFwiIT09dGhpcy5fbWV0aG9kJiZcIkhFQURcIiE9PXRoaXMuX21ldGhvZD9lPWV8fFwiXCI6KGNvbnNvbGUud2FybihcIkRpc2NhcmRpbmcgZW50aXR5IGJvZHkgZm9yIFwiK3RoaXMuX21ldGhvZCtcIiByZXF1ZXN0c1wiKSxlPW51bGwpLHRoaXMudXBsb2FkLl9zZXREYXRhKGUpLHRoaXMuX2ZpbmFsaXplSGVhZGVycygpLHRoaXMuX3NlbmRIeHhwUmVxdWVzdCgpfSx0LnByb3RvdHlwZS5fc2VuZEh4eHBSZXF1ZXN0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLndpdGhDcmVkZW50aWFscyl7dmFyIHI9dC5jb29raWVKYXIuZ2V0Q29va2llcyh5LkNvb2tpZUFjY2Vzc0luZm8odGhpcy5fdXJsLmhvc3RuYW1lLHRoaXMuX3VybC5wYXRobmFtZSxcImh0dHBzOlwiPT09dGhpcy5fdXJsLnByb3RvY29sKSkudG9WYWx1ZVN0cmluZygpO3RoaXMuX2hlYWRlcnMuY29va2llPXRoaXMuX2hlYWRlcnMuY29va2llMj1yfXZhciBuPVwiaHR0cDpcIj09PXRoaXMuX3VybC5wcm90b2NvbD9bYyx0aGlzLm5vZGVqc0h0dHBBZ2VudF06W2YsdGhpcy5ub2RlanNIdHRwc0FnZW50XSxpPW5bMF0sbz1uWzFdLHM9aS5yZXF1ZXN0LmJpbmQoaSkoe2hvc3RuYW1lOnRoaXMuX3VybC5ob3N0bmFtZSxwb3J0Oit0aGlzLl91cmwucG9ydCxwYXRoOnRoaXMuX3VybC5wYXRoLGF1dGg6dGhpcy5fdXJsLmF1dGgsbWV0aG9kOnRoaXMuX21ldGhvZCxoZWFkZXJzOnRoaXMuX2hlYWRlcnMsYWdlbnQ6b30pO3RoaXMuX3JlcXVlc3Q9cyx0aGlzLnRpbWVvdXQmJnMuc2V0VGltZW91dCh0aGlzLnRpbWVvdXQsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX29uSHR0cFRpbWVvdXQocyl9KSkscy5vbihcInJlc3BvbnNlXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBlLl9vbkh0dHBSZXNwb25zZShzLHQpfSkpLHMub24oXCJlcnJvclwiLChmdW5jdGlvbih0KXtyZXR1cm4gZS5fb25IdHRwUmVxdWVzdEVycm9yKHMsdCl9KSksdGhpcy51cGxvYWQuX3N0YXJ0VXBsb2FkKHMpLHRoaXMuX3JlcXVlc3Q9PT1zJiZ0aGlzLl9kaXNwYXRjaFByb2dyZXNzKFwibG9hZHN0YXJ0XCIpfSx0LnByb3RvdHlwZS5fZmluYWxpemVIZWFkZXJzPWZ1bmN0aW9uKCl7dGhpcy5faGVhZGVycz1hKHt9LHRoaXMuX2hlYWRlcnMse0Nvbm5lY3Rpb246XCJrZWVwLWFsaXZlXCIsSG9zdDp0aGlzLl91cmwuaG9zdCxcIlVzZXItQWdlbnRcIjp0aGlzLl91c2VyQWdlbnR9LHRoaXMuX2Fub255bW91cz97UmVmZXJlcjpcImFib3V0OmJsYW5rXCJ9Ont9KSx0aGlzLnVwbG9hZC5fZmluYWxpemVIZWFkZXJzKHRoaXMuX2hlYWRlcnMsdGhpcy5fbG93ZXJlZEhlYWRlcnMpfSx0LnByb3RvdHlwZS5fb25IdHRwUmVzcG9uc2U9ZnVuY3Rpb24oZSxyKXt2YXIgbj10aGlzO2lmKHRoaXMuX3JlcXVlc3Q9PT1lKXtpZih0aGlzLndpdGhDcmVkZW50aWFscyYmKHIuaGVhZGVyc1tcInNldC1jb29raWVcIl18fHIuaGVhZGVyc1tcInNldC1jb29raWUyXCJdKSYmdC5jb29raWVKYXIuc2V0Q29va2llcyhyLmhlYWRlcnNbXCJzZXQtY29va2llXCJdfHxyLmhlYWRlcnNbXCJzZXQtY29va2llMlwiXSksWzMwMSwzMDIsMzAzLDMwNywzMDhdLmluZGV4T2Yoci5zdGF0dXNDb2RlKT49MClyZXR1cm4gdGhpcy5fdXJsPXRoaXMuX3BhcnNlVXJsKHIuaGVhZGVycy5sb2NhdGlvbiksdGhpcy5fbWV0aG9kPVwiR0VUXCIsdGhpcy5fbG93ZXJlZEhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0mJihkZWxldGUgdGhpcy5faGVhZGVyc1t0aGlzLl9sb3dlcmVkSGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXV0sZGVsZXRlIHRoaXMuX2xvd2VyZWRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxudWxsIT10aGlzLl9oZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdJiZkZWxldGUgdGhpcy5faGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSxkZWxldGUgdGhpcy5faGVhZGVyc1tcIkNvbnRlbnQtTGVuZ3RoXCJdLHRoaXMudXBsb2FkLl9yZXNldCgpLHRoaXMuX2ZpbmFsaXplSGVhZGVycygpLHZvaWQgdGhpcy5fc2VuZEh4eHBSZXF1ZXN0KCk7dGhpcy5fcmVzcG9uc2U9cix0aGlzLl9yZXNwb25zZS5vbihcImRhdGFcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIG4uX29uSHR0cFJlc3BvbnNlRGF0YShyLGUpfSkpLHRoaXMuX3Jlc3BvbnNlLm9uKFwiZW5kXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIG4uX29uSHR0cFJlc3BvbnNlRW5kKHIpfSkpLHRoaXMuX3Jlc3BvbnNlLm9uKFwiY2xvc2VcIiwoZnVuY3Rpb24oKXtyZXR1cm4gbi5fb25IdHRwUmVzcG9uc2VDbG9zZShyKX0pKSx0aGlzLnJlc3BvbnNlVXJsPXRoaXMuX3VybC5ocmVmLnNwbGl0KFwiI1wiKVswXSx0aGlzLnN0YXR1cz1yLnN0YXR1c0NvZGUsdGhpcy5zdGF0dXNUZXh0PWMuU1RBVFVTX0NPREVTW3RoaXMuc3RhdHVzXSx0aGlzLl9wYXJzZVJlc3BvbnNlSGVhZGVycyhyKTt2YXIgaT10aGlzLl9yZXNwb25zZUhlYWRlcnNbXCJjb250ZW50LWxlbmd0aFwiXXx8XCJcIjt0aGlzLl90b3RhbEJ5dGVzPStpLHRoaXMuX2xlbmd0aENvbXB1dGFibGU9ISFpLHRoaXMuX3NldFJlYWR5U3RhdGUodC5IRUFERVJTX1JFQ0VJVkVEKX19LHQucHJvdG90eXBlLl9vbkh0dHBSZXNwb25zZURhdGE9ZnVuY3Rpb24oZSxyKXt0aGlzLl9yZXNwb25zZT09PWUmJih0aGlzLl9yZXNwb25zZVBhcnRzLnB1c2gobmV3IG8ocikpLHRoaXMuX2xvYWRlZEJ5dGVzKz1yLmxlbmd0aCx0aGlzLnJlYWR5U3RhdGUhPT10LkxPQURJTkcmJnRoaXMuX3NldFJlYWR5U3RhdGUodC5MT0FESU5HKSx0aGlzLl9kaXNwYXRjaFByb2dyZXNzKFwicHJvZ3Jlc3NcIikpfSx0LnByb3RvdHlwZS5fb25IdHRwUmVzcG9uc2VFbmQ9ZnVuY3Rpb24oZSl7dGhpcy5fcmVzcG9uc2U9PT1lJiYodGhpcy5fcGFyc2VSZXNwb25zZSgpLHRoaXMuX3JlcXVlc3Q9bnVsbCx0aGlzLl9yZXNwb25zZT1udWxsLHRoaXMuX3NldFJlYWR5U3RhdGUodC5ET05FKSx0aGlzLl9kaXNwYXRjaFByb2dyZXNzKFwibG9hZFwiKSx0aGlzLl9kaXNwYXRjaFByb2dyZXNzKFwibG9hZGVuZFwiKSl9LHQucHJvdG90eXBlLl9vbkh0dHBSZXNwb25zZUNsb3NlPWZ1bmN0aW9uKGUpe2lmKHRoaXMuX3Jlc3BvbnNlPT09ZSl7dmFyIHI9dGhpcy5fcmVxdWVzdDt0aGlzLl9zZXRFcnJvcigpLHIuYWJvcnQoKSx0aGlzLl9zZXRSZWFkeVN0YXRlKHQuRE9ORSksdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcyhcImVycm9yXCIpLHRoaXMuX2Rpc3BhdGNoUHJvZ3Jlc3MoXCJsb2FkZW5kXCIpfX0sdC5wcm90b3R5cGUuX29uSHR0cFRpbWVvdXQ9ZnVuY3Rpb24oZSl7dGhpcy5fcmVxdWVzdD09PWUmJih0aGlzLl9zZXRFcnJvcigpLGUuYWJvcnQoKSx0aGlzLl9zZXRSZWFkeVN0YXRlKHQuRE9ORSksdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcyhcInRpbWVvdXRcIiksdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcyhcImxvYWRlbmRcIikpfSx0LnByb3RvdHlwZS5fb25IdHRwUmVxdWVzdEVycm9yPWZ1bmN0aW9uKGUscil7dGhpcy5fcmVxdWVzdD09PWUmJih0aGlzLl9zZXRFcnJvcigpLGUuYWJvcnQoKSx0aGlzLl9zZXRSZWFkeVN0YXRlKHQuRE9ORSksdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcyhcImVycm9yXCIpLHRoaXMuX2Rpc3BhdGNoUHJvZ3Jlc3MoXCJsb2FkZW5kXCIpKX0sdC5wcm90b3R5cGUuX2Rpc3BhdGNoUHJvZ3Jlc3M9ZnVuY3Rpb24oZSl7dmFyIHI9bmV3IHQuUHJvZ3Jlc3NFdmVudChlKTtyLmxlbmd0aENvbXB1dGFibGU9dGhpcy5fbGVuZ3RoQ29tcHV0YWJsZSxyLmxvYWRlZD10aGlzLl9sb2FkZWRCeXRlcyxyLnRvdGFsPXRoaXMuX3RvdGFsQnl0ZXMsdGhpcy5kaXNwYXRjaEV2ZW50KHIpfSx0LnByb3RvdHlwZS5fc2V0RXJyb3I9ZnVuY3Rpb24oKXt0aGlzLl9yZXF1ZXN0PW51bGwsdGhpcy5fcmVzcG9uc2U9bnVsbCx0aGlzLl9yZXNwb25zZUhlYWRlcnM9bnVsbCx0aGlzLl9yZXNwb25zZVBhcnRzPW51bGx9LHQucHJvdG90eXBlLl9wYXJzZVVybD1mdW5jdGlvbihlLHQscil7dmFyIG49bnVsbD09dGhpcy5ub2RlanNCYXNlVXJsP2U6ZC5yZXNvbHZlKHRoaXMubm9kZWpzQmFzZVVybCxlKSxpPWQucGFyc2UobiwhMSwhMCk7aS5oYXNoPW51bGw7dmFyIG89KGkuYXV0aHx8XCJcIikuc3BsaXQoXCI6XCIpLHM9b1swXSxhPW9bMV07cmV0dXJuKHN8fGF8fHR8fHIpJiYoaS5hdXRoPSh0fHxzfHxcIlwiKStcIjpcIisocnx8YXx8XCJcIikpLGl9LHQucHJvdG90eXBlLl9wYXJzZVJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gdGhpcy5fcmVzcG9uc2VIZWFkZXJzPXt9LGUuaGVhZGVycyl7dmFyIHI9dC50b0xvd2VyQ2FzZSgpO3RoaXMuX3ByaXZhdGVIZWFkZXJzW3JdfHwodGhpcy5fcmVzcG9uc2VIZWFkZXJzW3JdPWUuaGVhZGVyc1t0XSl9bnVsbCE9dGhpcy5fbWltZU92ZXJyaWRlJiYodGhpcy5fcmVzcG9uc2VIZWFkZXJzW1wiY29udGVudC10eXBlXCJdPXRoaXMuX21pbWVPdmVycmlkZSl9LHQucHJvdG90eXBlLl9wYXJzZVJlc3BvbnNlPWZ1bmN0aW9uKCl7dmFyIGU9by5jb25jYXQodGhpcy5fcmVzcG9uc2VQYXJ0cyk7c3dpdGNoKHRoaXMuX3Jlc3BvbnNlUGFydHM9bnVsbCx0aGlzLnJlc3BvbnNlVHlwZSl7Y2FzZVwianNvblwiOnRoaXMucmVzcG9uc2VUZXh0PW51bGw7dHJ5e3RoaXMucmVzcG9uc2U9SlNPTi5wYXJzZShlLnRvU3RyaW5nKFwidXRmLThcIikpfWNhdGNoKGUpe3RoaXMucmVzcG9uc2U9bnVsbH1yZXR1cm47Y2FzZVwiYnVmZmVyXCI6cmV0dXJuIHRoaXMucmVzcG9uc2VUZXh0PW51bGwsdm9pZCh0aGlzLnJlc3BvbnNlPWUpO2Nhc2VcImFycmF5YnVmZmVyXCI6dGhpcy5yZXNwb25zZVRleHQ9bnVsbDtmb3IodmFyIHQ9bmV3IEFycmF5QnVmZmVyKGUubGVuZ3RoKSxyPW5ldyBVaW50OEFycmF5KHQpLG49MDtuPGUubGVuZ3RoO24rKylyW25dPWVbbl07cmV0dXJuIHZvaWQodGhpcy5yZXNwb25zZT10KTtkZWZhdWx0OnRyeXt0aGlzLnJlc3BvbnNlVGV4dD1lLnRvU3RyaW5nKHRoaXMuX3BhcnNlUmVzcG9uc2VFbmNvZGluZygpKX1jYXRjaCh0KXt0aGlzLnJlc3BvbnNlVGV4dD1lLnRvU3RyaW5nKFwiYmluYXJ5XCIpfXRoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHR9fSx0LnByb3RvdHlwZS5fcGFyc2VSZXNwb25zZUVuY29kaW5nPWZ1bmN0aW9uKCl7cmV0dXJuLztcXHMqY2hhcnNldD0oLiopJC8uZXhlYyh0aGlzLl9yZXNwb25zZUhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl18fFwiXCIpWzFdfHxcInV0Zi04XCJ9LHQuUHJvZ3Jlc3NFdmVudD1oLlByb2dyZXNzRXZlbnQsdC5JbnZhbGlkU3RhdGVFcnJvcj1sLkludmFsaWRTdGF0ZUVycm9yLHQuTmV0d29ya0Vycm9yPWwuTmV0d29ya0Vycm9yLHQuU2VjdXJpdHlFcnJvcj1sLlNlY3VyaXR5RXJyb3IsdC5TeW50YXhFcnJvcj1sLlN5bnRheEVycm9yLHQuWE1MSHR0cFJlcXVlc3RVcGxvYWQ9Yi5YTUxIdHRwUmVxdWVzdFVwbG9hZCx0LlVOU0VOVD0wLHQuT1BFTkVEPTEsdC5IRUFERVJTX1JFQ0VJVkVEPTIsdC5MT0FESU5HPTMsdC5ET05FPTQsdC5jb29raWVKYXI9eS5Db29raWVKYXIoKSx0fShwLlhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQpO3QuWE1MSHR0cFJlcXVlc3Q9ZyxnLnByb3RvdHlwZS5ub2RlanNIdHRwQWdlbnQ9Yy5nbG9iYWxBZ2VudCxnLnByb3RvdHlwZS5ub2RlanNIdHRwc0FnZW50PWYuZ2xvYmFsQWdlbnQsZy5wcm90b3R5cGUubm9kZWpzQmFzZVVybD1udWxsfSw3NTI5OmU9PntlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9e30scj0wO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3ZhciBuPWFyZ3VtZW50c1tyXTtmb3IodmFyIGkgaW4gbil0LmNhbGwobixpKSYmKGVbaV09bltpXSl9cmV0dXJuIGV9O3ZhciB0PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHl9LDY2MDE6KCk9Pnt9LDkyMTQ6KCk9Pnt9LDExNTY6KCk9Pnt9LDIzNjE6KCk9Pnt9LDQ2MTY6KCk9Pnt9LDUyMjooKT0+e30sNjg4MjooKT0+e30sMzA4MzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49W1wiQmlnSW50NjRBcnJheVwiLFwiQmlnVWludDY0QXJyYXlcIixcIkZsb2F0MzJBcnJheVwiLFwiRmxvYXQ2NEFycmF5XCIsXCJJbnQxNkFycmF5XCIsXCJJbnQzMkFycmF5XCIsXCJJbnQ4QXJyYXlcIixcIlVpbnQxNkFycmF5XCIsXCJVaW50MzJBcnJheVwiLFwiVWludDhBcnJheVwiLFwiVWludDhDbGFtcGVkQXJyYXlcIl0saT1cInVuZGVmaW5lZFwiPT10eXBlb2YgZ2xvYmFsVGhpcz9yLmc6Z2xvYmFsVGhpcztlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8bi5sZW5ndGg7dCsrKVwiZnVuY3Rpb25cIj09dHlwZW9mIGlbblt0XV0mJihlW2UubGVuZ3RoXT1uW3RdKTtyZXR1cm4gZX19LDg4MjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyMTApKFwiJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlXCIsITApO2lmKG4pdHJ5e24oW10sXCJsZW5ndGhcIil9Y2F0Y2goZSl7bj1udWxsfWUuZXhwb3J0cz1ufSw0OTQ2OmU9PntcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9SlNPTi5wYXJzZSgne1wiYWVzLTEyOC1lY2JcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTI4LFwiaXZcIjowLFwibW9kZVwiOlwiRUNCXCIsXCJ0eXBlXCI6XCJibG9ja1wifSxcImFlcy0xOTItZWNiXCI6e1wiY2lwaGVyXCI6XCJBRVNcIixcImtleVwiOjE5MixcIml2XCI6MCxcIm1vZGVcIjpcIkVDQlwiLFwidHlwZVwiOlwiYmxvY2tcIn0sXCJhZXMtMjU2LWVjYlwiOntcImNpcGhlclwiOlwiQUVTXCIsXCJrZXlcIjoyNTYsXCJpdlwiOjAsXCJtb2RlXCI6XCJFQ0JcIixcInR5cGVcIjpcImJsb2NrXCJ9LFwiYWVzLTEyOC1jYmNcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTI4LFwiaXZcIjoxNixcIm1vZGVcIjpcIkNCQ1wiLFwidHlwZVwiOlwiYmxvY2tcIn0sXCJhZXMtMTkyLWNiY1wiOntcImNpcGhlclwiOlwiQUVTXCIsXCJrZXlcIjoxOTIsXCJpdlwiOjE2LFwibW9kZVwiOlwiQ0JDXCIsXCJ0eXBlXCI6XCJibG9ja1wifSxcImFlcy0yNTYtY2JjXCI6e1wiY2lwaGVyXCI6XCJBRVNcIixcImtleVwiOjI1NixcIml2XCI6MTYsXCJtb2RlXCI6XCJDQkNcIixcInR5cGVcIjpcImJsb2NrXCJ9LFwiYWVzMTI4XCI6e1wiY2lwaGVyXCI6XCJBRVNcIixcImtleVwiOjEyOCxcIml2XCI6MTYsXCJtb2RlXCI6XCJDQkNcIixcInR5cGVcIjpcImJsb2NrXCJ9LFwiYWVzMTkyXCI6e1wiY2lwaGVyXCI6XCJBRVNcIixcImtleVwiOjE5MixcIml2XCI6MTYsXCJtb2RlXCI6XCJDQkNcIixcInR5cGVcIjpcImJsb2NrXCJ9LFwiYWVzMjU2XCI6e1wiY2lwaGVyXCI6XCJBRVNcIixcImtleVwiOjI1NixcIml2XCI6MTYsXCJtb2RlXCI6XCJDQkNcIixcInR5cGVcIjpcImJsb2NrXCJ9LFwiYWVzLTEyOC1jZmJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTI4LFwiaXZcIjoxNixcIm1vZGVcIjpcIkNGQlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTE5Mi1jZmJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTkyLFwiaXZcIjoxNixcIm1vZGVcIjpcIkNGQlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTI1Ni1jZmJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MjU2LFwiaXZcIjoxNixcIm1vZGVcIjpcIkNGQlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTEyOC1jZmI4XCI6e1wiY2lwaGVyXCI6XCJBRVNcIixcImtleVwiOjEyOCxcIml2XCI6MTYsXCJtb2RlXCI6XCJDRkI4XCIsXCJ0eXBlXCI6XCJzdHJlYW1cIn0sXCJhZXMtMTkyLWNmYjhcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTkyLFwiaXZcIjoxNixcIm1vZGVcIjpcIkNGQjhcIixcInR5cGVcIjpcInN0cmVhbVwifSxcImFlcy0yNTYtY2ZiOFwiOntcImNpcGhlclwiOlwiQUVTXCIsXCJrZXlcIjoyNTYsXCJpdlwiOjE2LFwibW9kZVwiOlwiQ0ZCOFwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTEyOC1jZmIxXCI6e1wiY2lwaGVyXCI6XCJBRVNcIixcImtleVwiOjEyOCxcIml2XCI6MTYsXCJtb2RlXCI6XCJDRkIxXCIsXCJ0eXBlXCI6XCJzdHJlYW1cIn0sXCJhZXMtMTkyLWNmYjFcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTkyLFwiaXZcIjoxNixcIm1vZGVcIjpcIkNGQjFcIixcInR5cGVcIjpcInN0cmVhbVwifSxcImFlcy0yNTYtY2ZiMVwiOntcImNpcGhlclwiOlwiQUVTXCIsXCJrZXlcIjoyNTYsXCJpdlwiOjE2LFwibW9kZVwiOlwiQ0ZCMVwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTEyOC1vZmJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTI4LFwiaXZcIjoxNixcIm1vZGVcIjpcIk9GQlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTE5Mi1vZmJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTkyLFwiaXZcIjoxNixcIm1vZGVcIjpcIk9GQlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTI1Ni1vZmJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MjU2LFwiaXZcIjoxNixcIm1vZGVcIjpcIk9GQlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTEyOC1jdHJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTI4LFwiaXZcIjoxNixcIm1vZGVcIjpcIkNUUlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTE5Mi1jdHJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTkyLFwiaXZcIjoxNixcIm1vZGVcIjpcIkNUUlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTI1Ni1jdHJcIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MjU2LFwiaXZcIjoxNixcIm1vZGVcIjpcIkNUUlwiLFwidHlwZVwiOlwic3RyZWFtXCJ9LFwiYWVzLTEyOC1nY21cIjp7XCJjaXBoZXJcIjpcIkFFU1wiLFwia2V5XCI6MTI4LFwiaXZcIjoxMixcIm1vZGVcIjpcIkdDTVwiLFwidHlwZVwiOlwiYXV0aFwifSxcImFlcy0xOTItZ2NtXCI6e1wiY2lwaGVyXCI6XCJBRVNcIixcImtleVwiOjE5MixcIml2XCI6MTIsXCJtb2RlXCI6XCJHQ01cIixcInR5cGVcIjpcImF1dGhcIn0sXCJhZXMtMjU2LWdjbVwiOntcImNpcGhlclwiOlwiQUVTXCIsXCJrZXlcIjoyNTYsXCJpdlwiOjEyLFwibW9kZVwiOlwiR0NNXCIsXCJ0eXBlXCI6XCJhdXRoXCJ9fScpfSw1MjA3OmU9PntcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9SlNPTi5wYXJzZSgne1wic2hhMjI0V2l0aFJTQUVuY3J5cHRpb25cIjp7XCJzaWduXCI6XCJyc2FcIixcImhhc2hcIjpcInNoYTIyNFwiLFwiaWRcIjpcIjMwMmQzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwNDA1MDAwNDFjXCJ9LFwiUlNBLVNIQTIyNFwiOntcInNpZ25cIjpcImVjZHNhL3JzYVwiLFwiaGFzaFwiOlwic2hhMjI0XCIsXCJpZFwiOlwiMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWNcIn0sXCJzaGEyNTZXaXRoUlNBRW5jcnlwdGlvblwiOntcInNpZ25cIjpcInJzYVwiLFwiaGFzaFwiOlwic2hhMjU2XCIsXCJpZFwiOlwiMzAzMTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAxMDUwMDA0MjBcIn0sXCJSU0EtU0hBMjU2XCI6e1wic2lnblwiOlwiZWNkc2EvcnNhXCIsXCJoYXNoXCI6XCJzaGEyNTZcIixcImlkXCI6XCIzMDMxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMFwifSxcInNoYTM4NFdpdGhSU0FFbmNyeXB0aW9uXCI6e1wic2lnblwiOlwicnNhXCIsXCJoYXNoXCI6XCJzaGEzODRcIixcImlkXCI6XCIzMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMFwifSxcIlJTQS1TSEEzODRcIjp7XCJzaWduXCI6XCJlY2RzYS9yc2FcIixcImhhc2hcIjpcInNoYTM4NFwiLFwiaWRcIjpcIjMwNDEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMjA1MDAwNDMwXCJ9LFwic2hhNTEyV2l0aFJTQUVuY3J5cHRpb25cIjp7XCJzaWduXCI6XCJyc2FcIixcImhhc2hcIjpcInNoYTUxMlwiLFwiaWRcIjpcIjMwNTEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMzA1MDAwNDQwXCJ9LFwiUlNBLVNIQTUxMlwiOntcInNpZ25cIjpcImVjZHNhL3JzYVwiLFwiaGFzaFwiOlwic2hhNTEyXCIsXCJpZFwiOlwiMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDBcIn0sXCJSU0EtU0hBMVwiOntcInNpZ25cIjpcInJzYVwiLFwiaGFzaFwiOlwic2hhMVwiLFwiaWRcIjpcIjMwMjEzMDA5MDYwNTJiMGUwMzAyMWEwNTAwMDQxNFwifSxcImVjZHNhLXdpdGgtU0hBMVwiOntcInNpZ25cIjpcImVjZHNhXCIsXCJoYXNoXCI6XCJzaGExXCIsXCJpZFwiOlwiXCJ9LFwic2hhMjU2XCI6e1wic2lnblwiOlwiZWNkc2FcIixcImhhc2hcIjpcInNoYTI1NlwiLFwiaWRcIjpcIlwifSxcInNoYTIyNFwiOntcInNpZ25cIjpcImVjZHNhXCIsXCJoYXNoXCI6XCJzaGEyMjRcIixcImlkXCI6XCJcIn0sXCJzaGEzODRcIjp7XCJzaWduXCI6XCJlY2RzYVwiLFwiaGFzaFwiOlwic2hhMzg0XCIsXCJpZFwiOlwiXCJ9LFwic2hhNTEyXCI6e1wic2lnblwiOlwiZWNkc2FcIixcImhhc2hcIjpcInNoYTUxMlwiLFwiaWRcIjpcIlwifSxcIkRTQS1TSEFcIjp7XCJzaWduXCI6XCJkc2FcIixcImhhc2hcIjpcInNoYTFcIixcImlkXCI6XCJcIn0sXCJEU0EtU0hBMVwiOntcInNpZ25cIjpcImRzYVwiLFwiaGFzaFwiOlwic2hhMVwiLFwiaWRcIjpcIlwifSxcIkRTQVwiOntcInNpZ25cIjpcImRzYVwiLFwiaGFzaFwiOlwic2hhMVwiLFwiaWRcIjpcIlwifSxcIkRTQS1XSVRILVNIQTIyNFwiOntcInNpZ25cIjpcImRzYVwiLFwiaGFzaFwiOlwic2hhMjI0XCIsXCJpZFwiOlwiXCJ9LFwiRFNBLVNIQTIyNFwiOntcInNpZ25cIjpcImRzYVwiLFwiaGFzaFwiOlwic2hhMjI0XCIsXCJpZFwiOlwiXCJ9LFwiRFNBLVdJVEgtU0hBMjU2XCI6e1wic2lnblwiOlwiZHNhXCIsXCJoYXNoXCI6XCJzaGEyNTZcIixcImlkXCI6XCJcIn0sXCJEU0EtU0hBMjU2XCI6e1wic2lnblwiOlwiZHNhXCIsXCJoYXNoXCI6XCJzaGEyNTZcIixcImlkXCI6XCJcIn0sXCJEU0EtV0lUSC1TSEEzODRcIjp7XCJzaWduXCI6XCJkc2FcIixcImhhc2hcIjpcInNoYTM4NFwiLFwiaWRcIjpcIlwifSxcIkRTQS1TSEEzODRcIjp7XCJzaWduXCI6XCJkc2FcIixcImhhc2hcIjpcInNoYTM4NFwiLFwiaWRcIjpcIlwifSxcIkRTQS1XSVRILVNIQTUxMlwiOntcInNpZ25cIjpcImRzYVwiLFwiaGFzaFwiOlwic2hhNTEyXCIsXCJpZFwiOlwiXCJ9LFwiRFNBLVNIQTUxMlwiOntcInNpZ25cIjpcImRzYVwiLFwiaGFzaFwiOlwic2hhNTEyXCIsXCJpZFwiOlwiXCJ9LFwiRFNBLVJJUEVNRDE2MFwiOntcInNpZ25cIjpcImRzYVwiLFwiaGFzaFwiOlwicm1kMTYwXCIsXCJpZFwiOlwiXCJ9LFwicmlwZW1kMTYwV2l0aFJTQVwiOntcInNpZ25cIjpcInJzYVwiLFwiaGFzaFwiOlwicm1kMTYwXCIsXCJpZFwiOlwiMzAyMTMwMDkwNjA1MmIyNDAzMDIwMTA1MDAwNDE0XCJ9LFwiUlNBLVJJUEVNRDE2MFwiOntcInNpZ25cIjpcInJzYVwiLFwiaGFzaFwiOlwicm1kMTYwXCIsXCJpZFwiOlwiMzAyMTMwMDkwNjA1MmIyNDAzMDIwMTA1MDAwNDE0XCJ9LFwibWQ1V2l0aFJTQUVuY3J5cHRpb25cIjp7XCJzaWduXCI6XCJyc2FcIixcImhhc2hcIjpcIm1kNVwiLFwiaWRcIjpcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMFwifSxcIlJTQS1NRDVcIjp7XCJzaWduXCI6XCJyc2FcIixcImhhc2hcIjpcIm1kNVwiLFwiaWRcIjpcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMFwifX0nKX0sMTMwODplPT57XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPUpTT04ucGFyc2UoJ3tcIjEuMy4xMzIuMC4xMFwiOlwic2VjcDI1NmsxXCIsXCIxLjMuMTMyLjAuMzNcIjpcInAyMjRcIixcIjEuMi44NDAuMTAwNDUuMy4xLjFcIjpcInAxOTJcIixcIjEuMi44NDAuMTAwNDUuMy4xLjdcIjpcInAyNTZcIixcIjEuMy4xMzIuMC4zNFwiOlwicDM4NFwiLFwiMS4zLjEzMi4wLjM1XCI6XCJwNTIxXCJ9Jyl9LDk3OTk6ZT0+e1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1KU09OLnBhcnNlKCd7XCJtb2RwMVwiOntcImdlblwiOlwiMDJcIixcInByaW1lXCI6XCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjNhMzYyMGZmZmZmZmZmZmZmZmZmZmZcIn0sXCJtb2RwMlwiOntcImdlblwiOlwiMDJcIixcInByaW1lXCI6XCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNjUzODFmZmZmZmZmZmZmZmZmZmZmXCJ9LFwibW9kcDVcIjp7XCJnZW5cIjpcIjAyXCIsXCJwcmltZVwiOlwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2EyMzczMjdmZmZmZmZmZmZmZmZmZmZmXCJ9LFwibW9kcDE0XCI6e1wiZ2VuXCI6XCIwMlwiLFwicHJpbWVcIjpcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhY2FhNjhmZmZmZmZmZmZmZmZmZmZmXCJ9LFwibW9kcDE1XCI6e1wiZ2VuXCI6XCIwMlwiLFwicHJpbWVcIjpcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhYWM0MmRhZDMzMTcwZDA0NTA3YTMzYTg1NTIxYWJkZjFjYmE2NGVjZmI4NTA0NThkYmVmMGE4YWVhNzE1NzVkMDYwYzdkYjM5NzBmODVhNmUxZTRjN2FiZjVhZThjZGIwOTMzZDcxZThjOTRlMDRhMjU2MTlkY2VlM2QyMjYxYWQyZWU2YmYxMmZmYTA2ZDk4YTA4NjRkODc2MDI3MzNlYzg2YTY0NTIxZjJiMTgxNzdiMjAwY2JiZTExNzU3N2E2MTVkNmM3NzA5ODhjMGJhZDk0NmUyMDhlMjRmYTA3NGU1YWIzMTQzZGI1YmZjZTBmZDEwOGU0YjgyZDEyMGE5M2FkMmNhZmZmZmZmZmZmZmZmZmZmZlwifSxcIm1vZHAxNlwiOntcImdlblwiOlwiMDJcIixcInByaW1lXCI6XCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0ZTRhYmM5ODA0ZjE3NDZjMDhjYTE4MjE3YzMyOTA1ZTQ2MmUzNmNlM2JlMzllNzcyYzE4MGU4NjAzOWIyNzgzYTJlYzA3YTI4ZmI1YzU1ZGYwNmY0YzUyYzlkZTJiY2JmNjk1NTgxNzE4Mzk5NTQ5N2NlYTk1NmFlNTE1ZDIyNjE4OThmYTA1MTAxNTcyOGU1YThhYWFjNDJkYWQzMzE3MGQwNDUwN2EzM2E4NTUyMWFiZGYxY2JhNjRlY2ZiODUwNDU4ZGJlZjBhOGFlYTcxNTc1ZDA2MGM3ZGIzOTcwZjg1YTZlMWU0YzdhYmY1YWU4Y2RiMDkzM2Q3MWU4Yzk0ZTA0YTI1NjE5ZGNlZTNkMjI2MWFkMmVlNmJmMTJmZmEwNmQ5OGEwODY0ZDg3NjAyNzMzZWM4NmE2NDUyMWYyYjE4MTc3YjIwMGNiYmUxMTc1NzdhNjE1ZDZjNzcwOTg4YzBiYWQ5NDZlMjA4ZTI0ZmEwNzRlNWFiMzE0M2RiNWJmY2UwZmQxMDhlNGI4MmQxMjBhOTIxMDgwMTFhNzIzYzEyYTc4N2U2ZDc4ODcxOWExMGJkYmE1YjI2OTljMzI3MTg2YWY0ZTIzYzFhOTQ2ODM0YjYxNTBiZGEyNTgzZTljYTJhZDQ0Y2U4ZGJiYmMyZGIwNGRlOGVmOTJlOGVmYzE0MWZiZWNhYTYyODdjNTk0NzRlNmJjMDVkOTliMjk2NGZhMDkwYzNhMjIzM2JhMTg2NTE1YmU3ZWQxZjYxMjk3MGNlZTJkN2FmYjgxYmRkNzYyMTcwNDgxY2QwMDY5MTI3ZDViMDVhYTk5M2I0ZWE5ODhkOGZkZGMxODZmZmI3ZGM5MGE2YzA4ZjRkZjQzNWM5MzQwNjMxOTlmZmZmZmZmZmZmZmZmZmZmXCJ9LFwibW9kcDE3XCI6e1wiZ2VuXCI6XCIwMlwiLFwicHJpbWVcIjpcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhYWM0MmRhZDMzMTcwZDA0NTA3YTMzYTg1NTIxYWJkZjFjYmE2NGVjZmI4NTA0NThkYmVmMGE4YWVhNzE1NzVkMDYwYzdkYjM5NzBmODVhNmUxZTRjN2FiZjVhZThjZGIwOTMzZDcxZThjOTRlMDRhMjU2MTlkY2VlM2QyMjYxYWQyZWU2YmYxMmZmYTA2ZDk4YTA4NjRkODc2MDI3MzNlYzg2YTY0NTIxZjJiMTgxNzdiMjAwY2JiZTExNzU3N2E2MTVkNmM3NzA5ODhjMGJhZDk0NmUyMDhlMjRmYTA3NGU1YWIzMTQzZGI1YmZjZTBmZDEwOGU0YjgyZDEyMGE5MjEwODAxMWE3MjNjMTJhNzg3ZTZkNzg4NzE5YTEwYmRiYTViMjY5OWMzMjcxODZhZjRlMjNjMWE5NDY4MzRiNjE1MGJkYTI1ODNlOWNhMmFkNDRjZThkYmJiYzJkYjA0ZGU4ZWY5MmU4ZWZjMTQxZmJlY2FhNjI4N2M1OTQ3NGU2YmMwNWQ5OWIyOTY0ZmEwOTBjM2EyMjMzYmExODY1MTViZTdlZDFmNjEyOTcwY2VlMmQ3YWZiODFiZGQ3NjIxNzA0ODFjZDAwNjkxMjdkNWIwNWFhOTkzYjRlYTk4OGQ4ZmRkYzE4NmZmYjdkYzkwYTZjMDhmNGRmNDM1YzkzNDAyODQ5MjM2YzNmYWI0ZDI3YzcwMjZjMWQ0ZGNiMjYwMjY0NmRlYzk3NTFlNzYzZGJhMzdiZGY4ZmY5NDA2YWQ5ZTUzMGVlNWRiMzgyZjQxMzAwMWFlYjA2YTUzZWQ5MDI3ZDgzMTE3OTcyN2IwODY1YTg5MThkYTNlZGJlYmNmOWIxNGVkNDRjZTZjYmFjZWQ0YmIxYmRiN2YxNDQ3ZTZjYzI1NGIzMzIwNTE1MTJiZDdhZjQyNmZiOGY0MDEzNzhjZDJiZjU5ODNjYTAxYzY0YjkyZWNmMDMyZWExNWQxNzIxZDAzZjQ4MmQ3Y2U2ZTc0ZmVmNmQ1NWU3MDJmNDY5ODBjODJiNWE4NDAzMTkwMGIxYzllNTllN2M5N2ZiZWM3ZThmMzIzYTk3YTdlMzZjYzg4YmUwZjFkNDViN2ZmNTg1YWM1NGJkNDA3YjIyYjQxNTRhYWNjOGY2ZDdlYmY0OGUxZDgxNGNjNWVkMjBmODAzN2UwYTc5NzE1ZWVmMjliZTMyODA2YTFkNThiYjdjNWRhNzZmNTUwYWEzZDhhMWZiZmYwZWIxOWNjYjFhMzEzZDU1Y2RhNTZjOWVjMmVmMjk2MzIzODdmZThkNzZlM2MwNDY4MDQzZThmNjYzZjQ4NjBlZTEyYmYyZDViMGI3NDc0ZDZlNjk0ZjkxZTZkY2M0MDI0ZmZmZmZmZmZmZmZmZmZmZlwifSxcIm1vZHAxOFwiOntcImdlblwiOlwiMDJcIixcInByaW1lXCI6XCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0ZTRhYmM5ODA0ZjE3NDZjMDhjYTE4MjE3YzMyOTA1ZTQ2MmUzNmNlM2JlMzllNzcyYzE4MGU4NjAzOWIyNzgzYTJlYzA3YTI4ZmI1YzU1ZGYwNmY0YzUyYzlkZTJiY2JmNjk1NTgxNzE4Mzk5NTQ5N2NlYTk1NmFlNTE1ZDIyNjE4OThmYTA1MTAxNTcyOGU1YThhYWFjNDJkYWQzMzE3MGQwNDUwN2EzM2E4NTUyMWFiZGYxY2JhNjRlY2ZiODUwNDU4ZGJlZjBhOGFlYTcxNTc1ZDA2MGM3ZGIzOTcwZjg1YTZlMWU0YzdhYmY1YWU4Y2RiMDkzM2Q3MWU4Yzk0ZTA0YTI1NjE5ZGNlZTNkMjI2MWFkMmVlNmJmMTJmZmEwNmQ5OGEwODY0ZDg3NjAyNzMzZWM4NmE2NDUyMWYyYjE4MTc3YjIwMGNiYmUxMTc1NzdhNjE1ZDZjNzcwOTg4YzBiYWQ5NDZlMjA4ZTI0ZmEwNzRlNWFiMzE0M2RiNWJmY2UwZmQxMDhlNGI4MmQxMjBhOTIxMDgwMTFhNzIzYzEyYTc4N2U2ZDc4ODcxOWExMGJkYmE1YjI2OTljMzI3MTg2YWY0ZTIzYzFhOTQ2ODM0YjYxNTBiZGEyNTgzZTljYTJhZDQ0Y2U4ZGJiYmMyZGIwNGRlOGVmOTJlOGVmYzE0MWZiZWNhYTYyODdjNTk0NzRlNmJjMDVkOTliMjk2NGZhMDkwYzNhMjIzM2JhMTg2NTE1YmU3ZWQxZjYxMjk3MGNlZTJkN2FmYjgxYmRkNzYyMTcwNDgxY2QwMDY5MTI3ZDViMDVhYTk5M2I0ZWE5ODhkOGZkZGMxODZmZmI3ZGM5MGE2YzA4ZjRkZjQzNWM5MzQwMjg0OTIzNmMzZmFiNGQyN2M3MDI2YzFkNGRjYjI2MDI2NDZkZWM5NzUxZTc2M2RiYTM3YmRmOGZmOTQwNmFkOWU1MzBlZTVkYjM4MmY0MTMwMDFhZWIwNmE1M2VkOTAyN2Q4MzExNzk3MjdiMDg2NWE4OTE4ZGEzZWRiZWJjZjliMTRlZDQ0Y2U2Y2JhY2VkNGJiMWJkYjdmMTQ0N2U2Y2MyNTRiMzMyMDUxNTEyYmQ3YWY0MjZmYjhmNDAxMzc4Y2QyYmY1OTgzY2EwMWM2NGI5MmVjZjAzMmVhMTVkMTcyMWQwM2Y0ODJkN2NlNmU3NGZlZjZkNTVlNzAyZjQ2OTgwYzgyYjVhODQwMzE5MDBiMWM5ZTU5ZTdjOTdmYmVjN2U4ZjMyM2E5N2E3ZTM2Y2M4OGJlMGYxZDQ1YjdmZjU4NWFjNTRiZDQwN2IyMmI0MTU0YWFjYzhmNmQ3ZWJmNDhlMWQ4MTRjYzVlZDIwZjgwMzdlMGE3OTcxNWVlZjI5YmUzMjgwNmExZDU4YmI3YzVkYTc2ZjU1MGFhM2Q4YTFmYmZmMGViMTljY2IxYTMxM2Q1NWNkYTU2YzllYzJlZjI5NjMyMzg3ZmU4ZDc2ZTNjMDQ2ODA0M2U4ZjY2M2Y0ODYwZWUxMmJmMmQ1YjBiNzQ3NGQ2ZTY5NGY5MWU2ZGJlMTE1OTc0YTM5MjZmMTJmZWU1ZTQzODc3N2NiNmE5MzJkZjhjZDhiZWM0ZDA3M2I5MzFiYTNiYzgzMmI2OGQ5ZGQzMDA3NDFmYTdiZjhhZmM0N2VkMjU3NmY2OTM2YmE0MjQ2NjNhYWI2MzljNWFlNGY1NjgzNDIzYjQ3NDJiZjFjOTc4MjM4ZjE2Y2JlMzlkNjUyZGUzZmRiOGJlZmM4NDhhZDkyMjIyMmUwNGE0MDM3YzA3MTNlYjU3YTgxYTIzZjBjNzM0NzNmYzY0NmNlYTMwNmI0YmNiYzg4NjJmODM4NWRkZmE5ZDRiN2ZhMmMwODdlODc5NjgzMzAzZWQ1YmRkM2EwNjJiM2NmNWIzYTI3OGE2NmQyYTEzZjgzZjQ0ZjgyZGRmMzEwZWUwNzRhYjZhMzY0NTk3ZTg5OWEwMjU1ZGMxNjRmMzFjYzUwODQ2ODUxZGY5YWI0ODE5NWRlZDdlYTFiMWQ1MTBiZDdlZTc0ZDczZmFmMzZiYzMxZWNmYTI2ODM1OTA0NmY0ZWI4NzlmOTI0MDA5NDM4YjQ4MWM2Y2Q3ODg5YTAwMmVkNWVlMzgyYmM5MTkwZGE2ZmMwMjZlNDc5NTU4ZTQ0NzU2NzdlOWFhOWUzMDUwZTI3NjU2OTRkZmM4MWY1NmU4ODBiOTZlNzE2MGM5ODBkZDk4ZWRkM2RmZmZmZmZmZmZmZmZmZmZmZlwifX0nKX0sODU5NzplPT57XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtpODpcIjYuNS40XCJ9fSwyNTYyOmU9PntcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9SlNPTi5wYXJzZSgne1wiMi4xNi44NDAuMS4xMDEuMy40LjEuMVwiOlwiYWVzLTEyOC1lY2JcIixcIjIuMTYuODQwLjEuMTAxLjMuNC4xLjJcIjpcImFlcy0xMjgtY2JjXCIsXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4zXCI6XCJhZXMtMTI4LW9mYlwiLFwiMi4xNi44NDAuMS4xMDEuMy40LjEuNFwiOlwiYWVzLTEyOC1jZmJcIixcIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIxXCI6XCJhZXMtMTkyLWVjYlwiLFwiMi4xNi44NDAuMS4xMDEuMy40LjEuMjJcIjpcImFlcy0xOTItY2JjXCIsXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yM1wiOlwiYWVzLTE5Mi1vZmJcIixcIjIuMTYuODQwLjEuMTAxLjMuNC4xLjI0XCI6XCJhZXMtMTkyLWNmYlwiLFwiMi4xNi44NDAuMS4xMDEuMy40LjEuNDFcIjpcImFlcy0yNTYtZWNiXCIsXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS40MlwiOlwiYWVzLTI1Ni1jYmNcIixcIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQzXCI6XCJhZXMtMjU2LW9mYlwiLFwiMi4xNi44NDAuMS4xMDEuMy40LjEuNDRcIjpcImFlcy0yNTYtY2ZiXCJ9Jyl9fSx0PXt9O2Z1bmN0aW9uIHIobil7dmFyIGk9dFtuXTtpZih2b2lkIDAhPT1pKXJldHVybiBpLmV4cG9ydHM7dmFyIG89dFtuXT17aWQ6bixsb2FkZWQ6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsciksby5sb2FkZWQ9ITAsby5leHBvcnRzfXIuYW1kTz17fSxyLm49ZT0+e3ZhciB0PWUmJmUuX19lc01vZHVsZT8oKT0+ZS5kZWZhdWx0OigpPT5lO3JldHVybiByLmQodCx7YTp0fSksdH0sci5kPShlLHQpPT57Zm9yKHZhciBuIGluIHQpci5vKHQsbikmJiFyLm8oZSxuKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6dFtuXX0pfSxyLmc9ZnVuY3Rpb24oKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcylyZXR1cm4gZ2xvYmFsVGhpczt0cnl7cmV0dXJuIHRoaXN8fG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9Y2F0Y2goZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdylyZXR1cm4gd2luZG93fX0oKSxyLm89KGUsdCk9Pk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpLHIucj1lPT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sci5ubWQ9ZT0+KGUucGF0aHM9W10sZS5jaGlsZHJlbnx8KGUuY2hpbGRyZW49W10pLGUpO3ZhciBuPXt9O3JldHVybigoKT0+e1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGUoZSx0LHIpe3JldHVybiB0IGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09cixlfXIuZChuLHtkZWZhdWx0OigpPT5rdH0pO3ZhciB0PXIoMTY5MiksaT1yLm4odCksbz1yKDgyNjkpO2NvbnN0IHM9e1JPUFNURU46XCJyb3BzdGVuXCIsTUFJTk5FVDpcIm1haW5uZXRcIixQT0xZR09OOlwicG9seWdvbi1tYWlubmV0XCJ9LGE9W3tpbnB1dHM6W3tpbnRlcm5hbFR5cGU6XCJzdHJpbmdcIixuYW1lOlwiX3ZlcmlmaWVyXCIsdHlwZTpcInN0cmluZ1wifSx7aW50ZXJuYWxUeXBlOlwiYnl0ZXMzMlwiLG5hbWU6XCJoYXNoZWRWZXJpZmllcklkXCIsdHlwZTpcImJ5dGVzMzJcIn1dLG5hbWU6XCJnZXROb2RlU2V0XCIsb3V0cHV0czpbe2ludGVybmFsVHlwZTpcInVpbnQyNTZcIixuYW1lOlwiY3VycmVudEVwb2NoXCIsdHlwZTpcInVpbnQyNTZcIn0se2ludGVybmFsVHlwZTpcInN0cmluZ1tdXCIsbmFtZTpcInRvcnVzTm9kZUVuZHBvaW50c1wiLHR5cGU6XCJzdHJpbmdbXVwifSx7aW50ZXJuYWxUeXBlOlwidWludDI1NltdXCIsbmFtZTpcInRvcnVzTm9kZVB1YlhcIix0eXBlOlwidWludDI1NltdXCJ9LHtpbnRlcm5hbFR5cGU6XCJ1aW50MjU2W11cIixuYW1lOlwidG9ydXNOb2RlUHViWVwiLHR5cGU6XCJ1aW50MjU2W11cIn0se2ludGVybmFsVHlwZTpcInVpbnQyNTZbXVwiLG5hbWU6XCJ0b3J1c0luZGV4ZXNcIix0eXBlOlwidWludDI1NltdXCJ9XSxzdGF0ZU11dGFiaWxpdHk6XCJ2aWV3XCIsdHlwZTpcImZ1bmN0aW9uXCJ9XTtjbGFzcyBje2NvbnN0cnVjdG9yKCl7bGV0IHQse25ldHdvcms6cj1zLk1BSU5ORVQscHJveHlBZGRyZXNzOm49Yy5QUk9YWV9BRERSRVNTX01BSU5ORVR9PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtlKHRoaXMsXCJfY3VycmVudEVwb2NoXCIsXCJcIiksZSh0aGlzLFwiX3RvcnVzTm9kZUVuZHBvaW50c1wiLFtdKSxlKHRoaXMsXCJfdG9ydXNOb2RlUHViXCIsW10pLGUodGhpcyxcIl90b3J1c0luZGV4ZXNcIixbXSksZSh0aGlzLFwibm9kZUxpc3RBZGRyZXNzXCIsdm9pZCAwKSxlKHRoaXMsXCJ1cGRhdGVkXCIsdm9pZCAwKSxlKHRoaXMsXCJub2RlTGlzdENvbnRyYWN0XCIsdm9pZCAwKTt0cnl7dD1uZXcgVVJMKHIpLmhyZWZ9Y2F0Y2goZSl7Y29uc3Qgbj1cImI4Y2RiMGU0Y2ZmMjQ1OTlhMjg2YmY4ZTg3ZmYxYzk2XCI7dD1cImh0dHBzOi8vXCIuY29uY2F0KHIsXCIuaW5mdXJhLmlvL3YzL1wiKS5jb25jYXQobil9aSgpLnNldFByb3ZpZGVyKHQpLHRoaXMubm9kZUxpc3RDb250cmFjdD1uZXcoaSgpKShhLG4pLHRoaXMubm9kZUxpc3RBZGRyZXNzPW4sdGhpcy51cGRhdGVkPSExfWdldCBfbm9kZURldGFpbHMoKXtyZXR1cm57Y3VycmVudEVwb2NoOnRoaXMuX2N1cnJlbnRFcG9jaCxub2RlTGlzdEFkZHJlc3M6dGhpcy5ub2RlTGlzdEFkZHJlc3MsdG9ydXNOb2RlRW5kcG9pbnRzOnRoaXMuX3RvcnVzTm9kZUVuZHBvaW50cyx0b3J1c05vZGVQdWI6dGhpcy5fdG9ydXNOb2RlUHViLHRvcnVzSW5kZXhlczp0aGlzLl90b3J1c0luZGV4ZXMsdXBkYXRlZDp0aGlzLnVwZGF0ZWR9fWFzeW5jIGdldE5vZGVEZXRhaWxzKGUpe2xldHt2ZXJpZmllcjp0LHZlcmlmaWVySWQ6cn09ZTt0cnl7aWYodGhpcy51cGRhdGVkJiYodGhpcy5ub2RlTGlzdEFkZHJlc3M9PT1jLlBST1hZX0FERFJFU1NfTUFJTk5FVHx8dGhpcy5ub2RlTGlzdEFkZHJlc3M9PT1jLlBST1hZX0FERFJFU1NfUk9QU1RFTikpcmV0dXJuIHRoaXMuX25vZGVEZXRhaWxzO2NvbnN0IGU9KDAsby5rZWNjYWsyNTYpKHIpLG49YXdhaXQgdGhpcy5ub2RlTGlzdENvbnRyYWN0Lm1ldGhvZHMuZ2V0Tm9kZVNldCh0LGUpLmNhbGwoKSx7Y3VycmVudEVwb2NoOmksdG9ydXNOb2RlRW5kcG9pbnRzOnMsdG9ydXNOb2RlUHViWDphLHRvcnVzTm9kZVB1Ylk6Zix0b3J1c0luZGV4ZXM6dX09bjt0aGlzLl9jdXJyZW50RXBvY2g9aSx0aGlzLl90b3J1c0luZGV4ZXM9dS5tYXAoKGU9Pk51bWJlcihlKSkpO2NvbnN0IGQ9W10saD1bXTtmb3IobGV0IGU9MDtlPHMubGVuZ3RoO2UrPTEpe2NvbnN0IHQ9c1tlXSxyPWFbZV0sbj1mW2VdLGk9XCJodHRwczovL1wiLmNvbmNhdCh0LnNwbGl0KFwiOlwiKVswXSxcIi9qcnBjXCIpO2QucHVzaChpKSxoLnB1c2goe1g6KDAsby50b0hleCkocikucmVwbGFjZShcIjB4XCIsXCJcIiksWTooMCxvLnRvSGV4KShuKS5yZXBsYWNlKFwiMHhcIixcIlwiKX0pfXJldHVybiB0aGlzLl90b3J1c05vZGVFbmRwb2ludHM9ZCx0aGlzLl90b3J1c05vZGVQdWI9aCx0aGlzLnVwZGF0ZWQ9ITAsdGhpcy5fbm9kZURldGFpbHN9Y2F0Y2goZSl7aWYodGhpcy5ub2RlTGlzdEFkZHJlc3M9PT1jLlBST1hZX0FERFJFU1NfTUFJTk5FVClyZXR1cm4gYy5OT0RFX0RFVEFJTFNfTUFJTk5FVDt0aHJvdyBlfX19ZShjLFwiUFJPWFlfQUREUkVTU19NQUlOTkVUXCIsXCIweGYyMDMzNmUxNkI1MTgyNjM3ZjA5ODIxYzI3QkRlMjliMEFGY2ZlODBcIiksZShjLFwiUFJPWFlfQUREUkVTU19ST1BTVEVOXCIsXCIweDYyNThjOWQ2YzEyZWQzZWRkYTU5YTFhNjUyN2U0Njk1MTc3NDRhYTdcIiksZShjLFwiUFJPWFlfQUREUkVTU19QT0xZR09OXCIsXCIweDlmMDcyYmExOWIzMzcwZTUxMmFhMWI0YmZjZGFmOTcyODMxNjgwMDVcIiksZShjLFwiTk9ERV9ERVRBSUxTX01BSU5ORVRcIix7Y3VycmVudEVwb2NoOlwiMTlcIixub2RlTGlzdEFkZHJlc3M6Yy5QUk9YWV9BRERSRVNTX01BSU5ORVQsdG9ydXNOb2RlRW5kcG9pbnRzOltcImh0dHBzOi8vdG9ydXMtMTkudG9ydXNub2RlLmNvbS9qcnBjXCIsXCJodHRwczovL3RvcnVzLW5vZGUuZW5zLmRvbWFpbnMvanJwY1wiLFwiaHR0cHM6Ly90b3J1cy1ub2RlLm1hdGljLm5ldHdvcmsvanJwY1wiLFwiaHR0cHM6Ly90b3J1cy56aWxsaXFhLm5ldHdvcmsvanJwY1wiLFwiaHR0cHM6Ly90b3J1cy1tYWlubmV0LmNvc21vcy5uZXR3b3JrL2pycGNcIixcImh0dHBzOi8vdG9ydXMyLmV0aGVyc2Nhbi5jb20vanJwY1wiLFwiaHR0cHM6Ly90b3J1cy1ub2RlLXYyLnNrYWxlbGFicy5jb20vanJwY1wiLFwiaHR0cHM6Ly90b3J1cy1ub2RlLmJpbmFuY2V4LmRldi9qcnBjXCIsXCJodHRwczovL3RvcnVzbm9kZS5vbnQuaW8vanJwY1wiXSx0b3J1c0luZGV4ZXM6WzEsMiwzLDQsNSw2LDcsOCw5XSx0b3J1c05vZGVQdWI6W3tYOlwiYmJlODNjNjQxNzdjMzc3NTU1MGU2YmE2YWMyYmMwNTlmNjg0N2Q2NDRjOWU0ODk0ZTQyYzYwZDc5NzRkOGMyYlwiLFk6XCI4MmI0OWE3Y2FmNzBkZWYzOGNkYWQyNzQwYWY0NWMxZTRmOTY5NjUwMTA1YzUwMTlhMjliYjE4YjIxYTlhY2I1XCJ9LHtYOlwiYzIwOGNhYzRlZjlhNDdkMzg2MDk3YTljOTE1YjI4ZTljYjg5MjEzYWJlZThkMjZhMTcxOThlZTI2MTIwMWIwZFwiLFk6XCJjN2RiMmZlNDYzMTEwOWY0MDgzM2RlOWRjNzhkMDdlMzU3MDY1NDllZTQ4ZmE1NTdiMzNlNGU3NWUxMDQ3ODczXCJ9LHtYOlwiY2ExNzY2YmI0MjZkNGNhNTU4MjgxOGEwYzU0MzlkNTYwZWE2NGY1YmFhMDYwNzkzYWIyOWRkM2QwY2VhY2ZlXCIsWTpcImQ0NmMxZDA4YzQwZTEzMDZlMWJjYTMyOGMyMjg3YjgyNjgxNjZiMTFhMWJhNGI4NDQyZWEyYWQwYzVlMzIxNTJcIn0se1g6XCJjMzkzNGRkMmY2ZjRiM2QyZTFlMzk4Y2M1MDFlMTQzYzFlMWEzODFiNTJmZWI2ZDE1MjVhZjM0ZDE2MjUzNzY4XCIsWTpcIjcxZjUxNDFhNTAzNTc5OTA5OWY1ZWEzZTI0MWU2Njk0NmJjNTVkYzg1N2FjM2JkN2Q2ZmNkYjhkY2QzZWVlZWZcIn0se1g6XCIyMmU2NmYxOTI5NjMxZDAwYmYwMjYyMjc1ODE1OTdmMDg1ZmQ5NGZkOTUyZmMwZGNhOWYwODMzMzk4YjVjMDY0XCIsWTpcIjYwODhiMzkxMmUxMGExZTlkNTAzNTVhNjA5YzEwZGI3ZDE4OGYxNmEyZTJmZDczNTdlNTFiZjRmNmE3NGYwYTFcIn0se1g6XCI5ZGM5ZmE0MTBmM2NlOWViNzBkZjcwY2RlYTAwYTQ5ZjJjNGNjN2EzMWMwOGMwZGFiNWY4NjNlZDM1ZmY1MTM5XCIsWTpcIjYyN2EyOTFjYjg3YTc1YzYxZGEzZjY1ZDY4MThlMWUwNWUzNjAyMTcxNzk4MTdlZDI3ZThjNzNiY2E3ZWMxMjJcIn0se1g6XCIxMThiOWZjMDdlOTdiMDk2ZDg5OWI5ZjY2NTg0NjNjZTZhOGNhYTY0MDM4ZTM3ZmM5NjlkZjRlNjAyM2RkOGM2XCIsWTpcImJhZjlmYTRlNTE3NzBmNDc5NmVhMTY1ZGQwM2E3NjliODYwNjY4MWEzODk1NGEwYTkyYzRjYmZmZDY2MDljZTlcIn0se1g6XCI4YTZkOGI5MjVkYTE1YTI3M2RlYzNkOGY4Mzk1ZWMzNWNkNjg3OGYyNzRiMmIxODBlNGUxMDY5OTlkYjY0MDQzXCIsWTpcIjk2ZjY3Zjg3MGMxNTc3NDNkYTBiMWViODRkODliZjMwNTAwZDc0ZGM4NGMxMWY1MDFlZTFjYjAxM2FjYzhjNDZcIn0se1g6XCIzOWNlY2I2MmU4NjM3MjlmNTcyZjdkZmM0NmMyNDg2Nzk4MWJmMDRiYjQwNWZlZDBkZjM5ZTMzOTg0YmZhZGU1XCIsWTpcIjYxYzIzNjQ0MzQwMTJlNjhhMmJlMmU5OTUyODA1MDM3ZTUyNjI5ZDc3NjJmYWZjOGUxMGU5ZmI1YmFkOGY3OTBcIn1dLHVwZGF0ZWQ6ITF9KTt2YXIgZj1yKDIzNzgpLHU9ci5uKGYpLGQ9cigyMDQzKSxoPXIubihkKTtmdW5jdGlvbiBsKGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYobj1uLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpKSxyLnB1c2guYXBwbHkocixuKX1yZXR1cm4gcn1mdW5jdGlvbiBwKHQpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3ZhciBuPW51bGwhPWFyZ3VtZW50c1tyXT9hcmd1bWVudHNbcl06e307ciUyP2woT2JqZWN0KG4pLCEwKS5mb3JFYWNoKChmdW5jdGlvbihyKXtlKHQscixuW3JdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG4pKTpsKE9iamVjdChuKSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sZSkpfSkpfXJldHVybiB0fWNvbnN0IGI9aCgpLmdldExvZ2dlcihcImh0dHAtaGVscGVyc1wiKTtiLnNldExldmVsKGQubGV2ZWxzLklORk8pO2xldCB5PVwidG9ydXMtZGVmYXVsdFwiLGc9XCJcIjtmdW5jdGlvbiBtKGUpe2c9ZX1mdW5jdGlvbiB2KGUpe3k9ZX1hc3luYyBmdW5jdGlvbiB3KGUsdCl7bGV0IHI9bnVsbDt0cnl7cj1uZXcgVVJMKGUpfWNhdGNoKGUpe31yZXR1cm4gZmV0Y2goZSx0KX1mdW5jdGlvbiBfKCl7Y29uc3QgZT17fTtyZXR1cm4geSYmKGVbXCJ4LWFwaS1rZXlcIl09eSksZyYmKGVbXCJ4LWVtYmVkLWhvc3RcIl09ZyksZX1mdW5jdGlvbiBTKGUpe2IuaW5mbyhcIlJlc3BvbnNlOiBcIi5jb25jYXQoZS5zdGF0dXMsXCIgXCIpLmNvbmNhdChlLnN0YXR1c1RleHQpKSxiLmluZm8oXCJVcmw6IFwiLmNvbmNhdChlLnVybCkpfWNvbnN0IEU9KGUsdCk9Pntjb25zdCByPW5ldyBQcm9taXNlKCgodCxyKT0+e2NvbnN0IG49c2V0VGltZW91dCgoKCk9PntjbGVhclRpbWVvdXQobikscihuZXcgRXJyb3IoXCJUaW1lZCBvdXQgaW4gXCIuY29uY2F0KGUsXCJtc1wiKSkpfSksZSl9KSk7cmV0dXJuIFByb21pc2UucmFjZShbdCxyXSl9LEE9YXN5bmMgZnVuY3Rpb24oZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O2NvbnN0IG49e21vZGU6XCJjb3JzXCIsaGVhZGVyczp7fX07ci51c2VBUElLZXkmJihuLmhlYWRlcnM9cChwKHt9LG4uaGVhZGVycyksXygpKSk7Y29uc3QgaT11KCkobix0LHttZXRob2Q6XCJHRVRcIn0pLG89YXdhaXQgdyhlLGkpO2lmKG8ub2spcmV0dXJuIG8uanNvbigpO3Rocm93IFMobyksb30seD1mdW5jdGlvbihlKXtsZXQgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e30sbj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106e307Y29uc3QgaT17bW9kZTpcImNvcnNcIixoZWFkZXJzOntcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwifX07bi51c2VBUElLZXkmJihpLmhlYWRlcnM9cChwKHt9LGkuaGVhZGVycyksXygpKSk7Y29uc3Qgbz11KCkoaSxyLHttZXRob2Q6XCJQT1NUXCJ9KTtyZXR1cm4gbi5pc1VybEVuY29kZWREYXRhPyhvLmJvZHk9dCxcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIj09PW8uaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSYmZGVsZXRlIG8uaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSk6by5ib2R5PUpTT04uc3RyaW5naWZ5KHQpLEUobi50aW1lb3V0fHw2ZTQsdyhlLG8pLnRoZW4oKGU9PntpZihlLm9rKXJldHVybiBlLmpzb24oKTt0aHJvdyBTKGUpLGV9KSkpfSxrPShlLHQpPT4oe2pzb25ycGM6XCIyLjBcIixtZXRob2Q6ZSxpZDoxMCxwYXJhbXM6dH0pO3ZhciBQPXIoODQ3MyksTz1yKDE3OTgpLE09ci5uKE8pLEk9KHIoMzM2Mykscig1ODExKSksVD1yLm4oSSk7cig4NzY0KS5CdWZmZXIsVVJMO3ZhciBSPXIoNzE4NyksTj1yKDQ0NDUpLEM9ci5uKE4pLGo9cig5ODI2KSxCPXIoMjg0MCksTD1yLm4oQiksRD1yKDc3OCksVT1yLm4oRCkscT1yKDQyODYpLEY9ci5uKHEpO2Z1bmN0aW9uIEgoKXt9Y29uc3Qgej1cIkFDS1wiO2NsYXNzIEsgZXh0ZW5kcyBQLkR1cGxleHtjb25zdHJ1Y3Rvcih0KXtsZXR7bmFtZTpyLHRhcmdldDpuLHRhcmdldFdpbmRvdzppPXdpbmRvdyx0YXJnZXRPcmlnaW46bz1cIipcIn09dDtpZihzdXBlcih7b2JqZWN0TW9kZTohMH0pLGUodGhpcyxcIl9pbml0XCIsdm9pZCAwKSxlKHRoaXMsXCJfaGF2ZVN5blwiLHZvaWQgMCksZSh0aGlzLFwiX25hbWVcIix2b2lkIDApLGUodGhpcyxcIl90YXJnZXRcIix2b2lkIDApLGUodGhpcyxcIl90YXJnZXRXaW5kb3dcIix2b2lkIDApLGUodGhpcyxcIl90YXJnZXRPcmlnaW5cIix2b2lkIDApLGUodGhpcyxcIl9vbk1lc3NhZ2VcIix2b2lkIDApLGUodGhpcyxcIl9zeW5JbnRlcnZhbElkXCIsdm9pZCAwKSwhcnx8IW4pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbnB1dC5cIik7dGhpcy5faW5pdD0hMSx0aGlzLl9oYXZlU3luPSExLHRoaXMuX25hbWU9cix0aGlzLl90YXJnZXQ9bix0aGlzLl90YXJnZXRXaW5kb3c9aSx0aGlzLl90YXJnZXRPcmlnaW49byx0aGlzLl9vbk1lc3NhZ2U9dGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKSx0aGlzLl9zeW5JbnRlcnZhbElkPW51bGwsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsdGhpcy5fb25NZXNzYWdlLCExKSx0aGlzLl9oYW5kU2hha2UoKX1fYnJlYWsoKXt0aGlzLmNvcmsoKSx0aGlzLl93cml0ZShcIkJSS1wiLG51bGwsSCksdGhpcy5faGF2ZVN5bj0hMSx0aGlzLl9pbml0PSExfV9oYW5kU2hha2UoKXt0aGlzLl93cml0ZShcIlNZTlwiLG51bGwsSCksdGhpcy5jb3JrKCl9X29uRGF0YShlKXtpZih0aGlzLl9pbml0KWlmKFwiQlJLXCI9PT1lKXRoaXMuX2JyZWFrKCk7ZWxzZSB0cnl7dGhpcy5wdXNoKGUpfWNhdGNoKGUpe3RoaXMuZW1pdChcImVycm9yXCIsZSl9ZWxzZVwiU1lOXCI9PT1lPyh0aGlzLl9oYXZlU3luPSEwLHRoaXMuX3dyaXRlKHosbnVsbCxIKSk6ZT09PXomJih0aGlzLl9pbml0PSEwLHRoaXMuX2hhdmVTeW58fHRoaXMuX3dyaXRlKHosbnVsbCxIKSx0aGlzLnVuY29yaygpKX1fcG9zdE1lc3NhZ2UoZSl7Y29uc3QgdD10aGlzLl90YXJnZXRPcmlnaW47dGhpcy5fdGFyZ2V0V2luZG93LnBvc3RNZXNzYWdlKHt0YXJnZXQ6dGhpcy5fdGFyZ2V0LGRhdGE6ZX0sdCl9b25NZXNzYWdlKGUpe2NvbnN0IHQ9ZS5kYXRhO1wiKlwiIT09dGhpcy5fdGFyZ2V0T3JpZ2luJiZlLm9yaWdpbiE9PXRoaXMuX3RhcmdldE9yaWdpbnx8ZS5zb3VyY2UhPT10aGlzLl90YXJnZXRXaW5kb3d8fFwib2JqZWN0XCIhPXR5cGVvZiB0fHx0LnRhcmdldCE9PXRoaXMuX25hbWV8fCF0LmRhdGF8fHRoaXMuX29uRGF0YSh0LmRhdGEpfV9yZWFkKCl7fV93cml0ZShlLHQscil7dGhpcy5fcG9zdE1lc3NhZ2UoZSkscigpfV9kZXN0cm95KCl7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsdGhpcy5fb25NZXNzYWdlLCExKX19ZnVuY3Rpb24gVihlLHQscil7dHJ5e1JlZmxlY3QuYXBwbHkoZSx0LHIpfWNhdGNoKGUpe3NldFRpbWVvdXQoKCgpPT57dGhyb3cgZX0pKX19Y2xhc3MgRyBleHRlbmRzIFIuRXZlbnRFbWl0dGVye2VtaXQoZSl7bGV0IHQ9XCJlcnJvclwiPT09ZTtjb25zdCByPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1yKXQ9dCYmdm9pZCAwPT09ci5lcnJvcjtlbHNlIGlmKCF0KXJldHVybiExO2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KG4+MT9uLTE6MCksbz0xO288bjtvKyspaVtvLTFdPWFyZ3VtZW50c1tvXTtpZih0KXtsZXQgZTtpZihpLmxlbmd0aD4wJiYoW2VdPWkpLGUgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBlO2NvbnN0IHQ9bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiLmNvbmNhdChlP1wiIChcIi5jb25jYXQoZS5tZXNzYWdlLFwiKVwiKTpcIlwiKSk7dGhyb3cgdC5jb250ZXh0PWUsdH1jb25zdCBzPXJbZV07aWYodm9pZCAwPT09cylyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBzKVYocyx0aGlzLGkpO2Vsc2V7Y29uc3QgZT1zLmxlbmd0aCx0PWZ1bmN0aW9uKGUpe2NvbnN0IHQ9ZS5sZW5ndGgscj1uZXcgQXJyYXkodCk7Zm9yKGxldCBuPTA7bjx0O24rPTEpcltuXT1lW25dO3JldHVybiByfShzKTtmb3IobGV0IHI9MDtyPGU7cis9MSlWKHRbcl0sdGhpcyxpKX1yZXR1cm4hMH19Y2xhc3MgVyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHQpe2xldHtjb2RlOnIsbWVzc2FnZTpuLGRhdGE6aX09dDtpZighTnVtYmVyLmlzSW50ZWdlcihyKSl0aHJvdyBuZXcgRXJyb3IoXCJjb2RlIG11c3QgYmUgYW4gaW50ZWdlclwiKTtpZighbnx8XCJzdHJpbmdcIiE9dHlwZW9mIG4pdGhyb3cgbmV3IEVycm9yKFwibWVzc2FnZSBtdXN0IGJlIHN0cmluZ1wiKTtzdXBlcihuKSxlKHRoaXMsXCJjb2RlXCIsdm9pZCAwKSxlKHRoaXMsXCJkYXRhXCIsdm9pZCAwKSx0aGlzLmNvZGU9cix2b2lkIDAhPT1pJiYodGhpcy5kYXRhPWkpfXRvU3RyaW5nKCl7cmV0dXJuIEMoKSh7Y29kZTp0aGlzLmNvZGUsbWVzc2FnZTp0aGlzLm1lc3NhZ2UsZGF0YTp0aGlzLmRhdGEsc3RhY2s6dGhpcy5zdGFja30pfX1mdW5jdGlvbiBYKGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYobj1uLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpKSxyLnB1c2guYXBwbHkocixuKX1yZXR1cm4gcn1jbGFzcyBZIGV4dGVuZHMgR3tjb25zdHJ1Y3Rvcigpe3N1cGVyKCksZSh0aGlzLFwiX21pZGRsZXdhcmVcIix2b2lkIDApLHRoaXMuX21pZGRsZXdhcmU9W119c3RhdGljIGFzeW5jIF9ydW5BbGxNaWRkbGV3YXJlKGUsdCxyKXtjb25zdCBuPVtdO2xldCBpPW51bGwsbz0hMTtmb3IoY29uc3QgcyBvZiByKWlmKFtpLG9dPWF3YWl0IFkuX3J1bk1pZGRsZXdhcmUoZSx0LHMsbiksbylicmVhaztyZXR1cm5baSxvLG4ucmV2ZXJzZSgpXX1zdGF0aWMgX3J1bk1pZGRsZXdhcmUoZSx0LHIsbil7cmV0dXJuIG5ldyBQcm9taXNlKChpPT57Y29uc3Qgbz1lPT57Y29uc3Qgcj1lfHx0LmVycm9yO3ImJih0LmVycm9yPSgwLGouWHkpKHIpKSxpKFtyLCEwXSl9LHM9ZT0+e3QuZXJyb3I/byh0LmVycm9yKTooZSYmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm8obmV3IFcoe2NvZGU6LTMyNjAzLG1lc3NhZ2U6XCJKUlBDRW5naW5lOiAnbmV4dCcgcmV0dXJuIGhhbmRsZXJzIG11c3QgYmUgZnVuY3Rpb25zXCJ9KSksbi5wdXNoKGUpKSxpKFtudWxsLCExXSkpfTt0cnl7cihlLHQscyxvKX1jYXRjaChlKXtvKGUpfX0pKX1zdGF0aWMgYXN5bmMgX3J1blJldHVybkhhbmRsZXJzKGUpe2Zvcihjb25zdCB0IG9mIGUpYXdhaXQgbmV3IFByb21pc2UoKChlLHIpPT57dCgodD0+dD9yKHQpOmUoKSkpfSkpfXN0YXRpYyBfY2hlY2tGb3JDb21wbGV0aW9uKGUsdCxyKXtpZighKFwicmVzdWx0XCJpbiB0KSYmIShcImVycm9yXCJpbiB0KSl0aHJvdyBuZXcgVyh7Y29kZTotMzI2MDMsbWVzc2FnZTpcIlJlc3BvbnNlIGhhcyBubyBlcnJvciBvciByZXN1bHQgZm9yIHJlcXVlc3RcIn0pO2lmKCFyKXRocm93IG5ldyBXKHtjb2RlOi0zMjYwMyxtZXNzYWdlOlwiTm90aGluZyBlbmRlZCByZXF1ZXN0XCJ9KX1wdXNoKGUpe3RoaXMuX21pZGRsZXdhcmUucHVzaChlKX1oYW5kbGUoZSx0KXtpZih0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcignXCJjYWxsYmFja1wiIG11c3QgYmUgYSBmdW5jdGlvbiBpZiBwcm92aWRlZC4nKTtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT90P3RoaXMuX2hhbmRsZUJhdGNoKGUsdCk6dGhpcy5faGFuZGxlQmF0Y2goZSk6dD90aGlzLl9oYW5kbGUoZSx0KTp0aGlzLl9wcm9taXNlSGFuZGxlKGUpfWFzTWlkZGxld2FyZSgpe3JldHVybiBhc3luYyhlLHQscixuKT0+e3RyeXtjb25zdFtpLG8sc109YXdhaXQgWS5fcnVuQWxsTWlkZGxld2FyZShlLHQsdGhpcy5fbWlkZGxld2FyZSk7cmV0dXJuIG8/KGF3YWl0IFkuX3J1blJldHVybkhhbmRsZXJzKHMpLG4oaSkpOnIoKGFzeW5jIGU9Pnt0cnl7YXdhaXQgWS5fcnVuUmV0dXJuSGFuZGxlcnMocyl9Y2F0Y2godCl7cmV0dXJuIGUodCl9cmV0dXJuIGUoKX0pKX1jYXRjaChlKXtyZXR1cm4gbihlKX19fWFzeW5jIF9oYW5kbGVCYXRjaChlLHQpe3RyeXtjb25zdCByPWF3YWl0IFByb21pc2UuYWxsKGUubWFwKHRoaXMuX3Byb21pc2VIYW5kbGUuYmluZCh0aGlzKSkpO3JldHVybiB0P3QobnVsbCxyKTpyfWNhdGNoKGUpe2lmKHQpcmV0dXJuIHQoZSk7dGhyb3cgZX19X3Byb21pc2VIYW5kbGUoZSl7cmV0dXJuIG5ldyBQcm9taXNlKCh0PT57dGhpcy5faGFuZGxlKGUsKChlLHIpPT57dChyKX0pKX0pKX1hc3luYyBfaGFuZGxlKHQscil7aWYoIXR8fEFycmF5LmlzQXJyYXkodCl8fFwib2JqZWN0XCIhPXR5cGVvZiB0KXtjb25zdCBlPW5ldyBXKHtjb2RlOi0zMjYwMyxtZXNzYWdlOlwicmVxdWVzdCBtdXN0IGJlIHBsYWluIG9iamVjdFwifSk7cmV0dXJuIHIoZSx7aWQ6dm9pZCAwLGpzb25ycGM6XCIyLjBcIixlcnJvcjplfSl9aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQubWV0aG9kKXtjb25zdCBlPW5ldyBXKHtjb2RlOi0zMjYwMyxtZXNzYWdlOlwibWV0aG9kIG11c3QgYmUgc3RyaW5nXCJ9KTtyZXR1cm4gcihlLHtpZDp0LmlkLGpzb25ycGM6XCIyLjBcIixlcnJvcjplfSl9Y29uc3Qgbj1mdW5jdGlvbih0KXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt2YXIgbj1udWxsIT1hcmd1bWVudHNbcl0/YXJndW1lbnRzW3JdOnt9O3IlMj9YKE9iamVjdChuKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24ocil7ZSh0LHIsbltyXSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhuKSk6WChPYmplY3QobikpLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLGUpKX0pKX1yZXR1cm4gdH0oe30sdCksaT17aWQ6bi5pZCxqc29ucnBjOm4uanNvbnJwY307bGV0IG89bnVsbDt0cnl7YXdhaXQgdGhpcy5fcHJvY2Vzc1JlcXVlc3QobixpKX1jYXRjaChlKXtvPWV9cmV0dXJuIG8mJihkZWxldGUgaS5yZXN1bHQsaS5lcnJvcnx8KGkuZXJyb3I9KDAsai5YeSkobykpKSxyKG8saSl9YXN5bmMgX3Byb2Nlc3NSZXF1ZXN0KGUsdCl7Y29uc3RbcixuLGldPWF3YWl0IFkuX3J1bkFsbE1pZGRsZXdhcmUoZSx0LHRoaXMuX21pZGRsZXdhcmUpO2lmKFkuX2NoZWNrRm9yQ29tcGxldGlvbihlLHQsbiksYXdhaXQgWS5fcnVuUmV0dXJuSGFuZGxlcnMoaSkscil0aHJvdyByfX1jbGFzcyBKIGV4dGVuZHMgUC5EdXBsZXh7Y29uc3RydWN0b3IodCl7bGV0e3BhcmVudDpyLG5hbWU6bn09dDtzdXBlcih7b2JqZWN0TW9kZTohMH0pLGUodGhpcyxcIl9wYXJlbnRcIix2b2lkIDApLGUodGhpcyxcIl9uYW1lXCIsdm9pZCAwKSx0aGlzLl9wYXJlbnQ9cix0aGlzLl9uYW1lPW59X3JlYWQoKXt9X3dyaXRlKGUsdCxyKXt0aGlzLl9wYXJlbnQucHVzaCh7bmFtZTp0aGlzLl9uYW1lLGRhdGE6ZX0pLHIoKX19ZnVuY3Rpb24gJChlLHQpe3ZhciByPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKG49bi5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gWih0KXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt2YXIgbj1udWxsIT1hcmd1bWVudHNbcl0/YXJndW1lbnRzW3JdOnt9O3IlMj8kKE9iamVjdChuKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24ocil7ZSh0LHIsbltyXSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhuKSk6JChPYmplY3QobikpLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLGUpKX0pKX1yZXR1cm4gdH1jb25zdCBRPVN5bWJvbChcIklHTk9SRV9TVUJTVFJFQU1cIik7Y2xhc3MgZWUgZXh0ZW5kcyBQLkR1cGxleHtjb25zdHJ1Y3Rvcigpe3N1cGVyKFooWih7fSxhcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30pLHt9LHtvYmplY3RNb2RlOiEwfSkpLGUodGhpcyxcIl9zdWJzdHJlYW1zXCIsdm9pZCAwKSxlKHRoaXMsXCJnZXRTdHJlYW1cIix2b2lkIDApLHRoaXMuX3N1YnN0cmVhbXM9e319Y3JlYXRlU3RyZWFtKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIk9iamVjdE11bHRpcGxleCAtIG5hbWUgbXVzdCBub3QgYmUgZW1wdHlcIik7aWYodGhpcy5fc3Vic3RyZWFtc1tlXSl0aHJvdyBuZXcgRXJyb3IoJ09iamVjdE11bHRpcGxleCAtIFN1YnN0cmVhbSBmb3IgbmFtZSBcIicuY29uY2F0KGUsJ1wiIGFscmVhZHkgZXhpc3RzJykpO2NvbnN0IHQ9bmV3IEooe3BhcmVudDp0aGlzLG5hbWU6ZX0pO3JldHVybiB0aGlzLl9zdWJzdHJlYW1zW2VdPXQsZnVuY3Rpb24oZSxyKXtjb25zdCBuPVUoKSgoZT0+dC5kZXN0cm95KGV8fHZvaWQgMCkpKTtMKCkoZSx7cmVhZGFibGU6ITF9LG4pLEwoKShlLHt3cml0YWJsZTohMX0sbil9KHRoaXMpLHR9aWdub3JlU3RyZWFtKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIk9iamVjdE11bHRpcGxleCAtIG5hbWUgbXVzdCBub3QgYmUgZW1wdHlcIik7aWYodGhpcy5fc3Vic3RyZWFtc1tlXSl0aHJvdyBuZXcgRXJyb3IoJ09iamVjdE11bHRpcGxleCAtIFN1YnN0cmVhbSBmb3IgbmFtZSBcIicuY29uY2F0KGUsJ1wiIGFscmVhZHkgZXhpc3RzJykpO3RoaXMuX3N1YnN0cmVhbXNbZV09UX1fcmVhZCgpe31fd3JpdGUoZSx0LHIpe2NvbnN0e25hbWU6bixkYXRhOml9PWU7aWYoIW4pcmV0dXJuIHdpbmRvdy5jb25zb2xlLndhcm4oJ09iamVjdE11bHRpcGxleCAtIG1hbGZvcm1lZCBjaHVuayB3aXRob3V0IG5hbWUgXCInLmNvbmNhdChlLCdcIicpKSxyKCk7Y29uc3Qgbz10aGlzLl9zdWJzdHJlYW1zW25dO3JldHVybiBvPyhvIT09USYmby5wdXNoKGkpLHIoKSk6KHdpbmRvdy5jb25zb2xlLndhcm4oJ09iamVjdE11bHRpcGxleCAtIG9ycGhhbmVkIGRhdGEgZm9yIHN0cmVhbSBcIicuY29uY2F0KG4sJ1wiJykpLHIoKSl9fXZhciB0ZT1yKDI0NTApLHJlPXIoMzU1MCksbmU9ci5uKHJlKSxpZT1yKDYyNjYpLG9lPXIoNzI2Niksc2U9ci5uKG9lKSxhZT1yKDg3NjQpLkJ1ZmZlcjtjb25zdCBjZT1oKCkuZ2V0TG9nZ2VyKFwidG9ydXMuanNcIik7Y2UuZGlzYWJsZUFsbCgpO2NsYXNzIGZlIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IodCl7bGV0e2Vycm9yczpyLHJlc3BvbnNlczpuLHByZWRpY2F0ZTppfT10O3N1cGVyKFwiVW5hYmxlIHRvIHJlc29sdmUgZW5vdWdoIHByb21pc2VzLlwiKSxlKHRoaXMsXCJlcnJvcnNcIix2b2lkIDApLGUodGhpcyxcInJlc3BvbnNlc1wiLHZvaWQgMCksZSh0aGlzLFwicHJlZGljYXRlXCIsdm9pZCAwKSx0aGlzLmVycm9ycz1yLHRoaXMucmVzcG9uc2VzPW4sdGhpcy5wcmVkaWNhdGU9aX19Y29uc3QgdWU9KGUsdCk9Pm5ldyBQcm9taXNlKCgocixuKT0+e2xldCBpPTA7Y29uc3Qgbz17cmVzb2x2ZWQ6ITF9LHM9bmV3IEFycmF5KGUubGVuZ3RoKS5maWxsKHZvaWQgMCksYT1uZXcgQXJyYXkoZS5sZW5ndGgpLmZpbGwodm9pZCAwKTtsZXQgYztyZXR1cm4gZS5mb3JFYWNoKCgoZix1KT0+Zi50aGVuKChlPT57YVt1XT1lfSkpLmNhdGNoKChlPT57c1t1XT1lfSkpLmZpbmFsbHkoKCgpPT57aWYoIW8ucmVzb2x2ZWQpcmV0dXJuIHQoYS5zbGljZSgwKSxvKS50aGVuKChlPT57by5yZXNvbHZlZD0hMCxyKGUpfSkpLmNhdGNoKChlPT57Yz1lfSkpLmZpbmFsbHkoKCgpPT57aWYoaSs9MSxpPT09ZS5sZW5ndGgpe2NvbnN0IGU9T2JqZWN0LnZhbHVlcyhhLnJlZHVjZSgoKGUsdCk9PntpZih0KXt2YXIgcjtjb25zdHtpZDppLGVycm9yOm99PXQ7KG51bGw9PW98fG51bGw9PT0ocj1vLmRhdGEpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmxlbmd0aCk+MCYmKG8uZGF0YS5zdGFydHNXaXRoKFwiRXJyb3Igb2NjdXJyZWQgd2hpbGUgdmVyaWZ5aW5nIHBhcmFtc1wiKT9lW2ldPShuPW8uZGF0YSkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTplW2ldPW8uZGF0YSl9dmFyIG47cmV0dXJuIGV9KSx7fSkpO2lmKGUubGVuZ3RoPjApe2NvbnN0IHQ9ZS5sZW5ndGg+MT9gXFxuJHtlLm1hcCgoZT0+YOKAoiAke2V9YCkpLmpvaW4oXCJcXG5cIil9YDplWzBdO24obmV3IEVycm9yKHQpKX1lbHNle3ZhciB0O24obmV3IGZlKHtlcnJvcnM6cyxyZXNwb25zZXM6YSxwcmVkaWNhdGU6KG51bGw9PT0odD1jKXx8dm9pZCAwPT09dD92b2lkIDA6dC5tZXNzYWdlKXx8Y30pKX19fSkpfSkpKSl9KSk7ZnVuY3Rpb24gZGUoZSx0KXt2YXIgcj1PYmplY3Qua2V5cyhlKTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO3QmJihuPW4uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KSkpLHIucHVzaC5hcHBseShyLG4pfXJldHVybiByfWZ1bmN0aW9uIGhlKHQpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3ZhciBuPW51bGwhPWFyZ3VtZW50c1tyXT9hcmd1bWVudHNbcl06e307ciUyP2RlKE9iamVjdChuKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24ocil7ZSh0LHIsbltyXSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhuKSk6ZGUoT2JqZWN0KG4pKS5mb3JFYWNoKChmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobixlKSl9KSl9cmV0dXJuIHR9Y2xhc3MgbGUgZXh0ZW5kcyBFcnJvcnt9Y29uc3QgcGU9KGUsdCk9PntsZXQgcj1lO2lmKFwibnVtYmVyXCI9PXR5cGVvZiByJiYocj1BcnJheS5mcm9tKHtsZW5ndGg6cn0sKChlLHQpPT50KSkpLHQ+ci5sZW5ndGh8fHQ8PTApcmV0dXJuW107aWYodD09PXIubGVuZ3RoKXJldHVybltyXTtpZigxPT09dClyZXR1cm4gci5yZWR1Y2UoKChlLHQpPT5bLi4uZSxbdF1dKSxbXSk7Y29uc3Qgbj1bXTtsZXQgaT1bXTtmb3IobGV0IGU9MDtlPD1yLmxlbmd0aC10KzE7ZSs9MSl7aT1wZShyLnNsaWNlKGUrMSksdC0xKTtmb3IobGV0IHQ9MDt0PGkubGVuZ3RoO3QrPTEpbi5wdXNoKFtyW2VdLC4uLmlbdF1dKX1yZXR1cm4gbn0sYmU9KGUsdCk9Pntjb25zdCByPXt9O2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bis9MSl7Y29uc3QgaT1zZSgpKGVbbl0pO2lmKHJbaV09cltpXT9yW2ldKzE6MSxyW2ldPT09dClyZXR1cm4gZVtuXX19LHllPWFzeW5jKGUsdCxyKT0+e2NvbnN0IG49ZS5tYXAoKGU9PngoZSxrKFwiVmVyaWZpZXJMb29rdXBSZXF1ZXN0XCIse3ZlcmlmaWVyOnQsdmVyaWZpZXJfaWQ6ci50b1N0cmluZygpfSkpLmNhdGNoKChlPT5jZS5lcnJvcihcImxvb2t1cCByZXF1ZXN0IGZhaWxlZFwiLGUpKSkpKTtyZXR1cm4gdWUobiwodD0+e2NvbnN0IHI9dC5maWx0ZXIoKGU9PmUpKSxuPWJlKHIubWFwKChlPT5lJiZlLmVycm9yKSksMSt+fihlLmxlbmd0aC8yKSksaT1iZShyLm1hcCgoZT0+ZSYmZS5yZXN1bHQpKSwxK35+KGUubGVuZ3RoLzIpKTtyZXR1cm4gaXx8bj9Qcm9taXNlLnJlc29sdmUoe2tleVJlc3VsdDppLGVycm9yUmVzdWx0Om59KTpQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYGludmFsaWQgcmVzdWx0cyAke0pTT04uc3RyaW5naWZ5KHQpfWApKX0pKX0sZ2U9KGUsdCxyLG4pPT5uZXcgUHJvbWlzZSgoKGksbyk9PntzZXRUaW1lb3V0KCgoKT0+e3llKGUsdCxyKS50aGVuKGkpLmNhdGNoKG8pfSksbil9KSksbWU9YXN5bmMgZT0+e2xldCB0LHIse2VuZHBvaW50czpuLHRvcnVzTm9kZVB1YnM6aSxsYXN0UG9pbnQ6byxmaXJzdFBvaW50OnMsdmVyaWZpZXI6YSx2ZXJpZmllcklkOmMsc2lnbmVySG9zdDpmLG5ldHdvcms6dX09ZTtpZih2b2lkIDA9PT1vPyh0PU1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpuLmxlbmd0aCkscj10KTp0PW8lbi5sZW5ndGgsdD09PXMpdGhyb3cgbmV3IEVycm9yKFwiTG9vcGVkIHRocm91Z2ggYWxsXCIpO3ZvaWQgMCE9PXMmJihyPXMpO2NvbnN0IGQ9ayhcIktleUFzc2lnblwiLHt2ZXJpZmllcjphLHZlcmlmaWVyX2lkOmMudG9TdHJpbmcoKX0pO3RyeXtjb25zdCBlPWF3YWl0IHgoZixkLHtoZWFkZXJzOntwdWJLZXlYOmlbdF0uWCxwdWJLZXlZOmlbdF0uWSxuZXR3b3JrOnV9fSx7dXNlQVBJS2V5OiEwfSk7cmV0dXJuIGF3YWl0IHgoblt0XSxoZShoZSh7fSxkKSxlKSx7aGVhZGVyczp7XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIn19KX1jYXRjaChlKXtpZihjZS5lcnJvcihlKSxbXCJUaW1lZCBvdXRcIixcIlR5cGVFcnJvcjogRmFpbGVkIHRvIGZldGNoXCIsXCJUeXBlRXJyb3I6IGNhbmNlbGxlZFwiLFwiVHlwZUVycm9yOiBOZXR3b3JrRXJyb3Igd2hlbiBhdHRlbXB0aW5nIHRvIGZldGNoIHJlc291cmNlLlwiXS5pbmNsdWRlcyhlLm1lc3NhZ2UpKXJldHVybiBtZSh7ZW5kcG9pbnRzOm4sdG9ydXNOb2RlUHViczppLGxhc3RQb2ludDp0KzEsZmlyc3RQb2ludDpyLHZlcmlmaWVyOmEsdmVyaWZpZXJJZDpjLHNpZ25lckhvc3Q6ZixuZXR3b3JrOnV9KTt0aHJvdyBuZXcgRXJyb3IoYFNvcnJ5LCB0aGUgVG9ydXMgTmV0d29yayB0aGF0IHBvd2VycyBXZWIzQXV0aCBpcyBjdXJyZW50bHkgdmVyeSBidXN5LlxcbiAgICBXZSB3aWxsIGdlbmVyYXRlIHlvdXIga2V5IGluIHRpbWUuIFBscyB0cnkgYWdhaW4gbGF0ZXIuIFxcblxcbiAgICAke2UubWVzc2FnZXx8XCJcIn1gKX19O2Z1bmN0aW9uIHZlKGUpe3JldHVybmAweCR7VCgpKFwia2VjY2FrMjU2XCIpLnVwZGF0ZShlKS5kaWdlc3QoKS50b1N0cmluZyhcImhleFwiKX1gfWZ1bmN0aW9uIHdlKGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYobj1uLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpKSxyLnB1c2guYXBwbHkocixuKX1yZXR1cm4gcn1mdW5jdGlvbiBfZSh0KXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt2YXIgbj1udWxsIT1hcmd1bWVudHNbcl0/YXJndW1lbnRzW3JdOnt9O3IlMj93ZShPYmplY3QobiksITApLmZvckVhY2goKGZ1bmN0aW9uKHIpe2UodCxyLG5bcl0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobikpOndlKE9iamVjdChuKSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sZSkpfSkpfXJldHVybiB0fWNsYXNzIFNle2NvbnN0cnVjdG9yKCl7bGV0e2VuYWJsZU9uZUtleTp0PSExLG1ldGFkYXRhSG9zdDpyPVwiaHR0cHM6Ly9tZXRhZGF0YS50b3IudXNcIixhbGxvd0hvc3Q6bj1cImh0dHBzOi8vc2lnbmVyLnRvci51cy9hcGkvYWxsb3dcIixzaWduZXJIb3N0Omk9XCJodHRwczovL3NpZ25lci50b3IudXMvYXBpL3NpZ25cIixzZXJ2ZXJUaW1lT2Zmc2V0Om89MCxuZXR3b3JrOnM9XCJtYWlubmV0XCJ9PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtlKHRoaXMsXCJtZXRhZGF0YUhvc3RcIix2b2lkIDApLGUodGhpcyxcImFsbG93SG9zdFwiLHZvaWQgMCksZSh0aGlzLFwic2VydmVyVGltZU9mZnNldFwiLHZvaWQgMCksZSh0aGlzLFwiZW5hYmxlT25lS2V5XCIsdm9pZCAwKSxlKHRoaXMsXCJzaWduZXJIb3N0XCIsdm9pZCAwKSxlKHRoaXMsXCJuZXR3b3JrXCIsdm9pZCAwKSxlKHRoaXMsXCJlY1wiLHZvaWQgMCksdGhpcy5lYz1uZXcgaWUuZWMoXCJzZWNwMjU2azFcIiksdGhpcy5tZXRhZGF0YUhvc3Q9cix0aGlzLmFsbG93SG9zdD1uLHRoaXMuZW5hYmxlT25lS2V5PXQsdGhpcy5zZXJ2ZXJUaW1lT2Zmc2V0PW98fDAsdGhpcy5zaWduZXJIb3N0PWksdGhpcy5uZXR3b3JrPXN9c3RhdGljIGVuYWJsZUxvZ2dpbmcoKXthcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmIWFyZ3VtZW50c1swXT9jZS5kaXNhYmxlQWxsKCk6Y2UuZW5hYmxlQWxsKCl9c3RhdGljIHNldEFQSUtleShlKXt2KGUpfXN0YXRpYyBzZXRFbWJlZEhvc3QoZSl7bShlKX1zdGF0aWMgaXNHZXRPclNldE5vbmNlRXJyb3IoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBsZX1hc3luYyBnZXRVc2VyVHlwZUFuZEFkZHJlc3MoZSx0LHIpe2xldHt2ZXJpZmllcjpuLHZlcmlmaWVySWQ6aX09cixvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdJiZhcmd1bWVudHNbM107Y29uc3R7a2V5UmVzdWx0OnMsZXJyb3JSZXN1bHQ6YX09YXdhaXQgeWUoZSxuLGkpfHx7fTtsZXQgYyxmPSExO2lmKGEmJkpTT04uc3RyaW5naWZ5KGEpLmluY2x1ZGVzKFwiVmVyaWZpZXIgKyBWZXJpZmllcklEIGhhcyBub3QgeWV0IGJlZW4gYXNzaWduZWRcIikpe2lmKCFvKXRocm93IG5ldyBFcnJvcihcIlZlcmlmaWVyICsgVmVyaWZpZXJJRCBoYXMgbm90IHlldCBiZWVuIGFzc2lnbmVkXCIpO2F3YWl0IG1lKHtlbmRwb2ludHM6ZSx0b3J1c05vZGVQdWJzOnQsbGFzdFBvaW50OnZvaWQgMCxmaXJzdFBvaW50OnZvaWQgMCx2ZXJpZmllcjpuLHZlcmlmaWVySWQ6aSxzaWduZXJIb3N0OnRoaXMuc2lnbmVySG9zdCxuZXR3b3JrOnRoaXMubmV0d29ya30pO2NvbnN0IHI9YXdhaXQgZ2UoZSxuLGksMWUzKTtjPW51bGw9PXI/dm9pZCAwOnIua2V5UmVzdWx0LGY9ITB9ZWxzZXtpZighcyl0aHJvdyBuZXcgRXJyb3IoYG5vZGUgcmVzdWx0cyBkbyBub3QgbWF0Y2ggYXQgZmlyc3QgbG9va3VwICR7SlNPTi5zdHJpbmdpZnkoc3x8e30pfSwgJHtKU09OLnN0cmluZ2lmeShhfHx7fSl9YCk7Yz1zfWlmKGMpe2NvbnN0e3B1Yl9rZXlfWDplLHB1Yl9rZXlfWTp0fT1jLmtleXNbMF07bGV0IHIsbixpO3RyeXtyPWF3YWl0IHRoaXMuZ2V0T3JTZXROb25jZShlLHQsdm9pZCAwLCFmKSxuPW5ldyhuZSgpKShyLm5vbmNlfHxcIjBcIiwxNil9Y2F0Y2h7dGhyb3cgbmV3IGxlfWlmKFwidjFcIj09PXIudHlwZU9mVXNlcilpPXRoaXMuZWMua2V5RnJvbVB1YmxpYyh7eDplLHk6dH0pLmdldFB1YmxpYygpLmFkZCh0aGlzLmVjLmtleUZyb21Qcml2YXRlKG4udG9TdHJpbmcoMTYpKS5nZXRQdWJsaWMoKSk7ZWxzZXtpZihcInYyXCIhPT1yLnR5cGVPZlVzZXIpdGhyb3cgbmV3IEVycm9yKFwiZ2V0T3JTZXROb25jZSBzaG91bGQgYWx3YXlzIHJldHVybiB0eXBlT2ZVc2VyLlwiKTtpPXRoaXMuZWMua2V5RnJvbVB1YmxpYyh7eDplLHk6dH0pLmdldFB1YmxpYygpLmFkZCh0aGlzLmVjLmtleUZyb21QdWJsaWMoe3g6ci5wdWJOb25jZS54LHk6ci5wdWJOb25jZS55fSkuZ2V0UHVibGljKCkpfWNvbnN0IG89aS5nZXRYKCkudG9TdHJpbmcoMTYpLHM9aS5nZXRZKCkudG9TdHJpbmcoMTYpLGE9dGhpcy5nZW5lcmF0ZUFkZHJlc3NGcm9tUHViS2V5KGkuZ2V0WCgpLGkuZ2V0WSgpKTtpZihcInYxXCI9PT1yLnR5cGVPZlVzZXIpcmV0dXJue3R5cGVPZlVzZXI6ci50eXBlT2ZVc2VyLG5vbmNlOm4sWDpvLFk6cyxhZGRyZXNzOmF9O2lmKFwidjJcIj09PXIudHlwZU9mVXNlcilyZXR1cm57dHlwZU9mVXNlcjpyLnR5cGVPZlVzZXIsbm9uY2U6bixwdWJOb25jZTpyLnB1Yk5vbmNlLHVwZ3JhZGVkOnIudXBncmFkZWQsWDpvLFk6cyxhZGRyZXNzOmF9fXRocm93IG5ldyBFcnJvcihgbm9kZSByZXN1bHRzIGRvIG5vdCBtYXRjaCBhdCBmaW5hbCBsb29rdXAgJHtKU09OLnN0cmluZ2lmeShzfHx7fSl9LCAke0pTT04uc3RyaW5naWZ5KGF8fHt9KX1gKX1hc3luYyBzZXRDdXN0b21LZXkoZSl7bGV0IHQse3ByaXZLZXlIZXg6cixtZXRhZGF0YU5vbmNlOm4sdG9ydXNLZXlIZXg6aSxjdXN0b21LZXlIZXg6b309ZTt0PWk/bmV3KG5lKCkpKGksMTYpOm5ldyhuZSgpKShyLDE2KS5zdWIobikudW1vZCh0aGlzLmVjLmN1cnZlLm4pO2NvbnN0IHM9bmV3KG5lKCkpKG8sMTYpLnN1Yih0KS51bW9kKHRoaXMuZWMuY3VydmUubiksYT10aGlzLmdlbmVyYXRlTWV0YWRhdGFQYXJhbXMocy50b1N0cmluZygxNiksdCk7YXdhaXQgdGhpcy5zZXRNZXRhZGF0YShhKX1hc3luYyByZXRyaWV2ZVNoYXJlcyhlLHQscixuLGkpe2xldCBvPWFyZ3VtZW50cy5sZW5ndGg+NSYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTp7fTtjb25zdCBzPVtdO2F3YWl0IEEodGhpcy5hbGxvd0hvc3Qse2hlYWRlcnM6e3ZlcmlmaWVyOnIsdmVyaWZpZXJfaWQ6bi52ZXJpZmllcl9pZCxuZXR3b3JrOnRoaXMubmV0d29ya319LHt1c2VBUElLZXk6ITB9KTtjb25zdCBhPSgwLHRlLm9xKSgpLGM9KDAsdGUucmMpKGEpLnRvU3RyaW5nKFwiaGV4XCIpLGY9Yy5zbGljZSgyLDY2KSx1PWMuc2xpY2UoNjYpLGQ9dmUoaSk7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kz0xKXtjb25zdCBuPXgoZVt0XSxrKFwiQ29tbWl0bWVudFJlcXVlc3RcIix7bWVzc2FnZXByZWZpeDpcIm11ZzAwXCIsdG9rZW5jb21taXRtZW50OmQuc2xpY2UoMiksdGVtcHB1Yng6Zix0ZW1wcHVieTp1LHZlcmlmaWVyaWRlbnRpZmllcjpyfSkpLmNhdGNoKChlPT57Y2UuZXJyb3IoXCJjb21taXRtZW50XCIsZSl9KSk7cy5wdXNoKG4pfXJldHVybiB1ZShzLCh0PT50LmZpbHRlcigoZT0+ISghZXx8XCJvYmplY3RcIiE9dHlwZW9mIGV8fGUuZXJyb3IpKSkubGVuZ3RoPj0zKn5+KGUubGVuZ3RoLzQpKzE/UHJvbWlzZS5yZXNvbHZlKHQpOlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgaW52YWxpZCAke0pTT04uc3RyaW5naWZ5KHQpfWApKSkpLnRoZW4oKHM9Pntjb25zdCBjPVtdLGY9W107Zm9yKGxldCBlPTA7ZTxzLmxlbmd0aDtlKz0xKXNbZV0mJmYucHVzaChzW2VdLnJlc3VsdCk7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kz0xKXtjb25zdCBzPXgoZVt0XSxrKFwiU2hhcmVSZXF1ZXN0XCIse2VuY3J5cHRlZDpcInllc1wiLGl0ZW06W19lKF9lKHt9LG4pLHt9LHtpZHRva2VuOmksbm9kZXNpZ25hdHVyZXM6Zix2ZXJpZmllcmlkZW50aWZpZXI6cn0sbyldfSkpLmNhdGNoKChlPT5jZS5lcnJvcihcInNoYXJlIHJlcVwiLGUpKSk7Yy5wdXNoKHMpfXJldHVybiB1ZShjLChhc3luYyhyLG4pPT57Y29uc3QgaT1yLmZpbHRlcigoZT0+ZSkpLG89YmUoci5tYXAoKGU9PmUmJmUucmVzdWx0JiZlLnJlc3VsdC5rZXlzWzBdLlB1YmxpY0tleSkpLDErfn4oZS5sZW5ndGgvMikpO2lmKGkubGVuZ3RoPj0xK35+KGUubGVuZ3RoLzIpJiZvKXtjb25zdCBpPVtdLGY9W107Zm9yKGxldCBlPTA7ZTxyLmxlbmd0aDtlKz0xKXt2YXIgcyxjO2NvbnN0IG49cltlXTtpZigobnVsbD09bnx8bnVsbD09PShzPW4ucmVzdWx0KXx8dm9pZCAwPT09c3x8bnVsbD09PShjPXMua2V5cyl8fHZvaWQgMD09PWM/dm9pZCAwOmMubGVuZ3RoKT4wKXtuLnJlc3VsdC5rZXlzLnNvcnQoKChlLHQpPT5uZXcobmUoKSkoZS5JbmRleCwxNikuY21wKG5ldyhuZSgpKSh0LkluZGV4LDE2KSkpKTtjb25zdCBlPW4ucmVzdWx0LmtleXNbMF07aWYoZS5NZXRhZGF0YSl7Y29uc3QgdD17ZXBoZW1QdWJsaWNLZXk6YWUuZnJvbShlLk1ldGFkYXRhLmVwaGVtUHVibGljS2V5LFwiaGV4XCIpLGl2OmFlLmZyb20oZS5NZXRhZGF0YS5pdixcImhleFwiKSxtYWM6YWUuZnJvbShlLk1ldGFkYXRhLm1hYyxcImhleFwiKX07aS5wdXNoKCgwLHRlLnBlKShhLF9lKF9lKHt9LHQpLHt9LHtjaXBoZXJ0ZXh0OmFlLmZyb20oYWUuZnJvbShlLlNoYXJlLFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwiYmluYXJ5XCIpLnBhZFN0YXJ0KDY0LFwiMFwiKSxcImhleFwiKX0pKS5jYXRjaCgoZT0+Y2UuZGVidWcoXCJzaGFyZSBkZWNyeXB0aW9uXCIsZSkpKSl9ZWxzZSBpLnB1c2goUHJvbWlzZS5yZXNvbHZlKGFlLmZyb20oZS5TaGFyZS5wYWRTdGFydCg2NCxcIjBcIiksXCJoZXhcIikpKX1lbHNlIGkucHVzaChQcm9taXNlLnJlc29sdmUodm9pZCAwKSk7Zi5wdXNoKG5ldyhuZSgpKSh0W2VdLDE2KSl9Y29uc3QgdT1hd2FpdCBQcm9taXNlLmFsbChpKTtpZihuLnJlc29sdmVkKXJldHVybjtjb25zdCBkPXUucmVkdWNlKCgoZSx0LHIpPT4odCYmZS5wdXNoKHtpbmRleDpmW3JdLHZhbHVlOm5ldyhuZSgpKSh0KX0pLGUpKSxbXSksaD1wZShkLmxlbmd0aCwxK35+KGUubGVuZ3RoLzIpKTtsZXQgbD1udWxsO2ZvcihsZXQgZT0wO2U8aC5sZW5ndGg7ZSs9MSl7Y29uc3QgdD1oW2VdLHI9ZC5maWx0ZXIoKChlLHIpPT50LmluY2x1ZGVzKHIpKSksbj1yLm1hcCgoZT0+ZS52YWx1ZSkpLGk9ci5tYXAoKGU9PmUuaW5kZXgpKSxzPXRoaXMubGFncmFuZ2VJbnRlcnBvbGF0aW9uKG4saSk7aWYoIXMpY29udGludWU7Y29uc3QgYT0oMCx0ZS5yYykoYWUuZnJvbShzLnRvU3RyaW5nKDE2LDY0KSxcImhleFwiKSkudG9TdHJpbmcoXCJoZXhcIiksYz1hLnNsaWNlKDIsNjYpLGY9YS5zbGljZSg2Nik7aWYoMD09PW5ldyhuZSgpKShjLDE2KS5jbXAobmV3KG5lKCkpKG8uWCwxNikpJiYwPT09bmV3KG5lKCkpKGYsMTYpLmNtcChuZXcobmUoKSkoby5ZLDE2KSkpe2w9czticmVha319aWYobnVsbD09bCl0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZCBub3QgZGVyaXZlIHByaXZhdGUga2V5XCIpO3JldHVybiBsfXRocm93IG5ldyBFcnJvcihcImludmFsaWRcIil9KSl9KSkudGhlbigoYXN5bmMgZT0+e2xldCB0PWU7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwcml2YXRlIGtleSByZXR1cm5lZFwiKTtjb25zdCByPSgwLHRlLnJjKShhZS5mcm9tKHQudG9TdHJpbmcoMTYsNjQpLFwiaGV4XCIpKS50b1N0cmluZyhcImhleFwiKSxuPXIuc2xpY2UoMiw2NiksaT1yLnNsaWNlKDY2KTtsZXQgbztpZih0aGlzLmVuYWJsZU9uZUtleSl7Y29uc3R7bm9uY2U6ZX09YXdhaXQgdGhpcy5nZXROb25jZShuLGksdCk7bz1uZXcobmUoKSkoZXx8XCIwXCIsMTYpfWVsc2Ugbz1hd2FpdCB0aGlzLmdldE1ldGFkYXRhKHtwdWJfa2V5X1g6bixwdWJfa2V5X1k6aX0pO2NlLmRlYnVnKFwiPiB0b3J1cy5qcy9yZXRyaWV2ZVNoYXJlc1wiLHtwcml2S2V5OnQudG9TdHJpbmcoMTYpLG1ldGFkYXRhTm9uY2U6by50b1N0cmluZygxNil9KSx0PXQuYWRkKG8pLnVtb2QodGhpcy5lYy5jdXJ2ZS5uKTtjb25zdCBzPXRoaXMuZ2VuZXJhdGVBZGRyZXNzRnJvbVByaXZLZXkodCk7cmV0dXJuIGNlLmRlYnVnKFwiPiB0b3J1cy5qcy9yZXRyaWV2ZVNoYXJlc1wiLHtldGhBZGRyZXNzOnMscHJpdktleTp0LnRvU3RyaW5nKDE2KX0pLHtldGhBZGRyZXNzOnMscHJpdktleTp0LnRvU3RyaW5nKFwiaGV4XCIsNjQpLG1ldGFkYXRhTm9uY2U6b319KSl9YXN5bmMgZ2V0TWV0YWRhdGEoZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O3RyeXtjb25zdCByPWF3YWl0IHgoYCR7dGhpcy5tZXRhZGF0YUhvc3R9L2dldGAsZSx0LHt1c2VBUElLZXk6ITB9KTtyZXR1cm4gciYmci5tZXNzYWdlP25ldyhuZSgpKShyLm1lc3NhZ2UsMTYpOm5ldyhuZSgpKSgwKX1jYXRjaChlKXtyZXR1cm4gY2UuZXJyb3IoXCJnZXQgbWV0YWRhdGEgZXJyb3JcIixlKSxuZXcobmUoKSkoMCl9fWdlbmVyYXRlTWV0YWRhdGFQYXJhbXMoZSx0KXtjb25zdCByPXRoaXMuZWMua2V5RnJvbVByaXZhdGUodC50b1N0cmluZyhcImhleFwiLDY0KSksbj17ZGF0YTplLHRpbWVzdGFtcDpuZXcobmUoKSkofn4odGhpcy5zZXJ2ZXJUaW1lT2Zmc2V0K0RhdGUubm93KCkvMWUzKSkudG9TdHJpbmcoMTYpfSxpPXIuc2lnbih2ZShzZSgpKG4pKS5zbGljZSgyKSk7cmV0dXJue3B1Yl9rZXlfWDpyLmdldFB1YmxpYygpLmdldFgoKS50b1N0cmluZyhcImhleFwiKSxwdWJfa2V5X1k6ci5nZXRQdWJsaWMoKS5nZXRZKCkudG9TdHJpbmcoXCJoZXhcIiksc2V0X2RhdGE6bixzaWduYXR1cmU6YWUuZnJvbShpLnIudG9TdHJpbmcoMTYsNjQpK2kucy50b1N0cmluZygxNiw2NCkrbmV3KG5lKCkpKFwiXCIpLnRvU3RyaW5nKDE2LDIpLFwiaGV4XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfX1hc3luYyBzZXRNZXRhZGF0YShlKXtsZXQgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307dHJ5e3JldHVybihhd2FpdCB4KGAke3RoaXMubWV0YWRhdGFIb3N0fS9zZXRgLGUsdCx7dXNlQVBJS2V5OiEwfSkpLm1lc3NhZ2V9Y2F0Y2goZSl7cmV0dXJuIGNlLmVycm9yKFwic2V0IG1ldGFkYXRhIGVycm9yXCIsZSksXCJcIn19bGFncmFuZ2VJbnRlcnBvbGF0aW9uKGUsdCl7aWYoZS5sZW5ndGghPT10Lmxlbmd0aClyZXR1cm4gbnVsbDtsZXQgcj1uZXcobmUoKSkoMCk7Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKz0xKXtsZXQgaT1uZXcobmUoKSkoMSksbz1uZXcobmUoKSkoMSk7Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKz0xKWlmKG4hPT1yKXtpPWkubXVsKHRbcl0ubmVnKCkpLGk9aS51bW9kKHRoaXMuZWMuY3VydmUubik7bGV0IGU9dFtuXS5zdWIodFtyXSk7ZT1lLnVtb2QodGhpcy5lYy5jdXJ2ZS5uKSxvPW8ubXVsKGUpLnVtb2QodGhpcy5lYy5jdXJ2ZS5uKX1sZXQgcz1pLm11bChvLmludm0odGhpcy5lYy5jdXJ2ZS5uKSkudW1vZCh0aGlzLmVjLmN1cnZlLm4pO3M9cy5tdWwoZVtuXSkudW1vZCh0aGlzLmVjLmN1cnZlLm4pLHI9ci5hZGQocyl9cmV0dXJuIHIudW1vZCh0aGlzLmVjLmN1cnZlLm4pfWdlbmVyYXRlQWRkcmVzc0Zyb21Qcml2S2V5KGUpe2NvbnN0IHQ9dGhpcy5lYy5rZXlGcm9tUHJpdmF0ZShlLnRvU3RyaW5nKFwiaGV4XCIsNjQpLFwiaGV4XCIpLmdldFB1YmxpYygpLmVuY29kZShcImhleFwiLCExKS5zbGljZSgyKTtjZS5pbmZvKHQsXCJwdWJsaWMga2V5XCIpO2NvbnN0IHI9YDB4JHt2ZShhZS5mcm9tKHQsXCJoZXhcIikpLnNsaWNlKDI2KX1gO3JldHVybigwLG8udG9DaGVja3N1bUFkZHJlc3MpKHIpfWdlbmVyYXRlQWRkcmVzc0Zyb21QdWJLZXkoZSx0KXtjb25zdCByPXRoaXMuZWMua2V5RnJvbVB1YmxpYyh7eDplLnRvU3RyaW5nKFwiaGV4XCIsNjQpLHk6dC50b1N0cmluZyhcImhleFwiLDY0KX0pLG49ci5nZXRQdWJsaWMoKS5lbmNvZGUoXCJoZXhcIiwhMSkuc2xpY2UoMik7Y2UuaW5mbyhyLmdldFB1YmxpYygpLmVuY29kZShcImhleFwiLCExKSxcInB1YmxpYyBrZXlcIik7Y29uc3QgaT1gMHgke3ZlKGFlLmZyb20obixcImhleFwiKSkuc2xpY2UoMjYpfWA7cmV0dXJuKDAsby50b0NoZWNrc3VtQWRkcmVzcykoaSl9YXN5bmMgZ2V0UHVibGljQWRkcmVzcyhlLHQscil7bGV0IG4se3ZlcmlmaWVyOmksdmVyaWZpZXJJZDpvfT1yLHM9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10mJmFyZ3VtZW50c1szXTtjZS5kZWJ1ZyhcIj4gdG9ydXMuanMvZ2V0UHVibGljQWRkcmVzc1wiLHtlbmRwb2ludHM6ZSx0b3J1c05vZGVQdWJzOnQsdmVyaWZpZXI6aSx2ZXJpZmllcklkOm8saXNFeHRlbmRlZDpzfSk7bGV0IGE9ITE7Y29uc3R7a2V5UmVzdWx0OmMsZXJyb3JSZXN1bHQ6Zn09YXdhaXQgeWUoZSxpLG8pfHx7fTtpZihmJiZKU09OLnN0cmluZ2lmeShmKS5pbmNsdWRlcyhcIlZlcmlmaWVyIG5vdCBzdXBwb3J0ZWRcIikpdGhyb3cgbmV3IEVycm9yKFwiVmVyaWZpZXIgbm90IHN1cHBvcnRlZC4gQ2hlY2sgaWYgeW91OiBcXG5cXG4gICAgICAxLiBBcmUgb24gdGhlIHJpZ2h0IG5ldHdvcmsgKFRvcnVzIHRlc3RuZXQvbWFpbm5ldCkgXFxuXFxuICAgICAgMi4gSGF2ZSBzZXR1cCBhIHZlcmlmaWVyIG9uIGRhc2hib2FyZC53ZWIzYXV0aC5pbz9cIik7aWYoZiYmSlNPTi5zdHJpbmdpZnkoZikuaW5jbHVkZXMoXCJWZXJpZmllciArIFZlcmlmaWVySUQgaGFzIG5vdCB5ZXQgYmVlbiBhc3NpZ25lZFwiKSl7YXdhaXQgbWUoe2VuZHBvaW50czplLHRvcnVzTm9kZVB1YnM6dCxsYXN0UG9pbnQ6dm9pZCAwLGZpcnN0UG9pbnQ6dm9pZCAwLHZlcmlmaWVyOmksdmVyaWZpZXJJZDpvLHNpZ25lckhvc3Q6dGhpcy5zaWduZXJIb3N0LG5ldHdvcms6dGhpcy5uZXR3b3JrfSk7Y29uc3Qgcj1hd2FpdCBnZShlLGksbywxZTMpO249bnVsbD09cj92b2lkIDA6ci5rZXlSZXN1bHQsYT0hMH1lbHNle2lmKCFjKXRocm93IG5ldyBFcnJvcihgbm9kZSByZXN1bHRzIGRvIG5vdCBtYXRjaCBhdCBmaXJzdCBsb29rdXAgJHtKU09OLnN0cmluZ2lmeShjfHx7fSl9LCAke0pTT04uc3RyaW5naWZ5KGZ8fHt9KX1gKTtuPWN9aWYoY2UuZGVidWcoXCI+IHRvcnVzLmpzL2dldFB1YmxpY0FkZHJlc3NcIix7ZmluYWxLZXlSZXN1bHQ6bixpc05ld0tleTphfSksbil7dmFyIHU7bGV0IGUsdCxyLGksbyx7cHViX2tleV9YOmMscHViX2tleV9ZOmZ9PW4ua2V5c1swXTtpZih0aGlzLmVuYWJsZU9uZUtleSl7dHJ5e2U9YXdhaXQgdGhpcy5nZXRPclNldE5vbmNlKGMsZix2b2lkIDAsIWEpLHQ9bmV3KG5lKCkpKGUubm9uY2V8fFwiMFwiLDE2KSxpPWUudHlwZU9mVXNlcn1jYXRjaHt0aHJvdyBuZXcgbGV9aWYoXCJ2MVwiPT09ZS50eXBlT2ZVc2VyKXI9dGhpcy5lYy5rZXlGcm9tUHVibGljKHt4OmMseTpmfSkuZ2V0UHVibGljKCkuYWRkKHRoaXMuZWMua2V5RnJvbVByaXZhdGUodC50b1N0cmluZygxNikpLmdldFB1YmxpYygpKTtlbHNle2lmKFwidjJcIiE9PWUudHlwZU9mVXNlcil0aHJvdyBuZXcgRXJyb3IoXCJnZXRPclNldE5vbmNlIHNob3VsZCBhbHdheXMgcmV0dXJuIHR5cGVPZlVzZXIuXCIpO2UudXBncmFkZWQ/cj10aGlzLmVjLmtleUZyb21QdWJsaWMoe3g6Yyx5OmZ9KS5nZXRQdWJsaWMoKToocj10aGlzLmVjLmtleUZyb21QdWJsaWMoe3g6Yyx5OmZ9KS5nZXRQdWJsaWMoKS5hZGQodGhpcy5lYy5rZXlGcm9tUHVibGljKHt4OmUucHViTm9uY2UueCx5OmUucHViTm9uY2UueX0pLmdldFB1YmxpYygpKSxvPWUucHViTm9uY2UpfX1lbHNlIGk9XCJ2MVwiLHQ9YXdhaXQgdGhpcy5nZXRNZXRhZGF0YSh7cHViX2tleV9YOmMscHViX2tleV9ZOmZ9KSxyPXRoaXMuZWMua2V5RnJvbVB1YmxpYyh7eDpjLHk6Zn0pLmdldFB1YmxpYygpLmFkZCh0aGlzLmVjLmtleUZyb21Qcml2YXRlKHQudG9TdHJpbmcoMTYpKS5nZXRQdWJsaWMoKSk7Yz1yLmdldFgoKS50b1N0cmluZygxNiksZj1yLmdldFkoKS50b1N0cmluZygxNik7Y29uc3QgZD10aGlzLmdlbmVyYXRlQWRkcmVzc0Zyb21QdWJLZXkoci5nZXRYKCksci5nZXRZKCkpO3JldHVybiBjZS5kZWJ1ZyhcIj4gdG9ydXMuanMvZ2V0UHVibGljQWRkcmVzc1wiLHtYOmMsWTpmLGFkZHJlc3M6ZCx0eXBlT2ZVc2VyOmksbm9uY2U6bnVsbD09PSh1PXQpfHx2b2lkIDA9PT11P3ZvaWQgMDp1LnRvU3RyaW5nKDE2KSxwdWJOb25jZTpvfSkscz97dHlwZU9mVXNlcjppLGFkZHJlc3M6ZCxYOmMsWTpmLG1ldGFkYXRhTm9uY2U6dCxwdWJOb25jZTpvfTpkfXRocm93IG5ldyBFcnJvcihgbm9kZSByZXN1bHRzIGRvIG5vdCBtYXRjaCBhdCBmaW5hbCBsb29rdXAgJHtKU09OLnN0cmluZ2lmeShjfHx7fSl9LCAke0pTT04uc3RyaW5naWZ5KGZ8fHt9KX1gKX1hc3luYyBnZXRPclNldE5vbmNlKGUsdCxyKXtsZXQgbjtjb25zdCBpPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdJiZhcmd1bWVudHNbM10/XCJnZXROb25jZVwiOlwiZ2V0T3JTZXROb25jZVwiO3JldHVybiBuPXI/dGhpcy5nZW5lcmF0ZU1ldGFkYXRhUGFyYW1zKGkscik6e3B1Yl9rZXlfWDplLHB1Yl9rZXlfWTp0LHNldF9kYXRhOntkYXRhOml9fSx4KGAke3RoaXMubWV0YWRhdGFIb3N0fS9nZXRfb3Jfc2V0X25vbmNlYCxuLHZvaWQgMCx7dXNlQVBJS2V5OiEwfSl9YXN5bmMgZ2V0Tm9uY2UoZSx0LHIpe3JldHVybiB0aGlzLmdldE9yU2V0Tm9uY2UoZSx0LHIsITApfWdldFBvc3Rib3hLZXlGcm9tMU91dE9mMShlLHQpe2NvbnN0IHI9bmV3KG5lKCkpKGUsMTYpLG49bmV3KG5lKCkpKHQsMTYpO3JldHVybiByLnN1YihuKS51bW9kKHRoaXMuZWMuY3VydmUubikudG9TdHJpbmcoXCJoZXhcIil9fWNvbnN0IEVlPXtHT09HTEU6XCJnb29nbGVcIixGQUNFQk9PSzpcImZhY2Vib29rXCIsVFdJVENIOlwidHdpdGNoXCIsUkVERElUOlwicmVkZGl0XCIsRElTQ09SRDpcImRpc2NvcmRcIixFTUFJTF9QQVNTV09SRExFU1M6XCJ0b3J1cy1hdXRoMC1lbWFpbC1wYXNzd29yZGxlc3NcIn0sQWU9e1tFZS5HT09HTEVdOlwidGtleS1nb29nbGVcIixbRWUuRkFDRUJPT0tdOlwidGtleS1mYWNlYm9va1wiLFtFZS5UV0lUQ0hdOlwidGtleS10d2l0Y2hcIixbRWUuUkVERElUXTpcInRrZXktcmVkZGl0XCIsW0VlLkRJU0NPUkRdOlwidGtleS1kaXNjb3JkXCIsW0VlLkVNQUlMX1BBU1NXT1JETEVTU106XCJ0a2V5LWF1dGgwLWVtYWlsLXBhc3N3b3JkbGVzc1wifSx4ZT1cIm1vb25wYXlcIixrZT1cInd5cmVcIixQZT1cInJhbXBuZXR3b3JrXCIsT2U9XCJ4YW5wb29sXCIsTWU9XCJtZXJjdXJ5b1wiLEllPVwidHJhbnNha1wiLFRlPVwibWFpbm5ldFwiLFJlPVwibWF0aWNcIixOZT1cImJzY19tYWlubmV0XCIsQ2U9XCJhdmFsYW5jaGVfbWFpbm5ldFwiLGplPXtQUk9EVUNUSU9OOlwicHJvZHVjdGlvblwiLERFVkVMT1BNRU5UOlwiZGV2ZWxvcG1lbnRcIixCSU5BTkNFOlwiYmluYW5jZVwiLFRFU1RJTkc6XCJ0ZXN0aW5nXCIsTFJDOlwibHJjXCIsQkVUQTpcImJldGFcIn0sQmU9e0JPVFRPTV9MRUZUOlwiYm90dG9tLWxlZnRcIixUT1BfTEVGVDpcInRvcC1sZWZ0XCIsQk9UVE9NX1JJR0hUOlwiYm90dG9tLXJpZ2h0XCIsVE9QX1JJR0hUOlwidG9wLXJpZ2h0XCJ9LExlPXtbeGVdOltcIkFVRFwiLFwiQkdOXCIsXCJCUkxcIixcIkNBRFwiLFwiQ0hGXCIsXCJDTllcIixcIkNPUFwiLFwiQ1pLXCIsXCJES0tcIixcIkRPUFwiLFwiRUdQXCIsXCJFVVJcIixcIkdCUFwiLFwiSEtEXCIsXCJIUktcIixcIklEUlwiLFwiSUxTXCIsXCJKUFlcIixcIkpPRFwiLFwiS0VTXCIsXCJLUldcIixcIktXRFwiLFwiTEtSXCIsXCJNQURcIixcIk1YTlwiLFwiTVlSXCIsXCJOR05cIixcIk5PS1wiLFwiTlpEXCIsXCJPTVJcIixcIlBFTlwiLFwiUEtSXCIsXCJQTE5cIixcIlJPTlwiLFwiUlVCXCIsXCJTRUtcIixcIlNHRFwiLFwiVEhCXCIsXCJUUllcIixcIlRXRFwiLFwiVVNEXCIsXCJWTkRcIixcIlpBUlwiXSxba2VdOltcIlVTRFwiLFwiRVVSXCIsXCJHQlBcIixcIkFVRFwiLFwiQ0FEXCIsXCJOWkRcIixcIkFSU1wiLFwiQlJMXCIsXCJDSEZcIixcIkNMUFwiLFwiQ09QXCIsXCJDWktcIixcIkRLS1wiLFwiSEtEXCIsXCJJTFNcIixcIklOUlwiLFwiSVNLXCIsXCJKUFlcIixcIktSV1wiLFwiTVhOXCIsXCJNWVJcIixcIk5PS1wiLFwiUEhQXCIsXCJQTE5cIixcIlNFS1wiLFwiVEhCXCIsXCJWTkRcIixcIlpBUlwiXSxbUGVdOltcIlVTRFwiLFwiRVVSXCIsXCJHQlBcIl0sW09lXTpbXCJTR0RcIixcIkhLRFwiLFwiVEhCXCIsXCJQSFBcIixcIklOUlwiLFwiSURSXCIsXCJNWVJcIixcIkFVRFwiLFwiTlpEXCIsXCJLUldcIl0sW01lXTpbXCJFVVJcIixcIlVTRFwiLFwiR0JQXCIsXCJUUllcIixcIkpQWVwiLFwiQlJMXCIsXCJOR05cIixcIlZORFwiLFwiTVhOXCIsXCJLUldcIl0sW0llXTpbXCJBUlNcIixcIkFVRFwiLFwiQkJEXCIsXCJCR05cIixcIkJNRFwiLFwiQlJMXCIsXCJDQURcIixcIkNIRlwiLFwiQ0xQXCIsXCJDUkNcIixcIkNaS1wiLFwiREtLXCIsXCJET1BcIixcIkVVUlwiLFwiRkpEXCIsXCJGS1BcIixcIkdCUFwiLFwiR0lQXCIsXCJIUktcIixcIkhVRlwiLFwiSURSXCIsXCJJTFNcIixcIklTS1wiLFwiSk1EXCIsXCJKUFlcIixcIktFU1wiLFwiS1JXXCIsXCJNRExcIixcIk1YTlwiLFwiTVlSXCIsXCJOT0tcIixcIk5aRFwiLFwiUEVOXCIsXCJQSFBcIixcIlBMTlwiLFwiUFlHXCIsXCJST05cIixcIlNFS1wiLFwiU0dEXCIsXCJUSEJcIixcIlRSWVwiLFwiVFpTXCIsXCJVU0RcIixcIlpBUlwiXX0sRGU9bmV3IFNldChbXCJFVEhcIixcIlVTRFRcIixcIlVTRENcIixcIlRVU0RcIixcIkVPU0RUXCIsXCJVU0RcIixcIkRBSVwiLFwiR1VTRFwiLFwiREtLVFwiLFwiUEFYXCIsXCJJTFNcIixcIlJVQlwiLFwiQllOXCIsXCJFVVJcIixcIkdCUFwiLFwiSlBZXCIsXCJLUldcIixcIlBMTlwiLFwiTVhOXCIsXCJBVURcIixcIkJSTFwiLFwiQ0FEXCIsXCJDSEZcIixcIktQV1wiLFwiTEFLXCIsXCJMQlBcIixcIkxLUlwiLFwiWE9GXCIsXCJDTkhUXCIsXCJET0dFXCIsXCJVQUhcIixcIlRSWVwiLFwiSEtEXCIsXCJYSlBcIixcIlNHRFwiLFwiVVNDXCIsXCJOWkRcIixcIk5HTlwiLFwiUlVSXCIsXCJDT1BcIixcIkdIU1wiLFwiRUdQXCIsXCJJRFJcIixcIkJIRFwiLFwiQ1JDXCIsXCJQRU5cIixcIkFFRFwiLFwiRE9QXCIsXCJQS1JcIixcIkhVRlwiLFwiVk5EXCIsXCJYQVJcIixcIkxUQ1wiLFwiUk9OXCIsXCJPTVJcIixcIk1ZUlwiLFwiREtLXCIsXCJVR1hcIixcIlpNV1wiLFwiU0FSXCIsXCJTRUtcIixcIkdFTFwiLFwiUldGXCIsXCJJUlJcIixcIlRaU1wiLFwiQ05ZXCIsXCJWRUZcIixcIkJEVFwiLFwiSFJLXCIsXCJDTFBcIixcIlRIQlwiLFwiWEFGXCIsXCJBUlNcIixcIlVZVVwiLFwiU1pMXCIsXCJLWlRcIixcIk5PS1wiLFwiS0VTXCIsXCJQQUJcIixcIklOUlwiLFwiQ1pLXCIsXCJNQURcIixcIlRXRFwiLFwiUEhQXCIsXCJaQVJcIixcIkJPQlwiLFwiQ0RGXCIsXCJEQVNIXCIsXCJWRVNcIixcIklTS1wiLFwiTVdLXCIsXCJCQU1cIixcIlRURFwiLFwiWFJQXCIsXCJKT0RcIixcIlJTRFwiLFwiSE5MXCIsXCJCR05cIixcIkdUUVwiLFwiQldQXCIsXCJYTVJcIixcIk1NS1wiLFwiUUFSXCIsXCJBT0FcIixcIktXRFwiLFwiTVVSXCIsXCJXVVNEXCIsXCJXRVVSXCIsXCJXQVZFU1wiLFwiV1RSWVwiLFwiTFJEXCIsXCJMU0xcIixcIkxZRFwiLFwiQVdHXCIsXCJNRExcIixcIkJUT1wiLFwiRVVSU1wiLFwiQ0hGVFwiLFwiTUtEXCIsXCJNTlRcIixcIk1PUFwiLFwiTVJPXCIsXCJNVlJcIixcIlZPTExBUlwiLFwiQ0tVU0RcIixcIktIUlwiLFwiVlVWXCIsXCJCSVRDTllcIixcIlFDXCIsXCJCQkRcIixcIk5BRFwiLFwiTlBSXCIsXCJQR0tcIixcIlBZR1wiLFwiQklGXCIsXCJCTURcIixcIkJORFwiLFwiWExNXCIsXCJCTkJcIixcIlNDUlwiLFwiQkFUXCIsXCJDUk9cIixcIkhUXCIsXCJLQ1NcIixcIkxFT1wiLFwiTElOS1wiLFwiTUtSXCIsXCJOUFhTXCIsXCJPTUdcIixcIlJFUFwiLFwiWkJcIixcIlpJTFwiLFwiWlJYXCIsXCJCQ0hcIixcIkJaRFwiLFwiQ1VQXCIsXCJDVkVcIixcIkRKRlwiLFwiRFpEXCIsXCJFUk5cIixcIkVUQlwiLFwiRkpEXCIsXCJGS1BcIixcIkJVU0RcIixcIkFOQ1RcIixcIkFMTFwiLFwiQU1EXCIsXCJBTkdcIixcIkNOWVhcIixcIklRRFwiLFwiVVpTXCIsXCJUTkRcIixcIkdHUFwiLFwiWEFVXCIsXCJLR1NcIixcIkdJUFwiLFwiSk1EXCIsXCJaRUNcIixcIlVTRFBcIixcIkJTVlwiLFwiRU1DMlwiLFwiU05UXCIsXCJHVE9cIixcIlBPV1JcIixcIkVVU0RcIixcIkVVUlRcIixcIkJDWVwiLFwiQlRTXCIsXCJBVE1cIixcIkJMT0NLUEFZXCIsXCJBUkRSXCIsXCJBTVBcIixcIkIyWFwiLFwiQklUR09MRFwiLFwiQklURVVSXCIsXCJBVEJcIixcIkJJVFVTRFwiLFwiQUdSU1wiLFwiREZYVFwiLFwiSElLRU5cIixcIkJJWFwiLFwiS05DXCIsXCJFT1NcIixcIkNPQlwiLFwiQ09TU1wiLFwiQk1IXCIsXCJOQU5PXCIsXCJCREdcIixcIkJOVFwiLFwiWFZHXCIsXCJMS0sxWVwiLFwiTEtLXCIsXCJVU0RLXCIsXCJFVVJOXCIsXCJOWkRUXCIsXCJKU0VcIixcIkdNRFwiLFwiR05GXCIsXCJHWURcIixcIllFUlwiLFwiWFBGXCIsXCJIVEdcIixcIlNMTFwiLFwiU09TXCIsXCJXU1RcIixcIlNWQ1wiLFwiU1lQXCIsXCJORU9cIixcIktNRlwiLFwiSlVNUFwiLFwiQVlBXCIsXCJCTEFTVFwiLFwiV0dSXCIsXCJCQ05cIixcIkJUR1wiLFwiVVJBTFNcIixcIklOTlwiLFwiVVNEUVwiLFwiQ05IXCIsXCJIVVNEXCIsXCJCS1JXXCIsXCJOWkRYXCIsXCJFVVJYXCIsXCJDQURYXCIsXCJVU0RFWFwiLFwiSlBZWFwiLFwiQVVEWFwiLFwiVk5EQ1wiLFwiRU9OXCIsXCJHQlBYXCIsXCJDSEZYXCIsXCJVU0RKXCIsXCJJRFJUXCIsXCJVU0RTXCIsXCJVU0ROXCIsXCJCSURSXCIsXCJJREtcIixcIkJTRFwiLFwiQlROXCIsXCJLWURcIixcIk5JT1wiLFwiU0JEXCIsXCJTREdcIixcIlNIUFwiLFwiVE9QXCIsXCJYQ0RcIixcIlhDSEZcIixcIkNOWVRcIixcIkdZRU5cIixcIlpVU0RcIixcIkdPTERcIixcIlRSWFwiLFwiVFJZQlwiLFwiUExBVENcIixcIlNUUkFYXCIsXCJVU1RcIixcIkdMTVwiLFwiVkFJXCIsXCJCUlpcIixcIkREUlNUXCIsXCJYQVVUXCIsXCJNSU1cIl0pO2Z1bmN0aW9uIFVlKGUpe3JldHVybiBMZVtlXS5maWx0ZXIoKGU9PkRlLmhhcyhlKSkpfWNvbnN0IHFlPXtbeGVdOntsaW5lMTpcIkNyZWRpdC8gRGViaXQgQ2FyZC8gQXBwbGUgUGF5XCIsbGluZTI6XCI0LjUlIG9yIDUgVVNEXCIsbGluZTM6XCIyLDAwMOKCrC9kYXksIDEwLDAwMOKCrC9tb1wiLHN1cHBvcnRQYWdlOlwiaHR0cHM6Ly9oZWxwLm1vb25wYXkuaW8vZW4vXCIsbWluT3JkZXJWYWx1ZToyNC45OSxtYXhPcmRlclZhbHVlOjVlNCx2YWxpZEN1cnJlbmNpZXM6VWUoeGUpLHZhbGlkQ3J5cHRvQ3VycmVuY2llc0J5Q2hhaW46e1tUZV06W3t2YWx1ZTpcImFhdmVcIixkaXNwbGF5OlwiQUFWRVwifSx7dmFsdWU6XCJiYXRcIixkaXNwbGF5OlwiQkFUXCJ9LHt2YWx1ZTpcImRhaVwiLGRpc3BsYXk6XCJEQUlcIn0se3ZhbHVlOlwiZXRoXCIsZGlzcGxheTpcIkVUSFwifSx7dmFsdWU6XCJta3JcIixkaXNwbGF5OlwiTUtSXCJ9LHt2YWx1ZTpcIm1hdGljXCIsZGlzcGxheTpcIk1BVElDXCJ9LHt2YWx1ZTpcInVzZHRcIixkaXNwbGF5OlwiVVNEVFwifSx7dmFsdWU6XCJ1c2RjXCIsZGlzcGxheTpcIlVTRENcIn1dLFtSZV06W3t2YWx1ZTpcImV0aF9wb2x5Z29uXCIsZGlzcGxheTpcIkVUSFwifSx7dmFsdWU6XCJtYXRpY19wb2x5Z29uXCIsZGlzcGxheTpcIk1BVElDXCJ9LHt2YWx1ZTpcInVzZGNfcG9seWdvblwiLGRpc3BsYXk6XCJVU0RDXCJ9XSxbTmVdOlt7dmFsdWU6XCJibmJfYnNjXCIsZGlzcGxheTpcIkJOQlwifSx7dmFsdWU6XCJidXNkX2JzY1wiLGRpc3BsYXk6XCJCVVNEXCJ9XSxbQ2VdOlt7dmFsdWU6XCJhdmF4X2NjaGFpblwiLGRpc3BsYXk6XCJBVkFYXCJ9XX0saW5jbHVkZUZlZXM6ITAsYXBpOiEwLGVuZm9yY2VNYXg6ITF9LFtrZV06e2xpbmUxOlwiQXBwbGUgUGF5LyBEZWJpdC8gQ3JlZGl0IENhcmRcIixsaW5lMjpcIjQuOSUgKyAzMMKiIG9yIDUgVVNEXCIsbGluZTM6XCIkMjUwL2RheVwiLHN1cHBvcnRQYWdlOlwiaHR0cHM6Ly9zdXBwb3J0LnNlbmR3eXJlLmNvbS9lbi9cIixtaW5PcmRlclZhbHVlOjUsbWF4T3JkZXJWYWx1ZTo1MDAsdmFsaWRDdXJyZW5jaWVzOlVlKGtlKSx2YWxpZENyeXB0b0N1cnJlbmNpZXNCeUNoYWluOntbVGVdOlt7dmFsdWU6XCJBQVZFXCIsZGlzcGxheTpcIkFBVkVcIn0se3ZhbHVlOlwiQkFUXCIsZGlzcGxheTpcIkJBVFwifSx7dmFsdWU6XCJCVVNEXCIsZGlzcGxheTpcIkJVU0RcIn0se3ZhbHVlOlwiREFJXCIsZGlzcGxheTpcIkRBSVwifSx7dmFsdWU6XCJFVEhcIixkaXNwbGF5OlwiRVRIXCJ9LHt2YWx1ZTpcIk1LUlwiLGRpc3BsYXk6XCJNS1JcIn0se3ZhbHVlOlwiVU5JXCIsZGlzcGxheTpcIlVOSVwifSx7dmFsdWU6XCJVU0RDXCIsZGlzcGxheTpcIlVTRENcIn0se3ZhbHVlOlwiVVNEVFwiLGRpc3BsYXk6XCJVU0RUXCJ9XSxbUmVdOlt7dmFsdWU6XCJNVVNEQ1wiLGRpc3BsYXk6XCJVU0RDXCJ9XSxbQ2VdOlt7dmFsdWU6XCJBVkFYQ1wiLGRpc3BsYXk6XCJBVkFYQ1wifV19LGluY2x1ZGVGZWVzOiExLGFwaTohMCxlbmZvcmNlTWF4OiExfSxbUGVdOntsaW5lMTpcIkRlYml0IENhcmQvIDxicj5BcHBsZSBQYXkvIEJhbmsgdHJhbnNmZXJcIixsaW5lMjpcIjAuNDklIC0gMi45JVwiLGxpbmUzOlwiNSwwMDDigqwvcHVyY2hhc2UsIDIwLDAwMOKCrC9tb1wiLHN1cHBvcnRQYWdlOlwiaHR0cHM6Ly9pbnN0YW50LnJhbXAubmV0d29yay9cIixtaW5PcmRlclZhbHVlOjUwLG1heE9yZGVyVmFsdWU6MmU0LHZhbGlkQ3VycmVuY2llczpVZShQZSksdmFsaWRDcnlwdG9DdXJyZW5jaWVzQnlDaGFpbjp7W1RlXTpbe3ZhbHVlOlwiRVRIXCIsZGlzcGxheTpcIkVUSFwifSx7dmFsdWU6XCJEQUlcIixkaXNwbGF5OlwiREFJXCJ9LHt2YWx1ZTpcIlVTRENcIixkaXNwbGF5OlwiVVNEQ1wifSx7dmFsdWU6XCJVU0RUXCIsZGlzcGxheTpcIlVTRFRcIn1dLFtSZV06W3t2YWx1ZTpcIk1BVElDX0RBSVwiLGRpc3BsYXk6XCJEQUlcIn0se3ZhbHVlOlwiTUFUSUNfTUFUSUNcIixkaXNwbGF5OlwiTUFUSUNcIn0se3ZhbHVlOlwiTUFUSUNfVVNEQ1wiLGRpc3BsYXk6XCJVU0RDXCJ9XSxbQ2VdOlt7dmFsdWU6XCJBVkFYXCIsZGlzcGxheTpcIkFWQVhcIn1dfSxpbmNsdWRlRmVlczohMCxhcGk6ITAscmVjZWl2ZUhpbnQ6XCJ3YWxsZXRUb3BVcC5yZWNlaXZlSGludFJhbXBcIixlbmZvcmNlTWF4OiExfSxbT2VdOntsaW5lMTpcIlBheU5vdy8gSW5zdGFQYXkvIEZQUy8gR29KZWtQYXkvIFVQSS8gUHJvbXB0UGF5LyA8YnI+VmlldHRlbFBheS8gRHVpdE5vd1wiLGxpbmUyOlwiMi41JSBidXlpbmcsIDMlIHNlbGxpbmdcIixsaW5lMzpcIiQyLDUwMCAvIGRheVwiLHN1cHBvcnRQYWdlOlwibWFpbHRvOnN1cHBvcnRAeGFucG9vbC5jb21cIixtaW5PcmRlclZhbHVlOjEwMCxtYXhPcmRlclZhbHVlOjI1MDAsdmFsaWRDdXJyZW5jaWVzOlVlKE9lKSx2YWxpZENyeXB0b0N1cnJlbmNpZXNCeUNoYWluOntbVGVdOlt7dmFsdWU6XCJFVEhcIixkaXNwbGF5OlwiRVRIXCJ9LHt2YWx1ZTpcIlVTRFRcIixkaXNwbGF5OlwiVVNEVFwifV19LGluY2x1ZGVGZWVzOiEwLGFwaTohMCxzZWxsOiEwLGVuZm9yY2VNYXg6ITF9LFtNZV06e2xpbmUxOlwiQ3JlZGl0LyBEZWJpdCBDYXJkLyBBcHBsZSBQYXlcIixsaW5lMjpcIjMuOTUlIG9yIDQgVVNEXCIsbGluZTM6XCIxMCwwMDDigqwvZGF5LCAyNSwwMDDigqwvbW9cIixzdXBwb3J0UGFnZTpcIm1haWx0bzpzdXBwb3J0QG1lcmN1cnlvLmlvXCIsbWluT3JkZXJWYWx1ZTozMCxtYXhPcmRlclZhbHVlOjVlMyx2YWxpZEN1cnJlbmNpZXM6VWUoTWUpLHZhbGlkQ3J5cHRvQ3VycmVuY2llc0J5Q2hhaW46e1tUZV06W3t2YWx1ZTpcIkVUSFwiLGRpc3BsYXk6XCJFVEhcIn0se3ZhbHVlOlwiQkFUXCIsZGlzcGxheTpcIkJBVFwifSx7dmFsdWU6XCJVU0RUXCIsZGlzcGxheTpcIlVTRFRcIn0se3ZhbHVlOlwiREFJXCIsZGlzcGxheTpcIkRBSVwifV0sW05lXTpbe3ZhbHVlOlwiQk5CXCIsZGlzcGxheTpcIkJOQlwifSx7dmFsdWU6XCJCVVNEXCIsZGlzcGxheTpcIkJVU0RcIn0se3ZhbHVlOlwiMUlOQ0hcIixkaXNwbGF5OlwiMUlOQ0hcIn1dfSxpbmNsdWRlRmVlczohMCxhcGk6ITAsZW5mb3JjZU1heDohMX0sW0llXTp7bGluZTE6XCJDcmVkaXQvIERlYml0IENhcmQvIDxici8+QmFuayBUcmFuc2ZlciAoc2VwYS9nYnApXCIsbGluZTI6XCIwLjk5JSAtIDUuNSUgb3IgNSBVU0RcIixsaW5lMzpcIjUwMOKCrC9kYXlcIixzdXBwb3J0UGFnZTpcImh0dHBzOi8vc3VwcG9ydC50cmFuc2FrLmNvbS9oYy9lbi1VU1wiLG1pbk9yZGVyVmFsdWU6MzAsbWF4T3JkZXJWYWx1ZTo1MDAsdmFsaWRDdXJyZW5jaWVzOlVlKEllKSx2YWxpZENyeXB0b0N1cnJlbmNpZXNCeUNoYWluOntbVGVdOlt7dmFsdWU6XCJBQVZFXCIsZGlzcGxheTpcIkFBVkVcIn0se3ZhbHVlOlwiREFJXCIsZGlzcGxheTpcIkRBSVwifSx7dmFsdWU6XCJFVEhcIixkaXNwbGF5OlwiRVRIXCJ9LHt2YWx1ZTpcIlVTRENcIixkaXNwbGF5OlwiVVNEQ1wifSx7dmFsdWU6XCJVU0RUXCIsZGlzcGxheTpcIlVTRFRcIn1dLFtSZV06W3t2YWx1ZTpcIkFBVkVcIixkaXNwbGF5OlwiQUFWRVwifSx7dmFsdWU6XCJEQUlcIixkaXNwbGF5OlwiREFJXCJ9LHt2YWx1ZTpcIk1BVElDXCIsZGlzcGxheTpcIk1BVElDXCJ9LHt2YWx1ZTpcIlVTRENcIixkaXNwbGF5OlwiVVNEQ1wifSx7dmFsdWU6XCJVU0RUXCIsZGlzcGxheTpcIlVTRFRcIn0se3ZhbHVlOlwiV0VUSFwiLGRpc3BsYXk6XCJXRVRIXCJ9XSxbTmVdOlt7dmFsdWU6XCJCTkJcIixkaXNwbGF5OlwiQk5CXCJ9LHt2YWx1ZTpcIkJVU0RcIixkaXNwbGF5OlwiQlVTRFwifV0sW0NlXTpbe3ZhbHVlOlwiQVZBWFwiLGRpc3BsYXk6XCJBVkFYXCJ9XX0saW5jbHVkZUZlZXM6ITAsZW5mb3JjZU1heDohMH19LEZlPXtzdXBwb3J0ZWRWZXJpZmllckxpc3Q6T2JqZWN0LnZhbHVlcyhFZSkscGF5bWVudFByb3ZpZGVyczpxZSxhcGk6XCJodHRwczovL2FwaS50b3IudXNcIix0cmFuc2xhdGlvbnM6e2VuOntlbWJlZDp7Y29udGludWU6XCJDb250aW51ZVwiLGFjdGlvblJlcXVpcmVkOlwiQXV0aG9yaXphdGlvbiByZXF1aXJlZFwiLHBlbmRpbmdBY3Rpb246XCJDbGljayBjb250aW51ZSB0byBwcm9jZWVkIHdpdGggeW91ciByZXF1ZXN0IGluIGEgcG9wdXBcIixjb29raWVzUmVxdWlyZWQ6XCJDb29raWVzIFJlcXVpcmVkXCIsZW5hYmxlQ29va2llczpcIlBsZWFzZSBlbmFibGUgY29va2llcyBpbiB5b3VyIGJyb3dzZXIgcHJlZmVyZW5jZXMgdG8gYWNjZXNzIFRvcnVzXCIsY2xpY2tIZXJlOlwiTW9yZSBJbmZvXCJ9fSxkZTp7ZW1iZWQ6e2NvbnRpbnVlOlwiRm9ydHNldHplblwiLGFjdGlvblJlcXVpcmVkOlwiQXV0b3Jpc2llcnVuZyBlcmZvcmRlcmxpY2hcIixwZW5kaW5nQWN0aW9uOlwiS2xpY2tlbiBTaWUgaW4gZWluZW0gUG9wdXAgYXVmIFdlaXRlciwgdW0gbWl0IElocmVyIEFuZnJhZ2UgZm9ydHp1ZmFocmVuXCIsY29va2llc1JlcXVpcmVkOlwiQ29va2llcyBiZW7DtnRpZ3RcIixlbmFibGVDb29raWVzOlwiQml0dGUgYWt0aXZpZXJlbiBTaWUgQ29va2llcyBpbiBJaHJlbiBCcm93c2VyZWluc3RlbGx1bmdlbiwgdW0gYXVmIFRvcnVzIHp1enVncmVpZmVuXCIsY2xpY2tIZXJlOlwiTWVociBJbmZvXCJ9fSxqYTp7ZW1iZWQ6e2NvbnRpbnVlOlwi57aZ57aa44GZ44KLXCIsYWN0aW9uUmVxdWlyZWQ6XCLoqo3oqLzjgYzlv4XopoHjgafjgZlcIixwZW5kaW5nQWN0aW9uOlwi57aa6KGM44KS44Kv44Oq44OD44Kv44GX44Gm44CB44Od44OD44OX44Ki44OD44OX44Gn44Oq44Kv44Ko44K544OI44KS57aa6KGM44GX44G+44GZXCIsY29va2llc1JlcXVpcmVkOlwi5b+F6KaB44Gq44Kv44OD44Kt44O8XCIsZW5hYmxlQ29va2llczpcIlRvcnVz44Gr44Ki44Kv44K744K544GZ44KL44Gr44Gv44CB44OW44Op44Km44K244Gu6Kit5a6a44GnQ29va2ll44KS5pyJ5Yq544Gr44GX44Gm44GP44Gg44GV44GE44CCXCIsY2xpY2tIZXJlOlwi6Kmz44GX44GP44GvXCJ9fSxrbzp7ZW1iZWQ6e2NvbnRpbnVlOlwi6rOE7IaN7ZWY64ukXCIsYWN0aW9uUmVxdWlyZWQ6XCLsirnsnbgg7ZWE7JqUXCIscGVuZGluZ0FjdGlvbjpcIu2MneyXheyXkOyEnCDsmpTssq3snYQg7KeE7ZaJ7ZWY66Ck66m0IOqzhOyGjeydhCDtgbTrpq3tlZjsi63si5zsmKQuXCIsY29va2llc1JlcXVpcmVkOlwi7L+g7YKkIO2VhOyalFwiLGVuYWJsZUNvb2tpZXM6XCLruIzrnbzsmrDsoIAg7ZmY6rK9IOyEpOygleyXkOyEnCDsv6DtgqTrpbwg7Zmc7ISx7ZmU7ZWY7JesIFRvcnVz7JeQIOyVoeyEuOyKpO2VmOyLreyLnOyYpC5cIixjbGlja0hlcmU6XCLrjZQg66eO7J2AIOygleuztFwifX0semg6e2VtYmVkOntjb250aW51ZTpcIue7p+e7rVwiLGFjdGlvblJlcXVpcmVkOlwi6ZyA6KaB5o6I5p2DXCIscGVuZGluZ0FjdGlvbjpcIuWNleWHu+e7p+e7reS7peWcqOW8ueWHuueql+WPo+S4ree7p+e7reaCqOeahOivt+axglwiLGNvb2tpZXNSZXF1aXJlZDpcIuW/heWhq0Nvb2tpZVwiLGVuYWJsZUNvb2tpZXM6XCLor7flnKjmgqjnmoTmtY/op4jlmajpppbpgInpobnkuK3lkK/nlKhjb29raWXku6Xorr/pl65Ub3J1c+OAglwiLGNsaWNrSGVyZTpcIuabtOWkmuS/oeaBr1wifX19LHByb2RUb3J1c1VybDpcIlwiLGxvY2FsU3RvcmFnZUtleVByZWZpeDpcInRvcnVzLVwifSxIZT1lPT5uZXcgUHJvbWlzZSgoKHQscik9PntudWxsIT13aW5kb3cuZG9jdW1lbnQuYm9keT9Qcm9taXNlLnJlc29sdmUoZSgpKS50aGVuKHQpLmNhdGNoKHIpOndpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCgoKT0+e1Byb21pc2UucmVzb2x2ZShlKCkpLnRoZW4odCkuY2F0Y2gocil9KSl9KSksemU9ZT0+e2NvbnN0IHQ9d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKSxyPWUudHJpbSgpO3JldHVybiB0LmlubmVySFRNTD1yLHQuY29udGVudC5maXJzdENoaWxkfSxLZT0oZSx0LHIpPT57Y29uc3Qgbj1pPT57cihpKSxlLnJlbW92ZUxpc3RlbmVyKHQsbil9O2Uub24odCxuKX07dmFyIFZlPXIoMjcyNCksR2U9cig0MDYzKSxXZT1yLm4oR2UpLFhlPXIoNDk3MCk7Y29uc3QgWWU9aCgpLmdldExvZ2dlcihcInRvcnVzLWVtYmVkXCIpLEplPXtlcnJvcnM6e2Rpc2Nvbm5lY3RlZDooKT0+XCJUb3J1czogTG9zdCBjb25uZWN0aW9uIHRvIFRvcnVzLlwiLHBlcm1hbmVudGx5RGlzY29ubmVjdGVkOigpPT5cIlRvcnVzOiBEaXNjb25uZWN0ZWQgZnJvbSBpZnJhbWUuIFBhZ2UgcmVsb2FkIHJlcXVpcmVkLlwiLHNlbmRTaXRlTWV0YWRhdGE6KCk9PlwiVG9ydXM6IEZhaWxlZCB0byBzZW5kIHNpdGUgbWV0YWRhdGEuIFRoaXMgaXMgYW4gaW50ZXJuYWwgZXJyb3IsIHBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsdW5zdXBwb3J0ZWRTeW5jOmU9PlwiVG9ydXM6IFRoZSBUb3J1cyBFdGhlcmV1bSBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IHN5bmNocm9ub3VzIG1ldGhvZHMgbGlrZSBcIi5jb25jYXQoZSxcIiB3aXRob3V0IGEgY2FsbGJhY2sgcGFyYW1ldGVyLlwiKSxpbnZhbGlkRHVwbGV4U3RyZWFtOigpPT5cIk11c3QgcHJvdmlkZSBhIE5vZGUuanMtc3R5bGUgZHVwbGV4IHN0cmVhbS5cIixpbnZhbGlkT3B0aW9uczooZSx0KT0+XCJJbnZhbGlkIG9wdGlvbnMuIFJlY2VpdmVkOiB7IG1heEV2ZW50TGlzdGVuZXJzOiBcIi5jb25jYXQoZSxcIiwgc2hvdWxkU2VuZE1ldGFkYXRhOiBcIikuY29uY2F0KHQsXCIgfVwiKSxpbnZhbGlkUmVxdWVzdEFyZ3M6KCk9PlwiRXhwZWN0ZWQgYSBzaW5nbGUsIG5vbi1hcnJheSwgb2JqZWN0IGFyZ3VtZW50LlwiLGludmFsaWRSZXF1ZXN0TWV0aG9kOigpPT5cIidhcmdzLm1ldGhvZCcgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuXCIsaW52YWxpZFJlcXVlc3RQYXJhbXM6KCk9PlwiJ2FyZ3MucGFyYW1zJyBtdXN0IGJlIGFuIG9iamVjdCBvciBhcnJheSBpZiBwcm92aWRlZC5cIixpbnZhbGlkTG9nZ2VyT2JqZWN0OigpPT5cIidhcmdzLmxvZ2dlcicgbXVzdCBiZSBhbiBvYmplY3QgaWYgcHJvdmlkZWQuXCIsaW52YWxpZExvZ2dlck1ldGhvZDplPT5cIidhcmdzLmxvZ2dlcicgbXVzdCBpbmNsdWRlIHJlcXVpcmVkIG1ldGhvZCAnXCIuY29uY2F0KGUsXCInLlwiKX0saW5mbzp7Y29ubmVjdGVkOmU9PidUb3J1czogQ29ubmVjdGVkIHRvIGNoYWluIHdpdGggSUQgXCInLmNvbmNhdChlLCdcIi4nKX0sd2FybmluZ3M6e2VuYWJsZURlcHJlY2F0aW9uOidUb3J1czogXCJcImV0aGVyZXVtLmVuYWJsZSgpXCIgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gUGxlYXNlIHVzZSBcImV0aGVyZXVtLnNlbmQoXCJldGhfcmVxdWVzdEFjY291bnRzXCIpXCIgaW5zdGVhZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTAyJyxzZW5kRGVwcmVjYXRpb246J1RvcnVzOiBcImV0aGVyZXVtLnNlbmQoLi4uKVwiIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFBsZWFzZSB1c2UgXCJldGhlcmV1bS5zZW5kQXN5bmMoLi4uKVwiIG9yIFwiZXRoZXJldW0ucmVxdWVzdCguLi4pXCIgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMnLGV2ZW50czp7Y2xvc2U6J1RvcnVzOiBUaGUgZXZlbnQgXCJjbG9zZVwiIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFBsZWFzZSB1c2UgXCJkaXNjb25uZWN0XCIgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMnLGRhdGE6J1RvcnVzOiBUaGUgZXZlbnQgXCJkYXRhXCIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuVXNlIFwibWVzc2FnZVwiIGluc3RlYWQuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTkzI21lc3NhZ2UnLG5ldHdvcmtDaGFuZ2VkOidUb3J1czogVGhlIGV2ZW50IFwibmV0d29ya0NoYW5nZWRcIiBpcyBkZXByZWNhdGVkIGFuZCBtYXkgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBQbGVhc2UgdXNlIFwiY2hhaW5DaGFuZ2VkXCIgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMnLG5vdGlmaWNhdGlvbjonVG9ydXM6IFRoZSBldmVudCBcIm5vdGlmaWNhdGlvblwiIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFBsZWFzZSB1c2UgXCJtZXNzYWdlXCIgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMnfSxwdWJsaWNDb25maWdTdG9yZTonVG9ydXM6IFRoZSBwcm9wZXJ0eSBcInB1YmxpY0NvbmZpZ1N0b3JlXCIgaXMgZGVwcmVjYXRlZCBhbmQgV0lMTCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuJ319LHtwYXltZW50UHJvdmlkZXJzOiRlfT1GZTtmdW5jdGlvbiBaZShlLHQscil7bGV0IG49J01ldGFNYXNrOiBMb3N0IGNvbm5lY3Rpb24gdG8gXCInLmNvbmNhdChlLCdcIi4nKTtudWxsIT10JiZ0LnN0YWNrJiYobis9XCJcXG5cIi5jb25jYXQodC5zdGFjaykpLFllLndhcm4obiksciYmci5saXN0ZW5lckNvdW50KFwiZXJyb3JcIik+MCYmci5lbWl0KFwiZXJyb3JcIixuKX1jb25zdCBRZT0oKT0+TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksZXQ9YXN5bmMoZSx0KT0+e2xldCByLG47Y29uc3QgaT1cIjEuMjcuMlwiO2xldCBvPXQudmVyc2lvbnx8aTt0cnl7aWYoKFwiYmluYW5jZVwiPT09ZXx8XCJwcm9kdWN0aW9uXCI9PT1lKSYmIXQudmVyc2lvbil7bGV0IGU7ZT1GZS5wcm9kVG9ydXNVcmw/e2RhdGE6RmUucHJvZFRvcnVzVXJsfTphd2FpdCBBKFwiXCIuY29uY2F0KEZlLmFwaSxcIi9sYXRlc3R2ZXJzaW9uP25hbWU9QHRvcnVzbGFicy90b3J1cy1lbWJlZCZ2ZXJzaW9uPVwiKS5jb25jYXQoaSkse30se3VzZUFQSUtleTohMH0pLG89ZS5kYXRhLEZlLnByb2RUb3J1c1VybD1lLmRhdGF9fWNhdGNoKGUpe1llLmVycm9yKGUsXCJ1bmFibGUgdG8gZmV0Y2ggbGF0ZXN0IHZlcnNpb25cIil9c3dpdGNoKFllLmluZm8oXCJ2ZXJzaW9uIHVzZWQ6IFwiLG8pLGUpe2Nhc2VcImJpbmFuY2VcIjpyPVwiaHR0cHM6Ly9iaW5hbmNlLnRvci51cy92XCIuY29uY2F0KG8pLG49XCJpbmZvXCI7YnJlYWs7Y2FzZVwidGVzdGluZ1wiOnI9XCJodHRwczovL3Rlc3RpbmcudG9yLnVzXCIsbj1cImRlYnVnXCI7YnJlYWs7Y2FzZVwibHJjXCI6cj1cImh0dHBzOi8vbHJjLnRvci51c1wiLG49XCJkZWJ1Z1wiO2JyZWFrO2Nhc2VcImJldGFcIjpyPVwiaHR0cHM6Ly9iZXRhLnRvci51c1wiLG49XCJkZWJ1Z1wiO2JyZWFrO2Nhc2VcImRldmVsb3BtZW50XCI6cj1cImh0dHA6Ly9sb2NhbGhvc3Q6NDA1MFwiLG49XCJkZWJ1Z1wiO2JyZWFrO2RlZmF1bHQ6cj1cImh0dHBzOi8vYXBwLnRvci51cy92XCIuY29uY2F0KG8pLG49XCJlcnJvclwifXJldHVybnt0b3J1c1VybDpyLGxvZ0xldmVsOm59fSx0dD0oKT0+e2xldCBlPXdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2V8fFwiZW4tVVNcIjtjb25zdCB0PWUuc3BsaXQoXCItXCIpO3JldHVybiBlPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChGZS50cmFuc2xhdGlvbnMsdFswXSk/dFswXTpcImVuXCIsZX0scnQ9W1wiZXRoX3N1YnNjcmlwdGlvblwiXSxudD0oKT0+e30saXQ9XCJkaXJlY3Rvcmllcz0wLHRpdGxlYmFyPTAsdG9vbGJhcj0wLHN0YXR1cz0wLGxvY2F0aW9uPTAsbWVudWJhcj0wLGhlaWdodD02NjAsd2lkdGg9Mzc1XCIsb3Q9XCJkaXJlY3Rvcmllcz0wLHRpdGxlYmFyPTAsdG9vbGJhcj0wLHN0YXR1cz0wLGxvY2F0aW9uPTAsbWVudWJhcj0wLGhlaWdodD03MDAsd2lkdGg9NDUwXCI7ZnVuY3Rpb24gc3QoZSx0KXt2YXIgcj1PYmplY3Qua2V5cyhlKTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO3QmJihuPW4uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KSkpLHIucHVzaC5hcHBseShyLG4pfXJldHVybiByfUcuZGVmYXVsdE1heExpc3RlbmVycz0xMDA7Y29uc3QgYXQ9ZnVuY3Rpb24oZSx0KXtsZXQgcj0hKGFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdKXx8YXJndW1lbnRzWzJdO3JldHVybihuLGkpPT5ufHxpLmVycm9yP3Qobnx8aS5lcnJvcik6IXJ8fEFycmF5LmlzQXJyYXkoaSk/ZShpKTplKGkucmVzdWx0KX07Y2xhc3MgY3QgZXh0ZW5kcyBHe2NvbnN0cnVjdG9yKHQpe2xldHttYXhFdmVudExpc3RlbmVyczpyPTEwMCxzaG91bGRTZW5kTWV0YWRhdGE6bj0hMCxqc29uUnBjU3RyZWFtTmFtZTppPVwicHJvdmlkZXJcIn09YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O2lmKHN1cGVyKCksZSh0aGlzLFwiY2hhaW5JZFwiLHZvaWQgMCksZSh0aGlzLFwic2VsZWN0ZWRBZGRyZXNzXCIsdm9pZCAwKSxlKHRoaXMsXCJfcnBjRW5naW5lXCIsdm9pZCAwKSxlKHRoaXMsXCJuZXR3b3JrVmVyc2lvblwiLHZvaWQgMCksZSh0aGlzLFwic2hvdWxkU2VuZE1ldGFkYXRhXCIsdm9pZCAwKSxlKHRoaXMsXCJpc1RvcnVzXCIsdm9pZCAwKSxlKHRoaXMsXCJfcHVibGljQ29uZmlnU3RvcmVcIix2b2lkIDApLGUodGhpcyxcInRyeVByZW9wZW5IYW5kbGVcIix2b2lkIDApLGUodGhpcyxcImVuYWJsZVwiLHZvaWQgMCksZSh0aGlzLFwiX3N0YXRlXCIsdm9pZCAwKSxlKHRoaXMsXCJfanNvblJwY0Nvbm5lY3Rpb25cIix2b2lkIDApLGUodGhpcyxcIl9zZW50V2FybmluZ3NcIix7ZW5hYmxlOiExLGV4cGVyaW1lbnRhbE1ldGhvZHM6ITEsc2VuZDohMSxwdWJsaWNDb25maWdTdG9yZTohMSxldmVudHM6e2Nsb3NlOiExLGRhdGE6ITEsbmV0d29ya0NoYW5nZWQ6ITEsbm90aWZpY2F0aW9uOiExfX0pLCEoMCxYZS5kdXBsZXgpKHQpKXRocm93IG5ldyBFcnJvcihKZS5lcnJvcnMuaW52YWxpZER1cGxleFN0cmVhbSgpKTt0aGlzLmlzVG9ydXM9ITAsdGhpcy5zZXRNYXhMaXN0ZW5lcnMociksdGhpcy5fc3RhdGU9ZnVuY3Rpb24odCl7Zm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dmFyIG49bnVsbCE9YXJndW1lbnRzW3JdP2FyZ3VtZW50c1tyXTp7fTtyJTI/c3QoT2JqZWN0KG4pLCEwKS5mb3JFYWNoKChmdW5jdGlvbihyKXtlKHQscixuW3JdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG4pKTpzdChPYmplY3QobikpLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLGUpKX0pKX1yZXR1cm4gdH0oe30sY3QuX2RlZmF1bHRTdGF0ZSksdGhpcy5zZWxlY3RlZEFkZHJlc3M9bnVsbCx0aGlzLm5ldHdvcmtWZXJzaW9uPW51bGwsdGhpcy5jaGFpbklkPW51bGwsdGhpcy5zaG91bGRTZW5kTWV0YWRhdGE9bix0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQ9dGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkLmJpbmQodGhpcyksdGhpcy5faGFuZGxlQ2hhaW5DaGFuZ2VkPXRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZC5iaW5kKHRoaXMpLHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZD10aGlzLl9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQuYmluZCh0aGlzKSx0aGlzLl9oYW5kbGVDb25uZWN0PXRoaXMuX2hhbmRsZUNvbm5lY3QuYmluZCh0aGlzKSx0aGlzLl9oYW5kbGVEaXNjb25uZWN0PXRoaXMuX2hhbmRsZURpc2Nvbm5lY3QuYmluZCh0aGlzKSx0aGlzLl9oYW5kbGVTdHJlYW1EaXNjb25uZWN0PXRoaXMuX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QuYmluZCh0aGlzKSx0aGlzLl9zZW5kU3luYz10aGlzLl9zZW5kU3luYy5iaW5kKHRoaXMpLHRoaXMuX3JwY1JlcXVlc3Q9dGhpcy5fcnBjUmVxdWVzdC5iaW5kKHRoaXMpLHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uPXRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uLmJpbmQodGhpcyksdGhpcy5faW5pdGlhbGl6ZVN0YXRlPXRoaXMuX2luaXRpYWxpemVTdGF0ZS5iaW5kKHRoaXMpLHRoaXMucmVxdWVzdD10aGlzLnJlcXVlc3QuYmluZCh0aGlzKSx0aGlzLnNlbmQ9dGhpcy5zZW5kLmJpbmQodGhpcyksdGhpcy5zZW5kQXN5bmM9dGhpcy5zZW5kQXN5bmMuYmluZCh0aGlzKTtjb25zdCBvPW5ldyBlZTtGKCkodCxvLHQsdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdC5iaW5kKHRoaXMsXCJNZXRhTWFza1wiKSksdGhpcy5fcHVibGljQ29uZmlnU3RvcmU9bmV3IFZlLk9ic2VydmFibGVTdG9yZSh7c3RvcmFnZUtleTpcIk1ldGFtYXNrLUNvbmZpZ1wifSksRigpKG8uY3JlYXRlU3RyZWFtKFwicHVibGljQ29uZmlnXCIpLCgwLFZlLnN0b3JlQXNTdHJlYW0pKHRoaXMuX3B1YmxpY0NvbmZpZ1N0b3JlKSxaZS5iaW5kKHRoaXMsXCJNZXRhTWFzayBQdWJsaWNDb25maWdTdG9yZVwiKSksby5pZ25vcmVTdHJlYW0oXCJwaGlzaGluZ1wiKSx0aGlzLm9uKFwiY29ubmVjdFwiLCgoKT0+e3RoaXMuX3N0YXRlLmlzQ29ubmVjdGVkPSEwfSkpO2NvbnN0IHM9ZnVuY3Rpb24oKXtjb25zdCBlPXt9LHQ9bmV3IEcscj1uZXcgUC5EdXBsZXgoe29iamVjdE1vZGU6ITAscmVhZDpmdW5jdGlvbigpe3JldHVybiExfSx3cml0ZTpmdW5jdGlvbihyLG4saSl7bGV0IG87dHJ5e3IuaWQ/ZnVuY3Rpb24odCl7Y29uc3Qgcj1lW3QuaWRdO2lmKCFyKXRocm93IG5ldyBFcnJvcignU3RyZWFtTWlkZGxld2FyZSAtIFVua25vd24gcmVzcG9uc2UgaWQgXCInLmNvbmNhdCh0LmlkLCdcIicpKTtkZWxldGUgZVt0LmlkXSxPYmplY3QuYXNzaWduKHIucmVzLHQpLHNldFRpbWVvdXQoci5lbmQpfShyKTpmdW5jdGlvbihlKXt0LmVtaXQoXCJub3RpZmljYXRpb25cIixlKX0ocil9Y2F0Y2goZSl7bz1lfWkobyl9fSk7cmV0dXJue2V2ZW50czp0LG1pZGRsZXdhcmU6KHQsbixpLG8pPT57ci5wdXNoKHQpLGVbdC5pZF09e3JlcTp0LHJlczpuLG5leHQ6aSxlbmQ6b319LHN0cmVhbTpyfX0oKTtGKCkocy5zdHJlYW0sby5jcmVhdGVTdHJlYW0oaSkscy5zdHJlYW0sdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdC5iaW5kKHRoaXMsXCJNZXRhTWFzayBScGNQcm92aWRlclwiKSk7Y29uc3QgYT1uZXcgWTthLnB1c2goKChlLHQscixuKT0+e2NvbnN0IGk9ZS5pZCxvPU0oKSgzMikudG9TdHJpbmcoXCJoZXhcIik7ZS5pZD1vLHQuaWQ9byxyKChyPT57ZS5pZD1pLHQuaWQ9aSxyKCl9KSl9KSksYS5wdXNoKCgoZSx0LHIpPT57XCJzdHJpbmdcIj09dHlwZW9mIGUubWV0aG9kJiZlLm1ldGhvZHx8KHQuZXJyb3I9ai5TeS5ycGMuaW52YWxpZFJlcXVlc3Qoe21lc3NhZ2U6XCJUaGUgcmVxdWVzdCAnbWV0aG9kJyBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy5cIixkYXRhOmV9KSkscigoZT0+e2NvbnN0e2Vycm9yOnJ9PXQ7cmV0dXJuIHI/KFllLmVycm9yKFwiTWV0YU1hc2sgLSBSUEMgRXJyb3I6IFwiLmNvbmNhdChyLm1lc3NhZ2UpLHIpLGUoKSk6ZSgpfSkpfSkpLGEucHVzaChzLm1pZGRsZXdhcmUpLHRoaXMuX3JwY0VuZ2luZT1hLHMuZXZlbnRzLm9uKFwibm90aWZpY2F0aW9uXCIsKGU9Pntjb25zdHttZXRob2Q6dCxwYXJhbXM6cn09ZTtcIndhbGxldF9hY2NvdW50c0NoYW5nZWRcIj09PXQ/dGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKHIpOlwid2FsbGV0X3VubG9ja1N0YXRlQ2hhbmdlZFwiPT09dD90aGlzLl9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQocik6XCJ3YWxsZXRfY2hhaW5DaGFuZ2VkXCI9PT10P3RoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZChyKTpydC5pbmNsdWRlcyhlLm1ldGhvZCkmJih0aGlzLmVtaXQoXCJkYXRhXCIsZSksdGhpcy5lbWl0KFwibm90aWZpY2F0aW9uXCIsci5yZXN1bHQpLHRoaXMuZW1pdChcIm1lc3NhZ2VcIix7dHlwZTp0LGRhdGE6cn0pKX0pKX1nZXQgcHVibGljQ29uZmlnU3RvcmUoKXtyZXR1cm4gdGhpcy5fc2VudFdhcm5pbmdzLnB1YmxpY0NvbmZpZ1N0b3JlfHwoWWUud2FybihKZS53YXJuaW5ncy5wdWJsaWNDb25maWdTdG9yZSksdGhpcy5fc2VudFdhcm5pbmdzLnB1YmxpY0NvbmZpZ1N0b3JlPSEwKSx0aGlzLl9wdWJsaWNDb25maWdTdG9yZX1pc0Nvbm5lY3RlZCgpe3JldHVybiB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZH1hc3luYyByZXF1ZXN0KGUpe2lmKCFlfHxcIm9iamVjdFwiIT10eXBlb2YgZXx8QXJyYXkuaXNBcnJheShlKSl0aHJvdyBqLlN5LnJwYy5pbnZhbGlkUmVxdWVzdCh7bWVzc2FnZTpKZS5lcnJvcnMuaW52YWxpZFJlcXVlc3RBcmdzKCksZGF0YTplfSk7Y29uc3R7bWV0aG9kOnQscGFyYW1zOnJ9PWU7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHR8fDA9PT10Lmxlbmd0aCl0aHJvdyBqLlN5LnJwYy5pbnZhbGlkUmVxdWVzdCh7bWVzc2FnZTpKZS5lcnJvcnMuaW52YWxpZFJlcXVlc3RNZXRob2QoKSxkYXRhOmV9KTtpZih2b2lkIDAhPT1yJiYhQXJyYXkuaXNBcnJheShyKSYmKFwib2JqZWN0XCIhPXR5cGVvZiByfHxudWxsPT09cikpdGhyb3cgai5TeS5ycGMuaW52YWxpZFJlcXVlc3Qoe21lc3NhZ2U6SmUuZXJyb3JzLmludmFsaWRSZXF1ZXN0UGFyYW1zKCksZGF0YTplfSk7cmV0dXJuIG5ldyBQcm9taXNlKCgoZSxuKT0+e3RoaXMuX3JwY1JlcXVlc3Qoe21ldGhvZDp0LHBhcmFtczpyfSxhdChlLG4pKX0pKX1zZW5kQXN5bmMoZSx0KXt0aGlzLl9ycGNSZXF1ZXN0KGUsdCl9YWRkTGlzdGVuZXIoZSx0KXtyZXR1cm4gdGhpcy5fd2Fybk9mRGVwcmVjYXRpb24oZSksc3VwZXIuYWRkTGlzdGVuZXIoZSx0KX1vbihlLHQpe3JldHVybiB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbihlKSxzdXBlci5vbihlLHQpfW9uY2UoZSx0KXtyZXR1cm4gdGhpcy5fd2Fybk9mRGVwcmVjYXRpb24oZSksc3VwZXIub25jZShlLHQpfXByZXBlbmRMaXN0ZW5lcihlLHQpe3JldHVybiB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbihlKSxzdXBlci5wcmVwZW5kTGlzdGVuZXIoZSx0KX1wcmVwZW5kT25jZUxpc3RlbmVyKGUsdCl7cmV0dXJuIHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uKGUpLHN1cGVyLnByZXBlbmRPbmNlTGlzdGVuZXIoZSx0KX1hc3luYyBfaW5pdGlhbGl6ZVN0YXRlKCl7dHJ5e2NvbnN0e2FjY291bnRzOmUsY2hhaW5JZDp0LGlzVW5sb2NrZWQ6cixuZXR3b3JrVmVyc2lvbjpufT1hd2FpdCB0aGlzLnJlcXVlc3Qoe21ldGhvZDpcIndhbGxldF9nZXRQcm92aWRlclN0YXRlXCJ9KTt0aGlzLmVtaXQoXCJjb25uZWN0XCIse2NoYWluSWQ6dH0pLHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZCh7Y2hhaW5JZDp0LG5ldHdvcmtWZXJzaW9uOm59KSx0aGlzLl9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQoe2FjY291bnRzOmUsaXNVbmxvY2tlZDpyfSksdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKGUpfWNhdGNoKGUpe1llLmVycm9yKFwiTWV0YU1hc2s6IEZhaWxlZCB0byBnZXQgaW5pdGlhbCBzdGF0ZS4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIixlKX1maW5hbGx5e1llLmluZm8oXCJpbml0aWFsaXplZCBzdGF0ZVwiKSx0aGlzLl9zdGF0ZS5pbml0aWFsaXplZD0hMCx0aGlzLmVtaXQoXCJfaW5pdGlhbGl6ZWRcIil9fV9ycGNSZXF1ZXN0KGUsdCl7bGV0IHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXSxuPXQ7Y29uc3QgaT1lO2lmKCFBcnJheS5pc0FycmF5KGkpKWlmKGkuanNvbnJwY3x8KGkuanNvbnJwYz1cIjIuMFwiKSxcImV0aF9hY2NvdW50c1wiPT09aS5tZXRob2R8fFwiZXRoX3JlcXVlc3RBY2NvdW50c1wiPT09aS5tZXRob2Qpbj0oZSxuKT0+e3RoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZChuLnJlc3VsdHx8W10sXCJldGhfYWNjb3VudHNcIj09PWkubWV0aG9kLHIpLHQoZSxuKX07ZWxzZSBpZihcIndhbGxldF9nZXRQcm92aWRlclN0YXRlXCI9PT1pLm1ldGhvZClyZXR1cm4gdm9pZCB0aGlzLl9ycGNFbmdpbmUuaGFuZGxlKGUsbik7dGhpcy50cnlQcmVvcGVuSGFuZGxlKGksbil9c2VuZChlLHQpe3JldHVybiB0aGlzLl9zZW50V2FybmluZ3Muc2VuZHx8KFllLndhcm4oSmUud2FybmluZ3Muc2VuZERlcHJlY2F0aW9uKSx0aGlzLl9zZW50V2FybmluZ3Muc2VuZD0hMCksXCJzdHJpbmdcIiE9dHlwZW9mIGV8fHQmJiFBcnJheS5pc0FycmF5KHQpP2UmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3RoaXMuX3JwY1JlcXVlc3QoZSx0KTp0aGlzLl9zZW5kU3luYyhlKTpuZXcgUHJvbWlzZSgoKHIsbik9Pnt0cnl7dGhpcy5fcnBjUmVxdWVzdCh7bWV0aG9kOmUscGFyYW1zOnR9LGF0KHIsbiwhMSkpfWNhdGNoKGUpe24oZSl9fSkpfV9zZW5kU3luYyhlKXtsZXQgdDtzd2l0Y2goZS5tZXRob2Qpe2Nhc2VcImV0aF9hY2NvdW50c1wiOnQ9dGhpcy5zZWxlY3RlZEFkZHJlc3M/W3RoaXMuc2VsZWN0ZWRBZGRyZXNzXTpbXTticmVhaztjYXNlXCJldGhfY29pbmJhc2VcIjp0PXRoaXMuc2VsZWN0ZWRBZGRyZXNzfHxudWxsO2JyZWFrO2Nhc2VcImV0aF91bmluc3RhbGxGaWx0ZXJcIjp0aGlzLl9ycGNSZXF1ZXN0KGUsbnQpLHQ9ITA7YnJlYWs7Y2FzZVwibmV0X3ZlcnNpb25cIjp0PXRoaXMubmV0d29ya1ZlcnNpb258fG51bGw7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoSmUuZXJyb3JzLnVuc3VwcG9ydGVkU3luYyhlLm1ldGhvZCkpfXJldHVybntpZDplLmlkLGpzb25ycGM6ZS5qc29ucnBjLHJlc3VsdDp0fX1faGFuZGxlQ29ubmVjdChlKXt0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZHx8KHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkPSEwLHRoaXMuZW1pdChcImNvbm5lY3RcIix7Y2hhaW5JZDplfSksWWUuZGVidWcoSmUuaW5mby5jb25uZWN0ZWQoZSkpKX1faGFuZGxlRGlzY29ubmVjdChlLHQpe2lmKHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkfHwhdGhpcy5fc3RhdGUuaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCYmIWUpe2xldCByO3RoaXMuX3N0YXRlLmlzQ29ubmVjdGVkPSExLGU/KHI9bmV3IGouQ2coMTAxMyx0fHxKZS5lcnJvcnMuZGlzY29ubmVjdGVkKCkpLFllLmRlYnVnKHIpKToocj1uZXcgai5DZygxMDExLHR8fEplLmVycm9ycy5wZXJtYW5lbnRseURpc2Nvbm5lY3RlZCgpKSxZZS5lcnJvcihyKSx0aGlzLmNoYWluSWQ9bnVsbCx0aGlzLl9zdGF0ZS5hY2NvdW50cz1udWxsLHRoaXMuc2VsZWN0ZWRBZGRyZXNzPW51bGwsdGhpcy5fc3RhdGUuaXNVbmxvY2tlZD0hMSx0aGlzLl9zdGF0ZS5pc1Blcm1hbmVudGx5RGlzY29ubmVjdGVkPSEwKSx0aGlzLmVtaXQoXCJkaXNjb25uZWN0XCIscil9fV9oYW5kbGVTdHJlYW1EaXNjb25uZWN0KGUsdCl7WmUoZSx0LHRoaXMpLHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QoITEsdD90Lm1lc3NhZ2U6dm9pZCAwKX1faGFuZGxlQWNjb3VudHNDaGFuZ2VkKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0scj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLG49ZTtBcnJheS5pc0FycmF5KG4pfHwoWWUuZXJyb3IoXCJNZXRhTWFzazogUmVjZWl2ZWQgbm9uLWFycmF5IGFjY291bnRzIHBhcmFtZXRlci4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIixuKSxuPVtdKTtmb3IoY29uc3QgdCBvZiBlKWlmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXtZZS5lcnJvcihcIk1ldGFNYXNrOiBSZWNlaXZlZCBub24tc3RyaW5nIGFjY291bnQuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsZSksbj1bXTticmVha31XZSgpKHRoaXMuX3N0YXRlLmFjY291bnRzLG4pfHwodCYmQXJyYXkuaXNBcnJheSh0aGlzLl9zdGF0ZS5hY2NvdW50cykmJnRoaXMuX3N0YXRlLmFjY291bnRzLmxlbmd0aD4wJiYhciYmWWUuZXJyb3IoJ01ldGFNYXNrOiBcImV0aF9hY2NvdW50c1wiIHVuZXhwZWN0ZWRseSB1cGRhdGVkIGFjY291bnRzLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLicsbiksdGhpcy5fc3RhdGUuYWNjb3VudHM9bix0aGlzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIixuKSksdGhpcy5zZWxlY3RlZEFkZHJlc3MhPT1uWzBdJiYodGhpcy5zZWxlY3RlZEFkZHJlc3M9blswXXx8bnVsbCl9X2hhbmRsZUNoYWluQ2hhbmdlZCgpe2xldHtjaGFpbklkOmUsbmV0d29ya1ZlcnNpb246dH09YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2UmJnQ/XCJsb2FkaW5nXCI9PT10P3RoaXMuX2hhbmRsZURpc2Nvbm5lY3QoITApOih0aGlzLl9oYW5kbGVDb25uZWN0KGUpLGUhPT10aGlzLmNoYWluSWQmJih0aGlzLmNoYWluSWQ9ZSx0aGlzLl9zdGF0ZS5pbml0aWFsaXplZCYmdGhpcy5lbWl0KFwiY2hhaW5DaGFuZ2VkXCIsdGhpcy5jaGFpbklkKSkpOlllLmVycm9yKFwiTWV0YU1hc2s6IFJlY2VpdmVkIGludmFsaWQgbmV0d29yayBwYXJhbWV0ZXJzLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLHtjaGFpbklkOmUsbmV0d29ya1ZlcnNpb246dH0pfV9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQoKXtsZXR7YWNjb3VudHM6ZSxpc1VubG9ja2VkOnR9PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtcImJvb2xlYW5cIj09dHlwZW9mIHQ/dCE9PXRoaXMuX3N0YXRlLmlzVW5sb2NrZWQmJih0aGlzLl9zdGF0ZS5pc1VubG9ja2VkPXQsdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKGV8fFtdKSk6WWUuZXJyb3IoXCJNZXRhTWFzazogUmVjZWl2ZWQgaW52YWxpZCBpc1VubG9ja2VkIHBhcmFtZXRlci4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIix7aXNVbmxvY2tlZDp0fSl9X3dhcm5PZkRlcHJlY2F0aW9uKGUpeyExPT09dGhpcy5fc2VudFdhcm5pbmdzLmV2ZW50c1tlXSYmKFllLndhcm4oSmUud2FybmluZ3MuZXZlbnRzW2VdKSx0aGlzLl9zZW50V2FybmluZ3MuZXZlbnRzW2VdPSEwKX19ZShjdCxcIl9kZWZhdWx0U3RhdGVcIix7YWNjb3VudHM6bnVsbCxpc0Nvbm5lY3RlZDohMSxpc1VubG9ja2VkOiExLGluaXRpYWxpemVkOiExLGlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6ITEsaGFzRW1pdHRlZENvbm5lY3Rpb246ITF9KTtjb25zdCBmdD1jdDt2YXIgdXQ9cigzNDgyKSxkdD1yLm4odXQpO2NvbnN0IGh0PShlLHQpPT57Y29uc3Qgcj17fTtyZXR1cm4gZS5hbGdvcml0aG1zLmZvckVhY2goKGU9PntyW2VdPWR0KCkoZSkudXBkYXRlKHQsXCJ1dGY4XCIpLmRpZ2VzdChcImJhc2U2NFwiKX0pKSxyfTtjbGFzcyBsdCBleHRlbmRzIFIuRXZlbnRFbWl0dGVye2NvbnN0cnVjdG9yKHQpe2xldHt1cmw6cix0YXJnZXQ6bixmZWF0dXJlczppfT10O3N1cGVyKCksZSh0aGlzLFwidXJsXCIsdm9pZCAwKSxlKHRoaXMsXCJ0YXJnZXRcIix2b2lkIDApLGUodGhpcyxcImZlYXR1cmVzXCIsdm9pZCAwKSxlKHRoaXMsXCJ3aW5kb3dcIix2b2lkIDApLGUodGhpcyxcIndpbmRvd1RpbWVyXCIsdm9pZCAwKSxlKHRoaXMsXCJpQ2xvc2VkV2luZG93XCIsdm9pZCAwKSx0aGlzLnVybD1yLHRoaXMudGFyZ2V0PW58fFwiX2JsYW5rXCIsdGhpcy5mZWF0dXJlcz1pfHxmdW5jdGlvbigpe2NvbnN0IGU9dm9pZCAwIT09d2luZG93LnNjcmVlbkxlZnQ/d2luZG93LnNjcmVlbkxlZnQ6d2luZG93LnNjcmVlblgsdD12b2lkIDAhPT13aW5kb3cuc2NyZWVuVG9wP3dpbmRvdy5zY3JlZW5Ub3A6d2luZG93LnNjcmVlblkscj13aW5kb3cuaW5uZXJXaWR0aD93aW5kb3cuaW5uZXJXaWR0aDpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg/ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoOndpbmRvdy5zY3JlZW4ud2lkdGgsbj13aW5kb3cuaW5uZXJIZWlnaHQ/d2luZG93LmlubmVySGVpZ2h0OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ/ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDp3aW5kb3cuc2NyZWVuLmhlaWdodCxpPU1hdGguYWJzKChyLTEyMDApLzIvMStlKSxvPU1hdGguYWJzKChuLTcwMCkvMi8xK3QpO3JldHVyblwidGl0bGViYXI9MCx0b29sYmFyPTAsc3RhdHVzPTAsbG9jYXRpb249MCxtZW51YmFyPTAsaGVpZ2h0PVwiLmNvbmNhdCg3MDAsXCIsd2lkdGg9XCIpLmNvbmNhdCgxMjAwLFwiLHRvcD1cIikuY29uY2F0KG8sXCIsbGVmdD1cIikuY29uY2F0KGkpfSgpLHRoaXMud2luZG93PXZvaWQgMCx0aGlzLndpbmRvd1RpbWVyPXZvaWQgMCx0aGlzLmlDbG9zZWRXaW5kb3c9ITEsdGhpcy5fc2V0dXBUaW1lcigpfV9zZXR1cFRpbWVyKCl7dGhpcy53aW5kb3dUaW1lcj1OdW1iZXIoc2V0SW50ZXJ2YWwoKCgpPT57dGhpcy53aW5kb3cmJnRoaXMud2luZG93LmNsb3NlZCYmKGNsZWFySW50ZXJ2YWwodGhpcy53aW5kb3dUaW1lciksdGhpcy5pQ2xvc2VkV2luZG93fHx0aGlzLmVtaXQoXCJjbG9zZVwiKSx0aGlzLmlDbG9zZWRXaW5kb3c9ITEsdGhpcy53aW5kb3c9dm9pZCAwKSx2b2lkIDA9PT10aGlzLndpbmRvdyYmY2xlYXJJbnRlcnZhbCh0aGlzLndpbmRvd1RpbWVyKX0pLDUwMCkpfW9wZW4oKXt2YXIgZTtyZXR1cm4gdGhpcy53aW5kb3c9d2luZG93Lm9wZW4odGhpcy51cmwuaHJlZix0aGlzLnRhcmdldCx0aGlzLmZlYXR1cmVzKSxudWxsIT09KGU9dGhpcy53aW5kb3cpJiZ2b2lkIDAhPT1lJiZlLmZvY3VzJiZ0aGlzLndpbmRvdy5mb2N1cygpLFByb21pc2UucmVzb2x2ZSgpfWNsb3NlKCl7dGhpcy5pQ2xvc2VkV2luZG93PSEwLHRoaXMud2luZG93JiZ0aGlzLndpbmRvdy5jbG9zZSgpfXJlZGlyZWN0KGUpe2U/d2luZG93LmxvY2F0aW9uLnJlcGxhY2UodGhpcy51cmwuaHJlZik6d2luZG93LmxvY2F0aW9uLmhyZWY9dGhpcy51cmwuaHJlZn19Y29uc3QgcHQ9bHQ7ZnVuY3Rpb24gYnQoZSl7cmV0dXJuIG5ldyBQcm9taXNlKCgodCxyKT0+e3RyeXtjb25zdCByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7ci5vbmxvYWQ9KCk9PnQoITApLHIub25lcnJvcj0oKT0+dCghMSksci5zcmM9ZX1jYXRjaChlKXtyKGUpfX0pKX1jb25zdCB5dD1lPT57Y29uc3R7ZG9jdW1lbnQ6dH09ZSxyPXQucXVlcnlTZWxlY3RvcignaGVhZCA+IG1ldGFbcHJvcGVydHk9XCJvZzpzaXRlX25hbWVcIl0nKTtpZihyKXJldHVybiByLmNvbnRlbnQ7Y29uc3Qgbj10LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgPiBtZXRhW25hbWU9XCJ0aXRsZVwiXScpO3JldHVybiBuP24uY29udGVudDp0LnRpdGxlJiZ0LnRpdGxlLmxlbmd0aD4wP3QudGl0bGU6ZS5sb2NhdGlvbi5ob3N0bmFtZX07YXN5bmMgZnVuY3Rpb24gZ3QoZSl7Y29uc3R7ZG9jdW1lbnQ6dH09ZTtsZXQgcj10LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgPiBsaW5rW3JlbD1cInNob3J0Y3V0IGljb25cIl0nKTtyZXR1cm4gciYmYXdhaXQgYnQoci5ocmVmKT9yLmhyZWY6KHI9QXJyYXkuZnJvbSh0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2hlYWQgPiBsaW5rW3JlbD1cImljb25cIl0nKSkuZmluZCgoZT0+Qm9vbGVhbihlLmhyZWYpKSksciYmYXdhaXQgYnQoci5ocmVmKT9yLmhyZWY6bnVsbCl9dmFyIG10PXIoODc2NCkuQnVmZmVyO2NvbnN0IHZ0PVtcImhvc3RcIixcImNoYWluSWRcIixcIm5ldHdvcmtOYW1lXCJdO2Z1bmN0aW9uIHd0KGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYobj1uLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpKSxyLnB1c2guYXBwbHkocixuKX1yZXR1cm4gcn1mdW5jdGlvbiBfdCh0KXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt2YXIgbj1udWxsIT1hcmd1bWVudHNbcl0/YXJndW1lbnRzW3JdOnt9O3IlMj93dChPYmplY3QobiksITApLmZvckVhY2goKGZ1bmN0aW9uKHIpe2UodCxyLG5bcl0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobikpOnd0KE9iamVjdChuKSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sZSkpfSkpfXJldHVybiB0fWNvbnN0IFN0PXtnb29nbGU6ITAsZmFjZWJvb2s6ITAscmVkZGl0OiEwLHR3aXRjaDohMCxkaXNjb3JkOiEwfSxFdD1cInNoYTM4NC1GTFBqMGpLcmI2dklsaTYyRWQ0bi9zcVdoZGhITXBGejNOZmZBVjRIOHVxVGt6UHNmNElBdEtGZ2VWR2d4YjQrXCIsQXQ9W1wiZXRoX3NlbmRUcmFuc2FjdGlvblwiLFwiZXRoX3NpZ25UeXBlZERhdGFcIixcImV0aF9zaWduVHlwZWREYXRhX3YzXCIsXCJldGhfc2lnblR5cGVkRGF0YV92NFwiLFwicGVyc29uYWxfc2lnblwiLFwiZXRoX2dldEVuY3J5cHRpb25QdWJsaWNLZXlcIixcImV0aF9kZWNyeXB0XCJdLHh0PWZ1bmN0aW9uKGUpe2xldCB0O3RyeXt0PXdpbmRvdy5sb2NhbFN0b3JhZ2U7Y29uc3QgZT1cIl9fc3RvcmFnZV90ZXN0X19cIjtyZXR1cm4gdC5zZXRJdGVtKGUsZSksdC5yZW1vdmVJdGVtKGUpLCEwfWNhdGNoKGUpe3JldHVybiBlJiYoMjI9PT1lLmNvZGV8fDEwMTQ9PT1lLmNvZGV8fFwiUXVvdGFFeGNlZWRlZEVycm9yXCI9PT1lLm5hbWV8fFwiTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRURcIj09PWUubmFtZSkmJnQmJjAhPT10Lmxlbmd0aH19KCk7IWFzeW5jIGZ1bmN0aW9uKCl7dHJ5e2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudClyZXR1cm47Y29uc3QgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSx7dG9ydXNVcmw6dH09YXdhaXQgZXQoXCJwcm9kdWN0aW9uXCIse2NoZWNrOiExLGhhc2g6RXQsdmVyc2lvbjpcIlwifSk7ZS5ocmVmPVwiXCIuY29uY2F0KHQsXCIvcG9wdXBcIiksZS5jcm9zc09yaWdpbj1cImFub255bW91c1wiLGUudHlwZT1cInRleHQvaHRtbFwiLGUucmVsPVwicHJlZmV0Y2hcIixlLnJlbExpc3QmJmUucmVsTGlzdC5zdXBwb3J0cyYmZS5yZWxMaXN0LnN1cHBvcnRzKFwicHJlZmV0Y2hcIikmJmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZSl9Y2F0Y2goZSl7WWUud2FybihlKX19KCk7Y29uc3Qga3Q9Y2xhc3N7Y29uc3RydWN0b3IoKXtsZXR7YnV0dG9uUG9zaXRpb246dD1CZS5CT1RUT01fTEVGVCxtb2RhbFpJbmRleDpyPTk5OTk5LGFwaUtleTpuPVwidG9ydXMtZGVmYXVsdFwifT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307ZSh0aGlzLFwiYnV0dG9uUG9zaXRpb25cIixCZS5CT1RUT01fTEVGVCksZSh0aGlzLFwidG9ydXNVcmxcIix2b2lkIDApLGUodGhpcyxcInRvcnVzSWZyYW1lXCIsdm9pZCAwKSxlKHRoaXMsXCJzdHlsZUxpbmtcIix2b2lkIDApLGUodGhpcyxcImlzTG9nZ2VkSW5cIix2b2lkIDApLGUodGhpcyxcImlzSW5pdGlhbGl6ZWRcIix2b2lkIDApLGUodGhpcyxcInRvcnVzV2lkZ2V0VmlzaWJpbGl0eVwiLHZvaWQgMCksZSh0aGlzLFwidG9ydXNBbGVydFwiLHZvaWQgMCksZSh0aGlzLFwibm9kZURldGFpbE1hbmFnZXJcIix2b2lkIDApLGUodGhpcyxcInRvcnVzSnNcIix2b2lkIDApLGUodGhpcyxcImFwaUtleVwiLHZvaWQgMCksZSh0aGlzLFwibW9kYWxaSW5kZXhcIix2b2lkIDApLGUodGhpcyxcImFsZXJ0WkluZGV4XCIsdm9pZCAwKSxlKHRoaXMsXCJ0b3J1c0FsZXJ0Q29udGFpbmVyXCIsdm9pZCAwKSxlKHRoaXMsXCJpc0lmcmFtZUZ1bGxTY3JlZW5cIix2b2lkIDApLGUodGhpcyxcIndoaXRlTGFiZWxcIix2b2lkIDApLGUodGhpcyxcInJlcXVlc3RlZFZlcmlmaWVyXCIsdm9pZCAwKSxlKHRoaXMsXCJjdXJyZW50VmVyaWZpZXJcIix2b2lkIDApLGUodGhpcyxcImVtYmVkVHJhbnNsYXRpb25zXCIsdm9pZCAwKSxlKHRoaXMsXCJldGhlcmV1bVwiLHZvaWQgMCksZSh0aGlzLFwicHJvdmlkZXJcIix2b2lkIDApLGUodGhpcyxcImNvbW11bmljYXRpb25NdXhcIix2b2lkIDApLGUodGhpcyxcImlzTG9naW5DYWxsYmFja1wiLHZvaWQgMCksZSh0aGlzLFwiZGFwcFN0b3JhZ2VLZXlcIix2b2lkIDApLGUodGhpcyxcInBheW1lbnRQcm92aWRlcnNcIixGZS5wYXltZW50UHJvdmlkZXJzKSxlKHRoaXMsXCJsb2dpbkhpbnRcIixcIlwiKSxlKHRoaXMsXCJ1c2VXYWxsZXRDb25uZWN0XCIsdm9pZCAwKSx0aGlzLmJ1dHRvblBvc2l0aW9uPXQsdGhpcy50b3J1c1VybD1cIlwiLHRoaXMuaXNMb2dnZWRJbj0hMSx0aGlzLmlzSW5pdGlhbGl6ZWQ9ITEsdGhpcy50b3J1c1dpZGdldFZpc2liaWxpdHk9ITAsdGhpcy5yZXF1ZXN0ZWRWZXJpZmllcj1cIlwiLHRoaXMuY3VycmVudFZlcmlmaWVyPVwiXCIsdGhpcy5ub2RlRGV0YWlsTWFuYWdlcj1uZXcgYyx0aGlzLnRvcnVzSnM9bmV3IFNlKHttZXRhZGF0YUhvc3Q6XCJodHRwczovL21ldGFkYXRhLnRvci51c1wiLGFsbG93SG9zdDpcImh0dHBzOi8vc2lnbmVyLnRvci51cy9hcGkvYWxsb3dcIixuZXR3b3JrOlwibWFpbm5ldFwifSksdGhpcy5hcGlLZXk9bixTZS5zZXRBUElLZXkobiksdihuKSx0aGlzLm1vZGFsWkluZGV4PXIsdGhpcy5hbGVydFpJbmRleD1yKzFlMyx0aGlzLmlzSWZyYW1lRnVsbFNjcmVlbj0hMSx0aGlzLmRhcHBTdG9yYWdlS2V5PVwiXCJ9YXN5bmMgaW5pdCgpe2xldHtidWlsZEVudjplPWplLlBST0RVQ1RJT04sZW5hYmxlTG9nZ2luZzp0PSExLGVuYWJsZWRWZXJpZmllcnM6cj1TdCxuZXR3b3JrOm49e2hvc3Q6XCJtYWlubmV0XCIsY2hhaW5JZDpudWxsLG5ldHdvcmtOYW1lOlwiXCIsYmxvY2tFeHBsb3JlcjpcIlwiLHRpY2tlcjpcIlwiLHRpY2tlck5hbWU6XCJcIn0sbG9naW5Db25maWc6aT17fSxzaG93VG9ydXNCdXR0b246bz0hMCxpbnRlZ3JpdHk6cz17Y2hlY2s6ITEsaGFzaDpFdCx2ZXJzaW9uOlwiXCJ9LHdoaXRlTGFiZWw6YSxza2lwVEtleTpjPSExLHVzZUxvY2FsU3RvcmFnZTpmPSExLHVzZVdhbGxldENvbm5lY3Q6ZD0hMX09YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2lmKHRoaXMuaXNJbml0aWFsaXplZCl0aHJvdyBuZXcgRXJyb3IoXCJBbHJlYWR5IGluaXRpYWxpemVkXCIpO2NvbnN0e3RvcnVzVXJsOmgsbG9nTGV2ZWw6bH09YXdhaXQgZXQoZSxzKTtZZS5pbmZvKGgsXCJ1cmwgbG9hZGVkXCIpLHRoaXMudG9ydXNVcmw9aCx0aGlzLndoaXRlTGFiZWw9YSx0aGlzLnVzZVdhbGxldENvbm5lY3Q9ZCxZZS5zZXREZWZhdWx0TGV2ZWwobCksdD9ZZS5lbmFibGVBbGwoKTpZZS5kaXNhYmxlQWxsKCksdGhpcy50b3J1c1dpZGdldFZpc2liaWxpdHk9bztsZXQgcD1cIlwiO2lmKHh0JiZmKXtjb25zdCBlPVwiXCIuY29uY2F0KEZlLmxvY2FsU3RvcmFnZUtleVByZWZpeCkuY29uY2F0KHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSksdD13aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oZSk7aWYodClwPXQ7ZWxzZXtjb25zdCB0PVwidG9ydXMtYXBwLVwiLmNvbmNhdChRZSgpKTt3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oZSx0KSxwPXR9fXRoaXMuZGFwcFN0b3JhZ2VLZXk9cDtjb25zdCBiPW5ldyBVUkwoaCk7Yi5wYXRobmFtZS5lbmRzV2l0aChcIi9cIik/Yi5wYXRobmFtZSs9XCJwb3B1cFwiOmIucGF0aG5hbWUrPVwiL3BvcHVwXCIscCYmKGIuaGFzaD1cIiNkYXBwU3RvcmFnZUtleT1cIi5jb25jYXQocCkpLHRoaXMudG9ydXNJZnJhbWU9emUoJzxpZnJhbWVcXG4gICAgICAgIGlkPVwidG9ydXNJZnJhbWVcIlxcbiAgICAgICAgYWxsb3c9Jy5jb25jYXQoZD9cImNhbWVyYVwiOlwiXCIsJ1xcbiAgICAgICAgY2xhc3M9XCJ0b3J1c0lmcmFtZVwiXFxuICAgICAgICBzcmM9XCInKS5jb25jYXQoYi5ocmVmLCdcIlxcbiAgICAgICAgc3R5bGU9XCJkaXNwbGF5OiBub25lOyBwb3NpdGlvbjogZml4ZWQ7IHRvcDogMDsgcmlnaHQ6IDA7IHdpZHRoOiAxMDAlO1xcbiAgICAgICAgaGVpZ2h0OiAxMDAlOyBib3JkZXI6IG5vbmU7IGJvcmRlci1yYWRpdXM6IDA7IHotaW5kZXg6ICcpLmNvbmNhdCh0aGlzLm1vZGFsWkluZGV4LCdcIlxcbiAgICAgID48L2lmcmFtZT4nKSksdGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyPXplKCc8ZGl2IGlkPVwidG9ydXNBbGVydENvbnRhaW5lclwiPjwvZGl2PicpLHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5zdHlsZS5zZXRQcm9wZXJ0eShcInotaW5kZXhcIix0aGlzLmFsZXJ0WkluZGV4LnRvU3RyaW5nKCkpO2NvbnN0IHk9d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO3kuc2V0QXR0cmlidXRlKFwicmVsXCIsXCJzdHlsZXNoZWV0XCIpLHkuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwidGV4dC9jc3NcIikseS5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsXCJcIi5jb25jYXQoaCxcIi9jc3Mvd2lkZ2V0LmNzc1wiKSksdGhpcy5zdHlsZUxpbms9eTtjb25zdHtkZWZhdWx0TGFuZ3VhZ2U6Zz10dCgpLGN1c3RvbVRyYW5zbGF0aW9uczptPXt9fT10aGlzLndoaXRlTGFiZWx8fHt9LHY9dSgpKEZlLnRyYW5zbGF0aW9ucyxtKVtnXXx8RmUudHJhbnNsYXRpb25zW3R0KCldO3RoaXMuZW1iZWRUcmFuc2xhdGlvbnM9di5lbWJlZDtjb25zdCB3PWFzeW5jKCk9Pihhd2FpdCBhc3luYyBmdW5jdGlvbigpe3JldHVybiBuZXcgUHJvbWlzZSgoZT0+e1wibG9hZGluZ1wiIT09ZG9jdW1lbnQucmVhZHlTdGF0ZT9lKCk6ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KG4+Mz9uLTM6MCksbz0zO288bjtvKyspaVtvLTNdPWFyZ3VtZW50c1tvXTtjb25zdCBzPSgpPT57ciguLi5pKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxzKX07ZS5hZGRFdmVudExpc3RlbmVyKHQscyl9KGRvY3VtZW50LFwiRE9NQ29udGVudExvYWRlZFwiLGUpfSkpfSgpLG5ldyBQcm9taXNlKCgoZSx0KT0+e3RoaXMudG9ydXNJZnJhbWUub25sb2FkPWFzeW5jKCk9Pnt0aGlzLl9zZXR1cFdlYjMoKTtjb25zdCBvPXRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJpbml0X3N0cmVhbVwiKTtvLm9uKFwiZGF0YVwiLChyPT57Y29uc3R7bmFtZTpuLGRhdGE6aSxlcnJvcjpvfT1yO1wiaW5pdF9jb21wbGV0ZVwiPT09biYmaS5zdWNjZXNzPyh0aGlzLmlzSW5pdGlhbGl6ZWQ9ITAsdGhpcy5fZGlzcGxheUlmcmFtZSh0aGlzLmlzSWZyYW1lRnVsbFNjcmVlbiksZSh2b2lkIDApKTpvJiZ0KG5ldyBFcnJvcihvKSl9KSksby53cml0ZSh7bmFtZTpcImluaXRfc3RyZWFtXCIsZGF0YTp7ZW5hYmxlZFZlcmlmaWVyczpyLGxvZ2luQ29uZmlnOmksd2hpdGVMYWJlbDp0aGlzLndoaXRlTGFiZWwsYnV0dG9uUG9zaXRpb246dGhpcy5idXR0b25Qb3NpdGlvbix0b3J1c1dpZGdldFZpc2liaWxpdHk6dGhpcy50b3J1c1dpZGdldFZpc2liaWxpdHksYXBpS2V5OnRoaXMuYXBpS2V5LHNraXBUS2V5OmMsbmV0d29yazpufX0pfSx3aW5kb3cuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlTGluayksd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy50b3J1c0lmcmFtZSksd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyKX0pKSk7aWYoXCJwcm9kdWN0aW9uXCI9PT1lJiZzLmNoZWNrKXtjb25zdCBlPVwiXCIuY29uY2F0KGgsXCIvcG9wdXBcIiksdD1hd2FpdCBmZXRjaChlLHtjYWNoZTpcInJlbG9hZFwifSk7aWYoXCJtYXgtYWdlPTM2MDBcIiE9PXQuaGVhZGVycy5nZXQoXCJDYWNoZS1Db250cm9sXCIpKXRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgQ2FjaGUtQ29udHJvbCBoZWFkZXJzLCBnb3QgXCIuY29uY2F0KHQuaGVhZGVycy5nZXQoXCJDYWNoZS1Db250cm9sXCIpKSk7Y29uc3Qgcj0oKGUsdCk9Pntjb25zdCByPShlPT4oe2FsZ29yaXRobXM6ZS5hbGdvcml0aG1zfHxbXCJzaGEyNTZcIl0sZGVsaW1pdGVyOmUuZGVsaW1pdGVyfHxcIiBcIixmdWxsOmUuZnVsbHx8ITF9KSkoZSksbj17aGFzaGVzOmh0KHIsdCksaW50ZWdyaXR5OnZvaWQgMH07cmV0dXJuIG4uaW50ZWdyaXR5PSgoZSx0KT0+e2xldCByPVwiXCI7cmV0dXJuIHIrPU9iamVjdC5rZXlzKHQuaGFzaGVzKS5tYXAoKGU9PlwiXCIuY29uY2F0KGUsXCItXCIpLmNvbmNhdCh0Lmhhc2hlc1tlXSkpKS5qb2luKGUuZGVsaW1pdGVyKSxyfSkocixuKSxyLmZ1bGw/bjpuLmludGVncml0eX0pKHthbGdvcml0aG1zOltcInNoYTM4NFwiXX0sYXdhaXQgdC50ZXh0KCkpO2lmKFllLmluZm8ocixcImludGVncml0eVwiKSxyIT09cy5oYXNoKXRocm93IHRoaXMuY2xlYXJJbml0KCksbmV3IEVycm9yKFwiSW50ZWdyaXR5IGNoZWNrIGZhaWxlZFwiKTthd2FpdCB3KCl9ZWxzZSBhd2FpdCB3KCl9bG9naW4oKXtsZXR7dmVyaWZpZXI6ZT1cIlwiLGxvZ2luX2hpbnQ6dD1cIlwifT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307aWYoIXRoaXMuaXNJbml0aWFsaXplZCl0aHJvdyBuZXcgRXJyb3IoXCJDYWxsIGluaXQoKSBmaXJzdFwiKTtyZXR1cm4gdGhpcy5yZXF1ZXN0ZWRWZXJpZmllcj1lLHRoaXMubG9naW5IaW50PXQsdGhpcy5ldGhlcmV1bS5lbmFibGUoKX1sb2dvdXQoKXtyZXR1cm4gbmV3IFByb21pc2UoKChlLHQpPT57aWYoIXRoaXMuaXNMb2dnZWRJbilyZXR1cm4gdm9pZCB0KG5ldyBFcnJvcihcIlVzZXIgaGFzIG5vdCBsb2dnZWQgaW4geWV0XCIpKTt0aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwibG9nb3V0XCIpLndyaXRlKHtuYW1lOlwibG9nT3V0XCJ9KTtjb25zdCByPXRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJzdGF0dXNcIik7S2UocixcImRhdGFcIiwocj0+e3IubG9nZ2VkSW4/dChuZXcgRXJyb3IoXCJTb21lIEVycm9yIE9jY3VyZWRcIikpOih0aGlzLmlzTG9nZ2VkSW49ITEsdGhpcy5jdXJyZW50VmVyaWZpZXI9XCJcIix0aGlzLnJlcXVlc3RlZFZlcmlmaWVyPVwiXCIsZSgpKX0pKX0pKX1hc3luYyBjbGVhblVwKCl7dGhpcy5pc0xvZ2dlZEluJiZhd2FpdCB0aGlzLmxvZ291dCgpLHRoaXMuY2xlYXJJbml0KCl9Y2xlYXJJbml0KCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEVsZW1lbnR8fGUgaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnR9ZSh0aGlzLnN0eWxlTGluaykmJndpbmRvdy5kb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuc3R5bGVMaW5rKSYmKHRoaXMuc3R5bGVMaW5rLnJlbW92ZSgpLHRoaXMuc3R5bGVMaW5rPXZvaWQgMCksZSh0aGlzLnRvcnVzSWZyYW1lKSYmd2luZG93LmRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy50b3J1c0lmcmFtZSkmJih0aGlzLnRvcnVzSWZyYW1lLnJlbW92ZSgpLHRoaXMudG9ydXNJZnJhbWU9dm9pZCAwKSxlKHRoaXMudG9ydXNBbGVydENvbnRhaW5lcikmJndpbmRvdy5kb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMudG9ydXNBbGVydENvbnRhaW5lcikmJih0aGlzLnRvcnVzQWxlcnQ9dm9pZCAwLHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5yZW1vdmUoKSx0aGlzLnRvcnVzQWxlcnRDb250YWluZXI9dm9pZCAwKSx0aGlzLmlzSW5pdGlhbGl6ZWQ9ITF9aGlkZVRvcnVzQnV0dG9uKCl7dGhpcy50b3J1c1dpZGdldFZpc2liaWxpdHk9ITEsdGhpcy5fc2VuZFdpZGdldFZpc2liaWxpdHlTdGF0dXMoITEpLHRoaXMuX2Rpc3BsYXlJZnJhbWUoKX1zaG93VG9ydXNCdXR0b24oKXt0aGlzLnRvcnVzV2lkZ2V0VmlzaWJpbGl0eT0hMCx0aGlzLl9zZW5kV2lkZ2V0VmlzaWJpbGl0eVN0YXR1cyghMCksdGhpcy5fZGlzcGxheUlmcmFtZSgpfXNldFByb3ZpZGVyKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHtob3N0OnQ9XCJtYWlubmV0XCIsY2hhaW5JZDpyPW51bGwsbmV0d29ya05hbWU6bj1cIlwifT1lLGk9ZnVuY3Rpb24oZSx0KXtpZihudWxsPT1lKXJldHVybnt9O3ZhciByLG4saT1mdW5jdGlvbihlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIHIsbixpPXt9LG89T2JqZWN0LmtleXMoZSk7Zm9yKG49MDtuPG8ubGVuZ3RoO24rKylyPW9bbl0sdC5pbmRleE9mKHIpPj0wfHwoaVtyXT1lW3JdKTtyZXR1cm4gaX0oZSx0KTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO2ZvcihuPTA7bjxvLmxlbmd0aDtuKyspcj1vW25dLHQuaW5kZXhPZihyKT49MHx8T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUscikmJihpW3JdPWVbcl0pfXJldHVybiBpfShlLHZ0KTtyZXR1cm4gbmV3IFByb21pc2UoKChlLG8pPT57Y29uc3Qgcz10aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwicHJvdmlkZXJfY2hhbmdlXCIpO0tlKHMsXCJkYXRhXCIsKHQ9Pntjb25zdHtlcnI6cixzdWNjZXNzOm59PXQuZGF0YTtZZS5pbmZvKHQpLHI/byhyKTpuP2UoKTpvKG5ldyBFcnJvcihcInNvbWUgZXJyb3Igb2NjdXJlZFwiKSl9KSk7Y29uc3QgYT1RZSgpO3RoaXMuX2hhbmRsZVdpbmRvdyhhLHt0YXJnZXQ6XCJfYmxhbmtcIixmZWF0dXJlczppdH0pLHMud3JpdGUoe25hbWU6XCJzaG93X3Byb3ZpZGVyX2NoYW5nZVwiLGRhdGE6e25ldHdvcms6X3Qoe2hvc3Q6dCxjaGFpbklkOnIsbmV0d29ya05hbWU6bn0saSkscHJlb3Blbkluc3RhbmNlSWQ6YSxvdmVycmlkZTohMX19KX0pKX1zaG93V2FsbGV0KGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtjb25zdCByPXRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJzaG93X3dhbGxldFwiKSxuPWU/XCIvXCIuY29uY2F0KGUpOlwiXCI7ci53cml0ZSh7bmFtZTpcInNob3dfd2FsbGV0XCIsZGF0YTp7cGF0aDpufX0pLEtlKHIsXCJkYXRhXCIsKGU9PntpZihcInNob3dfd2FsbGV0X2luc3RhbmNlXCI9PT1lLm5hbWUpe2NvbnN0e2luc3RhbmNlSWQ6cn09ZS5kYXRhLGk9bmV3IFVSTChcIlwiLmNvbmNhdCh0aGlzLnRvcnVzVXJsLFwiL3dhbGxldFwiKS5jb25jYXQobikpO2kuc2VhcmNoUGFyYW1zLmFwcGVuZChcImludGVncml0eVwiLFwidHJ1ZVwiKSxpLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbnN0YW5jZUlkXCIsciksT2JqZWN0LmtleXModCkuZm9yRWFjaCgoZT0+e2kuc2VhcmNoUGFyYW1zLmFwcGVuZChlLHRbZV0pfSkpLHRoaXMuZGFwcFN0b3JhZ2VLZXkmJihpLmhhc2g9XCIjZGFwcFN0b3JhZ2VLZXk9XCIuY29uY2F0KHRoaXMuZGFwcFN0b3JhZ2VLZXkpKSxuZXcgcHQoe3VybDppLGZlYXR1cmVzOlwiZGlyZWN0b3JpZXM9MCx0aXRsZWJhcj0wLHRvb2xiYXI9MCxzdGF0dXM9MCxsb2NhdGlvbj0wLG1lbnViYXI9MCxoZWlnaHQ9NzQwLHdpZHRoPTEzMTVcIn0pLm9wZW4oKX19KSl9YXN5bmMgZ2V0UHVibGljQWRkcmVzcyhlKXtsZXR7dmVyaWZpZXI6dCx2ZXJpZmllcklkOnIsaXNFeHRlbmRlZDpuPSExfT1lO2lmKCFGZS5zdXBwb3J0ZWRWZXJpZmllckxpc3QuaW5jbHVkZXModCl8fCFBZVt0XSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB2ZXJpZmllclwiKTtjb25zdCBpPWF3YWl0IHRoaXMubm9kZURldGFpbE1hbmFnZXIuZ2V0Tm9kZURldGFpbHMoe3ZlcmlmaWVyOnQsdmVyaWZpZXJJZDpyfSksbz1pLnRvcnVzTm9kZUVuZHBvaW50cyxzPWkudG9ydXNOb2RlUHViLGE9dCxjPUFlW3RdO3RyeXtjb25zdCBlPWF3YWl0IHRoaXMudG9ydXNKcy5nZXRVc2VyVHlwZUFuZEFkZHJlc3MobyxzLHt2ZXJpZmllcjphLHZlcmlmaWVySWQ6cn0pO2lmKFwidjFcIj09PWUudHlwZU9mVXNlcilyZXR1cm4gbj9lOmUuYWRkcmVzcztjb25zdCB0PWF3YWl0IHRoaXMudG9ydXNKcy5nZXRVc2VyVHlwZUFuZEFkZHJlc3MobyxzLHt2ZXJpZmllcjpjLHZlcmlmaWVySWQ6cn0sITApO3JldHVybiBuP3Q6dC5hZGRyZXNzfWNhdGNoKGUpe2lmKG51bGwhPWUmJmUubWVzc2FnZS5pbmNsdWRlcyhcIlZlcmlmaWVyICsgVmVyaWZpZXJJRCBoYXMgbm90IHlldCBiZWVuIGFzc2lnbmVkXCIpKXtjb25zdCBlPWF3YWl0IHRoaXMudG9ydXNKcy5nZXRVc2VyVHlwZUFuZEFkZHJlc3MobyxzLHt2ZXJpZmllcjpjLHZlcmlmaWVySWQ6cn0sITApO3JldHVybiBuP2U6ZS5hZGRyZXNzfXRocm93IGV9fWdldFVzZXJJbmZvKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoKHQscik9PntpZih0aGlzLmlzTG9nZ2VkSW4pe2NvbnN0IG49dGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcInVzZXJfaW5mb19hY2Nlc3NcIik7bi53cml0ZSh7bmFtZTpcInVzZXJfaW5mb19hY2Nlc3NfcmVxdWVzdFwifSk7Y29uc3QgaT1uPT57Y29uc3R7bmFtZTppLGRhdGE6e2FwcHJvdmVkOm8scGF5bG9hZDpzLHJlamVjdGVkOmEsbmV3UmVxdWVzdDpjfX09bjtpZihcInVzZXJfaW5mb19hY2Nlc3NfcmVzcG9uc2VcIj09PWkpaWYobyl0KHMpO2Vsc2UgaWYoYSlyKG5ldyBFcnJvcihcIlVzZXIgcmVqZWN0ZWQgdGhlIHJlcXVlc3RcIikpO2Vsc2UgaWYoYyl7Y29uc3Qgbj10aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwidXNlcl9pbmZvXCIpO0tlKG4sXCJkYXRhXCIsKGU9PntcInVzZXJfaW5mb19yZXNwb25zZVwiPT09ZS5uYW1lJiYoZS5kYXRhLmFwcHJvdmVkP3QoZS5kYXRhLnBheWxvYWQpOnIobmV3IEVycm9yKFwiVXNlciByZWplY3RlZCB0aGUgcmVxdWVzdFwiKSkpfSkpO2NvbnN0IGk9UWUoKTt0aGlzLl9oYW5kbGVXaW5kb3coaSx7dGFyZ2V0OlwiX2JsYW5rXCIsZmVhdHVyZXM6aXR9KSxuLndyaXRlKHtuYW1lOlwidXNlcl9pbmZvX3JlcXVlc3RcIixkYXRhOnttZXNzYWdlOmUscHJlb3Blbkluc3RhbmNlSWQ6aX19KX19O0tlKG4sXCJkYXRhXCIsaSl9ZWxzZSByKG5ldyBFcnJvcihcIlVzZXIgaGFzIG5vdCBsb2dnZWQgaW4geWV0XCIpKX0pKX1pbml0aWF0ZVRvcHVwKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKCgocixuKT0+e2lmKHRoaXMuaXNJbml0aWFsaXplZCl7Y29uc3R7ZXJyb3JzOmksaXNWYWxpZDpvfT0oKGUsdCk9Pntjb25zdCByPXt9O2lmKCFlKXJldHVybntlcnJvcnM6cixpc1ZhbGlkOiEwfTtpZihlJiYhJGVbZV0pcmV0dXJuIHIucHJvdmlkZXI9XCJJbnZhbGlkIFByb3ZpZGVyXCIse2Vycm9yczpyLGlzVmFsaWQ6MD09PU9iamVjdC5rZXlzKHIpLmxlbmd0aH07Y29uc3Qgbj0kZVtlXSxpPXR8fHt9O2lmKGkuZmlhdFZhbHVlKXtjb25zdCBlPStwYXJzZUZsb2F0KGkuZmlhdFZhbHVlLnRvU3RyaW5nKCkpfHwwO2U8bi5taW5PcmRlclZhbHVlJiYoci5maWF0VmFsdWU9XCJSZXF1ZXN0ZWQgYW1vdW50IGlzIGxvd2VyIHRoYW4gc3VwcG9ydGVkXCIpLGU+bi5tYXhPcmRlclZhbHVlJiZuLmVuZm9yY2VNYXgmJihyLmZpYXRWYWx1ZT1cIlJlcXVlc3RlZCBhbW91bnQgaXMgaGlnaGVyIHRoYW4gc3VwcG9ydGVkXCIpfWlmKGkuc2VsZWN0ZWRDdXJyZW5jeSYmIW4udmFsaWRDdXJyZW5jaWVzLmluY2x1ZGVzKGkuc2VsZWN0ZWRDdXJyZW5jeSkmJihyLnNlbGVjdGVkQ3VycmVuY3k9XCJVbnN1cHBvcnRlZCBjdXJyZW5jeVwiKSxpLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3kpe2NvbnN0IHQ9T2JqZWN0LnZhbHVlcyhuLnZhbGlkQ3J5cHRvQ3VycmVuY2llc0J5Q2hhaW4pLmZsYXQoKS5tYXAoKGU9PmUudmFsdWUpKSxvPWU9PT14ZT9pLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3kudG9Mb3dlckNhc2UoKTppLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3k7dCYmIXQuaW5jbHVkZXMobykmJihyLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3k9XCJVbnN1cHBvcnRlZCBjcnlwdG9DdXJyZW5jeVwiKX1yZXR1cm57ZXJyb3JzOnIsaXNWYWxpZDowPT09T2JqZWN0LmtleXMocikubGVuZ3RofX0pKGUsdCk7aWYoIW8pcmV0dXJuIHZvaWQgbihuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoaSkpKTtjb25zdCBzPXRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJ0b3B1cFwiKTtLZShzLFwiZGF0YVwiLChlPT57XCJ0b3B1cF9yZXNwb25zZVwiPT09ZS5uYW1lJiYoZS5kYXRhLnN1Y2Nlc3M/cihlLmRhdGEuc3VjY2Vzcyk6bihuZXcgRXJyb3IoZS5kYXRhLmVycm9yKSkpfSkpO2NvbnN0IGE9UWUoKTt0aGlzLl9oYW5kbGVXaW5kb3coYSkscy53cml0ZSh7bmFtZTpcInRvcHVwX3JlcXVlc3RcIixkYXRhOntwcm92aWRlcjplLHBhcmFtczp0LHByZW9wZW5JbnN0YW5jZUlkOmF9fSl9ZWxzZSBuKG5ldyBFcnJvcihcIlRvcnVzIGlzIG5vdCBpbml0aWFsaXplZCB5ZXRcIikpfSkpfWFzeW5jIGxvZ2luV2l0aFByaXZhdGVLZXkoZSl7Y29uc3R7cHJpdmF0ZUtleTp0LHVzZXJJbmZvOnJ9PWU7cmV0dXJuIG5ldyBQcm9taXNlKCgoZSxuKT0+e2lmKHRoaXMuaXNJbml0aWFsaXplZCl7aWYoMzIhPT1tdC5mcm9tKHQsXCJoZXhcIikubGVuZ3RoKXJldHVybiB2b2lkIG4obmV3IEVycm9yKFwiSW52YWxpZCBwcml2YXRlIGtleSwgUGxlYXNlIHByb3ZpZGUgYSAzMiBieXRlIHZhbGlkIHNlY3AyNWsxIHByaXZhdGUga2V5XCIpKTtjb25zdCBpPXRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJsb2dpbl93aXRoX3ByaXZhdGVfa2V5XCIpO0tlKGksXCJkYXRhXCIsKHQ9PntcImxvZ2luX3dpdGhfcHJpdmF0ZV9rZXlfcmVzcG9uc2VcIj09PXQubmFtZSYmKHQuZGF0YS5zdWNjZXNzP2UodC5kYXRhLnN1Y2Nlc3MpOm4obmV3IEVycm9yKHQuZGF0YS5lcnJvcikpKX0pKSxpLndyaXRlKHtuYW1lOlwibG9naW5fd2l0aF9wcml2YXRlX2tleV9yZXF1ZXN0XCIsZGF0YTp7cHJpdmF0ZUtleTp0LHVzZXJJbmZvOnJ9fSl9ZWxzZSBuKG5ldyBFcnJvcihcIlRvcnVzIGlzIG5vdCBpbml0aWFsaXplZCB5ZXRcIikpfSkpfWFzeW5jIHNob3dXYWxsZXRDb25uZWN0U2Nhbm5lcigpe2lmKCF0aGlzLnVzZVdhbGxldENvbm5lY3QpdGhyb3cgbmV3IEVycm9yKFwiU2V0IGB1c2VXYWxsZXRDb25uZWN0YCBhcyB0cnVlIGluIGluaXQgZnVuY3Rpb24gb3B0aW9ucyB0byB1c2Ugd2FsbGV0IGNvbm5lY3Qgc2Nhbm5lclwiKTtyZXR1cm4gbmV3IFByb21pc2UoKChlLHQpPT57aWYodGhpcy5pc0xvZ2dlZEluKXtjb25zdCByPXRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJ3YWxsZXRfY29ubmVjdF9zdHJlYW1cIik7S2UocixcImRhdGFcIiwocj0+e1wid2FsbGV0X2Nvbm5lY3Rfc3RyZWFtX3Jlc1wiPT09ci5uYW1lJiYoci5kYXRhLnN1Y2Nlc3M/ZShyLmRhdGEuc3VjY2Vzcyk6dChuZXcgRXJyb3Ioci5kYXRhLmVycm9yKSksdGhpcy5fZGlzcGxheUlmcmFtZSgpKX0pKSxyLndyaXRlKHtuYW1lOlwid2FsbGV0X2Nvbm5lY3Rfc3RyZWFtX3JlcVwifSksdGhpcy5fZGlzcGxheUlmcmFtZSghMCl9ZWxzZSB0KG5ldyBFcnJvcihcIlVzZXIgaGFzIG5vdCBsb2dnZWQgaW4geWV0XCIpKX0pKX1faGFuZGxlV2luZG93KGUpe2xldHt1cmw6dCx0YXJnZXQ6cixmZWF0dXJlczpufT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307aWYoZSl7Y29uc3QgaT10aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwid2luZG93XCIpLG89bmV3IFVSTCh0fHxcIlwiLmNvbmNhdCh0aGlzLnRvcnVzVXJsLFwiL3JlZGlyZWN0P3ByZW9wZW5JbnN0YW5jZUlkPVwiKS5jb25jYXQoZSkpO3RoaXMuZGFwcFN0b3JhZ2VLZXkmJihvLmhhc2g/by5oYXNoKz1cIiZkYXBwU3RvcmFnZUtleT1cIi5jb25jYXQodGhpcy5kYXBwU3RvcmFnZUtleSk6by5oYXNoPVwiI2RhcHBTdG9yYWdlS2V5PVwiLmNvbmNhdCh0aGlzLmRhcHBTdG9yYWdlS2V5KSk7Y29uc3Qgcz1uZXcgcHQoe3VybDpvLHRhcmdldDpyLGZlYXR1cmVzOm59KTtpZihzLm9wZW4oKSwhcy53aW5kb3cpcmV0dXJuIHZvaWQgdGhpcy5fY3JlYXRlUG9wdXBCbG9ja0FsZXJ0KGUsby5ocmVmKTtpLndyaXRlKHtuYW1lOlwib3BlbmVkX3dpbmRvd1wiLGRhdGE6e3ByZW9wZW5JbnN0YW5jZUlkOmV9fSk7Y29uc3QgYT10PT57bGV0e3ByZW9wZW5JbnN0YW5jZUlkOnIsY2xvc2U6bn09dDtyPT09ZSYmbiYmKHMuY2xvc2UoKSxpLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLGEpKX07aS5vbihcImRhdGFcIixhKSxzLm9uY2UoXCJjbG9zZVwiLCgoKT0+e2kud3JpdGUoe2RhdGE6e3ByZW9wZW5JbnN0YW5jZUlkOmUsY2xvc2VkOiEwfX0pLGkucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsYSl9KSl9fV9zZXRFbWJlZFdoaXRlTGFiZWwoZSl7Y29uc3R7dGhlbWU6dH09dGhpcy53aGl0ZUxhYmVsfHx7fTtpZih0KXtjb25zdHtpc0Rhcms6cj0hMSxjb2xvcnM6bj17fX09dDtyJiZlLmNsYXNzTGlzdC5hZGQoXCJ0b3J1cy1kYXJrXCIpLG4udG9ydXNCcmFuZDEmJmUuc3R5bGUuc2V0UHJvcGVydHkoXCItLXRvcnVzLWJyYW5kLTFcIixuLnRvcnVzQnJhbmQxKSxuLnRvcnVzR3JheTImJmUuc3R5bGUuc2V0UHJvcGVydHkoXCItLXRvcnVzLWdyYXktMlwiLG4udG9ydXNHcmF5Mil9fV9nZXRMb2dvVXJsKCl7dmFyIGUsdDtsZXQgcj1cIlwiLmNvbmNhdCh0aGlzLnRvcnVzVXJsLFwiL2ltYWdlcy90b3J1c19pY29uLWJsdWUuc3ZnXCIpO3ZhciBuLGk7cmV0dXJuIHI9bnVsbCE9PShlPXRoaXMud2hpdGVMYWJlbCkmJnZvaWQgMCE9PWUmJm51bGwhPT0odD1lLnRoZW1lKSYmdm9pZCAwIT09dCYmdC5pc0Rhcms/KG51bGw9PT0obj10aGlzLndoaXRlTGFiZWwpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLmxvZ29MaWdodCl8fHI6KG51bGw9PT0oaT10aGlzLndoaXRlTGFiZWwpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmxvZ29EYXJrKXx8cixyfV9zZW5kV2lkZ2V0VmlzaWJpbGl0eVN0YXR1cyhlKXt0aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwidG9ydXMtd2lkZ2V0LXZpc2liaWxpdHlcIikud3JpdGUoe2RhdGE6ZX0pfV9kaXNwbGF5SWZyYW1lKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXTtjb25zdCB0PXt9O2lmKGUpdC5kaXNwbGF5PVwiYmxvY2tcIix0LndpZHRoPVwiMTAwJVwiLHQuaGVpZ2h0PVwiMTAwJVwiLHQudG9wPVwiMHB4XCIsdC5yaWdodD1cIjBweFwiLHQubGVmdD1cIjBweFwiLHQuYm90dG9tPVwiMHB4XCI7ZWxzZSBzd2l0Y2godC5kaXNwbGF5PXRoaXMudG9ydXNXaWRnZXRWaXNpYmlsaXR5P1wiYmxvY2tcIjpcIm5vbmVcIix0LmhlaWdodD1cIjcwcHhcIix0LndpZHRoPVwiNzBweFwiLHRoaXMuYnV0dG9uUG9zaXRpb24pe2Nhc2UgQmUuVE9QX0xFRlQ6dC50b3A9XCIwcHhcIix0LmxlZnQ9XCIwcHhcIix0LnJpZ2h0PVwiYXV0b1wiLHQuYm90dG9tPVwiYXV0b1wiO2JyZWFrO2Nhc2UgQmUuVE9QX1JJR0hUOnQudG9wPVwiMHB4XCIsdC5yaWdodD1cIjBweFwiLHQubGVmdD1cImF1dG9cIix0LmJvdHRvbT1cImF1dG9cIjticmVhaztjYXNlIEJlLkJPVFRPTV9SSUdIVDp0LmJvdHRvbT1cIjBweFwiLHQucmlnaHQ9XCIwcHhcIix0LnRvcD1cImF1dG9cIix0LmxlZnQ9XCJhdXRvXCI7YnJlYWs7Y2FzZSBCZS5CT1RUT01fTEVGVDpkZWZhdWx0OnQuYm90dG9tPVwiMHB4XCIsdC5sZWZ0PVwiMHB4XCIsdC50b3A9XCJhdXRvXCIsdC5yaWdodD1cImF1dG9cIn1PYmplY3QuYXNzaWduKHRoaXMudG9ydXNJZnJhbWUuc3R5bGUsdCksdGhpcy5pc0lmcmFtZUZ1bGxTY3JlZW49ZX1fc2V0dXBXZWIzKCl7WWUuaW5mbyhcInNldHVwV2ViMyBydW5uaW5nXCIpO2NvbnN0IGU9bmV3IEsoe25hbWU6XCJlbWJlZF9tZXRhbWFza1wiLHRhcmdldDpcImlmcmFtZV9tZXRhbWFza1wiLHRhcmdldFdpbmRvdzp0aGlzLnRvcnVzSWZyYW1lLmNvbnRlbnRXaW5kb3csdGFyZ2V0T3JpZ2luOm5ldyBVUkwodGhpcy50b3J1c1VybCkub3JpZ2lufSksdD1uZXcgSyh7bmFtZTpcImVtYmVkX2NvbW1cIix0YXJnZXQ6XCJpZnJhbWVfY29tbVwiLHRhcmdldFdpbmRvdzp0aGlzLnRvcnVzSWZyYW1lLmNvbnRlbnRXaW5kb3csdGFyZ2V0T3JpZ2luOm5ldyBVUkwodGhpcy50b3J1c1VybCkub3JpZ2lufSkscj1uZXcgZnQoZSksbj1lPT57Y29uc3QgdD1yW2VdO3JbZV09ZnVuY3Rpb24oZSl7aWYoZSYmXCJldGhfcmVxdWVzdEFjY291bnRzXCI9PT1lKXJldHVybiByLmVuYWJsZSgpO2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KG4+MT9uLTE6MCksbz0xO288bjtvKyspaVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gdC5hcHBseSh0aGlzLFtlLC4uLmldKX19O24oXCJzZW5kXCIpLG4oXCJzZW5kQXN5bmNcIiksci5lbmFibGU9KCk9Pm5ldyBQcm9taXNlKCgoZSx0KT0+e3Iuc2VuZEFzeW5jKHtqc29ucnBjOlwiMi4wXCIsaWQ6UWUoKSxtZXRob2Q6XCJldGhfcmVxdWVzdEFjY291bnRzXCIscGFyYW1zOltdfSwoKHIsbik9Pntjb25zdHtyZXN1bHQ6aX09bnx8e307aWYocilzZXRUaW1lb3V0KCgoKT0+e3Qocil9KSw1MCk7ZWxzZSBpZihBcnJheS5pc0FycmF5KGkpJiZpLmxlbmd0aD4wKXtjb25zdCByPSgpPT57aWYoXCJcIiE9PXRoaXMucmVxdWVzdGVkVmVyaWZpZXImJnRoaXMuY3VycmVudFZlcmlmaWVyIT09dGhpcy5yZXF1ZXN0ZWRWZXJpZmllcil7Y29uc3R7cmVxdWVzdGVkVmVyaWZpZXI6cn09dGhpczt0aGlzLmxvZ291dCgpLnRoZW4oKG49Pnt0aGlzLnJlcXVlc3RlZFZlcmlmaWVyPXIsdGhpcy5fc2hvd0xvZ2luUG9wdXAoITAsZSx0KX0pKS5jYXRjaCgoZT0+dChlKSkpfWVsc2UgZShpKX07dGhpcy5pc0xvZ2dlZEluP3IoKTp0aGlzLmlzTG9naW5DYWxsYmFjaz1yfWVsc2UgdGhpcy5fc2hvd0xvZ2luUG9wdXAoITAsZSx0KX0pKX0pKSxyLnRyeVByZW9wZW5IYW5kbGU9KGUsdCk9Pntjb25zdCBuPWU7aWYoIUFycmF5LmlzQXJyYXkobikmJkF0LmluY2x1ZGVzKG4ubWV0aG9kKSl7Y29uc3QgZT1RZSgpO3RoaXMuX2hhbmRsZVdpbmRvdyhlLHt0YXJnZXQ6XCJfYmxhbmtcIixmZWF0dXJlczpvdH0pLG4ucHJlb3Blbkluc3RhbmNlSWQ9ZX1yLl9ycGNFbmdpbmUuaGFuZGxlKG4sdCl9O2NvbnN0IGk9bmV3IFByb3h5KHIse2RlbGV0ZVByb3BlcnR5OigpPT4hMH0pO3RoaXMuZXRoZXJldW09aTtjb25zdCBvPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9bmV3IGVlO3JldHVybiB0LmdldFN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fc3Vic3RyZWFtc1tlXT90aGlzLl9zdWJzdHJlYW1zW2VdOnRoaXMuY3JlYXRlU3RyZWFtKGUpfSxGKCkoZSx0LGUsKGU9PntlJiZ3aW5kb3cuY29uc29sZS5lcnJvcihlKX0pKSx0fSh0KTt0aGlzLmNvbW11bmljYXRpb25NdXg9byxvLmdldFN0cmVhbShcIndpbmRvd1wiKS5vbihcImRhdGFcIiwoZT0+e1wiY3JlYXRlX3dpbmRvd1wiPT09ZS5uYW1lJiZ0aGlzLl9jcmVhdGVQb3B1cEJsb2NrQWxlcnQoZS5kYXRhLnByZW9wZW5JbnN0YW5jZUlkLGUuZGF0YS51cmwpfSkpLG8uZ2V0U3RyZWFtKFwid2lkZ2V0XCIpLm9uKFwiZGF0YVwiLChlPT57Y29uc3R7ZGF0YTp0fT1lO3RoaXMuX2Rpc3BsYXlJZnJhbWUodCl9KSksby5nZXRTdHJlYW0oXCJzdGF0dXNcIikub24oXCJkYXRhXCIsKGU9PntlLmxvZ2dlZEluPyh0aGlzLmlzTG9nZ2VkSW49ZS5sb2dnZWRJbix0aGlzLmN1cnJlbnRWZXJpZmllcj1lLnZlcmlmaWVyKTp0aGlzLl9kaXNwbGF5SWZyYW1lKCksdGhpcy5pc0xvZ2luQ2FsbGJhY2smJih0aGlzLmlzTG9naW5DYWxsYmFjaygpLGRlbGV0ZSB0aGlzLmlzTG9naW5DYWxsYmFjayl9KSksdGhpcy5wcm92aWRlcj1pLHRoaXMucHJvdmlkZXIuc2hvdWxkU2VuZE1ldGFkYXRhJiZhc3luYyBmdW5jdGlvbihlKXt0cnl7Y29uc3QgdD1hd2FpdChhc3luYygpPT4oe25hbWU6eXQod2luZG93KSxpY29uOmF3YWl0IGd0KHdpbmRvdyl9KSkoKTtlLmhhbmRsZSh7anNvbnJwYzpcIjIuMFwiLGlkOlFlKCksbWV0aG9kOlwid2FsbGV0X3NlbmREb21haW5NZXRhZGF0YVwiLHBhcmFtczp0fSxudCl9Y2F0Y2goZSl7WWUuZXJyb3Ioe21lc3NhZ2U6SmUuZXJyb3JzLnNlbmRTaXRlTWV0YWRhdGEoKSxvcmlnaW5hbEVycm9yOmV9KX19KHRoaXMucHJvdmlkZXIuX3JwY0VuZ2luZSksci5faW5pdGlhbGl6ZVN0YXRlKCksWWUuZGVidWcoXCJUb3J1cyAtIGluamVjdGVkIHByb3ZpZGVyXCIpfV9zaG93TG9naW5Qb3B1cChlLHQscil7Y29uc3Qgbj1lPT57Y29uc3R7ZXJyOm4sc2VsZWN0ZWRBZGRyZXNzOml9PWU7bj8oWWUuZXJyb3IobiksciYmcihuKSk6dCYmdChbaV0pLHRoaXMuaXNJZnJhbWVGdWxsU2NyZWVuJiZ0aGlzLl9kaXNwbGF5SWZyYW1lKCl9LGk9dGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcIm9hdXRoXCIpO2lmKHRoaXMucmVxdWVzdGVkVmVyaWZpZXIpe0tlKGksXCJkYXRhXCIsbik7Y29uc3QgdD1RZSgpO3RoaXMuX2hhbmRsZVdpbmRvdyh0KSxpLndyaXRlKHtuYW1lOlwib2F1dGhcIixkYXRhOntjYWxsZWRGcm9tRW1iZWQ6ZSx2ZXJpZmllcjp0aGlzLnJlcXVlc3RlZFZlcmlmaWVyLHByZW9wZW5JbnN0YW5jZUlkOnQsbG9naW5faGludDp0aGlzLmxvZ2luSGludH19KX1lbHNlIHRoaXMuX2Rpc3BsYXlJZnJhbWUoITApLEtlKGksXCJkYXRhXCIsbiksaS53cml0ZSh7bmFtZTpcIm9hdXRoX21vZGFsXCIsZGF0YTp7Y2FsbGVkRnJvbUVtYmVkOmV9fSl9X2NyZWF0ZVBvcHVwQmxvY2tBbGVydChlLHQpe2NvbnN0IHI9dGhpcy5fZ2V0TG9nb1VybCgpLG49emUoJzxkaXYgaWQ9XCJ0b3J1c0FsZXJ0XCIgY2xhc3M9XCJ0b3J1cy1hbGVydC0tdjJcIj4nKyc8ZGl2IGlkPVwidG9ydXNBbGVydF9fbG9nb1wiPjxpbWcgc3JjPVwiJy5jb25jYXQociwnXCIgLz48L2Rpdj4nKStcIjxkaXY+XCIrJzxoMSBpZD1cInRvcnVzQWxlcnRfX3RpdGxlXCI+Jy5jb25jYXQodGhpcy5lbWJlZFRyYW5zbGF0aW9ucy5hY3Rpb25SZXF1aXJlZCxcIjwvaDE+XCIpKyc8cCBpZD1cInRvcnVzQWxlcnRfX2Rlc2NcIj4nLmNvbmNhdCh0aGlzLmVtYmVkVHJhbnNsYXRpb25zLnBlbmRpbmdBY3Rpb24sXCI8L3A+XCIpK1wiPC9kaXY+PC9kaXY+XCIpLGk9emUoJzxkaXY+PGEgaWQ9XCJ0b3J1c0FsZXJ0X19idG5cIj4nLmNvbmNhdCh0aGlzLmVtYmVkVHJhbnNsYXRpb25zLmNvbnRpbnVlLFwiPC9hPjwvZGl2PlwiKSksbz16ZSgnPGRpdiBpZD1cInRvcnVzQWxlcnRfX2J0bi1jb250YWluZXJcIj48L2Rpdj4nKTtvLmFwcGVuZENoaWxkKGkpLG4uYXBwZW5kQ2hpbGQobyksdGhpcy5fc2V0RW1iZWRXaGl0ZUxhYmVsKG4pLEhlKCgoKT0+e3RoaXMudG9ydXNBbGVydENvbnRhaW5lci5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0aGlzLnRvcnVzQWxlcnRDb250YWluZXIuYXBwZW5kQ2hpbGQobil9KSksSGUoKCgpPT57aS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKCk9Pnt0aGlzLl9oYW5kbGVXaW5kb3coZSx7dXJsOnQsdGFyZ2V0OlwiX2JsYW5rXCIsZmVhdHVyZXM6b3R9KSxuLnJlbW92ZSgpLDA9PT10aGlzLnRvcnVzQWxlcnRDb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoJiYodGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpfSkpfSkpfX19KSgpLG4uZGVmYXVsdH0pKCkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvcnVzLnVtZC5taW4uanMubWFwIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJhZG9wdCIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsInRoaXMiLCJuIiwidiIsIm9wIiwiVHlwZUVycm9yIiwiY2FsbCIsInBvcCIsImxlbmd0aCIsInB1c2giLCJnZXRUb3J1c1Byb3ZpZGVySW5zdGFuY2UiLCJfYSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZWxmIiwiciIsImQiLCJSUSIsIlciLCJfUiIsInAiLCJpIiwibyIsInMiLCJZZCIsImEiLCJjIiwiY2FsbGRhdGEiLCJtZW1vcnkiLCJzdG9yYWdlIiwidSIsImluZGV4T2YiLCJ0aHJvd0FyZ3VtZW50RXJyb3IiLCJ6RyIsImgiLCJPYmplY3QiLCJmcmVlemUiLCJzaWdoYXNoIiwibWluaW1hbCIsImZ1bGwiLCJqc29uIiwibCIsIlJlZ0V4cCIsImNvbnN0cnVjdG9yIiwidGhyb3dFcnJvciIsImVycm9ycyIsIlVOU1VQUE9SVEVEX09QRVJBVElPTiIsIm9wZXJhdGlvbiIsInR5cGUiLCJtYXRjaCIsImFycmF5TGVuZ3RoIiwicGFyc2VJbnQiLCJhcnJheUNoaWxkcmVuIiwiZnJvbU9iamVjdCIsImNvbXBvbmVudHMiLCJiYXNlVHlwZSIsIl9pc1BhcmFtVHlwZSIsImZvcm1hdCIsIm5hbWUiLCJpbmRleGVkIiwibWFwIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiU3RyaW5nIiwiam9pbiIsInN0YXRpYyIsImZyb21TdHJpbmciLCJpc1BhcmFtVHlwZSIsImIiLCJwYXJlbnQiLCJzdGF0ZSIsImFsbG93VHlwZSIsInJlcGxhY2UiLCJhbGxvd1BhcmFtcyIsImFsbG93TmFtZSIsImFsbG93QXJyYXkiLCJyZWFkQXJyYXkiLCJzdWJzdHJpbmciLCJtIiwibG9jYWxOYW1lIiwiZHluYW1pYyIsIl90aHJvd0Vycm9yIiwidyIsIl9kYXRhIiwiX2RhdGFMZW5ndGgiLCJfcGFkZGluZyIsIlVpbnQ4QXJyYXkiLCJkYXRhIiwieHMiLCJfd3JpdGVEYXRhIiwiYXBwZW5kV3JpdGVyIiwiem8iLCJ3cml0ZUJ5dGVzIiwibEUiLCJ3b3JkU2l6ZSIsInNsaWNlIiwiX2dldFZhbHVlIiwiTyQiLCJmcm9tIiwiQlVGRkVSX09WRVJSVU4iLCJvZmZzZXQiLCJ3cml0ZVZhbHVlIiwid3JpdGVVcGRhdGFibGVWYWx1ZSIsIl9vZmZzZXQiLCJEdiIsImNvbnN1bWVkIiwidG9OdW1iZXIiLCJjb2VyY2UiLCJfY29lcmNlRnVuYyIsIl9wZWVrQnl0ZXMiLCJNYXRoIiwiY2VpbCIsImFsbG93TG9vc2UiLCJzdWJSZWFkZXIiLCJyZWFkQnl0ZXMiLCJyZWFkVmFsdWUiLCJTIiwiRSIsInN1cGVyIiwiZGVmYXVsdFZhbHVlIiwiZW5jb2RlIiwiS24iLCJtZXNzYWdlIiwiZGVjb2RlIiwiJG0iLCJ0b0hleFN0cmluZyIsIkEiLCJjb2RlciIsIngiLCJrIiwiQXJyYXkiLCJpc0FycmF5IiwiSU5WQUxJRF9BUkdVTUVOVCIsImFyZ3VtZW50IiwiZm9yRWFjaCIsImNvZGUiLCJyZWR1Y2UiLCJFcnJvciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIk8iLCJjaGVja0FyZ3VtZW50Q291bnQiLCJjb3VudCIsIk0iLCJpc1plcm8iLCJJIiwiVCIsIlIiLCJzaXplIiwiTiIsIkMiLCJqIiwic2lnbmVkIiwiQnoiLCJtYXNrIiwiZ3QiLCJsdCIsImFkZCIsImZoIiwibXVsIiwidEwiLCJfWSIsInRvVHdvcyIsImZyb21Ud29zIiwiQiIsIkwiLCJEIiwiVSIsIkJBRF9QUkVGSVgiLCJVTkVYUEVDVEVEX0NPTlRJTlVFIiwiT1ZFUlJVTiIsImN1cnJlbnQiLCJORkMiLCJORkQiLCJORktDIiwiTkZLRCIsIk1JU1NJTkdfQ09OVElOVUUiLCJPVVRfT0ZfUkFOR0UiLCJVVEYxNl9TVVJST0dBVEUiLCJPVkVSTE9ORyIsInEiLCJlcnJvciIsImlnbm9yZSIsIkgiLCJjaGVja05vcm1hbGl6ZSIsIm5vcm1hbGl6ZSIsImNoYXJDb2RlQXQiLCJmcm9tQ2hhckNvZGUiLCJGIiwieiIsImNvZGVycyIsIksiLCJWIiwiRyIsIl9nZXRDb2RlciIsIl9nZXRXb3JkU2l6ZSIsIl9nZXRSZWFkZXIiLCJjb2VyY2VGdW5jIiwiX2dldFdyaXRlciIsImdldERlZmF1bHRWYWx1ZSIsInR5cGVzIiwidmFsdWVzIiwiQTciLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwidG9VcHBlckNhc2UiLCJmbG9vciIsImxvZzEwIiwibG9nIiwiTE4xMCIsImckIiwiQk4iLCJfaGV4IiwiX2lzQmlnTnVtYmVyIiwiYWJzIiwic3ViIiwiZGl2IiwibW9kIiwiaXNOZWciLCJ1bW9kIiwicG93IiwiYW5kIiwiaXNOZWdhdGl2ZSIsIm9yIiwieG9yIiwibWFza24iLCJzaGwiLCJzaGxuIiwic2hyIiwic2hybiIsImVxIiwibHRlIiwiZ3RlIiwidG9TdHJpbmciLCJ0b0JpZ0ludCIsIkJpZ0ludCIsImFyZ3VtZW50cyIsIndhcm4iLCJVTkVYUEVDVEVEX0FSR1VNRU5UIiwidG9KU09OIiwiaGV4IiwiX3QiLCJmYXVsdCIsIk5VTUVSSUNfRkFVTFQiLCJFMSIsInAzIiwiWnEiLCJHMSIsInByb3RvdHlwZSIsImNoZWNrU2FmZVVpbnQ1MyIsInVuc2hpZnQiLCJhbGxvd01pc3NpbmdQcmVmaXgiLCJoZXhQYWQiLCJzZXQiLCJfdnMiLCJyZWNvdmVyeVBhcmFtIiwieVBhcml0eUFuZFMiLCJjb21wYWN0Iiwia2VjY2FrXzI1NiIsImRlYnVnIiwiZGVmYXVsdCIsImluZm8iLCJ3YXJuaW5nIiwib2ZmIiwiREVCVUciLCJJTkZPIiwiV0FSTklORyIsIkVSUk9SIiwiT0ZGIiwiVU5LTk9XTl9FUlJPUiIsIk5PVF9JTVBMRU1FTlRFRCIsIk5FVFdPUktfRVJST1IiLCJTRVJWRVJfRVJST1IiLCJUSU1FT1VUIiwiTUlTU0lOR19ORVciLCJNSVNTSU5HX0FSR1VNRU5UIiwiQ0FMTF9FWENFUFRJT04iLCJJTlNVRkZJQ0lFTlRfRlVORFMiLCJOT05DRV9FWFBJUkVEIiwiUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQiLCJVTlBSRURJQ1RBQkxFX0dBU19MSU1JVCIsIlRSQU5TQUNUSU9OX1JFUExBQ0VEIiwid3JpdGFibGUiLCJfbG9nIiwiY29uc29sZSIsImxldmVscyIsIm1ha2VFcnJvciIsImtleXMiLCJ2ZXJzaW9uIiwicmVhc29uIiwiYXNzZXJ0IiwiYXNzZXJ0QXJndW1lbnQiLCJmb3JtIiwiZXhwZWN0ZWRDb3VudCIsImNoZWNrTmV3IiwiY2hlY2tBYnN0cmFjdCIsImdsb2JhbExvZ2dlciIsInVqIiwiVHJhbnNhY3Rpb25UeXBlcyIsInVlIiwiYWNjZXNzTGlzdGlmeSIsInZlIiwiY29tcHV0ZUFkZHJlc3MiLCJiZSIsInhlIiwicmVjb3ZlckFkZHJlc3MiLCJ5ZSIsInNlcmlhbGl6ZSIsIkVlIiwiY29uY2F0IiwicGF0aCIsInJlcXVpcmUiLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZXF1YWwiLCJ0b0FycmF5IiwiemVybzIiLCJ0b0hleCIsImdldE5BRiIsIm1heCIsImJpdExlbmd0aCIsImZpbGwiLCJjbG9uZSIsImFuZGxuIiwiaXNPZGQiLCJpc3VibiIsIml1c2hybiIsImdldEpTRiIsImNtcG4iLCJjYWNoZWRQcm9wZXJ0eSIsInBhcnNlQnl0ZXMiLCJpbnRGcm9tTEUiLCJyZWQiLCJwcmltZSIsIm1vbnQiLCJ6ZXJvIiwidG9SZWQiLCJvbmUiLCJ0d28iLCJwb2ludEZyb21KU09OIiwiZ1JlZCIsIl93bmFmVDEiLCJfd25hZlQyIiwiX3duYWZUMyIsIl93bmFmVDQiLCJfYml0TGVuZ3RoIiwicmVkTiIsIl9tYXh3ZWxsVHJpY2siLCJjdXJ2ZSIsInByZWNvbXB1dGVkIiwicG9pbnQiLCJ2YWxpZGF0ZSIsIl9maXhlZE5hZk11bCIsIl9nZXREb3VibGVzIiwianBvaW50IiwibWl4ZWRBZGQiLCJwb2ludHMiLCJuZWciLCJ0b1AiLCJfd25hZk11bCIsIl9nZXROQUZQb2ludHMiLCJ3bmQiLCJkYmxwIiwiX3duYWZNdWxBZGQiLCJjbXAiLCJ0b0oiLCJyZWROZWciLCJCYXNlUG9pbnQiLCJkZWNvZGVQb2ludCIsImJ5dGVMZW5ndGgiLCJwb2ludEZyb21YIiwiZW5jb2RlQ29tcHJlc3NlZCIsIl9lbmNvZGUiLCJnZXRYIiwiZ2V0WSIsImlzRXZlbiIsInByZWNvbXB1dGUiLCJkb3VibGVzIiwibmFmIiwiYmV0YSIsIl9nZXRCZXRhIiwiX2hhc0RvdWJsZXMiLCJkYmwiLCJjcmVhdGUiLCJzdXBlcl8iLCJjb25maWd1cmFibGUiLCJ0aW52IiwicmVkSW52bSIsInplcm9BIiwiZnJvbVJlZCIsInRocmVlQSIsImVuZG8iLCJfZ2V0RW5kb21vcnBoaXNtIiwiX2VuZG9XbmFmVDEiLCJfZW5kb1duYWZUMiIsImluZiIsImZvcmNlUmVkIiwiek9uZSIsIm1vZG4iLCJfZ2V0RW5kb1Jvb3RzIiwibGFtYmRhIiwicmVkTXVsIiwiYmFzaXMiLCJfZ2V0RW5kb0Jhc2lzIiwicmVkU3FydCIsInJlZEFkZCIsInJlZFN1YiIsInVzaHJuIiwic3FyIiwibmVnYXRpdmUiLCJfZW5kb1NwbGl0IiwiZGl2Um91bmQiLCJrMSIsImsyIiwicmVkU3FyIiwicmVkSUFkZCIsInJlZElTdWIiLCJfZW5kb1duYWZNdWxBZGQiLCJpbmVnIiwiZnJvbUpTT04iLCJpbnNwZWN0IiwiaXNJbmZpbml0eSIsIm11bEFkZCIsImptdWxBZGQiLCJfemVyb0RibCIsIl90aHJlZURibCIsIl9kYmwiLCJ0cnBsIiwiZXFYVG9QIiwiaWFkZCIsImJhc2UiLCJzaG9ydCIsImVkd2FyZHMiLCJoYXNoIiwiUHJlc2V0Q3VydmUiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJjcmFzaCIsInByZWRSZXNpc3QiLCJvdXRMZW4iLCJvdXRTaXplIiwibWluRW50cm9weSIsImhtYWNTdHJlbmd0aCIsIl9yZXNlZWQiLCJyZXNlZWRJbnRlcnZhbCIsImVudHJvcHkiLCJlbnRyb3B5RW5jIiwibm9uY2UiLCJub25jZUVuYyIsInBlcnMiLCJwZXJzRW5jIiwiX2luaXQiLCJfdXBkYXRlIiwiX2htYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJyZXNlZWQiLCJnZW5lcmF0ZSIsImVjIiwicHJpdiIsInB1YiIsIl9pbXBvcnRQcml2YXRlIiwicHJpdkVuYyIsIl9pbXBvcnRQdWJsaWMiLCJwdWJFbmMiLCJmcm9tUHVibGljIiwiZnJvbVByaXZhdGUiLCJnZXRQdWJsaWMiLCJnZXRQcml2YXRlIiwiZGVyaXZlIiwic2lnbiIsInZlcmlmeSIsIl9pbXBvcnRERVIiLCJYIiwiWSIsInBsYWNlIiwiSiIsIiQiLCJaIiwiTE4yIiwidG9ERVIiLCJRIiwiZWUiLCJ0ZSIsImhhc093blByb3BlcnR5IiwibmgiLCJyZSIsImtleVBhaXIiLCJrZXlGcm9tUHJpdmF0ZSIsImtleUZyb21QdWJsaWMiLCJnZW5LZXlQYWlyIiwiaWFkZG4iLCJfdHJ1bmNhdGVUb04iLCJpbnZtIiwiY2Fub25pY2FsIiwicmVjb3ZlclB1YktleSIsImdldEtleVJlY292ZXJ5UGFyYW0iLCJuZSIsInV0aWxzIiwicmFuZCIsImN1cnZlcyIsImVkZHNhIiwiaWUiLCJvZSIsInNlIiwiYWUiLCJwcml2YXRlS2V5IiwiX2FkZFBvaW50IiwicHVibGljS2V5Iiwic2lnbkRpZ2VzdCIsImNvbXB1dGVTaGFyZWRTZWNyZXQiLCJjZSIsIl9pc1NpZ25pbmdLZXkiLCJmZSIsImRlIiwiaGUiLCJsZWdhY3kiLCJlaXAyOTMwIiwiZWlwMTU1OSIsImxlIiwibWF4TGVuZ3RoIiwibnVtZXJpYyIsInBlIiwiY2hhaW5JZCIsImdhc0xpbWl0IiwiZ2FzUHJpY2UiLCJ0byIsImdlIiwibWUiLCJhZGRyZXNzIiwic3RvcmFnZUtleXMiLCJzb3J0IiwibG9jYWxlQ29tcGFyZSIsIndlIiwiX2UiLCJtYXhGZWVQZXJHYXMiLCJtYXhQcmlvcml0eUZlZVBlckdhcyIsImFjY2Vzc0xpc3QiLCJTZSIsInRyYW5zYWN0aW9uVHlwZSIsIkFlIiwiQ29tcG9zZWRTdG9yZSIsIk9ic2VydmFibGVTdG9yZSIsIl9jaGlsZHJlbiIsIl9hZGRDaGlsZCIsImdldFN0YXRlIiwicHV0U3RhdGUiLCJzdWJzY3JpYmUiLCJNZXJnZWRTdG9yZSIsIl91cGRhdGVXaG9sZVN0YXRlIiwiYXNzaWduIiwiX19pbXBvcnREZWZhdWx0IiwiX19lc01vZHVsZSIsIl9zdGF0ZSIsIl9nZXRTdGF0ZSIsIl9wdXRTdGF0ZSIsImVtaXQiLCJ1cGRhdGVTdGF0ZSIsIm9uIiwidW5zdWJzY3JpYmUiLCJyZW1vdmVMaXN0ZW5lciIsInN0b3JlQXNTdHJlYW0iLCJEdXBsZXgiLCJvYmplY3RNb2RlIiwicmVzdW1lIiwiaGFuZGxlciIsIm9ic1N0b3JlIiwicGlwZSIsIndyaXRlIiwiX3dyaXRlIiwiX3JlYWQiLCJfZGVzdHJveSIsIl9fY3JlYXRlQmluZGluZyIsIl9fZXhwb3J0U3RhciIsInN0b3JlVHJhbnNmb3JtU3RyZWFtIiwib2JqIiwiUmVmbGVjdCIsInNldFRpbWVvdXQiLCJFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwiY29udGV4dCIsIkJ1ZmZlciIsImNyeXB0byIsIm1zQ3J5cHRvIiwic3VidGxlIiwid2Via2l0U3VidGxlIiwiYWxsb2MiLCJpc0J1ZmZlciIsImNvbXBhcmUiLCJnZXRSYW5kb21WYWx1ZXMiLCJyYW5kb21CeXRlcyIsImltcG9ydEtleSIsIml2IiwiY3JlYXRlQ2lwaGVyaXYiLCJmaW5hbCIsImNyZWF0ZURlY2lwaGVyaXYiLCJvcSIsInJjIiwiZXBoZW1QdWJsaWNLZXkiLCJjcmVhdGVIYXNoIiwiY2lwaGVydGV4dCIsIm1hYyIsImNyZWF0ZUhtYWMiLCJiaWdudW0iLCJkZWZpbmUiLCJjb25zdGFudHMiLCJkZWNvZGVycyIsImVuY29kZXJzIiwiX2NyZWF0ZU5hbWVkIiwiX2luaXROYW1lZCIsIl9nZXREZWNvZGVyIiwiX2dldEVuY29kZXIiLCJpc0VuY29kZXJCdWZmZXIiLCJpc0RlY29kZXJCdWZmZXIiLCJzYXZlIiwicmVzdG9yZSIsImlzRW1wdHkiLCJyZWFkVUludDgiLCJza2lwIiwicmF3IiwicmVwb3J0ZXIiLCJfcmVwb3J0ZXJTdGF0ZSIsImNvcHkiLCJSZXBvcnRlciIsIkRlY29kZXJCdWZmZXIiLCJFbmNvZGVyQnVmZmVyIiwiTm9kZSIsIl9iYXNlU3RhdGUiLCJlbmMiLCJjaGlsZHJlbiIsInRhZyIsImFyZ3MiLCJyZXZlcnNlQXJncyIsImNob2ljZSIsIm9wdGlvbmFsIiwiYW55IiwidXNlIiwidXNlRGVjb2RlciIsImtleSIsImV4cGxpY2l0IiwiaW1wbGljaXQiLCJjb250YWlucyIsIl93cmFwIiwiZmlsdGVyIiwiX3VzZUFyZ3MiLCJkZWYiLCJfZGVjb2RlIiwid3JhcFJlc3VsdCIsImVudGVyS2V5IiwiX3BlZWtUYWciLCJpc0Vycm9yIiwiX2RlY29kZUdlbmVyaWMiLCJfZGVjb2RlQ2hvaWNlIiwiZW50ZXJPYmplY3QiLCJfZGVjb2RlVGFnIiwidHJhY2siLCJfZ2V0VXNlIiwibGVhdmVPYmplY3QiLCJleGl0S2V5IiwibGVhdmVLZXkiLCJfZGVjb2RlTGlzdCIsInRlc3QiLCJfZGVjb2RlU3RyIiwiX2RlY29kZU9iamlkIiwiX2RlY29kZVRpbWUiLCJfZGVjb2RlTnVsbCIsIl9kZWNvZGVCb29sIiwiX2RlY29kZUludCIsIl91c2UiLCJzb21lIiwiX2NyZWF0ZUVuY29kZXJCdWZmZXIiLCJfZW5jb2RlVmFsdWUiLCJfc2tpcERlZmF1bHQiLCJfZW5jb2RlQ2hvaWNlIiwiX2VuY29kZVByaW1pdGl2ZSIsIl9lbmNvZGVDb21wb3NpdGUiLCJfZW5jb2RlU3RyIiwiX2VuY29kZU9iamlkIiwiX2VuY29kZVRpbWUiLCJfZW5jb2RlTnVsbCIsIl9lbmNvZGVJbnQiLCJfZW5jb2RlQm9vbCIsIl9pc051bXN0ciIsIl9pc1ByaW50c3RyIiwib3B0aW9ucyIsInJldGhyb3ciLCJwYXRoTGVuIiwic3RhY2siLCJwYXJ0aWFsIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0YWdDbGFzcyIsInRhZ0NsYXNzQnlOYW1lIiwidGFnQnlOYW1lIiwiX3JldmVyc2UiLCJkZXIiLCJlbnRpdHkiLCJ0cmVlIiwiY2xzIiwicHJpbWl0aXZlIiwidGFnU3RyIiwiX3NraXBVbnRpbEVuZCIsInVudXNlZCIsInJlYWRVSW50MTZCRSIsIkRhdGUiLCJVVEMiLCJwZW0iLCJ3cml0ZVVJbnQxNkJFIiwic3BsaWNlIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZGVmYXVsdEJ1ZmZlciIsImNvZGVzIiwiRVJSX0FNQklHVU9VU19BUkdVTUVOVCIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiRVJSX0lOVkFMSURfQVJHX1ZBTFVFIiwiRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFIiwiRVJSX01JU1NJTkdfQVJHUyIsImlzUHJvbWlzZSIsImlzUmVnRXhwIiwiaXMiLCJpc0RlZXBFcXVhbCIsImlzRGVlcFN0cmljdEVxdWFsIiwiTWFwIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJvcGVyYXRvciIsInN0YWNrU3RhcnRGbiIsImdlbmVyYXRlZE1lc3NhZ2UiLCJmYWlsIiwiZW1pdFdhcm5pbmciLCJiaW5kIiwiQXNzZXJ0aW9uRXJyb3IiLCJvayIsIm5vdEVxdWFsIiwiZGVlcEVxdWFsIiwibm90RGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcFN0cmljdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsImlzUHJvdG90eXBlT2YiLCJjYXRjaCIsInRocm93cyIsInJlamVjdHMiLCJkb2VzTm90VGhyb3ciLCJkb2VzTm90UmVqZWN0IiwiaWZFcnJvciIsInNoaWZ0Iiwic3RyaWN0IiwiUmVmZXJlbmNlRXJyb3IiLCJGdW5jdGlvbiIsImhhcyIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJzdHJpY3RFcXVhbE9iamVjdCIsIm5vdFN0cmljdEVxdWFsT2JqZWN0Iiwibm90SWRlbnRpY2FsIiwiY3VzdG9tSW5zcGVjdCIsImRlcHRoIiwibWF4QXJyYXlMZW5ndGgiLCJzaG93SGlkZGVuIiwiYnJlYWtMZW5ndGgiLCJzaG93UHJveHkiLCJzb3J0ZWQiLCJnZXR0ZXJzIiwic3RhY2tUcmFjZUxpbWl0Iiwic3RkZXJyIiwiaXNUVFkiLCJnZXRDb2xvckRlcHRoIiwiY29sdW1ucyIsImN1c3RvbSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInN1YnN0ciIsIlJhbmdlRXJyb3IiLCJyZXR1cm4iLCJmbGFncyIsIk51bWJlciIsImlzTmFOIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpc0FueUFycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc0RhdGUiLCJpc01hcCIsImlzU2V0IiwiaXNOYXRpdmVFcnJvciIsImlzQm94ZWRQcmltaXRpdmUiLCJpc051bWJlck9iamVjdCIsImlzU3RyaW5nT2JqZWN0IiwiaXNCb29sZWFuT2JqZWN0IiwiaXNCaWdJbnRPYmplY3QiLCJpc1N5bWJvbE9iamVjdCIsImlzRmxvYXQzMkFycmF5IiwiaXNGbG9hdDY0QXJyYXkiLCJtaW4iLCJnZXRUaW1lIiwic291cmNlIiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsInZhbHVlT2YiLCJCb29sZWFuIiwidmFsMSIsInZhbDIiLCJwb3NpdGlvbiIsImRlbGV0ZSIsIlNldCIsInRvQnl0ZUFycmF5IiwiZnJvbUJ5dGVBcnJheSIsInRvQmFzZTY0IiwiZnJvbUJhc2U2NCIsInRvQnVmZmVyIiwiaXNCTiIsIndvcmRzIiwiX2luaXROdW1iZXIiLCJfaW5pdEFycmF5IiwiX3BhcnNlSGV4IiwiX3BhcnNlQmFzZSIsIl9zdHJpcCIsImltdWxuIiwiX2lhZGRuIiwiX21vdmUiLCJfZXhwYW5kIiwiX25vcm1TaWduIiwiZm9yIiwibW9kcm4iLCJpZGl2biIsInRvQXJyYXlMaWtlIiwiYWxsb2NVbnNhZmUiLCJfdG9BcnJheUxpa2VMRSIsIl90b0FycmF5TGlrZUJFIiwiY2x6MzIiLCJfY291bnRCaXRzIiwiX3plcm9CaXRzIiwiemVyb0JpdHMiLCJpbm90biIsInRlc3RuIiwibm90biIsIml1b3IiLCJpb3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwidXhvciIsInNldG4iLCJpc3ViIiwiaW11bCIsImtlIiwiUGUiLCJPZSIsIk1lIiwiSWUiLCJUZSIsIlJlIiwiTmUiLCJDZSIsIm11bFRvIiwibWFrZVJCVCIsInJldkJpbiIsInBlcm11dGUiLCJ0cmFuc2Zvcm0iLCJjb3MiLCJQSSIsInNpbiIsImd1ZXNzTGVuMTNiIiwiY29uanVnYXRlIiwibm9ybWFsaXplMTNiIiwicm91bmQiLCJjb252ZXJ0MTNiIiwic3R1YiIsIm11bHAiLCJtdWxmIiwibXVsbiIsImlzcXIiLCJpdXNobG4iLCJpc2hsbiIsImlzaHJuIiwidXNobG4iLCJpbWFza24iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJfd29yZERpdiIsImRpdm1vZCIsImRpdm4iLCJlZ2NkIiwiZ2NkIiwiX2ludm1wIiwiYmluY24iLCJ1Y21wIiwiZ3RuIiwiZ3RlbiIsImx0biIsImx0ZW4iLCJlcW4iLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJjb252ZXJ0RnJvbSIsInJlZFNobCIsIl92ZXJpZnkyIiwicmVkSU11bCIsIl92ZXJpZnkxIiwicmVkSVNxciIsInNxcnQiLCJyZWRQb3ciLCJrMjU2IiwicDIyNCIsInAxOTIiLCJwMjU1MTkiLCJ0bXAiLCJfdG1wIiwiX3ByaW1lIiwicjIiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwiaW11bEsiLCJzdHJpcCIsIm5tZCIsIlJhbmQiLCJfcmFuZCIsImdldEJ5dGVzIiwiZ2V0Qnl0ZSIsInJlYWRVSW50MzJCRSIsIlNCT1giLCJJTlZfU0JPWCIsIlNVQl9NSVgiLCJJTlZfU1VCX01JWCIsIl9rZXkiLCJfcmVzZXQiLCJibG9ja1NpemUiLCJrZXlTaXplIiwiX25Sb3VuZHMiLCJfa2V5U2NoZWR1bGUiLCJfaW52S2V5U2NoZWR1bGUiLCJlbmNyeXB0QmxvY2tSYXciLCJlbmNyeXB0QmxvY2siLCJ3cml0ZVVJbnQzMkJFIiwiZGVjcnlwdEJsb2NrIiwic2NydWIiLCJBRVMiLCJfY2lwaGVyIiwiX2doYXNoIiwiX2ZpbklEIiwid3JpdGVVSW50QkUiLCJfcHJldiIsIl9jYWNoZSIsIl9zZWNDYWNoZSIsIl9kZWNyeXB0IiwiX2FsZW4iLCJfbGVuIiwiX21vZGUiLCJfYXV0aFRhZyIsIl9jYWxsZWQiLCJlbmNyeXB0IiwiX2ZpbmFsIiwiZ2V0QXV0aFRhZyIsInNldEF1dGhUYWciLCJzZXRBQUQiLCJjcmVhdGVDaXBoZXIiLCJDaXBoZXIiLCJDaXBoZXJpdiIsImNyZWF0ZURlY2lwaGVyIiwiRGVjaXBoZXIiLCJEZWNpcGhlcml2IiwibGlzdENpcGhlcnMiLCJnZXRDaXBoZXJzIiwiX2xhc3QiLCJfYXV0b3BhZGRpbmciLCJjYWNoZSIsIm1vZGUiLCJkZWNyeXB0IiwiZmx1c2giLCJzZXRBdXRvUGFkZGluZyIsImVxdWFscyIsIndyaXRlVUludDgiLCJnaGFzaCIsIl9tdWx0aXBseSIsIkVDQiIsIkNCQyIsIkNGQiIsIkNGQjgiLCJDRkIxIiwiT0ZCIiwiQ1RSIiwiR0NNIiwiaW5zdGFudGlhdGUiLCJFREUiLCJERVMiLCJfZGVzIiwiZGVzIiwiZGVzMyIsIm1vZHVsdXMiLCJwcmltZTEiLCJwcmltZTIiLCJibGluZGVyIiwicHVibGljRXhwb25lbnQiLCJ1bmJsaW5kZXIiLCJjb2VmZmljaWVudCIsImV4cG9uZW50MSIsImV4cG9uZW50MiIsImdldHIiLCJXcml0YWJsZSIsIl9oYXNoVHlwZSIsIl9oYXNoIiwiX3RhZyIsImlkIiwiX3NpZ25UeXBlIiwiZW5kIiwiU2lnbiIsIlZlcmlmeSIsImNyZWF0ZVNpZ24iLCJjcmVhdGVWZXJpZnkiLCJwYXJhbXMiLCJwcml2X2tleSIsImdldEtleSIsIm1ha2VLZXkiLCJhbGdvcml0aG0iLCJzdWJqZWN0UHJpdmF0ZUtleSIsInB1Yl9rZXkiLCJzaWduYXR1cmUiLCJTbG93QnVmZmVyIiwiSU5TUEVDVF9NQVhfQllURVMiLCJpc0VuY29kaW5nIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJTaGFyZWRBcnJheUJ1ZmZlciIsInRvUHJpbWl0aXZlIiwibGFzdEluZGV4T2YiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImZvbyIsInBvb2xTaXplIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidG9Mb2NhbGVTdHJpbmciLCJ0cmltIiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsIl9hcnIiLCJzdWJhcnJheSIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwicmVhZFVpbnRCRSIsInJlYWRVSW50QkUiLCJyZWFkVWludDgiLCJyZWFkVWludDE2TEUiLCJyZWFkVUludDE2TEUiLCJyZWFkVWludDE2QkUiLCJyZWFkVWludDMyTEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVWludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVpbnRMRSIsIndyaXRlVUludExFIiwid3JpdGVVaW50QkUiLCJ3cml0ZVVpbnQ4Iiwid3JpdGVVaW50MTZMRSIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVpbnQxNkJFIiwid3JpdGVVaW50MzJMRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVpbnQzMkJFIiwid3JpdGVJbnRMRSIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsImNvcHlXaXRoaW4iLCJUcmFuc2Zvcm0iLCJoYXNoTW9kZSIsIl9maW5hbE9yRGlnZXN0IiwiX19maW5hbCIsIl9kZWNvZGVyIiwiX2VuY29kaW5nIiwiX3RvU3RyaW5nIiwiX3RyYW5zZm9ybSIsIl9mbHVzaCIsImRvbWFpbiIsInNlY3VyZSIsInNjcmlwdCIsImV4cGlyYXRpb25fZGF0ZSIsImV4cGxpY2l0X3BhdGgiLCJleHBsaWNpdF9kb21haW4iLCJub3NjcmlwdCIsIkFsbCIsIkNvb2tpZUFjY2Vzc0luZm8iLCJDb29raWUiLCJ0b0dNVFN0cmluZyIsInRvVmFsdWVTdHJpbmciLCJzZXRDb29raWUiLCJub3ciLCJjb2xsaWRlc1dpdGgiLCJnZXRDb29raWUiLCJtYXRjaGVzIiwiZ2V0Q29va2llcyIsIkNvb2tpZUphciIsInNldENvb2tpZXMiLCJpc0Jvb2xlYW4iLCJpc051bGwiLCJpc051bGxPclVuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJpc1N5bWJvbCIsImlzVW5kZWZpbmVkIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiaXNQcmltaXRpdmUiLCJzZWNwMjU2azEiLCJzZWNwMjI0cjEiLCJwcmltZTI1NnYxIiwicHJpbWUxOTJ2MSIsImVkMjU1MTkiLCJzZWNwMzg0cjEiLCJzZWNwNTIxcjEiLCJjdXJ2ZVR5cGUiLCJwMjU2Iiwic2VjcDI1NnIxIiwic2VjcDE5MnIxIiwicDM4NCIsInA1MjEiLCJnZW5lcmF0ZUtleXMiLCJnZXRQdWJsaWNLZXkiLCJjb21wdXRlU2VjcmV0IiwiZ2V0UHJpdmF0ZUtleSIsInNldFB1YmxpY0tleSIsInNldFByaXZhdGVLZXkiLCJfYWxnIiwiX2lwYWQiLCJfb3BhZCIsInJuZyIsInBzZXVkb1JhbmRvbUJ5dGVzIiwicHJuZyIsIkhhc2giLCJIbWFjIiwiZ2V0SGFzaGVzIiwicGJrZGYyIiwicGJrZGYyU3luYyIsIkRpZmZpZUhlbGxtYW5Hcm91cCIsImNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCIsImdldERpZmZpZUhlbGxtYW4iLCJjcmVhdGVEaWZmaWVIZWxsbWFuIiwiRGlmZmllSGVsbG1hbiIsImNyZWF0ZUVDREgiLCJwdWJsaWNFbmNyeXB0IiwicHJpdmF0ZUVuY3J5cHQiLCJwdWJsaWNEZWNyeXB0IiwicHJpdmF0ZURlY3J5cHQiLCJyYW5kb21GaWxsIiwicmFuZG9tRmlsbFN5bmMiLCJjcmVhdGVDcmVkZW50aWFscyIsIkRIX0NIRUNLX1BfTk9UX1NBRkVfUFJJTUUiLCJESF9DSEVDS19QX05PVF9QUklNRSIsIkRIX1VOQUJMRV9UT19DSEVDS19HRU5FUkFUT1IiLCJESF9OT1RfU1VJVEFCTEVfR0VORVJBVE9SIiwiTlBOX0VOQUJMRUQiLCJBTFBOX0VOQUJMRUQiLCJSU0FfUEtDUzFfUEFERElORyIsIlJTQV9TU0xWMjNfUEFERElORyIsIlJTQV9OT19QQURESU5HIiwiUlNBX1BLQ1MxX09BRVBfUEFERElORyIsIlJTQV9YOTMxX1BBRERJTkciLCJSU0FfUEtDUzFfUFNTX1BBRERJTkciLCJQT0lOVF9DT05WRVJTSU9OX0NPTVBSRVNTRUQiLCJQT0lOVF9DT05WRVJTSU9OX1VOQ09NUFJFU1NFRCIsIlBPSU5UX0NPTlZFUlNJT05fSFlCUklEIiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsIl9jYmNJbml0IiwiX2NiY1N0YXRlIiwiYnVmZmVyT2ZmIiwiX3VwZGF0ZURlY3J5cHQiLCJfdXBkYXRlRW5jcnlwdCIsIl9idWZmZXIiLCJfZmx1c2hCdWZmZXIiLCJfZmluYWxFbmNyeXB0IiwiX2ZpbmFsRGVjcnlwdCIsIl9wYWQiLCJfdW5wYWQiLCJfZGVzU3RhdGUiLCJkZXJpdmVLZXlzIiwicGMxIiwicjI4c2hsIiwicGMyIiwiaXAiLCJfZW5jcnlwdCIsImV4cGFuZCIsInN1YnN0aXR1dGUiLCJyaXAiLCJjaXBoZXJzIiwiX2VkZVN0YXRlIiwicGFkU3BsaXQiLCJiaW5hcnkiLCJiYXNlNjQiLCJnZW4iLCJfcHViIiwiX3ByaXYiLCJzZXRHZW5lcmF0b3IiLCJfX3ByaW1lIiwiX3ByaW1lTGVuIiwiX3ByaW1lQ29kZSIsInNpbXBsZVNpZXZlIiwiZmVybWF0VGVzdCIsIl9fZ2VuIiwiX2dlbiIsImdldFByaW1lIiwiZ2V0R2VuZXJhdG9yIiwiaTgiLCJ0d2lzdGVkIiwibU9uZUEiLCJleHRlbmRlZCIsImMyIiwiZGQiLCJvbmVDIiwiX211bEEiLCJfbXVsQyIsInBvaW50RnJvbVkiLCJfZXh0RGJsIiwiX3Byb2pEYmwiLCJfZXh0QWRkIiwiX3Byb2pBZGQiLCJpNCIsImEyNCIsImRpZmZBZGQiLCJqdW1sQWRkIiwicG9pbnRDbGFzcyIsImVuY29kaW5nTGVuZ3RoIiwia2V5RnJvbVNlY3JldCIsImhhc2hJbnQiLCJtZXNzYWdlUHJlZml4IiwiZW5jb2RlUG9pbnQiLCJwdWJCeXRlcyIsIm1ha2VTaWduYXR1cmUiLCJSZW5jb2RlZCIsImZyb21TZWNyZXQiLCJlbmNvZGVJbnQiLCJkZWNvZGVJbnQiLCJpc1BvaW50IiwiX3NlY3JldCIsInNlY3JldCIsIl9wdWJCeXRlcyIsInByaXZCeXRlcyIsImdldFNlY3JldCIsIl9TIiwiX1JlbmNvZGVkIiwiX1NlbmNvZGVkIiwiU2VuY29kZWQiLCJ0b0J5dGVzIiwiX3dyaXRhYmxlU3RhdGUiLCJfcmVhZGFibGVTdGF0ZSIsInJlYWRhYmxlIiwibmV4dFRpY2siLCJlbmRlZCIsImRlc3Ryb3llZCIsInJlcSIsInNldEhlYWRlciIsImFib3J0Iiwic3RkaW8iLCJwb2x5ZmlsbCIsIkV0aGVyZXVtUHJvdmlkZXJFcnJvciIsIkV0aGVyZXVtUnBjRXJyb3IiLCJpc0ludGVnZXIiLCJlcnJvclZhbHVlcyIsImVycm9yQ29kZXMiLCJycGMiLCJpbnZhbGlkSW5wdXQiLCJyZXNvdXJjZU5vdEZvdW5kIiwicmVzb3VyY2VVbmF2YWlsYWJsZSIsInRyYW5zYWN0aW9uUmVqZWN0ZWQiLCJtZXRob2ROb3RTdXBwb3J0ZWQiLCJsaW1pdEV4Y2VlZGVkIiwiaW52YWxpZFJlcXVlc3QiLCJtZXRob2ROb3RGb3VuZCIsImludmFsaWRQYXJhbXMiLCJpbnRlcm5hbCIsInByb3ZpZGVyIiwidXNlclJlamVjdGVkUmVxdWVzdCIsInVuYXV0aG9yaXplZCIsInVuc3VwcG9ydGVkTWV0aG9kIiwiZGlzY29ubmVjdGVkIiwiY2hhaW5EaXNjb25uZWN0ZWQiLCJzdGFuZGFyZCIsImV0aEVycm9ycyIsImdldE1lc3NhZ2VGcm9tQ29kZSIsInNlcnZlciIsIlh5IiwiQ2ciLCJTeSIsInNlcmlhbGl6ZUVycm9yIiwiaXNWYWxpZENvZGUiLCJKU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRSIsImZhbGxiYWNrRXJyb3IiLCJzaG91bGRJbmNsdWRlU3RhY2siLCJvcmlnaW5hbEVycm9yIiwiYnl0ZXNUb0hleCIsImtlY2NhazI1NiIsImlzQmxvb20iLCJpc0luQmxvb20iLCJpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tIiwicGFkTGVmdCIsImlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbSIsImlzVG9waWNJbkJsb29tIiwiaXNUb3BpYyIsImlzQWRkcmVzcyIsImNyZWF0ZUhhc2hGdW5jdGlvbiIsImtlY2NhazIyNCIsImtlY2NhazM4NCIsImtlY2NhazUxMiIsImNvbnRleHRSYW5kb21pemUiLCJwcml2YXRlS2V5VmVyaWZ5IiwicHJpdmF0ZUtleU5lZ2F0ZSIsInByaXZhdGVLZXlUd2Vha0FkZCIsInByaXZhdGVLZXlUd2Vha011bCIsInB1YmxpY0tleVZlcmlmeSIsInB1YmxpY0tleUNyZWF0ZSIsInB1YmxpY0tleUNvbnZlcnQiLCJwdWJsaWNLZXlOZWdhdGUiLCJwdWJsaWNLZXlDb21iaW5lIiwicHVibGljS2V5VHdlYWtBZGQiLCJwdWJsaWNLZXlUd2Vha011bCIsInNpZ25hdHVyZU5vcm1hbGl6ZSIsInNpZ25hdHVyZUV4cG9ydCIsIm91dHB1dCIsIm91dHB1dGxlbiIsInNpZ25hdHVyZUltcG9ydCIsImVjZHNhU2lnbiIsInJlY2lkIiwiZWNkc2FWZXJpZnkiLCJlY2RzYVJlY292ZXIiLCJlY2RoIiwibm9uY2VmbiIsImhhc2hmbiIsInhidWYiLCJ5YnVmIiwiZ2V0UmFuZG9tQnl0ZXMiLCJnZXRSYW5kb21CeXRlc1N5bmMiLCJ0aHJvdyIsImNyZWF0ZVByaXZhdGVLZXkiLCJjcmVhdGVQcml2YXRlS2V5U3luYyIsIl9fcmVhZCIsImlzWmVyb0FkZHJlc3MiLCJ6ZXJvQWRkcmVzcyIsImltcG9ydFB1YmxpYyIsInByaXZhdGVUb0FkZHJlc3MiLCJwcml2YXRlVG9QdWJsaWMiLCJwdWJsaWNUb0FkZHJlc3MiLCJwdWJUb0FkZHJlc3MiLCJpc1ZhbGlkUHVibGljIiwiaXNWYWxpZFByaXZhdGUiLCJnZW5lcmF0ZUFkZHJlc3MyIiwiZ2VuZXJhdGVBZGRyZXNzIiwiaXNWYWxpZENoZWNrc3VtQWRkcmVzcyIsInRvQ2hlY2tzdW1BZGRyZXNzIiwiaXNWYWxpZEFkZHJlc3MiLCJBY2NvdW50IiwiS0VDQ0FLMjU2X1JMUCIsIktFQ0NBSzI1Nl9OVUxMIiwiYmFsYW5jZSIsInN0YXRlUm9vdCIsImNvZGVIYXNoIiwiX3ZhbGlkYXRlIiwiZnJvbUFjY291bnREYXRhIiwiZnJvbVJscFNlcmlhbGl6ZWRBY2NvdW50IiwicmxwIiwiZnJvbVZhbHVlc0FycmF5IiwiYm5Ub1VucGFkZGVkQnVmZmVyIiwiaXNDb250cmFjdCIsImFzc2VydElzU3RyaW5nIiwiYXNzZXJ0SXNIZXhTdHJpbmciLCJzdHJpcEhleFByZWZpeCIsInRvVHlwZSIsIlR5cGVPdXRwdXQiLCJrZWNjYWtGcm9tU3RyaW5nIiwiYXNzZXJ0SXNCdWZmZXIiLCJybHBoYXNoIiwia2VjY2FrIiwiemVyb3MiLCJidWZmZXJUb0hleCIsIkFkZHJlc3MiLCJidWYiLCJmcm9tUHVibGljS2V5IiwiZnJvbVByaXZhdGVLZXkiLCJnZW5lcmF0ZTIiLCJpc1ByZWNvbXBpbGVPclN5c3RlbUFkZHJlc3MiLCJfX3ZhbHVlcyIsImJ1ZkFyclRvQXJyIiwiYXJyVG9CdWZBcnIiLCJ2YWxpZGF0ZU5vTGVhZGluZ1plcm9lcyIsImJhVG9KU09OIiwidG9VdGY4IiwiYWRkSGV4UHJlZml4IiwidG9VbnNpZ25lZCIsImZyb21TaWduZWQiLCJidWZmZXJUb0ludCIsInVucGFkSGV4U3RyaW5nIiwidW5wYWRBcnJheSIsInVucGFkQnVmZmVyIiwic2V0TGVuZ3RoUmlnaHQiLCJzZXRMZW5ndGhMZWZ0IiwiaW50VG9CdWZmZXIiLCJpbnRUb0hleCIsImlzU2FmZUludGVnZXIiLCJwYWRUb0V2ZW4iLCJhc3NlcnRJc0FycmF5IiwiaXNIZXhTdHJpbmciLCJpc0hleFByZWZpeGVkIiwiZW50cmllcyIsIktFQ0NBSzI1Nl9STFBfUyIsIktFQ0NBSzI1Nl9STFBfQVJSQVkiLCJLRUNDQUsyNTZfUkxQX0FSUkFZX1MiLCJLRUNDQUsyNTZfTlVMTF9TIiwiVFdPX1BPVzI1NiIsIk1BWF9JTlRFR0VSIiwiTUFYX1VJTlQ2NCIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsIl9faW1wb3J0U3RhciIsInJpcGVtZDE2MEZyb21BcnJheSIsInJpcGVtZDE2MEZyb21TdHJpbmciLCJyaXBlbWQxNjAiLCJzaGEyNTZGcm9tQXJyYXkiLCJzaGEyNTZGcm9tU3RyaW5nIiwia2VjY2FrRnJvbUFycmF5Iiwia2VjY2FrRnJvbUhleFN0cmluZyIsImdldEtleXMiLCJmcm9tQXNjaWkiLCJmcm9tVXRmOCIsInRvQXNjaWkiLCJhcnJheUNvbnRhaW5zQXJyYXkiLCJnZXRCaW5hcnlTaXplIiwiZGVmaW5lUHJvcGVydGllcyIsIl9maWVsZHMiLCJhbGxvd1plcm8iLCJhbGxvd0xlc3MiLCJhbGlhcyIsImhhc2hQZXJzb25hbE1lc3NhZ2UiLCJpc1ZhbGlkU2lnbmF0dXJlIiwiZnJvbVJwY1NpZyIsInRvQ29tcGFjdFNpZyIsInRvUnBjU2lnIiwiZWNyZWNvdmVyIiwiZWNzaWduIiwiYm5Ub1JscCIsImJuVG9IZXgiLCJQcmVmaXhlZEhleFN0cmluZyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJub2V0aGVyIiwid2VpIiwia3dlaSIsIkt3ZWkiLCJiYWJiYWdlIiwiZmVtdG9ldGhlciIsIm13ZWkiLCJNd2VpIiwibG92ZWxhY2UiLCJwaWNvZXRoZXIiLCJnd2VpIiwiR3dlaSIsInNoYW5ub24iLCJuYW5vZXRoZXIiLCJuYW5vIiwic3phYm8iLCJtaWNyb2V0aGVyIiwibWljcm8iLCJmaW5uZXkiLCJtaWxsaWV0aGVyIiwibWlsbGkiLCJldGhlciIsImtldGhlciIsImdyYW5kIiwibWV0aGVyIiwiZ2V0aGVyIiwidGV0aGVyIiwiZGl2aWRlZFRvSW50ZWdlckJ5IiwidG9QcmVjaXNpb24iLCJ1bml0TWFwIiwibnVtYmVyVG9TdHJpbmciLCJnZXRWYWx1ZU9mVW5pdCIsImZyb21XZWkiLCJwYWQiLCJjb21taWZ5IiwidG9XZWkiLCJmbiIsIm9uY2UiLCJfZXZlbnRzQ291bnQiLCJldmVudE5hbWVzIiwibGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsInJlbW92ZUFsbExpc3RlbmVycyIsImFkZExpc3RlbmVyIiwicHJlZml4ZWQiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImluaXQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsIm5ld0xpc3RlbmVyIiwibGlzdGVuZXIiLCJ3YXJuZWQiLCJlbWl0dGVyIiwiZmlyZWQiLCJ0YXJnZXQiLCJ3cmFwRm4iLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJyYXdMaXN0ZW5lcnMiLCJzdGFibGUiLCJzdGFibGVTdHJpbmdpZnkiLCJkZXB0aExpbWl0IiwiZWRnZXNMaW1pdCIsImNoYXJBdCIsIlN5bnRheEVycm9yIiwiQWdncmVnYXRlRXJyb3IiLCJBdG9taWNzIiwiRGF0YVZpZXciLCJkZWNvZGVVUkkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUkkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJldmFsIiwiRXZhbEVycm9yIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsInBhcnNlRmxvYXQiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJVUklFcnJvciIsIldlYWtNYXAiLCJXZWFrUmVmIiwiV2Vha1NldCIsImhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnIiwidG9TdHJpbmdUYWciLCJfYmxvY2siLCJfYmxvY2tTaXplIiwiX2Jsb2NrT2Zmc2V0IiwiX2xlbmd0aCIsIl9maW5hbGl6ZWQiLCJfZGlnZXN0IiwiY29tbW9uIiwic2hhIiwicmlwZW1kIiwiaG1hYyIsInNoYTEiLCJzaGEyMjQiLCJwZW5kaW5nIiwicGVuZGluZ1RvdGFsIiwicGFkTGVuZ3RoIiwiZW5kaWFuIiwiX2RlbHRhOCIsIl9kZWx0YTMyIiwiQmxvY2tIYXNoIiwiam9pbjMyIiwiaW5uZXIiLCJvdXRlciIsInJvdGwzMiIsInN1bTMyIiwic3VtMzJfMyIsInN1bTMyXzQiLCJpbmhlcml0cyIsInRvSGV4MzIiLCJzcGxpdDMyIiwic3VtMzJfNSIsImZ0XzEiLCJjaDMyIiwibWFqMzIiLCJzMF8yNTYiLCJzMV8yNTYiLCJnMF8yNTYiLCJnMV8yNTYiLCJyb3RyNjRfaGkiLCJyb3RyNjRfbG8iLCJzaHI2NF9oaSIsInNocjY0X2xvIiwic3VtNjQiLCJzdW02NF9oaSIsInN1bTY0X2xvIiwic3VtNjRfNF9oaSIsInN1bTY0XzRfbG8iLCJzdW02NF81X2hpIiwic3VtNjRfNV9sbyIsIl9wcmVwYXJlQmxvY2siLCJyb3RyMzIiLCJwMzIiLCJodG9ubCIsInplcm84IiwicHJvdG9jb2wiLCJyZXF1ZXN0IiwiTmFOIiwiY2FsbGVlIiwiaXNMZWdhY3lBcmd1bWVudHMiLCJkb2N1bWVudCIsImFsbCIsImdldFBvbHlmaWxsIiwiaW1wbGVtZW50YXRpb24iLCJzaGltIiwiZHVwbGV4IiwiSlNfU0hBM19OT19XSU5ET1ciLCJKU19TSEEzX05PX05PREVfSlMiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJKU19TSEEzX05PX0NPTU1PTl9KUyIsImFtZE8iLCJKU19TSEEzX05PX0FSUkFZX0JVRkZFUiIsIkpTX1NIQTNfTk9fQVJSQVlfQlVGRkVSX0lTX1ZJRVciLCJwYWRkaW5nIiwiYml0cyIsImNyZWF0ZU1ldGhvZCIsImJ5dGVwYWQiLCJibG9ja3MiLCJvdXRwdXRCaXRzIiwicmVzZXQiLCJmaW5hbGl6ZWQiLCJibG9jayIsInN0YXJ0IiwiYmxvY2tDb3VudCIsImJ5dGVDb3VudCIsIm91dHB1dEJsb2NrcyIsImV4dHJhQnl0ZXMiLCJsYXN0Qnl0ZUluZGV4IiwiZW5jb2RlU3RyaW5nIiwiZmluYWxpemUiLCJhcnJheUJ1ZmZlciIsImFycmF5Iiwic3BhY2UiLCJjeWNsZXMiLCJyZXBsYWNlciIsImF0IiwidGV4dCIsImxhc3RJbmRleCIsIl9yYXRlIiwiX2NhcGFjaXR5IiwiX2RlbGltaXRlZFN1ZmZpeCIsIl9oYXNoQml0TGVuZ3RoIiwiX29wdGlvbnMiLCJpbml0aWFsaXplIiwiYWJzb3JiIiwiYWJzb3JiTGFzdEZld0JpdHMiLCJzcXVlZXplIiwiX3Jlc2V0U3RhdGUiLCJfY2xvbmUiLCJwMTYwMCIsImplIiwiQmUiLCJMZSIsIkRlIiwiVWUiLCJxZSIsIkZlIiwiSGUiLCJ6ZSIsIktlIiwiVmUiLCJHZSIsIldlIiwiWGUiLCJZZSIsIkplIiwiJGUiLCJaZSIsIlFlIiwiZXQiLCJ0dCIsInJ0IiwibnQiLCJpdCIsIm90Iiwic3QiLCJzcXVlZXppbmciLCJub2RlVHlwZSIsInByb2Nlc3MiLCJiaW5kaW5nIiwiaXNUeXBlZEFycmF5IiwiZXhlYyIsIklFX1BST1RPIiwiY2xlYXIiLCJfX2RhdGFfXyIsInN0cmluZyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRyYWNlIiwibWV0aG9kRmFjdG9yeSIsImxvY2FsU3RvcmFnZSIsImNvb2tpZSIsIlRSQUNFIiwiV0FSTiIsIlNJTEVOVCIsImdldExldmVsIiwic2V0TGV2ZWwiLCJzZXREZWZhdWx0TGV2ZWwiLCJyZXNldExldmVsIiwicmVtb3ZlSXRlbSIsImVuYWJsZUFsbCIsImRpc2FibGVBbGwiLCJnZXRMb2dnZXIiLCJub0NvbmZsaWN0IiwiZ2V0TG9nZ2VycyIsIl9iIiwiX2MiLCJfZCIsIl9yYW5kYmVsb3ciLCJfcmFuZHJhbmdlIiwiZ2V0RGl2aXNvciIsIiRhcHBsaWNhdGlvbkNhY2hlIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG9ubW96ZnVsbHNjcmVlbmNoYW5nZSIsIiRvbm1vemZ1bGxzY3JlZW5lcnJvciIsIiRvdXRlckhlaWdodCIsIiRvdXRlcldpZHRoIiwiJHBhZ2VYT2Zmc2V0IiwiJHBhZ2VZT2Zmc2V0IiwiJHBhcmVudCIsIiRzY3JvbGxMZWZ0IiwiJHNjcm9sbFRvcCIsIiRzY3JvbGxYIiwiJHNjcm9sbFkiLCIkc2VsZiIsIiR3ZWJraXRJbmRleGVkREIiLCIkd2Via2l0U3RvcmFnZUluZm8iLCIkd2luZG93IiwiY2FsbGVkIiwib25jZUVycm9yIiwicHJvdG8iLCJlbmRpYW5uZXNzIiwiaG9zdG5hbWUiLCJsb2NhdGlvbiIsImxvYWRhdmciLCJ1cHRpbWUiLCJmcmVlbWVtIiwiTUFYX1ZBTFVFIiwidG90YWxtZW0iLCJjcHVzIiwicmVsZWFzZSIsImFwcFZlcnNpb24iLCJuZXR3b3JrSW50ZXJmYWNlcyIsImdldE5ldHdvcmtJbnRlcmZhY2VzIiwiYXJjaCIsInBsYXRmb3JtIiwidG1wZGlyIiwidG1wRGlyIiwiRU9MIiwiaG9tZWRpciIsImNlcnRpZmljYXRlIiwic2VxIiwiaW50IiwiUlNBUHJpdmF0ZUtleSIsIlJTQVB1YmxpY0tleSIsImJpdHN0ciIsIlB1YmxpY0tleSIsIm9iamlkIiwibnVsbF8iLCJvY3RzdHIiLCJQcml2YXRlS2V5IiwiRW5jcnlwdGVkUHJpdmF0ZUtleSIsIkRTQVByaXZhdGVLZXkiLCJEU0FwYXJhbSIsIkVDUHJpdmF0ZUtleSIsIm5hbWVkQ3VydmUiLCJ1dGNUaW1lIiwidXRjdGltZSIsImdlbmVyYWxUaW1lIiwiZ2VudGltZSIsInNldG9mIiwic2Vxb2YiLCJyZG5TZXF1ZW5jZSIsImJvb2wiLCJwYXNzcGhyYXNlIiwidGJzQ2VydGlmaWNhdGUiLCJzdWJqZWN0UHVibGljS2V5SW5mbyIsInN1YmplY3RQdWJsaWNLZXkiLCJrZGUiLCJrZGVwYXJhbXMiLCJzYWx0IiwiaXRlcnMiLCJjaXBoZXIiLCJhbGdvIiwicGFyYW1ldGVycyIsInF1ZXVlTWljcm90YXNrIiwic2V0SW1tZWRpYXRlIiwiZGVyaXZlQml0cyIsIml0ZXJhdGlvbnMiLCJicm93c2VyIiwibWQ1Iiwicm1kMTYwIiwiaXBhZDEiLCJpcGFkMiIsIm9wYWQiLCJhbGciLCJibG9ja3NpemUiLCJydW4iLCJjbGVhclRpbWVvdXQiLCJmdW4iLCJ0aXRsZSIsImVudiIsImFyZ3YiLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiUmVhZFN0cmVhbSIsIldyaXRlU3RyZWFtIiwiY2xvc2UiLCJkZXN0cm95IiwibWF4S2V5cyIsImFsbG93SGFsZk9wZW4iLCJoaWdoV2F0ZXJNYXJrIiwiZ2V0QnVmZmVyIiwiUmVhZGFibGVTdGF0ZSIsImRlYnVnbG9nIiwiZ2V0SGlnaFdhdGVyTWFyayIsIkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YiLCJFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCIsIkVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQiLCJlcnJvck9yRGVzdHJveSIsInJlYWRhYmxlT2JqZWN0TW9kZSIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsInN5bmMiLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsInBhdXNlZCIsImVtaXRDbG9zZSIsImF1dG9EZXN0cm95IiwiZGVmYXVsdEVuY29kaW5nIiwiYXdhaXREcmFpbiIsInJlYWRpbmdNb3JlIiwiZGVjb2RlciIsImVuY29kaW5nIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJoZWFkIiwiZmlyc3QiLCJjb25zdW1lIiwiZmluaXNoZWQiLCJzdGRvdXQiLCJoYXNVbnBpcGVkIiwibmVlZERyYWluIiwicGF1c2UiLCJ1bnBpcGUiLCJ3cmFwIiwiYXN5bmNJdGVyYXRvciIsIl9mcm9tTGlzdCIsIkVSUl9NVUxUSVBMRV9DQUxMQkFDSyIsIkVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkciLCJFUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzAiLCJfdHJhbnNmb3JtU3RhdGUiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNiIiwid3JpdGVjaHVuayIsImFmdGVyVHJhbnNmb3JtIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJlbnRyeSIsImZpbmlzaCIsImNhbGxiYWNrIiwicGVuZGluZ2NiIiwidW5kZWZpbmVkIiwiY29ya2VkUmVxdWVzdHNGcmVlIiwiV3JpdGFibGVTdGF0ZSIsImRlcHJlY2F0ZSIsIkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUiLCJFUlJfU1RSRUFNX0RFU1RST1lFRCIsIkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMiLCJFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCIsIkVSUl9VTktOT1dOX0VOQ09ESU5HIiwid3JpdGFibGVPYmplY3RNb2RlIiwiZmluYWxDYWxsZWQiLCJlbmRpbmciLCJkZWNvZGVTdHJpbmdzIiwid3JpdGluZyIsImNvcmtlZCIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVsZW4iLCJlcnJvckVtaXR0ZWQiLCJidWZmZXJlZFJlcXVlc3QiLCJsYXN0QnVmZmVyZWRSZXF1ZXN0IiwicHJlZmluaXNoZWQiLCJidWZmZXJlZFJlcXVlc3RDb3VudCIsIndyaXRldiIsIl93cml0ZXYiLCJpc0J1ZiIsImFsbEJ1ZmZlcnMiLCJjaHVuayIsImhhc0luc3RhbmNlIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsInN0cmVhbSIsInRhaWwiLCJfZ2V0U3RyaW5nIiwiX2dldEJ1ZmZlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSIsIkVSUl9JTlZBTElEX09QVF9WQUxVRSIsIlN0cmVhbSIsIlJlYWRhYmxlIiwiUGFzc1Rocm91Z2giLCJwaXBlbGluZSIsImdldExlbmd0aCIsInJlbWFpbmRlciIsImtTdHJpbmdNYXhMZW5ndGgiLCJNQVhfTEVOR1RIIiwiTUFYX1NUUklOR19MRU5HVEgiLCJfZmluYWxTaXplIiwiX3ciLCJfZiIsIl9nIiwiX2giLCJfYWgiLCJfYmgiLCJfY2giLCJfZGgiLCJfZWgiLCJfZmgiLCJfZ2giLCJfaGgiLCJfYWwiLCJfYmwiLCJfY2wiLCJfZGwiLCJfZWwiLCJfZmwiLCJfZ2wiLCJfaGwiLCJfaXNTdGRpbyIsInNlYXJjaCIsImhvc3QiLCJwb3J0IiwidXJsIiwibWV0aG9kIiwiaGVhZGVycyIsIkNsaWVudFJlcXVlc3QiLCJJbmNvbWluZ01lc3NhZ2UiLCJBZ2VudCIsImRlZmF1bHRNYXhTb2NrZXRzIiwiZ2xvYmFsQWdlbnQiLCJTVEFUVVNfQ09ERVMiLCJNRVRIT0RTIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJyZXNwb25zZVR5cGUiLCJmZXRjaCIsIlJlYWRhYmxlU3RyZWFtIiwid3JpdGFibGVTdHJlYW0iLCJXcml0YWJsZVN0cmVhbSIsImFib3J0Q29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImFycmF5YnVmZmVyIiwibXNzdHJlYW0iLCJtb3pjaHVua2VkYXJyYXlidWZmZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwicmVhZHlTdGF0ZXMiLCJfb3B0cyIsIl9ib2R5IiwiX2hlYWRlcnMiLCJhdXRoIiwiX2ZldGNoVGltZXIiLCJfc29ja2V0VGltZW91dCIsIl9zb2NrZXRUaW1lciIsIl9vbkZpbmlzaCIsImdldEhlYWRlciIsInJlbW92ZUhlYWRlciIsIl9kZXN0cm95ZWQiLCJ0aW1lb3V0IiwiQmxvYiIsInNpZ25hbCIsIl9mZXRjaEFib3J0Q29udHJvbGxlciIsInJlcXVlc3RUaW1lb3V0IiwiY3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJfZmV0Y2hSZXNwb25zZSIsIl9yZXNldFRpbWVycyIsIl9jb25uZWN0IiwiX3hociIsIm9udGltZW91dCIsInNldFJlcXVlc3RIZWFkZXIiLCJfcmVzcG9uc2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiTE9BRElORyIsIkRPTkUiLCJfb25YSFJQcm9ncmVzcyIsIm9ucHJvZ3Jlc3MiLCJvbmVycm9yIiwic2VuZCIsInN0YXR1cyIsImZsdXNoSGVhZGVycyIsInNldE5vRGVsYXkiLCJzZXRTb2NrZXRLZWVwQWxpdmUiLCJVTlNFTlQiLCJPUEVORUQiLCJIRUFERVJTX1JFQ0VJVkVEIiwicmF3SGVhZGVycyIsInRyYWlsZXJzIiwicmF3VHJhaWxlcnMiLCJzdGF0dXNDb2RlIiwic3RhdHVzTWVzc2FnZSIsInN0YXR1c1RleHQiLCJfcmVzdW1lRmV0Y2giLCJwaXBlVG8iLCJnZXRSZWFkZXIiLCJfcG9zIiwicmVzcG9uc2VVUkwiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJfY2hhcnNldCIsInJlc3BvbnNlVGV4dCIsInJlc3BvbnNlIiwiTVNTdHJlYW1SZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImZpbGxMYXN0IiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImN0b3IiLCJnbG9iYWwiLCJvdmVyZmxvdyIsInVjczIiLCJ0b0FTQ0lJIiwidG9Vbmljb2RlIiwic2xhc2hlcyIsInF1ZXJ5IiwicGF0aG5hbWUiLCJocmVmIiwicmVzb2x2ZU9iamVjdCIsIlVybCIsImphdmFzY3JpcHQiLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJnb3BoZXIiLCJmaWxlIiwicGFyc2VIb3N0IiwiZXNjYXBlIiwid29ya2luZyIsImlzQXJndW1lbnRzT2JqZWN0IiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImlzVWludDhBcnJheSIsImlzVWludDhDbGFtcGVkQXJyYXkiLCJpc1VpbnQxNkFycmF5IiwiaXNVaW50MzJBcnJheSIsImlzSW50OEFycmF5IiwiaXNJbnQxNkFycmF5IiwiaXNJbnQzMkFycmF5IiwiaXNCaWdJbnQ2NEFycmF5IiwiaXNCaWdVaW50NjRBcnJheSIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImlzQXJyYXlCdWZmZXIiLCJpc0RhdGFWaWV3IiwiaXNTaGFyZWRBcnJheUJ1ZmZlciIsImlzQXN5bmNGdW5jdGlvbiIsImlzTWFwSXRlcmF0b3IiLCJpc1NldEl0ZXJhdG9yIiwiaXNHZW5lcmF0b3JPYmplY3QiLCJpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUiLCJub0RlcHJlY2F0aW9uIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJOT0RFX0RFQlVHIiwic2VlbiIsInN0eWxpemUiLCJjb2xvcnMiLCJfZXh0ZW5kIiwic3R5bGVzIiwidG9VVENTdHJpbmciLCJwaWQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaW52ZXJzZSIsIndoaXRlIiwiZ3JleSIsImJsYWNrIiwiYmx1ZSIsImN5YW4iLCJncmVlbiIsIm1hZ2VudGEiLCJ5ZWxsb3ciLCJzcGVjaWFsIiwibnVtYmVyIiwiYm9vbGVhbiIsIm51bGwiLCJkYXRlIiwicmVnZXhwIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldERhdGUiLCJnZXRNb250aCIsInByb21pc2lmeSIsImNhbGxiYWNraWZ5IiwiRXJyb3JSZXNwb25zZSIsIkludmFsaWROdW1iZXJPZlBhcmFtcyIsIkludmFsaWRDb25uZWN0aW9uIiwiQ29ubmVjdGlvbkVycm9yIiwiSW52YWxpZFByb3ZpZGVyIiwiSW52YWxpZFJlc3BvbnNlIiwiQ29ubmVjdGlvblRpbWVvdXQiLCJDb25uZWN0aW9uTm90T3BlbkVycm9yIiwiQ29ubmVjdGlvbkNsb3NlRXJyb3IiLCJNYXhBdHRlbXB0c1JlYWNoZWRPblJlY29ubmVjdGluZ0Vycm9yIiwiUGVuZGluZ1JlcXVlc3RzT25SZWNvbm5lY3RpbmdFcnJvciIsIlJldmVydEluc3RydWN0aW9uRXJyb3IiLCJUcmFuc2FjdGlvblJldmVydEluc3RydWN0aW9uRXJyb3IiLCJyZWNlaXB0IiwiVHJhbnNhY3Rpb25FcnJvciIsIk5vQ29udHJhY3RBZGRyZXNzRm91bmRFcnJvciIsIkNvbnRyYWN0Q29kZU5vdFN0b3JlZEVycm9yIiwiVHJhbnNhY3Rpb25SZXZlcnRlZFdpdGhvdXRSZWFzb25FcnJvciIsIlRyYW5zYWN0aW9uT3V0T2ZHYXNFcnJvciIsIlJlc29sdmVyTWV0aG9kTWlzc2luZ0Vycm9yIiwiQ29udHJhY3RNaXNzaW5nQUJJRXJyb3IiLCJDb250cmFjdE9uY2VSZXF1aXJlc0NhbGxiYWNrRXJyb3IiLCJDb250cmFjdEV2ZW50RG9lc05vdEV4aXN0RXJyb3IiLCJDb250cmFjdFJlc2VydmVkRXZlbnRFcnJvciIsIkNvbnRyYWN0TWlzc2luZ0RlcGxveURhdGFFcnJvciIsIkNvbnRyYWN0Tm9BZGRyZXNzRGVmaW5lZEVycm9yIiwiQ29udHJhY3ROb0Zyb21BZGRyZXNzRGVmaW5lZEVycm9yIiwidG9CTiIsImlzSGV4U3RyaWN0IiwibnVtYmVyVG9IZXgiLCJpbnB1dCIsInN0YXJ0c1dpdGgiLCJpc0hleCIsImdhcyIsImJsb2NrTnVtYmVyIiwiaGV4VG9OdW1iZXIiLCJ0cmFuc2FjdGlvbkluZGV4IiwiYmxvY2tIYXNoIiwidHJhbnNhY3Rpb25IYXNoIiwibG9nSW5kZXgiLCJzaGEzIiwiaXNWYWxpZCIsImlzRGlyZWN0IiwidG9BZGRyZXNzIiwiaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXIiLCJkZWZhdWx0QmxvY2siLCJpbnB1dEJsb2NrTnVtYmVyRm9ybWF0dGVyIiwiaW5wdXRDYWxsRm9ybWF0dGVyIiwiZGVmYXVsdEFjY291bnQiLCJpbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyIiwiaW5wdXRBZGRyZXNzRm9ybWF0dGVyIiwiaW5wdXRQb3N0Rm9ybWF0dGVyIiwidHRsIiwid29ya1RvUHJvdmUiLCJwcmlvcml0eSIsInRvcGljcyIsImlucHV0TG9nRm9ybWF0dGVyIiwiZnJvbUJsb2NrIiwidG9CbG9jayIsImlucHV0U2lnbkZvcm1hdHRlciIsInV0ZjhUb0hleCIsImlucHV0U3RvcmFnZUtleXNGb3JtYXR0ZXIiLCJvdXRwdXRQcm9vZkZvcm1hdHRlciIsImhleFRvTnVtYmVyU3RyaW5nIiwib3V0cHV0QmlnTnVtYmVyRm9ybWF0dGVyIiwib3V0cHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXIiLCJvdXRwdXRUcmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZXIiLCJjdW11bGF0aXZlR2FzVXNlZCIsImdhc1VzZWQiLCJsb2dzIiwiZWZmZWN0aXZlR2FzUHJpY2UiLCJjb250cmFjdEFkZHJlc3MiLCJvdXRwdXRCbG9ja0Zvcm1hdHRlciIsInRpbWVzdGFtcCIsImRpZmZpY3VsdHkiLCJ0b3RhbERpZmZpY3VsdHkiLCJ0cmFuc2FjdGlvbnMiLCJtaW5lciIsImJhc2VGZWVQZXJHYXMiLCJvdXRwdXRMb2dGb3JtYXR0ZXIiLCJvdXRwdXRQb3N0Rm9ybWF0dGVyIiwiZXhwaXJ5Iiwid29ya1Byb3ZlZCIsIm91dHB1dFN5bmNpbmdGb3JtYXR0ZXIiLCJzdGFydGluZ0Jsb2NrIiwiY3VycmVudEJsb2NrIiwiaGlnaGVzdEJsb2NrIiwia25vd25TdGF0ZXMiLCJwdWxsZWRTdGF0ZXMiLCJmb3JtYXR0ZXJzIiwic3Vic2NyaXB0aW9ucyIsImlucHV0Rm9ybWF0dGVyIiwib3V0cHV0Rm9ybWF0dGVyIiwidHJhbnNmb3JtUGF5bG9hZCIsImV4dHJhRm9ybWF0dGVycyIsImFiaUNvZGVyIiwicmVxdWVzdE1hbmFnZXIiLCJhY2NvdW50cyIsInRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0IiwidHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3MiLCJ0cmFuc2FjdGlvblBvbGxpbmdUaW1lb3V0IiwidHJhbnNhY3Rpb25Qb2xsaW5nSW50ZXJ2YWwiLCJibG9ja0hlYWRlclRpbWVvdXQiLCJkZWZhdWx0Q29tbW9uIiwiZGVmYXVsdENoYWluIiwiZGVmYXVsdEhhcmRmb3JrIiwiaGFuZGxlUmV2ZXJ0Iiwic2V0UmVxdWVzdE1hbmFnZXIiLCJjcmVhdGVGdW5jdGlvbiIsImJ1aWxkQ2FsbCIsImF0dGFjaFRvT2JqZWN0IiwiZ2V0Q2FsbCIsImV4dHJhY3RDYWxsYmFjayIsInZhbGlkYXRlQXJncyIsImZvcm1hdElucHV0IiwiZm9ybWF0T3V0cHV0IiwidG9QYXlsb2FkIiwiX2NvbmZpcm1UcmFuc2FjdGlvbiIsIm5ld0Jsb2NrSGVhZGVycyIsInN1YnNjcmlwdGlvbk5hbWUiLCJjbGVhckludGVydmFsIiwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0IiwiX2ZpcmVFcnJvciIsImV2ZW50RW1pdHRlciIsInJlY2VpcHRGb3JtYXR0ZXIiLCJnZXRCbG9ja0J5TnVtYmVyIiwiZ2V0Q29kZSIsImNvbnRyYWN0RGVwbG95Rm9ybWF0dGVyIiwib3V0T2ZHYXMiLCJnZXRSZXZlcnRSZWFzb24iLCJzZXRJbnRlcnZhbCIsIndhbGxldCIsImlzUmV2ZXJ0UmVhc29uU3RyaW5nIiwiZGVjb2RlUGFyYW1ldGVyIiwicmF3VHJhbnNhY3Rpb24iLCJjaGFpbiIsImhhcmRmb3JrIiwic2lnblRyYW5zYWN0aW9uIiwicmVxdWVzdHMiLCJleGVjdXRlIiwiX3NvcnRSZXNwb25zZXMiLCJzZW5kQmF0Y2giLCJpc1ZhbGlkUmVzcG9uc2UiLCJldGhlcmV1bSIsIndlYjMiLCJjdXJyZW50UHJvdmlkZXIiLCJzZW5kQXN5bmMiLCJjb25uZWN0aW9uIiwicHJvdmlkZXJzIiwic2V0UHJvdmlkZXIiLCJnaXZlblByb3ZpZGVyIiwiV2Vic29ja2V0UHJvdmlkZXIiLCJIdHRwUHJvdmlkZXIiLCJJcGNQcm92aWRlciIsImNvbm5lY3QiLCJjb25uZWN0ZWQiLCJjbGVhclN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpcHRpb24iLCJyZXN1YnNjcmliZSIsIl9pc0NsZWFuQ2xvc2VFdmVudCIsIl9pc0lwY0Nsb3NlRXJyb3IiLCJfanNvbnJwY1Jlc3VsdENhbGxiYWNrIiwidG9CYXRjaFBheWxvYWQiLCJhZGRTdWJzY3JpcHRpb24iLCJyZW1vdmVTdWJzY3JpcHRpb24iLCJ3YXNDbGVhbiIsIk1hbmFnZXIiLCJCYXRjaE1hbmFnZXIiLCJtZXNzYWdlSWQiLCJqc29ucnBjIiwiZXZlcnkiLCJsYXN0QmxvY2siLCJfZXh0cmFjdENhbGxiYWNrIiwiX3ZhbGlkYXRlQXJncyIsIl9mb3JtYXRJbnB1dCIsIl9mb3JtYXRPdXRwdXQiLCJfdG9QYXlsb2FkIiwic3Vic2NyaXB0aW9uTWV0aG9kIiwic3Vic2NyaXB0aW9uSGFuZGxlciIsInByb3BlcnR5IiwibWV0aG9kcyIsIl9yZXF1ZXN0TWFuYWdlciIsIk1ldGhvZCIsInBhY2thZ2VJbml0IiwiX3Byb3ZpZGVyIiwiQmF0Y2hSZXF1ZXN0IiwiZXh0ZW5kIiwiYWRkUHJvdmlkZXJzIiwiZW5jb2RlRnVuY3Rpb25TaWduYXR1cmUiLCJfanNvbkludGVyZmFjZU1ldGhvZFRvU3RyaW5nIiwiZW5jb2RlRXZlbnRTaWduYXR1cmUiLCJlbmNvZGVQYXJhbWV0ZXIiLCJlbmNvZGVQYXJhbWV0ZXJzIiwibWFwVHlwZXMiLCJmb3JtYXRQYXJhbSIsImlzU2ltcGxpZmllZFN0cnVjdEZvcm1hdCIsIm1hcFN0cnVjdE5hbWVBbmRUeXBlIiwibWFwU3RydWN0VG9Db2RlckZvcm1hdCIsImlzQmlnTnVtYmVyIiwibGVmdFBhZCIsInJpZ2h0UGFkIiwiZW5jb2RlRnVuY3Rpb25DYWxsIiwiaW5wdXRzIiwiZGVjb2RlUGFyYW1ldGVycyIsImRlY29kZVBhcmFtZXRlcnNXaXRoIiwiX19sZW5ndGhfXyIsImRlY29kZUxvZyIsImZpbmQiLCJfZ2V0T3JTZXREZWZhdWx0T3B0aW9ucyIsIl9hZGRyZXNzIiwiZXZlbnRzIiwiX2pzb25JbnRlcmZhY2UiLCJjb25zdGFudCIsInN0YXRlTXV0YWJpbGl0eSIsInBheWFibGUiLCJfY3JlYXRlVHhPYmplY3QiLCJuZXh0TWV0aG9kIiwiX29uIiwiYWxsRXZlbnRzIiwianNvbkludGVyZmFjZSIsIl9ldGhBY2NvdW50cyIsIl9nZXRDYWxsYmFjayIsIl9jaGVja0xpc3RlbmVyIiwiX2VuY29kZUV2ZW50QUJJIiwiYW5vbnltb3VzIiwiX2RlY29kZUV2ZW50QUJJIiwicmV0dXJuVmFsdWVzIiwiZXZlbnQiLCJfZW5jb2RlTWV0aG9kQUJJIiwiX21ldGhvZCIsIl9wYXJlbnQiLCJfZGVwbG95RGF0YSIsIl9kZWNvZGVNZXRob2RSZXR1cm4iLCJkZXBsb3kiLCJkZXBsb3lEYXRhIiwiX2dlbmVyYXRlRXZlbnRPcHRpb25zIiwicmVtb3ZlZCIsImdldFBhc3RFdmVudHMiLCJfZXhlY3V0ZU1ldGhvZCIsImVuY29kZUFCSSIsImVzdGltYXRlR2FzIiwiY3JlYXRlQWNjZXNzTGlzdCIsIl9wcm9jZXNzRXhlY3V0ZUFyZ3VtZW50cyIsImdlbmVyYXRlUmVxdWVzdCIsIm91dHB1dHMiLCJfaWJhbiIsImZyb21BZGRyZXNzIiwiZnJvbUJiYW4iLCJpbnN0aXR1dGlvbiIsImlkZW50aWZpZXIiLCJpc0luZGlyZWN0IiwiY2hlY2tzdW0iLCJjbGllbnQiLCJhZ2VudCIsImtlZXBBbGl2ZSIsImh0dHBzQWdlbnQiLCJodHRwQWdlbnQiLCJfcHJlcGFyZVJlcXVlc3QiLCJiYXNlVXJsIiwibm9kZWpzU2V0IiwiZGlzY29ubmVjdCIsInN1cHBvcnRzU3Vic2NyaXB0aW9ucyIsIl9mbGF0dGVuVHlwZXMiLCJyYW5kb21IZXgiLCJzaGEzUmF3Iiwic29saWRpdHlTaGEzIiwic29saWRpdHlTaGEzUmF3IiwiZW5jb2RlUGFja2VkIiwiY2hlY2tBZGRyZXNzQ2hlY2tzdW0iLCJoZXhUb0J5dGVzIiwidG9EZWNpbWFsIiwiZnJvbURlY2ltYWwiLCJoZXhUb1V0ZjgiLCJoZXhUb1N0cmluZyIsInN0cmluZ1RvSGV4IiwiaGV4VG9Bc2NpaSIsImFzY2lpVG9IZXgiLCJwYWRSaWdodCIsInRvVHdvc0NvbXBsZW1lbnQiLCJjb21wYXJlQmxvY2tOdW1iZXJzIiwicmV2ZXJzZSIsIl9IYXNoIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfX2V4dGVuZHMiLCJTZWN1cml0eUVycm9yIiwiSW52YWxpZFN0YXRlRXJyb3IiLCJOZXR3b3JrRXJyb3IiLCJYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0IiwiUHJvZ3Jlc3NFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwibG9hZGVkIiwibGVuZ3RoQ29tcHV0YWJsZSIsInRvdGFsIiwiaGFuZGxlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiX2NvbnRlbnRUeXBlIiwiX3NldERhdGEiLCJfZmluYWxpemVIZWFkZXJzIiwiX3N0YXJ0VXBsb2FkIiwiWE1MSHR0cFJlcXVlc3RVcGxvYWQiLCJfX2Fzc2lnbiIsInVwbG9hZCIsInJlc3BvbnNlVXJsIiwiX3VybCIsIl9zeW5jIiwiX2xvd2VyZWRIZWFkZXJzIiwiX21pbWVPdmVycmlkZSIsIl9yZXF1ZXN0IiwiX3Jlc3BvbnNlUGFydHMiLCJfcmVzcG9uc2VIZWFkZXJzIiwiX2Fib3J0aW5nIiwiX2Vycm9yIiwiX2xvYWRlZEJ5dGVzIiwiX3RvdGFsQnl0ZXMiLCJfbGVuZ3RoQ29tcHV0YWJsZSIsIl9yZXN0cmljdGVkTWV0aG9kcyIsIkNPTk5FQ1QiLCJUUkFDSyIsIl9yZXN0cmljdGVkSGVhZGVycyIsImNvb2tpZTIiLCJkbnQiLCJleHBlY3QiLCJvcmlnaW4iLCJyZWZlcmVyIiwidHJhaWxlciIsInVwZ3JhZGUiLCJ2aWEiLCJfcHJpdmF0ZUhlYWRlcnMiLCJfdXNlckFnZW50IiwidjgiLCJfYW5vbnltb3VzIiwiYW5vbiIsIl9wYXJzZVVybCIsIl9zZXRSZWFkeVN0YXRlIiwiX3NlbmRGaWxlIiwiX3NlbmRIdHRwIiwiX3NldEVycm9yIiwiX2Rpc3BhdGNoUHJvZ3Jlc3MiLCJnZXRSZXNwb25zZUhlYWRlciIsIm5vZGVqc0h0dHBBZ2VudCIsIm5vZGVqc0h0dHBzQWdlbnQiLCJub2RlanNCYXNlVXJsIiwiX3NlbmRIeHhwUmVxdWVzdCIsImNvb2tpZUphciIsIl9vbkh0dHBUaW1lb3V0IiwiX29uSHR0cFJlc3BvbnNlIiwiX29uSHR0cFJlcXVlc3RFcnJvciIsIkNvbm5lY3Rpb24iLCJIb3N0IiwiUmVmZXJlciIsIl9vbkh0dHBSZXNwb25zZURhdGEiLCJfb25IdHRwUmVzcG9uc2VFbmQiLCJfb25IdHRwUmVzcG9uc2VDbG9zZSIsIl9wYXJzZVJlc3BvbnNlSGVhZGVycyIsIl9wYXJzZVJlc3BvbnNlIiwiX3BhcnNlUmVzcG9uc2VFbmNvZGluZyIsInBhdGhzIiwia3QiLCJST1BTVEVOIiwiTUFJTk5FVCIsIlBPTFlHT04iLCJpbnRlcm5hbFR5cGUiLCJuZXR3b3JrIiwicHJveHlBZGRyZXNzIiwiUFJPWFlfQUREUkVTU19NQUlOTkVUIiwiVVJMIiwibm9kZUxpc3RDb250cmFjdCIsIm5vZGVMaXN0QWRkcmVzcyIsInVwZGF0ZWQiLCJfbm9kZURldGFpbHMiLCJjdXJyZW50RXBvY2giLCJfY3VycmVudEVwb2NoIiwidG9ydXNOb2RlRW5kcG9pbnRzIiwiX3RvcnVzTm9kZUVuZHBvaW50cyIsInRvcnVzTm9kZVB1YiIsIl90b3J1c05vZGVQdWIiLCJ0b3J1c0luZGV4ZXMiLCJfdG9ydXNJbmRleGVzIiwiYXN5bmMiLCJ2ZXJpZmllciIsInZlcmlmaWVySWQiLCJQUk9YWV9BRERSRVNTX1JPUFNURU4iLCJnZXROb2RlU2V0IiwidG9ydXNOb2RlUHViWCIsInRvcnVzTm9kZVB1YlkiLCJOT0RFX0RFVEFJTFNfTUFJTk5FVCIsInJhY2UiLCJ1c2VBUElLZXkiLCJpc1VybEVuY29kZWREYXRhIiwidGFyZ2V0V2luZG93IiwidGFyZ2V0T3JpZ2luIiwiX2hhdmVTeW4iLCJfbmFtZSIsIl90YXJnZXQiLCJfdGFyZ2V0V2luZG93IiwiX3RhcmdldE9yaWdpbiIsIl9vbk1lc3NhZ2UiLCJvbk1lc3NhZ2UiLCJfc3luSW50ZXJ2YWxJZCIsIl9oYW5kU2hha2UiLCJfYnJlYWsiLCJfb25EYXRhIiwiX3Bvc3RNZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJfbWlkZGxld2FyZSIsIl9ydW5NaWRkbGV3YXJlIiwiaGFuZGxlIiwiX2hhbmRsZUJhdGNoIiwiX2hhbmRsZSIsIl9wcm9taXNlSGFuZGxlIiwiYXNNaWRkbGV3YXJlIiwiX3J1bkFsbE1pZGRsZXdhcmUiLCJfcnVuUmV0dXJuSGFuZGxlcnMiLCJfcHJvY2Vzc1JlcXVlc3QiLCJfY2hlY2tGb3JDb21wbGV0aW9uIiwiX3N1YnN0cmVhbXMiLCJjcmVhdGVTdHJlYW0iLCJpZ25vcmVTdHJlYW0iLCJyZXNwb25zZXMiLCJwcmVkaWNhdGUiLCJyZXNvbHZlZCIsImZpbmFsbHkiLCJ2ZXJpZmllcl9pZCIsImtleVJlc3VsdCIsImVycm9yUmVzdWx0IiwiZW5kcG9pbnRzIiwidG9ydXNOb2RlUHVicyIsImxhc3RQb2ludCIsImZpcnN0UG9pbnQiLCJzaWduZXJIb3N0IiwicmFuZG9tIiwicHViS2V5WCIsInB1YktleVkiLCJlbmFibGVPbmVLZXkiLCJtZXRhZGF0YUhvc3QiLCJhbGxvd0hvc3QiLCJzZXJ2ZXJUaW1lT2Zmc2V0IiwicHViX2tleV9YIiwicHViX2tleV9ZIiwiZ2V0T3JTZXROb25jZSIsInR5cGVPZlVzZXIiLCJwdWJOb25jZSIsImdlbmVyYXRlQWRkcmVzc0Zyb21QdWJLZXkiLCJ1cGdyYWRlZCIsInByaXZLZXlIZXgiLCJtZXRhZGF0YU5vbmNlIiwidG9ydXNLZXlIZXgiLCJjdXN0b21LZXlIZXgiLCJnZW5lcmF0ZU1ldGFkYXRhUGFyYW1zIiwic2V0TWV0YWRhdGEiLCJtZXNzYWdlcHJlZml4IiwidG9rZW5jb21taXRtZW50IiwidGVtcHB1YngiLCJ0ZW1wcHVieSIsInZlcmlmaWVyaWRlbnRpZmllciIsImVuY3J5cHRlZCIsIml0ZW0iLCJpZHRva2VuIiwibm9kZXNpZ25hdHVyZXMiLCJJbmRleCIsIk1ldGFkYXRhIiwiU2hhcmUiLCJwYWRTdGFydCIsImluZGV4IiwibGFncmFuZ2VJbnRlcnBvbGF0aW9uIiwiZ2V0Tm9uY2UiLCJnZXRNZXRhZGF0YSIsInByaXZLZXkiLCJnZW5lcmF0ZUFkZHJlc3NGcm9tUHJpdktleSIsImV0aEFkZHJlc3MiLCJzZXRfZGF0YSIsImlzRXh0ZW5kZWQiLCJmaW5hbEtleVJlc3VsdCIsImlzTmV3S2V5IiwiZ2V0UG9zdGJveEtleUZyb20xT3V0T2YxIiwiR09PR0xFIiwiRkFDRUJPT0siLCJUV0lUQ0giLCJSRURESVQiLCJESVNDT1JEIiwiRU1BSUxfUEFTU1dPUkRMRVNTIiwiUFJPRFVDVElPTiIsIkRFVkVMT1BNRU5UIiwiQklOQU5DRSIsIlRFU1RJTkciLCJMUkMiLCJCRVRBIiwiQk9UVE9NX0xFRlQiLCJUT1BfTEVGVCIsIkJPVFRPTV9SSUdIVCIsIlRPUF9SSUdIVCIsImxpbmUxIiwibGluZTIiLCJsaW5lMyIsInN1cHBvcnRQYWdlIiwibWluT3JkZXJWYWx1ZSIsIm1heE9yZGVyVmFsdWUiLCJ2YWxpZEN1cnJlbmNpZXMiLCJ2YWxpZENyeXB0b0N1cnJlbmNpZXNCeUNoYWluIiwiZGlzcGxheSIsImluY2x1ZGVGZWVzIiwiYXBpIiwiZW5mb3JjZU1heCIsInJlY2VpdmVIaW50Iiwic2VsbCIsInN1cHBvcnRlZFZlcmlmaWVyTGlzdCIsInBheW1lbnRQcm92aWRlcnMiLCJ0cmFuc2xhdGlvbnMiLCJlbiIsImVtYmVkIiwiY29udGludWUiLCJhY3Rpb25SZXF1aXJlZCIsInBlbmRpbmdBY3Rpb24iLCJjb29raWVzUmVxdWlyZWQiLCJlbmFibGVDb29raWVzIiwiY2xpY2tIZXJlIiwiamEiLCJrbyIsInpoIiwicHJvZFRvcnVzVXJsIiwibG9jYWxTdG9yYWdlS2V5UHJlZml4IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwicGVybWFuZW50bHlEaXNjb25uZWN0ZWQiLCJzZW5kU2l0ZU1ldGFkYXRhIiwidW5zdXBwb3J0ZWRTeW5jIiwiaW52YWxpZER1cGxleFN0cmVhbSIsImludmFsaWRPcHRpb25zIiwiaW52YWxpZFJlcXVlc3RBcmdzIiwiaW52YWxpZFJlcXVlc3RNZXRob2QiLCJpbnZhbGlkUmVxdWVzdFBhcmFtcyIsImludmFsaWRMb2dnZXJPYmplY3QiLCJpbnZhbGlkTG9nZ2VyTWV0aG9kIiwid2FybmluZ3MiLCJlbmFibGVEZXByZWNhdGlvbiIsInNlbmREZXByZWNhdGlvbiIsIm5ldHdvcmtDaGFuZ2VkIiwibm90aWZpY2F0aW9uIiwicHVibGljQ29uZmlnU3RvcmUiLCJ0b3J1c1VybCIsImxvZ0xldmVsIiwibGFuZ3VhZ2UiLCJjdCIsIm1heEV2ZW50TGlzdGVuZXJzIiwic2hvdWxkU2VuZE1ldGFkYXRhIiwianNvblJwY1N0cmVhbU5hbWUiLCJlbmFibGUiLCJleHBlcmltZW50YWxNZXRob2RzIiwiaXNUb3J1cyIsIl9kZWZhdWx0U3RhdGUiLCJzZWxlY3RlZEFkZHJlc3MiLCJuZXR3b3JrVmVyc2lvbiIsIl9oYW5kbGVBY2NvdW50c0NoYW5nZWQiLCJfaGFuZGxlQ2hhaW5DaGFuZ2VkIiwiX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCIsIl9oYW5kbGVDb25uZWN0IiwiX2hhbmRsZURpc2Nvbm5lY3QiLCJfaGFuZGxlU3RyZWFtRGlzY29ubmVjdCIsIl9zZW5kU3luYyIsIl9ycGNSZXF1ZXN0IiwiX3dhcm5PZkRlcHJlY2F0aW9uIiwiX2luaXRpYWxpemVTdGF0ZSIsIl9wdWJsaWNDb25maWdTdG9yZSIsInN0b3JhZ2VLZXkiLCJpc0Nvbm5lY3RlZCIsInJlcyIsIm1pZGRsZXdhcmUiLCJfcnBjRW5naW5lIiwiX3NlbnRXYXJuaW5ncyIsImlzVW5sb2NrZWQiLCJpbml0aWFsaXplZCIsInRyeVByZW9wZW5IYW5kbGUiLCJpc1Blcm1hbmVudGx5RGlzY29ubmVjdGVkIiwiaGFzRW1pdHRlZENvbm5lY3Rpb24iLCJmdCIsInV0IiwiZHQiLCJodCIsImFsZ29yaXRobXMiLCJmZWF0dXJlcyIsInNjcmVlbkxlZnQiLCJzY3JlZW5YIiwic2NyZWVuVG9wIiwic2NyZWVuWSIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsInNjcmVlbiIsIndpZHRoIiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJoZWlnaHQiLCJ3aW5kb3dUaW1lciIsImlDbG9zZWRXaW5kb3ciLCJfc2V0dXBUaW1lciIsImNsb3NlZCIsImZvY3VzIiwicmVkaXJlY3QiLCJwdCIsImJ0Iiwic3JjIiwieXQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsIm10IiwidnQiLCJ3dCIsIlN0IiwiZ29vZ2xlIiwiZmFjZWJvb2siLCJyZWRkaXQiLCJ0d2l0Y2giLCJkaXNjb3JkIiwiRXQiLCJBdCIsInh0Iiwic2V0SXRlbSIsImNoZWNrIiwiY3Jvc3NPcmlnaW4iLCJyZWwiLCJyZWxMaXN0Iiwic3VwcG9ydHMiLCJhcHBlbmRDaGlsZCIsImJ1dHRvblBvc2l0aW9uIiwibW9kYWxaSW5kZXgiLCJhcGlLZXkiLCJpc0xvZ2dlZEluIiwiaXNJbml0aWFsaXplZCIsInRvcnVzV2lkZ2V0VmlzaWJpbGl0eSIsInJlcXVlc3RlZFZlcmlmaWVyIiwiY3VycmVudFZlcmlmaWVyIiwibm9kZURldGFpbE1hbmFnZXIiLCJ0b3J1c0pzIiwic2V0QVBJS2V5IiwiYWxlcnRaSW5kZXgiLCJpc0lmcmFtZUZ1bGxTY3JlZW4iLCJkYXBwU3RvcmFnZUtleSIsImJ1aWxkRW52IiwiZW5hYmxlTG9nZ2luZyIsImVuYWJsZWRWZXJpZmllcnMiLCJuZXR3b3JrTmFtZSIsImJsb2NrRXhwbG9yZXIiLCJ0aWNrZXIiLCJ0aWNrZXJOYW1lIiwibG9naW5Db25maWciLCJzaG93VG9ydXNCdXR0b24iLCJpbnRlZ3JpdHkiLCJ3aGl0ZUxhYmVsIiwic2tpcFRLZXkiLCJ1c2VMb2NhbFN0b3JhZ2UiLCJ1c2VXYWxsZXRDb25uZWN0IiwiZ2V0SXRlbSIsImVuZHNXaXRoIiwidG9ydXNJZnJhbWUiLCJ0b3J1c0FsZXJ0Q29udGFpbmVyIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInNldEF0dHJpYnV0ZSIsInN0eWxlTGluayIsImRlZmF1bHRMYW5ndWFnZSIsImN1c3RvbVRyYW5zbGF0aW9ucyIsImVtYmVkVHJhbnNsYXRpb25zIiwiX3NldHVwV2ViMyIsImNvbW11bmljYXRpb25NdXgiLCJnZXRTdHJlYW0iLCJzdWNjZXNzIiwiX2Rpc3BsYXlJZnJhbWUiLCJkZWxpbWl0ZXIiLCJoYXNoZXMiLCJjbGVhckluaXQiLCJsb2dpbiIsImxvZ2luX2hpbnQiLCJsb2dpbkhpbnQiLCJsb2dvdXQiLCJsb2dnZWRJbiIsIkVsZW1lbnQiLCJIVE1MRG9jdW1lbnQiLCJyZW1vdmUiLCJ0b3J1c0FsZXJ0IiwiaGlkZVRvcnVzQnV0dG9uIiwiX3NlbmRXaWRnZXRWaXNpYmlsaXR5U3RhdHVzIiwiZXJyIiwiX2hhbmRsZVdpbmRvdyIsInByZW9wZW5JbnN0YW5jZUlkIiwib3ZlcnJpZGUiLCJzaG93V2FsbGV0IiwiaW5zdGFuY2VJZCIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImdldE5vZGVEZXRhaWxzIiwiZ2V0VXNlclR5cGVBbmRBZGRyZXNzIiwiZ2V0VXNlckluZm8iLCJhcHByb3ZlZCIsInBheWxvYWQiLCJuZXdSZXF1ZXN0IiwiaW5pdGlhdGVUb3B1cCIsImZpYXRWYWx1ZSIsInNlbGVjdGVkQ3VycmVuY3kiLCJzZWxlY3RlZENyeXB0b0N1cnJlbmN5IiwiZmxhdCIsInVzZXJJbmZvIiwiX2NyZWF0ZVBvcHVwQmxvY2tBbGVydCIsIl9zZXRFbWJlZFdoaXRlTGFiZWwiLCJ0aGVtZSIsImlzRGFyayIsImNsYXNzTGlzdCIsInRvcnVzQnJhbmQxIiwidG9ydXNHcmF5MiIsIl9nZXRMb2dvVXJsIiwibG9nb0xpZ2h0IiwibG9nb0RhcmsiLCJ0b3AiLCJyaWdodCIsImxlZnQiLCJib3R0b20iLCJjb250ZW50V2luZG93IiwiX3Nob3dMb2dpblBvcHVwIiwiaXNMb2dpbkNhbGxiYWNrIiwiZGVsZXRlUHJvcGVydHkiLCJpY29uIiwiY2FsbGVkRnJvbUVtYmVkIl0sInNvdXJjZVJvb3QiOiIifQ==