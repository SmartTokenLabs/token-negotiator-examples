/*! For license information please see 578.6c8180ab.js.LICENSE.txt */
(self.webpackChunktoken_outlet_website = self.webpackChunktoken_outlet_website || []).push([ [ 578 ], {
  26578: (t, e, r) => {
    "use strict";
    r.r(e), r.d(e, {
      getWalletConnectProviderInstance: () => Ht
    });
    var n = {};
    r.r(n), r.d(n, {
      decrypt: () => Mt,
      encrypt: () => _t,
      generateKey: () => yt,
      verifyHmac: () => wt
    });
    var i = r(55522);
    const o = [ "session_request", "session_update", "exchange_key", "connect", "disconnect", "display_uri", "modal_closed", "transport_open", "transport_close", "transport_error" ];
    const a = [ "eth_sendTransaction", "eth_signTransaction", "eth_sign", "eth_signTypedData", "eth_signTypedData_v1", "eth_signTypedData_v2", "eth_signTypedData_v3", "eth_signTypedData_v4", "personal_sign", "wallet_addEthereumChain", "wallet_switchEthereumChain", "wallet_getPermissions", "wallet_requestPermissions", "wallet_registerOnboarding", "wallet_watchAsset", "wallet_scanQRCode" ];
    const s = {
      1: "mainnet",
      3: "ropsten",
      4: "rinkeby",
      5: "goerli",
      42: "kovan"
    };
    var u = r(11460);
    var h = r.n(u);
    r(4501);
    var l = r(65054);
    var c = r.n(l);
    var f = r(48764).Buffer;
    const d = "hex";
    const p = "utf8";
    const m = "0";
    function v(t) {
      return new Uint8Array(t);
    }
    function g(t, e = !1) {
      const r = t.toString(d);
      return e ? T(r) : r;
    }
    function y(t) {
      return t.toString(p);
    }
    function w(t) {
      return c()(t);
    }
    function _(t, e = !1) {
      return g(w(t), e);
    }
    function M(t) {
      return y(w(t));
    }
    function b(t) {
      return f.from(C(t), d);
    }
    function k(t) {
      return v(b(t));
    }
    function x(t) {
      return f.from(t, p);
    }
    function A(t) {
      return v(x(t));
    }
    function E(t, e) {
      return !("string" != typeof t || !t.match(/^0x[0-9A-Fa-f]*$/)) && (!e || t.length === 2 + 2 * e);
    }
    function S(...t) {
      let e = [];
      return t.forEach((t => e = e.concat(Array.from(t)))), new Uint8Array([ ...e ]);
    }
    function R(t, e = 8, r = "0") {
      return function(t, e, r = "0") {
        return L(t, e, !0, r);
      }(t, function(t, e = 8) {
        const r = t % e;
        return r ? (t - r) / e * e + e : t;
      }(t.length, e), r);
    }
    function C(t) {
      return t.replace(/^0x/, "");
    }
    function T(t) {
      return t.startsWith("0x") ? t : `0x${t}`;
    }
    function B(t) {
      return (t = R(t = C(t), 2)) && (t = T(t)), t;
    }
    function L(t, e, r, n = "0") {
      const i = e - t.length;
      let o = t;
      if (i > 0) {
        const e = n.repeat(i);
        o = r ? e + t : t + e;
      }
      return o;
    }
    function P(t) {
      return w(new Uint8Array(t));
    }
    function I(t, e) {
      return function(t, e = !1) {
        return g(x(t), e);
      }(t, !e);
    }
    function O(t, e) {
      const r = C(B(new (h())(t).toString(16)));
      return e ? r : T(r);
    }
    var N = r(91094);
    var U = r(1468);
    function q() {
      return Date.now() * Math.pow(10, 3) + Math.floor(Math.random() * Math.pow(10, 3));
    }
    r(25108);
    function j(t) {
      return B(t);
    }
    function K(t) {
      return function(t) {
        const e = t.startsWith("0x");
        return t = (t = C(t)).startsWith(m) ? t.substring(1) : t, e ? T(t) : t;
      }(T(t));
    }
    const H = q;
    function F() {
      return ((t, e) => {
        for (e = t = ""; t++ < 36; e += 51 * t & 52 ? (15 ^ t ? 8 ^ Math.random() * (20 ^ t ? 16 : 4) : 4).toString(16) : "-") ;
        return e;
      })();
    }
    function z(t, e) {
      let r;
      const n = function(t, e) {
        let r;
        const n = s[t];
        return n && (r = `https://${n}.infura.io/v3/${e}`), r;
      }(t, e.infuraId);
      return e.custom && e.custom[t] ? r = e.custom[t] : n && (r = n), r;
    }
    function D(t, e) {
      return E(t, e);
    }
    function Z(t) {
      return void 0 !== t.result;
    }
    function W(t) {
      return void 0 !== t.error;
    }
    function V(t) {
      return void 0 !== t.event;
    }
    function $(t) {
      t = C(t.toLowerCase());
      const e = C((0, N.keccak_256)(function(t) {
        return x(t);
      }(t)));
      let r = "";
      for (let n = 0; n < t.length; n++) parseInt(e[n], 16) > 7 ? r += t[n].toUpperCase() : r += t[n];
      return T(r);
    }
    function G(t) {
      return function(t) {
        return !(t && t.length);
      }(t) || D(t[0]) || (t[0] = I(t[0])), t;
    }
    function Y(t) {
      if (void 0 !== t.type && "0" !== t.type) return t;
      if (void 0 === t.from || !(t => !(!t || "0x" !== t.toLowerCase().substring(0, 2) || !/^(0x)?[0-9a-f]{40}$/i.test(t) || !/^(0x)?[0-9a-f]{40}$/.test(t) && !/^(0x)?[0-9A-F]{40}$/.test(t) && t !== $(t)))(t.from)) throw new Error("Transaction object must include a valid 'from' value.");
      function e(t) {
        let e = t;
        return ("number" == typeof t || "string" == typeof t && !function(t) {
          return "" === t || "string" == typeof t && "" === t.trim();
        }(t)) && (D(t) ? "string" == typeof t && (e = j(t)) : e = O(t)), "string" == typeof e && (e = K(e)), e;
      }
      const r = {
        from: j(t.from),
        to: void 0 === t.to ? void 0 : j(t.to),
        gasPrice: void 0 === t.gasPrice ? "" : e(t.gasPrice),
        gas: void 0 === t.gas ? void 0 === t.gasLimit ? "" : e(t.gasLimit) : e(t.gas),
        value: void 0 === t.value ? "" : e(t.value),
        nonce: void 0 === t.nonce ? "" : e(t.nonce),
        data: void 0 === t.data ? "" : j(t.data) || "0x"
      };
      const n = [ "gasPrice", "gas", "value", "nonce" ];
      return Object.keys(r).forEach((t => {
        (void 0 === r[t] || "string" == typeof r[t] && !r[t].trim().length) && n.includes(t) && delete r[t];
      })), r;
    }
    var J = r(17563);
    function Q(t, e) {
      let r = X(t);
      return r = Object.assign(Object.assign({}, r), e), t = function(t) {
        return J.stringify(t);
      }(r), t;
    }
    function X(t) {
      return J.parse(t);
    }
    const tt = class {
      constructor() {
        this._eventEmitters = [], "undefined" != typeof window && void 0 !== window.addEventListener && (window.addEventListener("online", (() => this.trigger("online"))), 
        window.addEventListener("offline", (() => this.trigger("offline"))));
      }
      on(t, e) {
        this._eventEmitters.push({
          event: t,
          callback: e
        });
      }
      trigger(t) {
        let e = [];
        t && (e = this._eventEmitters.filter((e => e.event === t))), e.forEach((t => {
          t.callback();
        }));
      }
    };
    const et = void 0 !== r.g.WebSocket ? r.g.WebSocket : r(57026);
    const rt = class {
      constructor(t) {
        if (this.opts = t, this._queue = [], this._events = [], this._subscriptions = [], this._protocol = t.protocol, this._version = t.version, 
        this._url = "", this._netMonitor = null, this._socket = null, this._nextSocket = null, this._subscriptions = t.subscriptions || [], 
        this._netMonitor = t.netMonitor || new tt, !t.url || "string" != typeof t.url) throw new Error("Missing or invalid WebSocket url");
        this._url = t.url, this._netMonitor.on("online", (() => this._socketCreate()));
      }
      set readyState(t) {}
      get readyState() {
        return this._socket ? this._socket.readyState : -1;
      }
      set connecting(t) {}
      get connecting() {
        return 0 === this.readyState;
      }
      set connected(t) {}
      get connected() {
        return 1 === this.readyState;
      }
      set closing(t) {}
      get closing() {
        return 2 === this.readyState;
      }
      set closed(t) {}
      get closed() {
        return 3 === this.readyState;
      }
      open() {
        this._socketCreate();
      }
      close() {
        this._socketClose();
      }
      send(t, e, r) {
        if (!e || "string" != typeof e) throw new Error("Missing or invalid topic field");
        this._socketSend({
          topic: e,
          type: "pub",
          payload: t,
          silent: !!r
        });
      }
      subscribe(t) {
        this._socketSend({
          topic: t,
          type: "sub",
          payload: "",
          silent: !0
        });
      }
      on(t, e) {
        this._events.push({
          event: t,
          callback: e
        });
      }
      _socketCreate() {
        if (this._nextSocket) return;
        const t = function(t, e, r) {
          var n, o;
          const a = (t.startsWith("https") ? t.replace("https", "wss") : t.startsWith("http") ? t.replace("http", "ws") : t).split("?");
          const s = (0, i.isBrowser)() ? {
            protocol: e,
            version: r,
            env: "browser",
            host: (null === (n = (0, i.getLocation)()) || void 0 === n ? void 0 : n.host) || ""
          } : {
            protocol: e,
            version: r,
            env: (null === (o = (0, i.detectEnv)()) || void 0 === o ? void 0 : o.name) || ""
          };
          const u = Q(function(t) {
            const e = -1 !== t.indexOf("?") ? t.indexOf("?") : void 0;
            return void 0 !== e ? t.substr(e) : "";
          }(a[1] || ""), s);
          return a[0] + "?" + u;
        }(this._url, this._protocol, this._version);
        if (this._nextSocket = new et(t), !this._nextSocket) throw new Error("Failed to create socket");
        this._nextSocket.onmessage = t => this._socketReceive(t), this._nextSocket.onopen = () => this._socketOpen(), this._nextSocket.onerror = t => this._socketError(t), 
        this._nextSocket.onclose = () => {
          setTimeout((() => {
            this._nextSocket = null, this._socketCreate();
          }), 1e3);
        };
      }
      _socketOpen() {
        this._socketClose(), this._socket = this._nextSocket, this._nextSocket = null, this._queueSubscriptions(), this._pushQueue();
      }
      _socketClose() {
        this._socket && (this._socket.onclose = () => {}, this._socket.close());
      }
      _socketSend(t) {
        const e = JSON.stringify(t);
        this._socket && 1 === this._socket.readyState ? this._socket.send(e) : (this._setToQueue(t), this._socketCreate());
      }
      async _socketReceive(t) {
        let e;
        try {
          e = JSON.parse(t.data);
        } catch (r) {
          return;
        }
        if (this._socketSend({
          topic: e.topic,
          type: "ack",
          payload: "",
          silent: !0
        }), this._socket && 1 === this._socket.readyState) {
          const t = this._events.filter((t => "message" === t.event));
          t && t.length && t.forEach((t => t.callback(e)));
        }
      }
      _socketError(t) {
        const e = this._events.filter((t => "error" === t.event));
        e && e.length && e.forEach((e => e.callback(t)));
      }
      _queueSubscriptions() {
        this._subscriptions.forEach((t => this._queue.push({
          topic: t,
          type: "sub",
          payload: "",
          silent: !0
        }))), this._subscriptions = this.opts.subscriptions || [];
      }
      _setToQueue(t) {
        this._queue.push(t);
      }
      _pushQueue() {
        this._queue.forEach((t => this._socketSend(t))), this._queue = [];
      }
    };
    const nt = "Session currently connected";
    const it = "Session currently disconnected";
    const ot = "JSON RPC response format is invalid";
    const at = "User close QRCode Modal";
    const st = class {
      constructor() {
        this._eventEmitters = [];
      }
      subscribe(t) {
        this._eventEmitters.push(t);
      }
      unsubscribe(t) {
        this._eventEmitters = this._eventEmitters.filter((e => e.event !== t));
      }
      trigger(t) {
        let e = [];
        let r;
        r = function(t) {
          return void 0 !== t.method;
        }(t) ? t.method : Z(t) || W(t) ? `response:${t.id}` : V(t) ? t.event : "", r && (e = this._eventEmitters.filter((t => t.event === r))), 
        e && e.length || function(t) {
          return o.includes(t) || t.startsWith("wc_");
        }(r) || V(r) || (e = this._eventEmitters.filter((t => "call_request" === t.event))), e.forEach((e => {
          if (W(t)) {
            const r = new Error(t.error.message);
            e.callback(r, null);
          } else e.callback(null, t);
        }));
      }
    };
    const ut = class {
      constructor(t = "walletconnect") {
        this.storageId = t;
      }
      getSession() {
        let t = null;
        const e = (0, i.getLocal)(this.storageId);
        return e && function(t) {
          return void 0 !== t.bridge;
        }(e) && (t = e), t;
      }
      setSession(t) {
        return (0, i.setLocal)(this.storageId, t), t;
      }
      removeSession() {
        (0, i.removeLocal)(this.storageId);
      }
    };
    const ht = "abcdefghijklmnopqrstuvwxyz0123456789".split("").map((t => `https://${t}.bridge.walletconnect.org`));
    function lt() {
      return ht[function() {
        return Math.floor(Math.random() * ht.length);
      }()];
    }
    const ct = class {
      constructor(t) {
        if (this.protocol = "wc", this.version = 1, this._bridge = "", this._key = null, this._clientId = "", this._clientMeta = null, 
        this._peerId = "", this._peerMeta = null, this._handshakeId = 0, this._handshakeTopic = "", this._connected = !1, this._accounts = [], 
        this._chainId = 0, this._networkId = 0, this._rpcUrl = "", this._eventManager = new st, this._clientMeta = (0, i.getClientMeta)() || t.connectorOpts.clientMeta || null, 
        this._cryptoLib = t.cryptoLib, this._sessionStorage = t.sessionStorage || new ut(t.connectorOpts.storageId), this._qrcodeModal = t.connectorOpts.qrcodeModal, 
        this._qrcodeModalOptions = t.connectorOpts.qrcodeModalOptions, this._signingMethods = [ ...a, ...t.connectorOpts.signingMethods || [] ], 
        !t.connectorOpts.bridge && !t.connectorOpts.uri && !t.connectorOpts.session) throw new Error("Missing one of the required parameters: bridge / uri / session");
        t.connectorOpts.bridge && (this.bridge = function(t) {
          return function(t) {
            return "walletconnect.org" === function(t) {
              return function(t) {
                let e = t.indexOf("//") > -1 ? t.split("/")[2] : t.split("/")[0];
                return e = e.split(":")[0], e = e.split("?")[0], e;
              }(t).split(".").slice(-2).join(".");
            }(t);
          }(t) ? lt() : t;
        }(t.connectorOpts.bridge)), t.connectorOpts.uri && (this.uri = t.connectorOpts.uri);
        const e = t.connectorOpts.session || this._getStorageSession();
        e && (this.session = e), this.handshakeId && this._subscribeToSessionResponse(this.handshakeId, "Session request rejected"), 
        this._transport = t.transport || new rt({
          protocol: this.protocol,
          version: this.version,
          url: this.bridge,
          subscriptions: [ this.clientId ]
        }), this._subscribeToInternalEvents(), this._initTransport(), t.connectorOpts.uri && this._subscribeToSessionRequest(), 
        t.pushServerOpts && this._registerPushServer(t.pushServerOpts);
      }
      set bridge(t) {
        t && (this._bridge = t);
      }
      get bridge() {
        return this._bridge;
      }
      set key(t) {
        if (!t) return;
        const e = function(t) {
          return k(t).buffer;
        }(t);
        this._key = e;
      }
      get key() {
        if (this._key) {
          return function(t, e) {
            return _(new Uint8Array(t), !e);
          }(this._key, !0);
        }
        return "";
      }
      set clientId(t) {
        t && (this._clientId = t);
      }
      get clientId() {
        let t = this._clientId;
        return t || (t = this._clientId = F()), this._clientId;
      }
      set peerId(t) {
        t && (this._peerId = t);
      }
      get peerId() {
        return this._peerId;
      }
      set clientMeta(t) {}
      get clientMeta() {
        let t = this._clientMeta;
        return t || (t = this._clientMeta = (0, i.getClientMeta)()), t;
      }
      set peerMeta(t) {
        this._peerMeta = t;
      }
      get peerMeta() {
        return this._peerMeta;
      }
      set handshakeTopic(t) {
        t && (this._handshakeTopic = t);
      }
      get handshakeTopic() {
        return this._handshakeTopic;
      }
      set handshakeId(t) {
        t && (this._handshakeId = t);
      }
      get handshakeId() {
        return this._handshakeId;
      }
      get uri() {
        return this._formatUri();
      }
      set uri(t) {
        if (!t) return;
        const {handshakeTopic: e, bridge: r, key: n} = this._parseUri(t);
        this.handshakeTopic = e, this.bridge = r, this.key = n;
      }
      set chainId(t) {
        this._chainId = t;
      }
      get chainId() {
        return this._chainId;
      }
      set networkId(t) {
        this._networkId = t;
      }
      get networkId() {
        return this._networkId;
      }
      set accounts(t) {
        this._accounts = t;
      }
      get accounts() {
        return this._accounts;
      }
      set rpcUrl(t) {
        this._rpcUrl = t;
      }
      get rpcUrl() {
        return this._rpcUrl;
      }
      set connected(t) {}
      get connected() {
        return this._connected;
      }
      set pending(t) {}
      get pending() {
        return !!this._handshakeTopic;
      }
      get session() {
        return {
          connected: this.connected,
          accounts: this.accounts,
          chainId: this.chainId,
          bridge: this.bridge,
          key: this.key,
          clientId: this.clientId,
          clientMeta: this.clientMeta,
          peerId: this.peerId,
          peerMeta: this.peerMeta,
          handshakeId: this.handshakeId,
          handshakeTopic: this.handshakeTopic
        };
      }
      set session(t) {
        t && (this._connected = t.connected, this.accounts = t.accounts, this.chainId = t.chainId, this.bridge = t.bridge, this.key = t.key, 
        this.clientId = t.clientId, this.clientMeta = t.clientMeta, this.peerId = t.peerId, this.peerMeta = t.peerMeta, this.handshakeId = t.handshakeId, 
        this.handshakeTopic = t.handshakeTopic);
      }
      on(t, e) {
        const r = {
          event: t,
          callback: e
        };
        this._eventManager.subscribe(r);
      }
      off(t) {
        this._eventManager.unsubscribe(t);
      }
      async createInstantRequest(t) {
        this._key = await this._generateKey();
        const e = this._formatRequest({
          method: "wc_instantRequest",
          params: [ {
            peerId: this.clientId,
            peerMeta: this.clientMeta,
            request: this._formatRequest(t)
          } ]
        });
        this.handshakeId = e.id, this.handshakeTopic = F(), this._eventManager.trigger({
          event: "display_uri",
          params: [ this.uri ]
        }), this.on("modal_closed", (() => {
          throw new Error(at);
        }));
        const r = () => {
          this.killSession();
        };
        try {
          const t = await this._sendCallRequest(e);
          return t && r(), t;
        } catch (n) {
          throw r(), n;
        }
      }
      async connect(t) {
        if (!this._qrcodeModal) throw new Error("QRCode Modal not provided");
        return this.connected ? {
          chainId: this.chainId,
          accounts: this.accounts
        } : (await this.createSession(t), new Promise((async (t, e) => {
          this.on("modal_closed", (() => e(new Error(at)))), this.on("connect", ((r, n) => {
            if (r) return e(r);
            t(n.params[0]);
          }));
        })));
      }
      async createSession(t) {
        if (this._connected) throw new Error(nt);
        if (this.pending) return;
        this._key = await this._generateKey();
        const e = this._formatRequest({
          method: "wc_sessionRequest",
          params: [ {
            peerId: this.clientId,
            peerMeta: this.clientMeta,
            chainId: t && t.chainId ? t.chainId : null
          } ]
        });
        this.handshakeId = e.id, this.handshakeTopic = F(), this._sendSessionRequest(e, "Session update rejected", {
          topic: this.handshakeTopic
        }), this._eventManager.trigger({
          event: "display_uri",
          params: [ this.uri ]
        });
      }
      approveSession(t) {
        if (this._connected) throw new Error(nt);
        this.chainId = t.chainId, this.accounts = t.accounts, this.networkId = t.networkId || 0, this.rpcUrl = t.rpcUrl || "";
        const e = {
          approved: !0,
          chainId: this.chainId,
          networkId: this.networkId,
          accounts: this.accounts,
          rpcUrl: this.rpcUrl,
          peerId: this.clientId,
          peerMeta: this.clientMeta
        };
        const r = {
          id: this.handshakeId,
          jsonrpc: "2.0",
          result: e
        };
        this._sendResponse(r), this._connected = !0, this._setStorageSession(), this._eventManager.trigger({
          event: "connect",
          params: [ {
            peerId: this.peerId,
            peerMeta: this.peerMeta,
            chainId: this.chainId,
            accounts: this.accounts
          } ]
        });
      }
      rejectSession(t) {
        if (this._connected) throw new Error(nt);
        const e = t && t.message ? t.message : "Session Rejected";
        const r = this._formatResponse({
          id: this.handshakeId,
          error: {
            message: e
          }
        });
        this._sendResponse(r), this._connected = !1, this._eventManager.trigger({
          event: "disconnect",
          params: [ {
            message: e
          } ]
        }), this._removeStorageSession();
      }
      updateSession(t) {
        if (!this._connected) throw new Error(it);
        this.chainId = t.chainId, this.accounts = t.accounts, this.networkId = t.networkId || 0, this.rpcUrl = t.rpcUrl || "";
        const e = {
          approved: !0,
          chainId: this.chainId,
          networkId: this.networkId,
          accounts: this.accounts,
          rpcUrl: this.rpcUrl
        };
        const r = this._formatRequest({
          method: "wc_sessionUpdate",
          params: [ e ]
        });
        this._sendSessionRequest(r, "Session update rejected"), this._eventManager.trigger({
          event: "session_update",
          params: [ {
            chainId: this.chainId,
            accounts: this.accounts
          } ]
        }), this._manageStorageSession();
      }
      async killSession(t) {
        const e = t ? t.message : "Session Disconnected";
        const r = this._formatRequest({
          method: "wc_sessionUpdate",
          params: [ {
            approved: !1,
            chainId: null,
            networkId: null,
            accounts: null
          } ]
        });
        await this._sendRequest(r), this._handleSessionDisconnect(e);
      }
      async sendTransaction(t) {
        if (!this._connected) throw new Error(it);
        const e = Y(t);
        const r = this._formatRequest({
          method: "eth_sendTransaction",
          params: [ e ]
        });
        return await this._sendCallRequest(r);
      }
      async signTransaction(t) {
        if (!this._connected) throw new Error(it);
        const e = Y(t);
        const r = this._formatRequest({
          method: "eth_signTransaction",
          params: [ e ]
        });
        return await this._sendCallRequest(r);
      }
      async signMessage(t) {
        if (!this._connected) throw new Error(it);
        const e = this._formatRequest({
          method: "eth_sign",
          params: t
        });
        return await this._sendCallRequest(e);
      }
      async signPersonalMessage(t) {
        if (!this._connected) throw new Error(it);
        t = G(t);
        const e = this._formatRequest({
          method: "personal_sign",
          params: t
        });
        return await this._sendCallRequest(e);
      }
      async signTypedData(t) {
        if (!this._connected) throw new Error(it);
        const e = this._formatRequest({
          method: "eth_signTypedData",
          params: t
        });
        return await this._sendCallRequest(e);
      }
      async updateChain(t) {
        if (!this._connected) throw new Error("Session currently disconnected");
        const e = this._formatRequest({
          method: "wallet_updateChain",
          params: [ t ]
        });
        return await this._sendCallRequest(e);
      }
      unsafeSend(t, e) {
        return this._sendRequest(t, e), this._eventManager.trigger({
          event: "call_request_sent",
          params: [ {
            request: t,
            options: e
          } ]
        }), new Promise(((e, r) => {
          this._subscribeToResponse(t.id, ((t, n) => {
            if (t) r(t); else {
              if (!n) throw new Error("Missing JSON RPC response");
              e(n);
            }
          }));
        }));
      }
      async sendCustomRequest(t, e) {
        if (!this._connected) throw new Error(it);
        switch (t.method) {
         case "eth_accounts":
          return this.accounts;

         case "eth_chainId":
          return O(this.chainId);

         case "eth_sendTransaction":
         case "eth_signTransaction":
          t.params && (t.params[0] = Y(t.params[0]));
          break;

         case "personal_sign":
          t.params && (t.params = G(t.params));
        }
        const r = this._formatRequest(t);
        return await this._sendCallRequest(r, e);
      }
      approveRequest(t) {
        if (!Z(t)) throw new Error("JSON-RPC success response must include \"result\" field");
        {
          const e = this._formatResponse(t);
          this._sendResponse(e);
        }
      }
      rejectRequest(t) {
        if (!W(t)) throw new Error("JSON-RPC error response must include \"error\" field");
        {
          const e = this._formatResponse(t);
          this._sendResponse(e);
        }
      }
      transportClose() {
        this._transport.close();
      }
      async _sendRequest(t, e) {
        const r = this._formatRequest(t);
        const n = await this._encrypt(r);
        const i = void 0 !== (null == e ? void 0 : e.topic) ? e.topic : this.peerId;
        const o = JSON.stringify(n);
        const s = void 0 !== (null == e ? void 0 : e.forcePushNotification) ? !e.forcePushNotification : function(t) {
          return !!t.method.startsWith("wc_") || !a.includes(t.method);
        }(r);
        this._transport.send(o, i, s);
      }
      async _sendResponse(t) {
        const e = await this._encrypt(t);
        const r = this.peerId;
        const n = JSON.stringify(e);
        this._transport.send(n, r, !0);
      }
      async _sendSessionRequest(t, e, r) {
        this._sendRequest(t, r), this._subscribeToSessionResponse(t.id, e);
      }
      _sendCallRequest(t, e) {
        return this._sendRequest(t, e), this._eventManager.trigger({
          event: "call_request_sent",
          params: [ {
            request: t,
            options: e
          } ]
        }), this._subscribeToCallResponse(t.id);
      }
      _formatRequest(t) {
        if (void 0 === t.method) throw new Error("JSON RPC request must have valid \"method\" value");
        return {
          id: void 0 === t.id ? H() : t.id,
          jsonrpc: "2.0",
          method: t.method,
          params: void 0 === t.params ? [] : t.params
        };
      }
      _formatResponse(t) {
        if (void 0 === t.id) throw new Error("JSON RPC request must have valid \"id\" value");
        const e = {
          id: t.id,
          jsonrpc: "2.0"
        };
        if (W(t)) {
          const r = function(t) {
            const e = t.message || "Failed or Rejected Request";
            let r = -32e3;
            if (t && !t.code) switch (e) {
             case "Parse error":
              r = -32700;
              break;

             case "Invalid request":
              r = -32600;
              break;

             case "Method not found":
              r = -32601;
              break;

             case "Invalid params":
              r = -32602;
              break;

             case "Internal error":
              r = -32603;
              break;

             default:
              r = -32e3;
            }
            return {
              code: r,
              message: e
            };
          }(t.error);
          return Object.assign(Object.assign(Object.assign({}, e), t), {
            error: r
          });
        }
        if (Z(t)) {
          return Object.assign(Object.assign({}, e), t);
        }
        throw new Error(ot);
      }
      _handleSessionDisconnect(t) {
        const e = t || "Session Disconnected";
        this._connected || (this._qrcodeModal && this._qrcodeModal.close(), (0, i.removeLocal)(i.mobileLinkChoiceKey)), this._connected && (this._connected = !1), 
        this._handshakeId && (this._handshakeId = 0), this._handshakeTopic && (this._handshakeTopic = ""), this._peerId && (this._peerId = ""), 
        this._eventManager.trigger({
          event: "disconnect",
          params: [ {
            message: e
          } ]
        }), this._removeStorageSession(), this.transportClose();
      }
      _handleSessionResponse(t, e) {
        e && e.approved ? (this._connected ? (e.chainId && (this.chainId = e.chainId), e.accounts && (this.accounts = e.accounts), 
        this._eventManager.trigger({
          event: "session_update",
          params: [ {
            chainId: this.chainId,
            accounts: this.accounts
          } ]
        })) : (this._connected = !0, e.chainId && (this.chainId = e.chainId), e.accounts && (this.accounts = e.accounts), e.peerId && !this.peerId && (this.peerId = e.peerId), 
        e.peerMeta && !this.peerMeta && (this.peerMeta = e.peerMeta), this._eventManager.trigger({
          event: "connect",
          params: [ {
            peerId: this.peerId,
            peerMeta: this.peerMeta,
            chainId: this.chainId,
            accounts: this.accounts
          } ]
        })), this._manageStorageSession()) : this._handleSessionDisconnect(t);
      }
      async _handleIncomingMessages(t) {
        if (![ this.clientId, this.handshakeTopic ].includes(t.topic)) return;
        let e;
        try {
          e = JSON.parse(t.payload);
        } catch (n) {
          return;
        }
        const r = await this._decrypt(e);
        r && this._eventManager.trigger(r);
      }
      _subscribeToSessionRequest() {
        this._transport.subscribe(this.handshakeTopic);
      }
      _subscribeToResponse(t, e) {
        this.on(`response:${t}`, e);
      }
      _subscribeToSessionResponse(t, e) {
        this._subscribeToResponse(t, ((t, r) => {
          t ? this._handleSessionResponse(t.message) : Z(r) ? this._handleSessionResponse(e, r.result) : r.error && r.error.message ? this._handleSessionResponse(r.error.message) : this._handleSessionResponse(e);
        }));
      }
      _subscribeToCallResponse(t) {
        return new Promise(((e, r) => {
          this._subscribeToResponse(t, ((t, n) => {
            t ? r(t) : Z(n) ? e(n.result) : n.error && n.error.message ? r(new Error(n.error.message)) : r(new Error(ot));
          }));
        }));
      }
      _subscribeToInternalEvents() {
        this.on("display_uri", (() => {
          this._qrcodeModal && this._qrcodeModal.open(this.uri, (() => {
            this._eventManager.trigger({
              event: "modal_closed",
              params: []
            });
          }), this._qrcodeModalOptions);
        })), this.on("connect", (() => {
          this._qrcodeModal && this._qrcodeModal.close();
        })), this.on("call_request_sent", ((t, e) => {
          const {request: r} = e.params[0];
          if ((0, i.isMobile)() && this._signingMethods.includes(r.method)) {
            const t = (0, i.getLocal)(i.mobileLinkChoiceKey);
            t && (window.location.href = t.href);
          }
        })), this.on("wc_sessionRequest", ((t, e) => {
          t && this._eventManager.trigger({
            event: "error",
            params: [ {
              code: "SESSION_REQUEST_ERROR",
              message: t.toString()
            } ]
          }), this.handshakeId = e.id, this.peerId = e.params[0].peerId, this.peerMeta = e.params[0].peerMeta;
          const r = Object.assign(Object.assign({}, e), {
            method: "session_request"
          });
          this._eventManager.trigger(r);
        })), this.on("wc_sessionUpdate", ((t, e) => {
          t && this._handleSessionResponse(t.message), this._handleSessionResponse("Session disconnected", e.params[0]);
        }));
      }
      _initTransport() {
        this._transport.on("message", (t => this._handleIncomingMessages(t))), this._transport.on("open", (() => this._eventManager.trigger({
          event: "transport_open",
          params: []
        }))), this._transport.on("close", (() => this._eventManager.trigger({
          event: "transport_close",
          params: []
        }))), this._transport.on("error", (() => this._eventManager.trigger({
          event: "transport_error",
          params: [ "Websocket connection failed" ]
        }))), this._transport.open();
      }
      _formatUri() {
        return `${this.protocol}:${this.handshakeTopic}@${this.version}?bridge=${encodeURIComponent(this.bridge)}&key=${this.key}`;
      }
      _parseUri(t) {
        const e = function(t) {
          const e = t.indexOf(":");
          const r = -1 !== t.indexOf("?") ? t.indexOf("?") : void 0;
          const n = t.substring(0, e);
          const i = function(t) {
            const e = t.split("@");
            return {
              handshakeTopic: e[0],
              version: parseInt(e[1], 10)
            };
          }(t.substring(e + 1, r));
          const o = function(t) {
            const e = X(t);
            return {
              key: e.key || "",
              bridge: e.bridge || ""
            };
          }(void 0 !== r ? t.substr(r) : "");
          return Object.assign(Object.assign({
            protocol: n
          }, i), o);
        }(t);
        if (e.protocol === this.protocol) {
          if (!e.handshakeTopic) throw Error("Invalid or missing handshakeTopic parameter value");
          const t = e.handshakeTopic;
          if (!e.bridge) throw Error("Invalid or missing bridge url parameter value");
          const r = decodeURIComponent(e.bridge);
          if (!e.key) throw Error("Invalid or missing key parameter value");
          return {
            handshakeTopic: t,
            bridge: r,
            key: e.key
          };
        }
        throw new Error("URI format is invalid");
      }
      async _generateKey() {
        if (this._cryptoLib) {
          return await this._cryptoLib.generateKey();
        }
        return null;
      }
      async _encrypt(t) {
        const e = this._key;
        if (this._cryptoLib && e) {
          return await this._cryptoLib.encrypt(t, e);
        }
        return null;
      }
      async _decrypt(t) {
        const e = this._key;
        if (this._cryptoLib && e) {
          return await this._cryptoLib.decrypt(t, e);
        }
        return null;
      }
      _getStorageSession() {
        let t = null;
        return this._sessionStorage && (t = this._sessionStorage.getSession()), t;
      }
      _setStorageSession() {
        this._sessionStorage && this._sessionStorage.setSession(this.session);
      }
      _removeStorageSession() {
        this._sessionStorage && this._sessionStorage.removeSession();
      }
      _manageStorageSession() {
        this._connected ? this._setStorageSession() : this._removeStorageSession();
      }
      _registerPushServer(t) {
        if (!t.url || "string" != typeof t.url) throw Error("Invalid or missing pushServerOpts.url parameter value");
        if (!t.type || "string" != typeof t.type) throw Error("Invalid or missing pushServerOpts.type parameter value");
        if (!t.token || "string" != typeof t.token) throw Error("Invalid or missing pushServerOpts.token parameter value");
        const e = {
          bridge: this.bridge,
          topic: this.clientId,
          type: t.type,
          token: t.token,
          peerName: "",
          language: t.language || ""
        };
        this.on("connect", (async (r, n) => {
          if (r) throw r;
          if (t.peerMeta) {
            const t = n.params[0].peerMeta.name;
            e.peerName = t;
          }
          try {
            const r = await fetch(`${t.url}/new`, {
              method: "POST",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify(e)
            });
            if (!(await r.json()).success) throw Error("Failed to register in Push Server");
          } catch (r) {
            throw Error("Failed to register in Push Server");
          }
        }));
      }
    };
    const ft = "AES-CBC";
    const dt = "HMAC";
    async function pt(t, e = "AES-CBC") {
      return U.getSubtleCrypto().importKey("raw", t, function(t) {
        return t === ft ? {
          length: 256,
          name: ft
        } : {
          hash: {
            name: "SHA-256"
          },
          name: dt
        };
      }(e), !0, function(t) {
        return t === ft ? [ "encrypt", "decrypt" ] : [ "sign", "verify" ];
      }(e));
    }
    function mt(t, e, r) {
      return async function(t, e, r) {
        const n = U.getSubtleCrypto();
        const i = await pt(e, ft);
        const o = await n.encrypt({
          iv: t,
          name: ft
        }, i, r);
        return new Uint8Array(o);
      }(t, e, r);
    }
    function vt(t, e, r) {
      return async function(t, e, r) {
        const n = U.getSubtleCrypto();
        const i = await pt(e, ft);
        const o = await n.decrypt({
          iv: t,
          name: ft
        }, i, r);
        return new Uint8Array(o);
      }(t, e, r);
    }
    async function gt(t, e) {
      const r = await async function(t, e) {
        const r = U.getSubtleCrypto();
        const n = await pt(t, dt);
        const i = await r.sign({
          length: 256,
          name: dt
        }, n, e);
        return new Uint8Array(i);
      }(t, e);
      return r;
    }
    async function yt(t) {
      const e = function(t) {
        return U.getBrowerCrypto().getRandomValues(new Uint8Array(t));
      }((t || 256) / 8);
      return function(t) {
        return v(t).buffer;
      }(w(e));
    }
    async function wt(t, e) {
      const r = k(t.data);
      const n = k(t.iv);
      const i = _(k(t.hmac), !1);
      const o = S(r, n);
      const a = _(await gt(e, o), !1);
      return C(i) === C(a);
    }
    async function _t(t, e, r) {
      const n = v(P(e));
      const i = v(P(r || await yt(128)));
      const o = _(i, !1);
      const a = A(JSON.stringify(t));
      const s = await mt(i, n, a);
      const u = _(s, !1);
      const h = S(s, i);
      return {
        data: u,
        hmac: _(await gt(n, h), !1),
        iv: o
      };
    }
    async function Mt(t, e) {
      const r = v(P(e));
      if (!r) throw new Error("Missing key: required for decryption");
      if (!await wt(t, r)) return null;
      const n = k(t.data);
      const i = k(t.iv);
      const o = M(await vt(i, r, n));
      let a;
      try {
        a = JSON.parse(o);
      } catch (s) {
        return null;
      }
      return a;
    }
    const bt = class extends ct {
      constructor(t, e) {
        super({
          cryptoLib: n,
          connectorOpts: t,
          pushServerOpts: e
        });
      }
    };
    var kt = r(4337);
    var xt = r.n(kt);
    var At = r(26729);
    var Et = r.n(At);
    var St = r(59536);
    const Rt = (0, i.getFromWindow)("XMLHttpRequest") || St.XMLHttpRequest;
    class Ct extends(Et()){
      constructor(t) {
        super(), this.url = t;
      }
      formatError(t, e, r = -1) {
        return {
          error: {
            message: e,
            code: r
          },
          id: t.id,
          jsonrpc: t.jsonrpc
        };
      }
      send(t, e) {
        return new Promise((r => {
          if ("eth_subscribe" === t.method) {
            const e = this.formatError(t, "Subscriptions are not supported by this HTTP endpoint");
            return this.emit("error", e), r(e);
          }
          const n = new Rt;
          let i = !1;
          const o = (o, a) => {
            if (!i) if (n.abort(), i = !0, e) e(o, a); else {
              const {id: e, jsonrpc: n} = t;
              const i = o ? {
                id: e,
                jsonrpc: n,
                error: {
                  message: o.message,
                  code: o.code
                }
              } : {
                id: e,
                jsonrpc: n,
                result: a
              };
              this.emit("payload", i), r(i);
            }
          };
          n.open("POST", this.url, !0), n.setRequestHeader("Content-Type", "application/json"), n.timeout = 6e4, n.onerror = o, n.ontimeout = o, 
          n.onreadystatechange = () => {
            if (4 === n.readyState) try {
              const t = JSON.parse(n.responseText);
              o(t.error, t.result);
            } catch (t) {
              o(t);
            }
          }, n.send(JSON.stringify(t));
        }));
      }
    }
    const Tt = Ct;
    const Bt = r(12906);
    const Lt = r(41955);
    const Pt = r(2110);
    const It = r(28260);
    const Ot = r(78747);
    const Nt = r(3621);
    const Ut = r(78191);
    const qt = class extends Bt {
      constructor(t) {
        if (super({
          pollingInterval: t.pollingInterval || 8e3
        }), this.bridge = "https://bridge.walletconnect.org", this.qrcode = !0, this.qrcodeModal = xt(), this.qrcodeModalOptions = void 0, 
        this.rpc = null, this.infuraId = "", this.http = null, this.isConnecting = !1, this.connected = !1, this.connectCallbacks = [], 
        this.accounts = [], this.chainId = 1, this.rpcUrl = "", this.enable = async () => {
          const t = await this.getWalletConnector();
          if (t) return this.start(), this.subscribeWalletConnector(), t.accounts;
          throw new Error("Failed to connect to WalleConnect");
        }, this.request = async t => this.send(t), this.send = async (t, e) => {
          if ("string" == typeof t) {
            const r = t;
            let n = e;
            return "personal_sign" === r && (n = G(n)), this.sendAsyncPromise(r, n);
          }
          if ("personal_sign" === (t = Object.assign({
            id: H(),
            jsonrpc: "2.0"
          }, t)).method && (t.params = G(t.params)), !e) return this.sendAsyncPromise(t.method, t.params);
          this.sendAsync(t, e);
        }, this.onConnect = t => {
          this.connectCallbacks.push(t);
        }, this.triggerConnect = t => {
          this.connectCallbacks && this.connectCallbacks.length && this.connectCallbacks.forEach((e => e(t)));
        }, this.bridge = t.connector ? t.connector.bridge : t.bridge || "https://bridge.walletconnect.org", this.qrcode = void 0 === t.qrcode || !1 !== t.qrcode, 
        this.qrcodeModal = t.qrcodeModal || this.qrcodeModal, this.qrcodeModalOptions = t.qrcodeModalOptions, this.wc = t.connector || new bt({
          bridge: this.bridge,
          qrcodeModal: this.qrcode ? this.qrcodeModal : void 0,
          qrcodeModalOptions: this.qrcodeModalOptions,
          storageId: null == t ? void 0 : t.storageId,
          signingMethods: null == t ? void 0 : t.signingMethods,
          clientMeta: null == t ? void 0 : t.clientMeta
        }), this.rpc = t.rpc || null, !(this.rpc || t.infuraId && "string" == typeof t.infuraId && t.infuraId.trim())) throw new Error("Missing one of the required parameters: rpc or infuraId");
        this.infuraId = t.infuraId || "", this.chainId = (null == t ? void 0 : t.chainId) || this.chainId, this.initialize();
      }
      get isWalletConnect() {
        return !0;
      }
      get connector() {
        return this.wc;
      }
      get walletMeta() {
        return this.wc.peerMeta;
      }
      async disconnect() {
        this.close();
      }
      async close() {
        const t = await this.getWalletConnector({
          disableSessionCreation: !0
        });
        await t.killSession(), await this.onDisconnect();
      }
      async handleRequest(t) {
        try {
          let e;
          let r = null;
          const n = await this.getWalletConnector();
          switch (t.method) {
           case "wc_killSession":
            await this.close(), r = null;
            break;

           case "eth_accounts":
            r = n.accounts;
            break;

           case "eth_coinbase":
            r = n.accounts[0];
            break;

           case "eth_chainId":
           case "net_version":
            r = n.chainId;
            break;

           case "eth_uninstallFilter":
            this.sendAsync(t, (t => t)), r = !0;
            break;

           default:
            e = await this.handleOtherRequests(t);
          }
          return e || this.formatResponse(t, r);
        } catch (e) {
          throw this.emit("error", e), e;
        }
      }
      async handleOtherRequests(t) {
        if (!a.includes(t.method) && t.method.startsWith("eth_")) return this.handleReadRequests(t);
        const e = await this.getWalletConnector();
        const r = await e.sendCustomRequest(t);
        return this.formatResponse(t, r);
      }
      async handleReadRequests(t) {
        if (!this.http) {
          const t = new Error("HTTP Connection not available");
          throw this.emit("error", t), t;
        }
        return this.http.send(t);
      }
      formatResponse(t, e) {
        return {
          id: t.id,
          jsonrpc: t.jsonrpc,
          result: e
        };
      }
      getWalletConnector(t = {}) {
        const {disableSessionCreation: e = !1} = t;
        return new Promise(((t, r) => {
          const n = this.wc;
          this.isConnecting ? this.onConnect((e => t(e))) : n.connected || e ? (this.connected || (this.connected = !0, this.updateState(n.session)), 
          t(n)) : (this.isConnecting = !0, n.on("modal_closed", (() => {
            r(new Error("User closed modal"));
          })), n.createSession({
            chainId: this.chainId
          }).then((() => {
            n.on("connect", ((e, i) => {
              if (e) return this.isConnecting = !1, r(e);
              this.isConnecting = !1, this.connected = !0, i && this.updateState(i.params[0]), this.emit("connect"), this.triggerConnect(n), 
              t(n);
            }));
          })).catch((t => {
            this.isConnecting = !1, r(t);
          })));
        }));
      }
      async subscribeWalletConnector() {
        const t = await this.getWalletConnector();
        t.on("disconnect", (t => {
          t ? this.emit("error", t) : this.onDisconnect();
        })), t.on("session_update", ((t, e) => {
          t ? this.emit("error", t) : this.updateState(e.params[0]);
        }));
      }
      async onDisconnect() {
        await this.stop(), this.emit("close", 1e3, "Connection closed"), this.emit("disconnect", 1e3, "Connection disconnected"), 
        this.connected = !1;
      }
      async updateState(t) {
        const {accounts: e, chainId: r, networkId: n, rpcUrl: i} = t;
        (!this.accounts || e && this.accounts !== e) && (this.accounts = e, this.emit("accountsChanged", e)), (!this.chainId || r && this.chainId !== r) && (this.chainId = r, 
        this.emit("chainChanged", r)), (!this.networkId || n && this.networkId !== n) && (this.networkId = n, this.emit("networkChanged", n)), 
        this.updateRpcUrl(this.chainId, i || "");
      }
      updateRpcUrl(t, e = "") {
        const r = {
          infuraId: this.infuraId,
          custom: this.rpc || void 0
        };
        (e = e || z(t, r)) ? (this.rpcUrl = e, this.updateHttpConnection()) : this.emit("error", new Error(`No RPC Url available for chainId: ${t}`));
      }
      updateHttpConnection() {
        this.rpcUrl && (this.http = new Tt(this.rpcUrl), this.http.on("payload", (t => this.emit("payload", t))), this.http.on("error", (t => this.emit("error", t))));
      }
      sendAsyncPromise(t, e) {
        return new Promise(((r, n) => {
          this.sendAsync({
            id: H(),
            jsonrpc: "2.0",
            method: t,
            params: e || []
          }, ((t, e) => {
            t ? n(t) : r(e.result);
          }));
        }));
      }
      initialize() {
        this.updateRpcUrl(this.chainId), this.addProvider(new Pt({
          eth_hashrate: "0x00",
          eth_mining: !1,
          eth_syncing: !0,
          net_listening: !0,
          web3_clientVersion: "WalletConnect/v1.x.x/javascript"
        })), this.addProvider(new Lt), this.addProvider(new Ut), this.addProvider(new It), this.addProvider(new Nt), this.addProvider(new Ot(this.configWallet())), 
        this.addProvider({
          handleRequest: async (t, e, r) => {
            try {
              const {error: e, result: n} = await this.handleRequest(t);
              r(e, n);
            } catch (n) {
              r(n);
            }
          },
          setEngine: t => t
        });
      }
      configWallet() {
        return {
          getAccounts: async t => {
            try {
              const e = (await this.getWalletConnector()).accounts;
              e && e.length ? t(null, e) : t(new Error("Failed to get accounts"));
            } catch (e) {
              t(e);
            }
          },
          processMessage: async (t, e) => {
            try {
              const r = await this.getWalletConnector();
              e(null, await r.signMessage([ t.from, t.data ]));
            } catch (r) {
              e(r);
            }
          },
          processPersonalMessage: async (t, e) => {
            try {
              const r = await this.getWalletConnector();
              e(null, await r.signPersonalMessage([ t.data, t.from ]));
            } catch (r) {
              e(r);
            }
          },
          processSignTransaction: async (t, e) => {
            try {
              const r = await this.getWalletConnector();
              e(null, await r.signTransaction(t));
            } catch (r) {
              e(r);
            }
          },
          processTransaction: async (t, e) => {
            try {
              const r = await this.getWalletConnector();
              e(null, await r.sendTransaction(t));
            } catch (r) {
              e(r);
            }
          },
          processTypedMessage: async (t, e) => {
            try {
              const r = await this.getWalletConnector();
              e(null, await r.signTypedData([ t.from, t.data ]));
            } catch (r) {
              e(r);
            }
          }
        };
      }
    };
    var jt = function(t, e, r, n) {
      return new (r || (r = Promise))((function(i, o) {
        function a(t) {
          try {
            u(n.next(t));
          } catch (e) {
            o(e);
          }
        }
        function s(t) {
          try {
            u(n.throw(t));
          } catch (e) {
            o(e);
          }
        }
        function u(t) {
          t.done ? i(t.value) : function(t) {
            return t instanceof r ? t : new r((function(e) {
              e(t);
            }));
          }(t.value).then(a, s);
        }
        u((n = n.apply(t, e || [])).next());
      }));
    };
    var Kt = function(t, e) {
      var r, n, i, o, a = {
        label: 0,
        sent: function() {
          if (1 & i[0]) throw i[1];
          return i[1];
        },
        trys: [],
        ops: []
      };
      return o = {
        next: s(0),
        throw: s(1),
        return: s(2)
      }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
        return this;
      }), o;
      function s(o) {
        return function(s) {
          return function(o) {
            if (r) throw new TypeError("Generator is already executing.");
            for (;a; ) try {
              if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;
              switch (n = 0, i && (o = [ 2 & o[0], i.value ]), o[0]) {
               case 0:
               case 1:
                i = o;
                break;

               case 4:
                return a.label++, {
                  value: o[1],
                  done: !1
                };

               case 5:
                a.label++, n = o[1], o = [ 0 ];
                continue;

               case 7:
                o = a.ops.pop(), a.trys.pop();
                continue;

               default:
                if (!(i = a.trys, (i = i.length > 0 && i[i.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                  a = 0;
                  continue;
                }
                if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {
                  a.label = o[1];
                  break;
                }
                if (6 === o[0] && a.label < i[1]) {
                  a.label = i[1], i = o;
                  break;
                }
                if (i && a.label < i[2]) {
                  a.label = i[2], a.ops.push(o);
                  break;
                }
                i[2] && a.ops.pop(), a.trys.pop();
                continue;
              }
              o = e.call(t, a);
            } catch (s) {
              o = [ 6, s ], n = 0;
            } finally {
              r = i = 0;
            }
            if (5 & o[0]) throw o[1];
            return {
              value: o[0] ? o[1] : void 0,
              done: !0
            };
          }([ o, s ]);
        };
      }
    };
    var Ht = function(t) {
      return jt(void 0, void 0, void 0, (function() {
        return Kt(this, (function(e) {
          return [ 2, new qt({
            infuraId: "7753fa7b79d2469f97c156780fce37ac",
            qrcode: !t
          }) ];
        }));
      }));
    };
  },
  55522: (t, e, r) => {
    "use strict";
    r.r(e), r.d(e, {
      detectEnv: () => y,
      detectOS: () => w,
      formatIOSMobile: () => D,
      formatMobileRegistry: () => Q,
      formatMobileRegistryEntry: () => J,
      getClientMeta: () => U,
      getCrypto: () => I,
      getCryptoOrThrow: () => P,
      getDappRegistryUrl: () => Y,
      getDocument: () => R,
      getDocumentOrThrow: () => S,
      getFromWindow: () => A,
      getFromWindowOrThrow: () => E,
      getLocal: () => H,
      getLocalStorage: () => N,
      getLocalStorageOrThrow: () => O,
      getLocation: () => L,
      getLocationOrThrow: () => B,
      getMobileLinkRegistry: () => V,
      getMobileRegistryEntry: () => W,
      getNavigator: () => T,
      getNavigatorOrThrow: () => C,
      getWalletRegistryUrl: () => G,
      isAndroid: () => _,
      isBrowser: () => x,
      isIOS: () => M,
      isMobile: () => b,
      isNode: () => k,
      mobileLinkChoiceKey: () => z,
      removeLocal: () => F,
      safeJsonParse: () => q,
      safeJsonStringify: () => j,
      saveMobileLinkInfo: () => Z,
      setLocal: () => K
    });
    var n = r(65755);
    var i = r(62873);
    var o = r(34155);
    var a = function() {
      for (var t = 0, e = 0, r = arguments.length; e < r; e++) t += arguments[e].length;
      var n = Array(t), i = 0;
      for (e = 0; e < r; e++) for (var o = arguments[e], a = 0, s = o.length; a < s; a++, i++) n[i] = o[a];
      return n;
    };
    var s = function() {
      return function(t, e, r) {
        this.name = t, this.version = e, this.os = r, this.type = 'browser';
      };
    }();
    var u = function() {
      return function(t) {
        this.version = t, this.type = 'node', this.name = 'node', this.os = o.platform;
      };
    }();
    var h = function() {
      return function(t, e, r, n) {
        this.name = t, this.version = e, this.os = r, this.bot = n, this.type = 'bot-device';
      };
    }();
    var l = function() {
      return function() {
        this.type = 'bot', this.bot = !0, this.name = 'bot', this.version = null, this.os = null;
      };
    }();
    var c = function() {
      return function() {
        this.type = 'react-native', this.name = 'react-native', this.version = null, this.os = null;
      };
    }();
    var f = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
    var d = [ [ 'aol', /AOLShield\/([0-9\._]+)/ ], [ 'edge', /Edge\/([0-9\._]+)/ ], [ 'edge-ios', /EdgiOS\/([0-9\._]+)/ ], [ 'yandexbrowser', /YaBrowser\/([0-9\._]+)/ ], [ 'kakaotalk', /KAKAOTALK\s([0-9\.]+)/ ], [ 'samsung', /SamsungBrowser\/([0-9\.]+)/ ], [ 'silk', /\bSilk\/([0-9._-]+)\b/ ], [ 'miui', /MiuiBrowser\/([0-9\.]+)$/ ], [ 'beaker', /BeakerBrowser\/([0-9\.]+)/ ], [ 'edge-chromium', /EdgA?\/([0-9\.]+)/ ], [ 'chromium-webview', /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/ ], [ 'chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/ ], [ 'phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/ ], [ 'crios', /CriOS\/([0-9\.]+)(:?\s|$)/ ], [ 'firefox', /Firefox\/([0-9\.]+)(?:\s|$)/ ], [ 'fxios', /FxiOS\/([0-9\.]+)/ ], [ 'opera-mini', /Opera Mini.*Version\/([0-9\.]+)/ ], [ 'opera', /Opera\/([0-9\.]+)(?:\s|$)/ ], [ 'opera', /OPR\/([0-9\.]+)(:?\s|$)/ ], [ 'ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/ ], [ 'ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/ ], [ 'ie', /MSIE\s(7\.0)/ ], [ 'bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/ ], [ 'android', /Android\s([0-9\.]+)/ ], [ 'ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/ ], [ 'safari', /Version\/([0-9\._]+).*Safari/ ], [ 'facebook', /FBAV\/([0-9\.]+)/ ], [ 'instagram', /Instagram\s([0-9\.]+)/ ], [ 'ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/ ], [ 'ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/ ], [ 'searchbot', /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/ ] ];
    var p = [ [ 'iOS', /iP(hone|od|ad)/ ], [ 'Android OS', /Android/ ], [ 'BlackBerry OS', /BlackBerry|BB10/ ], [ 'Windows Mobile', /IEMobile/ ], [ 'Amazon OS', /Kindle/ ], [ 'Windows 3.11', /Win16/ ], [ 'Windows 95', /(Windows 95)|(Win95)|(Windows_95)/ ], [ 'Windows 98', /(Windows 98)|(Win98)/ ], [ 'Windows 2000', /(Windows NT 5.0)|(Windows 2000)/ ], [ 'Windows XP', /(Windows NT 5.1)|(Windows XP)/ ], [ 'Windows Server 2003', /(Windows NT 5.2)/ ], [ 'Windows Vista', /(Windows NT 6.0)/ ], [ 'Windows 7', /(Windows NT 6.1)/ ], [ 'Windows 8', /(Windows NT 6.2)/ ], [ 'Windows 8.1', /(Windows NT 6.3)/ ], [ 'Windows 10', /(Windows NT 10.0)/ ], [ 'Windows ME', /Windows ME/ ], [ 'Open BSD', /OpenBSD/ ], [ 'Sun OS', /SunOS/ ], [ 'Chrome OS', /CrOS/ ], [ 'Linux', /(Linux)|(X11)/ ], [ 'Mac OS', /(Mac_PowerPC)|(Macintosh)/ ], [ 'QNX', /QNX/ ], [ 'BeOS', /BeOS/ ], [ 'OS/2', /OS\/2/ ] ];
    function m(t) {
      return t ? g(t) : 'undefined' == typeof document && 'undefined' != typeof navigator && 'ReactNative' === navigator.product ? new c : 'undefined' != typeof navigator ? g(navigator.userAgent) : function() {
        return void 0 !== o && o.version ? new u(o.version.slice(1)) : null;
      }();
    }
    function v(t) {
      return '' !== t && d.reduce((function(e, r) {
        var n = r[0], i = r[1];
        if (e) return e;
        var o = i.exec(t);
        return !!o && [ n, o ];
      }), !1);
    }
    function g(t) {
      var e = v(t);
      if (!e) return null;
      var r = e[0], n = e[1];
      if ('searchbot' === r) return new l;
      var i = n[1] && n[1].split(/[._]/).slice(0, 3);
      i ? i.length < 3 && (i = a(i, function(t) {
        var e = [];
        for (var r = 0; r < t; r++) e.push('0');
        return e;
      }(3 - i.length))) : i = [];
      var o = i.join('.');
      var u = function(t) {
        for (var e = 0, r = p.length; e < r; e++) {
          var n = p[e], i = n[0];
          if (n[1].exec(t)) return i;
        }
        return null;
      }(t);
      var c = f.exec(t);
      return c && c[1] ? new h(r, o, u, c[1]) : new s(r, o, u);
    }
    function y(t) {
      return m(t);
    }
    function w() {
      const t = y();
      return t && t.os ? t.os : void 0;
    }
    function _() {
      const t = w();
      return !!t && t.toLowerCase().includes("android");
    }
    function M() {
      const t = w();
      return !!t && (t.toLowerCase().includes("ios") || t.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1);
    }
    function b() {
      return !!w() && (_() || M());
    }
    function k() {
      const t = y();
      return !(!t || !t.name) && "node" === t.name.toLowerCase();
    }
    function x() {
      return !k() && !!T();
    }
    const A = i.getFromWindow;
    const E = i.getFromWindowOrThrow;
    const S = i.getDocumentOrThrow;
    const R = i.getDocument;
    const C = i.getNavigatorOrThrow;
    const T = i.getNavigator;
    const B = i.getLocationOrThrow;
    const L = i.getLocation;
    const P = i.getCryptoOrThrow;
    const I = i.getCrypto;
    const O = i.getLocalStorageOrThrow;
    const N = i.getLocalStorage;
    function U() {
      return n.D();
    }
    const q = function(t) {
      if ("string" != typeof t) throw new Error("Cannot safe json parse value of type " + typeof t);
      try {
        return JSON.parse(t);
      } catch (e) {
        return t;
      }
    };
    const j = function(t) {
      return "string" == typeof t ? t : JSON.stringify(t);
    };
    function K(t, e) {
      const r = j(e);
      const n = N();
      n && n.setItem(t, r);
    }
    function H(t) {
      let e = null;
      let r = null;
      const n = N();
      return n && (r = n.getItem(t)), e = r ? q(r) : r, e;
    }
    function F(t) {
      const e = N();
      e && e.removeItem(t);
    }
    const z = "WALLETCONNECT_DEEPLINK_CHOICE";
    function D(t, e) {
      const r = encodeURIComponent(t);
      return e.universalLink ? `${e.universalLink}/wc?uri=${r}` : e.deepLink ? `${e.deepLink}${e.deepLink.endsWith(":") ? "//" : "/"}wc?uri=${r}` : "";
    }
    function Z(t) {
      const e = t.href.split("?")[0];
      K(z, Object.assign(Object.assign({}, t), {
        href: e
      }));
    }
    function W(t, e) {
      return t.filter((t => t.name.toLowerCase().includes(e.toLowerCase())))[0];
    }
    function V(t, e) {
      let r = t;
      return e && (r = e.map((e => W(t, e))).filter(Boolean)), r;
    }
    const $ = "https://registry.walletconnect.com";
    function G() {
      return $ + "/api/v2/wallets";
    }
    function Y() {
      return $ + "/api/v2/dapps";
    }
    function J(t, e = "mobile") {
      var r;
      return {
        name: t.name || "",
        shortName: t.metadata.shortName || "",
        color: t.metadata.colors.primary || "",
        logo: null !== (r = t.image_url.sm) && void 0 !== r ? r : "",
        universalLink: t[e].universal || "",
        deepLink: t[e].native || ""
      };
    }
    function Q(t, e = "mobile") {
      return Object.values(t).filter((t => !!t[e].universal || !!t[e].native)).map((t => J(t, e)));
    }
  },
  40926: (t, e, r) => {
    "use strict";
    function n() {
      return (null === r.g || void 0 === r.g ? void 0 : r.g.crypto) || (null === r.g || void 0 === r.g ? void 0 : r.g.msCrypto) || {};
    }
    function i() {
      const t = n();
      return t.subtle || t.webkitSubtle;
    }
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.isBrowserCryptoAvailable = e.getSubtleCrypto = e.getBrowerCrypto = void 0, e.getBrowerCrypto = n, e.getSubtleCrypto = i, 
    e.isBrowserCryptoAvailable = function() {
      return !!n() && !!i();
    };
  },
  88618: (t, e, r) => {
    "use strict";
    var n = r(34155);
    function i() {
      return "undefined" == typeof document && "undefined" != typeof navigator && "ReactNative" === navigator.product;
    }
    function o() {
      return void 0 !== n && void 0 !== n.versions && void 0 !== n.versions.node;
    }
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.isBrowser = e.isNode = e.isReactNative = void 0, e.isReactNative = i, e.isNode = o, e.isBrowser = function() {
      return !i() && !o();
    };
  },
  1468: function(t, e, r) {
    "use strict";
    var n = this && this.__createBinding || (Object.create ? function(t, e, r, n) {
      void 0 === n && (n = r), Object.defineProperty(t, n, {
        enumerable: !0,
        get: function() {
          return e[r];
        }
      });
    } : function(t, e, r, n) {
      void 0 === n && (n = r), t[n] = e[r];
    });
    var i = this && this.__exportStar || function(t, e) {
      for (var r in t) "default" === r || e.hasOwnProperty(r) || n(e, t, r);
    };
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), i(r(40926), e), i(r(88618), e);
  },
  4337: (t, e, r) => {
    var n = r(25108);
    var i = r(34155);
    function o(t) {
      return t && 'object' == typeof t && 'default' in t ? t.default : t;
    }
    var a = r(55522);
    var s = o(r(92592));
    var u = o(r(20640));
    var h = r(35776);
    "undefined" != typeof Symbol && (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")));
    "undefined" != typeof Symbol && (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")));
    var l = "walletconnect-wrapper";
    var c = "walletconnect-style-sheet";
    var f = "walletconnect-qrcode-modal";
    var d = "walletconnect-qrcode-text";
    function p(t) {
      return h.createElement("div", {
        className: "walletconnect-modal__header"
      }, h.createElement("img", {
        src: "data:image/svg+xml,%3Csvg height='185' viewBox='0 0 300 185' width='300' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m61.4385429 36.2562612c48.9112241-47.8881663 128.2119871-47.8881663 177.1232091 0l5.886545 5.7634174c2.445561 2.3944081 2.445561 6.2765112 0 8.6709204l-20.136695 19.715503c-1.222781 1.1972051-3.2053 1.1972051-4.428081 0l-8.100584-7.9311479c-34.121692-33.4079817-89.443886-33.4079817-123.5655788 0l-8.6750562 8.4936051c-1.2227816 1.1972041-3.205301 1.1972041-4.4280806 0l-20.1366949-19.7155031c-2.4455612-2.3944092-2.4455612-6.2765122 0-8.6709204zm218.7677961 40.7737449 17.921697 17.546897c2.445549 2.3943969 2.445563 6.2764769.000031 8.6708899l-80.810171 79.121134c-2.445544 2.394426-6.410582 2.394453-8.85616.000062-.00001-.00001-.000022-.000022-.000032-.000032l-57.354143-56.154572c-.61139-.598602-1.60265-.598602-2.21404 0-.000004.000004-.000007.000008-.000011.000011l-57.3529212 56.154531c-2.4455368 2.394432-6.4105755 2.394472-8.8561612.000087-.0000143-.000014-.0000296-.000028-.0000449-.000044l-80.81241943-79.122185c-2.44556021-2.394408-2.44556021-6.2765115 0-8.6709197l17.92172963-17.5468673c2.4455602-2.3944082 6.4105989-2.3944082 8.8561602 0l57.3549775 56.155357c.6113908.598602 1.602649.598602 2.2140398 0 .0000092-.000009.0000174-.000017.0000265-.000024l57.3521031-56.155333c2.445505-2.3944633 6.410544-2.3945531 8.856161-.0002.000034.0000336.000068.0000673.000101.000101l57.354902 56.155432c.61139.598601 1.60265.598601 2.21404 0l57.353975-56.1543249c2.445561-2.3944092 6.410599-2.3944092 8.85616 0z' fill='%233b99fc'/%3E%3C/svg%3E",
        className: "walletconnect-modal__headerLogo"
      }), h.createElement("p", null, "WalletConnect"), h.createElement("div", {
        className: "walletconnect-modal__close__wrapper",
        onClick: t.onClose
      }, h.createElement("div", {
        id: "walletconnect-qrcode-close",
        className: "walletconnect-modal__close__icon"
      }, h.createElement("div", {
        className: "walletconnect-modal__close__line1"
      }), h.createElement("div", {
        className: "walletconnect-modal__close__line2"
      }))));
    }
    function m(t) {
      return h.createElement("a", {
        className: "walletconnect-connect__button",
        href: t.href,
        id: "walletconnect-connect-button-" + t.name,
        onClick: t.onClick,
        rel: "noopener noreferrer",
        style: {
          backgroundColor: t.color
        },
        target: "_blank"
      }, t.name);
    }
    function v(t) {
      var e = t.color;
      var r = t.href;
      var n = t.name;
      var i = t.logo;
      var o = t.onClick;
      return h.createElement("a", {
        className: "walletconnect-modal__base__row",
        href: r,
        onClick: o,
        rel: "noopener noreferrer",
        target: "_blank"
      }, h.createElement("h3", {
        className: "walletconnect-modal__base__row__h3"
      }, n), h.createElement("div", {
        className: "walletconnect-modal__base__row__right"
      }, h.createElement("div", {
        className: "walletconnect-modal__base__row__right__app-icon",
        style: {
          background: "url('" + i + "') " + e,
          backgroundSize: "100%"
        }
      }), h.createElement("img", {
        src: "data:image/svg+xml,%3Csvg fill='none' height='18' viewBox='0 0 8 18' width='8' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath clip-rule='evenodd' d='m.586301.213898c-.435947.33907-.5144813.967342-.175411 1.403292l4.87831 6.27212c.28087.36111.28087.86677 0 1.22788l-4.878311 6.27211c-.33907.436-.260536 1.0642.175412 1.4033.435949.3391 1.064219.2605 1.403289-.1754l4.87832-6.2721c.84259-1.08336.84259-2.60034 0-3.68367l-4.87832-6.27212c-.33907-.4359474-.96734-.514482-1.403289-.175412z' fill='%233c4252' fill-rule='evenodd'/%3E%3C/svg%3E",
        className: "walletconnect-modal__base__row__right__caret"
      })));
    }
    function g(t) {
      var e = t.color;
      var r = t.href;
      var n = t.name;
      var i = t.logo;
      var o = t.onClick;
      var a = window.innerWidth < 768 ? (n.length > 8 ? 2.5 : 2.7) + "vw" : "inherit";
      return h.createElement("a", {
        className: "walletconnect-connect__button__icon_anchor",
        href: r,
        onClick: o,
        rel: "noopener noreferrer",
        target: "_blank"
      }, h.createElement("div", {
        className: "walletconnect-connect__button__icon",
        style: {
          background: "url('" + i + "') " + e,
          backgroundSize: "100%"
        }
      }), h.createElement("div", {
        style: {
          fontSize: a
        },
        className: "walletconnect-connect__button__text"
      }, n));
    }
    function y(t) {
      var e = a.isAndroid();
      var r = h.useState("");
      var n = r[0];
      var i = r[1];
      var o = h.useState("");
      var s = o[0];
      var u = o[1];
      var l = h.useState(1);
      var c = l[0];
      var f = l[1];
      var p = s ? t.links.filter((function(t) {
        return t.name.toLowerCase().includes(s.toLowerCase());
      })) : t.links;
      var y = t.errorMessage;
      var w = s || p.length > 5;
      var _ = Math.ceil(p.length / 12);
      var M = [ 12 * (c - 1) + 1, 12 * c ];
      var b = p.length ? p.filter((function(t, e) {
        return e + 1 >= M[0] && e + 1 <= M[1];
      })) : [];
      var k = !(e || !(_ > 1));
      var x = void 0;
      return h.createElement("div", null, h.createElement("p", {
        id: d,
        className: "walletconnect-qrcode__text"
      }, e ? t.text.connect_mobile_wallet : t.text.choose_preferred_wallet), !e && h.createElement("input", {
        className: "walletconnect-search__input",
        placeholder: "Search",
        value: n,
        onChange: function(t) {
          i(t.target.value), clearTimeout(x), t.target.value ? x = setTimeout((function() {
            u(t.target.value), f(1);
          }), 1e3) : (i(""), u(""), f(1));
        }
      }), h.createElement("div", {
        className: "walletconnect-connect__buttons__wrapper" + (e ? "__android" : w && p.length ? "__wrap" : "")
      }, e ? h.createElement(m, {
        name: t.text.connect,
        color: "rgb(64, 153, 255)",
        href: t.uri,
        onClick: h.useCallback((function() {
          a.saveMobileLinkInfo({
            name: "Unknown",
            href: t.uri
          });
        }), [])
      }) : b.length ? b.map((function(e) {
        var r = e.color;
        var n = e.name;
        var i = e.shortName;
        var o = e.logo;
        var s = a.formatIOSMobile(t.uri, e);
        var u = h.useCallback((function() {
          a.saveMobileLinkInfo({
            name: n,
            href: s
          });
        }), [ b ]);
        return w ? h.createElement(g, {
          color: r,
          href: s,
          name: i || n,
          logo: o,
          onClick: u
        }) : h.createElement(v, {
          color: r,
          href: s,
          name: n,
          logo: o,
          onClick: u
        });
      })) : h.createElement(h.Fragment, null, h.createElement("p", null, y.length ? t.errorMessage : t.links.length && !p.length ? t.text.no_wallets_found : t.text.loading))), k && h.createElement("div", {
        className: "walletconnect-modal__footer"
      }, Array(_).fill(0).map((function(t, e) {
        var r = e + 1;
        var n = c === r;
        return h.createElement("a", {
          style: {
            margin: "auto 10px",
            fontWeight: n ? "bold" : "normal"
          },
          onClick: function() {
            return f(r);
          }
        }, r);
      }))));
    }
    function w(t) {
      var e = !!t.message.trim();
      return h.createElement("div", {
        className: "walletconnect-qrcode__notification" + (e ? " notification__show" : "")
      }, t.message);
    }
    function _(t) {
      var e = h.useState("");
      var r = e[0];
      var n = e[1];
      var i = h.useState("");
      var o = i[0];
      var a = i[1];
      h.useEffect((function() {
        try {
          return Promise.resolve(function(t) {
            try {
              var e = "";
              return Promise.resolve(s.toString(t, {
                margin: 0,
                type: "svg"
              })).then((function(t) {
                return "string" == typeof t && (e = t.replace("<svg", "<svg class=\"walletconnect-qrcode__image\"")), e;
              }));
            } catch (r) {
              return Promise.reject(r);
            }
          }(t.uri)).then((function(t) {
            a(t);
          }));
        } catch (e) {
          Promise.reject(e);
        }
      }), []);
      return h.createElement("div", null, h.createElement("p", {
        id: d,
        className: "walletconnect-qrcode__text"
      }, t.text.scan_qrcode_with_wallet), h.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: o
        }
      }), h.createElement("div", {
        className: "walletconnect-modal__footer"
      }, h.createElement("a", {
        onClick: function() {
          u(t.uri) ? (n(t.text.copied_to_clipboard), setInterval((function() {
            return n("");
          }), 1200)) : (n("Error"), setInterval((function() {
            return n("");
          }), 1200));
        }
      }, t.text.copy_to_clipboard)), h.createElement(w, {
        message: r
      }));
    }
    function M(t) {
      var e = a.isAndroid();
      var r = a.isMobile();
      var i = r ? t.qrcodeModalOptions && t.qrcodeModalOptions.mobileLinks ? t.qrcodeModalOptions.mobileLinks : void 0 : t.qrcodeModalOptions && t.qrcodeModalOptions.desktopLinks ? t.qrcodeModalOptions.desktopLinks : void 0;
      var o = h.useState(!1);
      var s = o[0];
      var u = o[1];
      var l = h.useState(!1);
      var c = l[0];
      var d = l[1];
      var m = h.useState(!r);
      var v = m[0];
      var g = m[1];
      var w = {
        mobile: r,
        text: t.text,
        uri: t.uri,
        qrcodeModalOptions: t.qrcodeModalOptions
      };
      var M = h.useState("");
      var b = M[0];
      var k = M[1];
      var x = h.useState(!1);
      var A = x[0];
      var E = x[1];
      var S = h.useState([]);
      var R = S[0];
      var C = S[1];
      var T = h.useState("");
      var B = T[0];
      var L = T[1];
      var P = function() {
        c || s || i && !i.length || R.length > 0 || h.useEffect((function() {
          !function() {
            try {
              if (e) return Promise.resolve();
              u(!0);
              var o = function(t, e) {
                try {
                  var r = t();
                } catch (n) {
                  return e(n);
                }
                return r && r.then ? r.then(void 0, e) : r;
              }((function() {
                var e = t.qrcodeModalOptions && t.qrcodeModalOptions.registryUrl ? t.qrcodeModalOptions.registryUrl : a.getWalletRegistryUrl();
                return Promise.resolve(fetch(e)).then((function(e) {
                  return Promise.resolve(e.json()).then((function(e) {
                    var n = e.listings;
                    var o = r ? "mobile" : "desktop";
                    var s = a.getMobileLinkRegistry(a.formatMobileRegistry(n, o), i);
                    u(!1), d(!0), L(s.length ? "" : t.text.no_supported_wallets), C(s);
                    var h = 1 === s.length;
                    h && (k(a.formatIOSMobile(t.uri, s[0])), g(!0)), E(h);
                  }));
                }));
              }), (function(e) {
                u(!1), d(!0), L(t.text.something_went_wrong), n.error(e);
              }));
              Promise.resolve(o && o.then ? o.then((function() {})) : void 0);
            } catch (s) {
              return Promise.reject(s);
            }
          }();
        }));
      };
      P();
      var I = r ? v : !v;
      return h.createElement("div", {
        id: f,
        className: "walletconnect-qrcode__base animated fadeIn"
      }, h.createElement("div", {
        className: "walletconnect-modal__base"
      }, h.createElement(p, {
        onClose: t.onClose
      }), A && v ? h.createElement("div", {
        className: "walletconnect-modal__single_wallet"
      }, h.createElement("a", {
        onClick: function() {
          return a.saveMobileLinkInfo({
            name: R[0].name,
            href: b
          });
        },
        href: b,
        rel: "noopener noreferrer",
        target: "_blank"
      }, t.text.connect_with + " " + (A ? R[0].name : "") + " ›")) : e || s || !s && R.length ? h.createElement("div", {
        className: "walletconnect-modal__mobile__toggle" + (I ? " right__selected" : "")
      }, h.createElement("div", {
        className: "walletconnect-modal__mobile__toggle_selector"
      }), r ? h.createElement(h.Fragment, null, h.createElement("a", {
        onClick: function() {
          return g(!1), P();
        }
      }, t.text.mobile), h.createElement("a", {
        onClick: function() {
          return g(!0);
        }
      }, t.text.qrcode)) : h.createElement(h.Fragment, null, h.createElement("a", {
        onClick: function() {
          return g(!0);
        }
      }, t.text.qrcode), h.createElement("a", {
        onClick: function() {
          return g(!1), P();
        }
      }, t.text.desktop))) : null, h.createElement("div", null, v || !e && !s && !R.length ? h.createElement(_, Object.assign({}, w)) : h.createElement(y, Object.assign({}, w, {
        links: R,
        errorMessage: B
      })))));
    }
    var b = {
      de: {
        choose_preferred_wallet: "Wähle bevorzugte Wallet",
        connect_mobile_wallet: "Verbinde mit Mobile Wallet",
        scan_qrcode_with_wallet: "Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",
        connect: "Verbinden",
        qrcode: "QR-Code",
        mobile: "Mobile",
        desktop: "Desktop",
        copy_to_clipboard: "In die Zwischenablage kopieren",
        copied_to_clipboard: "In die Zwischenablage kopiert!",
        connect_with: "Verbinden mit Hilfe von",
        loading: "Laden...",
        something_went_wrong: "Etwas ist schief gelaufen",
        no_supported_wallets: "Es gibt noch keine unterstützten Wallet",
        no_wallets_found: "keine Wallet gefunden"
      },
      en: {
        choose_preferred_wallet: "Choose your preferred wallet",
        connect_mobile_wallet: "Connect to Mobile Wallet",
        scan_qrcode_with_wallet: "Scan QR code with a WalletConnect-compatible wallet",
        connect: "Connect",
        qrcode: "QR Code",
        mobile: "Mobile",
        desktop: "Desktop",
        copy_to_clipboard: "Copy to clipboard",
        copied_to_clipboard: "Copied to clipboard!",
        connect_with: "Connect with",
        loading: "Loading...",
        something_went_wrong: "Something went wrong",
        no_supported_wallets: "There are no supported wallets yet",
        no_wallets_found: "No wallets found"
      },
      es: {
        choose_preferred_wallet: "Elige tu billetera preferida",
        connect_mobile_wallet: "Conectar a billetera móvil",
        scan_qrcode_with_wallet: "Escanea el código QR con una billetera compatible con WalletConnect",
        connect: "Conectar",
        qrcode: "Código QR",
        mobile: "Móvil",
        desktop: "Desktop",
        copy_to_clipboard: "Copiar",
        copied_to_clipboard: "Copiado!",
        connect_with: "Conectar mediante",
        loading: "Cargando...",
        something_went_wrong: "Algo salió mal",
        no_supported_wallets: "Todavía no hay billeteras compatibles",
        no_wallets_found: "No se encontraron billeteras"
      },
      fr: {
        choose_preferred_wallet: "Choisissez votre portefeuille préféré",
        connect_mobile_wallet: "Se connecter au portefeuille mobile",
        scan_qrcode_with_wallet: "Scannez le QR code avec un portefeuille compatible WalletConnect",
        connect: "Se connecter",
        qrcode: "QR Code",
        mobile: "Mobile",
        desktop: "Desktop",
        copy_to_clipboard: "Copier",
        copied_to_clipboard: "Copié!",
        connect_with: "Connectez-vous à l'aide de",
        loading: "Chargement...",
        something_went_wrong: "Quelque chose a mal tourné",
        no_supported_wallets: "Il n'y a pas encore de portefeuilles pris en charge",
        no_wallets_found: "Aucun portefeuille trouvé"
      },
      ko: {
        choose_preferred_wallet: "원하는 지갑을 선택하세요",
        connect_mobile_wallet: "모바일 지갑과 연결",
        scan_qrcode_with_wallet: "WalletConnect 지원 지갑에서 QR코드를 스캔하세요",
        connect: "연결",
        qrcode: "QR 코드",
        mobile: "모바일",
        desktop: "데스크탑",
        copy_to_clipboard: "클립보드에 복사",
        copied_to_clipboard: "클립보드에 복사되었습니다!",
        connect_with: "와 연결하다",
        loading: "로드 중...",
        something_went_wrong: "문제가 발생했습니다.",
        no_supported_wallets: "아직 지원되는 지갑이 없습니다",
        no_wallets_found: "지갑을 찾을 수 없습니다"
      },
      pt: {
        choose_preferred_wallet: "Escolha sua carteira preferida",
        connect_mobile_wallet: "Conectar-se à carteira móvel",
        scan_qrcode_with_wallet: "Ler o código QR com uma carteira compatível com WalletConnect",
        connect: "Conectar",
        qrcode: "Código QR",
        mobile: "Móvel",
        desktop: "Desktop",
        copy_to_clipboard: "Copiar",
        copied_to_clipboard: "Copiado!",
        connect_with: "Ligar por meio de",
        loading: "Carregamento...",
        something_went_wrong: "Algo correu mal",
        no_supported_wallets: "Ainda não há carteiras suportadas",
        no_wallets_found: "Nenhuma carteira encontrada"
      },
      zh: {
        choose_preferred_wallet: "选择你的钱包",
        connect_mobile_wallet: "连接至移动端钱包",
        scan_qrcode_with_wallet: "使用兼容 WalletConnect 的钱包扫描二维码",
        connect: "连接",
        qrcode: "二维码",
        mobile: "移动",
        desktop: "桌面",
        copy_to_clipboard: "复制到剪贴板",
        copied_to_clipboard: "复制到剪贴板成功！",
        connect_with: "通过以下方式连接",
        loading: "正在加载...",
        something_went_wrong: "出了问题",
        no_supported_wallets: "目前还没有支持的钱包",
        no_wallets_found: "没有找到钱包"
      },
      fa: {
        choose_preferred_wallet: "کیف پول مورد نظر خود را انتخاب کنید",
        connect_mobile_wallet: "به کیف پول موبایل وصل شوید",
        scan_qrcode_with_wallet: "کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",
        connect: "اتصال",
        qrcode: "کد QR",
        mobile: "سیار",
        desktop: "دسکتاپ",
        copy_to_clipboard: "کپی به کلیپ بورد",
        copied_to_clipboard: "در کلیپ بورد کپی شد!",
        connect_with: "ارتباط با",
        loading: "...بارگذاری",
        something_went_wrong: "مشکلی پیش آمد",
        no_supported_wallets: "هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",
        no_wallets_found: "هیچ کیف پولی پیدا نشد"
      }
    };
    function k() {
      var t = a.getDocumentOrThrow();
      var e = t.getElementById(f);
      e && (e.className = e.className.replace("fadeIn", "fadeOut"), setTimeout((function() {
        var e = t.getElementById(l);
        e && t.body.removeChild(e);
      }), 300));
    }
    function x(t) {
      return function() {
        k(), t && t();
      };
    }
    function A() {
      var t = a.getNavigatorOrThrow().language.split("-")[0] || "en";
      return b[t] || b.en;
    }
    function E(t, e, r) {
      !function() {
        var t = a.getDocumentOrThrow();
        var e = t.getElementById(c);
        e && t.head.removeChild(e);
        var r = t.createElement("style");
        r.setAttribute("id", c), r.innerText = ":root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, \"SF Pro Rounded\", \"SF Pro Text\", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\n    \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url(\"images/wc-logo.svg\") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n", 
        t.head.appendChild(r);
      }();
      var n = function() {
        var t = a.getDocumentOrThrow();
        var e = t.createElement("div");
        return e.setAttribute("id", l), t.body.appendChild(e), e;
      }();
      h.render(h.createElement(M, {
        text: A(),
        uri: t,
        onClose: x(e),
        qrcodeModalOptions: r
      }), n);
    }
    var S = function() {
      return void 0 !== i && void 0 !== i.versions && void 0 !== i.versions.node;
    };
    var R = {
      open: function(t, e, r) {
        n.log(t), S() ? function(t) {
          s.toString(t, {
            type: "terminal"
          }).then(n.log);
        }(t) : E(t, e, r);
      },
      close: function() {
        S() || function() {
          k();
        }();
      }
    };
    t.exports = R;
  },
  11460: function(t, e, r) {
    !function(t, e) {
      'use strict';
      function n(t, e) {
        if (!t) throw new Error(e || 'Assertion failed');
      }
      function i(t, e) {
        t.super_ = e;
        var r = function() {};
        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
      }
      function o(t, e, r) {
        if (o.isBN(t)) return t;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ('le' !== e && 'be' !== e || (r = e, 
        e = 10), this._init(t || 0, e || 10, r || 'be'));
      }
      var a;
      'object' == typeof t ? t.exports = o : e.BN = o, o.BN = o, o.wordSize = 26;
      try {
        a = r(36563).Buffer;
      } catch (x) {}
      function s(t, e, r) {
        var n = 0;
        var i = Math.min(t.length, r);
        for (var o = e; o < i; o++) {
          var a = t.charCodeAt(o) - 48;
          n <<= 4, n |= a >= 49 && a <= 54 ? a - 49 + 10 : a >= 17 && a <= 22 ? a - 17 + 10 : 15 & a;
        }
        return n;
      }
      function u(t, e, r, n) {
        var i = 0;
        var o = Math.min(t.length, r);
        for (var a = e; a < o; a++) {
          var s = t.charCodeAt(a) - 48;
          i *= n, i += s >= 49 ? s - 49 + 10 : s >= 17 ? s - 17 + 10 : s;
        }
        return i;
      }
      o.isBN = function(t) {
        return t instanceof o || null !== t && 'object' == typeof t && t.constructor.wordSize === o.wordSize && Array.isArray(t.words);
      }, o.max = function(t, e) {
        return t.cmp(e) > 0 ? t : e;
      }, o.min = function(t, e) {
        return t.cmp(e) < 0 ? t : e;
      }, o.prototype._init = function(t, e, r) {
        if ('number' == typeof t) return this._initNumber(t, e, r);
        if ('object' == typeof t) return this._initArray(t, e, r);
        'hex' === e && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
        var i = 0;
        '-' === (t = t.toString().replace(/\s+/g, ''))[0] && i++, 16 === e ? this._parseHex(t, i) : this._parseBase(t, e, i), '-' === t[0] && (this.negative = 1), 
        this.strip(), 'le' === r && this._initArray(this.toArray(), e, r);
      }, o.prototype._initNumber = function(t, e, r) {
        t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [ 67108863 & t ], this.length = 1) : t < 4503599627370496 ? (this.words = [ 67108863 & t, t / 67108864 & 67108863 ], 
        this.length = 2) : (n(t < 9007199254740992), this.words = [ 67108863 & t, t / 67108864 & 67108863, 1 ], this.length = 3), 
        'le' === r && this._initArray(this.toArray(), e, r);
      }, o.prototype._initArray = function(t, e, r) {
        if (n('number' == typeof t.length), t.length <= 0) return this.words = [ 0 ], this.length = 1, this;
        this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) this.words[i] = 0;
        var o, a;
        var s = 0;
        if ('be' === r) for (i = t.length - 1, o = 0; i >= 0; i -= 3) a = t[i] | t[i - 1] << 8 | t[i - 2] << 16, this.words[o] |= a << s & 67108863, 
        this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++); else if ('le' === r) for (i = 0, o = 0; i < t.length; i += 3) a = t[i] | t[i + 1] << 8 | t[i + 2] << 16, 
        this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
        return this.strip();
      }, o.prototype._parseHex = function(t, e) {
        this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
        for (var r = 0; r < this.length; r++) this.words[r] = 0;
        var n, i;
        var o = 0;
        for (r = t.length - 6, n = 0; r >= e; r -= 6) i = s(t, r, r + 6), this.words[n] |= i << o & 67108863, this.words[n + 1] |= i >>> 26 - o & 4194303, 
        (o += 24) >= 26 && (o -= 26, n++);
        r + 6 !== e && (i = s(t, e, r + 6), this.words[n] |= i << o & 67108863, this.words[n + 1] |= i >>> 26 - o & 4194303), this.strip();
      }, o.prototype._parseBase = function(t, e, r) {
        this.words = [ 0 ], this.length = 1;
        for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
        n--, i = i / e | 0;
        var o = t.length - r;
        var a = o % n;
        var s = Math.min(o, o - a) + r;
        var h = 0;
        for (var l = r; l < s; l += n) h = u(t, l, l + n, e), this.imuln(i), this.words[0] + h < 67108864 ? this.words[0] += h : this._iaddn(h);
        if (0 !== a) {
          var c = 1;
          for (h = u(t, l, t.length, e), l = 0; l < a; l++) c *= e;
          this.imuln(c), this.words[0] + h < 67108864 ? this.words[0] += h : this._iaddn(h);
        }
      }, o.prototype.copy = function(t) {
        t.words = new Array(this.length);
        for (var e = 0; e < this.length; e++) t.words[e] = this.words[e];
        t.length = this.length, t.negative = this.negative, t.red = this.red;
      }, o.prototype.clone = function() {
        var t = new o(null);
        return this.copy(t), t;
      }, o.prototype._expand = function(t) {
        for (;this.length < t; ) this.words[this.length++] = 0;
        return this;
      }, o.prototype.strip = function() {
        for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
        return this._normSign();
      }, o.prototype._normSign = function() {
        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
      }, o.prototype.inspect = function() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
      var h = [ '', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000' ];
      var l = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
      var c = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
      function f(t, e, r) {
        r.negative = e.negative ^ t.negative;
        var n = t.length + e.length | 0;
        r.length = n, n = n - 1 | 0;
        var i = 0 | t.words[0];
        var o = 0 | e.words[0];
        var a = i * o;
        var s = 67108863 & a;
        var u = a / 67108864 | 0;
        r.words[0] = s;
        for (var h = 1; h < n; h++) {
          var l = u >>> 26;
          var c = 67108863 & u;
          var f = Math.min(h, e.length - 1);
          for (var d = Math.max(0, h - t.length + 1); d <= f; d++) {
            var p = h - d | 0;
            l += (a = (i = 0 | t.words[p]) * (o = 0 | e.words[d]) + c) / 67108864 | 0, c = 67108863 & a;
          }
          r.words[h] = 0 | c, u = 0 | l;
        }
        return 0 !== u ? r.words[h] = 0 | u : r.length--, r.strip();
      }
      o.prototype.toString = function(t, e) {
        var r;
        if (e = 0 | e || 1, 16 === (t = t || 10) || 'hex' === t) {
          r = '';
          var i = 0;
          var o = 0;
          for (var a = 0; a < this.length; a++) {
            var s = this.words[a];
            var u = (16777215 & (s << i | o)).toString(16);
            r = 0 !== (o = s >>> 24 - i & 16777215) || a !== this.length - 1 ? h[6 - u.length] + u + r : u + r, (i += 2) >= 26 && (i -= 26, 
            a--);
          }
          for (0 !== o && (r = o.toString(16) + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        if (t === (0 | t) && t >= 2 && t <= 36) {
          var f = l[t];
          var d = c[t];
          r = '';
          var p = this.clone();
          for (p.negative = 0; !p.isZero(); ) {
            var m = p.modn(d).toString(t);
            r = (p = p.idivn(d)).isZero() ? m + r : h[f - m.length] + m + r;
          }
          for (this.isZero() && (r = '0' + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        n(!1, 'Base should be between 2 and 36');
      }, o.prototype.toNumber = function() {
        var t = this.words[0];
        return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, 'Number can only safely store up to 53 bits'), 
        0 !== this.negative ? -t : t;
      }, o.prototype.toJSON = function() {
        return this.toString(16);
      }, o.prototype.toBuffer = function(t, e) {
        return n(void 0 !== a), this.toArrayLike(a, t, e);
      }, o.prototype.toArray = function(t, e) {
        return this.toArrayLike(Array, t, e);
      }, o.prototype.toArrayLike = function(t, e, r) {
        var i = this.byteLength();
        var o = r || Math.max(1, i);
        n(i <= o, 'byte array longer than desired length'), n(o > 0, 'Requested array length <= 0'), this.strip();
        var a = 'le' === e;
        var s = new t(o);
        var u, h;
        var l = this.clone();
        if (a) {
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[h] = u;
          for (;h < o; h++) s[h] = 0;
        } else {
          for (h = 0; h < o - i; h++) s[h] = 0;
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[o - h - 1] = u;
        }
        return s;
      }, Math.clz32 ? o.prototype._countBits = function(t) {
        return 32 - Math.clz32(t);
      } : o.prototype._countBits = function(t) {
        var e = t;
        var r = 0;
        return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, e >>>= 4), e >= 2 && (r += 2, 
        e >>>= 2), r + e;
      }, o.prototype._zeroBits = function(t) {
        if (0 === t) return 26;
        var e = t;
        var r = 0;
        return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 0 == (15 & e) && (r += 4, e >>>= 4), 
        0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, r;
      }, o.prototype.bitLength = function() {
        var t = this.words[this.length - 1];
        var e = this._countBits(t);
        return 26 * (this.length - 1) + e;
      }, o.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        var t = 0;
        for (var e = 0; e < this.length; e++) {
          var r = this._zeroBits(this.words[e]);
          if (t += r, 26 !== r) break;
        }
        return t;
      }, o.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, o.prototype.toTwos = function(t) {
        return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
      }, o.prototype.fromTwos = function(t) {
        return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
      }, o.prototype.isNeg = function() {
        return 0 !== this.negative;
      }, o.prototype.neg = function() {
        return this.clone().ineg();
      }, o.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, o.prototype.iuor = function(t) {
        for (;this.length < t.length; ) this.words[this.length++] = 0;
        for (var e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
        return this.strip();
      }, o.prototype.ior = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuor(t);
      }, o.prototype.or = function(t) {
        return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
      }, o.prototype.uor = function(t) {
        return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
      }, o.prototype.iuand = function(t) {
        var e;
        e = this.length > t.length ? t : this;
        for (var r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
        return this.length = e.length, this.strip();
      }, o.prototype.iand = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuand(t);
      }, o.prototype.and = function(t) {
        return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
      }, o.prototype.uand = function(t) {
        return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
      }, o.prototype.iuxor = function(t) {
        var e;
        var r;
        this.length > t.length ? (e = this, r = t) : (e = t, r = this);
        for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
        if (this !== e) for (;n < e.length; n++) this.words[n] = e.words[n];
        return this.length = e.length, this.strip();
      }, o.prototype.ixor = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuxor(t);
      }, o.prototype.xor = function(t) {
        return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
      }, o.prototype.uxor = function(t) {
        return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
      }, o.prototype.inotn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = 0 | Math.ceil(t / 26);
        var r = t % 26;
        this._expand(e), r > 0 && e--;
        for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
        return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this.strip();
      }, o.prototype.notn = function(t) {
        return this.clone().inotn(t);
      }, o.prototype.setn = function(t, e) {
        n('number' == typeof t && t >= 0);
        var r = t / 26 | 0;
        var i = t % 26;
        return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this.strip();
      }, o.prototype.iadd = function(t) {
        var e;
        if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), this.negative ^= 1, this._normSign();
        if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), t.negative = 1, e._normSign();
        var r, n;
        this.length > t.length ? (r = this, n = t) : (r = t, n = this);
        var i = 0;
        for (var o = 0; o < n.length; o++) e = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        for (;0 !== i && o < r.length; o++) e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
        return this;
      }, o.prototype.add = function(t) {
        var e;
        return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, 
        e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
      }, o.prototype.isub = function(t) {
        if (0 !== t.negative) {
          t.negative = 0;
          var e = this.iadd(t);
          return t.negative = 1, e._normSign();
        }
        if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, this._normSign();
        var r = this.cmp(t);
        if (0 === r) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var n, i;
        r > 0 ? (n = this, i = t) : (n = t, i = this);
        var o = 0;
        for (var a = 0; a < i.length; a++) o = (e = (0 | n.words[a]) - (0 | i.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        for (;0 !== o && a < n.length; a++) o = (e = (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        if (0 === o && a < n.length && n !== this) for (;a < n.length; a++) this.words[a] = n.words[a];
        return this.length = Math.max(this.length, a), n !== this && (this.negative = 1), this.strip();
      }, o.prototype.sub = function(t) {
        return this.clone().isub(t);
      };
      var d = function(t, e, r) {
        var n = t.words;
        var i = e.words;
        var o = r.words;
        var a = 0;
        var s;
        var u;
        var h;
        var l = 0 | n[0];
        var c = 8191 & l;
        var f = l >>> 13;
        var d = 0 | n[1];
        var p = 8191 & d;
        var m = d >>> 13;
        var v = 0 | n[2];
        var g = 8191 & v;
        var y = v >>> 13;
        var w = 0 | n[3];
        var _ = 8191 & w;
        var M = w >>> 13;
        var b = 0 | n[4];
        var k = 8191 & b;
        var x = b >>> 13;
        var A = 0 | n[5];
        var E = 8191 & A;
        var S = A >>> 13;
        var R = 0 | n[6];
        var C = 8191 & R;
        var T = R >>> 13;
        var B = 0 | n[7];
        var L = 8191 & B;
        var P = B >>> 13;
        var I = 0 | n[8];
        var O = 8191 & I;
        var N = I >>> 13;
        var U = 0 | n[9];
        var q = 8191 & U;
        var j = U >>> 13;
        var K = 0 | i[0];
        var H = 8191 & K;
        var F = K >>> 13;
        var z = 0 | i[1];
        var D = 8191 & z;
        var Z = z >>> 13;
        var W = 0 | i[2];
        var V = 8191 & W;
        var $ = W >>> 13;
        var G = 0 | i[3];
        var Y = 8191 & G;
        var J = G >>> 13;
        var Q = 0 | i[4];
        var X = 8191 & Q;
        var tt = Q >>> 13;
        var et = 0 | i[5];
        var rt = 8191 & et;
        var nt = et >>> 13;
        var it = 0 | i[6];
        var ot = 8191 & it;
        var at = it >>> 13;
        var st = 0 | i[7];
        var ut = 8191 & st;
        var ht = st >>> 13;
        var lt = 0 | i[8];
        var ct = 8191 & lt;
        var ft = lt >>> 13;
        var dt = 0 | i[9];
        var pt = 8191 & dt;
        var mt = dt >>> 13;
        r.negative = t.negative ^ e.negative, r.length = 19;
        var vt = (a + (s = Math.imul(c, H)) | 0) + ((8191 & (u = (u = Math.imul(c, F)) + Math.imul(f, H) | 0)) << 13) | 0;
        a = ((h = Math.imul(f, F)) + (u >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, s = Math.imul(p, H), u = (u = Math.imul(p, F)) + Math.imul(m, H) | 0, 
        h = Math.imul(m, F);
        var gt = (a + (s = s + Math.imul(c, D) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, Z) | 0) + Math.imul(f, D) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, Z) | 0) + (u >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, s = Math.imul(g, H), u = (u = Math.imul(g, F)) + Math.imul(y, H) | 0, 
        h = Math.imul(y, F), s = s + Math.imul(p, D) | 0, u = (u = u + Math.imul(p, Z) | 0) + Math.imul(m, D) | 0, h = h + Math.imul(m, Z) | 0;
        var yt = (a + (s = s + Math.imul(c, V) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, $) | 0) + Math.imul(f, V) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, $) | 0) + (u >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, s = Math.imul(_, H), u = (u = Math.imul(_, F)) + Math.imul(M, H) | 0, 
        h = Math.imul(M, F), s = s + Math.imul(g, D) | 0, u = (u = u + Math.imul(g, Z) | 0) + Math.imul(y, D) | 0, h = h + Math.imul(y, Z) | 0, 
        s = s + Math.imul(p, V) | 0, u = (u = u + Math.imul(p, $) | 0) + Math.imul(m, V) | 0, h = h + Math.imul(m, $) | 0;
        var wt = (a + (s = s + Math.imul(c, Y) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, J) | 0) + Math.imul(f, Y) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, J) | 0) + (u >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, s = Math.imul(k, H), u = (u = Math.imul(k, F)) + Math.imul(x, H) | 0, 
        h = Math.imul(x, F), s = s + Math.imul(_, D) | 0, u = (u = u + Math.imul(_, Z) | 0) + Math.imul(M, D) | 0, h = h + Math.imul(M, Z) | 0, 
        s = s + Math.imul(g, V) | 0, u = (u = u + Math.imul(g, $) | 0) + Math.imul(y, V) | 0, h = h + Math.imul(y, $) | 0, s = s + Math.imul(p, Y) | 0, 
        u = (u = u + Math.imul(p, J) | 0) + Math.imul(m, Y) | 0, h = h + Math.imul(m, J) | 0;
        var _t = (a + (s = s + Math.imul(c, X) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, tt) | 0) + Math.imul(f, X) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, tt) | 0) + (u >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, s = Math.imul(E, H), u = (u = Math.imul(E, F)) + Math.imul(S, H) | 0, 
        h = Math.imul(S, F), s = s + Math.imul(k, D) | 0, u = (u = u + Math.imul(k, Z) | 0) + Math.imul(x, D) | 0, h = h + Math.imul(x, Z) | 0, 
        s = s + Math.imul(_, V) | 0, u = (u = u + Math.imul(_, $) | 0) + Math.imul(M, V) | 0, h = h + Math.imul(M, $) | 0, s = s + Math.imul(g, Y) | 0, 
        u = (u = u + Math.imul(g, J) | 0) + Math.imul(y, Y) | 0, h = h + Math.imul(y, J) | 0, s = s + Math.imul(p, X) | 0, u = (u = u + Math.imul(p, tt) | 0) + Math.imul(m, X) | 0, 
        h = h + Math.imul(m, tt) | 0;
        var Mt = (a + (s = s + Math.imul(c, rt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, nt) | 0) + Math.imul(f, rt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, nt) | 0) + (u >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, s = Math.imul(C, H), u = (u = Math.imul(C, F)) + Math.imul(T, H) | 0, 
        h = Math.imul(T, F), s = s + Math.imul(E, D) | 0, u = (u = u + Math.imul(E, Z) | 0) + Math.imul(S, D) | 0, h = h + Math.imul(S, Z) | 0, 
        s = s + Math.imul(k, V) | 0, u = (u = u + Math.imul(k, $) | 0) + Math.imul(x, V) | 0, h = h + Math.imul(x, $) | 0, s = s + Math.imul(_, Y) | 0, 
        u = (u = u + Math.imul(_, J) | 0) + Math.imul(M, Y) | 0, h = h + Math.imul(M, J) | 0, s = s + Math.imul(g, X) | 0, u = (u = u + Math.imul(g, tt) | 0) + Math.imul(y, X) | 0, 
        h = h + Math.imul(y, tt) | 0, s = s + Math.imul(p, rt) | 0, u = (u = u + Math.imul(p, nt) | 0) + Math.imul(m, rt) | 0, h = h + Math.imul(m, nt) | 0;
        var bt = (a + (s = s + Math.imul(c, ot) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, at) | 0) + Math.imul(f, ot) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, at) | 0) + (u >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, s = Math.imul(L, H), u = (u = Math.imul(L, F)) + Math.imul(P, H) | 0, 
        h = Math.imul(P, F), s = s + Math.imul(C, D) | 0, u = (u = u + Math.imul(C, Z) | 0) + Math.imul(T, D) | 0, h = h + Math.imul(T, Z) | 0, 
        s = s + Math.imul(E, V) | 0, u = (u = u + Math.imul(E, $) | 0) + Math.imul(S, V) | 0, h = h + Math.imul(S, $) | 0, s = s + Math.imul(k, Y) | 0, 
        u = (u = u + Math.imul(k, J) | 0) + Math.imul(x, Y) | 0, h = h + Math.imul(x, J) | 0, s = s + Math.imul(_, X) | 0, u = (u = u + Math.imul(_, tt) | 0) + Math.imul(M, X) | 0, 
        h = h + Math.imul(M, tt) | 0, s = s + Math.imul(g, rt) | 0, u = (u = u + Math.imul(g, nt) | 0) + Math.imul(y, rt) | 0, h = h + Math.imul(y, nt) | 0, 
        s = s + Math.imul(p, ot) | 0, u = (u = u + Math.imul(p, at) | 0) + Math.imul(m, ot) | 0, h = h + Math.imul(m, at) | 0;
        var kt = (a + (s = s + Math.imul(c, ut) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ht) | 0) + Math.imul(f, ut) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ht) | 0) + (u >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, s = Math.imul(O, H), u = (u = Math.imul(O, F)) + Math.imul(N, H) | 0, 
        h = Math.imul(N, F), s = s + Math.imul(L, D) | 0, u = (u = u + Math.imul(L, Z) | 0) + Math.imul(P, D) | 0, h = h + Math.imul(P, Z) | 0, 
        s = s + Math.imul(C, V) | 0, u = (u = u + Math.imul(C, $) | 0) + Math.imul(T, V) | 0, h = h + Math.imul(T, $) | 0, s = s + Math.imul(E, Y) | 0, 
        u = (u = u + Math.imul(E, J) | 0) + Math.imul(S, Y) | 0, h = h + Math.imul(S, J) | 0, s = s + Math.imul(k, X) | 0, u = (u = u + Math.imul(k, tt) | 0) + Math.imul(x, X) | 0, 
        h = h + Math.imul(x, tt) | 0, s = s + Math.imul(_, rt) | 0, u = (u = u + Math.imul(_, nt) | 0) + Math.imul(M, rt) | 0, h = h + Math.imul(M, nt) | 0, 
        s = s + Math.imul(g, ot) | 0, u = (u = u + Math.imul(g, at) | 0) + Math.imul(y, ot) | 0, h = h + Math.imul(y, at) | 0, s = s + Math.imul(p, ut) | 0, 
        u = (u = u + Math.imul(p, ht) | 0) + Math.imul(m, ut) | 0, h = h + Math.imul(m, ht) | 0;
        var xt = (a + (s = s + Math.imul(c, ct) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ft) | 0) + Math.imul(f, ct) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ft) | 0) + (u >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, s = Math.imul(q, H), u = (u = Math.imul(q, F)) + Math.imul(j, H) | 0, 
        h = Math.imul(j, F), s = s + Math.imul(O, D) | 0, u = (u = u + Math.imul(O, Z) | 0) + Math.imul(N, D) | 0, h = h + Math.imul(N, Z) | 0, 
        s = s + Math.imul(L, V) | 0, u = (u = u + Math.imul(L, $) | 0) + Math.imul(P, V) | 0, h = h + Math.imul(P, $) | 0, s = s + Math.imul(C, Y) | 0, 
        u = (u = u + Math.imul(C, J) | 0) + Math.imul(T, Y) | 0, h = h + Math.imul(T, J) | 0, s = s + Math.imul(E, X) | 0, u = (u = u + Math.imul(E, tt) | 0) + Math.imul(S, X) | 0, 
        h = h + Math.imul(S, tt) | 0, s = s + Math.imul(k, rt) | 0, u = (u = u + Math.imul(k, nt) | 0) + Math.imul(x, rt) | 0, h = h + Math.imul(x, nt) | 0, 
        s = s + Math.imul(_, ot) | 0, u = (u = u + Math.imul(_, at) | 0) + Math.imul(M, ot) | 0, h = h + Math.imul(M, at) | 0, s = s + Math.imul(g, ut) | 0, 
        u = (u = u + Math.imul(g, ht) | 0) + Math.imul(y, ut) | 0, h = h + Math.imul(y, ht) | 0, s = s + Math.imul(p, ct) | 0, u = (u = u + Math.imul(p, ft) | 0) + Math.imul(m, ct) | 0, 
        h = h + Math.imul(m, ft) | 0;
        var At = (a + (s = s + Math.imul(c, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, mt) | 0) + Math.imul(f, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, mt) | 0) + (u >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, s = Math.imul(q, D), u = (u = Math.imul(q, Z)) + Math.imul(j, D) | 0, 
        h = Math.imul(j, Z), s = s + Math.imul(O, V) | 0, u = (u = u + Math.imul(O, $) | 0) + Math.imul(N, V) | 0, h = h + Math.imul(N, $) | 0, 
        s = s + Math.imul(L, Y) | 0, u = (u = u + Math.imul(L, J) | 0) + Math.imul(P, Y) | 0, h = h + Math.imul(P, J) | 0, s = s + Math.imul(C, X) | 0, 
        u = (u = u + Math.imul(C, tt) | 0) + Math.imul(T, X) | 0, h = h + Math.imul(T, tt) | 0, s = s + Math.imul(E, rt) | 0, u = (u = u + Math.imul(E, nt) | 0) + Math.imul(S, rt) | 0, 
        h = h + Math.imul(S, nt) | 0, s = s + Math.imul(k, ot) | 0, u = (u = u + Math.imul(k, at) | 0) + Math.imul(x, ot) | 0, h = h + Math.imul(x, at) | 0, 
        s = s + Math.imul(_, ut) | 0, u = (u = u + Math.imul(_, ht) | 0) + Math.imul(M, ut) | 0, h = h + Math.imul(M, ht) | 0, s = s + Math.imul(g, ct) | 0, 
        u = (u = u + Math.imul(g, ft) | 0) + Math.imul(y, ct) | 0, h = h + Math.imul(y, ft) | 0;
        var Et = (a + (s = s + Math.imul(p, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(p, mt) | 0) + Math.imul(m, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(m, mt) | 0) + (u >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, s = Math.imul(q, V), u = (u = Math.imul(q, $)) + Math.imul(j, V) | 0, 
        h = Math.imul(j, $), s = s + Math.imul(O, Y) | 0, u = (u = u + Math.imul(O, J) | 0) + Math.imul(N, Y) | 0, h = h + Math.imul(N, J) | 0, 
        s = s + Math.imul(L, X) | 0, u = (u = u + Math.imul(L, tt) | 0) + Math.imul(P, X) | 0, h = h + Math.imul(P, tt) | 0, s = s + Math.imul(C, rt) | 0, 
        u = (u = u + Math.imul(C, nt) | 0) + Math.imul(T, rt) | 0, h = h + Math.imul(T, nt) | 0, s = s + Math.imul(E, ot) | 0, u = (u = u + Math.imul(E, at) | 0) + Math.imul(S, ot) | 0, 
        h = h + Math.imul(S, at) | 0, s = s + Math.imul(k, ut) | 0, u = (u = u + Math.imul(k, ht) | 0) + Math.imul(x, ut) | 0, h = h + Math.imul(x, ht) | 0, 
        s = s + Math.imul(_, ct) | 0, u = (u = u + Math.imul(_, ft) | 0) + Math.imul(M, ct) | 0, h = h + Math.imul(M, ft) | 0;
        var St = (a + (s = s + Math.imul(g, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(g, mt) | 0) + Math.imul(y, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(y, mt) | 0) + (u >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, s = Math.imul(q, Y), u = (u = Math.imul(q, J)) + Math.imul(j, Y) | 0, 
        h = Math.imul(j, J), s = s + Math.imul(O, X) | 0, u = (u = u + Math.imul(O, tt) | 0) + Math.imul(N, X) | 0, h = h + Math.imul(N, tt) | 0, 
        s = s + Math.imul(L, rt) | 0, u = (u = u + Math.imul(L, nt) | 0) + Math.imul(P, rt) | 0, h = h + Math.imul(P, nt) | 0, s = s + Math.imul(C, ot) | 0, 
        u = (u = u + Math.imul(C, at) | 0) + Math.imul(T, ot) | 0, h = h + Math.imul(T, at) | 0, s = s + Math.imul(E, ut) | 0, u = (u = u + Math.imul(E, ht) | 0) + Math.imul(S, ut) | 0, 
        h = h + Math.imul(S, ht) | 0, s = s + Math.imul(k, ct) | 0, u = (u = u + Math.imul(k, ft) | 0) + Math.imul(x, ct) | 0, h = h + Math.imul(x, ft) | 0;
        var Rt = (a + (s = s + Math.imul(_, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(_, mt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(M, mt) | 0) + (u >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, s = Math.imul(q, X), u = (u = Math.imul(q, tt)) + Math.imul(j, X) | 0, 
        h = Math.imul(j, tt), s = s + Math.imul(O, rt) | 0, u = (u = u + Math.imul(O, nt) | 0) + Math.imul(N, rt) | 0, h = h + Math.imul(N, nt) | 0, 
        s = s + Math.imul(L, ot) | 0, u = (u = u + Math.imul(L, at) | 0) + Math.imul(P, ot) | 0, h = h + Math.imul(P, at) | 0, s = s + Math.imul(C, ut) | 0, 
        u = (u = u + Math.imul(C, ht) | 0) + Math.imul(T, ut) | 0, h = h + Math.imul(T, ht) | 0, s = s + Math.imul(E, ct) | 0, u = (u = u + Math.imul(E, ft) | 0) + Math.imul(S, ct) | 0, 
        h = h + Math.imul(S, ft) | 0;
        var Ct = (a + (s = s + Math.imul(k, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(k, mt) | 0) + Math.imul(x, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(x, mt) | 0) + (u >>> 13) | 0) + (Ct >>> 26) | 0, Ct &= 67108863, s = Math.imul(q, rt), u = (u = Math.imul(q, nt)) + Math.imul(j, rt) | 0, 
        h = Math.imul(j, nt), s = s + Math.imul(O, ot) | 0, u = (u = u + Math.imul(O, at) | 0) + Math.imul(N, ot) | 0, h = h + Math.imul(N, at) | 0, 
        s = s + Math.imul(L, ut) | 0, u = (u = u + Math.imul(L, ht) | 0) + Math.imul(P, ut) | 0, h = h + Math.imul(P, ht) | 0, s = s + Math.imul(C, ct) | 0, 
        u = (u = u + Math.imul(C, ft) | 0) + Math.imul(T, ct) | 0, h = h + Math.imul(T, ft) | 0;
        var Tt = (a + (s = s + Math.imul(E, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(E, mt) | 0) + Math.imul(S, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(S, mt) | 0) + (u >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, s = Math.imul(q, ot), u = (u = Math.imul(q, at)) + Math.imul(j, ot) | 0, 
        h = Math.imul(j, at), s = s + Math.imul(O, ut) | 0, u = (u = u + Math.imul(O, ht) | 0) + Math.imul(N, ut) | 0, h = h + Math.imul(N, ht) | 0, 
        s = s + Math.imul(L, ct) | 0, u = (u = u + Math.imul(L, ft) | 0) + Math.imul(P, ct) | 0, h = h + Math.imul(P, ft) | 0;
        var Bt = (a + (s = s + Math.imul(C, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(C, mt) | 0) + Math.imul(T, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(T, mt) | 0) + (u >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863, s = Math.imul(q, ut), u = (u = Math.imul(q, ht)) + Math.imul(j, ut) | 0, 
        h = Math.imul(j, ht), s = s + Math.imul(O, ct) | 0, u = (u = u + Math.imul(O, ft) | 0) + Math.imul(N, ct) | 0, h = h + Math.imul(N, ft) | 0;
        var Lt = (a + (s = s + Math.imul(L, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(L, mt) | 0) + Math.imul(P, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(P, mt) | 0) + (u >>> 13) | 0) + (Lt >>> 26) | 0, Lt &= 67108863, s = Math.imul(q, ct), u = (u = Math.imul(q, ft)) + Math.imul(j, ct) | 0, 
        h = Math.imul(j, ft);
        var Pt = (a + (s = s + Math.imul(O, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(O, mt) | 0) + Math.imul(N, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(N, mt) | 0) + (u >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863;
        var It = (a + (s = Math.imul(q, pt)) | 0) + ((8191 & (u = (u = Math.imul(q, mt)) + Math.imul(j, pt) | 0)) << 13) | 0;
        return a = ((h = Math.imul(j, mt)) + (u >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, o[0] = vt, o[1] = gt, o[2] = yt, 
        o[3] = wt, o[4] = _t, o[5] = Mt, o[6] = bt, o[7] = kt, o[8] = xt, o[9] = At, o[10] = Et, o[11] = St, o[12] = Rt, o[13] = Ct, 
        o[14] = Tt, o[15] = Bt, o[16] = Lt, o[17] = Pt, o[18] = It, 0 !== a && (o[19] = a, r.length++), r;
      };
      function p(t, e, r) {
        return (new m).mulp(t, e, r);
      }
      function m(t, e) {
        this.x = t, this.y = e;
      }
      Math.imul || (d = f), o.prototype.mulTo = function(t, e) {
        var r;
        var n = this.length + t.length;
        return r = 10 === this.length && 10 === t.length ? d(this, t, e) : n < 63 ? f(this, t, e) : n < 1024 ? function(t, e, r) {
          r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
          var n = 0;
          var i = 0;
          for (var o = 0; o < r.length - 1; o++) {
            var a = i;
            i = 0;
            var s = 67108863 & n;
            var u = Math.min(o, e.length - 1);
            for (var h = Math.max(0, o - t.length + 1); h <= u; h++) {
              var l = o - h;
              var c = (0 | t.words[l]) * (0 | e.words[h]);
              var f = 67108863 & c;
              s = 67108863 & (f = f + s | 0), i += (a = (a = a + (c / 67108864 | 0) | 0) + (f >>> 26) | 0) >>> 26, a &= 67108863;
            }
            r.words[o] = s, n = a, a = i;
          }
          return 0 !== n ? r.words[o] = n : r.length--, r.strip();
        }(this, t, e) : p(this, t, e), r;
      }, m.prototype.makeRBT = function(t) {
        var e = new Array(t);
        var r = o.prototype._countBits(t) - 1;
        for (var n = 0; n < t; n++) e[n] = this.revBin(n, r, t);
        return e;
      }, m.prototype.revBin = function(t, e, r) {
        if (0 === t || t === r - 1) return t;
        var n = 0;
        for (var i = 0; i < e; i++) n |= (1 & t) << e - i - 1, t >>= 1;
        return n;
      }, m.prototype.permute = function(t, e, r, n, i, o) {
        for (var a = 0; a < o; a++) n[a] = e[t[a]], i[a] = r[t[a]];
      }, m.prototype.transform = function(t, e, r, n, i, o) {
        this.permute(o, t, e, r, n, i);
        for (var a = 1; a < i; a <<= 1) {
          var s = a << 1;
          var u = Math.cos(2 * Math.PI / s);
          var h = Math.sin(2 * Math.PI / s);
          for (var l = 0; l < i; l += s) {
            var c = u;
            var f = h;
            for (var d = 0; d < a; d++) {
              var p = r[l + d];
              var m = n[l + d];
              var v = r[l + d + a];
              var g = n[l + d + a];
              var y = c * v - f * g;
              g = c * g + f * v, v = y, r[l + d] = p + v, n[l + d] = m + g, r[l + d + a] = p - v, n[l + d + a] = m - g, d !== s && (y = u * c - h * f, 
              f = u * f + h * c, c = y);
            }
          }
        }
      }, m.prototype.guessLen13b = function(t, e) {
        var r = 1 | Math.max(e, t);
        var n = 1 & r;
        var i = 0;
        for (r = r / 2 | 0; r; r >>>= 1) i++;
        return 1 << i + 1 + n;
      }, m.prototype.conjugate = function(t, e, r) {
        if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
          var i = t[n];
          t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
        }
      }, m.prototype.normalize13b = function(t, e) {
        var r = 0;
        for (var n = 0; n < e / 2; n++) {
          var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
          t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
        }
        return t;
      }, m.prototype.convert13b = function(t, e, r, i) {
        var o = 0;
        for (var a = 0; a < e; a++) o += 0 | t[a], r[2 * a] = 8191 & o, o >>>= 13, r[2 * a + 1] = 8191 & o, o >>>= 13;
        for (a = 2 * e; a < i; ++a) r[a] = 0;
        n(0 === o), n(0 == (-8192 & o));
      }, m.prototype.stub = function(t) {
        var e = new Array(t);
        for (var r = 0; r < t; r++) e[r] = 0;
        return e;
      }, m.prototype.mulp = function(t, e, r) {
        var n = 2 * this.guessLen13b(t.length, e.length);
        var i = this.makeRBT(n);
        var o = this.stub(n);
        var a = new Array(n);
        var s = new Array(n);
        var u = new Array(n);
        var h = new Array(n);
        var l = new Array(n);
        var c = new Array(n);
        var f = r.words;
        f.length = n, this.convert13b(t.words, t.length, a, n), this.convert13b(e.words, e.length, h, n), this.transform(a, o, s, u, n, i), 
        this.transform(h, o, l, c, n, i);
        for (var d = 0; d < n; d++) {
          var p = s[d] * l[d] - u[d] * c[d];
          u[d] = s[d] * c[d] + u[d] * l[d], s[d] = p;
        }
        return this.conjugate(s, u, n), this.transform(s, u, f, o, n, i), this.conjugate(f, o, n), this.normalize13b(f, n), r.negative = t.negative ^ e.negative, 
        r.length = t.length + e.length, r.strip();
      }, o.prototype.mul = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), this.mulTo(t, e);
      }, o.prototype.mulf = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), p(this, t, e);
      }, o.prototype.imul = function(t) {
        return this.clone().mulTo(t, this);
      }, o.prototype.imuln = function(t) {
        n('number' == typeof t), n(t < 67108864);
        var e = 0;
        for (var r = 0; r < this.length; r++) {
          var i = (0 | this.words[r]) * t;
          var o = (67108863 & i) + (67108863 & e);
          e >>= 26, e += i / 67108864 | 0, e += o >>> 26, this.words[r] = 67108863 & o;
        }
        return 0 !== e && (this.words[r] = e, this.length++), this;
      }, o.prototype.muln = function(t) {
        return this.clone().imuln(t);
      }, o.prototype.sqr = function() {
        return this.mul(this);
      }, o.prototype.isqr = function() {
        return this.imul(this.clone());
      }, o.prototype.pow = function(t) {
        var e = function(t) {
          var e = new Array(t.bitLength());
          for (var r = 0; r < e.length; r++) {
            var n = r / 26 | 0;
            var i = r % 26;
            e[r] = (t.words[n] & 1 << i) >>> i;
          }
          return e;
        }(t);
        if (0 === e.length) return new o(1);
        var r = this;
        for (var n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr()) ;
        if (++n < e.length) for (var i = r.sqr(); n < e.length; n++, i = i.sqr()) 0 !== e[n] && (r = r.mul(i));
        return r;
      }, o.prototype.iushln = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 67108863 >>> 26 - e << 26 - e;
        var o;
        if (0 !== e) {
          var a = 0;
          for (o = 0; o < this.length; o++) {
            var s = this.words[o] & i;
            var u = (0 | this.words[o]) - s << e;
            this.words[o] = u | a, a = s >>> 26 - e;
          }
          a && (this.words[o] = a, this.length++);
        }
        if (0 !== r) {
          for (o = this.length - 1; o >= 0; o--) this.words[o + r] = this.words[o];
          for (o = 0; o < r; o++) this.words[o] = 0;
          this.length += r;
        }
        return this.strip();
      }, o.prototype.ishln = function(t) {
        return n(0 === this.negative), this.iushln(t);
      }, o.prototype.iushrn = function(t, e, r) {
        var i;
        n('number' == typeof t && t >= 0), i = e ? (e - e % 26) / 26 : 0;
        var o = t % 26;
        var a = Math.min((t - o) / 26, this.length);
        var s = 67108863 ^ 67108863 >>> o << o;
        var u = r;
        if (i -= a, i = Math.max(0, i), u) {
          for (var h = 0; h < a; h++) u.words[h] = this.words[h];
          u.length = a;
        }
        if (0 === a) ; else if (this.length > a) for (this.length -= a, h = 0; h < this.length; h++) this.words[h] = this.words[h + a]; else this.words[0] = 0, 
        this.length = 1;
        var l = 0;
        for (h = this.length - 1; h >= 0 && (0 !== l || h >= i); h--) {
          var c = 0 | this.words[h];
          this.words[h] = l << 26 - o | c >>> o, l = c & s;
        }
        return u && 0 !== l && (u.words[u.length++] = l), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
      }, o.prototype.ishrn = function(t, e, r) {
        return n(0 === this.negative), this.iushrn(t, e, r);
      }, o.prototype.shln = function(t) {
        return this.clone().ishln(t);
      }, o.prototype.ushln = function(t) {
        return this.clone().iushln(t);
      }, o.prototype.shrn = function(t) {
        return this.clone().ishrn(t);
      }, o.prototype.ushrn = function(t) {
        return this.clone().iushrn(t);
      }, o.prototype.testn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        return !(this.length <= r) && !!(this.words[r] & i);
      }, o.prototype.imaskn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        if (n(0 === this.negative, 'imaskn works only with positive numbers'), this.length <= r) return this;
        if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
          var i = 67108863 ^ 67108863 >>> e << e;
          this.words[this.length - 1] &= i;
        }
        return this.strip();
      }, o.prototype.maskn = function(t) {
        return this.clone().imaskn(t);
      }, o.prototype.iaddn = function(t) {
        return n('number' == typeof t), n(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < t ? (this.words[0] = t - (0 | this.words[0]), 
        this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, this) : this._iaddn(t);
      }, o.prototype._iaddn = function(t) {
        this.words[0] += t;
        for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) this.words[e] -= 67108864, e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
        return this.length = Math.max(this.length, e + 1), this;
      }, o.prototype.isubn = function(t) {
        if (n('number' == typeof t), n(t < 67108864), t < 0) return this.iaddn(-t);
        if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, this;
        if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var e = 0; e < this.length && this.words[e] < 0; e++) this.words[e] += 67108864, 
        this.words[e + 1] -= 1;
        return this.strip();
      }, o.prototype.addn = function(t) {
        return this.clone().iaddn(t);
      }, o.prototype.subn = function(t) {
        return this.clone().isubn(t);
      }, o.prototype.iabs = function() {
        return this.negative = 0, this;
      }, o.prototype.abs = function() {
        return this.clone().iabs();
      }, o.prototype._ishlnsubmul = function(t, e, r) {
        var i = t.length + r;
        var o;
        var a;
        this._expand(i);
        var s = 0;
        for (o = 0; o < t.length; o++) {
          a = (0 | this.words[o + r]) + s;
          var u = (0 | t.words[o]) * e;
          s = ((a -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[o + r] = 67108863 & a;
        }
        for (;o < this.length - r; o++) s = (a = (0 | this.words[o + r]) + s) >> 26, this.words[o + r] = 67108863 & a;
        if (0 === s) return this.strip();
        for (n(-1 === s), s = 0, o = 0; o < this.length; o++) s = (a = -(0 | this.words[o]) + s) >> 26, this.words[o] = 67108863 & a;
        return this.negative = 1, this.strip();
      }, o.prototype._wordDiv = function(t, e) {
        var r = (this.length, t.length);
        var n = this.clone();
        var i = t;
        var a = 0 | i.words[i.length - 1];
        0 !== (r = 26 - this._countBits(a)) && (i = i.ushln(r), n.iushln(r), a = 0 | i.words[i.length - 1]);
        var s = n.length - i.length;
        var u;
        if ('mod' !== e) {
          (u = new o(null)).length = s + 1, u.words = new Array(u.length);
          for (var h = 0; h < u.length; h++) u.words[h] = 0;
        }
        var l = n.clone()._ishlnsubmul(i, 1, s);
        0 === l.negative && (n = l, u && (u.words[s] = 1));
        for (var c = s - 1; c >= 0; c--) {
          var f = 67108864 * (0 | n.words[i.length + c]) + (0 | n.words[i.length + c - 1]);
          for (f = Math.min(f / a | 0, 67108863), n._ishlnsubmul(i, f, c); 0 !== n.negative; ) f--, n.negative = 0, n._ishlnsubmul(i, 1, c), 
          n.isZero() || (n.negative ^= 1);
          u && (u.words[c] = f);
        }
        return u && u.strip(), n.strip(), 'div' !== e && 0 !== r && n.iushrn(r), {
          div: u || null,
          mod: n
        };
      }, o.prototype.divmod = function(t, e, r) {
        return n(!t.isZero()), this.isZero() ? {
          div: new o(0),
          mod: new o(0)
        } : 0 !== this.negative && 0 === t.negative ? (s = this.neg().divmod(t, e), 'mod' !== e && (i = s.div.neg()), 'div' !== e && (a = s.mod.neg(), 
        r && 0 !== a.negative && a.iadd(t)), {
          div: i,
          mod: a
        }) : 0 === this.negative && 0 !== t.negative ? (s = this.divmod(t.neg(), e), 'mod' !== e && (i = s.div.neg()), {
          div: i,
          mod: s.mod
        }) : 0 != (this.negative & t.negative) ? (s = this.neg().divmod(t.neg(), e), 'div' !== e && (a = s.mod.neg(), r && 0 !== a.negative && a.isub(t)), 
        {
          div: s.div,
          mod: a
        }) : t.length > this.length || this.cmp(t) < 0 ? {
          div: new o(0),
          mod: this
        } : 1 === t.length ? 'div' === e ? {
          div: this.divn(t.words[0]),
          mod: null
        } : 'mod' === e ? {
          div: null,
          mod: new o(this.modn(t.words[0]))
        } : {
          div: this.divn(t.words[0]),
          mod: new o(this.modn(t.words[0]))
        } : this._wordDiv(t, e);
        var i, a, s;
      }, o.prototype.div = function(t) {
        return this.divmod(t, 'div', !1).div;
      }, o.prototype.mod = function(t) {
        return this.divmod(t, 'mod', !1).mod;
      }, o.prototype.umod = function(t) {
        return this.divmod(t, 'mod', !0).mod;
      }, o.prototype.divRound = function(t) {
        var e = this.divmod(t);
        if (e.mod.isZero()) return e.div;
        var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod;
        var n = t.ushrn(1);
        var i = t.andln(1);
        var o = r.cmp(n);
        return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
      }, o.prototype.modn = function(t) {
        n(t <= 67108863);
        var e = (1 << 26) % t;
        var r = 0;
        for (var i = this.length - 1; i >= 0; i--) r = (e * r + (0 | this.words[i])) % t;
        return r;
      }, o.prototype.idivn = function(t) {
        n(t <= 67108863);
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var i = (0 | this.words[r]) + 67108864 * e;
          this.words[r] = i / t | 0, e = i % t;
        }
        return this.strip();
      }, o.prototype.divn = function(t) {
        return this.clone().idivn(t);
      }, o.prototype.egcd = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = new o(0);
        var u = new o(1);
        var h = 0;
        for (;e.isEven() && r.isEven(); ) e.iushrn(1), r.iushrn(1), ++h;
        var l = r.clone();
        var c = e.clone();
        for (;!e.isZero(); ) {
          for (var f = 0, d = 1; 0 == (e.words[0] & d) && f < 26; ++f, d <<= 1) ;
          if (f > 0) for (e.iushrn(f); f-- > 0; ) (i.isOdd() || a.isOdd()) && (i.iadd(l), a.isub(c)), i.iushrn(1), a.iushrn(1);
          for (var p = 0, m = 1; 0 == (r.words[0] & m) && p < 26; ++p, m <<= 1) ;
          if (p > 0) for (r.iushrn(p); p-- > 0; ) (s.isOdd() || u.isOdd()) && (s.iadd(l), u.isub(c)), s.iushrn(1), u.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(s), a.isub(u)) : (r.isub(e), s.isub(i), u.isub(a));
        }
        return {
          a: s,
          b: u,
          gcd: r.iushln(h)
        };
      }, o.prototype._invmp = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = r.clone();
        for (;e.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
          for (var u = 0, h = 1; 0 == (e.words[0] & h) && u < 26; ++u, h <<= 1) ;
          if (u > 0) for (e.iushrn(u); u-- > 0; ) i.isOdd() && i.iadd(s), i.iushrn(1);
          for (var l = 0, c = 1; 0 == (r.words[0] & c) && l < 26; ++l, c <<= 1) ;
          if (l > 0) for (r.iushrn(l); l-- > 0; ) a.isOdd() && a.iadd(s), a.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(a)) : (r.isub(e), a.isub(i));
        }
        var f;
        return (f = 0 === e.cmpn(1) ? i : a).cmpn(0) < 0 && f.iadd(t), f;
      }, o.prototype.gcd = function(t) {
        if (this.isZero()) return t.abs();
        if (t.isZero()) return this.abs();
        var e = this.clone();
        var r = t.clone();
        e.negative = 0, r.negative = 0;
        for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
        for (;;) {
          for (;e.isEven(); ) e.iushrn(1);
          for (;r.isEven(); ) r.iushrn(1);
          var i = e.cmp(r);
          if (i < 0) {
            var o = e;
            e = r, r = o;
          } else if (0 === i || 0 === r.cmpn(1)) break;
          e.isub(r);
        }
        return r.iushln(n);
      }, o.prototype.invm = function(t) {
        return this.egcd(t).a.umod(t);
      }, o.prototype.isEven = function() {
        return 0 == (1 & this.words[0]);
      }, o.prototype.isOdd = function() {
        return 1 == (1 & this.words[0]);
      }, o.prototype.andln = function(t) {
        return this.words[0] & t;
      }, o.prototype.bincn = function(t) {
        n('number' == typeof t);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
        var o = i;
        for (var a = r; 0 !== o && a < this.length; a++) {
          var s = 0 | this.words[a];
          o = (s += o) >>> 26, s &= 67108863, this.words[a] = s;
        }
        return 0 !== o && (this.words[a] = o, this.length++), this;
      }, o.prototype.isZero = function() {
        return 1 === this.length && 0 === this.words[0];
      }, o.prototype.cmpn = function(t) {
        var e = t < 0;
        if (0 !== this.negative && !e) return -1;
        if (0 === this.negative && e) return 1;
        var r;
        if (this.strip(), this.length > 1) r = 1; else {
          e && (t = -t), n(t <= 67108863, 'Number is too big');
          var i = 0 | this.words[0];
          r = i === t ? 0 : i < t ? -1 : 1;
        }
        return 0 !== this.negative ? 0 | -r : r;
      }, o.prototype.cmp = function(t) {
        if (0 !== this.negative && 0 === t.negative) return -1;
        if (0 === this.negative && 0 !== t.negative) return 1;
        var e = this.ucmp(t);
        return 0 !== this.negative ? 0 | -e : e;
      }, o.prototype.ucmp = function(t) {
        if (this.length > t.length) return 1;
        if (this.length < t.length) return -1;
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var n = 0 | this.words[r];
          var i = 0 | t.words[r];
          if (n !== i) {
            n < i ? e = -1 : n > i && (e = 1);
            break;
          }
        }
        return e;
      }, o.prototype.gtn = function(t) {
        return 1 === this.cmpn(t);
      }, o.prototype.gt = function(t) {
        return 1 === this.cmp(t);
      }, o.prototype.gten = function(t) {
        return this.cmpn(t) >= 0;
      }, o.prototype.gte = function(t) {
        return this.cmp(t) >= 0;
      }, o.prototype.ltn = function(t) {
        return -1 === this.cmpn(t);
      }, o.prototype.lt = function(t) {
        return -1 === this.cmp(t);
      }, o.prototype.lten = function(t) {
        return this.cmpn(t) <= 0;
      }, o.prototype.lte = function(t) {
        return this.cmp(t) <= 0;
      }, o.prototype.eqn = function(t) {
        return 0 === this.cmpn(t);
      }, o.prototype.eq = function(t) {
        return 0 === this.cmp(t);
      }, o.red = function(t) {
        return new b(t);
      }, o.prototype.toRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), n(0 === this.negative, 'red works only with positives'), t.convertTo(this)._forceRed(t);
      }, o.prototype.fromRed = function() {
        return n(this.red, 'fromRed works only with numbers in reduction context'), this.red.convertFrom(this);
      }, o.prototype._forceRed = function(t) {
        return this.red = t, this;
      }, o.prototype.forceRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), this._forceRed(t);
      }, o.prototype.redAdd = function(t) {
        return n(this.red, 'redAdd works only with red numbers'), this.red.add(this, t);
      }, o.prototype.redIAdd = function(t) {
        return n(this.red, 'redIAdd works only with red numbers'), this.red.iadd(this, t);
      }, o.prototype.redSub = function(t) {
        return n(this.red, 'redSub works only with red numbers'), this.red.sub(this, t);
      }, o.prototype.redISub = function(t) {
        return n(this.red, 'redISub works only with red numbers'), this.red.isub(this, t);
      }, o.prototype.redShl = function(t) {
        return n(this.red, 'redShl works only with red numbers'), this.red.shl(this, t);
      }, o.prototype.redMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.mul(this, t);
      }, o.prototype.redIMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.imul(this, t);
      }, o.prototype.redSqr = function() {
        return n(this.red, 'redSqr works only with red numbers'), this.red._verify1(this), this.red.sqr(this);
      }, o.prototype.redISqr = function() {
        return n(this.red, 'redISqr works only with red numbers'), this.red._verify1(this), this.red.isqr(this);
      }, o.prototype.redSqrt = function() {
        return n(this.red, 'redSqrt works only with red numbers'), this.red._verify1(this), this.red.sqrt(this);
      }, o.prototype.redInvm = function() {
        return n(this.red, 'redInvm works only with red numbers'), this.red._verify1(this), this.red.invm(this);
      }, o.prototype.redNeg = function() {
        return n(this.red, 'redNeg works only with red numbers'), this.red._verify1(this), this.red.neg(this);
      }, o.prototype.redPow = function(t) {
        return n(this.red && !t.red, 'redPow(normalNum)'), this.red._verify1(this), this.red.pow(this, t);
      };
      var v = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function g(t, e) {
        this.name = t, this.p = new o(e, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      function y() {
        g.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      function w() {
        g.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      function _() {
        g.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      function M() {
        g.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      function b(t) {
        if ('string' == typeof t) {
          var e = o._prime(t);
          this.m = e.p, this.prime = e;
        } else n(t.gtn(1), 'modulus must be greater than 1'), this.m = t, this.prime = null;
      }
      function k(t) {
        b.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), 
        this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
        this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      g.prototype._tmp = function() {
        var t = new o(null);
        return t.words = new Array(Math.ceil(this.n / 13)), t;
      }, g.prototype.ireduce = function(t) {
        var e = t;
        var r;
        do {
          this.split(e, this.tmp), r = (e = (e = this.imulK(e)).iadd(this.tmp)).bitLength();
        } while (r > this.n);
        var n = r < this.n ? -1 : e.ucmp(this.p);
        return 0 === n ? (e.words[0] = 0, e.length = 1) : n > 0 ? e.isub(this.p) : e.strip(), e;
      }, g.prototype.split = function(t, e) {
        t.iushrn(this.n, 0, e);
      }, g.prototype.imulK = function(t) {
        return t.imul(this.k);
      }, i(y, g), y.prototype.split = function(t, e) {
        var r = 4194303;
        var n = Math.min(t.length, 9);
        for (var i = 0; i < n; i++) e.words[i] = t.words[i];
        if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
        var o = t.words[9];
        for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
          var a = 0 | t.words[i];
          t.words[i - 10] = (a & r) << 4 | o >>> 22, o = a;
        }
        o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
      }, y.prototype.imulK = function(t) {
        t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 0 | t.words[r];
          e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
        }
        return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), t;
      }, i(w, g), i(_, g), i(M, g), M.prototype.imulK = function(t) {
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 19 * (0 | t.words[r]) + e;
          var i = 67108863 & n;
          n >>>= 26, t.words[r] = i, e = n;
        }
        return 0 !== e && (t.words[t.length++] = e), t;
      }, o._prime = function(t) {
        if (v[t]) return v[t];
        var e;
        if ('k256' === t) e = new y; else if ('p224' === t) e = new w; else if ('p192' === t) e = new _; else {
          if ('p25519' !== t) throw new Error('Unknown prime ' + t);
          e = new M;
        }
        return v[t] = e, e;
      }, b.prototype._verify1 = function(t) {
        n(0 === t.negative, 'red works only with positives'), n(t.red, 'red works only with red numbers');
      }, b.prototype._verify2 = function(t, e) {
        n(0 == (t.negative | e.negative), 'red works only with positives'), n(t.red && t.red === e.red, 'red works only with red numbers');
      }, b.prototype.imod = function(t) {
        return this.prime ? this.prime.ireduce(t)._forceRed(this) : t.umod(this.m)._forceRed(this);
      }, b.prototype.neg = function(t) {
        return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
      }, b.prototype.add = function(t, e) {
        this._verify2(t, e);
        var r = t.add(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
      }, b.prototype.iadd = function(t, e) {
        this._verify2(t, e);
        var r = t.iadd(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r;
      }, b.prototype.sub = function(t, e) {
        this._verify2(t, e);
        var r = t.sub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
      }, b.prototype.isub = function(t, e) {
        this._verify2(t, e);
        var r = t.isub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r;
      }, b.prototype.shl = function(t, e) {
        return this._verify1(t), this.imod(t.ushln(e));
      }, b.prototype.imul = function(t, e) {
        return this._verify2(t, e), this.imod(t.imul(e));
      }, b.prototype.mul = function(t, e) {
        return this._verify2(t, e), this.imod(t.mul(e));
      }, b.prototype.isqr = function(t) {
        return this.imul(t, t.clone());
      }, b.prototype.sqr = function(t) {
        return this.mul(t, t);
      }, b.prototype.sqrt = function(t) {
        if (t.isZero()) return t.clone();
        var e = this.m.andln(3);
        if (n(e % 2 == 1), 3 === e) {
          var r = this.m.add(new o(1)).iushrn(2);
          return this.pow(t, r);
        }
        var i = this.m.subn(1);
        var a = 0;
        for (;!i.isZero() && 0 === i.andln(1); ) a++, i.iushrn(1);
        n(!i.isZero());
        var s = new o(1).toRed(this);
        var u = s.redNeg();
        var h = this.m.subn(1).iushrn(1);
        var l = this.m.bitLength();
        for (l = new o(2 * l * l).toRed(this); 0 !== this.pow(l, h).cmp(u); ) l.redIAdd(u);
        var c = this.pow(l, i);
        var f = this.pow(t, i.addn(1).iushrn(1));
        var d = this.pow(t, i);
        var p = a;
        for (;0 !== d.cmp(s); ) {
          var m = d;
          for (var v = 0; 0 !== m.cmp(s); v++) m = m.redSqr();
          n(v < p);
          var g = this.pow(c, new o(1).iushln(p - v - 1));
          f = f.redMul(g), c = g.redSqr(), d = d.redMul(c), p = v;
        }
        return f;
      }, b.prototype.invm = function(t) {
        var e = t._invmp(this.m);
        return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
      }, b.prototype.pow = function(t, e) {
        if (e.isZero()) return new o(1).toRed(this);
        if (0 === e.cmpn(1)) return t.clone();
        var r = new Array(16);
        r[0] = new o(1).toRed(this), r[1] = t;
        for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
        var i = r[0];
        var a = 0;
        var s = 0;
        var u = e.bitLength() % 26;
        for (0 === u && (u = 26), n = e.length - 1; n >= 0; n--) {
          var h = e.words[n];
          for (var l = u - 1; l >= 0; l--) {
            var c = h >> l & 1;
            i !== r[0] && (i = this.sqr(i)), 0 !== c || 0 !== a ? (a <<= 1, a |= c, (4 === ++s || 0 === n && 0 === l) && (i = this.mul(i, r[a]), 
            s = 0, a = 0)) : s = 0;
          }
          u = 26;
        }
        return i;
      }, b.prototype.convertTo = function(t) {
        var e = t.umod(this.m);
        return e === t ? e.clone() : e;
      }, b.prototype.convertFrom = function(t) {
        var e = t.clone();
        return e.red = null, e;
      }, o.mont = function(t) {
        return new k(t);
      }, i(k, b), k.prototype.convertTo = function(t) {
        return this.imod(t.ushln(this.shift));
      }, k.prototype.convertFrom = function(t) {
        var e = this.imod(t.mul(this.rinv));
        return e.red = null, e;
      }, k.prototype.imul = function(t, e) {
        if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
        var r = t.imul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var o = i;
        return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
      }, k.prototype.mul = function(t, e) {
        if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
        var r = t.mul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var a = i;
        return i.cmp(this.m) >= 0 ? a = i.isub(this.m) : i.cmpn(0) < 0 && (a = i.iadd(this.m)), a._forceRed(this);
      }, k.prototype.invm = function(t) {
        return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
      };
    }(t = r.nmd(t), this);
  },
  62873: (t, e) => {
    "use strict";
    function r(t) {
      let e;
      return "undefined" != typeof window && void 0 !== window[t] && (e = window[t]), e;
    }
    function n(t) {
      const e = r(t);
      if (!e) throw new Error(`${t} is not defined in Window`);
      return e;
    }
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.getLocalStorage = e.getLocalStorageOrThrow = e.getCrypto = e.getCryptoOrThrow = e.getLocation = e.getLocationOrThrow = e.getNavigator = e.getNavigatorOrThrow = e.getDocument = e.getDocumentOrThrow = e.getFromWindowOrThrow = e.getFromWindow = void 0, 
    e.getFromWindow = r, e.getFromWindowOrThrow = n, e.getDocumentOrThrow = function() {
      return n("document");
    }, e.getDocument = function() {
      return r("document");
    }, e.getNavigatorOrThrow = function() {
      return n("navigator");
    }, e.getNavigator = function() {
      return r("navigator");
    }, e.getLocationOrThrow = function() {
      return n("location");
    }, e.getLocation = function() {
      return r("location");
    }, e.getCryptoOrThrow = function() {
      return n("crypto");
    }, e.getCrypto = function() {
      return r("crypto");
    }, e.getLocalStorageOrThrow = function() {
      return n("localStorage");
    }, e.getLocalStorage = function() {
      return r("localStorage");
    };
  },
  65755: (t, e, r) => {
    "use strict";
    e.D = void 0;
    const n = r(62873);
    e.D = function() {
      let t;
      let e;
      try {
        t = n.getDocumentOrThrow(), e = n.getLocationOrThrow();
      } catch (o) {
        return null;
      }
      function r(...e) {
        const r = t.getElementsByTagName("meta");
        for (let t = 0; t < r.length; t++) {
          const n = r[t];
          const i = [ "itemprop", "property", "name" ].map((t => n.getAttribute(t))).filter((t => !!t && e.includes(t)));
          if (i.length && i) {
            const t = n.getAttribute("content");
            if (t) return t;
          }
        }
        return "";
      }
      const i = function() {
        let e = r("name", "og:site_name", "og:title", "twitter:title");
        return e || (e = t.title), e;
      }();
      return {
        description: function() {
          return r("description", "og:description", "twitter:description", "keywords");
        }(),
        url: e.origin,
        icons: function() {
          const r = t.getElementsByTagName("link");
          const n = [];
          for (let t = 0; t < r.length; t++) {
            const i = r[t];
            const o = i.getAttribute("rel");
            if (o && o.toLowerCase().indexOf("icon") > -1) {
              const t = i.getAttribute("href");
              if (t) if (-1 === t.toLowerCase().indexOf("https:") && -1 === t.toLowerCase().indexOf("http:") && 0 !== t.indexOf("//")) {
                let r = e.protocol + "//" + e.host;
                if (0 === t.indexOf("/")) r += t; else {
                  const n = e.pathname.split("/");
                  n.pop();
                  r += n.join("/") + "/" + t;
                }
                n.push(r);
              } else if (0 === t.indexOf("//")) {
                const r = e.protocol + t;
                n.push(r);
              } else n.push(t);
            }
          }
          return n;
        }(),
        name: i
      };
    };
  },
  85078: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    });
    var n = r(70655);
    var i = r(2403);
    var o = function() {
      function t() {
        this._semaphore = new i.default(1);
      }
      return t.prototype.acquire = function() {
        return n.__awaiter(this, void 0, void 0, (function() {
          var t;
          return n.__generator(this, (function(e) {
            switch (e.label) {
             case 0:
              return [ 4, this._semaphore.acquire() ];

             case 1:
              return t = e.sent(), [ 2, t[1] ];
            }
          }));
        }));
      }, t.prototype.runExclusive = function(t) {
        return this._semaphore.runExclusive((function() {
          return t();
        }));
      }, t.prototype.isLocked = function() {
        return this._semaphore.isLocked();
      }, t.prototype.release = function() {
        this._semaphore.release();
      }, t;
    }();
    e.default = o;
  },
  2403: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    });
    var n = r(70655);
    var i = function() {
      function t(t) {
        if (this._maxConcurrency = t, this._queue = [], t <= 0) throw new Error('semaphore must be initialized to a positive value');
        this._value = t;
      }
      return t.prototype.acquire = function() {
        var t = this;
        var e = this.isLocked();
        var r = new Promise((function(e) {
          return t._queue.push(e);
        }));
        return e || this._dispatch(), r;
      }, t.prototype.runExclusive = function(t) {
        return n.__awaiter(this, void 0, void 0, (function() {
          var e, r, i;
          return n.__generator(this, (function(n) {
            switch (n.label) {
             case 0:
              return [ 4, this.acquire() ];

             case 1:
              e = n.sent(), r = e[0], i = e[1], n.label = 2;

             case 2:
              return n.trys.push([ 2, , 4, 5 ]), [ 4, t(r) ];

             case 3:
              return [ 2, n.sent() ];

             case 4:
              return i(), [ 7 ];

             case 5:
              return [ 2 ];
            }
          }));
        }));
      }, t.prototype.isLocked = function() {
        return this._value <= 0;
      }, t.prototype.release = function() {
        if (this._maxConcurrency > 1) throw new Error('this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead');
        if (this._currentReleaser) {
          var t = this._currentReleaser;
          this._currentReleaser = void 0, t();
        }
      }, t.prototype._dispatch = function() {
        var t = this;
        var e = this._queue.shift();
        if (e) {
          var r = !1;
          this._currentReleaser = function() {
            r || (r = !0, t._value++, t._dispatch());
          }, e([ this._value--, this._currentReleaser ]);
        }
      }, t;
    }();
    e.default = i;
  },
  48125: (t, e, r) => {
    "use strict";
    e.WU = void 0;
    var n = r(85078);
    Object.defineProperty(e, "WU", {
      enumerable: !0,
      get: function() {
        return n.default;
      }
    });
    var i = r(2403);
    var o = r(41960);
  },
  41960: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.withTimeout = void 0;
    var n = r(70655);
    e.withTimeout = function(t, e, r) {
      var i = this;
      return void 0 === r && (r = new Error('timeout')), {
        acquire: function() {
          return new Promise((function(o, a) {
            return n.__awaiter(i, void 0, void 0, (function() {
              var i, s;
              return n.__generator(this, (function(n) {
                switch (n.label) {
                 case 0:
                  return i = !1, setTimeout((function() {
                    i = !0, a(r);
                  }), e), [ 4, t.acquire() ];

                 case 1:
                  return s = n.sent(), i ? (Array.isArray(s) ? s[1] : s)() : o(s), [ 2 ];
                }
              }));
            }));
          }));
        },
        runExclusive: function(t) {
          return n.__awaiter(this, void 0, void 0, (function() {
            var e, r;
            return n.__generator(this, (function(n) {
              switch (n.label) {
               case 0:
                e = function() {}, n.label = 1;

               case 1:
                return n.trys.push([ 1, , 7, 8 ]), [ 4, this.acquire() ];

               case 2:
                return r = n.sent(), Array.isArray(r) ? (e = r[1], [ 4, t(r[0]) ]) : [ 3, 4 ];

               case 3:
                return [ 2, n.sent() ];

               case 4:
                return e = r, [ 4, t() ];

               case 5:
                return [ 2, n.sent() ];

               case 6:
                return [ 3, 8 ];

               case 7:
                return e(), [ 7 ];

               case 8:
                return [ 2 ];
              }
            }));
          }));
        },
        release: function() {
          t.release();
        },
        isLocked: function() {
          return t.isLocked();
        }
      };
    };
  },
  44409: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      return (0, i.default)((function(e, r) {
        var i;
        try {
          i = t.apply(this, e);
        } catch (o) {
          return r(o);
        }
        (0, n.default)(i) && 'function' == typeof i.then ? i.then((function(t) {
          s(r, null, t);
        }), (function(t) {
          s(r, t.message ? t : new Error(t));
        })) : r(null, i);
      }));
    };
    var n = a(r(13218));
    var i = a(r(43519));
    var o = a(r(3111));
    function a(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    function s(t, e, r) {
      try {
        t(e, r);
      } catch (n) {
        (0, o.default)(u, n);
      }
    }
    function u(t) {
      throw t;
    }
    t.exports = e.default;
  },
  14338: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e, r, a) {
      (0, n.default)(e)(t, (0, i.default)((0, o.default)(r)), a);
    };
    var n = a(r(56954));
    var i = a(r(36529));
    var o = a(r(28993));
    function a(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  71846: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e, r) {
      ((0, n.default)(t) ? f : d)(t, (0, l.default)(e), r);
    };
    var n = c(r(98612));
    var i = c(r(1605));
    var o = c(r(97388));
    var a = c(r(53875));
    var s = c(r(50308));
    var u = c(r(46979));
    var h = c(r(13362));
    var l = c(r(28993));
    function c(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    function f(t, e, r) {
      r = (0, u.default)(r || s.default);
      var n = 0, o = 0, a = t.length;
      function l(t, e) {
        t ? r(t) : ++o !== a && e !== i.default || r(null);
      }
      for (0 === a && r(null); n < a; n++) e(t[n], n, (0, h.default)(l));
    }
    var d = (0, a.default)(o.default, Infinity);
    t.exports = e.default;
  },
  97388: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e, r, o) {
      (0, n.default)(e)(t, (0, i.default)(r), o);
    };
    var n = o(r(56954));
    var i = o(r(28993));
    function o(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  94282: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    });
    var n = o(r(14338));
    var i = o(r(53875));
    function o(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    e.default = (0, i.default)(n.default, 1), t.exports = e.default;
  },
  1605: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = {}, t.exports = e.default;
  },
  53875: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e) {
      return function(r, n, i) {
        return t(r, e, n, i);
      };
    }, t.exports = e.default;
  },
  68468: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      return function(e, r, o) {
        return t(n.default, e, (0, i.default)(r), o);
      };
    };
    var n = o(r(71846));
    var i = o(r(28993));
    function o(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  56954: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      return function(e, r, u) {
        if (u = (0, i.default)(u || n.default), t <= 0 || !e) return u(null);
        var h = (0, o.default)(e);
        var l = !1;
        var c = 0;
        var f = !1;
        function d(t, e) {
          if (c -= 1, t) l = !0, u(t); else {
            if (e === s.default || l && c <= 0) return l = !0, u(null);
            f || p();
          }
        }
        function p() {
          for (f = !0; c < t && !l; ) {
            var e = h();
            if (null === e) return l = !0, void (c <= 0 && u(null));
            c += 1, r(e.value, e.key, (0, a.default)(d));
          }
          f = !1;
        }
        p();
      };
    };
    var n = u(r(50308));
    var i = u(r(46979));
    var o = u(r(9733));
    var a = u(r(13362));
    var s = u(r(1605));
    function u(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  37818: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      return r && t[r] && t[r]();
    };
    var r = 'function' == typeof Symbol && Symbol.iterator;
    t.exports = e.default;
  },
  43519: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      return function() {
        var e = (0, n.default)(arguments);
        var r = e.pop();
        t.call(this, e, r);
      };
    };
    var n = function(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }(r(63033));
    t.exports = e.default;
  },
  9733: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      if ((0, n.default)(t)) return function(t) {
        var e = -1;
        var r = t.length;
        return function() {
          return ++e < r ? {
            value: t[e],
            key: e
          } : null;
        };
      }(t);
      var e = (0, i.default)(t);
      return e ? function(t) {
        var e = -1;
        return function() {
          var r = t.next();
          return r.done ? null : (e++, {
            value: r.value,
            key: e
          });
        };
      }(e) : function(t) {
        var e = (0, o.default)(t);
        var r = -1;
        var n = e.length;
        return function i() {
          var o = e[++r];
          return '__proto__' === o ? i() : r < n ? {
            value: t[o],
            key: o
          } : null;
        };
      }(t);
    };
    var n = a(r(98612));
    var i = a(r(37818));
    var o = a(r(3674));
    function a(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  47662: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e, r, o) {
      o = o || n.default, e = e || [];
      var a = [];
      var s = 0;
      var u = (0, i.default)(r);
      t(e, (function(t, e, r) {
        var n = s++;
        u(t, (function(t, e) {
          a[n] = e, r(t);
        }));
      }), (function(t) {
        o(t, a);
      }));
    };
    var n = o(r(50308));
    var i = o(r(28993));
    function o(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  46979: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      return function() {
        if (null !== t) {
          var e = t;
          t = null, e.apply(this, arguments);
        }
      };
    }, t.exports = e.default;
  },
  13362: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      return function() {
        if (null === t) throw new Error("Callback was already called.");
        var e = t;
        t = null, e.apply(this, arguments);
      };
    }, t.exports = e.default;
  },
  73409: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e, r) {
      r = r || n.default;
      var s = (0, i.default)(e) ? [] : {};
      t(e, (function(t, e, r) {
        (0, a.default)(t)((function(t, n) {
          arguments.length > 2 && (n = (0, o.default)(arguments, 1)), s[e] = n, r(t);
        }));
      }), (function(t) {
        r(t, s);
      }));
    };
    var n = s(r(50308));
    var i = s(r(98612));
    var o = s(r(63033));
    var a = s(r(28993));
    function s(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  3111: (t, e, r) => {
    "use strict";
    var n = r(34155);
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.hasNextTick = e.hasSetImmediate = void 0, e.fallback = s, e.wrap = u;
    var i = function(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }(r(63033));
    var o = e.hasSetImmediate = 'function' == typeof setImmediate && setImmediate;
    var a = e.hasNextTick = 'object' == typeof n && 'function' == typeof n.nextTick;
    function s(t) {
      setTimeout(t, 0);
    }
    function u(t) {
      return function(e) {
        var r = (0, i.default)(arguments, 1);
        t((function() {
          e.apply(null, r);
        }));
      };
    }
    var h;
    h = o ? setImmediate : a ? n.nextTick : s, e.default = u(h);
  },
  63033: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e) {
      e |= 0;
      var r = Math.max(t.length - e, 0);
      var n = Array(r);
      for (var i = 0; i < r; i++) n[i] = t[e + i];
      return n;
    }, t.exports = e.default;
  },
  36529: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      return function(e, r, n) {
        return t(e, n);
      };
    }, t.exports = e.default;
  },
  28993: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.isAsync = void 0;
    var n = function(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }(r(44409));
    var i = 'function' == typeof Symbol;
    function o(t) {
      return i && 'AsyncFunction' === t[Symbol.toStringTag];
    }
    e.default = function(t) {
      return o(t) ? (0, n.default)(t) : t;
    }, e.isAsync = o;
  },
  94005: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    });
    var n = o(r(68468));
    var i = o(r(47662));
    function o(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    e.default = (0, n.default)(i.default), t.exports = e.default;
  },
  80047: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e) {
      (0, i.default)(n.default, t, e);
    };
    var n = o(r(71846));
    var i = o(r(73409));
    function o(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  7879: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t, e) {
      if (e = (0, o.default)(e || i.default), !(0, n.default)(t)) return e(new Error('First argument to waterfall must be an array of functions'));
      if (!t.length) return e();
      var r = 0;
      function h(e) {
        var n = (0, u.default)(t[r++]);
        e.push((0, s.default)(l)), n.apply(null, e);
      }
      function l(n) {
        if (n || r === t.length) return e.apply(null, arguments);
        h((0, a.default)(arguments, 1));
      }
      h([]);
    };
    var n = h(r(1469));
    var i = h(r(50308));
    var o = h(r(46979));
    var a = h(r(63033));
    var s = h(r(13362));
    var u = h(r(28993));
    function h(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    t.exports = e.default;
  },
  20640: (t, e, r) => {
    "use strict";
    var n = r(25108);
    var i = r(11742);
    var o = {
      "text/plain": "Text",
      "text/html": "Url",
      default: "Text"
    };
    t.exports = function(t, e) {
      var r, a, s, u, h, l, c = !1;
      e || (e = {}), r = e.debug || !1;
      try {
        if (s = i(), u = document.createRange(), h = document.getSelection(), (l = document.createElement("span")).textContent = t, 
        l.style.all = "unset", l.style.position = "fixed", l.style.top = 0, l.style.clip = "rect(0, 0, 0, 0)", l.style.whiteSpace = "pre", 
        l.style.webkitUserSelect = "text", l.style.MozUserSelect = "text", l.style.msUserSelect = "text", l.style.userSelect = "text", 
        l.addEventListener("copy", (function(i) {
          if (i.stopPropagation(), e.format) if (i.preventDefault(), void 0 === i.clipboardData) {
            r && n.warn("unable to use e.clipboardData"), r && n.warn("trying IE specific stuff"), window.clipboardData.clearData();
            var a = o[e.format] || o.default;
            window.clipboardData.setData(a, t);
          } else i.clipboardData.clearData(), i.clipboardData.setData(e.format, t);
          e.onCopy && (i.preventDefault(), e.onCopy(i.clipboardData));
        })), document.body.appendChild(l), u.selectNodeContents(l), h.addRange(u), !document.execCommand("copy")) throw new Error("copy command was unsuccessful");
        c = !0;
      } catch (f) {
        r && n.error("unable to copy using execCommand: ", f), r && n.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(e.format || "text", t), e.onCopy && e.onCopy(window.clipboardData), c = !0;
        } catch (f) {
          r && n.error("unable to copy using clipboardData: ", f), r && n.error("falling back to prompt"), a = function(t) {
            var e = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
            return t.replace(/#{\s*key\s*}/g, e);
          }("message" in e ? e.message : "Copy to clipboard: #{key}, Enter"), window.prompt(a, t);
        }
      } finally {
        h && ("function" == typeof h.removeRange ? h.removeRange(u) : h.removeAllRanges()), l && document.body.removeChild(l), s();
      }
      return c;
    };
  },
  44020: t => {
    "use strict";
    var e = '%[a-f0-9]{2}';
    var r = new RegExp(e, 'gi');
    var n = new RegExp('(' + e + ')+', 'gi');
    function i(t, e) {
      try {
        return decodeURIComponent(t.join(''));
      } catch (o) {}
      if (1 === t.length) return t;
      e = e || 1;
      var r = t.slice(0, e);
      var n = t.slice(e);
      return Array.prototype.concat.call([], i(r), i(n));
    }
    function o(t) {
      try {
        return decodeURIComponent(t);
      } catch (o) {
        var e = t.match(r);
        for (var n = 1; n < e.length; n++) e = (t = i(e, n).join('')).match(r);
        return t;
      }
    }
    t.exports = function(t) {
      if ('string' != typeof t) throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof t + '`');
      try {
        return t = t.replace(/\+/g, ' '), decodeURIComponent(t);
      } catch (e) {
        return function(t) {
          var r = {
            '%FE%FF': '��',
            '%FF%FE': '��'
          };
          var i = n.exec(t);
          for (;i; ) {
            try {
              r[i[0]] = decodeURIComponent(i[0]);
            } catch (e) {
              var a = o(i[0]);
              a !== i[0] && (r[i[0]] = a);
            }
            i = n.exec(t);
          }
          r['%C2'] = '�';
          var s = Object.keys(r);
          for (var u = 0; u < s.length; u++) {
            var h = s[u];
            t = t.replace(new RegExp(h, 'g'), r[h]);
          }
          return t;
        }(t);
      }
    };
  },
  65987: t => {
    "use strict";
    var e = {
      single_source_shortest_paths: function(t, r, n) {
        var i = {};
        var o = {};
        o[r] = 0;
        var a = e.PriorityQueue.make();
        var s, u, h, l, c, f, d;
        for (a.push(r, 0); !a.empty(); ) for (h in u = (s = a.pop()).value, l = s.cost, c = t[u] || {}) c.hasOwnProperty(h) && (f = l + c[h], 
        d = o[h], (void 0 === o[h] || d > f) && (o[h] = f, a.push(h, f), i[h] = u));
        if (void 0 !== n && void 0 === o[n]) {
          var p = [ 'Could not find a path from ', r, ' to ', n, '.' ].join('');
          throw new Error(p);
        }
        return i;
      },
      extract_shortest_path_from_predecessor_list: function(t, e) {
        var r = [];
        var n = e;
        for (;n; ) r.push(n), t[n], n = t[n];
        return r.reverse(), r;
      },
      find_path: function(t, r, n) {
        var i = e.single_source_shortest_paths(t, r, n);
        return e.extract_shortest_path_from_predecessor_list(i, n);
      },
      PriorityQueue: {
        make: function(t) {
          var r, n = e.PriorityQueue, i = {};
          for (r in t = t || {}, n) n.hasOwnProperty(r) && (i[r] = n[r]);
          return i.queue = [], i.sorter = t.sorter || n.default_sorter, i;
        },
        default_sorter: function(t, e) {
          return t.cost - e.cost;
        },
        push: function(t, e) {
          var r = {
            value: t,
            cost: e
          };
          this.queue.push(r), this.queue.sort(this.sorter);
        },
        pop: function() {
          return this.queue.shift();
        },
        empty: function() {
          return 0 === this.queue.length;
        }
      }
    };
    t.exports = e;
  },
  55850: (t, e, r) => {
    r(75682);
    r(12352);
    const n = r(37253);
    const i = (t, e) => t + e;
    const o = [ 'sync', 'latest' ];
    function a(t) {
      return Number.parseInt(t, 16);
    }
    t.exports = class extends n {
      constructor(t = {}) {
        super(), this._blockResetDuration = t.blockResetDuration || 2e4, this._blockResetTimeout, this._currentBlock = null, this._isRunning = !1, 
        this._onNewListener = this._onNewListener.bind(this), this._onRemoveListener = this._onRemoveListener.bind(this), this._resetCurrentBlock = this._resetCurrentBlock.bind(this), 
        this._setupInternalEvents();
      }
      isRunning() {
        return this._isRunning;
      }
      getCurrentBlock() {
        return this._currentBlock;
      }
      async getLatestBlock() {
        if (this._currentBlock) return this._currentBlock;
        return await new Promise((t => this.once('latest', t)));
      }
      removeAllListeners(t) {
        t ? super.removeAllListeners(t) : super.removeAllListeners(), this._setupInternalEvents(), this._onRemoveListener();
      }
      _start() {}
      _end() {}
      _setupInternalEvents() {
        this.removeListener('newListener', this._onNewListener), this.removeListener('removeListener', this._onRemoveListener), 
        this.on('newListener', this._onNewListener), this.on('removeListener', this._onRemoveListener);
      }
      _onNewListener(t, e) {
        o.includes(t) && this._maybeStart();
      }
      _onRemoveListener(t, e) {
        this._getBlockTrackerEventCount() > 0 || this._maybeEnd();
      }
      _maybeStart() {
        this._isRunning || (this._isRunning = !0, this._cancelBlockResetTimeout(), this._start());
      }
      _maybeEnd() {
        this._isRunning && (this._isRunning = !1, this._setupBlockResetTimeout(), this._end());
      }
      _getBlockTrackerEventCount() {
        return o.map((t => this.listenerCount(t))).reduce(i);
      }
      _newPotentialLatest(t) {
        const e = this._currentBlock;
        e && a(t) <= a(e) || this._setCurrentBlock(t);
      }
      _setCurrentBlock(t) {
        const e = this._currentBlock;
        this._currentBlock = t, this.emit('latest', t), this.emit('sync', {
          oldBlock: e,
          newBlock: t
        });
      }
      _setupBlockResetTimeout() {
        this._cancelBlockResetTimeout(), this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration), 
        this._blockResetTimeout.unref && this._blockResetTimeout.unref();
      }
      _cancelBlockResetTimeout() {
        clearTimeout(this._blockResetTimeout);
      }
      _resetCurrentBlock() {
        this._currentBlock = null;
      }
    };
  },
  75012: (t, e, r) => {
    var n = r(25108);
    const i = r(12352);
    const o = r(55850);
    function a(t, e) {
      return new Promise((r => {
        const n = setTimeout(r, t);
        n.unref && e && n.unref();
      }));
    }
    t.exports = class extends o {
      constructor(t = {}) {
        if (!t.provider) throw new Error('PollingBlockTracker - no provider specified.');
        const e = t.pollingInterval || 2e4;
        const r = t.retryTimeout || e / 10;
        const n = void 0 === t.keepEventLoopActive || t.keepEventLoopActive;
        const i = t.setSkipCacheFlag || !1;
        super(Object.assign({
          blockResetDuration: e
        }, t)), this._provider = t.provider, this._pollingInterval = e, this._retryTimeout = r, this._keepEventLoopActive = n, this._setSkipCacheFlag = i;
      }
      async checkForLatestBlock() {
        return await this._updateLatestBlock(), await this.getLatestBlock();
      }
      _start() {
        this._performSync().catch((t => this.emit('error', t)));
      }
      async _performSync() {
        for (;this._isRunning; ) try {
          await this._updateLatestBlock(), await a(this._pollingInterval, !this._keepEventLoopActive);
        } catch (t) {
          const r = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${t.stack}`);
          try {
            this.emit('error', r);
          } catch (e) {
            n.error(r);
          }
          await a(this._retryTimeout, !this._keepEventLoopActive);
        }
      }
      async _updateLatestBlock() {
        const t = await this._fetchLatestBlock();
        this._newPotentialLatest(t);
      }
      async _fetchLatestBlock() {
        const t = {
          jsonrpc: "2.0",
          id: 1,
          method: 'eth_blockNumber',
          params: []
        };
        this._setSkipCacheFlag && (t.skipCache = !0);
        const e = await i((e => this._provider.sendAsync(t, e)))();
        if (e.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${e.error}`);
        return e.result;
      }
    };
  },
  23256: (t, e, r) => {
    const n = r(76622);
    t.exports = class extends n {
      constructor() {
        super(), this.allResults = [];
      }
      async update() {
        throw new Error('BaseFilterWithHistory - no update method specified');
      }
      addResults(t) {
        this.allResults = this.allResults.concat(t), super.addResults(t);
      }
      addInitialResults(t) {
        this.allResults = this.allResults.concat(t), super.addInitialResults(t);
      }
      getAllResults() {
        return this.allResults;
      }
    };
  },
  76622: (t, e, r) => {
    const n = r(19394).default;
    t.exports = class extends n {
      constructor() {
        super(), this.updates = [];
      }
      async initialize() {}
      async update() {
        throw new Error('BaseFilter - no update method specified');
      }
      addResults(t) {
        this.updates = this.updates.concat(t), t.forEach((t => this.emit('update', t)));
      }
      addInitialResults(t) {}
      getChangesAndClear() {
        const t = this.updates;
        return this.updates = [], t;
      }
    };
  },
  72785: (t, e, r) => {
    const n = r(76622);
    const i = r(40207);
    const {incrementHexInt: o} = r(98112);
    t.exports = class extends n {
      constructor({provider: t, params: e}) {
        super(), this.type = 'block', this.provider = t;
      }
      async update({oldBlock: t, newBlock: e}) {
        const r = e;
        const n = o(t);
        const a = (await i({
          provider: this.provider,
          fromBlock: n,
          toBlock: r
        })).map((t => t.hash));
        this.addResults(a);
      }
    };
  },
  40207: t => {
    function e(t) {
      return null == t ? t : Number.parseInt(t, 16);
    }
    function r(t) {
      if (null == t) return t;
      return '0x' + t.toString(16);
    }
    t.exports = async function({provider: t, fromBlock: n, toBlock: i}) {
      n || (n = i);
      const o = e(n);
      const a = e(i);
      const s = Array(a - o + 1).fill().map(((t, e) => o + e)).map(r);
      return await Promise.all(s.map((e => function(t, e, r) {
        return new Promise(((n, i) => {
          t.sendAsync({
            id: 1,
            jsonrpc: '2.0',
            method: e,
            params: r
          }, ((t, e) => {
            if (t) return i(t);
            n(e.result);
          }));
        }));
      }(t, 'eth_getBlockByNumber', [ e, !1 ]))));
    };
  },
  98112: t => {
    function e(t) {
      return t.sort(((t, e) => 'latest' === t || 'earliest' === e ? 1 : 'latest' === e || 'earliest' === t ? -1 : r(t) - r(e)));
    }
    function r(t) {
      return null == t ? t : Number.parseInt(t, 16);
    }
    function n(t) {
      if (null == t) return t;
      let e = t.toString(16);
      return e.length % 2 && (e = '0' + e), '0x' + e;
    }
    function i() {
      return Math.floor(16 * Math.random()).toString(16);
    }
    t.exports = {
      minBlockRef: function(...t) {
        return e(t)[0];
      },
      maxBlockRef: function(...t) {
        const r = e(t);
        return r[r.length - 1];
      },
      sortBlockRefs: e,
      bnToHex: function(t) {
        return '0x' + t.toString(16);
      },
      blockRefIsNumber: function(t) {
        return t && ![ 'earliest', 'latest', 'pending' ].includes(t);
      },
      hexToInt: r,
      incrementHexInt: function(t) {
        if (null == t) return t;
        return n(r(t) + 1);
      },
      intToHex: n,
      unsafeRandomBytes: function(t) {
        let e = '0x';
        for (let r = 0; r < t; r++) e += i(), e += i();
        return e;
      }
    };
  },
  98406: (t, e, r) => {
    var n = r(25108);
    const i = r(48125).WU;
    const {createAsyncMiddleware: o} = r(88625);
    const a = r(57688);
    const s = r(81663);
    const u = r(72785);
    const h = r(25792);
    const {intToHex: l, hexToInt: c} = r(98112);
    function f(t) {
      return d((async (...e) => {
        const r = await t(...e);
        return l(r.id);
      }));
    }
    function d(t) {
      return o((async (e, r) => {
        const n = await t.apply(null, e.params);
        r.result = n;
      }));
    }
    function p(t, e) {
      const r = [];
      for (let n in t) r.push(t[n]);
      return r;
    }
    t.exports = function({blockTracker: t, provider: e}) {
      let r = 0;
      let o = {};
      const m = new i;
      const v = function({mutex: t}) {
        return e => async (r, n, i, o) => {
          (await t.acquire())(), e(r, n, i, o);
        };
      }({
        mutex: m
      });
      const g = a({
        eth_newFilter: v(f(w)),
        eth_newBlockFilter: v(f(_)),
        eth_newPendingTransactionFilter: v(f(M)),
        eth_uninstallFilter: v(d(x)),
        eth_getFilterChanges: v(d(b)),
        eth_getFilterLogs: v(d(k))
      });
      const y = async ({oldBlock: t, newBlock: e}) => {
        if (0 === o.length) return;
        const r = await m.acquire();
        try {
          await Promise.all(p(o).map((async r => {
            try {
              await r.update({
                oldBlock: t,
                newBlock: e
              });
            } catch (i) {
              n.error(i);
            }
          })));
        } catch (i) {
          n.error(i);
        }
        r();
      };
      return g.newLogFilter = w, g.newBlockFilter = _, g.newPendingTransactionFilter = M, g.uninstallFilter = x, g.getFilterChanges = b, 
      g.getFilterLogs = k, g.destroy = () => {
        !async function() {
          const t = p(o).length;
          o = {}, E({
            prevFilterCount: t,
            newFilterCount: 0
          });
        }();
      }, g;
      async function w(t) {
        const r = new s({
          provider: e,
          params: t
        });
        await A(r);
        return r;
      }
      async function _() {
        const t = new u({
          provider: e
        });
        await A(t);
        return t;
      }
      async function M() {
        const t = new h({
          provider: e
        });
        await A(t);
        return t;
      }
      async function b(t) {
        const e = c(t);
        const r = o[e];
        if (!r) throw new Error(`No filter for index "${e}"`);
        return r.getChangesAndClear();
      }
      async function k(t) {
        const e = c(t);
        const r = o[e];
        if (!r) throw new Error(`No filter for index "${e}"`);
        return 'log' === r.type ? results = r.getAllResults() : results = [], results;
      }
      async function x(t) {
        const e = c(t);
        const r = o[e];
        const n = Boolean(r);
        return n && await async function(t) {
          const e = p(o).length;
          delete o[t];
          const r = p(o).length;
          E({
            prevFilterCount: e,
            newFilterCount: r
          });
        }(e), n;
      }
      async function A(e) {
        const n = p(o).length;
        const i = await t.getLatestBlock();
        await e.initialize({
          currentBlock: i
        }), r++, o[r] = e, e.id = r, e.idHex = l(r);
        return E({
          prevFilterCount: n,
          newFilterCount: p(o).length
        }), r;
      }
      function E({prevFilterCount: e, newFilterCount: r}) {
        0 === e && r > 0 ? t.on('sync', y) : e > 0 && 0 === r && t.removeListener('sync', y);
      }
    };
  },
  81663: (t, e, r) => {
    const n = r(75682);
    const i = r(6417);
    const o = r(23256);
    const {bnToHex: a, hexToInt: s, incrementHexInt: u, minBlockRef: h, blockRefIsNumber: l} = r(98112);
    t.exports = class extends o {
      constructor({provider: t, params: e}) {
        super(), this.type = 'log', this.ethQuery = new n(t), this.params = Object.assign({
          fromBlock: 'latest',
          toBlock: 'latest',
          address: void 0,
          topics: []
        }, e), this.params.address && (Array.isArray(this.params.address) || (this.params.address = [ this.params.address ]), this.params.address = this.params.address.map((t => t.toLowerCase())));
      }
      async initialize({currentBlock: t}) {
        let e = this.params.fromBlock;
        [ 'latest', 'pending' ].includes(e) && (e = t), 'earliest' === e && (e = '0x0'), this.params.fromBlock = e;
        const r = h(this.params.toBlock, t);
        const n = Object.assign({}, this.params, {
          toBlock: r
        });
        const i = await this._fetchLogs(n);
        this.addInitialResults(i);
      }
      async update({oldBlock: t, newBlock: e}) {
        const r = e;
        let n;
        n = t ? u(t) : e;
        const i = Object.assign({}, this.params, {
          fromBlock: n,
          toBlock: r
        });
        const o = (await this._fetchLogs(i)).filter((t => this.matchLog(t)));
        this.addResults(o);
      }
      async _fetchLogs(t) {
        return await i((e => this.ethQuery.getLogs(t, e)))();
      }
      matchLog(t) {
        if (s(this.params.fromBlock) >= s(t.blockNumber)) return !1;
        if (l(this.params.toBlock) && s(this.params.toBlock) <= s(t.blockNumber)) return !1;
        const e = t.address && t.address.toLowerCase();
        if (this.params.address && e && !this.params.address.includes(e)) return !1;
        return this.params.topics.every(((e, r) => {
          let n = t.topics[r];
          if (!n) return !1;
          n = n.toLowerCase();
          let i = Array.isArray(e) ? e : [ e ];
          if (i.includes(null)) return !0;
          i = i.map((t => t.toLowerCase()));
          return i.includes(n);
        }));
      }
    };
  },
  6417: t => {
    "use strict";
    const e = (t, e, r, n) => function(...i) {
      return new (0, e.promiseModule)(((o, a) => {
        e.multiArgs ? i.push(((...t) => {
          e.errorFirst ? t[0] ? a(t) : (t.shift(), o(t)) : o(t);
        })) : e.errorFirst ? i.push(((t, e) => {
          t ? a(t) : o(e);
        })) : i.push(o);
        const s = this === r ? n : this;
        Reflect.apply(t, s, i);
      }));
    };
    const r = new WeakMap;
    t.exports = (t, n) => {
      n = {
        exclude: [ /.+(?:Sync|Stream)$/ ],
        errorFirst: !0,
        promiseModule: Promise,
        ...n
      };
      const i = typeof t;
      if (null === t || 'object' !== i && 'function' !== i) throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${null === t ? 'null' : i}\``);
      const o = new WeakMap;
      const a = new Proxy(t, {
        apply(t, r, i) {
          const s = o.get(t);
          if (s) return Reflect.apply(s, r, i);
          const u = n.excludeMain ? t : e(t, n, a, t);
          return o.set(t, u), Reflect.apply(u, r, i);
        },
        get(t, i) {
          const s = t[i];
          if (!((t, e) => {
            let i = r.get(t);
            if (i || (i = {}, r.set(t, i)), e in i) return i[e];
            const o = t => 'string' == typeof t || 'symbol' == typeof e ? e === t : t.test(e);
            const a = Reflect.getOwnPropertyDescriptor(t, e);
            const s = void 0 === a || a.writable || a.configurable;
            const u = (n.include ? n.include.some(o) : !n.exclude.some(o)) && s;
            return i[e] = u, u;
          })(t, i) || s === Function.prototype[i]) return s;
          const u = o.get(s);
          if (u) return u;
          if ('function' == typeof s) {
            const r = e(s, n, a, t);
            return o.set(s, r), r;
          }
          return s;
        }
      });
      return a;
    };
  },
  68961: (t, e, r) => {
    const n = r(19394).default;
    const i = r(57688);
    const {createAsyncMiddleware: o} = r(88625);
    const a = r(98406);
    const {unsafeRandomBytes: s, incrementHexInt: u} = r(98112);
    const h = r(40207);
    function l(t) {
      return {
        hash: t.hash,
        parentHash: t.parentHash,
        sha3Uncles: t.sha3Uncles,
        miner: t.miner,
        stateRoot: t.stateRoot,
        transactionsRoot: t.transactionsRoot,
        receiptsRoot: t.receiptsRoot,
        logsBloom: t.logsBloom,
        difficulty: t.difficulty,
        number: t.number,
        gasLimit: t.gasLimit,
        gasUsed: t.gasUsed,
        nonce: t.nonce,
        mixHash: t.mixHash,
        timestamp: t.timestamp,
        extraData: t.extraData
      };
    }
    t.exports = function({blockTracker: t, provider: e}) {
      const r = {};
      const c = a({
        blockTracker: t,
        provider: e
      });
      let f = !1;
      const d = new n;
      const p = i({
        eth_subscribe: o((async function(n, i) {
          if (f) throw new Error('SubscriptionManager - attempting to use after destroying');
          const o = n.params[0];
          const a = s(16);
          let d;
          switch (o) {
           case 'newHeads':
            d = p({
              subId: a
            });
            break;

           case 'logs':
            const t = n.params[1];
            d = v({
              subId: a,
              filter: await c.newLogFilter(t)
            });
            break;

           default:
            throw new Error(`SubscriptionManager - unsupported subscription type "${o}"`);
          }
          return r[a] = d, void (i.result = a);
          function p({subId: r}) {
            const n = {
              type: o,
              destroy: async () => {
                t.removeListener('sync', n.update);
              },
              update: async ({oldBlock: t, newBlock: n}) => {
                const i = n;
                const o = u(t);
                (await h({
                  provider: e,
                  fromBlock: o,
                  toBlock: i
                })).map(l).forEach((t => {
                  m(r, t);
                }));
              }
            };
            return t.on('sync', n.update), n;
          }
          function v({subId: t, filter: e}) {
            e.on('update', (e => m(t, e)));
            return {
              type: o,
              destroy: async () => await c.uninstallFilter(e.idHex)
            };
          }
        })),
        eth_unsubscribe: o((async function(t, e) {
          if (f) throw new Error('SubscriptionManager - attempting to use after destroying');
          const n = t.params[0];
          const i = r[n];
          if (!i) return void (e.result = !1);
          delete r[n], await i.destroy(), e.result = !0;
        }))
      });
      return p.destroy = function() {
        d.removeAllListeners();
        for (const t in r) r[t].destroy(), delete r[t];
        f = !0;
      }, {
        events: d,
        middleware: p
      };
      function m(t, e) {
        d.emit('notification', {
          jsonrpc: '2.0',
          method: 'eth_subscription',
          params: {
            subscription: t,
            result: e
          }
        });
      }
    };
  },
  25792: (t, e, r) => {
    const n = r(76622);
    const i = r(40207);
    const {incrementHexInt: o} = r(98112);
    t.exports = class extends n {
      constructor({provider: t}) {
        super(), this.type = 'tx', this.provider = t;
      }
      async update({oldBlock: t}) {
        const e = t;
        const r = o(t);
        const n = await i({
          provider: this.provider,
          fromBlock: r,
          toBlock: e
        });
        const a = [];
        for (const i of n) a.push(...i.transactions);
        this.addResults(a);
      }
    };
  },
  37870: (t, e, r) => {
    const n = r(91625);
    const i = r(3156);
    const o = [ void 0, null, '<nil>' ];
    t.exports = function(t = {}) {
      const {blockTracker: e} = t;
      if (!e) throw new Error('createBlockCacheMiddleware - No BlockTracker specified');
      const r = new a;
      const o = {
        perma: r,
        block: r,
        fork: r
      };
      return i((async (t, i, a) => {
        if (t.skipCache) return a();
        const s = n.cacheTypeForPayload(t);
        const u = o[s];
        if (!u) return a();
        if (!u.canCacheRequest(t)) return a();
        let h = n.blockTagForPayload(t);
        let l;
        if (h || (h = 'latest'), 'earliest' === h) l = '0x00'; else if ('latest' === h) {
          const t = await e.getLatestBlock();
          r.clearBefore(t), l = t;
        } else l = h;
        const c = await u.get(t, l);
        void 0 === c ? (await a(), await u.set(t, l, i.result)) : i.result = c;
      }));
    };
    class a {
      constructor() {
        this.cache = {};
      }
      getBlockCacheForPayload(t, e) {
        const r = Number.parseInt(e, 16);
        let n = this.cache[r];
        if (!n) {
          const t = {};
          this.cache[r] = t, n = t;
        }
        return n;
      }
      async get(t, e) {
        const r = this.getBlockCacheForPayload(t, e);
        if (!r) return;
        return r[n.cacheIdentifierForPayload(t, !0)];
      }
      async set(t, e, r) {
        if (!this.canCacheResult(t, r)) return;
        this.getBlockCacheForPayload(t, e)[n.cacheIdentifierForPayload(t, !0)] = r;
      }
      canCacheRequest(t) {
        if (!n.canCache(t)) return !1;
        return 'pending' !== n.blockTagForPayload(t);
      }
      canCacheResult(t, e) {
        if (!o.includes(e)) return !!(![ 'eth_getTransactionByHash', 'eth_getTransactionReceipt' ].includes(t.method) || e && e.blockHash && '0x0000000000000000000000000000000000000000000000000000000000000000' !== e.blockHash);
      }
      clearBefore(t) {
        const e = this;
        const r = Number.parseInt(t, 16);
        Object.keys(e.cache).map(Number).filter((t => t < r)).forEach((t => delete e.cache[t]));
      }
    }
  },
  91625: (t, e, r) => {
    const n = r(67266);
    function i(t) {
      return 'never' !== s(t);
    }
    function o(t) {
      const e = a(t);
      return e >= t.params.length ? t.params : 'eth_getBlockByNumber' === t.method ? t.params.slice(1) : t.params.slice(0, e);
    }
    function a(t) {
      switch (t.method) {
       case 'eth_getStorageAt':
        return 2;

       case 'eth_getBalance':
       case 'eth_getCode':
       case 'eth_getTransactionCount':
       case 'eth_call':
        return 1;

       case 'eth_getBlockByNumber':
        return 0;

       default:
        return;
      }
    }
    function s(t) {
      switch (t.method) {
       case 'web3_clientVersion':
       case 'web3_sha3':
       case 'eth_protocolVersion':
       case 'eth_getBlockTransactionCountByHash':
       case 'eth_getUncleCountByBlockHash':
       case 'eth_getCode':
       case 'eth_getBlockByHash':
       case 'eth_getTransactionByHash':
       case 'eth_getTransactionByBlockHashAndIndex':
       case 'eth_getTransactionReceipt':
       case 'eth_getUncleByBlockHashAndIndex':
       case 'eth_getCompilers':
       case 'eth_compileLLL':
       case 'eth_compileSolidity':
       case 'eth_compileSerpent':
       case 'shh_version':
       case 'test_permaCache':
        return 'perma';

       case 'eth_getBlockByNumber':
       case 'eth_getBlockTransactionCountByNumber':
       case 'eth_getUncleCountByBlockNumber':
       case 'eth_getTransactionByBlockNumberAndIndex':
       case 'eth_getUncleByBlockNumberAndIndex':
       case 'test_forkCache':
        return 'fork';

       case 'eth_gasPrice':
       case 'eth_blockNumber':
       case 'eth_getBalance':
       case 'eth_getStorageAt':
       case 'eth_getTransactionCount':
       case 'eth_call':
       case 'eth_estimateGas':
       case 'eth_getFilterLogs':
       case 'eth_getLogs':
       case 'test_blockCache':
        return 'block';

       case 'net_version':
       case 'net_peerCount':
       case 'net_listening':
       case 'eth_syncing':
       case 'eth_sign':
       case 'eth_coinbase':
       case 'eth_mining':
       case 'eth_hashrate':
       case 'eth_accounts':
       case 'eth_sendTransaction':
       case 'eth_sendRawTransaction':
       case 'eth_newFilter':
       case 'eth_newBlockFilter':
       case 'eth_newPendingTransactionFilter':
       case 'eth_uninstallFilter':
       case 'eth_getFilterChanges':
       case 'eth_getWork':
       case 'eth_submitWork':
       case 'eth_submitHashrate':
       case 'db_putString':
       case 'db_getString':
       case 'db_putHex':
       case 'db_getHex':
       case 'shh_post':
       case 'shh_newIdentity':
       case 'shh_hasIdentity':
       case 'shh_newGroup':
       case 'shh_addToGroup':
       case 'shh_newFilter':
       case 'shh_uninstallFilter':
       case 'shh_getFilterChanges':
       case 'shh_getMessages':
       case 'test_neverCache':
        return 'never';
      }
    }
    t.exports = {
      cacheIdentifierForPayload: function(t, e) {
        const r = e ? o(t) : t.params;
        return i(t) ? t.method + ':' + n(r) : null;
      },
      canCache: i,
      blockTagForPayload: function(t) {
        let e = a(t);
        if (e >= t.params.length) return null;
        return t.params[e];
      },
      paramsWithoutBlockTag: o,
      blockTagParamIndex: a,
      cacheTypeForPayload: s
    };
  },
  3156: t => {
    t.exports = function(t) {
      return (e, r, n, i) => {
        let o;
        const a = new Promise((t => {
          o = t;
        }));
        let s, u;
        t(e, r, (async () => {
          u = !0, n((t => {
            s = t, o();
          })), await a;
        })).then((async () => {
          u ? (await a, s(null)) : i(null);
        })).catch((t => {
          s ? s(t) : i(t);
        }));
      };
    };
  },
  59721: t => {
    t.exports = function(t) {
      return (e, r, n, i) => {
        const o = t[e.method];
        return void 0 === o ? n() : 'function' == typeof o ? o(e, r, n, i) : (r.result = o, i());
      };
    };
  },
  57688: (t, e, r) => {
    t.exports = r(59721);
  },
  75682: (t, e, r) => {
    const n = r(47529);
    const i = r(23420)();
    function o(t) {
      this.currentProvider = t;
    }
    function a(t) {
      return function() {
        const e = this;
        var r = [].slice.call(arguments);
        var n = r.pop();
        e.sendAsync({
          method: t,
          params: r
        }, n);
      };
    }
    function s(t, e) {
      return function() {
        const r = this;
        var n = [].slice.call(arguments);
        var i = n.pop();
        n.length < t && n.push('latest'), r.sendAsync({
          method: e,
          params: n
        }, i);
      };
    }
    t.exports = o, o.prototype.getBalance = s(2, 'eth_getBalance'), o.prototype.getCode = s(2, 'eth_getCode'), o.prototype.getTransactionCount = s(2, 'eth_getTransactionCount'), 
    o.prototype.getStorageAt = s(3, 'eth_getStorageAt'), o.prototype.call = s(2, 'eth_call'), o.prototype.protocolVersion = a('eth_protocolVersion'), 
    o.prototype.syncing = a('eth_syncing'), o.prototype.coinbase = a('eth_coinbase'), o.prototype.mining = a('eth_mining'), 
    o.prototype.hashrate = a('eth_hashrate'), o.prototype.gasPrice = a('eth_gasPrice'), o.prototype.accounts = a('eth_accounts'), 
    o.prototype.blockNumber = a('eth_blockNumber'), o.prototype.getBlockTransactionCountByHash = a('eth_getBlockTransactionCountByHash'), 
    o.prototype.getBlockTransactionCountByNumber = a('eth_getBlockTransactionCountByNumber'), o.prototype.getUncleCountByBlockHash = a('eth_getUncleCountByBlockHash'), 
    o.prototype.getUncleCountByBlockNumber = a('eth_getUncleCountByBlockNumber'), o.prototype.sign = a('eth_sign'), o.prototype.sendTransaction = a('eth_sendTransaction'), 
    o.prototype.sendRawTransaction = a('eth_sendRawTransaction'), o.prototype.estimateGas = a('eth_estimateGas'), o.prototype.getBlockByHash = a('eth_getBlockByHash'), 
    o.prototype.getBlockByNumber = a('eth_getBlockByNumber'), o.prototype.getTransactionByHash = a('eth_getTransactionByHash'), 
    o.prototype.getTransactionByBlockHashAndIndex = a('eth_getTransactionByBlockHashAndIndex'), o.prototype.getTransactionByBlockNumberAndIndex = a('eth_getTransactionByBlockNumberAndIndex'), 
    o.prototype.getTransactionReceipt = a('eth_getTransactionReceipt'), o.prototype.getUncleByBlockHashAndIndex = a('eth_getUncleByBlockHashAndIndex'), 
    o.prototype.getUncleByBlockNumberAndIndex = a('eth_getUncleByBlockNumberAndIndex'), o.prototype.getCompilers = a('eth_getCompilers'), 
    o.prototype.compileLLL = a('eth_compileLLL'), o.prototype.compileSolidity = a('eth_compileSolidity'), o.prototype.compileSerpent = a('eth_compileSerpent'), 
    o.prototype.newFilter = a('eth_newFilter'), o.prototype.newBlockFilter = a('eth_newBlockFilter'), o.prototype.newPendingTransactionFilter = a('eth_newPendingTransactionFilter'), 
    o.prototype.uninstallFilter = a('eth_uninstallFilter'), o.prototype.getFilterChanges = a('eth_getFilterChanges'), o.prototype.getFilterLogs = a('eth_getFilterLogs'), 
    o.prototype.getLogs = a('eth_getLogs'), o.prototype.getWork = a('eth_getWork'), o.prototype.submitWork = a('eth_submitWork'), 
    o.prototype.submitHashrate = a('eth_submitHashrate'), o.prototype.sendAsync = function(t, e) {
      this.currentProvider.sendAsync(function(t) {
        return n({
          id: i(),
          jsonrpc: '2.0',
          params: []
        }, t);
      }(t), (function(t, r) {
        if (!t && r.error && (t = new Error('EthQuery - RPC Error - ' + r.error.message)), t) return e(t);
        e(null, r.result);
      }));
    };
  },
  2843: (t, e, r) => {
    const n = r(17499);
    const i = r(68142);
    function o(t) {
      const e = new Error('Expect argument to be non-empty array');
      if ('object' != typeof t || !t.length) throw e;
      const r = t.map((function(t) {
        return 'bytes' === t.type ? n.toBuffer(t.value) : t.value;
      }));
      const o = t.map((function(t) {
        return t.type;
      }));
      const a = t.map((function(t) {
        if (!t.name) throw e;
        return t.type + ' ' + t.name;
      }));
      return i.soliditySHA3([ 'bytes32', 'bytes32' ], [ i.soliditySHA3(new Array(t.length).fill('string'), a), i.soliditySHA3(o, r) ]);
    }
    function a(t, e) {
      const r = n.toBuffer(e);
      const i = n.fromRpcSig(r);
      return n.ecrecover(t, i.v, i.r, i.s);
    }
    function s(t) {
      const e = n.toBuffer(t.data);
      return a(n.hashPersonalMessage(e), t.sig);
    }
    function u(t, e) {
      var r = '' + t;
      for (;r.length < e; ) r = '0' + r;
      return r;
    }
    t.exports = {
      concatSig: function(t, e, r) {
        const i = n.fromSigned(e);
        const o = n.fromSigned(r);
        const a = n.bufferToInt(t);
        const s = u(n.toUnsigned(i).toString('hex'), 64);
        const h = u(n.toUnsigned(o).toString('hex'), 64);
        const l = n.stripHexPrefix(n.intToHex(a));
        return n.addHexPrefix(s.concat(h, l)).toString('hex');
      },
      normalize: function(t) {
        if (t) {
          if ('number' == typeof t) {
            const e = n.toBuffer(t);
            t = n.bufferToHex(e);
          }
          if ('string' != typeof t) {
            var e = 'eth-sig-util.normalize() requires hex string or integer input.';
            throw new Error(e += ' received ' + typeof t + ': ' + t);
          }
          return n.addHexPrefix(t.toLowerCase());
        }
      },
      personalSign: function(t, e) {
        var r = n.toBuffer(e.data);
        var i = n.hashPersonalMessage(r);
        var o = n.ecsign(i, t);
        return n.bufferToHex(this.concatSig(o.v, o.r, o.s));
      },
      recoverPersonalSignature: function(t) {
        const e = s(t);
        const r = n.publicToAddress(e);
        return n.bufferToHex(r);
      },
      extractPublicKey: function(t) {
        return '0x' + s(t).toString('hex');
      },
      typedSignatureHash: function(t) {
        const e = o(t);
        return n.bufferToHex(e);
      },
      signTypedData: function(t, e) {
        const r = o(e.data);
        const i = n.ecsign(r, t);
        return n.bufferToHex(this.concatSig(i.v, i.r, i.s));
      },
      recoverTypedSignature: function(t) {
        const e = a(o(t.data), t.sig);
        const r = n.publicToAddress(e);
        return n.bufferToHex(r);
      }
    };
  },
  89817: function(t, e, r) {
    !function(t, e) {
      'use strict';
      function n(t, e) {
        if (!t) throw new Error(e || 'Assertion failed');
      }
      function i(t, e) {
        t.super_ = e;
        var r = function() {};
        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
      }
      function o(t, e, r) {
        if (o.isBN(t)) return t;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ('le' !== e && 'be' !== e || (r = e, 
        e = 10), this._init(t || 0, e || 10, r || 'be'));
      }
      var a;
      'object' == typeof t ? t.exports = o : e.BN = o, o.BN = o, o.wordSize = 26;
      try {
        a = 'undefined' != typeof window && void 0 !== window.Buffer ? window.Buffer : r(89568).Buffer;
      } catch (A) {}
      function s(t, e) {
        var r = t.charCodeAt(e);
        return r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : r - 48 & 15;
      }
      function u(t, e, r) {
        var n = s(t, r);
        return r - 1 >= e && (n |= s(t, r - 1) << 4), n;
      }
      function h(t, e, r, n) {
        var i = 0;
        var o = Math.min(t.length, r);
        for (var a = e; a < o; a++) {
          var s = t.charCodeAt(a) - 48;
          i *= n, i += s >= 49 ? s - 49 + 10 : s >= 17 ? s - 17 + 10 : s;
        }
        return i;
      }
      o.isBN = function(t) {
        return t instanceof o || null !== t && 'object' == typeof t && t.constructor.wordSize === o.wordSize && Array.isArray(t.words);
      }, o.max = function(t, e) {
        return t.cmp(e) > 0 ? t : e;
      }, o.min = function(t, e) {
        return t.cmp(e) < 0 ? t : e;
      }, o.prototype._init = function(t, e, r) {
        if ('number' == typeof t) return this._initNumber(t, e, r);
        if ('object' == typeof t) return this._initArray(t, e, r);
        'hex' === e && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
        var i = 0;
        '-' === (t = t.toString().replace(/\s+/g, ''))[0] && (i++, this.negative = 1), i < t.length && (16 === e ? this._parseHex(t, i, r) : (this._parseBase(t, e, i), 
        'le' === r && this._initArray(this.toArray(), e, r)));
      }, o.prototype._initNumber = function(t, e, r) {
        t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [ 67108863 & t ], this.length = 1) : t < 4503599627370496 ? (this.words = [ 67108863 & t, t / 67108864 & 67108863 ], 
        this.length = 2) : (n(t < 9007199254740992), this.words = [ 67108863 & t, t / 67108864 & 67108863, 1 ], this.length = 3), 
        'le' === r && this._initArray(this.toArray(), e, r);
      }, o.prototype._initArray = function(t, e, r) {
        if (n('number' == typeof t.length), t.length <= 0) return this.words = [ 0 ], this.length = 1, this;
        this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) this.words[i] = 0;
        var o, a;
        var s = 0;
        if ('be' === r) for (i = t.length - 1, o = 0; i >= 0; i -= 3) a = t[i] | t[i - 1] << 8 | t[i - 2] << 16, this.words[o] |= a << s & 67108863, 
        this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++); else if ('le' === r) for (i = 0, o = 0; i < t.length; i += 3) a = t[i] | t[i + 1] << 8 | t[i + 2] << 16, 
        this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
        return this.strip();
      }, o.prototype._parseHex = function(t, e, r) {
        this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
        for (var n = 0; n < this.length; n++) this.words[n] = 0;
        var i = 0;
        var o = 0;
        var a;
        if ('be' === r) for (n = t.length - 1; n >= e; n -= 2) a = u(t, e, n) << i, this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, 
        o += 1, this.words[o] |= a >>> 26) : i += 8; else for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) a = u(t, e, n) << i, 
        this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, o += 1, this.words[o] |= a >>> 26) : i += 8;
        this.strip();
      }, o.prototype._parseBase = function(t, e, r) {
        this.words = [ 0 ], this.length = 1;
        for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
        n--, i = i / e | 0;
        var o = t.length - r;
        var a = o % n;
        var s = Math.min(o, o - a) + r;
        var u = 0;
        for (var l = r; l < s; l += n) u = h(t, l, l + n, e), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        if (0 !== a) {
          var c = 1;
          for (u = h(t, l, t.length, e), l = 0; l < a; l++) c *= e;
          this.imuln(c), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        }
        this.strip();
      }, o.prototype.copy = function(t) {
        t.words = new Array(this.length);
        for (var e = 0; e < this.length; e++) t.words[e] = this.words[e];
        t.length = this.length, t.negative = this.negative, t.red = this.red;
      }, o.prototype.clone = function() {
        var t = new o(null);
        return this.copy(t), t;
      }, o.prototype._expand = function(t) {
        for (;this.length < t; ) this.words[this.length++] = 0;
        return this;
      }, o.prototype.strip = function() {
        for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
        return this._normSign();
      }, o.prototype._normSign = function() {
        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
      }, o.prototype.inspect = function() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
      var l = [ '', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000' ];
      var c = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
      var f = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
      function d(t, e, r) {
        r.negative = e.negative ^ t.negative;
        var n = t.length + e.length | 0;
        r.length = n, n = n - 1 | 0;
        var i = 0 | t.words[0];
        var o = 0 | e.words[0];
        var a = i * o;
        var s = 67108863 & a;
        var u = a / 67108864 | 0;
        r.words[0] = s;
        for (var h = 1; h < n; h++) {
          var l = u >>> 26;
          var c = 67108863 & u;
          var f = Math.min(h, e.length - 1);
          for (var d = Math.max(0, h - t.length + 1); d <= f; d++) {
            var p = h - d | 0;
            l += (a = (i = 0 | t.words[p]) * (o = 0 | e.words[d]) + c) / 67108864 | 0, c = 67108863 & a;
          }
          r.words[h] = 0 | c, u = 0 | l;
        }
        return 0 !== u ? r.words[h] = 0 | u : r.length--, r.strip();
      }
      o.prototype.toString = function(t, e) {
        var r;
        if (e = 0 | e || 1, 16 === (t = t || 10) || 'hex' === t) {
          r = '';
          var i = 0;
          var o = 0;
          for (var a = 0; a < this.length; a++) {
            var s = this.words[a];
            var u = (16777215 & (s << i | o)).toString(16);
            r = 0 !== (o = s >>> 24 - i & 16777215) || a !== this.length - 1 ? l[6 - u.length] + u + r : u + r, (i += 2) >= 26 && (i -= 26, 
            a--);
          }
          for (0 !== o && (r = o.toString(16) + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        if (t === (0 | t) && t >= 2 && t <= 36) {
          var h = c[t];
          var d = f[t];
          r = '';
          var p = this.clone();
          for (p.negative = 0; !p.isZero(); ) {
            var m = p.modn(d).toString(t);
            r = (p = p.idivn(d)).isZero() ? m + r : l[h - m.length] + m + r;
          }
          for (this.isZero() && (r = '0' + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        n(!1, 'Base should be between 2 and 36');
      }, o.prototype.toNumber = function() {
        var t = this.words[0];
        return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, 'Number can only safely store up to 53 bits'), 
        0 !== this.negative ? -t : t;
      }, o.prototype.toJSON = function() {
        return this.toString(16);
      }, o.prototype.toBuffer = function(t, e) {
        return n(void 0 !== a), this.toArrayLike(a, t, e);
      }, o.prototype.toArray = function(t, e) {
        return this.toArrayLike(Array, t, e);
      }, o.prototype.toArrayLike = function(t, e, r) {
        var i = this.byteLength();
        var o = r || Math.max(1, i);
        n(i <= o, 'byte array longer than desired length'), n(o > 0, 'Requested array length <= 0'), this.strip();
        var a = 'le' === e;
        var s = new t(o);
        var u, h;
        var l = this.clone();
        if (a) {
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[h] = u;
          for (;h < o; h++) s[h] = 0;
        } else {
          for (h = 0; h < o - i; h++) s[h] = 0;
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[o - h - 1] = u;
        }
        return s;
      }, Math.clz32 ? o.prototype._countBits = function(t) {
        return 32 - Math.clz32(t);
      } : o.prototype._countBits = function(t) {
        var e = t;
        var r = 0;
        return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, e >>>= 4), e >= 2 && (r += 2, 
        e >>>= 2), r + e;
      }, o.prototype._zeroBits = function(t) {
        if (0 === t) return 26;
        var e = t;
        var r = 0;
        return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 0 == (15 & e) && (r += 4, e >>>= 4), 
        0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, r;
      }, o.prototype.bitLength = function() {
        var t = this.words[this.length - 1];
        var e = this._countBits(t);
        return 26 * (this.length - 1) + e;
      }, o.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        var t = 0;
        for (var e = 0; e < this.length; e++) {
          var r = this._zeroBits(this.words[e]);
          if (t += r, 26 !== r) break;
        }
        return t;
      }, o.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, o.prototype.toTwos = function(t) {
        return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
      }, o.prototype.fromTwos = function(t) {
        return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
      }, o.prototype.isNeg = function() {
        return 0 !== this.negative;
      }, o.prototype.neg = function() {
        return this.clone().ineg();
      }, o.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, o.prototype.iuor = function(t) {
        for (;this.length < t.length; ) this.words[this.length++] = 0;
        for (var e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
        return this.strip();
      }, o.prototype.ior = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuor(t);
      }, o.prototype.or = function(t) {
        return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
      }, o.prototype.uor = function(t) {
        return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
      }, o.prototype.iuand = function(t) {
        var e;
        e = this.length > t.length ? t : this;
        for (var r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
        return this.length = e.length, this.strip();
      }, o.prototype.iand = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuand(t);
      }, o.prototype.and = function(t) {
        return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
      }, o.prototype.uand = function(t) {
        return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
      }, o.prototype.iuxor = function(t) {
        var e;
        var r;
        this.length > t.length ? (e = this, r = t) : (e = t, r = this);
        for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
        if (this !== e) for (;n < e.length; n++) this.words[n] = e.words[n];
        return this.length = e.length, this.strip();
      }, o.prototype.ixor = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuxor(t);
      }, o.prototype.xor = function(t) {
        return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
      }, o.prototype.uxor = function(t) {
        return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
      }, o.prototype.inotn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = 0 | Math.ceil(t / 26);
        var r = t % 26;
        this._expand(e), r > 0 && e--;
        for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
        return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this.strip();
      }, o.prototype.notn = function(t) {
        return this.clone().inotn(t);
      }, o.prototype.setn = function(t, e) {
        n('number' == typeof t && t >= 0);
        var r = t / 26 | 0;
        var i = t % 26;
        return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this.strip();
      }, o.prototype.iadd = function(t) {
        var e;
        if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), this.negative ^= 1, this._normSign();
        if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), t.negative = 1, e._normSign();
        var r, n;
        this.length > t.length ? (r = this, n = t) : (r = t, n = this);
        var i = 0;
        for (var o = 0; o < n.length; o++) e = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        for (;0 !== i && o < r.length; o++) e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
        return this;
      }, o.prototype.add = function(t) {
        var e;
        return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, 
        e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
      }, o.prototype.isub = function(t) {
        if (0 !== t.negative) {
          t.negative = 0;
          var e = this.iadd(t);
          return t.negative = 1, e._normSign();
        }
        if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, this._normSign();
        var r = this.cmp(t);
        if (0 === r) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var n, i;
        r > 0 ? (n = this, i = t) : (n = t, i = this);
        var o = 0;
        for (var a = 0; a < i.length; a++) o = (e = (0 | n.words[a]) - (0 | i.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        for (;0 !== o && a < n.length; a++) o = (e = (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        if (0 === o && a < n.length && n !== this) for (;a < n.length; a++) this.words[a] = n.words[a];
        return this.length = Math.max(this.length, a), n !== this && (this.negative = 1), this.strip();
      }, o.prototype.sub = function(t) {
        return this.clone().isub(t);
      };
      var p = function(t, e, r) {
        var n = t.words;
        var i = e.words;
        var o = r.words;
        var a = 0;
        var s;
        var u;
        var h;
        var l = 0 | n[0];
        var c = 8191 & l;
        var f = l >>> 13;
        var d = 0 | n[1];
        var p = 8191 & d;
        var m = d >>> 13;
        var v = 0 | n[2];
        var g = 8191 & v;
        var y = v >>> 13;
        var w = 0 | n[3];
        var _ = 8191 & w;
        var M = w >>> 13;
        var b = 0 | n[4];
        var k = 8191 & b;
        var x = b >>> 13;
        var A = 0 | n[5];
        var E = 8191 & A;
        var S = A >>> 13;
        var R = 0 | n[6];
        var C = 8191 & R;
        var T = R >>> 13;
        var B = 0 | n[7];
        var L = 8191 & B;
        var P = B >>> 13;
        var I = 0 | n[8];
        var O = 8191 & I;
        var N = I >>> 13;
        var U = 0 | n[9];
        var q = 8191 & U;
        var j = U >>> 13;
        var K = 0 | i[0];
        var H = 8191 & K;
        var F = K >>> 13;
        var z = 0 | i[1];
        var D = 8191 & z;
        var Z = z >>> 13;
        var W = 0 | i[2];
        var V = 8191 & W;
        var $ = W >>> 13;
        var G = 0 | i[3];
        var Y = 8191 & G;
        var J = G >>> 13;
        var Q = 0 | i[4];
        var X = 8191 & Q;
        var tt = Q >>> 13;
        var et = 0 | i[5];
        var rt = 8191 & et;
        var nt = et >>> 13;
        var it = 0 | i[6];
        var ot = 8191 & it;
        var at = it >>> 13;
        var st = 0 | i[7];
        var ut = 8191 & st;
        var ht = st >>> 13;
        var lt = 0 | i[8];
        var ct = 8191 & lt;
        var ft = lt >>> 13;
        var dt = 0 | i[9];
        var pt = 8191 & dt;
        var mt = dt >>> 13;
        r.negative = t.negative ^ e.negative, r.length = 19;
        var vt = (a + (s = Math.imul(c, H)) | 0) + ((8191 & (u = (u = Math.imul(c, F)) + Math.imul(f, H) | 0)) << 13) | 0;
        a = ((h = Math.imul(f, F)) + (u >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, s = Math.imul(p, H), u = (u = Math.imul(p, F)) + Math.imul(m, H) | 0, 
        h = Math.imul(m, F);
        var gt = (a + (s = s + Math.imul(c, D) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, Z) | 0) + Math.imul(f, D) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, Z) | 0) + (u >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, s = Math.imul(g, H), u = (u = Math.imul(g, F)) + Math.imul(y, H) | 0, 
        h = Math.imul(y, F), s = s + Math.imul(p, D) | 0, u = (u = u + Math.imul(p, Z) | 0) + Math.imul(m, D) | 0, h = h + Math.imul(m, Z) | 0;
        var yt = (a + (s = s + Math.imul(c, V) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, $) | 0) + Math.imul(f, V) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, $) | 0) + (u >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, s = Math.imul(_, H), u = (u = Math.imul(_, F)) + Math.imul(M, H) | 0, 
        h = Math.imul(M, F), s = s + Math.imul(g, D) | 0, u = (u = u + Math.imul(g, Z) | 0) + Math.imul(y, D) | 0, h = h + Math.imul(y, Z) | 0, 
        s = s + Math.imul(p, V) | 0, u = (u = u + Math.imul(p, $) | 0) + Math.imul(m, V) | 0, h = h + Math.imul(m, $) | 0;
        var wt = (a + (s = s + Math.imul(c, Y) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, J) | 0) + Math.imul(f, Y) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, J) | 0) + (u >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, s = Math.imul(k, H), u = (u = Math.imul(k, F)) + Math.imul(x, H) | 0, 
        h = Math.imul(x, F), s = s + Math.imul(_, D) | 0, u = (u = u + Math.imul(_, Z) | 0) + Math.imul(M, D) | 0, h = h + Math.imul(M, Z) | 0, 
        s = s + Math.imul(g, V) | 0, u = (u = u + Math.imul(g, $) | 0) + Math.imul(y, V) | 0, h = h + Math.imul(y, $) | 0, s = s + Math.imul(p, Y) | 0, 
        u = (u = u + Math.imul(p, J) | 0) + Math.imul(m, Y) | 0, h = h + Math.imul(m, J) | 0;
        var _t = (a + (s = s + Math.imul(c, X) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, tt) | 0) + Math.imul(f, X) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, tt) | 0) + (u >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, s = Math.imul(E, H), u = (u = Math.imul(E, F)) + Math.imul(S, H) | 0, 
        h = Math.imul(S, F), s = s + Math.imul(k, D) | 0, u = (u = u + Math.imul(k, Z) | 0) + Math.imul(x, D) | 0, h = h + Math.imul(x, Z) | 0, 
        s = s + Math.imul(_, V) | 0, u = (u = u + Math.imul(_, $) | 0) + Math.imul(M, V) | 0, h = h + Math.imul(M, $) | 0, s = s + Math.imul(g, Y) | 0, 
        u = (u = u + Math.imul(g, J) | 0) + Math.imul(y, Y) | 0, h = h + Math.imul(y, J) | 0, s = s + Math.imul(p, X) | 0, u = (u = u + Math.imul(p, tt) | 0) + Math.imul(m, X) | 0, 
        h = h + Math.imul(m, tt) | 0;
        var Mt = (a + (s = s + Math.imul(c, rt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, nt) | 0) + Math.imul(f, rt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, nt) | 0) + (u >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, s = Math.imul(C, H), u = (u = Math.imul(C, F)) + Math.imul(T, H) | 0, 
        h = Math.imul(T, F), s = s + Math.imul(E, D) | 0, u = (u = u + Math.imul(E, Z) | 0) + Math.imul(S, D) | 0, h = h + Math.imul(S, Z) | 0, 
        s = s + Math.imul(k, V) | 0, u = (u = u + Math.imul(k, $) | 0) + Math.imul(x, V) | 0, h = h + Math.imul(x, $) | 0, s = s + Math.imul(_, Y) | 0, 
        u = (u = u + Math.imul(_, J) | 0) + Math.imul(M, Y) | 0, h = h + Math.imul(M, J) | 0, s = s + Math.imul(g, X) | 0, u = (u = u + Math.imul(g, tt) | 0) + Math.imul(y, X) | 0, 
        h = h + Math.imul(y, tt) | 0, s = s + Math.imul(p, rt) | 0, u = (u = u + Math.imul(p, nt) | 0) + Math.imul(m, rt) | 0, h = h + Math.imul(m, nt) | 0;
        var bt = (a + (s = s + Math.imul(c, ot) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, at) | 0) + Math.imul(f, ot) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, at) | 0) + (u >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, s = Math.imul(L, H), u = (u = Math.imul(L, F)) + Math.imul(P, H) | 0, 
        h = Math.imul(P, F), s = s + Math.imul(C, D) | 0, u = (u = u + Math.imul(C, Z) | 0) + Math.imul(T, D) | 0, h = h + Math.imul(T, Z) | 0, 
        s = s + Math.imul(E, V) | 0, u = (u = u + Math.imul(E, $) | 0) + Math.imul(S, V) | 0, h = h + Math.imul(S, $) | 0, s = s + Math.imul(k, Y) | 0, 
        u = (u = u + Math.imul(k, J) | 0) + Math.imul(x, Y) | 0, h = h + Math.imul(x, J) | 0, s = s + Math.imul(_, X) | 0, u = (u = u + Math.imul(_, tt) | 0) + Math.imul(M, X) | 0, 
        h = h + Math.imul(M, tt) | 0, s = s + Math.imul(g, rt) | 0, u = (u = u + Math.imul(g, nt) | 0) + Math.imul(y, rt) | 0, h = h + Math.imul(y, nt) | 0, 
        s = s + Math.imul(p, ot) | 0, u = (u = u + Math.imul(p, at) | 0) + Math.imul(m, ot) | 0, h = h + Math.imul(m, at) | 0;
        var kt = (a + (s = s + Math.imul(c, ut) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ht) | 0) + Math.imul(f, ut) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ht) | 0) + (u >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, s = Math.imul(O, H), u = (u = Math.imul(O, F)) + Math.imul(N, H) | 0, 
        h = Math.imul(N, F), s = s + Math.imul(L, D) | 0, u = (u = u + Math.imul(L, Z) | 0) + Math.imul(P, D) | 0, h = h + Math.imul(P, Z) | 0, 
        s = s + Math.imul(C, V) | 0, u = (u = u + Math.imul(C, $) | 0) + Math.imul(T, V) | 0, h = h + Math.imul(T, $) | 0, s = s + Math.imul(E, Y) | 0, 
        u = (u = u + Math.imul(E, J) | 0) + Math.imul(S, Y) | 0, h = h + Math.imul(S, J) | 0, s = s + Math.imul(k, X) | 0, u = (u = u + Math.imul(k, tt) | 0) + Math.imul(x, X) | 0, 
        h = h + Math.imul(x, tt) | 0, s = s + Math.imul(_, rt) | 0, u = (u = u + Math.imul(_, nt) | 0) + Math.imul(M, rt) | 0, h = h + Math.imul(M, nt) | 0, 
        s = s + Math.imul(g, ot) | 0, u = (u = u + Math.imul(g, at) | 0) + Math.imul(y, ot) | 0, h = h + Math.imul(y, at) | 0, s = s + Math.imul(p, ut) | 0, 
        u = (u = u + Math.imul(p, ht) | 0) + Math.imul(m, ut) | 0, h = h + Math.imul(m, ht) | 0;
        var xt = (a + (s = s + Math.imul(c, ct) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ft) | 0) + Math.imul(f, ct) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ft) | 0) + (u >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, s = Math.imul(q, H), u = (u = Math.imul(q, F)) + Math.imul(j, H) | 0, 
        h = Math.imul(j, F), s = s + Math.imul(O, D) | 0, u = (u = u + Math.imul(O, Z) | 0) + Math.imul(N, D) | 0, h = h + Math.imul(N, Z) | 0, 
        s = s + Math.imul(L, V) | 0, u = (u = u + Math.imul(L, $) | 0) + Math.imul(P, V) | 0, h = h + Math.imul(P, $) | 0, s = s + Math.imul(C, Y) | 0, 
        u = (u = u + Math.imul(C, J) | 0) + Math.imul(T, Y) | 0, h = h + Math.imul(T, J) | 0, s = s + Math.imul(E, X) | 0, u = (u = u + Math.imul(E, tt) | 0) + Math.imul(S, X) | 0, 
        h = h + Math.imul(S, tt) | 0, s = s + Math.imul(k, rt) | 0, u = (u = u + Math.imul(k, nt) | 0) + Math.imul(x, rt) | 0, h = h + Math.imul(x, nt) | 0, 
        s = s + Math.imul(_, ot) | 0, u = (u = u + Math.imul(_, at) | 0) + Math.imul(M, ot) | 0, h = h + Math.imul(M, at) | 0, s = s + Math.imul(g, ut) | 0, 
        u = (u = u + Math.imul(g, ht) | 0) + Math.imul(y, ut) | 0, h = h + Math.imul(y, ht) | 0, s = s + Math.imul(p, ct) | 0, u = (u = u + Math.imul(p, ft) | 0) + Math.imul(m, ct) | 0, 
        h = h + Math.imul(m, ft) | 0;
        var At = (a + (s = s + Math.imul(c, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, mt) | 0) + Math.imul(f, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, mt) | 0) + (u >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, s = Math.imul(q, D), u = (u = Math.imul(q, Z)) + Math.imul(j, D) | 0, 
        h = Math.imul(j, Z), s = s + Math.imul(O, V) | 0, u = (u = u + Math.imul(O, $) | 0) + Math.imul(N, V) | 0, h = h + Math.imul(N, $) | 0, 
        s = s + Math.imul(L, Y) | 0, u = (u = u + Math.imul(L, J) | 0) + Math.imul(P, Y) | 0, h = h + Math.imul(P, J) | 0, s = s + Math.imul(C, X) | 0, 
        u = (u = u + Math.imul(C, tt) | 0) + Math.imul(T, X) | 0, h = h + Math.imul(T, tt) | 0, s = s + Math.imul(E, rt) | 0, u = (u = u + Math.imul(E, nt) | 0) + Math.imul(S, rt) | 0, 
        h = h + Math.imul(S, nt) | 0, s = s + Math.imul(k, ot) | 0, u = (u = u + Math.imul(k, at) | 0) + Math.imul(x, ot) | 0, h = h + Math.imul(x, at) | 0, 
        s = s + Math.imul(_, ut) | 0, u = (u = u + Math.imul(_, ht) | 0) + Math.imul(M, ut) | 0, h = h + Math.imul(M, ht) | 0, s = s + Math.imul(g, ct) | 0, 
        u = (u = u + Math.imul(g, ft) | 0) + Math.imul(y, ct) | 0, h = h + Math.imul(y, ft) | 0;
        var Et = (a + (s = s + Math.imul(p, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(p, mt) | 0) + Math.imul(m, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(m, mt) | 0) + (u >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, s = Math.imul(q, V), u = (u = Math.imul(q, $)) + Math.imul(j, V) | 0, 
        h = Math.imul(j, $), s = s + Math.imul(O, Y) | 0, u = (u = u + Math.imul(O, J) | 0) + Math.imul(N, Y) | 0, h = h + Math.imul(N, J) | 0, 
        s = s + Math.imul(L, X) | 0, u = (u = u + Math.imul(L, tt) | 0) + Math.imul(P, X) | 0, h = h + Math.imul(P, tt) | 0, s = s + Math.imul(C, rt) | 0, 
        u = (u = u + Math.imul(C, nt) | 0) + Math.imul(T, rt) | 0, h = h + Math.imul(T, nt) | 0, s = s + Math.imul(E, ot) | 0, u = (u = u + Math.imul(E, at) | 0) + Math.imul(S, ot) | 0, 
        h = h + Math.imul(S, at) | 0, s = s + Math.imul(k, ut) | 0, u = (u = u + Math.imul(k, ht) | 0) + Math.imul(x, ut) | 0, h = h + Math.imul(x, ht) | 0, 
        s = s + Math.imul(_, ct) | 0, u = (u = u + Math.imul(_, ft) | 0) + Math.imul(M, ct) | 0, h = h + Math.imul(M, ft) | 0;
        var St = (a + (s = s + Math.imul(g, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(g, mt) | 0) + Math.imul(y, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(y, mt) | 0) + (u >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, s = Math.imul(q, Y), u = (u = Math.imul(q, J)) + Math.imul(j, Y) | 0, 
        h = Math.imul(j, J), s = s + Math.imul(O, X) | 0, u = (u = u + Math.imul(O, tt) | 0) + Math.imul(N, X) | 0, h = h + Math.imul(N, tt) | 0, 
        s = s + Math.imul(L, rt) | 0, u = (u = u + Math.imul(L, nt) | 0) + Math.imul(P, rt) | 0, h = h + Math.imul(P, nt) | 0, s = s + Math.imul(C, ot) | 0, 
        u = (u = u + Math.imul(C, at) | 0) + Math.imul(T, ot) | 0, h = h + Math.imul(T, at) | 0, s = s + Math.imul(E, ut) | 0, u = (u = u + Math.imul(E, ht) | 0) + Math.imul(S, ut) | 0, 
        h = h + Math.imul(S, ht) | 0, s = s + Math.imul(k, ct) | 0, u = (u = u + Math.imul(k, ft) | 0) + Math.imul(x, ct) | 0, h = h + Math.imul(x, ft) | 0;
        var Rt = (a + (s = s + Math.imul(_, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(_, mt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(M, mt) | 0) + (u >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, s = Math.imul(q, X), u = (u = Math.imul(q, tt)) + Math.imul(j, X) | 0, 
        h = Math.imul(j, tt), s = s + Math.imul(O, rt) | 0, u = (u = u + Math.imul(O, nt) | 0) + Math.imul(N, rt) | 0, h = h + Math.imul(N, nt) | 0, 
        s = s + Math.imul(L, ot) | 0, u = (u = u + Math.imul(L, at) | 0) + Math.imul(P, ot) | 0, h = h + Math.imul(P, at) | 0, s = s + Math.imul(C, ut) | 0, 
        u = (u = u + Math.imul(C, ht) | 0) + Math.imul(T, ut) | 0, h = h + Math.imul(T, ht) | 0, s = s + Math.imul(E, ct) | 0, u = (u = u + Math.imul(E, ft) | 0) + Math.imul(S, ct) | 0, 
        h = h + Math.imul(S, ft) | 0;
        var Ct = (a + (s = s + Math.imul(k, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(k, mt) | 0) + Math.imul(x, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(x, mt) | 0) + (u >>> 13) | 0) + (Ct >>> 26) | 0, Ct &= 67108863, s = Math.imul(q, rt), u = (u = Math.imul(q, nt)) + Math.imul(j, rt) | 0, 
        h = Math.imul(j, nt), s = s + Math.imul(O, ot) | 0, u = (u = u + Math.imul(O, at) | 0) + Math.imul(N, ot) | 0, h = h + Math.imul(N, at) | 0, 
        s = s + Math.imul(L, ut) | 0, u = (u = u + Math.imul(L, ht) | 0) + Math.imul(P, ut) | 0, h = h + Math.imul(P, ht) | 0, s = s + Math.imul(C, ct) | 0, 
        u = (u = u + Math.imul(C, ft) | 0) + Math.imul(T, ct) | 0, h = h + Math.imul(T, ft) | 0;
        var Tt = (a + (s = s + Math.imul(E, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(E, mt) | 0) + Math.imul(S, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(S, mt) | 0) + (u >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, s = Math.imul(q, ot), u = (u = Math.imul(q, at)) + Math.imul(j, ot) | 0, 
        h = Math.imul(j, at), s = s + Math.imul(O, ut) | 0, u = (u = u + Math.imul(O, ht) | 0) + Math.imul(N, ut) | 0, h = h + Math.imul(N, ht) | 0, 
        s = s + Math.imul(L, ct) | 0, u = (u = u + Math.imul(L, ft) | 0) + Math.imul(P, ct) | 0, h = h + Math.imul(P, ft) | 0;
        var Bt = (a + (s = s + Math.imul(C, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(C, mt) | 0) + Math.imul(T, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(T, mt) | 0) + (u >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863, s = Math.imul(q, ut), u = (u = Math.imul(q, ht)) + Math.imul(j, ut) | 0, 
        h = Math.imul(j, ht), s = s + Math.imul(O, ct) | 0, u = (u = u + Math.imul(O, ft) | 0) + Math.imul(N, ct) | 0, h = h + Math.imul(N, ft) | 0;
        var Lt = (a + (s = s + Math.imul(L, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(L, mt) | 0) + Math.imul(P, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(P, mt) | 0) + (u >>> 13) | 0) + (Lt >>> 26) | 0, Lt &= 67108863, s = Math.imul(q, ct), u = (u = Math.imul(q, ft)) + Math.imul(j, ct) | 0, 
        h = Math.imul(j, ft);
        var Pt = (a + (s = s + Math.imul(O, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(O, mt) | 0) + Math.imul(N, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(N, mt) | 0) + (u >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863;
        var It = (a + (s = Math.imul(q, pt)) | 0) + ((8191 & (u = (u = Math.imul(q, mt)) + Math.imul(j, pt) | 0)) << 13) | 0;
        return a = ((h = Math.imul(j, mt)) + (u >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, o[0] = vt, o[1] = gt, o[2] = yt, 
        o[3] = wt, o[4] = _t, o[5] = Mt, o[6] = bt, o[7] = kt, o[8] = xt, o[9] = At, o[10] = Et, o[11] = St, o[12] = Rt, o[13] = Ct, 
        o[14] = Tt, o[15] = Bt, o[16] = Lt, o[17] = Pt, o[18] = It, 0 !== a && (o[19] = a, r.length++), r;
      };
      function m(t, e, r) {
        return (new v).mulp(t, e, r);
      }
      function v(t, e) {
        this.x = t, this.y = e;
      }
      Math.imul || (p = d), o.prototype.mulTo = function(t, e) {
        var r;
        var n = this.length + t.length;
        return r = 10 === this.length && 10 === t.length ? p(this, t, e) : n < 63 ? d(this, t, e) : n < 1024 ? function(t, e, r) {
          r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
          var n = 0;
          var i = 0;
          for (var o = 0; o < r.length - 1; o++) {
            var a = i;
            i = 0;
            var s = 67108863 & n;
            var u = Math.min(o, e.length - 1);
            for (var h = Math.max(0, o - t.length + 1); h <= u; h++) {
              var l = o - h;
              var c = (0 | t.words[l]) * (0 | e.words[h]);
              var f = 67108863 & c;
              s = 67108863 & (f = f + s | 0), i += (a = (a = a + (c / 67108864 | 0) | 0) + (f >>> 26) | 0) >>> 26, a &= 67108863;
            }
            r.words[o] = s, n = a, a = i;
          }
          return 0 !== n ? r.words[o] = n : r.length--, r.strip();
        }(this, t, e) : m(this, t, e), r;
      }, v.prototype.makeRBT = function(t) {
        var e = new Array(t);
        var r = o.prototype._countBits(t) - 1;
        for (var n = 0; n < t; n++) e[n] = this.revBin(n, r, t);
        return e;
      }, v.prototype.revBin = function(t, e, r) {
        if (0 === t || t === r - 1) return t;
        var n = 0;
        for (var i = 0; i < e; i++) n |= (1 & t) << e - i - 1, t >>= 1;
        return n;
      }, v.prototype.permute = function(t, e, r, n, i, o) {
        for (var a = 0; a < o; a++) n[a] = e[t[a]], i[a] = r[t[a]];
      }, v.prototype.transform = function(t, e, r, n, i, o) {
        this.permute(o, t, e, r, n, i);
        for (var a = 1; a < i; a <<= 1) {
          var s = a << 1;
          var u = Math.cos(2 * Math.PI / s);
          var h = Math.sin(2 * Math.PI / s);
          for (var l = 0; l < i; l += s) {
            var c = u;
            var f = h;
            for (var d = 0; d < a; d++) {
              var p = r[l + d];
              var m = n[l + d];
              var v = r[l + d + a];
              var g = n[l + d + a];
              var y = c * v - f * g;
              g = c * g + f * v, v = y, r[l + d] = p + v, n[l + d] = m + g, r[l + d + a] = p - v, n[l + d + a] = m - g, d !== s && (y = u * c - h * f, 
              f = u * f + h * c, c = y);
            }
          }
        }
      }, v.prototype.guessLen13b = function(t, e) {
        var r = 1 | Math.max(e, t);
        var n = 1 & r;
        var i = 0;
        for (r = r / 2 | 0; r; r >>>= 1) i++;
        return 1 << i + 1 + n;
      }, v.prototype.conjugate = function(t, e, r) {
        if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
          var i = t[n];
          t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
        }
      }, v.prototype.normalize13b = function(t, e) {
        var r = 0;
        for (var n = 0; n < e / 2; n++) {
          var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
          t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
        }
        return t;
      }, v.prototype.convert13b = function(t, e, r, i) {
        var o = 0;
        for (var a = 0; a < e; a++) o += 0 | t[a], r[2 * a] = 8191 & o, o >>>= 13, r[2 * a + 1] = 8191 & o, o >>>= 13;
        for (a = 2 * e; a < i; ++a) r[a] = 0;
        n(0 === o), n(0 == (-8192 & o));
      }, v.prototype.stub = function(t) {
        var e = new Array(t);
        for (var r = 0; r < t; r++) e[r] = 0;
        return e;
      }, v.prototype.mulp = function(t, e, r) {
        var n = 2 * this.guessLen13b(t.length, e.length);
        var i = this.makeRBT(n);
        var o = this.stub(n);
        var a = new Array(n);
        var s = new Array(n);
        var u = new Array(n);
        var h = new Array(n);
        var l = new Array(n);
        var c = new Array(n);
        var f = r.words;
        f.length = n, this.convert13b(t.words, t.length, a, n), this.convert13b(e.words, e.length, h, n), this.transform(a, o, s, u, n, i), 
        this.transform(h, o, l, c, n, i);
        for (var d = 0; d < n; d++) {
          var p = s[d] * l[d] - u[d] * c[d];
          u[d] = s[d] * c[d] + u[d] * l[d], s[d] = p;
        }
        return this.conjugate(s, u, n), this.transform(s, u, f, o, n, i), this.conjugate(f, o, n), this.normalize13b(f, n), r.negative = t.negative ^ e.negative, 
        r.length = t.length + e.length, r.strip();
      }, o.prototype.mul = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), this.mulTo(t, e);
      }, o.prototype.mulf = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), m(this, t, e);
      }, o.prototype.imul = function(t) {
        return this.clone().mulTo(t, this);
      }, o.prototype.imuln = function(t) {
        n('number' == typeof t), n(t < 67108864);
        var e = 0;
        for (var r = 0; r < this.length; r++) {
          var i = (0 | this.words[r]) * t;
          var o = (67108863 & i) + (67108863 & e);
          e >>= 26, e += i / 67108864 | 0, e += o >>> 26, this.words[r] = 67108863 & o;
        }
        return 0 !== e && (this.words[r] = e, this.length++), this;
      }, o.prototype.muln = function(t) {
        return this.clone().imuln(t);
      }, o.prototype.sqr = function() {
        return this.mul(this);
      }, o.prototype.isqr = function() {
        return this.imul(this.clone());
      }, o.prototype.pow = function(t) {
        var e = function(t) {
          var e = new Array(t.bitLength());
          for (var r = 0; r < e.length; r++) {
            var n = r / 26 | 0;
            var i = r % 26;
            e[r] = (t.words[n] & 1 << i) >>> i;
          }
          return e;
        }(t);
        if (0 === e.length) return new o(1);
        var r = this;
        for (var n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr()) ;
        if (++n < e.length) for (var i = r.sqr(); n < e.length; n++, i = i.sqr()) 0 !== e[n] && (r = r.mul(i));
        return r;
      }, o.prototype.iushln = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 67108863 >>> 26 - e << 26 - e;
        var o;
        if (0 !== e) {
          var a = 0;
          for (o = 0; o < this.length; o++) {
            var s = this.words[o] & i;
            var u = (0 | this.words[o]) - s << e;
            this.words[o] = u | a, a = s >>> 26 - e;
          }
          a && (this.words[o] = a, this.length++);
        }
        if (0 !== r) {
          for (o = this.length - 1; o >= 0; o--) this.words[o + r] = this.words[o];
          for (o = 0; o < r; o++) this.words[o] = 0;
          this.length += r;
        }
        return this.strip();
      }, o.prototype.ishln = function(t) {
        return n(0 === this.negative), this.iushln(t);
      }, o.prototype.iushrn = function(t, e, r) {
        var i;
        n('number' == typeof t && t >= 0), i = e ? (e - e % 26) / 26 : 0;
        var o = t % 26;
        var a = Math.min((t - o) / 26, this.length);
        var s = 67108863 ^ 67108863 >>> o << o;
        var u = r;
        if (i -= a, i = Math.max(0, i), u) {
          for (var h = 0; h < a; h++) u.words[h] = this.words[h];
          u.length = a;
        }
        if (0 === a) ; else if (this.length > a) for (this.length -= a, h = 0; h < this.length; h++) this.words[h] = this.words[h + a]; else this.words[0] = 0, 
        this.length = 1;
        var l = 0;
        for (h = this.length - 1; h >= 0 && (0 !== l || h >= i); h--) {
          var c = 0 | this.words[h];
          this.words[h] = l << 26 - o | c >>> o, l = c & s;
        }
        return u && 0 !== l && (u.words[u.length++] = l), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
      }, o.prototype.ishrn = function(t, e, r) {
        return n(0 === this.negative), this.iushrn(t, e, r);
      }, o.prototype.shln = function(t) {
        return this.clone().ishln(t);
      }, o.prototype.ushln = function(t) {
        return this.clone().iushln(t);
      }, o.prototype.shrn = function(t) {
        return this.clone().ishrn(t);
      }, o.prototype.ushrn = function(t) {
        return this.clone().iushrn(t);
      }, o.prototype.testn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        return !(this.length <= r) && !!(this.words[r] & i);
      }, o.prototype.imaskn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        if (n(0 === this.negative, 'imaskn works only with positive numbers'), this.length <= r) return this;
        if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
          var i = 67108863 ^ 67108863 >>> e << e;
          this.words[this.length - 1] &= i;
        }
        return this.strip();
      }, o.prototype.maskn = function(t) {
        return this.clone().imaskn(t);
      }, o.prototype.iaddn = function(t) {
        return n('number' == typeof t), n(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < t ? (this.words[0] = t - (0 | this.words[0]), 
        this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, this) : this._iaddn(t);
      }, o.prototype._iaddn = function(t) {
        this.words[0] += t;
        for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) this.words[e] -= 67108864, e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
        return this.length = Math.max(this.length, e + 1), this;
      }, o.prototype.isubn = function(t) {
        if (n('number' == typeof t), n(t < 67108864), t < 0) return this.iaddn(-t);
        if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, this;
        if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var e = 0; e < this.length && this.words[e] < 0; e++) this.words[e] += 67108864, 
        this.words[e + 1] -= 1;
        return this.strip();
      }, o.prototype.addn = function(t) {
        return this.clone().iaddn(t);
      }, o.prototype.subn = function(t) {
        return this.clone().isubn(t);
      }, o.prototype.iabs = function() {
        return this.negative = 0, this;
      }, o.prototype.abs = function() {
        return this.clone().iabs();
      }, o.prototype._ishlnsubmul = function(t, e, r) {
        var i = t.length + r;
        var o;
        var a;
        this._expand(i);
        var s = 0;
        for (o = 0; o < t.length; o++) {
          a = (0 | this.words[o + r]) + s;
          var u = (0 | t.words[o]) * e;
          s = ((a -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[o + r] = 67108863 & a;
        }
        for (;o < this.length - r; o++) s = (a = (0 | this.words[o + r]) + s) >> 26, this.words[o + r] = 67108863 & a;
        if (0 === s) return this.strip();
        for (n(-1 === s), s = 0, o = 0; o < this.length; o++) s = (a = -(0 | this.words[o]) + s) >> 26, this.words[o] = 67108863 & a;
        return this.negative = 1, this.strip();
      }, o.prototype._wordDiv = function(t, e) {
        var r = (this.length, t.length);
        var n = this.clone();
        var i = t;
        var a = 0 | i.words[i.length - 1];
        0 !== (r = 26 - this._countBits(a)) && (i = i.ushln(r), n.iushln(r), a = 0 | i.words[i.length - 1]);
        var s = n.length - i.length;
        var u;
        if ('mod' !== e) {
          (u = new o(null)).length = s + 1, u.words = new Array(u.length);
          for (var h = 0; h < u.length; h++) u.words[h] = 0;
        }
        var l = n.clone()._ishlnsubmul(i, 1, s);
        0 === l.negative && (n = l, u && (u.words[s] = 1));
        for (var c = s - 1; c >= 0; c--) {
          var f = 67108864 * (0 | n.words[i.length + c]) + (0 | n.words[i.length + c - 1]);
          for (f = Math.min(f / a | 0, 67108863), n._ishlnsubmul(i, f, c); 0 !== n.negative; ) f--, n.negative = 0, n._ishlnsubmul(i, 1, c), 
          n.isZero() || (n.negative ^= 1);
          u && (u.words[c] = f);
        }
        return u && u.strip(), n.strip(), 'div' !== e && 0 !== r && n.iushrn(r), {
          div: u || null,
          mod: n
        };
      }, o.prototype.divmod = function(t, e, r) {
        return n(!t.isZero()), this.isZero() ? {
          div: new o(0),
          mod: new o(0)
        } : 0 !== this.negative && 0 === t.negative ? (s = this.neg().divmod(t, e), 'mod' !== e && (i = s.div.neg()), 'div' !== e && (a = s.mod.neg(), 
        r && 0 !== a.negative && a.iadd(t)), {
          div: i,
          mod: a
        }) : 0 === this.negative && 0 !== t.negative ? (s = this.divmod(t.neg(), e), 'mod' !== e && (i = s.div.neg()), {
          div: i,
          mod: s.mod
        }) : 0 != (this.negative & t.negative) ? (s = this.neg().divmod(t.neg(), e), 'div' !== e && (a = s.mod.neg(), r && 0 !== a.negative && a.isub(t)), 
        {
          div: s.div,
          mod: a
        }) : t.length > this.length || this.cmp(t) < 0 ? {
          div: new o(0),
          mod: this
        } : 1 === t.length ? 'div' === e ? {
          div: this.divn(t.words[0]),
          mod: null
        } : 'mod' === e ? {
          div: null,
          mod: new o(this.modn(t.words[0]))
        } : {
          div: this.divn(t.words[0]),
          mod: new o(this.modn(t.words[0]))
        } : this._wordDiv(t, e);
        var i, a, s;
      }, o.prototype.div = function(t) {
        return this.divmod(t, 'div', !1).div;
      }, o.prototype.mod = function(t) {
        return this.divmod(t, 'mod', !1).mod;
      }, o.prototype.umod = function(t) {
        return this.divmod(t, 'mod', !0).mod;
      }, o.prototype.divRound = function(t) {
        var e = this.divmod(t);
        if (e.mod.isZero()) return e.div;
        var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod;
        var n = t.ushrn(1);
        var i = t.andln(1);
        var o = r.cmp(n);
        return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
      }, o.prototype.modn = function(t) {
        n(t <= 67108863);
        var e = (1 << 26) % t;
        var r = 0;
        for (var i = this.length - 1; i >= 0; i--) r = (e * r + (0 | this.words[i])) % t;
        return r;
      }, o.prototype.idivn = function(t) {
        n(t <= 67108863);
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var i = (0 | this.words[r]) + 67108864 * e;
          this.words[r] = i / t | 0, e = i % t;
        }
        return this.strip();
      }, o.prototype.divn = function(t) {
        return this.clone().idivn(t);
      }, o.prototype.egcd = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = new o(0);
        var u = new o(1);
        var h = 0;
        for (;e.isEven() && r.isEven(); ) e.iushrn(1), r.iushrn(1), ++h;
        var l = r.clone();
        var c = e.clone();
        for (;!e.isZero(); ) {
          for (var f = 0, d = 1; 0 == (e.words[0] & d) && f < 26; ++f, d <<= 1) ;
          if (f > 0) for (e.iushrn(f); f-- > 0; ) (i.isOdd() || a.isOdd()) && (i.iadd(l), a.isub(c)), i.iushrn(1), a.iushrn(1);
          for (var p = 0, m = 1; 0 == (r.words[0] & m) && p < 26; ++p, m <<= 1) ;
          if (p > 0) for (r.iushrn(p); p-- > 0; ) (s.isOdd() || u.isOdd()) && (s.iadd(l), u.isub(c)), s.iushrn(1), u.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(s), a.isub(u)) : (r.isub(e), s.isub(i), u.isub(a));
        }
        return {
          a: s,
          b: u,
          gcd: r.iushln(h)
        };
      }, o.prototype._invmp = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = r.clone();
        for (;e.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
          for (var u = 0, h = 1; 0 == (e.words[0] & h) && u < 26; ++u, h <<= 1) ;
          if (u > 0) for (e.iushrn(u); u-- > 0; ) i.isOdd() && i.iadd(s), i.iushrn(1);
          for (var l = 0, c = 1; 0 == (r.words[0] & c) && l < 26; ++l, c <<= 1) ;
          if (l > 0) for (r.iushrn(l); l-- > 0; ) a.isOdd() && a.iadd(s), a.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(a)) : (r.isub(e), a.isub(i));
        }
        var f;
        return (f = 0 === e.cmpn(1) ? i : a).cmpn(0) < 0 && f.iadd(t), f;
      }, o.prototype.gcd = function(t) {
        if (this.isZero()) return t.abs();
        if (t.isZero()) return this.abs();
        var e = this.clone();
        var r = t.clone();
        e.negative = 0, r.negative = 0;
        for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
        for (;;) {
          for (;e.isEven(); ) e.iushrn(1);
          for (;r.isEven(); ) r.iushrn(1);
          var i = e.cmp(r);
          if (i < 0) {
            var o = e;
            e = r, r = o;
          } else if (0 === i || 0 === r.cmpn(1)) break;
          e.isub(r);
        }
        return r.iushln(n);
      }, o.prototype.invm = function(t) {
        return this.egcd(t).a.umod(t);
      }, o.prototype.isEven = function() {
        return 0 == (1 & this.words[0]);
      }, o.prototype.isOdd = function() {
        return 1 == (1 & this.words[0]);
      }, o.prototype.andln = function(t) {
        return this.words[0] & t;
      }, o.prototype.bincn = function(t) {
        n('number' == typeof t);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
        var o = i;
        for (var a = r; 0 !== o && a < this.length; a++) {
          var s = 0 | this.words[a];
          o = (s += o) >>> 26, s &= 67108863, this.words[a] = s;
        }
        return 0 !== o && (this.words[a] = o, this.length++), this;
      }, o.prototype.isZero = function() {
        return 1 === this.length && 0 === this.words[0];
      }, o.prototype.cmpn = function(t) {
        var e = t < 0;
        if (0 !== this.negative && !e) return -1;
        if (0 === this.negative && e) return 1;
        var r;
        if (this.strip(), this.length > 1) r = 1; else {
          e && (t = -t), n(t <= 67108863, 'Number is too big');
          var i = 0 | this.words[0];
          r = i === t ? 0 : i < t ? -1 : 1;
        }
        return 0 !== this.negative ? 0 | -r : r;
      }, o.prototype.cmp = function(t) {
        if (0 !== this.negative && 0 === t.negative) return -1;
        if (0 === this.negative && 0 !== t.negative) return 1;
        var e = this.ucmp(t);
        return 0 !== this.negative ? 0 | -e : e;
      }, o.prototype.ucmp = function(t) {
        if (this.length > t.length) return 1;
        if (this.length < t.length) return -1;
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var n = 0 | this.words[r];
          var i = 0 | t.words[r];
          if (n !== i) {
            n < i ? e = -1 : n > i && (e = 1);
            break;
          }
        }
        return e;
      }, o.prototype.gtn = function(t) {
        return 1 === this.cmpn(t);
      }, o.prototype.gt = function(t) {
        return 1 === this.cmp(t);
      }, o.prototype.gten = function(t) {
        return this.cmpn(t) >= 0;
      }, o.prototype.gte = function(t) {
        return this.cmp(t) >= 0;
      }, o.prototype.ltn = function(t) {
        return -1 === this.cmpn(t);
      }, o.prototype.lt = function(t) {
        return -1 === this.cmp(t);
      }, o.prototype.lten = function(t) {
        return this.cmpn(t) <= 0;
      }, o.prototype.lte = function(t) {
        return this.cmp(t) <= 0;
      }, o.prototype.eqn = function(t) {
        return 0 === this.cmpn(t);
      }, o.prototype.eq = function(t) {
        return 0 === this.cmp(t);
      }, o.red = function(t) {
        return new k(t);
      }, o.prototype.toRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), n(0 === this.negative, 'red works only with positives'), t.convertTo(this)._forceRed(t);
      }, o.prototype.fromRed = function() {
        return n(this.red, 'fromRed works only with numbers in reduction context'), this.red.convertFrom(this);
      }, o.prototype._forceRed = function(t) {
        return this.red = t, this;
      }, o.prototype.forceRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), this._forceRed(t);
      }, o.prototype.redAdd = function(t) {
        return n(this.red, 'redAdd works only with red numbers'), this.red.add(this, t);
      }, o.prototype.redIAdd = function(t) {
        return n(this.red, 'redIAdd works only with red numbers'), this.red.iadd(this, t);
      }, o.prototype.redSub = function(t) {
        return n(this.red, 'redSub works only with red numbers'), this.red.sub(this, t);
      }, o.prototype.redISub = function(t) {
        return n(this.red, 'redISub works only with red numbers'), this.red.isub(this, t);
      }, o.prototype.redShl = function(t) {
        return n(this.red, 'redShl works only with red numbers'), this.red.shl(this, t);
      }, o.prototype.redMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.mul(this, t);
      }, o.prototype.redIMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.imul(this, t);
      }, o.prototype.redSqr = function() {
        return n(this.red, 'redSqr works only with red numbers'), this.red._verify1(this), this.red.sqr(this);
      }, o.prototype.redISqr = function() {
        return n(this.red, 'redISqr works only with red numbers'), this.red._verify1(this), this.red.isqr(this);
      }, o.prototype.redSqrt = function() {
        return n(this.red, 'redSqrt works only with red numbers'), this.red._verify1(this), this.red.sqrt(this);
      }, o.prototype.redInvm = function() {
        return n(this.red, 'redInvm works only with red numbers'), this.red._verify1(this), this.red.invm(this);
      }, o.prototype.redNeg = function() {
        return n(this.red, 'redNeg works only with red numbers'), this.red._verify1(this), this.red.neg(this);
      }, o.prototype.redPow = function(t) {
        return n(this.red && !t.red, 'redPow(normalNum)'), this.red._verify1(this), this.red.pow(this, t);
      };
      var g = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function y(t, e) {
        this.name = t, this.p = new o(e, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      function w() {
        y.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      function _() {
        y.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      function M() {
        y.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      function b() {
        y.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      function k(t) {
        if ('string' == typeof t) {
          var e = o._prime(t);
          this.m = e.p, this.prime = e;
        } else n(t.gtn(1), 'modulus must be greater than 1'), this.m = t, this.prime = null;
      }
      function x(t) {
        k.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), 
        this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
        this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      y.prototype._tmp = function() {
        var t = new o(null);
        return t.words = new Array(Math.ceil(this.n / 13)), t;
      }, y.prototype.ireduce = function(t) {
        var e = t;
        var r;
        do {
          this.split(e, this.tmp), r = (e = (e = this.imulK(e)).iadd(this.tmp)).bitLength();
        } while (r > this.n);
        var n = r < this.n ? -1 : e.ucmp(this.p);
        return 0 === n ? (e.words[0] = 0, e.length = 1) : n > 0 ? e.isub(this.p) : void 0 !== e.strip ? e.strip() : e._strip(), 
        e;
      }, y.prototype.split = function(t, e) {
        t.iushrn(this.n, 0, e);
      }, y.prototype.imulK = function(t) {
        return t.imul(this.k);
      }, i(w, y), w.prototype.split = function(t, e) {
        var r = 4194303;
        var n = Math.min(t.length, 9);
        for (var i = 0; i < n; i++) e.words[i] = t.words[i];
        if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
        var o = t.words[9];
        for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
          var a = 0 | t.words[i];
          t.words[i - 10] = (a & r) << 4 | o >>> 22, o = a;
        }
        o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
      }, w.prototype.imulK = function(t) {
        t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 0 | t.words[r];
          e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
        }
        return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), t;
      }, i(_, y), i(M, y), i(b, y), b.prototype.imulK = function(t) {
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 19 * (0 | t.words[r]) + e;
          var i = 67108863 & n;
          n >>>= 26, t.words[r] = i, e = n;
        }
        return 0 !== e && (t.words[t.length++] = e), t;
      }, o._prime = function(t) {
        if (g[t]) return g[t];
        var e;
        if ('k256' === t) e = new w; else if ('p224' === t) e = new _; else if ('p192' === t) e = new M; else {
          if ('p25519' !== t) throw new Error('Unknown prime ' + t);
          e = new b;
        }
        return g[t] = e, e;
      }, k.prototype._verify1 = function(t) {
        n(0 === t.negative, 'red works only with positives'), n(t.red, 'red works only with red numbers');
      }, k.prototype._verify2 = function(t, e) {
        n(0 == (t.negative | e.negative), 'red works only with positives'), n(t.red && t.red === e.red, 'red works only with red numbers');
      }, k.prototype.imod = function(t) {
        return this.prime ? this.prime.ireduce(t)._forceRed(this) : t.umod(this.m)._forceRed(this);
      }, k.prototype.neg = function(t) {
        return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
      }, k.prototype.add = function(t, e) {
        this._verify2(t, e);
        var r = t.add(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
      }, k.prototype.iadd = function(t, e) {
        this._verify2(t, e);
        var r = t.iadd(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r;
      }, k.prototype.sub = function(t, e) {
        this._verify2(t, e);
        var r = t.sub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
      }, k.prototype.isub = function(t, e) {
        this._verify2(t, e);
        var r = t.isub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r;
      }, k.prototype.shl = function(t, e) {
        return this._verify1(t), this.imod(t.ushln(e));
      }, k.prototype.imul = function(t, e) {
        return this._verify2(t, e), this.imod(t.imul(e));
      }, k.prototype.mul = function(t, e) {
        return this._verify2(t, e), this.imod(t.mul(e));
      }, k.prototype.isqr = function(t) {
        return this.imul(t, t.clone());
      }, k.prototype.sqr = function(t) {
        return this.mul(t, t);
      }, k.prototype.sqrt = function(t) {
        if (t.isZero()) return t.clone();
        var e = this.m.andln(3);
        if (n(e % 2 == 1), 3 === e) {
          var r = this.m.add(new o(1)).iushrn(2);
          return this.pow(t, r);
        }
        var i = this.m.subn(1);
        var a = 0;
        for (;!i.isZero() && 0 === i.andln(1); ) a++, i.iushrn(1);
        n(!i.isZero());
        var s = new o(1).toRed(this);
        var u = s.redNeg();
        var h = this.m.subn(1).iushrn(1);
        var l = this.m.bitLength();
        for (l = new o(2 * l * l).toRed(this); 0 !== this.pow(l, h).cmp(u); ) l.redIAdd(u);
        var c = this.pow(l, i);
        var f = this.pow(t, i.addn(1).iushrn(1));
        var d = this.pow(t, i);
        var p = a;
        for (;0 !== d.cmp(s); ) {
          var m = d;
          for (var v = 0; 0 !== m.cmp(s); v++) m = m.redSqr();
          n(v < p);
          var g = this.pow(c, new o(1).iushln(p - v - 1));
          f = f.redMul(g), c = g.redSqr(), d = d.redMul(c), p = v;
        }
        return f;
      }, k.prototype.invm = function(t) {
        var e = t._invmp(this.m);
        return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
      }, k.prototype.pow = function(t, e) {
        if (e.isZero()) return new o(1).toRed(this);
        if (0 === e.cmpn(1)) return t.clone();
        var r = new Array(16);
        r[0] = new o(1).toRed(this), r[1] = t;
        for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
        var i = r[0];
        var a = 0;
        var s = 0;
        var u = e.bitLength() % 26;
        for (0 === u && (u = 26), n = e.length - 1; n >= 0; n--) {
          var h = e.words[n];
          for (var l = u - 1; l >= 0; l--) {
            var c = h >> l & 1;
            i !== r[0] && (i = this.sqr(i)), 0 !== c || 0 !== a ? (a <<= 1, a |= c, (4 === ++s || 0 === n && 0 === l) && (i = this.mul(i, r[a]), 
            s = 0, a = 0)) : s = 0;
          }
          u = 26;
        }
        return i;
      }, k.prototype.convertTo = function(t) {
        var e = t.umod(this.m);
        return e === t ? e.clone() : e;
      }, k.prototype.convertFrom = function(t) {
        var e = t.clone();
        return e.red = null, e;
      }, o.mont = function(t) {
        return new x(t);
      }, i(x, k), x.prototype.convertTo = function(t) {
        return this.imod(t.ushln(this.shift));
      }, x.prototype.convertFrom = function(t) {
        var e = this.imod(t.mul(this.rinv));
        return e.red = null, e;
      }, x.prototype.imul = function(t, e) {
        if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
        var r = t.imul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var o = i;
        return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
      }, x.prototype.mul = function(t, e) {
        if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
        var r = t.mul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var a = i;
        return i.cmp(this.m) >= 0 ? a = i.isub(this.m) : i.cmpn(0) < 0 && (a = i.iadd(this.m)), a._forceRed(this);
      }, x.prototype.invm = function(t) {
        return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
      };
    }(t = r.nmd(t), this);
  },
  17499: (t, e, r) => {
    "use strict";
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
      return typeof t;
    } : function(t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    };
    var i = r(82192), o = i.keccak224, a = i.keccak384, s = i.keccak256, u = i.keccak512;
    var h = r(35525);
    var l = r(69282);
    var c = r(51675);
    var f = r(89817);
    var d = r(23482);
    var p = r(89509).Buffer;
    Object.assign(e, r(80884)), e.MAX_INTEGER = new f('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16), 
    e.TWO_POW256 = new f('10000000000000000000000000000000000000000000000000000000000000000', 16), e.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 
    e.SHA3_NULL_S = e.KECCAK256_NULL_S, e.KECCAK256_NULL = p.from(e.KECCAK256_NULL_S, 'hex'), e.SHA3_NULL = e.KECCAK256_NULL, 
    e.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', e.SHA3_RLP_ARRAY_S = e.KECCAK256_RLP_ARRAY_S, 
    e.KECCAK256_RLP_ARRAY = p.from(e.KECCAK256_RLP_ARRAY_S, 'hex'), e.SHA3_RLP_ARRAY = e.KECCAK256_RLP_ARRAY, e.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', 
    e.SHA3_RLP_S = e.KECCAK256_RLP_S, e.KECCAK256_RLP = p.from(e.KECCAK256_RLP_S, 'hex'), e.SHA3_RLP = e.KECCAK256_RLP, e.BN = f, 
    e.rlp = c, e.secp256k1 = h, e.zeros = function(t) {
      return p.allocUnsafe(t).fill(0);
    }, e.zeroAddress = function() {
      var t = e.zeros(20);
      return e.bufferToHex(t);
    }, e.setLengthLeft = e.setLength = function(t, r, n) {
      var i = e.zeros(r);
      return t = e.toBuffer(t), n ? t.length < r ? (t.copy(i), i) : t.slice(0, r) : t.length < r ? (t.copy(i, r - t.length), i) : t.slice(-r);
    }, e.setLengthRight = function(t, r) {
      return e.setLength(t, r, !0);
    }, e.unpad = e.stripZeros = function(t) {
      var r = (t = e.stripHexPrefix(t))[0];
      for (;t.length > 0 && '0' === r.toString(); ) r = (t = t.slice(1))[0];
      return t;
    }, e.toBuffer = function(t) {
      if (!p.isBuffer(t)) if (Array.isArray(t)) t = p.from(t); else if ('string' == typeof t) t = e.isHexString(t) ? p.from(e.padToEven(e.stripHexPrefix(t)), 'hex') : p.from(t); else if ('number' == typeof t) t = e.intToBuffer(t); else if (null == t) t = p.allocUnsafe(0); else if (f.isBN(t)) t = t.toArrayLike(p); else {
        if (!t.toArray) throw new Error('invalid type');
        t = p.from(t.toArray());
      }
      return t;
    }, e.bufferToInt = function(t) {
      return new f(e.toBuffer(t)).toNumber();
    }, e.bufferToHex = function(t) {
      return '0x' + (t = e.toBuffer(t)).toString('hex');
    }, e.fromSigned = function(t) {
      return new f(t).fromTwos(256);
    }, e.toUnsigned = function(t) {
      return p.from(t.toTwos(256).toArray());
    }, e.keccak = function(t, r) {
      switch (t = e.toBuffer(t), r || (r = 256), r) {
       case 224:
        return o(t);

       case 256:
        return s(t);

       case 384:
        return a(t);

       case 512:
        return u(t);

       default:
        throw new Error('Invald algorithm: keccak' + r);
      }
    }, e.keccak256 = function(t) {
      return e.keccak(t);
    }, e.sha3 = e.keccak, e.sha256 = function(t) {
      return t = e.toBuffer(t), d('sha256').update(t).digest();
    }, e.ripemd160 = function(t, r) {
      t = e.toBuffer(t);
      var n = d('rmd160').update(t).digest();
      return !0 === r ? e.setLength(n, 32) : n;
    }, e.rlphash = function(t) {
      return e.keccak(c.encode(t));
    }, e.isValidPrivate = function(t) {
      return h.privateKeyVerify(t);
    }, e.isValidPublic = function(t, e) {
      return 64 === t.length ? h.publicKeyVerify(p.concat([ p.from([ 4 ]), t ])) : !!e && h.publicKeyVerify(t);
    }, e.pubToAddress = e.publicToAddress = function(t, r) {
      return t = e.toBuffer(t), r && 64 !== t.length && (t = h.publicKeyConvert(t, !1).slice(1)), l(64 === t.length), e.keccak(t).slice(-20);
    };
    var m = e.privateToPublic = function(t) {
      return t = e.toBuffer(t), h.publicKeyCreate(t, !1).slice(1);
    };
    e.importPublic = function(t) {
      return 64 !== (t = e.toBuffer(t)).length && (t = h.publicKeyConvert(t, !1).slice(1)), t;
    }, e.ecsign = function(t, e) {
      var r = h.sign(t, e);
      var n = {};
      return n.r = r.signature.slice(0, 32), n.s = r.signature.slice(32, 64), n.v = r.recovery + 27, n;
    }, e.hashPersonalMessage = function(t) {
      var r = e.toBuffer('Ethereum Signed Message:\n' + t.length.toString());
      return e.keccak(p.concat([ r, t ]));
    }, e.ecrecover = function(t, r, n, i) {
      var o = p.concat([ e.setLength(n, 32), e.setLength(i, 32) ], 64);
      var a = r - 27;
      if (0 !== a && 1 !== a) throw new Error('Invalid signature v value');
      var s = h.recover(t, o, a);
      return h.publicKeyConvert(s, !1).slice(1);
    }, e.toRpcSig = function(t, r, n) {
      if (27 !== t && 28 !== t) throw new Error('Invalid recovery id');
      return e.bufferToHex(p.concat([ e.setLengthLeft(r, 32), e.setLengthLeft(n, 32), e.toBuffer(t - 27) ]));
    }, e.fromRpcSig = function(t) {
      if (65 !== (t = e.toBuffer(t)).length) throw new Error('Invalid signature length');
      var r = t[64];
      return r < 27 && (r += 27), {
        v: r,
        r: t.slice(0, 32),
        s: t.slice(32, 64)
      };
    }, e.privateToAddress = function(t) {
      return e.publicToAddress(m(t));
    }, e.isValidAddress = function(t) {
      return /^0x[0-9a-fA-F]{40}$/.test(t);
    }, e.isZeroAddress = function(t) {
      return e.zeroAddress() === e.addHexPrefix(t);
    }, e.toChecksumAddress = function(t) {
      t = e.stripHexPrefix(t).toLowerCase();
      var r = e.keccak(t).toString('hex');
      var n = '0x';
      for (var i = 0; i < t.length; i++) parseInt(r[i], 16) >= 8 ? n += t[i].toUpperCase() : n += t[i];
      return n;
    }, e.isValidChecksumAddress = function(t) {
      return e.isValidAddress(t) && e.toChecksumAddress(t) === t;
    }, e.generateAddress = function(t, r) {
      return t = e.toBuffer(t), r = (r = new f(r)).isZero() ? null : p.from(r.toArray()), e.rlphash([ t, r ]).slice(-20);
    }, e.isPrecompiled = function(t) {
      var r = e.unpad(t);
      return 1 === r.length && r[0] >= 1 && r[0] <= 8;
    }, e.addHexPrefix = function(t) {
      return 'string' != typeof t || e.isHexPrefixed(t) ? t : '0x' + t;
    }, e.isValidSignature = function(t, e, r, n) {
      var i = new f('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
      var o = new f('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
      return 32 === e.length && 32 === r.length && ((27 === t || 28 === t) && (e = new f(e), r = new f(r), !(e.isZero() || e.gt(o) || r.isZero() || r.gt(o)) && (!1 !== n || 1 !== new f(r).cmp(i))));
    }, e.baToJSON = function(t) {
      if (p.isBuffer(t)) return '0x' + t.toString('hex');
      if (t instanceof Array) {
        var r = [];
        for (var n = 0; n < t.length; n++) r.push(e.baToJSON(t[n]));
        return r;
      }
    }, e.defineProperties = function(t, r, i) {
      if (t.raw = [], t._fields = [], t.toJSON = function(r) {
        if (r) {
          var n = {};
          return t._fields.forEach((function(e) {
            n[e] = '0x' + t[e].toString('hex');
          })), n;
        }
        return e.baToJSON(this.raw);
      }, t.serialize = function() {
        return c.encode(t.raw);
      }, r.forEach((function(r, n) {
        function i() {
          return t.raw[n];
        }
        function o(i) {
          '00' !== (i = e.toBuffer(i)).toString('hex') || r.allowZero || (i = p.allocUnsafe(0)), r.allowLess && r.length ? (i = e.stripZeros(i), 
          l(r.length >= i.length, 'The field ' + r.name + ' must not have more ' + r.length + ' bytes')) : r.allowZero && 0 === i.length || !r.length || l(r.length === i.length, 'The field ' + r.name + ' must have byte length of ' + r.length), 
          t.raw[n] = i;
        }
        t._fields.push(r.name), Object.defineProperty(t, r.name, {
          enumerable: !0,
          configurable: !0,
          get: i,
          set: o
        }), r.default && (t[r.name] = r.default), r.alias && Object.defineProperty(t, r.alias, {
          enumerable: !1,
          configurable: !0,
          set: o,
          get: i
        });
      })), i) if ('string' == typeof i && (i = p.from(e.stripHexPrefix(i), 'hex')), p.isBuffer(i) && (i = c.decode(i)), Array.isArray(i)) {
        if (i.length > t._fields.length) throw new Error('wrong number of fields in data');
        i.forEach((function(r, n) {
          t[t._fields[n]] = e.toBuffer(r);
        }));
      } else {
        if ('object' !== (void 0 === i ? 'undefined' : n(i))) throw new Error('invalid data');
        var o = Object.keys(i);
        r.forEach((function(e) {
          -1 !== o.indexOf(e.name) && (t[e.name] = i[e.name]), -1 !== o.indexOf(e.alias) && (t[e.alias] = i[e.alias]);
        }));
      }
    };
  },
  35525: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(95053);
    var o = r(33780);
    var a = r(1029);
    var s = function(t) {
      return 32 === t.length && i.privateKeyVerify(Uint8Array.from(t));
    };
    t.exports = {
      privateKeyVerify: s,
      privateKeyExport: function(t, e) {
        if (32 !== t.length) throw new RangeError('private key length is invalid');
        var r = o.privateKeyExport(t, e);
        return a.privateKeyExport(t, r, e);
      },
      privateKeyImport: function(t) {
        if (null !== (t = a.privateKeyImport(t)) && 32 === t.length && s(t)) return t;
        throw new Error("couldn't import from DER format");
      },
      privateKeyNegate: function(t) {
        return n.from(i.privateKeyNegate(Uint8Array.from(t)));
      },
      privateKeyModInverse: function(t) {
        if (32 !== t.length) throw new Error('private key length is invalid');
        return n.from(o.privateKeyModInverse(Uint8Array.from(t)));
      },
      privateKeyTweakAdd: function(t, e) {
        return n.from(i.privateKeyTweakAdd(Uint8Array.from(t), e));
      },
      privateKeyTweakMul: function(t, e) {
        return n.from(i.privateKeyTweakMul(Uint8Array.from(t), Uint8Array.from(e)));
      },
      publicKeyCreate: function(t, e) {
        return n.from(i.publicKeyCreate(Uint8Array.from(t), e));
      },
      publicKeyConvert: function(t, e) {
        return n.from(i.publicKeyConvert(Uint8Array.from(t), e));
      },
      publicKeyVerify: function(t) {
        return (33 === t.length || 65 === t.length) && i.publicKeyVerify(Uint8Array.from(t));
      },
      publicKeyTweakAdd: function(t, e, r) {
        return n.from(i.publicKeyTweakAdd(Uint8Array.from(t), Uint8Array.from(e), r));
      },
      publicKeyTweakMul: function(t, e, r) {
        return n.from(i.publicKeyTweakMul(Uint8Array.from(t), Uint8Array.from(e), r));
      },
      publicKeyCombine: function(t, e) {
        var r = [];
        return t.forEach((function(t) {
          r.push(Uint8Array.from(t));
        })), n.from(i.publicKeyCombine(r, e));
      },
      signatureNormalize: function(t) {
        return n.from(i.signatureNormalize(Uint8Array.from(t)));
      },
      signatureExport: function(t) {
        return n.from(i.signatureExport(Uint8Array.from(t)));
      },
      signatureImport: function(t) {
        return n.from(i.signatureImport(Uint8Array.from(t)));
      },
      signatureImportLax: function(t) {
        if (0 === t.length) throw new RangeError('signature length is invalid');
        var e = a.signatureImportLax(t);
        if (null === e) throw new Error("couldn't parse DER signature");
        return o.signatureImport(e);
      },
      sign: function(t, e, r) {
        if (null === r) throw new TypeError('options should be an Object');
        var o = void 0;
        if (r) {
          if (o = {}, null === r.data) throw new TypeError('options.data should be a Buffer');
          if (r.data) {
            if (32 !== r.data.length) throw new RangeError('options.data length is invalid');
            o.data = new Uint8Array(r.data);
          }
          if (null === r.noncefn) throw new TypeError('options.noncefn should be a Function');
          r.noncefn && (o.noncefn = function(t, e, i, o, a) {
            var s = null != i ? n.from(i) : null;
            var u = null != o ? n.from(o) : null;
            var h = n.from('');
            return r.noncefn && (h = r.noncefn(n.from(t), n.from(e), s, u, a)), Uint8Array.from(h);
          });
        }
        var a = i.ecdsaSign(Uint8Array.from(t), Uint8Array.from(e), o);
        return {
          signature: n.from(a.signature),
          recovery: a.recid
        };
      },
      verify: function(t, e, r) {
        return i.ecdsaVerify(Uint8Array.from(e), Uint8Array.from(t), r);
      },
      recover: function(t, e, r, o) {
        return n.from(i.ecdsaRecover(Uint8Array.from(e), r, Uint8Array.from(t), o));
      },
      ecdh: function(t, e) {
        return n.from(i.ecdh(Uint8Array.from(t), Uint8Array.from(e), {}));
      },
      ecdhUnsafe: function(t, e, r) {
        if (33 !== t.length && 65 !== t.length) throw new RangeError('public key length is invalid');
        if (32 !== e.length) throw new RangeError('private key length is invalid');
        return n.from(o.ecdhUnsafe(Uint8Array.from(t), Uint8Array.from(e), r));
      }
    };
  },
  1029: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = n.from([ 48, 129, 211, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 133, 48, 129, 130, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 33, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 36, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    var o = n.from([ 48, 130, 1, 19, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 165, 48, 129, 162, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 65, 4, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 72, 58, 218, 119, 38, 163, 196, 101, 93, 164, 251, 252, 14, 17, 8, 168, 253, 23, 180, 72, 166, 133, 84, 25, 156, 71, 208, 143, 251, 16, 212, 184, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 68, 3, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    e.privateKeyExport = function(t, e, r) {
      var a = n.from(r ? i : o);
      return t.copy(a, r ? 8 : 9), e.copy(a, r ? 181 : 214), a;
    }, e.privateKeyImport = function(t) {
      var e = t.length;
      var r = 0;
      if (e < r + 1 || 48 !== t[r]) return null;
      if (e < (r += 1) + 1 || !(128 & t[r])) return null;
      var n = 127 & t[r];
      if (n < 1 || n > 2) return null;
      if (e < (r += 1) + n) return null;
      var i = t[r + n - 1] | (n > 1 ? t[r + n - 2] << 8 : 0);
      return e < (r += n) + i || e < r + 3 || 2 !== t[r] || 1 !== t[r + 1] || 1 !== t[r + 2] || e < (r += 3) + 2 || 4 !== t[r] || t[r + 1] > 32 || e < r + 2 + t[r + 1] ? null : t.slice(r + 2, r + 2 + t[r + 1]);
    }, e.signatureImportLax = function(t) {
      var e = n.alloc(32, 0);
      var r = n.alloc(32, 0);
      var i = t.length;
      var o = 0;
      if (48 !== t[o++]) return null;
      var a = t[o++];
      if (128 & a && (o += a - 128) > i) return null;
      if (2 !== t[o++]) return null;
      var s = t[o++];
      if (128 & s) {
        if (o + (a = s - 128) > i) return null;
        for (;a > 0 && 0 === t[o]; o += 1, a -= 1) ;
        for (s = 0; a > 0; o += 1, a -= 1) s = (s << 8) + t[o];
      }
      if (s > i - o) return null;
      var u = o;
      if (o += s, 2 !== t[o++]) return null;
      var h = t[o++];
      if (128 & h) {
        if (o + (a = h - 128) > i) return null;
        for (;a > 0 && 0 === t[o]; o += 1, a -= 1) ;
        for (h = 0; a > 0; o += 1, a -= 1) h = (h << 8) + t[o];
      }
      if (h > i - o) return null;
      var l = o;
      for (o += h; s > 0 && 0 === t[u]; s -= 1, u += 1) ;
      if (s > 32) return null;
      var c = t.slice(u, u + s);
      for (c.copy(e, 32 - c.length); h > 0 && 0 === t[l]; h -= 1, l += 1) ;
      if (h > 32) return null;
      var f = t.slice(l, l + h);
      return f.copy(r, 32 - f.length), {
        r: e,
        s: r
      };
    };
  },
  33780: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(89817);
    var o = new (0, r(86266).ec)('secp256k1');
    var a = o.curve;
    e.privateKeyExport = function(t, e) {
      var r = new i(t);
      if (r.ucmp(a.n) >= 0) throw new Error('couldn\'t export to DER format');
      var n = o.g.mul(r);
      return s(n.getX(), n.getY(), e);
    }, e.privateKeyModInverse = function(t) {
      var e = new i(t);
      if (e.ucmp(a.n) >= 0 || e.isZero()) throw new Error('private key range is invalid');
      return e.invm(a.n).toArrayLike(n, 'be', 32);
    }, e.signatureImport = function(t) {
      var e = new i(t.r);
      e.ucmp(a.n) >= 0 && (e = new i(0));
      var r = new i(t.s);
      return r.ucmp(a.n) >= 0 && (r = new i(0)), n.concat([ e.toArrayLike(n, 'be', 32), r.toArrayLike(n, 'be', 32) ]);
    }, e.ecdhUnsafe = function(t, e, r) {
      var n = o.keyFromPublic(t);
      var u = new i(e);
      if (u.ucmp(a.n) >= 0 || u.isZero()) throw new Error('scalar was invalid (zero or overflow)');
      var h = n.pub.mul(u);
      return s(h.getX(), h.getY(), r);
    };
    var s = function(t, e, r) {
      var i = void 0;
      return r ? ((i = n.alloc(33))[0] = e.isOdd() ? 3 : 2, t.toArrayLike(n, 'be', 32).copy(i, 1)) : ((i = n.alloc(65))[0] = 4, 
      t.toArrayLike(n, 'be', 32).copy(i, 1), e.toArrayLike(n, 'be', 32).copy(i, 33)), i;
    };
  },
  68142: (t, e, r) => {
    t.exports = r(75437);
  },
  75437: (t, e, r) => {
    var n = r(48764).Buffer;
    const i = r(86589);
    const o = r(91609);
    var a = function() {};
    function s(t) {
      return t.startsWith('int[') ? 'int256' + t.slice(3) : 'int' === t ? 'int256' : t.startsWith('uint[') ? 'uint256' + t.slice(4) : 'uint' === t ? 'uint256' : t.startsWith('fixed[') ? 'fixed128x128' + t.slice(5) : 'fixed' === t ? 'fixed128x128' : t.startsWith('ufixed[') ? 'ufixed128x128' + t.slice(6) : 'ufixed' === t ? 'ufixed128x128' : t;
    }
    function u(t) {
      return parseInt(/^\D+(\d+)$/.exec(t)[1], 10);
    }
    function h(t) {
      var e = /^\D+(\d+)x(\d+)$/.exec(t);
      return [ parseInt(e[1], 10), parseInt(e[2], 10) ];
    }
    function l(t) {
      var e = t.match(/(.*)\[(.*?)\]$/);
      return e ? '' === e[2] ? 'dynamic' : parseInt(e[2], 10) : null;
    }
    function c(t) {
      var e = typeof t;
      if ('string' === e) return i.isHexPrefixed(t) ? new o(i.stripHexPrefix(t), 16) : new o(t, 10);
      if ('number' === e) return new o(t);
      if (t.toArray) return t;
      throw new Error('Argument is not a number');
    }
    function f(t) {
      var e = /^(\w+)\((.*)\)$/.exec(t);
      if (3 !== e.length) throw new Error('Invalid method signature');
      var r = /^(.+)\):\((.+)$/.exec(e[2]);
      if (null !== r && 3 === r.length) return {
        method: e[1],
        args: r[1].split(','),
        retargs: r[2].split(',')
      };
      var n = e[2].split(',');
      return 1 === n.length && '' === n[0] && (n = []), {
        method: e[1],
        args: n
      };
    }
    function d(t, e) {
      var r, a, s, f;
      if ('address' === t) return d('uint160', c(e));
      if ('bool' === t) return d('uint8', e ? 1 : 0);
      if ('string' === t) return d('bytes', n.from(e, 'utf8'));
      if (g(t)) {
        if (void 0 === e.length) throw new Error('Not an array?');
        if ('dynamic' !== (r = l(t)) && 0 !== r && e.length > r) throw new Error('Elements exceed array size: ' + r);
        for (f in s = [], t = t.slice(0, t.lastIndexOf('[')), 'string' == typeof e && (e = JSON.parse(e)), e) s.push(d(t, e[f]));
        if ('dynamic' === r) {
          var p = d('uint256', e.length);
          s.unshift(p);
        }
        return n.concat(s);
      }
      if ('bytes' === t) return e = n.from(e), s = n.concat([ d('uint256', e.length), e ]), e.length % 32 != 0 && (s = n.concat([ s, i.zeros(32 - e.length % 32) ])), 
      s;
      if (t.startsWith('bytes')) {
        if ((r = u(t)) < 1 || r > 32) throw new Error('Invalid bytes<N> width: ' + r);
        return i.setLengthRight(e, 32);
      }
      if (t.startsWith('uint')) {
        if ((r = u(t)) % 8 || r < 8 || r > 256) throw new Error('Invalid uint<N> width: ' + r);
        if ((a = c(e)).bitLength() > r) throw new Error('Supplied uint exceeds width: ' + r + ' vs ' + a.bitLength());
        if (a < 0) throw new Error('Supplied uint is negative');
        return a.toArrayLike(n, 'be', 32);
      }
      if (t.startsWith('int')) {
        if ((r = u(t)) % 8 || r < 8 || r > 256) throw new Error('Invalid int<N> width: ' + r);
        if ((a = c(e)).bitLength() > r) throw new Error('Supplied int exceeds width: ' + r + ' vs ' + a.bitLength());
        return a.toTwos(256).toArrayLike(n, 'be', 32);
      }
      if (t.startsWith('ufixed')) {
        if (r = h(t), (a = c(e)) < 0) throw new Error('Supplied ufixed is negative');
        return d('uint256', a.mul(new o(2).pow(new o(r[1]))));
      }
      if (t.startsWith('fixed')) return r = h(t), d('int256', c(e).mul(new o(2).pow(new o(r[1]))));
      throw new Error('Unsupported or invalid type: ' + t);
    }
    function p(t, e, r) {
      var i, a, s, u;
      if ('string' == typeof t && (t = m(t)), 'address' === t.name) return p(t.rawType, e, r).toArrayLike(n, 'be', 20).toString('hex');
      if ('bool' === t.name) return p(t.rawType, e, r).toString() === new o(1).toString();
      if ('string' === t.name) {
        var h = p(t.rawType, e, r);
        return n.from(h, 'utf8').toString();
      }
      if (t.isArray) {
        for (s = [], i = t.size, 'dynamic' === t.size && (r = p('uint256', e, r).toNumber(), i = p('uint256', e, r).toNumber(), 
        r += 32), u = 0; u < i; u++) {
          var l = p(t.subArray, e, r);
          s.push(l), r += t.subArray.memoryUsage;
        }
        return s;
      }
      if ('bytes' === t.name) return r = p('uint256', e, r).toNumber(), i = p('uint256', e, r).toNumber(), e.slice(r + 32, r + 32 + i);
      if (t.name.startsWith('bytes')) return e.slice(r, r + t.size);
      if (t.name.startsWith('uint')) {
        if ((a = new o(e.slice(r, r + 32), 16, 'be')).bitLength() > t.size) throw new Error('Decoded int exceeds width: ' + t.size + ' vs ' + a.bitLength());
        return a;
      }
      if (t.name.startsWith('int')) {
        if ((a = new o(e.slice(r, r + 32), 16, 'be').fromTwos(256)).bitLength() > t.size) throw new Error('Decoded uint exceeds width: ' + t.size + ' vs ' + a.bitLength());
        return a;
      }
      if (t.name.startsWith('ufixed')) {
        if (i = new o(2).pow(new o(t.size[1])), !(a = p('uint256', e, r)).mod(i).isZero()) throw new Error('Decimals not supported yet');
        return a.div(i);
      }
      if (t.name.startsWith('fixed')) {
        if (i = new o(2).pow(new o(t.size[1])), !(a = p('int256', e, r)).mod(i).isZero()) throw new Error('Decimals not supported yet');
        return a.div(i);
      }
      throw new Error('Unsupported or invalid type: ' + t.name);
    }
    function m(t) {
      var e;
      var r;
      if (g(t)) {
        e = l(t);
        var n = t.slice(0, t.lastIndexOf('['));
        return n = m(n), r = {
          isArray: !0,
          name: t,
          size: e,
          memoryUsage: 'dynamic' === e ? 32 : n.memoryUsage * e,
          subArray: n
        };
      }
      var i;
      switch (t) {
       case 'address':
        i = 'uint160';
        break;

       case 'bool':
        i = 'uint8';
        break;

       case 'string':
        i = 'bytes';
      }
      if (r = {
        rawType: i,
        name: t,
        memoryUsage: 32
      }, t.startsWith('bytes') && 'bytes' !== t || t.startsWith('uint') || t.startsWith('int') ? r.size = u(t) : (t.startsWith('ufixed') || t.startsWith('fixed')) && (r.size = h(t)), 
      t.startsWith('bytes') && 'bytes' !== t && (r.size < 1 || r.size > 32)) throw new Error('Invalid bytes<N> width: ' + r.size);
      if ((t.startsWith('uint') || t.startsWith('int')) && (r.size % 8 || r.size < 8 || r.size > 256)) throw new Error('Invalid int/uint<N> width: ' + r.size);
      return r;
    }
    function v(t) {
      return 'string' === t || 'bytes' === t || 'dynamic' === l(t);
    }
    function g(t) {
      return t.lastIndexOf(']') === t.length - 1;
    }
    function y(t, e) {
      return t.startsWith('address') || t.startsWith('bytes') ? '0x' + e.toString('hex') : e.toString();
    }
    function w(t) {
      return t >= '0' && t <= '9';
    }
    a.eventID = function(t, e) {
      var r = t + '(' + e.map(s).join(',') + ')';
      return i.keccak256(n.from(r));
    }, a.methodID = function(t, e) {
      return a.eventID(t, e).slice(0, 4);
    }, a.rawEncode = function(t, e) {
      var r = [];
      var i = [];
      var o = 0;
      t.forEach((function(t) {
        if (g(t)) {
          var e = l(t);
          o += 'dynamic' !== e ? 32 * e : 32;
        } else o += 32;
      }));
      for (var a = 0; a < t.length; a++) {
        var u = s(t[a]);
        var h = d(u, e[a]);
        v(u) ? (r.push(d('uint256', o)), i.push(h), o += h.length) : r.push(h);
      }
      return n.concat(r.concat(i));
    }, a.rawDecode = function(t, e) {
      var r = [];
      e = n.from(e);
      var i = 0;
      for (var o = 0; o < t.length; o++) {
        var a = m(s(t[o]));
        var u = p(a, e, i);
        i += a.memoryUsage, r.push(u);
      }
      return r;
    }, a.simpleEncode = function(t) {
      var e = Array.prototype.slice.call(arguments).slice(1);
      var r = f(t);
      if (e.length !== r.args.length) throw new Error('Argument count mismatch');
      return n.concat([ a.methodID(r.method, r.args), a.rawEncode(r.args, e) ]);
    }, a.simpleDecode = function(t, e) {
      var r = f(t);
      if (!r.retargs) throw new Error('No return values in method');
      return a.rawDecode(r.retargs, e);
    }, a.stringify = function(t, e) {
      var r = [];
      for (var n in t) {
        var i = t[n];
        var o = e[n];
        o = /^[^\[]+\[.*\]$/.test(i) ? o.map((function(t) {
          return y(i, t);
        })).join(', ') : y(i, o), r.push(o);
      }
      return r;
    }, a.solidityHexValue = function(t, e, r) {
      var o, s;
      if (g(t)) {
        var h = t.replace(/\[.*?\]/, '');
        if (!g(h)) {
          var f = l(t);
          if ('dynamic' !== f && 0 !== f && e.length > f) throw new Error('Elements exceed array size: ' + f);
        }
        var d = e.map((function(t) {
          return a.solidityHexValue(h, t, 256);
        }));
        return n.concat(d);
      }
      if ('bytes' === t) return e;
      if ('string' === t) return n.from(e, 'utf8');
      if ('bool' === t) {
        r = r || 8;
        var p = Array(r / 4).join('0');
        return n.from(e ? p + '1' : p + '0', 'hex');
      }
      if ('address' === t) {
        var m = 20;
        return r && (m = r / 8), i.setLengthLeft(e, m);
      }
      if (t.startsWith('bytes')) {
        if ((o = u(t)) < 1 || o > 32) throw new Error('Invalid bytes<N> width: ' + o);
        return i.setLengthRight(e, o);
      }
      if (t.startsWith('uint')) {
        if ((o = u(t)) % 8 || o < 8 || o > 256) throw new Error('Invalid uint<N> width: ' + o);
        if ((s = c(e)).bitLength() > o) throw new Error('Supplied uint exceeds width: ' + o + ' vs ' + s.bitLength());
        return r = r || o, s.toArrayLike(n, 'be', r / 8);
      }
      if (t.startsWith('int')) {
        if ((o = u(t)) % 8 || o < 8 || o > 256) throw new Error('Invalid int<N> width: ' + o);
        if ((s = c(e)).bitLength() > o) throw new Error('Supplied int exceeds width: ' + o + ' vs ' + s.bitLength());
        return r = r || o, s.toTwos(o).toArrayLike(n, 'be', r / 8);
      }
      throw new Error('Unsupported or invalid type: ' + t);
    }, a.solidityPack = function(t, e) {
      if (t.length !== e.length) throw new Error('Number of types are not matching the values');
      var r = [];
      for (var i = 0; i < t.length; i++) {
        var o = s(t[i]);
        var u = e[i];
        r.push(a.solidityHexValue(o, u, null));
      }
      return n.concat(r);
    }, a.soliditySHA3 = function(t, e) {
      return i.keccak256(a.solidityPack(t, e));
    }, a.soliditySHA256 = function(t, e) {
      return i.sha256(a.solidityPack(t, e));
    }, a.solidityRIPEMD160 = function(t, e) {
      return i.ripemd160(a.solidityPack(t, e), !0);
    }, a.fromSerpent = function(t) {
      var e = [];
      for (var r = 0; r < t.length; r++) {
        var n = t[r];
        if ('s' === n) e.push('bytes'); else if ('b' === n) {
          var i = 'bytes';
          var o = r + 1;
          for (;o < t.length && w(t[o]); ) i += t[o] - '0', o++;
          r = o - 1, e.push(i);
        } else if ('i' === n) e.push('int256'); else {
          if ('a' !== n) throw new Error('Unsupported or invalid type: ' + n);
          e.push('int256[]');
        }
      }
      return e;
    }, a.toSerpent = function(t) {
      var e = [];
      for (var r = 0; r < t.length; r++) {
        var n = t[r];
        if ('bytes' === n) e.push('s'); else if (n.startsWith('bytes')) e.push('b' + u(n)); else if ('int256' === n) e.push('i'); else {
          if ('int256[]' !== n) throw new Error('Unsupported or invalid type: ' + n);
          e.push('a');
        }
      }
      return e.join('');
    }, t.exports = a;
  },
  91609: function(t, e, r) {
    !function(t, e) {
      'use strict';
      function n(t, e) {
        if (!t) throw new Error(e || 'Assertion failed');
      }
      function i(t, e) {
        t.super_ = e;
        var r = function() {};
        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
      }
      function o(t, e, r) {
        if (o.isBN(t)) return t;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ('le' !== e && 'be' !== e || (r = e, 
        e = 10), this._init(t || 0, e || 10, r || 'be'));
      }
      var a;
      'object' == typeof t ? t.exports = o : e.BN = o, o.BN = o, o.wordSize = 26;
      try {
        a = 'undefined' != typeof window && void 0 !== window.Buffer ? window.Buffer : r(40127).Buffer;
      } catch (A) {}
      function s(t, e) {
        var r = t.charCodeAt(e);
        return r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : r - 48 & 15;
      }
      function u(t, e, r) {
        var n = s(t, r);
        return r - 1 >= e && (n |= s(t, r - 1) << 4), n;
      }
      function h(t, e, r, n) {
        var i = 0;
        var o = Math.min(t.length, r);
        for (var a = e; a < o; a++) {
          var s = t.charCodeAt(a) - 48;
          i *= n, i += s >= 49 ? s - 49 + 10 : s >= 17 ? s - 17 + 10 : s;
        }
        return i;
      }
      o.isBN = function(t) {
        return t instanceof o || null !== t && 'object' == typeof t && t.constructor.wordSize === o.wordSize && Array.isArray(t.words);
      }, o.max = function(t, e) {
        return t.cmp(e) > 0 ? t : e;
      }, o.min = function(t, e) {
        return t.cmp(e) < 0 ? t : e;
      }, o.prototype._init = function(t, e, r) {
        if ('number' == typeof t) return this._initNumber(t, e, r);
        if ('object' == typeof t) return this._initArray(t, e, r);
        'hex' === e && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
        var i = 0;
        '-' === (t = t.toString().replace(/\s+/g, ''))[0] && (i++, this.negative = 1), i < t.length && (16 === e ? this._parseHex(t, i, r) : (this._parseBase(t, e, i), 
        'le' === r && this._initArray(this.toArray(), e, r)));
      }, o.prototype._initNumber = function(t, e, r) {
        t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [ 67108863 & t ], this.length = 1) : t < 4503599627370496 ? (this.words = [ 67108863 & t, t / 67108864 & 67108863 ], 
        this.length = 2) : (n(t < 9007199254740992), this.words = [ 67108863 & t, t / 67108864 & 67108863, 1 ], this.length = 3), 
        'le' === r && this._initArray(this.toArray(), e, r);
      }, o.prototype._initArray = function(t, e, r) {
        if (n('number' == typeof t.length), t.length <= 0) return this.words = [ 0 ], this.length = 1, this;
        this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) this.words[i] = 0;
        var o, a;
        var s = 0;
        if ('be' === r) for (i = t.length - 1, o = 0; i >= 0; i -= 3) a = t[i] | t[i - 1] << 8 | t[i - 2] << 16, this.words[o] |= a << s & 67108863, 
        this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++); else if ('le' === r) for (i = 0, o = 0; i < t.length; i += 3) a = t[i] | t[i + 1] << 8 | t[i + 2] << 16, 
        this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
        return this.strip();
      }, o.prototype._parseHex = function(t, e, r) {
        this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
        for (var n = 0; n < this.length; n++) this.words[n] = 0;
        var i = 0;
        var o = 0;
        var a;
        if ('be' === r) for (n = t.length - 1; n >= e; n -= 2) a = u(t, e, n) << i, this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, 
        o += 1, this.words[o] |= a >>> 26) : i += 8; else for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) a = u(t, e, n) << i, 
        this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, o += 1, this.words[o] |= a >>> 26) : i += 8;
        this.strip();
      }, o.prototype._parseBase = function(t, e, r) {
        this.words = [ 0 ], this.length = 1;
        for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
        n--, i = i / e | 0;
        var o = t.length - r;
        var a = o % n;
        var s = Math.min(o, o - a) + r;
        var u = 0;
        for (var l = r; l < s; l += n) u = h(t, l, l + n, e), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        if (0 !== a) {
          var c = 1;
          for (u = h(t, l, t.length, e), l = 0; l < a; l++) c *= e;
          this.imuln(c), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        }
        this.strip();
      }, o.prototype.copy = function(t) {
        t.words = new Array(this.length);
        for (var e = 0; e < this.length; e++) t.words[e] = this.words[e];
        t.length = this.length, t.negative = this.negative, t.red = this.red;
      }, o.prototype.clone = function() {
        var t = new o(null);
        return this.copy(t), t;
      }, o.prototype._expand = function(t) {
        for (;this.length < t; ) this.words[this.length++] = 0;
        return this;
      }, o.prototype.strip = function() {
        for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
        return this._normSign();
      }, o.prototype._normSign = function() {
        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
      }, o.prototype.inspect = function() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
      var l = [ '', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000' ];
      var c = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
      var f = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
      function d(t, e, r) {
        r.negative = e.negative ^ t.negative;
        var n = t.length + e.length | 0;
        r.length = n, n = n - 1 | 0;
        var i = 0 | t.words[0];
        var o = 0 | e.words[0];
        var a = i * o;
        var s = 67108863 & a;
        var u = a / 67108864 | 0;
        r.words[0] = s;
        for (var h = 1; h < n; h++) {
          var l = u >>> 26;
          var c = 67108863 & u;
          var f = Math.min(h, e.length - 1);
          for (var d = Math.max(0, h - t.length + 1); d <= f; d++) {
            var p = h - d | 0;
            l += (a = (i = 0 | t.words[p]) * (o = 0 | e.words[d]) + c) / 67108864 | 0, c = 67108863 & a;
          }
          r.words[h] = 0 | c, u = 0 | l;
        }
        return 0 !== u ? r.words[h] = 0 | u : r.length--, r.strip();
      }
      o.prototype.toString = function(t, e) {
        var r;
        if (e = 0 | e || 1, 16 === (t = t || 10) || 'hex' === t) {
          r = '';
          var i = 0;
          var o = 0;
          for (var a = 0; a < this.length; a++) {
            var s = this.words[a];
            var u = (16777215 & (s << i | o)).toString(16);
            r = 0 !== (o = s >>> 24 - i & 16777215) || a !== this.length - 1 ? l[6 - u.length] + u + r : u + r, (i += 2) >= 26 && (i -= 26, 
            a--);
          }
          for (0 !== o && (r = o.toString(16) + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        if (t === (0 | t) && t >= 2 && t <= 36) {
          var h = c[t];
          var d = f[t];
          r = '';
          var p = this.clone();
          for (p.negative = 0; !p.isZero(); ) {
            var m = p.modn(d).toString(t);
            r = (p = p.idivn(d)).isZero() ? m + r : l[h - m.length] + m + r;
          }
          for (this.isZero() && (r = '0' + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        n(!1, 'Base should be between 2 and 36');
      }, o.prototype.toNumber = function() {
        var t = this.words[0];
        return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, 'Number can only safely store up to 53 bits'), 
        0 !== this.negative ? -t : t;
      }, o.prototype.toJSON = function() {
        return this.toString(16);
      }, o.prototype.toBuffer = function(t, e) {
        return n(void 0 !== a), this.toArrayLike(a, t, e);
      }, o.prototype.toArray = function(t, e) {
        return this.toArrayLike(Array, t, e);
      }, o.prototype.toArrayLike = function(t, e, r) {
        var i = this.byteLength();
        var o = r || Math.max(1, i);
        n(i <= o, 'byte array longer than desired length'), n(o > 0, 'Requested array length <= 0'), this.strip();
        var a = 'le' === e;
        var s = new t(o);
        var u, h;
        var l = this.clone();
        if (a) {
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[h] = u;
          for (;h < o; h++) s[h] = 0;
        } else {
          for (h = 0; h < o - i; h++) s[h] = 0;
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[o - h - 1] = u;
        }
        return s;
      }, Math.clz32 ? o.prototype._countBits = function(t) {
        return 32 - Math.clz32(t);
      } : o.prototype._countBits = function(t) {
        var e = t;
        var r = 0;
        return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, e >>>= 4), e >= 2 && (r += 2, 
        e >>>= 2), r + e;
      }, o.prototype._zeroBits = function(t) {
        if (0 === t) return 26;
        var e = t;
        var r = 0;
        return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 0 == (15 & e) && (r += 4, e >>>= 4), 
        0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, r;
      }, o.prototype.bitLength = function() {
        var t = this.words[this.length - 1];
        var e = this._countBits(t);
        return 26 * (this.length - 1) + e;
      }, o.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        var t = 0;
        for (var e = 0; e < this.length; e++) {
          var r = this._zeroBits(this.words[e]);
          if (t += r, 26 !== r) break;
        }
        return t;
      }, o.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, o.prototype.toTwos = function(t) {
        return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
      }, o.prototype.fromTwos = function(t) {
        return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
      }, o.prototype.isNeg = function() {
        return 0 !== this.negative;
      }, o.prototype.neg = function() {
        return this.clone().ineg();
      }, o.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, o.prototype.iuor = function(t) {
        for (;this.length < t.length; ) this.words[this.length++] = 0;
        for (var e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
        return this.strip();
      }, o.prototype.ior = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuor(t);
      }, o.prototype.or = function(t) {
        return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
      }, o.prototype.uor = function(t) {
        return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
      }, o.prototype.iuand = function(t) {
        var e;
        e = this.length > t.length ? t : this;
        for (var r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
        return this.length = e.length, this.strip();
      }, o.prototype.iand = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuand(t);
      }, o.prototype.and = function(t) {
        return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
      }, o.prototype.uand = function(t) {
        return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
      }, o.prototype.iuxor = function(t) {
        var e;
        var r;
        this.length > t.length ? (e = this, r = t) : (e = t, r = this);
        for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
        if (this !== e) for (;n < e.length; n++) this.words[n] = e.words[n];
        return this.length = e.length, this.strip();
      }, o.prototype.ixor = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuxor(t);
      }, o.prototype.xor = function(t) {
        return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
      }, o.prototype.uxor = function(t) {
        return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
      }, o.prototype.inotn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = 0 | Math.ceil(t / 26);
        var r = t % 26;
        this._expand(e), r > 0 && e--;
        for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
        return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this.strip();
      }, o.prototype.notn = function(t) {
        return this.clone().inotn(t);
      }, o.prototype.setn = function(t, e) {
        n('number' == typeof t && t >= 0);
        var r = t / 26 | 0;
        var i = t % 26;
        return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this.strip();
      }, o.prototype.iadd = function(t) {
        var e;
        if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), this.negative ^= 1, this._normSign();
        if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), t.negative = 1, e._normSign();
        var r, n;
        this.length > t.length ? (r = this, n = t) : (r = t, n = this);
        var i = 0;
        for (var o = 0; o < n.length; o++) e = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        for (;0 !== i && o < r.length; o++) e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
        return this;
      }, o.prototype.add = function(t) {
        var e;
        return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, 
        e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
      }, o.prototype.isub = function(t) {
        if (0 !== t.negative) {
          t.negative = 0;
          var e = this.iadd(t);
          return t.negative = 1, e._normSign();
        }
        if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, this._normSign();
        var r = this.cmp(t);
        if (0 === r) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var n, i;
        r > 0 ? (n = this, i = t) : (n = t, i = this);
        var o = 0;
        for (var a = 0; a < i.length; a++) o = (e = (0 | n.words[a]) - (0 | i.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        for (;0 !== o && a < n.length; a++) o = (e = (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        if (0 === o && a < n.length && n !== this) for (;a < n.length; a++) this.words[a] = n.words[a];
        return this.length = Math.max(this.length, a), n !== this && (this.negative = 1), this.strip();
      }, o.prototype.sub = function(t) {
        return this.clone().isub(t);
      };
      var p = function(t, e, r) {
        var n = t.words;
        var i = e.words;
        var o = r.words;
        var a = 0;
        var s;
        var u;
        var h;
        var l = 0 | n[0];
        var c = 8191 & l;
        var f = l >>> 13;
        var d = 0 | n[1];
        var p = 8191 & d;
        var m = d >>> 13;
        var v = 0 | n[2];
        var g = 8191 & v;
        var y = v >>> 13;
        var w = 0 | n[3];
        var _ = 8191 & w;
        var M = w >>> 13;
        var b = 0 | n[4];
        var k = 8191 & b;
        var x = b >>> 13;
        var A = 0 | n[5];
        var E = 8191 & A;
        var S = A >>> 13;
        var R = 0 | n[6];
        var C = 8191 & R;
        var T = R >>> 13;
        var B = 0 | n[7];
        var L = 8191 & B;
        var P = B >>> 13;
        var I = 0 | n[8];
        var O = 8191 & I;
        var N = I >>> 13;
        var U = 0 | n[9];
        var q = 8191 & U;
        var j = U >>> 13;
        var K = 0 | i[0];
        var H = 8191 & K;
        var F = K >>> 13;
        var z = 0 | i[1];
        var D = 8191 & z;
        var Z = z >>> 13;
        var W = 0 | i[2];
        var V = 8191 & W;
        var $ = W >>> 13;
        var G = 0 | i[3];
        var Y = 8191 & G;
        var J = G >>> 13;
        var Q = 0 | i[4];
        var X = 8191 & Q;
        var tt = Q >>> 13;
        var et = 0 | i[5];
        var rt = 8191 & et;
        var nt = et >>> 13;
        var it = 0 | i[6];
        var ot = 8191 & it;
        var at = it >>> 13;
        var st = 0 | i[7];
        var ut = 8191 & st;
        var ht = st >>> 13;
        var lt = 0 | i[8];
        var ct = 8191 & lt;
        var ft = lt >>> 13;
        var dt = 0 | i[9];
        var pt = 8191 & dt;
        var mt = dt >>> 13;
        r.negative = t.negative ^ e.negative, r.length = 19;
        var vt = (a + (s = Math.imul(c, H)) | 0) + ((8191 & (u = (u = Math.imul(c, F)) + Math.imul(f, H) | 0)) << 13) | 0;
        a = ((h = Math.imul(f, F)) + (u >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, s = Math.imul(p, H), u = (u = Math.imul(p, F)) + Math.imul(m, H) | 0, 
        h = Math.imul(m, F);
        var gt = (a + (s = s + Math.imul(c, D) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, Z) | 0) + Math.imul(f, D) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, Z) | 0) + (u >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, s = Math.imul(g, H), u = (u = Math.imul(g, F)) + Math.imul(y, H) | 0, 
        h = Math.imul(y, F), s = s + Math.imul(p, D) | 0, u = (u = u + Math.imul(p, Z) | 0) + Math.imul(m, D) | 0, h = h + Math.imul(m, Z) | 0;
        var yt = (a + (s = s + Math.imul(c, V) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, $) | 0) + Math.imul(f, V) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, $) | 0) + (u >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, s = Math.imul(_, H), u = (u = Math.imul(_, F)) + Math.imul(M, H) | 0, 
        h = Math.imul(M, F), s = s + Math.imul(g, D) | 0, u = (u = u + Math.imul(g, Z) | 0) + Math.imul(y, D) | 0, h = h + Math.imul(y, Z) | 0, 
        s = s + Math.imul(p, V) | 0, u = (u = u + Math.imul(p, $) | 0) + Math.imul(m, V) | 0, h = h + Math.imul(m, $) | 0;
        var wt = (a + (s = s + Math.imul(c, Y) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, J) | 0) + Math.imul(f, Y) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, J) | 0) + (u >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, s = Math.imul(k, H), u = (u = Math.imul(k, F)) + Math.imul(x, H) | 0, 
        h = Math.imul(x, F), s = s + Math.imul(_, D) | 0, u = (u = u + Math.imul(_, Z) | 0) + Math.imul(M, D) | 0, h = h + Math.imul(M, Z) | 0, 
        s = s + Math.imul(g, V) | 0, u = (u = u + Math.imul(g, $) | 0) + Math.imul(y, V) | 0, h = h + Math.imul(y, $) | 0, s = s + Math.imul(p, Y) | 0, 
        u = (u = u + Math.imul(p, J) | 0) + Math.imul(m, Y) | 0, h = h + Math.imul(m, J) | 0;
        var _t = (a + (s = s + Math.imul(c, X) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, tt) | 0) + Math.imul(f, X) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, tt) | 0) + (u >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, s = Math.imul(E, H), u = (u = Math.imul(E, F)) + Math.imul(S, H) | 0, 
        h = Math.imul(S, F), s = s + Math.imul(k, D) | 0, u = (u = u + Math.imul(k, Z) | 0) + Math.imul(x, D) | 0, h = h + Math.imul(x, Z) | 0, 
        s = s + Math.imul(_, V) | 0, u = (u = u + Math.imul(_, $) | 0) + Math.imul(M, V) | 0, h = h + Math.imul(M, $) | 0, s = s + Math.imul(g, Y) | 0, 
        u = (u = u + Math.imul(g, J) | 0) + Math.imul(y, Y) | 0, h = h + Math.imul(y, J) | 0, s = s + Math.imul(p, X) | 0, u = (u = u + Math.imul(p, tt) | 0) + Math.imul(m, X) | 0, 
        h = h + Math.imul(m, tt) | 0;
        var Mt = (a + (s = s + Math.imul(c, rt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, nt) | 0) + Math.imul(f, rt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, nt) | 0) + (u >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, s = Math.imul(C, H), u = (u = Math.imul(C, F)) + Math.imul(T, H) | 0, 
        h = Math.imul(T, F), s = s + Math.imul(E, D) | 0, u = (u = u + Math.imul(E, Z) | 0) + Math.imul(S, D) | 0, h = h + Math.imul(S, Z) | 0, 
        s = s + Math.imul(k, V) | 0, u = (u = u + Math.imul(k, $) | 0) + Math.imul(x, V) | 0, h = h + Math.imul(x, $) | 0, s = s + Math.imul(_, Y) | 0, 
        u = (u = u + Math.imul(_, J) | 0) + Math.imul(M, Y) | 0, h = h + Math.imul(M, J) | 0, s = s + Math.imul(g, X) | 0, u = (u = u + Math.imul(g, tt) | 0) + Math.imul(y, X) | 0, 
        h = h + Math.imul(y, tt) | 0, s = s + Math.imul(p, rt) | 0, u = (u = u + Math.imul(p, nt) | 0) + Math.imul(m, rt) | 0, h = h + Math.imul(m, nt) | 0;
        var bt = (a + (s = s + Math.imul(c, ot) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, at) | 0) + Math.imul(f, ot) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, at) | 0) + (u >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, s = Math.imul(L, H), u = (u = Math.imul(L, F)) + Math.imul(P, H) | 0, 
        h = Math.imul(P, F), s = s + Math.imul(C, D) | 0, u = (u = u + Math.imul(C, Z) | 0) + Math.imul(T, D) | 0, h = h + Math.imul(T, Z) | 0, 
        s = s + Math.imul(E, V) | 0, u = (u = u + Math.imul(E, $) | 0) + Math.imul(S, V) | 0, h = h + Math.imul(S, $) | 0, s = s + Math.imul(k, Y) | 0, 
        u = (u = u + Math.imul(k, J) | 0) + Math.imul(x, Y) | 0, h = h + Math.imul(x, J) | 0, s = s + Math.imul(_, X) | 0, u = (u = u + Math.imul(_, tt) | 0) + Math.imul(M, X) | 0, 
        h = h + Math.imul(M, tt) | 0, s = s + Math.imul(g, rt) | 0, u = (u = u + Math.imul(g, nt) | 0) + Math.imul(y, rt) | 0, h = h + Math.imul(y, nt) | 0, 
        s = s + Math.imul(p, ot) | 0, u = (u = u + Math.imul(p, at) | 0) + Math.imul(m, ot) | 0, h = h + Math.imul(m, at) | 0;
        var kt = (a + (s = s + Math.imul(c, ut) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ht) | 0) + Math.imul(f, ut) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ht) | 0) + (u >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, s = Math.imul(O, H), u = (u = Math.imul(O, F)) + Math.imul(N, H) | 0, 
        h = Math.imul(N, F), s = s + Math.imul(L, D) | 0, u = (u = u + Math.imul(L, Z) | 0) + Math.imul(P, D) | 0, h = h + Math.imul(P, Z) | 0, 
        s = s + Math.imul(C, V) | 0, u = (u = u + Math.imul(C, $) | 0) + Math.imul(T, V) | 0, h = h + Math.imul(T, $) | 0, s = s + Math.imul(E, Y) | 0, 
        u = (u = u + Math.imul(E, J) | 0) + Math.imul(S, Y) | 0, h = h + Math.imul(S, J) | 0, s = s + Math.imul(k, X) | 0, u = (u = u + Math.imul(k, tt) | 0) + Math.imul(x, X) | 0, 
        h = h + Math.imul(x, tt) | 0, s = s + Math.imul(_, rt) | 0, u = (u = u + Math.imul(_, nt) | 0) + Math.imul(M, rt) | 0, h = h + Math.imul(M, nt) | 0, 
        s = s + Math.imul(g, ot) | 0, u = (u = u + Math.imul(g, at) | 0) + Math.imul(y, ot) | 0, h = h + Math.imul(y, at) | 0, s = s + Math.imul(p, ut) | 0, 
        u = (u = u + Math.imul(p, ht) | 0) + Math.imul(m, ut) | 0, h = h + Math.imul(m, ht) | 0;
        var xt = (a + (s = s + Math.imul(c, ct) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ft) | 0) + Math.imul(f, ct) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ft) | 0) + (u >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, s = Math.imul(q, H), u = (u = Math.imul(q, F)) + Math.imul(j, H) | 0, 
        h = Math.imul(j, F), s = s + Math.imul(O, D) | 0, u = (u = u + Math.imul(O, Z) | 0) + Math.imul(N, D) | 0, h = h + Math.imul(N, Z) | 0, 
        s = s + Math.imul(L, V) | 0, u = (u = u + Math.imul(L, $) | 0) + Math.imul(P, V) | 0, h = h + Math.imul(P, $) | 0, s = s + Math.imul(C, Y) | 0, 
        u = (u = u + Math.imul(C, J) | 0) + Math.imul(T, Y) | 0, h = h + Math.imul(T, J) | 0, s = s + Math.imul(E, X) | 0, u = (u = u + Math.imul(E, tt) | 0) + Math.imul(S, X) | 0, 
        h = h + Math.imul(S, tt) | 0, s = s + Math.imul(k, rt) | 0, u = (u = u + Math.imul(k, nt) | 0) + Math.imul(x, rt) | 0, h = h + Math.imul(x, nt) | 0, 
        s = s + Math.imul(_, ot) | 0, u = (u = u + Math.imul(_, at) | 0) + Math.imul(M, ot) | 0, h = h + Math.imul(M, at) | 0, s = s + Math.imul(g, ut) | 0, 
        u = (u = u + Math.imul(g, ht) | 0) + Math.imul(y, ut) | 0, h = h + Math.imul(y, ht) | 0, s = s + Math.imul(p, ct) | 0, u = (u = u + Math.imul(p, ft) | 0) + Math.imul(m, ct) | 0, 
        h = h + Math.imul(m, ft) | 0;
        var At = (a + (s = s + Math.imul(c, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, mt) | 0) + Math.imul(f, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, mt) | 0) + (u >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, s = Math.imul(q, D), u = (u = Math.imul(q, Z)) + Math.imul(j, D) | 0, 
        h = Math.imul(j, Z), s = s + Math.imul(O, V) | 0, u = (u = u + Math.imul(O, $) | 0) + Math.imul(N, V) | 0, h = h + Math.imul(N, $) | 0, 
        s = s + Math.imul(L, Y) | 0, u = (u = u + Math.imul(L, J) | 0) + Math.imul(P, Y) | 0, h = h + Math.imul(P, J) | 0, s = s + Math.imul(C, X) | 0, 
        u = (u = u + Math.imul(C, tt) | 0) + Math.imul(T, X) | 0, h = h + Math.imul(T, tt) | 0, s = s + Math.imul(E, rt) | 0, u = (u = u + Math.imul(E, nt) | 0) + Math.imul(S, rt) | 0, 
        h = h + Math.imul(S, nt) | 0, s = s + Math.imul(k, ot) | 0, u = (u = u + Math.imul(k, at) | 0) + Math.imul(x, ot) | 0, h = h + Math.imul(x, at) | 0, 
        s = s + Math.imul(_, ut) | 0, u = (u = u + Math.imul(_, ht) | 0) + Math.imul(M, ut) | 0, h = h + Math.imul(M, ht) | 0, s = s + Math.imul(g, ct) | 0, 
        u = (u = u + Math.imul(g, ft) | 0) + Math.imul(y, ct) | 0, h = h + Math.imul(y, ft) | 0;
        var Et = (a + (s = s + Math.imul(p, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(p, mt) | 0) + Math.imul(m, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(m, mt) | 0) + (u >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, s = Math.imul(q, V), u = (u = Math.imul(q, $)) + Math.imul(j, V) | 0, 
        h = Math.imul(j, $), s = s + Math.imul(O, Y) | 0, u = (u = u + Math.imul(O, J) | 0) + Math.imul(N, Y) | 0, h = h + Math.imul(N, J) | 0, 
        s = s + Math.imul(L, X) | 0, u = (u = u + Math.imul(L, tt) | 0) + Math.imul(P, X) | 0, h = h + Math.imul(P, tt) | 0, s = s + Math.imul(C, rt) | 0, 
        u = (u = u + Math.imul(C, nt) | 0) + Math.imul(T, rt) | 0, h = h + Math.imul(T, nt) | 0, s = s + Math.imul(E, ot) | 0, u = (u = u + Math.imul(E, at) | 0) + Math.imul(S, ot) | 0, 
        h = h + Math.imul(S, at) | 0, s = s + Math.imul(k, ut) | 0, u = (u = u + Math.imul(k, ht) | 0) + Math.imul(x, ut) | 0, h = h + Math.imul(x, ht) | 0, 
        s = s + Math.imul(_, ct) | 0, u = (u = u + Math.imul(_, ft) | 0) + Math.imul(M, ct) | 0, h = h + Math.imul(M, ft) | 0;
        var St = (a + (s = s + Math.imul(g, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(g, mt) | 0) + Math.imul(y, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(y, mt) | 0) + (u >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, s = Math.imul(q, Y), u = (u = Math.imul(q, J)) + Math.imul(j, Y) | 0, 
        h = Math.imul(j, J), s = s + Math.imul(O, X) | 0, u = (u = u + Math.imul(O, tt) | 0) + Math.imul(N, X) | 0, h = h + Math.imul(N, tt) | 0, 
        s = s + Math.imul(L, rt) | 0, u = (u = u + Math.imul(L, nt) | 0) + Math.imul(P, rt) | 0, h = h + Math.imul(P, nt) | 0, s = s + Math.imul(C, ot) | 0, 
        u = (u = u + Math.imul(C, at) | 0) + Math.imul(T, ot) | 0, h = h + Math.imul(T, at) | 0, s = s + Math.imul(E, ut) | 0, u = (u = u + Math.imul(E, ht) | 0) + Math.imul(S, ut) | 0, 
        h = h + Math.imul(S, ht) | 0, s = s + Math.imul(k, ct) | 0, u = (u = u + Math.imul(k, ft) | 0) + Math.imul(x, ct) | 0, h = h + Math.imul(x, ft) | 0;
        var Rt = (a + (s = s + Math.imul(_, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(_, mt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(M, mt) | 0) + (u >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, s = Math.imul(q, X), u = (u = Math.imul(q, tt)) + Math.imul(j, X) | 0, 
        h = Math.imul(j, tt), s = s + Math.imul(O, rt) | 0, u = (u = u + Math.imul(O, nt) | 0) + Math.imul(N, rt) | 0, h = h + Math.imul(N, nt) | 0, 
        s = s + Math.imul(L, ot) | 0, u = (u = u + Math.imul(L, at) | 0) + Math.imul(P, ot) | 0, h = h + Math.imul(P, at) | 0, s = s + Math.imul(C, ut) | 0, 
        u = (u = u + Math.imul(C, ht) | 0) + Math.imul(T, ut) | 0, h = h + Math.imul(T, ht) | 0, s = s + Math.imul(E, ct) | 0, u = (u = u + Math.imul(E, ft) | 0) + Math.imul(S, ct) | 0, 
        h = h + Math.imul(S, ft) | 0;
        var Ct = (a + (s = s + Math.imul(k, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(k, mt) | 0) + Math.imul(x, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(x, mt) | 0) + (u >>> 13) | 0) + (Ct >>> 26) | 0, Ct &= 67108863, s = Math.imul(q, rt), u = (u = Math.imul(q, nt)) + Math.imul(j, rt) | 0, 
        h = Math.imul(j, nt), s = s + Math.imul(O, ot) | 0, u = (u = u + Math.imul(O, at) | 0) + Math.imul(N, ot) | 0, h = h + Math.imul(N, at) | 0, 
        s = s + Math.imul(L, ut) | 0, u = (u = u + Math.imul(L, ht) | 0) + Math.imul(P, ut) | 0, h = h + Math.imul(P, ht) | 0, s = s + Math.imul(C, ct) | 0, 
        u = (u = u + Math.imul(C, ft) | 0) + Math.imul(T, ct) | 0, h = h + Math.imul(T, ft) | 0;
        var Tt = (a + (s = s + Math.imul(E, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(E, mt) | 0) + Math.imul(S, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(S, mt) | 0) + (u >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, s = Math.imul(q, ot), u = (u = Math.imul(q, at)) + Math.imul(j, ot) | 0, 
        h = Math.imul(j, at), s = s + Math.imul(O, ut) | 0, u = (u = u + Math.imul(O, ht) | 0) + Math.imul(N, ut) | 0, h = h + Math.imul(N, ht) | 0, 
        s = s + Math.imul(L, ct) | 0, u = (u = u + Math.imul(L, ft) | 0) + Math.imul(P, ct) | 0, h = h + Math.imul(P, ft) | 0;
        var Bt = (a + (s = s + Math.imul(C, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(C, mt) | 0) + Math.imul(T, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(T, mt) | 0) + (u >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863, s = Math.imul(q, ut), u = (u = Math.imul(q, ht)) + Math.imul(j, ut) | 0, 
        h = Math.imul(j, ht), s = s + Math.imul(O, ct) | 0, u = (u = u + Math.imul(O, ft) | 0) + Math.imul(N, ct) | 0, h = h + Math.imul(N, ft) | 0;
        var Lt = (a + (s = s + Math.imul(L, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(L, mt) | 0) + Math.imul(P, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(P, mt) | 0) + (u >>> 13) | 0) + (Lt >>> 26) | 0, Lt &= 67108863, s = Math.imul(q, ct), u = (u = Math.imul(q, ft)) + Math.imul(j, ct) | 0, 
        h = Math.imul(j, ft);
        var Pt = (a + (s = s + Math.imul(O, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(O, mt) | 0) + Math.imul(N, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(N, mt) | 0) + (u >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863;
        var It = (a + (s = Math.imul(q, pt)) | 0) + ((8191 & (u = (u = Math.imul(q, mt)) + Math.imul(j, pt) | 0)) << 13) | 0;
        return a = ((h = Math.imul(j, mt)) + (u >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, o[0] = vt, o[1] = gt, o[2] = yt, 
        o[3] = wt, o[4] = _t, o[5] = Mt, o[6] = bt, o[7] = kt, o[8] = xt, o[9] = At, o[10] = Et, o[11] = St, o[12] = Rt, o[13] = Ct, 
        o[14] = Tt, o[15] = Bt, o[16] = Lt, o[17] = Pt, o[18] = It, 0 !== a && (o[19] = a, r.length++), r;
      };
      function m(t, e, r) {
        return (new v).mulp(t, e, r);
      }
      function v(t, e) {
        this.x = t, this.y = e;
      }
      Math.imul || (p = d), o.prototype.mulTo = function(t, e) {
        var r;
        var n = this.length + t.length;
        return r = 10 === this.length && 10 === t.length ? p(this, t, e) : n < 63 ? d(this, t, e) : n < 1024 ? function(t, e, r) {
          r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
          var n = 0;
          var i = 0;
          for (var o = 0; o < r.length - 1; o++) {
            var a = i;
            i = 0;
            var s = 67108863 & n;
            var u = Math.min(o, e.length - 1);
            for (var h = Math.max(0, o - t.length + 1); h <= u; h++) {
              var l = o - h;
              var c = (0 | t.words[l]) * (0 | e.words[h]);
              var f = 67108863 & c;
              s = 67108863 & (f = f + s | 0), i += (a = (a = a + (c / 67108864 | 0) | 0) + (f >>> 26) | 0) >>> 26, a &= 67108863;
            }
            r.words[o] = s, n = a, a = i;
          }
          return 0 !== n ? r.words[o] = n : r.length--, r.strip();
        }(this, t, e) : m(this, t, e), r;
      }, v.prototype.makeRBT = function(t) {
        var e = new Array(t);
        var r = o.prototype._countBits(t) - 1;
        for (var n = 0; n < t; n++) e[n] = this.revBin(n, r, t);
        return e;
      }, v.prototype.revBin = function(t, e, r) {
        if (0 === t || t === r - 1) return t;
        var n = 0;
        for (var i = 0; i < e; i++) n |= (1 & t) << e - i - 1, t >>= 1;
        return n;
      }, v.prototype.permute = function(t, e, r, n, i, o) {
        for (var a = 0; a < o; a++) n[a] = e[t[a]], i[a] = r[t[a]];
      }, v.prototype.transform = function(t, e, r, n, i, o) {
        this.permute(o, t, e, r, n, i);
        for (var a = 1; a < i; a <<= 1) {
          var s = a << 1;
          var u = Math.cos(2 * Math.PI / s);
          var h = Math.sin(2 * Math.PI / s);
          for (var l = 0; l < i; l += s) {
            var c = u;
            var f = h;
            for (var d = 0; d < a; d++) {
              var p = r[l + d];
              var m = n[l + d];
              var v = r[l + d + a];
              var g = n[l + d + a];
              var y = c * v - f * g;
              g = c * g + f * v, v = y, r[l + d] = p + v, n[l + d] = m + g, r[l + d + a] = p - v, n[l + d + a] = m - g, d !== s && (y = u * c - h * f, 
              f = u * f + h * c, c = y);
            }
          }
        }
      }, v.prototype.guessLen13b = function(t, e) {
        var r = 1 | Math.max(e, t);
        var n = 1 & r;
        var i = 0;
        for (r = r / 2 | 0; r; r >>>= 1) i++;
        return 1 << i + 1 + n;
      }, v.prototype.conjugate = function(t, e, r) {
        if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
          var i = t[n];
          t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
        }
      }, v.prototype.normalize13b = function(t, e) {
        var r = 0;
        for (var n = 0; n < e / 2; n++) {
          var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
          t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
        }
        return t;
      }, v.prototype.convert13b = function(t, e, r, i) {
        var o = 0;
        for (var a = 0; a < e; a++) o += 0 | t[a], r[2 * a] = 8191 & o, o >>>= 13, r[2 * a + 1] = 8191 & o, o >>>= 13;
        for (a = 2 * e; a < i; ++a) r[a] = 0;
        n(0 === o), n(0 == (-8192 & o));
      }, v.prototype.stub = function(t) {
        var e = new Array(t);
        for (var r = 0; r < t; r++) e[r] = 0;
        return e;
      }, v.prototype.mulp = function(t, e, r) {
        var n = 2 * this.guessLen13b(t.length, e.length);
        var i = this.makeRBT(n);
        var o = this.stub(n);
        var a = new Array(n);
        var s = new Array(n);
        var u = new Array(n);
        var h = new Array(n);
        var l = new Array(n);
        var c = new Array(n);
        var f = r.words;
        f.length = n, this.convert13b(t.words, t.length, a, n), this.convert13b(e.words, e.length, h, n), this.transform(a, o, s, u, n, i), 
        this.transform(h, o, l, c, n, i);
        for (var d = 0; d < n; d++) {
          var p = s[d] * l[d] - u[d] * c[d];
          u[d] = s[d] * c[d] + u[d] * l[d], s[d] = p;
        }
        return this.conjugate(s, u, n), this.transform(s, u, f, o, n, i), this.conjugate(f, o, n), this.normalize13b(f, n), r.negative = t.negative ^ e.negative, 
        r.length = t.length + e.length, r.strip();
      }, o.prototype.mul = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), this.mulTo(t, e);
      }, o.prototype.mulf = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), m(this, t, e);
      }, o.prototype.imul = function(t) {
        return this.clone().mulTo(t, this);
      }, o.prototype.imuln = function(t) {
        n('number' == typeof t), n(t < 67108864);
        var e = 0;
        for (var r = 0; r < this.length; r++) {
          var i = (0 | this.words[r]) * t;
          var o = (67108863 & i) + (67108863 & e);
          e >>= 26, e += i / 67108864 | 0, e += o >>> 26, this.words[r] = 67108863 & o;
        }
        return 0 !== e && (this.words[r] = e, this.length++), this;
      }, o.prototype.muln = function(t) {
        return this.clone().imuln(t);
      }, o.prototype.sqr = function() {
        return this.mul(this);
      }, o.prototype.isqr = function() {
        return this.imul(this.clone());
      }, o.prototype.pow = function(t) {
        var e = function(t) {
          var e = new Array(t.bitLength());
          for (var r = 0; r < e.length; r++) {
            var n = r / 26 | 0;
            var i = r % 26;
            e[r] = (t.words[n] & 1 << i) >>> i;
          }
          return e;
        }(t);
        if (0 === e.length) return new o(1);
        var r = this;
        for (var n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr()) ;
        if (++n < e.length) for (var i = r.sqr(); n < e.length; n++, i = i.sqr()) 0 !== e[n] && (r = r.mul(i));
        return r;
      }, o.prototype.iushln = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 67108863 >>> 26 - e << 26 - e;
        var o;
        if (0 !== e) {
          var a = 0;
          for (o = 0; o < this.length; o++) {
            var s = this.words[o] & i;
            var u = (0 | this.words[o]) - s << e;
            this.words[o] = u | a, a = s >>> 26 - e;
          }
          a && (this.words[o] = a, this.length++);
        }
        if (0 !== r) {
          for (o = this.length - 1; o >= 0; o--) this.words[o + r] = this.words[o];
          for (o = 0; o < r; o++) this.words[o] = 0;
          this.length += r;
        }
        return this.strip();
      }, o.prototype.ishln = function(t) {
        return n(0 === this.negative), this.iushln(t);
      }, o.prototype.iushrn = function(t, e, r) {
        var i;
        n('number' == typeof t && t >= 0), i = e ? (e - e % 26) / 26 : 0;
        var o = t % 26;
        var a = Math.min((t - o) / 26, this.length);
        var s = 67108863 ^ 67108863 >>> o << o;
        var u = r;
        if (i -= a, i = Math.max(0, i), u) {
          for (var h = 0; h < a; h++) u.words[h] = this.words[h];
          u.length = a;
        }
        if (0 === a) ; else if (this.length > a) for (this.length -= a, h = 0; h < this.length; h++) this.words[h] = this.words[h + a]; else this.words[0] = 0, 
        this.length = 1;
        var l = 0;
        for (h = this.length - 1; h >= 0 && (0 !== l || h >= i); h--) {
          var c = 0 | this.words[h];
          this.words[h] = l << 26 - o | c >>> o, l = c & s;
        }
        return u && 0 !== l && (u.words[u.length++] = l), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
      }, o.prototype.ishrn = function(t, e, r) {
        return n(0 === this.negative), this.iushrn(t, e, r);
      }, o.prototype.shln = function(t) {
        return this.clone().ishln(t);
      }, o.prototype.ushln = function(t) {
        return this.clone().iushln(t);
      }, o.prototype.shrn = function(t) {
        return this.clone().ishrn(t);
      }, o.prototype.ushrn = function(t) {
        return this.clone().iushrn(t);
      }, o.prototype.testn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        return !(this.length <= r) && !!(this.words[r] & i);
      }, o.prototype.imaskn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        if (n(0 === this.negative, 'imaskn works only with positive numbers'), this.length <= r) return this;
        if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
          var i = 67108863 ^ 67108863 >>> e << e;
          this.words[this.length - 1] &= i;
        }
        return this.strip();
      }, o.prototype.maskn = function(t) {
        return this.clone().imaskn(t);
      }, o.prototype.iaddn = function(t) {
        return n('number' == typeof t), n(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < t ? (this.words[0] = t - (0 | this.words[0]), 
        this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, this) : this._iaddn(t);
      }, o.prototype._iaddn = function(t) {
        this.words[0] += t;
        for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) this.words[e] -= 67108864, e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
        return this.length = Math.max(this.length, e + 1), this;
      }, o.prototype.isubn = function(t) {
        if (n('number' == typeof t), n(t < 67108864), t < 0) return this.iaddn(-t);
        if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, this;
        if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var e = 0; e < this.length && this.words[e] < 0; e++) this.words[e] += 67108864, 
        this.words[e + 1] -= 1;
        return this.strip();
      }, o.prototype.addn = function(t) {
        return this.clone().iaddn(t);
      }, o.prototype.subn = function(t) {
        return this.clone().isubn(t);
      }, o.prototype.iabs = function() {
        return this.negative = 0, this;
      }, o.prototype.abs = function() {
        return this.clone().iabs();
      }, o.prototype._ishlnsubmul = function(t, e, r) {
        var i = t.length + r;
        var o;
        var a;
        this._expand(i);
        var s = 0;
        for (o = 0; o < t.length; o++) {
          a = (0 | this.words[o + r]) + s;
          var u = (0 | t.words[o]) * e;
          s = ((a -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[o + r] = 67108863 & a;
        }
        for (;o < this.length - r; o++) s = (a = (0 | this.words[o + r]) + s) >> 26, this.words[o + r] = 67108863 & a;
        if (0 === s) return this.strip();
        for (n(-1 === s), s = 0, o = 0; o < this.length; o++) s = (a = -(0 | this.words[o]) + s) >> 26, this.words[o] = 67108863 & a;
        return this.negative = 1, this.strip();
      }, o.prototype._wordDiv = function(t, e) {
        var r = (this.length, t.length);
        var n = this.clone();
        var i = t;
        var a = 0 | i.words[i.length - 1];
        0 !== (r = 26 - this._countBits(a)) && (i = i.ushln(r), n.iushln(r), a = 0 | i.words[i.length - 1]);
        var s = n.length - i.length;
        var u;
        if ('mod' !== e) {
          (u = new o(null)).length = s + 1, u.words = new Array(u.length);
          for (var h = 0; h < u.length; h++) u.words[h] = 0;
        }
        var l = n.clone()._ishlnsubmul(i, 1, s);
        0 === l.negative && (n = l, u && (u.words[s] = 1));
        for (var c = s - 1; c >= 0; c--) {
          var f = 67108864 * (0 | n.words[i.length + c]) + (0 | n.words[i.length + c - 1]);
          for (f = Math.min(f / a | 0, 67108863), n._ishlnsubmul(i, f, c); 0 !== n.negative; ) f--, n.negative = 0, n._ishlnsubmul(i, 1, c), 
          n.isZero() || (n.negative ^= 1);
          u && (u.words[c] = f);
        }
        return u && u.strip(), n.strip(), 'div' !== e && 0 !== r && n.iushrn(r), {
          div: u || null,
          mod: n
        };
      }, o.prototype.divmod = function(t, e, r) {
        return n(!t.isZero()), this.isZero() ? {
          div: new o(0),
          mod: new o(0)
        } : 0 !== this.negative && 0 === t.negative ? (s = this.neg().divmod(t, e), 'mod' !== e && (i = s.div.neg()), 'div' !== e && (a = s.mod.neg(), 
        r && 0 !== a.negative && a.iadd(t)), {
          div: i,
          mod: a
        }) : 0 === this.negative && 0 !== t.negative ? (s = this.divmod(t.neg(), e), 'mod' !== e && (i = s.div.neg()), {
          div: i,
          mod: s.mod
        }) : 0 != (this.negative & t.negative) ? (s = this.neg().divmod(t.neg(), e), 'div' !== e && (a = s.mod.neg(), r && 0 !== a.negative && a.isub(t)), 
        {
          div: s.div,
          mod: a
        }) : t.length > this.length || this.cmp(t) < 0 ? {
          div: new o(0),
          mod: this
        } : 1 === t.length ? 'div' === e ? {
          div: this.divn(t.words[0]),
          mod: null
        } : 'mod' === e ? {
          div: null,
          mod: new o(this.modn(t.words[0]))
        } : {
          div: this.divn(t.words[0]),
          mod: new o(this.modn(t.words[0]))
        } : this._wordDiv(t, e);
        var i, a, s;
      }, o.prototype.div = function(t) {
        return this.divmod(t, 'div', !1).div;
      }, o.prototype.mod = function(t) {
        return this.divmod(t, 'mod', !1).mod;
      }, o.prototype.umod = function(t) {
        return this.divmod(t, 'mod', !0).mod;
      }, o.prototype.divRound = function(t) {
        var e = this.divmod(t);
        if (e.mod.isZero()) return e.div;
        var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod;
        var n = t.ushrn(1);
        var i = t.andln(1);
        var o = r.cmp(n);
        return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
      }, o.prototype.modn = function(t) {
        n(t <= 67108863);
        var e = (1 << 26) % t;
        var r = 0;
        for (var i = this.length - 1; i >= 0; i--) r = (e * r + (0 | this.words[i])) % t;
        return r;
      }, o.prototype.idivn = function(t) {
        n(t <= 67108863);
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var i = (0 | this.words[r]) + 67108864 * e;
          this.words[r] = i / t | 0, e = i % t;
        }
        return this.strip();
      }, o.prototype.divn = function(t) {
        return this.clone().idivn(t);
      }, o.prototype.egcd = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = new o(0);
        var u = new o(1);
        var h = 0;
        for (;e.isEven() && r.isEven(); ) e.iushrn(1), r.iushrn(1), ++h;
        var l = r.clone();
        var c = e.clone();
        for (;!e.isZero(); ) {
          for (var f = 0, d = 1; 0 == (e.words[0] & d) && f < 26; ++f, d <<= 1) ;
          if (f > 0) for (e.iushrn(f); f-- > 0; ) (i.isOdd() || a.isOdd()) && (i.iadd(l), a.isub(c)), i.iushrn(1), a.iushrn(1);
          for (var p = 0, m = 1; 0 == (r.words[0] & m) && p < 26; ++p, m <<= 1) ;
          if (p > 0) for (r.iushrn(p); p-- > 0; ) (s.isOdd() || u.isOdd()) && (s.iadd(l), u.isub(c)), s.iushrn(1), u.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(s), a.isub(u)) : (r.isub(e), s.isub(i), u.isub(a));
        }
        return {
          a: s,
          b: u,
          gcd: r.iushln(h)
        };
      }, o.prototype._invmp = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = r.clone();
        for (;e.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
          for (var u = 0, h = 1; 0 == (e.words[0] & h) && u < 26; ++u, h <<= 1) ;
          if (u > 0) for (e.iushrn(u); u-- > 0; ) i.isOdd() && i.iadd(s), i.iushrn(1);
          for (var l = 0, c = 1; 0 == (r.words[0] & c) && l < 26; ++l, c <<= 1) ;
          if (l > 0) for (r.iushrn(l); l-- > 0; ) a.isOdd() && a.iadd(s), a.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(a)) : (r.isub(e), a.isub(i));
        }
        var f;
        return (f = 0 === e.cmpn(1) ? i : a).cmpn(0) < 0 && f.iadd(t), f;
      }, o.prototype.gcd = function(t) {
        if (this.isZero()) return t.abs();
        if (t.isZero()) return this.abs();
        var e = this.clone();
        var r = t.clone();
        e.negative = 0, r.negative = 0;
        for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
        for (;;) {
          for (;e.isEven(); ) e.iushrn(1);
          for (;r.isEven(); ) r.iushrn(1);
          var i = e.cmp(r);
          if (i < 0) {
            var o = e;
            e = r, r = o;
          } else if (0 === i || 0 === r.cmpn(1)) break;
          e.isub(r);
        }
        return r.iushln(n);
      }, o.prototype.invm = function(t) {
        return this.egcd(t).a.umod(t);
      }, o.prototype.isEven = function() {
        return 0 == (1 & this.words[0]);
      }, o.prototype.isOdd = function() {
        return 1 == (1 & this.words[0]);
      }, o.prototype.andln = function(t) {
        return this.words[0] & t;
      }, o.prototype.bincn = function(t) {
        n('number' == typeof t);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
        var o = i;
        for (var a = r; 0 !== o && a < this.length; a++) {
          var s = 0 | this.words[a];
          o = (s += o) >>> 26, s &= 67108863, this.words[a] = s;
        }
        return 0 !== o && (this.words[a] = o, this.length++), this;
      }, o.prototype.isZero = function() {
        return 1 === this.length && 0 === this.words[0];
      }, o.prototype.cmpn = function(t) {
        var e = t < 0;
        if (0 !== this.negative && !e) return -1;
        if (0 === this.negative && e) return 1;
        var r;
        if (this.strip(), this.length > 1) r = 1; else {
          e && (t = -t), n(t <= 67108863, 'Number is too big');
          var i = 0 | this.words[0];
          r = i === t ? 0 : i < t ? -1 : 1;
        }
        return 0 !== this.negative ? 0 | -r : r;
      }, o.prototype.cmp = function(t) {
        if (0 !== this.negative && 0 === t.negative) return -1;
        if (0 === this.negative && 0 !== t.negative) return 1;
        var e = this.ucmp(t);
        return 0 !== this.negative ? 0 | -e : e;
      }, o.prototype.ucmp = function(t) {
        if (this.length > t.length) return 1;
        if (this.length < t.length) return -1;
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var n = 0 | this.words[r];
          var i = 0 | t.words[r];
          if (n !== i) {
            n < i ? e = -1 : n > i && (e = 1);
            break;
          }
        }
        return e;
      }, o.prototype.gtn = function(t) {
        return 1 === this.cmpn(t);
      }, o.prototype.gt = function(t) {
        return 1 === this.cmp(t);
      }, o.prototype.gten = function(t) {
        return this.cmpn(t) >= 0;
      }, o.prototype.gte = function(t) {
        return this.cmp(t) >= 0;
      }, o.prototype.ltn = function(t) {
        return -1 === this.cmpn(t);
      }, o.prototype.lt = function(t) {
        return -1 === this.cmp(t);
      }, o.prototype.lten = function(t) {
        return this.cmpn(t) <= 0;
      }, o.prototype.lte = function(t) {
        return this.cmp(t) <= 0;
      }, o.prototype.eqn = function(t) {
        return 0 === this.cmpn(t);
      }, o.prototype.eq = function(t) {
        return 0 === this.cmp(t);
      }, o.red = function(t) {
        return new k(t);
      }, o.prototype.toRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), n(0 === this.negative, 'red works only with positives'), t.convertTo(this)._forceRed(t);
      }, o.prototype.fromRed = function() {
        return n(this.red, 'fromRed works only with numbers in reduction context'), this.red.convertFrom(this);
      }, o.prototype._forceRed = function(t) {
        return this.red = t, this;
      }, o.prototype.forceRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), this._forceRed(t);
      }, o.prototype.redAdd = function(t) {
        return n(this.red, 'redAdd works only with red numbers'), this.red.add(this, t);
      }, o.prototype.redIAdd = function(t) {
        return n(this.red, 'redIAdd works only with red numbers'), this.red.iadd(this, t);
      }, o.prototype.redSub = function(t) {
        return n(this.red, 'redSub works only with red numbers'), this.red.sub(this, t);
      }, o.prototype.redISub = function(t) {
        return n(this.red, 'redISub works only with red numbers'), this.red.isub(this, t);
      }, o.prototype.redShl = function(t) {
        return n(this.red, 'redShl works only with red numbers'), this.red.shl(this, t);
      }, o.prototype.redMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.mul(this, t);
      }, o.prototype.redIMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.imul(this, t);
      }, o.prototype.redSqr = function() {
        return n(this.red, 'redSqr works only with red numbers'), this.red._verify1(this), this.red.sqr(this);
      }, o.prototype.redISqr = function() {
        return n(this.red, 'redISqr works only with red numbers'), this.red._verify1(this), this.red.isqr(this);
      }, o.prototype.redSqrt = function() {
        return n(this.red, 'redSqrt works only with red numbers'), this.red._verify1(this), this.red.sqrt(this);
      }, o.prototype.redInvm = function() {
        return n(this.red, 'redInvm works only with red numbers'), this.red._verify1(this), this.red.invm(this);
      }, o.prototype.redNeg = function() {
        return n(this.red, 'redNeg works only with red numbers'), this.red._verify1(this), this.red.neg(this);
      }, o.prototype.redPow = function(t) {
        return n(this.red && !t.red, 'redPow(normalNum)'), this.red._verify1(this), this.red.pow(this, t);
      };
      var g = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function y(t, e) {
        this.name = t, this.p = new o(e, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      function w() {
        y.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      function _() {
        y.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      function M() {
        y.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      function b() {
        y.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      function k(t) {
        if ('string' == typeof t) {
          var e = o._prime(t);
          this.m = e.p, this.prime = e;
        } else n(t.gtn(1), 'modulus must be greater than 1'), this.m = t, this.prime = null;
      }
      function x(t) {
        k.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), 
        this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
        this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      y.prototype._tmp = function() {
        var t = new o(null);
        return t.words = new Array(Math.ceil(this.n / 13)), t;
      }, y.prototype.ireduce = function(t) {
        var e = t;
        var r;
        do {
          this.split(e, this.tmp), r = (e = (e = this.imulK(e)).iadd(this.tmp)).bitLength();
        } while (r > this.n);
        var n = r < this.n ? -1 : e.ucmp(this.p);
        return 0 === n ? (e.words[0] = 0, e.length = 1) : n > 0 ? e.isub(this.p) : void 0 !== e.strip ? e.strip() : e._strip(), 
        e;
      }, y.prototype.split = function(t, e) {
        t.iushrn(this.n, 0, e);
      }, y.prototype.imulK = function(t) {
        return t.imul(this.k);
      }, i(w, y), w.prototype.split = function(t, e) {
        var r = 4194303;
        var n = Math.min(t.length, 9);
        for (var i = 0; i < n; i++) e.words[i] = t.words[i];
        if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
        var o = t.words[9];
        for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
          var a = 0 | t.words[i];
          t.words[i - 10] = (a & r) << 4 | o >>> 22, o = a;
        }
        o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
      }, w.prototype.imulK = function(t) {
        t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 0 | t.words[r];
          e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
        }
        return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), t;
      }, i(_, y), i(M, y), i(b, y), b.prototype.imulK = function(t) {
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 19 * (0 | t.words[r]) + e;
          var i = 67108863 & n;
          n >>>= 26, t.words[r] = i, e = n;
        }
        return 0 !== e && (t.words[t.length++] = e), t;
      }, o._prime = function(t) {
        if (g[t]) return g[t];
        var e;
        if ('k256' === t) e = new w; else if ('p224' === t) e = new _; else if ('p192' === t) e = new M; else {
          if ('p25519' !== t) throw new Error('Unknown prime ' + t);
          e = new b;
        }
        return g[t] = e, e;
      }, k.prototype._verify1 = function(t) {
        n(0 === t.negative, 'red works only with positives'), n(t.red, 'red works only with red numbers');
      }, k.prototype._verify2 = function(t, e) {
        n(0 == (t.negative | e.negative), 'red works only with positives'), n(t.red && t.red === e.red, 'red works only with red numbers');
      }, k.prototype.imod = function(t) {
        return this.prime ? this.prime.ireduce(t)._forceRed(this) : t.umod(this.m)._forceRed(this);
      }, k.prototype.neg = function(t) {
        return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
      }, k.prototype.add = function(t, e) {
        this._verify2(t, e);
        var r = t.add(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
      }, k.prototype.iadd = function(t, e) {
        this._verify2(t, e);
        var r = t.iadd(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r;
      }, k.prototype.sub = function(t, e) {
        this._verify2(t, e);
        var r = t.sub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
      }, k.prototype.isub = function(t, e) {
        this._verify2(t, e);
        var r = t.isub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r;
      }, k.prototype.shl = function(t, e) {
        return this._verify1(t), this.imod(t.ushln(e));
      }, k.prototype.imul = function(t, e) {
        return this._verify2(t, e), this.imod(t.imul(e));
      }, k.prototype.mul = function(t, e) {
        return this._verify2(t, e), this.imod(t.mul(e));
      }, k.prototype.isqr = function(t) {
        return this.imul(t, t.clone());
      }, k.prototype.sqr = function(t) {
        return this.mul(t, t);
      }, k.prototype.sqrt = function(t) {
        if (t.isZero()) return t.clone();
        var e = this.m.andln(3);
        if (n(e % 2 == 1), 3 === e) {
          var r = this.m.add(new o(1)).iushrn(2);
          return this.pow(t, r);
        }
        var i = this.m.subn(1);
        var a = 0;
        for (;!i.isZero() && 0 === i.andln(1); ) a++, i.iushrn(1);
        n(!i.isZero());
        var s = new o(1).toRed(this);
        var u = s.redNeg();
        var h = this.m.subn(1).iushrn(1);
        var l = this.m.bitLength();
        for (l = new o(2 * l * l).toRed(this); 0 !== this.pow(l, h).cmp(u); ) l.redIAdd(u);
        var c = this.pow(l, i);
        var f = this.pow(t, i.addn(1).iushrn(1));
        var d = this.pow(t, i);
        var p = a;
        for (;0 !== d.cmp(s); ) {
          var m = d;
          for (var v = 0; 0 !== m.cmp(s); v++) m = m.redSqr();
          n(v < p);
          var g = this.pow(c, new o(1).iushln(p - v - 1));
          f = f.redMul(g), c = g.redSqr(), d = d.redMul(c), p = v;
        }
        return f;
      }, k.prototype.invm = function(t) {
        var e = t._invmp(this.m);
        return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
      }, k.prototype.pow = function(t, e) {
        if (e.isZero()) return new o(1).toRed(this);
        if (0 === e.cmpn(1)) return t.clone();
        var r = new Array(16);
        r[0] = new o(1).toRed(this), r[1] = t;
        for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
        var i = r[0];
        var a = 0;
        var s = 0;
        var u = e.bitLength() % 26;
        for (0 === u && (u = 26), n = e.length - 1; n >= 0; n--) {
          var h = e.words[n];
          for (var l = u - 1; l >= 0; l--) {
            var c = h >> l & 1;
            i !== r[0] && (i = this.sqr(i)), 0 !== c || 0 !== a ? (a <<= 1, a |= c, (4 === ++s || 0 === n && 0 === l) && (i = this.mul(i, r[a]), 
            s = 0, a = 0)) : s = 0;
          }
          u = 26;
        }
        return i;
      }, k.prototype.convertTo = function(t) {
        var e = t.umod(this.m);
        return e === t ? e.clone() : e;
      }, k.prototype.convertFrom = function(t) {
        var e = t.clone();
        return e.red = null, e;
      }, o.mont = function(t) {
        return new x(t);
      }, i(x, k), x.prototype.convertTo = function(t) {
        return this.imod(t.ushln(this.shift));
      }, x.prototype.convertFrom = function(t) {
        var e = this.imod(t.mul(this.rinv));
        return e.red = null, e;
      }, x.prototype.imul = function(t, e) {
        if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
        var r = t.imul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var o = i;
        return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
      }, x.prototype.mul = function(t, e) {
        if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
        var r = t.mul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var a = i;
        return i.cmp(this.m) >= 0 ? a = i.isub(this.m) : i.cmpn(0) < 0 && (a = i.iadd(this.m)), a._forceRed(this);
      }, x.prototype.invm = function(t) {
        return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
      };
    }(t = r.nmd(t), this);
  },
  30248: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.importPublic = e.privateToPublic = e.privateToAddress = e.publicToAddress = e.pubToAddress = e.isValidPublic = e.isValidPrivate = e.isPrecompiled = e.generateAddress2 = e.generateAddress = e.isValidChecksumAddress = e.toChecksumAddress = e.isZeroAddress = e.isValidAddress = e.zeroAddress = void 0;
    var i = r(69282);
    var o = r(80884);
    var a = r(83230);
    var s = r(91609);
    var u = r(77124);
    var h = r(91550);
    e.zeroAddress = function() {
      var t = u.zeros(20);
      return u.bufferToHex(t);
    }, e.isValidAddress = function(t) {
      return /^0x[0-9a-fA-F]{40}$/.test(t);
    }, e.isZeroAddress = function(t) {
      return e.zeroAddress() === u.addHexPrefix(t);
    }, e.toChecksumAddress = function(t, e) {
      t = o.stripHexPrefix(t).toLowerCase();
      var r = void 0 !== e ? e.toString() + '0x' : '';
      var n = h.keccak(r + t).toString('hex');
      var i = '0x';
      for (var a = 0; a < t.length; a++) parseInt(n[a], 16) >= 8 ? i += t[a].toUpperCase() : i += t[a];
      return i;
    }, e.isValidChecksumAddress = function(t, r) {
      return e.isValidAddress(t) && e.toChecksumAddress(t, r) === t;
    }, e.generateAddress = function(t, e) {
      t = u.toBuffer(t);
      var r = new s(e);
      return r.isZero() ? h.rlphash([ t, null ]).slice(-20) : h.rlphash([ t, n.from(r.toArray()) ]).slice(-20);
    }, e.generateAddress2 = function(t, e, r) {
      var o = u.toBuffer(t);
      var a = u.toBuffer(e);
      var s = u.toBuffer(r);
      return i(20 === o.length), i(32 === a.length), h.keccak256(n.concat([ n.from('ff', 'hex'), o, a, h.keccak256(s) ])).slice(-20);
    }, e.isPrecompiled = function(t) {
      var e = u.unpad(t);
      return 1 === e.length && e[0] >= 1 && e[0] <= 8;
    }, e.isValidPrivate = function(t) {
      return a.privateKeyVerify(t);
    }, e.isValidPublic = function(t, e) {
      return void 0 === e && (e = !1), 64 === t.length ? a.publicKeyVerify(n.concat([ n.from([ 4 ]), t ])) : !!e && a.publicKeyVerify(t);
    }, e.pubToAddress = function(t, e) {
      return void 0 === e && (e = !1), t = u.toBuffer(t), e && 64 !== t.length && (t = a.publicKeyConvert(t, !1).slice(1)), i(64 === t.length), 
      h.keccak(t).slice(-20);
    }, e.publicToAddress = e.pubToAddress, e.privateToAddress = function(t) {
      return e.publicToAddress(e.privateToPublic(t));
    }, e.privateToPublic = function(t) {
      return t = u.toBuffer(t), a.publicKeyCreate(t, !1).slice(1);
    }, e.importPublic = function(t) {
      return 64 !== (t = u.toBuffer(t)).length && (t = a.publicKeyConvert(t, !1).slice(1)), t;
    };
  },
  77124: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.baToJSON = e.addHexPrefix = e.toUnsigned = e.fromSigned = e.bufferToHex = e.bufferToInt = e.toBuffer = e.stripZeros = e.unpad = e.setLengthRight = e.setLength = e.setLengthLeft = e.zeros = void 0;
    var i = r(80884);
    var o = r(91609);
    e.zeros = function(t) {
      return n.allocUnsafe(t).fill(0);
    }, e.setLengthLeft = function(t, r, n) {
      void 0 === n && (n = !1);
      var i = e.zeros(r);
      return t = e.toBuffer(t), n ? t.length < r ? (t.copy(i), i) : t.slice(0, r) : t.length < r ? (t.copy(i, r - t.length), i) : t.slice(-r);
    }, e.setLength = e.setLengthLeft, e.setLengthRight = function(t, r) {
      return e.setLength(t, r, !0);
    }, e.unpad = function(t) {
      var e = (t = i.stripHexPrefix(t))[0];
      for (;t.length > 0 && '0' === e.toString(); ) e = (t = t.slice(1))[0];
      return t;
    }, e.stripZeros = e.unpad, e.toBuffer = function(t) {
      if (!n.isBuffer(t)) if (Array.isArray(t)) t = n.from(t); else if ('string' == typeof t) {
        if (!i.isHexString(t)) throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + t);
        t = n.from(i.padToEven(i.stripHexPrefix(t)), 'hex');
      } else if ('number' == typeof t) t = i.intToBuffer(t); else if (null == t) t = n.allocUnsafe(0); else if (o.isBN(t)) t = t.toArrayLike(n); else {
        if (!t.toArray) throw new Error('invalid type');
        t = n.from(t.toArray());
      }
      return t;
    }, e.bufferToInt = function(t) {
      return new o(e.toBuffer(t)).toNumber();
    }, e.bufferToHex = function(t) {
      return '0x' + (t = e.toBuffer(t)).toString('hex');
    }, e.fromSigned = function(t) {
      return new o(t).fromTwos(256);
    }, e.toUnsigned = function(t) {
      return n.from(t.toTwos(256).toArray());
    }, e.addHexPrefix = function(t) {
      return 'string' != typeof t || i.isHexPrefixed(t) ? t : '0x' + t;
    }, e.baToJSON = function(t) {
      if (n.isBuffer(t)) return "0x" + t.toString('hex');
      if (t instanceof Array) {
        var r = [];
        for (var i = 0; i < t.length; i++) r.push(e.baToJSON(t[i]));
        return r;
      }
    };
  },
  46649: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.KECCAK256_RLP = e.KECCAK256_RLP_S = e.KECCAK256_RLP_ARRAY = e.KECCAK256_RLP_ARRAY_S = e.KECCAK256_NULL = e.KECCAK256_NULL_S = e.TWO_POW256 = e.MAX_INTEGER = void 0;
    var i = r(91609);
    e.MAX_INTEGER = new i('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16), e.TWO_POW256 = new i('10000000000000000000000000000000000000000000000000000000000000000', 16), 
    e.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', e.KECCAK256_NULL = n.from(e.KECCAK256_NULL_S, 'hex'), 
    e.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', e.KECCAK256_RLP_ARRAY = n.from(e.KECCAK256_RLP_ARRAY_S, 'hex'), 
    e.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', e.KECCAK256_RLP = n.from(e.KECCAK256_RLP_S, 'hex');
  },
  91550: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.rlphash = e.ripemd160 = e.sha256 = e.keccak256 = e.keccak = void 0;
    var i = r(82192), o = i.keccak224, a = i.keccak384, s = i.keccak256, u = i.keccak512;
    var h = r(23482);
    var l = r(80884);
    var c = r(51675);
    var f = r(77124);
    e.keccak = function(t, e) {
      switch (void 0 === e && (e = 256), t = 'string' != typeof t || l.isHexString(t) ? f.toBuffer(t) : n.from(t, 'utf8'), e || (e = 256), 
      e) {
       case 224:
        return o(t);

       case 256:
        return s(t);

       case 384:
        return a(t);

       case 512:
        return u(t);

       default:
        throw new Error("Invald algorithm: keccak" + e);
      }
    }, e.keccak256 = function(t) {
      return e.keccak(t);
    }, e.sha256 = function(t) {
      return t = f.toBuffer(t), h('sha256').update(t).digest();
    }, e.ripemd160 = function(t, e) {
      t = f.toBuffer(t);
      var r = h('rmd160').update(t).digest();
      return !0 === e ? f.setLength(r, 32) : r;
    }, e.rlphash = function(t) {
      return e.keccak(c.encode(t));
    };
  },
  86589: function(t, e, r) {
    "use strict";
    var n = this && this.__createBinding || (Object.create ? function(t, e, r, n) {
      void 0 === n && (n = r), Object.defineProperty(t, n, {
        enumerable: !0,
        get: function() {
          return e[r];
        }
      });
    } : function(t, e, r, n) {
      void 0 === n && (n = r), t[n] = e[r];
    });
    var i = this && this.__exportStar || function(t, e) {
      for (var r in t) "default" === r || e.hasOwnProperty(r) || n(e, t, r);
    };
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.secp256k1 = e.rlp = e.BN = void 0;
    var o = r(83230);
    e.secp256k1 = o;
    var a = r(80884);
    var s = r(91609);
    e.BN = s;
    var u = r(51675);
    e.rlp = u, Object.assign(e, a), i(r(46649), e), i(r(30248), e), i(r(91550), e), i(r(86232), e), i(r(77124), e), i(r(81113), e);
  },
  81113: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.defineProperties = void 0;
    var i = r(69282);
    var o = r(80884);
    var a = r(51675);
    var s = r(77124);
    e.defineProperties = function(t, e, r) {
      if (t.raw = [], t._fields = [], t.toJSON = function(e) {
        if (void 0 === e && (e = !1), e) {
          var r = {};
          return t._fields.forEach((function(e) {
            r[e] = "0x" + t[e].toString('hex');
          })), r;
        }
        return s.baToJSON(t.raw);
      }, t.serialize = function() {
        return a.encode(t.raw);
      }, e.forEach((function(e, r) {
        function o() {
          return t.raw[r];
        }
        function a(o) {
          '00' !== (o = s.toBuffer(o)).toString('hex') || e.allowZero || (o = n.allocUnsafe(0)), e.allowLess && e.length ? (o = s.stripZeros(o), 
          i(e.length >= o.length, "The field " + e.name + " must not have more " + e.length + " bytes")) : e.allowZero && 0 === o.length || !e.length || i(e.length === o.length, "The field " + e.name + " must have byte length of " + e.length), 
          t.raw[r] = o;
        }
        t._fields.push(e.name), Object.defineProperty(t, e.name, {
          enumerable: !0,
          configurable: !0,
          get: o,
          set: a
        }), e.default && (t[e.name] = e.default), e.alias && Object.defineProperty(t, e.alias, {
          enumerable: !1,
          configurable: !0,
          set: a,
          get: o
        });
      })), r) if ('string' == typeof r && (r = n.from(o.stripHexPrefix(r), 'hex')), n.isBuffer(r) && (r = a.decode(r)), Array.isArray(r)) {
        if (r.length > t._fields.length) throw new Error('wrong number of fields in data');
        r.forEach((function(e, r) {
          t[t._fields[r]] = s.toBuffer(e);
        }));
      } else {
        if ('object' != typeof r) throw new Error('invalid data');
        var u = Object.keys(r);
        e.forEach((function(e) {
          -1 !== u.indexOf(e.name) && (t[e.name] = r[e.name]), -1 !== u.indexOf(e.alias) && (t[e.alias] = r[e.alias]);
        }));
      }
    };
  },
  83230: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.ecdhUnsafe = e.ecdh = e.recover = e.verify = e.sign = e.signatureImportLax = e.signatureImport = e.signatureExport = e.signatureNormalize = e.publicKeyCombine = e.publicKeyTweakMul = e.publicKeyTweakAdd = e.publicKeyVerify = e.publicKeyConvert = e.publicKeyCreate = e.privateKeyTweakMul = e.privateKeyTweakAdd = e.privateKeyModInverse = e.privateKeyNegate = e.privateKeyImport = e.privateKeyExport = e.privateKeyVerify = void 0;
    var i = r(95053);
    var o = r(78427);
    var a = r(33646);
    e.privateKeyVerify = function(t) {
      return 32 === t.length && i.privateKeyVerify(Uint8Array.from(t));
    }, e.privateKeyExport = function(t, e) {
      if (32 !== t.length) throw new RangeError('private key length is invalid');
      var r = o.privateKeyExport(t, e);
      return a.privateKeyExport(t, r, e);
    }, e.privateKeyImport = function(t) {
      if (null !== (t = a.privateKeyImport(t)) && 32 === t.length && e.privateKeyVerify(t)) return t;
      throw new Error("couldn't import from DER format");
    }, e.privateKeyNegate = function(t) {
      return n.from(i.privateKeyNegate(Uint8Array.from(t)));
    }, e.privateKeyModInverse = function(t) {
      if (32 !== t.length) throw new Error('private key length is invalid');
      return n.from(o.privateKeyModInverse(Uint8Array.from(t)));
    }, e.privateKeyTweakAdd = function(t, e) {
      return n.from(i.privateKeyTweakAdd(Uint8Array.from(t), e));
    }, e.privateKeyTweakMul = function(t, e) {
      return n.from(i.privateKeyTweakMul(Uint8Array.from(t), Uint8Array.from(e)));
    }, e.publicKeyCreate = function(t, e) {
      return n.from(i.publicKeyCreate(Uint8Array.from(t), e));
    }, e.publicKeyConvert = function(t, e) {
      return n.from(i.publicKeyConvert(Uint8Array.from(t), e));
    }, e.publicKeyVerify = function(t) {
      return (33 === t.length || 65 === t.length) && i.publicKeyVerify(Uint8Array.from(t));
    }, e.publicKeyTweakAdd = function(t, e, r) {
      return n.from(i.publicKeyTweakAdd(Uint8Array.from(t), Uint8Array.from(e), r));
    }, e.publicKeyTweakMul = function(t, e, r) {
      return n.from(i.publicKeyTweakMul(Uint8Array.from(t), Uint8Array.from(e), r));
    }, e.publicKeyCombine = function(t, e) {
      var r = [];
      return t.forEach((function(t) {
        r.push(Uint8Array.from(t));
      })), n.from(i.publicKeyCombine(r, e));
    }, e.signatureNormalize = function(t) {
      return n.from(i.signatureNormalize(Uint8Array.from(t)));
    }, e.signatureExport = function(t) {
      return n.from(i.signatureExport(Uint8Array.from(t)));
    }, e.signatureImport = function(t) {
      return n.from(i.signatureImport(Uint8Array.from(t)));
    }, e.signatureImportLax = function(t) {
      if (0 === t.length) throw new RangeError('signature length is invalid');
      var e = a.signatureImportLax(t);
      if (null === e) throw new Error("couldn't parse DER signature");
      return o.signatureImport(e);
    }, e.sign = function(t, e, r) {
      if (null === r) throw new TypeError('options should be an Object');
      var o = void 0;
      if (r) {
        if (o = {}, null === r.data) throw new TypeError('options.data should be a Buffer');
        if (r.data) {
          if (32 != r.data.length) throw new RangeError('options.data length is invalid');
          o.data = new Uint8Array(r.data);
        }
        if (null === r.noncefn) throw new TypeError('options.noncefn should be a Function');
        r.noncefn && (o.noncefn = function(t, e, i, o, a) {
          var s = null != i ? n.from(i) : null;
          var u = null != o ? n.from(o) : null;
          var h = n.from('');
          return r.noncefn && (h = r.noncefn(n.from(t), n.from(e), s, u, a)), new Uint8Array(h);
        });
      }
      var a = i.ecdsaSign(Uint8Array.from(t), Uint8Array.from(e), o);
      return {
        signature: n.from(a.signature),
        recovery: a.recid
      };
    }, e.verify = function(t, e, r) {
      return i.ecdsaVerify(Uint8Array.from(e), Uint8Array.from(t), r);
    }, e.recover = function(t, e, r, o) {
      return n.from(i.ecdsaRecover(Uint8Array.from(e), r, Uint8Array.from(t), o));
    }, e.ecdh = function(t, e) {
      return n.from(i.ecdh(Uint8Array.from(t), Uint8Array.from(e), {}));
    }, e.ecdhUnsafe = function(t, e, r) {
      if (33 !== t.length && 65 !== t.length) throw new RangeError('public key length is invalid');
      if (32 !== e.length) throw new RangeError('private key length is invalid');
      return n.from(o.ecdhUnsafe(Uint8Array.from(t), Uint8Array.from(e), r));
    };
  },
  33646: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    });
    var i = n.from([ 48, 129, 211, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 133, 48, 129, 130, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 33, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 36, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    var o = n.from([ 48, 130, 1, 19, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 165, 48, 129, 162, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 65, 4, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 72, 58, 218, 119, 38, 163, 196, 101, 93, 164, 251, 252, 14, 17, 8, 168, 253, 23, 180, 72, 166, 133, 84, 25, 156, 71, 208, 143, 251, 16, 212, 184, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 68, 3, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    e.privateKeyExport = function(t, e, r) {
      void 0 === r && (r = !0);
      var a = n.from(r ? i : o);
      return t.copy(a, r ? 8 : 9), e.copy(a, r ? 181 : 214), a;
    }, e.privateKeyImport = function(t) {
      var e = t.length;
      var r = 0;
      if (e < r + 1 || 48 !== t[r]) return null;
      if (e < (r += 1) + 1 || !(128 & t[r])) return null;
      var n = 127 & t[r];
      if (n < 1 || n > 2) return null;
      if (e < (r += 1) + n) return null;
      var i = t[r + n - 1] | (n > 1 ? t[r + n - 2] << 8 : 0);
      return e < (r += n) + i || e < r + 3 || 2 !== t[r] || 1 !== t[r + 1] || 1 !== t[r + 2] || e < (r += 3) + 2 || 4 !== t[r] || t[r + 1] > 32 || e < r + 2 + t[r + 1] ? null : t.slice(r + 2, r + 2 + t[r + 1]);
    }, e.signatureImportLax = function(t) {
      var e = n.alloc(32, 0);
      var r = n.alloc(32, 0);
      var i = t.length;
      var o = 0;
      if (48 !== t[o++]) return null;
      var a = t[o++];
      if (128 & a && (o += a - 128) > i) return null;
      if (2 !== t[o++]) return null;
      var s = t[o++];
      if (128 & s) {
        if (o + (a = s - 128) > i) return null;
        for (;a > 0 && 0 === t[o]; o += 1, a -= 1) ;
        for (s = 0; a > 0; o += 1, a -= 1) s = (s << 8) + t[o];
      }
      if (s > i - o) return null;
      var u = o;
      if (o += s, 2 !== t[o++]) return null;
      var h = t[o++];
      if (128 & h) {
        if (o + (a = h - 128) > i) return null;
        for (;a > 0 && 0 === t[o]; o += 1, a -= 1) ;
        for (h = 0; a > 0; o += 1, a -= 1) h = (h << 8) + t[o];
      }
      if (h > i - o) return null;
      var l = o;
      for (o += h; s > 0 && 0 === t[u]; s -= 1, u += 1) ;
      if (s > 32) return null;
      var c = t.slice(u, u + s);
      for (c.copy(e, 32 - c.length); h > 0 && 0 === t[l]; h -= 1, l += 1) ;
      if (h > 32) return null;
      var f = t.slice(l, l + h);
      return f.copy(r, 32 - f.length), {
        r: e,
        s: r
      };
    };
  },
  78427: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    });
    var i = r(91609);
    var o = new (0, r(86266).ec)('secp256k1');
    var a = o.curve;
    e.privateKeyExport = function(t, e) {
      void 0 === e && (e = !0);
      var r = new i(t);
      if (r.ucmp(a.n) >= 0) throw new Error("couldn't export to DER format");
      var n = o.g.mul(r);
      return s(n.getX(), n.getY(), e);
    }, e.privateKeyModInverse = function(t) {
      var e = new i(t);
      if (e.ucmp(a.n) >= 0 || e.isZero()) throw new Error('private key range is invalid');
      return e.invm(a.n).toArrayLike(n, 'be', 32);
    }, e.signatureImport = function(t) {
      var e = new i(t.r);
      e.ucmp(a.n) >= 0 && (e = new i(0));
      var r = new i(t.s);
      return r.ucmp(a.n) >= 0 && (r = new i(0)), n.concat([ e.toArrayLike(n, 'be', 32), r.toArrayLike(n, 'be', 32) ]);
    }, e.ecdhUnsafe = function(t, e, r) {
      void 0 === r && (r = !0);
      var n = o.keyFromPublic(t);
      var u = new i(e);
      if (u.ucmp(a.n) >= 0 || u.isZero()) throw new Error('scalar was invalid (zero or overflow)');
      var h = n.pub.mul(u);
      return s(h.getX(), h.getY(), r);
    };
    var s = function(t, e, r) {
      var i;
      return r ? ((i = n.alloc(33))[0] = e.isOdd() ? 3 : 2, t.toArrayLike(n, 'be', 32).copy(i, 1)) : ((i = n.alloc(65))[0] = 4, 
      t.toArrayLike(n, 'be', 32).copy(i, 1), e.toArrayLike(n, 'be', 32).copy(i, 33)), i;
    };
  },
  86232: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.hashPersonalMessage = e.isValidSignature = e.fromRpcSig = e.toRpcSig = e.ecrecover = e.ecsign = void 0;
    var i = r(83230);
    var o = r(91609);
    var a = r(77124);
    var s = r(91550);
    function u(t, e) {
      return e ? t - (2 * e + 35) : t - 27;
    }
    function h(t) {
      return 0 === t || 1 === t;
    }
    e.ecsign = function(t, e, r) {
      var n = i.sign(t, e);
      var o = n.recovery;
      return {
        r: n.signature.slice(0, 32),
        s: n.signature.slice(32, 64),
        v: r ? o + (2 * r + 35) : o + 27
      };
    }, e.ecrecover = function(t, e, r, o, s) {
      var l = n.concat([ a.setLength(r, 32), a.setLength(o, 32) ], 64);
      var c = u(e, s);
      if (!h(c)) throw new Error('Invalid signature v value');
      var f = i.recover(t, l, c);
      return i.publicKeyConvert(f, !1).slice(1);
    }, e.toRpcSig = function(t, e, r, i) {
      if (!h(u(t, i))) throw new Error('Invalid signature v value');
      return a.bufferToHex(n.concat([ a.setLengthLeft(e, 32), a.setLengthLeft(r, 32), a.toBuffer(t) ]));
    }, e.fromRpcSig = function(t) {
      var e = a.toBuffer(t);
      if (65 !== e.length) throw new Error('Invalid signature length');
      var r = e[64];
      return r < 27 && (r += 27), {
        v: r,
        r: e.slice(0, 32),
        s: e.slice(32, 64)
      };
    }, e.isValidSignature = function(t, e, r, n, i) {
      void 0 === n && (n = !0);
      var a = new o('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
      var s = new o('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
      if (32 !== e.length || 32 !== r.length) return !1;
      if (!h(u(t, i))) return !1;
      var l = new o(e);
      var c = new o(r);
      return !(l.isZero() || l.gt(s) || c.isZero() || c.gt(s)) && (!n || 1 !== c.cmp(a));
    }, e.hashPersonalMessage = function(t) {
      var e = n.from("Ethereum Signed Message:\n" + t.length.toString(), 'utf-8');
      return s.keccak(n.concat([ e, t ]));
    };
  },
  29847: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(97754);
    var o = r(42696);
    var a = i.BN;
    var s = new a('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var u = function() {
      function t(e) {
        !function(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), e = e || {};
        var r = [ {
          name: 'nonce',
          length: 32,
          allowLess: !0,
          default: new n([])
        }, {
          name: 'gasPrice',
          length: 32,
          allowLess: !0,
          default: new n([])
        }, {
          name: 'gasLimit',
          alias: 'gas',
          length: 32,
          allowLess: !0,
          default: new n([])
        }, {
          name: 'to',
          allowZero: !0,
          length: 20,
          default: new n([])
        }, {
          name: 'value',
          length: 32,
          allowLess: !0,
          default: new n([])
        }, {
          name: 'data',
          alias: 'input',
          allowZero: !0,
          default: new n([])
        }, {
          name: 'v',
          allowZero: !0,
          default: new n([ 28 ])
        }, {
          name: 'r',
          length: 32,
          allowZero: !0,
          allowLess: !0,
          default: new n([])
        }, {
          name: 's',
          length: 32,
          allowZero: !0,
          allowLess: !0,
          default: new n([])
        } ];
        i.defineProperties(this, r, e), Object.defineProperty(this, 'from', {
          enumerable: !0,
          configurable: !0,
          get: this.getSenderAddress.bind(this)
        });
        var o = i.bufferToInt(this.v);
        var a = Math.floor((o - 35) / 2);
        a < 0 && (a = 0), this._chainId = a || e.chainId || 0, this._homestead = !0;
      }
      return t.prototype.toCreationAddress = function() {
        return '' === this.to.toString('hex');
      }, t.prototype.hash = function(t) {
        void 0 === t && (t = !0);
        var e = void 0;
        if (t) e = this.raw; else if (this._chainId > 0) {
          var r = this.raw.slice();
          this.v = this._chainId, this.r = 0, this.s = 0, e = this.raw, this.raw = r;
        } else e = this.raw.slice(0, 6);
        return i.rlphash(e);
      }, t.prototype.getChainId = function() {
        return this._chainId;
      }, t.prototype.getSenderAddress = function() {
        if (this._from) return this._from;
        var t = this.getSenderPublicKey();
        return this._from = i.publicToAddress(t), this._from;
      }, t.prototype.getSenderPublicKey = function() {
        if (!(this._senderPubKey && this._senderPubKey.length || this.verifySignature())) throw new Error('Invalid Signature');
        return this._senderPubKey;
      }, t.prototype.verifySignature = function() {
        var t = this.hash(!1);
        if (this._homestead && 1 === new a(this.s).cmp(s)) return !1;
        try {
          var e = i.bufferToInt(this.v);
          this._chainId > 0 && (e -= 2 * this._chainId + 8), this._senderPubKey = i.ecrecover(t, e, this.r, this.s);
        } catch (r) {
          return !1;
        }
        return !!this._senderPubKey;
      }, t.prototype.sign = function(t) {
        var e = this.hash(!1);
        var r = i.ecsign(e, t);
        this._chainId > 0 && (r.v += 2 * this._chainId + 8), Object.assign(this, r);
      }, t.prototype.getDataFee = function() {
        var t = this.raw[5];
        var e = new a(0);
        for (var r = 0; r < t.length; r++) 0 === t[r] ? e.iaddn(o.txDataZeroGas.v) : e.iaddn(o.txDataNonZeroGas.v);
        return e;
      }, t.prototype.getBaseFee = function() {
        var t = this.getDataFee().iaddn(o.txGas.v);
        return this._homestead && this.toCreationAddress() && t.iaddn(o.txCreation.v), t;
      }, t.prototype.getUpfrontCost = function() {
        return new a(this.gasLimit).imul(new a(this.gasPrice)).iadd(new a(this.value));
      }, t.prototype.validate = function(t) {
        var e = [];
        return this.verifySignature() || e.push('Invalid Signature'), this.getBaseFee().cmp(new a(this.gasLimit)) > 0 && e.push([ 'gas limit is too low. Need at least ' + this.getBaseFee() ]), 
        void 0 === t || !1 === t ? 0 === e.length : e.join(' ');
      }, t;
    }();
    t.exports = u;
  },
  97771: function(t, e, r) {
    !function(t, e) {
      'use strict';
      function n(t, e) {
        if (!t) throw new Error(e || 'Assertion failed');
      }
      function i(t, e) {
        t.super_ = e;
        var r = function() {};
        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
      }
      function o(t, e, r) {
        if (o.isBN(t)) return t;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ('le' !== e && 'be' !== e || (r = e, 
        e = 10), this._init(t || 0, e || 10, r || 'be'));
      }
      var a;
      'object' == typeof t ? t.exports = o : e.BN = o, o.BN = o, o.wordSize = 26;
      try {
        a = 'undefined' != typeof window && void 0 !== window.Buffer ? window.Buffer : r(40194).Buffer;
      } catch (A) {}
      function s(t, e) {
        var r = t.charCodeAt(e);
        return r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : r - 48 & 15;
      }
      function u(t, e, r) {
        var n = s(t, r);
        return r - 1 >= e && (n |= s(t, r - 1) << 4), n;
      }
      function h(t, e, r, n) {
        var i = 0;
        var o = Math.min(t.length, r);
        for (var a = e; a < o; a++) {
          var s = t.charCodeAt(a) - 48;
          i *= n, i += s >= 49 ? s - 49 + 10 : s >= 17 ? s - 17 + 10 : s;
        }
        return i;
      }
      o.isBN = function(t) {
        return t instanceof o || null !== t && 'object' == typeof t && t.constructor.wordSize === o.wordSize && Array.isArray(t.words);
      }, o.max = function(t, e) {
        return t.cmp(e) > 0 ? t : e;
      }, o.min = function(t, e) {
        return t.cmp(e) < 0 ? t : e;
      }, o.prototype._init = function(t, e, r) {
        if ('number' == typeof t) return this._initNumber(t, e, r);
        if ('object' == typeof t) return this._initArray(t, e, r);
        'hex' === e && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
        var i = 0;
        '-' === (t = t.toString().replace(/\s+/g, ''))[0] && (i++, this.negative = 1), i < t.length && (16 === e ? this._parseHex(t, i, r) : (this._parseBase(t, e, i), 
        'le' === r && this._initArray(this.toArray(), e, r)));
      }, o.prototype._initNumber = function(t, e, r) {
        t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [ 67108863 & t ], this.length = 1) : t < 4503599627370496 ? (this.words = [ 67108863 & t, t / 67108864 & 67108863 ], 
        this.length = 2) : (n(t < 9007199254740992), this.words = [ 67108863 & t, t / 67108864 & 67108863, 1 ], this.length = 3), 
        'le' === r && this._initArray(this.toArray(), e, r);
      }, o.prototype._initArray = function(t, e, r) {
        if (n('number' == typeof t.length), t.length <= 0) return this.words = [ 0 ], this.length = 1, this;
        this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) this.words[i] = 0;
        var o, a;
        var s = 0;
        if ('be' === r) for (i = t.length - 1, o = 0; i >= 0; i -= 3) a = t[i] | t[i - 1] << 8 | t[i - 2] << 16, this.words[o] |= a << s & 67108863, 
        this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++); else if ('le' === r) for (i = 0, o = 0; i < t.length; i += 3) a = t[i] | t[i + 1] << 8 | t[i + 2] << 16, 
        this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
        return this.strip();
      }, o.prototype._parseHex = function(t, e, r) {
        this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
        for (var n = 0; n < this.length; n++) this.words[n] = 0;
        var i = 0;
        var o = 0;
        var a;
        if ('be' === r) for (n = t.length - 1; n >= e; n -= 2) a = u(t, e, n) << i, this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, 
        o += 1, this.words[o] |= a >>> 26) : i += 8; else for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) a = u(t, e, n) << i, 
        this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, o += 1, this.words[o] |= a >>> 26) : i += 8;
        this.strip();
      }, o.prototype._parseBase = function(t, e, r) {
        this.words = [ 0 ], this.length = 1;
        for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
        n--, i = i / e | 0;
        var o = t.length - r;
        var a = o % n;
        var s = Math.min(o, o - a) + r;
        var u = 0;
        for (var l = r; l < s; l += n) u = h(t, l, l + n, e), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        if (0 !== a) {
          var c = 1;
          for (u = h(t, l, t.length, e), l = 0; l < a; l++) c *= e;
          this.imuln(c), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        }
        this.strip();
      }, o.prototype.copy = function(t) {
        t.words = new Array(this.length);
        for (var e = 0; e < this.length; e++) t.words[e] = this.words[e];
        t.length = this.length, t.negative = this.negative, t.red = this.red;
      }, o.prototype.clone = function() {
        var t = new o(null);
        return this.copy(t), t;
      }, o.prototype._expand = function(t) {
        for (;this.length < t; ) this.words[this.length++] = 0;
        return this;
      }, o.prototype.strip = function() {
        for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
        return this._normSign();
      }, o.prototype._normSign = function() {
        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
      }, o.prototype.inspect = function() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
      var l = [ '', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000' ];
      var c = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
      var f = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
      function d(t, e, r) {
        r.negative = e.negative ^ t.negative;
        var n = t.length + e.length | 0;
        r.length = n, n = n - 1 | 0;
        var i = 0 | t.words[0];
        var o = 0 | e.words[0];
        var a = i * o;
        var s = 67108863 & a;
        var u = a / 67108864 | 0;
        r.words[0] = s;
        for (var h = 1; h < n; h++) {
          var l = u >>> 26;
          var c = 67108863 & u;
          var f = Math.min(h, e.length - 1);
          for (var d = Math.max(0, h - t.length + 1); d <= f; d++) {
            var p = h - d | 0;
            l += (a = (i = 0 | t.words[p]) * (o = 0 | e.words[d]) + c) / 67108864 | 0, c = 67108863 & a;
          }
          r.words[h] = 0 | c, u = 0 | l;
        }
        return 0 !== u ? r.words[h] = 0 | u : r.length--, r.strip();
      }
      o.prototype.toString = function(t, e) {
        var r;
        if (e = 0 | e || 1, 16 === (t = t || 10) || 'hex' === t) {
          r = '';
          var i = 0;
          var o = 0;
          for (var a = 0; a < this.length; a++) {
            var s = this.words[a];
            var u = (16777215 & (s << i | o)).toString(16);
            r = 0 !== (o = s >>> 24 - i & 16777215) || a !== this.length - 1 ? l[6 - u.length] + u + r : u + r, (i += 2) >= 26 && (i -= 26, 
            a--);
          }
          for (0 !== o && (r = o.toString(16) + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        if (t === (0 | t) && t >= 2 && t <= 36) {
          var h = c[t];
          var d = f[t];
          r = '';
          var p = this.clone();
          for (p.negative = 0; !p.isZero(); ) {
            var m = p.modn(d).toString(t);
            r = (p = p.idivn(d)).isZero() ? m + r : l[h - m.length] + m + r;
          }
          for (this.isZero() && (r = '0' + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        n(!1, 'Base should be between 2 and 36');
      }, o.prototype.toNumber = function() {
        var t = this.words[0];
        return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, 'Number can only safely store up to 53 bits'), 
        0 !== this.negative ? -t : t;
      }, o.prototype.toJSON = function() {
        return this.toString(16);
      }, o.prototype.toBuffer = function(t, e) {
        return n(void 0 !== a), this.toArrayLike(a, t, e);
      }, o.prototype.toArray = function(t, e) {
        return this.toArrayLike(Array, t, e);
      }, o.prototype.toArrayLike = function(t, e, r) {
        var i = this.byteLength();
        var o = r || Math.max(1, i);
        n(i <= o, 'byte array longer than desired length'), n(o > 0, 'Requested array length <= 0'), this.strip();
        var a = 'le' === e;
        var s = new t(o);
        var u, h;
        var l = this.clone();
        if (a) {
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[h] = u;
          for (;h < o; h++) s[h] = 0;
        } else {
          for (h = 0; h < o - i; h++) s[h] = 0;
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[o - h - 1] = u;
        }
        return s;
      }, Math.clz32 ? o.prototype._countBits = function(t) {
        return 32 - Math.clz32(t);
      } : o.prototype._countBits = function(t) {
        var e = t;
        var r = 0;
        return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, e >>>= 4), e >= 2 && (r += 2, 
        e >>>= 2), r + e;
      }, o.prototype._zeroBits = function(t) {
        if (0 === t) return 26;
        var e = t;
        var r = 0;
        return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 0 == (15 & e) && (r += 4, e >>>= 4), 
        0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, r;
      }, o.prototype.bitLength = function() {
        var t = this.words[this.length - 1];
        var e = this._countBits(t);
        return 26 * (this.length - 1) + e;
      }, o.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        var t = 0;
        for (var e = 0; e < this.length; e++) {
          var r = this._zeroBits(this.words[e]);
          if (t += r, 26 !== r) break;
        }
        return t;
      }, o.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, o.prototype.toTwos = function(t) {
        return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
      }, o.prototype.fromTwos = function(t) {
        return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
      }, o.prototype.isNeg = function() {
        return 0 !== this.negative;
      }, o.prototype.neg = function() {
        return this.clone().ineg();
      }, o.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, o.prototype.iuor = function(t) {
        for (;this.length < t.length; ) this.words[this.length++] = 0;
        for (var e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
        return this.strip();
      }, o.prototype.ior = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuor(t);
      }, o.prototype.or = function(t) {
        return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
      }, o.prototype.uor = function(t) {
        return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
      }, o.prototype.iuand = function(t) {
        var e;
        e = this.length > t.length ? t : this;
        for (var r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
        return this.length = e.length, this.strip();
      }, o.prototype.iand = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuand(t);
      }, o.prototype.and = function(t) {
        return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
      }, o.prototype.uand = function(t) {
        return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
      }, o.prototype.iuxor = function(t) {
        var e;
        var r;
        this.length > t.length ? (e = this, r = t) : (e = t, r = this);
        for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
        if (this !== e) for (;n < e.length; n++) this.words[n] = e.words[n];
        return this.length = e.length, this.strip();
      }, o.prototype.ixor = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuxor(t);
      }, o.prototype.xor = function(t) {
        return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
      }, o.prototype.uxor = function(t) {
        return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
      }, o.prototype.inotn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = 0 | Math.ceil(t / 26);
        var r = t % 26;
        this._expand(e), r > 0 && e--;
        for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
        return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this.strip();
      }, o.prototype.notn = function(t) {
        return this.clone().inotn(t);
      }, o.prototype.setn = function(t, e) {
        n('number' == typeof t && t >= 0);
        var r = t / 26 | 0;
        var i = t % 26;
        return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this.strip();
      }, o.prototype.iadd = function(t) {
        var e;
        if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), this.negative ^= 1, this._normSign();
        if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), t.negative = 1, e._normSign();
        var r, n;
        this.length > t.length ? (r = this, n = t) : (r = t, n = this);
        var i = 0;
        for (var o = 0; o < n.length; o++) e = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        for (;0 !== i && o < r.length; o++) e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
        return this;
      }, o.prototype.add = function(t) {
        var e;
        return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, 
        e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
      }, o.prototype.isub = function(t) {
        if (0 !== t.negative) {
          t.negative = 0;
          var e = this.iadd(t);
          return t.negative = 1, e._normSign();
        }
        if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, this._normSign();
        var r = this.cmp(t);
        if (0 === r) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var n, i;
        r > 0 ? (n = this, i = t) : (n = t, i = this);
        var o = 0;
        for (var a = 0; a < i.length; a++) o = (e = (0 | n.words[a]) - (0 | i.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        for (;0 !== o && a < n.length; a++) o = (e = (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        if (0 === o && a < n.length && n !== this) for (;a < n.length; a++) this.words[a] = n.words[a];
        return this.length = Math.max(this.length, a), n !== this && (this.negative = 1), this.strip();
      }, o.prototype.sub = function(t) {
        return this.clone().isub(t);
      };
      var p = function(t, e, r) {
        var n = t.words;
        var i = e.words;
        var o = r.words;
        var a = 0;
        var s;
        var u;
        var h;
        var l = 0 | n[0];
        var c = 8191 & l;
        var f = l >>> 13;
        var d = 0 | n[1];
        var p = 8191 & d;
        var m = d >>> 13;
        var v = 0 | n[2];
        var g = 8191 & v;
        var y = v >>> 13;
        var w = 0 | n[3];
        var _ = 8191 & w;
        var M = w >>> 13;
        var b = 0 | n[4];
        var k = 8191 & b;
        var x = b >>> 13;
        var A = 0 | n[5];
        var E = 8191 & A;
        var S = A >>> 13;
        var R = 0 | n[6];
        var C = 8191 & R;
        var T = R >>> 13;
        var B = 0 | n[7];
        var L = 8191 & B;
        var P = B >>> 13;
        var I = 0 | n[8];
        var O = 8191 & I;
        var N = I >>> 13;
        var U = 0 | n[9];
        var q = 8191 & U;
        var j = U >>> 13;
        var K = 0 | i[0];
        var H = 8191 & K;
        var F = K >>> 13;
        var z = 0 | i[1];
        var D = 8191 & z;
        var Z = z >>> 13;
        var W = 0 | i[2];
        var V = 8191 & W;
        var $ = W >>> 13;
        var G = 0 | i[3];
        var Y = 8191 & G;
        var J = G >>> 13;
        var Q = 0 | i[4];
        var X = 8191 & Q;
        var tt = Q >>> 13;
        var et = 0 | i[5];
        var rt = 8191 & et;
        var nt = et >>> 13;
        var it = 0 | i[6];
        var ot = 8191 & it;
        var at = it >>> 13;
        var st = 0 | i[7];
        var ut = 8191 & st;
        var ht = st >>> 13;
        var lt = 0 | i[8];
        var ct = 8191 & lt;
        var ft = lt >>> 13;
        var dt = 0 | i[9];
        var pt = 8191 & dt;
        var mt = dt >>> 13;
        r.negative = t.negative ^ e.negative, r.length = 19;
        var vt = (a + (s = Math.imul(c, H)) | 0) + ((8191 & (u = (u = Math.imul(c, F)) + Math.imul(f, H) | 0)) << 13) | 0;
        a = ((h = Math.imul(f, F)) + (u >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, s = Math.imul(p, H), u = (u = Math.imul(p, F)) + Math.imul(m, H) | 0, 
        h = Math.imul(m, F);
        var gt = (a + (s = s + Math.imul(c, D) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, Z) | 0) + Math.imul(f, D) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, Z) | 0) + (u >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, s = Math.imul(g, H), u = (u = Math.imul(g, F)) + Math.imul(y, H) | 0, 
        h = Math.imul(y, F), s = s + Math.imul(p, D) | 0, u = (u = u + Math.imul(p, Z) | 0) + Math.imul(m, D) | 0, h = h + Math.imul(m, Z) | 0;
        var yt = (a + (s = s + Math.imul(c, V) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, $) | 0) + Math.imul(f, V) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, $) | 0) + (u >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, s = Math.imul(_, H), u = (u = Math.imul(_, F)) + Math.imul(M, H) | 0, 
        h = Math.imul(M, F), s = s + Math.imul(g, D) | 0, u = (u = u + Math.imul(g, Z) | 0) + Math.imul(y, D) | 0, h = h + Math.imul(y, Z) | 0, 
        s = s + Math.imul(p, V) | 0, u = (u = u + Math.imul(p, $) | 0) + Math.imul(m, V) | 0, h = h + Math.imul(m, $) | 0;
        var wt = (a + (s = s + Math.imul(c, Y) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, J) | 0) + Math.imul(f, Y) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, J) | 0) + (u >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, s = Math.imul(k, H), u = (u = Math.imul(k, F)) + Math.imul(x, H) | 0, 
        h = Math.imul(x, F), s = s + Math.imul(_, D) | 0, u = (u = u + Math.imul(_, Z) | 0) + Math.imul(M, D) | 0, h = h + Math.imul(M, Z) | 0, 
        s = s + Math.imul(g, V) | 0, u = (u = u + Math.imul(g, $) | 0) + Math.imul(y, V) | 0, h = h + Math.imul(y, $) | 0, s = s + Math.imul(p, Y) | 0, 
        u = (u = u + Math.imul(p, J) | 0) + Math.imul(m, Y) | 0, h = h + Math.imul(m, J) | 0;
        var _t = (a + (s = s + Math.imul(c, X) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, tt) | 0) + Math.imul(f, X) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, tt) | 0) + (u >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, s = Math.imul(E, H), u = (u = Math.imul(E, F)) + Math.imul(S, H) | 0, 
        h = Math.imul(S, F), s = s + Math.imul(k, D) | 0, u = (u = u + Math.imul(k, Z) | 0) + Math.imul(x, D) | 0, h = h + Math.imul(x, Z) | 0, 
        s = s + Math.imul(_, V) | 0, u = (u = u + Math.imul(_, $) | 0) + Math.imul(M, V) | 0, h = h + Math.imul(M, $) | 0, s = s + Math.imul(g, Y) | 0, 
        u = (u = u + Math.imul(g, J) | 0) + Math.imul(y, Y) | 0, h = h + Math.imul(y, J) | 0, s = s + Math.imul(p, X) | 0, u = (u = u + Math.imul(p, tt) | 0) + Math.imul(m, X) | 0, 
        h = h + Math.imul(m, tt) | 0;
        var Mt = (a + (s = s + Math.imul(c, rt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, nt) | 0) + Math.imul(f, rt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, nt) | 0) + (u >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, s = Math.imul(C, H), u = (u = Math.imul(C, F)) + Math.imul(T, H) | 0, 
        h = Math.imul(T, F), s = s + Math.imul(E, D) | 0, u = (u = u + Math.imul(E, Z) | 0) + Math.imul(S, D) | 0, h = h + Math.imul(S, Z) | 0, 
        s = s + Math.imul(k, V) | 0, u = (u = u + Math.imul(k, $) | 0) + Math.imul(x, V) | 0, h = h + Math.imul(x, $) | 0, s = s + Math.imul(_, Y) | 0, 
        u = (u = u + Math.imul(_, J) | 0) + Math.imul(M, Y) | 0, h = h + Math.imul(M, J) | 0, s = s + Math.imul(g, X) | 0, u = (u = u + Math.imul(g, tt) | 0) + Math.imul(y, X) | 0, 
        h = h + Math.imul(y, tt) | 0, s = s + Math.imul(p, rt) | 0, u = (u = u + Math.imul(p, nt) | 0) + Math.imul(m, rt) | 0, h = h + Math.imul(m, nt) | 0;
        var bt = (a + (s = s + Math.imul(c, ot) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, at) | 0) + Math.imul(f, ot) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, at) | 0) + (u >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, s = Math.imul(L, H), u = (u = Math.imul(L, F)) + Math.imul(P, H) | 0, 
        h = Math.imul(P, F), s = s + Math.imul(C, D) | 0, u = (u = u + Math.imul(C, Z) | 0) + Math.imul(T, D) | 0, h = h + Math.imul(T, Z) | 0, 
        s = s + Math.imul(E, V) | 0, u = (u = u + Math.imul(E, $) | 0) + Math.imul(S, V) | 0, h = h + Math.imul(S, $) | 0, s = s + Math.imul(k, Y) | 0, 
        u = (u = u + Math.imul(k, J) | 0) + Math.imul(x, Y) | 0, h = h + Math.imul(x, J) | 0, s = s + Math.imul(_, X) | 0, u = (u = u + Math.imul(_, tt) | 0) + Math.imul(M, X) | 0, 
        h = h + Math.imul(M, tt) | 0, s = s + Math.imul(g, rt) | 0, u = (u = u + Math.imul(g, nt) | 0) + Math.imul(y, rt) | 0, h = h + Math.imul(y, nt) | 0, 
        s = s + Math.imul(p, ot) | 0, u = (u = u + Math.imul(p, at) | 0) + Math.imul(m, ot) | 0, h = h + Math.imul(m, at) | 0;
        var kt = (a + (s = s + Math.imul(c, ut) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ht) | 0) + Math.imul(f, ut) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ht) | 0) + (u >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, s = Math.imul(O, H), u = (u = Math.imul(O, F)) + Math.imul(N, H) | 0, 
        h = Math.imul(N, F), s = s + Math.imul(L, D) | 0, u = (u = u + Math.imul(L, Z) | 0) + Math.imul(P, D) | 0, h = h + Math.imul(P, Z) | 0, 
        s = s + Math.imul(C, V) | 0, u = (u = u + Math.imul(C, $) | 0) + Math.imul(T, V) | 0, h = h + Math.imul(T, $) | 0, s = s + Math.imul(E, Y) | 0, 
        u = (u = u + Math.imul(E, J) | 0) + Math.imul(S, Y) | 0, h = h + Math.imul(S, J) | 0, s = s + Math.imul(k, X) | 0, u = (u = u + Math.imul(k, tt) | 0) + Math.imul(x, X) | 0, 
        h = h + Math.imul(x, tt) | 0, s = s + Math.imul(_, rt) | 0, u = (u = u + Math.imul(_, nt) | 0) + Math.imul(M, rt) | 0, h = h + Math.imul(M, nt) | 0, 
        s = s + Math.imul(g, ot) | 0, u = (u = u + Math.imul(g, at) | 0) + Math.imul(y, ot) | 0, h = h + Math.imul(y, at) | 0, s = s + Math.imul(p, ut) | 0, 
        u = (u = u + Math.imul(p, ht) | 0) + Math.imul(m, ut) | 0, h = h + Math.imul(m, ht) | 0;
        var xt = (a + (s = s + Math.imul(c, ct) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ft) | 0) + Math.imul(f, ct) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ft) | 0) + (u >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, s = Math.imul(q, H), u = (u = Math.imul(q, F)) + Math.imul(j, H) | 0, 
        h = Math.imul(j, F), s = s + Math.imul(O, D) | 0, u = (u = u + Math.imul(O, Z) | 0) + Math.imul(N, D) | 0, h = h + Math.imul(N, Z) | 0, 
        s = s + Math.imul(L, V) | 0, u = (u = u + Math.imul(L, $) | 0) + Math.imul(P, V) | 0, h = h + Math.imul(P, $) | 0, s = s + Math.imul(C, Y) | 0, 
        u = (u = u + Math.imul(C, J) | 0) + Math.imul(T, Y) | 0, h = h + Math.imul(T, J) | 0, s = s + Math.imul(E, X) | 0, u = (u = u + Math.imul(E, tt) | 0) + Math.imul(S, X) | 0, 
        h = h + Math.imul(S, tt) | 0, s = s + Math.imul(k, rt) | 0, u = (u = u + Math.imul(k, nt) | 0) + Math.imul(x, rt) | 0, h = h + Math.imul(x, nt) | 0, 
        s = s + Math.imul(_, ot) | 0, u = (u = u + Math.imul(_, at) | 0) + Math.imul(M, ot) | 0, h = h + Math.imul(M, at) | 0, s = s + Math.imul(g, ut) | 0, 
        u = (u = u + Math.imul(g, ht) | 0) + Math.imul(y, ut) | 0, h = h + Math.imul(y, ht) | 0, s = s + Math.imul(p, ct) | 0, u = (u = u + Math.imul(p, ft) | 0) + Math.imul(m, ct) | 0, 
        h = h + Math.imul(m, ft) | 0;
        var At = (a + (s = s + Math.imul(c, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, mt) | 0) + Math.imul(f, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, mt) | 0) + (u >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, s = Math.imul(q, D), u = (u = Math.imul(q, Z)) + Math.imul(j, D) | 0, 
        h = Math.imul(j, Z), s = s + Math.imul(O, V) | 0, u = (u = u + Math.imul(O, $) | 0) + Math.imul(N, V) | 0, h = h + Math.imul(N, $) | 0, 
        s = s + Math.imul(L, Y) | 0, u = (u = u + Math.imul(L, J) | 0) + Math.imul(P, Y) | 0, h = h + Math.imul(P, J) | 0, s = s + Math.imul(C, X) | 0, 
        u = (u = u + Math.imul(C, tt) | 0) + Math.imul(T, X) | 0, h = h + Math.imul(T, tt) | 0, s = s + Math.imul(E, rt) | 0, u = (u = u + Math.imul(E, nt) | 0) + Math.imul(S, rt) | 0, 
        h = h + Math.imul(S, nt) | 0, s = s + Math.imul(k, ot) | 0, u = (u = u + Math.imul(k, at) | 0) + Math.imul(x, ot) | 0, h = h + Math.imul(x, at) | 0, 
        s = s + Math.imul(_, ut) | 0, u = (u = u + Math.imul(_, ht) | 0) + Math.imul(M, ut) | 0, h = h + Math.imul(M, ht) | 0, s = s + Math.imul(g, ct) | 0, 
        u = (u = u + Math.imul(g, ft) | 0) + Math.imul(y, ct) | 0, h = h + Math.imul(y, ft) | 0;
        var Et = (a + (s = s + Math.imul(p, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(p, mt) | 0) + Math.imul(m, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(m, mt) | 0) + (u >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, s = Math.imul(q, V), u = (u = Math.imul(q, $)) + Math.imul(j, V) | 0, 
        h = Math.imul(j, $), s = s + Math.imul(O, Y) | 0, u = (u = u + Math.imul(O, J) | 0) + Math.imul(N, Y) | 0, h = h + Math.imul(N, J) | 0, 
        s = s + Math.imul(L, X) | 0, u = (u = u + Math.imul(L, tt) | 0) + Math.imul(P, X) | 0, h = h + Math.imul(P, tt) | 0, s = s + Math.imul(C, rt) | 0, 
        u = (u = u + Math.imul(C, nt) | 0) + Math.imul(T, rt) | 0, h = h + Math.imul(T, nt) | 0, s = s + Math.imul(E, ot) | 0, u = (u = u + Math.imul(E, at) | 0) + Math.imul(S, ot) | 0, 
        h = h + Math.imul(S, at) | 0, s = s + Math.imul(k, ut) | 0, u = (u = u + Math.imul(k, ht) | 0) + Math.imul(x, ut) | 0, h = h + Math.imul(x, ht) | 0, 
        s = s + Math.imul(_, ct) | 0, u = (u = u + Math.imul(_, ft) | 0) + Math.imul(M, ct) | 0, h = h + Math.imul(M, ft) | 0;
        var St = (a + (s = s + Math.imul(g, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(g, mt) | 0) + Math.imul(y, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(y, mt) | 0) + (u >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, s = Math.imul(q, Y), u = (u = Math.imul(q, J)) + Math.imul(j, Y) | 0, 
        h = Math.imul(j, J), s = s + Math.imul(O, X) | 0, u = (u = u + Math.imul(O, tt) | 0) + Math.imul(N, X) | 0, h = h + Math.imul(N, tt) | 0, 
        s = s + Math.imul(L, rt) | 0, u = (u = u + Math.imul(L, nt) | 0) + Math.imul(P, rt) | 0, h = h + Math.imul(P, nt) | 0, s = s + Math.imul(C, ot) | 0, 
        u = (u = u + Math.imul(C, at) | 0) + Math.imul(T, ot) | 0, h = h + Math.imul(T, at) | 0, s = s + Math.imul(E, ut) | 0, u = (u = u + Math.imul(E, ht) | 0) + Math.imul(S, ut) | 0, 
        h = h + Math.imul(S, ht) | 0, s = s + Math.imul(k, ct) | 0, u = (u = u + Math.imul(k, ft) | 0) + Math.imul(x, ct) | 0, h = h + Math.imul(x, ft) | 0;
        var Rt = (a + (s = s + Math.imul(_, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(_, mt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(M, mt) | 0) + (u >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, s = Math.imul(q, X), u = (u = Math.imul(q, tt)) + Math.imul(j, X) | 0, 
        h = Math.imul(j, tt), s = s + Math.imul(O, rt) | 0, u = (u = u + Math.imul(O, nt) | 0) + Math.imul(N, rt) | 0, h = h + Math.imul(N, nt) | 0, 
        s = s + Math.imul(L, ot) | 0, u = (u = u + Math.imul(L, at) | 0) + Math.imul(P, ot) | 0, h = h + Math.imul(P, at) | 0, s = s + Math.imul(C, ut) | 0, 
        u = (u = u + Math.imul(C, ht) | 0) + Math.imul(T, ut) | 0, h = h + Math.imul(T, ht) | 0, s = s + Math.imul(E, ct) | 0, u = (u = u + Math.imul(E, ft) | 0) + Math.imul(S, ct) | 0, 
        h = h + Math.imul(S, ft) | 0;
        var Ct = (a + (s = s + Math.imul(k, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(k, mt) | 0) + Math.imul(x, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(x, mt) | 0) + (u >>> 13) | 0) + (Ct >>> 26) | 0, Ct &= 67108863, s = Math.imul(q, rt), u = (u = Math.imul(q, nt)) + Math.imul(j, rt) | 0, 
        h = Math.imul(j, nt), s = s + Math.imul(O, ot) | 0, u = (u = u + Math.imul(O, at) | 0) + Math.imul(N, ot) | 0, h = h + Math.imul(N, at) | 0, 
        s = s + Math.imul(L, ut) | 0, u = (u = u + Math.imul(L, ht) | 0) + Math.imul(P, ut) | 0, h = h + Math.imul(P, ht) | 0, s = s + Math.imul(C, ct) | 0, 
        u = (u = u + Math.imul(C, ft) | 0) + Math.imul(T, ct) | 0, h = h + Math.imul(T, ft) | 0;
        var Tt = (a + (s = s + Math.imul(E, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(E, mt) | 0) + Math.imul(S, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(S, mt) | 0) + (u >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, s = Math.imul(q, ot), u = (u = Math.imul(q, at)) + Math.imul(j, ot) | 0, 
        h = Math.imul(j, at), s = s + Math.imul(O, ut) | 0, u = (u = u + Math.imul(O, ht) | 0) + Math.imul(N, ut) | 0, h = h + Math.imul(N, ht) | 0, 
        s = s + Math.imul(L, ct) | 0, u = (u = u + Math.imul(L, ft) | 0) + Math.imul(P, ct) | 0, h = h + Math.imul(P, ft) | 0;
        var Bt = (a + (s = s + Math.imul(C, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(C, mt) | 0) + Math.imul(T, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(T, mt) | 0) + (u >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863, s = Math.imul(q, ut), u = (u = Math.imul(q, ht)) + Math.imul(j, ut) | 0, 
        h = Math.imul(j, ht), s = s + Math.imul(O, ct) | 0, u = (u = u + Math.imul(O, ft) | 0) + Math.imul(N, ct) | 0, h = h + Math.imul(N, ft) | 0;
        var Lt = (a + (s = s + Math.imul(L, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(L, mt) | 0) + Math.imul(P, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(P, mt) | 0) + (u >>> 13) | 0) + (Lt >>> 26) | 0, Lt &= 67108863, s = Math.imul(q, ct), u = (u = Math.imul(q, ft)) + Math.imul(j, ct) | 0, 
        h = Math.imul(j, ft);
        var Pt = (a + (s = s + Math.imul(O, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(O, mt) | 0) + Math.imul(N, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(N, mt) | 0) + (u >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863;
        var It = (a + (s = Math.imul(q, pt)) | 0) + ((8191 & (u = (u = Math.imul(q, mt)) + Math.imul(j, pt) | 0)) << 13) | 0;
        return a = ((h = Math.imul(j, mt)) + (u >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, o[0] = vt, o[1] = gt, o[2] = yt, 
        o[3] = wt, o[4] = _t, o[5] = Mt, o[6] = bt, o[7] = kt, o[8] = xt, o[9] = At, o[10] = Et, o[11] = St, o[12] = Rt, o[13] = Ct, 
        o[14] = Tt, o[15] = Bt, o[16] = Lt, o[17] = Pt, o[18] = It, 0 !== a && (o[19] = a, r.length++), r;
      };
      function m(t, e, r) {
        return (new v).mulp(t, e, r);
      }
      function v(t, e) {
        this.x = t, this.y = e;
      }
      Math.imul || (p = d), o.prototype.mulTo = function(t, e) {
        var r;
        var n = this.length + t.length;
        return r = 10 === this.length && 10 === t.length ? p(this, t, e) : n < 63 ? d(this, t, e) : n < 1024 ? function(t, e, r) {
          r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
          var n = 0;
          var i = 0;
          for (var o = 0; o < r.length - 1; o++) {
            var a = i;
            i = 0;
            var s = 67108863 & n;
            var u = Math.min(o, e.length - 1);
            for (var h = Math.max(0, o - t.length + 1); h <= u; h++) {
              var l = o - h;
              var c = (0 | t.words[l]) * (0 | e.words[h]);
              var f = 67108863 & c;
              s = 67108863 & (f = f + s | 0), i += (a = (a = a + (c / 67108864 | 0) | 0) + (f >>> 26) | 0) >>> 26, a &= 67108863;
            }
            r.words[o] = s, n = a, a = i;
          }
          return 0 !== n ? r.words[o] = n : r.length--, r.strip();
        }(this, t, e) : m(this, t, e), r;
      }, v.prototype.makeRBT = function(t) {
        var e = new Array(t);
        var r = o.prototype._countBits(t) - 1;
        for (var n = 0; n < t; n++) e[n] = this.revBin(n, r, t);
        return e;
      }, v.prototype.revBin = function(t, e, r) {
        if (0 === t || t === r - 1) return t;
        var n = 0;
        for (var i = 0; i < e; i++) n |= (1 & t) << e - i - 1, t >>= 1;
        return n;
      }, v.prototype.permute = function(t, e, r, n, i, o) {
        for (var a = 0; a < o; a++) n[a] = e[t[a]], i[a] = r[t[a]];
      }, v.prototype.transform = function(t, e, r, n, i, o) {
        this.permute(o, t, e, r, n, i);
        for (var a = 1; a < i; a <<= 1) {
          var s = a << 1;
          var u = Math.cos(2 * Math.PI / s);
          var h = Math.sin(2 * Math.PI / s);
          for (var l = 0; l < i; l += s) {
            var c = u;
            var f = h;
            for (var d = 0; d < a; d++) {
              var p = r[l + d];
              var m = n[l + d];
              var v = r[l + d + a];
              var g = n[l + d + a];
              var y = c * v - f * g;
              g = c * g + f * v, v = y, r[l + d] = p + v, n[l + d] = m + g, r[l + d + a] = p - v, n[l + d + a] = m - g, d !== s && (y = u * c - h * f, 
              f = u * f + h * c, c = y);
            }
          }
        }
      }, v.prototype.guessLen13b = function(t, e) {
        var r = 1 | Math.max(e, t);
        var n = 1 & r;
        var i = 0;
        for (r = r / 2 | 0; r; r >>>= 1) i++;
        return 1 << i + 1 + n;
      }, v.prototype.conjugate = function(t, e, r) {
        if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
          var i = t[n];
          t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
        }
      }, v.prototype.normalize13b = function(t, e) {
        var r = 0;
        for (var n = 0; n < e / 2; n++) {
          var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
          t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
        }
        return t;
      }, v.prototype.convert13b = function(t, e, r, i) {
        var o = 0;
        for (var a = 0; a < e; a++) o += 0 | t[a], r[2 * a] = 8191 & o, o >>>= 13, r[2 * a + 1] = 8191 & o, o >>>= 13;
        for (a = 2 * e; a < i; ++a) r[a] = 0;
        n(0 === o), n(0 == (-8192 & o));
      }, v.prototype.stub = function(t) {
        var e = new Array(t);
        for (var r = 0; r < t; r++) e[r] = 0;
        return e;
      }, v.prototype.mulp = function(t, e, r) {
        var n = 2 * this.guessLen13b(t.length, e.length);
        var i = this.makeRBT(n);
        var o = this.stub(n);
        var a = new Array(n);
        var s = new Array(n);
        var u = new Array(n);
        var h = new Array(n);
        var l = new Array(n);
        var c = new Array(n);
        var f = r.words;
        f.length = n, this.convert13b(t.words, t.length, a, n), this.convert13b(e.words, e.length, h, n), this.transform(a, o, s, u, n, i), 
        this.transform(h, o, l, c, n, i);
        for (var d = 0; d < n; d++) {
          var p = s[d] * l[d] - u[d] * c[d];
          u[d] = s[d] * c[d] + u[d] * l[d], s[d] = p;
        }
        return this.conjugate(s, u, n), this.transform(s, u, f, o, n, i), this.conjugate(f, o, n), this.normalize13b(f, n), r.negative = t.negative ^ e.negative, 
        r.length = t.length + e.length, r.strip();
      }, o.prototype.mul = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), this.mulTo(t, e);
      }, o.prototype.mulf = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), m(this, t, e);
      }, o.prototype.imul = function(t) {
        return this.clone().mulTo(t, this);
      }, o.prototype.imuln = function(t) {
        n('number' == typeof t), n(t < 67108864);
        var e = 0;
        for (var r = 0; r < this.length; r++) {
          var i = (0 | this.words[r]) * t;
          var o = (67108863 & i) + (67108863 & e);
          e >>= 26, e += i / 67108864 | 0, e += o >>> 26, this.words[r] = 67108863 & o;
        }
        return 0 !== e && (this.words[r] = e, this.length++), this;
      }, o.prototype.muln = function(t) {
        return this.clone().imuln(t);
      }, o.prototype.sqr = function() {
        return this.mul(this);
      }, o.prototype.isqr = function() {
        return this.imul(this.clone());
      }, o.prototype.pow = function(t) {
        var e = function(t) {
          var e = new Array(t.bitLength());
          for (var r = 0; r < e.length; r++) {
            var n = r / 26 | 0;
            var i = r % 26;
            e[r] = (t.words[n] & 1 << i) >>> i;
          }
          return e;
        }(t);
        if (0 === e.length) return new o(1);
        var r = this;
        for (var n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr()) ;
        if (++n < e.length) for (var i = r.sqr(); n < e.length; n++, i = i.sqr()) 0 !== e[n] && (r = r.mul(i));
        return r;
      }, o.prototype.iushln = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 67108863 >>> 26 - e << 26 - e;
        var o;
        if (0 !== e) {
          var a = 0;
          for (o = 0; o < this.length; o++) {
            var s = this.words[o] & i;
            var u = (0 | this.words[o]) - s << e;
            this.words[o] = u | a, a = s >>> 26 - e;
          }
          a && (this.words[o] = a, this.length++);
        }
        if (0 !== r) {
          for (o = this.length - 1; o >= 0; o--) this.words[o + r] = this.words[o];
          for (o = 0; o < r; o++) this.words[o] = 0;
          this.length += r;
        }
        return this.strip();
      }, o.prototype.ishln = function(t) {
        return n(0 === this.negative), this.iushln(t);
      }, o.prototype.iushrn = function(t, e, r) {
        var i;
        n('number' == typeof t && t >= 0), i = e ? (e - e % 26) / 26 : 0;
        var o = t % 26;
        var a = Math.min((t - o) / 26, this.length);
        var s = 67108863 ^ 67108863 >>> o << o;
        var u = r;
        if (i -= a, i = Math.max(0, i), u) {
          for (var h = 0; h < a; h++) u.words[h] = this.words[h];
          u.length = a;
        }
        if (0 === a) ; else if (this.length > a) for (this.length -= a, h = 0; h < this.length; h++) this.words[h] = this.words[h + a]; else this.words[0] = 0, 
        this.length = 1;
        var l = 0;
        for (h = this.length - 1; h >= 0 && (0 !== l || h >= i); h--) {
          var c = 0 | this.words[h];
          this.words[h] = l << 26 - o | c >>> o, l = c & s;
        }
        return u && 0 !== l && (u.words[u.length++] = l), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
      }, o.prototype.ishrn = function(t, e, r) {
        return n(0 === this.negative), this.iushrn(t, e, r);
      }, o.prototype.shln = function(t) {
        return this.clone().ishln(t);
      }, o.prototype.ushln = function(t) {
        return this.clone().iushln(t);
      }, o.prototype.shrn = function(t) {
        return this.clone().ishrn(t);
      }, o.prototype.ushrn = function(t) {
        return this.clone().iushrn(t);
      }, o.prototype.testn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        return !(this.length <= r) && !!(this.words[r] & i);
      }, o.prototype.imaskn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        if (n(0 === this.negative, 'imaskn works only with positive numbers'), this.length <= r) return this;
        if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
          var i = 67108863 ^ 67108863 >>> e << e;
          this.words[this.length - 1] &= i;
        }
        return this.strip();
      }, o.prototype.maskn = function(t) {
        return this.clone().imaskn(t);
      }, o.prototype.iaddn = function(t) {
        return n('number' == typeof t), n(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < t ? (this.words[0] = t - (0 | this.words[0]), 
        this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, this) : this._iaddn(t);
      }, o.prototype._iaddn = function(t) {
        this.words[0] += t;
        for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) this.words[e] -= 67108864, e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
        return this.length = Math.max(this.length, e + 1), this;
      }, o.prototype.isubn = function(t) {
        if (n('number' == typeof t), n(t < 67108864), t < 0) return this.iaddn(-t);
        if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, this;
        if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var e = 0; e < this.length && this.words[e] < 0; e++) this.words[e] += 67108864, 
        this.words[e + 1] -= 1;
        return this.strip();
      }, o.prototype.addn = function(t) {
        return this.clone().iaddn(t);
      }, o.prototype.subn = function(t) {
        return this.clone().isubn(t);
      }, o.prototype.iabs = function() {
        return this.negative = 0, this;
      }, o.prototype.abs = function() {
        return this.clone().iabs();
      }, o.prototype._ishlnsubmul = function(t, e, r) {
        var i = t.length + r;
        var o;
        var a;
        this._expand(i);
        var s = 0;
        for (o = 0; o < t.length; o++) {
          a = (0 | this.words[o + r]) + s;
          var u = (0 | t.words[o]) * e;
          s = ((a -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[o + r] = 67108863 & a;
        }
        for (;o < this.length - r; o++) s = (a = (0 | this.words[o + r]) + s) >> 26, this.words[o + r] = 67108863 & a;
        if (0 === s) return this.strip();
        for (n(-1 === s), s = 0, o = 0; o < this.length; o++) s = (a = -(0 | this.words[o]) + s) >> 26, this.words[o] = 67108863 & a;
        return this.negative = 1, this.strip();
      }, o.prototype._wordDiv = function(t, e) {
        var r = (this.length, t.length);
        var n = this.clone();
        var i = t;
        var a = 0 | i.words[i.length - 1];
        0 !== (r = 26 - this._countBits(a)) && (i = i.ushln(r), n.iushln(r), a = 0 | i.words[i.length - 1]);
        var s = n.length - i.length;
        var u;
        if ('mod' !== e) {
          (u = new o(null)).length = s + 1, u.words = new Array(u.length);
          for (var h = 0; h < u.length; h++) u.words[h] = 0;
        }
        var l = n.clone()._ishlnsubmul(i, 1, s);
        0 === l.negative && (n = l, u && (u.words[s] = 1));
        for (var c = s - 1; c >= 0; c--) {
          var f = 67108864 * (0 | n.words[i.length + c]) + (0 | n.words[i.length + c - 1]);
          for (f = Math.min(f / a | 0, 67108863), n._ishlnsubmul(i, f, c); 0 !== n.negative; ) f--, n.negative = 0, n._ishlnsubmul(i, 1, c), 
          n.isZero() || (n.negative ^= 1);
          u && (u.words[c] = f);
        }
        return u && u.strip(), n.strip(), 'div' !== e && 0 !== r && n.iushrn(r), {
          div: u || null,
          mod: n
        };
      }, o.prototype.divmod = function(t, e, r) {
        return n(!t.isZero()), this.isZero() ? {
          div: new o(0),
          mod: new o(0)
        } : 0 !== this.negative && 0 === t.negative ? (s = this.neg().divmod(t, e), 'mod' !== e && (i = s.div.neg()), 'div' !== e && (a = s.mod.neg(), 
        r && 0 !== a.negative && a.iadd(t)), {
          div: i,
          mod: a
        }) : 0 === this.negative && 0 !== t.negative ? (s = this.divmod(t.neg(), e), 'mod' !== e && (i = s.div.neg()), {
          div: i,
          mod: s.mod
        }) : 0 != (this.negative & t.negative) ? (s = this.neg().divmod(t.neg(), e), 'div' !== e && (a = s.mod.neg(), r && 0 !== a.negative && a.isub(t)), 
        {
          div: s.div,
          mod: a
        }) : t.length > this.length || this.cmp(t) < 0 ? {
          div: new o(0),
          mod: this
        } : 1 === t.length ? 'div' === e ? {
          div: this.divn(t.words[0]),
          mod: null
        } : 'mod' === e ? {
          div: null,
          mod: new o(this.modn(t.words[0]))
        } : {
          div: this.divn(t.words[0]),
          mod: new o(this.modn(t.words[0]))
        } : this._wordDiv(t, e);
        var i, a, s;
      }, o.prototype.div = function(t) {
        return this.divmod(t, 'div', !1).div;
      }, o.prototype.mod = function(t) {
        return this.divmod(t, 'mod', !1).mod;
      }, o.prototype.umod = function(t) {
        return this.divmod(t, 'mod', !0).mod;
      }, o.prototype.divRound = function(t) {
        var e = this.divmod(t);
        if (e.mod.isZero()) return e.div;
        var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod;
        var n = t.ushrn(1);
        var i = t.andln(1);
        var o = r.cmp(n);
        return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
      }, o.prototype.modn = function(t) {
        n(t <= 67108863);
        var e = (1 << 26) % t;
        var r = 0;
        for (var i = this.length - 1; i >= 0; i--) r = (e * r + (0 | this.words[i])) % t;
        return r;
      }, o.prototype.idivn = function(t) {
        n(t <= 67108863);
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var i = (0 | this.words[r]) + 67108864 * e;
          this.words[r] = i / t | 0, e = i % t;
        }
        return this.strip();
      }, o.prototype.divn = function(t) {
        return this.clone().idivn(t);
      }, o.prototype.egcd = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = new o(0);
        var u = new o(1);
        var h = 0;
        for (;e.isEven() && r.isEven(); ) e.iushrn(1), r.iushrn(1), ++h;
        var l = r.clone();
        var c = e.clone();
        for (;!e.isZero(); ) {
          for (var f = 0, d = 1; 0 == (e.words[0] & d) && f < 26; ++f, d <<= 1) ;
          if (f > 0) for (e.iushrn(f); f-- > 0; ) (i.isOdd() || a.isOdd()) && (i.iadd(l), a.isub(c)), i.iushrn(1), a.iushrn(1);
          for (var p = 0, m = 1; 0 == (r.words[0] & m) && p < 26; ++p, m <<= 1) ;
          if (p > 0) for (r.iushrn(p); p-- > 0; ) (s.isOdd() || u.isOdd()) && (s.iadd(l), u.isub(c)), s.iushrn(1), u.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(s), a.isub(u)) : (r.isub(e), s.isub(i), u.isub(a));
        }
        return {
          a: s,
          b: u,
          gcd: r.iushln(h)
        };
      }, o.prototype._invmp = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = r.clone();
        for (;e.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
          for (var u = 0, h = 1; 0 == (e.words[0] & h) && u < 26; ++u, h <<= 1) ;
          if (u > 0) for (e.iushrn(u); u-- > 0; ) i.isOdd() && i.iadd(s), i.iushrn(1);
          for (var l = 0, c = 1; 0 == (r.words[0] & c) && l < 26; ++l, c <<= 1) ;
          if (l > 0) for (r.iushrn(l); l-- > 0; ) a.isOdd() && a.iadd(s), a.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(a)) : (r.isub(e), a.isub(i));
        }
        var f;
        return (f = 0 === e.cmpn(1) ? i : a).cmpn(0) < 0 && f.iadd(t), f;
      }, o.prototype.gcd = function(t) {
        if (this.isZero()) return t.abs();
        if (t.isZero()) return this.abs();
        var e = this.clone();
        var r = t.clone();
        e.negative = 0, r.negative = 0;
        for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
        for (;;) {
          for (;e.isEven(); ) e.iushrn(1);
          for (;r.isEven(); ) r.iushrn(1);
          var i = e.cmp(r);
          if (i < 0) {
            var o = e;
            e = r, r = o;
          } else if (0 === i || 0 === r.cmpn(1)) break;
          e.isub(r);
        }
        return r.iushln(n);
      }, o.prototype.invm = function(t) {
        return this.egcd(t).a.umod(t);
      }, o.prototype.isEven = function() {
        return 0 == (1 & this.words[0]);
      }, o.prototype.isOdd = function() {
        return 1 == (1 & this.words[0]);
      }, o.prototype.andln = function(t) {
        return this.words[0] & t;
      }, o.prototype.bincn = function(t) {
        n('number' == typeof t);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
        var o = i;
        for (var a = r; 0 !== o && a < this.length; a++) {
          var s = 0 | this.words[a];
          o = (s += o) >>> 26, s &= 67108863, this.words[a] = s;
        }
        return 0 !== o && (this.words[a] = o, this.length++), this;
      }, o.prototype.isZero = function() {
        return 1 === this.length && 0 === this.words[0];
      }, o.prototype.cmpn = function(t) {
        var e = t < 0;
        if (0 !== this.negative && !e) return -1;
        if (0 === this.negative && e) return 1;
        var r;
        if (this.strip(), this.length > 1) r = 1; else {
          e && (t = -t), n(t <= 67108863, 'Number is too big');
          var i = 0 | this.words[0];
          r = i === t ? 0 : i < t ? -1 : 1;
        }
        return 0 !== this.negative ? 0 | -r : r;
      }, o.prototype.cmp = function(t) {
        if (0 !== this.negative && 0 === t.negative) return -1;
        if (0 === this.negative && 0 !== t.negative) return 1;
        var e = this.ucmp(t);
        return 0 !== this.negative ? 0 | -e : e;
      }, o.prototype.ucmp = function(t) {
        if (this.length > t.length) return 1;
        if (this.length < t.length) return -1;
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var n = 0 | this.words[r];
          var i = 0 | t.words[r];
          if (n !== i) {
            n < i ? e = -1 : n > i && (e = 1);
            break;
          }
        }
        return e;
      }, o.prototype.gtn = function(t) {
        return 1 === this.cmpn(t);
      }, o.prototype.gt = function(t) {
        return 1 === this.cmp(t);
      }, o.prototype.gten = function(t) {
        return this.cmpn(t) >= 0;
      }, o.prototype.gte = function(t) {
        return this.cmp(t) >= 0;
      }, o.prototype.ltn = function(t) {
        return -1 === this.cmpn(t);
      }, o.prototype.lt = function(t) {
        return -1 === this.cmp(t);
      }, o.prototype.lten = function(t) {
        return this.cmpn(t) <= 0;
      }, o.prototype.lte = function(t) {
        return this.cmp(t) <= 0;
      }, o.prototype.eqn = function(t) {
        return 0 === this.cmpn(t);
      }, o.prototype.eq = function(t) {
        return 0 === this.cmp(t);
      }, o.red = function(t) {
        return new k(t);
      }, o.prototype.toRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), n(0 === this.negative, 'red works only with positives'), t.convertTo(this)._forceRed(t);
      }, o.prototype.fromRed = function() {
        return n(this.red, 'fromRed works only with numbers in reduction context'), this.red.convertFrom(this);
      }, o.prototype._forceRed = function(t) {
        return this.red = t, this;
      }, o.prototype.forceRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), this._forceRed(t);
      }, o.prototype.redAdd = function(t) {
        return n(this.red, 'redAdd works only with red numbers'), this.red.add(this, t);
      }, o.prototype.redIAdd = function(t) {
        return n(this.red, 'redIAdd works only with red numbers'), this.red.iadd(this, t);
      }, o.prototype.redSub = function(t) {
        return n(this.red, 'redSub works only with red numbers'), this.red.sub(this, t);
      }, o.prototype.redISub = function(t) {
        return n(this.red, 'redISub works only with red numbers'), this.red.isub(this, t);
      }, o.prototype.redShl = function(t) {
        return n(this.red, 'redShl works only with red numbers'), this.red.shl(this, t);
      }, o.prototype.redMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.mul(this, t);
      }, o.prototype.redIMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.imul(this, t);
      }, o.prototype.redSqr = function() {
        return n(this.red, 'redSqr works only with red numbers'), this.red._verify1(this), this.red.sqr(this);
      }, o.prototype.redISqr = function() {
        return n(this.red, 'redISqr works only with red numbers'), this.red._verify1(this), this.red.isqr(this);
      }, o.prototype.redSqrt = function() {
        return n(this.red, 'redSqrt works only with red numbers'), this.red._verify1(this), this.red.sqrt(this);
      }, o.prototype.redInvm = function() {
        return n(this.red, 'redInvm works only with red numbers'), this.red._verify1(this), this.red.invm(this);
      }, o.prototype.redNeg = function() {
        return n(this.red, 'redNeg works only with red numbers'), this.red._verify1(this), this.red.neg(this);
      }, o.prototype.redPow = function(t) {
        return n(this.red && !t.red, 'redPow(normalNum)'), this.red._verify1(this), this.red.pow(this, t);
      };
      var g = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function y(t, e) {
        this.name = t, this.p = new o(e, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      function w() {
        y.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      function _() {
        y.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      function M() {
        y.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      function b() {
        y.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      function k(t) {
        if ('string' == typeof t) {
          var e = o._prime(t);
          this.m = e.p, this.prime = e;
        } else n(t.gtn(1), 'modulus must be greater than 1'), this.m = t, this.prime = null;
      }
      function x(t) {
        k.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), 
        this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
        this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      y.prototype._tmp = function() {
        var t = new o(null);
        return t.words = new Array(Math.ceil(this.n / 13)), t;
      }, y.prototype.ireduce = function(t) {
        var e = t;
        var r;
        do {
          this.split(e, this.tmp), r = (e = (e = this.imulK(e)).iadd(this.tmp)).bitLength();
        } while (r > this.n);
        var n = r < this.n ? -1 : e.ucmp(this.p);
        return 0 === n ? (e.words[0] = 0, e.length = 1) : n > 0 ? e.isub(this.p) : void 0 !== e.strip ? e.strip() : e._strip(), 
        e;
      }, y.prototype.split = function(t, e) {
        t.iushrn(this.n, 0, e);
      }, y.prototype.imulK = function(t) {
        return t.imul(this.k);
      }, i(w, y), w.prototype.split = function(t, e) {
        var r = 4194303;
        var n = Math.min(t.length, 9);
        for (var i = 0; i < n; i++) e.words[i] = t.words[i];
        if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
        var o = t.words[9];
        for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
          var a = 0 | t.words[i];
          t.words[i - 10] = (a & r) << 4 | o >>> 22, o = a;
        }
        o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
      }, w.prototype.imulK = function(t) {
        t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 0 | t.words[r];
          e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
        }
        return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), t;
      }, i(_, y), i(M, y), i(b, y), b.prototype.imulK = function(t) {
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 19 * (0 | t.words[r]) + e;
          var i = 67108863 & n;
          n >>>= 26, t.words[r] = i, e = n;
        }
        return 0 !== e && (t.words[t.length++] = e), t;
      }, o._prime = function(t) {
        if (g[t]) return g[t];
        var e;
        if ('k256' === t) e = new w; else if ('p224' === t) e = new _; else if ('p192' === t) e = new M; else {
          if ('p25519' !== t) throw new Error('Unknown prime ' + t);
          e = new b;
        }
        return g[t] = e, e;
      }, k.prototype._verify1 = function(t) {
        n(0 === t.negative, 'red works only with positives'), n(t.red, 'red works only with red numbers');
      }, k.prototype._verify2 = function(t, e) {
        n(0 == (t.negative | e.negative), 'red works only with positives'), n(t.red && t.red === e.red, 'red works only with red numbers');
      }, k.prototype.imod = function(t) {
        return this.prime ? this.prime.ireduce(t)._forceRed(this) : t.umod(this.m)._forceRed(this);
      }, k.prototype.neg = function(t) {
        return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
      }, k.prototype.add = function(t, e) {
        this._verify2(t, e);
        var r = t.add(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
      }, k.prototype.iadd = function(t, e) {
        this._verify2(t, e);
        var r = t.iadd(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r;
      }, k.prototype.sub = function(t, e) {
        this._verify2(t, e);
        var r = t.sub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
      }, k.prototype.isub = function(t, e) {
        this._verify2(t, e);
        var r = t.isub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r;
      }, k.prototype.shl = function(t, e) {
        return this._verify1(t), this.imod(t.ushln(e));
      }, k.prototype.imul = function(t, e) {
        return this._verify2(t, e), this.imod(t.imul(e));
      }, k.prototype.mul = function(t, e) {
        return this._verify2(t, e), this.imod(t.mul(e));
      }, k.prototype.isqr = function(t) {
        return this.imul(t, t.clone());
      }, k.prototype.sqr = function(t) {
        return this.mul(t, t);
      }, k.prototype.sqrt = function(t) {
        if (t.isZero()) return t.clone();
        var e = this.m.andln(3);
        if (n(e % 2 == 1), 3 === e) {
          var r = this.m.add(new o(1)).iushrn(2);
          return this.pow(t, r);
        }
        var i = this.m.subn(1);
        var a = 0;
        for (;!i.isZero() && 0 === i.andln(1); ) a++, i.iushrn(1);
        n(!i.isZero());
        var s = new o(1).toRed(this);
        var u = s.redNeg();
        var h = this.m.subn(1).iushrn(1);
        var l = this.m.bitLength();
        for (l = new o(2 * l * l).toRed(this); 0 !== this.pow(l, h).cmp(u); ) l.redIAdd(u);
        var c = this.pow(l, i);
        var f = this.pow(t, i.addn(1).iushrn(1));
        var d = this.pow(t, i);
        var p = a;
        for (;0 !== d.cmp(s); ) {
          var m = d;
          for (var v = 0; 0 !== m.cmp(s); v++) m = m.redSqr();
          n(v < p);
          var g = this.pow(c, new o(1).iushln(p - v - 1));
          f = f.redMul(g), c = g.redSqr(), d = d.redMul(c), p = v;
        }
        return f;
      }, k.prototype.invm = function(t) {
        var e = t._invmp(this.m);
        return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
      }, k.prototype.pow = function(t, e) {
        if (e.isZero()) return new o(1).toRed(this);
        if (0 === e.cmpn(1)) return t.clone();
        var r = new Array(16);
        r[0] = new o(1).toRed(this), r[1] = t;
        for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
        var i = r[0];
        var a = 0;
        var s = 0;
        var u = e.bitLength() % 26;
        for (0 === u && (u = 26), n = e.length - 1; n >= 0; n--) {
          var h = e.words[n];
          for (var l = u - 1; l >= 0; l--) {
            var c = h >> l & 1;
            i !== r[0] && (i = this.sqr(i)), 0 !== c || 0 !== a ? (a <<= 1, a |= c, (4 === ++s || 0 === n && 0 === l) && (i = this.mul(i, r[a]), 
            s = 0, a = 0)) : s = 0;
          }
          u = 26;
        }
        return i;
      }, k.prototype.convertTo = function(t) {
        var e = t.umod(this.m);
        return e === t ? e.clone() : e;
      }, k.prototype.convertFrom = function(t) {
        var e = t.clone();
        return e.red = null, e;
      }, o.mont = function(t) {
        return new x(t);
      }, i(x, k), x.prototype.convertTo = function(t) {
        return this.imod(t.ushln(this.shift));
      }, x.prototype.convertFrom = function(t) {
        var e = this.imod(t.mul(this.rinv));
        return e.red = null, e;
      }, x.prototype.imul = function(t, e) {
        if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
        var r = t.imul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var o = i;
        return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
      }, x.prototype.mul = function(t, e) {
        if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
        var r = t.mul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var a = i;
        return i.cmp(this.m) >= 0 ? a = i.isub(this.m) : i.cmpn(0) < 0 && (a = i.iadd(this.m)), a._forceRed(this);
      }, x.prototype.invm = function(t) {
        return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
      };
    }(t = r.nmd(t), this);
  },
  97754: (t, e, r) => {
    "use strict";
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
      return typeof t;
    } : function(t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    };
    var i = r(82192), o = i.keccak224, a = i.keccak384, s = i.keccak256, u = i.keccak512;
    var h = r(24063);
    var l = r(69282);
    var c = r(51675);
    var f = r(97771);
    var d = r(23482);
    var p = r(89509).Buffer;
    Object.assign(e, r(80884)), e.MAX_INTEGER = new f('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16), 
    e.TWO_POW256 = new f('10000000000000000000000000000000000000000000000000000000000000000', 16), e.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 
    e.SHA3_NULL_S = e.KECCAK256_NULL_S, e.KECCAK256_NULL = p.from(e.KECCAK256_NULL_S, 'hex'), e.SHA3_NULL = e.KECCAK256_NULL, 
    e.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', e.SHA3_RLP_ARRAY_S = e.KECCAK256_RLP_ARRAY_S, 
    e.KECCAK256_RLP_ARRAY = p.from(e.KECCAK256_RLP_ARRAY_S, 'hex'), e.SHA3_RLP_ARRAY = e.KECCAK256_RLP_ARRAY, e.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', 
    e.SHA3_RLP_S = e.KECCAK256_RLP_S, e.KECCAK256_RLP = p.from(e.KECCAK256_RLP_S, 'hex'), e.SHA3_RLP = e.KECCAK256_RLP, e.BN = f, 
    e.rlp = c, e.secp256k1 = h, e.zeros = function(t) {
      return p.allocUnsafe(t).fill(0);
    }, e.zeroAddress = function() {
      var t = e.zeros(20);
      return e.bufferToHex(t);
    }, e.setLengthLeft = e.setLength = function(t, r, n) {
      var i = e.zeros(r);
      return t = e.toBuffer(t), n ? t.length < r ? (t.copy(i), i) : t.slice(0, r) : t.length < r ? (t.copy(i, r - t.length), i) : t.slice(-r);
    }, e.setLengthRight = function(t, r) {
      return e.setLength(t, r, !0);
    }, e.unpad = e.stripZeros = function(t) {
      var r = (t = e.stripHexPrefix(t))[0];
      for (;t.length > 0 && '0' === r.toString(); ) r = (t = t.slice(1))[0];
      return t;
    }, e.toBuffer = function(t) {
      if (!p.isBuffer(t)) if (Array.isArray(t)) t = p.from(t); else if ('string' == typeof t) t = e.isHexString(t) ? p.from(e.padToEven(e.stripHexPrefix(t)), 'hex') : p.from(t); else if ('number' == typeof t) t = e.intToBuffer(t); else if (null == t) t = p.allocUnsafe(0); else if (f.isBN(t)) t = t.toArrayLike(p); else {
        if (!t.toArray) throw new Error('invalid type');
        t = p.from(t.toArray());
      }
      return t;
    }, e.bufferToInt = function(t) {
      return new f(e.toBuffer(t)).toNumber();
    }, e.bufferToHex = function(t) {
      return '0x' + (t = e.toBuffer(t)).toString('hex');
    }, e.fromSigned = function(t) {
      return new f(t).fromTwos(256);
    }, e.toUnsigned = function(t) {
      return p.from(t.toTwos(256).toArray());
    }, e.keccak = function(t, r) {
      switch (t = e.toBuffer(t), r || (r = 256), r) {
       case 224:
        return o(t);

       case 256:
        return s(t);

       case 384:
        return a(t);

       case 512:
        return u(t);

       default:
        throw new Error('Invald algorithm: keccak' + r);
      }
    }, e.keccak256 = function(t) {
      return e.keccak(t);
    }, e.sha3 = e.keccak, e.sha256 = function(t) {
      return t = e.toBuffer(t), d('sha256').update(t).digest();
    }, e.ripemd160 = function(t, r) {
      t = e.toBuffer(t);
      var n = d('rmd160').update(t).digest();
      return !0 === r ? e.setLength(n, 32) : n;
    }, e.rlphash = function(t) {
      return e.keccak(c.encode(t));
    }, e.isValidPrivate = function(t) {
      return h.privateKeyVerify(t);
    }, e.isValidPublic = function(t, e) {
      return 64 === t.length ? h.publicKeyVerify(p.concat([ p.from([ 4 ]), t ])) : !!e && h.publicKeyVerify(t);
    }, e.pubToAddress = e.publicToAddress = function(t, r) {
      return t = e.toBuffer(t), r && 64 !== t.length && (t = h.publicKeyConvert(t, !1).slice(1)), l(64 === t.length), e.keccak(t).slice(-20);
    };
    var m = e.privateToPublic = function(t) {
      return t = e.toBuffer(t), h.publicKeyCreate(t, !1).slice(1);
    };
    e.importPublic = function(t) {
      return 64 !== (t = e.toBuffer(t)).length && (t = h.publicKeyConvert(t, !1).slice(1)), t;
    }, e.ecsign = function(t, e) {
      var r = h.sign(t, e);
      var n = {};
      return n.r = r.signature.slice(0, 32), n.s = r.signature.slice(32, 64), n.v = r.recovery + 27, n;
    }, e.hashPersonalMessage = function(t) {
      var r = e.toBuffer('Ethereum Signed Message:\n' + t.length.toString());
      return e.keccak(p.concat([ r, t ]));
    }, e.ecrecover = function(t, r, n, i) {
      var o = p.concat([ e.setLength(n, 32), e.setLength(i, 32) ], 64);
      var a = r - 27;
      if (0 !== a && 1 !== a) throw new Error('Invalid signature v value');
      var s = h.recover(t, o, a);
      return h.publicKeyConvert(s, !1).slice(1);
    }, e.toRpcSig = function(t, r, n) {
      if (27 !== t && 28 !== t) throw new Error('Invalid recovery id');
      return e.bufferToHex(p.concat([ e.setLengthLeft(r, 32), e.setLengthLeft(n, 32), e.toBuffer(t - 27) ]));
    }, e.fromRpcSig = function(t) {
      if (65 !== (t = e.toBuffer(t)).length) throw new Error('Invalid signature length');
      var r = t[64];
      return r < 27 && (r += 27), {
        v: r,
        r: t.slice(0, 32),
        s: t.slice(32, 64)
      };
    }, e.privateToAddress = function(t) {
      return e.publicToAddress(m(t));
    }, e.isValidAddress = function(t) {
      return /^0x[0-9a-fA-F]{40}$/.test(t);
    }, e.isZeroAddress = function(t) {
      return e.zeroAddress() === e.addHexPrefix(t);
    }, e.toChecksumAddress = function(t) {
      t = e.stripHexPrefix(t).toLowerCase();
      var r = e.keccak(t).toString('hex');
      var n = '0x';
      for (var i = 0; i < t.length; i++) parseInt(r[i], 16) >= 8 ? n += t[i].toUpperCase() : n += t[i];
      return n;
    }, e.isValidChecksumAddress = function(t) {
      return e.isValidAddress(t) && e.toChecksumAddress(t) === t;
    }, e.generateAddress = function(t, r) {
      return t = e.toBuffer(t), r = (r = new f(r)).isZero() ? null : p.from(r.toArray()), e.rlphash([ t, r ]).slice(-20);
    }, e.isPrecompiled = function(t) {
      var r = e.unpad(t);
      return 1 === r.length && r[0] >= 1 && r[0] <= 8;
    }, e.addHexPrefix = function(t) {
      return 'string' != typeof t || e.isHexPrefixed(t) ? t : '0x' + t;
    }, e.isValidSignature = function(t, e, r, n) {
      var i = new f('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
      var o = new f('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
      return 32 === e.length && 32 === r.length && ((27 === t || 28 === t) && (e = new f(e), r = new f(r), !(e.isZero() || e.gt(o) || r.isZero() || r.gt(o)) && (!1 !== n || 1 !== new f(r).cmp(i))));
    }, e.baToJSON = function(t) {
      if (p.isBuffer(t)) return '0x' + t.toString('hex');
      if (t instanceof Array) {
        var r = [];
        for (var n = 0; n < t.length; n++) r.push(e.baToJSON(t[n]));
        return r;
      }
    }, e.defineProperties = function(t, r, i) {
      if (t.raw = [], t._fields = [], t.toJSON = function(r) {
        if (r) {
          var n = {};
          return t._fields.forEach((function(e) {
            n[e] = '0x' + t[e].toString('hex');
          })), n;
        }
        return e.baToJSON(this.raw);
      }, t.serialize = function() {
        return c.encode(t.raw);
      }, r.forEach((function(r, n) {
        function i() {
          return t.raw[n];
        }
        function o(i) {
          '00' !== (i = e.toBuffer(i)).toString('hex') || r.allowZero || (i = p.allocUnsafe(0)), r.allowLess && r.length ? (i = e.stripZeros(i), 
          l(r.length >= i.length, 'The field ' + r.name + ' must not have more ' + r.length + ' bytes')) : r.allowZero && 0 === i.length || !r.length || l(r.length === i.length, 'The field ' + r.name + ' must have byte length of ' + r.length), 
          t.raw[n] = i;
        }
        t._fields.push(r.name), Object.defineProperty(t, r.name, {
          enumerable: !0,
          configurable: !0,
          get: i,
          set: o
        }), r.default && (t[r.name] = r.default), r.alias && Object.defineProperty(t, r.alias, {
          enumerable: !1,
          configurable: !0,
          set: o,
          get: i
        });
      })), i) if ('string' == typeof i && (i = p.from(e.stripHexPrefix(i), 'hex')), p.isBuffer(i) && (i = c.decode(i)), Array.isArray(i)) {
        if (i.length > t._fields.length) throw new Error('wrong number of fields in data');
        i.forEach((function(r, n) {
          t[t._fields[n]] = e.toBuffer(r);
        }));
      } else {
        if ('object' !== (void 0 === i ? 'undefined' : n(i))) throw new Error('invalid data');
        var o = Object.keys(i);
        r.forEach((function(e) {
          -1 !== o.indexOf(e.name) && (t[e.name] = i[e.name]), -1 !== o.indexOf(e.alias) && (t[e.alias] = i[e.alias]);
        }));
      }
    };
  },
  24063: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(95053);
    var o = r(8570);
    var a = r(90119);
    var s = function(t) {
      return 32 === t.length && i.privateKeyVerify(Uint8Array.from(t));
    };
    t.exports = {
      privateKeyVerify: s,
      privateKeyExport: function(t, e) {
        if (32 !== t.length) throw new RangeError('private key length is invalid');
        var r = o.privateKeyExport(t, e);
        return a.privateKeyExport(t, r, e);
      },
      privateKeyImport: function(t) {
        if (null !== (t = a.privateKeyImport(t)) && 32 === t.length && s(t)) return t;
        throw new Error("couldn't import from DER format");
      },
      privateKeyNegate: function(t) {
        return n.from(i.privateKeyNegate(Uint8Array.from(t)));
      },
      privateKeyModInverse: function(t) {
        if (32 !== t.length) throw new Error('private key length is invalid');
        return n.from(o.privateKeyModInverse(Uint8Array.from(t)));
      },
      privateKeyTweakAdd: function(t, e) {
        return n.from(i.privateKeyTweakAdd(Uint8Array.from(t), e));
      },
      privateKeyTweakMul: function(t, e) {
        return n.from(i.privateKeyTweakMul(Uint8Array.from(t), Uint8Array.from(e)));
      },
      publicKeyCreate: function(t, e) {
        return n.from(i.publicKeyCreate(Uint8Array.from(t), e));
      },
      publicKeyConvert: function(t, e) {
        return n.from(i.publicKeyConvert(Uint8Array.from(t), e));
      },
      publicKeyVerify: function(t) {
        return (33 === t.length || 65 === t.length) && i.publicKeyVerify(Uint8Array.from(t));
      },
      publicKeyTweakAdd: function(t, e, r) {
        return n.from(i.publicKeyTweakAdd(Uint8Array.from(t), Uint8Array.from(e), r));
      },
      publicKeyTweakMul: function(t, e, r) {
        return n.from(i.publicKeyTweakMul(Uint8Array.from(t), Uint8Array.from(e), r));
      },
      publicKeyCombine: function(t, e) {
        var r = [];
        return t.forEach((function(t) {
          r.push(Uint8Array.from(t));
        })), n.from(i.publicKeyCombine(r, e));
      },
      signatureNormalize: function(t) {
        return n.from(i.signatureNormalize(Uint8Array.from(t)));
      },
      signatureExport: function(t) {
        return n.from(i.signatureExport(Uint8Array.from(t)));
      },
      signatureImport: function(t) {
        return n.from(i.signatureImport(Uint8Array.from(t)));
      },
      signatureImportLax: function(t) {
        if (0 === t.length) throw new RangeError('signature length is invalid');
        var e = a.signatureImportLax(t);
        if (null === e) throw new Error("couldn't parse DER signature");
        return o.signatureImport(e);
      },
      sign: function(t, e, r) {
        if (null === r) throw new TypeError('options should be an Object');
        var o = void 0;
        if (r) {
          if (o = {}, null === r.data) throw new TypeError('options.data should be a Buffer');
          if (r.data) {
            if (32 !== r.data.length) throw new RangeError('options.data length is invalid');
            o.data = new Uint8Array(r.data);
          }
          if (null === r.noncefn) throw new TypeError('options.noncefn should be a Function');
          r.noncefn && (o.noncefn = function(t, e, i, o, a) {
            var s = null != i ? n.from(i) : null;
            var u = null != o ? n.from(o) : null;
            var h = n.from('');
            return r.noncefn && (h = r.noncefn(n.from(t), n.from(e), s, u, a)), Uint8Array.from(h);
          });
        }
        var a = i.ecdsaSign(Uint8Array.from(t), Uint8Array.from(e), o);
        return {
          signature: n.from(a.signature),
          recovery: a.recid
        };
      },
      verify: function(t, e, r) {
        return i.ecdsaVerify(Uint8Array.from(e), Uint8Array.from(t), r);
      },
      recover: function(t, e, r, o) {
        return n.from(i.ecdsaRecover(Uint8Array.from(e), r, Uint8Array.from(t), o));
      },
      ecdh: function(t, e) {
        return n.from(i.ecdh(Uint8Array.from(t), Uint8Array.from(e), {}));
      },
      ecdhUnsafe: function(t, e, r) {
        if (33 !== t.length && 65 !== t.length) throw new RangeError('public key length is invalid');
        if (32 !== e.length) throw new RangeError('private key length is invalid');
        return n.from(o.ecdhUnsafe(Uint8Array.from(t), Uint8Array.from(e), r));
      }
    };
  },
  90119: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = n.from([ 48, 129, 211, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 133, 48, 129, 130, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 33, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 36, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    var o = n.from([ 48, 130, 1, 19, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 165, 48, 129, 162, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 65, 4, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 72, 58, 218, 119, 38, 163, 196, 101, 93, 164, 251, 252, 14, 17, 8, 168, 253, 23, 180, 72, 166, 133, 84, 25, 156, 71, 208, 143, 251, 16, 212, 184, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 68, 3, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    e.privateKeyExport = function(t, e, r) {
      var a = n.from(r ? i : o);
      return t.copy(a, r ? 8 : 9), e.copy(a, r ? 181 : 214), a;
    }, e.privateKeyImport = function(t) {
      var e = t.length;
      var r = 0;
      if (e < r + 1 || 48 !== t[r]) return null;
      if (e < (r += 1) + 1 || !(128 & t[r])) return null;
      var n = 127 & t[r];
      if (n < 1 || n > 2) return null;
      if (e < (r += 1) + n) return null;
      var i = t[r + n - 1] | (n > 1 ? t[r + n - 2] << 8 : 0);
      return e < (r += n) + i || e < r + 3 || 2 !== t[r] || 1 !== t[r + 1] || 1 !== t[r + 2] || e < (r += 3) + 2 || 4 !== t[r] || t[r + 1] > 32 || e < r + 2 + t[r + 1] ? null : t.slice(r + 2, r + 2 + t[r + 1]);
    }, e.signatureImportLax = function(t) {
      var e = n.alloc(32, 0);
      var r = n.alloc(32, 0);
      var i = t.length;
      var o = 0;
      if (48 !== t[o++]) return null;
      var a = t[o++];
      if (128 & a && (o += a - 128) > i) return null;
      if (2 !== t[o++]) return null;
      var s = t[o++];
      if (128 & s) {
        if (o + (a = s - 128) > i) return null;
        for (;a > 0 && 0 === t[o]; o += 1, a -= 1) ;
        for (s = 0; a > 0; o += 1, a -= 1) s = (s << 8) + t[o];
      }
      if (s > i - o) return null;
      var u = o;
      if (o += s, 2 !== t[o++]) return null;
      var h = t[o++];
      if (128 & h) {
        if (o + (a = h - 128) > i) return null;
        for (;a > 0 && 0 === t[o]; o += 1, a -= 1) ;
        for (h = 0; a > 0; o += 1, a -= 1) h = (h << 8) + t[o];
      }
      if (h > i - o) return null;
      var l = o;
      for (o += h; s > 0 && 0 === t[u]; s -= 1, u += 1) ;
      if (s > 32) return null;
      var c = t.slice(u, u + s);
      for (c.copy(e, 32 - c.length); h > 0 && 0 === t[l]; h -= 1, l += 1) ;
      if (h > 32) return null;
      var f = t.slice(l, l + h);
      return f.copy(r, 32 - f.length), {
        r: e,
        s: r
      };
    };
  },
  8570: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(97771);
    var o = new (0, r(86266).ec)('secp256k1');
    var a = o.curve;
    e.privateKeyExport = function(t, e) {
      var r = new i(t);
      if (r.ucmp(a.n) >= 0) throw new Error('couldn\'t export to DER format');
      var n = o.g.mul(r);
      return s(n.getX(), n.getY(), e);
    }, e.privateKeyModInverse = function(t) {
      var e = new i(t);
      if (e.ucmp(a.n) >= 0 || e.isZero()) throw new Error('private key range is invalid');
      return e.invm(a.n).toArrayLike(n, 'be', 32);
    }, e.signatureImport = function(t) {
      var e = new i(t.r);
      e.ucmp(a.n) >= 0 && (e = new i(0));
      var r = new i(t.s);
      return r.ucmp(a.n) >= 0 && (r = new i(0)), n.concat([ e.toArrayLike(n, 'be', 32), r.toArrayLike(n, 'be', 32) ]);
    }, e.ecdhUnsafe = function(t, e, r) {
      var n = o.keyFromPublic(t);
      var u = new i(e);
      if (u.ucmp(a.n) >= 0 || u.isZero()) throw new Error('scalar was invalid (zero or overflow)');
      var h = n.pub.mul(u);
      return s(h.getX(), h.getY(), r);
    };
    var s = function(t, e, r) {
      var i = void 0;
      return r ? ((i = n.alloc(33))[0] = e.isOdd() ? 3 : 2, t.toArrayLike(n, 'be', 32).copy(i, 1)) : ((i = n.alloc(65))[0] = 4, 
      t.toArrayLike(n, 'be', 32).copy(i, 1), e.toArrayLike(n, 'be', 32).copy(i, 33)), i;
    };
  },
  80884: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(23944);
    var o = r(49604);
    function a(t) {
      var e = t;
      if ('string' != typeof e) throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof e + ', while padToEven.');
      return e.length % 2 && (e = '0' + e), e;
    }
    function s(t) {
      return '0x' + t.toString(16);
    }
    t.exports = {
      arrayContainsArray: function(t, e, r) {
        if (!0 !== Array.isArray(t)) throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof t + '\'');
        if (!0 !== Array.isArray(e)) throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof e + '\'');
        return e[Boolean(r) ? 'some' : 'every']((function(e) {
          return t.indexOf(e) >= 0;
        }));
      },
      intToBuffer: function(t) {
        var e = s(t);
        return new n(a(e.slice(2)), 'hex');
      },
      getBinarySize: function(t) {
        if ('string' != typeof t) throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof t + '\'.');
        return n.byteLength(t, 'utf8');
      },
      isHexPrefixed: i,
      stripHexPrefix: o,
      padToEven: a,
      intToHex: s,
      fromAscii: function(t) {
        var e = '';
        for (var r = 0; r < t.length; r++) {
          var n = t.charCodeAt(r).toString(16);
          e += n.length < 2 ? '0' + n : n;
        }
        return '0x' + e;
      },
      fromUtf8: function(t) {
        return '0x' + a(new n(t, 'utf8').toString('hex')).replace(/^0+|0+$/g, '');
      },
      toAscii: function(t) {
        var e = '';
        var r = 0, n = t.length;
        for ('0x' === t.substring(0, 2) && (r = 2); r < n; r += 2) {
          var i = parseInt(t.substr(r, 2), 16);
          e += String.fromCharCode(i);
        }
        return e;
      },
      toUtf8: function(t) {
        return new n(a(o(t).replace(/^0+|0+$/g, '')), 'hex').toString('utf8');
      },
      getKeys: function(t, e, r) {
        if (!Array.isArray(t)) throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof t + '\'');
        if ('string' != typeof e) throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof e + '\'.');
        var n = [];
        for (var i = 0; i < t.length; i++) {
          var o = t[i][e];
          if (r && !o) o = ''; else if ('string' != typeof o) throw new Error('invalid abi');
          n.push(o);
        }
        return n;
      },
      isHexString: function(t, e) {
        return !('string' != typeof t || !t.match(/^0x[0-9A-Fa-f]*$/)) && (!e || t.length === 2 + 2 * e);
      }
    };
  },
  26729: t => {
    "use strict";
    var e = Object.prototype.hasOwnProperty, r = '~';
    function n() {}
    function i(t, e, r) {
      this.fn = t, this.context = e, this.once = r || !1;
    }
    function o(t, e, n, o, a) {
      if ('function' != typeof n) throw new TypeError('The listener must be a function');
      var s = new i(n, o || t, a), u = r ? r + e : e;
      return t._events[u] ? t._events[u].fn ? t._events[u] = [ t._events[u], s ] : t._events[u].push(s) : (t._events[u] = s, t._eventsCount++), 
      t;
    }
    function a(t, e) {
      0 == --t._eventsCount ? t._events = new n : delete t._events[e];
    }
    function s() {
      this._events = new n, this._eventsCount = 0;
    }
    Object.create && (n.prototype = Object.create(null), (new n).__proto__ || (r = !1)), s.prototype.eventNames = function() {
      var t, n, i = [];
      if (0 === this._eventsCount) return i;
      for (n in t = this._events) e.call(t, n) && i.push(r ? n.slice(1) : n);
      return Object.getOwnPropertySymbols ? i.concat(Object.getOwnPropertySymbols(t)) : i;
    }, s.prototype.listeners = function(t) {
      var e = r ? r + t : t, n = this._events[e];
      if (!n) return [];
      if (n.fn) return [ n.fn ];
      for (var i = 0, o = n.length, a = new Array(o); i < o; i++) a[i] = n[i].fn;
      return a;
    }, s.prototype.listenerCount = function(t) {
      var e = r ? r + t : t, n = this._events[e];
      return n ? n.fn ? 1 : n.length : 0;
    }, s.prototype.emit = function(t, e, n, i, o, a) {
      var s = r ? r + t : t;
      if (!this._events[s]) return !1;
      var u, h, l = this._events[s], c = arguments.length;
      if (l.fn) {
        switch (l.once && this.removeListener(t, l.fn, void 0, !0), c) {
         case 1:
          return l.fn.call(l.context), !0;

         case 2:
          return l.fn.call(l.context, e), !0;

         case 3:
          return l.fn.call(l.context, e, n), !0;

         case 4:
          return l.fn.call(l.context, e, n, i), !0;

         case 5:
          return l.fn.call(l.context, e, n, i, o), !0;

         case 6:
          return l.fn.call(l.context, e, n, i, o, a), !0;
        }
        for (h = 1, u = new Array(c - 1); h < c; h++) u[h - 1] = arguments[h];
        l.fn.apply(l.context, u);
      } else {
        var f, d = l.length;
        for (h = 0; h < d; h++) switch (l[h].once && this.removeListener(t, l[h].fn, void 0, !0), c) {
         case 1:
          l[h].fn.call(l[h].context);
          break;

         case 2:
          l[h].fn.call(l[h].context, e);
          break;

         case 3:
          l[h].fn.call(l[h].context, e, n);
          break;

         case 4:
          l[h].fn.call(l[h].context, e, n, i);
          break;

         default:
          if (!u) for (f = 1, u = new Array(c - 1); f < c; f++) u[f - 1] = arguments[f];
          l[h].fn.apply(l[h].context, u);
        }
      }
      return !0;
    }, s.prototype.on = function(t, e, r) {
      return o(this, t, e, r, !1);
    }, s.prototype.once = function(t, e, r) {
      return o(this, t, e, r, !0);
    }, s.prototype.removeListener = function(t, e, n, i) {
      var o = r ? r + t : t;
      if (!this._events[o]) return this;
      if (!e) return a(this, o), this;
      var s = this._events[o];
      if (s.fn) s.fn !== e || i && !s.once || n && s.context !== n || a(this, o); else {
        for (var u = 0, h = [], l = s.length; u < l; u++) (s[u].fn !== e || i && !s[u].once || n && s[u].context !== n) && h.push(s[u]);
        h.length ? this._events[o] = 1 === h.length ? h[0] : h : a(this, o);
      }
      return this;
    }, s.prototype.removeAllListeners = function(t) {
      var e;
      return t ? (e = r ? r + t : t, this._events[e] && a(this, e)) : (this._events = new n, this._eventsCount = 0), this;
    }, s.prototype.off = s.prototype.removeListener, s.prototype.addListener = s.prototype.on, s.prefixed = r, s.EventEmitter = s, 
    t.exports = s;
  },
  4501: t => {
    t.exports = n, n.strict = i, n.loose = o;
    var e = Object.prototype.toString;
    var r = {
      '[object Int8Array]': !0,
      '[object Int16Array]': !0,
      '[object Int32Array]': !0,
      '[object Uint8Array]': !0,
      '[object Uint8ClampedArray]': !0,
      '[object Uint16Array]': !0,
      '[object Uint32Array]': !0,
      '[object Float32Array]': !0,
      '[object Float64Array]': !0
    };
    function n(t) {
      return i(t) || o(t);
    }
    function i(t) {
      return t instanceof Int8Array || t instanceof Int16Array || t instanceof Int32Array || t instanceof Uint8Array || t instanceof Uint8ClampedArray || t instanceof Uint16Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array;
    }
    function o(t) {
      return r[e.call(t)];
    }
  },
  5826: t => {
    var e = {}.toString;
    t.exports = Array.isArray || function(t) {
      return '[object Array]' == e.call(t);
    };
  },
  17398: function(t, e, r) {
    "use strict";
    var n = this && this.__importDefault || function(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    };
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.JsonRpcEngine = void 0;
    const i = n(r(19394));
    const o = r(79826);
    class a extends i.default {
      constructor() {
        super(), this._middleware = [];
      }
      push(t) {
        this._middleware.push(t);
      }
      handle(t, e) {
        if (e && 'function' != typeof e) throw new Error('"callback" must be a function if provided.');
        return Array.isArray(t) ? e ? this._handleBatch(t, e) : this._handleBatch(t) : e ? this._handle(t, e) : this._promiseHandle(t);
      }
      asMiddleware() {
        return async (t, e, r, n) => {
          try {
            const [i, o, s] = await a._runAllMiddleware(t, e, this._middleware);
            return o ? (await a._runReturnHandlers(s), n(i)) : r((async t => {
              try {
                await a._runReturnHandlers(s);
              } catch (e) {
                return t(e);
              }
              return t();
            }));
          } catch (i) {
            return n(i);
          }
        };
      }
      async _handleBatch(t, e) {
        try {
          const r = await Promise.all(t.map(this._promiseHandle.bind(this)));
          return e ? e(null, r) : r;
        } catch (r) {
          if (e) return e(r);
          throw r;
        }
      }
      _promiseHandle(t) {
        return new Promise((e => {
          this._handle(t, ((t, r) => {
            e(r);
          }));
        }));
      }
      async _handle(t, e) {
        if (!t || Array.isArray(t) || 'object' != typeof t) {
          const r = new o.EthereumRpcError(o.errorCodes.rpc.invalidRequest, "Requests must be plain objects. Received: " + typeof t, {
            request: t
          });
          return e(r, {
            id: void 0,
            jsonrpc: '2.0',
            error: r
          });
        }
        if ('string' != typeof t.method) {
          const r = new o.EthereumRpcError(o.errorCodes.rpc.invalidRequest, "Must specify a string method. Received: " + typeof t.method, {
            request: t
          });
          return e(r, {
            id: t.id,
            jsonrpc: '2.0',
            error: r
          });
        }
        const r = Object.assign({}, t);
        const n = {
          id: r.id,
          jsonrpc: r.jsonrpc
        };
        let i = null;
        try {
          await this._processRequest(r, n);
        } catch (a) {
          i = a;
        }
        return i && (delete n.result, n.error || (n.error = o.serializeError(i))), e(i, n);
      }
      async _processRequest(t, e) {
        const [r, n, i] = await a._runAllMiddleware(t, e, this._middleware);
        if (a._checkForCompletion(t, e, n), await a._runReturnHandlers(i), r) throw r;
      }
      static async _runAllMiddleware(t, e, r) {
        const n = [];
        let i = null;
        let o = !1;
        for (const s of r) if ([i, o] = await a._runMiddleware(t, e, s, n), o) break;
        return [ i, o, n.reverse() ];
      }
      static _runMiddleware(t, e, r, n) {
        return new Promise((i => {
          const a = t => {
            const r = t || e.error;
            r && (e.error = o.serializeError(r)), i([ r, !0 ]);
          };
          const u = r => {
            e.error ? a(e.error) : (r && ('function' != typeof r && a(new o.EthereumRpcError(o.errorCodes.rpc.internal, `JsonRpcEngine: "next" return handlers must be functions. Received "${typeof r}" for request:\n${s(t)}`, {
              request: t
            })), n.push(r)), i([ null, !1 ]));
          };
          try {
            r(t, e, u, a);
          } catch (h) {
            a(h);
          }
        }));
      }
      static async _runReturnHandlers(t) {
        for (const e of t) await new Promise(((t, r) => {
          e((e => e ? r(e) : t()));
        }));
      }
      static _checkForCompletion(t, e, r) {
        if (!('result' in e) && !('error' in e)) throw new o.EthereumRpcError(o.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\n${s(t)}`, {
          request: t
        });
        if (!r) throw new o.EthereumRpcError(o.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\n${s(t)}`, {
          request: t
        });
      }
    }
    function s(t) {
      return JSON.stringify(t, null, 2);
    }
    e.JsonRpcEngine = a;
  },
  31841: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.createAsyncMiddleware = void 0, e.createAsyncMiddleware = function(t) {
      return async (e, r, n, i) => {
        let o;
        const a = new Promise((t => {
          o = t;
        }));
        let s = null;
        let u = !1;
        const h = async () => {
          u = !0, n((t => {
            s = t, o();
          })), await a;
        };
        try {
          await t(e, r, h), u ? (await a, s(null)) : i(null);
        } catch (l) {
          s ? s(l) : i(l);
        }
      };
    };
  },
  48508: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.createScaffoldMiddleware = void 0, e.createScaffoldMiddleware = function(t) {
      return (e, r, n, i) => {
        const o = t[e.method];
        return void 0 === o ? n() : 'function' == typeof o ? o(e, r, n, i) : (r.result = o, i());
      };
    };
  },
  33107: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.getUniqueId = void 0;
    const r = 4294967295;
    let n = Math.floor(Math.random() * r);
    e.getUniqueId = function() {
      return n = (n + 1) % r, n;
    };
  },
  85086: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.createIdRemapMiddleware = void 0;
    const n = r(33107);
    e.createIdRemapMiddleware = function() {
      return (t, e, r, i) => {
        const o = t.id;
        const a = n.getUniqueId();
        t.id = a, e.id = a, r((r => {
          t.id = o, e.id = o, r();
        }));
      };
    };
  },
  88625: function(t, e, r) {
    "use strict";
    var n = this && this.__createBinding || (Object.create ? function(t, e, r, n) {
      void 0 === n && (n = r), Object.defineProperty(t, n, {
        enumerable: !0,
        get: function() {
          return e[r];
        }
      });
    } : function(t, e, r, n) {
      void 0 === n && (n = r), t[n] = e[r];
    });
    var i = this && this.__exportStar || function(t, e) {
      for (var r in t) "default" === r || Object.prototype.hasOwnProperty.call(e, r) || n(e, t, r);
    };
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), i(r(85086), e), i(r(31841), e), i(r(48508), e), i(r(33107), e), i(r(17398), e), i(r(79962), e);
  },
  79962: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.mergeMiddleware = void 0;
    const n = r(17398);
    e.mergeMiddleware = function(t) {
      const e = new n.JsonRpcEngine;
      return t.forEach((t => e.push(t))), e.asMiddleware();
    };
  },
  23420: t => {
    t.exports = function(t) {
      var e = (t = t || {}).max || Number.MAX_SAFE_INTEGER;
      var r = void 0 !== t.start ? t.start : Math.floor(Math.random() * e);
      return function() {
        return r %= e, r++;
      };
    };
  },
  62705: (t, e, r) => {
    var n = r(55639).Symbol;
    t.exports = n;
  },
  14636: (t, e, r) => {
    var n = r(22545), i = r(35694), o = r(1469), a = r(44144), s = r(65776), u = r(36719);
    var h = Object.prototype.hasOwnProperty;
    t.exports = function(t, e) {
      var r = o(t), l = !r && i(t), c = !r && !l && a(t), f = !r && !l && !c && u(t), d = r || l || c || f, p = d ? n(t.length, String) : [], m = p.length;
      for (var v in t) !e && !h.call(t, v) || d && ('length' == v || c && ('offset' == v || 'parent' == v) || f && ('buffer' == v || 'byteLength' == v || 'byteOffset' == v) || s(v, m)) || p.push(v);
      return p;
    };
  },
  44239: (t, e, r) => {
    var n = r(62705), i = r(89607), o = r(2333);
    var a = n ? n.toStringTag : void 0;
    t.exports = function(t) {
      return null == t ? void 0 === t ? "[object Undefined]" : "[object Null]" : a && a in Object(t) ? i(t) : o(t);
    };
  },
  9454: (t, e, r) => {
    var n = r(44239), i = r(37005);
    t.exports = function(t) {
      return i(t) && "[object Arguments]" == n(t);
    };
  },
  38749: (t, e, r) => {
    var n = r(44239), i = r(41780), o = r(37005);
    var a = {};
    a['[object Float32Array]'] = a['[object Float64Array]'] = a['[object Int8Array]'] = a['[object Int16Array]'] = a['[object Int32Array]'] = a['[object Uint8Array]'] = a['[object Uint8ClampedArray]'] = a['[object Uint16Array]'] = a['[object Uint32Array]'] = !0, 
    a['[object Arguments]'] = a['[object Array]'] = a['[object ArrayBuffer]'] = a['[object Boolean]'] = a['[object DataView]'] = a['[object Date]'] = a['[object Error]'] = a['[object Function]'] = a['[object Map]'] = a['[object Number]'] = a['[object Object]'] = a['[object RegExp]'] = a['[object Set]'] = a['[object String]'] = a['[object WeakMap]'] = !1, 
    t.exports = function(t) {
      return o(t) && i(t.length) && !!a[n(t)];
    };
  },
  280: (t, e, r) => {
    var n = r(25726), i = r(86916);
    var o = Object.prototype.hasOwnProperty;
    t.exports = function(t) {
      if (!n(t)) return i(t);
      var e = [];
      for (var r in Object(t)) o.call(t, r) && 'constructor' != r && e.push(r);
      return e;
    };
  },
  22545: t => {
    t.exports = function(t, e) {
      var r = -1, n = Array(t);
      for (;++r < t; ) n[r] = e(r);
      return n;
    };
  },
  7518: t => {
    t.exports = function(t) {
      return function(e) {
        return t(e);
      };
    };
  },
  31957: (t, e, r) => {
    var n = 'object' == typeof r.g && r.g && r.g.Object === Object && r.g;
    t.exports = n;
  },
  89607: (t, e, r) => {
    var n = r(62705);
    var i = Object.prototype;
    var o = i.hasOwnProperty;
    var a = i.toString;
    var s = n ? n.toStringTag : void 0;
    t.exports = function(t) {
      var e = o.call(t, s), r = t[s];
      try {
        t[s] = void 0;
        var n = !0;
      } catch (u) {}
      var i = a.call(t);
      return n && (e ? t[s] = r : delete t[s]), i;
    };
  },
  65776: t => {
    var e = /^(?:0|[1-9]\d*)$/;
    t.exports = function(t, r) {
      var n = typeof t;
      return !!(r = null == r ? 9007199254740991 : r) && ('number' == n || 'symbol' != n && e.test(t)) && t > -1 && t % 1 == 0 && t < r;
    };
  },
  25726: t => {
    var e = Object.prototype;
    t.exports = function(t) {
      var r = t && t.constructor;
      return t === ('function' == typeof r && r.prototype || e);
    };
  },
  86916: (t, e, r) => {
    var n = r(5569)(Object.keys, Object);
    t.exports = n;
  },
  31167: (t, e, r) => {
    t = r.nmd(t);
    var n = r(31957);
    var i = e && !e.nodeType && e;
    var o = i && t && !t.nodeType && t;
    var a = o && o.exports === i && n.process;
    var s = function() {
      try {
        var t = o && o.require && o.require('util').types;
        return t || a && a.binding && a.binding('util');
      } catch (e) {}
    }();
    t.exports = s;
  },
  2333: t => {
    var e = Object.prototype.toString;
    t.exports = function(t) {
      return e.call(t);
    };
  },
  5569: t => {
    t.exports = function(t, e) {
      return function(r) {
        return t(e(r));
      };
    };
  },
  55639: (t, e, r) => {
    var n = r(31957);
    var i = 'object' == typeof self && self && self.Object === Object && self;
    var o = n || i || Function('return this')();
    t.exports = o;
  },
  35694: (t, e, r) => {
    var n = r(9454), i = r(37005);
    var o = Object.prototype;
    var a = o.hasOwnProperty;
    var s = o.propertyIsEnumerable;
    var u = n(function() {
      return arguments;
    }()) ? n : function(t) {
      return i(t) && a.call(t, 'callee') && !s.call(t, 'callee');
    };
    t.exports = u;
  },
  1469: t => {
    var e = Array.isArray;
    t.exports = e;
  },
  98612: (t, e, r) => {
    var n = r(23560), i = r(41780);
    t.exports = function(t) {
      return null != t && i(t.length) && !n(t);
    };
  },
  44144: (t, e, r) => {
    t = r.nmd(t);
    var n = r(55639), i = r(95062);
    var o = e && !e.nodeType && e;
    var a = o && t && !t.nodeType && t;
    var s = a && a.exports === o ? n.Buffer : void 0;
    var u = (s ? s.isBuffer : void 0) || i;
    t.exports = u;
  },
  23560: (t, e, r) => {
    var n = r(44239), i = r(13218);
    t.exports = function(t) {
      if (!i(t)) return !1;
      var e = n(t);
      return "[object Function]" == e || "[object GeneratorFunction]" == e || "[object AsyncFunction]" == e || "[object Proxy]" == e;
    };
  },
  41780: t => {
    t.exports = function(t) {
      return 'number' == typeof t && t > -1 && t % 1 == 0 && t <= 9007199254740991;
    };
  },
  13218: t => {
    t.exports = function(t) {
      var e = typeof t;
      return null != t && ('object' == e || 'function' == e);
    };
  },
  37005: t => {
    t.exports = function(t) {
      return null != t && 'object' == typeof t;
    };
  },
  36719: (t, e, r) => {
    var n = r(38749), i = r(7518), o = r(31167);
    var a = o && o.isTypedArray;
    var s = a ? i(a) : n;
    t.exports = s;
  },
  3674: (t, e, r) => {
    var n = r(14636), i = r(280), o = r(98612);
    t.exports = function(t) {
      return o(t) ? n(t) : i(t);
    };
  },
  50308: t => {
    t.exports = function() {};
  },
  95062: t => {
    t.exports = function() {
      return !1;
    };
  },
  12352: t => {
    "use strict";
    const e = (t, e) => function() {
      const r = e.promiseModule;
      const n = new Array(arguments.length);
      for (let t = 0; t < arguments.length; t++) n[t] = arguments[t];
      return new r(((r, i) => {
        e.errorFirst ? n.push((function(t, n) {
          if (e.multiArgs) {
            const e = new Array(arguments.length - 1);
            for (let t = 1; t < arguments.length; t++) e[t - 1] = arguments[t];
            t ? (e.unshift(t), i(e)) : r(e);
          } else t ? i(t) : r(n);
        })) : n.push((function(t) {
          if (e.multiArgs) {
            const t = new Array(arguments.length - 1);
            for (let e = 0; e < arguments.length; e++) t[e] = arguments[e];
            r(t);
          } else r(t);
        })), t.apply(this, n);
      }));
    };
    t.exports = (t, r) => {
      r = Object.assign({
        exclude: [ /.+(Sync|Stream)$/ ],
        errorFirst: !0,
        promiseModule: Promise
      }, r);
      const n = t => {
        const e = e => 'string' == typeof e ? t === e : e.test(t);
        return r.include ? r.include.some(e) : !r.exclude.some(e);
      };
      let i;
      i = 'function' == typeof t ? function() {
        return r.excludeMain ? t.apply(this, arguments) : e(t, r).apply(this, arguments);
      } : Object.create(Object.getPrototypeOf(t));
      for (const o in t) {
        const a = t[o];
        i[o] = 'function' == typeof a && n(o) ? e(a, r) : a;
      }
      return i;
    };
  },
  35776: (t, e, r) => {
    "use strict";
    r.r(e), r.d(e, {
      Children: () => yt,
      Component: () => w,
      Fragment: () => y,
      PureComponent: () => dt,
      Suspense: () => Mt,
      SuspenseList: () => xt,
      cloneElement: () => Kt,
      createContext: () => q,
      createElement: () => m,
      createFactory: () => qt,
      createPortal: () => Rt,
      createRef: () => g,
      default: () => Dt,
      findDOMNode: () => Ft,
      forwardRef: () => vt,
      hydrate: () => Lt,
      isValidElement: () => jt,
      lazy: () => kt,
      memo: () => pt,
      render: () => Bt,
      unmountComponentAtNode: () => Ht,
      unstable_batchedUpdates: () => zt,
      useCallback: () => rt,
      useContext: () => nt,
      useDebugValue: () => it,
      useEffect: () => J,
      useErrorBoundary: () => ot,
      useImperativeHandle: () => tt,
      useLayoutEffect: () => Q,
      useMemo: () => et,
      useReducer: () => Y,
      useRef: () => X,
      useState: () => G,
      version: () => Ut
    });
    var n, i, o, a, s, u, h, l = {}, c = [], f = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
    function d(t, e) {
      for (var r in e) t[r] = e[r];
      return t;
    }
    function p(t) {
      var e = t.parentNode;
      e && e.removeChild(t);
    }
    function m(t, e, r) {
      var n, i = arguments, o = {};
      for (n in e) "key" !== n && "ref" !== n && (o[n] = e[n]);
      if (arguments.length > 3) for (r = [ r ], n = 3; n < arguments.length; n++) r.push(i[n]);
      if (null != r && (o.children = r), "function" == typeof t && null != t.defaultProps) for (n in t.defaultProps) void 0 === o[n] && (o[n] = t.defaultProps[n]);
      return v(t, o, e && e.key, e && e.ref, null);
    }
    function v(t, e, r, i, o) {
      var a = {
        type: t,
        props: e,
        key: r,
        ref: i,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        constructor: void 0,
        __v: o
      };
      return null == o && (a.__v = a), n.vnode && n.vnode(a), a;
    }
    function g() {
      return {};
    }
    function y(t) {
      return t.children;
    }
    function w(t, e) {
      this.props = t, this.context = e;
    }
    function _(t, e) {
      if (null == e) return t.__ ? _(t.__, t.__.__k.indexOf(t) + 1) : null;
      for (var r; e < t.__k.length; e++) if (null != (r = t.__k[e]) && null != r.__e) return r.__e;
      return "function" == typeof t.type ? _(t) : null;
    }
    function M(t) {
      var e, r;
      if (null != (t = t.__) && null != t.__c) {
        for (t.__e = t.__c.base = null, e = 0; e < t.__k.length; e++) if (null != (r = t.__k[e]) && null != r.__e) {
          t.__e = t.__c.base = r.__e;
          break;
        }
        return M(t);
      }
    }
    function b(t) {
      (!t.__d && (t.__d = !0) && i.push(t) && !o++ || s !== n.debounceRendering) && ((s = n.debounceRendering) || a)(k);
    }
    function k() {
      for (var t; o = i.length; ) t = i.sort((function(t, e) {
        return t.__v.__b - e.__v.__b;
      })), i = [], t.some((function(t) {
        var e, r, n, i, o, a, s;
        t.__d && (a = (o = (e = t).__v).__e, (s = e.__P) && (r = [], (n = d({}, o)).__v = n, i = C(s, o, n, e.__n, void 0 !== s.ownerSVGElement, null, r, null == a ? _(o) : a), 
        T(r, o), i != a && M(o)));
      }));
    }
    function x(t, e, r, n, i, o, a, s, u) {
      var h, f, d, m, v, g, y, w = r && r.__k || c, M = w.length;
      if (s == l && (s = null != o ? o[0] : M ? _(r, 0) : null), h = 0, e.__k = A(e.__k, (function(r) {
        if (null != r) {
          if (r.__ = e, r.__b = e.__b + 1, null === (d = w[h]) || d && r.key == d.key && r.type === d.type) w[h] = void 0; else for (f = 0; f < M; f++) {
            if ((d = w[f]) && r.key == d.key && r.type === d.type) {
              w[f] = void 0;
              break;
            }
            d = null;
          }
          if (m = C(t, r, d = d || l, n, i, o, a, s, u), (f = r.ref) && d.ref != f && (y || (y = []), d.ref && y.push(d.ref, null, r), 
          y.push(f, r.__c || m, r)), null != m) {
            var c;
            if (null == g && (g = m), void 0 !== r.__d) c = r.__d, r.__d = void 0; else if (o == d || m != s || null == m.parentNode) {
              t: if (null == s || s.parentNode !== t) t.appendChild(m), c = null; else {
                for (v = s, f = 0; (v = v.nextSibling) && f < M; f += 2) if (v == m) break t;
                t.insertBefore(m, s), c = s;
              }
              "option" == e.type && (t.value = "");
            }
            s = void 0 !== c ? c : m.nextSibling, "function" == typeof e.type && (e.__d = s);
          } else s && d.__e == s && s.parentNode != t && (s = _(d));
        }
        return h++, r;
      })), e.__e = g, null != o && "function" != typeof e.type) for (h = o.length; h--; ) null != o[h] && p(o[h]);
      for (h = M; h--; ) null != w[h] && P(w[h], w[h]);
      if (y) for (h = 0; h < y.length; h++) L(y[h], y[++h], y[++h]);
    }
    function A(t, e, r) {
      if (null == r && (r = []), null == t || "boolean" == typeof t) e && r.push(e(null)); else if (Array.isArray(t)) for (var n = 0; n < t.length; n++) A(t[n], e, r); else r.push(e ? e("string" == typeof t || "number" == typeof t ? v(null, t, null, null, t) : null != t.__e || null != t.__c ? v(t.type, t.props, t.key, null, t.__v) : t) : t);
      return r;
    }
    function E(t, e, r) {
      "-" === e[0] ? t.setProperty(e, r) : t[e] = "number" == typeof r && !1 === f.test(e) ? r + "px" : null == r ? "" : r;
    }
    function S(t, e, r, n, i) {
      var o, a, s, u, h;
      if (i ? "className" === e && (e = "class") : "class" === e && (e = "className"), "style" === e) if (o = t.style, "string" == typeof r) o.cssText = r; else {
        if ("string" == typeof n && (o.cssText = "", n = null), n) for (u in n) r && u in r || E(o, u, "");
        if (r) for (h in r) n && r[h] === n[h] || E(o, h, r[h]);
      } else "o" === e[0] && "n" === e[1] ? (a = e !== (e = e.replace(/Capture$/, "")), s = e.toLowerCase(), e = (s in t ? s : e).slice(2), 
      r ? (n || t.addEventListener(e, R, a), (t.l || (t.l = {}))[e] = r) : t.removeEventListener(e, R, a)) : "list" !== e && "tagName" !== e && "form" !== e && "type" !== e && "size" !== e && !i && e in t ? t[e] = null == r ? "" : r : "function" != typeof r && "dangerouslySetInnerHTML" !== e && (e !== (e = e.replace(/^xlink:?/, "")) ? null == r || !1 === r ? t.removeAttributeNS("http://www.w3.org/1999/xlink", e.toLowerCase()) : t.setAttributeNS("http://www.w3.org/1999/xlink", e.toLowerCase(), r) : null == r || !1 === r && !/^ar/.test(e) ? t.removeAttribute(e) : t.setAttribute(e, r));
    }
    function R(t) {
      this.l[t.type](n.event ? n.event(t) : t);
    }
    function C(t, e, r, i, o, a, s, u, h) {
      var l, c, f, p, m, v, g, _, M, b, k = e.type;
      if (void 0 !== e.constructor) return null;
      (l = n.__b) && l(e);
      try {
        t: if ("function" == typeof k) {
          if (_ = e.props, M = (l = k.contextType) && i[l.__c], b = l ? M ? M.props.value : l.__ : i, r.__c ? g = (c = e.__c = r.__c).__ = c.__E : ("prototype" in k && k.prototype.render ? e.__c = c = new k(_, b) : (e.__c = c = new w(_, b), 
          c.constructor = k, c.render = I), M && M.sub(c), c.props = _, c.state || (c.state = {}), c.context = b, c.__n = i, f = c.__d = !0, 
          c.__h = []), null == c.__s && (c.__s = c.state), null != k.getDerivedStateFromProps && (c.__s == c.state && (c.__s = d({}, c.__s)), 
          d(c.__s, k.getDerivedStateFromProps(_, c.__s))), p = c.props, m = c.state, f) null == k.getDerivedStateFromProps && null != c.componentWillMount && c.componentWillMount(), 
          null != c.componentDidMount && c.__h.push(c.componentDidMount); else {
            if (null == k.getDerivedStateFromProps && _ !== p && null != c.componentWillReceiveProps && c.componentWillReceiveProps(_, b), 
            !c.__e && null != c.shouldComponentUpdate && !1 === c.shouldComponentUpdate(_, c.__s, b) || e.__v === r.__v && !c.__) {
              for (c.props = _, c.state = c.__s, e.__v !== r.__v && (c.__d = !1), c.__v = e, e.__e = r.__e, e.__k = r.__k, c.__h.length && s.push(c), 
              l = 0; l < e.__k.length; l++) e.__k[l] && (e.__k[l].__ = e);
              break t;
            }
            null != c.componentWillUpdate && c.componentWillUpdate(_, c.__s, b), null != c.componentDidUpdate && c.__h.push((function() {
              c.componentDidUpdate(p, m, v);
            }));
          }
          c.context = b, c.props = _, c.state = c.__s, (l = n.__r) && l(e), c.__d = !1, c.__v = e, c.__P = t, l = c.render(c.props, c.state, c.context), 
          e.__k = null != l && l.type == y && null == l.key ? l.props.children : Array.isArray(l) ? l : [ l ], null != c.getChildContext && (i = d(d({}, i), c.getChildContext())), 
          f || null == c.getSnapshotBeforeUpdate || (v = c.getSnapshotBeforeUpdate(p, m)), x(t, e, r, i, o, a, s, u, h), c.base = e.__e, 
          c.__h.length && s.push(c), g && (c.__E = c.__ = null), c.__e = !1;
        } else null == a && e.__v === r.__v ? (e.__k = r.__k, e.__e = r.__e) : e.__e = B(r.__e, e, r, i, o, a, s, h);
        (l = n.diffed) && l(e);
      } catch (t) {
        e.__v = null, n.__e(t, e, r);
      }
      return e.__e;
    }
    function T(t, e) {
      n.__c && n.__c(e, t), t.some((function(e) {
        try {
          t = e.__h, e.__h = [], t.some((function(t) {
            t.call(e);
          }));
        } catch (t) {
          n.__e(t, e.__v);
        }
      }));
    }
    function B(t, e, r, n, i, o, a, s) {
      var u, h, f, d, p, m = r.props, v = e.props;
      if (i = "svg" === e.type || i, null != o) for (u = 0; u < o.length; u++) if (null != (h = o[u]) && ((null === e.type ? 3 === h.nodeType : h.localName === e.type) || t == h)) {
        t = h, o[u] = null;
        break;
      }
      if (null == t) {
        if (null === e.type) return document.createTextNode(v);
        t = i ? document.createElementNS("http://www.w3.org/2000/svg", e.type) : document.createElement(e.type, v.is && {
          is: v.is
        }), o = null, s = !1;
      }
      if (null === e.type) m !== v && t.data != v && (t.data = v); else {
        if (null != o && (o = c.slice.call(t.childNodes)), f = (m = r.props || l).dangerouslySetInnerHTML, d = v.dangerouslySetInnerHTML, 
        !s) {
          if (m === l) for (m = {}, p = 0; p < t.attributes.length; p++) m[t.attributes[p].name] = t.attributes[p].value;
          (d || f) && (d && f && d.__html == f.__html || (t.innerHTML = d && d.__html || ""));
        }
        (function(t, e, r, n, i) {
          var o;
          for (o in r) "children" === o || "key" === o || o in e || S(t, o, null, r[o], n);
          for (o in e) i && "function" != typeof e[o] || "children" === o || "key" === o || "value" === o || "checked" === o || r[o] === e[o] || S(t, o, e[o], r[o], n);
        })(t, v, m, i, s), d ? e.__k = [] : (e.__k = e.props.children, x(t, e, r, n, "foreignObject" !== e.type && i, o, a, l, s)), 
        s || ("value" in v && void 0 !== (u = v.value) && u !== t.value && S(t, "value", u, m.value, !1), "checked" in v && void 0 !== (u = v.checked) && u !== t.checked && S(t, "checked", u, m.checked, !1));
      }
      return t;
    }
    function L(t, e, r) {
      try {
        "function" == typeof t ? t(e) : t.current = e;
      } catch (t) {
        n.__e(t, r);
      }
    }
    function P(t, e, r) {
      var i, o, a;
      if (n.unmount && n.unmount(t), (i = t.ref) && (i.current && i.current !== t.__e || L(i, null, e)), r || "function" == typeof t.type || (r = null != (o = t.__e)), 
      t.__e = t.__d = void 0, null != (i = t.__c)) {
        if (i.componentWillUnmount) try {
          i.componentWillUnmount();
        } catch (t) {
          n.__e(t, e);
        }
        i.base = i.__P = null;
      }
      if (i = t.__k) for (a = 0; a < i.length; a++) i[a] && P(i[a], e, r);
      null != o && p(o);
    }
    function I(t, e, r) {
      return this.constructor(t, r);
    }
    function O(t, e, r) {
      var i, o, a;
      n.__ && n.__(t, e), o = (i = r === u) ? null : r && r.__k || e.__k, t = m(y, null, [ t ]), a = [], C(e, (i ? e : r || e).__k = t, o || l, l, void 0 !== e.ownerSVGElement, r && !i ? [ r ] : o ? null : c.slice.call(e.childNodes), a, r || l, i), 
      T(a, t);
    }
    function N(t, e) {
      O(t, e, u);
    }
    function U(t, e) {
      var r, n;
      for (n in e = d(d({}, t.props), e), arguments.length > 2 && (e.children = c.slice.call(arguments, 2)), r = {}, e) "key" !== n && "ref" !== n && (r[n] = e[n]);
      return v(t.type, r, e.key || t.key, e.ref || t.ref, null);
    }
    function q(t) {
      var e = {}, r = {
        __c: "__cC" + h++,
        __: t,
        Consumer: function(t, e) {
          return t.children(e);
        },
        Provider: function(t) {
          var n, i = this;
          return this.getChildContext || (n = [], this.getChildContext = function() {
            return e[r.__c] = i, e;
          }, this.shouldComponentUpdate = function(t) {
            i.props.value !== t.value && n.some((function(e) {
              e.context = t.value, b(e);
            }));
          }, this.sub = function(t) {
            n.push(t);
            var e = t.componentWillUnmount;
            t.componentWillUnmount = function() {
              n.splice(n.indexOf(t), 1), e && e.call(t);
            };
          }), t.children;
        }
      };
      return r.Consumer.contextType = r, r.Provider.__ = r, r;
    }
    n = {
      __e: function(t, e) {
        for (var r, n; e = e.__; ) if ((r = e.__c) && !r.__) try {
          if (r.constructor && null != r.constructor.getDerivedStateFromError && (n = !0, r.setState(r.constructor.getDerivedStateFromError(t))), 
          null != r.componentDidCatch && (n = !0, r.componentDidCatch(t)), n) return b(r.__E = r);
        } catch (e) {
          t = e;
        }
        throw t;
      }
    }, w.prototype.setState = function(t, e) {
      var r;
      r = this.__s !== this.state ? this.__s : this.__s = d({}, this.state), "function" == typeof t && (t = t(r, this.props)), 
      t && d(r, t), null != t && this.__v && (e && this.__h.push(e), b(this));
    }, w.prototype.forceUpdate = function(t) {
      this.__v && (this.__e = !0, t && this.__h.push(t), b(this));
    }, w.prototype.render = y, i = [], o = 0, a = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, 
    u = l, h = 0;
    var j, K, H, F = 0, z = [], D = n.__r, Z = n.diffed, W = n.__c, V = n.unmount;
    function $(t, e) {
      n.__h && n.__h(K, t, F || e), F = 0;
      var r = K.__H || (K.__H = {
        __: [],
        __h: []
      });
      return t >= r.__.length && r.__.push({}), r.__[t];
    }
    function G(t) {
      return F = 1, Y(lt, t);
    }
    function Y(t, e, r) {
      var n = $(j++, 2);
      return n.__c || (n.__c = K, n.__ = [ r ? r(e) : lt(void 0, e), function(e) {
        var r = t(n.__[0], e);
        n.__[0] !== r && (n.__[0] = r, n.__c.setState({}));
      } ]), n.__;
    }
    function J(t, e) {
      var r = $(j++, 3);
      !n.__s && ht(r.__H, e) && (r.__ = t, r.__H = e, K.__H.__h.push(r));
    }
    function Q(t, e) {
      var r = $(j++, 4);
      !n.__s && ht(r.__H, e) && (r.__ = t, r.__H = e, K.__h.push(r));
    }
    function X(t) {
      return F = 5, et((function() {
        return {
          current: t
        };
      }), []);
    }
    function tt(t, e, r) {
      F = 6, Q((function() {
        "function" == typeof t ? t(e()) : t && (t.current = e());
      }), null == r ? r : r.concat(t));
    }
    function et(t, e) {
      var r = $(j++, 7);
      return ht(r.__H, e) ? (r.__H = e, r.__h = t, r.__ = t()) : r.__;
    }
    function rt(t, e) {
      return F = 8, et((function() {
        return t;
      }), e);
    }
    function nt(t) {
      var e = K.context[t.__c], r = $(j++, 9);
      return r.__c = t, e ? (null == r.__ && (r.__ = !0, e.sub(K)), e.props.value) : t.__;
    }
    function it(t, e) {
      n.useDebugValue && n.useDebugValue(e ? e(t) : t);
    }
    function ot(t) {
      var e = $(j++, 10), r = G();
      return e.__ = t, K.componentDidCatch || (K.componentDidCatch = function(t) {
        e.__ && e.__(t), r[1](t);
      }), [ r[0], function() {
        r[1](void 0);
      } ];
    }
    function at() {
      z.some((function(t) {
        if (t.__P) try {
          t.__H.__h.forEach(st), t.__H.__h.forEach(ut), t.__H.__h = [];
        } catch (i) {
          return t.__H.__h = [], n.__e(i, t.__v), !0;
        }
      })), z = [];
    }
    function st(t) {
      t.t && t.t();
    }
    function ut(t) {
      var e = t.__();
      "function" == typeof e && (t.t = e);
    }
    function ht(t, e) {
      return !t || e.some((function(e, r) {
        return e !== t[r];
      }));
    }
    function lt(t, e) {
      return "function" == typeof e ? e(t) : e;
    }
    function ct(t, e) {
      for (var r in e) t[r] = e[r];
      return t;
    }
    function ft(t, e) {
      for (var r in t) if ("__source" !== r && !(r in e)) return !0;
      for (var n in e) if ("__source" !== n && t[n] !== e[n]) return !0;
      return !1;
    }
    n.__r = function(t) {
      D && D(t), j = 0, (K = t.__c).__H && (K.__H.__h.forEach(st), K.__H.__h.forEach(ut), K.__H.__h = []);
    }, n.diffed = function(t) {
      Z && Z(t);
      var e = t.__c;
      if (e) {
        var r = e.__H;
        r && r.__h.length && (1 !== z.push(e) && H === n.requestAnimationFrame || ((H = n.requestAnimationFrame) || function(t) {
          var e, r = function() {
            clearTimeout(n), cancelAnimationFrame(e), setTimeout(t);
          }, n = setTimeout(r, 100);
          "undefined" != typeof window && (e = requestAnimationFrame(r));
        })(at));
      }
    }, n.__c = function(t, e) {
      e.some((function(t) {
        try {
          t.__h.forEach(st), t.__h = t.__h.filter((function(t) {
            return !t.__ || ut(t);
          }));
        } catch (s) {
          e.some((function(t) {
            t.__h && (t.__h = []);
          })), e = [], n.__e(s, t.__v);
        }
      })), W && W(t, e);
    }, n.unmount = function(t) {
      V && V(t);
      var e = t.__c;
      if (e) {
        var r = e.__H;
        if (r) try {
          r.__.forEach((function(t) {
            return t.t && t.t();
          }));
        } catch (t) {
          n.__e(t, e.__v);
        }
      }
    };
    var dt = function(t) {
      var e, r;
      function n(e) {
        var r;
        return (r = t.call(this, e) || this).isPureReactComponent = !0, r;
      }
      return r = t, (e = n).prototype = Object.create(r.prototype), e.prototype.constructor = e, e.__proto__ = r, n.prototype.shouldComponentUpdate = function(t, e) {
        return ft(this.props, t) || ft(this.state, e);
      }, n;
    }(w);
    function pt(t, e) {
      function r(t) {
        var r = this.props.ref, n = r == t.ref;
        return !n && r && (r.call ? r(null) : r.current = null), e ? !e(this.props, t) || !n : ft(this.props, t);
      }
      function n(e) {
        return this.shouldComponentUpdate = r, m(t, ct({}, e));
      }
      return n.prototype.isReactComponent = !0, n.displayName = "Memo(" + (t.displayName || t.name) + ")", n.t = !0, n;
    }
    var mt = n.__b;
    function vt(t) {
      function e(e) {
        var r = ct({}, e);
        return delete r.ref, t(r, e.ref);
      }
      return e.prototype.isReactComponent = e.t = !0, e.displayName = "ForwardRef(" + (t.displayName || t.name) + ")", e;
    }
    n.__b = function(t) {
      t.type && t.type.t && t.ref && (t.props.ref = t.ref, t.ref = null), mt && mt(t);
    };
    var gt = function(t, e) {
      return t ? A(t).reduce((function(t, r, n) {
        return t.concat(e(r, n));
      }), []) : null;
    }, yt = {
      map: gt,
      forEach: gt,
      count: function(t) {
        return t ? A(t).length : 0;
      },
      only: function(t) {
        if (1 !== (t = A(t)).length) throw new Error("Children.only() expects only one child.");
        return t[0];
      },
      toArray: A
    }, wt = n.__e;
    function _t(t) {
      return t && ((t = ct({}, t)).__c = null, t.__k = t.__k && t.__k.map(_t)), t;
    }
    function Mt() {
      this.__u = 0, this.o = null, this.__b = null;
    }
    function bt(t) {
      var e = t.__.__c;
      return e && e.u && e.u(t);
    }
    function kt(t) {
      var e, r, n;
      function i(i) {
        if (e || (e = t()).then((function(t) {
          r = t.default || t;
        }), (function(t) {
          n = t;
        })), n) throw n;
        if (!r) throw e;
        return m(r, i);
      }
      return i.displayName = "Lazy", i.t = !0, i;
    }
    function xt() {
      this.i = null, this.l = null;
    }
    n.__e = function(t, e, r) {
      if (t.then) for (var n, i = e; i = i.__; ) if ((n = i.__c) && n.__c) return n.__c(t, e.__c);
      wt(t, e, r);
    }, (Mt.prototype = new w).__c = function(t, e) {
      var r = this;
      null == r.o && (r.o = []), r.o.push(e);
      var n = bt(r.__v), i = !1, o = function() {
        i || (i = !0, n ? n(a) : a());
      };
      e.__c = e.componentWillUnmount, e.componentWillUnmount = function() {
        o(), e.__c && e.__c();
      };
      var a = function() {
        var t;
        if (!--r.__u) for (r.__v.__k[0] = r.state.u, r.setState({
          u: r.__b = null
        }); t = r.o.pop(); ) t.forceUpdate();
      };
      r.__u++ || r.setState({
        u: r.__b = r.__v.__k[0]
      }), t.then(o, o);
    }, Mt.prototype.render = function(t, e) {
      return this.__b && (this.__v.__k[0] = _t(this.__b), this.__b = null), [ m(w, null, e.u ? null : t.children), e.u && t.fallback ];
    };
    var At = function(t, e, r) {
      if (++r[1] === r[0] && t.l.delete(e), t.props.revealOrder && ("t" !== t.props.revealOrder[0] || !t.l.size)) for (r = t.i; r; ) {
        for (;r.length > 3; ) r.pop()();
        if (r[1] < r[0]) break;
        t.i = r = r[2];
      }
    };
    (xt.prototype = new w).u = function(t) {
      var e = this, r = bt(e.__v), n = e.l.get(t);
      return n[0]++, function(i) {
        var o = function() {
          e.props.revealOrder ? (n.push(i), At(e, t, n)) : i();
        };
        r ? r(o) : o();
      };
    }, xt.prototype.render = function(t) {
      this.i = null, this.l = new Map;
      var e = A(t.children);
      t.revealOrder && "b" === t.revealOrder[0] && e.reverse();
      for (var r = e.length; r--; ) this.l.set(e[r], this.i = [ 1, 0, this.i ]);
      return t.children;
    }, xt.prototype.componentDidUpdate = xt.prototype.componentDidMount = function() {
      var t = this;
      t.l.forEach((function(e, r) {
        At(t, r, e);
      }));
    };
    var Et = function() {
      function t() {}
      var e = t.prototype;
      return e.getChildContext = function() {
        return this.props.context;
      }, e.render = function(t) {
        return t.children;
      }, t;
    }();
    function St(t) {
      var e = this, r = t.container, n = m(Et, {
        context: e.context
      }, t.vnode);
      return e.s && e.s !== r && (e.v.parentNode && e.s.removeChild(e.v), P(e.h), e.p = !1), t.vnode ? e.p ? (r.__k = e.__k, O(n, r), 
      e.__k = r.__k) : (e.v = document.createTextNode(""), N("", r), r.appendChild(e.v), e.p = !0, e.s = r, O(n, r, e.v), e.__k = e.v.__k) : e.p && (e.v.parentNode && e.s.removeChild(e.v), 
      P(e.h)), e.h = n, e.componentWillUnmount = function() {
        e.v.parentNode && e.s.removeChild(e.v), P(e.h);
      }, null;
    }
    function Rt(t, e) {
      return m(St, {
        vnode: t,
        container: e
      });
    }
    var Ct = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
    w.prototype.isReactComponent = {};
    var Tt = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
    function Bt(t, e, r) {
      if (null == e.__k) for (;e.firstChild; ) e.removeChild(e.firstChild);
      return O(t, e), "function" == typeof r && r(), t ? t.__c : null;
    }
    function Lt(t, e, r) {
      return N(t, e), "function" == typeof r && r(), t ? t.__c : null;
    }
    var Pt = n.event;
    function It(t, e) {
      t["UNSAFE_" + e] && !t[e] && Object.defineProperty(t, e, {
        configurable: !1,
        get: function() {
          return this["UNSAFE_" + e];
        },
        set: function(t) {
          this["UNSAFE_" + e] = t;
        }
      });
    }
    n.event = function(t) {
      Pt && (t = Pt(t)), t.persist = function() {};
      var e = !1, r = !1, n = t.stopPropagation;
      t.stopPropagation = function() {
        n.call(t), e = !0;
      };
      var i = t.preventDefault;
      return t.preventDefault = function() {
        i.call(t), r = !0;
      }, t.isPropagationStopped = function() {
        return e;
      }, t.isDefaultPrevented = function() {
        return r;
      }, t.nativeEvent = t;
    };
    var Ot = {
      configurable: !0,
      get: function() {
        return this.class;
      }
    }, Nt = n.vnode;
    n.vnode = function(t) {
      t.$$typeof = Tt;
      var e = t.type, r = t.props;
      if (e) {
        if (r.class != r.className && (Ot.enumerable = "className" in r, null != r.className && (r.class = r.className), Object.defineProperty(r, "className", Ot)), 
        "function" != typeof e) {
          var n, i, o;
          for (o in r.defaultValue && void 0 !== r.value && (r.value || 0 === r.value || (r.value = r.defaultValue), delete r.defaultValue), 
          Array.isArray(r.value) && r.multiple && "select" === e && (A(r.children).forEach((function(t) {
            -1 != r.value.indexOf(t.props.value) && (t.props.selected = !0);
          })), delete r.value), r) if (n = Ct.test(o)) break;
          if (n) for (o in i = t.props = {}, r) i[Ct.test(o) ? o.replace(/[A-Z0-9]/, "-$&").toLowerCase() : o] = r[o];
        }
        !function(e) {
          var r = t.type, n = t.props;
          if (n && "string" == typeof r) {
            var i = {};
            for (var o in n) /^on(Ani|Tra|Tou)/.test(o) && (n[o.toLowerCase()] = n[o], delete n[o]), i[o.toLowerCase()] = o;
            if (i.ondoubleclick && (n.ondblclick = n[i.ondoubleclick], delete n[i.ondoubleclick]), i.onbeforeinput && (n.onbeforeinput = n[i.onbeforeinput], 
            delete n[i.onbeforeinput]), i.onchange && ("textarea" === r || "input" === r.toLowerCase() && !/^fil|che|ra/i.test(n.type))) {
              var a = i.oninput || "oninput";
              n[a] || (n[a] = n[i.onchange], delete n[i.onchange]);
            }
          }
        }(), "function" == typeof e && !e.m && e.prototype && (It(e.prototype, "componentWillMount"), It(e.prototype, "componentWillReceiveProps"), 
        It(e.prototype, "componentWillUpdate"), e.m = !0);
      }
      Nt && Nt(t);
    };
    var Ut = "16.8.0";
    function qt(t) {
      return m.bind(null, t);
    }
    function jt(t) {
      return !!t && t.$$typeof === Tt;
    }
    function Kt(t) {
      return jt(t) ? U.apply(null, arguments) : t;
    }
    function Ht(t) {
      return !!t.__k && (O(null, t), !0);
    }
    function Ft(t) {
      return t && (t.base || 1 === t.nodeType && t) || null;
    }
    var zt = function(t, e) {
      return t(e);
    };
    const Dt = {
      useState: G,
      useReducer: Y,
      useEffect: J,
      useLayoutEffect: Q,
      useRef: X,
      useImperativeHandle: tt,
      useMemo: et,
      useCallback: rt,
      useContext: nt,
      useDebugValue: it,
      version: "16.8.0",
      Children: yt,
      render: Bt,
      hydrate: Bt,
      unmountComponentAtNode: Ht,
      createPortal: Rt,
      createElement: m,
      createContext: q,
      createFactory: qt,
      cloneElement: Kt,
      createRef: g,
      Fragment: y,
      isValidElement: jt,
      findDOMNode: Ft,
      Component: w,
      PureComponent: dt,
      memo: pt,
      forwardRef: vt,
      unstable_batchedUpdates: zt,
      Suspense: Mt,
      SuspenseList: xt,
      lazy: kt
    };
  },
  92592: (t, e, r) => {
    var n = r(47138);
    var i = r(95115);
    var o = r(6907);
    var a = r(93776);
    function s(t, e, r, o, a) {
      var s = [].slice.call(arguments, 1);
      var u = s.length;
      var h = 'function' == typeof s[u - 1];
      if (!h && !n()) throw new Error('Callback required as last argument');
      if (!h) {
        if (u < 1) throw new Error('Too few arguments provided');
        return 1 === u ? (r = e, e = o = void 0) : 2 !== u || e.getContext || (o = r, r = e, e = void 0), new Promise((function(n, a) {
          try {
            var s = i.create(r, o);
            n(t(s, e, o));
          } catch (u) {
            a(u);
          }
        }));
      }
      if (u < 2) throw new Error('Too few arguments provided');
      2 === u ? (a = r, r = e, e = o = void 0) : 3 === u && (e.getContext && void 0 === a ? (a = o, o = void 0) : (a = o, o = r, 
      r = e, e = void 0));
      try {
        var l = i.create(r, o);
        a(null, t(l, e, o));
      } catch (c) {
        a(c);
      }
    }
    e.create = i.create, e.toCanvas = s.bind(null, o.render), e.toDataURL = s.bind(null, o.renderToDataURL), e.toString = s.bind(null, (function(t, e, r) {
      return a.render(t, r);
    }));
  },
  47138: t => {
    t.exports = function() {
      return 'function' == typeof Promise && Promise.prototype && Promise.prototype.then;
    };
  },
  21845: (t, e, r) => {
    var n = r(10242).getSymbolSize;
    e.getRowColCoords = function(t) {
      if (1 === t) return [];
      var e = Math.floor(t / 7) + 2;
      var r = n(t);
      var i = 145 === r ? 26 : 2 * Math.ceil((r - 13) / (2 * e - 2));
      var o = [ r - 7 ];
      for (var a = 1; a < e - 1; a++) o[a] = o[a - 1] - i;
      return o.push(6), o.reverse();
    }, e.getPositions = function(t) {
      var r = [];
      var n = e.getRowColCoords(t);
      var i = n.length;
      for (var o = 0; o < i; o++) for (var a = 0; a < i; a++) 0 === o && 0 === a || 0 === o && a === i - 1 || o === i - 1 && 0 === a || r.push([ n[o], n[a] ]);
      return r;
    };
  },
  8260: (t, e, r) => {
    var n = r(76910);
    var i = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':' ];
    function o(t) {
      this.mode = n.ALPHANUMERIC, this.data = t;
    }
    o.getBitsLength = function(t) {
      return 11 * Math.floor(t / 2) + t % 2 * 6;
    }, o.prototype.getLength = function() {
      return this.data.length;
    }, o.prototype.getBitsLength = function() {
      return o.getBitsLength(this.data.length);
    }, o.prototype.write = function(t) {
      var e;
      for (e = 0; e + 2 <= this.data.length; e += 2) {
        var r = 45 * i.indexOf(this.data[e]);
        r += i.indexOf(this.data[e + 1]), t.put(r, 11);
      }
      this.data.length % 2 && t.put(i.indexOf(this.data[e]), 6);
    }, t.exports = o;
  },
  97245: t => {
    function e() {
      this.buffer = [], this.length = 0;
    }
    e.prototype = {
      get: function(t) {
        var e = Math.floor(t / 8);
        return 1 == (this.buffer[e] >>> 7 - t % 8 & 1);
      },
      put: function(t, e) {
        for (var r = 0; r < e; r++) this.putBit(1 == (t >>> e - r - 1 & 1));
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(t) {
        var e = Math.floor(this.length / 8);
        this.buffer.length <= e && this.buffer.push(0), t && (this.buffer[e] |= 128 >>> this.length % 8), this.length++;
      }
    }, t.exports = e;
  },
  73280: (t, e, r) => {
    var n = r(99131);
    function i(t) {
      if (!t || t < 1) throw new Error('BitMatrix size must be defined and greater than 0');
      this.size = t, this.data = n.alloc(t * t), this.reservedBit = n.alloc(t * t);
    }
    i.prototype.set = function(t, e, r, n) {
      var i = t * this.size + e;
      this.data[i] = r, n && (this.reservedBit[i] = !0);
    }, i.prototype.get = function(t, e) {
      return this.data[t * this.size + e];
    }, i.prototype.xor = function(t, e, r) {
      this.data[t * this.size + e] ^= r;
    }, i.prototype.isReserved = function(t, e) {
      return this.reservedBit[t * this.size + e];
    }, t.exports = i;
  },
  43424: (t, e, r) => {
    var n = r(99131);
    var i = r(76910);
    function o(t) {
      this.mode = i.BYTE, this.data = n.from(t);
    }
    o.getBitsLength = function(t) {
      return 8 * t;
    }, o.prototype.getLength = function() {
      return this.data.length;
    }, o.prototype.getBitsLength = function() {
      return o.getBitsLength(this.data.length);
    }, o.prototype.write = function(t) {
      for (var e = 0, r = this.data.length; e < r; e++) t.put(this.data[e], 8);
    }, t.exports = o;
  },
  35393: (t, e, r) => {
    var n = r(64908);
    var i = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81 ];
    var o = [ 7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430 ];
    e.getBlocksCount = function(t, e) {
      switch (e) {
       case n.L:
        return i[4 * (t - 1) + 0];

       case n.M:
        return i[4 * (t - 1) + 1];

       case n.Q:
        return i[4 * (t - 1) + 2];

       case n.H:
        return i[4 * (t - 1) + 3];

       default:
        return;
      }
    }, e.getTotalCodewordsCount = function(t, e) {
      switch (e) {
       case n.L:
        return o[4 * (t - 1) + 0];

       case n.M:
        return o[4 * (t - 1) + 1];

       case n.Q:
        return o[4 * (t - 1) + 2];

       case n.H:
        return o[4 * (t - 1) + 3];

       default:
        return;
      }
    };
  },
  64908: (t, e) => {
    e.L = {
      bit: 1
    }, e.M = {
      bit: 0
    }, e.Q = {
      bit: 3
    }, e.H = {
      bit: 2
    }, e.isValid = function(t) {
      return t && void 0 !== t.bit && t.bit >= 0 && t.bit < 4;
    }, e.from = function(t, r) {
      if (e.isValid(t)) return t;
      try {
        return function(t) {
          if ('string' != typeof t) throw new Error('Param is not a string');
          switch (t.toLowerCase()) {
           case 'l':
           case 'low':
            return e.L;

           case 'm':
           case 'medium':
            return e.M;

           case 'q':
           case 'quartile':
            return e.Q;

           case 'h':
           case 'high':
            return e.H;

           default:
            throw new Error('Unknown EC Level: ' + t);
          }
        }(t);
      } catch (n) {
        return r;
      }
    };
  },
  76526: (t, e, r) => {
    var n = r(10242).getSymbolSize;
    e.getPositions = function(t) {
      var e = n(t);
      return [ [ 0, 0 ], [ e - 7, 0 ], [ 0, e - 7 ] ];
    };
  },
  61642: (t, e, r) => {
    var n = r(10242);
    var i = n.getBCHDigit(1335);
    e.getEncodedBits = function(t, e) {
      var r = t.bit << 3 | e;
      var o = r << 10;
      for (;n.getBCHDigit(o) - i >= 0; ) o ^= 1335 << n.getBCHDigit(o) - i;
      return 21522 ^ (r << 10 | o);
    };
  },
  69729: (t, e, r) => {
    var n = r(99131);
    var i = n.alloc(512);
    var o = n.alloc(256);
    !function() {
      var t = 1;
      for (var e = 0; e < 255; e++) i[e] = t, o[t] = e, 256 & (t <<= 1) && (t ^= 285);
      for (e = 255; e < 512; e++) i[e] = i[e - 255];
    }(), e.log = function(t) {
      if (t < 1) throw new Error('log(' + t + ')');
      return o[t];
    }, e.exp = function(t) {
      return i[t];
    }, e.mul = function(t, e) {
      return 0 === t || 0 === e ? 0 : i[o[t] + o[e]];
    };
  },
  35442: (t, e, r) => {
    var n = r(76910);
    var i = r(10242);
    function o(t) {
      this.mode = n.KANJI, this.data = t;
    }
    o.getBitsLength = function(t) {
      return 13 * t;
    }, o.prototype.getLength = function() {
      return this.data.length;
    }, o.prototype.getBitsLength = function() {
      return o.getBitsLength(this.data.length);
    }, o.prototype.write = function(t) {
      var e;
      for (e = 0; e < this.data.length; e++) {
        var r = i.toSJIS(this.data[e]);
        if (r >= 33088 && r <= 40956) r -= 33088; else {
          if (!(r >= 57408 && r <= 60351)) throw new Error('Invalid SJIS character: ' + this.data[e] + "\nMake sure your charset is UTF-8");
          r -= 49472;
        }
        r = 192 * (r >>> 8 & 255) + (255 & r), t.put(r, 13);
      }
    }, t.exports = o;
  },
  27126: (t, e) => {
    e.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var r = 3, n = 3, i = 40, o = 10;
    function a(t, r, n) {
      switch (t) {
       case e.Patterns.PATTERN000:
        return (r + n) % 2 == 0;

       case e.Patterns.PATTERN001:
        return r % 2 == 0;

       case e.Patterns.PATTERN010:
        return n % 3 == 0;

       case e.Patterns.PATTERN011:
        return (r + n) % 3 == 0;

       case e.Patterns.PATTERN100:
        return (Math.floor(r / 2) + Math.floor(n / 3)) % 2 == 0;

       case e.Patterns.PATTERN101:
        return r * n % 2 + r * n % 3 == 0;

       case e.Patterns.PATTERN110:
        return (r * n % 2 + r * n % 3) % 2 == 0;

       case e.Patterns.PATTERN111:
        return (r * n % 3 + (r + n) % 2) % 2 == 0;

       default:
        throw new Error('bad maskPattern:' + t);
      }
    }
    e.isValid = function(t) {
      return null != t && '' !== t && !isNaN(t) && t >= 0 && t <= 7;
    }, e.from = function(t) {
      return e.isValid(t) ? parseInt(t, 10) : void 0;
    }, e.getPenaltyN1 = function(t) {
      var e = t.size;
      var n = 0;
      var i = 0;
      var o = 0;
      var a = null;
      var s = null;
      for (var u = 0; u < e; u++) {
        i = o = 0, a = s = null;
        for (var h = 0; h < e; h++) {
          var l = t.get(u, h);
          l === a ? i++ : (i >= 5 && (n += r + (i - 5)), a = l, i = 1), (l = t.get(h, u)) === s ? o++ : (o >= 5 && (n += r + (o - 5)), 
          s = l, o = 1);
        }
        i >= 5 && (n += r + (i - 5)), o >= 5 && (n += r + (o - 5));
      }
      return n;
    }, e.getPenaltyN2 = function(t) {
      var e = t.size;
      var r = 0;
      for (var i = 0; i < e - 1; i++) for (var o = 0; o < e - 1; o++) {
        var a = t.get(i, o) + t.get(i, o + 1) + t.get(i + 1, o) + t.get(i + 1, o + 1);
        4 !== a && 0 !== a || r++;
      }
      return r * n;
    }, e.getPenaltyN3 = function(t) {
      var e = t.size;
      var r = 0;
      var n = 0;
      var o = 0;
      for (var a = 0; a < e; a++) {
        n = o = 0;
        for (var s = 0; s < e; s++) n = n << 1 & 2047 | t.get(a, s), s >= 10 && (1488 === n || 93 === n) && r++, o = o << 1 & 2047 | t.get(s, a), 
        s >= 10 && (1488 === o || 93 === o) && r++;
      }
      return r * i;
    }, e.getPenaltyN4 = function(t) {
      var e = 0;
      var r = t.data.length;
      for (var n = 0; n < r; n++) e += t.data[n];
      return Math.abs(Math.ceil(100 * e / r / 5) - 10) * o;
    }, e.applyMask = function(t, e) {
      var r = e.size;
      for (var n = 0; n < r; n++) for (var i = 0; i < r; i++) e.isReserved(i, n) || e.xor(i, n, a(t, i, n));
    }, e.getBestMask = function(t, r) {
      var n = Object.keys(e.Patterns).length;
      var i = 0;
      var o = Infinity;
      for (var a = 0; a < n; a++) {
        r(a), e.applyMask(a, t);
        var s = e.getPenaltyN1(t) + e.getPenaltyN2(t) + e.getPenaltyN3(t) + e.getPenaltyN4(t);
        e.applyMask(a, t), s < o && (o = s, i = a);
      }
      return i;
    };
  },
  76910: (t, e, r) => {
    var n = r(43114);
    var i = r(7007);
    e.NUMERIC = {
      id: 'Numeric',
      bit: 1,
      ccBits: [ 10, 12, 14 ]
    }, e.ALPHANUMERIC = {
      id: 'Alphanumeric',
      bit: 2,
      ccBits: [ 9, 11, 13 ]
    }, e.BYTE = {
      id: 'Byte',
      bit: 4,
      ccBits: [ 8, 16, 16 ]
    }, e.KANJI = {
      id: 'Kanji',
      bit: 8,
      ccBits: [ 8, 10, 12 ]
    }, e.MIXED = {
      bit: -1
    }, e.getCharCountIndicator = function(t, e) {
      if (!t.ccBits) throw new Error('Invalid mode: ' + t);
      if (!n.isValid(e)) throw new Error('Invalid version: ' + e);
      return e >= 1 && e < 10 ? t.ccBits[0] : e < 27 ? t.ccBits[1] : t.ccBits[2];
    }, e.getBestModeForData = function(t) {
      return i.testNumeric(t) ? e.NUMERIC : i.testAlphanumeric(t) ? e.ALPHANUMERIC : i.testKanji(t) ? e.KANJI : e.BYTE;
    }, e.toString = function(t) {
      if (t && t.id) return t.id;
      throw new Error('Invalid mode');
    }, e.isValid = function(t) {
      return t && t.bit && t.ccBits;
    }, e.from = function(t, r) {
      if (e.isValid(t)) return t;
      try {
        return function(t) {
          if ('string' != typeof t) throw new Error('Param is not a string');
          switch (t.toLowerCase()) {
           case 'numeric':
            return e.NUMERIC;

           case 'alphanumeric':
            return e.ALPHANUMERIC;

           case 'kanji':
            return e.KANJI;

           case 'byte':
            return e.BYTE;

           default:
            throw new Error('Unknown mode: ' + t);
          }
        }(t);
      } catch (n) {
        return r;
      }
    };
  },
  41085: (t, e, r) => {
    var n = r(76910);
    function i(t) {
      this.mode = n.NUMERIC, this.data = t.toString();
    }
    i.getBitsLength = function(t) {
      return 10 * Math.floor(t / 3) + (t % 3 ? t % 3 * 3 + 1 : 0);
    }, i.prototype.getLength = function() {
      return this.data.length;
    }, i.prototype.getBitsLength = function() {
      return i.getBitsLength(this.data.length);
    }, i.prototype.write = function(t) {
      var e, r, n;
      for (e = 0; e + 3 <= this.data.length; e += 3) r = this.data.substr(e, 3), n = parseInt(r, 10), t.put(n, 10);
      var i = this.data.length - e;
      i > 0 && (r = this.data.substr(e), n = parseInt(r, 10), t.put(n, 3 * i + 1));
    }, t.exports = i;
  },
  26143: (t, e, r) => {
    var n = r(99131);
    var i = r(69729);
    e.mul = function(t, e) {
      var r = n.alloc(t.length + e.length - 1);
      for (var o = 0; o < t.length; o++) for (var a = 0; a < e.length; a++) r[o + a] ^= i.mul(t[o], e[a]);
      return r;
    }, e.mod = function(t, e) {
      var r = n.from(t);
      for (;r.length - e.length >= 0; ) {
        var o = r[0];
        for (var a = 0; a < e.length; a++) r[a] ^= i.mul(e[a], o);
        var s = 0;
        for (;s < r.length && 0 === r[s]; ) s++;
        r = r.slice(s);
      }
      return r;
    }, e.generateECPolynomial = function(t) {
      var r = n.from([ 1 ]);
      for (var o = 0; o < t; o++) r = e.mul(r, [ 1, i.exp(o) ]);
      return r;
    };
  },
  95115: (t, e, r) => {
    var n = r(99131);
    var i = r(10242);
    var o = r(64908);
    var a = r(97245);
    var s = r(73280);
    var u = r(21845);
    var h = r(76526);
    var l = r(27126);
    var c = r(35393);
    var f = r(52882);
    var d = r(23103);
    var p = r(61642);
    var m = r(76910);
    var v = r(16130);
    var g = r(5826);
    function y(t, e, r) {
      var n = t.size;
      var i = p.getEncodedBits(e, r);
      var o, a;
      for (o = 0; o < 15; o++) a = 1 == (i >> o & 1), o < 6 ? t.set(o, 8, a, !0) : o < 8 ? t.set(o + 1, 8, a, !0) : t.set(n - 15 + o, 8, a, !0), 
      o < 8 ? t.set(8, n - o - 1, a, !0) : o < 9 ? t.set(8, 15 - o - 1 + 1, a, !0) : t.set(8, 15 - o - 1, a, !0);
      t.set(n - 8, 8, 1, !0);
    }
    function w(t, e, r) {
      var o = new a;
      r.forEach((function(e) {
        o.put(e.mode.bit, 4), o.put(e.getLength(), m.getCharCountIndicator(e.mode, t)), e.write(o);
      }));
      var s = 8 * (i.getSymbolTotalCodewords(t) - c.getTotalCodewordsCount(t, e));
      for (o.getLengthInBits() + 4 <= s && o.put(0, 4); o.getLengthInBits() % 8 != 0; ) o.putBit(0);
      var u = (s - o.getLengthInBits()) / 8;
      for (var h = 0; h < u; h++) o.put(h % 2 ? 17 : 236, 8);
      return function(t, e, r) {
        var o = i.getSymbolTotalCodewords(e);
        var a = c.getTotalCodewordsCount(e, r);
        var s = o - a;
        var u = c.getBlocksCount(e, r);
        var h = u - o % u;
        var l = Math.floor(o / u);
        var d = Math.floor(s / u);
        var p = d + 1;
        var m = l - d;
        var v = new f(m);
        var g = 0;
        var y = new Array(u);
        var w = new Array(u);
        var _ = 0;
        var M = n.from(t.buffer);
        for (var b = 0; b < u; b++) {
          var k = b < h ? d : p;
          y[b] = M.slice(g, g + k), w[b] = v.encode(y[b]), g += k, _ = Math.max(_, k);
        }
        var x = n.alloc(o);
        var A = 0;
        var E, S;
        for (E = 0; E < _; E++) for (S = 0; S < u; S++) E < y[S].length && (x[A++] = y[S][E]);
        for (E = 0; E < m; E++) for (S = 0; S < u; S++) x[A++] = w[S][E];
        return x;
      }(o, t, e);
    }
    function _(t, e, r, n) {
      var o;
      if (g(t)) o = v.fromArray(t); else {
        if ('string' != typeof t) throw new Error('Invalid data');
        var a = e;
        if (!a) {
          var c = v.rawSplit(t);
          a = d.getBestVersionForData(c, r);
        }
        o = v.fromString(t, a || 40);
      }
      var f = d.getBestVersionForData(o, r);
      if (!f) throw new Error('The amount of data is too big to be stored in a QR Code');
      if (e) {
        if (e < f) throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + f + '.\n');
      } else e = f;
      var p = w(e, r, o);
      var m = i.getSymbolSize(e);
      var _ = new s(m);
      return function(t, e) {
        var r = t.size;
        var n = h.getPositions(e);
        for (var i = 0; i < n.length; i++) {
          var o = n[i][0];
          var a = n[i][1];
          for (var s = -1; s <= 7; s++) if (!(o + s <= -1 || r <= o + s)) for (var u = -1; u <= 7; u++) a + u <= -1 || r <= a + u || (s >= 0 && s <= 6 && (0 === u || 6 === u) || u >= 0 && u <= 6 && (0 === s || 6 === s) || s >= 2 && s <= 4 && u >= 2 && u <= 4 ? t.set(o + s, a + u, !0, !0) : t.set(o + s, a + u, !1, !0));
        }
      }(_, e), function(t) {
        var e = t.size;
        for (var r = 8; r < e - 8; r++) {
          var n = r % 2 == 0;
          t.set(r, 6, n, !0), t.set(6, r, n, !0);
        }
      }(_), function(t, e) {
        var r = u.getPositions(e);
        for (var n = 0; n < r.length; n++) {
          var i = r[n][0];
          var o = r[n][1];
          for (var a = -2; a <= 2; a++) for (var s = -2; s <= 2; s++) -2 === a || 2 === a || -2 === s || 2 === s || 0 === a && 0 === s ? t.set(i + a, o + s, !0, !0) : t.set(i + a, o + s, !1, !0);
        }
      }(_, e), y(_, r, 0), e >= 7 && function(t, e) {
        var r = t.size;
        var n = d.getEncodedBits(e);
        var i, o, a;
        for (var s = 0; s < 18; s++) i = Math.floor(s / 3), o = s % 3 + r - 8 - 3, a = 1 == (n >> s & 1), t.set(i, o, a, !0), t.set(o, i, a, !0);
      }(_, e), function(t, e) {
        var r = t.size;
        var n = -1;
        var i = r - 1;
        var o = 7;
        var a = 0;
        for (var s = r - 1; s > 0; s -= 2) for (6 === s && s--; ;) {
          for (var u = 0; u < 2; u++) if (!t.isReserved(i, s - u)) {
            var h = !1;
            a < e.length && (h = 1 == (e[a] >>> o & 1)), t.set(i, s - u, h), -1 == --o && (a++, o = 7);
          }
          if ((i += n) < 0 || r <= i) {
            i -= n, n = -n;
            break;
          }
        }
      }(_, p), isNaN(n) && (n = l.getBestMask(_, y.bind(null, _, r))), l.applyMask(n, _), y(_, r, n), {
        modules: _,
        version: e,
        errorCorrectionLevel: r,
        maskPattern: n,
        segments: o
      };
    }
    e.create = function(t, e) {
      if (void 0 === t || '' === t) throw new Error('No input text');
      var r = o.M;
      var n;
      var a;
      return void 0 !== e && (r = o.from(e.errorCorrectionLevel, o.M), n = d.from(e.version), a = l.from(e.maskPattern), e.toSJISFunc && i.setToSJISFunction(e.toSJISFunc)), 
      _(t, n, r, a);
    };
  },
  52882: (t, e, r) => {
    var n = r(99131);
    var i = r(26143);
    var o = r(6772).lW;
    function a(t) {
      this.genPoly = void 0, this.degree = t, this.degree && this.initialize(this.degree);
    }
    a.prototype.initialize = function(t) {
      this.degree = t, this.genPoly = i.generateECPolynomial(this.degree);
    }, a.prototype.encode = function(t) {
      if (!this.genPoly) throw new Error('Encoder not initialized');
      var e = n.alloc(this.degree);
      var r = o.concat([ t, e ], t.length + this.degree);
      var a = i.mod(r, this.genPoly);
      var s = this.degree - a.length;
      if (s > 0) {
        var u = n.alloc(this.degree);
        return a.copy(u, s), u;
      }
      return a;
    }, t.exports = a;
  },
  7007: (t, e) => {
    var r = '[0-9]+';
    var n = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
    var i = '(?:(?![A-Z0-9 $%*+\\-./:]|' + (n = n.replace(/u/g, '\\u')) + ')(?:.|[\r\n]))+';
    e.KANJI = new RegExp(n, 'g'), e.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g'), e.BYTE = new RegExp(i, 'g'), e.NUMERIC = new RegExp(r, 'g'), 
    e.ALPHANUMERIC = new RegExp('[A-Z $%*+\\-./:]+', 'g');
    var o = new RegExp('^' + n + '$');
    var a = new RegExp("^[0-9]+$");
    var s = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');
    e.testKanji = function(t) {
      return o.test(t);
    }, e.testNumeric = function(t) {
      return a.test(t);
    }, e.testAlphanumeric = function(t) {
      return s.test(t);
    };
  },
  16130: (t, e, r) => {
    var n = r(76910);
    var i = r(41085);
    var o = r(8260);
    var a = r(43424);
    var s = r(35442);
    var u = r(7007);
    var h = r(10242);
    var l = r(65987);
    function c(t) {
      return unescape(encodeURIComponent(t)).length;
    }
    function f(t, e, r) {
      var n = [];
      var i;
      for (;null !== (i = t.exec(r)); ) n.push({
        data: i[0],
        index: i.index,
        mode: e,
        length: i[0].length
      });
      return n;
    }
    function d(t) {
      var e = f(u.NUMERIC, n.NUMERIC, t);
      var r = f(u.ALPHANUMERIC, n.ALPHANUMERIC, t);
      var i;
      var o;
      return h.isKanjiModeEnabled() ? (i = f(u.BYTE, n.BYTE, t), o = f(u.KANJI, n.KANJI, t)) : (i = f(u.BYTE_KANJI, n.BYTE, t), 
      o = []), e.concat(r, i, o).sort((function(t, e) {
        return t.index - e.index;
      })).map((function(t) {
        return {
          data: t.data,
          mode: t.mode,
          length: t.length
        };
      }));
    }
    function p(t, e) {
      switch (e) {
       case n.NUMERIC:
        return i.getBitsLength(t);

       case n.ALPHANUMERIC:
        return o.getBitsLength(t);

       case n.KANJI:
        return s.getBitsLength(t);

       case n.BYTE:
        return a.getBitsLength(t);
      }
    }
    function m(t, e) {
      var r;
      var u = n.getBestModeForData(t);
      if ((r = n.from(e, u)) !== n.BYTE && r.bit < u.bit) throw new Error('"' + t + "\" cannot be encoded with mode " + n.toString(r) + '.\n Suggested mode is: ' + n.toString(u));
      switch (r !== n.KANJI || h.isKanjiModeEnabled() || (r = n.BYTE), r) {
       case n.NUMERIC:
        return new i(t);

       case n.ALPHANUMERIC:
        return new o(t);

       case n.KANJI:
        return new s(t);

       case n.BYTE:
        return new a(t);
      }
    }
    e.fromArray = function(t) {
      return t.reduce((function(t, e) {
        return 'string' == typeof e ? t.push(m(e, null)) : e.data && t.push(m(e.data, e.mode)), t;
      }), []);
    }, e.fromString = function(t, r) {
      var i = function(t) {
        var e = [];
        for (var r = 0; r < t.length; r++) {
          var i = t[r];
          switch (i.mode) {
           case n.NUMERIC:
            e.push([ i, {
              data: i.data,
              mode: n.ALPHANUMERIC,
              length: i.length
            }, {
              data: i.data,
              mode: n.BYTE,
              length: i.length
            } ]);
            break;

           case n.ALPHANUMERIC:
            e.push([ i, {
              data: i.data,
              mode: n.BYTE,
              length: i.length
            } ]);
            break;

           case n.KANJI:
            e.push([ i, {
              data: i.data,
              mode: n.BYTE,
              length: c(i.data)
            } ]);
            break;

           case n.BYTE:
            e.push([ {
              data: i.data,
              mode: n.BYTE,
              length: c(i.data)
            } ]);
          }
        }
        return e;
      }(d(t, h.isKanjiModeEnabled()));
      var o = function(t, e) {
        var r = {};
        var i = {
          start: {}
        };
        var o = [ 'start' ];
        for (var a = 0; a < t.length; a++) {
          var s = t[a];
          var u = [];
          for (var h = 0; h < s.length; h++) {
            var l = s[h];
            var c = '' + a + h;
            u.push(c), r[c] = {
              node: l,
              lastCount: 0
            }, i[c] = {};
            for (var f = 0; f < o.length; f++) {
              var d = o[f];
              r[d] && r[d].node.mode === l.mode ? (i[d][c] = p(r[d].lastCount + l.length, l.mode) - p(r[d].lastCount, l.mode), r[d].lastCount += l.length) : (r[d] && (r[d].lastCount = l.length), 
              i[d][c] = p(l.length, l.mode) + 4 + n.getCharCountIndicator(l.mode, e));
            }
          }
          o = u;
        }
        for (f = 0; f < o.length; f++) i[o[f]].end = 0;
        return {
          map: i,
          table: r
        };
      }(i, r);
      var a = l.find_path(o.map, 'start', 'end');
      var s = [];
      for (var u = 1; u < a.length - 1; u++) s.push(o.table[a[u]].node);
      return e.fromArray(function(t) {
        return t.reduce((function(t, e) {
          var r = t.length - 1 >= 0 ? t[t.length - 1] : null;
          return r && r.mode === e.mode ? (t[t.length - 1].data += e.data, t) : (t.push(e), t);
        }), []);
      }(s));
    }, e.rawSplit = function(t) {
      return e.fromArray(d(t, h.isKanjiModeEnabled()));
    };
  },
  10242: (t, e) => {
    var r;
    var n = [ 0, 26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706 ];
    e.getSymbolSize = function(t) {
      if (!t) throw new Error('"version" cannot be null or undefined');
      if (t < 1 || t > 40) throw new Error('"version" should be in range from 1 to 40');
      return 4 * t + 17;
    }, e.getSymbolTotalCodewords = function(t) {
      return n[t];
    }, e.getBCHDigit = function(t) {
      var e = 0;
      for (;0 !== t; ) e++, t >>>= 1;
      return e;
    }, e.setToSJISFunction = function(t) {
      if ('function' != typeof t) throw new Error('"toSJISFunc" is not a valid function.');
      r = t;
    }, e.isKanjiModeEnabled = function() {
      return void 0 !== r;
    }, e.toSJIS = function(t) {
      return r(t);
    };
  },
  43114: (t, e) => {
    e.isValid = function(t) {
      return !isNaN(t) && t >= 1 && t <= 40;
    };
  },
  23103: (t, e, r) => {
    var n = r(10242);
    var i = r(35393);
    var o = r(64908);
    var a = r(76910);
    var s = r(43114);
    var u = r(5826);
    var h = n.getBCHDigit(7973);
    function l(t, e) {
      return a.getCharCountIndicator(t, e) + 4;
    }
    function c(t, e) {
      var r = 0;
      return t.forEach((function(t) {
        var n = l(t.mode, e);
        r += n + t.getBitsLength();
      })), r;
    }
    e.from = function(t, e) {
      return s.isValid(t) ? parseInt(t, 10) : e;
    }, e.getCapacity = function(t, e, r) {
      if (!s.isValid(t)) throw new Error('Invalid QR Code version');
      void 0 === r && (r = a.BYTE);
      var o = 8 * (n.getSymbolTotalCodewords(t) - i.getTotalCodewordsCount(t, e));
      if (r === a.MIXED) return o;
      var u = o - l(r, t);
      switch (r) {
       case a.NUMERIC:
        return Math.floor(u / 10 * 3);

       case a.ALPHANUMERIC:
        return Math.floor(u / 11 * 2);

       case a.KANJI:
        return Math.floor(u / 13);

       case a.BYTE:
       default:
        return Math.floor(u / 8);
      }
    }, e.getBestVersionForData = function(t, r) {
      var n;
      var i = o.from(r, o.M);
      if (u(t)) {
        if (t.length > 1) return function(t, r) {
          for (var n = 1; n <= 40; n++) if (c(t, n) <= e.getCapacity(n, r, a.MIXED)) return n;
        }(t, i);
        if (0 === t.length) return 1;
        n = t[0];
      } else n = t;
      return function(t, r, n) {
        for (var i = 1; i <= 40; i++) if (r <= e.getCapacity(i, n, t)) return i;
      }(n.mode, n.getLength(), i);
    }, e.getEncodedBits = function(t) {
      if (!s.isValid(t) || t < 7) throw new Error('Invalid QR Code version');
      var e = t << 12;
      for (;n.getBCHDigit(e) - h >= 0; ) e ^= 7973 << n.getBCHDigit(e) - h;
      return t << 12 | e;
    };
  },
  6907: (t, e, r) => {
    var n = r(89653);
    e.render = function(t, e, r) {
      var i = r;
      var o = e;
      void 0 !== i || e && e.getContext || (i = e, e = void 0), e || (o = function() {
        try {
          return document.createElement('canvas');
        } catch (t) {
          throw new Error('You need to specify a canvas element');
        }
      }()), i = n.getOptions(i);
      var a = n.getImageWidth(t.modules.size, i);
      var s = o.getContext('2d');
      var u = s.createImageData(a, a);
      return n.qrToImageData(u.data, t, i), function(t, e, r) {
        t.clearRect(0, 0, e.width, e.height), e.style || (e.style = {}), e.height = r, e.width = r, e.style.height = r + 'px', e.style.width = r + 'px';
      }(s, o, a), s.putImageData(u, 0, 0), o;
    }, e.renderToDataURL = function(t, r, n) {
      var i = n;
      void 0 !== i || r && r.getContext || (i = r, r = void 0), i || (i = {});
      var o = e.render(t, r, i);
      var a = i.type || 'image/png';
      var s = i.rendererOpts || {};
      return o.toDataURL(a, s.quality);
    };
  },
  93776: (t, e, r) => {
    var n = r(89653);
    function i(t, e) {
      var r = t.a / 255;
      var n = e + '="' + t.hex + '"';
      return r < 1 ? n + ' ' + e + '-opacity="' + r.toFixed(2).slice(1) + '"' : n;
    }
    function o(t, e, r) {
      var n = t + e;
      return void 0 !== r && (n += ' ' + r), n;
    }
    e.render = function(t, e, r) {
      var a = n.getOptions(e);
      var s = t.modules.size;
      var u = t.modules.data;
      var h = s + 2 * a.margin;
      var l = a.color.light.a ? '<path ' + i(a.color.light, 'fill') + ' d="M0 0h' + h + 'v' + h + 'H0z"/>' : '';
      var c = '<path ' + i(a.color.dark, 'stroke') + ' d="' + function(t, e, r) {
        var n = '';
        var i = 0;
        var a = !1;
        var s = 0;
        for (var u = 0; u < t.length; u++) {
          var h = Math.floor(u % e);
          var l = Math.floor(u / e);
          h || a || (a = !0), t[u] ? (s++, u > 0 && h > 0 && t[u - 1] || (n += a ? o('M', h + r, .5 + l + r) : o('m', i, 0), i = 0, 
          a = !1), h + 1 < e && t[u + 1] || (n += o('h', s), s = 0)) : i++;
        }
        return n;
      }(u, s, a.margin) + '"/>';
      var f = "viewBox=\"0 0 " + h + ' ' + h + '"';
      var d = '<svg xmlns="http://www.w3.org/2000/svg" ' + (a.width ? 'width="' + a.width + '" height="' + a.width + '" ' : '') + f + ' shape-rendering="crispEdges">' + l + c + '</svg>\n';
      return 'function' == typeof r && r(null, d), d;
    };
  },
  89653: (t, e) => {
    function r(t) {
      if ('number' == typeof t && (t = t.toString()), 'string' != typeof t) throw new Error('Color should be defined as hex string');
      var e = t.slice().replace('#', '').split('');
      if (e.length < 3 || 5 === e.length || e.length > 8) throw new Error('Invalid hex color: ' + t);
      3 !== e.length && 4 !== e.length || (e = Array.prototype.concat.apply([], e.map((function(t) {
        return [ t, t ];
      })))), 6 === e.length && e.push('F', 'F');
      var r = parseInt(e.join(''), 16);
      return {
        r: r >> 24 & 255,
        g: r >> 16 & 255,
        b: r >> 8 & 255,
        a: 255 & r,
        hex: '#' + e.slice(0, 6).join('')
      };
    }
    e.getOptions = function(t) {
      t || (t = {}), t.color || (t.color = {});
      var e = void 0 === t.margin || null === t.margin || t.margin < 0 ? 4 : t.margin;
      var n = t.width && t.width >= 21 ? t.width : void 0;
      var i = t.scale || 4;
      return {
        width: n,
        scale: n ? 4 : i,
        margin: e,
        color: {
          dark: r(t.color.dark || '#000000ff'),
          light: r(t.color.light || '#ffffffff')
        },
        type: t.type,
        rendererOpts: t.rendererOpts || {}
      };
    }, e.getScale = function(t, e) {
      return e.width && e.width >= t + 2 * e.margin ? e.width / (t + 2 * e.margin) : e.scale;
    }, e.getImageWidth = function(t, r) {
      var n = e.getScale(t, r);
      return Math.floor((t + 2 * r.margin) * n);
    }, e.qrToImageData = function(t, r, n) {
      var i = r.modules.size;
      var o = r.modules.data;
      var a = e.getScale(i, n);
      var s = Math.floor((i + 2 * n.margin) * a);
      var u = n.margin * a;
      var h = [ n.color.light, n.color.dark ];
      for (var l = 0; l < s; l++) for (var c = 0; c < s; c++) {
        var f = 4 * (l * s + c);
        var d = n.color.light;
        if (l >= u && c >= u && l < s - u && c < s - u) d = h[o[Math.floor((l - u) / a) * i + Math.floor((c - u) / a)] ? 1 : 0];
        t[f++] = d.r, t[f++] = d.g, t[f++] = d.b, t[f] = d.a;
      }
    };
  },
  99131: (t, e, r) => {
    "use strict";
    var n = r(5826);
    o.TYPED_ARRAY_SUPPORT = function() {
      try {
        var t = new Uint8Array(1);
        return t.__proto__ = {
          __proto__: Uint8Array.prototype,
          foo: function() {
            return 42;
          }
        }, 42 === t.foo();
      } catch (e) {
        return !1;
      }
    }();
    var i = o.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    function o(t, e, r) {
      return o.TYPED_ARRAY_SUPPORT || this instanceof o ? 'number' == typeof t ? u(this, t) : function(t, e, r, n) {
        if ('number' == typeof e) throw new TypeError('"value" argument must not be a number');
        if ('undefined' != typeof ArrayBuffer && e instanceof ArrayBuffer) return function(t, e, r, n) {
          if (r < 0 || e.byteLength < r) throw new RangeError('\'offset\' is out of bounds');
          if (e.byteLength < r + (n || 0)) throw new RangeError('\'length\' is out of bounds');
          var i;
          i = void 0 === r && void 0 === n ? new Uint8Array(e) : void 0 === n ? new Uint8Array(e, r) : new Uint8Array(e, r, n);
          o.TYPED_ARRAY_SUPPORT ? i.__proto__ = o.prototype : i = h(t, i);
          return i;
        }(t, e, r, n);
        if ('string' == typeof e) return function(t, e) {
          var r = 0 | c(e);
          var n = s(t, r);
          var i = n.write(e);
          i !== r && (n = n.slice(0, i));
          return n;
        }(t, e);
        return function(t, e) {
          if (o.isBuffer(e)) {
            var r = 0 | a(e.length);
            var n = s(t, r);
            return 0 === n.length || e.copy(n, 0, 0, r), n;
          }
          if (e) {
            if ('undefined' != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || 'length' in e) return 'number' != typeof e.length || function(t) {
              return t != t;
            }(e.length) ? s(t, 0) : h(t, e);
            if ('Buffer' === e.type && Array.isArray(e.data)) return h(t, e.data);
          }
          throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
        }(t, e);
      }(this, t, e, r) : new o(t, e, r);
    }
    function a(t) {
      if (t >= i) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + ' bytes');
      return 0 | t;
    }
    function s(t, e) {
      var r;
      return o.TYPED_ARRAY_SUPPORT ? (r = new Uint8Array(e)).__proto__ = o.prototype : (null === (r = t) && (r = new o(e)), r.length = e), 
      r;
    }
    function u(t, e) {
      var r = s(t, e < 0 ? 0 : 0 | a(e));
      if (!o.TYPED_ARRAY_SUPPORT) for (var n = 0; n < e; ++n) r[n] = 0;
      return r;
    }
    function h(t, e) {
      var r = e.length < 0 ? 0 : 0 | a(e.length);
      var n = s(t, r);
      for (var i = 0; i < r; i += 1) n[i] = 255 & e[i];
      return n;
    }
    function l(t, e) {
      var r;
      e = e || Infinity;
      var n = t.length;
      var i = null;
      var o = [];
      for (var a = 0; a < n; ++a) {
        if ((r = t.charCodeAt(a)) > 55295 && r < 57344) {
          if (!i) {
            if (r > 56319) {
              (e -= 3) > -1 && o.push(239, 191, 189);
              continue;
            }
            if (a + 1 === n) {
              (e -= 3) > -1 && o.push(239, 191, 189);
              continue;
            }
            i = r;
            continue;
          }
          if (r < 56320) {
            (e -= 3) > -1 && o.push(239, 191, 189), i = r;
            continue;
          }
          r = 65536 + (i - 55296 << 10 | r - 56320);
        } else i && (e -= 3) > -1 && o.push(239, 191, 189);
        if (i = null, r < 128) {
          if ((e -= 1) < 0) break;
          o.push(r);
        } else if (r < 2048) {
          if ((e -= 2) < 0) break;
          o.push(r >> 6 | 192, 63 & r | 128);
        } else if (r < 65536) {
          if ((e -= 3) < 0) break;
          o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
        } else {
          if (!(r < 1114112)) throw new Error('Invalid code point');
          if ((e -= 4) < 0) break;
          o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
        }
      }
      return o;
    }
    function c(t) {
      return o.isBuffer(t) ? t.length : 'undefined' != typeof ArrayBuffer && 'function' == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer) ? t.byteLength : ('string' != typeof t && (t = '' + t), 
      0 === t.length ? 0 : l(t).length);
    }
    o.TYPED_ARRAY_SUPPORT && (o.prototype.__proto__ = Uint8Array.prototype, o.__proto__ = Uint8Array, 'undefined' != typeof Symbol && Symbol.species && o[Symbol.species] === o && Object.defineProperty(o, Symbol.species, {
      value: null,
      configurable: !0,
      enumerable: !1,
      writable: !1
    })), o.prototype.write = function(t, e, r) {
      void 0 === e || void 0 === r && 'string' == typeof e ? (r = this.length, e = 0) : isFinite(e) && (e |= 0, isFinite(r) ? r |= 0 : r = void 0);
      var n = this.length - e;
      if ((void 0 === r || r > n) && (r = n), t.length > 0 && (r < 0 || e < 0) || e > this.length) throw new RangeError('Attempt to write outside buffer bounds');
      return function(t, e, r, n) {
        return function(t, e, r, n) {
          for (var i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i) e[i + r] = t[i];
          return i;
        }(l(e, t.length - r), t, r, n);
      }(this, t, e, r);
    }, o.prototype.slice = function(t, e) {
      var r = this.length;
      var n;
      if ((t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), (e = void 0 === e ? r : ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), 
      e < t && (e = t), o.TYPED_ARRAY_SUPPORT) (n = this.subarray(t, e)).__proto__ = o.prototype; else {
        var i = e - t;
        n = new o(i, void 0);
        for (var a = 0; a < i; ++a) n[a] = this[a + t];
      }
      return n;
    }, o.prototype.copy = function(t, e, r, n) {
      if (r || (r = 0), n || 0 === n || (n = this.length), e >= t.length && (e = t.length), e || (e = 0), n > 0 && n < r && (n = r), 
      n === r) return 0;
      if (0 === t.length || 0 === this.length) return 0;
      if (e < 0) throw new RangeError('targetStart out of bounds');
      if (r < 0 || r >= this.length) throw new RangeError('sourceStart out of bounds');
      if (n < 0) throw new RangeError('sourceEnd out of bounds');
      n > this.length && (n = this.length), t.length - e < n - r && (n = t.length - e + r);
      var i = n - r;
      var a;
      if (this === t && r < e && e < n) for (a = i - 1; a >= 0; --a) t[a + e] = this[a + r]; else if (i < 1e3 || !o.TYPED_ARRAY_SUPPORT) for (a = 0; a < i; ++a) t[a + e] = this[a + r]; else Uint8Array.prototype.set.call(t, this.subarray(r, r + i), e);
      return i;
    }, o.prototype.fill = function(t, e, r) {
      if ('string' == typeof t) {
        if ('string' == typeof e ? (e = 0, r = this.length) : 'string' == typeof r && (r = this.length), 1 === t.length) {
          var n = t.charCodeAt(0);
          n < 256 && (t = n);
        }
      } else 'number' == typeof t && (t &= 255);
      if (e < 0 || this.length < e || this.length < r) throw new RangeError('Out of range index');
      if (r <= e) return this;
      var i;
      if (e >>>= 0, r = void 0 === r ? this.length : r >>> 0, t || (t = 0), 'number' == typeof t) for (i = e; i < r; ++i) this[i] = t; else {
        var a = o.isBuffer(t) ? t : new o(t);
        var s = a.length;
        for (i = 0; i < r - e; ++i) this[i + e] = a[i % s];
      }
      return this;
    }, o.concat = function(t, e) {
      if (!n(t)) throw new TypeError('"list" argument must be an Array of Buffers');
      if (0 === t.length) return s(null, 0);
      var r;
      if (void 0 === e) for (e = 0, r = 0; r < t.length; ++r) e += t[r].length;
      var i = u(null, e);
      var a = 0;
      for (r = 0; r < t.length; ++r) {
        var h = t[r];
        if (!o.isBuffer(h)) throw new TypeError('"list" argument must be an Array of Buffers');
        h.copy(i, a), a += h.length;
      }
      return i;
    }, o.byteLength = c, o.prototype._isBuffer = !0, o.isBuffer = function(t) {
      return !(null == t || !t._isBuffer);
    }, t.exports.alloc = function(t) {
      var e = new o(t);
      return e.fill(0), e;
    }, t.exports.from = function(t) {
      return new o(t);
    };
  },
  6772: (t, e, r) => {
    "use strict";
    var n = r(25108);
    var i = r(79742);
    var o = r(80645);
    var a = 'function' == typeof Symbol && 'function' == typeof Symbol.for ? Symbol.for('nodejs.util.inspect.custom') : null;
    e.lW = h, e.h2 = 50;
    var s = 2147483647;
    function u(t) {
      if (t > s) throw new RangeError('The value "' + t + '" is invalid for option "size"');
      var e = new Uint8Array(t);
      return Object.setPrototypeOf(e, h.prototype), e;
    }
    function h(t, e, r) {
      if ('number' == typeof t) {
        if ('string' == typeof e) throw new TypeError('The "string" argument must be of type string. Received type number');
        return f(t);
      }
      return l(t, e, r);
    }
    function l(t, e, r) {
      if ('string' == typeof t) return function(t, e) {
        'string' == typeof e && '' !== e || (e = 'utf8');
        if (!h.isEncoding(e)) throw new TypeError('Unknown encoding: ' + e);
        var r = 0 | v(t, e);
        var n = u(r);
        var i = n.write(t, e);
        i !== r && (n = n.slice(0, i));
        return n;
      }(t, e);
      if (ArrayBuffer.isView(t)) return function(t) {
        if (F(t, Uint8Array)) {
          var e = new Uint8Array(t);
          return p(e.buffer, e.byteOffset, e.byteLength);
        }
        return d(t);
      }(t);
      if (null == t) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
      if (F(t, ArrayBuffer) || t && F(t.buffer, ArrayBuffer)) return p(t, e, r);
      if ('undefined' != typeof SharedArrayBuffer && (F(t, SharedArrayBuffer) || t && F(t.buffer, SharedArrayBuffer))) return p(t, e, r);
      if ('number' == typeof t) throw new TypeError('The "value" argument must not be of type number. Received type number');
      var n = t.valueOf && t.valueOf();
      if (null != n && n !== t) return h.from(n, e, r);
      var i = function(t) {
        if (h.isBuffer(t)) {
          var e = 0 | m(t.length);
          var r = u(e);
          return 0 === r.length || t.copy(r, 0, 0, e), r;
        }
        if (void 0 !== t.length) return 'number' != typeof t.length || z(t.length) ? u(0) : d(t);
        if ('Buffer' === t.type && Array.isArray(t.data)) return d(t.data);
      }(t);
      if (i) return i;
      if ('undefined' != typeof Symbol && null != Symbol.toPrimitive && 'function' == typeof t[Symbol.toPrimitive]) return h.from(t[Symbol.toPrimitive]('string'), e, r);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
    }
    function c(t) {
      if ('number' != typeof t) throw new TypeError('"size" argument must be of type number');
      if (t < 0) throw new RangeError('The value "' + t + '" is invalid for option "size"');
    }
    function f(t) {
      return c(t), u(t < 0 ? 0 : 0 | m(t));
    }
    function d(t) {
      var e = t.length < 0 ? 0 : 0 | m(t.length);
      var r = u(e);
      for (var n = 0; n < e; n += 1) r[n] = 255 & t[n];
      return r;
    }
    function p(t, e, r) {
      if (e < 0 || t.byteLength < e) throw new RangeError('"offset" is outside of buffer bounds');
      if (t.byteLength < e + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
      var n;
      return n = void 0 === e && void 0 === r ? new Uint8Array(t) : void 0 === r ? new Uint8Array(t, e) : new Uint8Array(t, e, r), 
      Object.setPrototypeOf(n, h.prototype), n;
    }
    function m(t) {
      if (t >= s) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s.toString(16) + ' bytes');
      return 0 | t;
    }
    function v(t, e) {
      if (h.isBuffer(t)) return t.length;
      if (ArrayBuffer.isView(t) || F(t, ArrayBuffer)) return t.byteLength;
      if ('string' != typeof t) throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof t);
      var r = t.length;
      var n = arguments.length > 2 && !0 === arguments[2];
      if (!n && 0 === r) return 0;
      var i = !1;
      for (;;) switch (e) {
       case 'ascii':
       case 'latin1':
       case 'binary':
        return r;

       case 'utf8':
       case 'utf-8':
        return j(t).length;

       case 'ucs2':
       case 'ucs-2':
       case 'utf16le':
       case 'utf-16le':
        return 2 * r;

       case 'hex':
        return r >>> 1;

       case 'base64':
        return K(t).length;

       default:
        if (i) return n ? -1 : j(t).length;
        e = ('' + e).toLowerCase(), i = !0;
      }
    }
    function g(t, e, r) {
      var n = !1;
      if ((void 0 === e || e < 0) && (e = 0), e > this.length) return '';
      if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return '';
      if ((r >>>= 0) <= (e >>>= 0)) return '';
      for (t || (t = 'utf8'); ;) switch (t) {
       case 'hex':
        return B(this, e, r);

       case 'utf8':
       case 'utf-8':
        return S(this, e, r);

       case 'ascii':
        return C(this, e, r);

       case 'latin1':
       case 'binary':
        return T(this, e, r);

       case 'base64':
        return E(this, e, r);

       case 'ucs2':
       case 'ucs-2':
       case 'utf16le':
       case 'utf-16le':
        return L(this, e, r);

       default:
        if (n) throw new TypeError('Unknown encoding: ' + t);
        t = (t + '').toLowerCase(), n = !0;
      }
    }
    function y(t, e, r) {
      var n = t[e];
      t[e] = t[r], t[r] = n;
    }
    function w(t, e, r, n, i) {
      if (0 === t.length) return -1;
      if ('string' == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), z(r = +r) && (r = i ? 0 : t.length - 1), 
      r < 0 && (r = t.length + r), r >= t.length) {
        if (i) return -1;
        r = t.length - 1;
      } else if (r < 0) {
        if (!i) return -1;
        r = 0;
      }
      if ('string' == typeof e && (e = h.from(e, n)), h.isBuffer(e)) return 0 === e.length ? -1 : _(t, e, r, n, i);
      if ('number' == typeof e) return e &= 255, 'function' == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : _(t, [ e ], r, n, i);
      throw new TypeError('val must be string, number or Buffer');
    }
    function _(t, e, r, n, i) {
      var o = 1;
      var a = t.length;
      var s = e.length;
      if (void 0 !== n && ('ucs2' === (n = String(n).toLowerCase()) || 'ucs-2' === n || 'utf16le' === n || 'utf-16le' === n)) {
        if (t.length < 2 || e.length < 2) return -1;
        o = 2, a /= 2, s /= 2, r /= 2;
      }
      function u(t, e) {
        return 1 === o ? t[e] : t.readUInt16BE(e * o);
      }
      var h;
      if (i) {
        var l = -1;
        for (h = r; h < a; h++) if (u(t, h) === u(e, -1 === l ? 0 : h - l)) {
          if (-1 === l && (l = h), h - l + 1 === s) return l * o;
        } else -1 !== l && (h -= h - l), l = -1;
      } else for (r + s > a && (r = a - s), h = r; h >= 0; h--) {
        var c = !0;
        for (var f = 0; f < s; f++) if (u(t, h + f) !== u(e, f)) {
          c = !1;
          break;
        }
        if (c) return h;
      }
      return -1;
    }
    function M(t, e, r, n) {
      r = Number(r) || 0;
      var i = t.length - r;
      n ? (n = Number(n)) > i && (n = i) : n = i;
      var o = e.length;
      n > o / 2 && (n = o / 2);
      for (var a = 0; a < n; ++a) {
        var s = parseInt(e.substr(2 * a, 2), 16);
        if (z(s)) return a;
        t[r + a] = s;
      }
      return a;
    }
    function b(t, e, r, n) {
      return H(j(e, t.length - r), t, r, n);
    }
    function k(t, e, r, n) {
      return H(function(t) {
        var e = [];
        for (var r = 0; r < t.length; ++r) e.push(255 & t.charCodeAt(r));
        return e;
      }(e), t, r, n);
    }
    function x(t, e, r, n) {
      return H(K(e), t, r, n);
    }
    function A(t, e, r, n) {
      return H(function(t, e) {
        var r, n, i;
        var o = [];
        for (var a = 0; a < t.length && !((e -= 2) < 0); ++a) n = (r = t.charCodeAt(a)) >> 8, i = r % 256, o.push(i), o.push(n);
        return o;
      }(e, t.length - r), t, r, n);
    }
    function E(t, e, r) {
      return 0 === e && r === t.length ? i.fromByteArray(t) : i.fromByteArray(t.slice(e, r));
    }
    function S(t, e, r) {
      r = Math.min(t.length, r);
      var n = [];
      var i = e;
      for (;i < r; ) {
        var o = t[i];
        var a = null;
        var s = o > 239 ? 4 : o > 223 ? 3 : o > 191 ? 2 : 1;
        var u, h, l, c;
        if (i + s <= r) switch (s) {
         case 1:
          o < 128 && (a = o);
          break;

         case 2:
          128 == (192 & (u = t[i + 1])) && (c = (31 & o) << 6 | 63 & u) > 127 && (a = c);
          break;

         case 3:
          u = t[i + 1], h = t[i + 2], 128 == (192 & u) && 128 == (192 & h) && (c = (15 & o) << 12 | (63 & u) << 6 | 63 & h) > 2047 && (c < 55296 || c > 57343) && (a = c);
          break;

         case 4:
          u = t[i + 1], h = t[i + 2], l = t[i + 3], 128 == (192 & u) && 128 == (192 & h) && 128 == (192 & l) && (c = (15 & o) << 18 | (63 & u) << 12 | (63 & h) << 6 | 63 & l) > 65535 && c < 1114112 && (a = c);
        }
        null === a ? (a = 65533, s = 1) : a > 65535 && (a -= 65536, n.push(a >>> 10 & 1023 | 55296), a = 56320 | 1023 & a), n.push(a), 
        i += s;
      }
      return function(t) {
        var e = t.length;
        if (e <= R) return String.fromCharCode.apply(String, t);
        var r = '';
        var n = 0;
        for (;n < e; ) r += String.fromCharCode.apply(String, t.slice(n, n += R));
        return r;
      }(n);
    }
    h.TYPED_ARRAY_SUPPORT = function() {
      try {
        var t = new Uint8Array(1);
        var e = {
          foo: function() {
            return 42;
          }
        };
        return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(t, e), 42 === t.foo();
      } catch (r) {
        return !1;
      }
    }(), h.TYPED_ARRAY_SUPPORT || void 0 === n || 'function' != typeof n.error || n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), 
    Object.defineProperty(h.prototype, 'parent', {
      enumerable: !0,
      get: function() {
        if (h.isBuffer(this)) return this.buffer;
      }
    }), Object.defineProperty(h.prototype, 'offset', {
      enumerable: !0,
      get: function() {
        if (h.isBuffer(this)) return this.byteOffset;
      }
    }), h.poolSize = 8192, h.from = function(t, e, r) {
      return l(t, e, r);
    }, Object.setPrototypeOf(h.prototype, Uint8Array.prototype), Object.setPrototypeOf(h, Uint8Array), h.alloc = function(t, e, r) {
      return function(t, e, r) {
        return c(t), t <= 0 ? u(t) : void 0 !== e ? 'string' == typeof r ? u(t).fill(e, r) : u(t).fill(e) : u(t);
      }(t, e, r);
    }, h.allocUnsafe = function(t) {
      return f(t);
    }, h.allocUnsafeSlow = function(t) {
      return f(t);
    }, h.isBuffer = function(t) {
      return null != t && !0 === t._isBuffer && t !== h.prototype;
    }, h.compare = function(t, e) {
      if (F(t, Uint8Array) && (t = h.from(t, t.offset, t.byteLength)), F(e, Uint8Array) && (e = h.from(e, e.offset, e.byteLength)), 
      !h.isBuffer(t) || !h.isBuffer(e)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (t === e) return 0;
      var r = t.length;
      var n = e.length;
      for (var i = 0, o = Math.min(r, n); i < o; ++i) if (t[i] !== e[i]) {
        r = t[i], n = e[i];
        break;
      }
      return r < n ? -1 : n < r ? 1 : 0;
    }, h.isEncoding = function(t) {
      switch (String(t).toLowerCase()) {
       case 'hex':
       case 'utf8':
       case 'utf-8':
       case 'ascii':
       case 'latin1':
       case 'binary':
       case 'base64':
       case 'ucs2':
       case 'ucs-2':
       case 'utf16le':
       case 'utf-16le':
        return !0;

       default:
        return !1;
      }
    }, h.concat = function(t, e) {
      if (!Array.isArray(t)) throw new TypeError('"list" argument must be an Array of Buffers');
      if (0 === t.length) return h.alloc(0);
      var r;
      if (void 0 === e) for (e = 0, r = 0; r < t.length; ++r) e += t[r].length;
      var n = h.allocUnsafe(e);
      var i = 0;
      for (r = 0; r < t.length; ++r) {
        var o = t[r];
        if (F(o, Uint8Array)) i + o.length > n.length ? h.from(o).copy(n, i) : Uint8Array.prototype.set.call(n, o, i); else {
          if (!h.isBuffer(o)) throw new TypeError('"list" argument must be an Array of Buffers');
          o.copy(n, i);
        }
        i += o.length;
      }
      return n;
    }, h.byteLength = v, h.prototype._isBuffer = !0, h.prototype.swap16 = function() {
      var t = this.length;
      if (t % 2 != 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
      for (var e = 0; e < t; e += 2) y(this, e, e + 1);
      return this;
    }, h.prototype.swap32 = function() {
      var t = this.length;
      if (t % 4 != 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
      for (var e = 0; e < t; e += 4) y(this, e, e + 3), y(this, e + 1, e + 2);
      return this;
    }, h.prototype.swap64 = function() {
      var t = this.length;
      if (t % 8 != 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
      for (var e = 0; e < t; e += 8) y(this, e, e + 7), y(this, e + 1, e + 6), y(this, e + 2, e + 5), y(this, e + 3, e + 4);
      return this;
    }, h.prototype.toString = function() {
      var t = this.length;
      return 0 === t ? '' : 0 === arguments.length ? S(this, 0, t) : g.apply(this, arguments);
    }, h.prototype.toLocaleString = h.prototype.toString, h.prototype.equals = function(t) {
      if (!h.isBuffer(t)) throw new TypeError('Argument must be a Buffer');
      return this === t || 0 === h.compare(this, t);
    }, h.prototype.inspect = function() {
      var t = '';
      var r = e.h2;
      return t = this.toString('hex', 0, r).replace(/(.{2})/g, '$1 ').trim(), this.length > r && (t += ' ... '), '<Buffer ' + t + '>';
    }, a && (h.prototype[a] = h.prototype.inspect), h.prototype.compare = function(t, e, r, n, i) {
      if (F(t, Uint8Array) && (t = h.from(t, t.offset, t.byteLength)), !h.isBuffer(t)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof t);
      if (void 0 === e && (e = 0), void 0 === r && (r = t ? t.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), 
      e < 0 || r > t.length || n < 0 || i > this.length) throw new RangeError('out of range index');
      if (n >= i && e >= r) return 0;
      if (n >= i) return -1;
      if (e >= r) return 1;
      if (this === t) return 0;
      var o = (i >>>= 0) - (n >>>= 0);
      var a = (r >>>= 0) - (e >>>= 0);
      var s = Math.min(o, a);
      var u = this.slice(n, i);
      var l = t.slice(e, r);
      for (var c = 0; c < s; ++c) if (u[c] !== l[c]) {
        o = u[c], a = l[c];
        break;
      }
      return o < a ? -1 : a < o ? 1 : 0;
    }, h.prototype.includes = function(t, e, r) {
      return -1 !== this.indexOf(t, e, r);
    }, h.prototype.indexOf = function(t, e, r) {
      return w(this, t, e, r, !0);
    }, h.prototype.lastIndexOf = function(t, e, r) {
      return w(this, t, e, r, !1);
    }, h.prototype.write = function(t, e, r, n) {
      if (void 0 === e) n = 'utf8', r = this.length, e = 0; else if (void 0 === r && 'string' == typeof e) n = e, r = this.length, 
      e = 0; else {
        if (!isFinite(e)) throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
        e >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = 'utf8')) : (n = r, r = void 0);
      }
      var i = this.length - e;
      if ((void 0 === r || r > i) && (r = i), t.length > 0 && (r < 0 || e < 0) || e > this.length) throw new RangeError('Attempt to write outside buffer bounds');
      n || (n = 'utf8');
      var o = !1;
      for (;;) switch (n) {
       case 'hex':
        return M(this, t, e, r);

       case 'utf8':
       case 'utf-8':
        return b(this, t, e, r);

       case 'ascii':
       case 'latin1':
       case 'binary':
        return k(this, t, e, r);

       case 'base64':
        return x(this, t, e, r);

       case 'ucs2':
       case 'ucs-2':
       case 'utf16le':
       case 'utf-16le':
        return A(this, t, e, r);

       default:
        if (o) throw new TypeError('Unknown encoding: ' + n);
        n = ('' + n).toLowerCase(), o = !0;
      }
    }, h.prototype.toJSON = function() {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    var R = 4096;
    function C(t, e, r) {
      var n = '';
      r = Math.min(t.length, r);
      for (var i = e; i < r; ++i) n += String.fromCharCode(127 & t[i]);
      return n;
    }
    function T(t, e, r) {
      var n = '';
      r = Math.min(t.length, r);
      for (var i = e; i < r; ++i) n += String.fromCharCode(t[i]);
      return n;
    }
    function B(t, e, r) {
      var n = t.length;
      (!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);
      var i = '';
      for (var o = e; o < r; ++o) i += D[t[o]];
      return i;
    }
    function L(t, e, r) {
      var n = t.slice(e, r);
      var i = '';
      for (var o = 0; o < n.length - 1; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);
      return i;
    }
    function P(t, e, r) {
      if (t % 1 != 0 || t < 0) throw new RangeError('offset is not uint');
      if (t + e > r) throw new RangeError('Trying to access beyond buffer length');
    }
    function I(t, e, r, n, i, o) {
      if (!h.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');
      if (r + n > t.length) throw new RangeError('Index out of range');
    }
    function O(t, e, r, n, i, o) {
      if (r + n > t.length) throw new RangeError('Index out of range');
      if (r < 0) throw new RangeError('Index out of range');
    }
    function N(t, e, r, n, i) {
      return e = +e, r >>>= 0, i || O(t, 0, r, 4), o.write(t, e, r, n, 23, 4), r + 4;
    }
    function U(t, e, r, n, i) {
      return e = +e, r >>>= 0, i || O(t, 0, r, 8), o.write(t, e, r, n, 52, 8), r + 8;
    }
    h.prototype.slice = function(t, e) {
      var r = this.length;
      (t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), (e = void 0 === e ? r : ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), 
      e < t && (e = t);
      var n = this.subarray(t, e);
      return Object.setPrototypeOf(n, h.prototype), n;
    }, h.prototype.readUintLE = h.prototype.readUIntLE = function(t, e, r) {
      t >>>= 0, e >>>= 0, r || P(t, e, this.length);
      var n = this[t];
      var i = 1;
      var o = 0;
      for (;++o < e && (i *= 256); ) n += this[t + o] * i;
      return n;
    }, h.prototype.readUintBE = h.prototype.readUIntBE = function(t, e, r) {
      t >>>= 0, e >>>= 0, r || P(t, e, this.length);
      var n = this[t + --e];
      var i = 1;
      for (;e > 0 && (i *= 256); ) n += this[t + --e] * i;
      return n;
    }, h.prototype.readUint8 = h.prototype.readUInt8 = function(t, e) {
      return t >>>= 0, e || P(t, 1, this.length), this[t];
    }, h.prototype.readUint16LE = h.prototype.readUInt16LE = function(t, e) {
      return t >>>= 0, e || P(t, 2, this.length), this[t] | this[t + 1] << 8;
    }, h.prototype.readUint16BE = h.prototype.readUInt16BE = function(t, e) {
      return t >>>= 0, e || P(t, 2, this.length), this[t] << 8 | this[t + 1];
    }, h.prototype.readUint32LE = h.prototype.readUInt32LE = function(t, e) {
      return t >>>= 0, e || P(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3];
    }, h.prototype.readUint32BE = h.prototype.readUInt32BE = function(t, e) {
      return t >>>= 0, e || P(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
    }, h.prototype.readIntLE = function(t, e, r) {
      t >>>= 0, e >>>= 0, r || P(t, e, this.length);
      var n = this[t];
      var i = 1;
      var o = 0;
      for (;++o < e && (i *= 256); ) n += this[t + o] * i;
      return n >= (i *= 128) && (n -= Math.pow(2, 8 * e)), n;
    }, h.prototype.readIntBE = function(t, e, r) {
      t >>>= 0, e >>>= 0, r || P(t, e, this.length);
      var n = e;
      var i = 1;
      var o = this[t + --n];
      for (;n > 0 && (i *= 256); ) o += this[t + --n] * i;
      return o >= (i *= 128) && (o -= Math.pow(2, 8 * e)), o;
    }, h.prototype.readInt8 = function(t, e) {
      return t >>>= 0, e || P(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];
    }, h.prototype.readInt16LE = function(t, e) {
      t >>>= 0, e || P(t, 2, this.length);
      var r = this[t] | this[t + 1] << 8;
      return 32768 & r ? 4294901760 | r : r;
    }, h.prototype.readInt16BE = function(t, e) {
      t >>>= 0, e || P(t, 2, this.length);
      var r = this[t + 1] | this[t] << 8;
      return 32768 & r ? 4294901760 | r : r;
    }, h.prototype.readInt32LE = function(t, e) {
      return t >>>= 0, e || P(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
    }, h.prototype.readInt32BE = function(t, e) {
      return t >>>= 0, e || P(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
    }, h.prototype.readFloatLE = function(t, e) {
      return t >>>= 0, e || P(t, 4, this.length), o.read(this, t, !0, 23, 4);
    }, h.prototype.readFloatBE = function(t, e) {
      return t >>>= 0, e || P(t, 4, this.length), o.read(this, t, !1, 23, 4);
    }, h.prototype.readDoubleLE = function(t, e) {
      return t >>>= 0, e || P(t, 8, this.length), o.read(this, t, !0, 52, 8);
    }, h.prototype.readDoubleBE = function(t, e) {
      return t >>>= 0, e || P(t, 8, this.length), o.read(this, t, !1, 52, 8);
    }, h.prototype.writeUintLE = h.prototype.writeUIntLE = function(t, e, r, n) {
      (t = +t, e >>>= 0, r >>>= 0, n) || I(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
      var i = 1;
      var o = 0;
      for (this[e] = 255 & t; ++o < r && (i *= 256); ) this[e + o] = t / i & 255;
      return e + r;
    }, h.prototype.writeUintBE = h.prototype.writeUIntBE = function(t, e, r, n) {
      (t = +t, e >>>= 0, r >>>= 0, n) || I(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
      var i = r - 1;
      var o = 1;
      for (this[e + i] = 255 & t; --i >= 0 && (o *= 256); ) this[e + i] = t / o & 255;
      return e + r;
    }, h.prototype.writeUint8 = h.prototype.writeUInt8 = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 1, 255, 0), this[e] = 255 & t, e + 1;
    }, h.prototype.writeUint16LE = h.prototype.writeUInt16LE = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 2, 65535, 0), this[e] = 255 & t, this[e + 1] = t >>> 8, e + 2;
    }, h.prototype.writeUint16BE = h.prototype.writeUInt16BE = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 2, 65535, 0), this[e] = t >>> 8, this[e + 1] = 255 & t, e + 2;
    }, h.prototype.writeUint32LE = h.prototype.writeUInt32LE = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 4, 4294967295, 0), this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, 
      this[e] = 255 & t, e + 4;
    }, h.prototype.writeUint32BE = h.prototype.writeUInt32BE = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 4, 4294967295, 0), this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, 
      this[e + 3] = 255 & t, e + 4;
    }, h.prototype.writeIntLE = function(t, e, r, n) {
      if (t = +t, e >>>= 0, !n) {
        var i = Math.pow(2, 8 * r - 1);
        I(this, t, e, r, i - 1, -i);
      }
      var o = 0;
      var a = 1;
      var s = 0;
      for (this[e] = 255 & t; ++o < r && (a *= 256); ) t < 0 && 0 === s && 0 !== this[e + o - 1] && (s = 1), this[e + o] = (t / a >> 0) - s & 255;
      return e + r;
    }, h.prototype.writeIntBE = function(t, e, r, n) {
      if (t = +t, e >>>= 0, !n) {
        var i = Math.pow(2, 8 * r - 1);
        I(this, t, e, r, i - 1, -i);
      }
      var o = r - 1;
      var a = 1;
      var s = 0;
      for (this[e + o] = 255 & t; --o >= 0 && (a *= 256); ) t < 0 && 0 === s && 0 !== this[e + o + 1] && (s = 1), this[e + o] = (t / a >> 0) - s & 255;
      return e + r;
    }, h.prototype.writeInt8 = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 1, 127, -128), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1;
    }, h.prototype.writeInt16LE = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 2, 32767, -32768), this[e] = 255 & t, this[e + 1] = t >>> 8, e + 2;
    }, h.prototype.writeInt16BE = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 2, 32767, -32768), this[e] = t >>> 8, this[e + 1] = 255 & t, e + 2;
    }, h.prototype.writeInt32LE = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 4, 2147483647, -2147483648), this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, 
      this[e + 3] = t >>> 24, e + 4;
    }, h.prototype.writeInt32BE = function(t, e, r) {
      return t = +t, e >>>= 0, r || I(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), this[e] = t >>> 24, 
      this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t, e + 4;
    }, h.prototype.writeFloatLE = function(t, e, r) {
      return N(this, t, e, !0, r);
    }, h.prototype.writeFloatBE = function(t, e, r) {
      return N(this, t, e, !1, r);
    }, h.prototype.writeDoubleLE = function(t, e, r) {
      return U(this, t, e, !0, r);
    }, h.prototype.writeDoubleBE = function(t, e, r) {
      return U(this, t, e, !1, r);
    }, h.prototype.copy = function(t, e, r, n) {
      if (!h.isBuffer(t)) throw new TypeError('argument should be a Buffer');
      if (r || (r = 0), n || 0 === n || (n = this.length), e >= t.length && (e = t.length), e || (e = 0), n > 0 && n < r && (n = r), 
      n === r) return 0;
      if (0 === t.length || 0 === this.length) return 0;
      if (e < 0) throw new RangeError('targetStart out of bounds');
      if (r < 0 || r >= this.length) throw new RangeError('Index out of range');
      if (n < 0) throw new RangeError('sourceEnd out of bounds');
      n > this.length && (n = this.length), t.length - e < n - r && (n = t.length - e + r);
      var i = n - r;
      return this === t && 'function' == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(e, r, n) : Uint8Array.prototype.set.call(t, this.subarray(r, n), e), 
      i;
    }, h.prototype.fill = function(t, e, r, n) {
      if ('string' == typeof t) {
        if ('string' == typeof e ? (n = e, e = 0, r = this.length) : 'string' == typeof r && (n = r, r = this.length), void 0 !== n && 'string' != typeof n) throw new TypeError('encoding must be a string');
        if ('string' == typeof n && !h.isEncoding(n)) throw new TypeError('Unknown encoding: ' + n);
        if (1 === t.length) {
          var i = t.charCodeAt(0);
          ('utf8' === n && i < 128 || 'latin1' === n) && (t = i);
        }
      } else 'number' == typeof t ? t &= 255 : 'boolean' == typeof t && (t = Number(t));
      if (e < 0 || this.length < e || this.length < r) throw new RangeError('Out of range index');
      if (r <= e) return this;
      var o;
      if (e >>>= 0, r = void 0 === r ? this.length : r >>> 0, t || (t = 0), 'number' == typeof t) for (o = e; o < r; ++o) this[o] = t; else {
        var a = h.isBuffer(t) ? t : h.from(t, n);
        var s = a.length;
        if (0 === s) throw new TypeError('The value "' + t + '" is invalid for argument "value"');
        for (o = 0; o < r - e; ++o) this[o + e] = a[o % s];
      }
      return this;
    };
    var q = /[^+/0-9A-Za-z-_]/g;
    function j(t, e) {
      var r;
      e = e || Infinity;
      var n = t.length;
      var i = null;
      var o = [];
      for (var a = 0; a < n; ++a) {
        if ((r = t.charCodeAt(a)) > 55295 && r < 57344) {
          if (!i) {
            if (r > 56319) {
              (e -= 3) > -1 && o.push(239, 191, 189);
              continue;
            }
            if (a + 1 === n) {
              (e -= 3) > -1 && o.push(239, 191, 189);
              continue;
            }
            i = r;
            continue;
          }
          if (r < 56320) {
            (e -= 3) > -1 && o.push(239, 191, 189), i = r;
            continue;
          }
          r = 65536 + (i - 55296 << 10 | r - 56320);
        } else i && (e -= 3) > -1 && o.push(239, 191, 189);
        if (i = null, r < 128) {
          if ((e -= 1) < 0) break;
          o.push(r);
        } else if (r < 2048) {
          if ((e -= 2) < 0) break;
          o.push(r >> 6 | 192, 63 & r | 128);
        } else if (r < 65536) {
          if ((e -= 3) < 0) break;
          o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
        } else {
          if (!(r < 1114112)) throw new Error('Invalid code point');
          if ((e -= 4) < 0) break;
          o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
        }
      }
      return o;
    }
    function K(t) {
      return i.toByteArray(function(t) {
        if ((t = (t = t.split('=')[0]).trim().replace(q, '')).length < 2) return '';
        for (;t.length % 4 != 0; ) t += '=';
        return t;
      }(t));
    }
    function H(t, e, r, n) {
      for (var i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i) e[i + r] = t[i];
      return i;
    }
    function F(t, e) {
      return t instanceof e || null != t && null != t.constructor && null != t.constructor.name && t.constructor.name === e.name;
    }
    function z(t) {
      return t != t;
    }
    var D = function() {
      var t = '0123456789abcdef';
      var e = new Array(256);
      for (var r = 0; r < 16; ++r) {
        var n = 16 * r;
        for (var i = 0; i < 16; ++i) e[n + i] = t[r] + t[i];
      }
      return e;
    }();
  },
  17563: (t, e, r) => {
    "use strict";
    const n = r(70610);
    const i = r(44020);
    const o = r(80500);
    function a(t) {
      if ('string' != typeof t || 1 !== t.length) throw new TypeError('arrayFormatSeparator must be single character string');
    }
    function s(t, e) {
      return e.encode ? e.strict ? n(t) : encodeURIComponent(t) : t;
    }
    function u(t, e) {
      return e.decode ? i(t) : t;
    }
    function h(t) {
      return Array.isArray(t) ? t.sort() : 'object' == typeof t ? h(Object.keys(t)).sort(((t, e) => Number(t) - Number(e))).map((e => t[e])) : t;
    }
    function l(t) {
      const e = t.indexOf('#');
      return -1 !== e && (t = t.slice(0, e)), t;
    }
    function c(t) {
      const e = (t = l(t)).indexOf('?');
      return -1 === e ? '' : t.slice(e + 1);
    }
    function f(t, e) {
      return e.parseNumbers && !Number.isNaN(Number(t)) && 'string' == typeof t && '' !== t.trim() ? t = Number(t) : !e.parseBooleans || null === t || 'true' !== t.toLowerCase() && 'false' !== t.toLowerCase() || (t = 'true' === t.toLowerCase()), 
      t;
    }
    function d(t, e) {
      a((e = Object.assign({
        decode: !0,
        sort: !0,
        arrayFormat: 'none',
        arrayFormatSeparator: ',',
        parseNumbers: !1,
        parseBooleans: !1
      }, e)).arrayFormatSeparator);
      const r = function(t) {
        let e;
        switch (t.arrayFormat) {
         case 'index':
          return (t, r, n) => {
            e = /\[(\d*)\]$/.exec(t), t = t.replace(/\[\d*\]$/, ''), e ? (void 0 === n[t] && (n[t] = {}), n[t][e[1]] = r) : n[t] = r;
          };

         case 'bracket':
          return (t, r, n) => {
            e = /(\[\])$/.exec(t), t = t.replace(/\[\]$/, ''), e ? void 0 !== n[t] ? n[t] = [].concat(n[t], r) : n[t] = [ r ] : n[t] = r;
          };

         case 'comma':
         case 'separator':
          return (e, r, n) => {
            const i = 'string' == typeof r && r.split('').indexOf(t.arrayFormatSeparator) > -1 ? r.split(t.arrayFormatSeparator).map((e => u(e, t))) : null === r ? r : u(r, t);
            n[e] = i;
          };

         default:
          return (t, e, r) => {
            void 0 !== r[t] ? r[t] = [].concat(r[t], e) : r[t] = e;
          };
        }
      }(e);
      const n = Object.create(null);
      if ('string' != typeof t) return n;
      if (!(t = t.trim().replace(/^[?#&]/, ''))) return n;
      for (const i of t.split('&')) {
        let [t, a] = o(e.decode ? i.replace(/\+/g, ' ') : i, '=');
        a = void 0 === a ? null : [ 'comma', 'separator' ].includes(e.arrayFormat) ? a : u(a, e), r(u(t, e), a, n);
      }
      for (const i of Object.keys(n)) {
        const t = n[i];
        if ('object' == typeof t && null !== t) for (const r of Object.keys(t)) t[r] = f(t[r], e); else n[i] = f(t, e);
      }
      return !1 === e.sort ? n : (!0 === e.sort ? Object.keys(n).sort() : Object.keys(n).sort(e.sort)).reduce(((t, e) => {
        const r = n[e];
        return Boolean(r) && 'object' == typeof r && !Array.isArray(r) ? t[e] = h(r) : t[e] = r, t;
      }), Object.create(null));
    }
    e.extract = c, e.parse = d, e.stringify = (t, e) => {
      if (!t) return '';
      a((e = Object.assign({
        encode: !0,
        strict: !0,
        arrayFormat: 'none',
        arrayFormatSeparator: ','
      }, e)).arrayFormatSeparator);
      const r = r => e.skipNull && (t => null == t)(t[r]) || e.skipEmptyString && '' === t[r];
      const n = function(t) {
        switch (t.arrayFormat) {
         case 'index':
          return e => (r, n) => {
            const i = r.length;
            return void 0 === n || t.skipNull && null === n || t.skipEmptyString && '' === n ? r : null === n ? [ ...r, [ s(e, t), '[', i, ']' ].join('') ] : [ ...r, [ s(e, t), '[', s(i, t), ']=', s(n, t) ].join('') ];
          };

         case 'bracket':
          return e => (r, n) => void 0 === n || t.skipNull && null === n || t.skipEmptyString && '' === n ? r : null === n ? [ ...r, [ s(e, t), '[]' ].join('') ] : [ ...r, [ s(e, t), '[]=', s(n, t) ].join('') ];

         case 'comma':
         case 'separator':
          return e => (r, n) => null == n || 0 === n.length ? r : 0 === r.length ? [ [ s(e, t), '=', s(n, t) ].join('') ] : [ [ r, s(n, t) ].join(t.arrayFormatSeparator) ];

         default:
          return e => (r, n) => void 0 === n || t.skipNull && null === n || t.skipEmptyString && '' === n ? r : null === n ? [ ...r, s(e, t) ] : [ ...r, [ s(e, t), '=', s(n, t) ].join('') ];
        }
      }(e);
      const i = {};
      for (const a of Object.keys(t)) r(a) || (i[a] = t[a]);
      const o = Object.keys(i);
      return !1 !== e.sort && o.sort(e.sort), o.map((r => {
        const i = t[r];
        return void 0 === i ? '' : null === i ? s(r, e) : Array.isArray(i) ? i.reduce(n(r), []).join('&') : s(r, e) + '=' + s(i, e);
      })).filter((t => t.length > 0)).join('&');
    }, e.parseUrl = (t, e) => {
      e = Object.assign({
        decode: !0
      }, e);
      const [r, n] = o(t, '#');
      return Object.assign({
        url: r.split('?')[0] || '',
        query: d(c(t), e)
      }, e && e.parseFragmentIdentifier && n ? {
        fragmentIdentifier: u(n, e)
      } : {});
    }, e.stringifyUrl = (t, r) => {
      r = Object.assign({
        encode: !0,
        strict: !0
      }, r);
      const n = l(t.url).split('?')[0] || '';
      const i = e.extract(t.url);
      const o = e.parse(i, {
        sort: !1
      });
      const a = Object.assign(o, t.query);
      let u = e.stringify(a, r);
      u && (u = `?${u}`);
      let h = function(t) {
        let e = '';
        const r = t.indexOf('#');
        return -1 !== r && (e = t.slice(r)), e;
      }(t.url);
      return t.fragmentIdentifier && (h = `#${s(t.fragmentIdentifier, r)}`), `${n}${u}${h}`;
    };
  },
  37253: (t, e, r) => {
    const n = r(89539);
    const i = r(17187);
    var o = 'object' == typeof Reflect ? Reflect : null;
    var a = o && 'function' == typeof o.apply ? o.apply : function(t, e, r) {
      return Function.prototype.apply.call(t, e, r);
    };
    function s() {
      i.call(this);
    }
    function u(t, e, r) {
      try {
        a(t, e, r);
      } catch (n) {
        setTimeout((() => {
          throw n;
        }));
      }
    }
    function h(t, e) {
      var r = new Array(e);
      for (var n = 0; n < e; ++n) r[n] = t[n];
      return r;
    }
    t.exports = s, n.inherits(s, i), s.prototype.emit = function(t) {
      var e = [];
      for (var r = 1; r < arguments.length; r++) e.push(arguments[r]);
      var n = 'error' === t;
      var i = this._events;
      if (void 0 !== i) n = n && void 0 === i.error; else if (!n) return !1;
      if (n) {
        var o;
        if (e.length > 0 && (o = e[0]), o instanceof Error) throw o;
        var a = new Error('Unhandled error.' + (o ? ' (' + o.message + ')' : ''));
        throw a.context = o, a;
      }
      var s = i[t];
      if (void 0 === s) return !1;
      if ('function' == typeof s) u(s, this, e); else {
        var l = s.length;
        var c = h(s, l);
        for (r = 0; r < l; ++r) u(c[r], this, e);
      }
      return !0;
    };
  },
  80045: function(t, e, r) {
    var n = r(34155);
    !function(e) {
      'use strict';
      var r = function(t) {
        setTimeout(t, 0);
      };
      void 0 !== n && n && 'function' == typeof n.nextTick && (r = n.nextTick), t.exports = function(t) {
        var e = {
          capacity: t || 1,
          current: 0,
          queue: [],
          firstHere: !1,
          take: function() {
            if (!1 === e.firstHere) {
              e.current++, e.firstHere = !0;
              var t = 1;
            } else t = 0;
            var r = {
              n: 1
            };
            'function' == typeof arguments[0] ? r.task = arguments[0] : r.n = arguments[0], arguments.length >= 2 && ('function' == typeof arguments[1] ? r.task = arguments[1] : r.n = arguments[1]);
            var n = r.task;
            if (r.task = function() {
              n(e.leave);
            }, e.current + r.n - t > e.capacity) return 1 === t && (e.current--, e.firstHere = !1), e.queue.push(r);
            e.current += r.n - t, r.task(e.leave), 1 === t && (e.firstHere = !1);
          },
          leave: function(t) {
            if (t = t || 1, e.current -= t, e.queue.length) {
              var n = e.queue[0];
              n.n + e.current > e.capacity || (e.queue.shift(), e.current += n.n, r(n.task));
            } else if (e.current < 0) throw new Error('leave called too many times.');
          },
          available: function(t) {
            return t = t || 1, e.current + t <= e.capacity;
          }
        };
        return e;
      };
    }();
  },
  80500: t => {
    "use strict";
    t.exports = (t, e) => {
      if ('string' != typeof t || 'string' != typeof e) throw new TypeError('Expected the arguments to be of type `string`');
      if ('' === e) return [ t ];
      const r = t.indexOf(e);
      return -1 === r ? [ t ] : [ t.slice(0, r), t.slice(r + e.length) ];
    };
  },
  70610: t => {
    "use strict";
    t.exports = t => encodeURIComponent(t).replace(/[!'()*]/g, (t => `%${t.charCodeAt(0).toString(16).toUpperCase()}`));
  },
  11742: t => {
    t.exports = function() {
      var t = document.getSelection();
      if (!t.rangeCount) return function() {};
      var e = document.activeElement;
      var r = [];
      for (var n = 0; n < t.rangeCount; n++) r.push(t.getRangeAt(n));
      switch (e.tagName.toUpperCase()) {
       case 'INPUT':
       case 'TEXTAREA':
        e.blur();
        break;

       default:
        e = null;
      }
      return t.removeAllRanges(), function() {
        'Caret' === t.type && t.removeAllRanges(), t.rangeCount || r.forEach((function(e) {
          t.addRange(e);
        })), e && e.focus();
      };
    };
  },
  70655: (t, e, r) => {
    "use strict";
    r.r(e), r.d(e, {
      __assign: () => o,
      __asyncDelegator: () => M,
      __asyncGenerator: () => _,
      __asyncValues: () => b,
      __await: () => w,
      __awaiter: () => l,
      __classPrivateFieldGet: () => S,
      __classPrivateFieldIn: () => C,
      __classPrivateFieldSet: () => R,
      __createBinding: () => f,
      __decorate: () => s,
      __exportStar: () => d,
      __extends: () => i,
      __generator: () => c,
      __importDefault: () => E,
      __importStar: () => A,
      __makeTemplateObject: () => k,
      __metadata: () => h,
      __param: () => u,
      __read: () => m,
      __rest: () => a,
      __spread: () => v,
      __spreadArray: () => y,
      __spreadArrays: () => g,
      __values: () => p
    });
    var n = function(t, e) {
      return n = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function(t, e) {
        t.__proto__ = e;
      } || function(t, e) {
        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);
      }, n(t, e);
    };
    function i(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
      function r() {
        this.constructor = t;
      }
      n(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, new r);
    }
    var o = function() {
      return o = Object.assign || function(t) {
        for (var e, r = 1, n = arguments.length; r < n; r++) for (var i in e = arguments[r]) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
        return t;
      }, o.apply(this, arguments);
    };
    function a(t, e) {
      var r = {};
      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e.indexOf(n) < 0 && (r[n] = t[n]);
      if (null != t && "function" == typeof Object.getOwnPropertySymbols) {
        var i = 0;
        for (n = Object.getOwnPropertySymbols(t); i < n.length; i++) e.indexOf(n[i]) < 0 && Object.prototype.propertyIsEnumerable.call(t, n[i]) && (r[n[i]] = t[n[i]]);
      }
      return r;
    }
    function s(t, e, r, n) {
      var i, o = arguments.length, a = o < 3 ? e : null === n ? n = Object.getOwnPropertyDescriptor(e, r) : n;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(t, e, r, n); else for (var s = t.length - 1; s >= 0; s--) (i = t[s]) && (a = (o < 3 ? i(a) : o > 3 ? i(e, r, a) : i(e, r)) || a);
      return o > 3 && a && Object.defineProperty(e, r, a), a;
    }
    function u(t, e) {
      return function(r, n) {
        e(r, n, t);
      };
    }
    function h(t, e) {
      if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(t, e);
    }
    function l(t, e, r, n) {
      return new (r || (r = Promise))((function(i, o) {
        function a(t) {
          try {
            u(n.next(t));
          } catch (e) {
            o(e);
          }
        }
        function s(t) {
          try {
            u(n.throw(t));
          } catch (e) {
            o(e);
          }
        }
        function u(t) {
          t.done ? i(t.value) : function(t) {
            return t instanceof r ? t : new r((function(e) {
              e(t);
            }));
          }(t.value).then(a, s);
        }
        u((n = n.apply(t, e || [])).next());
      }));
    }
    function c(t, e) {
      var r, n, i, o, a = {
        label: 0,
        sent: function() {
          if (1 & i[0]) throw i[1];
          return i[1];
        },
        trys: [],
        ops: []
      };
      return o = {
        next: s(0),
        throw: s(1),
        return: s(2)
      }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
        return this;
      }), o;
      function s(o) {
        return function(s) {
          return function(o) {
            if (r) throw new TypeError("Generator is already executing.");
            for (;a; ) try {
              if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;
              switch (n = 0, i && (o = [ 2 & o[0], i.value ]), o[0]) {
               case 0:
               case 1:
                i = o;
                break;

               case 4:
                return a.label++, {
                  value: o[1],
                  done: !1
                };

               case 5:
                a.label++, n = o[1], o = [ 0 ];
                continue;

               case 7:
                o = a.ops.pop(), a.trys.pop();
                continue;

               default:
                if (!(i = a.trys, (i = i.length > 0 && i[i.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                  a = 0;
                  continue;
                }
                if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {
                  a.label = o[1];
                  break;
                }
                if (6 === o[0] && a.label < i[1]) {
                  a.label = i[1], i = o;
                  break;
                }
                if (i && a.label < i[2]) {
                  a.label = i[2], a.ops.push(o);
                  break;
                }
                i[2] && a.ops.pop(), a.trys.pop();
                continue;
              }
              o = e.call(t, a);
            } catch (s) {
              o = [ 6, s ], n = 0;
            } finally {
              r = i = 0;
            }
            if (5 & o[0]) throw o[1];
            return {
              value: o[0] ? o[1] : void 0,
              done: !0
            };
          }([ o, s ]);
        };
      }
    }
    var f = Object.create ? function(t, e, r, n) {
      void 0 === n && (n = r);
      var i = Object.getOwnPropertyDescriptor(e, r);
      i && !("get" in i ? !e.__esModule : i.writable || i.configurable) || (i = {
        enumerable: !0,
        get: function() {
          return e[r];
        }
      }), Object.defineProperty(t, n, i);
    } : function(t, e, r, n) {
      void 0 === n && (n = r), t[n] = e[r];
    };
    function d(t, e) {
      for (var r in t) "default" === r || Object.prototype.hasOwnProperty.call(e, r) || f(e, t, r);
    }
    function p(t) {
      var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
      if (r) return r.call(t);
      if (t && "number" == typeof t.length) return {
        next: function() {
          return t && n >= t.length && (t = void 0), {
            value: t && t[n++],
            done: !t
          };
        }
      };
      throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function m(t, e) {
      var r = "function" == typeof Symbol && t[Symbol.iterator];
      if (!r) return t;
      var n, i, o = r.call(t), a = [];
      try {
        for (;(void 0 === e || e-- > 0) && !(n = o.next()).done; ) a.push(n.value);
      } catch (s) {
        i = {
          error: s
        };
      } finally {
        try {
          n && !n.done && (r = o.return) && r.call(o);
        } finally {
          if (i) throw i.error;
        }
      }
      return a;
    }
    function v() {
      for (var t = [], e = 0; e < arguments.length; e++) t = t.concat(m(arguments[e]));
      return t;
    }
    function g() {
      for (var t = 0, e = 0, r = arguments.length; e < r; e++) t += arguments[e].length;
      var n = Array(t), i = 0;
      for (e = 0; e < r; e++) for (var o = arguments[e], a = 0, s = o.length; a < s; a++, i++) n[i] = o[a];
      return n;
    }
    function y(t, e, r) {
      if (r || 2 === arguments.length) for (var n, i = 0, o = e.length; i < o; i++) !n && i in e || (n || (n = Array.prototype.slice.call(e, 0, i)), 
      n[i] = e[i]);
      return t.concat(n || Array.prototype.slice.call(e));
    }
    function w(t) {
      return this instanceof w ? (this.v = t, this) : new w(t);
    }
    function _(t, e, r) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var n, i = r.apply(t, e || []), o = [];
      return n = {}, a("next"), a("throw"), a("return"), n[Symbol.asyncIterator] = function() {
        return this;
      }, n;
      function a(t) {
        i[t] && (n[t] = function(e) {
          return new Promise((function(r, n) {
            o.push([ t, e, r, n ]) > 1 || s(t, e);
          }));
        });
      }
      function s(t, e) {
        try {
          !function(t) {
            t.value instanceof w ? Promise.resolve(t.value.v).then(u, h) : l(o[0][2], t);
          }(i[t](e));
        } catch (r) {
          l(o[0][3], r);
        }
      }
      function u(t) {
        s("next", t);
      }
      function h(t) {
        s("throw", t);
      }
      function l(t, e) {
        t(e), o.shift(), o.length && s(o[0][0], o[0][1]);
      }
    }
    function M(t) {
      var e, r;
      return e = {}, n("next"), n("throw", (function(t) {
        throw t;
      })), n("return"), e[Symbol.iterator] = function() {
        return this;
      }, e;
      function n(n, i) {
        e[n] = t[n] ? function(e) {
          return (r = !r) ? {
            value: w(t[n](e)),
            done: "return" === n
          } : i ? i(e) : e;
        } : i;
      }
    }
    function b(t) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var e, r = t[Symbol.asyncIterator];
      return r ? r.call(t) : (t = p(t), e = {}, n("next"), n("throw"), n("return"), e[Symbol.asyncIterator] = function() {
        return this;
      }, e);
      function n(r) {
        e[r] = t[r] && function(e) {
          return new Promise((function(n, i) {
            (function(t, e, r, n) {
              Promise.resolve(n).then((function(e) {
                t({
                  value: e,
                  done: r
                });
              }), e);
            })(n, i, (e = t[r](e)).done, e.value);
          }));
        };
      }
    }
    function k(t, e) {
      return Object.defineProperty ? Object.defineProperty(t, "raw", {
        value: e
      }) : t.raw = e, t;
    }
    var x = Object.create ? function(t, e) {
      Object.defineProperty(t, "default", {
        enumerable: !0,
        value: e
      });
    } : function(t, e) {
      t.default = e;
    };
    function A(t) {
      if (t && t.__esModule) return t;
      var e = {};
      if (null != t) for (var r in t) "default" !== r && Object.prototype.hasOwnProperty.call(t, r) && f(e, t, r);
      return x(e, t), e;
    }
    function E(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    }
    function S(t, e, r, n) {
      if ("a" === r && !n) throw new TypeError("Private accessor was defined without a getter");
      if ("function" == typeof e ? t !== e || !n : !e.has(t)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return "m" === r ? n : "a" === r ? n.call(t) : n ? n.value : e.get(t);
    }
    function R(t, e, r, n, i) {
      if ("m" === n) throw new TypeError("Private method is not writable");
      if ("a" === n && !i) throw new TypeError("Private accessor was defined without a setter");
      if ("function" == typeof e ? t !== e || !i : !e.has(t)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return "a" === n ? i.call(t, r) : i ? i.value = r : e.set(t, r), r;
    }
    function C(t, e) {
      if (null === e || "object" != typeof e && "function" != typeof e) throw new TypeError("Cannot use 'in' operator on non-object");
      return "function" == typeof t ? e === t : t.has(e);
    }
  },
  65054: (t, e, r) => {
    var n = r(48764).Buffer;
    var i = r(4501).strict;
    t.exports = function(t) {
      if (i(t)) {
        var e = n.from(t.buffer);
        return t.byteLength !== t.buffer.byteLength && (e = e.slice(t.byteOffset, t.byteOffset + t.byteLength)), e;
      }
      return n.from(t);
    };
  },
  12906: (t, e, r) => {
    var n = r(25108);
    const i = r(17187).EventEmitter;
    const o = r(89539).inherits;
    const a = r(86918);
    const s = r(75012);
    const u = r(94005);
    const h = r(94282);
    const l = r(52698);
    r(6496);
    const c = r(39728);
    const f = function() {};
    function d(t) {
      const e = this;
      i.call(e), e.setMaxListeners(30), t = t || {};
      const r = {
        sendAsync: e._handleAsync.bind(e)
      };
      const n = t.blockTrackerProvider || r;
      e._blockTracker = t.blockTracker || new s({
        provider: n,
        pollingInterval: t.pollingInterval || 4e3,
        setSkipCacheFlag: !0
      }), e._ready = new l, e.currentBlock = null, e._providers = [];
    }
    t.exports = d, o(d, i), d.prototype.start = function(t = f) {
      const e = this;
      e._ready.go(), e._blockTracker.on('latest', (t => {
        e._getBlockByNumberWithRetry(t, ((t, r) => {
          if (t) return void this.emit('error', t);
          if (!r) return n.log(r), void this.emit('error', new Error("Could not find block"));
          const i = function(t) {
            return {
              number: a.toBuffer(t.number),
              hash: a.toBuffer(t.hash),
              parentHash: a.toBuffer(t.parentHash),
              nonce: a.toBuffer(t.nonce),
              mixHash: a.toBuffer(t.mixHash),
              sha3Uncles: a.toBuffer(t.sha3Uncles),
              logsBloom: a.toBuffer(t.logsBloom),
              transactionsRoot: a.toBuffer(t.transactionsRoot),
              stateRoot: a.toBuffer(t.stateRoot),
              receiptsRoot: a.toBuffer(t.receiptRoot || t.receiptsRoot),
              miner: a.toBuffer(t.miner),
              difficulty: a.toBuffer(t.difficulty),
              totalDifficulty: a.toBuffer(t.totalDifficulty),
              size: a.toBuffer(t.size),
              extraData: a.toBuffer(t.extraData),
              gasLimit: a.toBuffer(t.gasLimit),
              gasUsed: a.toBuffer(t.gasUsed),
              timestamp: a.toBuffer(t.timestamp),
              transactions: t.transactions
            };
          }(r);
          e._setCurrentBlock(i), e.emit('rawBlock', r), e.emit('latest', r);
        }));
      })), e._blockTracker.on('sync', e.emit.bind(e, 'sync')), e._blockTracker.on('error', e.emit.bind(e, 'error')), e._running = !0, 
      e.emit('start');
    }, d.prototype.stop = function() {
      const t = this;
      t._blockTracker.removeAllListeners(), t._running = !1, t.emit('stop');
    }, d.prototype.isRunning = function() {
      return this._running;
    }, d.prototype.addProvider = function(t, e) {
      const r = this;
      'number' == typeof e ? r._providers.splice(e, 0, t) : r._providers.push(t), t.setEngine(this);
    }, d.prototype.removeProvider = function(t) {
      const e = this._providers.indexOf(t);
      if (e < 0) throw new Error('Provider not found.');
      this._providers.splice(e, 1);
    }, d.prototype.send = function(t) {
      throw new Error('Web3ProviderEngine does not support synchronous requests.');
    }, d.prototype.sendAsync = function(t, e) {
      const r = this;
      r._ready.await((function() {
        Array.isArray(t) ? u(t, r._handleAsync.bind(r), e) : r._handleAsync(t, e);
      }));
    }, d.prototype._getBlockByNumberWithRetry = function(t, e) {
      const r = this;
      let n = 5;
      return void i();
      function i() {
        r._getBlockByNumber(t, o);
      }
      function o(t, r) {
        return t ? e(t) : r ? void e(null, r) : n > 0 ? (n--, void setTimeout((function() {
          i();
        }), 1e3)) : void e(null, null);
      }
    }, d.prototype._getBlockByNumber = function(t, e) {
      const r = c({
        method: 'eth_getBlockByNumber',
        params: [ t, !1 ],
        skipCache: !0
      });
      this._handleAsync(r, ((t, r) => t ? e(t) : e(null, r.result)));
    }, d.prototype._handleAsync = function(t, e) {
      var r = this;
      var n = -1;
      var i = null;
      var o = null;
      var a = [];
      function s(r, n) {
        o = r, i = n, h(a, (function(t, e) {
          t ? t(o, i, e) : e();
        }), (function() {
          var r = {
            id: t.id,
            jsonrpc: t.jsonrpc,
            result: i
          };
          null != o ? (r.error = {
            message: o.stack || o.message || o,
            code: -32e3
          }, e(o, r)) : e(null, r);
        }));
      }
      !function e(i) {
        if (n += 1, a.unshift(i), n >= r._providers.length) s(new Error('Request for method "' + t.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.')); else try {
          r._providers[n].handleRequest(t, e, s);
        } catch (o) {
          s(o);
        }
      }();
    }, d.prototype._setCurrentBlock = function(t) {
      this.currentBlock = t, this.emit('block', t);
    };
  },
  26949: function(t, e, r) {
    !function(t, e) {
      'use strict';
      function n(t, e) {
        if (!t) throw new Error(e || 'Assertion failed');
      }
      function i(t, e) {
        t.super_ = e;
        var r = function() {};
        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
      }
      function o(t, e, r) {
        if (o.isBN(t)) return t;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ('le' !== e && 'be' !== e || (r = e, 
        e = 10), this._init(t || 0, e || 10, r || 'be'));
      }
      var a;
      'object' == typeof t ? t.exports = o : e.BN = o, o.BN = o, o.wordSize = 26;
      try {
        a = 'undefined' != typeof window && void 0 !== window.Buffer ? window.Buffer : r(24414).Buffer;
      } catch (A) {}
      function s(t, e) {
        var r = t.charCodeAt(e);
        return r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : r - 48 & 15;
      }
      function u(t, e, r) {
        var n = s(t, r);
        return r - 1 >= e && (n |= s(t, r - 1) << 4), n;
      }
      function h(t, e, r, n) {
        var i = 0;
        var o = Math.min(t.length, r);
        for (var a = e; a < o; a++) {
          var s = t.charCodeAt(a) - 48;
          i *= n, i += s >= 49 ? s - 49 + 10 : s >= 17 ? s - 17 + 10 : s;
        }
        return i;
      }
      o.isBN = function(t) {
        return t instanceof o || null !== t && 'object' == typeof t && t.constructor.wordSize === o.wordSize && Array.isArray(t.words);
      }, o.max = function(t, e) {
        return t.cmp(e) > 0 ? t : e;
      }, o.min = function(t, e) {
        return t.cmp(e) < 0 ? t : e;
      }, o.prototype._init = function(t, e, r) {
        if ('number' == typeof t) return this._initNumber(t, e, r);
        if ('object' == typeof t) return this._initArray(t, e, r);
        'hex' === e && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
        var i = 0;
        '-' === (t = t.toString().replace(/\s+/g, ''))[0] && (i++, this.negative = 1), i < t.length && (16 === e ? this._parseHex(t, i, r) : (this._parseBase(t, e, i), 
        'le' === r && this._initArray(this.toArray(), e, r)));
      }, o.prototype._initNumber = function(t, e, r) {
        t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [ 67108863 & t ], this.length = 1) : t < 4503599627370496 ? (this.words = [ 67108863 & t, t / 67108864 & 67108863 ], 
        this.length = 2) : (n(t < 9007199254740992), this.words = [ 67108863 & t, t / 67108864 & 67108863, 1 ], this.length = 3), 
        'le' === r && this._initArray(this.toArray(), e, r);
      }, o.prototype._initArray = function(t, e, r) {
        if (n('number' == typeof t.length), t.length <= 0) return this.words = [ 0 ], this.length = 1, this;
        this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) this.words[i] = 0;
        var o, a;
        var s = 0;
        if ('be' === r) for (i = t.length - 1, o = 0; i >= 0; i -= 3) a = t[i] | t[i - 1] << 8 | t[i - 2] << 16, this.words[o] |= a << s & 67108863, 
        this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++); else if ('le' === r) for (i = 0, o = 0; i < t.length; i += 3) a = t[i] | t[i + 1] << 8 | t[i + 2] << 16, 
        this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
        return this.strip();
      }, o.prototype._parseHex = function(t, e, r) {
        this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
        for (var n = 0; n < this.length; n++) this.words[n] = 0;
        var i = 0;
        var o = 0;
        var a;
        if ('be' === r) for (n = t.length - 1; n >= e; n -= 2) a = u(t, e, n) << i, this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, 
        o += 1, this.words[o] |= a >>> 26) : i += 8; else for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) a = u(t, e, n) << i, 
        this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, o += 1, this.words[o] |= a >>> 26) : i += 8;
        this.strip();
      }, o.prototype._parseBase = function(t, e, r) {
        this.words = [ 0 ], this.length = 1;
        for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
        n--, i = i / e | 0;
        var o = t.length - r;
        var a = o % n;
        var s = Math.min(o, o - a) + r;
        var u = 0;
        for (var l = r; l < s; l += n) u = h(t, l, l + n, e), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        if (0 !== a) {
          var c = 1;
          for (u = h(t, l, t.length, e), l = 0; l < a; l++) c *= e;
          this.imuln(c), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        }
        this.strip();
      }, o.prototype.copy = function(t) {
        t.words = new Array(this.length);
        for (var e = 0; e < this.length; e++) t.words[e] = this.words[e];
        t.length = this.length, t.negative = this.negative, t.red = this.red;
      }, o.prototype.clone = function() {
        var t = new o(null);
        return this.copy(t), t;
      }, o.prototype._expand = function(t) {
        for (;this.length < t; ) this.words[this.length++] = 0;
        return this;
      }, o.prototype.strip = function() {
        for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
        return this._normSign();
      }, o.prototype._normSign = function() {
        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
      }, o.prototype.inspect = function() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
      var l = [ '', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000' ];
      var c = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
      var f = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
      function d(t, e, r) {
        r.negative = e.negative ^ t.negative;
        var n = t.length + e.length | 0;
        r.length = n, n = n - 1 | 0;
        var i = 0 | t.words[0];
        var o = 0 | e.words[0];
        var a = i * o;
        var s = 67108863 & a;
        var u = a / 67108864 | 0;
        r.words[0] = s;
        for (var h = 1; h < n; h++) {
          var l = u >>> 26;
          var c = 67108863 & u;
          var f = Math.min(h, e.length - 1);
          for (var d = Math.max(0, h - t.length + 1); d <= f; d++) {
            var p = h - d | 0;
            l += (a = (i = 0 | t.words[p]) * (o = 0 | e.words[d]) + c) / 67108864 | 0, c = 67108863 & a;
          }
          r.words[h] = 0 | c, u = 0 | l;
        }
        return 0 !== u ? r.words[h] = 0 | u : r.length--, r.strip();
      }
      o.prototype.toString = function(t, e) {
        var r;
        if (e = 0 | e || 1, 16 === (t = t || 10) || 'hex' === t) {
          r = '';
          var i = 0;
          var o = 0;
          for (var a = 0; a < this.length; a++) {
            var s = this.words[a];
            var u = (16777215 & (s << i | o)).toString(16);
            r = 0 !== (o = s >>> 24 - i & 16777215) || a !== this.length - 1 ? l[6 - u.length] + u + r : u + r, (i += 2) >= 26 && (i -= 26, 
            a--);
          }
          for (0 !== o && (r = o.toString(16) + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        if (t === (0 | t) && t >= 2 && t <= 36) {
          var h = c[t];
          var d = f[t];
          r = '';
          var p = this.clone();
          for (p.negative = 0; !p.isZero(); ) {
            var m = p.modn(d).toString(t);
            r = (p = p.idivn(d)).isZero() ? m + r : l[h - m.length] + m + r;
          }
          for (this.isZero() && (r = '0' + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        n(!1, 'Base should be between 2 and 36');
      }, o.prototype.toNumber = function() {
        var t = this.words[0];
        return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, 'Number can only safely store up to 53 bits'), 
        0 !== this.negative ? -t : t;
      }, o.prototype.toJSON = function() {
        return this.toString(16);
      }, o.prototype.toBuffer = function(t, e) {
        return n(void 0 !== a), this.toArrayLike(a, t, e);
      }, o.prototype.toArray = function(t, e) {
        return this.toArrayLike(Array, t, e);
      }, o.prototype.toArrayLike = function(t, e, r) {
        var i = this.byteLength();
        var o = r || Math.max(1, i);
        n(i <= o, 'byte array longer than desired length'), n(o > 0, 'Requested array length <= 0'), this.strip();
        var a = 'le' === e;
        var s = new t(o);
        var u, h;
        var l = this.clone();
        if (a) {
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[h] = u;
          for (;h < o; h++) s[h] = 0;
        } else {
          for (h = 0; h < o - i; h++) s[h] = 0;
          for (h = 0; !l.isZero(); h++) u = l.andln(255), l.iushrn(8), s[o - h - 1] = u;
        }
        return s;
      }, Math.clz32 ? o.prototype._countBits = function(t) {
        return 32 - Math.clz32(t);
      } : o.prototype._countBits = function(t) {
        var e = t;
        var r = 0;
        return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, e >>>= 4), e >= 2 && (r += 2, 
        e >>>= 2), r + e;
      }, o.prototype._zeroBits = function(t) {
        if (0 === t) return 26;
        var e = t;
        var r = 0;
        return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 0 == (15 & e) && (r += 4, e >>>= 4), 
        0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, r;
      }, o.prototype.bitLength = function() {
        var t = this.words[this.length - 1];
        var e = this._countBits(t);
        return 26 * (this.length - 1) + e;
      }, o.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        var t = 0;
        for (var e = 0; e < this.length; e++) {
          var r = this._zeroBits(this.words[e]);
          if (t += r, 26 !== r) break;
        }
        return t;
      }, o.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, o.prototype.toTwos = function(t) {
        return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
      }, o.prototype.fromTwos = function(t) {
        return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
      }, o.prototype.isNeg = function() {
        return 0 !== this.negative;
      }, o.prototype.neg = function() {
        return this.clone().ineg();
      }, o.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, o.prototype.iuor = function(t) {
        for (;this.length < t.length; ) this.words[this.length++] = 0;
        for (var e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
        return this.strip();
      }, o.prototype.ior = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuor(t);
      }, o.prototype.or = function(t) {
        return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
      }, o.prototype.uor = function(t) {
        return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
      }, o.prototype.iuand = function(t) {
        var e;
        e = this.length > t.length ? t : this;
        for (var r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
        return this.length = e.length, this.strip();
      }, o.prototype.iand = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuand(t);
      }, o.prototype.and = function(t) {
        return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
      }, o.prototype.uand = function(t) {
        return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
      }, o.prototype.iuxor = function(t) {
        var e;
        var r;
        this.length > t.length ? (e = this, r = t) : (e = t, r = this);
        for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
        if (this !== e) for (;n < e.length; n++) this.words[n] = e.words[n];
        return this.length = e.length, this.strip();
      }, o.prototype.ixor = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuxor(t);
      }, o.prototype.xor = function(t) {
        return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
      }, o.prototype.uxor = function(t) {
        return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
      }, o.prototype.inotn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = 0 | Math.ceil(t / 26);
        var r = t % 26;
        this._expand(e), r > 0 && e--;
        for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
        return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this.strip();
      }, o.prototype.notn = function(t) {
        return this.clone().inotn(t);
      }, o.prototype.setn = function(t, e) {
        n('number' == typeof t && t >= 0);
        var r = t / 26 | 0;
        var i = t % 26;
        return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this.strip();
      }, o.prototype.iadd = function(t) {
        var e;
        if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), this.negative ^= 1, this._normSign();
        if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), t.negative = 1, e._normSign();
        var r, n;
        this.length > t.length ? (r = this, n = t) : (r = t, n = this);
        var i = 0;
        for (var o = 0; o < n.length; o++) e = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        for (;0 !== i && o < r.length; o++) e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
        return this;
      }, o.prototype.add = function(t) {
        var e;
        return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, 
        e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
      }, o.prototype.isub = function(t) {
        if (0 !== t.negative) {
          t.negative = 0;
          var e = this.iadd(t);
          return t.negative = 1, e._normSign();
        }
        if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, this._normSign();
        var r = this.cmp(t);
        if (0 === r) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var n, i;
        r > 0 ? (n = this, i = t) : (n = t, i = this);
        var o = 0;
        for (var a = 0; a < i.length; a++) o = (e = (0 | n.words[a]) - (0 | i.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        for (;0 !== o && a < n.length; a++) o = (e = (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        if (0 === o && a < n.length && n !== this) for (;a < n.length; a++) this.words[a] = n.words[a];
        return this.length = Math.max(this.length, a), n !== this && (this.negative = 1), this.strip();
      }, o.prototype.sub = function(t) {
        return this.clone().isub(t);
      };
      var p = function(t, e, r) {
        var n = t.words;
        var i = e.words;
        var o = r.words;
        var a = 0;
        var s;
        var u;
        var h;
        var l = 0 | n[0];
        var c = 8191 & l;
        var f = l >>> 13;
        var d = 0 | n[1];
        var p = 8191 & d;
        var m = d >>> 13;
        var v = 0 | n[2];
        var g = 8191 & v;
        var y = v >>> 13;
        var w = 0 | n[3];
        var _ = 8191 & w;
        var M = w >>> 13;
        var b = 0 | n[4];
        var k = 8191 & b;
        var x = b >>> 13;
        var A = 0 | n[5];
        var E = 8191 & A;
        var S = A >>> 13;
        var R = 0 | n[6];
        var C = 8191 & R;
        var T = R >>> 13;
        var B = 0 | n[7];
        var L = 8191 & B;
        var P = B >>> 13;
        var I = 0 | n[8];
        var O = 8191 & I;
        var N = I >>> 13;
        var U = 0 | n[9];
        var q = 8191 & U;
        var j = U >>> 13;
        var K = 0 | i[0];
        var H = 8191 & K;
        var F = K >>> 13;
        var z = 0 | i[1];
        var D = 8191 & z;
        var Z = z >>> 13;
        var W = 0 | i[2];
        var V = 8191 & W;
        var $ = W >>> 13;
        var G = 0 | i[3];
        var Y = 8191 & G;
        var J = G >>> 13;
        var Q = 0 | i[4];
        var X = 8191 & Q;
        var tt = Q >>> 13;
        var et = 0 | i[5];
        var rt = 8191 & et;
        var nt = et >>> 13;
        var it = 0 | i[6];
        var ot = 8191 & it;
        var at = it >>> 13;
        var st = 0 | i[7];
        var ut = 8191 & st;
        var ht = st >>> 13;
        var lt = 0 | i[8];
        var ct = 8191 & lt;
        var ft = lt >>> 13;
        var dt = 0 | i[9];
        var pt = 8191 & dt;
        var mt = dt >>> 13;
        r.negative = t.negative ^ e.negative, r.length = 19;
        var vt = (a + (s = Math.imul(c, H)) | 0) + ((8191 & (u = (u = Math.imul(c, F)) + Math.imul(f, H) | 0)) << 13) | 0;
        a = ((h = Math.imul(f, F)) + (u >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, s = Math.imul(p, H), u = (u = Math.imul(p, F)) + Math.imul(m, H) | 0, 
        h = Math.imul(m, F);
        var gt = (a + (s = s + Math.imul(c, D) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, Z) | 0) + Math.imul(f, D) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, Z) | 0) + (u >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, s = Math.imul(g, H), u = (u = Math.imul(g, F)) + Math.imul(y, H) | 0, 
        h = Math.imul(y, F), s = s + Math.imul(p, D) | 0, u = (u = u + Math.imul(p, Z) | 0) + Math.imul(m, D) | 0, h = h + Math.imul(m, Z) | 0;
        var yt = (a + (s = s + Math.imul(c, V) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, $) | 0) + Math.imul(f, V) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, $) | 0) + (u >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, s = Math.imul(_, H), u = (u = Math.imul(_, F)) + Math.imul(M, H) | 0, 
        h = Math.imul(M, F), s = s + Math.imul(g, D) | 0, u = (u = u + Math.imul(g, Z) | 0) + Math.imul(y, D) | 0, h = h + Math.imul(y, Z) | 0, 
        s = s + Math.imul(p, V) | 0, u = (u = u + Math.imul(p, $) | 0) + Math.imul(m, V) | 0, h = h + Math.imul(m, $) | 0;
        var wt = (a + (s = s + Math.imul(c, Y) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, J) | 0) + Math.imul(f, Y) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, J) | 0) + (u >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, s = Math.imul(k, H), u = (u = Math.imul(k, F)) + Math.imul(x, H) | 0, 
        h = Math.imul(x, F), s = s + Math.imul(_, D) | 0, u = (u = u + Math.imul(_, Z) | 0) + Math.imul(M, D) | 0, h = h + Math.imul(M, Z) | 0, 
        s = s + Math.imul(g, V) | 0, u = (u = u + Math.imul(g, $) | 0) + Math.imul(y, V) | 0, h = h + Math.imul(y, $) | 0, s = s + Math.imul(p, Y) | 0, 
        u = (u = u + Math.imul(p, J) | 0) + Math.imul(m, Y) | 0, h = h + Math.imul(m, J) | 0;
        var _t = (a + (s = s + Math.imul(c, X) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, tt) | 0) + Math.imul(f, X) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, tt) | 0) + (u >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, s = Math.imul(E, H), u = (u = Math.imul(E, F)) + Math.imul(S, H) | 0, 
        h = Math.imul(S, F), s = s + Math.imul(k, D) | 0, u = (u = u + Math.imul(k, Z) | 0) + Math.imul(x, D) | 0, h = h + Math.imul(x, Z) | 0, 
        s = s + Math.imul(_, V) | 0, u = (u = u + Math.imul(_, $) | 0) + Math.imul(M, V) | 0, h = h + Math.imul(M, $) | 0, s = s + Math.imul(g, Y) | 0, 
        u = (u = u + Math.imul(g, J) | 0) + Math.imul(y, Y) | 0, h = h + Math.imul(y, J) | 0, s = s + Math.imul(p, X) | 0, u = (u = u + Math.imul(p, tt) | 0) + Math.imul(m, X) | 0, 
        h = h + Math.imul(m, tt) | 0;
        var Mt = (a + (s = s + Math.imul(c, rt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, nt) | 0) + Math.imul(f, rt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, nt) | 0) + (u >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, s = Math.imul(C, H), u = (u = Math.imul(C, F)) + Math.imul(T, H) | 0, 
        h = Math.imul(T, F), s = s + Math.imul(E, D) | 0, u = (u = u + Math.imul(E, Z) | 0) + Math.imul(S, D) | 0, h = h + Math.imul(S, Z) | 0, 
        s = s + Math.imul(k, V) | 0, u = (u = u + Math.imul(k, $) | 0) + Math.imul(x, V) | 0, h = h + Math.imul(x, $) | 0, s = s + Math.imul(_, Y) | 0, 
        u = (u = u + Math.imul(_, J) | 0) + Math.imul(M, Y) | 0, h = h + Math.imul(M, J) | 0, s = s + Math.imul(g, X) | 0, u = (u = u + Math.imul(g, tt) | 0) + Math.imul(y, X) | 0, 
        h = h + Math.imul(y, tt) | 0, s = s + Math.imul(p, rt) | 0, u = (u = u + Math.imul(p, nt) | 0) + Math.imul(m, rt) | 0, h = h + Math.imul(m, nt) | 0;
        var bt = (a + (s = s + Math.imul(c, ot) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, at) | 0) + Math.imul(f, ot) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, at) | 0) + (u >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, s = Math.imul(L, H), u = (u = Math.imul(L, F)) + Math.imul(P, H) | 0, 
        h = Math.imul(P, F), s = s + Math.imul(C, D) | 0, u = (u = u + Math.imul(C, Z) | 0) + Math.imul(T, D) | 0, h = h + Math.imul(T, Z) | 0, 
        s = s + Math.imul(E, V) | 0, u = (u = u + Math.imul(E, $) | 0) + Math.imul(S, V) | 0, h = h + Math.imul(S, $) | 0, s = s + Math.imul(k, Y) | 0, 
        u = (u = u + Math.imul(k, J) | 0) + Math.imul(x, Y) | 0, h = h + Math.imul(x, J) | 0, s = s + Math.imul(_, X) | 0, u = (u = u + Math.imul(_, tt) | 0) + Math.imul(M, X) | 0, 
        h = h + Math.imul(M, tt) | 0, s = s + Math.imul(g, rt) | 0, u = (u = u + Math.imul(g, nt) | 0) + Math.imul(y, rt) | 0, h = h + Math.imul(y, nt) | 0, 
        s = s + Math.imul(p, ot) | 0, u = (u = u + Math.imul(p, at) | 0) + Math.imul(m, ot) | 0, h = h + Math.imul(m, at) | 0;
        var kt = (a + (s = s + Math.imul(c, ut) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ht) | 0) + Math.imul(f, ut) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ht) | 0) + (u >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, s = Math.imul(O, H), u = (u = Math.imul(O, F)) + Math.imul(N, H) | 0, 
        h = Math.imul(N, F), s = s + Math.imul(L, D) | 0, u = (u = u + Math.imul(L, Z) | 0) + Math.imul(P, D) | 0, h = h + Math.imul(P, Z) | 0, 
        s = s + Math.imul(C, V) | 0, u = (u = u + Math.imul(C, $) | 0) + Math.imul(T, V) | 0, h = h + Math.imul(T, $) | 0, s = s + Math.imul(E, Y) | 0, 
        u = (u = u + Math.imul(E, J) | 0) + Math.imul(S, Y) | 0, h = h + Math.imul(S, J) | 0, s = s + Math.imul(k, X) | 0, u = (u = u + Math.imul(k, tt) | 0) + Math.imul(x, X) | 0, 
        h = h + Math.imul(x, tt) | 0, s = s + Math.imul(_, rt) | 0, u = (u = u + Math.imul(_, nt) | 0) + Math.imul(M, rt) | 0, h = h + Math.imul(M, nt) | 0, 
        s = s + Math.imul(g, ot) | 0, u = (u = u + Math.imul(g, at) | 0) + Math.imul(y, ot) | 0, h = h + Math.imul(y, at) | 0, s = s + Math.imul(p, ut) | 0, 
        u = (u = u + Math.imul(p, ht) | 0) + Math.imul(m, ut) | 0, h = h + Math.imul(m, ht) | 0;
        var xt = (a + (s = s + Math.imul(c, ct) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, ft) | 0) + Math.imul(f, ct) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, ft) | 0) + (u >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, s = Math.imul(q, H), u = (u = Math.imul(q, F)) + Math.imul(j, H) | 0, 
        h = Math.imul(j, F), s = s + Math.imul(O, D) | 0, u = (u = u + Math.imul(O, Z) | 0) + Math.imul(N, D) | 0, h = h + Math.imul(N, Z) | 0, 
        s = s + Math.imul(L, V) | 0, u = (u = u + Math.imul(L, $) | 0) + Math.imul(P, V) | 0, h = h + Math.imul(P, $) | 0, s = s + Math.imul(C, Y) | 0, 
        u = (u = u + Math.imul(C, J) | 0) + Math.imul(T, Y) | 0, h = h + Math.imul(T, J) | 0, s = s + Math.imul(E, X) | 0, u = (u = u + Math.imul(E, tt) | 0) + Math.imul(S, X) | 0, 
        h = h + Math.imul(S, tt) | 0, s = s + Math.imul(k, rt) | 0, u = (u = u + Math.imul(k, nt) | 0) + Math.imul(x, rt) | 0, h = h + Math.imul(x, nt) | 0, 
        s = s + Math.imul(_, ot) | 0, u = (u = u + Math.imul(_, at) | 0) + Math.imul(M, ot) | 0, h = h + Math.imul(M, at) | 0, s = s + Math.imul(g, ut) | 0, 
        u = (u = u + Math.imul(g, ht) | 0) + Math.imul(y, ut) | 0, h = h + Math.imul(y, ht) | 0, s = s + Math.imul(p, ct) | 0, u = (u = u + Math.imul(p, ft) | 0) + Math.imul(m, ct) | 0, 
        h = h + Math.imul(m, ft) | 0;
        var At = (a + (s = s + Math.imul(c, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(c, mt) | 0) + Math.imul(f, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(f, mt) | 0) + (u >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, s = Math.imul(q, D), u = (u = Math.imul(q, Z)) + Math.imul(j, D) | 0, 
        h = Math.imul(j, Z), s = s + Math.imul(O, V) | 0, u = (u = u + Math.imul(O, $) | 0) + Math.imul(N, V) | 0, h = h + Math.imul(N, $) | 0, 
        s = s + Math.imul(L, Y) | 0, u = (u = u + Math.imul(L, J) | 0) + Math.imul(P, Y) | 0, h = h + Math.imul(P, J) | 0, s = s + Math.imul(C, X) | 0, 
        u = (u = u + Math.imul(C, tt) | 0) + Math.imul(T, X) | 0, h = h + Math.imul(T, tt) | 0, s = s + Math.imul(E, rt) | 0, u = (u = u + Math.imul(E, nt) | 0) + Math.imul(S, rt) | 0, 
        h = h + Math.imul(S, nt) | 0, s = s + Math.imul(k, ot) | 0, u = (u = u + Math.imul(k, at) | 0) + Math.imul(x, ot) | 0, h = h + Math.imul(x, at) | 0, 
        s = s + Math.imul(_, ut) | 0, u = (u = u + Math.imul(_, ht) | 0) + Math.imul(M, ut) | 0, h = h + Math.imul(M, ht) | 0, s = s + Math.imul(g, ct) | 0, 
        u = (u = u + Math.imul(g, ft) | 0) + Math.imul(y, ct) | 0, h = h + Math.imul(y, ft) | 0;
        var Et = (a + (s = s + Math.imul(p, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(p, mt) | 0) + Math.imul(m, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(m, mt) | 0) + (u >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, s = Math.imul(q, V), u = (u = Math.imul(q, $)) + Math.imul(j, V) | 0, 
        h = Math.imul(j, $), s = s + Math.imul(O, Y) | 0, u = (u = u + Math.imul(O, J) | 0) + Math.imul(N, Y) | 0, h = h + Math.imul(N, J) | 0, 
        s = s + Math.imul(L, X) | 0, u = (u = u + Math.imul(L, tt) | 0) + Math.imul(P, X) | 0, h = h + Math.imul(P, tt) | 0, s = s + Math.imul(C, rt) | 0, 
        u = (u = u + Math.imul(C, nt) | 0) + Math.imul(T, rt) | 0, h = h + Math.imul(T, nt) | 0, s = s + Math.imul(E, ot) | 0, u = (u = u + Math.imul(E, at) | 0) + Math.imul(S, ot) | 0, 
        h = h + Math.imul(S, at) | 0, s = s + Math.imul(k, ut) | 0, u = (u = u + Math.imul(k, ht) | 0) + Math.imul(x, ut) | 0, h = h + Math.imul(x, ht) | 0, 
        s = s + Math.imul(_, ct) | 0, u = (u = u + Math.imul(_, ft) | 0) + Math.imul(M, ct) | 0, h = h + Math.imul(M, ft) | 0;
        var St = (a + (s = s + Math.imul(g, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(g, mt) | 0) + Math.imul(y, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(y, mt) | 0) + (u >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, s = Math.imul(q, Y), u = (u = Math.imul(q, J)) + Math.imul(j, Y) | 0, 
        h = Math.imul(j, J), s = s + Math.imul(O, X) | 0, u = (u = u + Math.imul(O, tt) | 0) + Math.imul(N, X) | 0, h = h + Math.imul(N, tt) | 0, 
        s = s + Math.imul(L, rt) | 0, u = (u = u + Math.imul(L, nt) | 0) + Math.imul(P, rt) | 0, h = h + Math.imul(P, nt) | 0, s = s + Math.imul(C, ot) | 0, 
        u = (u = u + Math.imul(C, at) | 0) + Math.imul(T, ot) | 0, h = h + Math.imul(T, at) | 0, s = s + Math.imul(E, ut) | 0, u = (u = u + Math.imul(E, ht) | 0) + Math.imul(S, ut) | 0, 
        h = h + Math.imul(S, ht) | 0, s = s + Math.imul(k, ct) | 0, u = (u = u + Math.imul(k, ft) | 0) + Math.imul(x, ct) | 0, h = h + Math.imul(x, ft) | 0;
        var Rt = (a + (s = s + Math.imul(_, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(_, mt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(M, mt) | 0) + (u >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, s = Math.imul(q, X), u = (u = Math.imul(q, tt)) + Math.imul(j, X) | 0, 
        h = Math.imul(j, tt), s = s + Math.imul(O, rt) | 0, u = (u = u + Math.imul(O, nt) | 0) + Math.imul(N, rt) | 0, h = h + Math.imul(N, nt) | 0, 
        s = s + Math.imul(L, ot) | 0, u = (u = u + Math.imul(L, at) | 0) + Math.imul(P, ot) | 0, h = h + Math.imul(P, at) | 0, s = s + Math.imul(C, ut) | 0, 
        u = (u = u + Math.imul(C, ht) | 0) + Math.imul(T, ut) | 0, h = h + Math.imul(T, ht) | 0, s = s + Math.imul(E, ct) | 0, u = (u = u + Math.imul(E, ft) | 0) + Math.imul(S, ct) | 0, 
        h = h + Math.imul(S, ft) | 0;
        var Ct = (a + (s = s + Math.imul(k, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(k, mt) | 0) + Math.imul(x, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(x, mt) | 0) + (u >>> 13) | 0) + (Ct >>> 26) | 0, Ct &= 67108863, s = Math.imul(q, rt), u = (u = Math.imul(q, nt)) + Math.imul(j, rt) | 0, 
        h = Math.imul(j, nt), s = s + Math.imul(O, ot) | 0, u = (u = u + Math.imul(O, at) | 0) + Math.imul(N, ot) | 0, h = h + Math.imul(N, at) | 0, 
        s = s + Math.imul(L, ut) | 0, u = (u = u + Math.imul(L, ht) | 0) + Math.imul(P, ut) | 0, h = h + Math.imul(P, ht) | 0, s = s + Math.imul(C, ct) | 0, 
        u = (u = u + Math.imul(C, ft) | 0) + Math.imul(T, ct) | 0, h = h + Math.imul(T, ft) | 0;
        var Tt = (a + (s = s + Math.imul(E, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(E, mt) | 0) + Math.imul(S, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(S, mt) | 0) + (u >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, s = Math.imul(q, ot), u = (u = Math.imul(q, at)) + Math.imul(j, ot) | 0, 
        h = Math.imul(j, at), s = s + Math.imul(O, ut) | 0, u = (u = u + Math.imul(O, ht) | 0) + Math.imul(N, ut) | 0, h = h + Math.imul(N, ht) | 0, 
        s = s + Math.imul(L, ct) | 0, u = (u = u + Math.imul(L, ft) | 0) + Math.imul(P, ct) | 0, h = h + Math.imul(P, ft) | 0;
        var Bt = (a + (s = s + Math.imul(C, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(C, mt) | 0) + Math.imul(T, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(T, mt) | 0) + (u >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863, s = Math.imul(q, ut), u = (u = Math.imul(q, ht)) + Math.imul(j, ut) | 0, 
        h = Math.imul(j, ht), s = s + Math.imul(O, ct) | 0, u = (u = u + Math.imul(O, ft) | 0) + Math.imul(N, ct) | 0, h = h + Math.imul(N, ft) | 0;
        var Lt = (a + (s = s + Math.imul(L, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(L, mt) | 0) + Math.imul(P, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(P, mt) | 0) + (u >>> 13) | 0) + (Lt >>> 26) | 0, Lt &= 67108863, s = Math.imul(q, ct), u = (u = Math.imul(q, ft)) + Math.imul(j, ct) | 0, 
        h = Math.imul(j, ft);
        var Pt = (a + (s = s + Math.imul(O, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(O, mt) | 0) + Math.imul(N, pt) | 0)) << 13) | 0;
        a = ((h = h + Math.imul(N, mt) | 0) + (u >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863;
        var It = (a + (s = Math.imul(q, pt)) | 0) + ((8191 & (u = (u = Math.imul(q, mt)) + Math.imul(j, pt) | 0)) << 13) | 0;
        return a = ((h = Math.imul(j, mt)) + (u >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, o[0] = vt, o[1] = gt, o[2] = yt, 
        o[3] = wt, o[4] = _t, o[5] = Mt, o[6] = bt, o[7] = kt, o[8] = xt, o[9] = At, o[10] = Et, o[11] = St, o[12] = Rt, o[13] = Ct, 
        o[14] = Tt, o[15] = Bt, o[16] = Lt, o[17] = Pt, o[18] = It, 0 !== a && (o[19] = a, r.length++), r;
      };
      function m(t, e, r) {
        return (new v).mulp(t, e, r);
      }
      function v(t, e) {
        this.x = t, this.y = e;
      }
      Math.imul || (p = d), o.prototype.mulTo = function(t, e) {
        var r;
        var n = this.length + t.length;
        return r = 10 === this.length && 10 === t.length ? p(this, t, e) : n < 63 ? d(this, t, e) : n < 1024 ? function(t, e, r) {
          r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
          var n = 0;
          var i = 0;
          for (var o = 0; o < r.length - 1; o++) {
            var a = i;
            i = 0;
            var s = 67108863 & n;
            var u = Math.min(o, e.length - 1);
            for (var h = Math.max(0, o - t.length + 1); h <= u; h++) {
              var l = o - h;
              var c = (0 | t.words[l]) * (0 | e.words[h]);
              var f = 67108863 & c;
              s = 67108863 & (f = f + s | 0), i += (a = (a = a + (c / 67108864 | 0) | 0) + (f >>> 26) | 0) >>> 26, a &= 67108863;
            }
            r.words[o] = s, n = a, a = i;
          }
          return 0 !== n ? r.words[o] = n : r.length--, r.strip();
        }(this, t, e) : m(this, t, e), r;
      }, v.prototype.makeRBT = function(t) {
        var e = new Array(t);
        var r = o.prototype._countBits(t) - 1;
        for (var n = 0; n < t; n++) e[n] = this.revBin(n, r, t);
        return e;
      }, v.prototype.revBin = function(t, e, r) {
        if (0 === t || t === r - 1) return t;
        var n = 0;
        for (var i = 0; i < e; i++) n |= (1 & t) << e - i - 1, t >>= 1;
        return n;
      }, v.prototype.permute = function(t, e, r, n, i, o) {
        for (var a = 0; a < o; a++) n[a] = e[t[a]], i[a] = r[t[a]];
      }, v.prototype.transform = function(t, e, r, n, i, o) {
        this.permute(o, t, e, r, n, i);
        for (var a = 1; a < i; a <<= 1) {
          var s = a << 1;
          var u = Math.cos(2 * Math.PI / s);
          var h = Math.sin(2 * Math.PI / s);
          for (var l = 0; l < i; l += s) {
            var c = u;
            var f = h;
            for (var d = 0; d < a; d++) {
              var p = r[l + d];
              var m = n[l + d];
              var v = r[l + d + a];
              var g = n[l + d + a];
              var y = c * v - f * g;
              g = c * g + f * v, v = y, r[l + d] = p + v, n[l + d] = m + g, r[l + d + a] = p - v, n[l + d + a] = m - g, d !== s && (y = u * c - h * f, 
              f = u * f + h * c, c = y);
            }
          }
        }
      }, v.prototype.guessLen13b = function(t, e) {
        var r = 1 | Math.max(e, t);
        var n = 1 & r;
        var i = 0;
        for (r = r / 2 | 0; r; r >>>= 1) i++;
        return 1 << i + 1 + n;
      }, v.prototype.conjugate = function(t, e, r) {
        if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
          var i = t[n];
          t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
        }
      }, v.prototype.normalize13b = function(t, e) {
        var r = 0;
        for (var n = 0; n < e / 2; n++) {
          var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
          t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
        }
        return t;
      }, v.prototype.convert13b = function(t, e, r, i) {
        var o = 0;
        for (var a = 0; a < e; a++) o += 0 | t[a], r[2 * a] = 8191 & o, o >>>= 13, r[2 * a + 1] = 8191 & o, o >>>= 13;
        for (a = 2 * e; a < i; ++a) r[a] = 0;
        n(0 === o), n(0 == (-8192 & o));
      }, v.prototype.stub = function(t) {
        var e = new Array(t);
        for (var r = 0; r < t; r++) e[r] = 0;
        return e;
      }, v.prototype.mulp = function(t, e, r) {
        var n = 2 * this.guessLen13b(t.length, e.length);
        var i = this.makeRBT(n);
        var o = this.stub(n);
        var a = new Array(n);
        var s = new Array(n);
        var u = new Array(n);
        var h = new Array(n);
        var l = new Array(n);
        var c = new Array(n);
        var f = r.words;
        f.length = n, this.convert13b(t.words, t.length, a, n), this.convert13b(e.words, e.length, h, n), this.transform(a, o, s, u, n, i), 
        this.transform(h, o, l, c, n, i);
        for (var d = 0; d < n; d++) {
          var p = s[d] * l[d] - u[d] * c[d];
          u[d] = s[d] * c[d] + u[d] * l[d], s[d] = p;
        }
        return this.conjugate(s, u, n), this.transform(s, u, f, o, n, i), this.conjugate(f, o, n), this.normalize13b(f, n), r.negative = t.negative ^ e.negative, 
        r.length = t.length + e.length, r.strip();
      }, o.prototype.mul = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), this.mulTo(t, e);
      }, o.prototype.mulf = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), m(this, t, e);
      }, o.prototype.imul = function(t) {
        return this.clone().mulTo(t, this);
      }, o.prototype.imuln = function(t) {
        n('number' == typeof t), n(t < 67108864);
        var e = 0;
        for (var r = 0; r < this.length; r++) {
          var i = (0 | this.words[r]) * t;
          var o = (67108863 & i) + (67108863 & e);
          e >>= 26, e += i / 67108864 | 0, e += o >>> 26, this.words[r] = 67108863 & o;
        }
        return 0 !== e && (this.words[r] = e, this.length++), this;
      }, o.prototype.muln = function(t) {
        return this.clone().imuln(t);
      }, o.prototype.sqr = function() {
        return this.mul(this);
      }, o.prototype.isqr = function() {
        return this.imul(this.clone());
      }, o.prototype.pow = function(t) {
        var e = function(t) {
          var e = new Array(t.bitLength());
          for (var r = 0; r < e.length; r++) {
            var n = r / 26 | 0;
            var i = r % 26;
            e[r] = (t.words[n] & 1 << i) >>> i;
          }
          return e;
        }(t);
        if (0 === e.length) return new o(1);
        var r = this;
        for (var n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr()) ;
        if (++n < e.length) for (var i = r.sqr(); n < e.length; n++, i = i.sqr()) 0 !== e[n] && (r = r.mul(i));
        return r;
      }, o.prototype.iushln = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 67108863 >>> 26 - e << 26 - e;
        var o;
        if (0 !== e) {
          var a = 0;
          for (o = 0; o < this.length; o++) {
            var s = this.words[o] & i;
            var u = (0 | this.words[o]) - s << e;
            this.words[o] = u | a, a = s >>> 26 - e;
          }
          a && (this.words[o] = a, this.length++);
        }
        if (0 !== r) {
          for (o = this.length - 1; o >= 0; o--) this.words[o + r] = this.words[o];
          for (o = 0; o < r; o++) this.words[o] = 0;
          this.length += r;
        }
        return this.strip();
      }, o.prototype.ishln = function(t) {
        return n(0 === this.negative), this.iushln(t);
      }, o.prototype.iushrn = function(t, e, r) {
        var i;
        n('number' == typeof t && t >= 0), i = e ? (e - e % 26) / 26 : 0;
        var o = t % 26;
        var a = Math.min((t - o) / 26, this.length);
        var s = 67108863 ^ 67108863 >>> o << o;
        var u = r;
        if (i -= a, i = Math.max(0, i), u) {
          for (var h = 0; h < a; h++) u.words[h] = this.words[h];
          u.length = a;
        }
        if (0 === a) ; else if (this.length > a) for (this.length -= a, h = 0; h < this.length; h++) this.words[h] = this.words[h + a]; else this.words[0] = 0, 
        this.length = 1;
        var l = 0;
        for (h = this.length - 1; h >= 0 && (0 !== l || h >= i); h--) {
          var c = 0 | this.words[h];
          this.words[h] = l << 26 - o | c >>> o, l = c & s;
        }
        return u && 0 !== l && (u.words[u.length++] = l), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
      }, o.prototype.ishrn = function(t, e, r) {
        return n(0 === this.negative), this.iushrn(t, e, r);
      }, o.prototype.shln = function(t) {
        return this.clone().ishln(t);
      }, o.prototype.ushln = function(t) {
        return this.clone().iushln(t);
      }, o.prototype.shrn = function(t) {
        return this.clone().ishrn(t);
      }, o.prototype.ushrn = function(t) {
        return this.clone().iushrn(t);
      }, o.prototype.testn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        return !(this.length <= r) && !!(this.words[r] & i);
      }, o.prototype.imaskn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        if (n(0 === this.negative, 'imaskn works only with positive numbers'), this.length <= r) return this;
        if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
          var i = 67108863 ^ 67108863 >>> e << e;
          this.words[this.length - 1] &= i;
        }
        return this.strip();
      }, o.prototype.maskn = function(t) {
        return this.clone().imaskn(t);
      }, o.prototype.iaddn = function(t) {
        return n('number' == typeof t), n(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < t ? (this.words[0] = t - (0 | this.words[0]), 
        this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, this) : this._iaddn(t);
      }, o.prototype._iaddn = function(t) {
        this.words[0] += t;
        for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) this.words[e] -= 67108864, e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
        return this.length = Math.max(this.length, e + 1), this;
      }, o.prototype.isubn = function(t) {
        if (n('number' == typeof t), n(t < 67108864), t < 0) return this.iaddn(-t);
        if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, this;
        if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var e = 0; e < this.length && this.words[e] < 0; e++) this.words[e] += 67108864, 
        this.words[e + 1] -= 1;
        return this.strip();
      }, o.prototype.addn = function(t) {
        return this.clone().iaddn(t);
      }, o.prototype.subn = function(t) {
        return this.clone().isubn(t);
      }, o.prototype.iabs = function() {
        return this.negative = 0, this;
      }, o.prototype.abs = function() {
        return this.clone().iabs();
      }, o.prototype._ishlnsubmul = function(t, e, r) {
        var i = t.length + r;
        var o;
        var a;
        this._expand(i);
        var s = 0;
        for (o = 0; o < t.length; o++) {
          a = (0 | this.words[o + r]) + s;
          var u = (0 | t.words[o]) * e;
          s = ((a -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[o + r] = 67108863 & a;
        }
        for (;o < this.length - r; o++) s = (a = (0 | this.words[o + r]) + s) >> 26, this.words[o + r] = 67108863 & a;
        if (0 === s) return this.strip();
        for (n(-1 === s), s = 0, o = 0; o < this.length; o++) s = (a = -(0 | this.words[o]) + s) >> 26, this.words[o] = 67108863 & a;
        return this.negative = 1, this.strip();
      }, o.prototype._wordDiv = function(t, e) {
        var r = (this.length, t.length);
        var n = this.clone();
        var i = t;
        var a = 0 | i.words[i.length - 1];
        0 !== (r = 26 - this._countBits(a)) && (i = i.ushln(r), n.iushln(r), a = 0 | i.words[i.length - 1]);
        var s = n.length - i.length;
        var u;
        if ('mod' !== e) {
          (u = new o(null)).length = s + 1, u.words = new Array(u.length);
          for (var h = 0; h < u.length; h++) u.words[h] = 0;
        }
        var l = n.clone()._ishlnsubmul(i, 1, s);
        0 === l.negative && (n = l, u && (u.words[s] = 1));
        for (var c = s - 1; c >= 0; c--) {
          var f = 67108864 * (0 | n.words[i.length + c]) + (0 | n.words[i.length + c - 1]);
          for (f = Math.min(f / a | 0, 67108863), n._ishlnsubmul(i, f, c); 0 !== n.negative; ) f--, n.negative = 0, n._ishlnsubmul(i, 1, c), 
          n.isZero() || (n.negative ^= 1);
          u && (u.words[c] = f);
        }
        return u && u.strip(), n.strip(), 'div' !== e && 0 !== r && n.iushrn(r), {
          div: u || null,
          mod: n
        };
      }, o.prototype.divmod = function(t, e, r) {
        return n(!t.isZero()), this.isZero() ? {
          div: new o(0),
          mod: new o(0)
        } : 0 !== this.negative && 0 === t.negative ? (s = this.neg().divmod(t, e), 'mod' !== e && (i = s.div.neg()), 'div' !== e && (a = s.mod.neg(), 
        r && 0 !== a.negative && a.iadd(t)), {
          div: i,
          mod: a
        }) : 0 === this.negative && 0 !== t.negative ? (s = this.divmod(t.neg(), e), 'mod' !== e && (i = s.div.neg()), {
          div: i,
          mod: s.mod
        }) : 0 != (this.negative & t.negative) ? (s = this.neg().divmod(t.neg(), e), 'div' !== e && (a = s.mod.neg(), r && 0 !== a.negative && a.isub(t)), 
        {
          div: s.div,
          mod: a
        }) : t.length > this.length || this.cmp(t) < 0 ? {
          div: new o(0),
          mod: this
        } : 1 === t.length ? 'div' === e ? {
          div: this.divn(t.words[0]),
          mod: null
        } : 'mod' === e ? {
          div: null,
          mod: new o(this.modn(t.words[0]))
        } : {
          div: this.divn(t.words[0]),
          mod: new o(this.modn(t.words[0]))
        } : this._wordDiv(t, e);
        var i, a, s;
      }, o.prototype.div = function(t) {
        return this.divmod(t, 'div', !1).div;
      }, o.prototype.mod = function(t) {
        return this.divmod(t, 'mod', !1).mod;
      }, o.prototype.umod = function(t) {
        return this.divmod(t, 'mod', !0).mod;
      }, o.prototype.divRound = function(t) {
        var e = this.divmod(t);
        if (e.mod.isZero()) return e.div;
        var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod;
        var n = t.ushrn(1);
        var i = t.andln(1);
        var o = r.cmp(n);
        return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
      }, o.prototype.modn = function(t) {
        n(t <= 67108863);
        var e = (1 << 26) % t;
        var r = 0;
        for (var i = this.length - 1; i >= 0; i--) r = (e * r + (0 | this.words[i])) % t;
        return r;
      }, o.prototype.idivn = function(t) {
        n(t <= 67108863);
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var i = (0 | this.words[r]) + 67108864 * e;
          this.words[r] = i / t | 0, e = i % t;
        }
        return this.strip();
      }, o.prototype.divn = function(t) {
        return this.clone().idivn(t);
      }, o.prototype.egcd = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = new o(0);
        var u = new o(1);
        var h = 0;
        for (;e.isEven() && r.isEven(); ) e.iushrn(1), r.iushrn(1), ++h;
        var l = r.clone();
        var c = e.clone();
        for (;!e.isZero(); ) {
          for (var f = 0, d = 1; 0 == (e.words[0] & d) && f < 26; ++f, d <<= 1) ;
          if (f > 0) for (e.iushrn(f); f-- > 0; ) (i.isOdd() || a.isOdd()) && (i.iadd(l), a.isub(c)), i.iushrn(1), a.iushrn(1);
          for (var p = 0, m = 1; 0 == (r.words[0] & m) && p < 26; ++p, m <<= 1) ;
          if (p > 0) for (r.iushrn(p); p-- > 0; ) (s.isOdd() || u.isOdd()) && (s.iadd(l), u.isub(c)), s.iushrn(1), u.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(s), a.isub(u)) : (r.isub(e), s.isub(i), u.isub(a));
        }
        return {
          a: s,
          b: u,
          gcd: r.iushln(h)
        };
      }, o.prototype._invmp = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = r.clone();
        for (;e.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
          for (var u = 0, h = 1; 0 == (e.words[0] & h) && u < 26; ++u, h <<= 1) ;
          if (u > 0) for (e.iushrn(u); u-- > 0; ) i.isOdd() && i.iadd(s), i.iushrn(1);
          for (var l = 0, c = 1; 0 == (r.words[0] & c) && l < 26; ++l, c <<= 1) ;
          if (l > 0) for (r.iushrn(l); l-- > 0; ) a.isOdd() && a.iadd(s), a.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(a)) : (r.isub(e), a.isub(i));
        }
        var f;
        return (f = 0 === e.cmpn(1) ? i : a).cmpn(0) < 0 && f.iadd(t), f;
      }, o.prototype.gcd = function(t) {
        if (this.isZero()) return t.abs();
        if (t.isZero()) return this.abs();
        var e = this.clone();
        var r = t.clone();
        e.negative = 0, r.negative = 0;
        for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
        for (;;) {
          for (;e.isEven(); ) e.iushrn(1);
          for (;r.isEven(); ) r.iushrn(1);
          var i = e.cmp(r);
          if (i < 0) {
            var o = e;
            e = r, r = o;
          } else if (0 === i || 0 === r.cmpn(1)) break;
          e.isub(r);
        }
        return r.iushln(n);
      }, o.prototype.invm = function(t) {
        return this.egcd(t).a.umod(t);
      }, o.prototype.isEven = function() {
        return 0 == (1 & this.words[0]);
      }, o.prototype.isOdd = function() {
        return 1 == (1 & this.words[0]);
      }, o.prototype.andln = function(t) {
        return this.words[0] & t;
      }, o.prototype.bincn = function(t) {
        n('number' == typeof t);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
        var o = i;
        for (var a = r; 0 !== o && a < this.length; a++) {
          var s = 0 | this.words[a];
          o = (s += o) >>> 26, s &= 67108863, this.words[a] = s;
        }
        return 0 !== o && (this.words[a] = o, this.length++), this;
      }, o.prototype.isZero = function() {
        return 1 === this.length && 0 === this.words[0];
      }, o.prototype.cmpn = function(t) {
        var e = t < 0;
        if (0 !== this.negative && !e) return -1;
        if (0 === this.negative && e) return 1;
        var r;
        if (this.strip(), this.length > 1) r = 1; else {
          e && (t = -t), n(t <= 67108863, 'Number is too big');
          var i = 0 | this.words[0];
          r = i === t ? 0 : i < t ? -1 : 1;
        }
        return 0 !== this.negative ? 0 | -r : r;
      }, o.prototype.cmp = function(t) {
        if (0 !== this.negative && 0 === t.negative) return -1;
        if (0 === this.negative && 0 !== t.negative) return 1;
        var e = this.ucmp(t);
        return 0 !== this.negative ? 0 | -e : e;
      }, o.prototype.ucmp = function(t) {
        if (this.length > t.length) return 1;
        if (this.length < t.length) return -1;
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var n = 0 | this.words[r];
          var i = 0 | t.words[r];
          if (n !== i) {
            n < i ? e = -1 : n > i && (e = 1);
            break;
          }
        }
        return e;
      }, o.prototype.gtn = function(t) {
        return 1 === this.cmpn(t);
      }, o.prototype.gt = function(t) {
        return 1 === this.cmp(t);
      }, o.prototype.gten = function(t) {
        return this.cmpn(t) >= 0;
      }, o.prototype.gte = function(t) {
        return this.cmp(t) >= 0;
      }, o.prototype.ltn = function(t) {
        return -1 === this.cmpn(t);
      }, o.prototype.lt = function(t) {
        return -1 === this.cmp(t);
      }, o.prototype.lten = function(t) {
        return this.cmpn(t) <= 0;
      }, o.prototype.lte = function(t) {
        return this.cmp(t) <= 0;
      }, o.prototype.eqn = function(t) {
        return 0 === this.cmpn(t);
      }, o.prototype.eq = function(t) {
        return 0 === this.cmp(t);
      }, o.red = function(t) {
        return new k(t);
      }, o.prototype.toRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), n(0 === this.negative, 'red works only with positives'), t.convertTo(this)._forceRed(t);
      }, o.prototype.fromRed = function() {
        return n(this.red, 'fromRed works only with numbers in reduction context'), this.red.convertFrom(this);
      }, o.prototype._forceRed = function(t) {
        return this.red = t, this;
      }, o.prototype.forceRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), this._forceRed(t);
      }, o.prototype.redAdd = function(t) {
        return n(this.red, 'redAdd works only with red numbers'), this.red.add(this, t);
      }, o.prototype.redIAdd = function(t) {
        return n(this.red, 'redIAdd works only with red numbers'), this.red.iadd(this, t);
      }, o.prototype.redSub = function(t) {
        return n(this.red, 'redSub works only with red numbers'), this.red.sub(this, t);
      }, o.prototype.redISub = function(t) {
        return n(this.red, 'redISub works only with red numbers'), this.red.isub(this, t);
      }, o.prototype.redShl = function(t) {
        return n(this.red, 'redShl works only with red numbers'), this.red.shl(this, t);
      }, o.prototype.redMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.mul(this, t);
      }, o.prototype.redIMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.imul(this, t);
      }, o.prototype.redSqr = function() {
        return n(this.red, 'redSqr works only with red numbers'), this.red._verify1(this), this.red.sqr(this);
      }, o.prototype.redISqr = function() {
        return n(this.red, 'redISqr works only with red numbers'), this.red._verify1(this), this.red.isqr(this);
      }, o.prototype.redSqrt = function() {
        return n(this.red, 'redSqrt works only with red numbers'), this.red._verify1(this), this.red.sqrt(this);
      }, o.prototype.redInvm = function() {
        return n(this.red, 'redInvm works only with red numbers'), this.red._verify1(this), this.red.invm(this);
      }, o.prototype.redNeg = function() {
        return n(this.red, 'redNeg works only with red numbers'), this.red._verify1(this), this.red.neg(this);
      }, o.prototype.redPow = function(t) {
        return n(this.red && !t.red, 'redPow(normalNum)'), this.red._verify1(this), this.red.pow(this, t);
      };
      var g = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function y(t, e) {
        this.name = t, this.p = new o(e, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      function w() {
        y.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      function _() {
        y.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      function M() {
        y.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      function b() {
        y.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      function k(t) {
        if ('string' == typeof t) {
          var e = o._prime(t);
          this.m = e.p, this.prime = e;
        } else n(t.gtn(1), 'modulus must be greater than 1'), this.m = t, this.prime = null;
      }
      function x(t) {
        k.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), 
        this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
        this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      y.prototype._tmp = function() {
        var t = new o(null);
        return t.words = new Array(Math.ceil(this.n / 13)), t;
      }, y.prototype.ireduce = function(t) {
        var e = t;
        var r;
        do {
          this.split(e, this.tmp), r = (e = (e = this.imulK(e)).iadd(this.tmp)).bitLength();
        } while (r > this.n);
        var n = r < this.n ? -1 : e.ucmp(this.p);
        return 0 === n ? (e.words[0] = 0, e.length = 1) : n > 0 ? e.isub(this.p) : void 0 !== e.strip ? e.strip() : e._strip(), 
        e;
      }, y.prototype.split = function(t, e) {
        t.iushrn(this.n, 0, e);
      }, y.prototype.imulK = function(t) {
        return t.imul(this.k);
      }, i(w, y), w.prototype.split = function(t, e) {
        var r = 4194303;
        var n = Math.min(t.length, 9);
        for (var i = 0; i < n; i++) e.words[i] = t.words[i];
        if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
        var o = t.words[9];
        for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
          var a = 0 | t.words[i];
          t.words[i - 10] = (a & r) << 4 | o >>> 22, o = a;
        }
        o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
      }, w.prototype.imulK = function(t) {
        t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 0 | t.words[r];
          e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
        }
        return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), t;
      }, i(_, y), i(M, y), i(b, y), b.prototype.imulK = function(t) {
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 19 * (0 | t.words[r]) + e;
          var i = 67108863 & n;
          n >>>= 26, t.words[r] = i, e = n;
        }
        return 0 !== e && (t.words[t.length++] = e), t;
      }, o._prime = function(t) {
        if (g[t]) return g[t];
        var e;
        if ('k256' === t) e = new w; else if ('p224' === t) e = new _; else if ('p192' === t) e = new M; else {
          if ('p25519' !== t) throw new Error('Unknown prime ' + t);
          e = new b;
        }
        return g[t] = e, e;
      }, k.prototype._verify1 = function(t) {
        n(0 === t.negative, 'red works only with positives'), n(t.red, 'red works only with red numbers');
      }, k.prototype._verify2 = function(t, e) {
        n(0 == (t.negative | e.negative), 'red works only with positives'), n(t.red && t.red === e.red, 'red works only with red numbers');
      }, k.prototype.imod = function(t) {
        return this.prime ? this.prime.ireduce(t)._forceRed(this) : t.umod(this.m)._forceRed(this);
      }, k.prototype.neg = function(t) {
        return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
      }, k.prototype.add = function(t, e) {
        this._verify2(t, e);
        var r = t.add(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
      }, k.prototype.iadd = function(t, e) {
        this._verify2(t, e);
        var r = t.iadd(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r;
      }, k.prototype.sub = function(t, e) {
        this._verify2(t, e);
        var r = t.sub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
      }, k.prototype.isub = function(t, e) {
        this._verify2(t, e);
        var r = t.isub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r;
      }, k.prototype.shl = function(t, e) {
        return this._verify1(t), this.imod(t.ushln(e));
      }, k.prototype.imul = function(t, e) {
        return this._verify2(t, e), this.imod(t.imul(e));
      }, k.prototype.mul = function(t, e) {
        return this._verify2(t, e), this.imod(t.mul(e));
      }, k.prototype.isqr = function(t) {
        return this.imul(t, t.clone());
      }, k.prototype.sqr = function(t) {
        return this.mul(t, t);
      }, k.prototype.sqrt = function(t) {
        if (t.isZero()) return t.clone();
        var e = this.m.andln(3);
        if (n(e % 2 == 1), 3 === e) {
          var r = this.m.add(new o(1)).iushrn(2);
          return this.pow(t, r);
        }
        var i = this.m.subn(1);
        var a = 0;
        for (;!i.isZero() && 0 === i.andln(1); ) a++, i.iushrn(1);
        n(!i.isZero());
        var s = new o(1).toRed(this);
        var u = s.redNeg();
        var h = this.m.subn(1).iushrn(1);
        var l = this.m.bitLength();
        for (l = new o(2 * l * l).toRed(this); 0 !== this.pow(l, h).cmp(u); ) l.redIAdd(u);
        var c = this.pow(l, i);
        var f = this.pow(t, i.addn(1).iushrn(1));
        var d = this.pow(t, i);
        var p = a;
        for (;0 !== d.cmp(s); ) {
          var m = d;
          for (var v = 0; 0 !== m.cmp(s); v++) m = m.redSqr();
          n(v < p);
          var g = this.pow(c, new o(1).iushln(p - v - 1));
          f = f.redMul(g), c = g.redSqr(), d = d.redMul(c), p = v;
        }
        return f;
      }, k.prototype.invm = function(t) {
        var e = t._invmp(this.m);
        return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
      }, k.prototype.pow = function(t, e) {
        if (e.isZero()) return new o(1).toRed(this);
        if (0 === e.cmpn(1)) return t.clone();
        var r = new Array(16);
        r[0] = new o(1).toRed(this), r[1] = t;
        for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
        var i = r[0];
        var a = 0;
        var s = 0;
        var u = e.bitLength() % 26;
        for (0 === u && (u = 26), n = e.length - 1; n >= 0; n--) {
          var h = e.words[n];
          for (var l = u - 1; l >= 0; l--) {
            var c = h >> l & 1;
            i !== r[0] && (i = this.sqr(i)), 0 !== c || 0 !== a ? (a <<= 1, a |= c, (4 === ++s || 0 === n && 0 === l) && (i = this.mul(i, r[a]), 
            s = 0, a = 0)) : s = 0;
          }
          u = 26;
        }
        return i;
      }, k.prototype.convertTo = function(t) {
        var e = t.umod(this.m);
        return e === t ? e.clone() : e;
      }, k.prototype.convertFrom = function(t) {
        var e = t.clone();
        return e.red = null, e;
      }, o.mont = function(t) {
        return new x(t);
      }, i(x, k), x.prototype.convertTo = function(t) {
        return this.imod(t.ushln(this.shift));
      }, x.prototype.convertFrom = function(t) {
        var e = this.imod(t.mul(this.rinv));
        return e.red = null, e;
      }, x.prototype.imul = function(t, e) {
        if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
        var r = t.imul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var o = i;
        return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
      }, x.prototype.mul = function(t, e) {
        if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
        var r = t.mul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var a = i;
        return i.cmp(this.m) >= 0 ? a = i.isub(this.m) : i.cmpn(0) < 0 && (a = i.iadd(this.m)), a._forceRed(this);
      }, x.prototype.invm = function(t) {
        return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
      };
    }(t = r.nmd(t), this);
  },
  86918: (t, e, r) => {
    "use strict";
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
      return typeof t;
    } : function(t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    };
    var i = r(82192), o = i.keccak224, a = i.keccak384, s = i.keccak256, u = i.keccak512;
    var h = r(76666);
    var l = r(69282);
    var c = r(51675);
    var f = r(26949);
    var d = r(23482);
    var p = r(89509).Buffer;
    Object.assign(e, r(80884)), e.MAX_INTEGER = new f('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16), 
    e.TWO_POW256 = new f('10000000000000000000000000000000000000000000000000000000000000000', 16), e.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 
    e.SHA3_NULL_S = e.KECCAK256_NULL_S, e.KECCAK256_NULL = p.from(e.KECCAK256_NULL_S, 'hex'), e.SHA3_NULL = e.KECCAK256_NULL, 
    e.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', e.SHA3_RLP_ARRAY_S = e.KECCAK256_RLP_ARRAY_S, 
    e.KECCAK256_RLP_ARRAY = p.from(e.KECCAK256_RLP_ARRAY_S, 'hex'), e.SHA3_RLP_ARRAY = e.KECCAK256_RLP_ARRAY, e.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', 
    e.SHA3_RLP_S = e.KECCAK256_RLP_S, e.KECCAK256_RLP = p.from(e.KECCAK256_RLP_S, 'hex'), e.SHA3_RLP = e.KECCAK256_RLP, e.BN = f, 
    e.rlp = c, e.secp256k1 = h, e.zeros = function(t) {
      return p.allocUnsafe(t).fill(0);
    }, e.zeroAddress = function() {
      var t = e.zeros(20);
      return e.bufferToHex(t);
    }, e.setLengthLeft = e.setLength = function(t, r, n) {
      var i = e.zeros(r);
      return t = e.toBuffer(t), n ? t.length < r ? (t.copy(i), i) : t.slice(0, r) : t.length < r ? (t.copy(i, r - t.length), i) : t.slice(-r);
    }, e.setLengthRight = function(t, r) {
      return e.setLength(t, r, !0);
    }, e.unpad = e.stripZeros = function(t) {
      var r = (t = e.stripHexPrefix(t))[0];
      for (;t.length > 0 && '0' === r.toString(); ) r = (t = t.slice(1))[0];
      return t;
    }, e.toBuffer = function(t) {
      if (!p.isBuffer(t)) if (Array.isArray(t)) t = p.from(t); else if ('string' == typeof t) t = e.isHexString(t) ? p.from(e.padToEven(e.stripHexPrefix(t)), 'hex') : p.from(t); else if ('number' == typeof t) t = e.intToBuffer(t); else if (null == t) t = p.allocUnsafe(0); else if (f.isBN(t)) t = t.toArrayLike(p); else {
        if (!t.toArray) throw new Error('invalid type');
        t = p.from(t.toArray());
      }
      return t;
    }, e.bufferToInt = function(t) {
      return new f(e.toBuffer(t)).toNumber();
    }, e.bufferToHex = function(t) {
      return '0x' + (t = e.toBuffer(t)).toString('hex');
    }, e.fromSigned = function(t) {
      return new f(t).fromTwos(256);
    }, e.toUnsigned = function(t) {
      return p.from(t.toTwos(256).toArray());
    }, e.keccak = function(t, r) {
      switch (t = e.toBuffer(t), r || (r = 256), r) {
       case 224:
        return o(t);

       case 256:
        return s(t);

       case 384:
        return a(t);

       case 512:
        return u(t);

       default:
        throw new Error('Invald algorithm: keccak' + r);
      }
    }, e.keccak256 = function(t) {
      return e.keccak(t);
    }, e.sha3 = e.keccak, e.sha256 = function(t) {
      return t = e.toBuffer(t), d('sha256').update(t).digest();
    }, e.ripemd160 = function(t, r) {
      t = e.toBuffer(t);
      var n = d('rmd160').update(t).digest();
      return !0 === r ? e.setLength(n, 32) : n;
    }, e.rlphash = function(t) {
      return e.keccak(c.encode(t));
    }, e.isValidPrivate = function(t) {
      return h.privateKeyVerify(t);
    }, e.isValidPublic = function(t, e) {
      return 64 === t.length ? h.publicKeyVerify(p.concat([ p.from([ 4 ]), t ])) : !!e && h.publicKeyVerify(t);
    }, e.pubToAddress = e.publicToAddress = function(t, r) {
      return t = e.toBuffer(t), r && 64 !== t.length && (t = h.publicKeyConvert(t, !1).slice(1)), l(64 === t.length), e.keccak(t).slice(-20);
    };
    var m = e.privateToPublic = function(t) {
      return t = e.toBuffer(t), h.publicKeyCreate(t, !1).slice(1);
    };
    e.importPublic = function(t) {
      return 64 !== (t = e.toBuffer(t)).length && (t = h.publicKeyConvert(t, !1).slice(1)), t;
    }, e.ecsign = function(t, e) {
      var r = h.sign(t, e);
      var n = {};
      return n.r = r.signature.slice(0, 32), n.s = r.signature.slice(32, 64), n.v = r.recovery + 27, n;
    }, e.hashPersonalMessage = function(t) {
      var r = e.toBuffer('Ethereum Signed Message:\n' + t.length.toString());
      return e.keccak(p.concat([ r, t ]));
    }, e.ecrecover = function(t, r, n, i) {
      var o = p.concat([ e.setLength(n, 32), e.setLength(i, 32) ], 64);
      var a = r - 27;
      if (0 !== a && 1 !== a) throw new Error('Invalid signature v value');
      var s = h.recover(t, o, a);
      return h.publicKeyConvert(s, !1).slice(1);
    }, e.toRpcSig = function(t, r, n) {
      if (27 !== t && 28 !== t) throw new Error('Invalid recovery id');
      return e.bufferToHex(p.concat([ e.setLengthLeft(r, 32), e.setLengthLeft(n, 32), e.toBuffer(t - 27) ]));
    }, e.fromRpcSig = function(t) {
      if (65 !== (t = e.toBuffer(t)).length) throw new Error('Invalid signature length');
      var r = t[64];
      return r < 27 && (r += 27), {
        v: r,
        r: t.slice(0, 32),
        s: t.slice(32, 64)
      };
    }, e.privateToAddress = function(t) {
      return e.publicToAddress(m(t));
    }, e.isValidAddress = function(t) {
      return /^0x[0-9a-fA-F]{40}$/.test(t);
    }, e.isZeroAddress = function(t) {
      return e.zeroAddress() === e.addHexPrefix(t);
    }, e.toChecksumAddress = function(t) {
      t = e.stripHexPrefix(t).toLowerCase();
      var r = e.keccak(t).toString('hex');
      var n = '0x';
      for (var i = 0; i < t.length; i++) parseInt(r[i], 16) >= 8 ? n += t[i].toUpperCase() : n += t[i];
      return n;
    }, e.isValidChecksumAddress = function(t) {
      return e.isValidAddress(t) && e.toChecksumAddress(t) === t;
    }, e.generateAddress = function(t, r) {
      return t = e.toBuffer(t), r = (r = new f(r)).isZero() ? null : p.from(r.toArray()), e.rlphash([ t, r ]).slice(-20);
    }, e.isPrecompiled = function(t) {
      var r = e.unpad(t);
      return 1 === r.length && r[0] >= 1 && r[0] <= 8;
    }, e.addHexPrefix = function(t) {
      return 'string' != typeof t || e.isHexPrefixed(t) ? t : '0x' + t;
    }, e.isValidSignature = function(t, e, r, n) {
      var i = new f('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
      var o = new f('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
      return 32 === e.length && 32 === r.length && ((27 === t || 28 === t) && (e = new f(e), r = new f(r), !(e.isZero() || e.gt(o) || r.isZero() || r.gt(o)) && (!1 !== n || 1 !== new f(r).cmp(i))));
    }, e.baToJSON = function(t) {
      if (p.isBuffer(t)) return '0x' + t.toString('hex');
      if (t instanceof Array) {
        var r = [];
        for (var n = 0; n < t.length; n++) r.push(e.baToJSON(t[n]));
        return r;
      }
    }, e.defineProperties = function(t, r, i) {
      if (t.raw = [], t._fields = [], t.toJSON = function(r) {
        if (r) {
          var n = {};
          return t._fields.forEach((function(e) {
            n[e] = '0x' + t[e].toString('hex');
          })), n;
        }
        return e.baToJSON(this.raw);
      }, t.serialize = function() {
        return c.encode(t.raw);
      }, r.forEach((function(r, n) {
        function i() {
          return t.raw[n];
        }
        function o(i) {
          '00' !== (i = e.toBuffer(i)).toString('hex') || r.allowZero || (i = p.allocUnsafe(0)), r.allowLess && r.length ? (i = e.stripZeros(i), 
          l(r.length >= i.length, 'The field ' + r.name + ' must not have more ' + r.length + ' bytes')) : r.allowZero && 0 === i.length || !r.length || l(r.length === i.length, 'The field ' + r.name + ' must have byte length of ' + r.length), 
          t.raw[n] = i;
        }
        t._fields.push(r.name), Object.defineProperty(t, r.name, {
          enumerable: !0,
          configurable: !0,
          get: i,
          set: o
        }), r.default && (t[r.name] = r.default), r.alias && Object.defineProperty(t, r.alias, {
          enumerable: !1,
          configurable: !0,
          set: o,
          get: i
        });
      })), i) if ('string' == typeof i && (i = p.from(e.stripHexPrefix(i), 'hex')), p.isBuffer(i) && (i = c.decode(i)), Array.isArray(i)) {
        if (i.length > t._fields.length) throw new Error('wrong number of fields in data');
        i.forEach((function(r, n) {
          t[t._fields[n]] = e.toBuffer(r);
        }));
      } else {
        if ('object' !== (void 0 === i ? 'undefined' : n(i))) throw new Error('invalid data');
        var o = Object.keys(i);
        r.forEach((function(e) {
          -1 !== o.indexOf(e.name) && (t[e.name] = i[e.name]), -1 !== o.indexOf(e.alias) && (t[e.alias] = i[e.alias]);
        }));
      }
    };
  },
  76666: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(95053);
    var o = r(64078);
    var a = r(78741);
    var s = function(t) {
      return 32 === t.length && i.privateKeyVerify(Uint8Array.from(t));
    };
    t.exports = {
      privateKeyVerify: s,
      privateKeyExport: function(t, e) {
        if (32 !== t.length) throw new RangeError('private key length is invalid');
        var r = o.privateKeyExport(t, e);
        return a.privateKeyExport(t, r, e);
      },
      privateKeyImport: function(t) {
        if (null !== (t = a.privateKeyImport(t)) && 32 === t.length && s(t)) return t;
        throw new Error("couldn't import from DER format");
      },
      privateKeyNegate: function(t) {
        return n.from(i.privateKeyNegate(Uint8Array.from(t)));
      },
      privateKeyModInverse: function(t) {
        if (32 !== t.length) throw new Error('private key length is invalid');
        return n.from(o.privateKeyModInverse(Uint8Array.from(t)));
      },
      privateKeyTweakAdd: function(t, e) {
        return n.from(i.privateKeyTweakAdd(Uint8Array.from(t), e));
      },
      privateKeyTweakMul: function(t, e) {
        return n.from(i.privateKeyTweakMul(Uint8Array.from(t), Uint8Array.from(e)));
      },
      publicKeyCreate: function(t, e) {
        return n.from(i.publicKeyCreate(Uint8Array.from(t), e));
      },
      publicKeyConvert: function(t, e) {
        return n.from(i.publicKeyConvert(Uint8Array.from(t), e));
      },
      publicKeyVerify: function(t) {
        return (33 === t.length || 65 === t.length) && i.publicKeyVerify(Uint8Array.from(t));
      },
      publicKeyTweakAdd: function(t, e, r) {
        return n.from(i.publicKeyTweakAdd(Uint8Array.from(t), Uint8Array.from(e), r));
      },
      publicKeyTweakMul: function(t, e, r) {
        return n.from(i.publicKeyTweakMul(Uint8Array.from(t), Uint8Array.from(e), r));
      },
      publicKeyCombine: function(t, e) {
        var r = [];
        return t.forEach((function(t) {
          r.push(Uint8Array.from(t));
        })), n.from(i.publicKeyCombine(r, e));
      },
      signatureNormalize: function(t) {
        return n.from(i.signatureNormalize(Uint8Array.from(t)));
      },
      signatureExport: function(t) {
        return n.from(i.signatureExport(Uint8Array.from(t)));
      },
      signatureImport: function(t) {
        return n.from(i.signatureImport(Uint8Array.from(t)));
      },
      signatureImportLax: function(t) {
        if (0 === t.length) throw new RangeError('signature length is invalid');
        var e = a.signatureImportLax(t);
        if (null === e) throw new Error("couldn't parse DER signature");
        return o.signatureImport(e);
      },
      sign: function(t, e, r) {
        if (null === r) throw new TypeError('options should be an Object');
        var o = void 0;
        if (r) {
          if (o = {}, null === r.data) throw new TypeError('options.data should be a Buffer');
          if (r.data) {
            if (32 !== r.data.length) throw new RangeError('options.data length is invalid');
            o.data = new Uint8Array(r.data);
          }
          if (null === r.noncefn) throw new TypeError('options.noncefn should be a Function');
          r.noncefn && (o.noncefn = function(t, e, i, o, a) {
            var s = null != i ? n.from(i) : null;
            var u = null != o ? n.from(o) : null;
            var h = n.from('');
            return r.noncefn && (h = r.noncefn(n.from(t), n.from(e), s, u, a)), Uint8Array.from(h);
          });
        }
        var a = i.ecdsaSign(Uint8Array.from(t), Uint8Array.from(e), o);
        return {
          signature: n.from(a.signature),
          recovery: a.recid
        };
      },
      verify: function(t, e, r) {
        return i.ecdsaVerify(Uint8Array.from(e), Uint8Array.from(t), r);
      },
      recover: function(t, e, r, o) {
        return n.from(i.ecdsaRecover(Uint8Array.from(e), r, Uint8Array.from(t), o));
      },
      ecdh: function(t, e) {
        return n.from(i.ecdh(Uint8Array.from(t), Uint8Array.from(e), {}));
      },
      ecdhUnsafe: function(t, e, r) {
        if (33 !== t.length && 65 !== t.length) throw new RangeError('public key length is invalid');
        if (32 !== e.length) throw new RangeError('private key length is invalid');
        return n.from(o.ecdhUnsafe(Uint8Array.from(t), Uint8Array.from(e), r));
      }
    };
  },
  78741: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = n.from([ 48, 129, 211, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 133, 48, 129, 130, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 33, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 36, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    var o = n.from([ 48, 130, 1, 19, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 165, 48, 129, 162, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 65, 4, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 72, 58, 218, 119, 38, 163, 196, 101, 93, 164, 251, 252, 14, 17, 8, 168, 253, 23, 180, 72, 166, 133, 84, 25, 156, 71, 208, 143, 251, 16, 212, 184, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 68, 3, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    e.privateKeyExport = function(t, e, r) {
      var a = n.from(r ? i : o);
      return t.copy(a, r ? 8 : 9), e.copy(a, r ? 181 : 214), a;
    }, e.privateKeyImport = function(t) {
      var e = t.length;
      var r = 0;
      if (e < r + 1 || 48 !== t[r]) return null;
      if (e < (r += 1) + 1 || !(128 & t[r])) return null;
      var n = 127 & t[r];
      if (n < 1 || n > 2) return null;
      if (e < (r += 1) + n) return null;
      var i = t[r + n - 1] | (n > 1 ? t[r + n - 2] << 8 : 0);
      return e < (r += n) + i || e < r + 3 || 2 !== t[r] || 1 !== t[r + 1] || 1 !== t[r + 2] || e < (r += 3) + 2 || 4 !== t[r] || t[r + 1] > 32 || e < r + 2 + t[r + 1] ? null : t.slice(r + 2, r + 2 + t[r + 1]);
    }, e.signatureImportLax = function(t) {
      var e = n.alloc(32, 0);
      var r = n.alloc(32, 0);
      var i = t.length;
      var o = 0;
      if (48 !== t[o++]) return null;
      var a = t[o++];
      if (128 & a && (o += a - 128) > i) return null;
      if (2 !== t[o++]) return null;
      var s = t[o++];
      if (128 & s) {
        if (o + (a = s - 128) > i) return null;
        for (;a > 0 && 0 === t[o]; o += 1, a -= 1) ;
        for (s = 0; a > 0; o += 1, a -= 1) s = (s << 8) + t[o];
      }
      if (s > i - o) return null;
      var u = o;
      if (o += s, 2 !== t[o++]) return null;
      var h = t[o++];
      if (128 & h) {
        if (o + (a = h - 128) > i) return null;
        for (;a > 0 && 0 === t[o]; o += 1, a -= 1) ;
        for (h = 0; a > 0; o += 1, a -= 1) h = (h << 8) + t[o];
      }
      if (h > i - o) return null;
      var l = o;
      for (o += h; s > 0 && 0 === t[u]; s -= 1, u += 1) ;
      if (s > 32) return null;
      var c = t.slice(u, u + s);
      for (c.copy(e, 32 - c.length); h > 0 && 0 === t[l]; h -= 1, l += 1) ;
      if (h > 32) return null;
      var f = t.slice(l, l + h);
      return f.copy(r, 32 - f.length), {
        r: e,
        s: r
      };
    };
  },
  64078: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(26949);
    var o = new (0, r(86266).ec)('secp256k1');
    var a = o.curve;
    e.privateKeyExport = function(t, e) {
      var r = new i(t);
      if (r.ucmp(a.n) >= 0) throw new Error('couldn\'t export to DER format');
      var n = o.g.mul(r);
      return s(n.getX(), n.getY(), e);
    }, e.privateKeyModInverse = function(t) {
      var e = new i(t);
      if (e.ucmp(a.n) >= 0 || e.isZero()) throw new Error('private key range is invalid');
      return e.invm(a.n).toArrayLike(n, 'be', 32);
    }, e.signatureImport = function(t) {
      var e = new i(t.r);
      e.ucmp(a.n) >= 0 && (e = new i(0));
      var r = new i(t.s);
      return r.ucmp(a.n) >= 0 && (r = new i(0)), n.concat([ e.toArrayLike(n, 'be', 32), r.toArrayLike(n, 'be', 32) ]);
    }, e.ecdhUnsafe = function(t, e, r) {
      var n = o.keyFromPublic(t);
      var u = new i(e);
      if (u.ucmp(a.n) >= 0 || u.isZero()) throw new Error('scalar was invalid (zero or overflow)');
      var h = n.pub.mul(u);
      return s(h.getX(), h.getY(), r);
    };
    var s = function(t, e, r) {
      var i = void 0;
      return r ? ((i = n.alloc(33))[0] = e.isOdd() ? 3 : 2, t.toArrayLike(n, 'be', 32).copy(i, 1)) : ((i = n.alloc(65))[0] = 4, 
      t.toArrayLike(n, 'be', 32).copy(i, 1), e.toArrayLike(n, 'be', 32).copy(i, 33)), i;
    };
  },
  41955: (t, e, r) => {
    const n = r(6403);
    const i = r(37870);
    t.exports = class extends n {
      constructor(t) {
        super((({blockTracker: e}) => i(Object.assign({
          blockTracker: e
        }, t))));
      }
    };
  },
  28260: (t, e, r) => {
    const n = r(6403);
    const i = r(98406);
    t.exports = class extends n {
      constructor() {
        super((({blockTracker: t, provider: e, engine: r}) => i({
          blockTracker: t,
          provider: e
        })));
      }
    };
  },
  2110: (t, e, r) => {
    const n = r(89539).inherits;
    const i = r(30398);
    function o(t) {
      t = t || {}, this.staticResponses = t;
    }
    t.exports = o, n(o, i), o.prototype.handleRequest = function(t, e, r) {
      var n = this.staticResponses[t.method];
      'function' == typeof n ? n(t, e, r) : void 0 !== n ? setTimeout((() => r(null, n))) : e();
    };
  },
  78747: (t, e, r) => {
    var n = r(25108);
    const i = r(7879);
    const o = r(80047);
    const a = r(89539).inherits;
    const s = r(86918);
    const u = r(2843);
    const h = r(47529);
    const l = r(80045);
    const c = r(30398);
    const f = r(28372);
    const d = /^[0-9A-Fa-f]+$/g;
    function p(t) {
      const e = this;
      e.nonceLock = l(1), t.getAccounts && (e.getAccounts = t.getAccounts), t.processTransaction && (e.processTransaction = t.processTransaction), 
      t.processMessage && (e.processMessage = t.processMessage), t.processPersonalMessage && (e.processPersonalMessage = t.processPersonalMessage), 
      t.processTypedMessage && (e.processTypedMessage = t.processTypedMessage), e.approveTransaction = t.approveTransaction || e.autoApprove, 
      e.approveMessage = t.approveMessage || e.autoApprove, e.approvePersonalMessage = t.approvePersonalMessage || e.autoApprove, 
      e.approveDecryptMessage = t.approveDecryptMessage || e.autoApprove, e.approveEncryptionPublicKey = t.approveEncryptionPublicKey || e.autoApprove, 
      e.approveTypedMessage = t.approveTypedMessage || e.autoApprove, t.signTransaction && (e.signTransaction = t.signTransaction || w('signTransaction')), 
      t.signMessage && (e.signMessage = t.signMessage || w('signMessage')), t.signPersonalMessage && (e.signPersonalMessage = t.signPersonalMessage || w('signPersonalMessage')), 
      t.decryptMessage && (e.decryptMessage = t.decryptMessage || w('decryptMessage')), t.encryptionPublicKey && (e.encryptionPublicKey = t.encryptionPublicKey || w('encryptionPublicKey')), 
      t.signTypedMessage && (e.signTypedMessage = t.signTypedMessage || w('signTypedMessage')), t.recoverPersonalSignature && (e.recoverPersonalSignature = t.recoverPersonalSignature), 
      t.publishTransaction && (e.publishTransaction = t.publishTransaction), e.estimateGas = t.estimateGas || e.estimateGas, e.getGasPrice = t.getGasPrice || e.getGasPrice;
    }
    function m(t) {
      return t.toLowerCase();
    }
    function v(t) {
      const e = s.addHexPrefix(t);
      return s.isValidAddress(e);
    }
    function g(t) {
      const e = s.addHexPrefix(t);
      return !s.isValidAddress(e) && y(t);
    }
    function y(t) {
      if (!('string' == typeof t)) return !1;
      if (!('0x' === t.slice(0, 2))) return !1;
      return t.slice(2).match(d);
    }
    function w(t) {
      return function(e, r) {
        r(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + t + '" fn in constructor options'));
      };
    }
    t.exports = p, a(p, c), p.prototype.handleRequest = function(t, e, r) {
      const o = this;
      let a, s, u;
      let l, c;
      switch (o._parityRequests = {}, o._parityRequestCount = 0, t.method) {
       case 'eth_coinbase':
        return void o.getAccounts((function(t, e) {
          if (t) return r(t);
          let n = e[0] || null;
          r(null, n);
        }));

       case 'eth_accounts':
        return void o.getAccounts((function(t, e) {
          if (t) return r(t);
          r(null, e);
        }));

       case 'eth_sendTransaction':
        return a = t.params[0], void i([ t => o.validateTransaction(a, t), t => o.processTransaction(a, t) ], r);

       case 'eth_signTransaction':
        return a = t.params[0], void i([ t => o.validateTransaction(a, t), t => o.processSignTransaction(a, t) ], r);

       case 'eth_sign':
        return c = t.params[0], l = t.params[1], u = t.params[2] || {}, s = h(u, {
          from: c,
          data: l
        }), void i([ t => o.validateMessage(s, t), t => o.processMessage(s, t) ], r);

       case 'personal_sign':
        return function() {
          const e = t.params[0];
          if (g(t.params[1]) && v(e)) {
            let e = "The eth_personalSign method requires params ordered ";
            e += "[message, address]. This was previously handled incorrectly, ", e += "and has been corrected automatically. ", e += "Please switch this param order for smooth behavior in the future.", 
            n.warn(e), c = t.params[0], l = t.params[1];
          } else l = t.params[0], c = t.params[1];
          u = t.params[2] || {}, s = h(u, {
            from: c,
            data: l
          }), i([ t => o.validatePersonalMessage(s, t), t => o.processPersonalMessage(s, t) ], r);
        }();

       case 'eth_decryptMessage':
        return function() {
          const e = t.params[0];
          if (g(t.params[1]) && v(e)) {
            let e = "The eth_decryptMessage method requires params ordered ";
            e += "[message, address]. This was previously handled incorrectly, ", e += "and has been corrected automatically. ", e += "Please switch this param order for smooth behavior in the future.", 
            n.warn(e), c = t.params[0], l = t.params[1];
          } else l = t.params[0], c = t.params[1];
          u = t.params[2] || {}, s = h(u, {
            from: c,
            data: l
          }), i([ t => o.validateDecryptMessage(s, t), t => o.processDecryptMessage(s, t) ], r);
        }();

       case 'encryption_public_key':
        return function() {
          const e = t.params[0];
          i([ t => o.validateEncryptionPublicKey(e, t), t => o.processEncryptionPublicKey(e, t) ], r);
        }();

       case 'personal_ecRecover':
        return function() {
          l = t.params[0];
          let e = t.params[1];
          u = t.params[2] || {}, s = h(u, {
            sig: e,
            data: l
          }), o.recoverPersonalSignature(s, r);
        }();

       case 'eth_signTypedData':
       case 'eth_signTypedData_v3':
       case 'eth_signTypedData_v4':
        return function() {
          const e = t.params[0];
          const n = t.params[1];
          v(e) ? (c = e, l = n) : (l = e, c = n), u = t.params[2] || {}, s = h(u, {
            from: c,
            data: l
          }), i([ t => o.validateTypedMessage(s, t), t => o.processTypedMessage(s, t) ], r);
        }();

       case 'parity_postTransaction':
        return a = t.params[0], void o.parityPostTransaction(a, r);

       case 'parity_postSign':
        return c = t.params[0], l = t.params[1], void o.parityPostSign(c, l, r);

       case 'parity_checkRequest':
        return function() {
          const e = t.params[0];
          o.parityCheckRequest(e, r);
        }();

       case 'parity_defaultAccount':
        return void o.getAccounts((function(t, e) {
          if (t) return r(t);
          const n = e[0] || null;
          r(null, n);
        }));

       default:
        return void e();
      }
    }, p.prototype.getAccounts = function(t) {
      t(null, []);
    }, p.prototype.processTransaction = function(t, e) {
      const r = this;
      i([ e => r.approveTransaction(t, e), (t, e) => r.checkApproval('transaction', t, e), e => r.finalizeAndSubmitTx(t, e) ], e);
    }, p.prototype.processSignTransaction = function(t, e) {
      const r = this;
      i([ e => r.approveTransaction(t, e), (t, e) => r.checkApproval('transaction', t, e), e => r.finalizeTx(t, e) ], e);
    }, p.prototype.processMessage = function(t, e) {
      const r = this;
      i([ e => r.approveMessage(t, e), (t, e) => r.checkApproval('message', t, e), e => r.signMessage(t, e) ], e);
    }, p.prototype.processPersonalMessage = function(t, e) {
      const r = this;
      i([ e => r.approvePersonalMessage(t, e), (t, e) => r.checkApproval('message', t, e), e => r.signPersonalMessage(t, e) ], e);
    }, p.prototype.processDecryptMessage = function(t, e) {
      const r = this;
      i([ e => r.approveDecryptMessage(t, e), (t, e) => r.checkApproval('decryptMessage', t, e), e => r.decryptMessage(t, e) ], e);
    }, p.prototype.processEncryptionPublicKey = function(t, e) {
      const r = this;
      i([ e => r.approveEncryptionPublicKey(t, e), (t, e) => r.checkApproval('encryptionPublicKey', t, e), e => r.encryptionPublicKey(t, e) ], e);
    }, p.prototype.processTypedMessage = function(t, e) {
      const r = this;
      i([ e => r.approveTypedMessage(t, e), (t, e) => r.checkApproval('message', t, e), e => r.signTypedMessage(t, e) ], e);
    }, p.prototype.autoApprove = function(t, e) {
      e(null, !0);
    }, p.prototype.checkApproval = function(t, e, r) {
      r(e ? null : new Error('User denied ' + t + ' signature.'));
    }, p.prototype.parityPostTransaction = function(t, e) {
      const r = this;
      const n = `0x${r._parityRequestCount.toString(16)}`;
      r._parityRequestCount++, r.emitPayload({
        method: 'eth_sendTransaction',
        params: [ t ]
      }, (function(t, e) {
        if (t) return void (r._parityRequests[n] = {
          error: t
        });
        const i = e.result;
        r._parityRequests[n] = i;
      })), e(null, n);
    }, p.prototype.parityPostSign = function(t, e, r) {
      const n = this;
      const i = `0x${n._parityRequestCount.toString(16)}`;
      n._parityRequestCount++, n.emitPayload({
        method: 'eth_sign',
        params: [ t, e ]
      }, (function(t, e) {
        if (t) return void (n._parityRequests[i] = {
          error: t
        });
        const r = e.result;
        n._parityRequests[i] = r;
      })), r(null, i);
    }, p.prototype.parityCheckRequest = function(t, e) {
      const r = this._parityRequests[t] || null;
      return r ? r.error ? e(r.error) : void e(null, r) : e(null, null);
    }, p.prototype.recoverPersonalSignature = function(t, e) {
      let r;
      try {
        r = u.recoverPersonalSignature(t);
      } catch (n) {
        return e(n);
      }
      e(null, r);
    }, p.prototype.validateTransaction = function(t, e) {
      if (void 0 === t.from) return e(new Error("Undefined address - from address required to sign transaction."));
      this.validateSender(t.from, (function(r, n) {
        return r ? e(r) : n ? void e() : e(new Error(`Unknown address - unable to sign transaction for this address: "${t.from}"`));
      }));
    }, p.prototype.validateMessage = function(t, e) {
      if (void 0 === t.from) return e(new Error("Undefined address - from address required to sign message."));
      this.validateSender(t.from, (function(r, n) {
        return r ? e(r) : n ? void e() : e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`));
      }));
    }, p.prototype.validatePersonalMessage = function(t, e) {
      return void 0 === t.from ? e(new Error("Undefined address - from address required to sign personal message.")) : void 0 === t.data ? e(new Error("Undefined message - message required to sign personal message.")) : y(t.data) ? void this.validateSender(t.from, (function(r, n) {
        return r ? e(r) : n ? void e() : e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`));
      })) : e(new Error("HookedWalletSubprovider - validateMessage - message was not encoded as hex."));
    }, p.prototype.validateDecryptMessage = function(t, e) {
      return void 0 === t.from ? e(new Error("Undefined address - from address required to decrypt message.")) : void 0 === t.data ? e(new Error("Undefined message - message required to decrypt message.")) : y(t.data) ? void this.validateSender(t.from, (function(r, n) {
        return r ? e(r) : n ? void e() : e(new Error(`Unknown address - unable to decrypt message for this address: "${t.from}"`));
      })) : e(new Error("HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex."));
    }, p.prototype.validateEncryptionPublicKey = function(t, e) {
      this.validateSender(t, (function(r, n) {
        return r ? e(r) : n ? void e() : e(new Error(`Unknown address - unable to obtain encryption public key for this address: "${t}"`));
      }));
    }, p.prototype.validateTypedMessage = function(t, e) {
      return void 0 === t.from ? e(new Error("Undefined address - from address required to sign typed data.")) : void 0 === t.data ? e(new Error("Undefined data - message required to sign typed data.")) : void this.validateSender(t.from, (function(r, n) {
        return r ? e(r) : n ? void e() : e(new Error(`Unknown address - unable to sign message for this address: "${t.from}"`));
      }));
    }, p.prototype.validateSender = function(t, e) {
      if (!t) return e(null, !1);
      this.getAccounts((function(r, n) {
        if (r) return e(r);
        const i = -1 !== n.map(m).indexOf(t.toLowerCase());
        e(null, i);
      }));
    }, p.prototype.finalizeAndSubmitTx = function(t, e) {
      const r = this;
      r.nonceLock.take((function() {
        i([ r.fillInTxExtras.bind(r, t), r.signTransaction.bind(r), r.publishTransaction.bind(r) ], (function(t, n) {
          if (r.nonceLock.leave(), t) return e(t);
          e(null, n);
        }));
      }));
    }, p.prototype.finalizeTx = function(t, e) {
      const r = this;
      r.nonceLock.take((function() {
        i([ r.fillInTxExtras.bind(r, t), r.signTransaction.bind(r) ], (function(n, i) {
          if (r.nonceLock.leave(), n) return e(n);
          e(null, {
            raw: i,
            tx: t
          });
        }));
      }));
    }, p.prototype.publishTransaction = function(t, e) {
      this.emitPayload({
        method: 'eth_sendRawTransaction',
        params: [ t ]
      }, (function(t, r) {
        if (t) return e(t);
        e(null, r.result);
      }));
    }, p.prototype.estimateGas = function(t, e) {
      f(this.engine, t, e);
    }, p.prototype.getGasPrice = function(t) {
      this.emitPayload({
        method: 'eth_gasPrice',
        params: []
      }, (function(e, r) {
        if (e) return t(e);
        t(null, r.result);
      }));
    }, p.prototype.fillInTxExtras = function(t, e) {
      const r = this;
      const n = t.from;
      const i = {};
      void 0 === t.gasPrice && (i.gasPrice = r.getGasPrice.bind(r)), void 0 === t.nonce && (i.nonce = r.emitPayload.bind(r, {
        method: 'eth_getTransactionCount',
        params: [ n, 'pending' ]
      })), void 0 === t.gas && (i.gas = r.estimateGas.bind(r, function(t) {
        return {
          from: t.from,
          to: t.to,
          value: t.value,
          data: t.data,
          gas: t.gas,
          gasPrice: t.gasPrice,
          nonce: t.nonce
        };
      }(t))), o(i, (function(r, n) {
        if (r) return e(r);
        const i = {};
        n.gasPrice && (i.gasPrice = n.gasPrice), n.nonce && (i.nonce = n.nonce.result), n.gas && (i.gas = n.gas), e(null, h(t, i));
      }));
    };
  },
  6403: (t, e, r) => {
    const n = r(30398);
    t.exports = class extends n {
      constructor(t) {
        if (super(), !t) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');
        this._constructorFn = t;
      }
      setEngine(t) {
        if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');
        const e = t._blockTracker;
        const r = this._constructorFn({
          engine: t,
          provider: t,
          blockTracker: e
        });
        if (!r) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');
        if ('function' != typeof r) throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');
        this.middleware = r;
      }
      handleRequest(t, e, r) {
        const n = {
          id: t.id
        };
        this.middleware(t, n, (function(t) {
          e(((e, r, i) => {
            e ? (delete n.result, n.error = {
              message: e.message || e
            }) : n.result = r, t ? t(i) : i();
          }));
        }), (function(t) {
          if (t) return r(t);
          r(null, n.result);
        }));
      }
    };
  },
  3621: (t, e, r) => {
    var n = r(48764).Buffer;
    const i = r(89539).inherits;
    const o = r(29847);
    const a = r(86918);
    const s = r(30398);
    const u = r(6496).blockTagForPayload;
    function h(t) {
      this.nonceCache = {};
    }
    t.exports = h, i(h, s), h.prototype.handleRequest = function(t, e, r) {
      const i = this;
      switch (t.method) {
       case 'eth_getTransactionCount':
        var s = u(t);
        var h = t.params[0].toLowerCase();
        var l = i.nonceCache[h];
        return void ('pending' === s ? l ? r(null, l) : e((function(t, e, r) {
          if (t) return r();
          void 0 === i.nonceCache[h] && (i.nonceCache[h] = e), r();
        })) : e());

       case 'eth_sendRawTransaction':
        return void e((function(e, r, s) {
          if (e) return s();
          var u = t.params[0];
          a.stripHexPrefix(u);
          n.from(a.stripHexPrefix(u), 'hex');
          var h = new o(n.from(a.stripHexPrefix(u), 'hex'));
          var l = '0x' + h.getSenderAddress().toString('hex').toLowerCase();
          var c = a.bufferToInt(h.nonce);
          var f = (++c).toString(16);
          f.length % 2 && (f = '0' + f), f = '0x' + f, i.nonceCache[l] = f, s();
        }));

       case 'evm_revert':
        return i.nonceCache = {}, void e();

       default:
        return void e();
      }
    };
  },
  30398: (t, e, r) => {
    const n = r(39728);
    function i() {}
    t.exports = i, i.prototype.setEngine = function(t) {
      const e = this;
      e.engine || (e.engine = t, t.on('block', (function(t) {
        e.currentBlock = t;
      })), t.on('start', (function() {
        e.start();
      })), t.on('stop', (function() {
        e.stop();
      })));
    }, i.prototype.handleRequest = function(t, e, r) {
      throw new Error('Subproviders should override `handleRequest`.');
    }, i.prototype.emitPayload = function(t, e) {
      this.engine.sendAsync(n(t), e);
    }, i.prototype.stop = function() {}, i.prototype.start = function() {};
  },
  78191: (t, e, r) => {
    const n = r(6403);
    const i = r(68961);
    t.exports = class extends n {
      constructor() {
        super((({blockTracker: t, provider: e, engine: r}) => {
          const {events: n, middleware: o} = i({
            blockTracker: t,
            provider: e
          });
          return n.on('notification', (t => r.emit('data', null, t))), o;
        }));
      }
    };
  },
  39728: (t, e, r) => {
    const n = r(88620);
    const i = r(47529);
    t.exports = function(t) {
      return i({
        id: n(),
        jsonrpc: '2.0',
        params: []
      }, t);
    };
  },
  28372: (t, e, r) => {
    const n = r(39728);
    t.exports = function(t, e, r) {
      t.sendAsync(n({
        method: 'eth_estimateGas',
        params: [ e ]
      }), (function(t, e) {
        if (t) return 'no contract code at given address' === t.message ? r(null, '0xcf08') : r(t);
        r(null, e.result);
      }));
    };
  },
  88620: t => {
    t.exports = function() {
      return Math.floor(Number.MAX_SAFE_INTEGER * Math.random());
    };
  },
  6496: (t, e, r) => {
    const n = r(67266);
    function i(t) {
      return 'never' !== s(t);
    }
    function o(t) {
      var e = a(t);
      return e >= t.params.length ? t.params : 'eth_getBlockByNumber' === t.method ? t.params.slice(1) : t.params.slice(0, e);
    }
    function a(t) {
      switch (t.method) {
       case 'eth_getStorageAt':
        return 2;

       case 'eth_getBalance':
       case 'eth_getCode':
       case 'eth_getTransactionCount':
       case 'eth_call':
       case 'eth_estimateGas':
        return 1;

       case 'eth_getBlockByNumber':
        return 0;

       default:
        return;
      }
    }
    function s(t) {
      switch (t.method) {
       case 'web3_clientVersion':
       case 'web3_sha3':
       case 'eth_protocolVersion':
       case 'eth_getBlockTransactionCountByHash':
       case 'eth_getUncleCountByBlockHash':
       case 'eth_getCode':
       case 'eth_getBlockByHash':
       case 'eth_getTransactionByHash':
       case 'eth_getTransactionByBlockHashAndIndex':
       case 'eth_getTransactionReceipt':
       case 'eth_getUncleByBlockHashAndIndex':
       case 'eth_getCompilers':
       case 'eth_compileLLL':
       case 'eth_compileSolidity':
       case 'eth_compileSerpent':
       case 'shh_version':
        return 'perma';

       case 'eth_getBlockByNumber':
       case 'eth_getBlockTransactionCountByNumber':
       case 'eth_getUncleCountByBlockNumber':
       case 'eth_getTransactionByBlockNumberAndIndex':
       case 'eth_getUncleByBlockNumberAndIndex':
        return 'fork';

       case 'eth_gasPrice':
       case 'eth_getBalance':
       case 'eth_getStorageAt':
       case 'eth_getTransactionCount':
       case 'eth_call':
       case 'eth_estimateGas':
       case 'eth_getFilterLogs':
       case 'eth_getLogs':
       case 'eth_blockNumber':
        return 'block';

       case 'net_version':
       case 'net_peerCount':
       case 'net_listening':
       case 'eth_syncing':
       case 'eth_sign':
       case 'eth_coinbase':
       case 'eth_mining':
       case 'eth_hashrate':
       case 'eth_accounts':
       case 'eth_sendTransaction':
       case 'eth_sendRawTransaction':
       case 'eth_newFilter':
       case 'eth_newBlockFilter':
       case 'eth_newPendingTransactionFilter':
       case 'eth_uninstallFilter':
       case 'eth_getFilterChanges':
       case 'eth_getWork':
       case 'eth_submitWork':
       case 'eth_submitHashrate':
       case 'db_putString':
       case 'db_getString':
       case 'db_putHex':
       case 'db_getHex':
       case 'shh_post':
       case 'shh_newIdentity':
       case 'shh_hasIdentity':
       case 'shh_newGroup':
       case 'shh_addToGroup':
       case 'shh_newFilter':
       case 'shh_uninstallFilter':
       case 'shh_getFilterChanges':
       case 'shh_getMessages':
        return 'never';
      }
    }
    t.exports = {
      cacheIdentifierForPayload: function(t, e = {}) {
        if (!i(t)) return null;
        const {includeBlockRef: r} = e;
        const a = r ? t.params : o(t);
        return t.method + ':' + n(a);
      },
      canCache: i,
      blockTagForPayload: function(t) {
        var e = a(t);
        if (e >= t.params.length) return null;
        return t.params[e];
      },
      paramsWithoutBlockTag: o,
      blockTagParamIndex: a,
      cacheTypeForPayload: s
    };
  },
  52698: (t, e, r) => {
    const n = r(17187).EventEmitter;
    const i = r(89539).inherits;
    function o() {
      n.call(this), this.isLocked = !0;
    }
    t.exports = o, i(o, n), o.prototype.go = function() {
      this.isLocked = !1, this.emit('unlock');
    }, o.prototype.stop = function() {
      this.isLocked = !0, this.emit('lock');
    }, o.prototype.await = function(t) {
      const e = this;
      e.isLocked ? e.once('unlock', t) : setTimeout(t);
    };
  },
  57026: t => {
    "use strict";
    t.exports = function() {
      throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object");
    };
  },
  42696: t => {
    "use strict";
    t.exports = JSON.parse('{"genesisGasLimit":{"v":5000,"d":"Gas limit of the Genesis block."},"genesisDifficulty":{"v":17179869184,"d":"Difficulty of the Genesis block."},"genesisNonce":{"v":"0x0000000000000042","d":"the geneis nonce"},"genesisExtraData":{"v":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa","d":"extra data "},"genesisHash":{"v":"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3","d":"genesis hash"},"genesisStateRoot":{"v":"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544","d":"the genesis state root"},"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be."},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations."},"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be."},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations."},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."},"maximumExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis."},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs."},"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed."},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack."},"tierStepGas":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them."},"expGas":{"v":10,"d":"Once per EXP instuction."},"expByteGas":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction."},"sha3Gas":{"v":30,"d":"Once per SHA3 operation."},"sha3WordGas":{"v":6,"d":"Once per word of the SHA3 operation\'s data."},"sloadGas":{"v":50,"d":"Once per SLOAD operation."},"sstoreSetGas":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero."},"sstoreResetGas":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero."},"sstoreRefundGas":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero."},"jumpdestGas":{"v":1,"d":"Refunded gas, once per SSTORE operation if the zeroness changes to zero."},"logGas":{"v":375,"d":"Per LOG* operation."},"logDataGas":{"v":8,"d":"Per byte in a LOG* operation\'s data."},"logTopicGas":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."},"createGas":{"v":32000,"d":"Once per CREATE operation & contract-creation transaction."},"callGas":{"v":40,"d":"Once per CALL operation & message call transaction."},"callStipend":{"v":2300,"d":"Free gas given at beginning of call."},"callValueTransferGas":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero."},"callNewAccountGas":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior."},"suicideRefundGas":{"v":24000,"d":"Refunded following a suicide operation."},"memoryGas":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation."},"createDataGas":{"v":200,"d":""},"txGas":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions."},"txCreation":{"v":32000,"d":"the cost of creating a contract via tx"},"txDataZeroGas":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."},"txDataNonZeroGas":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."},"copyGas":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."},"ecrecoverGas":{"v":3000,"d":""},"sha256Gas":{"v":60,"d":""},"sha256WordGas":{"v":12,"d":""},"ripemd160Gas":{"v":600,"d":""},"ripemd160WordGas":{"v":120,"d":""},"identityGas":{"v":15,"d":""},"identityWordGas":{"v":3,"d":""},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"ommerReward":{"v":"625000000000000000","d":"The amount of wei a miner of an uncle block gets for being inculded in the blockchain"},"niblingReward":{"v":"156250000000000000","d":"the amount a miner gets for inculding a uncle"},"homeSteadForkNumber":{"v":1150000,"d":"the block that the Homestead fork started at"},"homesteadRepriceForkNumber":{"v":2463000,"d":"the block that the Homestead Reprice (EIP150) fork started at"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"freeBlockPeriod":{"v":2}}');
  }
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sR0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxHQUFNLEdBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxJQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sR0FBTSxJQUFNLEdBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxLQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEtBQU0sSUFBTSxHQUFNLElBQU0sR0FFeDBCLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTTtJQUVoTSxJQUFJNnRELElBQXFDOXRELEVBQU9DLEtBQUssRUFFckQsSUFBTSxLQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBRWhELEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FFMUwsS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLEdBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sR0FBTSxHQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sSUFBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sSUFBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sSUFBTSxHQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sSUFBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxHQUFNLElBQU0sR0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sS0FBTSxJQUFNLEdBQU0sSUFBTSxHQUV4Z0Ms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QUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLElBQ0EsSUFDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsSUFDQSxHQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEdBQ0EsR0FDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLElBQ0EsS0FDQSxLQUNBLElBQ0EsSUFDQSxLQUNBLElBQ0EsS0FDQSxHQUNBLElBQ0EsR0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxHQUNBLEdBQ0EsS0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUVBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQTtJQUVKLElBQUk2dEQsSUFBcUM5dEQsRUFBT0MsS0FBSyxFQUVqRCxJQUNBLEtBQ0EsR0FDQSxJQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsSUFFQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBRUEsS0FDQSxLQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsR0FDQSxHQUNBLEdBQ0EsSUFDQSxJQUNBLEdBQ0EsR0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLElBQ0EsR0FDQSxHQUNBLEdBQ0EsSUFDQSxHQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsSUFDQSxJQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxJQUNBLEdBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLElBQ0EsS0FDQSxJQUNBLEtBQ0EsS0FDQSxLQUNBLElBQ0EsR0FDQSxHQUNBLEtBQ0EsS0FDQSxLQUNBLElBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLElBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsS0FDQSxLQUNBLElBQ0EsSUFDQSxHQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsS0FDQSxHQUNBLElBQ0EsR0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxJQUNBLElB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RTFMLEtBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxLQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sR0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEdBQU0sR0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxLQUFNLElBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxHQUFNLElBQU0sR0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sS0FBTSxJQUFNLEdBQU0sSUFBTSxHQUV4MEIsR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNO0lBRWhNLElBQUk2dEQsSUFBcUM5dEQsRUFBT0MsS0FBSyxFQUVyRCxJQUFNLEtBQU0sR0FBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFFaEQsR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUUxTCxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLEdBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sR0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxHQUFNLEdBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxJQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxJQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxJQUFNLEdBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxJQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxLQUFNLEdBQU0sSUFBTSxHQUFNLEtBQU0sS0FBTSxLQUFNLEtB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SSxJQUFJLElBQ1osSUFBSSxJQUFJLElBQUksSUFDWixJQUFJLElBQUksSUFBSSxJQUNaLElBQUksSUFBSSxJQUFJLElBQ1osSUFBSSxJQUFJLElBQUksSUFDWixJQUFJLElBQUksSUFBSSxJQUNaLElBQUksSUFBSSxJQUFJLElBQ1osSUFBSSxJQUFJLElBQUksSUFDWixJQUFJLElBQUksSUFBSSxJQUNaLElBQUksSUFBSSxJQUFJLElBQ1osSUFBSSxJQUFJLElBQUksSUFDWixJQUFJLElBQUksSUFBSSxJQUNaLElBQUksSUFBSSxJQUFJLElBQ1osSUFBSSxJQUFJLElBQUksSUFDWixJQUFJLElBQUksSUFBSSxJQUNaLElBQUksSUFBSSxJQUFJO0lBR2QsSUFBSUMsSUFBcUIsRUFFdkIsR0FBRyxJQUFJLElBQUksSUFDWCxJQUFJLElBQUksSUFBSSxJQUNaLElBQUksSUFBSSxJQUFJLElBQ1osSUFBSSxJQUFJLElBQUksSUFDWixJQUFJLElBQUksSUFBSSxJQUNaLElBQUksSUFBSSxJQUFJLEtBQ1osSUFBSSxJQUFJLEtBQUssS0FDYixJQUFJLElBQUksS0FBSyxLQUNiLElBQUksS0FBSyxLQUFLLEtBQ2QsSUFBSSxLQUFLLEtBQUssS0FDZCxJQUFJLEtBQUssS0FBSyxLQUNkLElBQUksS0FBSyxLQUFLLEtBQ2QsS0FBSyxLQUFLLEtBQUssS0FDZixLQUFLLEtBQUssS0FBSyxLQUNmLEtBQUssS0FBSyxLQUFLLEtBQ2YsS0FBSyxLQUFLLEtBQUssS0FDZixLQUFLLEtBQUssS0FBSyxLQUNmLEtBQUssS0FBSyxLQUFLLEtBQ2YsS0FBSyxLQUFLLEtBQUssS0FDZixLQUFLLEtBQUssS0FBSyxLQUNmLEtBQUssS0FBSyxLQUFLLEtBQ2YsS0FBSyxLQUFLLEtBQUssS0FDZixLQUFLLEtBQUssS0FBSyxLQUNmLEtBQUssS0FBSyxLQUFLLEtBQ2YsS0FBSyxLQUFLLEtBQUssTUFDZixLQUFLLEtBQUssS0FBSyxNQUNmLEtBQUssS0FBSyxNQUFNLE1BQ2hCLEtBQUssS0FBSyxNQUFNLE1BQ2hCLEtBQUssS0FB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S0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sS0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxLQUFNLElBQU0sR0FBTSxJQUFNLEdBRXgwQixHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU07SUFFaE0sSUFBSTZ0RCxJQUFxQzl0RCxFQUFPQyxLQUFLLEVBRXJELElBQU0sS0FBTSxHQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUVoRCxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBRTFMLEtBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxLQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sR0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEdBQU0sR0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxLQUFNLElBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxJQUFNLElBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sS0FBTSxJQUFNLElBQU0sR0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxLQUFNLElBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLEtBQU0sR0FBTSxJQUFNLEdBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sSUFBTSxLQUFNLElBQU0sS0FBTSxLQUFNLElBQU0sS0FBTSxLQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEtBQU0sSUFBTSxHQUFNLElBQU0sR0FFeGdDLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU07SUFFaFl5a0Is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O01BQ1R3ckIsRUFBS3lWLFdBQ1B6VixFQUFLaWhCLEtBQUssVUFBVXpJLEtBRXBCNy9CLFdBQVc2L0I7QUFFZjs7OztJQy9CQTliLEVBQU9ySyxVQUFVO01BQ2YsTUFBTSxJQUFJdGYsTUFDUjtBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vY29uc3RhbnRzLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2VuY29kaW5nL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL2Rpc3QvZXNtL2VuY29kaW5nLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZm9ybWF0LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL2Rpc3QvZXNtL21pc2MuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vdmFsaWRhdG9ycy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9kaXN0L2VzbS9ldGhlcmV1bS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9kaXN0L2VzbS91cmwuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc29ja2V0LXRyYW5zcG9ydC9kaXN0L2VzbS9uZXR3b3JrLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3NvY2tldC10cmFuc3BvcnQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY29yZS9kaXN0L2VzbS9lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY29yZS9kaXN0L2VzbS9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY29yZS9kaXN0L2VzbS9zdG9yYWdlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL2Rpc3QvZXNtL3Nlc3Npb24uanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY29yZS9kaXN0L2VzbS91cmwuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY29yZS9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9kaXN0L2VzbS9wYXlsb2FkLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NyeXB0by9kaXN0L2VzbS9jb25zdGFudHMvZGVmYXVsdC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jcnlwdG8vZGlzdC9lc20vbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY3J5cHRvL2Rpc3QvZXNtL2NvbnN0YW50cy9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY3J5cHRvL2Rpc3QvZXNtL2NvbnN0YW50cy9vcGVyYXRpb25zLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NyeXB0by9kaXN0L2VzbS9icm93c2VyL2Flcy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jcnlwdG8vZGlzdC9lc20vYnJvd3Nlci9obWFjLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2lzby1jcnlwdG8vZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmFuZG9tYnl0ZXMvZGlzdC9lc20vYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jbGllbnQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaHR0cC1jb25uZWN0aW9uL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dlYjMtcHJvdmlkZXIvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHRva2Vuc2NyaXB0L3Rva2VuLW5lZ290aWF0b3IvZGlzdC93YWxsZXQvV2FsbGV0Q29ubmVjdFByb3ZpZGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RldGVjdC1icm93c2VyL2VzL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Jyb3dzZXItdXRpbHMvZGlzdC9lc20vYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9icm93c2VyLXV0aWxzL2Rpc3QvZXNtL2pzb24uanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Jyb3dzZXItdXRpbHMvZGlzdC9lc20vbG9jYWwuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscy9kaXN0L2VzbS9tb2JpbGUuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscy9kaXN0L2VzbS9yZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9jcnlwdG8uanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvZW52LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3FyY29kZS1tb2RhbC9kaXN0L2Nqcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzL2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dpbmRvdy1tZXRhZGF0YS9kaXN0L2Nqcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9hc3luYy1tdXRleC9saWIvTXV0ZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMtbXV0ZXgvbGliL1NlbWFwaG9yZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9hc3luYy1tdXRleC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMtbXV0ZXgvbGliL3dpdGhUaW1lb3V0LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2FzeW5jaWZ5LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2VhY2hMaW1pdC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9hc3luYy9lYWNoT2YuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvZWFjaE9mTGltaXQuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvZWFjaFNlcmllcy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC9icmVha0xvb3AuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvZG9MaW1pdC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC9kb1BhcmFsbGVsLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL2VhY2hPZkxpbWl0LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL2dldEl0ZXJhdG9yLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL2luaXRpYWxQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvbWFwLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL29uY2UuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvb25seU9uY2UuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvcGFyYWxsZWwuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL3NsaWNlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL3dpdGhvdXRJbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC93cmFwQXN5bmMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYXN5bmMvbWFwLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL3BhcmFsbGVsLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2FzeW5jL3dhdGVyZmFsbC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jb3B5LXRvLWNsaXBib2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kZWNvZGUtdXJpLWNvbXBvbmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kaWprc3RyYWpzL2RpamtzdHJhLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL3NyYy9iYXNlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL3NyYy9wb2xsaW5nLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jhc2UtZmlsdGVyLWhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvYmFzZS1maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvYmxvY2stZmlsdGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2dldEJsb2Nrc0ZvclJhbmdlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2hleFV0aWxzLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2xvZy1maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvbm9kZV9tb2R1bGVzL3BpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvc3Vic2NyaXB0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtZmlsdGVycy90eC1maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvYmxvY2stY2FjaGUuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvY2FjaGUtdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvbm9kZV9tb2R1bGVzL2pzb24tcnBjLWVuZ2luZS9zcmMvY3JlYXRlQXN5bmNNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1taWRkbGV3YXJlL25vZGVfbW9kdWxlcy9qc29uLXJwYy1lbmdpbmUvc3JjL2NyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtbWlkZGxld2FyZS9zY2FmZm9sZC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGgtcXVlcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLXNpZy11dGlsL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1zaWctdXRpbC9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1zaWctdXRpbC9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoLXNpZy11dGlsL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC9zZWNwMjU2azEtYWRhcHRlci5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGgtc2lnLXV0aWwvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L3NlY3AyNTZrMS1saWIvZGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aC1zaWctdXRpbC9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2VjcDI1NmsxLWxpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvYWNjb3VudC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvYnl0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvaGFzaC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L29iamVjdC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2VjcDI1NmsxdjMtYWRhcHRlci5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2VjcDI1NmsxdjMtbGliL2Rlci5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2VjcDI1NmsxdjMtbGliL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtYWJpL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy10eC9lczUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy10eC9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdHgvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdHgvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L3NlY3AyNTZrMS1hZGFwdGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdHgvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L3NlY3AyNTZrMS1saWIvZGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdHgvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L3NlY3AyNTZrMS1saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXRoanMtdXRpbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9pcy10eXBlZGFycmF5L2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvanNvbi1ycGMtZW5naW5lL2Rpc3QvSnNvblJwY0VuZ2luZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9qc29uLXJwYy1lbmdpbmUvZGlzdC9jcmVhdGVBc3luY01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvanNvbi1ycGMtZW5naW5lL2Rpc3QvY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2pzb24tcnBjLWVuZ2luZS9kaXN0L2dldFVuaXF1ZUlkLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2pzb24tcnBjLWVuZ2luZS9kaXN0L2lkUmVtYXBNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2pzb24tcnBjLWVuZ2luZS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2pzb24tcnBjLWVuZ2luZS9kaXN0L21lcmdlTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9qc29uLXJwYy1yYW5kb20taWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub29wLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcGlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9wcmVhY3QvZGlzdC9wcmVhY3QubW9kdWxlLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9ob29rcy9kaXN0L2hvb2tzLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9wcmVhY3QvY29tcGF0L2Rpc3QvY29tcGF0Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jYW4tcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxpZ25tZW50LXBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2FscGhhbnVtZXJpYy1kYXRhLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtYnVmZmVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtbWF0cml4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9ieXRlLWRhdGEuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2Vycm9yLWNvcnJlY3Rpb24tY29kZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZXJyb3ItY29ycmVjdGlvbi1sZXZlbC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZmluZGVyLXBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2Zvcm1hdC1pbmZvLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9nYWxvaXMtZmllbGQuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2thbmppLWRhdGEuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL21hc2stcGF0dGVybi5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbW9kZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbnVtZXJpYy1kYXRhLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9wb2x5bm9taWFsLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9xcmNvZGUuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3JlZWQtc29sb21vbi1lbmNvZGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWdleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvc2VnbWVudHMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3V0aWxzLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS92ZXJzaW9uLWNoZWNrLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS92ZXJzaW9uLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvY2FudmFzLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvc3ZnLXRhZy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3V0aWxzLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvdXRpbHMvdHlwZWRhcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXJjb2RlL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcXVlcnktc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3NhZmUtZXZlbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zZW1hcGhvcmUvbGliL3NlbWFwaG9yZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zcGxpdC1vbi1maXJzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zdHJpY3QtdXJpLWVuY29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy90b2dnbGUtc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy90eXBlZGFycmF5LXRvLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2VjcDI1NmsxLWFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L3NlY3AyNTZrMS1saWIvZGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC9zZWNwMjU2azEtbGliL2luZGV4LmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9jYWNoZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvZml4dHVyZS5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvaG9va2VkLXdhbGxldC5qcyIsIndlYnBhY2s6Ly90b2tlbi1vdXRsZXQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvanNvbi1ycGMtZW5naW5lLW1pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL25vbmNlLXRyYWNrZXIuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL3N1YnByb3ZpZGVyLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9zdWJzY3JpcHRpb25zLmpzIiwid2VicGFjazovL3Rva2VuLW91dGxldC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3V0aWwvY3JlYXRlLXBheWxvYWQuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9lc3RpbWF0ZS1nYXMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9yYW5kb20taWQuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9ycGMtY2FjaGUtdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9zdG9wbGlnaHQuanMiLCJ3ZWJwYWNrOi8vdG9rZW4tb3V0bGV0LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd3MvYnJvd3Nlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgcmVzZXJ2ZWRFdmVudHMgPSBbXG4gICAgXCJzZXNzaW9uX3JlcXVlc3RcIixcbiAgICBcInNlc3Npb25fdXBkYXRlXCIsXG4gICAgXCJleGNoYW5nZV9rZXlcIixcbiAgICBcImNvbm5lY3RcIixcbiAgICBcImRpc2Nvbm5lY3RcIixcbiAgICBcImRpc3BsYXlfdXJpXCIsXG4gICAgXCJtb2RhbF9jbG9zZWRcIixcbiAgICBcInRyYW5zcG9ydF9vcGVuXCIsXG4gICAgXCJ0cmFuc3BvcnRfY2xvc2VcIixcbiAgICBcInRyYW5zcG9ydF9lcnJvclwiLFxuXTtcbmV4cG9ydCBjb25zdCBzaWduaW5nTWV0aG9kcyA9IFtcbiAgICBcImV0aF9zZW5kVHJhbnNhY3Rpb25cIixcbiAgICBcImV0aF9zaWduVHJhbnNhY3Rpb25cIixcbiAgICBcImV0aF9zaWduXCIsXG4gICAgXCJldGhfc2lnblR5cGVkRGF0YVwiLFxuICAgIFwiZXRoX3NpZ25UeXBlZERhdGFfdjFcIixcbiAgICBcImV0aF9zaWduVHlwZWREYXRhX3YyXCIsXG4gICAgXCJldGhfc2lnblR5cGVkRGF0YV92M1wiLFxuICAgIFwiZXRoX3NpZ25UeXBlZERhdGFfdjRcIixcbiAgICBcInBlcnNvbmFsX3NpZ25cIixcbiAgICBcIndhbGxldF9hZGRFdGhlcmV1bUNoYWluXCIsXG4gICAgXCJ3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpblwiLFxuICAgIFwid2FsbGV0X2dldFBlcm1pc3Npb25zXCIsXG4gICAgXCJ3YWxsZXRfcmVxdWVzdFBlcm1pc3Npb25zXCIsXG4gICAgXCJ3YWxsZXRfcmVnaXN0ZXJPbmJvYXJkaW5nXCIsXG4gICAgXCJ3YWxsZXRfd2F0Y2hBc3NldFwiLFxuICAgIFwid2FsbGV0X3NjYW5RUkNvZGVcIixcbl07XG5leHBvcnQgY29uc3Qgc3RhdGVNZXRob2RzID0gW1wiZXRoX2FjY291bnRzXCIsIFwiZXRoX2NoYWluSWRcIiwgXCJuZXRfdmVyc2lvblwiXTtcbmV4cG9ydCBjb25zdCBpbmZ1cmFOZXR3b3JrcyA9IHtcbiAgICAxOiBcIm1haW5uZXRcIixcbiAgICAzOiBcInJvcHN0ZW5cIixcbiAgICA0OiBcInJpbmtlYnlcIixcbiAgICA1OiBcImdvZXJsaVwiLFxuICAgIDQyOiBcImtvdmFuXCIsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsImltcG9ydCBfaXNUeXBlZEFycmF5IGZyb20gXCJpcy10eXBlZGFycmF5XCI7XG5pbXBvcnQgdHlwZWRBcnJheVRvQnVmZmVyIGZyb20gXCJ0eXBlZGFycmF5LXRvLWJ1ZmZlclwiO1xuY29uc3QgRU5DX0hFWCA9IFwiaGV4XCI7XG5jb25zdCBFTkNfVVRGOCA9IFwidXRmOFwiO1xuY29uc3QgRU5DX0JJTiA9IFwiYmluYXJ5XCI7XG5jb25zdCBUWVBFX0JVRkZFUiA9IFwiYnVmZmVyXCI7XG5jb25zdCBUWVBFX0FSUkFZID0gXCJhcnJheVwiO1xuY29uc3QgVFlQRV9UWVBFRF9BUlJBWSA9IFwidHlwZWQtYXJyYXlcIjtcbmNvbnN0IFRZUEVfQVJSQVlfQlVGRkVSID0gXCJhcnJheS1idWZmZXJcIjtcbmNvbnN0IFNUUklOR19aRVJPID0gXCIwXCI7XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9BcnJheShidWYpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJUb0hleChidWYsIHByZWZpeGVkID0gZmFsc2UpIHtcbiAgICBjb25zdCBoZXggPSBidWYudG9TdHJpbmcoRU5DX0hFWCk7XG4gICAgcmV0dXJuIHByZWZpeGVkID8gYWRkSGV4UHJlZml4KGhleCkgOiBoZXg7XG59XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9VdGY4KGJ1Zikge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoRU5DX1VURjgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlclRvTnVtYmVyKGJ1Zikge1xuICAgIHJldHVybiBidWYucmVhZFVJbnRCRSgwLCBidWYubGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJUb0JpbmFyeShidWYpIHtcbiAgICByZXR1cm4gYXJyYXlUb0JpbmFyeShidWZmZXJUb0FycmF5KGJ1ZikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9CdWZmZXIoYXJyKSB7XG4gICAgcmV0dXJuIHR5cGVkQXJyYXlUb0J1ZmZlcihhcnIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9IZXgoYXJyLCBwcmVmaXhlZCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGJ1ZmZlclRvSGV4KGFycmF5VG9CdWZmZXIoYXJyKSwgcHJlZml4ZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9VdGY4KGFycikge1xuICAgIHJldHVybiBidWZmZXJUb1V0ZjgoYXJyYXlUb0J1ZmZlcihhcnIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvTnVtYmVyKGFycikge1xuICAgIHJldHVybiBidWZmZXJUb051bWJlcihhcnJheVRvQnVmZmVyKGFycikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9CaW5hcnkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYXJyKVxuICAgICAgICAubWFwKG51bWJlclRvQmluYXJ5KVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb0J1ZmZlcihoZXgpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVtb3ZlSGV4UHJlZml4KGhleCksIEVOQ19IRVgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvQXJyYXkoaGV4KSB7XG4gICAgcmV0dXJuIGJ1ZmZlclRvQXJyYXkoaGV4VG9CdWZmZXIoaGV4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGV4VG9VdGY4KGhleCkge1xuICAgIHJldHVybiBidWZmZXJUb1V0ZjgoaGV4VG9CdWZmZXIoaGV4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGV4VG9OdW1iZXIoaGV4KSB7XG4gICAgcmV0dXJuIGFycmF5VG9OdW1iZXIoaGV4VG9BcnJheShoZXgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb0JpbmFyeShoZXgpIHtcbiAgICByZXR1cm4gYXJyYXlUb0JpbmFyeShoZXhUb0FycmF5KGhleCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhUb0J1ZmZlcih1dGY4KSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHV0ZjgsIEVOQ19VVEY4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1dGY4VG9BcnJheSh1dGY4KSB7XG4gICAgcmV0dXJuIGJ1ZmZlclRvQXJyYXkodXRmOFRvQnVmZmVyKHV0ZjgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1dGY4VG9IZXgodXRmOCwgcHJlZml4ZWQgPSBmYWxzZSkge1xuICAgIHJldHVybiBidWZmZXJUb0hleCh1dGY4VG9CdWZmZXIodXRmOCksIHByZWZpeGVkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1dGY4VG9OdW1iZXIodXRmOCkge1xuICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KHV0ZjgsIDEwKTtcbiAgICBhc3NlcnQoaXNEZWZpbmVkKG51bSksIFwiTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzXCIpO1xuICAgIHJldHVybiBudW07XG59XG5leHBvcnQgZnVuY3Rpb24gdXRmOFRvQmluYXJ5KHV0ZjgpIHtcbiAgICByZXR1cm4gYXJyYXlUb0JpbmFyeSh1dGY4VG9BcnJheSh1dGY4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9CdWZmZXIobnVtKSB7XG4gICAgcmV0dXJuIGJpbmFyeVRvQnVmZmVyKG51bWJlclRvQmluYXJ5KG51bSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlclRvQXJyYXkobnVtKSB7XG4gICAgcmV0dXJuIGJpbmFyeVRvQXJyYXkobnVtYmVyVG9CaW5hcnkobnVtKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9IZXgobnVtLCBwcmVmaXhlZCkge1xuICAgIHJldHVybiBiaW5hcnlUb0hleChudW1iZXJUb0JpbmFyeShudW0pLCBwcmVmaXhlZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9VdGY4KG51bSkge1xuICAgIHJldHVybiBgJHtudW19YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJUb0JpbmFyeShudW0pIHtcbiAgICBjb25zdCBiaW4gPSAobnVtID4+PiAwKS50b1N0cmluZygyKTtcbiAgICByZXR1cm4gc2FuaXRpemVCeXRlcyhiaW4pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJpbmFyeVRvQnVmZmVyKGJpbikge1xuICAgIHJldHVybiBhcnJheVRvQnVmZmVyKGJpbmFyeVRvQXJyYXkoYmluKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5VG9BcnJheShiaW4pIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc3BsaXRCeXRlcyhiaW4pLm1hcCh4ID0+IHBhcnNlSW50KHgsIDIpKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5VG9IZXgoYmluLCBwcmVmaXhlZCkge1xuICAgIHJldHVybiBhcnJheVRvSGV4KGJpbmFyeVRvQXJyYXkoYmluKSwgcHJlZml4ZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJpbmFyeVRvVXRmOChiaW4pIHtcbiAgICByZXR1cm4gYXJyYXlUb1V0ZjgoYmluYXJ5VG9BcnJheShiaW4pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBiaW5hcnlUb051bWJlcihiaW4pIHtcbiAgICByZXR1cm4gYXJyYXlUb051bWJlcihiaW5hcnlUb0FycmF5KGJpbikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQmluYXJ5U3RyaW5nKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiIHx8ICFuZXcgUmVnRXhwKC9eWzAxXSskLykudGVzdChzdHIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHN0ci5sZW5ndGggJSA4ICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNIZXhTdHJpbmcoc3RyLCBsZW5ndGgpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIiB8fCAhc3RyLm1hdGNoKC9eMHhbMC05QS1GYS1mXSokLykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoICYmIHN0ci5sZW5ndGggIT09IDIgKyAyICogbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcih2YWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWwpIHtcbiAgICByZXR1cm4gX2lzVHlwZWRBcnJheS5zdHJpY3QodmFsKSAmJiAhaXNCdWZmZXIodmFsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICAgIHJldHVybiAoIWlzVHlwZWRBcnJheSh2YWwpICYmXG4gICAgICAgICFpc0J1ZmZlcih2YWwpICYmXG4gICAgICAgIHR5cGVvZiB2YWwuYnl0ZUxlbmd0aCAhPT0gXCJ1bmRlZmluZWRcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwZSh2YWwpIHtcbiAgICBpZiAoaXNCdWZmZXIodmFsKSkge1xuICAgICAgICByZXR1cm4gVFlQRV9CVUZGRVI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVHlwZWRBcnJheSh2YWwpKSB7XG4gICAgICAgIHJldHVybiBUWVBFX1RZUEVEX0FSUkFZO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FycmF5QnVmZmVyKHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIFRZUEVfQVJSQVlfQlVGRkVSO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIFRZUEVfQVJSQVk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5jb2Rpbmcoc3RyKSB7XG4gICAgaWYgKGlzQmluYXJ5U3RyaW5nKHN0cikpIHtcbiAgICAgICAgcmV0dXJuIEVOQ19CSU47XG4gICAgfVxuICAgIGlmIChpc0hleFN0cmluZyhzdHIpKSB7XG4gICAgICAgIHJldHVybiBFTkNfSEVYO1xuICAgIH1cbiAgICByZXR1cm4gRU5DX1VURjg7XG59XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QnVmZmVycyguLi5hcmdzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gQnVmZmVyLmNvbmNhdChhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFycmF5cyguLi5hcmdzKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGFyZ3MuZm9yRWFjaChhcmcgPT4gKHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoQXJyYXkuZnJvbShhcmcpKSkpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbLi4ucmVzdWx0XSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdHJpbUxlZnQoZGF0YSwgbGVuZ3RoKSB7XG4gICAgY29uc3QgZGlmZiA9IGRhdGEubGVuZ3RoIC0gbGVuZ3RoO1xuICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgICBkYXRhID0gZGF0YS5zbGljZShkaWZmKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG5leHBvcnQgZnVuY3Rpb24gdHJpbVJpZ2h0KGRhdGEsIGxlbmd0aCkge1xuICAgIHJldHVybiBkYXRhLnNsaWNlKDAsIGxlbmd0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2FsY0J5dGVMZW5ndGgobGVuZ3RoLCBieXRlU2l6ZSA9IDgpIHtcbiAgICBjb25zdCByZW1haW5kZXIgPSBsZW5ndGggJSBieXRlU2l6ZTtcbiAgICByZXR1cm4gcmVtYWluZGVyXG4gICAgICAgID8gKChsZW5ndGggLSByZW1haW5kZXIpIC8gYnl0ZVNpemUpICogYnl0ZVNpemUgKyBieXRlU2l6ZVxuICAgICAgICA6IGxlbmd0aDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdEJ5dGVzKHN0ciwgYnl0ZVNpemUgPSA4KSB7XG4gICAgY29uc3QgYnl0ZXMgPSBzYW5pdGl6ZUJ5dGVzKHN0cikubWF0Y2gobmV3IFJlZ0V4cChgLnske2J5dGVTaXplfX1gLCBcImdpXCIpKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShieXRlcyB8fCBbXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3dhcEJ5dGVzKHN0cikge1xuICAgIHJldHVybiBzcGxpdEJ5dGVzKHN0cilcbiAgICAgICAgLm1hcChyZXZlcnNlU3RyaW5nKVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzd2FwSGV4KHN0cikge1xuICAgIHJldHVybiBiaW5hcnlUb0hleChzd2FwQnl0ZXMoaGV4VG9CaW5hcnkoc3RyKSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplQnl0ZXMoc3RyLCBieXRlU2l6ZSA9IDgsIHBhZGRpbmcgPSBTVFJJTkdfWkVSTykge1xuICAgIHJldHVybiBwYWRMZWZ0KHN0ciwgY2FsY0J5dGVMZW5ndGgoc3RyLmxlbmd0aCwgYnl0ZVNpemUpLCBwYWRkaW5nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWRMZWZ0KHN0ciwgbGVuZ3RoLCBwYWRkaW5nID0gU1RSSU5HX1pFUk8pIHtcbiAgICByZXR1cm4gcGFkU3RyaW5nKHN0ciwgbGVuZ3RoLCB0cnVlLCBwYWRkaW5nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWRSaWdodChzdHIsIGxlbmd0aCwgcGFkZGluZyA9IFNUUklOR19aRVJPKSB7XG4gICAgcmV0dXJuIHBhZFN0cmluZyhzdHIsIGxlbmd0aCwgZmFsc2UsIHBhZGRpbmcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUhleFByZWZpeChoZXgpIHtcbiAgICByZXR1cm4gaGV4LnJlcGxhY2UoL14weC8sIFwiXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZEhleFByZWZpeChoZXgpIHtcbiAgICByZXR1cm4gaGV4LnN0YXJ0c1dpdGgoXCIweFwiKSA/IGhleCA6IGAweCR7aGV4fWA7XG59XG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVIZXgoaGV4KSB7XG4gICAgaGV4ID0gcmVtb3ZlSGV4UHJlZml4KGhleCk7XG4gICAgaGV4ID0gc2FuaXRpemVCeXRlcyhoZXgsIDIpO1xuICAgIGlmIChoZXgpIHtcbiAgICAgICAgaGV4ID0gYWRkSGV4UHJlZml4KGhleCk7XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSGV4TGVhZGluZ1plcm9zKGhleCkge1xuICAgIGNvbnN0IHByZWZpeGVkID0gaGV4LnN0YXJ0c1dpdGgoXCIweFwiKTtcbiAgICBoZXggPSByZW1vdmVIZXhQcmVmaXgoaGV4KTtcbiAgICBoZXggPSBoZXguc3RhcnRzV2l0aChTVFJJTkdfWkVSTykgPyBoZXguc3Vic3RyaW5nKDEpIDogaGV4O1xuICAgIHJldHVybiBwcmVmaXhlZCA/IGFkZEhleFByZWZpeChoZXgpIDogaGV4O1xufVxuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuICFpc1VuZGVmaW5lZCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBhc3NlcnQoYXNzZXJ0aW9uLCBlcnJvck1lc3NhZ2UpIHtcbiAgICBpZiAoIWFzc2VydGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXZlcnNlU3RyaW5nKHN0cikge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnNwbGl0KFwiXCIpXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBwYWRTdHJpbmcoc3RyLCBsZW5ndGgsIGxlZnQsIHBhZGRpbmcgPSBTVFJJTkdfWkVSTykge1xuICAgIGNvbnN0IGRpZmYgPSBsZW5ndGggLSBzdHIubGVuZ3RoO1xuICAgIGxldCByZXN1bHQgPSBzdHI7XG4gICAgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBhZCA9IHBhZGRpbmcucmVwZWF0KGRpZmYpO1xuICAgICAgICByZXN1bHQgPSBsZWZ0ID8gcGFkICsgc3RyIDogc3RyICsgcGFkO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiO1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSBcIkB3YWxsZXRjb25uZWN0L2VuY29kaW5nXCI7XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEFycmF5QnVmZmVyVG9CdWZmZXIoYXJyQnVmKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmFycmF5VG9CdWZmZXIobmV3IFVpbnQ4QXJyYXkoYXJyQnVmKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEFycmF5QnVmZmVyVG9VdGY4KGFyckJ1Zikge1xuICAgIHJldHVybiBlbmNvZGluZy5hcnJheVRvVXRmOChuZXcgVWludDhBcnJheShhcnJCdWYpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0QXJyYXlCdWZmZXJUb0hleChhcnJCdWYsIG5vUHJlZml4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmFycmF5VG9IZXgobmV3IFVpbnQ4QXJyYXkoYXJyQnVmKSwgIW5vUHJlZml4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0QXJyYXlCdWZmZXJUb051bWJlcihhcnJCdWYpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYXJyYXlUb051bWJlcihuZXcgVWludDhBcnJheShhcnJCdWYpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRBcnJheUJ1ZmZlcnMoLi4uYXJncykge1xuICAgIHJldHVybiBlbmNvZGluZy5oZXhUb0FycmF5KGFyZ3MubWFwKGIgPT4gZW5jb2RpbmcuYXJyYXlUb0hleChuZXcgVWludDhBcnJheShiKSkpLmpvaW4oXCJcIikpLmJ1ZmZlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0QnVmZmVyVG9BcnJheUJ1ZmZlcihidWYpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYnVmZmVyVG9BcnJheShidWYpLmJ1ZmZlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0QnVmZmVyVG9VdGY4KGJ1Zikge1xuICAgIHJldHVybiBlbmNvZGluZy5idWZmZXJUb1V0ZjgoYnVmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0QnVmZmVyVG9IZXgoYnVmLCBub1ByZWZpeCkge1xuICAgIHJldHVybiBlbmNvZGluZy5idWZmZXJUb0hleChidWYsICFub1ByZWZpeCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEJ1ZmZlclRvTnVtYmVyKGJ1Zikge1xuICAgIHJldHVybiBlbmNvZGluZy5idWZmZXJUb051bWJlcihidWYpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEJ1ZmZlcnMoLi4uYXJncykge1xuICAgIHJldHVybiBlbmNvZGluZy5jb25jYXRCdWZmZXJzKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRVdGY4VG9BcnJheUJ1ZmZlcih1dGY4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnV0ZjhUb0FycmF5KHV0ZjgpLmJ1ZmZlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VXRmOFRvQnVmZmVyKHV0ZjgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcudXRmOFRvQnVmZmVyKHV0ZjgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRVdGY4VG9IZXgodXRmOCwgbm9QcmVmaXgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcudXRmOFRvSGV4KHV0ZjgsICFub1ByZWZpeCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydFV0ZjhUb051bWJlcih1dGY4KSB7XG4gICAgcmV0dXJuIG5ldyBCTih1dGY4LCAxMCkudG9OdW1iZXIoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0SGV4VG9CdWZmZXIoaGV4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmhleFRvQnVmZmVyKGhleCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEhleFRvQXJyYXlCdWZmZXIoaGV4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmhleFRvQXJyYXkoaGV4KS5idWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEhleFRvVXRmOChoZXgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuaGV4VG9VdGY4KGhleCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEhleFRvTnVtYmVyKGhleCkge1xuICAgIHJldHVybiBuZXcgQk4oZW5jb2RpbmcucmVtb3ZlSGV4UHJlZml4KGhleCksIFwiaGV4XCIpLnRvTnVtYmVyKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydE51bWJlclRvQnVmZmVyKG51bSkge1xuICAgIHJldHVybiBlbmNvZGluZy5udW1iZXJUb0J1ZmZlcihudW0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnROdW1iZXJUb0FycmF5QnVmZmVyKG51bSkge1xuICAgIHJldHVybiBlbmNvZGluZy5udW1iZXJUb0FycmF5KG51bSkuYnVmZmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnROdW1iZXJUb1V0ZjgobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBCTihudW0pLnRvU3RyaW5nKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydE51bWJlclRvSGV4KG51bSwgbm9QcmVmaXgpIHtcbiAgICBjb25zdCBoZXggPSBlbmNvZGluZy5yZW1vdmVIZXhQcmVmaXgoZW5jb2Rpbmcuc2FuaXRpemVIZXgobmV3IEJOKG51bSkudG9TdHJpbmcoMTYpKSk7XG4gICAgcmV0dXJuIG5vUHJlZml4ID8gaGV4IDogZW5jb2RpbmcuYWRkSGV4UHJlZml4KGhleCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNvZGluZy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRFcnJvciwgZ2V0RXJyb3JCeUNvZGUsIGlzUmVzZXJ2ZWRFcnJvckNvZGUgfSBmcm9tIFwiLi9lcnJvclwiO1xuaW1wb3J0IHsgSU5URVJOQUxfRVJST1IsIFNFUlZFUl9FUlJPUiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBheWxvYWRJZCgpIHtcbiAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKSAqIE1hdGgucG93KDEwLCAzKTtcbiAgICBjb25zdCBleHRyYSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDEwLCAzKSk7XG4gICAgcmV0dXJuIGRhdGUgKyBleHRyYTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjUmVxdWVzdChtZXRob2QsIHBhcmFtcywgaWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWQgfHwgcGF5bG9hZElkKCksXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcGFyYW1zLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY1Jlc3VsdChpZCwgcmVzdWx0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIHJlc3VsdCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNFcnJvcihpZCwgZXJyb3IsIGRhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZCxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgZXJyb3I6IGZvcm1hdEVycm9yTWVzc2FnZShlcnJvciwgZGF0YSksXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IsIGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnZXRFcnJvcihJTlRFUk5BTF9FUlJPUik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZXJyb3IgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldEVycm9yKFNFUlZFUl9FUlJPUikpLCB7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZXJyb3IuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIGlmIChpc1Jlc2VydmVkRXJyb3JDb2RlKGVycm9yLmNvZGUpKSB7XG4gICAgICAgIGVycm9yID0gZ2V0RXJyb3JCeUNvZGUoZXJyb3IuY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW5jb2RpbmdcIjtcbmltcG9ydCAqIGFzIGpzb25ScGNVdGlscyBmcm9tIFwiQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlsc1wiO1xuaW1wb3J0IHsgaW5mdXJhTmV0d29ya3MgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUhleChoZXgpIHtcbiAgICByZXR1cm4gZW5jb2Rpbmcuc2FuaXRpemVIZXgoaGV4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRIZXhQcmVmaXgoaGV4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmFkZEhleFByZWZpeChoZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUhleFByZWZpeChoZXgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcucmVtb3ZlSGV4UHJlZml4KGhleCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSGV4TGVhZGluZ1plcm9zKGhleCkge1xuICAgIHJldHVybiBlbmNvZGluZy5yZW1vdmVIZXhMZWFkaW5nWmVyb3MoZW5jb2RpbmcuYWRkSGV4UHJlZml4KGhleCkpO1xufVxuZXhwb3J0IGNvbnN0IHBheWxvYWRJZCA9IGpzb25ScGNVdGlscy5wYXlsb2FkSWQ7XG5leHBvcnQgZnVuY3Rpb24gdXVpZCgpIHtcbiAgICBjb25zdCByZXN1bHQgPSAoKGEsIGIpID0+IHtcbiAgICAgICAgZm9yIChiID0gYSA9IFwiXCI7IGErKyA8IDM2OyBiICs9IChhICogNTEpICYgNTIgPyAoYSBeIDE1ID8gOCBeIChNYXRoLnJhbmRvbSgpICogKGEgXiAyMCA/IDE2IDogNCkpIDogNCkudG9TdHJpbmcoMTYpIDogXCItXCIpIHtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYjtcbiAgICB9KSgpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9nRGVwcmVjYXRpb25XYXJuaW5nKCkge1xuICAgIGNvbnNvbGUud2FybihcIkRFUFJFQ0FUSU9OIFdBUk5JTkc6IFRoaXMgV2FsbGV0Q29ubmVjdCBjbGllbnQgbGlicmFyeSB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgQHdhbGxldGNvbm5lY3QvY2xpZW50LiBQbGVhc2UgY2hlY2sgZG9jcy53YWxsZXRjb25uZWN0Lm9yZyB0byBsZWFybiBtb3JlIGFib3V0IHRoaXMgbWlncmF0aW9uIVwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmZ1cmFScGNVcmwoY2hhaW5JZCwgaW5mdXJhSWQpIHtcbiAgICBsZXQgcnBjVXJsO1xuICAgIGNvbnN0IG5ldHdvcmsgPSBpbmZ1cmFOZXR3b3Jrc1tjaGFpbklkXTtcbiAgICBpZiAobmV0d29yaykge1xuICAgICAgICBycGNVcmwgPSBgaHR0cHM6Ly8ke25ldHdvcmt9LmluZnVyYS5pby92My8ke2luZnVyYUlkfWA7XG4gICAgfVxuICAgIHJldHVybiBycGNVcmw7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UnBjVXJsKGNoYWluSWQsIHJwYykge1xuICAgIGxldCBycGNVcmw7XG4gICAgY29uc3QgaW5mdXJhVXJsID0gZ2V0SW5mdXJhUnBjVXJsKGNoYWluSWQsIHJwYy5pbmZ1cmFJZCk7XG4gICAgaWYgKHJwYy5jdXN0b20gJiYgcnBjLmN1c3RvbVtjaGFpbklkXSkge1xuICAgICAgICBycGNVcmwgPSBycGMuY3VzdG9tW2NoYWluSWRdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbmZ1cmFVcmwpIHtcbiAgICAgICAgcnBjVXJsID0gaW5mdXJhVXJsO1xuICAgIH1cbiAgICByZXR1cm4gcnBjVXJsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXAiLCJpbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW5jb2RpbmdcIjtcbmltcG9ydCB7IHNpZ25pbmdNZXRob2RzLCByZXNlcnZlZEV2ZW50cyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IFwiXCIgfHwgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS50cmltKCkgPT09IFwiXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlBcnJheShhcnJheSkge1xuICAgIHJldHVybiAhKGFycmF5ICYmIGFycmF5Lmxlbmd0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmlzQnVmZmVyKHZhbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbCkge1xuICAgIHJldHVybiBlbmNvZGluZy5pc1R5cGVkQXJyYXkodmFsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICAgIHJldHVybiBlbmNvZGluZy5pc0FycmF5QnVmZmVyKHZhbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwZSh2YWwpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuZ2V0VHlwZSh2YWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuY29kaW5nKHZhbCkge1xuICAgIHJldHVybiBlbmNvZGluZy5nZXRFbmNvZGluZyh2YWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSGV4U3RyaW5nKHZhbHVlLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuaXNIZXhTdHJpbmcodmFsdWUsIGxlbmd0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjU3Vic2NyaXB0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0LnBhcmFtcyA9PT0gXCJvYmplY3RcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNSZXF1ZXN0KG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0Lm1ldGhvZCAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3Mob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QucmVzdWx0ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1Jlc3BvbnNlRXJyb3Iob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QuZXJyb3IgIT09IFwidW5kZWZpbmVkXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm5hbEV2ZW50KG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0LmV2ZW50ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzZXJ2ZWRFdmVudChldmVudCkge1xuICAgIHJldHVybiByZXNlcnZlZEV2ZW50cy5pbmNsdWRlcyhldmVudCkgfHwgZXZlbnQuc3RhcnRzV2l0aChcIndjX1wiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbGVudFBheWxvYWQocmVxdWVzdCkge1xuICAgIGlmIChyZXF1ZXN0Lm1ldGhvZC5zdGFydHNXaXRoKFwid2NfXCIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc2lnbmluZ01ldGhvZHMuaW5jbHVkZXMocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0b3JzLmpzLm1hcCIsImltcG9ydCB7IGtlY2Nha18yNTYgfSBmcm9tIFwianMtc2hhM1wiO1xuaW1wb3J0IHsgcmVtb3ZlSGV4UHJlZml4LCBhZGRIZXhQcmVmaXggfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW5jb2RpbmdcIjtcbmltcG9ydCB7IGNvbnZlcnRVdGY4VG9IZXgsIGNvbnZlcnROdW1iZXJUb0hleCwgY29udmVydFV0ZjhUb0J1ZmZlciB9IGZyb20gXCIuL2VuY29kaW5nXCI7XG5pbXBvcnQgeyBzYW5pdGl6ZUhleCwgcmVtb3ZlSGV4TGVhZGluZ1plcm9zIH0gZnJvbSBcIi4vbWlzY1wiO1xuaW1wb3J0IHsgaXNFbXB0eUFycmF5LCBpc0hleFN0cmluZywgaXNFbXB0eVN0cmluZyB9IGZyb20gXCIuL3ZhbGlkYXRvcnNcIjtcbmV4cG9ydCBmdW5jdGlvbiB0b0NoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgYWRkcmVzcyA9IHJlbW92ZUhleFByZWZpeChhZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgIGNvbnN0IGhhc2ggPSByZW1vdmVIZXhQcmVmaXgoa2VjY2FrXzI1Nihjb252ZXJ0VXRmOFRvQnVmZmVyKGFkZHJlc3MpKSk7XG4gICAgbGV0IGNoZWNrc3VtID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFkZHJlc3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHBhcnNlSW50KGhhc2hbaV0sIDE2KSA+IDcpIHtcbiAgICAgICAgICAgIGNoZWNrc3VtICs9IGFkZHJlc3NbaV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrc3VtICs9IGFkZHJlc3NbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFkZEhleFByZWZpeChjaGVja3N1bSk7XG59XG5leHBvcnQgY29uc3QgaXNWYWxpZEFkZHJlc3MgPSAoYWRkcmVzcykgPT4ge1xuICAgIGlmICghYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFkZHJlc3MudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMCwgMikgIT09IFwiMHhcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKCEvXigweCk/WzAtOWEtZl17NDB9JC9pLnRlc3QoYWRkcmVzcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmICgvXigweCk/WzAtOWEtZl17NDB9JC8udGVzdChhZGRyZXNzKSB8fCAvXigweCk/WzAtOUEtRl17NDB9JC8udGVzdChhZGRyZXNzKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBhZGRyZXNzID09PSB0b0NoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKTtcbiAgICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGVyc29uYWxTaWduKHBhcmFtcykge1xuICAgIGlmICghaXNFbXB0eUFycmF5KHBhcmFtcykgJiYgIWlzSGV4U3RyaW5nKHBhcmFtc1swXSkpIHtcbiAgICAgICAgcGFyYW1zWzBdID0gY29udmVydFV0ZjhUb0hleChwYXJhbXNbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNhY3Rpb25EYXRhKHR4RGF0YSkge1xuICAgIGlmICh0eXBlb2YgdHhEYXRhLnR5cGUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHhEYXRhLnR5cGUgIT09IFwiMFwiKVxuICAgICAgICByZXR1cm4gdHhEYXRhO1xuICAgIGlmICh0eXBlb2YgdHhEYXRhLmZyb20gPT09IFwidW5kZWZpbmVkXCIgfHwgIWlzVmFsaWRBZGRyZXNzKHR4RGF0YS5mcm9tKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYW5zYWN0aW9uIG9iamVjdCBtdXN0IGluY2x1ZGUgYSB2YWxpZCAnZnJvbScgdmFsdWUuYCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlSGV4VmFsdWVzKHZhbHVlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFpc0VtcHR5U3RyaW5nKHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGlmICghaXNIZXhTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29udmVydE51bWJlclRvSGV4KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNhbml0aXplSGV4KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVtb3ZlSGV4TGVhZGluZ1plcm9zKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY29uc3QgdHhEYXRhUlBDID0ge1xuICAgICAgICBmcm9tOiBzYW5pdGl6ZUhleCh0eERhdGEuZnJvbSksXG4gICAgICAgIHRvOiB0eXBlb2YgdHhEYXRhLnRvID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkIDogc2FuaXRpemVIZXgodHhEYXRhLnRvKSxcbiAgICAgICAgZ2FzUHJpY2U6IHR5cGVvZiB0eERhdGEuZ2FzUHJpY2UgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogcGFyc2VIZXhWYWx1ZXModHhEYXRhLmdhc1ByaWNlKSxcbiAgICAgICAgZ2FzOiB0eXBlb2YgdHhEYXRhLmdhcyA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyB0eXBlb2YgdHhEYXRhLmdhc0xpbWl0ID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEuZ2FzTGltaXQpXG4gICAgICAgICAgICA6IHBhcnNlSGV4VmFsdWVzKHR4RGF0YS5nYXMpLFxuICAgICAgICB2YWx1ZTogdHlwZW9mIHR4RGF0YS52YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEudmFsdWUpLFxuICAgICAgICBub25jZTogdHlwZW9mIHR4RGF0YS5ub25jZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEubm9uY2UpLFxuICAgICAgICBkYXRhOiB0eXBlb2YgdHhEYXRhLmRhdGEgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogc2FuaXRpemVIZXgodHhEYXRhLmRhdGEpIHx8IFwiMHhcIixcbiAgICB9O1xuICAgIGNvbnN0IHBydW5hYmxlID0gW1wiZ2FzUHJpY2VcIiwgXCJnYXNcIiwgXCJ2YWx1ZVwiLCBcIm5vbmNlXCJdO1xuICAgIE9iamVjdC5rZXlzKHR4RGF0YVJQQykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICgodHlwZW9mIHR4RGF0YVJQQ1trZXldID09PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICAgICAgICAodHlwZW9mIHR4RGF0YVJQQ1trZXldID09PSBcInN0cmluZ1wiICYmICF0eERhdGFSUENba2V5XS50cmltKCkubGVuZ3RoKSkgJiZcbiAgICAgICAgICAgIHBydW5hYmxlLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0eERhdGFSUENba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0eERhdGFSUEM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldGhlcmV1bS5qcy5tYXAiLCJpbXBvcnQgKiBhcyBxdWVyeVN0cmluZ1V0aWxzIGZyb20gXCJxdWVyeS1zdHJpbmdcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRRdWVyeVN0cmluZyh1cmwpIHtcbiAgICBjb25zdCBwYXRoRW5kID0gdXJsLmluZGV4T2YoXCI/XCIpICE9PSAtMSA/IHVybC5pbmRleE9mKFwiP1wiKSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IHR5cGVvZiBwYXRoRW5kICE9PSBcInVuZGVmaW5lZFwiID8gdXJsLnN1YnN0cihwYXRoRW5kKSA6IFwiXCI7XG4gICAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZFRvUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcsIG5ld1F1ZXJ5UGFyYW1zKSB7XG4gICAgbGV0IHF1ZXJ5UGFyYW1zID0gcGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZyk7XG4gICAgcXVlcnlQYXJhbXMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHF1ZXJ5UGFyYW1zKSwgbmV3UXVlcnlQYXJhbXMpO1xuICAgIHF1ZXJ5U3RyaW5nID0gZm9ybWF0UXVlcnlTdHJpbmcocXVlcnlQYXJhbXMpO1xuICAgIHJldHVybiBxdWVyeVN0cmluZztcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nKSB7XG4gICAgcmV0dXJuIHF1ZXJ5U3RyaW5nVXRpbHMucGFyc2UocXVlcnlTdHJpbmcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFF1ZXJ5U3RyaW5nKHF1ZXJ5UGFyYW1zKSB7XG4gICAgcmV0dXJuIHF1ZXJ5U3RyaW5nVXRpbHMuc3RyaW5naWZ5KHF1ZXJ5UGFyYW1zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVybC5qcy5tYXAiLCJjbGFzcyBOZXR3b3JrTW9uaXRvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlcnMgPSBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCAoKSA9PiB0aGlzLnRyaWdnZXIoXCJvbmxpbmVcIikpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsICgpID0+IHRoaXMudHJpZ2dlcihcIm9mZmxpbmVcIikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXJzLnB1c2goe1xuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRyaWdnZXIoZXZlbnQpIHtcbiAgICAgICAgbGV0IGV2ZW50RW1pdHRlcnMgPSBbXTtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXJzID0gdGhpcy5fZXZlbnRFbWl0dGVycy5maWx0ZXIoKGV2ZW50RW1pdHRlcikgPT4gZXZlbnRFbWl0dGVyLmV2ZW50ID09PSBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRFbWl0dGVycy5mb3JFYWNoKChldmVudEVtaXR0ZXIpID0+IHtcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlci5jYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBOZXR3b3JrTW9uaXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldHdvcmsuanMubWFwIiwiaW1wb3J0IHsgaXNCcm93c2VyLCBnZXRMb2NhdGlvbiwgZ2V0UXVlcnlTdHJpbmcsIGRldGVjdEVudiwgYXBwZW5kVG9RdWVyeVN0cmluZywgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmltcG9ydCBOZXR3b3JrTW9uaXRvciBmcm9tIFwiLi9uZXR3b3JrXCI7XG5jb25zdCBXUyA9IHR5cGVvZiBnbG9iYWwuV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsLldlYlNvY2tldCA6IHJlcXVpcmUoXCJ3c1wiKTtcbmNsYXNzIFNvY2tldFRyYW5zcG9ydCB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9wcm90b2NvbCA9IG9wdHMucHJvdG9jb2w7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSBvcHRzLnZlcnNpb247XG4gICAgICAgIHRoaXMuX3VybCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX25ldE1vbml0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLl9zb2NrZXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG9wdHMuc3Vic2NyaXB0aW9ucyB8fCBbXTtcbiAgICAgICAgdGhpcy5fbmV0TW9uaXRvciA9IG9wdHMubmV0TW9uaXRvciB8fCBuZXcgTmV0d29ya01vbml0b3IoKTtcbiAgICAgICAgaWYgKCFvcHRzLnVybCB8fCB0eXBlb2Ygb3B0cy51cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgb3IgaW52YWxpZCBXZWJTb2NrZXQgdXJsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VybCA9IG9wdHMudXJsO1xuICAgICAgICB0aGlzLl9uZXRNb25pdG9yLm9uKFwib25saW5lXCIsICgpID0+IHRoaXMuX3NvY2tldENyZWF0ZSgpKTtcbiAgICB9XG4gICAgc2V0IHJlYWR5U3RhdGUodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IHJlYWR5U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zb2NrZXQgPyB0aGlzLl9zb2NrZXQucmVhZHlTdGF0ZSA6IC0xO1xuICAgIH1cbiAgICBzZXQgY29ubmVjdGluZyh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY29ubmVjdGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gMDtcbiAgICB9XG4gICAgc2V0IGNvbm5lY3RlZCh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkeVN0YXRlID09PSAxO1xuICAgIH1cbiAgICBzZXQgY2xvc2luZyh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY2xvc2luZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gMjtcbiAgICB9XG4gICAgc2V0IGNsb3NlZCh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkeVN0YXRlID09PSAzO1xuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICB0aGlzLl9zb2NrZXRDcmVhdGUoKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3NvY2tldENsb3NlKCk7XG4gICAgfVxuICAgIHNlbmQobWVzc2FnZSwgdG9waWMsIHNpbGVudCkge1xuICAgICAgICBpZiAoIXRvcGljIHx8IHR5cGVvZiB0b3BpYyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBvciBpbnZhbGlkIHRvcGljIGZpZWxkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvY2tldFNlbmQoe1xuICAgICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJwdWJcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IG1lc3NhZ2UsXG4gICAgICAgICAgICBzaWxlbnQ6ICEhc2lsZW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3Vic2NyaWJlKHRvcGljKSB7XG4gICAgICAgIHRoaXMuX3NvY2tldFNlbmQoe1xuICAgICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJzdWJcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IFwiXCIsXG4gICAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLnB1c2goeyBldmVudCwgY2FsbGJhY2sgfSk7XG4gICAgfVxuICAgIF9zb2NrZXRDcmVhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9uZXh0U29ja2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gZ2V0V2ViU29ja2V0VXJsKHRoaXMuX3VybCwgdGhpcy5fcHJvdG9jb2wsIHRoaXMuX3ZlcnNpb24pO1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0ID0gbmV3IFdTKHVybCk7XG4gICAgICAgIGlmICghdGhpcy5fbmV4dFNvY2tldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBzb2NrZXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuX3NvY2tldFJlY2VpdmUoZXZlbnQpO1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0Lm9ub3BlbiA9ICgpID0+IHRoaXMuX3NvY2tldE9wZW4oKTtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldC5vbmVycm9yID0gKGV2ZW50KSA9PiB0aGlzLl9zb2NrZXRFcnJvcihldmVudCk7XG4gICAgICAgIHRoaXMuX25leHRTb2NrZXQub25jbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX25leHRTb2NrZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NvY2tldENyZWF0ZSgpO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIF9zb2NrZXRPcGVuKCkge1xuICAgICAgICB0aGlzLl9zb2NrZXRDbG9zZSgpO1xuICAgICAgICB0aGlzLl9zb2NrZXQgPSB0aGlzLl9uZXh0U29ja2V0O1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcXVldWVTdWJzY3JpcHRpb25zKCk7XG4gICAgICAgIHRoaXMuX3B1c2hRdWV1ZSgpO1xuICAgIH1cbiAgICBfc29ja2V0Q2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zb2NrZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5vbmNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zb2NrZXRTZW5kKHNvY2tldE1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHNvY2tldE1lc3NhZ2UpO1xuICAgICAgICBpZiAodGhpcy5fc29ja2V0ICYmIHRoaXMuX3NvY2tldC5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQuc2VuZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFRvUXVldWUoc29ja2V0TWVzc2FnZSk7XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXRDcmVhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfc29ja2V0UmVjZWl2ZShldmVudCkge1xuICAgICAgICBsZXQgc29ja2V0TWVzc2FnZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNvY2tldE1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvY2tldFNlbmQoe1xuICAgICAgICAgICAgdG9waWM6IHNvY2tldE1lc3NhZ2UudG9waWMsXG4gICAgICAgICAgICB0eXBlOiBcImFja1wiLFxuICAgICAgICAgICAgcGF5bG9hZDogXCJcIixcbiAgICAgICAgICAgIHNpbGVudDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLl9zb2NrZXQgJiYgdGhpcy5fc29ja2V0LnJlYWR5U3RhdGUgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuX2V2ZW50cy5maWx0ZXIoZXZlbnQgPT4gZXZlbnQuZXZlbnQgPT09IFwibWVzc2FnZVwiKTtcbiAgICAgICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IGV2ZW50LmNhbGxiYWNrKHNvY2tldE1lc3NhZ2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfc29ja2V0RXJyb3IoZSkge1xuICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLl9ldmVudHMuZmlsdGVyKGV2ZW50ID0+IGV2ZW50LmV2ZW50ID09PSBcImVycm9yXCIpO1xuICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IGV2ZW50LmNhbGxiYWNrKGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcXVldWVTdWJzY3JpcHRpb25zKCkge1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKCh0b3BpYykgPT4gdGhpcy5fcXVldWUucHVzaCh7XG4gICAgICAgICAgICB0b3BpYzogdG9waWMsXG4gICAgICAgICAgICB0eXBlOiBcInN1YlwiLFxuICAgICAgICAgICAgcGF5bG9hZDogXCJcIixcbiAgICAgICAgICAgIHNpbGVudDogdHJ1ZSxcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gdGhpcy5vcHRzLnN1YnNjcmlwdGlvbnMgfHwgW107XG4gICAgfVxuICAgIF9zZXRUb1F1ZXVlKHNvY2tldE1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChzb2NrZXRNZXNzYWdlKTtcbiAgICB9XG4gICAgX3B1c2hRdWV1ZSgpIHtcbiAgICAgICAgY29uc3QgcXVldWUgPSB0aGlzLl9xdWV1ZTtcbiAgICAgICAgcXVldWUuZm9yRWFjaCgoc29ja2V0TWVzc2FnZSkgPT4gdGhpcy5fc29ja2V0U2VuZChzb2NrZXRNZXNzYWdlKSk7XG4gICAgICAgIHRoaXMuX3F1ZXVlID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0V2ViU29ja2V0VXJsKF91cmwsIHByb3RvY29sLCB2ZXJzaW9uKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCB1cmwgPSBfdXJsLnN0YXJ0c1dpdGgoXCJodHRwc1wiKVxuICAgICAgICA/IF91cmwucmVwbGFjZShcImh0dHBzXCIsIFwid3NzXCIpXG4gICAgICAgIDogX3VybC5zdGFydHNXaXRoKFwiaHR0cFwiKVxuICAgICAgICAgICAgPyBfdXJsLnJlcGxhY2UoXCJodHRwXCIsIFwid3NcIilcbiAgICAgICAgICAgIDogX3VybDtcbiAgICBjb25zdCBzcGxpdFVybCA9IHVybC5zcGxpdChcIj9cIik7XG4gICAgY29uc3QgcGFyYW1zID0gaXNCcm93c2VyKClcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgICBlbnY6IFwiYnJvd3NlclwiLFxuICAgICAgICAgICAgaG9zdDogKChfYSA9IGdldExvY2F0aW9uKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ob3N0KSB8fCBcIlwiLFxuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgZW52OiAoKF9iID0gZGV0ZWN0RW52KCkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW1lKSB8fCBcIlwiLFxuICAgICAgICB9O1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gYXBwZW5kVG9RdWVyeVN0cmluZyhnZXRRdWVyeVN0cmluZyhzcGxpdFVybFsxXSB8fCBcIlwiKSwgcGFyYW1zKTtcbiAgICByZXR1cm4gc3BsaXRVcmxbMF0gKyBcIj9cIiArIHF1ZXJ5U3RyaW5nO1xufVxuZXhwb3J0IGRlZmF1bHQgU29ja2V0VHJhbnNwb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGNvbnN0IEVSUk9SX1NFU1NJT05fQ09OTkVDVEVEID0gXCJTZXNzaW9uIGN1cnJlbnRseSBjb25uZWN0ZWRcIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCA9IFwiU2Vzc2lvbiBjdXJyZW50bHkgZGlzY29ubmVjdGVkXCI7XG5leHBvcnQgY29uc3QgRVJST1JfU0VTU0lPTl9SRUpFQ1RFRCA9IFwiU2Vzc2lvbiBSZWplY3RlZFwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX01JU1NJTkdfSlNPTl9SUEMgPSBcIk1pc3NpbmcgSlNPTiBSUEMgcmVzcG9uc2VcIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX1JFU1VMVCA9IGBKU09OLVJQQyBzdWNjZXNzIHJlc3BvbnNlIG11c3QgaW5jbHVkZSBcInJlc3VsdFwiIGZpZWxkYDtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX0VSUk9SID0gYEpTT04tUlBDIGVycm9yIHJlc3BvbnNlIG11c3QgaW5jbHVkZSBcImVycm9yXCIgZmllbGRgO1xuZXhwb3J0IGNvbnN0IEVSUk9SX01JU1NJTkdfTUVUSE9EID0gYEpTT04gUlBDIHJlcXVlc3QgbXVzdCBoYXZlIHZhbGlkIFwibWV0aG9kXCIgdmFsdWVgO1xuZXhwb3J0IGNvbnN0IEVSUk9SX01JU1NJTkdfSUQgPSBgSlNPTiBSUEMgcmVxdWVzdCBtdXN0IGhhdmUgdmFsaWQgXCJpZFwiIHZhbHVlYDtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX1JFUVVJUkVEID0gXCJNaXNzaW5nIG9uZSBvZiB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyczogYnJpZGdlIC8gdXJpIC8gc2Vzc2lvblwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0lOVkFMSURfUkVTUE9OU0UgPSBcIkpTT04gUlBDIHJlc3BvbnNlIGZvcm1hdCBpcyBpbnZhbGlkXCI7XG5leHBvcnQgY29uc3QgRVJST1JfSU5WQUxJRF9VUkkgPSBcIlVSSSBmb3JtYXQgaXMgaW52YWxpZFwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1FSQ09ERV9NT0RBTF9OT1RfUFJPVklERUQgPSBcIlFSQ29kZSBNb2RhbCBub3QgcHJvdmlkZWRcIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9RUkNPREVfTU9EQUxfVVNFUl9DTE9TRUQgPSBcIlVzZXIgY2xvc2UgUVJDb2RlIE1vZGFsXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIiwiaW1wb3J0IHsgaXNKc29uUnBjUmVxdWVzdCwgaXNKc29uUnBjUmVzcG9uc2VTdWNjZXNzLCBpc0pzb25ScGNSZXNwb25zZUVycm9yLCBpc0ludGVybmFsRXZlbnQsIGlzUmVzZXJ2ZWRFdmVudCwgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmNsYXNzIEV2ZW50TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlcnMgPSBbXTtcbiAgICB9XG4gICAgc3Vic2NyaWJlKGV2ZW50RW1pdHRlcikge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXJzLnB1c2goZXZlbnRFbWl0dGVyKTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVycyA9IHRoaXMuX2V2ZW50RW1pdHRlcnMuZmlsdGVyKHggPT4geC5ldmVudCAhPT0gZXZlbnQpO1xuICAgIH1cbiAgICB0cmlnZ2VyKHBheWxvYWQpIHtcbiAgICAgICAgbGV0IGV2ZW50RW1pdHRlcnMgPSBbXTtcbiAgICAgICAgbGV0IGV2ZW50O1xuICAgICAgICBpZiAoaXNKc29uUnBjUmVxdWVzdChwYXlsb2FkKSkge1xuICAgICAgICAgICAgZXZlbnQgPSBwYXlsb2FkLm1ldGhvZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3MocGF5bG9hZCkgfHwgaXNKc29uUnBjUmVzcG9uc2VFcnJvcihwYXlsb2FkKSkge1xuICAgICAgICAgICAgZXZlbnQgPSBgcmVzcG9uc2U6JHtwYXlsb2FkLmlkfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNJbnRlcm5hbEV2ZW50KHBheWxvYWQpKSB7XG4gICAgICAgICAgICBldmVudCA9IHBheWxvYWQuZXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBldmVudCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXJzID0gdGhpcy5fZXZlbnRFbWl0dGVycy5maWx0ZXIoKGV2ZW50RW1pdHRlcikgPT4gZXZlbnRFbWl0dGVyLmV2ZW50ID09PSBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghZXZlbnRFbWl0dGVycyB8fCAhZXZlbnRFbWl0dGVycy5sZW5ndGgpICYmXG4gICAgICAgICAgICAhaXNSZXNlcnZlZEV2ZW50KGV2ZW50KSAmJlxuICAgICAgICAgICAgIWlzSW50ZXJuYWxFdmVudChldmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlcnMgPSB0aGlzLl9ldmVudEVtaXR0ZXJzLmZpbHRlcigoZXZlbnRFbWl0dGVyKSA9PiBldmVudEVtaXR0ZXIuZXZlbnQgPT09IFwiY2FsbF9yZXF1ZXN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50RW1pdHRlcnMuZm9yRWFjaCgoZXZlbnRFbWl0dGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNKc29uUnBjUmVzcG9uc2VFcnJvcihwYXlsb2FkKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKHBheWxvYWQuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgZXZlbnRFbWl0dGVyLmNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50RW1pdHRlci5jYWxsYmFjayhudWxsLCBwYXlsb2FkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgRXZlbnRNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCIsImltcG9ydCB7IGlzV2FsbGV0Q29ubmVjdFNlc3Npb24sIGdldExvY2FsLCBzZXRMb2NhbCwgcmVtb3ZlTG9jYWwgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmNsYXNzIFNlc3Npb25TdG9yYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlSWQgPSBcIndhbGxldGNvbm5lY3RcIikge1xuICAgICAgICB0aGlzLnN0b3JhZ2VJZCA9IHN0b3JhZ2VJZDtcbiAgICB9XG4gICAgZ2V0U2Vzc2lvbigpIHtcbiAgICAgICAgbGV0IHNlc3Npb24gPSBudWxsO1xuICAgICAgICBjb25zdCBqc29uID0gZ2V0TG9jYWwodGhpcy5zdG9yYWdlSWQpO1xuICAgICAgICBpZiAoanNvbiAmJiBpc1dhbGxldENvbm5lY3RTZXNzaW9uKGpzb24pKSB7XG4gICAgICAgICAgICBzZXNzaW9uID0ganNvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICB9XG4gICAgc2V0U2Vzc2lvbihzZXNzaW9uKSB7XG4gICAgICAgIHNldExvY2FsKHRoaXMuc3RvcmFnZUlkLCBzZXNzaW9uKTtcbiAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfVxuICAgIHJlbW92ZVNlc3Npb24oKSB7XG4gICAgICAgIHJlbW92ZUxvY2FsKHRoaXMuc3RvcmFnZUlkKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBTZXNzaW9uU3RvcmFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JhZ2UuanMubWFwIiwiaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZyB9IGZyb20gXCIuL3VybFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzV2FsbGV0Q29ubmVjdFNlc3Npb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QuYnJpZGdlICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlV2FsbGV0Q29ubmVjdFVyaShzdHIpIHtcbiAgICBjb25zdCBwYXRoU3RhcnQgPSBzdHIuaW5kZXhPZihcIjpcIik7XG4gICAgY29uc3QgcGF0aEVuZCA9IHN0ci5pbmRleE9mKFwiP1wiKSAhPT0gLTEgPyBzdHIuaW5kZXhPZihcIj9cIikgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvdG9jb2wgPSBzdHIuc3Vic3RyaW5nKDAsIHBhdGhTdGFydCk7XG4gICAgY29uc3QgcGF0aCA9IHN0ci5zdWJzdHJpbmcocGF0aFN0YXJ0ICsgMSwgcGF0aEVuZCk7XG4gICAgZnVuY3Rpb24gcGFyc2VSZXF1aXJlZFBhcmFtcyhwYXRoKSB7XG4gICAgICAgIGNvbnN0IHNlcGFyYXRvciA9IFwiQFwiO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBwYXRoLnNwbGl0KHNlcGFyYXRvcik7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVkUGFyYW1zID0ge1xuICAgICAgICAgICAgaGFuZHNoYWtlVG9waWM6IHZhbHVlc1swXSxcbiAgICAgICAgICAgIHZlcnNpb246IHBhcnNlSW50KHZhbHVlc1sxXSwgMTApLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVxdWlyZWRQYXJhbXM7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVpcmVkUGFyYW1zID0gcGFyc2VSZXF1aXJlZFBhcmFtcyhwYXRoKTtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IHR5cGVvZiBwYXRoRW5kICE9PSBcInVuZGVmaW5lZFwiID8gc3RyLnN1YnN0cihwYXRoRW5kKSA6IFwiXCI7XG4gICAgZnVuY3Rpb24gcGFyc2VRdWVyeVBhcmFtcyhxdWVyeVN0cmluZykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgIGtleTogcmVzdWx0LmtleSB8fCBcIlwiLFxuICAgICAgICAgICAgYnJpZGdlOiByZXN1bHQuYnJpZGdlIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBwYXJhbWV0ZXJzO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHBhcnNlUXVlcnlQYXJhbXMocXVlcnlTdHJpbmcpO1xuICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IHByb3RvY29sIH0sIHJlcXVpcmVkUGFyYW1zKSwgcXVlcnlQYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXNzaW9uLmpzLm1hcCIsImNvbnN0IGRvbWFpbiA9IFwid2FsbGV0Y29ubmVjdC5vcmdcIjtcbmNvbnN0IGFscGhhbnVtZXJpY2FsID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIjtcbmNvbnN0IGJyaWRnZXMgPSBhbHBoYW51bWVyaWNhbC5zcGxpdChcIlwiKS5tYXAoY2hhciA9PiBgaHR0cHM6Ly8ke2NoYXJ9LmJyaWRnZS53YWxsZXRjb25uZWN0Lm9yZ2ApO1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RIb3N0bmFtZSh1cmwpIHtcbiAgICBsZXQgaG9zdG5hbWUgPSB1cmwuaW5kZXhPZihcIi8vXCIpID4gLTEgPyB1cmwuc3BsaXQoXCIvXCIpWzJdIDogdXJsLnNwbGl0KFwiL1wiKVswXTtcbiAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KFwiOlwiKVswXTtcbiAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KFwiP1wiKVswXTtcbiAgICByZXR1cm4gaG9zdG5hbWU7XG59XG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFJvb3REb21haW4odXJsKSB7XG4gICAgcmV0dXJuIGV4dHJhY3RIb3N0bmFtZSh1cmwpXG4gICAgICAgIC5zcGxpdChcIi5cIilcbiAgICAgICAgLnNsaWNlKC0yKVxuICAgICAgICAuam9pbihcIi5cIik7XG59XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tQnJpZGdlSW5kZXgoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJyaWRnZXMubGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RSYW5kb21CcmlkZ2VVcmwoKSB7XG4gICAgcmV0dXJuIGJyaWRnZXNbcmFuZG9tQnJpZGdlSW5kZXgoKV07XG59XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkU2VsZWN0UmFuZG9tbHkodXJsKSB7XG4gICAgcmV0dXJuIGV4dHJhY3RSb290RG9tYWluKHVybCkgPT09IGRvbWFpbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRCcmlkZ2VVcmwodXJsKSB7XG4gICAgaWYgKHNob3VsZFNlbGVjdFJhbmRvbWx5KHVybCkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdFJhbmRvbUJyaWRnZVVybCgpO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcCIsImltcG9ydCB7IHBhcnNlUGVyc29uYWxTaWduLCBwYXJzZVRyYW5zYWN0aW9uRGF0YSwgY29udmVydEFycmF5QnVmZmVyVG9IZXgsIGNvbnZlcnRIZXhUb0FycmF5QnVmZmVyLCBnZXRDbGllbnRNZXRhLCBwYXlsb2FkSWQsIHV1aWQsIGZvcm1hdFJwY0Vycm9yLCBwYXJzZVdhbGxldENvbm5lY3RVcmksIGNvbnZlcnROdW1iZXJUb0hleCwgaXNKc29uUnBjUmVzcG9uc2VTdWNjZXNzLCBpc0pzb25ScGNSZXNwb25zZUVycm9yLCBpc1NpbGVudFBheWxvYWQsIGdldExvY2FsLCBzaWduaW5nTWV0aG9kcywgbW9iaWxlTGlua0Nob2ljZUtleSwgaXNNb2JpbGUsIHJlbW92ZUxvY2FsLCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC91dGlsc1wiO1xuaW1wb3J0IFNvY2tldFRyYW5zcG9ydCBmcm9tIFwiQHdhbGxldGNvbm5lY3Qvc29ja2V0LXRyYW5zcG9ydFwiO1xuaW1wb3J0IHsgRVJST1JfU0VTU0lPTl9DT05ORUNURUQsIEVSUk9SX1NFU1NJT05fRElTQ09OTkVDVEVELCBFUlJPUl9TRVNTSU9OX1JFSkVDVEVELCBFUlJPUl9NSVNTSU5HX0pTT05fUlBDLCBFUlJPUl9NSVNTSU5HX1JFU1VMVCwgRVJST1JfTUlTU0lOR19FUlJPUiwgRVJST1JfTUlTU0lOR19NRVRIT0QsIEVSUk9SX01JU1NJTkdfSUQsIEVSUk9SX0lOVkFMSURfUkVTUE9OU0UsIEVSUk9SX0lOVkFMSURfVVJJLCBFUlJPUl9NSVNTSU5HX1JFUVVJUkVELCBFUlJPUl9RUkNPREVfTU9EQUxfTk9UX1BST1ZJREVELCBFUlJPUl9RUkNPREVfTU9EQUxfVVNFUl9DTE9TRUQsIH0gZnJvbSBcIi4vZXJyb3JzXCI7XG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gXCIuL2V2ZW50c1wiO1xuaW1wb3J0IFNlc3Npb25TdG9yYWdlIGZyb20gXCIuL3N0b3JhZ2VcIjtcbmltcG9ydCB7IGdldEJyaWRnZVVybCB9IGZyb20gXCIuL3VybFwiO1xuY2xhc3MgQ29ubmVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSBcIndjXCI7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDE7XG4gICAgICAgIHRoaXMuX2JyaWRnZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2tleSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NsaWVudElkID0gXCJcIjtcbiAgICAgICAgdGhpcy5fY2xpZW50TWV0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BlZXJJZCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX3BlZXJNZXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5faGFuZHNoYWtlSWQgPSAwO1xuICAgICAgICB0aGlzLl9oYW5kc2hha2VUb3BpYyA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hY2NvdW50cyA9IFtdO1xuICAgICAgICB0aGlzLl9jaGFpbklkID0gMDtcbiAgICAgICAgdGhpcy5fbmV0d29ya0lkID0gMDtcbiAgICAgICAgdGhpcy5fcnBjVXJsID0gXCJcIjtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyID0gbmV3IEV2ZW50TWFuYWdlcigpO1xuICAgICAgICB0aGlzLl9jbGllbnRNZXRhID0gZ2V0Q2xpZW50TWV0YSgpIHx8IG9wdHMuY29ubmVjdG9yT3B0cy5jbGllbnRNZXRhIHx8IG51bGw7XG4gICAgICAgIHRoaXMuX2NyeXB0b0xpYiA9IG9wdHMuY3J5cHRvTGliO1xuICAgICAgICB0aGlzLl9zZXNzaW9uU3RvcmFnZSA9IG9wdHMuc2Vzc2lvblN0b3JhZ2UgfHwgbmV3IFNlc3Npb25TdG9yYWdlKG9wdHMuY29ubmVjdG9yT3B0cy5zdG9yYWdlSWQpO1xuICAgICAgICB0aGlzLl9xcmNvZGVNb2RhbCA9IG9wdHMuY29ubmVjdG9yT3B0cy5xcmNvZGVNb2RhbDtcbiAgICAgICAgdGhpcy5fcXJjb2RlTW9kYWxPcHRpb25zID0gb3B0cy5jb25uZWN0b3JPcHRzLnFyY29kZU1vZGFsT3B0aW9ucztcbiAgICAgICAgdGhpcy5fc2lnbmluZ01ldGhvZHMgPSBbLi4uc2lnbmluZ01ldGhvZHMsIC4uLihvcHRzLmNvbm5lY3Rvck9wdHMuc2lnbmluZ01ldGhvZHMgfHwgW10pXTtcbiAgICAgICAgaWYgKCFvcHRzLmNvbm5lY3Rvck9wdHMuYnJpZGdlICYmICFvcHRzLmNvbm5lY3Rvck9wdHMudXJpICYmICFvcHRzLmNvbm5lY3Rvck9wdHMuc2Vzc2lvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfUkVRVUlSRUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLmNvbm5lY3Rvck9wdHMuYnJpZGdlKSB7XG4gICAgICAgICAgICB0aGlzLmJyaWRnZSA9IGdldEJyaWRnZVVybChvcHRzLmNvbm5lY3Rvck9wdHMuYnJpZGdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5jb25uZWN0b3JPcHRzLnVyaSkge1xuICAgICAgICAgICAgdGhpcy51cmkgPSBvcHRzLmNvbm5lY3Rvck9wdHMudXJpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBvcHRzLmNvbm5lY3Rvck9wdHMuc2Vzc2lvbiB8fCB0aGlzLl9nZXRTdG9yYWdlU2Vzc2lvbigpO1xuICAgICAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICAgICAgdGhpcy5zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYW5kc2hha2VJZCkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9TZXNzaW9uUmVzcG9uc2UodGhpcy5oYW5kc2hha2VJZCwgXCJTZXNzaW9uIHJlcXVlc3QgcmVqZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID1cbiAgICAgICAgICAgIG9wdHMudHJhbnNwb3J0IHx8XG4gICAgICAgICAgICAgICAgbmV3IFNvY2tldFRyYW5zcG9ydCh7XG4gICAgICAgICAgICAgICAgICAgIHByb3RvY29sOiB0aGlzLnByb3RvY29sLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5icmlkZ2UsXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IFt0aGlzLmNsaWVudElkXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9JbnRlcm5hbEV2ZW50cygpO1xuICAgICAgICB0aGlzLl9pbml0VHJhbnNwb3J0KCk7XG4gICAgICAgIGlmIChvcHRzLmNvbm5lY3Rvck9wdHMudXJpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmVUb1Nlc3Npb25SZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucHVzaFNlcnZlck9wdHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyUHVzaFNlcnZlcihvcHRzLnB1c2hTZXJ2ZXJPcHRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgYnJpZGdlKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9icmlkZ2UgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGJyaWRnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JyaWRnZTtcbiAgICB9XG4gICAgc2V0IGtleSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2V5ID0gY29udmVydEhleFRvQXJyYXlCdWZmZXIodmFsdWUpO1xuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XG4gICAgfVxuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIGlmICh0aGlzLl9rZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGNvbnZlcnRBcnJheUJ1ZmZlclRvSGV4KHRoaXMuX2tleSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBzZXQgY2xpZW50SWQodmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsaWVudElkID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBjbGllbnRJZCgpIHtcbiAgICAgICAgbGV0IGNsaWVudElkID0gdGhpcy5fY2xpZW50SWQ7XG4gICAgICAgIGlmICghY2xpZW50SWQpIHtcbiAgICAgICAgICAgIGNsaWVudElkID0gdGhpcy5fY2xpZW50SWQgPSB1dWlkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudElkO1xuICAgIH1cbiAgICBzZXQgcGVlcklkKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wZWVySWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHBlZXJJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlZXJJZDtcbiAgICB9XG4gICAgc2V0IGNsaWVudE1ldGEodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNsaWVudE1ldGEoKSB7XG4gICAgICAgIGxldCBjbGllbnRNZXRhID0gdGhpcy5fY2xpZW50TWV0YTtcbiAgICAgICAgaWYgKCFjbGllbnRNZXRhKSB7XG4gICAgICAgICAgICBjbGllbnRNZXRhID0gdGhpcy5fY2xpZW50TWV0YSA9IGdldENsaWVudE1ldGEoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xpZW50TWV0YTtcbiAgICB9XG4gICAgc2V0IHBlZXJNZXRhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BlZXJNZXRhID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBwZWVyTWV0YSgpIHtcbiAgICAgICAgY29uc3QgcGVlck1ldGEgPSB0aGlzLl9wZWVyTWV0YTtcbiAgICAgICAgcmV0dXJuIHBlZXJNZXRhO1xuICAgIH1cbiAgICBzZXQgaGFuZHNoYWtlVG9waWModmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhbmRzaGFrZVRvcGljID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBoYW5kc2hha2VUb3BpYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRzaGFrZVRvcGljO1xuICAgIH1cbiAgICBzZXQgaGFuZHNoYWtlSWQodmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhbmRzaGFrZUlkID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBoYW5kc2hha2VJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRzaGFrZUlkO1xuICAgIH1cbiAgICBnZXQgdXJpKCkge1xuICAgICAgICBjb25zdCBfdXJpID0gdGhpcy5fZm9ybWF0VXJpKCk7XG4gICAgICAgIHJldHVybiBfdXJpO1xuICAgIH1cbiAgICBzZXQgdXJpKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGhhbmRzaGFrZVRvcGljLCBicmlkZ2UsIGtleSB9ID0gdGhpcy5fcGFyc2VVcmkodmFsdWUpO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZVRvcGljID0gaGFuZHNoYWtlVG9waWM7XG4gICAgICAgIHRoaXMuYnJpZGdlID0gYnJpZGdlO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICB9XG4gICAgc2V0IGNoYWluSWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fY2hhaW5JZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgY2hhaW5JZCgpIHtcbiAgICAgICAgY29uc3QgY2hhaW5JZCA9IHRoaXMuX2NoYWluSWQ7XG4gICAgICAgIHJldHVybiBjaGFpbklkO1xuICAgIH1cbiAgICBzZXQgbmV0d29ya0lkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX25ldHdvcmtJZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbmV0d29ya0lkKCkge1xuICAgICAgICBjb25zdCBuZXR3b3JrSWQgPSB0aGlzLl9uZXR3b3JrSWQ7XG4gICAgICAgIHJldHVybiBuZXR3b3JrSWQ7XG4gICAgfVxuICAgIHNldCBhY2NvdW50cyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9hY2NvdW50cyA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYWNjb3VudHMoKSB7XG4gICAgICAgIGNvbnN0IGFjY291bnRzID0gdGhpcy5fYWNjb3VudHM7XG4gICAgICAgIHJldHVybiBhY2NvdW50cztcbiAgICB9XG4gICAgc2V0IHJwY1VybCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9ycGNVcmwgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJwY1VybCgpIHtcbiAgICAgICAgY29uc3QgcnBjVXJsID0gdGhpcy5fcnBjVXJsO1xuICAgICAgICByZXR1cm4gcnBjVXJsO1xuICAgIH1cbiAgICBzZXQgY29ubmVjdGVkKHZhbHVlKSB7XG4gICAgfVxuICAgIGdldCBjb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0ZWQ7XG4gICAgfVxuICAgIHNldCBwZW5kaW5nKHZhbHVlKSB7XG4gICAgfVxuICAgIGdldCBwZW5kaW5nKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9oYW5kc2hha2VUb3BpYztcbiAgICB9XG4gICAgZ2V0IHNlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb25uZWN0ZWQ6IHRoaXMuY29ubmVjdGVkLFxuICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICBicmlkZ2U6IHRoaXMuYnJpZGdlLFxuICAgICAgICAgICAga2V5OiB0aGlzLmtleSxcbiAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgY2xpZW50TWV0YTogdGhpcy5jbGllbnRNZXRhLFxuICAgICAgICAgICAgcGVlcklkOiB0aGlzLnBlZXJJZCxcbiAgICAgICAgICAgIHBlZXJNZXRhOiB0aGlzLnBlZXJNZXRhLFxuICAgICAgICAgICAgaGFuZHNoYWtlSWQ6IHRoaXMuaGFuZHNoYWtlSWQsXG4gICAgICAgICAgICBoYW5kc2hha2VUb3BpYzogdGhpcy5oYW5kc2hha2VUb3BpYyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0IHNlc3Npb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHZhbHVlLmNvbm5lY3RlZDtcbiAgICAgICAgdGhpcy5hY2NvdW50cyA9IHZhbHVlLmFjY291bnRzO1xuICAgICAgICB0aGlzLmNoYWluSWQgPSB2YWx1ZS5jaGFpbklkO1xuICAgICAgICB0aGlzLmJyaWRnZSA9IHZhbHVlLmJyaWRnZTtcbiAgICAgICAgdGhpcy5rZXkgPSB2YWx1ZS5rZXk7XG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSB2YWx1ZS5jbGllbnRJZDtcbiAgICAgICAgdGhpcy5jbGllbnRNZXRhID0gdmFsdWUuY2xpZW50TWV0YTtcbiAgICAgICAgdGhpcy5wZWVySWQgPSB2YWx1ZS5wZWVySWQ7XG4gICAgICAgIHRoaXMucGVlck1ldGEgPSB2YWx1ZS5wZWVyTWV0YTtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VJZCA9IHZhbHVlLmhhbmRzaGFrZUlkO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZVRvcGljID0gdmFsdWUuaGFuZHNoYWtlVG9waWM7XG4gICAgfVxuICAgIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBldmVudEVtaXR0ZXIgPSB7XG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIuc3Vic2NyaWJlKGV2ZW50RW1pdHRlcik7XG4gICAgfVxuICAgIG9mZihldmVudCkge1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudW5zdWJzY3JpYmUoZXZlbnQpO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVJbnN0YW50UmVxdWVzdChpbnN0YW50UmVxdWVzdCkge1xuICAgICAgICB0aGlzLl9rZXkgPSBhd2FpdCB0aGlzLl9nZW5lcmF0ZUtleSgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwid2NfaW5zdGFudFJlcXVlc3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVlcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgICAgICAgICBwZWVyTWV0YTogdGhpcy5jbGllbnRNZXRhLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0OiB0aGlzLl9mb3JtYXRSZXF1ZXN0KGluc3RhbnRSZXF1ZXN0KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGFuZHNoYWtlSWQgPSByZXF1ZXN0LmlkO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZVRvcGljID0gdXVpZCgpO1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICBldmVudDogXCJkaXNwbGF5X3VyaVwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbdGhpcy51cmldLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbihcIm1vZGFsX2Nsb3NlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfUVJDT0RFX01PREFMX1VTRVJfQ0xPU0VEKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVuZEluc3RhbnRSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5raWxsU2Vzc2lvbigpO1xuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGVuZEluc3RhbnRSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZW5kSW5zdGFudFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGNvbm5lY3Qob3B0cykge1xuICAgICAgICBpZiAoIXRoaXMuX3FyY29kZU1vZGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfUVJDT0RFX01PREFMX05PVF9QUk9WSURFRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICBhY2NvdW50czogdGhpcy5hY2NvdW50cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVTZXNzaW9uKG9wdHMpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbihcIm1vZGFsX2Nsb3NlZFwiLCAoKSA9PiByZWplY3QobmV3IEVycm9yKEVSUk9SX1FSQ09ERV9NT0RBTF9VU0VSX0NMT1NFRCkpKTtcbiAgICAgICAgICAgIHRoaXMub24oXCJjb25uZWN0XCIsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkLnBhcmFtc1swXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGNyZWF0ZVNlc3Npb24ob3B0cykge1xuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9DT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9rZXkgPSBhd2FpdCB0aGlzLl9nZW5lcmF0ZUtleSgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwid2Nfc2Vzc2lvblJlcXVlc3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVlcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgICAgICAgICBwZWVyTWV0YTogdGhpcy5jbGllbnRNZXRhLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiBvcHRzICYmIG9wdHMuY2hhaW5JZCA/IG9wdHMuY2hhaW5JZCA6IG51bGwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZUlkID0gcmVxdWVzdC5pZDtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VUb3BpYyA9IHV1aWQoKTtcbiAgICAgICAgdGhpcy5fc2VuZFNlc3Npb25SZXF1ZXN0KHJlcXVlc3QsIFwiU2Vzc2lvbiB1cGRhdGUgcmVqZWN0ZWRcIiwge1xuICAgICAgICAgICAgdG9waWM6IHRoaXMuaGFuZHNoYWtlVG9waWMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICBldmVudDogXCJkaXNwbGF5X3VyaVwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbdGhpcy51cmldLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXBwcm92ZVNlc3Npb24oc2Vzc2lvblN0YXR1cykge1xuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9DT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IHNlc3Npb25TdGF0dXMuY2hhaW5JZDtcbiAgICAgICAgdGhpcy5hY2NvdW50cyA9IHNlc3Npb25TdGF0dXMuYWNjb3VudHM7XG4gICAgICAgIHRoaXMubmV0d29ya0lkID0gc2Vzc2lvblN0YXR1cy5uZXR3b3JrSWQgfHwgMDtcbiAgICAgICAgdGhpcy5ycGNVcmwgPSBzZXNzaW9uU3RhdHVzLnJwY1VybCB8fCBcIlwiO1xuICAgICAgICBjb25zdCBzZXNzaW9uUGFyYW1zID0ge1xuICAgICAgICAgICAgYXBwcm92ZWQ6IHRydWUsXG4gICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICBuZXR3b3JrSWQ6IHRoaXMubmV0d29ya0lkLFxuICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICBycGNVcmw6IHRoaXMucnBjVXJsLFxuICAgICAgICAgICAgcGVlcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgcGVlck1ldGE6IHRoaXMuY2xpZW50TWV0YSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICBpZDogdGhpcy5oYW5kc2hha2VJZCxcbiAgICAgICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgICAgICByZXN1bHQ6IHNlc3Npb25QYXJhbXMsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3NlbmRSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NldFN0b3JhZ2VTZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImNvbm5lY3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVlcklkOiB0aGlzLnBlZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgcGVlck1ldGE6IHRoaXMucGVlck1ldGEsXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWplY3RTZXNzaW9uKHNlc3Npb25FcnJvcikge1xuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9DT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBzZXNzaW9uRXJyb3IgJiYgc2Vzc2lvbkVycm9yLm1lc3NhZ2UgPyBzZXNzaW9uRXJyb3IubWVzc2FnZSA6IEVSUk9SX1NFU1NJT05fUkVKRUNURUQ7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5fZm9ybWF0UmVzcG9uc2Uoe1xuICAgICAgICAgICAgaWQ6IHRoaXMuaGFuZHNoYWtlSWQsXG4gICAgICAgICAgICBlcnJvcjogeyBtZXNzYWdlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZW5kUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwiZGlzY29ubmVjdFwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbeyBtZXNzYWdlIH1dLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlU3RvcmFnZVNlc3Npb24oKTtcbiAgICB9XG4gICAgdXBkYXRlU2Vzc2lvbihzZXNzaW9uU3RhdHVzKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IHNlc3Npb25TdGF0dXMuY2hhaW5JZDtcbiAgICAgICAgdGhpcy5hY2NvdW50cyA9IHNlc3Npb25TdGF0dXMuYWNjb3VudHM7XG4gICAgICAgIHRoaXMubmV0d29ya0lkID0gc2Vzc2lvblN0YXR1cy5uZXR3b3JrSWQgfHwgMDtcbiAgICAgICAgdGhpcy5ycGNVcmwgPSBzZXNzaW9uU3RhdHVzLnJwY1VybCB8fCBcIlwiO1xuICAgICAgICBjb25zdCBzZXNzaW9uUGFyYW1zID0ge1xuICAgICAgICAgICAgYXBwcm92ZWQ6IHRydWUsXG4gICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICBuZXR3b3JrSWQ6IHRoaXMubmV0d29ya0lkLFxuICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICBycGNVcmw6IHRoaXMucnBjVXJsLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwid2Nfc2Vzc2lvblVwZGF0ZVwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbc2Vzc2lvblBhcmFtc10sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZW5kU2Vzc2lvblJlcXVlc3QocmVxdWVzdCwgXCJTZXNzaW9uIHVwZGF0ZSByZWplY3RlZFwiKTtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwic2Vzc2lvbl91cGRhdGVcIixcbiAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogdGhpcy5jaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50czogdGhpcy5hY2NvdW50cyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX21hbmFnZVN0b3JhZ2VTZXNzaW9uKCk7XG4gICAgfVxuICAgIGFzeW5jIGtpbGxTZXNzaW9uKHNlc3Npb25FcnJvcikge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gc2Vzc2lvbkVycm9yID8gc2Vzc2lvbkVycm9yLm1lc3NhZ2UgOiBcIlNlc3Npb24gRGlzY29ubmVjdGVkXCI7XG4gICAgICAgIGNvbnN0IHNlc3Npb25QYXJhbXMgPSB7XG4gICAgICAgICAgICBhcHByb3ZlZDogZmFsc2UsXG4gICAgICAgICAgICBjaGFpbklkOiBudWxsLFxuICAgICAgICAgICAgbmV0d29ya0lkOiBudWxsLFxuICAgICAgICAgICAgYWNjb3VudHM6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJ3Y19zZXNzaW9uVXBkYXRlXCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtzZXNzaW9uUGFyYW1zXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMuX3NlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICB0aGlzLl9oYW5kbGVTZXNzaW9uRGlzY29ubmVjdChtZXNzYWdlKTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZFRyYW5zYWN0aW9uKHR4KSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR4ID0gcGFyc2VUcmFuc2FjdGlvbkRhdGEodHgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbcGFyc2VkVHhdLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBzaWduVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHggPSBwYXJzZVRyYW5zYWN0aW9uRGF0YSh0eCk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJldGhfc2lnblRyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtwYXJzZWRUeF0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kQ2FsbFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25NZXNzYWdlKHBhcmFtcykge1xuICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1NFU1NJT05fRElTQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiZXRoX3NpZ25cIixcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3NlbmRDYWxsUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgc2lnblBlcnNvbmFsTWVzc2FnZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zID0gcGFyc2VQZXJzb25hbFNpZ24ocGFyYW1zKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcInBlcnNvbmFsX3NpZ25cIixcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3NlbmRDYWxsUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgc2lnblR5cGVkRGF0YShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9zaWduVHlwZWREYXRhXCIsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kQ2FsbFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZUNoYWluKGNoYWluUGFyYW1zKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZXNzaW9uIGN1cnJlbnRseSBkaXNjb25uZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIndhbGxldF91cGRhdGVDaGFpblwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbY2hhaW5QYXJhbXNdLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB1bnNhZmVTZW5kKHJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fc2VuZFJlcXVlc3QocmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImNhbGxfcmVxdWVzdF9zZW50XCIsXG4gICAgICAgICAgICBwYXJhbXM6IFt7IHJlcXVlc3QsIG9wdGlvbnMgfV0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9SZXNwb25zZShyZXF1ZXN0LmlkLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfSlNPTl9SUEMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHBheWxvYWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzZW5kQ3VzdG9tUmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAocmVxdWVzdC5tZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgXCJldGhfYWNjb3VudHNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY2NvdW50cztcbiAgICAgICAgICAgIGNhc2UgXCJldGhfY2hhaW5JZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBjb252ZXJ0TnVtYmVyVG9IZXgodGhpcy5jaGFpbklkKTtcbiAgICAgICAgICAgIGNhc2UgXCJldGhfc2VuZFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICBjYXNlIFwiZXRoX3NpZ25UcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnBhcmFtc1swXSA9IHBhcnNlVHJhbnNhY3Rpb25EYXRhKHJlcXVlc3QucGFyYW1zWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicGVyc29uYWxfc2lnblwiOlxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnBhcmFtcyA9IHBhcnNlUGVyc29uYWxTaWduKHJlcXVlc3QucGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kQ2FsbFJlcXVlc3QoZm9ybWF0dGVkUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFwcHJvdmVSZXF1ZXN0KHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChpc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3MocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRSZXNwb25zZSA9IHRoaXMuX2Zvcm1hdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRSZXNwb25zZShmb3JtYXR0ZWRSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTUlTU0lOR19SRVNVTFQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlamVjdFJlcXVlc3QocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKGlzSnNvblJwY1Jlc3BvbnNlRXJyb3IocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRSZXNwb25zZSA9IHRoaXMuX2Zvcm1hdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRSZXNwb25zZShmb3JtYXR0ZWRSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTUlTU0lOR19FUlJPUik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJhbnNwb3J0Q2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH1cbiAgICBhc3luYyBfc2VuZFJlcXVlc3QocmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjYWxsUmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25QYXlsb2FkID0gYXdhaXQgdGhpcy5fZW5jcnlwdChjYWxsUmVxdWVzdCk7XG4gICAgICAgIGNvbnN0IHRvcGljID0gdHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudG9waWMpICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy50b3BpYyA6IHRoaXMucGVlcklkO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoZW5jcnlwdGlvblBheWxvYWQpO1xuICAgICAgICBjb25zdCBzaWxlbnQgPSB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mb3JjZVB1c2hOb3RpZmljYXRpb24pICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICA/ICFvcHRpb25zLmZvcmNlUHVzaE5vdGlmaWNhdGlvblxuICAgICAgICAgICAgOiBpc1NpbGVudFBheWxvYWQoY2FsbFJlcXVlc3QpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQuc2VuZChwYXlsb2FkLCB0b3BpYywgc2lsZW50KTtcbiAgICB9XG4gICAgYXN5bmMgX3NlbmRSZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uUGF5bG9hZCA9IGF3YWl0IHRoaXMuX2VuY3J5cHQocmVzcG9uc2UpO1xuICAgICAgICBjb25zdCB0b3BpYyA9IHRoaXMucGVlcklkO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoZW5jcnlwdGlvblBheWxvYWQpO1xuICAgICAgICBjb25zdCBzaWxlbnQgPSB0cnVlO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQuc2VuZChwYXlsb2FkLCB0b3BpYywgc2lsZW50KTtcbiAgICB9XG4gICAgYXN5bmMgX3NlbmRTZXNzaW9uUmVxdWVzdChyZXF1ZXN0LCBlcnJvck1zZywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9zZW5kUmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9TZXNzaW9uUmVzcG9uc2UocmVxdWVzdC5pZCwgZXJyb3JNc2cpO1xuICAgIH1cbiAgICBfc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fc2VuZFJlcXVlc3QocmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImNhbGxfcmVxdWVzdF9zZW50XCIsXG4gICAgICAgICAgICBwYXJhbXM6IFt7IHJlcXVlc3QsIG9wdGlvbnMgfV0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlVG9DYWxsUmVzcG9uc2UocmVxdWVzdC5pZCk7XG4gICAgfVxuICAgIF9mb3JtYXRSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0Lm1ldGhvZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfTUVUSE9EKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgaWQ6IHR5cGVvZiByZXF1ZXN0LmlkID09PSBcInVuZGVmaW5lZFwiID8gcGF5bG9hZElkKCkgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBwYXJhbXM6IHR5cGVvZiByZXF1ZXN0LnBhcmFtcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFtdIDogcmVxdWVzdC5wYXJhbXMsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBfZm9ybWF0UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5pZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfSUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJhc2VSZXNwb25zZSA9IHsgaWQ6IHJlc3BvbnNlLmlkLCBqc29ucnBjOiBcIjIuMFwiIH07XG4gICAgICAgIGlmIChpc0pzb25ScGNSZXNwb25zZUVycm9yKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBmb3JtYXRScGNFcnJvcihyZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGJhc2VSZXNwb25zZSksIHJlc3BvbnNlKSwgeyBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcyhyZXNwb25zZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NSZXNwb25zZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYmFzZVJlc3BvbnNlKSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3NSZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfSU5WQUxJRF9SRVNQT05TRSk7XG4gICAgfVxuICAgIF9oYW5kbGVTZXNzaW9uRGlzY29ubmVjdChlcnJvck1zZykge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3JNc2cgfHwgXCJTZXNzaW9uIERpc2Nvbm5lY3RlZFwiO1xuICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3FyY29kZU1vZGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcXJjb2RlTW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZUxvY2FsKG1vYmlsZUxpbmtDaG9pY2VLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9oYW5kc2hha2VJZCkge1xuICAgICAgICAgICAgdGhpcy5faGFuZHNoYWtlSWQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9oYW5kc2hha2VUb3BpYykge1xuICAgICAgICAgICAgdGhpcy5faGFuZHNoYWtlVG9waWMgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wZWVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BlZXJJZCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwiZGlzY29ubmVjdFwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbeyBtZXNzYWdlIH1dLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlU3RvcmFnZVNlc3Npb24oKTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnRDbG9zZSgpO1xuICAgIH1cbiAgICBfaGFuZGxlU2Vzc2lvblJlc3BvbnNlKGVycm9yTXNnLCBzZXNzaW9uUGFyYW1zKSB7XG4gICAgICAgIGlmIChzZXNzaW9uUGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoc2Vzc2lvblBhcmFtcy5hcHByb3ZlZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uUGFyYW1zLmNoYWluSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhaW5JZCA9IHNlc3Npb25QYXJhbXMuY2hhaW5JZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvblBhcmFtcy5hY2NvdW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2NvdW50cyA9IHNlc3Npb25QYXJhbXMuYWNjb3VudHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMucGVlcklkICYmICF0aGlzLnBlZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZWVySWQgPSBzZXNzaW9uUGFyYW1zLnBlZXJJZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvblBhcmFtcy5wZWVyTWV0YSAmJiAhdGhpcy5wZWVyTWV0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZWVyTWV0YSA9IHNlc3Npb25QYXJhbXMucGVlck1ldGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IFwiY29ubmVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWVySWQ6IHRoaXMucGVlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWVyTWV0YTogdGhpcy5wZWVyTWV0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogdGhpcy5jaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50czogdGhpcy5hY2NvdW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvblBhcmFtcy5jaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYWluSWQgPSBzZXNzaW9uUGFyYW1zLmNoYWluSWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMuYWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjb3VudHMgPSBzZXNzaW9uUGFyYW1zLmFjY291bnRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcInNlc3Npb25fdXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VTdG9yYWdlU2Vzc2lvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlU2Vzc2lvbkRpc2Nvbm5lY3QoZXJyb3JNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlU2Vzc2lvbkRpc2Nvbm5lY3QoZXJyb3JNc2cpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9oYW5kbGVJbmNvbWluZ01lc3NhZ2VzKHNvY2tldE1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlVG9waWNzID0gW3RoaXMuY2xpZW50SWQsIHRoaXMuaGFuZHNoYWtlVG9waWNdO1xuICAgICAgICBpZiAoIWFjdGl2ZVRvcGljcy5pbmNsdWRlcyhzb2NrZXRNZXNzYWdlLnRvcGljKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlbmNyeXB0aW9uUGF5bG9hZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGVuY3J5cHRpb25QYXlsb2FkID0gSlNPTi5wYXJzZShzb2NrZXRNZXNzYWdlLnBheWxvYWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCB0aGlzLl9kZWNyeXB0KGVuY3J5cHRpb25QYXlsb2FkKTtcbiAgICAgICAgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHBheWxvYWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zdWJzY3JpYmVUb1Nlc3Npb25SZXF1ZXN0KCkge1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQuc3Vic2NyaWJlKHRoaXMuaGFuZHNoYWtlVG9waWMpO1xuICAgIH1cbiAgICBfc3Vic2NyaWJlVG9SZXNwb25zZShpZCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5vbihgcmVzcG9uc2U6JHtpZH1gLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIF9zdWJzY3JpYmVUb1Nlc3Npb25SZXNwb25zZShpZCwgZXJyb3JNc2cpIHtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9SZXNwb25zZShpZCwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVTZXNzaW9uUmVzcG9uc2UoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcyhwYXlsb2FkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvck1zZywgcGF5bG9hZC5yZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF5bG9hZC5lcnJvciAmJiBwYXlsb2FkLmVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVTZXNzaW9uUmVzcG9uc2UocGF5bG9hZC5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvck1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfc3Vic2NyaWJlVG9DYWxsUmVzcG9uc2UoaWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZVRvUmVzcG9uc2UoaWQsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3MocGF5bG9hZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBheWxvYWQuZXJyb3IgJiYgcGF5bG9hZC5lcnJvci5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocGF5bG9hZC5lcnJvci5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKEVSUk9SX0lOVkFMSURfUkVTUE9OU0UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9zdWJzY3JpYmVUb0ludGVybmFsRXZlbnRzKCkge1xuICAgICAgICB0aGlzLm9uKFwiZGlzcGxheV91cmlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3FyY29kZU1vZGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcXJjb2RlTW9kYWwub3Blbih0aGlzLnVyaSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogXCJtb2RhbF9jbG9zZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMuX3FyY29kZU1vZGFsT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwiY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcXJjb2RlTW9kYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9xcmNvZGVNb2RhbC5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbihcImNhbGxfcmVxdWVzdF9zZW50XCIsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyByZXF1ZXN0IH0gPSBwYXlsb2FkLnBhcmFtc1swXTtcbiAgICAgICAgICAgIGlmIChpc01vYmlsZSgpICYmIHRoaXMuX3NpZ25pbmdNZXRob2RzLmluY2x1ZGVzKHJlcXVlc3QubWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vYmlsZUxpbmtVcmwgPSBnZXRMb2NhbChtb2JpbGVMaW5rQ2hvaWNlS2V5KTtcbiAgICAgICAgICAgICAgICBpZiAobW9iaWxlTGlua1VybCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG1vYmlsZUxpbmtVcmwuaHJlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwid2Nfc2Vzc2lvblJlcXVlc3RcIiwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFwiU0VTU0lPTl9SRVFVRVNUX0VSUk9SXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZUlkID0gcGF5bG9hZC5pZDtcbiAgICAgICAgICAgIHRoaXMucGVlcklkID0gcGF5bG9hZC5wYXJhbXNbMF0ucGVlcklkO1xuICAgICAgICAgICAgdGhpcy5wZWVyTWV0YSA9IHBheWxvYWQucGFyYW1zWzBdLnBlZXJNZXRhO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJuYWxQYXlsb2FkID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKSwgeyBtZXRob2Q6IFwic2Vzc2lvbl9yZXF1ZXN0XCIgfSk7XG4gICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcihpbnRlcm5hbFBheWxvYWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbihcIndjX3Nlc3Npb25VcGRhdGVcIiwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVTZXNzaW9uUmVzcG9uc2UoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVTZXNzaW9uUmVzcG9uc2UoXCJTZXNzaW9uIGRpc2Nvbm5lY3RlZFwiLCBwYXlsb2FkLnBhcmFtc1swXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaW5pdFRyYW5zcG9ydCgpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Lm9uKFwibWVzc2FnZVwiLCAoc29ja2V0TWVzc2FnZSkgPT4gdGhpcy5faGFuZGxlSW5jb21pbmdNZXNzYWdlcyhzb2NrZXRNZXNzYWdlKSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5vbihcIm9wZW5cIiwgKCkgPT4gdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoeyBldmVudDogXCJ0cmFuc3BvcnRfb3BlblwiLCBwYXJhbXM6IFtdIH0pKTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Lm9uKFwiY2xvc2VcIiwgKCkgPT4gdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoeyBldmVudDogXCJ0cmFuc3BvcnRfY2xvc2VcIiwgcGFyYW1zOiBbXSB9KSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5vbihcImVycm9yXCIsICgpID0+IHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcInRyYW5zcG9ydF9lcnJvclwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbXCJXZWJzb2NrZXQgY29ubmVjdGlvbiBmYWlsZWRcIl0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Lm9wZW4oKTtcbiAgICB9XG4gICAgX2Zvcm1hdFVyaSgpIHtcbiAgICAgICAgY29uc3QgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sO1xuICAgICAgICBjb25zdCBoYW5kc2hha2VUb3BpYyA9IHRoaXMuaGFuZHNoYWtlVG9waWM7XG4gICAgICAgIGNvbnN0IHZlcnNpb24gPSB0aGlzLnZlcnNpb247XG4gICAgICAgIGNvbnN0IGJyaWRnZSA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmJyaWRnZSk7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5O1xuICAgICAgICBjb25zdCB1cmkgPSBgJHtwcm90b2NvbH06JHtoYW5kc2hha2VUb3BpY31AJHt2ZXJzaW9ufT9icmlkZ2U9JHticmlkZ2V9JmtleT0ke2tleX1gO1xuICAgICAgICByZXR1cm4gdXJpO1xuICAgIH1cbiAgICBfcGFyc2VVcmkodXJpKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlV2FsbGV0Q29ubmVjdFVyaSh1cmkpO1xuICAgICAgICBpZiAocmVzdWx0LnByb3RvY29sID09PSB0aGlzLnByb3RvY29sKSB7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5oYW5kc2hha2VUb3BpYykge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBvciBtaXNzaW5nIGhhbmRzaGFrZVRvcGljIHBhcmFtZXRlciB2YWx1ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGhhbmRzaGFrZVRvcGljID0gcmVzdWx0LmhhbmRzaGFrZVRvcGljO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQuYnJpZGdlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG9yIG1pc3NpbmcgYnJpZGdlIHVybCBwYXJhbWV0ZXIgdmFsdWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBicmlkZ2UgPSBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0LmJyaWRnZSk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5rZXkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgb3IgbWlzc2luZyBrZXkgcGFyYW1ldGVyIHZhbHVlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qga2V5ID0gcmVzdWx0LmtleTtcbiAgICAgICAgICAgIHJldHVybiB7IGhhbmRzaGFrZVRvcGljLCBicmlkZ2UsIGtleSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX0lOVkFMSURfVVJJKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfZ2VuZXJhdGVLZXkoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jcnlwdG9MaWIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2NyeXB0b0xpYi5nZW5lcmF0ZUtleSgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgX2VuY3J5cHQoZGF0YSkge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9rZXk7XG4gICAgICAgIGlmICh0aGlzLl9jcnlwdG9MaWIgJiYga2V5KSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9jcnlwdG9MaWIuZW5jcnlwdChkYXRhLCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgX2RlY3J5cHQocGF5bG9hZCkge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9rZXk7XG4gICAgICAgIGlmICh0aGlzLl9jcnlwdG9MaWIgJiYga2V5KSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9jcnlwdG9MaWIuZGVjcnlwdChwYXlsb2FkLCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgX2dldFN0b3JhZ2VTZXNzaW9uKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3Nlc3Npb25TdG9yYWdlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9zZXNzaW9uU3RvcmFnZS5nZXRTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX3NldFN0b3JhZ2VTZXNzaW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fc2Vzc2lvblN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb25TdG9yYWdlLnNldFNlc3Npb24odGhpcy5zZXNzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVtb3ZlU3RvcmFnZVNlc3Npb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXNzaW9uU3RvcmFnZSkge1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvblN0b3JhZ2UucmVtb3ZlU2Vzc2lvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9tYW5hZ2VTdG9yYWdlU2Vzc2lvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0U3RvcmFnZVNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZVN0b3JhZ2VTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3JlZ2lzdGVyUHVzaFNlcnZlcihwdXNoU2VydmVyT3B0cykge1xuICAgICAgICBpZiAoIXB1c2hTZXJ2ZXJPcHRzLnVybCB8fCB0eXBlb2YgcHVzaFNlcnZlck9wdHMudXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgb3IgbWlzc2luZyBwdXNoU2VydmVyT3B0cy51cmwgcGFyYW1ldGVyIHZhbHVlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHVzaFNlcnZlck9wdHMudHlwZSB8fCB0eXBlb2YgcHVzaFNlcnZlck9wdHMudHlwZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG9yIG1pc3NpbmcgcHVzaFNlcnZlck9wdHMudHlwZSBwYXJhbWV0ZXIgdmFsdWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwdXNoU2VydmVyT3B0cy50b2tlbiB8fCB0eXBlb2YgcHVzaFNlcnZlck9wdHMudG9rZW4gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBvciBtaXNzaW5nIHB1c2hTZXJ2ZXJPcHRzLnRva2VuIHBhcmFtZXRlciB2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwdXNoU3Vic2NyaXB0aW9uID0ge1xuICAgICAgICAgICAgYnJpZGdlOiB0aGlzLmJyaWRnZSxcbiAgICAgICAgICAgIHRvcGljOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgdHlwZTogcHVzaFNlcnZlck9wdHMudHlwZSxcbiAgICAgICAgICAgIHRva2VuOiBwdXNoU2VydmVyT3B0cy50b2tlbixcbiAgICAgICAgICAgIHBlZXJOYW1lOiBcIlwiLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IHB1c2hTZXJ2ZXJPcHRzLmxhbmd1YWdlIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub24oXCJjb25uZWN0XCIsIGFzeW5jIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHVzaFNlcnZlck9wdHMucGVlck1ldGEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwZWVyTmFtZSA9IHBheWxvYWQucGFyYW1zWzBdLnBlZXJNZXRhLm5hbWU7XG4gICAgICAgICAgICAgICAgcHVzaFN1YnNjcmlwdGlvbi5wZWVyTmFtZSA9IHBlZXJOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3B1c2hTZXJ2ZXJPcHRzLnVybH0vbmV3YCwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHB1c2hTdWJzY3JpcHRpb24pLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFqc29uLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJGYWlsZWQgdG8gcmVnaXN0ZXIgaW4gUHVzaCBTZXJ2ZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJGYWlsZWQgdG8gcmVnaXN0ZXIgaW4gUHVzaCBTZXJ2ZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IENvbm5lY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBwcm9taXNpZnkob3JpZ2luYWxGbiwgdGhpc0FyZykge1xuICAgIGNvbnN0IHByb21pc2lmaWVkRnVuY3Rpb24gPSBhc3luYyAoLi4uY2FsbEFyZ3MpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgPT09IG51bGwgfHwgdHlwZW9mIGVyciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvcmlnaW5hbEZuLmFwcGx5KHRoaXNBcmcsIFsuLi5jYWxsQXJncywgY2FsbGJhY2tdKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gcHJvbWlzaWZpZWRGdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRScGNFcnJvcihlcnJvcikge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8IFwiRmFpbGVkIG9yIFJlamVjdGVkIFJlcXVlc3RcIjtcbiAgICBsZXQgY29kZSA9IC0zMjAwMDtcbiAgICBpZiAoZXJyb3IgJiYgIWVycm9yLmNvZGUpIHtcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBjYXNlIFwiUGFyc2UgZXJyb3JcIjpcbiAgICAgICAgICAgICAgICBjb2RlID0gLTMyNzAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkludmFsaWQgcmVxdWVzdFwiOlxuICAgICAgICAgICAgICAgIGNvZGUgPSAtMzI2MDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiTWV0aG9kIG5vdCBmb3VuZFwiOlxuICAgICAgICAgICAgICAgIGNvZGUgPSAtMzI2MDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiSW52YWxpZCBwYXJhbXNcIjpcbiAgICAgICAgICAgICAgICBjb2RlID0gLTMyNjAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkludGVybmFsIGVycm9yXCI6XG4gICAgICAgICAgICAgICAgY29kZSA9IC0zMjYwMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29kZSA9IC0zMjAwMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIGNvZGUsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF5bG9hZC5qcy5tYXAiLCJpbXBvcnQgeyBMRU5HVEhfMSwgTEVOR1RIXzMyLCBMRU5HVEhfMTYsIExFTkdUSF8yNTYgfSBmcm9tIFwiLi9sZW5ndGhcIjtcbmV4cG9ydCBjb25zdCBBRVNfTEVOR1RIID0gTEVOR1RIXzI1NjtcbmV4cG9ydCBjb25zdCBITUFDX0xFTkdUSCA9IExFTkdUSF8yNTY7XG5leHBvcnQgY29uc3QgQUVTX0JST1dTRVJfQUxHTyA9IFwiQUVTLUNCQ1wiO1xuZXhwb3J0IGNvbnN0IEhNQUNfQlJPV1NFUl9BTEdPID0gYFNIQS0ke0FFU19MRU5HVEh9YDtcbmV4cG9ydCBjb25zdCBITUFDX0JST1dTRVIgPSBcIkhNQUNcIjtcbmV4cG9ydCBjb25zdCBTSEEyNTZfQlJPV1NFUl9BTEdPID0gXCJTSEEtMjU2XCI7XG5leHBvcnQgY29uc3QgU0hBNTEyX0JST1dTRVJfQUxHTyA9IFwiU0hBLTUxMlwiO1xuZXhwb3J0IGNvbnN0IEFFU19OT0RFX0FMR08gPSBgYWVzLSR7QUVTX0xFTkdUSH0tY2JjYDtcbmV4cG9ydCBjb25zdCBITUFDX05PREVfQUxHTyA9IGBzaGEke0hNQUNfTEVOR1RIfWA7XG5leHBvcnQgY29uc3QgU0hBMjU2X05PREVfQUxHTyA9IFwic2hhMjU2XCI7XG5leHBvcnQgY29uc3QgU0hBNTEyX05PREVfQUxHTyA9IFwic2hhNTEyXCI7XG5leHBvcnQgY29uc3QgUklQRU1EMTYwX05PREVfQUxHTyA9IFwicmlwZW1kMTYwXCI7XG5leHBvcnQgY29uc3QgUFJFRklYX0xFTkdUSCA9IExFTkdUSF8xO1xuZXhwb3J0IGNvbnN0IEtFWV9MRU5HVEggPSBMRU5HVEhfMzI7XG5leHBvcnQgY29uc3QgSVZfTEVOR1RIID0gTEVOR1RIXzE2O1xuZXhwb3J0IGNvbnN0IE1BQ19MRU5HVEggPSBMRU5HVEhfMzI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0LmpzLm1hcCIsImltcG9ydCAqIGFzIGVudiBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnRcIjtcbmltcG9ydCB7IEVOQ1JZUFRfT1AsIERFQ1JZUFRfT1AsIFNJR05fT1AsIFZFUklGWV9PUCwgQUVTX0JST1dTRVJfQUxHTywgQUVTX0xFTkdUSCwgSE1BQ19CUk9XU0VSX0FMR08sIEhNQUNfQlJPV1NFUiwgSE1BQ19MRU5HVEgsIFNIQTI1Nl9CUk9XU0VSX0FMR08sIFNIQTUxMl9CUk9XU0VSX0FMR08sIExFTkdUSF81MTIsIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFsZ28odHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSBBRVNfQlJPV1NFUl9BTEdPXG4gICAgICAgID8geyBsZW5ndGg6IEFFU19MRU5HVEgsIG5hbWU6IEFFU19CUk9XU0VSX0FMR08gfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogSE1BQ19CUk9XU0VSX0FMR08gfSxcbiAgICAgICAgICAgIG5hbWU6IEhNQUNfQlJPV1NFUixcbiAgICAgICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHModHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSBBRVNfQlJPV1NFUl9BTEdPXG4gICAgICAgID8gW0VOQ1JZUFRfT1AsIERFQ1JZUFRfT1BdXG4gICAgICAgIDogW1NJR05fT1AsIFZFUklGWV9PUF07XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlckV4cG9ydEtleShjcnlwdG9LZXksIHR5cGUgPSBBRVNfQlJPV1NFUl9BTEdPKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCBzdWJ0bGUuZXhwb3J0S2V5KFwicmF3XCIsIGNyeXB0b0tleSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJyb3dzZXJJbXBvcnRLZXkoYnVmZmVyLCB0eXBlID0gQUVTX0JST1dTRVJfQUxHTykge1xuICAgIHJldHVybiBlbnYuZ2V0U3VidGxlQ3J5cHRvKCkuaW1wb3J0S2V5KFwicmF3XCIsIGJ1ZmZlciwgZ2V0QWxnbyh0eXBlKSwgdHJ1ZSwgZ2V0T3BzKHR5cGUpKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm93c2VyQWVzRW5jcnlwdChpdiwga2V5LCBkYXRhKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGJyb3dzZXJJbXBvcnRLZXkoa2V5LCBBRVNfQlJPV1NFUl9BTEdPKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdWJ0bGUuZW5jcnlwdCh7XG4gICAgICAgIGl2LFxuICAgICAgICBuYW1lOiBBRVNfQlJPV1NFUl9BTEdPLFxuICAgIH0sIGNyeXB0b0tleSwgZGF0YSk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlckFlc0RlY3J5cHQoaXYsIGtleSwgZGF0YSkge1xuICAgIGNvbnN0IHN1YnRsZSA9IGVudi5nZXRTdWJ0bGVDcnlwdG8oKTtcbiAgICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCBicm93c2VySW1wb3J0S2V5KGtleSwgQUVTX0JST1dTRVJfQUxHTyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VidGxlLmRlY3J5cHQoe1xuICAgICAgICBpdixcbiAgICAgICAgbmFtZTogQUVTX0JST1dTRVJfQUxHTyxcbiAgICB9LCBjcnlwdG9LZXksIGRhdGEpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJyb3dzZXJIbWFjU2hhMjU2U2lnbihrZXksIGRhdGEpIHtcbiAgICBjb25zdCBzdWJ0bGUgPSBlbnYuZ2V0U3VidGxlQ3J5cHRvKCk7XG4gICAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgYnJvd3NlckltcG9ydEtleShrZXksIEhNQUNfQlJPV1NFUik7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgc3VidGxlLnNpZ24oe1xuICAgICAgICBsZW5ndGg6IEhNQUNfTEVOR1RILFxuICAgICAgICBuYW1lOiBITUFDX0JST1dTRVIsXG4gICAgfSwgY3J5cHRvS2V5LCBkYXRhKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm93c2VySG1hY1NoYTUxMlNpZ24oa2V5LCBkYXRhKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGJyb3dzZXJJbXBvcnRLZXkoa2V5LCBITUFDX0JST1dTRVIpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHN1YnRsZS5zaWduKHtcbiAgICAgICAgbGVuZ3RoOiBMRU5HVEhfNTEyLFxuICAgICAgICBuYW1lOiBITUFDX0JST1dTRVIsXG4gICAgfSwgY3J5cHRvS2V5LCBkYXRhKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm93c2VyU2hhMjU2KGRhdGEpIHtcbiAgICBjb25zdCBzdWJ0bGUgPSBlbnYuZ2V0U3VidGxlQ3J5cHRvKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VidGxlLmRpZ2VzdCh7XG4gICAgICAgIG5hbWU6IFNIQTI1Nl9CUk9XU0VSX0FMR08sXG4gICAgfSwgZGF0YSk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlclNoYTUxMihkYXRhKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1YnRsZS5kaWdlc3Qoe1xuICAgICAgICBuYW1lOiBTSEE1MTJfQlJPV1NFUl9BTEdPLFxuICAgIH0sIGRhdGEpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci5qcy5tYXAiLCJleHBvcnQgY29uc3QgTEVOR1RIXzAgPSAwO1xuZXhwb3J0IGNvbnN0IExFTkdUSF8xID0gMTtcbmV4cG9ydCBjb25zdCBMRU5HVEhfMTYgPSAxNjtcbmV4cG9ydCBjb25zdCBMRU5HVEhfMzIgPSAzMjtcbmV4cG9ydCBjb25zdCBMRU5HVEhfNjQgPSA2NDtcbmV4cG9ydCBjb25zdCBMRU5HVEhfMTI4ID0gMTI4O1xuZXhwb3J0IGNvbnN0IExFTkdUSF8yNTYgPSAyNTY7XG5leHBvcnQgY29uc3QgTEVOR1RIXzUxMiA9IDUxMjtcbmV4cG9ydCBjb25zdCBMRU5HVEhfMTAyNCA9IDEwMjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZW5ndGguanMubWFwIiwiZXhwb3J0IGNvbnN0IEVOQ1JZUFRfT1AgPSBcImVuY3J5cHRcIjtcbmV4cG9ydCBjb25zdCBERUNSWVBUX09QID0gXCJkZWNyeXB0XCI7XG5leHBvcnQgY29uc3QgU0lHTl9PUCA9IFwic2lnblwiO1xuZXhwb3J0IGNvbnN0IFZFUklGWV9PUCA9IFwidmVyaWZ5XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVyYXRpb25zLmpzLm1hcCIsImltcG9ydCB7IGJyb3dzZXJBZXNEZWNyeXB0LCBicm93c2VyQWVzRW5jcnlwdCB9IGZyb20gXCIuLi9saWIvYnJvd3NlclwiO1xuZXhwb3J0IGZ1bmN0aW9uIGFlc0NiY0VuY3J5cHQoaXYsIGtleSwgZGF0YSkge1xuICAgIHJldHVybiBicm93c2VyQWVzRW5jcnlwdChpdiwga2V5LCBkYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZXNDYmNEZWNyeXB0KGl2LCBrZXksIGRhdGEpIHtcbiAgICByZXR1cm4gYnJvd3NlckFlc0RlY3J5cHQoaXYsIGtleSwgZGF0YSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZXMuanMubWFwIiwiaW1wb3J0IHsgYnJvd3NlckhtYWNTaGEyNTZTaWduLCBicm93c2VySG1hY1NoYTUxMlNpZ24gfSBmcm9tIFwiLi4vbGliL2Jyb3dzZXJcIjtcbmltcG9ydCB7IGlzQ29uc3RhbnRUaW1lIH0gZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBobWFjU2hhMjU2U2lnbihrZXksIG1zZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJyb3dzZXJIbWFjU2hhMjU2U2lnbihrZXksIG1zZyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBobWFjU2hhMjU2VmVyaWZ5KGtleSwgbXNnLCBzaWcpIHtcbiAgICBjb25zdCBleHBlY3RlZFNpZyA9IGF3YWl0IGJyb3dzZXJIbWFjU2hhMjU2U2lnbihrZXksIG1zZyk7XG4gICAgY29uc3QgcmVzdWx0ID0gaXNDb25zdGFudFRpbWUoZXhwZWN0ZWRTaWcsIHNpZyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBobWFjU2hhNTEyU2lnbihrZXksIG1zZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJyb3dzZXJIbWFjU2hhNTEyU2lnbihrZXksIG1zZyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBobWFjU2hhNTEyVmVyaWZ5KGtleSwgbXNnLCBzaWcpIHtcbiAgICBjb25zdCBleHBlY3RlZFNpZyA9IGF3YWl0IGJyb3dzZXJIbWFjU2hhNTEyU2lnbihrZXksIG1zZyk7XG4gICAgY29uc3QgcmVzdWx0ID0gaXNDb25zdGFudFRpbWUoZXhwZWN0ZWRTaWcsIHNpZyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhtYWMuanMubWFwIiwiaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9jcnlwdG9cIjtcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbmNvZGluZ1wiO1xuaW1wb3J0IHsgY29udmVydEFycmF5QnVmZmVyVG9CdWZmZXIsIGNvbnZlcnRCdWZmZXJUb0FycmF5QnVmZmVyIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVLZXkobGVuZ3RoKSB7XG4gICAgY29uc3QgX2xlbmd0aCA9IChsZW5ndGggfHwgMjU2KSAvIDg7XG4gICAgY29uc3QgYnl0ZXMgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoX2xlbmd0aCk7XG4gICAgY29uc3QgcmVzdWx0ID0gY29udmVydEJ1ZmZlclRvQXJyYXlCdWZmZXIoZW5jb2RpbmcuYXJyYXlUb0J1ZmZlcihieXRlcykpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5SG1hYyhwYXlsb2FkLCBrZXkpIHtcbiAgICBjb25zdCBjaXBoZXJUZXh0ID0gZW5jb2RpbmcuaGV4VG9BcnJheShwYXlsb2FkLmRhdGEpO1xuICAgIGNvbnN0IGl2ID0gZW5jb2RpbmcuaGV4VG9BcnJheShwYXlsb2FkLml2KTtcbiAgICBjb25zdCBobWFjID0gZW5jb2RpbmcuaGV4VG9BcnJheShwYXlsb2FkLmhtYWMpO1xuICAgIGNvbnN0IGhtYWNIZXggPSBlbmNvZGluZy5hcnJheVRvSGV4KGhtYWMsIGZhbHNlKTtcbiAgICBjb25zdCB1bnNpZ25lZCA9IGVuY29kaW5nLmNvbmNhdEFycmF5cyhjaXBoZXJUZXh0LCBpdik7XG4gICAgY29uc3QgY2htYWMgPSBhd2FpdCBjcnlwdG8uaG1hY1NoYTI1NlNpZ24oa2V5LCB1bnNpZ25lZCk7XG4gICAgY29uc3QgY2htYWNIZXggPSBlbmNvZGluZy5hcnJheVRvSGV4KGNobWFjLCBmYWxzZSk7XG4gICAgaWYgKGVuY29kaW5nLnJlbW92ZUhleFByZWZpeChobWFjSGV4KSA9PT0gZW5jb2RpbmcucmVtb3ZlSGV4UHJlZml4KGNobWFjSGV4KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuY3J5cHQoZGF0YSwga2V5LCBwcm92aWRlZEl2KSB7XG4gICAgY29uc3QgX2tleSA9IGVuY29kaW5nLmJ1ZmZlclRvQXJyYXkoY29udmVydEFycmF5QnVmZmVyVG9CdWZmZXIoa2V5KSk7XG4gICAgY29uc3QgaXZBcnJheUJ1ZmZlciA9IHByb3ZpZGVkSXYgfHwgKGF3YWl0IGdlbmVyYXRlS2V5KDEyOCkpO1xuICAgIGNvbnN0IGl2ID0gZW5jb2RpbmcuYnVmZmVyVG9BcnJheShjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlcihpdkFycmF5QnVmZmVyKSk7XG4gICAgY29uc3QgaXZIZXggPSBlbmNvZGluZy5hcnJheVRvSGV4KGl2LCBmYWxzZSk7XG4gICAgY29uc3QgY29udGVudFN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBlbmNvZGluZy51dGY4VG9BcnJheShjb250ZW50U3RyaW5nKTtcbiAgICBjb25zdCBjaXBoZXJUZXh0ID0gYXdhaXQgY3J5cHRvLmFlc0NiY0VuY3J5cHQoaXYsIF9rZXksIGNvbnRlbnQpO1xuICAgIGNvbnN0IGNpcGhlclRleHRIZXggPSBlbmNvZGluZy5hcnJheVRvSGV4KGNpcGhlclRleHQsIGZhbHNlKTtcbiAgICBjb25zdCB1bnNpZ25lZCA9IGVuY29kaW5nLmNvbmNhdEFycmF5cyhjaXBoZXJUZXh0LCBpdik7XG4gICAgY29uc3QgaG1hYyA9IGF3YWl0IGNyeXB0by5obWFjU2hhMjU2U2lnbihfa2V5LCB1bnNpZ25lZCk7XG4gICAgY29uc3QgaG1hY0hleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoaG1hYywgZmFsc2UpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGNpcGhlclRleHRIZXgsXG4gICAgICAgIGhtYWM6IGhtYWNIZXgsXG4gICAgICAgIGl2OiBpdkhleCxcbiAgICB9O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlY3J5cHQocGF5bG9hZCwga2V5KSB7XG4gICAgY29uc3QgX2tleSA9IGVuY29kaW5nLmJ1ZmZlclRvQXJyYXkoY29udmVydEFycmF5QnVmZmVyVG9CdWZmZXIoa2V5KSk7XG4gICAgaWYgKCFfa2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcga2V5OiByZXF1aXJlZCBmb3IgZGVjcnlwdGlvblwiKTtcbiAgICB9XG4gICAgY29uc3QgdmVyaWZpZWQgPSBhd2FpdCB2ZXJpZnlIbWFjKHBheWxvYWQsIF9rZXkpO1xuICAgIGlmICghdmVyaWZpZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGNpcGhlclRleHQgPSBlbmNvZGluZy5oZXhUb0FycmF5KHBheWxvYWQuZGF0YSk7XG4gICAgY29uc3QgaXYgPSBlbmNvZGluZy5oZXhUb0FycmF5KHBheWxvYWQuaXYpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGNyeXB0by5hZXNDYmNEZWNyeXB0KGl2LCBfa2V5LCBjaXBoZXJUZXh0KTtcbiAgICBjb25zdCB1dGY4ID0gZW5jb2RpbmcuYXJyYXlUb1V0ZjgoYnVmZmVyKTtcbiAgICBsZXQgZGF0YTtcbiAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSh1dGY4KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCAqIGFzIGVudiBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnRcIjtcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgICBjb25zdCBicm93c2VyQ3J5cHRvID0gZW52LmdldEJyb3dlckNyeXB0bygpO1xuICAgIHJldHVybiBicm93c2VyQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShsZW5ndGgpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCBDb25uZWN0b3IgZnJvbSBcIkB3YWxsZXRjb25uZWN0L2NvcmVcIjtcbmltcG9ydCAqIGFzIGNyeXB0b0xpYiBmcm9tIFwiQHdhbGxldGNvbm5lY3QvaXNvLWNyeXB0b1wiO1xuY2xhc3MgV2FsbGV0Q29ubmVjdCBleHRlbmRzIENvbm5lY3RvciB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdG9yT3B0cywgcHVzaFNlcnZlck9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgY3J5cHRvTGliLFxuICAgICAgICAgICAgY29ubmVjdG9yT3B0cyxcbiAgICAgICAgICAgIHB1c2hTZXJ2ZXJPcHRzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBXYWxsZXRDb25uZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiZXZlbnRlbWl0dGVyM1wiO1xuaW1wb3J0IHsgWE1MSHR0cFJlcXVlc3QgfSBmcm9tIFwieGhyMi1jb29raWVzXCI7XG5pbXBvcnQgeyBnZXRGcm9tV2luZG93IH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7XG5jb25zdCBYSFIgPSBnZXRGcm9tV2luZG93KFwiWE1MSHR0cFJlcXVlc3RcIikgfHwgWE1MSHR0cFJlcXVlc3Q7XG5jbGFzcyBIVFRQQ29ubmVjdGlvbiBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IodXJsKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgIH1cbiAgICBmb3JtYXRFcnJvcihwYXlsb2FkLCBtZXNzYWdlLCBjb2RlID0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiB7IG1lc3NhZ2UsIGNvZGUgfSxcbiAgICAgICAgICAgIGlkOiBwYXlsb2FkLmlkLFxuICAgICAgICAgICAganNvbnJwYzogcGF5bG9hZC5qc29ucnBjLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzZW5kKHBheWxvYWQsIGludGVybmFsKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLm1ldGhvZCA9PT0gXCJldGhfc3Vic2NyaWJlXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMuZm9ybWF0RXJyb3IocGF5bG9hZCwgXCJTdWJzY3JpcHRpb25zIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgSFRUUCBlbmRwb2ludFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeGhyID0gbmV3IFhIUigpO1xuICAgICAgICAgICAgbGV0IHJlc3BvbmRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNwb25kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbmRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWwoZXJyLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBpZCwganNvbnJwYyB9ID0gcGF5bG9hZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gZXJyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7IGlkLCBqc29ucnBjLCBlcnJvcjogeyBtZXNzYWdlOiBlcnIubWVzc2FnZSwgY29kZTogZXJyLmNvZGUgfSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7IGlkLCBqc29ucnBjLCByZXN1bHQgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInBheWxvYWRcIiwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIHRoaXMudXJsLCB0cnVlKTtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgICAgICAgIHhoci50aW1lb3V0ID0gNjAgKiAxMDAwO1xuICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSByZXM7XG4gICAgICAgICAgICB4aHIub250aW1lb3V0ID0gcmVzO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyhyZXNwb25zZS5lcnJvciwgcmVzcG9uc2UucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgSFRUUENvbm5lY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgV2FsbGV0Q29ubmVjdCBmcm9tIFwiQHdhbGxldGNvbm5lY3QvY2xpZW50XCI7XG5pbXBvcnQgUVJDb2RlTW9kYWwgZnJvbSBcIkB3YWxsZXRjb25uZWN0L3FyY29kZS1tb2RhbFwiO1xuaW1wb3J0IEh0dHBDb25uZWN0aW9uIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9odHRwLWNvbm5lY3Rpb25cIjtcbmltcG9ydCB7IHBheWxvYWRJZCwgc2lnbmluZ01ldGhvZHMsIHBhcnNlUGVyc29uYWxTaWduLCBnZXRScGNVcmwgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmNvbnN0IFByb3ZpZGVyRW5naW5lID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lXCIpO1xuY29uc3QgQ2FjaGVTdWJwcm92aWRlciA9IHJlcXVpcmUoXCJ3ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvY2FjaGVcIik7XG5jb25zdCBGaXh0dXJlU3VicHJvdmlkZXIgPSByZXF1aXJlKFwid2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2ZpeHR1cmVcIik7XG5jb25zdCBGaWx0ZXJTdWJwcm92aWRlciA9IHJlcXVpcmUoXCJ3ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvZmlsdGVyc1wiKTtcbmNvbnN0IEhvb2tlZFdhbGxldFN1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9ob29rZWQtd2FsbGV0XCIpO1xuY29uc3QgTm9uY2VTdWJwcm92aWRlciA9IHJlcXVpcmUoXCJ3ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvbm9uY2UtdHJhY2tlclwiKTtcbmNvbnN0IFN1YnNjcmlwdGlvbnNTdWJwcm92aWRlciA9IHJlcXVpcmUoXCJ3ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvc3Vic2NyaXB0aW9uc1wiKTtcbmNsYXNzIFdhbGxldENvbm5lY3RQcm92aWRlciBleHRlbmRzIFByb3ZpZGVyRW5naW5lIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHsgcG9sbGluZ0ludGVydmFsOiBvcHRzLnBvbGxpbmdJbnRlcnZhbCB8fCA4MDAwIH0pO1xuICAgICAgICB0aGlzLmJyaWRnZSA9IFwiaHR0cHM6Ly9icmlkZ2Uud2FsbGV0Y29ubmVjdC5vcmdcIjtcbiAgICAgICAgdGhpcy5xcmNvZGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnFyY29kZU1vZGFsID0gUVJDb2RlTW9kYWw7XG4gICAgICAgIHRoaXMucXJjb2RlTW9kYWxPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJwYyA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5mdXJhSWQgPSBcIlwiO1xuICAgICAgICB0aGlzLmh0dHAgPSBudWxsO1xuICAgICAgICB0aGlzLmlzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3RDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdGhpcy5hY2NvdW50cyA9IFtdO1xuICAgICAgICB0aGlzLmNoYWluSWQgPSAxO1xuICAgICAgICB0aGlzLnJwY1VybCA9IFwiXCI7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgd2MgPSBhd2FpdCB0aGlzLmdldFdhbGxldENvbm5lY3RvcigpO1xuICAgICAgICAgICAgaWYgKHdjKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlV2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdjLmFjY291bnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNvbm5lY3QgdG8gV2FsbGVDb25uZWN0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSBhc3luYyAocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChwYXlsb2FkKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZW5kID0gYXN5bmMgKHBheWxvYWQsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBheWxvYWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRob2QgPSBwYXlsb2FkO1xuICAgICAgICAgICAgICAgIGxldCBwYXJhbXMgPSBjYWxsYmFjaztcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSBcInBlcnNvbmFsX3NpZ25cIikge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXJzZVBlcnNvbmFsU2lnbihwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kQXN5bmNQcm9taXNlKG1ldGhvZCwgcGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBheWxvYWQgPSBPYmplY3QuYXNzaWduKHsgaWQ6IHBheWxvYWRJZCgpLCBqc29ucnBjOiBcIjIuMFwiIH0sIHBheWxvYWQpO1xuICAgICAgICAgICAgaWYgKHBheWxvYWQubWV0aG9kID09PSBcInBlcnNvbmFsX3NpZ25cIikge1xuICAgICAgICAgICAgICAgIHBheWxvYWQucGFyYW1zID0gcGFyc2VQZXJzb25hbFNpZ24ocGF5bG9hZC5wYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kQXN5bmMocGF5bG9hZCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRBc3luY1Byb21pc2UocGF5bG9hZC5tZXRob2QsIHBheWxvYWQucGFyYW1zKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkNvbm5lY3QgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50cmlnZ2VyQ29ubmVjdCA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RDYWxsYmFja3MgJiYgdGhpcy5jb25uZWN0Q2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdENhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKHJlc3VsdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmJyaWRnZSA9IG9wdHMuY29ubmVjdG9yXG4gICAgICAgICAgICA/IG9wdHMuY29ubmVjdG9yLmJyaWRnZVxuICAgICAgICAgICAgOiBvcHRzLmJyaWRnZSB8fCBcImh0dHBzOi8vYnJpZGdlLndhbGxldGNvbm5lY3Qub3JnXCI7XG4gICAgICAgIHRoaXMucXJjb2RlID0gdHlwZW9mIG9wdHMucXJjb2RlID09PSBcInVuZGVmaW5lZFwiIHx8IG9wdHMucXJjb2RlICE9PSBmYWxzZTtcbiAgICAgICAgdGhpcy5xcmNvZGVNb2RhbCA9IG9wdHMucXJjb2RlTW9kYWwgfHwgdGhpcy5xcmNvZGVNb2RhbDtcbiAgICAgICAgdGhpcy5xcmNvZGVNb2RhbE9wdGlvbnMgPSBvcHRzLnFyY29kZU1vZGFsT3B0aW9ucztcbiAgICAgICAgdGhpcy53YyA9XG4gICAgICAgICAgICBvcHRzLmNvbm5lY3RvciB8fFxuICAgICAgICAgICAgICAgIG5ldyBXYWxsZXRDb25uZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiB0aGlzLmJyaWRnZSxcbiAgICAgICAgICAgICAgICAgICAgcXJjb2RlTW9kYWw6IHRoaXMucXJjb2RlID8gdGhpcy5xcmNvZGVNb2RhbCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgcXJjb2RlTW9kYWxPcHRpb25zOiB0aGlzLnFyY29kZU1vZGFsT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZUlkOiBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuc3RvcmFnZUlkLFxuICAgICAgICAgICAgICAgICAgICBzaWduaW5nTWV0aG9kczogb3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLnNpZ25pbmdNZXRob2RzLFxuICAgICAgICAgICAgICAgICAgICBjbGllbnRNZXRhOiBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuY2xpZW50TWV0YSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ycGMgPSBvcHRzLnJwYyB8fCBudWxsO1xuICAgICAgICBpZiAoIXRoaXMucnBjICYmXG4gICAgICAgICAgICAoIW9wdHMuaW5mdXJhSWQgfHwgdHlwZW9mIG9wdHMuaW5mdXJhSWQgIT09IFwic3RyaW5nXCIgfHwgIW9wdHMuaW5mdXJhSWQudHJpbSgpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBvbmUgb2YgdGhlIHJlcXVpcmVkIHBhcmFtZXRlcnM6IHJwYyBvciBpbmZ1cmFJZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZnVyYUlkID0gb3B0cy5pbmZ1cmFJZCB8fCBcIlwiO1xuICAgICAgICB0aGlzLmNoYWluSWQgPSAob3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLmNoYWluSWQpIHx8IHRoaXMuY2hhaW5JZDtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuICAgIGdldCBpc1dhbGxldENvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXQgY29ubmVjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53YztcbiAgICB9XG4gICAgZ2V0IHdhbGxldE1ldGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndjLnBlZXJNZXRhO1xuICAgIH1cbiAgICBhc3luYyBkaXNjb25uZWN0KCkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICAgIGFzeW5jIGNsb3NlKCkge1xuICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKHsgZGlzYWJsZVNlc3Npb25DcmVhdGlvbjogdHJ1ZSB9KTtcbiAgICAgICAgYXdhaXQgd2Mua2lsbFNlc3Npb24oKTtcbiAgICAgICAgYXdhaXQgdGhpcy5vbkRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlUmVxdWVzdChwYXlsb2FkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgIHN3aXRjaCAocGF5bG9hZC5tZXRob2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwid2Nfa2lsbFNlc3Npb25cIjpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXRoX2FjY291bnRzXCI6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHdjLmFjY291bnRzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXRoX2NvaW5iYXNlXCI6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHdjLmFjY291bnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXRoX2NoYWluSWRcIjpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gd2MuY2hhaW5JZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm5ldF92ZXJzaW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHdjLmNoYWluSWQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJldGhfdW5pbnN0YWxsRmlsdGVyXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZEFzeW5jKHBheWxvYWQsIChfKSA9PiBfKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmhhbmRsZU90aGVyUmVxdWVzdHMocGF5bG9hZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRSZXNwb25zZShwYXlsb2FkLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlT3RoZXJSZXF1ZXN0cyhwYXlsb2FkKSB7XG4gICAgICAgIGlmICghc2lnbmluZ01ldGhvZHMuaW5jbHVkZXMocGF5bG9hZC5tZXRob2QpICYmIHBheWxvYWQubWV0aG9kLnN0YXJ0c1dpdGgoXCJldGhfXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVSZWFkUmVxdWVzdHMocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd2MgPSBhd2FpdCB0aGlzLmdldFdhbGxldENvbm5lY3RvcigpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3Yy5zZW5kQ3VzdG9tUmVxdWVzdChwYXlsb2FkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0UmVzcG9uc2UocGF5bG9hZCwgcmVzdWx0KTtcbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlUmVhZFJlcXVlc3RzKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmh0dHApIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiSFRUUCBDb25uZWN0aW9uIG5vdCBhdmFpbGFibGVcIik7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnNlbmQocGF5bG9hZCk7XG4gICAgfVxuICAgIGZvcm1hdFJlc3BvbnNlKHBheWxvYWQsIHJlc3VsdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXG4gICAgICAgICAgICBqc29ucnBjOiBwYXlsb2FkLmpzb25ycGMsXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0V2FsbGV0Q29ubmVjdG9yKG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGRpc2FibGVTZXNzaW9uQ3JlYXRpb24gPSBmYWxzZSB9ID0gb3B0cztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHdjID0gdGhpcy53YztcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMub25Db25uZWN0KCh4KSA9PiByZXNvbHZlKHgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF3Yy5jb25uZWN0ZWQgJiYgIWRpc2FibGVTZXNzaW9uQ3JlYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzQ29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2Mub24oXCJtb2RhbF9jbG9zZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVXNlciBjbG9zZWQgbW9kYWxcIikpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHdjLmNyZWF0ZVNlc3Npb24oeyBjaGFpbklkOiB0aGlzLmNoYWluSWQgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB3Yy5vbihcImNvbm5lY3RcIiwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShwYXlsb2FkLnBhcmFtc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJjb25uZWN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyQ29ubmVjdCh3Yyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHdjKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHdjLnNlc3Npb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHdjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHN1YnNjcmliZVdhbGxldENvbm5lY3RvcigpIHtcbiAgICAgICAgY29uc3Qgd2MgPSBhd2FpdCB0aGlzLmdldFdhbGxldENvbm5lY3RvcigpO1xuICAgICAgICB3Yy5vbihcImRpc2Nvbm5lY3RcIiwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB3Yy5vbihcInNlc3Npb25fdXBkYXRlXCIsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUocGF5bG9hZC5wYXJhbXNbMF0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgb25EaXNjb25uZWN0KCkge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5lbWl0KFwiY2xvc2VcIiwgMTAwMCwgXCJDb25uZWN0aW9uIGNsb3NlZFwiKTtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGlzY29ubmVjdFwiLCAxMDAwLCBcIkNvbm5lY3Rpb24gZGlzY29ubmVjdGVkXCIpO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVTdGF0ZShzZXNzaW9uUGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHsgYWNjb3VudHMsIGNoYWluSWQsIG5ldHdvcmtJZCwgcnBjVXJsIH0gPSBzZXNzaW9uUGFyYW1zO1xuICAgICAgICBpZiAoIXRoaXMuYWNjb3VudHMgfHwgKGFjY291bnRzICYmIHRoaXMuYWNjb3VudHMgIT09IGFjY291bnRzKSkge1xuICAgICAgICAgICAgdGhpcy5hY2NvdW50cyA9IGFjY291bnRzO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiYWNjb3VudHNDaGFuZ2VkXCIsIGFjY291bnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuY2hhaW5JZCB8fCAoY2hhaW5JZCAmJiB0aGlzLmNoYWluSWQgIT09IGNoYWluSWQpKSB7XG4gICAgICAgICAgICB0aGlzLmNoYWluSWQgPSBjaGFpbklkO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiY2hhaW5DaGFuZ2VkXCIsIGNoYWluSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5uZXR3b3JrSWQgfHwgKG5ldHdvcmtJZCAmJiB0aGlzLm5ldHdvcmtJZCAhPT0gbmV0d29ya0lkKSkge1xuICAgICAgICAgICAgdGhpcy5uZXR3b3JrSWQgPSBuZXR3b3JrSWQ7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJuZXR3b3JrQ2hhbmdlZFwiLCBuZXR3b3JrSWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlUnBjVXJsKHRoaXMuY2hhaW5JZCwgcnBjVXJsIHx8IFwiXCIpO1xuICAgIH1cbiAgICB1cGRhdGVScGNVcmwoY2hhaW5JZCwgcnBjVXJsID0gXCJcIikge1xuICAgICAgICBjb25zdCBycGMgPSB7IGluZnVyYUlkOiB0aGlzLmluZnVyYUlkLCBjdXN0b206IHRoaXMucnBjIHx8IHVuZGVmaW5lZCB9O1xuICAgICAgICBycGNVcmwgPSBycGNVcmwgfHwgZ2V0UnBjVXJsKGNoYWluSWQsIHJwYyk7XG4gICAgICAgIGlmIChycGNVcmwpIHtcbiAgICAgICAgICAgIHRoaXMucnBjVXJsID0gcnBjVXJsO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVIdHRwQ29ubmVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IEVycm9yKGBObyBSUEMgVXJsIGF2YWlsYWJsZSBmb3IgY2hhaW5JZDogJHtjaGFpbklkfWApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVIdHRwQ29ubmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucnBjVXJsKSB7XG4gICAgICAgICAgICB0aGlzLmh0dHAgPSBuZXcgSHR0cENvbm5lY3Rpb24odGhpcy5ycGNVcmwpO1xuICAgICAgICAgICAgdGhpcy5odHRwLm9uKFwicGF5bG9hZFwiLCBwYXlsb2FkID0+IHRoaXMuZW1pdChcInBheWxvYWRcIiwgcGF5bG9hZCkpO1xuICAgICAgICAgICAgdGhpcy5odHRwLm9uKFwiZXJyb3JcIiwgZXJyb3IgPT4gdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZW5kQXN5bmNQcm9taXNlKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlbmRBc3luYyh7XG4gICAgICAgICAgICAgICAgaWQ6IHBheWxvYWRJZCgpLFxuICAgICAgICAgICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zIHx8IFtdLFxuICAgICAgICAgICAgfSwgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UucmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVScGNVcmwodGhpcy5jaGFpbklkKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgRml4dHVyZVN1YnByb3ZpZGVyKHtcbiAgICAgICAgICAgIGV0aF9oYXNocmF0ZTogXCIweDAwXCIsXG4gICAgICAgICAgICBldGhfbWluaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGV0aF9zeW5jaW5nOiB0cnVlLFxuICAgICAgICAgICAgbmV0X2xpc3RlbmluZzogdHJ1ZSxcbiAgICAgICAgICAgIHdlYjNfY2xpZW50VmVyc2lvbjogYFdhbGxldENvbm5lY3QvdjEueC54L2phdmFzY3JpcHRgLFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuYWRkUHJvdmlkZXIobmV3IENhY2hlU3VicHJvdmlkZXIoKSk7XG4gICAgICAgIHRoaXMuYWRkUHJvdmlkZXIobmV3IFN1YnNjcmlwdGlvbnNTdWJwcm92aWRlcigpKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgRmlsdGVyU3VicHJvdmlkZXIoKSk7XG4gICAgICAgIHRoaXMuYWRkUHJvdmlkZXIobmV3IE5vbmNlU3VicHJvdmlkZXIoKSk7XG4gICAgICAgIHRoaXMuYWRkUHJvdmlkZXIobmV3IEhvb2tlZFdhbGxldFN1YnByb3ZpZGVyKHRoaXMuY29uZmlnV2FsbGV0KCkpKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcih7XG4gICAgICAgICAgICBoYW5kbGVSZXF1ZXN0OiBhc3luYyAocGF5bG9hZCwgbmV4dCwgZW5kKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBlcnJvciwgcmVzdWx0IH0gPSBhd2FpdCB0aGlzLmhhbmRsZVJlcXVlc3QocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZChlcnJvciwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZChlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEVuZ2luZTogKF8pID0+IF8sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25maWdXYWxsZXQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRBY2NvdW50czogYXN5bmMgKGNiKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2MgPSBhd2FpdCB0aGlzLmdldFdhbGxldENvbm5lY3RvcigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IHdjLmFjY291bnRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWNjb3VudHMgJiYgYWNjb3VudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBhY2NvdW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGFjY291bnRzXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzTWVzc2FnZTogYXN5bmMgKG1zZ1BhcmFtcywgY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNpZ25NZXNzYWdlKFttc2dQYXJhbXMuZnJvbSwgbXNnUGFyYW1zLmRhdGFdKTtcbiAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvY2Vzc1BlcnNvbmFsTWVzc2FnZTogYXN5bmMgKG1zZ1BhcmFtcywgY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNpZ25QZXJzb25hbE1lc3NhZ2UoW21zZ1BhcmFtcy5kYXRhLCBtc2dQYXJhbXMuZnJvbV0pO1xuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzU2lnblRyYW5zYWN0aW9uOiBhc3luYyAodHhQYXJhbXMsIGNiKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2MgPSBhd2FpdCB0aGlzLmdldFdhbGxldENvbm5lY3RvcigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3Yy5zaWduVHJhbnNhY3Rpb24odHhQYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzVHJhbnNhY3Rpb246IGFzeW5jICh0eFBhcmFtcywgY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNlbmRUcmFuc2FjdGlvbih0eFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjYihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3NUeXBlZE1lc3NhZ2U6IGFzeW5jIChtc2dQYXJhbXMsIGNiKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2MgPSBhd2FpdCB0aGlzLmdldFdhbGxldENvbm5lY3RvcigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3Yy5zaWduVHlwZWREYXRhKFttc2dQYXJhbXMuZnJvbSwgbXNnUGFyYW1zLmRhdGFdKTtcbiAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFdhbGxldENvbm5lY3RQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgV2FsbGV0Q29ubmVjdFByb3ZpZGVyIGZyb20gXCJAd2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyXCI7XG5leHBvcnQgdmFyIGdldFdhbGxldENvbm5lY3RQcm92aWRlckluc3RhbmNlID0gZnVuY3Rpb24gKGNoZWNrQ29ubmVjdGlvbk9ubHkpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICByZXR1cm4gWzIsIG5ldyBXYWxsZXRDb25uZWN0UHJvdmlkZXIoeyBpbmZ1cmFJZDogXCI3NzUzZmE3Yjc5ZDI0NjlmOTdjMTU2NzgwZmNlMzdhY1wiLCBxcmNvZGU6ICFjaGVja0Nvbm5lY3Rpb25Pbmx5IH0pXTtcbiAgICB9KTtcbn0pOyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V2FsbGV0Q29ubmVjdFByb3ZpZGVyLmpzLm1hcCIsInZhciBfX3NwcmVhZEFycmF5cyA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMpIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgICAgcltrXSA9IGFbal07XG4gICAgcmV0dXJuIHI7XG59O1xudmFyIEJyb3dzZXJJbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJJbmZvKG5hbWUsIHZlcnNpb24sIG9zKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMub3MgPSBvcztcbiAgICAgICAgdGhpcy50eXBlID0gJ2Jyb3dzZXInO1xuICAgIH1cbiAgICByZXR1cm4gQnJvd3NlckluZm87XG59KCkpO1xuZXhwb3J0IHsgQnJvd3NlckluZm8gfTtcbnZhciBOb2RlSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb2RlSW5mbyh2ZXJzaW9uKSB7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMudHlwZSA9ICdub2RlJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ25vZGUnO1xuICAgICAgICB0aGlzLm9zID0gcHJvY2Vzcy5wbGF0Zm9ybTtcbiAgICB9XG4gICAgcmV0dXJuIE5vZGVJbmZvO1xufSgpKTtcbmV4cG9ydCB7IE5vZGVJbmZvIH07XG52YXIgU2VhcmNoQm90RGV2aWNlSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZWFyY2hCb3REZXZpY2VJbmZvKG5hbWUsIHZlcnNpb24sIG9zLCBib3QpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5vcyA9IG9zO1xuICAgICAgICB0aGlzLmJvdCA9IGJvdDtcbiAgICAgICAgdGhpcy50eXBlID0gJ2JvdC1kZXZpY2UnO1xuICAgIH1cbiAgICByZXR1cm4gU2VhcmNoQm90RGV2aWNlSW5mbztcbn0oKSk7XG5leHBvcnQgeyBTZWFyY2hCb3REZXZpY2VJbmZvIH07XG52YXIgQm90SW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCb3RJbmZvKCkge1xuICAgICAgICB0aGlzLnR5cGUgPSAnYm90JztcbiAgICAgICAgdGhpcy5ib3QgPSB0cnVlOyAvLyBOT1RFOiBkZXByZWNhdGVkIHRlc3QgbmFtZSBpbnN0ZWFkXG4gICAgICAgIHRoaXMubmFtZSA9ICdib3QnO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9zID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEJvdEluZm87XG59KCkpO1xuZXhwb3J0IHsgQm90SW5mbyB9O1xudmFyIFJlYWN0TmF0aXZlSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWFjdE5hdGl2ZUluZm8oKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdyZWFjdC1uYXRpdmUnO1xuICAgICAgICB0aGlzLm5hbWUgPSAncmVhY3QtbmF0aXZlJztcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcyA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdE5hdGl2ZUluZm87XG59KCkpO1xuZXhwb3J0IHsgUmVhY3ROYXRpdmVJbmZvIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG52YXIgU0VBUkNIQk9YX1VBX1JFR0VYID0gL2FsZXhhfGJvdHxjcmF3bChlcnxpbmcpfGZhY2Vib29rZXh0ZXJuYWxoaXR8ZmVlZGJ1cm5lcnxnb29nbGUgd2ViIHByZXZpZXd8bmFnaW9zfHBvc3RyYW5rfHBpbmdkb218c2x1cnB8c3BpZGVyfHlhaG9vIXx5YW5kZXgvO1xudmFyIFNFQVJDSEJPVF9PU19SRUdFWCA9IC8obnVoa3xHb29nbGVib3R8WWFtbXlib3R8T3BlbmJvdHxTbHVycHxNU05Cb3R8QXNrXFwgSmVldmVzXFwvVGVvbWF8aWFfYXJjaGl2ZXIpLztcbnZhciBSRVFVSVJFRF9WRVJTSU9OX1BBUlRTID0gMztcbnZhciB1c2VyQWdlbnRSdWxlcyA9IFtcbiAgICBbJ2FvbCcsIC9BT0xTaGllbGRcXC8oWzAtOVxcLl9dKykvXSxcbiAgICBbJ2VkZ2UnLCAvRWRnZVxcLyhbMC05XFwuX10rKS9dLFxuICAgIFsnZWRnZS1pb3MnLCAvRWRnaU9TXFwvKFswLTlcXC5fXSspL10sXG4gICAgWyd5YW5kZXhicm93c2VyJywgL1lhQnJvd3NlclxcLyhbMC05XFwuX10rKS9dLFxuICAgIFsna2FrYW90YWxrJywgL0tBS0FPVEFMS1xccyhbMC05XFwuXSspL10sXG4gICAgWydzYW1zdW5nJywgL1NhbXN1bmdCcm93c2VyXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ3NpbGsnLCAvXFxiU2lsa1xcLyhbMC05Ll8tXSspXFxiL10sXG4gICAgWydtaXVpJywgL01pdWlCcm93c2VyXFwvKFswLTlcXC5dKykkL10sXG4gICAgWydiZWFrZXInLCAvQmVha2VyQnJvd3NlclxcLyhbMC05XFwuXSspL10sXG4gICAgWydlZGdlLWNocm9taXVtJywgL0VkZ0E/XFwvKFswLTlcXC5dKykvXSxcbiAgICBbXG4gICAgICAgICdjaHJvbWl1bS13ZWJ2aWV3JyxcbiAgICAgICAgLyg/IUNocm9tLipPUFIpd3ZcXCkuKkNocm9tKD86ZXxpdW0pXFwvKFswLTlcXC5dKykoOj9cXHN8JCkvLFxuICAgIF0sXG4gICAgWydjaHJvbWUnLCAvKD8hQ2hyb20uKk9QUilDaHJvbSg/OmV8aXVtKVxcLyhbMC05XFwuXSspKDo/XFxzfCQpL10sXG4gICAgWydwaGFudG9tanMnLCAvUGhhbnRvbUpTXFwvKFswLTlcXC5dKykoOj9cXHN8JCkvXSxcbiAgICBbJ2NyaW9zJywgL0NyaU9TXFwvKFswLTlcXC5dKykoOj9cXHN8JCkvXSxcbiAgICBbJ2ZpcmVmb3gnLCAvRmlyZWZveFxcLyhbMC05XFwuXSspKD86XFxzfCQpL10sXG4gICAgWydmeGlvcycsIC9GeGlPU1xcLyhbMC05XFwuXSspL10sXG4gICAgWydvcGVyYS1taW5pJywgL09wZXJhIE1pbmkuKlZlcnNpb25cXC8oWzAtOVxcLl0rKS9dLFxuICAgIFsnb3BlcmEnLCAvT3BlcmFcXC8oWzAtOVxcLl0rKSg/Olxcc3wkKS9dLFxuICAgIFsnb3BlcmEnLCAvT1BSXFwvKFswLTlcXC5dKykoOj9cXHN8JCkvXSxcbiAgICBbJ2llJywgL1RyaWRlbnRcXC83XFwuMC4qcnZcXDooWzAtOVxcLl0rKS4qXFwpLipHZWNrbyQvXSxcbiAgICBbJ2llJywgL01TSUVcXHMoWzAtOVxcLl0rKTsuKlRyaWRlbnRcXC9bNC03XS4wL10sXG4gICAgWydpZScsIC9NU0lFXFxzKDdcXC4wKS9dLFxuICAgIFsnYmIxMCcsIC9CQjEwO1xcc1RvdWNoLipWZXJzaW9uXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ2FuZHJvaWQnLCAvQW5kcm9pZFxccyhbMC05XFwuXSspL10sXG4gICAgWydpb3MnLCAvVmVyc2lvblxcLyhbMC05XFwuX10rKS4qTW9iaWxlLipTYWZhcmkuKi9dLFxuICAgIFsnc2FmYXJpJywgL1ZlcnNpb25cXC8oWzAtOVxcLl9dKykuKlNhZmFyaS9dLFxuICAgIFsnZmFjZWJvb2snLCAvRkJBVlxcLyhbMC05XFwuXSspL10sXG4gICAgWydpbnN0YWdyYW0nLCAvSW5zdGFncmFtXFxzKFswLTlcXC5dKykvXSxcbiAgICBbJ2lvcy13ZWJ2aWV3JywgL0FwcGxlV2ViS2l0XFwvKFswLTlcXC5dKykuKk1vYmlsZS9dLFxuICAgIFsnaW9zLXdlYnZpZXcnLCAvQXBwbGVXZWJLaXRcXC8oWzAtOVxcLl0rKS4qR2Vja29cXCkkL10sXG4gICAgWydzZWFyY2hib3QnLCBTRUFSQ0hCT1hfVUFfUkVHRVhdLFxuXTtcbnZhciBvcGVyYXRpbmdTeXN0ZW1SdWxlcyA9IFtcbiAgICBbJ2lPUycsIC9pUChob25lfG9kfGFkKS9dLFxuICAgIFsnQW5kcm9pZCBPUycsIC9BbmRyb2lkL10sXG4gICAgWydCbGFja0JlcnJ5IE9TJywgL0JsYWNrQmVycnl8QkIxMC9dLFxuICAgIFsnV2luZG93cyBNb2JpbGUnLCAvSUVNb2JpbGUvXSxcbiAgICBbJ0FtYXpvbiBPUycsIC9LaW5kbGUvXSxcbiAgICBbJ1dpbmRvd3MgMy4xMScsIC9XaW4xNi9dLFxuICAgIFsnV2luZG93cyA5NScsIC8oV2luZG93cyA5NSl8KFdpbjk1KXwoV2luZG93c185NSkvXSxcbiAgICBbJ1dpbmRvd3MgOTgnLCAvKFdpbmRvd3MgOTgpfChXaW45OCkvXSxcbiAgICBbJ1dpbmRvd3MgMjAwMCcsIC8oV2luZG93cyBOVCA1LjApfChXaW5kb3dzIDIwMDApL10sXG4gICAgWydXaW5kb3dzIFhQJywgLyhXaW5kb3dzIE5UIDUuMSl8KFdpbmRvd3MgWFApL10sXG4gICAgWydXaW5kb3dzIFNlcnZlciAyMDAzJywgLyhXaW5kb3dzIE5UIDUuMikvXSxcbiAgICBbJ1dpbmRvd3MgVmlzdGEnLCAvKFdpbmRvd3MgTlQgNi4wKS9dLFxuICAgIFsnV2luZG93cyA3JywgLyhXaW5kb3dzIE5UIDYuMSkvXSxcbiAgICBbJ1dpbmRvd3MgOCcsIC8oV2luZG93cyBOVCA2LjIpL10sXG4gICAgWydXaW5kb3dzIDguMScsIC8oV2luZG93cyBOVCA2LjMpL10sXG4gICAgWydXaW5kb3dzIDEwJywgLyhXaW5kb3dzIE5UIDEwLjApL10sXG4gICAgWydXaW5kb3dzIE1FJywgL1dpbmRvd3MgTUUvXSxcbiAgICBbJ09wZW4gQlNEJywgL09wZW5CU0QvXSxcbiAgICBbJ1N1biBPUycsIC9TdW5PUy9dLFxuICAgIFsnQ2hyb21lIE9TJywgL0NyT1MvXSxcbiAgICBbJ0xpbnV4JywgLyhMaW51eCl8KFgxMSkvXSxcbiAgICBbJ01hYyBPUycsIC8oTWFjX1Bvd2VyUEMpfChNYWNpbnRvc2gpL10sXG4gICAgWydRTlgnLCAvUU5YL10sXG4gICAgWydCZU9TJywgL0JlT1MvXSxcbiAgICBbJ09TLzInLCAvT1NcXC8yL10sXG5dO1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdCh1c2VyQWdlbnQpIHtcbiAgICBpZiAoISF1c2VyQWdlbnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlVXNlckFnZW50KHVzZXJBZ2VudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVhY3ROYXRpdmVJbmZvKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gcGFyc2VVc2VyQWdlbnQobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgfVxuICAgIHJldHVybiBnZXROb2RlVmVyc2lvbigpO1xufVxuZnVuY3Rpb24gbWF0Y2hVc2VyQWdlbnQodWEpIHtcbiAgICAvLyBvcHRlZCBmb3IgdXNpbmcgcmVkdWNlIGhlcmUgcmF0aGVyIHRoYW4gQXJyYXkjZmlyc3Qgd2l0aCBhIHJlZ2V4LnRlc3QgY2FsbFxuICAgIC8vIHRoaXMgaXMgcHJpbWFyaWx5IGJlY2F1c2UgdXNpbmcgdGhlIHJlZHVjZSB3ZSBvbmx5IHBlcmZvcm0gdGhlIHJlZ2V4XG4gICAgLy8gZXhlY3V0aW9uIG9uY2UgcmF0aGVyIHRoYW4gb25jZSBmb3IgdGhlIHRlc3QgYW5kIGZvciB0aGUgZXhlYyBhZ2FpbiBiZWxvd1xuICAgIC8vIHByb2JhYmx5IHNvbWV0aGluZyB0aGF0IG5lZWRzIHRvIGJlIGJlbmNobWFya2VkIHRob3VnaFxuICAgIHJldHVybiAodWEgIT09ICcnICYmXG4gICAgICAgIHVzZXJBZ2VudFJ1bGVzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgX2EpIHtcbiAgICAgICAgICAgIHZhciBicm93c2VyID0gX2FbMF0sIHJlZ2V4ID0gX2FbMV07XG4gICAgICAgICAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVhTWF0Y2ggPSByZWdleC5leGVjKHVhKTtcbiAgICAgICAgICAgIHJldHVybiAhIXVhTWF0Y2ggJiYgW2Jyb3dzZXIsIHVhTWF0Y2hdO1xuICAgICAgICB9LCBmYWxzZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJyb3dzZXJOYW1lKHVhKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaFVzZXJBZ2VudCh1YSk7XG4gICAgcmV0dXJuIGRhdGEgPyBkYXRhWzBdIDogbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVzZXJBZ2VudCh1YSkge1xuICAgIHZhciBtYXRjaGVkUnVsZSA9IG1hdGNoVXNlckFnZW50KHVhKTtcbiAgICBpZiAoIW1hdGNoZWRSdWxlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IG1hdGNoZWRSdWxlWzBdLCBtYXRjaCA9IG1hdGNoZWRSdWxlWzFdO1xuICAgIGlmIChuYW1lID09PSAnc2VhcmNoYm90Jykge1xuICAgICAgICByZXR1cm4gbmV3IEJvdEluZm8oKTtcbiAgICB9XG4gICAgdmFyIHZlcnNpb25QYXJ0cyA9IG1hdGNoWzFdICYmIG1hdGNoWzFdLnNwbGl0KC9bLl9dLykuc2xpY2UoMCwgMyk7XG4gICAgaWYgKHZlcnNpb25QYXJ0cykge1xuICAgICAgICBpZiAodmVyc2lvblBhcnRzLmxlbmd0aCA8IFJFUVVJUkVEX1ZFUlNJT05fUEFSVFMpIHtcbiAgICAgICAgICAgIHZlcnNpb25QYXJ0cyA9IF9fc3ByZWFkQXJyYXlzKHZlcnNpb25QYXJ0cywgY3JlYXRlVmVyc2lvblBhcnRzKFJFUVVJUkVEX1ZFUlNJT05fUEFSVFMgLSB2ZXJzaW9uUGFydHMubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZlcnNpb25QYXJ0cyA9IFtdO1xuICAgIH1cbiAgICB2YXIgdmVyc2lvbiA9IHZlcnNpb25QYXJ0cy5qb2luKCcuJyk7XG4gICAgdmFyIG9zID0gZGV0ZWN0T1ModWEpO1xuICAgIHZhciBzZWFyY2hCb3RNYXRjaCA9IFNFQVJDSEJPVF9PU19SRUdFWC5leGVjKHVhKTtcbiAgICBpZiAoc2VhcmNoQm90TWF0Y2ggJiYgc2VhcmNoQm90TWF0Y2hbMV0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZWFyY2hCb3REZXZpY2VJbmZvKG5hbWUsIHZlcnNpb24sIG9zLCBzZWFyY2hCb3RNYXRjaFsxXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQnJvd3NlckluZm8obmFtZSwgdmVyc2lvbiwgb3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdE9TKHVhKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwLCBjb3VudCA9IG9wZXJhdGluZ1N5c3RlbVJ1bGVzLmxlbmd0aDsgaWkgPCBjb3VudDsgaWkrKykge1xuICAgICAgICB2YXIgX2EgPSBvcGVyYXRpbmdTeXN0ZW1SdWxlc1tpaV0sIG9zID0gX2FbMF0sIHJlZ2V4ID0gX2FbMV07XG4gICAgICAgIHZhciBtYXRjaCA9IHJlZ2V4LmV4ZWModWEpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBvcztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROb2RlVmVyc2lvbigpIHtcbiAgICB2YXIgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbjtcbiAgICByZXR1cm4gaXNOb2RlID8gbmV3IE5vZGVJbmZvKHByb2Nlc3MudmVyc2lvbi5zbGljZSgxKSkgOiBudWxsO1xufVxuZnVuY3Rpb24gY3JlYXRlVmVyc2lvblBhcnRzKGNvdW50KSB7XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBjb3VudDsgaWkrKykge1xuICAgICAgICBvdXRwdXQucHVzaCgnMCcpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuIiwiaW1wb3J0ICogYXMgd2luZG93TWV0YWRhdGEgZnJvbSBcIkB3YWxsZXRjb25uZWN0L3dpbmRvdy1tZXRhZGF0YVwiO1xuaW1wb3J0ICogYXMgd2luZG93R2V0dGVycyBmcm9tIFwiQHdhbGxldGNvbm5lY3Qvd2luZG93LWdldHRlcnNcIjtcbmltcG9ydCB7IGRldGVjdCwgfSBmcm9tIFwiZGV0ZWN0LWJyb3dzZXJcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RFbnYodXNlckFnZW50KSB7XG4gICAgcmV0dXJuIGRldGVjdCh1c2VyQWdlbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdE9TKCkge1xuICAgIGNvbnN0IGVudiA9IGRldGVjdEVudigpO1xuICAgIHJldHVybiBlbnYgJiYgZW52Lm9zID8gZW52Lm9zIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQW5kcm9pZCgpIHtcbiAgICBjb25zdCBvcyA9IGRldGVjdE9TKCk7XG4gICAgcmV0dXJuIG9zID8gb3MudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImFuZHJvaWRcIikgOiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0lPUygpIHtcbiAgICBjb25zdCBvcyA9IGRldGVjdE9TKCk7XG4gICAgcmV0dXJuIG9zXG4gICAgICAgID8gb3MudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImlvc1wiKSB8fFxuICAgICAgICAgICAgKG9zLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJtYWNcIikgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSlcbiAgICAgICAgOiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc01vYmlsZSgpIHtcbiAgICBjb25zdCBvcyA9IGRldGVjdE9TKCk7XG4gICAgcmV0dXJuIG9zID8gaXNBbmRyb2lkKCkgfHwgaXNJT1MoKSA6IGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZSgpIHtcbiAgICBjb25zdCBlbnYgPSBkZXRlY3RFbnYoKTtcbiAgICBjb25zdCByZXN1bHQgPSBlbnYgJiYgZW52Lm5hbWUgPyBlbnYubmFtZS50b0xvd2VyQ2FzZSgpID09PSBcIm5vZGVcIiA6IGZhbHNlO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCcm93c2VyKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9ICFpc05vZGUoKSAmJiAhIWdldE5hdmlnYXRvcigpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgY29uc3QgZ2V0RnJvbVdpbmRvdyA9IHdpbmRvd0dldHRlcnMuZ2V0RnJvbVdpbmRvdztcbmV4cG9ydCBjb25zdCBnZXRGcm9tV2luZG93T3JUaHJvdyA9IHdpbmRvd0dldHRlcnMuZ2V0RnJvbVdpbmRvd09yVGhyb3c7XG5leHBvcnQgY29uc3QgZ2V0RG9jdW1lbnRPclRocm93ID0gd2luZG93R2V0dGVycy5nZXREb2N1bWVudE9yVGhyb3c7XG5leHBvcnQgY29uc3QgZ2V0RG9jdW1lbnQgPSB3aW5kb3dHZXR0ZXJzLmdldERvY3VtZW50O1xuZXhwb3J0IGNvbnN0IGdldE5hdmlnYXRvck9yVGhyb3cgPSB3aW5kb3dHZXR0ZXJzLmdldE5hdmlnYXRvck9yVGhyb3c7XG5leHBvcnQgY29uc3QgZ2V0TmF2aWdhdG9yID0gd2luZG93R2V0dGVycy5nZXROYXZpZ2F0b3I7XG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb25PclRocm93ID0gd2luZG93R2V0dGVycy5nZXRMb2NhdGlvbk9yVGhyb3c7XG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb24gPSB3aW5kb3dHZXR0ZXJzLmdldExvY2F0aW9uO1xuZXhwb3J0IGNvbnN0IGdldENyeXB0b09yVGhyb3cgPSB3aW5kb3dHZXR0ZXJzLmdldENyeXB0b09yVGhyb3c7XG5leHBvcnQgY29uc3QgZ2V0Q3J5cHRvID0gd2luZG93R2V0dGVycy5nZXRDcnlwdG87XG5leHBvcnQgY29uc3QgZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IHdpbmRvd0dldHRlcnMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdztcbmV4cG9ydCBjb25zdCBnZXRMb2NhbFN0b3JhZ2UgPSB3aW5kb3dHZXR0ZXJzLmdldExvY2FsU3RvcmFnZTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGllbnRNZXRhKCkge1xuICAgIHJldHVybiB3aW5kb3dNZXRhZGF0YS5nZXRXaW5kb3dNZXRhZGF0YSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyBzYWZlSnNvbiBmcm9tIFwiQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uXCI7XG5leHBvcnQgY29uc3Qgc2FmZUpzb25QYXJzZSA9IHNhZmVKc29uLnNhZmVKc29uUGFyc2U7XG5leHBvcnQgY29uc3Qgc2FmZUpzb25TdHJpbmdpZnkgPSBzYWZlSnNvbi5zYWZlSnNvblN0cmluZ2lmeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzb24uanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHNhZmVKc29uUGFyc2UodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNhZmUganNvbiBwYXJzZSB2YWx1ZSBvZiB0eXBlICR7dHlwZW9mIHZhbHVlfWApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKc29uU3RyaW5naWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgc2FmZUpzb25QYXJzZSwgc2FmZUpzb25TdHJpbmdpZnkgfSBmcm9tIFwiLi9qc29uXCI7XG5pbXBvcnQgeyBnZXRMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiLi9icm93c2VyXCI7XG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWwoa2V5LCBkYXRhKSB7XG4gICAgY29uc3QgcmF3ID0gc2FmZUpzb25TdHJpbmdpZnkoZGF0YSk7XG4gICAgY29uc3QgbG9jYWwgPSBnZXRMb2NhbFN0b3JhZ2UoKTtcbiAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgbG9jYWwuc2V0SXRlbShrZXksIHJhdyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2FsKGtleSkge1xuICAgIGxldCBkYXRhID0gbnVsbDtcbiAgICBsZXQgcmF3ID0gbnVsbDtcbiAgICBjb25zdCBsb2NhbCA9IGdldExvY2FsU3RvcmFnZSgpO1xuICAgIGlmIChsb2NhbCkge1xuICAgICAgICByYXcgPSBsb2NhbC5nZXRJdGVtKGtleSk7XG4gICAgfVxuICAgIGRhdGEgPSByYXcgPyBzYWZlSnNvblBhcnNlKHJhdykgOiByYXc7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTG9jYWwoa2V5KSB7XG4gICAgY29uc3QgbG9jYWwgPSBnZXRMb2NhbFN0b3JhZ2UoKTtcbiAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgbG9jYWwucmVtb3ZlSXRlbShrZXkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsLmpzLm1hcCIsImltcG9ydCB7IHNldExvY2FsIH0gZnJvbSBcIi4vbG9jYWxcIjtcbmV4cG9ydCBjb25zdCBtb2JpbGVMaW5rQ2hvaWNlS2V5ID0gXCJXQUxMRVRDT05ORUNUX0RFRVBMSU5LX0NIT0lDRVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdElPU01vYmlsZSh1cmksIGVudHJ5KSB7XG4gICAgY29uc3QgZW5jb2RlZFVyaSA9IGVuY29kZVVSSUNvbXBvbmVudCh1cmkpO1xuICAgIHJldHVybiBlbnRyeS51bml2ZXJzYWxMaW5rXG4gICAgICAgID8gYCR7ZW50cnkudW5pdmVyc2FsTGlua30vd2M/dXJpPSR7ZW5jb2RlZFVyaX1gXG4gICAgICAgIDogZW50cnkuZGVlcExpbmtcbiAgICAgICAgICAgID8gYCR7ZW50cnkuZGVlcExpbmt9JHtlbnRyeS5kZWVwTGluay5lbmRzV2l0aChcIjpcIikgPyBcIi8vXCIgOiBcIi9cIn13Yz91cmk9JHtlbmNvZGVkVXJpfWBcbiAgICAgICAgICAgIDogXCJcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzYXZlTW9iaWxlTGlua0luZm8oZGF0YSkge1xuICAgIGNvbnN0IGZvY3VzVXJpID0gZGF0YS5ocmVmLnNwbGl0KFwiP1wiKVswXTtcbiAgICBzZXRMb2NhbChtb2JpbGVMaW5rQ2hvaWNlS2V5LCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRhdGEpLCB7IGhyZWY6IGZvY3VzVXJpIH0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2JpbGVSZWdpc3RyeUVudHJ5KHJlZ2lzdHJ5LCBuYW1lKSB7XG4gICAgcmV0dXJuIHJlZ2lzdHJ5LmZpbHRlcigoZW50cnkpID0+IGVudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhuYW1lLnRvTG93ZXJDYXNlKCkpKVswXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2JpbGVMaW5rUmVnaXN0cnkocmVnaXN0cnksIHdoaXRlbGlzdCkge1xuICAgIGxldCBsaW5rcyA9IHJlZ2lzdHJ5O1xuICAgIGlmICh3aGl0ZWxpc3QpIHtcbiAgICAgICAgbGlua3MgPSB3aGl0ZWxpc3QubWFwKChuYW1lKSA9PiBnZXRNb2JpbGVSZWdpc3RyeUVudHJ5KHJlZ2lzdHJ5LCBuYW1lKSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgIH1cbiAgICByZXR1cm4gbGlua3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2JpbGUuanMubWFwIiwiY29uc3QgQVBJX1VSTCA9IFwiaHR0cHM6Ly9yZWdpc3RyeS53YWxsZXRjb25uZWN0LmNvbVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdhbGxldFJlZ2lzdHJ5VXJsKCkge1xuICAgIHJldHVybiBBUElfVVJMICsgXCIvYXBpL3YyL3dhbGxldHNcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXBwUmVnaXN0cnlVcmwoKSB7XG4gICAgcmV0dXJuIEFQSV9VUkwgKyBcIi9hcGkvdjIvZGFwcHNcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRNb2JpbGVSZWdpc3RyeUVudHJ5KGVudHJ5LCBwbGF0Zm9ybSA9IFwibW9iaWxlXCIpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogZW50cnkubmFtZSB8fCBcIlwiLFxuICAgICAgICBzaG9ydE5hbWU6IGVudHJ5Lm1ldGFkYXRhLnNob3J0TmFtZSB8fCBcIlwiLFxuICAgICAgICBjb2xvcjogZW50cnkubWV0YWRhdGEuY29sb3JzLnByaW1hcnkgfHwgXCJcIixcbiAgICAgICAgbG9nbzogKF9hID0gZW50cnkuaW1hZ2VfdXJsLnNtKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiLFxuICAgICAgICB1bml2ZXJzYWxMaW5rOiBlbnRyeVtwbGF0Zm9ybV0udW5pdmVyc2FsIHx8IFwiXCIsXG4gICAgICAgIGRlZXBMaW5rOiBlbnRyeVtwbGF0Zm9ybV0ubmF0aXZlIHx8IFwiXCIsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRNb2JpbGVSZWdpc3RyeShyZWdpc3RyeSwgcGxhdGZvcm0gPSBcIm1vYmlsZVwiKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVnaXN0cnkpXG4gICAgICAgIC5maWx0ZXIoZW50cnkgPT4gISFlbnRyeVtwbGF0Zm9ybV0udW5pdmVyc2FsIHx8ICEhZW50cnlbcGxhdGZvcm1dLm5hdGl2ZSlcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IGZvcm1hdE1vYmlsZVJlZ2lzdHJ5RW50cnkoZW50cnksIHBsYXRmb3JtKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWdpc3RyeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlID0gZXhwb3J0cy5nZXRTdWJ0bGVDcnlwdG8gPSBleHBvcnRzLmdldEJyb3dlckNyeXB0byA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldEJyb3dlckNyeXB0bygpIHtcbiAgICByZXR1cm4gKGdsb2JhbCA9PT0gbnVsbCB8fCBnbG9iYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdsb2JhbC5jcnlwdG8pIHx8IChnbG9iYWwgPT09IG51bGwgfHwgZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWwubXNDcnlwdG8pIHx8IHt9O1xufVxuZXhwb3J0cy5nZXRCcm93ZXJDcnlwdG8gPSBnZXRCcm93ZXJDcnlwdG87XG5mdW5jdGlvbiBnZXRTdWJ0bGVDcnlwdG8oKSB7XG4gICAgY29uc3QgYnJvd3NlckNyeXB0byA9IGdldEJyb3dlckNyeXB0bygpO1xuICAgIHJldHVybiBicm93c2VyQ3J5cHRvLnN1YnRsZSB8fCBicm93c2VyQ3J5cHRvLndlYmtpdFN1YnRsZTtcbn1cbmV4cG9ydHMuZ2V0U3VidGxlQ3J5cHRvID0gZ2V0U3VidGxlQ3J5cHRvO1xuZnVuY3Rpb24gaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiAhIWdldEJyb3dlckNyeXB0bygpICYmICEhZ2V0U3VidGxlQ3J5cHRvKCk7XG59XG5leHBvcnRzLmlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSA9IGlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0by5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNCcm93c2VyID0gZXhwb3J0cy5pc05vZGUgPSBleHBvcnRzLmlzUmVhY3ROYXRpdmUgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xuICAgIHJldHVybiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwiUmVhY3ROYXRpdmVcIik7XG59XG5leHBvcnRzLmlzUmVhY3ROYXRpdmUgPSBpc1JlYWN0TmF0aXZlO1xuZnVuY3Rpb24gaXNOb2RlKCkge1xuICAgIHJldHVybiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gXCJ1bmRlZmluZWRcIik7XG59XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTtcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gIWlzUmVhY3ROYXRpdmUoKSAmJiAhaXNOb2RlKCk7XG59XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3Nlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jcnlwdG9cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudlwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIGJyb3dzZXJVdGlscyA9IHJlcXVpcmUoJ0B3YWxsZXRjb25uZWN0L2Jyb3dzZXItdXRpbHMnKTtcbnZhciBRUkNvZGUgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgncXJjb2RlJykpO1xudmFyIGNvcHkgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnY29weS10by1jbGlwYm9hcmQnKSk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdwcmVhY3QvY29tcGF0Jyk7XG5cbmZ1bmN0aW9uIG9wZW4odXJpKSB7XG4gIFFSQ29kZS50b1N0cmluZyh1cmksIHtcbiAgICB0eXBlOiBcInRlcm1pbmFsXCJcbiAgfSkudGhlbihjb25zb2xlLmxvZyk7XG59XG5cbnZhciBXQUxMRVRDT05ORUNUX1NUWUxFX1NIRUVUID0gXCI6cm9vdCB7XFxuICAtLWFuaW1hdGlvbi1kdXJhdGlvbjogMzAwbXM7XFxufVxcblxcbkBrZXlmcmFtZXMgZmFkZUluIHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgfVxcbiAgdG8ge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgfVxcbn1cXG5cXG5Aa2V5ZnJhbWVzIGZhZGVPdXQge1xcbiAgZnJvbSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICB9XFxuICB0byB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxufVxcblxcbi5hbmltYXRlZCB7XFxuICBhbmltYXRpb24tZHVyYXRpb246IHZhcigtLWFuaW1hdGlvbi1kdXJhdGlvbik7XFxuICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoO1xcbn1cXG5cXG4uZmFkZUluIHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW47XFxufVxcblxcbi5mYWRlT3V0IHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0O1xcbn1cXG5cXG4jd2FsbGV0Y29ubmVjdC13cmFwcGVyIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbGVmdDogMDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIHotaW5kZXg6IDk5OTk5OTk5OTk5OTk5O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9faGVhZGVyTG9nbyB7XFxuICBoZWlnaHQ6IDIxcHg7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19oZWFkZXIgcCB7XFxuICBjb2xvcjogI2ZmZmZmZjtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBtYXJnaW46IDA7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4OiAxO1xcbiAgbWFyZ2luLWxlZnQ6IDVweDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Nsb3NlX193cmFwcGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIHotaW5kZXg6IDEwMDAwO1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxuICBib3JkZXItcmFkaXVzOiAyNnB4O1xcbiAgcGFkZGluZzogNnB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHdpZHRoOiAyNnB4O1xcbiAgaGVpZ2h0OiAyNnB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX2ljb24ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiA3cHg7XFxuICByaWdodDogMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19jbG9zZV9fbGluZTEge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2IoNDgsIDUyLCA1OSk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19jbG9zZV9fbGluZTIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2IoNDgsIDUyLCA1OSk7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LXFyY29kZV9fYmFzZSB7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDM3LCA0MSwgNDYsIDAuOTUpO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgdHJhbnNpdGlvbjogMC40cyBjdWJpYy1iZXppZXIoMC4xOSwgMSwgMC4yMiwgMSk7XFxuICB3aWR0aDogMTAwJTtcXG4gIHdpbGwtY2hhbmdlOiBvcGFjaXR5O1xcbiAgcGFkZGluZzogNDBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LXFyY29kZV9fdGV4dCB7XFxuICBjb2xvcjogcmdiYSg2MCwgNjYsIDgyLCAwLjYpO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGxldHRlci1zcGFjaW5nOiAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuMTg3NWVtO1xcbiAgbWFyZ2luOiAxMHB4IDAgMjBweCAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LXFyY29kZV9fdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogNHZ3O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1xcmNvZGVfX3RleHQge1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICB9XFxufVxcblxcbi53YWxsZXRjb25uZWN0LXFyY29kZV9faW1hZ2Uge1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDMwcHgpO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGN1cnNvcjogbm9uZTtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1xcmNvZGVfX25vdGlmaWNhdGlvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBwYWRkaW5nOiAxNnB4IDIwcHg7XFxuICBib3JkZXItcmFkaXVzOiAxNnB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG4gIGNvbG9yOiBibGFjaztcXG4gIG1hcmdpbi1ib3R0b206IC02MHB4O1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtcXJjb2RlX19ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uX19zaG93IHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LW1vZGFsX19oZWFkZXIge1xcbiAgICBoZWlnaHQ6IDEzMHB4O1xcbiAgfVxcbiAgLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2Uge1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS13aWR0aDogNDE1cHgpIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgI2NvbnRlbnQge1xcbiAgICBtYXgtd2lkdGg6IDc2OHB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDM3NXB4KSBhbmQgKG1heC13aWR0aDogNDE1cHgpIHtcXG4gICNjb250ZW50IHtcXG4gICAgbWF4LXdpZHRoOiA0MTRweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMjBweCkgYW5kIChtYXgtd2lkdGg6IDM3NXB4KSB7XFxuICAjY29udGVudCB7XFxuICAgIG1heC13aWR0aDogMzc1cHg7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB9XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIwcHgpIHtcXG4gICNjb250ZW50IHtcXG4gICAgbWF4LXdpZHRoOiAzMjBweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIH1cXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2Uge1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xcbiAgYm9yZGVyLXJhZGl1czogMjRweDtcXG4gIGJveC1zaGFkb3c6IDAgMTBweCA1MHB4IDVweCByZ2JhKDAsIDAsIDAsIDAuNCk7XFxuICBmb250LWZhbWlseTogdWktcm91bmRlZCwgXFxcIlNGIFBybyBSb3VuZGVkXFxcIiwgXFxcIlNGIFBybyBUZXh0XFxcIiwgbWVkaXVtLWNvbnRlbnQtc2Fucy1zZXJpZi1mb250LFxcbiAgICAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIHVpLXNhbnMtc2VyaWYsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCxcXG4gICAgXFxcIk9wZW4gU2Fuc1xcXCIsIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIHNhbnMtc2VyaWY7XFxuICBtYXJnaW4tdG9wOiA0MXB4O1xcbiAgcGFkZGluZzogMjRweCAyNHB4IDIycHg7XFxuICBwb2ludGVyLWV2ZW50czogYXV0bztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRyYW5zaXRpb246IDAuNHMgY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpO1xcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcbiAgdG9wOiA1MCU7XFxuICBtYXgtd2lkdGg6IDUwMHB4O1xcbiAgbWFyZ2luOiBhdXRvO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZSB7XFxuICAgIHBhZGRpbmc6IDI0cHggMTJweDtcXG4gIH1cXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2UgLmhpZGRlbiB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTUwJSk7XFxuICB0cmFuc2l0aW9uOiAwLjEyNXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19oZWFkZXIge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDI2cHg7XFxuICBsZWZ0OiAwO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAtNDJweDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZSAud2MtbG9nbyB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMjZweDtcXG4gIG1hcmdpbi10b3A6IDE1cHg7XFxuICBwYWRkaW5nLWJvdHRvbTogMTVweDtcXG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZSAud2MtbG9nbyBkaXYge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMzOTlmZjtcXG4gIGhlaWdodDogMjFweDtcXG4gIG1hcmdpbi1yaWdodDogNXB4O1xcbiAgbWFzay1pbWFnZTogdXJsKFxcXCJpbWFnZXMvd2MtbG9nby5zdmdcXFwiKSBjZW50ZXIgbm8tcmVwZWF0O1xcbiAgd2lkdGg6IDMycHg7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlIC53Yy1sb2dvIHAge1xcbiAgY29sb3I6ICNmZmZmZmY7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZSBoMiB7XFxuICBjb2xvcjogcmdiYSg2MCwgNjYsIDgyLCAwLjYpO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGxldHRlci1zcGFjaW5nOiAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuMTg3NWVtO1xcbiAgbWFyZ2luOiAwIDAgMTlweCAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3cge1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiA1NnB4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcGFkZGluZzogMCAxNXB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbWFyZ2luOiAwcHggMHB4IDhweDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICB0cmFuc2l0aW9uOiAwLjE1cyBjdWJpYy1iZXppZXIoMC4yNSwgMC40NiwgMC40NSwgMC45NCk7XFxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93OmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6IHJnYmEoNjAsIDY2LCA4MiwgMC4wNik7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3c6YWN0aXZlIHtcXG4gIGJhY2tncm91bmQ6IHJnYmEoNjAsIDY2LCA4MiwgMC4wNik7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDAuOTc1KTtcXG4gIHRyYW5zaXRpb246IDAuMXMgY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93X19oMyB7XFxuICBjb2xvcjogIzI1MjkyZTtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nLWJvdHRvbTogM3B4O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93X19yaWdodCB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93X19yaWdodF9fYXBwLWljb24ge1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgaGVpZ2h0OiAzNHB4O1xcbiAgbWFyZ2luOiAwIDExcHggMnB4IDA7XFxuICB3aWR0aDogMzRweDtcXG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcXG4gIGJveC1zaGFkb3c6IDAgNHB4IDEycHggMCByZ2JhKDM3LCA0MSwgNDYsIDAuMjUpO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93X19yaWdodF9fY2FyZXQge1xcbiAgaGVpZ2h0OiAxOHB4O1xcbiAgb3BhY2l0eTogMC4zO1xcbiAgdHJhbnNpdGlvbjogMC4xcyBjdWJpYy1iZXppZXIoMC4yNSwgMC40NiwgMC40NSwgMC45NCk7XFxuICB3aWR0aDogOHB4O1xcbiAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3c6aG92ZXIgLmNhcmV0LFxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3c6YWN0aXZlIC5jYXJldCB7XFxuICBvcGFjaXR5OiAwLjY7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19tb2JpbGVfX3RvZ2dsZSB7XFxuICB3aWR0aDogODAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XFxuICBiYWNrZ3JvdW5kOiAjZDRkNWQ5O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fc2luZ2xlX3dhbGxldCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW4tdG9wOiA3cHg7XFxuICBtYXJnaW4tYm90dG9tOiAxOHB4O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fc2luZ2xlX3dhbGxldCBhIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiByZ2IoNjQsIDE1MywgMjU1KTtcXG4gIGZvbnQtc2l6ZTogMjFweDtcXG4gIGZvbnQtd2VpZ2h0OiA4MDA7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fbW9iaWxlX190b2dnbGVfc2VsZWN0b3Ige1xcbiAgd2lkdGg6IGNhbGMoNTAlIC0gOHB4KTtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA4cHgpO1xcbiAgdG9wOiA0cHg7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoNHB4LCAwLCAwKTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX21vYmlsZV9fdG9nZ2xlLnJpZ2h0X19zZWxlY3RlZCAud2FsbGV0Y29ubmVjdC1tb2RhbF9fbW9iaWxlX190b2dnbGVfc2VsZWN0b3Ige1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZChjYWxjKDEwMCUgKyAxMnB4KSwgMCwgMCk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19tb2JpbGVfX3RvZ2dsZSBhIHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIHdpZHRoOiA1MCU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBtYXJnaW46IDA7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgei1pbmRleDogMTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Zvb3RlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW4tdG9wOiAyMHB4O1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1tb2RhbF9fZm9vdGVyIHtcXG4gICAgbWFyZ2luLXRvcDogNXZ3O1xcbiAgfVxcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fZm9vdGVyIGEge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6ICM4OThkOTc7XFxuICBmb250LXNpemU6IDE1cHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkge1xcbiAgLndhbGxldGNvbm5lY3QtbW9kYWxfX2Zvb3RlciBhIHtcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcbiAgfVxcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25zX193cmFwcGVyIHtcXG4gIG1heC1oZWlnaHQ6IDQ0dmg7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbnNfX3dyYXBwZXJfX2FuZHJvaWQge1xcbiAgbWFyZ2luOiA1MCUgMDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uc19fd3JhcHBlcl9fd3JhcCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwgMWZyKTtcXG4gIG1hcmdpbjogMTBweCAwO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25zX193cmFwcGVyX193cmFwIHtcXG4gICAgbWFyZ2luLXRvcDogNDBweDtcXG4gIH1cXG59XFxuXFxuLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig2NCwgMTUzLCAyNTUpO1xcbiAgcGFkZGluZzogMTJweDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxuICBmb250LXdlaWdodDogNTAwO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25fX2ljb25fYW5jaG9yIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgbWFyZ2luOiA4cHg7XFxuICB3aWR0aDogNDJweDtcXG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25fX2ljb25fYW5jaG9yIHtcXG4gICAgbWFyZ2luOiA0cHg7XFxuICB9XFxufVxcblxcbi53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbl9faWNvbiB7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgaGVpZ2h0OiA0MnB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgd2lkdGg6IDQycHg7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyICFpbXBvcnRhbnQ7XFxuICBib3gtc2hhZG93OiAwIDRweCAxMnB4IDAgcmdiYSgzNywgNDEsIDQ2LCAwLjI1KTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uX190ZXh0IHtcXG4gIGNvbG9yOiAjNDI0OTUyO1xcbiAgZm9udC1zaXplOiAyLjd2dztcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbi10b3A6IDEuOHZ3O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uX190ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xcbiAgfVxcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1zZWFyY2hfX2lucHV0IHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQ6ICNkNGQ1ZDk7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxuICBwYWRkaW5nOiA4cHggMTZweDtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXN0cmV0Y2g6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc3RyZXRjaDogbm9ybWFsO1xcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcXG4gIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDE2cHgpO1xcbiAgbWFyZ2luOiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xcbn1cXG5cIjtcblxuLy8gQSB0eXBlIG9mIHByb21pc2UtbGlrZSB0aGF0IHJlc29sdmVzIHN5bmNocm9ub3VzbHkgYW5kIHN1cHBvcnRzIG9ubHkgb25lIG9ic2VydmVyXG52YXIgX2l0ZXJhdG9yU3ltYm9sID0gLyojX19QVVJFX18qL3R5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wuaXRlcmF0b3IgfHwgKFN5bWJvbC5pdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKSkgOiBcIkBAaXRlcmF0b3JcIjsgLy8gQXN5bmNocm9ub3VzbHkgaXRlcmF0ZSB0aHJvdWdoIGFuIG9iamVjdCdzIHZhbHVlc1xudmFyIF9hc3luY0l0ZXJhdG9yU3ltYm9sID0gLyojX19QVVJFX18qL3R5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCAoU3ltYm9sLmFzeW5jSXRlcmF0b3IgPSBTeW1ib2woXCJTeW1ib2wuYXN5bmNJdGVyYXRvclwiKSkgOiBcIkBAYXN5bmNJdGVyYXRvclwiOyAvLyBBc3luY2hyb25vdXNseSBpdGVyYXRlIG9uIGEgdmFsdWUgdXNpbmcgaXQncyBhc3luYyBpdGVyYXRvciBpZiBwcmVzZW50LCBvciBpdHMgc3luY2hyb25vdXMgaXRlcmF0b3IgaWYgbWlzc2luZ1xuXG5mdW5jdGlvbiBfY2F0Y2goYm9keSwgcmVjb3Zlcikge1xuICB0cnkge1xuICAgIHZhciByZXN1bHQgPSBib2R5KCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVjb3ZlcihlKTtcbiAgfVxuXG4gIGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcbiAgICByZXR1cm4gcmVzdWx0LnRoZW4odm9pZCAwLCByZWNvdmVyKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IC8vIEFzeW5jaHJvbm91c2x5IGF3YWl0IGEgcHJvbWlzZSBhbmQgcGFzcyB0aGUgcmVzdWx0IHRvIGEgZmluYWxseSBjb250aW51YXRpb25cblxudmFyIFdBTExFVENPTk5FQ1RfTE9HT19TVkdfVVJMID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIGhlaWdodD0nMTg1JyB2aWV3Qm94PScwIDAgMzAwIDE4NScgd2lkdGg9JzMwMCcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSUzQ3BhdGggZD0nbTYxLjQzODU0MjkgMzYuMjU2MjYxMmM0OC45MTEyMjQxLTQ3Ljg4ODE2NjMgMTI4LjIxMTk4NzEtNDcuODg4MTY2MyAxNzcuMTIzMjA5MSAwbDUuODg2NTQ1IDUuNzYzNDE3NGMyLjQ0NTU2MSAyLjM5NDQwODEgMi40NDU1NjEgNi4yNzY1MTEyIDAgOC42NzA5MjA0bC0yMC4xMzY2OTUgMTkuNzE1NTAzYy0xLjIyMjc4MSAxLjE5NzIwNTEtMy4yMDUzIDEuMTk3MjA1MS00LjQyODA4MSAwbC04LjEwMDU4NC03LjkzMTE0NzljLTM0LjEyMTY5Mi0zMy40MDc5ODE3LTg5LjQ0Mzg4Ni0zMy40MDc5ODE3LTEyMy41NjU1Nzg4IDBsLTguNjc1MDU2MiA4LjQ5MzYwNTFjLTEuMjIyNzgxNiAxLjE5NzIwNDEtMy4yMDUzMDEgMS4xOTcyMDQxLTQuNDI4MDgwNiAwbC0yMC4xMzY2OTQ5LTE5LjcxNTUwMzFjLTIuNDQ1NTYxMi0yLjM5NDQwOTItMi40NDU1NjEyLTYuMjc2NTEyMiAwLTguNjcwOTIwNHptMjE4Ljc2Nzc5NjEgNDAuNzczNzQ0OSAxNy45MjE2OTcgMTcuNTQ2ODk3YzIuNDQ1NTQ5IDIuMzk0Mzk2OSAyLjQ0NTU2MyA2LjI3NjQ3NjkuMDAwMDMxIDguNjcwODg5OWwtODAuODEwMTcxIDc5LjEyMTEzNGMtMi40NDU1NDQgMi4zOTQ0MjYtNi40MTA1ODIgMi4zOTQ0NTMtOC44NTYxNi4wMDAwNjItLjAwMDAxLS4wMDAwMS0uMDAwMDIyLS4wMDAwMjItLjAwMDAzMi0uMDAwMDMybC01Ny4zNTQxNDMtNTYuMTU0NTcyYy0uNjExMzktLjU5ODYwMi0xLjYwMjY1LS41OTg2MDItMi4yMTQwNCAwLS4wMDAwMDQuMDAwMDA0LS4wMDAwMDcuMDAwMDA4LS4wMDAwMTEuMDAwMDExbC01Ny4zNTI5MjEyIDU2LjE1NDUzMWMtMi40NDU1MzY4IDIuMzk0NDMyLTYuNDEwNTc1NSAyLjM5NDQ3Mi04Ljg1NjE2MTIuMDAwMDg3LS4wMDAwMTQzLS4wMDAwMTQtLjAwMDAyOTYtLjAwMDAyOC0uMDAwMDQ0OS0uMDAwMDQ0bC04MC44MTI0MTk0My03OS4xMjIxODVjLTIuNDQ1NTYwMjEtMi4zOTQ0MDgtMi40NDU1NjAyMS02LjI3NjUxMTUgMC04LjY3MDkxOTdsMTcuOTIxNzI5NjMtMTcuNTQ2ODY3M2MyLjQ0NTU2MDItMi4zOTQ0MDgyIDYuNDEwNTk4OS0yLjM5NDQwODIgOC44NTYxNjAyIDBsNTcuMzU0OTc3NSA1Ni4xNTUzNTdjLjYxMTM5MDguNTk4NjAyIDEuNjAyNjQ5LjU5ODYwMiAyLjIxNDAzOTggMCAuMDAwMDA5Mi0uMDAwMDA5LjAwMDAxNzQtLjAwMDAxNy4wMDAwMjY1LS4wMDAwMjRsNTcuMzUyMTAzMS01Ni4xNTUzMzNjMi40NDU1MDUtMi4zOTQ0NjMzIDYuNDEwNTQ0LTIuMzk0NTUzMSA4Ljg1NjE2MS0uMDAwMi4wMDAwMzQuMDAwMDMzNi4wMDAwNjguMDAwMDY3My4wMDAxMDEuMDAwMTAxbDU3LjM1NDkwMiA1Ni4xNTU0MzJjLjYxMTM5LjU5ODYwMSAxLjYwMjY1LjU5ODYwMSAyLjIxNDA0IDBsNTcuMzUzOTc1LTU2LjE1NDMyNDljMi40NDU1NjEtMi4zOTQ0MDkyIDYuNDEwNTk5LTIuMzk0NDA5MiA4Ljg1NjE2IDB6JyBmaWxsPSclMjMzYjk5ZmMnLyUzRSUzQy9zdmclM0VcIjtcblxudmFyIFdBTExFVENPTk5FQ1RfSEVBREVSX1RFWFQgPSBcIldhbGxldENvbm5lY3RcIjtcbnZhciBBTklNQVRJT05fRFVSQVRJT04gPSAzMDA7XG52YXIgREVGQVVMVF9CVVRUT05fQ09MT1IgPSBcInJnYig2NCwgMTUzLCAyNTUpXCI7XG52YXIgV0FMTEVUQ09OTkVDVF9XUkFQUEVSX0lEID0gXCJ3YWxsZXRjb25uZWN0LXdyYXBwZXJcIjtcbnZhciBXQUxMRVRDT05ORUNUX1NUWUxFX0lEID0gXCJ3YWxsZXRjb25uZWN0LXN0eWxlLXNoZWV0XCI7XG52YXIgV0FMTEVUQ09OTkVDVF9NT0RBTF9JRCA9IFwid2FsbGV0Y29ubmVjdC1xcmNvZGUtbW9kYWxcIjtcbnZhciBXQUxMRVRDT05ORUNUX0NMT1NFX0JVVFRPTl9JRCA9IFwid2FsbGV0Y29ubmVjdC1xcmNvZGUtY2xvc2VcIjtcbnZhciBXQUxMRVRDT05ORUNUX0NUQV9URVhUX0lEID0gXCJ3YWxsZXRjb25uZWN0LXFyY29kZS10ZXh0XCI7XG52YXIgV0FMTEVUQ09OTkVDVF9DT05ORUNUX0JVVFRPTl9JRCA9IFwid2FsbGV0Y29ubmVjdC1jb25uZWN0LWJ1dHRvblwiO1xuXG5mdW5jdGlvbiBIZWFkZXIocHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19oZWFkZXJcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHtcbiAgICBzcmM6IFdBTExFVENPTk5FQ1RfTE9HT19TVkdfVVJMLFxuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19oZWFkZXJMb2dvXCJcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFdBTExFVENPTk5FQ1RfSEVBREVSX1RFWFQpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX3dyYXBwZXJcIixcbiAgICBvbkNsaWNrOiBwcm9wcy5vbkNsb3NlXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGlkOiBXQUxMRVRDT05ORUNUX0NMT1NFX0JVVFRPTl9JRCxcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX2ljb25cIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX2xpbmUxXCJcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19jbG9zZV9fbGluZTJcIlxuICB9KSkpKTtcbn1cblxuZnVuY3Rpb24gQ29ubmVjdEJ1dHRvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvblwiLFxuICAgIGhyZWY6IHByb3BzLmhyZWYsXG4gICAgaWQ6IChXQUxMRVRDT05ORUNUX0NPTk5FQ1RfQlVUVE9OX0lEICsgXCItXCIgKyAocHJvcHMubmFtZSkpLFxuICAgIG9uQ2xpY2s6IHByb3BzLm9uQ2xpY2ssXG4gICAgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIixcbiAgICBzdHlsZToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBwcm9wcy5jb2xvclxuICAgIH0sXG4gICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gIH0sIHByb3BzLm5hbWUpO1xufVxuXG52YXIgQ0FSRVRfU1ZHX1VSTCA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyBmaWxsPSdub25lJyBoZWlnaHQ9JzE4JyB2aWV3Qm94PScwIDAgOCAxOCcgd2lkdGg9JzgnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NwYXRoIGNsaXAtcnVsZT0nZXZlbm9kZCcgZD0nbS41ODYzMDEuMjEzODk4Yy0uNDM1OTQ3LjMzOTA3LS41MTQ0ODEzLjk2NzM0Mi0uMTc1NDExIDEuNDAzMjkybDQuODc4MzEgNi4yNzIxMmMuMjgwODcuMzYxMTEuMjgwODcuODY2NzcgMCAxLjIyNzg4bC00Ljg3ODMxMSA2LjI3MjExYy0uMzM5MDcuNDM2LS4yNjA1MzYgMS4wNjQyLjE3NTQxMiAxLjQwMzMuNDM1OTQ5LjMzOTEgMS4wNjQyMTkuMjYwNSAxLjQwMzI4OS0uMTc1NGw0Ljg3ODMyLTYuMjcyMWMuODQyNTktMS4wODMzNi44NDI1OS0yLjYwMDM0IDAtMy42ODM2N2wtNC44NzgzMi02LjI3MjEyYy0uMzM5MDctLjQzNTk0NzQtLjk2NzM0LS41MTQ0ODItMS40MDMyODktLjE3NTQxMnonIGZpbGw9JyUyMzNjNDI1MicgZmlsbC1ydWxlPSdldmVub2RkJy8lM0UlM0Mvc3ZnJTNFXCI7XG5cbmZ1bmN0aW9uIFdhbGxldEJ1dHRvbihwcm9wcykge1xuICB2YXIgY29sb3IgPSBwcm9wcy5jb2xvcjtcbiAgdmFyIGhyZWYgPSBwcm9wcy5ocmVmO1xuICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gIHZhciBsb2dvID0gcHJvcHMubG9nbztcbiAgdmFyIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dcIixcbiAgICBocmVmOiBocmVmLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIixcbiAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93X19oM1wiXG4gIH0sIG5hbWUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93X19yaWdodFwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dfX3JpZ2h0X19hcHAtaWNvblwiLFxuICAgIHN0eWxlOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAoXCJ1cmwoJ1wiICsgbG9nbyArIFwiJykgXCIgKyBjb2xvciksXG4gICAgICBiYWNrZ3JvdW5kU2l6ZTogXCIxMDAlXCJcbiAgICB9XG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHtcbiAgICBzcmM6IENBUkVUX1NWR19VUkwsXG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd19fcmlnaHRfX2NhcmV0XCJcbiAgfSkpKTtcbn1cblxuZnVuY3Rpb24gV2FsbGV0SWNvbihwcm9wcykge1xuICB2YXIgY29sb3IgPSBwcm9wcy5jb2xvcjtcbiAgdmFyIGhyZWYgPSBwcm9wcy5ocmVmO1xuICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gIHZhciBsb2dvID0gcHJvcHMubG9nbztcbiAgdmFyIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrO1xuICB2YXIgZm9udFNpemUgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCA/ICgobmFtZS5sZW5ndGggPiA4ID8gMi41IDogMi43KSArIFwidndcIikgOiBcImluaGVyaXRcIjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25fX2ljb25fYW5jaG9yXCIsXG4gICAgaHJlZjogaHJlZixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCIsXG4gICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbl9faWNvblwiLFxuICAgIHN0eWxlOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAoXCJ1cmwoJ1wiICsgbG9nbyArIFwiJykgXCIgKyBjb2xvciksXG4gICAgICBiYWNrZ3JvdW5kU2l6ZTogXCIxMDAlXCJcbiAgICB9XG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFNpemU6IGZvbnRTaXplXG4gICAgfSxcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25fX3RleHRcIlxuICB9LCBuYW1lKSk7XG59XG5cbnZhciBHUklEX01JTl9DT1VOVCA9IDU7XG52YXIgTElOS1NfUEVSX1BBR0UgPSAxMjtcblxuZnVuY3Rpb24gTGlua0Rpc3BsYXkocHJvcHMpIHtcbiAgdmFyIGFuZHJvaWQgPSBicm93c2VyVXRpbHMuaXNBbmRyb2lkKCk7XG4gIHZhciByZWYgPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgdmFyIGlucHV0ID0gcmVmWzBdO1xuICB2YXIgc2V0SW5wdXQgPSByZWZbMV07XG4gIHZhciByZWYkMSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgZmlsdGVyID0gcmVmJDFbMF07XG4gIHZhciBzZXRGaWx0ZXIgPSByZWYkMVsxXTtcbiAgdmFyIHJlZiQyID0gUmVhY3QudXNlU3RhdGUoMSk7XG4gIHZhciBwYWdlID0gcmVmJDJbMF07XG4gIHZhciBzZXRQYWdlID0gcmVmJDJbMV07XG4gIHZhciBsaW5rcyA9IGZpbHRlciA/IHByb3BzLmxpbmtzLmZpbHRlcihmdW5jdGlvbiAobGluaykgeyByZXR1cm4gbGluay5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyLnRvTG93ZXJDYXNlKCkpOyB9KSA6IHByb3BzLmxpbmtzO1xuICB2YXIgZXJyb3JNZXNzYWdlID0gcHJvcHMuZXJyb3JNZXNzYWdlO1xuICB2YXIgZ3JpZCA9IGZpbHRlciB8fCBsaW5rcy5sZW5ndGggPiBHUklEX01JTl9DT1VOVDtcbiAgdmFyIHBhZ2VzID0gTWF0aC5jZWlsKGxpbmtzLmxlbmd0aCAvIExJTktTX1BFUl9QQUdFKTtcbiAgdmFyIHJhbmdlID0gWyhwYWdlIC0gMSkgKiBMSU5LU19QRVJfUEFHRSArIDEsIHBhZ2UgKiBMSU5LU19QRVJfUEFHRV07XG4gIHZhciBwYWdlTGlua3MgPSBsaW5rcy5sZW5ndGggPyBsaW5rcy5maWx0ZXIoZnVuY3Rpb24gKF8sIGluZGV4KSB7IHJldHVybiBpbmRleCArIDEgPj0gcmFuZ2VbMF0gJiYgaW5kZXggKyAxIDw9IHJhbmdlWzFdOyB9KSA6IFtdO1xuICB2YXIgaGFzUGFnaW5nID0gISEoIWFuZHJvaWQgJiYgcGFnZXMgPiAxKTtcbiAgdmFyIGZpbHRlclRpbWVvdXQgPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gaGFuZGxlSW5wdXQoZSkge1xuICAgIHNldElucHV0KGUudGFyZ2V0LnZhbHVlKTtcbiAgICBjbGVhclRpbWVvdXQoZmlsdGVyVGltZW91dCk7XG5cbiAgICBpZiAoZS50YXJnZXQudmFsdWUpIHtcbiAgICAgIGZpbHRlclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0RmlsdGVyKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgc2V0UGFnZSgxKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJbnB1dChcIlwiKTtcbiAgICAgIHNldEZpbHRlcihcIlwiKTtcbiAgICAgIHNldFBhZ2UoMSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgIGlkOiBXQUxMRVRDT05ORUNUX0NUQV9URVhUX0lELFxuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LXFyY29kZV9fdGV4dFwiXG4gIH0sIGFuZHJvaWQgPyBwcm9wcy50ZXh0LmNvbm5lY3RfbW9iaWxlX3dhbGxldCA6IHByb3BzLnRleHQuY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQpLCAhYW5kcm9pZCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LXNlYXJjaF9faW5wdXRcIixcbiAgICBwbGFjZWhvbGRlcjogXCJTZWFyY2hcIixcbiAgICB2YWx1ZTogaW5wdXQsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUlucHV0XG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IChcIndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uc19fd3JhcHBlclwiICsgKGFuZHJvaWQgPyBcIl9fYW5kcm9pZFwiIDogZ3JpZCAmJiBsaW5rcy5sZW5ndGggPyBcIl9fd3JhcFwiIDogXCJcIikpXG4gIH0sICFhbmRyb2lkID8gcGFnZUxpbmtzLmxlbmd0aCA/IHBhZ2VMaW5rcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgdmFyIGNvbG9yID0gZW50cnkuY29sb3I7XG4gICAgdmFyIG5hbWUgPSBlbnRyeS5uYW1lO1xuICAgIHZhciBzaG9ydE5hbWUgPSBlbnRyeS5zaG9ydE5hbWU7XG4gICAgdmFyIGxvZ28gPSBlbnRyeS5sb2dvO1xuICAgIHZhciBocmVmID0gYnJvd3NlclV0aWxzLmZvcm1hdElPU01vYmlsZShwcm9wcy51cmksIGVudHJ5KTtcbiAgICB2YXIgaGFuZGxlQ2xpY2tJT1MgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICBicm93c2VyVXRpbHMuc2F2ZU1vYmlsZUxpbmtJbmZvKHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgaHJlZjogaHJlZlxuICAgICAgfSk7XG4gICAgfSwgW3BhZ2VMaW5rc10pO1xuICAgIHJldHVybiAhZ3JpZCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoV2FsbGV0QnV0dG9uLCB7XG4gICAgICBjb2xvcjogY29sb3IsXG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGxvZ286IGxvZ28sXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja0lPU1xuICAgIH0pIDogUmVhY3QuY3JlYXRlRWxlbWVudChXYWxsZXRJY29uLCB7XG4gICAgICBjb2xvcjogY29sb3IsXG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmFtZTogc2hvcnROYW1lIHx8IG5hbWUsXG4gICAgICBsb2dvOiBsb2dvLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2tJT1NcbiAgICB9KTtcbiAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBlcnJvck1lc3NhZ2UubGVuZ3RoID8gcHJvcHMuZXJyb3JNZXNzYWdlIDogISFwcm9wcy5saW5rcy5sZW5ndGggJiYgIWxpbmtzLmxlbmd0aCA/IHByb3BzLnRleHQubm9fd2FsbGV0c19mb3VuZCA6IHByb3BzLnRleHQubG9hZGluZykpIDogUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0QnV0dG9uLCB7XG4gICAgbmFtZTogcHJvcHMudGV4dC5jb25uZWN0LFxuICAgIGNvbG9yOiBERUZBVUxUX0JVVFRPTl9DT0xPUixcbiAgICBocmVmOiBwcm9wcy51cmksXG4gICAgb25DbGljazogUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgYnJvd3NlclV0aWxzLnNhdmVNb2JpbGVMaW5rSW5mbyh7XG4gICAgICAgIG5hbWU6IFwiVW5rbm93blwiLFxuICAgICAgICBocmVmOiBwcm9wcy51cmlcbiAgICAgIH0pO1xuICAgIH0sIFtdKVxuICB9KSksIGhhc1BhZ2luZyAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fZm9vdGVyXCJcbiAgfSwgQXJyYXkocGFnZXMpLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkge1xuICAgIHZhciBwYWdlTnVtYmVyID0gaW5kZXggKyAxO1xuICAgIHZhciBzZWxlY3RlZCA9IHBhZ2UgPT09IHBhZ2VOdW1iZXI7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIG1hcmdpbjogXCJhdXRvIDEwcHhcIixcbiAgICAgICAgZm9udFdlaWdodDogc2VsZWN0ZWQgPyBcImJvbGRcIiA6IFwibm9ybWFsXCJcbiAgICAgIH0sXG4gICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRQYWdlKHBhZ2VOdW1iZXIpOyB9XG4gICAgfSwgcGFnZU51bWJlcik7XG4gIH0pKSk7XG59XG5cbmZ1bmN0aW9uIE5vdGlmaWNhdGlvbihwcm9wcykge1xuICB2YXIgc2hvdyA9ICEhcHJvcHMubWVzc2FnZS50cmltKCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IChcIndhbGxldGNvbm5lY3QtcXJjb2RlX19ub3RpZmljYXRpb25cIiArIChzaG93ID8gXCIgbm90aWZpY2F0aW9uX19zaG93XCIgOiBcIlwiKSlcbiAgfSwgcHJvcHMubWVzc2FnZSk7XG59XG5cbnZhciBmb3JtYXRRUkNvZGVJbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRyeSB7XG4gICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShRUkNvZGUudG9TdHJpbmcoZGF0YSwge1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgdHlwZTogXCJzdmdcIlxuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChkYXRhU3RyaW5nKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGFTdHJpbmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVN0cmluZy5yZXBsYWNlKFwiPHN2Z1wiLCBcIjxzdmcgY2xhc3M9XFxcIndhbGxldGNvbm5lY3QtcXJjb2RlX19pbWFnZVxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFFSQ29kZURpc3BsYXkocHJvcHMpIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgbm90aWZpY2F0aW9uID0gcmVmWzBdO1xuICB2YXIgc2V0Tm90aWZpY2F0aW9uID0gcmVmWzFdO1xuICB2YXIgcmVmJDEgPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgdmFyIHN2ZyA9IHJlZiQxWzBdO1xuICB2YXIgc2V0U3ZnID0gcmVmJDFbMV07XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZm9ybWF0UVJDb2RlSW1hZ2UocHJvcHMudXJpKSkudGhlbihmdW5jdGlvbiAoX2Zvcm1hdFFSQ29kZUltYWdlKSB7XG4gICAgICAgIHNldFN2ZyhfZm9ybWF0UVJDb2RlSW1hZ2UpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgdmFyIGNvcHlUb0NsaXBib2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3VjY2VzcyA9IGNvcHkocHJvcHMudXJpKTtcblxuICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICBzZXROb3RpZmljYXRpb24ocHJvcHMudGV4dC5jb3BpZWRfdG9fY2xpcGJvYXJkKTtcbiAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldE5vdGlmaWNhdGlvbihcIlwiKTsgfSwgMTIwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE5vdGlmaWNhdGlvbihcIkVycm9yXCIpO1xuICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0Tm90aWZpY2F0aW9uKFwiXCIpOyB9LCAxMjAwKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgIGlkOiBXQUxMRVRDT05ORUNUX0NUQV9URVhUX0lELFxuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LXFyY29kZV9fdGV4dFwiXG4gIH0sIHByb3BzLnRleHQuc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiBzdmdcbiAgICB9XG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fZm9vdGVyXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIG9uQ2xpY2s6IGNvcHlUb0NsaXBib2FyZFxuICB9LCBwcm9wcy50ZXh0LmNvcHlfdG9fY2xpcGJvYXJkKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm90aWZpY2F0aW9uLCB7XG4gICAgbWVzc2FnZTogbm90aWZpY2F0aW9uXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gTW9kYWwocHJvcHMpIHtcbiAgdmFyIGFuZHJvaWQgPSBicm93c2VyVXRpbHMuaXNBbmRyb2lkKCk7XG4gIHZhciBtb2JpbGUgPSBicm93c2VyVXRpbHMuaXNNb2JpbGUoKTtcbiAgdmFyIHdoaXRlbGlzdCA9IG1vYmlsZSA/IHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucyAmJiBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnMubW9iaWxlTGlua3MgPyBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnMubW9iaWxlTGlua3MgOiB1bmRlZmluZWQgOiBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnMgJiYgcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zLmRlc2t0b3BMaW5rcyA/IHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucy5kZXNrdG9wTGlua3MgOiB1bmRlZmluZWQ7XG4gIHZhciByZWYgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIHZhciBsb2FkaW5nID0gcmVmWzBdO1xuICB2YXIgc2V0TG9hZGluZyA9IHJlZlsxXTtcbiAgdmFyIHJlZiQxID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICB2YXIgZmV0Y2hlZCA9IHJlZiQxWzBdO1xuICB2YXIgc2V0RmV0Y2hlZCA9IHJlZiQxWzFdO1xuICB2YXIgcmVmJDIgPSBSZWFjdC51c2VTdGF0ZSghbW9iaWxlKTtcbiAgdmFyIGRpc3BsYXlRUkNvZGUgPSByZWYkMlswXTtcbiAgdmFyIHNldERpc3BsYXlRUkNvZGUgPSByZWYkMlsxXTtcbiAgdmFyIGRpc3BsYXlQcm9wcyA9IHtcbiAgICBtb2JpbGU6IG1vYmlsZSxcbiAgICB0ZXh0OiBwcm9wcy50ZXh0LFxuICAgIHVyaTogcHJvcHMudXJpLFxuICAgIHFyY29kZU1vZGFsT3B0aW9uczogcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zXG4gIH07XG4gIHZhciByZWYkMyA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgc2luZ2xlTGlua0hyZWYgPSByZWYkM1swXTtcbiAgdmFyIHNldFNpbmdsZUxpbmtIcmVmID0gcmVmJDNbMV07XG4gIHZhciByZWYkNCA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgdmFyIGhhc1NpbmdsZUxpbmsgPSByZWYkNFswXTtcbiAgdmFyIHNldEhhc1NpbmdsZUxpbmsgPSByZWYkNFsxXTtcbiAgdmFyIHJlZiQ1ID0gUmVhY3QudXNlU3RhdGUoW10pO1xuICB2YXIgbGlua3MgPSByZWYkNVswXTtcbiAgdmFyIHNldExpbmtzID0gcmVmJDVbMV07XG4gIHZhciByZWYkNiA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgZXJyb3JNZXNzYWdlID0gcmVmJDZbMF07XG4gIHZhciBzZXRFcnJvck1lc3NhZ2UgPSByZWYkNlsxXTtcblxuICB2YXIgZ2V0TGlua3NJZk5lZWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZmV0Y2hlZCB8fCBsb2FkaW5nIHx8IHdoaXRlbGlzdCAmJiAhd2hpdGVsaXN0Lmxlbmd0aCB8fCBsaW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbml0TGlua3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGFuZHJvaWQpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOyB9XG4gICAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcblxuICAgICAgICAgIHZhciBfdGVtcCA9IF9jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zICYmIHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucy5yZWdpc3RyeVVybCA/IHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucy5yZWdpc3RyeVVybCA6IGJyb3dzZXJVdGlscy5nZXRXYWxsZXRSZWdpc3RyeVVybCgpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmZXRjaCh1cmwpKS50aGVuKGZ1bmN0aW9uIChyZWdpc3RyeVJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVnaXN0cnlSZXNwb25zZS5qc29uKCkpLnRoZW4oZnVuY3Rpb24gKF9yZWdpc3RyeVJlc3BvbnNlJGpzbykge1xuICAgICAgICAgICAgICAgIHZhciByZWdpc3RyeSA9IF9yZWdpc3RyeVJlc3BvbnNlJGpzby5saXN0aW5ncztcbiAgICAgICAgICAgICAgICB2YXIgcGxhdGZvcm0gPSBtb2JpbGUgPyBcIm1vYmlsZVwiIDogXCJkZXNrdG9wXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgX2xpbmtzID0gYnJvd3NlclV0aWxzLmdldE1vYmlsZUxpbmtSZWdpc3RyeShicm93c2VyVXRpbHMuZm9ybWF0TW9iaWxlUmVnaXN0cnkocmVnaXN0cnksIHBsYXRmb3JtKSwgd2hpdGVsaXN0KTtcblxuICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNldEZldGNoZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgc2V0RXJyb3JNZXNzYWdlKCFfbGlua3MubGVuZ3RoID8gcHJvcHMudGV4dC5ub19zdXBwb3J0ZWRfd2FsbGV0cyA6IFwiXCIpO1xuICAgICAgICAgICAgICAgIHNldExpbmtzKF9saW5rcyk7XG4gICAgICAgICAgICAgICAgdmFyIGhhc1NpbmdsZUxpbmsgPSBfbGlua3MubGVuZ3RoID09PSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKGhhc1NpbmdsZUxpbmspIHtcbiAgICAgICAgICAgICAgICAgIHNldFNpbmdsZUxpbmtIcmVmKGJyb3dzZXJVdGlscy5mb3JtYXRJT1NNb2JpbGUocHJvcHMudXJpLCBfbGlua3NbMF0pKTtcbiAgICAgICAgICAgICAgICAgIHNldERpc3BsYXlRUkNvZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2V0SGFzU2luZ2xlTGluayhoYXNTaW5nbGVMaW5rKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRGZXRjaGVkKHRydWUpO1xuICAgICAgICAgICAgc2V0RXJyb3JNZXNzYWdlKHByb3BzLnRleHQuc29tZXRoaW5nX3dlbnRfd3JvbmcpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3RlbXAgJiYgX3RlbXAudGhlbiA/IF90ZW1wLnRoZW4oZnVuY3Rpb24gKCkge30pIDogdm9pZCAwKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaW5pdExpbmtzKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZ2V0TGlua3NJZk5lZWRlZCgpO1xuICB2YXIgcmlnaHRTZWxlY3RlZCA9IG1vYmlsZSA/IGRpc3BsYXlRUkNvZGUgOiAhZGlzcGxheVFSQ29kZTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGlkOiBXQUxMRVRDT05ORUNUX01PREFMX0lELFxuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LXFyY29kZV9fYmFzZSBhbmltYXRlZCBmYWRlSW5cIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZVwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhZGVyLCB7XG4gICAgb25DbG9zZTogcHJvcHMub25DbG9zZVxuICB9KSwgaGFzU2luZ2xlTGluayAmJiBkaXNwbGF5UVJDb2RlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX3NpbmdsZV93YWxsZXRcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnJvd3NlclV0aWxzLnNhdmVNb2JpbGVMaW5rSW5mbyh7XG4gICAgICBuYW1lOiBsaW5rc1swXS5uYW1lLFxuICAgICAgaHJlZjogc2luZ2xlTGlua0hyZWZcbiAgICB9KTsgfSxcbiAgICBocmVmOiBzaW5nbGVMaW5rSHJlZixcbiAgICByZWw6IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiLFxuICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICB9LCBwcm9wcy50ZXh0LmNvbm5lY3Rfd2l0aCArIFwiIFwiICsgKGhhc1NpbmdsZUxpbmsgPyBsaW5rc1swXS5uYW1lIDogXCJcIikgKyBcIiDigLpcIikpIDogYW5kcm9pZCB8fCBsb2FkaW5nIHx8ICFsb2FkaW5nICYmIGxpbmtzLmxlbmd0aCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogKFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fbW9iaWxlX190b2dnbGVcIiArIChyaWdodFNlbGVjdGVkID8gXCIgcmlnaHRfX3NlbGVjdGVkXCIgOiBcIlwiKSlcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX21vYmlsZV9fdG9nZ2xlX3NlbGVjdG9yXCJcbiAgfSksIG1vYmlsZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoc2V0RGlzcGxheVFSQ29kZShmYWxzZSksIGdldExpbmtzSWZOZWVkZWQoKSk7IH1cbiAgfSwgcHJvcHMudGV4dC5tb2JpbGUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0RGlzcGxheVFSQ29kZSh0cnVlKTsgfVxuICB9LCBwcm9wcy50ZXh0LnFyY29kZSkpIDogUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldERpc3BsYXlRUkNvZGUodHJ1ZSk7IH1cbiAgfSwgcHJvcHMudGV4dC5xcmNvZGUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHNldERpc3BsYXlRUkNvZGUoZmFsc2UpLCBnZXRMaW5rc0lmTmVlZGVkKCkpOyB9XG4gIH0sIHByb3BzLnRleHQuZGVza3RvcCkpKSA6IG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgZGlzcGxheVFSQ29kZSB8fCAhYW5kcm9pZCAmJiAhbG9hZGluZyAmJiAhbGlua3MubGVuZ3RoID8gUmVhY3QuY3JlYXRlRWxlbWVudChRUkNvZGVEaXNwbGF5LCBPYmplY3QuYXNzaWduKHt9LCBkaXNwbGF5UHJvcHMpKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlua0Rpc3BsYXksIE9iamVjdC5hc3NpZ24oe30sIGRpc3BsYXlQcm9wcyxcbiAgICB7bGlua3M6IGxpbmtzLFxuICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlfSkpKSkpO1xufVxuXG52YXIgZGUgPSB7XG4gIGNob29zZV9wcmVmZXJyZWRfd2FsbGV0OiBcIlfDpGhsZSBiZXZvcnp1Z3RlIFdhbGxldFwiLFxuICBjb25uZWN0X21vYmlsZV93YWxsZXQ6IFwiVmVyYmluZGUgbWl0IE1vYmlsZSBXYWxsZXRcIixcbiAgc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQ6IFwiU2Nhbm5lIGRlbiBRUi1jb2RlIG1pdCBlaW5lciBXYWxsZXRDb25uZWN0IGtvbXBhdGlibGVuIFdhbGxldFwiLFxuICBjb25uZWN0OiBcIlZlcmJpbmRlblwiLFxuICBxcmNvZGU6IFwiUVItQ29kZVwiLFxuICBtb2JpbGU6IFwiTW9iaWxlXCIsXG4gIGRlc2t0b3A6IFwiRGVza3RvcFwiLFxuICBjb3B5X3RvX2NsaXBib2FyZDogXCJJbiBkaWUgWndpc2NoZW5hYmxhZ2Uga29waWVyZW5cIixcbiAgY29waWVkX3RvX2NsaXBib2FyZDogXCJJbiBkaWUgWndpc2NoZW5hYmxhZ2Uga29waWVydCFcIixcbiAgY29ubmVjdF93aXRoOiBcIlZlcmJpbmRlbiBtaXQgSGlsZmUgdm9uXCIsXG4gIGxvYWRpbmc6IFwiTGFkZW4uLi5cIixcbiAgc29tZXRoaW5nX3dlbnRfd3Jvbmc6IFwiRXR3YXMgaXN0IHNjaGllZiBnZWxhdWZlblwiLFxuICBub19zdXBwb3J0ZWRfd2FsbGV0czogXCJFcyBnaWJ0IG5vY2gga2VpbmUgdW50ZXJzdMO8dHp0ZW4gV2FsbGV0XCIsXG4gIG5vX3dhbGxldHNfZm91bmQ6IFwia2VpbmUgV2FsbGV0IGdlZnVuZGVuXCJcbn07XG5cbnZhciBlbiA9IHtcbiAgY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQ6IFwiQ2hvb3NlIHlvdXIgcHJlZmVycmVkIHdhbGxldFwiLFxuICBjb25uZWN0X21vYmlsZV93YWxsZXQ6IFwiQ29ubmVjdCB0byBNb2JpbGUgV2FsbGV0XCIsXG4gIHNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0OiBcIlNjYW4gUVIgY29kZSB3aXRoIGEgV2FsbGV0Q29ubmVjdC1jb21wYXRpYmxlIHdhbGxldFwiLFxuICBjb25uZWN0OiBcIkNvbm5lY3RcIixcbiAgcXJjb2RlOiBcIlFSIENvZGVcIixcbiAgbW9iaWxlOiBcIk1vYmlsZVwiLFxuICBkZXNrdG9wOiBcIkRlc2t0b3BcIixcbiAgY29weV90b19jbGlwYm9hcmQ6IFwiQ29weSB0byBjbGlwYm9hcmRcIixcbiAgY29waWVkX3RvX2NsaXBib2FyZDogXCJDb3BpZWQgdG8gY2xpcGJvYXJkIVwiLFxuICBjb25uZWN0X3dpdGg6IFwiQ29ubmVjdCB3aXRoXCIsXG4gIGxvYWRpbmc6IFwiTG9hZGluZy4uLlwiLFxuICBzb21ldGhpbmdfd2VudF93cm9uZzogXCJTb21ldGhpbmcgd2VudCB3cm9uZ1wiLFxuICBub19zdXBwb3J0ZWRfd2FsbGV0czogXCJUaGVyZSBhcmUgbm8gc3VwcG9ydGVkIHdhbGxldHMgeWV0XCIsXG4gIG5vX3dhbGxldHNfZm91bmQ6IFwiTm8gd2FsbGV0cyBmb3VuZFwiXG59O1xuXG52YXIgZXMgPSB7XG4gIGNob29zZV9wcmVmZXJyZWRfd2FsbGV0OiBcIkVsaWdlIHR1IGJpbGxldGVyYSBwcmVmZXJpZGFcIixcbiAgY29ubmVjdF9tb2JpbGVfd2FsbGV0OiBcIkNvbmVjdGFyIGEgYmlsbGV0ZXJhIG3Ds3ZpbFwiLFxuICBzY2FuX3FyY29kZV93aXRoX3dhbGxldDogXCJFc2NhbmVhIGVsIGPDs2RpZ28gUVIgY29uIHVuYSBiaWxsZXRlcmEgY29tcGF0aWJsZSBjb24gV2FsbGV0Q29ubmVjdFwiLFxuICBjb25uZWN0OiBcIkNvbmVjdGFyXCIsXG4gIHFyY29kZTogXCJDw7NkaWdvIFFSXCIsXG4gIG1vYmlsZTogXCJNw7N2aWxcIixcbiAgZGVza3RvcDogXCJEZXNrdG9wXCIsXG4gIGNvcHlfdG9fY2xpcGJvYXJkOiBcIkNvcGlhclwiLFxuICBjb3BpZWRfdG9fY2xpcGJvYXJkOiBcIkNvcGlhZG8hXCIsXG4gIGNvbm5lY3Rfd2l0aDogXCJDb25lY3RhciBtZWRpYW50ZVwiLFxuICBsb2FkaW5nOiBcIkNhcmdhbmRvLi4uXCIsXG4gIHNvbWV0aGluZ193ZW50X3dyb25nOiBcIkFsZ28gc2FsacOzIG1hbFwiLFxuICBub19zdXBwb3J0ZWRfd2FsbGV0czogXCJUb2RhdsOtYSBubyBoYXkgYmlsbGV0ZXJhcyBjb21wYXRpYmxlc1wiLFxuICBub193YWxsZXRzX2ZvdW5kOiBcIk5vIHNlIGVuY29udHJhcm9uIGJpbGxldGVyYXNcIlxufTtcblxudmFyIGZyID0ge1xuICBjaG9vc2VfcHJlZmVycmVkX3dhbGxldDogXCJDaG9pc2lzc2V6IHZvdHJlIHBvcnRlZmV1aWxsZSBwcsOpZsOpcsOpXCIsXG4gIGNvbm5lY3RfbW9iaWxlX3dhbGxldDogXCJTZSBjb25uZWN0ZXIgYXUgcG9ydGVmZXVpbGxlIG1vYmlsZVwiLFxuICBzY2FuX3FyY29kZV93aXRoX3dhbGxldDogXCJTY2FubmV6IGxlIFFSIGNvZGUgYXZlYyB1biBwb3J0ZWZldWlsbGUgY29tcGF0aWJsZSBXYWxsZXRDb25uZWN0XCIsXG4gIGNvbm5lY3Q6IFwiU2UgY29ubmVjdGVyXCIsXG4gIHFyY29kZTogXCJRUiBDb2RlXCIsXG4gIG1vYmlsZTogXCJNb2JpbGVcIixcbiAgZGVza3RvcDogXCJEZXNrdG9wXCIsXG4gIGNvcHlfdG9fY2xpcGJvYXJkOiBcIkNvcGllclwiLFxuICBjb3BpZWRfdG9fY2xpcGJvYXJkOiBcIkNvcGnDqSFcIixcbiAgY29ubmVjdF93aXRoOiBcIkNvbm5lY3Rlei12b3VzIMOgIGwnYWlkZSBkZVwiLFxuICBsb2FkaW5nOiBcIkNoYXJnZW1lbnQuLi5cIixcbiAgc29tZXRoaW5nX3dlbnRfd3Jvbmc6IFwiUXVlbHF1ZSBjaG9zZSBhIG1hbCB0b3VybsOpXCIsXG4gIG5vX3N1cHBvcnRlZF93YWxsZXRzOiBcIklsIG4neSBhIHBhcyBlbmNvcmUgZGUgcG9ydGVmZXVpbGxlcyBwcmlzIGVuIGNoYXJnZVwiLFxuICBub193YWxsZXRzX2ZvdW5kOiBcIkF1Y3VuIHBvcnRlZmV1aWxsZSB0cm91dsOpXCJcbn07XG5cbnZhciBrbyA9IHtcbiAgY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQ6IFwi7JuQ7ZWY64qUIOyngOqwkeydhCDshKDtg53tlZjshLjsmpRcIixcbiAgY29ubmVjdF9tb2JpbGVfd2FsbGV0OiBcIuuqqOuwlOydvCDsp4DqsJHqs7wg7Jew6rKwXCIsXG4gIHNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0OiBcIldhbGxldENvbm5lY3Qg7KeA7JuQIOyngOqwkeyXkOyEnCBRUuy9lOuTnOulvCDsiqTsupTtlZjshLjsmpRcIixcbiAgY29ubmVjdDogXCLsl7DqsrBcIixcbiAgcXJjb2RlOiBcIlFSIOy9lOuTnFwiLFxuICBtb2JpbGU6IFwi66qo67CU7J28XCIsXG4gIGRlc2t0b3A6IFwi642w7Iqk7YGs7YORXCIsXG4gIGNvcHlfdG9fY2xpcGJvYXJkOiBcIu2BtOumveuztOuTnOyXkCDrs7XsgqxcIixcbiAgY29waWVkX3RvX2NsaXBib2FyZDogXCLtgbTrpr3rs7Trk5zsl5Ag67O17IKs65CY7JeI7Iq164uI64ukIVwiLFxuICBjb25uZWN0X3dpdGg6IFwi7JmAIOyXsOqysO2VmOuLpFwiLFxuICBsb2FkaW5nOiBcIuuhnOuTnCDspJEuLi5cIixcbiAgc29tZXRoaW5nX3dlbnRfd3Jvbmc6IFwi66y47KCc6rCAIOuwnOyDne2WiOyKteuLiOuLpC5cIixcbiAgbm9fc3VwcG9ydGVkX3dhbGxldHM6IFwi7JWE7KeBIOyngOybkOuQmOuKlCDsp4DqsJHsnbQg7JeG7Iq164uI64ukXCIsXG4gIG5vX3dhbGxldHNfZm91bmQ6IFwi7KeA6rCR7J2EIOywvuydhCDsiJgg7JeG7Iq164uI64ukXCJcbn07XG5cbnZhciBwdCA9IHtcbiAgY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQ6IFwiRXNjb2xoYSBzdWEgY2FydGVpcmEgcHJlZmVyaWRhXCIsXG4gIGNvbm5lY3RfbW9iaWxlX3dhbGxldDogXCJDb25lY3Rhci1zZSDDoCBjYXJ0ZWlyYSBtw7N2ZWxcIixcbiAgc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQ6IFwiTGVyIG8gY8OzZGlnbyBRUiBjb20gdW1hIGNhcnRlaXJhIGNvbXBhdMOtdmVsIGNvbSBXYWxsZXRDb25uZWN0XCIsXG4gIGNvbm5lY3Q6IFwiQ29uZWN0YXJcIixcbiAgcXJjb2RlOiBcIkPDs2RpZ28gUVJcIixcbiAgbW9iaWxlOiBcIk3Ds3ZlbFwiLFxuICBkZXNrdG9wOiBcIkRlc2t0b3BcIixcbiAgY29weV90b19jbGlwYm9hcmQ6IFwiQ29waWFyXCIsXG4gIGNvcGllZF90b19jbGlwYm9hcmQ6IFwiQ29waWFkbyFcIixcbiAgY29ubmVjdF93aXRoOiBcIkxpZ2FyIHBvciBtZWlvIGRlXCIsXG4gIGxvYWRpbmc6IFwiQ2FycmVnYW1lbnRvLi4uXCIsXG4gIHNvbWV0aGluZ193ZW50X3dyb25nOiBcIkFsZ28gY29ycmV1IG1hbFwiLFxuICBub19zdXBwb3J0ZWRfd2FsbGV0czogXCJBaW5kYSBuw6NvIGjDoSBjYXJ0ZWlyYXMgc3Vwb3J0YWRhc1wiLFxuICBub193YWxsZXRzX2ZvdW5kOiBcIk5lbmh1bWEgY2FydGVpcmEgZW5jb250cmFkYVwiXG59O1xuXG52YXIgemggPSB7XG4gIGNob29zZV9wcmVmZXJyZWRfd2FsbGV0OiBcIumAieaLqeS9oOeahOmSseWMhVwiLFxuICBjb25uZWN0X21vYmlsZV93YWxsZXQ6IFwi6L+e5o6l6Iez56e75Yqo56uv6ZKx5YyFXCIsXG4gIHNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0OiBcIuS9v+eUqOWFvOWuuSBXYWxsZXRDb25uZWN0IOeahOmSseWMheaJq+aPj+S6jOe7tOeggVwiLFxuICBjb25uZWN0OiBcIui/nuaOpVwiLFxuICBxcmNvZGU6IFwi5LqM57u056CBXCIsXG4gIG1vYmlsZTogXCLnp7vliqhcIixcbiAgZGVza3RvcDogXCLmoYzpnaJcIixcbiAgY29weV90b19jbGlwYm9hcmQ6IFwi5aSN5Yi25Yiw5Ymq6LS05p2/XCIsXG4gIGNvcGllZF90b19jbGlwYm9hcmQ6IFwi5aSN5Yi25Yiw5Ymq6LS05p2/5oiQ5Yqf77yBXCIsXG4gIGNvbm5lY3Rfd2l0aDogXCLpgJrov4fku6XkuIvmlrnlvI/ov57mjqVcIixcbiAgbG9hZGluZzogXCLmraPlnKjliqDovb0uLi5cIixcbiAgc29tZXRoaW5nX3dlbnRfd3Jvbmc6IFwi5Ye65LqG6Zeu6aKYXCIsXG4gIG5vX3N1cHBvcnRlZF93YWxsZXRzOiBcIuebruWJjei/mOayoeacieaUr+aMgeeahOmSseWMhVwiLFxuICBub193YWxsZXRzX2ZvdW5kOiBcIuayoeacieaJvuWIsOmSseWMhVwiXG59O1xuXG52YXIgZmEgPSB7XG4gIGNob29zZV9wcmVmZXJyZWRfd2FsbGV0OiBcItqp24zZgSDZvtmI2YQg2YXZiNix2K8g2YbYuNixINiu2YjYryDYsdinINin2YbYqtiu2KfYqCDaqdmG24zYr1wiLFxuICBjb25uZWN0X21vYmlsZV93YWxsZXQ6IFwi2KjZhyDaqduM2YEg2b7ZiNmEINmF2YjYqNin24zZhCDZiNi12YQg2LTZiNuM2K9cIixcbiAgc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQ6IFwi2qnYryBRUiDYsdinINio2Kcg24zaqSDaqduM2YEg2b7ZiNmEINiz2KfYstqv2KfYsSDYqNinIFdhbGxldENvbm5lY3Qg2KfYs9qp2YYg2qnZhtuM2K9cIixcbiAgY29ubmVjdDogXCLYp9iq2LXYp9mEXCIsXG4gIHFyY29kZTogXCLaqdivIFFSXCIsXG4gIG1vYmlsZTogXCLYs9uM2KfYsVwiLFxuICBkZXNrdG9wOiBcItiv2LPaqdiq2KfZvlwiLFxuICBjb3B5X3RvX2NsaXBib2FyZDogXCLaqdm+24wg2KjZhyDaqdmE24zZviDYqNmI2LHYr1wiLFxuICBjb3BpZWRfdG9fY2xpcGJvYXJkOiBcItiv2LEg2qnZhNuM2b4g2KjZiNix2K8g2qnZvtuMINi02K8hXCIsXG4gIGNvbm5lY3Rfd2l0aDogXCLYp9ix2KrYqNin2Lcg2KjYp1wiLFxuICBsb2FkaW5nOiBcIi4uLtio2KfYsdqv2LDYp9ix24xcIixcbiAgc29tZXRoaW5nX3dlbnRfd3Jvbmc6IFwi2YXYtNqp2YTbjCDZvtuM2LQg2KLZhdivXCIsXG4gIG5vX3N1cHBvcnRlZF93YWxsZXRzOiBcItmH2YbZiNiyINmH24zahiDaqduM2YEg2b7ZiNmEINm+2LTYqtuM2KjYp9mG24wg2LTYr9mHINin24wg2YjYrNmI2K8g2YbYr9in2LHYr1wiLFxuICBub193YWxsZXRzX2ZvdW5kOiBcItmH24zahiDaqduM2YEg2b7ZiNmE24wg2b7bjNiv2Kcg2YbYtNivXCJcbn07XG5cbnZhciBsYW5ndWFnZXMgPSB7XG4gIGRlOiBkZSxcbiAgZW46IGVuLFxuICBlczogZXMsXG4gIGZyOiBmcixcbiAga286IGtvLFxuICBwdDogcHQsXG4gIHpoOiB6aCxcbiAgZmE6IGZhXG59O1xuXG5mdW5jdGlvbiBpbmplY3RTdHlsZVNoZWV0KCkge1xuICB2YXIgZG9jID0gYnJvd3NlclV0aWxzLmdldERvY3VtZW50T3JUaHJvdygpO1xuICB2YXIgcHJldiA9IGRvYy5nZXRFbGVtZW50QnlJZChXQUxMRVRDT05ORUNUX1NUWUxFX0lEKTtcblxuICBpZiAocHJldikge1xuICAgIGRvYy5oZWFkLnJlbW92ZUNoaWxkKHByZXYpO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgc3R5bGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgV0FMTEVUQ09OTkVDVF9TVFlMRV9JRCk7XG4gIHN0eWxlLmlubmVyVGV4dCA9IFdBTExFVENPTk5FQ1RfU1RZTEVfU0hFRVQ7XG4gIGRvYy5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyV3JhcHBlcigpIHtcbiAgdmFyIGRvYyA9IGJyb3dzZXJVdGlscy5nZXREb2N1bWVudE9yVGhyb3coKTtcbiAgdmFyIHdyYXBwZXIgPSBkb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBXQUxMRVRDT05ORUNUX1dSQVBQRVJfSUQpO1xuICBkb2MuYm9keS5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJDbG9zZUFuaW1hdGlvbigpIHtcbiAgdmFyIGRvYyA9IGJyb3dzZXJVdGlscy5nZXREb2N1bWVudE9yVGhyb3coKTtcbiAgdmFyIG1vZGFsID0gZG9jLmdldEVsZW1lbnRCeUlkKFdBTExFVENPTk5FQ1RfTU9EQUxfSUQpO1xuXG4gIGlmIChtb2RhbCkge1xuICAgIG1vZGFsLmNsYXNzTmFtZSA9IG1vZGFsLmNsYXNzTmFtZS5yZXBsYWNlKFwiZmFkZUluXCIsIFwiZmFkZU91dFwiKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB3cmFwcGVyID0gZG9jLmdldEVsZW1lbnRCeUlkKFdBTExFVENPTk5FQ1RfV1JBUFBFUl9JRCk7XG5cbiAgICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICAgIGRvYy5ib2R5LnJlbW92ZUNoaWxkKHdyYXBwZXIpO1xuICAgICAgfVxuICAgIH0sIEFOSU1BVElPTl9EVVJBVElPTik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0V3JhcHBlZENhbGxiYWNrKGNiKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdHJpZ2dlckNsb3NlQW5pbWF0aW9uKCk7XG5cbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUZXh0KCkge1xuICB2YXIgbGFuZyA9IGJyb3dzZXJVdGlscy5nZXROYXZpZ2F0b3JPclRocm93KCkubGFuZ3VhZ2Uuc3BsaXQoXCItXCIpWzBdIHx8IFwiZW5cIjtcbiAgcmV0dXJuIGxhbmd1YWdlc1tsYW5nXSB8fCBsYW5ndWFnZXNbXCJlblwiXTtcbn1cblxuZnVuY3Rpb24gb3BlbiQxKHVyaSwgY2IsIHFyY29kZU1vZGFsT3B0aW9ucykge1xuICBpbmplY3RTdHlsZVNoZWV0KCk7XG4gIHZhciB3cmFwcGVyID0gcmVuZGVyV3JhcHBlcigpO1xuICBSZWFjdC5yZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwge1xuICAgIHRleHQ6IGdldFRleHQoKSxcbiAgICB1cmk6IHVyaSxcbiAgICBvbkNsb3NlOiBnZXRXcmFwcGVkQ2FsbGJhY2soY2IpLFxuICAgIHFyY29kZU1vZGFsT3B0aW9uczogcXJjb2RlTW9kYWxPcHRpb25zXG4gIH0pLCB3cmFwcGVyKTtcbn1cbmZ1bmN0aW9uIGNsb3NlJDEoKSB7XG4gIHRyaWdnZXJDbG9zZUFuaW1hdGlvbigpO1xufVxuXG52YXIgaXNOb2RlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gXCJ1bmRlZmluZWRcIjsgfTtcblxuZnVuY3Rpb24gb3BlbiQyKHVyaSwgY2IsIHFyY29kZU1vZGFsT3B0aW9ucykge1xuICBjb25zb2xlLmxvZyh1cmkpO1xuXG4gIGlmIChpc05vZGUoKSkge1xuICAgIG9wZW4odXJpKTtcbiAgfSBlbHNlIHtcbiAgICBvcGVuJDEodXJpLCBjYiwgcXJjb2RlTW9kYWxPcHRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9zZSQyKCkge1xuICBpZiAoaXNOb2RlKCkpIDsgZWxzZSB7XG4gICAgY2xvc2UkMSgpO1xuICB9XG59XG5cbnZhciBpbmRleCA9IHtcbiAgb3Blbjogb3BlbiQyLFxuICBjbG9zZTogY2xvc2UkMlxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbmRleDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuc3RyaXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZSA9IGV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IGV4cG9ydHMuZ2V0Q3J5cHRvID0gZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZXhwb3J0cy5nZXROYXZpZ2F0b3IgPSBleHBvcnRzLmdldE5hdmlnYXRvck9yVGhyb3cgPSBleHBvcnRzLmdldERvY3VtZW50ID0gZXhwb3J0cy5nZXREb2N1bWVudE9yVGhyb3cgPSBleHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZXhwb3J0cy5nZXRGcm9tV2luZG93ID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RnJvbVdpbmRvdyhuYW1lKSB7XG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJlcyA9IHdpbmRvd1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RnJvbVdpbmRvdyA9IGdldEZyb21XaW5kb3c7XG5mdW5jdGlvbiBnZXRGcm9tV2luZG93T3JUaHJvdyhuYW1lKSB7XG4gICAgY29uc3QgcmVzID0gZ2V0RnJvbVdpbmRvdyhuYW1lKTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGRlZmluZWQgaW4gV2luZG93YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZ2V0RnJvbVdpbmRvd09yVGhyb3c7XG5mdW5jdGlvbiBnZXREb2N1bWVudE9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50T3JUaHJvdyA9IGdldERvY3VtZW50T3JUaHJvdztcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQ7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3JPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcIm5hdmlnYXRvclwiKTtcbn1cbmV4cG9ydHMuZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IGdldE5hdmlnYXRvck9yVGhyb3c7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3IoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJuYXZpZ2F0b3JcIik7XG59XG5leHBvcnRzLmdldE5hdmlnYXRvciA9IGdldE5hdmlnYXRvcjtcbmZ1bmN0aW9uIGdldExvY2F0aW9uT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZ2V0TG9jYXRpb25PclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbjtcbmZ1bmN0aW9uIGdldENyeXB0b09yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiY3J5cHRvXCIpO1xufVxuZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZ2V0Q3J5cHRvT3JUaHJvdztcbmZ1bmN0aW9uIGdldENyeXB0bygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImNyeXB0b1wiKTtcbn1cbmV4cG9ydHMuZ2V0Q3J5cHRvID0gZ2V0Q3J5cHRvO1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhbFN0b3JhZ2VcIik7XG59XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSBnZXRMb2NhbFN0b3JhZ2VPclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibG9jYWxTdG9yYWdlXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2UgPSBnZXRMb2NhbFN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0V2luZG93TWV0YWRhdGEgPSB2b2lkIDA7XG5jb25zdCB3aW5kb3dfZ2V0dGVyc18xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzXCIpO1xuZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGEoKSB7XG4gICAgbGV0IGRvYztcbiAgICBsZXQgbG9jO1xuICAgIHRyeSB7XG4gICAgICAgIGRvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0RG9jdW1lbnRPclRocm93KCk7XG4gICAgICAgIGxvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0TG9jYXRpb25PclRocm93KCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJY29ucygpIHtcbiAgICAgICAgY29uc3QgbGlua3MgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuICAgICAgICBjb25zdCBpY29ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gbGlua3NbaV07XG4gICAgICAgICAgICBjb25zdCByZWwgPSBsaW5rLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICAgIGlmIChyZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImljb25cIikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBocmVmID0gbGluay5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cHM6XCIpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cDpcIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZi5pbmRleE9mKFwiLy9cIikgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWJzb2x1dGVIcmVmID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYuaW5kZXhPZihcIi9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gbG9jLnBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluYWxQYXRoID0gcGF0aC5qb2luKFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGZpbmFsUGF0aCArIFwiL1wiICsgaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZUhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaHJlZi5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGxvYy5wcm90b2NvbCArIGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5wdXNoKGhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpY29ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGFPZkFueSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG1ldGFUYWdzID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibWV0YVwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gbWV0YVRhZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW1wiaXRlbXByb3BcIiwgXCJwcm9wZXJ0eVwiLCBcIm5hbWVcIl1cbiAgICAgICAgICAgICAgICAubWFwKCh0YXJnZXQpID0+IHRhZy5nZXRBdHRyaWJ1dGUodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChhdHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuaW5jbHVkZXMoYXR0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMubGVuZ3RoICYmIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGFnLmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgICAgICBsZXQgbmFtZSA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJuYW1lXCIsIFwib2c6c2l0ZV9uYW1lXCIsIFwib2c6dGl0bGVcIiwgXCJ0d2l0dGVyOnRpdGxlXCIpO1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBkb2MudGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJkZXNjcmlwdGlvblwiLCBcIm9nOmRlc2NyaXB0aW9uXCIsIFwidHdpdHRlcjpkZXNjcmlwdGlvblwiLCBcImtleXdvcmRzXCIpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKCk7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBnZXREZXNjcmlwdGlvbigpO1xuICAgIGNvbnN0IHVybCA9IGxvYy5vcmlnaW47XG4gICAgY29uc3QgaWNvbnMgPSBnZXRJY29ucygpO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB1cmwsXG4gICAgICAgIGljb25zLFxuICAgICAgICBuYW1lLFxuICAgIH07XG4gICAgcmV0dXJuIG1ldGE7XG59XG5leHBvcnRzLmdldFdpbmRvd01ldGFkYXRhID0gZ2V0V2luZG93TWV0YWRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIFNlbWFwaG9yZV8xID0gcmVxdWlyZShcIi4vU2VtYXBob3JlXCIpO1xudmFyIE11dGV4ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE11dGV4KCkge1xuICAgICAgICB0aGlzLl9zZW1hcGhvcmUgPSBuZXcgU2VtYXBob3JlXzEuZGVmYXVsdCgxKTtcbiAgICB9XG4gICAgTXV0ZXgucHJvdG90eXBlLmFjcXVpcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCByZWxlYXNlcjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLl9zZW1hcGhvcmUuYWNxdWlyZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHJlbGVhc2VyID0gX2FbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVsZWFzZXJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE11dGV4LnByb3RvdHlwZS5ydW5FeGNsdXNpdmUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbWFwaG9yZS5ydW5FeGNsdXNpdmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGJhY2soKTsgfSk7XG4gICAgfTtcbiAgICBNdXRleC5wcm90b3R5cGUuaXNMb2NrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW1hcGhvcmUuaXNMb2NrZWQoKTtcbiAgICB9O1xuICAgIE11dGV4LnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zZW1hcGhvcmUucmVsZWFzZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIE11dGV4O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE11dGV4O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBTZW1hcGhvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2VtYXBob3JlKF9tYXhDb25jdXJyZW5jeSkge1xuICAgICAgICB0aGlzLl9tYXhDb25jdXJyZW5jeSA9IF9tYXhDb25jdXJyZW5jeTtcbiAgICAgICAgdGhpcy5fcXVldWUgPSBbXTtcbiAgICAgICAgaWYgKF9tYXhDb25jdXJyZW5jeSA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlbWFwaG9yZSBtdXN0IGJlIGluaXRpYWxpemVkIHRvIGEgcG9zaXRpdmUgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YWx1ZSA9IF9tYXhDb25jdXJyZW5jeTtcbiAgICB9XG4gICAgU2VtYXBob3JlLnByb3RvdHlwZS5hY3F1aXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbG9ja2VkID0gdGhpcy5pc0xvY2tlZCgpO1xuICAgICAgICB2YXIgdGlja2V0ID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIF90aGlzLl9xdWV1ZS5wdXNoKHIpOyB9KTtcbiAgICAgICAgaWYgKCFsb2NrZWQpXG4gICAgICAgICAgICB0aGlzLl9kaXNwYXRjaCgpO1xuICAgICAgICByZXR1cm4gdGlja2V0O1xuICAgIH07XG4gICAgU2VtYXBob3JlLnByb3RvdHlwZS5ydW5FeGNsdXNpdmUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIHZhbHVlLCByZWxlYXNlO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNxdWlyZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHZhbHVlID0gX2FbMF0sIHJlbGVhc2UgPSBfYVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsyLCAsIDQsIDVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNhbGxiYWNrKHZhbHVlKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFNlbWFwaG9yZS5wcm90b3R5cGUuaXNMb2NrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA8PSAwO1xuICAgIH07XG4gICAgU2VtYXBob3JlLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fbWF4Q29uY3VycmVuY3kgPiAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RoaXMgbWV0aG9kIGlzIHVuYXZhaWxhYmVsIG9uIHNlbWFwaG9yZXMgd2l0aCBjb25jdXJyZW5jeSA+IDE7IHVzZSB0aGUgc2NvcGVkIHJlbGVhc2UgcmV0dXJuZWQgYnkgYWNxdWlyZSBpbnN0ZWFkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRSZWxlYXNlcikge1xuICAgICAgICAgICAgdmFyIHJlbGVhc2VyID0gdGhpcy5fY3VycmVudFJlbGVhc2VyO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJlbGVhc2VyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVsZWFzZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VtYXBob3JlLnByb3RvdHlwZS5fZGlzcGF0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBuZXh0Q29uc3VtZXIgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xuICAgICAgICBpZiAoIW5leHRDb25zdW1lcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHJlbGVhc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRSZWxlYXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChyZWxlYXNlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICByZWxlYXNlZCA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5fdmFsdWUrKztcbiAgICAgICAgICAgIF90aGlzLl9kaXNwYXRjaCgpO1xuICAgICAgICB9O1xuICAgICAgICBuZXh0Q29uc3VtZXIoW3RoaXMuX3ZhbHVlLS0sIHRoaXMuX2N1cnJlbnRSZWxlYXNlcl0pO1xuICAgIH07XG4gICAgcmV0dXJuIFNlbWFwaG9yZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTZW1hcGhvcmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2l0aFRpbWVvdXQgPSBleHBvcnRzLlNlbWFwaG9yZSA9IGV4cG9ydHMuTXV0ZXggPSB2b2lkIDA7XG52YXIgTXV0ZXhfMSA9IHJlcXVpcmUoXCIuL011dGV4XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXV0ZXhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE11dGV4XzEuZGVmYXVsdDsgfSB9KTtcbnZhciBTZW1hcGhvcmVfMSA9IHJlcXVpcmUoXCIuL1NlbWFwaG9yZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlbWFwaG9yZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU2VtYXBob3JlXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB3aXRoVGltZW91dF8xID0gcmVxdWlyZShcIi4vd2l0aFRpbWVvdXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoVGltZW91dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2l0aFRpbWVvdXRfMS53aXRoVGltZW91dDsgfSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aXRoVGltZW91dCA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmZ1bmN0aW9uIHdpdGhUaW1lb3V0KHN5bmMsIHRpbWVvdXQsIHRpbWVvdXRFcnJvcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHRpbWVvdXRFcnJvciA9PT0gdm9pZCAwKSB7IHRpbWVvdXRFcnJvciA9IG5ldyBFcnJvcigndGltZW91dCcpOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWNxdWlyZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpc1RpbWVvdXQsIHRpY2tldCwgcmVsZWFzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVGltZW91dCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RpbWVvdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QodGltZW91dEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzeW5jLmFjcXVpcmUoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlja2V0ID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSA9IEFycmF5LmlzQXJyYXkodGlja2V0KSA/IHRpY2tldFsxXSA6IHRpY2tldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aWNrZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pOyB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcnVuRXhjbHVzaXZlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciByZWxlYXNlLCB0aWNrZXQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsICwgNywgOF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNxdWlyZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWNrZXQgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRpY2tldCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgPSB0aWNrZXRbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY2FsbGJhY2sodGlja2V0WzBdKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgPSB0aWNrZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY2FsbGJhY2soKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzMgLypicmVhayovLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVsZWFzZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3luYy5yZWxlYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzTG9ja2VkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzeW5jLmlzTG9ja2VkKCk7IH0sXG4gICAgfTtcbn1cbmV4cG9ydHMud2l0aFRpbWVvdXQgPSB3aXRoVGltZW91dDtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXN5bmNpZnk7XG5cbnZhciBfaXNPYmplY3QgPSByZXF1aXJlKCdsb2Rhc2gvaXNPYmplY3QnKTtcblxudmFyIF9pc09iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09iamVjdCk7XG5cbnZhciBfaW5pdGlhbFBhcmFtcyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvaW5pdGlhbFBhcmFtcycpO1xuXG52YXIgX2luaXRpYWxQYXJhbXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5pdGlhbFBhcmFtcyk7XG5cbnZhciBfc2V0SW1tZWRpYXRlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zZXRJbW1lZGlhdGUnKTtcblxudmFyIF9zZXRJbW1lZGlhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0SW1tZWRpYXRlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBUYWtlIGEgc3luYyBmdW5jdGlvbiBhbmQgbWFrZSBpdCBhc3luYywgcGFzc2luZyBpdHMgcmV0dXJuIHZhbHVlIHRvIGFcbiAqIGNhbGxiYWNrLiBUaGlzIGlzIHVzZWZ1bCBmb3IgcGx1Z2dpbmcgc3luYyBmdW5jdGlvbnMgaW50byBhIHdhdGVyZmFsbCxcbiAqIHNlcmllcywgb3Igb3RoZXIgYXN5bmMgZnVuY3Rpb25zLiBBbnkgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgZ2VuZXJhdGVkXG4gKiBmdW5jdGlvbiB3aWxsIGJlIHBhc3NlZCB0byB0aGUgd3JhcHBlZCBmdW5jdGlvbiAoZXhjZXB0IGZvciB0aGUgZmluYWxcbiAqIGNhbGxiYWNrIGFyZ3VtZW50KS4gRXJyb3JzIHRocm93biB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXG4gKlxuICogSWYgdGhlIGZ1bmN0aW9uIHBhc3NlZCB0byBgYXN5bmNpZnlgIHJldHVybnMgYSBQcm9taXNlLCB0aGF0IHByb21pc2VzJ3NcbiAqIHJlc29sdmVkL3JlamVjdGVkIHN0YXRlIHdpbGwgYmUgdXNlZCB0byBjYWxsIHRoZSBjYWxsYmFjaywgcmF0aGVyIHRoYW4gc2ltcGx5XG4gKiB0aGUgc3luY2hyb25vdXMgcmV0dXJuIHZhbHVlLlxuICpcbiAqIFRoaXMgYWxzbyBtZWFucyB5b3UgY2FuIGFzeW5jaWZ5IEVTMjAxNyBgYXN5bmNgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAbmFtZSBhc3luY2lmeVxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpVdGlsc1xuICogQG1ldGhvZFxuICogQGFsaWFzIHdyYXBTeW5jXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIFRoZSBzeW5jaHJvbm91cyBmdW5jdGlvbiwgb3IgUHJvbWlzZS1yZXR1cm5pbmdcbiAqIGZ1bmN0aW9uIHRvIGNvbnZlcnQgdG8gYW4ge0BsaW5rIEFzeW5jRnVuY3Rpb259LlxuICogQHJldHVybnMge0FzeW5jRnVuY3Rpb259IEFuIGFzeW5jaHJvbm91cyB3cmFwcGVyIG9mIHRoZSBgZnVuY2AuIFRvIGJlXG4gKiBpbnZva2VkIHdpdGggYChhcmdzLi4uLCBjYWxsYmFjaylgLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBwYXNzaW5nIGEgcmVndWxhciBzeW5jaHJvbm91cyBmdW5jdGlvblxuICogYXN5bmMud2F0ZXJmYWxsKFtcbiAqICAgICBhc3luYy5hcHBseShmcy5yZWFkRmlsZSwgZmlsZW5hbWUsIFwidXRmOFwiKSxcbiAqICAgICBhc3luYy5hc3luY2lmeShKU09OLnBhcnNlKSxcbiAqICAgICBmdW5jdGlvbiAoZGF0YSwgbmV4dCkge1xuICogICAgICAgICAvLyBkYXRhIGlzIHRoZSByZXN1bHQgb2YgcGFyc2luZyB0aGUgdGV4dC5cbiAqICAgICAgICAgLy8gSWYgdGhlcmUgd2FzIGEgcGFyc2luZyBlcnJvciwgaXQgd291bGQgaGF2ZSBiZWVuIGNhdWdodC5cbiAqICAgICB9XG4gKiBdLCBjYWxsYmFjayk7XG4gKlxuICogLy8gcGFzc2luZyBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHByb21pc2VcbiAqIGFzeW5jLndhdGVyZmFsbChbXG4gKiAgICAgYXN5bmMuYXBwbHkoZnMucmVhZEZpbGUsIGZpbGVuYW1lLCBcInV0ZjhcIiksXG4gKiAgICAgYXN5bmMuYXN5bmNpZnkoZnVuY3Rpb24gKGNvbnRlbnRzKSB7XG4gKiAgICAgICAgIHJldHVybiBkYi5tb2RlbC5jcmVhdGUoY29udGVudHMpO1xuICogICAgIH0pLFxuICogICAgIGZ1bmN0aW9uIChtb2RlbCwgbmV4dCkge1xuICogICAgICAgICAvLyBgbW9kZWxgIGlzIHRoZSBpbnN0YW50aWF0ZWQgbW9kZWwgb2JqZWN0LlxuICogICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYW4gZXJyb3IsIHRoaXMgZnVuY3Rpb24gd291bGQgYmUgc2tpcHBlZC5cbiAqICAgICB9XG4gKiBdLCBjYWxsYmFjayk7XG4gKlxuICogLy8gZXMyMDE3IGV4YW1wbGUsIHRob3VnaCBgYXN5bmNpZnlgIGlzIG5vdCBuZWVkZWQgaWYgeW91ciBKUyBlbnZpcm9ubWVudFxuICogLy8gc3VwcG9ydHMgYXN5bmMgZnVuY3Rpb25zIG91dCBvZiB0aGUgYm94XG4gKiB2YXIgcSA9IGFzeW5jLnF1ZXVlKGFzeW5jLmFzeW5jaWZ5KGFzeW5jIGZ1bmN0aW9uKGZpbGUpIHtcbiAqICAgICB2YXIgaW50ZXJtZWRpYXRlU3RlcCA9IGF3YWl0IHByb2Nlc3NGaWxlKGZpbGUpO1xuICogICAgIHJldHVybiBhd2FpdCBzb21lUHJvbWlzZShpbnRlcm1lZGlhdGVTdGVwKVxuICogfSkpO1xuICpcbiAqIHEucHVzaChmaWxlcyk7XG4gKi9cbmZ1bmN0aW9uIGFzeW5jaWZ5KGZ1bmMpIHtcbiAgICByZXR1cm4gKDAsIF9pbml0aWFsUGFyYW1zMi5kZWZhdWx0KShmdW5jdGlvbiAoYXJncywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiByZXN1bHQgaXMgUHJvbWlzZSBvYmplY3RcbiAgICAgICAgaWYgKCgwLCBfaXNPYmplY3QyLmRlZmF1bHQpKHJlc3VsdCkgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXN1bHQudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VDYWxsYmFjayhjYWxsYmFjaywgbnVsbCwgdmFsdWUpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIubWVzc2FnZSA/IGVyciA6IG5ldyBFcnJvcihlcnIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBpbnZva2VDYWxsYmFjayhjYWxsYmFjaywgZXJyb3IsIHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICgwLCBfc2V0SW1tZWRpYXRlMi5kZWZhdWx0KShyZXRocm93LCBlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJldGhyb3coZXJyb3IpIHtcbiAgICB0aHJvdyBlcnJvcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGVhY2hMaW1pdDtcblxudmFyIF9lYWNoT2ZMaW1pdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvZWFjaE9mTGltaXQnKTtcblxudmFyIF9lYWNoT2ZMaW1pdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lYWNoT2ZMaW1pdCk7XG5cbnZhciBfd2l0aG91dEluZGV4ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC93aXRob3V0SW5kZXgnKTtcblxudmFyIF93aXRob3V0SW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2l0aG91dEluZGV4KTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL2ludGVybmFsL3dyYXBBc3luYycpO1xuXG52YXIgX3dyYXBBc3luYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwQXN5bmMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFtgZWFjaGBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNofSBidXQgcnVucyBhIG1heGltdW0gb2YgYGxpbWl0YCBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBlYWNoTGltaXRcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmVhY2hde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNofVxuICogQGFsaWFzIGZvckVhY2hMaW1pdFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIFRoZSBhcnJheSBpbmRleCBpcyBub3QgcGFzc2VkIHRvIHRoZSBpdGVyYXRlZS5cbiAqIElmIHlvdSBuZWVkIHRoZSBpbmRleCwgdXNlIGBlYWNoT2ZMaW1pdGAuXG4gKiBJbnZva2VkIHdpdGggKGl0ZW0sIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbFxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBJbnZva2VkIHdpdGggKGVycikuXG4gKi9cbmZ1bmN0aW9uIGVhY2hMaW1pdChjb2xsLCBsaW1pdCwgaXRlcmF0ZWUsIGNhbGxiYWNrKSB7XG4gICgwLCBfZWFjaE9mTGltaXQyLmRlZmF1bHQpKGxpbWl0KShjb2xsLCAoMCwgX3dpdGhvdXRJbmRleDIuZGVmYXVsdCkoKDAsIF93cmFwQXN5bmMyLmRlZmF1bHQpKGl0ZXJhdGVlKSksIGNhbGxiYWNrKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoY29sbCwgaXRlcmF0ZWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGVhY2hPZkltcGxlbWVudGF0aW9uID0gKDAsIF9pc0FycmF5TGlrZTIuZGVmYXVsdCkoY29sbCkgPyBlYWNoT2ZBcnJheUxpa2UgOiBlYWNoT2ZHZW5lcmljO1xuICAgIGVhY2hPZkltcGxlbWVudGF0aW9uKGNvbGwsICgwLCBfd3JhcEFzeW5jMi5kZWZhdWx0KShpdGVyYXRlZSksIGNhbGxiYWNrKTtcbn07XG5cbnZhciBfaXNBcnJheUxpa2UgPSByZXF1aXJlKCdsb2Rhc2gvaXNBcnJheUxpa2UnKTtcblxudmFyIF9pc0FycmF5TGlrZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0FycmF5TGlrZSk7XG5cbnZhciBfYnJlYWtMb29wID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9icmVha0xvb3AnKTtcblxudmFyIF9icmVha0xvb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWtMb29wKTtcblxudmFyIF9lYWNoT2ZMaW1pdCA9IHJlcXVpcmUoJy4vZWFjaE9mTGltaXQnKTtcblxudmFyIF9lYWNoT2ZMaW1pdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lYWNoT2ZMaW1pdCk7XG5cbnZhciBfZG9MaW1pdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvZG9MaW1pdCcpO1xuXG52YXIgX2RvTGltaXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9MaW1pdCk7XG5cbnZhciBfbm9vcCA9IHJlcXVpcmUoJ2xvZGFzaC9ub29wJyk7XG5cbnZhciBfbm9vcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub29wKTtcblxudmFyIF9vbmNlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9vbmNlJyk7XG5cbnZhciBfb25jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmNlKTtcblxudmFyIF9vbmx5T25jZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvb25seU9uY2UnKTtcblxudmFyIF9vbmx5T25jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmx5T25jZSk7XG5cbnZhciBfd3JhcEFzeW5jID0gcmVxdWlyZSgnLi9pbnRlcm5hbC93cmFwQXN5bmMnKTtcblxudmFyIF93cmFwQXN5bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcEFzeW5jKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gZWFjaE9mIGltcGxlbWVudGF0aW9uIG9wdGltaXplZCBmb3IgYXJyYXktbGlrZXNcbmZ1bmN0aW9uIGVhY2hPZkFycmF5TGlrZShjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9ICgwLCBfb25jZTIuZGVmYXVsdCkoY2FsbGJhY2sgfHwgX25vb3AyLmRlZmF1bHQpO1xuICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgIGNvbXBsZXRlZCA9IDAsXG4gICAgICAgIGxlbmd0aCA9IGNvbGwubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXRlcmF0b3JDYWxsYmFjayhlcnIsIHZhbHVlKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH0gZWxzZSBpZiAoKytjb21wbGV0ZWQgPT09IGxlbmd0aCB8fCB2YWx1ZSA9PT0gX2JyZWFrTG9vcDIuZGVmYXVsdCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgaXRlcmF0ZWUoY29sbFtpbmRleF0sIGluZGV4LCAoMCwgX29ubHlPbmNlMi5kZWZhdWx0KShpdGVyYXRvckNhbGxiYWNrKSk7XG4gICAgfVxufVxuXG4vLyBhIGdlbmVyaWMgdmVyc2lvbiBvZiBlYWNoT2Ygd2hpY2ggY2FuIGhhbmRsZSBhcnJheSwgb2JqZWN0LCBhbmQgaXRlcmF0b3IgY2FzZXMuXG52YXIgZWFjaE9mR2VuZXJpYyA9ICgwLCBfZG9MaW1pdDIuZGVmYXVsdCkoX2VhY2hPZkxpbWl0Mi5kZWZhdWx0LCBJbmZpbml0eSk7XG5cbi8qKlxuICogTGlrZSBbYGVhY2hgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZWFjaH0sIGV4Y2VwdCB0aGF0IGl0IHBhc3NlcyB0aGUga2V5IChvciBpbmRleCkgYXMgdGhlIHNlY29uZCBhcmd1bWVudFxuICogdG8gdGhlIGl0ZXJhdGVlLlxuICpcbiAqIEBuYW1lIGVhY2hPZlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQGFsaWFzIGZvckVhY2hPZlxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBzZWUgW2FzeW5jLmVhY2hde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNofVxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEEgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaFxuICogaXRlbSBpbiBgY29sbGAuXG4gKiBUaGUgYGtleWAgaXMgdGhlIGl0ZW0ncyBrZXksIG9yIGluZGV4IGluIHRoZSBjYXNlIG9mIGFuIGFycmF5LlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBrZXksIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbFxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBJbnZva2VkIHdpdGggKGVycikuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmogPSB7ZGV2OiBcIi9kZXYuanNvblwiLCB0ZXN0OiBcIi90ZXN0Lmpzb25cIiwgcHJvZDogXCIvcHJvZC5qc29uXCJ9O1xuICogdmFyIGNvbmZpZ3MgPSB7fTtcbiAqXG4gKiBhc3luYy5mb3JFYWNoT2Yob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSwgY2FsbGJhY2spIHtcbiAqICAgICBmcy5yZWFkRmlsZShfX2Rpcm5hbWUgKyB2YWx1ZSwgXCJ1dGY4XCIsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAqICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gKiAgICAgICAgIHRyeSB7XG4gKiAgICAgICAgICAgICBjb25maWdzW2tleV0gPSBKU09OLnBhcnNlKGRhdGEpO1xuICogICAgICAgICB9IGNhdGNoIChlKSB7XG4gKiAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgICAgY2FsbGJhY2soKTtcbiAqICAgICB9KTtcbiAqIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgICBpZiAoZXJyKSBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlKTtcbiAqICAgICAvLyBjb25maWdzIGlzIG5vdyBhIG1hcCBvZiBKU09OIGRhdGFcbiAqICAgICBkb1NvbWV0aGluZ1dpdGgoY29uZmlncyk7XG4gKiB9KTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZWFjaE9mTGltaXQ7XG5cbnZhciBfZWFjaE9mTGltaXQyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9lYWNoT2ZMaW1pdCcpO1xuXG52YXIgX2VhY2hPZkxpbWl0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VhY2hPZkxpbWl0Mik7XG5cbnZhciBfd3JhcEFzeW5jID0gcmVxdWlyZSgnLi9pbnRlcm5hbC93cmFwQXN5bmMnKTtcblxudmFyIF93cmFwQXN5bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcEFzeW5jKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGVhY2hPZmBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNoT2Z9IGJ1dCBydW5zIGEgbWF4aW11bSBvZiBgbGltaXRgIGFzeW5jIG9wZXJhdGlvbnMgYXQgYVxuICogdGltZS5cbiAqXG4gKiBAbmFtZSBlYWNoT2ZMaW1pdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuZWFjaE9mXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZWFjaE9mfVxuICogQGFsaWFzIGZvckVhY2hPZkxpbWl0XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2hcbiAqIGl0ZW0gaW4gYGNvbGxgLiBUaGUgYGtleWAgaXMgdGhlIGl0ZW0ncyBrZXksIG9yIGluZGV4IGluIHRoZSBjYXNlIG9mIGFuXG4gKiBhcnJheS5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwga2V5LCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGxcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICovXG5mdW5jdGlvbiBlYWNoT2ZMaW1pdChjb2xsLCBsaW1pdCwgaXRlcmF0ZWUsIGNhbGxiYWNrKSB7XG4gICgwLCBfZWFjaE9mTGltaXQzLmRlZmF1bHQpKGxpbWl0KShjb2xsLCAoMCwgX3dyYXBBc3luYzIuZGVmYXVsdCkoaXRlcmF0ZWUpLCBjYWxsYmFjayk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZWFjaExpbWl0ID0gcmVxdWlyZSgnLi9lYWNoTGltaXQnKTtcblxudmFyIF9lYWNoTGltaXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaExpbWl0KTtcblxudmFyIF9kb0xpbWl0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9kb0xpbWl0Jyk7XG5cbnZhciBfZG9MaW1pdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb0xpbWl0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGVhY2hgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZWFjaH0gYnV0IHJ1bnMgb25seSBhIHNpbmdsZSBhc3luYyBvcGVyYXRpb24gYXQgYSB0aW1lLlxuICpcbiAqIEBuYW1lIGVhY2hTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmVhY2hde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNofVxuICogQGFsaWFzIGZvckVhY2hTZXJpZXNcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaFxuICogaXRlbSBpbiBgY29sbGAuXG4gKiBUaGUgYXJyYXkgaW5kZXggaXMgbm90IHBhc3NlZCB0byB0aGUgaXRlcmF0ZWUuXG4gKiBJZiB5b3UgbmVlZCB0aGUgaW5kZXgsIHVzZSBgZWFjaE9mU2VyaWVzYC5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gYWxsXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLCBvciBhbiBlcnJvciBvY2N1cnMuIEludm9rZWQgd2l0aCAoZXJyKS5cbiAqL1xuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9kb0xpbWl0Mi5kZWZhdWx0KShfZWFjaExpbWl0Mi5kZWZhdWx0LCAxKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLy8gQSB0ZW1wb3JhcnkgdmFsdWUgdXNlZCB0byBpZGVudGlmeSBpZiB0aGUgbG9vcCBzaG91bGQgYmUgYnJva2VuLlxuLy8gU2VlICMxMDY0LCAjMTI5M1xuZXhwb3J0cy5kZWZhdWx0ID0ge307XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkb0xpbWl0O1xuZnVuY3Rpb24gZG9MaW1pdChmbiwgbGltaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGl0ZXJhYmxlLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZuKGl0ZXJhYmxlLCBsaW1pdCwgaXRlcmF0ZWUsIGNhbGxiYWNrKTtcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRvUGFyYWxsZWw7XG5cbnZhciBfZWFjaE9mID0gcmVxdWlyZSgnLi4vZWFjaE9mJyk7XG5cbnZhciBfZWFjaE9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VhY2hPZik7XG5cbnZhciBfd3JhcEFzeW5jID0gcmVxdWlyZSgnLi93cmFwQXN5bmMnKTtcblxudmFyIF93cmFwQXN5bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcEFzeW5jKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZG9QYXJhbGxlbChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAob2JqLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZuKF9lYWNoT2YyLmRlZmF1bHQsIG9iaiwgKDAsIF93cmFwQXN5bmMyLmRlZmF1bHQpKGl0ZXJhdGVlKSwgY2FsbGJhY2spO1xuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9lYWNoT2ZMaW1pdDtcblxudmFyIF9ub29wID0gcmVxdWlyZSgnbG9kYXNoL25vb3AnKTtcblxudmFyIF9ub29wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX25vb3ApO1xuXG52YXIgX29uY2UgPSByZXF1aXJlKCcuL29uY2UnKTtcblxudmFyIF9vbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29uY2UpO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZSgnLi9pdGVyYXRvcicpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9vbmx5T25jZSA9IHJlcXVpcmUoJy4vb25seU9uY2UnKTtcblxudmFyIF9vbmx5T25jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmx5T25jZSk7XG5cbnZhciBfYnJlYWtMb29wID0gcmVxdWlyZSgnLi9icmVha0xvb3AnKTtcblxudmFyIF9icmVha0xvb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWtMb29wKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2VhY2hPZkxpbWl0KGxpbWl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9ICgwLCBfb25jZTIuZGVmYXVsdCkoY2FsbGJhY2sgfHwgX25vb3AyLmRlZmF1bHQpO1xuICAgICAgICBpZiAobGltaXQgPD0gMCB8fCAhb2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHRFbGVtID0gKDAsIF9pdGVyYXRvcjIuZGVmYXVsdCkob2JqKTtcbiAgICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIHJ1bm5pbmcgPSAwO1xuICAgICAgICB2YXIgbG9vcGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVlQ2FsbGJhY2soZXJyLCB2YWx1ZSkge1xuICAgICAgICAgICAgcnVubmluZyAtPSAxO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBfYnJlYWtMb29wMi5kZWZhdWx0IHx8IGRvbmUgJiYgcnVubmluZyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghbG9vcGluZykge1xuICAgICAgICAgICAgICAgIHJlcGxlbmlzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGVuaXNoKCkge1xuICAgICAgICAgICAgbG9vcGluZyA9IHRydWU7XG4gICAgICAgICAgICB3aGlsZSAocnVubmluZyA8IGxpbWl0ICYmICFkb25lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBuZXh0RWxlbSgpO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocnVubmluZyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJ1bm5pbmcgKz0gMTtcbiAgICAgICAgICAgICAgICBpdGVyYXRlZShlbGVtLnZhbHVlLCBlbGVtLmtleSwgKDAsIF9vbmx5T25jZTIuZGVmYXVsdCkoaXRlcmF0ZWVDYWxsYmFjaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9vcGluZyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVwbGVuaXNoKCk7XG4gICAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoY29sbCkge1xuICAgIHJldHVybiBpdGVyYXRvclN5bWJvbCAmJiBjb2xsW2l0ZXJhdG9yU3ltYm9sXSAmJiBjb2xsW2l0ZXJhdG9yU3ltYm9sXSgpO1xufTtcblxudmFyIGl0ZXJhdG9yU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgLyouLi5hcmdzLCBjYWxsYmFjayove1xuICAgICAgICB2YXIgYXJncyA9ICgwLCBfc2xpY2UyLmRlZmF1bHQpKGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgIGZuLmNhbGwodGhpcywgYXJncywgY2FsbGJhY2spO1xuICAgIH07XG59O1xuXG52YXIgX3NsaWNlID0gcmVxdWlyZSgnLi9zbGljZScpO1xuXG52YXIgX3NsaWNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsaWNlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpdGVyYXRvcjtcblxudmFyIF9pc0FycmF5TGlrZSA9IHJlcXVpcmUoJ2xvZGFzaC9pc0FycmF5TGlrZScpO1xuXG52YXIgX2lzQXJyYXlMaWtlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQXJyYXlMaWtlKTtcblxudmFyIF9nZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3InKTtcblxudmFyIF9nZXRJdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcik7XG5cbnZhciBfa2V5cyA9IHJlcXVpcmUoJ2xvZGFzaC9rZXlzJyk7XG5cbnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlJdGVyYXRvcihjb2xsKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICB2YXIgbGVuID0gY29sbC5sZW5ndGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIHJldHVybiArK2kgPCBsZW4gPyB7IHZhbHVlOiBjb2xsW2ldLCBrZXk6IGkgfSA6IG51bGw7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRVMyMDE1SXRlcmF0b3IoaXRlcmF0b3IpIHtcbiAgICB2YXIgaSA9IC0xO1xuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICB2YXIgaXRlbSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKGl0ZW0uZG9uZSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGkrKztcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGl0ZW0udmFsdWUsIGtleTogaSB9O1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdEl0ZXJhdG9yKG9iaikge1xuICAgIHZhciBva2V5cyA9ICgwLCBfa2V5czIuZGVmYXVsdCkob2JqKTtcbiAgICB2YXIgaSA9IC0xO1xuICAgIHZhciBsZW4gPSBva2V5cy5sZW5ndGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIHZhciBrZXkgPSBva2V5c1srK2ldO1xuICAgICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaSA8IGxlbiA/IHsgdmFsdWU6IG9ialtrZXldLCBrZXk6IGtleSB9IDogbnVsbDtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBpdGVyYXRvcihjb2xsKSB7XG4gICAgaWYgKCgwLCBfaXNBcnJheUxpa2UyLmRlZmF1bHQpKGNvbGwpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVBcnJheUl0ZXJhdG9yKGNvbGwpO1xuICAgIH1cblxuICAgIHZhciBpdGVyYXRvciA9ICgwLCBfZ2V0SXRlcmF0b3IyLmRlZmF1bHQpKGNvbGwpO1xuICAgIHJldHVybiBpdGVyYXRvciA/IGNyZWF0ZUVTMjAxNUl0ZXJhdG9yKGl0ZXJhdG9yKSA6IGNyZWF0ZU9iamVjdEl0ZXJhdG9yKGNvbGwpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfYXN5bmNNYXA7XG5cbnZhciBfbm9vcCA9IHJlcXVpcmUoJ2xvZGFzaC9ub29wJyk7XG5cbnZhciBfbm9vcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub29wKTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL3dyYXBBc3luYycpO1xuXG52YXIgX3dyYXBBc3luYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwQXN5bmMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfYXN5bmNNYXAoZWFjaGZuLCBhcnIsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgX25vb3AyLmRlZmF1bHQ7XG4gICAgYXJyID0gYXJyIHx8IFtdO1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgIHZhciBfaXRlcmF0ZWUgPSAoMCwgX3dyYXBBc3luYzIuZGVmYXVsdCkoaXRlcmF0ZWUpO1xuXG4gICAgZWFjaGZuKGFyciwgZnVuY3Rpb24gKHZhbHVlLCBfLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIF9pdGVyYXRlZSh2YWx1ZSwgZnVuY3Rpb24gKGVyciwgdikge1xuICAgICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSB2O1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdHMpO1xuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9uY2U7XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGZuID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIHZhciBjYWxsRm4gPSBmbjtcbiAgICAgICAgZm4gPSBudWxsO1xuICAgICAgICBjYWxsRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gb25seU9uY2U7XG5mdW5jdGlvbiBvbmx5T25jZShmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChmbiA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiQ2FsbGJhY2sgd2FzIGFscmVhZHkgY2FsbGVkLlwiKTtcbiAgICAgICAgdmFyIGNhbGxGbiA9IGZuO1xuICAgICAgICBmbiA9IG51bGw7XG4gICAgICAgIGNhbGxGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3BhcmFsbGVsO1xuXG52YXIgX25vb3AgPSByZXF1aXJlKCdsb2Rhc2gvbm9vcCcpO1xuXG52YXIgX25vb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbm9vcCk7XG5cbnZhciBfaXNBcnJheUxpa2UgPSByZXF1aXJlKCdsb2Rhc2gvaXNBcnJheUxpa2UnKTtcblxudmFyIF9pc0FycmF5TGlrZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0FycmF5TGlrZSk7XG5cbnZhciBfc2xpY2UgPSByZXF1aXJlKCcuL3NsaWNlJyk7XG5cbnZhciBfc2xpY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2UpO1xuXG52YXIgX3dyYXBBc3luYyA9IHJlcXVpcmUoJy4vd3JhcEFzeW5jJyk7XG5cbnZhciBfd3JhcEFzeW5jMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dyYXBBc3luYyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9wYXJhbGxlbChlYWNoZm4sIHRhc2tzLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgX25vb3AyLmRlZmF1bHQ7XG4gICAgdmFyIHJlc3VsdHMgPSAoMCwgX2lzQXJyYXlMaWtlMi5kZWZhdWx0KSh0YXNrcykgPyBbXSA6IHt9O1xuXG4gICAgZWFjaGZuKHRhc2tzLCBmdW5jdGlvbiAodGFzaywga2V5LCBjYWxsYmFjaykge1xuICAgICAgICAoMCwgX3dyYXBBc3luYzIuZGVmYXVsdCkodGFzaykoZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAoMCwgX3NsaWNlMi5kZWZhdWx0KShhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0c1trZXldID0gcmVzdWx0O1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdHMpO1xuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmhhc05leHRUaWNrID0gZXhwb3J0cy5oYXNTZXRJbW1lZGlhdGUgPSB1bmRlZmluZWQ7XG5leHBvcnRzLmZhbGxiYWNrID0gZmFsbGJhY2s7XG5leHBvcnRzLndyYXAgPSB3cmFwO1xuXG52YXIgX3NsaWNlID0gcmVxdWlyZSgnLi9zbGljZScpO1xuXG52YXIgX3NsaWNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsaWNlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGhhc1NldEltbWVkaWF0ZSA9IGV4cG9ydHMuaGFzU2V0SW1tZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBzZXRJbW1lZGlhdGU7XG52YXIgaGFzTmV4dFRpY2sgPSBleHBvcnRzLmhhc05leHRUaWNrID0gdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBmYWxsYmFjayhmbikge1xuICAgIHNldFRpbWVvdXQoZm4sIDApO1xufVxuXG5mdW5jdGlvbiB3cmFwKGRlZmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmbiAvKiwgLi4uYXJncyovKSB7XG4gICAgICAgIHZhciBhcmdzID0gKDAsIF9zbGljZTIuZGVmYXVsdCkoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbnZhciBfZGVmZXI7XG5cbmlmIChoYXNTZXRJbW1lZGlhdGUpIHtcbiAgICBfZGVmZXIgPSBzZXRJbW1lZGlhdGU7XG59IGVsc2UgaWYgKGhhc05leHRUaWNrKSB7XG4gICAgX2RlZmVyID0gcHJvY2Vzcy5uZXh0VGljaztcbn0gZWxzZSB7XG4gICAgX2RlZmVyID0gZmFsbGJhY2s7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHdyYXAoX2RlZmVyKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2xpY2U7XG5mdW5jdGlvbiBzbGljZShhcnJheUxpa2UsIHN0YXJ0KSB7XG4gICAgc3RhcnQgPSBzdGFydCB8IDA7XG4gICAgdmFyIG5ld0xlbiA9IE1hdGgubWF4KGFycmF5TGlrZS5sZW5ndGggLSBzdGFydCwgMCk7XG4gICAgdmFyIG5ld0FyciA9IEFycmF5KG5ld0xlbik7XG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbmV3TGVuOyBpZHgrKykge1xuICAgICAgICBuZXdBcnJbaWR4XSA9IGFycmF5TGlrZVtzdGFydCArIGlkeF07XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfd2l0aG91dEluZGV4O1xuZnVuY3Rpb24gX3dpdGhvdXRJbmRleChpdGVyYXRlZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUsIGNhbGxiYWNrKTtcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNBc3luYyA9IHVuZGVmaW5lZDtcblxudmFyIF9hc3luY2lmeSA9IHJlcXVpcmUoJy4uL2FzeW5jaWZ5Jyk7XG5cbnZhciBfYXN5bmNpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmNpZnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc3VwcG9ydHNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBpc0FzeW5jKGZuKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRzU3ltYm9sICYmIGZuW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdBc3luY0Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gd3JhcEFzeW5jKGFzeW5jRm4pIHtcbiAgICByZXR1cm4gaXNBc3luYyhhc3luY0ZuKSA/ICgwLCBfYXN5bmNpZnkyLmRlZmF1bHQpKGFzeW5jRm4pIDogYXN5bmNGbjtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gd3JhcEFzeW5jO1xuZXhwb3J0cy5pc0FzeW5jID0gaXNBc3luYzsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZG9QYXJhbGxlbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvZG9QYXJhbGxlbCcpO1xuXG52YXIgX2RvUGFyYWxsZWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9QYXJhbGxlbCk7XG5cbnZhciBfbWFwID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9tYXAnKTtcblxudmFyIF9tYXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBQcm9kdWNlcyBhIG5ldyBjb2xsZWN0aW9uIG9mIHZhbHVlcyBieSBtYXBwaW5nIGVhY2ggdmFsdWUgaW4gYGNvbGxgIHRocm91Z2hcbiAqIHRoZSBgaXRlcmF0ZWVgIGZ1bmN0aW9uLiBUaGUgYGl0ZXJhdGVlYCBpcyBjYWxsZWQgd2l0aCBhbiBpdGVtIGZyb20gYGNvbGxgXG4gKiBhbmQgYSBjYWxsYmFjayBmb3Igd2hlbiBpdCBoYXMgZmluaXNoZWQgcHJvY2Vzc2luZy4gRWFjaCBvZiB0aGVzZSBjYWxsYmFja1xuICogdGFrZXMgMiBhcmd1bWVudHM6IGFuIGBlcnJvcmAsIGFuZCB0aGUgdHJhbnNmb3JtZWQgaXRlbSBmcm9tIGBjb2xsYC4gSWZcbiAqIGBpdGVyYXRlZWAgcGFzc2VzIGFuIGVycm9yIHRvIGl0cyBjYWxsYmFjaywgdGhlIG1haW4gYGNhbGxiYWNrYCAoZm9yIHRoZVxuICogYG1hcGAgZnVuY3Rpb24pIGlzIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSBlcnJvci5cbiAqXG4gKiBOb3RlLCB0aGF0IHNpbmNlIHRoaXMgZnVuY3Rpb24gYXBwbGllcyB0aGUgYGl0ZXJhdGVlYCB0byBlYWNoIGl0ZW0gaW5cbiAqIHBhcmFsbGVsLCB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgYGl0ZXJhdGVlYCBmdW5jdGlvbnMgd2lsbCBjb21wbGV0ZVxuICogaW4gb3JkZXIuIEhvd2V2ZXIsIHRoZSByZXN1bHRzIGFycmF5IHdpbGwgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4gKiBvcmlnaW5hbCBgY29sbGAuXG4gKlxuICogSWYgYG1hcGAgaXMgcGFzc2VkIGFuIE9iamVjdCwgdGhlIHJlc3VsdHMgd2lsbCBiZSBhbiBBcnJheS4gIFRoZSByZXN1bHRzXG4gKiB3aWxsIHJvdWdobHkgYmUgaW4gdGhlIG9yZGVyIG9mIHRoZSBvcmlnaW5hbCBPYmplY3RzJyBrZXlzIChidXQgdGhpcyBjYW5cbiAqIHZhcnkgYWNyb3NzIEphdmFTY3JpcHQgZW5naW5lcykuXG4gKlxuICogQG5hbWUgbWFwXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggaXRlbSBpblxuICogYGNvbGxgLlxuICogVGhlIGl0ZXJhdGVlIHNob3VsZCBjb21wbGV0ZSB3aXRoIHRoZSB0cmFuc2Zvcm1lZCBpdGVtLlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGwgYGl0ZXJhdGVlYFxuICogZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gUmVzdWx0cyBpcyBhbiBBcnJheSBvZiB0aGVcbiAqIHRyYW5zZm9ybWVkIGl0ZW1zIGZyb20gdGhlIGBjb2xsYC4gSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpLlxuICogQGV4YW1wbGVcbiAqXG4gKiBhc3luYy5tYXAoWydmaWxlMScsJ2ZpbGUyJywnZmlsZTMnXSwgZnMuc3RhdCwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gKiAgICAgLy8gcmVzdWx0cyBpcyBub3cgYW4gYXJyYXkgb2Ygc3RhdHMgZm9yIGVhY2ggZmlsZVxuICogfSk7XG4gKi9cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfZG9QYXJhbGxlbDIuZGVmYXVsdCkoX21hcDIuZGVmYXVsdCk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwYXJhbGxlbExpbWl0O1xuXG52YXIgX2VhY2hPZiA9IHJlcXVpcmUoJy4vZWFjaE9mJyk7XG5cbnZhciBfZWFjaE9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VhY2hPZik7XG5cbnZhciBfcGFyYWxsZWwgPSByZXF1aXJlKCcuL2ludGVybmFsL3BhcmFsbGVsJyk7XG5cbnZhciBfcGFyYWxsZWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyYWxsZWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFJ1biB0aGUgYHRhc2tzYCBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucyBpbiBwYXJhbGxlbCwgd2l0aG91dCB3YWl0aW5nIHVudGlsXG4gKiB0aGUgcHJldmlvdXMgZnVuY3Rpb24gaGFzIGNvbXBsZXRlZC4gSWYgYW55IG9mIHRoZSBmdW5jdGlvbnMgcGFzcyBhbiBlcnJvciB0b1xuICogaXRzIGNhbGxiYWNrLCB0aGUgbWFpbiBgY2FsbGJhY2tgIGlzIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSB2YWx1ZSBvZiB0aGVcbiAqIGVycm9yLiBPbmNlIHRoZSBgdGFza3NgIGhhdmUgY29tcGxldGVkLCB0aGUgcmVzdWx0cyBhcmUgcGFzc2VkIHRvIHRoZSBmaW5hbFxuICogYGNhbGxiYWNrYCBhcyBhbiBhcnJheS5cbiAqXG4gKiAqKk5vdGU6KiogYHBhcmFsbGVsYCBpcyBhYm91dCBraWNraW5nLW9mZiBJL08gdGFza3MgaW4gcGFyYWxsZWwsIG5vdCBhYm91dFxuICogcGFyYWxsZWwgZXhlY3V0aW9uIG9mIGNvZGUuICBJZiB5b3VyIHRhc2tzIGRvIG5vdCB1c2UgYW55IHRpbWVycyBvciBwZXJmb3JtXG4gKiBhbnkgSS9PLCB0aGV5IHdpbGwgYWN0dWFsbHkgYmUgZXhlY3V0ZWQgaW4gc2VyaWVzLiAgQW55IHN5bmNocm9ub3VzIHNldHVwXG4gKiBzZWN0aW9ucyBmb3IgZWFjaCB0YXNrIHdpbGwgaGFwcGVuIG9uZSBhZnRlciB0aGUgb3RoZXIuICBKYXZhU2NyaXB0IHJlbWFpbnNcbiAqIHNpbmdsZS10aHJlYWRlZC5cbiAqXG4gKiAqKkhpbnQ6KiogVXNlIFtgcmVmbGVjdGBde0BsaW5rIG1vZHVsZTpVdGlscy5yZWZsZWN0fSB0byBjb250aW51ZSB0aGVcbiAqIGV4ZWN1dGlvbiBvZiBvdGhlciB0YXNrcyB3aGVuIGEgdGFzayBmYWlscy5cbiAqXG4gKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHVzZSBhbiBvYmplY3QgaW5zdGVhZCBvZiBhbiBhcnJheS4gRWFjaCBwcm9wZXJ0eSB3aWxsXG4gKiBiZSBydW4gYXMgYSBmdW5jdGlvbiBhbmQgdGhlIHJlc3VsdHMgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGZpbmFsIGBjYWxsYmFja2BcbiAqIGFzIGFuIG9iamVjdCBpbnN0ZWFkIG9mIGFuIGFycmF5LiBUaGlzIGNhbiBiZSBhIG1vcmUgcmVhZGFibGUgd2F5IG9mIGhhbmRsaW5nXG4gKiByZXN1bHRzIGZyb20ge0BsaW5rIGFzeW5jLnBhcmFsbGVsfS5cbiAqXG4gKiBAbmFtZSBwYXJhbGxlbFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb250cm9sRmxvd1xuICogQG1ldGhvZFxuICogQGNhdGVnb3J5IENvbnRyb2wgRmxvd1xuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IHRhc2tzIC0gQSBjb2xsZWN0aW9uIG9mXG4gKiBbYXN5bmMgZnVuY3Rpb25zXXtAbGluayBBc3luY0Z1bmN0aW9ufSB0byBydW4uXG4gKiBFYWNoIGFzeW5jIGZ1bmN0aW9uIGNhbiBjb21wbGV0ZSB3aXRoIGFueSBudW1iZXIgb2Ygb3B0aW9uYWwgYHJlc3VsdGAgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIHJ1biBvbmNlIGFsbCB0aGVcbiAqIGZ1bmN0aW9ucyBoYXZlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuIFRoaXMgZnVuY3Rpb24gZ2V0cyBhIHJlc3VsdHMgYXJyYXlcbiAqIChvciBvYmplY3QpIGNvbnRhaW5pbmcgYWxsIHRoZSByZXN1bHQgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgdGFzayBjYWxsYmFja3MuXG4gKiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0cykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGFzeW5jLnBhcmFsbGVsKFtcbiAqICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScpO1xuICogICAgICAgICB9LCAyMDApO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICd0d28nKTtcbiAqICAgICAgICAgfSwgMTAwKTtcbiAqICAgICB9XG4gKiBdLFxuICogLy8gb3B0aW9uYWwgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICogICAgIC8vIHRoZSByZXN1bHRzIGFycmF5IHdpbGwgZXF1YWwgWydvbmUnLCd0d28nXSBldmVuIHRob3VnaFxuICogICAgIC8vIHRoZSBzZWNvbmQgZnVuY3Rpb24gaGFkIGEgc2hvcnRlciB0aW1lb3V0LlxuICogfSk7XG4gKlxuICogLy8gYW4gZXhhbXBsZSB1c2luZyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhbiBhcnJheVxuICogYXN5bmMucGFyYWxsZWwoe1xuICogICAgIG9uZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIDEpO1xuICogICAgICAgICB9LCAyMDApO1xuICogICAgIH0sXG4gKiAgICAgdHdvOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgMik7XG4gKiAgICAgICAgIH0sIDEwMCk7XG4gKiAgICAgfVxuICogfSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gKiAgICAgLy8gcmVzdWx0cyBpcyBub3cgZXF1YWxzIHRvOiB7b25lOiAxLCB0d286IDJ9XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gcGFyYWxsZWxMaW1pdCh0YXNrcywgY2FsbGJhY2spIHtcbiAgKDAsIF9wYXJhbGxlbDIuZGVmYXVsdCkoX2VhY2hPZjIuZGVmYXVsdCwgdGFza3MsIGNhbGxiYWNrKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAodGFza3MsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSAoMCwgX29uY2UyLmRlZmF1bHQpKGNhbGxiYWNrIHx8IF9ub29wMi5kZWZhdWx0KTtcbiAgICBpZiAoISgwLCBfaXNBcnJheTIuZGVmYXVsdCkodGFza3MpKSByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdGaXJzdCBhcmd1bWVudCB0byB3YXRlcmZhbGwgbXVzdCBiZSBhbiBhcnJheSBvZiBmdW5jdGlvbnMnKSk7XG4gICAgaWYgKCF0YXNrcy5sZW5ndGgpIHJldHVybiBjYWxsYmFjaygpO1xuICAgIHZhciB0YXNrSW5kZXggPSAwO1xuXG4gICAgZnVuY3Rpb24gbmV4dFRhc2soYXJncykge1xuICAgICAgICB2YXIgdGFzayA9ICgwLCBfd3JhcEFzeW5jMi5kZWZhdWx0KSh0YXNrc1t0YXNrSW5kZXgrK10pO1xuICAgICAgICBhcmdzLnB1c2goKDAsIF9vbmx5T25jZTIuZGVmYXVsdCkobmV4dCkpO1xuICAgICAgICB0YXNrLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5leHQoZXJyIC8qLCAuLi5hcmdzKi8pIHtcbiAgICAgICAgaWYgKGVyciB8fCB0YXNrSW5kZXggPT09IHRhc2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dFRhc2soKDAsIF9zbGljZTIuZGVmYXVsdCkoYXJndW1lbnRzLCAxKSk7XG4gICAgfVxuXG4gICAgbmV4dFRhc2soW10pO1xufTtcblxudmFyIF9pc0FycmF5ID0gcmVxdWlyZSgnbG9kYXNoL2lzQXJyYXknKTtcblxudmFyIF9pc0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQXJyYXkpO1xuXG52YXIgX25vb3AgPSByZXF1aXJlKCdsb2Rhc2gvbm9vcCcpO1xuXG52YXIgX25vb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbm9vcCk7XG5cbnZhciBfb25jZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvb25jZScpO1xuXG52YXIgX29uY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25jZSk7XG5cbnZhciBfc2xpY2UgPSByZXF1aXJlKCcuL2ludGVybmFsL3NsaWNlJyk7XG5cbnZhciBfc2xpY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2UpO1xuXG52YXIgX29ubHlPbmNlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9vbmx5T25jZScpO1xuXG52YXIgX29ubHlPbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29ubHlPbmNlKTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL2ludGVybmFsL3dyYXBBc3luYycpO1xuXG52YXIgX3dyYXBBc3luYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwQXN5bmMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqXG4gKiBSdW5zIHRoZSBgdGFza3NgIGFycmF5IG9mIGZ1bmN0aW9ucyBpbiBzZXJpZXMsIGVhY2ggcGFzc2luZyB0aGVpciByZXN1bHRzIHRvXG4gKiB0aGUgbmV4dCBpbiB0aGUgYXJyYXkuIEhvd2V2ZXIsIGlmIGFueSBvZiB0aGUgYHRhc2tzYCBwYXNzIGFuIGVycm9yIHRvIHRoZWlyXG4gKiBvd24gY2FsbGJhY2ssIHRoZSBuZXh0IGZ1bmN0aW9uIGlzIG5vdCBleGVjdXRlZCwgYW5kIHRoZSBtYWluIGBjYWxsYmFja2AgaXNcbiAqIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSBlcnJvci5cbiAqXG4gKiBAbmFtZSB3YXRlcmZhbGxcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXl9IHRhc2tzIC0gQW4gYXJyYXkgb2YgW2FzeW5jIGZ1bmN0aW9uc117QGxpbmsgQXN5bmNGdW5jdGlvbn1cbiAqIHRvIHJ1bi5cbiAqIEVhY2ggZnVuY3Rpb24gc2hvdWxkIGNvbXBsZXRlIHdpdGggYW55IG51bWJlciBvZiBgcmVzdWx0YCB2YWx1ZXMuXG4gKiBUaGUgYHJlc3VsdGAgdmFsdWVzIHdpbGwgYmUgcGFzc2VkIGFzIGFyZ3VtZW50cywgaW4gb3JkZXIsIHRvIHRoZSBuZXh0IHRhc2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gcnVuIG9uY2UgYWxsIHRoZVxuICogZnVuY3Rpb25zIGhhdmUgY29tcGxldGVkLiBUaGlzIHdpbGwgYmUgcGFzc2VkIHRoZSByZXN1bHRzIG9mIHRoZSBsYXN0IHRhc2snc1xuICogY2FsbGJhY2suIEludm9rZWQgd2l0aCAoZXJyLCBbcmVzdWx0c10pLlxuICogQHJldHVybnMgdW5kZWZpbmVkXG4gKiBAZXhhbXBsZVxuICpcbiAqIGFzeW5jLndhdGVyZmFsbChbXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScsICd0d28nKTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIC8vIGFyZzEgbm93IGVxdWFscyAnb25lJyBhbmQgYXJnMiBub3cgZXF1YWxzICd0d28nXG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsICd0aHJlZScpO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oYXJnMSwgY2FsbGJhY2spIHtcbiAqICAgICAgICAgLy8gYXJnMSBub3cgZXF1YWxzICd0aHJlZSdcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ2RvbmUnKTtcbiAqICAgICB9XG4gKiBdLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyByZXN1bHQgbm93IGVxdWFscyAnZG9uZSdcbiAqIH0pO1xuICpcbiAqIC8vIE9yLCB3aXRoIG5hbWVkIGZ1bmN0aW9uczpcbiAqIGFzeW5jLndhdGVyZmFsbChbXG4gKiAgICAgbXlGaXJzdEZ1bmN0aW9uLFxuICogICAgIG15U2Vjb25kRnVuY3Rpb24sXG4gKiAgICAgbXlMYXN0RnVuY3Rpb24sXG4gKiBdLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyByZXN1bHQgbm93IGVxdWFscyAnZG9uZSdcbiAqIH0pO1xuICogZnVuY3Rpb24gbXlGaXJzdEZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScsICd0d28nKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIG15U2Vjb25kRnVuY3Rpb24oYXJnMSwgYXJnMiwgY2FsbGJhY2spIHtcbiAqICAgICAvLyBhcmcxIG5vdyBlcXVhbHMgJ29uZScgYW5kIGFyZzIgbm93IGVxdWFscyAndHdvJ1xuICogICAgIGNhbGxiYWNrKG51bGwsICd0aHJlZScpO1xuICogfVxuICogZnVuY3Rpb24gbXlMYXN0RnVuY3Rpb24oYXJnMSwgY2FsbGJhY2spIHtcbiAqICAgICAvLyBhcmcxIG5vdyBlcXVhbHMgJ3RocmVlJ1xuICogICAgIGNhbGxiYWNrKG51bGwsICdkb25lJyk7XG4gKiB9XG4gKi8iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGRlc2VsZWN0Q3VycmVudCA9IHJlcXVpcmUoXCJ0b2dnbGUtc2VsZWN0aW9uXCIpO1xuXG52YXIgY2xpcGJvYXJkVG9JRTExRm9ybWF0dGluZyA9IHtcbiAgXCJ0ZXh0L3BsYWluXCI6IFwiVGV4dFwiLFxuICBcInRleHQvaHRtbFwiOiBcIlVybFwiLFxuICBcImRlZmF1bHRcIjogXCJUZXh0XCJcbn1cblxudmFyIGRlZmF1bHRNZXNzYWdlID0gXCJDb3B5IHRvIGNsaXBib2FyZDogI3trZXl9LCBFbnRlclwiO1xuXG5mdW5jdGlvbiBmb3JtYXQobWVzc2FnZSkge1xuICB2YXIgY29weUtleSA9ICgvbWFjIG9zIHgvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gXCLijJhcIiA6IFwiQ3RybFwiKSArIFwiK0NcIjtcbiAgcmV0dXJuIG1lc3NhZ2UucmVwbGFjZSgvI3tcXHMqa2V5XFxzKn0vZywgY29weUtleSk7XG59XG5cbmZ1bmN0aW9uIGNvcHkodGV4dCwgb3B0aW9ucykge1xuICB2YXIgZGVidWcsXG4gICAgbWVzc2FnZSxcbiAgICByZXNlbGVjdFByZXZpb3VzLFxuICAgIHJhbmdlLFxuICAgIHNlbGVjdGlvbixcbiAgICBtYXJrLFxuICAgIHN1Y2Nlc3MgPSBmYWxzZTtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZyB8fCBmYWxzZTtcbiAgdHJ5IHtcbiAgICByZXNlbGVjdFByZXZpb3VzID0gZGVzZWxlY3RDdXJyZW50KCk7XG5cbiAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICBtYXJrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgbWFyay50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgLy8gcmVzZXQgdXNlciBzdHlsZXMgZm9yIHNwYW4gZWxlbWVudFxuICAgIG1hcmsuc3R5bGUuYWxsID0gXCJ1bnNldFwiO1xuICAgIC8vIHByZXZlbnRzIHNjcm9sbGluZyB0byB0aGUgZW5kIG9mIHRoZSBwYWdlXG4gICAgbWFyay5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICBtYXJrLnN0eWxlLnRvcCA9IDA7XG4gICAgbWFyay5zdHlsZS5jbGlwID0gXCJyZWN0KDAsIDAsIDAsIDApXCI7XG4gICAgLy8gdXNlZCB0byBwcmVzZXJ2ZSBzcGFjZXMgYW5kIGxpbmUgYnJlYWtzXG4gICAgbWFyay5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmVcIjtcbiAgICAvLyBkbyBub3QgaW5oZXJpdCB1c2VyLXNlbGVjdCAoaXQgbWF5IGJlIGBub25lYClcbiAgICBtYXJrLnN0eWxlLndlYmtpdFVzZXJTZWxlY3QgPSBcInRleHRcIjtcbiAgICBtYXJrLnN0eWxlLk1velVzZXJTZWxlY3QgPSBcInRleHRcIjtcbiAgICBtYXJrLnN0eWxlLm1zVXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUudXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuYWRkRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChvcHRpb25zLmZvcm1hdCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgZS5jbGlwYm9hcmREYXRhID09PSBcInVuZGVmaW5lZFwiKSB7IC8vIElFIDExXG4gICAgICAgICAgZGVidWcgJiYgY29uc29sZS53YXJuKFwidW5hYmxlIHRvIHVzZSBlLmNsaXBib2FyZERhdGFcIik7XG4gICAgICAgICAgZGVidWcgJiYgY29uc29sZS53YXJuKFwidHJ5aW5nIElFIHNwZWNpZmljIHN0dWZmXCIpO1xuICAgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhLmNsZWFyRGF0YSgpO1xuICAgICAgICAgIHZhciBmb3JtYXQgPSBjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nW29wdGlvbnMuZm9ybWF0XSB8fCBjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nW1wiZGVmYXVsdFwiXVxuICAgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEoZm9ybWF0LCB0ZXh0KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICAgICAgZS5jbGlwYm9hcmREYXRhLmNsZWFyRGF0YSgpO1xuICAgICAgICAgIGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKG9wdGlvbnMuZm9ybWF0LCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMub25Db3B5KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb3B0aW9ucy5vbkNvcHkoZS5jbGlwYm9hcmREYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFyayk7XG5cbiAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobWFyayk7XG4gICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcblxuICAgIHZhciBzdWNjZXNzZnVsID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgIGlmICghc3VjY2Vzc2Z1bCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29weSBjb21tYW5kIHdhcyB1bnN1Y2Nlc3NmdWxcIik7XG4gICAgfVxuICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWJ1ZyAmJiBjb25zb2xlLmVycm9yKFwidW5hYmxlIHRvIGNvcHkgdXNpbmcgZXhlY0NvbW1hbmQ6IFwiLCBlcnIpO1xuICAgIGRlYnVnICYmIGNvbnNvbGUud2FybihcInRyeWluZyBJRSBzcGVjaWZpYyBzdHVmZlwiKTtcbiAgICB0cnkge1xuICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YShvcHRpb25zLmZvcm1hdCB8fCBcInRleHRcIiwgdGV4dCk7XG4gICAgICBvcHRpb25zLm9uQ29weSAmJiBvcHRpb25zLm9uQ29weSh3aW5kb3cuY2xpcGJvYXJkRGF0YSk7XG4gICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGRlYnVnICYmIGNvbnNvbGUuZXJyb3IoXCJ1bmFibGUgdG8gY29weSB1c2luZyBjbGlwYm9hcmREYXRhOiBcIiwgZXJyKTtcbiAgICAgIGRlYnVnICYmIGNvbnNvbGUuZXJyb3IoXCJmYWxsaW5nIGJhY2sgdG8gcHJvbXB0XCIpO1xuICAgICAgbWVzc2FnZSA9IGZvcm1hdChcIm1lc3NhZ2VcIiBpbiBvcHRpb25zID8gb3B0aW9ucy5tZXNzYWdlIDogZGVmYXVsdE1lc3NhZ2UpO1xuICAgICAgd2luZG93LnByb21wdChtZXNzYWdlLCB0ZXh0KTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgaWYgKHR5cGVvZiBzZWxlY3Rpb24ucmVtb3ZlUmFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVSYW5nZShyYW5nZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hcmspIHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobWFyayk7XG4gICAgfVxuICAgIHJlc2VsZWN0UHJldmlvdXMoKTtcbiAgfVxuXG4gIHJldHVybiBzdWNjZXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9rZW4gPSAnJVthLWYwLTldezJ9JztcbnZhciBzaW5nbGVNYXRjaGVyID0gbmV3IFJlZ0V4cCh0b2tlbiwgJ2dpJyk7XG52YXIgbXVsdGlNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpKycsICdnaScpO1xuXG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0KSB7XG5cdHRyeSB7XG5cdFx0Ly8gVHJ5IHRvIGRlY29kZSB0aGUgZW50aXJlIHN0cmluZyBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIERvIG5vdGhpbmdcblx0fVxuXG5cdGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBjb21wb25lbnRzO1xuXHR9XG5cblx0c3BsaXQgPSBzcGxpdCB8fCAxO1xuXG5cdC8vIFNwbGl0IHRoZSBhcnJheSBpbiAyIHBhcnRzXG5cdHZhciBsZWZ0ID0gY29tcG9uZW50cy5zbGljZSgwLCBzcGxpdCk7XG5cdHZhciByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHZhciB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0dmFyIHJlcGxhY2VNYXAgPSB7XG5cdFx0JyVGRSVGRic6ICdcXHVGRkZEXFx1RkZGRCcsXG5cdFx0JyVGRiVGRSc6ICdcXHVGRkZEXFx1RkZGRCdcblx0fTtcblxuXHR2YXIgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGRlY29kZShtYXRjaFswXSk7XG5cblx0XHRcdGlmIChyZXN1bHQgIT09IG1hdGNoWzBdKSB7XG5cdFx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR9XG5cblx0Ly8gQWRkIGAlQzJgIGF0IHRoZSBlbmQgb2YgdGhlIG1hcCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgcmVwbGFjZSB0aGUgY29tYmluYXRvciBiZWZvcmUgZXZlcnl0aGluZyBlbHNlXG5cdHJlcGxhY2VNYXBbJyVDMiddID0gJ1xcdUZGRkQnO1xuXG5cdHZhciBlbnRyaWVzID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gUmVwbGFjZSBhbGwgZGVjb2RlZCBjb21wb25lbnRzXG5cdFx0dmFyIGtleSA9IGVudHJpZXNbaV07XG5cdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZycpLCByZXBsYWNlTWFwW2tleV0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRlbmNvZGVkVVJJID0gZW5jb2RlZFVSSS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcblxuXHRcdC8vIFRyeSB0aGUgYnVpbHQgaW4gZGVjb2RlciBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIEZhbGxiYWNrIHRvIGEgbW9yZSBhZHZhbmNlZCBkZWNvZGVyXG5cdFx0cmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ3JlYXRlZCAyMDA4LTA4LTE5LlxuICpcbiAqIERpamtzdHJhIHBhdGgtZmluZGluZyBmdW5jdGlvbnMuIEFkYXB0ZWQgZnJvbSB0aGUgRGlqa3N0YXIgUHl0aG9uIHByb2plY3QuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDA4XG4gKiAgIFd5YXR0IEJhbGR3aW4gPHNlbGZAd3lhdHRiYWxkd2luLmNvbT5cbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqXG4gKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgZGlqa3N0cmEgPSB7XG4gIHNpbmdsZV9zb3VyY2Vfc2hvcnRlc3RfcGF0aHM6IGZ1bmN0aW9uKGdyYXBoLCBzLCBkKSB7XG4gICAgLy8gUHJlZGVjZXNzb3IgbWFwIGZvciBlYWNoIG5vZGUgdGhhdCBoYXMgYmVlbiBlbmNvdW50ZXJlZC5cbiAgICAvLyBub2RlIElEID0+IHByZWRlY2Vzc29yIG5vZGUgSURcbiAgICB2YXIgcHJlZGVjZXNzb3JzID0ge307XG5cbiAgICAvLyBDb3N0cyBvZiBzaG9ydGVzdCBwYXRocyBmcm9tIHMgdG8gYWxsIG5vZGVzIGVuY291bnRlcmVkLlxuICAgIC8vIG5vZGUgSUQgPT4gY29zdFxuICAgIHZhciBjb3N0cyA9IHt9O1xuICAgIGNvc3RzW3NdID0gMDtcblxuICAgIC8vIENvc3RzIG9mIHNob3J0ZXN0IHBhdGhzIGZyb20gcyB0byBhbGwgbm9kZXMgZW5jb3VudGVyZWQ7IGRpZmZlcnMgZnJvbVxuICAgIC8vIGBjb3N0c2AgaW4gdGhhdCBpdCBwcm92aWRlcyBlYXN5IGFjY2VzcyB0byB0aGUgbm9kZSB0aGF0IGN1cnJlbnRseSBoYXNcbiAgICAvLyB0aGUga25vd24gc2hvcnRlc3QgcGF0aCBmcm9tIHMuXG4gICAgLy8gWFhYOiBEbyB3ZSBhY3R1YWxseSBuZWVkIGJvdGggYGNvc3RzYCBhbmQgYG9wZW5gP1xuICAgIHZhciBvcGVuID0gZGlqa3N0cmEuUHJpb3JpdHlRdWV1ZS5tYWtlKCk7XG4gICAgb3Blbi5wdXNoKHMsIDApO1xuXG4gICAgdmFyIGNsb3Nlc3QsXG4gICAgICAgIHUsIHYsXG4gICAgICAgIGNvc3Rfb2Zfc190b191LFxuICAgICAgICBhZGphY2VudF9ub2RlcyxcbiAgICAgICAgY29zdF9vZl9lLFxuICAgICAgICBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZSxcbiAgICAgICAgY29zdF9vZl9zX3RvX3YsXG4gICAgICAgIGZpcnN0X3Zpc2l0O1xuICAgIHdoaWxlICghb3Blbi5lbXB0eSgpKSB7XG4gICAgICAvLyBJbiB0aGUgbm9kZXMgcmVtYWluaW5nIGluIGdyYXBoIHRoYXQgaGF2ZSBhIGtub3duIGNvc3QgZnJvbSBzLFxuICAgICAgLy8gZmluZCB0aGUgbm9kZSwgdSwgdGhhdCBjdXJyZW50bHkgaGFzIHRoZSBzaG9ydGVzdCBwYXRoIGZyb20gcy5cbiAgICAgIGNsb3Nlc3QgPSBvcGVuLnBvcCgpO1xuICAgICAgdSA9IGNsb3Nlc3QudmFsdWU7XG4gICAgICBjb3N0X29mX3NfdG9fdSA9IGNsb3Nlc3QuY29zdDtcblxuICAgICAgLy8gR2V0IG5vZGVzIGFkamFjZW50IHRvIHUuLi5cbiAgICAgIGFkamFjZW50X25vZGVzID0gZ3JhcGhbdV0gfHwge307XG5cbiAgICAgIC8vIC4uLmFuZCBleHBsb3JlIHRoZSBlZGdlcyB0aGF0IGNvbm5lY3QgdSB0byB0aG9zZSBub2RlcywgdXBkYXRpbmdcbiAgICAgIC8vIHRoZSBjb3N0IG9mIHRoZSBzaG9ydGVzdCBwYXRocyB0byBhbnkgb3IgYWxsIG9mIHRob3NlIG5vZGVzIGFzXG4gICAgICAvLyBuZWNlc3NhcnkuIHYgaXMgdGhlIG5vZGUgYWNyb3NzIHRoZSBjdXJyZW50IGVkZ2UgZnJvbSB1LlxuICAgICAgZm9yICh2IGluIGFkamFjZW50X25vZGVzKSB7XG4gICAgICAgIGlmIChhZGphY2VudF9ub2Rlcy5oYXNPd25Qcm9wZXJ0eSh2KSkge1xuICAgICAgICAgIC8vIEdldCB0aGUgY29zdCBvZiB0aGUgZWRnZSBydW5uaW5nIGZyb20gdSB0byB2LlxuICAgICAgICAgIGNvc3Rfb2ZfZSA9IGFkamFjZW50X25vZGVzW3ZdO1xuXG4gICAgICAgICAgLy8gQ29zdCBvZiBzIHRvIHUgcGx1cyB0aGUgY29zdCBvZiB1IHRvIHYgYWNyb3NzIGUtLXRoaXMgaXMgKmEqXG4gICAgICAgICAgLy8gY29zdCBmcm9tIHMgdG8gdiB0aGF0IG1heSBvciBtYXkgbm90IGJlIGxlc3MgdGhhbiB0aGUgY3VycmVudFxuICAgICAgICAgIC8vIGtub3duIGNvc3QgdG8gdi5cbiAgICAgICAgICBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZSA9IGNvc3Rfb2Zfc190b191ICsgY29zdF9vZl9lO1xuXG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCB2aXNpdGVkIHYgeWV0IE9SIGlmIHRoZSBjdXJyZW50IGtub3duIGNvc3QgZnJvbSBzIHRvXG4gICAgICAgICAgLy8gdiBpcyBncmVhdGVyIHRoYW4gdGhlIG5ldyBjb3N0IHdlIGp1c3QgZm91bmQgKGNvc3Qgb2YgcyB0byB1IHBsdXNcbiAgICAgICAgICAvLyBjb3N0IG9mIHUgdG8gdiBhY3Jvc3MgZSksIHVwZGF0ZSB2J3MgY29zdCBpbiB0aGUgY29zdCBsaXN0IGFuZFxuICAgICAgICAgIC8vIHVwZGF0ZSB2J3MgcHJlZGVjZXNzb3IgaW4gdGhlIHByZWRlY2Vzc29yIGxpc3QgKGl0J3Mgbm93IHUpLlxuICAgICAgICAgIGNvc3Rfb2Zfc190b192ID0gY29zdHNbdl07XG4gICAgICAgICAgZmlyc3RfdmlzaXQgPSAodHlwZW9mIGNvc3RzW3ZdID09PSAndW5kZWZpbmVkJyk7XG4gICAgICAgICAgaWYgKGZpcnN0X3Zpc2l0IHx8IGNvc3Rfb2Zfc190b192ID4gY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2UpIHtcbiAgICAgICAgICAgIGNvc3RzW3ZdID0gY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2U7XG4gICAgICAgICAgICBvcGVuLnB1c2godiwgY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2UpO1xuICAgICAgICAgICAgcHJlZGVjZXNzb3JzW3ZdID0gdTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb3N0c1tkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBtc2cgPSBbJ0NvdWxkIG5vdCBmaW5kIGEgcGF0aCBmcm9tICcsIHMsICcgdG8gJywgZCwgJy4nXS5qb2luKCcnKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVkZWNlc3NvcnM7XG4gIH0sXG5cbiAgZXh0cmFjdF9zaG9ydGVzdF9wYXRoX2Zyb21fcHJlZGVjZXNzb3JfbGlzdDogZnVuY3Rpb24ocHJlZGVjZXNzb3JzLCBkKSB7XG4gICAgdmFyIG5vZGVzID0gW107XG4gICAgdmFyIHUgPSBkO1xuICAgIHZhciBwcmVkZWNlc3NvcjtcbiAgICB3aGlsZSAodSkge1xuICAgICAgbm9kZXMucHVzaCh1KTtcbiAgICAgIHByZWRlY2Vzc29yID0gcHJlZGVjZXNzb3JzW3VdO1xuICAgICAgdSA9IHByZWRlY2Vzc29yc1t1XTtcbiAgICB9XG4gICAgbm9kZXMucmV2ZXJzZSgpO1xuICAgIHJldHVybiBub2RlcztcbiAgfSxcblxuICBmaW5kX3BhdGg6IGZ1bmN0aW9uKGdyYXBoLCBzLCBkKSB7XG4gICAgdmFyIHByZWRlY2Vzc29ycyA9IGRpamtzdHJhLnNpbmdsZV9zb3VyY2Vfc2hvcnRlc3RfcGF0aHMoZ3JhcGgsIHMsIGQpO1xuICAgIHJldHVybiBkaWprc3RyYS5leHRyYWN0X3Nob3J0ZXN0X3BhdGhfZnJvbV9wcmVkZWNlc3Nvcl9saXN0KFxuICAgICAgcHJlZGVjZXNzb3JzLCBkKTtcbiAgfSxcblxuICAvKipcbiAgICogQSB2ZXJ5IG5haXZlIHByaW9yaXR5IHF1ZXVlIGltcGxlbWVudGF0aW9uLlxuICAgKi9cbiAgUHJpb3JpdHlRdWV1ZToge1xuICAgIG1ha2U6IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgICB2YXIgVCA9IGRpamtzdHJhLlByaW9yaXR5UXVldWUsXG4gICAgICAgICAgdCA9IHt9LFxuICAgICAgICAgIGtleTtcbiAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgICAgZm9yIChrZXkgaW4gVCkge1xuICAgICAgICBpZiAoVC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgdFtrZXldID0gVFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0LnF1ZXVlID0gW107XG4gICAgICB0LnNvcnRlciA9IG9wdHMuc29ydGVyIHx8IFQuZGVmYXVsdF9zb3J0ZXI7XG4gICAgICByZXR1cm4gdDtcbiAgICB9LFxuXG4gICAgZGVmYXVsdF9zb3J0ZXI6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5jb3N0IC0gYi5jb3N0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBuZXcgaXRlbSB0byB0aGUgcXVldWUgYW5kIGVuc3VyZSB0aGUgaGlnaGVzdCBwcmlvcml0eSBlbGVtZW50XG4gICAgICogaXMgYXQgdGhlIGZyb250IG9mIHRoZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBwdXNoOiBmdW5jdGlvbiAodmFsdWUsIGNvc3QpIHtcbiAgICAgIHZhciBpdGVtID0ge3ZhbHVlOiB2YWx1ZSwgY29zdDogY29zdH07XG4gICAgICB0aGlzLnF1ZXVlLnB1c2goaXRlbSk7XG4gICAgICB0aGlzLnF1ZXVlLnNvcnQodGhpcy5zb3J0ZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGhpZ2hlc3QgcHJpb3JpdHkgZWxlbWVudCBpbiB0aGUgcXVldWUuXG4gICAgICovXG4gICAgcG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgIH0sXG5cbiAgICBlbXB0eTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMucXVldWUubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBub2RlLmpzIG1vZHVsZSBleHBvcnRzXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBkaWprc3RyYTtcbn1cbiIsImNvbnN0IEV0aFF1ZXJ5ID0gcmVxdWlyZSgnZXRoLXF1ZXJ5JylcbmNvbnN0IHBpZnkgPSByZXF1aXJlKCdwaWZ5JylcbmNvbnN0IFNhZmVFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdzYWZlLWV2ZW50LWVtaXR0ZXInKVxuXG5jb25zdCBzZWMgPSAxMDAwXG5cbmNvbnN0IGNhbGN1bGF0ZVN1bSA9IChhY2N1bXVsYXRvciwgY3VycmVudFZhbHVlKSA9PiBhY2N1bXVsYXRvciArIGN1cnJlbnRWYWx1ZVxuY29uc3QgYmxvY2tUcmFja2VyRXZlbnRzID0gWydzeW5jJywgJ2xhdGVzdCddXG5cbmNsYXNzIEJhc2VCbG9ja1RyYWNrZXIgZXh0ZW5kcyBTYWZlRXZlbnRFbWl0dGVyIHtcblxuICAvL1xuICAvLyBwdWJsaWNcbiAgLy9cblxuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoKVxuICAgIC8vIGNvbmZpZ1xuICAgIHRoaXMuX2Jsb2NrUmVzZXREdXJhdGlvbiA9IG9wdHMuYmxvY2tSZXNldER1cmF0aW9uIHx8IDIwICogc2VjXG4gICAgLy8gc3RhdGVcbiAgICB0aGlzLl9ibG9ja1Jlc2V0VGltZW91dFxuICAgIHRoaXMuX2N1cnJlbnRCbG9jayA9IG51bGxcbiAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZVxuICAgIC8vIGJpbmQgZnVuY3Rpb25zIGZvciBpbnRlcm5hbCB1c2VcbiAgICB0aGlzLl9vbk5ld0xpc3RlbmVyID0gdGhpcy5fb25OZXdMaXN0ZW5lci5iaW5kKHRoaXMpXG4gICAgdGhpcy5fb25SZW1vdmVMaXN0ZW5lciA9IHRoaXMuX29uUmVtb3ZlTGlzdGVuZXIuYmluZCh0aGlzKVxuICAgIHRoaXMuX3Jlc2V0Q3VycmVudEJsb2NrID0gdGhpcy5fcmVzZXRDdXJyZW50QmxvY2suYmluZCh0aGlzKVxuICAgIC8vIGxpc3RlbiBmb3IgaGFuZGxlciBjaGFuZ2VzXG4gICAgdGhpcy5fc2V0dXBJbnRlcm5hbEV2ZW50cygpXG4gIH1cblxuICBpc1J1bm5pbmcgKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1J1bm5pbmdcbiAgfVxuXG4gIGdldEN1cnJlbnRCbG9jayAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRCbG9ja1xuICB9XG5cbiAgYXN5bmMgZ2V0TGF0ZXN0QmxvY2sgKCkge1xuICAgIC8vIHJldHVybiBpZiBhdmFpbGFibGVcbiAgICBpZiAodGhpcy5fY3VycmVudEJsb2NrKSByZXR1cm4gdGhpcy5fY3VycmVudEJsb2NrXG4gICAgLy8gd2FpdCBmb3IgYSBuZXcgbGF0ZXN0IGJsb2NrXG4gICAgY29uc3QgbGF0ZXN0QmxvY2sgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMub25jZSgnbGF0ZXN0JywgcmVzb2x2ZSkpXG4gICAgLy8gcmV0dXJuIG5ld2x5IHNldCBjdXJyZW50IGJsb2NrXG4gICAgcmV0dXJuIGxhdGVzdEJsb2NrXG4gIH1cblxuICAvLyBkb250IGFsbG93IG1vZHVsZSBjb25zdW1lciB0byByZW1vdmUgb3VyIGludGVybmFsIGV2ZW50IGxpc3RlbmVyc1xuICByZW1vdmVBbGxMaXN0ZW5lcnMgKGV2ZW50TmFtZSkge1xuICAgIC8vIHBlcmZvcm0gZGVmYXVsdCBiZWhhdmlvciwgcHJlc2VydmUgZm4gYXJpdHlcbiAgICBpZiAoZXZlbnROYW1lKSB7XG4gICAgICBzdXBlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgIH1cbiAgICAvLyByZS1hZGQgaW50ZXJuYWwgZXZlbnRzXG4gICAgdGhpcy5fc2V0dXBJbnRlcm5hbEV2ZW50cygpXG4gICAgLy8gdHJpZ2dlciBzdG9wIGNoZWNrIGp1c3QgaW4gY2FzZVxuICAgIHRoaXMuX29uUmVtb3ZlTGlzdGVuZXIoKVxuICB9XG5cbiAgLy9cbiAgLy8gdG8gYmUgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3NcbiAgLy9cblxuICBfc3RhcnQgKCkge1xuICAgIC8vIGRlZmF1bHQgYmVoYXZpb3IgaXMgbm9vcFxuICB9XG5cbiAgX2VuZCAoKSB7XG4gICAgLy8gZGVmYXVsdCBiZWhhdmlvciBpcyBub29wXG4gIH1cblxuICAvL1xuICAvLyBwcml2YXRlXG4gIC8vXG5cbiAgX3NldHVwSW50ZXJuYWxFdmVudHMgKCkge1xuICAgIC8vIGZpcnN0IHJlbW92ZSBsaXN0ZW5lcnMgZm9yIGlkZW1wb3RlbmNlXG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcignbmV3TGlzdGVuZXInLCB0aGlzLl9vbk5ld0xpc3RlbmVyKVxuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ3JlbW92ZUxpc3RlbmVyJywgdGhpcy5fb25SZW1vdmVMaXN0ZW5lcilcbiAgICAvLyB0aGVuIGFkZCB0aGVtXG4gICAgdGhpcy5vbignbmV3TGlzdGVuZXInLCB0aGlzLl9vbk5ld0xpc3RlbmVyKVxuICAgIHRoaXMub24oJ3JlbW92ZUxpc3RlbmVyJywgdGhpcy5fb25SZW1vdmVMaXN0ZW5lcilcbiAgfVxuXG4gIF9vbk5ld0xpc3RlbmVyIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAvLyBgbmV3TGlzdGVuZXJgIGlzIGNhbGxlZCAqYmVmb3JlKiB0aGUgbGlzdGVuZXIgaXMgYWRkZWRcbiAgICBpZiAoIWJsb2NrVHJhY2tlckV2ZW50cy5pbmNsdWRlcyhldmVudE5hbWUpKSByZXR1cm5cbiAgICB0aGlzLl9tYXliZVN0YXJ0KClcbiAgfVxuXG4gIF9vblJlbW92ZUxpc3RlbmVyIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAvLyBgcmVtb3ZlTGlzdGVuZXJgIGlzIGNhbGxlZCAqYWZ0ZXIqIHRoZSBsaXN0ZW5lciBpcyByZW1vdmVkXG4gICAgaWYgKHRoaXMuX2dldEJsb2NrVHJhY2tlckV2ZW50Q291bnQoKSA+IDApIHJldHVyblxuICAgIHRoaXMuX21heWJlRW5kKClcbiAgfVxuXG4gIF9tYXliZVN0YXJ0ICgpIHtcbiAgICBpZiAodGhpcy5faXNSdW5uaW5nKSByZXR1cm5cbiAgICB0aGlzLl9pc1J1bm5pbmcgPSB0cnVlXG4gICAgLy8gY2FuY2VsIHNldHRpbmcgbGF0ZXN0IGJsb2NrIHRvIHN0YWxlXG4gICAgdGhpcy5fY2FuY2VsQmxvY2tSZXNldFRpbWVvdXQoKVxuICAgIHRoaXMuX3N0YXJ0KClcbiAgfVxuXG4gIF9tYXliZUVuZCAoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1J1bm5pbmcpIHJldHVyblxuICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlXG4gICAgdGhpcy5fc2V0dXBCbG9ja1Jlc2V0VGltZW91dCgpXG4gICAgdGhpcy5fZW5kKClcbiAgfVxuXG4gIF9nZXRCbG9ja1RyYWNrZXJFdmVudENvdW50ICgpIHtcbiAgICByZXR1cm4gYmxvY2tUcmFja2VyRXZlbnRzXG4gICAgICAubWFwKGV2ZW50TmFtZSA9PiB0aGlzLmxpc3RlbmVyQ291bnQoZXZlbnROYW1lKSlcbiAgICAgIC5yZWR1Y2UoY2FsY3VsYXRlU3VtKVxuICB9XG5cbiAgX25ld1BvdGVudGlhbExhdGVzdCAobmV3QmxvY2spIHtcbiAgICBjb25zdCBjdXJyZW50QmxvY2sgPSB0aGlzLl9jdXJyZW50QmxvY2tcbiAgICAvLyBvbmx5IHVwZGF0ZSBpZiBibG9rIG51bWJlciBpcyBoaWdoZXJcbiAgICBpZiAoY3VycmVudEJsb2NrICYmIChoZXhUb0ludChuZXdCbG9jaykgPD0gaGV4VG9JbnQoY3VycmVudEJsb2NrKSkpIHJldHVyblxuICAgIHRoaXMuX3NldEN1cnJlbnRCbG9jayhuZXdCbG9jaylcbiAgfVxuXG4gIF9zZXRDdXJyZW50QmxvY2sgKG5ld0Jsb2NrKSB7XG4gICAgY29uc3Qgb2xkQmxvY2sgPSB0aGlzLl9jdXJyZW50QmxvY2tcbiAgICB0aGlzLl9jdXJyZW50QmxvY2sgPSBuZXdCbG9ja1xuICAgIHRoaXMuZW1pdCgnbGF0ZXN0JywgbmV3QmxvY2spXG4gICAgdGhpcy5lbWl0KCdzeW5jJywgeyBvbGRCbG9jaywgbmV3QmxvY2sgfSlcbiAgfVxuXG4gIF9zZXR1cEJsb2NrUmVzZXRUaW1lb3V0ICgpIHtcbiAgICAvLyBjbGVhciBhbnkgZXhpc3RpbmcgdGltZW91dFxuICAgIHRoaXMuX2NhbmNlbEJsb2NrUmVzZXRUaW1lb3V0KClcbiAgICAvLyBjbGVhciBsYXRlc3QgYmxvY2sgd2hlbiBzdGFsZVxuICAgIHRoaXMuX2Jsb2NrUmVzZXRUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLl9yZXNldEN1cnJlbnRCbG9jaywgdGhpcy5fYmxvY2tSZXNldER1cmF0aW9uKVxuICAgIC8vIG5vZGVqcyAtIGRvbnQgaG9sZCBwcm9jZXNzIG9wZW5cbiAgICBpZiAodGhpcy5fYmxvY2tSZXNldFRpbWVvdXQudW5yZWYpIHtcbiAgICAgIHRoaXMuX2Jsb2NrUmVzZXRUaW1lb3V0LnVucmVmKClcbiAgICB9XG4gIH1cblxuICBfY2FuY2VsQmxvY2tSZXNldFRpbWVvdXQgKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9ibG9ja1Jlc2V0VGltZW91dClcbiAgfVxuXG4gIF9yZXNldEN1cnJlbnRCbG9jayAoKSB7XG4gICAgdGhpcy5fY3VycmVudEJsb2NrID0gbnVsbFxuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQmxvY2tUcmFja2VyXG5cbmZ1bmN0aW9uIGhleFRvSW50KGhleEludCkge1xuICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KGhleEludCwgMTYpXG59XG4iLCJjb25zdCBwaWZ5ID0gcmVxdWlyZSgncGlmeScpXG5jb25zdCBCYXNlQmxvY2tUcmFja2VyID0gcmVxdWlyZSgnLi9iYXNlJylcblxuY29uc3Qgc2VjID0gMTAwMFxuXG5jbGFzcyBQb2xsaW5nQmxvY2tUcmFja2VyIGV4dGVuZHMgQmFzZUJsb2NrVHJhY2tlciB7XG5cbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIC8vIHBhcnNlICsgdmFsaWRhdGUgYXJnc1xuICAgIGlmICghb3B0cy5wcm92aWRlcikgdGhyb3cgbmV3IEVycm9yKCdQb2xsaW5nQmxvY2tUcmFja2VyIC0gbm8gcHJvdmlkZXIgc3BlY2lmaWVkLicpXG4gICAgY29uc3QgcG9sbGluZ0ludGVydmFsID0gb3B0cy5wb2xsaW5nSW50ZXJ2YWwgfHwgMjAgKiBzZWNcbiAgICBjb25zdCByZXRyeVRpbWVvdXQgPSBvcHRzLnJldHJ5VGltZW91dCB8fCBwb2xsaW5nSW50ZXJ2YWwgLyAxMFxuICAgIGNvbnN0IGtlZXBFdmVudExvb3BBY3RpdmUgPSBvcHRzLmtlZXBFdmVudExvb3BBY3RpdmUgIT09IHVuZGVmaW5lZCA/IG9wdHMua2VlcEV2ZW50TG9vcEFjdGl2ZSA6IHRydWVcbiAgICBjb25zdCBzZXRTa2lwQ2FjaGVGbGFnID0gb3B0cy5zZXRTa2lwQ2FjaGVGbGFnIHx8IGZhbHNlXG4gICAgLy8gQmFzZUJsb2NrVHJhY2tlciBjb25zdHJ1Y3RvclxuICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe1xuICAgICAgYmxvY2tSZXNldER1cmF0aW9uOiBwb2xsaW5nSW50ZXJ2YWwsXG4gICAgfSwgb3B0cykpXG4gICAgLy8gY29uZmlnXG4gICAgdGhpcy5fcHJvdmlkZXIgPSBvcHRzLnByb3ZpZGVyXG4gICAgdGhpcy5fcG9sbGluZ0ludGVydmFsID0gcG9sbGluZ0ludGVydmFsXG4gICAgdGhpcy5fcmV0cnlUaW1lb3V0ID0gcmV0cnlUaW1lb3V0XG4gICAgdGhpcy5fa2VlcEV2ZW50TG9vcEFjdGl2ZSA9IGtlZXBFdmVudExvb3BBY3RpdmVcbiAgICB0aGlzLl9zZXRTa2lwQ2FjaGVGbGFnID0gc2V0U2tpcENhY2hlRmxhZ1xuICB9XG5cbiAgLy9cbiAgLy8gcHVibGljXG4gIC8vXG5cbiAgLy8gdHJpZ2dlciBibG9jayBwb2xsaW5nXG4gIGFzeW5jIGNoZWNrRm9yTGF0ZXN0QmxvY2sgKCkge1xuICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUxhdGVzdEJsb2NrKClcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRMYXRlc3RCbG9jaygpXG4gIH1cblxuICAvL1xuICAvLyBwcml2YXRlXG4gIC8vXG5cbiAgX3N0YXJ0ICgpIHtcbiAgICB0aGlzLl9wZXJmb3JtU3luYygpLmNhdGNoKGVyciA9PiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKSlcbiAgfVxuXG4gIGFzeW5jIF9wZXJmb3JtU3luYyAoKSB7XG4gICAgd2hpbGUgKHRoaXMuX2lzUnVubmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlTGF0ZXN0QmxvY2soKVxuICAgICAgICBhd2FpdCB0aW1lb3V0KHRoaXMuX3BvbGxpbmdJbnRlcnZhbCwgIXRoaXMuX2tlZXBFdmVudExvb3BBY3RpdmUpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc3QgbmV3RXJyID0gbmV3IEVycm9yKGBQb2xsaW5nQmxvY2tUcmFja2VyIC0gZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgYXR0ZW1wdGluZyB0byB1cGRhdGUgbGF0ZXN0IGJsb2NrOlxcbiR7ZXJyLnN0YWNrfWApXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIG5ld0VycilcbiAgICAgICAgfSBjYXRjaCAoZW1pdEVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3RXJyKVxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRpbWVvdXQodGhpcy5fcmV0cnlUaW1lb3V0LCAhdGhpcy5fa2VlcEV2ZW50TG9vcEFjdGl2ZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBfdXBkYXRlTGF0ZXN0QmxvY2sgKCkge1xuICAgIC8vIGZldGNoICsgc2V0IGxhdGVzdCBibG9ja1xuICAgIGNvbnN0IGxhdGVzdEJsb2NrID0gYXdhaXQgdGhpcy5fZmV0Y2hMYXRlc3RCbG9jaygpXG4gICAgdGhpcy5fbmV3UG90ZW50aWFsTGF0ZXN0KGxhdGVzdEJsb2NrKVxuICB9XG5cbiAgYXN5bmMgX2ZldGNoTGF0ZXN0QmxvY2sgKCkge1xuICAgIGNvbnN0IHJlcSA9IHsganNvbnJwYzogXCIyLjBcIiwgaWQ6IDEsIG1ldGhvZDogJ2V0aF9ibG9ja051bWJlcicsIHBhcmFtczogW10gfVxuICAgIGlmICh0aGlzLl9zZXRTa2lwQ2FjaGVGbGFnKSByZXEuc2tpcENhY2hlID0gdHJ1ZVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHBpZnkoKGNiKSA9PiB0aGlzLl9wcm92aWRlci5zZW5kQXN5bmMocmVxLCBjYikpKClcbiAgICBpZiAocmVzLmVycm9yKSB0aHJvdyBuZXcgRXJyb3IoYFBvbGxpbmdCbG9ja1RyYWNrZXIgLSBlbmNvdW50ZXJlZCBlcnJvciBmZXRjaGluZyBibG9jazpcXG4ke3Jlcy5lcnJvcn1gKVxuICAgIHJldHVybiByZXMucmVzdWx0XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmdCbG9ja1RyYWNrZXJcblxuZnVuY3Rpb24gdGltZW91dCAoZHVyYXRpb24sIHVucmVmKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBjb25zdCB0aW1vdXRSZWYgPSBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKVxuICAgIC8vIGRvbid0IGtlZXAgcHJvY2VzcyBvcGVuXG4gICAgaWYgKHRpbW91dFJlZi51bnJlZiAmJiB1bnJlZikge1xuICAgICAgdGltb3V0UmVmLnVucmVmKClcbiAgICB9XG4gIH0pXG59XG4iLCJjb25zdCBCYXNlRmlsdGVyID0gcmVxdWlyZSgnLi9iYXNlLWZpbHRlcicpXG5cbi8vIHRyYWNrcyBhbGwgcmVzdWx0cyBldmVyIHJlY29yZGVkXG5jbGFzcyBCYXNlRmlsdGVyV2l0aEhpc3RvcnkgZXh0ZW5kcyBCYXNlRmlsdGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuYWxsUmVzdWx0cyA9IFtdXG4gIH1cblxuICBhc3luYyB1cGRhdGUgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmFzZUZpbHRlcldpdGhIaXN0b3J5IC0gbm8gdXBkYXRlIG1ldGhvZCBzcGVjaWZpZWQnKVxuICB9XG5cbiAgYWRkUmVzdWx0cyAobmV3UmVzdWx0cykge1xuICAgIHRoaXMuYWxsUmVzdWx0cyA9IHRoaXMuYWxsUmVzdWx0cy5jb25jYXQobmV3UmVzdWx0cylcbiAgICBzdXBlci5hZGRSZXN1bHRzKG5ld1Jlc3VsdHMpXG4gIH1cblxuICBhZGRJbml0aWFsUmVzdWx0cyAobmV3UmVzdWx0cykge1xuICAgIHRoaXMuYWxsUmVzdWx0cyA9IHRoaXMuYWxsUmVzdWx0cy5jb25jYXQobmV3UmVzdWx0cylcbiAgICBzdXBlci5hZGRJbml0aWFsUmVzdWx0cyhuZXdSZXN1bHRzKVxuICB9XG5cbiAgZ2V0QWxsUmVzdWx0cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsUmVzdWx0c1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlRmlsdGVyV2l0aEhpc3RvcnkiLCJjb25zdCBTYWZlRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnQG1ldGFtYXNrL3NhZmUtZXZlbnQtZW1pdHRlcicpLmRlZmF1bHRcblxuY2xhc3MgQmFzZUZpbHRlciBleHRlbmRzIFNhZmVFdmVudEVtaXR0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cGRhdGVzID0gW11cbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUgKCkge31cblxuICBhc3luYyB1cGRhdGUgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmFzZUZpbHRlciAtIG5vIHVwZGF0ZSBtZXRob2Qgc3BlY2lmaWVkJylcbiAgfVxuXG4gIGFkZFJlc3VsdHMgKG5ld1Jlc3VsdHMpIHtcbiAgICB0aGlzLnVwZGF0ZXMgPSB0aGlzLnVwZGF0ZXMuY29uY2F0KG5ld1Jlc3VsdHMpXG4gICAgbmV3UmVzdWx0cy5mb3JFYWNoKHJlc3VsdCA9PiB0aGlzLmVtaXQoJ3VwZGF0ZScsIHJlc3VsdCkpXG4gIH1cblxuICBhZGRJbml0aWFsUmVzdWx0cyAobmV3UmVzdWx0cykge31cblxuICBnZXRDaGFuZ2VzQW5kQ2xlYXIgKCkge1xuICAgIGNvbnN0IHVwZGF0ZXMgPSB0aGlzLnVwZGF0ZXNcbiAgICB0aGlzLnVwZGF0ZXMgPSBbXVxuICAgIHJldHVybiB1cGRhdGVzXG4gIH1cbiAgXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUZpbHRlclxuIiwiY29uc3QgQmFzZUZpbHRlciA9IHJlcXVpcmUoJy4vYmFzZS1maWx0ZXInKVxuY29uc3QgZ2V0QmxvY2tzRm9yUmFuZ2UgPSByZXF1aXJlKCcuL2dldEJsb2Nrc0ZvclJhbmdlJylcbmNvbnN0IHsgaW5jcmVtZW50SGV4SW50IH0gPSByZXF1aXJlKCcuL2hleFV0aWxzJylcblxuY2xhc3MgQmxvY2tGaWx0ZXIgZXh0ZW5kcyBCYXNlRmlsdGVyIHtcblxuICBjb25zdHJ1Y3RvciAoeyBwcm92aWRlciwgcGFyYW1zIH0pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50eXBlID0gJ2Jsb2NrJ1xuICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlclxuICB9XG5cbiAgYXN5bmMgdXBkYXRlICh7IG9sZEJsb2NrLCBuZXdCbG9jayB9KSB7XG4gICAgY29uc3QgdG9CbG9jayA9IG5ld0Jsb2NrXG4gICAgY29uc3QgZnJvbUJsb2NrID0gaW5jcmVtZW50SGV4SW50KG9sZEJsb2NrKVxuICAgIGNvbnN0IGJsb2NrQm9kaWVzID0gYXdhaXQgZ2V0QmxvY2tzRm9yUmFuZ2UoeyBwcm92aWRlcjogdGhpcy5wcm92aWRlciwgZnJvbUJsb2NrLCB0b0Jsb2NrIH0pXG4gICAgY29uc3QgYmxvY2tIYXNoZXMgPSBibG9ja0JvZGllcy5tYXAoKGJsb2NrKSA9PiBibG9jay5oYXNoKVxuICAgIHRoaXMuYWRkUmVzdWx0cyhibG9ja0hhc2hlcylcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmxvY2tGaWx0ZXJcbiIsIm1vZHVsZS5leHBvcnRzID0gZ2V0QmxvY2tzRm9yUmFuZ2VcblxuYXN5bmMgZnVuY3Rpb24gZ2V0QmxvY2tzRm9yUmFuZ2UoeyBwcm92aWRlciwgZnJvbUJsb2NrLCB0b0Jsb2NrIH0pIHtcbiAgaWYgKCFmcm9tQmxvY2spIGZyb21CbG9jayA9IHRvQmxvY2tcblxuICBjb25zdCBmcm9tQmxvY2tOdW1iZXIgPSBoZXhUb0ludChmcm9tQmxvY2spXG4gIGNvbnN0IHRvQmxvY2tOdW1iZXIgPSBoZXhUb0ludCh0b0Jsb2NrKVxuICBjb25zdCBibG9ja0NvdW50VG9RdWVyeSA9IHRvQmxvY2tOdW1iZXIgLSBmcm9tQmxvY2tOdW1iZXIgKyAxXG4gIC8vIGxvYWQgYWxsIGJsb2NrcyBmcm9tIG9sZCB0byBuZXcgKGluY2x1c2l2ZSlcbiAgY29uc3QgbWlzc2luZ0Jsb2NrTnVtYmVycyA9IEFycmF5KGJsb2NrQ291bnRUb1F1ZXJ5KS5maWxsKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKF8saW5kZXgpID0+IGZyb21CbG9ja051bWJlciArIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChpbnRUb0hleClcbiAgY29uc3QgYmxvY2tCb2RpZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBtaXNzaW5nQmxvY2tOdW1iZXJzLm1hcChibG9ja051bSA9PiBxdWVyeShwcm92aWRlciwgJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJywgW2Jsb2NrTnVtLCBmYWxzZV0pKVxuICApXG4gIHJldHVybiBibG9ja0JvZGllc1xufVxuXG5mdW5jdGlvbiBoZXhUb0ludChoZXhTdHJpbmcpIHtcbiAgaWYgKGhleFN0cmluZyA9PT0gdW5kZWZpbmVkIHx8IGhleFN0cmluZyA9PT0gbnVsbCkgcmV0dXJuIGhleFN0cmluZ1xuICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KGhleFN0cmluZywgMTYpXG59XG5cbmZ1bmN0aW9uIGluY3JlbWVudEhleEludChoZXhTdHJpbmcpe1xuICBpZiAoaGV4U3RyaW5nID09PSB1bmRlZmluZWQgfHwgaGV4U3RyaW5nID09PSBudWxsKSByZXR1cm4gaGV4U3RyaW5nXG4gIGNvbnN0IHZhbHVlID0gaGV4VG9JbnQoaGV4U3RyaW5nKVxuICByZXR1cm4gaW50VG9IZXgodmFsdWUgKyAxKVxufVxuXG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgaWYgKGludCA9PT0gdW5kZWZpbmVkIHx8IGludCA9PT0gbnVsbCkgcmV0dXJuIGludFxuICBjb25zdCBoZXhTdHJpbmcgPSBpbnQudG9TdHJpbmcoMTYpXG4gIHJldHVybiAnMHgnICsgaGV4U3RyaW5nXG59XG5cbmZ1bmN0aW9uIHF1ZXJ5KHByb3ZpZGVyLCBtZXRob2QsIHBhcmFtcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHByb3ZpZGVyLnNlbmRBc3luYyh7IGlkOiAxLCBqc29ucnBjOiAnMi4wJywgbWV0aG9kLCBwYXJhbXMgfSwgKGVyciwgcmVzKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycilcbiAgICAgIHJlc29sdmUocmVzLnJlc3VsdClcbiAgICB9KVxuICB9KVxufVxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWluQmxvY2tSZWYsXG4gIG1heEJsb2NrUmVmLFxuICBzb3J0QmxvY2tSZWZzLFxuICBiblRvSGV4LFxuICBibG9ja1JlZklzTnVtYmVyLFxuICBoZXhUb0ludCxcbiAgaW5jcmVtZW50SGV4SW50LFxuICBpbnRUb0hleCxcbiAgdW5zYWZlUmFuZG9tQnl0ZXMsXG59XG5cbmZ1bmN0aW9uIG1pbkJsb2NrUmVmKC4uLnJlZnMpIHtcbiAgY29uc3Qgc29ydGVkUmVmcyA9IHNvcnRCbG9ja1JlZnMocmVmcylcbiAgcmV0dXJuIHNvcnRlZFJlZnNbMF1cbn1cblxuZnVuY3Rpb24gbWF4QmxvY2tSZWYoLi4ucmVmcykge1xuICBjb25zdCBzb3J0ZWRSZWZzID0gc29ydEJsb2NrUmVmcyhyZWZzKVxuICByZXR1cm4gc29ydGVkUmVmc1tzb3J0ZWRSZWZzLmxlbmd0aC0xXVxufVxuXG5mdW5jdGlvbiBzb3J0QmxvY2tSZWZzKHJlZnMpIHtcbiAgcmV0dXJuIHJlZnMuc29ydCgocmVmQSwgcmVmQikgPT4ge1xuICAgIGlmIChyZWZBID09PSAnbGF0ZXN0JyB8fCByZWZCID09PSAnZWFybGllc3QnKSByZXR1cm4gMVxuICAgIGlmIChyZWZCID09PSAnbGF0ZXN0JyB8fCByZWZBID09PSAnZWFybGllc3QnKSByZXR1cm4gLTFcbiAgICByZXR1cm4gaGV4VG9JbnQocmVmQSkgLSBoZXhUb0ludChyZWZCKVxuICB9KVxufVxuXG5mdW5jdGlvbiBiblRvSGV4KGJuKSB7XG4gIHJldHVybiAnMHgnICsgYm4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIGJsb2NrUmVmSXNOdW1iZXIoYmxvY2tSZWYpe1xuICByZXR1cm4gYmxvY2tSZWYgJiYgIVsnZWFybGllc3QnLCAnbGF0ZXN0JywgJ3BlbmRpbmcnXS5pbmNsdWRlcyhibG9ja1JlZilcbn1cblxuZnVuY3Rpb24gaGV4VG9JbnQoaGV4U3RyaW5nKSB7XG4gIGlmIChoZXhTdHJpbmcgPT09IHVuZGVmaW5lZCB8fCBoZXhTdHJpbmcgPT09IG51bGwpIHJldHVybiBoZXhTdHJpbmdcbiAgcmV0dXJuIE51bWJlci5wYXJzZUludChoZXhTdHJpbmcsIDE2KVxufVxuXG5mdW5jdGlvbiBpbmNyZW1lbnRIZXhJbnQoaGV4U3RyaW5nKXtcbiAgaWYgKGhleFN0cmluZyA9PT0gdW5kZWZpbmVkIHx8IGhleFN0cmluZyA9PT0gbnVsbCkgcmV0dXJuIGhleFN0cmluZ1xuICBjb25zdCB2YWx1ZSA9IGhleFRvSW50KGhleFN0cmluZylcbiAgcmV0dXJuIGludFRvSGV4KHZhbHVlICsgMSlcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGlmIChpbnQgPT09IHVuZGVmaW5lZCB8fCBpbnQgPT09IG51bGwpIHJldHVybiBpbnRcbiAgbGV0IGhleFN0cmluZyA9IGludC50b1N0cmluZygxNilcbiAgY29uc3QgbmVlZHNMZWZ0UGFkID0gaGV4U3RyaW5nLmxlbmd0aCAlIDJcbiAgaWYgKG5lZWRzTGVmdFBhZCkgaGV4U3RyaW5nID0gJzAnICsgaGV4U3RyaW5nXG4gIHJldHVybiAnMHgnICsgaGV4U3RyaW5nXG59XG5cbmZ1bmN0aW9uIHVuc2FmZVJhbmRvbUJ5dGVzKGJ5dGVDb3VudCkge1xuICBsZXQgcmVzdWx0ID0gJzB4J1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVDb3VudDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IHVuc2FmZVJhbmRvbU5pYmJsZSgpXG4gICAgcmVzdWx0ICs9IHVuc2FmZVJhbmRvbU5pYmJsZSgpXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiB1bnNhZmVSYW5kb21OaWJibGUoKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpXG59XG4iLCJjb25zdCBNdXRleCA9IHJlcXVpcmUoJ2FzeW5jLW11dGV4JykuTXV0ZXhcbmNvbnN0IHsgY3JlYXRlQXN5bmNNaWRkbGV3YXJlIH0gPSByZXF1aXJlKCdqc29uLXJwYy1lbmdpbmUnKVxuY29uc3QgY3JlYXRlSnNvblJwY01pZGRsZXdhcmUgPSByZXF1aXJlKCdldGgtanNvbi1ycGMtbWlkZGxld2FyZS9zY2FmZm9sZCcpXG5jb25zdCBMb2dGaWx0ZXIgPSByZXF1aXJlKCcuL2xvZy1maWx0ZXIuanMnKVxuY29uc3QgQmxvY2tGaWx0ZXIgPSByZXF1aXJlKCcuL2Jsb2NrLWZpbHRlci5qcycpXG5jb25zdCBUeEZpbHRlciA9IHJlcXVpcmUoJy4vdHgtZmlsdGVyLmpzJylcbmNvbnN0IHsgaW50VG9IZXgsIGhleFRvSW50IH0gPSByZXF1aXJlKCcuL2hleFV0aWxzJylcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVFdGhGaWx0ZXJNaWRkbGV3YXJlXG5cbmZ1bmN0aW9uIGNyZWF0ZUV0aEZpbHRlck1pZGRsZXdhcmUoeyBibG9ja1RyYWNrZXIsIHByb3ZpZGVyIH0pIHtcblxuICAvLyBjcmVhdGUgZmlsdGVyIGNvbGxlY3Rpb25cbiAgbGV0IGZpbHRlckluZGV4ID0gMFxuICBsZXQgZmlsdGVycyA9IHt9XG4gIC8vIGNyZWF0ZSB1cGRhdGUgbXV0ZXhcbiAgY29uc3QgbXV0ZXggPSBuZXcgTXV0ZXgoKVxuICBjb25zdCB3YWl0Rm9yRnJlZSA9IG11dGV4TWlkZGxld2FyZVdyYXBwZXIoeyBtdXRleCB9KVxuXG4gIGNvbnN0IG1pZGRsZXdhcmUgPSBjcmVhdGVKc29uUnBjTWlkZGxld2FyZSh7XG4gICAgLy8gaW5zdGFsbCBmaWx0ZXJzXG4gICAgZXRoX25ld0ZpbHRlcjogICAgICAgICAgICAgICAgICAgd2FpdEZvckZyZWUodG9GaWx0ZXJDcmVhdGlvbk1pZGRsZXdhcmUobmV3TG9nRmlsdGVyKSksXG4gICAgZXRoX25ld0Jsb2NrRmlsdGVyOiAgICAgICAgICAgICAgd2FpdEZvckZyZWUodG9GaWx0ZXJDcmVhdGlvbk1pZGRsZXdhcmUobmV3QmxvY2tGaWx0ZXIpKSxcbiAgICBldGhfbmV3UGVuZGluZ1RyYW5zYWN0aW9uRmlsdGVyOiB3YWl0Rm9yRnJlZSh0b0ZpbHRlckNyZWF0aW9uTWlkZGxld2FyZShuZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXIpKSxcbiAgICAvLyB1bmluc3RhbGwgZmlsdGVyc1xuICAgIGV0aF91bmluc3RhbGxGaWx0ZXI6ICAgICAgICAgICAgIHdhaXRGb3JGcmVlKHRvQXN5bmNScGNNaWRkbGV3YXJlKHVuaW5zdGFsbEZpbHRlckhhbmRsZXIpKSxcbiAgICAvLyBjaGVja2luZyBmaWx0ZXIgY2hhbmdlc1xuICAgIGV0aF9nZXRGaWx0ZXJDaGFuZ2VzOiAgICAgICAgICAgIHdhaXRGb3JGcmVlKHRvQXN5bmNScGNNaWRkbGV3YXJlKGdldEZpbHRlckNoYW5nZXMpKSxcbiAgICBldGhfZ2V0RmlsdGVyTG9nczogICAgICAgICAgICAgICB3YWl0Rm9yRnJlZSh0b0FzeW5jUnBjTWlkZGxld2FyZShnZXRGaWx0ZXJMb2dzKSksXG4gIH0pXG5cbiAgLy8gc2V0dXAgZmlsdGVyIHVwZGF0aW5nIGFuZCBkZXN0cm95IGhhbmRsZXJcbiAgY29uc3QgZmlsdGVyVXBkYXRlciA9IGFzeW5jICh7IG9sZEJsb2NrLCBuZXdCbG9jayB9KSA9PiB7XG4gICAgaWYgKGZpbHRlcnMubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICAvLyBsb2NrIHVwZGF0ZSByZWFkc1xuICAgIGNvbnN0IHJlbGVhc2VMb2NrID0gYXdhaXQgbXV0ZXguYWNxdWlyZSgpXG4gICAgdHJ5IHtcbiAgICAgIC8vIHByb2Nlc3MgYWxsIGZpbHRlcnMgaW4gcGFyYWxsZWxcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKG9ialZhbHVlcyhmaWx0ZXJzKS5tYXAoYXN5bmMgKGZpbHRlcikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgYXdhaXQgZmlsdGVyLnVwZGF0ZSh7IG9sZEJsb2NrLCBuZXdCbG9jayB9KVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvLyBoYW5kbGUgZWFjaCBlcnJvciBpbmRpdmlkdWFsbHkgc28gZmlsdGVyIHVwZGF0ZSBlcnJvcnMgZG9uJ3QgYWZmZWN0IG90aGVyIGZpbHRlcnNcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycilcbiAgICAgICAgfVxuICAgICAgfSkpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBsb2cgZXJyb3Igc28gd2UgZG9uJ3Qgc2tpcCB0aGUgcmVsZWFzZUxvY2tcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgIH1cbiAgICAvLyB1bmxvY2sgdXBkYXRlIHJlYWRzXG4gICAgcmVsZWFzZUxvY2soKVxuICB9XG5cbiAgLy8gZXhwb3NlIGZpbHRlciBtZXRob2RzIGRpcmVjdGx5XG4gIG1pZGRsZXdhcmUubmV3TG9nRmlsdGVyID0gbmV3TG9nRmlsdGVyXG4gIG1pZGRsZXdhcmUubmV3QmxvY2tGaWx0ZXIgPSBuZXdCbG9ja0ZpbHRlclxuICBtaWRkbGV3YXJlLm5ld1BlbmRpbmdUcmFuc2FjdGlvbkZpbHRlciA9IG5ld1BlbmRpbmdUcmFuc2FjdGlvbkZpbHRlclxuICBtaWRkbGV3YXJlLnVuaW5zdGFsbEZpbHRlciA9IHVuaW5zdGFsbEZpbHRlckhhbmRsZXJcbiAgbWlkZGxld2FyZS5nZXRGaWx0ZXJDaGFuZ2VzID0gZ2V0RmlsdGVyQ2hhbmdlc1xuICBtaWRkbGV3YXJlLmdldEZpbHRlckxvZ3MgPSBnZXRGaWx0ZXJMb2dzXG5cbiAgLy8gZXhwb3NlIGRlc3Ryb3kgbWV0aG9kIGZvciBjbGVhbnVwXG4gIG1pZGRsZXdhcmUuZGVzdHJveSA9ICgpID0+IHtcbiAgICB1bmluc3RhbGxBbGxGaWx0ZXJzKClcbiAgfVxuXG4gIHJldHVybiBtaWRkbGV3YXJlXG5cbiAgLy9cbiAgLy8gbmV3IGZpbHRlcnNcbiAgLy9cblxuICBhc3luYyBmdW5jdGlvbiBuZXdMb2dGaWx0ZXIocGFyYW1zKSB7XG4gICAgY29uc3QgZmlsdGVyID0gbmV3IExvZ0ZpbHRlcih7IHByb3ZpZGVyLCBwYXJhbXMgfSlcbiAgICBjb25zdCBmaWx0ZXJJbmRleCA9IGF3YWl0IGluc3RhbGxGaWx0ZXIoZmlsdGVyKVxuICAgIHJldHVybiBmaWx0ZXJcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIG5ld0Jsb2NrRmlsdGVyKCkge1xuICAgIGNvbnN0IGZpbHRlciA9IG5ldyBCbG9ja0ZpbHRlcih7IHByb3ZpZGVyIH0pXG4gICAgY29uc3QgZmlsdGVySW5kZXggPSBhd2FpdCBpbnN0YWxsRmlsdGVyKGZpbHRlcilcbiAgICByZXR1cm4gZmlsdGVyXG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBuZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXIoKSB7XG4gICAgY29uc3QgZmlsdGVyID0gbmV3IFR4RmlsdGVyKHsgcHJvdmlkZXIgfSlcbiAgICBjb25zdCBmaWx0ZXJJbmRleCA9IGF3YWl0IGluc3RhbGxGaWx0ZXIoZmlsdGVyKVxuICAgIHJldHVybiBmaWx0ZXJcbiAgfVxuXG4gIC8vXG4gIC8vIGdldCBmaWx0ZXIgY2hhbmdlc1xuICAvL1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGdldEZpbHRlckNoYW5nZXMoZmlsdGVySW5kZXhIZXgpIHtcbiAgICBjb25zdCBmaWx0ZXJJbmRleCA9IGhleFRvSW50KGZpbHRlckluZGV4SGV4KVxuICAgIGNvbnN0IGZpbHRlciA9IGZpbHRlcnNbZmlsdGVySW5kZXhdXG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gZmlsdGVyIGZvciBpbmRleCBcIiR7ZmlsdGVySW5kZXh9XCJgKVxuICAgIH1cbiAgICBjb25zdCByZXN1bHRzID0gZmlsdGVyLmdldENoYW5nZXNBbmRDbGVhcigpXG4gICAgcmV0dXJuIHJlc3VsdHNcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGdldEZpbHRlckxvZ3MoZmlsdGVySW5kZXhIZXgpIHtcbiAgICBjb25zdCBmaWx0ZXJJbmRleCA9IGhleFRvSW50KGZpbHRlckluZGV4SGV4KVxuICAgIGNvbnN0IGZpbHRlciA9IGZpbHRlcnNbZmlsdGVySW5kZXhdXG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gZmlsdGVyIGZvciBpbmRleCBcIiR7ZmlsdGVySW5kZXh9XCJgKVxuICAgIH1cbiAgICAvLyBvbmx5IHJldHVybiByZXN1bHRzIGZvciBsb2cgZmlsdGVyc1xuICAgIGlmIChmaWx0ZXIudHlwZSA9PT0gJ2xvZycpIHtcbiAgICAgIHJlc3VsdHMgPSBmaWx0ZXIuZ2V0QWxsUmVzdWx0cygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdHMgPSBbXVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9XG5cblxuICAvL1xuICAvLyByZW1vdmUgZmlsdGVyc1xuICAvL1xuXG5cbiAgYXN5bmMgZnVuY3Rpb24gdW5pbnN0YWxsRmlsdGVySGFuZGxlcihmaWx0ZXJJbmRleEhleCkge1xuICAgIC8vIGNoZWNrIGZpbHRlciBleGlzdHNcbiAgICBjb25zdCBmaWx0ZXJJbmRleCA9IGhleFRvSW50KGZpbHRlckluZGV4SGV4KVxuICAgIGNvbnN0IGZpbHRlciA9IGZpbHRlcnNbZmlsdGVySW5kZXhdXG4gICAgY29uc3QgcmVzdWx0ID0gQm9vbGVhbihmaWx0ZXIpXG4gICAgLy8gdW5pbnN0YWxsIGZpbHRlclxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGF3YWl0IHVuaW5zdGFsbEZpbHRlcihmaWx0ZXJJbmRleClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy9cbiAgLy8gdXRpbHNcbiAgLy9cblxuICBhc3luYyBmdW5jdGlvbiBpbnN0YWxsRmlsdGVyKGZpbHRlcikge1xuICAgIGNvbnN0IHByZXZGaWx0ZXJDb3VudCA9IG9ialZhbHVlcyhmaWx0ZXJzKS5sZW5ndGhcbiAgICAvLyBpbnN0YWxsIGZpbHRlclxuICAgIGNvbnN0IGN1cnJlbnRCbG9jayA9IGF3YWl0IGJsb2NrVHJhY2tlci5nZXRMYXRlc3RCbG9jaygpXG4gICAgYXdhaXQgZmlsdGVyLmluaXRpYWxpemUoeyBjdXJyZW50QmxvY2sgfSlcbiAgICBmaWx0ZXJJbmRleCsrXG4gICAgZmlsdGVyc1tmaWx0ZXJJbmRleF0gPSBmaWx0ZXJcbiAgICBmaWx0ZXIuaWQgPSBmaWx0ZXJJbmRleFxuICAgIGZpbHRlci5pZEhleCA9IGludFRvSGV4KGZpbHRlckluZGV4KVxuICAgIC8vIHVwZGF0ZSBibG9jayB0cmFja2VyIHN1YnNcbiAgICBjb25zdCBuZXdGaWx0ZXJDb3VudCA9IG9ialZhbHVlcyhmaWx0ZXJzKS5sZW5ndGhcbiAgICB1cGRhdGVCbG9ja1RyYWNrZXJTdWJzKHsgcHJldkZpbHRlckNvdW50LCBuZXdGaWx0ZXJDb3VudCB9KVxuICAgIHJldHVybiBmaWx0ZXJJbmRleFxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gdW5pbnN0YWxsRmlsdGVyKGZpbHRlckluZGV4KSB7XG4gICAgY29uc3QgcHJldkZpbHRlckNvdW50ID0gb2JqVmFsdWVzKGZpbHRlcnMpLmxlbmd0aFxuICAgIGRlbGV0ZSBmaWx0ZXJzW2ZpbHRlckluZGV4XVxuICAgIC8vIHVwZGF0ZSBibG9jayB0cmFja2VyIHN1YnNcbiAgICBjb25zdCBuZXdGaWx0ZXJDb3VudCA9IG9ialZhbHVlcyhmaWx0ZXJzKS5sZW5ndGhcbiAgICB1cGRhdGVCbG9ja1RyYWNrZXJTdWJzKHsgcHJldkZpbHRlckNvdW50LCBuZXdGaWx0ZXJDb3VudCB9KVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gdW5pbnN0YWxsQWxsRmlsdGVycygpIHtcbiAgICBjb25zdCBwcmV2RmlsdGVyQ291bnQgPSBvYmpWYWx1ZXMoZmlsdGVycykubGVuZ3RoXG4gICAgZmlsdGVycyA9IHt9XG4gICAgLy8gdXBkYXRlIGJsb2NrIHRyYWNrZXIgc3Vic1xuICAgIHVwZGF0ZUJsb2NrVHJhY2tlclN1YnMoeyBwcmV2RmlsdGVyQ291bnQsIG5ld0ZpbHRlckNvdW50OiAwIH0pXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVCbG9ja1RyYWNrZXJTdWJzKHsgcHJldkZpbHRlckNvdW50LCBuZXdGaWx0ZXJDb3VudCB9KSB7XG4gICAgLy8gc3Vic2NyaWJlXG4gICAgaWYgKHByZXZGaWx0ZXJDb3VudCA9PT0gMCAmJiBuZXdGaWx0ZXJDb3VudCA+IDApIHtcbiAgICAgIGJsb2NrVHJhY2tlci5vbignc3luYycsIGZpbHRlclVwZGF0ZXIpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gdW5zdWJzY3JpYmVcbiAgICBpZiAocHJldkZpbHRlckNvdW50ID4gMCAmJiBuZXdGaWx0ZXJDb3VudCA9PT0gMCkge1xuICAgICAgYmxvY2tUcmFja2VyLnJlbW92ZUxpc3RlbmVyKCdzeW5jJywgZmlsdGVyVXBkYXRlcilcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuXG59XG5cbi8vIGhlbHBlciBmb3IgdHVybmluZyBmaWx0ZXIgY29uc3RydWN0b3JzIGludG8gcnBjIG1pZGRsZXdhcmVcbmZ1bmN0aW9uIHRvRmlsdGVyQ3JlYXRpb25NaWRkbGV3YXJlKGNyZWF0ZUZpbHRlckZuKSB7XG4gIHJldHVybiB0b0FzeW5jUnBjTWlkZGxld2FyZShhc3luYyAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGZpbHRlciA9IGF3YWl0IGNyZWF0ZUZpbHRlckZuKC4uLmFyZ3MpXG4gICAgY29uc3QgcmVzdWx0ID0gaW50VG9IZXgoZmlsdGVyLmlkKVxuICAgIHJldHVybiByZXN1bHRcbiAgfSlcbn1cblxuLy8gaGVscGVyIGZvciBwdWxsaW5nIG91dCByZXEucGFyYW1zIGFuZCBzZXR0aW5nIHJlcy5yZXN1bHRcbmZ1bmN0aW9uIHRvQXN5bmNScGNNaWRkbGV3YXJlKGFzeW5jRm4pIHtcbiAgcmV0dXJuIGNyZWF0ZUFzeW5jTWlkZGxld2FyZShhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhc3luY0ZuLmFwcGx5KG51bGwsIHJlcS5wYXJhbXMpXG4gICAgcmVzLnJlc3VsdCA9IHJlc3VsdFxuICB9KVxufVxuXG5mdW5jdGlvbiBtdXRleE1pZGRsZXdhcmVXcmFwcGVyKHsgbXV0ZXggfSkge1xuICByZXR1cm4gKG1pZGRsZXdhcmUpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKHJlcSwgcmVzLCBuZXh0LCBlbmQpID0+IHtcbiAgICAgIC8vIHdhaXQgZm9yIG11dGV4IGF2YWlsYWJsZVxuICAgICAgLy8gd2UgY2FuIHJlbGVhc2UgaW1tZWRpYXRlbHkgYmVjYXVzZVxuICAgICAgLy8gd2UganVzdCBuZWVkIHRvIG1ha2Ugc3VyZSB1cGRhdGVzIGFyZW4ndCBhY3RpdmVcbiAgICAgIGNvbnN0IHJlbGVhc2VMb2NrID0gYXdhaXQgbXV0ZXguYWNxdWlyZSgpXG4gICAgICByZWxlYXNlTG9jaygpXG4gICAgICBtaWRkbGV3YXJlKHJlcSwgcmVzLCBuZXh0LCBlbmQpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9ialZhbHVlcyhvYmosIGZuKXtcbiAgY29uc3QgdmFsdWVzID0gW11cbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgIHZhbHVlcy5wdXNoKG9ialtrZXldKVxuICB9XG4gIHJldHVybiB2YWx1ZXNcbn1cbiIsImNvbnN0IEV0aFF1ZXJ5ID0gcmVxdWlyZSgnZXRoLXF1ZXJ5JylcbmNvbnN0IHBpZnkgPSByZXF1aXJlKCdwaWZ5JylcbmNvbnN0IEJhc2VGaWx0ZXJXaXRoSGlzdG9yeSA9IHJlcXVpcmUoJy4vYmFzZS1maWx0ZXItaGlzdG9yeScpXG5jb25zdCB7IGJuVG9IZXgsIGhleFRvSW50LCBpbmNyZW1lbnRIZXhJbnQsIG1pbkJsb2NrUmVmLCBibG9ja1JlZklzTnVtYmVyIH0gPSByZXF1aXJlKCcuL2hleFV0aWxzJylcblxuY2xhc3MgTG9nRmlsdGVyIGV4dGVuZHMgQmFzZUZpbHRlcldpdGhIaXN0b3J5IHtcblxuICBjb25zdHJ1Y3RvciAoeyBwcm92aWRlciwgcGFyYW1zIH0pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50eXBlID0gJ2xvZydcbiAgICB0aGlzLmV0aFF1ZXJ5ID0gbmV3IEV0aFF1ZXJ5KHByb3ZpZGVyKVxuICAgIHRoaXMucGFyYW1zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBmcm9tQmxvY2s6ICdsYXRlc3QnLFxuICAgICAgdG9CbG9jazogJ2xhdGVzdCcsXG4gICAgICBhZGRyZXNzOiB1bmRlZmluZWQsXG4gICAgICB0b3BpY3M6IFtdLFxuICAgIH0sIHBhcmFtcylcbiAgICAvLyBub3JtYWxpemUgYWRkcmVzcyBwYXJhbWV0ZXJcbiAgICBpZiAodGhpcy5wYXJhbXMuYWRkcmVzcykge1xuICAgICAgLy8gZW5zdXJlIGFycmF5XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5wYXJhbXMuYWRkcmVzcykpIHtcbiAgICAgICAgdGhpcy5wYXJhbXMuYWRkcmVzcyA9IFt0aGlzLnBhcmFtcy5hZGRyZXNzXVxuICAgICAgfVxuICAgICAgLy8gZW5zdXJlIGxvd2VyY2FzZVxuICAgICAgdGhpcy5wYXJhbXMuYWRkcmVzcyA9IHRoaXMucGFyYW1zLmFkZHJlc3MubWFwKGFkZHJlc3MgPT4gYWRkcmVzcy50b0xvd2VyQ2FzZSgpKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUoeyBjdXJyZW50QmxvY2sgfSkge1xuICAgIC8vIHJlc29sdmUgcGFyYW1zLmZyb21CbG9ja1xuICAgIGxldCBmcm9tQmxvY2sgPSB0aGlzLnBhcmFtcy5mcm9tQmxvY2tcbiAgICBpZiAoWydsYXRlc3QnLCAncGVuZGluZyddLmluY2x1ZGVzKGZyb21CbG9jaykpIGZyb21CbG9jayA9IGN1cnJlbnRCbG9ja1xuICAgIGlmICgnZWFybGllc3QnID09PSBmcm9tQmxvY2spIGZyb21CbG9jayA9ICcweDAnXG4gICAgdGhpcy5wYXJhbXMuZnJvbUJsb2NrID0gZnJvbUJsb2NrXG4gICAgLy8gc2V0IHRvQmxvY2sgZm9yIGluaXRpYWwgbG9va3VwXG4gICAgY29uc3QgdG9CbG9jayA9IG1pbkJsb2NrUmVmKHRoaXMucGFyYW1zLnRvQmxvY2ssIGN1cnJlbnRCbG9jaylcbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBhcmFtcywgeyB0b0Jsb2NrIH0pXG4gICAgLy8gZmV0Y2ggbG9ncyBhbmQgYWRkIHRvIHJlc3VsdHNcbiAgICBjb25zdCBuZXdMb2dzID0gYXdhaXQgdGhpcy5fZmV0Y2hMb2dzKHBhcmFtcylcbiAgICB0aGlzLmFkZEluaXRpYWxSZXN1bHRzKG5ld0xvZ3MpXG4gIH1cblxuICBhc3luYyB1cGRhdGUgKHsgb2xkQmxvY2ssIG5ld0Jsb2NrIH0pIHtcbiAgICAvLyBjb25maWd1cmUgcGFyYW1zIGZvciB0aGlzIHVwZGF0ZVxuICAgIGNvbnN0IHRvQmxvY2sgPSBuZXdCbG9ja1xuICAgIGxldCBmcm9tQmxvY2tcbiAgICAvLyBvbGRCbG9jayBpcyBlbXB0eSBvbiBmaXJzdCBzeW5jXG4gICAgaWYgKG9sZEJsb2NrKSB7XG4gICAgICBmcm9tQmxvY2sgPSBpbmNyZW1lbnRIZXhJbnQob2xkQmxvY2spXG4gICAgfSBlbHNlIHtcbiAgICAgIGZyb21CbG9jayA9IG5ld0Jsb2NrXG4gICAgfVxuICAgIC8vIGZldGNoIGxvZ3NcbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBhcmFtcywgeyBmcm9tQmxvY2ssIHRvQmxvY2sgfSlcbiAgICBjb25zdCBuZXdMb2dzID0gYXdhaXQgdGhpcy5fZmV0Y2hMb2dzKHBhcmFtcylcbiAgICBjb25zdCBtYXRjaGluZ0xvZ3MgPSBuZXdMb2dzLmZpbHRlcihsb2cgPT4gdGhpcy5tYXRjaExvZyhsb2cpKVxuXG4gICAgLy8gYWRkIHRvIHJlc3VsdHNcbiAgICB0aGlzLmFkZFJlc3VsdHMobWF0Y2hpbmdMb2dzKVxuICB9XG5cbiAgYXN5bmMgX2ZldGNoTG9ncyAocGFyYW1zKSB7XG4gICAgY29uc3QgbmV3TG9ncyA9IGF3YWl0IHBpZnkoY2IgPT4gdGhpcy5ldGhRdWVyeS5nZXRMb2dzKHBhcmFtcywgY2IpKSgpXG4gICAgLy8gYWRkIHRvIHJlc3VsdHNcbiAgICByZXR1cm4gbmV3TG9nc1xuICB9XG5cbiAgbWF0Y2hMb2cobG9nKSB7XG4gICAgLy8gY2hlY2sgaWYgYmxvY2sgbnVtYmVyIGluIGJvdW5kczpcbiAgICBpZiAoaGV4VG9JbnQodGhpcy5wYXJhbXMuZnJvbUJsb2NrKSA+PSBoZXhUb0ludChsb2cuYmxvY2tOdW1iZXIpKSByZXR1cm4gZmFsc2VcbiAgICBpZiAoYmxvY2tSZWZJc051bWJlcih0aGlzLnBhcmFtcy50b0Jsb2NrKSAmJiBoZXhUb0ludCh0aGlzLnBhcmFtcy50b0Jsb2NrKSA8PSBoZXhUb0ludChsb2cuYmxvY2tOdW1iZXIpKSByZXR1cm4gZmFsc2VcblxuICAgIC8vIGFkZHJlc3MgaXMgY29ycmVjdDpcbiAgICBjb25zdCBub3JtYWxpemVkTG9nQWRkcmVzcyA9IGxvZy5hZGRyZXNzICYmIGxvZy5hZGRyZXNzLnRvTG93ZXJDYXNlKClcbiAgICBpZiAodGhpcy5wYXJhbXMuYWRkcmVzcyAmJiBub3JtYWxpemVkTG9nQWRkcmVzcyAmJiAhdGhpcy5wYXJhbXMuYWRkcmVzcy5pbmNsdWRlcyhub3JtYWxpemVkTG9nQWRkcmVzcykpIHJldHVybiBmYWxzZVxuXG4gICAgLy8gdG9waWNzIG1hdGNoOlxuICAgIC8vIHRvcGljcyBhcmUgcG9zaXRpb24tZGVwZW5kYW50XG4gICAgLy8gdG9waWNzIGNhbiBiZSBuZXN0ZWQgdG8gcmVwcmVzZW50IGBvcmAgW1thIHx8IGJdLCBjXVxuICAgIC8vIHRvcGljcyBjYW4gYmUgbnVsbCwgcmVwcmVzZW50aW5nIGEgd2lsZCBjYXJkIGZvciB0aGF0IHBvc2l0aW9uXG4gICAgY29uc3QgdG9waWNzTWF0Y2ggPSB0aGlzLnBhcmFtcy50b3BpY3MuZXZlcnkoKHRvcGljUGF0dGVybiwgaW5kZXgpID0+IHtcbiAgICAgIC8vIHBhdHRlcm4gaXMgbG9uZ2VyIHRoYW4gYWN0dWFsIHRvcGljc1xuICAgICAgbGV0IGxvZ1RvcGljID0gbG9nLnRvcGljc1tpbmRleF1cbiAgICAgIGlmICghbG9nVG9waWMpIHJldHVybiBmYWxzZVxuICAgICAgbG9nVG9waWMgPSBsb2dUb3BpYy50b0xvd2VyQ2FzZSgpXG4gICAgICAvLyBub3JtYWxpemUgc3ViVG9waWNzXG4gICAgICBsZXQgc3VidG9waWNzVG9NYXRjaCA9IEFycmF5LmlzQXJyYXkodG9waWNQYXR0ZXJuKSA/IHRvcGljUGF0dGVybiA6IFt0b3BpY1BhdHRlcm5dXG4gICAgICAvLyBjaGVjayBmb3Igd2lsZCBjYXJkXG4gICAgICBjb25zdCBzdWJ0b3BpY3NJbmNsdWRlV2lsZGNhcmQgPSBzdWJ0b3BpY3NUb01hdGNoLmluY2x1ZGVzKG51bGwpXG4gICAgICBpZiAoc3VidG9waWNzSW5jbHVkZVdpbGRjYXJkKSByZXR1cm4gdHJ1ZVxuICAgICAgc3VidG9waWNzVG9NYXRjaCA9IHN1YnRvcGljc1RvTWF0Y2gubWFwKHRvcGljID0+IHRvcGljLnRvTG93ZXJDYXNlKCkpXG4gICAgICAvLyBjaGVjayBlYWNoIHBvc3NpYmxlIG1hdGNoaW5nIHRvcGljXG4gICAgICBjb25zdCB0b3BpY0RvZXNNYXRjaCA9IHN1YnRvcGljc1RvTWF0Y2guaW5jbHVkZXMobG9nVG9waWMpXG4gICAgICByZXR1cm4gdG9waWNEb2VzTWF0Y2hcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRvcGljc01hdGNoXG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExvZ0ZpbHRlclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwcm9jZXNzRm4gPSAoZm4sIG9wdGlvbnMsIHByb3h5LCB1bndyYXBwZWQpID0+IGZ1bmN0aW9uICguLi5hcmd1bWVudHNfKSB7XG5cdGNvbnN0IFAgPSBvcHRpb25zLnByb21pc2VNb2R1bGU7XG5cblx0cmV0dXJuIG5ldyBQKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRpZiAob3B0aW9ucy5tdWx0aUFyZ3MpIHtcblx0XHRcdGFyZ3VtZW50c18ucHVzaCgoLi4ucmVzdWx0KSA9PiB7XG5cdFx0XHRcdGlmIChvcHRpb25zLmVycm9yRmlyc3QpIHtcblx0XHRcdFx0XHRpZiAocmVzdWx0WzBdKSB7XG5cdFx0XHRcdFx0XHRyZWplY3QocmVzdWx0KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnNoaWZ0KCk7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKHJlc3VsdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc29sdmUocmVzdWx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmIChvcHRpb25zLmVycm9yRmlyc3QpIHtcblx0XHRcdGFyZ3VtZW50c18ucHVzaCgoZXJyb3IsIHJlc3VsdCkgPT4ge1xuXHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc29sdmUocmVzdWx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFyZ3VtZW50c18ucHVzaChyZXNvbHZlKTtcblx0XHR9XG5cblx0XHRjb25zdCBzZWxmID0gdGhpcyA9PT0gcHJveHkgPyB1bndyYXBwZWQgOiB0aGlzO1xuXHRcdFJlZmxlY3QuYXBwbHkoZm4sIHNlbGYsIGFyZ3VtZW50c18pO1xuXHR9KTtcbn07XG5cbmNvbnN0IGZpbHRlckNhY2hlID0gbmV3IFdlYWtNYXAoKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHtcblx0b3B0aW9ucyA9IHtcblx0XHRleGNsdWRlOiBbLy4rKD86U3luY3xTdHJlYW0pJC9dLFxuXHRcdGVycm9yRmlyc3Q6IHRydWUsXG5cdFx0cHJvbWlzZU1vZHVsZTogUHJvbWlzZSxcblx0XHQuLi5vcHRpb25zXG5cdH07XG5cblx0Y29uc3Qgb2JqZWN0VHlwZSA9IHR5cGVvZiBpbnB1dDtcblx0aWYgKCEoaW5wdXQgIT09IG51bGwgJiYgKG9iamVjdFR5cGUgPT09ICdvYmplY3QnIHx8IG9iamVjdFR5cGUgPT09ICdmdW5jdGlvbicpKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYGlucHV0XFxgIHRvIGJlIGEgXFxgRnVuY3Rpb25cXGAgb3IgXFxgT2JqZWN0XFxgLCBnb3QgXFxgJHtpbnB1dCA9PT0gbnVsbCA/ICdudWxsJyA6IG9iamVjdFR5cGV9XFxgYCk7XG5cdH1cblxuXHRjb25zdCBmaWx0ZXIgPSAodGFyZ2V0LCBrZXkpID0+IHtcblx0XHRsZXQgY2FjaGVkID0gZmlsdGVyQ2FjaGUuZ2V0KHRhcmdldCk7XG5cblx0XHRpZiAoIWNhY2hlZCkge1xuXHRcdFx0Y2FjaGVkID0ge307XG5cdFx0XHRmaWx0ZXJDYWNoZS5zZXQodGFyZ2V0LCBjYWNoZWQpO1xuXHRcdH1cblxuXHRcdGlmIChrZXkgaW4gY2FjaGVkKSB7XG5cdFx0XHRyZXR1cm4gY2FjaGVkW2tleV07XG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0Y2ggPSBwYXR0ZXJuID0+ICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGtleSA9PT0gJ3N5bWJvbCcpID8ga2V5ID09PSBwYXR0ZXJuIDogcGF0dGVybi50ZXN0KGtleSk7XG5cdFx0Y29uc3QgZGVzYyA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcblx0XHRjb25zdCB3cml0YWJsZU9yQ29uZmlndXJhYmxlT3duID0gKGRlc2MgPT09IHVuZGVmaW5lZCB8fCBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKTtcblx0XHRjb25zdCBpbmNsdWRlZCA9IG9wdGlvbnMuaW5jbHVkZSA/IG9wdGlvbnMuaW5jbHVkZS5zb21lKG1hdGNoKSA6ICFvcHRpb25zLmV4Y2x1ZGUuc29tZShtYXRjaCk7XG5cdFx0Y29uc3Qgc2hvdWxkRmlsdGVyID0gaW5jbHVkZWQgJiYgd3JpdGFibGVPckNvbmZpZ3VyYWJsZU93bjtcblx0XHRjYWNoZWRba2V5XSA9IHNob3VsZEZpbHRlcjtcblx0XHRyZXR1cm4gc2hvdWxkRmlsdGVyO1xuXHR9O1xuXG5cdGNvbnN0IGNhY2hlID0gbmV3IFdlYWtNYXAoKTtcblxuXHRjb25zdCBwcm94eSA9IG5ldyBQcm94eShpbnB1dCwge1xuXHRcdGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncykge1xuXHRcdFx0Y29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KHRhcmdldCk7XG5cblx0XHRcdGlmIChjYWNoZWQpIHtcblx0XHRcdFx0cmV0dXJuIFJlZmxlY3QuYXBwbHkoY2FjaGVkLCB0aGlzQXJnLCBhcmdzKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcGlmaWVkID0gb3B0aW9ucy5leGNsdWRlTWFpbiA/IHRhcmdldCA6IHByb2Nlc3NGbih0YXJnZXQsIG9wdGlvbnMsIHByb3h5LCB0YXJnZXQpO1xuXHRcdFx0Y2FjaGUuc2V0KHRhcmdldCwgcGlmaWVkKTtcblx0XHRcdHJldHVybiBSZWZsZWN0LmFwcGx5KHBpZmllZCwgdGhpc0FyZywgYXJncyk7XG5cdFx0fSxcblxuXHRcdGdldCh0YXJnZXQsIGtleSkge1xuXHRcdFx0Y29uc3QgcHJvcGVydHkgPSB0YXJnZXRba2V5XTtcblxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1leHRlbmQtbmF0aXZlL25vLXVzZS1leHRlbmQtbmF0aXZlXG5cdFx0XHRpZiAoIWZpbHRlcih0YXJnZXQsIGtleSkgfHwgcHJvcGVydHkgPT09IEZ1bmN0aW9uLnByb3RvdHlwZVtrZXldKSB7XG5cdFx0XHRcdHJldHVybiBwcm9wZXJ0eTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KHByb3BlcnR5KTtcblxuXHRcdFx0aWYgKGNhY2hlZCkge1xuXHRcdFx0XHRyZXR1cm4gY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGNvbnN0IHBpZmllZCA9IHByb2Nlc3NGbihwcm9wZXJ0eSwgb3B0aW9ucywgcHJveHksIHRhcmdldCk7XG5cdFx0XHRcdGNhY2hlLnNldChwcm9wZXJ0eSwgcGlmaWVkKTtcblx0XHRcdFx0cmV0dXJuIHBpZmllZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHByb3BlcnR5O1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcbiIsImNvbnN0IFNhZmVFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdAbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyJykuZGVmYXVsdFxuY29uc3QgY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlID0gcmVxdWlyZSgnZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvc2NhZmZvbGQnKVxuY29uc3QgeyBjcmVhdGVBc3luY01pZGRsZXdhcmUgfSA9IHJlcXVpcmUoJ2pzb24tcnBjLWVuZ2luZScpXG5jb25zdCBjcmVhdGVGaWx0ZXJNaWRkbGV3YXJlID0gcmVxdWlyZSgnLi9pbmRleC5qcycpXG5jb25zdCB7IHVuc2FmZVJhbmRvbUJ5dGVzLCBpbmNyZW1lbnRIZXhJbnQgfSA9IHJlcXVpcmUoJy4vaGV4VXRpbHMuanMnKVxuY29uc3QgZ2V0QmxvY2tzRm9yUmFuZ2UgPSByZXF1aXJlKCcuL2dldEJsb2Nrc0ZvclJhbmdlLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTdWJzY3JpcHRpb25NaWRkbGV3YXJlXG5cblxuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uTWlkZGxld2FyZSh7IGJsb2NrVHJhY2tlciwgcHJvdmlkZXIgfSkge1xuICAvLyBzdGF0ZSBhbmQgdXRpbGl0aWVzIGZvciBoYW5kbGluZyBzdWJzY3JpcHRpb25zXG4gIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSB7fVxuICBjb25zdCBmaWx0ZXJNYW5hZ2VyID0gY3JlYXRlRmlsdGVyTWlkZGxld2FyZSh7IGJsb2NrVHJhY2tlciwgcHJvdmlkZXIgfSlcblxuICAvLyBpbnRlcm5hbCBmbGFnXG4gIGxldCBpc0Rlc3Ryb3llZCA9IGZhbHNlXG5cbiAgLy8gY3JlYXRlIHN1YnNjcmlwdGlvbk1hbmFnZXIgYXBpIG9iamVjdFxuICBjb25zdCBldmVudHMgPSBuZXcgU2FmZUV2ZW50RW1pdHRlcigpXG4gIGNvbnN0IG1pZGRsZXdhcmUgPSBjcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUoe1xuICAgIGV0aF9zdWJzY3JpYmU6IGNyZWF0ZUFzeW5jTWlkZGxld2FyZShzdWJzY3JpYmUpLFxuICAgIGV0aF91bnN1YnNjcmliZTogY3JlYXRlQXN5bmNNaWRkbGV3YXJlKHVuc3Vic2NyaWJlKSxcbiAgfSlcbiAgbWlkZGxld2FyZS5kZXN0cm95ID0gZGVzdHJveVxuICByZXR1cm4geyBldmVudHMsIG1pZGRsZXdhcmUgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN1YnNjcmliZShyZXEsIHJlcykge1xuXG4gICAgaWYgKGlzRGVzdHJveWVkKSB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnU3Vic2NyaXB0aW9uTWFuYWdlciAtIGF0dGVtcHRpbmcgdG8gdXNlIGFmdGVyIGRlc3Ryb3lpbmcnXG4gICAgKVxuXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uVHlwZSA9IHJlcS5wYXJhbXNbMF1cbiAgICAvLyBzdWJJZCBpcyAxNiBieXRlIGhleCBzdHJpbmdcbiAgICBjb25zdCBzdWJJZCA9IHVuc2FmZVJhbmRvbUJ5dGVzKDE2KVxuXG4gICAgLy8gY3JlYXRlIHN1YlxuICAgIGxldCBzdWJcbiAgICBzd2l0Y2ggKHN1YnNjcmlwdGlvblR5cGUpIHtcbiAgICAgIGNhc2UgJ25ld0hlYWRzJzpcbiAgICAgICAgc3ViID0gY3JlYXRlU3ViTmV3SGVhZHMoeyBzdWJJZCB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbG9ncyc6XG4gICAgICAgIGNvbnN0IGZpbHRlclBhcmFtcyA9IHJlcS5wYXJhbXNbMV1cbiAgICAgICAgY29uc3QgZmlsdGVyID0gYXdhaXQgZmlsdGVyTWFuYWdlci5uZXdMb2dGaWx0ZXIoZmlsdGVyUGFyYW1zKVxuICAgICAgICBzdWIgPSBjcmVhdGVTdWJGcm9tRmlsdGVyKHsgc3ViSWQsIGZpbHRlciB9KVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdWJzY3JpcHRpb25NYW5hZ2VyIC0gdW5zdXBwb3J0ZWQgc3Vic2NyaXB0aW9uIHR5cGUgXCIke3N1YnNjcmlwdGlvblR5cGV9XCJgKVxuXG4gICAgfVxuICAgIHN1YnNjcmlwdGlvbnNbc3ViSWRdID0gc3ViXG5cbiAgICByZXMucmVzdWx0ID0gc3ViSWRcbiAgICByZXR1cm5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVN1Yk5ld0hlYWRzKHsgc3ViSWQgfSkge1xuICAgICAgY29uc3Qgc3ViID0ge1xuICAgICAgICB0eXBlOiBzdWJzY3JpcHRpb25UeXBlLFxuICAgICAgICBkZXN0cm95OiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYmxvY2tUcmFja2VyLnJlbW92ZUxpc3RlbmVyKCdzeW5jJywgc3ViLnVwZGF0ZSlcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlOiBhc3luYyAoeyBvbGRCbG9jaywgbmV3QmxvY2sgfSkgPT4ge1xuICAgICAgICAgIC8vIGZvciBuZXdIZWFkc1xuICAgICAgICAgIGNvbnN0IHRvQmxvY2sgPSBuZXdCbG9ja1xuICAgICAgICAgIGNvbnN0IGZyb21CbG9jayA9IGluY3JlbWVudEhleEludChvbGRCbG9jaylcbiAgICAgICAgICBjb25zdCByYXdCbG9ja3MgPSBhd2FpdCBnZXRCbG9ja3NGb3JSYW5nZSh7IHByb3ZpZGVyLCBmcm9tQmxvY2ssIHRvQmxvY2sgfSlcbiAgICAgICAgICBjb25zdCByZXN1bHRzID0gcmF3QmxvY2tzLm1hcChub3JtYWxpemVCbG9jaylcbiAgICAgICAgICByZXN1bHRzLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBfZW1pdFN1YnNjcmlwdGlvblJlc3VsdChzdWJJZCwgdmFsdWUpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gY2hlY2sgZm9yIHN1YnNjcmlwdGlvbiB1cGRhdGVzIG9uIG5ldyBibG9ja1xuICAgICAgYmxvY2tUcmFja2VyLm9uKCdzeW5jJywgc3ViLnVwZGF0ZSlcbiAgICAgIHJldHVybiBzdWJcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTdWJGcm9tRmlsdGVyKHsgc3ViSWQsIGZpbHRlciB9KXtcbiAgICAgIGZpbHRlci5vbigndXBkYXRlJywgcmVzdWx0ID0+IF9lbWl0U3Vic2NyaXB0aW9uUmVzdWx0KHN1YklkLCByZXN1bHQpKVxuICAgICAgY29uc3Qgc3ViID0ge1xuICAgICAgICB0eXBlOiBzdWJzY3JpcHRpb25UeXBlLFxuICAgICAgICBkZXN0cm95OiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGZpbHRlck1hbmFnZXIudW5pbnN0YWxsRmlsdGVyKGZpbHRlci5pZEhleClcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdWJcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiB1bnN1YnNjcmliZShyZXEsIHJlcykge1xuXG4gICAgaWYgKGlzRGVzdHJveWVkKSB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnU3Vic2NyaXB0aW9uTWFuYWdlciAtIGF0dGVtcHRpbmcgdG8gdXNlIGFmdGVyIGRlc3Ryb3lpbmcnXG4gICAgKVxuXG4gICAgY29uc3QgaWQgPSByZXEucGFyYW1zWzBdXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uc1tpZF1cbiAgICAvLyBpZiBtaXNzaW5nLCByZXR1cm4gXCJmYWxzZVwiIHRvIGluZGljYXRlIGl0IHdhcyBub3QgcmVtb3ZlZFxuICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICByZXMucmVzdWx0ID0gZmFsc2VcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyBjbGVhbnVwIHN1YnNjcmlwdGlvblxuICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zW2lkXVxuICAgIGF3YWl0IHN1YnNjcmlwdGlvbi5kZXN0cm95KClcbiAgICByZXMucmVzdWx0ID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gX2VtaXRTdWJzY3JpcHRpb25SZXN1bHQoZmlsdGVySWRIZXgsIHZhbHVlKSB7XG4gICAgZXZlbnRzLmVtaXQoJ25vdGlmaWNhdGlvbicsIHtcbiAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgbWV0aG9kOiAnZXRoX3N1YnNjcmlwdGlvbicsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBmaWx0ZXJJZEhleCxcbiAgICAgICAgcmVzdWx0OiB2YWx1ZSxcbiAgICAgIH0sXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIGV2ZW50cy5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgIGZvciAoY29uc3QgaWQgaW4gc3Vic2NyaXB0aW9ucykge1xuICAgICAgc3Vic2NyaXB0aW9uc1tpZF0uZGVzdHJveSgpXG4gICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc1tpZF1cbiAgICB9XG4gICAgaXNEZXN0cm95ZWQgPSB0cnVlXG4gIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQmxvY2soYmxvY2spIHtcbiAgcmV0dXJuIHtcbiAgICBoYXNoOiBibG9jay5oYXNoLFxuICAgIHBhcmVudEhhc2g6IGJsb2NrLnBhcmVudEhhc2gsXG4gICAgc2hhM1VuY2xlczogYmxvY2suc2hhM1VuY2xlcyxcbiAgICBtaW5lcjogYmxvY2subWluZXIsXG4gICAgc3RhdGVSb290OiBibG9jay5zdGF0ZVJvb3QsXG4gICAgdHJhbnNhY3Rpb25zUm9vdDogYmxvY2sudHJhbnNhY3Rpb25zUm9vdCxcbiAgICByZWNlaXB0c1Jvb3Q6IGJsb2NrLnJlY2VpcHRzUm9vdCxcbiAgICBsb2dzQmxvb206IGJsb2NrLmxvZ3NCbG9vbSxcbiAgICBkaWZmaWN1bHR5OiBibG9jay5kaWZmaWN1bHR5LFxuICAgIG51bWJlcjogYmxvY2subnVtYmVyLFxuICAgIGdhc0xpbWl0OiBibG9jay5nYXNMaW1pdCxcbiAgICBnYXNVc2VkOiBibG9jay5nYXNVc2VkLFxuICAgIG5vbmNlOiBibG9jay5ub25jZSxcbiAgICBtaXhIYXNoOiBibG9jay5taXhIYXNoLFxuICAgIHRpbWVzdGFtcDogYmxvY2sudGltZXN0YW1wLFxuICAgIGV4dHJhRGF0YTogYmxvY2suZXh0cmFEYXRhLFxuICB9XG59XG4iLCJjb25zdCBCYXNlRmlsdGVyID0gcmVxdWlyZSgnLi9iYXNlLWZpbHRlcicpXG5jb25zdCBnZXRCbG9ja3NGb3JSYW5nZSA9IHJlcXVpcmUoJy4vZ2V0QmxvY2tzRm9yUmFuZ2UnKVxuY29uc3QgeyBpbmNyZW1lbnRIZXhJbnQgfSA9IHJlcXVpcmUoJy4vaGV4VXRpbHMnKVxuXG5jbGFzcyBUeEZpbHRlciBleHRlbmRzIEJhc2VGaWx0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICh7IHByb3ZpZGVyIH0pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50eXBlID0gJ3R4J1xuICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlclxuICB9XG5cbiAgYXN5bmMgdXBkYXRlICh7IG9sZEJsb2NrIH0pIHtcbiAgICBjb25zdCB0b0Jsb2NrID0gb2xkQmxvY2tcbiAgICBjb25zdCBmcm9tQmxvY2sgPSBpbmNyZW1lbnRIZXhJbnQob2xkQmxvY2spXG4gICAgY29uc3QgYmxvY2tzID0gYXdhaXQgZ2V0QmxvY2tzRm9yUmFuZ2UoeyBwcm92aWRlcjogdGhpcy5wcm92aWRlciwgZnJvbUJsb2NrLCB0b0Jsb2NrIH0pXG4gICAgY29uc3QgYmxvY2tUeEhhc2hlcyA9IFtdXG4gICAgZm9yIChjb25zdCBibG9jayBvZiBibG9ja3MpIHtcbiAgICAgIGJsb2NrVHhIYXNoZXMucHVzaCguLi5ibG9jay50cmFuc2FjdGlvbnMpXG4gICAgfVxuICAgIC8vIGFkZCB0byByZXN1bHRzXG4gICAgdGhpcy5hZGRSZXN1bHRzKGJsb2NrVHhIYXNoZXMpXG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFR4RmlsdGVyXG4iLCJjb25zdCBjYWNoZVV0aWxzID0gcmVxdWlyZSgnLi9jYWNoZS11dGlscy5qcycpXG5jb25zdCBjcmVhdGVBc3luY01pZGRsZXdhcmUgPSByZXF1aXJlKCdqc29uLXJwYy1lbmdpbmUvc3JjL2NyZWF0ZUFzeW5jTWlkZGxld2FyZScpXG4vLyBgPG5pbD5gIGNvbWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL2lzc3Vlcy8xNjkyNVxuY29uc3QgZW1wdHlWYWx1ZXMgPSBbdW5kZWZpbmVkLCBudWxsLCAnXFx1MDAzY25pbFxcdTAwM2UnXVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJsb2NrQ2FjaGVNaWRkbGV3YXJlXG5cblxuZnVuY3Rpb24gY3JlYXRlQmxvY2tDYWNoZU1pZGRsZXdhcmUob3B0cyA9IHt9KSB7XG4gIC8vIHZhbGlkYXRlIG9wdGlvbnNcbiAgY29uc3QgeyBibG9ja1RyYWNrZXIgfSA9IG9wdHNcbiAgaWYgKCFibG9ja1RyYWNrZXIpIHRocm93IG5ldyBFcnJvcignY3JlYXRlQmxvY2tDYWNoZU1pZGRsZXdhcmUgLSBObyBCbG9ja1RyYWNrZXIgc3BlY2lmaWVkJylcblxuICAvLyBjcmVhdGUgY2FjaGluZyBzdHJhdGVnaWVzXG4gIGNvbnN0IGJsb2NrQ2FjaGUgPSBuZXcgQmxvY2tDYWNoZVN0cmF0ZWd5KClcbiAgY29uc3Qgc3RyYXRlZ2llcyA9IHtcbiAgICBwZXJtYTogYmxvY2tDYWNoZSxcbiAgICBibG9jazogYmxvY2tDYWNoZSxcbiAgICBmb3JrOiBibG9ja0NhY2hlLFxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUFzeW5jTWlkZGxld2FyZShhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAvLyBhbGxvdyBjYWNoIHRvIGJlIHNraXBwZWQgaWYgc28gc3BlY2lmaWVkXG4gICAgaWYgKHJlcS5za2lwQ2FjaGUpIHtcbiAgICAgIHJldHVybiBuZXh0KClcbiAgICB9XG4gICAgLy8gY2hlY2sgdHlwZSBhbmQgbWF0Y2hpbmcgc3RyYXRlZ3lcbiAgICBjb25zdCB0eXBlID0gY2FjaGVVdGlscy5jYWNoZVR5cGVGb3JQYXlsb2FkKHJlcSlcbiAgICBjb25zdCBzdHJhdGVneSA9IHN0cmF0ZWdpZXNbdHlwZV1cbiAgICAvLyBJZiB0aGVyZSdzIG5vIHN0cmF0ZWd5IGluIHBsYWNlLCBwYXNzIGl0IGRvd24gdGhlIGNoYWluLlxuICAgIGlmICghc3RyYXRlZ3kpIHtcbiAgICAgIHJldHVybiBuZXh0KClcbiAgICB9XG4gICAgLy8gSWYgdGhlIHN0cmF0ZWd5IGNhbid0IGNhY2hlIHRoaXMgcmVxdWVzdCwgaWdub3JlIGl0LlxuICAgIGlmICghc3RyYXRlZ3kuY2FuQ2FjaGVSZXF1ZXN0KHJlcSkpIHtcbiAgICAgIHJldHVybiBuZXh0KClcbiAgICB9XG5cbiAgICAvLyBnZXQgYmxvY2sgcmVmZXJlbmNlIChudW1iZXIgb3Iga2V5d29yZClcbiAgICBsZXQgYmxvY2tUYWcgPSBjYWNoZVV0aWxzLmJsb2NrVGFnRm9yUGF5bG9hZChyZXEpXG4gICAgaWYgKCFibG9ja1RhZykgYmxvY2tUYWcgPSAnbGF0ZXN0J1xuXG4gICAgLy8gZ2V0IGV4YWN0IGJsb2NrIG51bWJlclxuICAgIGxldCByZXF1ZXN0ZWRCbG9ja051bWJlclxuICAgIGlmIChibG9ja1RhZyA9PT0gJ2VhcmxpZXN0Jykge1xuICAgICAgLy8gdGhpcyBqdXN0IGV4aXN0cyBmb3Igc3ltbWV0cnkgd2l0aCBcImxhdGVzdFwiXG4gICAgICByZXF1ZXN0ZWRCbG9ja051bWJlciA9ICcweDAwJ1xuICAgIH0gZWxzZSBpZiAoYmxvY2tUYWcgPT09ICdsYXRlc3QnKSB7XG4gICAgICAvLyBmZXRjaCBsYXRlc3QgYmxvY2sgbnVtYmVyXG4gICAgICBjb25zdCBsYXRlc3RCbG9ja051bWJlciA9IGF3YWl0IGJsb2NrVHJhY2tlci5nZXRMYXRlc3RCbG9jaygpXG4gICAgICAvLyBjbGVhciBhbGwgY2FjaGUgYmVmb3JlIGxhdGVzdCBibG9ja1xuICAgICAgYmxvY2tDYWNoZS5jbGVhckJlZm9yZShsYXRlc3RCbG9ja051bWJlcilcbiAgICAgIHJlcXVlc3RlZEJsb2NrTnVtYmVyID0gbGF0ZXN0QmxvY2tOdW1iZXJcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgaGF2ZSBhIGhleCBudW1iZXJcbiAgICAgIHJlcXVlc3RlZEJsb2NrTnVtYmVyID0gYmxvY2tUYWdcbiAgICB9XG5cbiAgICAvLyBlbmQgb24gYSBoaXQsIGNvbnRpbnVlIG9uIGEgbWlzc1xuICAgIGNvbnN0IGNhY2hlUmVzdWx0ID0gYXdhaXQgc3RyYXRlZ3kuZ2V0KHJlcSwgcmVxdWVzdGVkQmxvY2tOdW1iZXIpXG4gICAgaWYgKGNhY2hlUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGNhY2hlIG1pc3NcbiAgICAgIC8vIHdhaXQgZm9yIG90aGVyIG1pZGRsZXdhcmUgdG8gaGFuZGxlIHJlcXVlc3RcbiAgICAgIGF3YWl0IG5leHQoKVxuICAgICAgLy8gYWRkIHJlc3VsdCB0byBjYWNoZVxuICAgICAgYXdhaXQgc3RyYXRlZ3kuc2V0KHJlcSwgcmVxdWVzdGVkQmxvY2tOdW1iZXIsIHJlcy5yZXN1bHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZpbGwgaW4gcmVzdWx0IGZyb20gY2FjaGVcbiAgICAgIHJlcy5yZXN1bHQgPSBjYWNoZVJlc3VsdFxuICAgIH1cbiAgfSlcbn1cblxuXG4vL1xuLy8gQ2FjaGUgU3RyYXRlZ2llc1xuLy9cblxuY2xhc3MgQmxvY2tDYWNoZVN0cmF0ZWd5IHtcbiAgXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmNhY2hlID0ge31cbiAgfVxuXG4gIGdldEJsb2NrQ2FjaGVGb3JQYXlsb2FkIChwYXlsb2FkLCBibG9ja051bWJlckhleCkge1xuICAgIGNvbnN0IGJsb2NrTnVtYmVyID0gTnVtYmVyLnBhcnNlSW50KGJsb2NrTnVtYmVySGV4LCAxNilcbiAgICBsZXQgYmxvY2tDYWNoZSA9IHRoaXMuY2FjaGVbYmxvY2tOdW1iZXJdXG4gICAgLy8gY3JlYXRlIG5ldyBjYWNoZSBpZiBuZWNlc2FyeVxuICAgIGlmICghYmxvY2tDYWNoZSkge1xuICAgICAgY29uc3QgbmV3Q2FjaGUgPSB7fVxuICAgICAgdGhpcy5jYWNoZVtibG9ja051bWJlcl0gPSBuZXdDYWNoZVxuICAgICAgYmxvY2tDYWNoZSA9IG5ld0NhY2hlXG4gICAgfVxuICAgIHJldHVybiBibG9ja0NhY2hlXG4gIH1cblxuICBhc3luYyBnZXQgKHBheWxvYWQsIHJlcXVlc3RlZEJsb2NrTnVtYmVyKSB7XG4gICAgLy8gbG9va3VwIGJsb2NrIGNhY2hlXG4gICAgY29uc3QgYmxvY2tDYWNoZSA9IHRoaXMuZ2V0QmxvY2tDYWNoZUZvclBheWxvYWQocGF5bG9hZCwgcmVxdWVzdGVkQmxvY2tOdW1iZXIpXG4gICAgaWYgKCFibG9ja0NhY2hlKSByZXR1cm5cbiAgICAvLyBsb29rdXAgcGF5bG9hZCBpbiBibG9jayBjYWNoZVxuICAgIGNvbnN0IGlkZW50aWZpZXIgPSBjYWNoZVV0aWxzLmNhY2hlSWRlbnRpZmllckZvclBheWxvYWQocGF5bG9hZCwgdHJ1ZSlcbiAgICBjb25zdCBjYWNoZWQgPSBibG9ja0NhY2hlW2lkZW50aWZpZXJdXG4gICAgLy8gbWF5IGJlIHVuZGVmaW5lZFxuICAgIHJldHVybiBjYWNoZWRcbiAgfVxuXG4gIGFzeW5jIHNldCAocGF5bG9hZCwgcmVxdWVzdGVkQmxvY2tOdW1iZXIsIHJlc3VsdCkge1xuICAgIC8vIGNoZWNrIGlmIHdlIGNhbiBjYWNoZWQgdGhpcyByZXN1bHRcbiAgICBjb25zdCBjYW5DYWNoZSA9IHRoaXMuY2FuQ2FjaGVSZXN1bHQocGF5bG9hZCwgcmVzdWx0KVxuICAgIGlmICghY2FuQ2FjaGUpIHJldHVyblxuICAgIC8vIHNldCB0aGUgdmFsdWUgaW4gdGhlIGNhY2hlXG4gICAgY29uc3QgYmxvY2tDYWNoZSA9IHRoaXMuZ2V0QmxvY2tDYWNoZUZvclBheWxvYWQocGF5bG9hZCwgcmVxdWVzdGVkQmxvY2tOdW1iZXIpXG4gICAgY29uc3QgaWRlbnRpZmllciA9IGNhY2hlVXRpbHMuY2FjaGVJZGVudGlmaWVyRm9yUGF5bG9hZChwYXlsb2FkLCB0cnVlKVxuICAgIGJsb2NrQ2FjaGVbaWRlbnRpZmllcl0gPSByZXN1bHRcbiAgfVxuXG4gIGNhbkNhY2hlUmVxdWVzdCAocGF5bG9hZCkge1xuICAgIC8vIGNoZWNrIHJlcXVlc3QgbWV0aG9kXG4gICAgaWYgKCFjYWNoZVV0aWxzLmNhbkNhY2hlKHBheWxvYWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgLy8gY2hlY2sgYmxvY2tUYWdcbiAgICBjb25zdCBibG9ja1RhZyA9IGNhY2hlVXRpbHMuYmxvY2tUYWdGb3JQYXlsb2FkKHBheWxvYWQpXG4gICAgaWYgKGJsb2NrVGFnID09PSAncGVuZGluZycpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICAvLyBjYW4gYmUgY2FjaGVkXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGNhbkNhY2hlUmVzdWx0IChwYXlsb2FkLCByZXN1bHQpIHtcbiAgICAvLyBuZXZlciBjYWNoZSBlbXB0eSB2YWx1ZXMgKGUuZy4gdW5kZWZpbmVkKVxuICAgIGlmIChlbXB0eVZhbHVlcy5pbmNsdWRlcyhyZXN1bHQpKSByZXR1cm5cbiAgICAvLyBjaGVjayBpZiB0cmFuc2FjdGlvbnMgaGF2ZSBibG9jayByZWZlcmVuY2UgYmVmb3JlIGNhY2hpbmdcbiAgICBpZiAoWydldGhfZ2V0VHJhbnNhY3Rpb25CeUhhc2gnLCAnZXRoX2dldFRyYW5zYWN0aW9uUmVjZWlwdCddLmluY2x1ZGVzKHBheWxvYWQubWV0aG9kKSkge1xuICAgICAgaWYgKCFyZXN1bHQgfHwgIXJlc3VsdC5ibG9ja0hhc2ggfHwgcmVzdWx0LmJsb2NrSGFzaCA9PT0gJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIC8vIG90aGVyd2lzZSB0cnVlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIHJlbW92ZXMgYWxsIGJsb2NrIGNhY2hlcyB3aXRoIGJsb2NrIG51bWJlciBsb3dlciB0aGFuIGBvbGRCbG9ja0hleGBcbiAgY2xlYXJCZWZvcmUgKG9sZEJsb2NrSGV4KXtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGNvbnN0IG9sZEJsb2NrTnVtYmVyID0gTnVtYmVyLnBhcnNlSW50KG9sZEJsb2NrSGV4LCAxNilcbiAgICAvLyBjbGVhciBvbGQgY2FjaGVzXG4gICAgT2JqZWN0LmtleXMoc2VsZi5jYWNoZSlcbiAgICAgIC5tYXAoTnVtYmVyKVxuICAgICAgLmZpbHRlcihudW0gPT4gbnVtIDwgb2xkQmxvY2tOdW1iZXIpXG4gICAgICAuZm9yRWFjaChudW0gPT4gZGVsZXRlIHNlbGYuY2FjaGVbbnVtXSlcbiAgfVxuXG59XG4iLCJjb25zdCBzdHJpbmdpZnkgPSByZXF1aXJlKCdqc29uLXN0YWJsZS1zdHJpbmdpZnknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2FjaGVJZGVudGlmaWVyRm9yUGF5bG9hZDogY2FjaGVJZGVudGlmaWVyRm9yUGF5bG9hZCxcbiAgY2FuQ2FjaGU6IGNhbkNhY2hlLFxuICBibG9ja1RhZ0ZvclBheWxvYWQ6IGJsb2NrVGFnRm9yUGF5bG9hZCxcbiAgcGFyYW1zV2l0aG91dEJsb2NrVGFnOiBwYXJhbXNXaXRob3V0QmxvY2tUYWcsXG4gIGJsb2NrVGFnUGFyYW1JbmRleDogYmxvY2tUYWdQYXJhbUluZGV4LFxuICBjYWNoZVR5cGVGb3JQYXlsb2FkOiBjYWNoZVR5cGVGb3JQYXlsb2FkXG59XG5cbmZ1bmN0aW9uIGNhY2hlSWRlbnRpZmllckZvclBheWxvYWQgKHBheWxvYWQsIHNraXBCbG9ja1JlZikge1xuICBjb25zdCBzaW1wbGVQYXJhbXMgPSBza2lwQmxvY2tSZWYgPyBwYXJhbXNXaXRob3V0QmxvY2tUYWcocGF5bG9hZCkgOiBwYXlsb2FkLnBhcmFtc1xuICBpZiAoY2FuQ2FjaGUocGF5bG9hZCkpIHtcbiAgICByZXR1cm4gcGF5bG9hZC5tZXRob2QgKyAnOicgKyBzdHJpbmdpZnkoc2ltcGxlUGFyYW1zKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuZnVuY3Rpb24gY2FuQ2FjaGUgKHBheWxvYWQpIHtcbiAgcmV0dXJuIGNhY2hlVHlwZUZvclBheWxvYWQocGF5bG9hZCkgIT09ICduZXZlcidcbn1cblxuZnVuY3Rpb24gYmxvY2tUYWdGb3JQYXlsb2FkIChwYXlsb2FkKSB7XG4gIGxldCBpbmRleCA9IGJsb2NrVGFnUGFyYW1JbmRleChwYXlsb2FkKVxuXG4gIC8vIEJsb2NrIHRhZyBwYXJhbSBub3QgcGFzc2VkLlxuICBpZiAoaW5kZXggPj0gcGF5bG9hZC5wYXJhbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiBwYXlsb2FkLnBhcmFtc1tpbmRleF1cbn1cblxuZnVuY3Rpb24gcGFyYW1zV2l0aG91dEJsb2NrVGFnIChwYXlsb2FkKSB7XG4gIGNvbnN0IGluZGV4ID0gYmxvY2tUYWdQYXJhbUluZGV4KHBheWxvYWQpXG5cbiAgLy8gQmxvY2sgdGFnIHBhcmFtIG5vdCBwYXNzZWQuXG4gIGlmIChpbmRleCA+PSBwYXlsb2FkLnBhcmFtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gcGF5bG9hZC5wYXJhbXNcbiAgfVxuXG4gIC8vIGV0aF9nZXRCbG9ja0J5TnVtYmVyIGhhcyB0aGUgYmxvY2sgdGFnIGZpcnN0LCB0aGVuIHRoZSBvcHRpb25hbCBpbmNsdWRlVHg/IHBhcmFtXG4gIGlmIChwYXlsb2FkLm1ldGhvZCA9PT0gJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJykge1xuICAgIHJldHVybiBwYXlsb2FkLnBhcmFtcy5zbGljZSgxKVxuICB9XG5cbiAgcmV0dXJuIHBheWxvYWQucGFyYW1zLnNsaWNlKDAsIGluZGV4KVxufVxuXG5mdW5jdGlvbiBibG9ja1RhZ1BhcmFtSW5kZXggKHBheWxvYWQpIHtcbiAgc3dpdGNoIChwYXlsb2FkLm1ldGhvZCkge1xuICAgIC8vIGJsb2NrVGFnIGlzIGF0IGluZGV4IDJcbiAgICBjYXNlICdldGhfZ2V0U3RvcmFnZUF0JzpcbiAgICAgIHJldHVybiAyXG4gICAgLy8gYmxvY2tUYWcgaXMgYXQgaW5kZXggMVxuICAgIGNhc2UgJ2V0aF9nZXRCYWxhbmNlJzpcbiAgICBjYXNlICdldGhfZ2V0Q29kZSc6XG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uQ291bnQnOlxuICAgIGNhc2UgJ2V0aF9jYWxsJzpcbiAgICAgIHJldHVybiAxXG4gICAgLy8gYmxvY2tUYWcgaXMgYXQgaW5kZXggMFxuICAgIGNhc2UgJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJzpcbiAgICAgIHJldHVybiAwXG4gICAgLy8gdGhlcmUgaXMgbm8gYmxvY2tUYWdcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG59XG5cbmZ1bmN0aW9uIGNhY2hlVHlwZUZvclBheWxvYWQgKHBheWxvYWQpIHtcbiAgc3dpdGNoIChwYXlsb2FkLm1ldGhvZCkge1xuICAgIC8vIGNhY2hlIHBlcm1hbmVudGx5XG4gICAgY2FzZSAnd2ViM19jbGllbnRWZXJzaW9uJzpcbiAgICBjYXNlICd3ZWIzX3NoYTMnOlxuICAgIGNhc2UgJ2V0aF9wcm90b2NvbFZlcnNpb24nOlxuICAgIGNhc2UgJ2V0aF9nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnRCeUhhc2gnOlxuICAgIGNhc2UgJ2V0aF9nZXRVbmNsZUNvdW50QnlCbG9ja0hhc2gnOlxuICAgIGNhc2UgJ2V0aF9nZXRDb2RlJzpcbiAgICBjYXNlICdldGhfZ2V0QmxvY2tCeUhhc2gnOlxuICAgIGNhc2UgJ2V0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaCc6XG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uQnlCbG9ja0hhc2hBbmRJbmRleCc6XG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uUmVjZWlwdCc6XG4gICAgY2FzZSAnZXRoX2dldFVuY2xlQnlCbG9ja0hhc2hBbmRJbmRleCc6XG4gICAgY2FzZSAnZXRoX2dldENvbXBpbGVycyc6XG4gICAgY2FzZSAnZXRoX2NvbXBpbGVMTEwnOlxuICAgIGNhc2UgJ2V0aF9jb21waWxlU29saWRpdHknOlxuICAgIGNhc2UgJ2V0aF9jb21waWxlU2VycGVudCc6XG4gICAgY2FzZSAnc2hoX3ZlcnNpb24nOlxuICAgIGNhc2UgJ3Rlc3RfcGVybWFDYWNoZSc6XG4gICAgICByZXR1cm4gJ3Blcm1hJ1xuXG4gICAgLy8gY2FjaGUgdW50aWwgZm9ya1xuICAgIGNhc2UgJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJzpcbiAgICBjYXNlICdldGhfZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50QnlOdW1iZXInOlxuICAgIGNhc2UgJ2V0aF9nZXRVbmNsZUNvdW50QnlCbG9ja051bWJlcic6XG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uQnlCbG9ja051bWJlckFuZEluZGV4JzpcbiAgICBjYXNlICdldGhfZ2V0VW5jbGVCeUJsb2NrTnVtYmVyQW5kSW5kZXgnOlxuICAgIGNhc2UgJ3Rlc3RfZm9ya0NhY2hlJzpcbiAgICAgIHJldHVybiAnZm9yaydcblxuICAgIC8vIGNhY2hlIGZvciBibG9ja1xuICAgIGNhc2UgJ2V0aF9nYXNQcmljZSc6XG4gICAgY2FzZSAnZXRoX2Jsb2NrTnVtYmVyJzpcbiAgICBjYXNlICdldGhfZ2V0QmFsYW5jZSc6XG4gICAgY2FzZSAnZXRoX2dldFN0b3JhZ2VBdCc6XG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uQ291bnQnOlxuICAgIGNhc2UgJ2V0aF9jYWxsJzpcbiAgICBjYXNlICdldGhfZXN0aW1hdGVHYXMnOlxuICAgIGNhc2UgJ2V0aF9nZXRGaWx0ZXJMb2dzJzpcbiAgICBjYXNlICdldGhfZ2V0TG9ncyc6XG4gICAgY2FzZSAndGVzdF9ibG9ja0NhY2hlJzpcbiAgICAgIHJldHVybiAnYmxvY2snXG5cbiAgICAvLyBuZXZlciBjYWNoZVxuICAgIGNhc2UgJ25ldF92ZXJzaW9uJzpcbiAgICBjYXNlICduZXRfcGVlckNvdW50JzpcbiAgICBjYXNlICduZXRfbGlzdGVuaW5nJzpcbiAgICBjYXNlICdldGhfc3luY2luZyc6XG4gICAgY2FzZSAnZXRoX3NpZ24nOlxuICAgIGNhc2UgJ2V0aF9jb2luYmFzZSc6XG4gICAgY2FzZSAnZXRoX21pbmluZyc6XG4gICAgY2FzZSAnZXRoX2hhc2hyYXRlJzpcbiAgICBjYXNlICdldGhfYWNjb3VudHMnOlxuICAgIGNhc2UgJ2V0aF9zZW5kVHJhbnNhY3Rpb24nOlxuICAgIGNhc2UgJ2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24nOlxuICAgIGNhc2UgJ2V0aF9uZXdGaWx0ZXInOlxuICAgIGNhc2UgJ2V0aF9uZXdCbG9ja0ZpbHRlcic6XG4gICAgY2FzZSAnZXRoX25ld1BlbmRpbmdUcmFuc2FjdGlvbkZpbHRlcic6XG4gICAgY2FzZSAnZXRoX3VuaW5zdGFsbEZpbHRlcic6XG4gICAgY2FzZSAnZXRoX2dldEZpbHRlckNoYW5nZXMnOlxuICAgIGNhc2UgJ2V0aF9nZXRXb3JrJzpcbiAgICBjYXNlICdldGhfc3VibWl0V29yayc6XG4gICAgY2FzZSAnZXRoX3N1Ym1pdEhhc2hyYXRlJzpcbiAgICBjYXNlICdkYl9wdXRTdHJpbmcnOlxuICAgIGNhc2UgJ2RiX2dldFN0cmluZyc6XG4gICAgY2FzZSAnZGJfcHV0SGV4JzpcbiAgICBjYXNlICdkYl9nZXRIZXgnOlxuICAgIGNhc2UgJ3NoaF9wb3N0JzpcbiAgICBjYXNlICdzaGhfbmV3SWRlbnRpdHknOlxuICAgIGNhc2UgJ3NoaF9oYXNJZGVudGl0eSc6XG4gICAgY2FzZSAnc2hoX25ld0dyb3VwJzpcbiAgICBjYXNlICdzaGhfYWRkVG9Hcm91cCc6XG4gICAgY2FzZSAnc2hoX25ld0ZpbHRlcic6XG4gICAgY2FzZSAnc2hoX3VuaW5zdGFsbEZpbHRlcic6XG4gICAgY2FzZSAnc2hoX2dldEZpbHRlckNoYW5nZXMnOlxuICAgIGNhc2UgJ3NoaF9nZXRNZXNzYWdlcyc6XG4gICAgY2FzZSAndGVzdF9uZXZlckNhY2hlJzpcbiAgICAgIHJldHVybiAnbmV2ZXInXG4gIH1cbn1cbiIsIi8qKlxuICogSnNvblJwY0VuZ2luZSBvbmx5IGFjY2VwdHMgY2FsbGJhY2stYmFzZWQgbWlkZGxld2FyZSBkaXJlY3RseS5cbiAqIGNyZWF0ZUFzeW5jTWlkZGxld2FyZSBleGlzdHMgdG8gZW5hYmxlIGNvbnN1bWVycyB0byBwYXNzIGluIGFzeW5jIG1pZGRsZXdhcmVcbiAqIGZ1bmN0aW9ucy5cbiAqXG4gKiBBc3luYyBtaWRkbGV3YXJlIGhhdmUgbm8gXCJlbmRcIiBmdW5jdGlvbi4gSW5zdGVhZCwgdGhleSBcImVuZFwiIGlmIHRoZXkgcmV0dXJuXG4gKiB3aXRob3V0IGNhbGxpbmcgXCJuZXh0XCIuIFJhdGhlciB0aGFuIHBhc3NpbmcgaW4gZXhwbGljaXQgcmV0dXJuIGhhbmRsZXJzLFxuICogYXN5bmMgbWlkZGxld2FyZSBjYW4gc2ltcGx5IGF3YWl0IFwibmV4dFwiLCBhbmQgcGVyZm9ybSBvcGVyYXRpb25zIG9uIHRoZVxuICogcmVzcG9uc2Ugb2JqZWN0IHdoZW4gZXhlY3V0aW9uIHJlc3VtZXMuXG4gKlxuICogVG8gYWNjb21wbGlzaCB0aGlzLCBjcmVhdGVBc3luY01pZGRsZXdhcmUgcGFzc2VzIHRoZSBhc3luYyBtaWRkbGV3YXJlIGFcbiAqIHdyYXBwZWQgXCJuZXh0XCIgZnVuY3Rpb24uIFRoYXQgZnVuY3Rpb24gY2FsbHMgdGhlIGludGVybmFsIEpzb25ScGNFbmdpbmVcbiAqIFwibmV4dFwiIGZ1bmN0aW9uIHdpdGggYSByZXR1cm4gaGFuZGxlciB0aGF0IHJlc29sdmVzIGEgcHJvbWlzZSB3aGVuIGNhbGxlZC5cbiAqXG4gKiBUaGUgcmV0dXJuIGhhbmRsZXIgd2lsbCBhbHdheXMgYmUgY2FsbGVkLiBJdHMgcmVzb2x1dGlvbiBvZiB0aGUgcHJvbWlzZVxuICogZW5hYmxlcyB0aGUgY29udHJvbCBmbG93IGRlc2NyaWJlZCBhYm92ZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUFzeW5jTWlkZGxld2FyZSAoYXN5bmNNaWRkbGV3YXJlKSB7XG4gIHJldHVybiAocmVxLCByZXMsIG5leHQsIGVuZCkgPT4ge1xuXG4gICAgLy8gbmV4dFByb21pc2UgaXMgdGhlIGtleSB0byB0aGUgaW1wbGVtZW50YXRpb25cbiAgICAvLyBpdCBpcyByZXNvbHZlZCBieSB0aGUgcmV0dXJuIGhhbmRsZXIgcGFzc2VkIHRvIHRoZVxuICAgIC8vIFwibmV4dFwiIGZ1bmN0aW9uXG4gICAgbGV0IHJlc29sdmVOZXh0UHJvbWlzZVxuICAgIGNvbnN0IG5leHRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHJlc29sdmVOZXh0UHJvbWlzZSA9IHJlc29sdmVcbiAgICB9KVxuXG4gICAgbGV0IHJldHVybkhhbmRsZXJDYWxsYmFjaywgbmV4dFdhc0NhbGxlZFxuXG4gICAgY29uc3QgYXN5bmNOZXh0ID0gYXN5bmMgKCkgPT4ge1xuXG4gICAgICBuZXh0V2FzQ2FsbGVkID0gdHJ1ZVxuXG4gICAgICBuZXh0KChjYWxsYmFjaykgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgICByZXR1cm5IYW5kbGVyQ2FsbGJhY2sgPSBjYWxsYmFja1xuICAgICAgICByZXNvbHZlTmV4dFByb21pc2UoKVxuICAgICAgfSlcbiAgICAgIGF3YWl0IG5leHRQcm9taXNlXG4gICAgfVxuXG4gICAgYXN5bmNNaWRkbGV3YXJlKHJlcSwgcmVzLCBhc3luY05leHQpXG4gICAgICAudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChuZXh0V2FzQ2FsbGVkKSB7XG4gICAgICAgICAgYXdhaXQgbmV4dFByb21pc2UgLy8gd2UgbXVzdCB3YWl0IHVudGlsIHRoZSByZXR1cm4gaGFuZGxlciBpcyBjYWxsZWRcbiAgICAgICAgICByZXR1cm5IYW5kbGVyQ2FsbGJhY2sobnVsbClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQobnVsbClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgaWYgKHJldHVybkhhbmRsZXJDYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybkhhbmRsZXJDYWxsYmFjayhlcnJvcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQoZXJyb3IpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlIChoYW5kbGVycykge1xuICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0LCBlbmQpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbcmVxLm1ldGhvZF1cbiAgICAvLyBpZiBubyBoYW5kbGVyLCByZXR1cm5cbiAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbmV4dCgpXG4gICAgfVxuICAgIC8vIGlmIGhhbmRsZXIgaXMgZm4sIGNhbGwgYXMgbWlkZGxld2FyZVxuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGhhbmRsZXIocmVxLCByZXMsIG5leHQsIGVuZClcbiAgICB9XG4gICAgLy8gaWYgaGFuZGxlciBpcyBzb21lIG90aGVyIHZhbHVlLCB1c2UgYXMgcmVzdWx0XG4gICAgcmVzLnJlc3VsdCA9IGhhbmRsZXJcbiAgICByZXR1cm4gZW5kKClcbiAgfVxufVxuIiwiLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnanNvbi1ycGMtZW5naW5lL3NyYy9jcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUnKVxuIiwiY29uc3QgZXh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKVxuY29uc3QgY3JlYXRlUmFuZG9tSWQgPSByZXF1aXJlKCdqc29uLXJwYy1yYW5kb20taWQnKSgpXG5cbm1vZHVsZS5leHBvcnRzID0gRXRoUXVlcnlcblxuXG5mdW5jdGlvbiBFdGhRdWVyeShwcm92aWRlcil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuY3VycmVudFByb3ZpZGVyID0gcHJvdmlkZXJcbn1cblxuLy9cbi8vIGJhc2UgcXVlcmllc1xuLy9cblxuLy8gZGVmYXVsdCBibG9ja1xuRXRoUXVlcnkucHJvdG90eXBlLmdldEJhbGFuY2UgPSAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVGbldpdGhEZWZhdWx0QmxvY2tGb3IoMiwgJ2V0aF9nZXRCYWxhbmNlJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5nZXRDb2RlID0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5XaXRoRGVmYXVsdEJsb2NrRm9yKDIsICdldGhfZ2V0Q29kZScpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0VHJhbnNhY3Rpb25Db3VudCA9ICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuV2l0aERlZmF1bHRCbG9ja0ZvcigyLCAnZXRoX2dldFRyYW5zYWN0aW9uQ291bnQnKVxuRXRoUXVlcnkucHJvdG90eXBlLmdldFN0b3JhZ2VBdCA9ICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVGbldpdGhEZWZhdWx0QmxvY2tGb3IoMywgJ2V0aF9nZXRTdG9yYWdlQXQnKVxuRXRoUXVlcnkucHJvdG90eXBlLmNhbGwgPSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVGbldpdGhEZWZhdWx0QmxvY2tGb3IoMiwgJ2V0aF9jYWxsJylcbi8vIHN0YW5kYXJkXG5FdGhRdWVyeS5wcm90b3R5cGUucHJvdG9jb2xWZXJzaW9uID0gICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfcHJvdG9jb2xWZXJzaW9uJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5zeW5jaW5nID0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9zeW5jaW5nJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5jb2luYmFzZSA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9jb2luYmFzZScpXG5FdGhRdWVyeS5wcm90b3R5cGUubWluaW5nID0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfbWluaW5nJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5oYXNocmF0ZSA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9oYXNocmF0ZScpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2FzUHJpY2UgPSAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2FzUHJpY2UnKVxuRXRoUXVlcnkucHJvdG90eXBlLmFjY291bnRzID0gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVGbkZvcignZXRoX2FjY291bnRzJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5ibG9ja051bWJlciA9ICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9ibG9ja051bWJlcicpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50QnlIYXNoID0gICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50QnlIYXNoJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnRCeU51bWJlciA9ICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnRCeU51bWJlcicpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0VW5jbGVDb3VudEJ5QmxvY2tIYXNoID0gICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0VW5jbGVDb3VudEJ5QmxvY2tIYXNoJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5nZXRVbmNsZUNvdW50QnlCbG9ja051bWJlciA9ICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9nZXRVbmNsZUNvdW50QnlCbG9ja051bWJlcicpXG5FdGhRdWVyeS5wcm90b3R5cGUuc2lnbiA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfc2lnbicpXG5FdGhRdWVyeS5wcm90b3R5cGUuc2VuZFRyYW5zYWN0aW9uID0gICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfc2VuZFRyYW5zYWN0aW9uJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5zZW5kUmF3VHJhbnNhY3Rpb24gPSAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24nKVxuRXRoUXVlcnkucHJvdG90eXBlLmVzdGltYXRlR2FzID0gICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVGbkZvcignZXRoX2VzdGltYXRlR2FzJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5nZXRCbG9ja0J5SGFzaCA9ICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9nZXRCbG9ja0J5SGFzaCcpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0QmxvY2tCeU51bWJlciA9ICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0QmxvY2tCeU51bWJlcicpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0VHJhbnNhY3Rpb25CeUhhc2ggPSAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0VHJhbnNhY3Rpb25CeUhhc2gnKVxuRXRoUXVlcnkucHJvdG90eXBlLmdldFRyYW5zYWN0aW9uQnlCbG9ja0hhc2hBbmRJbmRleCA9ICAgZ2VuZXJhdGVGbkZvcignZXRoX2dldFRyYW5zYWN0aW9uQnlCbG9ja0hhc2hBbmRJbmRleCcpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0VHJhbnNhY3Rpb25CeUJsb2NrTnVtYmVyQW5kSW5kZXggPSBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0VHJhbnNhY3Rpb25CeUJsb2NrTnVtYmVyQW5kSW5kZXgnKVxuRXRoUXVlcnkucHJvdG90eXBlLmdldFRyYW5zYWN0aW9uUmVjZWlwdCA9ICAgICAgICAgICAgICAgZ2VuZXJhdGVGbkZvcignZXRoX2dldFRyYW5zYWN0aW9uUmVjZWlwdCcpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0VW5jbGVCeUJsb2NrSGFzaEFuZEluZGV4ID0gICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0VW5jbGVCeUJsb2NrSGFzaEFuZEluZGV4JylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5nZXRVbmNsZUJ5QmxvY2tOdW1iZXJBbmRJbmRleCA9ICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9nZXRVbmNsZUJ5QmxvY2tOdW1iZXJBbmRJbmRleCcpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0Q29tcGlsZXJzID0gICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0Q29tcGlsZXJzJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5jb21waWxlTExMID0gICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9jb21waWxlTExMJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5jb21waWxlU29saWRpdHkgPSAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9jb21waWxlU29saWRpdHknKVxuRXRoUXVlcnkucHJvdG90eXBlLmNvbXBpbGVTZXJwZW50ID0gICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVGbkZvcignZXRoX2NvbXBpbGVTZXJwZW50JylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5uZXdGaWx0ZXIgPSAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9uZXdGaWx0ZXInKVxuRXRoUXVlcnkucHJvdG90eXBlLm5ld0Jsb2NrRmlsdGVyID0gICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVGbkZvcignZXRoX25ld0Jsb2NrRmlsdGVyJylcbkV0aFF1ZXJ5LnByb3RvdHlwZS5uZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXIgPSAgICAgICAgIGdlbmVyYXRlRm5Gb3IoJ2V0aF9uZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXInKVxuRXRoUXVlcnkucHJvdG90eXBlLnVuaW5zdGFsbEZpbHRlciA9ICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVGbkZvcignZXRoX3VuaW5zdGFsbEZpbHRlcicpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0RmlsdGVyQ2hhbmdlcyA9ICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0RmlsdGVyQ2hhbmdlcycpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0RmlsdGVyTG9ncyA9ICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0RmlsdGVyTG9ncycpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0TG9ncyA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0TG9ncycpXG5FdGhRdWVyeS5wcm90b3R5cGUuZ2V0V29yayA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfZ2V0V29yaycpXG5FdGhRdWVyeS5wcm90b3R5cGUuc3VibWl0V29yayA9ICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfc3VibWl0V29yaycpXG5FdGhRdWVyeS5wcm90b3R5cGUuc3VibWl0SGFzaHJhdGUgPSAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUZuRm9yKCdldGhfc3VibWl0SGFzaHJhdGUnKVxuXG4vLyBuZXR3b3JrIGxldmVsXG5cbkV0aFF1ZXJ5LnByb3RvdHlwZS5zZW5kQXN5bmMgPSBmdW5jdGlvbihvcHRzLCBjYil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuY3VycmVudFByb3ZpZGVyLnNlbmRBc3luYyhjcmVhdGVQYXlsb2FkKG9wdHMpLCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbiAgICBpZiAoIWVyciAmJiByZXNwb25zZS5lcnJvcikgZXJyID0gbmV3IEVycm9yKCdFdGhRdWVyeSAtIFJQQyBFcnJvciAtICcrcmVzcG9uc2UuZXJyb3IubWVzc2FnZSlcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIGNiKG51bGwsIHJlc3BvbnNlLnJlc3VsdClcbiAgfSlcbn1cblxuLy8gdXRpbFxuXG5mdW5jdGlvbiBnZW5lcmF0ZUZuRm9yKG1ldGhvZE5hbWUpe1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgdmFyIGNiID0gYXJncy5wb3AoKVxuICAgIHNlbGYuc2VuZEFzeW5jKHtcbiAgICAgIG1ldGhvZDogbWV0aG9kTmFtZSxcbiAgICAgIHBhcmFtczogYXJncyxcbiAgICB9LCBjYilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUZuV2l0aERlZmF1bHRCbG9ja0ZvcihhcmdDb3VudCwgbWV0aG9kTmFtZSl7XG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICB2YXIgY2IgPSBhcmdzLnBvcCgpXG4gICAgLy8gc2V0IG9wdGlvbmFsIGRlZmF1bHQgYmxvY2sgcGFyYW1cbiAgICBpZiAoYXJncy5sZW5ndGggPCBhcmdDb3VudCkgYXJncy5wdXNoKCdsYXRlc3QnKVxuICAgIHNlbGYuc2VuZEFzeW5jKHtcbiAgICAgIG1ldGhvZDogbWV0aG9kTmFtZSxcbiAgICAgIHBhcmFtczogYXJncyxcbiAgICB9LCBjYilcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXlsb2FkKGRhdGEpe1xuICByZXR1cm4gZXh0ZW5kKHtcbiAgICAvLyBkZWZhdWx0c1xuICAgIGlkOiBjcmVhdGVSYW5kb21JZCgpLFxuICAgIGpzb25ycGM6ICcyLjAnLFxuICAgIHBhcmFtczogW10sXG4gICAgLy8gdXNlci1zcGVjaWZpZWRcbiAgfSwgZGF0YSlcbn1cbiIsImNvbnN0IGV0aFV0aWwgPSByZXF1aXJlKCdldGhlcmV1bWpzLXV0aWwnKVxuY29uc3QgZXRoQWJpID0gcmVxdWlyZSgnZXRoZXJldW1qcy1hYmknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBjb25jYXRTaWc6IGZ1bmN0aW9uICh2LCByLCBzKSB7XG4gICAgY29uc3QgclNpZyA9IGV0aFV0aWwuZnJvbVNpZ25lZChyKVxuICAgIGNvbnN0IHNTaWcgPSBldGhVdGlsLmZyb21TaWduZWQocylcbiAgICBjb25zdCB2U2lnID0gZXRoVXRpbC5idWZmZXJUb0ludCh2KVxuICAgIGNvbnN0IHJTdHIgPSBwYWRXaXRoWmVyb2VzKGV0aFV0aWwudG9VbnNpZ25lZChyU2lnKS50b1N0cmluZygnaGV4JyksIDY0KVxuICAgIGNvbnN0IHNTdHIgPSBwYWRXaXRoWmVyb2VzKGV0aFV0aWwudG9VbnNpZ25lZChzU2lnKS50b1N0cmluZygnaGV4JyksIDY0KVxuICAgIGNvbnN0IHZTdHIgPSBldGhVdGlsLnN0cmlwSGV4UHJlZml4KGV0aFV0aWwuaW50VG9IZXgodlNpZykpXG4gICAgcmV0dXJuIGV0aFV0aWwuYWRkSGV4UHJlZml4KHJTdHIuY29uY2F0KHNTdHIsIHZTdHIpKS50b1N0cmluZygnaGV4JylcbiAgfSxcblxuICBub3JtYWxpemU6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghaW5wdXQpIHJldHVyblxuXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGV0aFV0aWwudG9CdWZmZXIoaW5wdXQpXG4gICAgICBpbnB1dCA9IGV0aFV0aWwuYnVmZmVyVG9IZXgoYnVmZmVyKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgbXNnID0gJ2V0aC1zaWctdXRpbC5ub3JtYWxpemUoKSByZXF1aXJlcyBoZXggc3RyaW5nIG9yIGludGVnZXIgaW5wdXQuJ1xuICAgICAgbXNnICs9ICcgcmVjZWl2ZWQgJyArICh0eXBlb2YgaW5wdXQpICsgJzogJyArIGlucHV0XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKVxuICAgIH1cblxuICAgIHJldHVybiBldGhVdGlsLmFkZEhleFByZWZpeChpbnB1dC50b0xvd2VyQ2FzZSgpKVxuICB9LFxuXG4gIHBlcnNvbmFsU2lnbjogZnVuY3Rpb24gKHByaXZhdGVLZXksIG1zZ1BhcmFtcykge1xuICAgIHZhciBtZXNzYWdlID0gZXRoVXRpbC50b0J1ZmZlcihtc2dQYXJhbXMuZGF0YSlcbiAgICB2YXIgbXNnSGFzaCA9IGV0aFV0aWwuaGFzaFBlcnNvbmFsTWVzc2FnZShtZXNzYWdlKVxuICAgIHZhciBzaWcgPSBldGhVdGlsLmVjc2lnbihtc2dIYXNoLCBwcml2YXRlS2V5KVxuICAgIHZhciBzZXJpYWxpemVkID0gZXRoVXRpbC5idWZmZXJUb0hleCh0aGlzLmNvbmNhdFNpZyhzaWcudiwgc2lnLnIsIHNpZy5zKSlcbiAgICByZXR1cm4gc2VyaWFsaXplZFxuICB9LFxuXG4gIHJlY292ZXJQZXJzb25hbFNpZ25hdHVyZTogZnVuY3Rpb24gKG1zZ1BhcmFtcykge1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IGdldFB1YmxpY0tleUZvcihtc2dQYXJhbXMpXG4gICAgY29uc3Qgc2VuZGVyID0gZXRoVXRpbC5wdWJsaWNUb0FkZHJlc3MocHVibGljS2V5KVxuICAgIGNvbnN0IHNlbmRlckhleCA9IGV0aFV0aWwuYnVmZmVyVG9IZXgoc2VuZGVyKVxuICAgIHJldHVybiBzZW5kZXJIZXhcbiAgfSxcblxuICBleHRyYWN0UHVibGljS2V5OiBmdW5jdGlvbiAobXNnUGFyYW1zKSB7XG4gICAgY29uc3QgcHVibGljS2V5ID0gZ2V0UHVibGljS2V5Rm9yKG1zZ1BhcmFtcylcbiAgICByZXR1cm4gJzB4JyArIHB1YmxpY0tleS50b1N0cmluZygnaGV4JylcbiAgfSxcblxuICB0eXBlZFNpZ25hdHVyZUhhc2g6IGZ1bmN0aW9uICh0eXBlZERhdGEpIHtcbiAgICBjb25zdCBoYXNoQnVmZmVyID0gdHlwZWRTaWduYXR1cmVIYXNoKHR5cGVkRGF0YSlcbiAgICByZXR1cm4gZXRoVXRpbC5idWZmZXJUb0hleChoYXNoQnVmZmVyKVxuICB9LFxuXG4gIHNpZ25UeXBlZERhdGE6IGZ1bmN0aW9uIChwcml2YXRlS2V5LCBtc2dQYXJhbXMpIHtcbiAgICBjb25zdCBtc2dIYXNoID0gdHlwZWRTaWduYXR1cmVIYXNoKG1zZ1BhcmFtcy5kYXRhKVxuICAgIGNvbnN0IHNpZyA9IGV0aFV0aWwuZWNzaWduKG1zZ0hhc2gsIHByaXZhdGVLZXkpXG4gICAgcmV0dXJuIGV0aFV0aWwuYnVmZmVyVG9IZXgodGhpcy5jb25jYXRTaWcoc2lnLnYsIHNpZy5yLCBzaWcucykpXG4gIH0sXG5cbiAgcmVjb3ZlclR5cGVkU2lnbmF0dXJlOiBmdW5jdGlvbiAobXNnUGFyYW1zKSB7XG4gICAgY29uc3QgbXNnSGFzaCA9IHR5cGVkU2lnbmF0dXJlSGFzaChtc2dQYXJhbXMuZGF0YSlcbiAgICBjb25zdCBwdWJsaWNLZXkgPSByZWNvdmVyUHVibGljS2V5KG1zZ0hhc2gsIG1zZ1BhcmFtcy5zaWcpXG4gICAgY29uc3Qgc2VuZGVyID0gZXRoVXRpbC5wdWJsaWNUb0FkZHJlc3MocHVibGljS2V5KVxuICAgIHJldHVybiBldGhVdGlsLmJ1ZmZlclRvSGV4KHNlbmRlcilcbiAgfVxuXG59XG5cbi8qKlxuICogQHBhcmFtIHR5cGVkRGF0YSAtIEFycmF5IG9mIGRhdGEgYWxvbmcgd2l0aCB0eXBlcywgYXMgcGVyIEVJUDcxMi5cbiAqIEByZXR1cm5zIEJ1ZmZlclxuICovXG5mdW5jdGlvbiB0eXBlZFNpZ25hdHVyZUhhc2godHlwZWREYXRhKSB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdFeHBlY3QgYXJndW1lbnQgdG8gYmUgbm9uLWVtcHR5IGFycmF5JylcbiAgaWYgKHR5cGVvZiB0eXBlZERhdGEgIT09ICdvYmplY3QnIHx8ICF0eXBlZERhdGEubGVuZ3RoKSB0aHJvdyBlcnJvclxuXG4gIGNvbnN0IGRhdGEgPSB0eXBlZERhdGEubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIGUudHlwZSA9PT0gJ2J5dGVzJyA/IGV0aFV0aWwudG9CdWZmZXIoZS52YWx1ZSkgOiBlLnZhbHVlXG4gIH0pXG4gIGNvbnN0IHR5cGVzID0gdHlwZWREYXRhLm1hcChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS50eXBlIH0pXG4gIGNvbnN0IHNjaGVtYSA9IHR5cGVkRGF0YS5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIWUubmFtZSkgdGhyb3cgZXJyb3JcbiAgICByZXR1cm4gZS50eXBlICsgJyAnICsgZS5uYW1lXG4gIH0pXG5cbiAgcmV0dXJuIGV0aEFiaS5zb2xpZGl0eVNIQTMoXG4gICAgWydieXRlczMyJywgJ2J5dGVzMzInXSxcbiAgICBbXG4gICAgICBldGhBYmkuc29saWRpdHlTSEEzKG5ldyBBcnJheSh0eXBlZERhdGEubGVuZ3RoKS5maWxsKCdzdHJpbmcnKSwgc2NoZW1hKSxcbiAgICAgIGV0aEFiaS5zb2xpZGl0eVNIQTModHlwZXMsIGRhdGEpXG4gICAgXVxuICApXG59XG5cbmZ1bmN0aW9uIHJlY292ZXJQdWJsaWNLZXkoaGFzaCwgc2lnKSB7XG4gIGNvbnN0IHNpZ25hdHVyZSA9IGV0aFV0aWwudG9CdWZmZXIoc2lnKVxuICBjb25zdCBzaWdQYXJhbXMgPSBldGhVdGlsLmZyb21ScGNTaWcoc2lnbmF0dXJlKVxuICByZXR1cm4gZXRoVXRpbC5lY3JlY292ZXIoaGFzaCwgc2lnUGFyYW1zLnYsIHNpZ1BhcmFtcy5yLCBzaWdQYXJhbXMucylcbn1cblxuZnVuY3Rpb24gZ2V0UHVibGljS2V5Rm9yIChtc2dQYXJhbXMpIHtcbiAgY29uc3QgbWVzc2FnZSA9IGV0aFV0aWwudG9CdWZmZXIobXNnUGFyYW1zLmRhdGEpXG4gIGNvbnN0IG1zZ0hhc2ggPSBldGhVdGlsLmhhc2hQZXJzb25hbE1lc3NhZ2UobWVzc2FnZSlcbiAgcmV0dXJuIHJlY292ZXJQdWJsaWNLZXkobXNnSGFzaCwgbXNnUGFyYW1zLnNpZylcbn1cblxuXG5mdW5jdGlvbiBwYWRXaXRoWmVyb2VzIChudW1iZXIsIGxlbmd0aCkge1xuICB2YXIgbXlTdHJpbmcgPSAnJyArIG51bWJlclxuICB3aGlsZSAobXlTdHJpbmcubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgbXlTdHJpbmcgPSAnMCcgKyBteVN0cmluZ1xuICB9XG4gIHJldHVybiBteVN0cmluZ1xufVxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5CdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBCdWZmZXIgPSB3aW5kb3cuQnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0IDwgbnVtYmVyLmxlbmd0aCkge1xuICAgICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQsIGVuZGlhbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgICAgIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgICAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleDRCaXRzIChzdHJpbmcsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG4gICAgLy8gJ0EnIC0gJ0YnXG4gICAgaWYgKGMgPj0gNjUgJiYgYyA8PSA3MCkge1xuICAgICAgcmV0dXJuIGMgLSA1NTtcbiAgICAvLyAnYScgLSAnZidcbiAgICB9IGVsc2UgaWYgKGMgPj0gOTcgJiYgYyA8PSAxMDIpIHtcbiAgICAgIHJldHVybiBjIC0gODc7XG4gICAgLy8gJzAnIC0gJzknXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoYyAtIDQ4KSAmIDB4ZjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhleEJ5dGUgKHN0cmluZywgbG93ZXJCb3VuZCwgaW5kZXgpIHtcbiAgICB2YXIgciA9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGluZGV4IC0gMSA+PSBsb3dlckJvdW5kKSB7XG4gICAgICByIHw9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCAtIDEpIDw8IDQ7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCwgZW5kaWFuKSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgLy8gMjQtYml0cyBjaHVua3NcbiAgICB2YXIgb2ZmID0gMDtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgaSAtPSAyKSB7XG4gICAgICAgIHcgPSBwYXJzZUhleEJ5dGUobnVtYmVyLCBzdGFydCwgaSkgPDwgb2ZmO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgJiAweDNmZmZmZmY7XG4gICAgICAgIGlmIChvZmYgPj0gMTgpIHtcbiAgICAgICAgICBvZmYgLT0gMTg7XG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA+Pj4gMjY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmICs9IDg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnNlTGVuZ3RoID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgZm9yIChpID0gcGFyc2VMZW5ndGggJSAyID09PSAwID8gc3RhcnQgKyAxIDogc3RhcnQ7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIEJOIHY1IGluc3RhbmNlXG4gICAgICAgIHIuX3N0cmlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrJyksXG4gICAga2VjY2FrMjI0ID0gX3JlcXVpcmUua2VjY2FrMjI0LFxuICAgIGtlY2NhazM4NCA9IF9yZXF1aXJlLmtlY2NhazM4NCxcbiAgICBrMjU2ID0gX3JlcXVpcmUua2VjY2FrMjU2LFxuICAgIGtlY2NhazUxMiA9IF9yZXF1aXJlLmtlY2NhazUxMjtcblxudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJy4vc2VjcDI1NmsxLWFkYXB0ZXInKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBybHAgPSByZXF1aXJlKCdybHAnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG5PYmplY3QuYXNzaWduKGV4cG9ydHMsIHJlcXVpcmUoJ2V0aGpzLXV0aWwnKSk7XG5cbi8qKlxuICogdGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhpcyBWTSBjYW4gaGFuZGxlIChhIGBgYEJOYGBgKVxuICogQHZhciB7Qk59IE1BWF9JTlRFR0VSXG4gKi9cbmV4cG9ydHMuTUFYX0lOVEVHRVIgPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnLCAxNik7XG5cbi8qKlxuICogMl4yNTYgKGEgYGBgQk5gYGApXG4gKiBAdmFyIHtCTn0gVFdPX1BPVzI1NlxuICovXG5leHBvcnRzLlRXT19QT1cyNTYgPSBuZXcgQk4oJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywgMTYpO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsIChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X05VTExfU1xuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MgPSAnYzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG5leHBvcnRzLlNIQTNfTlVMTF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsIChhIGBgYEJ1ZmZlcmBgYClcbiAqIEB2YXIge0J1ZmZlcn0gS0VDQ0FLMjU2X05VTExcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfTlVMTCA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUywgJ2hleCcpO1xuZXhwb3J0cy5TSEEzX05VTEwgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5IChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X1JMUF9BUlJBWV9TXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gJzFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDcnO1xuZXhwb3J0cy5TSEEzX1JMUF9BUlJBWV9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1M7XG5cbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXkgKGEgYGBgQnVmZmVyYGBgKVxuICogQHZhciB7QnVmZmVyfSBLRUNDQUsyNTZfUkxQX0FSUkFZXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TLCAnaGV4Jyk7XG5leHBvcnRzLlNIQTNfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGwgIChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X1JMUF9TXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gJzU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjEnO1xuZXhwb3J0cy5TSEEzX1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1M7XG5cbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbCAoYSBgYGBCdWZmZXJgYGApXG4gKiBAdmFyIHtCdWZmZXJ9IEtFQ0NBSzI1Nl9STFBcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQID0gQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MsICdoZXgnKTtcbmV4cG9ydHMuU0hBM19STFAgPSBleHBvcnRzLktFQ0NBSzI1Nl9STFA7XG5cbi8qKlxuICogW2BCTmBdKGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzKVxuICogQHZhciB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydHMuQk4gPSBCTjtcblxuLyoqXG4gKiBbYHJscGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bWpzL3JscClcbiAqIEB2YXIge0Z1bmN0aW9ufVxuICovXG5leHBvcnRzLnJscCA9IHJscDtcblxuLyoqXG4gKiBbYHNlY3AyNTZrMWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvc2VjcDI1NmsxLW5vZGUvKVxuICogQHZhciB7T2JqZWN0fVxuICovXG5leHBvcnRzLnNlY3AyNTZrMSA9IHNlY3AyNTZrMTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgYnVmZmVyIGZpbGxlZCB3aXRoIDBzXG4gKiBAbWV0aG9kIHplcm9zXG4gKiBAcGFyYW0ge051bWJlcn0gYnl0ZXMgIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIGJ1ZmZlciBzaG91bGQgYmVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy56ZXJvcyA9IGZ1bmN0aW9uIChieXRlcykge1xuICByZXR1cm4gQnVmZmVyLmFsbG9jVW5zYWZlKGJ5dGVzKS5maWxsKDApO1xufTtcblxuLyoqXG4gICogUmV0dXJucyBhIHplcm8gYWRkcmVzc1xuICAqIEBtZXRob2QgemVyb0FkZHJlc3NcbiAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICovXG5leHBvcnRzLnplcm9BZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYWRkcmVzc0xlbmd0aCA9IDIwO1xuICB2YXIgemVyb0FkZHJlc3MgPSBleHBvcnRzLnplcm9zKGFkZHJlc3NMZW5ndGgpO1xuICByZXR1cm4gZXhwb3J0cy5idWZmZXJUb0hleCh6ZXJvQWRkcmVzcyk7XG59O1xuXG4vKipcbiAqIExlZnQgUGFkcyBhbiBgQXJyYXlgIG9yIGBCdWZmZXJgIHdpdGggbGVhZGluZyB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIE9yIGl0IHRydW5jYXRlcyB0aGUgYmVnaW5uaW5nIGlmIGl0IGV4Y2VlZHMuXG4gKiBAbWV0aG9kIGxzZXRMZW5ndGhcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fSBtc2cgdGhlIHZhbHVlIHRvIHBhZFxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtyaWdodD1mYWxzZV0gd2hldGhlciB0byBzdGFydCBwYWRkaW5nIGZvcm0gdGhlIGxlZnQgb3IgcmlnaHRcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheX1cbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhMZWZ0ID0gZXhwb3J0cy5zZXRMZW5ndGggPSBmdW5jdGlvbiAobXNnLCBsZW5ndGgsIHJpZ2h0KSB7XG4gIHZhciBidWYgPSBleHBvcnRzLnplcm9zKGxlbmd0aCk7XG4gIG1zZyA9IGV4cG9ydHMudG9CdWZmZXIobXNnKTtcbiAgaWYgKHJpZ2h0KSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgIG1zZy5jb3B5KGJ1Zik7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnNsaWNlKDAsIGxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgIG1zZy5jb3B5KGJ1ZiwgbGVuZ3RoIC0gbXNnLmxlbmd0aCk7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnNsaWNlKC1sZW5ndGgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJpZ2h0IFBhZHMgYW4gYEFycmF5YCBvciBgQnVmZmVyYCB3aXRoIGxlYWRpbmcgemVyb3MgdGlsbCBpdCBoYXMgYGxlbmd0aGAgYnl0ZXMuXG4gKiBPciBpdCB0cnVuY2F0ZXMgdGhlIGJlZ2lubmluZyBpZiBpdCBleGNlZWRzLlxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl9IG1zZyB0aGUgdmFsdWUgdG8gcGFkXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIG91dHB1dCBzaG91bGQgYmVcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheX1cbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCkge1xuICByZXR1cm4gZXhwb3J0cy5zZXRMZW5ndGgobXNnLCBsZW5ndGgsIHRydWUpO1xufTtcblxuLyoqXG4gKiBUcmltcyBsZWFkaW5nIHplcm9zIGZyb20gYSBgQnVmZmVyYCBvciBhbiBgQXJyYXlgXG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd9IGFcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheXxTdHJpbmd9XG4gKi9cbmV4cG9ydHMudW5wYWQgPSBleHBvcnRzLnN0cmlwWmVyb3MgPSBmdW5jdGlvbiAoYSkge1xuICBhID0gZXhwb3J0cy5zdHJpcEhleFByZWZpeChhKTtcbiAgdmFyIGZpcnN0ID0gYVswXTtcbiAgd2hpbGUgKGEubGVuZ3RoID4gMCAmJiBmaXJzdC50b1N0cmluZygpID09PSAnMCcpIHtcbiAgICBhID0gYS5zbGljZSgxKTtcbiAgICBmaXJzdCA9IGFbMF07XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuLyoqXG4gKiBBdHRlbXB0cyB0byB0dXJuIGEgdmFsdWUgaW50byBhIGBCdWZmZXJgLiBBcyBpbnB1dCBpdCBzdXBwb3J0cyBgQnVmZmVyYCwgYFN0cmluZ2AsIGBOdW1iZXJgLCBudWxsL3VuZGVmaW5lZCwgYEJOYCBhbmQgb3RoZXIgb2JqZWN0cyB3aXRoIGEgYHRvQXJyYXkoKWAgbWV0aG9kLlxuICogQHBhcmFtIHsqfSB2IHRoZSB2YWx1ZVxuICovXG5leHBvcnRzLnRvQnVmZmVyID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodikpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgdiA9IEJ1ZmZlci5mcm9tKHYpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZXhwb3J0cy5pc0hleFN0cmluZyh2KSkge1xuICAgICAgICB2ID0gQnVmZmVyLmZyb20oZXhwb3J0cy5wYWRUb0V2ZW4oZXhwb3J0cy5zdHJpcEhleFByZWZpeCh2KSksICdoZXgnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYgPSBCdWZmZXIuZnJvbSh2KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgICAgdiA9IGV4cG9ydHMuaW50VG9CdWZmZXIodik7XG4gICAgfSBlbHNlIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgICB9IGVsc2UgaWYgKEJOLmlzQk4odikpIHtcbiAgICAgIHYgPSB2LnRvQXJyYXlMaWtlKEJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgIC8vIGNvbnZlcnRzIGEgQk4gdG8gYSBCdWZmZXJcbiAgICAgIHYgPSBCdWZmZXIuZnJvbSh2LnRvQXJyYXkoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0eXBlJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIHRvIGEgYE51bWJlcmBcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEB0aHJvd3MgSWYgdGhlIGlucHV0IG51bWJlciBleGNlZWRzIDUzIGJpdHMuXG4gKi9cbmV4cG9ydHMuYnVmZmVyVG9JbnQgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHJldHVybiBuZXcgQk4oZXhwb3J0cy50b0J1ZmZlcihidWYpKS50b051bWJlcigpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIGludG8gYSBoZXggYFN0cmluZ2BcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5idWZmZXJUb0hleCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgYnVmID0gZXhwb3J0cy50b0J1ZmZlcihidWYpO1xuICByZXR1cm4gJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4Jyk7XG59O1xuXG4vKipcbiAqIEludGVycHJldHMgYSBgQnVmZmVyYCBhcyBhIHNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGEgYEJOYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbnVtXG4gKiBAcmV0dXJuIHtCTn1cbiAqL1xuZXhwb3J0cy5mcm9tU2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbmV3IEJOKG51bSkuZnJvbVR3b3MoMjU2KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBgQk5gIHRvIGFuIHVuc2lnbmVkIGludGVnZXIgYW5kIHJldHVybnMgaXQgYXMgYSBgQnVmZmVyYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0ge0JOfSBudW1cbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy50b1Vuc2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20obnVtLnRvVHdvcygyNTYpLnRvQXJyYXkoKSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgS2VjY2FrIGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge051bWJlcn0gW2JpdHM9MjU2XSB0aGUgS2VjY2FrIHdpZHRoXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMua2VjY2FrID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgYSA9IGV4cG9ydHMudG9CdWZmZXIoYSk7XG4gIGlmICghYml0cykgYml0cyA9IDI1NjtcblxuICBzd2l0Y2ggKGJpdHMpIHtcbiAgICBjYXNlIDIyNDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazIyNChhKTtcbiAgICAgIH1cbiAgICBjYXNlIDI1NjpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGsyNTYoYSk7XG4gICAgICB9XG4gICAgY2FzZSAzODQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBrZWNjYWszODQoYSk7XG4gICAgICB9XG4gICAgY2FzZSA1MTI6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBrZWNjYWs1MTIoYSk7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGQgYWxnb3JpdGhtOiBrZWNjYWsnICsgYml0cyk7XG4gICAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIGlucHV0LCBhbGlhcyBmb3Iga2VjY2FrKGEsIDI1NilcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXJ9IGEgdGhlIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5rZWNjYWsyNTYgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gZXhwb3J0cy5rZWNjYWsoYSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgKEtlY2NhaykgaGFzaCBvZiB0aGUgaW5wdXQgW09CU09MRVRFXVxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcn0gYSB0aGUgaW5wdXQgZGF0YVxuICogQHBhcmFtIHtOdW1iZXJ9IFtiaXRzPTI1Nl0gdGhlIFNIQS0zIHdpZHRoXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2hhMyA9IGV4cG9ydHMua2VjY2FrO1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBMjU2IGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2hhMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgYSA9IGV4cG9ydHMudG9CdWZmZXIoYSk7XG4gIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgUklQRU1EMTYwIGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBhZGRlZCB3aGV0aGVyIGl0IHNob3VsZCBiZSBwYWRkZWQgdG8gMjU2IGJpdHMgb3Igbm90XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucmlwZW1kMTYwID0gZnVuY3Rpb24gKGEsIHBhZGRlZCkge1xuICBhID0gZXhwb3J0cy50b0J1ZmZlcihhKTtcbiAgdmFyIGhhc2ggPSBjcmVhdGVIYXNoKCdybWQxNjAnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG4gIGlmIChwYWRkZWQgPT09IHRydWUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5zZXRMZW5ndGgoaGFzaCwgMzIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoYXNoO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgaGFzaCBvZiB0aGUgUkxQIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXRcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXJ9IGEgdGhlIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5ybHBoYXNoID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIGV4cG9ydHMua2VjY2FrKHJscC5lbmNvZGUoYSkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHByaXZhdGUga2V5IHNhdGlzZmllcyB0aGUgcnVsZXMgb2YgdGhlIGN1cnZlIHNlY3AyNTZrMS5cbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRQcml2YXRlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgcmV0dXJuIHNlY3AyNTZrMS5wcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHB1YmxpYyBrZXkgc2F0aXNmaWVzIHRoZSBydWxlcyBvZiB0aGUgY3VydmUgc2VjcDI1NmsxXG4gKiBhbmQgdGhlIHJlcXVpcmVtZW50cyBvZiBFdGhlcmV1bS5cbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleSwgdW5sZXNzIHNhbml0aXplIGlzIGVuYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3Nhbml0aXplPWZhbHNlXSBBY2NlcHQgcHVibGljIGtleXMgaW4gb3RoZXIgZm9ybWF0c1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5pc1ZhbGlkUHVibGljID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgc2FuaXRpemUpIHtcbiAgaWYgKHB1YmxpY0tleS5sZW5ndGggPT09IDY0KSB7XG4gICAgLy8gQ29udmVydCB0byBTRUMxIGZvciBzZWNwMjU2azFcbiAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbNF0pLCBwdWJsaWNLZXldKSk7XG4gIH1cblxuICBpZiAoIXNhbml0aXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlWZXJpZnkocHVibGljS2V5KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHB1YmxpYyBrZXkuXG4gKiBBY2NlcHRzIFwiRXRoZXJldW0gcHVibGljIGtleXNcIiBhbmQgU0VDMSBlbmNvZGVkIGtleXMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHViS2V5IFRoZSB0d28gcG9pbnRzIG9mIGFuIHVuY29tcHJlc3NlZCBrZXksIHVubGVzcyBzYW5pdGl6ZSBpcyBlbmFibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtzYW5pdGl6ZT1mYWxzZV0gQWNjZXB0IHB1YmxpYyBrZXlzIGluIG90aGVyIGZvcm1hdHNcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJUb0FkZHJlc3MgPSBleHBvcnRzLnB1YmxpY1RvQWRkcmVzcyA9IGZ1bmN0aW9uIChwdWJLZXksIHNhbml0aXplKSB7XG4gIHB1YktleSA9IGV4cG9ydHMudG9CdWZmZXIocHViS2V5KTtcbiAgaWYgKHNhbml0aXplICYmIHB1YktleS5sZW5ndGggIT09IDY0KSB7XG4gICAgcHViS2V5ID0gc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQocHViS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG4gIH1cbiAgYXNzZXJ0KHB1YktleS5sZW5ndGggPT09IDY0KTtcbiAgLy8gT25seSB0YWtlIHRoZSBsb3dlciAxNjBiaXRzIG9mIHRoZSBoYXNoXG4gIHJldHVybiBleHBvcnRzLmtlY2NhayhwdWJLZXkpLnNsaWNlKC0yMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIHB1YmxpYyBrZXkgb2YgYSBnaXZlbiBwcml2YXRlIGtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHByaXZhdGVUb1B1YmxpYyA9IGV4cG9ydHMucHJpdmF0ZVRvUHVibGljID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgcHJpdmF0ZUtleSA9IGV4cG9ydHMudG9CdWZmZXIocHJpdmF0ZUtleSk7XG4gIC8vIHNraXAgdGhlIHR5cGUgZmxhZyBhbmQgdXNlIHRoZSBYLCBZIHBvaW50c1xuICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShwcml2YXRlS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgcHVibGljIGtleSB0byB0aGUgRXRoZXJldW0gZm9ybWF0LlxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIChwdWJsaWNLZXkpIHtcbiAgcHVibGljS2V5ID0gZXhwb3J0cy50b0J1ZmZlcihwdWJsaWNLZXkpO1xuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gNjQpIHtcbiAgICBwdWJsaWNLZXkgPSBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChwdWJsaWNLZXksIGZhbHNlKS5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gcHVibGljS2V5O1xufTtcblxuLyoqXG4gKiBFQ0RTQSBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbXNnSGFzaFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0cy5lY3NpZ24gPSBmdW5jdGlvbiAobXNnSGFzaCwgcHJpdmF0ZUtleSkge1xuICB2YXIgc2lnID0gc2VjcDI1NmsxLnNpZ24obXNnSGFzaCwgcHJpdmF0ZUtleSk7XG5cbiAgdmFyIHJldCA9IHt9O1xuICByZXQuciA9IHNpZy5zaWduYXR1cmUuc2xpY2UoMCwgMzIpO1xuICByZXQucyA9IHNpZy5zaWduYXR1cmUuc2xpY2UoMzIsIDY0KTtcbiAgcmV0LnYgPSBzaWcucmVjb3ZlcnkgKyAyNztcbiAgcmV0dXJuIHJldDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUga2VjY2FrLTI1NiBoYXNoIG9mIGBtZXNzYWdlYCwgcHJlZml4ZWQgd2l0aCB0aGUgaGVhZGVyIHVzZWQgYnkgdGhlIGBldGhfc2lnbmAgUlBDIGNhbGwuXG4gKiBUaGUgb3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24gY2FuIGJlIGZlZCBpbnRvIGBlY3NpZ25gIHRvIHByb2R1Y2UgdGhlIHNhbWUgc2lnbmF0dXJlIGFzIHRoZSBgZXRoX3NpZ25gXG4gKiBjYWxsIGZvciBhIGdpdmVuIGBtZXNzYWdlYCwgb3IgZmVkIHRvIGBlY3JlY292ZXJgIGFsb25nIHdpdGggYSBzaWduYXR1cmUgdG8gcmVjb3ZlciB0aGUgcHVibGljIGtleVxuICogdXNlZCB0byBwcm9kdWNlIHRoZSBzaWduYXR1cmUuXG4gKiBAcGFyYW0gbWVzc2FnZVxuICogQHJldHVybnMge0J1ZmZlcn0gaGFzaFxuICovXG5leHBvcnRzLmhhc2hQZXJzb25hbE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICB2YXIgcHJlZml4ID0gZXhwb3J0cy50b0J1ZmZlcignXFx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG4nICsgbWVzc2FnZS5sZW5ndGgudG9TdHJpbmcoKSk7XG4gIHJldHVybiBleHBvcnRzLmtlY2NhayhCdWZmZXIuY29uY2F0KFtwcmVmaXgsIG1lc3NhZ2VdKSk7XG59O1xuXG4vKipcbiAqIEVDRFNBIHB1YmxpYyBrZXkgcmVjb3ZlcnkgZnJvbSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBtc2dIYXNoXG4gKiBAcGFyYW0ge051bWJlcn0gdlxuICogQHBhcmFtIHtCdWZmZXJ9IHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IHB1YmxpY0tleVxuICovXG5leHBvcnRzLmVjcmVjb3ZlciA9IGZ1bmN0aW9uIChtc2dIYXNoLCB2LCByLCBzKSB7XG4gIHZhciBzaWduYXR1cmUgPSBCdWZmZXIuY29uY2F0KFtleHBvcnRzLnNldExlbmd0aChyLCAzMiksIGV4cG9ydHMuc2V0TGVuZ3RoKHMsIDMyKV0sIDY0KTtcbiAgdmFyIHJlY292ZXJ5ID0gdiAtIDI3O1xuICBpZiAocmVjb3ZlcnkgIT09IDAgJiYgcmVjb3ZlcnkgIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgfVxuICB2YXIgc2VuZGVyUHViS2V5ID0gc2VjcDI1NmsxLnJlY292ZXIobXNnSGFzaCwgc2lnbmF0dXJlLCByZWNvdmVyeSk7XG4gIHJldHVybiBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChzZW5kZXJQdWJLZXksIGZhbHNlKS5zbGljZSgxKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBzaWduYXR1cmUgcGFyYW1ldGVycyBpbnRvIHRoZSBmb3JtYXQgb2YgYGV0aF9zaWduYCBSUEMgbWV0aG9kXG4gKiBAcGFyYW0ge051bWJlcn0gdlxuICogQHBhcmFtIHtCdWZmZXJ9IHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHNpZ1xuICovXG5leHBvcnRzLnRvUnBjU2lnID0gZnVuY3Rpb24gKHYsIHIsIHMpIHtcbiAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgaWYgKHYgIT09IDI3ICYmIHYgIT09IDI4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlY292ZXJ5IGlkJyk7XG4gIH1cblxuICAvLyBnZXRoIChhbmQgdGhlIFJQQyBldGhfc2lnbiBtZXRob2QpIHVzZXMgdGhlIDY1IGJ5dGUgZm9ybWF0IHVzZWQgYnkgQml0Y29pblxuICAvLyBGSVhNRTogdGhpcyBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1M1xuICByZXR1cm4gZXhwb3J0cy5idWZmZXJUb0hleChCdWZmZXIuY29uY2F0KFtleHBvcnRzLnNldExlbmd0aExlZnQociwgMzIpLCBleHBvcnRzLnNldExlbmd0aExlZnQocywgMzIpLCBleHBvcnRzLnRvQnVmZmVyKHYgLSAyNyldKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgc2lnbmF0dXJlIGZvcm1hdCBvZiB0aGUgYGV0aF9zaWduYCBSUEMgbWV0aG9kIHRvIHNpZ25hdHVyZSBwYXJhbWV0ZXJzXG4gKiBOT1RFOiBhbGwgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBnZXRoOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaWdcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0cy5mcm9tUnBjU2lnID0gZnVuY3Rpb24gKHNpZykge1xuICBzaWcgPSBleHBvcnRzLnRvQnVmZmVyKHNpZyk7XG5cbiAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgaWYgKHNpZy5sZW5ndGggIT09IDY1KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBsZW5ndGgnKTtcbiAgfVxuXG4gIHZhciB2ID0gc2lnWzY0XTtcbiAgLy8gc3VwcG9ydCBib3RoIHZlcnNpb25zIG9mIGBldGhfc2lnbmAgcmVzcG9uc2VzXG4gIGlmICh2IDwgMjcpIHtcbiAgICB2ICs9IDI3O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2OiB2LFxuICAgIHI6IHNpZy5zbGljZSgwLCAzMiksXG4gICAgczogc2lnLnNsaWNlKDMyLCA2NClcbiAgfTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHByaXZhdGUga2V5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNUb0FkZHJlc3MocHJpdmF0ZVRvUHVibGljKHByaXZhdGVLZXkpKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQuIEFjY2VwdHMgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIHRvb1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuaXNWYWxpZEFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICByZXR1cm4gKC9eMHhbMC05YS1mQS1GXXs0MH0kLy50ZXN0KGFkZHJlc3MpXG4gICk7XG59O1xuXG4vKipcbiAgKiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGlzIGEgemVybyBhZGRyZXNzXG4gICogQG1ldGhvZCBpc1plcm9BZGRyZXNzXG4gICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAqL1xuZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgdmFyIHplcm9BZGRyZXNzID0gZXhwb3J0cy56ZXJvQWRkcmVzcygpO1xuICByZXR1cm4gemVyb0FkZHJlc3MgPT09IGV4cG9ydHMuYWRkSGV4UHJlZml4KGFkZHJlc3MpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2tzdW1tZWQgYWRkcmVzc1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gIGFkZHJlc3MgPSBleHBvcnRzLnN0cmlwSGV4UHJlZml4KGFkZHJlc3MpLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBoYXNoID0gZXhwb3J0cy5rZWNjYWsoYWRkcmVzcykudG9TdHJpbmcoJ2hleCcpO1xuICB2YXIgcmV0ID0gJzB4JztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZHJlc3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocGFyc2VJbnQoaGFzaFtpXSwgMTYpID49IDgpIHtcbiAgICAgIHJldCArPSBhZGRyZXNzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCArPSBhZGRyZXNzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgYWRkcmVzcyBpcyBhIHZhbGlkIGNoZWNrc3VtbWVkIGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICByZXR1cm4gZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzKSAmJiBleHBvcnRzLnRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpID09PSBhZGRyZXNzO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBvZiBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3RcbiAqIEBwYXJhbSB7QnVmZmVyfSBmcm9tIHRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBub25jZSB0aGUgbm9uY2Ugb2YgdGhlIGZyb20gYWNjb3VudFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmdlbmVyYXRlQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tLCBub25jZSkge1xuICBmcm9tID0gZXhwb3J0cy50b0J1ZmZlcihmcm9tKTtcbiAgbm9uY2UgPSBuZXcgQk4obm9uY2UpO1xuXG4gIGlmIChub25jZS5pc1plcm8oKSkge1xuICAgIC8vIGluIFJMUCB3ZSB3YW50IHRvIGVuY29kZSBudWxsIGluIHRoZSBjYXNlIG9mIHplcm8gbm9uY2VcbiAgICAvLyByZWFkIHRoZSBSTFAgZG9jdW1lbnRhdGlvbiBmb3IgYW4gYW5zd2VyIGlmIHlvdSBkYXJlXG4gICAgbm9uY2UgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIG5vbmNlID0gQnVmZmVyLmZyb20obm9uY2UudG9BcnJheSgpKTtcbiAgfVxuXG4gIC8vIE9ubHkgdGFrZSB0aGUgbG93ZXIgMTYwYml0cyBvZiB0aGUgaGFzaFxuICByZXR1cm4gZXhwb3J0cy5ybHBoYXNoKFtmcm9tLCBub25jZV0pLnNsaWNlKC0yMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3VwcGxpZWQgYWRkcmVzcyBiZWxvbmdzIHRvIGEgcHJlY29tcGlsZWQgYWNjb3VudCAoQnl6YW50aXVtKVxuICogQHBhcmFtIHtCdWZmZXJ8U3RyaW5nfSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzUHJlY29tcGlsZWQgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICB2YXIgYSA9IGV4cG9ydHMudW5wYWQoYWRkcmVzcyk7XG4gIHJldHVybiBhLmxlbmd0aCA9PT0gMSAmJiBhWzBdID49IDEgJiYgYVswXSA8PSA4O1xufTtcblxuLyoqXG4gKiBBZGRzIFwiMHhcIiB0byBhIGdpdmVuIGBTdHJpbmdgIGlmIGl0IGRvZXMgbm90IGFscmVhZHkgc3RhcnQgd2l0aCBcIjB4XCJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5pc0hleFByZWZpeGVkKHN0cikgPyBzdHIgOiAnMHgnICsgc3RyO1xufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBFQ0RTQSBzaWduYXR1cmVcbiAqIEBtZXRob2QgaXNWYWxpZFNpZ25hdHVyZVxuICogQHBhcmFtIHtCdWZmZXJ9IHZcbiAqIEBwYXJhbSB7QnVmZmVyfSByXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc1xuICogQHBhcmFtIHtCb29sZWFufSBbaG9tZXN0ZWFkPXRydWVdXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGZ1bmN0aW9uICh2LCByLCBzLCBob21lc3RlYWQpIHtcbiAgdmFyIFNFQ1AyNTZLMV9OX0RJVl8yID0gbmV3IEJOKCc3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjVkNTc2ZTczNTdhNDUwMWRkZmU5MmY0NjY4MWIyMGEwJywgMTYpO1xuICB2YXIgU0VDUDI1NksxX04gPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnLCAxNik7XG5cbiAgaWYgKHIubGVuZ3RoICE9PSAzMiB8fCBzLmxlbmd0aCAhPT0gMzIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodiAhPT0gMjcgJiYgdiAhPT0gMjgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByID0gbmV3IEJOKHIpO1xuICBzID0gbmV3IEJOKHMpO1xuXG4gIGlmIChyLmlzWmVybygpIHx8IHIuZ3QoU0VDUDI1NksxX04pIHx8IHMuaXNaZXJvKCkgfHwgcy5ndChTRUNQMjU2SzFfTikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaG9tZXN0ZWFkID09PSBmYWxzZSAmJiBuZXcgQk4ocykuY21wKFNFQ1AyNTZLMV9OX0RJVl8yKSA9PT0gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIG9yIGBBcnJheWAgdG8gSlNPTlxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl9IGJhXG4gKiBAcmV0dXJuIHtBcnJheXxTdHJpbmd8bnVsbH1cbiAqL1xuZXhwb3J0cy5iYVRvSlNPTiA9IGZ1bmN0aW9uIChiYSkge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJhKSkge1xuICAgIHJldHVybiAnMHgnICsgYmEudG9TdHJpbmcoJ2hleCcpO1xuICB9IGVsc2UgaWYgKGJhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJheS5wdXNoKGV4cG9ydHMuYmFUb0pTT04oYmFbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG59O1xuXG4vKipcbiAqIERlZmluZXMgcHJvcGVydGllcyBvbiBhIGBPYmplY3RgLiBJdCBtYWtlIHRoZSBhc3N1bXB0aW9uIHRoYXQgdW5kZXJseWluZyBkYXRhIGlzIGJpbmFyeS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIHRoZSBgT2JqZWN0YCB0byBkZWZpbmUgcHJvcGVydGllcyBvblxuICogQHBhcmFtIHtBcnJheX0gZmllbGRzIGFuIGFycmF5IGZpZWxkcyB0byBkZWZpbmUuIEZpZWxkcyBjYW4gY29udGFpbjpcbiAqICogYG5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnRpZXNcbiAqICogYGxlbmd0aGAgLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBmaWVsZCBjYW4gaGF2ZVxuICogKiBgYWxsb3dMZXNzYCAtIGlmIHRoZSBmaWVsZCBjYW4gYmUgbGVzcyB0aGFuIHRoZSBsZW5ndGhcbiAqICogYGFsbG93RW1wdHlgXG4gKiBAcGFyYW0geyp9IGRhdGEgZGF0YSB0byBiZSB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgZGVmaW5pdGlvbnNcbiAqL1xuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHNlbGYsIGZpZWxkcywgZGF0YSkge1xuICBzZWxmLnJhdyA9IFtdO1xuICBzZWxmLl9maWVsZHMgPSBbXTtcblxuICAvLyBhdHRhY2ggdGhlIGB0b0pTT05gXG4gIHNlbGYudG9KU09OID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICB2YXIgb2JqID0ge307XG4gICAgICBzZWxmLl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgb2JqW2ZpZWxkXSA9ICcweCcgKyBzZWxmW2ZpZWxkXS50b1N0cmluZygnaGV4Jyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzLmJhVG9KU09OKHRoaXMucmF3KTtcbiAgfTtcblxuICBzZWxmLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gcmxwLmVuY29kZShzZWxmLnJhdyk7XG4gIH07XG5cbiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkLCBpKSB7XG4gICAgc2VsZi5fZmllbGRzLnB1c2goZmllbGQubmFtZSk7XG4gICAgZnVuY3Rpb24gZ2V0dGVyKCkge1xuICAgICAgcmV0dXJuIHNlbGYucmF3W2ldO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXR0ZXIodikge1xuICAgICAgdiA9IGV4cG9ydHMudG9CdWZmZXIodik7XG5cbiAgICAgIGlmICh2LnRvU3RyaW5nKCdoZXgnKSA9PT0gJzAwJyAmJiAhZmllbGQuYWxsb3daZXJvKSB7XG4gICAgICAgIHYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZC5hbGxvd0xlc3MgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgIHYgPSBleHBvcnRzLnN0cmlwWmVyb3Modik7XG4gICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPj0gdi5sZW5ndGgsICdUaGUgZmllbGQgJyArIGZpZWxkLm5hbWUgKyAnIG11c3Qgbm90IGhhdmUgbW9yZSAnICsgZmllbGQubGVuZ3RoICsgJyBieXRlcycpO1xuICAgICAgfSBlbHNlIGlmICghKGZpZWxkLmFsbG93WmVybyAmJiB2Lmxlbmd0aCA9PT0gMCkgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPT09IHYubGVuZ3RoLCAnVGhlIGZpZWxkICcgKyBmaWVsZC5uYW1lICsgJyBtdXN0IGhhdmUgYnl0ZSBsZW5ndGggb2YgJyArIGZpZWxkLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYucmF3W2ldID0gdjtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgZmllbGQubmFtZSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZ2V0dGVyLFxuICAgICAgc2V0OiBzZXR0ZXJcbiAgICB9KTtcblxuICAgIGlmIChmaWVsZC5kZWZhdWx0KSB7XG4gICAgICBzZWxmW2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdDtcbiAgICB9XG5cbiAgICAvLyBhdHRhY2ggYWxpYXNcbiAgICBpZiAoZmllbGQuYWxpYXMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBmaWVsZC5hbGlhcywge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgZ2V0OiBnZXR0ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaWYgdGhlIGNvbnN0dWN0b3IgaXMgcGFzc2VkIGRhdGFcbiAgaWYgKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBkYXRhID0gQnVmZmVyLmZyb20oZXhwb3J0cy5zdHJpcEhleFByZWZpeChkYXRhKSwgJ2hleCcpO1xuICAgIH1cblxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBybHAuZGVjb2RlKGRhdGEpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiBzZWxmLl9maWVsZHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignd3JvbmcgbnVtYmVyIG9mIGZpZWxkcyBpbiBkYXRhJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSBhbGwgdGhlIGl0ZW1zIGFyZSBidWZmZXJzXG4gICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgc2VsZltzZWxmLl9maWVsZHNbaV1dID0gZXhwb3J0cy50b0J1ZmZlcihkKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkYXRhKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIGlmIChrZXlzLmluZGV4T2YoZmllbGQubmFtZSkgIT09IC0xKSBzZWxmW2ZpZWxkLm5hbWVdID0gZGF0YVtmaWVsZC5uYW1lXTtcbiAgICAgICAgaWYgKGtleXMuaW5kZXhPZihmaWVsZC5hbGlhcykgIT09IC0xKSBzZWxmW2ZpZWxkLmFsaWFzXSA9IGRhdGFbZmllbGQuYWxpYXNdO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBkYXRhJyk7XG4gICAgfVxuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azEnKTtcblxudmFyIHNlY3AyNTZrMXYzID0gcmVxdWlyZSgnLi9zZWNwMjU2azEtbGliL2luZGV4Jyk7XG52YXIgZGVyID0gcmVxdWlyZSgnLi9zZWNwMjU2azEtbGliL2RlcicpO1xuXG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBwcml2YXRlS2V5XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlWZXJpZnlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgcHJpdmF0ZUtleVZlcmlmeSA9IGZ1bmN0aW9uIHByaXZhdGVLZXlWZXJpZnkocHJpdmF0ZUtleSkge1xuICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwcml2YXRlS2V5IGxlbmd0aCBpcyBub3QgMzJcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBzZWNwMjU2azEucHJpdmF0ZUtleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpO1xufTtcblxuLyoqXG4gKiBFeHBvcnQgYSBwcml2YXRlS2V5IGluIERFUiBmb3JtYXRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleUV4cG9ydFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xudmFyIHByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiBwcml2YXRlS2V5RXhwb3J0KHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgLy8gcHJpdmF0ZUtleUV4cG9ydCBtZXRob2QgaXMgbm90IHBhcnQgb2Ygc2VjcDI1NmsxIHY0IHBhY2thZ2VcbiAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ByaXZhdGUga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICB2YXIgcHVibGljS2V5ID0gc2VjcDI1NmsxdjMucHJpdmF0ZUtleUV4cG9ydChwcml2YXRlS2V5LCBjb21wcmVzc2VkKTtcblxuICByZXR1cm4gZGVyLnByaXZhdGVLZXlFeHBvcnQocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKTtcbn07XG5cbi8qKlxuICogSW1wb3J0IGEgcHJpdmF0ZUtleSBpbiBERVIgZm9ybWF0XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlJbXBvcnRcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cblxudmFyIHByaXZhdGVLZXlJbXBvcnQgPSBmdW5jdGlvbiBwcml2YXRlS2V5SW1wb3J0KHByaXZhdGVLZXkpIHtcbiAgLy8gcHJpdmF0ZUtleUltcG9ydCBtZXRob2QgaXMgbm90IHBhcnQgb2Ygc2VjcDI1NmsxIHY0IHBhY2thZ2VcbiAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICBwcml2YXRlS2V5ID0gZGVyLnByaXZhdGVLZXlJbXBvcnQocHJpdmF0ZUtleSk7XG4gIGlmIChwcml2YXRlS2V5ICE9PSBudWxsICYmIHByaXZhdGVLZXkubGVuZ3RoID09PSAzMiAmJiBwcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpKSB7XG4gICAgcmV0dXJuIHByaXZhdGVLZXk7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZG4ndCBpbXBvcnQgZnJvbSBERVIgZm9ybWF0XCIpO1xufTtcblxuLyoqXG4gKiBOZWdhdGUgYSBwcml2YXRlS2V5IGJ5IHN1YnRyYWN0aW5nIGl0IGZyb20gdGhlIG9yZGVyIG9mIHRoZSBjdXJ2ZSdzIGJhc2UgcG9pbnRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleU5lZ2F0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHByaXZhdGVLZXlOZWdhdGUgPSBmdW5jdGlvbiBwcml2YXRlS2V5TmVnYXRlKHByaXZhdGVLZXkpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5TmVnYXRlKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSkpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBpbnZlcnNlIG9mIGEgcHJpdmF0ZUtleSAobW9kdWxvIHRoZSBvcmRlciBvZiB0aGUgY3VydmUncyBiYXNlIHBvaW50KS5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleU1vZEludmVyc2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5TW9kSW52ZXJzZSA9IGZ1bmN0aW9uIHByaXZhdGVLZXlNb2RJbnZlcnNlKHByaXZhdGVLZXkpIHtcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJpdmF0ZSBrZXkgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azF2My5wcml2YXRlS2V5TW9kSW52ZXJzZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpKTtcbn07XG5cbi8qKlxuICogVHdlYWsgYSBwcml2YXRlS2V5IGJ5IGFkZGluZyB0d2VhayB0byBpdC5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrQWRkXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5VHdlYWtBZGQgPSBmdW5jdGlvbiBwcml2YXRlS2V5VHdlYWtBZGQocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtBZGQoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB0d2VhaykpO1xufTtcblxuLyoqXG4gKiBUd2VhayBhIHByaXZhdGVLZXkgYnkgbXVsdGlwbHlpbmcgaXQgYnkgYSB0d2Vhay5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrTXVsXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5VHdlYWtNdWwgPSBmdW5jdGlvbiBwcml2YXRlS2V5VHdlYWtNdWwocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtNdWwoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCBVaW50OEFycmF5LmZyb20odHdlYWspKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIHB1YmxpYyBrZXkgZm9yIGEgcHJpdmF0ZUtleS5cbiAqIEBtZXRob2QgcHVibGljS2V5Q3JlYXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwdWJsaWNLZXlDcmVhdGUgPSBmdW5jdGlvbiBwdWJsaWNLZXlDcmVhdGUocHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIGNvbXByZXNzZWQpKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIHB1YmxpY0tleSB0byBjb21wcmVzc2VkIG9yIHVuY29tcHJlc3NlZCBmb3JtLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb252ZXJ0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHB1YmxpY0tleUNvbnZlcnQgPSBmdW5jdGlvbiBwdWJsaWNLZXlDb252ZXJ0KHB1YmxpY0tleSwgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIGNvbXByZXNzZWQpKTtcbn07XG5cbi8qKlxuICogVmVyaWZ5IGFuIEVDRFNBIHB1YmxpY0tleS5cbiAqIEBtZXRob2QgcHVibGljS2V5VmVyaWZ5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgcHVibGljS2V5VmVyaWZ5ID0gZnVuY3Rpb24gcHVibGljS2V5VmVyaWZ5KHB1YmxpY0tleSkge1xuICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwdWJsaWNLZXkgbGVuZ3RoIGlzIG5vdCAzMyBvciA2NVxuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gMzMgJiYgcHVibGljS2V5Lmxlbmd0aCAhPT0gNjUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG59O1xuXG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IGFkZGluZyB0d2VhayB0aW1lcyB0aGUgZ2VuZXJhdG9yIHRvIGl0LlxuICogQG1ldGhvZCBwdWJsaWNLZXlUd2Vha0FkZFxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHB1YmxpY0tleVR3ZWFrQWRkID0gZnVuY3Rpb24gcHVibGljS2V5VHdlYWtBZGQocHVibGljS2V5LCB0d2VhaywgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleVR3ZWFrQWRkKFVpbnQ4QXJyYXkuZnJvbShwdWJsaWNLZXkpLCBVaW50OEFycmF5LmZyb20odHdlYWspLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IG11bHRpcGx5aW5nIGl0IGJ5IGEgdHdlYWsgdmFsdWVcbiAqIEBtZXRob2QgcHVibGljS2V5VHdlYWtNdWxcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSB0d2Vha1xuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwdWJsaWNLZXlUd2Vha011bCA9IGZ1bmN0aW9uIHB1YmxpY0tleVR3ZWFrTXVsKHB1YmxpY0tleSwgdHdlYWssIGNvbXByZXNzZWQpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wdWJsaWNLZXlUd2Vha011bChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHR3ZWFrKSwgY29tcHJlc3NlZCkpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBnaXZlbiBwdWJsaWNLZXlzIHRvZ2V0aGVyLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb21iaW5lXG4gKiBAcGFyYW0ge0FycmF5PEJ1ZmZlcj59IHB1YmxpY0tleXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgcHVibGljS2V5Q29tYmluZSA9IGZ1bmN0aW9uIHB1YmxpY0tleUNvbWJpbmUocHVibGljS2V5cywgY29tcHJlc3NlZCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBwdWJsaWNLZXlzLmZvckVhY2goZnVuY3Rpb24gKHB1YmxpY0tleSkge1xuICAgIGtleXMucHVzaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG4gIH0pO1xuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5Q29tYmluZShrZXlzLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBzaWduYXR1cmUgdG8gYSBub3JtYWxpemVkIGxvd2VyLVMgZm9ybS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlTm9ybWFsaXplXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVOb3JtYWxpemUgPSBmdW5jdGlvbiBzaWduYXR1cmVOb3JtYWxpemUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlTm9ybWFsaXplKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFNlcmlhbGl6ZSBhbiBFQ0RTQSBzaWduYXR1cmUgaW4gREVSIGZvcm1hdC5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlRXhwb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVFeHBvcnQgPSBmdW5jdGlvbiBzaWduYXR1cmVFeHBvcnQoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlRXhwb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAoZm9sbG93IGJ5IFtCSVA2Nl0oaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDA2Ni5tZWRpYXdpa2kpKS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlSW1wb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVJbXBvcnQgPSBmdW5jdGlvbiBzaWduYXR1cmVJbXBvcnQoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlSW1wb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAobm90IGZvbGxvdyBieSBbQklQNjZdKGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNjYubWVkaWF3aWtpKSkuXG4gKiBAbWV0aG9kIHNpZ25hdHVyZUltcG9ydExheFxuICogQHBhcmFtIHtCdWZmZXJ9IHNpZ25hdHVyZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gc2lnbmF0dXJlSW1wb3J0TGF4KHNpZ25hdHVyZSkge1xuICAvLyBzaWduYXR1cmVJbXBvcnRMYXggbWV0aG9kIGlzIG5vdCBwYXJ0IG9mIHNlY3AyNTZrMSB2NCBwYWNrYWdlXG4gIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdjNcbiAgLy8gZW5zdXJlIHRoYXQgc2lnbmF0dXJlIGlzIGdyZWF0ZXIgdGhhbiAwXG4gIGlmIChzaWduYXR1cmUubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NpZ25hdHVyZSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgdmFyIHNpZ09iaiA9IGRlci5zaWduYXR1cmVJbXBvcnRMYXgoc2lnbmF0dXJlKTtcbiAgaWYgKHNpZ09iaiA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvdWxkbid0IHBhcnNlIERFUiBzaWduYXR1cmVcIik7XG4gIH1cblxuICByZXR1cm4gc2VjcDI1NmsxdjMuc2lnbmF0dXJlSW1wb3J0KHNpZ09iaik7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFQ0RTQSBzaWduYXR1cmUuIEFsd2F5cyByZXR1cm4gbG93LVMgc2lnbmF0dXJlLlxuICogQG1ldGhvZCBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWVzc2FnZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBzaG91bGQgYmUgYW4gT2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgc2lnbk9wdGlvbnMgPSB2b2lkIDA7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBzaWduT3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5kYXRhIHNob3VsZCBiZSBhIEJ1ZmZlcicpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIC8vIHZhbGlkYXRlIG9wdGlvbi5kYXRhIGxlbmd0aFxuICAgICAgaWYgKG9wdGlvbnMuZGF0YS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvcHRpb25zLmRhdGEgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgICAgIH1cblxuICAgICAgc2lnbk9wdGlvbnMuZGF0YSA9IG5ldyBVaW50OEFycmF5KG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9uY2VmbiA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5ub25jZWZuIHNob3VsZCBiZSBhIEZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9uY2Vmbikge1xuICAgICAgLy8gIGNvbnZlcnQgb3B0aW9uLm5vbmNlZm4gZnVuY3Rpb24gc2lnbmF0dXJlXG4gICAgICBzaWduT3B0aW9ucy5ub25jZWZuID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHByaXZhdGVLZXksIGFsZ28sIGRhdGEsIGF0dGVtcHQpIHtcbiAgICAgICAgdmFyIGJ1ZmZlckFsZ28gPSBhbGdvICE9IG51bGwgPyBCdWZmZXIuZnJvbShhbGdvKSA6IG51bGw7XG4gICAgICAgIHZhciBidWZmZXJEYXRhID0gZGF0YSAhPSBudWxsID8gQnVmZmVyLmZyb20oZGF0YSkgOiBudWxsO1xuXG4gICAgICAgIHZhciBidWZmZXIgPSBCdWZmZXIuZnJvbSgnJyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm9uY2Vmbikge1xuICAgICAgICAgIGJ1ZmZlciA9IG9wdGlvbnMubm9uY2VmbihCdWZmZXIuZnJvbShtZXNzYWdlKSwgQnVmZmVyLmZyb20ocHJpdmF0ZUtleSksIGJ1ZmZlckFsZ28sIGJ1ZmZlckRhdGEsIGF0dGVtcHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShidWZmZXIpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgc2lnID0gc2VjcDI1NmsxLmVjZHNhU2lnbihVaW50OEFycmF5LmZyb20obWVzc2FnZSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgc2lnbk9wdGlvbnMpO1xuXG4gIHJldHVybiB7XG4gICAgc2lnbmF0dXJlOiBCdWZmZXIuZnJvbShzaWcuc2lnbmF0dXJlKSxcbiAgICByZWNvdmVyeTogc2lnLnJlY2lkXG4gIH07XG59O1xuXG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHZlcmlmeVxuICogQHBhcmFtIHtCdWZmZXJ9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnZhciB2ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgLy8gbm90ZTogc2VjcDI1NmsxIHY0IHZlcmlmeSBtZXRob2QgaGFzIGEgZGlmZmVyZW50IGFyZ3VtZW50IG9yZGVyXG4gIHJldHVybiBzZWNwMjU2azEuZWNkc2FWZXJpZnkoVWludDhBcnJheS5mcm9tKHNpZ25hdHVyZSksIFVpbnQ4QXJyYXkuZnJvbShtZXNzYWdlKSwgcHVibGljS2V5KTtcbn07XG5cbi8qKlxuICogUmVjb3ZlciBhbiBFQ0RTQSBwdWJsaWMga2V5IGZyb20gYSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHJlY292ZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcGFyYW0ge051bWJlcn0gcmVjaWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgcmVjb3ZlciA9IGZ1bmN0aW9uIHJlY292ZXIobWVzc2FnZSwgc2lnbmF0dXJlLCByZWNpZCwgY29tcHJlc3NlZCkge1xuICAvLyBub3RlOiBzZWNwMjU2azEgdjQgcmVjb3ZlciBtZXRob2QgaGFzIGEgZGlmZmVyZW50IGFyZ3VtZW50IG9yZGVyXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkc2FSZWNvdmVyKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpLCByZWNpZCwgVWludDhBcnJheS5mcm9tKG1lc3NhZ2UpLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgYW4gRUMgRGlmZmllLUhlbGxtYW4gc2VjcmV0IGFuZCBhcHBsaWVkIHNoYTI1NiB0byBjb21wcmVzc2VkIHB1YmxpYyBrZXkuXG4gKiBAbWV0aG9kIGVjZGhcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBlY2RoID0gZnVuY3Rpb24gZWNkaChwdWJsaWNLZXksIHByaXZhdGVLZXkpIHtcbiAgLy8gbm90ZTogc2VjcDI1NmsxIHYzIGRvZXNuJ3QgYWxsb3cgb3B0aW9uYWwgcGFyYW1ldGVyXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB7fSkpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIGFuIEVDIERpZmZpZS1IZWxsbWFuIHNlY3JldCBhbmQgcmV0dXJuIHB1YmxpYyBrZXkgYXMgcmVzdWx0XG4gKiBAbWV0aG9kIGVjZGhVbnNhZmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIGVjZGhVbnNhZmUgPSBmdW5jdGlvbiBlY2RoVW5zYWZlKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAvLyBlY2RoVW5zYWZlIG1ldGhvZCBpcyBub3QgcGFydCBvZiBzZWNwMjU2azEgdjQgcGFja2FnZVxuICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIHYzXG4gIC8vIGVuc3VyZSB2YWxpZCBwdWJsaWNLZXkgbGVuZ3RoXG4gIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSAzMyAmJiBwdWJsaWNLZXkubGVuZ3RoICE9PSA2NSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwdWJsaWMga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICAvLyBlbnN1cmUgdmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwcml2YXRlIGtleSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMXYzLmVjZGhVbnNhZmUoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgY29tcHJlc3NlZCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByaXZhdGVLZXlWZXJpZnk6IHByaXZhdGVLZXlWZXJpZnksXG4gIHByaXZhdGVLZXlFeHBvcnQ6IHByaXZhdGVLZXlFeHBvcnQsXG4gIHByaXZhdGVLZXlJbXBvcnQ6IHByaXZhdGVLZXlJbXBvcnQsXG4gIHByaXZhdGVLZXlOZWdhdGU6IHByaXZhdGVLZXlOZWdhdGUsXG4gIHByaXZhdGVLZXlNb2RJbnZlcnNlOiBwcml2YXRlS2V5TW9kSW52ZXJzZSxcbiAgcHJpdmF0ZUtleVR3ZWFrQWRkOiBwcml2YXRlS2V5VHdlYWtBZGQsXG4gIHByaXZhdGVLZXlUd2Vha011bDogcHJpdmF0ZUtleVR3ZWFrTXVsLFxuXG4gIHB1YmxpY0tleUNyZWF0ZTogcHVibGljS2V5Q3JlYXRlLFxuICBwdWJsaWNLZXlDb252ZXJ0OiBwdWJsaWNLZXlDb252ZXJ0LFxuICBwdWJsaWNLZXlWZXJpZnk6IHB1YmxpY0tleVZlcmlmeSxcbiAgcHVibGljS2V5VHdlYWtBZGQ6IHB1YmxpY0tleVR3ZWFrQWRkLFxuICBwdWJsaWNLZXlUd2Vha011bDogcHVibGljS2V5VHdlYWtNdWwsXG4gIHB1YmxpY0tleUNvbWJpbmU6IHB1YmxpY0tleUNvbWJpbmUsXG5cbiAgc2lnbmF0dXJlTm9ybWFsaXplOiBzaWduYXR1cmVOb3JtYWxpemUsXG4gIHNpZ25hdHVyZUV4cG9ydDogc2lnbmF0dXJlRXhwb3J0LFxuICBzaWduYXR1cmVJbXBvcnQ6IHNpZ25hdHVyZUltcG9ydCxcbiAgc2lnbmF0dXJlSW1wb3J0TGF4OiBzaWduYXR1cmVJbXBvcnRMYXgsXG5cbiAgc2lnbjogc2lnbixcbiAgdmVyaWZ5OiB2ZXJpZnksXG4gIHJlY292ZXI6IHJlY292ZXIsXG5cbiAgZWNkaDogZWNkaCxcbiAgZWNkaFVuc2FmZTogZWNkaFVuc2FmZVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxudmFyIEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9DT01QUkVTU0VEID0gQnVmZmVyLmZyb20oW1xuLy8gYmVnaW5cbjB4MzAsIDB4ODEsIDB4ZDMsIDB4MDIsIDB4MDEsIDB4MDEsIDB4MDQsIDB4MjAsXG4vLyBwcml2YXRlIGtleVxuMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbi8vIG1pZGRsZVxuMHhhMCwgMHg4MSwgMHg4NSwgMHgzMCwgMHg4MSwgMHg4MiwgMHgwMiwgMHgwMSwgMHgwMSwgMHgzMCwgMHgyYywgMHgwNiwgMHgwNywgMHgyYSwgMHg4NiwgMHg0OCwgMHhjZSwgMHgzZCwgMHgwMSwgMHgwMSwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZSwgMHhmZiwgMHhmZiwgMHhmYywgMHgyZiwgMHgzMCwgMHgwNiwgMHgwNCwgMHgwMSwgMHgwMCwgMHgwNCwgMHgwMSwgMHgwNywgMHgwNCwgMHgyMSwgMHgwMiwgMHg3OSwgMHhiZSwgMHg2NiwgMHg3ZSwgMHhmOSwgMHhkYywgMHhiYiwgMHhhYywgMHg1NSwgMHhhMCwgMHg2MiwgMHg5NSwgMHhjZSwgMHg4NywgMHgwYiwgMHgwNywgMHgwMiwgMHg5YiwgMHhmYywgMHhkYiwgMHgyZCwgMHhjZSwgMHgyOCwgMHhkOSwgMHg1OSwgMHhmMiwgMHg4MSwgMHg1YiwgMHgxNiwgMHhmOCwgMHgxNywgMHg5OCwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZSwgMHhiYSwgMHhhZSwgMHhkYywgMHhlNiwgMHhhZiwgMHg0OCwgMHhhMCwgMHgzYiwgMHhiZiwgMHhkMiwgMHg1ZSwgMHg4YywgMHhkMCwgMHgzNiwgMHg0MSwgMHg0MSwgMHgwMiwgMHgwMSwgMHgwMSwgMHhhMSwgMHgyNCwgMHgwMywgMHgyMiwgMHgwMCxcbi8vIHB1YmxpYyBrZXlcbjB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcblxudmFyIEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9VTkNPTVBSRVNTRUQgPSBCdWZmZXIuZnJvbShbXG4vLyBiZWdpblxuMHgzMCwgMHg4MiwgMHgwMSwgMHgxMywgMHgwMiwgMHgwMSwgMHgwMSwgMHgwNCwgMHgyMCxcbi8vIHByaXZhdGUga2V5XG4weDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuLy8gbWlkZGxlXG4weGEwLCAweDgxLCAweGE1LCAweDMwLCAweDgxLCAweGEyLCAweDAyLCAweDAxLCAweDAxLCAweDMwLCAweDJjLCAweDA2LCAweDA3LCAweDJhLCAweDg2LCAweDQ4LCAweGNlLCAweDNkLCAweDAxLCAweDAxLCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZlLCAweGZmLCAweGZmLCAweGZjLCAweDJmLCAweDMwLCAweDA2LCAweDA0LCAweDAxLCAweDAwLCAweDA0LCAweDAxLCAweDA3LCAweDA0LCAweDQxLCAweDA0LCAweDc5LCAweGJlLCAweDY2LCAweDdlLCAweGY5LCAweGRjLCAweGJiLCAweGFjLCAweDU1LCAweGEwLCAweDYyLCAweDk1LCAweGNlLCAweDg3LCAweDBiLCAweDA3LCAweDAyLCAweDliLCAweGZjLCAweGRiLCAweDJkLCAweGNlLCAweDI4LCAweGQ5LCAweDU5LCAweGYyLCAweDgxLCAweDViLCAweDE2LCAweGY4LCAweDE3LCAweDk4LCAweDQ4LCAweDNhLCAweGRhLCAweDc3LCAweDI2LCAweGEzLCAweGM0LCAweDY1LCAweDVkLCAweGE0LCAweGZiLCAweGZjLCAweDBlLCAweDExLCAweDA4LCAweGE4LCAweGZkLCAweDE3LCAweGI0LCAweDQ4LCAweGE2LCAweDg1LCAweDU0LCAweDE5LCAweDljLCAweDQ3LCAweGQwLCAweDhmLCAweGZiLCAweDEwLCAweGQ0LCAweGI4LCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZlLCAweGJhLCAweGFlLCAweGRjLCAweGU2LCAweGFmLCAweDQ4LCAweGEwLCAweDNiLCAweGJmLCAweGQyLCAweDVlLCAweDhjLCAweGQwLCAweDM2LCAweDQxLCAweDQxLCAweDAyLCAweDAxLCAweDAxLCAweGExLCAweDQ0LCAweDAzLCAweDQyLCAweDAwLFxuLy8gcHVibGljIGtleVxuMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuXG5leHBvcnRzLnByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKSB7XG4gIHZhciByZXN1bHQgPSBCdWZmZXIuZnJvbShjb21wcmVzc2VkID8gRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQgOiBFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEKTtcbiAgcHJpdmF0ZUtleS5jb3B5KHJlc3VsdCwgY29tcHJlc3NlZCA/IDggOiA5KTtcbiAgcHVibGljS2V5LmNvcHkocmVzdWx0LCBjb21wcmVzc2VkID8gMTgxIDogMjE0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMucHJpdmF0ZUtleUltcG9ydCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gIHZhciBsZW5ndGggPSBwcml2YXRlS2V5Lmxlbmd0aDtcblxuICAvLyBzZXF1ZW5jZSBoZWFkZXJcbiAgdmFyIGluZGV4ID0gMDtcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgMSB8fCBwcml2YXRlS2V5W2luZGV4XSAhPT0gMHgzMCkgcmV0dXJuIG51bGw7XG4gIGluZGV4ICs9IDE7XG5cbiAgLy8gc2VxdWVuY2UgbGVuZ3RoIGNvbnN0cnVjdG9yXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDEgfHwgIShwcml2YXRlS2V5W2luZGV4XSAmIDB4ODApKSByZXR1cm4gbnVsbDtcblxuICB2YXIgbGVuYiA9IHByaXZhdGVLZXlbaW5kZXhdICYgMHg3ZjtcbiAgaW5kZXggKz0gMTtcbiAgaWYgKGxlbmIgPCAxIHx8IGxlbmIgPiAyKSByZXR1cm4gbnVsbDtcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgbGVuYikgcmV0dXJuIG51bGw7XG5cbiAgLy8gc2VxdWVuY2UgbGVuZ3RoXG4gIHZhciBsZW4gPSBwcml2YXRlS2V5W2luZGV4ICsgbGVuYiAtIDFdIHwgKGxlbmIgPiAxID8gcHJpdmF0ZUtleVtpbmRleCArIGxlbmIgLSAyXSA8PCA4IDogMCk7XG4gIGluZGV4ICs9IGxlbmI7XG4gIGlmIChsZW5ndGggPCBpbmRleCArIGxlbikgcmV0dXJuIG51bGw7XG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAwOiB2ZXJzaW9uIG51bWJlciAoPTEpXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDMgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDIgfHwgcHJpdmF0ZUtleVtpbmRleCArIDFdICE9PSAweDAxIHx8IHByaXZhdGVLZXlbaW5kZXggKyAyXSAhPT0gMHgwMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGluZGV4ICs9IDM7XG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAxOiBvY3RldCBzdHJpbmcsIHVwIHRvIDMyIGJ5dGVzXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDIgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDQgfHwgcHJpdmF0ZUtleVtpbmRleCArIDFdID4gMHgyMCB8fCBsZW5ndGggPCBpbmRleCArIDIgKyBwcml2YXRlS2V5W2luZGV4ICsgMV0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwcml2YXRlS2V5LnNsaWNlKGluZGV4ICsgMiwgaW5kZXggKyAyICsgcHJpdmF0ZUtleVtpbmRleCArIDFdKTtcbn07XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICB2YXIgciA9IEJ1ZmZlci5hbGxvYygzMiwgMCk7XG4gIHZhciBzID0gQnVmZmVyLmFsbG9jKDMyLCAwKTtcblxuICB2YXIgbGVuZ3RoID0gc2lnbmF0dXJlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcblxuICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZVxuICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDMwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBzZXF1ZW5jZSBsZW5ndGggYnl0ZVxuICB2YXIgbGVuYnl0ZSA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgaWYgKGxlbmJ5dGUgJiAweDgwKSB7XG4gICAgaW5kZXggKz0gbGVuYnl0ZSAtIDB4ODA7XG4gICAgaWYgKGluZGV4ID4gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZSBmb3IgclxuICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBsZW5ndGggZm9yIHJcbiAgdmFyIHJsZW4gPSBzaWduYXR1cmVbaW5kZXgrK107XG4gIGlmIChybGVuICYgMHg4MCkge1xuICAgIGxlbmJ5dGUgPSBybGVuIC0gMHg4MDtcbiAgICBpZiAoaW5kZXggKyBsZW5ieXRlID4gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZm9yICg7IGxlbmJ5dGUgPiAwICYmIHNpZ25hdHVyZVtpbmRleF0gPT09IDB4MDA7IGluZGV4ICs9IDEsIGxlbmJ5dGUgLT0gMSkge31cbiAgICBmb3IgKHJsZW4gPSAwOyBsZW5ieXRlID4gMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSB7XG4gICAgICBybGVuID0gKHJsZW4gPDwgOCkgKyBzaWduYXR1cmVbaW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAocmxlbiA+IGxlbmd0aCAtIGluZGV4KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJpbmRleCA9IGluZGV4O1xuICBpbmRleCArPSBybGVuO1xuXG4gIC8vIHNlcXVlbmNlIHRhZyBieXRlIGZvciBzXG4gIGlmIChzaWduYXR1cmVbaW5kZXgrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGxlbmd0aCBmb3Igc1xuICB2YXIgc2xlbiA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgaWYgKHNsZW4gJiAweDgwKSB7XG4gICAgbGVuYnl0ZSA9IHNsZW4gLSAweDgwO1xuICAgIGlmIChpbmRleCArIGxlbmJ5dGUgPiBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmb3IgKDsgbGVuYnl0ZSA+IDAgJiYgc2lnbmF0dXJlW2luZGV4XSA9PT0gMHgwMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSB7fVxuICAgIGZvciAoc2xlbiA9IDA7IGxlbmJ5dGUgPiAwOyBpbmRleCArPSAxLCBsZW5ieXRlIC09IDEpIHtcbiAgICAgIHNsZW4gPSAoc2xlbiA8PCA4KSArIHNpZ25hdHVyZVtpbmRleF07XG4gICAgfVxuICB9XG4gIGlmIChzbGVuID4gbGVuZ3RoIC0gaW5kZXgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgc2luZGV4ID0gaW5kZXg7XG4gIGluZGV4ICs9IHNsZW47XG5cbiAgLy8gaWdub3JlIGxlYWRpbmcgemVyb3MgaW4gclxuICBmb3IgKDsgcmxlbiA+IDAgJiYgc2lnbmF0dXJlW3JpbmRleF0gPT09IDB4MDA7IHJsZW4gLT0gMSwgcmluZGV4ICs9IDEpIHt9XG4gIC8vIGNvcHkgciB2YWx1ZVxuICBpZiAocmxlbiA+IDMyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJ2YWx1ZSA9IHNpZ25hdHVyZS5zbGljZShyaW5kZXgsIHJpbmRleCArIHJsZW4pO1xuICBydmFsdWUuY29weShyLCAzMiAtIHJ2YWx1ZS5sZW5ndGgpO1xuXG4gIC8vIGlnbm9yZSBsZWFkaW5nIHplcm9zIGluIHNcbiAgZm9yICg7IHNsZW4gPiAwICYmIHNpZ25hdHVyZVtzaW5kZXhdID09PSAweDAwOyBzbGVuIC09IDEsIHNpbmRleCArPSAxKSB7fVxuICAvLyBjb3B5IHMgdmFsdWVcbiAgaWYgKHNsZW4gPiAzMikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBzdmFsdWUgPSBzaWduYXR1cmUuc2xpY2Uoc2luZGV4LCBzaW5kZXggKyBzbGVuKTtcbiAgc3ZhbHVlLmNvcHkocywgMzIgLSBzdmFsdWUubGVuZ3RoKTtcblxuICByZXR1cm4geyByOiByLCBzOiBzIH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWM7XG5cbnZhciBlYyA9IG5ldyBFQygnc2VjcDI1NmsxJyk7XG52YXIgZWNwYXJhbXMgPSBlYy5jdXJ2ZTtcblxuZXhwb3J0cy5wcml2YXRlS2V5RXhwb3J0ID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgdmFyIGQgPSBuZXcgQk4ocHJpdmF0ZUtleSk7XG4gIGlmIChkLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGRuXFwndCBleHBvcnQgdG8gREVSIGZvcm1hdCcpO1xuICB9XG5cbiAgdmFyIHBvaW50ID0gZWMuZy5tdWwoZCk7XG4gIHJldHVybiB0b1B1YmxpY0tleShwb2ludC5nZXRYKCksIHBvaW50LmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuXG5leHBvcnRzLnByaXZhdGVLZXlNb2RJbnZlcnNlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgdmFyIGJuID0gbmV3IEJOKHByaXZhdGVLZXkpO1xuICBpZiAoYm4udWNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IGJuLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcml2YXRlIGtleSByYW5nZSBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gYm4uaW52bShlY3BhcmFtcy5uKS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKTtcbn07XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0ID0gZnVuY3Rpb24gKHNpZ09iaikge1xuICB2YXIgciA9IG5ldyBCTihzaWdPYmoucik7XG4gIGlmIChyLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHIgPSBuZXcgQk4oMCk7XG4gIH1cblxuICB2YXIgcyA9IG5ldyBCTihzaWdPYmoucyk7XG4gIGlmIChzLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHMgPSBuZXcgQk4oMCk7XG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbci50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKSwgcy50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKV0pO1xufTtcblxuZXhwb3J0cy5lY2RoVW5zYWZlID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICB2YXIgcG9pbnQgPSBlYy5rZXlGcm9tUHVibGljKHB1YmxpY0tleSk7XG5cbiAgdmFyIHNjYWxhciA9IG5ldyBCTihwcml2YXRlS2V5KTtcbiAgaWYgKHNjYWxhci51Y21wKGVjcGFyYW1zLm4pID49IDAgfHwgc2NhbGFyLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzY2FsYXIgd2FzIGludmFsaWQgKHplcm8gb3Igb3ZlcmZsb3cpJyk7XG4gIH1cblxuICB2YXIgc2hhcmVkID0gcG9pbnQucHViLm11bChzY2FsYXIpO1xuICByZXR1cm4gdG9QdWJsaWNLZXkoc2hhcmVkLmdldFgoKSwgc2hhcmVkLmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuXG52YXIgdG9QdWJsaWNLZXkgPSBmdW5jdGlvbiB0b1B1YmxpY0tleSh4LCB5LCBjb21wcmVzc2VkKSB7XG4gIHZhciBwdWJsaWNLZXkgPSB2b2lkIDA7XG5cbiAgaWYgKGNvbXByZXNzZWQpIHtcbiAgICBwdWJsaWNLZXkgPSBCdWZmZXIuYWxsb2MoMzMpO1xuICAgIHB1YmxpY0tleVswXSA9IHkuaXNPZGQoKSA/IDB4MDMgOiAweDAyO1xuICAgIHgudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMikuY29weShwdWJsaWNLZXksIDEpO1xuICB9IGVsc2Uge1xuICAgIHB1YmxpY0tleSA9IEJ1ZmZlci5hbGxvYyg2NSk7XG4gICAgcHVibGljS2V5WzBdID0gMHgwNDtcbiAgICB4LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAxKTtcbiAgICB5LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAzMyk7XG4gIH1cblxuICByZXR1cm4gcHVibGljS2V5O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2luZGV4LmpzJylcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZWxlc3MtZXNjYXBlICovXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ2V0aGVyZXVtanMtdXRpbCcpXG5jb25zdCBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcblxudmFyIEFCSSA9IGZ1bmN0aW9uICgpIHtcbn1cblxuLy8gQ29udmVydCBmcm9tIHNob3J0IHRvIGNhbm9uaWNhbCBuYW1lc1xuLy8gRklYTUU6IG9wdGltaXNlIG9yIG1ha2UgdGhpcyBuaWNlcj9cbmZ1bmN0aW9uIGVsZW1lbnRhcnlOYW1lIChuYW1lKSB7XG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ2ludFsnKSkge1xuICAgIHJldHVybiAnaW50MjU2JyArIG5hbWUuc2xpY2UoMylcbiAgfSBlbHNlIGlmIChuYW1lID09PSAnaW50Jykge1xuICAgIHJldHVybiAnaW50MjU2J1xuICB9IGVsc2UgaWYgKG5hbWUuc3RhcnRzV2l0aCgndWludFsnKSkge1xuICAgIHJldHVybiAndWludDI1NicgKyBuYW1lLnNsaWNlKDQpXG4gIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3VpbnQnKSB7XG4gICAgcmV0dXJuICd1aW50MjU2J1xuICB9IGVsc2UgaWYgKG5hbWUuc3RhcnRzV2l0aCgnZml4ZWRbJykpIHtcbiAgICByZXR1cm4gJ2ZpeGVkMTI4eDEyOCcgKyBuYW1lLnNsaWNlKDUpXG4gIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiAnZml4ZWQxMjh4MTI4J1xuICB9IGVsc2UgaWYgKG5hbWUuc3RhcnRzV2l0aCgndWZpeGVkWycpKSB7XG4gICAgcmV0dXJuICd1Zml4ZWQxMjh4MTI4JyArIG5hbWUuc2xpY2UoNilcbiAgfSBlbHNlIGlmIChuYW1lID09PSAndWZpeGVkJykge1xuICAgIHJldHVybiAndWZpeGVkMTI4eDEyOCdcbiAgfVxuICByZXR1cm4gbmFtZVxufVxuXG5BQkkuZXZlbnRJRCA9IGZ1bmN0aW9uIChuYW1lLCB0eXBlcykge1xuICAvLyBGSVhNRTogdXNlIG5vZGUuanMgdXRpbC5mb3JtYXQ/XG4gIHZhciBzaWcgPSBuYW1lICsgJygnICsgdHlwZXMubWFwKGVsZW1lbnRhcnlOYW1lKS5qb2luKCcsJykgKyAnKSdcbiAgcmV0dXJuIHV0aWxzLmtlY2NhazI1NihCdWZmZXIuZnJvbShzaWcpKVxufVxuXG5BQkkubWV0aG9kSUQgPSBmdW5jdGlvbiAobmFtZSwgdHlwZXMpIHtcbiAgcmV0dXJuIEFCSS5ldmVudElEKG5hbWUsIHR5cGVzKS5zbGljZSgwLCA0KVxufVxuXG4vLyBQYXJzZSBOIGZyb20gdHlwZTxOPlxuZnVuY3Rpb24gcGFyc2VUeXBlTiAodHlwZSkge1xuICByZXR1cm4gcGFyc2VJbnQoL15cXEQrKFxcZCspJC8uZXhlYyh0eXBlKVsxXSwgMTApXG59XG5cbi8vIFBhcnNlIE4sTSBmcm9tIHR5cGU8Tj54PE0+XG5mdW5jdGlvbiBwYXJzZVR5cGVOeE0gKHR5cGUpIHtcbiAgdmFyIHRtcCA9IC9eXFxEKyhcXGQrKXgoXFxkKykkLy5leGVjKHR5cGUpXG4gIHJldHVybiBbIHBhcnNlSW50KHRtcFsxXSwgMTApLCBwYXJzZUludCh0bXBbMl0sIDEwKSBdXG59XG5cbi8vIFBhcnNlIE4gaW4gdHlwZVs8Tj5dIHdoZXJlIFwidHlwZVwiIGNhbiBpdHNlbGYgYmUgYW4gYXJyYXkgdHlwZS5cbmZ1bmN0aW9uIHBhcnNlVHlwZUFycmF5ICh0eXBlKSB7XG4gIHZhciB0bXAgPSB0eXBlLm1hdGNoKC8oLiopXFxbKC4qPylcXF0kLylcbiAgaWYgKHRtcCkge1xuICAgIHJldHVybiB0bXBbMl0gPT09ICcnID8gJ2R5bmFtaWMnIDogcGFyc2VJbnQodG1wWzJdLCAxMClcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5mdW5jdGlvbiBwYXJzZU51bWJlciAoYXJnKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGFyZ1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodXRpbHMuaXNIZXhQcmVmaXhlZChhcmcpKSB7XG4gICAgICByZXR1cm4gbmV3IEJOKHV0aWxzLnN0cmlwSGV4UHJlZml4KGFyZyksIDE2KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEJOKGFyZywgMTApXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG5ldyBCTihhcmcpXG4gIH0gZWxzZSBpZiAoYXJnLnRvQXJyYXkpIHtcbiAgICAvLyBhc3N1bWUgdGhpcyBpcyBhIEJOIGZvciB0aGUgbW9tZW50LCByZXBsYWNlIHdpdGggQk4uaXNCTiBzb29uXG4gICAgcmV0dXJuIGFyZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXJndW1lbnQgaXMgbm90IGEgbnVtYmVyJylcbiAgfVxufVxuXG4vLyBzb21lTWV0aG9kKGJ5dGVzLHVpbnQpXG4vLyBzb21lTWV0aG9kKGJ5dGVzLHVpbnQpOihib29sZWFuKVxuZnVuY3Rpb24gcGFyc2VTaWduYXR1cmUgKHNpZykge1xuICB2YXIgdG1wID0gL14oXFx3KylcXCgoLiopXFwpJC8uZXhlYyhzaWcpXG5cbiAgaWYgKHRtcC5sZW5ndGggIT09IDMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWV0aG9kIHNpZ25hdHVyZScpXG4gIH1cblxuICB2YXIgYXJncyA9IC9eKC4rKVxcKTpcXCgoLispJC8uZXhlYyh0bXBbMl0pXG5cbiAgaWYgKGFyZ3MgIT09IG51bGwgJiYgYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiB0bXBbMV0sXG4gICAgICBhcmdzOiBhcmdzWzFdLnNwbGl0KCcsJyksXG4gICAgICByZXRhcmdzOiBhcmdzWzJdLnNwbGl0KCcsJylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcmFtcyA9IHRtcFsyXS5zcGxpdCgnLCcpXG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDEgJiYgcGFyYW1zWzBdID09PSAnJykge1xuICAgICAgLy8gU3BlY2lhbC1jYXNlIChwb3NzaWJseSBuYWl2ZSkgZml4dXAgZm9yIGZ1bmN0aW9ucyB0aGF0IHRha2Ugbm8gYXJndW1lbnRzLlxuICAgICAgLy8gVE9ETzogc3BlY2lhbCBjYXNlcyBhcmUgYWx3YXlzIGJhZCwgYnV0IHRoaXMgbWFrZXMgdGhlIGZ1bmN0aW9uIHJldHVyblxuICAgICAgLy8gbWF0Y2ggd2hhdCB0aGUgY2FsbGluZyBmdW5jdGlvbnMgZXhwZWN0XG4gICAgICBwYXJhbXMgPSBbXVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiB0bXBbMV0sXG4gICAgICBhcmdzOiBwYXJhbXNcbiAgICB9XG4gIH1cbn1cblxuLy8gRW5jb2RlcyBhIHNpbmdsZSBpdGVtIChjYW4gYmUgZHluYW1pYyBhcnJheSlcbi8vIEByZXR1cm5zOiBCdWZmZXJcbmZ1bmN0aW9uIGVuY29kZVNpbmdsZSAodHlwZSwgYXJnKSB7XG4gIHZhciBzaXplLCBudW0sIHJldCwgaVxuXG4gIGlmICh0eXBlID09PSAnYWRkcmVzcycpIHtcbiAgICByZXR1cm4gZW5jb2RlU2luZ2xlKCd1aW50MTYwJywgcGFyc2VOdW1iZXIoYXJnKSlcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnYm9vbCcpIHtcbiAgICByZXR1cm4gZW5jb2RlU2luZ2xlKCd1aW50OCcsIGFyZyA/IDEgOiAwKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGVuY29kZVNpbmdsZSgnYnl0ZXMnLCBCdWZmZXIuZnJvbShhcmcsICd1dGY4JykpXG4gIH0gZWxzZSBpZiAoaXNBcnJheSh0eXBlKSkge1xuICAgIC8vIHRoaXMgcGFydCBoYW5kbGVzIGZpeGVkLWxlbmd0aCAoWzJdKSBhbmQgdmFyaWFibGUgbGVuZ3RoIChbXSkgYXJyYXlzXG4gICAgLy8gTk9URTogd2UgY2F0Y2ggaGVyZSBhbGwgY2FsbHMgdG8gYXJyYXlzLCB0aGF0IHNpbXBsaWZpZXMgdGhlIHJlc3RcbiAgICBpZiAodHlwZW9mIGFyZy5sZW5ndGggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhbiBhcnJheT8nKVxuICAgIH1cbiAgICBzaXplID0gcGFyc2VUeXBlQXJyYXkodHlwZSlcbiAgICBpZiAoc2l6ZSAhPT0gJ2R5bmFtaWMnICYmIHNpemUgIT09IDAgJiYgYXJnLmxlbmd0aCA+IHNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRWxlbWVudHMgZXhjZWVkIGFycmF5IHNpemU6ICcgKyBzaXplKVxuICAgIH1cbiAgICByZXQgPSBbXVxuICAgIHR5cGUgPSB0eXBlLnNsaWNlKDAsIHR5cGUubGFzdEluZGV4T2YoJ1snKSlcbiAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFyZyA9IEpTT04ucGFyc2UoYXJnKVxuICAgIH1cbiAgICBmb3IgKGkgaW4gYXJnKSB7XG4gICAgICByZXQucHVzaChlbmNvZGVTaW5nbGUodHlwZSwgYXJnW2ldKSlcbiAgICB9XG4gICAgaWYgKHNpemUgPT09ICdkeW5hbWljJykge1xuICAgICAgdmFyIGxlbmd0aCA9IGVuY29kZVNpbmdsZSgndWludDI1NicsIGFyZy5sZW5ndGgpXG4gICAgICByZXQudW5zaGlmdChsZW5ndGgpXG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KHJldClcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnYnl0ZXMnKSB7XG4gICAgYXJnID0gQnVmZmVyLmZyb20oYXJnKVxuXG4gICAgcmV0ID0gQnVmZmVyLmNvbmNhdChbIGVuY29kZVNpbmdsZSgndWludDI1NicsIGFyZy5sZW5ndGgpLCBhcmcgXSlcblxuICAgIGlmICgoYXJnLmxlbmd0aCAlIDMyKSAhPT0gMCkge1xuICAgICAgcmV0ID0gQnVmZmVyLmNvbmNhdChbIHJldCwgdXRpbHMuemVyb3MoMzIgLSAoYXJnLmxlbmd0aCAlIDMyKSkgXSlcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0XG4gIH0gZWxzZSBpZiAodHlwZS5zdGFydHNXaXRoKCdieXRlcycpKSB7XG4gICAgc2l6ZSA9IHBhcnNlVHlwZU4odHlwZSlcbiAgICBpZiAoc2l6ZSA8IDEgfHwgc2l6ZSA+IDMyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYnl0ZXM8Tj4gd2lkdGg6ICcgKyBzaXplKVxuICAgIH1cblxuICAgIHJldHVybiB1dGlscy5zZXRMZW5ndGhSaWdodChhcmcsIDMyKVxuICB9IGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aCgndWludCcpKSB7XG4gICAgc2l6ZSA9IHBhcnNlVHlwZU4odHlwZSlcbiAgICBpZiAoKHNpemUgJSA4KSB8fCAoc2l6ZSA8IDgpIHx8IChzaXplID4gMjU2KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVpbnQ8Tj4gd2lkdGg6ICcgKyBzaXplKVxuICAgIH1cblxuICAgIG51bSA9IHBhcnNlTnVtYmVyKGFyZylcbiAgICBpZiAobnVtLmJpdExlbmd0aCgpID4gc2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBwbGllZCB1aW50IGV4Y2VlZHMgd2lkdGg6ICcgKyBzaXplICsgJyB2cyAnICsgbnVtLmJpdExlbmd0aCgpKVxuICAgIH1cblxuICAgIGlmIChudW0gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBsaWVkIHVpbnQgaXMgbmVnYXRpdmUnKVxuICAgIH1cblxuICAgIHJldHVybiBudW0udG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMilcbiAgfSBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ2ludCcpKSB7XG4gICAgc2l6ZSA9IHBhcnNlVHlwZU4odHlwZSlcbiAgICBpZiAoKHNpemUgJSA4KSB8fCAoc2l6ZSA8IDgpIHx8IChzaXplID4gMjU2KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGludDxOPiB3aWR0aDogJyArIHNpemUpXG4gICAgfVxuXG4gICAgbnVtID0gcGFyc2VOdW1iZXIoYXJnKVxuICAgIGlmIChudW0uYml0TGVuZ3RoKCkgPiBzaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBsaWVkIGludCBleGNlZWRzIHdpZHRoOiAnICsgc2l6ZSArICcgdnMgJyArIG51bS5iaXRMZW5ndGgoKSlcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtLnRvVHdvcygyNTYpLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpXG4gIH0gZWxzZSBpZiAodHlwZS5zdGFydHNXaXRoKCd1Zml4ZWQnKSkge1xuICAgIHNpemUgPSBwYXJzZVR5cGVOeE0odHlwZSlcblxuICAgIG51bSA9IHBhcnNlTnVtYmVyKGFyZylcblxuICAgIGlmIChudW0gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBsaWVkIHVmaXhlZCBpcyBuZWdhdGl2ZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVuY29kZVNpbmdsZSgndWludDI1NicsIG51bS5tdWwobmV3IEJOKDIpLnBvdyhuZXcgQk4oc2l6ZVsxXSkpKSlcbiAgfSBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ2ZpeGVkJykpIHtcbiAgICBzaXplID0gcGFyc2VUeXBlTnhNKHR5cGUpXG5cbiAgICByZXR1cm4gZW5jb2RlU2luZ2xlKCdpbnQyNTYnLCBwYXJzZU51bWJlcihhcmcpLm11bChuZXcgQk4oMikucG93KG5ldyBCTihzaXplWzFdKSkpKVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBvciBpbnZhbGlkIHR5cGU6ICcgKyB0eXBlKVxufVxuXG4vLyBEZWNvZGVzIGEgc2luZ2xlIGl0ZW0gKGNhbiBiZSBkeW5hbWljIGFycmF5KVxuLy8gQHJldHVybnM6IGFycmF5XG4vLyBGSVhNRTogdGhpcyBtZXRob2Qgd2lsbCBuZWVkIGEgbG90IG9mIGF0dGVudGlvbiBhdCBjaGVja2luZyBsaW1pdHMgYW5kIHZhbGlkYXRpb25cbmZ1bmN0aW9uIGRlY29kZVNpbmdsZSAocGFyc2VkVHlwZSwgZGF0YSwgb2Zmc2V0KSB7XG4gIGlmICh0eXBlb2YgcGFyc2VkVHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXJzZWRUeXBlID0gcGFyc2VUeXBlKHBhcnNlZFR5cGUpXG4gIH1cbiAgdmFyIHNpemUsIG51bSwgcmV0LCBpXG5cbiAgaWYgKHBhcnNlZFR5cGUubmFtZSA9PT0gJ2FkZHJlc3MnKSB7XG4gICAgcmV0dXJuIGRlY29kZVNpbmdsZShwYXJzZWRUeXBlLnJhd1R5cGUsIGRhdGEsIG9mZnNldCkudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAyMCkudG9TdHJpbmcoJ2hleCcpXG4gIH0gZWxzZSBpZiAocGFyc2VkVHlwZS5uYW1lID09PSAnYm9vbCcpIHtcbiAgICByZXR1cm4gZGVjb2RlU2luZ2xlKHBhcnNlZFR5cGUucmF3VHlwZSwgZGF0YSwgb2Zmc2V0KS50b1N0cmluZygpID09PSBuZXcgQk4oMSkudG9TdHJpbmcoKVxuICB9IGVsc2UgaWYgKHBhcnNlZFR5cGUubmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgYnl0ZXMgPSBkZWNvZGVTaW5nbGUocGFyc2VkVHlwZS5yYXdUeXBlLCBkYXRhLCBvZmZzZXQpXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpLnRvU3RyaW5nKClcbiAgfSBlbHNlIGlmIChwYXJzZWRUeXBlLmlzQXJyYXkpIHtcbiAgICAvLyB0aGlzIHBhcnQgaGFuZGxlcyBmaXhlZC1sZW5ndGggYXJyYXlzIChbMl0pIGFuZCB2YXJpYWJsZSBsZW5ndGggKFtdKSBhcnJheXNcbiAgICAvLyBOT1RFOiB3ZSBjYXRjaCBoZXJlIGFsbCBjYWxscyB0byBhcnJheXMsIHRoYXQgc2ltcGxpZmllcyB0aGUgcmVzdFxuICAgIHJldCA9IFtdXG4gICAgc2l6ZSA9IHBhcnNlZFR5cGUuc2l6ZVxuXG4gICAgaWYgKHBhcnNlZFR5cGUuc2l6ZSA9PT0gJ2R5bmFtaWMnKSB7XG4gICAgICBvZmZzZXQgPSBkZWNvZGVTaW5nbGUoJ3VpbnQyNTYnLCBkYXRhLCBvZmZzZXQpLnRvTnVtYmVyKClcbiAgICAgIHNpemUgPSBkZWNvZGVTaW5nbGUoJ3VpbnQyNTYnLCBkYXRhLCBvZmZzZXQpLnRvTnVtYmVyKClcbiAgICAgIG9mZnNldCA9IG9mZnNldCArIDMyXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIHZhciBkZWNvZGVkID0gZGVjb2RlU2luZ2xlKHBhcnNlZFR5cGUuc3ViQXJyYXksIGRhdGEsIG9mZnNldClcbiAgICAgIHJldC5wdXNoKGRlY29kZWQpXG4gICAgICBvZmZzZXQgKz0gcGFyc2VkVHlwZS5zdWJBcnJheS5tZW1vcnlVc2FnZVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH0gZWxzZSBpZiAocGFyc2VkVHlwZS5uYW1lID09PSAnYnl0ZXMnKSB7XG4gICAgb2Zmc2V0ID0gZGVjb2RlU2luZ2xlKCd1aW50MjU2JywgZGF0YSwgb2Zmc2V0KS50b051bWJlcigpXG4gICAgc2l6ZSA9IGRlY29kZVNpbmdsZSgndWludDI1NicsIGRhdGEsIG9mZnNldCkudG9OdW1iZXIoKVxuICAgIHJldHVybiBkYXRhLnNsaWNlKG9mZnNldCArIDMyLCBvZmZzZXQgKyAzMiArIHNpemUpXG4gIH0gZWxzZSBpZiAocGFyc2VkVHlwZS5uYW1lLnN0YXJ0c1dpdGgoJ2J5dGVzJykpIHtcbiAgICByZXR1cm4gZGF0YS5zbGljZShvZmZzZXQsIG9mZnNldCArIHBhcnNlZFR5cGUuc2l6ZSlcbiAgfSBlbHNlIGlmIChwYXJzZWRUeXBlLm5hbWUuc3RhcnRzV2l0aCgndWludCcpKSB7XG4gICAgbnVtID0gbmV3IEJOKGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyAzMiksIDE2LCAnYmUnKVxuICAgIGlmIChudW0uYml0TGVuZ3RoKCkgPiBwYXJzZWRUeXBlLnNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGVjb2RlZCBpbnQgZXhjZWVkcyB3aWR0aDogJyArIHBhcnNlZFR5cGUuc2l6ZSArICcgdnMgJyArIG51bS5iaXRMZW5ndGgoKSlcbiAgICB9XG4gICAgcmV0dXJuIG51bVxuICB9IGVsc2UgaWYgKHBhcnNlZFR5cGUubmFtZS5zdGFydHNXaXRoKCdpbnQnKSkge1xuICAgIG51bSA9IG5ldyBCTihkYXRhLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgMzIpLCAxNiwgJ2JlJykuZnJvbVR3b3MoMjU2KVxuICAgIGlmIChudW0uYml0TGVuZ3RoKCkgPiBwYXJzZWRUeXBlLnNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGVjb2RlZCB1aW50IGV4Y2VlZHMgd2lkdGg6ICcgKyBwYXJzZWRUeXBlLnNpemUgKyAnIHZzICcgKyBudW0uYml0TGVuZ3RoKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bVxuICB9IGVsc2UgaWYgKHBhcnNlZFR5cGUubmFtZS5zdGFydHNXaXRoKCd1Zml4ZWQnKSkge1xuICAgIHNpemUgPSBuZXcgQk4oMikucG93KG5ldyBCTihwYXJzZWRUeXBlLnNpemVbMV0pKVxuICAgIG51bSA9IGRlY29kZVNpbmdsZSgndWludDI1NicsIGRhdGEsIG9mZnNldClcbiAgICBpZiAoIW51bS5tb2Qoc2l6ZSkuaXNaZXJvKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGVjaW1hbHMgbm90IHN1cHBvcnRlZCB5ZXQnKVxuICAgIH1cbiAgICByZXR1cm4gbnVtLmRpdihzaXplKVxuICB9IGVsc2UgaWYgKHBhcnNlZFR5cGUubmFtZS5zdGFydHNXaXRoKCdmaXhlZCcpKSB7XG4gICAgc2l6ZSA9IG5ldyBCTigyKS5wb3cobmV3IEJOKHBhcnNlZFR5cGUuc2l6ZVsxXSkpXG4gICAgbnVtID0gZGVjb2RlU2luZ2xlKCdpbnQyNTYnLCBkYXRhLCBvZmZzZXQpXG4gICAgaWYgKCFudW0ubW9kKHNpemUpLmlzWmVybygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlY2ltYWxzIG5vdCBzdXBwb3J0ZWQgeWV0JylcbiAgICB9XG4gICAgcmV0dXJuIG51bS5kaXYoc2l6ZSlcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIG9yIGludmFsaWQgdHlwZTogJyArIHBhcnNlZFR5cGUubmFtZSlcbn1cblxuLy8gUGFyc2UgdGhlIGdpdmVuIHR5cGVcbi8vIEByZXR1cm5zOiB7fSBjb250YWluaW5nIHRoZSB0eXBlIGl0c2VsZiwgbWVtb3J5IHVzYWdlIGFuZCAoaW5jbHVkaW5nIHNpemUgYW5kIHN1YkFycmF5IGlmIGFwcGxpY2FibGUpXG5mdW5jdGlvbiBwYXJzZVR5cGUgKHR5cGUpIHtcbiAgdmFyIHNpemVcbiAgdmFyIHJldFxuICBpZiAoaXNBcnJheSh0eXBlKSkge1xuICAgIHNpemUgPSBwYXJzZVR5cGVBcnJheSh0eXBlKVxuICAgIHZhciBzdWJBcnJheSA9IHR5cGUuc2xpY2UoMCwgdHlwZS5sYXN0SW5kZXhPZignWycpKVxuICAgIHN1YkFycmF5ID0gcGFyc2VUeXBlKHN1YkFycmF5KVxuICAgIHJldCA9IHtcbiAgICAgIGlzQXJyYXk6IHRydWUsXG4gICAgICBuYW1lOiB0eXBlLFxuICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgIG1lbW9yeVVzYWdlOiBzaXplID09PSAnZHluYW1pYycgPyAzMiA6IHN1YkFycmF5Lm1lbW9yeVVzYWdlICogc2l6ZSxcbiAgICAgIHN1YkFycmF5OiBzdWJBcnJheVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJhd1R5cGVcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2FkZHJlc3MnOlxuICAgICAgICByYXdUeXBlID0gJ3VpbnQxNjAnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdib29sJzpcbiAgICAgICAgcmF3VHlwZSA9ICd1aW50OCdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJhd1R5cGUgPSAnYnl0ZXMnXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHJldCA9IHtcbiAgICAgIHJhd1R5cGU6IHJhd1R5cGUsXG4gICAgICBuYW1lOiB0eXBlLFxuICAgICAgbWVtb3J5VXNhZ2U6IDMyXG4gICAgfVxuXG4gICAgaWYgKCh0eXBlLnN0YXJ0c1dpdGgoJ2J5dGVzJykgJiYgdHlwZSAhPT0gJ2J5dGVzJykgfHwgdHlwZS5zdGFydHNXaXRoKCd1aW50JykgfHwgdHlwZS5zdGFydHNXaXRoKCdpbnQnKSkge1xuICAgICAgcmV0LnNpemUgPSBwYXJzZVR5cGVOKHR5cGUpXG4gICAgfSBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ3VmaXhlZCcpIHx8IHR5cGUuc3RhcnRzV2l0aCgnZml4ZWQnKSkge1xuICAgICAgcmV0LnNpemUgPSBwYXJzZVR5cGVOeE0odHlwZSlcbiAgICB9XG5cbiAgICBpZiAodHlwZS5zdGFydHNXaXRoKCdieXRlcycpICYmIHR5cGUgIT09ICdieXRlcycgJiYgKHJldC5zaXplIDwgMSB8fCByZXQuc2l6ZSA+IDMyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGVzPE4+IHdpZHRoOiAnICsgcmV0LnNpemUpXG4gICAgfVxuICAgIGlmICgodHlwZS5zdGFydHNXaXRoKCd1aW50JykgfHwgdHlwZS5zdGFydHNXaXRoKCdpbnQnKSkgJiYgKHJldC5zaXplICUgOCB8fCByZXQuc2l6ZSA8IDggfHwgcmV0LnNpemUgPiAyNTYpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW50L3VpbnQ8Tj4gd2lkdGg6ICcgKyByZXQuc2l6ZSlcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG5cbi8vIElzIGEgdHlwZSBkeW5hbWljP1xuZnVuY3Rpb24gaXNEeW5hbWljICh0eXBlKSB7XG4gIC8vIEZJWE1FOiBoYW5kbGUgYWxsIHR5cGVzPyBJIGRvbid0IHRoaW5rIGFueXRoaW5nIGlzIG1pc3Npbmcgbm93XG4gIHJldHVybiAodHlwZSA9PT0gJ3N0cmluZycpIHx8ICh0eXBlID09PSAnYnl0ZXMnKSB8fCAocGFyc2VUeXBlQXJyYXkodHlwZSkgPT09ICdkeW5hbWljJylcbn1cblxuLy8gSXMgYSB0eXBlIGFuIGFycmF5P1xuZnVuY3Rpb24gaXNBcnJheSAodHlwZSkge1xuICByZXR1cm4gdHlwZS5sYXN0SW5kZXhPZignXScpID09PSB0eXBlLmxlbmd0aCAtIDFcbn1cblxuLy8gRW5jb2RlIGEgbWV0aG9kL2V2ZW50IHdpdGggYXJndW1lbnRzXG4vLyBAdHlwZXMgYW4gYXJyYXkgb2Ygc3RyaW5nIHR5cGUgbmFtZXNcbi8vIEBhcmdzICBhbiBhcnJheSBvZiB0aGUgYXBwcm9wcmlhdGUgdmFsdWVzXG5BQkkucmF3RW5jb2RlID0gZnVuY3Rpb24gKHR5cGVzLCB2YWx1ZXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdXG4gIHZhciBkYXRhID0gW11cblxuICB2YXIgaGVhZExlbmd0aCA9IDBcblxuICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgaWYgKGlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHZhciBzaXplID0gcGFyc2VUeXBlQXJyYXkodHlwZSlcblxuICAgICAgaWYgKHNpemUgIT09ICdkeW5hbWljJykge1xuICAgICAgICBoZWFkTGVuZ3RoICs9IDMyICogc2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGVhZExlbmd0aCArPSAzMlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkTGVuZ3RoICs9IDMyXG4gICAgfVxuICB9KVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHlwZSA9IGVsZW1lbnRhcnlOYW1lKHR5cGVzW2ldKVxuICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpXVxuICAgIHZhciBjdXIgPSBlbmNvZGVTaW5nbGUodHlwZSwgdmFsdWUpXG5cbiAgICAvLyBVc2UgdGhlIGhlYWQvdGFpbCBtZXRob2QgZm9yIHN0b3JpbmcgZHluYW1pYyBkYXRhXG4gICAgaWYgKGlzRHluYW1pYyh0eXBlKSkge1xuICAgICAgb3V0cHV0LnB1c2goZW5jb2RlU2luZ2xlKCd1aW50MjU2JywgaGVhZExlbmd0aCkpXG4gICAgICBkYXRhLnB1c2goY3VyKVxuICAgICAgaGVhZExlbmd0aCArPSBjdXIubGVuZ3RoXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKGN1cilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXRwdXQuY29uY2F0KGRhdGEpKVxufVxuXG5BQkkucmF3RGVjb2RlID0gZnVuY3Rpb24gKHR5cGVzLCBkYXRhKSB7XG4gIHZhciByZXQgPSBbXVxuICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSlcbiAgdmFyIG9mZnNldCA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0eXBlID0gZWxlbWVudGFyeU5hbWUodHlwZXNbaV0pXG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlVHlwZSh0eXBlLCBkYXRhLCBvZmZzZXQpXG4gICAgdmFyIGRlY29kZWQgPSBkZWNvZGVTaW5nbGUocGFyc2VkLCBkYXRhLCBvZmZzZXQpXG4gICAgb2Zmc2V0ICs9IHBhcnNlZC5tZW1vcnlVc2FnZVxuICAgIHJldC5wdXNoKGRlY29kZWQpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5BQkkuc2ltcGxlRW5jb2RlID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuc2xpY2UoMSlcbiAgdmFyIHNpZyA9IHBhcnNlU2lnbmF0dXJlKG1ldGhvZClcblxuICAvLyBGSVhNRTogdmFsaWRhdGUvY29udmVydCBhcmd1bWVudHNcbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSBzaWcuYXJncy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IGNvdW50IG1pc21hdGNoJylcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KFsgQUJJLm1ldGhvZElEKHNpZy5tZXRob2QsIHNpZy5hcmdzKSwgQUJJLnJhd0VuY29kZShzaWcuYXJncywgYXJncykgXSlcbn1cblxuQUJJLnNpbXBsZURlY29kZSA9IGZ1bmN0aW9uIChtZXRob2QsIGRhdGEpIHtcbiAgdmFyIHNpZyA9IHBhcnNlU2lnbmF0dXJlKG1ldGhvZClcblxuICAvLyBGSVhNRTogdmFsaWRhdGUvY29udmVydCBhcmd1bWVudHNcbiAgaWYgKCFzaWcucmV0YXJncykge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gcmV0dXJuIHZhbHVlcyBpbiBtZXRob2QnKVxuICB9XG5cbiAgcmV0dXJuIEFCSS5yYXdEZWNvZGUoc2lnLnJldGFyZ3MsIGRhdGEpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeSAodHlwZSwgdmFsdWUpIHtcbiAgaWYgKHR5cGUuc3RhcnRzV2l0aCgnYWRkcmVzcycpIHx8IHR5cGUuc3RhcnRzV2l0aCgnYnl0ZXMnKSkge1xuICAgIHJldHVybiAnMHgnICsgdmFsdWUudG9TdHJpbmcoJ2hleCcpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKClcbiAgfVxufVxuXG5BQkkuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKHR5cGVzLCB2YWx1ZXMpIHtcbiAgdmFyIHJldCA9IFtdXG5cbiAgZm9yICh2YXIgaSBpbiB0eXBlcykge1xuICAgIHZhciB0eXBlID0gdHlwZXNbaV1cbiAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbaV1cblxuICAgIC8vIGlmIGl0IGlzIGFuIGFycmF5IHR5cGUsIGNvbmNhdCB0aGUgaXRlbXNcbiAgICBpZiAoL15bXlxcW10rXFxbLipcXF0kLy50ZXN0KHR5cGUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5KHR5cGUsIGl0ZW0pXG4gICAgICB9KS5qb2luKCcsICcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gc3RyaW5naWZ5KHR5cGUsIHZhbHVlKVxuICAgIH1cblxuICAgIHJldC5wdXNoKHZhbHVlKVxuICB9XG5cbiAgcmV0dXJuIHJldFxufVxuXG5BQkkuc29saWRpdHlIZXhWYWx1ZSA9IGZ1bmN0aW9uICh0eXBlLCB2YWx1ZSwgYml0c2l6ZSkge1xuICAvLyBwYXNzIGluIGJpdHNpemUgPSBudWxsIGlmIHVzZSBkZWZhdWx0IGJpdHNpemVcbiAgdmFyIHNpemUsIG51bVxuICBpZiAoaXNBcnJheSh0eXBlKSkge1xuICAgIHZhciBzdWJUeXBlID0gdHlwZS5yZXBsYWNlKC9cXFsuKj9cXF0vLCAnJylcbiAgICBpZiAoIWlzQXJyYXkoc3ViVHlwZSkpIHtcbiAgICAgIHZhciBhcnJheVNpemUgPSBwYXJzZVR5cGVBcnJheSh0eXBlKVxuICAgICAgaWYgKGFycmF5U2l6ZSAhPT0gJ2R5bmFtaWMnICYmIGFycmF5U2l6ZSAhPT0gMCAmJiB2YWx1ZS5sZW5ndGggPiBhcnJheVNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbGVtZW50cyBleGNlZWQgYXJyYXkgc2l6ZTogJyArIGFycmF5U2l6ZSlcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGFycmF5VmFsdWVzID0gdmFsdWUubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gQUJJLnNvbGlkaXR5SGV4VmFsdWUoc3ViVHlwZSwgdiwgMjU2KVxuICAgIH0pXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYXJyYXlWYWx1ZXMpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2J5dGVzJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCAndXRmOCcpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Jvb2wnKSB7XG4gICAgYml0c2l6ZSA9IGJpdHNpemUgfHwgOFxuICAgIHZhciBwYWRkaW5nID0gQXJyYXkoKGJpdHNpemUpIC8gNCkuam9pbignMCcpXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlID8gcGFkZGluZyArICcxJyA6IHBhZGRpbmcgKyAnMCcsICdoZXgnKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdhZGRyZXNzJykge1xuICAgIHZhciBieXRlc2l6ZSA9IDIwXG4gICAgaWYgKGJpdHNpemUpIHtcbiAgICAgIGJ5dGVzaXplID0gYml0c2l6ZSAvIDhcbiAgICB9XG4gICAgcmV0dXJuIHV0aWxzLnNldExlbmd0aExlZnQodmFsdWUsIGJ5dGVzaXplKVxuICB9IGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aCgnYnl0ZXMnKSkge1xuICAgIHNpemUgPSBwYXJzZVR5cGVOKHR5cGUpXG4gICAgaWYgKHNpemUgPCAxIHx8IHNpemUgPiAzMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGVzPE4+IHdpZHRoOiAnICsgc2l6ZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuc2V0TGVuZ3RoUmlnaHQodmFsdWUsIHNpemUpXG4gIH0gZWxzZSBpZiAodHlwZS5zdGFydHNXaXRoKCd1aW50JykpIHtcbiAgICBzaXplID0gcGFyc2VUeXBlTih0eXBlKVxuICAgIGlmICgoc2l6ZSAlIDgpIHx8IChzaXplIDwgOCkgfHwgKHNpemUgPiAyNTYpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdWludDxOPiB3aWR0aDogJyArIHNpemUpXG4gICAgfVxuXG4gICAgbnVtID0gcGFyc2VOdW1iZXIodmFsdWUpXG4gICAgaWYgKG51bS5iaXRMZW5ndGgoKSA+IHNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcGxpZWQgdWludCBleGNlZWRzIHdpZHRoOiAnICsgc2l6ZSArICcgdnMgJyArIG51bS5iaXRMZW5ndGgoKSlcbiAgICB9XG5cbiAgICBiaXRzaXplID0gYml0c2l6ZSB8fCBzaXplXG4gICAgcmV0dXJuIG51bS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIGJpdHNpemUgLyA4KVxuICB9IGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aCgnaW50JykpIHtcbiAgICBzaXplID0gcGFyc2VUeXBlTih0eXBlKVxuICAgIGlmICgoc2l6ZSAlIDgpIHx8IChzaXplIDwgOCkgfHwgKHNpemUgPiAyNTYpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW50PE4+IHdpZHRoOiAnICsgc2l6ZSlcbiAgICB9XG5cbiAgICBudW0gPSBwYXJzZU51bWJlcih2YWx1ZSlcbiAgICBpZiAobnVtLmJpdExlbmd0aCgpID4gc2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBwbGllZCBpbnQgZXhjZWVkcyB3aWR0aDogJyArIHNpemUgKyAnIHZzICcgKyBudW0uYml0TGVuZ3RoKCkpXG4gICAgfVxuXG4gICAgYml0c2l6ZSA9IGJpdHNpemUgfHwgc2l6ZVxuICAgIHJldHVybiBudW0udG9Ud29zKHNpemUpLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgYml0c2l6ZSAvIDgpXG4gIH0gZWxzZSB7XG4gICAgLy8gRklYTUU6IHN1cHBvcnQgYWxsIG90aGVyIHR5cGVzXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBvciBpbnZhbGlkIHR5cGU6ICcgKyB0eXBlKVxuICB9XG59XG5cbkFCSS5zb2xpZGl0eVBhY2sgPSBmdW5jdGlvbiAodHlwZXMsIHZhbHVlcykge1xuICBpZiAodHlwZXMubGVuZ3RoICE9PSB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOdW1iZXIgb2YgdHlwZXMgYXJlIG5vdCBtYXRjaGluZyB0aGUgdmFsdWVzJylcbiAgfVxuXG4gIHZhciByZXQgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHlwZSA9IGVsZW1lbnRhcnlOYW1lKHR5cGVzW2ldKVxuICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpXVxuICAgIHJldC5wdXNoKEFCSS5zb2xpZGl0eUhleFZhbHVlKHR5cGUsIHZhbHVlLCBudWxsKSlcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KHJldClcbn1cblxuQUJJLnNvbGlkaXR5U0hBMyA9IGZ1bmN0aW9uICh0eXBlcywgdmFsdWVzKSB7XG4gIHJldHVybiB1dGlscy5rZWNjYWsyNTYoQUJJLnNvbGlkaXR5UGFjayh0eXBlcywgdmFsdWVzKSlcbn1cblxuQUJJLnNvbGlkaXR5U0hBMjU2ID0gZnVuY3Rpb24gKHR5cGVzLCB2YWx1ZXMpIHtcbiAgcmV0dXJuIHV0aWxzLnNoYTI1NihBQkkuc29saWRpdHlQYWNrKHR5cGVzLCB2YWx1ZXMpKVxufVxuXG5BQkkuc29saWRpdHlSSVBFTUQxNjAgPSBmdW5jdGlvbiAodHlwZXMsIHZhbHVlcykge1xuICByZXR1cm4gdXRpbHMucmlwZW1kMTYwKEFCSS5zb2xpZGl0eVBhY2sodHlwZXMsIHZhbHVlcyksIHRydWUpXG59XG5cbi8vIFNlcnBlbnQncyB1c2VycyBhcmUgZmFtaWxpYXIgd2l0aCB0aGlzIGVuY29kaW5nXG4vLyAtIHM6IHN0cmluZ1xuLy8gLSBiOiBieXRlc1xuLy8gLSBiPE4+OiBieXRlczxOPlxuLy8gLSBpOiBpbnQyNTZcbi8vIC0gYTogaW50MjU2W11cblxuZnVuY3Rpb24gaXNOdW1lcmljIChjKSB7XG4gIC8vIEZJWE1FOiBpcyB0aGlzIGNvcnJlY3Q/IFNlZW1zIHRvIHdvcmtcbiAgcmV0dXJuIChjID49ICcwJykgJiYgKGMgPD0gJzknKVxufVxuXG4vLyBGb3IgYSBcImRvY3VtZW50YXRpb25cIiByZWZlciB0byBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vc2VycGVudC9ibG9iL2RldmVsb3AvcHJlcHJvY2Vzcy5jcHBcbkFCSS5mcm9tU2VycGVudCA9IGZ1bmN0aW9uIChzaWcpIHtcbiAgdmFyIHJldCA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHR5cGUgPSBzaWdbaV1cbiAgICBpZiAodHlwZSA9PT0gJ3MnKSB7XG4gICAgICByZXQucHVzaCgnYnl0ZXMnKVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2InKSB7XG4gICAgICB2YXIgdG1wID0gJ2J5dGVzJ1xuICAgICAgdmFyIGogPSBpICsgMVxuICAgICAgd2hpbGUgKChqIDwgc2lnLmxlbmd0aCkgJiYgaXNOdW1lcmljKHNpZ1tqXSkpIHtcbiAgICAgICAgdG1wICs9IHNpZ1tqXSAtICcwJ1xuICAgICAgICBqKytcbiAgICAgIH1cbiAgICAgIGkgPSBqIC0gMVxuICAgICAgcmV0LnB1c2godG1wKVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2knKSB7XG4gICAgICByZXQucHVzaCgnaW50MjU2JylcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdhJykge1xuICAgICAgcmV0LnB1c2goJ2ludDI1NltdJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBvciBpbnZhbGlkIHR5cGU6ICcgKyB0eXBlKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkFCSS50b1NlcnBlbnQgPSBmdW5jdGlvbiAodHlwZXMpIHtcbiAgdmFyIHJldCA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVzW2ldXG4gICAgaWYgKHR5cGUgPT09ICdieXRlcycpIHtcbiAgICAgIHJldC5wdXNoKCdzJylcbiAgICB9IGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aCgnYnl0ZXMnKSkge1xuICAgICAgcmV0LnB1c2goJ2InICsgcGFyc2VUeXBlTih0eXBlKSlcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpbnQyNTYnKSB7XG4gICAgICByZXQucHVzaCgnaScpXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnaW50MjU2W10nKSB7XG4gICAgICByZXQucHVzaCgnYScpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgb3IgaW52YWxpZCB0eXBlOiAnICsgdHlwZSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldC5qb2luKCcnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFCSVxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5CdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBCdWZmZXIgPSB3aW5kb3cuQnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0IDwgbnVtYmVyLmxlbmd0aCkge1xuICAgICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQsIGVuZGlhbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgICAgIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgICAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleDRCaXRzIChzdHJpbmcsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG4gICAgLy8gJ0EnIC0gJ0YnXG4gICAgaWYgKGMgPj0gNjUgJiYgYyA8PSA3MCkge1xuICAgICAgcmV0dXJuIGMgLSA1NTtcbiAgICAvLyAnYScgLSAnZidcbiAgICB9IGVsc2UgaWYgKGMgPj0gOTcgJiYgYyA8PSAxMDIpIHtcbiAgICAgIHJldHVybiBjIC0gODc7XG4gICAgLy8gJzAnIC0gJzknXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoYyAtIDQ4KSAmIDB4ZjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhleEJ5dGUgKHN0cmluZywgbG93ZXJCb3VuZCwgaW5kZXgpIHtcbiAgICB2YXIgciA9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGluZGV4IC0gMSA+PSBsb3dlckJvdW5kKSB7XG4gICAgICByIHw9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCAtIDEpIDw8IDQ7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCwgZW5kaWFuKSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgLy8gMjQtYml0cyBjaHVua3NcbiAgICB2YXIgb2ZmID0gMDtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgaSAtPSAyKSB7XG4gICAgICAgIHcgPSBwYXJzZUhleEJ5dGUobnVtYmVyLCBzdGFydCwgaSkgPDwgb2ZmO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgJiAweDNmZmZmZmY7XG4gICAgICAgIGlmIChvZmYgPj0gMTgpIHtcbiAgICAgICAgICBvZmYgLT0gMTg7XG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA+Pj4gMjY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmICs9IDg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnNlTGVuZ3RoID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgZm9yIChpID0gcGFyc2VMZW5ndGggJSAyID09PSAwID8gc3RhcnQgKyAxIDogc3RhcnQ7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIEJOIHY1IGluc3RhbmNlXG4gICAgICAgIHIuX3N0cmlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbXBvcnRQdWJsaWMgPSBleHBvcnRzLnByaXZhdGVUb1B1YmxpYyA9IGV4cG9ydHMucHJpdmF0ZVRvQWRkcmVzcyA9IGV4cG9ydHMucHVibGljVG9BZGRyZXNzID0gZXhwb3J0cy5wdWJUb0FkZHJlc3MgPSBleHBvcnRzLmlzVmFsaWRQdWJsaWMgPSBleHBvcnRzLmlzVmFsaWRQcml2YXRlID0gZXhwb3J0cy5pc1ByZWNvbXBpbGVkID0gZXhwb3J0cy5nZW5lcmF0ZUFkZHJlc3MyID0gZXhwb3J0cy5nZW5lcmF0ZUFkZHJlc3MgPSBleHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBleHBvcnRzLnRvQ2hlY2tzdW1BZGRyZXNzID0gZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyA9IGV4cG9ydHMuemVyb0FkZHJlc3MgPSB2b2lkIDA7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgZXRoanNVdGlsID0gcmVxdWlyZSgnZXRoanMtdXRpbCcpO1xudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJy4vc2VjcDI1NmsxdjMtYWRhcHRlcicpO1xudmFyIEJOID0gcmVxdWlyZShcImJuLmpzXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbnZhciBoYXNoXzEgPSByZXF1aXJlKFwiLi9oYXNoXCIpO1xuLyoqXG4gKiBSZXR1cm5zIGEgemVybyBhZGRyZXNzLlxuICovXG5leHBvcnRzLnplcm9BZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhZGRyZXNzTGVuZ3RoID0gMjA7XG4gICAgdmFyIGFkZHIgPSBieXRlc18xLnplcm9zKGFkZHJlc3NMZW5ndGgpO1xuICAgIHJldHVybiBieXRlc18xLmJ1ZmZlclRvSGV4KGFkZHIpO1xufTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQuIEFjY2VwdHMgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIHRvby5cbiAqL1xuZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgcmV0dXJuIC9eMHhbMC05YS1mQS1GXXs0MH0kLy50ZXN0KGFkZHJlc3MpO1xufTtcbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gYWRkcmVzcyBpcyBhIHplcm8gYWRkcmVzcy5cbiAqL1xuZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICB2YXIgemVyb0FkZHIgPSBleHBvcnRzLnplcm9BZGRyZXNzKCk7XG4gICAgcmV0dXJuIHplcm9BZGRyID09PSBieXRlc18xLmFkZEhleFByZWZpeChhZGRyZXNzKTtcbn07XG4vKipcbiAqIFJldHVybnMgYSBjaGVja3N1bW1lZCBhZGRyZXNzLlxuICpcbiAqIElmIGEgZWlwMTE5MUNoYWluSWQgaXMgcHJvdmlkZWQsIHRoZSBjaGFpbklkIHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIGNoZWNrc3VtIGNhbGN1bGF0aW9uLiBUaGlzXG4gKiBoYXMgdGhlIGVmZmVjdCBvZiBjaGVja3N1bW1lZCBhZGRyZXNzZXMgZm9yIG9uZSBjaGFpbiBoYXZpbmcgaW52YWxpZCBjaGVja3N1bXMgZm9yIG90aGVycy5cbiAqIEZvciBtb3JlIGRldGFpbHMsIGNvbnN1bHQgRUlQLTExOTEuXG4gKlxuICogV0FSTklORzogQ2hlY2tzdW1zIHdpdGggYW5kIHdpdGhvdXQgdGhlIGNoYWluSWQgd2lsbCBkaWZmZXIuIEFzIG9mIDIwMTktMDYtMjYsIHRoZSBtb3N0IGNvbW1vbmx5XG4gKiB1c2VkIHZhcmlhdGlvbiBpbiBFdGhlcmV1bSB3YXMgd2l0aG91dCB0aGUgY2hhaW5JZC4gVGhpcyBtYXkgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG4gKi9cbmV4cG9ydHMudG9DaGVja3N1bUFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcywgZWlwMTE5MUNoYWluSWQpIHtcbiAgICBhZGRyZXNzID0gZXRoanNVdGlsLnN0cmlwSGV4UHJlZml4KGFkZHJlc3MpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIHByZWZpeCA9IGVpcDExOTFDaGFpbklkICE9PSB1bmRlZmluZWQgPyBlaXAxMTkxQ2hhaW5JZC50b1N0cmluZygpICsgJzB4JyA6ICcnO1xuICAgIHZhciBoYXNoID0gaGFzaF8xLmtlY2NhayhwcmVmaXggKyBhZGRyZXNzKS50b1N0cmluZygnaGV4Jyk7XG4gICAgdmFyIHJldCA9ICcweCc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZGRyZXNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJzZUludChoYXNoW2ldLCAxNikgPj0gOCkge1xuICAgICAgICAgICAgcmV0ICs9IGFkZHJlc3NbaV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldCArPSBhZGRyZXNzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGFkZHJlc3MgaXMgYSB2YWxpZCBjaGVja3N1bW1lZCBhZGRyZXNzLlxuICpcbiAqIFNlZSB0b0NoZWNrc3VtQWRkcmVzcycgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscyBhYm91dCB0aGUgZWlwMTE5MUNoYWluSWQgcGFyYW1ldGVyLlxuICovXG5leHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcywgZWlwMTE5MUNoYWluSWQpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzKSAmJiBleHBvcnRzLnRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MsIGVpcDExOTFDaGFpbklkKSA9PT0gYWRkcmVzcztcbn07XG4vKipcbiAqIEdlbmVyYXRlcyBhbiBhZGRyZXNzIG9mIGEgbmV3bHkgY3JlYXRlZCBjb250cmFjdC5cbiAqIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAqIEBwYXJhbSBub25jZSBUaGUgbm9uY2Ugb2YgdGhlIGZyb20gYWNjb3VudFxuICovXG5leHBvcnRzLmdlbmVyYXRlQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tLCBub25jZSkge1xuICAgIGZyb20gPSBieXRlc18xLnRvQnVmZmVyKGZyb20pO1xuICAgIHZhciBub25jZUJOID0gbmV3IEJOKG5vbmNlKTtcbiAgICBpZiAobm9uY2VCTi5pc1plcm8oKSkge1xuICAgICAgICAvLyBpbiBSTFAgd2Ugd2FudCB0byBlbmNvZGUgbnVsbCBpbiB0aGUgY2FzZSBvZiB6ZXJvIG5vbmNlXG4gICAgICAgIC8vIHJlYWQgdGhlIFJMUCBkb2N1bWVudGF0aW9uIGZvciBhbiBhbnN3ZXIgaWYgeW91IGRhcmVcbiAgICAgICAgcmV0dXJuIGhhc2hfMS5ybHBoYXNoKFtmcm9tLCBudWxsXSkuc2xpY2UoLTIwKTtcbiAgICB9XG4gICAgLy8gT25seSB0YWtlIHRoZSBsb3dlciAxNjBiaXRzIG9mIHRoZSBoYXNoXG4gICAgcmV0dXJuIGhhc2hfMS5ybHBoYXNoKFtmcm9tLCBCdWZmZXIuZnJvbShub25jZUJOLnRvQXJyYXkoKSldKS5zbGljZSgtMjApO1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGFuIGFkZHJlc3MgZm9yIGEgY29udHJhY3QgY3JlYXRlZCB1c2luZyBDUkVBVEUyLlxuICogQHBhcmFtIGZyb20gVGhlIGFkZHJlc3Mgd2hpY2ggaXMgY3JlYXRpbmcgdGhpcyBuZXcgYWRkcmVzc1xuICogQHBhcmFtIHNhbHQgQSBzYWx0XG4gKiBAcGFyYW0gaW5pdENvZGUgVGhlIGluaXQgY29kZSBvZiB0aGUgY29udHJhY3QgYmVpbmcgY3JlYXRlZFxuICovXG5leHBvcnRzLmdlbmVyYXRlQWRkcmVzczIgPSBmdW5jdGlvbiAoZnJvbSwgc2FsdCwgaW5pdENvZGUpIHtcbiAgICB2YXIgZnJvbUJ1ZiA9IGJ5dGVzXzEudG9CdWZmZXIoZnJvbSk7XG4gICAgdmFyIHNhbHRCdWYgPSBieXRlc18xLnRvQnVmZmVyKHNhbHQpO1xuICAgIHZhciBpbml0Q29kZUJ1ZiA9IGJ5dGVzXzEudG9CdWZmZXIoaW5pdENvZGUpO1xuICAgIGFzc2VydChmcm9tQnVmLmxlbmd0aCA9PT0gMjApO1xuICAgIGFzc2VydChzYWx0QnVmLmxlbmd0aCA9PT0gMzIpO1xuICAgIHZhciBhZGRyZXNzID0gaGFzaF8xLmtlY2NhazI1NihCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbSgnZmYnLCAnaGV4JyksIGZyb21CdWYsIHNhbHRCdWYsIGhhc2hfMS5rZWNjYWsyNTYoaW5pdENvZGVCdWYpXSkpO1xuICAgIHJldHVybiBhZGRyZXNzLnNsaWNlKC0yMCk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHN1cHBsaWVkIGFkZHJlc3MgYmVsb25ncyB0byBhIHByZWNvbXBpbGVkIGFjY291bnQgKEJ5emFudGl1bSkuXG4gKi9cbmV4cG9ydHMuaXNQcmVjb21waWxlZCA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgdmFyIGEgPSBieXRlc18xLnVucGFkKGFkZHJlc3MpO1xuICAgIHJldHVybiBhLmxlbmd0aCA9PT0gMSAmJiBhWzBdID49IDEgJiYgYVswXSA8PSA4O1xufTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBwcml2YXRlIGtleSBzYXRpc2ZpZXMgdGhlIHJ1bGVzIG9mIHRoZSBjdXJ2ZSBzZWNwMjU2azEuXG4gKi9cbmV4cG9ydHMuaXNWYWxpZFByaXZhdGUgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBzZWNwMjU2azEucHJpdmF0ZUtleVZlcmlmeShwcml2YXRlS2V5KTtcbn07XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHVibGljIGtleSBzYXRpc2ZpZXMgdGhlIHJ1bGVzIG9mIHRoZSBjdXJ2ZSBzZWNwMjU2azFcbiAqIGFuZCB0aGUgcmVxdWlyZW1lbnRzIG9mIEV0aGVyZXVtLlxuICogQHBhcmFtIHB1YmxpY0tleSBUaGUgdHdvIHBvaW50cyBvZiBhbiB1bmNvbXByZXNzZWQga2V5LCB1bmxlc3Mgc2FuaXRpemUgaXMgZW5hYmxlZFxuICogQHBhcmFtIHNhbml0aXplIEFjY2VwdCBwdWJsaWMga2V5cyBpbiBvdGhlciBmb3JtYXRzXG4gKi9cbmV4cG9ydHMuaXNWYWxpZFB1YmxpYyA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIHNhbml0aXplKSB7XG4gICAgaWYgKHNhbml0aXplID09PSB2b2lkIDApIHsgc2FuaXRpemUgPSBmYWxzZTsgfVxuICAgIGlmIChwdWJsaWNLZXkubGVuZ3RoID09PSA2NCkge1xuICAgICAgICAvLyBDb252ZXJ0IHRvIFNFQzEgZm9yIHNlY3AyNTZrMVxuICAgICAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbNF0pLCBwdWJsaWNLZXldKSk7XG4gICAgfVxuICAgIGlmICghc2FuaXRpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShwdWJsaWNLZXkpO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHB1YmxpYyBrZXkuXG4gKiBBY2NlcHRzIFwiRXRoZXJldW0gcHVibGljIGtleXNcIiBhbmQgU0VDMSBlbmNvZGVkIGtleXMuXG4gKiBAcGFyYW0gcHViS2V5IFRoZSB0d28gcG9pbnRzIG9mIGFuIHVuY29tcHJlc3NlZCBrZXksIHVubGVzcyBzYW5pdGl6ZSBpcyBlbmFibGVkXG4gKiBAcGFyYW0gc2FuaXRpemUgQWNjZXB0IHB1YmxpYyBrZXlzIGluIG90aGVyIGZvcm1hdHNcbiAqL1xuZXhwb3J0cy5wdWJUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHViS2V5LCBzYW5pdGl6ZSkge1xuICAgIGlmIChzYW5pdGl6ZSA9PT0gdm9pZCAwKSB7IHNhbml0aXplID0gZmFsc2U7IH1cbiAgICBwdWJLZXkgPSBieXRlc18xLnRvQnVmZmVyKHB1YktleSk7XG4gICAgaWYgKHNhbml0aXplICYmIHB1YktleS5sZW5ndGggIT09IDY0KSB7XG4gICAgICAgIHB1YktleSA9IHNlY3AyNTZrMS5wdWJsaWNLZXlDb252ZXJ0KHB1YktleSwgZmFsc2UpLnNsaWNlKDEpO1xuICAgIH1cbiAgICBhc3NlcnQocHViS2V5Lmxlbmd0aCA9PT0gNjQpO1xuICAgIC8vIE9ubHkgdGFrZSB0aGUgbG93ZXIgMTYwYml0cyBvZiB0aGUgaGFzaFxuICAgIHJldHVybiBoYXNoXzEua2VjY2FrKHB1YktleSkuc2xpY2UoLTIwKTtcbn07XG5leHBvcnRzLnB1YmxpY1RvQWRkcmVzcyA9IGV4cG9ydHMucHViVG9BZGRyZXNzO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBldGhlcmV1bSBhZGRyZXNzIG9mIGEgZ2l2ZW4gcHJpdmF0ZSBrZXkuXG4gKiBAcGFyYW0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICovXG5leHBvcnRzLnByaXZhdGVUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBleHBvcnRzLnB1YmxpY1RvQWRkcmVzcyhleHBvcnRzLnByaXZhdGVUb1B1YmxpYyhwcml2YXRlS2V5KSk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBldGhlcmV1bSBwdWJsaWMga2V5IG9mIGEgZ2l2ZW4gcHJpdmF0ZSBrZXkuXG4gKiBAcGFyYW0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICovXG5leHBvcnRzLnByaXZhdGVUb1B1YmxpYyA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgcHJpdmF0ZUtleSA9IGJ5dGVzXzEudG9CdWZmZXIocHJpdmF0ZUtleSk7XG4gICAgLy8gc2tpcCB0aGUgdHlwZSBmbGFnIGFuZCB1c2UgdGhlIFgsIFkgcG9pbnRzXG4gICAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlDcmVhdGUocHJpdmF0ZUtleSwgZmFsc2UpLnNsaWNlKDEpO1xufTtcbi8qKlxuICogQ29udmVydHMgYSBwdWJsaWMga2V5IHRvIHRoZSBFdGhlcmV1bSBmb3JtYXQuXG4gKi9cbmV4cG9ydHMuaW1wb3J0UHVibGljID0gZnVuY3Rpb24gKHB1YmxpY0tleSkge1xuICAgIHB1YmxpY0tleSA9IGJ5dGVzXzEudG9CdWZmZXIocHVibGljS2V5KTtcbiAgICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gNjQpIHtcbiAgICAgICAgcHVibGljS2V5ID0gc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQocHVibGljS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG4gICAgfVxuICAgIHJldHVybiBwdWJsaWNLZXk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3VudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYmFUb0pTT04gPSBleHBvcnRzLmFkZEhleFByZWZpeCA9IGV4cG9ydHMudG9VbnNpZ25lZCA9IGV4cG9ydHMuZnJvbVNpZ25lZCA9IGV4cG9ydHMuYnVmZmVyVG9IZXggPSBleHBvcnRzLmJ1ZmZlclRvSW50ID0gZXhwb3J0cy50b0J1ZmZlciA9IGV4cG9ydHMuc3RyaXBaZXJvcyA9IGV4cG9ydHMudW5wYWQgPSBleHBvcnRzLnNldExlbmd0aFJpZ2h0ID0gZXhwb3J0cy5zZXRMZW5ndGggPSBleHBvcnRzLnNldExlbmd0aExlZnQgPSBleHBvcnRzLnplcm9zID0gdm9pZCAwO1xudmFyIGV0aGpzVXRpbCA9IHJlcXVpcmUoJ2V0aGpzLXV0aWwnKTtcbnZhciBCTiA9IHJlcXVpcmUoXCJibi5qc1wiKTtcbi8qKlxuICogUmV0dXJucyBhIGJ1ZmZlciBmaWxsZWQgd2l0aCAwcy5cbiAqIEBwYXJhbSBieXRlcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBidWZmZXIgc2hvdWxkIGJlXG4gKi9cbmV4cG9ydHMuemVyb3MgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jVW5zYWZlKGJ5dGVzKS5maWxsKDApO1xufTtcbi8qKlxuICogTGVmdCBQYWRzIGFuIGBBcnJheWAgb3IgYEJ1ZmZlcmAgd2l0aCBsZWFkaW5nIHplcm9zIHRpbGwgaXQgaGFzIGBsZW5ndGhgIGJ5dGVzLlxuICogT3IgaXQgdHJ1bmNhdGVzIHRoZSBiZWdpbm5pbmcgaWYgaXQgZXhjZWVkcy5cbiAqIEBwYXJhbSBtc2cgdGhlIHZhbHVlIHRvIHBhZCAoQnVmZmVyfEFycmF5KVxuICogQHBhcmFtIGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcGFyYW0gcmlnaHQgd2hldGhlciB0byBzdGFydCBwYWRkaW5nIGZvcm0gdGhlIGxlZnQgb3IgcmlnaHRcbiAqIEByZXR1cm4gKEJ1ZmZlcnxBcnJheSlcbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhMZWZ0ID0gZnVuY3Rpb24gKG1zZywgbGVuZ3RoLCByaWdodCkge1xuICAgIGlmIChyaWdodCA9PT0gdm9pZCAwKSB7IHJpZ2h0ID0gZmFsc2U7IH1cbiAgICB2YXIgYnVmID0gZXhwb3J0cy56ZXJvcyhsZW5ndGgpO1xuICAgIG1zZyA9IGV4cG9ydHMudG9CdWZmZXIobXNnKTtcbiAgICBpZiAocmlnaHQpIHtcbiAgICAgICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG1zZy5jb3B5KGJ1Zik7XG4gICAgICAgICAgICByZXR1cm4gYnVmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtc2cuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChtc2cubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBtc2cuY29weShidWYsIGxlbmd0aCAtIG1zZy5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXNnLnNsaWNlKC1sZW5ndGgpO1xuICAgIH1cbn07XG5leHBvcnRzLnNldExlbmd0aCA9IGV4cG9ydHMuc2V0TGVuZ3RoTGVmdDtcbi8qKlxuICogUmlnaHQgUGFkcyBhbiBgQXJyYXlgIG9yIGBCdWZmZXJgIHdpdGggbGVhZGluZyB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIE9yIGl0IHRydW5jYXRlcyB0aGUgYmVnaW5uaW5nIGlmIGl0IGV4Y2VlZHMuXG4gKiBAcGFyYW0gbXNnIHRoZSB2YWx1ZSB0byBwYWQgKEJ1ZmZlcnxBcnJheSlcbiAqIEBwYXJhbSBsZW5ndGggdGhlIG51bWJlciBvZiBieXRlcyB0aGUgb3V0cHV0IHNob3VsZCBiZVxuICogQHJldHVybiAoQnVmZmVyfEFycmF5KVxuICovXG5leHBvcnRzLnNldExlbmd0aFJpZ2h0ID0gZnVuY3Rpb24gKG1zZywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuc2V0TGVuZ3RoKG1zZywgbGVuZ3RoLCB0cnVlKTtcbn07XG4vKipcbiAqIFRyaW1zIGxlYWRpbmcgemVyb3MgZnJvbSBhIGBCdWZmZXJgIG9yIGFuIGBBcnJheWAuXG4gKiBAcGFyYW0gYSAoQnVmZmVyfEFycmF5fFN0cmluZylcbiAqIEByZXR1cm4gKEJ1ZmZlcnxBcnJheXxTdHJpbmcpXG4gKi9cbmV4cG9ydHMudW5wYWQgPSBmdW5jdGlvbiAoYSkge1xuICAgIGEgPSBldGhqc1V0aWwuc3RyaXBIZXhQcmVmaXgoYSk7XG4gICAgdmFyIGZpcnN0ID0gYVswXTtcbiAgICB3aGlsZSAoYS5sZW5ndGggPiAwICYmIGZpcnN0LnRvU3RyaW5nKCkgPT09ICcwJykge1xuICAgICAgICBhID0gYS5zbGljZSgxKTtcbiAgICAgICAgZmlyc3QgPSBhWzBdO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn07XG5leHBvcnRzLnN0cmlwWmVyb3MgPSBleHBvcnRzLnVucGFkO1xuLyoqXG4gKiBBdHRlbXB0cyB0byB0dXJuIGEgdmFsdWUgaW50byBhIGBCdWZmZXJgLiBBcyBpbnB1dCBpdCBzdXBwb3J0cyBgQnVmZmVyYCwgYFN0cmluZ2AsIGBOdW1iZXJgLCBudWxsL3VuZGVmaW5lZCwgYEJOYCBhbmQgb3RoZXIgb2JqZWN0cyB3aXRoIGEgYHRvQXJyYXkoKWAgbWV0aG9kLlxuICogQHBhcmFtIHYgdGhlIHZhbHVlXG4gKi9cbmV4cG9ydHMudG9CdWZmZXIgPSBmdW5jdGlvbiAodikge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHYpKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgICAgICB2ID0gQnVmZmVyLmZyb20odik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoZXRoanNVdGlsLmlzSGV4U3RyaW5nKHYpKSB7XG4gICAgICAgICAgICAgICAgdiA9IEJ1ZmZlci5mcm9tKGV0aGpzVXRpbC5wYWRUb0V2ZW4oZXRoanNVdGlsLnN0cmlwSGV4UHJlZml4KHYpKSwgJ2hleCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbnZlcnQgc3RyaW5nIHRvIGJ1ZmZlci4gdG9CdWZmZXIgb25seSBzdXBwb3J0cyAweC1wcmVmaXhlZCBoZXggc3RyaW5ncyBhbmQgdGhpcyBzdHJpbmcgd2FzIGdpdmVuOiBcIiArIHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdiA9IGV0aGpzVXRpbC5pbnRUb0J1ZmZlcih2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChCTi5pc0JOKHYpKSB7XG4gICAgICAgICAgICB2ID0gdi50b0FycmF5TGlrZShCdWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHYudG9BcnJheSkge1xuICAgICAgICAgICAgLy8gY29udmVydHMgYSBCTiB0byBhIEJ1ZmZlclxuICAgICAgICAgICAgdiA9IEJ1ZmZlci5mcm9tKHYudG9BcnJheSgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0eXBlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHY7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIHRvIGEgYE51bWJlcmAuXG4gKiBAcGFyYW0gYnVmIGBCdWZmZXJgIG9iamVjdCB0byBjb252ZXJ0XG4gKiBAdGhyb3dzIElmIHRoZSBpbnB1dCBudW1iZXIgZXhjZWVkcyA1MyBiaXRzLlxuICovXG5leHBvcnRzLmJ1ZmZlclRvSW50ID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIHJldHVybiBuZXcgQk4oZXhwb3J0cy50b0J1ZmZlcihidWYpKS50b051bWJlcigpO1xufTtcbi8qKlxuICogQ29udmVydHMgYSBgQnVmZmVyYCBpbnRvIGEgYDB4YC1wcmVmaXhlZCBoZXggYFN0cmluZ2AuXG4gKiBAcGFyYW0gYnVmIGBCdWZmZXJgIG9iamVjdCB0byBjb252ZXJ0XG4gKi9cbmV4cG9ydHMuYnVmZmVyVG9IZXggPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgYnVmID0gZXhwb3J0cy50b0J1ZmZlcihidWYpO1xuICAgIHJldHVybiAnMHgnICsgYnVmLnRvU3RyaW5nKCdoZXgnKTtcbn07XG4vKipcbiAqIEludGVycHJldHMgYSBgQnVmZmVyYCBhcyBhIHNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGEgYEJOYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0gbnVtIFNpZ25lZCBpbnRlZ2VyIHZhbHVlXG4gKi9cbmV4cG9ydHMuZnJvbVNpZ25lZCA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICByZXR1cm4gbmV3IEJOKG51bSkuZnJvbVR3b3MoMjU2KTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgYEJOYCB0byBhbiB1bnNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0IGFzIGEgYEJ1ZmZlcmAuIEFzc3VtZXMgMjU2LWJpdCBudW1iZXJzLlxuICogQHBhcmFtIG51bVxuICovXG5leHBvcnRzLnRvVW5zaWduZWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKG51bS50b1R3b3MoMjU2KS50b0FycmF5KCkpO1xufTtcbi8qKlxuICogQWRkcyBcIjB4XCIgdG8gYSBnaXZlbiBgU3RyaW5nYCBpZiBpdCBkb2VzIG5vdCBhbHJlYWR5IHN0YXJ0IHdpdGggXCIweFwiLlxuICovXG5leHBvcnRzLmFkZEhleFByZWZpeCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIGV0aGpzVXRpbC5pc0hleFByZWZpeGVkKHN0cikgPyBzdHIgOiAnMHgnICsgc3RyO1xufTtcbi8qKlxuICogQ29udmVydHMgYSBgQnVmZmVyYCBvciBgQXJyYXlgIHRvIEpTT04uXG4gKiBAcGFyYW0gYmEgKEJ1ZmZlcnxBcnJheSlcbiAqIEByZXR1cm4gKEFycmF5fFN0cmluZ3xudWxsKVxuICovXG5leHBvcnRzLmJhVG9KU09OID0gZnVuY3Rpb24gKGJhKSB7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihiYSkpIHtcbiAgICAgICAgcmV0dXJuIFwiMHhcIiArIGJhLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYmEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJyYXkucHVzaChleHBvcnRzLmJhVG9KU09OKGJhW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUCA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TID0gZXhwb3J0cy5UV09fUE9XMjU2ID0gZXhwb3J0cy5NQVhfSU5URUdFUiA9IHZvaWQgMDtcbnZhciBCTiA9IHJlcXVpcmUoXCJibi5qc1wiKTtcbi8qKlxuICogVGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhpcyBWTSBjYW4gaGFuZGxlXG4gKi9cbmV4cG9ydHMuTUFYX0lOVEVHRVIgPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnLCAxNik7XG4vKipcbiAqIDJeMjU2XG4gKi9cbmV4cG9ydHMuVFdPX1BPVzI1NiA9IG5ldyBCTignMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLCAxNik7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUyA9ICdjNWQyNDYwMTg2ZjcyMzNjOTI3ZTdkYjJkY2M3MDNjMGU1MDBiNjUzY2E4MjI3M2I3YmZhZDgwNDVkODVhNDcwJztcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfTlVMTCA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUywgJ2hleCcpO1xuLyoqXG4gKiBLZWNjYWstMjU2IG9mIGFuIFJMUCBvZiBhbiBlbXB0eSBhcnJheVxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9STFBfQVJSQVlfUyA9ICcxZGNjNGRlOGRlYzc1ZDdhYWI4NWI1NjdiNmNjZDQxYWQzMTI0NTFiOTQ4YTc0MTNmMGExNDJmZDQwZDQ5MzQ3Jztcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZID0gQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MsICdoZXgnKTtcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9STFBfUyA9ICc1NmU4MWYxNzFiY2M1NWE2ZmY4MzQ1ZTY5MmMwZjg2ZTViNDhlMDFiOTk2Y2FkYzAwMTYyMmZiNWUzNjNiNDIxJztcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9STFAgPSBCdWZmZXIuZnJvbShleHBvcnRzLktFQ0NBSzI1Nl9STFBfUywgJ2hleCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ybHBoYXNoID0gZXhwb3J0cy5yaXBlbWQxNjAgPSBleHBvcnRzLnNoYTI1NiA9IGV4cG9ydHMua2VjY2FrMjU2ID0gZXhwb3J0cy5rZWNjYWsgPSB2b2lkIDA7XG52YXIgX2EgPSByZXF1aXJlKCdldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrJyksIGtlY2NhazIyNCA9IF9hLmtlY2NhazIyNCwga2VjY2FrMzg0ID0gX2Eua2VjY2FrMzg0LCBrMjU2ID0gX2Eua2VjY2FrMjU2LCBrZWNjYWs1MTIgPSBfYS5rZWNjYWs1MTI7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgZXRoanNVdGlsID0gcmVxdWlyZSgnZXRoanMtdXRpbCcpO1xudmFyIHJscCA9IHJlcXVpcmUoXCJybHBcIik7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xuLyoqXG4gKiBDcmVhdGVzIEtlY2NhayBoYXNoIG9mIHRoZSBpbnB1dFxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKEJ1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyKSBJZiB0aGUgc3RyaW5nIGlzIGEgMHgtcHJlZml4ZWQgaGV4IHZhbHVlXG4gKiBpdCdzIGludGVycHJldGVkIGFzIGhleGFkZWNpbWFsLCBvdGhlcndpc2UgYXMgdXRmOC5cbiAqIEBwYXJhbSBiaXRzIFRoZSBLZWNjYWsgd2lkdGhcbiAqL1xuZXhwb3J0cy5rZWNjYWsgPSBmdW5jdGlvbiAoYSwgYml0cykge1xuICAgIGlmIChiaXRzID09PSB2b2lkIDApIHsgYml0cyA9IDI1NjsgfVxuICAgIGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycgJiYgIWV0aGpzVXRpbC5pc0hleFN0cmluZyhhKSkge1xuICAgICAgICBhID0gQnVmZmVyLmZyb20oYSwgJ3V0ZjgnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGEgPSBieXRlc18xLnRvQnVmZmVyKGEpO1xuICAgIH1cbiAgICBpZiAoIWJpdHMpXG4gICAgICAgIGJpdHMgPSAyNTY7XG4gICAgc3dpdGNoIChiaXRzKSB7XG4gICAgICAgIGNhc2UgMjI0OiB7XG4gICAgICAgICAgICByZXR1cm4ga2VjY2FrMjI0KGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjU2OiB7XG4gICAgICAgICAgICByZXR1cm4gazI1NihhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM4NDoge1xuICAgICAgICAgICAgcmV0dXJuIGtlY2NhazM4NChhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDUxMjoge1xuICAgICAgICAgICAgcmV0dXJuIGtlY2NhazUxMihhKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGQgYWxnb3JpdGhtOiBrZWNjYWtcIiArIGJpdHMpO1xuICAgICAgICB9XG4gICAgfVxufTtcbi8qKlxuICogQ3JlYXRlcyBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIGlucHV0LCBhbGlhcyBmb3Iga2VjY2FrKGEsIDI1NikuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoQnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXIpXG4gKi9cbmV4cG9ydHMua2VjY2FrMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5rZWNjYWsoYSk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIFNIQTI1NiBoYXNoIG9mIHRoZSBpbnB1dC5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcilcbiAqL1xuZXhwb3J0cy5zaGEyNTYgPSBmdW5jdGlvbiAoYSkge1xuICAgIGEgPSBieXRlc18xLnRvQnVmZmVyKGEpO1xuICAgIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKVxuICAgICAgICAudXBkYXRlKGEpXG4gICAgICAgIC5kaWdlc3QoKTtcbn07XG4vKipcbiAqIENyZWF0ZXMgUklQRU1EMTYwIGhhc2ggb2YgdGhlIGlucHV0LlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKEJ1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyKVxuICogQHBhcmFtIHBhZGRlZCBXaGV0aGVyIGl0IHNob3VsZCBiZSBwYWRkZWQgdG8gMjU2IGJpdHMgb3Igbm90XG4gKi9cbmV4cG9ydHMucmlwZW1kMTYwID0gZnVuY3Rpb24gKGEsIHBhZGRlZCkge1xuICAgIGEgPSBieXRlc18xLnRvQnVmZmVyKGEpO1xuICAgIHZhciBoYXNoID0gY3JlYXRlSGFzaCgncm1kMTYwJylcbiAgICAgICAgLnVwZGF0ZShhKVxuICAgICAgICAuZGlnZXN0KCk7XG4gICAgaWYgKHBhZGRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gYnl0ZXNfMS5zZXRMZW5ndGgoaGFzaCwgMzIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxufTtcbi8qKlxuICogQ3JlYXRlcyBTSEEtMyBoYXNoIG9mIHRoZSBSTFAgZW5jb2RlZCB2ZXJzaW9uIG9mIHRoZSBpbnB1dC5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhXG4gKi9cbmV4cG9ydHMucmxwaGFzaCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMua2VjY2FrKHJscC5lbmNvZGUoYSkpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2guanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlY3AyNTZrMSA9IGV4cG9ydHMucmxwID0gZXhwb3J0cy5CTiA9IHZvaWQgMDtcbnZhciBzZWNwMjU2azEgPSByZXF1aXJlKCcuL3NlY3AyNTZrMXYzLWFkYXB0ZXInKTtcbmV4cG9ydHMuc2VjcDI1NmsxID0gc2VjcDI1NmsxO1xudmFyIGV0aGpzVXRpbCA9IHJlcXVpcmUoJ2V0aGpzLXV0aWwnKTtcbnZhciBCTiA9IHJlcXVpcmUoXCJibi5qc1wiKTtcbmV4cG9ydHMuQk4gPSBCTjtcbnZhciBybHAgPSByZXF1aXJlKFwicmxwXCIpO1xuZXhwb3J0cy5ybHAgPSBybHA7XG5PYmplY3QuYXNzaWduKGV4cG9ydHMsIGV0aGpzVXRpbCk7XG4vKipcbiAqIENvbnN0YW50c1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogUHVibGljLWtleSBjcnlwdG9ncmFwaHkgKHNlY3AyNTZrMSkgYW5kIGFkZHJlc3Nlc1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWNjb3VudFwiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEhhc2ggZnVuY3Rpb25zXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oYXNoXCIpLCBleHBvcnRzKTtcbi8qKlxuICogRUNEU0Egc2lnbmF0dXJlXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zaWduYXR1cmVcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBCdWZmZXJzLCBieXRlIGFycmF5cywgZXRjLlxuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYnl0ZXNcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBGdW5jdGlvbiBmb3IgZGVmaW5pbmluZyBwcm9wZXJ0aWVzIG9uIGFuIG9iamVjdFxuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb2JqZWN0XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gdm9pZCAwO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIGV0aGpzVXRpbCA9IHJlcXVpcmUoJ2V0aGpzLXV0aWwnKTtcbnZhciBybHAgPSByZXF1aXJlKFwicmxwXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbi8qKlxuICogRGVmaW5lcyBwcm9wZXJ0aWVzIG9uIGEgYE9iamVjdGAuIEl0IG1ha2UgdGhlIGFzc3VtcHRpb24gdGhhdCB1bmRlcmx5aW5nIGRhdGEgaXMgYmluYXJ5LlxuICogQHBhcmFtIHNlbGYgdGhlIGBPYmplY3RgIHRvIGRlZmluZSBwcm9wZXJ0aWVzIG9uXG4gKiBAcGFyYW0gZmllbGRzIGFuIGFycmF5IGZpZWxkcyB0byBkZWZpbmUuIEZpZWxkcyBjYW4gY29udGFpbjpcbiAqICogYG5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnRpZXNcbiAqICogYGxlbmd0aGAgLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBmaWVsZCBjYW4gaGF2ZVxuICogKiBgYWxsb3dMZXNzYCAtIGlmIHRoZSBmaWVsZCBjYW4gYmUgbGVzcyB0aGFuIHRoZSBsZW5ndGhcbiAqICogYGFsbG93RW1wdHlgXG4gKiBAcGFyYW0gZGF0YSBkYXRhIHRvIGJlIHZhbGlkYXRlZCBhZ2FpbnN0IHRoZSBkZWZpbml0aW9uc1xuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHNlbGYsIGZpZWxkcywgZGF0YSkge1xuICAgIHNlbGYucmF3ID0gW107XG4gICAgc2VsZi5fZmllbGRzID0gW107XG4gICAgLy8gYXR0YWNoIHRoZSBgdG9KU09OYFxuICAgIHNlbGYudG9KU09OID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgIGlmIChsYWJlbCA9PT0gdm9pZCAwKSB7IGxhYmVsID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICB2YXIgb2JqXzEgPSB7fTtcbiAgICAgICAgICAgIHNlbGYuX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIG9ial8xW2ZpZWxkXSA9IFwiMHhcIiArIHNlbGZbZmllbGRdLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG9ial8xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieXRlc18xLmJhVG9KU09OKHNlbGYucmF3KTtcbiAgICB9O1xuICAgIHNlbGYuc2VyaWFsaXplID0gZnVuY3Rpb24gc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4gcmxwLmVuY29kZShzZWxmLnJhdyk7XG4gICAgfTtcbiAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQsIGkpIHtcbiAgICAgICAgc2VsZi5fZmllbGRzLnB1c2goZmllbGQubmFtZSk7XG4gICAgICAgIGZ1bmN0aW9uIGdldHRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnJhd1tpXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZXR0ZXIodikge1xuICAgICAgICAgICAgdiA9IGJ5dGVzXzEudG9CdWZmZXIodik7XG4gICAgICAgICAgICBpZiAodi50b1N0cmluZygnaGV4JykgPT09ICcwMCcgJiYgIWZpZWxkLmFsbG93WmVybykge1xuICAgICAgICAgICAgICAgIHYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmllbGQuYWxsb3dMZXNzICYmIGZpZWxkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHYgPSBieXRlc18xLnN0cmlwWmVyb3Modik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZpZWxkLmxlbmd0aCA+PSB2Lmxlbmd0aCwgXCJUaGUgZmllbGQgXCIgKyBmaWVsZC5uYW1lICsgXCIgbXVzdCBub3QgaGF2ZSBtb3JlIFwiICsgZmllbGQubGVuZ3RoICsgXCIgYnl0ZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghKGZpZWxkLmFsbG93WmVybyAmJiB2Lmxlbmd0aCA9PT0gMCkgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZpZWxkLmxlbmd0aCA9PT0gdi5sZW5ndGgsIFwiVGhlIGZpZWxkIFwiICsgZmllbGQubmFtZSArIFwiIG11c3QgaGF2ZSBieXRlIGxlbmd0aCBvZiBcIiArIGZpZWxkLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnJhd1tpXSA9IHY7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIGZpZWxkLm5hbWUsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgIHNldDogc2V0dGVyLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZpZWxkLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIHNlbGZbZmllbGQubmFtZV0gPSBmaWVsZC5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGF0dGFjaCBhbGlhc1xuICAgICAgICBpZiAoZmllbGQuYWxpYXMpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBmaWVsZC5hbGlhcywge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gaWYgdGhlIGNvbnN0dWN0b3IgaXMgcGFzc2VkIGRhdGFcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20oZXRoanNVdGlsLnN0cmlwSGV4UHJlZml4KGRhdGEpLCAnaGV4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAgICAgZGF0YSA9IHJscC5kZWNvZGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNlbGYuX2ZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIG51bWJlciBvZiBmaWVsZHMgaW4gZGF0YScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGFsbCB0aGUgaXRlbXMgYXJlIGJ1ZmZlcnNcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgICAgIHNlbGZbc2VsZi5fZmllbGRzW2ldXSA9IGJ5dGVzXzEudG9CdWZmZXIoZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHZhciBrZXlzXzEgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlzXzEuaW5kZXhPZihmaWVsZC5uYW1lKSAhPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHNlbGZbZmllbGQubmFtZV0gPSBkYXRhW2ZpZWxkLm5hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChrZXlzXzEuaW5kZXhPZihmaWVsZC5hbGlhcykgIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBzZWxmW2ZpZWxkLmFsaWFzXSA9IGRhdGFbZmllbGQuYWxpYXNdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgZGF0YScpO1xuICAgICAgICB9XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZWNkaFVuc2FmZSA9IGV4cG9ydHMuZWNkaCA9IGV4cG9ydHMucmVjb3ZlciA9IGV4cG9ydHMudmVyaWZ5ID0gZXhwb3J0cy5zaWduID0gZXhwb3J0cy5zaWduYXR1cmVJbXBvcnRMYXggPSBleHBvcnRzLnNpZ25hdHVyZUltcG9ydCA9IGV4cG9ydHMuc2lnbmF0dXJlRXhwb3J0ID0gZXhwb3J0cy5zaWduYXR1cmVOb3JtYWxpemUgPSBleHBvcnRzLnB1YmxpY0tleUNvbWJpbmUgPSBleHBvcnRzLnB1YmxpY0tleVR3ZWFrTXVsID0gZXhwb3J0cy5wdWJsaWNLZXlUd2Vha0FkZCA9IGV4cG9ydHMucHVibGljS2V5VmVyaWZ5ID0gZXhwb3J0cy5wdWJsaWNLZXlDb252ZXJ0ID0gZXhwb3J0cy5wdWJsaWNLZXlDcmVhdGUgPSBleHBvcnRzLnByaXZhdGVLZXlUd2Vha011bCA9IGV4cG9ydHMucHJpdmF0ZUtleVR3ZWFrQWRkID0gZXhwb3J0cy5wcml2YXRlS2V5TW9kSW52ZXJzZSA9IGV4cG9ydHMucHJpdmF0ZUtleU5lZ2F0ZSA9IGV4cG9ydHMucHJpdmF0ZUtleUltcG9ydCA9IGV4cG9ydHMucHJpdmF0ZUtleUV4cG9ydCA9IGV4cG9ydHMucHJpdmF0ZUtleVZlcmlmeSA9IHZvaWQgMDtcbnZhciBzZWNwMjU2azEgPSByZXF1aXJlKCdldGhlcmV1bS1jcnlwdG9ncmFwaHkvc2VjcDI1NmsxJyk7XG52YXIgc2VjcDI1NmsxdjMgPSByZXF1aXJlKCcuL3NlY3AyNTZrMXYzLWxpYi9pbmRleCcpO1xudmFyIGRlciA9IHJlcXVpcmUoJy4vc2VjcDI1NmsxdjMtbGliL2RlcicpO1xuLyoqXG4gKiBWZXJpZnkgYW4gRUNEU0EgcHJpdmF0ZUtleVxuICogQG1ldGhvZCBwcml2YXRlS2V5VmVyaWZ5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0cy5wcml2YXRlS2V5VmVyaWZ5ID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwcml2YXRlS2V5IGxlbmd0aCBpcyBub3QgMzJcbiAgICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHNlY3AyNTZrMS5wcml2YXRlS2V5VmVyaWZ5KFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSk7XG59O1xuLyoqXG4gKiBFeHBvcnQgYSBwcml2YXRlS2V5IGluIERFUiBmb3JtYXRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleUV4cG9ydFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0cy5wcml2YXRlS2V5RXhwb3J0ID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwcml2YXRlS2V5IGxlbmd0aCBpcyBub3QgMzJcbiAgICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwcml2YXRlIGtleSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICB2YXIgcHVibGljS2V5ID0gc2VjcDI1NmsxdjMucHJpdmF0ZUtleUV4cG9ydChwcml2YXRlS2V5LCBjb21wcmVzc2VkKTtcbiAgICByZXR1cm4gZGVyLnByaXZhdGVLZXlFeHBvcnQocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKTtcbn07XG4vKipcbiAqIEltcG9ydCBhIHByaXZhdGVLZXkgaW4gREVSIGZvcm1hdFxuICogQG1ldGhvZCBwcml2YXRlS2V5SW1wb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVLZXlJbXBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgIC8vIHByaXZhdGVLZXlJbXBvcnQgbWV0aG9kIGlzIG5vdCBwYXJ0IG9mIHNlY3AyNTZrMSB2NCBwYWNrYWdlXG4gICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICAgIHByaXZhdGVLZXkgPSBkZXIucHJpdmF0ZUtleUltcG9ydChwcml2YXRlS2V5KTtcbiAgICBpZiAocHJpdmF0ZUtleSAhPT0gbnVsbCAmJiBwcml2YXRlS2V5Lmxlbmd0aCA9PT0gMzIgJiYgZXhwb3J0cy5wcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpKSB7XG4gICAgICAgIHJldHVybiBwcml2YXRlS2V5O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZG4ndCBpbXBvcnQgZnJvbSBERVIgZm9ybWF0XCIpO1xufTtcbi8qKlxuICogTmVnYXRlIGEgcHJpdmF0ZUtleSBieSBzdWJ0cmFjdGluZyBpdCBmcm9tIHRoZSBvcmRlciBvZiB0aGUgY3VydmUncyBiYXNlIHBvaW50XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlOZWdhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucHJpdmF0ZUtleU5lZ2F0ZSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5TmVnYXRlKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSkpO1xufTtcbi8qKlxuICogQ29tcHV0ZSB0aGUgaW52ZXJzZSBvZiBhIHByaXZhdGVLZXkgKG1vZHVsbyB0aGUgb3JkZXIgb2YgdGhlIGN1cnZlJ3MgYmFzZSBwb2ludCkuXG4gKiBAbWV0aG9kIHByaXZhdGVLZXlNb2RJbnZlcnNlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVLZXlNb2RJbnZlcnNlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJpdmF0ZSBrZXkgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMXYzLnByaXZhdGVLZXlNb2RJbnZlcnNlKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSkpO1xufTtcbi8qKlxuICogVHdlYWsgYSBwcml2YXRlS2V5IGJ5IGFkZGluZyB0d2VhayB0byBpdC5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrQWRkXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucHJpdmF0ZUtleVR3ZWFrQWRkID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIHR3ZWFrKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtBZGQoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB0d2VhaykpO1xufTtcbi8qKlxuICogVHdlYWsgYSBwcml2YXRlS2V5IGJ5IG11bHRpcGx5aW5nIGl0IGJ5IGEgdHdlYWsuXG4gKiBAbWV0aG9kIHByaXZhdGVLZXlUd2Vha011bFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSB0d2Vha1xuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVLZXlUd2Vha011bCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5LCB0d2Vhaykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHJpdmF0ZUtleVR3ZWFrTXVsKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgVWludDhBcnJheS5mcm9tKHR3ZWFrKSkpO1xufTtcbi8qKlxuICogQ29tcHV0ZSB0aGUgcHVibGljIGtleSBmb3IgYSBwcml2YXRlS2V5LlxuICogQG1ldGhvZCBwdWJsaWNLZXlDcmVhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJsaWNLZXlDcmVhdGUgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5Q3JlYXRlKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgY29tcHJlc3NlZCkpO1xufTtcbi8qKlxuICogQ29udmVydCBhIHB1YmxpY0tleSB0byBjb21wcmVzc2VkIG9yIHVuY29tcHJlc3NlZCBmb3JtLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb252ZXJ0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJsaWNLZXlDb252ZXJ0ID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgY29tcHJlc3NlZCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5Q29udmVydChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgY29tcHJlc3NlZCkpO1xufTtcbi8qKlxuICogVmVyaWZ5IGFuIEVDRFNBIHB1YmxpY0tleS5cbiAqIEBtZXRob2QgcHVibGljS2V5VmVyaWZ5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnRzLnB1YmxpY0tleVZlcmlmeSA9IGZ1bmN0aW9uIChwdWJsaWNLZXkpIHtcbiAgICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwdWJsaWNLZXkgbGVuZ3RoIGlzIG5vdCAzMyBvciA2NVxuICAgIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSAzMyAmJiBwdWJsaWNLZXkubGVuZ3RoICE9PSA2NSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzZWNwMjU2azEucHVibGljS2V5VmVyaWZ5KFVpbnQ4QXJyYXkuZnJvbShwdWJsaWNLZXkpKTtcbn07XG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IGFkZGluZyB0d2VhayB0aW1lcyB0aGUgZ2VuZXJhdG9yIHRvIGl0LlxuICogQG1ldGhvZCBwdWJsaWNLZXlUd2Vha0FkZFxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJsaWNLZXlUd2Vha0FkZCA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIHR3ZWFrLCBjb21wcmVzc2VkKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wdWJsaWNLZXlUd2Vha0FkZChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHR3ZWFrKSwgY29tcHJlc3NlZCkpO1xufTtcbi8qKlxuICogVHdlYWsgYSBwdWJsaWNLZXkgYnkgbXVsdGlwbHlpbmcgaXQgYnkgYSB0d2VhayB2YWx1ZVxuICogQG1ldGhvZCBwdWJsaWNLZXlUd2Vha011bFxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJsaWNLZXlUd2Vha011bCA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIHR3ZWFrLCBjb21wcmVzc2VkKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wdWJsaWNLZXlUd2Vha011bChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHR3ZWFrKSwgY29tcHJlc3NlZCkpO1xufTtcbi8qKlxuICogQWRkIGEgZ2l2ZW4gcHVibGljS2V5cyB0b2dldGhlci5cbiAqIEBtZXRob2QgcHVibGljS2V5Q29tYmluZVxuICogQHBhcmFtIHtBcnJheTxCdWZmZXI+fSBwdWJsaWNLZXlzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJsaWNLZXlDb21iaW5lID0gZnVuY3Rpb24gKHB1YmxpY0tleXMsIGNvbXByZXNzZWQpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIHB1YmxpY0tleXMuZm9yRWFjaChmdW5jdGlvbiAocHVibGljS2V5KSB7XG4gICAgICAgIGtleXMucHVzaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wdWJsaWNLZXlDb21iaW5lKGtleXMsIGNvbXByZXNzZWQpKTtcbn07XG4vKipcbiAqIENvbnZlcnQgYSBzaWduYXR1cmUgdG8gYSBub3JtYWxpemVkIGxvd2VyLVMgZm9ybS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlTm9ybWFsaXplXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2lnbmF0dXJlTm9ybWFsaXplID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlTm9ybWFsaXplKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuLyoqXG4gKiBTZXJpYWxpemUgYW4gRUNEU0Egc2lnbmF0dXJlIGluIERFUiBmb3JtYXQuXG4gKiBAbWV0aG9kIHNpZ25hdHVyZUV4cG9ydFxuICogQHBhcmFtIHtCdWZmZXJ9IHNpZ25hdHVyZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnNpZ25hdHVyZUV4cG9ydCA9IGZ1bmN0aW9uIChzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnNpZ25hdHVyZUV4cG9ydChVaW50OEFycmF5LmZyb20oc2lnbmF0dXJlKSkpO1xufTtcbi8qKlxuICogUGFyc2UgYSBERVIgRUNEU0Egc2lnbmF0dXJlIChmb2xsb3cgYnkgW0JJUDY2XShodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDY2Lm1lZGlhd2lraSkpLlxuICogQG1ldGhvZCBzaWduYXR1cmVJbXBvcnRcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5zaWduYXR1cmVJbXBvcnQgPSBmdW5jdGlvbiAoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5zaWduYXR1cmVJbXBvcnQoVWludDhBcnJheS5mcm9tKHNpZ25hdHVyZSkpKTtcbn07XG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAobm90IGZvbGxvdyBieSBbQklQNjZdKGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNjYubWVkaWF3aWtpKSkuXG4gKiBAbWV0aG9kIHNpZ25hdHVyZUltcG9ydExheFxuICogQHBhcmFtIHtCdWZmZXJ9IHNpZ25hdHVyZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnNpZ25hdHVyZUltcG9ydExheCA9IGZ1bmN0aW9uIChzaWduYXR1cmUpIHtcbiAgICAvLyBzaWduYXR1cmVJbXBvcnRMYXggbWV0aG9kIGlzIG5vdCBwYXJ0IG9mIHNlY3AyNTZrMSB2NCBwYWNrYWdlXG4gICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICAgIC8vIGVuc3VyZSB0aGF0IHNpZ25hdHVyZSBpcyBncmVhdGVyIHRoYW4gMFxuICAgIGlmIChzaWduYXR1cmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdzaWduYXR1cmUgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgdmFyIHNpZ09iaiA9IGRlci5zaWduYXR1cmVJbXBvcnRMYXgoc2lnbmF0dXJlKTtcbiAgICBpZiAoc2lnT2JqID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvdWxkbid0IHBhcnNlIERFUiBzaWduYXR1cmVcIik7XG4gICAgfVxuICAgIHJldHVybiBzZWNwMjU2azF2My5zaWduYXR1cmVJbXBvcnQoc2lnT2JqKTtcbn07XG4vKipcbiAqIENyZWF0ZSBhbiBFQ0RTQSBzaWduYXR1cmUuIEFsd2F5cyByZXR1cm4gbG93LVMgc2lnbmF0dXJlLlxuICogQG1ldGhvZCBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWVzc2FnZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2lnbiA9IGZ1bmN0aW9uIChtZXNzYWdlLCBwcml2YXRlS2V5LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBzaG91bGQgYmUgYW4gT2JqZWN0Jyk7XG4gICAgfVxuICAgIHZhciBzaWduT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBzaWduT3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5kYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyB2YWxpZGF0ZSBvcHRpb24uZGF0YSBsZW5ndGhcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMuZGF0YSBzaG91bGQgYmUgYSBCdWZmZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kYXRhLmxlbmd0aCAhPSAzMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvcHRpb25zLmRhdGEgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpZ25PcHRpb25zLmRhdGEgPSBuZXcgVWludDhBcnJheShvcHRpb25zLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm5vbmNlZm4gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMubm9uY2VmbiBzaG91bGQgYmUgYSBGdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm5vbmNlZm4pIHtcbiAgICAgICAgICAgIC8vIGNvbnZlcnQgb3B0aW9uLm5vbmNlZm4gZnVuY3Rpb24gc2lnbmF0dXJlXG4gICAgICAgICAgICBzaWduT3B0aW9ucy5ub25jZWZuID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHByaXZhdGVLZXksIGFsZ28sIGRhdGEsIGF0dGVtcHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyQWxnbyA9IGFsZ28gIT0gbnVsbCA/IEJ1ZmZlci5mcm9tKGFsZ28pIDogbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyRGF0YSA9IGRhdGEgIT0gbnVsbCA/IEJ1ZmZlci5mcm9tKGRhdGEpIDogbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gQnVmZmVyLmZyb20oJycpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm5vbmNlZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gb3B0aW9ucy5ub25jZWZuKEJ1ZmZlci5mcm9tKG1lc3NhZ2UpLCBCdWZmZXIuZnJvbShwcml2YXRlS2V5KSwgYnVmZmVyQWxnbywgYnVmZmVyRGF0YSwgYXR0ZW1wdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc2lnID0gc2VjcDI1NmsxLmVjZHNhU2lnbihVaW50OEFycmF5LmZyb20obWVzc2FnZSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgc2lnbk9wdGlvbnMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNpZ25hdHVyZTogQnVmZmVyLmZyb20oc2lnLnNpZ25hdHVyZSksXG4gICAgICAgIHJlY292ZXJ5OiBzaWcucmVjaWQsXG4gICAgfTtcbn07XG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHZlcmlmeVxuICogQHBhcmFtIHtCdWZmZXJ9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydHMudmVyaWZ5ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHNpZ25hdHVyZSwgcHVibGljS2V5KSB7XG4gICAgcmV0dXJuIHNlY3AyNTZrMS5lY2RzYVZlcmlmeShVaW50OEFycmF5LmZyb20oc2lnbmF0dXJlKSwgVWludDhBcnJheS5mcm9tKG1lc3NhZ2UpLCBwdWJsaWNLZXkpO1xufTtcbi8qKlxuICogUmVjb3ZlciBhbiBFQ0RTQSBwdWJsaWMga2V5IGZyb20gYSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHJlY292ZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcGFyYW0ge051bWJlcn0gcmVjaWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnJlY292ZXIgPSBmdW5jdGlvbiAobWVzc2FnZSwgc2lnbmF0dXJlLCByZWNpZCwgY29tcHJlc3NlZCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkc2FSZWNvdmVyKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpLCByZWNpZCwgVWludDhBcnJheS5mcm9tKG1lc3NhZ2UpLCBjb21wcmVzc2VkKSk7XG59O1xuLyoqXG4gKiBDb21wdXRlIGFuIEVDIERpZmZpZS1IZWxsbWFuIHNlY3JldCBhbmQgYXBwbGllZCBzaGEyNTYgdG8gY29tcHJlc3NlZCBwdWJsaWMga2V5LlxuICogQG1ldGhvZCBlY2RoXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmVjZGggPSBmdW5jdGlvbiAocHVibGljS2V5LCBwcml2YXRlS2V5KSB7XG4gICAgLy8gbm90ZTogc2VjcDI1NmsxIHYzIGRvZXNuJ3QgYWxsb3cgb3B0aW9uYWwgcGFyYW1ldGVyXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5lY2RoKFVpbnQ4QXJyYXkuZnJvbShwdWJsaWNLZXkpLCBVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIHt9KSk7XG59O1xuZXhwb3J0cy5lY2RoVW5zYWZlID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAgIC8vIGVjZGhVbnNhZmUgbWV0aG9kIGlzIG5vdCBwYXJ0IG9mIHNlY3AyNTZrMSB2NCBwYWNrYWdlXG4gICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICAgIC8vIGVuc3VyZSB2YWxpZCBwdWJsaWNLZXkgbGVuZ3RoXG4gICAgaWYgKHB1YmxpY0tleS5sZW5ndGggIT09IDMzICYmIHB1YmxpY0tleS5sZW5ndGggIT09IDY1KSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwdWJsaWMga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIC8vIGVuc3VyZSB2YWxpZCBwcml2YXRlS2V5IGxlbmd0aFxuICAgIGlmIChwcml2YXRlS2V5Lmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ByaXZhdGUga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azF2My5lY2RoVW5zYWZlKFVpbnQ4QXJyYXkuZnJvbShwdWJsaWNLZXkpLCBVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIGNvbXByZXNzZWQpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWNwMjU2azF2My1hZGFwdGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0Vcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFQ19QUklWS0VZX0VYUE9SVF9ERVJfQ09NUFJFU1NFRCA9IEJ1ZmZlci5mcm9tKFtcbiAgICAvLyBiZWdpblxuICAgIDB4MzAsXG4gICAgMHg4MSxcbiAgICAweGQzLFxuICAgIDB4MDIsXG4gICAgMHgwMSxcbiAgICAweDAxLFxuICAgIDB4MDQsXG4gICAgMHgyMCxcbiAgICAvLyBwcml2YXRlIGtleVxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAvLyBtaWRkbGVcbiAgICAweGEwLFxuICAgIDB4ODEsXG4gICAgMHg4NSxcbiAgICAweDMwLFxuICAgIDB4ODEsXG4gICAgMHg4MixcbiAgICAweDAyLFxuICAgIDB4MDEsXG4gICAgMHgwMSxcbiAgICAweDMwLFxuICAgIDB4MmMsXG4gICAgMHgwNixcbiAgICAweDA3LFxuICAgIDB4MmEsXG4gICAgMHg4NixcbiAgICAweDQ4LFxuICAgIDB4Y2UsXG4gICAgMHgzZCxcbiAgICAweDAxLFxuICAgIDB4MDEsXG4gICAgMHgwMixcbiAgICAweDIxLFxuICAgIDB4MDAsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZSxcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmYyxcbiAgICAweDJmLFxuICAgIDB4MzAsXG4gICAgMHgwNixcbiAgICAweDA0LFxuICAgIDB4MDEsXG4gICAgMHgwMCxcbiAgICAweDA0LFxuICAgIDB4MDEsXG4gICAgMHgwNyxcbiAgICAweDA0LFxuICAgIDB4MjEsXG4gICAgMHgwMixcbiAgICAweDc5LFxuICAgIDB4YmUsXG4gICAgMHg2NixcbiAgICAweDdlLFxuICAgIDB4ZjksXG4gICAgMHhkYyxcbiAgICAweGJiLFxuICAgIDB4YWMsXG4gICAgMHg1NSxcbiAgICAweGEwLFxuICAgIDB4NjIsXG4gICAgMHg5NSxcbiAgICAweGNlLFxuICAgIDB4ODcsXG4gICAgMHgwYixcbiAgICAweDA3LFxuICAgIDB4MDIsXG4gICAgMHg5YixcbiAgICAweGZjLFxuICAgIDB4ZGIsXG4gICAgMHgyZCxcbiAgICAweGNlLFxuICAgIDB4MjgsXG4gICAgMHhkOSxcbiAgICAweDU5LFxuICAgIDB4ZjIsXG4gICAgMHg4MSxcbiAgICAweDViLFxuICAgIDB4MTYsXG4gICAgMHhmOCxcbiAgICAweDE3LFxuICAgIDB4OTgsXG4gICAgMHgwMixcbiAgICAweDIxLFxuICAgIDB4MDAsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZSxcbiAgICAweGJhLFxuICAgIDB4YWUsXG4gICAgMHhkYyxcbiAgICAweGU2LFxuICAgIDB4YWYsXG4gICAgMHg0OCxcbiAgICAweGEwLFxuICAgIDB4M2IsXG4gICAgMHhiZixcbiAgICAweGQyLFxuICAgIDB4NWUsXG4gICAgMHg4YyxcbiAgICAweGQwLFxuICAgIDB4MzYsXG4gICAgMHg0MSxcbiAgICAweDQxLFxuICAgIDB4MDIsXG4gICAgMHgwMSxcbiAgICAweDAxLFxuICAgIDB4YTEsXG4gICAgMHgyNCxcbiAgICAweDAzLFxuICAgIDB4MjIsXG4gICAgMHgwMCxcbiAgICAvLyBwdWJsaWMga2V5XG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG5dKTtcbnZhciBFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEID0gQnVmZmVyLmZyb20oW1xuICAgIC8vIGJlZ2luXG4gICAgMHgzMCxcbiAgICAweDgyLFxuICAgIDB4MDEsXG4gICAgMHgxMyxcbiAgICAweDAyLFxuICAgIDB4MDEsXG4gICAgMHgwMSxcbiAgICAweDA0LFxuICAgIDB4MjAsXG4gICAgLy8gcHJpdmF0ZSBrZXlcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgLy8gbWlkZGxlXG4gICAgMHhhMCxcbiAgICAweDgxLFxuICAgIDB4YTUsXG4gICAgMHgzMCxcbiAgICAweDgxLFxuICAgIDB4YTIsXG4gICAgMHgwMixcbiAgICAweDAxLFxuICAgIDB4MDEsXG4gICAgMHgzMCxcbiAgICAweDJjLFxuICAgIDB4MDYsXG4gICAgMHgwNyxcbiAgICAweDJhLFxuICAgIDB4ODYsXG4gICAgMHg0OCxcbiAgICAweGNlLFxuICAgIDB4M2QsXG4gICAgMHgwMSxcbiAgICAweDAxLFxuICAgIDB4MDIsXG4gICAgMHgyMSxcbiAgICAweDAwLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmUsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmMsXG4gICAgMHgyZixcbiAgICAweDMwLFxuICAgIDB4MDYsXG4gICAgMHgwNCxcbiAgICAweDAxLFxuICAgIDB4MDAsXG4gICAgMHgwNCxcbiAgICAweDAxLFxuICAgIDB4MDcsXG4gICAgMHgwNCxcbiAgICAweDQxLFxuICAgIDB4MDQsXG4gICAgMHg3OSxcbiAgICAweGJlLFxuICAgIDB4NjYsXG4gICAgMHg3ZSxcbiAgICAweGY5LFxuICAgIDB4ZGMsXG4gICAgMHhiYixcbiAgICAweGFjLFxuICAgIDB4NTUsXG4gICAgMHhhMCxcbiAgICAweDYyLFxuICAgIDB4OTUsXG4gICAgMHhjZSxcbiAgICAweDg3LFxuICAgIDB4MGIsXG4gICAgMHgwNyxcbiAgICAweDAyLFxuICAgIDB4OWIsXG4gICAgMHhmYyxcbiAgICAweGRiLFxuICAgIDB4MmQsXG4gICAgMHhjZSxcbiAgICAweDI4LFxuICAgIDB4ZDksXG4gICAgMHg1OSxcbiAgICAweGYyLFxuICAgIDB4ODEsXG4gICAgMHg1YixcbiAgICAweDE2LFxuICAgIDB4ZjgsXG4gICAgMHgxNyxcbiAgICAweDk4LFxuICAgIDB4NDgsXG4gICAgMHgzYSxcbiAgICAweGRhLFxuICAgIDB4NzcsXG4gICAgMHgyNixcbiAgICAweGEzLFxuICAgIDB4YzQsXG4gICAgMHg2NSxcbiAgICAweDVkLFxuICAgIDB4YTQsXG4gICAgMHhmYixcbiAgICAweGZjLFxuICAgIDB4MGUsXG4gICAgMHgxMSxcbiAgICAweDA4LFxuICAgIDB4YTgsXG4gICAgMHhmZCxcbiAgICAweDE3LFxuICAgIDB4YjQsXG4gICAgMHg0OCxcbiAgICAweGE2LFxuICAgIDB4ODUsXG4gICAgMHg1NCxcbiAgICAweDE5LFxuICAgIDB4OWMsXG4gICAgMHg0NyxcbiAgICAweGQwLFxuICAgIDB4OGYsXG4gICAgMHhmYixcbiAgICAweDEwLFxuICAgIDB4ZDQsXG4gICAgMHhiOCxcbiAgICAweDAyLFxuICAgIDB4MjEsXG4gICAgMHgwMCxcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZmLFxuICAgIDB4ZmYsXG4gICAgMHhmZixcbiAgICAweGZlLFxuICAgIDB4YmEsXG4gICAgMHhhZSxcbiAgICAweGRjLFxuICAgIDB4ZTYsXG4gICAgMHhhZixcbiAgICAweDQ4LFxuICAgIDB4YTAsXG4gICAgMHgzYixcbiAgICAweGJmLFxuICAgIDB4ZDIsXG4gICAgMHg1ZSxcbiAgICAweDhjLFxuICAgIDB4ZDAsXG4gICAgMHgzNixcbiAgICAweDQxLFxuICAgIDB4NDEsXG4gICAgMHgwMixcbiAgICAweDAxLFxuICAgIDB4MDEsXG4gICAgMHhhMSxcbiAgICAweDQ0LFxuICAgIDB4MDMsXG4gICAgMHg0MixcbiAgICAweDAwLFxuICAgIC8vIHB1YmxpYyBrZXlcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG4gICAgMHgwMCxcbiAgICAweDAwLFxuICAgIDB4MDAsXG5dKTtcbmV4cG9ydHMucHJpdmF0ZUtleUV4cG9ydCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5LCBwdWJsaWNLZXksIGNvbXByZXNzZWQpIHtcbiAgICBpZiAoY29tcHJlc3NlZCA9PT0gdm9pZCAwKSB7IGNvbXByZXNzZWQgPSB0cnVlOyB9XG4gICAgdmFyIHJlc3VsdCA9IEJ1ZmZlci5mcm9tKGNvbXByZXNzZWQgPyBFQ19QUklWS0VZX0VYUE9SVF9ERVJfQ09NUFJFU1NFRCA6IEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9VTkNPTVBSRVNTRUQpO1xuICAgIHByaXZhdGVLZXkuY29weShyZXN1bHQsIGNvbXByZXNzZWQgPyA4IDogOSk7XG4gICAgcHVibGljS2V5LmNvcHkocmVzdWx0LCBjb21wcmVzc2VkID8gMTgxIDogMjE0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydHMucHJpdmF0ZUtleUltcG9ydCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgdmFyIGxlbmd0aCA9IHByaXZhdGVLZXkubGVuZ3RoO1xuICAgIC8vIHNlcXVlbmNlIGhlYWRlclxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbmd0aCA8IGluZGV4ICsgMSB8fCBwcml2YXRlS2V5W2luZGV4XSAhPT0gMHgzMClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgaW5kZXggKz0gMTtcbiAgICAvLyBzZXF1ZW5jZSBsZW5ndGggY29uc3RydWN0b3JcbiAgICBpZiAobGVuZ3RoIDwgaW5kZXggKyAxIHx8ICEocHJpdmF0ZUtleVtpbmRleF0gJiAweDgwKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgdmFyIGxlbmIgPSBwcml2YXRlS2V5W2luZGV4XSAmIDB4N2Y7XG4gICAgaW5kZXggKz0gMTtcbiAgICBpZiAobGVuYiA8IDEgfHwgbGVuYiA+IDIpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChsZW5ndGggPCBpbmRleCArIGxlbmIpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIHNlcXVlbmNlIGxlbmd0aFxuICAgIHZhciBsZW4gPSBwcml2YXRlS2V5W2luZGV4ICsgbGVuYiAtIDFdIHwgKGxlbmIgPiAxID8gcHJpdmF0ZUtleVtpbmRleCArIGxlbmIgLSAyXSA8PCA4IDogMCk7XG4gICAgaW5kZXggKz0gbGVuYjtcbiAgICBpZiAobGVuZ3RoIDwgaW5kZXggKyBsZW4pXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIHNlcXVlbmNlIGVsZW1lbnQgMDogdmVyc2lvbiBudW1iZXIgKD0xKVxuICAgIGlmIChsZW5ndGggPCBpbmRleCArIDMgfHxcbiAgICAgICAgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDIgfHxcbiAgICAgICAgcHJpdmF0ZUtleVtpbmRleCArIDFdICE9PSAweDAxIHx8XG4gICAgICAgIHByaXZhdGVLZXlbaW5kZXggKyAyXSAhPT0gMHgwMSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaW5kZXggKz0gMztcbiAgICAvLyBzZXF1ZW5jZSBlbGVtZW50IDE6IG9jdGV0IHN0cmluZywgdXAgdG8gMzIgYnl0ZXNcbiAgICBpZiAobGVuZ3RoIDwgaW5kZXggKyAyIHx8XG4gICAgICAgIHByaXZhdGVLZXlbaW5kZXhdICE9PSAweDA0IHx8XG4gICAgICAgIHByaXZhdGVLZXlbaW5kZXggKyAxXSA+IDB4MjAgfHxcbiAgICAgICAgbGVuZ3RoIDwgaW5kZXggKyAyICsgcHJpdmF0ZUtleVtpbmRleCArIDFdKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcHJpdmF0ZUtleS5zbGljZShpbmRleCArIDIsIGluZGV4ICsgMiArIHByaXZhdGVLZXlbaW5kZXggKyAxXSk7XG59O1xuZXhwb3J0cy5zaWduYXR1cmVJbXBvcnRMYXggPSBmdW5jdGlvbiAoc2lnbmF0dXJlKSB7XG4gICAgdmFyIHIgPSBCdWZmZXIuYWxsb2MoMzIsIDApO1xuICAgIHZhciBzID0gQnVmZmVyLmFsbG9jKDMyLCAwKTtcbiAgICB2YXIgbGVuZ3RoID0gc2lnbmF0dXJlLmxlbmd0aDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHNlcXVlbmNlIHRhZyBieXRlXG4gICAgaWYgKHNpZ25hdHVyZVtpbmRleCsrXSAhPT0gMHgzMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gc2VxdWVuY2UgbGVuZ3RoIGJ5dGVcbiAgICB2YXIgbGVuYnl0ZSA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgICBpZiAobGVuYnl0ZSAmIDB4ODApIHtcbiAgICAgICAgaW5kZXggKz0gbGVuYnl0ZSAtIDB4ODA7XG4gICAgICAgIGlmIChpbmRleCA+IGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gc2VxdWVuY2UgdGFnIGJ5dGUgZm9yIHJcbiAgICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDAyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBsZW5ndGggZm9yIHJcbiAgICB2YXIgcmxlbiA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgICBpZiAocmxlbiAmIDB4ODApIHtcbiAgICAgICAgbGVuYnl0ZSA9IHJsZW4gLSAweDgwO1xuICAgICAgICBpZiAoaW5kZXggKyBsZW5ieXRlID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgbGVuYnl0ZSA+IDAgJiYgc2lnbmF0dXJlW2luZGV4XSA9PT0gMHgwMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKVxuICAgICAgICAgICAgO1xuICAgICAgICBmb3IgKHJsZW4gPSAwOyBsZW5ieXRlID4gMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKVxuICAgICAgICAgICAgcmxlbiA9IChybGVuIDw8IDgpICsgc2lnbmF0dXJlW2luZGV4XTtcbiAgICB9XG4gICAgaWYgKHJsZW4gPiBsZW5ndGggLSBpbmRleCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHJpbmRleCA9IGluZGV4O1xuICAgIGluZGV4ICs9IHJsZW47XG4gICAgLy8gc2VxdWVuY2UgdGFnIGJ5dGUgZm9yIHNcbiAgICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDAyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBsZW5ndGggZm9yIHNcbiAgICB2YXIgc2xlbiA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgICBpZiAoc2xlbiAmIDB4ODApIHtcbiAgICAgICAgbGVuYnl0ZSA9IHNsZW4gLSAweDgwO1xuICAgICAgICBpZiAoaW5kZXggKyBsZW5ieXRlID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgbGVuYnl0ZSA+IDAgJiYgc2lnbmF0dXJlW2luZGV4XSA9PT0gMHgwMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKVxuICAgICAgICAgICAgO1xuICAgICAgICBmb3IgKHNsZW4gPSAwOyBsZW5ieXRlID4gMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKVxuICAgICAgICAgICAgc2xlbiA9IChzbGVuIDw8IDgpICsgc2lnbmF0dXJlW2luZGV4XTtcbiAgICB9XG4gICAgaWYgKHNsZW4gPiBsZW5ndGggLSBpbmRleCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHNpbmRleCA9IGluZGV4O1xuICAgIGluZGV4ICs9IHNsZW47XG4gICAgLy8gaWdub3JlIGxlYWRpbmcgemVyb3MgaW4gclxuICAgIGZvciAoOyBybGVuID4gMCAmJiBzaWduYXR1cmVbcmluZGV4XSA9PT0gMHgwMDsgcmxlbiAtPSAxLCByaW5kZXggKz0gMSlcbiAgICAgICAgO1xuICAgIC8vIGNvcHkgciB2YWx1ZVxuICAgIGlmIChybGVuID4gMzIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBydmFsdWUgPSBzaWduYXR1cmUuc2xpY2UocmluZGV4LCByaW5kZXggKyBybGVuKTtcbiAgICBydmFsdWUuY29weShyLCAzMiAtIHJ2YWx1ZS5sZW5ndGgpO1xuICAgIC8vIGlnbm9yZSBsZWFkaW5nIHplcm9zIGluIHNcbiAgICBmb3IgKDsgc2xlbiA+IDAgJiYgc2lnbmF0dXJlW3NpbmRleF0gPT09IDB4MDA7IHNsZW4gLT0gMSwgc2luZGV4ICs9IDEpXG4gICAgICAgIDtcbiAgICAvLyBjb3B5IHMgdmFsdWVcbiAgICBpZiAoc2xlbiA+IDMyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgc3ZhbHVlID0gc2lnbmF0dXJlLnNsaWNlKHNpbmRleCwgc2luZGV4ICsgc2xlbik7XG4gICAgc3ZhbHVlLmNvcHkocywgMzIgLSBzdmFsdWUubGVuZ3RoKTtcbiAgICByZXR1cm4geyByOiByLCBzOiBzIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0Vcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBCTiA9IHJlcXVpcmUoXCJibi5qc1wiKTtcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWM7XG52YXIgZWMgPSBuZXcgRUMoJ3NlY3AyNTZrMScpO1xudmFyIGVjcGFyYW1zID0gZWMuY3VydmU7XG5leHBvcnRzLnByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAgIGlmIChjb21wcmVzc2VkID09PSB2b2lkIDApIHsgY29tcHJlc3NlZCA9IHRydWU7IH1cbiAgICB2YXIgZCA9IG5ldyBCTihwcml2YXRlS2V5KTtcbiAgICBpZiAoZC51Y21wKGVjcGFyYW1zLm4pID49IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY291bGRuJ3QgZXhwb3J0IHRvIERFUiBmb3JtYXRcIik7XG4gICAgfVxuICAgIHZhciBwb2ludCA9IGVjLmcubXVsKGQpO1xuICAgIHJldHVybiB0b1B1YmxpY0tleShwb2ludC5nZXRYKCksIHBvaW50LmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuZXhwb3J0cy5wcml2YXRlS2V5TW9kSW52ZXJzZSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgdmFyIGJuID0gbmV3IEJOKHByaXZhdGVLZXkpO1xuICAgIGlmIChibi51Y21wKGVjcGFyYW1zLm4pID49IDAgfHwgYm4uaXNaZXJvKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcml2YXRlIGtleSByYW5nZSBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIHJldHVybiBibi5pbnZtKGVjcGFyYW1zLm4pLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpO1xufTtcbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0ID0gZnVuY3Rpb24gKHNpZ09iaikge1xuICAgIHZhciByID0gbmV3IEJOKHNpZ09iai5yKTtcbiAgICBpZiAoci51Y21wKGVjcGFyYW1zLm4pID49IDApIHtcbiAgICAgICAgciA9IG5ldyBCTigwKTtcbiAgICB9XG4gICAgdmFyIHMgPSBuZXcgQk4oc2lnT2JqLnMpO1xuICAgIGlmIChzLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgICAgICBzID0gbmV3IEJOKDApO1xuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbci50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKSwgcy50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKV0pO1xufTtcbmV4cG9ydHMuZWNkaFVuc2FmZSA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgICBpZiAoY29tcHJlc3NlZCA9PT0gdm9pZCAwKSB7IGNvbXByZXNzZWQgPSB0cnVlOyB9XG4gICAgdmFyIHBvaW50ID0gZWMua2V5RnJvbVB1YmxpYyhwdWJsaWNLZXkpO1xuICAgIHZhciBzY2FsYXIgPSBuZXcgQk4ocHJpdmF0ZUtleSk7XG4gICAgaWYgKHNjYWxhci51Y21wKGVjcGFyYW1zLm4pID49IDAgfHwgc2NhbGFyLmlzWmVybygpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2NhbGFyIHdhcyBpbnZhbGlkICh6ZXJvIG9yIG92ZXJmbG93KScpO1xuICAgIH1cbiAgICB2YXIgc2hhcmVkID0gcG9pbnQucHViLm11bChzY2FsYXIpO1xuICAgIHJldHVybiB0b1B1YmxpY0tleShzaGFyZWQuZ2V0WCgpLCBzaGFyZWQuZ2V0WSgpLCBjb21wcmVzc2VkKTtcbn07XG52YXIgdG9QdWJsaWNLZXkgPSBmdW5jdGlvbiAoeCwgeSwgY29tcHJlc3NlZCkge1xuICAgIHZhciBwdWJsaWNLZXk7XG4gICAgaWYgKGNvbXByZXNzZWQpIHtcbiAgICAgICAgcHVibGljS2V5ID0gQnVmZmVyLmFsbG9jKDMzKTtcbiAgICAgICAgcHVibGljS2V5WzBdID0geS5pc09kZCgpID8gMHgwMyA6IDB4MDI7XG4gICAgICAgIHgudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMikuY29weShwdWJsaWNLZXksIDEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHVibGljS2V5ID0gQnVmZmVyLmFsbG9jKDY1KTtcbiAgICAgICAgcHVibGljS2V5WzBdID0gMHgwNDtcbiAgICAgICAgeC50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKS5jb3B5KHB1YmxpY0tleSwgMSk7XG4gICAgICAgIHkudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMikuY29weShwdWJsaWNLZXksIDMzKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1YmxpY0tleTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzaFBlcnNvbmFsTWVzc2FnZSA9IGV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGV4cG9ydHMuZnJvbVJwY1NpZyA9IGV4cG9ydHMudG9ScGNTaWcgPSBleHBvcnRzLmVjcmVjb3ZlciA9IGV4cG9ydHMuZWNzaWduID0gdm9pZCAwO1xudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJy4vc2VjcDI1NmsxdjMtYWRhcHRlcicpO1xudmFyIEJOID0gcmVxdWlyZShcImJuLmpzXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbnZhciBoYXNoXzEgPSByZXF1aXJlKFwiLi9oYXNoXCIpO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBFQ0RTQSBzaWduYXR1cmUgb2YgYSBtZXNzYWdlIGhhc2guXG4gKi9cbmV4cG9ydHMuZWNzaWduID0gZnVuY3Rpb24gKG1zZ0hhc2gsIHByaXZhdGVLZXksIGNoYWluSWQpIHtcbiAgICB2YXIgc2lnID0gc2VjcDI1NmsxLnNpZ24obXNnSGFzaCwgcHJpdmF0ZUtleSk7XG4gICAgdmFyIHJlY292ZXJ5ID0gc2lnLnJlY292ZXJ5O1xuICAgIHZhciByZXQgPSB7XG4gICAgICAgIHI6IHNpZy5zaWduYXR1cmUuc2xpY2UoMCwgMzIpLFxuICAgICAgICBzOiBzaWcuc2lnbmF0dXJlLnNsaWNlKDMyLCA2NCksXG4gICAgICAgIHY6IGNoYWluSWQgPyByZWNvdmVyeSArIChjaGFpbklkICogMiArIDM1KSA6IHJlY292ZXJ5ICsgMjcsXG4gICAgfTtcbiAgICByZXR1cm4gcmV0O1xufTtcbi8qKlxuICogRUNEU0EgcHVibGljIGtleSByZWNvdmVyeSBmcm9tIHNpZ25hdHVyZS5cbiAqIEByZXR1cm5zIFJlY292ZXJlZCBwdWJsaWMga2V5XG4gKi9cbmV4cG9ydHMuZWNyZWNvdmVyID0gZnVuY3Rpb24gKG1zZ0hhc2gsIHYsIHIsIHMsIGNoYWluSWQpIHtcbiAgICB2YXIgc2lnbmF0dXJlID0gQnVmZmVyLmNvbmNhdChbYnl0ZXNfMS5zZXRMZW5ndGgociwgMzIpLCBieXRlc18xLnNldExlbmd0aChzLCAzMildLCA2NCk7XG4gICAgdmFyIHJlY292ZXJ5ID0gY2FsY3VsYXRlU2lnUmVjb3ZlcnkodiwgY2hhaW5JZCk7XG4gICAgaWYgKCFpc1ZhbGlkU2lnUmVjb3ZlcnkocmVjb3ZlcnkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzaWduYXR1cmUgdiB2YWx1ZScpO1xuICAgIH1cbiAgICB2YXIgc2VuZGVyUHViS2V5ID0gc2VjcDI1NmsxLnJlY292ZXIobXNnSGFzaCwgc2lnbmF0dXJlLCByZWNvdmVyeSk7XG4gICAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlDb252ZXJ0KHNlbmRlclB1YktleSwgZmFsc2UpLnNsaWNlKDEpO1xufTtcbi8qKlxuICogQ29udmVydCBzaWduYXR1cmUgcGFyYW1ldGVycyBpbnRvIHRoZSBmb3JtYXQgb2YgYGV0aF9zaWduYCBSUEMgbWV0aG9kLlxuICogQHJldHVybnMgU2lnbmF0dXJlXG4gKi9cbmV4cG9ydHMudG9ScGNTaWcgPSBmdW5jdGlvbiAodiwgciwgcywgY2hhaW5JZCkge1xuICAgIHZhciByZWNvdmVyeSA9IGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpO1xuICAgIGlmICghaXNWYWxpZFNpZ1JlY292ZXJ5KHJlY292ZXJ5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgICB9XG4gICAgLy8gZ2V0aCAoYW5kIHRoZSBSUEMgZXRoX3NpZ24gbWV0aG9kKSB1c2VzIHRoZSA2NSBieXRlIGZvcm1hdCB1c2VkIGJ5IEJpdGNvaW5cbiAgICByZXR1cm4gYnl0ZXNfMS5idWZmZXJUb0hleChCdWZmZXIuY29uY2F0KFtieXRlc18xLnNldExlbmd0aExlZnQociwgMzIpLCBieXRlc18xLnNldExlbmd0aExlZnQocywgMzIpLCBieXRlc18xLnRvQnVmZmVyKHYpXSkpO1xufTtcbi8qKlxuICogQ29udmVydCBzaWduYXR1cmUgZm9ybWF0IG9mIHRoZSBgZXRoX3NpZ25gIFJQQyBtZXRob2QgdG8gc2lnbmF0dXJlIHBhcmFtZXRlcnNcbiAqIE5PVEU6IGFsbCBiZWNhdXNlIG9mIGEgYnVnIGluIGdldGg6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1M1xuICovXG5leHBvcnRzLmZyb21ScGNTaWcgPSBmdW5jdGlvbiAoc2lnKSB7XG4gICAgdmFyIGJ1ZiA9IGJ5dGVzXzEudG9CdWZmZXIoc2lnKTtcbiAgICAvLyBOT1RFOiB3aXRoIHBvdGVudGlhbCBpbnRyb2R1Y3Rpb24gb2YgY2hhaW5JZCB0aGlzIG1pZ2h0IG5lZWQgdG8gYmUgdXBkYXRlZFxuICAgIGlmIChidWYubGVuZ3RoICE9PSA2NSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIGxlbmd0aCcpO1xuICAgIH1cbiAgICB2YXIgdiA9IGJ1Zls2NF07XG4gICAgLy8gc3VwcG9ydCBib3RoIHZlcnNpb25zIG9mIGBldGhfc2lnbmAgcmVzcG9uc2VzXG4gICAgaWYgKHYgPCAyNykge1xuICAgICAgICB2ICs9IDI3O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB2OiB2LFxuICAgICAgICByOiBidWYuc2xpY2UoMCwgMzIpLFxuICAgICAgICBzOiBidWYuc2xpY2UoMzIsIDY0KSxcbiAgICB9O1xufTtcbi8qKlxuICogVmFsaWRhdGUgYSBFQ0RTQSBzaWduYXR1cmUuXG4gKiBAcGFyYW0gaG9tZXN0ZWFkT3JMYXRlciBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGJlaW5nIHVzZWQgb24gZWl0aGVyIHRoZSBob21lc3RlYWQgaGFyZGZvcmsgb3IgYSBsYXRlciBvbmVcbiAqL1xuZXhwb3J0cy5pc1ZhbGlkU2lnbmF0dXJlID0gZnVuY3Rpb24gKHYsIHIsIHMsIGhvbWVzdGVhZE9yTGF0ZXIsIGNoYWluSWQpIHtcbiAgICBpZiAoaG9tZXN0ZWFkT3JMYXRlciA9PT0gdm9pZCAwKSB7IGhvbWVzdGVhZE9yTGF0ZXIgPSB0cnVlOyB9XG4gICAgdmFyIFNFQ1AyNTZLMV9OX0RJVl8yID0gbmV3IEJOKCc3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjVkNTc2ZTczNTdhNDUwMWRkZmU5MmY0NjY4MWIyMGEwJywgMTYpO1xuICAgIHZhciBTRUNQMjU2SzFfTiA9IG5ldyBCTignZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MScsIDE2KTtcbiAgICBpZiAoci5sZW5ndGggIT09IDMyIHx8IHMubGVuZ3RoICE9PSAzMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghaXNWYWxpZFNpZ1JlY292ZXJ5KGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciByQk4gPSBuZXcgQk4ocik7XG4gICAgdmFyIHNCTiA9IG5ldyBCTihzKTtcbiAgICBpZiAockJOLmlzWmVybygpIHx8IHJCTi5ndChTRUNQMjU2SzFfTikgfHwgc0JOLmlzWmVybygpIHx8IHNCTi5ndChTRUNQMjU2SzFfTikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaG9tZXN0ZWFkT3JMYXRlciAmJiBzQk4uY21wKFNFQ1AyNTZLMV9OX0RJVl8yKSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUga2VjY2FrLTI1NiBoYXNoIG9mIGBtZXNzYWdlYCwgcHJlZml4ZWQgd2l0aCB0aGUgaGVhZGVyIHVzZWQgYnkgdGhlIGBldGhfc2lnbmAgUlBDIGNhbGwuXG4gKiBUaGUgb3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24gY2FuIGJlIGZlZCBpbnRvIGBlY3NpZ25gIHRvIHByb2R1Y2UgdGhlIHNhbWUgc2lnbmF0dXJlIGFzIHRoZSBgZXRoX3NpZ25gXG4gKiBjYWxsIGZvciBhIGdpdmVuIGBtZXNzYWdlYCwgb3IgZmVkIHRvIGBlY3JlY292ZXJgIGFsb25nIHdpdGggYSBzaWduYXR1cmUgdG8gcmVjb3ZlciB0aGUgcHVibGljIGtleVxuICogdXNlZCB0byBwcm9kdWNlIHRoZSBzaWduYXR1cmUuXG4gKi9cbmV4cG9ydHMuaGFzaFBlcnNvbmFsTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgdmFyIHByZWZpeCA9IEJ1ZmZlci5mcm9tKFwiXFx1MDAxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxcblwiICsgbWVzc2FnZS5sZW5ndGgudG9TdHJpbmcoKSwgJ3V0Zi04Jyk7XG4gICAgcmV0dXJuIGhhc2hfMS5rZWNjYWsoQnVmZmVyLmNvbmNhdChbcHJlZml4LCBtZXNzYWdlXSkpO1xufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpIHtcbiAgICByZXR1cm4gY2hhaW5JZCA/IHYgLSAoMiAqIGNoYWluSWQgKyAzNSkgOiB2IC0gMjc7XG59XG5mdW5jdGlvbiBpc1ZhbGlkU2lnUmVjb3ZlcnkocmVjb3ZlcnkpIHtcbiAgICByZXR1cm4gcmVjb3ZlcnkgPT09IDAgfHwgcmVjb3ZlcnkgPT09IDE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYXR1cmUuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZXRoVXRpbCA9IHJlcXVpcmUoJ2V0aGVyZXVtanMtdXRpbCcpO1xudmFyIGZlZXMgPSByZXF1aXJlKCdldGhlcmV1bS1jb21tb24vcGFyYW1zLmpzb24nKTtcbnZhciBCTiA9IGV0aFV0aWwuQk47XG5cbi8vIHNlY3AyNTZrMW4vMlxudmFyIE5fRElWXzIgPSBuZXcgQk4oJzdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmNWQ1NzZlNzM1N2E0NTAxZGRmZTkyZjQ2NjgxYjIwYTAnLCAxNik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0cmFuc2FjdGlvbiBvYmplY3QuXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciByYXdUeCA9IHtcbiAqICAgbm9uY2U6ICcwMCcsXG4gKiAgIGdhc1ByaWNlOiAnMDkxODRlNzJhMDAwJyxcbiAqICAgZ2FzTGltaXQ6ICcyNzEwJyxcbiAqICAgdG86ICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqICAgdmFsdWU6ICcwMCcsXG4gKiAgIGRhdGE6ICc3Zjc0NjU3Mzc0MzIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MDAwNTcnLFxuICogICB2OiAnMWMnLFxuICogICByOiAnNWUxZDNhNzZmYmY4MjQyMjBlYWZjOGM3OWFkNTc4YWQyYjY3ZDAxYjBjMjQyNWViMWYxMzQ3ZThmNTA4ODJhYicsXG4gKiAgIHM6ICc1YmQ0Mjg1MzdmMDVmOTgzMGU5Mzc5MmY5MGVhNmEzZTJkMWVlODQ5NTJkZDk2ZWRiYWU5ZjY1OGY4MzFhYjEzJ1xuICogfTtcbiAqIHZhciB0eCA9IG5ldyBUcmFuc2FjdGlvbihyYXdUeCk7XG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5IHwgT2JqZWN0fSBkYXRhIGEgdHJhbnNhY3Rpb24gY2FuIGJlIGluaXRpYWlsaXplZCB3aXRoIGVpdGhlciBhIGJ1ZmZlciBjb250YWluaW5nIHRoZSBSTFAgc2VyaWFsaXplZCB0cmFuc2FjdGlvbiBvciBhbiBhcnJheSBvZiBidWZmZXJzIHJlbGF0aW5nIHRvIGVhY2ggb2YgdGhlIHR4IFByb3BlcnRpZXMsIGxpc3RlZCBpbiBvcmRlciBiZWxvdyBpbiB0aGUgZXhtcGxlLlxuICpcbiAqIE9yIGxhc3RseSBhbiBPYmplY3QgY29udGFpbmluZyB0aGUgUHJvcGVydGllcyBvZiB0aGUgdHJhbnNhY3Rpb24gbGlrZSBpbiB0aGUgVXNhZ2UgZXhhbXBsZS5cbiAqXG4gKiBGb3IgT2JqZWN0IGFuZCBBcnJheXMgZWFjaCBvZiB0aGUgZWxlbWVudHMgY2FuIGVpdGhlciBiZSBhIEJ1ZmZlciwgYSBoZXgtcHJlZml4ZWQgKDB4KSBTdHJpbmcgLCBOdW1iZXIsIG9yIGFuIG9iamVjdCB3aXRoIGEgdG9CdWZmZXIgbWV0aG9kIHN1Y2ggYXMgQmlnbnVtXG4gKlxuICogQHByb3BlcnR5IHtCdWZmZXJ9IHJhdyBUaGUgcmF3IHJscCBlbmNvZGVkIHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YS5ub25jZSBub25jZSBudW1iZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhLmdhc0xpbWl0IHRyYW5zYWN0aW9uIGdhcyBsaW1pdFxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEuZ2FzUHJpY2UgdHJhbnNhY3Rpb24gZ2FzIHByaWNlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YS50byB0byB0aGUgdG8gYWRkcmVzc1xuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEudmFsdWUgdGhlIGFtb3VudCBvZiBldGhlciBzZW50XG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YS5kYXRhIHRoaXMgd2lsbCBjb250YWluIHRoZSBkYXRhIG9mIHRoZSBtZXNzYWdlIG9yIHRoZSBpbml0IG9mIGEgY29udHJhY3RcbiAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhLnYgRUMgc2lnbmF0dXJlIHBhcmFtZXRlclxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEuciBFQyBzaWduYXR1cmUgcGFyYW1ldGVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YS5zIEVDIHJlY292ZXJ5IElEXG4gKiBAcGFyYW0ge051bWJlcn0gZGF0YS5jaGFpbklkIEVJUCAxNTUgY2hhaW5JZCAtIG1haW5uZXQ6IDEsIHJvcHN0ZW46IDNcbiAqICovXG5cbnZhciBUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oZGF0YSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2FjdGlvbik7XG5cbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICAvLyBEZWZpbmUgUHJvcGVydGllc1xuICAgIHZhciBmaWVsZHMgPSBbe1xuICAgICAgbmFtZTogJ25vbmNlJyxcbiAgICAgIGxlbmd0aDogMzIsXG4gICAgICBhbGxvd0xlc3M6IHRydWUsXG4gICAgICBkZWZhdWx0OiBuZXcgQnVmZmVyKFtdKVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdnYXNQcmljZScsXG4gICAgICBsZW5ndGg6IDMyLFxuICAgICAgYWxsb3dMZXNzOiB0cnVlLFxuICAgICAgZGVmYXVsdDogbmV3IEJ1ZmZlcihbXSlcbiAgICB9LCB7XG4gICAgICBuYW1lOiAnZ2FzTGltaXQnLFxuICAgICAgYWxpYXM6ICdnYXMnLFxuICAgICAgbGVuZ3RoOiAzMixcbiAgICAgIGFsbG93TGVzczogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IG5ldyBCdWZmZXIoW10pXG4gICAgfSwge1xuICAgICAgbmFtZTogJ3RvJyxcbiAgICAgIGFsbG93WmVybzogdHJ1ZSxcbiAgICAgIGxlbmd0aDogMjAsXG4gICAgICBkZWZhdWx0OiBuZXcgQnVmZmVyKFtdKVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICd2YWx1ZScsXG4gICAgICBsZW5ndGg6IDMyLFxuICAgICAgYWxsb3dMZXNzOiB0cnVlLFxuICAgICAgZGVmYXVsdDogbmV3IEJ1ZmZlcihbXSlcbiAgICB9LCB7XG4gICAgICBuYW1lOiAnZGF0YScsXG4gICAgICBhbGlhczogJ2lucHV0JyxcbiAgICAgIGFsbG93WmVybzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IG5ldyBCdWZmZXIoW10pXG4gICAgfSwge1xuICAgICAgbmFtZTogJ3YnLFxuICAgICAgYWxsb3daZXJvOiB0cnVlLFxuICAgICAgZGVmYXVsdDogbmV3IEJ1ZmZlcihbMHgxY10pXG4gICAgfSwge1xuICAgICAgbmFtZTogJ3InLFxuICAgICAgbGVuZ3RoOiAzMixcbiAgICAgIGFsbG93WmVybzogdHJ1ZSxcbiAgICAgIGFsbG93TGVzczogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IG5ldyBCdWZmZXIoW10pXG4gICAgfSwge1xuICAgICAgbmFtZTogJ3MnLFxuICAgICAgbGVuZ3RoOiAzMixcbiAgICAgIGFsbG93WmVybzogdHJ1ZSxcbiAgICAgIGFsbG93TGVzczogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IG5ldyBCdWZmZXIoW10pXG4gICAgfV07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBybHAgZW5jb2Rpbmcgb2YgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogQG1ldGhvZCBzZXJpYWxpemVcbiAgICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAgICogQG1lbWJlcm9mIFRyYW5zYWN0aW9uXG4gICAgICogQG5hbWUgc2VyaWFsaXplXG4gICAgICovXG4gICAgLy8gYXR0YWNoZWQgc2VyaWFsaXplXG4gICAgZXRoVXRpbC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIGZpZWxkcywgZGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge0J1ZmZlcn0gZnJvbSAocmVhZCBvbmx5KSBzZW5kZXIgYWRkcmVzcyBvZiB0aGlzIHRyYW5zYWN0aW9uLCBtYXRoZW1hdGljYWxseSBkZXJpdmVkIGZyb20gb3RoZXIgcGFyYW1ldGVycy5cbiAgICAgKiBAbmFtZSBmcm9tXG4gICAgICogQG1lbWJlcm9mIFRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdmcm9tJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogdGhpcy5nZXRTZW5kZXJBZGRyZXNzLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIC8vIGNhbGN1bGF0ZSBjaGFpbklkIGZyb20gc2lnbmF0dXJlXG4gICAgdmFyIHNpZ1YgPSBldGhVdGlsLmJ1ZmZlclRvSW50KHRoaXMudik7XG4gICAgdmFyIGNoYWluSWQgPSBNYXRoLmZsb29yKChzaWdWIC0gMzUpIC8gMik7XG4gICAgaWYgKGNoYWluSWQgPCAwKSBjaGFpbklkID0gMDtcblxuICAgIC8vIHNldCBjaGFpbklkXG4gICAgdGhpcy5fY2hhaW5JZCA9IGNoYWluSWQgfHwgZGF0YS5jaGFpbklkIHx8IDA7XG4gICAgdGhpcy5faG9tZXN0ZWFkID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgdHgncyBgdG9gIGlzIHRvIHRoZSBjcmVhdGlvbiBhZGRyZXNzXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnRvQ3JlYXRpb25BZGRyZXNzID0gZnVuY3Rpb24gdG9DcmVhdGlvbkFkZHJlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudG8udG9TdHJpbmcoJ2hleCcpID09PSAnJztcbiAgfTtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgYSBzaGEzLTI1NiBoYXNoIG9mIHRoZSBzZXJpYWxpemVkIHR4XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2luY2x1ZGVTaWduYXR1cmU9dHJ1ZV0gd2hldGhlciBvciBub3QgdG8gaW5jdWxkZSB0aGUgc2lnbmF0dXJlXG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuaGFzaCA9IGZ1bmN0aW9uIGhhc2goaW5jbHVkZVNpZ25hdHVyZSkge1xuICAgIGlmIChpbmNsdWRlU2lnbmF0dXJlID09PSB1bmRlZmluZWQpIGluY2x1ZGVTaWduYXR1cmUgPSB0cnVlO1xuXG4gICAgLy8gRUlQMTU1IHNwZWM6XG4gICAgLy8gd2hlbiBjb21wdXRpbmcgdGhlIGhhc2ggb2YgYSB0cmFuc2FjdGlvbiBmb3IgcHVycG9zZXMgb2Ygc2lnbmluZyBvciByZWNvdmVyaW5nLFxuICAgIC8vIGluc3RlYWQgb2YgaGFzaGluZyBvbmx5IHRoZSBmaXJzdCBzaXggZWxlbWVudHMgKGllLiBub25jZSwgZ2FzcHJpY2UsIHN0YXJ0Z2FzLCB0bywgdmFsdWUsIGRhdGEpLFxuICAgIC8vIGhhc2ggbmluZSBlbGVtZW50cywgd2l0aCB2IHJlcGxhY2VkIGJ5IENIQUlOX0lELCByID0gMCBhbmQgcyA9IDBcblxuICAgIHZhciBpdGVtcyA9IHZvaWQgMDtcbiAgICBpZiAoaW5jbHVkZVNpZ25hdHVyZSkge1xuICAgICAgaXRlbXMgPSB0aGlzLnJhdztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuX2NoYWluSWQgPiAwKSB7XG4gICAgICAgIHZhciByYXcgPSB0aGlzLnJhdy5zbGljZSgpO1xuICAgICAgICB0aGlzLnYgPSB0aGlzLl9jaGFpbklkO1xuICAgICAgICB0aGlzLnIgPSAwO1xuICAgICAgICB0aGlzLnMgPSAwO1xuICAgICAgICBpdGVtcyA9IHRoaXMucmF3O1xuICAgICAgICB0aGlzLnJhdyA9IHJhdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1zID0gdGhpcy5yYXcuc2xpY2UoMCwgNik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGhhc2hcbiAgICByZXR1cm4gZXRoVXRpbC5ybHBoYXNoKGl0ZW1zKTtcbiAgfTtcblxuICAvKipcbiAgICogcmV0dXJucyB0aGUgcHVibGljIGtleSBvZiB0aGUgc2VuZGVyXG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0Q2hhaW5JZCA9IGZ1bmN0aW9uIGdldENoYWluSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYWluSWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIHJldHVybnMgdGhlIHNlbmRlcidzIGFkZHJlc3NcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cblxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJBZGRyZXNzID0gZnVuY3Rpb24gZ2V0U2VuZGVyQWRkcmVzcygpIHtcbiAgICBpZiAodGhpcy5fZnJvbSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zyb207XG4gICAgfVxuICAgIHZhciBwdWJrZXkgPSB0aGlzLmdldFNlbmRlclB1YmxpY0tleSgpO1xuICAgIHRoaXMuX2Zyb20gPSBldGhVdGlsLnB1YmxpY1RvQWRkcmVzcyhwdWJrZXkpO1xuICAgIHJldHVybiB0aGlzLl9mcm9tO1xuICB9O1xuXG4gIC8qKlxuICAgKiByZXR1cm5zIHRoZSBwdWJsaWMga2V5IG9mIHRoZSBzZW5kZXJcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cblxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJQdWJsaWNLZXkgPSBmdW5jdGlvbiBnZXRTZW5kZXJQdWJsaWNLZXkoKSB7XG4gICAgaWYgKCF0aGlzLl9zZW5kZXJQdWJLZXkgfHwgIXRoaXMuX3NlbmRlclB1YktleS5sZW5ndGgpIHtcbiAgICAgIGlmICghdGhpcy52ZXJpZnlTaWduYXR1cmUoKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFNpZ25hdHVyZScpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2VuZGVyUHViS2V5O1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBzaWduYXR1cmUgaXMgdmFsaWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUudmVyaWZ5U2lnbmF0dXJlID0gZnVuY3Rpb24gdmVyaWZ5U2lnbmF0dXJlKCkge1xuICAgIHZhciBtc2dIYXNoID0gdGhpcy5oYXNoKGZhbHNlKTtcbiAgICAvLyBBbGwgdHJhbnNhY3Rpb24gc2lnbmF0dXJlcyB3aG9zZSBzLXZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBzZWNwMjU2azFuLzIgYXJlIGNvbnNpZGVyZWQgaW52YWxpZC5cbiAgICBpZiAodGhpcy5faG9tZXN0ZWFkICYmIG5ldyBCTih0aGlzLnMpLmNtcChOX0RJVl8yKSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB2YXIgdiA9IGV0aFV0aWwuYnVmZmVyVG9JbnQodGhpcy52KTtcbiAgICAgIGlmICh0aGlzLl9jaGFpbklkID4gMCkge1xuICAgICAgICB2IC09IHRoaXMuX2NoYWluSWQgKiAyICsgODtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NlbmRlclB1YktleSA9IGV0aFV0aWwuZWNyZWNvdmVyKG1zZ0hhc2gsIHYsIHRoaXMuciwgdGhpcy5zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhdGhpcy5fc2VuZGVyUHViS2V5O1xuICB9O1xuXG4gIC8qKlxuICAgKiBzaWduIGEgdHJhbnNhY3Rpb24gd2l0aCBhIGdpdmVuIGEgcHJpdmF0ZSBrZXlcbiAgICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24ocHJpdmF0ZUtleSkge1xuICAgIHZhciBtc2dIYXNoID0gdGhpcy5oYXNoKGZhbHNlKTtcbiAgICB2YXIgc2lnID0gZXRoVXRpbC5lY3NpZ24obXNnSGFzaCwgcHJpdmF0ZUtleSk7XG4gICAgaWYgKHRoaXMuX2NoYWluSWQgPiAwKSB7XG4gICAgICBzaWcudiArPSB0aGlzLl9jaGFpbklkICogMiArIDg7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgc2lnKTtcbiAgfTtcblxuICAvKipcbiAgICogVGhlIGFtb3VudCBvZiBnYXMgcGFpZCBmb3IgdGhlIGRhdGEgaW4gdGhpcyB0eFxuICAgKiBAcmV0dXJuIHtCTn1cbiAgICovXG5cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0RGF0YUZlZSA9IGZ1bmN0aW9uIGdldERhdGFGZWUoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnJhd1s1XTtcbiAgICB2YXIgY29zdCA9IG5ldyBCTigwKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPT09IDAgPyBjb3N0LmlhZGRuKGZlZXMudHhEYXRhWmVyb0dhcy52KSA6IGNvc3QuaWFkZG4oZmVlcy50eERhdGFOb25aZXJvR2FzLnYpO1xuICAgIH1cbiAgICByZXR1cm4gY29zdDtcbiAgfTtcblxuICAvKipcbiAgICogdGhlIG1pbmltdW0gYW1vdW50IG9mIGdhcyB0aGUgdHggbXVzdCBoYXZlIChEYXRhRmVlICsgVHhGZWUgKyBDcmVhdGlvbiBGZWUpXG4gICAqIEByZXR1cm4ge0JOfVxuICAgKi9cblxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5nZXRCYXNlRmVlID0gZnVuY3Rpb24gZ2V0QmFzZUZlZSgpIHtcbiAgICB2YXIgZmVlID0gdGhpcy5nZXREYXRhRmVlKCkuaWFkZG4oZmVlcy50eEdhcy52KTtcbiAgICBpZiAodGhpcy5faG9tZXN0ZWFkICYmIHRoaXMudG9DcmVhdGlvbkFkZHJlc3MoKSkge1xuICAgICAgZmVlLmlhZGRuKGZlZXMudHhDcmVhdGlvbi52KTtcbiAgICB9XG4gICAgcmV0dXJuIGZlZTtcbiAgfTtcblxuICAvKipcbiAgICogdGhlIHVwIGZyb250IGFtb3VudCB0aGF0IGFuIGFjY291bnQgbXVzdCBoYXZlIGZvciB0aGlzIHRyYW5zYWN0aW9uIHRvIGJlIHZhbGlkXG4gICAqIEByZXR1cm4ge0JOfVxuICAgKi9cblxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5nZXRVcGZyb250Q29zdCA9IGZ1bmN0aW9uIGdldFVwZnJvbnRDb3N0KCkge1xuICAgIHJldHVybiBuZXcgQk4odGhpcy5nYXNMaW1pdCkuaW11bChuZXcgQk4odGhpcy5nYXNQcmljZSkpLmlhZGQobmV3IEJOKHRoaXMudmFsdWUpKTtcbiAgfTtcblxuICAvKipcbiAgICogdmFsaWRhdGVzIHRoZSBzaWduYXR1cmUgYW5kIGNoZWNrcyB0byBzZWUgaWYgaXQgaGFzIGVub3VnaCBnYXNcbiAgICogQHBhcmFtIHtCb29sZWFufSBbc3RyaW5nRXJyb3I9ZmFsc2VdIHdoZXRoZXIgdG8gcmV0dXJuIGEgc3RyaW5nIHdpdGggYSBkc2NyaXB0aW9uIG9mIHdoeSB0aGUgdmFsaWRhdGlvbiBmYWlsZWQgb3IgcmV0dXJuIGEgQmxvb2xlYW5cbiAgICogQHJldHVybiB7Qm9vbGVhbnxTdHJpbmd9XG4gICAqL1xuXG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoc3RyaW5nRXJyb3IpIHtcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgaWYgKCF0aGlzLnZlcmlmeVNpZ25hdHVyZSgpKSB7XG4gICAgICBlcnJvcnMucHVzaCgnSW52YWxpZCBTaWduYXR1cmUnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXRCYXNlRmVlKCkuY21wKG5ldyBCTih0aGlzLmdhc0xpbWl0KSkgPiAwKSB7XG4gICAgICBlcnJvcnMucHVzaChbJ2dhcyBsaW1pdCBpcyB0b28gbG93LiBOZWVkIGF0IGxlYXN0ICcgKyB0aGlzLmdldEJhc2VGZWUoKV0pO1xuICAgIH1cblxuICAgIGlmIChzdHJpbmdFcnJvciA9PT0gdW5kZWZpbmVkIHx8IHN0cmluZ0Vycm9yID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGVycm9ycy5sZW5ndGggPT09IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvcnMuam9pbignICcpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVHJhbnNhY3Rpb247XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb247IiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5CdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBCdWZmZXIgPSB3aW5kb3cuQnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0IDwgbnVtYmVyLmxlbmd0aCkge1xuICAgICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQsIGVuZGlhbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgICAgIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgICAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleDRCaXRzIChzdHJpbmcsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG4gICAgLy8gJ0EnIC0gJ0YnXG4gICAgaWYgKGMgPj0gNjUgJiYgYyA8PSA3MCkge1xuICAgICAgcmV0dXJuIGMgLSA1NTtcbiAgICAvLyAnYScgLSAnZidcbiAgICB9IGVsc2UgaWYgKGMgPj0gOTcgJiYgYyA8PSAxMDIpIHtcbiAgICAgIHJldHVybiBjIC0gODc7XG4gICAgLy8gJzAnIC0gJzknXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoYyAtIDQ4KSAmIDB4ZjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhleEJ5dGUgKHN0cmluZywgbG93ZXJCb3VuZCwgaW5kZXgpIHtcbiAgICB2YXIgciA9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGluZGV4IC0gMSA+PSBsb3dlckJvdW5kKSB7XG4gICAgICByIHw9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCAtIDEpIDw8IDQ7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCwgZW5kaWFuKSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgLy8gMjQtYml0cyBjaHVua3NcbiAgICB2YXIgb2ZmID0gMDtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgaSAtPSAyKSB7XG4gICAgICAgIHcgPSBwYXJzZUhleEJ5dGUobnVtYmVyLCBzdGFydCwgaSkgPDwgb2ZmO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgJiAweDNmZmZmZmY7XG4gICAgICAgIGlmIChvZmYgPj0gMTgpIHtcbiAgICAgICAgICBvZmYgLT0gMTg7XG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA+Pj4gMjY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmICs9IDg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnNlTGVuZ3RoID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgZm9yIChpID0gcGFyc2VMZW5ndGggJSAyID09PSAwID8gc3RhcnQgKyAxIDogc3RhcnQ7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIEJOIHY1IGluc3RhbmNlXG4gICAgICAgIHIuX3N0cmlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrJyksXG4gICAga2VjY2FrMjI0ID0gX3JlcXVpcmUua2VjY2FrMjI0LFxuICAgIGtlY2NhazM4NCA9IF9yZXF1aXJlLmtlY2NhazM4NCxcbiAgICBrMjU2ID0gX3JlcXVpcmUua2VjY2FrMjU2LFxuICAgIGtlY2NhazUxMiA9IF9yZXF1aXJlLmtlY2NhazUxMjtcblxudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJy4vc2VjcDI1NmsxLWFkYXB0ZXInKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBybHAgPSByZXF1aXJlKCdybHAnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG5PYmplY3QuYXNzaWduKGV4cG9ydHMsIHJlcXVpcmUoJ2V0aGpzLXV0aWwnKSk7XG5cbi8qKlxuICogdGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhpcyBWTSBjYW4gaGFuZGxlIChhIGBgYEJOYGBgKVxuICogQHZhciB7Qk59IE1BWF9JTlRFR0VSXG4gKi9cbmV4cG9ydHMuTUFYX0lOVEVHRVIgPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnLCAxNik7XG5cbi8qKlxuICogMl4yNTYgKGEgYGBgQk5gYGApXG4gKiBAdmFyIHtCTn0gVFdPX1BPVzI1NlxuICovXG5leHBvcnRzLlRXT19QT1cyNTYgPSBuZXcgQk4oJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywgMTYpO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsIChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X05VTExfU1xuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MgPSAnYzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG5leHBvcnRzLlNIQTNfTlVMTF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsIChhIGBgYEJ1ZmZlcmBgYClcbiAqIEB2YXIge0J1ZmZlcn0gS0VDQ0FLMjU2X05VTExcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfTlVMTCA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUywgJ2hleCcpO1xuZXhwb3J0cy5TSEEzX05VTEwgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5IChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X1JMUF9BUlJBWV9TXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gJzFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDcnO1xuZXhwb3J0cy5TSEEzX1JMUF9BUlJBWV9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1M7XG5cbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXkgKGEgYGBgQnVmZmVyYGBgKVxuICogQHZhciB7QnVmZmVyfSBLRUNDQUsyNTZfUkxQX0FSUkFZXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TLCAnaGV4Jyk7XG5leHBvcnRzLlNIQTNfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGwgIChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X1JMUF9TXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gJzU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjEnO1xuZXhwb3J0cy5TSEEzX1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1M7XG5cbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbCAoYSBgYGBCdWZmZXJgYGApXG4gKiBAdmFyIHtCdWZmZXJ9IEtFQ0NBSzI1Nl9STFBcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQID0gQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MsICdoZXgnKTtcbmV4cG9ydHMuU0hBM19STFAgPSBleHBvcnRzLktFQ0NBSzI1Nl9STFA7XG5cbi8qKlxuICogW2BCTmBdKGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzKVxuICogQHZhciB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydHMuQk4gPSBCTjtcblxuLyoqXG4gKiBbYHJscGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bWpzL3JscClcbiAqIEB2YXIge0Z1bmN0aW9ufVxuICovXG5leHBvcnRzLnJscCA9IHJscDtcblxuLyoqXG4gKiBbYHNlY3AyNTZrMWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvc2VjcDI1NmsxLW5vZGUvKVxuICogQHZhciB7T2JqZWN0fVxuICovXG5leHBvcnRzLnNlY3AyNTZrMSA9IHNlY3AyNTZrMTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgYnVmZmVyIGZpbGxlZCB3aXRoIDBzXG4gKiBAbWV0aG9kIHplcm9zXG4gKiBAcGFyYW0ge051bWJlcn0gYnl0ZXMgIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIGJ1ZmZlciBzaG91bGQgYmVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy56ZXJvcyA9IGZ1bmN0aW9uIChieXRlcykge1xuICByZXR1cm4gQnVmZmVyLmFsbG9jVW5zYWZlKGJ5dGVzKS5maWxsKDApO1xufTtcblxuLyoqXG4gICogUmV0dXJucyBhIHplcm8gYWRkcmVzc1xuICAqIEBtZXRob2QgemVyb0FkZHJlc3NcbiAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICovXG5leHBvcnRzLnplcm9BZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYWRkcmVzc0xlbmd0aCA9IDIwO1xuICB2YXIgemVyb0FkZHJlc3MgPSBleHBvcnRzLnplcm9zKGFkZHJlc3NMZW5ndGgpO1xuICByZXR1cm4gZXhwb3J0cy5idWZmZXJUb0hleCh6ZXJvQWRkcmVzcyk7XG59O1xuXG4vKipcbiAqIExlZnQgUGFkcyBhbiBgQXJyYXlgIG9yIGBCdWZmZXJgIHdpdGggbGVhZGluZyB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIE9yIGl0IHRydW5jYXRlcyB0aGUgYmVnaW5uaW5nIGlmIGl0IGV4Y2VlZHMuXG4gKiBAbWV0aG9kIGxzZXRMZW5ndGhcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fSBtc2cgdGhlIHZhbHVlIHRvIHBhZFxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtyaWdodD1mYWxzZV0gd2hldGhlciB0byBzdGFydCBwYWRkaW5nIGZvcm0gdGhlIGxlZnQgb3IgcmlnaHRcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheX1cbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhMZWZ0ID0gZXhwb3J0cy5zZXRMZW5ndGggPSBmdW5jdGlvbiAobXNnLCBsZW5ndGgsIHJpZ2h0KSB7XG4gIHZhciBidWYgPSBleHBvcnRzLnplcm9zKGxlbmd0aCk7XG4gIG1zZyA9IGV4cG9ydHMudG9CdWZmZXIobXNnKTtcbiAgaWYgKHJpZ2h0KSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgIG1zZy5jb3B5KGJ1Zik7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnNsaWNlKDAsIGxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgIG1zZy5jb3B5KGJ1ZiwgbGVuZ3RoIC0gbXNnLmxlbmd0aCk7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnNsaWNlKC1sZW5ndGgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJpZ2h0IFBhZHMgYW4gYEFycmF5YCBvciBgQnVmZmVyYCB3aXRoIGxlYWRpbmcgemVyb3MgdGlsbCBpdCBoYXMgYGxlbmd0aGAgYnl0ZXMuXG4gKiBPciBpdCB0cnVuY2F0ZXMgdGhlIGJlZ2lubmluZyBpZiBpdCBleGNlZWRzLlxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl9IG1zZyB0aGUgdmFsdWUgdG8gcGFkXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIG91dHB1dCBzaG91bGQgYmVcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheX1cbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCkge1xuICByZXR1cm4gZXhwb3J0cy5zZXRMZW5ndGgobXNnLCBsZW5ndGgsIHRydWUpO1xufTtcblxuLyoqXG4gKiBUcmltcyBsZWFkaW5nIHplcm9zIGZyb20gYSBgQnVmZmVyYCBvciBhbiBgQXJyYXlgXG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd9IGFcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheXxTdHJpbmd9XG4gKi9cbmV4cG9ydHMudW5wYWQgPSBleHBvcnRzLnN0cmlwWmVyb3MgPSBmdW5jdGlvbiAoYSkge1xuICBhID0gZXhwb3J0cy5zdHJpcEhleFByZWZpeChhKTtcbiAgdmFyIGZpcnN0ID0gYVswXTtcbiAgd2hpbGUgKGEubGVuZ3RoID4gMCAmJiBmaXJzdC50b1N0cmluZygpID09PSAnMCcpIHtcbiAgICBhID0gYS5zbGljZSgxKTtcbiAgICBmaXJzdCA9IGFbMF07XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuLyoqXG4gKiBBdHRlbXB0cyB0byB0dXJuIGEgdmFsdWUgaW50byBhIGBCdWZmZXJgLiBBcyBpbnB1dCBpdCBzdXBwb3J0cyBgQnVmZmVyYCwgYFN0cmluZ2AsIGBOdW1iZXJgLCBudWxsL3VuZGVmaW5lZCwgYEJOYCBhbmQgb3RoZXIgb2JqZWN0cyB3aXRoIGEgYHRvQXJyYXkoKWAgbWV0aG9kLlxuICogQHBhcmFtIHsqfSB2IHRoZSB2YWx1ZVxuICovXG5leHBvcnRzLnRvQnVmZmVyID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodikpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgdiA9IEJ1ZmZlci5mcm9tKHYpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZXhwb3J0cy5pc0hleFN0cmluZyh2KSkge1xuICAgICAgICB2ID0gQnVmZmVyLmZyb20oZXhwb3J0cy5wYWRUb0V2ZW4oZXhwb3J0cy5zdHJpcEhleFByZWZpeCh2KSksICdoZXgnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYgPSBCdWZmZXIuZnJvbSh2KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgICAgdiA9IGV4cG9ydHMuaW50VG9CdWZmZXIodik7XG4gICAgfSBlbHNlIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgICB9IGVsc2UgaWYgKEJOLmlzQk4odikpIHtcbiAgICAgIHYgPSB2LnRvQXJyYXlMaWtlKEJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgIC8vIGNvbnZlcnRzIGEgQk4gdG8gYSBCdWZmZXJcbiAgICAgIHYgPSBCdWZmZXIuZnJvbSh2LnRvQXJyYXkoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0eXBlJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIHRvIGEgYE51bWJlcmBcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEB0aHJvd3MgSWYgdGhlIGlucHV0IG51bWJlciBleGNlZWRzIDUzIGJpdHMuXG4gKi9cbmV4cG9ydHMuYnVmZmVyVG9JbnQgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHJldHVybiBuZXcgQk4oZXhwb3J0cy50b0J1ZmZlcihidWYpKS50b051bWJlcigpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIGludG8gYSBoZXggYFN0cmluZ2BcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5idWZmZXJUb0hleCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgYnVmID0gZXhwb3J0cy50b0J1ZmZlcihidWYpO1xuICByZXR1cm4gJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4Jyk7XG59O1xuXG4vKipcbiAqIEludGVycHJldHMgYSBgQnVmZmVyYCBhcyBhIHNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGEgYEJOYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbnVtXG4gKiBAcmV0dXJuIHtCTn1cbiAqL1xuZXhwb3J0cy5mcm9tU2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbmV3IEJOKG51bSkuZnJvbVR3b3MoMjU2KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBgQk5gIHRvIGFuIHVuc2lnbmVkIGludGVnZXIgYW5kIHJldHVybnMgaXQgYXMgYSBgQnVmZmVyYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0ge0JOfSBudW1cbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy50b1Vuc2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20obnVtLnRvVHdvcygyNTYpLnRvQXJyYXkoKSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgS2VjY2FrIGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge051bWJlcn0gW2JpdHM9MjU2XSB0aGUgS2VjY2FrIHdpZHRoXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMua2VjY2FrID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgYSA9IGV4cG9ydHMudG9CdWZmZXIoYSk7XG4gIGlmICghYml0cykgYml0cyA9IDI1NjtcblxuICBzd2l0Y2ggKGJpdHMpIHtcbiAgICBjYXNlIDIyNDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazIyNChhKTtcbiAgICAgIH1cbiAgICBjYXNlIDI1NjpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGsyNTYoYSk7XG4gICAgICB9XG4gICAgY2FzZSAzODQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBrZWNjYWszODQoYSk7XG4gICAgICB9XG4gICAgY2FzZSA1MTI6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBrZWNjYWs1MTIoYSk7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGQgYWxnb3JpdGhtOiBrZWNjYWsnICsgYml0cyk7XG4gICAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIGlucHV0LCBhbGlhcyBmb3Iga2VjY2FrKGEsIDI1NilcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXJ9IGEgdGhlIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5rZWNjYWsyNTYgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gZXhwb3J0cy5rZWNjYWsoYSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgKEtlY2NhaykgaGFzaCBvZiB0aGUgaW5wdXQgW09CU09MRVRFXVxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcn0gYSB0aGUgaW5wdXQgZGF0YVxuICogQHBhcmFtIHtOdW1iZXJ9IFtiaXRzPTI1Nl0gdGhlIFNIQS0zIHdpZHRoXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2hhMyA9IGV4cG9ydHMua2VjY2FrO1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBMjU2IGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2hhMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgYSA9IGV4cG9ydHMudG9CdWZmZXIoYSk7XG4gIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgUklQRU1EMTYwIGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBhZGRlZCB3aGV0aGVyIGl0IHNob3VsZCBiZSBwYWRkZWQgdG8gMjU2IGJpdHMgb3Igbm90XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucmlwZW1kMTYwID0gZnVuY3Rpb24gKGEsIHBhZGRlZCkge1xuICBhID0gZXhwb3J0cy50b0J1ZmZlcihhKTtcbiAgdmFyIGhhc2ggPSBjcmVhdGVIYXNoKCdybWQxNjAnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG4gIGlmIChwYWRkZWQgPT09IHRydWUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5zZXRMZW5ndGgoaGFzaCwgMzIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoYXNoO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgaGFzaCBvZiB0aGUgUkxQIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXRcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXJ9IGEgdGhlIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5ybHBoYXNoID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIGV4cG9ydHMua2VjY2FrKHJscC5lbmNvZGUoYSkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHByaXZhdGUga2V5IHNhdGlzZmllcyB0aGUgcnVsZXMgb2YgdGhlIGN1cnZlIHNlY3AyNTZrMS5cbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRQcml2YXRlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgcmV0dXJuIHNlY3AyNTZrMS5wcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHB1YmxpYyBrZXkgc2F0aXNmaWVzIHRoZSBydWxlcyBvZiB0aGUgY3VydmUgc2VjcDI1NmsxXG4gKiBhbmQgdGhlIHJlcXVpcmVtZW50cyBvZiBFdGhlcmV1bS5cbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleSwgdW5sZXNzIHNhbml0aXplIGlzIGVuYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3Nhbml0aXplPWZhbHNlXSBBY2NlcHQgcHVibGljIGtleXMgaW4gb3RoZXIgZm9ybWF0c1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5pc1ZhbGlkUHVibGljID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgc2FuaXRpemUpIHtcbiAgaWYgKHB1YmxpY0tleS5sZW5ndGggPT09IDY0KSB7XG4gICAgLy8gQ29udmVydCB0byBTRUMxIGZvciBzZWNwMjU2azFcbiAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbNF0pLCBwdWJsaWNLZXldKSk7XG4gIH1cblxuICBpZiAoIXNhbml0aXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlWZXJpZnkocHVibGljS2V5KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHB1YmxpYyBrZXkuXG4gKiBBY2NlcHRzIFwiRXRoZXJldW0gcHVibGljIGtleXNcIiBhbmQgU0VDMSBlbmNvZGVkIGtleXMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHViS2V5IFRoZSB0d28gcG9pbnRzIG9mIGFuIHVuY29tcHJlc3NlZCBrZXksIHVubGVzcyBzYW5pdGl6ZSBpcyBlbmFibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtzYW5pdGl6ZT1mYWxzZV0gQWNjZXB0IHB1YmxpYyBrZXlzIGluIG90aGVyIGZvcm1hdHNcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJUb0FkZHJlc3MgPSBleHBvcnRzLnB1YmxpY1RvQWRkcmVzcyA9IGZ1bmN0aW9uIChwdWJLZXksIHNhbml0aXplKSB7XG4gIHB1YktleSA9IGV4cG9ydHMudG9CdWZmZXIocHViS2V5KTtcbiAgaWYgKHNhbml0aXplICYmIHB1YktleS5sZW5ndGggIT09IDY0KSB7XG4gICAgcHViS2V5ID0gc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQocHViS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG4gIH1cbiAgYXNzZXJ0KHB1YktleS5sZW5ndGggPT09IDY0KTtcbiAgLy8gT25seSB0YWtlIHRoZSBsb3dlciAxNjBiaXRzIG9mIHRoZSBoYXNoXG4gIHJldHVybiBleHBvcnRzLmtlY2NhayhwdWJLZXkpLnNsaWNlKC0yMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIHB1YmxpYyBrZXkgb2YgYSBnaXZlbiBwcml2YXRlIGtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHByaXZhdGVUb1B1YmxpYyA9IGV4cG9ydHMucHJpdmF0ZVRvUHVibGljID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgcHJpdmF0ZUtleSA9IGV4cG9ydHMudG9CdWZmZXIocHJpdmF0ZUtleSk7XG4gIC8vIHNraXAgdGhlIHR5cGUgZmxhZyBhbmQgdXNlIHRoZSBYLCBZIHBvaW50c1xuICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShwcml2YXRlS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgcHVibGljIGtleSB0byB0aGUgRXRoZXJldW0gZm9ybWF0LlxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIChwdWJsaWNLZXkpIHtcbiAgcHVibGljS2V5ID0gZXhwb3J0cy50b0J1ZmZlcihwdWJsaWNLZXkpO1xuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gNjQpIHtcbiAgICBwdWJsaWNLZXkgPSBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChwdWJsaWNLZXksIGZhbHNlKS5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gcHVibGljS2V5O1xufTtcblxuLyoqXG4gKiBFQ0RTQSBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbXNnSGFzaFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0cy5lY3NpZ24gPSBmdW5jdGlvbiAobXNnSGFzaCwgcHJpdmF0ZUtleSkge1xuICB2YXIgc2lnID0gc2VjcDI1NmsxLnNpZ24obXNnSGFzaCwgcHJpdmF0ZUtleSk7XG5cbiAgdmFyIHJldCA9IHt9O1xuICByZXQuciA9IHNpZy5zaWduYXR1cmUuc2xpY2UoMCwgMzIpO1xuICByZXQucyA9IHNpZy5zaWduYXR1cmUuc2xpY2UoMzIsIDY0KTtcbiAgcmV0LnYgPSBzaWcucmVjb3ZlcnkgKyAyNztcbiAgcmV0dXJuIHJldDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUga2VjY2FrLTI1NiBoYXNoIG9mIGBtZXNzYWdlYCwgcHJlZml4ZWQgd2l0aCB0aGUgaGVhZGVyIHVzZWQgYnkgdGhlIGBldGhfc2lnbmAgUlBDIGNhbGwuXG4gKiBUaGUgb3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24gY2FuIGJlIGZlZCBpbnRvIGBlY3NpZ25gIHRvIHByb2R1Y2UgdGhlIHNhbWUgc2lnbmF0dXJlIGFzIHRoZSBgZXRoX3NpZ25gXG4gKiBjYWxsIGZvciBhIGdpdmVuIGBtZXNzYWdlYCwgb3IgZmVkIHRvIGBlY3JlY292ZXJgIGFsb25nIHdpdGggYSBzaWduYXR1cmUgdG8gcmVjb3ZlciB0aGUgcHVibGljIGtleVxuICogdXNlZCB0byBwcm9kdWNlIHRoZSBzaWduYXR1cmUuXG4gKiBAcGFyYW0gbWVzc2FnZVxuICogQHJldHVybnMge0J1ZmZlcn0gaGFzaFxuICovXG5leHBvcnRzLmhhc2hQZXJzb25hbE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICB2YXIgcHJlZml4ID0gZXhwb3J0cy50b0J1ZmZlcignXFx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG4nICsgbWVzc2FnZS5sZW5ndGgudG9TdHJpbmcoKSk7XG4gIHJldHVybiBleHBvcnRzLmtlY2NhayhCdWZmZXIuY29uY2F0KFtwcmVmaXgsIG1lc3NhZ2VdKSk7XG59O1xuXG4vKipcbiAqIEVDRFNBIHB1YmxpYyBrZXkgcmVjb3ZlcnkgZnJvbSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBtc2dIYXNoXG4gKiBAcGFyYW0ge051bWJlcn0gdlxuICogQHBhcmFtIHtCdWZmZXJ9IHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IHB1YmxpY0tleVxuICovXG5leHBvcnRzLmVjcmVjb3ZlciA9IGZ1bmN0aW9uIChtc2dIYXNoLCB2LCByLCBzKSB7XG4gIHZhciBzaWduYXR1cmUgPSBCdWZmZXIuY29uY2F0KFtleHBvcnRzLnNldExlbmd0aChyLCAzMiksIGV4cG9ydHMuc2V0TGVuZ3RoKHMsIDMyKV0sIDY0KTtcbiAgdmFyIHJlY292ZXJ5ID0gdiAtIDI3O1xuICBpZiAocmVjb3ZlcnkgIT09IDAgJiYgcmVjb3ZlcnkgIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgfVxuICB2YXIgc2VuZGVyUHViS2V5ID0gc2VjcDI1NmsxLnJlY292ZXIobXNnSGFzaCwgc2lnbmF0dXJlLCByZWNvdmVyeSk7XG4gIHJldHVybiBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChzZW5kZXJQdWJLZXksIGZhbHNlKS5zbGljZSgxKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBzaWduYXR1cmUgcGFyYW1ldGVycyBpbnRvIHRoZSBmb3JtYXQgb2YgYGV0aF9zaWduYCBSUEMgbWV0aG9kXG4gKiBAcGFyYW0ge051bWJlcn0gdlxuICogQHBhcmFtIHtCdWZmZXJ9IHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHNpZ1xuICovXG5leHBvcnRzLnRvUnBjU2lnID0gZnVuY3Rpb24gKHYsIHIsIHMpIHtcbiAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgaWYgKHYgIT09IDI3ICYmIHYgIT09IDI4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlY292ZXJ5IGlkJyk7XG4gIH1cblxuICAvLyBnZXRoIChhbmQgdGhlIFJQQyBldGhfc2lnbiBtZXRob2QpIHVzZXMgdGhlIDY1IGJ5dGUgZm9ybWF0IHVzZWQgYnkgQml0Y29pblxuICAvLyBGSVhNRTogdGhpcyBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1M1xuICByZXR1cm4gZXhwb3J0cy5idWZmZXJUb0hleChCdWZmZXIuY29uY2F0KFtleHBvcnRzLnNldExlbmd0aExlZnQociwgMzIpLCBleHBvcnRzLnNldExlbmd0aExlZnQocywgMzIpLCBleHBvcnRzLnRvQnVmZmVyKHYgLSAyNyldKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgc2lnbmF0dXJlIGZvcm1hdCBvZiB0aGUgYGV0aF9zaWduYCBSUEMgbWV0aG9kIHRvIHNpZ25hdHVyZSBwYXJhbWV0ZXJzXG4gKiBOT1RFOiBhbGwgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBnZXRoOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaWdcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0cy5mcm9tUnBjU2lnID0gZnVuY3Rpb24gKHNpZykge1xuICBzaWcgPSBleHBvcnRzLnRvQnVmZmVyKHNpZyk7XG5cbiAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgaWYgKHNpZy5sZW5ndGggIT09IDY1KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBsZW5ndGgnKTtcbiAgfVxuXG4gIHZhciB2ID0gc2lnWzY0XTtcbiAgLy8gc3VwcG9ydCBib3RoIHZlcnNpb25zIG9mIGBldGhfc2lnbmAgcmVzcG9uc2VzXG4gIGlmICh2IDwgMjcpIHtcbiAgICB2ICs9IDI3O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2OiB2LFxuICAgIHI6IHNpZy5zbGljZSgwLCAzMiksXG4gICAgczogc2lnLnNsaWNlKDMyLCA2NClcbiAgfTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHByaXZhdGUga2V5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNUb0FkZHJlc3MocHJpdmF0ZVRvUHVibGljKHByaXZhdGVLZXkpKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQuIEFjY2VwdHMgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIHRvb1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuaXNWYWxpZEFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICByZXR1cm4gKC9eMHhbMC05YS1mQS1GXXs0MH0kLy50ZXN0KGFkZHJlc3MpXG4gICk7XG59O1xuXG4vKipcbiAgKiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGlzIGEgemVybyBhZGRyZXNzXG4gICogQG1ldGhvZCBpc1plcm9BZGRyZXNzXG4gICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAqL1xuZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgdmFyIHplcm9BZGRyZXNzID0gZXhwb3J0cy56ZXJvQWRkcmVzcygpO1xuICByZXR1cm4gemVyb0FkZHJlc3MgPT09IGV4cG9ydHMuYWRkSGV4UHJlZml4KGFkZHJlc3MpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2tzdW1tZWQgYWRkcmVzc1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gIGFkZHJlc3MgPSBleHBvcnRzLnN0cmlwSGV4UHJlZml4KGFkZHJlc3MpLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBoYXNoID0gZXhwb3J0cy5rZWNjYWsoYWRkcmVzcykudG9TdHJpbmcoJ2hleCcpO1xuICB2YXIgcmV0ID0gJzB4JztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZHJlc3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocGFyc2VJbnQoaGFzaFtpXSwgMTYpID49IDgpIHtcbiAgICAgIHJldCArPSBhZGRyZXNzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCArPSBhZGRyZXNzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgYWRkcmVzcyBpcyBhIHZhbGlkIGNoZWNrc3VtbWVkIGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICByZXR1cm4gZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzKSAmJiBleHBvcnRzLnRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpID09PSBhZGRyZXNzO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBvZiBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3RcbiAqIEBwYXJhbSB7QnVmZmVyfSBmcm9tIHRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBub25jZSB0aGUgbm9uY2Ugb2YgdGhlIGZyb20gYWNjb3VudFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmdlbmVyYXRlQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tLCBub25jZSkge1xuICBmcm9tID0gZXhwb3J0cy50b0J1ZmZlcihmcm9tKTtcbiAgbm9uY2UgPSBuZXcgQk4obm9uY2UpO1xuXG4gIGlmIChub25jZS5pc1plcm8oKSkge1xuICAgIC8vIGluIFJMUCB3ZSB3YW50IHRvIGVuY29kZSBudWxsIGluIHRoZSBjYXNlIG9mIHplcm8gbm9uY2VcbiAgICAvLyByZWFkIHRoZSBSTFAgZG9jdW1lbnRhdGlvbiBmb3IgYW4gYW5zd2VyIGlmIHlvdSBkYXJlXG4gICAgbm9uY2UgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIG5vbmNlID0gQnVmZmVyLmZyb20obm9uY2UudG9BcnJheSgpKTtcbiAgfVxuXG4gIC8vIE9ubHkgdGFrZSB0aGUgbG93ZXIgMTYwYml0cyBvZiB0aGUgaGFzaFxuICByZXR1cm4gZXhwb3J0cy5ybHBoYXNoKFtmcm9tLCBub25jZV0pLnNsaWNlKC0yMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3VwcGxpZWQgYWRkcmVzcyBiZWxvbmdzIHRvIGEgcHJlY29tcGlsZWQgYWNjb3VudCAoQnl6YW50aXVtKVxuICogQHBhcmFtIHtCdWZmZXJ8U3RyaW5nfSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzUHJlY29tcGlsZWQgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICB2YXIgYSA9IGV4cG9ydHMudW5wYWQoYWRkcmVzcyk7XG4gIHJldHVybiBhLmxlbmd0aCA9PT0gMSAmJiBhWzBdID49IDEgJiYgYVswXSA8PSA4O1xufTtcblxuLyoqXG4gKiBBZGRzIFwiMHhcIiB0byBhIGdpdmVuIGBTdHJpbmdgIGlmIGl0IGRvZXMgbm90IGFscmVhZHkgc3RhcnQgd2l0aCBcIjB4XCJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5pc0hleFByZWZpeGVkKHN0cikgPyBzdHIgOiAnMHgnICsgc3RyO1xufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBFQ0RTQSBzaWduYXR1cmVcbiAqIEBtZXRob2QgaXNWYWxpZFNpZ25hdHVyZVxuICogQHBhcmFtIHtCdWZmZXJ9IHZcbiAqIEBwYXJhbSB7QnVmZmVyfSByXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc1xuICogQHBhcmFtIHtCb29sZWFufSBbaG9tZXN0ZWFkPXRydWVdXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGZ1bmN0aW9uICh2LCByLCBzLCBob21lc3RlYWQpIHtcbiAgdmFyIFNFQ1AyNTZLMV9OX0RJVl8yID0gbmV3IEJOKCc3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjVkNTc2ZTczNTdhNDUwMWRkZmU5MmY0NjY4MWIyMGEwJywgMTYpO1xuICB2YXIgU0VDUDI1NksxX04gPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnLCAxNik7XG5cbiAgaWYgKHIubGVuZ3RoICE9PSAzMiB8fCBzLmxlbmd0aCAhPT0gMzIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodiAhPT0gMjcgJiYgdiAhPT0gMjgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByID0gbmV3IEJOKHIpO1xuICBzID0gbmV3IEJOKHMpO1xuXG4gIGlmIChyLmlzWmVybygpIHx8IHIuZ3QoU0VDUDI1NksxX04pIHx8IHMuaXNaZXJvKCkgfHwgcy5ndChTRUNQMjU2SzFfTikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaG9tZXN0ZWFkID09PSBmYWxzZSAmJiBuZXcgQk4ocykuY21wKFNFQ1AyNTZLMV9OX0RJVl8yKSA9PT0gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIG9yIGBBcnJheWAgdG8gSlNPTlxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl9IGJhXG4gKiBAcmV0dXJuIHtBcnJheXxTdHJpbmd8bnVsbH1cbiAqL1xuZXhwb3J0cy5iYVRvSlNPTiA9IGZ1bmN0aW9uIChiYSkge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJhKSkge1xuICAgIHJldHVybiAnMHgnICsgYmEudG9TdHJpbmcoJ2hleCcpO1xuICB9IGVsc2UgaWYgKGJhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJheS5wdXNoKGV4cG9ydHMuYmFUb0pTT04oYmFbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG59O1xuXG4vKipcbiAqIERlZmluZXMgcHJvcGVydGllcyBvbiBhIGBPYmplY3RgLiBJdCBtYWtlIHRoZSBhc3N1bXB0aW9uIHRoYXQgdW5kZXJseWluZyBkYXRhIGlzIGJpbmFyeS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIHRoZSBgT2JqZWN0YCB0byBkZWZpbmUgcHJvcGVydGllcyBvblxuICogQHBhcmFtIHtBcnJheX0gZmllbGRzIGFuIGFycmF5IGZpZWxkcyB0byBkZWZpbmUuIEZpZWxkcyBjYW4gY29udGFpbjpcbiAqICogYG5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnRpZXNcbiAqICogYGxlbmd0aGAgLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBmaWVsZCBjYW4gaGF2ZVxuICogKiBgYWxsb3dMZXNzYCAtIGlmIHRoZSBmaWVsZCBjYW4gYmUgbGVzcyB0aGFuIHRoZSBsZW5ndGhcbiAqICogYGFsbG93RW1wdHlgXG4gKiBAcGFyYW0geyp9IGRhdGEgZGF0YSB0byBiZSB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgZGVmaW5pdGlvbnNcbiAqL1xuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHNlbGYsIGZpZWxkcywgZGF0YSkge1xuICBzZWxmLnJhdyA9IFtdO1xuICBzZWxmLl9maWVsZHMgPSBbXTtcblxuICAvLyBhdHRhY2ggdGhlIGB0b0pTT05gXG4gIHNlbGYudG9KU09OID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICB2YXIgb2JqID0ge307XG4gICAgICBzZWxmLl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgb2JqW2ZpZWxkXSA9ICcweCcgKyBzZWxmW2ZpZWxkXS50b1N0cmluZygnaGV4Jyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzLmJhVG9KU09OKHRoaXMucmF3KTtcbiAgfTtcblxuICBzZWxmLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gcmxwLmVuY29kZShzZWxmLnJhdyk7XG4gIH07XG5cbiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkLCBpKSB7XG4gICAgc2VsZi5fZmllbGRzLnB1c2goZmllbGQubmFtZSk7XG4gICAgZnVuY3Rpb24gZ2V0dGVyKCkge1xuICAgICAgcmV0dXJuIHNlbGYucmF3W2ldO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXR0ZXIodikge1xuICAgICAgdiA9IGV4cG9ydHMudG9CdWZmZXIodik7XG5cbiAgICAgIGlmICh2LnRvU3RyaW5nKCdoZXgnKSA9PT0gJzAwJyAmJiAhZmllbGQuYWxsb3daZXJvKSB7XG4gICAgICAgIHYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZC5hbGxvd0xlc3MgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgIHYgPSBleHBvcnRzLnN0cmlwWmVyb3Modik7XG4gICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPj0gdi5sZW5ndGgsICdUaGUgZmllbGQgJyArIGZpZWxkLm5hbWUgKyAnIG11c3Qgbm90IGhhdmUgbW9yZSAnICsgZmllbGQubGVuZ3RoICsgJyBieXRlcycpO1xuICAgICAgfSBlbHNlIGlmICghKGZpZWxkLmFsbG93WmVybyAmJiB2Lmxlbmd0aCA9PT0gMCkgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPT09IHYubGVuZ3RoLCAnVGhlIGZpZWxkICcgKyBmaWVsZC5uYW1lICsgJyBtdXN0IGhhdmUgYnl0ZSBsZW5ndGggb2YgJyArIGZpZWxkLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYucmF3W2ldID0gdjtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgZmllbGQubmFtZSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZ2V0dGVyLFxuICAgICAgc2V0OiBzZXR0ZXJcbiAgICB9KTtcblxuICAgIGlmIChmaWVsZC5kZWZhdWx0KSB7XG4gICAgICBzZWxmW2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdDtcbiAgICB9XG5cbiAgICAvLyBhdHRhY2ggYWxpYXNcbiAgICBpZiAoZmllbGQuYWxpYXMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBmaWVsZC5hbGlhcywge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgZ2V0OiBnZXR0ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaWYgdGhlIGNvbnN0dWN0b3IgaXMgcGFzc2VkIGRhdGFcbiAgaWYgKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBkYXRhID0gQnVmZmVyLmZyb20oZXhwb3J0cy5zdHJpcEhleFByZWZpeChkYXRhKSwgJ2hleCcpO1xuICAgIH1cblxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBybHAuZGVjb2RlKGRhdGEpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiBzZWxmLl9maWVsZHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignd3JvbmcgbnVtYmVyIG9mIGZpZWxkcyBpbiBkYXRhJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSBhbGwgdGhlIGl0ZW1zIGFyZSBidWZmZXJzXG4gICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgc2VsZltzZWxmLl9maWVsZHNbaV1dID0gZXhwb3J0cy50b0J1ZmZlcihkKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkYXRhKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIGlmIChrZXlzLmluZGV4T2YoZmllbGQubmFtZSkgIT09IC0xKSBzZWxmW2ZpZWxkLm5hbWVdID0gZGF0YVtmaWVsZC5uYW1lXTtcbiAgICAgICAgaWYgKGtleXMuaW5kZXhPZihmaWVsZC5hbGlhcykgIT09IC0xKSBzZWxmW2ZpZWxkLmFsaWFzXSA9IGRhdGFbZmllbGQuYWxpYXNdO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBkYXRhJyk7XG4gICAgfVxuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azEnKTtcblxudmFyIHNlY3AyNTZrMXYzID0gcmVxdWlyZSgnLi9zZWNwMjU2azEtbGliL2luZGV4Jyk7XG52YXIgZGVyID0gcmVxdWlyZSgnLi9zZWNwMjU2azEtbGliL2RlcicpO1xuXG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBwcml2YXRlS2V5XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlWZXJpZnlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgcHJpdmF0ZUtleVZlcmlmeSA9IGZ1bmN0aW9uIHByaXZhdGVLZXlWZXJpZnkocHJpdmF0ZUtleSkge1xuICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwcml2YXRlS2V5IGxlbmd0aCBpcyBub3QgMzJcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBzZWNwMjU2azEucHJpdmF0ZUtleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpO1xufTtcblxuLyoqXG4gKiBFeHBvcnQgYSBwcml2YXRlS2V5IGluIERFUiBmb3JtYXRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleUV4cG9ydFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xudmFyIHByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiBwcml2YXRlS2V5RXhwb3J0KHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgLy8gcHJpdmF0ZUtleUV4cG9ydCBtZXRob2QgaXMgbm90IHBhcnQgb2Ygc2VjcDI1NmsxIHY0IHBhY2thZ2VcbiAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ByaXZhdGUga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICB2YXIgcHVibGljS2V5ID0gc2VjcDI1NmsxdjMucHJpdmF0ZUtleUV4cG9ydChwcml2YXRlS2V5LCBjb21wcmVzc2VkKTtcblxuICByZXR1cm4gZGVyLnByaXZhdGVLZXlFeHBvcnQocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKTtcbn07XG5cbi8qKlxuICogSW1wb3J0IGEgcHJpdmF0ZUtleSBpbiBERVIgZm9ybWF0XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlJbXBvcnRcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cblxudmFyIHByaXZhdGVLZXlJbXBvcnQgPSBmdW5jdGlvbiBwcml2YXRlS2V5SW1wb3J0KHByaXZhdGVLZXkpIHtcbiAgLy8gcHJpdmF0ZUtleUltcG9ydCBtZXRob2QgaXMgbm90IHBhcnQgb2Ygc2VjcDI1NmsxIHY0IHBhY2thZ2VcbiAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICBwcml2YXRlS2V5ID0gZGVyLnByaXZhdGVLZXlJbXBvcnQocHJpdmF0ZUtleSk7XG4gIGlmIChwcml2YXRlS2V5ICE9PSBudWxsICYmIHByaXZhdGVLZXkubGVuZ3RoID09PSAzMiAmJiBwcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpKSB7XG4gICAgcmV0dXJuIHByaXZhdGVLZXk7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZG4ndCBpbXBvcnQgZnJvbSBERVIgZm9ybWF0XCIpO1xufTtcblxuLyoqXG4gKiBOZWdhdGUgYSBwcml2YXRlS2V5IGJ5IHN1YnRyYWN0aW5nIGl0IGZyb20gdGhlIG9yZGVyIG9mIHRoZSBjdXJ2ZSdzIGJhc2UgcG9pbnRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleU5lZ2F0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHByaXZhdGVLZXlOZWdhdGUgPSBmdW5jdGlvbiBwcml2YXRlS2V5TmVnYXRlKHByaXZhdGVLZXkpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5TmVnYXRlKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSkpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBpbnZlcnNlIG9mIGEgcHJpdmF0ZUtleSAobW9kdWxvIHRoZSBvcmRlciBvZiB0aGUgY3VydmUncyBiYXNlIHBvaW50KS5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleU1vZEludmVyc2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5TW9kSW52ZXJzZSA9IGZ1bmN0aW9uIHByaXZhdGVLZXlNb2RJbnZlcnNlKHByaXZhdGVLZXkpIHtcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJpdmF0ZSBrZXkgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azF2My5wcml2YXRlS2V5TW9kSW52ZXJzZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpKTtcbn07XG5cbi8qKlxuICogVHdlYWsgYSBwcml2YXRlS2V5IGJ5IGFkZGluZyB0d2VhayB0byBpdC5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrQWRkXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5VHdlYWtBZGQgPSBmdW5jdGlvbiBwcml2YXRlS2V5VHdlYWtBZGQocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtBZGQoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB0d2VhaykpO1xufTtcblxuLyoqXG4gKiBUd2VhayBhIHByaXZhdGVLZXkgYnkgbXVsdGlwbHlpbmcgaXQgYnkgYSB0d2Vhay5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrTXVsXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5VHdlYWtNdWwgPSBmdW5jdGlvbiBwcml2YXRlS2V5VHdlYWtNdWwocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtNdWwoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCBVaW50OEFycmF5LmZyb20odHdlYWspKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIHB1YmxpYyBrZXkgZm9yIGEgcHJpdmF0ZUtleS5cbiAqIEBtZXRob2QgcHVibGljS2V5Q3JlYXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwdWJsaWNLZXlDcmVhdGUgPSBmdW5jdGlvbiBwdWJsaWNLZXlDcmVhdGUocHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIGNvbXByZXNzZWQpKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIHB1YmxpY0tleSB0byBjb21wcmVzc2VkIG9yIHVuY29tcHJlc3NlZCBmb3JtLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb252ZXJ0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHB1YmxpY0tleUNvbnZlcnQgPSBmdW5jdGlvbiBwdWJsaWNLZXlDb252ZXJ0KHB1YmxpY0tleSwgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIGNvbXByZXNzZWQpKTtcbn07XG5cbi8qKlxuICogVmVyaWZ5IGFuIEVDRFNBIHB1YmxpY0tleS5cbiAqIEBtZXRob2QgcHVibGljS2V5VmVyaWZ5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgcHVibGljS2V5VmVyaWZ5ID0gZnVuY3Rpb24gcHVibGljS2V5VmVyaWZ5KHB1YmxpY0tleSkge1xuICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwdWJsaWNLZXkgbGVuZ3RoIGlzIG5vdCAzMyBvciA2NVxuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gMzMgJiYgcHVibGljS2V5Lmxlbmd0aCAhPT0gNjUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG59O1xuXG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IGFkZGluZyB0d2VhayB0aW1lcyB0aGUgZ2VuZXJhdG9yIHRvIGl0LlxuICogQG1ldGhvZCBwdWJsaWNLZXlUd2Vha0FkZFxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHB1YmxpY0tleVR3ZWFrQWRkID0gZnVuY3Rpb24gcHVibGljS2V5VHdlYWtBZGQocHVibGljS2V5LCB0d2VhaywgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleVR3ZWFrQWRkKFVpbnQ4QXJyYXkuZnJvbShwdWJsaWNLZXkpLCBVaW50OEFycmF5LmZyb20odHdlYWspLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IG11bHRpcGx5aW5nIGl0IGJ5IGEgdHdlYWsgdmFsdWVcbiAqIEBtZXRob2QgcHVibGljS2V5VHdlYWtNdWxcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSB0d2Vha1xuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwdWJsaWNLZXlUd2Vha011bCA9IGZ1bmN0aW9uIHB1YmxpY0tleVR3ZWFrTXVsKHB1YmxpY0tleSwgdHdlYWssIGNvbXByZXNzZWQpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wdWJsaWNLZXlUd2Vha011bChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHR3ZWFrKSwgY29tcHJlc3NlZCkpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBnaXZlbiBwdWJsaWNLZXlzIHRvZ2V0aGVyLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb21iaW5lXG4gKiBAcGFyYW0ge0FycmF5PEJ1ZmZlcj59IHB1YmxpY0tleXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgcHVibGljS2V5Q29tYmluZSA9IGZ1bmN0aW9uIHB1YmxpY0tleUNvbWJpbmUocHVibGljS2V5cywgY29tcHJlc3NlZCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBwdWJsaWNLZXlzLmZvckVhY2goZnVuY3Rpb24gKHB1YmxpY0tleSkge1xuICAgIGtleXMucHVzaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG4gIH0pO1xuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5Q29tYmluZShrZXlzLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBzaWduYXR1cmUgdG8gYSBub3JtYWxpemVkIGxvd2VyLVMgZm9ybS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlTm9ybWFsaXplXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVOb3JtYWxpemUgPSBmdW5jdGlvbiBzaWduYXR1cmVOb3JtYWxpemUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlTm9ybWFsaXplKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFNlcmlhbGl6ZSBhbiBFQ0RTQSBzaWduYXR1cmUgaW4gREVSIGZvcm1hdC5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlRXhwb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVFeHBvcnQgPSBmdW5jdGlvbiBzaWduYXR1cmVFeHBvcnQoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlRXhwb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAoZm9sbG93IGJ5IFtCSVA2Nl0oaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDA2Ni5tZWRpYXdpa2kpKS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlSW1wb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVJbXBvcnQgPSBmdW5jdGlvbiBzaWduYXR1cmVJbXBvcnQoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlSW1wb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAobm90IGZvbGxvdyBieSBbQklQNjZdKGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNjYubWVkaWF3aWtpKSkuXG4gKiBAbWV0aG9kIHNpZ25hdHVyZUltcG9ydExheFxuICogQHBhcmFtIHtCdWZmZXJ9IHNpZ25hdHVyZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gc2lnbmF0dXJlSW1wb3J0TGF4KHNpZ25hdHVyZSkge1xuICAvLyBzaWduYXR1cmVJbXBvcnRMYXggbWV0aG9kIGlzIG5vdCBwYXJ0IG9mIHNlY3AyNTZrMSB2NCBwYWNrYWdlXG4gIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdjNcbiAgLy8gZW5zdXJlIHRoYXQgc2lnbmF0dXJlIGlzIGdyZWF0ZXIgdGhhbiAwXG4gIGlmIChzaWduYXR1cmUubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NpZ25hdHVyZSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgdmFyIHNpZ09iaiA9IGRlci5zaWduYXR1cmVJbXBvcnRMYXgoc2lnbmF0dXJlKTtcbiAgaWYgKHNpZ09iaiA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvdWxkbid0IHBhcnNlIERFUiBzaWduYXR1cmVcIik7XG4gIH1cblxuICByZXR1cm4gc2VjcDI1NmsxdjMuc2lnbmF0dXJlSW1wb3J0KHNpZ09iaik7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFQ0RTQSBzaWduYXR1cmUuIEFsd2F5cyByZXR1cm4gbG93LVMgc2lnbmF0dXJlLlxuICogQG1ldGhvZCBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWVzc2FnZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBzaG91bGQgYmUgYW4gT2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgc2lnbk9wdGlvbnMgPSB2b2lkIDA7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBzaWduT3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5kYXRhIHNob3VsZCBiZSBhIEJ1ZmZlcicpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIC8vIHZhbGlkYXRlIG9wdGlvbi5kYXRhIGxlbmd0aFxuICAgICAgaWYgKG9wdGlvbnMuZGF0YS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvcHRpb25zLmRhdGEgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgICAgIH1cblxuICAgICAgc2lnbk9wdGlvbnMuZGF0YSA9IG5ldyBVaW50OEFycmF5KG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9uY2VmbiA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5ub25jZWZuIHNob3VsZCBiZSBhIEZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9uY2Vmbikge1xuICAgICAgLy8gIGNvbnZlcnQgb3B0aW9uLm5vbmNlZm4gZnVuY3Rpb24gc2lnbmF0dXJlXG4gICAgICBzaWduT3B0aW9ucy5ub25jZWZuID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHByaXZhdGVLZXksIGFsZ28sIGRhdGEsIGF0dGVtcHQpIHtcbiAgICAgICAgdmFyIGJ1ZmZlckFsZ28gPSBhbGdvICE9IG51bGwgPyBCdWZmZXIuZnJvbShhbGdvKSA6IG51bGw7XG4gICAgICAgIHZhciBidWZmZXJEYXRhID0gZGF0YSAhPSBudWxsID8gQnVmZmVyLmZyb20oZGF0YSkgOiBudWxsO1xuXG4gICAgICAgIHZhciBidWZmZXIgPSBCdWZmZXIuZnJvbSgnJyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm9uY2Vmbikge1xuICAgICAgICAgIGJ1ZmZlciA9IG9wdGlvbnMubm9uY2VmbihCdWZmZXIuZnJvbShtZXNzYWdlKSwgQnVmZmVyLmZyb20ocHJpdmF0ZUtleSksIGJ1ZmZlckFsZ28sIGJ1ZmZlckRhdGEsIGF0dGVtcHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShidWZmZXIpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgc2lnID0gc2VjcDI1NmsxLmVjZHNhU2lnbihVaW50OEFycmF5LmZyb20obWVzc2FnZSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgc2lnbk9wdGlvbnMpO1xuXG4gIHJldHVybiB7XG4gICAgc2lnbmF0dXJlOiBCdWZmZXIuZnJvbShzaWcuc2lnbmF0dXJlKSxcbiAgICByZWNvdmVyeTogc2lnLnJlY2lkXG4gIH07XG59O1xuXG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHZlcmlmeVxuICogQHBhcmFtIHtCdWZmZXJ9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnZhciB2ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgLy8gbm90ZTogc2VjcDI1NmsxIHY0IHZlcmlmeSBtZXRob2QgaGFzIGEgZGlmZmVyZW50IGFyZ3VtZW50IG9yZGVyXG4gIHJldHVybiBzZWNwMjU2azEuZWNkc2FWZXJpZnkoVWludDhBcnJheS5mcm9tKHNpZ25hdHVyZSksIFVpbnQ4QXJyYXkuZnJvbShtZXNzYWdlKSwgcHVibGljS2V5KTtcbn07XG5cbi8qKlxuICogUmVjb3ZlciBhbiBFQ0RTQSBwdWJsaWMga2V5IGZyb20gYSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHJlY292ZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcGFyYW0ge051bWJlcn0gcmVjaWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgcmVjb3ZlciA9IGZ1bmN0aW9uIHJlY292ZXIobWVzc2FnZSwgc2lnbmF0dXJlLCByZWNpZCwgY29tcHJlc3NlZCkge1xuICAvLyBub3RlOiBzZWNwMjU2azEgdjQgcmVjb3ZlciBtZXRob2QgaGFzIGEgZGlmZmVyZW50IGFyZ3VtZW50IG9yZGVyXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkc2FSZWNvdmVyKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpLCByZWNpZCwgVWludDhBcnJheS5mcm9tKG1lc3NhZ2UpLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgYW4gRUMgRGlmZmllLUhlbGxtYW4gc2VjcmV0IGFuZCBhcHBsaWVkIHNoYTI1NiB0byBjb21wcmVzc2VkIHB1YmxpYyBrZXkuXG4gKiBAbWV0aG9kIGVjZGhcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBlY2RoID0gZnVuY3Rpb24gZWNkaChwdWJsaWNLZXksIHByaXZhdGVLZXkpIHtcbiAgLy8gbm90ZTogc2VjcDI1NmsxIHYzIGRvZXNuJ3QgYWxsb3cgb3B0aW9uYWwgcGFyYW1ldGVyXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB7fSkpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIGFuIEVDIERpZmZpZS1IZWxsbWFuIHNlY3JldCBhbmQgcmV0dXJuIHB1YmxpYyBrZXkgYXMgcmVzdWx0XG4gKiBAbWV0aG9kIGVjZGhVbnNhZmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIGVjZGhVbnNhZmUgPSBmdW5jdGlvbiBlY2RoVW5zYWZlKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAvLyBlY2RoVW5zYWZlIG1ldGhvZCBpcyBub3QgcGFydCBvZiBzZWNwMjU2azEgdjQgcGFja2FnZVxuICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIHYzXG4gIC8vIGVuc3VyZSB2YWxpZCBwdWJsaWNLZXkgbGVuZ3RoXG4gIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSAzMyAmJiBwdWJsaWNLZXkubGVuZ3RoICE9PSA2NSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwdWJsaWMga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICAvLyBlbnN1cmUgdmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwcml2YXRlIGtleSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMXYzLmVjZGhVbnNhZmUoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgY29tcHJlc3NlZCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByaXZhdGVLZXlWZXJpZnk6IHByaXZhdGVLZXlWZXJpZnksXG4gIHByaXZhdGVLZXlFeHBvcnQ6IHByaXZhdGVLZXlFeHBvcnQsXG4gIHByaXZhdGVLZXlJbXBvcnQ6IHByaXZhdGVLZXlJbXBvcnQsXG4gIHByaXZhdGVLZXlOZWdhdGU6IHByaXZhdGVLZXlOZWdhdGUsXG4gIHByaXZhdGVLZXlNb2RJbnZlcnNlOiBwcml2YXRlS2V5TW9kSW52ZXJzZSxcbiAgcHJpdmF0ZUtleVR3ZWFrQWRkOiBwcml2YXRlS2V5VHdlYWtBZGQsXG4gIHByaXZhdGVLZXlUd2Vha011bDogcHJpdmF0ZUtleVR3ZWFrTXVsLFxuXG4gIHB1YmxpY0tleUNyZWF0ZTogcHVibGljS2V5Q3JlYXRlLFxuICBwdWJsaWNLZXlDb252ZXJ0OiBwdWJsaWNLZXlDb252ZXJ0LFxuICBwdWJsaWNLZXlWZXJpZnk6IHB1YmxpY0tleVZlcmlmeSxcbiAgcHVibGljS2V5VHdlYWtBZGQ6IHB1YmxpY0tleVR3ZWFrQWRkLFxuICBwdWJsaWNLZXlUd2Vha011bDogcHVibGljS2V5VHdlYWtNdWwsXG4gIHB1YmxpY0tleUNvbWJpbmU6IHB1YmxpY0tleUNvbWJpbmUsXG5cbiAgc2lnbmF0dXJlTm9ybWFsaXplOiBzaWduYXR1cmVOb3JtYWxpemUsXG4gIHNpZ25hdHVyZUV4cG9ydDogc2lnbmF0dXJlRXhwb3J0LFxuICBzaWduYXR1cmVJbXBvcnQ6IHNpZ25hdHVyZUltcG9ydCxcbiAgc2lnbmF0dXJlSW1wb3J0TGF4OiBzaWduYXR1cmVJbXBvcnRMYXgsXG5cbiAgc2lnbjogc2lnbixcbiAgdmVyaWZ5OiB2ZXJpZnksXG4gIHJlY292ZXI6IHJlY292ZXIsXG5cbiAgZWNkaDogZWNkaCxcbiAgZWNkaFVuc2FmZTogZWNkaFVuc2FmZVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxudmFyIEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9DT01QUkVTU0VEID0gQnVmZmVyLmZyb20oW1xuLy8gYmVnaW5cbjB4MzAsIDB4ODEsIDB4ZDMsIDB4MDIsIDB4MDEsIDB4MDEsIDB4MDQsIDB4MjAsXG4vLyBwcml2YXRlIGtleVxuMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbi8vIG1pZGRsZVxuMHhhMCwgMHg4MSwgMHg4NSwgMHgzMCwgMHg4MSwgMHg4MiwgMHgwMiwgMHgwMSwgMHgwMSwgMHgzMCwgMHgyYywgMHgwNiwgMHgwNywgMHgyYSwgMHg4NiwgMHg0OCwgMHhjZSwgMHgzZCwgMHgwMSwgMHgwMSwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZSwgMHhmZiwgMHhmZiwgMHhmYywgMHgyZiwgMHgzMCwgMHgwNiwgMHgwNCwgMHgwMSwgMHgwMCwgMHgwNCwgMHgwMSwgMHgwNywgMHgwNCwgMHgyMSwgMHgwMiwgMHg3OSwgMHhiZSwgMHg2NiwgMHg3ZSwgMHhmOSwgMHhkYywgMHhiYiwgMHhhYywgMHg1NSwgMHhhMCwgMHg2MiwgMHg5NSwgMHhjZSwgMHg4NywgMHgwYiwgMHgwNywgMHgwMiwgMHg5YiwgMHhmYywgMHhkYiwgMHgyZCwgMHhjZSwgMHgyOCwgMHhkOSwgMHg1OSwgMHhmMiwgMHg4MSwgMHg1YiwgMHgxNiwgMHhmOCwgMHgxNywgMHg5OCwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZSwgMHhiYSwgMHhhZSwgMHhkYywgMHhlNiwgMHhhZiwgMHg0OCwgMHhhMCwgMHgzYiwgMHhiZiwgMHhkMiwgMHg1ZSwgMHg4YywgMHhkMCwgMHgzNiwgMHg0MSwgMHg0MSwgMHgwMiwgMHgwMSwgMHgwMSwgMHhhMSwgMHgyNCwgMHgwMywgMHgyMiwgMHgwMCxcbi8vIHB1YmxpYyBrZXlcbjB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcblxudmFyIEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9VTkNPTVBSRVNTRUQgPSBCdWZmZXIuZnJvbShbXG4vLyBiZWdpblxuMHgzMCwgMHg4MiwgMHgwMSwgMHgxMywgMHgwMiwgMHgwMSwgMHgwMSwgMHgwNCwgMHgyMCxcbi8vIHByaXZhdGUga2V5XG4weDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuLy8gbWlkZGxlXG4weGEwLCAweDgxLCAweGE1LCAweDMwLCAweDgxLCAweGEyLCAweDAyLCAweDAxLCAweDAxLCAweDMwLCAweDJjLCAweDA2LCAweDA3LCAweDJhLCAweDg2LCAweDQ4LCAweGNlLCAweDNkLCAweDAxLCAweDAxLCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZlLCAweGZmLCAweGZmLCAweGZjLCAweDJmLCAweDMwLCAweDA2LCAweDA0LCAweDAxLCAweDAwLCAweDA0LCAweDAxLCAweDA3LCAweDA0LCAweDQxLCAweDA0LCAweDc5LCAweGJlLCAweDY2LCAweDdlLCAweGY5LCAweGRjLCAweGJiLCAweGFjLCAweDU1LCAweGEwLCAweDYyLCAweDk1LCAweGNlLCAweDg3LCAweDBiLCAweDA3LCAweDAyLCAweDliLCAweGZjLCAweGRiLCAweDJkLCAweGNlLCAweDI4LCAweGQ5LCAweDU5LCAweGYyLCAweDgxLCAweDViLCAweDE2LCAweGY4LCAweDE3LCAweDk4LCAweDQ4LCAweDNhLCAweGRhLCAweDc3LCAweDI2LCAweGEzLCAweGM0LCAweDY1LCAweDVkLCAweGE0LCAweGZiLCAweGZjLCAweDBlLCAweDExLCAweDA4LCAweGE4LCAweGZkLCAweDE3LCAweGI0LCAweDQ4LCAweGE2LCAweDg1LCAweDU0LCAweDE5LCAweDljLCAweDQ3LCAweGQwLCAweDhmLCAweGZiLCAweDEwLCAweGQ0LCAweGI4LCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZlLCAweGJhLCAweGFlLCAweGRjLCAweGU2LCAweGFmLCAweDQ4LCAweGEwLCAweDNiLCAweGJmLCAweGQyLCAweDVlLCAweDhjLCAweGQwLCAweDM2LCAweDQxLCAweDQxLCAweDAyLCAweDAxLCAweDAxLCAweGExLCAweDQ0LCAweDAzLCAweDQyLCAweDAwLFxuLy8gcHVibGljIGtleVxuMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuXG5leHBvcnRzLnByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKSB7XG4gIHZhciByZXN1bHQgPSBCdWZmZXIuZnJvbShjb21wcmVzc2VkID8gRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQgOiBFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEKTtcbiAgcHJpdmF0ZUtleS5jb3B5KHJlc3VsdCwgY29tcHJlc3NlZCA/IDggOiA5KTtcbiAgcHVibGljS2V5LmNvcHkocmVzdWx0LCBjb21wcmVzc2VkID8gMTgxIDogMjE0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMucHJpdmF0ZUtleUltcG9ydCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gIHZhciBsZW5ndGggPSBwcml2YXRlS2V5Lmxlbmd0aDtcblxuICAvLyBzZXF1ZW5jZSBoZWFkZXJcbiAgdmFyIGluZGV4ID0gMDtcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgMSB8fCBwcml2YXRlS2V5W2luZGV4XSAhPT0gMHgzMCkgcmV0dXJuIG51bGw7XG4gIGluZGV4ICs9IDE7XG5cbiAgLy8gc2VxdWVuY2UgbGVuZ3RoIGNvbnN0cnVjdG9yXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDEgfHwgIShwcml2YXRlS2V5W2luZGV4XSAmIDB4ODApKSByZXR1cm4gbnVsbDtcblxuICB2YXIgbGVuYiA9IHByaXZhdGVLZXlbaW5kZXhdICYgMHg3ZjtcbiAgaW5kZXggKz0gMTtcbiAgaWYgKGxlbmIgPCAxIHx8IGxlbmIgPiAyKSByZXR1cm4gbnVsbDtcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgbGVuYikgcmV0dXJuIG51bGw7XG5cbiAgLy8gc2VxdWVuY2UgbGVuZ3RoXG4gIHZhciBsZW4gPSBwcml2YXRlS2V5W2luZGV4ICsgbGVuYiAtIDFdIHwgKGxlbmIgPiAxID8gcHJpdmF0ZUtleVtpbmRleCArIGxlbmIgLSAyXSA8PCA4IDogMCk7XG4gIGluZGV4ICs9IGxlbmI7XG4gIGlmIChsZW5ndGggPCBpbmRleCArIGxlbikgcmV0dXJuIG51bGw7XG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAwOiB2ZXJzaW9uIG51bWJlciAoPTEpXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDMgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDIgfHwgcHJpdmF0ZUtleVtpbmRleCArIDFdICE9PSAweDAxIHx8IHByaXZhdGVLZXlbaW5kZXggKyAyXSAhPT0gMHgwMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGluZGV4ICs9IDM7XG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAxOiBvY3RldCBzdHJpbmcsIHVwIHRvIDMyIGJ5dGVzXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDIgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDQgfHwgcHJpdmF0ZUtleVtpbmRleCArIDFdID4gMHgyMCB8fCBsZW5ndGggPCBpbmRleCArIDIgKyBwcml2YXRlS2V5W2luZGV4ICsgMV0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwcml2YXRlS2V5LnNsaWNlKGluZGV4ICsgMiwgaW5kZXggKyAyICsgcHJpdmF0ZUtleVtpbmRleCArIDFdKTtcbn07XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICB2YXIgciA9IEJ1ZmZlci5hbGxvYygzMiwgMCk7XG4gIHZhciBzID0gQnVmZmVyLmFsbG9jKDMyLCAwKTtcblxuICB2YXIgbGVuZ3RoID0gc2lnbmF0dXJlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcblxuICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZVxuICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDMwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBzZXF1ZW5jZSBsZW5ndGggYnl0ZVxuICB2YXIgbGVuYnl0ZSA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgaWYgKGxlbmJ5dGUgJiAweDgwKSB7XG4gICAgaW5kZXggKz0gbGVuYnl0ZSAtIDB4ODA7XG4gICAgaWYgKGluZGV4ID4gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZSBmb3IgclxuICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBsZW5ndGggZm9yIHJcbiAgdmFyIHJsZW4gPSBzaWduYXR1cmVbaW5kZXgrK107XG4gIGlmIChybGVuICYgMHg4MCkge1xuICAgIGxlbmJ5dGUgPSBybGVuIC0gMHg4MDtcbiAgICBpZiAoaW5kZXggKyBsZW5ieXRlID4gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZm9yICg7IGxlbmJ5dGUgPiAwICYmIHNpZ25hdHVyZVtpbmRleF0gPT09IDB4MDA7IGluZGV4ICs9IDEsIGxlbmJ5dGUgLT0gMSkge31cbiAgICBmb3IgKHJsZW4gPSAwOyBsZW5ieXRlID4gMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSB7XG4gICAgICBybGVuID0gKHJsZW4gPDwgOCkgKyBzaWduYXR1cmVbaW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAocmxlbiA+IGxlbmd0aCAtIGluZGV4KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJpbmRleCA9IGluZGV4O1xuICBpbmRleCArPSBybGVuO1xuXG4gIC8vIHNlcXVlbmNlIHRhZyBieXRlIGZvciBzXG4gIGlmIChzaWduYXR1cmVbaW5kZXgrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGxlbmd0aCBmb3Igc1xuICB2YXIgc2xlbiA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgaWYgKHNsZW4gJiAweDgwKSB7XG4gICAgbGVuYnl0ZSA9IHNsZW4gLSAweDgwO1xuICAgIGlmIChpbmRleCArIGxlbmJ5dGUgPiBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmb3IgKDsgbGVuYnl0ZSA+IDAgJiYgc2lnbmF0dXJlW2luZGV4XSA9PT0gMHgwMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSB7fVxuICAgIGZvciAoc2xlbiA9IDA7IGxlbmJ5dGUgPiAwOyBpbmRleCArPSAxLCBsZW5ieXRlIC09IDEpIHtcbiAgICAgIHNsZW4gPSAoc2xlbiA8PCA4KSArIHNpZ25hdHVyZVtpbmRleF07XG4gICAgfVxuICB9XG4gIGlmIChzbGVuID4gbGVuZ3RoIC0gaW5kZXgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgc2luZGV4ID0gaW5kZXg7XG4gIGluZGV4ICs9IHNsZW47XG5cbiAgLy8gaWdub3JlIGxlYWRpbmcgemVyb3MgaW4gclxuICBmb3IgKDsgcmxlbiA+IDAgJiYgc2lnbmF0dXJlW3JpbmRleF0gPT09IDB4MDA7IHJsZW4gLT0gMSwgcmluZGV4ICs9IDEpIHt9XG4gIC8vIGNvcHkgciB2YWx1ZVxuICBpZiAocmxlbiA+IDMyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJ2YWx1ZSA9IHNpZ25hdHVyZS5zbGljZShyaW5kZXgsIHJpbmRleCArIHJsZW4pO1xuICBydmFsdWUuY29weShyLCAzMiAtIHJ2YWx1ZS5sZW5ndGgpO1xuXG4gIC8vIGlnbm9yZSBsZWFkaW5nIHplcm9zIGluIHNcbiAgZm9yICg7IHNsZW4gPiAwICYmIHNpZ25hdHVyZVtzaW5kZXhdID09PSAweDAwOyBzbGVuIC09IDEsIHNpbmRleCArPSAxKSB7fVxuICAvLyBjb3B5IHMgdmFsdWVcbiAgaWYgKHNsZW4gPiAzMikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBzdmFsdWUgPSBzaWduYXR1cmUuc2xpY2Uoc2luZGV4LCBzaW5kZXggKyBzbGVuKTtcbiAgc3ZhbHVlLmNvcHkocywgMzIgLSBzdmFsdWUubGVuZ3RoKTtcblxuICByZXR1cm4geyByOiByLCBzOiBzIH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWM7XG5cbnZhciBlYyA9IG5ldyBFQygnc2VjcDI1NmsxJyk7XG52YXIgZWNwYXJhbXMgPSBlYy5jdXJ2ZTtcblxuZXhwb3J0cy5wcml2YXRlS2V5RXhwb3J0ID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgdmFyIGQgPSBuZXcgQk4ocHJpdmF0ZUtleSk7XG4gIGlmIChkLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGRuXFwndCBleHBvcnQgdG8gREVSIGZvcm1hdCcpO1xuICB9XG5cbiAgdmFyIHBvaW50ID0gZWMuZy5tdWwoZCk7XG4gIHJldHVybiB0b1B1YmxpY0tleShwb2ludC5nZXRYKCksIHBvaW50LmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuXG5leHBvcnRzLnByaXZhdGVLZXlNb2RJbnZlcnNlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgdmFyIGJuID0gbmV3IEJOKHByaXZhdGVLZXkpO1xuICBpZiAoYm4udWNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IGJuLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcml2YXRlIGtleSByYW5nZSBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gYm4uaW52bShlY3BhcmFtcy5uKS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKTtcbn07XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0ID0gZnVuY3Rpb24gKHNpZ09iaikge1xuICB2YXIgciA9IG5ldyBCTihzaWdPYmoucik7XG4gIGlmIChyLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHIgPSBuZXcgQk4oMCk7XG4gIH1cblxuICB2YXIgcyA9IG5ldyBCTihzaWdPYmoucyk7XG4gIGlmIChzLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHMgPSBuZXcgQk4oMCk7XG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbci50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKSwgcy50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKV0pO1xufTtcblxuZXhwb3J0cy5lY2RoVW5zYWZlID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICB2YXIgcG9pbnQgPSBlYy5rZXlGcm9tUHVibGljKHB1YmxpY0tleSk7XG5cbiAgdmFyIHNjYWxhciA9IG5ldyBCTihwcml2YXRlS2V5KTtcbiAgaWYgKHNjYWxhci51Y21wKGVjcGFyYW1zLm4pID49IDAgfHwgc2NhbGFyLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzY2FsYXIgd2FzIGludmFsaWQgKHplcm8gb3Igb3ZlcmZsb3cpJyk7XG4gIH1cblxuICB2YXIgc2hhcmVkID0gcG9pbnQucHViLm11bChzY2FsYXIpO1xuICByZXR1cm4gdG9QdWJsaWNLZXkoc2hhcmVkLmdldFgoKSwgc2hhcmVkLmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuXG52YXIgdG9QdWJsaWNLZXkgPSBmdW5jdGlvbiB0b1B1YmxpY0tleSh4LCB5LCBjb21wcmVzc2VkKSB7XG4gIHZhciBwdWJsaWNLZXkgPSB2b2lkIDA7XG5cbiAgaWYgKGNvbXByZXNzZWQpIHtcbiAgICBwdWJsaWNLZXkgPSBCdWZmZXIuYWxsb2MoMzMpO1xuICAgIHB1YmxpY0tleVswXSA9IHkuaXNPZGQoKSA/IDB4MDMgOiAweDAyO1xuICAgIHgudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMikuY29weShwdWJsaWNLZXksIDEpO1xuICB9IGVsc2Uge1xuICAgIHB1YmxpY0tleSA9IEJ1ZmZlci5hbGxvYyg2NSk7XG4gICAgcHVibGljS2V5WzBdID0gMHgwNDtcbiAgICB4LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAxKTtcbiAgICB5LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAzMyk7XG4gIH1cblxuICByZXR1cm4gcHVibGljS2V5O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0hleFByZWZpeGVkID0gcmVxdWlyZSgnaXMtaGV4LXByZWZpeGVkJyk7XG52YXIgc3RyaXBIZXhQcmVmaXggPSByZXF1aXJlKCdzdHJpcC1oZXgtcHJlZml4Jyk7XG5cbi8qKlxuICogUGFkcyBhIGBTdHJpbmdgIHRvIGhhdmUgYW4gZXZlbiBsZW5ndGhcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gcGFkVG9FdmVuKHZhbHVlKSB7XG4gIHZhciBhID0gdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBpZiAodHlwZW9mIGEgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtdXRpbF0gd2hpbGUgcGFkZGluZyB0byBldmVuLCB2YWx1ZSBtdXN0IGJlIHN0cmluZywgaXMgY3VycmVudGx5ICcgKyB0eXBlb2YgYSArICcsIHdoaWxlIHBhZFRvRXZlbi4nKTtcbiAgfVxuXG4gIGlmIChhLmxlbmd0aCAlIDIpIHtcbiAgICBhID0gJzAnICsgYTtcbiAgfVxuXG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYE51bWJlcmAgaW50byBhIGhleCBgU3RyaW5nYFxuICogQHBhcmFtIHtOdW1iZXJ9IGlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaW50VG9IZXgoaSkge1xuICB2YXIgaGV4ID0gaS50b1N0cmluZygxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICByZXR1cm4gJzB4JyArIGhleDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBgTnVtYmVyYCB0byBhIGBCdWZmZXJgXG4gKiBAcGFyYW0ge051bWJlcn0gaVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5mdW5jdGlvbiBpbnRUb0J1ZmZlcihpKSB7XG4gIHZhciBoZXggPSBpbnRUb0hleChpKTtcblxuICByZXR1cm4gbmV3IEJ1ZmZlcihwYWRUb0V2ZW4oaGV4LnNsaWNlKDIpKSwgJ2hleCcpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgYmluYXJ5IHNpemUgb2YgYSBzdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0QmluYXJ5U2l6ZShzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtdXRpbF0gd2hpbGUgZ2V0dGluZyBiaW5hcnkgc2l6ZSwgbWV0aG9kIGdldEJpbmFyeVNpemUgcmVxdWlyZXMgaW5wdXQgXFwnc3RyXFwnIHRvIGJlIHR5cGUgU3RyaW5nLCBnb3QgXFwnJyArIHR5cGVvZiBzdHIgKyAnXFwnLicpO1xuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKHN0ciwgJ3V0ZjgnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIFRSVUUgaWYgdGhlIGZpcnN0IHNwZWNpZmllZCBhcnJheSBjb250YWlucyBhbGwgZWxlbWVudHNcbiAqIGZyb20gdGhlIHNlY29uZCBvbmUuIEZBTFNFIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBzdXBlcnNldFxuICogQHBhcmFtIHthcnJheX0gc3Vic2V0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGFycmF5Q29udGFpbnNBcnJheShzdXBlcnNldCwgc3Vic2V0LCBzb21lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHN1cGVyc2V0KSAhPT0gdHJ1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLXV0aWxdIG1ldGhvZCBhcnJheUNvbnRhaW5zQXJyYXkgcmVxdWlyZXMgaW5wdXQgXFwnc3VwZXJzZXRcXCcgdG8gYmUgYW4gYXJyYXkgZ290IHR5cGUgXFwnJyArIHR5cGVvZiBzdXBlcnNldCArICdcXCcnKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShzdWJzZXQpICE9PSB0cnVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtdXRpbF0gbWV0aG9kIGFycmF5Q29udGFpbnNBcnJheSByZXF1aXJlcyBpbnB1dCBcXCdzdWJzZXRcXCcgdG8gYmUgYW4gYXJyYXkgZ290IHR5cGUgXFwnJyArIHR5cGVvZiBzdWJzZXQgKyAnXFwnJyk7XG4gIH1cblxuICByZXR1cm4gc3Vic2V0W0Jvb2xlYW4oc29tZSkgJiYgJ3NvbWUnIHx8ICdldmVyeSddKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBzdXBlcnNldC5pbmRleE9mKHZhbHVlKSA+PSAwO1xuICB9KTtcbn1cblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCB1dGY4IGZyb20gaXQncyBoZXggcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAbWV0aG9kIHRvVXRmOFxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBpbiBoZXhcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGFzY2lpIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBoZXggdmFsdWVcbiAqL1xuZnVuY3Rpb24gdG9VdGY4KGhleCkge1xuICB2YXIgYnVmZmVyVmFsdWUgPSBuZXcgQnVmZmVyKHBhZFRvRXZlbihzdHJpcEhleFByZWZpeChoZXgpLnJlcGxhY2UoL14wK3wwKyQvZywgJycpKSwgJ2hleCcpO1xuXG4gIHJldHVybiBidWZmZXJWYWx1ZS50b1N0cmluZygndXRmOCcpO1xufVxuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGFzY2lpIGZyb20gaXQncyBoZXggcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAbWV0aG9kIHRvQXNjaWlcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgaW4gaGV4XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBhc2NpaSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgaGV4IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRvQXNjaWkoaGV4KSB7XG4gIHZhciBzdHIgPSAnJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB2YXIgaSA9IDAsXG4gICAgICBsID0gaGV4Lmxlbmd0aDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGlmIChoZXguc3Vic3RyaW5nKDAsIDIpID09PSAnMHgnKSB7XG4gICAgaSA9IDI7XG4gIH1cblxuICBmb3IgKDsgaSA8IGw7IGkgKz0gMikge1xuICAgIHZhciBjb2RlID0gcGFyc2VJbnQoaGV4LnN1YnN0cihpLCAyKSwgMTYpO1xuICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBoZXggcmVwcmVzZW50YXRpb24gKHByZWZpeGVkIGJ5IDB4KSBvZiB1dGY4IHN0cmluZ1xuICpcbiAqIEBtZXRob2QgZnJvbVV0ZjhcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25hbCBwYWRkaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBoZXggcmVwcmVzZW50YXRpb24gb2YgaW5wdXQgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGZyb21VdGY4KHN0cmluZ1ZhbHVlKSB7XG4gIHZhciBzdHIgPSBuZXcgQnVmZmVyKHN0cmluZ1ZhbHVlLCAndXRmOCcpO1xuXG4gIHJldHVybiAnMHgnICsgcGFkVG9FdmVuKHN0ci50b1N0cmluZygnaGV4JykpLnJlcGxhY2UoL14wK3wwKyQvZywgJycpO1xufVxuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGhleCByZXByZXNlbnRhdGlvbiAocHJlZml4ZWQgYnkgMHgpIG9mIGFzY2lpIHN0cmluZ1xuICpcbiAqIEBtZXRob2QgZnJvbUFzY2lpXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9uYWwgcGFkZGluZ1xuICogQHJldHVybnMge1N0cmluZ30gaGV4IHJlcHJlc2VudGF0aW9uIG9mIGlucHV0IHN0cmluZ1xuICovXG5mdW5jdGlvbiBmcm9tQXNjaWkoc3RyaW5nVmFsdWUpIHtcbiAgdmFyIGhleCA9ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgdmFyIGNvZGUgPSBzdHJpbmdWYWx1ZS5jaGFyQ29kZUF0KGkpO1xuICAgIHZhciBuID0gY29kZS50b1N0cmluZygxNik7XG4gICAgaGV4ICs9IG4ubGVuZ3RoIDwgMiA/ICcwJyArIG4gOiBuO1xuICB9XG5cbiAgcmV0dXJuICcweCcgKyBoZXg7XG59XG5cbi8qKlxuICogZ2V0S2V5cyhbe2E6IDEsIGI6IDJ9LCB7YTogMywgYjogNH1dLCAnYScpID0+IFsxLCAzXVxuICpcbiAqIEBtZXRob2QgZ2V0S2V5cyBnZXQgc3BlY2lmaWMga2V5IGZyb20gaW5uZXIgb2JqZWN0IGFycmF5IG9mIG9iamVjdHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYWxsb3dFbXB0eVxuICogQHJldHVybnMge0FycmF5fSBvdXRwdXQganVzdCBhIHNpbXBsZSBhcnJheSBvZiBvdXRwdXQga2V5c1xuICovXG5mdW5jdGlvbiBnZXRLZXlzKHBhcmFtcywga2V5LCBhbGxvd0VtcHR5KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShwYXJhbXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtdXRpbF0gbWV0aG9kIGdldEtleXMgZXhwZWN0aW5nIHR5cGUgQXJyYXkgYXMgXFwncGFyYW1zXFwnIGlucHV0LCBnb3QgXFwnJyArIHR5cGVvZiBwYXJhbXMgKyAnXFwnJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtdXRpbF0gbWV0aG9kIGdldEtleXMgZXhwZWN0aW5nIHR5cGUgU3RyaW5nIGZvciBpbnB1dCBcXCdrZXlcXCcgZ290IFxcJycgKyB0eXBlb2Yga2V5ICsgJ1xcJy4nKTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciB2YWx1ZSA9IHBhcmFtc1tpXVtrZXldOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKGFsbG93RW1wdHkgJiYgIXZhbHVlKSB7XG4gICAgICB2YWx1ZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFiaScpO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIElzIHRoZSBzdHJpbmcgYSBoZXggc3RyaW5nLlxuICpcbiAqIEBtZXRob2QgY2hlY2sgaWYgc3RyaW5nIGlzIGhleCBzdHJpbmcgb2Ygc3BlY2lmaWMgbGVuZ3RoXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm5zIHtCb29sZWFufSBvdXRwdXQgdGhlIHN0cmluZyBpcyBhIGhleCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gaXNIZXhTdHJpbmcodmFsdWUsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCAhdmFsdWUubWF0Y2goL14weFswLTlBLUZhLWZdKiQvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChsZW5ndGggJiYgdmFsdWUubGVuZ3RoICE9PSAyICsgMiAqIGxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXJyYXlDb250YWluc0FycmF5OiBhcnJheUNvbnRhaW5zQXJyYXksXG4gIGludFRvQnVmZmVyOiBpbnRUb0J1ZmZlcixcbiAgZ2V0QmluYXJ5U2l6ZTogZ2V0QmluYXJ5U2l6ZSxcbiAgaXNIZXhQcmVmaXhlZDogaXNIZXhQcmVmaXhlZCxcbiAgc3RyaXBIZXhQcmVmaXg6IHN0cmlwSGV4UHJlZml4LFxuICBwYWRUb0V2ZW46IHBhZFRvRXZlbixcbiAgaW50VG9IZXg6IGludFRvSGV4LFxuICBmcm9tQXNjaWk6IGZyb21Bc2NpaSxcbiAgZnJvbVV0Zjg6IGZyb21VdGY4LFxuICB0b0FzY2lpOiB0b0FzY2lpLFxuICB0b1V0Zjg6IHRvVXRmOCxcbiAgZ2V0S2V5czogZ2V0S2V5cyxcbiAgaXNIZXhTdHJpbmc6IGlzSGV4U3RyaW5nXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBwcmVmaXggPSAnfic7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgc3RvcmFnZSBmb3Igb3VyIGBFRWAgb2JqZWN0cy5cbiAqIEFuIGBFdmVudHNgIGluc3RhbmNlIGlzIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IGVtaXR0ZXIsIG9uY2UpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0pIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIGVtaXR0ZXIuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XS5mbikgZW1pdHRlci5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBbZW1pdHRlci5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gZW1pdHRlcjtcbn1cblxuLyoqXG4gKiBDbGVhciBldmVudCBieSBuYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZ0IFRoZSBFdmVudCBuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJFdmVudChlbWl0dGVyLCBldnQpIHtcbiAgaWYgKC0tZW1pdHRlci5fZXZlbnRzQ291bnQgPT09IDApIGVtaXR0ZXIuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgZWxzZSBkZWxldGUgZW1pdHRlci5fZXZlbnRzW2V2dF07XG59XG5cbi8qKlxuICogTWluaW1hbCBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSBsaXN0aW5nIHRoZSBldmVudHMgZm9yIHdoaWNoIHRoZSBlbWl0dGVyIGhhcyByZWdpc3RlcmVkXG4gKiBsaXN0ZW5lcnMuXG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWhhbmRsZXJzKSByZXR1cm4gW107XG4gIGlmIChoYW5kbGVycy5mbikgcmV0dXJuIFtoYW5kbGVycy5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG4gICAgZWVbaV0gPSBoYW5kbGVyc1tpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGxpc3RlbmluZyB0byBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1iZXIgb2YgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiBsaXN0ZW5lckNvdW50KGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIDA7XG4gIGlmIChsaXN0ZW5lcnMuZm4pIHJldHVybiAxO1xuICByZXR1cm4gbGlzdGVuZXJzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZWxzZSBgZmFsc2VgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnMuZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgY2FzZSAxOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQpLCB0cnVlO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExKSwgdHJ1ZTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuICAgICAgY2FzZSA0OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMpLCB0cnVlO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm4uYXBwbHkobGlzdGVuZXJzLmNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAsIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2ldLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBjYXNlIDQ6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIsIGEzKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IGhhdmUgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gdGhpcztcbiAgaWYgKCFmbikge1xuICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgbGlzdGVuZXJzLmZuID09PSBmbiAmJlxuICAgICAgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKSAmJlxuICAgICAgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8XG4gICAgICAgIChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkgfHxcbiAgICAgICAgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IFtldmVudF0gVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgcHJlZml4LlxuLy9cbkV2ZW50RW1pdHRlci5wcmVmaXhlZCA9IHByZWZpeDtcblxuLy9cbi8vIEFsbG93IGBFdmVudEVtaXR0ZXJgIHRvIGJlIGltcG9ydGVkIGFzIG1vZHVsZSBuYW1lc3BhY2UuXG4vL1xuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbn1cbiIsIm1vZHVsZS5leHBvcnRzICAgICAgPSBpc1R5cGVkQXJyYXlcbmlzVHlwZWRBcnJheS5zdHJpY3QgPSBpc1N0cmljdFR5cGVkQXJyYXlcbmlzVHlwZWRBcnJheS5sb29zZSAgPSBpc0xvb3NlVHlwZWRBcnJheVxuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG52YXIgbmFtZXMgPSB7XG4gICAgJ1tvYmplY3QgSW50OEFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBJbnQxNkFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBJbnQzMkFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBVaW50OEFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgVWludDE2QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQzMkFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBGbG9hdDMyQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nOiB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzVHlwZWRBcnJheShhcnIpIHtcbiAgcmV0dXJuIChcbiAgICAgICBpc1N0cmljdFR5cGVkQXJyYXkoYXJyKVxuICAgIHx8IGlzTG9vc2VUeXBlZEFycmF5KGFycilcbiAgKVxufVxuXG5mdW5jdGlvbiBpc1N0cmljdFR5cGVkQXJyYXkoYXJyKSB7XG4gIHJldHVybiAoXG4gICAgICAgYXJyIGluc3RhbmNlb2YgSW50OEFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgSW50MTZBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIEludDMyQXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBVaW50OEFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBVaW50MTZBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQzMkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5XG4gIClcbn1cblxuZnVuY3Rpb24gaXNMb29zZVR5cGVkQXJyYXkoYXJyKSB7XG4gIHJldHVybiBuYW1lc1t0b1N0cmluZy5jYWxsKGFycildXG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Kc29uUnBjRW5naW5lID0gdm9pZCAwO1xuY29uc3Qgc2FmZV9ldmVudF9lbWl0dGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIkBtZXRhbWFzay9zYWZlLWV2ZW50LWVtaXR0ZXJcIikpO1xuY29uc3QgZXRoX3JwY19lcnJvcnNfMSA9IHJlcXVpcmUoXCJldGgtcnBjLWVycm9yc1wiKTtcbi8qKlxuICogQSBKU09OLVJQQyByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9jZXNzb3IuXG4gKiBHaXZlIGl0IGEgc3RhY2sgb2YgbWlkZGxld2FyZSwgcGFzcyBpdCByZXF1ZXN0cywgYW5kIGdldCBiYWNrIHJlc3BvbnNlcy5cbiAqL1xuY2xhc3MgSnNvblJwY0VuZ2luZSBleHRlbmRzIHNhZmVfZXZlbnRfZW1pdHRlcl8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9taWRkbGV3YXJlID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIG1pZGRsZXdhcmUgZnVuY3Rpb24gdG8gdGhlIGVuZ2luZSdzIG1pZGRsZXdhcmUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWlkZGxld2FyZSAtIFRoZSBtaWRkbGV3YXJlIGZ1bmN0aW9uIHRvIGFkZC5cbiAgICAgKi9cbiAgICBwdXNoKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZS5wdXNoKG1pZGRsZXdhcmUpO1xuICAgIH1cbiAgICBoYW5kbGUocmVxLCBjYikge1xuICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiY2FsbGJhY2tcIiBtdXN0IGJlIGEgZnVuY3Rpb24gaWYgcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVxKSkge1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZUJhdGNoKHJlcSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZUJhdGNoKHJlcSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlKHJlcSwgY2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlSGFuZGxlKHJlcSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhpcyBlbmdpbmUgYXMgYSBtaWRkbGV3YXJlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHB1c2hlZCB0byBvdGhlclxuICAgICAqIGVuZ2luZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGlzIGVuZ2luZSBhcyBhIG1pZGRsZXdhcmUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYXNNaWRkbGV3YXJlKCkge1xuICAgICAgICByZXR1cm4gYXN5bmMgKHJlcSwgcmVzLCBuZXh0LCBlbmQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW21pZGRsZXdhcmVFcnJvciwgaXNDb21wbGV0ZSwgcmV0dXJuSGFuZGxlcnMsXSA9IGF3YWl0IEpzb25ScGNFbmdpbmUuX3J1bkFsbE1pZGRsZXdhcmUocmVxLCByZXMsIHRoaXMuX21pZGRsZXdhcmUpO1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IEpzb25ScGNFbmdpbmUuX3J1blJldHVybkhhbmRsZXJzKHJldHVybkhhbmRsZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuZChtaWRkbGV3YXJlRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChhc3luYyAoaGFuZGxlckNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBKc29uUnBjRW5naW5lLl9ydW5SZXR1cm5IYW5kbGVycyhyZXR1cm5IYW5kbGVycyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlckNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5kKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgX2hhbmRsZUJhdGNoKHJlcXMsIGNiKSB7XG4gICAgICAgIC8vIFRoZSBvcmRlciBoZXJlIGlzIGltcG9ydGFudFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gMi4gV2FpdCBmb3IgYWxsIHJlcXVlc3RzIHRvIGZpbmlzaCwgb3IgdGhyb3cgb24gc29tZSBraW5kIG9mIGZhdGFsXG4gICAgICAgICAgICAvLyBlcnJvclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAvLyAxLiBCZWdpbiBleGVjdXRpbmcgZWFjaCByZXF1ZXN0IGluIHRoZSBvcmRlciByZWNlaXZlZFxuICAgICAgICAgICAgcmVxcy5tYXAodGhpcy5fcHJvbWlzZUhhbmRsZS5iaW5kKHRoaXMpKSk7XG4gICAgICAgICAgICAvLyAzLiBSZXR1cm4gYmF0Y2ggcmVzcG9uc2VcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYihudWxsLCByZXNwb25zZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlcztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2Utd3JhcHBlZCBfaGFuZGxlLlxuICAgICAqL1xuICAgIF9wcm9taXNlSGFuZGxlKHJlcSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZShyZXEsIChfZXJyLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhIHJlc3BvbnNlLCBhbmQgaXQgd2lsbCBhbHdheXMgaGF2ZSBhbnkgZXJyb3JcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGlzIGNhdWdodCBhbmQgcHJvcGFnYXRlZC5cbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgdGhhdCB0aGUgcmVxdWVzdCBvYmplY3QgaXMgdmFsaWQsIHByb2Nlc3NlcyBpdCwgYW5kIHBhc3NlcyBhbnlcbiAgICAgKiBlcnJvciBhbmQgdGhlIHJlc3BvbnNlIG9iamVjdCB0byB0aGUgZ2l2ZW4gY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBEb2VzIG5vdCByZWplY3QuXG4gICAgICovXG4gICAgYXN5bmMgX2hhbmRsZShjYWxsZXJSZXEsIGNiKSB7XG4gICAgICAgIGlmICghY2FsbGVyUmVxIHx8XG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KGNhbGxlclJlcSkgfHxcbiAgICAgICAgICAgIHR5cGVvZiBjYWxsZXJSZXEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBldGhfcnBjX2Vycm9yc18xLkV0aGVyZXVtUnBjRXJyb3IoZXRoX3JwY19lcnJvcnNfMS5lcnJvckNvZGVzLnJwYy5pbnZhbGlkUmVxdWVzdCwgYFJlcXVlc3RzIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gUmVjZWl2ZWQ6ICR7dHlwZW9mIGNhbGxlclJlcX1gLCB7IHJlcXVlc3Q6IGNhbGxlclJlcSB9KTtcbiAgICAgICAgICAgIHJldHVybiBjYihlcnJvciwgeyBpZDogdW5kZWZpbmVkLCBqc29ucnBjOiAnMi4wJywgZXJyb3IgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsZXJSZXEubWV0aG9kICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZXRoX3JwY19lcnJvcnNfMS5FdGhlcmV1bVJwY0Vycm9yKGV0aF9ycGNfZXJyb3JzXzEuZXJyb3JDb2Rlcy5ycGMuaW52YWxpZFJlcXVlc3QsIGBNdXN0IHNwZWNpZnkgYSBzdHJpbmcgbWV0aG9kLiBSZWNlaXZlZDogJHt0eXBlb2YgY2FsbGVyUmVxLm1ldGhvZH1gLCB7IHJlcXVlc3Q6IGNhbGxlclJlcSB9KTtcbiAgICAgICAgICAgIHJldHVybiBjYihlcnJvciwgeyBpZDogY2FsbGVyUmVxLmlkLCBqc29ucnBjOiAnMi4wJywgZXJyb3IgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxID0gT2JqZWN0LmFzc2lnbih7fSwgY2FsbGVyUmVxKTtcbiAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgICAgaWQ6IHJlcS5pZCxcbiAgICAgICAgICAgIGpzb25ycGM6IHJlcS5qc29ucnBjLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgZXJyb3IgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcHJvY2Vzc1JlcXVlc3QocmVxLCByZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEEgcmVxdWVzdCBoYW5kbGVyIGVycm9yLCBhIHJlLXRocm93biBtaWRkbGV3YXJlIGVycm9yLCBvciBzb21ldGhpbmdcbiAgICAgICAgICAgIC8vIHVuZXhwZWN0ZWQuXG4gICAgICAgICAgICBlcnJvciA9IF9lcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBubyByZXN1bHQgaXMgcHJlc2VudCBvbiBhbiBlcnJvcmVkIHJlc3BvbnNlXG4gICAgICAgICAgICBkZWxldGUgcmVzLnJlc3VsdDtcbiAgICAgICAgICAgIGlmICghcmVzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVzLmVycm9yID0gZXRoX3JwY19lcnJvcnNfMS5zZXJpYWxpemVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNiKGVycm9yLCByZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3IgdGhlIGdpdmVuIHJlcXVlc3QgYW5kIHJlc3BvbnNlLCBydW5zIGFsbCBtaWRkbGV3YXJlIGFuZCB0aGVpciByZXR1cm5cbiAgICAgKiBoYW5kbGVycywgaWYgYW55LCBhbmQgZW5zdXJlcyB0aGF0IGludGVybmFsIHJlcXVlc3QgcHJvY2Vzc2luZyBzZW1hbnRpY3NcbiAgICAgKiBhcmUgc2F0aXNmaWVkLlxuICAgICAqL1xuICAgIGFzeW5jIF9wcm9jZXNzUmVxdWVzdChyZXEsIHJlcykge1xuICAgICAgICBjb25zdCBbZXJyb3IsIGlzQ29tcGxldGUsIHJldHVybkhhbmRsZXJzLF0gPSBhd2FpdCBKc29uUnBjRW5naW5lLl9ydW5BbGxNaWRkbGV3YXJlKHJlcSwgcmVzLCB0aGlzLl9taWRkbGV3YXJlKTtcbiAgICAgICAgLy8gVGhyb3cgaWYgXCJlbmRcIiB3YXMgbm90IGNhbGxlZCwgb3IgaWYgdGhlIHJlc3BvbnNlIGhhcyBuZWl0aGVyIGEgcmVzdWx0XG4gICAgICAgIC8vIG5vciBhbiBlcnJvci5cbiAgICAgICAgSnNvblJwY0VuZ2luZS5fY2hlY2tGb3JDb21wbGV0aW9uKHJlcSwgcmVzLCBpc0NvbXBsZXRlKTtcbiAgICAgICAgLy8gVGhlIHJldHVybiBoYW5kbGVycyBzaG91bGQgcnVuIGV2ZW4gaWYgYW4gZXJyb3Igd2FzIGVuY291bnRlcmVkIGR1cmluZ1xuICAgICAgICAvLyBtaWRkbGV3YXJlIHByb2Nlc3NpbmcuXG4gICAgICAgIGF3YWl0IEpzb25ScGNFbmdpbmUuX3J1blJldHVybkhhbmRsZXJzKHJldHVybkhhbmRsZXJzKTtcbiAgICAgICAgLy8gTm93IHdlIHJlLXRocm93IHRoZSBtaWRkbGV3YXJlIHByb2Nlc3NpbmcgZXJyb3IsIGlmIGFueSwgdG8gY2F0Y2ggaXRcbiAgICAgICAgLy8gZnVydGhlciB1cCB0aGUgY2FsbCBjaGFpbi5cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxseSBleGVjdXRlcyB0aGUgZ2l2ZW4gc3RhY2sgb2YgbWlkZGxld2FyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGFueSBlcnJvciBlbmNvdW50ZXJlZCBkdXJpbmcgbWlkZGxld2FyZSBleGVjdXRpb24sXG4gICAgICogYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgcmVxdWVzdCB3YXMgY29tcGxldGVkLCBhbmQgYW4gYXJyYXkgb2ZcbiAgICAgKiBtaWRkbGV3YXJlLWRlZmluZWQgcmV0dXJuIGhhbmRsZXJzLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBfcnVuQWxsTWlkZGxld2FyZShyZXEsIHJlcywgbWlkZGxld2FyZVN0YWNrKSB7XG4gICAgICAgIGNvbnN0IHJldHVybkhhbmRsZXJzID0gW107XG4gICAgICAgIGxldCBlcnJvciA9IG51bGw7XG4gICAgICAgIGxldCBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIC8vIEdvIGRvd24gc3RhY2sgb2YgbWlkZGxld2FyZSwgY2FsbCBhbmQgY29sbGVjdCBvcHRpb25hbCByZXR1cm5IYW5kbGVyc1xuICAgICAgICBmb3IgKGNvbnN0IG1pZGRsZXdhcmUgb2YgbWlkZGxld2FyZVN0YWNrKSB7XG4gICAgICAgICAgICBbZXJyb3IsIGlzQ29tcGxldGVdID0gYXdhaXQgSnNvblJwY0VuZ2luZS5fcnVuTWlkZGxld2FyZShyZXEsIHJlcywgbWlkZGxld2FyZSwgcmV0dXJuSGFuZGxlcnMpO1xuICAgICAgICAgICAgaWYgKGlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Vycm9yLCBpc0NvbXBsZXRlLCByZXR1cm5IYW5kbGVycy5yZXZlcnNlKCldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSdW5zIGFuIGluZGl2aWR1YWwgbWlkZGxld2FyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGFueSBlcnJvciBlbmNvdW50ZXJlZCBkdXJpbmcgbWlkZGxld2FyZSBleGVjdGlvbixcbiAgICAgKiBhbmQgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgcmVxdWVzdCBzaG91bGQgZW5kLlxuICAgICAqL1xuICAgIHN0YXRpYyBfcnVuTWlkZGxld2FyZShyZXEsIHJlcywgbWlkZGxld2FyZSwgcmV0dXJuSGFuZGxlcnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBlcnIgfHwgcmVzLmVycm9yO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXMuZXJyb3IgPSBldGhfcnBjX2Vycm9yc18xLnNlcmlhbGl6ZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVHJ1ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgcmVxdWVzdCBzaG91bGQgZW5kXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShbZXJyb3IsIHRydWVdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gKHJldHVybkhhbmRsZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZChyZXMuZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldHVybkhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0dXJuSGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZChuZXcgZXRoX3JwY19lcnJvcnNfMS5FdGhlcmV1bVJwY0Vycm9yKGV0aF9ycGNfZXJyb3JzXzEuZXJyb3JDb2Rlcy5ycGMuaW50ZXJuYWwsIGBKc29uUnBjRW5naW5lOiBcIm5leHRcIiByZXR1cm4gaGFuZGxlcnMgbXVzdCBiZSBmdW5jdGlvbnMuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgUmVjZWl2ZWQgXCIke3R5cGVvZiByZXR1cm5IYW5kbGVyfVwiIGZvciByZXF1ZXN0OlxcbiR7anNvbmlmeShyZXEpfWAsIHsgcmVxdWVzdDogcmVxIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybkhhbmRsZXJzLnB1c2gocmV0dXJuSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gRmFsc2UgaW5kaWNhdGVzIHRoYXQgdGhlIHJlcXVlc3Qgc2hvdWxkIG5vdCBlbmRcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbbnVsbCwgZmFsc2VdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlKHJlcSwgcmVzLCBuZXh0LCBlbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZW5kKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlcmlhbGx5IGV4ZWN1dGVzIGFycmF5IG9mIHJldHVybiBoYW5kbGVycy4gVGhlIHJlcXVlc3QgYW5kIHJlc3BvbnNlIGFyZVxuICAgICAqIGFzc3VtZWQgdG8gYmUgaW4gdGhlaXIgc2NvcGUuXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIF9ydW5SZXR1cm5IYW5kbGVycyhoYW5kbGVycykge1xuICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgaGFuZGxlcnMpIHtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKChlcnIpID0+IChlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSByZXNwb25zZSBoYXMgbmVpdGhlciBhIHJlc3VsdCBub3IgYW4gZXJyb3IsIG9yIGlmXG4gICAgICogdGhlIFwiaXNDb21wbGV0ZVwiIGZsYWcgaXMgZmFsc3kuXG4gICAgICovXG4gICAgc3RhdGljIF9jaGVja0ZvckNvbXBsZXRpb24ocmVxLCByZXMsIGlzQ29tcGxldGUpIHtcbiAgICAgICAgaWYgKCEoJ3Jlc3VsdCcgaW4gcmVzKSAmJiAhKCdlcnJvcicgaW4gcmVzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGV0aF9ycGNfZXJyb3JzXzEuRXRoZXJldW1ScGNFcnJvcihldGhfcnBjX2Vycm9yc18xLmVycm9yQ29kZXMucnBjLmludGVybmFsLCBgSnNvblJwY0VuZ2luZTogUmVzcG9uc2UgaGFzIG5vIGVycm9yIG9yIHJlc3VsdCBmb3IgcmVxdWVzdDpcXG4ke2pzb25pZnkocmVxKX1gLCB7IHJlcXVlc3Q6IHJlcSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBldGhfcnBjX2Vycm9yc18xLkV0aGVyZXVtUnBjRXJyb3IoZXRoX3JwY19lcnJvcnNfMS5lcnJvckNvZGVzLnJwYy5pbnRlcm5hbCwgYEpzb25ScGNFbmdpbmU6IE5vdGhpbmcgZW5kZWQgcmVxdWVzdDpcXG4ke2pzb25pZnkocmVxKX1gLCB7IHJlcXVlc3Q6IHJlcSB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSnNvblJwY0VuZ2luZSA9IEpzb25ScGNFbmdpbmU7XG5mdW5jdGlvbiBqc29uaWZ5KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVxdWVzdCwgbnVsbCwgMik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lTbk52YmxKd1kwVnVaMmx1WlM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OUtjMjl1VW5CalJXNW5hVzVsTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenRCUVVGQkxITkdRVUUwUkR0QlFVTTFSQ3h0UkVGQk9FVTdRVUYxUmpsRk96czdSMEZIUnp0QlFVTklMRTFCUVdFc1lVRkJZeXhUUVVGUkxEUkNRVUZuUWp0SlFVZHFSRHRSUVVORkxFdEJRVXNzUlVGQlJTeERRVUZETzFGQlExSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRGVFSXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N4SlFVRkpMRU5CUVU4c1ZVRkJiVU03VVVGRE5VTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQmFVUXNRMEZCUXl4RFFVRkRPMGxCUXpORkxFTkJRVU03U1VFeVEwUXNUVUZCVFN4RFFVRkRMRWRCUVZrc1JVRkJSU3hGUVVGUk8xRkJRek5DTEVsQlFVa3NSVUZCUlN4SlFVRkpMRTlCUVU4c1JVRkJSU3hMUVVGTExGVkJRVlVzUlVGQlJUdFpRVU5zUXl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExEUkRRVUUwUXl4RFFVRkRMRU5CUVVNN1UwRkRMMFE3VVVGRlJDeEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3V1VGRGRFSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1owSkJRMDRzVDBGQlR5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dGhRVU51UXp0WlFVTkVMRTlCUVU4c1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0VFFVTXZRanRSUVVWRUxFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlEwNHNUMEZCVHl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVGhDTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1UwRkRla1E3VVVGRFJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJPRUlzUTBGQlF5eERRVUZETzBsQlF6ZEVMRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSUxGbEJRVms3VVVGRFZpeFBRVUZQTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVXNSVUZCUlR0WlFVTnVReXhKUVVGSk8yZENRVU5HTEUxQlFVMHNRMEZEU2l4bFFVRmxMRVZCUTJZc1ZVRkJWU3hGUVVOV0xHTkJRV01zUlVGRFppeEhRVUZITEUxQlFVMHNZVUZCWVN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzJkQ1FVVjBSU3hKUVVGSkxGVkJRVlVzUlVGQlJUdHZRa0ZEWkN4TlFVRk5MR0ZCUVdFc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenR2UWtGRGRrUXNUMEZCVHl4SFFVRkhMRU5CUVVNc1pVRkJOa01zUTBGQlF5eERRVUZETzJsQ1FVTXpSRHRuUWtGRlJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1pVRkJaU3hGUVVGRkxFVkJRVVU3YjBKQlEzQkRMRWxCUVVrN2QwSkJRMFlzVFVGQlRTeGhRVUZoTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdjVUpCUTNoRU8yOUNRVUZETEU5QlFVOHNTMEZCU3l4RlFVRkZPM2RDUVVOa0xFOUJRVThzWlVGQlpTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPM0ZDUVVNdlFqdHZRa0ZEUkN4UFFVRlBMR1ZCUVdVc1JVRkJSU3hEUVVGRE8yZENRVU16UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRoUVVOS08xbEJRVU1zVDBGQlR5eExRVUZMTEVWQlFVVTdaMEpCUTJRc1QwRkJUeXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdZVUZEYmtJN1VVRkRTQ3hEUVVGRExFTkJRVU03U1VGRFNpeERRVUZETzBsQmFVSlBMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRM2hDTEVsQlFTdENMRVZCUXk5Q0xFVkJRWEZGTzFGQlJYSkZMRGhDUVVFNFFqdFJRVU01UWl4SlFVRkpPMWxCUTBZc2NVVkJRWEZGTzFsQlEzSkZMRkZCUVZFN1dVRkRVaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eE5RVUZOTEU5QlFVOHNRMEZCUXl4SFFVRkhPMWxCUTJwRExIZEVRVUYzUkR0WlFVTjRSQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlEzcERMRU5CUVVNN1dVRkZSaXd5UWtGQk1rSTdXVUZETTBJc1NVRkJTU3hGUVVGRkxFVkJRVVU3WjBKQlEwNHNUMEZCVHl4RlFVRkZMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzJGQlF6VkNPMWxCUTBRc1QwRkJUeXhUUVVGVExFTkJRVU03VTBGRGJFSTdVVUZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHRaUVVOa0xFbEJRVWtzUlVGQlJTeEZRVUZGTzJkQ1FVTk9MRTlCUVU4c1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzJGQlEyeENPMWxCUlVRc1RVRkJUU3hMUVVGTExFTkJRVU03VTBGRFlqdEpRVU5JTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOTExHTkJRV01zUTBGRGNFSXNSMEZCTkVJN1VVRkZOVUlzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRk8xbEJRemRDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RlFVRkZPMmRDUVVNNVFpeHhSVUZCY1VVN1owSkJRM0pGTEdsRFFVRnBRenRuUWtGRGFrTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRMllzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEVEN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5MTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUTI1Q0xGTkJRV3RETEVWQlEyeERMRVZCUVdkRk8xRkJSV2hGTEVsQlEwVXNRMEZCUXl4VFFVRlRPMWxCUTFZc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTTdXVUZEZUVJc1QwRkJUeXhUUVVGVExFdEJRVXNzVVVGQlVTeEZRVU0zUWp0WlFVTkJMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzYVVOQlFXZENMRU5CUTJoRExESkNRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMR05CUVdNc1JVRkROMElzTmtOQlFUWkRMRTlCUVU4c1UwRkJVeXhGUVVGRkxFVkJReTlFTEVWQlFVVXNUMEZCVHl4RlFVRkZMRk5CUVZNc1JVRkJSU3hEUVVOMlFpeERRVUZETzFsQlEwWXNUMEZCVHl4RlFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEZOQlFWTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZETlVRN1VVRkZSQ3hKUVVGSkxFOUJRVThzVTBGQlV5eERRVUZETEUxQlFVMHNTMEZCU3l4UlFVRlJMRVZCUVVVN1dVRkRlRU1zVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4cFEwRkJaMElzUTBGRGFFTXNNa0pCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zWTBGQll5eEZRVU0zUWl3eVEwRkJNa01zVDBGQlR5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUTNCRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZOQlFWTXNSVUZCUlN4RFFVTjJRaXhEUVVGRE8xbEJRMFlzVDBGQlR5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxGTkJRVk1zUTBGQlF5eEZRVUZGTEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETzFOQlF5OUVPMUZCUlVRc1RVRkJUU3hIUVVGSExIRkNRVUZwUXl4VFFVRlRMRU5CUVVVc1EwRkJRenRSUVVOMFJDeE5RVUZOTEVkQlFVY3NSMEZCYjBNN1dVRkRNME1zUlVGQlJTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RlFVRkZPMWxCUTFZc1QwRkJUeXhGUVVGRkxFZEJRVWNzUTBGQlF5eFBRVUZQTzFOQlEzSkNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFdEJRVXNzUjBGQkswSXNTVUZCU1N4RFFVRkRPMUZCUlRkRExFbEJRVWs3V1VGRFJpeE5RVUZOTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFOQlEzUkRPMUZCUVVNc1QwRkJUeXhOUVVGTkxFVkJRVVU3V1VGRFppeHpSVUZCYzBVN1dVRkRkRVVzWTBGQll6dFpRVU5rTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNN1UwRkRhRUk3VVVGRlJDeEpRVUZKTEV0QlFVc3NSVUZCUlR0WlFVTlVMSEZFUVVGeFJEdFpRVU55UkN4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU03V1VGRGJFSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVU3WjBKQlEyUXNSMEZCUnl4RFFVRkRMRXRCUVVzc1IwRkJSeXdyUWtGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMkZCUTI1RE8xTkJRMFk3VVVGRlJDeFBRVUZQTEVWQlFVVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1IwRkJLMElzUTBGQlF5eERRVUZETzBsQlEzQkVMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBzc1MwRkJTeXhEUVVGRExHVkJRV1VzUTBGRE0wSXNSMEZCTkVJc1JVRkROVUlzUjBGQmIwTTdVVUZGY0VNc1RVRkJUU3hEUVVOS0xFdEJRVXNzUlVGRFRDeFZRVUZWTEVWQlExWXNZMEZCWXl4RlFVTm1MRWRCUVVjc1RVRkJUU3hoUVVGaExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkZkRVVzZVVWQlFYbEZPMUZCUTNwRkxHZENRVUZuUWp0UlFVTm9RaXhoUVVGaExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVVjRSQ3g1UlVGQmVVVTdVVUZEZWtVc2VVSkJRWGxDTzFGQlEzcENMRTFCUVUwc1lVRkJZU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8xRkJSWFpFTEhWRlFVRjFSVHRSUVVOMlJTdzJRa0ZCTmtJN1VVRkROMElzU1VGQlNTeExRVUZMTEVWQlFVVTdXVUZEVkN4TlFVRk5MRXRCUVVzc1EwRkJRenRUUVVOaU8wbEJRMGdzUTBGQlF6dEpRVVZFT3pzN096czdUMEZOUnp0SlFVTkxMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zYVVKQlFXbENMRU5CUTNCRExFZEJRVFJDTEVWQlF6VkNMRWRCUVc5RExFVkJRM0JETEdWQlFYTkVPMUZCVVhSRUxFMUJRVTBzWTBGQll5eEhRVUZwUXl4RlFVRkZMRU5CUVVNN1VVRkRlRVFzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJwQ0xFbEJRVWtzVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVVjJRaXgzUlVGQmQwVTdVVUZEZUVVc1MwRkJTeXhOUVVGTkxGVkJRVlVzU1VGQlNTeGxRVUZsTEVWQlFVVTdXVUZEZUVNc1EwRkJReXhMUVVGTExFVkJRVVVzVlVGQlZTeERRVUZETEVkQlFVY3NUVUZCVFN4aFFVRmhMRU5CUVVNc1kwRkJZeXhEUVVOMFJDeEhRVUZITEVWQlEwZ3NSMEZCUnl4RlFVTklMRlZCUVZVc1JVRkRWaXhqUVVGakxFTkJRMllzUTBGQlF6dFpRVU5HTEVsQlFVa3NWVUZCVlN4RlFVRkZPMmRDUVVOa0xFMUJRVTA3WVVGRFVEdFRRVU5HTzFGQlEwUXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hWUVVGVkxFVkJRVVVzWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRka1FzUTBGQlF6dEpRVVZFT3pzN096dFBRVXRITzBsQlEwc3NUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkRNMElzUjBGQk5FSXNSVUZETlVJc1IwRkJiME1zUlVGRGNFTXNWVUZCSzBNc1JVRkRMME1zWTBGQk5FTTdVVUZGTlVNc1QwRkJUeXhKUVVGSkxFOUJRVThzUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZPMWxCUXpkQ0xFMUJRVTBzUjBGQlJ5eEhRVUUyUWl4RFFVRkRMRWRCUVdFc1JVRkJSU3hGUVVGRk8yZENRVU4wUkN4TlFVRk5MRXRCUVVzc1IwRkJSeXhIUVVGSExFbEJRVWtzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXp0blFrRkRMMElzU1VGQlNTeExRVUZMTEVWQlFVVTdiMEpCUTFRc1IwRkJSeXhEUVVGRExFdEJRVXNzUjBGQlJ5d3JRa0ZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8ybENRVU51UXp0blFrRkRSQ3cyUTBGQk5rTTdaMEpCUXpkRExFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM3BDTEVOQlFVTXNRMEZCUXp0WlFVVkdMRTFCUVUwc1NVRkJTU3hIUVVFNFFpeERRVU4wUXl4aFFVRXdReXhGUVVNeFF5eEZRVUZGTzJkQ1FVTkdMRWxCUVVrc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJUdHZRa0ZEWWl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzJsQ1FVTm9RanR4UWtGQlRUdHZRa0ZEVEN4SlFVRkpMR0ZCUVdFc1JVRkJSVHQzUWtGRGFrSXNTVUZCU1N4UFFVRlBMR0ZCUVdFc1MwRkJTeXhWUVVGVkxFVkJRVVU3TkVKQlEzWkRMRWRCUVVjc1EwRkRSQ3hKUVVGSkxHbERRVUZuUWl4RFFVTnNRaXd5UWtGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4UlFVRlJMRVZCUTNaQ0xESkVRVUV5UkR0blEwRkRla1FzWVVGQllTeFBRVUZQTEdGQlFXRXNiVUpCUVcxQ0xFOUJRVThzUTBGRGVrUXNSMEZCUnl4RFFVTktMRVZCUVVVc1JVRkRUQ3hGUVVGRkxFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZEYWtJc1EwRkRSaXhEUVVGRE8zbENRVU5JTzNkQ1FVTkVMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdjVUpCUTNCRE8yOUNRVVZFTEd0RVFVRnJSRHR2UWtGRGJFUXNUMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdhVUpCUTNoQ08xbEJRMGdzUTBGQlF5eERRVUZETzFsQlJVWXNTVUZCU1R0blFrRkRSaXhWUVVGVkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03WVVGRGFrTTdXVUZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHRuUWtGRFpDeEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1lVRkRXanRSUVVOSUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5MTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2EwSkJRV3RDTEVOQlEzSkRMRkZCUVhORE8xRkJSWFJETEV0QlFVc3NUVUZCVFN4UFFVRlBMRWxCUVVrc1VVRkJVU3hGUVVGRk8xbEJRemxDTEUxQlFVMHNTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEVWQlFVVTdaMEpCUTNCRExFOUJRVThzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNCRUxFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEwbzdTVUZEU0N4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwc3NUVUZCVFN4RFFVRkRMRzFDUVVGdFFpeERRVU5vUXl4SFFVRTBRaXhGUVVNMVFpeEhRVUZ2UXl4RlFVTndReXhWUVVGdFFqdFJRVVZ1UWl4SlFVRkpMRU5CUVVNc1EwRkJReXhSUVVGUkxFbEJRVWtzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1NVRkJTU3hIUVVGSExFTkJRVU1zUlVGQlJUdFpRVU16UXl4TlFVRk5MRWxCUVVrc2FVTkJRV2RDTEVOQlEzaENMREpDUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZEZGtJc1owVkJRV2RGTEU5QlFVOHNRMEZEY2tVc1IwRkJSeXhEUVVOS0xFVkJRVVVzUlVGRFNDeEZRVUZGTEU5QlFVOHNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkRha0lzUTBGQlF6dFRRVU5JTzFGQlEwUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSVHRaUVVObUxFMUJRVTBzU1VGQlNTeHBRMEZCWjBJc1EwRkRlRUlzTWtKQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hGUVVOMlFpd3dRMEZCTUVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlEzaEVMRVZCUVVVc1QwRkJUeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVU5xUWl4RFFVRkRPMU5CUTBnN1NVRkRTQ3hEUVVGRE8wTkJRMFk3UVVGeVdVUXNjME5CY1ZsRE8wRkJSVVFzVTBGQlV5eFBRVUZQTEVOQlFVTXNUMEZCWjBNN1NVRkRMME1zVDBGQlR5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETVVNc1EwRkJReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUFzeW5jTWlkZGxld2FyZSA9IHZvaWQgMDtcbi8qKlxuICogSnNvblJwY0VuZ2luZSBvbmx5IGFjY2VwdHMgY2FsbGJhY2stYmFzZWQgbWlkZGxld2FyZSBkaXJlY3RseS5cbiAqIGNyZWF0ZUFzeW5jTWlkZGxld2FyZSBleGlzdHMgdG8gZW5hYmxlIGNvbnN1bWVycyB0byBwYXNzIGluIGFzeW5jIG1pZGRsZXdhcmVcbiAqIGZ1bmN0aW9ucy5cbiAqXG4gKiBBc3luYyBtaWRkbGV3YXJlIGhhdmUgbm8gXCJlbmRcIiBmdW5jdGlvbi4gSW5zdGVhZCwgdGhleSBcImVuZFwiIGlmIHRoZXkgcmV0dXJuXG4gKiB3aXRob3V0IGNhbGxpbmcgXCJuZXh0XCIuIFJhdGhlciB0aGFuIHBhc3NpbmcgaW4gZXhwbGljaXQgcmV0dXJuIGhhbmRsZXJzLFxuICogYXN5bmMgbWlkZGxld2FyZSBjYW4gc2ltcGx5IGF3YWl0IFwibmV4dFwiLCBhbmQgcGVyZm9ybSBvcGVyYXRpb25zIG9uIHRoZVxuICogcmVzcG9uc2Ugb2JqZWN0IHdoZW4gZXhlY3V0aW9uIHJlc3VtZXMuXG4gKlxuICogVG8gYWNjb21wbGlzaCB0aGlzLCBjcmVhdGVBc3luY01pZGRsZXdhcmUgcGFzc2VzIHRoZSBhc3luYyBtaWRkbGV3YXJlIGFcbiAqIHdyYXBwZWQgXCJuZXh0XCIgZnVuY3Rpb24uIFRoYXQgZnVuY3Rpb24gY2FsbHMgdGhlIGludGVybmFsIEpzb25ScGNFbmdpbmVcbiAqIFwibmV4dFwiIGZ1bmN0aW9uIHdpdGggYSByZXR1cm4gaGFuZGxlciB0aGF0IHJlc29sdmVzIGEgcHJvbWlzZSB3aGVuIGNhbGxlZC5cbiAqXG4gKiBUaGUgcmV0dXJuIGhhbmRsZXIgd2lsbCBhbHdheXMgYmUgY2FsbGVkLiBJdHMgcmVzb2x1dGlvbiBvZiB0aGUgcHJvbWlzZVxuICogZW5hYmxlcyB0aGUgY29udHJvbCBmbG93IGRlc2NyaWJlZCBhYm92ZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXN5bmNNaWRkbGV3YXJlKGFzeW5jTWlkZGxld2FyZSkge1xuICAgIHJldHVybiBhc3luYyAocmVxLCByZXMsIG5leHQsIGVuZCkgPT4ge1xuICAgICAgICAvLyBuZXh0UHJvbWlzZSBpcyB0aGUga2V5IHRvIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgICAgICAvLyBpdCBpcyByZXNvbHZlZCBieSB0aGUgcmV0dXJuIGhhbmRsZXIgcGFzc2VkIHRvIHRoZVxuICAgICAgICAvLyBcIm5leHRcIiBmdW5jdGlvblxuICAgICAgICBsZXQgcmVzb2x2ZU5leHRQcm9taXNlO1xuICAgICAgICBjb25zdCBuZXh0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlTmV4dFByb21pc2UgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJldHVybkhhbmRsZXJDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGxldCBuZXh0V2FzQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSBjYWxsZWQgYnkgdGhlIGNvbnN1bWVyJ3MgYXN5bmMgbWlkZGxld2FyZS5cbiAgICAgICAgY29uc3QgYXN5bmNOZXh0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbmV4dFdhc0NhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAvLyBXZSBwYXNzIGEgcmV0dXJuIGhhbmRsZXIgdG8gbmV4dCgpLiBXaGVuIGl0IGlzIGNhbGxlZCBieSB0aGUgZW5naW5lLFxuICAgICAgICAgICAgLy8gdGhlIGNvbnN1bWVyJ3MgYXN5bmMgbWlkZGxld2FyZSB3aWxsIHJlc3VtZSBleGVjdXRpbmcuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9jYWxsYmFjay1yZXR1cm5cbiAgICAgICAgICAgIG5leHQoKHJ1blJldHVybkhhbmRsZXJzQ2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNhbGxiYWNrIGNvbWVzIGZyb20gSnNvblJwY0VuZ2luZS5fcnVuUmV0dXJuSGFuZGxlcnNcbiAgICAgICAgICAgICAgICByZXR1cm5IYW5kbGVyQ2FsbGJhY2sgPSBydW5SZXR1cm5IYW5kbGVyc0NhbGxiYWNrO1xuICAgICAgICAgICAgICAgIHJlc29sdmVOZXh0UHJvbWlzZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhd2FpdCBuZXh0UHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGFzeW5jTWlkZGxld2FyZShyZXEsIHJlcywgYXN5bmNOZXh0KTtcbiAgICAgICAgICAgIGlmIChuZXh0V2FzQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbmV4dFByb21pc2U7IC8vIHdlIG11c3Qgd2FpdCB1bnRpbCB0aGUgcmV0dXJuIGhhbmRsZXIgaXMgY2FsbGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuSGFuZGxlckNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHJldHVybkhhbmRsZXJDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybkhhbmRsZXJDYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmQoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlQXN5bmNNaWRkbGV3YXJlID0gY3JlYXRlQXN5bmNNaWRkbGV3YXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTNKbFlYUmxRWE41Ym1OTmFXUmtiR1YzWVhKbExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMMk55WldGMFpVRnplVzVqVFdsa1pHeGxkMkZ5WlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZuUWtFN096czdPenM3T3pzN096czdPenM3UjBGblFrYzdRVUZEU0N4VFFVRm5RaXh4UWtGQmNVSXNRMEZEYmtNc1pVRkJOa003U1VGRk4wTXNUMEZCVHl4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNSMEZCUnl4RlFVRkZMRVZCUVVVN1VVRkRia01zSzBOQlFTdERPMUZCUXk5RExIRkVRVUZ4UkR0UlFVTnlSQ3hyUWtGQmEwSTdVVUZEYkVJc1NVRkJTU3hyUWtGQk9FSXNRMEZCUXp0UlFVTnVReXhOUVVGTkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRk8xbEJRekZETEd0Q1FVRnJRaXhIUVVGSExFOUJRVThzUTBGQlF6dFJRVU12UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVWSUxFbEJRVWtzY1VKQlFYRkNMRWRCUVZrc1NVRkJTU3hEUVVGRE8xRkJRekZETEVsQlFVa3NZVUZCWVN4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVVeFFpd3dSRUZCTUVRN1VVRkRNVVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NTMEZCU3l4SlFVRkpMRVZCUVVVN1dVRkRNMElzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXp0WlFVVnlRaXgxUlVGQmRVVTdXVUZEZGtVc2VVUkJRWGxFTzFsQlEzcEVMR2RFUVVGblJEdFpRVU5vUkN4SlFVRkpMRU5CUVVNc1EwRkJReXg1UWtGQmVVSXNSVUZCUlN4RlFVRkZPMmRDUVVOcVF5dzBSRUZCTkVRN1owSkJRelZFTEhGQ1FVRnhRaXhIUVVGSExIbENRVUY1UWl4RFFVRkRPMmRDUVVOc1JDeHJRa0ZCYTBJc1JVRkJSU3hEUVVGRE8xbEJRM1pDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTBnc1RVRkJUU3hYUVVGWExFTkJRVU03VVVGRGNFSXNRMEZCUXl4RFFVRkRPMUZCUlVZc1NVRkJTVHRaUVVOR0xFMUJRVTBzWlVGQlpTeERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03V1VGRk0wTXNTVUZCU1N4aFFVRmhMRVZCUVVVN1owSkJRMnBDTEUxQlFVMHNWMEZCVnl4RFFVRkRMRU5CUVVNc2EwUkJRV3RFTzJkQ1FVTndSU3h4UWtGQkswTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRoUVVONFJEdHBRa0ZCVFR0blFrRkRUQ3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdZVUZEV0R0VFFVTkdPMUZCUVVNc1QwRkJUeXhMUVVGTExFVkJRVVU3V1VGRFpDeEpRVUZKTEhGQ1FVRnhRaXhGUVVGRk8yZENRVU40UWl4eFFrRkJLME1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0aFFVTjZSRHRwUWtGQlRUdG5Ra0ZEVEN4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03WVVGRFdqdFRRVU5HTzBsQlEwZ3NRMEZCUXl4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVM5RFJDeHpSRUVyUTBNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlID0gdm9pZCAwO1xuZnVuY3Rpb24gY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlKGhhbmRsZXJzKSB7XG4gICAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCwgZW5kKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1tyZXEubWV0aG9kXTtcbiAgICAgICAgLy8gaWYgbm8gaGFuZGxlciwgcmV0dXJuXG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgaGFuZGxlciBpcyBmbiwgY2FsbCBhcyBtaWRkbGV3YXJlXG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIocmVxLCByZXMsIG5leHQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgaGFuZGxlciBpcyBzb21lIG90aGVyIHZhbHVlLCB1c2UgYXMgcmVzdWx0XG4gICAgICAgIHJlcy5yZXN1bHQgPSBoYW5kbGVyO1xuICAgICAgICByZXR1cm4gZW5kKCk7XG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlID0gY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTNKbFlYUmxVMk5oWm1admJHUk5hV1JrYkdWM1lYSmxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDJOeVpXRjBaVk5qWVdabWIyeGtUV2xrWkd4bGQyRnlaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkpRU3hUUVVGblFpeDNRa0ZCZDBJc1EwRkJReXhSUVVWNFF6dEpRVU5ETEU5QlFVOHNRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVXNSVUZCUlR0UlFVTTNRaXhOUVVGTkxFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRM0pETEhkQ1FVRjNRanRSUVVONFFpeEpRVUZKTEU5QlFVOHNTMEZCU3l4VFFVRlRMRVZCUVVVN1dVRkRla0lzVDBGQlR5eEpRVUZKTEVWQlFVVXNRMEZCUXp0VFFVTm1PMUZCUTBRc2RVTkJRWFZETzFGQlEzWkRMRWxCUVVrc1QwRkJUeXhQUVVGUExFdEJRVXNzVlVGQlZTeEZRVUZGTzFsQlEycERMRTlCUVU4c1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xTkJRM0pETzFGQlEwUXNaMFJCUVdkRU8xRkJReTlETEVkQlFTdENMRU5CUVVNc1RVRkJUU3hIUVVGSExFOUJRVThzUTBGQlF6dFJRVU5zUkN4UFFVRlBMRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRMllzUTBGQlF5eERRVUZETzBGQlEwb3NRMEZCUXp0QlFXcENSQ3cwUkVGcFFrTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFVuaXF1ZUlkID0gdm9pZCAwO1xuLy8gdWludDMyICh0d28ncyBjb21wbGVtZW50KSBtYXhcbi8vIG1vcmUgY29uc2VydmF0aXZlIHRoYW4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbmNvbnN0IE1BWCA9IDQyOTQ5NjcyOTU7XG5sZXQgaWRDb3VudGVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTUFYKTtcbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICAgIGlkQ291bnRlciA9IChpZENvdW50ZXIgKyAxKSAlIE1BWDtcbiAgICByZXR1cm4gaWRDb3VudGVyO1xufVxuZXhwb3J0cy5nZXRVbmlxdWVJZCA9IGdldFVuaXF1ZUlkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWjJWMFZXNXBjWFZsU1dRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZaMlYwVlc1cGNYVmxTV1F1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzWjBOQlFXZERPMEZCUTJoRExHbEVRVUZwUkR0QlFVTnFSQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eFZRVUZWTEVOQlFVTTdRVUZEZGtJc1NVRkJTU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZGYUVRc1UwRkJaMElzVjBGQlZ6dEpRVU42UWl4VFFVRlRMRWRCUVVjc1EwRkJReXhUUVVGVExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRPMGxCUTJ4RExFOUJRVThzVTBGQlV5eERRVUZETzBGQlEyNUNMRU5CUVVNN1FVRklSQ3hyUTBGSFF5SjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlSWRSZW1hcE1pZGRsZXdhcmUgPSB2b2lkIDA7XG5jb25zdCBnZXRVbmlxdWVJZF8xID0gcmVxdWlyZShcIi4vZ2V0VW5pcXVlSWRcIik7XG5mdW5jdGlvbiBjcmVhdGVJZFJlbWFwTWlkZGxld2FyZSgpIHtcbiAgICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0LCBfZW5kKSA9PiB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsSWQgPSByZXEuaWQ7XG4gICAgICAgIGNvbnN0IG5ld0lkID0gZ2V0VW5pcXVlSWRfMS5nZXRVbmlxdWVJZCgpO1xuICAgICAgICByZXEuaWQgPSBuZXdJZDtcbiAgICAgICAgcmVzLmlkID0gbmV3SWQ7XG4gICAgICAgIG5leHQoKGRvbmUpID0+IHtcbiAgICAgICAgICAgIHJlcS5pZCA9IG9yaWdpbmFsSWQ7XG4gICAgICAgICAgICByZXMuaWQgPSBvcmlnaW5hbElkO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVJZFJlbWFwTWlkZGxld2FyZSA9IGNyZWF0ZUlkUmVtYXBNaWRkbGV3YXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVdSU1pXMWhjRTFwWkdSc1pYZGhjbVV1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmFXUlNaVzFoY0UxcFpHUnNaWGRoY21VdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc0swTkJRVFJETzBGQlJ6VkRMRk5CUVdkQ0xIVkNRVUYxUWp0SlFVTnlReXhQUVVGUExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVU3VVVGRE9VSXNUVUZCVFN4VlFVRlZMRWRCUVVjc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU14UWl4TlFVRk5MRXRCUVVzc1IwRkJSeXg1UWtGQlZ5eEZRVUZGTEVOQlFVTTdVVUZETlVJc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdVVUZEWml4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExFdEJRVXNzUTBGQlF6dFJRVU5tTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRMW9zUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1dVRkRjRUlzUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1dVRkRjRUlzU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZEVkN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU1zUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZhUkN3d1JFRlpReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pZFJlbWFwTWlkZGxld2FyZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3JlYXRlQXN5bmNNaWRkbGV3YXJlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dldFVuaXF1ZUlkXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Kc29uUnBjRW5naW5lXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tZXJnZU1pZGRsZXdhcmVcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3TzBGQlFVRXNjMFJCUVc5RE8wRkJRM0JETERCRVFVRjNRenRCUVVONFF5dzJSRUZCTWtNN1FVRkRNME1zWjBSQlFUaENPMEZCUXpsQ0xHdEVRVUZuUXp0QlFVTm9ReXh2UkVGQmEwTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlTWlkZGxld2FyZSA9IHZvaWQgMDtcbmNvbnN0IEpzb25ScGNFbmdpbmVfMSA9IHJlcXVpcmUoXCIuL0pzb25ScGNFbmdpbmVcIik7XG5mdW5jdGlvbiBtZXJnZU1pZGRsZXdhcmUobWlkZGxld2FyZVN0YWNrKSB7XG4gICAgY29uc3QgZW5naW5lID0gbmV3IEpzb25ScGNFbmdpbmVfMS5Kc29uUnBjRW5naW5lKCk7XG4gICAgbWlkZGxld2FyZVN0YWNrLmZvckVhY2goKG1pZGRsZXdhcmUpID0+IGVuZ2luZS5wdXNoKG1pZGRsZXdhcmUpKTtcbiAgICByZXR1cm4gZW5naW5lLmFzTWlkZGxld2FyZSgpO1xufVxuZXhwb3J0cy5tZXJnZU1pZGRsZXdhcmUgPSBtZXJnZU1pZGRsZXdhcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liV1Z5WjJWTmFXUmtiR1YzWVhKbExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMMjFsY21kbFRXbGtaR3hsZDJGeVpTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGQlFTeHRSRUZCYlVVN1FVRkZia1VzVTBGQlowSXNaVUZCWlN4RFFVRkRMR1ZCUVhORU8wbEJRM0JHTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc05rSkJRV0VzUlVGQlJTeERRVUZETzBsQlEyNURMR1ZCUVdVc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnFSU3hQUVVGUExFMUJRVTBzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXp0QlFVTXZRaXhEUVVGRE8wRkJTa1FzTUVOQlNVTWlmUT09IiwibW9kdWxlLmV4cG9ydHMgPSBJZEl0ZXJhdG9yXG5cbmZ1bmN0aW9uIElkSXRlcmF0b3Iob3B0cyl7XG4gIG9wdHMgPSBvcHRzIHx8IHt9XG4gIHZhciBtYXggPSBvcHRzLm1heCB8fCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICB2YXIgaWRDb3VudGVyID0gdHlwZW9mIG9wdHMuc3RhcnQgIT09ICd1bmRlZmluZWQnID8gb3B0cy5zdGFydCA6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heClcblxuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUmFuZG9tSWQgKCkge1xuICAgIGlkQ291bnRlciA9IGlkQ291bnRlciAlIG1heFxuICAgIHJldHVybiBpZENvdW50ZXIrK1xuICB9XG5cbn0iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKSxcbiAgICBzdHViRmFsc2UgPSByZXF1aXJlKCcuL3N0dWJGYWxzZScpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gKi9cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9vcDtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByb2Nlc3NGbiA9IChmbiwgb3B0cykgPT4gZnVuY3Rpb24gKCkge1xuXHRjb25zdCBQID0gb3B0cy5wcm9taXNlTW9kdWxlO1xuXHRjb25zdCBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0YXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0fVxuXG5cdHJldHVybiBuZXcgUCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0aWYgKG9wdHMuZXJyb3JGaXJzdCkge1xuXHRcdFx0YXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuXHRcdFx0XHRpZiAob3B0cy5tdWx0aUFyZ3MpIHtcblx0XHRcdFx0XHRjb25zdCByZXN1bHRzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcblxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRzLnVuc2hpZnQoZXJyKTtcblx0XHRcdFx0XHRcdHJlamVjdChyZXN1bHRzKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzb2x2ZShyZXN1bHRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXJyKSB7XG5cdFx0XHRcdFx0cmVqZWN0KGVycik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShyZXN1bHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXJncy5wdXNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRcdFx0aWYgKG9wdHMubXVsdGlBcmdzKSB7XG5cdFx0XHRcdFx0Y29uc3QgcmVzdWx0cyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG5cblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0cmVzdWx0c1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXNvbHZlKHJlc3VsdHMpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc29sdmUocmVzdWx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Zm4uYXBwbHkodGhpcywgYXJncyk7XG5cdH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAob2JqLCBvcHRzKSA9PiB7XG5cdG9wdHMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRleGNsdWRlOiBbLy4rKFN5bmN8U3RyZWFtKSQvXSxcblx0XHRlcnJvckZpcnN0OiB0cnVlLFxuXHRcdHByb21pc2VNb2R1bGU6IFByb21pc2Vcblx0fSwgb3B0cyk7XG5cblx0Y29uc3QgZmlsdGVyID0ga2V5ID0+IHtcblx0XHRjb25zdCBtYXRjaCA9IHBhdHRlcm4gPT4gdHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnID8ga2V5ID09PSBwYXR0ZXJuIDogcGF0dGVybi50ZXN0KGtleSk7XG5cdFx0cmV0dXJuIG9wdHMuaW5jbHVkZSA/IG9wdHMuaW5jbHVkZS5zb21lKG1hdGNoKSA6ICFvcHRzLmV4Y2x1ZGUuc29tZShtYXRjaCk7XG5cdH07XG5cblx0bGV0IHJldDtcblx0aWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAob3B0cy5leGNsdWRlTWFpbikge1xuXHRcdFx0XHRyZXR1cm4gb2JqLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwcm9jZXNzRm4ob2JqLCBvcHRzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSk7XG5cdH1cblxuXHRmb3IgKGNvbnN0IGtleSBpbiBvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBndWFyZC1mb3ItaW5cblx0XHRjb25zdCB4ID0gb2JqW2tleV07XG5cdFx0cmV0W2tleV0gPSB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyAmJiBmaWx0ZXIoa2V5KSA/IHByb2Nlc3NGbih4LCBvcHRzKSA6IHg7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcbiIsInZhciBuLGwsdSxpLHQscixvLGYsZT17fSxjPVtdLHM9L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmQvaTtmdW5jdGlvbiBhKG4sbCl7Zm9yKHZhciB1IGluIGwpblt1XT1sW3VdO3JldHVybiBufWZ1bmN0aW9uIHYobil7dmFyIGw9bi5wYXJlbnROb2RlO2wmJmwucmVtb3ZlQ2hpbGQobil9ZnVuY3Rpb24gaChuLGwsdSl7dmFyIGksdD1hcmd1bWVudHMscj17fTtmb3IoaSBpbiBsKVwia2V5XCIhPT1pJiZcInJlZlwiIT09aSYmKHJbaV09bFtpXSk7aWYoYXJndW1lbnRzLmxlbmd0aD4zKWZvcih1PVt1XSxpPTM7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl1LnB1c2godFtpXSk7aWYobnVsbCE9dSYmKHIuY2hpbGRyZW49dSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmbnVsbCE9bi5kZWZhdWx0UHJvcHMpZm9yKGkgaW4gbi5kZWZhdWx0UHJvcHMpdm9pZCAwPT09cltpXSYmKHJbaV09bi5kZWZhdWx0UHJvcHNbaV0pO3JldHVybiBwKG4scixsJiZsLmtleSxsJiZsLnJlZixudWxsKX1mdW5jdGlvbiBwKGwsdSxpLHQscil7dmFyIG89e3R5cGU6bCxwcm9wczp1LGtleTppLHJlZjp0LF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192OnJ9O3JldHVybiBudWxsPT1yJiYoby5fX3Y9byksbi52bm9kZSYmbi52bm9kZShvKSxvfWZ1bmN0aW9uIHkoKXtyZXR1cm57fX1mdW5jdGlvbiBkKG4pe3JldHVybiBuLmNoaWxkcmVufWZ1bmN0aW9uIG0obixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWx9ZnVuY3Rpb24gdyhuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/dyhuLl9fLG4uX18uX19rLmluZGV4T2YobikrMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZT93KG4pOm51bGx9ZnVuY3Rpb24gayhuKXt2YXIgbCx1O2lmKG51bGwhPShuPW4uX18pJiZudWxsIT1uLl9fYyl7Zm9yKG4uX19lPW4uX19jLmJhc2U9bnVsbCxsPTA7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2Upe24uX19lPW4uX19jLmJhc2U9dS5fX2U7YnJlYWt9cmV0dXJuIGsobil9fWZ1bmN0aW9uIGcobCl7KCFsLl9fZCYmKGwuX19kPSEwKSYmdS5wdXNoKGwpJiYhaSsrfHxyIT09bi5kZWJvdW5jZVJlbmRlcmluZykmJigocj1uLmRlYm91bmNlUmVuZGVyaW5nKXx8dCkoXyl9ZnVuY3Rpb24gXygpe2Zvcih2YXIgbjtpPXUubGVuZ3RoOyluPXUuc29ydChmdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSksdT1bXSxuLnNvbWUoZnVuY3Rpb24obil7dmFyIGwsdSxpLHQscixvLGY7bi5fX2QmJihvPShyPShsPW4pLl9fdikuX19lLChmPWwuX19QKSYmKHU9W10sKGk9YSh7fSxyKSkuX192PWksdD1BKGYscixpLGwuX19uLHZvaWQgMCE9PWYub3duZXJTVkdFbGVtZW50LG51bGwsdSxudWxsPT1vP3cocik6byksVCh1LHIpLHQhPW8mJmsocikpKX0pfWZ1bmN0aW9uIGIobixsLHUsaSx0LHIsbyxmLHMpe3ZhciBhLGgscCx5LGQsbSxrLGc9dSYmdS5fX2t8fGMsXz1nLmxlbmd0aDtpZihmPT1lJiYoZj1udWxsIT1yP3JbMF06Xz93KHUsMCk6bnVsbCksYT0wLGwuX19rPXgobC5fX2ssZnVuY3Rpb24odSl7aWYobnVsbCE9dSl7aWYodS5fXz1sLHUuX19iPWwuX19iKzEsbnVsbD09PShwPWdbYV0pfHxwJiZ1LmtleT09cC5rZXkmJnUudHlwZT09PXAudHlwZSlnW2FdPXZvaWQgMDtlbHNlIGZvcihoPTA7aDxfO2grKyl7aWYoKHA9Z1toXSkmJnUua2V5PT1wLmtleSYmdS50eXBlPT09cC50eXBlKXtnW2hdPXZvaWQgMDticmVha31wPW51bGx9aWYoeT1BKG4sdSxwPXB8fGUsaSx0LHIsbyxmLHMpLChoPXUucmVmKSYmcC5yZWYhPWgmJihrfHwoaz1bXSkscC5yZWYmJmsucHVzaChwLnJlZixudWxsLHUpLGsucHVzaChoLHUuX19jfHx5LHUpKSxudWxsIT15KXt2YXIgYztpZihudWxsPT1tJiYobT15KSx2b2lkIDAhPT11Ll9fZCljPXUuX19kLHUuX19kPXZvaWQgMDtlbHNlIGlmKHI9PXB8fHkhPWZ8fG51bGw9PXkucGFyZW50Tm9kZSl7bjppZihudWxsPT1mfHxmLnBhcmVudE5vZGUhPT1uKW4uYXBwZW5kQ2hpbGQoeSksYz1udWxsO2Vsc2V7Zm9yKGQ9ZixoPTA7KGQ9ZC5uZXh0U2libGluZykmJmg8XztoKz0yKWlmKGQ9PXkpYnJlYWsgbjtuLmluc2VydEJlZm9yZSh5LGYpLGM9Zn1cIm9wdGlvblwiPT1sLnR5cGUmJihuLnZhbHVlPVwiXCIpfWY9dm9pZCAwIT09Yz9jOnkubmV4dFNpYmxpbmcsXCJmdW5jdGlvblwiPT10eXBlb2YgbC50eXBlJiYobC5fX2Q9Zil9ZWxzZSBmJiZwLl9fZT09ZiYmZi5wYXJlbnROb2RlIT1uJiYoZj13KHApKX1yZXR1cm4gYSsrLHV9KSxsLl9fZT1tLG51bGwhPXImJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGwudHlwZSlmb3IoYT1yLmxlbmd0aDthLS07KW51bGwhPXJbYV0mJnYoclthXSk7Zm9yKGE9XzthLS07KW51bGwhPWdbYV0mJkQoZ1thXSxnW2FdKTtpZihrKWZvcihhPTA7YTxrLmxlbmd0aDthKyspaihrW2FdLGtbKythXSxrWysrYV0pfWZ1bmN0aW9uIHgobixsLHUpe2lmKG51bGw9PXUmJih1PVtdKSxudWxsPT1ufHxcImJvb2xlYW5cIj09dHlwZW9mIG4pbCYmdS5wdXNoKGwobnVsbCkpO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShuKSlmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKyl4KG5baV0sbCx1KTtlbHNlIHUucHVzaChsP2woXCJzdHJpbmdcIj09dHlwZW9mIG58fFwibnVtYmVyXCI9PXR5cGVvZiBuP3AobnVsbCxuLG51bGwsbnVsbCxuKTpudWxsIT1uLl9fZXx8bnVsbCE9bi5fX2M/cChuLnR5cGUsbi5wcm9wcyxuLmtleSxudWxsLG4uX192KTpuKTpuKTtyZXR1cm4gdX1mdW5jdGlvbiBQKG4sbCx1LGksdCl7dmFyIHI7Zm9yKHIgaW4gdSlcImNoaWxkcmVuXCI9PT1yfHxcImtleVwiPT09cnx8ciBpbiBsfHxOKG4scixudWxsLHVbcl0saSk7Zm9yKHIgaW4gbCl0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBsW3JdfHxcImNoaWxkcmVuXCI9PT1yfHxcImtleVwiPT09cnx8XCJ2YWx1ZVwiPT09cnx8XCJjaGVja2VkXCI9PT1yfHx1W3JdPT09bFtyXXx8TihuLHIsbFtyXSx1W3JdLGkpfWZ1bmN0aW9uIEMobixsLHUpe1wiLVwiPT09bFswXT9uLnNldFByb3BlcnR5KGwsdSk6bltsXT1cIm51bWJlclwiPT10eXBlb2YgdSYmITE9PT1zLnRlc3QobCk/dStcInB4XCI6bnVsbD09dT9cIlwiOnV9ZnVuY3Rpb24gTihuLGwsdSxpLHQpe3ZhciByLG8sZixlLGM7aWYodD9cImNsYXNzTmFtZVwiPT09bCYmKGw9XCJjbGFzc1wiKTpcImNsYXNzXCI9PT1sJiYobD1cImNsYXNzTmFtZVwiKSxcInN0eWxlXCI9PT1sKWlmKHI9bi5zdHlsZSxcInN0cmluZ1wiPT10eXBlb2YgdSlyLmNzc1RleHQ9dTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpJiYoci5jc3NUZXh0PVwiXCIsaT1udWxsKSxpKWZvcihlIGluIGkpdSYmZSBpbiB1fHxDKHIsZSxcIlwiKTtpZih1KWZvcihjIGluIHUpaSYmdVtjXT09PWlbY118fEMocixjLHVbY10pfWVsc2VcIm9cIj09PWxbMF0mJlwiblwiPT09bFsxXT8obz1sIT09KGw9bC5yZXBsYWNlKC9DYXB0dXJlJC8sXCJcIikpLGY9bC50b0xvd2VyQ2FzZSgpLGw9KGYgaW4gbj9mOmwpLnNsaWNlKDIpLHU/KGl8fG4uYWRkRXZlbnRMaXN0ZW5lcihsLHosbyksKG4ubHx8KG4ubD17fSkpW2xdPXUpOm4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihsLHosbykpOlwibGlzdFwiIT09bCYmXCJ0YWdOYW1lXCIhPT1sJiZcImZvcm1cIiE9PWwmJlwidHlwZVwiIT09bCYmXCJzaXplXCIhPT1sJiYhdCYmbCBpbiBuP25bbF09bnVsbD09dT9cIlwiOnU6XCJmdW5jdGlvblwiIT10eXBlb2YgdSYmXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmKGwhPT0obD1sLnJlcGxhY2UoL154bGluazo/LyxcIlwiKSk/bnVsbD09dXx8ITE9PT11P24ucmVtb3ZlQXR0cmlidXRlTlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsbC50b0xvd2VyQ2FzZSgpKTpuLnNldEF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLGwudG9Mb3dlckNhc2UoKSx1KTpudWxsPT11fHwhMT09PXUmJiEvXmFyLy50ZXN0KGwpP24ucmVtb3ZlQXR0cmlidXRlKGwpOm4uc2V0QXR0cmlidXRlKGwsdSkpfWZ1bmN0aW9uIHoobCl7dGhpcy5sW2wudHlwZV0obi5ldmVudD9uLmV2ZW50KGwpOmwpfWZ1bmN0aW9uIEEobCx1LGksdCxyLG8sZixlLGMpe3ZhciBzLHYsaCxwLHksdyxrLGcsXyx4LFA9dS50eXBlO2lmKHZvaWQgMCE9PXUuY29uc3RydWN0b3IpcmV0dXJuIG51bGw7KHM9bi5fX2IpJiZzKHUpO3RyeXtuOmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFApe2lmKGc9dS5wcm9wcyxfPShzPVAuY29udGV4dFR5cGUpJiZ0W3MuX19jXSx4PXM/Xz9fLnByb3BzLnZhbHVlOnMuX186dCxpLl9fYz9rPSh2PXUuX19jPWkuX19jKS5fXz12Ll9fRTooXCJwcm90b3R5cGVcImluIFAmJlAucHJvdG90eXBlLnJlbmRlcj91Ll9fYz12PW5ldyBQKGcseCk6KHUuX19jPXY9bmV3IG0oZyx4KSx2LmNvbnN0cnVjdG9yPVAsdi5yZW5kZXI9RSksXyYmXy5zdWIodiksdi5wcm9wcz1nLHYuc3RhdGV8fCh2LnN0YXRlPXt9KSx2LmNvbnRleHQ9eCx2Ll9fbj10LGg9di5fX2Q9ITAsdi5fX2g9W10pLG51bGw9PXYuX19zJiYodi5fX3M9di5zdGF0ZSksbnVsbCE9UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJih2Ll9fcz09di5zdGF0ZSYmKHYuX19zPWEoe30sdi5fX3MpKSxhKHYuX19zLFAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKGcsdi5fX3MpKSkscD12LnByb3BzLHk9di5zdGF0ZSxoKW51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZudWxsIT12LmNvbXBvbmVudFdpbGxNb3VudCYmdi5jb21wb25lbnRXaWxsTW91bnQoKSxudWxsIT12LmNvbXBvbmVudERpZE1vdW50JiZ2Ll9faC5wdXNoKHYuY29tcG9uZW50RGlkTW91bnQpO2Vsc2V7aWYobnVsbD09UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJmchPT1wJiZudWxsIT12LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJnYuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhnLHgpLCF2Ll9fZSYmbnVsbCE9di5zaG91bGRDb21wb25lbnRVcGRhdGUmJiExPT09di5zaG91bGRDb21wb25lbnRVcGRhdGUoZyx2Ll9fcyx4KXx8dS5fX3Y9PT1pLl9fdiYmIXYuX18pe2Zvcih2LnByb3BzPWcsdi5zdGF0ZT12Ll9fcyx1Ll9fdiE9PWkuX192JiYodi5fX2Q9ITEpLHYuX192PXUsdS5fX2U9aS5fX2UsdS5fX2s9aS5fX2ssdi5fX2gubGVuZ3RoJiZmLnB1c2godikscz0wO3M8dS5fX2subGVuZ3RoO3MrKyl1Ll9fa1tzXSYmKHUuX19rW3NdLl9fPXUpO2JyZWFrIG59bnVsbCE9di5jb21wb25lbnRXaWxsVXBkYXRlJiZ2LmNvbXBvbmVudFdpbGxVcGRhdGUoZyx2Ll9fcyx4KSxudWxsIT12LmNvbXBvbmVudERpZFVwZGF0ZSYmdi5fX2gucHVzaChmdW5jdGlvbigpe3YuY29tcG9uZW50RGlkVXBkYXRlKHAseSx3KX0pfXYuY29udGV4dD14LHYucHJvcHM9Zyx2LnN0YXRlPXYuX19zLChzPW4uX19yKSYmcyh1KSx2Ll9fZD0hMSx2Ll9fdj11LHYuX19QPWwscz12LnJlbmRlcih2LnByb3BzLHYuc3RhdGUsdi5jb250ZXh0KSx1Ll9faz1udWxsIT1zJiZzLnR5cGU9PWQmJm51bGw9PXMua2V5P3MucHJvcHMuY2hpbGRyZW46QXJyYXkuaXNBcnJheShzKT9zOltzXSxudWxsIT12LmdldENoaWxkQ29udGV4dCYmKHQ9YShhKHt9LHQpLHYuZ2V0Q2hpbGRDb250ZXh0KCkpKSxofHxudWxsPT12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHwodz12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHAseSkpLGIobCx1LGksdCxyLG8sZixlLGMpLHYuYmFzZT11Ll9fZSx2Ll9faC5sZW5ndGgmJmYucHVzaCh2KSxrJiYodi5fX0U9di5fXz1udWxsKSx2Ll9fZT0hMX1lbHNlIG51bGw9PW8mJnUuX192PT09aS5fX3Y/KHUuX19rPWkuX19rLHUuX19lPWkuX19lKTp1Ll9fZT0kKGkuX19lLHUsaSx0LHIsbyxmLGMpOyhzPW4uZGlmZmVkKSYmcyh1KX1jYXRjaChsKXt1Ll9fdj1udWxsLG4uX19lKGwsdSxpKX1yZXR1cm4gdS5fX2V9ZnVuY3Rpb24gVChsLHUpe24uX19jJiZuLl9fYyh1LGwpLGwuc29tZShmdW5jdGlvbih1KXt0cnl7bD11Ll9faCx1Ll9faD1bXSxsLnNvbWUoZnVuY3Rpb24obil7bi5jYWxsKHUpfSl9Y2F0Y2gobCl7bi5fX2UobCx1Ll9fdil9fSl9ZnVuY3Rpb24gJChuLGwsdSxpLHQscixvLGYpe3ZhciBzLGEsdixoLHAseT11LnByb3BzLGQ9bC5wcm9wcztpZih0PVwic3ZnXCI9PT1sLnR5cGV8fHQsbnVsbCE9cilmb3Iocz0wO3M8ci5sZW5ndGg7cysrKWlmKG51bGwhPShhPXJbc10pJiYoKG51bGw9PT1sLnR5cGU/Mz09PWEubm9kZVR5cGU6YS5sb2NhbE5hbWU9PT1sLnR5cGUpfHxuPT1hKSl7bj1hLHJbc109bnVsbDticmVha31pZihudWxsPT1uKXtpZihudWxsPT09bC50eXBlKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkKTtuPXQ/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixsLnR5cGUpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobC50eXBlLGQuaXMmJntpczpkLmlzfSkscj1udWxsLGY9ITF9aWYobnVsbD09PWwudHlwZSl5IT09ZCYmbi5kYXRhIT1kJiYobi5kYXRhPWQpO2Vsc2V7aWYobnVsbCE9ciYmKHI9Yy5zbGljZS5jYWxsKG4uY2hpbGROb2RlcykpLHY9KHk9dS5wcm9wc3x8ZSkuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsaD1kLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFmKXtpZih5PT09ZSlmb3IoeT17fSxwPTA7cDxuLmF0dHJpYnV0ZXMubGVuZ3RoO3ArKyl5W24uYXR0cmlidXRlc1twXS5uYW1lXT1uLmF0dHJpYnV0ZXNbcF0udmFsdWU7KGh8fHYpJiYoaCYmdiYmaC5fX2h0bWw9PXYuX19odG1sfHwobi5pbm5lckhUTUw9aCYmaC5fX2h0bWx8fFwiXCIpKX1QKG4sZCx5LHQsZiksaD9sLl9faz1bXToobC5fX2s9bC5wcm9wcy5jaGlsZHJlbixiKG4sbCx1LGksXCJmb3JlaWduT2JqZWN0XCIhPT1sLnR5cGUmJnQscixvLGUsZikpLGZ8fChcInZhbHVlXCJpbiBkJiZ2b2lkIDAhPT0ocz1kLnZhbHVlKSYmcyE9PW4udmFsdWUmJk4obixcInZhbHVlXCIscyx5LnZhbHVlLCExKSxcImNoZWNrZWRcImluIGQmJnZvaWQgMCE9PShzPWQuY2hlY2tlZCkmJnMhPT1uLmNoZWNrZWQmJk4obixcImNoZWNrZWRcIixzLHkuY2hlY2tlZCwhMSkpfXJldHVybiBufWZ1bmN0aW9uIGoobCx1LGkpe3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBsP2wodSk6bC5jdXJyZW50PXV9Y2F0Y2gobCl7bi5fX2UobCxpKX19ZnVuY3Rpb24gRChsLHUsaSl7dmFyIHQscixvO2lmKG4udW5tb3VudCYmbi51bm1vdW50KGwpLCh0PWwucmVmKSYmKHQuY3VycmVudCYmdC5jdXJyZW50IT09bC5fX2V8fGoodCxudWxsLHUpKSxpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBsLnR5cGV8fChpPW51bGwhPShyPWwuX19lKSksbC5fX2U9bC5fX2Q9dm9pZCAwLG51bGwhPSh0PWwuX19jKSl7aWYodC5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7dC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGwpe24uX19lKGwsdSl9dC5iYXNlPXQuX19QPW51bGx9aWYodD1sLl9faylmb3Iobz0wO288dC5sZW5ndGg7bysrKXRbb10mJkQodFtvXSx1LGkpO251bGwhPXImJnYocil9ZnVuY3Rpb24gRShuLGwsdSl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3Iobix1KX1mdW5jdGlvbiBIKGwsdSxpKXt2YXIgdCxyLGY7bi5fXyYmbi5fXyhsLHUpLHI9KHQ9aT09PW8pP251bGw6aSYmaS5fX2t8fHUuX19rLGw9aChkLG51bGwsW2xdKSxmPVtdLEEodSwodD91Oml8fHUpLl9faz1sLHJ8fGUsZSx2b2lkIDAhPT11Lm93bmVyU1ZHRWxlbWVudCxpJiYhdD9baV06cj9udWxsOmMuc2xpY2UuY2FsbCh1LmNoaWxkTm9kZXMpLGYsaXx8ZSx0KSxUKGYsbCl9ZnVuY3Rpb24gSShuLGwpe0gobixsLG8pfWZ1bmN0aW9uIEwobixsKXt2YXIgdSxpO2ZvcihpIGluIGw9YShhKHt9LG4ucHJvcHMpLGwpLGFyZ3VtZW50cy5sZW5ndGg+MiYmKGwuY2hpbGRyZW49Yy5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSksdT17fSxsKVwia2V5XCIhPT1pJiZcInJlZlwiIT09aSYmKHVbaV09bFtpXSk7cmV0dXJuIHAobi50eXBlLHUsbC5rZXl8fG4ua2V5LGwucmVmfHxuLnJlZixudWxsKX1mdW5jdGlvbiBNKG4pe3ZhciBsPXt9LHU9e19fYzpcIl9fY0NcIitmKyssX186bixDb25zdW1lcjpmdW5jdGlvbihuLGwpe3JldHVybiBuLmNoaWxkcmVuKGwpfSxQcm92aWRlcjpmdW5jdGlvbihuKXt2YXIgaSx0PXRoaXM7cmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb250ZXh0fHwoaT1bXSx0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBsW3UuX19jXT10LGx9LHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4pe3QucHJvcHMudmFsdWUhPT1uLnZhbHVlJiZpLnNvbWUoZnVuY3Rpb24obCl7bC5jb250ZXh0PW4udmFsdWUsZyhsKX0pfSx0aGlzLnN1Yj1mdW5jdGlvbihuKXtpLnB1c2gobik7dmFyIGw9bi5jb21wb25lbnRXaWxsVW5tb3VudDtuLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7aS5zcGxpY2UoaS5pbmRleE9mKG4pLDEpLGwmJmwuY2FsbChuKX19KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuQ29uc3VtZXIuY29udGV4dFR5cGU9dSx1LlByb3ZpZGVyLl9fPXUsdX1uPXtfX2U6ZnVuY3Rpb24obixsKXtmb3IodmFyIHUsaTtsPWwuX187KWlmKCh1PWwuX19jKSYmIXUuX18pdHJ5e2lmKHUuY29uc3RydWN0b3ImJm51bGwhPXUuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yJiYoaT0hMCx1LnNldFN0YXRlKHUuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKG4pKSksbnVsbCE9dS5jb21wb25lbnREaWRDYXRjaCYmKGk9ITAsdS5jb21wb25lbnREaWRDYXRjaChuKSksaSlyZXR1cm4gZyh1Ll9fRT11KX1jYXRjaChsKXtuPWx9dGhyb3cgbn19LGw9ZnVuY3Rpb24obil7cmV0dXJuIG51bGwhPW4mJnZvaWQgMD09PW4uY29uc3RydWN0b3J9LG0ucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKG4sbCl7dmFyIHU7dT10aGlzLl9fcyE9PXRoaXMuc3RhdGU/dGhpcy5fX3M6dGhpcy5fX3M9YSh7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKHUsdGhpcy5wcm9wcykpLG4mJmEodSxuKSxudWxsIT1uJiZ0aGlzLl9fdiYmKGwmJnRoaXMuX19oLnB1c2gobCksZyh0aGlzKSl9LG0ucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMuX192JiYodGhpcy5fX2U9ITAsbiYmdGhpcy5fX2gucHVzaChuKSxnKHRoaXMpKX0sbS5wcm90b3R5cGUucmVuZGVyPWQsdT1bXSxpPTAsdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm9taXNlP1Byb21pc2UucHJvdG90eXBlLnRoZW4uYmluZChQcm9taXNlLnJlc29sdmUoKSk6c2V0VGltZW91dCxvPWUsZj0wO2V4cG9ydHtIIGFzIHJlbmRlcixJIGFzIGh5ZHJhdGUsaCBhcyBjcmVhdGVFbGVtZW50LGgsZCBhcyBGcmFnbWVudCx5IGFzIGNyZWF0ZVJlZixsIGFzIGlzVmFsaWRFbGVtZW50LG0gYXMgQ29tcG9uZW50LEwgYXMgY2xvbmVFbGVtZW50LE0gYXMgY3JlYXRlQ29udGV4dCx4IGFzIHRvQ2hpbGRBcnJheSxEIGFzIF91bm1vdW50LG4gYXMgb3B0aW9uc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVhY3QubW9kdWxlLmpzLm1hcFxuIiwiaW1wb3J0e29wdGlvbnMgYXMgbn1mcm9tXCJwcmVhY3RcIjt2YXIgdCx1LHIsaT0wLG89W10sYz1uLl9fcixmPW4uZGlmZmVkLGU9bi5fX2MsYT1uLnVubW91bnQ7ZnVuY3Rpb24gdih0LHIpe24uX19oJiZuLl9faCh1LHQsaXx8ciksaT0wO3ZhciBvPXUuX19IfHwodS5fX0g9e19fOltdLF9faDpbXX0pO3JldHVybiB0Pj1vLl9fLmxlbmd0aCYmby5fXy5wdXNoKHt9KSxvLl9fW3RdfWZ1bmN0aW9uIG0obil7cmV0dXJuIGk9MSxwKEUsbil9ZnVuY3Rpb24gcChuLHIsaSl7dmFyIG89dih0KyssMik7cmV0dXJuIG8uX19jfHwoby5fX2M9dSxvLl9fPVtpP2kocik6RSh2b2lkIDAsciksZnVuY3Rpb24odCl7dmFyIHU9bihvLl9fWzBdLHQpO28uX19bMF0hPT11JiYoby5fX1swXT11LG8uX19jLnNldFN0YXRlKHt9KSl9XSksby5fX31mdW5jdGlvbiBsKHIsaSl7dmFyIG89dih0KyssMyk7IW4uX19zJiZ4KG8uX19ILGkpJiYoby5fXz1yLG8uX19IPWksdS5fX0guX19oLnB1c2gobykpfWZ1bmN0aW9uIHkocixpKXt2YXIgbz12KHQrKyw0KTshbi5fX3MmJngoby5fX0gsaSkmJihvLl9fPXIsby5fX0g9aSx1Ll9faC5wdXNoKG8pKX1mdW5jdGlvbiBkKG4pe3JldHVybiBpPTUsaChmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om59fSxbXSl9ZnVuY3Rpb24gcyhuLHQsdSl7aT02LHkoZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP24odCgpKTpuJiYobi5jdXJyZW50PXQoKSl9LG51bGw9PXU/dTp1LmNvbmNhdChuKSl9ZnVuY3Rpb24gaChuLHUpe3ZhciByPXYodCsrLDcpO3JldHVybiB4KHIuX19ILHUpPyhyLl9fSD11LHIuX19oPW4sci5fXz1uKCkpOnIuX199ZnVuY3Rpb24gVChuLHQpe3JldHVybiBpPTgsaChmdW5jdGlvbigpe3JldHVybiBufSx0KX1mdW5jdGlvbiB3KG4pe3ZhciByPXUuY29udGV4dFtuLl9fY10saT12KHQrKyw5KTtyZXR1cm4gaS5fX2M9bixyPyhudWxsPT1pLl9fJiYoaS5fXz0hMCxyLnN1Yih1KSksci5wcm9wcy52YWx1ZSk6bi5fX31mdW5jdGlvbiBBKHQsdSl7bi51c2VEZWJ1Z1ZhbHVlJiZuLnVzZURlYnVnVmFsdWUodT91KHQpOnQpfWZ1bmN0aW9uIEYobil7dmFyIHI9dih0KyssMTApLGk9bSgpO3JldHVybiByLl9fPW4sdS5jb21wb25lbnREaWRDYXRjaHx8KHUuY29tcG9uZW50RGlkQ2F0Y2g9ZnVuY3Rpb24obil7ci5fXyYmci5fXyhuKSxpWzFdKG4pfSksW2lbMF0sZnVuY3Rpb24oKXtpWzFdKHZvaWQgMCl9XX1mdW5jdGlvbiBfKCl7by5zb21lKGZ1bmN0aW9uKHQpe2lmKHQuX19QKXRyeXt0Ll9fSC5fX2guZm9yRWFjaChnKSx0Ll9fSC5fX2guZm9yRWFjaChxKSx0Ll9fSC5fX2g9W119Y2F0Y2godSl7cmV0dXJuIHQuX19ILl9faD1bXSxuLl9fZSh1LHQuX192KSwhMH19KSxvPVtdfWZ1bmN0aW9uIGcobil7bi50JiZuLnQoKX1mdW5jdGlvbiBxKG4pe3ZhciB0PW4uX18oKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYobi50PXQpfWZ1bmN0aW9uIHgobix0KXtyZXR1cm4hbnx8dC5zb21lKGZ1bmN0aW9uKHQsdSl7cmV0dXJuIHQhPT1uW3VdfSl9ZnVuY3Rpb24gRShuLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dChuKTp0fW4uX19yPWZ1bmN0aW9uKG4pe2MmJmMobiksdD0wLCh1PW4uX19jKS5fX0gmJih1Ll9fSC5fX2guZm9yRWFjaChnKSx1Ll9fSC5fX2guZm9yRWFjaChxKSx1Ll9fSC5fX2g9W10pfSxuLmRpZmZlZD1mdW5jdGlvbih0KXtmJiZmKHQpO3ZhciB1PXQuX19jO2lmKHUpe3ZhciBpPXUuX19IO2kmJmkuX19oLmxlbmd0aCYmKDEhPT1vLnB1c2godSkmJnI9PT1uLnJlcXVlc3RBbmltYXRpb25GcmFtZXx8KChyPW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKXx8ZnVuY3Rpb24obil7dmFyIHQsdT1mdW5jdGlvbigpe2NsZWFyVGltZW91dChyKSxjYW5jZWxBbmltYXRpb25GcmFtZSh0KSxzZXRUaW1lb3V0KG4pfSxyPXNldFRpbWVvdXQodSwxMDApO1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih0PXJlcXVlc3RBbmltYXRpb25GcmFtZSh1KSl9KShfKSl9fSxuLl9fYz1mdW5jdGlvbih0LHUpe3Uuc29tZShmdW5jdGlvbih0KXt0cnl7dC5fX2guZm9yRWFjaChnKSx0Ll9faD10Ll9faC5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIW4uX198fHEobil9KX1jYXRjaChyKXt1LnNvbWUoZnVuY3Rpb24obil7bi5fX2gmJihuLl9faD1bXSl9KSx1PVtdLG4uX19lKHIsdC5fX3YpfX0pLGUmJmUodCx1KX0sbi51bm1vdW50PWZ1bmN0aW9uKHQpe2EmJmEodCk7dmFyIHU9dC5fX2M7aWYodSl7dmFyIHI9dS5fX0g7aWYocil0cnl7ci5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe3JldHVybiBuLnQmJm4udCgpfSl9Y2F0Y2godCl7bi5fX2UodCx1Ll9fdil9fX07ZXhwb3J0e20gYXMgdXNlU3RhdGUscCBhcyB1c2VSZWR1Y2VyLGwgYXMgdXNlRWZmZWN0LHkgYXMgdXNlTGF5b3V0RWZmZWN0LGQgYXMgdXNlUmVmLHMgYXMgdXNlSW1wZXJhdGl2ZUhhbmRsZSxoIGFzIHVzZU1lbW8sVCBhcyB1c2VDYWxsYmFjayx3IGFzIHVzZUNvbnRleHQsQSBhcyB1c2VEZWJ1Z1ZhbHVlLEYgYXMgdXNlRXJyb3JCb3VuZGFyeX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob29rcy5tb2R1bGUuanMubWFwXG4iLCJpbXBvcnR7dXNlU3RhdGUgYXMgbix1c2VSZWR1Y2VyIGFzIHQsdXNlRWZmZWN0IGFzIGUsdXNlTGF5b3V0RWZmZWN0IGFzIHIsdXNlUmVmIGFzIG8sdXNlSW1wZXJhdGl2ZUhhbmRsZSBhcyB1LHVzZU1lbW8gYXMgaSx1c2VDYWxsYmFjayBhcyBmLHVzZUNvbnRleHQgYXMgYyx1c2VEZWJ1Z1ZhbHVlIGFzIGF9ZnJvbVwicHJlYWN0L2hvb2tzXCI7ZXhwb3J0KmZyb21cInByZWFjdC9ob29rc1wiO2ltcG9ydHtDb21wb25lbnQgYXMgbCxjcmVhdGVFbGVtZW50IGFzIHMsb3B0aW9ucyBhcyB2LHRvQ2hpbGRBcnJheSBhcyBoLGh5ZHJhdGUgYXMgcCxyZW5kZXIgYXMgZCxfdW5tb3VudCBhcyBtLGNsb25lRWxlbWVudCBhcyB5LGNyZWF0ZVJlZiBhcyBiLGNyZWF0ZUNvbnRleHQgYXMgZyxGcmFnbWVudCBhcyB4fWZyb21cInByZWFjdFwiO2V4cG9ydHtjcmVhdGVFbGVtZW50LGNyZWF0ZUNvbnRleHQsY3JlYXRlUmVmLEZyYWdtZW50LENvbXBvbmVudH1mcm9tXCJwcmVhY3RcIjtmdW5jdGlvbiBFKG4sdCl7Zm9yKHZhciBlIGluIHQpbltlXT10W2VdO3JldHVybiBufWZ1bmN0aW9uIHcobix0KXtmb3IodmFyIGUgaW4gbilpZihcIl9fc291cmNlXCIhPT1lJiYhKGUgaW4gdCkpcmV0dXJuITA7Zm9yKHZhciByIGluIHQpaWYoXCJfX3NvdXJjZVwiIT09ciYmbltyXSE9PXRbcl0pcmV0dXJuITA7cmV0dXJuITF9dmFyIEM9ZnVuY3Rpb24obil7dmFyIHQsZTtmdW5jdGlvbiByKHQpe3ZhciBlO3JldHVybihlPW4uY2FsbCh0aGlzLHQpfHx0aGlzKS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMCxlfXJldHVybiBlPW4sKHQ9cikucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUpLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXQsdC5fX3Byb3RvX189ZSxyLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obix0KXtyZXR1cm4gdyh0aGlzLnByb3BzLG4pfHx3KHRoaXMuc3RhdGUsdCl9LHJ9KGwpO2Z1bmN0aW9uIF8obix0KXtmdW5jdGlvbiBlKG4pe3ZhciBlPXRoaXMucHJvcHMucmVmLHI9ZT09bi5yZWY7cmV0dXJuIXImJmUmJihlLmNhbGw/ZShudWxsKTplLmN1cnJlbnQ9bnVsbCksdD8hdCh0aGlzLnByb3BzLG4pfHwhcjp3KHRoaXMucHJvcHMsbil9ZnVuY3Rpb24gcih0KXtyZXR1cm4gdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZSxzKG4sRSh7fSx0KSl9cmV0dXJuIHIucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9ITAsci5kaXNwbGF5TmFtZT1cIk1lbW8oXCIrKG4uZGlzcGxheU5hbWV8fG4ubmFtZSkrXCIpXCIsci50PSEwLHJ9dmFyIEE9di5fX2I7ZnVuY3Rpb24gUyhuKXtmdW5jdGlvbiB0KHQpe3ZhciBlPUUoe30sdCk7cmV0dXJuIGRlbGV0ZSBlLnJlZixuKGUsdC5yZWYpfXJldHVybiB0LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXQudD0hMCx0LmRpc3BsYXlOYW1lPVwiRm9yd2FyZFJlZihcIisobi5kaXNwbGF5TmFtZXx8bi5uYW1lKStcIilcIix0fXYuX19iPWZ1bmN0aW9uKG4pe24udHlwZSYmbi50eXBlLnQmJm4ucmVmJiYobi5wcm9wcy5yZWY9bi5yZWYsbi5yZWY9bnVsbCksQSYmQShuKX07dmFyIGs9ZnVuY3Rpb24obix0KXtyZXR1cm4gbj9oKG4pLnJlZHVjZShmdW5jdGlvbihuLGUscil7cmV0dXJuIG4uY29uY2F0KHQoZSxyKSl9LFtdKTpudWxsfSxSPXttYXA6ayxmb3JFYWNoOmssY291bnQ6ZnVuY3Rpb24obil7cmV0dXJuIG4/aChuKS5sZW5ndGg6MH0sb25seTpmdW5jdGlvbihuKXtpZigxIT09KG49aChuKSkubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkNoaWxkcmVuLm9ubHkoKSBleHBlY3RzIG9ubHkgb25lIGNoaWxkLlwiKTtyZXR1cm4gblswXX0sdG9BcnJheTpofSxGPXYuX19lO2Z1bmN0aW9uIE4obil7cmV0dXJuIG4mJigobj1FKHt9LG4pKS5fX2M9bnVsbCxuLl9faz1uLl9fayYmbi5fX2subWFwKE4pKSxufWZ1bmN0aW9uIFUoKXt0aGlzLl9fdT0wLHRoaXMubz1udWxsLHRoaXMuX19iPW51bGx9ZnVuY3Rpb24gTShuKXt2YXIgdD1uLl9fLl9fYztyZXR1cm4gdCYmdC51JiZ0LnUobil9ZnVuY3Rpb24gTChuKXt2YXIgdCxlLHI7ZnVuY3Rpb24gbyhvKXtpZih0fHwodD1uKCkpLnRoZW4oZnVuY3Rpb24obil7ZT1uLmRlZmF1bHR8fG59LGZ1bmN0aW9uKG4pe3I9bn0pLHIpdGhyb3cgcjtpZighZSl0aHJvdyB0O3JldHVybiBzKGUsbyl9cmV0dXJuIG8uZGlzcGxheU5hbWU9XCJMYXp5XCIsby50PSEwLG99ZnVuY3Rpb24gTygpe3RoaXMuaT1udWxsLHRoaXMubD1udWxsfXYuX19lPWZ1bmN0aW9uKG4sdCxlKXtpZihuLnRoZW4pZm9yKHZhciByLG89dDtvPW8uX187KWlmKChyPW8uX19jKSYmci5fX2MpcmV0dXJuIHIuX19jKG4sdC5fX2MpO0Yobix0LGUpfSwoVS5wcm90b3R5cGU9bmV3IGwpLl9fYz1mdW5jdGlvbihuLHQpe3ZhciBlPXRoaXM7bnVsbD09ZS5vJiYoZS5vPVtdKSxlLm8ucHVzaCh0KTt2YXIgcj1NKGUuX192KSxvPSExLHU9ZnVuY3Rpb24oKXtvfHwobz0hMCxyP3IoaSk6aSgpKX07dC5fX2M9dC5jb21wb25lbnRXaWxsVW5tb3VudCx0LmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dSgpLHQuX19jJiZ0Ll9fYygpfTt2YXIgaT1mdW5jdGlvbigpe3ZhciBuO2lmKCEtLWUuX191KWZvcihlLl9fdi5fX2tbMF09ZS5zdGF0ZS51LGUuc2V0U3RhdGUoe3U6ZS5fX2I9bnVsbH0pO249ZS5vLnBvcCgpOyluLmZvcmNlVXBkYXRlKCl9O2UuX191Kyt8fGUuc2V0U3RhdGUoe3U6ZS5fX2I9ZS5fX3YuX19rWzBdfSksbi50aGVuKHUsdSl9LFUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihuLHQpe3JldHVybiB0aGlzLl9fYiYmKHRoaXMuX192Ll9fa1swXT1OKHRoaXMuX19iKSx0aGlzLl9fYj1udWxsKSxbcyhsLG51bGwsdC51P251bGw6bi5jaGlsZHJlbiksdC51JiZuLmZhbGxiYWNrXX07dmFyIFA9ZnVuY3Rpb24obix0LGUpe2lmKCsrZVsxXT09PWVbMF0mJm4ubC5kZWxldGUodCksbi5wcm9wcy5yZXZlYWxPcmRlciYmKFwidFwiIT09bi5wcm9wcy5yZXZlYWxPcmRlclswXXx8IW4ubC5zaXplKSlmb3IoZT1uLmk7ZTspe2Zvcig7ZS5sZW5ndGg+MzspZS5wb3AoKSgpO2lmKGVbMV08ZVswXSlicmVhaztuLmk9ZT1lWzJdfX07KE8ucHJvdG90eXBlPW5ldyBsKS51PWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXMsZT1NKHQuX192KSxyPXQubC5nZXQobik7cmV0dXJuIHJbMF0rKyxmdW5jdGlvbihvKXt2YXIgdT1mdW5jdGlvbigpe3QucHJvcHMucmV2ZWFsT3JkZXI/KHIucHVzaChvKSxQKHQsbixyKSk6bygpfTtlP2UodSk6dSgpfX0sTy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKG4pe3RoaXMuaT1udWxsLHRoaXMubD1uZXcgTWFwO3ZhciB0PWgobi5jaGlsZHJlbik7bi5yZXZlYWxPcmRlciYmXCJiXCI9PT1uLnJldmVhbE9yZGVyWzBdJiZ0LnJldmVyc2UoKTtmb3IodmFyIGU9dC5sZW5ndGg7ZS0tOyl0aGlzLmwuc2V0KHRbZV0sdGhpcy5pPVsxLDAsdGhpcy5pXSk7cmV0dXJuIG4uY2hpbGRyZW59LE8ucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZT1PLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbigpe3ZhciBuPXRoaXM7bi5sLmZvckVhY2goZnVuY3Rpb24odCxlKXtQKG4sZSx0KX0pfTt2YXIgVz1mdW5jdGlvbigpe2Z1bmN0aW9uIG4oKXt9dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIHQuZ2V0Q2hpbGRDb250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcHMuY29udGV4dH0sdC5yZW5kZXI9ZnVuY3Rpb24obil7cmV0dXJuIG4uY2hpbGRyZW59LG59KCk7ZnVuY3Rpb24gaihuKXt2YXIgdD10aGlzLGU9bi5jb250YWluZXIscj1zKFcse2NvbnRleHQ6dC5jb250ZXh0fSxuLnZub2RlKTtyZXR1cm4gdC5zJiZ0LnMhPT1lJiYodC52LnBhcmVudE5vZGUmJnQucy5yZW1vdmVDaGlsZCh0LnYpLG0odC5oKSx0LnA9ITEpLG4udm5vZGU/dC5wPyhlLl9faz10Ll9fayxkKHIsZSksdC5fX2s9ZS5fX2spOih0LnY9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIikscChcIlwiLGUpLGUuYXBwZW5kQ2hpbGQodC52KSx0LnA9ITAsdC5zPWUsZChyLGUsdC52KSx0Ll9faz10LnYuX19rKTp0LnAmJih0LnYucGFyZW50Tm9kZSYmdC5zLnJlbW92ZUNoaWxkKHQudiksbSh0LmgpKSx0Lmg9cix0LmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dC52LnBhcmVudE5vZGUmJnQucy5yZW1vdmVDaGlsZCh0LnYpLG0odC5oKX0sbnVsbH1mdW5jdGlvbiB6KG4sdCl7cmV0dXJuIHMoaix7dm5vZGU6bixjb250YWluZXI6dH0pfXZhciBEPS9eKD86YWNjZW50fGFsaWdubWVudHxhcmFiaWN8YmFzZWxpbmV8Y2FwfGNsaXAoPyFQYXRoVSl8Y29sb3J8ZmlsbHxmbG9vZHxmb250fGdseXBoKD8hUil8aG9yaXp8bWFya2VyKD8hSHxXfFUpfG92ZXJsaW5lfHBhaW50fHN0b3B8c3RyaWtldGhyb3VnaHxzdHJva2V8dGV4dCg/IUwpfHVuZGVybGluZXx1bmljb2RlfHVuaXRzfHZ8dmVjdG9yfHZlcnR8d29yZHx3cml0aW5nfHgoPyFDKSlbQS1aXS87bC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTt2YXIgSD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yJiZTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKXx8NjAxMDM7ZnVuY3Rpb24gVChuLHQsZSl7aWYobnVsbD09dC5fX2spZm9yKDt0LmZpcnN0Q2hpbGQ7KXQucmVtb3ZlQ2hpbGQodC5maXJzdENoaWxkKTtyZXR1cm4gZChuLHQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUoKSxuP24uX19jOm51bGx9ZnVuY3Rpb24gVihuLHQsZSl7cmV0dXJuIHAobix0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlKCksbj9uLl9fYzpudWxsfXZhciBaPXYuZXZlbnQ7ZnVuY3Rpb24gSShuLHQpe25bXCJVTlNBRkVfXCIrdF0mJiFuW3RdJiZPYmplY3QuZGVmaW5lUHJvcGVydHkobix0LHtjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbXCJVTlNBRkVfXCIrdF19LHNldDpmdW5jdGlvbihuKXt0aGlzW1wiVU5TQUZFX1wiK3RdPW59fSl9di5ldmVudD1mdW5jdGlvbihuKXtaJiYobj1aKG4pKSxuLnBlcnNpc3Q9ZnVuY3Rpb24oKXt9O3ZhciB0PSExLGU9ITEscj1uLnN0b3BQcm9wYWdhdGlvbjtuLnN0b3BQcm9wYWdhdGlvbj1mdW5jdGlvbigpe3IuY2FsbChuKSx0PSEwfTt2YXIgbz1uLnByZXZlbnREZWZhdWx0O3JldHVybiBuLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7by5jYWxsKG4pLGU9ITB9LG4uaXNQcm9wYWdhdGlvblN0b3BwZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdH0sbi5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sbi5uYXRpdmVFdmVudD1ufTt2YXIgJD17Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNsYXNzfX0scT12LnZub2RlO3Yudm5vZGU9ZnVuY3Rpb24obil7bi4kJHR5cGVvZj1IO3ZhciB0PW4udHlwZSxlPW4ucHJvcHM7aWYodCl7aWYoZS5jbGFzcyE9ZS5jbGFzc05hbWUmJigkLmVudW1lcmFibGU9XCJjbGFzc05hbWVcImluIGUsbnVsbCE9ZS5jbGFzc05hbWUmJihlLmNsYXNzPWUuY2xhc3NOYW1lKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImNsYXNzTmFtZVwiLCQpKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXt2YXIgcixvLHU7Zm9yKHUgaW4gZS5kZWZhdWx0VmFsdWUmJnZvaWQgMCE9PWUudmFsdWUmJihlLnZhbHVlfHwwPT09ZS52YWx1ZXx8KGUudmFsdWU9ZS5kZWZhdWx0VmFsdWUpLGRlbGV0ZSBlLmRlZmF1bHRWYWx1ZSksQXJyYXkuaXNBcnJheShlLnZhbHVlKSYmZS5tdWx0aXBsZSYmXCJzZWxlY3RcIj09PXQmJihoKGUuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24obil7LTEhPWUudmFsdWUuaW5kZXhPZihuLnByb3BzLnZhbHVlKSYmKG4ucHJvcHMuc2VsZWN0ZWQ9ITApfSksZGVsZXRlIGUudmFsdWUpLGUpaWYocj1ELnRlc3QodSkpYnJlYWs7aWYocilmb3IodSBpbiBvPW4ucHJvcHM9e30sZSlvW0QudGVzdCh1KT91LnJlcGxhY2UoL1tBLVowLTldLyxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpOnVdPWVbdV19IWZ1bmN0aW9uKHQpe3ZhciBlPW4udHlwZSxyPW4ucHJvcHM7aWYociYmXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciBvPXt9O2Zvcih2YXIgdSBpbiByKS9eb24oQW5pfFRyYXxUb3UpLy50ZXN0KHUpJiYoclt1LnRvTG93ZXJDYXNlKCldPXJbdV0sZGVsZXRlIHJbdV0pLG9bdS50b0xvd2VyQ2FzZSgpXT11O2lmKG8ub25kb3VibGVjbGljayYmKHIub25kYmxjbGljaz1yW28ub25kb3VibGVjbGlja10sZGVsZXRlIHJbby5vbmRvdWJsZWNsaWNrXSksby5vbmJlZm9yZWlucHV0JiYoci5vbmJlZm9yZWlucHV0PXJbby5vbmJlZm9yZWlucHV0XSxkZWxldGUgcltvLm9uYmVmb3JlaW5wdXRdKSxvLm9uY2hhbmdlJiYoXCJ0ZXh0YXJlYVwiPT09ZXx8XCJpbnB1dFwiPT09ZS50b0xvd2VyQ2FzZSgpJiYhL15maWx8Y2hlfHJhL2kudGVzdChyLnR5cGUpKSl7dmFyIGk9by5vbmlucHV0fHxcIm9uaW5wdXRcIjtyW2ldfHwocltpXT1yW28ub25jaGFuZ2VdLGRlbGV0ZSByW28ub25jaGFuZ2VdKX19fSgpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJiF0Lm0mJnQucHJvdG90eXBlJiYoSSh0LnByb3RvdHlwZSxcImNvbXBvbmVudFdpbGxNb3VudFwiKSxJKHQucHJvdG90eXBlLFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiKSxJKHQucHJvdG90eXBlLFwiY29tcG9uZW50V2lsbFVwZGF0ZVwiKSx0Lm09ITApfXEmJnEobil9O3ZhciBCPVwiMTYuOC4wXCI7ZnVuY3Rpb24gRyhuKXtyZXR1cm4gcy5iaW5kKG51bGwsbil9ZnVuY3Rpb24gSihuKXtyZXR1cm4hIW4mJm4uJCR0eXBlb2Y9PT1IfWZ1bmN0aW9uIEsobil7cmV0dXJuIEoobik/eS5hcHBseShudWxsLGFyZ3VtZW50cyk6bn1mdW5jdGlvbiBRKG4pe3JldHVybiEhbi5fX2smJihkKG51bGwsbiksITApfWZ1bmN0aW9uIFgobil7cmV0dXJuIG4mJihuLmJhc2V8fDE9PT1uLm5vZGVUeXBlJiZuKXx8bnVsbH12YXIgWT1mdW5jdGlvbihuLHQpe3JldHVybiBuKHQpfTtleHBvcnQgZGVmYXVsdHt1c2VTdGF0ZTpuLHVzZVJlZHVjZXI6dCx1c2VFZmZlY3Q6ZSx1c2VMYXlvdXRFZmZlY3Q6cix1c2VSZWY6byx1c2VJbXBlcmF0aXZlSGFuZGxlOnUsdXNlTWVtbzppLHVzZUNhbGxiYWNrOmYsdXNlQ29udGV4dDpjLHVzZURlYnVnVmFsdWU6YSx2ZXJzaW9uOlwiMTYuOC4wXCIsQ2hpbGRyZW46UixyZW5kZXI6VCxoeWRyYXRlOlQsdW5tb3VudENvbXBvbmVudEF0Tm9kZTpRLGNyZWF0ZVBvcnRhbDp6LGNyZWF0ZUVsZW1lbnQ6cyxjcmVhdGVDb250ZXh0OmcsY3JlYXRlRmFjdG9yeTpHLGNsb25lRWxlbWVudDpLLGNyZWF0ZVJlZjpiLEZyYWdtZW50OngsaXNWYWxpZEVsZW1lbnQ6SixmaW5kRE9NTm9kZTpYLENvbXBvbmVudDpsLFB1cmVDb21wb25lbnQ6QyxtZW1vOl8sZm9yd2FyZFJlZjpTLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlksU3VzcGVuc2U6VSxTdXNwZW5zZUxpc3Q6TyxsYXp5Okx9O2V4cG9ydHtCIGFzIHZlcnNpb24sUiBhcyBDaGlsZHJlbixUIGFzIHJlbmRlcixWIGFzIGh5ZHJhdGUsUSBhcyB1bm1vdW50Q29tcG9uZW50QXROb2RlLHogYXMgY3JlYXRlUG9ydGFsLEcgYXMgY3JlYXRlRmFjdG9yeSxLIGFzIGNsb25lRWxlbWVudCxKIGFzIGlzVmFsaWRFbGVtZW50LFggYXMgZmluZERPTU5vZGUsQyBhcyBQdXJlQ29tcG9uZW50LF8gYXMgbWVtbyxTIGFzIGZvcndhcmRSZWYsWSBhcyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyxVIGFzIFN1c3BlbnNlLE8gYXMgU3VzcGVuc2VMaXN0LEwgYXMgbGF6eX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYXQubW9kdWxlLmpzLm1hcFxuIiwiXG52YXIgY2FuUHJvbWlzZSA9IHJlcXVpcmUoJy4vY2FuLXByb21pc2UnKVxuXG52YXIgUVJDb2RlID0gcmVxdWlyZSgnLi9jb3JlL3FyY29kZScpXG52YXIgQ2FudmFzUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL2NhbnZhcycpXG52YXIgU3ZnUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL3N2Zy10YWcuanMnKVxuXG5mdW5jdGlvbiByZW5kZXJDYW52YXMgKHJlbmRlckZ1bmMsIGNhbnZhcywgdGV4dCwgb3B0cywgY2IpIHtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgdmFyIGFyZ3NOdW0gPSBhcmdzLmxlbmd0aFxuICB2YXIgaXNMYXN0QXJnQ2IgPSB0eXBlb2YgYXJnc1thcmdzTnVtIC0gMV0gPT09ICdmdW5jdGlvbidcblxuICBpZiAoIWlzTGFzdEFyZ0NiICYmICFjYW5Qcm9taXNlKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIHJlcXVpcmVkIGFzIGxhc3QgYXJndW1lbnQnKVxuICB9XG5cbiAgaWYgKGlzTGFzdEFyZ0NiKSB7XG4gICAgaWYgKGFyZ3NOdW0gPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBmZXcgYXJndW1lbnRzIHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoYXJnc051bSA9PT0gMikge1xuICAgICAgY2IgPSB0ZXh0XG4gICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICBjYW52YXMgPSBvcHRzID0gdW5kZWZpbmVkXG4gICAgfSBlbHNlIGlmIChhcmdzTnVtID09PSAzKSB7XG4gICAgICBpZiAoY2FudmFzLmdldENvbnRleHQgJiYgdHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjYiA9IG9wdHNcbiAgICAgICAgb3B0cyA9IHVuZGVmaW5lZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IgPSBvcHRzXG4gICAgICAgIG9wdHMgPSB0ZXh0XG4gICAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChhcmdzTnVtIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb28gZmV3IGFyZ3VtZW50cyBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgaWYgKGFyZ3NOdW0gPT09IDEpIHtcbiAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IG9wdHMgPSB1bmRlZmluZWRcbiAgICB9IGVsc2UgaWYgKGFyZ3NOdW0gPT09IDIgJiYgIWNhbnZhcy5nZXRDb250ZXh0KSB7XG4gICAgICBvcHRzID0gdGV4dFxuICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkYXRhID0gUVJDb2RlLmNyZWF0ZSh0ZXh0LCBvcHRzKVxuICAgICAgICByZXNvbHZlKHJlbmRlckZ1bmMoZGF0YSwgY2FudmFzLCBvcHRzKSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGRhdGEgPSBRUkNvZGUuY3JlYXRlKHRleHQsIG9wdHMpXG4gICAgY2IobnVsbCwgcmVuZGVyRnVuYyhkYXRhLCBjYW52YXMsIG9wdHMpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2IoZSlcbiAgfVxufVxuXG5leHBvcnRzLmNyZWF0ZSA9IFFSQ29kZS5jcmVhdGVcbmV4cG9ydHMudG9DYW52YXMgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBDYW52YXNSZW5kZXJlci5yZW5kZXIpXG5leHBvcnRzLnRvRGF0YVVSTCA9IHJlbmRlckNhbnZhcy5iaW5kKG51bGwsIENhbnZhc1JlbmRlcmVyLnJlbmRlclRvRGF0YVVSTClcblxuLy8gb25seSBzdmcgZm9yIG5vdy5cbmV4cG9ydHMudG9TdHJpbmcgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBmdW5jdGlvbiAoZGF0YSwgXywgb3B0cykge1xuICByZXR1cm4gU3ZnUmVuZGVyZXIucmVuZGVyKGRhdGEsIG9wdHMpXG59KVxuIiwiLy8gY2FuLXByb21pc2UgaGFzIGEgY3Jhc2ggaW4gc29tZSB2ZXJzaW9ucyBvZiByZWFjdCBuYXRpdmUgdGhhdCBkb250IGhhdmVcbi8vIHN0YW5kYXJkIGdsb2JhbCBvYmplY3RzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc29sZGFpci9ub2RlLXFyY29kZS9pc3N1ZXMvMTU3XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbicgJiYgUHJvbWlzZS5wcm90b3R5cGUgJiYgUHJvbWlzZS5wcm90b3R5cGUudGhlblxufVxuIiwiLyoqXG4gKiBBbGlnbm1lbnQgcGF0dGVybiBhcmUgZml4ZWQgcmVmZXJlbmNlIHBhdHRlcm4gaW4gZGVmaW5lZCBwb3NpdGlvbnNcbiAqIGluIGEgbWF0cml4IHN5bWJvbG9neSwgd2hpY2ggZW5hYmxlcyB0aGUgZGVjb2RlIHNvZnR3YXJlIHRvIHJlLXN5bmNocm9uaXNlXG4gKiB0aGUgY29vcmRpbmF0ZSBtYXBwaW5nIG9mIHRoZSBpbWFnZSBtb2R1bGVzIGluIHRoZSBldmVudCBvZiBtb2RlcmF0ZSBhbW91bnRzXG4gKiBvZiBkaXN0b3J0aW9uIG9mIHRoZSBpbWFnZS5cbiAqXG4gKiBBbGlnbm1lbnQgcGF0dGVybnMgYXJlIHByZXNlbnQgb25seSBpbiBRUiBDb2RlIHN5bWJvbHMgb2YgdmVyc2lvbiAyIG9yIGxhcmdlclxuICogYW5kIHRoZWlyIG51bWJlciBkZXBlbmRzIG9uIHRoZSBzeW1ib2wgdmVyc2lvbi5cbiAqL1xuXG52YXIgZ2V0U3ltYm9sU2l6ZSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5nZXRTeW1ib2xTaXplXG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSByb3cvY29sdW1uIGNvb3JkaW5hdGVzIG9mIHRoZSBjZW50ZXIgbW9kdWxlIG9mIGVhY2ggYWxpZ25tZW50IHBhdHRlcm5cbiAqIGZvciB0aGUgc3BlY2lmaWVkIFFSIENvZGUgdmVyc2lvbi5cbiAqXG4gKiBUaGUgYWxpZ25tZW50IHBhdHRlcm5zIGFyZSBwb3NpdGlvbmVkIHN5bW1ldHJpY2FsbHkgb24gZWl0aGVyIHNpZGUgb2YgdGhlIGRpYWdvbmFsXG4gKiBydW5uaW5nIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgc3ltYm9sIHRvIHRoZSBib3R0b20gcmlnaHQgY29ybmVyLlxuICpcbiAqIFNpbmNlIHBvc2l0aW9ucyBhcmUgc2ltbWV0cmljYWwgb25seSBoYWxmIG9mIHRoZSBjb29yZGluYXRlcyBhcmUgcmV0dXJuZWQuXG4gKiBFYWNoIGl0ZW0gb2YgdGhlIGFycmF5IHdpbGwgcmVwcmVzZW50IGluIHR1cm4gdGhlIHggYW5kIHkgY29vcmRpbmF0ZS5cbiAqIEBzZWUge0BsaW5rIGdldFBvc2l0aW9uc31cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2YgY29vcmRpbmF0ZVxuICovXG5leHBvcnRzLmdldFJvd0NvbENvb3JkcyA9IGZ1bmN0aW9uIGdldFJvd0NvbENvb3JkcyAodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMSkgcmV0dXJuIFtdXG5cbiAgdmFyIHBvc0NvdW50ID0gTWF0aC5mbG9vcih2ZXJzaW9uIC8gNykgKyAyXG4gIHZhciBzaXplID0gZ2V0U3ltYm9sU2l6ZSh2ZXJzaW9uKVxuICB2YXIgaW50ZXJ2YWxzID0gc2l6ZSA9PT0gMTQ1ID8gMjYgOiBNYXRoLmNlaWwoKHNpemUgLSAxMykgLyAoMiAqIHBvc0NvdW50IC0gMikpICogMlxuICB2YXIgcG9zaXRpb25zID0gW3NpemUgLSA3XSAvLyBMYXN0IGNvb3JkIGlzIGFsd2F5cyAoc2l6ZSAtIDcpXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb3NDb3VudCAtIDE7IGkrKykge1xuICAgIHBvc2l0aW9uc1tpXSA9IHBvc2l0aW9uc1tpIC0gMV0gLSBpbnRlcnZhbHNcbiAgfVxuXG4gIHBvc2l0aW9ucy5wdXNoKDYpIC8vIEZpcnN0IGNvb3JkIGlzIGFsd2F5cyA2XG5cbiAgcmV0dXJuIHBvc2l0aW9ucy5yZXZlcnNlKClcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHBvc2l0aW9ucyBvZiBlYWNoIGFsaWdubWVudCBwYXR0ZXJuLlxuICogRWFjaCBhcnJheSdzIGVsZW1lbnQgcmVwcmVzZW50IHRoZSBjZW50ZXIgcG9pbnQgb2YgdGhlIHBhdHRlcm4gYXMgKHgsIHkpIGNvb3JkaW5hdGVzXG4gKlxuICogQ29vcmRpbmF0ZXMgYXJlIGNhbGN1bGF0ZWQgZXhwYW5kaW5nIHRoZSByb3cvY29sdW1uIGNvb3JkaW5hdGVzIHJldHVybmVkIGJ5IHtAbGluayBnZXRSb3dDb2xDb29yZHN9XG4gKiBhbmQgZmlsdGVyaW5nIG91dCB0aGUgaXRlbXMgdGhhdCBvdmVybGFwcyB3aXRoIGZpbmRlciBwYXR0ZXJuXG4gKlxuICogQGV4YW1wbGVcbiAqIEZvciBhIFZlcnNpb24gNyBzeW1ib2wge0BsaW5rIGdldFJvd0NvbENvb3Jkc30gcmV0dXJucyB2YWx1ZXMgNiwgMjIgYW5kIDM4LlxuICogVGhlIGFsaWdubWVudCBwYXR0ZXJucywgdGhlcmVmb3JlLCBhcmUgdG8gYmUgY2VudGVyZWQgb24gKHJvdywgY29sdW1uKVxuICogcG9zaXRpb25zICg2LDIyKSwgKDIyLDYpLCAoMjIsMjIpLCAoMjIsMzgpLCAoMzgsMjIpLCAoMzgsMzgpLlxuICogTm90ZSB0aGF0IHRoZSBjb29yZGluYXRlcyAoNiw2KSwgKDYsMzgpLCAoMzgsNikgYXJlIG9jY3VwaWVkIGJ5IGZpbmRlciBwYXR0ZXJuc1xuICogYW5kIGFyZSBub3QgdGhlcmVmb3JlIHVzZWQgZm9yIGFsaWdubWVudCBwYXR0ZXJucy5cbiAqXG4gKiB2YXIgcG9zID0gZ2V0UG9zaXRpb25zKDcpXG4gKiAvLyBbWzYsMjJdLCBbMjIsNl0sIFsyMiwyMl0sIFsyMiwzOF0sIFszOCwyMl0sIFszOCwzOF1dXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIGNvb3JkaW5hdGVzXG4gKi9cbmV4cG9ydHMuZ2V0UG9zaXRpb25zID0gZnVuY3Rpb24gZ2V0UG9zaXRpb25zICh2ZXJzaW9uKSB7XG4gIHZhciBjb29yZHMgPSBbXVxuICB2YXIgcG9zID0gZXhwb3J0cy5nZXRSb3dDb2xDb29yZHModmVyc2lvbilcbiAgdmFyIHBvc0xlbmd0aCA9IHBvcy5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc0xlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwb3NMZW5ndGg7IGorKykge1xuICAgICAgLy8gU2tpcCBpZiBwb3NpdGlvbiBpcyBvY2N1cGllZCBieSBmaW5kZXIgcGF0dGVybnNcbiAgICAgIGlmICgoaSA9PT0gMCAmJiBqID09PSAwKSB8fCAgICAgICAgICAgICAvLyB0b3AtbGVmdFxuICAgICAgICAgIChpID09PSAwICYmIGogPT09IHBvc0xlbmd0aCAtIDEpIHx8IC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgICAgKGkgPT09IHBvc0xlbmd0aCAtIDEgJiYgaiA9PT0gMCkpIHsgLy8gdG9wLXJpZ2h0XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvb3Jkcy5wdXNoKFtwb3NbaV0sIHBvc1tqXV0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvb3Jkc1xufVxuIiwidmFyIE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG4vKipcbiAqIEFycmF5IG9mIGNoYXJhY3RlcnMgYXZhaWxhYmxlIGluIGFscGhhbnVtZXJpYyBtb2RlXG4gKlxuICogQXMgcGVyIFFSIENvZGUgc3BlY2lmaWNhdGlvbiwgdG8gZWFjaCBjaGFyYWN0ZXJcbiAqIGlzIGFzc2lnbmVkIGEgdmFsdWUgZnJvbSAwIHRvIDQ0IHdoaWNoIGluIHRoaXMgY2FzZSBjb2luY2lkZXNcbiAqIHdpdGggdGhlIGFycmF5IGluZGV4XG4gKlxuICogQHR5cGUge0FycmF5fVxuICovXG52YXIgQUxQSEFfTlVNX0NIQVJTID0gW1xuICAnMCcsICcxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsXG4gICdBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJyxcbiAgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onLFxuICAnICcsICckJywgJyUnLCAnKicsICcrJywgJy0nLCAnLicsICcvJywgJzonXG5dXG5cbmZ1bmN0aW9uIEFscGhhbnVtZXJpY0RhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5BTFBIQU5VTUVSSUNcbiAgdGhpcy5kYXRhID0gZGF0YVxufVxuXG5BbHBoYW51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIDExICogTWF0aC5mbG9vcihsZW5ndGggLyAyKSArIDYgKiAobGVuZ3RoICUgMilcbn1cblxuQWxwaGFudW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuQWxwaGFudW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKCkge1xuICByZXR1cm4gQWxwaGFudW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkFscGhhbnVtZXJpY0RhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKGJpdEJ1ZmZlcikge1xuICB2YXIgaVxuXG4gIC8vIElucHV0IGRhdGEgY2hhcmFjdGVycyBhcmUgZGl2aWRlZCBpbnRvIGdyb3VwcyBvZiB0d28gY2hhcmFjdGVyc1xuICAvLyBhbmQgZW5jb2RlZCBhcyAxMS1iaXQgYmluYXJ5IGNvZGVzLlxuICBmb3IgKGkgPSAwOyBpICsgMiA8PSB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAvLyBUaGUgY2hhcmFjdGVyIHZhbHVlIG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXMgbXVsdGlwbGllZCBieSA0NVxuICAgIHZhciB2YWx1ZSA9IEFMUEhBX05VTV9DSEFSUy5pbmRleE9mKHRoaXMuZGF0YVtpXSkgKiA0NVxuXG4gICAgLy8gVGhlIGNoYXJhY3RlciB2YWx1ZSBvZiB0aGUgc2Vjb25kIGRpZ2l0IGlzIGFkZGVkIHRvIHRoZSBwcm9kdWN0XG4gICAgdmFsdWUgKz0gQUxQSEFfTlVNX0NIQVJTLmluZGV4T2YodGhpcy5kYXRhW2kgKyAxXSlcblxuICAgIC8vIFRoZSBzdW0gaXMgdGhlbiBzdG9yZWQgYXMgMTEtYml0IGJpbmFyeSBudW1iZXJcbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMSlcbiAgfVxuXG4gIC8vIElmIHRoZSBudW1iZXIgb2YgaW5wdXQgZGF0YSBjaGFyYWN0ZXJzIGlzIG5vdCBhIG11bHRpcGxlIG9mIHR3byxcbiAgLy8gdGhlIGNoYXJhY3RlciB2YWx1ZSBvZiB0aGUgZmluYWwgY2hhcmFjdGVyIGlzIGVuY29kZWQgYXMgYSA2LWJpdCBiaW5hcnkgbnVtYmVyLlxuICBpZiAodGhpcy5kYXRhLmxlbmd0aCAlIDIpIHtcbiAgICBiaXRCdWZmZXIucHV0KEFMUEhBX05VTV9DSEFSUy5pbmRleE9mKHRoaXMuZGF0YVtpXSksIDYpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbHBoYW51bWVyaWNEYXRhXG4iLCJmdW5jdGlvbiBCaXRCdWZmZXIgKCkge1xuICB0aGlzLmJ1ZmZlciA9IFtdXG4gIHRoaXMubGVuZ3RoID0gMFxufVxuXG5CaXRCdWZmZXIucHJvdG90eXBlID0ge1xuXG4gIGdldDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgdmFyIGJ1ZkluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIDgpXG4gICAgcmV0dXJuICgodGhpcy5idWZmZXJbYnVmSW5kZXhdID4+PiAoNyAtIGluZGV4ICUgOCkpICYgMSkgPT09IDFcbiAgfSxcblxuICBwdXQ6IGZ1bmN0aW9uIChudW0sIGxlbmd0aCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucHV0Qml0KCgobnVtID4+PiAobGVuZ3RoIC0gaSAtIDEpKSAmIDEpID09PSAxKVxuICAgIH1cbiAgfSxcblxuICBnZXRMZW5ndGhJbkJpdHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGhcbiAgfSxcblxuICBwdXRCaXQ6IGZ1bmN0aW9uIChiaXQpIHtcbiAgICB2YXIgYnVmSW5kZXggPSBNYXRoLmZsb29yKHRoaXMubGVuZ3RoIC8gOClcbiAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoIDw9IGJ1ZkluZGV4KSB7XG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKDApXG4gICAgfVxuXG4gICAgaWYgKGJpdCkge1xuICAgICAgdGhpcy5idWZmZXJbYnVmSW5kZXhdIHw9ICgweDgwID4+PiAodGhpcy5sZW5ndGggJSA4KSlcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCsrXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCaXRCdWZmZXJcbiIsInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcblxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gaGFuZGxlIFFSIENvZGUgc3ltYm9sIG1vZHVsZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc2l6ZSBTeW1ib2wgc2l6ZVxuICovXG5mdW5jdGlvbiBCaXRNYXRyaXggKHNpemUpIHtcbiAgaWYgKCFzaXplIHx8IHNpemUgPCAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCaXRNYXRyaXggc2l6ZSBtdXN0IGJlIGRlZmluZWQgYW5kIGdyZWF0ZXIgdGhhbiAwJylcbiAgfVxuXG4gIHRoaXMuc2l6ZSA9IHNpemVcbiAgdGhpcy5kYXRhID0gQnVmZmVyVXRpbC5hbGxvYyhzaXplICogc2l6ZSlcbiAgdGhpcy5yZXNlcnZlZEJpdCA9IEJ1ZmZlclV0aWwuYWxsb2Moc2l6ZSAqIHNpemUpXG59XG5cbi8qKlxuICogU2V0IGJpdCB2YWx1ZSBhdCBzcGVjaWZpZWQgbG9jYXRpb25cbiAqIElmIHJlc2VydmVkIGZsYWcgaXMgc2V0LCB0aGlzIGJpdCB3aWxsIGJlIGlnbm9yZWQgZHVyaW5nIG1hc2tpbmcgcHJvY2Vzc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0ge051bWJlcn0gIGNvbFxuICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICogQHBhcmFtIHtCb29sZWFufSByZXNlcnZlZFxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChyb3csIGNvbCwgdmFsdWUsIHJlc2VydmVkKSB7XG4gIHZhciBpbmRleCA9IHJvdyAqIHRoaXMuc2l6ZSArIGNvbFxuICB0aGlzLmRhdGFbaW5kZXhdID0gdmFsdWVcbiAgaWYgKHJlc2VydmVkKSB0aGlzLnJlc2VydmVkQml0W2luZGV4XSA9IHRydWVcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGJpdCB2YWx1ZSBhdCBzcGVjaWZpZWQgbG9jYXRpb25cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICByb3dcbiAqIEBwYXJhbSAge051bWJlcn0gIGNvbFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YVtyb3cgKiB0aGlzLnNpemUgKyBjb2xdXG59XG5cbi8qKlxuICogQXBwbGllcyB4b3Igb3BlcmF0b3IgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKiAodXNlZCBkdXJpbmcgbWFza2luZyBwcm9jZXNzKVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0ge051bWJlcn0gIGNvbFxuICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIChyb3csIGNvbCwgdmFsdWUpIHtcbiAgdGhpcy5kYXRhW3JvdyAqIHRoaXMuc2l6ZSArIGNvbF0gXj0gdmFsdWVcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBiaXQgYXQgc3BlY2lmaWVkIGxvY2F0aW9uIGlzIHJlc2VydmVkXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9ICAgcm93XG4gKiBAcGFyYW0ge051bWJlcn0gICBjb2xcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUuaXNSZXNlcnZlZCA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICByZXR1cm4gdGhpcy5yZXNlcnZlZEJpdFtyb3cgKiB0aGlzLnNpemUgKyBjb2xdXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQml0TWF0cml4XG4iLCJ2YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2J1ZmZlcicpXG52YXIgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5cbmZ1bmN0aW9uIEJ5dGVEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuQllURVxuICB0aGlzLmRhdGEgPSBCdWZmZXJVdGlsLmZyb20oZGF0YSlcbn1cblxuQnl0ZURhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gbGVuZ3RoICogOFxufVxuXG5CeXRlRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuQnl0ZURhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ5dGVEYXRhLmdldEJpdHNMZW5ndGgodGhpcy5kYXRhLmxlbmd0aClcbn1cblxuQnl0ZURhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJpdEJ1ZmZlcikge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBiaXRCdWZmZXIucHV0KHRoaXMuZGF0YVtpXSwgOClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJ5dGVEYXRhXG4iLCJ2YXIgRUNMZXZlbCA9IHJlcXVpcmUoJy4vZXJyb3ItY29ycmVjdGlvbi1sZXZlbCcpXHJcblxyXG52YXIgRUNfQkxPQ0tTX1RBQkxFID0gW1xyXG4vLyBMICBNICBRICBIXHJcbiAgMSwgMSwgMSwgMSxcclxuICAxLCAxLCAxLCAxLFxyXG4gIDEsIDEsIDIsIDIsXHJcbiAgMSwgMiwgMiwgNCxcclxuICAxLCAyLCA0LCA0LFxyXG4gIDIsIDQsIDQsIDQsXHJcbiAgMiwgNCwgNiwgNSxcclxuICAyLCA0LCA2LCA2LFxyXG4gIDIsIDUsIDgsIDgsXHJcbiAgNCwgNSwgOCwgOCxcclxuICA0LCA1LCA4LCAxMSxcclxuICA0LCA4LCAxMCwgMTEsXHJcbiAgNCwgOSwgMTIsIDE2LFxyXG4gIDQsIDksIDE2LCAxNixcclxuICA2LCAxMCwgMTIsIDE4LFxyXG4gIDYsIDEwLCAxNywgMTYsXHJcbiAgNiwgMTEsIDE2LCAxOSxcclxuICA2LCAxMywgMTgsIDIxLFxyXG4gIDcsIDE0LCAyMSwgMjUsXHJcbiAgOCwgMTYsIDIwLCAyNSxcclxuICA4LCAxNywgMjMsIDI1LFxyXG4gIDksIDE3LCAyMywgMzQsXHJcbiAgOSwgMTgsIDI1LCAzMCxcclxuICAxMCwgMjAsIDI3LCAzMixcclxuICAxMiwgMjEsIDI5LCAzNSxcclxuICAxMiwgMjMsIDM0LCAzNyxcclxuICAxMiwgMjUsIDM0LCA0MCxcclxuICAxMywgMjYsIDM1LCA0MixcclxuICAxNCwgMjgsIDM4LCA0NSxcclxuICAxNSwgMjksIDQwLCA0OCxcclxuICAxNiwgMzEsIDQzLCA1MSxcclxuICAxNywgMzMsIDQ1LCA1NCxcclxuICAxOCwgMzUsIDQ4LCA1NyxcclxuICAxOSwgMzcsIDUxLCA2MCxcclxuICAxOSwgMzgsIDUzLCA2MyxcclxuICAyMCwgNDAsIDU2LCA2NixcclxuICAyMSwgNDMsIDU5LCA3MCxcclxuICAyMiwgNDUsIDYyLCA3NCxcclxuICAyNCwgNDcsIDY1LCA3NyxcclxuICAyNSwgNDksIDY4LCA4MVxyXG5dXHJcblxyXG52YXIgRUNfQ09ERVdPUkRTX1RBQkxFID0gW1xyXG4vLyBMICBNICBRICBIXHJcbiAgNywgMTAsIDEzLCAxNyxcclxuICAxMCwgMTYsIDIyLCAyOCxcclxuICAxNSwgMjYsIDM2LCA0NCxcclxuICAyMCwgMzYsIDUyLCA2NCxcclxuICAyNiwgNDgsIDcyLCA4OCxcclxuICAzNiwgNjQsIDk2LCAxMTIsXHJcbiAgNDAsIDcyLCAxMDgsIDEzMCxcclxuICA0OCwgODgsIDEzMiwgMTU2LFxyXG4gIDYwLCAxMTAsIDE2MCwgMTkyLFxyXG4gIDcyLCAxMzAsIDE5MiwgMjI0LFxyXG4gIDgwLCAxNTAsIDIyNCwgMjY0LFxyXG4gIDk2LCAxNzYsIDI2MCwgMzA4LFxyXG4gIDEwNCwgMTk4LCAyODgsIDM1MixcclxuICAxMjAsIDIxNiwgMzIwLCAzODQsXHJcbiAgMTMyLCAyNDAsIDM2MCwgNDMyLFxyXG4gIDE0NCwgMjgwLCA0MDgsIDQ4MCxcclxuICAxNjgsIDMwOCwgNDQ4LCA1MzIsXHJcbiAgMTgwLCAzMzgsIDUwNCwgNTg4LFxyXG4gIDE5NiwgMzY0LCA1NDYsIDY1MCxcclxuICAyMjQsIDQxNiwgNjAwLCA3MDAsXHJcbiAgMjI0LCA0NDIsIDY0NCwgNzUwLFxyXG4gIDI1MiwgNDc2LCA2OTAsIDgxNixcclxuICAyNzAsIDUwNCwgNzUwLCA5MDAsXHJcbiAgMzAwLCA1NjAsIDgxMCwgOTYwLFxyXG4gIDMxMiwgNTg4LCA4NzAsIDEwNTAsXHJcbiAgMzM2LCA2NDQsIDk1MiwgMTExMCxcclxuICAzNjAsIDcwMCwgMTAyMCwgMTIwMCxcclxuICAzOTAsIDcyOCwgMTA1MCwgMTI2MCxcclxuICA0MjAsIDc4NCwgMTE0MCwgMTM1MCxcclxuICA0NTAsIDgxMiwgMTIwMCwgMTQ0MCxcclxuICA0ODAsIDg2OCwgMTI5MCwgMTUzMCxcclxuICA1MTAsIDkyNCwgMTM1MCwgMTYyMCxcclxuICA1NDAsIDk4MCwgMTQ0MCwgMTcxMCxcclxuICA1NzAsIDEwMzYsIDE1MzAsIDE4MDAsXHJcbiAgNTcwLCAxMDY0LCAxNTkwLCAxODkwLFxyXG4gIDYwMCwgMTEyMCwgMTY4MCwgMTk4MCxcclxuICA2MzAsIDEyMDQsIDE3NzAsIDIxMDAsXHJcbiAgNjYwLCAxMjYwLCAxODYwLCAyMjIwLFxyXG4gIDcyMCwgMTMxNiwgMTk1MCwgMjMxMCxcclxuICA3NTAsIDEzNzIsIDIwNDAsIDI0MzBcclxuXVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGJsb2NrIHRoYXQgdGhlIFFSIENvZGUgc2hvdWxkIGNvbnRhaW5cclxuICogZm9yIHRoZSBzcGVjaWZpZWQgdmVyc2lvbiBhbmQgZXJyb3IgY29ycmVjdGlvbiBsZXZlbC5cclxuICpcclxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cclxuICogQHBhcmFtICB7TnVtYmVyfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgTnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gYmxvY2tzXHJcbiAqL1xyXG5leHBvcnRzLmdldEJsb2Nrc0NvdW50ID0gZnVuY3Rpb24gZ2V0QmxvY2tzQ291bnQgKHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsKSB7XHJcbiAgc3dpdGNoIChlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xyXG4gICAgY2FzZSBFQ0xldmVsLkw6XHJcbiAgICAgIHJldHVybiBFQ19CTE9DS1NfVEFCTEVbKHZlcnNpb24gLSAxKSAqIDQgKyAwXVxyXG4gICAgY2FzZSBFQ0xldmVsLk06XHJcbiAgICAgIHJldHVybiBFQ19CTE9DS1NfVEFCTEVbKHZlcnNpb24gLSAxKSAqIDQgKyAxXVxyXG4gICAgY2FzZSBFQ0xldmVsLlE6XHJcbiAgICAgIHJldHVybiBFQ19CTE9DS1NfVEFCTEVbKHZlcnNpb24gLSAxKSAqIDQgKyAyXVxyXG4gICAgY2FzZSBFQ0xldmVsLkg6XHJcbiAgICAgIHJldHVybiBFQ19CTE9DS1NfVEFCTEVbKHZlcnNpb24gLSAxKSAqIDQgKyAzXVxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyB0byB1c2UgZm9yIHRoZSBzcGVjaWZpZWRcclxuICogdmVyc2lvbiBhbmQgZXJyb3IgY29ycmVjdGlvbiBsZXZlbC5cclxuICpcclxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cclxuICogQHBhcmFtICB7TnVtYmVyfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgTnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzXHJcbiAqL1xyXG5leHBvcnRzLmdldFRvdGFsQ29kZXdvcmRzQ291bnQgPSBmdW5jdGlvbiBnZXRUb3RhbENvZGV3b3Jkc0NvdW50ICh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xyXG4gIHN3aXRjaCAoZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcclxuICAgIGNhc2UgRUNMZXZlbC5MOlxyXG4gICAgICByZXR1cm4gRUNfQ09ERVdPUkRTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMF1cclxuICAgIGNhc2UgRUNMZXZlbC5NOlxyXG4gICAgICByZXR1cm4gRUNfQ09ERVdPUkRTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMV1cclxuICAgIGNhc2UgRUNMZXZlbC5ROlxyXG4gICAgICByZXR1cm4gRUNfQ09ERVdPUkRTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMl1cclxuICAgIGNhc2UgRUNMZXZlbC5IOlxyXG4gICAgICByZXR1cm4gRUNfQ09ERVdPUkRTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgM11cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWRcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0cy5MID0geyBiaXQ6IDEgfVxuZXhwb3J0cy5NID0geyBiaXQ6IDAgfVxuZXhwb3J0cy5RID0geyBiaXQ6IDMgfVxuZXhwb3J0cy5IID0geyBiaXQ6IDIgfVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQYXJhbSBpcyBub3QgYSBzdHJpbmcnKVxuICB9XG5cbiAgdmFyIGxjU3RyID0gc3RyaW5nLnRvTG93ZXJDYXNlKClcblxuICBzd2l0Y2ggKGxjU3RyKSB7XG4gICAgY2FzZSAnbCc6XG4gICAgY2FzZSAnbG93JzpcbiAgICAgIHJldHVybiBleHBvcnRzLkxcblxuICAgIGNhc2UgJ20nOlxuICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5NXG5cbiAgICBjYXNlICdxJzpcbiAgICBjYXNlICdxdWFydGlsZSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5RXG5cbiAgICBjYXNlICdoJzpcbiAgICBjYXNlICdoaWdoJzpcbiAgICAgIHJldHVybiBleHBvcnRzLkhcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gRUMgTGV2ZWw6ICcgKyBzdHJpbmcpXG4gIH1cbn1cblxuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAobGV2ZWwpIHtcbiAgcmV0dXJuIGxldmVsICYmIHR5cGVvZiBsZXZlbC5iaXQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgbGV2ZWwuYml0ID49IDAgJiYgbGV2ZWwuYml0IDwgNFxufVxuXG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChleHBvcnRzLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICB9XG59XG4iLCJ2YXIgZ2V0U3ltYm9sU2l6ZSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5nZXRTeW1ib2xTaXplXG52YXIgRklOREVSX1BBVFRFUk5fU0laRSA9IDdcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHBvc2l0aW9ucyBvZiBlYWNoIGZpbmRlciBwYXR0ZXJuLlxuICogRWFjaCBhcnJheSdzIGVsZW1lbnQgcmVwcmVzZW50IHRoZSB0b3AtbGVmdCBwb2ludCBvZiB0aGUgcGF0dGVybiBhcyAoeCwgeSkgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2YgY29vcmRpbmF0ZXNcbiAqL1xuZXhwb3J0cy5nZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiBnZXRQb3NpdGlvbnMgKHZlcnNpb24pIHtcbiAgdmFyIHNpemUgPSBnZXRTeW1ib2xTaXplKHZlcnNpb24pXG5cbiAgcmV0dXJuIFtcbiAgICAvLyB0b3AtbGVmdFxuICAgIFswLCAwXSxcbiAgICAvLyB0b3AtcmlnaHRcbiAgICBbc2l6ZSAtIEZJTkRFUl9QQVRURVJOX1NJWkUsIDBdLFxuICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgWzAsIHNpemUgLSBGSU5ERVJfUEFUVEVSTl9TSVpFXVxuICBdXG59XG4iLCJ2YXIgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxudmFyIEcxNSA9ICgxIDw8IDEwKSB8ICgxIDw8IDgpIHwgKDEgPDwgNSkgfCAoMSA8PCA0KSB8ICgxIDw8IDIpIHwgKDEgPDwgMSkgfCAoMSA8PCAwKVxudmFyIEcxNV9NQVNLID0gKDEgPDwgMTQpIHwgKDEgPDwgMTIpIHwgKDEgPDwgMTApIHwgKDEgPDwgNCkgfCAoMSA8PCAxKVxudmFyIEcxNV9CQ0ggPSBVdGlscy5nZXRCQ0hEaWdpdChHMTUpXG5cbi8qKlxuICogUmV0dXJucyBmb3JtYXQgaW5mb3JtYXRpb24gd2l0aCByZWxhdGl2ZSBlcnJvciBjb3JyZWN0aW9uIGJpdHNcbiAqXG4gKiBUaGUgZm9ybWF0IGluZm9ybWF0aW9uIGlzIGEgMTUtYml0IHNlcXVlbmNlIGNvbnRhaW5pbmcgNSBkYXRhIGJpdHMsXG4gKiB3aXRoIDEwIGVycm9yIGNvcnJlY3Rpb24gYml0cyBjYWxjdWxhdGVkIHVzaW5nIHRoZSAoMTUsIDUpIEJDSCBjb2RlLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtICB7TnVtYmVyfSBtYXNrICAgICAgICAgICAgICAgICBNYXNrIHBhdHRlcm5cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgRW5jb2RlZCBmb3JtYXQgaW5mb3JtYXRpb24gYml0c1xuICovXG5leHBvcnRzLmdldEVuY29kZWRCaXRzID0gZnVuY3Rpb24gZ2V0RW5jb2RlZEJpdHMgKGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrKSB7XG4gIHZhciBkYXRhID0gKChlcnJvckNvcnJlY3Rpb25MZXZlbC5iaXQgPDwgMykgfCBtYXNrKVxuICB2YXIgZCA9IGRhdGEgPDwgMTBcblxuICB3aGlsZSAoVXRpbHMuZ2V0QkNIRGlnaXQoZCkgLSBHMTVfQkNIID49IDApIHtcbiAgICBkIF49IChHMTUgPDwgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE1X0JDSCkpXG4gIH1cblxuICAvLyB4b3IgZmluYWwgZGF0YSB3aXRoIG1hc2sgcGF0dGVybiBpbiBvcmRlciB0byBlbnN1cmUgdGhhdFxuICAvLyBubyBjb21iaW5hdGlvbiBvZiBFcnJvciBDb3JyZWN0aW9uIExldmVsIGFuZCBkYXRhIG1hc2sgcGF0dGVyblxuICAvLyB3aWxsIHJlc3VsdCBpbiBhbiBhbGwtemVybyBkYXRhIHN0cmluZ1xuICByZXR1cm4gKChkYXRhIDw8IDEwKSB8IGQpIF4gRzE1X01BU0tcbn1cbiIsInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcblxudmFyIEVYUF9UQUJMRSA9IEJ1ZmZlclV0aWwuYWxsb2MoNTEyKVxudmFyIExPR19UQUJMRSA9IEJ1ZmZlclV0aWwuYWxsb2MoMjU2KVxuLyoqXG4gKiBQcmVjb21wdXRlIHRoZSBsb2cgYW5kIGFudGktbG9nIHRhYmxlcyBmb3IgZmFzdGVyIGNvbXB1dGF0aW9uIGxhdGVyXG4gKlxuICogRm9yIGVhY2ggcG9zc2libGUgdmFsdWUgaW4gdGhlIGdhbG9pcyBmaWVsZCAyXjgsIHdlIHdpbGwgcHJlLWNvbXB1dGVcbiAqIHRoZSBsb2dhcml0aG0gYW5kIGFudGktbG9nYXJpdGhtIChleHBvbmVudGlhbCkgb2YgdGhpcyB2YWx1ZVxuICpcbiAqIHJlZiB7QGxpbmsgaHR0cHM6Ly9lbi53aWtpdmVyc2l0eS5vcmcvd2lraS9SZWVkJUUyJTgwJTkzU29sb21vbl9jb2Rlc19mb3JfY29kZXJzI0ludHJvZHVjdGlvbl90b19tYXRoZW1hdGljYWxfZmllbGRzfVxuICovXG47KGZ1bmN0aW9uIGluaXRUYWJsZXMgKCkge1xuICB2YXIgeCA9IDFcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTU7IGkrKykge1xuICAgIEVYUF9UQUJMRVtpXSA9IHhcbiAgICBMT0dfVEFCTEVbeF0gPSBpXG5cbiAgICB4IDw8PSAxIC8vIG11bHRpcGx5IGJ5IDJcblxuICAgIC8vIFRoZSBRUiBjb2RlIHNwZWNpZmljYXRpb24gc2F5cyB0byB1c2UgYnl0ZS13aXNlIG1vZHVsbyAxMDAwMTExMDEgYXJpdGhtZXRpYy5cbiAgICAvLyBUaGlzIG1lYW5zIHRoYXQgd2hlbiBhIG51bWJlciBpcyAyNTYgb3IgbGFyZ2VyLCBpdCBzaG91bGQgYmUgWE9SZWQgd2l0aCAweDExRC5cbiAgICBpZiAoeCAmIDB4MTAwKSB7IC8vIHNpbWlsYXIgdG8geCA+PSAyNTYsIGJ1dCBhIGxvdCBmYXN0ZXIgKGJlY2F1c2UgMHgxMDAgPT0gMjU2KVxuICAgICAgeCBePSAweDExRFxuICAgIH1cbiAgfVxuXG4gIC8vIE9wdGltaXphdGlvbjogZG91YmxlIHRoZSBzaXplIG9mIHRoZSBhbnRpLWxvZyB0YWJsZSBzbyB0aGF0IHdlIGRvbid0IG5lZWQgdG8gbW9kIDI1NSB0b1xuICAvLyBzdGF5IGluc2lkZSB0aGUgYm91bmRzIChiZWNhdXNlIHdlIHdpbGwgbWFpbmx5IHVzZSB0aGlzIHRhYmxlIGZvciB0aGUgbXVsdGlwbGljYXRpb24gb2ZcbiAgLy8gdHdvIEdGIG51bWJlcnMsIG5vIG1vcmUpLlxuICAvLyBAc2VlIHtAbGluayBtdWx9XG4gIGZvciAoaSA9IDI1NTsgaSA8IDUxMjsgaSsrKSB7XG4gICAgRVhQX1RBQkxFW2ldID0gRVhQX1RBQkxFW2kgLSAyNTVdXG4gIH1cbn0oKSlcblxuLyoqXG4gKiBSZXR1cm5zIGxvZyB2YWx1ZSBvZiBuIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG5cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbiBsb2cgKG4pIHtcbiAgaWYgKG4gPCAxKSB0aHJvdyBuZXcgRXJyb3IoJ2xvZygnICsgbiArICcpJylcbiAgcmV0dXJuIExPR19UQUJMRVtuXVxufVxuXG4vKipcbiAqIFJldHVybnMgYW50aS1sb2cgdmFsdWUgb2YgbiBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMuZXhwID0gZnVuY3Rpb24gZXhwIChuKSB7XG4gIHJldHVybiBFWFBfVEFCTEVbbl1cbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBudW1iZXIgaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0geFxuICogQHBhcmFtICB7TnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMubXVsID0gZnVuY3Rpb24gbXVsICh4LCB5KSB7XG4gIGlmICh4ID09PSAwIHx8IHkgPT09IDApIHJldHVybiAwXG5cbiAgLy8gc2hvdWxkIGJlIEVYUF9UQUJMRVsoTE9HX1RBQkxFW3hdICsgTE9HX1RBQkxFW3ldKSAlIDI1NV0gaWYgRVhQX1RBQkxFIHdhc24ndCBvdmVyc2l6ZWRcbiAgLy8gQHNlZSB7QGxpbmsgaW5pdFRhYmxlc31cbiAgcmV0dXJuIEVYUF9UQUJMRVtMT0dfVEFCTEVbeF0gKyBMT0dfVEFCTEVbeV1dXG59XG4iLCJ2YXIgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG52YXIgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZnVuY3Rpb24gS2FuamlEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuS0FOSklcbiAgdGhpcy5kYXRhID0gZGF0YVxufVxuXG5LYW5qaURhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gbGVuZ3RoICogMTNcbn1cblxuS2FuamlEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5LYW5qaURhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIEthbmppRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkthbmppRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYml0QnVmZmVyKSB7XG4gIHZhciBpXG5cbiAgLy8gSW4gdGhlIFNoaWZ0IEpJUyBzeXN0ZW0sIEthbmppIGNoYXJhY3RlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IGEgdHdvIGJ5dGUgY29tYmluYXRpb24uXG4gIC8vIFRoZXNlIGJ5dGUgdmFsdWVzIGFyZSBzaGlmdGVkIGZyb20gdGhlIEpJUyBYIDAyMDggdmFsdWVzLlxuICAvLyBKSVMgWCAwMjA4IGdpdmVzIGRldGFpbHMgb2YgdGhlIHNoaWZ0IGNvZGVkIHJlcHJlc2VudGF0aW9uLlxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbHVlID0gVXRpbHMudG9TSklTKHRoaXMuZGF0YVtpXSlcblxuICAgIC8vIEZvciBjaGFyYWN0ZXJzIHdpdGggU2hpZnQgSklTIHZhbHVlcyBmcm9tIDB4ODE0MCB0byAweDlGRkM6XG4gICAgaWYgKHZhbHVlID49IDB4ODE0MCAmJiB2YWx1ZSA8PSAweDlGRkMpIHtcbiAgICAgIC8vIFN1YnRyYWN0IDB4ODE0MCBmcm9tIFNoaWZ0IEpJUyB2YWx1ZVxuICAgICAgdmFsdWUgLT0gMHg4MTQwXG5cbiAgICAvLyBGb3IgY2hhcmFjdGVycyB3aXRoIFNoaWZ0IEpJUyB2YWx1ZXMgZnJvbSAweEUwNDAgdG8gMHhFQkJGXG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAweEUwNDAgJiYgdmFsdWUgPD0gMHhFQkJGKSB7XG4gICAgICAvLyBTdWJ0cmFjdCAweEMxNDAgZnJvbSBTaGlmdCBKSVMgdmFsdWVcbiAgICAgIHZhbHVlIC09IDB4QzE0MFxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIFNKSVMgY2hhcmFjdGVyOiAnICsgdGhpcy5kYXRhW2ldICsgJ1xcbicgK1xuICAgICAgICAnTWFrZSBzdXJlIHlvdXIgY2hhcnNldCBpcyBVVEYtOCcpXG4gICAgfVxuXG4gICAgLy8gTXVsdGlwbHkgbW9zdCBzaWduaWZpY2FudCBieXRlIG9mIHJlc3VsdCBieSAweEMwXG4gICAgLy8gYW5kIGFkZCBsZWFzdCBzaWduaWZpY2FudCBieXRlIHRvIHByb2R1Y3RcbiAgICB2YWx1ZSA9ICgoKHZhbHVlID4+PiA4KSAmIDB4ZmYpICogMHhDMCkgKyAodmFsdWUgJiAweGZmKVxuXG4gICAgLy8gQ29udmVydCByZXN1bHQgdG8gYSAxMy1iaXQgYmluYXJ5IHN0cmluZ1xuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIDEzKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gS2FuamlEYXRhXG4iLCIvKipcbiAqIERhdGEgbWFzayBwYXR0ZXJuIHJlZmVyZW5jZVxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5QYXR0ZXJucyA9IHtcbiAgUEFUVEVSTjAwMDogMCxcbiAgUEFUVEVSTjAwMTogMSxcbiAgUEFUVEVSTjAxMDogMixcbiAgUEFUVEVSTjAxMTogMyxcbiAgUEFUVEVSTjEwMDogNCxcbiAgUEFUVEVSTjEwMTogNSxcbiAgUEFUVEVSTjExMDogNixcbiAgUEFUVEVSTjExMTogN1xufVxuXG4vKipcbiAqIFdlaWdodGVkIHBlbmFsdHkgc2NvcmVzIGZvciB0aGUgdW5kZXNpcmFibGUgZmVhdHVyZXNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBQZW5hbHR5U2NvcmVzID0ge1xuICBOMTogMyxcbiAgTjI6IDMsXG4gIE4zOiA0MCxcbiAgTjQ6IDEwXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgbWFzayBwYXR0ZXJuIHZhbHVlIGlzIHZhbGlkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgbWFzayAgICBNYXNrIHBhdHRlcm5cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgdHJ1ZSBpZiB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKG1hc2spIHtcbiAgcmV0dXJuIG1hc2sgIT0gbnVsbCAmJiBtYXNrICE9PSAnJyAmJiAhaXNOYU4obWFzaykgJiYgbWFzayA+PSAwICYmIG1hc2sgPD0gN1xufVxuXG4vKipcbiAqIFJldHVybnMgbWFzayBwYXR0ZXJuIGZyb20gYSB2YWx1ZS5cbiAqIElmIHZhbHVlIGlzIG5vdCB2YWxpZCwgcmV0dXJucyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ8U3RyaW5nfSB2YWx1ZSAgICAgICAgTWFzayBwYXR0ZXJuIHZhbHVlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgVmFsaWQgbWFzayBwYXR0ZXJuIG9yIHVuZGVmaW5lZFxuICovXG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2YWx1ZSkge1xuICByZXR1cm4gZXhwb3J0cy5pc1ZhbGlkKHZhbHVlKSA/IHBhcnNlSW50KHZhbHVlLCAxMCkgOiB1bmRlZmluZWRcbn1cblxuLyoqXG4qIEZpbmQgYWRqYWNlbnQgbW9kdWxlcyBpbiByb3cvY29sdW1uIHdpdGggdGhlIHNhbWUgY29sb3JcbiogYW5kIGFzc2lnbiBhIHBlbmFsdHkgdmFsdWUuXG4qXG4qIFBvaW50czogTjEgKyBpXG4qIGkgaXMgdGhlIGFtb3VudCBieSB3aGljaCB0aGUgbnVtYmVyIG9mIGFkamFjZW50IG1vZHVsZXMgb2YgdGhlIHNhbWUgY29sb3IgZXhjZWVkcyA1XG4qL1xuZXhwb3J0cy5nZXRQZW5hbHR5TjEgPSBmdW5jdGlvbiBnZXRQZW5hbHR5TjEgKGRhdGEpIHtcbiAgdmFyIHNpemUgPSBkYXRhLnNpemVcbiAgdmFyIHBvaW50cyA9IDBcbiAgdmFyIHNhbWVDb3VudENvbCA9IDBcbiAgdmFyIHNhbWVDb3VudFJvdyA9IDBcbiAgdmFyIGxhc3RDb2wgPSBudWxsXG4gIHZhciBsYXN0Um93ID0gbnVsbFxuXG4gIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHNpemU7IHJvdysrKSB7XG4gICAgc2FtZUNvdW50Q29sID0gc2FtZUNvdW50Um93ID0gMFxuICAgIGxhc3RDb2wgPSBsYXN0Um93ID0gbnVsbFxuXG4gICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgc2l6ZTsgY29sKyspIHtcbiAgICAgIHZhciBtb2R1bGUgPSBkYXRhLmdldChyb3csIGNvbClcbiAgICAgIGlmIChtb2R1bGUgPT09IGxhc3RDb2wpIHtcbiAgICAgICAgc2FtZUNvdW50Q29sKytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzYW1lQ291bnRDb2wgPj0gNSkgcG9pbnRzICs9IFBlbmFsdHlTY29yZXMuTjEgKyAoc2FtZUNvdW50Q29sIC0gNSlcbiAgICAgICAgbGFzdENvbCA9IG1vZHVsZVxuICAgICAgICBzYW1lQ291bnRDb2wgPSAxXG4gICAgICB9XG5cbiAgICAgIG1vZHVsZSA9IGRhdGEuZ2V0KGNvbCwgcm93KVxuICAgICAgaWYgKG1vZHVsZSA9PT0gbGFzdFJvdykge1xuICAgICAgICBzYW1lQ291bnRSb3crK1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNhbWVDb3VudFJvdyA+PSA1KSBwb2ludHMgKz0gUGVuYWx0eVNjb3Jlcy5OMSArIChzYW1lQ291bnRSb3cgLSA1KVxuICAgICAgICBsYXN0Um93ID0gbW9kdWxlXG4gICAgICAgIHNhbWVDb3VudFJvdyA9IDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2FtZUNvdW50Q29sID49IDUpIHBvaW50cyArPSBQZW5hbHR5U2NvcmVzLk4xICsgKHNhbWVDb3VudENvbCAtIDUpXG4gICAgaWYgKHNhbWVDb3VudFJvdyA+PSA1KSBwb2ludHMgKz0gUGVuYWx0eVNjb3Jlcy5OMSArIChzYW1lQ291bnRSb3cgLSA1KVxuICB9XG5cbiAgcmV0dXJuIHBvaW50c1xufVxuXG4vKipcbiAqIEZpbmQgMngyIGJsb2NrcyB3aXRoIHRoZSBzYW1lIGNvbG9yIGFuZCBhc3NpZ24gYSBwZW5hbHR5IHZhbHVlXG4gKlxuICogUG9pbnRzOiBOMiAqIChtIC0gMSkgKiAobiAtIDEpXG4gKi9cbmV4cG9ydHMuZ2V0UGVuYWx0eU4yID0gZnVuY3Rpb24gZ2V0UGVuYWx0eU4yIChkYXRhKSB7XG4gIHZhciBzaXplID0gZGF0YS5zaXplXG4gIHZhciBwb2ludHMgPSAwXG5cbiAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgc2l6ZSAtIDE7IHJvdysrKSB7XG4gICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgc2l6ZSAtIDE7IGNvbCsrKSB7XG4gICAgICB2YXIgbGFzdCA9IGRhdGEuZ2V0KHJvdywgY29sKSArXG4gICAgICAgIGRhdGEuZ2V0KHJvdywgY29sICsgMSkgK1xuICAgICAgICBkYXRhLmdldChyb3cgKyAxLCBjb2wpICtcbiAgICAgICAgZGF0YS5nZXQocm93ICsgMSwgY29sICsgMSlcblxuICAgICAgaWYgKGxhc3QgPT09IDQgfHwgbGFzdCA9PT0gMCkgcG9pbnRzKytcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9pbnRzICogUGVuYWx0eVNjb3Jlcy5OMlxufVxuXG4vKipcbiAqIEZpbmQgMToxOjM6MToxIHJhdGlvIChkYXJrOmxpZ2h0OmRhcms6bGlnaHQ6ZGFyaykgcGF0dGVybiBpbiByb3cvY29sdW1uLFxuICogcHJlY2VkZWQgb3IgZm9sbG93ZWQgYnkgbGlnaHQgYXJlYSA0IG1vZHVsZXMgd2lkZVxuICpcbiAqIFBvaW50czogTjMgKiBudW1iZXIgb2YgcGF0dGVybiBmb3VuZFxuICovXG5leHBvcnRzLmdldFBlbmFsdHlOMyA9IGZ1bmN0aW9uIGdldFBlbmFsdHlOMyAoZGF0YSkge1xuICB2YXIgc2l6ZSA9IGRhdGEuc2l6ZVxuICB2YXIgcG9pbnRzID0gMFxuICB2YXIgYml0c0NvbCA9IDBcbiAgdmFyIGJpdHNSb3cgPSAwXG5cbiAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgc2l6ZTsgcm93KyspIHtcbiAgICBiaXRzQ29sID0gYml0c1JvdyA9IDBcbiAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBzaXplOyBjb2wrKykge1xuICAgICAgYml0c0NvbCA9ICgoYml0c0NvbCA8PCAxKSAmIDB4N0ZGKSB8IGRhdGEuZ2V0KHJvdywgY29sKVxuICAgICAgaWYgKGNvbCA+PSAxMCAmJiAoYml0c0NvbCA9PT0gMHg1RDAgfHwgYml0c0NvbCA9PT0gMHgwNUQpKSBwb2ludHMrK1xuXG4gICAgICBiaXRzUm93ID0gKChiaXRzUm93IDw8IDEpICYgMHg3RkYpIHwgZGF0YS5nZXQoY29sLCByb3cpXG4gICAgICBpZiAoY29sID49IDEwICYmIChiaXRzUm93ID09PSAweDVEMCB8fCBiaXRzUm93ID09PSAweDA1RCkpIHBvaW50cysrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBvaW50cyAqIFBlbmFsdHlTY29yZXMuTjNcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgcHJvcG9ydGlvbiBvZiBkYXJrIG1vZHVsZXMgaW4gZW50aXJlIHN5bWJvbFxuICpcbiAqIFBvaW50czogTjQgKiBrXG4gKlxuICogayBpcyB0aGUgcmF0aW5nIG9mIHRoZSBkZXZpYXRpb24gb2YgdGhlIHByb3BvcnRpb24gb2YgZGFyayBtb2R1bGVzXG4gKiBpbiB0aGUgc3ltYm9sIGZyb20gNTAlIGluIHN0ZXBzIG9mIDUlXG4gKi9cbmV4cG9ydHMuZ2V0UGVuYWx0eU40ID0gZnVuY3Rpb24gZ2V0UGVuYWx0eU40IChkYXRhKSB7XG4gIHZhciBkYXJrQ291bnQgPSAwXG4gIHZhciBtb2R1bGVzQ291bnQgPSBkYXRhLmRhdGEubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzQ291bnQ7IGkrKykgZGFya0NvdW50ICs9IGRhdGEuZGF0YVtpXVxuXG4gIHZhciBrID0gTWF0aC5hYnMoTWF0aC5jZWlsKChkYXJrQ291bnQgKiAxMDAgLyBtb2R1bGVzQ291bnQpIC8gNSkgLSAxMClcblxuICByZXR1cm4gayAqIFBlbmFsdHlTY29yZXMuTjRcbn1cblxuLyoqXG4gKiBSZXR1cm4gbWFzayB2YWx1ZSBhdCBnaXZlbiBwb3NpdGlvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gbWFza1BhdHRlcm4gUGF0dGVybiByZWZlcmVuY2UgdmFsdWVcbiAqIEBwYXJhbSAge051bWJlcn0gaSAgICAgICAgICAgUm93XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGogICAgICAgICAgIENvbHVtblxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICAgICBNYXNrIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGdldE1hc2tBdCAobWFza1BhdHRlcm4sIGksIGopIHtcbiAgc3dpdGNoIChtYXNrUGF0dGVybikge1xuICAgIGNhc2UgZXhwb3J0cy5QYXR0ZXJucy5QQVRURVJOMDAwOiByZXR1cm4gKGkgKyBqKSAlIDIgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjAwMTogcmV0dXJuIGkgJSAyID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4wMTA6IHJldHVybiBqICUgMyA9PT0gMFxuICAgIGNhc2UgZXhwb3J0cy5QYXR0ZXJucy5QQVRURVJOMDExOiByZXR1cm4gKGkgKyBqKSAlIDMgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjEwMDogcmV0dXJuIChNYXRoLmZsb29yKGkgLyAyKSArIE1hdGguZmxvb3IoaiAvIDMpKSAlIDIgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjEwMTogcmV0dXJuIChpICogaikgJSAyICsgKGkgKiBqKSAlIDMgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjExMDogcmV0dXJuICgoaSAqIGopICUgMiArIChpICogaikgJSAzKSAlIDIgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjExMTogcmV0dXJuICgoaSAqIGopICUgMyArIChpICsgaikgJSAyKSAlIDIgPT09IDBcblxuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignYmFkIG1hc2tQYXR0ZXJuOicgKyBtYXNrUGF0dGVybilcbiAgfVxufVxuXG4vKipcbiAqIEFwcGx5IGEgbWFzayBwYXR0ZXJuIHRvIGEgQml0TWF0cml4XG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgICBwYXR0ZXJuIFBhdHRlcm4gcmVmZXJlbmNlIG51bWJlclxuICogQHBhcmFtICB7Qml0TWF0cml4fSBkYXRhICAgIEJpdE1hdHJpeCBkYXRhXG4gKi9cbmV4cG9ydHMuYXBwbHlNYXNrID0gZnVuY3Rpb24gYXBwbHlNYXNrIChwYXR0ZXJuLCBkYXRhKSB7XG4gIHZhciBzaXplID0gZGF0YS5zaXplXG5cbiAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgc2l6ZTsgY29sKyspIHtcbiAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBzaXplOyByb3crKykge1xuICAgICAgaWYgKGRhdGEuaXNSZXNlcnZlZChyb3csIGNvbCkpIGNvbnRpbnVlXG4gICAgICBkYXRhLnhvcihyb3csIGNvbCwgZ2V0TWFza0F0KHBhdHRlcm4sIHJvdywgY29sKSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiZXN0IG1hc2sgcGF0dGVybiBmb3IgZGF0YVxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gZGF0YVxuICogQHJldHVybiB7TnVtYmVyfSBNYXNrIHBhdHRlcm4gcmVmZXJlbmNlIG51bWJlclxuICovXG5leHBvcnRzLmdldEJlc3RNYXNrID0gZnVuY3Rpb24gZ2V0QmVzdE1hc2sgKGRhdGEsIHNldHVwRm9ybWF0RnVuYykge1xuICB2YXIgbnVtUGF0dGVybnMgPSBPYmplY3Qua2V5cyhleHBvcnRzLlBhdHRlcm5zKS5sZW5ndGhcbiAgdmFyIGJlc3RQYXR0ZXJuID0gMFxuICB2YXIgbG93ZXJQZW5hbHR5ID0gSW5maW5pdHlcblxuICBmb3IgKHZhciBwID0gMDsgcCA8IG51bVBhdHRlcm5zOyBwKyspIHtcbiAgICBzZXR1cEZvcm1hdEZ1bmMocClcbiAgICBleHBvcnRzLmFwcGx5TWFzayhwLCBkYXRhKVxuXG4gICAgLy8gQ2FsY3VsYXRlIHBlbmFsdHlcbiAgICB2YXIgcGVuYWx0eSA9XG4gICAgICBleHBvcnRzLmdldFBlbmFsdHlOMShkYXRhKSArXG4gICAgICBleHBvcnRzLmdldFBlbmFsdHlOMihkYXRhKSArXG4gICAgICBleHBvcnRzLmdldFBlbmFsdHlOMyhkYXRhKSArXG4gICAgICBleHBvcnRzLmdldFBlbmFsdHlONChkYXRhKVxuXG4gICAgLy8gVW5kbyBwcmV2aW91c2x5IGFwcGxpZWQgbWFza1xuICAgIGV4cG9ydHMuYXBwbHlNYXNrKHAsIGRhdGEpXG5cbiAgICBpZiAocGVuYWx0eSA8IGxvd2VyUGVuYWx0eSkge1xuICAgICAgbG93ZXJQZW5hbHR5ID0gcGVuYWx0eVxuICAgICAgYmVzdFBhdHRlcm4gPSBwXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJlc3RQYXR0ZXJuXG59XG4iLCJ2YXIgVmVyc2lvbkNoZWNrID0gcmVxdWlyZSgnLi92ZXJzaW9uLWNoZWNrJylcbnZhciBSZWdleCA9IHJlcXVpcmUoJy4vcmVnZXgnKVxuXG4vKipcbiAqIE51bWVyaWMgbW9kZSBlbmNvZGVzIGRhdGEgZnJvbSB0aGUgZGVjaW1hbCBkaWdpdCBzZXQgKDAgLSA5KVxuICogKGJ5dGUgdmFsdWVzIDMwSEVYIHRvIDM5SEVYKS5cbiAqIE5vcm1hbGx5LCAzIGRhdGEgY2hhcmFjdGVycyBhcmUgcmVwcmVzZW50ZWQgYnkgMTAgYml0cy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLk5VTUVSSUMgPSB7XG4gIGlkOiAnTnVtZXJpYycsXG4gIGJpdDogMSA8PCAwLFxuICBjY0JpdHM6IFsxMCwgMTIsIDE0XVxufVxuXG4vKipcbiAqIEFscGhhbnVtZXJpYyBtb2RlIGVuY29kZXMgZGF0YSBmcm9tIGEgc2V0IG9mIDQ1IGNoYXJhY3RlcnMsXG4gKiBpLmUuIDEwIG51bWVyaWMgZGlnaXRzICgwIC0gOSksXG4gKiAgICAgIDI2IGFscGhhYmV0aWMgY2hhcmFjdGVycyAoQSAtIFopLFxuICogICBhbmQgOSBzeW1ib2xzIChTUCwgJCwgJSwgKiwgKywgLSwgLiwgLywgOikuXG4gKiBOb3JtYWxseSwgdHdvIGlucHV0IGNoYXJhY3RlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IDExIGJpdHMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5BTFBIQU5VTUVSSUMgPSB7XG4gIGlkOiAnQWxwaGFudW1lcmljJyxcbiAgYml0OiAxIDw8IDEsXG4gIGNjQml0czogWzksIDExLCAxM11cbn1cblxuLyoqXG4gKiBJbiBieXRlIG1vZGUsIGRhdGEgaXMgZW5jb2RlZCBhdCA4IGJpdHMgcGVyIGNoYXJhY3Rlci5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLkJZVEUgPSB7XG4gIGlkOiAnQnl0ZScsXG4gIGJpdDogMSA8PCAyLFxuICBjY0JpdHM6IFs4LCAxNiwgMTZdXG59XG5cbi8qKlxuICogVGhlIEthbmppIG1vZGUgZWZmaWNpZW50bHkgZW5jb2RlcyBLYW5qaSBjaGFyYWN0ZXJzIGluIGFjY29yZGFuY2Ugd2l0aFxuICogdGhlIFNoaWZ0IEpJUyBzeXN0ZW0gYmFzZWQgb24gSklTIFggMDIwOC5cbiAqIFRoZSBTaGlmdCBKSVMgdmFsdWVzIGFyZSBzaGlmdGVkIGZyb20gdGhlIEpJUyBYIDAyMDggdmFsdWVzLlxuICogSklTIFggMDIwOCBnaXZlcyBkZXRhaWxzIG9mIHRoZSBzaGlmdCBjb2RlZCByZXByZXNlbnRhdGlvbi5cbiAqIEVhY2ggdHdvLWJ5dGUgY2hhcmFjdGVyIHZhbHVlIGlzIGNvbXBhY3RlZCB0byBhIDEzLWJpdCBiaW5hcnkgY29kZXdvcmQuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5LQU5KSSA9IHtcbiAgaWQ6ICdLYW5qaScsXG4gIGJpdDogMSA8PCAzLFxuICBjY0JpdHM6IFs4LCAxMCwgMTJdXG59XG5cbi8qKlxuICogTWl4ZWQgbW9kZSB3aWxsIGNvbnRhaW4gYSBzZXF1ZW5jZXMgb2YgZGF0YSBpbiBhIGNvbWJpbmF0aW9uIG9mIGFueSBvZlxuICogdGhlIG1vZGVzIGRlc2NyaWJlZCBhYm92ZVxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuTUlYRUQgPSB7XG4gIGJpdDogLTFcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgYml0cyBuZWVkZWQgdG8gc3RvcmUgdGhlIGRhdGEgbGVuZ3RoXG4gKiBhY2NvcmRpbmcgdG8gUVIgQ29kZSBzcGVjaWZpY2F0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtNb2RlfSAgIG1vZGUgICAgRGF0YSBtb2RlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgTnVtYmVyIG9mIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRDaGFyQ291bnRJbmRpY2F0b3IgPSBmdW5jdGlvbiBnZXRDaGFyQ291bnRJbmRpY2F0b3IgKG1vZGUsIHZlcnNpb24pIHtcbiAgaWYgKCFtb2RlLmNjQml0cykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1vZGU6ICcgKyBtb2RlKVxuXG4gIGlmICghVmVyc2lvbkNoZWNrLmlzVmFsaWQodmVyc2lvbikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmVyc2lvbjogJyArIHZlcnNpb24pXG4gIH1cblxuICBpZiAodmVyc2lvbiA+PSAxICYmIHZlcnNpb24gPCAxMCkgcmV0dXJuIG1vZGUuY2NCaXRzWzBdXG4gIGVsc2UgaWYgKHZlcnNpb24gPCAyNykgcmV0dXJuIG1vZGUuY2NCaXRzWzFdXG4gIHJldHVybiBtb2RlLmNjQml0c1syXVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG1vc3QgZWZmaWNpZW50IG1vZGUgdG8gc3RvcmUgdGhlIHNwZWNpZmllZCBkYXRhXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBkYXRhU3RyIElucHV0IGRhdGEgc3RyaW5nXG4gKiBAcmV0dXJuIHtNb2RlfSAgICAgICAgICAgQmVzdCBtb2RlXG4gKi9cbmV4cG9ydHMuZ2V0QmVzdE1vZGVGb3JEYXRhID0gZnVuY3Rpb24gZ2V0QmVzdE1vZGVGb3JEYXRhIChkYXRhU3RyKSB7XG4gIGlmIChSZWdleC50ZXN0TnVtZXJpYyhkYXRhU3RyKSkgcmV0dXJuIGV4cG9ydHMuTlVNRVJJQ1xuICBlbHNlIGlmIChSZWdleC50ZXN0QWxwaGFudW1lcmljKGRhdGFTdHIpKSByZXR1cm4gZXhwb3J0cy5BTFBIQU5VTUVSSUNcbiAgZWxzZSBpZiAoUmVnZXgudGVzdEthbmppKGRhdGFTdHIpKSByZXR1cm4gZXhwb3J0cy5LQU5KSVxuICBlbHNlIHJldHVybiBleHBvcnRzLkJZVEVcbn1cblxuLyoqXG4gKiBSZXR1cm4gbW9kZSBuYW1lIGFzIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7TW9kZX0gbW9kZSBNb2RlIG9iamVjdFxuICogQHJldHVybnMge1N0cmluZ30gIE1vZGUgbmFtZVxuICovXG5leHBvcnRzLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKG1vZGUpIHtcbiAgaWYgKG1vZGUgJiYgbW9kZS5pZCkgcmV0dXJuIG1vZGUuaWRcbiAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1vZGUnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGlucHV0IHBhcmFtIGlzIGEgdmFsaWQgbW9kZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0gICB7TW9kZX0gICAgbW9kZSBNb2RlIG9iamVjdFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdmFsaWQgbW9kZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKG1vZGUpIHtcbiAgcmV0dXJuIG1vZGUgJiYgbW9kZS5iaXQgJiYgbW9kZS5jY0JpdHNcbn1cblxuLyoqXG4gKiBHZXQgbW9kZSBvYmplY3QgZnJvbSBpdHMgbmFtZVxuICpcbiAqIEBwYXJhbSAgIHtTdHJpbmd9IHN0cmluZyBNb2RlIG5hbWVcbiAqIEByZXR1cm5zIHtNb2RlfSAgICAgICAgICBNb2RlIG9iamVjdFxuICovXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQYXJhbSBpcyBub3QgYSBzdHJpbmcnKVxuICB9XG5cbiAgdmFyIGxjU3RyID0gc3RyaW5nLnRvTG93ZXJDYXNlKClcblxuICBzd2l0Y2ggKGxjU3RyKSB7XG4gICAgY2FzZSAnbnVtZXJpYyc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5OVU1FUklDXG4gICAgY2FzZSAnYWxwaGFudW1lcmljJzpcbiAgICAgIHJldHVybiBleHBvcnRzLkFMUEhBTlVNRVJJQ1xuICAgIGNhc2UgJ2thbmppJzpcbiAgICAgIHJldHVybiBleHBvcnRzLktBTkpJXG4gICAgY2FzZSAnYnl0ZSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5CWVRFXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlOiAnICsgc3RyaW5nKVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBtb2RlIGZyb20gYSB2YWx1ZS5cbiAqIElmIHZhbHVlIGlzIG5vdCBhIHZhbGlkIG1vZGUsIHJldHVybnMgZGVmYXVsdFZhbHVlXG4gKlxuICogQHBhcmFtICB7TW9kZXxTdHJpbmd9IHZhbHVlICAgICAgICBFbmNvZGluZyBtb2RlXG4gKiBAcGFyYW0gIHtNb2RlfSAgICAgICAgZGVmYXVsdFZhbHVlIEZhbGxiYWNrIHZhbHVlXG4gKiBAcmV0dXJuIHtNb2RlfSAgICAgICAgICAgICAgICAgICAgIEVuY29kaW5nIG1vZGVcbiAqL1xuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoZXhwb3J0cy5pc1ZhbGlkKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgfVxufVxuIiwidmFyIE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG5mdW5jdGlvbiBOdW1lcmljRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLk5VTUVSSUNcbiAgdGhpcy5kYXRhID0gZGF0YS50b1N0cmluZygpXG59XG5cbk51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIDEwICogTWF0aC5mbG9vcihsZW5ndGggLyAzKSArICgobGVuZ3RoICUgMykgPyAoKGxlbmd0aCAlIDMpICogMyArIDEpIDogMClcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbk51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBOdW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbk51bWVyaWNEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChiaXRCdWZmZXIpIHtcbiAgdmFyIGksIGdyb3VwLCB2YWx1ZVxuXG4gIC8vIFRoZSBpbnB1dCBkYXRhIHN0cmluZyBpcyBkaXZpZGVkIGludG8gZ3JvdXBzIG9mIHRocmVlIGRpZ2l0cyxcbiAgLy8gYW5kIGVhY2ggZ3JvdXAgaXMgY29udmVydGVkIHRvIGl0cyAxMC1iaXQgYmluYXJ5IGVxdWl2YWxlbnQuXG4gIGZvciAoaSA9IDA7IGkgKyAzIDw9IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gMykge1xuICAgIGdyb3VwID0gdGhpcy5kYXRhLnN1YnN0cihpLCAzKVxuICAgIHZhbHVlID0gcGFyc2VJbnQoZ3JvdXAsIDEwKVxuXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgMTApXG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG9mIGlucHV0IGRpZ2l0cyBpcyBub3QgYW4gZXhhY3QgbXVsdGlwbGUgb2YgdGhyZWUsXG4gIC8vIHRoZSBmaW5hbCBvbmUgb3IgdHdvIGRpZ2l0cyBhcmUgY29udmVydGVkIHRvIDQgb3IgNyBiaXRzIHJlc3BlY3RpdmVseS5cbiAgdmFyIHJlbWFpbmluZ051bSA9IHRoaXMuZGF0YS5sZW5ndGggLSBpXG4gIGlmIChyZW1haW5pbmdOdW0gPiAwKSB7XG4gICAgZ3JvdXAgPSB0aGlzLmRhdGEuc3Vic3RyKGkpXG4gICAgdmFsdWUgPSBwYXJzZUludChncm91cCwgMTApXG5cbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCByZW1haW5pbmdOdW0gKiAzICsgMSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWVyaWNEYXRhXG4iLCJ2YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2J1ZmZlcicpXG52YXIgR0YgPSByZXF1aXJlKCcuL2dhbG9pcy1maWVsZCcpXG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gcG9seW5vbWlhbHMgaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge0J1ZmZlcn0gcDEgUG9seW5vbWlhbFxuICogQHBhcmFtICB7QnVmZmVyfSBwMiBQb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgIFByb2R1Y3Qgb2YgcDEgYW5kIHAyXG4gKi9cbmV4cG9ydHMubXVsID0gZnVuY3Rpb24gbXVsIChwMSwgcDIpIHtcbiAgdmFyIGNvZWZmID0gQnVmZmVyVXRpbC5hbGxvYyhwMS5sZW5ndGggKyBwMi5sZW5ndGggLSAxKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcDEubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHAyLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb2VmZltpICsgal0gXj0gR0YubXVsKHAxW2ldLCBwMltqXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29lZmZcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHJlbWFpbmRlciBvZiBwb2x5bm9taWFscyBkaXZpc2lvblxuICpcbiAqIEBwYXJhbSAge0J1ZmZlcn0gZGl2aWRlbnQgUG9seW5vbWlhbFxuICogQHBhcmFtICB7QnVmZmVyfSBkaXZpc29yICBQb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgICAgIFJlbWFpbmRlclxuICovXG5leHBvcnRzLm1vZCA9IGZ1bmN0aW9uIG1vZCAoZGl2aWRlbnQsIGRpdmlzb3IpIHtcbiAgdmFyIHJlc3VsdCA9IEJ1ZmZlclV0aWwuZnJvbShkaXZpZGVudClcblxuICB3aGlsZSAoKHJlc3VsdC5sZW5ndGggLSBkaXZpc29yLmxlbmd0aCkgPj0gMCkge1xuICAgIHZhciBjb2VmZiA9IHJlc3VsdFswXVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXZpc29yLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gXj0gR0YubXVsKGRpdmlzb3JbaV0sIGNvZWZmKVxuICAgIH1cblxuICAgIC8vIHJlbW92ZSBhbGwgemVyb3MgZnJvbSBidWZmZXIgaGVhZFxuICAgIHZhciBvZmZzZXQgPSAwXG4gICAgd2hpbGUgKG9mZnNldCA8IHJlc3VsdC5sZW5ndGggJiYgcmVzdWx0W29mZnNldF0gPT09IDApIG9mZnNldCsrXG4gICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKG9mZnNldClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBpcnJlZHVjaWJsZSBnZW5lcmF0b3IgcG9seW5vbWlhbCBvZiBzcGVjaWZpZWQgZGVncmVlXG4gKiAodXNlZCBieSBSZWVkLVNvbG9tb24gZW5jb2RlcilcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGRlZ3JlZSBEZWdyZWUgb2YgdGhlIGdlbmVyYXRvciBwb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgICBCdWZmZXIgY29udGFpbmluZyBwb2x5bm9taWFsIGNvZWZmaWNpZW50c1xuICovXG5leHBvcnRzLmdlbmVyYXRlRUNQb2x5bm9taWFsID0gZnVuY3Rpb24gZ2VuZXJhdGVFQ1BvbHlub21pYWwgKGRlZ3JlZSkge1xuICB2YXIgcG9seSA9IEJ1ZmZlclV0aWwuZnJvbShbMV0pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGVncmVlOyBpKyspIHtcbiAgICBwb2x5ID0gZXhwb3J0cy5tdWwocG9seSwgWzEsIEdGLmV4cChpKV0pXG4gIH1cblxuICByZXR1cm4gcG9seVxufVxuIiwidmFyIEJ1ZmZlclV0aWwgPSByZXF1aXJlKCcuLi91dGlscy9idWZmZXInKVxudmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG52YXIgRUNMZXZlbCA9IHJlcXVpcmUoJy4vZXJyb3ItY29ycmVjdGlvbi1sZXZlbCcpXG52YXIgQml0QnVmZmVyID0gcmVxdWlyZSgnLi9iaXQtYnVmZmVyJylcbnZhciBCaXRNYXRyaXggPSByZXF1aXJlKCcuL2JpdC1tYXRyaXgnKVxudmFyIEFsaWdubWVudFBhdHRlcm4gPSByZXF1aXJlKCcuL2FsaWdubWVudC1wYXR0ZXJuJylcbnZhciBGaW5kZXJQYXR0ZXJuID0gcmVxdWlyZSgnLi9maW5kZXItcGF0dGVybicpXG52YXIgTWFza1BhdHRlcm4gPSByZXF1aXJlKCcuL21hc2stcGF0dGVybicpXG52YXIgRUNDb2RlID0gcmVxdWlyZSgnLi9lcnJvci1jb3JyZWN0aW9uLWNvZGUnKVxudmFyIFJlZWRTb2xvbW9uRW5jb2RlciA9IHJlcXVpcmUoJy4vcmVlZC1zb2xvbW9uLWVuY29kZXInKVxudmFyIFZlcnNpb24gPSByZXF1aXJlKCcuL3ZlcnNpb24nKVxudmFyIEZvcm1hdEluZm8gPSByZXF1aXJlKCcuL2Zvcm1hdC1pbmZvJylcbnZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcbnZhciBTZWdtZW50cyA9IHJlcXVpcmUoJy4vc2VnbWVudHMnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBRUkNvZGUgZm9yIEphdmFTY3JpcHRcbiAqXG4gKiBtb2RpZmllZCBieSBSeWFuIERheSBmb3Igbm9kZWpzIHN1cHBvcnRcbiAqIENvcHlyaWdodCAoYykgMjAxMSBSeWFuIERheVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbiAqICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAqXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUVJDb2RlIGZvciBKYXZhU2NyaXB0XG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDA5IEthenVoaWtvIEFyYXNlXG4vL1xuLy8gVVJMOiBodHRwOi8vd3d3LmQtcHJvamVjdC5jb20vXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuLy8gICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuLy9cbi8vIFRoZSB3b3JkIFwiUVIgQ29kZVwiIGlzIHJlZ2lzdGVyZWQgdHJhZGVtYXJrIG9mXG4vLyBERU5TTyBXQVZFIElOQ09SUE9SQVRFRFxuLy8gICBodHRwOi8vd3d3LmRlbnNvLXdhdmUuY29tL3FyY29kZS9mYXFwYXRlbnQtZS5odG1sXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbi8qKlxuICogQWRkIGZpbmRlciBwYXR0ZXJucyBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4ICBNb2R1bGVzIG1hdHJpeFxuICogQHBhcmFtICB7TnVtYmVyfSAgICB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICovXG5mdW5jdGlvbiBzZXR1cEZpbmRlclBhdHRlcm4gKG1hdHJpeCwgdmVyc2lvbikge1xuICB2YXIgc2l6ZSA9IG1hdHJpeC5zaXplXG4gIHZhciBwb3MgPSBGaW5kZXJQYXR0ZXJuLmdldFBvc2l0aW9ucyh2ZXJzaW9uKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJvdyA9IHBvc1tpXVswXVxuICAgIHZhciBjb2wgPSBwb3NbaV1bMV1cblxuICAgIGZvciAodmFyIHIgPSAtMTsgciA8PSA3OyByKyspIHtcbiAgICAgIGlmIChyb3cgKyByIDw9IC0xIHx8IHNpemUgPD0gcm93ICsgcikgY29udGludWVcblxuICAgICAgZm9yICh2YXIgYyA9IC0xOyBjIDw9IDc7IGMrKykge1xuICAgICAgICBpZiAoY29sICsgYyA8PSAtMSB8fCBzaXplIDw9IGNvbCArIGMpIGNvbnRpbnVlXG5cbiAgICAgICAgaWYgKChyID49IDAgJiYgciA8PSA2ICYmIChjID09PSAwIHx8IGMgPT09IDYpKSB8fFxuICAgICAgICAgIChjID49IDAgJiYgYyA8PSA2ICYmIChyID09PSAwIHx8IHIgPT09IDYpKSB8fFxuICAgICAgICAgIChyID49IDIgJiYgciA8PSA0ICYmIGMgPj0gMiAmJiBjIDw9IDQpKSB7XG4gICAgICAgICAgbWF0cml4LnNldChyb3cgKyByLCBjb2wgKyBjLCB0cnVlLCB0cnVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdHJpeC5zZXQocm93ICsgciwgY29sICsgYywgZmFsc2UsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgdGltaW5nIHBhdHRlcm4gYml0cyB0byBtYXRyaXhcbiAqXG4gKiBOb3RlOiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGJlZm9yZSB7QGxpbmsgc2V0dXBBbGlnbm1lbnRQYXR0ZXJufVxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4IE1vZHVsZXMgbWF0cml4XG4gKi9cbmZ1bmN0aW9uIHNldHVwVGltaW5nUGF0dGVybiAobWF0cml4KSB7XG4gIHZhciBzaXplID0gbWF0cml4LnNpemVcblxuICBmb3IgKHZhciByID0gODsgciA8IHNpemUgLSA4OyByKyspIHtcbiAgICB2YXIgdmFsdWUgPSByICUgMiA9PT0gMFxuICAgIG1hdHJpeC5zZXQociwgNiwgdmFsdWUsIHRydWUpXG4gICAgbWF0cml4LnNldCg2LCByLCB2YWx1ZSwgdHJ1ZSlcbiAgfVxufVxuXG4vKipcbiAqIEFkZCBhbGlnbm1lbnQgcGF0dGVybnMgYml0cyB0byBtYXRyaXhcbiAqXG4gKiBOb3RlOiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGFmdGVyIHtAbGluayBzZXR1cFRpbWluZ1BhdHRlcm59XG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSBtYXRyaXggIE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKi9cbmZ1bmN0aW9uIHNldHVwQWxpZ25tZW50UGF0dGVybiAobWF0cml4LCB2ZXJzaW9uKSB7XG4gIHZhciBwb3MgPSBBbGlnbm1lbnRQYXR0ZXJuLmdldFBvc2l0aW9ucyh2ZXJzaW9uKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJvdyA9IHBvc1tpXVswXVxuICAgIHZhciBjb2wgPSBwb3NbaV1bMV1cblxuICAgIGZvciAodmFyIHIgPSAtMjsgciA8PSAyOyByKyspIHtcbiAgICAgIGZvciAodmFyIGMgPSAtMjsgYyA8PSAyOyBjKyspIHtcbiAgICAgICAgaWYgKHIgPT09IC0yIHx8IHIgPT09IDIgfHwgYyA9PT0gLTIgfHwgYyA9PT0gMiB8fFxuICAgICAgICAgIChyID09PSAwICYmIGMgPT09IDApKSB7XG4gICAgICAgICAgbWF0cml4LnNldChyb3cgKyByLCBjb2wgKyBjLCB0cnVlLCB0cnVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdHJpeC5zZXQocm93ICsgciwgY29sICsgYywgZmFsc2UsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgdmVyc2lvbiBpbmZvIGJpdHMgdG8gbWF0cml4XG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSBtYXRyaXggIE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKi9cbmZ1bmN0aW9uIHNldHVwVmVyc2lvbkluZm8gKG1hdHJpeCwgdmVyc2lvbikge1xuICB2YXIgc2l6ZSA9IG1hdHJpeC5zaXplXG4gIHZhciBiaXRzID0gVmVyc2lvbi5nZXRFbmNvZGVkQml0cyh2ZXJzaW9uKVxuICB2YXIgcm93LCBjb2wsIG1vZFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTg7IGkrKykge1xuICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIDMpXG4gICAgY29sID0gaSAlIDMgKyBzaXplIC0gOCAtIDNcbiAgICBtb2QgPSAoKGJpdHMgPj4gaSkgJiAxKSA9PT0gMVxuXG4gICAgbWF0cml4LnNldChyb3csIGNvbCwgbW9kLCB0cnVlKVxuICAgIG1hdHJpeC5zZXQoY29sLCByb3csIG1vZCwgdHJ1ZSlcbiAgfVxufVxuXG4vKipcbiAqIEFkZCBmb3JtYXQgaW5mbyBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4ICAgICAgICAgICAgICAgTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge0Vycm9yQ29ycmVjdGlvbkxldmVsfSAgICBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIG1hc2tQYXR0ZXJuICAgICAgICAgIE1hc2sgcGF0dGVybiByZWZlcmVuY2UgdmFsdWVcbiAqL1xuZnVuY3Rpb24gc2V0dXBGb3JtYXRJbmZvIChtYXRyaXgsIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrUGF0dGVybikge1xuICB2YXIgc2l6ZSA9IG1hdHJpeC5zaXplXG4gIHZhciBiaXRzID0gRm9ybWF0SW5mby5nZXRFbmNvZGVkQml0cyhlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFza1BhdHRlcm4pXG4gIHZhciBpLCBtb2RcblxuICBmb3IgKGkgPSAwOyBpIDwgMTU7IGkrKykge1xuICAgIG1vZCA9ICgoYml0cyA+PiBpKSAmIDEpID09PSAxXG5cbiAgICAvLyB2ZXJ0aWNhbFxuICAgIGlmIChpIDwgNikge1xuICAgICAgbWF0cml4LnNldChpLCA4LCBtb2QsIHRydWUpXG4gICAgfSBlbHNlIGlmIChpIDwgOCkge1xuICAgICAgbWF0cml4LnNldChpICsgMSwgOCwgbW9kLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXRyaXguc2V0KHNpemUgLSAxNSArIGksIDgsIG1vZCwgdHJ1ZSlcbiAgICB9XG5cbiAgICAvLyBob3Jpem9udGFsXG4gICAgaWYgKGkgPCA4KSB7XG4gICAgICBtYXRyaXguc2V0KDgsIHNpemUgLSBpIC0gMSwgbW9kLCB0cnVlKVxuICAgIH0gZWxzZSBpZiAoaSA8IDkpIHtcbiAgICAgIG1hdHJpeC5zZXQoOCwgMTUgLSBpIC0gMSArIDEsIG1vZCwgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgbWF0cml4LnNldCg4LCAxNSAtIGkgLSAxLCBtb2QsIHRydWUpXG4gICAgfVxuICB9XG5cbiAgLy8gZml4ZWQgbW9kdWxlXG4gIG1hdHJpeC5zZXQoc2l6ZSAtIDgsIDgsIDEsIHRydWUpXG59XG5cbi8qKlxuICogQWRkIGVuY29kZWQgZGF0YSBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4IE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtCdWZmZXJ9ICAgIGRhdGEgICBEYXRhIGNvZGV3b3Jkc1xuICovXG5mdW5jdGlvbiBzZXR1cERhdGEgKG1hdHJpeCwgZGF0YSkge1xuICB2YXIgc2l6ZSA9IG1hdHJpeC5zaXplXG4gIHZhciBpbmMgPSAtMVxuICB2YXIgcm93ID0gc2l6ZSAtIDFcbiAgdmFyIGJpdEluZGV4ID0gN1xuICB2YXIgYnl0ZUluZGV4ID0gMFxuXG4gIGZvciAodmFyIGNvbCA9IHNpemUgLSAxOyBjb2wgPiAwOyBjb2wgLT0gMikge1xuICAgIGlmIChjb2wgPT09IDYpIGNvbC0tXG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCAyOyBjKyspIHtcbiAgICAgICAgaWYgKCFtYXRyaXguaXNSZXNlcnZlZChyb3csIGNvbCAtIGMpKSB7XG4gICAgICAgICAgdmFyIGRhcmsgPSBmYWxzZVxuXG4gICAgICAgICAgaWYgKGJ5dGVJbmRleCA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBkYXJrID0gKCgoZGF0YVtieXRlSW5kZXhdID4+PiBiaXRJbmRleCkgJiAxKSA9PT0gMSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXRyaXguc2V0KHJvdywgY29sIC0gYywgZGFyaylcbiAgICAgICAgICBiaXRJbmRleC0tXG5cbiAgICAgICAgICBpZiAoYml0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBieXRlSW5kZXgrK1xuICAgICAgICAgICAgYml0SW5kZXggPSA3XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJvdyArPSBpbmNcblxuICAgICAgaWYgKHJvdyA8IDAgfHwgc2l6ZSA8PSByb3cpIHtcbiAgICAgICAgcm93IC09IGluY1xuICAgICAgICBpbmMgPSAtaW5jXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGVuY29kZWQgY29kZXdvcmRzIGZyb20gZGF0YSBpbnB1dFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gICB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge0Vycm9yQ29ycmVjdGlvbkxldmVsfSAgIGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSAge0J5dGVEYXRhfSBkYXRhICAgICAgICAgICAgICAgICBEYXRhIGlucHV0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgICAgICAgICAgICAgICAgICAgQnVmZmVyIGNvbnRhaW5pbmcgZW5jb2RlZCBjb2Rld29yZHNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGF0YSAodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIHNlZ21lbnRzKSB7XG4gIC8vIFByZXBhcmUgZGF0YSBidWZmZXJcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCaXRCdWZmZXIoKVxuXG4gIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAvLyBwcmVmaXggZGF0YSB3aXRoIG1vZGUgaW5kaWNhdG9yICg0IGJpdHMpXG4gICAgYnVmZmVyLnB1dChkYXRhLm1vZGUuYml0LCA0KVxuXG4gICAgLy8gUHJlZml4IGRhdGEgd2l0aCBjaGFyYWN0ZXIgY291bnQgaW5kaWNhdG9yLlxuICAgIC8vIFRoZSBjaGFyYWN0ZXIgY291bnQgaW5kaWNhdG9yIGlzIGEgc3RyaW5nIG9mIGJpdHMgdGhhdCByZXByZXNlbnRzIHRoZVxuICAgIC8vIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgYXJlIGJlaW5nIGVuY29kZWQuXG4gICAgLy8gVGhlIGNoYXJhY3RlciBjb3VudCBpbmRpY2F0b3IgbXVzdCBiZSBwbGFjZWQgYWZ0ZXIgdGhlIG1vZGUgaW5kaWNhdG9yXG4gICAgLy8gYW5kIG11c3QgYmUgYSBjZXJ0YWluIG51bWJlciBvZiBiaXRzIGxvbmcsIGRlcGVuZGluZyBvbiB0aGUgUVIgdmVyc2lvblxuICAgIC8vIGFuZCBkYXRhIG1vZGVcbiAgICAvLyBAc2VlIHtAbGluayBNb2RlLmdldENoYXJDb3VudEluZGljYXRvcn0uXG4gICAgYnVmZmVyLnB1dChkYXRhLmdldExlbmd0aCgpLCBNb2RlLmdldENoYXJDb3VudEluZGljYXRvcihkYXRhLm1vZGUsIHZlcnNpb24pKVxuXG4gICAgLy8gYWRkIGJpbmFyeSBkYXRhIHNlcXVlbmNlIHRvIGJ1ZmZlclxuICAgIGRhdGEud3JpdGUoYnVmZmVyKVxuICB9KVxuXG4gIC8vIENhbGN1bGF0ZSByZXF1aXJlZCBudW1iZXIgb2YgYml0c1xuICB2YXIgdG90YWxDb2Rld29yZHMgPSBVdGlscy5nZXRTeW1ib2xUb3RhbENvZGV3b3Jkcyh2ZXJzaW9uKVxuICB2YXIgZWNUb3RhbENvZGV3b3JkcyA9IEVDQ29kZS5nZXRUb3RhbENvZGV3b3Jkc0NvdW50KHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuICB2YXIgZGF0YVRvdGFsQ29kZXdvcmRzQml0cyA9ICh0b3RhbENvZGV3b3JkcyAtIGVjVG90YWxDb2Rld29yZHMpICogOFxuXG4gIC8vIEFkZCBhIHRlcm1pbmF0b3IuXG4gIC8vIElmIHRoZSBiaXQgc3RyaW5nIGlzIHNob3J0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIHJlcXVpcmVkIGJpdHMsXG4gIC8vIGEgdGVybWluYXRvciBvZiB1cCB0byBmb3VyIDBzIG11c3QgYmUgYWRkZWQgdG8gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHN0cmluZy5cbiAgLy8gSWYgdGhlIGJpdCBzdHJpbmcgaXMgbW9yZSB0aGFuIGZvdXIgYml0cyBzaG9ydGVyIHRoYW4gdGhlIHJlcXVpcmVkIG51bWJlciBvZiBiaXRzLFxuICAvLyBhZGQgZm91ciAwcyB0byB0aGUgZW5kLlxuICBpZiAoYnVmZmVyLmdldExlbmd0aEluQml0cygpICsgNCA8PSBkYXRhVG90YWxDb2Rld29yZHNCaXRzKSB7XG4gICAgYnVmZmVyLnB1dCgwLCA0KVxuICB9XG5cbiAgLy8gSWYgdGhlIGJpdCBzdHJpbmcgaXMgZmV3ZXIgdGhhbiBmb3VyIGJpdHMgc2hvcnRlciwgYWRkIG9ubHkgdGhlIG51bWJlciBvZiAwcyB0aGF0XG4gIC8vIGFyZSBuZWVkZWQgdG8gcmVhY2ggdGhlIHJlcXVpcmVkIG51bWJlciBvZiBiaXRzLlxuXG4gIC8vIEFmdGVyIGFkZGluZyB0aGUgdGVybWluYXRvciwgaWYgdGhlIG51bWJlciBvZiBiaXRzIGluIHRoZSBzdHJpbmcgaXMgbm90IGEgbXVsdGlwbGUgb2YgOCxcbiAgLy8gcGFkIHRoZSBzdHJpbmcgb24gdGhlIHJpZ2h0IHdpdGggMHMgdG8gbWFrZSB0aGUgc3RyaW5nJ3MgbGVuZ3RoIGEgbXVsdGlwbGUgb2YgOC5cbiAgd2hpbGUgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSAlIDggIT09IDApIHtcbiAgICBidWZmZXIucHV0Qml0KDApXG4gIH1cblxuICAvLyBBZGQgcGFkIGJ5dGVzIGlmIHRoZSBzdHJpbmcgaXMgc3RpbGwgc2hvcnRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgcmVxdWlyZWQgYml0cy5cbiAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgdG8gZmlsbCB0aGUgZGF0YSBjYXBhY2l0eSBvZiB0aGUgc3ltYm9sIGNvcnJlc3BvbmRpbmcgdG9cbiAgLy8gdGhlIFZlcnNpb24gYW5kIEVycm9yIENvcnJlY3Rpb24gTGV2ZWwgYnkgYWRkaW5nIHRoZSBQYWQgQ29kZXdvcmRzIDExMTAxMTAwICgweEVDKVxuICAvLyBhbmQgMDAwMTAwMDEgKDB4MTEpIGFsdGVybmF0ZWx5LlxuICB2YXIgcmVtYWluaW5nQnl0ZSA9IChkYXRhVG90YWxDb2Rld29yZHNCaXRzIC0gYnVmZmVyLmdldExlbmd0aEluQml0cygpKSAvIDhcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1haW5pbmdCeXRlOyBpKyspIHtcbiAgICBidWZmZXIucHV0KGkgJSAyID8gMHgxMSA6IDB4RUMsIDgpXG4gIH1cblxuICByZXR1cm4gY3JlYXRlQ29kZXdvcmRzKGJ1ZmZlciwgdmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG59XG5cbi8qKlxuICogRW5jb2RlIGlucHV0IGRhdGEgd2l0aCBSZWVkLVNvbG9tb24gYW5kIHJldHVybiBjb2Rld29yZHMgd2l0aFxuICogcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogQHBhcmFtICB7Qml0QnVmZmVyfSBiaXRCdWZmZXIgICAgICAgICAgICBEYXRhIHRvIGVuY29kZVxuICogQHBhcmFtICB7TnVtYmVyfSAgICB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge0Vycm9yQ29ycmVjdGlvbkxldmVsfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZmZlciBjb250YWluaW5nIGVuY29kZWQgY29kZXdvcmRzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvZGV3b3JkcyAoYml0QnVmZmVyLCB2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xuICAvLyBUb3RhbCBjb2Rld29yZHMgZm9yIHRoaXMgUVIgY29kZSB2ZXJzaW9uIChEYXRhICsgRXJyb3IgY29ycmVjdGlvbilcbiAgdmFyIHRvdGFsQ29kZXdvcmRzID0gVXRpbHMuZ2V0U3ltYm9sVG90YWxDb2Rld29yZHModmVyc2lvbilcblxuICAvLyBUb3RhbCBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHNcbiAgdmFyIGVjVG90YWxDb2Rld29yZHMgPSBFQ0NvZGUuZ2V0VG90YWxDb2Rld29yZHNDb3VudCh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbClcblxuICAvLyBUb3RhbCBudW1iZXIgb2YgZGF0YSBjb2Rld29yZHNcbiAgdmFyIGRhdGFUb3RhbENvZGV3b3JkcyA9IHRvdGFsQ29kZXdvcmRzIC0gZWNUb3RhbENvZGV3b3Jkc1xuXG4gIC8vIFRvdGFsIG51bWJlciBvZiBibG9ja3NcbiAgdmFyIGVjVG90YWxCbG9ja3MgPSBFQ0NvZGUuZ2V0QmxvY2tzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG5cbiAgLy8gQ2FsY3VsYXRlIGhvdyBtYW55IGJsb2NrcyBlYWNoIGdyb3VwIHNob3VsZCBjb250YWluXG4gIHZhciBibG9ja3NJbkdyb3VwMiA9IHRvdGFsQ29kZXdvcmRzICUgZWNUb3RhbEJsb2Nrc1xuICB2YXIgYmxvY2tzSW5Hcm91cDEgPSBlY1RvdGFsQmxvY2tzIC0gYmxvY2tzSW5Hcm91cDJcblxuICB2YXIgdG90YWxDb2Rld29yZHNJbkdyb3VwMSA9IE1hdGguZmxvb3IodG90YWxDb2Rld29yZHMgLyBlY1RvdGFsQmxvY2tzKVxuXG4gIHZhciBkYXRhQ29kZXdvcmRzSW5Hcm91cDEgPSBNYXRoLmZsb29yKGRhdGFUb3RhbENvZGV3b3JkcyAvIGVjVG90YWxCbG9ja3MpXG4gIHZhciBkYXRhQ29kZXdvcmRzSW5Hcm91cDIgPSBkYXRhQ29kZXdvcmRzSW5Hcm91cDEgKyAxXG5cbiAgLy8gTnVtYmVyIG9mIEVDIGNvZGV3b3JkcyBpcyB0aGUgc2FtZSBmb3IgYm90aCBncm91cHNcbiAgdmFyIGVjQ291bnQgPSB0b3RhbENvZGV3b3Jkc0luR3JvdXAxIC0gZGF0YUNvZGV3b3Jkc0luR3JvdXAxXG5cbiAgLy8gSW5pdGlhbGl6ZSBhIFJlZWQtU29sb21vbiBlbmNvZGVyIHdpdGggYSBnZW5lcmF0b3IgcG9seW5vbWlhbCBvZiBkZWdyZWUgZWNDb3VudFxuICB2YXIgcnMgPSBuZXcgUmVlZFNvbG9tb25FbmNvZGVyKGVjQ291bnQpXG5cbiAgdmFyIG9mZnNldCA9IDBcbiAgdmFyIGRjRGF0YSA9IG5ldyBBcnJheShlY1RvdGFsQmxvY2tzKVxuICB2YXIgZWNEYXRhID0gbmV3IEFycmF5KGVjVG90YWxCbG9ja3MpXG4gIHZhciBtYXhEYXRhU2l6ZSA9IDBcbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlclV0aWwuZnJvbShiaXRCdWZmZXIuYnVmZmVyKVxuXG4gIC8vIERpdmlkZSB0aGUgYnVmZmVyIGludG8gdGhlIHJlcXVpcmVkIG51bWJlciBvZiBibG9ja3NcbiAgZm9yICh2YXIgYiA9IDA7IGIgPCBlY1RvdGFsQmxvY2tzOyBiKyspIHtcbiAgICB2YXIgZGF0YVNpemUgPSBiIDwgYmxvY2tzSW5Hcm91cDEgPyBkYXRhQ29kZXdvcmRzSW5Hcm91cDEgOiBkYXRhQ29kZXdvcmRzSW5Hcm91cDJcblxuICAgIC8vIGV4dHJhY3QgYSBibG9jayBvZiBkYXRhIGZyb20gYnVmZmVyXG4gICAgZGNEYXRhW2JdID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZGF0YVNpemUpXG5cbiAgICAvLyBDYWxjdWxhdGUgRUMgY29kZXdvcmRzIGZvciB0aGlzIGRhdGEgYmxvY2tcbiAgICBlY0RhdGFbYl0gPSBycy5lbmNvZGUoZGNEYXRhW2JdKVxuXG4gICAgb2Zmc2V0ICs9IGRhdGFTaXplXG4gICAgbWF4RGF0YVNpemUgPSBNYXRoLm1heChtYXhEYXRhU2l6ZSwgZGF0YVNpemUpXG4gIH1cblxuICAvLyBDcmVhdGUgZmluYWwgZGF0YVxuICAvLyBJbnRlcmxlYXZlIHRoZSBkYXRhIGFuZCBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyBmcm9tIGVhY2ggYmxvY2tcbiAgdmFyIGRhdGEgPSBCdWZmZXJVdGlsLmFsbG9jKHRvdGFsQ29kZXdvcmRzKVxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBpLCByXG5cbiAgLy8gQWRkIGRhdGEgY29kZXdvcmRzXG4gIGZvciAoaSA9IDA7IGkgPCBtYXhEYXRhU2l6ZTsgaSsrKSB7XG4gICAgZm9yIChyID0gMDsgciA8IGVjVG90YWxCbG9ja3M7IHIrKykge1xuICAgICAgaWYgKGkgPCBkY0RhdGFbcl0ubGVuZ3RoKSB7XG4gICAgICAgIGRhdGFbaW5kZXgrK10gPSBkY0RhdGFbcl1baV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBcHBlZCBFQyBjb2Rld29yZHNcbiAgZm9yIChpID0gMDsgaSA8IGVjQ291bnQ7IGkrKykge1xuICAgIGZvciAociA9IDA7IHIgPCBlY1RvdGFsQmxvY2tzOyByKyspIHtcbiAgICAgIGRhdGFbaW5kZXgrK10gPSBlY0RhdGFbcl1baV1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG4vKipcbiAqIEJ1aWxkIFFSIENvZGUgc3ltYm9sXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBkYXRhICAgICAgICAgICAgICAgICBJbnB1dCBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcGFyYW0gIHtFcnJvckNvcnJldGlvbkxldmVsfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBsZXZlbFxuICogQHBhcmFtICB7TWFza1BhdHRlcm59IG1hc2tQYXR0ZXJuICAgICBNYXNrIHBhdHRlcm5cbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgc3ltYm9sIGRhdGFcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3ltYm9sIChkYXRhLCB2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFza1BhdHRlcm4pIHtcbiAgdmFyIHNlZ21lbnRzXG5cbiAgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICBzZWdtZW50cyA9IFNlZ21lbnRzLmZyb21BcnJheShkYXRhKVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIHZhciBlc3RpbWF0ZWRWZXJzaW9uID0gdmVyc2lvblxuXG4gICAgaWYgKCFlc3RpbWF0ZWRWZXJzaW9uKSB7XG4gICAgICB2YXIgcmF3U2VnbWVudHMgPSBTZWdtZW50cy5yYXdTcGxpdChkYXRhKVxuXG4gICAgICAvLyBFc3RpbWF0ZSBiZXN0IHZlcnNpb24gdGhhdCBjYW4gY29udGFpbiByYXcgc3BsaXR0ZWQgc2VnbWVudHNcbiAgICAgIGVzdGltYXRlZFZlcnNpb24gPSBWZXJzaW9uLmdldEJlc3RWZXJzaW9uRm9yRGF0YShyYXdTZWdtZW50cyxcbiAgICAgICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG4gICAgfVxuXG4gICAgLy8gQnVpbGQgb3B0aW1pemVkIHNlZ21lbnRzXG4gICAgLy8gSWYgZXN0aW1hdGVkIHZlcnNpb24gaXMgdW5kZWZpbmVkLCB0cnkgd2l0aCB0aGUgaGlnaGVzdCB2ZXJzaW9uXG4gICAgc2VnbWVudHMgPSBTZWdtZW50cy5mcm9tU3RyaW5nKGRhdGEsIGVzdGltYXRlZFZlcnNpb24gfHwgNDApXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRhdGEnKVxuICB9XG5cbiAgLy8gR2V0IHRoZSBtaW4gdmVyc2lvbiB0aGF0IGNhbiBjb250YWluIGRhdGFcbiAgdmFyIGJlc3RWZXJzaW9uID0gVmVyc2lvbi5nZXRCZXN0VmVyc2lvbkZvckRhdGEoc2VnbWVudHMsXG4gICAgICBlcnJvckNvcnJlY3Rpb25MZXZlbClcblxuICAvLyBJZiBubyB2ZXJzaW9uIGlzIGZvdW5kLCBkYXRhIGNhbm5vdCBiZSBzdG9yZWRcbiAgaWYgKCFiZXN0VmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGFtb3VudCBvZiBkYXRhIGlzIHRvbyBiaWcgdG8gYmUgc3RvcmVkIGluIGEgUVIgQ29kZScpXG4gIH1cblxuICAvLyBJZiBub3Qgc3BlY2lmaWVkLCB1c2UgbWluIHZlcnNpb24gYXMgZGVmYXVsdFxuICBpZiAoIXZlcnNpb24pIHtcbiAgICB2ZXJzaW9uID0gYmVzdFZlcnNpb25cblxuICAvLyBDaGVjayBpZiB0aGUgc3BlY2lmaWVkIHZlcnNpb24gY2FuIGNvbnRhaW4gdGhlIGRhdGFcbiAgfSBlbHNlIGlmICh2ZXJzaW9uIDwgYmVzdFZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcbicgK1xuICAgICAgJ1RoZSBjaG9zZW4gUVIgQ29kZSB2ZXJzaW9uIGNhbm5vdCBjb250YWluIHRoaXMgYW1vdW50IG9mIGRhdGEuXFxuJyArXG4gICAgICAnTWluaW11bSB2ZXJzaW9uIHJlcXVpcmVkIHRvIHN0b3JlIGN1cnJlbnQgZGF0YSBpczogJyArIGJlc3RWZXJzaW9uICsgJy5cXG4nXG4gICAgKVxuICB9XG5cbiAgdmFyIGRhdGFCaXRzID0gY3JlYXRlRGF0YSh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgc2VnbWVudHMpXG5cbiAgLy8gQWxsb2NhdGUgbWF0cml4IGJ1ZmZlclxuICB2YXIgbW9kdWxlQ291bnQgPSBVdGlscy5nZXRTeW1ib2xTaXplKHZlcnNpb24pXG4gIHZhciBtb2R1bGVzID0gbmV3IEJpdE1hdHJpeChtb2R1bGVDb3VudClcblxuICAvLyBBZGQgZnVuY3Rpb24gbW9kdWxlc1xuICBzZXR1cEZpbmRlclBhdHRlcm4obW9kdWxlcywgdmVyc2lvbilcbiAgc2V0dXBUaW1pbmdQYXR0ZXJuKG1vZHVsZXMpXG4gIHNldHVwQWxpZ25tZW50UGF0dGVybihtb2R1bGVzLCB2ZXJzaW9uKVxuXG4gIC8vIEFkZCB0ZW1wb3JhcnkgZHVtbXkgYml0cyBmb3IgZm9ybWF0IGluZm8ganVzdCB0byBzZXQgdGhlbSBhcyByZXNlcnZlZC5cbiAgLy8gVGhpcyBpcyBuZWVkZWQgdG8gcHJldmVudCB0aGVzZSBiaXRzIGZyb20gYmVpbmcgbWFza2VkIGJ5IHtAbGluayBNYXNrUGF0dGVybi5hcHBseU1hc2t9XG4gIC8vIHNpbmNlIHRoZSBtYXNraW5nIG9wZXJhdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBvbmx5IG9uIHRoZSBlbmNvZGluZyByZWdpb24uXG4gIC8vIFRoZXNlIGJsb2NrcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggY29ycmVjdCB2YWx1ZXMgbGF0ZXIgaW4gY29kZS5cbiAgc2V0dXBGb3JtYXRJbmZvKG1vZHVsZXMsIGVycm9yQ29ycmVjdGlvbkxldmVsLCAwKVxuXG4gIGlmICh2ZXJzaW9uID49IDcpIHtcbiAgICBzZXR1cFZlcnNpb25JbmZvKG1vZHVsZXMsIHZlcnNpb24pXG4gIH1cblxuICAvLyBBZGQgZGF0YSBjb2Rld29yZHNcbiAgc2V0dXBEYXRhKG1vZHVsZXMsIGRhdGFCaXRzKVxuXG4gIGlmIChpc05hTihtYXNrUGF0dGVybikpIHtcbiAgICAvLyBGaW5kIGJlc3QgbWFzayBwYXR0ZXJuXG4gICAgbWFza1BhdHRlcm4gPSBNYXNrUGF0dGVybi5nZXRCZXN0TWFzayhtb2R1bGVzLFxuICAgICAgc2V0dXBGb3JtYXRJbmZvLmJpbmQobnVsbCwgbW9kdWxlcywgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpKVxuICB9XG5cbiAgLy8gQXBwbHkgbWFzayBwYXR0ZXJuXG4gIE1hc2tQYXR0ZXJuLmFwcGx5TWFzayhtYXNrUGF0dGVybiwgbW9kdWxlcylcblxuICAvLyBSZXBsYWNlIGZvcm1hdCBpbmZvIGJpdHMgd2l0aCBjb3JyZWN0IHZhbHVlc1xuICBzZXR1cEZvcm1hdEluZm8obW9kdWxlcywgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2tQYXR0ZXJuKVxuXG4gIHJldHVybiB7XG4gICAgbW9kdWxlczogbW9kdWxlcyxcbiAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgIGVycm9yQ29ycmVjdGlvbkxldmVsOiBlcnJvckNvcnJlY3Rpb25MZXZlbCxcbiAgICBtYXNrUGF0dGVybjogbWFza1BhdHRlcm4sXG4gICAgc2VnbWVudHM6IHNlZ21lbnRzXG4gIH1cbn1cblxuLyoqXG4gKiBRUiBDb2RlXG4gKlxuICogQHBhcmFtIHtTdHJpbmcgfCBBcnJheX0gZGF0YSAgICAgICAgICAgICAgICAgSW5wdXQgZGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgICAgICAgICAgICAgICAgICAgICAgT3B0aW9uYWwgY29uZmlndXJhdGlvbnNcbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnZlcnNpb24gICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvblxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy50b1NKSVNGdW5jICAgICAgICAgSGVscGVyIGZ1bmMgdG8gY29udmVydCB1dGY4IHRvIHNqaXNcbiAqL1xuZXhwb3J0cy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUgKGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyB8fCBkYXRhID09PSAnJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gaW5wdXQgdGV4dCcpXG4gIH1cblxuICB2YXIgZXJyb3JDb3JyZWN0aW9uTGV2ZWwgPSBFQ0xldmVsLk1cbiAgdmFyIHZlcnNpb25cbiAgdmFyIG1hc2tcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gVXNlIGhpZ2hlciBlcnJvciBjb3JyZWN0aW9uIGxldmVsIGFzIGRlZmF1bHRcbiAgICBlcnJvckNvcnJlY3Rpb25MZXZlbCA9IEVDTGV2ZWwuZnJvbShvcHRpb25zLmVycm9yQ29ycmVjdGlvbkxldmVsLCBFQ0xldmVsLk0pXG4gICAgdmVyc2lvbiA9IFZlcnNpb24uZnJvbShvcHRpb25zLnZlcnNpb24pXG4gICAgbWFzayA9IE1hc2tQYXR0ZXJuLmZyb20ob3B0aW9ucy5tYXNrUGF0dGVybilcblxuICAgIGlmIChvcHRpb25zLnRvU0pJU0Z1bmMpIHtcbiAgICAgIFV0aWxzLnNldFRvU0pJU0Z1bmN0aW9uKG9wdGlvbnMudG9TSklTRnVuYylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3JlYXRlU3ltYm9sKGRhdGEsIHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrKVxufVxuIiwidmFyIEJ1ZmZlclV0aWwgPSByZXF1aXJlKCcuLi91dGlscy9idWZmZXInKVxudmFyIFBvbHlub21pYWwgPSByZXF1aXJlKCcuL3BvbHlub21pYWwnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBSZWVkU29sb21vbkVuY29kZXIgKGRlZ3JlZSkge1xuICB0aGlzLmdlblBvbHkgPSB1bmRlZmluZWRcbiAgdGhpcy5kZWdyZWUgPSBkZWdyZWVcblxuICBpZiAodGhpcy5kZWdyZWUpIHRoaXMuaW5pdGlhbGl6ZSh0aGlzLmRlZ3JlZSlcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBlbmNvZGVyLlxuICogVGhlIGlucHV0IHBhcmFtIHNob3VsZCBjb3JyZXNwb25kIHRvIHRoZSBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHMuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkZWdyZWVcbiAqL1xuUmVlZFNvbG9tb25FbmNvZGVyLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gaW5pdGlhbGl6ZSAoZGVncmVlKSB7XG4gIC8vIGNyZWF0ZSBhbiBpcnJlZHVjaWJsZSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICB0aGlzLmRlZ3JlZSA9IGRlZ3JlZVxuICB0aGlzLmdlblBvbHkgPSBQb2x5bm9taWFsLmdlbmVyYXRlRUNQb2x5bm9taWFsKHRoaXMuZGVncmVlKVxufVxuXG4vKipcbiAqIEVuY29kZXMgYSBjaHVuayBvZiBkYXRhXG4gKlxuICogQHBhcmFtICB7QnVmZmVyfSBkYXRhIEJ1ZmZlciBjb250YWluaW5nIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn0gICAgICBCdWZmZXIgY29udGFpbmluZyBlbmNvZGVkIGRhdGFcbiAqL1xuUmVlZFNvbG9tb25FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUgKGRhdGEpIHtcbiAgaWYgKCF0aGlzLmdlblBvbHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuY29kZXIgbm90IGluaXRpYWxpemVkJylcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBFQyBmb3IgdGhpcyBkYXRhIGJsb2NrXG4gIC8vIGV4dGVuZHMgZGF0YSBzaXplIHRvIGRhdGErZ2VuUG9seSBzaXplXG4gIHZhciBwYWQgPSBCdWZmZXJVdGlsLmFsbG9jKHRoaXMuZGVncmVlKVxuICB2YXIgcGFkZGVkRGF0YSA9IEJ1ZmZlci5jb25jYXQoW2RhdGEsIHBhZF0sIGRhdGEubGVuZ3RoICsgdGhpcy5kZWdyZWUpXG5cbiAgLy8gVGhlIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzIGFyZSB0aGUgcmVtYWluZGVyIGFmdGVyIGRpdmlkaW5nIHRoZSBkYXRhIGNvZGV3b3Jkc1xuICAvLyBieSBhIGdlbmVyYXRvciBwb2x5bm9taWFsXG4gIHZhciByZW1haW5kZXIgPSBQb2x5bm9taWFsLm1vZChwYWRkZWREYXRhLCB0aGlzLmdlblBvbHkpXG5cbiAgLy8gcmV0dXJuIEVDIGRhdGEgYmxvY2tzIChsYXN0IG4gYnl0ZSwgd2hlcmUgbiBpcyB0aGUgZGVncmVlIG9mIGdlblBvbHkpXG4gIC8vIElmIGNvZWZmaWNpZW50cyBudW1iZXIgaW4gcmVtYWluZGVyIGFyZSBsZXNzIHRoYW4gZ2VuUG9seSBkZWdyZWUsXG4gIC8vIHBhZCB3aXRoIDBzIHRvIHRoZSBsZWZ0IHRvIHJlYWNoIHRoZSBuZWVkZWQgbnVtYmVyIG9mIGNvZWZmaWNpZW50c1xuICB2YXIgc3RhcnQgPSB0aGlzLmRlZ3JlZSAtIHJlbWFpbmRlci5sZW5ndGhcbiAgaWYgKHN0YXJ0ID4gMCkge1xuICAgIHZhciBidWZmID0gQnVmZmVyVXRpbC5hbGxvYyh0aGlzLmRlZ3JlZSlcbiAgICByZW1haW5kZXIuY29weShidWZmLCBzdGFydClcblxuICAgIHJldHVybiBidWZmXG4gIH1cblxuICByZXR1cm4gcmVtYWluZGVyXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVlZFNvbG9tb25FbmNvZGVyXG4iLCJ2YXIgbnVtZXJpYyA9ICdbMC05XSsnXG52YXIgYWxwaGFudW1lcmljID0gJ1tBLVogJCUqK1xcXFwtLi86XSsnXG52YXIga2FuamkgPSAnKD86W3UzMDAwLXUzMDNGXXxbdTMwNDAtdTMwOUZdfFt1MzBBMC11MzBGRl18JyArXG4gICdbdUZGMDAtdUZGRUZdfFt1NEUwMC11OUZBRl18W3UyNjA1LXUyNjA2XXxbdTIxOTAtdTIxOTVdfHUyMDNCfCcgK1xuICAnW3UyMDEwdTIwMTV1MjAxOHUyMDE5dTIwMjV1MjAyNnUyMDFDdTIwMUR1MjIyNXUyMjYwXXwnICtcbiAgJ1t1MDM5MS11MDQ1MV18W3UwMEE3dTAwQTh1MDBCMXUwMEI0dTAwRDd1MDBGN10pKydcbmthbmppID0ga2FuamkucmVwbGFjZSgvdS9nLCAnXFxcXHUnKVxuXG52YXIgYnl0ZSA9ICcoPzooPyFbQS1aMC05ICQlKitcXFxcLS4vOl18JyArIGthbmppICsgJykoPzoufFtcXHJcXG5dKSkrJ1xuXG5leHBvcnRzLktBTkpJID0gbmV3IFJlZ0V4cChrYW5qaSwgJ2cnKVxuZXhwb3J0cy5CWVRFX0tBTkpJID0gbmV3IFJlZ0V4cCgnW15BLVowLTkgJCUqK1xcXFwtLi86XSsnLCAnZycpXG5leHBvcnRzLkJZVEUgPSBuZXcgUmVnRXhwKGJ5dGUsICdnJylcbmV4cG9ydHMuTlVNRVJJQyA9IG5ldyBSZWdFeHAobnVtZXJpYywgJ2cnKVxuZXhwb3J0cy5BTFBIQU5VTUVSSUMgPSBuZXcgUmVnRXhwKGFscGhhbnVtZXJpYywgJ2cnKVxuXG52YXIgVEVTVF9LQU5KSSA9IG5ldyBSZWdFeHAoJ14nICsga2FuamkgKyAnJCcpXG52YXIgVEVTVF9OVU1FUklDID0gbmV3IFJlZ0V4cCgnXicgKyBudW1lcmljICsgJyQnKVxudmFyIFRFU1RfQUxQSEFOVU1FUklDID0gbmV3IFJlZ0V4cCgnXltBLVowLTkgJCUqK1xcXFwtLi86XSskJylcblxuZXhwb3J0cy50ZXN0S2FuamkgPSBmdW5jdGlvbiB0ZXN0S2FuamkgKHN0cikge1xuICByZXR1cm4gVEVTVF9LQU5KSS50ZXN0KHN0cilcbn1cblxuZXhwb3J0cy50ZXN0TnVtZXJpYyA9IGZ1bmN0aW9uIHRlc3ROdW1lcmljIChzdHIpIHtcbiAgcmV0dXJuIFRFU1RfTlVNRVJJQy50ZXN0KHN0cilcbn1cblxuZXhwb3J0cy50ZXN0QWxwaGFudW1lcmljID0gZnVuY3Rpb24gdGVzdEFscGhhbnVtZXJpYyAoc3RyKSB7XG4gIHJldHVybiBURVNUX0FMUEhBTlVNRVJJQy50ZXN0KHN0cilcbn1cbiIsInZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcbnZhciBOdW1lcmljRGF0YSA9IHJlcXVpcmUoJy4vbnVtZXJpYy1kYXRhJylcbnZhciBBbHBoYW51bWVyaWNEYXRhID0gcmVxdWlyZSgnLi9hbHBoYW51bWVyaWMtZGF0YScpXG52YXIgQnl0ZURhdGEgPSByZXF1aXJlKCcuL2J5dGUtZGF0YScpXG52YXIgS2FuamlEYXRhID0gcmVxdWlyZSgnLi9rYW5qaS1kYXRhJylcbnZhciBSZWdleCA9IHJlcXVpcmUoJy4vcmVnZXgnKVxudmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG52YXIgZGlqa3N0cmEgPSByZXF1aXJlKCdkaWprc3RyYWpzJylcblxuLyoqXG4gKiBSZXR1cm5zIFVURjggYnl0ZSBsZW5ndGhcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0ciBJbnB1dCBzdHJpbmdcbiAqIEByZXR1cm4ge051bWJlcn0gICAgIE51bWJlciBvZiBieXRlXG4gKi9cbmZ1bmN0aW9uIGdldFN0cmluZ0J5dGVMZW5ndGggKHN0cikge1xuICByZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpLmxlbmd0aFxufVxuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2Ygc2VnbWVudHMgb2YgdGhlIHNwZWNpZmllZCBtb2RlXG4gKiBmcm9tIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtICB7TW9kZX0gICBtb2RlIFNlZ21lbnQgbW9kZVxuICogQHBhcmFtICB7U3RyaW5nfSBzdHIgIFN0cmluZyB0byBwcm9jZXNzXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBnZXRTZWdtZW50cyAocmVnZXgsIG1vZGUsIHN0cikge1xuICB2YXIgc2VnbWVudHMgPSBbXVxuICB2YXIgcmVzdWx0XG5cbiAgd2hpbGUgKChyZXN1bHQgPSByZWdleC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgc2VnbWVudHMucHVzaCh7XG4gICAgICBkYXRhOiByZXN1bHRbMF0sXG4gICAgICBpbmRleDogcmVzdWx0LmluZGV4LFxuICAgICAgbW9kZTogbW9kZSxcbiAgICAgIGxlbmd0aDogcmVzdWx0WzBdLmxlbmd0aFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gc2VnbWVudHNcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyBhIHNlcmllcyBvZiBzZWdtZW50cyB3aXRoIHRoZSBhcHByb3ByaWF0ZVxuICogbW9kZXMgZnJvbSBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YVN0ciBJbnB1dCBzdHJpbmdcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKi9cbmZ1bmN0aW9uIGdldFNlZ21lbnRzRnJvbVN0cmluZyAoZGF0YVN0cikge1xuICB2YXIgbnVtU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4Lk5VTUVSSUMsIE1vZGUuTlVNRVJJQywgZGF0YVN0cilcbiAgdmFyIGFscGhhTnVtU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4LkFMUEhBTlVNRVJJQywgTW9kZS5BTFBIQU5VTUVSSUMsIGRhdGFTdHIpXG4gIHZhciBieXRlU2Vnc1xuICB2YXIga2FuamlTZWdzXG5cbiAgaWYgKFV0aWxzLmlzS2FuamlNb2RlRW5hYmxlZCgpKSB7XG4gICAgYnl0ZVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5CWVRFLCBNb2RlLkJZVEUsIGRhdGFTdHIpXG4gICAga2FuamlTZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguS0FOSkksIE1vZGUuS0FOSkksIGRhdGFTdHIpXG4gIH0gZWxzZSB7XG4gICAgYnl0ZVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5CWVRFX0tBTkpJLCBNb2RlLkJZVEUsIGRhdGFTdHIpXG4gICAga2FuamlTZWdzID0gW11cbiAgfVxuXG4gIHZhciBzZWdzID0gbnVtU2Vncy5jb25jYXQoYWxwaGFOdW1TZWdzLCBieXRlU2Vncywga2FuamlTZWdzKVxuXG4gIHJldHVybiBzZWdzXG4gICAgLnNvcnQoZnVuY3Rpb24gKHMxLCBzMikge1xuICAgICAgcmV0dXJuIHMxLmluZGV4IC0gczIuaW5kZXhcbiAgICB9KVxuICAgIC5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogb2JqLmRhdGEsXG4gICAgICAgIG1vZGU6IG9iai5tb2RlLFxuICAgICAgICBsZW5ndGg6IG9iai5sZW5ndGhcbiAgICAgIH1cbiAgICB9KVxufVxuXG4vKipcbiAqIFJldHVybnMgaG93IG1hbnkgYml0cyBhcmUgbmVlZGVkIHRvIGVuY29kZSBhIHN0cmluZyBvZlxuICogc3BlY2lmaWVkIGxlbmd0aCB3aXRoIHRoZSBzcGVjaWZpZWQgbW9kZVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gbGVuZ3RoIFN0cmluZyBsZW5ndGhcbiAqIEBwYXJhbSAge01vZGV9IG1vZGUgICAgIFNlZ21lbnQgbW9kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgQml0IGxlbmd0aFxuICovXG5mdW5jdGlvbiBnZXRTZWdtZW50Qml0c0xlbmd0aCAobGVuZ3RoLCBtb2RlKSB7XG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgTW9kZS5OVU1FUklDOlxuICAgICAgcmV0dXJuIE51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgobGVuZ3RoKVxuICAgIGNhc2UgTW9kZS5BTFBIQU5VTUVSSUM6XG4gICAgICByZXR1cm4gQWxwaGFudW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgICBjYXNlIE1vZGUuS0FOSkk6XG4gICAgICByZXR1cm4gS2FuamlEYXRhLmdldEJpdHNMZW5ndGgobGVuZ3RoKVxuICAgIGNhc2UgTW9kZS5CWVRFOlxuICAgICAgcmV0dXJuIEJ5dGVEYXRhLmdldEJpdHNMZW5ndGgobGVuZ3RoKVxuICB9XG59XG5cbi8qKlxuICogTWVyZ2VzIGFkamFjZW50IHNlZ21lbnRzIHdoaWNoIGhhdmUgdGhlIHNhbWUgbW9kZVxuICpcbiAqIEBwYXJhbSAge0FycmF5fSBzZWdzIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VTZWdtZW50cyAoc2Vncykge1xuICByZXR1cm4gc2Vncy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgIHZhciBwcmV2U2VnID0gYWNjLmxlbmd0aCAtIDEgPj0gMCA/IGFjY1thY2MubGVuZ3RoIC0gMV0gOiBudWxsXG4gICAgaWYgKHByZXZTZWcgJiYgcHJldlNlZy5tb2RlID09PSBjdXJyLm1vZGUpIHtcbiAgICAgIGFjY1thY2MubGVuZ3RoIC0gMV0uZGF0YSArPSBjdXJyLmRhdGFcbiAgICAgIHJldHVybiBhY2NcbiAgICB9XG5cbiAgICBhY2MucHVzaChjdXJyKVxuICAgIHJldHVybiBhY2NcbiAgfSwgW10pXG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgbGlzdCBvZiBhbGwgcG9zc2libGUgbm9kZXMgY29tYmluYXRpb24gd2hpY2hcbiAqIHdpbGwgYmUgdXNlZCB0byBidWlsZCBhIHNlZ21lbnRzIGdyYXBoLlxuICpcbiAqIE5vZGVzIGFyZSBkaXZpZGVkIGJ5IGdyb3Vwcy4gRWFjaCBncm91cCB3aWxsIGNvbnRhaW4gYSBsaXN0IG9mIGFsbCB0aGUgbW9kZXNcbiAqIGluIHdoaWNoIGlzIHBvc3NpYmxlIHRvIGVuY29kZSB0aGUgZ2l2ZW4gdGV4dC5cbiAqXG4gKiBGb3IgZXhhbXBsZSB0aGUgdGV4dCAnMTIzNDUnIGNhbiBiZSBlbmNvZGVkIGFzIE51bWVyaWMsIEFscGhhbnVtZXJpYyBvciBCeXRlLlxuICogVGhlIGdyb3VwIGZvciAnMTIzNDUnIHdpbGwgY29udGFpbiB0aGVuIDMgb2JqZWN0cywgb25lIGZvciBlYWNoXG4gKiBwb3NzaWJsZSBlbmNvZGluZyBtb2RlLlxuICpcbiAqIEVhY2ggbm9kZSByZXByZXNlbnRzIGEgcG9zc2libGUgc2VnbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gc2VncyBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTm9kZXMgKHNlZ3MpIHtcbiAgdmFyIG5vZGVzID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZyA9IHNlZ3NbaV1cblxuICAgIHN3aXRjaCAoc2VnLm1vZGUpIHtcbiAgICAgIGNhc2UgTW9kZS5OVU1FUklDOlxuICAgICAgICBub2Rlcy5wdXNoKFtzZWcsXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5BTFBIQU5VTUVSSUMsIGxlbmd0aDogc2VnLmxlbmd0aCB9LFxuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQllURSwgbGVuZ3RoOiBzZWcubGVuZ3RoIH1cbiAgICAgICAgXSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgTW9kZS5BTFBIQU5VTUVSSUM6XG4gICAgICAgIG5vZGVzLnB1c2goW3NlZyxcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogc2VnLmxlbmd0aCB9XG4gICAgICAgIF0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE1vZGUuS0FOSkk6XG4gICAgICAgIG5vZGVzLnB1c2goW3NlZyxcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogZ2V0U3RyaW5nQnl0ZUxlbmd0aChzZWcuZGF0YSkgfVxuICAgICAgICBdKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBNb2RlLkJZVEU6XG4gICAgICAgIG5vZGVzLnB1c2goW1xuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQllURSwgbGVuZ3RoOiBnZXRTdHJpbmdCeXRlTGVuZ3RoKHNlZy5kYXRhKSB9XG4gICAgICAgIF0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5vZGVzXG59XG5cbi8qKlxuICogQnVpbGRzIGEgZ3JhcGggZnJvbSBhIGxpc3Qgb2Ygbm9kZXMuXG4gKiBBbGwgc2VnbWVudHMgaW4gZWFjaCBub2RlIGdyb3VwIHdpbGwgYmUgY29ubmVjdGVkIHdpdGggYWxsIHRoZSBzZWdtZW50cyBvZlxuICogdGhlIG5leHQgZ3JvdXAgYW5kIHNvIG9uLlxuICpcbiAqIEF0IGVhY2ggY29ubmVjdGlvbiB3aWxsIGJlIGFzc2lnbmVkIGEgd2VpZ2h0IGRlcGVuZGluZyBvbiB0aGVcbiAqIHNlZ21lbnQncyBieXRlIGxlbmd0aC5cbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gbm9kZXMgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgIEdyYXBoIG9mIGFsbCBwb3NzaWJsZSBzZWdtZW50c1xuICovXG5mdW5jdGlvbiBidWlsZEdyYXBoIChub2RlcywgdmVyc2lvbikge1xuICB2YXIgdGFibGUgPSB7fVxuICB2YXIgZ3JhcGggPSB7J3N0YXJ0Jzoge319XG4gIHZhciBwcmV2Tm9kZUlkcyA9IFsnc3RhcnQnXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZUdyb3VwID0gbm9kZXNbaV1cbiAgICB2YXIgY3VycmVudE5vZGVJZHMgPSBbXVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBub2RlR3JvdXAubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBub2RlID0gbm9kZUdyb3VwW2pdXG4gICAgICB2YXIga2V5ID0gJycgKyBpICsgalxuXG4gICAgICBjdXJyZW50Tm9kZUlkcy5wdXNoKGtleSlcbiAgICAgIHRhYmxlW2tleV0gPSB7IG5vZGU6IG5vZGUsIGxhc3RDb3VudDogMCB9XG4gICAgICBncmFwaFtrZXldID0ge31cblxuICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBwcmV2Tm9kZUlkcy5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgcHJldk5vZGVJZCA9IHByZXZOb2RlSWRzW25dXG5cbiAgICAgICAgaWYgKHRhYmxlW3ByZXZOb2RlSWRdICYmIHRhYmxlW3ByZXZOb2RlSWRdLm5vZGUubW9kZSA9PT0gbm9kZS5tb2RlKSB7XG4gICAgICAgICAgZ3JhcGhbcHJldk5vZGVJZF1ba2V5XSA9XG4gICAgICAgICAgICBnZXRTZWdtZW50Qml0c0xlbmd0aCh0YWJsZVtwcmV2Tm9kZUlkXS5sYXN0Q291bnQgKyBub2RlLmxlbmd0aCwgbm9kZS5tb2RlKSAtXG4gICAgICAgICAgICBnZXRTZWdtZW50Qml0c0xlbmd0aCh0YWJsZVtwcmV2Tm9kZUlkXS5sYXN0Q291bnQsIG5vZGUubW9kZSlcblxuICAgICAgICAgIHRhYmxlW3ByZXZOb2RlSWRdLmxhc3RDb3VudCArPSBub2RlLmxlbmd0aFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0YWJsZVtwcmV2Tm9kZUlkXSkgdGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50ID0gbm9kZS5sZW5ndGhcblxuICAgICAgICAgIGdyYXBoW3ByZXZOb2RlSWRdW2tleV0gPSBnZXRTZWdtZW50Qml0c0xlbmd0aChub2RlLmxlbmd0aCwgbm9kZS5tb2RlKSArXG4gICAgICAgICAgICA0ICsgTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3Iobm9kZS5tb2RlLCB2ZXJzaW9uKSAvLyBzd2l0Y2ggY29zdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJldk5vZGVJZHMgPSBjdXJyZW50Tm9kZUlkc1xuICB9XG5cbiAgZm9yIChuID0gMDsgbiA8IHByZXZOb2RlSWRzLmxlbmd0aDsgbisrKSB7XG4gICAgZ3JhcGhbcHJldk5vZGVJZHNbbl1dWydlbmQnXSA9IDBcbiAgfVxuXG4gIHJldHVybiB7IG1hcDogZ3JhcGgsIHRhYmxlOiB0YWJsZSB9XG59XG5cbi8qKlxuICogQnVpbGRzIGEgc2VnbWVudCBmcm9tIGEgc3BlY2lmaWVkIGRhdGEgYW5kIG1vZGUuXG4gKiBJZiBhIG1vZGUgaXMgbm90IHNwZWNpZmllZCwgdGhlIG1vcmUgc3VpdGFibGUgd2lsbCBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YSAgICAgICAgICAgICBJbnB1dCBkYXRhXG4gKiBAcGFyYW0gIHtNb2RlIHwgU3RyaW5nfSBtb2Rlc0hpbnQgRGF0YSBtb2RlXG4gKiBAcmV0dXJuIHtTZWdtZW50fSAgICAgICAgICAgICAgICAgU2VnbWVudFxuICovXG5mdW5jdGlvbiBidWlsZFNpbmdsZVNlZ21lbnQgKGRhdGEsIG1vZGVzSGludCkge1xuICB2YXIgbW9kZVxuICB2YXIgYmVzdE1vZGUgPSBNb2RlLmdldEJlc3RNb2RlRm9yRGF0YShkYXRhKVxuXG4gIG1vZGUgPSBNb2RlLmZyb20obW9kZXNIaW50LCBiZXN0TW9kZSlcblxuICAvLyBNYWtlIHN1cmUgZGF0YSBjYW4gYmUgZW5jb2RlZFxuICBpZiAobW9kZSAhPT0gTW9kZS5CWVRFICYmIG1vZGUuYml0IDwgYmVzdE1vZGUuYml0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBkYXRhICsgJ1wiJyArXG4gICAgICAnIGNhbm5vdCBiZSBlbmNvZGVkIHdpdGggbW9kZSAnICsgTW9kZS50b1N0cmluZyhtb2RlKSArXG4gICAgICAnLlxcbiBTdWdnZXN0ZWQgbW9kZSBpczogJyArIE1vZGUudG9TdHJpbmcoYmVzdE1vZGUpKVxuICB9XG5cbiAgLy8gVXNlIE1vZGUuQllURSBpZiBLYW5qaSBzdXBwb3J0IGlzIGRpc2FibGVkXG4gIGlmIChtb2RlID09PSBNb2RlLktBTkpJICYmICFVdGlscy5pc0thbmppTW9kZUVuYWJsZWQoKSkge1xuICAgIG1vZGUgPSBNb2RlLkJZVEVcbiAgfVxuXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgTW9kZS5OVU1FUklDOlxuICAgICAgcmV0dXJuIG5ldyBOdW1lcmljRGF0YShkYXRhKVxuXG4gICAgY2FzZSBNb2RlLkFMUEhBTlVNRVJJQzpcbiAgICAgIHJldHVybiBuZXcgQWxwaGFudW1lcmljRGF0YShkYXRhKVxuXG4gICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgcmV0dXJuIG5ldyBLYW5qaURhdGEoZGF0YSlcblxuICAgIGNhc2UgTW9kZS5CWVRFOlxuICAgICAgcmV0dXJuIG5ldyBCeXRlRGF0YShkYXRhKVxuICB9XG59XG5cbi8qKlxuICogQnVpbGRzIGEgbGlzdCBvZiBzZWdtZW50cyBmcm9tIGFuIGFycmF5LlxuICogQXJyYXkgY2FuIGNvbnRhaW4gU3RyaW5ncyBvciBPYmplY3RzIHdpdGggc2VnbWVudCdzIGluZm8uXG4gKlxuICogRm9yIGVhY2ggaXRlbSB3aGljaCBpcyBhIHN0cmluZywgd2lsbCBiZSBnZW5lcmF0ZWQgYSBzZWdtZW50IHdpdGggdGhlIGdpdmVuXG4gKiBzdHJpbmcgYW5kIHRoZSBtb3JlIGFwcHJvcHJpYXRlIGVuY29kaW5nIG1vZGUuXG4gKlxuICogRm9yIGVhY2ggaXRlbSB3aGljaCBpcyBhbiBvYmplY3QsIHdpbGwgYmUgZ2VuZXJhdGVkIGEgc2VnbWVudCB3aXRoIHRoZSBnaXZlblxuICogZGF0YSBhbmQgbW9kZS5cbiAqIE9iamVjdHMgbXVzdCBjb250YWluIGF0IGxlYXN0IHRoZSBwcm9wZXJ0eSBcImRhdGFcIi5cbiAqIElmIHByb3BlcnR5IFwibW9kZVwiIGlzIG5vdCBwcmVzZW50LCB0aGUgbW9yZSBzdWl0YWJsZSBtb2RlIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyYXkgQXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICBBcnJheSBvZiBTZWdtZW50c1xuICovXG5leHBvcnRzLmZyb21BcnJheSA9IGZ1bmN0aW9uIGZyb21BcnJheSAoYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzZWcpIHtcbiAgICBpZiAodHlwZW9mIHNlZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFjYy5wdXNoKGJ1aWxkU2luZ2xlU2VnbWVudChzZWcsIG51bGwpKVxuICAgIH0gZWxzZSBpZiAoc2VnLmRhdGEpIHtcbiAgICAgIGFjYy5wdXNoKGJ1aWxkU2luZ2xlU2VnbWVudChzZWcuZGF0YSwgc2VnLm1vZGUpKVxuICAgIH1cblxuICAgIHJldHVybiBhY2NcbiAgfSwgW10pXG59XG5cbi8qKlxuICogQnVpbGRzIGFuIG9wdGltaXplZCBzZXF1ZW5jZSBvZiBzZWdtZW50cyBmcm9tIGEgc3RyaW5nLFxuICogd2hpY2ggd2lsbCBwcm9kdWNlIHRoZSBzaG9ydGVzdCBwb3NzaWJsZSBiaXRzdHJlYW0uXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBkYXRhICAgIElucHV0IHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIHNlZ21lbnRzXG4gKi9cbmV4cG9ydHMuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIGZyb21TdHJpbmcgKGRhdGEsIHZlcnNpb24pIHtcbiAgdmFyIHNlZ3MgPSBnZXRTZWdtZW50c0Zyb21TdHJpbmcoZGF0YSwgVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpXG5cbiAgdmFyIG5vZGVzID0gYnVpbGROb2RlcyhzZWdzKVxuICB2YXIgZ3JhcGggPSBidWlsZEdyYXBoKG5vZGVzLCB2ZXJzaW9uKVxuICB2YXIgcGF0aCA9IGRpamtzdHJhLmZpbmRfcGF0aChncmFwaC5tYXAsICdzdGFydCcsICdlbmQnKVxuXG4gIHZhciBvcHRpbWl6ZWRTZWdzID0gW11cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBwYXRoLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIG9wdGltaXplZFNlZ3MucHVzaChncmFwaC50YWJsZVtwYXRoW2ldXS5ub2RlKVxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuZnJvbUFycmF5KG1lcmdlU2VnbWVudHMob3B0aW1pemVkU2VncykpXG59XG5cbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIGluIHZhcmlvdXMgc2VnbWVudHMgd2l0aCB0aGUgbW9kZXMgd2hpY2hcbiAqIGJlc3QgcmVwcmVzZW50IHRoZWlyIGNvbnRlbnQuXG4gKiBUaGUgcHJvZHVjZWQgc2VnbWVudHMgYXJlIGZhciBmcm9tIGJlaW5nIG9wdGltaXplZC5cbiAqIFRoZSBvdXRwdXQgb2YgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IHVzZWQgdG8gZXN0aW1hdGUgYSBRUiBDb2RlIHZlcnNpb25cbiAqIHdoaWNoIG1heSBjb250YWluIHRoZSBkYXRhLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZGF0YSBJbnB1dCBzdHJpbmdcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICBBcnJheSBvZiBzZWdtZW50c1xuICovXG5leHBvcnRzLnJhd1NwbGl0ID0gZnVuY3Rpb24gcmF3U3BsaXQgKGRhdGEpIHtcbiAgcmV0dXJuIGV4cG9ydHMuZnJvbUFycmF5KFxuICAgIGdldFNlZ21lbnRzRnJvbVN0cmluZyhkYXRhLCBVdGlscy5pc0thbmppTW9kZUVuYWJsZWQoKSlcbiAgKVxufVxuIiwidmFyIHRvU0pJU0Z1bmN0aW9uXG52YXIgQ09ERVdPUkRTX0NPVU5UID0gW1xuICAwLCAvLyBOb3QgdXNlZFxuICAyNiwgNDQsIDcwLCAxMDAsIDEzNCwgMTcyLCAxOTYsIDI0MiwgMjkyLCAzNDYsXG4gIDQwNCwgNDY2LCA1MzIsIDU4MSwgNjU1LCA3MzMsIDgxNSwgOTAxLCA5OTEsIDEwODUsXG4gIDExNTYsIDEyNTgsIDEzNjQsIDE0NzQsIDE1ODgsIDE3MDYsIDE4MjgsIDE5MjEsIDIwNTEsIDIxODUsXG4gIDIzMjMsIDI0NjUsIDI2MTEsIDI3NjEsIDI4NzYsIDMwMzQsIDMxOTYsIDMzNjIsIDM1MzIsIDM3MDZcbl1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBRUiBDb2RlIHNpemUgZm9yIHRoZSBzcGVjaWZpZWQgdmVyc2lvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBzaXplIG9mIFFSIGNvZGVcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xTaXplID0gZnVuY3Rpb24gZ2V0U3ltYm9sU2l6ZSAodmVyc2lvbikge1xuICBpZiAoIXZlcnNpb24pIHRocm93IG5ldyBFcnJvcignXCJ2ZXJzaW9uXCIgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJylcbiAgaWYgKHZlcnNpb24gPCAxIHx8IHZlcnNpb24gPiA0MCkgdGhyb3cgbmV3IEVycm9yKCdcInZlcnNpb25cIiBzaG91bGQgYmUgaW4gcmFuZ2UgZnJvbSAxIHRvIDQwJylcbiAgcmV0dXJuIHZlcnNpb24gKiA0ICsgMTdcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgY29kZXdvcmRzIHVzZWQgdG8gc3RvcmUgZGF0YSBhbmQgRUMgaW5mb3JtYXRpb24uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIERhdGEgbGVuZ3RoIGluIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xUb3RhbENvZGV3b3JkcyA9IGZ1bmN0aW9uIGdldFN5bWJvbFRvdGFsQ29kZXdvcmRzICh2ZXJzaW9uKSB7XG4gIHJldHVybiBDT0RFV09SRFNfQ09VTlRbdmVyc2lvbl1cbn1cblxuLyoqXG4gKiBFbmNvZGUgZGF0YSB3aXRoIEJvc2UtQ2hhdWRodXJpLUhvY3F1ZW5naGVtXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkYXRhIFZhbHVlIHRvIGVuY29kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIEVuY29kZWQgdmFsdWVcbiAqL1xuZXhwb3J0cy5nZXRCQ0hEaWdpdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBkaWdpdCA9IDBcblxuICB3aGlsZSAoZGF0YSAhPT0gMCkge1xuICAgIGRpZ2l0KytcbiAgICBkYXRhID4+Pj0gMVxuICB9XG5cbiAgcmV0dXJuIGRpZ2l0XG59XG5cbmV4cG9ydHMuc2V0VG9TSklTRnVuY3Rpb24gPSBmdW5jdGlvbiBzZXRUb1NKSVNGdW5jdGlvbiAoZikge1xuICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1widG9TSklTRnVuY1wiIGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uLicpXG4gIH1cblxuICB0b1NKSVNGdW5jdGlvbiA9IGZcbn1cblxuZXhwb3J0cy5pc0thbmppTW9kZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgdG9TSklTRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnXG59XG5cbmV4cG9ydHMudG9TSklTID0gZnVuY3Rpb24gdG9TSklTIChrYW5qaSkge1xuICByZXR1cm4gdG9TSklTRnVuY3Rpb24oa2FuamkpXG59XG4iLCIvKipcbiAqIENoZWNrIGlmIFFSIENvZGUgdmVyc2lvbiBpcyB2YWxpZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgIHRydWUgaWYgdmFsaWQgdmVyc2lvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKHZlcnNpb24pIHtcbiAgcmV0dXJuICFpc05hTih2ZXJzaW9uKSAmJiB2ZXJzaW9uID49IDEgJiYgdmVyc2lvbiA8PSA0MFxufVxuIiwidmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG52YXIgRUNDb2RlID0gcmVxdWlyZSgnLi9lcnJvci1jb3JyZWN0aW9uLWNvZGUnKVxudmFyIEVDTGV2ZWwgPSByZXF1aXJlKCcuL2Vycm9yLWNvcnJlY3Rpb24tbGV2ZWwnKVxudmFyIE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxudmFyIFZlcnNpb25DaGVjayA9IHJlcXVpcmUoJy4vdmVyc2lvbi1jaGVjaycpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vLyBHZW5lcmF0b3IgcG9seW5vbWlhbCB1c2VkIHRvIGVuY29kZSB2ZXJzaW9uIGluZm9ybWF0aW9uXG52YXIgRzE4ID0gKDEgPDwgMTIpIHwgKDEgPDwgMTEpIHwgKDEgPDwgMTApIHwgKDEgPDwgOSkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgMikgfCAoMSA8PCAwKVxudmFyIEcxOF9CQ0ggPSBVdGlscy5nZXRCQ0hEaWdpdChHMTgpXG5cbmZ1bmN0aW9uIGdldEJlc3RWZXJzaW9uRm9yRGF0YUxlbmd0aCAobW9kZSwgbGVuZ3RoLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xuICBmb3IgKHZhciBjdXJyZW50VmVyc2lvbiA9IDE7IGN1cnJlbnRWZXJzaW9uIDw9IDQwOyBjdXJyZW50VmVyc2lvbisrKSB7XG4gICAgaWYgKGxlbmd0aCA8PSBleHBvcnRzLmdldENhcGFjaXR5KGN1cnJlbnRWZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbW9kZSkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50VmVyc2lvblxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gZ2V0UmVzZXJ2ZWRCaXRzQ291bnQgKG1vZGUsIHZlcnNpb24pIHtcbiAgLy8gQ2hhcmFjdGVyIGNvdW50IGluZGljYXRvciArIG1vZGUgaW5kaWNhdG9yIGJpdHNcbiAgcmV0dXJuIE1vZGUuZ2V0Q2hhckNvdW50SW5kaWNhdG9yKG1vZGUsIHZlcnNpb24pICsgNFxufVxuXG5mdW5jdGlvbiBnZXRUb3RhbEJpdHNGcm9tRGF0YUFycmF5IChzZWdtZW50cywgdmVyc2lvbikge1xuICB2YXIgdG90YWxCaXRzID0gMFxuXG4gIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgcmVzZXJ2ZWRCaXRzID0gZ2V0UmVzZXJ2ZWRCaXRzQ291bnQoZGF0YS5tb2RlLCB2ZXJzaW9uKVxuICAgIHRvdGFsQml0cyArPSByZXNlcnZlZEJpdHMgKyBkYXRhLmdldEJpdHNMZW5ndGgoKVxuICB9KVxuXG4gIHJldHVybiB0b3RhbEJpdHNcbn1cblxuZnVuY3Rpb24gZ2V0QmVzdFZlcnNpb25Gb3JNaXhlZERhdGEgKHNlZ21lbnRzLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xuICBmb3IgKHZhciBjdXJyZW50VmVyc2lvbiA9IDE7IGN1cnJlbnRWZXJzaW9uIDw9IDQwOyBjdXJyZW50VmVyc2lvbisrKSB7XG4gICAgdmFyIGxlbmd0aCA9IGdldFRvdGFsQml0c0Zyb21EYXRhQXJyYXkoc2VnbWVudHMsIGN1cnJlbnRWZXJzaW9uKVxuICAgIGlmIChsZW5ndGggPD0gZXhwb3J0cy5nZXRDYXBhY2l0eShjdXJyZW50VmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIE1vZGUuTUlYRUQpKSB7XG4gICAgICByZXR1cm4gY3VycmVudFZlcnNpb25cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogUmV0dXJucyB2ZXJzaW9uIG51bWJlciBmcm9tIGEgdmFsdWUuXG4gKiBJZiB2YWx1ZSBpcyBub3QgYSB2YWxpZCB2ZXJzaW9uLCByZXR1cm5zIGRlZmF1bHRWYWx1ZVxuICpcbiAqIEBwYXJhbSAge051bWJlcnxTdHJpbmd9IHZhbHVlICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgIGRlZmF1bHRWYWx1ZSBGYWxsYmFjayB2YWx1ZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvbiBudW1iZXJcbiAqL1xuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoVmVyc2lvbkNoZWNrLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMClcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0VmFsdWVcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGhvdyBtdWNoIGRhdGEgY2FuIGJlIHN0b3JlZCB3aXRoIHRoZSBzcGVjaWZpZWQgUVIgY29kZSB2ZXJzaW9uXG4gKiBhbmQgZXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uICgxLTQwKVxuICogQHBhcmFtICB7TnVtYmVyfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtNb2RlfSAgIG1vZGUgICAgICAgICAgICAgICAgIERhdGEgbW9kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICBRdWFudGl0eSBvZiBzdG9yYWJsZSBkYXRhXG4gKi9cbmV4cG9ydHMuZ2V0Q2FwYWNpdHkgPSBmdW5jdGlvbiBnZXRDYXBhY2l0eSAodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1vZGUpIHtcbiAgaWYgKCFWZXJzaW9uQ2hlY2suaXNWYWxpZCh2ZXJzaW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBRUiBDb2RlIHZlcnNpb24nKVxuICB9XG5cbiAgLy8gVXNlIEJ5dGUgbW9kZSBhcyBkZWZhdWx0XG4gIGlmICh0eXBlb2YgbW9kZSA9PT0gJ3VuZGVmaW5lZCcpIG1vZGUgPSBNb2RlLkJZVEVcblxuICAvLyBUb3RhbCBjb2Rld29yZHMgZm9yIHRoaXMgUVIgY29kZSB2ZXJzaW9uIChEYXRhICsgRXJyb3IgY29ycmVjdGlvbilcbiAgdmFyIHRvdGFsQ29kZXdvcmRzID0gVXRpbHMuZ2V0U3ltYm9sVG90YWxDb2Rld29yZHModmVyc2lvbilcblxuICAvLyBUb3RhbCBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHNcbiAgdmFyIGVjVG90YWxDb2Rld29yZHMgPSBFQ0NvZGUuZ2V0VG90YWxDb2Rld29yZHNDb3VudCh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbClcblxuICAvLyBUb3RhbCBudW1iZXIgb2YgZGF0YSBjb2Rld29yZHNcbiAgdmFyIGRhdGFUb3RhbENvZGV3b3Jkc0JpdHMgPSAodG90YWxDb2Rld29yZHMgLSBlY1RvdGFsQ29kZXdvcmRzKSAqIDhcblxuICBpZiAobW9kZSA9PT0gTW9kZS5NSVhFRCkgcmV0dXJuIGRhdGFUb3RhbENvZGV3b3Jkc0JpdHNcblxuICB2YXIgdXNhYmxlQml0cyA9IGRhdGFUb3RhbENvZGV3b3Jkc0JpdHMgLSBnZXRSZXNlcnZlZEJpdHNDb3VudChtb2RlLCB2ZXJzaW9uKVxuXG4gIC8vIFJldHVybiBtYXggbnVtYmVyIG9mIHN0b3JhYmxlIGNvZGV3b3Jkc1xuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKCh1c2FibGVCaXRzIC8gMTApICogMylcblxuICAgIGNhc2UgTW9kZS5BTFBIQU5VTUVSSUM6XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigodXNhYmxlQml0cyAvIDExKSAqIDIpXG5cbiAgICBjYXNlIE1vZGUuS0FOSkk6XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcih1c2FibGVCaXRzIC8gMTMpXG5cbiAgICBjYXNlIE1vZGUuQllURTpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IodXNhYmxlQml0cyAvIDgpXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIHZlcnNpb24gbmVlZGVkIHRvIGNvbnRhaW4gdGhlIGFtb3VudCBvZiBkYXRhXG4gKlxuICogQHBhcmFtICB7U2VnbWVudH0gZGF0YSAgICAgICAgICAgICAgICAgICAgU2VnbWVudCBvZiBkYXRhXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IFtlcnJvckNvcnJlY3Rpb25MZXZlbD1IXSBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtNb2RlfSBtb2RlICAgICAgICAgICAgICAgICAgICAgICBEYXRhIG1vZGVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvblxuICovXG5leHBvcnRzLmdldEJlc3RWZXJzaW9uRm9yRGF0YSA9IGZ1bmN0aW9uIGdldEJlc3RWZXJzaW9uRm9yRGF0YSAoZGF0YSwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcbiAgdmFyIHNlZ1xuXG4gIHZhciBlY2wgPSBFQ0xldmVsLmZyb20oZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIEVDTGV2ZWwuTSlcblxuICBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiBnZXRCZXN0VmVyc2lvbkZvck1peGVkRGF0YShkYXRhLCBlY2wpXG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gMVxuICAgIH1cblxuICAgIHNlZyA9IGRhdGFbMF1cbiAgfSBlbHNlIHtcbiAgICBzZWcgPSBkYXRhXG4gIH1cblxuICByZXR1cm4gZ2V0QmVzdFZlcnNpb25Gb3JEYXRhTGVuZ3RoKHNlZy5tb2RlLCBzZWcuZ2V0TGVuZ3RoKCksIGVjbClcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHZlcnNpb24gaW5mb3JtYXRpb24gd2l0aCByZWxhdGl2ZSBlcnJvciBjb3JyZWN0aW9uIGJpdHNcbiAqXG4gKiBUaGUgdmVyc2lvbiBpbmZvcm1hdGlvbiBpcyBpbmNsdWRlZCBpbiBRUiBDb2RlIHN5bWJvbHMgb2YgdmVyc2lvbiA3IG9yIGxhcmdlci5cbiAqIEl0IGNvbnNpc3RzIG9mIGFuIDE4LWJpdCBzZXF1ZW5jZSBjb250YWluaW5nIDYgZGF0YSBiaXRzLFxuICogd2l0aCAxMiBlcnJvciBjb3JyZWN0aW9uIGJpdHMgY2FsY3VsYXRlZCB1c2luZyB0aGUgKDE4LCA2KSBHb2xheSBjb2RlLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBFbmNvZGVkIHZlcnNpb24gaW5mbyBiaXRzXG4gKi9cbmV4cG9ydHMuZ2V0RW5jb2RlZEJpdHMgPSBmdW5jdGlvbiBnZXRFbmNvZGVkQml0cyAodmVyc2lvbikge1xuICBpZiAoIVZlcnNpb25DaGVjay5pc1ZhbGlkKHZlcnNpb24pIHx8IHZlcnNpb24gPCA3KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFFSIENvZGUgdmVyc2lvbicpXG4gIH1cblxuICB2YXIgZCA9IHZlcnNpb24gPDwgMTJcblxuICB3aGlsZSAoVXRpbHMuZ2V0QkNIRGlnaXQoZCkgLSBHMThfQkNIID49IDApIHtcbiAgICBkIF49IChHMTggPDwgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE4X0JDSCkpXG4gIH1cblxuICByZXR1cm4gKHZlcnNpb24gPDwgMTIpIHwgZFxufVxuIiwidmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIGNsZWFyQ2FudmFzIChjdHgsIGNhbnZhcywgc2l6ZSkge1xuICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcblxuICBpZiAoIWNhbnZhcy5zdHlsZSkgY2FudmFzLnN0eWxlID0ge31cbiAgY2FudmFzLmhlaWdodCA9IHNpemVcbiAgY2FudmFzLndpZHRoID0gc2l6ZVxuICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gc2l6ZSArICdweCdcbiAgY2FudmFzLnN0eWxlLndpZHRoID0gc2l6ZSArICdweCdcbn1cblxuZnVuY3Rpb24gZ2V0Q2FudmFzRWxlbWVudCAoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHNwZWNpZnkgYSBjYW52YXMgZWxlbWVudCcpXG4gIH1cbn1cblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKHFyRGF0YSwgY2FudmFzLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9uc1xuICB2YXIgY2FudmFzRWwgPSBjYW52YXNcblxuICBpZiAodHlwZW9mIG9wdHMgPT09ICd1bmRlZmluZWQnICYmICghY2FudmFzIHx8ICFjYW52YXMuZ2V0Q29udGV4dCkpIHtcbiAgICBvcHRzID0gY2FudmFzXG4gICAgY2FudmFzID0gdW5kZWZpbmVkXG4gIH1cblxuICBpZiAoIWNhbnZhcykge1xuICAgIGNhbnZhc0VsID0gZ2V0Q2FudmFzRWxlbWVudCgpXG4gIH1cblxuICBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRzKVxuICB2YXIgc2l6ZSA9IFV0aWxzLmdldEltYWdlV2lkdGgocXJEYXRhLm1vZHVsZXMuc2l6ZSwgb3B0cylcblxuICB2YXIgY3R4ID0gY2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKVxuICB2YXIgaW1hZ2UgPSBjdHguY3JlYXRlSW1hZ2VEYXRhKHNpemUsIHNpemUpXG4gIFV0aWxzLnFyVG9JbWFnZURhdGEoaW1hZ2UuZGF0YSwgcXJEYXRhLCBvcHRzKVxuXG4gIGNsZWFyQ2FudmFzKGN0eCwgY2FudmFzRWwsIHNpemUpXG4gIGN0eC5wdXRJbWFnZURhdGEoaW1hZ2UsIDAsIDApXG5cbiAgcmV0dXJuIGNhbnZhc0VsXG59XG5cbmV4cG9ydHMucmVuZGVyVG9EYXRhVVJMID0gZnVuY3Rpb24gcmVuZGVyVG9EYXRhVVJMIChxckRhdGEsIGNhbnZhcywgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG9wdGlvbnNcblxuICBpZiAodHlwZW9mIG9wdHMgPT09ICd1bmRlZmluZWQnICYmICghY2FudmFzIHx8ICFjYW52YXMuZ2V0Q29udGV4dCkpIHtcbiAgICBvcHRzID0gY2FudmFzXG4gICAgY2FudmFzID0gdW5kZWZpbmVkXG4gIH1cblxuICBpZiAoIW9wdHMpIG9wdHMgPSB7fVxuXG4gIHZhciBjYW52YXNFbCA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgY2FudmFzLCBvcHRzKVxuXG4gIHZhciB0eXBlID0gb3B0cy50eXBlIHx8ICdpbWFnZS9wbmcnXG4gIHZhciByZW5kZXJlck9wdHMgPSBvcHRzLnJlbmRlcmVyT3B0cyB8fCB7fVxuXG4gIHJldHVybiBjYW52YXNFbC50b0RhdGFVUkwodHlwZSwgcmVuZGVyZXJPcHRzLnF1YWxpdHkpXG59XG4iLCJ2YXIgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZnVuY3Rpb24gZ2V0Q29sb3JBdHRyaWIgKGNvbG9yLCBhdHRyaWIpIHtcbiAgdmFyIGFscGhhID0gY29sb3IuYSAvIDI1NVxuICB2YXIgc3RyID0gYXR0cmliICsgJz1cIicgKyBjb2xvci5oZXggKyAnXCInXG5cbiAgcmV0dXJuIGFscGhhIDwgMVxuICAgID8gc3RyICsgJyAnICsgYXR0cmliICsgJy1vcGFjaXR5PVwiJyArIGFscGhhLnRvRml4ZWQoMikuc2xpY2UoMSkgKyAnXCInXG4gICAgOiBzdHJcbn1cblxuZnVuY3Rpb24gc3ZnQ21kIChjbWQsIHgsIHkpIHtcbiAgdmFyIHN0ciA9IGNtZCArIHhcbiAgaWYgKHR5cGVvZiB5ICE9PSAndW5kZWZpbmVkJykgc3RyICs9ICcgJyArIHlcblxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHFyVG9QYXRoIChkYXRhLCBzaXplLCBtYXJnaW4pIHtcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgbW92ZUJ5ID0gMFxuICB2YXIgbmV3Um93ID0gZmFsc2VcbiAgdmFyIGxpbmVMZW5ndGggPSAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNvbCA9IE1hdGguZmxvb3IoaSAlIHNpemUpXG4gICAgdmFyIHJvdyA9IE1hdGguZmxvb3IoaSAvIHNpemUpXG5cbiAgICBpZiAoIWNvbCAmJiAhbmV3Um93KSBuZXdSb3cgPSB0cnVlXG5cbiAgICBpZiAoZGF0YVtpXSkge1xuICAgICAgbGluZUxlbmd0aCsrXG5cbiAgICAgIGlmICghKGkgPiAwICYmIGNvbCA+IDAgJiYgZGF0YVtpIC0gMV0pKSB7XG4gICAgICAgIHBhdGggKz0gbmV3Um93XG4gICAgICAgICAgPyBzdmdDbWQoJ00nLCBjb2wgKyBtYXJnaW4sIDAuNSArIHJvdyArIG1hcmdpbilcbiAgICAgICAgICA6IHN2Z0NtZCgnbScsIG1vdmVCeSwgMClcblxuICAgICAgICBtb3ZlQnkgPSAwXG4gICAgICAgIG5ld1JvdyA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmICghKGNvbCArIDEgPCBzaXplICYmIGRhdGFbaSArIDFdKSkge1xuICAgICAgICBwYXRoICs9IHN2Z0NtZCgnaCcsIGxpbmVMZW5ndGgpXG4gICAgICAgIGxpbmVMZW5ndGggPSAwXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdmVCeSsrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhdGhcbn1cblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgdmFyIG9wdHMgPSBVdGlscy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gIHZhciBzaXplID0gcXJEYXRhLm1vZHVsZXMuc2l6ZVxuICB2YXIgZGF0YSA9IHFyRGF0YS5tb2R1bGVzLmRhdGFcbiAgdmFyIHFyY29kZXNpemUgPSBzaXplICsgb3B0cy5tYXJnaW4gKiAyXG5cbiAgdmFyIGJnID0gIW9wdHMuY29sb3IubGlnaHQuYVxuICAgID8gJydcbiAgICA6ICc8cGF0aCAnICsgZ2V0Q29sb3JBdHRyaWIob3B0cy5jb2xvci5saWdodCwgJ2ZpbGwnKSArXG4gICAgICAnIGQ9XCJNMCAwaCcgKyBxcmNvZGVzaXplICsgJ3YnICsgcXJjb2Rlc2l6ZSArICdIMHpcIi8+J1xuXG4gIHZhciBwYXRoID1cbiAgICAnPHBhdGggJyArIGdldENvbG9yQXR0cmliKG9wdHMuY29sb3IuZGFyaywgJ3N0cm9rZScpICtcbiAgICAnIGQ9XCInICsgcXJUb1BhdGgoZGF0YSwgc2l6ZSwgb3B0cy5tYXJnaW4pICsgJ1wiLz4nXG5cbiAgdmFyIHZpZXdCb3ggPSAndmlld0JveD1cIicgKyAnMCAwICcgKyBxcmNvZGVzaXplICsgJyAnICsgcXJjb2Rlc2l6ZSArICdcIidcblxuICB2YXIgd2lkdGggPSAhb3B0cy53aWR0aCA/ICcnIDogJ3dpZHRoPVwiJyArIG9wdHMud2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIG9wdHMud2lkdGggKyAnXCIgJ1xuXG4gIHZhciBzdmdUYWcgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgJyArIHdpZHRoICsgdmlld0JveCArICcgc2hhcGUtcmVuZGVyaW5nPVwiY3Jpc3BFZGdlc1wiPicgKyBiZyArIHBhdGggKyAnPC9zdmc+XFxuJ1xuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYihudWxsLCBzdmdUYWcpXG4gIH1cblxuICByZXR1cm4gc3ZnVGFnXG59XG4iLCJmdW5jdGlvbiBoZXgycmdiYSAoaGV4KSB7XG4gIGlmICh0eXBlb2YgaGV4ID09PSAnbnVtYmVyJykge1xuICAgIGhleCA9IGhleC50b1N0cmluZygpXG4gIH1cblxuICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbG9yIHNob3VsZCBiZSBkZWZpbmVkIGFzIGhleCBzdHJpbmcnKVxuICB9XG5cbiAgdmFyIGhleENvZGUgPSBoZXguc2xpY2UoKS5yZXBsYWNlKCcjJywgJycpLnNwbGl0KCcnKVxuICBpZiAoaGV4Q29kZS5sZW5ndGggPCAzIHx8IGhleENvZGUubGVuZ3RoID09PSA1IHx8IGhleENvZGUubGVuZ3RoID4gOCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggY29sb3I6ICcgKyBoZXgpXG4gIH1cblxuICAvLyBDb252ZXJ0IGZyb20gc2hvcnQgdG8gbG9uZyBmb3JtIChmZmYgLT4gZmZmZmZmKVxuICBpZiAoaGV4Q29kZS5sZW5ndGggPT09IDMgfHwgaGV4Q29kZS5sZW5ndGggPT09IDQpIHtcbiAgICBoZXhDb2RlID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgaGV4Q29kZS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBbYywgY11cbiAgICB9KSlcbiAgfVxuXG4gIC8vIEFkZCBkZWZhdWx0IGFscGhhIHZhbHVlXG4gIGlmIChoZXhDb2RlLmxlbmd0aCA9PT0gNikgaGV4Q29kZS5wdXNoKCdGJywgJ0YnKVxuXG4gIHZhciBoZXhWYWx1ZSA9IHBhcnNlSW50KGhleENvZGUuam9pbignJyksIDE2KVxuXG4gIHJldHVybiB7XG4gICAgcjogKGhleFZhbHVlID4+IDI0KSAmIDI1NSxcbiAgICBnOiAoaGV4VmFsdWUgPj4gMTYpICYgMjU1LFxuICAgIGI6IChoZXhWYWx1ZSA+PiA4KSAmIDI1NSxcbiAgICBhOiBoZXhWYWx1ZSAmIDI1NSxcbiAgICBoZXg6ICcjJyArIGhleENvZGUuc2xpY2UoMCwgNikuam9pbignJylcbiAgfVxufVxuXG5leHBvcnRzLmdldE9wdGlvbnMgPSBmdW5jdGlvbiBnZXRPcHRpb25zIChvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9XG4gIGlmICghb3B0aW9ucy5jb2xvcikgb3B0aW9ucy5jb2xvciA9IHt9XG5cbiAgdmFyIG1hcmdpbiA9IHR5cGVvZiBvcHRpb25zLm1hcmdpbiA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICBvcHRpb25zLm1hcmdpbiA9PT0gbnVsbCB8fFxuICAgIG9wdGlvbnMubWFyZ2luIDwgMCA/IDQgOiBvcHRpb25zLm1hcmdpblxuXG4gIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggJiYgb3B0aW9ucy53aWR0aCA+PSAyMSA/IG9wdGlvbnMud2lkdGggOiB1bmRlZmluZWRcbiAgdmFyIHNjYWxlID0gb3B0aW9ucy5zY2FsZSB8fCA0XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgc2NhbGU6IHdpZHRoID8gNCA6IHNjYWxlLFxuICAgIG1hcmdpbjogbWFyZ2luLFxuICAgIGNvbG9yOiB7XG4gICAgICBkYXJrOiBoZXgycmdiYShvcHRpb25zLmNvbG9yLmRhcmsgfHwgJyMwMDAwMDBmZicpLFxuICAgICAgbGlnaHQ6IGhleDJyZ2JhKG9wdGlvbnMuY29sb3IubGlnaHQgfHwgJyNmZmZmZmZmZicpXG4gICAgfSxcbiAgICB0eXBlOiBvcHRpb25zLnR5cGUsXG4gICAgcmVuZGVyZXJPcHRzOiBvcHRpb25zLnJlbmRlcmVyT3B0cyB8fCB7fVxuICB9XG59XG5cbmV4cG9ydHMuZ2V0U2NhbGUgPSBmdW5jdGlvbiBnZXRTY2FsZSAocXJTaXplLCBvcHRzKSB7XG4gIHJldHVybiBvcHRzLndpZHRoICYmIG9wdHMud2lkdGggPj0gcXJTaXplICsgb3B0cy5tYXJnaW4gKiAyXG4gICAgPyBvcHRzLndpZHRoIC8gKHFyU2l6ZSArIG9wdHMubWFyZ2luICogMilcbiAgICA6IG9wdHMuc2NhbGVcbn1cblxuZXhwb3J0cy5nZXRJbWFnZVdpZHRoID0gZnVuY3Rpb24gZ2V0SW1hZ2VXaWR0aCAocXJTaXplLCBvcHRzKSB7XG4gIHZhciBzY2FsZSA9IGV4cG9ydHMuZ2V0U2NhbGUocXJTaXplLCBvcHRzKVxuICByZXR1cm4gTWF0aC5mbG9vcigocXJTaXplICsgb3B0cy5tYXJnaW4gKiAyKSAqIHNjYWxlKVxufVxuXG5leHBvcnRzLnFyVG9JbWFnZURhdGEgPSBmdW5jdGlvbiBxclRvSW1hZ2VEYXRhIChpbWdEYXRhLCBxciwgb3B0cykge1xuICB2YXIgc2l6ZSA9IHFyLm1vZHVsZXMuc2l6ZVxuICB2YXIgZGF0YSA9IHFyLm1vZHVsZXMuZGF0YVxuICB2YXIgc2NhbGUgPSBleHBvcnRzLmdldFNjYWxlKHNpemUsIG9wdHMpXG4gIHZhciBzeW1ib2xTaXplID0gTWF0aC5mbG9vcigoc2l6ZSArIG9wdHMubWFyZ2luICogMikgKiBzY2FsZSlcbiAgdmFyIHNjYWxlZE1hcmdpbiA9IG9wdHMubWFyZ2luICogc2NhbGVcbiAgdmFyIHBhbGV0dGUgPSBbb3B0cy5jb2xvci5saWdodCwgb3B0cy5jb2xvci5kYXJrXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9sU2l6ZTsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzeW1ib2xTaXplOyBqKyspIHtcbiAgICAgIHZhciBwb3NEc3QgPSAoaSAqIHN5bWJvbFNpemUgKyBqKSAqIDRcbiAgICAgIHZhciBweENvbG9yID0gb3B0cy5jb2xvci5saWdodFxuXG4gICAgICBpZiAoaSA+PSBzY2FsZWRNYXJnaW4gJiYgaiA+PSBzY2FsZWRNYXJnaW4gJiZcbiAgICAgICAgaSA8IHN5bWJvbFNpemUgLSBzY2FsZWRNYXJnaW4gJiYgaiA8IHN5bWJvbFNpemUgLSBzY2FsZWRNYXJnaW4pIHtcbiAgICAgICAgdmFyIGlTcmMgPSBNYXRoLmZsb29yKChpIC0gc2NhbGVkTWFyZ2luKSAvIHNjYWxlKVxuICAgICAgICB2YXIgalNyYyA9IE1hdGguZmxvb3IoKGogLSBzY2FsZWRNYXJnaW4pIC8gc2NhbGUpXG4gICAgICAgIHB4Q29sb3IgPSBwYWxldHRlW2RhdGFbaVNyYyAqIHNpemUgKyBqU3JjXSA/IDEgOiAwXVxuICAgICAgfVxuXG4gICAgICBpbWdEYXRhW3Bvc0RzdCsrXSA9IHB4Q29sb3IuclxuICAgICAgaW1nRGF0YVtwb3NEc3QrK10gPSBweENvbG9yLmdcbiAgICAgIGltZ0RhdGFbcG9zRHN0KytdID0gcHhDb2xvci5iXG4gICAgICBpbWdEYXRhW3Bvc0RzdF0gPSBweENvbG9yLmFcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgYSBzdWJzZXQgb2Ygbm9kZS5qcyBCdWZmZXIgbWV0aG9kcyBmb3IgdGhlIGJyb3dzZXIuXG4gKiBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlclxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgYmUgYXVnbWVudGVkP1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IHR5cGVkQXJyYXlTdXBwb3J0KClcblxudmFyIEtfTUFYX0xFTkdUSCA9IEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBvZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIG9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuXG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbiAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIHZhciBidWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIGJ1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGJ1ZiA9IHRoYXRcbiAgICBpZiAoYnVmID09PSBudWxsKSB7XG4gICAgICBidWYgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgYnVmLmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgYnVmW2ldID0gMFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZykgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgdmFyIGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgYnVmID0gZnJvbUFycmF5TGlrZSh0aGF0LCBidWYpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIG9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgb2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IG5ldyBCdWZmZXIodmFsKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIobnVsbCwgMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IGFsbG9jVW5zYWZlKG51bGwsIGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5tb2R1bGUuZXhwb3J0cy5hbGxvYyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKHNpemUpXG4gIGJ1ZmZlci5maWxsKDApXG4gIHJldHVybiBidWZmZXJcbn1cblxubW9kdWxlLmV4cG9ydHMuZnJvbSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKGRhdGEpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgY3VzdG9tSW5zcGVjdFN5bWJvbCA9XG4gICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2xbJ2ZvciddID09PSAnZnVuY3Rpb24nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgID8gU3ltYm9sWydmb3InXSgnbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIDogbnVsbFxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbnZhciBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICB2YXIgcHJvdG8gPSB7IGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfSB9XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHByb3RvLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYXJyLCBwcm90bylcbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdwYXJlbnQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgbGVuZ3RoICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgdmFyIHZhbHVlT2YgPSB2YWx1ZS52YWx1ZU9mICYmIHZhbHVlLnZhbHVlT2YoKVxuICBpZiAodmFsdWVPZiAhPSBudWxsICYmIHZhbHVlT2YgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlT2YsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHZhciBiID0gZnJvbU9iamVjdCh2YWx1ZSlcbiAgaWYgKGIpIHJldHVybiBiXG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1ByaW1pdGl2ZSAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShcbiAgICAgIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0oJ3N0cmluZycpLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGhcbiAgICApXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gIClcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBOb3RlOiBDaGFuZ2UgcHJvdG90eXBlICphZnRlciogQnVmZmVyLmZyb20gaXMgZGVmaW5lZCB0byB3b3JrYXJvdW5kIENocm9tZSBidWc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzE0OFxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlci5wcm90b3R5cGUsIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlciwgVWludDhBcnJheSlcblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5VmlldyAoYXJyYXlWaWV3KSB7XG4gIGlmIChpc0luc3RhbmNlKGFycmF5VmlldywgVWludDhBcnJheSkpIHtcbiAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICB2YXIgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuKVxuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBidWZcbiAgICB9XG5cbiAgICBvYmouY29weShidWYsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gYnVmXG4gIH1cblxuICBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gIH1cblxuICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyID09PSB0cnVlICYmXG4gICAgYiAhPT0gQnVmZmVyLnByb3RvdHlwZSAvLyBzbyBCdWZmZXIuaXNCdWZmZXIoQnVmZmVyLnByb3RvdHlwZSkgd2lsbCBiZSBmYWxzZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYSwgVWludDhBcnJheSkpIGEgPSBCdWZmZXIuZnJvbShhLCBhLm9mZnNldCwgYS5ieXRlTGVuZ3RoKVxuICBpZiAoaXNJbnN0YW5jZShiLCBVaW50OEFycmF5KSkgYiA9IEJ1ZmZlci5mcm9tKGIsIGIub2Zmc2V0LCBiLmJ5dGVMZW5ndGgpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknXG4gICAgKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIEJ1ZmZlci5mcm9tKGJ1ZikuY29weShidWZmZXIsIHBvcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICBidWYsXG4gICAgICAgICAgcG9zXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgfVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc3RyaW5nXG4gICAgKVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2VyY2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuaWYgKGN1c3RvbUluc3BlY3RTeW1ib2wpIHtcbiAgQnVmZmVyLnByb3RvdHlwZVtjdXN0b21JbnNwZWN0U3ltYm9sXSA9IEJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFt2YWxdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpXG4gICAgICA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpXG4gICAgICAgICAgPyAzXG4gICAgICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRilcbiAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSBoZXhTbGljZUxvb2t1cFRhYmxlW2J1ZltpXV1cbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG5ld0J1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyB2YWwgK1xuICAgICAgICAnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJylcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSB0YWtlcyBlcXVhbCBzaWducyBhcyBlbmQgb2YgdGhlIEJhc2U2NCBlbmNvZGluZ1xuICBzdHIgPSBzdHIuc3BsaXQoJz0nKVswXVxuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG52YXIgaGV4U2xpY2VMb29rdXBUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5YWJjZGVmJ1xuICB2YXIgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICB2YXIgaTE2ID0gaSAqIDE2XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICB0YWJsZVtpMTYgKyBqXSA9IGFscGhhYmV0W2ldICsgYWxwaGFiZXRbal1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhYmxlXG59KSgpXG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBzdHJpY3RVcmlFbmNvZGUgPSByZXF1aXJlKCdzdHJpY3QtdXJpLWVuY29kZScpO1xuY29uc3QgZGVjb2RlQ29tcG9uZW50ID0gcmVxdWlyZSgnZGVjb2RlLXVyaS1jb21wb25lbnQnKTtcbmNvbnN0IHNwbGl0T25GaXJzdCA9IHJlcXVpcmUoJ3NwbGl0LW9uLWZpcnN0Jyk7XG5cbmNvbnN0IGlzTnVsbE9yVW5kZWZpbmVkID0gdmFsdWUgPT4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0c3dpdGNoIChvcHRpb25zLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1snLCBpbmRleCwgJ10nXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRcdC4uLnJlc3VsdCxcblx0XHRcdFx0XHRbZW5jb2RlKGtleSwgb3B0aW9ucyksICdbJywgZW5jb2RlKGluZGV4LCBvcHRpb25zKSwgJ109JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJylcblx0XHRcdFx0XTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdJ10uam9pbignJyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdPScsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oJycpXTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdjb21tYSc6XG5cdFx0Y2FzZSAnc2VwYXJhdG9yJzpcblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFtbZW5jb2RlKGtleSwgb3B0aW9ucyksICc9JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtbcmVzdWx0LCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpXTtcblx0XHRcdH07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0dmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHRcdChvcHRpb25zLnNraXBOdWxsICYmIHZhbHVlID09PSBudWxsKSB8fFxuXHRcdFx0XHRcdChvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiB2YWx1ZSA9PT0gJycpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gWy4uLnJlc3VsdCwgZW5jb2RlKGtleSwgb3B0aW9ucyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJz0nLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0bGV0IHJlc3VsdDtcblxuXHRzd2l0Y2ggKG9wdGlvbnMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdHJlc3VsdCA9IC9cXFsoXFxkKilcXF0kLy5leGVjKGtleSk7XG5cblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcZCpcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0ge307XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldW3Jlc3VsdFsxXV0gPSB2YWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcblx0XHRcdFx0cmVzdWx0ID0gLyhcXFtcXF0pJC8uZXhlYyhrZXkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29tbWEnOlxuXHRcdGNhc2UgJ3NlcGFyYXRvcic6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlzQXJyYXkgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLnNwbGl0KCcnKS5pbmRleE9mKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpID4gLTE7XG5cdFx0XHRcdGNvbnN0IG5ld1ZhbHVlID0gaXNBcnJheSA/IHZhbHVlLnNwbGl0KG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpLm1hcChpdGVtID0+IGRlY29kZShpdGVtLCBvcHRpb25zKSkgOiB2YWx1ZSA9PT0gbnVsbCA/IHZhbHVlIDogZGVjb2RlKHZhbHVlLCBvcHRpb25zKTtcblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IG5ld1ZhbHVlO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3IodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgdmFsdWUubGVuZ3RoICE9PSAxKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignYXJyYXlGb3JtYXRTZXBhcmF0b3IgbXVzdCBiZSBzaW5nbGUgY2hhcmFjdGVyIHN0cmluZycpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zLmRlY29kZSkge1xuXHRcdHJldHVybiBkZWNvZGVDb21wb25lbnQodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dC5zb3J0KCk7XG5cdH1cblxuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYSkgLSBOdW1iZXIoYikpXG5cdFx0XHQubWFwKGtleSA9PiBpbnB1dFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFzaChpbnB1dCkge1xuXHRjb25zdCBoYXNoU3RhcnQgPSBpbnB1dC5pbmRleE9mKCcjJyk7XG5cdGlmIChoYXNoU3RhcnQgIT09IC0xKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC5zbGljZSgwLCBoYXNoU3RhcnQpO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoKHVybCkge1xuXHRsZXQgaGFzaCA9ICcnO1xuXHRjb25zdCBoYXNoU3RhcnQgPSB1cmwuaW5kZXhPZignIycpO1xuXHRpZiAoaGFzaFN0YXJ0ICE9PSAtMSkge1xuXHRcdGhhc2ggPSB1cmwuc2xpY2UoaGFzaFN0YXJ0KTtcblx0fVxuXG5cdHJldHVybiBoYXNoO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0KGlucHV0KSB7XG5cdGlucHV0ID0gcmVtb3ZlSGFzaChpbnB1dCk7XG5cdGNvbnN0IHF1ZXJ5U3RhcnQgPSBpbnB1dC5pbmRleE9mKCc/Jyk7XG5cdGlmIChxdWVyeVN0YXJ0ID09PSAtMSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHJldHVybiBpbnB1dC5zbGljZShxdWVyeVN0YXJ0ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsdWUodmFsdWUsIG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMucGFyc2VOdW1iZXJzICYmICFOdW1iZXIuaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUudHJpbSgpICE9PSAnJykpIHtcblx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5wYXJzZUJvb2xlYW5zICYmIHZhbHVlICE9PSBudWxsICYmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgfHwgdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZhbHNlJykpIHtcblx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdGRlY29kZTogdHJ1ZSxcblx0XHRzb3J0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZScsXG5cdFx0YXJyYXlGb3JtYXRTZXBhcmF0b3I6ICcsJyxcblx0XHRwYXJzZU51bWJlcnM6IGZhbHNlLFxuXHRcdHBhcnNlQm9vbGVhbnM6IGZhbHNlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3Iob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcik7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0aW9ucyk7XG5cblx0Ly8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIG5vIHByb3RvdHlwZVxuXHRjb25zdCByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGlucHV0ID0gaW5wdXQudHJpbSgpLnJlcGxhY2UoL15bPyMmXS8sICcnKTtcblxuXHRpZiAoIWlucHV0KSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGZvciAoY29uc3QgcGFyYW0gb2YgaW5wdXQuc3BsaXQoJyYnKSkge1xuXHRcdGxldCBba2V5LCB2YWx1ZV0gPSBzcGxpdE9uRmlyc3Qob3B0aW9ucy5kZWNvZGUgPyBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKSA6IHBhcmFtLCAnPScpO1xuXG5cdFx0Ly8gTWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcblx0XHQvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG5cdFx0dmFsdWUgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IFsnY29tbWEnLCAnc2VwYXJhdG9yJ10uaW5jbHVkZXMob3B0aW9ucy5hcnJheUZvcm1hdCkgPyB2YWx1ZSA6IGRlY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0Zm9ybWF0dGVyKGRlY29kZShrZXksIG9wdGlvbnMpLCB2YWx1ZSwgcmV0KTtcblx0fVxuXG5cdGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJldCkpIHtcblx0XHRjb25zdCB2YWx1ZSA9IHJldFtrZXldO1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG5cdFx0XHRcdHZhbHVlW2tdID0gcGFyc2VWYWx1ZSh2YWx1ZVtrXSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldFtrZXldID0gcGFyc2VWYWx1ZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc29ydCA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0cmV0dXJuIChvcHRpb25zLnNvcnQgPT09IHRydWUgPyBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKSA6IE9iamVjdC5rZXlzKHJldCkuc29ydChvcHRpb25zLnNvcnQpKS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG5cdFx0Y29uc3QgdmFsdWUgPSByZXRba2V5XTtcblx0XHRpZiAoQm9vbGVhbih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdC8vIFNvcnQgb2JqZWN0IGtleXMsIG5vdCB2YWx1ZXNcblx0XHRcdHJlc3VsdFtrZXldID0ga2V5c1NvcnRlcih2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG59XG5cbmV4cG9ydHMuZXh0cmFjdCA9IGV4dHJhY3Q7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5cbmV4cG9ydHMuc3RyaW5naWZ5ID0gKG9iamVjdCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoIW9iamVjdCkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZScsXG5cdFx0YXJyYXlGb3JtYXRTZXBhcmF0b3I6ICcsJ1xuXHR9LCBvcHRpb25zKTtcblxuXHR2YWxpZGF0ZUFycmF5Rm9ybWF0U2VwYXJhdG9yKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO1xuXG5cdGNvbnN0IHNob3VsZEZpbHRlciA9IGtleSA9PiAoXG5cdFx0KG9wdGlvbnMuc2tpcE51bGwgJiYgaXNOdWxsT3JVbmRlZmluZWQob2JqZWN0W2tleV0pKSB8fFxuXHRcdChvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiBvYmplY3Rba2V5XSA9PT0gJycpXG5cdCk7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpO1xuXG5cdGNvbnN0IG9iamVjdENvcHkgPSB7fTtcblxuXHRmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG5cdFx0aWYgKCFzaG91bGRGaWx0ZXIoa2V5KSkge1xuXHRcdFx0b2JqZWN0Q29weVtrZXldID0gb2JqZWN0W2tleV07XG5cdFx0fVxuXHR9XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdENvcHkpO1xuXG5cdGlmIChvcHRpb25zLnNvcnQgIT09IGZhbHNlKSB7XG5cdFx0a2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG5cdH1cblxuXHRyZXR1cm4ga2V5cy5tYXAoa2V5ID0+IHtcblx0XHRjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHQucmVkdWNlKGZvcm1hdHRlcihrZXkpLCBbXSlcblx0XHRcdFx0LmpvaW4oJyYnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0aW9ucykgKyAnPScgKyBlbmNvZGUodmFsdWUsIG9wdGlvbnMpO1xuXHR9KS5maWx0ZXIoeCA9PiB4Lmxlbmd0aCA+IDApLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydHMucGFyc2VVcmwgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdGRlY29kZTogdHJ1ZVxuXHR9LCBvcHRpb25zKTtcblxuXHRjb25zdCBbdXJsLCBoYXNoXSA9IHNwbGl0T25GaXJzdChpbnB1dCwgJyMnKTtcblxuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbihcblx0XHR7XG5cdFx0XHR1cmw6IHVybC5zcGxpdCgnPycpWzBdIHx8ICcnLFxuXHRcdFx0cXVlcnk6IHBhcnNlKGV4dHJhY3QoaW5wdXQpLCBvcHRpb25zKVxuXHRcdH0sXG5cdFx0b3B0aW9ucyAmJiBvcHRpb25zLnBhcnNlRnJhZ21lbnRJZGVudGlmaWVyICYmIGhhc2ggPyB7ZnJhZ21lbnRJZGVudGlmaWVyOiBkZWNvZGUoaGFzaCwgb3B0aW9ucyl9IDoge31cblx0KTtcbn07XG5cbmV4cG9ydHMuc3RyaW5naWZ5VXJsID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IHVybCA9IHJlbW92ZUhhc2goaW5wdXQudXJsKS5zcGxpdCgnPycpWzBdIHx8ICcnO1xuXHRjb25zdCBxdWVyeUZyb21VcmwgPSBleHBvcnRzLmV4dHJhY3QoaW5wdXQudXJsKTtcblx0Y29uc3QgcGFyc2VkUXVlcnlGcm9tVXJsID0gZXhwb3J0cy5wYXJzZShxdWVyeUZyb21VcmwsIHtzb3J0OiBmYWxzZX0pO1xuXG5cdGNvbnN0IHF1ZXJ5ID0gT2JqZWN0LmFzc2lnbihwYXJzZWRRdWVyeUZyb21VcmwsIGlucHV0LnF1ZXJ5KTtcblx0bGV0IHF1ZXJ5U3RyaW5nID0gZXhwb3J0cy5zdHJpbmdpZnkocXVlcnksIG9wdGlvbnMpO1xuXHRpZiAocXVlcnlTdHJpbmcpIHtcblx0XHRxdWVyeVN0cmluZyA9IGA/JHtxdWVyeVN0cmluZ31gO1xuXHR9XG5cblx0bGV0IGhhc2ggPSBnZXRIYXNoKGlucHV0LnVybCk7XG5cdGlmIChpbnB1dC5mcmFnbWVudElkZW50aWZpZXIpIHtcblx0XHRoYXNoID0gYCMke2VuY29kZShpbnB1dC5mcmFnbWVudElkZW50aWZpZXIsIG9wdGlvbnMpfWA7XG5cdH1cblxuXHRyZXR1cm4gYCR7dXJsfSR7cXVlcnlTdHJpbmd9JHtoYXNofWA7XG59O1xuIiwiY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzLycpXG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNhZmVFdmVudEVtaXR0ZXJcblxuXG5mdW5jdGlvbiBTYWZlRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKVxufVxuXG51dGlsLmluaGVyaXRzKFNhZmVFdmVudEVtaXR0ZXIsIEV2ZW50RW1pdHRlcilcblxuU2FmZUV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIC8vIGNvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb3phbGEvZXZlbnRzL2Jsb2IvbWFzdGVyL2V2ZW50cy5qc1xuICAvLyBtb2RpZmllZCBsaW5lcyBhcmUgY29tbWVudGVkIHdpdGggXCJlZGl0ZWQ6XCJcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVkaXRlZDogdXNpbmcgc2FmZUFwcGx5XG4gICAgc2FmZUFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICAvLyBlZGl0ZWQ6IHVzaW5nIHNhZmVBcHBseVxuICAgICAgc2FmZUFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2FmZUFwcGx5KGhhbmRsZXIsIGNvbnRleHQsIGFyZ3MpIHtcbiAgdHJ5IHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgY29udGV4dCwgYXJncylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gdGhyb3cgZXJyb3IgYWZ0ZXIgdGltZW91dCBzbyBhcyBub3QgdG8gaW50ZXJ1cHQgdGhlIHN0YWNrXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aHJvdyBlcnJcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cbiIsIjsoZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7IHNldFRpbWVvdXQoZm4sIDApOyB9XG5pZiAodHlwZW9mIHByb2Nlc3MgIT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2VzcyAmJiB0eXBlb2YgcHJvY2Vzcy5uZXh0VGljayA9PSAnZnVuY3Rpb24nKSB7XG5cdC8vIG5vZGUuanMgYW5kIHRoZSBsaWtlXG5cdG5leHRUaWNrID0gcHJvY2Vzcy5uZXh0VGljaztcbn1cblxuZnVuY3Rpb24gc2VtYXBob3JlKGNhcGFjaXR5KSB7XG5cdHZhciBzZW1hcGhvcmUgPSB7XG5cdFx0Y2FwYWNpdHk6IGNhcGFjaXR5IHx8IDEsXG5cdFx0Y3VycmVudDogMCxcblx0XHRxdWV1ZTogW10sXG5cdFx0Zmlyc3RIZXJlOiBmYWxzZSxcblxuXHRcdHRha2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKHNlbWFwaG9yZS5maXJzdEhlcmUgPT09IGZhbHNlKSB7XG4gICAgICAgIFx0XHRcdHNlbWFwaG9yZS5jdXJyZW50Kys7XG4gICAgICAgIFx0XHRcdHNlbWFwaG9yZS5maXJzdEhlcmUgPSB0cnVlO1xuICAgICAgICBcdFx0XHR2YXIgaXNGaXJzdCA9IDE7XG4gICAgICBcdFx0XHR9IGVsc2Uge1xuICAgICAgICBcdFx0XHR2YXIgaXNGaXJzdCA9IDA7XG4gICAgICBcdFx0XHR9XG5cdFx0XHR2YXIgaXRlbSA9IHsgbjogMSB9O1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGl0ZW0udGFzayA9IGFyZ3VtZW50c1swXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW0ubiA9IGFyZ3VtZW50c1swXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikgIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gPT0gJ2Z1bmN0aW9uJykgaXRlbS50YXNrID0gYXJndW1lbnRzWzFdO1xuXHRcdFx0XHRlbHNlIGl0ZW0ubiA9IGFyZ3VtZW50c1sxXTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHRhc2sgPSBpdGVtLnRhc2s7XG5cdFx0XHRpdGVtLnRhc2sgPSBmdW5jdGlvbigpIHsgdGFzayhzZW1hcGhvcmUubGVhdmUpOyB9O1xuXG5cdFx0XHRpZiAoc2VtYXBob3JlLmN1cnJlbnQgKyBpdGVtLm4gLSBpc0ZpcnN0ID4gc2VtYXBob3JlLmNhcGFjaXR5KSB7XG4gICAgICAgIFx0XHRcdGlmIChpc0ZpcnN0ID09PSAxKSB7XG4gICAgICAgIFx0XHRcdFx0c2VtYXBob3JlLmN1cnJlbnQtLTtcbiAgICAgICAgXHRcdFx0XHRzZW1hcGhvcmUuZmlyc3RIZXJlID0gZmFsc2U7XG4gICAgICAgIFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNlbWFwaG9yZS5xdWV1ZS5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRzZW1hcGhvcmUuY3VycmVudCArPSBpdGVtLm4gLSBpc0ZpcnN0O1xuXHRcdFx0aXRlbS50YXNrKHNlbWFwaG9yZS5sZWF2ZSk7XG4gICAgICBcdFx0XHRpZiAoaXNGaXJzdCA9PT0gMSkgc2VtYXBob3JlLmZpcnN0SGVyZSA9IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRsZWF2ZTogZnVuY3Rpb24obikge1xuXHRcdFx0biA9IG4gfHwgMTtcblxuXHRcdFx0c2VtYXBob3JlLmN1cnJlbnQgLT0gbjtcblxuXHRcdFx0aWYgKCFzZW1hcGhvcmUucXVldWUubGVuZ3RoKSB7XG5cdFx0XHRcdGlmIChzZW1hcGhvcmUuY3VycmVudCA8IDApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2xlYXZlIGNhbGxlZCB0b28gbWFueSB0aW1lcy4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGl0ZW0gPSBzZW1hcGhvcmUucXVldWVbMF07XG5cblx0XHRcdGlmIChpdGVtLm4gKyBzZW1hcGhvcmUuY3VycmVudCA+IHNlbWFwaG9yZS5jYXBhY2l0eSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHNlbWFwaG9yZS5xdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c2VtYXBob3JlLmN1cnJlbnQgKz0gaXRlbS5uO1xuXG5cdFx0XHRuZXh0VGljayhpdGVtLnRhc2spO1xuXHRcdH0sXG5cblx0XHRhdmFpbGFibGU6IGZ1bmN0aW9uKG4pIHtcblx0XHRcdG4gPSBuIHx8IDE7XG5cdFx0XHRyZXR1cm4oc2VtYXBob3JlLmN1cnJlbnQgKyBuIDw9IHNlbWFwaG9yZS5jYXBhY2l0eSk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBzZW1hcGhvcmU7XG59O1xuXG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gbm9kZSBleHBvcnRcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHNlbWFwaG9yZTtcbn0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gYW1kIGV4cG9ydFxuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzZW1hcGhvcmU7XG4gICAgfSk7XG59IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZ2xvYmFsLnNlbWFwaG9yZSA9IHNlbWFwaG9yZTtcbn1cbn0odGhpcykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChzdHJpbmcsIHNlcGFyYXRvcikgPT4ge1xuXHRpZiAoISh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VwYXJhdG9yID09PSAnc3RyaW5nJykpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgYXJndW1lbnRzIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AnKTtcblx0fVxuXG5cdGlmIChzZXBhcmF0b3IgPT09ICcnKSB7XG5cdFx0cmV0dXJuIFtzdHJpbmddO1xuXHR9XG5cblx0Y29uc3Qgc2VwYXJhdG9ySW5kZXggPSBzdHJpbmcuaW5kZXhPZihzZXBhcmF0b3IpO1xuXG5cdGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcblx0XHRyZXR1cm4gW3N0cmluZ107XG5cdH1cblxuXHRyZXR1cm4gW1xuXHRcdHN0cmluZy5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCksXG5cdFx0c3RyaW5nLnNsaWNlKHNlcGFyYXRvckluZGV4ICsgc2VwYXJhdG9yLmxlbmd0aClcblx0XTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHN0ciA9PiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIHggPT4gYCUke3guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKTtcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgfVxuICB2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICB2YXIgcmFuZ2VzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0aW9uLnJhbmdlQ291bnQ7IGkrKykge1xuICAgIHJhbmdlcy5wdXNoKHNlbGVjdGlvbi5nZXRSYW5nZUF0KGkpKTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0aXZlLnRhZ05hbWUudG9VcHBlckNhc2UoKSkgeyAvLyAudG9VcHBlckNhc2UgaGFuZGxlcyBYSFRNTFxuICAgIGNhc2UgJ0lOUFVUJzpcbiAgICBjYXNlICdURVhUQVJFQSc6XG4gICAgICBhY3RpdmUuYmx1cigpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYWN0aXZlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHNlbGVjdGlvbi50eXBlID09PSAnQ2FyZXQnICYmXG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGFjdGl2ZSAmJlxuICAgIGFjdGl2ZS5mb2N1cygpO1xuICB9O1xufTtcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcclxufVxyXG4iLCIvKipcbiAqIENvbnZlcnQgYSB0eXBlZCBhcnJheSB0byBhIEJ1ZmZlciB3aXRob3V0IGEgY29weVxuICpcbiAqIEF1dGhvcjogICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBMaWNlbnNlOiAgTUlUXG4gKlxuICogYG5wbSBpbnN0YWxsIHR5cGVkYXJyYXktdG8tYnVmZmVyYFxuICovXG5cbnZhciBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCdpcy10eXBlZGFycmF5Jykuc3RyaWN0XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHlwZWRhcnJheVRvQnVmZmVyIChhcnIpIHtcbiAgaWYgKGlzVHlwZWRBcnJheShhcnIpKSB7XG4gICAgLy8gVG8gYXZvaWQgYSBjb3B5LCB1c2UgdGhlIHR5cGVkIGFycmF5J3MgdW5kZXJseWluZyBBcnJheUJ1ZmZlciB0byBiYWNrIG5ldyBCdWZmZXJcbiAgICB2YXIgYnVmID0gQnVmZmVyLmZyb20oYXJyLmJ1ZmZlcilcbiAgICBpZiAoYXJyLmJ5dGVMZW5ndGggIT09IGFyci5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgLy8gUmVzcGVjdCB0aGUgXCJ2aWV3XCIsIGkuZS4gYnl0ZU9mZnNldCBhbmQgYnl0ZUxlbmd0aCwgd2l0aG91dCBkb2luZyBhIGNvcHlcbiAgICAgIGJ1ZiA9IGJ1Zi5zbGljZShhcnIuYnl0ZU9mZnNldCwgYXJyLmJ5dGVPZmZzZXQgKyBhcnIuYnl0ZUxlbmd0aClcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZlxuICB9IGVsc2Uge1xuICAgIC8vIFBhc3MgdGhyb3VnaCBhbGwgb3RoZXIgdHlwZXMgdG8gYEJ1ZmZlci5mcm9tYFxuICAgIHJldHVybiBCdWZmZXIuZnJvbShhcnIpXG4gIH1cbn1cbiIsImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHNcbmNvbnN0IGV0aFV0aWwgPSByZXF1aXJlKCdldGhlcmV1bWpzLXV0aWwnKVxuY29uc3QgRXRoQmxvY2tUcmFja2VyID0gcmVxdWlyZSgnZXRoLWJsb2NrLXRyYWNrZXInKVxuY29uc3QgbWFwID0gcmVxdWlyZSgnYXN5bmMvbWFwJylcbmNvbnN0IGVhY2hTZXJpZXMgPSByZXF1aXJlKCdhc3luYy9lYWNoU2VyaWVzJylcbmNvbnN0IFN0b3BsaWdodCA9IHJlcXVpcmUoJy4vdXRpbC9zdG9wbGlnaHQuanMnKVxuY29uc3QgY2FjaGVVdGlscyA9IHJlcXVpcmUoJy4vdXRpbC9ycGMtY2FjaGUtdXRpbHMuanMnKVxuY29uc3QgY3JlYXRlUGF5bG9hZCA9IHJlcXVpcmUoJy4vdXRpbC9jcmVhdGUtcGF5bG9hZC5qcycpXG5jb25zdCBub29wID0gZnVuY3Rpb24oKXt9XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViM1Byb3ZpZGVyRW5naW5lXG5cblxuaW5oZXJpdHMoV2ViM1Byb3ZpZGVyRW5naW5lLCBFdmVudEVtaXR0ZXIpXG5cbmZ1bmN0aW9uIFdlYjNQcm92aWRlckVuZ2luZShvcHRzKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIEV2ZW50RW1pdHRlci5jYWxsKHNlbGYpXG4gIHNlbGYuc2V0TWF4TGlzdGVuZXJzKDMwKVxuICAvLyBwYXJzZSBvcHRpb25zXG4gIG9wdHMgPSBvcHRzIHx8IHt9XG5cbiAgLy8gYmxvY2sgcG9sbGluZ1xuICBjb25zdCBkaXJlY3RQcm92aWRlciA9IHsgc2VuZEFzeW5jOiBzZWxmLl9oYW5kbGVBc3luYy5iaW5kKHNlbGYpIH1cbiAgY29uc3QgYmxvY2tUcmFja2VyUHJvdmlkZXIgPSBvcHRzLmJsb2NrVHJhY2tlclByb3ZpZGVyIHx8IGRpcmVjdFByb3ZpZGVyXG4gIHNlbGYuX2Jsb2NrVHJhY2tlciA9IG9wdHMuYmxvY2tUcmFja2VyIHx8IG5ldyBFdGhCbG9ja1RyYWNrZXIoe1xuICAgIHByb3ZpZGVyOiBibG9ja1RyYWNrZXJQcm92aWRlcixcbiAgICBwb2xsaW5nSW50ZXJ2YWw6IG9wdHMucG9sbGluZ0ludGVydmFsIHx8IDQwMDAsXG4gICAgc2V0U2tpcENhY2hlRmxhZzogdHJ1ZSxcbiAgfSlcblxuICAvLyBzZXQgaW5pdGlhbGl6YXRpb24gYmxvY2tlclxuICBzZWxmLl9yZWFkeSA9IG5ldyBTdG9wbGlnaHQoKVxuXG4gIC8vIGxvY2FsIHN0YXRlXG4gIHNlbGYuY3VycmVudEJsb2NrID0gbnVsbFxuICBzZWxmLl9wcm92aWRlcnMgPSBbXVxufVxuXG4vLyBwdWJsaWNcblxuV2ViM1Byb3ZpZGVyRW5naW5lLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKGNiID0gbm9vcCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgLy8gdHJpZ2dlciBzdGFydFxuICBzZWxmLl9yZWFkeS5nbygpXG5cbiAgLy8gb24gbmV3IGJsb2NrLCByZXF1ZXN0IGJsb2NrIGJvZHkgYW5kIGVtaXQgYXMgZXZlbnRzXG4gIHNlbGYuX2Jsb2NrVHJhY2tlci5vbignbGF0ZXN0JywgKGJsb2NrTnVtYmVyKSA9PiB7XG4gICAgLy8gZ2V0IGJsb2NrIGJvZHlcbiAgICBzZWxmLl9nZXRCbG9ja0J5TnVtYmVyV2l0aFJldHJ5KGJsb2NrTnVtYmVyLCAoZXJyLCBibG9jaykgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgY29uc29sZS5sb2coYmxvY2spXG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBibG9ja1wiKSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBidWZmZXJCbG9jayA9IHRvQnVmZmVyQmxvY2soYmxvY2spXG4gICAgICAvLyBzZXQgY3VycmVudCArIGVtaXQgXCJibG9ja1wiIGV2ZW50XG4gICAgICBzZWxmLl9zZXRDdXJyZW50QmxvY2soYnVmZmVyQmxvY2spXG4gICAgICAvLyBlbWl0IG90aGVyIGV2ZW50c1xuICAgICAgc2VsZi5lbWl0KCdyYXdCbG9jaycsIGJsb2NrKVxuICAgICAgc2VsZi5lbWl0KCdsYXRlc3QnLCBibG9jaylcbiAgICB9KVxuICB9KVxuXG4gIC8vIGZvcndhcmQgb3RoZXIgZXZlbnRzXG4gIHNlbGYuX2Jsb2NrVHJhY2tlci5vbignc3luYycsIHNlbGYuZW1pdC5iaW5kKHNlbGYsICdzeW5jJykpXG4gIHNlbGYuX2Jsb2NrVHJhY2tlci5vbignZXJyb3InLCBzZWxmLmVtaXQuYmluZChzZWxmLCAnZXJyb3InKSlcblxuICAvLyB1cGRhdGUgc3RhdGVcbiAgc2VsZi5fcnVubmluZyA9IHRydWVcbiAgLy8gc2lnbmFsIHRoYXQgd2Ugc3RhcnRlZFxuICBzZWxmLmVtaXQoJ3N0YXJ0Jylcbn1cblxuV2ViM1Byb3ZpZGVyRW5naW5lLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgLy8gc3RvcCBibG9jayBwb2xsaW5nIGJ5IHJlbW92aW5nIGV2ZW50IGxpc3RlbmVyc1xuICBzZWxmLl9ibG9ja1RyYWNrZXIucmVtb3ZlQWxsTGlzdGVuZXJzKClcbiAgLy8gdXBkYXRlIHN0YXRlXG4gIHNlbGYuX3J1bm5pbmcgPSBmYWxzZVxuICAvLyBzaWduYWwgdGhhdCB3ZSBzdG9wcGVkXG4gIHNlbGYuZW1pdCgnc3RvcCcpXG59XG5cbldlYjNQcm92aWRlckVuZ2luZS5wcm90b3R5cGUuaXNSdW5uaW5nID0gZnVuY3Rpb24oKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgcmV0dXJuIHNlbGYuX3J1bm5pbmdcbn1cblxuV2ViM1Byb3ZpZGVyRW5naW5lLnByb3RvdHlwZS5hZGRQcm92aWRlciA9IGZ1bmN0aW9uKHNvdXJjZSwgaW5kZXgpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgIHNlbGYuX3Byb3ZpZGVycy5zcGxpY2UoaW5kZXgsIDAsIHNvdXJjZSlcbiAgfSBlbHNlIHtcbiAgICBzZWxmLl9wcm92aWRlcnMucHVzaChzb3VyY2UpXG4gIH1cbiAgc291cmNlLnNldEVuZ2luZSh0aGlzKVxufVxuXG5XZWIzUHJvdmlkZXJFbmdpbmUucHJvdG90eXBlLnJlbW92ZVByb3ZpZGVyID0gZnVuY3Rpb24oc291cmNlKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgY29uc3QgaW5kZXggPSBzZWxmLl9wcm92aWRlcnMuaW5kZXhPZihzb3VyY2UpXG4gIGlmIChpbmRleCA8IDApIHRocm93IG5ldyBFcnJvcignUHJvdmlkZXIgbm90IGZvdW5kLicpXG4gIHNlbGYuX3Byb3ZpZGVycy5zcGxpY2UoaW5kZXgsIDEpXG59XG5cbldlYjNQcm92aWRlckVuZ2luZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKHBheWxvYWQpe1xuICB0aHJvdyBuZXcgRXJyb3IoJ1dlYjNQcm92aWRlckVuZ2luZSBkb2VzIG5vdCBzdXBwb3J0IHN5bmNocm9ub3VzIHJlcXVlc3RzLicpXG59XG5cbldlYjNQcm92aWRlckVuZ2luZS5wcm90b3R5cGUuc2VuZEFzeW5jID0gZnVuY3Rpb24ocGF5bG9hZCwgY2Ipe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBzZWxmLl9yZWFkeS5hd2FpdChmdW5jdGlvbigpe1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkpIHtcbiAgICAgIC8vIGhhbmRsZSBiYXRjaFxuICAgICAgbWFwKHBheWxvYWQsIHNlbGYuX2hhbmRsZUFzeW5jLmJpbmQoc2VsZiksIGNiKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYW5kbGUgc2luZ2xlXG4gICAgICBzZWxmLl9oYW5kbGVBc3luYyhwYXlsb2FkLCBjYilcbiAgICB9XG5cbiAgfSlcbn1cblxuLy8gcHJpdmF0ZVxuXG5XZWIzUHJvdmlkZXJFbmdpbmUucHJvdG90eXBlLl9nZXRCbG9ja0J5TnVtYmVyV2l0aFJldHJ5ID0gZnVuY3Rpb24oYmxvY2tOdW1iZXIsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgbGV0IHJldHJpZXNSZW1haW5pbmcgPSA1XG5cbiAgYXR0ZW1wdFJlcXVlc3QoKVxuICByZXR1cm5cblxuICBmdW5jdGlvbiBhdHRlbXB0UmVxdWVzdCAoKSB7XG4gICAgc2VsZi5fZ2V0QmxvY2tCeU51bWJlcihibG9ja051bWJlciwgYWZ0ZXJSZXF1ZXN0KVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJSZXF1ZXN0IChlcnIsIGJsb2NrKSB7XG4gICAgLy8gYW5vbWFsb3VzIGVycm9yIG9jY3VycmVkXG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICAvLyBibG9jayBub3QgcmVhZHkgeWV0XG4gICAgaWYgKCFibG9jaykge1xuICAgICAgaWYgKHJldHJpZXNSZW1haW5pbmcgPiAwKSB7XG4gICAgICAgIC8vIHdhaXQgMXMgdGhlbiB0cnkgYWdhaW5cbiAgICAgICAgcmV0cmllc1JlbWFpbmluZy0tXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGF0dGVtcHRSZXF1ZXN0KClcbiAgICAgICAgfSwgMTAwMClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnaXZlIHVwLCByZXR1cm4gYSBudWxsIGJsb2NrXG4gICAgICAgIGNiKG51bGwsIG51bGwpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICAvLyBvdGhlcndpc2UgcmV0dXJuIHJlc3VsdFxuICAgIGNiKG51bGwsIGJsb2NrKVxuICAgIHJldHVyblxuICB9XG59XG5cblxuV2ViM1Byb3ZpZGVyRW5naW5lLnByb3RvdHlwZS5fZ2V0QmxvY2tCeU51bWJlciA9IGZ1bmN0aW9uKGJsb2NrTnVtYmVyLCBjYikge1xuICBjb25zdCByZXEgPSBjcmVhdGVQYXlsb2FkKHsgbWV0aG9kOiAnZXRoX2dldEJsb2NrQnlOdW1iZXInLCBwYXJhbXM6IFtibG9ja051bWJlciwgZmFsc2VdLCBza2lwQ2FjaGU6IHRydWUgfSlcbiAgdGhpcy5faGFuZGxlQXN5bmMocmVxLCAoZXJyLCByZXMpID0+IHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIHJldHVybiBjYihudWxsLCByZXMucmVzdWx0KVxuICB9KVxufVxuXG5XZWIzUHJvdmlkZXJFbmdpbmUucHJvdG90eXBlLl9oYW5kbGVBc3luYyA9IGZ1bmN0aW9uKHBheWxvYWQsIGZpbmlzaGVkKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgY3VycmVudFByb3ZpZGVyID0gLTFcbiAgdmFyIHJlc3VsdCA9IG51bGxcbiAgdmFyIGVycm9yID0gbnVsbFxuXG4gIHZhciBzdGFjayA9IFtdXG5cbiAgbmV4dCgpXG5cbiAgZnVuY3Rpb24gbmV4dChhZnRlcikge1xuICAgIGN1cnJlbnRQcm92aWRlciArPSAxXG4gICAgc3RhY2sudW5zaGlmdChhZnRlcilcblxuICAgIC8vIEJ1YmJsZWQgZG93biBhcyBmYXIgYXMgd2UgY291bGQgZ28sIGFuZCB0aGUgcmVxdWVzdCB3YXNuJ3RcbiAgICAvLyBoYW5kbGVkLiBSZXR1cm4gYW4gZXJyb3IuXG4gICAgaWYgKGN1cnJlbnRQcm92aWRlciA+PSBzZWxmLl9wcm92aWRlcnMubGVuZ3RoKSB7XG4gICAgICBlbmQobmV3IEVycm9yKCdSZXF1ZXN0IGZvciBtZXRob2QgXCInICsgcGF5bG9hZC5tZXRob2QgKyAnXCIgbm90IGhhbmRsZWQgYnkgYW55IHN1YnByb3ZpZGVyLiBQbGVhc2UgY2hlY2sgeW91ciBzdWJwcm92aWRlciBjb25maWd1cmF0aW9uIHRvIGVuc3VyZSB0aGlzIG1ldGhvZCBpcyBoYW5kbGVkLicpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcHJvdmlkZXIgPSBzZWxmLl9wcm92aWRlcnNbY3VycmVudFByb3ZpZGVyXVxuICAgICAgICBwcm92aWRlci5oYW5kbGVSZXF1ZXN0KHBheWxvYWQsIG5leHQsIGVuZClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZW5kKGUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kKF9lcnJvciwgX3Jlc3VsdCkge1xuICAgIGVycm9yID0gX2Vycm9yXG4gICAgcmVzdWx0ID0gX3Jlc3VsdFxuXG4gICAgZWFjaFNlcmllcyhzdGFjaywgZnVuY3Rpb24oZm4sIGNhbGxiYWNrKSB7XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICBmbihlcnJvciwgcmVzdWx0LCBjYWxsYmFjaylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbigpIHtcblxuICAgICAgdmFyIHJlc3VsdE9iaiA9IHtcbiAgICAgICAgaWQ6IHBheWxvYWQuaWQsXG4gICAgICAgIGpzb25ycGM6IHBheWxvYWQuanNvbnJwYyxcbiAgICAgICAgcmVzdWx0OiByZXN1bHRcbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0T2JqLmVycm9yID0ge1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLnN0YWNrIHx8IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IsXG4gICAgICAgICAgY29kZTogLTMyMDAwXG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVzcG9uZCB3aXRoIGJvdGggZXJyb3IgZm9ybWF0c1xuICAgICAgICBmaW5pc2hlZChlcnJvciwgcmVzdWx0T2JqKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmluaXNoZWQobnVsbCwgcmVzdWx0T2JqKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLy9cbi8vIGZyb20gcmVtb3RlLWRhdGFcbi8vXG5cbldlYjNQcm92aWRlckVuZ2luZS5wcm90b3R5cGUuX3NldEN1cnJlbnRCbG9jayA9IGZ1bmN0aW9uKGJsb2NrKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgc2VsZi5jdXJyZW50QmxvY2sgPSBibG9ja1xuICBzZWxmLmVtaXQoJ2Jsb2NrJywgYmxvY2spXG59XG5cbi8vIHV0aWxcblxuZnVuY3Rpb24gdG9CdWZmZXJCbG9jayAoanNvbkJsb2NrKSB7XG4gIHJldHVybiB7XG4gICAgbnVtYmVyOiAgICAgICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2subnVtYmVyKSxcbiAgICBoYXNoOiAgICAgICAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5oYXNoKSxcbiAgICBwYXJlbnRIYXNoOiAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5wYXJlbnRIYXNoKSxcbiAgICBub25jZTogICAgICAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5ub25jZSksXG4gICAgbWl4SGFzaDogICAgICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2subWl4SGFzaCksXG4gICAgc2hhM1VuY2xlczogICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2suc2hhM1VuY2xlcyksXG4gICAgbG9nc0Jsb29tOiAgICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2subG9nc0Jsb29tKSxcbiAgICB0cmFuc2FjdGlvbnNSb290OiBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay50cmFuc2FjdGlvbnNSb290KSxcbiAgICBzdGF0ZVJvb3Q6ICAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5zdGF0ZVJvb3QpLFxuICAgIHJlY2VpcHRzUm9vdDogICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLnJlY2VpcHRSb290IHx8IGpzb25CbG9jay5yZWNlaXB0c1Jvb3QpLFxuICAgIG1pbmVyOiAgICAgICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLm1pbmVyKSxcbiAgICBkaWZmaWN1bHR5OiAgICAgICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay5kaWZmaWN1bHR5KSxcbiAgICB0b3RhbERpZmZpY3VsdHk6ICBldGhVdGlsLnRvQnVmZmVyKGpzb25CbG9jay50b3RhbERpZmZpY3VsdHkpLFxuICAgIHNpemU6ICAgICAgICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLnNpemUpLFxuICAgIGV4dHJhRGF0YTogICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLmV4dHJhRGF0YSksXG4gICAgZ2FzTGltaXQ6ICAgICAgICAgZXRoVXRpbC50b0J1ZmZlcihqc29uQmxvY2suZ2FzTGltaXQpLFxuICAgIGdhc1VzZWQ6ICAgICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLmdhc1VzZWQpLFxuICAgIHRpbWVzdGFtcDogICAgICAgIGV0aFV0aWwudG9CdWZmZXIoanNvbkJsb2NrLnRpbWVzdGFtcCksXG4gICAgdHJhbnNhY3Rpb25zOiAgICAganNvbkJsb2NrLnRyYW5zYWN0aW9ucyxcbiAgfVxufVxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5CdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBCdWZmZXIgPSB3aW5kb3cuQnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0IDwgbnVtYmVyLmxlbmd0aCkge1xuICAgICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQsIGVuZGlhbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgICAgIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgICAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleDRCaXRzIChzdHJpbmcsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG4gICAgLy8gJ0EnIC0gJ0YnXG4gICAgaWYgKGMgPj0gNjUgJiYgYyA8PSA3MCkge1xuICAgICAgcmV0dXJuIGMgLSA1NTtcbiAgICAvLyAnYScgLSAnZidcbiAgICB9IGVsc2UgaWYgKGMgPj0gOTcgJiYgYyA8PSAxMDIpIHtcbiAgICAgIHJldHVybiBjIC0gODc7XG4gICAgLy8gJzAnIC0gJzknXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoYyAtIDQ4KSAmIDB4ZjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhleEJ5dGUgKHN0cmluZywgbG93ZXJCb3VuZCwgaW5kZXgpIHtcbiAgICB2YXIgciA9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGluZGV4IC0gMSA+PSBsb3dlckJvdW5kKSB7XG4gICAgICByIHw9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCAtIDEpIDw8IDQ7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCwgZW5kaWFuKSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgLy8gMjQtYml0cyBjaHVua3NcbiAgICB2YXIgb2ZmID0gMDtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgaSAtPSAyKSB7XG4gICAgICAgIHcgPSBwYXJzZUhleEJ5dGUobnVtYmVyLCBzdGFydCwgaSkgPDwgb2ZmO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgJiAweDNmZmZmZmY7XG4gICAgICAgIGlmIChvZmYgPj0gMTgpIHtcbiAgICAgICAgICBvZmYgLT0gMTg7XG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA+Pj4gMjY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmICs9IDg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnNlTGVuZ3RoID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgZm9yIChpID0gcGFyc2VMZW5ndGggJSAyID09PSAwID8gc3RhcnQgKyAxIDogc3RhcnQ7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIEJOIHY1IGluc3RhbmNlXG4gICAgICAgIHIuX3N0cmlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrJyksXG4gICAga2VjY2FrMjI0ID0gX3JlcXVpcmUua2VjY2FrMjI0LFxuICAgIGtlY2NhazM4NCA9IF9yZXF1aXJlLmtlY2NhazM4NCxcbiAgICBrMjU2ID0gX3JlcXVpcmUua2VjY2FrMjU2LFxuICAgIGtlY2NhazUxMiA9IF9yZXF1aXJlLmtlY2NhazUxMjtcblxudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJy4vc2VjcDI1NmsxLWFkYXB0ZXInKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBybHAgPSByZXF1aXJlKCdybHAnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG5PYmplY3QuYXNzaWduKGV4cG9ydHMsIHJlcXVpcmUoJ2V0aGpzLXV0aWwnKSk7XG5cbi8qKlxuICogdGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhpcyBWTSBjYW4gaGFuZGxlIChhIGBgYEJOYGBgKVxuICogQHZhciB7Qk59IE1BWF9JTlRFR0VSXG4gKi9cbmV4cG9ydHMuTUFYX0lOVEVHRVIgPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnLCAxNik7XG5cbi8qKlxuICogMl4yNTYgKGEgYGBgQk5gYGApXG4gKiBAdmFyIHtCTn0gVFdPX1BPVzI1NlxuICovXG5leHBvcnRzLlRXT19QT1cyNTYgPSBuZXcgQk4oJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywgMTYpO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsIChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X05VTExfU1xuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MgPSAnYzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG5leHBvcnRzLlNIQTNfTlVMTF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsIChhIGBgYEJ1ZmZlcmBgYClcbiAqIEB2YXIge0J1ZmZlcn0gS0VDQ0FLMjU2X05VTExcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfTlVMTCA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUywgJ2hleCcpO1xuZXhwb3J0cy5TSEEzX05VTEwgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5IChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X1JMUF9BUlJBWV9TXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gJzFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDcnO1xuZXhwb3J0cy5TSEEzX1JMUF9BUlJBWV9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1M7XG5cbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXkgKGEgYGBgQnVmZmVyYGBgKVxuICogQHZhciB7QnVmZmVyfSBLRUNDQUsyNTZfUkxQX0FSUkFZXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TLCAnaGV4Jyk7XG5leHBvcnRzLlNIQTNfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZO1xuXG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGwgIChhIGBgYFN0cmluZ2BgYClcbiAqIEB2YXIge1N0cmluZ30gS0VDQ0FLMjU2X1JMUF9TXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gJzU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjEnO1xuZXhwb3J0cy5TSEEzX1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1M7XG5cbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbCAoYSBgYGBCdWZmZXJgYGApXG4gKiBAdmFyIHtCdWZmZXJ9IEtFQ0NBSzI1Nl9STFBcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQID0gQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MsICdoZXgnKTtcbmV4cG9ydHMuU0hBM19STFAgPSBleHBvcnRzLktFQ0NBSzI1Nl9STFA7XG5cbi8qKlxuICogW2BCTmBdKGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzKVxuICogQHZhciB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydHMuQk4gPSBCTjtcblxuLyoqXG4gKiBbYHJscGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bWpzL3JscClcbiAqIEB2YXIge0Z1bmN0aW9ufVxuICovXG5leHBvcnRzLnJscCA9IHJscDtcblxuLyoqXG4gKiBbYHNlY3AyNTZrMWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvc2VjcDI1NmsxLW5vZGUvKVxuICogQHZhciB7T2JqZWN0fVxuICovXG5leHBvcnRzLnNlY3AyNTZrMSA9IHNlY3AyNTZrMTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgYnVmZmVyIGZpbGxlZCB3aXRoIDBzXG4gKiBAbWV0aG9kIHplcm9zXG4gKiBAcGFyYW0ge051bWJlcn0gYnl0ZXMgIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIGJ1ZmZlciBzaG91bGQgYmVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy56ZXJvcyA9IGZ1bmN0aW9uIChieXRlcykge1xuICByZXR1cm4gQnVmZmVyLmFsbG9jVW5zYWZlKGJ5dGVzKS5maWxsKDApO1xufTtcblxuLyoqXG4gICogUmV0dXJucyBhIHplcm8gYWRkcmVzc1xuICAqIEBtZXRob2QgemVyb0FkZHJlc3NcbiAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICovXG5leHBvcnRzLnplcm9BZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYWRkcmVzc0xlbmd0aCA9IDIwO1xuICB2YXIgemVyb0FkZHJlc3MgPSBleHBvcnRzLnplcm9zKGFkZHJlc3NMZW5ndGgpO1xuICByZXR1cm4gZXhwb3J0cy5idWZmZXJUb0hleCh6ZXJvQWRkcmVzcyk7XG59O1xuXG4vKipcbiAqIExlZnQgUGFkcyBhbiBgQXJyYXlgIG9yIGBCdWZmZXJgIHdpdGggbGVhZGluZyB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIE9yIGl0IHRydW5jYXRlcyB0aGUgYmVnaW5uaW5nIGlmIGl0IGV4Y2VlZHMuXG4gKiBAbWV0aG9kIGxzZXRMZW5ndGhcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fSBtc2cgdGhlIHZhbHVlIHRvIHBhZFxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtyaWdodD1mYWxzZV0gd2hldGhlciB0byBzdGFydCBwYWRkaW5nIGZvcm0gdGhlIGxlZnQgb3IgcmlnaHRcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheX1cbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhMZWZ0ID0gZXhwb3J0cy5zZXRMZW5ndGggPSBmdW5jdGlvbiAobXNnLCBsZW5ndGgsIHJpZ2h0KSB7XG4gIHZhciBidWYgPSBleHBvcnRzLnplcm9zKGxlbmd0aCk7XG4gIG1zZyA9IGV4cG9ydHMudG9CdWZmZXIobXNnKTtcbiAgaWYgKHJpZ2h0KSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgIG1zZy5jb3B5KGJ1Zik7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnNsaWNlKDAsIGxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgIG1zZy5jb3B5KGJ1ZiwgbGVuZ3RoIC0gbXNnLmxlbmd0aCk7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnNsaWNlKC1sZW5ndGgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJpZ2h0IFBhZHMgYW4gYEFycmF5YCBvciBgQnVmZmVyYCB3aXRoIGxlYWRpbmcgemVyb3MgdGlsbCBpdCBoYXMgYGxlbmd0aGAgYnl0ZXMuXG4gKiBPciBpdCB0cnVuY2F0ZXMgdGhlIGJlZ2lubmluZyBpZiBpdCBleGNlZWRzLlxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl9IG1zZyB0aGUgdmFsdWUgdG8gcGFkXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIG91dHB1dCBzaG91bGQgYmVcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheX1cbiAqL1xuZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCkge1xuICByZXR1cm4gZXhwb3J0cy5zZXRMZW5ndGgobXNnLCBsZW5ndGgsIHRydWUpO1xufTtcblxuLyoqXG4gKiBUcmltcyBsZWFkaW5nIHplcm9zIGZyb20gYSBgQnVmZmVyYCBvciBhbiBgQXJyYXlgXG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd9IGFcbiAqIEByZXR1cm4ge0J1ZmZlcnxBcnJheXxTdHJpbmd9XG4gKi9cbmV4cG9ydHMudW5wYWQgPSBleHBvcnRzLnN0cmlwWmVyb3MgPSBmdW5jdGlvbiAoYSkge1xuICBhID0gZXhwb3J0cy5zdHJpcEhleFByZWZpeChhKTtcbiAgdmFyIGZpcnN0ID0gYVswXTtcbiAgd2hpbGUgKGEubGVuZ3RoID4gMCAmJiBmaXJzdC50b1N0cmluZygpID09PSAnMCcpIHtcbiAgICBhID0gYS5zbGljZSgxKTtcbiAgICBmaXJzdCA9IGFbMF07XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuLyoqXG4gKiBBdHRlbXB0cyB0byB0dXJuIGEgdmFsdWUgaW50byBhIGBCdWZmZXJgLiBBcyBpbnB1dCBpdCBzdXBwb3J0cyBgQnVmZmVyYCwgYFN0cmluZ2AsIGBOdW1iZXJgLCBudWxsL3VuZGVmaW5lZCwgYEJOYCBhbmQgb3RoZXIgb2JqZWN0cyB3aXRoIGEgYHRvQXJyYXkoKWAgbWV0aG9kLlxuICogQHBhcmFtIHsqfSB2IHRoZSB2YWx1ZVxuICovXG5leHBvcnRzLnRvQnVmZmVyID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodikpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgdiA9IEJ1ZmZlci5mcm9tKHYpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZXhwb3J0cy5pc0hleFN0cmluZyh2KSkge1xuICAgICAgICB2ID0gQnVmZmVyLmZyb20oZXhwb3J0cy5wYWRUb0V2ZW4oZXhwb3J0cy5zdHJpcEhleFByZWZpeCh2KSksICdoZXgnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYgPSBCdWZmZXIuZnJvbSh2KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgICAgdiA9IGV4cG9ydHMuaW50VG9CdWZmZXIodik7XG4gICAgfSBlbHNlIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgICB9IGVsc2UgaWYgKEJOLmlzQk4odikpIHtcbiAgICAgIHYgPSB2LnRvQXJyYXlMaWtlKEJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgIC8vIGNvbnZlcnRzIGEgQk4gdG8gYSBCdWZmZXJcbiAgICAgIHYgPSBCdWZmZXIuZnJvbSh2LnRvQXJyYXkoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0eXBlJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIHRvIGEgYE51bWJlcmBcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEB0aHJvd3MgSWYgdGhlIGlucHV0IG51bWJlciBleGNlZWRzIDUzIGJpdHMuXG4gKi9cbmV4cG9ydHMuYnVmZmVyVG9JbnQgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHJldHVybiBuZXcgQk4oZXhwb3J0cy50b0J1ZmZlcihidWYpKS50b051bWJlcigpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIGludG8gYSBoZXggYFN0cmluZ2BcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5idWZmZXJUb0hleCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgYnVmID0gZXhwb3J0cy50b0J1ZmZlcihidWYpO1xuICByZXR1cm4gJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4Jyk7XG59O1xuXG4vKipcbiAqIEludGVycHJldHMgYSBgQnVmZmVyYCBhcyBhIHNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGEgYEJOYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbnVtXG4gKiBAcmV0dXJuIHtCTn1cbiAqL1xuZXhwb3J0cy5mcm9tU2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbmV3IEJOKG51bSkuZnJvbVR3b3MoMjU2KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBgQk5gIHRvIGFuIHVuc2lnbmVkIGludGVnZXIgYW5kIHJldHVybnMgaXQgYXMgYSBgQnVmZmVyYC4gQXNzdW1lcyAyNTYtYml0IG51bWJlcnMuXG4gKiBAcGFyYW0ge0JOfSBudW1cbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy50b1Vuc2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20obnVtLnRvVHdvcygyNTYpLnRvQXJyYXkoKSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgS2VjY2FrIGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge051bWJlcn0gW2JpdHM9MjU2XSB0aGUgS2VjY2FrIHdpZHRoXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMua2VjY2FrID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgYSA9IGV4cG9ydHMudG9CdWZmZXIoYSk7XG4gIGlmICghYml0cykgYml0cyA9IDI1NjtcblxuICBzd2l0Y2ggKGJpdHMpIHtcbiAgICBjYXNlIDIyNDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazIyNChhKTtcbiAgICAgIH1cbiAgICBjYXNlIDI1NjpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGsyNTYoYSk7XG4gICAgICB9XG4gICAgY2FzZSAzODQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBrZWNjYWszODQoYSk7XG4gICAgICB9XG4gICAgY2FzZSA1MTI6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBrZWNjYWs1MTIoYSk7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGQgYWxnb3JpdGhtOiBrZWNjYWsnICsgYml0cyk7XG4gICAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIGlucHV0LCBhbGlhcyBmb3Iga2VjY2FrKGEsIDI1NilcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXJ9IGEgdGhlIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5rZWNjYWsyNTYgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gZXhwb3J0cy5rZWNjYWsoYSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgKEtlY2NhaykgaGFzaCBvZiB0aGUgaW5wdXQgW09CU09MRVRFXVxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcn0gYSB0aGUgaW5wdXQgZGF0YVxuICogQHBhcmFtIHtOdW1iZXJ9IFtiaXRzPTI1Nl0gdGhlIFNIQS0zIHdpZHRoXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2hhMyA9IGV4cG9ydHMua2VjY2FrO1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBMjU2IGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMuc2hhMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgYSA9IGV4cG9ydHMudG9CdWZmZXIoYSk7XG4gIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgUklQRU1EMTYwIGhhc2ggb2YgdGhlIGlucHV0XG4gKiBAcGFyYW0ge0J1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyfSBhIHRoZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBhZGRlZCB3aGV0aGVyIGl0IHNob3VsZCBiZSBwYWRkZWQgdG8gMjU2IGJpdHMgb3Igbm90XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmV4cG9ydHMucmlwZW1kMTYwID0gZnVuY3Rpb24gKGEsIHBhZGRlZCkge1xuICBhID0gZXhwb3J0cy50b0J1ZmZlcihhKTtcbiAgdmFyIGhhc2ggPSBjcmVhdGVIYXNoKCdybWQxNjAnKS51cGRhdGUoYSkuZGlnZXN0KCk7XG4gIGlmIChwYWRkZWQgPT09IHRydWUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5zZXRMZW5ndGgoaGFzaCwgMzIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoYXNoO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgaGFzaCBvZiB0aGUgUkxQIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXRcbiAqIEBwYXJhbSB7QnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXJ9IGEgdGhlIGlucHV0IGRhdGFcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5ybHBoYXNoID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIGV4cG9ydHMua2VjY2FrKHJscC5lbmNvZGUoYSkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHByaXZhdGUga2V5IHNhdGlzZmllcyB0aGUgcnVsZXMgb2YgdGhlIGN1cnZlIHNlY3AyNTZrMS5cbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRQcml2YXRlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgcmV0dXJuIHNlY3AyNTZrMS5wcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHB1YmxpYyBrZXkgc2F0aXNmaWVzIHRoZSBydWxlcyBvZiB0aGUgY3VydmUgc2VjcDI1NmsxXG4gKiBhbmQgdGhlIHJlcXVpcmVtZW50cyBvZiBFdGhlcmV1bS5cbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleSwgdW5sZXNzIHNhbml0aXplIGlzIGVuYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3Nhbml0aXplPWZhbHNlXSBBY2NlcHQgcHVibGljIGtleXMgaW4gb3RoZXIgZm9ybWF0c1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5pc1ZhbGlkUHVibGljID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgc2FuaXRpemUpIHtcbiAgaWYgKHB1YmxpY0tleS5sZW5ndGggPT09IDY0KSB7XG4gICAgLy8gQ29udmVydCB0byBTRUMxIGZvciBzZWNwMjU2azFcbiAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbNF0pLCBwdWJsaWNLZXldKSk7XG4gIH1cblxuICBpZiAoIXNhbml0aXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlWZXJpZnkocHVibGljS2V5KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHB1YmxpYyBrZXkuXG4gKiBBY2NlcHRzIFwiRXRoZXJldW0gcHVibGljIGtleXNcIiBhbmQgU0VDMSBlbmNvZGVkIGtleXMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHViS2V5IFRoZSB0d28gcG9pbnRzIG9mIGFuIHVuY29tcHJlc3NlZCBrZXksIHVubGVzcyBzYW5pdGl6ZSBpcyBlbmFibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtzYW5pdGl6ZT1mYWxzZV0gQWNjZXB0IHB1YmxpYyBrZXlzIGluIG90aGVyIGZvcm1hdHNcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZXhwb3J0cy5wdWJUb0FkZHJlc3MgPSBleHBvcnRzLnB1YmxpY1RvQWRkcmVzcyA9IGZ1bmN0aW9uIChwdWJLZXksIHNhbml0aXplKSB7XG4gIHB1YktleSA9IGV4cG9ydHMudG9CdWZmZXIocHViS2V5KTtcbiAgaWYgKHNhbml0aXplICYmIHB1YktleS5sZW5ndGggIT09IDY0KSB7XG4gICAgcHViS2V5ID0gc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQocHViS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG4gIH1cbiAgYXNzZXJ0KHB1YktleS5sZW5ndGggPT09IDY0KTtcbiAgLy8gT25seSB0YWtlIHRoZSBsb3dlciAxNjBiaXRzIG9mIHRoZSBoYXNoXG4gIHJldHVybiBleHBvcnRzLmtlY2NhayhwdWJLZXkpLnNsaWNlKC0yMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIHB1YmxpYyBrZXkgb2YgYSBnaXZlbiBwcml2YXRlIGtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHByaXZhdGVUb1B1YmxpYyA9IGV4cG9ydHMucHJpdmF0ZVRvUHVibGljID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgcHJpdmF0ZUtleSA9IGV4cG9ydHMudG9CdWZmZXIocHJpdmF0ZUtleSk7XG4gIC8vIHNraXAgdGhlIHR5cGUgZmxhZyBhbmQgdXNlIHRoZSBYLCBZIHBvaW50c1xuICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShwcml2YXRlS2V5LCBmYWxzZSkuc2xpY2UoMSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgcHVibGljIGtleSB0byB0aGUgRXRoZXJldW0gZm9ybWF0LlxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIChwdWJsaWNLZXkpIHtcbiAgcHVibGljS2V5ID0gZXhwb3J0cy50b0J1ZmZlcihwdWJsaWNLZXkpO1xuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gNjQpIHtcbiAgICBwdWJsaWNLZXkgPSBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChwdWJsaWNLZXksIGZhbHNlKS5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gcHVibGljS2V5O1xufTtcblxuLyoqXG4gKiBFQ0RTQSBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbXNnSGFzaFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0cy5lY3NpZ24gPSBmdW5jdGlvbiAobXNnSGFzaCwgcHJpdmF0ZUtleSkge1xuICB2YXIgc2lnID0gc2VjcDI1NmsxLnNpZ24obXNnSGFzaCwgcHJpdmF0ZUtleSk7XG5cbiAgdmFyIHJldCA9IHt9O1xuICByZXQuciA9IHNpZy5zaWduYXR1cmUuc2xpY2UoMCwgMzIpO1xuICByZXQucyA9IHNpZy5zaWduYXR1cmUuc2xpY2UoMzIsIDY0KTtcbiAgcmV0LnYgPSBzaWcucmVjb3ZlcnkgKyAyNztcbiAgcmV0dXJuIHJldDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUga2VjY2FrLTI1NiBoYXNoIG9mIGBtZXNzYWdlYCwgcHJlZml4ZWQgd2l0aCB0aGUgaGVhZGVyIHVzZWQgYnkgdGhlIGBldGhfc2lnbmAgUlBDIGNhbGwuXG4gKiBUaGUgb3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24gY2FuIGJlIGZlZCBpbnRvIGBlY3NpZ25gIHRvIHByb2R1Y2UgdGhlIHNhbWUgc2lnbmF0dXJlIGFzIHRoZSBgZXRoX3NpZ25gXG4gKiBjYWxsIGZvciBhIGdpdmVuIGBtZXNzYWdlYCwgb3IgZmVkIHRvIGBlY3JlY292ZXJgIGFsb25nIHdpdGggYSBzaWduYXR1cmUgdG8gcmVjb3ZlciB0aGUgcHVibGljIGtleVxuICogdXNlZCB0byBwcm9kdWNlIHRoZSBzaWduYXR1cmUuXG4gKiBAcGFyYW0gbWVzc2FnZVxuICogQHJldHVybnMge0J1ZmZlcn0gaGFzaFxuICovXG5leHBvcnRzLmhhc2hQZXJzb25hbE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICB2YXIgcHJlZml4ID0gZXhwb3J0cy50b0J1ZmZlcignXFx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG4nICsgbWVzc2FnZS5sZW5ndGgudG9TdHJpbmcoKSk7XG4gIHJldHVybiBleHBvcnRzLmtlY2NhayhCdWZmZXIuY29uY2F0KFtwcmVmaXgsIG1lc3NhZ2VdKSk7XG59O1xuXG4vKipcbiAqIEVDRFNBIHB1YmxpYyBrZXkgcmVjb3ZlcnkgZnJvbSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBtc2dIYXNoXG4gKiBAcGFyYW0ge051bWJlcn0gdlxuICogQHBhcmFtIHtCdWZmZXJ9IHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IHB1YmxpY0tleVxuICovXG5leHBvcnRzLmVjcmVjb3ZlciA9IGZ1bmN0aW9uIChtc2dIYXNoLCB2LCByLCBzKSB7XG4gIHZhciBzaWduYXR1cmUgPSBCdWZmZXIuY29uY2F0KFtleHBvcnRzLnNldExlbmd0aChyLCAzMiksIGV4cG9ydHMuc2V0TGVuZ3RoKHMsIDMyKV0sIDY0KTtcbiAgdmFyIHJlY292ZXJ5ID0gdiAtIDI3O1xuICBpZiAocmVjb3ZlcnkgIT09IDAgJiYgcmVjb3ZlcnkgIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgfVxuICB2YXIgc2VuZGVyUHViS2V5ID0gc2VjcDI1NmsxLnJlY292ZXIobXNnSGFzaCwgc2lnbmF0dXJlLCByZWNvdmVyeSk7XG4gIHJldHVybiBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChzZW5kZXJQdWJLZXksIGZhbHNlKS5zbGljZSgxKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBzaWduYXR1cmUgcGFyYW1ldGVycyBpbnRvIHRoZSBmb3JtYXQgb2YgYGV0aF9zaWduYCBSUEMgbWV0aG9kXG4gKiBAcGFyYW0ge051bWJlcn0gdlxuICogQHBhcmFtIHtCdWZmZXJ9IHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHNpZ1xuICovXG5leHBvcnRzLnRvUnBjU2lnID0gZnVuY3Rpb24gKHYsIHIsIHMpIHtcbiAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgaWYgKHYgIT09IDI3ICYmIHYgIT09IDI4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlY292ZXJ5IGlkJyk7XG4gIH1cblxuICAvLyBnZXRoIChhbmQgdGhlIFJQQyBldGhfc2lnbiBtZXRob2QpIHVzZXMgdGhlIDY1IGJ5dGUgZm9ybWF0IHVzZWQgYnkgQml0Y29pblxuICAvLyBGSVhNRTogdGhpcyBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1M1xuICByZXR1cm4gZXhwb3J0cy5idWZmZXJUb0hleChCdWZmZXIuY29uY2F0KFtleHBvcnRzLnNldExlbmd0aExlZnQociwgMzIpLCBleHBvcnRzLnNldExlbmd0aExlZnQocywgMzIpLCBleHBvcnRzLnRvQnVmZmVyKHYgLSAyNyldKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgc2lnbmF0dXJlIGZvcm1hdCBvZiB0aGUgYGV0aF9zaWduYCBSUEMgbWV0aG9kIHRvIHNpZ25hdHVyZSBwYXJhbWV0ZXJzXG4gKiBOT1RFOiBhbGwgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBnZXRoOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaWdcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0cy5mcm9tUnBjU2lnID0gZnVuY3Rpb24gKHNpZykge1xuICBzaWcgPSBleHBvcnRzLnRvQnVmZmVyKHNpZyk7XG5cbiAgLy8gTk9URTogd2l0aCBwb3RlbnRpYWwgaW50cm9kdWN0aW9uIG9mIGNoYWluSWQgdGhpcyBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgaWYgKHNpZy5sZW5ndGggIT09IDY1KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBsZW5ndGgnKTtcbiAgfVxuXG4gIHZhciB2ID0gc2lnWzY0XTtcbiAgLy8gc3VwcG9ydCBib3RoIHZlcnNpb25zIG9mIGBldGhfc2lnbmAgcmVzcG9uc2VzXG4gIGlmICh2IDwgMjcpIHtcbiAgICB2ICs9IDI3O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2OiB2LFxuICAgIHI6IHNpZy5zbGljZSgwLCAzMiksXG4gICAgczogc2lnLnNsaWNlKDMyLCA2NClcbiAgfTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gYWRkcmVzcyBvZiBhIGdpdmVuIHByaXZhdGUga2V5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLnByaXZhdGVUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNUb0FkZHJlc3MocHJpdmF0ZVRvUHVibGljKHByaXZhdGVLZXkpKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQuIEFjY2VwdHMgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIHRvb1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuaXNWYWxpZEFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICByZXR1cm4gKC9eMHhbMC05YS1mQS1GXXs0MH0kLy50ZXN0KGFkZHJlc3MpXG4gICk7XG59O1xuXG4vKipcbiAgKiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGlzIGEgemVybyBhZGRyZXNzXG4gICogQG1ldGhvZCBpc1plcm9BZGRyZXNzXG4gICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAqL1xuZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgdmFyIHplcm9BZGRyZXNzID0gZXhwb3J0cy56ZXJvQWRkcmVzcygpO1xuICByZXR1cm4gemVyb0FkZHJlc3MgPT09IGV4cG9ydHMuYWRkSGV4UHJlZml4KGFkZHJlc3MpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2tzdW1tZWQgYWRkcmVzc1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gIGFkZHJlc3MgPSBleHBvcnRzLnN0cmlwSGV4UHJlZml4KGFkZHJlc3MpLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBoYXNoID0gZXhwb3J0cy5rZWNjYWsoYWRkcmVzcykudG9TdHJpbmcoJ2hleCcpO1xuICB2YXIgcmV0ID0gJzB4JztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZHJlc3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocGFyc2VJbnQoaGFzaFtpXSwgMTYpID49IDgpIHtcbiAgICAgIHJldCArPSBhZGRyZXNzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCArPSBhZGRyZXNzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgYWRkcmVzcyBpcyBhIHZhbGlkIGNoZWNrc3VtbWVkIGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICByZXR1cm4gZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzKSAmJiBleHBvcnRzLnRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpID09PSBhZGRyZXNzO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBvZiBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3RcbiAqIEBwYXJhbSB7QnVmZmVyfSBmcm9tIHRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAqIEBwYXJhbSB7QnVmZmVyfSBub25jZSB0aGUgbm9uY2Ugb2YgdGhlIGZyb20gYWNjb3VudFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5leHBvcnRzLmdlbmVyYXRlQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tLCBub25jZSkge1xuICBmcm9tID0gZXhwb3J0cy50b0J1ZmZlcihmcm9tKTtcbiAgbm9uY2UgPSBuZXcgQk4obm9uY2UpO1xuXG4gIGlmIChub25jZS5pc1plcm8oKSkge1xuICAgIC8vIGluIFJMUCB3ZSB3YW50IHRvIGVuY29kZSBudWxsIGluIHRoZSBjYXNlIG9mIHplcm8gbm9uY2VcbiAgICAvLyByZWFkIHRoZSBSTFAgZG9jdW1lbnRhdGlvbiBmb3IgYW4gYW5zd2VyIGlmIHlvdSBkYXJlXG4gICAgbm9uY2UgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIG5vbmNlID0gQnVmZmVyLmZyb20obm9uY2UudG9BcnJheSgpKTtcbiAgfVxuXG4gIC8vIE9ubHkgdGFrZSB0aGUgbG93ZXIgMTYwYml0cyBvZiB0aGUgaGFzaFxuICByZXR1cm4gZXhwb3J0cy5ybHBoYXNoKFtmcm9tLCBub25jZV0pLnNsaWNlKC0yMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3VwcGxpZWQgYWRkcmVzcyBiZWxvbmdzIHRvIGEgcHJlY29tcGlsZWQgYWNjb3VudCAoQnl6YW50aXVtKVxuICogQHBhcmFtIHtCdWZmZXJ8U3RyaW5nfSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzUHJlY29tcGlsZWQgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICB2YXIgYSA9IGV4cG9ydHMudW5wYWQoYWRkcmVzcyk7XG4gIHJldHVybiBhLmxlbmd0aCA9PT0gMSAmJiBhWzBdID49IDEgJiYgYVswXSA8PSA4O1xufTtcblxuLyoqXG4gKiBBZGRzIFwiMHhcIiB0byBhIGdpdmVuIGBTdHJpbmdgIGlmIGl0IGRvZXMgbm90IGFscmVhZHkgc3RhcnQgd2l0aCBcIjB4XCJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5pc0hleFByZWZpeGVkKHN0cikgPyBzdHIgOiAnMHgnICsgc3RyO1xufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBFQ0RTQSBzaWduYXR1cmVcbiAqIEBtZXRob2QgaXNWYWxpZFNpZ25hdHVyZVxuICogQHBhcmFtIHtCdWZmZXJ9IHZcbiAqIEBwYXJhbSB7QnVmZmVyfSByXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc1xuICogQHBhcmFtIHtCb29sZWFufSBbaG9tZXN0ZWFkPXRydWVdXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGZ1bmN0aW9uICh2LCByLCBzLCBob21lc3RlYWQpIHtcbiAgdmFyIFNFQ1AyNTZLMV9OX0RJVl8yID0gbmV3IEJOKCc3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjVkNTc2ZTczNTdhNDUwMWRkZmU5MmY0NjY4MWIyMGEwJywgMTYpO1xuICB2YXIgU0VDUDI1NksxX04gPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnLCAxNik7XG5cbiAgaWYgKHIubGVuZ3RoICE9PSAzMiB8fCBzLmxlbmd0aCAhPT0gMzIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodiAhPT0gMjcgJiYgdiAhPT0gMjgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByID0gbmV3IEJOKHIpO1xuICBzID0gbmV3IEJOKHMpO1xuXG4gIGlmIChyLmlzWmVybygpIHx8IHIuZ3QoU0VDUDI1NksxX04pIHx8IHMuaXNaZXJvKCkgfHwgcy5ndChTRUNQMjU2SzFfTikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaG9tZXN0ZWFkID09PSBmYWxzZSAmJiBuZXcgQk4ocykuY21wKFNFQ1AyNTZLMV9OX0RJVl8yKSA9PT0gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGBCdWZmZXJgIG9yIGBBcnJheWAgdG8gSlNPTlxuICogQHBhcmFtIHtCdWZmZXJ8QXJyYXl9IGJhXG4gKiBAcmV0dXJuIHtBcnJheXxTdHJpbmd8bnVsbH1cbiAqL1xuZXhwb3J0cy5iYVRvSlNPTiA9IGZ1bmN0aW9uIChiYSkge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJhKSkge1xuICAgIHJldHVybiAnMHgnICsgYmEudG9TdHJpbmcoJ2hleCcpO1xuICB9IGVsc2UgaWYgKGJhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJheS5wdXNoKGV4cG9ydHMuYmFUb0pTT04oYmFbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG59O1xuXG4vKipcbiAqIERlZmluZXMgcHJvcGVydGllcyBvbiBhIGBPYmplY3RgLiBJdCBtYWtlIHRoZSBhc3N1bXB0aW9uIHRoYXQgdW5kZXJseWluZyBkYXRhIGlzIGJpbmFyeS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIHRoZSBgT2JqZWN0YCB0byBkZWZpbmUgcHJvcGVydGllcyBvblxuICogQHBhcmFtIHtBcnJheX0gZmllbGRzIGFuIGFycmF5IGZpZWxkcyB0byBkZWZpbmUuIEZpZWxkcyBjYW4gY29udGFpbjpcbiAqICogYG5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnRpZXNcbiAqICogYGxlbmd0aGAgLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBmaWVsZCBjYW4gaGF2ZVxuICogKiBgYWxsb3dMZXNzYCAtIGlmIHRoZSBmaWVsZCBjYW4gYmUgbGVzcyB0aGFuIHRoZSBsZW5ndGhcbiAqICogYGFsbG93RW1wdHlgXG4gKiBAcGFyYW0geyp9IGRhdGEgZGF0YSB0byBiZSB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgZGVmaW5pdGlvbnNcbiAqL1xuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHNlbGYsIGZpZWxkcywgZGF0YSkge1xuICBzZWxmLnJhdyA9IFtdO1xuICBzZWxmLl9maWVsZHMgPSBbXTtcblxuICAvLyBhdHRhY2ggdGhlIGB0b0pTT05gXG4gIHNlbGYudG9KU09OID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICB2YXIgb2JqID0ge307XG4gICAgICBzZWxmLl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgb2JqW2ZpZWxkXSA9ICcweCcgKyBzZWxmW2ZpZWxkXS50b1N0cmluZygnaGV4Jyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzLmJhVG9KU09OKHRoaXMucmF3KTtcbiAgfTtcblxuICBzZWxmLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gcmxwLmVuY29kZShzZWxmLnJhdyk7XG4gIH07XG5cbiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkLCBpKSB7XG4gICAgc2VsZi5fZmllbGRzLnB1c2goZmllbGQubmFtZSk7XG4gICAgZnVuY3Rpb24gZ2V0dGVyKCkge1xuICAgICAgcmV0dXJuIHNlbGYucmF3W2ldO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXR0ZXIodikge1xuICAgICAgdiA9IGV4cG9ydHMudG9CdWZmZXIodik7XG5cbiAgICAgIGlmICh2LnRvU3RyaW5nKCdoZXgnKSA9PT0gJzAwJyAmJiAhZmllbGQuYWxsb3daZXJvKSB7XG4gICAgICAgIHYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZC5hbGxvd0xlc3MgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgIHYgPSBleHBvcnRzLnN0cmlwWmVyb3Modik7XG4gICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPj0gdi5sZW5ndGgsICdUaGUgZmllbGQgJyArIGZpZWxkLm5hbWUgKyAnIG11c3Qgbm90IGhhdmUgbW9yZSAnICsgZmllbGQubGVuZ3RoICsgJyBieXRlcycpO1xuICAgICAgfSBlbHNlIGlmICghKGZpZWxkLmFsbG93WmVybyAmJiB2Lmxlbmd0aCA9PT0gMCkgJiYgZmllbGQubGVuZ3RoKSB7XG4gICAgICAgIGFzc2VydChmaWVsZC5sZW5ndGggPT09IHYubGVuZ3RoLCAnVGhlIGZpZWxkICcgKyBmaWVsZC5uYW1lICsgJyBtdXN0IGhhdmUgYnl0ZSBsZW5ndGggb2YgJyArIGZpZWxkLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYucmF3W2ldID0gdjtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgZmllbGQubmFtZSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZ2V0dGVyLFxuICAgICAgc2V0OiBzZXR0ZXJcbiAgICB9KTtcblxuICAgIGlmIChmaWVsZC5kZWZhdWx0KSB7XG4gICAgICBzZWxmW2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdDtcbiAgICB9XG5cbiAgICAvLyBhdHRhY2ggYWxpYXNcbiAgICBpZiAoZmllbGQuYWxpYXMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBmaWVsZC5hbGlhcywge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgZ2V0OiBnZXR0ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaWYgdGhlIGNvbnN0dWN0b3IgaXMgcGFzc2VkIGRhdGFcbiAgaWYgKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBkYXRhID0gQnVmZmVyLmZyb20oZXhwb3J0cy5zdHJpcEhleFByZWZpeChkYXRhKSwgJ2hleCcpO1xuICAgIH1cblxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBybHAuZGVjb2RlKGRhdGEpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiBzZWxmLl9maWVsZHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignd3JvbmcgbnVtYmVyIG9mIGZpZWxkcyBpbiBkYXRhJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSBhbGwgdGhlIGl0ZW1zIGFyZSBidWZmZXJzXG4gICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgc2VsZltzZWxmLl9maWVsZHNbaV1dID0gZXhwb3J0cy50b0J1ZmZlcihkKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkYXRhKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIGlmIChrZXlzLmluZGV4T2YoZmllbGQubmFtZSkgIT09IC0xKSBzZWxmW2ZpZWxkLm5hbWVdID0gZGF0YVtmaWVsZC5uYW1lXTtcbiAgICAgICAgaWYgKGtleXMuaW5kZXhPZihmaWVsZC5hbGlhcykgIT09IC0xKSBzZWxmW2ZpZWxkLmFsaWFzXSA9IGRhdGFbZmllbGQuYWxpYXNdO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBkYXRhJyk7XG4gICAgfVxuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azEnKTtcblxudmFyIHNlY3AyNTZrMXYzID0gcmVxdWlyZSgnLi9zZWNwMjU2azEtbGliL2luZGV4Jyk7XG52YXIgZGVyID0gcmVxdWlyZSgnLi9zZWNwMjU2azEtbGliL2RlcicpO1xuXG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBwcml2YXRlS2V5XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlWZXJpZnlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgcHJpdmF0ZUtleVZlcmlmeSA9IGZ1bmN0aW9uIHByaXZhdGVLZXlWZXJpZnkocHJpdmF0ZUtleSkge1xuICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwcml2YXRlS2V5IGxlbmd0aCBpcyBub3QgMzJcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBzZWNwMjU2azEucHJpdmF0ZUtleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpO1xufTtcblxuLyoqXG4gKiBFeHBvcnQgYSBwcml2YXRlS2V5IGluIERFUiBmb3JtYXRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleUV4cG9ydFxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xudmFyIHByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiBwcml2YXRlS2V5RXhwb3J0KHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgLy8gcHJpdmF0ZUtleUV4cG9ydCBtZXRob2QgaXMgbm90IHBhcnQgb2Ygc2VjcDI1NmsxIHY0IHBhY2thZ2VcbiAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ByaXZhdGUga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICB2YXIgcHVibGljS2V5ID0gc2VjcDI1NmsxdjMucHJpdmF0ZUtleUV4cG9ydChwcml2YXRlS2V5LCBjb21wcmVzc2VkKTtcblxuICByZXR1cm4gZGVyLnByaXZhdGVLZXlFeHBvcnQocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKTtcbn07XG5cbi8qKlxuICogSW1wb3J0IGEgcHJpdmF0ZUtleSBpbiBERVIgZm9ybWF0XG4gKiBAbWV0aG9kIHByaXZhdGVLZXlJbXBvcnRcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cblxudmFyIHByaXZhdGVLZXlJbXBvcnQgPSBmdW5jdGlvbiBwcml2YXRlS2V5SW1wb3J0KHByaXZhdGVLZXkpIHtcbiAgLy8gcHJpdmF0ZUtleUltcG9ydCBtZXRob2QgaXMgbm90IHBhcnQgb2Ygc2VjcDI1NmsxIHY0IHBhY2thZ2VcbiAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB2M1xuICBwcml2YXRlS2V5ID0gZGVyLnByaXZhdGVLZXlJbXBvcnQocHJpdmF0ZUtleSk7XG4gIGlmIChwcml2YXRlS2V5ICE9PSBudWxsICYmIHByaXZhdGVLZXkubGVuZ3RoID09PSAzMiAmJiBwcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpKSB7XG4gICAgcmV0dXJuIHByaXZhdGVLZXk7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZG4ndCBpbXBvcnQgZnJvbSBERVIgZm9ybWF0XCIpO1xufTtcblxuLyoqXG4gKiBOZWdhdGUgYSBwcml2YXRlS2V5IGJ5IHN1YnRyYWN0aW5nIGl0IGZyb20gdGhlIG9yZGVyIG9mIHRoZSBjdXJ2ZSdzIGJhc2UgcG9pbnRcbiAqIEBtZXRob2QgcHJpdmF0ZUtleU5lZ2F0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHByaXZhdGVLZXlOZWdhdGUgPSBmdW5jdGlvbiBwcml2YXRlS2V5TmVnYXRlKHByaXZhdGVLZXkpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5TmVnYXRlKFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSkpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBpbnZlcnNlIG9mIGEgcHJpdmF0ZUtleSAobW9kdWxvIHRoZSBvcmRlciBvZiB0aGUgY3VydmUncyBiYXNlIHBvaW50KS5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleU1vZEludmVyc2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5TW9kSW52ZXJzZSA9IGZ1bmN0aW9uIHByaXZhdGVLZXlNb2RJbnZlcnNlKHByaXZhdGVLZXkpIHtcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJpdmF0ZSBrZXkgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azF2My5wcml2YXRlS2V5TW9kSW52ZXJzZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSkpKTtcbn07XG5cbi8qKlxuICogVHdlYWsgYSBwcml2YXRlS2V5IGJ5IGFkZGluZyB0d2VhayB0byBpdC5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrQWRkXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5VHdlYWtBZGQgPSBmdW5jdGlvbiBwcml2YXRlS2V5VHdlYWtBZGQocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtBZGQoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB0d2VhaykpO1xufTtcblxuLyoqXG4gKiBUd2VhayBhIHByaXZhdGVLZXkgYnkgbXVsdGlwbHlpbmcgaXQgYnkgYSB0d2Vhay5cbiAqIEBtZXRob2QgcHJpdmF0ZUtleVR3ZWFrTXVsXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwcml2YXRlS2V5VHdlYWtNdWwgPSBmdW5jdGlvbiBwcml2YXRlS2V5VHdlYWtNdWwocHJpdmF0ZUtleSwgdHdlYWspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtNdWwoVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCBVaW50OEFycmF5LmZyb20odHdlYWspKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIHB1YmxpYyBrZXkgZm9yIGEgcHJpdmF0ZUtleS5cbiAqIEBtZXRob2QgcHVibGljS2V5Q3JlYXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHJpdmF0ZUtleVxuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwdWJsaWNLZXlDcmVhdGUgPSBmdW5jdGlvbiBwdWJsaWNLZXlDcmVhdGUocHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleSksIGNvbXByZXNzZWQpKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIHB1YmxpY0tleSB0byBjb21wcmVzc2VkIG9yIHVuY29tcHJlc3NlZCBmb3JtLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb252ZXJ0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHB1YmxpY0tleUNvbnZlcnQgPSBmdW5jdGlvbiBwdWJsaWNLZXlDb252ZXJ0KHB1YmxpY0tleSwgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleUNvbnZlcnQoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIGNvbXByZXNzZWQpKTtcbn07XG5cbi8qKlxuICogVmVyaWZ5IGFuIEVDRFNBIHB1YmxpY0tleS5cbiAqIEBtZXRob2QgcHVibGljS2V5VmVyaWZ5XG4gKiBAcGFyYW0ge0J1ZmZlcn0gcHVibGljS2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgcHVibGljS2V5VmVyaWZ5ID0gZnVuY3Rpb24gcHVibGljS2V5VmVyaWZ5KHB1YmxpY0tleSkge1xuICAvLyBzZWNwMjU2azEgdjQgdmVyc2lvbiB0aHJvd3Mgd2hlbiBwdWJsaWNLZXkgbGVuZ3RoIGlzIG5vdCAzMyBvciA2NVxuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gMzMgJiYgcHVibGljS2V5Lmxlbmd0aCAhPT0gNjUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG59O1xuXG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IGFkZGluZyB0d2VhayB0aW1lcyB0aGUgZ2VuZXJhdG9yIHRvIGl0LlxuICogQG1ldGhvZCBwdWJsaWNLZXlUd2Vha0FkZFxuICogQHBhcmFtIHtCdWZmZXJ9IHB1YmxpY0tleVxuICogQHBhcmFtIHtCdWZmZXJ9IHR3ZWFrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIHB1YmxpY0tleVR3ZWFrQWRkID0gZnVuY3Rpb24gcHVibGljS2V5VHdlYWtBZGQocHVibGljS2V5LCB0d2VhaywgY29tcHJlc3NlZCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc2VjcDI1NmsxLnB1YmxpY0tleVR3ZWFrQWRkKFVpbnQ4QXJyYXkuZnJvbShwdWJsaWNLZXkpLCBVaW50OEFycmF5LmZyb20odHdlYWspLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIFR3ZWFrIGEgcHVibGljS2V5IGJ5IG11bHRpcGx5aW5nIGl0IGJ5IGEgdHdlYWsgdmFsdWVcbiAqIEBtZXRob2QgcHVibGljS2V5VHdlYWtNdWxcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSB0d2Vha1xuICogQHBhcmFtIHtib29sZWFufSBjb21wcmVzc2VkXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBwdWJsaWNLZXlUd2Vha011bCA9IGZ1bmN0aW9uIHB1YmxpY0tleVR3ZWFrTXVsKHB1YmxpY0tleSwgdHdlYWssIGNvbXByZXNzZWQpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMS5wdWJsaWNLZXlUd2Vha011bChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHR3ZWFrKSwgY29tcHJlc3NlZCkpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBnaXZlbiBwdWJsaWNLZXlzIHRvZ2V0aGVyLlxuICogQG1ldGhvZCBwdWJsaWNLZXlDb21iaW5lXG4gKiBAcGFyYW0ge0FycmF5PEJ1ZmZlcj59IHB1YmxpY0tleXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgcHVibGljS2V5Q29tYmluZSA9IGZ1bmN0aW9uIHB1YmxpY0tleUNvbWJpbmUocHVibGljS2V5cywgY29tcHJlc3NlZCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBwdWJsaWNLZXlzLmZvckVhY2goZnVuY3Rpb24gKHB1YmxpY0tleSkge1xuICAgIGtleXMucHVzaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSk7XG4gIH0pO1xuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEucHVibGljS2V5Q29tYmluZShrZXlzLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBzaWduYXR1cmUgdG8gYSBub3JtYWxpemVkIGxvd2VyLVMgZm9ybS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlTm9ybWFsaXplXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVOb3JtYWxpemUgPSBmdW5jdGlvbiBzaWduYXR1cmVOb3JtYWxpemUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlTm9ybWFsaXplKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFNlcmlhbGl6ZSBhbiBFQ0RTQSBzaWduYXR1cmUgaW4gREVSIGZvcm1hdC5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlRXhwb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVFeHBvcnQgPSBmdW5jdGlvbiBzaWduYXR1cmVFeHBvcnQoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlRXhwb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAoZm9sbG93IGJ5IFtCSVA2Nl0oaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDA2Ni5tZWRpYXdpa2kpKS5cbiAqIEBtZXRob2Qgc2lnbmF0dXJlSW1wb3J0XG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduYXR1cmVJbXBvcnQgPSBmdW5jdGlvbiBzaWduYXR1cmVJbXBvcnQoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuc2lnbmF0dXJlSW1wb3J0KFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgREVSIEVDRFNBIHNpZ25hdHVyZSAobm90IGZvbGxvdyBieSBbQklQNjZdKGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNjYubWVkaWF3aWtpKSkuXG4gKiBAbWV0aG9kIHNpZ25hdHVyZUltcG9ydExheFxuICogQHBhcmFtIHtCdWZmZXJ9IHNpZ25hdHVyZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gc2lnbmF0dXJlSW1wb3J0TGF4KHNpZ25hdHVyZSkge1xuICAvLyBzaWduYXR1cmVJbXBvcnRMYXggbWV0aG9kIGlzIG5vdCBwYXJ0IG9mIHNlY3AyNTZrMSB2NCBwYWNrYWdlXG4gIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdjNcbiAgLy8gZW5zdXJlIHRoYXQgc2lnbmF0dXJlIGlzIGdyZWF0ZXIgdGhhbiAwXG4gIGlmIChzaWduYXR1cmUubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NpZ25hdHVyZSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgdmFyIHNpZ09iaiA9IGRlci5zaWduYXR1cmVJbXBvcnRMYXgoc2lnbmF0dXJlKTtcbiAgaWYgKHNpZ09iaiA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvdWxkbid0IHBhcnNlIERFUiBzaWduYXR1cmVcIik7XG4gIH1cblxuICByZXR1cm4gc2VjcDI1NmsxdjMuc2lnbmF0dXJlSW1wb3J0KHNpZ09iaik7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFQ0RTQSBzaWduYXR1cmUuIEFsd2F5cyByZXR1cm4gbG93LVMgc2lnbmF0dXJlLlxuICogQG1ldGhvZCBzaWduXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWVzc2FnZVxuICogQHBhcmFtIHtCdWZmZXJ9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBzaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBzaG91bGQgYmUgYW4gT2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgc2lnbk9wdGlvbnMgPSB2b2lkIDA7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBzaWduT3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5kYXRhIHNob3VsZCBiZSBhIEJ1ZmZlcicpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIC8vIHZhbGlkYXRlIG9wdGlvbi5kYXRhIGxlbmd0aFxuICAgICAgaWYgKG9wdGlvbnMuZGF0YS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvcHRpb25zLmRhdGEgbGVuZ3RoIGlzIGludmFsaWQnKTtcbiAgICAgIH1cblxuICAgICAgc2lnbk9wdGlvbnMuZGF0YSA9IG5ldyBVaW50OEFycmF5KG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9uY2VmbiA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5ub25jZWZuIHNob3VsZCBiZSBhIEZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9uY2Vmbikge1xuICAgICAgLy8gIGNvbnZlcnQgb3B0aW9uLm5vbmNlZm4gZnVuY3Rpb24gc2lnbmF0dXJlXG4gICAgICBzaWduT3B0aW9ucy5ub25jZWZuID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHByaXZhdGVLZXksIGFsZ28sIGRhdGEsIGF0dGVtcHQpIHtcbiAgICAgICAgdmFyIGJ1ZmZlckFsZ28gPSBhbGdvICE9IG51bGwgPyBCdWZmZXIuZnJvbShhbGdvKSA6IG51bGw7XG4gICAgICAgIHZhciBidWZmZXJEYXRhID0gZGF0YSAhPSBudWxsID8gQnVmZmVyLmZyb20oZGF0YSkgOiBudWxsO1xuXG4gICAgICAgIHZhciBidWZmZXIgPSBCdWZmZXIuZnJvbSgnJyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm9uY2Vmbikge1xuICAgICAgICAgIGJ1ZmZlciA9IG9wdGlvbnMubm9uY2VmbihCdWZmZXIuZnJvbShtZXNzYWdlKSwgQnVmZmVyLmZyb20ocHJpdmF0ZUtleSksIGJ1ZmZlckFsZ28sIGJ1ZmZlckRhdGEsIGF0dGVtcHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShidWZmZXIpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgc2lnID0gc2VjcDI1NmsxLmVjZHNhU2lnbihVaW50OEFycmF5LmZyb20obWVzc2FnZSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgc2lnbk9wdGlvbnMpO1xuXG4gIHJldHVybiB7XG4gICAgc2lnbmF0dXJlOiBCdWZmZXIuZnJvbShzaWcuc2lnbmF0dXJlKSxcbiAgICByZWNvdmVyeTogc2lnLnJlY2lkXG4gIH07XG59O1xuXG4vKipcbiAqIFZlcmlmeSBhbiBFQ0RTQSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHZlcmlmeVxuICogQHBhcmFtIHtCdWZmZXJ9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnZhciB2ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgLy8gbm90ZTogc2VjcDI1NmsxIHY0IHZlcmlmeSBtZXRob2QgaGFzIGEgZGlmZmVyZW50IGFyZ3VtZW50IG9yZGVyXG4gIHJldHVybiBzZWNwMjU2azEuZWNkc2FWZXJpZnkoVWludDhBcnJheS5mcm9tKHNpZ25hdHVyZSksIFVpbnQ4QXJyYXkuZnJvbShtZXNzYWdlKSwgcHVibGljS2V5KTtcbn07XG5cbi8qKlxuICogUmVjb3ZlciBhbiBFQ0RTQSBwdWJsaWMga2V5IGZyb20gYSBzaWduYXR1cmUuXG4gKiBAbWV0aG9kIHJlY292ZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlXG4gKiBAcGFyYW0ge051bWJlcn0gcmVjaWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcHJlc3NlZFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG52YXIgcmVjb3ZlciA9IGZ1bmN0aW9uIHJlY292ZXIobWVzc2FnZSwgc2lnbmF0dXJlLCByZWNpZCwgY29tcHJlc3NlZCkge1xuICAvLyBub3RlOiBzZWNwMjU2azEgdjQgcmVjb3ZlciBtZXRob2QgaGFzIGEgZGlmZmVyZW50IGFyZ3VtZW50IG9yZGVyXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkc2FSZWNvdmVyKFVpbnQ4QXJyYXkuZnJvbShzaWduYXR1cmUpLCByZWNpZCwgVWludDhBcnJheS5mcm9tKG1lc3NhZ2UpLCBjb21wcmVzc2VkKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgYW4gRUMgRGlmZmllLUhlbGxtYW4gc2VjcmV0IGFuZCBhcHBsaWVkIHNoYTI1NiB0byBjb21wcmVzc2VkIHB1YmxpYyBrZXkuXG4gKiBAbWV0aG9kIGVjZGhcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBlY2RoID0gZnVuY3Rpb24gZWNkaChwdWJsaWNLZXksIHByaXZhdGVLZXkpIHtcbiAgLy8gbm90ZTogc2VjcDI1NmsxIHYzIGRvZXNuJ3QgYWxsb3cgb3B0aW9uYWwgcGFyYW1ldGVyXG4gIHJldHVybiBCdWZmZXIuZnJvbShzZWNwMjU2azEuZWNkaChVaW50OEFycmF5LmZyb20ocHVibGljS2V5KSwgVWludDhBcnJheS5mcm9tKHByaXZhdGVLZXkpLCB7fSkpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIGFuIEVDIERpZmZpZS1IZWxsbWFuIHNlY3JldCBhbmQgcmV0dXJuIHB1YmxpYyBrZXkgYXMgcmVzdWx0XG4gKiBAbWV0aG9kIGVjZGhVbnNhZmVcbiAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXlcbiAqIEBwYXJhbSB7QnVmZmVyfSBwcml2YXRlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXByZXNzZWRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xudmFyIGVjZGhVbnNhZmUgPSBmdW5jdGlvbiBlY2RoVW5zYWZlKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAvLyBlY2RoVW5zYWZlIG1ldGhvZCBpcyBub3QgcGFydCBvZiBzZWNwMjU2azEgdjQgcGFja2FnZVxuICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIHYzXG4gIC8vIGVuc3VyZSB2YWxpZCBwdWJsaWNLZXkgbGVuZ3RoXG4gIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSAzMyAmJiBwdWJsaWNLZXkubGVuZ3RoICE9PSA2NSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwdWJsaWMga2V5IGxlbmd0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICAvLyBlbnN1cmUgdmFsaWQgcHJpdmF0ZUtleSBsZW5ndGhcbiAgaWYgKHByaXZhdGVLZXkubGVuZ3RoICE9PSAzMikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdwcml2YXRlIGtleSBsZW5ndGggaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3AyNTZrMXYzLmVjZGhVbnNhZmUoVWludDhBcnJheS5mcm9tKHB1YmxpY0tleSksIFVpbnQ4QXJyYXkuZnJvbShwcml2YXRlS2V5KSwgY29tcHJlc3NlZCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByaXZhdGVLZXlWZXJpZnk6IHByaXZhdGVLZXlWZXJpZnksXG4gIHByaXZhdGVLZXlFeHBvcnQ6IHByaXZhdGVLZXlFeHBvcnQsXG4gIHByaXZhdGVLZXlJbXBvcnQ6IHByaXZhdGVLZXlJbXBvcnQsXG4gIHByaXZhdGVLZXlOZWdhdGU6IHByaXZhdGVLZXlOZWdhdGUsXG4gIHByaXZhdGVLZXlNb2RJbnZlcnNlOiBwcml2YXRlS2V5TW9kSW52ZXJzZSxcbiAgcHJpdmF0ZUtleVR3ZWFrQWRkOiBwcml2YXRlS2V5VHdlYWtBZGQsXG4gIHByaXZhdGVLZXlUd2Vha011bDogcHJpdmF0ZUtleVR3ZWFrTXVsLFxuXG4gIHB1YmxpY0tleUNyZWF0ZTogcHVibGljS2V5Q3JlYXRlLFxuICBwdWJsaWNLZXlDb252ZXJ0OiBwdWJsaWNLZXlDb252ZXJ0LFxuICBwdWJsaWNLZXlWZXJpZnk6IHB1YmxpY0tleVZlcmlmeSxcbiAgcHVibGljS2V5VHdlYWtBZGQ6IHB1YmxpY0tleVR3ZWFrQWRkLFxuICBwdWJsaWNLZXlUd2Vha011bDogcHVibGljS2V5VHdlYWtNdWwsXG4gIHB1YmxpY0tleUNvbWJpbmU6IHB1YmxpY0tleUNvbWJpbmUsXG5cbiAgc2lnbmF0dXJlTm9ybWFsaXplOiBzaWduYXR1cmVOb3JtYWxpemUsXG4gIHNpZ25hdHVyZUV4cG9ydDogc2lnbmF0dXJlRXhwb3J0LFxuICBzaWduYXR1cmVJbXBvcnQ6IHNpZ25hdHVyZUltcG9ydCxcbiAgc2lnbmF0dXJlSW1wb3J0TGF4OiBzaWduYXR1cmVJbXBvcnRMYXgsXG5cbiAgc2lnbjogc2lnbixcbiAgdmVyaWZ5OiB2ZXJpZnksXG4gIHJlY292ZXI6IHJlY292ZXIsXG5cbiAgZWNkaDogZWNkaCxcbiAgZWNkaFVuc2FmZTogZWNkaFVuc2FmZVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxudmFyIEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9DT01QUkVTU0VEID0gQnVmZmVyLmZyb20oW1xuLy8gYmVnaW5cbjB4MzAsIDB4ODEsIDB4ZDMsIDB4MDIsIDB4MDEsIDB4MDEsIDB4MDQsIDB4MjAsXG4vLyBwcml2YXRlIGtleVxuMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbi8vIG1pZGRsZVxuMHhhMCwgMHg4MSwgMHg4NSwgMHgzMCwgMHg4MSwgMHg4MiwgMHgwMiwgMHgwMSwgMHgwMSwgMHgzMCwgMHgyYywgMHgwNiwgMHgwNywgMHgyYSwgMHg4NiwgMHg0OCwgMHhjZSwgMHgzZCwgMHgwMSwgMHgwMSwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZSwgMHhmZiwgMHhmZiwgMHhmYywgMHgyZiwgMHgzMCwgMHgwNiwgMHgwNCwgMHgwMSwgMHgwMCwgMHgwNCwgMHgwMSwgMHgwNywgMHgwNCwgMHgyMSwgMHgwMiwgMHg3OSwgMHhiZSwgMHg2NiwgMHg3ZSwgMHhmOSwgMHhkYywgMHhiYiwgMHhhYywgMHg1NSwgMHhhMCwgMHg2MiwgMHg5NSwgMHhjZSwgMHg4NywgMHgwYiwgMHgwNywgMHgwMiwgMHg5YiwgMHhmYywgMHhkYiwgMHgyZCwgMHhjZSwgMHgyOCwgMHhkOSwgMHg1OSwgMHhmMiwgMHg4MSwgMHg1YiwgMHgxNiwgMHhmOCwgMHgxNywgMHg5OCwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZSwgMHhiYSwgMHhhZSwgMHhkYywgMHhlNiwgMHhhZiwgMHg0OCwgMHhhMCwgMHgzYiwgMHhiZiwgMHhkMiwgMHg1ZSwgMHg4YywgMHhkMCwgMHgzNiwgMHg0MSwgMHg0MSwgMHgwMiwgMHgwMSwgMHgwMSwgMHhhMSwgMHgyNCwgMHgwMywgMHgyMiwgMHgwMCxcbi8vIHB1YmxpYyBrZXlcbjB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcblxudmFyIEVDX1BSSVZLRVlfRVhQT1JUX0RFUl9VTkNPTVBSRVNTRUQgPSBCdWZmZXIuZnJvbShbXG4vLyBiZWdpblxuMHgzMCwgMHg4MiwgMHgwMSwgMHgxMywgMHgwMiwgMHgwMSwgMHgwMSwgMHgwNCwgMHgyMCxcbi8vIHByaXZhdGUga2V5XG4weDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuLy8gbWlkZGxlXG4weGEwLCAweDgxLCAweGE1LCAweDMwLCAweDgxLCAweGEyLCAweDAyLCAweDAxLCAweDAxLCAweDMwLCAweDJjLCAweDA2LCAweDA3LCAweDJhLCAweDg2LCAweDQ4LCAweGNlLCAweDNkLCAweDAxLCAweDAxLCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZlLCAweGZmLCAweGZmLCAweGZjLCAweDJmLCAweDMwLCAweDA2LCAweDA0LCAweDAxLCAweDAwLCAweDA0LCAweDAxLCAweDA3LCAweDA0LCAweDQxLCAweDA0LCAweDc5LCAweGJlLCAweDY2LCAweDdlLCAweGY5LCAweGRjLCAweGJiLCAweGFjLCAweDU1LCAweGEwLCAweDYyLCAweDk1LCAweGNlLCAweDg3LCAweDBiLCAweDA3LCAweDAyLCAweDliLCAweGZjLCAweGRiLCAweDJkLCAweGNlLCAweDI4LCAweGQ5LCAweDU5LCAweGYyLCAweDgxLCAweDViLCAweDE2LCAweGY4LCAweDE3LCAweDk4LCAweDQ4LCAweDNhLCAweGRhLCAweDc3LCAweDI2LCAweGEzLCAweGM0LCAweDY1LCAweDVkLCAweGE0LCAweGZiLCAweGZjLCAweDBlLCAweDExLCAweDA4LCAweGE4LCAweGZkLCAweDE3LCAweGI0LCAweDQ4LCAweGE2LCAweDg1LCAweDU0LCAweDE5LCAweDljLCAweDQ3LCAweGQwLCAweDhmLCAweGZiLCAweDEwLCAweGQ0LCAweGI4LCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZlLCAweGJhLCAweGFlLCAweGRjLCAweGU2LCAweGFmLCAweDQ4LCAweGEwLCAweDNiLCAweGJmLCAweGQyLCAweDVlLCAweDhjLCAweGQwLCAweDM2LCAweDQxLCAweDQxLCAweDAyLCAweDAxLCAweDAxLCAweGExLCAweDQ0LCAweDAzLCAweDQyLCAweDAwLFxuLy8gcHVibGljIGtleVxuMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuXG5leHBvcnRzLnByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKSB7XG4gIHZhciByZXN1bHQgPSBCdWZmZXIuZnJvbShjb21wcmVzc2VkID8gRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQgOiBFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEKTtcbiAgcHJpdmF0ZUtleS5jb3B5KHJlc3VsdCwgY29tcHJlc3NlZCA/IDggOiA5KTtcbiAgcHVibGljS2V5LmNvcHkocmVzdWx0LCBjb21wcmVzc2VkID8gMTgxIDogMjE0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMucHJpdmF0ZUtleUltcG9ydCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gIHZhciBsZW5ndGggPSBwcml2YXRlS2V5Lmxlbmd0aDtcblxuICAvLyBzZXF1ZW5jZSBoZWFkZXJcbiAgdmFyIGluZGV4ID0gMDtcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgMSB8fCBwcml2YXRlS2V5W2luZGV4XSAhPT0gMHgzMCkgcmV0dXJuIG51bGw7XG4gIGluZGV4ICs9IDE7XG5cbiAgLy8gc2VxdWVuY2UgbGVuZ3RoIGNvbnN0cnVjdG9yXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDEgfHwgIShwcml2YXRlS2V5W2luZGV4XSAmIDB4ODApKSByZXR1cm4gbnVsbDtcblxuICB2YXIgbGVuYiA9IHByaXZhdGVLZXlbaW5kZXhdICYgMHg3ZjtcbiAgaW5kZXggKz0gMTtcbiAgaWYgKGxlbmIgPCAxIHx8IGxlbmIgPiAyKSByZXR1cm4gbnVsbDtcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgbGVuYikgcmV0dXJuIG51bGw7XG5cbiAgLy8gc2VxdWVuY2UgbGVuZ3RoXG4gIHZhciBsZW4gPSBwcml2YXRlS2V5W2luZGV4ICsgbGVuYiAtIDFdIHwgKGxlbmIgPiAxID8gcHJpdmF0ZUtleVtpbmRleCArIGxlbmIgLSAyXSA8PCA4IDogMCk7XG4gIGluZGV4ICs9IGxlbmI7XG4gIGlmIChsZW5ndGggPCBpbmRleCArIGxlbikgcmV0dXJuIG51bGw7XG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAwOiB2ZXJzaW9uIG51bWJlciAoPTEpXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDMgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDIgfHwgcHJpdmF0ZUtleVtpbmRleCArIDFdICE9PSAweDAxIHx8IHByaXZhdGVLZXlbaW5kZXggKyAyXSAhPT0gMHgwMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGluZGV4ICs9IDM7XG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAxOiBvY3RldCBzdHJpbmcsIHVwIHRvIDMyIGJ5dGVzXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDIgfHwgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDQgfHwgcHJpdmF0ZUtleVtpbmRleCArIDFdID4gMHgyMCB8fCBsZW5ndGggPCBpbmRleCArIDIgKyBwcml2YXRlS2V5W2luZGV4ICsgMV0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwcml2YXRlS2V5LnNsaWNlKGluZGV4ICsgMiwgaW5kZXggKyAyICsgcHJpdmF0ZUtleVtpbmRleCArIDFdKTtcbn07XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICB2YXIgciA9IEJ1ZmZlci5hbGxvYygzMiwgMCk7XG4gIHZhciBzID0gQnVmZmVyLmFsbG9jKDMyLCAwKTtcblxuICB2YXIgbGVuZ3RoID0gc2lnbmF0dXJlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcblxuICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZVxuICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDMwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBzZXF1ZW5jZSBsZW5ndGggYnl0ZVxuICB2YXIgbGVuYnl0ZSA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgaWYgKGxlbmJ5dGUgJiAweDgwKSB7XG4gICAgaW5kZXggKz0gbGVuYnl0ZSAtIDB4ODA7XG4gICAgaWYgKGluZGV4ID4gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBzZXF1ZW5jZSB0YWcgYnl0ZSBmb3IgclxuICBpZiAoc2lnbmF0dXJlW2luZGV4KytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBsZW5ndGggZm9yIHJcbiAgdmFyIHJsZW4gPSBzaWduYXR1cmVbaW5kZXgrK107XG4gIGlmIChybGVuICYgMHg4MCkge1xuICAgIGxlbmJ5dGUgPSBybGVuIC0gMHg4MDtcbiAgICBpZiAoaW5kZXggKyBsZW5ieXRlID4gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZm9yICg7IGxlbmJ5dGUgPiAwICYmIHNpZ25hdHVyZVtpbmRleF0gPT09IDB4MDA7IGluZGV4ICs9IDEsIGxlbmJ5dGUgLT0gMSkge31cbiAgICBmb3IgKHJsZW4gPSAwOyBsZW5ieXRlID4gMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSB7XG4gICAgICBybGVuID0gKHJsZW4gPDwgOCkgKyBzaWduYXR1cmVbaW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAocmxlbiA+IGxlbmd0aCAtIGluZGV4KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJpbmRleCA9IGluZGV4O1xuICBpbmRleCArPSBybGVuO1xuXG4gIC8vIHNlcXVlbmNlIHRhZyBieXRlIGZvciBzXG4gIGlmIChzaWduYXR1cmVbaW5kZXgrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGxlbmd0aCBmb3Igc1xuICB2YXIgc2xlbiA9IHNpZ25hdHVyZVtpbmRleCsrXTtcbiAgaWYgKHNsZW4gJiAweDgwKSB7XG4gICAgbGVuYnl0ZSA9IHNsZW4gLSAweDgwO1xuICAgIGlmIChpbmRleCArIGxlbmJ5dGUgPiBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmb3IgKDsgbGVuYnl0ZSA+IDAgJiYgc2lnbmF0dXJlW2luZGV4XSA9PT0gMHgwMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSB7fVxuICAgIGZvciAoc2xlbiA9IDA7IGxlbmJ5dGUgPiAwOyBpbmRleCArPSAxLCBsZW5ieXRlIC09IDEpIHtcbiAgICAgIHNsZW4gPSAoc2xlbiA8PCA4KSArIHNpZ25hdHVyZVtpbmRleF07XG4gICAgfVxuICB9XG4gIGlmIChzbGVuID4gbGVuZ3RoIC0gaW5kZXgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgc2luZGV4ID0gaW5kZXg7XG4gIGluZGV4ICs9IHNsZW47XG5cbiAgLy8gaWdub3JlIGxlYWRpbmcgemVyb3MgaW4gclxuICBmb3IgKDsgcmxlbiA+IDAgJiYgc2lnbmF0dXJlW3JpbmRleF0gPT09IDB4MDA7IHJsZW4gLT0gMSwgcmluZGV4ICs9IDEpIHt9XG4gIC8vIGNvcHkgciB2YWx1ZVxuICBpZiAocmxlbiA+IDMyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJ2YWx1ZSA9IHNpZ25hdHVyZS5zbGljZShyaW5kZXgsIHJpbmRleCArIHJsZW4pO1xuICBydmFsdWUuY29weShyLCAzMiAtIHJ2YWx1ZS5sZW5ndGgpO1xuXG4gIC8vIGlnbm9yZSBsZWFkaW5nIHplcm9zIGluIHNcbiAgZm9yICg7IHNsZW4gPiAwICYmIHNpZ25hdHVyZVtzaW5kZXhdID09PSAweDAwOyBzbGVuIC09IDEsIHNpbmRleCArPSAxKSB7fVxuICAvLyBjb3B5IHMgdmFsdWVcbiAgaWYgKHNsZW4gPiAzMikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBzdmFsdWUgPSBzaWduYXR1cmUuc2xpY2Uoc2luZGV4LCBzaW5kZXggKyBzbGVuKTtcbiAgc3ZhbHVlLmNvcHkocywgMzIgLSBzdmFsdWUubGVuZ3RoKTtcblxuICByZXR1cm4geyByOiByLCBzOiBzIH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxuLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGZyb20gc2VjcDI1NmsxIHYzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL3NlY3AyNTZrMS1ub2RlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWM7XG5cbnZhciBlYyA9IG5ldyBFQygnc2VjcDI1NmsxJyk7XG52YXIgZWNwYXJhbXMgPSBlYy5jdXJ2ZTtcblxuZXhwb3J0cy5wcml2YXRlS2V5RXhwb3J0ID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgdmFyIGQgPSBuZXcgQk4ocHJpdmF0ZUtleSk7XG4gIGlmIChkLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGRuXFwndCBleHBvcnQgdG8gREVSIGZvcm1hdCcpO1xuICB9XG5cbiAgdmFyIHBvaW50ID0gZWMuZy5tdWwoZCk7XG4gIHJldHVybiB0b1B1YmxpY0tleShwb2ludC5nZXRYKCksIHBvaW50LmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuXG5leHBvcnRzLnByaXZhdGVLZXlNb2RJbnZlcnNlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgdmFyIGJuID0gbmV3IEJOKHByaXZhdGVLZXkpO1xuICBpZiAoYm4udWNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IGJuLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcml2YXRlIGtleSByYW5nZSBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gYm4uaW52bShlY3BhcmFtcy5uKS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKTtcbn07XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0ID0gZnVuY3Rpb24gKHNpZ09iaikge1xuICB2YXIgciA9IG5ldyBCTihzaWdPYmoucik7XG4gIGlmIChyLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHIgPSBuZXcgQk4oMCk7XG4gIH1cblxuICB2YXIgcyA9IG5ldyBCTihzaWdPYmoucyk7XG4gIGlmIChzLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgIHMgPSBuZXcgQk4oMCk7XG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbci50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKSwgcy50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKV0pO1xufTtcblxuZXhwb3J0cy5lY2RoVW5zYWZlID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICB2YXIgcG9pbnQgPSBlYy5rZXlGcm9tUHVibGljKHB1YmxpY0tleSk7XG5cbiAgdmFyIHNjYWxhciA9IG5ldyBCTihwcml2YXRlS2V5KTtcbiAgaWYgKHNjYWxhci51Y21wKGVjcGFyYW1zLm4pID49IDAgfHwgc2NhbGFyLmlzWmVybygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzY2FsYXIgd2FzIGludmFsaWQgKHplcm8gb3Igb3ZlcmZsb3cpJyk7XG4gIH1cblxuICB2YXIgc2hhcmVkID0gcG9pbnQucHViLm11bChzY2FsYXIpO1xuICByZXR1cm4gdG9QdWJsaWNLZXkoc2hhcmVkLmdldFgoKSwgc2hhcmVkLmdldFkoKSwgY29tcHJlc3NlZCk7XG59O1xuXG52YXIgdG9QdWJsaWNLZXkgPSBmdW5jdGlvbiB0b1B1YmxpY0tleSh4LCB5LCBjb21wcmVzc2VkKSB7XG4gIHZhciBwdWJsaWNLZXkgPSB2b2lkIDA7XG5cbiAgaWYgKGNvbXByZXNzZWQpIHtcbiAgICBwdWJsaWNLZXkgPSBCdWZmZXIuYWxsb2MoMzMpO1xuICAgIHB1YmxpY0tleVswXSA9IHkuaXNPZGQoKSA/IDB4MDMgOiAweDAyO1xuICAgIHgudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMikuY29weShwdWJsaWNLZXksIDEpO1xuICB9IGVsc2Uge1xuICAgIHB1YmxpY0tleSA9IEJ1ZmZlci5hbGxvYyg2NSk7XG4gICAgcHVibGljS2V5WzBdID0gMHgwNDtcbiAgICB4LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAxKTtcbiAgICB5LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAzMyk7XG4gIH1cblxuICByZXR1cm4gcHVibGljS2V5O1xufTsiLCJjb25zdCBQcm92aWRlclN1YnByb3ZpZGVyID0gcmVxdWlyZSgnLi9qc29uLXJwYy1lbmdpbmUtbWlkZGxld2FyZScpXG5jb25zdCBjcmVhdGVCbG9ja0NhY2hlTWlkZGxld2FyZSA9IHJlcXVpcmUoJ2V0aC1qc29uLXJwYy1taWRkbGV3YXJlL2Jsb2NrLWNhY2hlJylcblxuY2xhc3MgQmxvY2tDYWNoZVN1YnByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJTdWJwcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcigoeyBibG9ja1RyYWNrZXIgfSkgPT4gY3JlYXRlQmxvY2tDYWNoZU1pZGRsZXdhcmUoT2JqZWN0LmFzc2lnbih7IGJsb2NrVHJhY2tlciB9LCBvcHRzKSkpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbG9ja0NhY2hlU3VicHJvdmlkZXJcbiIsImNvbnN0IFByb3ZpZGVyU3VicHJvdmlkZXIgPSByZXF1aXJlKCcuL2pzb24tcnBjLWVuZ2luZS1taWRkbGV3YXJlJylcbmNvbnN0IGNyZWF0ZUZpbHRlck1pZGRsZXdhcmUgPSByZXF1aXJlKCdldGgtanNvbi1ycGMtZmlsdGVycycpXG5cbmNsYXNzIFN1YnNjcmlwdGlvbnNTdWJwcm92aWRlciBleHRlbmRzIFByb3ZpZGVyU3VicHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigoeyBibG9ja1RyYWNrZXIsIHByb3ZpZGVyLCBlbmdpbmUgfSkgPT4ge1xuICAgICAgcmV0dXJuIGNyZWF0ZUZpbHRlck1pZGRsZXdhcmUoeyBibG9ja1RyYWNrZXIsIHByb3ZpZGVyIH0pXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1YnNjcmlwdGlvbnNTdWJwcm92aWRlclxuIiwiY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHNcbmNvbnN0IFN1YnByb3ZpZGVyID0gcmVxdWlyZSgnLi9zdWJwcm92aWRlci5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gRml4dHVyZVByb3ZpZGVyXG5cbmluaGVyaXRzKEZpeHR1cmVQcm92aWRlciwgU3VicHJvdmlkZXIpXG5cbmZ1bmN0aW9uIEZpeHR1cmVQcm92aWRlcihzdGF0aWNSZXNwb25zZXMpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBzdGF0aWNSZXNwb25zZXMgPSBzdGF0aWNSZXNwb25zZXMgfHwge31cbiAgc2VsZi5zdGF0aWNSZXNwb25zZXMgPSBzdGF0aWNSZXNwb25zZXNcbn1cblxuRml4dHVyZVByb3ZpZGVyLnByb3RvdHlwZS5oYW5kbGVSZXF1ZXN0ID0gZnVuY3Rpb24ocGF5bG9hZCwgbmV4dCwgZW5kKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgdmFyIHN0YXRpY1Jlc3BvbnNlID0gc2VsZi5zdGF0aWNSZXNwb25zZXNbcGF5bG9hZC5tZXRob2RdXG4gIC8vIGFzeW5jIGZ1bmN0aW9uXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygc3RhdGljUmVzcG9uc2UpIHtcbiAgICBzdGF0aWNSZXNwb25zZShwYXlsb2FkLCBuZXh0LCBlbmQpXG4gIC8vIHN0YXRpYyByZXNwb25zZSAtIG51bGwgaXMgdmFsaWQgcmVzcG9uc2VcbiAgfSBlbHNlIGlmIChzdGF0aWNSZXNwb25zZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gcmV0dXJuIHJlc3VsdCBhc3luY2hyb25vdXNseVxuICAgIHNldFRpbWVvdXQoKCkgPT4gZW5kKG51bGwsIHN0YXRpY1Jlc3BvbnNlKSlcbiAgLy8gbm8gcHJlcGFyZWQgcmVzcG9uc2UgLSBza2lwXG4gIH0gZWxzZSB7XG4gICAgbmV4dCgpXG4gIH1cbn1cbiIsIi8qXG4gKiBFbXVsYXRlICdldGhfYWNjb3VudHMnIC8gJ2V0aF9zZW5kVHJhbnNhY3Rpb24nIHVzaW5nICdldGhfc2VuZFJhd1RyYW5zYWN0aW9uJ1xuICpcbiAqIFRoZSB0d28gY2FsbGJhY2tzIGEgdXNlciBuZWVkcyB0byBpbXBsZW1lbnQgYXJlOlxuICogLSBnZXRBY2NvdW50cygpIC0tIGFycmF5IG9mIGFkZHJlc3NlcyBzdXBwb3J0ZWRcbiAqIC0gc2lnblRyYW5zYWN0aW9uKHR4KSAtLSBzaWduIGEgcmF3IHRyYW5zYWN0aW9uIG9iamVjdFxuICovXG5cbmNvbnN0IHdhdGVyZmFsbCA9IHJlcXVpcmUoJ2FzeW5jL3dhdGVyZmFsbCcpXG5jb25zdCBwYXJhbGxlbCA9IHJlcXVpcmUoJ2FzeW5jL3BhcmFsbGVsJylcbmNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzXG5jb25zdCBldGhVdGlsID0gcmVxdWlyZSgnZXRoZXJldW1qcy11dGlsJylcbmNvbnN0IHNpZ1V0aWwgPSByZXF1aXJlKCdldGgtc2lnLXV0aWwnKVxuY29uc3QgZXh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKVxuY29uc3QgU2VtYXBob3JlID0gcmVxdWlyZSgnc2VtYXBob3JlJylcbmNvbnN0IFN1YnByb3ZpZGVyID0gcmVxdWlyZSgnLi9zdWJwcm92aWRlci5qcycpXG5jb25zdCBlc3RpbWF0ZUdhcyA9IHJlcXVpcmUoJy4uL3V0aWwvZXN0aW1hdGUtZ2FzLmpzJylcbmNvbnN0IGhleFJlZ2V4ID0gL15bMC05QS1GYS1mXSskL2dcblxubW9kdWxlLmV4cG9ydHMgPSBIb29rZWRXYWxsZXRTdWJwcm92aWRlclxuXG4vLyBoYW5kbGVzIHRoZSBmb2xsb3dpbmcgUlBDIG1ldGhvZHM6XG4vLyAgIGV0aF9jb2luYmFzZVxuLy8gICBldGhfYWNjb3VudHNcbi8vICAgZXRoX3NlbmRUcmFuc2FjdGlvblxuLy8gICBldGhfc2lnblxuLy8gICBldGhfc2lnblR5cGVkRGF0YVxuLy8gICBldGhfc2lnblR5cGVkRGF0YV92M1xuLy8gICBldGhfc2lnblR5cGVkRGF0YV92NFxuLy8gICBwZXJzb25hbF9zaWduXG4vLyAgIGV0aF9kZWNyeXB0TWVzc2FnZVxuLy8gICBlbmNyeXB0aW9uX3B1YmxpY19rZXlcbi8vICAgcGVyc29uYWxfZWNSZWNvdmVyXG4vLyAgIHBhcml0eV9wb3N0VHJhbnNhY3Rpb25cbi8vICAgcGFyaXR5X2NoZWNrUmVxdWVzdFxuLy8gICBwYXJpdHlfZGVmYXVsdEFjY291bnRcblxuLy9cbi8vIFR4IFNpZ25hdHVyZSBGbG93XG4vL1xuLy8gaGFuZGxlUmVxdWVzdDogZXRoX3NlbmRUcmFuc2FjdGlvblxuLy8gICB2YWxpZGF0ZVRyYW5zYWN0aW9uIChiYXNpYyB2YWxpZGl0eSBjaGVjaylcbi8vICAgICB2YWxpZGF0ZVNlbmRlciAoY2hlY2tzIHRoYXQgc2VuZGVyIGlzIGluIGFjY291bnRzKVxuLy8gICBwcm9jZXNzVHJhbnNhY3Rpb24gKHNpZ24gdHggYW5kIHN1Ym1pdCB0byBuZXR3b3JrKVxuLy8gICAgIGFwcHJvdmVUcmFuc2FjdGlvbiAoVUkgYXBwcm92YWwgaG9vaylcbi8vICAgICBjaGVja0FwcHJvdmFsXG4vLyAgICAgZmluYWxpemVBbmRTdWJtaXRUeCAodHggc2lnbmluZylcbi8vICAgICAgIG5vbmNlTG9jay50YWtlIChib3R0bGUgbmVjayB0byBlbnN1cmUgYXRvbWljIG5vbmNlKVxuLy8gICAgICAgICBmaWxsSW5UeEV4dHJhcyAoc2V0IGZhbGxiYWNrIGdhc1ByaWNlLCBub25jZSwgZXRjKVxuLy8gICAgICAgICBzaWduVHJhbnNhY3Rpb24gKHBlcmZvcm0gdGhlIHNpZ25hdHVyZSlcbi8vICAgICAgICAgcHVibGlzaFRyYW5zYWN0aW9uIChwdWJsaXNoIHNpZ25lZCB0eCB0byBuZXR3b3JrKVxuLy9cblxuXG5pbmhlcml0cyhIb29rZWRXYWxsZXRTdWJwcm92aWRlciwgU3VicHJvdmlkZXIpXG5cbmZ1bmN0aW9uIEhvb2tlZFdhbGxldFN1YnByb3ZpZGVyKG9wdHMpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICAvLyBjb250cm9sIGZsb3dcbiAgc2VsZi5ub25jZUxvY2sgPSBTZW1hcGhvcmUoMSlcblxuICAvLyBkYXRhIGxvb2t1cFxuICBpZiAob3B0cy5nZXRBY2NvdW50cykgc2VsZi5nZXRBY2NvdW50cyA9IG9wdHMuZ2V0QWNjb3VudHNcbiAgLy8gaGlnaCBsZXZlbCBvdmVycmlkZVxuICBpZiAob3B0cy5wcm9jZXNzVHJhbnNhY3Rpb24pIHNlbGYucHJvY2Vzc1RyYW5zYWN0aW9uID0gb3B0cy5wcm9jZXNzVHJhbnNhY3Rpb25cbiAgaWYgKG9wdHMucHJvY2Vzc01lc3NhZ2UpIHNlbGYucHJvY2Vzc01lc3NhZ2UgPSBvcHRzLnByb2Nlc3NNZXNzYWdlXG4gIGlmIChvcHRzLnByb2Nlc3NQZXJzb25hbE1lc3NhZ2UpIHNlbGYucHJvY2Vzc1BlcnNvbmFsTWVzc2FnZSA9IG9wdHMucHJvY2Vzc1BlcnNvbmFsTWVzc2FnZVxuICBpZiAob3B0cy5wcm9jZXNzVHlwZWRNZXNzYWdlKSBzZWxmLnByb2Nlc3NUeXBlZE1lc3NhZ2UgPSBvcHRzLnByb2Nlc3NUeXBlZE1lc3NhZ2VcbiAgLy8gYXBwcm92YWwgaG9va3NcbiAgc2VsZi5hcHByb3ZlVHJhbnNhY3Rpb24gPSBvcHRzLmFwcHJvdmVUcmFuc2FjdGlvbiB8fCBzZWxmLmF1dG9BcHByb3ZlXG4gIHNlbGYuYXBwcm92ZU1lc3NhZ2UgPSBvcHRzLmFwcHJvdmVNZXNzYWdlIHx8IHNlbGYuYXV0b0FwcHJvdmVcbiAgc2VsZi5hcHByb3ZlUGVyc29uYWxNZXNzYWdlID0gb3B0cy5hcHByb3ZlUGVyc29uYWxNZXNzYWdlIHx8IHNlbGYuYXV0b0FwcHJvdmVcbiAgc2VsZi5hcHByb3ZlRGVjcnlwdE1lc3NhZ2UgPSBvcHRzLmFwcHJvdmVEZWNyeXB0TWVzc2FnZSB8fCBzZWxmLmF1dG9BcHByb3ZlXG4gIHNlbGYuYXBwcm92ZUVuY3J5cHRpb25QdWJsaWNLZXkgPSBvcHRzLmFwcHJvdmVFbmNyeXB0aW9uUHVibGljS2V5IHx8IHNlbGYuYXV0b0FwcHJvdmVcbiAgc2VsZi5hcHByb3ZlVHlwZWRNZXNzYWdlID0gb3B0cy5hcHByb3ZlVHlwZWRNZXNzYWdlIHx8IHNlbGYuYXV0b0FwcHJvdmVcbiAgLy8gYWN0dWFsbHkgcGVyZm9ybSB0aGUgc2lnbmF0dXJlXG4gIGlmIChvcHRzLnNpZ25UcmFuc2FjdGlvbikgc2VsZi5zaWduVHJhbnNhY3Rpb24gPSBvcHRzLnNpZ25UcmFuc2FjdGlvbiAgfHwgbXVzdFByb3ZpZGVJbkNvbnN0cnVjdG9yKCdzaWduVHJhbnNhY3Rpb24nKVxuICBpZiAob3B0cy5zaWduTWVzc2FnZSkgc2VsZi5zaWduTWVzc2FnZSA9IG9wdHMuc2lnbk1lc3NhZ2UgIHx8IG11c3RQcm92aWRlSW5Db25zdHJ1Y3Rvcignc2lnbk1lc3NhZ2UnKVxuICBpZiAob3B0cy5zaWduUGVyc29uYWxNZXNzYWdlKSBzZWxmLnNpZ25QZXJzb25hbE1lc3NhZ2UgPSBvcHRzLnNpZ25QZXJzb25hbE1lc3NhZ2UgIHx8IG11c3RQcm92aWRlSW5Db25zdHJ1Y3Rvcignc2lnblBlcnNvbmFsTWVzc2FnZScpXG4gIGlmIChvcHRzLmRlY3J5cHRNZXNzYWdlKSBzZWxmLmRlY3J5cHRNZXNzYWdlID0gb3B0cy5kZWNyeXB0TWVzc2FnZSAgfHwgbXVzdFByb3ZpZGVJbkNvbnN0cnVjdG9yKCdkZWNyeXB0TWVzc2FnZScpXG4gIGlmIChvcHRzLmVuY3J5cHRpb25QdWJsaWNLZXkpIHNlbGYuZW5jcnlwdGlvblB1YmxpY0tleSA9IG9wdHMuZW5jcnlwdGlvblB1YmxpY0tleSAgfHwgbXVzdFByb3ZpZGVJbkNvbnN0cnVjdG9yKCdlbmNyeXB0aW9uUHVibGljS2V5JylcbiAgaWYgKG9wdHMuc2lnblR5cGVkTWVzc2FnZSkgc2VsZi5zaWduVHlwZWRNZXNzYWdlID0gb3B0cy5zaWduVHlwZWRNZXNzYWdlICB8fCBtdXN0UHJvdmlkZUluQ29uc3RydWN0b3IoJ3NpZ25UeXBlZE1lc3NhZ2UnKVxuICBpZiAob3B0cy5yZWNvdmVyUGVyc29uYWxTaWduYXR1cmUpIHNlbGYucmVjb3ZlclBlcnNvbmFsU2lnbmF0dXJlID0gb3B0cy5yZWNvdmVyUGVyc29uYWxTaWduYXR1cmVcbiAgLy8gcHVibGlzaCB0byBuZXR3b3JrXG4gIGlmIChvcHRzLnB1Ymxpc2hUcmFuc2FjdGlvbikgc2VsZi5wdWJsaXNoVHJhbnNhY3Rpb24gPSBvcHRzLnB1Ymxpc2hUcmFuc2FjdGlvblxuICAvLyBnYXMgb3B0aW9uc1xuICBzZWxmLmVzdGltYXRlR2FzID0gb3B0cy5lc3RpbWF0ZUdhcyB8fCBzZWxmLmVzdGltYXRlR2FzXG4gIHNlbGYuZ2V0R2FzUHJpY2UgPSBvcHRzLmdldEdhc1ByaWNlIHx8IHNlbGYuZ2V0R2FzUHJpY2Vcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLmhhbmRsZVJlcXVlc3QgPSBmdW5jdGlvbihwYXlsb2FkLCBuZXh0LCBlbmQpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBzZWxmLl9wYXJpdHlSZXF1ZXN0cyA9IHt9XG4gIHNlbGYuX3Bhcml0eVJlcXVlc3RDb3VudCA9IDBcblxuICAvLyBzd2l0Y2ggc3RhdGVtZW50IGlzIG5vdCBibG9jayBzY29wZWRcbiAgLy8gc3Agd2UgY2FudCByZXBlYXQgdmFyIGRlY2xhcmF0aW9uc1xuICBsZXQgdHhQYXJhbXMsIG1zZ1BhcmFtcywgZXh0cmFQYXJhbXNcbiAgbGV0IG1lc3NhZ2UsIGFkZHJlc3NcblxuICBzd2l0Y2gocGF5bG9hZC5tZXRob2QpIHtcblxuICAgIGNhc2UgJ2V0aF9jb2luYmFzZSc6XG4gICAgICAvLyBwcm9jZXNzIG5vcm1hbGx5XG4gICAgICBzZWxmLmdldEFjY291bnRzKGZ1bmN0aW9uKGVyciwgYWNjb3VudHMpe1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gZW5kKGVycilcbiAgICAgICAgbGV0IHJlc3VsdCA9IGFjY291bnRzWzBdIHx8IG51bGxcbiAgICAgICAgZW5kKG51bGwsIHJlc3VsdClcbiAgICAgIH0pXG4gICAgICByZXR1cm5cblxuICAgIGNhc2UgJ2V0aF9hY2NvdW50cyc6XG4gICAgICAvLyBwcm9jZXNzIG5vcm1hbGx5XG4gICAgICBzZWxmLmdldEFjY291bnRzKGZ1bmN0aW9uKGVyciwgYWNjb3VudHMpe1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gZW5kKGVycilcbiAgICAgICAgZW5kKG51bGwsIGFjY291bnRzKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuXG4gICAgY2FzZSAnZXRoX3NlbmRUcmFuc2FjdGlvbic6XG4gICAgICB0eFBhcmFtcyA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICB3YXRlcmZhbGwoW1xuICAgICAgICAoY2IpID0+IHNlbGYudmFsaWRhdGVUcmFuc2FjdGlvbih0eFBhcmFtcywgY2IpLFxuICAgICAgICAoY2IpID0+IHNlbGYucHJvY2Vzc1RyYW5zYWN0aW9uKHR4UGFyYW1zLCBjYiksXG4gICAgICBdLCBlbmQpXG4gICAgICByZXR1cm5cblxuICAgIGNhc2UgJ2V0aF9zaWduVHJhbnNhY3Rpb24nOlxuICAgICAgdHhQYXJhbXMgPSBwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgd2F0ZXJmYWxsKFtcbiAgICAgICAgKGNiKSA9PiBzZWxmLnZhbGlkYXRlVHJhbnNhY3Rpb24odHhQYXJhbXMsIGNiKSxcbiAgICAgICAgKGNiKSA9PiBzZWxmLnByb2Nlc3NTaWduVHJhbnNhY3Rpb24odHhQYXJhbXMsIGNiKSxcbiAgICAgIF0sIGVuZClcbiAgICAgIHJldHVyblxuXG4gICAgY2FzZSAnZXRoX3NpZ24nOlxuICAgICAgLy8gcHJvY2VzcyBub3JtYWxseVxuICAgICAgYWRkcmVzcyA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICBtZXNzYWdlID0gcGF5bG9hZC5wYXJhbXNbMV1cbiAgICAgIC8vIG5vbi1zdGFuZGFyZCBcImV4dHJhUGFyYW1zXCIgdG8gYmUgYXBwZW5kZWQgdG8gb3VyIFwibXNnUGFyYW1zXCIgb2JqXG4gICAgICAvLyBnb29kIHBsYWNlIGZvciBtZXRhZGF0YVxuICAgICAgZXh0cmFQYXJhbXMgPSBwYXlsb2FkLnBhcmFtc1syXSB8fCB7fVxuICAgICAgbXNnUGFyYW1zID0gZXh0ZW5kKGV4dHJhUGFyYW1zLCB7XG4gICAgICAgIGZyb206IGFkZHJlc3MsXG4gICAgICAgIGRhdGE6IG1lc3NhZ2UsXG4gICAgICB9KVxuICAgICAgd2F0ZXJmYWxsKFtcbiAgICAgICAgKGNiKSA9PiBzZWxmLnZhbGlkYXRlTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAgICAgKGNiKSA9PiBzZWxmLnByb2Nlc3NNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgICAgXSwgZW5kKVxuICAgICAgcmV0dXJuXG5cbiAgICBjYXNlICdwZXJzb25hbF9zaWduJzpcbiAgICAgIHJldHVybiAoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gcHJvY2VzcyBub3JtYWxseVxuICAgICAgICBjb25zdCBmaXJzdCA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICAgIGNvbnN0IHNlY29uZCA9IHBheWxvYWQucGFyYW1zWzFdXG5cbiAgICAgICAgLy8gV2UgaW5pdGlhbGx5IGluY29ycmVjdGx5IG9yZGVyZWQgdGhlc2UgcGFyYW1ldGVycy5cbiAgICAgICAgLy8gVG8gZ3JhY2VmdWxseSByZXNwZWN0IHVzZXJzIHdobyBhZG9wdGVkIHRoaXMgQVBJIGVhcmx5LFxuICAgICAgICAvLyB3ZSBhcmUgY3VycmVudGx5IGdyYWNlZnVsbHkgcmVjb3ZlcmluZyBmcm9tIHRoZSB3cm9uZyBwYXJhbSBvcmRlclxuICAgICAgICAvLyB3aGVuIGl0IGlzIGNsZWFybHkgaWRlbnRpZmlhYmxlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGF0IG1lYW5zIHdoZW4gdGhlIGZpcnN0IHBhcmFtIGlzIGRlZmluaXRlbHkgYW4gYWRkcmVzcyxcbiAgICAgICAgLy8gYW5kIHRoZSBzZWNvbmQgcGFyYW0gaXMgZGVmaW5pdGVseSBub3QsIGJ1dCBpcyBoZXguXG4gICAgICAgIGlmIChyZXNlbWJsZXNEYXRhKHNlY29uZCkgJiYgcmVzZW1ibGVzQWRkcmVzcyhmaXJzdCkpIHtcbiAgICAgICAgICBsZXQgd2FybmluZyA9IGBUaGUgZXRoX3BlcnNvbmFsU2lnbiBtZXRob2QgcmVxdWlyZXMgcGFyYW1zIG9yZGVyZWQgYFxuICAgICAgICAgIHdhcm5pbmcgKz0gYFttZXNzYWdlLCBhZGRyZXNzXS4gVGhpcyB3YXMgcHJldmlvdXNseSBoYW5kbGVkIGluY29ycmVjdGx5LCBgXG4gICAgICAgICAgd2FybmluZyArPSBgYW5kIGhhcyBiZWVuIGNvcnJlY3RlZCBhdXRvbWF0aWNhbGx5LiBgXG4gICAgICAgICAgd2FybmluZyArPSBgUGxlYXNlIHN3aXRjaCB0aGlzIHBhcmFtIG9yZGVyIGZvciBzbW9vdGggYmVoYXZpb3IgaW4gdGhlIGZ1dHVyZS5gXG4gICAgICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpXG5cbiAgICAgICAgICBhZGRyZXNzID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgICBtZXNzYWdlID0gcGF5bG9hZC5wYXJhbXNbMV1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgICBhZGRyZXNzID0gcGF5bG9hZC5wYXJhbXNbMV1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vbi1zdGFuZGFyZCBcImV4dHJhUGFyYW1zXCIgdG8gYmUgYXBwZW5kZWQgdG8gb3VyIFwibXNnUGFyYW1zXCIgb2JqXG4gICAgICAgIC8vIGdvb2QgcGxhY2UgZm9yIG1ldGFkYXRhXG4gICAgICAgIGV4dHJhUGFyYW1zID0gcGF5bG9hZC5wYXJhbXNbMl0gfHwge31cbiAgICAgICAgbXNnUGFyYW1zID0gZXh0ZW5kKGV4dHJhUGFyYW1zLCB7XG4gICAgICAgICAgZnJvbTogYWRkcmVzcyxcbiAgICAgICAgICBkYXRhOiBtZXNzYWdlLFxuICAgICAgICB9KVxuICAgICAgICB3YXRlcmZhbGwoW1xuICAgICAgICAgIChjYikgPT4gc2VsZi52YWxpZGF0ZVBlcnNvbmFsTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAgICAgICAoY2IpID0+IHNlbGYucHJvY2Vzc1BlcnNvbmFsTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAgICAgXSwgZW5kKVxuICAgICAgfSkoKVxuXG4gICAgY2FzZSAnZXRoX2RlY3J5cHRNZXNzYWdlJzpcbiAgICAgIHJldHVybiAoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gcHJvY2VzcyBub3JtYWxseVxuICAgICAgICBjb25zdCBmaXJzdCA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICAgIGNvbnN0IHNlY29uZCA9IHBheWxvYWQucGFyYW1zWzFdXG5cbiAgICAgICAgLy8gV2UgaW5pdGlhbGx5IGluY29ycmVjdGx5IG9yZGVyZWQgdGhlc2UgcGFyYW1ldGVycy5cbiAgICAgICAgLy8gVG8gZ3JhY2VmdWxseSByZXNwZWN0IHVzZXJzIHdobyBhZG9wdGVkIHRoaXMgQVBJIGVhcmx5LFxuICAgICAgICAvLyB3ZSBhcmUgY3VycmVudGx5IGdyYWNlZnVsbHkgcmVjb3ZlcmluZyBmcm9tIHRoZSB3cm9uZyBwYXJhbSBvcmRlclxuICAgICAgICAvLyB3aGVuIGl0IGlzIGNsZWFybHkgaWRlbnRpZmlhYmxlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGF0IG1lYW5zIHdoZW4gdGhlIGZpcnN0IHBhcmFtIGlzIGRlZmluaXRlbHkgYW4gYWRkcmVzcyxcbiAgICAgICAgLy8gYW5kIHRoZSBzZWNvbmQgcGFyYW0gaXMgZGVmaW5pdGVseSBub3QsIGJ1dCBpcyBoZXguXG4gICAgICAgIGlmIChyZXNlbWJsZXNEYXRhKHNlY29uZCkgJiYgcmVzZW1ibGVzQWRkcmVzcyhmaXJzdCkpIHtcbiAgICAgICAgICBsZXQgd2FybmluZyA9IGBUaGUgZXRoX2RlY3J5cHRNZXNzYWdlIG1ldGhvZCByZXF1aXJlcyBwYXJhbXMgb3JkZXJlZCBgXG4gICAgICAgICAgd2FybmluZyArPSBgW21lc3NhZ2UsIGFkZHJlc3NdLiBUaGlzIHdhcyBwcmV2aW91c2x5IGhhbmRsZWQgaW5jb3JyZWN0bHksIGBcbiAgICAgICAgICB3YXJuaW5nICs9IGBhbmQgaGFzIGJlZW4gY29ycmVjdGVkIGF1dG9tYXRpY2FsbHkuIGBcbiAgICAgICAgICB3YXJuaW5nICs9IGBQbGVhc2Ugc3dpdGNoIHRoaXMgcGFyYW0gb3JkZXIgZm9yIHNtb290aCBiZWhhdmlvciBpbiB0aGUgZnV0dXJlLmBcbiAgICAgICAgICBjb25zb2xlLndhcm4od2FybmluZylcblxuICAgICAgICAgIGFkZHJlc3MgPSBwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgICAgIG1lc3NhZ2UgPSBwYXlsb2FkLnBhcmFtc1sxXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2UgPSBwYXlsb2FkLnBhcmFtc1swXVxuICAgICAgICAgIGFkZHJlc3MgPSBwYXlsb2FkLnBhcmFtc1sxXVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm9uLXN0YW5kYXJkIFwiZXh0cmFQYXJhbXNcIiB0byBiZSBhcHBlbmRlZCB0byBvdXIgXCJtc2dQYXJhbXNcIiBvYmpcbiAgICAgICAgLy8gZ29vZCBwbGFjZSBmb3IgbWV0YWRhdGFcbiAgICAgICAgZXh0cmFQYXJhbXMgPSBwYXlsb2FkLnBhcmFtc1syXSB8fCB7fVxuICAgICAgICBtc2dQYXJhbXMgPSBleHRlbmQoZXh0cmFQYXJhbXMsIHtcbiAgICAgICAgICBmcm9tOiBhZGRyZXNzLFxuICAgICAgICAgIGRhdGE6IG1lc3NhZ2UsXG4gICAgICAgIH0pXG4gICAgICAgIHdhdGVyZmFsbChbXG4gICAgICAgICAgKGNiKSA9PiBzZWxmLnZhbGlkYXRlRGVjcnlwdE1lc3NhZ2UobXNnUGFyYW1zLCBjYiksXG4gICAgICAgICAgKGNiKSA9PiBzZWxmLnByb2Nlc3NEZWNyeXB0TWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAgICAgXSwgZW5kKVxuICAgICAgfSkoKVxuICAgICAgXG4gICAgY2FzZSAnZW5jcnlwdGlvbl9wdWJsaWNfa2V5JzpcbiAgICAgIHJldHVybiAoZnVuY3Rpb24oKXtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICAgIFxuICAgICAgICB3YXRlcmZhbGwoW1xuICAgICAgICAgIChjYikgPT4gc2VsZi52YWxpZGF0ZUVuY3J5cHRpb25QdWJsaWNLZXkoYWRkcmVzcywgY2IpLFxuICAgICAgICAgIChjYikgPT4gc2VsZi5wcm9jZXNzRW5jcnlwdGlvblB1YmxpY0tleShhZGRyZXNzLCBjYiksXG4gICAgICAgIF0sIGVuZClcbiAgICAgIH0pKClcbiAgICAgIFxuICAgIGNhc2UgJ3BlcnNvbmFsX2VjUmVjb3Zlcic6XG4gICAgICByZXR1cm4gKGZ1bmN0aW9uKCl7ICAgIFxuICAgICAgICBtZXNzYWdlID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgbGV0IHNpZ25hdHVyZSA9IHBheWxvYWQucGFyYW1zWzFdXG4gICAgICAgIC8vIG5vbi1zdGFuZGFyZCBcImV4dHJhUGFyYW1zXCIgdG8gYmUgYXBwZW5kZWQgdG8gb3VyIFwibXNnUGFyYW1zXCIgb2JqXG4gICAgICAgIC8vIGdvb2QgcGxhY2UgZm9yIG1ldGFkYXRhXG4gICAgICAgIGV4dHJhUGFyYW1zID0gcGF5bG9hZC5wYXJhbXNbMl0gfHwge31cbiAgICAgICAgbXNnUGFyYW1zID0gZXh0ZW5kKGV4dHJhUGFyYW1zLCB7XG4gICAgICAgICAgc2lnOiBzaWduYXR1cmUsXG4gICAgICAgICAgZGF0YTogbWVzc2FnZSxcbiAgICAgICAgfSlcbiAgICAgICAgc2VsZi5yZWNvdmVyUGVyc29uYWxTaWduYXR1cmUobXNnUGFyYW1zLCBlbmQpXG4gICAgICB9KSgpXG5cbiAgICBjYXNlICdldGhfc2lnblR5cGVkRGF0YSc6XG4gICAgY2FzZSAnZXRoX3NpZ25UeXBlZERhdGFfdjMnOlxuICAgIGNhc2UgJ2V0aF9zaWduVHlwZWREYXRhX3Y0JzpcbiAgICAgIHJldHVybiAoZnVuY3Rpb24oKXsgXG4gICAgICAgIC8vIHByb2Nlc3Mgbm9ybWFsbHlcbiAgICAgIFxuICAgICAgICBjb25zdCBmaXJzdCA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICAgIGNvbnN0IHNlY29uZCA9IHBheWxvYWQucGFyYW1zWzFdXG5cbiAgICAgICAgaWYgKHJlc2VtYmxlc0FkZHJlc3MoZmlyc3QpKSB7XG4gICAgICAgICAgYWRkcmVzcyA9IGZpcnN0XG4gICAgICAgICAgbWVzc2FnZSA9IHNlY29uZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2UgPSBmaXJzdFxuICAgICAgICAgIGFkZHJlc3MgPSBzZWNvbmRcbiAgICAgICAgfVxuXG4gICAgICAgIGV4dHJhUGFyYW1zID0gcGF5bG9hZC5wYXJhbXNbMl0gfHwge31cbiAgICAgICAgbXNnUGFyYW1zID0gZXh0ZW5kKGV4dHJhUGFyYW1zLCB7XG4gICAgICAgICAgZnJvbTogYWRkcmVzcyxcbiAgICAgICAgICBkYXRhOiBtZXNzYWdlLFxuICAgICAgICB9KVxuICAgICAgICB3YXRlcmZhbGwoW1xuICAgICAgICAgIChjYikgPT4gc2VsZi52YWxpZGF0ZVR5cGVkTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAgICAgICAoY2IpID0+IHNlbGYucHJvY2Vzc1R5cGVkTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAgICAgXSwgZW5kKVxuICAgICAgfSkoKVxuXG4gICAgY2FzZSAncGFyaXR5X3Bvc3RUcmFuc2FjdGlvbic6XG4gICAgICB0eFBhcmFtcyA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICBzZWxmLnBhcml0eVBvc3RUcmFuc2FjdGlvbih0eFBhcmFtcywgZW5kKVxuICAgICAgcmV0dXJuXG5cbiAgICBjYXNlICdwYXJpdHlfcG9zdFNpZ24nOlxuICAgICAgYWRkcmVzcyA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICBtZXNzYWdlID0gcGF5bG9hZC5wYXJhbXNbMV1cbiAgICAgIHNlbGYucGFyaXR5UG9zdFNpZ24oYWRkcmVzcywgbWVzc2FnZSwgZW5kKVxuICAgICAgcmV0dXJuXG5cbiAgICBjYXNlICdwYXJpdHlfY2hlY2tSZXF1ZXN0JzpcbiAgICAgIHJldHVybiAoZnVuY3Rpb24oKXtcbiAgICAgICAgY29uc3QgcmVxdWVzdElkID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgc2VsZi5wYXJpdHlDaGVja1JlcXVlc3QocmVxdWVzdElkLCBlbmQpXG4gICAgICB9KSgpXG5cbiAgICBjYXNlICdwYXJpdHlfZGVmYXVsdEFjY291bnQnOlxuICAgICAgc2VsZi5nZXRBY2NvdW50cyhmdW5jdGlvbihlcnIsIGFjY291bnRzKXtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGVuZChlcnIpXG4gICAgICAgIGNvbnN0IGFjY291bnQgPSBhY2NvdW50c1swXSB8fCBudWxsXG4gICAgICAgIGVuZChudWxsLCBhY2NvdW50KVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuXG4gICAgZGVmYXVsdDpcbiAgICAgIG5leHQoKVxuICAgICAgcmV0dXJuXG5cbiAgfVxufVxuXG4vL1xuLy8gZGF0YSBsb29rdXBcbi8vXG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5nZXRBY2NvdW50cyA9IGZ1bmN0aW9uKGNiKSB7XG4gIGNiKG51bGwsIFtdKVxufVxuXG5cbi8vXG4vLyBcInByb2Nlc3NcIiBoaWdoIGxldmVsIGZsb3dcbi8vXG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5wcm9jZXNzVHJhbnNhY3Rpb24gPSBmdW5jdGlvbih0eFBhcmFtcywgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgd2F0ZXJmYWxsKFtcbiAgICAoY2IpID0+IHNlbGYuYXBwcm92ZVRyYW5zYWN0aW9uKHR4UGFyYW1zLCBjYiksXG4gICAgKGRpZEFwcHJvdmUsIGNiKSA9PiBzZWxmLmNoZWNrQXBwcm92YWwoJ3RyYW5zYWN0aW9uJywgZGlkQXBwcm92ZSwgY2IpLFxuICAgIChjYikgPT4gc2VsZi5maW5hbGl6ZUFuZFN1Ym1pdFR4KHR4UGFyYW1zLCBjYiksXG4gIF0sIGNiKVxufVxuXG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5wcm9jZXNzU2lnblRyYW5zYWN0aW9uID0gZnVuY3Rpb24odHhQYXJhbXMsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHdhdGVyZmFsbChbXG4gICAgKGNiKSA9PiBzZWxmLmFwcHJvdmVUcmFuc2FjdGlvbih0eFBhcmFtcywgY2IpLFxuICAgIChkaWRBcHByb3ZlLCBjYikgPT4gc2VsZi5jaGVja0FwcHJvdmFsKCd0cmFuc2FjdGlvbicsIGRpZEFwcHJvdmUsIGNiKSxcbiAgICAoY2IpID0+IHNlbGYuZmluYWxpemVUeCh0eFBhcmFtcywgY2IpLFxuICBdLCBjYilcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnByb2Nlc3NNZXNzYWdlID0gZnVuY3Rpb24obXNnUGFyYW1zLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICB3YXRlcmZhbGwoW1xuICAgIChjYikgPT4gc2VsZi5hcHByb3ZlTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAoZGlkQXBwcm92ZSwgY2IpID0+IHNlbGYuY2hlY2tBcHByb3ZhbCgnbWVzc2FnZScsIGRpZEFwcHJvdmUsIGNiKSxcbiAgICAoY2IpID0+IHNlbGYuc2lnbk1lc3NhZ2UobXNnUGFyYW1zLCBjYiksXG4gIF0sIGNiKVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUucHJvY2Vzc1BlcnNvbmFsTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZ1BhcmFtcywgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgd2F0ZXJmYWxsKFtcbiAgICAoY2IpID0+IHNlbGYuYXBwcm92ZVBlcnNvbmFsTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAoZGlkQXBwcm92ZSwgY2IpID0+IHNlbGYuY2hlY2tBcHByb3ZhbCgnbWVzc2FnZScsIGRpZEFwcHJvdmUsIGNiKSxcbiAgICAoY2IpID0+IHNlbGYuc2lnblBlcnNvbmFsTWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgXSwgY2IpXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5wcm9jZXNzRGVjcnlwdE1lc3NhZ2UgPSBmdW5jdGlvbihtc2dQYXJhbXMsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHdhdGVyZmFsbChbXG4gICAgKGNiKSA9PiBzZWxmLmFwcHJvdmVEZWNyeXB0TWVzc2FnZShtc2dQYXJhbXMsIGNiKSxcbiAgICAoZGlkQXBwcm92ZSwgY2IpID0+IHNlbGYuY2hlY2tBcHByb3ZhbCgnZGVjcnlwdE1lc3NhZ2UnLCBkaWRBcHByb3ZlLCBjYiksXG4gICAgKGNiKSA9PiBzZWxmLmRlY3J5cHRNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICBdLCBjYilcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnByb2Nlc3NFbmNyeXB0aW9uUHVibGljS2V5ID0gZnVuY3Rpb24obXNnUGFyYW1zLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICB3YXRlcmZhbGwoW1xuICAgIChjYikgPT4gc2VsZi5hcHByb3ZlRW5jcnlwdGlvblB1YmxpY0tleShtc2dQYXJhbXMsIGNiKSxcbiAgICAoZGlkQXBwcm92ZSwgY2IpID0+IHNlbGYuY2hlY2tBcHByb3ZhbCgnZW5jcnlwdGlvblB1YmxpY0tleScsIGRpZEFwcHJvdmUsIGNiKSxcbiAgICAoY2IpID0+IHNlbGYuZW5jcnlwdGlvblB1YmxpY0tleShtc2dQYXJhbXMsIGNiKSxcbiAgXSwgY2IpXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5wcm9jZXNzVHlwZWRNZXNzYWdlID0gZnVuY3Rpb24obXNnUGFyYW1zLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICB3YXRlcmZhbGwoW1xuICAgIChjYikgPT4gc2VsZi5hcHByb3ZlVHlwZWRNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICAgIChkaWRBcHByb3ZlLCBjYikgPT4gc2VsZi5jaGVja0FwcHJvdmFsKCdtZXNzYWdlJywgZGlkQXBwcm92ZSwgY2IpLFxuICAgIChjYikgPT4gc2VsZi5zaWduVHlwZWRNZXNzYWdlKG1zZ1BhcmFtcywgY2IpLFxuICBdLCBjYilcbn1cblxuLy9cbi8vIGFwcHJvdmFsXG4vL1xuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUuYXV0b0FwcHJvdmUgPSBmdW5jdGlvbih0eFBhcmFtcywgY2IpIHtcbiAgY2IobnVsbCwgdHJ1ZSlcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLmNoZWNrQXBwcm92YWwgPSBmdW5jdGlvbih0eXBlLCBkaWRBcHByb3ZlLCBjYikge1xuICBjYiggZGlkQXBwcm92ZSA/IG51bGwgOiBuZXcgRXJyb3IoJ1VzZXIgZGVuaWVkICcrdHlwZSsnIHNpZ25hdHVyZS4nKSApXG59XG5cbi8vXG4vLyBwYXJpdHlcbi8vXG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5wYXJpdHlQb3N0VHJhbnNhY3Rpb24gPSBmdW5jdGlvbih0eFBhcmFtcywgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICAvLyBnZXQgbmV4dCBpZFxuICBjb25zdCBjb3VudCA9IHNlbGYuX3Bhcml0eVJlcXVlc3RDb3VudFxuICBjb25zdCByZXFJZCA9IGAweCR7Y291bnQudG9TdHJpbmcoMTYpfWBcbiAgc2VsZi5fcGFyaXR5UmVxdWVzdENvdW50KytcblxuICBzZWxmLmVtaXRQYXlsb2FkKHtcbiAgICBtZXRob2Q6ICdldGhfc2VuZFRyYW5zYWN0aW9uJyxcbiAgICBwYXJhbXM6IFt0eFBhcmFtc10sXG4gIH0sIGZ1bmN0aW9uKGVycm9yLCByZXMpe1xuICAgIGlmIChlcnJvcikge1xuICAgICAgc2VsZi5fcGFyaXR5UmVxdWVzdHNbcmVxSWRdID0geyBlcnJvciB9XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgdHhIYXNoID0gcmVzLnJlc3VsdFxuICAgIHNlbGYuX3Bhcml0eVJlcXVlc3RzW3JlcUlkXSA9IHR4SGFzaFxuICB9KVxuXG4gIGNiKG51bGwsIHJlcUlkKVxufVxuXG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5wYXJpdHlQb3N0U2lnbiA9IGZ1bmN0aW9uKGFkZHJlc3MsIG1lc3NhZ2UsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgLy8gZ2V0IG5leHQgaWRcbiAgY29uc3QgY291bnQgPSBzZWxmLl9wYXJpdHlSZXF1ZXN0Q291bnRcbiAgY29uc3QgcmVxSWQgPSBgMHgke2NvdW50LnRvU3RyaW5nKDE2KX1gXG4gIHNlbGYuX3Bhcml0eVJlcXVlc3RDb3VudCsrXG5cbiAgc2VsZi5lbWl0UGF5bG9hZCh7XG4gICAgbWV0aG9kOiAnZXRoX3NpZ24nLFxuICAgIHBhcmFtczogW2FkZHJlc3MsIG1lc3NhZ2VdLFxuICB9LCBmdW5jdGlvbihlcnJvciwgcmVzKXtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNlbGYuX3Bhcml0eVJlcXVlc3RzW3JlcUlkXSA9IHsgZXJyb3IgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHJlcy5yZXN1bHRcbiAgICBzZWxmLl9wYXJpdHlSZXF1ZXN0c1tyZXFJZF0gPSByZXN1bHRcbiAgfSlcblxuICBjYihudWxsLCByZXFJZClcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnBhcml0eUNoZWNrUmVxdWVzdCA9IGZ1bmN0aW9uKHJlcUlkLCBjYikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBjb25zdCByZXN1bHQgPSBzZWxmLl9wYXJpdHlSZXF1ZXN0c1tyZXFJZF0gfHwgbnVsbFxuICAvLyB0eCBub3QgaGFuZGxlZCB5ZXRcbiAgaWYgKCFyZXN1bHQpIHJldHVybiBjYihudWxsLCBudWxsKVxuICAvLyB0eCB3YXMgcmVqZWN0ZWQgKG9yIG90aGVyIGVycm9yKVxuICBpZiAocmVzdWx0LmVycm9yKSByZXR1cm4gY2IocmVzdWx0LmVycm9yKVxuICAvLyB0eCBzZW50XG4gIGNiKG51bGwsIHJlc3VsdClcbn1cblxuLy9cbi8vIHNpZ25hdHVyZSBhbmQgcmVjb3Zlcnlcbi8vXG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5yZWNvdmVyUGVyc29uYWxTaWduYXR1cmUgPSBmdW5jdGlvbihtc2dQYXJhbXMsIGNiKSB7XG4gIGxldCBzZW5kZXJIZXhcbiAgdHJ5IHtcbiAgICBzZW5kZXJIZXggPSBzaWdVdGlsLnJlY292ZXJQZXJzb25hbFNpZ25hdHVyZShtc2dQYXJhbXMpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBjYihlcnIpXG4gIH1cbiAgY2IobnVsbCwgc2VuZGVySGV4KVxufVxuXG4vL1xuLy8gdmFsaWRhdGlvblxuLy9cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnZhbGlkYXRlVHJhbnNhY3Rpb24gPSBmdW5jdGlvbih0eFBhcmFtcywgY2Ipe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICAvLyBzaG9ydGN1dDogdW5kZWZpbmVkIHNlbmRlciBpcyBpbnZhbGlkXG4gIGlmICh0eFBhcmFtcy5mcm9tID09PSB1bmRlZmluZWQpIHJldHVybiBjYihuZXcgRXJyb3IoYFVuZGVmaW5lZCBhZGRyZXNzIC0gZnJvbSBhZGRyZXNzIHJlcXVpcmVkIHRvIHNpZ24gdHJhbnNhY3Rpb24uYCkpXG4gIHNlbGYudmFsaWRhdGVTZW5kZXIodHhQYXJhbXMuZnJvbSwgZnVuY3Rpb24oZXJyLCBzZW5kZXJJc1ZhbGlkKXtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIGlmICghc2VuZGVySXNWYWxpZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5rbm93biBhZGRyZXNzIC0gdW5hYmxlIHRvIHNpZ24gdHJhbnNhY3Rpb24gZm9yIHRoaXMgYWRkcmVzczogXCIke3R4UGFyYW1zLmZyb219XCJgKSlcbiAgICBjYigpXG4gIH0pXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS52YWxpZGF0ZU1lc3NhZ2UgPSBmdW5jdGlvbihtc2dQYXJhbXMsIGNiKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgaWYgKG1zZ1BhcmFtcy5mcm9tID09PSB1bmRlZmluZWQpIHJldHVybiBjYihuZXcgRXJyb3IoYFVuZGVmaW5lZCBhZGRyZXNzIC0gZnJvbSBhZGRyZXNzIHJlcXVpcmVkIHRvIHNpZ24gbWVzc2FnZS5gKSlcbiAgc2VsZi52YWxpZGF0ZVNlbmRlcihtc2dQYXJhbXMuZnJvbSwgZnVuY3Rpb24oZXJyLCBzZW5kZXJJc1ZhbGlkKXtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgIGlmICghc2VuZGVySXNWYWxpZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5rbm93biBhZGRyZXNzIC0gdW5hYmxlIHRvIHNpZ24gbWVzc2FnZSBmb3IgdGhpcyBhZGRyZXNzOiBcIiR7bXNnUGFyYW1zLmZyb219XCJgKSlcbiAgICBjYigpXG4gIH0pXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS52YWxpZGF0ZVBlcnNvbmFsTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZ1BhcmFtcywgY2Ipe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBpZiAobXNnUGFyYW1zLmZyb20gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5kZWZpbmVkIGFkZHJlc3MgLSBmcm9tIGFkZHJlc3MgcmVxdWlyZWQgdG8gc2lnbiBwZXJzb25hbCBtZXNzYWdlLmApKVxuICBpZiAobXNnUGFyYW1zLmRhdGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5kZWZpbmVkIG1lc3NhZ2UgLSBtZXNzYWdlIHJlcXVpcmVkIHRvIHNpZ24gcGVyc29uYWwgbWVzc2FnZS5gKSlcbiAgaWYgKCFpc1ZhbGlkSGV4KG1zZ1BhcmFtcy5kYXRhKSkgcmV0dXJuIGNiKG5ldyBFcnJvcihgSG9va2VkV2FsbGV0U3VicHJvdmlkZXIgLSB2YWxpZGF0ZU1lc3NhZ2UgLSBtZXNzYWdlIHdhcyBub3QgZW5jb2RlZCBhcyBoZXguYCkpXG4gIHNlbGYudmFsaWRhdGVTZW5kZXIobXNnUGFyYW1zLmZyb20sIGZ1bmN0aW9uKGVyciwgc2VuZGVySXNWYWxpZCl7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBpZiAoIXNlbmRlcklzVmFsaWQpIHJldHVybiBjYihuZXcgRXJyb3IoYFVua25vd24gYWRkcmVzcyAtIHVuYWJsZSB0byBzaWduIG1lc3NhZ2UgZm9yIHRoaXMgYWRkcmVzczogXCIke21zZ1BhcmFtcy5mcm9tfVwiYCkpXG4gICAgY2IoKVxuICB9KVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUudmFsaWRhdGVEZWNyeXB0TWVzc2FnZSA9IGZ1bmN0aW9uKG1zZ1BhcmFtcywgY2Ipe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBpZiAobXNnUGFyYW1zLmZyb20gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5kZWZpbmVkIGFkZHJlc3MgLSBmcm9tIGFkZHJlc3MgcmVxdWlyZWQgdG8gZGVjcnlwdCBtZXNzYWdlLmApKVxuICBpZiAobXNnUGFyYW1zLmRhdGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGNiKG5ldyBFcnJvcihgVW5kZWZpbmVkIG1lc3NhZ2UgLSBtZXNzYWdlIHJlcXVpcmVkIHRvIGRlY3J5cHQgbWVzc2FnZS5gKSlcbiAgaWYgKCFpc1ZhbGlkSGV4KG1zZ1BhcmFtcy5kYXRhKSkgcmV0dXJuIGNiKG5ldyBFcnJvcihgSG9va2VkV2FsbGV0U3VicHJvdmlkZXIgLSB2YWxpZGF0ZURlY3J5cHRNZXNzYWdlIC0gbWVzc2FnZSB3YXMgbm90IGVuY29kZWQgYXMgaGV4LmApKVxuICBzZWxmLnZhbGlkYXRlU2VuZGVyKG1zZ1BhcmFtcy5mcm9tLCBmdW5jdGlvbihlcnIsIHNlbmRlcklzVmFsaWQpe1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgaWYgKCFzZW5kZXJJc1ZhbGlkKSByZXR1cm4gY2IobmV3IEVycm9yKGBVbmtub3duIGFkZHJlc3MgLSB1bmFibGUgdG8gZGVjcnlwdCBtZXNzYWdlIGZvciB0aGlzIGFkZHJlc3M6IFwiJHttc2dQYXJhbXMuZnJvbX1cImApKVxuICAgIGNiKClcbiAgfSlcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLnZhbGlkYXRlRW5jcnlwdGlvblB1YmxpY0tleSA9IGZ1bmN0aW9uKGFkZHJlc3MsIGNiKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICBzZWxmLnZhbGlkYXRlU2VuZGVyKGFkZHJlc3MsIGZ1bmN0aW9uKGVyciwgc2VuZGVySXNWYWxpZCl7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBpZiAoIXNlbmRlcklzVmFsaWQpIHJldHVybiBjYihuZXcgRXJyb3IoYFVua25vd24gYWRkcmVzcyAtIHVuYWJsZSB0byBvYnRhaW4gZW5jcnlwdGlvbiBwdWJsaWMga2V5IGZvciB0aGlzIGFkZHJlc3M6IFwiJHthZGRyZXNzfVwiYCkpXG4gICAgY2IoKVxuICB9KVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUudmFsaWRhdGVUeXBlZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2dQYXJhbXMsIGNiKXtcbiAgaWYgKG1zZ1BhcmFtcy5mcm9tID09PSB1bmRlZmluZWQpIHJldHVybiBjYihuZXcgRXJyb3IoYFVuZGVmaW5lZCBhZGRyZXNzIC0gZnJvbSBhZGRyZXNzIHJlcXVpcmVkIHRvIHNpZ24gdHlwZWQgZGF0YS5gKSlcbiAgaWYgKG1zZ1BhcmFtcy5kYXRhID09PSB1bmRlZmluZWQpIHJldHVybiBjYihuZXcgRXJyb3IoYFVuZGVmaW5lZCBkYXRhIC0gbWVzc2FnZSByZXF1aXJlZCB0byBzaWduIHR5cGVkIGRhdGEuYCkpXG4gIHRoaXMudmFsaWRhdGVTZW5kZXIobXNnUGFyYW1zLmZyb20sIGZ1bmN0aW9uKGVyciwgc2VuZGVySXNWYWxpZCl7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBpZiAoIXNlbmRlcklzVmFsaWQpIHJldHVybiBjYihuZXcgRXJyb3IoYFVua25vd24gYWRkcmVzcyAtIHVuYWJsZSB0byBzaWduIG1lc3NhZ2UgZm9yIHRoaXMgYWRkcmVzczogXCIke21zZ1BhcmFtcy5mcm9tfVwiYCkpXG4gICAgY2IoKVxuICB9KVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUudmFsaWRhdGVTZW5kZXIgPSBmdW5jdGlvbihzZW5kZXJBZGRyZXNzLCBjYil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8vIHNob3J0Y3V0OiB1bmRlZmluZWQgc2VuZGVyIGlzIGludmFsaWRcbiAgaWYgKCFzZW5kZXJBZGRyZXNzKSByZXR1cm4gY2IobnVsbCwgZmFsc2UpXG4gIHNlbGYuZ2V0QWNjb3VudHMoZnVuY3Rpb24oZXJyLCBhY2NvdW50cyl7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBjb25zdCBzZW5kZXJJc1ZhbGlkID0gKGFjY291bnRzLm1hcCh0b0xvd2VyQ2FzZSkuaW5kZXhPZihzZW5kZXJBZGRyZXNzLnRvTG93ZXJDYXNlKCkpICE9PSAtMSlcbiAgICBjYihudWxsLCBzZW5kZXJJc1ZhbGlkKVxuICB9KVxufVxuXG4vL1xuLy8gdHggaGVscGVyc1xuLy9cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLmZpbmFsaXplQW5kU3VibWl0VHggPSBmdW5jdGlvbih0eFBhcmFtcywgY2IpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgLy8gY2FuIG9ubHkgYWxsb3cgb25lIHR4IHRvIHBhc3MgdGhyb3VnaCB0aGlzIGZsb3cgYXQgYSB0aW1lXG4gIC8vIHNvIHdlIGNhbiBhdG9taWNhbGx5IGNvbnN1bWUgYSBub25jZVxuICBzZWxmLm5vbmNlTG9jay50YWtlKGZ1bmN0aW9uKCl7XG4gICAgd2F0ZXJmYWxsKFtcbiAgICAgIHNlbGYuZmlsbEluVHhFeHRyYXMuYmluZChzZWxmLCB0eFBhcmFtcyksXG4gICAgICBzZWxmLnNpZ25UcmFuc2FjdGlvbi5iaW5kKHNlbGYpLFxuICAgICAgc2VsZi5wdWJsaXNoVHJhbnNhY3Rpb24uYmluZChzZWxmKSxcbiAgICBdLCBmdW5jdGlvbihlcnIsIHR4SGFzaCl7XG4gICAgICBzZWxmLm5vbmNlTG9jay5sZWF2ZSgpXG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgICAgY2IobnVsbCwgdHhIYXNoKVxuICAgIH0pXG4gIH0pXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5maW5hbGl6ZVR4ID0gZnVuY3Rpb24odHhQYXJhbXMsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8vIGNhbiBvbmx5IGFsbG93IG9uZSB0eCB0byBwYXNzIHRocm91Z2ggdGhpcyBmbG93IGF0IGEgdGltZVxuICAvLyBzbyB3ZSBjYW4gYXRvbWljYWxseSBjb25zdW1lIGEgbm9uY2VcbiAgc2VsZi5ub25jZUxvY2sudGFrZShmdW5jdGlvbigpe1xuICAgIHdhdGVyZmFsbChbXG4gICAgICBzZWxmLmZpbGxJblR4RXh0cmFzLmJpbmQoc2VsZiwgdHhQYXJhbXMpLFxuICAgICAgc2VsZi5zaWduVHJhbnNhY3Rpb24uYmluZChzZWxmKSxcbiAgICBdLCBmdW5jdGlvbihlcnIsIHNpZ25lZFR4KXtcbiAgICAgIHNlbGYubm9uY2VMb2NrLmxlYXZlKClcbiAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgICBjYihudWxsLCB7cmF3OiBzaWduZWRUeCwgdHg6IHR4UGFyYW1zfSlcbiAgICB9KVxuICB9KVxufVxuXG5Ib29rZWRXYWxsZXRTdWJwcm92aWRlci5wcm90b3R5cGUucHVibGlzaFRyYW5zYWN0aW9uID0gZnVuY3Rpb24ocmF3VHgsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuZW1pdFBheWxvYWQoe1xuICAgIG1ldGhvZDogJ2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24nLFxuICAgIHBhcmFtczogW3Jhd1R4XSxcbiAgfSwgZnVuY3Rpb24oZXJyLCByZXMpe1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgY2IobnVsbCwgcmVzLnJlc3VsdClcbiAgfSlcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLmVzdGltYXRlR2FzID0gZnVuY3Rpb24odHhQYXJhbXMsIGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGVzdGltYXRlR2FzKHNlbGYuZW5naW5lLCB0eFBhcmFtcywgY2IpXG59XG5cbkhvb2tlZFdhbGxldFN1YnByb3ZpZGVyLnByb3RvdHlwZS5nZXRHYXNQcmljZSA9IGZ1bmN0aW9uKGNiKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuZW1pdFBheWxvYWQoeyBtZXRob2Q6ICdldGhfZ2FzUHJpY2UnLCBwYXJhbXM6IFtdIH0sIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgY2IobnVsbCwgcmVzLnJlc3VsdClcbiAgfSlcbn1cblxuSG9va2VkV2FsbGV0U3VicHJvdmlkZXIucHJvdG90eXBlLmZpbGxJblR4RXh0cmFzID0gZnVuY3Rpb24odHhQYXJhbXMsIGNiKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgY29uc3QgYWRkcmVzcyA9IHR4UGFyYW1zLmZyb21cbiAgLy8gY29uc29sZS5sb2coJ2ZpbGxJblR4RXh0cmFzIC0gYWRkcmVzczonLCBhZGRyZXNzKVxuXG4gIGNvbnN0IHRhc2tzID0ge31cblxuICBpZiAodHhQYXJhbXMuZ2FzUHJpY2UgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwibmVlZCB0byBnZXQgZ2FzcHJpY2VcIilcbiAgICB0YXNrcy5nYXNQcmljZSA9IHNlbGYuZ2V0R2FzUHJpY2UuYmluZChzZWxmKVxuICB9XG5cbiAgaWYgKHR4UGFyYW1zLm5vbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIm5lZWQgdG8gZ2V0IG5vbmNlXCIpXG4gICAgdGFza3Mubm9uY2UgPSBzZWxmLmVtaXRQYXlsb2FkLmJpbmQoc2VsZiwgeyBtZXRob2Q6ICdldGhfZ2V0VHJhbnNhY3Rpb25Db3VudCcsIHBhcmFtczogW2FkZHJlc3MsICdwZW5kaW5nJ10gfSlcbiAgfVxuXG4gIGlmICh0eFBhcmFtcy5nYXMgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwibmVlZCB0byBnZXQgZ2FzXCIpXG4gICAgdGFza3MuZ2FzID0gc2VsZi5lc3RpbWF0ZUdhcy5iaW5kKHNlbGYsIGNsb25lVHhQYXJhbXModHhQYXJhbXMpKVxuICB9XG5cbiAgcGFyYWxsZWwodGFza3MsIGZ1bmN0aW9uKGVyciwgdGFza1Jlc3VsdHMpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuXG4gICAgY29uc3QgcmVzdWx0ID0ge31cbiAgICBpZiAodGFza1Jlc3VsdHMuZ2FzUHJpY2UpIHJlc3VsdC5nYXNQcmljZSA9IHRhc2tSZXN1bHRzLmdhc1ByaWNlXG4gICAgaWYgKHRhc2tSZXN1bHRzLm5vbmNlKSByZXN1bHQubm9uY2UgPSB0YXNrUmVzdWx0cy5ub25jZS5yZXN1bHRcbiAgICBpZiAodGFza1Jlc3VsdHMuZ2FzKSByZXN1bHQuZ2FzID0gdGFza1Jlc3VsdHMuZ2FzXG5cbiAgICBjYihudWxsLCBleHRlbmQodHhQYXJhbXMsIHJlc3VsdCkpXG4gIH0pXG59XG5cbi8vIHV0aWxcblxuLy8gd2UgdXNlIHRoaXMgdG8gY2xlYW4gYW55IGN1c3RvbSBwYXJhbXMgZnJvbSB0aGUgdHhQYXJhbXNcbmZ1bmN0aW9uIGNsb25lVHhQYXJhbXModHhQYXJhbXMpe1xuICByZXR1cm4ge1xuICAgIGZyb206IHR4UGFyYW1zLmZyb20sXG4gICAgdG86IHR4UGFyYW1zLnRvLFxuICAgIHZhbHVlOiB0eFBhcmFtcy52YWx1ZSxcbiAgICBkYXRhOiB0eFBhcmFtcy5kYXRhLFxuICAgIGdhczogdHhQYXJhbXMuZ2FzLFxuICAgIGdhc1ByaWNlOiB0eFBhcmFtcy5nYXNQcmljZSxcbiAgICBub25jZTogdHhQYXJhbXMubm9uY2UsXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9Mb3dlckNhc2Uoc3RyaW5nKXtcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIHJlc2VtYmxlc0FkZHJlc3MgKHN0cmluZykge1xuICBjb25zdCBmaXhlZCA9IGV0aFV0aWwuYWRkSGV4UHJlZml4KHN0cmluZylcbiAgY29uc3QgaXNWYWxpZCA9IGV0aFV0aWwuaXNWYWxpZEFkZHJlc3MoZml4ZWQpXG4gIHJldHVybiBpc1ZhbGlkXG59XG5cbi8vIFJldHVybnMgdHJ1ZSBpZiByZXNlbWJsZXMgaGV4IGRhdGFcbi8vIGJ1dCBkZWZpbml0ZWx5IG5vdCBhIHZhbGlkIGFkZHJlc3MuXG5mdW5jdGlvbiByZXNlbWJsZXNEYXRhIChzdHJpbmcpIHtcbiAgY29uc3QgZml4ZWQgPSBldGhVdGlsLmFkZEhleFByZWZpeChzdHJpbmcpXG4gIGNvbnN0IGlzVmFsaWRBZGRyZXNzID0gZXRoVXRpbC5pc1ZhbGlkQWRkcmVzcyhmaXhlZClcbiAgcmV0dXJuICFpc1ZhbGlkQWRkcmVzcyAmJiBpc1ZhbGlkSGV4KHN0cmluZylcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEhleChkYXRhKSB7XG4gIGNvbnN0IGlzU3RyaW5nID0gdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnXG4gIGlmICghaXNTdHJpbmcpIHJldHVybiBmYWxzZVxuICBjb25zdCBpc0hleFByZWZpeGVkID0gZGF0YS5zbGljZSgwLDIpID09PSAnMHgnXG4gIGlmICghaXNIZXhQcmVmaXhlZCkgcmV0dXJuIGZhbHNlXG4gIGNvbnN0IG5vblByZWZpeGVkID0gZGF0YS5zbGljZSgyKVxuICBjb25zdCBpc1ZhbGlkID0gbm9uUHJlZml4ZWQubWF0Y2goaGV4UmVnZXgpXG4gIHJldHVybiBpc1ZhbGlkXG59XG5cbmZ1bmN0aW9uIG11c3RQcm92aWRlSW5Db25zdHJ1Y3RvcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbihwYXJhbXMsIGNiKSB7XG4gICAgY2IobmV3IEVycm9yKCdQcm92aWRlckVuZ2luZSAtIEhvb2tlZFdhbGxldFN1YnByb3ZpZGVyIC0gTXVzdCBwcm92aWRlIFwiJyArIG1ldGhvZE5hbWUgKyAnXCIgZm4gaW4gY29uc3RydWN0b3Igb3B0aW9ucycpKVxuICB9XG59XG4iLCJjb25zdCBTdWJwcm92aWRlciA9IHJlcXVpcmUoJy4vc3VicHJvdmlkZXIuanMnKVxuXG4vLyB3cmFwcyBhIGpzb24tcnBjLWVuZ2luZSBtaWRkbGV3YXJlIGluIGEgc3VicHJvdmlkZXIgaW50ZXJmYWNlXG5cbmNsYXNzIEpzb25ScGNFbmdpbmVNaWRkbGV3YXJlU3VicHJvdmlkZXIgZXh0ZW5kcyBTdWJwcm92aWRlciB7XG5cbiAgLy8gdGFrZSBhIGNvbnN0cnVjdG9yRm4gdG8gY2FsbCBvbmNlIHdlIGhhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGVuZ2luZVxuICBjb25zdHJ1Y3RvciAoY29uc3RydWN0b3JGbikge1xuICAgIHN1cGVyKClcbiAgICBpZiAoIWNvbnN0cnVjdG9yRm4pIHRocm93IG5ldyBFcnJvcignSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlciAtIG5vIGNvbnN0cnVjdG9yRm4gc3BlY2lmaWVkJylcbiAgICB0aGlzLl9jb25zdHJ1Y3RvckZuID0gY29uc3RydWN0b3JGblxuICB9XG5cbiAgLy8gdGhpcyBpcyBjYWxsZWQgb25jZSB0aGUgc3VicHJvdmlkZXIgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIHByb3ZpZGVyIGVuZ2luZVxuICBzZXRFbmdpbmUgKGVuZ2luZSkge1xuICAgIGlmICh0aGlzLm1pZGRsZXdhcmUpIHRocm93IG5ldyBFcnJvcignSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlciAtIHN1YnByb3ZpZGVyIGFkZGVkIHRvIGVuZ2luZSB0d2ljZScpXG4gICAgY29uc3QgYmxvY2tUcmFja2VyID0gZW5naW5lLl9ibG9ja1RyYWNrZXJcbiAgICBjb25zdCBtaWRkbGV3YXJlID0gdGhpcy5fY29uc3RydWN0b3JGbih7IGVuZ2luZSwgcHJvdmlkZXI6IGVuZ2luZSwgYmxvY2tUcmFja2VyIH0pXG4gICAgaWYgKCFtaWRkbGV3YXJlKSB0aHJvdyBuZXcgRXJyb3IoJ0pzb25ScGNFbmdpbmVNaWRkbGV3YXJlU3VicHJvdmlkZXIgLSBfY29uc3RydWN0b3JGbiBkaWQgbm90IHJldHVybiBtaWRkbGV3YXJlJylcbiAgICBpZiAodHlwZW9mIG1pZGRsZXdhcmUgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlciAtIHNwZWNpZmllZCBtaWRkbGV3YXJlIGlzIG5vdCBhIGZ1bmN0aW9uJylcbiAgICB0aGlzLm1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlXG4gIH1cblxuICBoYW5kbGVSZXF1ZXN0IChyZXEsIHByb3ZFbmdOZXh0LCBwcm92RW5nRW5kKSB7XG4gICAgY29uc3QgcmVzID0geyBpZDogcmVxLmlkIH1cbiAgICB0aGlzLm1pZGRsZXdhcmUocmVxLCByZXMsIG1pZGRsZXdhcmVOZXh0LCBtaWRkbGV3YXJlRW5kKVxuXG4gICAgZnVuY3Rpb24gbWlkZGxld2FyZU5leHQgKGhhbmRsZXIpIHtcbiAgICAgIHByb3ZFbmdOZXh0KChlcnIsIHJlc3VsdCwgY2IpID0+IHtcbiAgICAgICAgLy8gdXBkYXRlIHJlc3BvbnNlIG9iamVjdCB3aXRoIHJlc3VsdCBvciBlcnJvclxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVsZXRlIHJlcy5yZXN1bHRcbiAgICAgICAgICByZXMuZXJyb3IgPSB7IG1lc3NhZ2U6IGVyci5tZXNzYWdlIHx8IGVyciB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzLnJlc3VsdCA9IHJlc3VsdFxuICAgICAgICB9XG4gICAgICAgIC8vIGNhbGwgbWlkZGxld2FyZSdzIG5leHQgaGFuZGxlciAoZXZlbiBpZiBlcnJvcilcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBoYW5kbGVyKGNiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtaWRkbGV3YXJlRW5kIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBwcm92RW5nRW5kKGVycilcbiAgICAgIHByb3ZFbmdFbmQobnVsbCwgcmVzLnJlc3VsdClcbiAgICB9XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25ScGNFbmdpbmVNaWRkbGV3YXJlU3VicHJvdmlkZXJcbiIsImNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzXG5jb25zdCBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJ2V0aGVyZXVtanMtdHgnKVxuY29uc3QgZXRoVXRpbCA9IHJlcXVpcmUoJ2V0aGVyZXVtanMtdXRpbCcpXG5jb25zdCBTdWJwcm92aWRlciA9IHJlcXVpcmUoJy4vc3VicHJvdmlkZXIuanMnKVxuY29uc3QgYmxvY2tUYWdGb3JQYXlsb2FkID0gcmVxdWlyZSgnLi4vdXRpbC9ycGMtY2FjaGUtdXRpbHMnKS5ibG9ja1RhZ0ZvclBheWxvYWRcblxubW9kdWxlLmV4cG9ydHMgPSBOb25jZVRyYWNrZXJTdWJwcm92aWRlclxuXG4vLyBoYW5kbGVzIHRoZSBmb2xsb3dpbmcgUlBDIG1ldGhvZHM6XG4vLyAgIGV0aF9nZXRUcmFuc2FjdGlvbkNvdW50IChwZW5kaW5nIG9ubHkpXG4vL1xuLy8gb2JzZXJ2ZXMgdGhlIGZvbGxvd2luZyBSUEMgbWV0aG9kczpcbi8vICAgZXRoX3NlbmRSYXdUcmFuc2FjdGlvblxuLy8gICBldm1fcmV2ZXJ0ICh0byBjbGVhciB0aGUgbm9uY2UgY2FjaGUpXG5cbmluaGVyaXRzKE5vbmNlVHJhY2tlclN1YnByb3ZpZGVyLCBTdWJwcm92aWRlcilcblxuZnVuY3Rpb24gTm9uY2VUcmFja2VyU3VicHJvdmlkZXIob3B0cyl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgc2VsZi5ub25jZUNhY2hlID0ge31cbn1cblxuTm9uY2VUcmFja2VyU3VicHJvdmlkZXIucHJvdG90eXBlLmhhbmRsZVJlcXVlc3QgPSBmdW5jdGlvbihwYXlsb2FkLCBuZXh0LCBlbmQpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHN3aXRjaChwYXlsb2FkLm1ldGhvZCkge1xuXG4gICAgY2FzZSAnZXRoX2dldFRyYW5zYWN0aW9uQ291bnQnOlxuICAgICAgdmFyIGJsb2NrVGFnID0gYmxvY2tUYWdGb3JQYXlsb2FkKHBheWxvYWQpXG4gICAgICB2YXIgYWRkcmVzcyA9IHBheWxvYWQucGFyYW1zWzBdLnRvTG93ZXJDYXNlKClcbiAgICAgIHZhciBjYWNoZWRSZXN1bHQgPSBzZWxmLm5vbmNlQ2FjaGVbYWRkcmVzc11cbiAgICAgIC8vIG9ubHkgaGFuZGxlIHJlcXVlc3RzIGFnYWluc3QgdGhlICdwZW5kaW5nJyBibG9ja1RhZ1xuICAgICAgaWYgKGJsb2NrVGFnID09PSAncGVuZGluZycpIHtcbiAgICAgICAgLy8gaGFzIGEgcmVzdWx0XG4gICAgICAgIGlmIChjYWNoZWRSZXN1bHQpIHtcbiAgICAgICAgICBlbmQobnVsbCwgY2FjaGVkUmVzdWx0KVxuICAgICAgICAvLyBmYWxsdGhyb3VnaCB0aGVuIHBvcHVsYXRlIGNhY2hlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dChmdW5jdGlvbihlcnIsIHJlc3VsdCwgY2Ipe1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKClcbiAgICAgICAgICAgIGlmIChzZWxmLm5vbmNlQ2FjaGVbYWRkcmVzc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBzZWxmLm5vbmNlQ2FjaGVbYWRkcmVzc10gPSByZXN1bHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNiKClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0KClcbiAgICAgIH1cbiAgICAgIHJldHVyblxuXG4gICAgY2FzZSAnZXRoX3NlbmRSYXdUcmFuc2FjdGlvbic6XG4gICAgICAvLyBhbGxvdyB0aGUgcmVxdWVzdCB0byBjb250aW51ZSBub3JtYWxseVxuICAgICAgbmV4dChmdW5jdGlvbihlcnIsIHJlc3VsdCwgY2Ipe1xuICAgICAgICAvLyBvbmx5IHVwZGF0ZSBsb2NhbCBub25jZSBpZiB0eCB3YXMgc3VibWl0dGVkIGNvcnJlY3RseVxuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoKVxuICAgICAgICAvLyBwYXJzZSByYXcgdHhcbiAgICAgICAgdmFyIHJhd1R4ID0gcGF5bG9hZC5wYXJhbXNbMF1cbiAgICAgICAgdmFyIHN0cmlwcGVkID0gZXRoVXRpbC5zdHJpcEhleFByZWZpeChyYXdUeClcbiAgICAgICAgdmFyIHJhd0RhdGEgPSBCdWZmZXIuZnJvbShldGhVdGlsLnN0cmlwSGV4UHJlZml4KHJhd1R4KSwgJ2hleCcpXG4gICAgICAgIHZhciB0eCA9IG5ldyBUcmFuc2FjdGlvbihCdWZmZXIuZnJvbShldGhVdGlsLnN0cmlwSGV4UHJlZml4KHJhd1R4KSwgJ2hleCcpKVxuICAgICAgICAvLyBleHRyYWN0IGFkZHJlc3NcbiAgICAgICAgdmFyIGFkZHJlc3MgPSAnMHgnK3R4LmdldFNlbmRlckFkZHJlc3MoKS50b1N0cmluZygnaGV4JykudG9Mb3dlckNhc2UoKVxuICAgICAgICAvLyBleHRyYWN0IG5vbmNlIGFuZCBpbmNyZW1lbnRcbiAgICAgICAgdmFyIG5vbmNlID0gZXRoVXRpbC5idWZmZXJUb0ludCh0eC5ub25jZSlcbiAgICAgICAgbm9uY2UrK1xuICAgICAgICAvLyBoZXhpZnkgYW5kIG5vcm1hbGl6ZVxuICAgICAgICB2YXIgaGV4Tm9uY2UgPSBub25jZS50b1N0cmluZygxNilcbiAgICAgICAgaWYgKGhleE5vbmNlLmxlbmd0aCUyKSBoZXhOb25jZSA9ICcwJytoZXhOb25jZVxuICAgICAgICBoZXhOb25jZSA9ICcweCcraGV4Tm9uY2VcbiAgICAgICAgLy8gZG9udCB1cGRhdGUgb3VyIHJlY29yZCBvbiB0aGUgbm9uY2UgdW50aWwgdGhlIHN1Ym1pdCB3YXMgc3VjY2Vzc2Z1bFxuICAgICAgICAvLyB1cGRhdGUgY2FjaGVcbiAgICAgICAgc2VsZi5ub25jZUNhY2hlW2FkZHJlc3NdID0gaGV4Tm9uY2VcbiAgICAgICAgY2IoKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuXG4gICAvLyBDbGVhciBjYWNoZSBvbiBhIHRlc3RycGMgcmV2ZXJ0XG4gICBjYXNlICdldm1fcmV2ZXJ0JzpcbiAgICAgIHNlbGYubm9uY2VDYWNoZSA9IHt9XG4gICAgICBuZXh0KClcbiAgICAgIHJldHVyblxuXG4gICAgZGVmYXVsdDpcbiAgICAgIG5leHQoKVxuICAgICAgcmV0dXJuXG5cbiAgfVxufVxuIiwiY29uc3QgY3JlYXRlUGF5bG9hZCA9IHJlcXVpcmUoJy4uL3V0aWwvY3JlYXRlLXBheWxvYWQuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1YlByb3ZpZGVyXG5cbi8vIHRoaXMgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIGEgc3VicHJvdmlkZXIgLS0gbW9zdGx5IGhlbHBlcnNcblxuXG5mdW5jdGlvbiBTdWJQcm92aWRlcigpIHtcblxufVxuXG5TdWJQcm92aWRlci5wcm90b3R5cGUuc2V0RW5naW5lID0gZnVuY3Rpb24oZW5naW5lKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLmVuZ2luZSkgcmV0dXJuXG4gIHNlbGYuZW5naW5lID0gZW5naW5lXG4gIGVuZ2luZS5vbignYmxvY2snLCBmdW5jdGlvbihibG9jaykge1xuICAgIHNlbGYuY3VycmVudEJsb2NrID0gYmxvY2tcbiAgfSlcblxuICBlbmdpbmUub24oJ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuc3RhcnQoKVxuICB9KVxuXG4gIGVuZ2luZS5vbignc3RvcCcsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLnN0b3AoKVxuICB9KVxufVxuXG5TdWJQcm92aWRlci5wcm90b3R5cGUuaGFuZGxlUmVxdWVzdCA9IGZ1bmN0aW9uKHBheWxvYWQsIG5leHQsIGVuZCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1N1YnByb3ZpZGVycyBzaG91bGQgb3ZlcnJpZGUgYGhhbmRsZVJlcXVlc3RgLicpXG59XG5cblN1YlByb3ZpZGVyLnByb3RvdHlwZS5lbWl0UGF5bG9hZCA9IGZ1bmN0aW9uKHBheWxvYWQsIGNiKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgc2VsZi5lbmdpbmUuc2VuZEFzeW5jKGNyZWF0ZVBheWxvYWQocGF5bG9hZCksIGNiKVxufVxuXG4vLyBkdW1taWVzIGZvciBvdmVycmlkaW5nXG5cblN1YlByb3ZpZGVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge31cblxuU3ViUHJvdmlkZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge31cbiIsImNvbnN0IFByb3ZpZGVyU3VicHJvdmlkZXIgPSByZXF1aXJlKCcuL2pzb24tcnBjLWVuZ2luZS1taWRkbGV3YXJlJylcbmNvbnN0IGNyZWF0ZVN1YnNjcmlwdGlvbk1hbmFnZXIgPSByZXF1aXJlKCdldGgtanNvbi1ycGMtZmlsdGVycy9zdWJzY3JpcHRpb25NYW5hZ2VyJylcblxuY2xhc3MgU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJTdWJwcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCh7IGJsb2NrVHJhY2tlciwgcHJvdmlkZXIsIGVuZ2luZSB9KSA9PiB7XG4gICAgICBjb25zdCB7IGV2ZW50cywgbWlkZGxld2FyZSB9ID0gY3JlYXRlU3Vic2NyaXB0aW9uTWFuYWdlcih7IGJsb2NrVHJhY2tlciwgcHJvdmlkZXIgfSlcbiAgICAgIC8vIGZvcndhcmQgc3Vic2NyaXB0aW9uIGV2ZW50cyBvbiB0aGUgZW5naW5lXG4gICAgICBldmVudHMub24oJ25vdGlmaWNhdGlvbicsIChkYXRhKSA9PiBlbmdpbmUuZW1pdCgnZGF0YScsIG51bGwsIGRhdGEpKVxuICAgICAgLy8gcmV0dXJuIHRoZSBzdWJzY3JpcHRpb24gaW5zdGFsbC9yZW1vdmUgbWlkZGxld2FyZVxuICAgICAgcmV0dXJuIG1pZGRsZXdhcmVcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyXG4iLCJjb25zdCBnZXRSYW5kb21JZCA9IHJlcXVpcmUoJy4vcmFuZG9tLWlkLmpzJylcbmNvbnN0IGV4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVQYXlsb2FkXG5cblxuZnVuY3Rpb24gY3JlYXRlUGF5bG9hZChkYXRhKXtcbiAgcmV0dXJuIGV4dGVuZCh7XG4gICAgLy8gZGVmYXVsdHNcbiAgICBpZDogZ2V0UmFuZG9tSWQoKSxcbiAgICBqc29ucnBjOiAnMi4wJyxcbiAgICBwYXJhbXM6IFtdLFxuICAgIC8vIHVzZXItc3BlY2lmaWVkXG4gIH0sIGRhdGEpXG59XG4iLCJjb25zdCBjcmVhdGVQYXlsb2FkID0gcmVxdWlyZSgnLi9jcmVhdGUtcGF5bG9hZC5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZXN0aW1hdGVHYXNcblxuLypcblxuVGhpcyBpcyBhIHdvcmsgYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzI1NzdcblxuKi9cblxuXG5mdW5jdGlvbiBlc3RpbWF0ZUdhcyhwcm92aWRlciwgdHhQYXJhbXMsIGNiKSB7XG4gIHByb3ZpZGVyLnNlbmRBc3luYyhjcmVhdGVQYXlsb2FkKHtcbiAgICBtZXRob2Q6ICdldGhfZXN0aW1hdGVHYXMnLFxuICAgIHBhcmFtczogW3R4UGFyYW1zXVxuICB9KSwgZnVuY3Rpb24oZXJyLCByZXMpe1xuICAgIGlmIChlcnIpIHtcbiAgICAgIC8vIGhhbmRsZSBzaW1wbGUgdmFsdWUgdHJhbnNmZXIgY2FzZVxuICAgICAgaWYgKGVyci5tZXNzYWdlID09PSAnbm8gY29udHJhY3QgY29kZSBhdCBnaXZlbiBhZGRyZXNzJykge1xuICAgICAgICByZXR1cm4gY2IobnVsbCwgJzB4Y2YwOCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2IoZXJyKSAgICAgICAgXG4gICAgICB9XG4gICAgfVxuICAgIGNiKG51bGwsIHJlcy5yZXN1bHQpXG4gIH0pXG59IiwibW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVSYW5kb21JZFxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVJhbmRvbUlkICgpIHtcbiAgLy8gcmFuZG9tIGlkXG4gIHJldHVybiBNYXRoLmZsb29yKE51bWJlci5NQVhfU0FGRV9JTlRFR0VSICogTWF0aC5yYW5kb20oKSlcbn0iLCJjb25zdCBzdHJpbmdpZnkgPSByZXF1aXJlKCdqc29uLXN0YWJsZS1zdHJpbmdpZnknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2FjaGVJZGVudGlmaWVyRm9yUGF5bG9hZDogY2FjaGVJZGVudGlmaWVyRm9yUGF5bG9hZCxcbiAgY2FuQ2FjaGU6IGNhbkNhY2hlLFxuICBibG9ja1RhZ0ZvclBheWxvYWQ6IGJsb2NrVGFnRm9yUGF5bG9hZCxcbiAgcGFyYW1zV2l0aG91dEJsb2NrVGFnOiBwYXJhbXNXaXRob3V0QmxvY2tUYWcsXG4gIGJsb2NrVGFnUGFyYW1JbmRleDogYmxvY2tUYWdQYXJhbUluZGV4LFxuICBjYWNoZVR5cGVGb3JQYXlsb2FkOiBjYWNoZVR5cGVGb3JQYXlsb2FkLFxufVxuXG5mdW5jdGlvbiBjYWNoZUlkZW50aWZpZXJGb3JQYXlsb2FkKHBheWxvYWQsIG9wdHMgPSB7fSl7XG4gIGlmICghY2FuQ2FjaGUocGF5bG9hZCkpIHJldHVybiBudWxsXG4gIGNvbnN0IHsgaW5jbHVkZUJsb2NrUmVmIH0gPSBvcHRzXG4gIGNvbnN0IHBhcmFtcyA9IGluY2x1ZGVCbG9ja1JlZiA/IHBheWxvYWQucGFyYW1zIDogcGFyYW1zV2l0aG91dEJsb2NrVGFnKHBheWxvYWQpXG4gIHJldHVybiBwYXlsb2FkLm1ldGhvZCArICc6JyArIHN0cmluZ2lmeShwYXJhbXMpXG59XG5cbmZ1bmN0aW9uIGNhbkNhY2hlKHBheWxvYWQpe1xuICByZXR1cm4gY2FjaGVUeXBlRm9yUGF5bG9hZChwYXlsb2FkKSAhPT0gJ25ldmVyJ1xufVxuXG5mdW5jdGlvbiBibG9ja1RhZ0ZvclBheWxvYWQocGF5bG9hZCl7XG4gIHZhciBpbmRleCA9IGJsb2NrVGFnUGFyYW1JbmRleChwYXlsb2FkKTtcblxuICAvLyBCbG9jayB0YWcgcGFyYW0gbm90IHBhc3NlZC5cbiAgaWYgKGluZGV4ID49IHBheWxvYWQucGFyYW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBheWxvYWQucGFyYW1zW2luZGV4XTtcbn1cblxuZnVuY3Rpb24gcGFyYW1zV2l0aG91dEJsb2NrVGFnKHBheWxvYWQpe1xuICB2YXIgaW5kZXggPSBibG9ja1RhZ1BhcmFtSW5kZXgocGF5bG9hZCk7XG5cbiAgLy8gQmxvY2sgdGFnIHBhcmFtIG5vdCBwYXNzZWQuXG4gIGlmIChpbmRleCA+PSBwYXlsb2FkLnBhcmFtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gcGF5bG9hZC5wYXJhbXM7XG4gIH1cblxuICAvLyBldGhfZ2V0QmxvY2tCeU51bWJlciBoYXMgdGhlIGJsb2NrIHRhZyBmaXJzdCwgdGhlbiB0aGUgb3B0aW9uYWwgaW5jbHVkZVR4PyBwYXJhbVxuICBpZiAocGF5bG9hZC5tZXRob2QgPT09ICdldGhfZ2V0QmxvY2tCeU51bWJlcicpIHtcbiAgICByZXR1cm4gcGF5bG9hZC5wYXJhbXMuc2xpY2UoMSk7XG4gIH1cblxuICByZXR1cm4gcGF5bG9hZC5wYXJhbXMuc2xpY2UoMCxpbmRleCk7XG59XG5cbmZ1bmN0aW9uIGJsb2NrVGFnUGFyYW1JbmRleChwYXlsb2FkKXtcbiAgc3dpdGNoKHBheWxvYWQubWV0aG9kKSB7XG4gICAgLy8gYmxvY2tUYWcgaXMgdGhpcmQgcGFyYW1cbiAgICBjYXNlICdldGhfZ2V0U3RvcmFnZUF0JzpcbiAgICAgIHJldHVybiAyXG4gICAgLy8gYmxvY2tUYWcgaXMgc2Vjb25kIHBhcmFtXG4gICAgY2FzZSAnZXRoX2dldEJhbGFuY2UnOlxuICAgIGNhc2UgJ2V0aF9nZXRDb2RlJzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25Db3VudCc6XG4gICAgY2FzZSAnZXRoX2NhbGwnOlxuICAgIGNhc2UgJ2V0aF9lc3RpbWF0ZUdhcyc6XG4gICAgICByZXR1cm4gMVxuICAgIC8vIGJsb2NrVGFnIGlzIGZpcnN0IHBhcmFtXG4gICAgY2FzZSAnZXRoX2dldEJsb2NrQnlOdW1iZXInOlxuICAgICAgcmV0dXJuIDBcbiAgICAvLyB0aGVyZSBpcyBubyBibG9ja1RhZ1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuZnVuY3Rpb24gY2FjaGVUeXBlRm9yUGF5bG9hZChwYXlsb2FkKSB7XG4gIHN3aXRjaCAocGF5bG9hZC5tZXRob2QpIHtcbiAgICAvLyBjYWNoZSBwZXJtYW5lbnRseVxuICAgIGNhc2UgJ3dlYjNfY2xpZW50VmVyc2lvbic6XG4gICAgY2FzZSAnd2ViM19zaGEzJzpcbiAgICBjYXNlICdldGhfcHJvdG9jb2xWZXJzaW9uJzpcbiAgICBjYXNlICdldGhfZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50QnlIYXNoJzpcbiAgICBjYXNlICdldGhfZ2V0VW5jbGVDb3VudEJ5QmxvY2tIYXNoJzpcbiAgICBjYXNlICdldGhfZ2V0Q29kZSc6XG4gICAgY2FzZSAnZXRoX2dldEJsb2NrQnlIYXNoJzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25CeUhhc2gnOlxuICAgIGNhc2UgJ2V0aF9nZXRUcmFuc2FjdGlvbkJ5QmxvY2tIYXNoQW5kSW5kZXgnOlxuICAgIGNhc2UgJ2V0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHQnOlxuICAgIGNhc2UgJ2V0aF9nZXRVbmNsZUJ5QmxvY2tIYXNoQW5kSW5kZXgnOlxuICAgIGNhc2UgJ2V0aF9nZXRDb21waWxlcnMnOlxuICAgIGNhc2UgJ2V0aF9jb21waWxlTExMJzpcbiAgICBjYXNlICdldGhfY29tcGlsZVNvbGlkaXR5JzpcbiAgICBjYXNlICdldGhfY29tcGlsZVNlcnBlbnQnOlxuICAgIGNhc2UgJ3NoaF92ZXJzaW9uJzpcbiAgICAgIHJldHVybiAncGVybWEnXG5cbiAgICAvLyBjYWNoZSB1bnRpbCBmb3JrXG4gICAgY2FzZSAnZXRoX2dldEJsb2NrQnlOdW1iZXInOlxuICAgIGNhc2UgJ2V0aF9nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnRCeU51bWJlcic6XG4gICAgY2FzZSAnZXRoX2dldFVuY2xlQ291bnRCeUJsb2NrTnVtYmVyJzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25CeUJsb2NrTnVtYmVyQW5kSW5kZXgnOlxuICAgIGNhc2UgJ2V0aF9nZXRVbmNsZUJ5QmxvY2tOdW1iZXJBbmRJbmRleCc6XG4gICAgICByZXR1cm4gJ2ZvcmsnXG5cbiAgICAvLyBjYWNoZSBmb3IgYmxvY2tcbiAgICBjYXNlICdldGhfZ2FzUHJpY2UnOlxuICAgIGNhc2UgJ2V0aF9nZXRCYWxhbmNlJzpcbiAgICBjYXNlICdldGhfZ2V0U3RvcmFnZUF0JzpcbiAgICBjYXNlICdldGhfZ2V0VHJhbnNhY3Rpb25Db3VudCc6XG4gICAgY2FzZSAnZXRoX2NhbGwnOlxuICAgIGNhc2UgJ2V0aF9lc3RpbWF0ZUdhcyc6XG4gICAgY2FzZSAnZXRoX2dldEZpbHRlckxvZ3MnOlxuICAgIGNhc2UgJ2V0aF9nZXRMb2dzJzpcbiAgICBjYXNlICdldGhfYmxvY2tOdW1iZXInOlxuICAgICAgcmV0dXJuICdibG9jaydcblxuICAgIC8vIG5ldmVyIGNhY2hlXG4gICAgY2FzZSAnbmV0X3ZlcnNpb24nOlxuICAgIGNhc2UgJ25ldF9wZWVyQ291bnQnOlxuICAgIGNhc2UgJ25ldF9saXN0ZW5pbmcnOlxuICAgIGNhc2UgJ2V0aF9zeW5jaW5nJzpcbiAgICBjYXNlICdldGhfc2lnbic6XG4gICAgY2FzZSAnZXRoX2NvaW5iYXNlJzpcbiAgICBjYXNlICdldGhfbWluaW5nJzpcbiAgICBjYXNlICdldGhfaGFzaHJhdGUnOlxuICAgIGNhc2UgJ2V0aF9hY2NvdW50cyc6XG4gICAgY2FzZSAnZXRoX3NlbmRUcmFuc2FjdGlvbic6XG4gICAgY2FzZSAnZXRoX3NlbmRSYXdUcmFuc2FjdGlvbic6XG4gICAgY2FzZSAnZXRoX25ld0ZpbHRlcic6XG4gICAgY2FzZSAnZXRoX25ld0Jsb2NrRmlsdGVyJzpcbiAgICBjYXNlICdldGhfbmV3UGVuZGluZ1RyYW5zYWN0aW9uRmlsdGVyJzpcbiAgICBjYXNlICdldGhfdW5pbnN0YWxsRmlsdGVyJzpcbiAgICBjYXNlICdldGhfZ2V0RmlsdGVyQ2hhbmdlcyc6XG4gICAgY2FzZSAnZXRoX2dldFdvcmsnOlxuICAgIGNhc2UgJ2V0aF9zdWJtaXRXb3JrJzpcbiAgICBjYXNlICdldGhfc3VibWl0SGFzaHJhdGUnOlxuICAgIGNhc2UgJ2RiX3B1dFN0cmluZyc6XG4gICAgY2FzZSAnZGJfZ2V0U3RyaW5nJzpcbiAgICBjYXNlICdkYl9wdXRIZXgnOlxuICAgIGNhc2UgJ2RiX2dldEhleCc6XG4gICAgY2FzZSAnc2hoX3Bvc3QnOlxuICAgIGNhc2UgJ3NoaF9uZXdJZGVudGl0eSc6XG4gICAgY2FzZSAnc2hoX2hhc0lkZW50aXR5JzpcbiAgICBjYXNlICdzaGhfbmV3R3JvdXAnOlxuICAgIGNhc2UgJ3NoaF9hZGRUb0dyb3VwJzpcbiAgICBjYXNlICdzaGhfbmV3RmlsdGVyJzpcbiAgICBjYXNlICdzaGhfdW5pbnN0YWxsRmlsdGVyJzpcbiAgICBjYXNlICdzaGhfZ2V0RmlsdGVyQ2hhbmdlcyc6XG4gICAgY2FzZSAnc2hoX2dldE1lc3NhZ2VzJzpcbiAgICAgIHJldHVybiAnbmV2ZXInXG4gIH1cbn1cbiIsImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHNcblxubW9kdWxlLmV4cG9ydHMgPSBTdG9wbGlnaHRcblxuXG5pbmhlcml0cyhTdG9wbGlnaHQsIEV2ZW50RW1pdHRlcilcblxuZnVuY3Rpb24gU3RvcGxpZ2h0KCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIEV2ZW50RW1pdHRlci5jYWxsKHNlbGYpXG4gIHNlbGYuaXNMb2NrZWQgPSB0cnVlXG59XG5cblN0b3BsaWdodC5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbigpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBzZWxmLmlzTG9ja2VkID0gZmFsc2VcbiAgc2VsZi5lbWl0KCd1bmxvY2snKVxufVxuXG5TdG9wbGlnaHQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBzZWxmLmlzTG9ja2VkID0gdHJ1ZVxuICBzZWxmLmVtaXQoJ2xvY2snKVxufVxuXG5TdG9wbGlnaHQucHJvdG90eXBlLmF3YWl0ID0gZnVuY3Rpb24oZm4pe1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBpZiAoc2VsZi5pc0xvY2tlZCkge1xuICAgIHNlbGYub25jZSgndW5sb2NrJywgZm4pXG4gIH0gZWxzZSB7XG4gICAgc2V0VGltZW91dChmbilcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnd3MgZG9lcyBub3Qgd29yayBpbiB0aGUgYnJvd3Nlci4gQnJvd3NlciBjbGllbnRzIG11c3QgdXNlIHRoZSBuYXRpdmUgJyArXG4gICAgICAnV2ViU29ja2V0IG9iamVjdCdcbiAgKTtcbn07XG4iXSwibmFtZXMiOlsicmVzZXJ2ZWRFdmVudHMiLCJzaWduaW5nTWV0aG9kcyIsImluZnVyYU5ldHdvcmtzIiwiRU5DX0hFWCIsIkVOQ19VVEY4IiwiU1RSSU5HX1pFUk8iLCJidWZmZXJUb0FycmF5IiwiYnVmIiwiVWludDhBcnJheSIsImJ1ZmZlclRvSGV4IiwicHJlZml4ZWQiLCJoZXgiLCJ0b1N0cmluZyIsImFkZEhleFByZWZpeCIsImJ1ZmZlclRvVXRmOCIsImFycmF5VG9CdWZmZXIiLCJhcnIiLCJhcnJheVRvSGV4IiwiYXJyYXlUb1V0ZjgiLCJoZXhUb0J1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJyZW1vdmVIZXhQcmVmaXgiLCJoZXhUb0FycmF5IiwidXRmOFRvQnVmZmVyIiwidXRmOCIsInV0ZjhUb0FycmF5IiwiaXNIZXhTdHJpbmciLCJzdHIiLCJsZW5ndGgiLCJtYXRjaCIsImNvbmNhdEFycmF5cyIsImFyZ3MiLCJyZXN1bHQiLCJmb3JFYWNoIiwiYXJnIiwiY29uY2F0IiwiQXJyYXkiLCJzYW5pdGl6ZUJ5dGVzIiwiYnl0ZVNpemUiLCJwYWRkaW5nIiwicGFkU3RyaW5nIiwicGFkTGVmdCIsInJlbWFpbmRlciIsImNhbGNCeXRlTGVuZ3RoIiwicmVwbGFjZSIsInN0YXJ0c1dpdGgiLCJzYW5pdGl6ZUhleCIsImxlZnQiLCJkaWZmIiwicGFkIiwicmVwZWF0IiwiY29udmVydEFycmF5QnVmZmVyVG9CdWZmZXIiLCJhcnJCdWYiLCJjb252ZXJ0VXRmOFRvSGV4Iiwibm9QcmVmaXgiLCJjb252ZXJ0TnVtYmVyVG9IZXgiLCJudW0iLCJwYXlsb2FkSWQiLCJEYXRlIiwibm93IiwiTWF0aCIsInBvdyIsImZsb29yIiwicmFuZG9tIiwic3Vic3RyaW5nIiwidXVpZCIsImEiLCJiIiwiZ2V0UnBjVXJsIiwiY2hhaW5JZCIsInJwYyIsInJwY1VybCIsImluZnVyYVVybCIsImluZnVyYUlkIiwibmV0d29yayIsImdldEluZnVyYVJwY1VybCIsImN1c3RvbSIsInZhbHVlIiwiaXNKc29uUnBjUmVzcG9uc2VTdWNjZXNzIiwib2JqZWN0IiwiaXNKc29uUnBjUmVzcG9uc2VFcnJvciIsImVycm9yIiwiaXNJbnRlcm5hbEV2ZW50IiwiZXZlbnQiLCJ0b0NoZWNrc3VtQWRkcmVzcyIsImFkZHJlc3MiLCJ0b0xvd2VyQ2FzZSIsImhhc2giLCJrZWNjYWtfMjU2IiwiY29udmVydFV0ZjhUb0J1ZmZlciIsImNoZWNrc3VtIiwiaSIsInBhcnNlSW50IiwidG9VcHBlckNhc2UiLCJwYXJzZVBlcnNvbmFsU2lnbiIsInBhcmFtcyIsImFycmF5IiwiaXNFbXB0eUFycmF5IiwicGFyc2VUcmFuc2FjdGlvbkRhdGEiLCJ0eERhdGEiLCJ0eXBlIiwidGVzdCIsImlzVmFsaWRBZGRyZXNzIiwiRXJyb3IiLCJwYXJzZUhleFZhbHVlcyIsInRyaW0iLCJpc0VtcHR5U3RyaW5nIiwidHhEYXRhUlBDIiwidG8iLCJ1bmRlZmluZWQiLCJnYXNQcmljZSIsImdhcyIsImdhc0xpbWl0Iiwibm9uY2UiLCJkYXRhIiwicHJ1bmFibGUiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiaW5jbHVkZXMiLCJhcHBlbmRUb1F1ZXJ5U3RyaW5nIiwicXVlcnlTdHJpbmciLCJuZXdRdWVyeVBhcmFtcyIsInF1ZXJ5UGFyYW1zIiwicGFyc2VRdWVyeVN0cmluZyIsImFzc2lnbiIsImZvcm1hdFF1ZXJ5U3RyaW5nIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiX2V2ZW50RW1pdHRlcnMiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwidHJpZ2dlciIsIm9uIiwiY2FsbGJhY2siLCJwdXNoIiwiZXZlbnRFbWl0dGVycyIsImZpbHRlciIsImV2ZW50RW1pdHRlciIsIldTIiwiZyIsIldlYlNvY2tldCIsIm9wdHMiLCJfcXVldWUiLCJfZXZlbnRzIiwiX3N1YnNjcmlwdGlvbnMiLCJfcHJvdG9jb2wiLCJwcm90b2NvbCIsIl92ZXJzaW9uIiwidmVyc2lvbiIsIl91cmwiLCJfbmV0TW9uaXRvciIsIl9zb2NrZXQiLCJfbmV4dFNvY2tldCIsInN1YnNjcmlwdGlvbnMiLCJuZXRNb25pdG9yIiwidXJsIiwiX3NvY2tldENyZWF0ZSIsInJlYWR5U3RhdGUiLCJjb25uZWN0aW5nIiwiY29ubmVjdGVkIiwiY2xvc2luZyIsImNsb3NlZCIsIm9wZW4iLCJjbG9zZSIsIl9zb2NrZXRDbG9zZSIsInNlbmQiLCJtZXNzYWdlIiwidG9waWMiLCJzaWxlbnQiLCJfc29ja2V0U2VuZCIsInBheWxvYWQiLCJzdWJzY3JpYmUiLCJfYSIsIl9iIiwic3BsaXRVcmwiLCJzcGxpdCIsImlzQnJvd3NlciIsImVudiIsImhvc3QiLCJnZXRMb2NhdGlvbiIsImRldGVjdEVudiIsIm5hbWUiLCJwYXRoRW5kIiwiaW5kZXhPZiIsInN1YnN0ciIsImdldFF1ZXJ5U3RyaW5nIiwiZ2V0V2ViU29ja2V0VXJsIiwib25tZXNzYWdlIiwiX3NvY2tldFJlY2VpdmUiLCJvbm9wZW4iLCJfc29ja2V0T3BlbiIsIm9uZXJyb3IiLCJfc29ja2V0RXJyb3IiLCJvbmNsb3NlIiwic2V0VGltZW91dCIsIl9xdWV1ZVN1YnNjcmlwdGlvbnMiLCJfcHVzaFF1ZXVlIiwic29ja2V0TWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfc2V0VG9RdWV1ZSIsImFzeW5jIiwicGFyc2UiLCJldmVudHMiLCJlIiwiRVJST1JfU0VTU0lPTl9DT05ORUNURUQiLCJFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCIsIkVSUk9SX0lOVkFMSURfUkVTUE9OU0UiLCJFUlJPUl9RUkNPREVfTU9EQUxfVVNFUl9DTE9TRUQiLCJ1bnN1YnNjcmliZSIsIngiLCJtZXRob2QiLCJpc0pzb25ScGNSZXF1ZXN0IiwiaWQiLCJpc1Jlc2VydmVkRXZlbnQiLCJzdG9yYWdlSWQiLCJnZXRTZXNzaW9uIiwic2Vzc2lvbiIsImpzb24iLCJnZXRMb2NhbCIsImJyaWRnZSIsImlzV2FsbGV0Q29ubmVjdFNlc3Npb24iLCJzZXRTZXNzaW9uIiwic2V0TG9jYWwiLCJyZW1vdmVTZXNzaW9uIiwicmVtb3ZlTG9jYWwiLCJicmlkZ2VzIiwibWFwIiwiY2hhciIsInNlbGVjdFJhbmRvbUJyaWRnZVVybCIsInJhbmRvbUJyaWRnZUluZGV4IiwiX2JyaWRnZSIsIl9rZXkiLCJfY2xpZW50SWQiLCJfY2xpZW50TWV0YSIsIl9wZWVySWQiLCJfcGVlck1ldGEiLCJfaGFuZHNoYWtlSWQiLCJfaGFuZHNoYWtlVG9waWMiLCJfY29ubmVjdGVkIiwiX2FjY291bnRzIiwiX2NoYWluSWQiLCJfbmV0d29ya0lkIiwiX3JwY1VybCIsIl9ldmVudE1hbmFnZXIiLCJnZXRDbGllbnRNZXRhIiwiY29ubmVjdG9yT3B0cyIsImNsaWVudE1ldGEiLCJfY3J5cHRvTGliIiwiY3J5cHRvTGliIiwiX3Nlc3Npb25TdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJfcXJjb2RlTW9kYWwiLCJxcmNvZGVNb2RhbCIsIl9xcmNvZGVNb2RhbE9wdGlvbnMiLCJxcmNvZGVNb2RhbE9wdGlvbnMiLCJfc2lnbmluZ01ldGhvZHMiLCJ1cmkiLCJob3N0bmFtZSIsImV4dHJhY3RIb3N0bmFtZSIsInNsaWNlIiwiam9pbiIsImV4dHJhY3RSb290RG9tYWluIiwic2hvdWxkU2VsZWN0UmFuZG9tbHkiLCJnZXRCcmlkZ2VVcmwiLCJfZ2V0U3RvcmFnZVNlc3Npb24iLCJoYW5kc2hha2VJZCIsIl9zdWJzY3JpYmVUb1Nlc3Npb25SZXNwb25zZSIsIl90cmFuc3BvcnQiLCJ0cmFuc3BvcnQiLCJjbGllbnRJZCIsIl9zdWJzY3JpYmVUb0ludGVybmFsRXZlbnRzIiwiX2luaXRUcmFuc3BvcnQiLCJfc3Vic2NyaWJlVG9TZXNzaW9uUmVxdWVzdCIsInB1c2hTZXJ2ZXJPcHRzIiwiX3JlZ2lzdGVyUHVzaFNlcnZlciIsImJ1ZmZlciIsImNvbnZlcnRIZXhUb0FycmF5QnVmZmVyIiwiY29udmVydEFycmF5QnVmZmVyVG9IZXgiLCJwZWVySWQiLCJwZWVyTWV0YSIsImhhbmRzaGFrZVRvcGljIiwiX2Zvcm1hdFVyaSIsIl9wYXJzZVVyaSIsIm5ldHdvcmtJZCIsImFjY291bnRzIiwicGVuZGluZyIsIm9mZiIsImluc3RhbnRSZXF1ZXN0IiwiX2dlbmVyYXRlS2V5IiwicmVxdWVzdCIsIl9mb3JtYXRSZXF1ZXN0IiwiZW5kSW5zdGFudFJlcXVlc3QiLCJraWxsU2Vzc2lvbiIsIl9zZW5kQ2FsbFJlcXVlc3QiLCJjcmVhdGVTZXNzaW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJfc2VuZFNlc3Npb25SZXF1ZXN0IiwiYXBwcm92ZVNlc3Npb24iLCJzZXNzaW9uU3RhdHVzIiwic2Vzc2lvblBhcmFtcyIsImFwcHJvdmVkIiwicmVzcG9uc2UiLCJqc29ucnBjIiwiX3NlbmRSZXNwb25zZSIsIl9zZXRTdG9yYWdlU2Vzc2lvbiIsInJlamVjdFNlc3Npb24iLCJzZXNzaW9uRXJyb3IiLCJfZm9ybWF0UmVzcG9uc2UiLCJfcmVtb3ZlU3RvcmFnZVNlc3Npb24iLCJ1cGRhdGVTZXNzaW9uIiwiX21hbmFnZVN0b3JhZ2VTZXNzaW9uIiwiX3NlbmRSZXF1ZXN0IiwiX2hhbmRsZVNlc3Npb25EaXNjb25uZWN0IiwidHgiLCJwYXJzZWRUeCIsImNoYWluUGFyYW1zIiwidW5zYWZlU2VuZCIsIm9wdGlvbnMiLCJfc3Vic2NyaWJlVG9SZXNwb25zZSIsImZvcm1hdHRlZFJlcXVlc3QiLCJhcHByb3ZlUmVxdWVzdCIsImZvcm1hdHRlZFJlc3BvbnNlIiwicmVqZWN0UmVxdWVzdCIsInRyYW5zcG9ydENsb3NlIiwiY2FsbFJlcXVlc3QiLCJlbmNyeXB0aW9uUGF5bG9hZCIsIl9lbmNyeXB0IiwiZm9yY2VQdXNoTm90aWZpY2F0aW9uIiwiaXNTaWxlbnRQYXlsb2FkIiwiZXJyb3JNc2ciLCJfc3Vic2NyaWJlVG9DYWxsUmVzcG9uc2UiLCJiYXNlUmVzcG9uc2UiLCJjb2RlIiwiZm9ybWF0UnBjRXJyb3IiLCJtb2JpbGVMaW5rQ2hvaWNlS2V5IiwiX2hhbmRsZVNlc3Npb25SZXNwb25zZSIsIl9kZWNyeXB0IiwiaXNNb2JpbGUiLCJtb2JpbGVMaW5rVXJsIiwibG9jYXRpb24iLCJocmVmIiwiaW50ZXJuYWxQYXlsb2FkIiwiX2hhbmRsZUluY29taW5nTWVzc2FnZXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXRoU3RhcnQiLCJyZXF1aXJlZFBhcmFtcyIsInBhdGgiLCJ2YWx1ZXMiLCJwYXJzZVJlcXVpcmVkUGFyYW1zIiwicGFyc2VRdWVyeVBhcmFtcyIsInBhcnNlV2FsbGV0Q29ubmVjdFVyaSIsImRlY29kZVVSSUNvbXBvbmVudCIsImdlbmVyYXRlS2V5IiwiZW5jcnlwdCIsImRlY3J5cHQiLCJ0b2tlbiIsInB1c2hTdWJzY3JpcHRpb24iLCJwZWVyTmFtZSIsImxhbmd1YWdlIiwiZmV0Y2giLCJoZWFkZXJzIiwiQWNjZXB0IiwiYm9keSIsInN1Y2Nlc3MiLCJicm93c2VySW1wb3J0S2V5IiwiaW1wb3J0S2V5IiwiZ2V0QWxnbyIsImdldE9wcyIsImFlc0NiY0VuY3J5cHQiLCJpdiIsInN1YnRsZSIsImNyeXB0b0tleSIsImJyb3dzZXJBZXNFbmNyeXB0IiwiYWVzQ2JjRGVjcnlwdCIsImJyb3dzZXJBZXNEZWNyeXB0IiwiaG1hY1NoYTI1NlNpZ24iLCJtc2ciLCJzaWduYXR1cmUiLCJzaWduIiwiYnl0ZXMiLCJnZXRSYW5kb21WYWx1ZXMiLCJjb252ZXJ0QnVmZmVyVG9BcnJheUJ1ZmZlciIsInZlcmlmeUhtYWMiLCJjaXBoZXJUZXh0IiwiaG1hY0hleCIsImhtYWMiLCJ1bnNpZ25lZCIsImNobWFjSGV4IiwicHJvdmlkZWRJdiIsIml2SGV4IiwiY29udGVudCIsImNpcGhlclRleHRIZXgiLCJzdXBlciIsIlhIUiIsImdldEZyb21XaW5kb3ciLCJYTUxIdHRwUmVxdWVzdCIsIkhUVFBDb25uZWN0aW9uIiwiZm9ybWF0RXJyb3IiLCJpbnRlcm5hbCIsImVtaXQiLCJ4aHIiLCJyZXNwb25kZWQiLCJyZXMiLCJlcnIiLCJhYm9ydCIsInNldFJlcXVlc3RIZWFkZXIiLCJ0aW1lb3V0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUZXh0IiwiUHJvdmlkZXJFbmdpbmUiLCJDYWNoZVN1YnByb3ZpZGVyIiwiRml4dHVyZVN1YnByb3ZpZGVyIiwiRmlsdGVyU3VicHJvdmlkZXIiLCJIb29rZWRXYWxsZXRTdWJwcm92aWRlciIsIk5vbmNlU3VicHJvdmlkZXIiLCJTdWJzY3JpcHRpb25zU3VicHJvdmlkZXIiLCJwb2xsaW5nSW50ZXJ2YWwiLCJxcmNvZGUiLCJodHRwIiwiaXNDb25uZWN0aW5nIiwiY29ubmVjdENhbGxiYWNrcyIsImVuYWJsZSIsIndjIiwiZ2V0V2FsbGV0Q29ubmVjdG9yIiwic3RhcnQiLCJzdWJzY3JpYmVXYWxsZXRDb25uZWN0b3IiLCJzZW5kQXN5bmNQcm9taXNlIiwic2VuZEFzeW5jIiwib25Db25uZWN0IiwidHJpZ2dlckNvbm5lY3QiLCJjb25uZWN0b3IiLCJpbml0aWFsaXplIiwiaXNXYWxsZXRDb25uZWN0Iiwid2FsbGV0TWV0YSIsImRpc2FibGVTZXNzaW9uQ3JlYXRpb24iLCJvbkRpc2Nvbm5lY3QiLCJfIiwiaGFuZGxlT3RoZXJSZXF1ZXN0cyIsImZvcm1hdFJlc3BvbnNlIiwiaGFuZGxlUmVhZFJlcXVlc3RzIiwic2VuZEN1c3RvbVJlcXVlc3QiLCJ1cGRhdGVTdGF0ZSIsInRoZW4iLCJjYXRjaCIsInN0b3AiLCJ1cGRhdGVScGNVcmwiLCJ1cGRhdGVIdHRwQ29ubmVjdGlvbiIsImFkZFByb3ZpZGVyIiwiZXRoX2hhc2hyYXRlIiwiZXRoX21pbmluZyIsImV0aF9zeW5jaW5nIiwibmV0X2xpc3RlbmluZyIsIndlYjNfY2xpZW50VmVyc2lvbiIsImNvbmZpZ1dhbGxldCIsImhhbmRsZVJlcXVlc3QiLCJuZXh0IiwiZW5kIiwic2V0RW5naW5lIiwiZ2V0QWNjb3VudHMiLCJjYiIsInByb2Nlc3NNZXNzYWdlIiwibXNnUGFyYW1zIiwic2lnbk1lc3NhZ2UiLCJwcm9jZXNzUGVyc29uYWxNZXNzYWdlIiwic2lnblBlcnNvbmFsTWVzc2FnZSIsInByb2Nlc3NTaWduVHJhbnNhY3Rpb24iLCJ0eFBhcmFtcyIsInNpZ25UcmFuc2FjdGlvbiIsInByb2Nlc3NUcmFuc2FjdGlvbiIsInNlbmRUcmFuc2FjdGlvbiIsInByb2Nlc3NUeXBlZE1lc3NhZ2UiLCJzaWduVHlwZWREYXRhIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwic3RlcCIsInJlamVjdGVkIiwiZG9uZSIsImFkb3B0IiwiYXBwbHkiLCJfX2dlbmVyYXRvciIsImYiLCJ5IiwidCIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiVHlwZUVycm9yIiwiY2FsbCIsInBvcCIsImdldFdhbGxldENvbm5lY3RQcm92aWRlckluc3RhbmNlIiwiY2hlY2tDb25uZWN0aW9uT25seSIsIl9fc3ByZWFkQXJyYXlzIiwicyIsImlsIiwiYXJndW1lbnRzIiwiciIsImsiLCJqIiwiamwiLCJCcm93c2VySW5mbyIsIm9zIiwiTm9kZUluZm8iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJTZWFyY2hCb3REZXZpY2VJbmZvIiwiYm90IiwiQm90SW5mbyIsIlJlYWN0TmF0aXZlSW5mbyIsIlNFQVJDSEJPVF9PU19SRUdFWCIsInVzZXJBZ2VudFJ1bGVzIiwib3BlcmF0aW5nU3lzdGVtUnVsZXMiLCJkZXRlY3QiLCJ1c2VyQWdlbnQiLCJwYXJzZVVzZXJBZ2VudCIsImRvY3VtZW50IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImdldE5vZGVWZXJzaW9uIiwibWF0Y2hVc2VyQWdlbnQiLCJ1YSIsInJlZHVjZSIsIm1hdGNoZWQiLCJicm93c2VyIiwicmVnZXgiLCJ1YU1hdGNoIiwiZXhlYyIsIm1hdGNoZWRSdWxlIiwidmVyc2lvblBhcnRzIiwiY291bnQiLCJvdXRwdXQiLCJpaSIsImNyZWF0ZVZlcnNpb25QYXJ0cyIsImRldGVjdE9TIiwic2VhcmNoQm90TWF0Y2giLCJpc0FuZHJvaWQiLCJpc0lPUyIsIm1heFRvdWNoUG9pbnRzIiwiaXNOb2RlIiwiZ2V0TmF2aWdhdG9yIiwiZ2V0RnJvbVdpbmRvd09yVGhyb3ciLCJnZXREb2N1bWVudE9yVGhyb3ciLCJnZXREb2N1bWVudCIsImdldE5hdmlnYXRvck9yVGhyb3ciLCJnZXRMb2NhdGlvbk9yVGhyb3ciLCJnZXRDcnlwdG9PclRocm93IiwiZ2V0Q3J5cHRvIiwiZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyIsImdldExvY2FsU3RvcmFnZSIsInJhdyIsImxvY2FsIiwic2V0SXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZm9ybWF0SU9TTW9iaWxlIiwiZW50cnkiLCJlbmNvZGVkVXJpIiwidW5pdmVyc2FsTGluayIsImRlZXBMaW5rIiwiZW5kc1dpdGgiLCJzYXZlTW9iaWxlTGlua0luZm8iLCJmb2N1c1VyaSIsImdldE1vYmlsZVJlZ2lzdHJ5RW50cnkiLCJyZWdpc3RyeSIsImdldE1vYmlsZUxpbmtSZWdpc3RyeSIsIndoaXRlbGlzdCIsImxpbmtzIiwiQm9vbGVhbiIsIkFQSV9VUkwiLCJnZXRXYWxsZXRSZWdpc3RyeVVybCIsImdldERhcHBSZWdpc3RyeVVybCIsImZvcm1hdE1vYmlsZVJlZ2lzdHJ5RW50cnkiLCJzaG9ydE5hbWUiLCJtZXRhZGF0YSIsImNvbG9yIiwiY29sb3JzIiwicHJpbWFyeSIsImxvZ28iLCJpbWFnZV91cmwiLCJzbSIsInVuaXZlcnNhbCIsIm5hdGl2ZSIsImZvcm1hdE1vYmlsZVJlZ2lzdHJ5IiwiZ2V0QnJvd2VyQ3J5cHRvIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRTdWJ0bGVDcnlwdG8iLCJicm93c2VyQ3J5cHRvIiwid2Via2l0U3VidGxlIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlIiwiaXNSZWFjdE5hdGl2ZSIsInZlcnNpb25zIiwibm9kZSIsIl9fY3JlYXRlQmluZGluZyIsImNyZWF0ZSIsIm8iLCJtIiwiazIiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwicCIsImhhc093blByb3BlcnR5IiwiX2ludGVyb3BEZWZhdWx0IiwiZXgiLCJicm93c2VyVXRpbHMiLCJRUkNvZGUiLCJjb3B5IiwiUmVhY3QiLCJhc3luY0l0ZXJhdG9yIiwiV0FMTEVUQ09OTkVDVF9XUkFQUEVSX0lEIiwiV0FMTEVUQ09OTkVDVF9TVFlMRV9JRCIsIldBTExFVENPTk5FQ1RfTU9EQUxfSUQiLCJXQUxMRVRDT05ORUNUX0NUQV9URVhUX0lEIiwiSGVhZGVyIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwic3JjIiwib25DbGljayIsIm9uQ2xvc2UiLCJDb25uZWN0QnV0dG9uIiwiV0FMTEVUQ09OTkVDVF9DT05ORUNUX0JVVFRPTl9JRCIsInJlbCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwidGFyZ2V0IiwiV2FsbGV0QnV0dG9uIiwiYmFja2dyb3VuZCIsImJhY2tncm91bmRTaXplIiwiV2FsbGV0SWNvbiIsImZvbnRTaXplIiwiaW5uZXJXaWR0aCIsIkxpbmtEaXNwbGF5IiwiYW5kcm9pZCIsInJlZiIsInVzZVN0YXRlIiwiaW5wdXQiLCJzZXRJbnB1dCIsInJlZiQxIiwic2V0RmlsdGVyIiwicmVmJDIiLCJwYWdlIiwic2V0UGFnZSIsImxpbmsiLCJlcnJvck1lc3NhZ2UiLCJncmlkIiwicGFnZXMiLCJjZWlsIiwicmFuZ2UiLCJwYWdlTGlua3MiLCJpbmRleCIsImhhc1BhZ2luZyIsImZpbHRlclRpbWVvdXQiLCJ0ZXh0IiwiY29ubmVjdF9tb2JpbGVfd2FsbGV0IiwiY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwiY2xlYXJUaW1lb3V0IiwiY29ubmVjdCIsInVzZUNhbGxiYWNrIiwiaGFuZGxlQ2xpY2tJT1MiLCJGcmFnbWVudCIsIm5vX3dhbGxldHNfZm91bmQiLCJsb2FkaW5nIiwiZmlsbCIsInBhZ2VOdW1iZXIiLCJzZWxlY3RlZCIsIm1hcmdpbiIsImZvbnRXZWlnaHQiLCJOb3RpZmljYXRpb24iLCJzaG93IiwiUVJDb2RlRGlzcGxheSIsIm5vdGlmaWNhdGlvbiIsInNldE5vdGlmaWNhdGlvbiIsInN2ZyIsInNldFN2ZyIsInVzZUVmZmVjdCIsImRhdGFTdHJpbmciLCJmb3JtYXRRUkNvZGVJbWFnZSIsIl9mb3JtYXRRUkNvZGVJbWFnZSIsInNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjb3BpZWRfdG9fY2xpcGJvYXJkIiwic2V0SW50ZXJ2YWwiLCJjb3B5X3RvX2NsaXBib2FyZCIsIk1vZGFsIiwibW9iaWxlIiwibW9iaWxlTGlua3MiLCJkZXNrdG9wTGlua3MiLCJzZXRMb2FkaW5nIiwiZmV0Y2hlZCIsInNldEZldGNoZWQiLCJkaXNwbGF5UVJDb2RlIiwic2V0RGlzcGxheVFSQ29kZSIsImRpc3BsYXlQcm9wcyIsInJlZiQzIiwic2luZ2xlTGlua0hyZWYiLCJzZXRTaW5nbGVMaW5rSHJlZiIsInJlZiQ0IiwiaGFzU2luZ2xlTGluayIsInNldEhhc1NpbmdsZUxpbmsiLCJyZWYkNSIsInNldExpbmtzIiwicmVmJDYiLCJzZXRFcnJvck1lc3NhZ2UiLCJnZXRMaW5rc0lmTmVlZGVkIiwiX3RlbXAiLCJyZWNvdmVyIiwiX2NhdGNoIiwicmVnaXN0cnlVcmwiLCJyZWdpc3RyeVJlc3BvbnNlIiwiX3JlZ2lzdHJ5UmVzcG9uc2UkanNvIiwibGlzdGluZ3MiLCJfbGlua3MiLCJub19zdXBwb3J0ZWRfd2FsbGV0cyIsInNvbWV0aGluZ193ZW50X3dyb25nIiwiY29uc29sZSIsImluaXRMaW5rcyIsInJpZ2h0U2VsZWN0ZWQiLCJjb25uZWN0X3dpdGgiLCJkZXNrdG9wIiwibGFuZ3VhZ2VzIiwiZGUiLCJlbiIsImVzIiwiZnIiLCJrbyIsInB0IiwiemgiLCJmYSIsInRyaWdnZXJDbG9zZUFuaW1hdGlvbiIsImRvYyIsIm1vZGFsIiwiZ2V0RWxlbWVudEJ5SWQiLCJ3cmFwcGVyIiwicmVtb3ZlQ2hpbGQiLCJnZXRXcmFwcGVkQ2FsbGJhY2siLCJnZXRUZXh0IiwibGFuZyIsIm9wZW4kMSIsInByZXYiLCJoZWFkIiwic2V0QXR0cmlidXRlIiwiaW5uZXJUZXh0IiwiYXBwZW5kQ2hpbGQiLCJpbmplY3RTdHlsZVNoZWV0IiwicmVuZGVyV3JhcHBlciIsInJlbmRlciIsImxvZyIsImNsb3NlJDEiLCJtb2R1bGUiLCJhc3NlcnQiLCJ2YWwiLCJpbmhlcml0cyIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsInByb3RvdHlwZSIsIkJOIiwibnVtYmVyIiwiYmFzZSIsImVuZGlhbiIsImlzQk4iLCJuZWdhdGl2ZSIsIndvcmRzIiwicmVkIiwiX2luaXQiLCJ3b3JkU2l6ZSIsInBhcnNlSGV4IiwibGVuIiwibWluIiwiYyIsImNoYXJDb2RlQXQiLCJwYXJzZUJhc2UiLCJtdWwiLCJpc0FycmF5IiwibWF4IiwicmlnaHQiLCJjbXAiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJfcGFyc2VIZXgiLCJfcGFyc2VCYXNlIiwic3RyaXAiLCJ0b0FycmF5IiwidyIsImxpbWJMZW4iLCJsaW1iUG93IiwidG90YWwiLCJtb2QiLCJ3b3JkIiwiaW11bG4iLCJfaWFkZG4iLCJkZXN0IiwiY2xvbmUiLCJfZXhwYW5kIiwic2l6ZSIsIl9ub3JtU2lnbiIsImluc3BlY3QiLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwic21hbGxNdWxUbyIsInNlbGYiLCJvdXQiLCJsbyIsImNhcnJ5IiwibmNhcnJ5IiwicndvcmQiLCJtYXhKIiwiZ3JvdXBTaXplIiwiZ3JvdXBCYXNlIiwiaXNaZXJvIiwibW9kbiIsImlkaXZuIiwidG9OdW1iZXIiLCJyZXQiLCJ0b0pTT04iLCJ0b0J1ZmZlciIsInRvQXJyYXlMaWtlIiwiQXJyYXlUeXBlIiwiYnl0ZUxlbmd0aCIsInJlcUxlbmd0aCIsImxpdHRsZUVuZGlhbiIsInEiLCJhbmRsbiIsIml1c2hybiIsImNsejMyIiwiX2NvdW50Qml0cyIsIl96ZXJvQml0cyIsImJpdExlbmd0aCIsImhpIiwiemVyb0JpdHMiLCJ0b1R3b3MiLCJ3aWR0aCIsImFicyIsImlub3RuIiwiaWFkZG4iLCJmcm9tVHdvcyIsInRlc3RuIiwibm90biIsImluZWciLCJpc05lZyIsIm5lZyIsIml1b3IiLCJpb3IiLCJvciIsInVvciIsIml1YW5kIiwiaWFuZCIsImFuZCIsInVhbmQiLCJpdXhvciIsIml4b3IiLCJ4b3IiLCJ1eG9yIiwiYnl0ZXNOZWVkZWQiLCJiaXRzTGVmdCIsInNldG4iLCJiaXQiLCJ3Yml0IiwiaWFkZCIsImlzdWIiLCJhZGQiLCJzdWIiLCJjb21iMTBNdWxUbyIsIm1pZCIsImEwIiwiYWwwIiwiYWgwIiwiYTEiLCJhbDEiLCJhaDEiLCJhMiIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJiMSIsImJsMSIsImJoMSIsImIyIiwiYmwyIiwiYmgyIiwiYjMiLCJibDMiLCJiaDMiLCJiNCIsImJsNCIsImJoNCIsImI1IiwiYmw1IiwiYmg1IiwiYjYiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYjkiLCJibDkiLCJiaDkiLCJ3MCIsImltdWwiLCJ3MSIsIncyIiwidzMiLCJ3NCIsInc1IiwidzYiLCJ3NyIsInc4IiwidzkiLCJ3MTAiLCJ3MTEiLCJ3MTIiLCJ3MTMiLCJ3MTQiLCJ3MTUiLCJ3MTYiLCJ3MTciLCJ3MTgiLCJqdW1ib011bFRvIiwiRkZUTSIsIm11bHAiLCJtdWxUbyIsImhuY2FycnkiLCJiaWdNdWxUbyIsIm1ha2VSQlQiLCJOIiwibCIsInJldkJpbiIsInJiIiwicGVybXV0ZSIsInJidCIsInJ3cyIsIml3cyIsInJ0d3MiLCJpdHdzIiwidHJhbnNmb3JtIiwicnR3ZGYiLCJjb3MiLCJQSSIsIml0d2RmIiwic2luIiwicnR3ZGZfIiwiaXR3ZGZfIiwicmUiLCJpZSIsInJvIiwiaW8iLCJyeCIsImd1ZXNzTGVuMTNiIiwib2RkIiwiY29uanVnYXRlIiwibm9ybWFsaXplMTNiIiwid3MiLCJyb3VuZCIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJiaXRzIiwiY2FycnlNYXNrIiwibmV3Q2FycnkiLCJpc2hsbiIsImhpbnQiLCJleHRlbmRlZCIsImgiLCJtYXNrIiwibWFza2VkV29yZHMiLCJpc2hybiIsInNobG4iLCJ1c2hsbiIsInNocm4iLCJ1c2hybiIsImltYXNrbiIsIm1hc2tuIiwiaXN1Ym4iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJzaGlmdCIsIl93b3JkRGl2IiwibW9kZSIsImJoaSIsInFqIiwiZGl2IiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJhY2MiLCJlZ2NkIiwiQSIsIkIiLCJDIiwiRCIsImlzRXZlbiIsInlwIiwieHAiLCJpbSIsImlzT2RkIiwiam0iLCJnY2QiLCJfaW52bXAiLCJ4MSIsIngyIiwiZGVsdGEiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0IiwiZ3RlbiIsImd0ZSIsImx0biIsImx0IiwibHRlbiIsImx0ZSIsImVxbiIsImVxIiwiUmVkIiwidG9SZWQiLCJjdHgiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwic2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInNxcnQiLCJyZWRJbnZtIiwicmVkTmVnIiwicmVkUG93IiwicHJpbWVzIiwiazI1NiIsInAyMjQiLCJwMTkyIiwicDI1NTE5IiwiTVByaW1lIiwidG1wIiwiX3RtcCIsIksyNTYiLCJQMjI0IiwiUDE5MiIsIlAyNTUxOSIsInByaW1lIiwiX3ByaW1lIiwiTW9udCIsImltb2QiLCJyaW52IiwibWludiIsImlyZWR1Y2UiLCJybGVuIiwiaW11bEsiLCJvdXRMZW4iLCJtb2QzIiwib25lIiwibk9uZSIsImxwb3ciLCJ6IiwiaW52Iiwid25kIiwiY3VycmVudCIsImN1cnJlbnRMZW4iLCJtb250IiwidSIsIndpbmRvd19nZXR0ZXJzXzEiLCJsb2MiLCJnZXRXaW5kb3dNZXRhZGF0YU9mQW55IiwibWV0YVRhZ3MiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRhZyIsImF0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGUiLCJhdHRyIiwidGl0bGUiLCJnZXROYW1lIiwiZGVzY3JpcHRpb24iLCJnZXREZXNjcmlwdGlvbiIsIm9yaWdpbiIsImljb25zIiwiYWJzb2x1dGVIcmVmIiwicGF0aG5hbWUiLCJhYnNvbHV0ZVVybCIsImdldEljb25zIiwidHNsaWJfMSIsIlNlbWFwaG9yZV8xIiwiTXV0ZXgiLCJfc2VtYXBob3JlIiwiZGVmYXVsdCIsImFjcXVpcmUiLCJydW5FeGNsdXNpdmUiLCJpc0xvY2tlZCIsInJlbGVhc2UiLCJTZW1hcGhvcmUiLCJfbWF4Q29uY3VycmVuY3kiLCJfdmFsdWUiLCJfdGhpcyIsImxvY2tlZCIsInRpY2tldCIsIl9kaXNwYXRjaCIsIl9jdXJyZW50UmVsZWFzZXIiLCJyZWxlYXNlciIsIm5leHRDb25zdW1lciIsInJlbGVhc2VkIiwiTXV0ZXhfMSIsIndpdGhUaW1lb3V0XzEiLCJ3aXRoVGltZW91dCIsInN5bmMiLCJ0aW1lb3V0RXJyb3IiLCJpc1RpbWVvdXQiLCJmdW5jIiwiX2luaXRpYWxQYXJhbXMyIiwiX2lzT2JqZWN0MiIsImludm9rZUNhbGxiYWNrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zZXRJbW1lZGlhdGUyIiwib2JqIiwiX19lc01vZHVsZSIsInJldGhyb3ciLCJjb2xsIiwibGltaXQiLCJpdGVyYXRlZSIsIl9lYWNoT2ZMaW1pdDIiLCJfd2l0aG91dEluZGV4MiIsIl93cmFwQXN5bmMyIiwiX2lzQXJyYXlMaWtlMiIsImVhY2hPZkFycmF5TGlrZSIsImVhY2hPZkdlbmVyaWMiLCJfYnJlYWtMb29wMiIsIl9kb0xpbWl0MiIsIl9ub29wMiIsIl9vbmNlMiIsIl9vbmx5T25jZTIiLCJjb21wbGV0ZWQiLCJpdGVyYXRvckNhbGxiYWNrIiwiSW5maW5pdHkiLCJfZWFjaE9mTGltaXQzIiwiX2VhY2hMaW1pdDIiLCJmbiIsIml0ZXJhYmxlIiwiX2VhY2hPZjIiLCJuZXh0RWxlbSIsIl9pdGVyYXRvcjIiLCJydW5uaW5nIiwibG9vcGluZyIsIml0ZXJhdGVlQ2FsbGJhY2siLCJyZXBsZW5pc2giLCJlbGVtIiwiaXRlcmF0b3JTeW1ib2wiLCJfc2xpY2UyIiwiY3JlYXRlQXJyYXlJdGVyYXRvciIsIl9nZXRJdGVyYXRvcjIiLCJpdGVtIiwiY3JlYXRlRVMyMDE1SXRlcmF0b3IiLCJva2V5cyIsIl9rZXlzMiIsImNyZWF0ZU9iamVjdEl0ZXJhdG9yIiwiZWFjaGZuIiwicmVzdWx0cyIsImNvdW50ZXIiLCJfaXRlcmF0ZWUiLCJjYWxsRm4iLCJ0YXNrcyIsInRhc2siLCJoYXNOZXh0VGljayIsImhhc1NldEltbWVkaWF0ZSIsImZhbGxiYWNrIiwid3JhcCIsInNldEltbWVkaWF0ZSIsIm5leHRUaWNrIiwiZGVmZXIiLCJfZGVmZXIiLCJhcnJheUxpa2UiLCJuZXdMZW4iLCJuZXdBcnIiLCJpZHgiLCJpc0FzeW5jIiwiX2FzeW5jaWZ5MiIsInN1cHBvcnRzU3ltYm9sIiwidG9TdHJpbmdUYWciLCJhc3luY0ZuIiwiX2RvUGFyYWxsZWwyIiwiX21hcDIiLCJfcGFyYWxsZWwyIiwiX2lzQXJyYXkyIiwidGFza0luZGV4IiwibmV4dFRhc2siLCJkZXNlbGVjdEN1cnJlbnQiLCJjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nIiwiZGVidWciLCJyZXNlbGVjdFByZXZpb3VzIiwic2VsZWN0aW9uIiwibWFyayIsImNyZWF0ZVJhbmdlIiwiZ2V0U2VsZWN0aW9uIiwidGV4dENvbnRlbnQiLCJhbGwiLCJwb3NpdGlvbiIsInRvcCIsImNsaXAiLCJ3aGl0ZVNwYWNlIiwid2Via2l0VXNlclNlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJtc1VzZXJTZWxlY3QiLCJ1c2VyU2VsZWN0Iiwic3RvcFByb3BhZ2F0aW9uIiwiZm9ybWF0IiwicHJldmVudERlZmF1bHQiLCJjbGlwYm9hcmREYXRhIiwid2FybiIsImNsZWFyRGF0YSIsInNldERhdGEiLCJvbkNvcHkiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJhZGRSYW5nZSIsImV4ZWNDb21tYW5kIiwiY29weUtleSIsInByb21wdCIsInJlbW92ZVJhbmdlIiwicmVtb3ZlQWxsUmFuZ2VzIiwic2luZ2xlTWF0Y2hlciIsIlJlZ0V4cCIsIm11bHRpTWF0Y2hlciIsImRlY29kZUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwiZGVjb2RlIiwidG9rZW5zIiwiZW5jb2RlZFVSSSIsInJlcGxhY2VNYXAiLCJlbnRyaWVzIiwiY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50IiwiZGlqa3N0cmEiLCJzaW5nbGVfc291cmNlX3Nob3J0ZXN0X3BhdGhzIiwiZ3JhcGgiLCJkIiwicHJlZGVjZXNzb3JzIiwiY29zdHMiLCJQcmlvcml0eVF1ZXVlIiwibWFrZSIsImNsb3Nlc3QiLCJjb3N0X29mX3NfdG9fdSIsImFkamFjZW50X25vZGVzIiwiY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2UiLCJjb3N0X29mX3NfdG9fdiIsImVtcHR5IiwiY29zdCIsImV4dHJhY3Rfc2hvcnRlc3RfcGF0aF9mcm9tX3ByZWRlY2Vzc29yX2xpc3QiLCJub2RlcyIsInJldmVyc2UiLCJmaW5kX3BhdGgiLCJUIiwicXVldWUiLCJzb3J0ZXIiLCJkZWZhdWx0X3NvcnRlciIsInNvcnQiLCJTYWZlRXZlbnRFbWl0dGVyIiwiY2FsY3VsYXRlU3VtIiwiYWNjdW11bGF0b3IiLCJjdXJyZW50VmFsdWUiLCJibG9ja1RyYWNrZXJFdmVudHMiLCJoZXhUb0ludCIsImhleEludCIsIk51bWJlciIsIl9ibG9ja1Jlc2V0RHVyYXRpb24iLCJibG9ja1Jlc2V0RHVyYXRpb24iLCJfYmxvY2tSZXNldFRpbWVvdXQiLCJfY3VycmVudEJsb2NrIiwiX2lzUnVubmluZyIsIl9vbk5ld0xpc3RlbmVyIiwiYmluZCIsIl9vblJlbW92ZUxpc3RlbmVyIiwiX3Jlc2V0Q3VycmVudEJsb2NrIiwiX3NldHVwSW50ZXJuYWxFdmVudHMiLCJpc1J1bm5pbmciLCJnZXRDdXJyZW50QmxvY2siLCJvbmNlIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZXZlbnROYW1lIiwiX3N0YXJ0IiwiX2VuZCIsInJlbW92ZUxpc3RlbmVyIiwiaGFuZGxlciIsIl9tYXliZVN0YXJ0IiwiX2dldEJsb2NrVHJhY2tlckV2ZW50Q291bnQiLCJfbWF5YmVFbmQiLCJfY2FuY2VsQmxvY2tSZXNldFRpbWVvdXQiLCJfc2V0dXBCbG9ja1Jlc2V0VGltZW91dCIsImxpc3RlbmVyQ291bnQiLCJfbmV3UG90ZW50aWFsTGF0ZXN0IiwibmV3QmxvY2siLCJjdXJyZW50QmxvY2siLCJfc2V0Q3VycmVudEJsb2NrIiwib2xkQmxvY2siLCJ1bnJlZiIsInBpZnkiLCJCYXNlQmxvY2tUcmFja2VyIiwiZHVyYXRpb24iLCJ0aW1vdXRSZWYiLCJwcm92aWRlciIsInJldHJ5VGltZW91dCIsImtlZXBFdmVudExvb3BBY3RpdmUiLCJzZXRTa2lwQ2FjaGVGbGFnIiwiX3Byb3ZpZGVyIiwiX3BvbGxpbmdJbnRlcnZhbCIsIl9yZXRyeVRpbWVvdXQiLCJfa2VlcEV2ZW50TG9vcEFjdGl2ZSIsIl9zZXRTa2lwQ2FjaGVGbGFnIiwiX3VwZGF0ZUxhdGVzdEJsb2NrIiwiZ2V0TGF0ZXN0QmxvY2siLCJfcGVyZm9ybVN5bmMiLCJuZXdFcnIiLCJzdGFjayIsImVtaXRFcnIiLCJsYXRlc3RCbG9jayIsIl9mZXRjaExhdGVzdEJsb2NrIiwicmVxIiwic2tpcENhY2hlIiwiQmFzZUZpbHRlciIsImFsbFJlc3VsdHMiLCJhZGRSZXN1bHRzIiwibmV3UmVzdWx0cyIsImFkZEluaXRpYWxSZXN1bHRzIiwiZ2V0QWxsUmVzdWx0cyIsInVwZGF0ZXMiLCJnZXRDaGFuZ2VzQW5kQ2xlYXIiLCJnZXRCbG9ja3NGb3JSYW5nZSIsImluY3JlbWVudEhleEludCIsInRvQmxvY2siLCJmcm9tQmxvY2siLCJibG9ja0hhc2hlcyIsImJsb2NrIiwiaGV4U3RyaW5nIiwiaW50VG9IZXgiLCJpbnQiLCJmcm9tQmxvY2tOdW1iZXIiLCJ0b0Jsb2NrTnVtYmVyIiwibWlzc2luZ0Jsb2NrTnVtYmVycyIsImJsb2NrTnVtIiwicXVlcnkiLCJzb3J0QmxvY2tSZWZzIiwicmVmcyIsInJlZkEiLCJyZWZCIiwidW5zYWZlUmFuZG9tTmliYmxlIiwibWluQmxvY2tSZWYiLCJtYXhCbG9ja1JlZiIsInNvcnRlZFJlZnMiLCJiblRvSGV4IiwiYm4iLCJibG9ja1JlZklzTnVtYmVyIiwiYmxvY2tSZWYiLCJ1bnNhZmVSYW5kb21CeXRlcyIsImJ5dGVDb3VudCIsImNyZWF0ZUFzeW5jTWlkZGxld2FyZSIsImNyZWF0ZUpzb25ScGNNaWRkbGV3YXJlIiwiTG9nRmlsdGVyIiwiQmxvY2tGaWx0ZXIiLCJUeEZpbHRlciIsInRvRmlsdGVyQ3JlYXRpb25NaWRkbGV3YXJlIiwiY3JlYXRlRmlsdGVyRm4iLCJ0b0FzeW5jUnBjTWlkZGxld2FyZSIsIm9ialZhbHVlcyIsImJsb2NrVHJhY2tlciIsImZpbHRlckluZGV4IiwiZmlsdGVycyIsIm11dGV4Iiwid2FpdEZvckZyZWUiLCJtaWRkbGV3YXJlIiwibXV0ZXhNaWRkbGV3YXJlV3JhcHBlciIsImV0aF9uZXdGaWx0ZXIiLCJuZXdMb2dGaWx0ZXIiLCJldGhfbmV3QmxvY2tGaWx0ZXIiLCJuZXdCbG9ja0ZpbHRlciIsImV0aF9uZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXIiLCJuZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXIiLCJldGhfdW5pbnN0YWxsRmlsdGVyIiwidW5pbnN0YWxsRmlsdGVySGFuZGxlciIsImV0aF9nZXRGaWx0ZXJDaGFuZ2VzIiwiZ2V0RmlsdGVyQ2hhbmdlcyIsImV0aF9nZXRGaWx0ZXJMb2dzIiwiZ2V0RmlsdGVyTG9ncyIsImZpbHRlclVwZGF0ZXIiLCJyZWxlYXNlTG9jayIsInVwZGF0ZSIsInVuaW5zdGFsbEZpbHRlciIsImRlc3Ryb3kiLCJwcmV2RmlsdGVyQ291bnQiLCJ1cGRhdGVCbG9ja1RyYWNrZXJTdWJzIiwibmV3RmlsdGVyQ291bnQiLCJ1bmluc3RhbGxBbGxGaWx0ZXJzIiwiaW5zdGFsbEZpbHRlciIsImZpbHRlckluZGV4SGV4IiwiaWRIZXgiLCJFdGhRdWVyeSIsIkJhc2VGaWx0ZXJXaXRoSGlzdG9yeSIsImV0aFF1ZXJ5IiwidG9waWNzIiwibmV3TG9ncyIsIl9mZXRjaExvZ3MiLCJtYXRjaGluZ0xvZ3MiLCJtYXRjaExvZyIsImdldExvZ3MiLCJibG9ja051bWJlciIsIm5vcm1hbGl6ZWRMb2dBZGRyZXNzIiwiZXZlcnkiLCJ0b3BpY1BhdHRlcm4iLCJsb2dUb3BpYyIsInN1YnRvcGljc1RvTWF0Y2giLCJ0b3BpY0RvZXNNYXRjaCIsInByb2Nlc3NGbiIsInByb3h5IiwidW53cmFwcGVkIiwiYXJndW1lbnRzXyIsInByb21pc2VNb2R1bGUiLCJtdWx0aUFyZ3MiLCJlcnJvckZpcnN0IiwiUmVmbGVjdCIsImZpbHRlckNhY2hlIiwiV2Vha01hcCIsImV4Y2x1ZGUiLCJvYmplY3RUeXBlIiwiY2FjaGUiLCJQcm94eSIsImNhY2hlZCIsInBpZmllZCIsImV4Y2x1ZGVNYWluIiwic2V0IiwicHJvcGVydHkiLCJwYXR0ZXJuIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndyaXRhYmxlT3JDb25maWd1cmFibGVPd24iLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNob3VsZEZpbHRlciIsImluY2x1ZGUiLCJzb21lIiwiRnVuY3Rpb24iLCJjcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUiLCJjcmVhdGVGaWx0ZXJNaWRkbGV3YXJlIiwibm9ybWFsaXplQmxvY2siLCJwYXJlbnRIYXNoIiwic2hhM1VuY2xlcyIsIm1pbmVyIiwic3RhdGVSb290IiwidHJhbnNhY3Rpb25zUm9vdCIsInJlY2VpcHRzUm9vdCIsImxvZ3NCbG9vbSIsImRpZmZpY3VsdHkiLCJnYXNVc2VkIiwibWl4SGFzaCIsInRpbWVzdGFtcCIsImV4dHJhRGF0YSIsImZpbHRlck1hbmFnZXIiLCJpc0Rlc3Ryb3llZCIsImV0aF9zdWJzY3JpYmUiLCJzdWJzY3JpcHRpb25UeXBlIiwic3ViSWQiLCJjcmVhdGVTdWJOZXdIZWFkcyIsImZpbHRlclBhcmFtcyIsImNyZWF0ZVN1YkZyb21GaWx0ZXIiLCJfZW1pdFN1YnNjcmlwdGlvblJlc3VsdCIsImV0aF91bnN1YnNjcmliZSIsInN1YnNjcmlwdGlvbiIsImZpbHRlcklkSGV4IiwiYmxvY2tzIiwiYmxvY2tUeEhhc2hlcyIsInRyYW5zYWN0aW9ucyIsImNhY2hlVXRpbHMiLCJlbXB0eVZhbHVlcyIsImJsb2NrQ2FjaGUiLCJCbG9ja0NhY2hlU3RyYXRlZ3kiLCJzdHJhdGVnaWVzIiwicGVybWEiLCJmb3JrIiwiY2FjaGVUeXBlRm9yUGF5bG9hZCIsInN0cmF0ZWd5IiwiY2FuQ2FjaGVSZXF1ZXN0IiwiYmxvY2tUYWciLCJibG9ja1RhZ0ZvclBheWxvYWQiLCJyZXF1ZXN0ZWRCbG9ja051bWJlciIsImxhdGVzdEJsb2NrTnVtYmVyIiwiY2xlYXJCZWZvcmUiLCJjYWNoZVJlc3VsdCIsImdldEJsb2NrQ2FjaGVGb3JQYXlsb2FkIiwiYmxvY2tOdW1iZXJIZXgiLCJuZXdDYWNoZSIsImNhY2hlSWRlbnRpZmllckZvclBheWxvYWQiLCJjYW5DYWNoZVJlc3VsdCIsImNhbkNhY2hlIiwiYmxvY2tIYXNoIiwib2xkQmxvY2tIZXgiLCJvbGRCbG9ja051bWJlciIsInBhcmFtc1dpdGhvdXRCbG9ja1RhZyIsImJsb2NrVGFnUGFyYW1JbmRleCIsInNraXBCbG9ja1JlZiIsInNpbXBsZVBhcmFtcyIsImFzeW5jTWlkZGxld2FyZSIsInJlc29sdmVOZXh0UHJvbWlzZSIsIm5leHRQcm9taXNlIiwicmV0dXJuSGFuZGxlckNhbGxiYWNrIiwibmV4dFdhc0NhbGxlZCIsImhhbmRsZXJzIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZG9tSWQiLCJjdXJyZW50UHJvdmlkZXIiLCJnZW5lcmF0ZUZuRm9yIiwibWV0aG9kTmFtZSIsImdlbmVyYXRlRm5XaXRoRGVmYXVsdEJsb2NrRm9yIiwiYXJnQ291bnQiLCJnZXRCYWxhbmNlIiwiZ2V0Q29kZSIsImdldFRyYW5zYWN0aW9uQ291bnQiLCJnZXRTdG9yYWdlQXQiLCJwcm90b2NvbFZlcnNpb24iLCJzeW5jaW5nIiwiY29pbmJhc2UiLCJtaW5pbmciLCJoYXNocmF0ZSIsImdldEJsb2NrVHJhbnNhY3Rpb25Db3VudEJ5SGFzaCIsImdldEJsb2NrVHJhbnNhY3Rpb25Db3VudEJ5TnVtYmVyIiwiZ2V0VW5jbGVDb3VudEJ5QmxvY2tIYXNoIiwiZ2V0VW5jbGVDb3VudEJ5QmxvY2tOdW1iZXIiLCJzZW5kUmF3VHJhbnNhY3Rpb24iLCJlc3RpbWF0ZUdhcyIsImdldEJsb2NrQnlIYXNoIiwiZ2V0QmxvY2tCeU51bWJlciIsImdldFRyYW5zYWN0aW9uQnlIYXNoIiwiZ2V0VHJhbnNhY3Rpb25CeUJsb2NrSGFzaEFuZEluZGV4IiwiZ2V0VHJhbnNhY3Rpb25CeUJsb2NrTnVtYmVyQW5kSW5kZXgiLCJnZXRUcmFuc2FjdGlvblJlY2VpcHQiLCJnZXRVbmNsZUJ5QmxvY2tIYXNoQW5kSW5kZXgiLCJnZXRVbmNsZUJ5QmxvY2tOdW1iZXJBbmRJbmRleCIsImdldENvbXBpbGVycyIsImNvbXBpbGVMTEwiLCJjb21waWxlU29saWRpdHkiLCJjb21waWxlU2VycGVudCIsIm5ld0ZpbHRlciIsImdldFdvcmsiLCJzdWJtaXRXb3JrIiwic3VibWl0SGFzaHJhdGUiLCJjcmVhdGVQYXlsb2FkIiwiZXRoVXRpbCIsImV0aEFiaSIsInR5cGVkU2lnbmF0dXJlSGFzaCIsInR5cGVkRGF0YSIsInR5cGVzIiwic2NoZW1hIiwic29saWRpdHlTSEEzIiwicmVjb3ZlclB1YmxpY0tleSIsInNpZyIsInNpZ1BhcmFtcyIsImZyb21ScGNTaWciLCJlY3JlY292ZXIiLCJnZXRQdWJsaWNLZXlGb3IiLCJoYXNoUGVyc29uYWxNZXNzYWdlIiwicGFkV2l0aFplcm9lcyIsIm15U3RyaW5nIiwiY29uY2F0U2lnIiwiclNpZyIsImZyb21TaWduZWQiLCJzU2lnIiwidlNpZyIsImJ1ZmZlclRvSW50IiwiclN0ciIsInRvVW5zaWduZWQiLCJzU3RyIiwidlN0ciIsInN0cmlwSGV4UHJlZml4Iiwibm9ybWFsaXplIiwicGVyc29uYWxTaWduIiwicHJpdmF0ZUtleSIsIm1zZ0hhc2giLCJlY3NpZ24iLCJyZWNvdmVyUGVyc29uYWxTaWduYXR1cmUiLCJwdWJsaWNLZXkiLCJzZW5kZXIiLCJwdWJsaWNUb0FkZHJlc3MiLCJleHRyYWN0UHVibGljS2V5IiwiaGFzaEJ1ZmZlciIsInJlY292ZXJUeXBlZFNpZ25hdHVyZSIsInBhcnNlSGV4NEJpdHMiLCJzdHJpbmciLCJwYXJzZUhleEJ5dGUiLCJsb3dlckJvdW5kIiwiX3N0cmlwIiwiX3R5cGVvZiIsIl9yZXF1aXJlIiwia2VjY2FrMjI0Iiwia2VjY2FrMzg0Iiwia2VjY2FrMjU2Iiwia2VjY2FrNTEyIiwic2VjcDI1NmsxIiwicmxwIiwiY3JlYXRlSGFzaCIsIk1BWF9JTlRFR0VSIiwiVFdPX1BPVzI1NiIsIktFQ0NBSzI1Nl9OVUxMX1MiLCJTSEEzX05VTExfUyIsIktFQ0NBSzI1Nl9OVUxMIiwiU0hBM19OVUxMIiwiS0VDQ0FLMjU2X1JMUF9BUlJBWV9TIiwiU0hBM19STFBfQVJSQVlfUyIsIktFQ0NBSzI1Nl9STFBfQVJSQVkiLCJTSEEzX1JMUF9BUlJBWSIsIktFQ0NBSzI1Nl9STFBfUyIsIlNIQTNfUkxQX1MiLCJLRUNDQUsyNTZfUkxQIiwiU0hBM19STFAiLCJhbGxvY1Vuc2FmZSIsInplcm9BZGRyZXNzIiwic2V0TGVuZ3RoTGVmdCIsInNldExlbmd0aCIsInNldExlbmd0aFJpZ2h0IiwidW5wYWQiLCJzdHJpcFplcm9zIiwiZmlyc3QiLCJpc0J1ZmZlciIsInBhZFRvRXZlbiIsImludFRvQnVmZmVyIiwia2VjY2FrIiwic2hhMyIsInNoYTI1NiIsImRpZ2VzdCIsInJpcGVtZDE2MCIsInBhZGRlZCIsInJscGhhc2giLCJlbmNvZGUiLCJpc1ZhbGlkUHJpdmF0ZSIsInByaXZhdGVLZXlWZXJpZnkiLCJpc1ZhbGlkUHVibGljIiwic2FuaXRpemUiLCJwdWJsaWNLZXlWZXJpZnkiLCJwdWJUb0FkZHJlc3MiLCJwdWJLZXkiLCJwdWJsaWNLZXlDb252ZXJ0IiwicHJpdmF0ZVRvUHVibGljIiwicHVibGljS2V5Q3JlYXRlIiwiaW1wb3J0UHVibGljIiwicmVjb3ZlcnkiLCJwcmVmaXgiLCJzZW5kZXJQdWJLZXkiLCJ0b1JwY1NpZyIsInByaXZhdGVUb0FkZHJlc3MiLCJpc1plcm9BZGRyZXNzIiwiaXNWYWxpZENoZWNrc3VtQWRkcmVzcyIsImdlbmVyYXRlQWRkcmVzcyIsImlzUHJlY29tcGlsZWQiLCJpc0hleFByZWZpeGVkIiwiaXNWYWxpZFNpZ25hdHVyZSIsImhvbWVzdGVhZCIsIlNFQ1AyNTZLMV9OX0RJVl8yIiwiU0VDUDI1NksxX04iLCJiYVRvSlNPTiIsImJhIiwiZGVmaW5lUHJvcGVydGllcyIsImZpZWxkcyIsIl9maWVsZHMiLCJmaWVsZCIsInNlcmlhbGl6ZSIsImdldHRlciIsInNldHRlciIsImFsbG93WmVybyIsImFsbG93TGVzcyIsImFsaWFzIiwic2VjcDI1NmsxdjMiLCJkZXIiLCJwcml2YXRlS2V5RXhwb3J0IiwiY29tcHJlc3NlZCIsIlJhbmdlRXJyb3IiLCJwcml2YXRlS2V5SW1wb3J0IiwicHJpdmF0ZUtleU5lZ2F0ZSIsInByaXZhdGVLZXlNb2RJbnZlcnNlIiwicHJpdmF0ZUtleVR3ZWFrQWRkIiwidHdlYWsiLCJwcml2YXRlS2V5VHdlYWtNdWwiLCJwdWJsaWNLZXlUd2Vha0FkZCIsInB1YmxpY0tleVR3ZWFrTXVsIiwicHVibGljS2V5Q29tYmluZSIsInB1YmxpY0tleXMiLCJzaWduYXR1cmVOb3JtYWxpemUiLCJzaWduYXR1cmVFeHBvcnQiLCJzaWduYXR1cmVJbXBvcnQiLCJzaWduYXR1cmVJbXBvcnRMYXgiLCJzaWdPYmoiLCJzaWduT3B0aW9ucyIsIm5vbmNlZm4iLCJhbGdvIiwiYXR0ZW1wdCIsImJ1ZmZlckFsZ28iLCJidWZmZXJEYXRhIiwiZWNkc2FTaWduIiwicmVjaWQiLCJ2ZXJpZnkiLCJlY2RzYVZlcmlmeSIsImVjZHNhUmVjb3ZlciIsImVjZGgiLCJlY2RoVW5zYWZlIiwiRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQiLCJFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEIiwibGVuYiIsImFsbG9jIiwibGVuYnl0ZSIsInJpbmRleCIsInNsZW4iLCJzaW5kZXgiLCJydmFsdWUiLCJzdmFsdWUiLCJlYyIsIkVDIiwiZWNwYXJhbXMiLCJjdXJ2ZSIsInBvaW50IiwidG9QdWJsaWNLZXkiLCJnZXRYIiwiZ2V0WSIsImtleUZyb21QdWJsaWMiLCJzY2FsYXIiLCJzaGFyZWQiLCJwdWIiLCJ1dGlscyIsIkFCSSIsImVsZW1lbnRhcnlOYW1lIiwicGFyc2VUeXBlTiIsInBhcnNlVHlwZU54TSIsInBhcnNlVHlwZUFycmF5IiwicGFyc2VOdW1iZXIiLCJwYXJzZVNpZ25hdHVyZSIsInJldGFyZ3MiLCJlbmNvZGVTaW5nbGUiLCJsYXN0SW5kZXhPZiIsInVuc2hpZnQiLCJkZWNvZGVTaW5nbGUiLCJwYXJzZWRUeXBlIiwib2Zmc2V0IiwicGFyc2VUeXBlIiwicmF3VHlwZSIsImRlY29kZWQiLCJzdWJBcnJheSIsIm1lbW9yeVVzYWdlIiwiaXNEeW5hbWljIiwiaXNOdW1lcmljIiwiZXZlbnRJRCIsIm1ldGhvZElEIiwicmF3RW5jb2RlIiwiaGVhZExlbmd0aCIsImN1ciIsInJhd0RlY29kZSIsInBhcnNlZCIsInNpbXBsZUVuY29kZSIsInNpbXBsZURlY29kZSIsInNvbGlkaXR5SGV4VmFsdWUiLCJiaXRzaXplIiwic3ViVHlwZSIsImFycmF5U2l6ZSIsImFycmF5VmFsdWVzIiwiYnl0ZXNpemUiLCJzb2xpZGl0eVBhY2siLCJzb2xpZGl0eVNIQTI1NiIsInNvbGlkaXR5UklQRU1EMTYwIiwiZnJvbVNlcnBlbnQiLCJ0b1NlcnBlbnQiLCJnZW5lcmF0ZUFkZHJlc3MyIiwiZXRoanNVdGlsIiwiYnl0ZXNfMSIsImhhc2hfMSIsImFkZHIiLCJlaXAxMTkxQ2hhaW5JZCIsIm5vbmNlQk4iLCJzYWx0IiwiaW5pdENvZGUiLCJmcm9tQnVmIiwic2FsdEJ1ZiIsImluaXRDb2RlQnVmIiwib2JqXzEiLCJrZXlzXzEiLCJjYWxjdWxhdGVTaWdSZWNvdmVyeSIsImlzVmFsaWRTaWdSZWNvdmVyeSIsImhvbWVzdGVhZE9yTGF0ZXIiLCJyQk4iLCJzQk4iLCJmZWVzIiwiTl9ESVZfMiIsIlRyYW5zYWN0aW9uIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsImdldFNlbmRlckFkZHJlc3MiLCJzaWdWIiwiX2hvbWVzdGVhZCIsInRvQ3JlYXRpb25BZGRyZXNzIiwiaW5jbHVkZVNpZ25hdHVyZSIsIml0ZW1zIiwiZ2V0Q2hhaW5JZCIsIl9mcm9tIiwicHVia2V5IiwiZ2V0U2VuZGVyUHVibGljS2V5IiwiX3NlbmRlclB1YktleSIsInZlcmlmeVNpZ25hdHVyZSIsImdldERhdGFGZWUiLCJ0eERhdGFaZXJvR2FzIiwidHhEYXRhTm9uWmVyb0dhcyIsImdldEJhc2VGZWUiLCJmZWUiLCJ0eEdhcyIsInR4Q3JlYXRpb24iLCJnZXRVcGZyb250Q29zdCIsInZhbGlkYXRlIiwic3RyaW5nRXJyb3IiLCJlcnJvcnMiLCJhcnJheUNvbnRhaW5zQXJyYXkiLCJzdXBlcnNldCIsInN1YnNldCIsImdldEJpbmFyeVNpemUiLCJmcm9tQXNjaWkiLCJzdHJpbmdWYWx1ZSIsImZyb21VdGY4IiwidG9Bc2NpaSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInRvVXRmOCIsImdldEtleXMiLCJhbGxvd0VtcHR5IiwiaGFzIiwiRXZlbnRzIiwiRUUiLCJjb250ZXh0IiwiYWRkTGlzdGVuZXIiLCJlbWl0dGVyIiwibGlzdGVuZXIiLCJldnQiLCJfZXZlbnRzQ291bnQiLCJjbGVhckV2ZW50IiwiRXZlbnRFbWl0dGVyIiwiX19wcm90b19fIiwiZXZlbnROYW1lcyIsIm5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibGlzdGVuZXJzIiwiZWUiLCJpc1R5cGVkQXJyYXkiLCJzdHJpY3QiLCJpc1N0cmljdFR5cGVkQXJyYXkiLCJsb29zZSIsImlzTG9vc2VUeXBlZEFycmF5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJfX2ltcG9ydERlZmF1bHQiLCJKc29uUnBjRW5naW5lIiwic2FmZV9ldmVudF9lbWl0dGVyXzEiLCJldGhfcnBjX2Vycm9yc18xIiwiX21pZGRsZXdhcmUiLCJoYW5kbGUiLCJfaGFuZGxlQmF0Y2giLCJfaGFuZGxlIiwiX3Byb21pc2VIYW5kbGUiLCJhc01pZGRsZXdhcmUiLCJtaWRkbGV3YXJlRXJyb3IiLCJpc0NvbXBsZXRlIiwicmV0dXJuSGFuZGxlcnMiLCJfcnVuQWxsTWlkZGxld2FyZSIsIl9ydW5SZXR1cm5IYW5kbGVycyIsImhhbmRsZXJDYWxsYmFjayIsInJlcXMiLCJyZXNwb25zZXMiLCJfZXJyIiwiY2FsbGVyUmVxIiwiRXRoZXJldW1ScGNFcnJvciIsImVycm9yQ29kZXMiLCJpbnZhbGlkUmVxdWVzdCIsIl9wcm9jZXNzUmVxdWVzdCIsIl9lcnJvciIsInNlcmlhbGl6ZUVycm9yIiwiX2NoZWNrRm9yQ29tcGxldGlvbiIsInN0YXRpYyIsIm1pZGRsZXdhcmVTdGFjayIsIl9ydW5NaWRkbGV3YXJlIiwicmV0dXJuSGFuZGxlciIsImpzb25pZnkiLCJhc3luY05leHQiLCJydW5SZXR1cm5IYW5kbGVyc0NhbGxiYWNrIiwiZ2V0VW5pcXVlSWQiLCJNQVgiLCJpZENvdW50ZXIiLCJjcmVhdGVJZFJlbWFwTWlkZGxld2FyZSIsImdldFVuaXF1ZUlkXzEiLCJvcmlnaW5hbElkIiwibmV3SWQiLCJtZXJnZU1pZGRsZXdhcmUiLCJKc29uUnBjRW5naW5lXzEiLCJlbmdpbmUiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYmFzZVRpbWVzIiwiaXNBcmd1bWVudHMiLCJpc0luZGV4IiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsImJhc2VHZXRUYWciLCJpc09iamVjdExpa2UiLCJpc0xlbmd0aCIsInR5cGVkQXJyYXlUYWdzIiwiaXNQcm90b3R5cGUiLCJuYXRpdmVLZXlzIiwiZnJlZUdsb2JhbCIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwicmVJc1VpbnQiLCJDdG9yIiwib3ZlckFyZyIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiZnJlZVByb2Nlc3MiLCJub2RlVXRpbCIsInJlcXVpcmUiLCJiaW5kaW5nIiwiZnJlZVNlbGYiLCJyb290IiwiYmFzZUlzQXJndW1lbnRzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpc0Z1bmN0aW9uIiwic3R1YkZhbHNlIiwiaXNPYmplY3QiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZUlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImlzQXJyYXlMaWtlIiwiZ2V0UHJvdG90eXBlT2YiLCJwYXJlbnROb2RlIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJfX2siLCJfXyIsIl9fYiIsIl9fZSIsIl9fZCIsIl9fYyIsIl9fdiIsInZub2RlIiwiZGVib3VuY2VSZW5kZXJpbmciLCJfX1AiLCJfX24iLCJvd25lclNWR0VsZW1lbnQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInNldFByb3BlcnR5IiwiY3NzVGV4dCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwiY29udGV4dFR5cGUiLCJfX0UiLCJFIiwic3RhdGUiLCJfX2giLCJfX3MiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiX19yIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCIkIiwiZGlmZmVkIiwibG9jYWxOYW1lIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVFbGVtZW50TlMiLCJpcyIsImNoaWxkTm9kZXMiLCJpbm5lckhUTUwiLCJjaGVja2VkIiwidW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiSCIsIkkiLCJMIiwiTSIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJzcGxpY2UiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwiZm9yY2VVcGRhdGUiLCJfX0giLCJ1c2VEZWJ1Z1ZhbHVlIiwiRiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJpc1JlYWN0Q29tcG9uZW50IiwiZGlzcGxheU5hbWUiLCJTIiwiUiIsIm9ubHkiLCJVIiwiX191IiwiTyIsImRlbGV0ZSIsInJldmVhbE9yZGVyIiwiTWFwIiwiVyIsImNvbnRhaW5lciIsImZvciIsImZpcnN0Q2hpbGQiLCJWIiwiWiIsInBlcnNpc3QiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIm5hdGl2ZUV2ZW50IiwiY2xhc3MiLCIkJHR5cGVvZiIsImRlZmF1bHRWYWx1ZSIsIm11bHRpcGxlIiwib25kb3VibGVjbGljayIsIm9uZGJsY2xpY2siLCJvbmJlZm9yZWlucHV0Iiwib25jaGFuZ2UiLCJvbmlucHV0IiwiRyIsIkoiLCJLIiwiUSIsIlgiLCJZIiwidXNlUmVkdWNlciIsInVzZUxheW91dEVmZmVjdCIsInVzZVJlZiIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VNZW1vIiwidXNlQ29udGV4dCIsIkNoaWxkcmVuIiwiaHlkcmF0ZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVDb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNsb25lRWxlbWVudCIsImNyZWF0ZVJlZiIsImlzVmFsaWRFbGVtZW50IiwiZmluZERPTU5vZGUiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwibWVtbyIsImZvcndhcmRSZWYiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsIlN1c3BlbnNlIiwiU3VzcGVuc2VMaXN0IiwibGF6eSIsImNhblByb21pc2UiLCJDYW52YXNSZW5kZXJlciIsIlN2Z1JlbmRlcmVyIiwicmVuZGVyQ2FudmFzIiwicmVuZGVyRnVuYyIsImNhbnZhcyIsImFyZ3NOdW0iLCJpc0xhc3RBcmdDYiIsImdldENvbnRleHQiLCJ0b0NhbnZhcyIsInRvRGF0YVVSTCIsInJlbmRlclRvRGF0YVVSTCIsImdldFN5bWJvbFNpemUiLCJnZXRSb3dDb2xDb29yZHMiLCJwb3NDb3VudCIsImludGVydmFscyIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9ucyIsImNvb3JkcyIsInBvcyIsInBvc0xlbmd0aCIsIk1vZGUiLCJBTFBIQV9OVU1fQ0hBUlMiLCJBbHBoYW51bWVyaWNEYXRhIiwiQUxQSEFOVU1FUklDIiwiZ2V0Qml0c0xlbmd0aCIsImdldExlbmd0aCIsIndyaXRlIiwiYml0QnVmZmVyIiwicHV0IiwiQml0QnVmZmVyIiwiYnVmSW5kZXgiLCJwdXRCaXQiLCJnZXRMZW5ndGhJbkJpdHMiLCJCdWZmZXJVdGlsIiwiQml0TWF0cml4IiwicmVzZXJ2ZWRCaXQiLCJyb3ciLCJjb2wiLCJyZXNlcnZlZCIsImlzUmVzZXJ2ZWQiLCJCeXRlRGF0YSIsIkJZVEUiLCJFQ0xldmVsIiwiRUNfQkxPQ0tTX1RBQkxFIiwiRUNfQ09ERVdPUkRTX1RBQkxFIiwiZ2V0QmxvY2tzQ291bnQiLCJlcnJvckNvcnJlY3Rpb25MZXZlbCIsImdldFRvdGFsQ29kZXdvcmRzQ291bnQiLCJpc1ZhbGlkIiwibGV2ZWwiLCJmcm9tU3RyaW5nIiwiVXRpbHMiLCJHMTVfQkNIIiwiZ2V0QkNIRGlnaXQiLCJnZXRFbmNvZGVkQml0cyIsIkVYUF9UQUJMRSIsIkxPR19UQUJMRSIsImV4cCIsIkthbmppRGF0YSIsIktBTkpJIiwidG9TSklTIiwiUGF0dGVybnMiLCJQQVRURVJOMDAwIiwiUEFUVEVSTjAwMSIsIlBBVFRFUk4wMTAiLCJQQVRURVJOMDExIiwiUEFUVEVSTjEwMCIsIlBBVFRFUk4xMDEiLCJQQVRURVJOMTEwIiwiUEFUVEVSTjExMSIsIlBlbmFsdHlTY29yZXMiLCJnZXRNYXNrQXQiLCJtYXNrUGF0dGVybiIsImlzTmFOIiwiZ2V0UGVuYWx0eU4xIiwicG9pbnRzIiwic2FtZUNvdW50Q29sIiwic2FtZUNvdW50Um93IiwibGFzdENvbCIsImxhc3RSb3ciLCJnZXRQZW5hbHR5TjIiLCJsYXN0IiwiZ2V0UGVuYWx0eU4zIiwiYml0c0NvbCIsImJpdHNSb3ciLCJnZXRQZW5hbHR5TjQiLCJkYXJrQ291bnQiLCJtb2R1bGVzQ291bnQiLCJhcHBseU1hc2siLCJnZXRCZXN0TWFzayIsInNldHVwRm9ybWF0RnVuYyIsIm51bVBhdHRlcm5zIiwiYmVzdFBhdHRlcm4iLCJsb3dlclBlbmFsdHkiLCJwZW5hbHR5IiwiVmVyc2lvbkNoZWNrIiwiUmVnZXgiLCJOVU1FUklDIiwiY2NCaXRzIiwiTUlYRUQiLCJnZXRDaGFyQ291bnRJbmRpY2F0b3IiLCJnZXRCZXN0TW9kZUZvckRhdGEiLCJkYXRhU3RyIiwidGVzdE51bWVyaWMiLCJ0ZXN0QWxwaGFudW1lcmljIiwidGVzdEthbmppIiwiTnVtZXJpY0RhdGEiLCJncm91cCIsInJlbWFpbmluZ051bSIsIkdGIiwicDEiLCJwMiIsImNvZWZmIiwiZGl2aWRlbnQiLCJkaXZpc29yIiwiZ2VuZXJhdGVFQ1BvbHlub21pYWwiLCJkZWdyZWUiLCJwb2x5IiwiQWxpZ25tZW50UGF0dGVybiIsIkZpbmRlclBhdHRlcm4iLCJNYXNrUGF0dGVybiIsIkVDQ29kZSIsIlJlZWRTb2xvbW9uRW5jb2RlciIsIlZlcnNpb24iLCJGb3JtYXRJbmZvIiwiU2VnbWVudHMiLCJzZXR1cEZvcm1hdEluZm8iLCJtYXRyaXgiLCJjcmVhdGVEYXRhIiwic2VnbWVudHMiLCJkYXRhVG90YWxDb2Rld29yZHNCaXRzIiwiZ2V0U3ltYm9sVG90YWxDb2Rld29yZHMiLCJyZW1haW5pbmdCeXRlIiwidG90YWxDb2Rld29yZHMiLCJlY1RvdGFsQ29kZXdvcmRzIiwiZGF0YVRvdGFsQ29kZXdvcmRzIiwiZWNUb3RhbEJsb2NrcyIsImJsb2Nrc0luR3JvdXAxIiwidG90YWxDb2Rld29yZHNJbkdyb3VwMSIsImRhdGFDb2Rld29yZHNJbkdyb3VwMSIsImRhdGFDb2Rld29yZHNJbkdyb3VwMiIsImVjQ291bnQiLCJycyIsImRjRGF0YSIsImVjRGF0YSIsIm1heERhdGFTaXplIiwiZGF0YVNpemUiLCJjcmVhdGVDb2Rld29yZHMiLCJjcmVhdGVTeW1ib2wiLCJmcm9tQXJyYXkiLCJlc3RpbWF0ZWRWZXJzaW9uIiwicmF3U2VnbWVudHMiLCJyYXdTcGxpdCIsImdldEJlc3RWZXJzaW9uRm9yRGF0YSIsImJlc3RWZXJzaW9uIiwiZGF0YUJpdHMiLCJtb2R1bGVDb3VudCIsIm1vZHVsZXMiLCJzZXR1cEZpbmRlclBhdHRlcm4iLCJzZXR1cFRpbWluZ1BhdHRlcm4iLCJzZXR1cEFsaWdubWVudFBhdHRlcm4iLCJzZXR1cFZlcnNpb25JbmZvIiwiaW5jIiwiYml0SW5kZXgiLCJieXRlSW5kZXgiLCJkYXJrIiwic2V0dXBEYXRhIiwidG9TSklTRnVuYyIsInNldFRvU0pJU0Z1bmN0aW9uIiwiUG9seW5vbWlhbCIsImdlblBvbHkiLCJwYWRkZWREYXRhIiwiYnVmZiIsIm51bWVyaWMiLCJrYW5qaSIsImJ5dGUiLCJCWVRFX0tBTkpJIiwiVEVTVF9LQU5KSSIsIlRFU1RfTlVNRVJJQyIsIlRFU1RfQUxQSEFOVU1FUklDIiwiZ2V0U3RyaW5nQnl0ZUxlbmd0aCIsInVuZXNjYXBlIiwiZ2V0U2VnbWVudHMiLCJnZXRTZWdtZW50c0Zyb21TdHJpbmciLCJudW1TZWdzIiwiYWxwaGFOdW1TZWdzIiwiYnl0ZVNlZ3MiLCJrYW5qaVNlZ3MiLCJpc0thbmppTW9kZUVuYWJsZWQiLCJzMSIsInMyIiwiZ2V0U2VnbWVudEJpdHNMZW5ndGgiLCJidWlsZFNpbmdsZVNlZ21lbnQiLCJtb2Rlc0hpbnQiLCJiZXN0TW9kZSIsInNlZyIsInNlZ3MiLCJidWlsZE5vZGVzIiwidGFibGUiLCJwcmV2Tm9kZUlkcyIsIm5vZGVHcm91cCIsImN1cnJlbnROb2RlSWRzIiwibGFzdENvdW50IiwicHJldk5vZGVJZCIsImJ1aWxkR3JhcGgiLCJvcHRpbWl6ZWRTZWdzIiwiY3VyciIsInByZXZTZWciLCJtZXJnZVNlZ21lbnRzIiwidG9TSklTRnVuY3Rpb24iLCJDT0RFV09SRFNfQ09VTlQiLCJkaWdpdCIsIkcxOF9CQ0giLCJnZXRSZXNlcnZlZEJpdHNDb3VudCIsImdldFRvdGFsQml0c0Zyb21EYXRhQXJyYXkiLCJ0b3RhbEJpdHMiLCJyZXNlcnZlZEJpdHMiLCJnZXRDYXBhY2l0eSIsInVzYWJsZUJpdHMiLCJlY2wiLCJjdXJyZW50VmVyc2lvbiIsImdldEJlc3RWZXJzaW9uRm9yTWl4ZWREYXRhIiwiZ2V0QmVzdFZlcnNpb25Gb3JEYXRhTGVuZ3RoIiwicXJEYXRhIiwiY2FudmFzRWwiLCJnZXRDYW52YXNFbGVtZW50IiwiZ2V0T3B0aW9ucyIsImdldEltYWdlV2lkdGgiLCJpbWFnZSIsImNyZWF0ZUltYWdlRGF0YSIsInFyVG9JbWFnZURhdGEiLCJjbGVhclJlY3QiLCJoZWlnaHQiLCJjbGVhckNhbnZhcyIsInB1dEltYWdlRGF0YSIsInJlbmRlcmVyT3B0cyIsInF1YWxpdHkiLCJnZXRDb2xvckF0dHJpYiIsImF0dHJpYiIsImFscGhhIiwidG9GaXhlZCIsInN2Z0NtZCIsImNtZCIsInFyY29kZXNpemUiLCJiZyIsImxpZ2h0IiwibW92ZUJ5IiwibmV3Um93IiwibGluZUxlbmd0aCIsInFyVG9QYXRoIiwidmlld0JveCIsInN2Z1RhZyIsImhleDJyZ2JhIiwiaGV4Q29kZSIsImhleFZhbHVlIiwic2NhbGUiLCJnZXRTY2FsZSIsInFyU2l6ZSIsImltZ0RhdGEiLCJxciIsInN5bWJvbFNpemUiLCJzY2FsZWRNYXJnaW4iLCJwYWxldHRlIiwicG9zRHN0IiwicHhDb2xvciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJmb28iLCJ0eXBlZEFycmF5U3VwcG9ydCIsIktfTUFYX0xFTkdUSCIsInRoYXQiLCJBcnJheUJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYWN0dWFsIiwiaXNuYW4iLCJmcm9tT2JqZWN0IiwidXRmOFRvQnl0ZXMiLCJ1bml0cyIsImNvZGVQb2ludCIsImxlYWRTdXJyb2dhdGUiLCJpc1ZpZXciLCJzcGVjaWVzIiwiaXNGaW5pdGUiLCJyZW1haW5pbmciLCJkc3QiLCJibGl0QnVmZmVyIiwidXRmOFdyaXRlIiwibmV3QnVmIiwic3ViYXJyYXkiLCJzbGljZUxlbiIsInRhcmdldFN0YXJ0IiwibGlzdCIsIl9pc0J1ZmZlciIsImJhc2U2NCIsImllZWU3NTQiLCJjdXN0b21JbnNwZWN0U3ltYm9sIiwic2V0UHJvdG90eXBlT2YiLCJlbmNvZGluZ09yT2Zmc2V0IiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYXJyYXlWaWV3IiwiaXNJbnN0YW5jZSIsImZyb21BcnJheVZpZXciLCJTaGFyZWRBcnJheUJ1ZmZlciIsInZhbHVlT2YiLCJudW1iZXJJc05hTiIsInRvUHJpbWl0aXZlIiwiYXNzZXJ0U2l6ZSIsIm11c3RNYXRjaCIsImxvd2VyZWRDYXNlIiwiYmFzZTY0VG9CeXRlcyIsInNsb3dUb1N0cmluZyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJhcnJheUluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJzdHJMZW4iLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJmaXJzdEJ5dGUiLCJieXRlc1BlclNlcXVlbmNlIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwicHJvdG8iLCJwb29sU2l6ZSIsImFsbG9jVW5zYWZlU2xvdyIsImNvbXBhcmUiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJ0b0xvY2FsZVN0cmluZyIsImVxdWFscyIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJfYXJyIiwiaGV4U2xpY2VMb29rdXBUYWJsZSIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwicmVhZFVpbnRCRSIsInJlYWRVSW50QkUiLCJyZWFkVWludDgiLCJyZWFkVUludDgiLCJyZWFkVWludDE2TEUiLCJyZWFkVUludDE2TEUiLCJyZWFkVWludDE2QkUiLCJyZWFkVWludDMyTEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVWludDMyQkUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVWludExFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVpbnRCRSIsIndyaXRlVUludEJFIiwid3JpdGVVaW50OCIsIndyaXRlVUludDgiLCJ3cml0ZVVpbnQxNkxFIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVWludDE2QkUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVaW50MzJMRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVpbnQzMkJFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJjb3B5V2l0aGluIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJ0b0J5dGVBcnJheSIsImJhc2U2NGNsZWFuIiwiYWxwaGFiZXQiLCJpMTYiLCJzdHJpY3RVcmlFbmNvZGUiLCJkZWNvZGVDb21wb25lbnQiLCJzcGxpdE9uRmlyc3QiLCJ2YWxpZGF0ZUFycmF5Rm9ybWF0U2VwYXJhdG9yIiwia2V5c1NvcnRlciIsInJlbW92ZUhhc2giLCJoYXNoU3RhcnQiLCJleHRyYWN0IiwicXVlcnlTdGFydCIsInBhcnNlVmFsdWUiLCJwYXJzZU51bWJlcnMiLCJwYXJzZUJvb2xlYW5zIiwiYXJyYXlGb3JtYXQiLCJhcnJheUZvcm1hdFNlcGFyYXRvciIsImZvcm1hdHRlciIsIm5ld1ZhbHVlIiwicGFyc2VyRm9yQXJyYXlGb3JtYXQiLCJwYXJhbSIsInNraXBOdWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJza2lwRW1wdHlTdHJpbmciLCJlbmNvZGVyRm9yQXJyYXlGb3JtYXQiLCJvYmplY3RDb3B5IiwicGFyc2VVcmwiLCJwYXJzZUZyYWdtZW50SWRlbnRpZmllciIsImZyYWdtZW50SWRlbnRpZmllciIsInN0cmluZ2lmeVVybCIsInF1ZXJ5RnJvbVVybCIsInBhcnNlZFF1ZXJ5RnJvbVVybCIsImdldEhhc2giLCJ1dGlsIiwiUmVmbGVjdEFwcGx5IiwicmVjZWl2ZXIiLCJzYWZlQXBwbHkiLCJhcnJheUNsb25lIiwiZG9FcnJvciIsImVyIiwiZ2xvYmFsIiwiY2FwYWNpdHkiLCJzZW1hcGhvcmUiLCJmaXJzdEhlcmUiLCJ0YWtlIiwiaXNGaXJzdCIsImxlYXZlIiwiYXZhaWxhYmxlIiwic2VwYXJhdG9yIiwic2VwYXJhdG9ySW5kZXgiLCJyYW5nZUNvdW50IiwiYWN0aXZlIiwiYWN0aXZlRWxlbWVudCIsInJhbmdlcyIsImdldFJhbmdlQXQiLCJ0YWdOYW1lIiwiYmx1ciIsImZvY3VzIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fYXNzaWduIiwiX19yZXN0IiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJkZWNvcmF0ZSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiX19tZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIl9fdmFsdWVzIiwiX19yZWFkIiwiYXIiLCJfX3NwcmVhZCIsIl9fc3ByZWFkQXJyYXkiLCJwYWNrIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsImNvb2tlZCIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsIl9faW1wb3J0U3RhciIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJraW5kIiwiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRJbiIsIkV0aEJsb2NrVHJhY2tlciIsImVhY2hTZXJpZXMiLCJTdG9wbGlnaHQiLCJub29wIiwiV2ViM1Byb3ZpZGVyRW5naW5lIiwic2V0TWF4TGlzdGVuZXJzIiwiZGlyZWN0UHJvdmlkZXIiLCJfaGFuZGxlQXN5bmMiLCJibG9ja1RyYWNrZXJQcm92aWRlciIsIl9ibG9ja1RyYWNrZXIiLCJfcmVhZHkiLCJfcHJvdmlkZXJzIiwiZ28iLCJfZ2V0QmxvY2tCeU51bWJlcldpdGhSZXRyeSIsImJ1ZmZlckJsb2NrIiwianNvbkJsb2NrIiwicmVjZWlwdFJvb3QiLCJ0b3RhbERpZmZpY3VsdHkiLCJ0b0J1ZmZlckJsb2NrIiwiX3J1bm5pbmciLCJzb3VyY2UiLCJyZW1vdmVQcm92aWRlciIsImF3YWl0IiwicmV0cmllc1JlbWFpbmluZyIsImF0dGVtcHRSZXF1ZXN0IiwiX2dldEJsb2NrQnlOdW1iZXIiLCJhZnRlclJlcXVlc3QiLCJmaW5pc2hlZCIsIl9yZXN1bHQiLCJyZXN1bHRPYmoiLCJhZnRlciIsIlByb3ZpZGVyU3VicHJvdmlkZXIiLCJjcmVhdGVCbG9ja0NhY2hlTWlkZGxld2FyZSIsIlN1YnByb3ZpZGVyIiwiRml4dHVyZVByb3ZpZGVyIiwic3RhdGljUmVzcG9uc2VzIiwic3RhdGljUmVzcG9uc2UiLCJ3YXRlcmZhbGwiLCJwYXJhbGxlbCIsInNpZ1V0aWwiLCJoZXhSZWdleCIsIm5vbmNlTG9jayIsImFwcHJvdmVUcmFuc2FjdGlvbiIsImF1dG9BcHByb3ZlIiwiYXBwcm92ZU1lc3NhZ2UiLCJhcHByb3ZlUGVyc29uYWxNZXNzYWdlIiwiYXBwcm92ZURlY3J5cHRNZXNzYWdlIiwiYXBwcm92ZUVuY3J5cHRpb25QdWJsaWNLZXkiLCJhcHByb3ZlVHlwZWRNZXNzYWdlIiwibXVzdFByb3ZpZGVJbkNvbnN0cnVjdG9yIiwiZGVjcnlwdE1lc3NhZ2UiLCJlbmNyeXB0aW9uUHVibGljS2V5Iiwic2lnblR5cGVkTWVzc2FnZSIsInB1Ymxpc2hUcmFuc2FjdGlvbiIsImdldEdhc1ByaWNlIiwicmVzZW1ibGVzQWRkcmVzcyIsImZpeGVkIiwicmVzZW1ibGVzRGF0YSIsImlzVmFsaWRIZXgiLCJleHRyYVBhcmFtcyIsIl9wYXJpdHlSZXF1ZXN0cyIsIl9wYXJpdHlSZXF1ZXN0Q291bnQiLCJ2YWxpZGF0ZVRyYW5zYWN0aW9uIiwidmFsaWRhdGVNZXNzYWdlIiwid2FybmluZyIsInZhbGlkYXRlUGVyc29uYWxNZXNzYWdlIiwidmFsaWRhdGVEZWNyeXB0TWVzc2FnZSIsInByb2Nlc3NEZWNyeXB0TWVzc2FnZSIsInZhbGlkYXRlRW5jcnlwdGlvblB1YmxpY0tleSIsInByb2Nlc3NFbmNyeXB0aW9uUHVibGljS2V5Iiwic2Vjb25kIiwidmFsaWRhdGVUeXBlZE1lc3NhZ2UiLCJwYXJpdHlQb3N0VHJhbnNhY3Rpb24iLCJwYXJpdHlQb3N0U2lnbiIsInJlcXVlc3RJZCIsInBhcml0eUNoZWNrUmVxdWVzdCIsImFjY291bnQiLCJkaWRBcHByb3ZlIiwiY2hlY2tBcHByb3ZhbCIsImZpbmFsaXplQW5kU3VibWl0VHgiLCJmaW5hbGl6ZVR4IiwicmVxSWQiLCJlbWl0UGF5bG9hZCIsInR4SGFzaCIsInNlbmRlckhleCIsInZhbGlkYXRlU2VuZGVyIiwic2VuZGVySXNWYWxpZCIsInNlbmRlckFkZHJlc3MiLCJmaWxsSW5UeEV4dHJhcyIsInNpZ25lZFR4IiwicmF3VHgiLCJjbG9uZVR4UGFyYW1zIiwidGFza1Jlc3VsdHMiLCJjb25zdHJ1Y3RvckZuIiwiX2NvbnN0cnVjdG9yRm4iLCJwcm92RW5nTmV4dCIsInByb3ZFbmdFbmQiLCJOb25jZVRyYWNrZXJTdWJwcm92aWRlciIsIm5vbmNlQ2FjaGUiLCJjYWNoZWRSZXN1bHQiLCJoZXhOb25jZSIsIlN1YlByb3ZpZGVyIiwiY3JlYXRlU3Vic2NyaXB0aW9uTWFuYWdlciIsImdldFJhbmRvbUlkIiwiaW5jbHVkZUJsb2NrUmVmIl0sInNvdXJjZVJvb3QiOiIifQ==