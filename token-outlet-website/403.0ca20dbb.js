"use strict";

(self.webpackChunktoken_outlet_website = self.webpackChunktoken_outlet_website || []).push([ [ 403 ], {
  88403: (e, t, n) => {
    n.r(t), n.d(t, {
      Web3WalletProvider: () => a,
      default: () => c
    });
    var r = n(241);
    var o = n(76677);
    var s = function(e, t, n, r) {
      return new (n || (n = Promise))((function(o, s) {
        function i(e) {
          try {
            c(r.next(e));
          } catch (t) {
            s(t);
          }
        }
        function a(e) {
          try {
            c(r.throw(e));
          } catch (t) {
            s(t);
          }
        }
        function c(e) {
          e.done ? o(e.value) : function(e) {
            return e instanceof n ? e : new n((function(t) {
              t(e);
            }));
          }(e.value).then(i, a);
        }
        c((r = r.apply(e, t || [])).next());
      }));
    };
    var i = function(e, t) {
      var n, r, o, s, i = {
        label: 0,
        sent: function() {
          if (1 & o[0]) throw o[1];
          return o[1];
        },
        trys: [],
        ops: []
      };
      return s = {
        next: a(0),
        throw: a(1),
        return: a(2)
      }, "function" == typeof Symbol && (s[Symbol.iterator] = function() {
        return this;
      }), s;
      function a(s) {
        return function(a) {
          return function(s) {
            if (n) throw new TypeError("Generator is already executing.");
            for (;i; ) try {
              if (n = 1, r && (o = 2 & s[0] ? r.return : s[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, s[1])).done) return o;
              switch (r = 0, o && (s = [ 2 & s[0], o.value ]), s[0]) {
               case 0:
               case 1:
                o = s;
                break;

               case 4:
                return i.label++, {
                  value: s[1],
                  done: !1
                };

               case 5:
                i.label++, r = s[1], s = [ 0 ];
                continue;

               case 7:
                s = i.ops.pop(), i.trys.pop();
                continue;

               default:
                if (!(o = i.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== s[0] && 2 !== s[0])) {
                  i = 0;
                  continue;
                }
                if (3 === s[0] && (!o || s[1] > o[0] && s[1] < o[3])) {
                  i.label = s[1];
                  break;
                }
                if (6 === s[0] && i.label < o[1]) {
                  i.label = o[1], o = s;
                  break;
                }
                if (o && i.label < o[2]) {
                  i.label = o[2], i.ops.push(s);
                  break;
                }
                o[2] && i.ops.pop(), i.trys.pop();
                continue;
              }
              s = t.call(e, i);
            } catch (a) {
              s = [ 6, a ], r = 0;
            } finally {
              n = o = 0;
            }
            if (5 & s[0]) throw s[1];
            return {
              value: s[0] ? s[1] : void 0,
              done: !0
            };
          }([ s, a ]);
        };
      }
    };
    var a = function() {
      function e(e, t) {
        this.state = {
          addresses: []
        }, this.client = e, this.safeConnectOptions = t;
      }
      return e.prototype.connectWith = function(e) {
        return s(this, void 0, void 0, (function() {
          var t;
          return i(this, (function(n) {
            switch (n.label) {
             case 0:
              if (!e) throw new Error('Please provide a Wallet type to connect with.');
              return this[e] ? [ 4, this[e]() ] : [ 3, 2 ];

             case 1:
              return t = n.sent(), (0, o.kg)(2, 'address', t), [ 2, t ];

             case 2:
              throw new Error('Wallet type not found');
            }
          }));
        }));
      }, e.prototype.signWith = function(e, t) {
        return s(this, void 0, void 0, (function() {
          var n;
          return i(this, (function(o) {
            switch (o.label) {
             case 0:
              return n = new r.Q(t), [ 4, n.getSigner().signMessage(e) ];

             case 1:
              return [ 2, o.sent() ];
            }
          }));
        }));
      }, e.prototype.getConnectedWalletData = function() {
        return this.state.addresses;
      }, e.prototype.registerNewWalletAddress = function(e, t, n, r) {
        return void 0 === r && (r = 'evm'), this.state.addresses.push({
          address: e,
          chainId: t,
          provider: n,
          blockChain: r
        }), this.state.addresses;
      }, e.prototype.MetaMask = function() {
        return s(this, void 0, void 0, (function() {
          var e, t, n;
          return i(this, (function(r) {
            switch (r.label) {
             case 0:
              return (0, o.kg)(2, 'connect MetaMask'), void 0 === window.ethereum ? [ 3, 3 ] : [ 4, window.ethereum.request({
                method: 'eth_requestAccounts'
              }) ];

             case 1:
              return e = r.sent(), [ 4, window.ethereum.request({
                method: 'eth_chainId'
              }) ];

             case 2:
              return t = r.sent(), n = e[0], [ 2, this.registerNewWalletAddress(n, parseInt(t, 16), ethereum) ];

             case 3:
              throw new Error("MetaMask is not available. Please check the extension is supported and active.");
            }
          }));
        }));
      }, e.prototype.WalletConnect = function() {
        return s(this, void 0, void 0, (function() {
          var e, t;
          return i(this, (function(s) {
            switch (s.label) {
             case 0:
              return (0, o.kg)(2, 'connect Wallet Connect'), [ 4, Promise.all([ n.e(220), n.e(578), n.e(717) ]).then(n.bind(n, 26578)) ];

             case 1:
              return [ 4, s.sent().getWalletConnectProviderInstance() ];

             case 2:
              return [ 4, (e = s.sent()).enable() ];

             case 3:
              return s.sent(), [ 4, new r.Q(e).listAccounts() ];

             case 4:
              if (0 === (t = s.sent()).length) throw new Error("No accounts found via wallet-connect.");
              return [ 2, this.registerNewWalletAddress(t[0], '1', e) ];
            }
          }));
        }));
      }, e.prototype.Torus = function() {
        return s(this, void 0, void 0, (function() {
          var e, t;
          return i(this, (function(o) {
            switch (o.label) {
             case 0:
              return [ 4, Promise.all([ n.e(220), n.e(65), n.e(88) ]).then(n.bind(n, 42065)) ];

             case 1:
              return [ 4, o.sent().getTorusProviderInstance() ];

             case 2:
              return [ 4, (e = o.sent()).init() ];

             case 3:
              return o.sent(), [ 4, e.login() ];

             case 4:
              return o.sent(), [ 4, new r.Q(e.provider).listAccounts() ];

             case 5:
              if (0 === (t = o.sent()).length) throw new Error("No accounts found via wallet-connect.");
              return [ 2, this.registerNewWalletAddress(t[0], '1', e.provider) ];
            }
          }));
        }));
      }, e.prototype.Phantom = function() {
        return s(this, void 0, void 0, (function() {
          var e, t;
          return i(this, (function(n) {
            switch (n.label) {
             case 0:
              return (0, o.kg)(2, 'connect Phantom'), void 0 === window.solana ? [ 3, 2 ] : [ 4, window.solana.connect() ];

             case 1:
              return e = n.sent(), t = e.publicKey.toBase58(), [ 2, this.registerNewWalletAddress(t, "mainnet-beta", window.solana, 'solana') ];

             case 2:
              throw new Error("MetaMask is not available. Please check the extension is supported and active.");
            }
          }));
        }));
      }, e.prototype.SafeConnect = function() {
        return s(this, void 0, void 0, (function() {
          var e, t;
          return i(this, (function(n) {
            switch (n.label) {
             case 0:
              return (0, o.kg)(2, 'connect SafeConnect'), [ 4, this.getSafeConnectProvider() ];

             case 1:
              return [ 4, (e = n.sent()).initSafeConnect() ];

             case 2:
              return t = n.sent(), this.registerNewWalletAddress(t, "1", e), [ 2, t ];
            }
          }));
        }));
      }, e.prototype.safeConnectAvailable = function() {
        return void 0 !== this.safeConnectOptions;
      }, e.prototype.getSafeConnectProvider = function() {
        return s(this, void 0, void 0, (function() {
          return i(this, (function(e) {
            switch (e.label) {
             case 0:
              return [ 4, Promise.resolve().then(n.bind(n, 67393)) ];

             case 1:
              return [ 2, new (0, e.sent().SafeConnectProvider)(this.client.getUi(), this.safeConnectOptions) ];
            }
          }));
        }));
      }, e;
    }();
    const c = a;
  }
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,