/*! For license information please see 681.6e7bd862.js.LICENSE.txt */
(self.webpackChunktoken_outlet_website = self.webpackChunktoken_outlet_website || []).push([ [ 681 ], {
  4681: (e, t, r) => {
    "use strict";
    r.r(t), r.d(t, {
      getTorusProviderInstance: () => a
    });
    var n = r(8712);
    var i = r.n(n);
    var o = function(e, t, r, n) {
      return new (r || (r = Promise))((function(i, o) {
        function s(e) {
          try {
            c(n.next(e));
          } catch (t) {
            o(t);
          }
        }
        function a(e) {
          try {
            c(n.throw(e));
          } catch (t) {
            o(t);
          }
        }
        function c(e) {
          e.done ? i(e.value) : function(e) {
            return e instanceof r ? e : new r((function(t) {
              t(e);
            }));
          }(e.value).then(s, a);
        }
        c((n = n.apply(e, t || [])).next());
      }));
    };
    var s = function(e, t) {
      var r, n, i, o, s = {
        label: 0,
        sent: function() {
          if (1 & i[0]) throw i[1];
          return i[1];
        },
        trys: [],
        ops: []
      };
      return o = {
        next: a(0),
        throw: a(1),
        return: a(2)
      }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
        return this;
      }), o;
      function a(a) {
        return function(c) {
          return function(a) {
            if (r) throw new TypeError("Generator is already executing.");
            for (;o && (o = 0, a[0] && (s = 0)), s; ) try {
              if (r = 1, n && (i = 2 & a[0] ? n.return : a[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, a[1])).done) return i;
              switch (n = 0, i && (a = [ 2 & a[0], i.value ]), a[0]) {
               case 0:
               case 1:
                i = a;
                break;

               case 4:
                return s.label++, {
                  value: a[1],
                  done: !1
                };

               case 5:
                s.label++, n = a[1], a = [ 0 ];
                continue;

               case 7:
                a = s.ops.pop(), s.trys.pop();
                continue;

               default:
                if (!(i = s.trys, (i = i.length > 0 && i[i.length - 1]) || 6 !== a[0] && 2 !== a[0])) {
                  s = 0;
                  continue;
                }
                if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
                  s.label = a[1];
                  break;
                }
                if (6 === a[0] && s.label < i[1]) {
                  s.label = i[1], i = a;
                  break;
                }
                if (i && s.label < i[2]) {
                  s.label = i[2], s.ops.push(a);
                  break;
                }
                i[2] && s.ops.pop(), s.trys.pop();
                continue;
              }
              a = t.call(e, s);
            } catch (c) {
              a = [ 6, c ], n = 0;
            } finally {
              r = i = 0;
            }
            if (5 & a[0]) throw a[1];
            return {
              value: a[0] ? a[1] : void 0,
              done: !0
            };
          }([ a, c ]);
        };
      }
    };
    var a = function() {
      return o(void 0, void 0, void 0, (function() {
        return s(this, (function(e) {
          return [ 2, new (i()) ];
        }));
      }));
    };
  },
  8712: (e, t, r) => {
    var n = r(5108);
    !function(t, r) {
      e.exports = r();
    }(self, (() => (() => {
      var e = {
        8349: (e, t, r) => {
          "use strict";
          r.d(t, {
            RQ: () => G,
            _R: () => p
          });
          var n = r(3587), i = r(711);
          const o = "abi/5.6.4", s = new i.Yd(o), a = {};
          let c = {
            calldata: !0,
            memory: !0,
            storage: !0
          }, f = {
            calldata: !0,
            memory: !0
          };
          function u(e, t) {
            if ("bytes" === e || "string" === e) {
              if (c[t]) return !0;
            } else if ("address" === e) {
              if ("payable" === t) return !0;
            } else if ((e.indexOf("[") >= 0 || "tuple" === e) && f[t]) return !0;
            return (c[t] || "payable" === t) && s.throwArgumentError("invalid modifier", "name", t), !1;
          }
          function h(e, t) {
            for (let r in t) (0, n.zG)(e, r, t[r]);
          }
          const d = Object.freeze({
            sighash: "sighash",
            minimal: "minimal",
            full: "full",
            json: "json"
          }), l = new RegExp(/^(.*)\[([0-9]*)\]$/);
          class p {
            constructor(e, t) {
              e !== a && s.throwError("use fromString", i.Yd.errors.UNSUPPORTED_OPERATION, {
                operation: "new ParamType()"
              }), h(this, t);
              let r = this.type.match(l);
              h(this, r ? {
                arrayLength: parseInt(r[2] || "-1"),
                arrayChildren: p.fromObject({
                  type: r[1],
                  components: this.components
                }),
                baseType: "array"
              } : {
                arrayLength: null,
                arrayChildren: null,
                baseType: null != this.components ? "tuple" : this.type
              }), this._isParamType = !0, Object.freeze(this);
            }
            format(e) {
              if (e || (e = d.sighash), d[e] || s.throwArgumentError("invalid format type", "format", e), e === d.json) {
                let t = {
                  type: "tuple" === this.baseType ? "tuple" : this.type,
                  name: this.name || void 0
                };
                return "boolean" == typeof this.indexed && (t.indexed = this.indexed), this.components && (t.components = this.components.map((t => JSON.parse(t.format(e))))), 
                JSON.stringify(t);
              }
              let t = "";
              return "array" === this.baseType ? (t += this.arrayChildren.format(e), t += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]") : "tuple" === this.baseType ? (e !== d.sighash && (t += this.type), 
              t += "(" + this.components.map((t => t.format(e))).join(e === d.full ? ", " : ",") + ")") : t += this.type, e !== d.sighash && (!0 === this.indexed && (t += " indexed"), 
              e === d.full && this.name && (t += " " + this.name)), t;
            }
            static from(e, t) {
              return "string" == typeof e ? p.fromString(e, t) : p.fromObject(e);
            }
            static fromObject(e) {
              return p.isParamType(e) ? e : new p(a, {
                name: e.name || null,
                type: b(e.type),
                indexed: null == e.indexed ? null : !!e.indexed,
                components: e.components ? e.components.map(p.fromObject) : null
              });
            }
            static fromString(e, t) {
              return r = function(e, t) {
                let r = e;
                function n(t) {
                  s.throwArgumentError(`unexpected character at position ${t}`, "param", e);
                }
                function i(e) {
                  let r = {
                    type: "",
                    name: "",
                    parent: e,
                    state: {
                      allowType: !0
                    }
                  };
                  return t && (r.indexed = !1), r;
                }
                e = e.replace(/\s/g, " ");
                let o = {
                  type: "",
                  name: "",
                  state: {
                    allowType: !0
                  }
                }, a = o;
                for (let s = 0; s < e.length; s++) {
                  let r = e[s];
                  switch (r) {
                   case "(":
                    a.state.allowType && "" === a.type ? a.type = "tuple" : a.state.allowParams || n(s), a.state.allowType = !1, a.type = b(a.type), 
                    a.components = [ i(a) ], a = a.components[0];
                    break;

                   case ")":
                    delete a.state, "indexed" === a.name && (t || n(s), a.indexed = !0, a.name = ""), u(a.type, a.name) && (a.name = ""), a.type = b(a.type);
                    let e = a;
                    a = a.parent, a || n(s), delete e.parent, a.state.allowParams = !1, a.state.allowName = !0, a.state.allowArray = !0;
                    break;

                   case ",":
                    delete a.state, "indexed" === a.name && (t || n(s), a.indexed = !0, a.name = ""), u(a.type, a.name) && (a.name = ""), a.type = b(a.type);
                    let o = i(a.parent);
                    a.parent.components.push(o), delete a.parent, a = o;
                    break;

                   case " ":
                    a.state.allowType && "" !== a.type && (a.type = b(a.type), delete a.state.allowType, a.state.allowName = !0, a.state.allowParams = !0), 
                    a.state.allowName && "" !== a.name && ("indexed" === a.name ? (t || n(s), a.indexed && n(s), a.indexed = !0, a.name = "") : u(a.type, a.name) ? a.name = "" : a.state.allowName = !1);
                    break;

                   case "[":
                    a.state.allowArray || n(s), a.type += r, a.state.allowArray = !1, a.state.allowName = !1, a.state.readArray = !0;
                    break;

                   case "]":
                    a.state.readArray || n(s), a.type += r, a.state.readArray = !1, a.state.allowArray = !0, a.state.allowName = !0;
                    break;

                   default:
                    a.state.allowType ? (a.type += r, a.state.allowParams = !0, a.state.allowArray = !0) : a.state.allowName ? (a.name += r, 
                    delete a.state.allowArray) : a.state.readArray ? a.type += r : n(s);
                  }
                }
                return a.parent && s.throwArgumentError("unexpected eof", "param", e), delete o.state, "indexed" === a.name ? (t || n(r.length - 7), 
                a.indexed && n(r.length - 7), a.indexed = !0, a.name = "") : u(a.type, a.name) && (a.name = ""), o.type = b(o.type), o;
              }(e, !!t), p.fromObject({
                name: r.name,
                type: r.type,
                indexed: r.indexed,
                components: r.components
              });
              var r;
            }
            static isParamType(e) {
              return !(null == e || !e._isParamType);
            }
          }
          function b(e) {
            return e.match(/^uint($|[^1-9])/) ? e = "uint256" + e.substring(4) : e.match(/^int($|[^1-9])/) && (e = "int256" + e.substring(3)), 
            e;
          }
          var y = r(3286), g = r(5154);
          const m = new i.Yd(o);
          class v {
            constructor(e, t, r, n) {
              this.name = e, this.type = t, this.localName = r, this.dynamic = n;
            }
            _throwError(e, t) {
              m.throwArgumentError(e, this.localName, t);
            }
          }
          class w {
            constructor(e) {
              (0, n.zG)(this, "wordSize", e || 32), this._data = [], this._dataLength = 0, this._padding = new Uint8Array(e);
            }
            get data() {
              return (0, y.xs)(this._data);
            }
            get length() {
              return this._dataLength;
            }
            _writeData(e) {
              return this._data.push(e), this._dataLength += e.length, e.length;
            }
            appendWriter(e) {
              return this._writeData((0, y.zo)(e._data));
            }
            writeBytes(e) {
              let t = (0, y.lE)(e);
              const r = t.length % this.wordSize;
              return r && (t = (0, y.zo)([ t, this._padding.slice(r) ])), this._writeData(t);
            }
            _getValue(e) {
              let t = (0, y.lE)(g.O$.from(e));
              return t.length > this.wordSize && m.throwError("value out-of-bounds", i.Yd.errors.BUFFER_OVERRUN, {
                length: this.wordSize,
                offset: t.length
              }), t.length % this.wordSize && (t = (0, y.zo)([ this._padding.slice(t.length % this.wordSize), t ])), t;
            }
            writeValue(e) {
              return this._writeData(this._getValue(e));
            }
            writeUpdatableValue() {
              const e = this._data.length;
              return this._data.push(this._padding), this._dataLength += this.wordSize, t => {
                this._data[e] = this._getValue(t);
              };
            }
          }
          class _ {
            constructor(e, t, r, i) {
              (0, n.zG)(this, "_data", (0, y.lE)(e)), (0, n.zG)(this, "wordSize", t || 32), (0, n.zG)(this, "_coerceFunc", r), (0, n.zG)(this, "allowLoose", i), 
              this._offset = 0;
            }
            get data() {
              return (0, y.Dv)(this._data);
            }
            get consumed() {
              return this._offset;
            }
            static coerce(e, t) {
              let r = e.match("^u?int([0-9]+)$");
              return r && parseInt(r[1]) <= 48 && (t = t.toNumber()), t;
            }
            coerce(e, t) {
              return this._coerceFunc ? this._coerceFunc(e, t) : _.coerce(e, t);
            }
            _peekBytes(e, t, r) {
              let n = Math.ceil(t / this.wordSize) * this.wordSize;
              return this._offset + n > this._data.length && (this.allowLoose && r && this._offset + t <= this._data.length ? n = t : m.throwError("data out-of-bounds", i.Yd.errors.BUFFER_OVERRUN, {
                length: this._data.length,
                offset: this._offset + n
              })), this._data.slice(this._offset, this._offset + n);
            }
            subReader(e) {
              return new _(this._data.slice(this._offset + e), this.wordSize, this._coerceFunc, this.allowLoose);
            }
            readBytes(e, t) {
              let r = this._peekBytes(0, e, !!t);
              return this._offset += r.length, r.slice(0, e);
            }
            readValue() {
              return g.O$.from(this.readBytes(this.wordSize));
            }
          }
          var S = r(4594);
          class E extends v {
            constructor(e) {
              super("address", "address", e, !1);
            }
            defaultValue() {
              return "0x0000000000000000000000000000000000000000";
            }
            encode(e, t) {
              try {
                t = (0, S.Kn)(t);
              } catch (e) {
                this._throwError(e.message, t);
              }
              return e.writeValue(t);
            }
            decode(e) {
              return (0, S.Kn)((0, y.$m)(e.readValue().toHexString(), 20));
            }
          }
          class A extends v {
            constructor(e) {
              super(e.name, e.type, void 0, e.dynamic), this.coder = e;
            }
            defaultValue() {
              return this.coder.defaultValue();
            }
            encode(e, t) {
              return this.coder.encode(e, t);
            }
            decode(e) {
              return this.coder.decode(e);
            }
          }
          const x = new i.Yd(o);
          function k(e, t, r) {
            let n = null;
            if (Array.isArray(r)) n = r; else if (r && "object" == typeof r) {
              let e = {};
              n = t.map((t => {
                const n = t.localName;
                return n || x.throwError("cannot encode object for signature with missing names", i.Yd.errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder: t,
                  value: r
                }), e[n] && x.throwError("cannot encode object for signature with duplicate names", i.Yd.errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder: t,
                  value: r
                }), e[n] = !0, r[n];
              }));
            } else x.throwArgumentError("invalid tuple value", "tuple", r);
            t.length !== n.length && x.throwArgumentError("types/value length mismatch", "tuple", r);
            let o = new w(e.wordSize), s = new w(e.wordSize), a = [];
            t.forEach(((e, t) => {
              let r = n[t];
              if (e.dynamic) {
                let t = s.length;
                e.encode(s, r);
                let n = o.writeUpdatableValue();
                a.push((e => {
                  n(e + t);
                }));
              } else e.encode(o, r);
            })), a.forEach((e => {
              e(o.length);
            }));
            let c = e.appendWriter(o);
            return c += e.appendWriter(s), c;
          }
          function P(e, t) {
            let r = [], n = e.subReader(0);
            t.forEach((t => {
              let o = null;
              if (t.dynamic) {
                let r = e.readValue(), s = n.subReader(r.toNumber());
                try {
                  o = t.decode(s);
                } catch (e) {
                  if (e.code === i.Yd.errors.BUFFER_OVERRUN) throw e;
                  o = e, o.baseType = t.name, o.name = t.localName, o.type = t.type;
                }
              } else try {
                o = t.decode(e);
              } catch (e) {
                if (e.code === i.Yd.errors.BUFFER_OVERRUN) throw e;
                o = e, o.baseType = t.name, o.name = t.localName, o.type = t.type;
              }
              null != o && r.push(o);
            }));
            const o = t.reduce(((e, t) => {
              const r = t.localName;
              return r && (e[r] || (e[r] = 0), e[r]++), e;
            }), {});
            t.forEach(((e, t) => {
              let n = e.localName;
              if (!n || 1 !== o[n]) return;
              if ("length" === n && (n = "_length"), null != r[n]) return;
              const i = r[t];
              i instanceof Error ? Object.defineProperty(r, n, {
                enumerable: !0,
                get: () => {
                  throw i;
                }
              }) : r[n] = i;
            }));
            for (let i = 0; i < r.length; i++) {
              const e = r[i];
              e instanceof Error && Object.defineProperty(r, i, {
                enumerable: !0,
                get: () => {
                  throw e;
                }
              });
            }
            return Object.freeze(r);
          }
          class O extends v {
            constructor(e, t, r) {
              super("array", e.type + "[" + (t >= 0 ? t : "") + "]", r, -1 === t || e.dynamic), this.coder = e, this.length = t;
            }
            defaultValue() {
              const e = this.coder.defaultValue(), t = [];
              for (let r = 0; r < this.length; r++) t.push(e);
              return t;
            }
            encode(e, t) {
              Array.isArray(t) || this._throwError("expected array value", t);
              let r = this.length;
              -1 === r && (r = t.length, e.writeValue(t.length)), x.checkArgumentCount(t.length, r, "coder array" + (this.localName ? " " + this.localName : ""));
              let n = [];
              for (let i = 0; i < t.length; i++) n.push(this.coder);
              return k(e, n, t);
            }
            decode(e) {
              let t = this.length;
              -1 === t && (t = e.readValue().toNumber(), 32 * t > e._data.length && x.throwError("insufficient data length", i.Yd.errors.BUFFER_OVERRUN, {
                length: e._data.length,
                count: t
              }));
              let r = [];
              for (let n = 0; n < t; n++) r.push(new A(this.coder));
              return e.coerce(this.name, P(e, r));
            }
          }
          class M extends v {
            constructor(e) {
              super("bool", "bool", e, !1);
            }
            defaultValue() {
              return !1;
            }
            encode(e, t) {
              return e.writeValue(t ? 1 : 0);
            }
            decode(e) {
              return e.coerce(this.type, !e.readValue().isZero());
            }
          }
          class I extends v {
            constructor(e, t) {
              super(e, e, t, !0);
            }
            defaultValue() {
              return "0x";
            }
            encode(e, t) {
              t = (0, y.lE)(t);
              let r = e.writeValue(t.length);
              return r += e.writeBytes(t), r;
            }
            decode(e) {
              return e.readBytes(e.readValue().toNumber(), !0);
            }
          }
          class T extends I {
            constructor(e) {
              super("bytes", e);
            }
            decode(e) {
              return e.coerce(this.name, (0, y.Dv)(super.decode(e)));
            }
          }
          class R extends v {
            constructor(e, t) {
              let r = "bytes" + String(e);
              super(r, r, t, !1), this.size = e;
            }
            defaultValue() {
              return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
            }
            encode(e, t) {
              let r = (0, y.lE)(t);
              return r.length !== this.size && this._throwError("incorrect data length", t), e.writeBytes(r);
            }
            decode(e) {
              return e.coerce(this.name, (0, y.Dv)(e.readBytes(this.size)));
            }
          }
          class C extends v {
            constructor(e) {
              super("null", "", e, !1);
            }
            defaultValue() {
              return null;
            }
            encode(e, t) {
              return null != t && this._throwError("not null", t), e.writeBytes([]);
            }
            decode(e) {
              return e.readBytes(0), e.coerce(this.name, null);
            }
          }
          var N = r(1046);
          class j extends v {
            constructor(e, t, r) {
              const n = (t ? "int" : "uint") + 8 * e;
              super(n, n, r, !1), this.size = e, this.signed = t;
            }
            defaultValue() {
              return 0;
            }
            encode(e, t) {
              let r = g.O$.from(t), n = N.Bz.mask(8 * e.wordSize);
              if (this.signed) {
                let e = n.mask(8 * this.size - 1);
                (r.gt(e) || r.lt(e.add(N.fh).mul(N.tL))) && this._throwError("value out-of-bounds", t);
              } else (r.lt(N._Y) || r.gt(n.mask(8 * this.size))) && this._throwError("value out-of-bounds", t);
              return r = r.toTwos(8 * this.size).mask(8 * this.size), this.signed && (r = r.fromTwos(8 * this.size).toTwos(8 * e.wordSize)), 
              e.writeValue(r);
            }
            decode(e) {
              let t = e.readValue().mask(8 * this.size);
              return this.signed && (t = t.fromTwos(8 * this.size)), e.coerce(this.name, t);
            }
          }
          const B = new i.Yd("strings/5.6.1");
          var L, D;
          function U(e, t, r, n, i) {
            if (e === D.BAD_PREFIX || e === D.UNEXPECTED_CONTINUE) {
              let e = 0;
              for (let n = t + 1; n < r.length && r[n] >> 6 == 2; n++) e++;
              return e;
            }
            return e === D.OVERRUN ? r.length - t - 1 : 0;
          }
          !function(e) {
            e.current = "", e.NFC = "NFC", e.NFD = "NFD", e.NFKC = "NFKC", e.NFKD = "NFKD";
          }(L || (L = {})), function(e) {
            e.UNEXPECTED_CONTINUE = "unexpected continuation byte", e.BAD_PREFIX = "bad codepoint prefix", e.OVERRUN = "string overrun", 
            e.MISSING_CONTINUE = "missing continuation byte", e.OUT_OF_RANGE = "out of UTF-8 range", e.UTF16_SURROGATE = "UTF-16 surrogate", 
            e.OVERLONG = "overlong representation";
          }(D || (D = {}));
          const q = Object.freeze({
            error: function(e, t, r, n, i) {
              return B.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`, "bytes", r);
            },
            ignore: U,
            replace: function(e, t, r, n, i) {
              return e === D.OVERLONG ? (n.push(i), 0) : (n.push(65533), U(e, t, r));
            }
          });
          class F extends I {
            constructor(e) {
              super("string", e);
            }
            defaultValue() {
              return "";
            }
            encode(e, t) {
              return super.encode(e, function(e, t = L.current) {
                t != L.current && (B.checkNormalize(), e = e.normalize(t));
                let r = [];
                for (let n = 0; n < e.length; n++) {
                  const t = e.charCodeAt(n);
                  if (t < 128) r.push(t); else if (t < 2048) r.push(t >> 6 | 192), r.push(63 & t | 128); else if (55296 == (64512 & t)) {
                    n++;
                    const i = e.charCodeAt(n);
                    if (n >= e.length || 56320 != (64512 & i)) throw new Error("invalid utf-8 string");
                    const o = 65536 + ((1023 & t) << 10) + (1023 & i);
                    r.push(o >> 18 | 240), r.push(o >> 12 & 63 | 128), r.push(o >> 6 & 63 | 128), r.push(63 & o | 128);
                  } else r.push(t >> 12 | 224), r.push(t >> 6 & 63 | 128), r.push(63 & t | 128);
                }
                return (0, y.lE)(r);
              }(t));
            }
            decode(e) {
              return function(e, t) {
                return function(e, t) {
                  null == t && (t = q.error), e = (0, y.lE)(e);
                  const r = [];
                  let n = 0;
                  for (;n < e.length; ) {
                    const i = e[n++];
                    if (i >> 7 == 0) {
                      r.push(i);
                      continue;
                    }
                    let o = null, s = null;
                    if (192 == (224 & i)) o = 1, s = 127; else if (224 == (240 & i)) o = 2, s = 2047; else {
                      if (240 != (248 & i)) {
                        n += t(128 == (192 & i) ? D.UNEXPECTED_CONTINUE : D.BAD_PREFIX, n - 1, e, r);
                        continue;
                      }
                      o = 3, s = 65535;
                    }
                    if (n - 1 + o >= e.length) {
                      n += t(D.OVERRUN, n - 1, e, r);
                      continue;
                    }
                    let a = i & (1 << 8 - o - 1) - 1;
                    for (let c = 0; c < o; c++) {
                      let i = e[n];
                      if (128 != (192 & i)) {
                        n += t(D.MISSING_CONTINUE, n, e, r), a = null;
                        break;
                      }
                      a = a << 6 | 63 & i, n++;
                    }
                    null !== a && (a > 1114111 ? n += t(D.OUT_OF_RANGE, n - 1 - o, e, r, a) : a >= 55296 && a <= 57343 ? n += t(D.UTF16_SURROGATE, n - 1 - o, e, r, a) : a <= s ? n += t(D.OVERLONG, n - 1 - o, e, r, a) : r.push(a));
                  }
                  return r;
                }(e, t).map((e => e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode(55296 + (e >> 10 & 1023), 56320 + (1023 & e))))).join("");
              }(super.decode(e));
            }
          }
          class H extends v {
            constructor(e, t) {
              let r = !1;
              const n = [];
              e.forEach((e => {
                e.dynamic && (r = !0), n.push(e.type);
              })), super("tuple", "tuple(" + n.join(",") + ")", t, r), this.coders = e;
            }
            defaultValue() {
              const e = [];
              this.coders.forEach((t => {
                e.push(t.defaultValue());
              }));
              const t = this.coders.reduce(((e, t) => {
                const r = t.localName;
                return r && (e[r] || (e[r] = 0), e[r]++), e;
              }), {});
              return this.coders.forEach(((r, n) => {
                let i = r.localName;
                i && 1 === t[i] && ("length" === i && (i = "_length"), null == e[i] && (e[i] = e[n]));
              })), Object.freeze(e);
            }
            encode(e, t) {
              return k(e, this.coders, t);
            }
            decode(e) {
              return e.coerce(this.name, P(e, this.coders));
            }
          }
          const z = new i.Yd(o), K = new RegExp(/^bytes([0-9]*)$/), V = new RegExp(/^(u?int)([0-9]*)$/);
          class G {
            constructor(e) {
              (0, n.zG)(this, "coerceFunc", e || null);
            }
            _getCoder(e) {
              switch (e.baseType) {
               case "address":
                return new E(e.name);

               case "bool":
                return new M(e.name);

               case "string":
                return new F(e.name);

               case "bytes":
                return new T(e.name);

               case "array":
                return new O(this._getCoder(e.arrayChildren), e.arrayLength, e.name);

               case "tuple":
                return new H((e.components || []).map((e => this._getCoder(e))), e.name);

               case "":
                return new C(e.name);
              }
              let t = e.type.match(V);
              if (t) {
                let r = parseInt(t[2] || "256");
                return (0 === r || r > 256 || r % 8 != 0) && z.throwArgumentError("invalid " + t[1] + " bit length", "param", e), new j(r / 8, "int" === t[1], e.name);
              }
              if (t = e.type.match(K), t) {
                let r = parseInt(t[1]);
                return (0 === r || r > 32) && z.throwArgumentError("invalid bytes length", "param", e), new R(r, e.name);
              }
              return z.throwArgumentError("invalid type", "type", e.type);
            }
            _getWordSize() {
              return 32;
            }
            _getReader(e, t) {
              return new _(e, this._getWordSize(), this.coerceFunc, t);
            }
            _getWriter() {
              return new w(this._getWordSize());
            }
            getDefaultValue(e) {
              const t = e.map((e => this._getCoder(p.from(e))));
              return new H(t, "_").defaultValue();
            }
            encode(e, t) {
              e.length !== t.length && z.throwError("types/values length mismatch", i.Yd.errors.INVALID_ARGUMENT, {
                count: {
                  types: e.length,
                  values: t.length
                },
                value: {
                  types: e,
                  values: t
                }
              });
              const r = e.map((e => this._getCoder(p.from(e)))), n = new H(r, "_"), o = this._getWriter();
              return n.encode(o, t), o.data;
            }
            decode(e, t, r) {
              const n = e.map((e => this._getCoder(p.from(e))));
              return new H(n, "_").decode(this._getReader((0, y.lE)(t), r));
            }
          }
          new G;
        },
        4594: (e, t, r) => {
          "use strict";
          r.d(t, {
            Kn: () => h
          });
          var n = r(3286), i = r(5154), o = r(8197);
          const s = new (r(711).Yd)("address/5.6.1");
          function a(e) {
            (0, n.A7)(e, 20) || s.throwArgumentError("invalid address", "address", e);
            const t = (e = e.toLowerCase()).substring(2).split(""), r = new Uint8Array(40);
            for (let n = 0; n < 40; n++) r[n] = t[n].charCodeAt(0);
            const i = (0, n.lE)((0, o.w)(r));
            for (let n = 0; n < 40; n += 2) i[n >> 1] >> 4 >= 8 && (t[n] = t[n].toUpperCase()), (15 & i[n >> 1]) >= 8 && (t[n + 1] = t[n + 1].toUpperCase());
            return "0x" + t.join("");
          }
          const c = {};
          for (let d = 0; d < 10; d++) c[String(d)] = String(d);
          for (let d = 0; d < 26; d++) c[String.fromCharCode(65 + d)] = String(10 + d);
          const f = Math.floor((u = 9007199254740991, Math.log10 ? Math.log10(u) : Math.log(u) / Math.LN10));
          var u;
          function h(e) {
            let t = null;
            if ("string" != typeof e && s.throwArgumentError("invalid address", "address", e), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) "0x" !== e.substring(0, 2) && (e = "0x" + e), 
            t = a(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && s.throwArgumentError("bad address checksum", "address", e); else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
              for (e.substring(2, 4) !== function(e) {
                let t = (e = (e = e.toUpperCase()).substring(4) + e.substring(0, 2) + "00").split("").map((e => c[e])).join("");
                for (;t.length >= f; ) {
                  let e = t.substring(0, f);
                  t = parseInt(e, 10) % 97 + t.substring(e.length);
                }
                let r = String(98 - parseInt(t, 10) % 97);
                for (;r.length < 2; ) r = "0" + r;
                return r;
              }(e) && s.throwArgumentError("bad icap checksum", "address", e), t = (0, i.g$)(e.substring(4)); t.length < 40; ) t = "0" + t;
              t = a("0x" + t);
            } else s.throwArgumentError("invalid address", "address", e);
            return t;
          }
        },
        5154: (e, t, r) => {
          "use strict";
          r.d(t, {
            O$: () => d,
            g$: () => g
          });
          var n = r(3550), i = r.n(n), o = r(3286), s = r(711), a = i().BN;
          const c = new s.Yd("bignumber/5.6.2"), f = {}, u = 9007199254740991;
          let h = !1;
          class d {
            constructor(e, t) {
              e !== f && c.throwError("cannot call constructor directly; use BigNumber.from", s.Yd.errors.UNSUPPORTED_OPERATION, {
                operation: "new (BigNumber)"
              }), this._hex = t, this._isBigNumber = !0, Object.freeze(this);
            }
            fromTwos(e) {
              return p(b(this).fromTwos(e));
            }
            toTwos(e) {
              return p(b(this).toTwos(e));
            }
            abs() {
              return "-" === this._hex[0] ? d.from(this._hex.substring(1)) : this;
            }
            add(e) {
              return p(b(this).add(b(e)));
            }
            sub(e) {
              return p(b(this).sub(b(e)));
            }
            div(e) {
              return d.from(e).isZero() && y("division-by-zero", "div"), p(b(this).div(b(e)));
            }
            mul(e) {
              return p(b(this).mul(b(e)));
            }
            mod(e) {
              const t = b(e);
              return t.isNeg() && y("division-by-zero", "mod"), p(b(this).umod(t));
            }
            pow(e) {
              const t = b(e);
              return t.isNeg() && y("negative-power", "pow"), p(b(this).pow(t));
            }
            and(e) {
              const t = b(e);
              return (this.isNegative() || t.isNeg()) && y("unbound-bitwise-result", "and"), p(b(this).and(t));
            }
            or(e) {
              const t = b(e);
              return (this.isNegative() || t.isNeg()) && y("unbound-bitwise-result", "or"), p(b(this).or(t));
            }
            xor(e) {
              const t = b(e);
              return (this.isNegative() || t.isNeg()) && y("unbound-bitwise-result", "xor"), p(b(this).xor(t));
            }
            mask(e) {
              return (this.isNegative() || e < 0) && y("negative-width", "mask"), p(b(this).maskn(e));
            }
            shl(e) {
              return (this.isNegative() || e < 0) && y("negative-width", "shl"), p(b(this).shln(e));
            }
            shr(e) {
              return (this.isNegative() || e < 0) && y("negative-width", "shr"), p(b(this).shrn(e));
            }
            eq(e) {
              return b(this).eq(b(e));
            }
            lt(e) {
              return b(this).lt(b(e));
            }
            lte(e) {
              return b(this).lte(b(e));
            }
            gt(e) {
              return b(this).gt(b(e));
            }
            gte(e) {
              return b(this).gte(b(e));
            }
            isNegative() {
              return "-" === this._hex[0];
            }
            isZero() {
              return b(this).isZero();
            }
            toNumber() {
              try {
                return b(this).toNumber();
              } catch (e) {
                y("overflow", "toNumber", this.toString());
              }
              return null;
            }
            toBigInt() {
              try {
                return BigInt(this.toString());
              } catch (e) {}
              return c.throwError("this platform does not support BigInt", s.Yd.errors.UNSUPPORTED_OPERATION, {
                value: this.toString()
              });
            }
            toString() {
              return arguments.length > 0 && (10 === arguments[0] ? h || (h = !0, c.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : 16 === arguments[0] ? c.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", s.Yd.errors.UNEXPECTED_ARGUMENT, {}) : c.throwError("BigNumber.toString does not accept parameters", s.Yd.errors.UNEXPECTED_ARGUMENT, {})), 
              b(this).toString(10);
            }
            toHexString() {
              return this._hex;
            }
            toJSON(e) {
              return {
                type: "BigNumber",
                hex: this.toHexString()
              };
            }
            static from(e) {
              if (e instanceof d) return e;
              if ("string" == typeof e) return e.match(/^-?0x[0-9a-f]+$/i) ? new d(f, l(e)) : e.match(/^-?[0-9]+$/) ? new d(f, l(new a(e))) : c.throwArgumentError("invalid BigNumber string", "value", e);
              if ("number" == typeof e) return e % 1 && y("underflow", "BigNumber.from", e), (e >= u || e <= -u) && y("overflow", "BigNumber.from", e), 
              d.from(String(e));
              const t = e;
              if ("bigint" == typeof t) return d.from(t.toString());
              if ((0, o._t)(t)) return d.from((0, o.Dv)(t));
              if (t) if (t.toHexString) {
                const e = t.toHexString();
                if ("string" == typeof e) return d.from(e);
              } else {
                let e = t._hex;
                if (null == e && "BigNumber" === t.type && (e = t.hex), "string" == typeof e && ((0, o.A7)(e) || "-" === e[0] && (0, o.A7)(e.substring(1)))) return d.from(e);
              }
              return c.throwArgumentError("invalid BigNumber value", "value", e);
            }
            static isBigNumber(e) {
              return !(!e || !e._isBigNumber);
            }
          }
          function l(e) {
            if ("string" != typeof e) return l(e.toString(16));
            if ("-" === e[0]) return "-" === (e = e.substring(1))[0] && c.throwArgumentError("invalid hex", "value", e), "0x00" === (e = l(e)) ? e : "-" + e;
            if ("0x" !== e.substring(0, 2) && (e = "0x" + e), "0x" === e) return "0x00";
            for (e.length % 2 && (e = "0x0" + e.substring(2)); e.length > 4 && "0x00" === e.substring(0, 4); ) e = "0x" + e.substring(4);
            return e;
          }
          function p(e) {
            return d.from(l(e));
          }
          function b(e) {
            const t = d.from(e).toHexString();
            return "-" === t[0] ? new a("-" + t.substring(3), 16) : new a(t.substring(2), 16);
          }
          function y(e, t, r) {
            const n = {
              fault: e,
              operation: t
            };
            return null != r && (n.value = r), c.throwError(e, s.Yd.errors.NUMERIC_FAULT, n);
          }
          function g(e) {
            return new a(e, 36).toString(16);
          }
        },
        3286: (e, t, r) => {
          "use strict";
          r.d(t, {
            lE: () => f,
            zo: () => u,
            xs: () => g,
            E1: () => b,
            p3: () => y,
            $m: () => m,
            Dv: () => p,
            _t: () => c,
            Zq: () => s,
            A7: () => d,
            N: () => v,
            G1: () => h
          });
          const n = new (r(711).Yd)("bytes/5.6.1");
          function i(e) {
            return !!e.toHexString;
          }
          function o(e) {
            return e.slice || (e.slice = function() {
              const t = Array.prototype.slice.call(arguments);
              return o(new Uint8Array(Array.prototype.slice.apply(e, t)));
            }), e;
          }
          function s(e) {
            return d(e) && !(e.length % 2) || c(e);
          }
          function a(e) {
            return "number" == typeof e && e == e && e % 1 == 0;
          }
          function c(e) {
            if (null == e) return !1;
            if (e.constructor === Uint8Array) return !0;
            if ("string" == typeof e) return !1;
            if (!a(e.length) || e.length < 0) return !1;
            for (let t = 0; t < e.length; t++) {
              const r = e[t];
              if (!a(r) || r < 0 || r >= 256) return !1;
            }
            return !0;
          }
          function f(e, t) {
            if (t || (t = {}), "number" == typeof e) {
              n.checkSafeUint53(e, "invalid arrayify value");
              const t = [];
              for (;e; ) t.unshift(255 & e), e = parseInt(String(e / 256));
              return 0 === t.length && t.push(0), o(new Uint8Array(t));
            }
            if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), i(e) && (e = e.toHexString()), 
            d(e)) {
              let r = e.substring(2);
              r.length % 2 && ("left" === t.hexPad ? r = "0" + r : "right" === t.hexPad ? r += "0" : n.throwArgumentError("hex data is odd-length", "value", e));
              const i = [];
              for (let e = 0; e < r.length; e += 2) i.push(parseInt(r.substring(e, e + 2), 16));
              return o(new Uint8Array(i));
            }
            return c(e) ? o(new Uint8Array(e)) : n.throwArgumentError("invalid arrayify value", "value", e);
          }
          function u(e) {
            const t = e.map((e => f(e))), r = t.reduce(((e, t) => e + t.length), 0), n = new Uint8Array(r);
            return t.reduce(((e, t) => (n.set(t, e), e + t.length)), 0), o(n);
          }
          function h(e) {
            let t = f(e);
            if (0 === t.length) return t;
            let r = 0;
            for (;r < t.length && 0 === t[r]; ) r++;
            return r && (t = t.slice(r)), t;
          }
          function d(e, t) {
            return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);
          }
          const l = "0123456789abcdef";
          function p(e, t) {
            if (t || (t = {}), "number" == typeof e) {
              n.checkSafeUint53(e, "invalid hexlify value");
              let t = "";
              for (;e; ) t = l[15 & e] + t, e = Math.floor(e / 16);
              return t.length ? (t.length % 2 && (t = "0" + t), "0x" + t) : "0x00";
            }
            if ("bigint" == typeof e) return (e = e.toString(16)).length % 2 ? "0x0" + e : "0x" + e;
            if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), i(e)) return e.toHexString();
            if (d(e)) return e.length % 2 && ("left" === t.hexPad ? e = "0x0" + e.substring(2) : "right" === t.hexPad ? e += "0" : n.throwArgumentError("hex data is odd-length", "value", e)), 
            e.toLowerCase();
            if (c(e)) {
              let t = "0x";
              for (let r = 0; r < e.length; r++) {
                let n = e[r];
                t += l[(240 & n) >> 4] + l[15 & n];
              }
              return t;
            }
            return n.throwArgumentError("invalid hexlify value", "value", e);
          }
          function b(e) {
            if ("string" != typeof e) e = p(e); else if (!d(e) || e.length % 2) return null;
            return (e.length - 2) / 2;
          }
          function y(e, t, r) {
            return "string" != typeof e ? e = p(e) : (!d(e) || e.length % 2) && n.throwArgumentError("invalid hexData", "value", e), 
            t = 2 + 2 * t, null != r ? "0x" + e.substring(t, 2 + 2 * r) : "0x" + e.substring(t);
          }
          function g(e) {
            let t = "0x";
            return e.forEach((e => {
              t += p(e).substring(2);
            })), t;
          }
          function m(e, t) {
            for ("string" != typeof e ? e = p(e) : d(e) || n.throwArgumentError("invalid hex string", "value", e), e.length > 2 * t + 2 && n.throwArgumentError("value out of range", "value", t); e.length < 2 * t + 2; ) e = "0x0" + e.substring(2);
            return e;
          }
          function v(e) {
            const t = {
              r: "0x",
              s: "0x",
              _vs: "0x",
              recoveryParam: 0,
              v: 0,
              yParityAndS: "0x",
              compact: "0x"
            };
            if (s(e)) {
              let r = f(e);
              64 === r.length ? (t.v = 27 + (r[32] >> 7), r[32] &= 127, t.r = p(r.slice(0, 32)), t.s = p(r.slice(32, 64))) : 65 === r.length ? (t.r = p(r.slice(0, 32)), 
              t.s = p(r.slice(32, 64)), t.v = r[64]) : n.throwArgumentError("invalid signature string", "signature", e), t.v < 27 && (0 === t.v || 1 === t.v ? t.v += 27 : n.throwArgumentError("signature invalid v byte", "signature", e)), 
              t.recoveryParam = 1 - t.v % 2, t.recoveryParam && (r[32] |= 128), t._vs = p(r.slice(32, 64));
            } else {
              if (t.r = e.r, t.s = e.s, t.v = e.v, t.recoveryParam = e.recoveryParam, t._vs = e._vs, null != t._vs) {
                const r = function(e, t) {
                  (e = f(e)).length > t && n.throwArgumentError("value out of range", "value", arguments[0]);
                  const r = new Uint8Array(t);
                  return r.set(e, t - e.length), o(r);
                }(f(t._vs), 32);
                t._vs = p(r);
                const i = r[0] >= 128 ? 1 : 0;
                null == t.recoveryParam ? t.recoveryParam = i : t.recoveryParam !== i && n.throwArgumentError("signature recoveryParam mismatch _vs", "signature", e), 
                r[0] &= 127;
                const s = p(r);
                null == t.s ? t.s = s : t.s !== s && n.throwArgumentError("signature v mismatch _vs", "signature", e);
              }
              if (null == t.recoveryParam) null == t.v ? n.throwArgumentError("signature missing v and recoveryParam", "signature", e) : 0 === t.v || 1 === t.v ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2; else if (null == t.v) t.v = 27 + t.recoveryParam; else {
                const r = 0 === t.v || 1 === t.v ? t.v : 1 - t.v % 2;
                t.recoveryParam !== r && n.throwArgumentError("signature recoveryParam mismatch v", "signature", e);
              }
              null != t.r && d(t.r) ? t.r = m(t.r, 32) : n.throwArgumentError("signature missing or invalid r", "signature", e), null != t.s && d(t.s) ? t.s = m(t.s, 32) : n.throwArgumentError("signature missing or invalid s", "signature", e);
              const r = f(t.s);
              r[0] >= 128 && n.throwArgumentError("signature s out of range", "signature", e), t.recoveryParam && (r[0] |= 128);
              const i = p(r);
              t._vs && (d(t._vs) || n.throwArgumentError("signature invalid _vs", "signature", e), t._vs = m(t._vs, 32)), null == t._vs ? t._vs = i : t._vs !== i && n.throwArgumentError("signature _vs mismatch v and s", "signature", e);
            }
            return t.yParityAndS = t._vs, t.compact = t.r + t.yParityAndS.substring(2), t;
          }
        },
        1046: (e, t, r) => {
          "use strict";
          r.d(t, {
            Bz: () => a,
            _Y: () => o,
            fh: () => s,
            tL: () => i
          });
          var n = r(5154);
          const i = n.O$.from(-1), o = n.O$.from(0), s = n.O$.from(1), a = n.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        },
        8197: (e, t, r) => {
          "use strict";
          r.d(t, {
            w: () => s
          });
          var n = r(1094), i = r.n(n), o = r(3286);
          function s(e) {
            return "0x" + i().keccak_256((0, o.lE)(e));
          }
        },
        711: (e, t, r) => {
          "use strict";
          r.d(t, {
            Yd: () => l
          });
          let i = !1, o = !1;
          const s = {
            debug: 1,
            default: 2,
            info: 2,
            warning: 3,
            error: 4,
            off: 5
          };
          let a = s.default, c = null;
          const f = function() {
            try {
              const e = [];
              if ([ "NFD", "NFC", "NFKD", "NFKC" ].forEach((t => {
                try {
                  if ("test" !== "test".normalize(t)) throw new Error("bad normalize");
                } catch (r) {
                  e.push(t);
                }
              })), e.length) throw new Error("missing " + e.join(", "));
              if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken implementation");
            } catch (e) {
              return e.message;
            }
            return null;
          }();
          var u, h;
          !function(e) {
            e.DEBUG = "DEBUG", e.INFO = "INFO", e.WARNING = "WARNING", e.ERROR = "ERROR", e.OFF = "OFF";
          }(u || (u = {})), function(e) {
            e.UNKNOWN_ERROR = "UNKNOWN_ERROR", e.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", e.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", 
            e.NETWORK_ERROR = "NETWORK_ERROR", e.SERVER_ERROR = "SERVER_ERROR", e.TIMEOUT = "TIMEOUT", e.BUFFER_OVERRUN = "BUFFER_OVERRUN", 
            e.NUMERIC_FAULT = "NUMERIC_FAULT", e.MISSING_NEW = "MISSING_NEW", e.INVALID_ARGUMENT = "INVALID_ARGUMENT", e.MISSING_ARGUMENT = "MISSING_ARGUMENT", 
            e.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", e.CALL_EXCEPTION = "CALL_EXCEPTION", e.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", 
            e.NONCE_EXPIRED = "NONCE_EXPIRED", e.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED", e.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT", 
            e.TRANSACTION_REPLACED = "TRANSACTION_REPLACED";
          }(h || (h = {}));
          const d = "0123456789abcdef";
          class l {
            constructor(e) {
              Object.defineProperty(this, "version", {
                enumerable: !0,
                value: e,
                writable: !1
              });
            }
            _log(e, t) {
              const r = e.toLowerCase();
              null == s[r] && this.throwArgumentError("invalid log level name", "logLevel", e), a > s[r] || n.log.apply(n, t);
            }
            debug(...e) {
              this._log(l.levels.DEBUG, e);
            }
            info(...e) {
              this._log(l.levels.INFO, e);
            }
            warn(...e) {
              this._log(l.levels.WARNING, e);
            }
            makeError(e, t, r) {
              if (o) return this.makeError("censored error", t, {});
              t || (t = l.errors.UNKNOWN_ERROR), r || (r = {});
              const n = [];
              Object.keys(r).forEach((e => {
                const t = r[e];
                try {
                  if (t instanceof Uint8Array) {
                    let r = "";
                    for (let e = 0; e < t.length; e++) r += d[t[e] >> 4], r += d[15 & t[e]];
                    n.push(e + "=Uint8Array(0x" + r + ")");
                  } else n.push(e + "=" + JSON.stringify(t));
                } catch (t) {
                  n.push(e + "=" + JSON.stringify(r[e].toString()));
                }
              })), n.push(`code=${t}`), n.push(`version=${this.version}`);
              const i = e;
              let s = "";
              switch (t) {
               case h.NUMERIC_FAULT:
                {
                  s = "NUMERIC_FAULT";
                  const t = e;
                  switch (t) {
                   case "overflow":
                   case "underflow":
                   case "division-by-zero":
                    s += "-" + t;
                    break;

                   case "negative-power":
                   case "negative-width":
                    s += "-unsupported";
                    break;

                   case "unbound-bitwise-result":
                    s += "-unbound-result";
                  }
                  break;
                }

               case h.CALL_EXCEPTION:
               case h.INSUFFICIENT_FUNDS:
               case h.MISSING_NEW:
               case h.NONCE_EXPIRED:
               case h.REPLACEMENT_UNDERPRICED:
               case h.TRANSACTION_REPLACED:
               case h.UNPREDICTABLE_GAS_LIMIT:
                s = t;
              }
              s && (e += " [ See: https://links.ethers.org/v5-errors-" + s + " ]"), n.length && (e += " (" + n.join(", ") + ")");
              const a = new Error(e);
              return a.reason = i, a.code = t, Object.keys(r).forEach((function(e) {
                a[e] = r[e];
              })), a;
            }
            throwError(e, t, r) {
              throw this.makeError(e, t, r);
            }
            throwArgumentError(e, t, r) {
              return this.throwError(e, l.errors.INVALID_ARGUMENT, {
                argument: t,
                value: r
              });
            }
            assert(e, t, r, n) {
              e || this.throwError(t, r, n);
            }
            assertArgument(e, t, r, n) {
              e || this.throwArgumentError(t, r, n);
            }
            checkNormalize(e) {
              null == e && (e = "platform missing String.prototype.normalize"), f && this.throwError("platform missing String.prototype.normalize", l.errors.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize",
                form: f
              });
            }
            checkSafeUint53(e, t) {
              "number" == typeof e && (null == t && (t = "value not safe"), (e < 0 || e >= 9007199254740991) && this.throwError(t, l.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "out-of-safe-range",
                value: e
              }), e % 1 && this.throwError(t, l.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "non-integer",
                value: e
              }));
            }
            checkArgumentCount(e, t, r) {
              r = r ? ": " + r : "", e < t && this.throwError("missing argument" + r, l.errors.MISSING_ARGUMENT, {
                count: e,
                expectedCount: t
              }), e > t && this.throwError("too many arguments" + r, l.errors.UNEXPECTED_ARGUMENT, {
                count: e,
                expectedCount: t
              });
            }
            checkNew(e, t) {
              e !== Object && null != e || this.throwError("missing new", l.errors.MISSING_NEW, {
                name: t.name
              });
            }
            checkAbstract(e, t) {
              e === t ? this.throwError("cannot instantiate abstract class " + JSON.stringify(t.name) + " directly; use a sub-class", l.errors.UNSUPPORTED_OPERATION, {
                name: e.name,
                operation: "new"
              }) : e !== Object && null != e || this.throwError("missing new", l.errors.MISSING_NEW, {
                name: t.name
              });
            }
            static globalLogger() {
              return c || (c = new l("logger/5.6.0")), c;
            }
            static setCensorship(e, t) {
              if (!e && t && this.globalLogger().throwError("cannot permanently disable censorship", l.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
              }), i) {
                if (!e) return;
                this.globalLogger().throwError("error censorship permanent", l.errors.UNSUPPORTED_OPERATION, {
                  operation: "setCensorship"
                });
              }
              o = !!e, i = !!t;
            }
            static setLogLevel(e) {
              const t = s[e.toLowerCase()];
              null != t ? a = t : l.globalLogger().warn("invalid log level - " + e);
            }
            static from(e) {
              return new l(e);
            }
          }
          l.errors = h, l.levels = u;
        },
        3587: (e, t, r) => {
          "use strict";
          r.d(t, {
            uj: () => o,
            zG: () => i
          });
          const n = new (r(711).Yd)("properties/5.6.0");
          function i(e, t, r) {
            Object.defineProperty(e, t, {
              enumerable: !0,
              value: r,
              writable: !1
            });
          }
          function o(e, t) {
            e && "object" == typeof e || n.throwArgumentError("invalid object", "object", e), Object.keys(e).forEach((r => {
              t[r] || n.throwArgumentError("invalid object key - " + r, "transaction:" + r, e);
            }));
          }
        },
        5504: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, {
            TransactionTypes: () => ue,
            accessListify: () => ve,
            computeAddress: () => be,
            parse: () => xe,
            recoverAddress: () => ye,
            serialize: () => Ee
          });
          var n = r(4594), i = r(5154), o = r(3286), s = r(1046), a = r(8197), c = r(3587), f = r(711);
          const u = new f.Yd("rlp/5.6.1");
          function h(e) {
            const t = [];
            for (;e; ) t.unshift(255 & e), e >>= 8;
            return t;
          }
          function d(e, t, r) {
            let n = 0;
            for (let i = 0; i < r; i++) n = 256 * n + e[t + i];
            return n;
          }
          function l(e) {
            if (Array.isArray(e)) {
              let t = [];
              if (e.forEach((function(e) {
                t = t.concat(l(e));
              })), t.length <= 55) return t.unshift(192 + t.length), t;
              const r = h(t.length);
              return r.unshift(247 + r.length), r.concat(t);
            }
            (0, o.Zq)(e) || u.throwArgumentError("RLP object must be BytesLike", "object", e);
            const t = Array.prototype.slice.call((0, o.lE)(e));
            if (1 === t.length && t[0] <= 127) return t;
            if (t.length <= 55) return t.unshift(128 + t.length), t;
            const r = h(t.length);
            return r.unshift(183 + r.length), r.concat(t);
          }
          function p(e) {
            return (0, o.Dv)(l(e));
          }
          function b(e, t, r, n) {
            const i = [];
            for (;r < t + 1 + n; ) {
              const o = y(e, r);
              i.push(o.result), (r += o.consumed) > t + 1 + n && u.throwError("child data too short", f.Yd.errors.BUFFER_OVERRUN, {});
            }
            return {
              consumed: 1 + n,
              result: i
            };
          }
          function y(e, t) {
            if (0 === e.length && u.throwError("data too short", f.Yd.errors.BUFFER_OVERRUN, {}), e[t] >= 248) {
              const r = e[t] - 247;
              t + 1 + r > e.length && u.throwError("data short segment too short", f.Yd.errors.BUFFER_OVERRUN, {});
              const n = d(e, t + 1, r);
              return t + 1 + r + n > e.length && u.throwError("data long segment too short", f.Yd.errors.BUFFER_OVERRUN, {}), b(e, t, t + 1 + r, r + n);
            }
            if (e[t] >= 192) {
              const r = e[t] - 192;
              return t + 1 + r > e.length && u.throwError("data array too short", f.Yd.errors.BUFFER_OVERRUN, {}), b(e, t, t + 1, r);
            }
            if (e[t] >= 184) {
              const r = e[t] - 183;
              t + 1 + r > e.length && u.throwError("data array too short", f.Yd.errors.BUFFER_OVERRUN, {});
              const n = d(e, t + 1, r);
              return t + 1 + r + n > e.length && u.throwError("data array too short", f.Yd.errors.BUFFER_OVERRUN, {}), {
                consumed: 1 + r + n,
                result: (0, o.Dv)(e.slice(t + 1 + r, t + 1 + r + n))
              };
            }
            if (e[t] >= 128) {
              const r = e[t] - 128;
              return t + 1 + r > e.length && u.throwError("data too short", f.Yd.errors.BUFFER_OVERRUN, {}), {
                consumed: 1 + r,
                result: (0, o.Dv)(e.slice(t + 1, t + 1 + r))
              };
            }
            return {
              consumed: 1,
              result: (0, o.Dv)(e[t])
            };
          }
          function g(e) {
            const t = (0, o.lE)(e), r = y(t, 0);
            return r.consumed !== t.length && u.throwArgumentError("invalid rlp data", "data", e), r.result;
          }
          var m = r(3550), v = r.n(m), w = r(3715), _ = r.n(w);
          function S(e, t, r) {
            return r = {
              path: t,
              exports: {},
              require: function(e, t) {
                return function() {
                  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                }(null == t && r.path);
              }
            }, e(r, r.exports), r.exports;
          }
          "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0 !== r.g ? r.g : "undefined" != typeof self && self;
          var E = A;
          function A(e, t) {
            if (!e) throw new Error(t || "Assertion failed");
          }
          A.equal = function(e, t, r) {
            if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
          };
          var x = S((function(e, t) {
            var r = t;
            function n(e) {
              return 1 === e.length ? "0" + e : e;
            }
            function i(e) {
              for (var t = "", r = 0; r < e.length; r++) t += n(e[r].toString(16));
              return t;
            }
            r.toArray = function(e, t) {
              if (Array.isArray(e)) return e.slice();
              if (!e) return [];
              var r = [];
              if ("string" != typeof e) {
                for (var n = 0; n < e.length; n++) r[n] = 0 | e[n];
                return r;
              }
              if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2) r.push(parseInt(e[n] + e[n + 1], 16)); else for (n = 0; n < e.length; n++) {
                var i = e.charCodeAt(n), o = i >> 8, s = 255 & i;
                o ? r.push(o, s) : r.push(s);
              }
              return r;
            }, r.zero2 = n, r.toHex = i, r.encode = function(e, t) {
              return "hex" === t ? i(e) : e;
            };
          })), k = S((function(e, t) {
            var r = t;
            r.assert = E, r.toArray = x.toArray, r.zero2 = x.zero2, r.toHex = x.toHex, r.encode = x.encode, r.getNAF = function(e, t, r) {
              var n = new Array(Math.max(e.bitLength(), r) + 1);
              n.fill(0);
              for (var i = 1 << t + 1, o = e.clone(), s = 0; s < n.length; s++) {
                var a, c = o.andln(i - 1);
                o.isOdd() ? (a = c > (i >> 1) - 1 ? (i >> 1) - c : c, o.isubn(a)) : a = 0, n[s] = a, o.iushrn(1);
              }
              return n;
            }, r.getJSF = function(e, t) {
              var r = [ [], [] ];
              e = e.clone(), t = t.clone();
              for (var n, i = 0, o = 0; e.cmpn(-i) > 0 || t.cmpn(-o) > 0; ) {
                var s, a, c = e.andln(3) + i & 3, f = t.andln(3) + o & 3;
                3 === c && (c = -1), 3 === f && (f = -1), s = 0 == (1 & c) ? 0 : 3 != (n = e.andln(7) + i & 7) && 5 !== n || 2 !== f ? c : -c, 
                r[0].push(s), a = 0 == (1 & f) ? 0 : 3 != (n = t.andln(7) + o & 7) && 5 !== n || 2 !== c ? f : -f, r[1].push(a), 2 * i === s + 1 && (i = 1 - i), 
                2 * o === a + 1 && (o = 1 - o), e.iushrn(1), t.iushrn(1);
              }
              return r;
            }, r.cachedProperty = function(e, t, r) {
              var n = "_" + t;
              e.prototype[t] = function() {
                return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
              };
            }, r.parseBytes = function(e) {
              return "string" == typeof e ? r.toArray(e, "hex") : e;
            }, r.intFromLE = function(e) {
              return new (v())(e, "hex", "le");
            };
          })), P = k.getNAF, O = k.getJSF, M = k.assert;
          function I(e, t) {
            this.type = e, this.p = new (v())(t.p, 16), this.red = t.prime ? v().red(t.prime) : v().mont(this.p), this.zero = new (v())(0).toRed(this.red), 
            this.one = new (v())(1).toRed(this.red), this.two = new (v())(2).toRed(this.red), this.n = t.n && new (v())(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), 
            this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
            var r = this.n && this.p.div(this.n);
            !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
          }
          var T = I;
          function R(e, t) {
            this.curve = e, this.type = t, this.precomputed = null;
          }
          I.prototype.point = function() {
            throw new Error("Not implemented");
          }, I.prototype.validate = function() {
            throw new Error("Not implemented");
          }, I.prototype._fixedNafMul = function(e, t) {
            M(e.precomputed);
            var r = e._getDoubles(), n = P(t, 1, this._bitLength), i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
            i /= 3;
            var o, s, a = [];
            for (o = 0; o < n.length; o += r.step) {
              s = 0;
              for (var c = o + r.step - 1; c >= o; c--) s = (s << 1) + n[c];
              a.push(s);
            }
            for (var f = this.jpoint(null, null, null), u = this.jpoint(null, null, null), h = i; h > 0; h--) {
              for (o = 0; o < a.length; o++) (s = a[o]) === h ? u = u.mixedAdd(r.points[o]) : s === -h && (u = u.mixedAdd(r.points[o].neg()));
              f = f.add(u);
            }
            return f.toP();
          }, I.prototype._wnafMul = function(e, t) {
            var r = 4, n = e._getNAFPoints(r);
            r = n.wnd;
            for (var i = n.points, o = P(t, r, this._bitLength), s = this.jpoint(null, null, null), a = o.length - 1; a >= 0; a--) {
              for (var c = 0; a >= 0 && 0 === o[a]; a--) c++;
              if (a >= 0 && c++, s = s.dblp(c), a < 0) break;
              var f = o[a];
              M(0 !== f), s = "affine" === e.type ? f > 0 ? s.mixedAdd(i[f - 1 >> 1]) : s.mixedAdd(i[-f - 1 >> 1].neg()) : f > 0 ? s.add(i[f - 1 >> 1]) : s.add(i[-f - 1 >> 1].neg());
            }
            return "affine" === e.type ? s.toP() : s;
          }, I.prototype._wnafMulAdd = function(e, t, r, n, i) {
            var o, s, a, c = this._wnafT1, f = this._wnafT2, u = this._wnafT3, h = 0;
            for (o = 0; o < n; o++) {
              var d = (a = t[o])._getNAFPoints(e);
              c[o] = d.wnd, f[o] = d.points;
            }
            for (o = n - 1; o >= 1; o -= 2) {
              var l = o - 1, p = o;
              if (1 === c[l] && 1 === c[p]) {
                var b = [ t[l], null, null, t[p] ];
                0 === t[l].y.cmp(t[p].y) ? (b[1] = t[l].add(t[p]), b[2] = t[l].toJ().mixedAdd(t[p].neg())) : 0 === t[l].y.cmp(t[p].y.redNeg()) ? (b[1] = t[l].toJ().mixedAdd(t[p]), 
                b[2] = t[l].add(t[p].neg())) : (b[1] = t[l].toJ().mixedAdd(t[p]), b[2] = t[l].toJ().mixedAdd(t[p].neg()));
                var y = [ -3, -1, -5, -7, 0, 7, 5, 1, 3 ], g = O(r[l], r[p]);
                for (h = Math.max(g[0].length, h), u[l] = new Array(h), u[p] = new Array(h), s = 0; s < h; s++) {
                  var m = 0 | g[0][s], v = 0 | g[1][s];
                  u[l][s] = y[3 * (m + 1) + (v + 1)], u[p][s] = 0, f[l] = b;
                }
              } else u[l] = P(r[l], c[l], this._bitLength), u[p] = P(r[p], c[p], this._bitLength), h = Math.max(u[l].length, h), h = Math.max(u[p].length, h);
            }
            var w = this.jpoint(null, null, null), _ = this._wnafT4;
            for (o = h; o >= 0; o--) {
              for (var S = 0; o >= 0; ) {
                var E = !0;
                for (s = 0; s < n; s++) _[s] = 0 | u[s][o], 0 !== _[s] && (E = !1);
                if (!E) break;
                S++, o--;
              }
              if (o >= 0 && S++, w = w.dblp(S), o < 0) break;
              for (s = 0; s < n; s++) {
                var A = _[s];
                0 !== A && (A > 0 ? a = f[s][A - 1 >> 1] : A < 0 && (a = f[s][-A - 1 >> 1].neg()), w = "affine" === a.type ? w.mixedAdd(a) : w.add(a));
              }
            }
            for (o = 0; o < n; o++) f[o] = null;
            return i ? w : w.toP();
          }, I.BasePoint = R, R.prototype.eq = function() {
            throw new Error("Not implemented");
          }, R.prototype.validate = function() {
            return this.curve.validate(this);
          }, I.prototype.decodePoint = function(e, t) {
            e = k.toArray(e, t);
            var r = this.p.byteLength();
            if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? M(e[e.length - 1] % 2 == 0) : 7 === e[0] && M(e[e.length - 1] % 2 == 1), 
            this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
            if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
            throw new Error("Unknown point format");
          }, R.prototype.encodeCompressed = function(e) {
            return this.encode(e, !0);
          }, R.prototype._encode = function(e) {
            var t = this.curve.p.byteLength(), r = this.getX().toArray("be", t);
            return e ? [ this.getY().isEven() ? 2 : 3 ].concat(r) : [ 4 ].concat(r, this.getY().toArray("be", t));
          }, R.prototype.encode = function(e, t) {
            return k.encode(this._encode(t), e);
          }, R.prototype.precompute = function(e) {
            if (this.precomputed) return this;
            var t = {
              doubles: null,
              naf: null,
              beta: null
            };
            return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, 
            this;
          }, R.prototype._hasDoubles = function(e) {
            if (!this.precomputed) return !1;
            var t = this.precomputed.doubles;
            return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
          }, R.prototype._getDoubles = function(e, t) {
            if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
            for (var r = [ this ], n = this, i = 0; i < t; i += e) {
              for (var o = 0; o < e; o++) n = n.dbl();
              r.push(n);
            }
            return {
              step: e,
              points: r
            };
          }, R.prototype._getNAFPoints = function(e) {
            if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
            for (var t = [ this ], r = (1 << e) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++) t[i] = t[i - 1].add(n);
            return {
              wnd: e,
              points: t
            };
          }, R.prototype._getBeta = function() {
            return null;
          }, R.prototype.dblp = function(e) {
            for (var t = this, r = 0; r < e; r++) t = t.dbl();
            return t;
          };
          var C = S((function(e) {
            "function" == typeof Object.create ? e.exports = function(e, t) {
              t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }));
            } : e.exports = function(e, t) {
              if (t) {
                e.super_ = t;
                var r = function() {};
                r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
              }
            };
          })), N = k.assert;
          function j(e) {
            T.call(this, "short", e), this.a = new (v())(e.a, 16).toRed(this.red), this.b = new (v())(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), 
            this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), 
            this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
          }
          C(j, T);
          var B = j;
          function L(e, t, r, n) {
            T.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new (v())(t, 16), 
            this.y = new (v())(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
            this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
          }
          function D(e, t, r, n) {
            T.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, 
            this.z = new (v())(0)) : (this.x = new (v())(t, 16), this.y = new (v())(r, 16), this.z = new (v())(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
            this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
          }
          j.prototype._getEndomorphism = function(e) {
            if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
              var t, r;
              if (e.beta) t = new (v())(e.beta, 16).toRed(this.red); else {
                var n = this._getEndoRoots(this.p);
                t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
              }
              if (e.lambda) r = new (v())(e.lambda, 16); else {
                var i = this._getEndoRoots(this.n);
                0 === this.g.mul(i[0]).x.cmp(this.g.x.redMul(t)) ? r = i[0] : (r = i[1], N(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));
              }
              return {
                beta: t,
                lambda: r,
                basis: e.basis ? e.basis.map((function(e) {
                  return {
                    a: new (v())(e.a, 16),
                    b: new (v())(e.b, 16)
                  };
                })) : this._getEndoBasis(r)
              };
            }
          }, j.prototype._getEndoRoots = function(e) {
            var t = e === this.p ? this.red : v().mont(e), r = new (v())(2).toRed(t).redInvm(), n = r.redNeg(), i = new (v())(3).toRed(t).redNeg().redSqrt().redMul(r);
            return [ n.redAdd(i).fromRed(), n.redSub(i).fromRed() ];
          }, j.prototype._getEndoBasis = function(e) {
            for (var t, r, n, i, o, s, a, c, f, u = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), h = e, d = this.n.clone(), l = new (v())(1), p = new (v())(0), b = new (v())(0), y = new (v())(1), g = 0; 0 !== h.cmpn(0); ) {
              var m = d.div(h);
              c = d.sub(m.mul(h)), f = b.sub(m.mul(l));
              var w = y.sub(m.mul(p));
              if (!n && c.cmp(u) < 0) t = a.neg(), r = l, n = c.neg(), i = f; else if (n && 2 == ++g) break;
              a = c, d = h, h = c, b = l, l = f, y = p, p = w;
            }
            o = c.neg(), s = f;
            var _ = n.sqr().add(i.sqr());
            return o.sqr().add(s.sqr()).cmp(_) >= 0 && (o = t, s = r), n.negative && (n = n.neg(), i = i.neg()), o.negative && (o = o.neg(), 
            s = s.neg()), [ {
              a: n,
              b: i
            }, {
              a: o,
              b: s
            } ];
          }, j.prototype._endoSplit = function(e) {
            var t = this.endo.basis, r = t[0], n = t[1], i = n.b.mul(e).divRound(this.n), o = r.b.neg().mul(e).divRound(this.n), s = i.mul(r.a), a = o.mul(n.a), c = i.mul(r.b), f = o.mul(n.b);
            return {
              k1: e.sub(s).sub(a),
              k2: c.add(f).neg()
            };
          }, j.prototype.pointFromX = function(e, t) {
            (e = new (v())(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), n = r.redSqrt();
            if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
            var i = n.fromRed().isOdd();
            return (t && !i || !t && i) && (n = n.redNeg()), this.point(e, n);
          }, j.prototype.validate = function(e) {
            if (e.inf) return !0;
            var t = e.x, r = e.y, n = this.a.redMul(t), i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);
            return 0 === r.redSqr().redISub(i).cmpn(0);
          }, j.prototype._endoWnafMulAdd = function(e, t, r) {
            for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++) {
              var s = this._endoSplit(t[o]), a = e[o], c = a._getBeta();
              s.k1.negative && (s.k1.ineg(), a = a.neg(!0)), s.k2.negative && (s.k2.ineg(), c = c.neg(!0)), n[2 * o] = a, n[2 * o + 1] = c, 
              i[2 * o] = s.k1, i[2 * o + 1] = s.k2;
            }
            for (var f = this._wnafMulAdd(1, n, i, 2 * o, r), u = 0; u < 2 * o; u++) n[u] = null, i[u] = null;
            return f;
          }, C(L, T.BasePoint), j.prototype.point = function(e, t, r) {
            return new L(this, e, t, r);
          }, j.prototype.pointFromJSON = function(e, t) {
            return L.fromJSON(this, e, t);
          }, L.prototype._getBeta = function() {
            if (this.curve.endo) {
              var e = this.precomputed;
              if (e && e.beta) return e.beta;
              var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
              if (e) {
                var r = this.curve, n = function(e) {
                  return r.point(e.x.redMul(r.endo.beta), e.y);
                };
                e.beta = t, t.precomputed = {
                  beta: null,
                  naf: e.naf && {
                    wnd: e.naf.wnd,
                    points: e.naf.points.map(n)
                  },
                  doubles: e.doubles && {
                    step: e.doubles.step,
                    points: e.doubles.points.map(n)
                  }
                };
              }
              return t;
            }
          }, L.prototype.toJSON = function() {
            return this.precomputed ? [ this.x, this.y, this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
              }
            } ] : [ this.x, this.y ];
          }, L.fromJSON = function(e, t, r) {
            "string" == typeof t && (t = JSON.parse(t));
            var n = e.point(t[0], t[1], r);
            if (!t[2]) return n;
            function i(t) {
              return e.point(t[0], t[1], r);
            }
            var o = t[2];
            return n.precomputed = {
              beta: null,
              doubles: o.doubles && {
                step: o.doubles.step,
                points: [ n ].concat(o.doubles.points.map(i))
              },
              naf: o.naf && {
                wnd: o.naf.wnd,
                points: [ n ].concat(o.naf.points.map(i))
              }
            }, n;
          }, L.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
          }, L.prototype.isInfinity = function() {
            return this.inf;
          }, L.prototype.add = function(e) {
            if (this.inf) return e;
            if (e.inf) return this;
            if (this.eq(e)) return this.dbl();
            if (this.neg().eq(e)) return this.curve.point(null, null);
            if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
            var t = this.y.redSub(e.y);
            0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
            var r = t.redSqr().redISub(this.x).redISub(e.x), n = t.redMul(this.x.redSub(r)).redISub(this.y);
            return this.curve.point(r, n);
          }, L.prototype.dbl = function() {
            if (this.inf) return this;
            var e = this.y.redAdd(this.y);
            if (0 === e.cmpn(0)) return this.curve.point(null, null);
            var t = this.curve.a, r = this.x.redSqr(), n = e.redInvm(), i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n), o = i.redSqr().redISub(this.x.redAdd(this.x)), s = i.redMul(this.x.redSub(o)).redISub(this.y);
            return this.curve.point(o, s);
          }, L.prototype.getX = function() {
            return this.x.fromRed();
          }, L.prototype.getY = function() {
            return this.y.fromRed();
          }, L.prototype.mul = function(e) {
            return e = new (v())(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([ this ], [ e ]) : this.curve._wnafMul(this, e);
          }, L.prototype.mulAdd = function(e, t, r) {
            var n = [ this, t ], i = [ e, r ];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
          }, L.prototype.jmulAdd = function(e, t, r) {
            var n = [ this, t ], i = [ e, r ];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
          }, L.prototype.eq = function(e) {
            return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
          }, L.prototype.neg = function(e) {
            if (this.inf) return this;
            var t = this.curve.point(this.x, this.y.redNeg());
            if (e && this.precomputed) {
              var r = this.precomputed, n = function(e) {
                return e.neg();
              };
              t.precomputed = {
                naf: r.naf && {
                  wnd: r.naf.wnd,
                  points: r.naf.points.map(n)
                },
                doubles: r.doubles && {
                  step: r.doubles.step,
                  points: r.doubles.points.map(n)
                }
              };
            }
            return t;
          }, L.prototype.toJ = function() {
            return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
          }, C(D, T.BasePoint), j.prototype.jpoint = function(e, t, r) {
            return new D(this, e, t, r);
          }, D.prototype.toP = function() {
            if (this.isInfinity()) return this.curve.point(null, null);
            var e = this.z.redInvm(), t = e.redSqr(), r = this.x.redMul(t), n = this.y.redMul(t).redMul(e);
            return this.curve.point(r, n);
          }, D.prototype.neg = function() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          }, D.prototype.add = function(e) {
            if (this.isInfinity()) return e;
            if (e.isInfinity()) return this;
            var t = e.z.redSqr(), r = this.z.redSqr(), n = this.x.redMul(t), i = e.x.redMul(r), o = this.y.redMul(t.redMul(e.z)), s = e.y.redMul(r.redMul(this.z)), a = n.redSub(i), c = o.redSub(s);
            if (0 === a.cmpn(0)) return 0 !== c.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var f = a.redSqr(), u = f.redMul(a), h = n.redMul(f), d = c.redSqr().redIAdd(u).redISub(h).redISub(h), l = c.redMul(h.redISub(d)).redISub(o.redMul(u)), p = this.z.redMul(e.z).redMul(a);
            return this.curve.jpoint(d, l, p);
          }, D.prototype.mixedAdd = function(e) {
            if (this.isInfinity()) return e.toJ();
            if (e.isInfinity()) return this;
            var t = this.z.redSqr(), r = this.x, n = e.x.redMul(t), i = this.y, o = e.y.redMul(t).redMul(this.z), s = r.redSub(n), a = i.redSub(o);
            if (0 === s.cmpn(0)) return 0 !== a.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var c = s.redSqr(), f = c.redMul(s), u = r.redMul(c), h = a.redSqr().redIAdd(f).redISub(u).redISub(u), d = a.redMul(u.redISub(h)).redISub(i.redMul(f)), l = this.z.redMul(s);
            return this.curve.jpoint(h, d, l);
          }, D.prototype.dblp = function(e) {
            if (0 === e) return this;
            if (this.isInfinity()) return this;
            if (!e) return this.dbl();
            var t;
            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;
              for (t = 0; t < e; t++) r = r.dbl();
              return r;
            }
            var n = this.curve.a, i = this.curve.tinv, o = this.x, s = this.y, a = this.z, c = a.redSqr().redSqr(), f = s.redAdd(s);
            for (t = 0; t < e; t++) {
              var u = o.redSqr(), h = f.redSqr(), d = h.redSqr(), l = u.redAdd(u).redIAdd(u).redIAdd(n.redMul(c)), p = o.redMul(h), b = l.redSqr().redISub(p.redAdd(p)), y = p.redISub(b), g = l.redMul(y);
              g = g.redIAdd(g).redISub(d);
              var m = f.redMul(a);
              t + 1 < e && (c = c.redMul(d)), o = b, a = m, f = g;
            }
            return this.curve.jpoint(o, f.redMul(i), a);
          }, D.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
          }, D.prototype._zeroDbl = function() {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              s = s.redIAdd(s);
              var a = n.redAdd(n).redIAdd(n), c = a.redSqr().redISub(s).redISub(s), f = o.redIAdd(o);
              f = (f = f.redIAdd(f)).redIAdd(f), e = c, t = a.redMul(s.redISub(c)).redISub(f), r = this.y.redAdd(this.y);
            } else {
              var u = this.x.redSqr(), h = this.y.redSqr(), d = h.redSqr(), l = this.x.redAdd(h).redSqr().redISub(u).redISub(d);
              l = l.redIAdd(l);
              var p = u.redAdd(u).redIAdd(u), b = p.redSqr(), y = d.redIAdd(d);
              y = (y = y.redIAdd(y)).redIAdd(y), e = b.redISub(l).redISub(l), t = p.redMul(l.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);
            }
            return this.curve.jpoint(e, t, r);
          }, D.prototype._threeDbl = function() {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              s = s.redIAdd(s);
              var a = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), c = a.redSqr().redISub(s).redISub(s);
              e = c;
              var f = o.redIAdd(o);
              f = (f = f.redIAdd(f)).redIAdd(f), t = a.redMul(s.redISub(c)).redISub(f), r = this.y.redAdd(this.y);
            } else {
              var u = this.z.redSqr(), h = this.y.redSqr(), d = this.x.redMul(h), l = this.x.redSub(u).redMul(this.x.redAdd(u));
              l = l.redAdd(l).redIAdd(l);
              var p = d.redIAdd(d), b = (p = p.redIAdd(p)).redAdd(p);
              e = l.redSqr().redISub(b), r = this.y.redAdd(this.z).redSqr().redISub(h).redISub(u);
              var y = h.redSqr();
              y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = l.redMul(p.redISub(e)).redISub(y);
            }
            return this.curve.jpoint(e, t, r);
          }, D.prototype._dbl = function() {
            var e = this.curve.a, t = this.x, r = this.y, n = this.z, i = n.redSqr().redSqr(), o = t.redSqr(), s = r.redSqr(), a = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)), c = t.redAdd(t), f = (c = c.redIAdd(c)).redMul(s), u = a.redSqr().redISub(f.redAdd(f)), h = f.redISub(u), d = s.redSqr();
            d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
            var l = a.redMul(h).redISub(d), p = r.redAdd(r).redMul(n);
            return this.curve.jpoint(u, l, p);
          }, D.prototype.trpl = function() {
            if (!this.curve.zeroA) return this.dbl().add(this);
            var e = this.x.redSqr(), t = this.y.redSqr(), r = this.z.redSqr(), n = t.redSqr(), i = e.redAdd(e).redIAdd(e), o = i.redSqr(), s = this.x.redAdd(t).redSqr().redISub(e).redISub(n), a = (s = (s = (s = s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(), c = n.redIAdd(n);
            c = (c = (c = c.redIAdd(c)).redIAdd(c)).redIAdd(c);
            var f = i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(c), u = t.redMul(f);
            u = (u = u.redIAdd(u)).redIAdd(u);
            var h = this.x.redMul(a).redISub(u);
            h = (h = h.redIAdd(h)).redIAdd(h);
            var d = this.y.redMul(f.redMul(c.redISub(f)).redISub(s.redMul(a)));
            d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
            var l = this.z.redAdd(s).redSqr().redISub(r).redISub(a);
            return this.curve.jpoint(h, d, l);
          }, D.prototype.mul = function(e, t) {
            return e = new (v())(e, t), this.curve._wnafMul(this, e);
          }, D.prototype.eq = function(e) {
            if ("affine" === e.type) return this.eq(e.toJ());
            if (this === e) return !0;
            var t = this.z.redSqr(), r = e.z.redSqr();
            if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
            var n = t.redMul(this.z), i = r.redMul(e.z);
            return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);
          }, D.prototype.eqXToP = function(e) {
            var t = this.z.redSqr(), r = e.toRed(this.curve.red).redMul(t);
            if (0 === this.x.cmp(r)) return !0;
            for (var n = e.clone(), i = this.curve.redN.redMul(t); ;) {
              if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
              if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
            }
          }, D.prototype.inspect = function() {
            return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
          }, D.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0);
          };
          var U = S((function(e, t) {
            var r = t;
            r.base = T, r.short = B, r.mont = null, r.edwards = null;
          })), q = S((function(e, t) {
            var r, n = t, i = k.assert;
            function o(e) {
              "short" === e.type ? this.curve = new U.short(e) : "edwards" === e.type ? this.curve = new U.edwards(e) : this.curve = new U.mont(e), 
              this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, i(this.g.validate(), "Invalid curve"), i(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
            }
            function s(e, t) {
              Object.defineProperty(n, e, {
                configurable: !0,
                enumerable: !0,
                get: function() {
                  var r = new o(t);
                  return Object.defineProperty(n, e, {
                    configurable: !0,
                    enumerable: !0,
                    value: r
                  }), r;
                }
              });
            }
            n.PresetCurve = o, s("p192", {
              type: "short",
              prime: "p192",
              p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
              a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
              b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
              n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
              hash: _().sha256,
              gRed: !1,
              g: [ "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811" ]
            }), s("p224", {
              type: "short",
              prime: "p224",
              p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
              a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
              b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
              n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
              hash: _().sha256,
              gRed: !1,
              g: [ "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34" ]
            }), s("p256", {
              type: "short",
              prime: null,
              p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
              a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
              b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
              n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
              hash: _().sha256,
              gRed: !1,
              g: [ "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5" ]
            }), s("p384", {
              type: "short",
              prime: null,
              p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
              a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
              b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
              n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
              hash: _().sha384,
              gRed: !1,
              g: [ "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f" ]
            }), s("p521", {
              type: "short",
              prime: null,
              p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
              a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
              b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
              n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
              hash: _().sha512,
              gRed: !1,
              g: [ "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650" ]
            }), s("curve25519", {
              type: "mont",
              prime: "p25519",
              p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
              a: "76d06",
              b: "1",
              n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
              hash: _().sha256,
              gRed: !1,
              g: [ "9" ]
            }), s("ed25519", {
              type: "edwards",
              prime: "p25519",
              p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
              a: "-1",
              c: "1",
              d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
              n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
              hash: _().sha256,
              gRed: !1,
              g: [ "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658" ]
            });
            try {
              r = null.crash();
            } catch (e) {
              r = void 0;
            }
            s("secp256k1", {
              type: "short",
              prime: "k256",
              p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
              a: "0",
              b: "7",
              n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
              h: "1",
              hash: _().sha256,
              beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
              lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
              basis: [ {
                a: "3086d221a7d46bcde86c90e49284eb15",
                b: "-e4437ed6010e88286f547fa90abfe4c3"
              }, {
                a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                b: "3086d221a7d46bcde86c90e49284eb15"
              } ],
              gRed: !1,
              g: [ "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", r ]
            });
          }));
          function F(e) {
            if (!(this instanceof F)) return new F(e);
            this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, 
            this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
            var t = x.toArray(e.entropy, e.entropyEnc || "hex"), r = x.toArray(e.nonce, e.nonceEnc || "hex"), n = x.toArray(e.pers, e.persEnc || "hex");
            E(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, n);
          }
          var H = F;
          F.prototype._init = function(e, t, r) {
            var n = e.concat(t).concat(r);
            this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) this.K[i] = 0, this.V[i] = 1;
            this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
          }, F.prototype._hmac = function() {
            return new (_().hmac)(this.hash, this.K);
          }, F.prototype._update = function(e) {
            var t = this._hmac().update(this.V).update([ 0 ]);
            e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([ 1 ]).update(e).digest(), 
            this.V = this._hmac().update(this.V).digest());
          }, F.prototype.reseed = function(e, t, r, n) {
            "string" != typeof t && (n = r, r = t, t = null), e = x.toArray(e, t), r = x.toArray(r, n), E(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), 
            this._update(e.concat(r || [])), this._reseed = 1;
          }, F.prototype.generate = function(e, t, r, n) {
            if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
            "string" != typeof t && (n = r, r = t, t = null), r && (r = x.toArray(r, n || "hex"), this._update(r));
            for (var i = []; i.length < e; ) this.V = this._hmac().update(this.V).digest(), i = i.concat(this.V);
            var o = i.slice(0, e);
            return this._update(r), this._reseed++, x.encode(o, t);
          };
          var z = k.assert;
          function K(e, t) {
            this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
          }
          var V = K;
          K.fromPublic = function(e, t, r) {
            return t instanceof K ? t : new K(e, {
              pub: t,
              pubEnc: r
            });
          }, K.fromPrivate = function(e, t, r) {
            return t instanceof K ? t : new K(e, {
              priv: t,
              privEnc: r
            });
          }, K.prototype.validate = function() {
            var e = this.getPublic();
            return e.isInfinity() ? {
              result: !1,
              reason: "Invalid public key"
            } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
              result: !0,
              reason: null
            } : {
              result: !1,
              reason: "Public key * N != O"
            } : {
              result: !1,
              reason: "Public key is not a point"
            };
          }, K.prototype.getPublic = function(e, t) {
            return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
          }, K.prototype.getPrivate = function(e) {
            return "hex" === e ? this.priv.toString(16, 2) : this.priv;
          }, K.prototype._importPrivate = function(e, t) {
            this.priv = new (v())(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
          }, K.prototype._importPublic = function(e, t) {
            if (e.x || e.y) return "mont" === this.ec.curve.type ? z(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || z(e.x && e.y, "Need both x and y coordinate"), 
            void (this.pub = this.ec.curve.point(e.x, e.y));
            this.pub = this.ec.curve.decodePoint(e, t);
          }, K.prototype.derive = function(e) {
            return e.validate() || z(e.validate(), "public point not validated"), e.mul(this.priv).getX();
          }, K.prototype.sign = function(e, t, r) {
            return this.ec.sign(e, this, t, r);
          }, K.prototype.verify = function(e, t) {
            return this.ec.verify(e, t, this);
          }, K.prototype.inspect = function() {
            return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
          };
          var G = k.assert;
          function W(e, t) {
            if (e instanceof W) return e;
            this._importDER(e, t) || (G(e.r && e.s, "Signature without r or s"), this.r = new (v())(e.r, 16), this.s = new (v())(e.s, 16), 
            void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
          }
          var X = W;
          function Y() {
            this.place = 0;
          }
          function J(e, t) {
            var r = e[t.place++];
            if (!(128 & r)) return r;
            var n = 15 & r;
            if (0 === n || n > 4) return !1;
            for (var i = 0, o = 0, s = t.place; o < n; o++, s++) i <<= 8, i |= e[s], i >>>= 0;
            return !(i <= 127) && (t.place = s, i);
          }
          function $(e) {
            for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r; ) t++;
            return 0 === t ? e : e.slice(t);
          }
          function Z(e, t) {
            if (t < 128) e.push(t); else {
              var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
              for (e.push(128 | r); --r; ) e.push(t >>> (r << 3) & 255);
              e.push(t);
            }
          }
          W.prototype._importDER = function(e, t) {
            e = k.toArray(e, t);
            var r = new Y;
            if (48 !== e[r.place++]) return !1;
            var n = J(e, r);
            if (!1 === n) return !1;
            if (n + r.place !== e.length) return !1;
            if (2 !== e[r.place++]) return !1;
            var i = J(e, r);
            if (!1 === i) return !1;
            var o = e.slice(r.place, i + r.place);
            if (r.place += i, 2 !== e[r.place++]) return !1;
            var s = J(e, r);
            if (!1 === s) return !1;
            if (e.length !== s + r.place) return !1;
            var a = e.slice(r.place, s + r.place);
            if (0 === o[0]) {
              if (!(128 & o[1])) return !1;
              o = o.slice(1);
            }
            if (0 === a[0]) {
              if (!(128 & a[1])) return !1;
              a = a.slice(1);
            }
            return this.r = new (v())(o), this.s = new (v())(a), this.recoveryParam = null, !0;
          }, W.prototype.toDER = function(e) {
            var t = this.r.toArray(), r = this.s.toArray();
            for (128 & t[0] && (t = [ 0 ].concat(t)), 128 & r[0] && (r = [ 0 ].concat(r)), t = $(t), r = $(r); !(r[0] || 128 & r[1]); ) r = r.slice(1);
            var n = [ 2 ];
            Z(n, t.length), (n = n.concat(t)).push(2), Z(n, r.length);
            var i = n.concat(r), o = [ 48 ];
            return Z(o, i.length), o = o.concat(i), k.encode(o, e);
          };
          var Q = function() {
            throw new Error("unsupported");
          }, ee = k.assert;
          function te(e) {
            if (!(this instanceof te)) return new te(e);
            "string" == typeof e && (ee(Object.prototype.hasOwnProperty.call(q, e), "Unknown curve " + e), e = q[e]), e instanceof q.PresetCurve && (e = {
              curve: e
            }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, 
            this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
          }
          var re = te;
          te.prototype.keyPair = function(e) {
            return new V(this, e);
          }, te.prototype.keyFromPrivate = function(e, t) {
            return V.fromPrivate(this, e, t);
          }, te.prototype.keyFromPublic = function(e, t) {
            return V.fromPublic(this, e, t);
          }, te.prototype.genKeyPair = function(e) {
            e || (e = {});
            for (var t = new H({
              hash: this.hash,
              pers: e.pers,
              persEnc: e.persEnc || "utf8",
              entropy: e.entropy || Q(this.hash.hmacStrength),
              entropyEnc: e.entropy && e.entropyEnc || "utf8",
              nonce: this.n.toArray()
            }), r = this.n.byteLength(), n = this.n.sub(new (v())(2)); ;) {
              var i = new (v())(t.generate(r));
              if (!(i.cmp(n) > 0)) return i.iaddn(1), this.keyFromPrivate(i);
            }
          }, te.prototype._truncateToN = function(e, t) {
            var r = 8 * e.byteLength() - this.n.bitLength();
            return r > 0 && (e = e.ushrn(r)), !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
          }, te.prototype.sign = function(e, t, r, n) {
            "object" == typeof r && (n = r, r = null), n || (n = {}), t = this.keyFromPrivate(t, r), e = this._truncateToN(new (v())(e, 16));
            for (var i = this.n.byteLength(), o = t.getPrivate().toArray("be", i), s = e.toArray("be", i), a = new H({
              hash: this.hash,
              entropy: o,
              nonce: s,
              pers: n.pers,
              persEnc: n.persEnc || "utf8"
            }), c = this.n.sub(new (v())(1)), f = 0; ;f++) {
              var u = n.k ? n.k(f) : new (v())(a.generate(this.n.byteLength()));
              if (!((u = this._truncateToN(u, !0)).cmpn(1) <= 0 || u.cmp(c) >= 0)) {
                var h = this.g.mul(u);
                if (!h.isInfinity()) {
                  var d = h.getX(), l = d.umod(this.n);
                  if (0 !== l.cmpn(0)) {
                    var p = u.invm(this.n).mul(l.mul(t.getPrivate()).iadd(e));
                    if (0 !== (p = p.umod(this.n)).cmpn(0)) {
                      var b = (h.getY().isOdd() ? 1 : 0) | (0 !== d.cmp(l) ? 2 : 0);
                      return n.canonical && p.cmp(this.nh) > 0 && (p = this.n.sub(p), b ^= 1), new X({
                        r: l,
                        s: p,
                        recoveryParam: b
                      });
                    }
                  }
                }
              }
            }
          }, te.prototype.verify = function(e, t, r, n) {
            e = this._truncateToN(new (v())(e, 16)), r = this.keyFromPublic(r, n);
            var i = (t = new X(t, "hex")).r, o = t.s;
            if (i.cmpn(1) < 0 || i.cmp(this.n) >= 0) return !1;
            if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
            var s, a = o.invm(this.n), c = a.mul(e).umod(this.n), f = a.mul(i).umod(this.n);
            return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(c, r.getPublic(), f)).isInfinity() && s.eqXToP(i) : !(s = this.g.mulAdd(c, r.getPublic(), f)).isInfinity() && 0 === s.getX().umod(this.n).cmp(i);
          }, te.prototype.recoverPubKey = function(e, t, r, n) {
            ee((3 & r) === r, "The recovery param is more than two bits"), t = new X(t, n);
            var i = this.n, o = new (v())(e), s = t.r, a = t.s, c = 1 & r, f = r >> 1;
            if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && f) throw new Error("Unable to find sencond key candinate");
            s = f ? this.curve.pointFromX(s.add(this.curve.n), c) : this.curve.pointFromX(s, c);
            var u = t.r.invm(i), h = i.sub(o).mul(u).umod(i), d = a.mul(u).umod(i);
            return this.g.mulAdd(h, s, d);
          }, te.prototype.getKeyRecoveryParam = function(e, t, r, n) {
            if (null !== (t = new X(t, n)).recoveryParam) return t.recoveryParam;
            for (var i = 0; i < 4; i++) {
              var o;
              try {
                o = this.recoverPubKey(e, t, i);
              } catch (e) {
                continue;
              }
              if (o.eq(r)) return i;
            }
            throw new Error("Unable to find valid recovery factor");
          };
          var ne = S((function(e, t) {
            var r = t;
            r.version = "6.5.4", r.utils = k, r.rand = function() {
              throw new Error("unsupported");
            }, r.curve = U, r.curves = q, r.ec = re, r.eddsa = null;
          })).ec;
          const ie = new f.Yd("signing-key/5.6.2");
          let oe = null;
          function se() {
            return oe || (oe = new ne("secp256k1")), oe;
          }
          class ae {
            constructor(e) {
              (0, c.zG)(this, "curve", "secp256k1"), (0, c.zG)(this, "privateKey", (0, o.Dv)(e)), 32 !== (0, o.E1)(this.privateKey) && ie.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
              const t = se().keyFromPrivate((0, o.lE)(this.privateKey));
              (0, c.zG)(this, "publicKey", "0x" + t.getPublic(!1, "hex")), (0, c.zG)(this, "compressedPublicKey", "0x" + t.getPublic(!0, "hex")), 
              (0, c.zG)(this, "_isSigningKey", !0);
            }
            _addPoint(e) {
              const t = se().keyFromPublic((0, o.lE)(this.publicKey)), r = se().keyFromPublic((0, o.lE)(e));
              return "0x" + t.pub.add(r.pub).encodeCompressed("hex");
            }
            signDigest(e) {
              const t = se().keyFromPrivate((0, o.lE)(this.privateKey)), r = (0, o.lE)(e);
              32 !== r.length && ie.throwArgumentError("bad digest length", "digest", e);
              const n = t.sign(r, {
                canonical: !0
              });
              return (0, o.N)({
                recoveryParam: n.recoveryParam,
                r: (0, o.$m)("0x" + n.r.toString(16), 32),
                s: (0, o.$m)("0x" + n.s.toString(16), 32)
              });
            }
            computeSharedSecret(e) {
              const t = se().keyFromPrivate((0, o.lE)(this.privateKey)), r = se().keyFromPublic((0, o.lE)(ce(e)));
              return (0, o.$m)("0x" + t.derive(r.getPublic()).toString(16), 32);
            }
            static isSigningKey(e) {
              return !(!e || !e._isSigningKey);
            }
          }
          function ce(e, t) {
            const r = (0, o.lE)(e);
            if (32 === r.length) {
              const e = new ae(r);
              return t ? "0x" + se().keyFromPrivate(r).getPublic(!0, "hex") : e.publicKey;
            }
            return 33 === r.length ? t ? (0, o.Dv)(r) : "0x" + se().keyFromPublic(r).getPublic(!1, "hex") : 65 === r.length ? t ? "0x" + se().keyFromPublic(r).getPublic(!0, "hex") : (0, 
            o.Dv)(r) : ie.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
          }
          const fe = new f.Yd("transactions/5.6.2");
          var ue;
          function he(e) {
            return "0x" === e ? null : (0, n.Kn)(e);
          }
          function de(e) {
            return "0x" === e ? s._Y : i.O$.from(e);
          }
          !function(e) {
            e[e.legacy = 0] = "legacy", e[e.eip2930 = 1] = "eip2930", e[e.eip1559 = 2] = "eip1559";
          }(ue || (ue = {}));
          const le = [ {
            name: "nonce",
            maxLength: 32,
            numeric: !0
          }, {
            name: "gasPrice",
            maxLength: 32,
            numeric: !0
          }, {
            name: "gasLimit",
            maxLength: 32,
            numeric: !0
          }, {
            name: "to",
            length: 20
          }, {
            name: "value",
            maxLength: 32,
            numeric: !0
          }, {
            name: "data"
          } ], pe = {
            chainId: !0,
            data: !0,
            gasLimit: !0,
            gasPrice: !0,
            nonce: !0,
            to: !0,
            type: !0,
            value: !0
          };
          function be(e) {
            const t = ce(e);
            return (0, n.Kn)((0, o.p3)((0, a.w)((0, o.p3)(t, 1)), 12));
          }
          function ye(e, t) {
            return be(function(e, t) {
              const r = (0, o.N)(t), n = {
                r: (0, o.lE)(r.r),
                s: (0, o.lE)(r.s)
              };
              return "0x" + se().recoverPubKey((0, o.lE)(e), n, r.recoveryParam).encode("hex", !1);
            }((0, o.lE)(e), t));
          }
          function ge(e, t) {
            const r = (0, o.G1)(i.O$.from(e).toHexString());
            return r.length > 32 && fe.throwArgumentError("invalid length for " + t, "transaction:" + t, e), r;
          }
          function me(e, t) {
            return {
              address: (0, n.Kn)(e),
              storageKeys: (t || []).map(((t, r) => (32 !== (0, o.E1)(t) && fe.throwArgumentError("invalid access list storageKey", `accessList[${e}:${r}]`, t), 
              t.toLowerCase())))
            };
          }
          function ve(e) {
            if (Array.isArray(e)) return e.map(((e, t) => Array.isArray(e) ? (e.length > 2 && fe.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${t}]`, e), 
            me(e[0], e[1])) : me(e.address, e.storageKeys)));
            const t = Object.keys(e).map((t => {
              const r = e[t].reduce(((e, t) => (e[t] = !0, e)), {});
              return me(t, Object.keys(r).sort());
            }));
            return t.sort(((e, t) => e.address.localeCompare(t.address))), t;
          }
          function we(e) {
            return ve(e).map((e => [ e.address, e.storageKeys ]));
          }
          function _e(e, t) {
            if (null != e.gasPrice) {
              const t = i.O$.from(e.gasPrice), r = i.O$.from(e.maxFeePerGas || 0);
              t.eq(r) || fe.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                gasPrice: t,
                maxFeePerGas: r
              });
            }
            const r = [ ge(e.chainId || 0, "chainId"), ge(e.nonce || 0, "nonce"), ge(e.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), ge(e.maxFeePerGas || 0, "maxFeePerGas"), ge(e.gasLimit || 0, "gasLimit"), null != e.to ? (0, 
            n.Kn)(e.to) : "0x", ge(e.value || 0, "value"), e.data || "0x", we(e.accessList || []) ];
            if (t) {
              const e = (0, o.N)(t);
              r.push(ge(e.recoveryParam, "recoveryParam")), r.push((0, o.G1)(e.r)), r.push((0, o.G1)(e.s));
            }
            return (0, o.xs)([ "0x02", p(r) ]);
          }
          function Se(e, t) {
            const r = [ ge(e.chainId || 0, "chainId"), ge(e.nonce || 0, "nonce"), ge(e.gasPrice || 0, "gasPrice"), ge(e.gasLimit || 0, "gasLimit"), null != e.to ? (0, 
            n.Kn)(e.to) : "0x", ge(e.value || 0, "value"), e.data || "0x", we(e.accessList || []) ];
            if (t) {
              const e = (0, o.N)(t);
              r.push(ge(e.recoveryParam, "recoveryParam")), r.push((0, o.G1)(e.r)), r.push((0, o.G1)(e.s));
            }
            return (0, o.xs)([ "0x01", p(r) ]);
          }
          function Ee(e, t) {
            if (null == e.type || 0 === e.type) return null != e.accessList && fe.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", e), 
            function(e, t) {
              (0, c.uj)(e, pe);
              const r = [];
              le.forEach((function(t) {
                let n = e[t.name] || [];
                const i = {};
                t.numeric && (i.hexPad = "left"), n = (0, o.lE)((0, o.Dv)(n, i)), t.length && n.length !== t.length && n.length > 0 && fe.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, n), 
                t.maxLength && (n = (0, o.G1)(n), n.length > t.maxLength && fe.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, n)), 
                r.push((0, o.Dv)(n));
              }));
              let n = 0;
              if (null != e.chainId ? (n = e.chainId, "number" != typeof n && fe.throwArgumentError("invalid transaction.chainId", "transaction", e)) : t && !(0, 
              o.Zq)(t) && t.v > 28 && (n = Math.floor((t.v - 35) / 2)), 0 !== n && (r.push((0, o.Dv)(n)), r.push("0x"), r.push("0x")), 
              !t) return p(r);
              const i = (0, o.N)(t);
              let s = 27 + i.recoveryParam;
              return 0 !== n ? (r.pop(), r.pop(), r.pop(), s += 2 * n + 8, i.v > 28 && i.v !== s && fe.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t)) : i.v !== s && fe.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t), 
              r.push((0, o.Dv)(s)), r.push((0, o.G1)((0, o.lE)(i.r))), r.push((0, o.G1)((0, o.lE)(i.s))), p(r);
            }(e, t);
            switch (e.type) {
             case 1:
              return Se(e, t);

             case 2:
              return _e(e, t);
            }
            return fe.throwError(`unsupported transaction type: ${e.type}`, f.Yd.errors.UNSUPPORTED_OPERATION, {
              operation: "serializeTransaction",
              transactionType: e.type
            });
          }
          function Ae(e, t, r) {
            try {
              const r = de(t[0]).toNumber();
              if (0 !== r && 1 !== r) throw new Error("bad recid");
              e.v = r;
            } catch (e) {
              fe.throwArgumentError("invalid v for transaction type: 1", "v", t[0]);
            }
            e.r = (0, o.$m)(t[1], 32), e.s = (0, o.$m)(t[2], 32);
            try {
              const t = (0, a.w)(r(e));
              e.from = ye(t, {
                r: e.r,
                s: e.s,
                recoveryParam: e.v
              });
            } catch (e) {}
          }
          function xe(e) {
            const t = (0, o.lE)(e);
            if (t[0] > 127) return function(e) {
              const t = g(e);
              9 !== t.length && 6 !== t.length && fe.throwArgumentError("invalid raw transaction", "rawTransaction", e);
              const r = {
                nonce: de(t[0]).toNumber(),
                gasPrice: de(t[1]),
                gasLimit: de(t[2]),
                to: he(t[3]),
                value: de(t[4]),
                data: t[5],
                chainId: 0
              };
              if (6 === t.length) return r;
              try {
                r.v = i.O$.from(t[6]).toNumber();
              } catch (e) {
                return r;
              }
              if (r.r = (0, o.$m)(t[7], 32), r.s = (0, o.$m)(t[8], 32), i.O$.from(r.r).isZero() && i.O$.from(r.s).isZero()) r.chainId = r.v, 
              r.v = 0; else {
                r.chainId = Math.floor((r.v - 35) / 2), r.chainId < 0 && (r.chainId = 0);
                let n = r.v - 27;
                const i = t.slice(0, 6);
                0 !== r.chainId && (i.push((0, o.Dv)(r.chainId)), i.push("0x"), i.push("0x"), n -= 2 * r.chainId + 8);
                const s = (0, a.w)(p(i));
                try {
                  r.from = ye(s, {
                    r: (0, o.Dv)(r.r),
                    s: (0, o.Dv)(r.s),
                    recoveryParam: n
                  });
                } catch (e) {}
                r.hash = (0, a.w)(e);
              }
              return r.type = null, r;
            }(t);
            switch (t[0]) {
             case 1:
              return function(e) {
                const t = g(e.slice(1));
                8 !== t.length && 11 !== t.length && fe.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, 
                o.Dv)(e));
                const r = {
                  type: 1,
                  chainId: de(t[0]).toNumber(),
                  nonce: de(t[1]).toNumber(),
                  gasPrice: de(t[2]),
                  gasLimit: de(t[3]),
                  to: he(t[4]),
                  value: de(t[5]),
                  data: t[6],
                  accessList: ve(t[7])
                };
                return 8 === t.length || (r.hash = (0, a.w)(e), Ae(r, t.slice(8), Se)), r;
              }(t);

             case 2:
              return function(e) {
                const t = g(e.slice(1));
                9 !== t.length && 12 !== t.length && fe.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, 
                o.Dv)(e));
                const r = de(t[2]), n = de(t[3]), i = {
                  type: 2,
                  chainId: de(t[0]).toNumber(),
                  nonce: de(t[1]).toNumber(),
                  maxPriorityFeePerGas: r,
                  maxFeePerGas: n,
                  gasPrice: null,
                  gasLimit: de(t[4]),
                  to: he(t[5]),
                  value: de(t[6]),
                  data: t[7],
                  accessList: ve(t[8])
                };
                return 9 === t.length || (i.hash = (0, a.w)(e), Ae(i, t.slice(9), _e)), i;
              }(t);
            }
            return fe.throwError(`unsupported transaction type: ${t[0]}`, f.Yd.errors.UNSUPPORTED_OPERATION, {
              operation: "parseTransaction",
              transactionType: t[0]
            });
          }
        },
        5508: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ComposedStore = void 0;
          const n = r(8877);
          class i extends n.ObservableStore {
            constructor(e) {
              super({}), this._children = e || {}, Object.keys(this._children).forEach((e => {
                const t = this._children[e];
                this._addChild(e, t);
              }));
            }
            _addChild(e, t) {
              const r = t => {
                const r = this.getState();
                r[e] = t, this.putState(r);
              };
              t.subscribe(r), r(t.getState());
            }
          }
          t.ComposedStore = i;
        },
        401: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.MergedStore = void 0;
          const n = r(8877);
          class i extends n.ObservableStore {
            constructor(e = []) {
              super({}), this._children = e, e.forEach((e => this._addChild(e))), this._updateWholeState();
            }
            _addChild(e) {
              e.subscribe((() => this._updateWholeState()));
            }
            _updateWholeState() {
              const e = this._children.map((e => e.getState())), t = Object.assign({}, ...e);
              this.putState(t);
            }
          }
          t.MergedStore = i;
        },
        8877: function(e, t, r) {
          "use strict";
          var n = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ObservableStore = void 0;
          const i = n(r(9394));
          class o extends i.default {
            constructor(e) {
              super(), this._state = e || {};
            }
            getState() {
              return this._getState();
            }
            putState(e) {
              this._putState(e), this.emit("update", e);
            }
            updateState(e) {
              if (e && "object" == typeof e) {
                const t = this.getState();
                this.putState(Object.assign(Object.assign({}, t), e));
              } else this.putState(e);
            }
            subscribe(e) {
              this.on("update", e);
            }
            unsubscribe(e) {
              this.removeListener("update", e);
            }
            _getState() {
              return this._state;
            }
            _putState(e) {
              this._state = e;
            }
          }
          t.ObservableStore = o;
        },
        7969: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.storeAsStream = void 0;
          const n = r(2830);
          class i extends n.Duplex {
            constructor(e) {
              super({
                objectMode: !0
              }), this.resume(), this.handler = e => this.push(e), this.obsStore = e, this.obsStore.subscribe(this.handler);
            }
            pipe(e, t) {
              const r = super.pipe(e, t);
              return e.write(this.obsStore.getState()), r;
            }
            _write(e, t, r) {
              this.obsStore.putState(e), r();
            }
            _read(e) {}
            _destroy(e, t) {
              this.obsStore.unsubscribe(this.handler), super._destroy(e, t);
            }
          }
          t.storeAsStream = function(e) {
            return new i(e);
          };
        },
        2724: function(e, t, r) {
          "use strict";
          var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
            void 0 === n && (n = r), Object.defineProperty(e, n, {
              enumerable: !0,
              get: function() {
                return t[r];
              }
            });
          } : function(e, t, r, n) {
            void 0 === n && (n = r), e[n] = t[r];
          }), i = this && this.__exportStar || function(e, t) {
            for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), i(r(7969), t), i(r(5508), t), i(r(401), t), i(r(8877), t), i(r(6546), t);
        },
        6546: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.storeTransformStream = void 0;
          const n = r(4650);
          t.storeTransformStream = function(e) {
            return n.obj(((t, r, n) => {
              try {
                return void n(null, e(t));
              } catch (e) {
                return void n(e);
              }
            }));
          };
        },
        9394: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          const n = r(7187);
          function i(e, t, r) {
            try {
              Reflect.apply(e, t, r);
            } catch (e) {
              setTimeout((() => {
                throw e;
              }));
            }
          }
          class o extends n.EventEmitter {
            emit(e, ...t) {
              let r = "error" === e;
              const n = this._events;
              if (void 0 !== n) r = r && void 0 === n.error; else if (!r) return !1;
              if (r) {
                let e;
                if (t.length > 0 && ([e] = t), e instanceof Error) throw e;
                const r = new Error("Unhandled error." + (e ? ` (${e.message})` : ""));
                throw r.context = e, r;
              }
              const o = n[e];
              if (void 0 === o) return !1;
              if ("function" == typeof o) i(o, this, t); else {
                const e = o.length, r = function(e) {
                  const t = e.length, r = new Array(t);
                  for (let n = 0; n < t; n += 1) r[n] = e[n];
                  return r;
                }(o);
                for (let n = 0; n < e; n += 1) i(r[n], this, t);
              }
              return !0;
            }
          }
          t.default = o;
        },
        2450: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer, i = new (0, r(6266).ec)("secp256k1"), o = r.g.crypto || r.g.msCrypto || {}, s = o.subtle || o.webkitSubtle, a = r(5835);
          const c = n.from("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", "hex"), f = n.alloc(32, 0);
          function u(e, t) {
            if (!e) throw new Error(t || "Assertion failed");
          }
          function h(e) {
            return t = e, !(!n.isBuffer(t) || 32 !== t.length) && e.compare(f) > 0 && e.compare(c) < 0;
            var t;
          }
          function d(e) {
            var t = new Uint8Array(e);
            return void 0 === o.getRandomValues ? n.from(a.randomBytes(e)) : (o.getRandomValues(t), n.from(t));
          }
          function l(e) {
            return function(t, r, i) {
              return new Promise((function(o) {
                if (s) return s.importKey("raw", r, {
                  name: "AES-CBC"
                }, !1, [ e ]).then((function(r) {
                  var n = {
                    name: "AES-CBC",
                    iv: t
                  };
                  return s[e](n, r, i);
                })).then((function(e) {
                  o(n.from(new Uint8Array(e)));
                }));
                if ("encrypt" === e) {
                  var c = a.createCipheriv("aes-256-cbc", r, t);
                  let e = c.update(i), s = c.final();
                  o(n.concat([ e, s ]));
                } else if ("decrypt" === e) {
                  var f = a.createDecipheriv("aes-256-cbc", r, t);
                  let e = f.update(i), s = f.final();
                  o(n.concat([ e, s ]));
                }
              }));
            };
          }
          l("encrypt");
          var p = l("decrypt");
          t.oq = function() {
            for (var e = d(32); !h(e); ) e = d(32);
            return e;
          }, t.rc = function(e) {
            return u(32 === e.length, "Bad private key"), u(h(e), "Bad private key"), n.from(i.keyFromPrivate(e).getPublic("arr"));
          }, t.pe = function(e, t) {
            var r, o, s;
            return (o = e, s = t.ephemPublicKey, new Promise((function(e) {
              u(n.isBuffer(o), "Bad private key"), u(n.isBuffer(s), "Bad public key"), u(32 === o.length, "Bad private key"), u(h(o), "Bad private key"), 
              u(65 === s.length || 33 === s.length, "Bad public key"), 65 === s.length && u(4 === s[0], "Bad public key"), 33 === s.length && u(2 === s[0] || 3 === s[0], "Bad public key");
              var t = i.keyFromPrivate(o), r = i.keyFromPublic(s), a = t.derive(r.getPublic());
              e(n.from(a.toArray()));
            }))).then((function(e) {
              return t = e, new Promise((function(e) {
                var r = a.createHash("sha512").update(t).digest();
                e(new Uint8Array(r));
              }));
              var t;
            })).then((function(e) {
              r = e.slice(0, 32);
              var i, o, s, c = e.slice(32), f = n.concat([ t.iv, t.ephemPublicKey, t.ciphertext ]);
              return i = c, o = f, s = t.mac, new Promise((function(e) {
                var t = a.createHmac("sha256", n.from(i));
                t.update(o), e(function(e, t) {
                  if (e.length !== t.length) return !1;
                  for (var r = 0, n = 0; n < e.length; n++) r |= e[n] ^ t[n];
                  return 0 === r;
                }(t.digest(), s));
              }));
            })).then((function(e) {
              return u(e, "Bad MAC"), p(t.iv, r, t.ciphertext);
            })).then((function(e) {
              return n.from(new Uint8Array(e));
            }));
          };
        },
        9809: (e, t, r) => {
          "use strict";
          const n = t;
          n.bignum = r(3550), n.define = r(2500).define, n.base = r(1979), n.constants = r(6826), n.decoders = r(8307), n.encoders = r(6579);
        },
        2500: (e, t, r) => {
          "use strict";
          const n = r(6579), i = r(8307), o = r(5717);
          function s(e, t) {
            this.name = e, this.body = t, this.decoders = {}, this.encoders = {};
          }
          t.define = function(e, t) {
            return new s(e, t);
          }, s.prototype._createNamed = function(e) {
            const t = this.name;
            function r(e) {
              this._initNamed(e, t);
            }
            return o(r, e), r.prototype._initNamed = function(t, r) {
              e.call(this, t, r);
            }, new r(this);
          }, s.prototype._getDecoder = function(e) {
            return e = e || "der", this.decoders.hasOwnProperty(e) || (this.decoders[e] = this._createNamed(i[e])), this.decoders[e];
          }, s.prototype.decode = function(e, t, r) {
            return this._getDecoder(t).decode(e, r);
          }, s.prototype._getEncoder = function(e) {
            return e = e || "der", this.encoders.hasOwnProperty(e) || (this.encoders[e] = this._createNamed(n[e])), this.encoders[e];
          }, s.prototype.encode = function(e, t, r) {
            return this._getEncoder(t).encode(e, r);
          };
        },
        6625: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(8465).b, o = r(2399).Buffer;
          function s(e, t) {
            i.call(this, t), o.isBuffer(e) ? (this.base = e, this.offset = 0, this.length = e.length) : this.error("Input not Buffer");
          }
          function a(e, t) {
            if (Array.isArray(e)) this.length = 0, this.value = e.map((function(e) {
              return a.isEncoderBuffer(e) || (e = new a(e, t)), this.length += e.length, e;
            }), this); else if ("number" == typeof e) {
              if (!(0 <= e && e <= 255)) return t.error("non-byte EncoderBuffer value");
              this.value = e, this.length = 1;
            } else if ("string" == typeof e) this.value = e, this.length = o.byteLength(e); else {
              if (!o.isBuffer(e)) return t.error("Unsupported type: " + typeof e);
              this.value = e, this.length = e.length;
            }
          }
          n(s, i), t.C = s, s.isDecoderBuffer = function(e) {
            return e instanceof s || "object" == typeof e && o.isBuffer(e.base) && "DecoderBuffer" === e.constructor.name && "number" == typeof e.offset && "number" == typeof e.length && "function" == typeof e.save && "function" == typeof e.restore && "function" == typeof e.isEmpty && "function" == typeof e.readUInt8 && "function" == typeof e.skip && "function" == typeof e.raw;
          }, s.prototype.save = function() {
            return {
              offset: this.offset,
              reporter: i.prototype.save.call(this)
            };
          }, s.prototype.restore = function(e) {
            const t = new s(this.base);
            return t.offset = e.offset, t.length = this.offset, this.offset = e.offset, i.prototype.restore.call(this, e.reporter), 
            t;
          }, s.prototype.isEmpty = function() {
            return this.offset === this.length;
          }, s.prototype.readUInt8 = function(e) {
            return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(e || "DecoderBuffer overrun");
          }, s.prototype.skip = function(e, t) {
            if (!(this.offset + e <= this.length)) return this.error(t || "DecoderBuffer overrun");
            const r = new s(this.base);
            return r._reporterState = this._reporterState, r.offset = this.offset, r.length = this.offset + e, this.offset += e, r;
          }, s.prototype.raw = function(e) {
            return this.base.slice(e ? e.offset : this.offset, this.length);
          }, t.R = a, a.isEncoderBuffer = function(e) {
            return e instanceof a || "object" == typeof e && "EncoderBuffer" === e.constructor.name && "number" == typeof e.length && "function" == typeof e.join;
          }, a.prototype.join = function(e, t) {
            return e || (e = o.alloc(this.length)), t || (t = 0), 0 === this.length || (Array.isArray(this.value) ? this.value.forEach((function(r) {
              r.join(e, t), t += r.length;
            })) : ("number" == typeof this.value ? e[t] = this.value : "string" == typeof this.value ? e.write(this.value, t) : o.isBuffer(this.value) && this.value.copy(e, t), 
            t += this.length)), e;
          };
        },
        1979: (e, t, r) => {
          "use strict";
          const n = t;
          n.Reporter = r(8465).b, n.DecoderBuffer = r(6625).C, n.EncoderBuffer = r(6625).R, n.Node = r(1949);
        },
        1949: (e, t, r) => {
          "use strict";
          const n = r(8465).b, i = r(6625).R, o = r(6625).C, s = r(9746), a = [ "seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr" ], c = [ "key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains" ].concat(a);
          function f(e, t, r) {
            const n = {};
            this._baseState = n, n.name = r, n.enc = e, n.parent = t || null, n.children = null, n.tag = null, n.args = null, n.reverseArgs = null, 
            n.choice = null, n.optional = !1, n.any = !1, n.obj = !1, n.use = null, n.useDecoder = null, n.key = null, n.default = null, 
            n.explicit = null, n.implicit = null, n.contains = null, n.parent || (n.children = [], this._wrap());
          }
          e.exports = f;
          const u = [ "enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains" ];
          f.prototype.clone = function() {
            const e = this._baseState, t = {};
            u.forEach((function(r) {
              t[r] = e[r];
            }));
            const r = new this.constructor(t.parent);
            return r._baseState = t, r;
          }, f.prototype._wrap = function() {
            const e = this._baseState;
            c.forEach((function(t) {
              this[t] = function() {
                const r = new this.constructor(this);
                return e.children.push(r), r[t].apply(r, arguments);
              };
            }), this);
          }, f.prototype._init = function(e) {
            const t = this._baseState;
            s(null === t.parent), e.call(this), t.children = t.children.filter((function(e) {
              return e._baseState.parent === this;
            }), this), s.equal(t.children.length, 1, "Root node can have only one child");
          }, f.prototype._useArgs = function(e) {
            const t = this._baseState, r = e.filter((function(e) {
              return e instanceof this.constructor;
            }), this);
            e = e.filter((function(e) {
              return !(e instanceof this.constructor);
            }), this), 0 !== r.length && (s(null === t.children), t.children = r, r.forEach((function(e) {
              e._baseState.parent = this;
            }), this)), 0 !== e.length && (s(null === t.args), t.args = e, t.reverseArgs = e.map((function(e) {
              if ("object" != typeof e || e.constructor !== Object) return e;
              const t = {};
              return Object.keys(e).forEach((function(r) {
                r == (0 | r) && (r |= 0);
                const n = e[r];
                t[n] = r;
              })), t;
            })));
          }, [ "_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool" ].forEach((function(e) {
            f.prototype[e] = function() {
              const t = this._baseState;
              throw new Error(e + " not implemented for encoding: " + t.enc);
            };
          })), a.forEach((function(e) {
            f.prototype[e] = function() {
              const t = this._baseState, r = Array.prototype.slice.call(arguments);
              return s(null === t.tag), t.tag = e, this._useArgs(r), this;
            };
          })), f.prototype.use = function(e) {
            s(e);
            const t = this._baseState;
            return s(null === t.use), t.use = e, this;
          }, f.prototype.optional = function() {
            return this._baseState.optional = !0, this;
          }, f.prototype.def = function(e) {
            const t = this._baseState;
            return s(null === t.default), t.default = e, t.optional = !0, this;
          }, f.prototype.explicit = function(e) {
            const t = this._baseState;
            return s(null === t.explicit && null === t.implicit), t.explicit = e, this;
          }, f.prototype.implicit = function(e) {
            const t = this._baseState;
            return s(null === t.explicit && null === t.implicit), t.implicit = e, this;
          }, f.prototype.obj = function() {
            const e = this._baseState, t = Array.prototype.slice.call(arguments);
            return e.obj = !0, 0 !== t.length && this._useArgs(t), this;
          }, f.prototype.key = function(e) {
            const t = this._baseState;
            return s(null === t.key), t.key = e, this;
          }, f.prototype.any = function() {
            return this._baseState.any = !0, this;
          }, f.prototype.choice = function(e) {
            const t = this._baseState;
            return s(null === t.choice), t.choice = e, this._useArgs(Object.keys(e).map((function(t) {
              return e[t];
            }))), this;
          }, f.prototype.contains = function(e) {
            const t = this._baseState;
            return s(null === t.use), t.contains = e, this;
          }, f.prototype._decode = function(e, t) {
            const r = this._baseState;
            if (null === r.parent) return e.wrapResult(r.children[0]._decode(e, t));
            let n, i = r.default, s = !0, a = null;
            if (null !== r.key && (a = e.enterKey(r.key)), r.optional) {
              let n = null;
              if (null !== r.explicit ? n = r.explicit : null !== r.implicit ? n = r.implicit : null !== r.tag && (n = r.tag), null !== n || r.any) {
                if (s = this._peekTag(e, n, r.any), e.isError(s)) return s;
              } else {
                const n = e.save();
                try {
                  null === r.choice ? this._decodeGeneric(r.tag, e, t) : this._decodeChoice(e, t), s = !0;
                } catch (e) {
                  s = !1;
                }
                e.restore(n);
              }
            }
            if (r.obj && s && (n = e.enterObject()), s) {
              if (null !== r.explicit) {
                const t = this._decodeTag(e, r.explicit);
                if (e.isError(t)) return t;
                e = t;
              }
              const n = e.offset;
              if (null === r.use && null === r.choice) {
                let t;
                r.any && (t = e.save());
                const n = this._decodeTag(e, null !== r.implicit ? r.implicit : r.tag, r.any);
                if (e.isError(n)) return n;
                r.any ? i = e.raw(t) : e = n;
              }
              if (t && t.track && null !== r.tag && t.track(e.path(), n, e.length, "tagged"), t && t.track && null !== r.tag && t.track(e.path(), e.offset, e.length, "content"), 
              r.any || (i = null === r.choice ? this._decodeGeneric(r.tag, e, t) : this._decodeChoice(e, t)), e.isError(i)) return i;
              if (r.any || null !== r.choice || null === r.children || r.children.forEach((function(r) {
                r._decode(e, t);
              })), r.contains && ("octstr" === r.tag || "bitstr" === r.tag)) {
                const n = new o(i);
                i = this._getUse(r.contains, e._reporterState.obj)._decode(n, t);
              }
            }
            return r.obj && s && (i = e.leaveObject(n)), null === r.key || null === i && !0 !== s ? null !== a && e.exitKey(a) : e.leaveKey(a, r.key, i), 
            i;
          }, f.prototype._decodeGeneric = function(e, t, r) {
            const n = this._baseState;
            return "seq" === e || "set" === e ? null : "seqof" === e || "setof" === e ? this._decodeList(t, e, n.args[0], r) : /str$/.test(e) ? this._decodeStr(t, e, r) : "objid" === e && n.args ? this._decodeObjid(t, n.args[0], n.args[1], r) : "objid" === e ? this._decodeObjid(t, null, null, r) : "gentime" === e || "utctime" === e ? this._decodeTime(t, e, r) : "null_" === e ? this._decodeNull(t, r) : "bool" === e ? this._decodeBool(t, r) : "objDesc" === e ? this._decodeStr(t, e, r) : "int" === e || "enum" === e ? this._decodeInt(t, n.args && n.args[0], r) : null !== n.use ? this._getUse(n.use, t._reporterState.obj)._decode(t, r) : t.error("unknown tag: " + e);
          }, f.prototype._getUse = function(e, t) {
            const r = this._baseState;
            return r.useDecoder = this._use(e, t), s(null === r.useDecoder._baseState.parent), r.useDecoder = r.useDecoder._baseState.children[0], 
            r.implicit !== r.useDecoder._baseState.implicit && (r.useDecoder = r.useDecoder.clone(), r.useDecoder._baseState.implicit = r.implicit), 
            r.useDecoder;
          }, f.prototype._decodeChoice = function(e, t) {
            const r = this._baseState;
            let n = null, i = !1;
            return Object.keys(r.choice).some((function(o) {
              const s = e.save(), a = r.choice[o];
              try {
                const r = a._decode(e, t);
                if (e.isError(r)) return !1;
                n = {
                  type: o,
                  value: r
                }, i = !0;
              } catch (t) {
                return e.restore(s), !1;
              }
              return !0;
            }), this), i ? n : e.error("Choice not matched");
          }, f.prototype._createEncoderBuffer = function(e) {
            return new i(e, this.reporter);
          }, f.prototype._encode = function(e, t, r) {
            const n = this._baseState;
            if (null !== n.default && n.default === e) return;
            const i = this._encodeValue(e, t, r);
            return void 0 === i || this._skipDefault(i, t, r) ? void 0 : i;
          }, f.prototype._encodeValue = function(e, t, r) {
            const i = this._baseState;
            if (null === i.parent) return i.children[0]._encode(e, t || new n);
            let o = null;
            if (this.reporter = t, i.optional && void 0 === e) {
              if (null === i.default) return;
              e = i.default;
            }
            let s = null, a = !1;
            if (i.any) o = this._createEncoderBuffer(e); else if (i.choice) o = this._encodeChoice(e, t); else if (i.contains) s = this._getUse(i.contains, r)._encode(e, t), 
            a = !0; else if (i.children) s = i.children.map((function(r) {
              if ("null_" === r._baseState.tag) return r._encode(null, t, e);
              if (null === r._baseState.key) return t.error("Child should have a key");
              const n = t.enterKey(r._baseState.key);
              if ("object" != typeof e) return t.error("Child expected, but input is not object");
              const i = r._encode(e[r._baseState.key], t, e);
              return t.leaveKey(n), i;
            }), this).filter((function(e) {
              return e;
            })), s = this._createEncoderBuffer(s); else if ("seqof" === i.tag || "setof" === i.tag) {
              if (!i.args || 1 !== i.args.length) return t.error("Too many args for : " + i.tag);
              if (!Array.isArray(e)) return t.error("seqof/setof, but data is not Array");
              const r = this.clone();
              r._baseState.implicit = null, s = this._createEncoderBuffer(e.map((function(r) {
                const n = this._baseState;
                return this._getUse(n.args[0], e)._encode(r, t);
              }), r));
            } else null !== i.use ? o = this._getUse(i.use, r)._encode(e, t) : (s = this._encodePrimitive(i.tag, e), a = !0);
            if (!i.any && null === i.choice) {
              const e = null !== i.implicit ? i.implicit : i.tag, r = null === i.implicit ? "universal" : "context";
              null === e ? null === i.use && t.error("Tag could be omitted only for .use()") : null === i.use && (o = this._encodeComposite(e, a, r, s));
            }
            return null !== i.explicit && (o = this._encodeComposite(i.explicit, !1, "context", o)), o;
          }, f.prototype._encodeChoice = function(e, t) {
            const r = this._baseState, n = r.choice[e.type];
            return n || s(!1, e.type + " not found in " + JSON.stringify(Object.keys(r.choice))), n._encode(e.value, t);
          }, f.prototype._encodePrimitive = function(e, t) {
            const r = this._baseState;
            if (/str$/.test(e)) return this._encodeStr(t, e);
            if ("objid" === e && r.args) return this._encodeObjid(t, r.reverseArgs[0], r.args[1]);
            if ("objid" === e) return this._encodeObjid(t, null, null);
            if ("gentime" === e || "utctime" === e) return this._encodeTime(t, e);
            if ("null_" === e) return this._encodeNull();
            if ("int" === e || "enum" === e) return this._encodeInt(t, r.args && r.reverseArgs[0]);
            if ("bool" === e) return this._encodeBool(t);
            if ("objDesc" === e) return this._encodeStr(t, e);
            throw new Error("Unsupported tag: " + e);
          }, f.prototype._isNumstr = function(e) {
            return /^[0-9 ]*$/.test(e);
          }, f.prototype._isPrintstr = function(e) {
            return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e);
          };
        },
        8465: (e, t, r) => {
          "use strict";
          const n = r(5717);
          function i(e) {
            this._reporterState = {
              obj: null,
              path: [],
              options: e || {},
              errors: []
            };
          }
          function o(e, t) {
            this.path = e, this.rethrow(t);
          }
          t.b = i, i.prototype.isError = function(e) {
            return e instanceof o;
          }, i.prototype.save = function() {
            const e = this._reporterState;
            return {
              obj: e.obj,
              pathLen: e.path.length
            };
          }, i.prototype.restore = function(e) {
            const t = this._reporterState;
            t.obj = e.obj, t.path = t.path.slice(0, e.pathLen);
          }, i.prototype.enterKey = function(e) {
            return this._reporterState.path.push(e);
          }, i.prototype.exitKey = function(e) {
            const t = this._reporterState;
            t.path = t.path.slice(0, e - 1);
          }, i.prototype.leaveKey = function(e, t, r) {
            const n = this._reporterState;
            this.exitKey(e), null !== n.obj && (n.obj[t] = r);
          }, i.prototype.path = function() {
            return this._reporterState.path.join("/");
          }, i.prototype.enterObject = function() {
            const e = this._reporterState, t = e.obj;
            return e.obj = {}, t;
          }, i.prototype.leaveObject = function(e) {
            const t = this._reporterState, r = t.obj;
            return t.obj = e, r;
          }, i.prototype.error = function(e) {
            let t;
            const r = this._reporterState, n = e instanceof o;
            if (t = n ? e : new o(r.path.map((function(e) {
              return "[" + JSON.stringify(e) + "]";
            })).join(""), e.message || e, e.stack), !r.options.partial) throw t;
            return n || r.errors.push(t), t;
          }, i.prototype.wrapResult = function(e) {
            const t = this._reporterState;
            return t.options.partial ? {
              result: this.isError(e) ? null : e,
              errors: t.errors
            } : e;
          }, n(o, Error), o.prototype.rethrow = function(e) {
            if (this.message = e + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, o), 
            !this.stack) try {
              throw new Error(this.message);
            } catch (e) {
              this.stack = e.stack;
            }
            return this;
          };
        },
        160: (e, t) => {
          "use strict";
          function r(e) {
            const t = {};
            return Object.keys(e).forEach((function(r) {
              (0 | r) == r && (r |= 0);
              const n = e[r];
              t[n] = r;
            })), t;
          }
          t.tagClass = {
            0: "universal",
            1: "application",
            2: "context",
            3: "private"
          }, t.tagClassByName = r(t.tagClass), t.tag = {
            0: "end",
            1: "bool",
            2: "int",
            3: "bitstr",
            4: "octstr",
            5: "null_",
            6: "objid",
            7: "objDesc",
            8: "external",
            9: "real",
            10: "enum",
            11: "embed",
            12: "utf8str",
            13: "relativeOid",
            16: "seq",
            17: "set",
            18: "numstr",
            19: "printstr",
            20: "t61str",
            21: "videostr",
            22: "ia5str",
            23: "utctime",
            24: "gentime",
            25: "graphstr",
            26: "iso646str",
            27: "genstr",
            28: "unistr",
            29: "charstr",
            30: "bmpstr"
          }, t.tagByName = r(t.tag);
        },
        6826: (e, t, r) => {
          "use strict";
          const n = t;
          n._reverse = function(e) {
            const t = {};
            return Object.keys(e).forEach((function(r) {
              (0 | r) == r && (r |= 0);
              const n = e[r];
              t[n] = r;
            })), t;
          }, n.der = r(160);
        },
        1671: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(3550), o = r(6625).C, s = r(1949), a = r(160);
          function c(e) {
            this.enc = "der", this.name = e.name, this.entity = e, this.tree = new f, this.tree._init(e.body);
          }
          function f(e) {
            s.call(this, "der", e);
          }
          function u(e, t) {
            let r = e.readUInt8(t);
            if (e.isError(r)) return r;
            const n = a.tagClass[r >> 6], i = 0 == (32 & r);
            if (31 == (31 & r)) {
              let n = r;
              for (r = 0; 128 == (128 & n); ) {
                if (n = e.readUInt8(t), e.isError(n)) return n;
                r <<= 7, r |= 127 & n;
              }
            } else r &= 31;
            return {
              cls: n,
              primitive: i,
              tag: r,
              tagStr: a.tag[r]
            };
          }
          function h(e, t, r) {
            let n = e.readUInt8(r);
            if (e.isError(n)) return n;
            if (!t && 128 === n) return null;
            if (0 == (128 & n)) return n;
            const i = 127 & n;
            if (i > 4) return e.error("length octect is too long");
            n = 0;
            for (let o = 0; o < i; o++) {
              n <<= 8;
              const t = e.readUInt8(r);
              if (e.isError(t)) return t;
              n |= t;
            }
            return n;
          }
          e.exports = c, c.prototype.decode = function(e, t) {
            return o.isDecoderBuffer(e) || (e = new o(e, t)), this.tree._decode(e, t);
          }, n(f, s), f.prototype._peekTag = function(e, t, r) {
            if (e.isEmpty()) return !1;
            const n = e.save(), i = u(e, 'Failed to peek tag: "' + t + '"');
            return e.isError(i) ? i : (e.restore(n), i.tag === t || i.tagStr === t || i.tagStr + "of" === t || r);
          }, f.prototype._decodeTag = function(e, t, r) {
            const n = u(e, 'Failed to decode tag of "' + t + '"');
            if (e.isError(n)) return n;
            let i = h(e, n.primitive, 'Failed to get length of "' + t + '"');
            if (e.isError(i)) return i;
            if (!r && n.tag !== t && n.tagStr !== t && n.tagStr + "of" !== t) return e.error('Failed to match tag: "' + t + '"');
            if (n.primitive || null !== i) return e.skip(i, 'Failed to match body of: "' + t + '"');
            const o = e.save(), s = this._skipUntilEnd(e, 'Failed to skip indefinite length body: "' + this.tag + '"');
            return e.isError(s) ? s : (i = e.offset - o.offset, e.restore(o), e.skip(i, 'Failed to match body of: "' + t + '"'));
          }, f.prototype._skipUntilEnd = function(e, t) {
            for (;;) {
              const r = u(e, t);
              if (e.isError(r)) return r;
              const n = h(e, r.primitive, t);
              if (e.isError(n)) return n;
              let i;
              if (i = r.primitive || null !== n ? e.skip(n) : this._skipUntilEnd(e, t), e.isError(i)) return i;
              if ("end" === r.tagStr) break;
            }
          }, f.prototype._decodeList = function(e, t, r, n) {
            const i = [];
            for (;!e.isEmpty(); ) {
              const t = this._peekTag(e, "end");
              if (e.isError(t)) return t;
              const o = r.decode(e, "der", n);
              if (e.isError(o) && t) break;
              i.push(o);
            }
            return i;
          }, f.prototype._decodeStr = function(e, t) {
            if ("bitstr" === t) {
              const t = e.readUInt8();
              return e.isError(t) ? t : {
                unused: t,
                data: e.raw()
              };
            }
            if ("bmpstr" === t) {
              const t = e.raw();
              if (t.length % 2 == 1) return e.error("Decoding of string type: bmpstr length mismatch");
              let r = "";
              for (let e = 0; e < t.length / 2; e++) r += String.fromCharCode(t.readUInt16BE(2 * e));
              return r;
            }
            if ("numstr" === t) {
              const t = e.raw().toString("ascii");
              return this._isNumstr(t) ? t : e.error("Decoding of string type: numstr unsupported characters");
            }
            if ("octstr" === t) return e.raw();
            if ("objDesc" === t) return e.raw();
            if ("printstr" === t) {
              const t = e.raw().toString("ascii");
              return this._isPrintstr(t) ? t : e.error("Decoding of string type: printstr unsupported characters");
            }
            return /str$/.test(t) ? e.raw().toString() : e.error("Decoding of string type: " + t + " unsupported");
          }, f.prototype._decodeObjid = function(e, t, r) {
            let n;
            const i = [];
            let o = 0, s = 0;
            for (;!e.isEmpty(); ) s = e.readUInt8(), o <<= 7, o |= 127 & s, 0 == (128 & s) && (i.push(o), o = 0);
            128 & s && i.push(o);
            const a = i[0] / 40 | 0, c = i[0] % 40;
            if (n = r ? i : [ a, c ].concat(i.slice(1)), t) {
              let e = t[n.join(" ")];
              void 0 === e && (e = t[n.join(".")]), void 0 !== e && (n = e);
            }
            return n;
          }, f.prototype._decodeTime = function(e, t) {
            const r = e.raw().toString();
            let n, i, o, s, a, c;
            if ("gentime" === t) n = 0 | r.slice(0, 4), i = 0 | r.slice(4, 6), o = 0 | r.slice(6, 8), s = 0 | r.slice(8, 10), a = 0 | r.slice(10, 12), 
            c = 0 | r.slice(12, 14); else {
              if ("utctime" !== t) return e.error("Decoding " + t + " time is not supported yet");
              n = 0 | r.slice(0, 2), i = 0 | r.slice(2, 4), o = 0 | r.slice(4, 6), s = 0 | r.slice(6, 8), a = 0 | r.slice(8, 10), c = 0 | r.slice(10, 12), 
              n = n < 70 ? 2e3 + n : 1900 + n;
            }
            return Date.UTC(n, i - 1, o, s, a, c, 0);
          }, f.prototype._decodeNull = function() {
            return null;
          }, f.prototype._decodeBool = function(e) {
            const t = e.readUInt8();
            return e.isError(t) ? t : 0 !== t;
          }, f.prototype._decodeInt = function(e, t) {
            const r = e.raw();
            let n = new i(r);
            return t && (n = t[n.toString(10)] || n), n;
          }, f.prototype._use = function(e, t) {
            return "function" == typeof e && (e = e(t)), e._getDecoder("der").tree;
          };
        },
        8307: (e, t, r) => {
          "use strict";
          const n = t;
          n.der = r(1671), n.pem = r(9631);
        },
        9631: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(2399).Buffer, o = r(1671);
          function s(e) {
            o.call(this, e), this.enc = "pem";
          }
          n(s, o), e.exports = s, s.prototype.decode = function(e, t) {
            const r = e.toString().split(/[\r\n]+/g), n = t.label.toUpperCase(), s = /^-----(BEGIN|END) ([^-]+)-----$/;
            let a = -1, c = -1;
            for (let i = 0; i < r.length; i++) {
              const e = r[i].match(s);
              if (null !== e && e[2] === n) {
                if (-1 !== a) {
                  if ("END" !== e[1]) break;
                  c = i;
                  break;
                }
                if ("BEGIN" !== e[1]) break;
                a = i;
              }
            }
            if (-1 === a || -1 === c) throw new Error("PEM section not found for: " + n);
            const f = r.slice(a + 1, c).join("");
            f.replace(/[^a-z0-9+/=]+/gi, "");
            const u = i.from(f, "base64");
            return o.prototype.decode.call(this, u, t);
          };
        },
        6984: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(2399).Buffer, o = r(1949), s = r(160);
          function a(e) {
            this.enc = "der", this.name = e.name, this.entity = e, this.tree = new c, this.tree._init(e.body);
          }
          function c(e) {
            o.call(this, "der", e);
          }
          function f(e) {
            return e < 10 ? "0" + e : e;
          }
          e.exports = a, a.prototype.encode = function(e, t) {
            return this.tree._encode(e, t).join();
          }, n(c, o), c.prototype._encodeComposite = function(e, t, r, n) {
            const o = function(e, t, r, n) {
              let i;
              if ("seqof" === e ? e = "seq" : "setof" === e && (e = "set"), s.tagByName.hasOwnProperty(e)) i = s.tagByName[e]; else {
                if ("number" != typeof e || (0 | e) !== e) return n.error("Unknown tag: " + e);
                i = e;
              }
              return i >= 31 ? n.error("Multi-octet tag encoding unsupported") : (t || (i |= 32), i |= s.tagClassByName[r || "universal"] << 6, 
              i);
            }(e, t, r, this.reporter);
            if (n.length < 128) {
              const e = i.alloc(2);
              return e[0] = o, e[1] = n.length, this._createEncoderBuffer([ e, n ]);
            }
            let a = 1;
            for (let i = n.length; i >= 256; i >>= 8) a++;
            const c = i.alloc(2 + a);
            c[0] = o, c[1] = 128 | a;
            for (let i = 1 + a, s = n.length; s > 0; i--, s >>= 8) c[i] = 255 & s;
            return this._createEncoderBuffer([ c, n ]);
          }, c.prototype._encodeStr = function(e, t) {
            if ("bitstr" === t) return this._createEncoderBuffer([ 0 | e.unused, e.data ]);
            if ("bmpstr" === t) {
              const t = i.alloc(2 * e.length);
              for (let r = 0; r < e.length; r++) t.writeUInt16BE(e.charCodeAt(r), 2 * r);
              return this._createEncoderBuffer(t);
            }
            return "numstr" === t ? this._isNumstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === t ? this._isPrintstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(t) || "objDesc" === t ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: " + t + " unsupported");
          }, c.prototype._encodeObjid = function(e, t, r) {
            if ("string" == typeof e) {
              if (!t) return this.reporter.error("string objid given, but no values map found");
              if (!t.hasOwnProperty(e)) return this.reporter.error("objid not found in values map");
              e = t[e].split(/[\s.]+/g);
              for (let t = 0; t < e.length; t++) e[t] |= 0;
            } else if (Array.isArray(e)) {
              e = e.slice();
              for (let t = 0; t < e.length; t++) e[t] |= 0;
            }
            if (!Array.isArray(e)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e));
            if (!r) {
              if (e[1] >= 40) return this.reporter.error("Second objid identifier OOB");
              e.splice(0, 2, 40 * e[0] + e[1]);
            }
            let n = 0;
            for (let i = 0; i < e.length; i++) {
              let t = e[i];
              for (n++; t >= 128; t >>= 7) n++;
            }
            const o = i.alloc(n);
            let s = o.length - 1;
            for (let i = e.length - 1; i >= 0; i--) {
              let t = e[i];
              for (o[s--] = 127 & t; (t >>= 7) > 0; ) o[s--] = 128 | 127 & t;
            }
            return this._createEncoderBuffer(o);
          }, c.prototype._encodeTime = function(e, t) {
            let r;
            const n = new Date(e);
            return "gentime" === t ? r = [ f(n.getUTCFullYear()), f(n.getUTCMonth() + 1), f(n.getUTCDate()), f(n.getUTCHours()), f(n.getUTCMinutes()), f(n.getUTCSeconds()), "Z" ].join("") : "utctime" === t ? r = [ f(n.getUTCFullYear() % 100), f(n.getUTCMonth() + 1), f(n.getUTCDate()), f(n.getUTCHours()), f(n.getUTCMinutes()), f(n.getUTCSeconds()), "Z" ].join("") : this.reporter.error("Encoding " + t + " time is not supported yet"), 
            this._encodeStr(r, "octstr");
          }, c.prototype._encodeNull = function() {
            return this._createEncoderBuffer("");
          }, c.prototype._encodeInt = function(e, t) {
            if ("string" == typeof e) {
              if (!t) return this.reporter.error("String int or enum given, but no values map");
              if (!t.hasOwnProperty(e)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e));
              e = t[e];
            }
            if ("number" != typeof e && !i.isBuffer(e)) {
              const t = e.toArray();
              !e.sign && 128 & t[0] && t.unshift(0), e = i.from(t);
            }
            if (i.isBuffer(e)) {
              let t = e.length;
              0 === e.length && t++;
              const r = i.alloc(t);
              return e.copy(r), 0 === e.length && (r[0] = 0), this._createEncoderBuffer(r);
            }
            if (e < 128) return this._createEncoderBuffer(e);
            if (e < 256) return this._createEncoderBuffer([ 0, e ]);
            let r = 1;
            for (let i = e; i >= 256; i >>= 8) r++;
            const n = new Array(r);
            for (let i = n.length - 1; i >= 0; i--) n[i] = 255 & e, e >>= 8;
            return 128 & n[0] && n.unshift(0), this._createEncoderBuffer(i.from(n));
          }, c.prototype._encodeBool = function(e) {
            return this._createEncoderBuffer(e ? 255 : 0);
          }, c.prototype._use = function(e, t) {
            return "function" == typeof e && (e = e(t)), e._getEncoder("der").tree;
          }, c.prototype._skipDefault = function(e, t, r) {
            const n = this._baseState;
            let i;
            if (null === n.default) return !1;
            const o = e.join();
            if (void 0 === n.defaultBuffer && (n.defaultBuffer = this._encodeValue(n.default, t, r).join()), o.length !== n.defaultBuffer.length) return !1;
            for (i = 0; i < o.length; i++) if (o[i] !== n.defaultBuffer[i]) return !1;
            return !0;
          };
        },
        6579: (e, t, r) => {
          "use strict";
          const n = t;
          n.der = r(6984), n.pem = r(2883);
        },
        2883: (e, t, r) => {
          "use strict";
          const n = r(5717), i = r(6984);
          function o(e) {
            i.call(this, e), this.enc = "pem";
          }
          n(o, i), e.exports = o, o.prototype.encode = function(e, t) {
            const r = i.prototype.encode.call(this, e).toString("base64"), n = [ "-----BEGIN " + t.label + "-----" ];
            for (let i = 0; i < r.length; i += 64) n.push(r.slice(i, i + 64));
            return n.push("-----END " + t.label + "-----"), n.join("\n");
          };
        },
        9282: (e, t, r) => {
          "use strict";
          var i = r(4155);
          function o(e) {
            return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
              return typeof e;
            } : function(e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            }, o(e);
          }
          var s, a, c = r(2136).codes, f = c.ERR_AMBIGUOUS_ARGUMENT, u = c.ERR_INVALID_ARG_TYPE, h = c.ERR_INVALID_ARG_VALUE, d = c.ERR_INVALID_RETURN_VALUE, l = c.ERR_MISSING_ARGS, p = r(5961), b = r(9539).inspect, y = r(9539).types, g = y.isPromise, m = y.isRegExp, v = Object.assign ? Object.assign : r(8091).assign, w = Object.is ? Object.is : r(609);
          function _() {
            var e = r(9158);
            s = e.isDeepEqual, a = e.isDeepStrictEqual;
          }
          new Map;
          var S = !1, E = e.exports = P, A = {};
          function x(e) {
            if (e.message instanceof Error) throw e.message;
            throw new p(e);
          }
          function k(e, t, r, n) {
            if (!r) {
              var i = !1;
              if (0 === t) i = !0, n = "No value argument passed to `assert.ok()`"; else if (n instanceof Error) throw n;
              var o = new p({
                actual: r,
                expected: !0,
                message: n,
                operator: "==",
                stackStartFn: e
              });
              throw o.generatedMessage = i, o;
            }
          }
          function P() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
            k.apply(void 0, [ P, t.length ].concat(t));
          }
          E.fail = function e(t, r, o, s, a) {
            var c, f = arguments.length;
            if (0 === f) c = "Failed"; else if (1 === f) o = t, t = void 0; else {
              if (!1 === S) {
                S = !0;
                var u = i.emitWarning ? i.emitWarning : n.warn.bind(n);
                u("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
              }
              2 === f && (s = "!=");
            }
            if (o instanceof Error) throw o;
            var h = {
              actual: t,
              expected: r,
              operator: void 0 === s ? "fail" : s,
              stackStartFn: a || e
            };
            void 0 !== o && (h.message = o);
            var d = new p(h);
            throw c && (d.message = c, d.generatedMessage = !0), d;
          }, E.AssertionError = p, E.ok = P, E.equal = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            t != r && x({
              actual: t,
              expected: r,
              message: n,
              operator: "==",
              stackStartFn: e
            });
          }, E.notEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            t == r && x({
              actual: t,
              expected: r,
              message: n,
              operator: "!=",
              stackStartFn: e
            });
          }, E.deepEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            void 0 === s && _(), s(t, r) || x({
              actual: t,
              expected: r,
              message: n,
              operator: "deepEqual",
              stackStartFn: e
            });
          }, E.notDeepEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            void 0 === s && _(), s(t, r) && x({
              actual: t,
              expected: r,
              message: n,
              operator: "notDeepEqual",
              stackStartFn: e
            });
          }, E.deepStrictEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            void 0 === s && _(), a(t, r) || x({
              actual: t,
              expected: r,
              message: n,
              operator: "deepStrictEqual",
              stackStartFn: e
            });
          }, E.notDeepStrictEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            void 0 === s && _(), a(t, r) && x({
              actual: t,
              expected: r,
              message: n,
              operator: "notDeepStrictEqual",
              stackStartFn: e
            });
          }, E.strictEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            w(t, r) || x({
              actual: t,
              expected: r,
              message: n,
              operator: "strictEqual",
              stackStartFn: e
            });
          }, E.notStrictEqual = function e(t, r, n) {
            if (arguments.length < 2) throw new l("actual", "expected");
            w(t, r) && x({
              actual: t,
              expected: r,
              message: n,
              operator: "notStrictEqual",
              stackStartFn: e
            });
          };
          var O = function e(t, r, n) {
            var i = this;
            !function(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }(this, e), r.forEach((function(e) {
              e in t && (void 0 !== n && "string" == typeof n[e] && m(t[e]) && t[e].test(n[e]) ? i[e] = n[e] : i[e] = t[e]);
            }));
          };
          function M(e, t, r, n, i, o) {
            if (!(r in e) || !a(e[r], t[r])) {
              if (!n) {
                var s = new O(e, i), c = new O(t, i, e), f = new p({
                  actual: s,
                  expected: c,
                  operator: "deepStrictEqual",
                  stackStartFn: o
                });
                throw f.actual = e, f.expected = t, f.operator = o.name, f;
              }
              x({
                actual: e,
                expected: t,
                message: n,
                operator: o.name,
                stackStartFn: o
              });
            }
          }
          function I(e, t, r, n) {
            if ("function" != typeof t) {
              if (m(t)) return t.test(e);
              if (2 === arguments.length) throw new u("expected", [ "Function", "RegExp" ], t);
              if ("object" !== o(e) || null === e) {
                var i = new p({
                  actual: e,
                  expected: t,
                  message: r,
                  operator: "deepStrictEqual",
                  stackStartFn: n
                });
                throw i.operator = n.name, i;
              }
              var a = Object.keys(t);
              if (t instanceof Error) a.push("name", "message"); else if (0 === a.length) throw new h("error", t, "may not be an empty object");
              return void 0 === s && _(), a.forEach((function(i) {
                "string" == typeof e[i] && m(t[i]) && t[i].test(e[i]) || M(e, t, i, r, a, n);
              })), !0;
            }
            return void 0 !== t.prototype && e instanceof t || !Error.isPrototypeOf(t) && !0 === t.call({}, e);
          }
          function T(e) {
            if ("function" != typeof e) throw new u("fn", "Function", e);
            try {
              e();
            } catch (e) {
              return e;
            }
            return A;
          }
          function R(e) {
            return g(e) || null !== e && "object" === o(e) && "function" == typeof e.then && "function" == typeof e.catch;
          }
          function C(e) {
            return Promise.resolve().then((function() {
              var t;
              if ("function" == typeof e) {
                if (!R(t = e())) throw new d("instance of Promise", "promiseFn", t);
              } else {
                if (!R(e)) throw new u("promiseFn", [ "Function", "Promise" ], e);
                t = e;
              }
              return Promise.resolve().then((function() {
                return t;
              })).then((function() {
                return A;
              })).catch((function(e) {
                return e;
              }));
            }));
          }
          function N(e, t, r, n) {
            if ("string" == typeof r) {
              if (4 === arguments.length) throw new u("error", [ "Object", "Error", "Function", "RegExp" ], r);
              if ("object" === o(t) && null !== t) {
                if (t.message === r) throw new f("error/message", 'The error message "'.concat(t.message, '" is identical to the message.'));
              } else if (t === r) throw new f("error/message", 'The error "'.concat(t, '" is identical to the message.'));
              n = r, r = void 0;
            } else if (null != r && "object" !== o(r) && "function" != typeof r) throw new u("error", [ "Object", "Error", "Function", "RegExp" ], r);
            if (t === A) {
              var i = "";
              r && r.name && (i += " (".concat(r.name, ")")), i += n ? ": ".concat(n) : ".";
              var s = "rejects" === e.name ? "rejection" : "exception";
              x({
                actual: void 0,
                expected: r,
                operator: e.name,
                message: "Missing expected ".concat(s).concat(i),
                stackStartFn: e
              });
            }
            if (r && !I(t, r, n, e)) throw t;
          }
          function j(e, t, r, n) {
            if (t !== A) {
              if ("string" == typeof r && (n = r, r = void 0), !r || I(t, r)) {
                var i = n ? ": ".concat(n) : ".", o = "doesNotReject" === e.name ? "rejection" : "exception";
                x({
                  actual: t,
                  expected: r,
                  operator: e.name,
                  message: "Got unwanted ".concat(o).concat(i, "\n") + 'Actual message: "'.concat(t && t.message, '"'),
                  stackStartFn: e
                });
              }
              throw t;
            }
          }
          function B() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
            k.apply(void 0, [ B, t.length ].concat(t));
          }
          E.throws = function e(t) {
            for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
            N.apply(void 0, [ e, T(t) ].concat(n));
          }, E.rejects = function e(t) {
            for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
            return C(t).then((function(t) {
              return N.apply(void 0, [ e, t ].concat(n));
            }));
          }, E.doesNotThrow = function e(t) {
            for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
            j.apply(void 0, [ e, T(t) ].concat(n));
          }, E.doesNotReject = function e(t) {
            for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
            return C(t).then((function(t) {
              return j.apply(void 0, [ e, t ].concat(n));
            }));
          }, E.ifError = function e(t) {
            if (null != t) {
              var r = "ifError got unwanted exception: ";
              "object" === o(t) && "string" == typeof t.message ? 0 === t.message.length && t.constructor ? r += t.constructor.name : r += t.message : r += b(t);
              var n = new p({
                actual: t,
                expected: null,
                operator: "ifError",
                message: r,
                stackStartFn: e
              }), i = t.stack;
              if ("string" == typeof i) {
                var s = i.split("\n");
                s.shift();
                for (var a = n.stack.split("\n"), c = 0; c < s.length; c++) {
                  var f = a.indexOf(s[c]);
                  if (-1 !== f) {
                    a = a.slice(0, f);
                    break;
                  }
                }
                n.stack = "".concat(a.join("\n"), "\n").concat(s.join("\n"));
              }
              throw n;
            }
          }, E.strict = v(B, E, {
            equal: E.strictEqual,
            deepEqual: E.deepStrictEqual,
            notEqual: E.notStrictEqual,
            notDeepEqual: E.notDeepStrictEqual
          }), E.strict.strict = E.strict;
        },
        5961: (e, t, r) => {
          "use strict";
          var n = r(4155);
          function i(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }
          function o(e, t) {
            return !t || "object" !== d(t) && "function" != typeof t ? s(e) : t;
          }
          function s(e) {
            if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e;
          }
          function a(e) {
            var t = "function" == typeof Map ? new Map : void 0;
            return a = function(e) {
              if (null === e || (r = e, -1 === Function.toString.call(r).indexOf("[native code]"))) return e;
              var r;
              if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== t) {
                if (t.has(e)) return t.get(e);
                t.set(e, n);
              }
              function n() {
                return f(e, arguments, h(this).constructor);
              }
              return n.prototype = Object.create(e.prototype, {
                constructor: {
                  value: n,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), u(n, e);
            }, a(e);
          }
          function c() {
            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
              return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}))), !0;
            } catch (e) {
              return !1;
            }
          }
          function f(e, t, r) {
            return f = c() ? Reflect.construct : function(e, t, r) {
              var n = [ null ];
              n.push.apply(n, t);
              var i = new (Function.bind.apply(e, n));
              return r && u(i, r.prototype), i;
            }, f.apply(null, arguments);
          }
          function u(e, t) {
            return u = Object.setPrototypeOf || function(e, t) {
              return e.__proto__ = t, e;
            }, u(e, t);
          }
          function h(e) {
            return h = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {
              return e.__proto__ || Object.getPrototypeOf(e);
            }, h(e);
          }
          function d(e) {
            return d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
              return typeof e;
            } : function(e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            }, d(e);
          }
          var l = r(9539).inspect, p = r(2136).codes.ERR_INVALID_ARG_TYPE;
          function b(e, t, r) {
            return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
          }
          var y = "", g = "", m = "", v = "", w = {
            deepStrictEqual: "Expected values to be strictly deep-equal:",
            strictEqual: "Expected values to be strictly equal:",
            strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
            deepEqual: "Expected values to be loosely deep-equal:",
            equal: "Expected values to be loosely equal:",
            notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
            notStrictEqual: 'Expected "actual" to be strictly unequal to:',
            notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
            notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
            notEqual: 'Expected "actual" to be loosely unequal to:',
            notIdentical: "Values identical but not reference-equal:"
          };
          function _(e) {
            var t = Object.keys(e), r = Object.create(Object.getPrototypeOf(e));
            return t.forEach((function(t) {
              r[t] = e[t];
            })), Object.defineProperty(r, "message", {
              value: e.message
            }), r;
          }
          function S(e) {
            return l(e, {
              compact: !1,
              customInspect: !1,
              depth: 1e3,
              maxArrayLength: 1 / 0,
              showHidden: !1,
              breakLength: 1 / 0,
              showProxy: !1,
              sorted: !0,
              getters: !0
            });
          }
          var E = function(e) {
            function t(e) {
              var r;
              if (function(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
              }(this, t), "object" !== d(e) || null === e) throw new p("options", "Object", e);
              var i = e.message, a = e.operator, c = e.stackStartFn, f = e.actual, u = e.expected, l = Error.stackTraceLimit;
              if (Error.stackTraceLimit = 0, null != i) r = o(this, h(t).call(this, String(i))); else if (n.stderr && n.stderr.isTTY && (n.stderr && n.stderr.getColorDepth && 1 !== n.stderr.getColorDepth() ? (y = "[34m", 
              g = "[32m", v = "[39m", m = "[31m") : (y = "", g = "", v = "", m = "")), "object" === d(f) && null !== f && "object" === d(u) && null !== u && "stack" in f && f instanceof Error && "stack" in u && u instanceof Error && (f = _(f), 
              u = _(u)), "deepStrictEqual" === a || "strictEqual" === a) r = o(this, h(t).call(this, function(e, t, r) {
                var i = "", o = "", s = 0, a = "", c = !1, f = S(e), u = f.split("\n"), h = S(t).split("\n"), l = 0, p = "";
                if ("strictEqual" === r && "object" === d(e) && "object" === d(t) && null !== e && null !== t && (r = "strictEqualObject"), 
                1 === u.length && 1 === h.length && u[0] !== h[0]) {
                  var _ = u[0].length + h[0].length;
                  if (_ <= 10) {
                    if (!("object" === d(e) && null !== e || "object" === d(t) && null !== t || 0 === e && 0 === t)) return "".concat(w[r], "\n\n") + "".concat(u[0], " !== ").concat(h[0], "\n");
                  } else if ("strictEqualObject" !== r && _ < (n.stderr && n.stderr.isTTY ? n.stderr.columns : 80)) {
                    for (;u[0][l] === h[0][l]; ) l++;
                    l > 2 && (p = "\n  ".concat(function(e, t) {
                      if (t = Math.floor(t), 0 == e.length || 0 == t) return "";
                      var r = e.length * t;
                      for (t = Math.floor(Math.log(t) / Math.log(2)); t; ) e += e, t--;
                      return e + e.substring(0, r - e.length);
                    }(" ", l), "^"), l = 0);
                  }
                }
                for (var E = u[u.length - 1], A = h[h.length - 1]; E === A && (l++ < 2 ? a = "\n  ".concat(E).concat(a) : i = E, u.pop(), 
                h.pop(), 0 !== u.length && 0 !== h.length); ) E = u[u.length - 1], A = h[h.length - 1];
                var x = Math.max(u.length, h.length);
                if (0 === x) {
                  var k = f.split("\n");
                  if (k.length > 30) for (k[26] = "".concat(y, "...").concat(v); k.length > 27; ) k.pop();
                  return "".concat(w.notIdentical, "\n\n").concat(k.join("\n"), "\n");
                }
                l > 3 && (a = "\n".concat(y, "...").concat(v).concat(a), c = !0), "" !== i && (a = "\n  ".concat(i).concat(a), i = "");
                var P = 0, O = w[r] + "\n".concat(g, "+ actual").concat(v, " ").concat(m, "- expected").concat(v), M = " ".concat(y, "...").concat(v, " Lines skipped");
                for (l = 0; l < x; l++) {
                  var I = l - s;
                  if (u.length < l + 1) I > 1 && l > 2 && (I > 4 ? (o += "\n".concat(y, "...").concat(v), c = !0) : I > 3 && (o += "\n  ".concat(h[l - 2]), 
                  P++), o += "\n  ".concat(h[l - 1]), P++), s = l, i += "\n".concat(m, "-").concat(v, " ").concat(h[l]), P++; else if (h.length < l + 1) I > 1 && l > 2 && (I > 4 ? (o += "\n".concat(y, "...").concat(v), 
                  c = !0) : I > 3 && (o += "\n  ".concat(u[l - 2]), P++), o += "\n  ".concat(u[l - 1]), P++), s = l, o += "\n".concat(g, "+").concat(v, " ").concat(u[l]), 
                  P++; else {
                    var T = h[l], R = u[l], C = R !== T && (!b(R, ",") || R.slice(0, -1) !== T);
                    C && b(T, ",") && T.slice(0, -1) === R && (C = !1, R += ","), C ? (I > 1 && l > 2 && (I > 4 ? (o += "\n".concat(y, "...").concat(v), 
                    c = !0) : I > 3 && (o += "\n  ".concat(u[l - 2]), P++), o += "\n  ".concat(u[l - 1]), P++), s = l, o += "\n".concat(g, "+").concat(v, " ").concat(R), 
                    i += "\n".concat(m, "-").concat(v, " ").concat(T), P += 2) : (o += i, i = "", 1 !== I && 0 !== l || (o += "\n  ".concat(R), 
                    P++));
                  }
                  if (P > 20 && l < x - 2) return "".concat(O).concat(M, "\n").concat(o, "\n").concat(y, "...").concat(v).concat(i, "\n") + "".concat(y, "...").concat(v);
                }
                return "".concat(O).concat(c ? M : "", "\n").concat(o).concat(i).concat(a).concat(p);
              }(f, u, a))); else if ("notDeepStrictEqual" === a || "notStrictEqual" === a) {
                var E = w[a], A = S(f).split("\n");
                if ("notStrictEqual" === a && "object" === d(f) && null !== f && (E = w.notStrictEqualObject), A.length > 30) for (A[26] = "".concat(y, "...").concat(v); A.length > 27; ) A.pop();
                r = 1 === A.length ? o(this, h(t).call(this, "".concat(E, " ").concat(A[0]))) : o(this, h(t).call(this, "".concat(E, "\n\n").concat(A.join("\n"), "\n")));
              } else {
                var x = S(f), k = "", P = w[a];
                "notDeepEqual" === a || "notEqual" === a ? (x = "".concat(w[a], "\n\n").concat(x)).length > 1024 && (x = "".concat(x.slice(0, 1021), "...")) : (k = "".concat(S(u)), 
                x.length > 512 && (x = "".concat(x.slice(0, 509), "...")), k.length > 512 && (k = "".concat(k.slice(0, 509), "...")), "deepEqual" === a || "equal" === a ? x = "".concat(P, "\n\n").concat(x, "\n\nshould equal\n\n") : k = " ".concat(a, " ").concat(k)), 
                r = o(this, h(t).call(this, "".concat(x).concat(k)));
              }
              return Error.stackTraceLimit = l, r.generatedMessage = !i, Object.defineProperty(s(r), "name", {
                value: "AssertionError [ERR_ASSERTION]",
                enumerable: !1,
                writable: !0,
                configurable: !0
              }), r.code = "ERR_ASSERTION", r.actual = f, r.expected = u, r.operator = a, Error.captureStackTrace && Error.captureStackTrace(s(r), c), 
              r.stack, r.name = "AssertionError", o(r);
            }
            var r, a;
            return function(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  writable: !0,
                  configurable: !0
                }
              }), t && u(e, t);
            }(t, e), r = t, a = [ {
              key: "toString",
              value: function() {
                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
              }
            }, {
              key: l.custom,
              value: function(e, t) {
                return l(this, function(e) {
                  for (var t = 1; t < arguments.length; t++) {
                    var r = null != arguments[t] ? arguments[t] : {}, n = Object.keys(r);
                    "function" == typeof Object.getOwnPropertySymbols && (n = n.concat(Object.getOwnPropertySymbols(r).filter((function(e) {
                      return Object.getOwnPropertyDescriptor(r, e).enumerable;
                    })))), n.forEach((function(t) {
                      i(e, t, r[t]);
                    }));
                  }
                  return e;
                }({}, t, {
                  customInspect: !1,
                  depth: 0
                }));
              }
            } ], a && function(e, t) {
              for (var r = 0; r < t.length; r++) {
                var n = t[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
              }
            }(r.prototype, a), t;
          }(a(Error));
          e.exports = E;
        },
        2136: (e, t, r) => {
          "use strict";
          function n(e) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
              return typeof e;
            } : function(e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            }, n(e);
          }
          function i(e) {
            return i = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {
              return e.__proto__ || Object.getPrototypeOf(e);
            }, i(e);
          }
          function o(e, t) {
            return o = Object.setPrototypeOf || function(e, t) {
              return e.__proto__ = t, e;
            }, o(e, t);
          }
          var s, a, c = {};
          function f(e, t, r) {
            r || (r = Error);
            var s = function(r) {
              function s(r, o, a) {
                var c;
                return function(e, t) {
                  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }(this, s), c = function(e, t) {
                  return !t || "object" !== n(t) && "function" != typeof t ? function(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                  }(e) : t;
                }(this, i(s).call(this, function(e, r, n) {
                  return "string" == typeof t ? t : t(e, r, n);
                }(r, o, a))), c.code = e, c;
              }
              return function(e, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                e.prototype = Object.create(t && t.prototype, {
                  constructor: {
                    value: e,
                    writable: !0,
                    configurable: !0
                  }
                }), t && o(e, t);
              }(s, r), s;
            }(r);
            c[e] = s;
          }
          function u(e, t) {
            if (Array.isArray(e)) {
              var r = e.length;
              return e = e.map((function(e) {
                return String(e);
              })), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
            }
            return "of ".concat(t, " ").concat(String(e));
          }
          f("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError), f("ERR_INVALID_ARG_TYPE", (function(e, t, i) {
            var o, a, c, f, h;
            if (void 0 === s && (s = r(9282)), s("string" == typeof e, "'name' must be a string"), "string" == typeof t && (a = "not ", 
            t.substr(0, a.length) === a) ? (o = "must not be", t = t.replace(/^not /, "")) : o = "must be", function(e, t, r) {
              return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
            }(e, " argument")) c = "The ".concat(e, " ").concat(o, " ").concat(u(t, "type")); else {
              var d = ("number" != typeof h && (h = 0), h + ".".length > (f = e).length || -1 === f.indexOf(".", h) ? "argument" : "property");
              c = 'The "'.concat(e, '" ').concat(d, " ").concat(o, " ").concat(u(t, "type"));
            }
            return c + ". Received type ".concat(n(i));
          }), TypeError), f("ERR_INVALID_ARG_VALUE", (function(e, t) {
            var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "is invalid";
            void 0 === a && (a = r(9539));
            var i = a.inspect(t);
            return i.length > 128 && (i = "".concat(i.slice(0, 128), "...")), "The argument '".concat(e, "' ").concat(n, ". Received ").concat(i);
          }), TypeError, RangeError), f("ERR_INVALID_RETURN_VALUE", (function(e, t, r) {
            var i;
            return i = r && r.constructor && r.constructor.name ? "instance of ".concat(r.constructor.name) : "type ".concat(n(r)), 
            "Expected ".concat(e, ' to be returned from the "').concat(t, '"') + " function but got ".concat(i, ".");
          }), TypeError), f("ERR_MISSING_ARGS", (function() {
            for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
            void 0 === s && (s = r(9282)), s(t.length > 0, "At least one arg needs to be specified");
            var i = "The ", o = t.length;
            switch (t = t.map((function(e) {
              return '"'.concat(e, '"');
            })), o) {
             case 1:
              i += "".concat(t[0], " argument");
              break;

             case 2:
              i += "".concat(t[0], " and ").concat(t[1], " arguments");
              break;

             default:
              i += t.slice(0, o - 1).join(", "), i += ", and ".concat(t[o - 1], " arguments");
            }
            return "".concat(i, " must be specified");
          }), TypeError), e.exports.codes = c;
        },
        9158: (e, t, r) => {
          "use strict";
          function n(e, t) {
            return function(e) {
              if (Array.isArray(e)) return e;
            }(e) || function(e, t) {
              var r = [], n = !0, i = !1, o = void 0;
              try {
                for (var s, a = e[Symbol.iterator](); !(n = (s = a.next()).done) && (r.push(s.value), !t || r.length !== t); n = !0) ;
              } catch (e) {
                i = !0, o = e;
              } finally {
                try {
                  n || null == a.return || a.return();
                } finally {
                  if (i) throw o;
                }
              }
              return r;
            }(e, t) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }();
          }
          function i(e) {
            return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
              return typeof e;
            } : function(e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
            }, i(e);
          }
          var o = void 0 !== /a/g.flags, s = function(e) {
            var t = [];
            return e.forEach((function(e) {
              return t.push(e);
            })), t;
          }, a = function(e) {
            var t = [];
            return e.forEach((function(e, r) {
              return t.push([ r, e ]);
            })), t;
          }, c = Object.is ? Object.is : r(609), f = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
            return [];
          }, u = Number.isNaN ? Number.isNaN : r(360);
          function h(e) {
            return e.call.bind(e);
          }
          var d = h(Object.prototype.hasOwnProperty), l = h(Object.prototype.propertyIsEnumerable), p = h(Object.prototype.toString), b = r(9539).types, y = b.isAnyArrayBuffer, g = b.isArrayBufferView, m = b.isDate, v = b.isMap, w = b.isRegExp, _ = b.isSet, S = b.isNativeError, E = b.isBoxedPrimitive, A = b.isNumberObject, x = b.isStringObject, k = b.isBooleanObject, P = b.isBigIntObject, O = b.isSymbolObject, M = b.isFloat32Array, I = b.isFloat64Array;
          function T(e) {
            if (0 === e.length || e.length > 10) return !0;
            for (var t = 0; t < e.length; t++) {
              var r = e.charCodeAt(t);
              if (r < 48 || r > 57) return !0;
            }
            return 10 === e.length && e >= Math.pow(2, 32);
          }
          function R(e) {
            return Object.keys(e).filter(T).concat(f(e).filter(Object.prototype.propertyIsEnumerable.bind(e)));
          }
          function C(e, t) {
            if (e === t) return 0;
            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {
              r = e[i], n = t[i];
              break;
            }
            return r < n ? -1 : n < r ? 1 : 0;
          }
          function N(e, t, r, n) {
            if (e === t) return 0 !== e || !r || c(e, t);
            if (r) {
              if ("object" !== i(e)) return "number" == typeof e && u(e) && u(t);
              if ("object" !== i(t) || null === e || null === t) return !1;
              if (Object.getPrototypeOf(e) !== Object.getPrototypeOf(t)) return !1;
            } else {
              if (null === e || "object" !== i(e)) return (null === t || "object" !== i(t)) && e == t;
              if (null === t || "object" !== i(t)) return !1;
            }
            var s, a, f, h, d = p(e);
            if (d !== p(t)) return !1;
            if (Array.isArray(e)) {
              if (e.length !== t.length) return !1;
              var l = R(e), b = R(t);
              return l.length === b.length && B(e, t, r, n, 1, l);
            }
            if ("[object Object]" === d && (!v(e) && v(t) || !_(e) && _(t))) return !1;
            if (m(e)) {
              if (!m(t) || Date.prototype.getTime.call(e) !== Date.prototype.getTime.call(t)) return !1;
            } else if (w(e)) {
              if (!w(t) || (f = e, h = t, !(o ? f.source === h.source && f.flags === h.flags : RegExp.prototype.toString.call(f) === RegExp.prototype.toString.call(h)))) return !1;
            } else if (S(e) || e instanceof Error) {
              if (e.message !== t.message || e.name !== t.name) return !1;
            } else {
              if (g(e)) {
                if (r || !M(e) && !I(e)) {
                  if (!function(e, t) {
                    return e.byteLength === t.byteLength && 0 === C(new Uint8Array(e.buffer, e.byteOffset, e.byteLength), new Uint8Array(t.buffer, t.byteOffset, t.byteLength));
                  }(e, t)) return !1;
                } else if (!function(e, t) {
                  if (e.byteLength !== t.byteLength) return !1;
                  for (var r = 0; r < e.byteLength; r++) if (e[r] !== t[r]) return !1;
                  return !0;
                }(e, t)) return !1;
                var T = R(e), N = R(t);
                return T.length === N.length && B(e, t, r, n, 0, T);
              }
              if (_(e)) return !(!_(t) || e.size !== t.size) && B(e, t, r, n, 2);
              if (v(e)) return !(!v(t) || e.size !== t.size) && B(e, t, r, n, 3);
              if (y(e)) {
                if (a = t, (s = e).byteLength !== a.byteLength || 0 !== C(new Uint8Array(s), new Uint8Array(a))) return !1;
              } else if (E(e) && !function(e, t) {
                return A(e) ? A(t) && c(Number.prototype.valueOf.call(e), Number.prototype.valueOf.call(t)) : x(e) ? x(t) && String.prototype.valueOf.call(e) === String.prototype.valueOf.call(t) : k(e) ? k(t) && Boolean.prototype.valueOf.call(e) === Boolean.prototype.valueOf.call(t) : P(e) ? P(t) && BigInt.prototype.valueOf.call(e) === BigInt.prototype.valueOf.call(t) : O(t) && Symbol.prototype.valueOf.call(e) === Symbol.prototype.valueOf.call(t);
              }(e, t)) return !1;
            }
            return B(e, t, r, n, 0);
          }
          function j(e, t) {
            return t.filter((function(t) {
              return l(e, t);
            }));
          }
          function B(e, t, r, n, i, o) {
            if (5 === arguments.length) {
              o = Object.keys(e);
              var s = Object.keys(t);
              if (o.length !== s.length) return !1;
            }
            for (var a = 0; a < o.length; a++) if (!d(t, o[a])) return !1;
            if (r && 5 === arguments.length) {
              var c = f(e);
              if (0 !== c.length) {
                var u = 0;
                for (a = 0; a < c.length; a++) {
                  var h = c[a];
                  if (l(e, h)) {
                    if (!l(t, h)) return !1;
                    o.push(h), u++;
                  } else if (l(t, h)) return !1;
                }
                var p = f(t);
                if (c.length !== p.length && j(t, p).length !== u) return !1;
              } else {
                var b = f(t);
                if (0 !== b.length && 0 !== j(t, b).length) return !1;
              }
            }
            if (0 === o.length && (0 === i || 1 === i && 0 === e.length || 0 === e.size)) return !0;
            if (void 0 === n) n = {
              val1: new Map,
              val2: new Map,
              position: 0
            }; else {
              var y = n.val1.get(e);
              if (void 0 !== y) {
                var g = n.val2.get(t);
                if (void 0 !== g) return y === g;
              }
              n.position++;
            }
            n.val1.set(e, n.position), n.val2.set(t, n.position);
            var m = H(e, t, r, o, n, i);
            return n.val1.delete(e), n.val2.delete(t), m;
          }
          function L(e, t, r, n) {
            for (var i = s(e), o = 0; o < i.length; o++) {
              var a = i[o];
              if (N(t, a, r, n)) return e.delete(a), !0;
            }
            return !1;
          }
          function D(e) {
            switch (i(e)) {
             case "undefined":
              return null;

             case "object":
              return;

             case "symbol":
              return !1;

             case "string":
              e = +e;

             case "number":
              if (u(e)) return !1;
            }
            return !0;
          }
          function U(e, t, r) {
            var n = D(r);
            return null != n ? n : t.has(n) && !e.has(n);
          }
          function q(e, t, r, n, i) {
            var o = D(r);
            if (null != o) return o;
            var s = t.get(o);
            return !(void 0 === s && !t.has(o) || !N(n, s, !1, i)) && !e.has(o) && N(n, s, !1, i);
          }
          function F(e, t, r, n, i, o) {
            for (var a = s(e), c = 0; c < a.length; c++) {
              var f = a[c];
              if (N(r, f, i, o) && N(n, t.get(f), i, o)) return e.delete(f), !0;
            }
            return !1;
          }
          function H(e, t, r, o, c, f) {
            var u = 0;
            if (2 === f) {
              if (!function(e, t, r, n) {
                for (var o = null, a = s(e), c = 0; c < a.length; c++) {
                  var f = a[c];
                  if ("object" === i(f) && null !== f) null === o && (o = new Set), o.add(f); else if (!t.has(f)) {
                    if (r) return !1;
                    if (!U(e, t, f)) return !1;
                    null === o && (o = new Set), o.add(f);
                  }
                }
                if (null !== o) {
                  for (var u = s(t), h = 0; h < u.length; h++) {
                    var d = u[h];
                    if ("object" === i(d) && null !== d) {
                      if (!L(o, d, r, n)) return !1;
                    } else if (!r && !e.has(d) && !L(o, d, r, n)) return !1;
                  }
                  return 0 === o.size;
                }
                return !0;
              }(e, t, r, c)) return !1;
            } else if (3 === f) {
              if (!function(e, t, r, o) {
                for (var s = null, c = a(e), f = 0; f < c.length; f++) {
                  var u = n(c[f], 2), h = u[0], d = u[1];
                  if ("object" === i(h) && null !== h) null === s && (s = new Set), s.add(h); else {
                    var l = t.get(h);
                    if (void 0 === l && !t.has(h) || !N(d, l, r, o)) {
                      if (r) return !1;
                      if (!q(e, t, h, d, o)) return !1;
                      null === s && (s = new Set), s.add(h);
                    }
                  }
                }
                if (null !== s) {
                  for (var p = a(t), b = 0; b < p.length; b++) {
                    var y = n(p[b], 2), g = (h = y[0], y[1]);
                    if ("object" === i(h) && null !== h) {
                      if (!F(s, e, h, g, r, o)) return !1;
                    } else if (!(r || e.has(h) && N(e.get(h), g, !1, o) || F(s, e, h, g, !1, o))) return !1;
                  }
                  return 0 === s.size;
                }
                return !0;
              }(e, t, r, c)) return !1;
            } else if (1 === f) for (;u < e.length; u++) {
              if (!d(e, u)) {
                if (d(t, u)) return !1;
                for (var h = Object.keys(e); u < h.length; u++) {
                  var l = h[u];
                  if (!d(t, l) || !N(e[l], t[l], r, c)) return !1;
                }
                return h.length === Object.keys(t).length;
              }
              if (!d(t, u) || !N(e[u], t[u], r, c)) return !1;
            }
            for (u = 0; u < o.length; u++) {
              var p = o[u];
              if (!N(e[p], t[p], r, c)) return !1;
            }
            return !0;
          }
          e.exports = {
            isDeepEqual: function(e, t) {
              return N(e, t, !1);
            },
            isDeepStrictEqual: function(e, t) {
              return N(e, t, !0);
            }
          };
        },
        9742: (e, t) => {
          "use strict";
          t.byteLength = function(e) {
            var t = c(e), r = t[0], n = t[1];
            return 3 * (r + n) / 4 - n;
          }, t.toByteArray = function(e) {
            var t, r, o = c(e), s = o[0], a = o[1], f = new i(function(e, t, r) {
              return 3 * (t + r) / 4 - r;
            }(0, s, a)), u = 0, h = a > 0 ? s - 4 : s;
            for (r = 0; r < h; r += 4) t = n[e.charCodeAt(r)] << 18 | n[e.charCodeAt(r + 1)] << 12 | n[e.charCodeAt(r + 2)] << 6 | n[e.charCodeAt(r + 3)], 
            f[u++] = t >> 16 & 255, f[u++] = t >> 8 & 255, f[u++] = 255 & t;
            return 2 === a && (t = n[e.charCodeAt(r)] << 2 | n[e.charCodeAt(r + 1)] >> 4, f[u++] = 255 & t), 1 === a && (t = n[e.charCodeAt(r)] << 10 | n[e.charCodeAt(r + 1)] << 4 | n[e.charCodeAt(r + 2)] >> 2, 
            f[u++] = t >> 8 & 255, f[u++] = 255 & t), f;
          }, t.fromByteArray = function(e) {
            for (var t, n = e.length, i = n % 3, o = [], s = 16383, a = 0, c = n - i; a < c; a += s) o.push(f(e, a, a + s > c ? c : a + s));
            return 1 === i ? (t = e[n - 1], o.push(r[t >> 2] + r[t << 4 & 63] + "==")) : 2 === i && (t = (e[n - 2] << 8) + e[n - 1], 
            o.push(r[t >> 10] + r[t >> 4 & 63] + r[t << 2 & 63] + "=")), o.join("");
          };
          for (var r = [], n = [], i = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = 0, a = o.length; s < a; ++s) r[s] = o[s], 
          n[o.charCodeAt(s)] = s;
          function c(e) {
            var t = e.length;
            if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
            var r = e.indexOf("=");
            return -1 === r && (r = t), [ r, r === t ? 0 : 4 - r % 4 ];
          }
          function f(e, t, n) {
            for (var i, o, s = [], a = t; a < n; a += 3) i = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), s.push(r[(o = i) >> 18 & 63] + r[o >> 12 & 63] + r[o >> 6 & 63] + r[63 & o]);
            return s.join("");
          }
          n["-".charCodeAt(0)] = 62, n["_".charCodeAt(0)] = 63;
        },
        2240: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer, i = r(1518);
          function o(e, t) {
            return void 0 === t && (t = "utf8"), n.isBuffer(e) ? a(e.toString("base64")) : a(n.from(e, t).toString("base64"));
          }
          function s(e) {
            return e = e.toString(), i.default(e).replace(/\-/g, "+").replace(/_/g, "/");
          }
          function a(e) {
            return e.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
          }
          var c = o;
          c.encode = o, c.decode = function(e, t) {
            return void 0 === t && (t = "utf8"), n.from(s(e), "base64").toString(t);
          }, c.toBase64 = s, c.fromBase64 = a, c.toBuffer = function(e) {
            return n.from(s(e), "base64");
          }, t.default = c;
        },
        1518: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = function(e) {
            var t = e.length, r = t % 4;
            if (!r) return e;
            var i = t, o = 4 - r, s = t + o, a = n.alloc(s);
            for (a.write(e); o--; ) a.write("=", i++);
            return a.toString();
          };
        },
        3363: (e, t, r) => {
          e.exports = r(2240).default, e.exports.default = e.exports;
        },
        3550: function(e, t, r) {
          !function(e, t) {
            "use strict";
            function n(e, t) {
              if (!e) throw new Error(t || "Assertion failed");
            }
            function i(e, t) {
              e.super_ = t;
              var r = function() {};
              r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
            }
            function o(e, t, r) {
              if (o.isBN(e)) return e;
              this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== e && ("le" !== t && "be" !== t || (r = t, 
              t = 10), this._init(e || 0, t || 10, r || "be"));
            }
            var s;
            "object" == typeof e ? e.exports = o : t.BN = o, o.BN = o, o.wordSize = 26;
            try {
              s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(6601).Buffer;
            } catch (e) {}
            function a(e, t) {
              var r = e.charCodeAt(t);
              return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void n(!1, "Invalid character in " + e);
            }
            function c(e, t, r) {
              var n = a(e, r);
              return r - 1 >= t && (n |= a(e, r - 1) << 4), n;
            }
            function f(e, t, r, i) {
              for (var o = 0, s = 0, a = Math.min(e.length, r), c = t; c < a; c++) {
                var f = e.charCodeAt(c) - 48;
                o *= i, s = f >= 49 ? f - 49 + 10 : f >= 17 ? f - 17 + 10 : f, n(f >= 0 && s < i, "Invalid character"), o += s;
              }
              return o;
            }
            function u(e, t) {
              e.words = t.words, e.length = t.length, e.negative = t.negative, e.red = t.red;
            }
            if (o.isBN = function(e) {
              return e instanceof o || null !== e && "object" == typeof e && e.constructor.wordSize === o.wordSize && Array.isArray(e.words);
            }, o.max = function(e, t) {
              return e.cmp(t) > 0 ? e : t;
            }, o.min = function(e, t) {
              return e.cmp(t) < 0 ? e : t;
            }, o.prototype._init = function(e, t, r) {
              if ("number" == typeof e) return this._initNumber(e, t, r);
              if ("object" == typeof e) return this._initArray(e, t, r);
              "hex" === t && (t = 16), n(t === (0 | t) && t >= 2 && t <= 36);
              var i = 0;
              "-" === (e = e.toString().replace(/\s+/g, ""))[0] && (i++, this.negative = 1), i < e.length && (16 === t ? this._parseHex(e, i, r) : (this._parseBase(e, t, i), 
              "le" === r && this._initArray(this.toArray(), t, r)));
            }, o.prototype._initNumber = function(e, t, r) {
              e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [ 67108863 & e ], this.length = 1) : e < 4503599627370496 ? (this.words = [ 67108863 & e, e / 67108864 & 67108863 ], 
              this.length = 2) : (n(e < 9007199254740992), this.words = [ 67108863 & e, e / 67108864 & 67108863, 1 ], this.length = 3), 
              "le" === r && this._initArray(this.toArray(), t, r);
            }, o.prototype._initArray = function(e, t, r) {
              if (n("number" == typeof e.length), e.length <= 0) return this.words = [ 0 ], this.length = 1, this;
              this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) this.words[i] = 0;
              var o, s, a = 0;
              if ("be" === r) for (i = e.length - 1, o = 0; i >= 0; i -= 3) s = e[i] | e[i - 1] << 8 | e[i - 2] << 16, this.words[o] |= s << a & 67108863, 
              this.words[o + 1] = s >>> 26 - a & 67108863, (a += 24) >= 26 && (a -= 26, o++); else if ("le" === r) for (i = 0, o = 0; i < e.length; i += 3) s = e[i] | e[i + 1] << 8 | e[i + 2] << 16, 
              this.words[o] |= s << a & 67108863, this.words[o + 1] = s >>> 26 - a & 67108863, (a += 24) >= 26 && (a -= 26, o++);
              return this._strip();
            }, o.prototype._parseHex = function(e, t, r) {
              this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);
              for (var n = 0; n < this.length; n++) this.words[n] = 0;
              var i, o = 0, s = 0;
              if ("be" === r) for (n = e.length - 1; n >= t; n -= 2) i = c(e, t, n) << o, this.words[s] |= 67108863 & i, o >= 18 ? (o -= 18, 
              s += 1, this.words[s] |= i >>> 26) : o += 8; else for (n = (e.length - t) % 2 == 0 ? t + 1 : t; n < e.length; n += 2) i = c(e, t, n) << o, 
              this.words[s] |= 67108863 & i, o >= 18 ? (o -= 18, s += 1, this.words[s] |= i >>> 26) : o += 8;
              this._strip();
            }, o.prototype._parseBase = function(e, t, r) {
              this.words = [ 0 ], this.length = 1;
              for (var n = 0, i = 1; i <= 67108863; i *= t) n++;
              n--, i = i / t | 0;
              for (var o = e.length - r, s = o % n, a = Math.min(o, o - s) + r, c = 0, u = r; u < a; u += n) c = f(e, u, u + n, t), this.imuln(i), 
              this.words[0] + c < 67108864 ? this.words[0] += c : this._iaddn(c);
              if (0 !== s) {
                var h = 1;
                for (c = f(e, u, e.length, t), u = 0; u < s; u++) h *= t;
                this.imuln(h), this.words[0] + c < 67108864 ? this.words[0] += c : this._iaddn(c);
              }
              this._strip();
            }, o.prototype.copy = function(e) {
              e.words = new Array(this.length);
              for (var t = 0; t < this.length; t++) e.words[t] = this.words[t];
              e.length = this.length, e.negative = this.negative, e.red = this.red;
            }, o.prototype._move = function(e) {
              u(e, this);
            }, o.prototype.clone = function() {
              var e = new o(null);
              return this.copy(e), e;
            }, o.prototype._expand = function(e) {
              for (;this.length < e; ) this.words[this.length++] = 0;
              return this;
            }, o.prototype._strip = function() {
              for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
              return this._normSign();
            }, o.prototype._normSign = function() {
              return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
            }, "undefined" != typeof Symbol && "function" == typeof Symbol.for) try {
              o.prototype[Symbol.for("nodejs.util.inspect.custom")] = h;
            } catch (e) {
              o.prototype.inspect = h;
            } else o.prototype.inspect = h;
            function h() {
              return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
            }
            var d = [ "", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000" ], l = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ], p = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
            function b(e, t, r) {
              r.negative = t.negative ^ e.negative;
              var n = e.length + t.length | 0;
              r.length = n, n = n - 1 | 0;
              var i = 0 | e.words[0], o = 0 | t.words[0], s = i * o, a = 67108863 & s, c = s / 67108864 | 0;
              r.words[0] = a;
              for (var f = 1; f < n; f++) {
                for (var u = c >>> 26, h = 67108863 & c, d = Math.min(f, t.length - 1), l = Math.max(0, f - e.length + 1); l <= d; l++) {
                  var p = f - l | 0;
                  u += (s = (i = 0 | e.words[p]) * (o = 0 | t.words[l]) + h) / 67108864 | 0, h = 67108863 & s;
                }
                r.words[f] = 0 | h, c = 0 | u;
              }
              return 0 !== c ? r.words[f] = 0 | c : r.length--, r._strip();
            }
            o.prototype.toString = function(e, t) {
              var r;
              if (t = 0 | t || 1, 16 === (e = e || 10) || "hex" === e) {
                r = "";
                for (var i = 0, o = 0, s = 0; s < this.length; s++) {
                  var a = this.words[s], c = (16777215 & (a << i | o)).toString(16);
                  o = a >>> 24 - i & 16777215, (i += 2) >= 26 && (i -= 26, s--), r = 0 !== o || s !== this.length - 1 ? d[6 - c.length] + c + r : c + r;
                }
                for (0 !== o && (r = o.toString(16) + r); r.length % t != 0; ) r = "0" + r;
                return 0 !== this.negative && (r = "-" + r), r;
              }
              if (e === (0 | e) && e >= 2 && e <= 36) {
                var f = l[e], u = p[e];
                r = "";
                var h = this.clone();
                for (h.negative = 0; !h.isZero(); ) {
                  var b = h.modrn(u).toString(e);
                  r = (h = h.idivn(u)).isZero() ? b + r : d[f - b.length] + b + r;
                }
                for (this.isZero() && (r = "0" + r); r.length % t != 0; ) r = "0" + r;
                return 0 !== this.negative && (r = "-" + r), r;
              }
              n(!1, "Base should be between 2 and 36");
            }, o.prototype.toNumber = function() {
              var e = this.words[0];
              return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, "Number can only safely store up to 53 bits"), 
              0 !== this.negative ? -e : e;
            }, o.prototype.toJSON = function() {
              return this.toString(16, 2);
            }, s && (o.prototype.toBuffer = function(e, t) {
              return this.toArrayLike(s, e, t);
            }), o.prototype.toArray = function(e, t) {
              return this.toArrayLike(Array, e, t);
            }, o.prototype.toArrayLike = function(e, t, r) {
              this._strip();
              var i = this.byteLength(), o = r || Math.max(1, i);
              n(i <= o, "byte array longer than desired length"), n(o > 0, "Requested array length <= 0");
              var s = function(e, t) {
                return e.allocUnsafe ? e.allocUnsafe(t) : new e(t);
              }(e, o);
              return this["_toArrayLike" + ("le" === t ? "LE" : "BE")](s, i), s;
            }, o.prototype._toArrayLikeLE = function(e, t) {
              for (var r = 0, n = 0, i = 0, o = 0; i < this.length; i++) {
                var s = this.words[i] << o | n;
                e[r++] = 255 & s, r < e.length && (e[r++] = s >> 8 & 255), r < e.length && (e[r++] = s >> 16 & 255), 6 === o ? (r < e.length && (e[r++] = s >> 24 & 255), 
                n = 0, o = 0) : (n = s >>> 24, o += 2);
              }
              if (r < e.length) for (e[r++] = n; r < e.length; ) e[r++] = 0;
            }, o.prototype._toArrayLikeBE = function(e, t) {
              for (var r = e.length - 1, n = 0, i = 0, o = 0; i < this.length; i++) {
                var s = this.words[i] << o | n;
                e[r--] = 255 & s, r >= 0 && (e[r--] = s >> 8 & 255), r >= 0 && (e[r--] = s >> 16 & 255), 6 === o ? (r >= 0 && (e[r--] = s >> 24 & 255), 
                n = 0, o = 0) : (n = s >>> 24, o += 2);
              }
              if (r >= 0) for (e[r--] = n; r >= 0; ) e[r--] = 0;
            }, Math.clz32 ? o.prototype._countBits = function(e) {
              return 32 - Math.clz32(e);
            } : o.prototype._countBits = function(e) {
              var t = e, r = 0;
              return t >= 4096 && (r += 13, t >>>= 13), t >= 64 && (r += 7, t >>>= 7), t >= 8 && (r += 4, t >>>= 4), t >= 2 && (r += 2, 
              t >>>= 2), r + t;
            }, o.prototype._zeroBits = function(e) {
              if (0 === e) return 26;
              var t = e, r = 0;
              return 0 == (8191 & t) && (r += 13, t >>>= 13), 0 == (127 & t) && (r += 7, t >>>= 7), 0 == (15 & t) && (r += 4, t >>>= 4), 
              0 == (3 & t) && (r += 2, t >>>= 2), 0 == (1 & t) && r++, r;
            }, o.prototype.bitLength = function() {
              var e = this.words[this.length - 1], t = this._countBits(e);
              return 26 * (this.length - 1) + t;
            }, o.prototype.zeroBits = function() {
              if (this.isZero()) return 0;
              for (var e = 0, t = 0; t < this.length; t++) {
                var r = this._zeroBits(this.words[t]);
                if (e += r, 26 !== r) break;
              }
              return e;
            }, o.prototype.byteLength = function() {
              return Math.ceil(this.bitLength() / 8);
            }, o.prototype.toTwos = function(e) {
              return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();
            }, o.prototype.fromTwos = function(e) {
              return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();
            }, o.prototype.isNeg = function() {
              return 0 !== this.negative;
            }, o.prototype.neg = function() {
              return this.clone().ineg();
            }, o.prototype.ineg = function() {
              return this.isZero() || (this.negative ^= 1), this;
            }, o.prototype.iuor = function(e) {
              for (;this.length < e.length; ) this.words[this.length++] = 0;
              for (var t = 0; t < e.length; t++) this.words[t] = this.words[t] | e.words[t];
              return this._strip();
            }, o.prototype.ior = function(e) {
              return n(0 == (this.negative | e.negative)), this.iuor(e);
            }, o.prototype.or = function(e) {
              return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);
            }, o.prototype.uor = function(e) {
              return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);
            }, o.prototype.iuand = function(e) {
              var t;
              t = this.length > e.length ? e : this;
              for (var r = 0; r < t.length; r++) this.words[r] = this.words[r] & e.words[r];
              return this.length = t.length, this._strip();
            }, o.prototype.iand = function(e) {
              return n(0 == (this.negative | e.negative)), this.iuand(e);
            }, o.prototype.and = function(e) {
              return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);
            }, o.prototype.uand = function(e) {
              return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);
            }, o.prototype.iuxor = function(e) {
              var t, r;
              this.length > e.length ? (t = this, r = e) : (t = e, r = this);
              for (var n = 0; n < r.length; n++) this.words[n] = t.words[n] ^ r.words[n];
              if (this !== t) for (;n < t.length; n++) this.words[n] = t.words[n];
              return this.length = t.length, this._strip();
            }, o.prototype.ixor = function(e) {
              return n(0 == (this.negative | e.negative)), this.iuxor(e);
            }, o.prototype.xor = function(e) {
              return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);
            }, o.prototype.uxor = function(e) {
              return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);
            }, o.prototype.inotn = function(e) {
              n("number" == typeof e && e >= 0);
              var t = 0 | Math.ceil(e / 26), r = e % 26;
              this._expand(t), r > 0 && t--;
              for (var i = 0; i < t; i++) this.words[i] = 67108863 & ~this.words[i];
              return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this._strip();
            }, o.prototype.notn = function(e) {
              return this.clone().inotn(e);
            }, o.prototype.setn = function(e, t) {
              n("number" == typeof e && e >= 0);
              var r = e / 26 | 0, i = e % 26;
              return this._expand(r + 1), this.words[r] = t ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this._strip();
            }, o.prototype.iadd = function(e) {
              var t, r, n;
              if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();
              if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();
              this.length > e.length ? (r = this, n = e) : (r = e, n = this);
              for (var i = 0, o = 0; o < n.length; o++) t = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
              for (;0 !== i && o < r.length; o++) t = (0 | r.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
              if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
              return this;
            }, o.prototype.add = function(e) {
              var t;
              return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, 
              t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);
            }, o.prototype.isub = function(e) {
              if (0 !== e.negative) {
                e.negative = 0;
                var t = this.iadd(e);
                return e.negative = 1, t._normSign();
              }
              if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();
              var r, n, i = this.cmp(e);
              if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
              i > 0 ? (r = this, n = e) : (r = e, n = this);
              for (var o = 0, s = 0; s < n.length; s++) o = (t = (0 | r.words[s]) - (0 | n.words[s]) + o) >> 26, this.words[s] = 67108863 & t;
              for (;0 !== o && s < r.length; s++) o = (t = (0 | r.words[s]) + o) >> 26, this.words[s] = 67108863 & t;
              if (0 === o && s < r.length && r !== this) for (;s < r.length; s++) this.words[s] = r.words[s];
              return this.length = Math.max(this.length, s), r !== this && (this.negative = 1), this._strip();
            }, o.prototype.sub = function(e) {
              return this.clone().isub(e);
            };
            var y = function(e, t, r) {
              var n, i, o, s = e.words, a = t.words, c = r.words, f = 0, u = 0 | s[0], h = 8191 & u, d = u >>> 13, l = 0 | s[1], p = 8191 & l, b = l >>> 13, y = 0 | s[2], g = 8191 & y, m = y >>> 13, v = 0 | s[3], w = 8191 & v, _ = v >>> 13, S = 0 | s[4], E = 8191 & S, A = S >>> 13, x = 0 | s[5], k = 8191 & x, P = x >>> 13, O = 0 | s[6], M = 8191 & O, I = O >>> 13, T = 0 | s[7], R = 8191 & T, C = T >>> 13, N = 0 | s[8], j = 8191 & N, B = N >>> 13, L = 0 | s[9], D = 8191 & L, U = L >>> 13, q = 0 | a[0], F = 8191 & q, H = q >>> 13, z = 0 | a[1], K = 8191 & z, V = z >>> 13, G = 0 | a[2], W = 8191 & G, X = G >>> 13, Y = 0 | a[3], J = 8191 & Y, $ = Y >>> 13, Z = 0 | a[4], Q = 8191 & Z, ee = Z >>> 13, te = 0 | a[5], re = 8191 & te, ne = te >>> 13, ie = 0 | a[6], oe = 8191 & ie, se = ie >>> 13, ae = 0 | a[7], ce = 8191 & ae, fe = ae >>> 13, ue = 0 | a[8], he = 8191 & ue, de = ue >>> 13, le = 0 | a[9], pe = 8191 & le, be = le >>> 13;
              r.negative = e.negative ^ t.negative, r.length = 19;
              var ye = (f + (n = Math.imul(h, F)) | 0) + ((8191 & (i = (i = Math.imul(h, H)) + Math.imul(d, F) | 0)) << 13) | 0;
              f = ((o = Math.imul(d, H)) + (i >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n = Math.imul(p, F), i = (i = Math.imul(p, H)) + Math.imul(b, F) | 0, 
              o = Math.imul(b, H);
              var ge = (f + (n = n + Math.imul(h, K) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, V) | 0) + Math.imul(d, K) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, V) | 0) + (i >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n = Math.imul(g, F), i = (i = Math.imul(g, H)) + Math.imul(m, F) | 0, 
              o = Math.imul(m, H), n = n + Math.imul(p, K) | 0, i = (i = i + Math.imul(p, V) | 0) + Math.imul(b, K) | 0, o = o + Math.imul(b, V) | 0;
              var me = (f + (n = n + Math.imul(h, W) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, X) | 0) + Math.imul(d, W) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, X) | 0) + (i >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, n = Math.imul(w, F), i = (i = Math.imul(w, H)) + Math.imul(_, F) | 0, 
              o = Math.imul(_, H), n = n + Math.imul(g, K) | 0, i = (i = i + Math.imul(g, V) | 0) + Math.imul(m, K) | 0, o = o + Math.imul(m, V) | 0, 
              n = n + Math.imul(p, W) | 0, i = (i = i + Math.imul(p, X) | 0) + Math.imul(b, W) | 0, o = o + Math.imul(b, X) | 0;
              var ve = (f + (n = n + Math.imul(h, J) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, $) | 0) + Math.imul(d, J) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, $) | 0) + (i >>> 13) | 0) + (ve >>> 26) | 0, ve &= 67108863, n = Math.imul(E, F), i = (i = Math.imul(E, H)) + Math.imul(A, F) | 0, 
              o = Math.imul(A, H), n = n + Math.imul(w, K) | 0, i = (i = i + Math.imul(w, V) | 0) + Math.imul(_, K) | 0, o = o + Math.imul(_, V) | 0, 
              n = n + Math.imul(g, W) | 0, i = (i = i + Math.imul(g, X) | 0) + Math.imul(m, W) | 0, o = o + Math.imul(m, X) | 0, n = n + Math.imul(p, J) | 0, 
              i = (i = i + Math.imul(p, $) | 0) + Math.imul(b, J) | 0, o = o + Math.imul(b, $) | 0;
              var we = (f + (n = n + Math.imul(h, Q) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ee) | 0) + Math.imul(d, Q) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, ee) | 0) + (i >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n = Math.imul(k, F), i = (i = Math.imul(k, H)) + Math.imul(P, F) | 0, 
              o = Math.imul(P, H), n = n + Math.imul(E, K) | 0, i = (i = i + Math.imul(E, V) | 0) + Math.imul(A, K) | 0, o = o + Math.imul(A, V) | 0, 
              n = n + Math.imul(w, W) | 0, i = (i = i + Math.imul(w, X) | 0) + Math.imul(_, W) | 0, o = o + Math.imul(_, X) | 0, n = n + Math.imul(g, J) | 0, 
              i = (i = i + Math.imul(g, $) | 0) + Math.imul(m, J) | 0, o = o + Math.imul(m, $) | 0, n = n + Math.imul(p, Q) | 0, i = (i = i + Math.imul(p, ee) | 0) + Math.imul(b, Q) | 0, 
              o = o + Math.imul(b, ee) | 0;
              var _e = (f + (n = n + Math.imul(h, re) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ne) | 0) + Math.imul(d, re) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, ne) | 0) + (i >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n = Math.imul(M, F), i = (i = Math.imul(M, H)) + Math.imul(I, F) | 0, 
              o = Math.imul(I, H), n = n + Math.imul(k, K) | 0, i = (i = i + Math.imul(k, V) | 0) + Math.imul(P, K) | 0, o = o + Math.imul(P, V) | 0, 
              n = n + Math.imul(E, W) | 0, i = (i = i + Math.imul(E, X) | 0) + Math.imul(A, W) | 0, o = o + Math.imul(A, X) | 0, n = n + Math.imul(w, J) | 0, 
              i = (i = i + Math.imul(w, $) | 0) + Math.imul(_, J) | 0, o = o + Math.imul(_, $) | 0, n = n + Math.imul(g, Q) | 0, i = (i = i + Math.imul(g, ee) | 0) + Math.imul(m, Q) | 0, 
              o = o + Math.imul(m, ee) | 0, n = n + Math.imul(p, re) | 0, i = (i = i + Math.imul(p, ne) | 0) + Math.imul(b, re) | 0, o = o + Math.imul(b, ne) | 0;
              var Se = (f + (n = n + Math.imul(h, oe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, se) | 0) + Math.imul(d, oe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, se) | 0) + (i >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n = Math.imul(R, F), i = (i = Math.imul(R, H)) + Math.imul(C, F) | 0, 
              o = Math.imul(C, H), n = n + Math.imul(M, K) | 0, i = (i = i + Math.imul(M, V) | 0) + Math.imul(I, K) | 0, o = o + Math.imul(I, V) | 0, 
              n = n + Math.imul(k, W) | 0, i = (i = i + Math.imul(k, X) | 0) + Math.imul(P, W) | 0, o = o + Math.imul(P, X) | 0, n = n + Math.imul(E, J) | 0, 
              i = (i = i + Math.imul(E, $) | 0) + Math.imul(A, J) | 0, o = o + Math.imul(A, $) | 0, n = n + Math.imul(w, Q) | 0, i = (i = i + Math.imul(w, ee) | 0) + Math.imul(_, Q) | 0, 
              o = o + Math.imul(_, ee) | 0, n = n + Math.imul(g, re) | 0, i = (i = i + Math.imul(g, ne) | 0) + Math.imul(m, re) | 0, o = o + Math.imul(m, ne) | 0, 
              n = n + Math.imul(p, oe) | 0, i = (i = i + Math.imul(p, se) | 0) + Math.imul(b, oe) | 0, o = o + Math.imul(b, se) | 0;
              var Ee = (f + (n = n + Math.imul(h, ce) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, fe) | 0) + Math.imul(d, ce) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, fe) | 0) + (i >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n = Math.imul(j, F), i = (i = Math.imul(j, H)) + Math.imul(B, F) | 0, 
              o = Math.imul(B, H), n = n + Math.imul(R, K) | 0, i = (i = i + Math.imul(R, V) | 0) + Math.imul(C, K) | 0, o = o + Math.imul(C, V) | 0, 
              n = n + Math.imul(M, W) | 0, i = (i = i + Math.imul(M, X) | 0) + Math.imul(I, W) | 0, o = o + Math.imul(I, X) | 0, n = n + Math.imul(k, J) | 0, 
              i = (i = i + Math.imul(k, $) | 0) + Math.imul(P, J) | 0, o = o + Math.imul(P, $) | 0, n = n + Math.imul(E, Q) | 0, i = (i = i + Math.imul(E, ee) | 0) + Math.imul(A, Q) | 0, 
              o = o + Math.imul(A, ee) | 0, n = n + Math.imul(w, re) | 0, i = (i = i + Math.imul(w, ne) | 0) + Math.imul(_, re) | 0, o = o + Math.imul(_, ne) | 0, 
              n = n + Math.imul(g, oe) | 0, i = (i = i + Math.imul(g, se) | 0) + Math.imul(m, oe) | 0, o = o + Math.imul(m, se) | 0, n = n + Math.imul(p, ce) | 0, 
              i = (i = i + Math.imul(p, fe) | 0) + Math.imul(b, ce) | 0, o = o + Math.imul(b, fe) | 0;
              var Ae = (f + (n = n + Math.imul(h, he) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, de) | 0) + Math.imul(d, he) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, de) | 0) + (i >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n = Math.imul(D, F), i = (i = Math.imul(D, H)) + Math.imul(U, F) | 0, 
              o = Math.imul(U, H), n = n + Math.imul(j, K) | 0, i = (i = i + Math.imul(j, V) | 0) + Math.imul(B, K) | 0, o = o + Math.imul(B, V) | 0, 
              n = n + Math.imul(R, W) | 0, i = (i = i + Math.imul(R, X) | 0) + Math.imul(C, W) | 0, o = o + Math.imul(C, X) | 0, n = n + Math.imul(M, J) | 0, 
              i = (i = i + Math.imul(M, $) | 0) + Math.imul(I, J) | 0, o = o + Math.imul(I, $) | 0, n = n + Math.imul(k, Q) | 0, i = (i = i + Math.imul(k, ee) | 0) + Math.imul(P, Q) | 0, 
              o = o + Math.imul(P, ee) | 0, n = n + Math.imul(E, re) | 0, i = (i = i + Math.imul(E, ne) | 0) + Math.imul(A, re) | 0, o = o + Math.imul(A, ne) | 0, 
              n = n + Math.imul(w, oe) | 0, i = (i = i + Math.imul(w, se) | 0) + Math.imul(_, oe) | 0, o = o + Math.imul(_, se) | 0, n = n + Math.imul(g, ce) | 0, 
              i = (i = i + Math.imul(g, fe) | 0) + Math.imul(m, ce) | 0, o = o + Math.imul(m, fe) | 0, n = n + Math.imul(p, he) | 0, i = (i = i + Math.imul(p, de) | 0) + Math.imul(b, he) | 0, 
              o = o + Math.imul(b, de) | 0;
              var xe = (f + (n = n + Math.imul(h, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, be) | 0) + Math.imul(d, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(d, be) | 0) + (i >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n = Math.imul(D, K), i = (i = Math.imul(D, V)) + Math.imul(U, K) | 0, 
              o = Math.imul(U, V), n = n + Math.imul(j, W) | 0, i = (i = i + Math.imul(j, X) | 0) + Math.imul(B, W) | 0, o = o + Math.imul(B, X) | 0, 
              n = n + Math.imul(R, J) | 0, i = (i = i + Math.imul(R, $) | 0) + Math.imul(C, J) | 0, o = o + Math.imul(C, $) | 0, n = n + Math.imul(M, Q) | 0, 
              i = (i = i + Math.imul(M, ee) | 0) + Math.imul(I, Q) | 0, o = o + Math.imul(I, ee) | 0, n = n + Math.imul(k, re) | 0, i = (i = i + Math.imul(k, ne) | 0) + Math.imul(P, re) | 0, 
              o = o + Math.imul(P, ne) | 0, n = n + Math.imul(E, oe) | 0, i = (i = i + Math.imul(E, se) | 0) + Math.imul(A, oe) | 0, o = o + Math.imul(A, se) | 0, 
              n = n + Math.imul(w, ce) | 0, i = (i = i + Math.imul(w, fe) | 0) + Math.imul(_, ce) | 0, o = o + Math.imul(_, fe) | 0, n = n + Math.imul(g, he) | 0, 
              i = (i = i + Math.imul(g, de) | 0) + Math.imul(m, he) | 0, o = o + Math.imul(m, de) | 0;
              var ke = (f + (n = n + Math.imul(p, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, be) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(b, be) | 0) + (i >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n = Math.imul(D, W), i = (i = Math.imul(D, X)) + Math.imul(U, W) | 0, 
              o = Math.imul(U, X), n = n + Math.imul(j, J) | 0, i = (i = i + Math.imul(j, $) | 0) + Math.imul(B, J) | 0, o = o + Math.imul(B, $) | 0, 
              n = n + Math.imul(R, Q) | 0, i = (i = i + Math.imul(R, ee) | 0) + Math.imul(C, Q) | 0, o = o + Math.imul(C, ee) | 0, n = n + Math.imul(M, re) | 0, 
              i = (i = i + Math.imul(M, ne) | 0) + Math.imul(I, re) | 0, o = o + Math.imul(I, ne) | 0, n = n + Math.imul(k, oe) | 0, i = (i = i + Math.imul(k, se) | 0) + Math.imul(P, oe) | 0, 
              o = o + Math.imul(P, se) | 0, n = n + Math.imul(E, ce) | 0, i = (i = i + Math.imul(E, fe) | 0) + Math.imul(A, ce) | 0, o = o + Math.imul(A, fe) | 0, 
              n = n + Math.imul(w, he) | 0, i = (i = i + Math.imul(w, de) | 0) + Math.imul(_, he) | 0, o = o + Math.imul(_, de) | 0;
              var Pe = (f + (n = n + Math.imul(g, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(g, be) | 0) + Math.imul(m, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(m, be) | 0) + (i >>> 13) | 0) + (Pe >>> 26) | 0, Pe &= 67108863, n = Math.imul(D, J), i = (i = Math.imul(D, $)) + Math.imul(U, J) | 0, 
              o = Math.imul(U, $), n = n + Math.imul(j, Q) | 0, i = (i = i + Math.imul(j, ee) | 0) + Math.imul(B, Q) | 0, o = o + Math.imul(B, ee) | 0, 
              n = n + Math.imul(R, re) | 0, i = (i = i + Math.imul(R, ne) | 0) + Math.imul(C, re) | 0, o = o + Math.imul(C, ne) | 0, n = n + Math.imul(M, oe) | 0, 
              i = (i = i + Math.imul(M, se) | 0) + Math.imul(I, oe) | 0, o = o + Math.imul(I, se) | 0, n = n + Math.imul(k, ce) | 0, i = (i = i + Math.imul(k, fe) | 0) + Math.imul(P, ce) | 0, 
              o = o + Math.imul(P, fe) | 0, n = n + Math.imul(E, he) | 0, i = (i = i + Math.imul(E, de) | 0) + Math.imul(A, he) | 0, o = o + Math.imul(A, de) | 0;
              var Oe = (f + (n = n + Math.imul(w, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, be) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(_, be) | 0) + (i >>> 13) | 0) + (Oe >>> 26) | 0, Oe &= 67108863, n = Math.imul(D, Q), i = (i = Math.imul(D, ee)) + Math.imul(U, Q) | 0, 
              o = Math.imul(U, ee), n = n + Math.imul(j, re) | 0, i = (i = i + Math.imul(j, ne) | 0) + Math.imul(B, re) | 0, o = o + Math.imul(B, ne) | 0, 
              n = n + Math.imul(R, oe) | 0, i = (i = i + Math.imul(R, se) | 0) + Math.imul(C, oe) | 0, o = o + Math.imul(C, se) | 0, n = n + Math.imul(M, ce) | 0, 
              i = (i = i + Math.imul(M, fe) | 0) + Math.imul(I, ce) | 0, o = o + Math.imul(I, fe) | 0, n = n + Math.imul(k, he) | 0, i = (i = i + Math.imul(k, de) | 0) + Math.imul(P, he) | 0, 
              o = o + Math.imul(P, de) | 0;
              var Me = (f + (n = n + Math.imul(E, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(E, be) | 0) + Math.imul(A, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(A, be) | 0) + (i >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, n = Math.imul(D, re), i = (i = Math.imul(D, ne)) + Math.imul(U, re) | 0, 
              o = Math.imul(U, ne), n = n + Math.imul(j, oe) | 0, i = (i = i + Math.imul(j, se) | 0) + Math.imul(B, oe) | 0, o = o + Math.imul(B, se) | 0, 
              n = n + Math.imul(R, ce) | 0, i = (i = i + Math.imul(R, fe) | 0) + Math.imul(C, ce) | 0, o = o + Math.imul(C, fe) | 0, n = n + Math.imul(M, he) | 0, 
              i = (i = i + Math.imul(M, de) | 0) + Math.imul(I, he) | 0, o = o + Math.imul(I, de) | 0;
              var Ie = (f + (n = n + Math.imul(k, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(k, be) | 0) + Math.imul(P, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(P, be) | 0) + (i >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, n = Math.imul(D, oe), i = (i = Math.imul(D, se)) + Math.imul(U, oe) | 0, 
              o = Math.imul(U, se), n = n + Math.imul(j, ce) | 0, i = (i = i + Math.imul(j, fe) | 0) + Math.imul(B, ce) | 0, o = o + Math.imul(B, fe) | 0, 
              n = n + Math.imul(R, he) | 0, i = (i = i + Math.imul(R, de) | 0) + Math.imul(C, he) | 0, o = o + Math.imul(C, de) | 0;
              var Te = (f + (n = n + Math.imul(M, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(M, be) | 0) + Math.imul(I, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(I, be) | 0) + (i >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n = Math.imul(D, ce), i = (i = Math.imul(D, fe)) + Math.imul(U, ce) | 0, 
              o = Math.imul(U, fe), n = n + Math.imul(j, he) | 0, i = (i = i + Math.imul(j, de) | 0) + Math.imul(B, he) | 0, o = o + Math.imul(B, de) | 0;
              var Re = (f + (n = n + Math.imul(R, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(R, be) | 0) + Math.imul(C, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(C, be) | 0) + (i >>> 13) | 0) + (Re >>> 26) | 0, Re &= 67108863, n = Math.imul(D, he), i = (i = Math.imul(D, de)) + Math.imul(U, he) | 0, 
              o = Math.imul(U, de);
              var Ce = (f + (n = n + Math.imul(j, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(j, be) | 0) + Math.imul(B, pe) | 0)) << 13) | 0;
              f = ((o = o + Math.imul(B, be) | 0) + (i >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863;
              var Ne = (f + (n = Math.imul(D, pe)) | 0) + ((8191 & (i = (i = Math.imul(D, be)) + Math.imul(U, pe) | 0)) << 13) | 0;
              return f = ((o = Math.imul(U, be)) + (i >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, c[0] = ye, c[1] = ge, c[2] = me, 
              c[3] = ve, c[4] = we, c[5] = _e, c[6] = Se, c[7] = Ee, c[8] = Ae, c[9] = xe, c[10] = ke, c[11] = Pe, c[12] = Oe, c[13] = Me, 
              c[14] = Ie, c[15] = Te, c[16] = Re, c[17] = Ce, c[18] = Ne, 0 !== f && (c[19] = f, r.length++), r;
            };
            function g(e, t, r) {
              r.negative = t.negative ^ e.negative, r.length = e.length + t.length;
              for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
                var s = i;
                i = 0;
                for (var a = 67108863 & n, c = Math.min(o, t.length - 1), f = Math.max(0, o - e.length + 1); f <= c; f++) {
                  var u = o - f, h = (0 | e.words[u]) * (0 | t.words[f]), d = 67108863 & h;
                  a = 67108863 & (d = d + a | 0), i += (s = (s = s + (h / 67108864 | 0) | 0) + (d >>> 26) | 0) >>> 26, s &= 67108863;
                }
                r.words[o] = a, n = s, s = i;
              }
              return 0 !== n ? r.words[o] = n : r.length--, r._strip();
            }
            function m(e, t, r) {
              return g(e, t, r);
            }
            function v(e, t) {
              this.x = e, this.y = t;
            }
            Math.imul || (y = b), o.prototype.mulTo = function(e, t) {
              var r = this.length + e.length;
              return 10 === this.length && 10 === e.length ? y(this, e, t) : r < 63 ? b(this, e, t) : r < 1024 ? g(this, e, t) : m(this, e, t);
            }, v.prototype.makeRBT = function(e) {
              for (var t = new Array(e), r = o.prototype._countBits(e) - 1, n = 0; n < e; n++) t[n] = this.revBin(n, r, e);
              return t;
            }, v.prototype.revBin = function(e, t, r) {
              if (0 === e || e === r - 1) return e;
              for (var n = 0, i = 0; i < t; i++) n |= (1 & e) << t - i - 1, e >>= 1;
              return n;
            }, v.prototype.permute = function(e, t, r, n, i, o) {
              for (var s = 0; s < o; s++) n[s] = t[e[s]], i[s] = r[e[s]];
            }, v.prototype.transform = function(e, t, r, n, i, o) {
              this.permute(o, e, t, r, n, i);
              for (var s = 1; s < i; s <<= 1) for (var a = s << 1, c = Math.cos(2 * Math.PI / a), f = Math.sin(2 * Math.PI / a), u = 0; u < i; u += a) for (var h = c, d = f, l = 0; l < s; l++) {
                var p = r[u + l], b = n[u + l], y = r[u + l + s], g = n[u + l + s], m = h * y - d * g;
                g = h * g + d * y, y = m, r[u + l] = p + y, n[u + l] = b + g, r[u + l + s] = p - y, n[u + l + s] = b - g, l !== a && (m = c * h - f * d, 
                d = c * d + f * h, h = m);
              }
            }, v.prototype.guessLen13b = function(e, t) {
              var r = 1 | Math.max(t, e), n = 1 & r, i = 0;
              for (r = r / 2 | 0; r; r >>>= 1) i++;
              return 1 << i + 1 + n;
            }, v.prototype.conjugate = function(e, t, r) {
              if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
                var i = e[n];
                e[n] = e[r - n - 1], e[r - n - 1] = i, i = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -i;
              }
            }, v.prototype.normalize13b = function(e, t) {
              for (var r = 0, n = 0; n < t / 2; n++) {
                var i = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;
                e[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
              }
              return e;
            }, v.prototype.convert13b = function(e, t, r, i) {
              for (var o = 0, s = 0; s < t; s++) o += 0 | e[s], r[2 * s] = 8191 & o, o >>>= 13, r[2 * s + 1] = 8191 & o, o >>>= 13;
              for (s = 2 * t; s < i; ++s) r[s] = 0;
              n(0 === o), n(0 == (-8192 & o));
            }, v.prototype.stub = function(e) {
              for (var t = new Array(e), r = 0; r < e; r++) t[r] = 0;
              return t;
            }, v.prototype.mulp = function(e, t, r) {
              var n = 2 * this.guessLen13b(e.length, t.length), i = this.makeRBT(n), o = this.stub(n), s = new Array(n), a = new Array(n), c = new Array(n), f = new Array(n), u = new Array(n), h = new Array(n), d = r.words;
              d.length = n, this.convert13b(e.words, e.length, s, n), this.convert13b(t.words, t.length, f, n), this.transform(s, o, a, c, n, i), 
              this.transform(f, o, u, h, n, i);
              for (var l = 0; l < n; l++) {
                var p = a[l] * u[l] - c[l] * h[l];
                c[l] = a[l] * h[l] + c[l] * u[l], a[l] = p;
              }
              return this.conjugate(a, c, n), this.transform(a, c, d, o, n, i), this.conjugate(d, o, n), this.normalize13b(d, n), r.negative = e.negative ^ t.negative, 
              r.length = e.length + t.length, r._strip();
            }, o.prototype.mul = function(e) {
              var t = new o(null);
              return t.words = new Array(this.length + e.length), this.mulTo(e, t);
            }, o.prototype.mulf = function(e) {
              var t = new o(null);
              return t.words = new Array(this.length + e.length), m(this, e, t);
            }, o.prototype.imul = function(e) {
              return this.clone().mulTo(e, this);
            }, o.prototype.imuln = function(e) {
              var t = e < 0;
              t && (e = -e), n("number" == typeof e), n(e < 67108864);
              for (var r = 0, i = 0; i < this.length; i++) {
                var o = (0 | this.words[i]) * e, s = (67108863 & o) + (67108863 & r);
                r >>= 26, r += o / 67108864 | 0, r += s >>> 26, this.words[i] = 67108863 & s;
              }
              return 0 !== r && (this.words[i] = r, this.length++), t ? this.ineg() : this;
            }, o.prototype.muln = function(e) {
              return this.clone().imuln(e);
            }, o.prototype.sqr = function() {
              return this.mul(this);
            }, o.prototype.isqr = function() {
              return this.imul(this.clone());
            }, o.prototype.pow = function(e) {
              var t = function(e) {
                for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
                  var n = r / 26 | 0, i = r % 26;
                  t[r] = e.words[n] >>> i & 1;
                }
                return t;
              }(e);
              if (0 === t.length) return new o(1);
              for (var r = this, n = 0; n < t.length && 0 === t[n]; n++, r = r.sqr()) ;
              if (++n < t.length) for (var i = r.sqr(); n < t.length; n++, i = i.sqr()) 0 !== t[n] && (r = r.mul(i));
              return r;
            }, o.prototype.iushln = function(e) {
              n("number" == typeof e && e >= 0);
              var t, r = e % 26, i = (e - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
              if (0 !== r) {
                var s = 0;
                for (t = 0; t < this.length; t++) {
                  var a = this.words[t] & o, c = (0 | this.words[t]) - a << r;
                  this.words[t] = c | s, s = a >>> 26 - r;
                }
                s && (this.words[t] = s, this.length++);
              }
              if (0 !== i) {
                for (t = this.length - 1; t >= 0; t--) this.words[t + i] = this.words[t];
                for (t = 0; t < i; t++) this.words[t] = 0;
                this.length += i;
              }
              return this._strip();
            }, o.prototype.ishln = function(e) {
              return n(0 === this.negative), this.iushln(e);
            }, o.prototype.iushrn = function(e, t, r) {
              var i;
              n("number" == typeof e && e >= 0), i = t ? (t - t % 26) / 26 : 0;
              var o = e % 26, s = Math.min((e - o) / 26, this.length), a = 67108863 ^ 67108863 >>> o << o, c = r;
              if (i -= s, i = Math.max(0, i), c) {
                for (var f = 0; f < s; f++) c.words[f] = this.words[f];
                c.length = s;
              }
              if (0 === s) ; else if (this.length > s) for (this.length -= s, f = 0; f < this.length; f++) this.words[f] = this.words[f + s]; else this.words[0] = 0, 
              this.length = 1;
              var u = 0;
              for (f = this.length - 1; f >= 0 && (0 !== u || f >= i); f--) {
                var h = 0 | this.words[f];
                this.words[f] = u << 26 - o | h >>> o, u = h & a;
              }
              return c && 0 !== u && (c.words[c.length++] = u), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
            }, o.prototype.ishrn = function(e, t, r) {
              return n(0 === this.negative), this.iushrn(e, t, r);
            }, o.prototype.shln = function(e) {
              return this.clone().ishln(e);
            }, o.prototype.ushln = function(e) {
              return this.clone().iushln(e);
            }, o.prototype.shrn = function(e) {
              return this.clone().ishrn(e);
            }, o.prototype.ushrn = function(e) {
              return this.clone().iushrn(e);
            }, o.prototype.testn = function(e) {
              n("number" == typeof e && e >= 0);
              var t = e % 26, r = (e - t) / 26, i = 1 << t;
              return !(this.length <= r || !(this.words[r] & i));
            }, o.prototype.imaskn = function(e) {
              n("number" == typeof e && e >= 0);
              var t = e % 26, r = (e - t) / 26;
              if (n(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;
              if (0 !== t && r++, this.length = Math.min(r, this.length), 0 !== t) {
                var i = 67108863 ^ 67108863 >>> t << t;
                this.words[this.length - 1] &= i;
              }
              return this._strip();
            }, o.prototype.maskn = function(e) {
              return this.clone().imaskn(e);
            }, o.prototype.iaddn = function(e) {
              return n("number" == typeof e), n(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= e ? (this.words[0] = e - (0 | this.words[0]), 
              this.negative = 0, this) : (this.negative = 0, this.isubn(e), this.negative = 1, this) : this._iaddn(e);
            }, o.prototype._iaddn = function(e) {
              this.words[0] += e;
              for (var t = 0; t < this.length && this.words[t] >= 67108864; t++) this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
              return this.length = Math.max(this.length, t + 1), this;
            }, o.prototype.isubn = function(e) {
              if (n("number" == typeof e), n(e < 67108864), e < 0) return this.iaddn(-e);
              if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;
              if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var t = 0; t < this.length && this.words[t] < 0; t++) this.words[t] += 67108864, 
              this.words[t + 1] -= 1;
              return this._strip();
            }, o.prototype.addn = function(e) {
              return this.clone().iaddn(e);
            }, o.prototype.subn = function(e) {
              return this.clone().isubn(e);
            }, o.prototype.iabs = function() {
              return this.negative = 0, this;
            }, o.prototype.abs = function() {
              return this.clone().iabs();
            }, o.prototype._ishlnsubmul = function(e, t, r) {
              var i, o, s = e.length + r;
              this._expand(s);
              var a = 0;
              for (i = 0; i < e.length; i++) {
                o = (0 | this.words[i + r]) + a;
                var c = (0 | e.words[i]) * t;
                a = ((o -= 67108863 & c) >> 26) - (c / 67108864 | 0), this.words[i + r] = 67108863 & o;
              }
              for (;i < this.length - r; i++) a = (o = (0 | this.words[i + r]) + a) >> 26, this.words[i + r] = 67108863 & o;
              if (0 === a) return this._strip();
              for (n(-1 === a), a = 0, i = 0; i < this.length; i++) a = (o = -(0 | this.words[i]) + a) >> 26, this.words[i] = 67108863 & o;
              return this.negative = 1, this._strip();
            }, o.prototype._wordDiv = function(e, t) {
              var r = (this.length, e.length), n = this.clone(), i = e, s = 0 | i.words[i.length - 1];
              0 != (r = 26 - this._countBits(s)) && (i = i.ushln(r), n.iushln(r), s = 0 | i.words[i.length - 1]);
              var a, c = n.length - i.length;
              if ("mod" !== t) {
                (a = new o(null)).length = c + 1, a.words = new Array(a.length);
                for (var f = 0; f < a.length; f++) a.words[f] = 0;
              }
              var u = n.clone()._ishlnsubmul(i, 1, c);
              0 === u.negative && (n = u, a && (a.words[c] = 1));
              for (var h = c - 1; h >= 0; h--) {
                var d = 67108864 * (0 | n.words[i.length + h]) + (0 | n.words[i.length + h - 1]);
                for (d = Math.min(d / s | 0, 67108863), n._ishlnsubmul(i, d, h); 0 !== n.negative; ) d--, n.negative = 0, n._ishlnsubmul(i, 1, h), 
                n.isZero() || (n.negative ^= 1);
                a && (a.words[h] = d);
              }
              return a && a._strip(), n._strip(), "div" !== t && 0 !== r && n.iushrn(r), {
                div: a || null,
                mod: n
              };
            }, o.prototype.divmod = function(e, t, r) {
              return n(!e.isZero()), this.isZero() ? {
                div: new o(0),
                mod: new o(0)
              } : 0 !== this.negative && 0 === e.negative ? (a = this.neg().divmod(e, t), "mod" !== t && (i = a.div.neg()), "div" !== t && (s = a.mod.neg(), 
              r && 0 !== s.negative && s.iadd(e)), {
                div: i,
                mod: s
              }) : 0 === this.negative && 0 !== e.negative ? (a = this.divmod(e.neg(), t), "mod" !== t && (i = a.div.neg()), {
                div: i,
                mod: a.mod
              }) : 0 != (this.negative & e.negative) ? (a = this.neg().divmod(e.neg(), t), "div" !== t && (s = a.mod.neg(), r && 0 !== s.negative && s.isub(e)), 
              {
                div: a.div,
                mod: s
              }) : e.length > this.length || this.cmp(e) < 0 ? {
                div: new o(0),
                mod: this
              } : 1 === e.length ? "div" === t ? {
                div: this.divn(e.words[0]),
                mod: null
              } : "mod" === t ? {
                div: null,
                mod: new o(this.modrn(e.words[0]))
              } : {
                div: this.divn(e.words[0]),
                mod: new o(this.modrn(e.words[0]))
              } : this._wordDiv(e, t);
              var i, s, a;
            }, o.prototype.div = function(e) {
              return this.divmod(e, "div", !1).div;
            }, o.prototype.mod = function(e) {
              return this.divmod(e, "mod", !1).mod;
            }, o.prototype.umod = function(e) {
              return this.divmod(e, "mod", !0).mod;
            }, o.prototype.divRound = function(e) {
              var t = this.divmod(e);
              if (t.mod.isZero()) return t.div;
              var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod, n = e.ushrn(1), i = e.andln(1), o = r.cmp(n);
              return o < 0 || 1 === i && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);
            }, o.prototype.modrn = function(e) {
              var t = e < 0;
              t && (e = -e), n(e <= 67108863);
              for (var r = (1 << 26) % e, i = 0, o = this.length - 1; o >= 0; o--) i = (r * i + (0 | this.words[o])) % e;
              return t ? -i : i;
            }, o.prototype.modn = function(e) {
              return this.modrn(e);
            }, o.prototype.idivn = function(e) {
              var t = e < 0;
              t && (e = -e), n(e <= 67108863);
              for (var r = 0, i = this.length - 1; i >= 0; i--) {
                var o = (0 | this.words[i]) + 67108864 * r;
                this.words[i] = o / e | 0, r = o % e;
              }
              return this._strip(), t ? this.ineg() : this;
            }, o.prototype.divn = function(e) {
              return this.clone().idivn(e);
            }, o.prototype.egcd = function(e) {
              n(0 === e.negative), n(!e.isZero());
              var t = this, r = e.clone();
              t = 0 !== t.negative ? t.umod(e) : t.clone();
              for (var i = new o(1), s = new o(0), a = new o(0), c = new o(1), f = 0; t.isEven() && r.isEven(); ) t.iushrn(1), r.iushrn(1), 
              ++f;
              for (var u = r.clone(), h = t.clone(); !t.isZero(); ) {
                for (var d = 0, l = 1; 0 == (t.words[0] & l) && d < 26; ++d, l <<= 1) ;
                if (d > 0) for (t.iushrn(d); d-- > 0; ) (i.isOdd() || s.isOdd()) && (i.iadd(u), s.isub(h)), i.iushrn(1), s.iushrn(1);
                for (var p = 0, b = 1; 0 == (r.words[0] & b) && p < 26; ++p, b <<= 1) ;
                if (p > 0) for (r.iushrn(p); p-- > 0; ) (a.isOdd() || c.isOdd()) && (a.iadd(u), c.isub(h)), a.iushrn(1), c.iushrn(1);
                t.cmp(r) >= 0 ? (t.isub(r), i.isub(a), s.isub(c)) : (r.isub(t), a.isub(i), c.isub(s));
              }
              return {
                a: a,
                b: c,
                gcd: r.iushln(f)
              };
            }, o.prototype._invmp = function(e) {
              n(0 === e.negative), n(!e.isZero());
              var t = this, r = e.clone();
              t = 0 !== t.negative ? t.umod(e) : t.clone();
              for (var i, s = new o(1), a = new o(0), c = r.clone(); t.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
                for (var f = 0, u = 1; 0 == (t.words[0] & u) && f < 26; ++f, u <<= 1) ;
                if (f > 0) for (t.iushrn(f); f-- > 0; ) s.isOdd() && s.iadd(c), s.iushrn(1);
                for (var h = 0, d = 1; 0 == (r.words[0] & d) && h < 26; ++h, d <<= 1) ;
                if (h > 0) for (r.iushrn(h); h-- > 0; ) a.isOdd() && a.iadd(c), a.iushrn(1);
                t.cmp(r) >= 0 ? (t.isub(r), s.isub(a)) : (r.isub(t), a.isub(s));
              }
              return (i = 0 === t.cmpn(1) ? s : a).cmpn(0) < 0 && i.iadd(e), i;
            }, o.prototype.gcd = function(e) {
              if (this.isZero()) return e.abs();
              if (e.isZero()) return this.abs();
              var t = this.clone(), r = e.clone();
              t.negative = 0, r.negative = 0;
              for (var n = 0; t.isEven() && r.isEven(); n++) t.iushrn(1), r.iushrn(1);
              for (;;) {
                for (;t.isEven(); ) t.iushrn(1);
                for (;r.isEven(); ) r.iushrn(1);
                var i = t.cmp(r);
                if (i < 0) {
                  var o = t;
                  t = r, r = o;
                } else if (0 === i || 0 === r.cmpn(1)) break;
                t.isub(r);
              }
              return r.iushln(n);
            }, o.prototype.invm = function(e) {
              return this.egcd(e).a.umod(e);
            }, o.prototype.isEven = function() {
              return 0 == (1 & this.words[0]);
            }, o.prototype.isOdd = function() {
              return 1 == (1 & this.words[0]);
            }, o.prototype.andln = function(e) {
              return this.words[0] & e;
            }, o.prototype.bincn = function(e) {
              n("number" == typeof e);
              var t = e % 26, r = (e - t) / 26, i = 1 << t;
              if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
              for (var o = i, s = r; 0 !== o && s < this.length; s++) {
                var a = 0 | this.words[s];
                o = (a += o) >>> 26, a &= 67108863, this.words[s] = a;
              }
              return 0 !== o && (this.words[s] = o, this.length++), this;
            }, o.prototype.isZero = function() {
              return 1 === this.length && 0 === this.words[0];
            }, o.prototype.cmpn = function(e) {
              var t, r = e < 0;
              if (0 !== this.negative && !r) return -1;
              if (0 === this.negative && r) return 1;
              if (this._strip(), this.length > 1) t = 1; else {
                r && (e = -e), n(e <= 67108863, "Number is too big");
                var i = 0 | this.words[0];
                t = i === e ? 0 : i < e ? -1 : 1;
              }
              return 0 !== this.negative ? 0 | -t : t;
            }, o.prototype.cmp = function(e) {
              if (0 !== this.negative && 0 === e.negative) return -1;
              if (0 === this.negative && 0 !== e.negative) return 1;
              var t = this.ucmp(e);
              return 0 !== this.negative ? 0 | -t : t;
            }, o.prototype.ucmp = function(e) {
              if (this.length > e.length) return 1;
              if (this.length < e.length) return -1;
              for (var t = 0, r = this.length - 1; r >= 0; r--) {
                var n = 0 | this.words[r], i = 0 | e.words[r];
                if (n !== i) {
                  n < i ? t = -1 : n > i && (t = 1);
                  break;
                }
              }
              return t;
            }, o.prototype.gtn = function(e) {
              return 1 === this.cmpn(e);
            }, o.prototype.gt = function(e) {
              return 1 === this.cmp(e);
            }, o.prototype.gten = function(e) {
              return this.cmpn(e) >= 0;
            }, o.prototype.gte = function(e) {
              return this.cmp(e) >= 0;
            }, o.prototype.ltn = function(e) {
              return -1 === this.cmpn(e);
            }, o.prototype.lt = function(e) {
              return -1 === this.cmp(e);
            }, o.prototype.lten = function(e) {
              return this.cmpn(e) <= 0;
            }, o.prototype.lte = function(e) {
              return this.cmp(e) <= 0;
            }, o.prototype.eqn = function(e) {
              return 0 === this.cmpn(e);
            }, o.prototype.eq = function(e) {
              return 0 === this.cmp(e);
            }, o.red = function(e) {
              return new k(e);
            }, o.prototype.toRed = function(e) {
              return n(!this.red, "Already a number in reduction context"), n(0 === this.negative, "red works only with positives"), e.convertTo(this)._forceRed(e);
            }, o.prototype.fromRed = function() {
              return n(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
            }, o.prototype._forceRed = function(e) {
              return this.red = e, this;
            }, o.prototype.forceRed = function(e) {
              return n(!this.red, "Already a number in reduction context"), this._forceRed(e);
            }, o.prototype.redAdd = function(e) {
              return n(this.red, "redAdd works only with red numbers"), this.red.add(this, e);
            }, o.prototype.redIAdd = function(e) {
              return n(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e);
            }, o.prototype.redSub = function(e) {
              return n(this.red, "redSub works only with red numbers"), this.red.sub(this, e);
            }, o.prototype.redISub = function(e) {
              return n(this.red, "redISub works only with red numbers"), this.red.isub(this, e);
            }, o.prototype.redShl = function(e) {
              return n(this.red, "redShl works only with red numbers"), this.red.shl(this, e);
            }, o.prototype.redMul = function(e) {
              return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.mul(this, e);
            }, o.prototype.redIMul = function(e) {
              return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.imul(this, e);
            }, o.prototype.redSqr = function() {
              return n(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
            }, o.prototype.redISqr = function() {
              return n(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
            }, o.prototype.redSqrt = function() {
              return n(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
            }, o.prototype.redInvm = function() {
              return n(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
            }, o.prototype.redNeg = function() {
              return n(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
            }, o.prototype.redPow = function(e) {
              return n(this.red && !e.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e);
            };
            var w = {
              k256: null,
              p224: null,
              p192: null,
              p25519: null
            };
            function _(e, t) {
              this.name = e, this.p = new o(t, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
            }
            function S() {
              _.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
            }
            function E() {
              _.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
            }
            function A() {
              _.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
            }
            function x() {
              _.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
            }
            function k(e) {
              if ("string" == typeof e) {
                var t = o._prime(e);
                this.m = t.p, this.prime = t;
              } else n(e.gtn(1), "modulus must be greater than 1"), this.m = e, this.prime = null;
            }
            function P(e) {
              k.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), 
              this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
              this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
            }
            _.prototype._tmp = function() {
              var e = new o(null);
              return e.words = new Array(Math.ceil(this.n / 13)), e;
            }, _.prototype.ireduce = function(e) {
              var t, r = e;
              do {
                this.split(r, this.tmp), t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength();
              } while (t > this.n);
              var n = t < this.n ? -1 : r.ucmp(this.p);
              return 0 === n ? (r.words[0] = 0, r.length = 1) : n > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), 
              r;
            }, _.prototype.split = function(e, t) {
              e.iushrn(this.n, 0, t);
            }, _.prototype.imulK = function(e) {
              return e.imul(this.k);
            }, i(S, _), S.prototype.split = function(e, t) {
              for (var r = 4194303, n = Math.min(e.length, 9), i = 0; i < n; i++) t.words[i] = e.words[i];
              if (t.length = n, e.length <= 9) return e.words[0] = 0, void (e.length = 1);
              var o = e.words[9];
              for (t.words[t.length++] = o & r, i = 10; i < e.length; i++) {
                var s = 0 | e.words[i];
                e.words[i - 10] = (s & r) << 4 | o >>> 22, o = s;
              }
              o >>>= 22, e.words[i - 10] = o, 0 === o && e.length > 10 ? e.length -= 10 : e.length -= 9;
            }, S.prototype.imulK = function(e) {
              e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;
              for (var t = 0, r = 0; r < e.length; r++) {
                var n = 0 | e.words[r];
                t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);
              }
              return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;
            }, i(E, _), i(A, _), i(x, _), x.prototype.imulK = function(e) {
              for (var t = 0, r = 0; r < e.length; r++) {
                var n = 19 * (0 | e.words[r]) + t, i = 67108863 & n;
                n >>>= 26, e.words[r] = i, t = n;
              }
              return 0 !== t && (e.words[e.length++] = t), e;
            }, o._prime = function(e) {
              if (w[e]) return w[e];
              var t;
              if ("k256" === e) t = new S; else if ("p224" === e) t = new E; else if ("p192" === e) t = new A; else {
                if ("p25519" !== e) throw new Error("Unknown prime " + e);
                t = new x;
              }
              return w[e] = t, t;
            }, k.prototype._verify1 = function(e) {
              n(0 === e.negative, "red works only with positives"), n(e.red, "red works only with red numbers");
            }, k.prototype._verify2 = function(e, t) {
              n(0 == (e.negative | t.negative), "red works only with positives"), n(e.red && e.red === t.red, "red works only with red numbers");
            }, k.prototype.imod = function(e) {
              return this.prime ? this.prime.ireduce(e)._forceRed(this) : (u(e, e.umod(this.m)._forceRed(this)), e);
            }, k.prototype.neg = function(e) {
              return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);
            }, k.prototype.add = function(e, t) {
              this._verify2(e, t);
              var r = e.add(t);
              return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
            }, k.prototype.iadd = function(e, t) {
              this._verify2(e, t);
              var r = e.iadd(t);
              return r.cmp(this.m) >= 0 && r.isub(this.m), r;
            }, k.prototype.sub = function(e, t) {
              this._verify2(e, t);
              var r = e.sub(t);
              return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
            }, k.prototype.isub = function(e, t) {
              this._verify2(e, t);
              var r = e.isub(t);
              return r.cmpn(0) < 0 && r.iadd(this.m), r;
            }, k.prototype.shl = function(e, t) {
              return this._verify1(e), this.imod(e.ushln(t));
            }, k.prototype.imul = function(e, t) {
              return this._verify2(e, t), this.imod(e.imul(t));
            }, k.prototype.mul = function(e, t) {
              return this._verify2(e, t), this.imod(e.mul(t));
            }, k.prototype.isqr = function(e) {
              return this.imul(e, e.clone());
            }, k.prototype.sqr = function(e) {
              return this.mul(e, e);
            }, k.prototype.sqrt = function(e) {
              if (e.isZero()) return e.clone();
              var t = this.m.andln(3);
              if (n(t % 2 == 1), 3 === t) {
                var r = this.m.add(new o(1)).iushrn(2);
                return this.pow(e, r);
              }
              for (var i = this.m.subn(1), s = 0; !i.isZero() && 0 === i.andln(1); ) s++, i.iushrn(1);
              n(!i.isZero());
              var a = new o(1).toRed(this), c = a.redNeg(), f = this.m.subn(1).iushrn(1), u = this.m.bitLength();
              for (u = new o(2 * u * u).toRed(this); 0 !== this.pow(u, f).cmp(c); ) u.redIAdd(c);
              for (var h = this.pow(u, i), d = this.pow(e, i.addn(1).iushrn(1)), l = this.pow(e, i), p = s; 0 !== l.cmp(a); ) {
                for (var b = l, y = 0; 0 !== b.cmp(a); y++) b = b.redSqr();
                n(y < p);
                var g = this.pow(h, new o(1).iushln(p - y - 1));
                d = d.redMul(g), h = g.redSqr(), l = l.redMul(h), p = y;
              }
              return d;
            }, k.prototype.invm = function(e) {
              var t = e._invmp(this.m);
              return 0 !== t.negative ? (t.negative = 0, this.imod(t).redNeg()) : this.imod(t);
            }, k.prototype.pow = function(e, t) {
              if (t.isZero()) return new o(1).toRed(this);
              if (0 === t.cmpn(1)) return e.clone();
              var r = new Array(16);
              r[0] = new o(1).toRed(this), r[1] = e;
              for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], e);
              var i = r[0], s = 0, a = 0, c = t.bitLength() % 26;
              for (0 === c && (c = 26), n = t.length - 1; n >= 0; n--) {
                for (var f = t.words[n], u = c - 1; u >= 0; u--) {
                  var h = f >> u & 1;
                  i !== r[0] && (i = this.sqr(i)), 0 !== h || 0 !== s ? (s <<= 1, s |= h, (4 == ++a || 0 === n && 0 === u) && (i = this.mul(i, r[s]), 
                  a = 0, s = 0)) : a = 0;
                }
                c = 26;
              }
              return i;
            }, k.prototype.convertTo = function(e) {
              var t = e.umod(this.m);
              return t === e ? t.clone() : t;
            }, k.prototype.convertFrom = function(e) {
              var t = e.clone();
              return t.red = null, t;
            }, o.mont = function(e) {
              return new P(e);
            }, i(P, k), P.prototype.convertTo = function(e) {
              return this.imod(e.ushln(this.shift));
            }, P.prototype.convertFrom = function(e) {
              var t = this.imod(e.mul(this.rinv));
              return t.red = null, t;
            }, P.prototype.imul = function(e, t) {
              if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;
              var r = e.imul(t), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), o = i;
              return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
            }, P.prototype.mul = function(e, t) {
              if (e.isZero() || t.isZero()) return new o(0)._forceRed(this);
              var r = e.mul(t), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), s = i;
              return i.cmp(this.m) >= 0 ? s = i.isub(this.m) : i.cmpn(0) < 0 && (s = i.iadd(this.m)), s._forceRed(this);
            }, P.prototype.invm = function(e) {
              return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);
            };
          }(e = r.nmd(e), this);
        },
        9931: (e, t, r) => {
          var n;
          function i(e) {
            this.rand = e;
          }
          if (e.exports = function(e) {
            return n || (n = new i(null)), n.generate(e);
          }, e.exports.Rand = i, i.prototype.generate = function(e) {
            return this._rand(e);
          }, i.prototype._rand = function(e) {
            if (this.rand.getBytes) return this.rand.getBytes(e);
            for (var t = new Uint8Array(e), r = 0; r < t.length; r++) t[r] = this.rand.getByte();
            return t;
          }, "object" == typeof self) self.crypto && self.crypto.getRandomValues ? i.prototype._rand = function(e) {
            var t = new Uint8Array(e);
            return self.crypto.getRandomValues(t), t;
          } : self.msCrypto && self.msCrypto.getRandomValues ? i.prototype._rand = function(e) {
            var t = new Uint8Array(e);
            return self.msCrypto.getRandomValues(t), t;
          } : "object" == typeof window && (i.prototype._rand = function() {
            throw new Error("Not implemented yet");
          }); else try {
            var o = r(9214);
            if ("function" != typeof o.randomBytes) throw new Error("Not supported");
            i.prototype._rand = function(e) {
              return o.randomBytes(e);
            };
          } catch (e) {}
        },
        4497: (e, t, r) => {
          var n = r(9509).Buffer;
          function i(e) {
            n.isBuffer(e) || (e = n.from(e));
            for (var t = e.length / 4 | 0, r = new Array(t), i = 0; i < t; i++) r[i] = e.readUInt32BE(4 * i);
            return r;
          }
          function o(e) {
            for (;0 < e.length; e++) e[0] = 0;
          }
          function s(e, t, r, n, i) {
            for (var o, s, a, c, f = r[0], u = r[1], h = r[2], d = r[3], l = e[0] ^ t[0], p = e[1] ^ t[1], b = e[2] ^ t[2], y = e[3] ^ t[3], g = 4, m = 1; m < i; m++) o = f[l >>> 24] ^ u[p >>> 16 & 255] ^ h[b >>> 8 & 255] ^ d[255 & y] ^ t[g++], 
            s = f[p >>> 24] ^ u[b >>> 16 & 255] ^ h[y >>> 8 & 255] ^ d[255 & l] ^ t[g++], a = f[b >>> 24] ^ u[y >>> 16 & 255] ^ h[l >>> 8 & 255] ^ d[255 & p] ^ t[g++], 
            c = f[y >>> 24] ^ u[l >>> 16 & 255] ^ h[p >>> 8 & 255] ^ d[255 & b] ^ t[g++], l = o, p = s, b = a, y = c;
            return o = (n[l >>> 24] << 24 | n[p >>> 16 & 255] << 16 | n[b >>> 8 & 255] << 8 | n[255 & y]) ^ t[g++], s = (n[p >>> 24] << 24 | n[b >>> 16 & 255] << 16 | n[y >>> 8 & 255] << 8 | n[255 & l]) ^ t[g++], 
            a = (n[b >>> 24] << 24 | n[y >>> 16 & 255] << 16 | n[l >>> 8 & 255] << 8 | n[255 & p]) ^ t[g++], c = (n[y >>> 24] << 24 | n[l >>> 16 & 255] << 16 | n[p >>> 8 & 255] << 8 | n[255 & b]) ^ t[g++], 
            [ o >>>= 0, s >>>= 0, a >>>= 0, c >>>= 0 ];
          }
          var a = [ 0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54 ], c = function() {
            for (var e = new Array(256), t = 0; t < 256; t++) e[t] = t < 128 ? t << 1 : t << 1 ^ 283;
            for (var r = [], n = [], i = [ [], [], [], [] ], o = [ [], [], [], [] ], s = 0, a = 0, c = 0; c < 256; ++c) {
              var f = a ^ a << 1 ^ a << 2 ^ a << 3 ^ a << 4;
              f = f >>> 8 ^ 255 & f ^ 99, r[s] = f, n[f] = s;
              var u = e[s], h = e[u], d = e[h], l = 257 * e[f] ^ 16843008 * f;
              i[0][s] = l << 24 | l >>> 8, i[1][s] = l << 16 | l >>> 16, i[2][s] = l << 8 | l >>> 24, i[3][s] = l, l = 16843009 * d ^ 65537 * h ^ 257 * u ^ 16843008 * s, 
              o[0][f] = l << 24 | l >>> 8, o[1][f] = l << 16 | l >>> 16, o[2][f] = l << 8 | l >>> 24, o[3][f] = l, 0 === s ? s = a = 1 : (s = u ^ e[e[e[d ^ u]]], 
              a ^= e[e[a]]);
            }
            return {
              SBOX: r,
              INV_SBOX: n,
              SUB_MIX: i,
              INV_SUB_MIX: o
            };
          }();
          function f(e) {
            this._key = i(e), this._reset();
          }
          f.blockSize = 16, f.keySize = 32, f.prototype.blockSize = f.blockSize, f.prototype.keySize = f.keySize, f.prototype._reset = function() {
            for (var e = this._key, t = e.length, r = t + 6, n = 4 * (r + 1), i = [], o = 0; o < t; o++) i[o] = e[o];
            for (o = t; o < n; o++) {
              var s = i[o - 1];
              o % t == 0 ? (s = s << 8 | s >>> 24, s = c.SBOX[s >>> 24] << 24 | c.SBOX[s >>> 16 & 255] << 16 | c.SBOX[s >>> 8 & 255] << 8 | c.SBOX[255 & s], 
              s ^= a[o / t | 0] << 24) : t > 6 && o % t == 4 && (s = c.SBOX[s >>> 24] << 24 | c.SBOX[s >>> 16 & 255] << 16 | c.SBOX[s >>> 8 & 255] << 8 | c.SBOX[255 & s]), 
              i[o] = i[o - t] ^ s;
            }
            for (var f = [], u = 0; u < n; u++) {
              var h = n - u, d = i[h - (u % 4 ? 0 : 4)];
              f[u] = u < 4 || h <= 4 ? d : c.INV_SUB_MIX[0][c.SBOX[d >>> 24]] ^ c.INV_SUB_MIX[1][c.SBOX[d >>> 16 & 255]] ^ c.INV_SUB_MIX[2][c.SBOX[d >>> 8 & 255]] ^ c.INV_SUB_MIX[3][c.SBOX[255 & d]];
            }
            this._nRounds = r, this._keySchedule = i, this._invKeySchedule = f;
          }, f.prototype.encryptBlockRaw = function(e) {
            return s(e = i(e), this._keySchedule, c.SUB_MIX, c.SBOX, this._nRounds);
          }, f.prototype.encryptBlock = function(e) {
            var t = this.encryptBlockRaw(e), r = n.allocUnsafe(16);
            return r.writeUInt32BE(t[0], 0), r.writeUInt32BE(t[1], 4), r.writeUInt32BE(t[2], 8), r.writeUInt32BE(t[3], 12), r;
          }, f.prototype.decryptBlock = function(e) {
            var t = (e = i(e))[1];
            e[1] = e[3], e[3] = t;
            var r = s(e, this._invKeySchedule, c.INV_SUB_MIX, c.INV_SBOX, this._nRounds), o = n.allocUnsafe(16);
            return o.writeUInt32BE(r[0], 0), o.writeUInt32BE(r[3], 4), o.writeUInt32BE(r[2], 8), o.writeUInt32BE(r[1], 12), o;
          }, f.prototype.scrub = function() {
            o(this._keySchedule), o(this._invKeySchedule), o(this._key);
          }, e.exports.AES = f;
        },
        2422: (e, t, r) => {
          var n = r(4497), i = r(9509).Buffer, o = r(1027), s = r(5717), a = r(3288), c = r(7295), f = r(685);
          function u(e, t, r, s) {
            o.call(this);
            var c = i.alloc(4, 0);
            this._cipher = new n.AES(t);
            var u = this._cipher.encryptBlock(c);
            this._ghash = new a(u), r = function(e, t, r) {
              if (12 === t.length) return e._finID = i.concat([ t, i.from([ 0, 0, 0, 1 ]) ]), i.concat([ t, i.from([ 0, 0, 0, 2 ]) ]);
              var n = new a(r), o = t.length, s = o % 16;
              n.update(t), s && (s = 16 - s, n.update(i.alloc(s, 0))), n.update(i.alloc(8, 0));
              var c = 8 * o, u = i.alloc(8);
              u.writeUIntBE(c, 0, 8), n.update(u), e._finID = n.state;
              var h = i.from(e._finID);
              return f(h), h;
            }(this, r, u), this._prev = i.from(r), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = s, 
            this._alen = 0, this._len = 0, this._mode = e, this._authTag = null, this._called = !1;
          }
          s(u, o), u.prototype._update = function(e) {
            if (!this._called && this._alen) {
              var t = 16 - this._alen % 16;
              t < 16 && (t = i.alloc(t, 0), this._ghash.update(t));
            }
            this._called = !0;
            var r = this._mode.encrypt(this, e);
            return this._decrypt ? this._ghash.update(e) : this._ghash.update(r), this._len += e.length, r;
          }, u.prototype._final = function() {
            if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
            var e = c(this._ghash.final(8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
            if (this._decrypt && function(e, t) {
              var r = 0;
              e.length !== t.length && r++;
              for (var n = Math.min(e.length, t.length), i = 0; i < n; ++i) r += e[i] ^ t[i];
              return r;
            }(e, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
            this._authTag = e, this._cipher.scrub();
          }, u.prototype.getAuthTag = function() {
            if (this._decrypt || !i.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
            return this._authTag;
          }, u.prototype.setAuthTag = function(e) {
            if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
            this._authTag = e;
          }, u.prototype.setAAD = function(e) {
            if (this._called) throw new Error("Attempting to set AAD in unsupported state");
            this._ghash.update(e), this._alen += e.length;
          }, e.exports = u;
        },
        4696: (e, t, r) => {
          var n = r(1494), i = r(6193), o = r(4946);
          t.createCipher = t.Cipher = n.createCipher, t.createCipheriv = t.Cipheriv = n.createCipheriv, t.createDecipher = t.Decipher = i.createDecipher, 
          t.createDecipheriv = t.Decipheriv = i.createDecipheriv, t.listCiphers = t.getCiphers = function() {
            return Object.keys(o);
          };
        },
        6193: (e, t, r) => {
          var n = r(2422), i = r(9509).Buffer, o = r(45), s = r(5969), a = r(1027), c = r(4497), f = r(3048);
          function u(e, t, r) {
            a.call(this), this._cache = new h, this._last = void 0, this._cipher = new c.AES(t), this._prev = i.from(r), this._mode = e, 
            this._autopadding = !0;
          }
          function h() {
            this.cache = i.allocUnsafe(0);
          }
          function d(e, t, r) {
            var a = o[e.toLowerCase()];
            if (!a) throw new TypeError("invalid suite type");
            if ("string" == typeof r && (r = i.from(r)), "GCM" !== a.mode && r.length !== a.iv) throw new TypeError("invalid iv length " + r.length);
            if ("string" == typeof t && (t = i.from(t)), t.length !== a.key / 8) throw new TypeError("invalid key length " + t.length);
            return "stream" === a.type ? new s(a.module, t, r, !0) : "auth" === a.type ? new n(a.module, t, r, !0) : new u(a.module, t, r);
          }
          r(5717)(u, a), u.prototype._update = function(e) {
            var t, r;
            this._cache.add(e);
            for (var n = []; t = this._cache.get(this._autopadding); ) r = this._mode.decrypt(this, t), n.push(r);
            return i.concat(n);
          }, u.prototype._final = function() {
            var e = this._cache.flush();
            if (this._autopadding) return function(e) {
              var t = e[15];
              if (t < 1 || t > 16) throw new Error("unable to decrypt data");
              for (var r = -1; ++r < t; ) if (e[r + (16 - t)] !== t) throw new Error("unable to decrypt data");
              if (16 !== t) return e.slice(0, 16 - t);
            }(this._mode.decrypt(this, e));
            if (e) throw new Error("data not multiple of block length");
          }, u.prototype.setAutoPadding = function(e) {
            return this._autopadding = !!e, this;
          }, h.prototype.add = function(e) {
            this.cache = i.concat([ this.cache, e ]);
          }, h.prototype.get = function(e) {
            var t;
            if (e) {
              if (this.cache.length > 16) return t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t;
            } else if (this.cache.length >= 16) return t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t;
            return null;
          }, h.prototype.flush = function() {
            if (this.cache.length) return this.cache;
          }, t.createDecipher = function(e, t) {
            var r = o[e.toLowerCase()];
            if (!r) throw new TypeError("invalid suite type");
            var n = f(t, !1, r.key, r.iv);
            return d(e, n.key, n.iv);
          }, t.createDecipheriv = d;
        },
        1494: (e, t, r) => {
          var n = r(45), i = r(2422), o = r(9509).Buffer, s = r(5969), a = r(1027), c = r(4497), f = r(3048);
          function u(e, t, r) {
            a.call(this), this._cache = new d, this._cipher = new c.AES(t), this._prev = o.from(r), this._mode = e, this._autopadding = !0;
          }
          r(5717)(u, a), u.prototype._update = function(e) {
            var t, r;
            this._cache.add(e);
            for (var n = []; t = this._cache.get(); ) r = this._mode.encrypt(this, t), n.push(r);
            return o.concat(n);
          };
          var h = o.alloc(16, 16);
          function d() {
            this.cache = o.allocUnsafe(0);
          }
          function l(e, t, r) {
            var a = n[e.toLowerCase()];
            if (!a) throw new TypeError("invalid suite type");
            if ("string" == typeof t && (t = o.from(t)), t.length !== a.key / 8) throw new TypeError("invalid key length " + t.length);
            if ("string" == typeof r && (r = o.from(r)), "GCM" !== a.mode && r.length !== a.iv) throw new TypeError("invalid iv length " + r.length);
            return "stream" === a.type ? new s(a.module, t, r) : "auth" === a.type ? new i(a.module, t, r) : new u(a.module, t, r);
          }
          u.prototype._final = function() {
            var e = this._cache.flush();
            if (this._autopadding) return e = this._mode.encrypt(this, e), this._cipher.scrub(), e;
            if (!e.equals(h)) throw this._cipher.scrub(), new Error("data not multiple of block length");
          }, u.prototype.setAutoPadding = function(e) {
            return this._autopadding = !!e, this;
          }, d.prototype.add = function(e) {
            this.cache = o.concat([ this.cache, e ]);
          }, d.prototype.get = function() {
            if (this.cache.length > 15) {
              var e = this.cache.slice(0, 16);
              return this.cache = this.cache.slice(16), e;
            }
            return null;
          }, d.prototype.flush = function() {
            for (var e = 16 - this.cache.length, t = o.allocUnsafe(e), r = -1; ++r < e; ) t.writeUInt8(e, r);
            return o.concat([ this.cache, t ]);
          }, t.createCipheriv = l, t.createCipher = function(e, t) {
            var r = n[e.toLowerCase()];
            if (!r) throw new TypeError("invalid suite type");
            var i = f(t, !1, r.key, r.iv);
            return l(e, i.key, i.iv);
          };
        },
        3288: (e, t, r) => {
          var n = r(9509).Buffer, i = n.alloc(16, 0);
          function o(e) {
            var t = n.allocUnsafe(16);
            return t.writeUInt32BE(e[0] >>> 0, 0), t.writeUInt32BE(e[1] >>> 0, 4), t.writeUInt32BE(e[2] >>> 0, 8), t.writeUInt32BE(e[3] >>> 0, 12), 
            t;
          }
          function s(e) {
            this.h = e, this.state = n.alloc(16, 0), this.cache = n.allocUnsafe(0);
          }
          s.prototype.ghash = function(e) {
            for (var t = -1; ++t < e.length; ) this.state[t] ^= e[t];
            this._multiply();
          }, s.prototype._multiply = function() {
            for (var e, t, r, n = [ (e = this.h).readUInt32BE(0), e.readUInt32BE(4), e.readUInt32BE(8), e.readUInt32BE(12) ], i = [ 0, 0, 0, 0 ], s = -1; ++s < 128; ) {
              for (0 != (this.state[~~(s / 8)] & 1 << 7 - s % 8) && (i[0] ^= n[0], i[1] ^= n[1], i[2] ^= n[2], i[3] ^= n[3]), r = 0 != (1 & n[3]), 
              t = 3; t > 0; t--) n[t] = n[t] >>> 1 | (1 & n[t - 1]) << 31;
              n[0] = n[0] >>> 1, r && (n[0] = n[0] ^ 225 << 24);
            }
            this.state = o(i);
          }, s.prototype.update = function(e) {
            var t;
            for (this.cache = n.concat([ this.cache, e ]); this.cache.length >= 16; ) t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), 
            this.ghash(t);
          }, s.prototype.final = function(e, t) {
            return this.cache.length && this.ghash(n.concat([ this.cache, i ], 16)), this.ghash(o([ 0, e, 0, t ])), this.state;
          }, e.exports = s;
        },
        685: e => {
          e.exports = function(e) {
            for (var t, r = e.length; r--; ) {
              if (255 !== (t = e.readUInt8(r))) {
                t++, e.writeUInt8(t, r);
                break;
              }
              e.writeUInt8(0, r);
            }
          };
        },
        5292: (e, t, r) => {
          var n = r(7295);
          t.encrypt = function(e, t) {
            var r = n(t, e._prev);
            return e._prev = e._cipher.encryptBlock(r), e._prev;
          }, t.decrypt = function(e, t) {
            var r = e._prev;
            e._prev = t;
            var i = e._cipher.decryptBlock(t);
            return n(i, r);
          };
        },
        6311: (e, t, r) => {
          var n = r(9509).Buffer, i = r(7295);
          function o(e, t, r) {
            var o = t.length, s = i(t, e._cache);
            return e._cache = e._cache.slice(o), e._prev = n.concat([ e._prev, r ? t : s ]), s;
          }
          t.encrypt = function(e, t, r) {
            for (var i, s = n.allocUnsafe(0); t.length; ) {
              if (0 === e._cache.length && (e._cache = e._cipher.encryptBlock(e._prev), e._prev = n.allocUnsafe(0)), !(e._cache.length <= t.length)) {
                s = n.concat([ s, o(e, t, r) ]);
                break;
              }
              i = e._cache.length, s = n.concat([ s, o(e, t.slice(0, i), r) ]), t = t.slice(i);
            }
            return s;
          };
        },
        1510: (e, t, r) => {
          var n = r(9509).Buffer;
          function i(e, t, r) {
            for (var n, i, s = -1, a = 0; ++s < 8; ) n = t & 1 << 7 - s ? 128 : 0, a += (128 & (i = e._cipher.encryptBlock(e._prev)[0] ^ n)) >> s % 8, 
            e._prev = o(e._prev, r ? n : i);
            return a;
          }
          function o(e, t) {
            var r = e.length, i = -1, o = n.allocUnsafe(e.length);
            for (e = n.concat([ e, n.from([ t ]) ]); ++i < r; ) o[i] = e[i] << 1 | e[i + 1] >> 7;
            return o;
          }
          t.encrypt = function(e, t, r) {
            for (var o = t.length, s = n.allocUnsafe(o), a = -1; ++a < o; ) s[a] = i(e, t[a], r);
            return s;
          };
        },
        1964: (e, t, r) => {
          var n = r(9509).Buffer;
          function i(e, t, r) {
            var i = e._cipher.encryptBlock(e._prev)[0] ^ t;
            return e._prev = n.concat([ e._prev.slice(1), n.from([ r ? t : i ]) ]), i;
          }
          t.encrypt = function(e, t, r) {
            for (var o = t.length, s = n.allocUnsafe(o), a = -1; ++a < o; ) s[a] = i(e, t[a], r);
            return s;
          };
        },
        6009: (e, t, r) => {
          var n = r(7295), i = r(9509).Buffer, o = r(685);
          function s(e) {
            var t = e._cipher.encryptBlockRaw(e._prev);
            return o(e._prev), t;
          }
          t.encrypt = function(e, t) {
            var r = Math.ceil(t.length / 16), o = e._cache.length;
            e._cache = i.concat([ e._cache, i.allocUnsafe(16 * r) ]);
            for (var a = 0; a < r; a++) {
              var c = s(e), f = o + 16 * a;
              e._cache.writeUInt32BE(c[0], f + 0), e._cache.writeUInt32BE(c[1], f + 4), e._cache.writeUInt32BE(c[2], f + 8), e._cache.writeUInt32BE(c[3], f + 12);
            }
            var u = e._cache.slice(0, t.length);
            return e._cache = e._cache.slice(t.length), n(t, u);
          };
        },
        1084: (e, t) => {
          t.encrypt = function(e, t) {
            return e._cipher.encryptBlock(t);
          }, t.decrypt = function(e, t) {
            return e._cipher.decryptBlock(t);
          };
        },
        45: (e, t, r) => {
          var n = {
            ECB: r(1084),
            CBC: r(5292),
            CFB: r(6311),
            CFB8: r(1964),
            CFB1: r(1510),
            OFB: r(8861),
            CTR: r(6009),
            GCM: r(6009)
          }, i = r(4946);
          for (var o in i) i[o].module = n[i[o].mode];
          e.exports = i;
        },
        8861: (e, t, r) => {
          var n = r(8764).Buffer, i = r(7295);
          function o(e) {
            return e._prev = e._cipher.encryptBlock(e._prev), e._prev;
          }
          t.encrypt = function(e, t) {
            for (;e._cache.length < t.length; ) e._cache = n.concat([ e._cache, o(e) ]);
            var r = e._cache.slice(0, t.length);
            return e._cache = e._cache.slice(t.length), i(t, r);
          };
        },
        5969: (e, t, r) => {
          var n = r(4497), i = r(9509).Buffer, o = r(1027);
          function s(e, t, r, s) {
            o.call(this), this._cipher = new n.AES(t), this._prev = i.from(r), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), 
            this._decrypt = s, this._mode = e;
          }
          r(5717)(s, o), s.prototype._update = function(e) {
            return this._mode.encrypt(this, e, this._decrypt);
          }, s.prototype._final = function() {
            this._cipher.scrub();
          }, e.exports = s;
        },
        3614: (e, t, r) => {
          var n = r(7667), i = r(4696), o = r(45), s = r(9715), a = r(3048);
          function c(e, t, r) {
            if (e = e.toLowerCase(), o[e]) return i.createCipheriv(e, t, r);
            if (s[e]) return new n({
              key: t,
              iv: r,
              mode: e
            });
            throw new TypeError("invalid suite type");
          }
          function f(e, t, r) {
            if (e = e.toLowerCase(), o[e]) return i.createDecipheriv(e, t, r);
            if (s[e]) return new n({
              key: t,
              iv: r,
              mode: e,
              decrypt: !0
            });
            throw new TypeError("invalid suite type");
          }
          t.createCipher = t.Cipher = function(e, t) {
            var r, n;
            if (e = e.toLowerCase(), o[e]) r = o[e].key, n = o[e].iv; else {
              if (!s[e]) throw new TypeError("invalid suite type");
              r = 8 * s[e].key, n = s[e].iv;
            }
            var i = a(t, !1, r, n);
            return c(e, i.key, i.iv);
          }, t.createCipheriv = t.Cipheriv = c, t.createDecipher = t.Decipher = function(e, t) {
            var r, n;
            if (e = e.toLowerCase(), o[e]) r = o[e].key, n = o[e].iv; else {
              if (!s[e]) throw new TypeError("invalid suite type");
              r = 8 * s[e].key, n = s[e].iv;
            }
            var i = a(t, !1, r, n);
            return f(e, i.key, i.iv);
          }, t.createDecipheriv = t.Decipheriv = f, t.listCiphers = t.getCiphers = function() {
            return Object.keys(s).concat(i.getCiphers());
          };
        },
        7667: (e, t, r) => {
          var n = r(1027), i = r(5251), o = r(5717), s = r(9509).Buffer, a = {
            "des-ede3-cbc": i.CBC.instantiate(i.EDE),
            "des-ede3": i.EDE,
            "des-ede-cbc": i.CBC.instantiate(i.EDE),
            "des-ede": i.EDE,
            "des-cbc": i.CBC.instantiate(i.DES),
            "des-ecb": i.DES
          };
          function c(e) {
            n.call(this);
            var t, r = e.mode.toLowerCase(), i = a[r];
            t = e.decrypt ? "decrypt" : "encrypt";
            var o = e.key;
            s.isBuffer(o) || (o = s.from(o)), "des-ede" !== r && "des-ede-cbc" !== r || (o = s.concat([ o, o.slice(0, 8) ]));
            var c = e.iv;
            s.isBuffer(c) || (c = s.from(c)), this._des = i.create({
              key: o,
              iv: c,
              type: t
            });
          }
          a.des = a["des-cbc"], a.des3 = a["des-ede3-cbc"], e.exports = c, o(c, n), c.prototype._update = function(e) {
            return s.from(this._des.update(e));
          }, c.prototype._final = function() {
            return s.from(this._des.final());
          };
        },
        9715: (e, t) => {
          t["des-ecb"] = {
            key: 8,
            iv: 0
          }, t["des-cbc"] = t.des = {
            key: 8,
            iv: 8
          }, t["des-ede3-cbc"] = t.des3 = {
            key: 24,
            iv: 8
          }, t["des-ede3"] = {
            key: 24,
            iv: 0
          }, t["des-ede-cbc"] = {
            key: 16,
            iv: 8
          }, t["des-ede"] = {
            key: 16,
            iv: 0
          };
        },
        3663: (e, t, r) => {
          var n = r(8764).Buffer, i = r(3550), o = r(1798);
          function s(e) {
            var t, r = e.modulus.byteLength();
            do {
              t = new i(o(r));
            } while (t.cmp(e.modulus) >= 0 || !t.umod(e.prime1) || !t.umod(e.prime2));
            return t;
          }
          function a(e, t) {
            var r = function(e) {
              var t = s(e);
              return {
                blinder: t.toRed(i.mont(e.modulus)).redPow(new i(e.publicExponent)).fromRed(),
                unblinder: t.invm(e.modulus)
              };
            }(t), o = t.modulus.byteLength(), a = new i(e).mul(r.blinder).umod(t.modulus), c = a.toRed(i.mont(t.prime1)), f = a.toRed(i.mont(t.prime2)), u = t.coefficient, h = t.prime1, d = t.prime2, l = c.redPow(t.exponent1).fromRed(), p = f.redPow(t.exponent2).fromRed(), b = l.isub(p).imul(u).umod(h).imul(d);
            return p.iadd(b).imul(r.unblinder).umod(t.modulus).toArrayLike(n, "be", o);
          }
          a.getr = s, e.exports = a;
        },
        6042: (e, t, r) => {
          e.exports = r(5207);
        },
        4743: (e, t, r) => {
          var n = r(9509).Buffer, i = r(3482), o = r(8473), s = r(5717), a = r(2957), c = r(7753), f = r(5207);
          function u(e) {
            o.Writable.call(this);
            var t = f[e];
            if (!t) throw new Error("Unknown message digest");
            this._hashType = t.hash, this._hash = i(t.hash), this._tag = t.id, this._signType = t.sign;
          }
          function h(e) {
            o.Writable.call(this);
            var t = f[e];
            if (!t) throw new Error("Unknown message digest");
            this._hash = i(t.hash), this._tag = t.id, this._signType = t.sign;
          }
          function d(e) {
            return new u(e);
          }
          function l(e) {
            return new h(e);
          }
          Object.keys(f).forEach((function(e) {
            f[e].id = n.from(f[e].id, "hex"), f[e.toLowerCase()] = f[e];
          })), s(u, o.Writable), u.prototype._write = function(e, t, r) {
            this._hash.update(e), r();
          }, u.prototype.update = function(e, t) {
            return "string" == typeof e && (e = n.from(e, t)), this._hash.update(e), this;
          }, u.prototype.sign = function(e, t) {
            this.end();
            var r = this._hash.digest(), n = a(r, e, this._hashType, this._signType, this._tag);
            return t ? n.toString(t) : n;
          }, s(h, o.Writable), h.prototype._write = function(e, t, r) {
            this._hash.update(e), r();
          }, h.prototype.update = function(e, t) {
            return "string" == typeof e && (e = n.from(e, t)), this._hash.update(e), this;
          }, h.prototype.verify = function(e, t, r) {
            "string" == typeof t && (t = n.from(t, r)), this.end();
            var i = this._hash.digest();
            return c(t, i, e, this._signType, this._tag);
          }, e.exports = {
            Sign: d,
            Verify: l,
            createSign: d,
            createVerify: l
          };
        },
        2957: (e, t, r) => {
          var n = r(9509).Buffer, i = r(7394), o = r(3663), s = r(6266).ec, a = r(3550), c = r(980), f = r(1308);
          function u(e, t, r, o) {
            if ((e = n.from(e.toArray())).length < t.byteLength()) {
              var s = n.alloc(t.byteLength() - e.length);
              e = n.concat([ s, e ]);
            }
            var a = r.length, c = function(e, t) {
              e = (e = h(e, t)).mod(t);
              var r = n.from(e.toArray());
              if (r.length < t.byteLength()) {
                var i = n.alloc(t.byteLength() - r.length);
                r = n.concat([ i, r ]);
              }
              return r;
            }(r, t), f = n.alloc(a);
            f.fill(1);
            var u = n.alloc(a);
            return u = i(o, u).update(f).update(n.from([ 0 ])).update(e).update(c).digest(), f = i(o, u).update(f).digest(), {
              k: u = i(o, u).update(f).update(n.from([ 1 ])).update(e).update(c).digest(),
              v: f = i(o, u).update(f).digest()
            };
          }
          function h(e, t) {
            var r = new a(e), n = (e.length << 3) - t.bitLength();
            return n > 0 && r.ishrn(n), r;
          }
          function d(e, t, r) {
            var o, s;
            do {
              for (o = n.alloc(0); 8 * o.length < e.bitLength(); ) t.v = i(r, t.k).update(t.v).digest(), o = n.concat([ o, t.v ]);
              s = h(o, e), t.k = i(r, t.k).update(t.v).update(n.from([ 0 ])).digest(), t.v = i(r, t.k).update(t.v).digest();
            } while (-1 !== s.cmp(e));
            return s;
          }
          function l(e, t, r, n) {
            return e.toRed(a.mont(r)).redPow(t).fromRed().mod(n);
          }
          e.exports = function(e, t, r, i, p) {
            var b = c(t);
            if (b.curve) {
              if ("ecdsa" !== i && "ecdsa/rsa" !== i) throw new Error("wrong private key type");
              return function(e, t) {
                var r = f[t.curve.join(".")];
                if (!r) throw new Error("unknown curve " + t.curve.join("."));
                var i = new s(r).keyFromPrivate(t.privateKey).sign(e);
                return n.from(i.toDER());
              }(e, b);
            }
            if ("dsa" === b.type) {
              if ("dsa" !== i) throw new Error("wrong private key type");
              return function(e, t, r) {
                for (var i, o = t.params.priv_key, s = t.params.p, c = t.params.q, f = t.params.g, p = new a(0), b = h(e, c).mod(c), y = !1, g = u(o, c, e, r); !1 === y; ) p = l(f, i = d(c, g, r), s, c), 
                0 === (y = i.invm(c).imul(b.add(o.mul(p))).mod(c)).cmpn(0) && (y = !1, p = new a(0));
                return function(e, t) {
                  e = e.toArray(), t = t.toArray(), 128 & e[0] && (e = [ 0 ].concat(e)), 128 & t[0] && (t = [ 0 ].concat(t));
                  var r = [ 48, e.length + t.length + 4, 2, e.length ];
                  return r = r.concat(e, [ 2, t.length ], t), n.from(r);
                }(p, y);
              }(e, b, r);
            }
            if ("rsa" !== i && "ecdsa/rsa" !== i) throw new Error("wrong private key type");
            e = n.concat([ p, e ]);
            for (var y = b.modulus.byteLength(), g = [ 0, 1 ]; e.length + g.length + 1 < y; ) g.push(255);
            g.push(0);
            for (var m = -1; ++m < e.length; ) g.push(e[m]);
            return o(g, b);
          }, e.exports.getKey = u, e.exports.makeKey = d;
        },
        7753: (e, t, r) => {
          var n = r(9509).Buffer, i = r(3550), o = r(6266).ec, s = r(980), a = r(1308);
          function c(e, t) {
            if (e.cmpn(0) <= 0) throw new Error("invalid sig");
            if (e.cmp(t) >= t) throw new Error("invalid sig");
          }
          e.exports = function(e, t, r, f, u) {
            var h = s(r);
            if ("ec" === h.type) {
              if ("ecdsa" !== f && "ecdsa/rsa" !== f) throw new Error("wrong public key type");
              return function(e, t, r) {
                var n = a[r.data.algorithm.curve.join(".")];
                if (!n) throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
                var i = new o(n), s = r.data.subjectPrivateKey.data;
                return i.verify(t, e, s);
              }(e, t, h);
            }
            if ("dsa" === h.type) {
              if ("dsa" !== f) throw new Error("wrong public key type");
              return function(e, t, r) {
                var n = r.data.p, o = r.data.q, a = r.data.g, f = r.data.pub_key, u = s.signature.decode(e, "der"), h = u.s, d = u.r;
                c(h, o), c(d, o);
                var l = i.mont(n), p = h.invm(o);
                return 0 === a.toRed(l).redPow(new i(t).mul(p).mod(o)).fromRed().mul(f.toRed(l).redPow(d.mul(p).mod(o)).fromRed()).mod(n).mod(o).cmp(d);
              }(e, t, h);
            }
            if ("rsa" !== f && "ecdsa/rsa" !== f) throw new Error("wrong public key type");
            t = n.concat([ u, t ]);
            for (var d = h.modulus.byteLength(), l = [ 1 ], p = 0; t.length + l.length + 2 < d; ) l.push(255), p++;
            l.push(0);
            for (var b = -1; ++b < t.length; ) l.push(t[b]);
            l = n.from(l);
            var y = i.mont(h.modulus);
            e = (e = new i(e).toRed(y)).redPow(new i(h.publicExponent)), e = n.from(e.fromRed().toArray());
            var g = p < 8 ? 1 : 0;
            for (d = Math.min(e.length, l.length), e.length !== l.length && (g = 1), b = -1; ++b < d; ) g |= e[b] ^ l[b];
            return 0 === g;
          };
        },
        7295: (e, t, r) => {
          var n = r(8764).Buffer;
          e.exports = function(e, t) {
            for (var r = Math.min(e.length, t.length), i = new n(r), o = 0; o < r; ++o) i[o] = e[o] ^ t[o];
            return i;
          };
        },
        8764: (e, t, r) => {
          "use strict";
          var i = r(9742), o = r(645), s = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
          t.Buffer = f, t.SlowBuffer = function(e) {
            return +e != e && (e = 0), f.alloc(+e);
          }, t.INSPECT_MAX_BYTES = 50;
          var a = 2147483647;
          function c(e) {
            if (e > a) throw new RangeError('The value "' + e + '" is invalid for option "size"');
            var t = new Uint8Array(e);
            return Object.setPrototypeOf(t, f.prototype), t;
          }
          function f(e, t, r) {
            if ("number" == typeof e) {
              if ("string" == typeof t) throw new TypeError('The "string" argument must be of type string. Received type number');
              return d(e);
            }
            return u(e, t, r);
          }
          function u(e, t, r) {
            if ("string" == typeof e) return function(e, t) {
              if ("string" == typeof t && "" !== t || (t = "utf8"), !f.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
              var r = 0 | y(e, t), n = c(r), i = n.write(e, t);
              return i !== r && (n = n.slice(0, i)), n;
            }(e, t);
            if (ArrayBuffer.isView(e)) return function(e) {
              if (H(e, Uint8Array)) {
                var t = new Uint8Array(e);
                return p(t.buffer, t.byteOffset, t.byteLength);
              }
              return l(e);
            }(e);
            if (null == e) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
            if (H(e, ArrayBuffer) || e && H(e.buffer, ArrayBuffer)) return p(e, t, r);
            if ("undefined" != typeof SharedArrayBuffer && (H(e, SharedArrayBuffer) || e && H(e.buffer, SharedArrayBuffer))) return p(e, t, r);
            if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type number');
            var n = e.valueOf && e.valueOf();
            if (null != n && n !== e) return f.from(n, t, r);
            var i = function(e) {
              if (f.isBuffer(e)) {
                var t = 0 | b(e.length), r = c(t);
                return 0 === r.length || e.copy(r, 0, 0, t), r;
              }
              return void 0 !== e.length ? "number" != typeof e.length || z(e.length) ? c(0) : l(e) : "Buffer" === e.type && Array.isArray(e.data) ? l(e.data) : void 0;
            }(e);
            if (i) return i;
            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return f.from(e[Symbol.toPrimitive]("string"), t, r);
            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
          }
          function h(e) {
            if ("number" != typeof e) throw new TypeError('"size" argument must be of type number');
            if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
          }
          function d(e) {
            return h(e), c(e < 0 ? 0 : 0 | b(e));
          }
          function l(e) {
            for (var t = e.length < 0 ? 0 : 0 | b(e.length), r = c(t), n = 0; n < t; n += 1) r[n] = 255 & e[n];
            return r;
          }
          function p(e, t, r) {
            if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
            if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
            var n;
            return n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r), 
            Object.setPrototypeOf(n, f.prototype), n;
          }
          function b(e) {
            if (e >= a) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a.toString(16) + " bytes");
            return 0 | e;
          }
          function y(e, t) {
            if (f.isBuffer(e)) return e.length;
            if (ArrayBuffer.isView(e) || H(e, ArrayBuffer)) return e.byteLength;
            if ("string" != typeof e) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
            var r = e.length, n = arguments.length > 2 && !0 === arguments[2];
            if (!n && 0 === r) return 0;
            for (var i = !1; ;) switch (t) {
             case "ascii":
             case "latin1":
             case "binary":
              return r;

             case "utf8":
             case "utf-8":
              return U(e).length;

             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
              return 2 * r;

             case "hex":
              return r >>> 1;

             case "base64":
              return q(e).length;

             default:
              if (i) return n ? -1 : U(e).length;
              t = ("" + t).toLowerCase(), i = !0;
            }
          }
          function g(e, t, r) {
            var n = !1;
            if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
            if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
            if ((r >>>= 0) <= (t >>>= 0)) return "";
            for (e || (e = "utf8"); ;) switch (e) {
             case "hex":
              return T(this, t, r);

             case "utf8":
             case "utf-8":
              return P(this, t, r);

             case "ascii":
              return M(this, t, r);

             case "latin1":
             case "binary":
              return I(this, t, r);

             case "base64":
              return k(this, t, r);

             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
              return R(this, t, r);

             default:
              if (n) throw new TypeError("Unknown encoding: " + e);
              e = (e + "").toLowerCase(), n = !0;
            }
          }
          function m(e, t, r) {
            var n = e[t];
            e[t] = e[r], e[r] = n;
          }
          function v(e, t, r, n, i) {
            if (0 === e.length) return -1;
            if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), z(r = +r) && (r = i ? 0 : e.length - 1), 
            r < 0 && (r = e.length + r), r >= e.length) {
              if (i) return -1;
              r = e.length - 1;
            } else if (r < 0) {
              if (!i) return -1;
              r = 0;
            }
            if ("string" == typeof t && (t = f.from(t, n)), f.isBuffer(t)) return 0 === t.length ? -1 : w(e, t, r, n, i);
            if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : w(e, [ t ], r, n, i);
            throw new TypeError("val must be string, number or Buffer");
          }
          function w(e, t, r, n, i) {
            var o, s = 1, a = e.length, c = t.length;
            if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
              if (e.length < 2 || t.length < 2) return -1;
              s = 2, a /= 2, c /= 2, r /= 2;
            }
            function f(e, t) {
              return 1 === s ? e[t] : e.readUInt16BE(t * s);
            }
            if (i) {
              var u = -1;
              for (o = r; o < a; o++) if (f(e, o) === f(t, -1 === u ? 0 : o - u)) {
                if (-1 === u && (u = o), o - u + 1 === c) return u * s;
              } else -1 !== u && (o -= o - u), u = -1;
            } else for (r + c > a && (r = a - c), o = r; o >= 0; o--) {
              for (var h = !0, d = 0; d < c; d++) if (f(e, o + d) !== f(t, d)) {
                h = !1;
                break;
              }
              if (h) return o;
            }
            return -1;
          }
          function _(e, t, r, n) {
            r = Number(r) || 0;
            var i = e.length - r;
            n ? (n = Number(n)) > i && (n = i) : n = i;
            var o = t.length;
            n > o / 2 && (n = o / 2);
            for (var s = 0; s < n; ++s) {
              var a = parseInt(t.substr(2 * s, 2), 16);
              if (z(a)) return s;
              e[r + s] = a;
            }
            return s;
          }
          function S(e, t, r, n) {
            return F(U(t, e.length - r), e, r, n);
          }
          function E(e, t, r, n) {
            return F(function(e) {
              for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));
              return t;
            }(t), e, r, n);
          }
          function A(e, t, r, n) {
            return F(q(t), e, r, n);
          }
          function x(e, t, r, n) {
            return F(function(e, t) {
              for (var r, n, i, o = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) n = (r = e.charCodeAt(s)) >> 8, i = r % 256, o.push(i), 
              o.push(n);
              return o;
            }(t, e.length - r), e, r, n);
          }
          function k(e, t, r) {
            return 0 === t && r === e.length ? i.fromByteArray(e) : i.fromByteArray(e.slice(t, r));
          }
          function P(e, t, r) {
            r = Math.min(e.length, r);
            for (var n = [], i = t; i < r; ) {
              var o, s, a, c, f = e[i], u = null, h = f > 239 ? 4 : f > 223 ? 3 : f > 191 ? 2 : 1;
              if (i + h <= r) switch (h) {
               case 1:
                f < 128 && (u = f);
                break;

               case 2:
                128 == (192 & (o = e[i + 1])) && (c = (31 & f) << 6 | 63 & o) > 127 && (u = c);
                break;

               case 3:
                o = e[i + 1], s = e[i + 2], 128 == (192 & o) && 128 == (192 & s) && (c = (15 & f) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (c < 55296 || c > 57343) && (u = c);
                break;

               case 4:
                o = e[i + 1], s = e[i + 2], a = e[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (c = (15 & f) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && c < 1114112 && (u = c);
              }
              null === u ? (u = 65533, h = 1) : u > 65535 && (u -= 65536, n.push(u >>> 10 & 1023 | 55296), u = 56320 | 1023 & u), n.push(u), 
              i += h;
            }
            return function(e) {
              var t = e.length;
              if (t <= O) return String.fromCharCode.apply(String, e);
              for (var r = "", n = 0; n < t; ) r += String.fromCharCode.apply(String, e.slice(n, n += O));
              return r;
            }(n);
          }
          t.kMaxLength = a, f.TYPED_ARRAY_SUPPORT = function() {
            try {
              var e = new Uint8Array(1), t = {
                foo: function() {
                  return 42;
                }
              };
              return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), 42 === e.foo();
            } catch (e) {
              return !1;
            }
          }(), f.TYPED_ARRAY_SUPPORT || void 0 === n || "function" != typeof n.error || n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), 
          Object.defineProperty(f.prototype, "parent", {
            enumerable: !0,
            get: function() {
              if (f.isBuffer(this)) return this.buffer;
            }
          }), Object.defineProperty(f.prototype, "offset", {
            enumerable: !0,
            get: function() {
              if (f.isBuffer(this)) return this.byteOffset;
            }
          }), f.poolSize = 8192, f.from = function(e, t, r) {
            return u(e, t, r);
          }, Object.setPrototypeOf(f.prototype, Uint8Array.prototype), Object.setPrototypeOf(f, Uint8Array), f.alloc = function(e, t, r) {
            return function(e, t, r) {
              return h(e), e <= 0 ? c(e) : void 0 !== t ? "string" == typeof r ? c(e).fill(t, r) : c(e).fill(t) : c(e);
            }(e, t, r);
          }, f.allocUnsafe = function(e) {
            return d(e);
          }, f.allocUnsafeSlow = function(e) {
            return d(e);
          }, f.isBuffer = function(e) {
            return null != e && !0 === e._isBuffer && e !== f.prototype;
          }, f.compare = function(e, t) {
            if (H(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), H(t, Uint8Array) && (t = f.from(t, t.offset, t.byteLength)), 
            !f.isBuffer(e) || !f.isBuffer(t)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
            if (e === t) return 0;
            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {
              r = e[i], n = t[i];
              break;
            }
            return r < n ? -1 : n < r ? 1 : 0;
          }, f.isEncoding = function(e) {
            switch (String(e).toLowerCase()) {
             case "hex":
             case "utf8":
             case "utf-8":
             case "ascii":
             case "latin1":
             case "binary":
             case "base64":
             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
              return !0;

             default:
              return !1;
            }
          }, f.concat = function(e, t) {
            if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === e.length) return f.alloc(0);
            var r;
            if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;
            var n = f.allocUnsafe(t), i = 0;
            for (r = 0; r < e.length; ++r) {
              var o = e[r];
              if (H(o, Uint8Array)) i + o.length > n.length ? f.from(o).copy(n, i) : Uint8Array.prototype.set.call(n, o, i); else {
                if (!f.isBuffer(o)) throw new TypeError('"list" argument must be an Array of Buffers');
                o.copy(n, i);
              }
              i += o.length;
            }
            return n;
          }, f.byteLength = y, f.prototype._isBuffer = !0, f.prototype.swap16 = function() {
            var e = this.length;
            if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var t = 0; t < e; t += 2) m(this, t, t + 1);
            return this;
          }, f.prototype.swap32 = function() {
            var e = this.length;
            if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var t = 0; t < e; t += 4) m(this, t, t + 3), m(this, t + 1, t + 2);
            return this;
          }, f.prototype.swap64 = function() {
            var e = this.length;
            if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var t = 0; t < e; t += 8) m(this, t, t + 7), m(this, t + 1, t + 6), m(this, t + 2, t + 5), m(this, t + 3, t + 4);
            return this;
          }, f.prototype.toString = function() {
            var e = this.length;
            return 0 === e ? "" : 0 === arguments.length ? P(this, 0, e) : g.apply(this, arguments);
          }, f.prototype.toLocaleString = f.prototype.toString, f.prototype.equals = function(e) {
            if (!f.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
            return this === e || 0 === f.compare(this, e);
          }, f.prototype.inspect = function() {
            var e = "", r = t.INSPECT_MAX_BYTES;
            return e = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(), this.length > r && (e += " ... "), "<Buffer " + e + ">";
          }, s && (f.prototype[s] = f.prototype.inspect), f.prototype.compare = function(e, t, r, n, i) {
            if (H(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), !f.isBuffer(e)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
            if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), 
            t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");
            if (n >= i && t >= r) return 0;
            if (n >= i) return -1;
            if (t >= r) return 1;
            if (this === e) return 0;
            for (var o = (i >>>= 0) - (n >>>= 0), s = (r >>>= 0) - (t >>>= 0), a = Math.min(o, s), c = this.slice(n, i), u = e.slice(t, r), h = 0; h < a; ++h) if (c[h] !== u[h]) {
              o = c[h], s = u[h];
              break;
            }
            return o < s ? -1 : s < o ? 1 : 0;
          }, f.prototype.includes = function(e, t, r) {
            return -1 !== this.indexOf(e, t, r);
          }, f.prototype.indexOf = function(e, t, r) {
            return v(this, e, t, r, !0);
          }, f.prototype.lastIndexOf = function(e, t, r) {
            return v(this, e, t, r, !1);
          }, f.prototype.write = function(e, t, r, n) {
            if (void 0 === t) n = "utf8", r = this.length, t = 0; else if (void 0 === r && "string" == typeof t) n = t, r = this.length, 
            t = 0; else {
              if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
            }
            var i = this.length - t;
            if ((void 0 === r || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
            n || (n = "utf8");
            for (var o = !1; ;) switch (n) {
             case "hex":
              return _(this, e, t, r);

             case "utf8":
             case "utf-8":
              return S(this, e, t, r);

             case "ascii":
             case "latin1":
             case "binary":
              return E(this, e, t, r);

             case "base64":
              return A(this, e, t, r);

             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
              return x(this, e, t, r);

             default:
              if (o) throw new TypeError("Unknown encoding: " + n);
              n = ("" + n).toLowerCase(), o = !0;
            }
          }, f.prototype.toJSON = function() {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0)
            };
          };
          var O = 4096;
          function M(e, t, r) {
            var n = "";
            r = Math.min(e.length, r);
            for (var i = t; i < r; ++i) n += String.fromCharCode(127 & e[i]);
            return n;
          }
          function I(e, t, r) {
            var n = "";
            r = Math.min(e.length, r);
            for (var i = t; i < r; ++i) n += String.fromCharCode(e[i]);
            return n;
          }
          function T(e, t, r) {
            var n = e.length;
            (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);
            for (var i = "", o = t; o < r; ++o) i += K[e[o]];
            return i;
          }
          function R(e, t, r) {
            for (var n = e.slice(t, r), i = "", o = 0; o < n.length - 1; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);
            return i;
          }
          function C(e, t, r) {
            if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
            if (e + t > r) throw new RangeError("Trying to access beyond buffer length");
          }
          function N(e, t, r, n, i, o) {
            if (!f.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t > i || t < o) throw new RangeError('"value" argument is out of bounds');
            if (r + n > e.length) throw new RangeError("Index out of range");
          }
          function j(e, t, r, n, i, o) {
            if (r + n > e.length) throw new RangeError("Index out of range");
            if (r < 0) throw new RangeError("Index out of range");
          }
          function B(e, t, r, n, i) {
            return t = +t, r >>>= 0, i || j(e, 0, r, 4), o.write(e, t, r, n, 23, 4), r + 4;
          }
          function L(e, t, r, n, i) {
            return t = +t, r >>>= 0, i || j(e, 0, r, 8), o.write(e, t, r, n, 52, 8), r + 8;
          }
          f.prototype.slice = function(e, t) {
            var r = this.length;
            (e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), 
            t < e && (t = e);
            var n = this.subarray(e, t);
            return Object.setPrototypeOf(n, f.prototype), n;
          }, f.prototype.readUintLE = f.prototype.readUIntLE = function(e, t, r) {
            e >>>= 0, t >>>= 0, r || C(e, t, this.length);
            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256); ) n += this[e + o] * i;
            return n;
          }, f.prototype.readUintBE = f.prototype.readUIntBE = function(e, t, r) {
            e >>>= 0, t >>>= 0, r || C(e, t, this.length);
            for (var n = this[e + --t], i = 1; t > 0 && (i *= 256); ) n += this[e + --t] * i;
            return n;
          }, f.prototype.readUint8 = f.prototype.readUInt8 = function(e, t) {
            return e >>>= 0, t || C(e, 1, this.length), this[e];
          }, f.prototype.readUint16LE = f.prototype.readUInt16LE = function(e, t) {
            return e >>>= 0, t || C(e, 2, this.length), this[e] | this[e + 1] << 8;
          }, f.prototype.readUint16BE = f.prototype.readUInt16BE = function(e, t) {
            return e >>>= 0, t || C(e, 2, this.length), this[e] << 8 | this[e + 1];
          }, f.prototype.readUint32LE = f.prototype.readUInt32LE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
          }, f.prototype.readUint32BE = f.prototype.readUInt32BE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
          }, f.prototype.readIntLE = function(e, t, r) {
            e >>>= 0, t >>>= 0, r || C(e, t, this.length);
            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256); ) n += this[e + o] * i;
            return n >= (i *= 128) && (n -= Math.pow(2, 8 * t)), n;
          }, f.prototype.readIntBE = function(e, t, r) {
            e >>>= 0, t >>>= 0, r || C(e, t, this.length);
            for (var n = t, i = 1, o = this[e + --n]; n > 0 && (i *= 256); ) o += this[e + --n] * i;
            return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;
          }, f.prototype.readInt8 = function(e, t) {
            return e >>>= 0, t || C(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
          }, f.prototype.readInt16LE = function(e, t) {
            e >>>= 0, t || C(e, 2, this.length);
            var r = this[e] | this[e + 1] << 8;
            return 32768 & r ? 4294901760 | r : r;
          }, f.prototype.readInt16BE = function(e, t) {
            e >>>= 0, t || C(e, 2, this.length);
            var r = this[e + 1] | this[e] << 8;
            return 32768 & r ? 4294901760 | r : r;
          }, f.prototype.readInt32LE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
          }, f.prototype.readInt32BE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
          }, f.prototype.readFloatLE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), o.read(this, e, !0, 23, 4);
          }, f.prototype.readFloatBE = function(e, t) {
            return e >>>= 0, t || C(e, 4, this.length), o.read(this, e, !1, 23, 4);
          }, f.prototype.readDoubleLE = function(e, t) {
            return e >>>= 0, t || C(e, 8, this.length), o.read(this, e, !0, 52, 8);
          }, f.prototype.readDoubleBE = function(e, t) {
            return e >>>= 0, t || C(e, 8, this.length), o.read(this, e, !1, 52, 8);
          }, f.prototype.writeUintLE = f.prototype.writeUIntLE = function(e, t, r, n) {
            e = +e, t >>>= 0, r >>>= 0, n || N(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
            var i = 1, o = 0;
            for (this[t] = 255 & e; ++o < r && (i *= 256); ) this[t + o] = e / i & 255;
            return t + r;
          }, f.prototype.writeUintBE = f.prototype.writeUIntBE = function(e, t, r, n) {
            e = +e, t >>>= 0, r >>>= 0, n || N(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
            var i = r - 1, o = 1;
            for (this[t + i] = 255 & e; --i >= 0 && (o *= 256); ) this[t + i] = e / o & 255;
            return t + r;
          }, f.prototype.writeUint8 = f.prototype.writeUInt8 = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;
          }, f.prototype.writeUint16LE = f.prototype.writeUInt16LE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
          }, f.prototype.writeUint16BE = f.prototype.writeUInt16BE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
          }, f.prototype.writeUint32LE = f.prototype.writeUInt32LE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, 
            this[t] = 255 & e, t + 4;
          }, f.prototype.writeUint32BE = f.prototype.writeUInt32BE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, 
            this[t + 3] = 255 & e, t + 4;
          }, f.prototype.writeIntLE = function(e, t, r, n) {
            if (e = +e, t >>>= 0, !n) {
              var i = Math.pow(2, 8 * r - 1);
              N(this, e, t, r, i - 1, -i);
            }
            var o = 0, s = 1, a = 0;
            for (this[t] = 255 & e; ++o < r && (s *= 256); ) e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;
            return t + r;
          }, f.prototype.writeIntBE = function(e, t, r, n) {
            if (e = +e, t >>>= 0, !n) {
              var i = Math.pow(2, 8 * r - 1);
              N(this, e, t, r, i - 1, -i);
            }
            var o = r - 1, s = 1, a = 0;
            for (this[t + o] = 255 & e; --o >= 0 && (s *= 256); ) e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;
            return t + r;
          }, f.prototype.writeInt8 = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
          }, f.prototype.writeInt16LE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
          }, f.prototype.writeInt16BE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
          }, f.prototype.writeInt32LE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, 
            this[t + 3] = e >>> 24, t + 4;
          }, f.prototype.writeInt32BE = function(e, t, r) {
            return e = +e, t >>>= 0, r || N(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, 
            this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
          }, f.prototype.writeFloatLE = function(e, t, r) {
            return B(this, e, t, !0, r);
          }, f.prototype.writeFloatBE = function(e, t, r) {
            return B(this, e, t, !1, r);
          }, f.prototype.writeDoubleLE = function(e, t, r) {
            return L(this, e, t, !0, r);
          }, f.prototype.writeDoubleBE = function(e, t, r) {
            return L(this, e, t, !1, r);
          }, f.prototype.copy = function(e, t, r, n) {
            if (!f.isBuffer(e)) throw new TypeError("argument should be a Buffer");
            if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), 
            n === r) return 0;
            if (0 === e.length || 0 === this.length) return 0;
            if (t < 0) throw new RangeError("targetStart out of bounds");
            if (r < 0 || r >= this.length) throw new RangeError("Index out of range");
            if (n < 0) throw new RangeError("sourceEnd out of bounds");
            n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
            var i = n - r;
            return this === e && "function" == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(t, r, n) : Uint8Array.prototype.set.call(e, this.subarray(r, n), t), 
            i;
          }, f.prototype.fill = function(e, t, r, n) {
            if ("string" == typeof e) {
              if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
              if ("string" == typeof n && !f.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
              if (1 === e.length) {
                var i = e.charCodeAt(0);
                ("utf8" === n && i < 128 || "latin1" === n) && (e = i);
              }
            } else "number" == typeof e ? e &= 255 : "boolean" == typeof e && (e = Number(e));
            if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
            if (r <= t) return this;
            var o;
            if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) this[o] = e; else {
              var s = f.isBuffer(e) ? e : f.from(e, n), a = s.length;
              if (0 === a) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
              for (o = 0; o < r - t; ++o) this[o + t] = s[o % a];
            }
            return this;
          };
          var D = /[^+/0-9A-Za-z-_]/g;
          function U(e, t) {
            var r;
            t = t || 1 / 0;
            for (var n = e.length, i = null, o = [], s = 0; s < n; ++s) {
              if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {
                if (!i) {
                  if (r > 56319) {
                    (t -= 3) > -1 && o.push(239, 191, 189);
                    continue;
                  }
                  if (s + 1 === n) {
                    (t -= 3) > -1 && o.push(239, 191, 189);
                    continue;
                  }
                  i = r;
                  continue;
                }
                if (r < 56320) {
                  (t -= 3) > -1 && o.push(239, 191, 189), i = r;
                  continue;
                }
                r = 65536 + (i - 55296 << 10 | r - 56320);
              } else i && (t -= 3) > -1 && o.push(239, 191, 189);
              if (i = null, r < 128) {
                if ((t -= 1) < 0) break;
                o.push(r);
              } else if (r < 2048) {
                if ((t -= 2) < 0) break;
                o.push(r >> 6 | 192, 63 & r | 128);
              } else if (r < 65536) {
                if ((t -= 3) < 0) break;
                o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
              } else {
                if (!(r < 1114112)) throw new Error("Invalid code point");
                if ((t -= 4) < 0) break;
                o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
              }
            }
            return o;
          }
          function q(e) {
            return i.toByteArray(function(e) {
              if ((e = (e = e.split("=")[0]).trim().replace(D, "")).length < 2) return "";
              for (;e.length % 4 != 0; ) e += "=";
              return e;
            }(e));
          }
          function F(e, t, r, n) {
            for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) t[i + r] = e[i];
            return i;
          }
          function H(e, t) {
            return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;
          }
          function z(e) {
            return e != e;
          }
          var K = function() {
            for (var e = "0123456789abcdef", t = new Array(256), r = 0; r < 16; ++r) for (var n = 16 * r, i = 0; i < 16; ++i) t[n + i] = e[r] + e[i];
            return t;
          }();
        },
        584: e => {
          e.exports = {
            100: "Continue",
            101: "Switching Protocols",
            102: "Processing",
            200: "OK",
            201: "Created",
            202: "Accepted",
            203: "Non-Authoritative Information",
            204: "No Content",
            205: "Reset Content",
            206: "Partial Content",
            207: "Multi-Status",
            208: "Already Reported",
            226: "IM Used",
            300: "Multiple Choices",
            301: "Moved Permanently",
            302: "Found",
            303: "See Other",
            304: "Not Modified",
            305: "Use Proxy",
            307: "Temporary Redirect",
            308: "Permanent Redirect",
            400: "Bad Request",
            401: "Unauthorized",
            402: "Payment Required",
            403: "Forbidden",
            404: "Not Found",
            405: "Method Not Allowed",
            406: "Not Acceptable",
            407: "Proxy Authentication Required",
            408: "Request Timeout",
            409: "Conflict",
            410: "Gone",
            411: "Length Required",
            412: "Precondition Failed",
            413: "Payload Too Large",
            414: "URI Too Long",
            415: "Unsupported Media Type",
            416: "Range Not Satisfiable",
            417: "Expectation Failed",
            418: "I'm a teapot",
            421: "Misdirected Request",
            422: "Unprocessable Entity",
            423: "Locked",
            424: "Failed Dependency",
            425: "Unordered Collection",
            426: "Upgrade Required",
            428: "Precondition Required",
            429: "Too Many Requests",
            431: "Request Header Fields Too Large",
            451: "Unavailable For Legal Reasons",
            500: "Internal Server Error",
            501: "Not Implemented",
            502: "Bad Gateway",
            503: "Service Unavailable",
            504: "Gateway Timeout",
            505: "HTTP Version Not Supported",
            506: "Variant Also Negotiates",
            507: "Insufficient Storage",
            508: "Loop Detected",
            509: "Bandwidth Limit Exceeded",
            510: "Not Extended",
            511: "Network Authentication Required"
          };
        },
        1924: (e, t, r) => {
          "use strict";
          var n = r(210), i = r(5559), o = i(n("String.prototype.indexOf"));
          e.exports = function(e, t) {
            var r = n(e, !!t);
            return "function" == typeof r && o(e, ".prototype.") > -1 ? i(r) : r;
          };
        },
        5559: (e, t, r) => {
          "use strict";
          var n = r(8612), i = r(210), o = i("%Function.prototype.apply%"), s = i("%Function.prototype.call%"), a = i("%Reflect.apply%", !0) || n.call(s, o), c = i("%Object.getOwnPropertyDescriptor%", !0), f = i("%Object.defineProperty%", !0), u = i("%Math.max%");
          if (f) try {
            f({}, "a", {
              value: 1
            });
          } catch (e) {
            f = null;
          }
          e.exports = function(e) {
            var t = a(n, s, arguments);
            if (c && f) {
              var r = c(t, "length");
              r.configurable && f(t, "length", {
                value: 1 + u(0, e.length - (arguments.length - 1))
              });
            }
            return t;
          };
          var h = function() {
            return a(n, o, arguments);
          };
          f ? f(e.exports, "apply", {
            value: h
          }) : e.exports.apply = h;
        },
        1027: (e, t, r) => {
          var n = r(9509).Buffer, i = r(2830).Transform, o = r(2553).s;
          function s(e) {
            i.call(this), this.hashMode = "string" == typeof e, this.hashMode ? this[e] = this._finalOrDigest : this.final = this._finalOrDigest, 
            this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
          }
          r(5717)(s, i), s.prototype.update = function(e, t, r) {
            "string" == typeof e && (e = n.from(e, t));
            var i = this._update(e);
            return this.hashMode ? this : (r && (i = this._toString(i, r)), i);
          }, s.prototype.setAutoPadding = function() {}, s.prototype.getAuthTag = function() {
            throw new Error("trying to get auth tag in unsupported state");
          }, s.prototype.setAuthTag = function() {
            throw new Error("trying to set auth tag in unsupported state");
          }, s.prototype.setAAD = function() {
            throw new Error("trying to set aad in unsupported state");
          }, s.prototype._transform = function(e, t, r) {
            var n;
            try {
              this.hashMode ? this._update(e) : this.push(this._update(e));
            } catch (e) {
              n = e;
            } finally {
              r(n);
            }
          }, s.prototype._flush = function(e) {
            var t;
            try {
              this.push(this.__final());
            } catch (e) {
              t = e;
            }
            e(t);
          }, s.prototype._finalOrDigest = function(e) {
            var t = this.__final() || n.alloc(0);
            return e && (t = this._toString(t, e, !0)), t;
          }, s.prototype._toString = function(e, t, r) {
            if (this._decoder || (this._decoder = new o(t), this._encoding = t), this._encoding !== t) throw new Error("can't switch encodings");
            var n = this._decoder.write(e);
            return r && (n += this._decoder.end()), n;
          }, e.exports = s;
        },
        7866: (e, t) => {
          !function() {
            "use strict";
            function e(t, r, n, i) {
              return this instanceof e ? (this.domain = t || void 0, this.path = r || "/", this.secure = !!n, this.script = !!i, this) : new e(t, r, n, i);
            }
            function r(e, t, n) {
              return e instanceof r ? e : this instanceof r ? (this.name = null, this.value = null, this.expiration_date = 1 / 0, this.path = String(n || "/"), 
              this.explicit_path = !1, this.domain = t || null, this.explicit_domain = !1, this.secure = !1, this.noscript = !1, e && this.parse(e, t, n), 
              this) : new r(e, t, n);
            }
            e.All = Object.freeze(Object.create(null)), t.CookieAccessInfo = e, t.Cookie = r, r.prototype.toString = function() {
              var e = [ this.name + "=" + this.value ];
              return this.expiration_date !== 1 / 0 && e.push("expires=" + new Date(this.expiration_date).toGMTString()), this.domain && e.push("domain=" + this.domain), 
              this.path && e.push("path=" + this.path), this.secure && e.push("secure"), this.noscript && e.push("httponly"), e.join("; ");
            }, r.prototype.toValueString = function() {
              return this.name + "=" + this.value;
            };
            var i = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
            function o() {
              var e, t;
              return this instanceof o ? (e = Object.create(null), this.setCookie = function(n, i, o) {
                var s, a;
                if (s = (n = new r(n, i, o)).expiration_date <= Date.now(), void 0 !== e[n.name]) {
                  for (t = e[n.name], a = 0; a < t.length; a += 1) if (t[a].collidesWith(n)) return s ? (t.splice(a, 1), 0 === t.length && delete e[n.name], 
                  !1) : (t[a] = n, n);
                  return !s && (t.push(n), n);
                }
                return !s && (e[n.name] = [ n ], e[n.name]);
              }, this.getCookie = function(r, n) {
                var i, o;
                if (t = e[r]) for (o = 0; o < t.length; o += 1) if ((i = t[o]).expiration_date <= Date.now()) 0 === t.length && delete e[i.name]; else if (i.matches(n)) return i;
              }, this.getCookies = function(t) {
                var r, n, i = [];
                for (r in e) (n = this.getCookie(r, t)) && i.push(n);
                return i.toString = function() {
                  return i.join(":");
                }, i.toValueString = function() {
                  return i.map((function(e) {
                    return e.toValueString();
                  })).join("; ");
                }, i;
              }, this) : new o;
            }
            r.prototype.parse = function(e, t, i) {
              if (this instanceof r) {
                var o, s = e.split(";").filter((function(e) {
                  return !!e;
                })), a = s[0].match(/([^=]+)=([\s\S]*)/);
                if (!a) return void n.warn("Invalid cookie header encountered. Header: '" + e + "'");
                var c = a[1], f = a[2];
                if ("string" != typeof c || 0 === c.length || "string" != typeof f) return void n.warn("Unable to extract values from cookie header. Cookie: '" + e + "'");
                for (this.name = c, this.value = f, o = 1; o < s.length; o += 1) switch (c = (a = s[o].match(/([^=]+)(?:=([\s\S]*))?/))[1].trim().toLowerCase(), 
                f = a[2], c) {
                 case "httponly":
                  this.noscript = !0;
                  break;

                 case "expires":
                  this.expiration_date = f ? Number(Date.parse(f)) : 1 / 0;
                  break;

                 case "path":
                  this.path = f ? f.trim() : "", this.explicit_path = !0;
                  break;

                 case "domain":
                  this.domain = f ? f.trim() : "", this.explicit_domain = !!this.domain;
                  break;

                 case "secure":
                  this.secure = !0;
                }
                return this.explicit_path || (this.path = i || "/"), this.explicit_domain || (this.domain = t), this;
              }
              return (new r).parse(e, t, i);
            }, r.prototype.matches = function(t) {
              return t === e.All || !(this.noscript && t.script || this.secure && !t.secure || !this.collidesWith(t));
            }, r.prototype.collidesWith = function(e) {
              if (this.path && !e.path || this.domain && !e.domain) return !1;
              if (this.path && 0 !== e.path.indexOf(this.path)) return !1;
              if (this.explicit_path && 0 !== e.path.indexOf(this.path)) return !1;
              var t = e.domain && e.domain.replace(/^[\.]/, ""), r = this.domain && this.domain.replace(/^[\.]/, "");
              if (r === t) return !0;
              if (r) {
                if (!this.explicit_domain) return !1;
                var n = t.indexOf(r);
                return -1 !== n && n === t.length - r.length;
              }
              return !0;
            }, t.CookieJar = o, o.prototype.setCookies = function(e, t, n) {
              var o, s, a = [];
              for (e = (e = Array.isArray(e) ? e : e.split(i)).map((function(e) {
                return new r(e, t, n);
              })), o = 0; o < e.length; o += 1) s = e[o], this.setCookie(s, t, n) && a.push(s);
              return a;
            };
          }();
        },
        6497: (e, t, r) => {
          function n(e) {
            return Object.prototype.toString.call(e);
          }
          t.isArray = function(e) {
            return Array.isArray ? Array.isArray(e) : "[object Array]" === n(e);
          }, t.isBoolean = function(e) {
            return "boolean" == typeof e;
          }, t.isNull = function(e) {
            return null === e;
          }, t.isNullOrUndefined = function(e) {
            return null == e;
          }, t.isNumber = function(e) {
            return "number" == typeof e;
          }, t.isString = function(e) {
            return "string" == typeof e;
          }, t.isSymbol = function(e) {
            return "symbol" == typeof e;
          }, t.isUndefined = function(e) {
            return void 0 === e;
          }, t.isRegExp = function(e) {
            return "[object RegExp]" === n(e);
          }, t.isObject = function(e) {
            return "object" == typeof e && null !== e;
          }, t.isDate = function(e) {
            return "[object Date]" === n(e);
          }, t.isError = function(e) {
            return "[object Error]" === n(e) || e instanceof Error;
          }, t.isFunction = function(e) {
            return "function" == typeof e;
          }, t.isPrimitive = function(e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == typeof e || void 0 === e;
          }, t.isBuffer = r(8764).Buffer.isBuffer;
        },
        6393: (e, t, r) => {
          var n = r(8764).Buffer, i = r(6266), o = r(3550);
          e.exports = function(e) {
            return new a(e);
          };
          var s = {
            secp256k1: {
              name: "secp256k1",
              byteLength: 32
            },
            secp224r1: {
              name: "p224",
              byteLength: 28
            },
            prime256v1: {
              name: "p256",
              byteLength: 32
            },
            prime192v1: {
              name: "p192",
              byteLength: 24
            },
            ed25519: {
              name: "ed25519",
              byteLength: 32
            },
            secp384r1: {
              name: "p384",
              byteLength: 48
            },
            secp521r1: {
              name: "p521",
              byteLength: 66
            }
          };
          function a(e) {
            this.curveType = s[e], this.curveType || (this.curveType = {
              name: e
            }), this.curve = new i.ec(this.curveType.name), this.keys = void 0;
          }
          function c(e, t, r) {
            Array.isArray(e) || (e = e.toArray());
            var i = new n(e);
            if (r && i.length < r) {
              var o = new n(r - i.length);
              o.fill(0), i = n.concat([ o, i ]);
            }
            return t ? i.toString(t) : i;
          }
          s.p224 = s.secp224r1, s.p256 = s.secp256r1 = s.prime256v1, s.p192 = s.secp192r1 = s.prime192v1, s.p384 = s.secp384r1, s.p521 = s.secp521r1, 
          a.prototype.generateKeys = function(e, t) {
            return this.keys = this.curve.genKeyPair(), this.getPublicKey(e, t);
          }, a.prototype.computeSecret = function(e, t, r) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), c(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(), r, this.curveType.byteLength);
          }, a.prototype.getPublicKey = function(e, t) {
            var r = this.keys.getPublic("compressed" === t, !0);
            return "hybrid" === t && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6), c(r, e);
          }, a.prototype.getPrivateKey = function(e) {
            return c(this.keys.getPrivate(), e);
          }, a.prototype.setPublicKey = function(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this.keys._importPublic(e), this;
          }, a.prototype.setPrivateKey = function(e, t) {
            t = t || "utf8", n.isBuffer(e) || (e = new n(e, t));
            var r = new o(e);
            return r = r.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r), this;
          };
        },
        3482: (e, t, r) => {
          "use strict";
          var n = r(5717), i = r(2318), o = r(9785), s = r(9072), a = r(1027);
          function c(e) {
            a.call(this, "digest"), this._hash = e;
          }
          n(c, a), c.prototype._update = function(e) {
            this._hash.update(e);
          }, c.prototype._final = function() {
            return this._hash.digest();
          }, e.exports = function(e) {
            return "md5" === (e = e.toLowerCase()) ? new i : "rmd160" === e || "ripemd160" === e ? new o : new c(s(e));
          };
        },
        8028: (e, t, r) => {
          var n = r(2318);
          e.exports = function(e) {
            return (new n).update(e).digest();
          };
        },
        7394: (e, t, r) => {
          "use strict";
          var n = r(5717), i = r(1031), o = r(1027), s = r(9509).Buffer, a = r(8028), c = r(9785), f = r(9072), u = s.alloc(128);
          function h(e, t) {
            o.call(this, "digest"), "string" == typeof t && (t = s.from(t));
            var r = "sha512" === e || "sha384" === e ? 128 : 64;
            this._alg = e, this._key = t, t.length > r ? t = ("rmd160" === e ? new c : f(e)).update(t).digest() : t.length < r && (t = s.concat([ t, u ], r));
            for (var n = this._ipad = s.allocUnsafe(r), i = this._opad = s.allocUnsafe(r), a = 0; a < r; a++) n[a] = 54 ^ t[a], i[a] = 92 ^ t[a];
            this._hash = "rmd160" === e ? new c : f(e), this._hash.update(n);
          }
          n(h, o), h.prototype._update = function(e) {
            this._hash.update(e);
          }, h.prototype._final = function() {
            var e = this._hash.digest();
            return ("rmd160" === this._alg ? new c : f(this._alg)).update(this._opad).update(e).digest();
          }, e.exports = function(e, t) {
            return "rmd160" === (e = e.toLowerCase()) || "ripemd160" === e ? new h("rmd160", t) : "md5" === e ? new i(a, t) : new h(e, t);
          };
        },
        1031: (e, t, r) => {
          "use strict";
          var n = r(5717), i = r(9509).Buffer, o = r(1027), s = i.alloc(128), a = 64;
          function c(e, t) {
            o.call(this, "digest"), "string" == typeof t && (t = i.from(t)), this._alg = e, this._key = t, t.length > a ? t = e(t) : t.length < a && (t = i.concat([ t, s ], a));
            for (var r = this._ipad = i.allocUnsafe(a), n = this._opad = i.allocUnsafe(a), c = 0; c < a; c++) r[c] = 54 ^ t[c], n[c] = 92 ^ t[c];
            this._hash = [ r ];
          }
          n(c, o), c.prototype._update = function(e) {
            this._hash.push(e);
          }, c.prototype._final = function() {
            var e = this._alg(i.concat(this._hash));
            return this._alg(i.concat([ this._opad, e ]));
          }, e.exports = c;
        },
        5835: (e, t, r) => {
          "use strict";
          t.randomBytes = t.rng = t.pseudoRandomBytes = t.prng = r(1798), t.createHash = t.Hash = r(3482), t.createHmac = t.Hmac = r(7394);
          var n = r(6042), i = Object.keys(n), o = [ "sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160" ].concat(i);
          t.getHashes = function() {
            return o;
          };
          var s = r(5632);
          t.pbkdf2 = s.pbkdf2, t.pbkdf2Sync = s.pbkdf2Sync;
          var a = r(3614);
          t.Cipher = a.Cipher, t.createCipher = a.createCipher, t.Cipheriv = a.Cipheriv, t.createCipheriv = a.createCipheriv, t.Decipher = a.Decipher, 
          t.createDecipher = a.createDecipher, t.Decipheriv = a.Decipheriv, t.createDecipheriv = a.createDecipheriv, t.getCiphers = a.getCiphers, 
          t.listCiphers = a.listCiphers;
          var c = r(2607);
          t.DiffieHellmanGroup = c.DiffieHellmanGroup, t.createDiffieHellmanGroup = c.createDiffieHellmanGroup, t.getDiffieHellman = c.getDiffieHellman, 
          t.createDiffieHellman = c.createDiffieHellman, t.DiffieHellman = c.DiffieHellman;
          var f = r(4743);
          t.createSign = f.createSign, t.Sign = f.Sign, t.createVerify = f.createVerify, t.Verify = f.Verify, t.createECDH = r(6393);
          var u = r(7900);
          t.publicEncrypt = u.publicEncrypt, t.privateEncrypt = u.privateEncrypt, t.publicDecrypt = u.publicDecrypt, t.privateDecrypt = u.privateDecrypt;
          var h = r(7963);
          t.randomFill = h.randomFill, t.randomFillSync = h.randomFillSync, t.createCredentials = function() {
            throw new Error([ "sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify" ].join("\n"));
          }, t.constants = {
            DH_CHECK_P_NOT_SAFE_PRIME: 2,
            DH_CHECK_P_NOT_PRIME: 1,
            DH_UNABLE_TO_CHECK_GENERATOR: 4,
            DH_NOT_SUITABLE_GENERATOR: 8,
            NPN_ENABLED: 1,
            ALPN_ENABLED: 1,
            RSA_PKCS1_PADDING: 1,
            RSA_SSLV23_PADDING: 2,
            RSA_NO_PADDING: 3,
            RSA_PKCS1_OAEP_PADDING: 4,
            RSA_X931_PADDING: 5,
            RSA_PKCS1_PSS_PADDING: 6,
            POINT_CONVERSION_COMPRESSED: 2,
            POINT_CONVERSION_UNCOMPRESSED: 4,
            POINT_CONVERSION_HYBRID: 6
          };
        },
        4289: (e, t, r) => {
          "use strict";
          var n = r(2215), i = "function" == typeof Symbol && "symbol" == typeof Symbol("foo"), o = Object.prototype.toString, s = Array.prototype.concat, a = Object.defineProperty, c = r(1044)(), f = a && c, u = function(e, t, r, n) {
            var i;
            (!(t in e) || "function" == typeof (i = n) && "[object Function]" === o.call(i) && n()) && (f ? a(e, t, {
              configurable: !0,
              enumerable: !1,
              value: r,
              writable: !0
            }) : e[t] = r);
          }, h = function(e, t) {
            var r = arguments.length > 2 ? arguments[2] : {}, o = n(t);
            i && (o = s.call(o, Object.getOwnPropertySymbols(t)));
            for (var a = 0; a < o.length; a += 1) u(e, o[a], t[o[a]], r[o[a]]);
          };
          h.supportsDescriptors = !!f, e.exports = h;
        },
        5251: (e, t, r) => {
          "use strict";
          t.utils = r(1278), t.Cipher = r(5756), t.DES = r(327), t.CBC = r(9051), t.EDE = r(651);
        },
        9051: (e, t, r) => {
          "use strict";
          var n = r(9746), i = r(5717), o = {};
          function s(e) {
            n.equal(e.length, 8, "Invalid IV length"), this.iv = new Array(8);
            for (var t = 0; t < this.iv.length; t++) this.iv[t] = e[t];
          }
          t.instantiate = function(e) {
            function t(t) {
              e.call(this, t), this._cbcInit();
            }
            i(t, e);
            for (var r = Object.keys(o), n = 0; n < r.length; n++) {
              var s = r[n];
              t.prototype[s] = o[s];
            }
            return t.create = function(e) {
              return new t(e);
            }, t;
          }, o._cbcInit = function() {
            var e = new s(this.options.iv);
            this._cbcState = e;
          }, o._update = function(e, t, r, n) {
            var i = this._cbcState, o = this.constructor.super_.prototype, s = i.iv;
            if ("encrypt" === this.type) {
              for (var a = 0; a < this.blockSize; a++) s[a] ^= e[t + a];
              for (o._update.call(this, s, 0, r, n), a = 0; a < this.blockSize; a++) s[a] = r[n + a];
            } else {
              for (o._update.call(this, e, t, r, n), a = 0; a < this.blockSize; a++) r[n + a] ^= s[a];
              for (a = 0; a < this.blockSize; a++) s[a] = e[t + a];
            }
          };
        },
        5756: (e, t, r) => {
          "use strict";
          var n = r(9746);
          function i(e) {
            this.options = e, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), 
            this.bufferOff = 0;
          }
          e.exports = i, i.prototype._init = function() {}, i.prototype.update = function(e) {
            return 0 === e.length ? [] : "decrypt" === this.type ? this._updateDecrypt(e) : this._updateEncrypt(e);
          }, i.prototype._buffer = function(e, t) {
            for (var r = Math.min(this.buffer.length - this.bufferOff, e.length - t), n = 0; n < r; n++) this.buffer[this.bufferOff + n] = e[t + n];
            return this.bufferOff += r, r;
          }, i.prototype._flushBuffer = function(e, t) {
            return this._update(this.buffer, 0, e, t), this.bufferOff = 0, this.blockSize;
          }, i.prototype._updateEncrypt = function(e) {
            var t = 0, r = 0, n = (this.bufferOff + e.length) / this.blockSize | 0, i = new Array(n * this.blockSize);
            0 !== this.bufferOff && (t += this._buffer(e, t), this.bufferOff === this.buffer.length && (r += this._flushBuffer(i, r)));
            for (var o = e.length - (e.length - t) % this.blockSize; t < o; t += this.blockSize) this._update(e, t, i, r), r += this.blockSize;
            for (;t < e.length; t++, this.bufferOff++) this.buffer[this.bufferOff] = e[t];
            return i;
          }, i.prototype._updateDecrypt = function(e) {
            for (var t = 0, r = 0, n = Math.ceil((this.bufferOff + e.length) / this.blockSize) - 1, i = new Array(n * this.blockSize); n > 0; n--) t += this._buffer(e, t), 
            r += this._flushBuffer(i, r);
            return t += this._buffer(e, t), i;
          }, i.prototype.final = function(e) {
            var t, r;
            return e && (t = this.update(e)), r = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(), t ? t.concat(r) : r;
          }, i.prototype._pad = function(e, t) {
            if (0 === t) return !1;
            for (;t < e.length; ) e[t++] = 0;
            return !0;
          }, i.prototype._finalEncrypt = function() {
            if (!this._pad(this.buffer, this.bufferOff)) return [];
            var e = new Array(this.blockSize);
            return this._update(this.buffer, 0, e, 0), e;
          }, i.prototype._unpad = function(e) {
            return e;
          }, i.prototype._finalDecrypt = function() {
            n.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
            var e = new Array(this.blockSize);
            return this._flushBuffer(e, 0), this._unpad(e);
          };
        },
        327: (e, t, r) => {
          "use strict";
          var n = r(9746), i = r(5717), o = r(1278), s = r(5756);
          function a() {
            this.tmp = new Array(2), this.keys = null;
          }
          function c(e) {
            s.call(this, e);
            var t = new a;
            this._desState = t, this.deriveKeys(t, e.key);
          }
          i(c, s), e.exports = c, c.create = function(e) {
            return new c(e);
          };
          var f = [ 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 ];
          c.prototype.deriveKeys = function(e, t) {
            e.keys = new Array(32), n.equal(t.length, this.blockSize, "Invalid key length");
            var r = o.readUInt32BE(t, 0), i = o.readUInt32BE(t, 4);
            o.pc1(r, i, e.tmp, 0), r = e.tmp[0], i = e.tmp[1];
            for (var s = 0; s < e.keys.length; s += 2) {
              var a = f[s >>> 1];
              r = o.r28shl(r, a), i = o.r28shl(i, a), o.pc2(r, i, e.keys, s);
            }
          }, c.prototype._update = function(e, t, r, n) {
            var i = this._desState, s = o.readUInt32BE(e, t), a = o.readUInt32BE(e, t + 4);
            o.ip(s, a, i.tmp, 0), s = i.tmp[0], a = i.tmp[1], "encrypt" === this.type ? this._encrypt(i, s, a, i.tmp, 0) : this._decrypt(i, s, a, i.tmp, 0), 
            s = i.tmp[0], a = i.tmp[1], o.writeUInt32BE(r, s, n), o.writeUInt32BE(r, a, n + 4);
          }, c.prototype._pad = function(e, t) {
            for (var r = e.length - t, n = t; n < e.length; n++) e[n] = r;
            return !0;
          }, c.prototype._unpad = function(e) {
            for (var t = e[e.length - 1], r = e.length - t; r < e.length; r++) n.equal(e[r], t);
            return e.slice(0, e.length - t);
          }, c.prototype._encrypt = function(e, t, r, n, i) {
            for (var s = t, a = r, c = 0; c < e.keys.length; c += 2) {
              var f = e.keys[c], u = e.keys[c + 1];
              o.expand(a, e.tmp, 0), f ^= e.tmp[0], u ^= e.tmp[1];
              var h = o.substitute(f, u), d = a;
              a = (s ^ o.permute(h)) >>> 0, s = d;
            }
            o.rip(a, s, n, i);
          }, c.prototype._decrypt = function(e, t, r, n, i) {
            for (var s = r, a = t, c = e.keys.length - 2; c >= 0; c -= 2) {
              var f = e.keys[c], u = e.keys[c + 1];
              o.expand(s, e.tmp, 0), f ^= e.tmp[0], u ^= e.tmp[1];
              var h = o.substitute(f, u), d = s;
              s = (a ^ o.permute(h)) >>> 0, a = d;
            }
            o.rip(s, a, n, i);
          };
        },
        651: (e, t, r) => {
          "use strict";
          var n = r(9746), i = r(5717), o = r(5756), s = r(327);
          function a(e, t) {
            n.equal(t.length, 24, "Invalid key length");
            var r = t.slice(0, 8), i = t.slice(8, 16), o = t.slice(16, 24);
            this.ciphers = "encrypt" === e ? [ s.create({
              type: "encrypt",
              key: r
            }), s.create({
              type: "decrypt",
              key: i
            }), s.create({
              type: "encrypt",
              key: o
            }) ] : [ s.create({
              type: "decrypt",
              key: o
            }), s.create({
              type: "encrypt",
              key: i
            }), s.create({
              type: "decrypt",
              key: r
            }) ];
          }
          function c(e) {
            o.call(this, e);
            var t = new a(this.type, this.options.key);
            this._edeState = t;
          }
          i(c, o), e.exports = c, c.create = function(e) {
            return new c(e);
          }, c.prototype._update = function(e, t, r, n) {
            var i = this._edeState;
            i.ciphers[0]._update(e, t, r, n), i.ciphers[1]._update(r, n, r, n), i.ciphers[2]._update(r, n, r, n);
          }, c.prototype._pad = s.prototype._pad, c.prototype._unpad = s.prototype._unpad;
        },
        1278: (e, t) => {
          "use strict";
          t.readUInt32BE = function(e, t) {
            return (e[0 + t] << 24 | e[1 + t] << 16 | e[2 + t] << 8 | e[3 + t]) >>> 0;
          }, t.writeUInt32BE = function(e, t, r) {
            e[0 + r] = t >>> 24, e[1 + r] = t >>> 16 & 255, e[2 + r] = t >>> 8 & 255, e[3 + r] = 255 & t;
          }, t.ip = function(e, t, r, n) {
            for (var i = 0, o = 0, s = 6; s >= 0; s -= 2) {
              for (var a = 0; a <= 24; a += 8) i <<= 1, i |= t >>> a + s & 1;
              for (a = 0; a <= 24; a += 8) i <<= 1, i |= e >>> a + s & 1;
            }
            for (s = 6; s >= 0; s -= 2) {
              for (a = 1; a <= 25; a += 8) o <<= 1, o |= t >>> a + s & 1;
              for (a = 1; a <= 25; a += 8) o <<= 1, o |= e >>> a + s & 1;
            }
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.rip = function(e, t, r, n) {
            for (var i = 0, o = 0, s = 0; s < 4; s++) for (var a = 24; a >= 0; a -= 8) i <<= 1, i |= t >>> a + s & 1, i <<= 1, i |= e >>> a + s & 1;
            for (s = 4; s < 8; s++) for (a = 24; a >= 0; a -= 8) o <<= 1, o |= t >>> a + s & 1, o <<= 1, o |= e >>> a + s & 1;
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.pc1 = function(e, t, r, n) {
            for (var i = 0, o = 0, s = 7; s >= 5; s--) {
              for (var a = 0; a <= 24; a += 8) i <<= 1, i |= t >> a + s & 1;
              for (a = 0; a <= 24; a += 8) i <<= 1, i |= e >> a + s & 1;
            }
            for (a = 0; a <= 24; a += 8) i <<= 1, i |= t >> a + s & 1;
            for (s = 1; s <= 3; s++) {
              for (a = 0; a <= 24; a += 8) o <<= 1, o |= t >> a + s & 1;
              for (a = 0; a <= 24; a += 8) o <<= 1, o |= e >> a + s & 1;
            }
            for (a = 0; a <= 24; a += 8) o <<= 1, o |= e >> a + s & 1;
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.r28shl = function(e, t) {
            return e << t & 268435455 | e >>> 28 - t;
          };
          var r = [ 14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24 ];
          t.pc2 = function(e, t, n, i) {
            for (var o = 0, s = 0, a = r.length >>> 1, c = 0; c < a; c++) o <<= 1, o |= e >>> r[c] & 1;
            for (c = a; c < r.length; c++) s <<= 1, s |= t >>> r[c] & 1;
            n[i + 0] = o >>> 0, n[i + 1] = s >>> 0;
          }, t.expand = function(e, t, r) {
            var n = 0, i = 0;
            n = (1 & e) << 5 | e >>> 27;
            for (var o = 23; o >= 15; o -= 4) n <<= 6, n |= e >>> o & 63;
            for (o = 11; o >= 3; o -= 4) i |= e >>> o & 63, i <<= 6;
            i |= (31 & e) << 1 | e >>> 31, t[r + 0] = n >>> 0, t[r + 1] = i >>> 0;
          };
          var n = [ 14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11 ];
          t.substitute = function(e, t) {
            for (var r = 0, i = 0; i < 4; i++) r <<= 4, r |= n[64 * i + (e >>> 18 - 6 * i & 63)];
            for (i = 0; i < 4; i++) r <<= 4, r |= n[256 + 64 * i + (t >>> 18 - 6 * i & 63)];
            return r >>> 0;
          };
          var i = [ 16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7 ];
          t.permute = function(e) {
            for (var t = 0, r = 0; r < i.length; r++) t <<= 1, t |= e >>> i[r] & 1;
            return t >>> 0;
          }, t.padSplit = function(e, t, r) {
            for (var n = e.toString(2); n.length < t; ) n = "0" + n;
            for (var i = [], o = 0; o < t; o += r) i.push(n.slice(o, o + r));
            return i.join(" ");
          };
        },
        2607: (e, t, r) => {
          var n = r(8764).Buffer, i = r(3590), o = r(9799), s = r(7426), a = {
            binary: !0,
            hex: !0,
            base64: !0
          };
          t.DiffieHellmanGroup = t.createDiffieHellmanGroup = t.getDiffieHellman = function(e) {
            var t = new n(o[e].prime, "hex"), r = new n(o[e].gen, "hex");
            return new s(t, r);
          }, t.createDiffieHellman = t.DiffieHellman = function e(t, r, o, c) {
            return n.isBuffer(r) || void 0 === a[r] ? e(t, "binary", r, o) : (r = r || "binary", c = c || "binary", o = o || new n([ 2 ]), 
            n.isBuffer(o) || (o = new n(o, c)), "number" == typeof t ? new s(i(t, o), o, !0) : (n.isBuffer(t) || (t = new n(t, r)), 
            new s(t, o, !0)));
          };
        },
        7426: (e, t, r) => {
          var n = r(8764).Buffer, i = r(3550), o = new (r(3047)), s = new i(24), a = new i(11), c = new i(10), f = new i(3), u = new i(7), h = r(3590), d = r(1798);
          function l(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this._pub = new i(e), this;
          }
          function p(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this._priv = new i(e), this;
          }
          e.exports = y;
          var b = {};
          function y(e, t, r) {
            this.setGenerator(t), this.__prime = new i(e), this._prime = i.mont(this.__prime), this._primeLen = e.length, this._pub = void 0, 
            this._priv = void 0, this._primeCode = void 0, r ? (this.setPublicKey = l, this.setPrivateKey = p) : this._primeCode = 8;
          }
          function g(e, t) {
            var r = new n(e.toArray());
            return t ? r.toString(t) : r;
          }
          Object.defineProperty(y.prototype, "verifyError", {
            enumerable: !0,
            get: function() {
              return "number" != typeof this._primeCode && (this._primeCode = function(e, t) {
                var r = t.toString("hex"), n = [ r, e.toString(16) ].join("_");
                if (n in b) return b[n];
                var i, d = 0;
                if (e.isEven() || !h.simpleSieve || !h.fermatTest(e) || !o.test(e)) return d += 1, d += "02" === r || "05" === r ? 8 : 4, 
                b[n] = d, d;
                switch (o.test(e.shrn(1)) || (d += 2), r) {
                 case "02":
                  e.mod(s).cmp(a) && (d += 8);
                  break;

                 case "05":
                  (i = e.mod(c)).cmp(f) && i.cmp(u) && (d += 8);
                  break;

                 default:
                  d += 4;
                }
                return b[n] = d, d;
              }(this.__prime, this.__gen)), this._primeCode;
            }
          }), y.prototype.generateKeys = function() {
            return this._priv || (this._priv = new i(d(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), 
            this.getPublicKey();
          }, y.prototype.computeSecret = function(e) {
            var t = (e = (e = new i(e)).toRed(this._prime)).redPow(this._priv).fromRed(), r = new n(t.toArray()), o = this.getPrime();
            if (r.length < o.length) {
              var s = new n(o.length - r.length);
              s.fill(0), r = n.concat([ s, r ]);
            }
            return r;
          }, y.prototype.getPublicKey = function(e) {
            return g(this._pub, e);
          }, y.prototype.getPrivateKey = function(e) {
            return g(this._priv, e);
          }, y.prototype.getPrime = function(e) {
            return g(this.__prime, e);
          }, y.prototype.getGenerator = function(e) {
            return g(this._gen, e);
          }, y.prototype.setGenerator = function(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this.__gen = e, this._gen = new i(e), this;
          };
        },
        3590: (e, t, r) => {
          var n = r(1798);
          e.exports = g, g.simpleSieve = b, g.fermatTest = y;
          var i = r(3550), o = new i(24), s = new (r(3047)), a = new i(1), c = new i(2), f = new i(5), u = (new i(16), new i(8), new i(10)), h = new i(3), d = (new i(7), 
          new i(11)), l = new i(4), p = (new i(12), null);
          function b(e) {
            for (var t = function() {
              if (null !== p) return p;
              var e = [];
              e[0] = 2;
              for (var t = 1, r = 3; r < 1048576; r += 2) {
                for (var n = Math.ceil(Math.sqrt(r)), i = 0; i < t && e[i] <= n && r % e[i] != 0; i++) ;
                t !== i && e[i] <= n || (e[t++] = r);
              }
              return p = e, e;
            }(), r = 0; r < t.length; r++) if (0 === e.modn(t[r])) return 0 === e.cmpn(t[r]);
            return !0;
          }
          function y(e) {
            var t = i.mont(e);
            return 0 === c.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1);
          }
          function g(e, t) {
            if (e < 16) return new i(2 === t || 5 === t ? [ 140, 123 ] : [ 140, 39 ]);
            var r, p;
            for (t = new i(t); ;) {
              for (r = new i(n(Math.ceil(e / 8))); r.bitLength() > e; ) r.ishrn(1);
              if (r.isEven() && r.iadd(a), r.testn(1) || r.iadd(c), t.cmp(c)) {
                if (!t.cmp(f)) for (;r.mod(u).cmp(h); ) r.iadd(l);
              } else for (;r.mod(o).cmp(d); ) r.iadd(l);
              if (b(p = r.shrn(1)) && b(r) && y(p) && y(r) && s.test(p) && s.test(r)) return r;
            }
          }
        },
        6266: (e, t, r) => {
          "use strict";
          var n = t;
          n.version = r(8597).i8, n.utils = r(953), n.rand = r(9931), n.curve = r(8254), n.curves = r(5427), n.ec = r(7954), n.eddsa = r(5980);
        },
        4918: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(953), o = i.getNAF, s = i.getJSF, a = i.assert;
          function c(e, t) {
            this.type = e, this.p = new n(t.p, 16), this.red = t.prime ? n.red(t.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), 
            this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = t.n && new n(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), 
            this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
            var r = this.n && this.p.div(this.n);
            !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
          }
          function f(e, t) {
            this.curve = e, this.type = t, this.precomputed = null;
          }
          e.exports = c, c.prototype.point = function() {
            throw new Error("Not implemented");
          }, c.prototype.validate = function() {
            throw new Error("Not implemented");
          }, c.prototype._fixedNafMul = function(e, t) {
            a(e.precomputed);
            var r = e._getDoubles(), n = o(t, 1, this._bitLength), i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
            i /= 3;
            var s, c, f = [];
            for (s = 0; s < n.length; s += r.step) {
              c = 0;
              for (var u = s + r.step - 1; u >= s; u--) c = (c << 1) + n[u];
              f.push(c);
            }
            for (var h = this.jpoint(null, null, null), d = this.jpoint(null, null, null), l = i; l > 0; l--) {
              for (s = 0; s < f.length; s++) (c = f[s]) === l ? d = d.mixedAdd(r.points[s]) : c === -l && (d = d.mixedAdd(r.points[s].neg()));
              h = h.add(d);
            }
            return h.toP();
          }, c.prototype._wnafMul = function(e, t) {
            var r = 4, n = e._getNAFPoints(r);
            r = n.wnd;
            for (var i = n.points, s = o(t, r, this._bitLength), c = this.jpoint(null, null, null), f = s.length - 1; f >= 0; f--) {
              for (var u = 0; f >= 0 && 0 === s[f]; f--) u++;
              if (f >= 0 && u++, c = c.dblp(u), f < 0) break;
              var h = s[f];
              a(0 !== h), c = "affine" === e.type ? h > 0 ? c.mixedAdd(i[h - 1 >> 1]) : c.mixedAdd(i[-h - 1 >> 1].neg()) : h > 0 ? c.add(i[h - 1 >> 1]) : c.add(i[-h - 1 >> 1].neg());
            }
            return "affine" === e.type ? c.toP() : c;
          }, c.prototype._wnafMulAdd = function(e, t, r, n, i) {
            var a, c, f, u = this._wnafT1, h = this._wnafT2, d = this._wnafT3, l = 0;
            for (a = 0; a < n; a++) {
              var p = (f = t[a])._getNAFPoints(e);
              u[a] = p.wnd, h[a] = p.points;
            }
            for (a = n - 1; a >= 1; a -= 2) {
              var b = a - 1, y = a;
              if (1 === u[b] && 1 === u[y]) {
                var g = [ t[b], null, null, t[y] ];
                0 === t[b].y.cmp(t[y].y) ? (g[1] = t[b].add(t[y]), g[2] = t[b].toJ().mixedAdd(t[y].neg())) : 0 === t[b].y.cmp(t[y].y.redNeg()) ? (g[1] = t[b].toJ().mixedAdd(t[y]), 
                g[2] = t[b].add(t[y].neg())) : (g[1] = t[b].toJ().mixedAdd(t[y]), g[2] = t[b].toJ().mixedAdd(t[y].neg()));
                var m = [ -3, -1, -5, -7, 0, 7, 5, 1, 3 ], v = s(r[b], r[y]);
                for (l = Math.max(v[0].length, l), d[b] = new Array(l), d[y] = new Array(l), c = 0; c < l; c++) {
                  var w = 0 | v[0][c], _ = 0 | v[1][c];
                  d[b][c] = m[3 * (w + 1) + (_ + 1)], d[y][c] = 0, h[b] = g;
                }
              } else d[b] = o(r[b], u[b], this._bitLength), d[y] = o(r[y], u[y], this._bitLength), l = Math.max(d[b].length, l), l = Math.max(d[y].length, l);
            }
            var S = this.jpoint(null, null, null), E = this._wnafT4;
            for (a = l; a >= 0; a--) {
              for (var A = 0; a >= 0; ) {
                var x = !0;
                for (c = 0; c < n; c++) E[c] = 0 | d[c][a], 0 !== E[c] && (x = !1);
                if (!x) break;
                A++, a--;
              }
              if (a >= 0 && A++, S = S.dblp(A), a < 0) break;
              for (c = 0; c < n; c++) {
                var k = E[c];
                0 !== k && (k > 0 ? f = h[c][k - 1 >> 1] : k < 0 && (f = h[c][-k - 1 >> 1].neg()), S = "affine" === f.type ? S.mixedAdd(f) : S.add(f));
              }
            }
            for (a = 0; a < n; a++) h[a] = null;
            return i ? S : S.toP();
          }, c.BasePoint = f, f.prototype.eq = function() {
            throw new Error("Not implemented");
          }, f.prototype.validate = function() {
            return this.curve.validate(this);
          }, c.prototype.decodePoint = function(e, t) {
            e = i.toArray(e, t);
            var r = this.p.byteLength();
            if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? a(e[e.length - 1] % 2 == 0) : 7 === e[0] && a(e[e.length - 1] % 2 == 1), 
            this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
            if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
            throw new Error("Unknown point format");
          }, f.prototype.encodeCompressed = function(e) {
            return this.encode(e, !0);
          }, f.prototype._encode = function(e) {
            var t = this.curve.p.byteLength(), r = this.getX().toArray("be", t);
            return e ? [ this.getY().isEven() ? 2 : 3 ].concat(r) : [ 4 ].concat(r, this.getY().toArray("be", t));
          }, f.prototype.encode = function(e, t) {
            return i.encode(this._encode(t), e);
          }, f.prototype.precompute = function(e) {
            if (this.precomputed) return this;
            var t = {
              doubles: null,
              naf: null,
              beta: null
            };
            return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, 
            this;
          }, f.prototype._hasDoubles = function(e) {
            if (!this.precomputed) return !1;
            var t = this.precomputed.doubles;
            return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
          }, f.prototype._getDoubles = function(e, t) {
            if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
            for (var r = [ this ], n = this, i = 0; i < t; i += e) {
              for (var o = 0; o < e; o++) n = n.dbl();
              r.push(n);
            }
            return {
              step: e,
              points: r
            };
          }, f.prototype._getNAFPoints = function(e) {
            if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
            for (var t = [ this ], r = (1 << e) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++) t[i] = t[i - 1].add(n);
            return {
              wnd: e,
              points: t
            };
          }, f.prototype._getBeta = function() {
            return null;
          }, f.prototype.dblp = function(e) {
            for (var t = this, r = 0; r < e; r++) t = t.dbl();
            return t;
          };
        },
        1138: (e, t, r) => {
          "use strict";
          var n = r(953), i = r(3550), o = r(5717), s = r(4918), a = n.assert;
          function c(e) {
            this.twisted = 1 != (0 | e.a), this.mOneA = this.twisted && -1 == (0 | e.a), this.extended = this.mOneA, s.call(this, "edwards", e), 
            this.a = new i(e.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new i(e.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), 
            this.d = new i(e.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), a(!this.twisted || 0 === this.c.fromRed().cmpn(1)), 
            this.oneC = 1 == (0 | e.c);
          }
          function f(e, t, r, n, o) {
            s.BasePoint.call(this, e, "projective"), null === t && null === r && null === n ? (this.x = this.curve.zero, this.y = this.curve.one, 
            this.z = this.curve.one, this.t = this.curve.zero, this.zOne = !0) : (this.x = new i(t, 16), this.y = new i(r, 16), this.z = n ? new i(n, 16) : this.curve.one, 
            this.t = o && new i(o, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), 
            this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), 
            this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
          }
          o(c, s), e.exports = c, c.prototype._mulA = function(e) {
            return this.mOneA ? e.redNeg() : this.a.redMul(e);
          }, c.prototype._mulC = function(e) {
            return this.oneC ? e : this.c.redMul(e);
          }, c.prototype.jpoint = function(e, t, r, n) {
            return this.point(e, t, r, n);
          }, c.prototype.pointFromX = function(e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr(), n = this.c2.redSub(this.a.redMul(r)), o = this.one.redSub(this.c2.redMul(this.d).redMul(r)), s = n.redMul(o.redInvm()), a = s.redSqrt();
            if (0 !== a.redSqr().redSub(s).cmp(this.zero)) throw new Error("invalid point");
            var c = a.fromRed().isOdd();
            return (t && !c || !t && c) && (a = a.redNeg()), this.point(e, a);
          }, c.prototype.pointFromY = function(e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr(), n = r.redSub(this.c2), o = r.redMul(this.d).redMul(this.c2).redSub(this.a), s = n.redMul(o.redInvm());
            if (0 === s.cmp(this.zero)) {
              if (t) throw new Error("invalid point");
              return this.point(this.zero, e);
            }
            var a = s.redSqrt();
            if (0 !== a.redSqr().redSub(s).cmp(this.zero)) throw new Error("invalid point");
            return a.fromRed().isOdd() !== t && (a = a.redNeg()), this.point(a, e);
          }, c.prototype.validate = function(e) {
            if (e.isInfinity()) return !0;
            e.normalize();
            var t = e.x.redSqr(), r = e.y.redSqr(), n = t.redMul(this.a).redAdd(r), i = this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));
            return 0 === n.cmp(i);
          }, o(f, s.BasePoint), c.prototype.pointFromJSON = function(e) {
            return f.fromJSON(this, e);
          }, c.prototype.point = function(e, t, r, n) {
            return new f(this, e, t, r, n);
          }, f.fromJSON = function(e, t) {
            return new f(e, t[0], t[1], t[2]);
          }, f.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
          }, f.prototype.isInfinity = function() {
            return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c));
          }, f.prototype._extDbl = function() {
            var e = this.x.redSqr(), t = this.y.redSqr(), r = this.z.redSqr();
            r = r.redIAdd(r);
            var n = this.curve._mulA(e), i = this.x.redAdd(this.y).redSqr().redISub(e).redISub(t), o = n.redAdd(t), s = o.redSub(r), a = n.redSub(t), c = i.redMul(s), f = o.redMul(a), u = i.redMul(a), h = s.redMul(o);
            return this.curve.point(c, f, h, u);
          }, f.prototype._projDbl = function() {
            var e, t, r, n, i, o, s = this.x.redAdd(this.y).redSqr(), a = this.x.redSqr(), c = this.y.redSqr();
            if (this.curve.twisted) {
              var f = (n = this.curve._mulA(a)).redAdd(c);
              this.zOne ? (e = s.redSub(a).redSub(c).redMul(f.redSub(this.curve.two)), t = f.redMul(n.redSub(c)), r = f.redSqr().redSub(f).redSub(f)) : (i = this.z.redSqr(), 
              o = f.redSub(i).redISub(i), e = s.redSub(a).redISub(c).redMul(o), t = f.redMul(n.redSub(c)), r = f.redMul(o));
            } else n = a.redAdd(c), i = this.curve._mulC(this.z).redSqr(), o = n.redSub(i).redSub(i), e = this.curve._mulC(s.redISub(n)).redMul(o), 
            t = this.curve._mulC(n).redMul(a.redISub(c)), r = n.redMul(o);
            return this.curve.point(e, t, r);
          }, f.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
          }, f.prototype._extAdd = function(e) {
            var t = this.y.redSub(this.x).redMul(e.y.redSub(e.x)), r = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)), n = this.t.redMul(this.curve.dd).redMul(e.t), i = this.z.redMul(e.z.redAdd(e.z)), o = r.redSub(t), s = i.redSub(n), a = i.redAdd(n), c = r.redAdd(t), f = o.redMul(s), u = a.redMul(c), h = o.redMul(c), d = s.redMul(a);
            return this.curve.point(f, u, d, h);
          }, f.prototype._projAdd = function(e) {
            var t, r, n = this.z.redMul(e.z), i = n.redSqr(), o = this.x.redMul(e.x), s = this.y.redMul(e.y), a = this.curve.d.redMul(o).redMul(s), c = i.redSub(a), f = i.redAdd(a), u = this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(s), h = n.redMul(c).redMul(u);
            return this.curve.twisted ? (t = n.redMul(f).redMul(s.redSub(this.curve._mulA(o))), r = c.redMul(f)) : (t = n.redMul(f).redMul(s.redSub(o)), 
            r = this.curve._mulC(c).redMul(f)), this.curve.point(h, t, r);
          }, f.prototype.add = function(e) {
            return this.isInfinity() ? e : e.isInfinity() ? this : this.curve.extended ? this._extAdd(e) : this._projAdd(e);
          }, f.prototype.mul = function(e) {
            return this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve._wnafMul(this, e);
          }, f.prototype.mulAdd = function(e, t, r) {
            return this.curve._wnafMulAdd(1, [ this, t ], [ e, r ], 2, !1);
          }, f.prototype.jmulAdd = function(e, t, r) {
            return this.curve._wnafMulAdd(1, [ this, t ], [ e, r ], 2, !0);
          }, f.prototype.normalize = function() {
            if (this.zOne) return this;
            var e = this.z.redInvm();
            return this.x = this.x.redMul(e), this.y = this.y.redMul(e), this.t && (this.t = this.t.redMul(e)), this.z = this.curve.one, 
            this.zOne = !0, this;
          }, f.prototype.neg = function() {
            return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
          }, f.prototype.getX = function() {
            return this.normalize(), this.x.fromRed();
          }, f.prototype.getY = function() {
            return this.normalize(), this.y.fromRed();
          }, f.prototype.eq = function(e) {
            return this === e || 0 === this.getX().cmp(e.getX()) && 0 === this.getY().cmp(e.getY());
          }, f.prototype.eqXToP = function(e) {
            var t = e.toRed(this.curve.red).redMul(this.z);
            if (0 === this.x.cmp(t)) return !0;
            for (var r = e.clone(), n = this.curve.redN.redMul(this.z); ;) {
              if (r.iadd(this.curve.n), r.cmp(this.curve.p) >= 0) return !1;
              if (t.redIAdd(n), 0 === this.x.cmp(t)) return !0;
            }
          }, f.prototype.toP = f.prototype.normalize, f.prototype.mixedAdd = f.prototype.add;
        },
        8254: (e, t, r) => {
          "use strict";
          var n = t;
          n.base = r(4918), n.short = r(6673), n.mont = r(2881), n.edwards = r(1138);
        },
        2881: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(5717), o = r(4918), s = r(953);
          function a(e) {
            o.call(this, "mont", e), this.a = new n(e.a, 16).toRed(this.red), this.b = new n(e.b, 16).toRed(this.red), this.i4 = new n(4).toRed(this.red).redInvm(), 
            this.two = new n(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
          }
          function c(e, t, r) {
            o.BasePoint.call(this, e, "projective"), null === t && null === r ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new n(t, 16), 
            this.z = new n(r, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
          }
          i(a, o), e.exports = a, a.prototype.validate = function(e) {
            var t = e.normalize().x, r = t.redSqr(), n = r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);
            return 0 === n.redSqrt().redSqr().cmp(n);
          }, i(c, o.BasePoint), a.prototype.decodePoint = function(e, t) {
            return this.point(s.toArray(e, t), 1);
          }, a.prototype.point = function(e, t) {
            return new c(this, e, t);
          }, a.prototype.pointFromJSON = function(e) {
            return c.fromJSON(this, e);
          }, c.prototype.precompute = function() {}, c.prototype._encode = function() {
            return this.getX().toArray("be", this.curve.p.byteLength());
          }, c.fromJSON = function(e, t) {
            return new c(e, t[0], t[1] || e.one);
          }, c.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
          }, c.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0);
          }, c.prototype.dbl = function() {
            var e = this.x.redAdd(this.z).redSqr(), t = this.x.redSub(this.z).redSqr(), r = e.redSub(t), n = e.redMul(t), i = r.redMul(t.redAdd(this.curve.a24.redMul(r)));
            return this.curve.point(n, i);
          }, c.prototype.add = function() {
            throw new Error("Not supported on Montgomery curve");
          }, c.prototype.diffAdd = function(e, t) {
            var r = this.x.redAdd(this.z), n = this.x.redSub(this.z), i = e.x.redAdd(e.z), o = e.x.redSub(e.z).redMul(r), s = i.redMul(n), a = t.z.redMul(o.redAdd(s).redSqr()), c = t.x.redMul(o.redISub(s).redSqr());
            return this.curve.point(a, c);
          }, c.prototype.mul = function(e) {
            for (var t = e.clone(), r = this, n = this.curve.point(null, null), i = []; 0 !== t.cmpn(0); t.iushrn(1)) i.push(t.andln(1));
            for (var o = i.length - 1; o >= 0; o--) 0 === i[o] ? (r = r.diffAdd(n, this), n = n.dbl()) : (n = r.diffAdd(n, this), r = r.dbl());
            return n;
          }, c.prototype.mulAdd = function() {
            throw new Error("Not supported on Montgomery curve");
          }, c.prototype.jumlAdd = function() {
            throw new Error("Not supported on Montgomery curve");
          }, c.prototype.eq = function(e) {
            return 0 === this.getX().cmp(e.getX());
          }, c.prototype.normalize = function() {
            return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
          }, c.prototype.getX = function() {
            return this.normalize(), this.x.fromRed();
          };
        },
        6673: (e, t, r) => {
          "use strict";
          var n = r(953), i = r(3550), o = r(5717), s = r(4918), a = n.assert;
          function c(e) {
            s.call(this, "short", e), this.a = new i(e.a, 16).toRed(this.red), this.b = new i(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), 
            this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), 
            this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
          }
          function f(e, t, r, n) {
            s.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new i(t, 16), 
            this.y = new i(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
            this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
          }
          function u(e, t, r, n) {
            s.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, 
            this.z = new i(0)) : (this.x = new i(t, 16), this.y = new i(r, 16), this.z = new i(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
            this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
          }
          o(c, s), e.exports = c, c.prototype._getEndomorphism = function(e) {
            if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
              var t, r;
              if (e.beta) t = new i(e.beta, 16).toRed(this.red); else {
                var n = this._getEndoRoots(this.p);
                t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
              }
              if (e.lambda) r = new i(e.lambda, 16); else {
                var o = this._getEndoRoots(this.n);
                0 === this.g.mul(o[0]).x.cmp(this.g.x.redMul(t)) ? r = o[0] : (r = o[1], a(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));
              }
              return {
                beta: t,
                lambda: r,
                basis: e.basis ? e.basis.map((function(e) {
                  return {
                    a: new i(e.a, 16),
                    b: new i(e.b, 16)
                  };
                })) : this._getEndoBasis(r)
              };
            }
          }, c.prototype._getEndoRoots = function(e) {
            var t = e === this.p ? this.red : i.mont(e), r = new i(2).toRed(t).redInvm(), n = r.redNeg(), o = new i(3).toRed(t).redNeg().redSqrt().redMul(r);
            return [ n.redAdd(o).fromRed(), n.redSub(o).fromRed() ];
          }, c.prototype._getEndoBasis = function(e) {
            for (var t, r, n, o, s, a, c, f, u, h = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), d = e, l = this.n.clone(), p = new i(1), b = new i(0), y = new i(0), g = new i(1), m = 0; 0 !== d.cmpn(0); ) {
              var v = l.div(d);
              f = l.sub(v.mul(d)), u = y.sub(v.mul(p));
              var w = g.sub(v.mul(b));
              if (!n && f.cmp(h) < 0) t = c.neg(), r = p, n = f.neg(), o = u; else if (n && 2 == ++m) break;
              c = f, l = d, d = f, y = p, p = u, g = b, b = w;
            }
            s = f.neg(), a = u;
            var _ = n.sqr().add(o.sqr());
            return s.sqr().add(a.sqr()).cmp(_) >= 0 && (s = t, a = r), n.negative && (n = n.neg(), o = o.neg()), s.negative && (s = s.neg(), 
            a = a.neg()), [ {
              a: n,
              b: o
            }, {
              a: s,
              b: a
            } ];
          }, c.prototype._endoSplit = function(e) {
            var t = this.endo.basis, r = t[0], n = t[1], i = n.b.mul(e).divRound(this.n), o = r.b.neg().mul(e).divRound(this.n), s = i.mul(r.a), a = o.mul(n.a), c = i.mul(r.b), f = o.mul(n.b);
            return {
              k1: e.sub(s).sub(a),
              k2: c.add(f).neg()
            };
          }, c.prototype.pointFromX = function(e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), n = r.redSqrt();
            if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
            var o = n.fromRed().isOdd();
            return (t && !o || !t && o) && (n = n.redNeg()), this.point(e, n);
          }, c.prototype.validate = function(e) {
            if (e.inf) return !0;
            var t = e.x, r = e.y, n = this.a.redMul(t), i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);
            return 0 === r.redSqr().redISub(i).cmpn(0);
          }, c.prototype._endoWnafMulAdd = function(e, t, r) {
            for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++) {
              var s = this._endoSplit(t[o]), a = e[o], c = a._getBeta();
              s.k1.negative && (s.k1.ineg(), a = a.neg(!0)), s.k2.negative && (s.k2.ineg(), c = c.neg(!0)), n[2 * o] = a, n[2 * o + 1] = c, 
              i[2 * o] = s.k1, i[2 * o + 1] = s.k2;
            }
            for (var f = this._wnafMulAdd(1, n, i, 2 * o, r), u = 0; u < 2 * o; u++) n[u] = null, i[u] = null;
            return f;
          }, o(f, s.BasePoint), c.prototype.point = function(e, t, r) {
            return new f(this, e, t, r);
          }, c.prototype.pointFromJSON = function(e, t) {
            return f.fromJSON(this, e, t);
          }, f.prototype._getBeta = function() {
            if (this.curve.endo) {
              var e = this.precomputed;
              if (e && e.beta) return e.beta;
              var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
              if (e) {
                var r = this.curve, n = function(e) {
                  return r.point(e.x.redMul(r.endo.beta), e.y);
                };
                e.beta = t, t.precomputed = {
                  beta: null,
                  naf: e.naf && {
                    wnd: e.naf.wnd,
                    points: e.naf.points.map(n)
                  },
                  doubles: e.doubles && {
                    step: e.doubles.step,
                    points: e.doubles.points.map(n)
                  }
                };
              }
              return t;
            }
          }, f.prototype.toJSON = function() {
            return this.precomputed ? [ this.x, this.y, this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
              }
            } ] : [ this.x, this.y ];
          }, f.fromJSON = function(e, t, r) {
            "string" == typeof t && (t = JSON.parse(t));
            var n = e.point(t[0], t[1], r);
            if (!t[2]) return n;
            function i(t) {
              return e.point(t[0], t[1], r);
            }
            var o = t[2];
            return n.precomputed = {
              beta: null,
              doubles: o.doubles && {
                step: o.doubles.step,
                points: [ n ].concat(o.doubles.points.map(i))
              },
              naf: o.naf && {
                wnd: o.naf.wnd,
                points: [ n ].concat(o.naf.points.map(i))
              }
            }, n;
          }, f.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
          }, f.prototype.isInfinity = function() {
            return this.inf;
          }, f.prototype.add = function(e) {
            if (this.inf) return e;
            if (e.inf) return this;
            if (this.eq(e)) return this.dbl();
            if (this.neg().eq(e)) return this.curve.point(null, null);
            if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
            var t = this.y.redSub(e.y);
            0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
            var r = t.redSqr().redISub(this.x).redISub(e.x), n = t.redMul(this.x.redSub(r)).redISub(this.y);
            return this.curve.point(r, n);
          }, f.prototype.dbl = function() {
            if (this.inf) return this;
            var e = this.y.redAdd(this.y);
            if (0 === e.cmpn(0)) return this.curve.point(null, null);
            var t = this.curve.a, r = this.x.redSqr(), n = e.redInvm(), i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n), o = i.redSqr().redISub(this.x.redAdd(this.x)), s = i.redMul(this.x.redSub(o)).redISub(this.y);
            return this.curve.point(o, s);
          }, f.prototype.getX = function() {
            return this.x.fromRed();
          }, f.prototype.getY = function() {
            return this.y.fromRed();
          }, f.prototype.mul = function(e) {
            return e = new i(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([ this ], [ e ]) : this.curve._wnafMul(this, e);
          }, f.prototype.mulAdd = function(e, t, r) {
            var n = [ this, t ], i = [ e, r ];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
          }, f.prototype.jmulAdd = function(e, t, r) {
            var n = [ this, t ], i = [ e, r ];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
          }, f.prototype.eq = function(e) {
            return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
          }, f.prototype.neg = function(e) {
            if (this.inf) return this;
            var t = this.curve.point(this.x, this.y.redNeg());
            if (e && this.precomputed) {
              var r = this.precomputed, n = function(e) {
                return e.neg();
              };
              t.precomputed = {
                naf: r.naf && {
                  wnd: r.naf.wnd,
                  points: r.naf.points.map(n)
                },
                doubles: r.doubles && {
                  step: r.doubles.step,
                  points: r.doubles.points.map(n)
                }
              };
            }
            return t;
          }, f.prototype.toJ = function() {
            return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
          }, o(u, s.BasePoint), c.prototype.jpoint = function(e, t, r) {
            return new u(this, e, t, r);
          }, u.prototype.toP = function() {
            if (this.isInfinity()) return this.curve.point(null, null);
            var e = this.z.redInvm(), t = e.redSqr(), r = this.x.redMul(t), n = this.y.redMul(t).redMul(e);
            return this.curve.point(r, n);
          }, u.prototype.neg = function() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          }, u.prototype.add = function(e) {
            if (this.isInfinity()) return e;
            if (e.isInfinity()) return this;
            var t = e.z.redSqr(), r = this.z.redSqr(), n = this.x.redMul(t), i = e.x.redMul(r), o = this.y.redMul(t.redMul(e.z)), s = e.y.redMul(r.redMul(this.z)), a = n.redSub(i), c = o.redSub(s);
            if (0 === a.cmpn(0)) return 0 !== c.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var f = a.redSqr(), u = f.redMul(a), h = n.redMul(f), d = c.redSqr().redIAdd(u).redISub(h).redISub(h), l = c.redMul(h.redISub(d)).redISub(o.redMul(u)), p = this.z.redMul(e.z).redMul(a);
            return this.curve.jpoint(d, l, p);
          }, u.prototype.mixedAdd = function(e) {
            if (this.isInfinity()) return e.toJ();
            if (e.isInfinity()) return this;
            var t = this.z.redSqr(), r = this.x, n = e.x.redMul(t), i = this.y, o = e.y.redMul(t).redMul(this.z), s = r.redSub(n), a = i.redSub(o);
            if (0 === s.cmpn(0)) return 0 !== a.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var c = s.redSqr(), f = c.redMul(s), u = r.redMul(c), h = a.redSqr().redIAdd(f).redISub(u).redISub(u), d = a.redMul(u.redISub(h)).redISub(i.redMul(f)), l = this.z.redMul(s);
            return this.curve.jpoint(h, d, l);
          }, u.prototype.dblp = function(e) {
            if (0 === e) return this;
            if (this.isInfinity()) return this;
            if (!e) return this.dbl();
            var t;
            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;
              for (t = 0; t < e; t++) r = r.dbl();
              return r;
            }
            var n = this.curve.a, i = this.curve.tinv, o = this.x, s = this.y, a = this.z, c = a.redSqr().redSqr(), f = s.redAdd(s);
            for (t = 0; t < e; t++) {
              var u = o.redSqr(), h = f.redSqr(), d = h.redSqr(), l = u.redAdd(u).redIAdd(u).redIAdd(n.redMul(c)), p = o.redMul(h), b = l.redSqr().redISub(p.redAdd(p)), y = p.redISub(b), g = l.redMul(y);
              g = g.redIAdd(g).redISub(d);
              var m = f.redMul(a);
              t + 1 < e && (c = c.redMul(d)), o = b, a = m, f = g;
            }
            return this.curve.jpoint(o, f.redMul(i), a);
          }, u.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
          }, u.prototype._zeroDbl = function() {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              s = s.redIAdd(s);
              var a = n.redAdd(n).redIAdd(n), c = a.redSqr().redISub(s).redISub(s), f = o.redIAdd(o);
              f = (f = f.redIAdd(f)).redIAdd(f), e = c, t = a.redMul(s.redISub(c)).redISub(f), r = this.y.redAdd(this.y);
            } else {
              var u = this.x.redSqr(), h = this.y.redSqr(), d = h.redSqr(), l = this.x.redAdd(h).redSqr().redISub(u).redISub(d);
              l = l.redIAdd(l);
              var p = u.redAdd(u).redIAdd(u), b = p.redSqr(), y = d.redIAdd(d);
              y = (y = y.redIAdd(y)).redIAdd(y), e = b.redISub(l).redISub(l), t = p.redMul(l.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);
            }
            return this.curve.jpoint(e, t, r);
          }, u.prototype._threeDbl = function() {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              s = s.redIAdd(s);
              var a = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), c = a.redSqr().redISub(s).redISub(s);
              e = c;
              var f = o.redIAdd(o);
              f = (f = f.redIAdd(f)).redIAdd(f), t = a.redMul(s.redISub(c)).redISub(f), r = this.y.redAdd(this.y);
            } else {
              var u = this.z.redSqr(), h = this.y.redSqr(), d = this.x.redMul(h), l = this.x.redSub(u).redMul(this.x.redAdd(u));
              l = l.redAdd(l).redIAdd(l);
              var p = d.redIAdd(d), b = (p = p.redIAdd(p)).redAdd(p);
              e = l.redSqr().redISub(b), r = this.y.redAdd(this.z).redSqr().redISub(h).redISub(u);
              var y = h.redSqr();
              y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = l.redMul(p.redISub(e)).redISub(y);
            }
            return this.curve.jpoint(e, t, r);
          }, u.prototype._dbl = function() {
            var e = this.curve.a, t = this.x, r = this.y, n = this.z, i = n.redSqr().redSqr(), o = t.redSqr(), s = r.redSqr(), a = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)), c = t.redAdd(t), f = (c = c.redIAdd(c)).redMul(s), u = a.redSqr().redISub(f.redAdd(f)), h = f.redISub(u), d = s.redSqr();
            d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
            var l = a.redMul(h).redISub(d), p = r.redAdd(r).redMul(n);
            return this.curve.jpoint(u, l, p);
          }, u.prototype.trpl = function() {
            if (!this.curve.zeroA) return this.dbl().add(this);
            var e = this.x.redSqr(), t = this.y.redSqr(), r = this.z.redSqr(), n = t.redSqr(), i = e.redAdd(e).redIAdd(e), o = i.redSqr(), s = this.x.redAdd(t).redSqr().redISub(e).redISub(n), a = (s = (s = (s = s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(), c = n.redIAdd(n);
            c = (c = (c = c.redIAdd(c)).redIAdd(c)).redIAdd(c);
            var f = i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(c), u = t.redMul(f);
            u = (u = u.redIAdd(u)).redIAdd(u);
            var h = this.x.redMul(a).redISub(u);
            h = (h = h.redIAdd(h)).redIAdd(h);
            var d = this.y.redMul(f.redMul(c.redISub(f)).redISub(s.redMul(a)));
            d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
            var l = this.z.redAdd(s).redSqr().redISub(r).redISub(a);
            return this.curve.jpoint(h, d, l);
          }, u.prototype.mul = function(e, t) {
            return e = new i(e, t), this.curve._wnafMul(this, e);
          }, u.prototype.eq = function(e) {
            if ("affine" === e.type) return this.eq(e.toJ());
            if (this === e) return !0;
            var t = this.z.redSqr(), r = e.z.redSqr();
            if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
            var n = t.redMul(this.z), i = r.redMul(e.z);
            return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);
          }, u.prototype.eqXToP = function(e) {
            var t = this.z.redSqr(), r = e.toRed(this.curve.red).redMul(t);
            if (0 === this.x.cmp(r)) return !0;
            for (var n = e.clone(), i = this.curve.redN.redMul(t); ;) {
              if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
              if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
            }
          }, u.prototype.inspect = function() {
            return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
          }, u.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0);
          };
        },
        5427: (e, t, r) => {
          "use strict";
          var n, i = t, o = r(3715), s = r(8254), a = r(953).assert;
          function c(e) {
            "short" === e.type ? this.curve = new s.short(e) : "edwards" === e.type ? this.curve = new s.edwards(e) : this.curve = new s.mont(e), 
            this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, a(this.g.validate(), "Invalid curve"), a(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
          }
          function f(e, t) {
            Object.defineProperty(i, e, {
              configurable: !0,
              enumerable: !0,
              get: function() {
                var r = new c(t);
                return Object.defineProperty(i, e, {
                  configurable: !0,
                  enumerable: !0,
                  value: r
                }), r;
              }
            });
          }
          i.PresetCurve = c, f("p192", {
            type: "short",
            prime: "p192",
            p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
            a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
            b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
            n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
            hash: o.sha256,
            gRed: !1,
            g: [ "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811" ]
          }), f("p224", {
            type: "short",
            prime: "p224",
            p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
            a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
            b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
            n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
            hash: o.sha256,
            gRed: !1,
            g: [ "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34" ]
          }), f("p256", {
            type: "short",
            prime: null,
            p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
            a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
            b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
            n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
            hash: o.sha256,
            gRed: !1,
            g: [ "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5" ]
          }), f("p384", {
            type: "short",
            prime: null,
            p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
            a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
            b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
            n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
            hash: o.sha384,
            gRed: !1,
            g: [ "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f" ]
          }), f("p521", {
            type: "short",
            prime: null,
            p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
            a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
            b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
            n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
            hash: o.sha512,
            gRed: !1,
            g: [ "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650" ]
          }), f("curve25519", {
            type: "mont",
            prime: "p25519",
            p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
            a: "76d06",
            b: "1",
            n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
            hash: o.sha256,
            gRed: !1,
            g: [ "9" ]
          }), f("ed25519", {
            type: "edwards",
            prime: "p25519",
            p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
            a: "-1",
            c: "1",
            d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
            n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
            hash: o.sha256,
            gRed: !1,
            g: [ "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658" ]
          });
          try {
            n = r(1037);
          } catch (e) {
            n = void 0;
          }
          f("secp256k1", {
            type: "short",
            prime: "k256",
            p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
            a: "0",
            b: "7",
            n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
            h: "1",
            hash: o.sha256,
            beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
            lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
            basis: [ {
              a: "3086d221a7d46bcde86c90e49284eb15",
              b: "-e4437ed6010e88286f547fa90abfe4c3"
            }, {
              a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
              b: "3086d221a7d46bcde86c90e49284eb15"
            } ],
            gRed: !1,
            g: [ "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", n ]
          });
        },
        7954: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(2156), o = r(953), s = r(5427), a = r(9931), c = o.assert, f = r(1251), u = r(611);
          function h(e) {
            if (!(this instanceof h)) return new h(e);
            "string" == typeof e && (c(Object.prototype.hasOwnProperty.call(s, e), "Unknown curve " + e), e = s[e]), e instanceof s.PresetCurve && (e = {
              curve: e
            }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, 
            this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
          }
          e.exports = h, h.prototype.keyPair = function(e) {
            return new f(this, e);
          }, h.prototype.keyFromPrivate = function(e, t) {
            return f.fromPrivate(this, e, t);
          }, h.prototype.keyFromPublic = function(e, t) {
            return f.fromPublic(this, e, t);
          }, h.prototype.genKeyPair = function(e) {
            e || (e = {});
            for (var t = new i({
              hash: this.hash,
              pers: e.pers,
              persEnc: e.persEnc || "utf8",
              entropy: e.entropy || a(this.hash.hmacStrength),
              entropyEnc: e.entropy && e.entropyEnc || "utf8",
              nonce: this.n.toArray()
            }), r = this.n.byteLength(), o = this.n.sub(new n(2)); ;) {
              var s = new n(t.generate(r));
              if (!(s.cmp(o) > 0)) return s.iaddn(1), this.keyFromPrivate(s);
            }
          }, h.prototype._truncateToN = function(e, t) {
            var r = 8 * e.byteLength() - this.n.bitLength();
            return r > 0 && (e = e.ushrn(r)), !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
          }, h.prototype.sign = function(e, t, r, o) {
            "object" == typeof r && (o = r, r = null), o || (o = {}), t = this.keyFromPrivate(t, r), e = this._truncateToN(new n(e, 16));
            for (var s = this.n.byteLength(), a = t.getPrivate().toArray("be", s), c = e.toArray("be", s), f = new i({
              hash: this.hash,
              entropy: a,
              nonce: c,
              pers: o.pers,
              persEnc: o.persEnc || "utf8"
            }), h = this.n.sub(new n(1)), d = 0; ;d++) {
              var l = o.k ? o.k(d) : new n(f.generate(this.n.byteLength()));
              if (!((l = this._truncateToN(l, !0)).cmpn(1) <= 0 || l.cmp(h) >= 0)) {
                var p = this.g.mul(l);
                if (!p.isInfinity()) {
                  var b = p.getX(), y = b.umod(this.n);
                  if (0 !== y.cmpn(0)) {
                    var g = l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e));
                    if (0 !== (g = g.umod(this.n)).cmpn(0)) {
                      var m = (p.getY().isOdd() ? 1 : 0) | (0 !== b.cmp(y) ? 2 : 0);
                      return o.canonical && g.cmp(this.nh) > 0 && (g = this.n.sub(g), m ^= 1), new u({
                        r: y,
                        s: g,
                        recoveryParam: m
                      });
                    }
                  }
                }
              }
            }
          }, h.prototype.verify = function(e, t, r, i) {
            e = this._truncateToN(new n(e, 16)), r = this.keyFromPublic(r, i);
            var o = (t = new u(t, "hex")).r, s = t.s;
            if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
            if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return !1;
            var a, c = s.invm(this.n), f = c.mul(e).umod(this.n), h = c.mul(o).umod(this.n);
            return this.curve._maxwellTrick ? !(a = this.g.jmulAdd(f, r.getPublic(), h)).isInfinity() && a.eqXToP(o) : !(a = this.g.mulAdd(f, r.getPublic(), h)).isInfinity() && 0 === a.getX().umod(this.n).cmp(o);
          }, h.prototype.recoverPubKey = function(e, t, r, i) {
            c((3 & r) === r, "The recovery param is more than two bits"), t = new u(t, i);
            var o = this.n, s = new n(e), a = t.r, f = t.s, h = 1 & r, d = r >> 1;
            if (a.cmp(this.curve.p.umod(this.curve.n)) >= 0 && d) throw new Error("Unable to find sencond key candinate");
            a = d ? this.curve.pointFromX(a.add(this.curve.n), h) : this.curve.pointFromX(a, h);
            var l = t.r.invm(o), p = o.sub(s).mul(l).umod(o), b = f.mul(l).umod(o);
            return this.g.mulAdd(p, a, b);
          }, h.prototype.getKeyRecoveryParam = function(e, t, r, n) {
            if (null !== (t = new u(t, n)).recoveryParam) return t.recoveryParam;
            for (var i = 0; i < 4; i++) {
              var o;
              try {
                o = this.recoverPubKey(e, t, i);
              } catch (e) {
                continue;
              }
              if (o.eq(r)) return i;
            }
            throw new Error("Unable to find valid recovery factor");
          };
        },
        1251: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(953).assert;
          function o(e, t) {
            this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
          }
          e.exports = o, o.fromPublic = function(e, t, r) {
            return t instanceof o ? t : new o(e, {
              pub: t,
              pubEnc: r
            });
          }, o.fromPrivate = function(e, t, r) {
            return t instanceof o ? t : new o(e, {
              priv: t,
              privEnc: r
            });
          }, o.prototype.validate = function() {
            var e = this.getPublic();
            return e.isInfinity() ? {
              result: !1,
              reason: "Invalid public key"
            } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
              result: !0,
              reason: null
            } : {
              result: !1,
              reason: "Public key * N != O"
            } : {
              result: !1,
              reason: "Public key is not a point"
            };
          }, o.prototype.getPublic = function(e, t) {
            return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
          }, o.prototype.getPrivate = function(e) {
            return "hex" === e ? this.priv.toString(16, 2) : this.priv;
          }, o.prototype._importPrivate = function(e, t) {
            this.priv = new n(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
          }, o.prototype._importPublic = function(e, t) {
            if (e.x || e.y) return "mont" === this.ec.curve.type ? i(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || i(e.x && e.y, "Need both x and y coordinate"), 
            void (this.pub = this.ec.curve.point(e.x, e.y));
            this.pub = this.ec.curve.decodePoint(e, t);
          }, o.prototype.derive = function(e) {
            return e.validate() || i(e.validate(), "public point not validated"), e.mul(this.priv).getX();
          }, o.prototype.sign = function(e, t, r) {
            return this.ec.sign(e, this, t, r);
          }, o.prototype.verify = function(e, t) {
            return this.ec.verify(e, t, this);
          }, o.prototype.inspect = function() {
            return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
          };
        },
        611: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(953), o = i.assert;
          function s(e, t) {
            if (e instanceof s) return e;
            this._importDER(e, t) || (o(e.r && e.s, "Signature without r or s"), this.r = new n(e.r, 16), this.s = new n(e.s, 16), void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
          }
          function a() {
            this.place = 0;
          }
          function c(e, t) {
            var r = e[t.place++];
            if (!(128 & r)) return r;
            var n = 15 & r;
            if (0 === n || n > 4) return !1;
            for (var i = 0, o = 0, s = t.place; o < n; o++, s++) i <<= 8, i |= e[s], i >>>= 0;
            return !(i <= 127) && (t.place = s, i);
          }
          function f(e) {
            for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r; ) t++;
            return 0 === t ? e : e.slice(t);
          }
          function u(e, t) {
            if (t < 128) e.push(t); else {
              var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
              for (e.push(128 | r); --r; ) e.push(t >>> (r << 3) & 255);
              e.push(t);
            }
          }
          e.exports = s, s.prototype._importDER = function(e, t) {
            e = i.toArray(e, t);
            var r = new a;
            if (48 !== e[r.place++]) return !1;
            var o = c(e, r);
            if (!1 === o) return !1;
            if (o + r.place !== e.length) return !1;
            if (2 !== e[r.place++]) return !1;
            var s = c(e, r);
            if (!1 === s) return !1;
            var f = e.slice(r.place, s + r.place);
            if (r.place += s, 2 !== e[r.place++]) return !1;
            var u = c(e, r);
            if (!1 === u) return !1;
            if (e.length !== u + r.place) return !1;
            var h = e.slice(r.place, u + r.place);
            if (0 === f[0]) {
              if (!(128 & f[1])) return !1;
              f = f.slice(1);
            }
            if (0 === h[0]) {
              if (!(128 & h[1])) return !1;
              h = h.slice(1);
            }
            return this.r = new n(f), this.s = new n(h), this.recoveryParam = null, !0;
          }, s.prototype.toDER = function(e) {
            var t = this.r.toArray(), r = this.s.toArray();
            for (128 & t[0] && (t = [ 0 ].concat(t)), 128 & r[0] && (r = [ 0 ].concat(r)), t = f(t), r = f(r); !(r[0] || 128 & r[1]); ) r = r.slice(1);
            var n = [ 2 ];
            u(n, t.length), (n = n.concat(t)).push(2), u(n, r.length);
            var o = n.concat(r), s = [ 48 ];
            return u(s, o.length), s = s.concat(o), i.encode(s, e);
          };
        },
        5980: (e, t, r) => {
          "use strict";
          var n = r(3715), i = r(5427), o = r(953), s = o.assert, a = o.parseBytes, c = r(9087), f = r(3622);
          function u(e) {
            if (s("ed25519" === e, "only tested with ed25519 so far"), !(this instanceof u)) return new u(e);
            e = i[e].curve, this.curve = e, this.g = e.g, this.g.precompute(e.n.bitLength() + 1), this.pointClass = e.point().constructor, 
            this.encodingLength = Math.ceil(e.n.bitLength() / 8), this.hash = n.sha512;
          }
          e.exports = u, u.prototype.sign = function(e, t) {
            e = a(e);
            var r = this.keyFromSecret(t), n = this.hashInt(r.messagePrefix(), e), i = this.g.mul(n), o = this.encodePoint(i), s = this.hashInt(o, r.pubBytes(), e).mul(r.priv()), c = n.add(s).umod(this.curve.n);
            return this.makeSignature({
              R: i,
              S: c,
              Rencoded: o
            });
          }, u.prototype.verify = function(e, t, r) {
            e = a(e), t = this.makeSignature(t);
            var n = this.keyFromPublic(r), i = this.hashInt(t.Rencoded(), n.pubBytes(), e), o = this.g.mul(t.S());
            return t.R().add(n.pub().mul(i)).eq(o);
          }, u.prototype.hashInt = function() {
            for (var e = this.hash(), t = 0; t < arguments.length; t++) e.update(arguments[t]);
            return o.intFromLE(e.digest()).umod(this.curve.n);
          }, u.prototype.keyFromPublic = function(e) {
            return c.fromPublic(this, e);
          }, u.prototype.keyFromSecret = function(e) {
            return c.fromSecret(this, e);
          }, u.prototype.makeSignature = function(e) {
            return e instanceof f ? e : new f(this, e);
          }, u.prototype.encodePoint = function(e) {
            var t = e.getY().toArray("le", this.encodingLength);
            return t[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0, t;
          }, u.prototype.decodePoint = function(e) {
            var t = (e = o.parseBytes(e)).length - 1, r = e.slice(0, t).concat(-129 & e[t]), n = 0 != (128 & e[t]), i = o.intFromLE(r);
            return this.curve.pointFromY(i, n);
          }, u.prototype.encodeInt = function(e) {
            return e.toArray("le", this.encodingLength);
          }, u.prototype.decodeInt = function(e) {
            return o.intFromLE(e);
          }, u.prototype.isPoint = function(e) {
            return e instanceof this.pointClass;
          };
        },
        9087: (e, t, r) => {
          "use strict";
          var n = r(953), i = n.assert, o = n.parseBytes, s = n.cachedProperty;
          function a(e, t) {
            this.eddsa = e, this._secret = o(t.secret), e.isPoint(t.pub) ? this._pub = t.pub : this._pubBytes = o(t.pub);
          }
          a.fromPublic = function(e, t) {
            return t instanceof a ? t : new a(e, {
              pub: t
            });
          }, a.fromSecret = function(e, t) {
            return t instanceof a ? t : new a(e, {
              secret: t
            });
          }, a.prototype.secret = function() {
            return this._secret;
          }, s(a, "pubBytes", (function() {
            return this.eddsa.encodePoint(this.pub());
          })), s(a, "pub", (function() {
            return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
          })), s(a, "privBytes", (function() {
            var e = this.eddsa, t = this.hash(), r = e.encodingLength - 1, n = t.slice(0, e.encodingLength);
            return n[0] &= 248, n[r] &= 127, n[r] |= 64, n;
          })), s(a, "priv", (function() {
            return this.eddsa.decodeInt(this.privBytes());
          })), s(a, "hash", (function() {
            return this.eddsa.hash().update(this.secret()).digest();
          })), s(a, "messagePrefix", (function() {
            return this.hash().slice(this.eddsa.encodingLength);
          })), a.prototype.sign = function(e) {
            return i(this._secret, "KeyPair can only verify"), this.eddsa.sign(e, this);
          }, a.prototype.verify = function(e, t) {
            return this.eddsa.verify(e, t, this);
          }, a.prototype.getSecret = function(e) {
            return i(this._secret, "KeyPair is public only"), n.encode(this.secret(), e);
          }, a.prototype.getPublic = function(e) {
            return n.encode(this.pubBytes(), e);
          }, e.exports = a;
        },
        3622: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(953), o = i.assert, s = i.cachedProperty, a = i.parseBytes;
          function c(e, t) {
            this.eddsa = e, "object" != typeof t && (t = a(t)), Array.isArray(t) && (t = {
              R: t.slice(0, e.encodingLength),
              S: t.slice(e.encodingLength)
            }), o(t.R && t.S, "Signature without R or S"), e.isPoint(t.R) && (this._R = t.R), t.S instanceof n && (this._S = t.S), this._Rencoded = Array.isArray(t.R) ? t.R : t.Rencoded, 
            this._Sencoded = Array.isArray(t.S) ? t.S : t.Sencoded;
          }
          s(c, "S", (function() {
            return this.eddsa.decodeInt(this.Sencoded());
          })), s(c, "R", (function() {
            return this.eddsa.decodePoint(this.Rencoded());
          })), s(c, "Rencoded", (function() {
            return this.eddsa.encodePoint(this.R());
          })), s(c, "Sencoded", (function() {
            return this.eddsa.encodeInt(this.S());
          })), c.prototype.toBytes = function() {
            return this.Rencoded().concat(this.Sencoded());
          }, c.prototype.toHex = function() {
            return i.encode(this.toBytes(), "hex").toUpperCase();
          }, e.exports = c;
        },
        1037: e => {
          e.exports = {
            doubles: {
              step: 4,
              points: [ [ "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821" ], [ "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf" ], [ "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695" ], [ "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9" ], [ "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36" ], [ "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f" ], [ "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999" ], [ "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09" ], [ "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d" ], [ "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088" ], [ "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d" ], [ "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8" ], [ "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a" ], [ "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453" ], [ "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160" ], [ "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0" ], [ "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6" ], [ "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589" ], [ "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17" ], [ "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda" ], [ "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd" ], [ "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2" ], [ "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6" ], [ "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f" ], [ "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01" ], [ "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3" ], [ "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f" ], [ "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7" ], [ "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78" ], [ "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1" ], [ "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150" ], [ "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82" ], [ "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc" ], [ "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b" ], [ "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51" ], [ "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45" ], [ "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120" ], [ "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84" ], [ "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d" ], [ "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d" ], [ "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8" ], [ "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8" ], [ "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac" ], [ "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f" ], [ "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962" ], [ "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907" ], [ "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec" ], [ "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d" ], [ "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414" ], [ "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd" ], [ "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0" ], [ "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811" ], [ "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1" ], [ "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c" ], [ "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73" ], [ "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd" ], [ "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405" ], [ "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589" ], [ "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e" ], [ "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27" ], [ "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1" ], [ "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482" ], [ "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945" ], [ "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573" ], [ "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82" ] ]
            },
            naf: {
              wnd: 7,
              points: [ [ "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672" ], [ "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6" ], [ "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da" ], [ "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37" ], [ "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b" ], [ "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81" ], [ "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58" ], [ "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77" ], [ "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a" ], [ "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c" ], [ "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67" ], [ "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402" ], [ "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55" ], [ "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482" ], [ "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82" ], [ "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396" ], [ "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49" ], [ "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf" ], [ "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a" ], [ "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7" ], [ "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933" ], [ "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a" ], [ "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6" ], [ "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37" ], [ "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e" ], [ "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6" ], [ "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476" ], [ "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40" ], [ "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61" ], [ "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683" ], [ "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5" ], [ "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b" ], [ "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417" ], [ "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868" ], [ "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a" ], [ "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6" ], [ "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996" ], [ "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e" ], [ "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d" ], [ "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2" ], [ "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e" ], [ "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437" ], [ "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311" ], [ "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4" ], [ "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575" ], [ "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d" ], [ "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d" ], [ "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629" ], [ "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06" ], [ "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374" ], [ "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee" ], [ "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1" ], [ "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b" ], [ "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661" ], [ "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6" ], [ "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e" ], [ "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d" ], [ "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc" ], [ "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4" ], [ "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c" ], [ "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b" ], [ "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913" ], [ "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154" ], [ "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865" ], [ "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc" ], [ "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224" ], [ "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e" ], [ "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6" ], [ "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511" ], [ "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b" ], [ "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2" ], [ "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c" ], [ "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3" ], [ "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d" ], [ "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700" ], [ "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4" ], [ "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196" ], [ "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4" ], [ "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257" ], [ "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13" ], [ "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096" ], [ "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38" ], [ "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f" ], [ "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448" ], [ "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a" ], [ "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4" ], [ "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437" ], [ "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7" ], [ "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d" ], [ "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a" ], [ "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54" ], [ "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77" ], [ "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517" ], [ "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10" ], [ "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125" ], [ "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e" ], [ "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1" ], [ "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2" ], [ "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423" ], [ "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8" ], [ "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758" ], [ "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375" ], [ "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d" ], [ "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec" ], [ "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0" ], [ "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c" ], [ "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4" ], [ "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f" ], [ "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649" ], [ "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826" ], [ "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5" ], [ "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87" ], [ "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b" ], [ "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc" ], [ "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c" ], [ "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f" ], [ "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a" ], [ "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46" ], [ "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f" ], [ "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03" ], [ "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08" ], [ "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8" ], [ "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373" ], [ "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3" ], [ "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8" ], [ "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1" ], [ "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9" ] ]
            }
          };
        },
        953: (e, t, r) => {
          "use strict";
          var n = t, i = r(3550), o = r(9746), s = r(4504);
          n.assert = o, n.toArray = s.toArray, n.zero2 = s.zero2, n.toHex = s.toHex, n.encode = s.encode, n.getNAF = function(e, t, r) {
            var n = new Array(Math.max(e.bitLength(), r) + 1);
            n.fill(0);
            for (var i = 1 << t + 1, o = e.clone(), s = 0; s < n.length; s++) {
              var a, c = o.andln(i - 1);
              o.isOdd() ? (a = c > (i >> 1) - 1 ? (i >> 1) - c : c, o.isubn(a)) : a = 0, n[s] = a, o.iushrn(1);
            }
            return n;
          }, n.getJSF = function(e, t) {
            var r = [ [], [] ];
            e = e.clone(), t = t.clone();
            for (var n, i = 0, o = 0; e.cmpn(-i) > 0 || t.cmpn(-o) > 0; ) {
              var s, a, c = e.andln(3) + i & 3, f = t.andln(3) + o & 3;
              3 === c && (c = -1), 3 === f && (f = -1), s = 0 == (1 & c) ? 0 : 3 != (n = e.andln(7) + i & 7) && 5 !== n || 2 !== f ? c : -c, 
              r[0].push(s), a = 0 == (1 & f) ? 0 : 3 != (n = t.andln(7) + o & 7) && 5 !== n || 2 !== c ? f : -f, r[1].push(a), 2 * i === s + 1 && (i = 1 - i), 
              2 * o === a + 1 && (o = 1 - o), e.iushrn(1), t.iushrn(1);
            }
            return r;
          }, n.cachedProperty = function(e, t, r) {
            var n = "_" + t;
            e.prototype[t] = function() {
              return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
            };
          }, n.parseBytes = function(e) {
            return "string" == typeof e ? n.toArray(e, "hex") : e;
          }, n.intFromLE = function(e) {
            return new i(e, "hex", "le");
          };
        },
        1227: e => {
          e.exports = null;
        },
        2840: (e, t, r) => {
          var n = r(4155), i = r(778), o = function() {}, s = function(e, t, r) {
            if ("function" == typeof t) return s(e, null, t);
            t || (t = {}), r = i(r || o);
            var a = e._writableState, c = e._readableState, f = t.readable || !1 !== t.readable && e.readable, u = t.writable || !1 !== t.writable && e.writable, h = !1, d = function() {
              e.writable || l();
            }, l = function() {
              u = !1, f || r.call(e);
            }, p = function() {
              f = !1, u || r.call(e);
            }, b = function(t) {
              r.call(e, t ? new Error("exited with error code: " + t) : null);
            }, y = function(t) {
              r.call(e, t);
            }, g = function() {
              n.nextTick(m);
            }, m = function() {
              if (!h) return (!f || c && c.ended && !c.destroyed) && (!u || a && a.ended && !a.destroyed) ? void 0 : r.call(e, new Error("premature close"));
            }, v = function() {
              e.req.on("finish", l);
            };
            return function(e) {
              return e.setHeader && "function" == typeof e.abort;
            }(e) ? (e.on("complete", l), e.on("abort", g), e.req ? v() : e.on("request", v)) : u && !a && (e.on("end", d), e.on("close", d)), 
            function(e) {
              return e.stdio && Array.isArray(e.stdio) && 3 === e.stdio.length;
            }(e) && e.on("exit", b), e.on("end", p), e.on("finish", l), !1 !== t.error && e.on("error", y), e.on("close", g), function() {
              h = !0, e.removeListener("complete", l), e.removeListener("abort", g), e.removeListener("request", v), e.req && e.req.removeListener("finish", l), 
              e.removeListener("end", d), e.removeListener("close", d), e.removeListener("finish", l), e.removeListener("exit", b), e.removeListener("end", p), 
              e.removeListener("error", y), e.removeListener("close", g);
            };
          };
          e.exports = s;
        },
        8091: e => {
          "use strict";
          function t(e, t) {
            if (null == e) throw new TypeError("Cannot convert first argument to object");
            for (var r = Object(e), n = 1; n < arguments.length; n++) {
              var i = arguments[n];
              if (null != i) for (var o = Object.keys(Object(i)), s = 0, a = o.length; s < a; s++) {
                var c = o[s], f = Object.getOwnPropertyDescriptor(i, c);
                void 0 !== f && f.enumerable && (r[c] = i[c]);
              }
            }
            return r;
          }
          e.exports = {
            assign: t,
            polyfill: function() {
              Object.assign || Object.defineProperty(Object, "assign", {
                enumerable: !1,
                configurable: !0,
                writable: !0,
                value: t
              });
            }
          };
        },
        2294: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.EthereumProviderError = t.EthereumRpcError = void 0;
          const n = r(4445);
          class i extends Error {
            constructor(e, t, r) {
              if (!Number.isInteger(e)) throw new Error('"code" must be an integer.');
              if (!t || "string" != typeof t) throw new Error('"message" must be a nonempty string.');
              super(t), this.code = e, void 0 !== r && (this.data = r);
            }
            serialize() {
              const e = {
                code: this.code,
                message: this.message
              };
              return void 0 !== this.data && (e.data = this.data), this.stack && (e.stack = this.stack), e;
            }
            toString() {
              return n.default(this.serialize(), o, 2);
            }
          }
          function o(e, t) {
            if ("[Circular]" !== t) return t;
          }
          t.EthereumRpcError = i, t.EthereumProviderError = class extends i {
            constructor(e, t, r) {
              if (!function(e) {
                return Number.isInteger(e) && e >= 1e3 && e <= 4999;
              }(e)) throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
              super(e, t, r);
            }
          };
        },
        2662: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.errorValues = t.errorCodes = void 0, t.errorCodes = {
            rpc: {
              invalidInput: -32e3,
              resourceNotFound: -32001,
              resourceUnavailable: -32002,
              transactionRejected: -32003,
              methodNotSupported: -32004,
              limitExceeded: -32005,
              parse: -32700,
              invalidRequest: -32600,
              methodNotFound: -32601,
              invalidParams: -32602,
              internal: -32603
            },
            provider: {
              userRejectedRequest: 4001,
              unauthorized: 4100,
              unsupportedMethod: 4200,
              disconnected: 4900,
              chainDisconnected: 4901
            }
          }, t.errorValues = {
            "-32700": {
              standard: "JSON RPC 2.0",
              message: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
            },
            "-32600": {
              standard: "JSON RPC 2.0",
              message: "The JSON sent is not a valid Request object."
            },
            "-32601": {
              standard: "JSON RPC 2.0",
              message: "The method does not exist / is not available."
            },
            "-32602": {
              standard: "JSON RPC 2.0",
              message: "Invalid method parameter(s)."
            },
            "-32603": {
              standard: "JSON RPC 2.0",
              message: "Internal JSON-RPC error."
            },
            "-32000": {
              standard: "EIP-1474",
              message: "Invalid input."
            },
            "-32001": {
              standard: "EIP-1474",
              message: "Resource not found."
            },
            "-32002": {
              standard: "EIP-1474",
              message: "Resource unavailable."
            },
            "-32003": {
              standard: "EIP-1474",
              message: "Transaction rejected."
            },
            "-32004": {
              standard: "EIP-1474",
              message: "Method not supported."
            },
            "-32005": {
              standard: "EIP-1474",
              message: "Request limit exceeded."
            },
            4001: {
              standard: "EIP-1193",
              message: "User rejected the request."
            },
            4100: {
              standard: "EIP-1193",
              message: "The requested account and/or method has not been authorized by the user."
            },
            4200: {
              standard: "EIP-1193",
              message: "The requested method is not supported by this Ethereum provider."
            },
            4900: {
              standard: "EIP-1193",
              message: "The provider is disconnected from all chains."
            },
            4901: {
              standard: "EIP-1193",
              message: "The provider is disconnected from the specified chain."
            }
          };
        },
        8797: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ethErrors = void 0;
          const n = r(2294), i = r(8753), o = r(2662);
          function s(e, t) {
            const [r, o] = c(t);
            return new n.EthereumRpcError(e, r || i.getMessageFromCode(e), o);
          }
          function a(e, t) {
            const [r, o] = c(t);
            return new n.EthereumProviderError(e, r || i.getMessageFromCode(e), o);
          }
          function c(e) {
            if (e) {
              if ("string" == typeof e) return [ e ];
              if ("object" == typeof e && !Array.isArray(e)) {
                const {message: t, data: r} = e;
                if (t && "string" != typeof t) throw new Error("Must specify string message.");
                return [ t || void 0, r ];
              }
            }
            return [];
          }
          t.ethErrors = {
            rpc: {
              parse: e => s(o.errorCodes.rpc.parse, e),
              invalidRequest: e => s(o.errorCodes.rpc.invalidRequest, e),
              invalidParams: e => s(o.errorCodes.rpc.invalidParams, e),
              methodNotFound: e => s(o.errorCodes.rpc.methodNotFound, e),
              internal: e => s(o.errorCodes.rpc.internal, e),
              server: e => {
                if (!e || "object" != typeof e || Array.isArray(e)) throw new Error("Ethereum RPC Server errors must provide single object argument.");
                const {code: t} = e;
                if (!Number.isInteger(t) || t > -32005 || t < -32099) throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
                return s(t, e);
              },
              invalidInput: e => s(o.errorCodes.rpc.invalidInput, e),
              resourceNotFound: e => s(o.errorCodes.rpc.resourceNotFound, e),
              resourceUnavailable: e => s(o.errorCodes.rpc.resourceUnavailable, e),
              transactionRejected: e => s(o.errorCodes.rpc.transactionRejected, e),
              methodNotSupported: e => s(o.errorCodes.rpc.methodNotSupported, e),
              limitExceeded: e => s(o.errorCodes.rpc.limitExceeded, e)
            },
            provider: {
              userRejectedRequest: e => a(o.errorCodes.provider.userRejectedRequest, e),
              unauthorized: e => a(o.errorCodes.provider.unauthorized, e),
              unsupportedMethod: e => a(o.errorCodes.provider.unsupportedMethod, e),
              disconnected: e => a(o.errorCodes.provider.disconnected, e),
              chainDisconnected: e => a(o.errorCodes.provider.chainDisconnected, e),
              custom: e => {
                if (!e || "object" != typeof e || Array.isArray(e)) throw new Error("Ethereum Provider custom errors must provide single object argument.");
                const {code: t, message: r, data: i} = e;
                if (!r || "string" != typeof r) throw new Error('"message" must be a nonempty string');
                return new n.EthereumProviderError(t, r, i);
              }
            }
          };
        },
        9826: (e, t, r) => {
          "use strict";
          t.Xy = t.Cg = t.Sy = void 0;
          const n = r(2294);
          Object.defineProperty(t, "Cg", {
            enumerable: !0,
            get: function() {
              return n.EthereumRpcError;
            }
          });
          const i = r(8753);
          Object.defineProperty(t, "Xy", {
            enumerable: !0,
            get: function() {
              return i.serializeError;
            }
          });
          const o = r(8797);
          Object.defineProperty(t, "Sy", {
            enumerable: !0,
            get: function() {
              return o.ethErrors;
            }
          }), r(2662);
        },
        8753: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.serializeError = t.isValidCode = t.getMessageFromCode = t.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
          const n = r(2662), i = r(2294), o = n.errorCodes.rpc.internal, s = {
            code: o,
            message: a(o)
          };
          function a(e, r = "Unspecified error message. This is a bug, please report it.") {
            if (Number.isInteger(e)) {
              const r = e.toString();
              if (h(n.errorValues, r)) return n.errorValues[r].message;
              if (f(e)) return t.JSON_RPC_SERVER_ERROR_MESSAGE;
            }
            return r;
          }
          function c(e) {
            if (!Number.isInteger(e)) return !1;
            const t = e.toString();
            return !!n.errorValues[t] || !!f(e);
          }
          function f(e) {
            return e >= -32099 && e <= -32e3;
          }
          function u(e) {
            return e && "object" == typeof e && !Array.isArray(e) ? Object.assign({}, e) : e;
          }
          function h(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          t.JSON_RPC_SERVER_ERROR_MESSAGE = "Unspecified server error.", t.getMessageFromCode = a, t.isValidCode = c, t.serializeError = function(e, {fallbackError: t = s, shouldIncludeStack: r = !1} = {}) {
            var n, o;
            if (!t || !Number.isInteger(t.code) || "string" != typeof t.message) throw new Error("Must provide fallback error with integer number code and string message.");
            if (e instanceof i.EthereumRpcError) return e.serialize();
            const f = {};
            if (e && "object" == typeof e && !Array.isArray(e) && h(e, "code") && c(e.code)) {
              const t = e;
              f.code = t.code, t.message && "string" == typeof t.message ? (f.message = t.message, h(t, "data") && (f.data = t.data)) : (f.message = a(f.code), 
              f.data = {
                originalError: u(e)
              });
            } else {
              f.code = t.code;
              const r = null === (n = e) || void 0 === n ? void 0 : n.message;
              f.message = r && "string" == typeof r ? r : t.message, f.data = {
                originalError: u(e)
              };
            }
            const d = null === (o = e) || void 0 === o ? void 0 : o.stack;
            return r && e && d && "string" == typeof d && (f.stack = d), f;
          };
        },
        6877: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          const n = r(339);
          function i(e) {
            return !("string" != typeof e || !/^(0x)?[0-9a-f]{512}$/i.test(e) || !/^(0x)?[0-9a-f]{512}$/.test(e) && !/^(0x)?[0-9A-F]{512}$/.test(e));
          }
          function o(e, t) {
            "object" == typeof t && t.constructor === Uint8Array && (t = n.bytesToHex(t));
            const r = n.keccak256(t).replace("0x", "");
            for (let n = 0; n < 12; n += 4) {
              const t = (parseInt(r.substr(n, 2), 16) << 8) + parseInt(r.substr(n + 2, 2), 16) & 2047, i = 1 << t % 4;
              if ((s(e.charCodeAt(e.length - 1 - Math.floor(t / 4))) & i) !== i) return !1;
            }
            return !0;
          }
          function s(e) {
            if (e >= 48 && e <= 57) return e - 48;
            if (e >= 65 && e <= 70) return e - 55;
            if (e >= 97 && e <= 102) return e - 87;
            throw new Error("invalid bloom");
          }
          function a(e) {
            return !("string" != typeof e || !/^(0x)?[0-9a-f]{64}$/i.test(e) || !/^(0x)?[0-9a-f]{64}$/.test(e) && !/^(0x)?[0-9A-F]{64}$/.test(e));
          }
          function c(e) {
            return !("string" != typeof e || !e.match(/^(0x)?[0-9a-fA-F]{40}$/) && !e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/));
          }
          t.isBloom = i, t.isInBloom = o, t.isUserEthereumAddressInBloom = function(e, t) {
            if (!i(e)) throw new Error("Invalid bloom given");
            if (!c(t)) throw new Error(`Invalid ethereum address given: "${t}"`);
            return o(e, n.padLeft(t, 64));
          }, t.isContractAddressInBloom = function(e, t) {
            if (!i(e)) throw new Error("Invalid bloom given");
            if (!c(t)) throw new Error(`Invalid contract address given: "${t}"`);
            return o(e, t);
          }, t.isTopicInBloom = function(e, t) {
            if (!i(e)) throw new Error("Invalid bloom given");
            if (!a(t)) throw new Error("Invalid topic");
            return o(e, t);
          }, t.isTopic = a, t.isAddress = c;
        },
        339: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          const n = r(1094);
          function i(e) {
            if (null == e) throw new Error("cannot convert null value to array");
            if ("string" == typeof e) {
              const t = e.match(/^(0x)?[0-9a-fA-F]*$/);
              if (!t) throw new Error("invalid hexidecimal string");
              if ("0x" !== t[1]) throw new Error("hex string must have 0x prefix");
              (e = e.substring(2)).length % 2 && (e = "0" + e);
              const r = [];
              for (let n = 0; n < e.length; n += 2) r.push(parseInt(e.substr(n, 2), 16));
              return o(new Uint8Array(r));
            }
            if (function(e) {
              if (!e || parseInt(String(e.length)) != e.length || "string" == typeof e) return !1;
              for (let t = 0; t < e.length; t++) {
                const r = e[t];
                if (r < 0 || r >= 256 || parseInt(String(r)) != r) return !1;
              }
              return !0;
            }(e)) return o(new Uint8Array(e));
            throw new Error("invalid arrayify value");
          }
          function o(e) {
            return void 0 !== e.slice || (e.slice = () => {
              const t = Array.prototype.slice.call(arguments);
              return o(new Uint8Array(Array.prototype.slice.apply(e, t)));
            }), e;
          }
          t.keccak256 = function(e) {
            return "0x" + n.keccak_256(i(e));
          }, t.padLeft = (e, t) => {
            const r = /^0x/i.test(e) || "number" == typeof e, n = t - (e = e.toString().replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
            return (r ? "0x" : "") + new Array(n).join("0") + e;
          }, t.bytesToHex = function(e) {
            const t = [];
            for (let r = 0; r < e.length; r++) t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
            return `0x${t.join("").replace(/^0+/, "")}`;
          }, t.toByteArray = i;
        },
        5443: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.createHashFunction = function(e) {
            return function(t) {
              var r = e();
              return r.update(t), n.from(r.digest());
            };
          };
        },
        2192: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var n = r(5443), i = r(5811);
          t.keccak224 = n.createHashFunction((function() {
            return i("keccak224");
          })), t.keccak256 = n.createHashFunction((function() {
            return i("keccak256");
          })), t.keccak384 = n.createHashFunction((function() {
            return i("keccak384");
          })), t.keccak512 = n.createHashFunction((function() {
            return i("keccak512");
          }));
        },
        3242: (e, t, r) => {
          e.exports = r(9203)(r(5166));
        },
        5166: (e, t, r) => {
          const n = new (0, r(6266).ec)("secp256k1"), i = n.curve, o = i.n.constructor;
          function s(e) {
            const t = e[0];
            switch (t) {
             case 2:
             case 3:
              return 33 !== e.length ? null : function(e, t) {
                let r = new o(t);
                if (r.cmp(i.p) >= 0) return null;
                r = r.toRed(i.red);
                let s = r.redSqr().redIMul(r).redIAdd(i.b).redSqrt();
                return 3 === e !== s.isOdd() && (s = s.redNeg()), n.keyPair({
                  pub: {
                    x: r,
                    y: s
                  }
                });
              }(t, e.subarray(1, 33));

             case 4:
             case 6:
             case 7:
              return 65 !== e.length ? null : function(e, t, r) {
                let s = new o(t), a = new o(r);
                if (s.cmp(i.p) >= 0 || a.cmp(i.p) >= 0) return null;
                if (s = s.toRed(i.red), a = a.toRed(i.red), (6 === e || 7 === e) && a.isOdd() !== (7 === e)) return null;
                const c = s.redSqr().redIMul(s);
                return a.redSqr().redISub(c.redIAdd(i.b)).isZero() ? n.keyPair({
                  pub: {
                    x: s,
                    y: a
                  }
                }) : null;
              }(t, e.subarray(1, 33), e.subarray(33, 65));

             default:
              return null;
            }
          }
          function a(e, t) {
            const r = t.encode(null, 33 === e.length);
            for (let n = 0; n < e.length; ++n) e[n] = r[n];
          }
          e.exports = {
            contextRandomize: () => 0,
            privateKeyVerify(e) {
              const t = new o(e);
              return t.cmp(i.n) < 0 && !t.isZero() ? 0 : 1;
            },
            privateKeyNegate(e) {
              const t = new o(e), r = i.n.sub(t).umod(i.n).toArrayLike(Uint8Array, "be", 32);
              return e.set(r), 0;
            },
            privateKeyTweakAdd(e, t) {
              const r = new o(t);
              if (r.cmp(i.n) >= 0) return 1;
              if (r.iadd(new o(e)), r.cmp(i.n) >= 0 && r.isub(i.n), r.isZero()) return 1;
              const n = r.toArrayLike(Uint8Array, "be", 32);
              return e.set(n), 0;
            },
            privateKeyTweakMul(e, t) {
              let r = new o(t);
              if (r.cmp(i.n) >= 0 || r.isZero()) return 1;
              r.imul(new o(e)), r.cmp(i.n) >= 0 && (r = r.umod(i.n));
              const n = r.toArrayLike(Uint8Array, "be", 32);
              return e.set(n), 0;
            },
            publicKeyVerify: e => null === s(e) ? 1 : 0,
            publicKeyCreate(e, t) {
              const r = new o(t);
              return r.cmp(i.n) >= 0 || r.isZero() ? 1 : (a(e, n.keyFromPrivate(t).getPublic()), 0);
            },
            publicKeyConvert(e, t) {
              const r = s(t);
              return null === r ? 1 : (a(e, r.getPublic()), 0);
            },
            publicKeyNegate(e, t) {
              const r = s(t);
              if (null === r) return 1;
              const n = r.getPublic();
              return n.y = n.y.redNeg(), a(e, n), 0;
            },
            publicKeyCombine(e, t) {
              const r = new Array(t.length);
              for (let i = 0; i < t.length; ++i) if (r[i] = s(t[i]), null === r[i]) return 1;
              let n = r[0].getPublic();
              for (let i = 1; i < r.length; ++i) n = n.add(r[i].pub);
              return n.isInfinity() ? 2 : (a(e, n), 0);
            },
            publicKeyTweakAdd(e, t, r) {
              const n = s(t);
              if (null === n) return 1;
              if ((r = new o(r)).cmp(i.n) >= 0) return 2;
              const c = n.getPublic().add(i.g.mul(r));
              return c.isInfinity() ? 2 : (a(e, c), 0);
            },
            publicKeyTweakMul(e, t, r) {
              const n = s(t);
              return null === n ? 1 : (r = new o(r)).cmp(i.n) >= 0 || r.isZero() ? 2 : (a(e, n.getPublic().mul(r)), 0);
            },
            signatureNormalize(e) {
              const t = new o(e.subarray(0, 32)), r = new o(e.subarray(32, 64));
              return t.cmp(i.n) >= 0 || r.cmp(i.n) >= 0 ? 1 : (1 === r.cmp(n.nh) && e.set(i.n.sub(r).toArrayLike(Uint8Array, "be", 32), 32), 
              0);
            },
            signatureExport(e, t) {
              const r = t.subarray(0, 32), n = t.subarray(32, 64);
              if (new o(r).cmp(i.n) >= 0) return 1;
              if (new o(n).cmp(i.n) >= 0) return 1;
              const {output: s} = e;
              let a = s.subarray(4, 37);
              a[0] = 0, a.set(r, 1);
              let c = 33, f = 0;
              for (;c > 1 && 0 === a[f] && !(128 & a[f + 1]); --c, ++f) ;
              if (a = a.subarray(f), 128 & a[0]) return 1;
              if (c > 1 && 0 === a[0] && !(128 & a[1])) return 1;
              let u = s.subarray(39, 72);
              u[0] = 0, u.set(n, 1);
              let h = 33, d = 0;
              for (;h > 1 && 0 === u[d] && !(128 & u[d + 1]); --h, ++d) ;
              return u = u.subarray(d), 128 & u[0] || h > 1 && 0 === u[0] && !(128 & u[1]) ? 1 : (e.outputlen = 6 + c + h, s[0] = 48, 
              s[1] = e.outputlen - 2, s[2] = 2, s[3] = a.length, s.set(a, 4), s[4 + c] = 2, s[5 + c] = u.length, s.set(u, 6 + c), 0);
            },
            signatureImport(e, t) {
              if (t.length < 8) return 1;
              if (t.length > 72) return 1;
              if (48 !== t[0]) return 1;
              if (t[1] !== t.length - 2) return 1;
              if (2 !== t[2]) return 1;
              const r = t[3];
              if (0 === r) return 1;
              if (5 + r >= t.length) return 1;
              if (2 !== t[4 + r]) return 1;
              const n = t[5 + r];
              if (0 === n) return 1;
              if (6 + r + n !== t.length) return 1;
              if (128 & t[4]) return 1;
              if (r > 1 && 0 === t[4] && !(128 & t[5])) return 1;
              if (128 & t[r + 6]) return 1;
              if (n > 1 && 0 === t[r + 6] && !(128 & t[r + 7])) return 1;
              let s = t.subarray(4, 4 + r);
              if (33 === s.length && 0 === s[0] && (s = s.subarray(1)), s.length > 32) return 1;
              let a = t.subarray(6 + r);
              if (33 === a.length && 0 === a[0] && (a = a.slice(1)), a.length > 32) throw new Error("S length is too long");
              let c = new o(s);
              c.cmp(i.n) >= 0 && (c = new o(0));
              let f = new o(t.subarray(6 + r));
              return f.cmp(i.n) >= 0 && (f = new o(0)), e.set(c.toArrayLike(Uint8Array, "be", 32), 0), e.set(f.toArrayLike(Uint8Array, "be", 32), 32), 
              0;
            },
            ecdsaSign(e, t, r, s, a) {
              if (a) {
                const e = a;
                a = n => {
                  const i = e(t, r, null, s, n);
                  if (!(i instanceof Uint8Array && 32 === i.length)) throw new Error("This is the way");
                  return new o(i);
                };
              }
              const c = new o(r);
              if (c.cmp(i.n) >= 0 || c.isZero()) return 1;
              let f;
              try {
                f = n.sign(t, r, {
                  canonical: !0,
                  k: a,
                  pers: s
                });
              } catch (e) {
                return 1;
              }
              return e.signature.set(f.r.toArrayLike(Uint8Array, "be", 32), 0), e.signature.set(f.s.toArrayLike(Uint8Array, "be", 32), 32), 
              e.recid = f.recoveryParam, 0;
            },
            ecdsaVerify(e, t, r) {
              const a = {
                r: e.subarray(0, 32),
                s: e.subarray(32, 64)
              }, c = new o(a.r), f = new o(a.s);
              if (c.cmp(i.n) >= 0 || f.cmp(i.n) >= 0) return 1;
              if (1 === f.cmp(n.nh) || c.isZero() || f.isZero()) return 3;
              const u = s(r);
              if (null === u) return 2;
              const h = u.getPublic();
              return n.verify(t, a, h) ? 0 : 3;
            },
            ecdsaRecover(e, t, r, s) {
              const c = {
                r: t.slice(0, 32),
                s: t.slice(32, 64)
              }, f = new o(c.r), u = new o(c.s);
              if (f.cmp(i.n) >= 0 || u.cmp(i.n) >= 0) return 1;
              if (f.isZero() || u.isZero()) return 2;
              let h;
              try {
                h = n.recoverPubKey(s, c, r);
              } catch (e) {
                return 2;
              }
              return a(e, h), 0;
            },
            ecdh(e, t, r, a, c, f, u) {
              const h = s(t);
              if (null === h) return 1;
              const d = new o(r);
              if (d.cmp(i.n) >= 0 || d.isZero()) return 2;
              const l = h.getPublic().mul(d);
              if (void 0 === c) {
                const t = l.encode(null, !0), r = n.hash().update(t).digest();
                for (let n = 0; n < 32; ++n) e[n] = r[n];
              } else {
                f || (f = new Uint8Array(32));
                const t = l.getX().toArray("be", 32);
                for (let e = 0; e < 32; ++e) f[e] = t[e];
                u || (u = new Uint8Array(32));
                const r = l.getY().toArray("be", 32);
                for (let e = 0; e < 32; ++e) u[e] = r[e];
                const n = c(f, u, a);
                if (!(n instanceof Uint8Array && n.length === e.length)) return 2;
                e.set(n);
              }
              return 0;
            }
          };
        },
        9203: e => {
          const t = "Impossible case. Please create issue.", r = "The tweak was out of range or the resulted private key is invalid", n = "The tweak was out of range or equal to zero", i = "Public Key could not be parsed", o = "Public Key serialization error", s = "Signature could not be parsed";
          function a(e, t) {
            if (!e) throw new Error(t);
          }
          function c(e, t, r) {
            if (a(t instanceof Uint8Array, `Expected ${e} to be an Uint8Array`), void 0 !== r) if (Array.isArray(r)) {
              const n = `Expected ${e} to be an Uint8Array with length [${r.join(", ")}]`;
              a(r.includes(t.length), n);
            } else {
              const n = `Expected ${e} to be an Uint8Array with length ${r}`;
              a(t.length === r, n);
            }
          }
          function f(e) {
            a("Boolean" === h(e), "Expected compressed to be a Boolean");
          }
          function u(e = (e => new Uint8Array(e)), t) {
            return "function" == typeof e && (e = e(t)), c("output", e, t), e;
          }
          function h(e) {
            return Object.prototype.toString.call(e).slice(8, -1);
          }
          e.exports = e => ({
            contextRandomize(t) {
              if (a(null === t || t instanceof Uint8Array, "Expected seed to be an Uint8Array or null"), null !== t && c("seed", t, 32), 
              1 === e.contextRandomize(t)) throw new Error("Unknow error on context randomization");
            },
            privateKeyVerify: t => (c("private key", t, 32), 0 === e.privateKeyVerify(t)),
            privateKeyNegate(r) {
              switch (c("private key", r, 32), e.privateKeyNegate(r)) {
               case 0:
                return r;

               case 1:
                throw new Error(t);
              }
            },
            privateKeyTweakAdd(t, n) {
              switch (c("private key", t, 32), c("tweak", n, 32), e.privateKeyTweakAdd(t, n)) {
               case 0:
                return t;

               case 1:
                throw new Error(r);
              }
            },
            privateKeyTweakMul(t, r) {
              switch (c("private key", t, 32), c("tweak", r, 32), e.privateKeyTweakMul(t, r)) {
               case 0:
                return t;

               case 1:
                throw new Error(n);
              }
            },
            publicKeyVerify: t => (c("public key", t, [ 33, 65 ]), 0 === e.publicKeyVerify(t)),
            publicKeyCreate(t, r = !0, n) {
              switch (c("private key", t, 32), f(r), n = u(n, r ? 33 : 65), e.publicKeyCreate(n, t)) {
               case 0:
                return n;

               case 1:
                throw new Error("Private Key is invalid");

               case 2:
                throw new Error(o);
              }
            },
            publicKeyConvert(t, r = !0, n) {
              switch (c("public key", t, [ 33, 65 ]), f(r), n = u(n, r ? 33 : 65), e.publicKeyConvert(n, t)) {
               case 0:
                return n;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error(o);
              }
            },
            publicKeyNegate(r, n = !0, s) {
              switch (c("public key", r, [ 33, 65 ]), f(n), s = u(s, n ? 33 : 65), e.publicKeyNegate(s, r)) {
               case 0:
                return s;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error(t);

               case 3:
                throw new Error(o);
              }
            },
            publicKeyCombine(t, r = !0, n) {
              a(Array.isArray(t), "Expected public keys to be an Array"), a(t.length > 0, "Expected public keys array will have more than zero items");
              for (const e of t) c("public key", e, [ 33, 65 ]);
              switch (f(r), n = u(n, r ? 33 : 65), e.publicKeyCombine(n, t)) {
               case 0:
                return n;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error("The sum of the public keys is not valid");

               case 3:
                throw new Error(o);
              }
            },
            publicKeyTweakAdd(t, n, o = !0, s) {
              switch (c("public key", t, [ 33, 65 ]), c("tweak", n, 32), f(o), s = u(s, o ? 33 : 65), e.publicKeyTweakAdd(s, t, n)) {
               case 0:
                return s;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error(r);
              }
            },
            publicKeyTweakMul(t, r, o = !0, s) {
              switch (c("public key", t, [ 33, 65 ]), c("tweak", r, 32), f(o), s = u(s, o ? 33 : 65), e.publicKeyTweakMul(s, t, r)) {
               case 0:
                return s;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error(n);
              }
            },
            signatureNormalize(t) {
              switch (c("signature", t, 64), e.signatureNormalize(t)) {
               case 0:
                return t;

               case 1:
                throw new Error(s);
              }
            },
            signatureExport(r, n) {
              c("signature", r, 64);
              const i = {
                output: n = u(n, 72),
                outputlen: 72
              };
              switch (e.signatureExport(i, r)) {
               case 0:
                return n.slice(0, i.outputlen);

               case 1:
                throw new Error(s);

               case 2:
                throw new Error(t);
              }
            },
            signatureImport(r, n) {
              switch (c("signature", r), n = u(n, 64), e.signatureImport(n, r)) {
               case 0:
                return n;

               case 1:
                throw new Error(s);

               case 2:
                throw new Error(t);
              }
            },
            ecdsaSign(r, n, i = {}, o) {
              c("message", r, 32), c("private key", n, 32), a("Object" === h(i), "Expected options to be an Object"), void 0 !== i.data && c("options.data", i.data), 
              void 0 !== i.noncefn && a("Function" === h(i.noncefn), "Expected options.noncefn to be a Function");
              const s = {
                signature: o = u(o, 64),
                recid: null
              };
              switch (e.ecdsaSign(s, r, n, i.data, i.noncefn)) {
               case 0:
                return s;

               case 1:
                throw new Error("The nonce generation function failed, or the private key was invalid");

               case 2:
                throw new Error(t);
              }
            },
            ecdsaVerify(t, r, n) {
              switch (c("signature", t, 64), c("message", r, 32), c("public key", n, [ 33, 65 ]), e.ecdsaVerify(t, r, n)) {
               case 0:
                return !0;

               case 3:
                return !1;

               case 1:
                throw new Error(s);

               case 2:
                throw new Error(i);
              }
            },
            ecdsaRecover(r, n, i, o = !0, d) {
              switch (c("signature", r, 64), a("Number" === h(n) && n >= 0 && n <= 3, "Expected recovery id to be a Number within interval [0, 3]"), 
              c("message", i, 32), f(o), d = u(d, o ? 33 : 65), e.ecdsaRecover(d, r, n, i)) {
               case 0:
                return d;

               case 1:
                throw new Error(s);

               case 2:
                throw new Error("Public key could not be recover");

               case 3:
                throw new Error(t);
              }
            },
            ecdh(t, r, n = {}, o) {
              switch (c("public key", t, [ 33, 65 ]), c("private key", r, 32), a("Object" === h(n), "Expected options to be an Object"), 
              void 0 !== n.data && c("options.data", n.data), void 0 !== n.hashfn ? (a("Function" === h(n.hashfn), "Expected options.hashfn to be a Function"), 
              void 0 !== n.xbuf && c("options.xbuf", n.xbuf, 32), void 0 !== n.ybuf && c("options.ybuf", n.ybuf, 32), c("output", o)) : o = u(o, 32), 
              e.ecdh(o, t, r, n.data, n.hashfn, n.xbuf, n.ybuf)) {
               case 0:
                return o;

               case 1:
                throw new Error(i);

               case 2:
                throw new Error("Scalar was invalid (zero or overflow)");
              }
            }
          });
        },
        472: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var n = r(1798);
          t.getRandomBytes = function(e) {
            return new Promise((function(t, r) {
              n(e, (function(e, n) {
                e ? r(e) : t(n);
              }));
            }));
          }, t.getRandomBytesSync = function(e) {
            return n(e);
          };
        },
        5053: function(e, t, r) {
          "use strict";
          var n = this && this.__awaiter || function(e, t, r, n) {
            return new (r || (r = Promise))((function(i, o) {
              function s(e) {
                try {
                  c(n.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function a(e) {
                try {
                  c(n.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function c(e) {
                var t;
                e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r((function(e) {
                  e(t);
                }))).then(s, a);
              }
              c((n = n.apply(e, t || [])).next());
            }));
          }, i = this && this.__generator || function(e, t) {
            var r, n, i, o, s = {
              label: 0,
              sent: function() {
                if (1 & i[0]) throw i[1];
                return i[1];
              },
              trys: [],
              ops: []
            };
            return o = {
              next: a(0),
              throw: a(1),
              return: a(2)
            }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
              return this;
            }), o;
            function a(o) {
              return function(a) {
                return function(o) {
                  if (r) throw new TypeError("Generator is already executing.");
                  for (;s; ) try {
                    if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;
                    switch (n = 0, i && (o = [ 2 & o[0], i.value ]), o[0]) {
                     case 0:
                     case 1:
                      i = o;
                      break;

                     case 4:
                      return s.label++, {
                        value: o[1],
                        done: !1
                      };

                     case 5:
                      s.label++, n = o[1], o = [ 0 ];
                      continue;

                     case 7:
                      o = s.ops.pop(), s.trys.pop();
                      continue;

                     default:
                      if (!((i = (i = s.trys).length > 0 && i[i.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                        s = 0;
                        continue;
                      }
                      if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {
                        s.label = o[1];
                        break;
                      }
                      if (6 === o[0] && s.label < i[1]) {
                        s.label = i[1], i = o;
                        break;
                      }
                      if (i && s.label < i[2]) {
                        s.label = i[2], s.ops.push(o);
                        break;
                      }
                      i[2] && s.ops.pop(), s.trys.pop();
                      continue;
                    }
                    o = t.call(e, s);
                  } catch (e) {
                    o = [ 6, e ], n = 0;
                  } finally {
                    r = i = 0;
                  }
                  if (5 & o[0]) throw o[1];
                  return {
                    value: o[0] ? o[1] : void 0,
                    done: !0
                  };
                }([ o, a ]);
              };
            }
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var o = r(3242), s = r(472);
          t.createPrivateKey = function() {
            return n(this, void 0, void 0, (function() {
              var e;
              return i(this, (function(t) {
                switch (t.label) {
                 case 0:
                  return [ 4, s.getRandomBytes(32) ];

                 case 1:
                  return e = t.sent(), o.privateKeyVerify(e) ? [ 2, e ] : [ 3, 0 ];

                 case 2:
                  return [ 2 ];
                }
              }));
            }));
          }, t.createPrivateKeySync = function() {
            for (;;) {
              var e = s.getRandomBytesSync(32);
              if (o.privateKeyVerify(e)) return e;
            }
          }, function(e) {
            for (var r in e) t.hasOwnProperty(r) || (t[r] = e[r]);
          }(r(3242));
        },
        8670: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__read || function(e, t) {
            var r = "function" == typeof Symbol && e[Symbol.iterator];
            if (!r) return e;
            var n, i, o = r.call(e), s = [];
            try {
              for (;(void 0 === t || t-- > 0) && !(n = o.next()).done; ) s.push(n.value);
            } catch (e) {
              i = {
                error: e
              };
            } finally {
              try {
                n && !n.done && (r = o.return) && r.call(o);
              } finally {
                if (i) throw i.error;
              }
            }
            return s;
          }, o = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isZeroAddress = t.zeroAddress = t.importPublic = t.privateToAddress = t.privateToPublic = t.publicToAddress = t.pubToAddress = t.isValidPublic = t.isValidPrivate = t.generateAddress2 = t.generateAddress = t.isValidChecksumAddress = t.toChecksumAddress = t.isValidAddress = t.Account = void 0;
          var s = o(r(9282)), a = r(4538), c = r(5053), f = r(4846), u = r(6861), h = r(4651), d = r(5641), l = r(3746), p = r(2971), b = function() {
            function e(e, t, r, n) {
              void 0 === e && (e = new a.BN(0)), void 0 === t && (t = new a.BN(0)), void 0 === r && (r = u.KECCAK256_RLP), void 0 === n && (n = u.KECCAK256_NULL), 
              this.nonce = e, this.balance = t, this.stateRoot = r, this.codeHash = n, this._validate();
            }
            return e.fromAccountData = function(t) {
              var r = t.nonce, n = t.balance, i = t.stateRoot, o = t.codeHash;
              return new e(r ? new a.BN((0, h.toBuffer)(r)) : void 0, n ? new a.BN((0, h.toBuffer)(n)) : void 0, i ? (0, h.toBuffer)(i) : void 0, o ? (0, 
              h.toBuffer)(o) : void 0);
            }, e.fromRlpSerializedAccount = function(e) {
              var t = a.rlp.decode(e);
              if (!Array.isArray(t)) throw new Error("Invalid serialized account input. Must be array");
              return this.fromValuesArray(t);
            }, e.fromValuesArray = function(t) {
              var r = i(t, 4), n = r[0], o = r[1], s = r[2], c = r[3];
              return new e(new a.BN(n), new a.BN(o), s, c);
            }, e.prototype._validate = function() {
              if (this.nonce.lt(new a.BN(0))) throw new Error("nonce must be greater than zero");
              if (this.balance.lt(new a.BN(0))) throw new Error("balance must be greater than zero");
              if (32 !== this.stateRoot.length) throw new Error("stateRoot must have a length of 32");
              if (32 !== this.codeHash.length) throw new Error("codeHash must have a length of 32");
            }, e.prototype.raw = function() {
              return [ (0, p.bnToUnpaddedBuffer)(this.nonce), (0, p.bnToUnpaddedBuffer)(this.balance), this.stateRoot, this.codeHash ];
            }, e.prototype.serialize = function() {
              return a.rlp.encode(this.raw());
            }, e.prototype.isContract = function() {
              return !this.codeHash.equals(u.KECCAK256_NULL);
            }, e.prototype.isEmpty = function() {
              return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(u.KECCAK256_NULL);
            }, e;
          }();
          t.Account = b, t.isValidAddress = function(e) {
            try {
              (0, l.assertIsString)(e);
            } catch (e) {
              return !1;
            }
            return /^0x[0-9a-fA-F]{40}$/.test(e);
          }, t.toChecksumAddress = function(e, t) {
            (0, l.assertIsHexString)(e);
            var r = (0, f.stripHexPrefix)(e).toLowerCase(), n = "";
            t && (n = (0, p.toType)(t, p.TypeOutput.BN).toString() + "0x");
            for (var i = (0, d.keccakFromString)(n + r).toString("hex"), o = "0x", s = 0; s < r.length; s++) parseInt(i[s], 16) >= 8 ? o += r[s].toUpperCase() : o += r[s];
            return o;
          }, t.isValidChecksumAddress = function(e, r) {
            return (0, t.isValidAddress)(e) && (0, t.toChecksumAddress)(e, r) === e;
          }, t.generateAddress = function(e, t) {
            (0, l.assertIsBuffer)(e), (0, l.assertIsBuffer)(t);
            var r = new a.BN(t);
            return r.isZero() ? (0, d.rlphash)([ e, null ]).slice(-20) : (0, d.rlphash)([ e, n.from(r.toArray()) ]).slice(-20);
          }, t.generateAddress2 = function(e, t, r) {
            return (0, l.assertIsBuffer)(e), (0, l.assertIsBuffer)(t), (0, l.assertIsBuffer)(r), (0, s.default)(20 === e.length), (0, 
            s.default)(32 === t.length), (0, d.keccak256)(n.concat([ n.from("ff", "hex"), e, t, (0, d.keccak256)(r) ])).slice(-20);
          }, t.isValidPrivate = function(e) {
            return (0, c.privateKeyVerify)(e);
          }, t.isValidPublic = function(e, t) {
            return void 0 === t && (t = !1), (0, l.assertIsBuffer)(e), 64 === e.length ? (0, c.publicKeyVerify)(n.concat([ n.from([ 4 ]), e ])) : !!t && (0, 
            c.publicKeyVerify)(e);
          }, t.pubToAddress = function(e, t) {
            return void 0 === t && (t = !1), (0, l.assertIsBuffer)(e), t && 64 !== e.length && (e = n.from((0, c.publicKeyConvert)(e, !1).slice(1))), 
            (0, s.default)(64 === e.length), (0, d.keccak)(e).slice(-20);
          }, t.publicToAddress = t.pubToAddress, t.privateToPublic = function(e) {
            return (0, l.assertIsBuffer)(e), n.from((0, c.publicKeyCreate)(e, !1)).slice(1);
          }, t.privateToAddress = function(e) {
            return (0, t.publicToAddress)((0, t.privateToPublic)(e));
          }, t.importPublic = function(e) {
            return (0, l.assertIsBuffer)(e), 64 !== e.length && (e = n.from((0, c.publicKeyConvert)(e, !1).slice(1))), e;
          }, t.zeroAddress = function() {
            var e = (0, h.zeros)(20);
            return (0, h.bufferToHex)(e);
          }, t.isZeroAddress = function(e) {
            try {
              (0, l.assertIsString)(e);
            } catch (e) {
              return !1;
            }
            return (0, t.zeroAddress)() === e;
          };
        },
        6871: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.Address = void 0;
          var o = i(r(9282)), s = r(4538), a = r(4651), c = r(8670), f = function() {
            function e(e) {
              (0, o.default)(20 === e.length, "Invalid address length"), this.buf = e;
            }
            return e.zero = function() {
              return new e((0, a.zeros)(20));
            }, e.fromString = function(t) {
              return (0, o.default)((0, c.isValidAddress)(t), "Invalid address"), new e((0, a.toBuffer)(t));
            }, e.fromPublicKey = function(t) {
              return (0, o.default)(n.isBuffer(t), "Public key should be Buffer"), new e((0, c.pubToAddress)(t));
            }, e.fromPrivateKey = function(t) {
              return (0, o.default)(n.isBuffer(t), "Private key should be Buffer"), new e((0, c.privateToAddress)(t));
            }, e.generate = function(t, r) {
              return (0, o.default)(s.BN.isBN(r)), new e((0, c.generateAddress)(t.buf, r.toArrayLike(n)));
            }, e.generate2 = function(t, r, i) {
              return (0, o.default)(n.isBuffer(r)), (0, o.default)(n.isBuffer(i)), new e((0, c.generateAddress2)(t.buf, r, i));
            }, e.prototype.equals = function(e) {
              return this.buf.equals(e.buf);
            }, e.prototype.isZero = function() {
              return this.equals(e.zero());
            }, e.prototype.isPrecompileOrSystemAddress = function() {
              var e = new s.BN(this.buf), t = new s.BN(0), r = new s.BN("ffff", "hex");
              return e.gte(t) && e.lte(r);
            }, e.prototype.toString = function() {
              return "0x" + this.buf.toString("hex");
            }, e.prototype.toBuffer = function() {
              return n.from(this.buf);
            }, e;
          }();
          t.Address = f;
        },
        4651: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__values || function(e) {
            var t = "function" == typeof Symbol && Symbol.iterator, r = t && e[t], n = 0;
            if (r) return r.call(e);
            if (e && "number" == typeof e.length) return {
              next: function() {
                return e && n >= e.length && (e = void 0), {
                  value: e && e[n++],
                  done: !e
                };
              }
            };
            throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, o = this && this.__read || function(e, t) {
            var r = "function" == typeof Symbol && e[Symbol.iterator];
            if (!r) return e;
            var n, i, o = r.call(e), s = [];
            try {
              for (;(void 0 === t || t-- > 0) && !(n = o.next()).done; ) s.push(n.value);
            } catch (e) {
              i = {
                error: e
              };
            } finally {
              try {
                n && !n.done && (r = o.return) && r.call(o);
              } finally {
                if (i) throw i.error;
              }
            }
            return s;
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.bufArrToArr = t.arrToBufArr = t.validateNoLeadingZeroes = t.baToJSON = t.toUtf8 = t.addHexPrefix = t.toUnsigned = t.fromSigned = t.bufferToHex = t.bufferToInt = t.toBuffer = t.unpadHexString = t.unpadArray = t.unpadBuffer = t.setLengthRight = t.setLengthLeft = t.zeros = t.intToBuffer = t.intToHex = void 0;
          var s = r(4538), a = r(4846), c = r(3746);
          t.intToHex = function(e) {
            if (!Number.isSafeInteger(e) || e < 0) throw new Error("Received an invalid integer type: ".concat(e));
            return "0x".concat(e.toString(16));
          }, t.intToBuffer = function(e) {
            var r = (0, t.intToHex)(e);
            return n.from((0, a.padToEven)(r.slice(2)), "hex");
          }, t.zeros = function(e) {
            return n.allocUnsafe(e).fill(0);
          };
          var f = function(e, r, n) {
            var i = (0, t.zeros)(r);
            return n ? e.length < r ? (e.copy(i), i) : e.slice(0, r) : e.length < r ? (e.copy(i, r - e.length), i) : e.slice(-r);
          };
          t.setLengthLeft = function(e, t) {
            return (0, c.assertIsBuffer)(e), f(e, t, !1);
          }, t.setLengthRight = function(e, t) {
            return (0, c.assertIsBuffer)(e), f(e, t, !0);
          };
          var u = function(e) {
            for (var t = e[0]; e.length > 0 && "0" === t.toString(); ) t = (e = e.slice(1))[0];
            return e;
          };
          t.unpadBuffer = function(e) {
            return (0, c.assertIsBuffer)(e), u(e);
          }, t.unpadArray = function(e) {
            return (0, c.assertIsArray)(e), u(e);
          }, t.unpadHexString = function(e) {
            return (0, c.assertIsHexString)(e), e = (0, a.stripHexPrefix)(e), u(e);
          }, t.toBuffer = function(e) {
            if (null == e) return n.allocUnsafe(0);
            if (n.isBuffer(e)) return n.from(e);
            if (Array.isArray(e) || e instanceof Uint8Array) return n.from(e);
            if ("string" == typeof e) {
              if (!(0, a.isHexString)(e)) throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(e));
              return n.from((0, a.padToEven)((0, a.stripHexPrefix)(e)), "hex");
            }
            if ("number" == typeof e) return (0, t.intToBuffer)(e);
            if (s.BN.isBN(e)) {
              if (e.isNeg()) throw new Error("Cannot convert negative BN to buffer. Given: ".concat(e));
              return e.toArrayLike(n);
            }
            if (e.toArray) return n.from(e.toArray());
            if (e.toBuffer) return n.from(e.toBuffer());
            throw new Error("invalid type");
          }, t.bufferToInt = function(e) {
            return new s.BN((0, t.toBuffer)(e)).toNumber();
          }, t.bufferToHex = function(e) {
            return "0x" + (e = (0, t.toBuffer)(e)).toString("hex");
          }, t.fromSigned = function(e) {
            return new s.BN(e).fromTwos(256);
          }, t.toUnsigned = function(e) {
            return n.from(e.toTwos(256).toArray());
          }, t.addHexPrefix = function(e) {
            return "string" != typeof e || (0, a.isHexPrefixed)(e) ? e : "0x" + e;
          }, t.toUtf8 = function(e) {
            if ((e = (0, a.stripHexPrefix)(e)).length % 2 != 0) throw new Error("Invalid non-even hex string input for toUtf8() provided");
            return n.from(e.replace(/^(00)+|(00)+$/g, ""), "hex").toString("utf8");
          }, t.baToJSON = function(e) {
            if (n.isBuffer(e)) return "0x".concat(e.toString("hex"));
            if (e instanceof Array) {
              for (var r = [], i = 0; i < e.length; i++) r.push((0, t.baToJSON)(e[i]));
              return r;
            }
          }, t.validateNoLeadingZeroes = function(e) {
            var t, r;
            try {
              for (var n = i(Object.entries(e)), s = n.next(); !s.done; s = n.next()) {
                var a = o(s.value, 2), c = a[0], f = a[1];
                if (void 0 !== f && f.length > 0 && 0 === f[0]) throw new Error("".concat(c, " cannot have leading zeroes, received: ").concat(f.toString("hex")));
              }
            } catch (e) {
              t = {
                error: e
              };
            } finally {
              try {
                s && !s.done && (r = n.return) && r.call(n);
              } finally {
                if (t) throw t.error;
              }
            }
          }, t.arrToBufArr = function e(t) {
            return Array.isArray(t) ? t.map((function(t) {
              return e(t);
            })) : n.from(t);
          }, t.bufArrToArr = function e(t) {
            return Array.isArray(t) ? t.map((function(t) {
              return e(t);
            })) : Uint8Array.from(null != t ? t : []);
          };
        },
        6861: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.KECCAK256_RLP = t.KECCAK256_RLP_S = t.KECCAK256_RLP_ARRAY = t.KECCAK256_RLP_ARRAY_S = t.KECCAK256_NULL = t.KECCAK256_NULL_S = t.TWO_POW256 = t.MAX_INTEGER = t.MAX_UINT64 = void 0;
          var n = r(8764), i = r(4538);
          t.MAX_UINT64 = new i.BN("ffffffffffffffff", 16), t.MAX_INTEGER = new i.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16), 
          t.TWO_POW256 = new i.BN("10000000000000000000000000000000000000000000000000000000000000000", 16), t.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", 
          t.KECCAK256_NULL = n.Buffer.from(t.KECCAK256_NULL_S, "hex"), t.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347", 
          t.KECCAK256_RLP_ARRAY = n.Buffer.from(t.KECCAK256_RLP_ARRAY_S, "hex"), t.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421", 
          t.KECCAK256_RLP = n.Buffer.from(t.KECCAK256_RLP_S, "hex");
        },
        4538: function(e, t, r) {
          "use strict";
          var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
            void 0 === n && (n = r);
            var i = Object.getOwnPropertyDescriptor(t, r);
            i && !("get" in i ? !t.__esModule : i.writable || i.configurable) || (i = {
              enumerable: !0,
              get: function() {
                return t[r];
              }
            }), Object.defineProperty(e, n, i);
          } : function(e, t, r, n) {
            void 0 === n && (n = r), e[n] = t[r];
          }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
            Object.defineProperty(e, "default", {
              enumerable: !0,
              value: t
            });
          } : function(e, t) {
            e.default = t;
          }), o = this && this.__importStar || function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e) for (var r in e) "default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
            return i(t, e), t;
          }, s = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.rlp = t.BN = void 0;
          var a = s(r(3550));
          t.BN = a.default;
          var c = o(r(1675));
          t.rlp = c;
        },
        5641: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.rlphash = t.ripemd160FromArray = t.ripemd160FromString = t.ripemd160 = t.sha256FromArray = t.sha256FromString = t.sha256 = t.keccakFromArray = t.keccakFromHexString = t.keccakFromString = t.keccak256 = t.keccak = void 0;
          var i = r(2192), o = r(3482), s = r(4538), a = r(4651), c = r(3746);
          t.keccak = function(e, t) {
            switch (void 0 === t && (t = 256), (0, c.assertIsBuffer)(e), t) {
             case 224:
              return (0, i.keccak224)(e);

             case 256:
              return (0, i.keccak256)(e);

             case 384:
              return (0, i.keccak384)(e);

             case 512:
              return (0, i.keccak512)(e);

             default:
              throw new Error("Invald algorithm: keccak".concat(t));
            }
          }, t.keccak256 = function(e) {
            return (0, t.keccak)(e);
          }, t.keccakFromString = function(e, r) {
            void 0 === r && (r = 256), (0, c.assertIsString)(e);
            var i = n.from(e, "utf8");
            return (0, t.keccak)(i, r);
          }, t.keccakFromHexString = function(e, r) {
            return void 0 === r && (r = 256), (0, c.assertIsHexString)(e), (0, t.keccak)((0, a.toBuffer)(e), r);
          }, t.keccakFromArray = function(e, r) {
            return void 0 === r && (r = 256), (0, c.assertIsArray)(e), (0, t.keccak)((0, a.toBuffer)(e), r);
          };
          var f = function(e) {
            return e = (0, a.toBuffer)(e), o("sha256").update(e).digest();
          };
          t.sha256 = function(e) {
            return (0, c.assertIsBuffer)(e), f(e);
          }, t.sha256FromString = function(e) {
            return (0, c.assertIsString)(e), f(e);
          }, t.sha256FromArray = function(e) {
            return (0, c.assertIsArray)(e), f(e);
          };
          var u = function(e, t) {
            e = (0, a.toBuffer)(e);
            var r = o("rmd160").update(e).digest();
            return !0 === t ? (0, a.setLengthLeft)(r, 32) : r;
          };
          t.ripemd160 = function(e, t) {
            return (0, c.assertIsBuffer)(e), u(e, t);
          }, t.ripemd160FromString = function(e, t) {
            return (0, c.assertIsString)(e), u(e, t);
          }, t.ripemd160FromArray = function(e, t) {
            return (0, c.assertIsArray)(e), u(e, t);
          }, t.rlphash = function(e) {
            return (0, t.keccak)(s.rlp.encode(e));
          };
        },
        3746: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.assertIsString = t.assertIsArray = t.assertIsBuffer = t.assertIsHexString = void 0;
          var i = r(4846);
          t.assertIsHexString = function(e) {
            if (!(0, i.isHexString)(e)) {
              var t = "This method only supports 0x-prefixed hex strings but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsBuffer = function(e) {
            if (!n.isBuffer(e)) {
              var t = "This method only supports Buffer but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsArray = function(e) {
            if (!Array.isArray(e)) {
              var t = "This method only supports number arrays but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsString = function(e) {
            if ("string" != typeof e) {
              var t = "This method only supports strings but input was: ".concat(e);
              throw new Error(t);
            }
          };
        },
        2751: function(e, t, r) {
          "use strict";
          var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
            void 0 === n && (n = r);
            var i = Object.getOwnPropertyDescriptor(t, r);
            i && !("get" in i ? !t.__esModule : i.writable || i.configurable) || (i = {
              enumerable: !0,
              get: function() {
                return t[r];
              }
            }), Object.defineProperty(e, n, i);
          } : function(e, t, r, n) {
            void 0 === n && (n = r), e[n] = t[r];
          }), i = this && this.__exportStar || function(e, t) {
            for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isHexString = t.getKeys = t.fromAscii = t.fromUtf8 = t.toAscii = t.arrayContainsArray = t.getBinarySize = t.padToEven = t.stripHexPrefix = t.isHexPrefixed = void 0, 
          i(r(6861), t), i(r(8670), t), i(r(6871), t), i(r(5641), t), i(r(7112), t), i(r(4651), t), i(r(867), t), i(r(4538), t), i(r(2971), t);
          var o = r(4846);
          Object.defineProperty(t, "isHexPrefixed", {
            enumerable: !0,
            get: function() {
              return o.isHexPrefixed;
            }
          }), Object.defineProperty(t, "stripHexPrefix", {
            enumerable: !0,
            get: function() {
              return o.stripHexPrefix;
            }
          }), Object.defineProperty(t, "padToEven", {
            enumerable: !0,
            get: function() {
              return o.padToEven;
            }
          }), Object.defineProperty(t, "getBinarySize", {
            enumerable: !0,
            get: function() {
              return o.getBinarySize;
            }
          }), Object.defineProperty(t, "arrayContainsArray", {
            enumerable: !0,
            get: function() {
              return o.arrayContainsArray;
            }
          }), Object.defineProperty(t, "toAscii", {
            enumerable: !0,
            get: function() {
              return o.toAscii;
            }
          }), Object.defineProperty(t, "fromUtf8", {
            enumerable: !0,
            get: function() {
              return o.fromUtf8;
            }
          }), Object.defineProperty(t, "fromAscii", {
            enumerable: !0,
            get: function() {
              return o.fromAscii;
            }
          }), Object.defineProperty(t, "getKeys", {
            enumerable: !0,
            get: function() {
              return o.getKeys;
            }
          }), Object.defineProperty(t, "isHexString", {
            enumerable: !0,
            get: function() {
              return o.isHexString;
            }
          });
        },
        4846: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          function i(e) {
            if ("string" != typeof e) throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof e));
            return "0" === e[0] && "x" === e[1];
          }
          function o(e) {
            var t = e;
            if ("string" != typeof t) throw new Error("[padToEven] value must be type 'string', received ".concat(typeof t));
            return t.length % 2 && (t = "0".concat(t)), t;
          }
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isHexString = t.getKeys = t.fromAscii = t.fromUtf8 = t.toAscii = t.arrayContainsArray = t.getBinarySize = t.padToEven = t.stripHexPrefix = t.isHexPrefixed = void 0, 
          t.isHexPrefixed = i, t.stripHexPrefix = function(e) {
            if ("string" != typeof e) throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof e));
            return i(e) ? e.slice(2) : e;
          }, t.padToEven = o, t.getBinarySize = function(e) {
            if ("string" != typeof e) throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof e));
            return n.byteLength(e, "utf8");
          }, t.arrayContainsArray = function(e, t, r) {
            if (!0 !== Array.isArray(e)) throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof e, "'"));
            if (!0 !== Array.isArray(t)) throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof t, "'"));
            return t[r ? "some" : "every"]((function(t) {
              return e.indexOf(t) >= 0;
            }));
          }, t.toAscii = function(e) {
            var t = "", r = 0, n = e.length;
            for ("0x" === e.substring(0, 2) && (r = 2); r < n; r += 2) {
              var i = parseInt(e.substr(r, 2), 16);
              t += String.fromCharCode(i);
            }
            return t;
          }, t.fromUtf8 = function(e) {
            var t = n.from(e, "utf8");
            return "0x".concat(o(t.toString("hex")).replace(/^0+|0+$/g, ""));
          }, t.fromAscii = function(e) {
            for (var t = "", r = 0; r < e.length; r++) {
              var n = e.charCodeAt(r).toString(16);
              t += n.length < 2 ? "0".concat(n) : n;
            }
            return "0x".concat(t);
          }, t.getKeys = function(e, t, r) {
            if (!Array.isArray(e)) throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof e));
            if ("string" != typeof t) throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof e));
            for (var n = [], i = 0; i < e.length; i++) {
              var o = e[i][t];
              if (r && !o) o = ""; else if ("string" != typeof o) throw new Error("invalid abi - expected type 'string', received ".concat(typeof o));
              n.push(o);
            }
            return n;
          }, t.isHexString = function(e, t) {
            return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);
          };
        },
        867: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.defineProperties = void 0;
          var o = i(r(9282)), s = r(4846), a = r(4538), c = r(4651);
          t.defineProperties = function(e, t, r) {
            if (e.raw = [], e._fields = [], e.toJSON = function(t) {
              if (void 0 === t && (t = !1), t) {
                var r = {};
                return e._fields.forEach((function(t) {
                  r[t] = "0x".concat(e[t].toString("hex"));
                })), r;
              }
              return (0, c.baToJSON)(e.raw);
            }, e.serialize = function() {
              return a.rlp.encode(e.raw);
            }, t.forEach((function(t, r) {
              function i() {
                return e.raw[r];
              }
              function s(i) {
                "00" !== (i = (0, c.toBuffer)(i)).toString("hex") || t.allowZero || (i = n.allocUnsafe(0)), t.allowLess && t.length ? (i = (0, 
                c.unpadBuffer)(i), (0, o.default)(t.length >= i.length, "The field ".concat(t.name, " must not have more ").concat(t.length, " bytes"))) : t.allowZero && 0 === i.length || !t.length || (0, 
                o.default)(t.length === i.length, "The field ".concat(t.name, " must have byte length of ").concat(t.length)), e.raw[r] = i;
              }
              e._fields.push(t.name), Object.defineProperty(e, t.name, {
                enumerable: !0,
                configurable: !0,
                get: i,
                set: s
              }), t.default && (e[t.name] = t.default), t.alias && Object.defineProperty(e, t.alias, {
                enumerable: !1,
                configurable: !0,
                set: s,
                get: i
              });
            })), r) if ("string" == typeof r && (r = n.from((0, s.stripHexPrefix)(r), "hex")), n.isBuffer(r) && (r = a.rlp.decode(r)), 
            Array.isArray(r)) {
              if (r.length > e._fields.length) throw new Error("wrong number of fields in data");
              r.forEach((function(t, r) {
                e[e._fields[r]] = (0, c.toBuffer)(t);
              }));
            } else {
              if ("object" != typeof r) throw new Error("invalid data");
              var i = Object.keys(r);
              t.forEach((function(t) {
                -1 !== i.indexOf(t.name) && (e[t.name] = r[t.name]), -1 !== i.indexOf(t.alias) && (e[t.alias] = r[t.alias]);
              }));
            }
          };
        },
        7112: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.hashPersonalMessage = t.isValidSignature = t.fromRpcSig = t.toCompactSig = t.toRpcSig = t.ecrecover = t.ecsign = void 0;
          var i = r(5053), o = r(4538), s = r(4651), a = r(5641), c = r(3746), f = r(2971);
          function u(e, t) {
            var r = (0, f.toType)(e, f.TypeOutput.BN);
            if (r.eqn(0) || r.eqn(1)) return (0, f.toType)(e, f.TypeOutput.BN);
            if (!t) return r.subn(27);
            var n = (0, f.toType)(t, f.TypeOutput.BN);
            return r.sub(n.muln(2).addn(35));
          }
          function h(e) {
            var t = new o.BN(e);
            return t.eqn(0) || t.eqn(1);
          }
          t.ecsign = function(e, t, r) {
            var o = (0, i.ecdsaSign)(e, t), s = o.signature, a = o.recid, c = n.from(s.slice(0, 32)), u = n.from(s.slice(32, 64));
            if (!r || "number" == typeof r) {
              if (r && !Number.isSafeInteger(r)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
              return {
                r: c,
                s: u,
                v: r ? a + (2 * r + 35) : a + 27
              };
            }
            return {
              r: c,
              s: u,
              v: (0, f.toType)(r, f.TypeOutput.BN).muln(2).addn(35).addn(a).toArrayLike(n)
            };
          }, t.ecrecover = function(e, t, r, o, a) {
            var c = n.concat([ (0, s.setLengthLeft)(r, 32), (0, s.setLengthLeft)(o, 32) ], 64), f = u(t, a);
            if (!h(f)) throw new Error("Invalid signature v value");
            var d = (0, i.ecdsaRecover)(c, f.toNumber(), e);
            return n.from((0, i.publicKeyConvert)(d, !1).slice(1));
          }, t.toRpcSig = function(e, t, r, i) {
            if (!h(u(e, i))) throw new Error("Invalid signature v value");
            return (0, s.bufferToHex)(n.concat([ (0, s.setLengthLeft)(t, 32), (0, s.setLengthLeft)(r, 32), (0, s.toBuffer)(e) ]));
          }, t.toCompactSig = function(e, t, r, i) {
            if (!h(u(e, i))) throw new Error("Invalid signature v value");
            var o = (0, f.toType)(e, f.TypeOutput.Number), a = r;
            return (o > 28 && o % 2 == 1 || 1 === o || 28 === o) && ((a = n.from(r))[0] |= 128), (0, s.bufferToHex)(n.concat([ (0, s.setLengthLeft)(t, 32), (0, 
            s.setLengthLeft)(a, 32) ]));
          }, t.fromRpcSig = function(e) {
            var t, r, n, i = (0, s.toBuffer)(e);
            if (i.length >= 65) t = i.slice(0, 32), r = i.slice(32, 64), n = (0, s.bufferToInt)(i.slice(64)); else {
              if (64 !== i.length) throw new Error("Invalid signature length");
              t = i.slice(0, 32), r = i.slice(32, 64), n = (0, s.bufferToInt)(i.slice(32, 33)) >> 7, r[0] &= 127;
            }
            return n < 27 && (n += 27), {
              v: n,
              r: t,
              s: r
            };
          }, t.isValidSignature = function(e, t, r, n, i) {
            void 0 === n && (n = !0);
            var s = new o.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16), a = new o.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
            if (32 !== t.length || 32 !== r.length) return !1;
            if (!h(u(e, i))) return !1;
            var c = new o.BN(t), f = new o.BN(r);
            return !(c.isZero() || c.gt(a) || f.isZero() || f.gt(a) || n && 1 === f.cmp(s));
          }, t.hashPersonalMessage = function(e) {
            (0, c.assertIsBuffer)(e);
            var t = n.from("Ethereum Signed Message:\n".concat(e.length), "utf-8");
            return (0, a.keccak)(n.concat([ t, e ]));
          };
        },
        2971: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.toType = t.TypeOutput = t.bnToRlp = t.bnToUnpaddedBuffer = t.bnToHex = void 0;
          var i, o = r(4538), s = r(4846), a = r(4651);
          function c(e) {
            return (0, a.unpadBuffer)(e.toArrayLike(n));
          }
          t.bnToHex = function(e) {
            return "0x".concat(e.toString(16));
          }, t.bnToUnpaddedBuffer = c, t.bnToRlp = function(e) {
            return c(e);
          }, function(e) {
            e[e.Number = 0] = "Number", e[e.BN = 1] = "BN", e[e.Buffer = 2] = "Buffer", e[e.PrefixedHexString = 3] = "PrefixedHexString";
          }(i = t.TypeOutput || (t.TypeOutput = {})), t.toType = function(e, t) {
            if (null === e) return null;
            if (void 0 !== e) {
              if ("string" == typeof e && !(0, s.isHexString)(e)) throw new Error("A string must be provided with a 0x-prefix, given: ".concat(e));
              if ("number" == typeof e && !Number.isSafeInteger(e)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
              var r = (0, a.toBuffer)(e);
              if (t === i.Buffer) return r;
              if (t === i.BN) return new o.BN(r);
              if (t === i.Number) {
                var n = new o.BN(r), c = new o.BN(Number.MAX_SAFE_INTEGER.toString());
                if (n.gt(c)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
                return n.toNumber();
              }
              return "0x".concat(r.toString("hex"));
            }
          };
        },
        4278: (e, t, r) => {
          "use strict";
          var n = r(3550), i = r(3206), o = new n(0), s = new n(-1), a = {
            noether: "0",
            wei: "1",
            kwei: "1000",
            Kwei: "1000",
            babbage: "1000",
            femtoether: "1000",
            mwei: "1000000",
            Mwei: "1000000",
            lovelace: "1000000",
            picoether: "1000000",
            gwei: "1000000000",
            Gwei: "1000000000",
            shannon: "1000000000",
            nanoether: "1000000000",
            nano: "1000000000",
            szabo: "1000000000000",
            microether: "1000000000000",
            micro: "1000000000000",
            finney: "1000000000000000",
            milliether: "1000000000000000",
            milli: "1000000000000000",
            ether: "1000000000000000000",
            kether: "1000000000000000000000",
            grand: "1000000000000000000000",
            mether: "1000000000000000000000000",
            gether: "1000000000000000000000000000",
            tether: "1000000000000000000000000000000"
          };
          function c(e) {
            var t = e ? e.toLowerCase() : "ether", r = a[t];
            if ("string" != typeof r) throw new Error("[ethjs-unit] the unit provided " + e + " doesn't exists, please use the one of the following units " + JSON.stringify(a, null, 2));
            return new n(r, 10);
          }
          function f(e) {
            if ("string" == typeof e) {
              if (!e.match(/^-?[0-9.]+$/)) throw new Error("while converting number to string, invalid number value '" + e + "', should be a number matching (^-?[0-9.]+).");
              return e;
            }
            if ("number" == typeof e) return String(e);
            if ("object" == typeof e && e.toString && (e.toTwos || e.dividedToIntegerBy)) return e.toPrecision ? String(e.toPrecision()) : e.toString(10);
            throw new Error("while converting number to string, invalid number value '" + e + "' type " + typeof e + ".");
          }
          e.exports = {
            unitMap: a,
            numberToString: f,
            getValueOfUnit: c,
            fromWei: function(e, t, r) {
              var n = i(e), f = n.lt(o), u = c(t), h = a[t].length - 1 || 1, d = r || {};
              f && (n = n.mul(s));
              for (var l = n.mod(u).toString(10); l.length < h; ) l = "0" + l;
              d.pad || (l = l.match(/^([0-9]*[1-9]|0)(0*)/)[1]);
              var p = n.div(u).toString(10);
              d.commify && (p = p.replace(/\B(?=(\d{3})+(?!\d))/g, ","));
              var b = p + ("0" == l ? "" : "." + l);
              return f && (b = "-" + b), b;
            },
            toWei: function(e, t) {
              var r = f(e), i = c(t), o = a[t].length - 1 || 1, u = "-" === r.substring(0, 1);
              if (u && (r = r.substring(1)), "." === r) throw new Error("[ethjs-unit] while converting number " + e + " to wei, invalid value");
              var h = r.split(".");
              if (h.length > 2) throw new Error("[ethjs-unit] while converting number " + e + " to wei,  too many decimal points");
              var d = h[0], l = h[1];
              if (d || (d = "0"), l || (l = "0"), l.length > o) throw new Error("[ethjs-unit] while converting number " + e + " to wei, too many decimal places");
              for (;l.length < o; ) l += "0";
              d = new n(d), l = new n(l);
              var p = d.mul(i).add(l);
              return u && (p = p.mul(s)), new n(p.toString(10), 10);
            }
          };
        },
        6729: e => {
          "use strict";
          var t = Object.prototype.hasOwnProperty, r = "~";
          function n() {}
          function i(e, t, r) {
            this.fn = e, this.context = t, this.once = r || !1;
          }
          function o(e, t, n, o, s) {
            if ("function" != typeof n) throw new TypeError("The listener must be a function");
            var a = new i(n, o || e, s), c = r ? r + t : t;
            return e._events[c] ? e._events[c].fn ? e._events[c] = [ e._events[c], a ] : e._events[c].push(a) : (e._events[c] = a, e._eventsCount++), 
            e;
          }
          function s(e, t) {
            0 == --e._eventsCount ? e._events = new n : delete e._events[t];
          }
          function a() {
            this._events = new n, this._eventsCount = 0;
          }
          Object.create && (n.prototype = Object.create(null), (new n).__proto__ || (r = !1)), a.prototype.eventNames = function() {
            var e, n, i = [];
            if (0 === this._eventsCount) return i;
            for (n in e = this._events) t.call(e, n) && i.push(r ? n.slice(1) : n);
            return Object.getOwnPropertySymbols ? i.concat(Object.getOwnPropertySymbols(e)) : i;
          }, a.prototype.listeners = function(e) {
            var t = r ? r + e : e, n = this._events[t];
            if (!n) return [];
            if (n.fn) return [ n.fn ];
            for (var i = 0, o = n.length, s = new Array(o); i < o; i++) s[i] = n[i].fn;
            return s;
          }, a.prototype.listenerCount = function(e) {
            var t = r ? r + e : e, n = this._events[t];
            return n ? n.fn ? 1 : n.length : 0;
          }, a.prototype.emit = function(e, t, n, i, o, s) {
            var a = r ? r + e : e;
            if (!this._events[a]) return !1;
            var c, f, u = this._events[a], h = arguments.length;
            if (u.fn) {
              switch (u.once && this.removeListener(e, u.fn, void 0, !0), h) {
               case 1:
                return u.fn.call(u.context), !0;

               case 2:
                return u.fn.call(u.context, t), !0;

               case 3:
                return u.fn.call(u.context, t, n), !0;

               case 4:
                return u.fn.call(u.context, t, n, i), !0;

               case 5:
                return u.fn.call(u.context, t, n, i, o), !0;

               case 6:
                return u.fn.call(u.context, t, n, i, o, s), !0;
              }
              for (f = 1, c = new Array(h - 1); f < h; f++) c[f - 1] = arguments[f];
              u.fn.apply(u.context, c);
            } else {
              var d, l = u.length;
              for (f = 0; f < l; f++) switch (u[f].once && this.removeListener(e, u[f].fn, void 0, !0), h) {
               case 1:
                u[f].fn.call(u[f].context);
                break;

               case 2:
                u[f].fn.call(u[f].context, t);
                break;

               case 3:
                u[f].fn.call(u[f].context, t, n);
                break;

               case 4:
                u[f].fn.call(u[f].context, t, n, i);
                break;

               default:
                if (!c) for (d = 1, c = new Array(h - 1); d < h; d++) c[d - 1] = arguments[d];
                u[f].fn.apply(u[f].context, c);
              }
            }
            return !0;
          }, a.prototype.on = function(e, t, r) {
            return o(this, e, t, r, !1);
          }, a.prototype.once = function(e, t, r) {
            return o(this, e, t, r, !0);
          }, a.prototype.removeListener = function(e, t, n, i) {
            var o = r ? r + e : e;
            if (!this._events[o]) return this;
            if (!t) return s(this, o), this;
            var a = this._events[o];
            if (a.fn) a.fn !== t || i && !a.once || n && a.context !== n || s(this, o); else {
              for (var c = 0, f = [], u = a.length; c < u; c++) (a[c].fn !== t || i && !a[c].once || n && a[c].context !== n) && f.push(a[c]);
              f.length ? this._events[o] = 1 === f.length ? f[0] : f : s(this, o);
            }
            return this;
          }, a.prototype.removeAllListeners = function(e) {
            var t;
            return e ? (t = r ? r + e : e, this._events[t] && s(this, t)) : (this._events = new n, this._eventsCount = 0), this;
          }, a.prototype.off = a.prototype.removeListener, a.prototype.addListener = a.prototype.on, a.prefixed = r, a.EventEmitter = a, 
          e.exports = a;
        },
        7187: e => {
          "use strict";
          var t, r = "object" == typeof Reflect ? Reflect : null, i = r && "function" == typeof r.apply ? r.apply : function(e, t, r) {
            return Function.prototype.apply.call(e, t, r);
          };
          t = r && "function" == typeof r.ownKeys ? r.ownKeys : Object.getOwnPropertySymbols ? function(e) {
            return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
          } : function(e) {
            return Object.getOwnPropertyNames(e);
          };
          var o = Number.isNaN || function(e) {
            return e != e;
          };
          function s() {
            s.init.call(this);
          }
          e.exports = s, e.exports.once = function(e, t) {
            return new Promise((function(r, n) {
              function i(r) {
                e.removeListener(t, o), n(r);
              }
              function o() {
                "function" == typeof e.removeListener && e.removeListener("error", i), r([].slice.call(arguments));
              }
              y(e, t, o, {
                once: !0
              }), "error" !== t && function(e, t, r) {
                "function" == typeof e.on && y(e, "error", t, {
                  once: !0
                });
              }(e, i);
            }));
          }, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._eventsCount = 0, s.prototype._maxListeners = void 0;
          var a = 10;
          function c(e) {
            if ("function" != typeof e) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
          }
          function f(e) {
            return void 0 === e._maxListeners ? s.defaultMaxListeners : e._maxListeners;
          }
          function u(e, t, r, i) {
            var o, s, a, u;
            if (c(r), void 0 === (s = e._events) ? (s = e._events = Object.create(null), e._eventsCount = 0) : (void 0 !== s.newListener && (e.emit("newListener", t, r.listener ? r.listener : r), 
            s = e._events), a = s[t]), void 0 === a) a = s[t] = r, ++e._eventsCount; else if ("function" == typeof a ? a = s[t] = i ? [ r, a ] : [ a, r ] : i ? a.unshift(r) : a.push(r), 
            (o = f(e)) > 0 && a.length > o && !a.warned) {
              a.warned = !0;
              var h = new Error("Possible EventEmitter memory leak detected. " + a.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              h.name = "MaxListenersExceededWarning", h.emitter = e, h.type = t, h.count = a.length, u = h, n && n.warn && n.warn(u);
            }
            return e;
          }
          function h() {
            if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
          }
          function d(e, t, r) {
            var n = {
              fired: !1,
              wrapFn: void 0,
              target: e,
              type: t,
              listener: r
            }, i = h.bind(n);
            return i.listener = r, n.wrapFn = i, i;
          }
          function l(e, t, r) {
            var n = e._events;
            if (void 0 === n) return [];
            var i = n[t];
            return void 0 === i ? [] : "function" == typeof i ? r ? [ i.listener || i ] : [ i ] : r ? function(e) {
              for (var t = new Array(e.length), r = 0; r < t.length; ++r) t[r] = e[r].listener || e[r];
              return t;
            }(i) : b(i, i.length);
          }
          function p(e) {
            var t = this._events;
            if (void 0 !== t) {
              var r = t[e];
              if ("function" == typeof r) return 1;
              if (void 0 !== r) return r.length;
            }
            return 0;
          }
          function b(e, t) {
            for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];
            return r;
          }
          function y(e, t, r, n) {
            if ("function" == typeof e.on) n.once ? e.once(t, r) : e.on(t, r); else {
              if ("function" != typeof e.addEventListener) throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
              e.addEventListener(t, (function i(o) {
                n.once && e.removeEventListener(t, i), r(o);
              }));
            }
          }
          Object.defineProperty(s, "defaultMaxListeners", {
            enumerable: !0,
            get: function() {
              return a;
            },
            set: function(e) {
              if ("number" != typeof e || e < 0 || o(e)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
              a = e;
            }
          }), s.init = function() {
            void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), 
            this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
          }, s.prototype.setMaxListeners = function(e) {
            if ("number" != typeof e || e < 0 || o(e)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
            return this._maxListeners = e, this;
          }, s.prototype.getMaxListeners = function() {
            return f(this);
          }, s.prototype.emit = function(e) {
            for (var t = [], r = 1; r < arguments.length; r++) t.push(arguments[r]);
            var n = "error" === e, o = this._events;
            if (void 0 !== o) n = n && void 0 === o.error; else if (!n) return !1;
            if (n) {
              var s;
              if (t.length > 0 && (s = t[0]), s instanceof Error) throw s;
              var a = new Error("Unhandled error." + (s ? " (" + s.message + ")" : ""));
              throw a.context = s, a;
            }
            var c = o[e];
            if (void 0 === c) return !1;
            if ("function" == typeof c) i(c, this, t); else {
              var f = c.length, u = b(c, f);
              for (r = 0; r < f; ++r) i(u[r], this, t);
            }
            return !0;
          }, s.prototype.addListener = function(e, t) {
            return u(this, e, t, !1);
          }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function(e, t) {
            return u(this, e, t, !0);
          }, s.prototype.once = function(e, t) {
            return c(t), this.on(e, d(this, e, t)), this;
          }, s.prototype.prependOnceListener = function(e, t) {
            return c(t), this.prependListener(e, d(this, e, t)), this;
          }, s.prototype.removeListener = function(e, t) {
            var r, n, i, o, s;
            if (c(t), void 0 === (n = this._events)) return this;
            if (void 0 === (r = n[e])) return this;
            if (r === t || r.listener === t) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete n[e], n.removeListener && this.emit("removeListener", e, r.listener || t)); else if ("function" != typeof r) {
              for (i = -1, o = r.length - 1; o >= 0; o--) if (r[o] === t || r[o].listener === t) {
                s = r[o].listener, i = o;
                break;
              }
              if (i < 0) return this;
              0 === i ? r.shift() : function(e, t) {
                for (;t + 1 < e.length; t++) e[t] = e[t + 1];
                e.pop();
              }(r, i), 1 === r.length && (n[e] = r[0]), void 0 !== n.removeListener && this.emit("removeListener", e, s || t);
            }
            return this;
          }, s.prototype.off = s.prototype.removeListener, s.prototype.removeAllListeners = function(e) {
            var t, r, n;
            if (void 0 === (r = this._events)) return this;
            if (void 0 === r.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== r[e] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete r[e]), 
            this;
            if (0 === arguments.length) {
              var i, o = Object.keys(r);
              for (n = 0; n < o.length; ++n) "removeListener" !== (i = o[n]) && this.removeAllListeners(i);
              return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
            }
            if ("function" == typeof (t = r[e])) this.removeListener(e, t); else if (void 0 !== t) for (n = t.length - 1; n >= 0; n--) this.removeListener(e, t[n]);
            return this;
          }, s.prototype.listeners = function(e) {
            return l(this, e, !0);
          }, s.prototype.rawListeners = function(e) {
            return l(this, e, !1);
          }, s.listenerCount = function(e, t) {
            return "function" == typeof e.listenerCount ? e.listenerCount(t) : p.call(e, t);
          }, s.prototype.listenerCount = p, s.prototype.eventNames = function() {
            return this._eventsCount > 0 ? t(this._events) : [];
          };
        },
        3048: (e, t, r) => {
          var n = r(9509).Buffer, i = r(2318);
          e.exports = function(e, t, r, o) {
            if (n.isBuffer(e) || (e = n.from(e, "binary")), t && (n.isBuffer(t) || (t = n.from(t, "binary")), 8 !== t.length)) throw new RangeError("salt should be Buffer with 8 byte length");
            for (var s = r / 8, a = n.alloc(s), c = n.alloc(o || 0), f = n.alloc(0); s > 0 || o > 0; ) {
              var u = new i;
              u.update(f), u.update(e), t && u.update(t), f = u.digest();
              var h = 0;
              if (s > 0) {
                var d = a.length - s;
                h = Math.min(s, f.length), f.copy(a, d, 0, h), s -= h;
              }
              if (h < f.length && o > 0) {
                var l = c.length - o, p = Math.min(o, f.length - h);
                f.copy(c, l, h, h + p), o -= p;
              }
            }
            return f.fill(0), {
              key: a,
              iv: c
            };
          };
        },
        4063: e => {
          "use strict";
          e.exports = function e(t, r) {
            if (t === r) return !0;
            if (t && r && "object" == typeof t && "object" == typeof r) {
              if (t.constructor !== r.constructor) return !1;
              var n, i, o;
              if (Array.isArray(t)) {
                if ((n = t.length) != r.length) return !1;
                for (i = n; 0 != i--; ) if (!e(t[i], r[i])) return !1;
                return !0;
              }
              if (t.constructor === RegExp) return t.source === r.source && t.flags === r.flags;
              if (t.valueOf !== Object.prototype.valueOf) return t.valueOf() === r.valueOf();
              if (t.toString !== Object.prototype.toString) return t.toString() === r.toString();
              if ((n = (o = Object.keys(t)).length) !== Object.keys(r).length) return !1;
              for (i = n; 0 != i--; ) if (!Object.prototype.hasOwnProperty.call(r, o[i])) return !1;
              for (i = n; 0 != i--; ) {
                var s = o[i];
                if (!e(t[s], r[s])) return !1;
              }
              return !0;
            }
            return t != t && r != r;
          };
        },
        4445: e => {
          e.exports = s, s.default = s, s.stable = u, s.stableStringify = u;
          var t = "[...]", r = "[Circular]", n = [], i = [];
          function o() {
            return {
              depthLimit: Number.MAX_SAFE_INTEGER,
              edgesLimit: Number.MAX_SAFE_INTEGER
            };
          }
          function s(e, t, r, s) {
            var a;
            void 0 === s && (s = o()), c(e, "", 0, [], void 0, 0, s);
            try {
              a = 0 === i.length ? JSON.stringify(e, t, r) : JSON.stringify(e, d(t), r);
            } catch (e) {
              return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
            } finally {
              for (;0 !== n.length; ) {
                var f = n.pop();
                4 === f.length ? Object.defineProperty(f[0], f[1], f[3]) : f[0][f[1]] = f[2];
              }
            }
            return a;
          }
          function a(e, t, r, o) {
            var s = Object.getOwnPropertyDescriptor(o, r);
            void 0 !== s.get ? s.configurable ? (Object.defineProperty(o, r, {
              value: e
            }), n.push([ o, r, t, s ])) : i.push([ t, r, e ]) : (o[r] = e, n.push([ o, r, t ]));
          }
          function c(e, n, i, o, s, f, u) {
            var h;
            if (f += 1, "object" == typeof e && null !== e) {
              for (h = 0; h < o.length; h++) if (o[h] === e) return void a(r, e, n, s);
              if (void 0 !== u.depthLimit && f > u.depthLimit) return void a(t, e, n, s);
              if (void 0 !== u.edgesLimit && i + 1 > u.edgesLimit) return void a(t, e, n, s);
              if (o.push(e), Array.isArray(e)) for (h = 0; h < e.length; h++) c(e[h], h, h, o, e, f, u); else {
                var d = Object.keys(e);
                for (h = 0; h < d.length; h++) {
                  var l = d[h];
                  c(e[l], l, h, o, e, f, u);
                }
              }
              o.pop();
            }
          }
          function f(e, t) {
            return e < t ? -1 : e > t ? 1 : 0;
          }
          function u(e, t, r, s) {
            void 0 === s && (s = o());
            var a, c = h(e, "", 0, [], void 0, 0, s) || e;
            try {
              a = 0 === i.length ? JSON.stringify(c, t, r) : JSON.stringify(c, d(t), r);
            } catch (e) {
              return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
            } finally {
              for (;0 !== n.length; ) {
                var f = n.pop();
                4 === f.length ? Object.defineProperty(f[0], f[1], f[3]) : f[0][f[1]] = f[2];
              }
            }
            return a;
          }
          function h(e, i, o, s, c, u, d) {
            var l;
            if (u += 1, "object" == typeof e && null !== e) {
              for (l = 0; l < s.length; l++) if (s[l] === e) return void a(r, e, i, c);
              try {
                if ("function" == typeof e.toJSON) return;
              } catch (e) {
                return;
              }
              if (void 0 !== d.depthLimit && u > d.depthLimit) return void a(t, e, i, c);
              if (void 0 !== d.edgesLimit && o + 1 > d.edgesLimit) return void a(t, e, i, c);
              if (s.push(e), Array.isArray(e)) for (l = 0; l < e.length; l++) h(e[l], l, l, s, e, u, d); else {
                var p = {}, b = Object.keys(e).sort(f);
                for (l = 0; l < b.length; l++) {
                  var y = b[l];
                  h(e[y], y, l, s, e, u, d), p[y] = e[y];
                }
                if (void 0 === c) return p;
                n.push([ c, i, e ]), c[i] = p;
              }
              s.pop();
            }
          }
          function d(e) {
            return e = void 0 !== e ? e : function(e, t) {
              return t;
            }, function(t, r) {
              if (i.length > 0) for (var n = 0; n < i.length; n++) {
                var o = i[n];
                if (o[1] === t && o[0] === r) {
                  r = o[2], i.splice(n, 1);
                  break;
                }
              }
              return e.call(this, t, r);
            };
          }
        },
        4029: (e, t, r) => {
          "use strict";
          var n = r(5320), i = Object.prototype.toString, o = Object.prototype.hasOwnProperty, s = function(e, t, r) {
            for (var n = 0, i = e.length; n < i; n++) o.call(e, n) && (null == r ? t(e[n], n, e) : t.call(r, e[n], n, e));
          }, a = function(e, t, r) {
            for (var n = 0, i = e.length; n < i; n++) null == r ? t(e.charAt(n), n, e) : t.call(r, e.charAt(n), n, e);
          }, c = function(e, t, r) {
            for (var n in e) o.call(e, n) && (null == r ? t(e[n], n, e) : t.call(r, e[n], n, e));
          };
          e.exports = function(e, t, r) {
            if (!n(t)) throw new TypeError("iterator must be a function");
            var o;
            arguments.length >= 3 && (o = r), "[object Array]" === i.call(e) ? s(e, t, o) : "string" == typeof e ? a(e, t, o) : c(e, t, o);
          };
        },
        7648: e => {
          "use strict";
          var t = "Function.prototype.bind called on incompatible ", r = Array.prototype.slice, n = Object.prototype.toString, i = "[object Function]";
          e.exports = function(e) {
            var o = this;
            if ("function" != typeof o || n.call(o) !== i) throw new TypeError(t + o);
            for (var s, a = r.call(arguments, 1), c = function() {
              if (this instanceof s) {
                var t = o.apply(this, a.concat(r.call(arguments)));
                return Object(t) === t ? t : this;
              }
              return o.apply(e, a.concat(r.call(arguments)));
            }, f = Math.max(0, o.length - a.length), u = [], h = 0; h < f; h++) u.push("$" + h);
            if (s = Function("binder", "return function (" + u.join(",") + "){ return binder.apply(this,arguments); }")(c), o.prototype) {
              var d = function() {};
              d.prototype = o.prototype, s.prototype = new d, d.prototype = null;
            }
            return s;
          };
        },
        8612: (e, t, r) => {
          "use strict";
          var n = r(7648);
          e.exports = Function.prototype.bind || n;
        },
        210: (e, t, r) => {
          "use strict";
          var n, i = SyntaxError, o = Function, s = TypeError, a = function(e) {
            try {
              return o('"use strict"; return (' + e + ").constructor;")();
            } catch (e) {}
          }, c = Object.getOwnPropertyDescriptor;
          if (c) try {
            c({}, "");
          } catch (e) {
            c = null;
          }
          var f = function() {
            throw new s;
          }, u = c ? function() {
            try {
              return f;
            } catch (e) {
              try {
                return c(arguments, "callee").get;
              } catch (e) {
                return f;
              }
            }
          }() : f, h = r(1405)(), d = Object.getPrototypeOf || function(e) {
            return e.__proto__;
          }, l = {}, p = "undefined" == typeof Uint8Array ? n : d(Uint8Array), b = {
            "%AggregateError%": "undefined" == typeof AggregateError ? n : AggregateError,
            "%Array%": Array,
            "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? n : ArrayBuffer,
            "%ArrayIteratorPrototype%": h ? d([][Symbol.iterator]()) : n,
            "%AsyncFromSyncIteratorPrototype%": n,
            "%AsyncFunction%": l,
            "%AsyncGenerator%": l,
            "%AsyncGeneratorFunction%": l,
            "%AsyncIteratorPrototype%": l,
            "%Atomics%": "undefined" == typeof Atomics ? n : Atomics,
            "%BigInt%": "undefined" == typeof BigInt ? n : BigInt,
            "%Boolean%": Boolean,
            "%DataView%": "undefined" == typeof DataView ? n : DataView,
            "%Date%": Date,
            "%decodeURI%": decodeURI,
            "%decodeURIComponent%": decodeURIComponent,
            "%encodeURI%": encodeURI,
            "%encodeURIComponent%": encodeURIComponent,
            "%Error%": Error,
            "%eval%": eval,
            "%EvalError%": EvalError,
            "%Float32Array%": "undefined" == typeof Float32Array ? n : Float32Array,
            "%Float64Array%": "undefined" == typeof Float64Array ? n : Float64Array,
            "%FinalizationRegistry%": "undefined" == typeof FinalizationRegistry ? n : FinalizationRegistry,
            "%Function%": o,
            "%GeneratorFunction%": l,
            "%Int8Array%": "undefined" == typeof Int8Array ? n : Int8Array,
            "%Int16Array%": "undefined" == typeof Int16Array ? n : Int16Array,
            "%Int32Array%": "undefined" == typeof Int32Array ? n : Int32Array,
            "%isFinite%": isFinite,
            "%isNaN%": isNaN,
            "%IteratorPrototype%": h ? d(d([][Symbol.iterator]())) : n,
            "%JSON%": "object" == typeof JSON ? JSON : n,
            "%Map%": "undefined" == typeof Map ? n : Map,
            "%MapIteratorPrototype%": "undefined" != typeof Map && h ? d((new Map)[Symbol.iterator]()) : n,
            "%Math%": Math,
            "%Number%": Number,
            "%Object%": Object,
            "%parseFloat%": parseFloat,
            "%parseInt%": parseInt,
            "%Promise%": "undefined" == typeof Promise ? n : Promise,
            "%Proxy%": "undefined" == typeof Proxy ? n : Proxy,
            "%RangeError%": RangeError,
            "%ReferenceError%": ReferenceError,
            "%Reflect%": "undefined" == typeof Reflect ? n : Reflect,
            "%RegExp%": RegExp,
            "%Set%": "undefined" == typeof Set ? n : Set,
            "%SetIteratorPrototype%": "undefined" != typeof Set && h ? d((new Set)[Symbol.iterator]()) : n,
            "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? n : SharedArrayBuffer,
            "%String%": String,
            "%StringIteratorPrototype%": h ? d(""[Symbol.iterator]()) : n,
            "%Symbol%": h ? Symbol : n,
            "%SyntaxError%": i,
            "%ThrowTypeError%": u,
            "%TypedArray%": p,
            "%TypeError%": s,
            "%Uint8Array%": "undefined" == typeof Uint8Array ? n : Uint8Array,
            "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? n : Uint8ClampedArray,
            "%Uint16Array%": "undefined" == typeof Uint16Array ? n : Uint16Array,
            "%Uint32Array%": "undefined" == typeof Uint32Array ? n : Uint32Array,
            "%URIError%": URIError,
            "%WeakMap%": "undefined" == typeof WeakMap ? n : WeakMap,
            "%WeakRef%": "undefined" == typeof WeakRef ? n : WeakRef,
            "%WeakSet%": "undefined" == typeof WeakSet ? n : WeakSet
          }, y = function e(t) {
            var r;
            if ("%AsyncFunction%" === t) r = a("async function () {}"); else if ("%GeneratorFunction%" === t) r = a("function* () {}"); else if ("%AsyncGeneratorFunction%" === t) r = a("async function* () {}"); else if ("%AsyncGenerator%" === t) {
              var n = e("%AsyncGeneratorFunction%");
              n && (r = n.prototype);
            } else if ("%AsyncIteratorPrototype%" === t) {
              var i = e("%AsyncGenerator%");
              i && (r = d(i.prototype));
            }
            return b[t] = r, r;
          }, g = {
            "%ArrayBufferPrototype%": [ "ArrayBuffer", "prototype" ],
            "%ArrayPrototype%": [ "Array", "prototype" ],
            "%ArrayProto_entries%": [ "Array", "prototype", "entries" ],
            "%ArrayProto_forEach%": [ "Array", "prototype", "forEach" ],
            "%ArrayProto_keys%": [ "Array", "prototype", "keys" ],
            "%ArrayProto_values%": [ "Array", "prototype", "values" ],
            "%AsyncFunctionPrototype%": [ "AsyncFunction", "prototype" ],
            "%AsyncGenerator%": [ "AsyncGeneratorFunction", "prototype" ],
            "%AsyncGeneratorPrototype%": [ "AsyncGeneratorFunction", "prototype", "prototype" ],
            "%BooleanPrototype%": [ "Boolean", "prototype" ],
            "%DataViewPrototype%": [ "DataView", "prototype" ],
            "%DatePrototype%": [ "Date", "prototype" ],
            "%ErrorPrototype%": [ "Error", "prototype" ],
            "%EvalErrorPrototype%": [ "EvalError", "prototype" ],
            "%Float32ArrayPrototype%": [ "Float32Array", "prototype" ],
            "%Float64ArrayPrototype%": [ "Float64Array", "prototype" ],
            "%FunctionPrototype%": [ "Function", "prototype" ],
            "%Generator%": [ "GeneratorFunction", "prototype" ],
            "%GeneratorPrototype%": [ "GeneratorFunction", "prototype", "prototype" ],
            "%Int8ArrayPrototype%": [ "Int8Array", "prototype" ],
            "%Int16ArrayPrototype%": [ "Int16Array", "prototype" ],
            "%Int32ArrayPrototype%": [ "Int32Array", "prototype" ],
            "%JSONParse%": [ "JSON", "parse" ],
            "%JSONStringify%": [ "JSON", "stringify" ],
            "%MapPrototype%": [ "Map", "prototype" ],
            "%NumberPrototype%": [ "Number", "prototype" ],
            "%ObjectPrototype%": [ "Object", "prototype" ],
            "%ObjProto_toString%": [ "Object", "prototype", "toString" ],
            "%ObjProto_valueOf%": [ "Object", "prototype", "valueOf" ],
            "%PromisePrototype%": [ "Promise", "prototype" ],
            "%PromiseProto_then%": [ "Promise", "prototype", "then" ],
            "%Promise_all%": [ "Promise", "all" ],
            "%Promise_reject%": [ "Promise", "reject" ],
            "%Promise_resolve%": [ "Promise", "resolve" ],
            "%RangeErrorPrototype%": [ "RangeError", "prototype" ],
            "%ReferenceErrorPrototype%": [ "ReferenceError", "prototype" ],
            "%RegExpPrototype%": [ "RegExp", "prototype" ],
            "%SetPrototype%": [ "Set", "prototype" ],
            "%SharedArrayBufferPrototype%": [ "SharedArrayBuffer", "prototype" ],
            "%StringPrototype%": [ "String", "prototype" ],
            "%SymbolPrototype%": [ "Symbol", "prototype" ],
            "%SyntaxErrorPrototype%": [ "SyntaxError", "prototype" ],
            "%TypedArrayPrototype%": [ "TypedArray", "prototype" ],
            "%TypeErrorPrototype%": [ "TypeError", "prototype" ],
            "%Uint8ArrayPrototype%": [ "Uint8Array", "prototype" ],
            "%Uint8ClampedArrayPrototype%": [ "Uint8ClampedArray", "prototype" ],
            "%Uint16ArrayPrototype%": [ "Uint16Array", "prototype" ],
            "%Uint32ArrayPrototype%": [ "Uint32Array", "prototype" ],
            "%URIErrorPrototype%": [ "URIError", "prototype" ],
            "%WeakMapPrototype%": [ "WeakMap", "prototype" ],
            "%WeakSetPrototype%": [ "WeakSet", "prototype" ]
          }, m = r(8612), v = r(7642), w = m.call(Function.call, Array.prototype.concat), _ = m.call(Function.apply, Array.prototype.splice), S = m.call(Function.call, String.prototype.replace), E = m.call(Function.call, String.prototype.slice), A = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, x = /\\(\\)?/g, k = function(e) {
            var t = E(e, 0, 1), r = E(e, -1);
            if ("%" === t && "%" !== r) throw new i("invalid intrinsic syntax, expected closing `%`");
            if ("%" === r && "%" !== t) throw new i("invalid intrinsic syntax, expected opening `%`");
            var n = [];
            return S(e, A, (function(e, t, r, i) {
              n[n.length] = r ? S(i, x, "$1") : t || e;
            })), n;
          }, P = function(e, t) {
            var r, n = e;
            if (v(g, n) && (n = "%" + (r = g[n])[0] + "%"), v(b, n)) {
              var o = b[n];
              if (o === l && (o = y(n)), void 0 === o && !t) throw new s("intrinsic " + e + " exists, but is not available. Please file an issue!");
              return {
                alias: r,
                name: n,
                value: o
              };
            }
            throw new i("intrinsic " + e + " does not exist!");
          };
          e.exports = function(e, t) {
            if ("string" != typeof e || 0 === e.length) throw new s("intrinsic name must be a non-empty string");
            if (arguments.length > 1 && "boolean" != typeof t) throw new s('"allowMissing" argument must be a boolean');
            var r = k(e), n = r.length > 0 ? r[0] : "", o = P("%" + n + "%", t), a = o.name, f = o.value, u = !1, h = o.alias;
            h && (n = h[0], _(r, w([ 0, 1 ], h)));
            for (var d = 1, l = !0; d < r.length; d += 1) {
              var p = r[d], y = E(p, 0, 1), g = E(p, -1);
              if (('"' === y || "'" === y || "`" === y || '"' === g || "'" === g || "`" === g) && y !== g) throw new i("property names with quotes must have matching quotes");
              if ("constructor" !== p && l || (u = !0), v(b, a = "%" + (n += "." + p) + "%")) f = b[a]; else if (null != f) {
                if (!(p in f)) {
                  if (!t) throw new s("base intrinsic for " + e + " exists, but the property is not available.");
                  return;
                }
                if (c && d + 1 >= r.length) {
                  var m = c(f, p);
                  f = (l = !!m) && "get" in m && !("originalValue" in m.get) ? m.get : f[p];
                } else l = v(f, p), f = f[p];
                l && !u && (b[a] = f);
              }
            }
            return f;
          };
        },
        1044: (e, t, r) => {
          "use strict";
          var n = r(210)("%Object.defineProperty%", !0), i = function() {
            if (n) try {
              return n({}, "a", {
                value: 1
              }), !0;
            } catch (e) {
              return !1;
            }
            return !1;
          };
          i.hasArrayLengthDefineBug = function() {
            if (!i()) return null;
            try {
              return 1 !== n([], "length", {
                value: 1
              }).length;
            } catch (e) {
              return !0;
            }
          }, e.exports = i;
        },
        1405: (e, t, r) => {
          "use strict";
          var n = "undefined" != typeof Symbol && Symbol, i = r(5419);
          e.exports = function() {
            return "function" == typeof n && "function" == typeof Symbol && "symbol" == typeof n("foo") && "symbol" == typeof Symbol("bar") && i();
          };
        },
        5419: e => {
          "use strict";
          e.exports = function() {
            if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols) return !1;
            if ("symbol" == typeof Symbol.iterator) return !0;
            var e = {}, t = Symbol("test"), r = Object(t);
            if ("string" == typeof t) return !1;
            if ("[object Symbol]" !== Object.prototype.toString.call(t)) return !1;
            if ("[object Symbol]" !== Object.prototype.toString.call(r)) return !1;
            for (t in e[t] = 42, e) return !1;
            if ("function" == typeof Object.keys && 0 !== Object.keys(e).length) return !1;
            if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(e).length) return !1;
            var n = Object.getOwnPropertySymbols(e);
            if (1 !== n.length || n[0] !== t) return !1;
            if (!Object.prototype.propertyIsEnumerable.call(e, t)) return !1;
            if ("function" == typeof Object.getOwnPropertyDescriptor) {
              var i = Object.getOwnPropertyDescriptor(e, t);
              if (42 !== i.value || !0 !== i.enumerable) return !1;
            }
            return !0;
          };
        },
        6410: (e, t, r) => {
          "use strict";
          var n = r(5419);
          e.exports = function() {
            return n() && !!Symbol.toStringTag;
          };
        },
        7642: (e, t, r) => {
          "use strict";
          var n = r(8612);
          e.exports = n.call(Function.call, Object.prototype.hasOwnProperty);
        },
        3349: (e, t, r) => {
          "use strict";
          var n = r(9509).Buffer, i = r(8473).Transform;
          function o(e) {
            i.call(this), this._block = n.allocUnsafe(e), this._blockSize = e, this._blockOffset = 0, this._length = [ 0, 0, 0, 0 ], 
            this._finalized = !1;
          }
          r(5717)(o, i), o.prototype._transform = function(e, t, r) {
            var n = null;
            try {
              this.update(e, t);
            } catch (e) {
              n = e;
            }
            r(n);
          }, o.prototype._flush = function(e) {
            var t = null;
            try {
              this.push(this.digest());
            } catch (e) {
              t = e;
            }
            e(t);
          }, o.prototype.update = function(e, t) {
            if (function(e, t) {
              if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
            }(e), this._finalized) throw new Error("Digest already called");
            n.isBuffer(e) || (e = n.from(e, t));
            for (var r = this._block, i = 0; this._blockOffset + e.length - i >= this._blockSize; ) {
              for (var o = this._blockOffset; o < this._blockSize; ) r[o++] = e[i++];
              this._update(), this._blockOffset = 0;
            }
            for (;i < e.length; ) r[this._blockOffset++] = e[i++];
            for (var s = 0, a = 8 * e.length; a > 0; ++s) this._length[s] += a, (a = this._length[s] / 4294967296 | 0) > 0 && (this._length[s] -= 4294967296 * a);
            return this;
          }, o.prototype._update = function() {
            throw new Error("_update is not implemented");
          }, o.prototype.digest = function(e) {
            if (this._finalized) throw new Error("Digest already called");
            this._finalized = !0;
            var t = this._digest();
            void 0 !== e && (t = t.toString(e)), this._block.fill(0), this._blockOffset = 0;
            for (var r = 0; r < 4; ++r) this._length[r] = 0;
            return t;
          }, o.prototype._digest = function() {
            throw new Error("_digest is not implemented");
          }, e.exports = o;
        },
        3715: (e, t, r) => {
          var n = t;
          n.utils = r(6436), n.common = r(5772), n.sha = r(9041), n.ripemd = r(2949), n.hmac = r(2344), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, 
          n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
        },
        5772: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(9746);
          function o() {
            this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, 
            this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", 
            this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
          }
          t.BlockHash = o, o.prototype.update = function(e, t) {
            if (e = n.toArray(e, t), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, 
            this.pending.length >= this._delta8) {
              var r = (e = this.pending).length % this._delta8;
              this.pending = e.slice(e.length - r, e.length), 0 === this.pending.length && (this.pending = null), e = n.join32(e, 0, e.length - r, this.endian);
              for (var i = 0; i < e.length; i += this._delta32) this._update(e, i, i + this._delta32);
            }
            return this;
          }, o.prototype.digest = function(e) {
            return this.update(this._pad()), i(null === this.pending), this._digest(e);
          }, o.prototype._pad = function() {
            var e = this.pendingTotal, t = this._delta8, r = t - (e + this.padLength) % t, n = new Array(r + this.padLength);
            n[0] = 128;
            for (var i = 1; i < r; i++) n[i] = 0;
            if (e <<= 3, "big" === this.endian) {
              for (var o = 8; o < this.padLength; o++) n[i++] = 0;
              n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = e >>> 24 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 8 & 255, 
              n[i++] = 255 & e;
            } else for (n[i++] = 255 & e, n[i++] = e >>> 8 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 24 & 255, n[i++] = 0, n[i++] = 0, 
            n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++) n[i++] = 0;
            return n;
          };
        },
        2344: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(9746);
          function o(e, t, r) {
            if (!(this instanceof o)) return new o(e, t, r);
            this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t, r));
          }
          e.exports = o, o.prototype._init = function(e) {
            e.length > this.blockSize && (e = (new this.Hash).update(e).digest()), i(e.length <= this.blockSize);
            for (var t = e.length; t < this.blockSize; t++) e.push(0);
            for (t = 0; t < e.length; t++) e[t] ^= 54;
            for (this.inner = (new this.Hash).update(e), t = 0; t < e.length; t++) e[t] ^= 106;
            this.outer = (new this.Hash).update(e);
          }, o.prototype.update = function(e, t) {
            return this.inner.update(e, t), this;
          }, o.prototype.digest = function(e) {
            return this.outer.update(this.inner.digest()), this.outer.digest(e);
          };
        },
        2949: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5772), o = n.rotl32, s = n.sum32, a = n.sum32_3, c = n.sum32_4, f = i.BlockHash;
          function u() {
            if (!(this instanceof u)) return new u;
            f.call(this), this.h = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ], this.endian = "little";
          }
          function h(e, t, r, n) {
            return e <= 15 ? t ^ r ^ n : e <= 31 ? t & r | ~t & n : e <= 47 ? (t | ~r) ^ n : e <= 63 ? t & n | r & ~n : t ^ (r | ~n);
          }
          function d(e) {
            return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;
          }
          function l(e) {
            return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;
          }
          n.inherits(u, f), t.ripemd160 = u, u.blockSize = 512, u.outSize = 160, u.hmacStrength = 192, u.padLength = 64, u.prototype._update = function(e, t) {
            for (var r = this.h[0], n = this.h[1], i = this.h[2], f = this.h[3], u = this.h[4], m = r, v = n, w = i, _ = f, S = u, E = 0; E < 80; E++) {
              var A = s(o(c(r, h(E, n, i, f), e[p[E] + t], d(E)), y[E]), u);
              r = u, u = f, f = o(i, 10), i = n, n = A, A = s(o(c(m, h(79 - E, v, w, _), e[b[E] + t], l(E)), g[E]), S), m = S, S = _, 
              _ = o(w, 10), w = v, v = A;
            }
            A = a(this.h[1], i, _), this.h[1] = a(this.h[2], f, S), this.h[2] = a(this.h[3], u, m), this.h[3] = a(this.h[4], r, v), 
            this.h[4] = a(this.h[0], n, w), this.h[0] = A;
          }, u.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
          };
          var p = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ], b = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ], y = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ], g = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ];
        },
        9041: (e, t, r) => {
          "use strict";
          t.sha1 = r(4761), t.sha224 = r(799), t.sha256 = r(9344), t.sha384 = r(772), t.sha512 = r(5900);
        },
        4761: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5772), o = r(7038), s = n.rotl32, a = n.sum32, c = n.sum32_5, f = o.ft_1, u = i.BlockHash, h = [ 1518500249, 1859775393, 2400959708, 3395469782 ];
          function d() {
            if (!(this instanceof d)) return new d;
            u.call(this), this.h = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ], this.W = new Array(80);
          }
          n.inherits(d, u), e.exports = d, d.blockSize = 512, d.outSize = 160, d.hmacStrength = 80, d.padLength = 64, d.prototype._update = function(e, t) {
            for (var r = this.W, n = 0; n < 16; n++) r[n] = e[t + n];
            for (;n < r.length; n++) r[n] = s(r[n - 3] ^ r[n - 8] ^ r[n - 14] ^ r[n - 16], 1);
            var i = this.h[0], o = this.h[1], u = this.h[2], d = this.h[3], l = this.h[4];
            for (n = 0; n < r.length; n++) {
              var p = ~~(n / 20), b = c(s(i, 5), f(p, o, u, d), l, r[n], h[p]);
              l = d, d = u, u = s(o, 30), o = i, i = b;
            }
            this.h[0] = a(this.h[0], i), this.h[1] = a(this.h[1], o), this.h[2] = a(this.h[2], u), this.h[3] = a(this.h[3], d), this.h[4] = a(this.h[4], l);
          }, d.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        799: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(9344);
          function o() {
            if (!(this instanceof o)) return new o;
            i.call(this), this.h = [ 3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428 ];
          }
          n.inherits(o, i), e.exports = o, o.blockSize = 512, o.outSize = 224, o.hmacStrength = 192, o.padLength = 64, o.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
          };
        },
        9344: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5772), o = r(7038), s = r(9746), a = n.sum32, c = n.sum32_4, f = n.sum32_5, u = o.ch32, h = o.maj32, d = o.s0_256, l = o.s1_256, p = o.g0_256, b = o.g1_256, y = i.BlockHash, g = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ];
          function m() {
            if (!(this instanceof m)) return new m;
            y.call(this), this.h = [ 1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225 ], 
            this.k = g, this.W = new Array(64);
          }
          n.inherits(m, y), e.exports = m, m.blockSize = 512, m.outSize = 256, m.hmacStrength = 192, m.padLength = 64, m.prototype._update = function(e, t) {
            for (var r = this.W, n = 0; n < 16; n++) r[n] = e[t + n];
            for (;n < r.length; n++) r[n] = c(b(r[n - 2]), r[n - 7], p(r[n - 15]), r[n - 16]);
            var i = this.h[0], o = this.h[1], y = this.h[2], g = this.h[3], m = this.h[4], v = this.h[5], w = this.h[6], _ = this.h[7];
            for (s(this.k.length === r.length), n = 0; n < r.length; n++) {
              var S = f(_, l(m), u(m, v, w), this.k[n], r[n]), E = a(d(i), h(i, o, y));
              _ = w, w = v, v = m, m = a(g, S), g = y, y = o, o = i, i = a(S, E);
            }
            this.h[0] = a(this.h[0], i), this.h[1] = a(this.h[1], o), this.h[2] = a(this.h[2], y), this.h[3] = a(this.h[3], g), this.h[4] = a(this.h[4], m), 
            this.h[5] = a(this.h[5], v), this.h[6] = a(this.h[6], w), this.h[7] = a(this.h[7], _);
          }, m.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        772: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5900);
          function o() {
            if (!(this instanceof o)) return new o;
            i.call(this), this.h = [ 3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428 ];
          }
          n.inherits(o, i), e.exports = o, o.blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, o.padLength = 128, o.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
          };
        },
        5900: (e, t, r) => {
          "use strict";
          var n = r(6436), i = r(5772), o = r(9746), s = n.rotr64_hi, a = n.rotr64_lo, c = n.shr64_hi, f = n.shr64_lo, u = n.sum64, h = n.sum64_hi, d = n.sum64_lo, l = n.sum64_4_hi, p = n.sum64_4_lo, b = n.sum64_5_hi, y = n.sum64_5_lo, g = i.BlockHash, m = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ];
          function v() {
            if (!(this instanceof v)) return new v;
            g.call(this), this.h = [ 1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209 ], 
            this.k = m, this.W = new Array(160);
          }
          function w(e, t, r, n, i) {
            var o = e & r ^ ~e & i;
            return o < 0 && (o += 4294967296), o;
          }
          function _(e, t, r, n, i, o) {
            var s = t & n ^ ~t & o;
            return s < 0 && (s += 4294967296), s;
          }
          function S(e, t, r, n, i) {
            var o = e & r ^ e & i ^ r & i;
            return o < 0 && (o += 4294967296), o;
          }
          function E(e, t, r, n, i, o) {
            var s = t & n ^ t & o ^ n & o;
            return s < 0 && (s += 4294967296), s;
          }
          function A(e, t) {
            var r = s(e, t, 28) ^ s(t, e, 2) ^ s(t, e, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function x(e, t) {
            var r = a(e, t, 28) ^ a(t, e, 2) ^ a(t, e, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function k(e, t) {
            var r = a(e, t, 14) ^ a(e, t, 18) ^ a(t, e, 9);
            return r < 0 && (r += 4294967296), r;
          }
          function P(e, t) {
            var r = s(e, t, 1) ^ s(e, t, 8) ^ c(e, t, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function O(e, t) {
            var r = a(e, t, 1) ^ a(e, t, 8) ^ f(e, t, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function M(e, t) {
            var r = a(e, t, 19) ^ a(t, e, 29) ^ f(e, t, 6);
            return r < 0 && (r += 4294967296), r;
          }
          n.inherits(v, g), e.exports = v, v.blockSize = 1024, v.outSize = 512, v.hmacStrength = 192, v.padLength = 128, v.prototype._prepareBlock = function(e, t) {
            for (var r = this.W, n = 0; n < 32; n++) r[n] = e[t + n];
            for (;n < r.length; n += 2) {
              var i = (y = r[n - 4], g = r[n - 3], m = void 0, (m = s(y, g, 19) ^ s(g, y, 29) ^ c(y, g, 6)) < 0 && (m += 4294967296), 
              m), o = M(r[n - 4], r[n - 3]), a = r[n - 14], f = r[n - 13], u = P(r[n - 30], r[n - 29]), h = O(r[n - 30], r[n - 29]), d = r[n - 32], b = r[n - 31];
              r[n] = l(i, o, a, f, u, h, d, b), r[n + 1] = p(i, o, a, f, u, h, d, b);
            }
            var y, g, m;
          }, v.prototype._update = function(e, t) {
            this._prepareBlock(e, t);
            var r, n, i, a = this.W, c = this.h[0], f = this.h[1], l = this.h[2], p = this.h[3], g = this.h[4], m = this.h[5], v = this.h[6], P = this.h[7], O = this.h[8], M = this.h[9], I = this.h[10], T = this.h[11], R = this.h[12], C = this.h[13], N = this.h[14], j = this.h[15];
            o(this.k.length === a.length);
            for (var B = 0; B < a.length; B += 2) {
              var L = N, D = j, U = (i = void 0, (i = s(r = O, n = M, 14) ^ s(r, n, 18) ^ s(n, r, 9)) < 0 && (i += 4294967296), i), q = k(O, M), F = w(O, 0, I, 0, R), H = _(0, M, 0, T, 0, C), z = this.k[B], K = this.k[B + 1], V = a[B], G = a[B + 1], W = b(L, D, U, q, F, H, z, K, V, G), X = y(L, D, U, q, F, H, z, K, V, G);
              L = A(c, f), D = x(c, f), U = S(c, 0, l, 0, g), q = E(0, f, 0, p, 0, m);
              var Y = h(L, D, U, q), J = d(L, D, U, q);
              N = R, j = C, R = I, C = T, I = O, T = M, O = h(v, P, W, X), M = d(P, P, W, X), v = g, P = m, g = l, m = p, l = c, p = f, 
              c = h(W, X, Y, J), f = d(W, X, Y, J);
            }
            u(this.h, 0, c, f), u(this.h, 2, l, p), u(this.h, 4, g, m), u(this.h, 6, v, P), u(this.h, 8, O, M), u(this.h, 10, I, T), 
            u(this.h, 12, R, C), u(this.h, 14, N, j);
          }, v.prototype._digest = function(e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        7038: (e, t, r) => {
          "use strict";
          var n = r(6436).rotr32;
          function i(e, t, r) {
            return e & t ^ ~e & r;
          }
          function o(e, t, r) {
            return e & t ^ e & r ^ t & r;
          }
          function s(e, t, r) {
            return e ^ t ^ r;
          }
          t.ft_1 = function(e, t, r, n) {
            return 0 === e ? i(t, r, n) : 1 === e || 3 === e ? s(t, r, n) : 2 === e ? o(t, r, n) : void 0;
          }, t.ch32 = i, t.maj32 = o, t.p32 = s, t.s0_256 = function(e) {
            return n(e, 2) ^ n(e, 13) ^ n(e, 22);
          }, t.s1_256 = function(e) {
            return n(e, 6) ^ n(e, 11) ^ n(e, 25);
          }, t.g0_256 = function(e) {
            return n(e, 7) ^ n(e, 18) ^ e >>> 3;
          }, t.g1_256 = function(e) {
            return n(e, 17) ^ n(e, 19) ^ e >>> 10;
          };
        },
        6436: (e, t, r) => {
          "use strict";
          var n = r(9746), i = r(5717);
          function o(e, t) {
            return 55296 == (64512 & e.charCodeAt(t)) && !(t < 0 || t + 1 >= e.length) && 56320 == (64512 & e.charCodeAt(t + 1));
          }
          function s(e) {
            return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0;
          }
          function a(e) {
            return 1 === e.length ? "0" + e : e;
          }
          function c(e) {
            return 7 === e.length ? "0" + e : 6 === e.length ? "00" + e : 5 === e.length ? "000" + e : 4 === e.length ? "0000" + e : 3 === e.length ? "00000" + e : 2 === e.length ? "000000" + e : 1 === e.length ? "0000000" + e : e;
          }
          t.inherits = i, t.toArray = function(e, t) {
            if (Array.isArray(e)) return e.slice();
            if (!e) return [];
            var r = [];
            if ("string" == typeof e) if (t) {
              if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), i = 0; i < e.length; i += 2) r.push(parseInt(e[i] + e[i + 1], 16));
            } else for (var n = 0, i = 0; i < e.length; i++) {
              var s = e.charCodeAt(i);
              s < 128 ? r[n++] = s : s < 2048 ? (r[n++] = s >> 6 | 192, r[n++] = 63 & s | 128) : o(e, i) ? (s = 65536 + ((1023 & s) << 10) + (1023 & e.charCodeAt(++i)), 
              r[n++] = s >> 18 | 240, r[n++] = s >> 12 & 63 | 128, r[n++] = s >> 6 & 63 | 128, r[n++] = 63 & s | 128) : (r[n++] = s >> 12 | 224, 
              r[n++] = s >> 6 & 63 | 128, r[n++] = 63 & s | 128);
            } else for (i = 0; i < e.length; i++) r[i] = 0 | e[i];
            return r;
          }, t.toHex = function(e) {
            for (var t = "", r = 0; r < e.length; r++) t += a(e[r].toString(16));
            return t;
          }, t.htonl = s, t.toHex32 = function(e, t) {
            for (var r = "", n = 0; n < e.length; n++) {
              var i = e[n];
              "little" === t && (i = s(i)), r += c(i.toString(16));
            }
            return r;
          }, t.zero2 = a, t.zero8 = c, t.join32 = function(e, t, r, i) {
            var o = r - t;
            n(o % 4 == 0);
            for (var s = new Array(o / 4), a = 0, c = t; a < s.length; a++, c += 4) {
              var f;
              f = "big" === i ? e[c] << 24 | e[c + 1] << 16 | e[c + 2] << 8 | e[c + 3] : e[c + 3] << 24 | e[c + 2] << 16 | e[c + 1] << 8 | e[c], 
              s[a] = f >>> 0;
            }
            return s;
          }, t.split32 = function(e, t) {
            for (var r = new Array(4 * e.length), n = 0, i = 0; n < e.length; n++, i += 4) {
              var o = e[n];
              "big" === t ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, 
              r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, r[i] = 255 & o);
            }
            return r;
          }, t.rotr32 = function(e, t) {
            return e >>> t | e << 32 - t;
          }, t.rotl32 = function(e, t) {
            return e << t | e >>> 32 - t;
          }, t.sum32 = function(e, t) {
            return e + t >>> 0;
          }, t.sum32_3 = function(e, t, r) {
            return e + t + r >>> 0;
          }, t.sum32_4 = function(e, t, r, n) {
            return e + t + r + n >>> 0;
          }, t.sum32_5 = function(e, t, r, n, i) {
            return e + t + r + n + i >>> 0;
          }, t.sum64 = function(e, t, r, n) {
            var i = e[t], o = n + e[t + 1] >>> 0, s = (o < n ? 1 : 0) + r + i;
            e[t] = s >>> 0, e[t + 1] = o;
          }, t.sum64_hi = function(e, t, r, n) {
            return (t + n >>> 0 < t ? 1 : 0) + e + r >>> 0;
          }, t.sum64_lo = function(e, t, r, n) {
            return t + n >>> 0;
          }, t.sum64_4_hi = function(e, t, r, n, i, o, s, a) {
            var c = 0, f = t;
            return c += (f = f + n >>> 0) < t ? 1 : 0, c += (f = f + o >>> 0) < o ? 1 : 0, e + r + i + s + (c += (f = f + a >>> 0) < a ? 1 : 0) >>> 0;
          }, t.sum64_4_lo = function(e, t, r, n, i, o, s, a) {
            return t + n + o + a >>> 0;
          }, t.sum64_5_hi = function(e, t, r, n, i, o, s, a, c, f) {
            var u = 0, h = t;
            return u += (h = h + n >>> 0) < t ? 1 : 0, u += (h = h + o >>> 0) < o ? 1 : 0, u += (h = h + a >>> 0) < a ? 1 : 0, e + r + i + s + c + (u += (h = h + f >>> 0) < f ? 1 : 0) >>> 0;
          }, t.sum64_5_lo = function(e, t, r, n, i, o, s, a, c, f) {
            return t + n + o + a + f >>> 0;
          }, t.rotr64_hi = function(e, t, r) {
            return (t << 32 - r | e >>> r) >>> 0;
          }, t.rotr64_lo = function(e, t, r) {
            return (e << 32 - r | t >>> r) >>> 0;
          }, t.shr64_hi = function(e, t, r) {
            return e >>> r;
          }, t.shr64_lo = function(e, t, r) {
            return (e << 32 - r | t >>> r) >>> 0;
          };
        },
        2156: (e, t, r) => {
          "use strict";
          var n = r(3715), i = r(4504), o = r(9746);
          function s(e) {
            if (!(this instanceof s)) return new s(e);
            this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, 
            this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
            var t = i.toArray(e.entropy, e.entropyEnc || "hex"), r = i.toArray(e.nonce, e.nonceEnc || "hex"), n = i.toArray(e.pers, e.persEnc || "hex");
            o(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, n);
          }
          e.exports = s, s.prototype._init = function(e, t, r) {
            var n = e.concat(t).concat(r);
            this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) this.K[i] = 0, this.V[i] = 1;
            this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
          }, s.prototype._hmac = function() {
            return new n.hmac(this.hash, this.K);
          }, s.prototype._update = function(e) {
            var t = this._hmac().update(this.V).update([ 0 ]);
            e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([ 1 ]).update(e).digest(), 
            this.V = this._hmac().update(this.V).digest());
          }, s.prototype.reseed = function(e, t, r, n) {
            "string" != typeof t && (n = r, r = t, t = null), e = i.toArray(e, t), r = i.toArray(r, n), o(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), 
            this._update(e.concat(r || [])), this._reseed = 1;
          }, s.prototype.generate = function(e, t, r, n) {
            if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
            "string" != typeof t && (n = r, r = t, t = null), r && (r = i.toArray(r, n || "hex"), this._update(r));
            for (var o = []; o.length < e; ) this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);
            var s = o.slice(0, e);
            return this._update(r), this._reseed++, i.encode(s, t);
          };
        },
        9267: (e, t, r) => {
          var n = r(8501), i = r(8575), o = e.exports;
          for (var s in n) n.hasOwnProperty(s) && (o[s] = n[s]);
          function a(e) {
            if ("string" == typeof e && (e = i.parse(e)), e.protocol || (e.protocol = "https:"), "https:" !== e.protocol) throw new Error('Protocol "' + e.protocol + '" not supported. Expected "https:"');
            return e;
          }
          o.request = function(e, t) {
            return e = a(e), n.request.call(this, e, t);
          }, o.get = function(e, t) {
            return e = a(e), n.get.call(this, e, t);
          };
        },
        645: (e, t) => {
          t.read = function(e, t, r, n, i) {
            var o, s, a = 8 * i - n - 1, c = (1 << a) - 1, f = c >> 1, u = -7, h = r ? i - 1 : 0, d = r ? -1 : 1, l = e[t + h];
            for (h += d, o = l & (1 << -u) - 1, l >>= -u, u += a; u > 0; o = 256 * o + e[t + h], h += d, u -= 8) ;
            for (s = o & (1 << -u) - 1, o >>= -u, u += n; u > 0; s = 256 * s + e[t + h], h += d, u -= 8) ;
            if (0 === o) o = 1 - f; else {
              if (o === c) return s ? NaN : 1 / 0 * (l ? -1 : 1);
              s += Math.pow(2, n), o -= f;
            }
            return (l ? -1 : 1) * s * Math.pow(2, o - n);
          }, t.write = function(e, t, r, n, i, o) {
            var s, a, c, f = 8 * o - i - 1, u = (1 << f) - 1, h = u >> 1, d = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, l = n ? 0 : o - 1, p = n ? 1 : -1, b = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;
            for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = u) : (s = Math.floor(Math.log(t) / Math.LN2), 
            t * (c = Math.pow(2, -s)) < 1 && (s--, c *= 2), (t += s + h >= 1 ? d / c : d * Math.pow(2, 1 - h)) * c >= 2 && (s++, c /= 2), 
            s + h >= u ? (a = 0, s = u) : s + h >= 1 ? (a = (t * c - 1) * Math.pow(2, i), s += h) : (a = t * Math.pow(2, h - 1) * Math.pow(2, i), 
            s = 0)); i >= 8; e[r + l] = 255 & a, l += p, a /= 256, i -= 8) ;
            for (s = s << i | a, f += i; f > 0; e[r + l] = 255 & s, l += p, s /= 256, f -= 8) ;
            e[r + l - p] |= 128 * b;
          };
        },
        5717: e => {
          "function" == typeof Object.create ? e.exports = function(e, t) {
            t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }));
          } : e.exports = function(e, t) {
            if (t) {
              e.super_ = t;
              var r = function() {};
              r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
            }
          };
        },
        2584: (e, t, r) => {
          "use strict";
          var n = r(6410)(), i = r(1924)("Object.prototype.toString"), o = function(e) {
            return !(n && e && "object" == typeof e && Symbol.toStringTag in e) && "[object Arguments]" === i(e);
          }, s = function(e) {
            return !!o(e) || null !== e && "object" == typeof e && "number" == typeof e.length && e.length >= 0 && "[object Array]" !== i(e) && "[object Function]" === i(e.callee);
          }, a = function() {
            return o(arguments);
          }();
          o.isLegacyArguments = s, e.exports = a ? o : s;
        },
        5320: e => {
          "use strict";
          var t, r, n = Function.prototype.toString, i = "object" == typeof Reflect && null !== Reflect && Reflect.apply;
          if ("function" == typeof i && "function" == typeof Object.defineProperty) try {
            t = Object.defineProperty({}, "length", {
              get: function() {
                throw r;
              }
            }), r = {}, i((function() {
              throw 42;
            }), null, t);
          } catch (e) {
            e !== r && (i = null);
          } else i = null;
          var o = /^\s*class\b/, s = function(e) {
            try {
              var t = n.call(e);
              return o.test(t);
            } catch (e) {
              return !1;
            }
          }, a = Object.prototype.toString, c = "function" == typeof Symbol && !!Symbol.toStringTag, f = "object" == typeof document && void 0 === document.all && void 0 !== document.all ? document.all : {};
          e.exports = i ? function(e) {
            if (e === f) return !0;
            if (!e) return !1;
            if ("function" != typeof e && "object" != typeof e) return !1;
            if ("function" == typeof e && !e.prototype) return !0;
            try {
              i(e, null, t);
            } catch (e) {
              if (e !== r) return !1;
            }
            return !s(e);
          } : function(e) {
            if (e === f) return !0;
            if (!e) return !1;
            if ("function" != typeof e && "object" != typeof e) return !1;
            if ("function" == typeof e && !e.prototype) return !0;
            if (c) return function(e) {
              try {
                return !s(e) && (n.call(e), !0);
              } catch (e) {
                return !1;
              }
            }(e);
            if (s(e)) return !1;
            var t = a.call(e);
            return "[object Function]" === t || "[object GeneratorFunction]" === t;
          };
        },
        8662: (e, t, r) => {
          "use strict";
          var n, i = Object.prototype.toString, o = Function.prototype.toString, s = /^\s*(?:function)?\*/, a = r(6410)(), c = Object.getPrototypeOf;
          e.exports = function(e) {
            if ("function" != typeof e) return !1;
            if (s.test(o.call(e))) return !0;
            if (!a) return "[object GeneratorFunction]" === i.call(e);
            if (!c) return !1;
            if (void 0 === n) {
              var t = function() {
                if (!a) return !1;
                try {
                  return Function("return function*() {}")();
                } catch (e) {}
              }();
              n = !!t && c(t);
            }
            return c(e) === n;
          };
        },
        3944: e => {
          e.exports = function(e) {
            if ("string" != typeof e) throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof e + ", while checking isHexPrefixed.");
            return "0x" === e.slice(0, 2);
          };
        },
        8611: e => {
          "use strict";
          e.exports = function(e) {
            return e != e;
          };
        },
        360: (e, t, r) => {
          "use strict";
          var n = r(5559), i = r(4289), o = r(8611), s = r(9415), a = r(3194), c = n(s(), Number);
          i(c, {
            getPolyfill: s,
            implementation: o,
            shim: a
          }), e.exports = c;
        },
        9415: (e, t, r) => {
          "use strict";
          var n = r(8611);
          e.exports = function() {
            return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a") ? Number.isNaN : n;
          };
        },
        3194: (e, t, r) => {
          "use strict";
          var n = r(4289), i = r(9415);
          e.exports = function() {
            var e = i();
            return n(Number, {
              isNaN: e
            }, {
              isNaN: function() {
                return Number.isNaN !== e;
              }
            }), e;
          };
        },
        4970: e => {
          "use strict";
          const t = e => null !== e && "object" == typeof e && "function" == typeof e.pipe;
          t.writable = e => t(e) && !1 !== e.writable && "function" == typeof e._write && "object" == typeof e._writableState, t.readable = e => t(e) && !1 !== e.readable && "function" == typeof e._read && "object" == typeof e._readableState, 
          t.duplex = e => t.writable(e) && t.readable(e), t.transform = e => t.duplex(e) && "function" == typeof e._transform, e.exports = t;
        },
        5692: (e, t, r) => {
          "use strict";
          var n = r(4029), i = r(3083), o = r(1924), s = o("Object.prototype.toString"), a = r(6410)(), c = "undefined" == typeof globalThis ? r.g : globalThis, f = i(), u = o("Array.prototype.indexOf", !0) || function(e, t) {
            for (var r = 0; r < e.length; r += 1) if (e[r] === t) return r;
            return -1;
          }, h = o("String.prototype.slice"), d = {}, l = r(882), p = Object.getPrototypeOf;
          a && l && p && n(f, (function(e) {
            var t = new c[e];
            if (Symbol.toStringTag in t) {
              var r = p(t), n = l(r, Symbol.toStringTag);
              if (!n) {
                var i = p(r);
                n = l(i, Symbol.toStringTag);
              }
              d[e] = n.get;
            }
          })), e.exports = function(e) {
            if (!e || "object" != typeof e) return !1;
            if (!a || !(Symbol.toStringTag in e)) {
              var t = h(s(e), 8, -1);
              return u(f, t) > -1;
            }
            return !!l && function(e) {
              var t = !1;
              return n(d, (function(r, n) {
                if (!t) try {
                  t = r.call(e) === n;
                } catch (e) {}
              })), t;
            }(e);
          };
        },
        1094: (e, t, r) => {
          var n, i = r(4155);
          !function() {
            "use strict";
            var o = "input is invalid type", s = "object" == typeof window, a = s ? window : {};
            a.JS_SHA3_NO_WINDOW && (s = !1);
            var c = !s && "object" == typeof self;
            !a.JS_SHA3_NO_NODE_JS && "object" == typeof i && i.versions && i.versions.node ? a = r.g : c && (a = self);
            var f = !a.JS_SHA3_NO_COMMON_JS && e.exports, u = r.amdO, h = !a.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer, d = "0123456789abcdef".split(""), l = [ 4, 1024, 262144, 67108864 ], p = [ 0, 8, 16, 24 ], b = [ 1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648 ], y = [ 224, 256, 384, 512 ], g = [ 128, 256 ], m = [ "hex", "buffer", "arrayBuffer", "array", "digest" ], v = {
              128: 168,
              256: 136
            };
            !a.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function(e) {
              return "[object Array]" === Object.prototype.toString.call(e);
            }), !h || !a.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(e) {
              return "object" == typeof e && e.buffer && e.buffer.constructor === ArrayBuffer;
            });
            for (var w = function(e, t, r) {
              return function(n) {
                return new j(e, t, e).update(n)[r]();
              };
            }, _ = function(e, t, r) {
              return function(n, i) {
                return new j(e, t, i).update(n)[r]();
              };
            }, S = function(e, t, r) {
              return function(t, n, i, o) {
                return P["cshake" + e].update(t, n, i, o)[r]();
              };
            }, E = function(e, t, r) {
              return function(t, n, i, o) {
                return P["kmac" + e].update(t, n, i, o)[r]();
              };
            }, A = function(e, t, r, n) {
              for (var i = 0; i < m.length; ++i) {
                var o = m[i];
                e[o] = t(r, n, o);
              }
              return e;
            }, x = function(e, t) {
              var r = w(e, t, "hex");
              return r.create = function() {
                return new j(e, t, e);
              }, r.update = function(e) {
                return r.create().update(e);
              }, A(r, w, e, t);
            }, k = [ {
              name: "keccak",
              padding: [ 1, 256, 65536, 16777216 ],
              bits: y,
              createMethod: x
            }, {
              name: "sha3",
              padding: [ 6, 1536, 393216, 100663296 ],
              bits: y,
              createMethod: x
            }, {
              name: "shake",
              padding: [ 31, 7936, 2031616, 520093696 ],
              bits: g,
              createMethod: function(e, t) {
                var r = _(e, t, "hex");
                return r.create = function(r) {
                  return new j(e, t, r);
                }, r.update = function(e, t) {
                  return r.create(t).update(e);
                }, A(r, _, e, t);
              }
            }, {
              name: "cshake",
              padding: l,
              bits: g,
              createMethod: function(e, t) {
                var r = v[e], n = S(e, 0, "hex");
                return n.create = function(n, i, o) {
                  return i || o ? new j(e, t, n).bytepad([ i, o ], r) : P["shake" + e].create(n);
                }, n.update = function(e, t, r, i) {
                  return n.create(t, r, i).update(e);
                }, A(n, S, e, t);
              }
            }, {
              name: "kmac",
              padding: l,
              bits: g,
              createMethod: function(e, t) {
                var r = v[e], n = E(e, 0, "hex");
                return n.create = function(n, i, o) {
                  return new B(e, t, i).bytepad([ "KMAC", o ], r).bytepad([ n ], r);
                }, n.update = function(e, t, r, i) {
                  return n.create(e, r, i).update(t);
                }, A(n, E, e, t);
              }
            } ], P = {}, O = [], M = 0; M < k.length; ++M) for (var I = k[M], T = I.bits, R = 0; R < T.length; ++R) {
              var C = I.name + "_" + T[R];
              if (O.push(C), P[C] = I.createMethod(T[R], I.padding), "sha3" !== I.name) {
                var N = I.name + T[R];
                O.push(N), P[N] = P[C];
              }
            }
            function j(e, t, r) {
              this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.finalized = !1, this.block = 0, 
              this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, 
              this.extraBytes = (31 & r) >> 3;
              for (var n = 0; n < 50; ++n) this.s[n] = 0;
            }
            function B(e, t, r) {
              j.call(this, e, t, r);
            }
            j.prototype.update = function(e) {
              if (this.finalized) throw new Error("finalize already called");
              var t, r = typeof e;
              if ("string" !== r) {
                if ("object" !== r) throw new Error(o);
                if (null === e) throw new Error(o);
                if (h && e.constructor === ArrayBuffer) e = new Uint8Array(e); else if (!(Array.isArray(e) || h && ArrayBuffer.isView(e))) throw new Error(o);
                t = !0;
              }
              for (var n, i, s = this.blocks, a = this.byteCount, c = e.length, f = this.blockCount, u = 0, d = this.s; u < c; ) {
                if (this.reset) for (this.reset = !1, s[0] = this.block, n = 1; n < f + 1; ++n) s[n] = 0;
                if (t) for (n = this.start; u < c && n < a; ++u) s[n >> 2] |= e[u] << p[3 & n++]; else for (n = this.start; u < c && n < a; ++u) (i = e.charCodeAt(u)) < 128 ? s[n >> 2] |= i << p[3 & n++] : i < 2048 ? (s[n >> 2] |= (192 | i >> 6) << p[3 & n++], 
                s[n >> 2] |= (128 | 63 & i) << p[3 & n++]) : i < 55296 || i >= 57344 ? (s[n >> 2] |= (224 | i >> 12) << p[3 & n++], s[n >> 2] |= (128 | i >> 6 & 63) << p[3 & n++], 
                s[n >> 2] |= (128 | 63 & i) << p[3 & n++]) : (i = 65536 + ((1023 & i) << 10 | 1023 & e.charCodeAt(++u)), s[n >> 2] |= (240 | i >> 18) << p[3 & n++], 
                s[n >> 2] |= (128 | i >> 12 & 63) << p[3 & n++], s[n >> 2] |= (128 | i >> 6 & 63) << p[3 & n++], s[n >> 2] |= (128 | 63 & i) << p[3 & n++]);
                if (this.lastByteIndex = n, n >= a) {
                  for (this.start = n - a, this.block = s[f], n = 0; n < f; ++n) d[n] ^= s[n];
                  L(d), this.reset = !0;
                } else this.start = n;
              }
              return this;
            }, j.prototype.encode = function(e, t) {
              var r = 255 & e, n = 1, i = [ r ];
              for (r = 255 & (e >>= 8); r > 0; ) i.unshift(r), r = 255 & (e >>= 8), ++n;
              return t ? i.push(n) : i.unshift(n), this.update(i), i.length;
            }, j.prototype.encodeString = function(e) {
              var t, r = typeof e;
              if ("string" !== r) {
                if ("object" !== r) throw new Error(o);
                if (null === e) throw new Error(o);
                if (h && e.constructor === ArrayBuffer) e = new Uint8Array(e); else if (!(Array.isArray(e) || h && ArrayBuffer.isView(e))) throw new Error(o);
                t = !0;
              }
              var n = 0, i = e.length;
              if (t) n = i; else for (var s = 0; s < e.length; ++s) {
                var a = e.charCodeAt(s);
                a < 128 ? n += 1 : a < 2048 ? n += 2 : a < 55296 || a >= 57344 ? n += 3 : (a = 65536 + ((1023 & a) << 10 | 1023 & e.charCodeAt(++s)), 
                n += 4);
              }
              return n += this.encode(8 * n), this.update(e), n;
            }, j.prototype.bytepad = function(e, t) {
              for (var r = this.encode(t), n = 0; n < e.length; ++n) r += this.encodeString(e[n]);
              var i = t - r % t, o = [];
              return o.length = i, this.update(o), this;
            }, j.prototype.finalize = function() {
              if (!this.finalized) {
                this.finalized = !0;
                var e = this.blocks, t = this.lastByteIndex, r = this.blockCount, n = this.s;
                if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for (e[0] = e[r], t = 1; t < r + 1; ++t) e[t] = 0;
                for (e[r - 1] |= 2147483648, t = 0; t < r; ++t) n[t] ^= e[t];
                L(n);
              }
            }, j.prototype.toString = j.prototype.hex = function() {
              this.finalize();
              for (var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = ""; s < n; ) {
                for (o = 0; o < t && s < n; ++o, ++s) e = r[o], a += d[e >> 4 & 15] + d[15 & e] + d[e >> 12 & 15] + d[e >> 8 & 15] + d[e >> 20 & 15] + d[e >> 16 & 15] + d[e >> 28 & 15] + d[e >> 24 & 15];
                s % t == 0 && (L(r), o = 0);
              }
              return i && (e = r[o], a += d[e >> 4 & 15] + d[15 & e], i > 1 && (a += d[e >> 12 & 15] + d[e >> 8 & 15]), i > 2 && (a += d[e >> 20 & 15] + d[e >> 16 & 15])), 
              a;
            }, j.prototype.arrayBuffer = function() {
              this.finalize();
              var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = this.outputBits >> 3;
              e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(a);
              for (var c = new Uint32Array(e); s < n; ) {
                for (o = 0; o < t && s < n; ++o, ++s) c[s] = r[o];
                s % t == 0 && L(r);
              }
              return i && (c[o] = r[o], e = e.slice(0, a)), e;
            }, j.prototype.buffer = j.prototype.arrayBuffer, j.prototype.digest = j.prototype.array = function() {
              this.finalize();
              for (var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, s = 0, a = 0, c = []; a < i; ) {
                for (s = 0; s < r && a < i; ++s, ++a) e = a << 2, t = n[s], c[e] = 255 & t, c[e + 1] = t >> 8 & 255, c[e + 2] = t >> 16 & 255, 
                c[e + 3] = t >> 24 & 255;
                a % r == 0 && L(n);
              }
              return o && (e = a << 2, t = n[s], c[e] = 255 & t, o > 1 && (c[e + 1] = t >> 8 & 255), o > 2 && (c[e + 2] = t >> 16 & 255)), 
              c;
            }, B.prototype = new j, B.prototype.finalize = function() {
              return this.encode(this.outputBits, !0), j.prototype.finalize.call(this);
            };
            var L = function(e) {
              var t, r, n, i, o, s, a, c, f, u, h, d, l, p, y, g, m, v, w, _, S, E, A, x, k, P, O, M, I, T, R, C, N, j, B, L, D, U, q, F, H, z, K, V, G, W, X, Y, J, $, Z, Q, ee, te, re, ne, ie, oe, se, ae, ce, fe, ue;
              for (n = 0; n < 48; n += 2) i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], s = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], 
              a = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], c = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], f = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], 
              u = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], h = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (d = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (s << 1 | a >>> 31), 
              r = (l = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (a << 1 | s >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, 
              e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (c << 1 | f >>> 31), r = o ^ (f << 1 | c >>> 31), e[2] ^= t, 
              e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = s ^ (u << 1 | h >>> 31), 
              r = a ^ (h << 1 | u >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, 
              e[44] ^= t, e[45] ^= r, t = c ^ (d << 1 | l >>> 31), r = f ^ (l << 1 | d >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, 
              e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = u ^ (i << 1 | o >>> 31), r = h ^ (o << 1 | i >>> 31), 
              e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, p = e[0], 
              y = e[1], W = e[11] << 4 | e[10] >>> 28, X = e[10] << 4 | e[11] >>> 28, M = e[20] << 3 | e[21] >>> 29, I = e[21] << 3 | e[20] >>> 29, 
              ae = e[31] << 9 | e[30] >>> 23, ce = e[30] << 9 | e[31] >>> 23, z = e[40] << 18 | e[41] >>> 14, K = e[41] << 18 | e[40] >>> 14, 
              j = e[2] << 1 | e[3] >>> 31, B = e[3] << 1 | e[2] >>> 31, g = e[13] << 12 | e[12] >>> 20, m = e[12] << 12 | e[13] >>> 20, 
              Y = e[22] << 10 | e[23] >>> 22, J = e[23] << 10 | e[22] >>> 22, T = e[33] << 13 | e[32] >>> 19, R = e[32] << 13 | e[33] >>> 19, 
              fe = e[42] << 2 | e[43] >>> 30, ue = e[43] << 2 | e[42] >>> 30, te = e[5] << 30 | e[4] >>> 2, re = e[4] << 30 | e[5] >>> 2, 
              L = e[14] << 6 | e[15] >>> 26, D = e[15] << 6 | e[14] >>> 26, v = e[25] << 11 | e[24] >>> 21, w = e[24] << 11 | e[25] >>> 21, 
              $ = e[34] << 15 | e[35] >>> 17, Z = e[35] << 15 | e[34] >>> 17, C = e[45] << 29 | e[44] >>> 3, N = e[44] << 29 | e[45] >>> 3, 
              x = e[6] << 28 | e[7] >>> 4, k = e[7] << 28 | e[6] >>> 4, ne = e[17] << 23 | e[16] >>> 9, ie = e[16] << 23 | e[17] >>> 9, 
              U = e[26] << 25 | e[27] >>> 7, q = e[27] << 25 | e[26] >>> 7, _ = e[36] << 21 | e[37] >>> 11, S = e[37] << 21 | e[36] >>> 11, 
              Q = e[47] << 24 | e[46] >>> 8, ee = e[46] << 24 | e[47] >>> 8, V = e[8] << 27 | e[9] >>> 5, G = e[9] << 27 | e[8] >>> 5, 
              P = e[18] << 20 | e[19] >>> 12, O = e[19] << 20 | e[18] >>> 12, oe = e[29] << 7 | e[28] >>> 25, se = e[28] << 7 | e[29] >>> 25, 
              F = e[38] << 8 | e[39] >>> 24, H = e[39] << 8 | e[38] >>> 24, E = e[48] << 14 | e[49] >>> 18, A = e[49] << 14 | e[48] >>> 18, 
              e[0] = p ^ ~g & v, e[1] = y ^ ~m & w, e[10] = x ^ ~P & M, e[11] = k ^ ~O & I, e[20] = j ^ ~L & U, e[21] = B ^ ~D & q, e[30] = V ^ ~W & Y, 
              e[31] = G ^ ~X & J, e[40] = te ^ ~ne & oe, e[41] = re ^ ~ie & se, e[2] = g ^ ~v & _, e[3] = m ^ ~w & S, e[12] = P ^ ~M & T, 
              e[13] = O ^ ~I & R, e[22] = L ^ ~U & F, e[23] = D ^ ~q & H, e[32] = W ^ ~Y & $, e[33] = X ^ ~J & Z, e[42] = ne ^ ~oe & ae, 
              e[43] = ie ^ ~se & ce, e[4] = v ^ ~_ & E, e[5] = w ^ ~S & A, e[14] = M ^ ~T & C, e[15] = I ^ ~R & N, e[24] = U ^ ~F & z, 
              e[25] = q ^ ~H & K, e[34] = Y ^ ~$ & Q, e[35] = J ^ ~Z & ee, e[44] = oe ^ ~ae & fe, e[45] = se ^ ~ce & ue, e[6] = _ ^ ~E & p, 
              e[7] = S ^ ~A & y, e[16] = T ^ ~C & x, e[17] = R ^ ~N & k, e[26] = F ^ ~z & j, e[27] = H ^ ~K & B, e[36] = $ ^ ~Q & V, e[37] = Z ^ ~ee & G, 
              e[46] = ae ^ ~fe & te, e[47] = ce ^ ~ue & re, e[8] = E ^ ~p & g, e[9] = A ^ ~y & m, e[18] = C ^ ~x & P, e[19] = N ^ ~k & O, 
              e[28] = z ^ ~j & L, e[29] = K ^ ~B & D, e[38] = Q ^ ~V & W, e[39] = ee ^ ~G & X, e[48] = fe ^ ~te & ne, e[49] = ue ^ ~re & ie, 
              e[0] ^= b[n], e[1] ^= b[n + 1];
            };
            if (f) e.exports = P; else {
              for (M = 0; M < O.length; ++M) a[O[M]] = P[O[M]];
              u && (void 0 === (n = function() {
                return P;
              }.call(t, r, t, e)) || (e.exports = n));
            }
          }();
        },
        7266: (e, t, r) => {
          var n = "undefined" != typeof JSON ? JSON : r(8418);
          e.exports = function(e, t) {
            t || (t = {}), "function" == typeof t && (t = {
              cmp: t
            });
            var r = t.space || "";
            "number" == typeof r && (r = Array(r + 1).join(" "));
            var s, a = "boolean" == typeof t.cycles && t.cycles, c = t.replacer || function(e, t) {
              return t;
            }, f = t.cmp && (s = t.cmp, function(e) {
              return function(t, r) {
                var n = {
                  key: t,
                  value: e[t]
                }, i = {
                  key: r,
                  value: e[r]
                };
                return s(n, i);
              };
            }), u = [];
            return function e(t, s, h, d) {
              var l = r ? "\n" + new Array(d + 1).join(r) : "", p = r ? ": " : ":";
              if (h && h.toJSON && "function" == typeof h.toJSON && (h = h.toJSON()), void 0 !== (h = c.call(t, s, h))) {
                if ("object" != typeof h || null === h) return n.stringify(h);
                if (i(h)) {
                  for (var b = [], y = 0; y < h.length; y++) {
                    var g = e(h, y, h[y], d + 1) || n.stringify(null);
                    b.push(l + r + g);
                  }
                  return "[" + b.join(",") + l + "]";
                }
                if (-1 !== u.indexOf(h)) {
                  if (a) return n.stringify("__cycle__");
                  throw new TypeError("Converting circular structure to JSON");
                }
                u.push(h);
                var m = o(h).sort(f && f(h));
                for (b = [], y = 0; y < m.length; y++) {
                  var v = e(h, s = m[y], h[s], d + 1);
                  if (v) {
                    var w = n.stringify(s) + p + v;
                    b.push(l + r + w);
                  }
                }
                return u.splice(u.indexOf(h), 1), "{" + b.join(",") + l + "}";
              }
            }({
              "": e
            }, "", e, 0);
          };
          var i = Array.isArray || function(e) {
            return "[object Array]" === {}.toString.call(e);
          }, o = Object.keys || function(e) {
            var t = Object.prototype.hasOwnProperty || function() {
              return !0;
            }, r = [];
            for (var n in e) t.call(e, n) && r.push(n);
            return r;
          };
        },
        8418: (e, t, r) => {
          t.parse = r(1396), t.stringify = r(6177);
        },
        1396: e => {
          var t, r, n, i, o = {
            '"': '"',
            "\\": "\\",
            "/": "/",
            b: "\b",
            f: "\f",
            n: "\n",
            r: "\r",
            t: "\t"
          }, s = function(e) {
            throw {
              name: "SyntaxError",
              message: e,
              at: t,
              text: n
            };
          }, a = function(e) {
            return e && e !== r && s("Expected '" + e + "' instead of '" + r + "'"), r = n.charAt(t), t += 1, r;
          }, c = function() {
            var e, t = "";
            for ("-" === r && (t = "-", a("-")); r >= "0" && r <= "9"; ) t += r, a();
            if ("." === r) for (t += "."; a() && r >= "0" && r <= "9"; ) t += r;
            if ("e" === r || "E" === r) for (t += r, a(), "-" !== r && "+" !== r || (t += r, a()); r >= "0" && r <= "9"; ) t += r, a();
            if (e = +t, isFinite(e)) return e;
            s("Bad number");
          }, f = function() {
            var e, t, n, i = "";
            if ('"' === r) for (;a(); ) {
              if ('"' === r) return a(), i;
              if ("\\" === r) if (a(), "u" === r) {
                for (n = 0, t = 0; t < 4 && (e = parseInt(a(), 16), isFinite(e)); t += 1) n = 16 * n + e;
                i += String.fromCharCode(n);
              } else {
                if ("string" != typeof o[r]) break;
                i += o[r];
              } else i += r;
            }
            s("Bad string");
          }, u = function() {
            for (;r && r <= " "; ) a();
          };
          i = function() {
            switch (u(), r) {
             case "{":
              return function() {
                var e, t = {};
                if ("{" === r) {
                  if (a("{"), u(), "}" === r) return a("}"), t;
                  for (;r; ) {
                    if (e = f(), u(), a(":"), Object.hasOwnProperty.call(t, e) && s('Duplicate key "' + e + '"'), t[e] = i(), u(), "}" === r) return a("}"), 
                    t;
                    a(","), u();
                  }
                }
                s("Bad object");
              }();

             case "[":
              return function() {
                var e = [];
                if ("[" === r) {
                  if (a("["), u(), "]" === r) return a("]"), e;
                  for (;r; ) {
                    if (e.push(i()), u(), "]" === r) return a("]"), e;
                    a(","), u();
                  }
                }
                s("Bad array");
              }();

             case '"':
              return f();

             case "-":
              return c();

             default:
              return r >= "0" && r <= "9" ? c() : function() {
                switch (r) {
                 case "t":
                  return a("t"), a("r"), a("u"), a("e"), !0;

                 case "f":
                  return a("f"), a("a"), a("l"), a("s"), a("e"), !1;

                 case "n":
                  return a("n"), a("u"), a("l"), a("l"), null;
                }
                s("Unexpected '" + r + "'");
              }();
            }
          }, e.exports = function(e, o) {
            var a;
            return n = e, t = 0, r = " ", a = i(), u(), r && s("Syntax error"), "function" == typeof o ? function e(t, r) {
              var n, i, s = t[r];
              if (s && "object" == typeof s) for (n in s) Object.prototype.hasOwnProperty.call(s, n) && (void 0 !== (i = e(s, n)) ? s[n] = i : delete s[n]);
              return o.call(t, r, s);
            }({
              "": a
            }, "") : a;
          };
        },
        6177: e => {
          var t, r, n, i = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, o = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
          };
          function s(e) {
            return i.lastIndex = 0, i.test(e) ? '"' + e.replace(i, (function(e) {
              var t = o[e];
              return "string" == typeof t ? t : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
            })) + '"' : '"' + e + '"';
          }
          function a(e, i) {
            var o, c, f, u, h, d = t, l = i[e];
            switch (l && "object" == typeof l && "function" == typeof l.toJSON && (l = l.toJSON(e)), "function" == typeof n && (l = n.call(i, e, l)), 
            typeof l) {
             case "string":
              return s(l);

             case "number":
              return isFinite(l) ? String(l) : "null";

             case "boolean":
             case "null":
              return String(l);

             case "object":
              if (!l) return "null";
              if (t += r, h = [], "[object Array]" === Object.prototype.toString.apply(l)) {
                for (u = l.length, o = 0; o < u; o += 1) h[o] = a(o, l) || "null";
                return f = 0 === h.length ? "[]" : t ? "[\n" + t + h.join(",\n" + t) + "\n" + d + "]" : "[" + h.join(",") + "]", t = d, 
                f;
              }
              if (n && "object" == typeof n) for (u = n.length, o = 0; o < u; o += 1) "string" == typeof (c = n[o]) && (f = a(c, l)) && h.push(s(c) + (t ? ": " : ":") + f); else for (c in l) Object.prototype.hasOwnProperty.call(l, c) && (f = a(c, l)) && h.push(s(c) + (t ? ": " : ":") + f);
              return f = 0 === h.length ? "{}" : t ? "{\n" + t + h.join(",\n" + t) + "\n" + d + "}" : "{" + h.join(",") + "}", t = d, 
              f;
            }
          }
          e.exports = function(e, i, o) {
            var s;
            if (t = "", r = "", "number" == typeof o) for (s = 0; s < o; s += 1) r += " "; else "string" == typeof o && (r = o);
            if (n = i, i && "function" != typeof i && ("object" != typeof i || "number" != typeof i.length)) throw new Error("JSON.stringify");
            return a("", {
              "": e
            });
          };
        },
        5811: (e, t, r) => {
          e.exports = r(6066)(r(9653));
        },
        6066: (e, t, r) => {
          const n = r(7016), i = r(5675);
          e.exports = function(e) {
            const t = n(e), r = i(e);
            return function(e, n) {
              switch ("string" == typeof e ? e.toLowerCase() : e) {
               case "keccak224":
                return new t(1152, 448, null, 224, n);

               case "keccak256":
                return new t(1088, 512, null, 256, n);

               case "keccak384":
                return new t(832, 768, null, 384, n);

               case "keccak512":
                return new t(576, 1024, null, 512, n);

               case "sha3-224":
                return new t(1152, 448, 6, 224, n);

               case "sha3-256":
                return new t(1088, 512, 6, 256, n);

               case "sha3-384":
                return new t(832, 768, 6, 384, n);

               case "sha3-512":
                return new t(576, 1024, 6, 512, n);

               case "shake128":
                return new r(1344, 256, 31, n);

               case "shake256":
                return new r(1088, 512, 31, n);

               default:
                throw new Error("Invald algorithm: " + e);
              }
            };
          };
        },
        7016: (e, t, r) => {
          var n = r(8764).Buffer;
          const {Transform: i} = r(8473);
          e.exports = e => class t extends i {
            constructor(t, r, n, i, o) {
              super(o), this._rate = t, this._capacity = r, this._delimitedSuffix = n, this._hashBitLength = i, this._options = o, this._state = new e, 
              this._state.initialize(t, r), this._finalized = !1;
            }
            _transform(e, t, r) {
              let n = null;
              try {
                this.update(e, t);
              } catch (e) {
                n = e;
              }
              r(n);
            }
            _flush(e) {
              let t = null;
              try {
                this.push(this.digest());
              } catch (e) {
                t = e;
              }
              e(t);
            }
            update(e, t) {
              if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
              if (this._finalized) throw new Error("Digest already called");
              return n.isBuffer(e) || (e = n.from(e, t)), this._state.absorb(e), this;
            }
            digest(e) {
              if (this._finalized) throw new Error("Digest already called");
              this._finalized = !0, this._delimitedSuffix && this._state.absorbLastFewBits(this._delimitedSuffix);
              let t = this._state.squeeze(this._hashBitLength / 8);
              return void 0 !== e && (t = t.toString(e)), this._resetState(), t;
            }
            _resetState() {
              return this._state.initialize(this._rate, this._capacity), this;
            }
            _clone() {
              const e = new t(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
              return this._state.copy(e._state), e._finalized = this._finalized, e;
            }
          };
        },
        5675: (e, t, r) => {
          var n = r(8764).Buffer;
          const {Transform: i} = r(8473);
          e.exports = e => class t extends i {
            constructor(t, r, n, i) {
              super(i), this._rate = t, this._capacity = r, this._delimitedSuffix = n, this._options = i, this._state = new e, this._state.initialize(t, r), 
              this._finalized = !1;
            }
            _transform(e, t, r) {
              let n = null;
              try {
                this.update(e, t);
              } catch (e) {
                n = e;
              }
              r(n);
            }
            _flush() {}
            _read(e) {
              this.push(this.squeeze(e));
            }
            update(e, t) {
              if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
              if (this._finalized) throw new Error("Squeeze already called");
              return n.isBuffer(e) || (e = n.from(e, t)), this._state.absorb(e), this;
            }
            squeeze(e, t) {
              this._finalized || (this._finalized = !0, this._state.absorbLastFewBits(this._delimitedSuffix));
              let r = this._state.squeeze(e);
              return void 0 !== t && (r = r.toString(t)), r;
            }
            _resetState() {
              return this._state.initialize(this._rate, this._capacity), this;
            }
            _clone() {
              const e = new t(this._rate, this._capacity, this._delimitedSuffix, this._options);
              return this._state.copy(e._state), e._finalized = this._finalized, e;
            }
          };
        },
        4040: (e, t) => {
          const r = [ 1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648 ];
          t.p1600 = function(e) {
            for (let t = 0; t < 24; ++t) {
              const n = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], i = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], o = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], a = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], c = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], f = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], u = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], h = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48], d = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49];
              let l = h ^ (o << 1 | s >>> 31), p = d ^ (s << 1 | o >>> 31);
              const b = e[0] ^ l, y = e[1] ^ p, g = e[10] ^ l, m = e[11] ^ p, v = e[20] ^ l, w = e[21] ^ p, _ = e[30] ^ l, S = e[31] ^ p, E = e[40] ^ l, A = e[41] ^ p;
              l = n ^ (a << 1 | c >>> 31), p = i ^ (c << 1 | a >>> 31);
              const x = e[2] ^ l, k = e[3] ^ p, P = e[12] ^ l, O = e[13] ^ p, M = e[22] ^ l, I = e[23] ^ p, T = e[32] ^ l, R = e[33] ^ p, C = e[42] ^ l, N = e[43] ^ p;
              l = o ^ (f << 1 | u >>> 31), p = s ^ (u << 1 | f >>> 31);
              const j = e[4] ^ l, B = e[5] ^ p, L = e[14] ^ l, D = e[15] ^ p, U = e[24] ^ l, q = e[25] ^ p, F = e[34] ^ l, H = e[35] ^ p, z = e[44] ^ l, K = e[45] ^ p;
              l = a ^ (h << 1 | d >>> 31), p = c ^ (d << 1 | h >>> 31);
              const V = e[6] ^ l, G = e[7] ^ p, W = e[16] ^ l, X = e[17] ^ p, Y = e[26] ^ l, J = e[27] ^ p, $ = e[36] ^ l, Z = e[37] ^ p, Q = e[46] ^ l, ee = e[47] ^ p;
              l = f ^ (n << 1 | i >>> 31), p = u ^ (i << 1 | n >>> 31);
              const te = e[8] ^ l, re = e[9] ^ p, ne = e[18] ^ l, ie = e[19] ^ p, oe = e[28] ^ l, se = e[29] ^ p, ae = e[38] ^ l, ce = e[39] ^ p, fe = e[48] ^ l, ue = e[49] ^ p, he = b, de = y, le = m << 4 | g >>> 28, pe = g << 4 | m >>> 28, be = v << 3 | w >>> 29, ye = w << 3 | v >>> 29, ge = S << 9 | _ >>> 23, me = _ << 9 | S >>> 23, ve = E << 18 | A >>> 14, we = A << 18 | E >>> 14, _e = x << 1 | k >>> 31, Se = k << 1 | x >>> 31, Ee = O << 12 | P >>> 20, Ae = P << 12 | O >>> 20, xe = M << 10 | I >>> 22, ke = I << 10 | M >>> 22, Pe = R << 13 | T >>> 19, Oe = T << 13 | R >>> 19, Me = C << 2 | N >>> 30, Ie = N << 2 | C >>> 30, Te = B << 30 | j >>> 2, Re = j << 30 | B >>> 2, Ce = L << 6 | D >>> 26, Ne = D << 6 | L >>> 26, je = q << 11 | U >>> 21, Be = U << 11 | q >>> 21, Le = F << 15 | H >>> 17, De = H << 15 | F >>> 17, Ue = K << 29 | z >>> 3, qe = z << 29 | K >>> 3, Fe = V << 28 | G >>> 4, He = G << 28 | V >>> 4, ze = X << 23 | W >>> 9, Ke = W << 23 | X >>> 9, Ve = Y << 25 | J >>> 7, Ge = J << 25 | Y >>> 7, We = $ << 21 | Z >>> 11, Xe = Z << 21 | $ >>> 11, Ye = ee << 24 | Q >>> 8, Je = Q << 24 | ee >>> 8, $e = te << 27 | re >>> 5, Ze = re << 27 | te >>> 5, Qe = ne << 20 | ie >>> 12, et = ie << 20 | ne >>> 12, tt = se << 7 | oe >>> 25, rt = oe << 7 | se >>> 25, nt = ae << 8 | ce >>> 24, it = ce << 8 | ae >>> 24, ot = fe << 14 | ue >>> 18, st = ue << 14 | fe >>> 18;
              e[0] = he ^ ~Ee & je, e[1] = de ^ ~Ae & Be, e[10] = Fe ^ ~Qe & be, e[11] = He ^ ~et & ye, e[20] = _e ^ ~Ce & Ve, e[21] = Se ^ ~Ne & Ge, 
              e[30] = $e ^ ~le & xe, e[31] = Ze ^ ~pe & ke, e[40] = Te ^ ~ze & tt, e[41] = Re ^ ~Ke & rt, e[2] = Ee ^ ~je & We, e[3] = Ae ^ ~Be & Xe, 
              e[12] = Qe ^ ~be & Pe, e[13] = et ^ ~ye & Oe, e[22] = Ce ^ ~Ve & nt, e[23] = Ne ^ ~Ge & it, e[32] = le ^ ~xe & Le, e[33] = pe ^ ~ke & De, 
              e[42] = ze ^ ~tt & ge, e[43] = Ke ^ ~rt & me, e[4] = je ^ ~We & ot, e[5] = Be ^ ~Xe & st, e[14] = be ^ ~Pe & Ue, e[15] = ye ^ ~Oe & qe, 
              e[24] = Ve ^ ~nt & ve, e[25] = Ge ^ ~it & we, e[34] = xe ^ ~Le & Ye, e[35] = ke ^ ~De & Je, e[44] = tt ^ ~ge & Me, e[45] = rt ^ ~me & Ie, 
              e[6] = We ^ ~ot & he, e[7] = Xe ^ ~st & de, e[16] = Pe ^ ~Ue & Fe, e[17] = Oe ^ ~qe & He, e[26] = nt ^ ~ve & _e, e[27] = it ^ ~we & Se, 
              e[36] = Le ^ ~Ye & $e, e[37] = De ^ ~Je & Ze, e[46] = ge ^ ~Me & Te, e[47] = me ^ ~Ie & Re, e[8] = ot ^ ~he & Ee, e[9] = st ^ ~de & Ae, 
              e[18] = Ue ^ ~Fe & Qe, e[19] = qe ^ ~He & et, e[28] = ve ^ ~_e & Ce, e[29] = we ^ ~Se & Ne, e[38] = Ye ^ ~$e & le, e[39] = Je ^ ~Ze & pe, 
              e[48] = Me ^ ~Te & ze, e[49] = Ie ^ ~Re & Ke, e[0] ^= r[2 * t], e[1] ^= r[2 * t + 1];
            }
          };
        },
        9653: (e, t, r) => {
          var n = r(8764).Buffer;
          const i = r(4040);
          function o() {
            this.state = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], this.blockSize = null, this.count = 0, 
            this.squeezing = !1;
          }
          o.prototype.initialize = function(e, t) {
            for (let r = 0; r < 50; ++r) this.state[r] = 0;
            this.blockSize = e / 8, this.count = 0, this.squeezing = !1;
          }, o.prototype.absorb = function(e) {
            for (let t = 0; t < e.length; ++t) this.state[~~(this.count / 4)] ^= e[t] << this.count % 4 * 8, this.count += 1, this.count === this.blockSize && (i.p1600(this.state), 
            this.count = 0);
          }, o.prototype.absorbLastFewBits = function(e) {
            this.state[~~(this.count / 4)] ^= e << this.count % 4 * 8, 0 != (128 & e) && this.count === this.blockSize - 1 && i.p1600(this.state), 
            this.state[~~((this.blockSize - 1) / 4)] ^= 128 << (this.blockSize - 1) % 4 * 8, i.p1600(this.state), this.count = 0, this.squeezing = !0;
          }, o.prototype.squeeze = function(e) {
            this.squeezing || this.absorbLastFewBits(1);
            const t = n.alloc(e);
            for (let r = 0; r < e; ++r) t[r] = this.state[~~(this.count / 4)] >>> this.count % 4 * 8 & 255, this.count += 1, this.count === this.blockSize && (i.p1600(this.state), 
            this.count = 0);
            return t;
          }, o.prototype.copy = function(e) {
            for (let t = 0; t < 50; ++t) e.state[t] = this.state[t];
            e.blockSize = this.blockSize, e.count = this.count, e.squeezing = this.squeezing;
          }, e.exports = o;
        },
        2378: (e, t, r) => {
          e = r.nmd(e);
          var n = "__lodash_hash_undefined__", i = 9007199254740991, o = "[object Arguments]", s = "[object Function]", a = "[object Object]", c = /^\[object .+?Constructor\]$/, f = /^(?:0|[1-9]\d*)$/, u = {};
          u["[object Float32Array]"] = u["[object Float64Array]"] = u["[object Int8Array]"] = u["[object Int16Array]"] = u["[object Int32Array]"] = u["[object Uint8Array]"] = u["[object Uint8ClampedArray]"] = u["[object Uint16Array]"] = u["[object Uint32Array]"] = !0, 
          u[o] = u["[object Array]"] = u["[object ArrayBuffer]"] = u["[object Boolean]"] = u["[object DataView]"] = u["[object Date]"] = u["[object Error]"] = u[s] = u["[object Map]"] = u["[object Number]"] = u[a] = u["[object RegExp]"] = u["[object Set]"] = u["[object String]"] = u["[object WeakMap]"] = !1;
          var h = "object" == typeof r.g && r.g && r.g.Object === Object && r.g, d = "object" == typeof self && self && self.Object === Object && self, l = h || d || Function("return this")(), p = t && !t.nodeType && t, b = p && e && !e.nodeType && e, y = b && b.exports === p, g = y && h.process, m = function() {
            try {
              return b && b.require && b.require("util").types || g && g.binding && g.binding("util");
            } catch (e) {}
          }(), v = m && m.isTypedArray;
          function w(e, t, r) {
            switch (r.length) {
             case 0:
              return e.call(t);

             case 1:
              return e.call(t, r[0]);

             case 2:
              return e.call(t, r[0], r[1]);

             case 3:
              return e.call(t, r[0], r[1], r[2]);
            }
            return e.apply(t, r);
          }
          var _, S, E, A = Array.prototype, x = Function.prototype, k = Object.prototype, P = l["__core-js_shared__"], O = x.toString, M = k.hasOwnProperty, I = (_ = /[^.]+$/.exec(P && P.keys && P.keys.IE_PROTO || "")) ? "Symbol(src)_1." + _ : "", T = k.toString, R = O.call(Object), C = RegExp("^" + O.call(M).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), N = y ? l.Buffer : void 0, j = l.Symbol, B = l.Uint8Array, L = (N && N.allocUnsafe, 
          S = Object.getPrototypeOf, E = Object, function(e) {
            return S(E(e));
          }), D = Object.create, U = k.propertyIsEnumerable, q = A.splice, F = j ? j.toStringTag : void 0, H = function() {
            try {
              var e = ce(Object, "defineProperty");
              return e({}, "", {}), e;
            } catch (e) {}
          }(), z = N ? N.isBuffer : void 0, K = Math.max, V = Date.now, G = ce(l, "Map"), W = ce(Object, "create"), X = function() {
            function e() {}
            return function(t) {
              if (!we(t)) return {};
              if (D) return D(t);
              e.prototype = t;
              var r = new e;
              return e.prototype = void 0, r;
            };
          }();
          function Y(e) {
            var t = -1, r = null == e ? 0 : e.length;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function J(e) {
            var t = -1, r = null == e ? 0 : e.length;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function $(e) {
            var t = -1, r = null == e ? 0 : e.length;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function Z(e) {
            var t = this.__data__ = new J(e);
            this.size = t.size;
          }
          function Q(e, t, r) {
            (void 0 !== r && !le(e[t], r) || void 0 === r && !(t in e)) && re(e, t, r);
          }
          function ee(e, t, r) {
            var n = e[t];
            M.call(e, t) && le(n, r) && (void 0 !== r || t in e) || re(e, t, r);
          }
          function te(e, t) {
            for (var r = e.length; r--; ) if (le(e[r][0], t)) return r;
            return -1;
          }
          function re(e, t, r) {
            "__proto__" == t && H ? H(e, t, {
              configurable: !0,
              enumerable: !0,
              value: r,
              writable: !0
            }) : e[t] = r;
          }
          function ne(e) {
            return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : F && F in Object(e) ? function(e) {
              var t = M.call(e, F), r = e[F];
              try {
                e[F] = void 0;
                var n = !0;
              } catch (e) {}
              var i = T.call(e);
              return n && (t ? e[F] = r : delete e[F]), i;
            }(e) : function(e) {
              return T.call(e);
            }(e);
          }
          function ie(e) {
            return _e(e) && ne(e) == o;
          }
          function oe(e, t, r, n, i) {
            e !== t && function(e, t, r) {
              for (var n = -1, i = Object(e), o = r(e), s = o.length; s--; ) {
                var a = o[++n];
                if (!1 === t(i[a], a)) break;
              }
            }(t, (function(o, s) {
              if (i || (i = new Z), we(o)) !function(e, t, r, n, i, o, s) {
                var c = he(e, r), f = he(t, r), u = s.get(f);
                if (u) Q(e, r, u); else {
                  var h, d, l, p, b, y = o ? o(c, f, r + "", e, t, s) : void 0, g = void 0 === y;
                  if (g) {
                    var m = be(f), v = !m && ge(f), w = !m && !v && Se(f);
                    y = f, m || v || w ? be(c) ? y = c : _e(b = c) && ye(b) ? y = function(e, t) {
                      var r = -1, n = e.length;
                      for (t || (t = Array(n)); ++r < n; ) t[r] = e[r];
                      return t;
                    }(c) : v ? (g = !1, y = function(e, t) {
                      return e.slice();
                    }(f)) : w ? (g = !1, p = new (l = (h = f).buffer).constructor(l.byteLength), new B(p).set(new B(l)), d = p, y = new h.constructor(d, h.byteOffset, h.length)) : y = [] : function(e) {
                      if (!_e(e) || ne(e) != a) return !1;
                      var t = L(e);
                      if (null === t) return !0;
                      var r = M.call(t, "constructor") && t.constructor;
                      return "function" == typeof r && r instanceof r && O.call(r) == R;
                    }(f) || pe(f) ? (y = c, pe(c) ? y = function(e) {
                      return function(e, t, r, n) {
                        var i = !r;
                        r || (r = {});
                        for (var o = -1, s = t.length; ++o < s; ) {
                          var a = t[o], c = void 0;
                          void 0 === c && (c = e[a]), i ? re(r, a, c) : ee(r, a, c);
                        }
                        return r;
                      }(e, Ee(e));
                    }(c) : we(c) && !me(c) || (y = function(e) {
                      return "function" != typeof e.constructor || ue(e) ? {} : X(L(e));
                    }(f))) : g = !1;
                  }
                  g && (s.set(f, y), i(y, f, n, o, s), s.delete(f)), Q(e, r, y);
                }
              }(e, t, s, r, oe, n, i); else {
                var c = n ? n(he(e, s), o, s + "", e, t, i) : void 0;
                void 0 === c && (c = o), Q(e, s, c);
              }
            }), Ee);
          }
          Y.prototype.clear = function() {
            this.__data__ = W ? W(null) : {}, this.size = 0;
          }, Y.prototype.delete = function(e) {
            var t = this.has(e) && delete this.__data__[e];
            return this.size -= t ? 1 : 0, t;
          }, Y.prototype.get = function(e) {
            var t = this.__data__;
            if (W) {
              var r = t[e];
              return r === n ? void 0 : r;
            }
            return M.call(t, e) ? t[e] : void 0;
          }, Y.prototype.has = function(e) {
            var t = this.__data__;
            return W ? void 0 !== t[e] : M.call(t, e);
          }, Y.prototype.set = function(e, t) {
            var r = this.__data__;
            return this.size += this.has(e) ? 0 : 1, r[e] = W && void 0 === t ? n : t, this;
          }, J.prototype.clear = function() {
            this.__data__ = [], this.size = 0;
          }, J.prototype.delete = function(e) {
            var t = this.__data__, r = te(t, e);
            return !(r < 0 || (r == t.length - 1 ? t.pop() : q.call(t, r, 1), --this.size, 0));
          }, J.prototype.get = function(e) {
            var t = this.__data__, r = te(t, e);
            return r < 0 ? void 0 : t[r][1];
          }, J.prototype.has = function(e) {
            return te(this.__data__, e) > -1;
          }, J.prototype.set = function(e, t) {
            var r = this.__data__, n = te(r, e);
            return n < 0 ? (++this.size, r.push([ e, t ])) : r[n][1] = t, this;
          }, $.prototype.clear = function() {
            this.size = 0, this.__data__ = {
              hash: new Y,
              map: new (G || J),
              string: new Y
            };
          }, $.prototype.delete = function(e) {
            var t = ae(this, e).delete(e);
            return this.size -= t ? 1 : 0, t;
          }, $.prototype.get = function(e) {
            return ae(this, e).get(e);
          }, $.prototype.has = function(e) {
            return ae(this, e).has(e);
          }, $.prototype.set = function(e, t) {
            var r = ae(this, e), n = r.size;
            return r.set(e, t), this.size += r.size == n ? 0 : 1, this;
          }, Z.prototype.clear = function() {
            this.__data__ = new J, this.size = 0;
          }, Z.prototype.delete = function(e) {
            var t = this.__data__, r = t.delete(e);
            return this.size = t.size, r;
          }, Z.prototype.get = function(e) {
            return this.__data__.get(e);
          }, Z.prototype.has = function(e) {
            return this.__data__.has(e);
          }, Z.prototype.set = function(e, t) {
            var r = this.__data__;
            if (r instanceof J) {
              var n = r.__data__;
              if (!G || n.length < 199) return n.push([ e, t ]), this.size = ++r.size, this;
              r = this.__data__ = new $(n);
            }
            return r.set(e, t), this.size = r.size, this;
          };
          var se = H ? function(e, t) {
            return H(e, "toString", {
              configurable: !0,
              enumerable: !1,
              value: (r = t, function() {
                return r;
              }),
              writable: !0
            });
            var r;
          } : ke;
          function ae(e, t) {
            var r, n, i = e.__data__;
            return ("string" == (n = typeof (r = t)) || "number" == n || "symbol" == n || "boolean" == n ? "__proto__" !== r : null === r) ? i["string" == typeof t ? "string" : "hash"] : i.map;
          }
          function ce(e, t) {
            var r = function(e, t) {
              return null == e ? void 0 : e[t];
            }(e, t);
            return function(e) {
              return !(!we(e) || function(e) {
                return !!I && I in e;
              }(e)) && (me(e) ? C : c).test(function(e) {
                if (null != e) {
                  try {
                    return O.call(e);
                  } catch (e) {}
                  try {
                    return e + "";
                  } catch (e) {}
                }
                return "";
              }(e));
            }(r) ? r : void 0;
          }
          function fe(e, t) {
            var r = typeof e;
            return !!(t = null == t ? i : t) && ("number" == r || "symbol" != r && f.test(e)) && e > -1 && e % 1 == 0 && e < t;
          }
          function ue(e) {
            var t = e && e.constructor;
            return e === ("function" == typeof t && t.prototype || k);
          }
          function he(e, t) {
            if (("constructor" !== t || "function" != typeof e[t]) && "__proto__" != t) return e[t];
          }
          var de = function(e) {
            var t = 0, r = 0;
            return function() {
              var n = V(), i = 16 - (n - r);
              if (r = n, i > 0) {
                if (++t >= 800) return arguments[0];
              } else t = 0;
              return e.apply(void 0, arguments);
            };
          }(se);
          function le(e, t) {
            return e === t || e != e && t != t;
          }
          var pe = ie(function() {
            return arguments;
          }()) ? ie : function(e) {
            return _e(e) && M.call(e, "callee") && !U.call(e, "callee");
          }, be = Array.isArray;
          function ye(e) {
            return null != e && ve(e.length) && !me(e);
          }
          var ge = z || function() {
            return !1;
          };
          function me(e) {
            if (!we(e)) return !1;
            var t = ne(e);
            return t == s || "[object GeneratorFunction]" == t || "[object AsyncFunction]" == t || "[object Proxy]" == t;
          }
          function ve(e) {
            return "number" == typeof e && e > -1 && e % 1 == 0 && e <= i;
          }
          function we(e) {
            var t = typeof e;
            return null != e && ("object" == t || "function" == t);
          }
          function _e(e) {
            return null != e && "object" == typeof e;
          }
          var Se = v ? function(e) {
            return function(t) {
              return e(t);
            };
          }(v) : function(e) {
            return _e(e) && ve(e.length) && !!u[ne(e)];
          };
          function Ee(e) {
            return ye(e) ? function(e, t) {
              var r = be(e), n = !r && pe(e), i = !r && !n && ge(e), o = !r && !n && !i && Se(e), s = r || n || i || o, a = s ? function(e, t) {
                for (var r = -1, n = Array(e); ++r < e; ) n[r] = t(r);
                return n;
              }(e.length, String) : [], c = a.length;
              for (var f in e) s && ("length" == f || i && ("offset" == f || "parent" == f) || o && ("buffer" == f || "byteLength" == f || "byteOffset" == f) || fe(f, c)) || a.push(f);
              return a;
            }(e) : function(e) {
              if (!we(e)) return function(e) {
                var t = [];
                if (null != e) for (var r in Object(e)) t.push(r);
                return t;
              }(e);
              var t = ue(e), r = [];
              for (var n in e) ("constructor" != n || !t && M.call(e, n)) && r.push(n);
              return r;
            }(e);
          }
          var Ae, xe = (Ae = function(e, t, r) {
            oe(e, t, r);
          }, function(e, t) {
            return de(function(e, t, r) {
              return t = K(void 0 === t ? e.length - 1 : t, 0), function() {
                for (var n = arguments, i = -1, o = K(n.length - t, 0), s = Array(o); ++i < o; ) s[i] = n[t + i];
                i = -1;
                for (var a = Array(t + 1); ++i < t; ) a[i] = n[i];
                return a[t] = r(s), w(e, this, a);
              };
            }(e, void 0, ke), e + "");
          }((function(e, t) {
            var r = -1, n = t.length, i = n > 1 ? t[n - 1] : void 0, o = n > 2 ? t[2] : void 0;
            for (i = Ae.length > 3 && "function" == typeof i ? (n--, i) : void 0, o && function(e, t, r) {
              if (!we(r)) return !1;
              var n = typeof t;
              return !!("number" == n ? ye(r) && fe(t, r.length) : "string" == n && t in r) && le(r[t], e);
            }(t[0], t[1], o) && (i = n < 3 ? void 0 : i, n = 1), e = Object(e); ++r < n; ) {
              var s = t[r];
              s && Ae(e, s, r);
            }
            return e;
          })));
          function ke(e) {
            return e;
          }
          e.exports = xe;
        },
        2043: function(e, t, r) {
          var i, o;
          !function(s, a) {
            "use strict";
            i = function() {
              var e = function() {}, t = "undefined", r = typeof window !== t && typeof window.navigator !== t && /Trident\/|MSIE /.test(window.navigator.userAgent), i = [ "trace", "debug", "info", "warn", "error" ];
              function o(e, t) {
                var r = e[t];
                if ("function" == typeof r.bind) return r.bind(e);
                try {
                  return Function.prototype.bind.call(r, e);
                } catch (t) {
                  return function() {
                    return Function.prototype.apply.apply(r, [ e, arguments ]);
                  };
                }
              }
              function s() {
                n.log && (n.log.apply ? n.log.apply(n, arguments) : Function.prototype.apply.apply(n.log, [ n, arguments ])), n.trace && n.trace();
              }
              function a(i) {
                return "debug" === i && (i = "log"), typeof n !== t && ("trace" === i && r ? s : void 0 !== n[i] ? o(n, i) : void 0 !== n.log ? o(n, "log") : e);
              }
              function c(t, r) {
                for (var n = 0; n < i.length; n++) {
                  var o = i[n];
                  this[o] = n < t ? e : this.methodFactory(o, t, r);
                }
                this.log = this.debug;
              }
              function f(e, r, i) {
                return function() {
                  typeof n !== t && (c.call(this, r, i), this[e].apply(this, arguments));
                };
              }
              function u(e, t, r) {
                return a(e) || f.apply(this, arguments);
              }
              function h(e, r, o) {
                var s, a = this;
                r = null == r ? "WARN" : r;
                var f = "loglevel";
                function h() {
                  var e;
                  if (typeof window !== t && f) {
                    try {
                      e = window.localStorage[f];
                    } catch (e) {}
                    if (typeof e === t) try {
                      var r = window.document.cookie, n = r.indexOf(encodeURIComponent(f) + "=");
                      -1 !== n && (e = /^([^;]+)/.exec(r.slice(n))[1]);
                    } catch (e) {}
                    return void 0 === a.levels[e] && (e = void 0), e;
                  }
                }
                "string" == typeof e ? f += ":" + e : "symbol" == typeof e && (f = void 0), a.name = e, a.levels = {
                  TRACE: 0,
                  DEBUG: 1,
                  INFO: 2,
                  WARN: 3,
                  ERROR: 4,
                  SILENT: 5
                }, a.methodFactory = o || u, a.getLevel = function() {
                  return s;
                }, a.setLevel = function(r, o) {
                  if ("string" == typeof r && void 0 !== a.levels[r.toUpperCase()] && (r = a.levels[r.toUpperCase()]), !("number" == typeof r && r >= 0 && r <= a.levels.SILENT)) throw "log.setLevel() called with invalid level: " + r;
                  if (s = r, !1 !== o && function(e) {
                    var r = (i[e] || "silent").toUpperCase();
                    if (typeof window !== t && f) {
                      try {
                        return void (window.localStorage[f] = r);
                      } catch (e) {}
                      try {
                        window.document.cookie = encodeURIComponent(f) + "=" + r + ";";
                      } catch (e) {}
                    }
                  }(r), c.call(a, r, e), typeof n === t && r < a.levels.SILENT) return "No console available for logging";
                }, a.setDefaultLevel = function(e) {
                  r = e, h() || a.setLevel(e, !1);
                }, a.resetLevel = function() {
                  a.setLevel(r, !1), function() {
                    if (typeof window !== t && f) {
                      try {
                        return void window.localStorage.removeItem(f);
                      } catch (e) {}
                      try {
                        window.document.cookie = encodeURIComponent(f) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                      } catch (e) {}
                    }
                  }();
                }, a.enableAll = function(e) {
                  a.setLevel(a.levels.TRACE, e);
                }, a.disableAll = function(e) {
                  a.setLevel(a.levels.SILENT, e);
                };
                var d = h();
                null == d && (d = r), a.setLevel(d, !1);
              }
              var d = new h, l = {};
              d.getLogger = function(e) {
                if ("symbol" != typeof e && "string" != typeof e || "" === e) throw new TypeError("You must supply a name when creating a logger.");
                var t = l[e];
                return t || (t = l[e] = new h(e, d.getLevel(), d.methodFactory)), t;
              };
              var p = typeof window !== t ? window.log : void 0;
              return d.noConflict = function() {
                return typeof window !== t && window.log === d && (window.log = p), d;
              }, d.getLoggers = function() {
                return l;
              }, d.default = d, d;
            }, void 0 === (o = i.call(t, r, t, e)) || (e.exports = o);
          }();
        },
        2318: (e, t, r) => {
          "use strict";
          var n = r(5717), i = r(3349), o = r(9509).Buffer, s = new Array(16);
          function a() {
            i.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
          }
          function c(e, t) {
            return e << t | e >>> 32 - t;
          }
          function f(e, t, r, n, i, o, s) {
            return c(e + (t & r | ~t & n) + i + o | 0, s) + t | 0;
          }
          function u(e, t, r, n, i, o, s) {
            return c(e + (t & n | r & ~n) + i + o | 0, s) + t | 0;
          }
          function h(e, t, r, n, i, o, s) {
            return c(e + (t ^ r ^ n) + i + o | 0, s) + t | 0;
          }
          function d(e, t, r, n, i, o, s) {
            return c(e + (r ^ (t | ~n)) + i + o | 0, s) + t | 0;
          }
          n(a, i), a.prototype._update = function() {
            for (var e = s, t = 0; t < 16; ++t) e[t] = this._block.readInt32LE(4 * t);
            var r = this._a, n = this._b, i = this._c, o = this._d;
            r = f(r, n, i, o, e[0], 3614090360, 7), o = f(o, r, n, i, e[1], 3905402710, 12), i = f(i, o, r, n, e[2], 606105819, 17), 
            n = f(n, i, o, r, e[3], 3250441966, 22), r = f(r, n, i, o, e[4], 4118548399, 7), o = f(o, r, n, i, e[5], 1200080426, 12), 
            i = f(i, o, r, n, e[6], 2821735955, 17), n = f(n, i, o, r, e[7], 4249261313, 22), r = f(r, n, i, o, e[8], 1770035416, 7), 
            o = f(o, r, n, i, e[9], 2336552879, 12), i = f(i, o, r, n, e[10], 4294925233, 17), n = f(n, i, o, r, e[11], 2304563134, 22), 
            r = f(r, n, i, o, e[12], 1804603682, 7), o = f(o, r, n, i, e[13], 4254626195, 12), i = f(i, o, r, n, e[14], 2792965006, 17), 
            r = u(r, n = f(n, i, o, r, e[15], 1236535329, 22), i, o, e[1], 4129170786, 5), o = u(o, r, n, i, e[6], 3225465664, 9), i = u(i, o, r, n, e[11], 643717713, 14), 
            n = u(n, i, o, r, e[0], 3921069994, 20), r = u(r, n, i, o, e[5], 3593408605, 5), o = u(o, r, n, i, e[10], 38016083, 9), 
            i = u(i, o, r, n, e[15], 3634488961, 14), n = u(n, i, o, r, e[4], 3889429448, 20), r = u(r, n, i, o, e[9], 568446438, 5), 
            o = u(o, r, n, i, e[14], 3275163606, 9), i = u(i, o, r, n, e[3], 4107603335, 14), n = u(n, i, o, r, e[8], 1163531501, 20), 
            r = u(r, n, i, o, e[13], 2850285829, 5), o = u(o, r, n, i, e[2], 4243563512, 9), i = u(i, o, r, n, e[7], 1735328473, 14), 
            r = h(r, n = u(n, i, o, r, e[12], 2368359562, 20), i, o, e[5], 4294588738, 4), o = h(o, r, n, i, e[8], 2272392833, 11), 
            i = h(i, o, r, n, e[11], 1839030562, 16), n = h(n, i, o, r, e[14], 4259657740, 23), r = h(r, n, i, o, e[1], 2763975236, 4), 
            o = h(o, r, n, i, e[4], 1272893353, 11), i = h(i, o, r, n, e[7], 4139469664, 16), n = h(n, i, o, r, e[10], 3200236656, 23), 
            r = h(r, n, i, o, e[13], 681279174, 4), o = h(o, r, n, i, e[0], 3936430074, 11), i = h(i, o, r, n, e[3], 3572445317, 16), 
            n = h(n, i, o, r, e[6], 76029189, 23), r = h(r, n, i, o, e[9], 3654602809, 4), o = h(o, r, n, i, e[12], 3873151461, 11), 
            i = h(i, o, r, n, e[15], 530742520, 16), r = d(r, n = h(n, i, o, r, e[2], 3299628645, 23), i, o, e[0], 4096336452, 6), o = d(o, r, n, i, e[7], 1126891415, 10), 
            i = d(i, o, r, n, e[14], 2878612391, 15), n = d(n, i, o, r, e[5], 4237533241, 21), r = d(r, n, i, o, e[12], 1700485571, 6), 
            o = d(o, r, n, i, e[3], 2399980690, 10), i = d(i, o, r, n, e[10], 4293915773, 15), n = d(n, i, o, r, e[1], 2240044497, 21), 
            r = d(r, n, i, o, e[8], 1873313359, 6), o = d(o, r, n, i, e[15], 4264355552, 10), i = d(i, o, r, n, e[6], 2734768916, 15), 
            n = d(n, i, o, r, e[13], 1309151649, 21), r = d(r, n, i, o, e[4], 4149444226, 6), o = d(o, r, n, i, e[11], 3174756917, 10), 
            i = d(i, o, r, n, e[2], 718787259, 15), n = d(n, i, o, r, e[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + n | 0, 
            this._c = this._c + i | 0, this._d = this._d + o | 0;
          }, a.prototype._digest = function() {
            this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), 
            this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), 
            this._update();
            var e = o.allocUnsafe(16);
            return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), 
            e;
          }, e.exports = a;
        },
        3047: (e, t, r) => {
          var n = r(3550), i = r(9931);
          function o(e) {
            this.rand = e || new i.Rand;
          }
          e.exports = o, o.create = function(e) {
            return new o(e);
          }, o.prototype._randbelow = function(e) {
            var t = e.bitLength(), r = Math.ceil(t / 8);
            do {
              var i = new n(this.rand.generate(r));
            } while (i.cmp(e) >= 0);
            return i;
          }, o.prototype._randrange = function(e, t) {
            var r = t.sub(e);
            return e.add(this._randbelow(r));
          }, o.prototype.test = function(e, t, r) {
            var i = e.bitLength(), o = n.mont(e), s = new n(1).toRed(o);
            t || (t = Math.max(1, i / 48 | 0));
            for (var a = e.subn(1), c = 0; !a.testn(c); c++) ;
            for (var f = e.shrn(c), u = a.toRed(o); t > 0; t--) {
              var h = this._randrange(new n(2), a);
              r && r(h);
              var d = h.toRed(o).redPow(f);
              if (0 !== d.cmp(s) && 0 !== d.cmp(u)) {
                for (var l = 1; l < c; l++) {
                  if (0 === (d = d.redSqr()).cmp(s)) return !1;
                  if (0 === d.cmp(u)) break;
                }
                if (l === c) return !1;
              }
            }
            return !0;
          }, o.prototype.getDivisor = function(e, t) {
            var r = e.bitLength(), i = n.mont(e), o = new n(1).toRed(i);
            t || (t = Math.max(1, r / 48 | 0));
            for (var s = e.subn(1), a = 0; !s.testn(a); a++) ;
            for (var c = e.shrn(a), f = s.toRed(i); t > 0; t--) {
              var u = this._randrange(new n(2), s), h = e.gcd(u);
              if (0 !== h.cmpn(1)) return h;
              var d = u.toRed(i).redPow(c);
              if (0 !== d.cmp(o) && 0 !== d.cmp(f)) {
                for (var l = 1; l < a; l++) {
                  if (0 === (d = d.redSqr()).cmp(o)) return d.fromRed().subn(1).gcd(e);
                  if (0 === d.cmp(f)) break;
                }
                if (l === a) return (d = d.redSqr()).fromRed().subn(1).gcd(e);
              }
            }
            return !1;
          };
        },
        9746: e => {
          function t(e, t) {
            if (!e) throw new Error(t || "Assertion failed");
          }
          e.exports = t, t.equal = function(e, t, r) {
            if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
          };
        },
        4504: (e, t) => {
          "use strict";
          var r = t;
          function n(e) {
            return 1 === e.length ? "0" + e : e;
          }
          function i(e) {
            for (var t = "", r = 0; r < e.length; r++) t += n(e[r].toString(16));
            return t;
          }
          r.toArray = function(e, t) {
            if (Array.isArray(e)) return e.slice();
            if (!e) return [];
            var r = [];
            if ("string" != typeof e) {
              for (var n = 0; n < e.length; n++) r[n] = 0 | e[n];
              return r;
            }
            if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2) r.push(parseInt(e[n] + e[n + 1], 16)); else for (n = 0; n < e.length; n++) {
              var i = e.charCodeAt(n), o = i >> 8, s = 255 & i;
              o ? r.push(o, s) : r.push(s);
            }
            return r;
          }, r.zero2 = n, r.toHex = i, r.encode = function(e, t) {
            return "hex" === t ? i(e) : e;
          };
        },
        3206: (e, t, r) => {
          var n = r(3550), i = r(9604);
          e.exports = function(e) {
            if ("string" == typeof e || "number" == typeof e) {
              var t = new n(1), r = String(e).toLowerCase().trim(), o = "0x" === r.substr(0, 2) || "-0x" === r.substr(0, 3), s = i(r);
              if ("-" === s.substr(0, 1) && (s = i(s.slice(1)), t = new n(-1, 10)), !(s = "" === s ? "0" : s).match(/^-?[0-9]+$/) && s.match(/^[0-9A-Fa-f]+$/) || s.match(/^[a-fA-F]+$/) || !0 === o && s.match(/^[0-9A-Fa-f]+$/)) return new n(s, 16).mul(t);
              if ((s.match(/^-?[0-9]+$/) || "" === s) && !1 === o) return new n(s, 10).mul(t);
            } else if ("object" == typeof e && e.toString && !e.pop && !e.push && e.toString(10).match(/^-?[0-9]+$/) && (e.mul || e.dividedToIntegerBy)) return new n(e.toString(10), 10);
            throw new Error("[number-to-bn] while converting number " + JSON.stringify(e) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
          };
        },
        4244: e => {
          "use strict";
          var t = function(e) {
            return e != e;
          };
          e.exports = function(e, r) {
            return 0 === e && 0 === r ? 1 / e == 1 / r : e === r || !(!t(e) || !t(r));
          };
        },
        609: (e, t, r) => {
          "use strict";
          var n = r(4289), i = r(5559), o = r(4244), s = r(5624), a = r(2281), c = i(s(), Object);
          n(c, {
            getPolyfill: s,
            implementation: o,
            shim: a
          }), e.exports = c;
        },
        5624: (e, t, r) => {
          "use strict";
          var n = r(4244);
          e.exports = function() {
            return "function" == typeof Object.is ? Object.is : n;
          };
        },
        2281: (e, t, r) => {
          "use strict";
          var n = r(5624), i = r(4289);
          e.exports = function() {
            var e = n();
            return i(Object, {
              is: e
            }, {
              is: function() {
                return Object.is !== e;
              }
            }), e;
          };
        },
        8987: (e, t, r) => {
          "use strict";
          var n;
          if (!Object.keys) {
            var i = Object.prototype.hasOwnProperty, o = Object.prototype.toString, s = r(1414), a = Object.prototype.propertyIsEnumerable, c = !a.call({
              toString: null
            }, "toString"), f = a.call((function() {}), "prototype"), u = [ "toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor" ], h = function(e) {
              var t = e.constructor;
              return t && t.prototype === e;
            }, d = {
              $applicationCache: !0,
              $console: !0,
              $external: !0,
              $frame: !0,
              $frameElement: !0,
              $frames: !0,
              $innerHeight: !0,
              $innerWidth: !0,
              $onmozfullscreenchange: !0,
              $onmozfullscreenerror: !0,
              $outerHeight: !0,
              $outerWidth: !0,
              $pageXOffset: !0,
              $pageYOffset: !0,
              $parent: !0,
              $scrollLeft: !0,
              $scrollTop: !0,
              $scrollX: !0,
              $scrollY: !0,
              $self: !0,
              $webkitIndexedDB: !0,
              $webkitStorageInfo: !0,
              $window: !0
            }, l = function() {
              if ("undefined" == typeof window) return !1;
              for (var e in window) try {
                if (!d["$" + e] && i.call(window, e) && null !== window[e] && "object" == typeof window[e]) try {
                  h(window[e]);
                } catch (e) {
                  return !0;
                }
              } catch (e) {
                return !0;
              }
              return !1;
            }();
            n = function(e) {
              var t = null !== e && "object" == typeof e, r = "[object Function]" === o.call(e), n = s(e), a = t && "[object String]" === o.call(e), d = [];
              if (!t && !r && !n) throw new TypeError("Object.keys called on a non-object");
              var p = f && r;
              if (a && e.length > 0 && !i.call(e, 0)) for (var b = 0; b < e.length; ++b) d.push(String(b));
              if (n && e.length > 0) for (var y = 0; y < e.length; ++y) d.push(String(y)); else for (var g in e) p && "prototype" === g || !i.call(e, g) || d.push(String(g));
              if (c) for (var m = function(e) {
                if ("undefined" == typeof window || !l) return h(e);
                try {
                  return h(e);
                } catch (e) {
                  return !1;
                }
              }(e), v = 0; v < u.length; ++v) m && "constructor" === u[v] || !i.call(e, u[v]) || d.push(u[v]);
              return d;
            };
          }
          e.exports = n;
        },
        2215: (e, t, r) => {
          "use strict";
          var n = Array.prototype.slice, i = r(1414), o = Object.keys, s = o ? function(e) {
            return o(e);
          } : r(8987), a = Object.keys;
          s.shim = function() {
            if (Object.keys) {
              var e = function() {
                var e = Object.keys(arguments);
                return e && e.length === arguments.length;
              }(1, 2);
              e || (Object.keys = function(e) {
                return i(e) ? a(n.call(e)) : a(e);
              });
            } else Object.keys = s;
            return Object.keys || s;
          }, e.exports = s;
        },
        1414: e => {
          "use strict";
          var t = Object.prototype.toString;
          e.exports = function(e) {
            var r = t.call(e), n = "[object Arguments]" === r;
            return n || (n = "[object Array]" !== r && null !== e && "object" == typeof e && "number" == typeof e.length && e.length >= 0 && "[object Function]" === t.call(e.callee)), 
            n;
          };
        },
        778: (e, t, r) => {
          var n = r(2479);
          function i(e) {
            var t = function() {
              return t.called ? t.value : (t.called = !0, t.value = e.apply(this, arguments));
            };
            return t.called = !1, t;
          }
          function o(e) {
            var t = function() {
              if (t.called) throw new Error(t.onceError);
              return t.called = !0, t.value = e.apply(this, arguments);
            }, r = e.name || "Function wrapped with `once`";
            return t.onceError = r + " shouldn't be called more than once", t.called = !1, t;
          }
          e.exports = n(i), e.exports.strict = n(o), i.proto = i((function() {
            Object.defineProperty(Function.prototype, "once", {
              value: function() {
                return i(this);
              },
              configurable: !0
            }), Object.defineProperty(Function.prototype, "onceStrict", {
              value: function() {
                return o(this);
              },
              configurable: !0
            });
          }));
        },
        7435: (e, t) => {
          t.endianness = function() {
            return "LE";
          }, t.hostname = function() {
            return "undefined" != typeof location ? location.hostname : "";
          }, t.loadavg = function() {
            return [];
          }, t.uptime = function() {
            return 0;
          }, t.freemem = function() {
            return Number.MAX_VALUE;
          }, t.totalmem = function() {
            return Number.MAX_VALUE;
          }, t.cpus = function() {
            return [];
          }, t.type = function() {
            return "Browser";
          }, t.release = function() {
            return "undefined" != typeof navigator ? navigator.appVersion : "";
          }, t.networkInterfaces = t.getNetworkInterfaces = function() {
            return {};
          }, t.arch = function() {
            return "javascript";
          }, t.platform = function() {
            return "browser";
          }, t.tmpdir = t.tmpDir = function() {
            return "/tmp";
          }, t.EOL = "\n", t.homedir = function() {
            return "/";
          };
        },
        2818: (e, t, r) => {
          "use strict";
          var n = r(9809);
          t.certificate = r(1934);
          var i = n.define("RSAPrivateKey", (function() {
            this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
          }));
          t.RSAPrivateKey = i;
          var o = n.define("RSAPublicKey", (function() {
            this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
          }));
          t.RSAPublicKey = o;
          var s = n.define("SubjectPublicKeyInfo", (function() {
            this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
          }));
          t.PublicKey = s;
          var a = n.define("AlgorithmIdentifier", (function() {
            this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
          })), c = n.define("PrivateKeyInfo", (function() {
            this.seq().obj(this.key("version").int(), this.key("algorithm").use(a), this.key("subjectPrivateKey").octstr());
          }));
          t.PrivateKey = c;
          var f = n.define("EncryptedPrivateKeyInfo", (function() {
            this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
          }));
          t.EncryptedPrivateKey = f;
          var u = n.define("DSAPrivateKey", (function() {
            this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
          }));
          t.DSAPrivateKey = u, t.DSAparam = n.define("DSAparam", (function() {
            this.int();
          }));
          var h = n.define("ECPrivateKey", (function() {
            this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(d), this.key("publicKey").optional().explicit(1).bitstr());
          }));
          t.ECPrivateKey = h;
          var d = n.define("ECParameters", (function() {
            this.choice({
              namedCurve: this.objid()
            });
          }));
          t.signature = n.define("signature", (function() {
            this.seq().obj(this.key("r").int(), this.key("s").int());
          }));
        },
        1934: (e, t, r) => {
          "use strict";
          var n = r(9809), i = n.define("Time", (function() {
            this.choice({
              utcTime: this.utctime(),
              generalTime: this.gentime()
            });
          })), o = n.define("AttributeTypeValue", (function() {
            this.seq().obj(this.key("type").objid(), this.key("value").any());
          })), s = n.define("AlgorithmIdentifier", (function() {
            this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
          })), a = n.define("SubjectPublicKeyInfo", (function() {
            this.seq().obj(this.key("algorithm").use(s), this.key("subjectPublicKey").bitstr());
          })), c = n.define("RelativeDistinguishedName", (function() {
            this.setof(o);
          })), f = n.define("RDNSequence", (function() {
            this.seqof(c);
          })), u = n.define("Name", (function() {
            this.choice({
              rdnSequence: this.use(f)
            });
          })), h = n.define("Validity", (function() {
            this.seq().obj(this.key("notBefore").use(i), this.key("notAfter").use(i));
          })), d = n.define("Extension", (function() {
            this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(!1), this.key("extnValue").octstr());
          })), l = n.define("TBSCertificate", (function() {
            this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(s), this.key("issuer").use(u), this.key("validity").use(h), this.key("subject").use(u), this.key("subjectPublicKeyInfo").use(a), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(d).optional());
          })), p = n.define("X509Certificate", (function() {
            this.seq().obj(this.key("tbsCertificate").use(l), this.key("signatureAlgorithm").use(s), this.key("signatureValue").bitstr());
          }));
          e.exports = p;
        },
        7631: (e, t, r) => {
          var n = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, i = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, o = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, s = r(3048), a = r(4696), c = r(9509).Buffer;
          e.exports = function(e, t) {
            var r, f = e.toString(), u = f.match(n);
            if (u) {
              var h = "aes" + u[1], d = c.from(u[2], "hex"), l = c.from(u[3].replace(/[\r\n]/g, ""), "base64"), p = s(t, d.slice(0, 8), parseInt(u[1], 10)).key, b = [], y = a.createDecipheriv(h, p, d);
              b.push(y.update(l)), b.push(y.final()), r = c.concat(b);
            } else {
              var g = f.match(o);
              r = c.from(g[2].replace(/[\r\n]/g, ""), "base64");
            }
            return {
              tag: f.match(i)[1],
              data: r
            };
          };
        },
        980: (e, t, r) => {
          var n = r(2818), i = r(2562), o = r(7631), s = r(4696), a = r(5632), c = r(9509).Buffer;
          function f(e) {
            var t;
            "object" != typeof e || c.isBuffer(e) || (t = e.passphrase, e = e.key), "string" == typeof e && (e = c.from(e));
            var r, f, u = o(e, t), h = u.tag, d = u.data;
            switch (h) {
             case "CERTIFICATE":
              f = n.certificate.decode(d, "der").tbsCertificate.subjectPublicKeyInfo;

             case "PUBLIC KEY":
              switch (f || (f = n.PublicKey.decode(d, "der")), r = f.algorithm.algorithm.join(".")) {
               case "1.2.840.113549.1.1.1":
                return n.RSAPublicKey.decode(f.subjectPublicKey.data, "der");

               case "1.2.840.10045.2.1":
                return f.subjectPrivateKey = f.subjectPublicKey, {
                  type: "ec",
                  data: f
                };

               case "1.2.840.10040.4.1":
                return f.algorithm.params.pub_key = n.DSAparam.decode(f.subjectPublicKey.data, "der"), {
                  type: "dsa",
                  data: f.algorithm.params
                };

               default:
                throw new Error("unknown key id " + r);
              }

             case "ENCRYPTED PRIVATE KEY":
              d = function(e, t) {
                var r = e.algorithm.decrypt.kde.kdeparams.salt, n = parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), o = i[e.algorithm.decrypt.cipher.algo.join(".")], f = e.algorithm.decrypt.cipher.iv, u = e.subjectPrivateKey, h = parseInt(o.split("-")[1], 10) / 8, d = a.pbkdf2Sync(t, r, n, h, "sha1"), l = s.createDecipheriv(o, d, f), p = [];
                return p.push(l.update(u)), p.push(l.final()), c.concat(p);
              }(d = n.EncryptedPrivateKey.decode(d, "der"), t);

             case "PRIVATE KEY":
              switch (r = (f = n.PrivateKey.decode(d, "der")).algorithm.algorithm.join(".")) {
               case "1.2.840.113549.1.1.1":
                return n.RSAPrivateKey.decode(f.subjectPrivateKey, "der");

               case "1.2.840.10045.2.1":
                return {
                  curve: f.algorithm.curve,
                  privateKey: n.ECPrivateKey.decode(f.subjectPrivateKey, "der").privateKey
                };

               case "1.2.840.10040.4.1":
                return f.algorithm.params.priv_key = n.DSAparam.decode(f.subjectPrivateKey, "der"), {
                  type: "dsa",
                  params: f.algorithm.params
                };

               default:
                throw new Error("unknown key id " + r);
              }

             case "RSA PUBLIC KEY":
              return n.RSAPublicKey.decode(d, "der");

             case "RSA PRIVATE KEY":
              return n.RSAPrivateKey.decode(d, "der");

             case "DSA PRIVATE KEY":
              return {
                type: "dsa",
                params: n.DSAPrivateKey.decode(d, "der")
              };

             case "EC PRIVATE KEY":
              return {
                curve: (d = n.ECPrivateKey.decode(d, "der")).parameters.value,
                privateKey: d.privateKey
              };

             default:
              throw new Error("unknown key type " + h);
            }
          }
          e.exports = f, f.signature = n.signature;
        },
        5632: (e, t, r) => {
          t.pbkdf2 = r(8638), t.pbkdf2Sync = r(1257);
        },
        8638: (e, t, r) => {
          var n, i, o = r(9509).Buffer, s = r(7357), a = r(2368), c = r(1257), f = r(7777), u = r.g.crypto && r.g.crypto.subtle, h = {
            sha: "SHA-1",
            "sha-1": "SHA-1",
            sha1: "SHA-1",
            sha256: "SHA-256",
            "sha-256": "SHA-256",
            sha384: "SHA-384",
            "sha-384": "SHA-384",
            "sha-512": "SHA-512",
            sha512: "SHA-512"
          }, d = [];
          function l() {
            return i || (i = r.g.process && r.g.process.nextTick ? r.g.process.nextTick : r.g.queueMicrotask ? r.g.queueMicrotask : r.g.setImmediate ? r.g.setImmediate : r.g.setTimeout);
          }
          function p(e, t, r, n, i) {
            return u.importKey("raw", e, {
              name: "PBKDF2"
            }, !1, [ "deriveBits" ]).then((function(e) {
              return u.deriveBits({
                name: "PBKDF2",
                salt: t,
                iterations: r,
                hash: {
                  name: i
                }
              }, e, n << 3);
            })).then((function(e) {
              return o.from(e);
            }));
          }
          e.exports = function(e, t, i, b, y, g) {
            "function" == typeof y && (g = y, y = void 0);
            var m = h[(y = y || "sha1").toLowerCase()];
            if (m && "function" == typeof r.g.Promise) {
              if (s(i, b), e = f(e, a, "Password"), t = f(t, a, "Salt"), "function" != typeof g) throw new Error("No callback provided to pbkdf2");
              !function(e, t) {
                e.then((function(e) {
                  l()((function() {
                    t(null, e);
                  }));
                }), (function(e) {
                  l()((function() {
                    t(e);
                  }));
                }));
              }(function(e) {
                if (r.g.process && !r.g.process.browser) return Promise.resolve(!1);
                if (!u || !u.importKey || !u.deriveBits) return Promise.resolve(!1);
                if (void 0 !== d[e]) return d[e];
                var t = p(n = n || o.alloc(8), n, 10, 128, e).then((function() {
                  return !0;
                })).catch((function() {
                  return !1;
                }));
                return d[e] = t, t;
              }(m).then((function(r) {
                return r ? p(e, t, i, b, m) : c(e, t, i, b, y);
              })), g);
            } else l()((function() {
              var r;
              try {
                r = c(e, t, i, b, y);
              } catch (e) {
                return g(e);
              }
              g(null, r);
            }));
          };
        },
        2368: (e, t, r) => {
          var n, i = r(4155);
          n = r.g.process && r.g.process.browser ? "utf-8" : r.g.process && r.g.process.version ? parseInt(i.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary" : "utf-8", 
          e.exports = n;
        },
        7357: e => {
          var t = Math.pow(2, 30) - 1;
          e.exports = function(e, r) {
            if ("number" != typeof e) throw new TypeError("Iterations not a number");
            if (e < 0) throw new TypeError("Bad iterations");
            if ("number" != typeof r) throw new TypeError("Key length not a number");
            if (r < 0 || r > t || r != r) throw new TypeError("Bad key length");
          };
        },
        1257: (e, t, r) => {
          var n = r(8028), i = r(9785), o = r(9072), s = r(9509).Buffer, a = r(7357), c = r(2368), f = r(7777), u = s.alloc(128), h = {
            md5: 16,
            sha1: 20,
            sha224: 28,
            sha256: 32,
            sha384: 48,
            sha512: 64,
            rmd160: 20,
            ripemd160: 20
          };
          function d(e, t, r) {
            var a = function(e) {
              return "rmd160" === e || "ripemd160" === e ? function(e) {
                return (new i).update(e).digest();
              } : "md5" === e ? n : function(t) {
                return o(e).update(t).digest();
              };
            }(e), c = "sha512" === e || "sha384" === e ? 128 : 64;
            t.length > c ? t = a(t) : t.length < c && (t = s.concat([ t, u ], c));
            for (var f = s.allocUnsafe(c + h[e]), d = s.allocUnsafe(c + h[e]), l = 0; l < c; l++) f[l] = 54 ^ t[l], d[l] = 92 ^ t[l];
            var p = s.allocUnsafe(c + r + 4);
            f.copy(p, 0, 0, c), this.ipad1 = p, this.ipad2 = f, this.opad = d, this.alg = e, this.blocksize = c, this.hash = a, this.size = h[e];
          }
          d.prototype.run = function(e, t) {
            return e.copy(t, this.blocksize), this.hash(t).copy(this.opad, this.blocksize), this.hash(this.opad);
          }, e.exports = function(e, t, r, n, i) {
            a(r, n);
            var o = new d(i = i || "sha1", e = f(e, c, "Password"), (t = f(t, c, "Salt")).length), u = s.allocUnsafe(n), l = s.allocUnsafe(t.length + 4);
            t.copy(l, 0, 0, t.length);
            for (var p = 0, b = h[i], y = Math.ceil(n / b), g = 1; g <= y; g++) {
              l.writeUInt32BE(g, t.length);
              for (var m = o.run(l, o.ipad1), v = m, w = 1; w < r; w++) {
                v = o.run(v, o.ipad2);
                for (var _ = 0; _ < b; _++) m[_] ^= v[_];
              }
              m.copy(u, p), p += b;
            }
            return u;
          };
        },
        7777: (e, t, r) => {
          var n = r(9509).Buffer;
          e.exports = function(e, t, r) {
            if (n.isBuffer(e)) return e;
            if ("string" == typeof e) return n.from(e, t);
            if (ArrayBuffer.isView(e)) return n.from(e.buffer);
            throw new TypeError(r + " must be a string, a Buffer, a typed array or a DataView");
          };
        },
        8212: (e, t, r) => {
          "use strict";
          var n = r(4155);
          void 0 === n || !n.version || 0 === n.version.indexOf("v0.") || 0 === n.version.indexOf("v1.") && 0 !== n.version.indexOf("v1.8.") ? e.exports = {
            nextTick: function(e, t, r, i) {
              if ("function" != typeof e) throw new TypeError('"callback" argument must be a function');
              var o, s, a = arguments.length;
              switch (a) {
               case 0:
               case 1:
                return n.nextTick(e);

               case 2:
                return n.nextTick((function() {
                  e.call(null, t);
                }));

               case 3:
                return n.nextTick((function() {
                  e.call(null, t, r);
                }));

               case 4:
                return n.nextTick((function() {
                  e.call(null, t, r, i);
                }));

               default:
                for (o = new Array(a - 1), s = 0; s < o.length; ) o[s++] = arguments[s];
                return n.nextTick((function() {
                  e.apply(null, o);
                }));
              }
            }
          } : e.exports = n;
        },
        4155: e => {
          var t, r, n = e.exports = {};
          function i() {
            throw new Error("setTimeout has not been defined");
          }
          function o() {
            throw new Error("clearTimeout has not been defined");
          }
          function s(e) {
            if (t === setTimeout) return setTimeout(e, 0);
            if ((t === i || !t) && setTimeout) return t = setTimeout, setTimeout(e, 0);
            try {
              return t(e, 0);
            } catch (r) {
              try {
                return t.call(null, e, 0);
              } catch (r) {
                return t.call(this, e, 0);
              }
            }
          }
          !function() {
            try {
              t = "function" == typeof setTimeout ? setTimeout : i;
            } catch (e) {
              t = i;
            }
            try {
              r = "function" == typeof clearTimeout ? clearTimeout : o;
            } catch (e) {
              r = o;
            }
          }();
          var a, c = [], f = !1, u = -1;
          function h() {
            f && a && (f = !1, a.length ? c = a.concat(c) : u = -1, c.length && d());
          }
          function d() {
            if (!f) {
              var e = s(h);
              f = !0;
              for (var t = c.length; t; ) {
                for (a = c, c = []; ++u < t; ) a && a[u].run();
                u = -1, t = c.length;
              }
              a = null, f = !1, function(e) {
                if (r === clearTimeout) return clearTimeout(e);
                if ((r === o || !r) && clearTimeout) return r = clearTimeout, clearTimeout(e);
                try {
                  r(e);
                } catch (t) {
                  try {
                    return r.call(null, e);
                  } catch (t) {
                    return r.call(this, e);
                  }
                }
              }(e);
            }
          }
          function l(e, t) {
            this.fun = e, this.array = t;
          }
          function p() {}
          n.nextTick = function(e) {
            var t = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
            c.push(new l(e, t)), 1 !== c.length || f || s(d);
          }, l.prototype.run = function() {
            this.fun.apply(null, this.array);
          }, n.title = "browser", n.browser = !0, n.env = {}, n.argv = [], n.version = "", n.versions = {}, n.on = p, n.addListener = p, 
          n.once = p, n.off = p, n.removeListener = p, n.removeAllListeners = p, n.emit = p, n.prependListener = p, n.prependOnceListener = p, 
          n.listeners = function(e) {
            return [];
          }, n.binding = function(e) {
            throw new Error("process.binding is not supported");
          }, n.cwd = function() {
            return "/";
          }, n.chdir = function(e) {
            throw new Error("process.chdir is not supported");
          }, n.umask = function() {
            return 0;
          };
        },
        7900: (e, t, r) => {
          t.publicEncrypt = r(6559), t.privateDecrypt = r(6138), t.privateEncrypt = function(e, r) {
            return t.publicEncrypt(e, r, !0);
          }, t.publicDecrypt = function(e, r) {
            return t.privateDecrypt(e, r, !0);
          };
        },
        9199: (e, t, r) => {
          var n = r(3482), i = r(9509).Buffer;
          function o(e) {
            var t = i.allocUnsafe(4);
            return t.writeUInt32BE(e, 0), t;
          }
          e.exports = function(e, t) {
            for (var r, s = i.alloc(0), a = 0; s.length < t; ) r = o(a++), s = i.concat([ s, n("sha1").update(e).update(r).digest() ]);
            return s.slice(0, t);
          };
        },
        6138: (e, t, r) => {
          var n = r(980), i = r(9199), o = r(7859), s = r(3550), a = r(3663), c = r(3482), f = r(4818), u = r(9509).Buffer;
          e.exports = function(e, t, r) {
            var h;
            h = e.padding ? e.padding : r ? 1 : 4;
            var d, l = n(e), p = l.modulus.byteLength();
            if (t.length > p || new s(t).cmp(l.modulus) >= 0) throw new Error("decryption error");
            d = r ? f(new s(t), l) : a(t, l);
            var b = u.alloc(p - d.length);
            if (d = u.concat([ b, d ], p), 4 === h) return function(e, t) {
              var r = e.modulus.byteLength(), n = c("sha1").update(u.alloc(0)).digest(), s = n.length;
              if (0 !== t[0]) throw new Error("decryption error");
              var a = t.slice(1, s + 1), f = t.slice(s + 1), h = o(a, i(f, s)), d = o(f, i(h, r - s - 1));
              if (function(e, t) {
                e = u.from(e), t = u.from(t);
                var r = 0, n = e.length;
                e.length !== t.length && (r++, n = Math.min(e.length, t.length));
                for (var i = -1; ++i < n; ) r += e[i] ^ t[i];
                return r;
              }(n, d.slice(0, s))) throw new Error("decryption error");
              for (var l = s; 0 === d[l]; ) l++;
              if (1 !== d[l++]) throw new Error("decryption error");
              return d.slice(l);
            }(l, d);
            if (1 === h) return function(e, t, r) {
              for (var n = t.slice(0, 2), i = 2, o = 0; 0 !== t[i++]; ) if (i >= t.length) {
                o++;
                break;
              }
              var s = t.slice(2, i - 1);
              if (("0002" !== n.toString("hex") && !r || "0001" !== n.toString("hex") && r) && o++, s.length < 8 && o++, o) throw new Error("decryption error");
              return t.slice(i);
            }(0, d, r);
            if (3 === h) return d;
            throw new Error("unknown padding");
          };
        },
        6559: (e, t, r) => {
          var n = r(980), i = r(1798), o = r(3482), s = r(9199), a = r(7859), c = r(3550), f = r(4818), u = r(3663), h = r(9509).Buffer;
          e.exports = function(e, t, r) {
            var d;
            d = e.padding ? e.padding : r ? 1 : 4;
            var l, p = n(e);
            if (4 === d) l = function(e, t) {
              var r = e.modulus.byteLength(), n = t.length, f = o("sha1").update(h.alloc(0)).digest(), u = f.length, d = 2 * u;
              if (n > r - d - 2) throw new Error("message too long");
              var l = h.alloc(r - n - d - 2), p = r - u - 1, b = i(u), y = a(h.concat([ f, l, h.alloc(1, 1), t ], p), s(b, p)), g = a(b, s(y, u));
              return new c(h.concat([ h.alloc(1), g, y ], r));
            }(p, t); else if (1 === d) l = function(e, t, r) {
              var n, o = t.length, s = e.modulus.byteLength();
              if (o > s - 11) throw new Error("message too long");
              return n = r ? h.alloc(s - o - 3, 255) : function(e) {
                for (var t, r = h.allocUnsafe(e), n = 0, o = i(2 * e), s = 0; n < e; ) s === o.length && (o = i(2 * e), s = 0), (t = o[s++]) && (r[n++] = t);
                return r;
              }(s - o - 3), new c(h.concat([ h.from([ 0, r ? 1 : 2 ]), n, h.alloc(1), t ], s));
            }(p, t, r); else {
              if (3 !== d) throw new Error("unknown padding");
              if ((l = new c(t)).cmp(p.modulus) >= 0) throw new Error("data too long for modulus");
            }
            return r ? u(l, p) : f(l, p);
          };
        },
        4818: (e, t, r) => {
          var n = r(3550), i = r(9509).Buffer;
          e.exports = function(e, t) {
            return i.from(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray());
          };
        },
        7859: e => {
          e.exports = function(e, t) {
            for (var r = e.length, n = -1; ++n < r; ) e[n] ^= t[n];
            return e;
          };
        },
        4286: (e, t, r) => {
          var n = r(4155), i = r(778), o = r(2840), s = r(1156), a = function() {}, c = /^v?\.0/.test(n.version), f = function(e) {
            return "function" == typeof e;
          }, u = function(e, t, r, n) {
            n = i(n);
            var u = !1;
            e.on("close", (function() {
              u = !0;
            })), o(e, {
              readable: t,
              writable: r
            }, (function(e) {
              if (e) return n(e);
              u = !0, n();
            }));
            var h = !1;
            return function(t) {
              if (!u && !h) return h = !0, function(e) {
                return !!c && !!s && (e instanceof (s.ReadStream || a) || e instanceof (s.WriteStream || a)) && f(e.close);
              }(e) ? e.close(a) : function(e) {
                return e.setHeader && f(e.abort);
              }(e) ? e.abort() : f(e.destroy) ? e.destroy() : void n(t || new Error("stream was destroyed"));
            };
          }, h = function(e) {
            e();
          }, d = function(e, t) {
            return e.pipe(t);
          };
          e.exports = function() {
            var e, t = Array.prototype.slice.call(arguments), r = f(t[t.length - 1] || a) && t.pop() || a;
            if (Array.isArray(t[0]) && (t = t[0]), t.length < 2) throw new Error("pump requires two streams per minimum");
            var n = t.map((function(i, o) {
              var s = o < t.length - 1;
              return u(i, s, o > 0, (function(t) {
                e || (e = t), t && n.forEach(h), s || (n.forEach(h), r(e));
              }));
            }));
            return t.reduce(d);
          };
        },
        2587: e => {
          "use strict";
          function t(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          e.exports = function(e, r, n, i) {
            r = r || "&", n = n || "=";
            var o = {};
            if ("string" != typeof e || 0 === e.length) return o;
            var s = /\+/g;
            e = e.split(r);
            var a = 1e3;
            i && "number" == typeof i.maxKeys && (a = i.maxKeys);
            var c = e.length;
            a > 0 && c > a && (c = a);
            for (var f = 0; f < c; ++f) {
              var u, h, d, l, p = e[f].replace(s, "%20"), b = p.indexOf(n);
              b >= 0 ? (u = p.substr(0, b), h = p.substr(b + 1)) : (u = p, h = ""), d = decodeURIComponent(u), l = decodeURIComponent(h), 
              t(o, d) ? Array.isArray(o[d]) ? o[d].push(l) : o[d] = [ o[d], l ] : o[d] = l;
            }
            return o;
          };
        },
        2182: e => {
          "use strict";
          var t = function(e) {
            switch (typeof e) {
             case "string":
              return e;

             case "boolean":
              return e ? "true" : "false";

             case "number":
              return isFinite(e) ? e : "";

             default:
              return "";
            }
          };
          e.exports = function(e, r, n, i) {
            return r = r || "&", n = n || "=", null === e && (e = void 0), "object" == typeof e ? Object.keys(e).map((function(i) {
              var o = encodeURIComponent(t(i)) + n;
              return Array.isArray(e[i]) ? e[i].map((function(e) {
                return o + encodeURIComponent(t(e));
              })).join(r) : o + encodeURIComponent(t(e[i]));
            })).join(r) : i ? encodeURIComponent(t(i)) + n + encodeURIComponent(t(e)) : "";
          };
        },
        7673: (e, t, r) => {
          "use strict";
          t.decode = t.parse = r(2587), t.encode = t.stringify = r(2182);
        },
        1798: (e, t, r) => {
          "use strict";
          var n = r(4155), i = 65536, o = r(9509).Buffer, s = r.g.crypto || r.g.msCrypto;
          s && s.getRandomValues ? e.exports = function(e, t) {
            if (e > 4294967295) throw new RangeError("requested too many random bytes");
            var r = o.allocUnsafe(e);
            if (e > 0) if (e > i) for (var a = 0; a < e; a += i) s.getRandomValues(r.slice(a, a + i)); else s.getRandomValues(r);
            return "function" == typeof t ? n.nextTick((function() {
              t(null, r);
            })) : r;
          } : e.exports = function() {
            throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
          };
        },
        7963: (e, t, r) => {
          "use strict";
          var n = r(4155);
          function i() {
            throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
          }
          var o = r(9509), s = r(1798), a = o.Buffer, c = o.kMaxLength, f = r.g.crypto || r.g.msCrypto, u = Math.pow(2, 32) - 1;
          function h(e, t) {
            if ("number" != typeof e || e != e) throw new TypeError("offset must be a number");
            if (e > u || e < 0) throw new TypeError("offset must be a uint32");
            if (e > c || e > t) throw new RangeError("offset out of range");
          }
          function d(e, t, r) {
            if ("number" != typeof e || e != e) throw new TypeError("size must be a number");
            if (e > u || e < 0) throw new TypeError("size must be a uint32");
            if (e + t > r || e > c) throw new RangeError("buffer too small");
          }
          function l(e, t, r, i) {
            if (n.browser) {
              var o = e.buffer, a = new Uint8Array(o, t, r);
              return f.getRandomValues(a), i ? void n.nextTick((function() {
                i(null, e);
              })) : e;
            }
            if (!i) return s(r).copy(e, t), e;
            s(r, (function(r, n) {
              if (r) return i(r);
              n.copy(e, t), i(null, e);
            }));
          }
          f && f.getRandomValues || !n.browser ? (t.randomFill = function(e, t, n, i) {
            if (!(a.isBuffer(e) || e instanceof r.g.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            if ("function" == typeof t) i = t, t = 0, n = e.length; else if ("function" == typeof n) i = n, n = e.length - t; else if ("function" != typeof i) throw new TypeError('"cb" argument must be a function');
            return h(t, e.length), d(n, t, e.length), l(e, t, n, i);
          }, t.randomFillSync = function(e, t, n) {
            if (void 0 === t && (t = 0), !(a.isBuffer(e) || e instanceof r.g.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            return h(t, e.length), void 0 === n && (n = e.length - t), d(n, t, e.length), l(e, t, n);
          }) : (t.randomFill = i, t.randomFillSync = i);
        },
        4281: e => {
          "use strict";
          var t = {};
          function r(e, r, n) {
            n || (n = Error);
            var i = function(e) {
              var t, n;
              function i(t, n, i) {
                return e.call(this, function(e, t, n) {
                  return "string" == typeof r ? r : r(e, t, n);
                }(t, n, i)) || this;
              }
              return n = e, (t = i).prototype = Object.create(n.prototype), t.prototype.constructor = t, t.__proto__ = n, i;
            }(n);
            i.prototype.name = n.name, i.prototype.code = e, t[e] = i;
          }
          function n(e, t) {
            if (Array.isArray(e)) {
              var r = e.length;
              return e = e.map((function(e) {
                return String(e);
              })), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
            }
            return "of ".concat(t, " ").concat(String(e));
          }
          r("ERR_INVALID_OPT_VALUE", (function(e, t) {
            return 'The value "' + t + '" is invalid for option "' + e + '"';
          }), TypeError), r("ERR_INVALID_ARG_TYPE", (function(e, t, r) {
            var i, o, s, a, c;
            if ("string" == typeof t && (o = "not ", t.substr(0, o.length) === o) ? (i = "must not be", t = t.replace(/^not /, "")) : i = "must be", 
            function(e, t, r) {
              return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
            }(e, " argument")) s = "The ".concat(e, " ").concat(i, " ").concat(n(t, "type")); else {
              var f = ("number" != typeof c && (c = 0), c + ".".length > (a = e).length || -1 === a.indexOf(".", c) ? "argument" : "property");
              s = 'The "'.concat(e, '" ').concat(f, " ").concat(i, " ").concat(n(t, "type"));
            }
            return s + ". Received type ".concat(typeof r);
          }), TypeError), r("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), r("ERR_METHOD_NOT_IMPLEMENTED", (function(e) {
            return "The " + e + " method is not implemented";
          })), r("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), r("ERR_STREAM_DESTROYED", (function(e) {
            return "Cannot call " + e + " after a stream was destroyed";
          })), r("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), r("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), 
          r("ERR_STREAM_WRITE_AFTER_END", "write after end"), r("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), 
          r("ERR_UNKNOWN_ENCODING", (function(e) {
            return "Unknown encoding: " + e;
          }), TypeError), r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), e.exports.q = t;
        },
        6753: (e, t, r) => {
          "use strict";
          var n = r(4155), i = Object.keys || function(e) {
            var t = [];
            for (var r in e) t.push(r);
            return t;
          };
          e.exports = u;
          var o = r(9481), s = r(4229);
          r(5717)(u, o);
          for (var a = i(s.prototype), c = 0; c < a.length; c++) {
            var f = a[c];
            u.prototype[f] || (u.prototype[f] = s.prototype[f]);
          }
          function u(e) {
            if (!(this instanceof u)) return new u(e);
            o.call(this, e), s.call(this, e), this.allowHalfOpen = !0, e && (!1 === e.readable && (this.readable = !1), !1 === e.writable && (this.writable = !1), 
            !1 === e.allowHalfOpen && (this.allowHalfOpen = !1, this.once("end", h)));
          }
          function h() {
            this._writableState.ended || n.nextTick(d, this);
          }
          function d(e) {
            e.end();
          }
          Object.defineProperty(u.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._writableState.highWaterMark;
            }
          }), Object.defineProperty(u.prototype, "writableBuffer", {
            enumerable: !1,
            get: function() {
              return this._writableState && this._writableState.getBuffer();
            }
          }), Object.defineProperty(u.prototype, "writableLength", {
            enumerable: !1,
            get: function() {
              return this._writableState.length;
            }
          }), Object.defineProperty(u.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
              return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function(e) {
              void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);
            }
          });
        },
        2725: (e, t, r) => {
          "use strict";
          e.exports = i;
          var n = r(4605);
          function i(e) {
            if (!(this instanceof i)) return new i(e);
            n.call(this, e);
          }
          r(5717)(i, n), i.prototype._transform = function(e, t, r) {
            r(null, e);
          };
        },
        9481: (e, t, r) => {
          "use strict";
          var n, i = r(4155);
          e.exports = x, x.ReadableState = A, r(7187).EventEmitter;
          var o, s = function(e, t) {
            return e.listeners(t).length;
          }, a = r(2503), c = r(8764).Buffer, f = r.g.Uint8Array || function() {}, u = r(4616);
          o = u && u.debuglog ? u.debuglog("stream") : function() {};
          var h, d, l, p = r(7327), b = r(1195), y = r(2457).getHighWaterMark, g = r(4281).q, m = g.ERR_INVALID_ARG_TYPE, v = g.ERR_STREAM_PUSH_AFTER_EOF, w = g.ERR_METHOD_NOT_IMPLEMENTED, _ = g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
          r(5717)(x, a);
          var S = b.errorOrDestroy, E = [ "error", "close", "destroy", "pause", "resume" ];
          function A(e, t, i) {
            n = n || r(6753), e = e || {}, "boolean" != typeof i && (i = t instanceof n), this.objectMode = !!e.objectMode, i && (this.objectMode = this.objectMode || !!e.readableObjectMode), 
            this.highWaterMark = y(this, e, "readableHighWaterMark", i), this.buffer = new p, this.length = 0, this.pipes = null, this.pipesCount = 0, 
            this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, 
            this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== e.emitClose, this.autoDestroy = !!e.autoDestroy, 
            this.destroyed = !1, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, 
            this.encoding = null, e.encoding && (h || (h = r(2553).s), this.decoder = new h(e.encoding), this.encoding = e.encoding);
          }
          function x(e) {
            if (n = n || r(6753), !(this instanceof x)) return new x(e);
            var t = this instanceof n;
            this._readableState = new A(e, this, t), this.readable = !0, e && ("function" == typeof e.read && (this._read = e.read), 
            "function" == typeof e.destroy && (this._destroy = e.destroy)), a.call(this);
          }
          function k(e, t, r, n, i) {
            o("readableAddChunk", t);
            var s, a = e._readableState;
            if (null === t) a.reading = !1, function(e, t) {
              if (o("onEofChunk"), !t.ended) {
                if (t.decoder) {
                  var r = t.decoder.end();
                  r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
                }
                t.ended = !0, t.sync ? I(e) : (t.needReadable = !1, t.emittedReadable || (t.emittedReadable = !0, T(e)));
              }
            }(e, a); else if (i || (s = function(e, t) {
              var r, n;
              return n = t, c.isBuffer(n) || n instanceof f || "string" == typeof t || void 0 === t || e.objectMode || (r = new m("chunk", [ "string", "Buffer", "Uint8Array" ], t)), 
              r;
            }(a, t)), s) S(e, s); else if (a.objectMode || t && t.length > 0) if ("string" == typeof t || a.objectMode || Object.getPrototypeOf(t) === c.prototype || (t = function(e) {
              return c.from(e);
            }(t)), n) a.endEmitted ? S(e, new _) : P(e, a, t, !0); else if (a.ended) S(e, new v); else {
              if (a.destroyed) return !1;
              a.reading = !1, a.decoder && !r ? (t = a.decoder.write(t), a.objectMode || 0 !== t.length ? P(e, a, t, !1) : R(e, a)) : P(e, a, t, !1);
            } else n || (a.reading = !1, R(e, a));
            return !a.ended && (a.length < a.highWaterMark || 0 === a.length);
          }
          function P(e, t, r, n) {
            t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0, e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length, 
            n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && I(e)), R(e, t);
          }
          Object.defineProperty(x.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
              return void 0 !== this._readableState && this._readableState.destroyed;
            },
            set: function(e) {
              this._readableState && (this._readableState.destroyed = e);
            }
          }), x.prototype.destroy = b.destroy, x.prototype._undestroy = b.undestroy, x.prototype._destroy = function(e, t) {
            t(e);
          }, x.prototype.push = function(e, t) {
            var r, n = this._readableState;
            return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = c.from(e, t), 
            t = ""), r = !0), k(this, e, t, !1, r);
          }, x.prototype.unshift = function(e) {
            return k(this, e, null, !0, !1);
          }, x.prototype.isPaused = function() {
            return !1 === this._readableState.flowing;
          }, x.prototype.setEncoding = function(e) {
            h || (h = r(2553).s);
            var t = new h(e);
            this._readableState.decoder = t, this._readableState.encoding = this._readableState.decoder.encoding;
            for (var n = this._readableState.buffer.head, i = ""; null !== n; ) i += t.write(n.data), n = n.next;
            return this._readableState.buffer.clear(), "" !== i && this._readableState.buffer.push(i), this._readableState.length = i.length, 
            this;
          };
          var O = 1073741824;
          function M(e, t) {
            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function(e) {
              return e >= O ? e = O : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
            }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));
          }
          function I(e) {
            var t = e._readableState;
            o("emitReadable", t.needReadable, t.emittedReadable), t.needReadable = !1, t.emittedReadable || (o("emitReadable", t.flowing), 
            t.emittedReadable = !0, i.nextTick(T, e));
          }
          function T(e) {
            var t = e._readableState;
            o("emitReadable_", t.destroyed, t.length, t.ended), t.destroyed || !t.length && !t.ended || (e.emit("readable"), t.emittedReadable = !1), 
            t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, L(e);
          }
          function R(e, t) {
            t.readingMore || (t.readingMore = !0, i.nextTick(C, e, t));
          }
          function C(e, t) {
            for (;!t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length); ) {
              var r = t.length;
              if (o("maybeReadMore read 0"), e.read(0), r === t.length) break;
            }
            t.readingMore = !1;
          }
          function N(e) {
            var t = e._readableState;
            t.readableListening = e.listenerCount("readable") > 0, t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount("data") > 0 && e.resume();
          }
          function j(e) {
            o("readable nexttick read 0"), e.read(0);
          }
          function B(e, t) {
            o("resume", t.reading), t.reading || e.read(0), t.resumeScheduled = !1, e.emit("resume"), L(e), t.flowing && !t.reading && e.read(0);
          }
          function L(e) {
            var t = e._readableState;
            for (o("flow", t.flowing); t.flowing && null !== e.read(); ) ;
          }
          function D(e, t) {
            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length), 
            t.buffer.clear()) : r = t.buffer.consume(e, t.decoder), r);
            var r;
          }
          function U(e) {
            var t = e._readableState;
            o("endReadable", t.endEmitted), t.endEmitted || (t.ended = !0, i.nextTick(q, t, e));
          }
          function q(e, t) {
            if (o("endReadableNT", e.endEmitted, e.length), !e.endEmitted && 0 === e.length && (e.endEmitted = !0, t.readable = !1, 
            t.emit("end"), e.autoDestroy)) {
              var r = t._writableState;
              (!r || r.autoDestroy && r.finished) && t.destroy();
            }
          }
          function F(e, t) {
            for (var r = 0, n = e.length; r < n; r++) if (e[r] === t) return r;
            return -1;
          }
          x.prototype.read = function(e) {
            o("read", e), e = parseInt(e, 10);
            var t = this._readableState, r = e;
            if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended)) return o("read: emitReadable", t.length, t.ended), 
            0 === t.length && t.ended ? U(this) : I(this), null;
            if (0 === (e = M(e, t)) && t.ended) return 0 === t.length && U(this), null;
            var n, i = t.needReadable;
            return o("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && o("length less than watermark", i = !0), 
            t.ended || t.reading ? o("reading or ended", i = !1) : i && (o("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), 
            this._read(t.highWaterMark), t.sync = !1, t.reading || (e = M(r, t))), null === (n = e > 0 ? D(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark, 
            e = 0) : (t.length -= e, t.awaitDrain = 0), 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && U(this)), 
            null !== n && this.emit("data", n), n;
          }, x.prototype._read = function(e) {
            S(this, new w("_read()"));
          }, x.prototype.pipe = function(e, t) {
            var r = this, n = this._readableState;
            switch (n.pipesCount) {
             case 0:
              n.pipes = e;
              break;

             case 1:
              n.pipes = [ n.pipes, e ];
              break;

             default:
              n.pipes.push(e);
            }
            n.pipesCount += 1, o("pipe count=%d opts=%j", n.pipesCount, t);
            var a = t && !1 === t.end || e === i.stdout || e === i.stderr ? b : c;
            function c() {
              o("onend"), e.end();
            }
            n.endEmitted ? i.nextTick(a) : r.once("end", a), e.on("unpipe", (function t(i, s) {
              o("onunpipe"), i === r && s && !1 === s.hasUnpiped && (s.hasUnpiped = !0, o("cleanup"), e.removeListener("close", l), e.removeListener("finish", p), 
              e.removeListener("drain", f), e.removeListener("error", d), e.removeListener("unpipe", t), r.removeListener("end", c), r.removeListener("end", b), 
              r.removeListener("data", h), u = !0, !n.awaitDrain || e._writableState && !e._writableState.needDrain || f());
            }));
            var f = function(e) {
              return function() {
                var t = e._readableState;
                o("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && s(e, "data") && (t.flowing = !0, L(e));
              };
            }(r);
            e.on("drain", f);
            var u = !1;
            function h(t) {
              o("ondata");
              var i = e.write(t);
              o("dest.write", i), !1 === i && ((1 === n.pipesCount && n.pipes === e || n.pipesCount > 1 && -1 !== F(n.pipes, e)) && !u && (o("false write response, pause", n.awaitDrain), 
              n.awaitDrain++), r.pause());
            }
            function d(t) {
              o("onerror", t), b(), e.removeListener("error", d), 0 === s(e, "error") && S(e, t);
            }
            function l() {
              e.removeListener("finish", p), b();
            }
            function p() {
              o("onfinish"), e.removeListener("close", l), b();
            }
            function b() {
              o("unpipe"), r.unpipe(e);
            }
            return r.on("data", h), function(e, t, r) {
              if ("function" == typeof e.prependListener) return e.prependListener(t, r);
              e._events && e._events.error ? Array.isArray(e._events.error) ? e._events.error.unshift(r) : e._events.error = [ r, e._events.error ] : e.on(t, r);
            }(e, "error", d), e.once("close", l), e.once("finish", p), e.emit("pipe", r), n.flowing || (o("pipe resume"), r.resume()), 
            e;
          }, x.prototype.unpipe = function(e) {
            var t = this._readableState, r = {
              hasUnpiped: !1
            };
            if (0 === t.pipesCount) return this;
            if (1 === t.pipesCount) return e && e !== t.pipes || (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, 
            e && e.emit("unpipe", this, r)), this;
            if (!e) {
              var n = t.pipes, i = t.pipesCount;
              t.pipes = null, t.pipesCount = 0, t.flowing = !1;
              for (var o = 0; o < i; o++) n[o].emit("unpipe", this, {
                hasUnpiped: !1
              });
              return this;
            }
            var s = F(t.pipes, e);
            return -1 === s || (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r)), 
            this;
          }, x.prototype.on = function(e, t) {
            var r = a.prototype.on.call(this, e, t), n = this._readableState;
            return "data" === e ? (n.readableListening = this.listenerCount("readable") > 0, !1 !== n.flowing && this.resume()) : "readable" === e && (n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, 
            n.flowing = !1, n.emittedReadable = !1, o("on readable", n.length, n.reading), n.length ? I(this) : n.reading || i.nextTick(j, this))), 
            r;
          }, x.prototype.addListener = x.prototype.on, x.prototype.removeListener = function(e, t) {
            var r = a.prototype.removeListener.call(this, e, t);
            return "readable" === e && i.nextTick(N, this), r;
          }, x.prototype.removeAllListeners = function(e) {
            var t = a.prototype.removeAllListeners.apply(this, arguments);
            return "readable" !== e && void 0 !== e || i.nextTick(N, this), t;
          }, x.prototype.resume = function() {
            var e = this._readableState;
            return e.flowing || (o("resume"), e.flowing = !e.readableListening, function(e, t) {
              t.resumeScheduled || (t.resumeScheduled = !0, i.nextTick(B, e, t));
            }(this, e)), e.paused = !1, this;
          }, x.prototype.pause = function() {
            return o("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (o("pause"), this._readableState.flowing = !1, 
            this.emit("pause")), this._readableState.paused = !0, this;
          }, x.prototype.wrap = function(e) {
            var t = this, r = this._readableState, n = !1;
            for (var i in e.on("end", (function() {
              if (o("wrapped end"), r.decoder && !r.ended) {
                var e = r.decoder.end();
                e && e.length && t.push(e);
              }
              t.push(null);
            })), e.on("data", (function(i) {
              o("wrapped data"), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i || (r.objectMode || i && i.length) && (t.push(i) || (n = !0, 
              e.pause()));
            })), e) void 0 === this[i] && "function" == typeof e[i] && (this[i] = function(t) {
              return function() {
                return e[t].apply(e, arguments);
              };
            }(i));
            for (var s = 0; s < E.length; s++) e.on(E[s], this.emit.bind(this, E[s]));
            return this._read = function(t) {
              o("wrapped _read", t), n && (n = !1, e.resume());
            }, this;
          }, "function" == typeof Symbol && (x.prototype[Symbol.asyncIterator] = function() {
            return void 0 === d && (d = r(5850)), d(this);
          }), Object.defineProperty(x.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._readableState.highWaterMark;
            }
          }), Object.defineProperty(x.prototype, "readableBuffer", {
            enumerable: !1,
            get: function() {
              return this._readableState && this._readableState.buffer;
            }
          }), Object.defineProperty(x.prototype, "readableFlowing", {
            enumerable: !1,
            get: function() {
              return this._readableState.flowing;
            },
            set: function(e) {
              this._readableState && (this._readableState.flowing = e);
            }
          }), x._fromList = D, Object.defineProperty(x.prototype, "readableLength", {
            enumerable: !1,
            get: function() {
              return this._readableState.length;
            }
          }), "function" == typeof Symbol && (x.from = function(e, t) {
            return void 0 === l && (l = r(5167)), l(x, e, t);
          });
        },
        4605: (e, t, r) => {
          "use strict";
          e.exports = u;
          var n = r(4281).q, i = n.ERR_METHOD_NOT_IMPLEMENTED, o = n.ERR_MULTIPLE_CALLBACK, s = n.ERR_TRANSFORM_ALREADY_TRANSFORMING, a = n.ERR_TRANSFORM_WITH_LENGTH_0, c = r(6753);
          function f(e, t) {
            var r = this._transformState;
            r.transforming = !1;
            var n = r.writecb;
            if (null === n) return this.emit("error", new o);
            r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);
            var i = this._readableState;
            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
          }
          function u(e) {
            if (!(this instanceof u)) return new u(e);
            c.call(this, e), this._transformState = {
              afterTransform: f.bind(this),
              needTransform: !1,
              transforming: !1,
              writecb: null,
              writechunk: null,
              writeencoding: null
            }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), 
            "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", h);
          }
          function h() {
            var e = this;
            "function" != typeof this._flush || this._readableState.destroyed ? d(this, null, null) : this._flush((function(t, r) {
              d(e, t, r);
            }));
          }
          function d(e, t, r) {
            if (t) return e.emit("error", t);
            if (null != r && e.push(r), e._writableState.length) throw new a;
            if (e._transformState.transforming) throw new s;
            return e.push(null);
          }
          r(5717)(u, c), u.prototype.push = function(e, t) {
            return this._transformState.needTransform = !1, c.prototype.push.call(this, e, t);
          }, u.prototype._transform = function(e, t, r) {
            r(new i("_transform()"));
          }, u.prototype._write = function(e, t, r) {
            var n = this._transformState;
            if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
              var i = this._readableState;
              (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
            }
          }, u.prototype._read = function(e) {
            var t = this._transformState;
            null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform));
          }, u.prototype._destroy = function(e, t) {
            c.prototype._destroy.call(this, e, (function(e) {
              t(e);
            }));
          };
        },
        4229: (e, t, r) => {
          "use strict";
          var n, i = r(4155);
          function o(e) {
            var t = this;
            this.next = null, this.entry = null, this.finish = function() {
              !function(e, t, r) {
                var n = e.entry;
                for (e.entry = null; n; ) {
                  var i = n.callback;
                  t.pendingcb--, i(void 0), n = n.next;
                }
                t.corkedRequestsFree.next = e;
              }(t, e);
            };
          }
          e.exports = x, x.WritableState = A;
          var s, a = {
            deprecate: r(4927)
          }, c = r(2503), f = r(8764).Buffer, u = r.g.Uint8Array || function() {}, h = r(1195), d = r(2457).getHighWaterMark, l = r(4281).q, p = l.ERR_INVALID_ARG_TYPE, b = l.ERR_METHOD_NOT_IMPLEMENTED, y = l.ERR_MULTIPLE_CALLBACK, g = l.ERR_STREAM_CANNOT_PIPE, m = l.ERR_STREAM_DESTROYED, v = l.ERR_STREAM_NULL_VALUES, w = l.ERR_STREAM_WRITE_AFTER_END, _ = l.ERR_UNKNOWN_ENCODING, S = h.errorOrDestroy;
          function E() {}
          function A(e, t, s) {
            n = n || r(6753), e = e || {}, "boolean" != typeof s && (s = t instanceof n), this.objectMode = !!e.objectMode, s && (this.objectMode = this.objectMode || !!e.writableObjectMode), 
            this.highWaterMark = d(this, e, "writableHighWaterMark", s), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, 
            this.ended = !1, this.finished = !1, this.destroyed = !1;
            var a = !1 === e.decodeStrings;
            this.decodeStrings = !a, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, 
            this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(e) {
              !function(e, t) {
                var r = e._writableState, n = r.sync, o = r.writecb;
                if ("function" != typeof o) throw new y;
                if (function(e) {
                  e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
                }(r), t) !function(e, t, r, n, o) {
                  --t.pendingcb, r ? (i.nextTick(o, n), i.nextTick(T, e, t), e._writableState.errorEmitted = !0, S(e, n)) : (o(n), e._writableState.errorEmitted = !0, 
                  S(e, n), T(e, t));
                }(e, r, n, t, o); else {
                  var s = M(r) || e.destroyed;
                  s || r.corked || r.bufferProcessing || !r.bufferedRequest || O(e, r), n ? i.nextTick(P, e, r, s, o) : P(e, r, s, o);
                }
              }(t, e);
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, 
            this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== e.emitClose, this.autoDestroy = !!e.autoDestroy, 
            this.bufferedRequestCount = 0, this.corkedRequestsFree = new o(this);
          }
          function x(e) {
            var t = this instanceof (n = n || r(6753));
            if (!t && !s.call(x, this)) return new x(e);
            this._writableState = new A(e, this, t), this.writable = !0, e && ("function" == typeof e.write && (this._write = e.write), 
            "function" == typeof e.writev && (this._writev = e.writev), "function" == typeof e.destroy && (this._destroy = e.destroy), 
            "function" == typeof e.final && (this._final = e.final)), c.call(this);
          }
          function k(e, t, r, n, i, o, s) {
            t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, t.destroyed ? t.onwrite(new m("write")) : r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), 
            t.sync = !1;
          }
          function P(e, t, r, n) {
            r || function(e, t) {
              0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));
            }(e, t), t.pendingcb--, n(), T(e, t);
          }
          function O(e, t) {
            t.bufferProcessing = !0;
            var r = t.bufferedRequest;
            if (e._writev && r && r.next) {
              var n = t.bufferedRequestCount, i = new Array(n), s = t.corkedRequestsFree;
              s.entry = r;
              for (var a = 0, c = !0; r; ) i[a] = r, r.isBuf || (c = !1), r = r.next, a += 1;
              i.allBuffers = c, k(e, t, !0, t.length, i, "", s.finish), t.pendingcb++, t.lastBufferedRequest = null, s.next ? (t.corkedRequestsFree = s.next, 
              s.next = null) : t.corkedRequestsFree = new o(t), t.bufferedRequestCount = 0;
            } else {
              for (;r; ) {
                var f = r.chunk, u = r.encoding, h = r.callback;
                if (k(e, t, !1, t.objectMode ? 1 : f.length, f, u, h), r = r.next, t.bufferedRequestCount--, t.writing) break;
              }
              null === r && (t.lastBufferedRequest = null);
            }
            t.bufferedRequest = r, t.bufferProcessing = !1;
          }
          function M(e) {
            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;
          }
          function I(e, t) {
            e._final((function(r) {
              t.pendingcb--, r && S(e, r), t.prefinished = !0, e.emit("prefinish"), T(e, t);
            }));
          }
          function T(e, t) {
            var r = M(t);
            if (r && (function(e, t) {
              t.prefinished || t.finalCalled || ("function" != typeof e._final || t.destroyed ? (t.prefinished = !0, e.emit("prefinish")) : (t.pendingcb++, 
              t.finalCalled = !0, i.nextTick(I, e, t)));
            }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"), t.autoDestroy))) {
              var n = e._readableState;
              (!n || n.autoDestroy && n.endEmitted) && e.destroy();
            }
            return r;
          }
          r(5717)(x, c), A.prototype.getBuffer = function() {
            for (var e = this.bufferedRequest, t = []; e; ) t.push(e), e = e.next;
            return t;
          }, function() {
            try {
              Object.defineProperty(A.prototype, "buffer", {
                get: a.deprecate((function() {
                  return this.getBuffer();
                }), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
              });
            } catch (e) {}
          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (s = Function.prototype[Symbol.hasInstance], 
          Object.defineProperty(x, Symbol.hasInstance, {
            value: function(e) {
              return !!s.call(this, e) || this === x && e && e._writableState instanceof A;
            }
          })) : s = function(e) {
            return e instanceof this;
          }, x.prototype.pipe = function() {
            S(this, new g);
          }, x.prototype.write = function(e, t, r) {
            var n, o = this._writableState, s = !1, a = !o.objectMode && (n = e, f.isBuffer(n) || n instanceof u);
            return a && !f.isBuffer(e) && (e = function(e) {
              return f.from(e);
            }(e)), "function" == typeof t && (r = t, t = null), a ? t = "buffer" : t || (t = o.defaultEncoding), "function" != typeof r && (r = E), 
            o.ending ? function(e, t) {
              var r = new w;
              S(e, r), i.nextTick(t, r);
            }(this, r) : (a || function(e, t, r, n) {
              var o;
              return null === r ? o = new v : "string" == typeof r || t.objectMode || (o = new p("chunk", [ "string", "Buffer" ], r)), 
              !o || (S(e, o), i.nextTick(n, o), !1);
            }(this, o, e, r)) && (o.pendingcb++, s = function(e, t, r, n, i, o) {
              if (!r) {
                var s = function(e, t, r) {
                  return e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = f.from(t, r)), t;
                }(t, n, i);
                n !== s && (r = !0, i = "buffer", n = s);
              }
              var a = t.objectMode ? 1 : n.length;
              t.length += a;
              var c = t.length < t.highWaterMark;
              if (c || (t.needDrain = !0), t.writing || t.corked) {
                var u = t.lastBufferedRequest;
                t.lastBufferedRequest = {
                  chunk: n,
                  encoding: i,
                  isBuf: r,
                  callback: o,
                  next: null
                }, u ? u.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
              } else k(e, t, !1, a, n, i, o);
              return c;
            }(this, o, a, e, t, r)), s;
          }, x.prototype.cork = function() {
            this._writableState.corked++;
          }, x.prototype.uncork = function() {
            var e = this._writableState;
            e.corked && (e.corked--, e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || O(this, e));
          }, x.prototype.setDefaultEncoding = function(e) {
            if ("string" == typeof e && (e = e.toLowerCase()), !([ "hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw" ].indexOf((e + "").toLowerCase()) > -1)) throw new _(e);
            return this._writableState.defaultEncoding = e, this;
          }, Object.defineProperty(x.prototype, "writableBuffer", {
            enumerable: !1,
            get: function() {
              return this._writableState && this._writableState.getBuffer();
            }
          }), Object.defineProperty(x.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._writableState.highWaterMark;
            }
          }), x.prototype._write = function(e, t, r) {
            r(new b("_write()"));
          }, x.prototype._writev = null, x.prototype.end = function(e, t, r) {
            var n = this._writableState;
            return "function" == typeof e ? (r = e, e = null, t = null) : "function" == typeof t && (r = t, t = null), null != e && this.write(e, t), 
            n.corked && (n.corked = 1, this.uncork()), n.ending || function(e, t, r) {
              t.ending = !0, T(e, t), r && (t.finished ? i.nextTick(r) : e.once("finish", r)), t.ended = !0, e.writable = !1;
            }(this, n, r), this;
          }, Object.defineProperty(x.prototype, "writableLength", {
            enumerable: !1,
            get: function() {
              return this._writableState.length;
            }
          }), Object.defineProperty(x.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
              return void 0 !== this._writableState && this._writableState.destroyed;
            },
            set: function(e) {
              this._writableState && (this._writableState.destroyed = e);
            }
          }), x.prototype.destroy = h.destroy, x.prototype._undestroy = h.undestroy, x.prototype._destroy = function(e, t) {
            t(e);
          };
        },
        5850: (e, t, r) => {
          "use strict";
          var n, i = r(4155);
          function o(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }
          var s = r(8610), a = Symbol("lastResolve"), c = Symbol("lastReject"), f = Symbol("error"), u = Symbol("ended"), h = Symbol("lastPromise"), d = Symbol("handlePromise"), l = Symbol("stream");
          function p(e, t) {
            return {
              value: e,
              done: t
            };
          }
          function b(e) {
            var t = e[a];
            if (null !== t) {
              var r = e[l].read();
              null !== r && (e[h] = null, e[a] = null, e[c] = null, t(p(r, !1)));
            }
          }
          function y(e) {
            i.nextTick(b, e);
          }
          var g = Object.getPrototypeOf((function() {})), m = Object.setPrototypeOf((o(n = {
            get stream() {
              return this[l];
            },
            next: function() {
              var e = this, t = this[f];
              if (null !== t) return Promise.reject(t);
              if (this[u]) return Promise.resolve(p(void 0, !0));
              if (this[l].destroyed) return new Promise((function(t, r) {
                i.nextTick((function() {
                  e[f] ? r(e[f]) : t(p(void 0, !0));
                }));
              }));
              var r, n = this[h];
              if (n) r = new Promise(function(e, t) {
                return function(r, n) {
                  e.then((function() {
                    t[u] ? r(p(void 0, !0)) : t[d](r, n);
                  }), n);
                };
              }(n, this)); else {
                var o = this[l].read();
                if (null !== o) return Promise.resolve(p(o, !1));
                r = new Promise(this[d]);
              }
              return this[h] = r, r;
            }
          }, Symbol.asyncIterator, (function() {
            return this;
          })), o(n, "return", (function() {
            var e = this;
            return new Promise((function(t, r) {
              e[l].destroy(null, (function(e) {
                e ? r(e) : t(p(void 0, !0));
              }));
            }));
          })), n), g);
          e.exports = function(e) {
            var t, r = Object.create(m, (o(t = {}, l, {
              value: e,
              writable: !0
            }), o(t, a, {
              value: null,
              writable: !0
            }), o(t, c, {
              value: null,
              writable: !0
            }), o(t, f, {
              value: null,
              writable: !0
            }), o(t, u, {
              value: e._readableState.endEmitted,
              writable: !0
            }), o(t, d, {
              value: function(e, t) {
                var n = r[l].read();
                n ? (r[h] = null, r[a] = null, r[c] = null, e(p(n, !1))) : (r[a] = e, r[c] = t);
              },
              writable: !0
            }), t));
            return r[h] = null, s(e, (function(e) {
              if (e && "ERR_STREAM_PREMATURE_CLOSE" !== e.code) {
                var t = r[c];
                return null !== t && (r[h] = null, r[a] = null, r[c] = null, t(e)), void (r[f] = e);
              }
              var n = r[a];
              null !== n && (r[h] = null, r[a] = null, r[c] = null, n(p(void 0, !0))), r[u] = !0;
            })), e.on("readable", y.bind(null, r)), r;
          };
        },
        7327: (e, t, r) => {
          "use strict";
          function n(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t && (n = n.filter((function(t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              }))), r.push.apply(r, n);
            }
            return r;
          }
          function i(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }
          var o = r(8764).Buffer, s = r(2361).inspect, a = s && s.custom || "inspect";
          e.exports = function() {
            function e() {
              !function(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
              }(this, e), this.head = null, this.tail = null, this.length = 0;
            }
            var t;
            return t = [ {
              key: "push",
              value: function(e) {
                var t = {
                  data: e,
                  next: null
                };
                this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;
              }
            }, {
              key: "unshift",
              value: function(e) {
                var t = {
                  data: e,
                  next: this.head
                };
                0 === this.length && (this.tail = t), this.head = t, ++this.length;
              }
            }, {
              key: "shift",
              value: function() {
                if (0 !== this.length) {
                  var e = this.head.data;
                  return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
                }
              }
            }, {
              key: "clear",
              value: function() {
                this.head = this.tail = null, this.length = 0;
              }
            }, {
              key: "join",
              value: function(e) {
                if (0 === this.length) return "";
                for (var t = this.head, r = "" + t.data; t = t.next; ) r += e + t.data;
                return r;
              }
            }, {
              key: "concat",
              value: function(e) {
                if (0 === this.length) return o.alloc(0);
                for (var t, r, n, i = o.allocUnsafe(e >>> 0), s = this.head, a = 0; s; ) t = s.data, r = i, n = a, o.prototype.copy.call(t, r, n), 
                a += s.data.length, s = s.next;
                return i;
              }
            }, {
              key: "consume",
              value: function(e, t) {
                var r;
                return e < this.head.data.length ? (r = this.head.data.slice(0, e), this.head.data = this.head.data.slice(e)) : r = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e), 
                r;
              }
            }, {
              key: "first",
              value: function() {
                return this.head.data;
              }
            }, {
              key: "_getString",
              value: function(e) {
                var t = this.head, r = 1, n = t.data;
                for (e -= n.length; t = t.next; ) {
                  var i = t.data, o = e > i.length ? i.length : e;
                  if (o === i.length ? n += i : n += i.slice(0, e), 0 == (e -= o)) {
                    o === i.length ? (++r, t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t, t.data = i.slice(o));
                    break;
                  }
                  ++r;
                }
                return this.length -= r, n;
              }
            }, {
              key: "_getBuffer",
              value: function(e) {
                var t = o.allocUnsafe(e), r = this.head, n = 1;
                for (r.data.copy(t), e -= r.data.length; r = r.next; ) {
                  var i = r.data, s = e > i.length ? i.length : e;
                  if (i.copy(t, t.length - e, 0, s), 0 == (e -= s)) {
                    s === i.length ? (++n, r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r, r.data = i.slice(s));
                    break;
                  }
                  ++n;
                }
                return this.length -= n, t;
              }
            }, {
              key: a,
              value: function(e, t) {
                return s(this, function(e) {
                  for (var t = 1; t < arguments.length; t++) {
                    var r = null != arguments[t] ? arguments[t] : {};
                    t % 2 ? n(Object(r), !0).forEach((function(t) {
                      i(e, t, r[t]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach((function(t) {
                      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
                    }));
                  }
                  return e;
                }({}, t, {
                  depth: 0,
                  customInspect: !1
                }));
              }
            } ], t && function(e, t) {
              for (var r = 0; r < t.length; r++) {
                var n = t[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
              }
            }(e.prototype, t), e;
          }();
        },
        1195: (e, t, r) => {
          "use strict";
          var n = r(4155);
          function i(e, t) {
            s(e, t), o(e);
          }
          function o(e) {
            e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");
          }
          function s(e, t) {
            e.emit("error", t);
          }
          e.exports = {
            destroy: function(e, t) {
              var r = this, a = this._readableState && this._readableState.destroyed, c = this._writableState && this._writableState.destroyed;
              return a || c ? (t ? t(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, 
              n.nextTick(s, this, e)) : n.nextTick(s, this, e)), this) : (this._readableState && (this._readableState.destroyed = !0), 
              this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, (function(e) {
                !t && e ? r._writableState ? r._writableState.errorEmitted ? n.nextTick(o, r) : (r._writableState.errorEmitted = !0, n.nextTick(i, r, e)) : n.nextTick(i, r, e) : t ? (n.nextTick(o, r), 
                t(e)) : n.nextTick(o, r);
              })), this);
            },
            undestroy: function() {
              this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, 
              this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, 
              this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, 
              this._writableState.errorEmitted = !1);
            },
            errorOrDestroy: function(e, t) {
              var r = e._readableState, n = e._writableState;
              r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);
            }
          };
        },
        8610: (e, t, r) => {
          "use strict";
          var n = r(4281).q.ERR_STREAM_PREMATURE_CLOSE;
          function i() {}
          e.exports = function e(t, r, o) {
            if ("function" == typeof r) return e(t, null, r);
            r || (r = {}), o = function(e) {
              var t = !1;
              return function() {
                if (!t) {
                  t = !0;
                  for (var r = arguments.length, n = new Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                  e.apply(this, n);
                }
              };
            }(o || i);
            var s = r.readable || !1 !== r.readable && t.readable, a = r.writable || !1 !== r.writable && t.writable, c = function() {
              t.writable || u();
            }, f = t._writableState && t._writableState.finished, u = function() {
              a = !1, f = !0, s || o.call(t);
            }, h = t._readableState && t._readableState.endEmitted, d = function() {
              s = !1, h = !0, a || o.call(t);
            }, l = function(e) {
              o.call(t, e);
            }, p = function() {
              var e;
              return s && !h ? (t._readableState && t._readableState.ended || (e = new n), o.call(t, e)) : a && !f ? (t._writableState && t._writableState.ended || (e = new n), 
              o.call(t, e)) : void 0;
            }, b = function() {
              t.req.on("finish", u);
            };
            return function(e) {
              return e.setHeader && "function" == typeof e.abort;
            }(t) ? (t.on("complete", u), t.on("abort", p), t.req ? b() : t.on("request", b)) : a && !t._writableState && (t.on("end", c), 
            t.on("close", c)), t.on("end", d), t.on("finish", u), !1 !== r.error && t.on("error", l), t.on("close", p), function() {
              t.removeListener("complete", u), t.removeListener("abort", p), t.removeListener("request", b), t.req && t.req.removeListener("finish", u), 
              t.removeListener("end", c), t.removeListener("close", c), t.removeListener("finish", u), t.removeListener("end", d), t.removeListener("error", l), 
              t.removeListener("close", p);
            };
          };
        },
        5167: e => {
          e.exports = function() {
            throw new Error("Readable.from is not available in the browser");
          };
        },
        9946: (e, t, r) => {
          "use strict";
          var n, i = r(4281).q, o = i.ERR_MISSING_ARGS, s = i.ERR_STREAM_DESTROYED;
          function a(e) {
            if (e) throw e;
          }
          function c(e, t, i, o) {
            o = function(e) {
              var t = !1;
              return function() {
                t || (t = !0, e.apply(void 0, arguments));
              };
            }(o);
            var a = !1;
            e.on("close", (function() {
              a = !0;
            })), void 0 === n && (n = r(8610)), n(e, {
              readable: t,
              writable: i
            }, (function(e) {
              if (e) return o(e);
              a = !0, o();
            }));
            var c = !1;
            return function(t) {
              if (!a && !c) return c = !0, function(e) {
                return e.setHeader && "function" == typeof e.abort;
              }(e) ? e.abort() : "function" == typeof e.destroy ? e.destroy() : void o(t || new s("pipe"));
            };
          }
          function f(e) {
            e();
          }
          function u(e, t) {
            return e.pipe(t);
          }
          function h(e) {
            return e.length ? "function" != typeof e[e.length - 1] ? a : e.pop() : a;
          }
          e.exports = function() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];
            var n, i = h(t);
            if (Array.isArray(t[0]) && (t = t[0]), t.length < 2) throw new o("streams");
            var s = t.map((function(e, r) {
              var o = r < t.length - 1;
              return c(e, o, r > 0, (function(e) {
                n || (n = e), e && s.forEach(f), o || (s.forEach(f), i(n));
              }));
            }));
            return t.reduce(u);
          };
        },
        2457: (e, t, r) => {
          "use strict";
          var n = r(4281).q.ERR_INVALID_OPT_VALUE;
          e.exports = {
            getHighWaterMark: function(e, t, r, i) {
              var o = function(e, t, r) {
                return null != e.highWaterMark ? e.highWaterMark : t ? e[r] : null;
              }(t, i, r);
              if (null != o) {
                if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new n(i ? r : "highWaterMark", o);
                return Math.floor(o);
              }
              return e.objectMode ? 16 : 16384;
            }
          };
        },
        2503: (e, t, r) => {
          e.exports = r(7187).EventEmitter;
        },
        8473: (e, t, r) => {
          (t = e.exports = r(9481)).Stream = t, t.Readable = t, t.Writable = r(4229), t.Duplex = r(6753), t.Transform = r(4605), t.PassThrough = r(2725), 
          t.finished = r(8610), t.pipeline = r(9946);
        },
        9785: (e, t, r) => {
          "use strict";
          var n = r(8764).Buffer, i = r(5717), o = r(3349), s = new Array(16), a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ], c = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ], f = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ], u = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ], h = [ 0, 1518500249, 1859775393, 2400959708, 2840853838 ], d = [ 1352829926, 1548603684, 1836072691, 2053994217, 0 ];
          function l() {
            o.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
          }
          function p(e, t) {
            return e << t | e >>> 32 - t;
          }
          function b(e, t, r, n, i, o, s, a) {
            return p(e + (t ^ r ^ n) + o + s | 0, a) + i | 0;
          }
          function y(e, t, r, n, i, o, s, a) {
            return p(e + (t & r | ~t & n) + o + s | 0, a) + i | 0;
          }
          function g(e, t, r, n, i, o, s, a) {
            return p(e + ((t | ~r) ^ n) + o + s | 0, a) + i | 0;
          }
          function m(e, t, r, n, i, o, s, a) {
            return p(e + (t & n | r & ~n) + o + s | 0, a) + i | 0;
          }
          function v(e, t, r, n, i, o, s, a) {
            return p(e + (t ^ (r | ~n)) + o + s | 0, a) + i | 0;
          }
          i(l, o), l.prototype._update = function() {
            for (var e = s, t = 0; t < 16; ++t) e[t] = this._block.readInt32LE(4 * t);
            for (var r = 0 | this._a, n = 0 | this._b, i = 0 | this._c, o = 0 | this._d, l = 0 | this._e, w = 0 | this._a, _ = 0 | this._b, S = 0 | this._c, E = 0 | this._d, A = 0 | this._e, x = 0; x < 80; x += 1) {
              var k, P;
              x < 16 ? (k = b(r, n, i, o, l, e[a[x]], h[0], f[x]), P = v(w, _, S, E, A, e[c[x]], d[0], u[x])) : x < 32 ? (k = y(r, n, i, o, l, e[a[x]], h[1], f[x]), 
              P = m(w, _, S, E, A, e[c[x]], d[1], u[x])) : x < 48 ? (k = g(r, n, i, o, l, e[a[x]], h[2], f[x]), P = g(w, _, S, E, A, e[c[x]], d[2], u[x])) : x < 64 ? (k = m(r, n, i, o, l, e[a[x]], h[3], f[x]), 
              P = y(w, _, S, E, A, e[c[x]], d[3], u[x])) : (k = v(r, n, i, o, l, e[a[x]], h[4], f[x]), P = b(w, _, S, E, A, e[c[x]], d[4], u[x])), 
              r = l, l = o, o = p(i, 10), i = n, n = k, w = A, A = E, E = p(S, 10), S = _, _ = P;
            }
            var O = this._b + i + E | 0;
            this._b = this._c + o + A | 0, this._c = this._d + l + w | 0, this._d = this._e + r + _ | 0, this._e = this._a + n + S | 0, 
            this._a = O;
          }, l.prototype._digest = function() {
            this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), 
            this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), 
            this._update();
            var e = n.alloc ? n.alloc(20) : new n(20);
            return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), 
            e.writeInt32LE(this._e, 16), e;
          }, e.exports = l;
        },
        1675: function(e, t, r) {
          "use strict";
          var n = r(8764).Buffer, i = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.getLength = t.decode = t.encode = void 0;
          var o = i(r(3550));
          function s(e, t) {
            if ("0" === e[0] && "0" === e[1]) throw new Error("invalid RLP: extra zeros");
            return parseInt(e, t);
          }
          function a(e, t) {
            if (e < 56) return n.from([ e + t ]);
            var r = u(e), i = u(t + 55 + r.length / 2);
            return n.from(i + r, "hex");
          }
          function c(e) {
            var t, r, i, o, a, f = [], u = e[0];
            if (u <= 127) return {
              data: e.slice(0, 1),
              remainder: e.slice(1)
            };
            if (u <= 183) {
              if (t = u - 127, i = 128 === u ? n.from([]) : e.slice(1, t), 2 === t && i[0] < 128) throw new Error("invalid rlp encoding: byte must be less 0x80");
              return {
                data: i,
                remainder: e.slice(t)
              };
            }
            if (u <= 191) {
              if (r = u - 182, e.length - 1 < r) throw new Error("invalid RLP: not enough bytes for string length");
              if ((t = s(e.slice(1, r).toString("hex"), 16)) <= 55) throw new Error("invalid RLP: expected string length to be greater than 55");
              if ((i = e.slice(r, t + r)).length < t) throw new Error("invalid RLP: not enough bytes for string");
              return {
                data: i,
                remainder: e.slice(t + r)
              };
            }
            if (u <= 247) {
              for (t = u - 191, o = e.slice(1, t); o.length; ) a = c(o), f.push(a.data), o = a.remainder;
              return {
                data: f,
                remainder: e.slice(t)
              };
            }
            var h = (r = u - 246) + (t = s(e.slice(1, r).toString("hex"), 16));
            if (h > e.length) throw new Error("invalid rlp: total length is larger than the data");
            if (0 === (o = e.slice(r, h)).length) throw new Error("invalid rlp, List has a invalid length");
            for (;o.length; ) a = c(o), f.push(a.data), o = a.remainder;
            return {
              data: f,
              remainder: e.slice(h)
            };
          }
          function f(e) {
            return "0x" === e.slice(0, 2);
          }
          function u(e) {
            if (e < 0) throw new Error("Invalid integer as argument, must be unsigned!");
            var t = e.toString(16);
            return t.length % 2 ? "0" + t : t;
          }
          function h(e) {
            if (!n.isBuffer(e)) {
              if ("string" == typeof e) return f(e) ? n.from((r = "string" != typeof (i = e) ? i : f(i) ? i.slice(2) : i).length % 2 ? "0" + r : r, "hex") : n.from(e);
              if ("number" == typeof e || "bigint" == typeof e) return e ? (t = u(e), n.from(t, "hex")) : n.from([]);
              if (null == e) return n.from([]);
              if (e instanceof Uint8Array) return n.from(e);
              if (o.default.isBN(e)) return n.from(e.toArray());
              throw new Error("invalid type");
            }
            var t, r, i;
            return e;
          }
          t.encode = function e(t) {
            if (Array.isArray(t)) {
              for (var r = [], i = 0; i < t.length; i++) r.push(e(t[i]));
              var o = n.concat(r);
              return n.concat([ a(o.length, 192), o ]);
            }
            var s = h(t);
            return 1 === s.length && s[0] < 128 ? s : n.concat([ a(s.length, 128), s ]);
          }, t.decode = function(e, t) {
            if (void 0 === t && (t = !1), !e || 0 === e.length) return n.from([]);
            var r = c(h(e));
            if (t) return r;
            if (0 !== r.remainder.length) throw new Error("invalid remainder");
            return r.data;
          }, t.getLength = function(e) {
            if (!e || 0 === e.length) return n.from([]);
            var t = h(e), r = t[0];
            if (r <= 127) return t.length;
            if (r <= 183) return r - 127;
            if (r <= 191) return r - 182;
            if (r <= 247) return r - 191;
            var i = r - 246;
            return i + s(t.slice(1, i).toString("hex"), 16);
          };
        },
        9509: (e, t, r) => {
          var n = r(8764), i = n.Buffer;
          function o(e, t) {
            for (var r in e) t[r] = e[r];
          }
          function s(e, t, r) {
            return i(e, t, r);
          }
          i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? e.exports = n : (o(n, t), t.Buffer = s), s.prototype = Object.create(i.prototype), 
          o(i, s), s.from = function(e, t, r) {
            if ("number" == typeof e) throw new TypeError("Argument must not be a number");
            return i(e, t, r);
          }, s.alloc = function(e, t, r) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            var n = i(e);
            return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
          }, s.allocUnsafe = function(e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return i(e);
          }, s.allocUnsafeSlow = function(e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return n.SlowBuffer(e);
          };
        },
        2399: (e, t, r) => {
          "use strict";
          var n, i = r(4155), o = r(8764), s = o.Buffer, a = {};
          for (n in o) o.hasOwnProperty(n) && "SlowBuffer" !== n && "Buffer" !== n && (a[n] = o[n]);
          var c = a.Buffer = {};
          for (n in s) s.hasOwnProperty(n) && "allocUnsafe" !== n && "allocUnsafeSlow" !== n && (c[n] = s[n]);
          if (a.Buffer.prototype = s.prototype, c.from && c.from !== Uint8Array.from || (c.from = function(e, t, r) {
            if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof e);
            if (e && void 0 === e.length) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
            return s(e, t, r);
          }), c.alloc || (c.alloc = function(e, t, r) {
            if ("number" != typeof e) throw new TypeError('The "size" argument must be of type number. Received type ' + typeof e);
            if (e < 0 || e >= 2 * (1 << 30)) throw new RangeError('The value "' + e + '" is invalid for option "size"');
            var n = s(e);
            return t && 0 !== t.length ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
          }), !a.kStringMaxLength) try {
            a.kStringMaxLength = i.binding("buffer").kStringMaxLength;
          } catch (e) {}
          a.constants || (a.constants = {
            MAX_LENGTH: a.kMaxLength
          }, a.kStringMaxLength && (a.constants.MAX_STRING_LENGTH = a.kStringMaxLength)), e.exports = a;
        },
        4189: (e, t, r) => {
          var n = r(9509).Buffer;
          function i(e, t) {
            this._block = n.alloc(e), this._finalSize = t, this._blockSize = e, this._len = 0;
          }
          i.prototype.update = function(e, t) {
            "string" == typeof e && (t = t || "utf8", e = n.from(e, t));
            for (var r = this._block, i = this._blockSize, o = e.length, s = this._len, a = 0; a < o; ) {
              for (var c = s % i, f = Math.min(o - a, i - c), u = 0; u < f; u++) r[c + u] = e[a + u];
              a += f, (s += f) % i == 0 && this._update(r);
            }
            return this._len += o, this;
          }, i.prototype.digest = function(e) {
            var t = this._len % this._blockSize;
            this._block[t] = 128, this._block.fill(0, t + 1), t >= this._finalSize && (this._update(this._block), this._block.fill(0));
            var r = 8 * this._len;
            if (r <= 4294967295) this._block.writeUInt32BE(r, this._blockSize - 4); else {
              var n = (4294967295 & r) >>> 0, i = (r - n) / 4294967296;
              this._block.writeUInt32BE(i, this._blockSize - 8), this._block.writeUInt32BE(n, this._blockSize - 4);
            }
            this._update(this._block);
            var o = this._hash();
            return e ? o.toString(e) : o;
          }, i.prototype._update = function() {
            throw new Error("_update must be implemented by subclass");
          }, e.exports = i;
        },
        9072: (e, t, r) => {
          var n = e.exports = function(e) {
            e = e.toLowerCase();
            var t = n[e];
            if (!t) throw new Error(e + " is not supported (we accept pull requests)");
            return new t;
          };
          n.sha = r(4448), n.sha1 = r(8336), n.sha224 = r(8432), n.sha256 = r(7499), n.sha384 = r(1686), n.sha512 = r(7816);
        },
        4448: (e, t, r) => {
          var n = r(5717), i = r(4189), o = r(9509).Buffer, s = [ 1518500249, 1859775393, -1894007588, -899497514 ], a = new Array(80);
          function c() {
            this.init(), this._w = a, i.call(this, 64, 56);
          }
          function f(e) {
            return e << 30 | e >>> 2;
          }
          function u(e, t, r, n) {
            return 0 === e ? t & r | ~t & n : 2 === e ? t & r | t & n | r & n : t ^ r ^ n;
          }
          n(c, i), c.prototype.init = function() {
            return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
          }, c.prototype._update = function(e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, c = 0 | this._e, h = 0; h < 16; ++h) r[h] = e.readInt32BE(4 * h);
            for (;h < 80; ++h) r[h] = r[h - 3] ^ r[h - 8] ^ r[h - 14] ^ r[h - 16];
            for (var d = 0; d < 80; ++d) {
              var l = ~~(d / 20), p = 0 | ((t = n) << 5 | t >>> 27) + u(l, i, o, a) + c + r[d] + s[l];
              c = a, a = o, o = f(i), i = n, n = p;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = c + this._e | 0;
          }, c.prototype._hash = function() {
            var e = o.allocUnsafe(20);
            return e.writeInt32BE(0 | this._a, 0), e.writeInt32BE(0 | this._b, 4), e.writeInt32BE(0 | this._c, 8), e.writeInt32BE(0 | this._d, 12), 
            e.writeInt32BE(0 | this._e, 16), e;
          }, e.exports = c;
        },
        8336: (e, t, r) => {
          var n = r(5717), i = r(4189), o = r(9509).Buffer, s = [ 1518500249, 1859775393, -1894007588, -899497514 ], a = new Array(80);
          function c() {
            this.init(), this._w = a, i.call(this, 64, 56);
          }
          function f(e) {
            return e << 5 | e >>> 27;
          }
          function u(e) {
            return e << 30 | e >>> 2;
          }
          function h(e, t, r, n) {
            return 0 === e ? t & r | ~t & n : 2 === e ? t & r | t & n | r & n : t ^ r ^ n;
          }
          n(c, i), c.prototype.init = function() {
            return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
          }, c.prototype._update = function(e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, c = 0 | this._e, d = 0; d < 16; ++d) r[d] = e.readInt32BE(4 * d);
            for (;d < 80; ++d) r[d] = (t = r[d - 3] ^ r[d - 8] ^ r[d - 14] ^ r[d - 16]) << 1 | t >>> 31;
            for (var l = 0; l < 80; ++l) {
              var p = ~~(l / 20), b = f(n) + h(p, i, o, a) + c + r[l] + s[p] | 0;
              c = a, a = o, o = u(i), i = n, n = b;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = c + this._e | 0;
          }, c.prototype._hash = function() {
            var e = o.allocUnsafe(20);
            return e.writeInt32BE(0 | this._a, 0), e.writeInt32BE(0 | this._b, 4), e.writeInt32BE(0 | this._c, 8), e.writeInt32BE(0 | this._d, 12), 
            e.writeInt32BE(0 | this._e, 16), e;
          }, e.exports = c;
        },
        8432: (e, t, r) => {
          var n = r(5717), i = r(7499), o = r(4189), s = r(9509).Buffer, a = new Array(64);
          function c() {
            this.init(), this._w = a, o.call(this, 64, 56);
          }
          n(c, i), c.prototype.init = function() {
            return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, 
            this._g = 1694076839, this._h = 3204075428, this;
          }, c.prototype._hash = function() {
            var e = s.allocUnsafe(28);
            return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), 
            e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e;
          }, e.exports = c;
        },
        7499: (e, t, r) => {
          var n = r(5717), i = r(4189), o = r(9509).Buffer, s = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ], a = new Array(64);
          function c() {
            this.init(), this._w = a, i.call(this, 64, 56);
          }
          function f(e, t, r) {
            return r ^ e & (t ^ r);
          }
          function u(e, t, r) {
            return e & t | r & (e | t);
          }
          function h(e) {
            return (e >>> 2 | e << 30) ^ (e >>> 13 | e << 19) ^ (e >>> 22 | e << 10);
          }
          function d(e) {
            return (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
          }
          function l(e) {
            return (e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3;
          }
          n(c, i), c.prototype.init = function() {
            return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, 
            this._g = 528734635, this._h = 1541459225, this;
          }, c.prototype._update = function(e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, c = 0 | this._e, p = 0 | this._f, b = 0 | this._g, y = 0 | this._h, g = 0; g < 16; ++g) r[g] = e.readInt32BE(4 * g);
            for (;g < 64; ++g) r[g] = 0 | (((t = r[g - 2]) >>> 17 | t << 15) ^ (t >>> 19 | t << 13) ^ t >>> 10) + r[g - 7] + l(r[g - 15]) + r[g - 16];
            for (var m = 0; m < 64; ++m) {
              var v = y + d(c) + f(c, p, b) + s[m] + r[m] | 0, w = h(n) + u(n, i, o) | 0;
              y = b, b = p, p = c, c = a + v | 0, a = o, o = i, i = n, n = v + w | 0;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = c + this._e | 0, 
            this._f = p + this._f | 0, this._g = b + this._g | 0, this._h = y + this._h | 0;
          }, c.prototype._hash = function() {
            var e = o.allocUnsafe(32);
            return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), 
            e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e.writeInt32BE(this._h, 28), e;
          }, e.exports = c;
        },
        1686: (e, t, r) => {
          var n = r(5717), i = r(7816), o = r(4189), s = r(9509).Buffer, a = new Array(160);
          function c() {
            this.init(), this._w = a, o.call(this, 128, 112);
          }
          n(c, i), c.prototype.init = function() {
            return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, 
            this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, 
            this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
          }, c.prototype._hash = function() {
            var e = s.allocUnsafe(48);
            function t(t, r, n) {
              e.writeInt32BE(t, n), e.writeInt32BE(r, n + 4);
            }
            return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), 
            t(this._fh, this._fl, 40), e;
          }, e.exports = c;
        },
        7816: (e, t, r) => {
          var n = r(5717), i = r(4189), o = r(9509).Buffer, s = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ], a = new Array(160);
          function c() {
            this.init(), this._w = a, i.call(this, 128, 112);
          }
          function f(e, t, r) {
            return r ^ e & (t ^ r);
          }
          function u(e, t, r) {
            return e & t | r & (e | t);
          }
          function h(e, t) {
            return (e >>> 28 | t << 4) ^ (t >>> 2 | e << 30) ^ (t >>> 7 | e << 25);
          }
          function d(e, t) {
            return (e >>> 14 | t << 18) ^ (e >>> 18 | t << 14) ^ (t >>> 9 | e << 23);
          }
          function l(e, t) {
            return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ e >>> 7;
          }
          function p(e, t) {
            return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ (e >>> 7 | t << 25);
          }
          function b(e, t) {
            return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ e >>> 6;
          }
          function y(e, t) {
            return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ (e >>> 6 | t << 26);
          }
          function g(e, t) {
            return e >>> 0 < t >>> 0 ? 1 : 0;
          }
          n(c, i), c.prototype.init = function() {
            return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, 
            this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, 
            this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
          }, c.prototype._update = function(e) {
            for (var t = this._w, r = 0 | this._ah, n = 0 | this._bh, i = 0 | this._ch, o = 0 | this._dh, a = 0 | this._eh, c = 0 | this._fh, m = 0 | this._gh, v = 0 | this._hh, w = 0 | this._al, _ = 0 | this._bl, S = 0 | this._cl, E = 0 | this._dl, A = 0 | this._el, x = 0 | this._fl, k = 0 | this._gl, P = 0 | this._hl, O = 0; O < 32; O += 2) t[O] = e.readInt32BE(4 * O), 
            t[O + 1] = e.readInt32BE(4 * O + 4);
            for (;O < 160; O += 2) {
              var M = t[O - 30], I = t[O - 30 + 1], T = l(M, I), R = p(I, M), C = b(M = t[O - 4], I = t[O - 4 + 1]), N = y(I, M), j = t[O - 14], B = t[O - 14 + 1], L = t[O - 32], D = t[O - 32 + 1], U = R + B | 0, q = T + j + g(U, R) | 0;
              q = (q = q + C + g(U = U + N | 0, N) | 0) + L + g(U = U + D | 0, D) | 0, t[O] = q, t[O + 1] = U;
            }
            for (var F = 0; F < 160; F += 2) {
              q = t[F], U = t[F + 1];
              var H = u(r, n, i), z = u(w, _, S), K = h(r, w), V = h(w, r), G = d(a, A), W = d(A, a), X = s[F], Y = s[F + 1], J = f(a, c, m), $ = f(A, x, k), Z = P + W | 0, Q = v + G + g(Z, P) | 0;
              Q = (Q = (Q = Q + J + g(Z = Z + $ | 0, $) | 0) + X + g(Z = Z + Y | 0, Y) | 0) + q + g(Z = Z + U | 0, U) | 0;
              var ee = V + z | 0, te = K + H + g(ee, V) | 0;
              v = m, P = k, m = c, k = x, c = a, x = A, a = o + Q + g(A = E + Z | 0, E) | 0, o = i, E = S, i = n, S = _, n = r, _ = w, 
              r = Q + te + g(w = Z + ee | 0, Z) | 0;
            }
            this._al = this._al + w | 0, this._bl = this._bl + _ | 0, this._cl = this._cl + S | 0, this._dl = this._dl + E | 0, this._el = this._el + A | 0, 
            this._fl = this._fl + x | 0, this._gl = this._gl + k | 0, this._hl = this._hl + P | 0, this._ah = this._ah + r + g(this._al, w) | 0, 
            this._bh = this._bh + n + g(this._bl, _) | 0, this._ch = this._ch + i + g(this._cl, S) | 0, this._dh = this._dh + o + g(this._dl, E) | 0, 
            this._eh = this._eh + a + g(this._el, A) | 0, this._fh = this._fh + c + g(this._fl, x) | 0, this._gh = this._gh + m + g(this._gl, k) | 0, 
            this._hh = this._hh + v + g(this._hl, P) | 0;
          }, c.prototype._hash = function() {
            var e = o.allocUnsafe(64);
            function t(t, r, n) {
              e.writeInt32BE(t, n), e.writeInt32BE(r, n + 4);
            }
            return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), 
            t(this._fh, this._fl, 40), t(this._gh, this._gl, 48), t(this._hh, this._hl, 56), e;
          }, e.exports = c;
        },
        2830: (e, t, r) => {
          e.exports = i;
          var n = r(7187).EventEmitter;
          function i() {
            n.call(this);
          }
          r(5717)(i, n), i.Readable = r(9481), i.Writable = r(4229), i.Duplex = r(6753), i.Transform = r(4605), i.PassThrough = r(2725), 
          i.finished = r(8610), i.pipeline = r(9946), i.Stream = i, i.prototype.pipe = function(e, t) {
            var r = this;
            function i(t) {
              e.writable && !1 === e.write(t) && r.pause && r.pause();
            }
            function o() {
              r.readable && r.resume && r.resume();
            }
            r.on("data", i), e.on("drain", o), e._isStdio || t && !1 === t.end || (r.on("end", a), r.on("close", c));
            var s = !1;
            function a() {
              s || (s = !0, e.end());
            }
            function c() {
              s || (s = !0, "function" == typeof e.destroy && e.destroy());
            }
            function f(e) {
              if (u(), 0 === n.listenerCount(this, "error")) throw e;
            }
            function u() {
              r.removeListener("data", i), e.removeListener("drain", o), r.removeListener("end", a), r.removeListener("close", c), r.removeListener("error", f), 
              e.removeListener("error", f), r.removeListener("end", u), r.removeListener("close", u), e.removeListener("close", u);
            }
            return r.on("error", f), e.on("error", f), r.on("end", u), r.on("close", u), e.on("close", u), e.emit("pipe", r), e;
          };
        },
        8501: (e, t, r) => {
          var n = r(1989), i = r(5676), o = r(7529), s = r(584), a = r(8575), c = t;
          c.request = function(e, t) {
            e = "string" == typeof e ? a.parse(e) : o(e);
            var i = -1 === r.g.location.protocol.search(/^https?:$/) ? "http:" : "", s = e.protocol || i, c = e.hostname || e.host, f = e.port, u = e.path || "/";
            c && -1 !== c.indexOf(":") && (c = "[" + c + "]"), e.url = (c ? s + "//" + c : "") + (f ? ":" + f : "") + u, e.method = (e.method || "GET").toUpperCase(), 
            e.headers = e.headers || {};
            var h = new n(e);
            return t && h.on("response", t), h;
          }, c.get = function(e, t) {
            var r = c.request(e, t);
            return r.end(), r;
          }, c.ClientRequest = n, c.IncomingMessage = i.IncomingMessage, c.Agent = function() {}, c.Agent.defaultMaxSockets = 4, c.globalAgent = new c.Agent, 
          c.STATUS_CODES = s, c.METHODS = [ "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE" ];
        },
        8725: (e, t, r) => {
          var n;
          function i() {
            if (void 0 !== n) return n;
            if (r.g.XMLHttpRequest) {
              n = new r.g.XMLHttpRequest;
              try {
                n.open("GET", r.g.XDomainRequest ? "/" : "https://example.com");
              } catch (e) {
                n = null;
              }
            } else n = null;
            return n;
          }
          function o(e) {
            var t = i();
            if (!t) return !1;
            try {
              return t.responseType = e, t.responseType === e;
            } catch (e) {}
            return !1;
          }
          function s(e) {
            return "function" == typeof e;
          }
          t.fetch = s(r.g.fetch) && s(r.g.ReadableStream), t.writableStream = s(r.g.WritableStream), t.abortController = s(r.g.AbortController), 
          t.arraybuffer = t.fetch || o("arraybuffer"), t.msstream = !t.fetch && o("ms-stream"), t.mozchunkedarraybuffer = !t.fetch && o("moz-chunked-arraybuffer"), 
          t.overrideMimeType = t.fetch || !!i() && s(i().overrideMimeType), n = null;
        },
        1989: (e, t, r) => {
          var n = r(8764).Buffer, i = r(4155), o = r(8725), s = r(5717), a = r(5676), c = r(8473), f = a.IncomingMessage, u = a.readyStates, h = e.exports = function(e) {
            var t, r = this;
            c.Writable.call(r), r._opts = e, r._body = [], r._headers = {}, e.auth && r.setHeader("Authorization", "Basic " + n.from(e.auth).toString("base64")), 
            Object.keys(e.headers).forEach((function(t) {
              r.setHeader(t, e.headers[t]);
            }));
            var i = !0;
            if ("disable-fetch" === e.mode || "requestTimeout" in e && !o.abortController) i = !1, t = !0; else if ("prefer-streaming" === e.mode) t = !1; else if ("allow-wrong-content-type" === e.mode) t = !o.overrideMimeType; else {
              if (e.mode && "default" !== e.mode && "prefer-fast" !== e.mode) throw new Error("Invalid value for opts.mode");
              t = !0;
            }
            r._mode = function(e, t) {
              return o.fetch && t ? "fetch" : o.mozchunkedarraybuffer ? "moz-chunked-arraybuffer" : o.msstream ? "ms-stream" : o.arraybuffer && e ? "arraybuffer" : "text";
            }(t, i), r._fetchTimer = null, r._socketTimeout = null, r._socketTimer = null, r.on("finish", (function() {
              r._onFinish();
            }));
          };
          s(h, c.Writable), h.prototype.setHeader = function(e, t) {
            var r = e.toLowerCase();
            -1 === d.indexOf(r) && (this._headers[r] = {
              name: e,
              value: t
            });
          }, h.prototype.getHeader = function(e) {
            var t = this._headers[e.toLowerCase()];
            return t ? t.value : null;
          }, h.prototype.removeHeader = function(e) {
            delete this._headers[e.toLowerCase()];
          }, h.prototype._onFinish = function() {
            var e = this;
            if (!e._destroyed) {
              var t = e._opts;
              "timeout" in t && 0 !== t.timeout && e.setTimeout(t.timeout);
              var n = e._headers, s = null;
              "GET" !== t.method && "HEAD" !== t.method && (s = new Blob(e._body, {
                type: (n["content-type"] || {}).value || ""
              }));
              var a = [];
              if (Object.keys(n).forEach((function(e) {
                var t = n[e].name, r = n[e].value;
                Array.isArray(r) ? r.forEach((function(e) {
                  a.push([ t, e ]);
                })) : a.push([ t, r ]);
              })), "fetch" === e._mode) {
                var c = null;
                if (o.abortController) {
                  var f = new AbortController;
                  c = f.signal, e._fetchAbortController = f, "requestTimeout" in t && 0 !== t.requestTimeout && (e._fetchTimer = r.g.setTimeout((function() {
                    e.emit("requestTimeout"), e._fetchAbortController && e._fetchAbortController.abort();
                  }), t.requestTimeout));
                }
                r.g.fetch(e._opts.url, {
                  method: e._opts.method,
                  headers: a,
                  body: s || void 0,
                  mode: "cors",
                  credentials: t.withCredentials ? "include" : "same-origin",
                  signal: c
                }).then((function(t) {
                  e._fetchResponse = t, e._resetTimers(!1), e._connect();
                }), (function(t) {
                  e._resetTimers(!0), e._destroyed || e.emit("error", t);
                }));
              } else {
                var h = e._xhr = new r.g.XMLHttpRequest;
                try {
                  h.open(e._opts.method, e._opts.url, !0);
                } catch (t) {
                  return void i.nextTick((function() {
                    e.emit("error", t);
                  }));
                }
                "responseType" in h && (h.responseType = e._mode), "withCredentials" in h && (h.withCredentials = !!t.withCredentials), 
                "text" === e._mode && "overrideMimeType" in h && h.overrideMimeType("text/plain; charset=x-user-defined"), "requestTimeout" in t && (h.timeout = t.requestTimeout, 
                h.ontimeout = function() {
                  e.emit("requestTimeout");
                }), a.forEach((function(e) {
                  h.setRequestHeader(e[0], e[1]);
                })), e._response = null, h.onreadystatechange = function() {
                  switch (h.readyState) {
                   case u.LOADING:
                   case u.DONE:
                    e._onXHRProgress();
                  }
                }, "moz-chunked-arraybuffer" === e._mode && (h.onprogress = function() {
                  e._onXHRProgress();
                }), h.onerror = function() {
                  e._destroyed || (e._resetTimers(!0), e.emit("error", new Error("XHR error")));
                };
                try {
                  h.send(s);
                } catch (t) {
                  return void i.nextTick((function() {
                    e.emit("error", t);
                  }));
                }
              }
            }
          }, h.prototype._onXHRProgress = function() {
            var e = this;
            e._resetTimers(!1), function(e) {
              try {
                var t = e.status;
                return null !== t && 0 !== t;
              } catch (e) {
                return !1;
              }
            }(e._xhr) && !e._destroyed && (e._response || e._connect(), e._response._onXHRProgress(e._resetTimers.bind(e)));
          }, h.prototype._connect = function() {
            var e = this;
            e._destroyed || (e._response = new f(e._xhr, e._fetchResponse, e._mode, e._resetTimers.bind(e)), e._response.on("error", (function(t) {
              e.emit("error", t);
            })), e.emit("response", e._response));
          }, h.prototype._write = function(e, t, r) {
            this._body.push(e), r();
          }, h.prototype._resetTimers = function(e) {
            var t = this;
            r.g.clearTimeout(t._socketTimer), t._socketTimer = null, e ? (r.g.clearTimeout(t._fetchTimer), t._fetchTimer = null) : t._socketTimeout && (t._socketTimer = r.g.setTimeout((function() {
              t.emit("timeout");
            }), t._socketTimeout));
          }, h.prototype.abort = h.prototype.destroy = function(e) {
            var t = this;
            t._destroyed = !0, t._resetTimers(!0), t._response && (t._response._destroyed = !0), t._xhr ? t._xhr.abort() : t._fetchAbortController && t._fetchAbortController.abort(), 
            e && t.emit("error", e);
          }, h.prototype.end = function(e, t, r) {
            "function" == typeof e && (r = e, e = void 0), c.Writable.prototype.end.call(this, e, t, r);
          }, h.prototype.setTimeout = function(e, t) {
            var r = this;
            t && r.once("timeout", t), r._socketTimeout = e, r._resetTimers(!1);
          }, h.prototype.flushHeaders = function() {}, h.prototype.setNoDelay = function() {}, h.prototype.setSocketKeepAlive = function() {};
          var d = [ "accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "via" ];
        },
        5676: (e, t, r) => {
          var n = r(4155), i = r(8764).Buffer, o = r(8725), s = r(5717), a = r(8473), c = t.readyStates = {
            UNSENT: 0,
            OPENED: 1,
            HEADERS_RECEIVED: 2,
            LOADING: 3,
            DONE: 4
          }, f = t.IncomingMessage = function(e, t, r, s) {
            var c = this;
            if (a.Readable.call(c), c._mode = r, c.headers = {}, c.rawHeaders = [], c.trailers = {}, c.rawTrailers = [], c.on("end", (function() {
              n.nextTick((function() {
                c.emit("close");
              }));
            })), "fetch" === r) {
              if (c._fetchResponse = t, c.url = t.url, c.statusCode = t.status, c.statusMessage = t.statusText, t.headers.forEach((function(e, t) {
                c.headers[t.toLowerCase()] = e, c.rawHeaders.push(t, e);
              })), o.writableStream) {
                var f = new WritableStream({
                  write: function(e) {
                    return s(!1), new Promise((function(t, r) {
                      c._destroyed ? r() : c.push(i.from(e)) ? t() : c._resumeFetch = t;
                    }));
                  },
                  close: function() {
                    s(!0), c._destroyed || c.push(null);
                  },
                  abort: function(e) {
                    s(!0), c._destroyed || c.emit("error", e);
                  }
                });
                try {
                  return void t.body.pipeTo(f).catch((function(e) {
                    s(!0), c._destroyed || c.emit("error", e);
                  }));
                } catch (e) {}
              }
              var u = t.body.getReader();
              !function e() {
                u.read().then((function(t) {
                  c._destroyed || (s(t.done), t.done ? c.push(null) : (c.push(i.from(t.value)), e()));
                })).catch((function(e) {
                  s(!0), c._destroyed || c.emit("error", e);
                }));
              }();
            } else if (c._xhr = e, c._pos = 0, c.url = e.responseURL, c.statusCode = e.status, c.statusMessage = e.statusText, e.getAllResponseHeaders().split(/\r?\n/).forEach((function(e) {
              var t = e.match(/^([^:]+):\s*(.*)/);
              if (t) {
                var r = t[1].toLowerCase();
                "set-cookie" === r ? (void 0 === c.headers[r] && (c.headers[r] = []), c.headers[r].push(t[2])) : void 0 !== c.headers[r] ? c.headers[r] += ", " + t[2] : c.headers[r] = t[2], 
                c.rawHeaders.push(t[1], t[2]);
              }
            })), c._charset = "x-user-defined", !o.overrideMimeType) {
              var h = c.rawHeaders["mime-type"];
              if (h) {
                var d = h.match(/;\s*charset=([^;])(;|$)/);
                d && (c._charset = d[1].toLowerCase());
              }
              c._charset || (c._charset = "utf-8");
            }
          };
          s(f, a.Readable), f.prototype._read = function() {
            var e = this._resumeFetch;
            e && (this._resumeFetch = null, e());
          }, f.prototype._onXHRProgress = function(e) {
            var t = this, n = t._xhr, o = null;
            switch (t._mode) {
             case "text":
              if ((o = n.responseText).length > t._pos) {
                var s = o.substr(t._pos);
                if ("x-user-defined" === t._charset) {
                  for (var a = i.alloc(s.length), f = 0; f < s.length; f++) a[f] = 255 & s.charCodeAt(f);
                  t.push(a);
                } else t.push(s, t._charset);
                t._pos = o.length;
              }
              break;

             case "arraybuffer":
              if (n.readyState !== c.DONE || !n.response) break;
              o = n.response, t.push(i.from(new Uint8Array(o)));
              break;

             case "moz-chunked-arraybuffer":
              if (o = n.response, n.readyState !== c.LOADING || !o) break;
              t.push(i.from(new Uint8Array(o)));
              break;

             case "ms-stream":
              if (o = n.response, n.readyState !== c.LOADING) break;
              var u = new r.g.MSStreamReader;
              u.onprogress = function() {
                u.result.byteLength > t._pos && (t.push(i.from(new Uint8Array(u.result.slice(t._pos)))), t._pos = u.result.byteLength);
              }, u.onload = function() {
                e(!0), t.push(null);
              }, u.readAsArrayBuffer(o);
            }
            t._xhr.readyState === c.DONE && "ms-stream" !== t._mode && (e(!0), t.push(null));
          };
        },
        2553: (e, t, r) => {
          "use strict";
          var n = r(9509).Buffer, i = n.isEncoding || function(e) {
            switch ((e = "" + e) && e.toLowerCase()) {
             case "hex":
             case "utf8":
             case "utf-8":
             case "ascii":
             case "binary":
             case "base64":
             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
             case "raw":
              return !0;

             default:
              return !1;
            }
          };
          function o(e) {
            var t;
            switch (this.encoding = function(e) {
              var t = function(e) {
                if (!e) return "utf8";
                for (var t; ;) switch (e) {
                 case "utf8":
                 case "utf-8":
                  return "utf8";

                 case "ucs2":
                 case "ucs-2":
                 case "utf16le":
                 case "utf-16le":
                  return "utf16le";

                 case "latin1":
                 case "binary":
                  return "latin1";

                 case "base64":
                 case "ascii":
                 case "hex":
                  return e;

                 default:
                  if (t) return;
                  e = ("" + e).toLowerCase(), t = !0;
                }
              }(e);
              if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
              return t || e;
            }(e), this.encoding) {
             case "utf16le":
              this.text = c, this.end = f, t = 4;
              break;

             case "utf8":
              this.fillLast = a, t = 4;
              break;

             case "base64":
              this.text = u, this.end = h, t = 3;
              break;

             default:
              return this.write = d, void (this.end = l);
            }
            this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
          }
          function s(e) {
            return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;
          }
          function a(e) {
            var t = this.lastTotal - this.lastNeed, r = function(e, t, r) {
              if (128 != (192 & t[0])) return e.lastNeed = 0, "�";
              if (e.lastNeed > 1 && t.length > 1) {
                if (128 != (192 & t[1])) return e.lastNeed = 1, "�";
                if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";
              }
            }(this, e);
            return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), 
            void (this.lastNeed -= e.length));
          }
          function c(e, t) {
            if ((e.length - t) % 2 == 0) {
              var r = e.toString("utf16le", t);
              if (r) {
                var n = r.charCodeAt(r.length - 1);
                if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], 
                r.slice(0, -1);
              }
              return r;
            }
            return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
          }
          function f(e) {
            var t = e && e.length ? this.write(e) : "";
            if (this.lastNeed) {
              var r = this.lastTotal - this.lastNeed;
              return t + this.lastChar.toString("utf16le", 0, r);
            }
            return t;
          }
          function u(e, t) {
            var r = (e.length - t) % 3;
            return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], 
            this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
          }
          function h(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
          }
          function d(e) {
            return e.toString(this.encoding);
          }
          function l(e) {
            return e && e.length ? this.write(e) : "";
          }
          t.s = o, o.prototype.write = function(e) {
            if (0 === e.length) return "";
            var t, r;
            if (this.lastNeed) {
              if (void 0 === (t = this.fillLast(e))) return "";
              r = this.lastNeed, this.lastNeed = 0;
            } else r = 0;
            return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
          }, o.prototype.end = function(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + "�" : t;
          }, o.prototype.text = function(e, t) {
            var r = function(e, t, r) {
              var n = t.length - 1;
              if (n < r) return 0;
              var i = s(t[n]);
              return i >= 0 ? (i > 0 && (e.lastNeed = i - 1), i) : --n < r || -2 === i ? 0 : (i = s(t[n])) >= 0 ? (i > 0 && (e.lastNeed = i - 2), 
              i) : --n < r || -2 === i ? 0 : (i = s(t[n])) >= 0 ? (i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i) : 0;
            }(this, e, t);
            if (!this.lastNeed) return e.toString("utf8", t);
            this.lastTotal = r;
            var n = e.length - (r - this.lastNeed);
            return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
          }, o.prototype.fillLast = function(e) {
            if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
            e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
          };
        },
        9604: (e, t, r) => {
          var n = r(3944);
          e.exports = function(e) {
            return "string" != typeof e ? e : n(e) ? e.slice(2) : e;
          };
        },
        5940: e => {
          var t = {}.toString;
          e.exports = Array.isArray || function(e) {
            return "[object Array]" == t.call(e);
          };
        },
        5867: (e, t, r) => {
          "use strict";
          var n = r(8212), i = Object.keys || function(e) {
            var t = [];
            for (var r in e) t.push(r);
            return t;
          };
          e.exports = h;
          var o = Object.create(r(6497));
          o.inherits = r(5717);
          var s = r(2442), a = r(759);
          o.inherits(h, s);
          for (var c = i(a.prototype), f = 0; f < c.length; f++) {
            var u = c[f];
            h.prototype[u] || (h.prototype[u] = a.prototype[u]);
          }
          function h(e) {
            if (!(this instanceof h)) return new h(e);
            s.call(this, e), a.call(this, e), e && !1 === e.readable && (this.readable = !1), e && !1 === e.writable && (this.writable = !1), 
            this.allowHalfOpen = !0, e && !1 === e.allowHalfOpen && (this.allowHalfOpen = !1), this.once("end", d);
          }
          function d() {
            this.allowHalfOpen || this._writableState.ended || n.nextTick(l, this);
          }
          function l(e) {
            e.end();
          }
          Object.defineProperty(h.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._writableState.highWaterMark;
            }
          }), Object.defineProperty(h.prototype, "destroyed", {
            get: function() {
              return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function(e) {
              void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);
            }
          }), h.prototype._destroy = function(e, t) {
            this.push(null), this.end(), n.nextTick(t, e);
          };
        },
        3431: (e, t, r) => {
          "use strict";
          e.exports = o;
          var n = r(62), i = Object.create(r(6497));
          function o(e) {
            if (!(this instanceof o)) return new o(e);
            n.call(this, e);
          }
          i.inherits = r(5717), i.inherits(o, n), o.prototype._transform = function(e, t, r) {
            r(null, e);
          };
        },
        2442: (e, t, r) => {
          "use strict";
          var n = r(4155), i = r(8212);
          e.exports = v;
          var o, s = r(5940);
          v.ReadableState = m, r(7187).EventEmitter;
          var a = function(e, t) {
            return e.listeners(t).length;
          }, c = r(4104), f = r(4591).Buffer, u = r.g.Uint8Array || function() {}, h = Object.create(r(6497));
          h.inherits = r(5717);
          var d = r(6882), l = void 0;
          l = d && d.debuglog ? d.debuglog("stream") : function() {};
          var p, b = r(3912), y = r(5513);
          h.inherits(v, c);
          var g = [ "error", "close", "destroy", "pause", "resume" ];
          function m(e, t) {
            e = e || {};
            var n = t instanceof (o = o || r(5867));
            this.objectMode = !!e.objectMode, n && (this.objectMode = this.objectMode || !!e.readableObjectMode);
            var i = e.highWaterMark, s = e.readableHighWaterMark, a = this.objectMode ? 16 : 16384;
            this.highWaterMark = i || 0 === i ? i : n && (s || 0 === s) ? s : a, this.highWaterMark = Math.floor(this.highWaterMark), 
            this.buffer = new b, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, 
            this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, 
            this.destroyed = !1, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, 
            this.encoding = null, e.encoding && (p || (p = r(7989).s), this.decoder = new p(e.encoding), this.encoding = e.encoding);
          }
          function v(e) {
            if (o = o || r(5867), !(this instanceof v)) return new v(e);
            this._readableState = new m(e, this), this.readable = !0, e && ("function" == typeof e.read && (this._read = e.read), "function" == typeof e.destroy && (this._destroy = e.destroy)), 
            c.call(this);
          }
          function w(e, t, r, n, i) {
            var o, s = e._readableState;
            return null === t ? (s.reading = !1, function(e, t) {
              if (!t.ended) {
                if (t.decoder) {
                  var r = t.decoder.end();
                  r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
                }
                t.ended = !0, A(e);
              }
            }(e, s)) : (i || (o = function(e, t) {
              var r, n;
              return n = t, f.isBuffer(n) || n instanceof u || "string" == typeof t || void 0 === t || e.objectMode || (r = new TypeError("Invalid non-string/buffer chunk")), 
              r;
            }(s, t)), o ? e.emit("error", o) : s.objectMode || t && t.length > 0 ? ("string" == typeof t || s.objectMode || Object.getPrototypeOf(t) === f.prototype || (t = function(e) {
              return f.from(e);
            }(t)), n ? s.endEmitted ? e.emit("error", new Error("stream.unshift() after end event")) : _(e, s, t, !0) : s.ended ? e.emit("error", new Error("stream.push() after EOF")) : (s.reading = !1, 
            s.decoder && !r ? (t = s.decoder.write(t), s.objectMode || 0 !== t.length ? _(e, s, t, !1) : k(e, s)) : _(e, s, t, !1))) : n || (s.reading = !1)), 
            function(e) {
              return !e.ended && (e.needReadable || e.length < e.highWaterMark || 0 === e.length);
            }(s);
          }
          function _(e, t, r, n) {
            t.flowing && 0 === t.length && !t.sync ? (e.emit("data", r), e.read(0)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), 
            t.needReadable && A(e)), k(e, t);
          }
          Object.defineProperty(v.prototype, "destroyed", {
            get: function() {
              return void 0 !== this._readableState && this._readableState.destroyed;
            },
            set: function(e) {
              this._readableState && (this._readableState.destroyed = e);
            }
          }), v.prototype.destroy = y.destroy, v.prototype._undestroy = y.undestroy, v.prototype._destroy = function(e, t) {
            this.push(null), t(e);
          }, v.prototype.push = function(e, t) {
            var r, n = this._readableState;
            return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = f.from(e, t), 
            t = ""), r = !0), w(this, e, t, !1, r);
          }, v.prototype.unshift = function(e) {
            return w(this, e, null, !0, !1);
          }, v.prototype.isPaused = function() {
            return !1 === this._readableState.flowing;
          }, v.prototype.setEncoding = function(e) {
            return p || (p = r(7989).s), this._readableState.decoder = new p(e), this._readableState.encoding = e, this;
          };
          var S = 8388608;
          function E(e, t) {
            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function(e) {
              return e >= S ? e = S : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
            }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));
          }
          function A(e) {
            var t = e._readableState;
            t.needReadable = !1, t.emittedReadable || (l("emitReadable", t.flowing), t.emittedReadable = !0, t.sync ? i.nextTick(x, e) : x(e));
          }
          function x(e) {
            l("emit readable"), e.emit("readable"), I(e);
          }
          function k(e, t) {
            t.readingMore || (t.readingMore = !0, i.nextTick(P, e, t));
          }
          function P(e, t) {
            for (var r = t.length; !t.reading && !t.flowing && !t.ended && t.length < t.highWaterMark && (l("maybeReadMore read 0"), 
            e.read(0), r !== t.length); ) r = t.length;
            t.readingMore = !1;
          }
          function O(e) {
            l("readable nexttick read 0"), e.read(0);
          }
          function M(e, t) {
            t.reading || (l("resume read 0"), e.read(0)), t.resumeScheduled = !1, t.awaitDrain = 0, e.emit("resume"), I(e), t.flowing && !t.reading && e.read(0);
          }
          function I(e) {
            var t = e._readableState;
            for (l("flow", t.flowing); t.flowing && null !== e.read(); ) ;
          }
          function T(e, t) {
            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.head.data : t.buffer.concat(t.length), 
            t.buffer.clear()) : r = function(e, t, r) {
              var n;
              return e < t.head.data.length ? (n = t.head.data.slice(0, e), t.head.data = t.head.data.slice(e)) : n = e === t.head.data.length ? t.shift() : r ? function(e, t) {
                var r = t.head, n = 1, i = r.data;
                for (e -= i.length; r = r.next; ) {
                  var o = r.data, s = e > o.length ? o.length : e;
                  if (s === o.length ? i += o : i += o.slice(0, e), 0 == (e -= s)) {
                    s === o.length ? (++n, r.next ? t.head = r.next : t.head = t.tail = null) : (t.head = r, r.data = o.slice(s));
                    break;
                  }
                  ++n;
                }
                return t.length -= n, i;
              }(e, t) : function(e, t) {
                var r = f.allocUnsafe(e), n = t.head, i = 1;
                for (n.data.copy(r), e -= n.data.length; n = n.next; ) {
                  var o = n.data, s = e > o.length ? o.length : e;
                  if (o.copy(r, r.length - e, 0, s), 0 == (e -= s)) {
                    s === o.length ? (++i, n.next ? t.head = n.next : t.head = t.tail = null) : (t.head = n, n.data = o.slice(s));
                    break;
                  }
                  ++i;
                }
                return t.length -= i, r;
              }(e, t), n;
            }(e, t.buffer, t.decoder), r);
            var r;
          }
          function R(e) {
            var t = e._readableState;
            if (t.length > 0) throw new Error('"endReadable()" called on non-empty stream');
            t.endEmitted || (t.ended = !0, i.nextTick(C, t, e));
          }
          function C(e, t) {
            e.endEmitted || 0 !== e.length || (e.endEmitted = !0, t.readable = !1, t.emit("end"));
          }
          function N(e, t) {
            for (var r = 0, n = e.length; r < n; r++) if (e[r] === t) return r;
            return -1;
          }
          v.prototype.read = function(e) {
            l("read", e), e = parseInt(e, 10);
            var t = this._readableState, r = e;
            if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && (t.length >= t.highWaterMark || t.ended)) return l("read: emitReadable", t.length, t.ended), 
            0 === t.length && t.ended ? R(this) : A(this), null;
            if (0 === (e = E(e, t)) && t.ended) return 0 === t.length && R(this), null;
            var n, i = t.needReadable;
            return l("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && l("length less than watermark", i = !0), 
            t.ended || t.reading ? l("reading or ended", i = !1) : i && (l("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), 
            this._read(t.highWaterMark), t.sync = !1, t.reading || (e = E(r, t))), null === (n = e > 0 ? T(e, t) : null) ? (t.needReadable = !0, 
            e = 0) : t.length -= e, 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && R(this)), null !== n && this.emit("data", n), 
            n;
          }, v.prototype._read = function(e) {
            this.emit("error", new Error("_read() is not implemented"));
          }, v.prototype.pipe = function(e, t) {
            var r = this, o = this._readableState;
            switch (o.pipesCount) {
             case 0:
              o.pipes = e;
              break;

             case 1:
              o.pipes = [ o.pipes, e ];
              break;

             default:
              o.pipes.push(e);
            }
            o.pipesCount += 1, l("pipe count=%d opts=%j", o.pipesCount, t);
            var c = t && !1 === t.end || e === n.stdout || e === n.stderr ? m : f;
            function f() {
              l("onend"), e.end();
            }
            o.endEmitted ? i.nextTick(c) : r.once("end", c), e.on("unpipe", (function t(n, i) {
              l("onunpipe"), n === r && i && !1 === i.hasUnpiped && (i.hasUnpiped = !0, l("cleanup"), e.removeListener("close", y), e.removeListener("finish", g), 
              e.removeListener("drain", u), e.removeListener("error", b), e.removeListener("unpipe", t), r.removeListener("end", f), r.removeListener("end", m), 
              r.removeListener("data", p), h = !0, !o.awaitDrain || e._writableState && !e._writableState.needDrain || u());
            }));
            var u = function(e) {
              return function() {
                var t = e._readableState;
                l("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && a(e, "data") && (t.flowing = !0, I(e));
              };
            }(r);
            e.on("drain", u);
            var h = !1, d = !1;
            function p(t) {
              l("ondata"), d = !1, !1 !== e.write(t) || d || ((1 === o.pipesCount && o.pipes === e || o.pipesCount > 1 && -1 !== N(o.pipes, e)) && !h && (l("false write response, pause", r._readableState.awaitDrain), 
              r._readableState.awaitDrain++, d = !0), r.pause());
            }
            function b(t) {
              l("onerror", t), m(), e.removeListener("error", b), 0 === a(e, "error") && e.emit("error", t);
            }
            function y() {
              e.removeListener("finish", g), m();
            }
            function g() {
              l("onfinish"), e.removeListener("close", y), m();
            }
            function m() {
              l("unpipe"), r.unpipe(e);
            }
            return r.on("data", p), function(e, t, r) {
              if ("function" == typeof e.prependListener) return e.prependListener(t, r);
              e._events && e._events.error ? s(e._events.error) ? e._events.error.unshift(r) : e._events.error = [ r, e._events.error ] : e.on(t, r);
            }(e, "error", b), e.once("close", y), e.once("finish", g), e.emit("pipe", r), o.flowing || (l("pipe resume"), r.resume()), 
            e;
          }, v.prototype.unpipe = function(e) {
            var t = this._readableState, r = {
              hasUnpiped: !1
            };
            if (0 === t.pipesCount) return this;
            if (1 === t.pipesCount) return e && e !== t.pipes || (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, 
            e && e.emit("unpipe", this, r)), this;
            if (!e) {
              var n = t.pipes, i = t.pipesCount;
              t.pipes = null, t.pipesCount = 0, t.flowing = !1;
              for (var o = 0; o < i; o++) n[o].emit("unpipe", this, r);
              return this;
            }
            var s = N(t.pipes, e);
            return -1 === s || (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r)), 
            this;
          }, v.prototype.on = function(e, t) {
            var r = c.prototype.on.call(this, e, t);
            if ("data" === e) !1 !== this._readableState.flowing && this.resume(); else if ("readable" === e) {
              var n = this._readableState;
              n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.emittedReadable = !1, n.reading ? n.length && A(this) : i.nextTick(O, this));
            }
            return r;
          }, v.prototype.addListener = v.prototype.on, v.prototype.resume = function() {
            var e = this._readableState;
            return e.flowing || (l("resume"), e.flowing = !0, function(e, t) {
              t.resumeScheduled || (t.resumeScheduled = !0, i.nextTick(M, e, t));
            }(this, e)), this;
          }, v.prototype.pause = function() {
            return l("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (l("pause"), this._readableState.flowing = !1, 
            this.emit("pause")), this;
          }, v.prototype.wrap = function(e) {
            var t = this, r = this._readableState, n = !1;
            for (var i in e.on("end", (function() {
              if (l("wrapped end"), r.decoder && !r.ended) {
                var e = r.decoder.end();
                e && e.length && t.push(e);
              }
              t.push(null);
            })), e.on("data", (function(i) {
              l("wrapped data"), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i || (r.objectMode || i && i.length) && (t.push(i) || (n = !0, 
              e.pause()));
            })), e) void 0 === this[i] && "function" == typeof e[i] && (this[i] = function(t) {
              return function() {
                return e[t].apply(e, arguments);
              };
            }(i));
            for (var o = 0; o < g.length; o++) e.on(g[o], this.emit.bind(this, g[o]));
            return this._read = function(t) {
              l("wrapped _read", t), n && (n = !1, e.resume());
            }, this;
          }, Object.defineProperty(v.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._readableState.highWaterMark;
            }
          }), v._fromList = T;
        },
        62: (e, t, r) => {
          "use strict";
          e.exports = s;
          var n = r(5867), i = Object.create(r(6497));
          function o(e, t) {
            var r = this._transformState;
            r.transforming = !1;
            var n = r.writecb;
            if (!n) return this.emit("error", new Error("write callback called multiple times"));
            r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);
            var i = this._readableState;
            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
          }
          function s(e) {
            if (!(this instanceof s)) return new s(e);
            n.call(this, e), this._transformState = {
              afterTransform: o.bind(this),
              needTransform: !1,
              transforming: !1,
              writecb: null,
              writechunk: null,
              writeencoding: null
            }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), 
            "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", a);
          }
          function a() {
            var e = this;
            "function" == typeof this._flush ? this._flush((function(t, r) {
              c(e, t, r);
            })) : c(this, null, null);
          }
          function c(e, t, r) {
            if (t) return e.emit("error", t);
            if (null != r && e.push(r), e._writableState.length) throw new Error("Calling transform done when ws.length != 0");
            if (e._transformState.transforming) throw new Error("Calling transform done when still transforming");
            return e.push(null);
          }
          i.inherits = r(5717), i.inherits(s, n), s.prototype.push = function(e, t) {
            return this._transformState.needTransform = !1, n.prototype.push.call(this, e, t);
          }, s.prototype._transform = function(e, t, r) {
            throw new Error("_transform() is not implemented");
          }, s.prototype._write = function(e, t, r) {
            var n = this._transformState;
            if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
              var i = this._readableState;
              (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
            }
          }, s.prototype._read = function(e) {
            var t = this._transformState;
            null !== t.writechunk && t.writecb && !t.transforming ? (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = !0;
          }, s.prototype._destroy = function(e, t) {
            var r = this;
            n.prototype._destroy.call(this, e, (function(e) {
              t(e), r.emit("close");
            }));
          };
        },
        759: (e, t, r) => {
          "use strict";
          var n = r(4155), i = r(8212);
          function o(e) {
            var t = this;
            this.next = null, this.entry = null, this.finish = function() {
              !function(e, t, r) {
                var n = e.entry;
                for (e.entry = null; n; ) {
                  var i = n.callback;
                  t.pendingcb--, i(void 0), n = n.next;
                }
                t.corkedRequestsFree ? t.corkedRequestsFree.next = e : t.corkedRequestsFree = e;
              }(t, e);
            };
          }
          e.exports = g;
          var s, a = !n.browser && [ "v0.10", "v0.9." ].indexOf(n.version.slice(0, 5)) > -1 ? setImmediate : i.nextTick;
          g.WritableState = y;
          var c = Object.create(r(6497));
          c.inherits = r(5717);
          var f, u = {
            deprecate: r(4927)
          }, h = r(4104), d = r(4591).Buffer, l = r.g.Uint8Array || function() {}, p = r(5513);
          function b() {}
          function y(e, t) {
            s = s || r(5867), e = e || {};
            var n = t instanceof s;
            this.objectMode = !!e.objectMode, n && (this.objectMode = this.objectMode || !!e.writableObjectMode);
            var c = e.highWaterMark, f = e.writableHighWaterMark, u = this.objectMode ? 16 : 16384;
            this.highWaterMark = c || 0 === c ? c : n && (f || 0 === f) ? f : u, this.highWaterMark = Math.floor(this.highWaterMark), 
            this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
            var h = !1 === e.decodeStrings;
            this.decodeStrings = !h, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, 
            this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(e) {
              !function(e, t) {
                var r = e._writableState, n = r.sync, o = r.writecb;
                if (function(e) {
                  e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
                }(r), t) !function(e, t, r, n, o) {
                  --t.pendingcb, r ? (i.nextTick(o, n), i.nextTick(E, e, t), e._writableState.errorEmitted = !0, e.emit("error", n)) : (o(n), 
                  e._writableState.errorEmitted = !0, e.emit("error", n), E(e, t));
                }(e, r, n, t, o); else {
                  var s = _(r);
                  s || r.corked || r.bufferProcessing || !r.bufferedRequest || w(e, r), n ? a(v, e, r, s, o) : v(e, r, s, o);
                }
              }(t, e);
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, 
            this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new o(this);
          }
          function g(e) {
            if (s = s || r(5867), !(f.call(g, this) || this instanceof s)) return new g(e);
            this._writableState = new y(e, this), this.writable = !0, e && ("function" == typeof e.write && (this._write = e.write), 
            "function" == typeof e.writev && (this._writev = e.writev), "function" == typeof e.destroy && (this._destroy = e.destroy), 
            "function" == typeof e.final && (this._final = e.final)), h.call(this);
          }
          function m(e, t, r, n, i, o, s) {
            t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;
          }
          function v(e, t, r, n) {
            r || function(e, t) {
              0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));
            }(e, t), t.pendingcb--, n(), E(e, t);
          }
          function w(e, t) {
            t.bufferProcessing = !0;
            var r = t.bufferedRequest;
            if (e._writev && r && r.next) {
              var n = t.bufferedRequestCount, i = new Array(n), s = t.corkedRequestsFree;
              s.entry = r;
              for (var a = 0, c = !0; r; ) i[a] = r, r.isBuf || (c = !1), r = r.next, a += 1;
              i.allBuffers = c, m(e, t, !0, t.length, i, "", s.finish), t.pendingcb++, t.lastBufferedRequest = null, s.next ? (t.corkedRequestsFree = s.next, 
              s.next = null) : t.corkedRequestsFree = new o(t), t.bufferedRequestCount = 0;
            } else {
              for (;r; ) {
                var f = r.chunk, u = r.encoding, h = r.callback;
                if (m(e, t, !1, t.objectMode ? 1 : f.length, f, u, h), r = r.next, t.bufferedRequestCount--, t.writing) break;
              }
              null === r && (t.lastBufferedRequest = null);
            }
            t.bufferedRequest = r, t.bufferProcessing = !1;
          }
          function _(e) {
            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;
          }
          function S(e, t) {
            e._final((function(r) {
              t.pendingcb--, r && e.emit("error", r), t.prefinished = !0, e.emit("prefinish"), E(e, t);
            }));
          }
          function E(e, t) {
            var r = _(t);
            return r && (function(e, t) {
              t.prefinished || t.finalCalled || ("function" == typeof e._final ? (t.pendingcb++, t.finalCalled = !0, i.nextTick(S, e, t)) : (t.prefinished = !0, 
              e.emit("prefinish")));
            }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"))), r;
          }
          c.inherits(g, h), y.prototype.getBuffer = function() {
            for (var e = this.bufferedRequest, t = []; e; ) t.push(e), e = e.next;
            return t;
          }, function() {
            try {
              Object.defineProperty(y.prototype, "buffer", {
                get: u.deprecate((function() {
                  return this.getBuffer();
                }), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
              });
            } catch (e) {}
          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (f = Function.prototype[Symbol.hasInstance], 
          Object.defineProperty(g, Symbol.hasInstance, {
            value: function(e) {
              return !!f.call(this, e) || this === g && e && e._writableState instanceof y;
            }
          })) : f = function(e) {
            return e instanceof this;
          }, g.prototype.pipe = function() {
            this.emit("error", new Error("Cannot pipe, not readable"));
          }, g.prototype.write = function(e, t, r) {
            var n, o = this._writableState, s = !1, a = !o.objectMode && (n = e, d.isBuffer(n) || n instanceof l);
            return a && !d.isBuffer(e) && (e = function(e) {
              return d.from(e);
            }(e)), "function" == typeof t && (r = t, t = null), a ? t = "buffer" : t || (t = o.defaultEncoding), "function" != typeof r && (r = b), 
            o.ended ? function(e, t) {
              var r = new Error("write after end");
              e.emit("error", r), i.nextTick(t, r);
            }(this, r) : (a || function(e, t, r, n) {
              var o = !0, s = !1;
              return null === r ? s = new TypeError("May not write null values to stream") : "string" == typeof r || void 0 === r || t.objectMode || (s = new TypeError("Invalid non-string/buffer chunk")), 
              s && (e.emit("error", s), i.nextTick(n, s), o = !1), o;
            }(this, o, e, r)) && (o.pendingcb++, s = function(e, t, r, n, i, o) {
              if (!r) {
                var s = function(e, t, r) {
                  return e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = d.from(t, r)), t;
                }(t, n, i);
                n !== s && (r = !0, i = "buffer", n = s);
              }
              var a = t.objectMode ? 1 : n.length;
              t.length += a;
              var c = t.length < t.highWaterMark;
              if (c || (t.needDrain = !0), t.writing || t.corked) {
                var f = t.lastBufferedRequest;
                t.lastBufferedRequest = {
                  chunk: n,
                  encoding: i,
                  isBuf: r,
                  callback: o,
                  next: null
                }, f ? f.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
              } else m(e, t, !1, a, n, i, o);
              return c;
            }(this, o, a, e, t, r)), s;
          }, g.prototype.cork = function() {
            this._writableState.corked++;
          }, g.prototype.uncork = function() {
            var e = this._writableState;
            e.corked && (e.corked--, e.writing || e.corked || e.finished || e.bufferProcessing || !e.bufferedRequest || w(this, e));
          }, g.prototype.setDefaultEncoding = function(e) {
            if ("string" == typeof e && (e = e.toLowerCase()), !([ "hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw" ].indexOf((e + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + e);
            return this._writableState.defaultEncoding = e, this;
          }, Object.defineProperty(g.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
              return this._writableState.highWaterMark;
            }
          }), g.prototype._write = function(e, t, r) {
            r(new Error("_write() is not implemented"));
          }, g.prototype._writev = null, g.prototype.end = function(e, t, r) {
            var n = this._writableState;
            "function" == typeof e ? (r = e, e = null, t = null) : "function" == typeof t && (r = t, t = null), null != e && this.write(e, t), 
            n.corked && (n.corked = 1, this.uncork()), n.ending || n.finished || function(e, t, r) {
              t.ending = !0, E(e, t), r && (t.finished ? i.nextTick(r) : e.once("finish", r)), t.ended = !0, e.writable = !1;
            }(this, n, r);
          }, Object.defineProperty(g.prototype, "destroyed", {
            get: function() {
              return void 0 !== this._writableState && this._writableState.destroyed;
            },
            set: function(e) {
              this._writableState && (this._writableState.destroyed = e);
            }
          }), g.prototype.destroy = p.destroy, g.prototype._undestroy = p.undestroy, g.prototype._destroy = function(e, t) {
            this.end(), t(e);
          };
        },
        3912: (e, t, r) => {
          "use strict";
          var n = r(4591).Buffer, i = r(522);
          e.exports = function() {
            function e() {
              !function(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
              }(this, e), this.head = null, this.tail = null, this.length = 0;
            }
            return e.prototype.push = function(e) {
              var t = {
                data: e,
                next: null
              };
              this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;
            }, e.prototype.unshift = function(e) {
              var t = {
                data: e,
                next: this.head
              };
              0 === this.length && (this.tail = t), this.head = t, ++this.length;
            }, e.prototype.shift = function() {
              if (0 !== this.length) {
                var e = this.head.data;
                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
              }
            }, e.prototype.clear = function() {
              this.head = this.tail = null, this.length = 0;
            }, e.prototype.join = function(e) {
              if (0 === this.length) return "";
              for (var t = this.head, r = "" + t.data; t = t.next; ) r += e + t.data;
              return r;
            }, e.prototype.concat = function(e) {
              if (0 === this.length) return n.alloc(0);
              if (1 === this.length) return this.head.data;
              for (var t, r, i = n.allocUnsafe(e >>> 0), o = this.head, s = 0; o; ) t = i, r = s, o.data.copy(t, r), s += o.data.length, 
              o = o.next;
              return i;
            }, e;
          }(), i && i.inspect && i.inspect.custom && (e.exports.prototype[i.inspect.custom] = function() {
            var e = i.inspect({
              length: this.length
            });
            return this.constructor.name + " " + e;
          });
        },
        5513: (e, t, r) => {
          "use strict";
          var n = r(8212);
          function i(e, t) {
            e.emit("error", t);
          }
          e.exports = {
            destroy: function(e, t) {
              var r = this, o = this._readableState && this._readableState.destroyed, s = this._writableState && this._writableState.destroyed;
              return o || s ? (t ? t(e) : !e || this._writableState && this._writableState.errorEmitted || n.nextTick(i, this, e), this) : (this._readableState && (this._readableState.destroyed = !0), 
              this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, (function(e) {
                !t && e ? (n.nextTick(i, r, e), r._writableState && (r._writableState.errorEmitted = !0)) : t && t(e);
              })), this);
            },
            undestroy: function() {
              this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, 
              this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, 
              this._writableState.ending = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
            }
          };
        },
        4104: (e, t, r) => {
          e.exports = r(7187).EventEmitter;
        },
        6801: (e, t, r) => {
          (t = e.exports = r(2442)).Stream = t, t.Readable = t, t.Writable = r(759), t.Duplex = r(5867), t.Transform = r(62), t.PassThrough = r(3431);
        },
        4591: (e, t, r) => {
          var n = r(8764), i = n.Buffer;
          function o(e, t) {
            for (var r in e) t[r] = e[r];
          }
          function s(e, t, r) {
            return i(e, t, r);
          }
          i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? e.exports = n : (o(n, t), t.Buffer = s), o(i, s), s.from = function(e, t, r) {
            if ("number" == typeof e) throw new TypeError("Argument must not be a number");
            return i(e, t, r);
          }, s.alloc = function(e, t, r) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            var n = i(e);
            return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
          }, s.allocUnsafe = function(e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return i(e);
          }, s.allocUnsafeSlow = function(e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return n.SlowBuffer(e);
          };
        },
        7989: (e, t, r) => {
          "use strict";
          var n = r(4591).Buffer, i = n.isEncoding || function(e) {
            switch ((e = "" + e) && e.toLowerCase()) {
             case "hex":
             case "utf8":
             case "utf-8":
             case "ascii":
             case "binary":
             case "base64":
             case "ucs2":
             case "ucs-2":
             case "utf16le":
             case "utf-16le":
             case "raw":
              return !0;

             default:
              return !1;
            }
          };
          function o(e) {
            var t;
            switch (this.encoding = function(e) {
              var t = function(e) {
                if (!e) return "utf8";
                for (var t; ;) switch (e) {
                 case "utf8":
                 case "utf-8":
                  return "utf8";

                 case "ucs2":
                 case "ucs-2":
                 case "utf16le":
                 case "utf-16le":
                  return "utf16le";

                 case "latin1":
                 case "binary":
                  return "latin1";

                 case "base64":
                 case "ascii":
                 case "hex":
                  return e;

                 default:
                  if (t) return;
                  e = ("" + e).toLowerCase(), t = !0;
                }
              }(e);
              if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
              return t || e;
            }(e), this.encoding) {
             case "utf16le":
              this.text = c, this.end = f, t = 4;
              break;

             case "utf8":
              this.fillLast = a, t = 4;
              break;

             case "base64":
              this.text = u, this.end = h, t = 3;
              break;

             default:
              return this.write = d, void (this.end = l);
            }
            this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
          }
          function s(e) {
            return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;
          }
          function a(e) {
            var t = this.lastTotal - this.lastNeed, r = function(e, t, r) {
              if (128 != (192 & t[0])) return e.lastNeed = 0, "�";
              if (e.lastNeed > 1 && t.length > 1) {
                if (128 != (192 & t[1])) return e.lastNeed = 1, "�";
                if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";
              }
            }(this, e);
            return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), 
            void (this.lastNeed -= e.length));
          }
          function c(e, t) {
            if ((e.length - t) % 2 == 0) {
              var r = e.toString("utf16le", t);
              if (r) {
                var n = r.charCodeAt(r.length - 1);
                if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], 
                r.slice(0, -1);
              }
              return r;
            }
            return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
          }
          function f(e) {
            var t = e && e.length ? this.write(e) : "";
            if (this.lastNeed) {
              var r = this.lastTotal - this.lastNeed;
              return t + this.lastChar.toString("utf16le", 0, r);
            }
            return t;
          }
          function u(e, t) {
            var r = (e.length - t) % 3;
            return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], 
            this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
          }
          function h(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
          }
          function d(e) {
            return e.toString(this.encoding);
          }
          function l(e) {
            return e && e.length ? this.write(e) : "";
          }
          t.s = o, o.prototype.write = function(e) {
            if (0 === e.length) return "";
            var t, r;
            if (this.lastNeed) {
              if (void 0 === (t = this.fillLast(e))) return "";
              r = this.lastNeed, this.lastNeed = 0;
            } else r = 0;
            return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
          }, o.prototype.end = function(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + "�" : t;
          }, o.prototype.text = function(e, t) {
            var r = function(e, t, r) {
              var n = t.length - 1;
              if (n < r) return 0;
              var i = s(t[n]);
              return i >= 0 ? (i > 0 && (e.lastNeed = i - 1), i) : --n < r || -2 === i ? 0 : (i = s(t[n])) >= 0 ? (i > 0 && (e.lastNeed = i - 2), 
              i) : --n < r || -2 === i ? 0 : (i = s(t[n])) >= 0 ? (i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i) : 0;
            }(this, e, t);
            if (!this.lastNeed) return e.toString("utf8", t);
            this.lastTotal = r;
            var n = e.length - (r - this.lastNeed);
            return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
          }, o.prototype.fillLast = function(e) {
            if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
            e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
          };
        },
        4650: (e, t, r) => {
          var n = r(4155), i = r(6801).Transform, o = r(9539).inherits, s = r(7529);
          function a(e) {
            i.call(this, e), this._destroyed = !1;
          }
          function c(e, t, r) {
            r(null, e);
          }
          function f(e) {
            return function(t, r, n) {
              return "function" == typeof t && (n = r, r = t, t = {}), "function" != typeof r && (r = c), "function" != typeof n && (n = null), 
              e(t, r, n);
            };
          }
          o(a, i), a.prototype.destroy = function(e) {
            if (!this._destroyed) {
              this._destroyed = !0;
              var t = this;
              n.nextTick((function() {
                e && t.emit("error", e), t.emit("close");
              }));
            }
          }, e.exports = f((function(e, t, r) {
            var n = new a(e);
            return n._transform = t, r && (n._flush = r), n;
          })), e.exports.ctor = f((function(e, t, r) {
            function n(t) {
              if (!(this instanceof n)) return new n(t);
              this.options = s(e, t), a.call(this, this.options);
            }
            return o(n, a), n.prototype._transform = t, r && (n.prototype._flush = r), n;
          })), e.exports.obj = f((function(e, t, r) {
            var n = new a(s({
              objectMode: !0,
              highWaterMark: 16
            }, e));
            return n._transform = t, r && (n._flush = r), n;
          }));
        },
        2511: function(e, t, r) {
          var n;
          e = r.nmd(e), function(i) {
            t && t.nodeType, e && e.nodeType;
            var o = "object" == typeof r.g && r.g;
            o.global !== o && o.window !== o && o.self;
            var s, a = 2147483647, c = 36, f = /^xn--/, u = /[^\x20-\x7E]/, h = /[\x2E\u3002\uFF0E\uFF61]/g, d = {
              overflow: "Overflow: input needs wider integers to process",
              "not-basic": "Illegal input >= 0x80 (not a basic code point)",
              "invalid-input": "Invalid input"
            }, l = Math.floor, p = String.fromCharCode;
            function b(e) {
              throw RangeError(d[e]);
            }
            function y(e, t) {
              for (var r = e.length, n = []; r--; ) n[r] = t(e[r]);
              return n;
            }
            function g(e, t) {
              var r = e.split("@"), n = "";
              return r.length > 1 && (n = r[0] + "@", e = r[1]), n + y((e = e.replace(h, ".")).split("."), t).join(".");
            }
            function m(e) {
              for (var t, r, n = [], i = 0, o = e.length; i < o; ) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), 
              i--) : n.push(t);
              return n;
            }
            function v(e) {
              return y(e, (function(e) {
                var t = "";
                return e > 65535 && (t += p((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t + p(e);
              })).join("");
            }
            function w(e, t) {
              return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
            }
            function _(e, t, r) {
              var n = 0;
              for (e = r ? l(e / 700) : e >> 1, e += l(e / t); e > 455; n += c) e = l(e / 35);
              return l(n + 36 * e / (e + 38));
            }
            function S(e) {
              var t, r, n, i, o, s, f, u, h, d, p, y = [], g = e.length, m = 0, w = 128, S = 72;
              for ((r = e.lastIndexOf("-")) < 0 && (r = 0), n = 0; n < r; ++n) e.charCodeAt(n) >= 128 && b("not-basic"), y.push(e.charCodeAt(n));
              for (i = r > 0 ? r + 1 : 0; i < g; ) {
                for (o = m, s = 1, f = c; i >= g && b("invalid-input"), ((u = (p = e.charCodeAt(i++)) - 48 < 10 ? p - 22 : p - 65 < 26 ? p - 65 : p - 97 < 26 ? p - 97 : c) >= c || u > l((a - m) / s)) && b("overflow"), 
                m += u * s, !(u < (h = f <= S ? 1 : f >= S + 26 ? 26 : f - S)); f += c) s > l(a / (d = c - h)) && b("overflow"), s *= d;
                S = _(m - o, t = y.length + 1, 0 == o), l(m / t) > a - w && b("overflow"), w += l(m / t), m %= t, y.splice(m++, 0, w);
              }
              return v(y);
            }
            function E(e) {
              var t, r, n, i, o, s, f, u, h, d, y, g, v, S, E, A = [];
              for (g = (e = m(e)).length, t = 128, r = 0, o = 72, s = 0; s < g; ++s) (y = e[s]) < 128 && A.push(p(y));
              for (n = i = A.length, i && A.push("-"); n < g; ) {
                for (f = a, s = 0; s < g; ++s) (y = e[s]) >= t && y < f && (f = y);
                for (f - t > l((a - r) / (v = n + 1)) && b("overflow"), r += (f - t) * v, t = f, s = 0; s < g; ++s) if ((y = e[s]) < t && ++r > a && b("overflow"), 
                y == t) {
                  for (u = r, h = c; !(u < (d = h <= o ? 1 : h >= o + 26 ? 26 : h - o)); h += c) E = u - d, S = c - d, A.push(p(w(d + E % S, 0))), 
                  u = l(E / S);
                  A.push(p(w(u, 0))), o = _(r, v, n == i), r = 0, ++n;
                }
                ++r, ++t;
              }
              return A.join("");
            }
            s = {
              version: "1.3.2",
              ucs2: {
                decode: m,
                encode: v
              },
              decode: S,
              encode: E,
              toASCII: function(e) {
                return g(e, (function(e) {
                  return u.test(e) ? "xn--" + E(e) : e;
                }));
              },
              toUnicode: function(e) {
                return g(e, (function(e) {
                  return f.test(e) ? S(e.slice(4).toLowerCase()) : e;
                }));
              }
            }, void 0 === (n = function() {
              return s;
            }.call(t, r, t, e)) || (e.exports = n);
          }();
        },
        8575: (e, t, r) => {
          "use strict";
          var n = r(2511), i = r(2502);
          function o() {
            this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, 
            this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
          }
          t.parse = v, t.resolve = function(e, t) {
            return v(e, !1, !0).resolve(t);
          }, t.resolveObject = function(e, t) {
            return e ? v(e, !1, !0).resolveObject(t) : t;
          }, t.format = function(e) {
            return i.isString(e) && (e = v(e)), e instanceof o ? e.format() : o.prototype.format.call(e);
          }, t.Url = o;
          var s = /^([a-z0-9.+-]+:)/i, a = /:[0-9]*$/, c = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, f = [ "{", "}", "|", "\\", "^", "`" ].concat([ "<", ">", '"', "`", " ", "\r", "\n", "\t" ]), u = [ "'" ].concat(f), h = [ "%", "/", "?", ";", "#" ].concat(u), d = [ "/", "?", "#" ], l = /^[+a-z0-9A-Z_-]{0,63}$/, p = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, b = {
            javascript: !0,
            "javascript:": !0
          }, y = {
            javascript: !0,
            "javascript:": !0
          }, g = {
            http: !0,
            https: !0,
            ftp: !0,
            gopher: !0,
            file: !0,
            "http:": !0,
            "https:": !0,
            "ftp:": !0,
            "gopher:": !0,
            "file:": !0
          }, m = r(7673);
          function v(e, t, r) {
            if (e && i.isObject(e) && e instanceof o) return e;
            var n = new o;
            return n.parse(e, t, r), n;
          }
          o.prototype.parse = function(e, t, r) {
            if (!i.isString(e)) throw new TypeError("Parameter 'url' must be a string, not " + typeof e);
            var o = e.indexOf("?"), a = -1 !== o && o < e.indexOf("#") ? "?" : "#", f = e.split(a);
            f[0] = f[0].replace(/\\/g, "/");
            var v = e = f.join(a);
            if (v = v.trim(), !r && 1 === e.split("#").length) {
              var w = c.exec(v);
              if (w) return this.path = v, this.href = v, this.pathname = w[1], w[2] ? (this.search = w[2], this.query = t ? m.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", 
              this.query = {}), this;
            }
            var _ = s.exec(v);
            if (_) {
              var S = (_ = _[0]).toLowerCase();
              this.protocol = S, v = v.substr(_.length);
            }
            if (r || _ || v.match(/^\/\/[^@\/]+@[^@\/]+/)) {
              var E = "//" === v.substr(0, 2);
              !E || _ && y[_] || (v = v.substr(2), this.slashes = !0);
            }
            if (!y[_] && (E || _ && !g[_])) {
              for (var A, x, k = -1, P = 0; P < d.length; P++) -1 !== (O = v.indexOf(d[P])) && (-1 === k || O < k) && (k = O);
              for (-1 !== (x = -1 === k ? v.lastIndexOf("@") : v.lastIndexOf("@", k)) && (A = v.slice(0, x), v = v.slice(x + 1), this.auth = decodeURIComponent(A)), 
              k = -1, P = 0; P < h.length; P++) {
                var O;
                -1 !== (O = v.indexOf(h[P])) && (-1 === k || O < k) && (k = O);
              }
              -1 === k && (k = v.length), this.host = v.slice(0, k), v = v.slice(k), this.parseHost(), this.hostname = this.hostname || "";
              var M = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
              if (!M) for (var I = this.hostname.split(/\./), T = (P = 0, I.length); P < T; P++) {
                var R = I[P];
                if (R && !R.match(l)) {
                  for (var C = "", N = 0, j = R.length; N < j; N++) R.charCodeAt(N) > 127 ? C += "x" : C += R[N];
                  if (!C.match(l)) {
                    var B = I.slice(0, P), L = I.slice(P + 1), D = R.match(p);
                    D && (B.push(D[1]), L.unshift(D[2])), L.length && (v = "/" + L.join(".") + v), this.hostname = B.join(".");
                    break;
                  }
                }
              }
              this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), M || (this.hostname = n.toASCII(this.hostname));
              var U = this.port ? ":" + this.port : "", q = this.hostname || "";
              this.host = q + U, this.href += this.host, M && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== v[0] && (v = "/" + v));
            }
            if (!b[S]) for (P = 0, T = u.length; P < T; P++) {
              var F = u[P];
              if (-1 !== v.indexOf(F)) {
                var H = encodeURIComponent(F);
                H === F && (H = escape(F)), v = v.split(F).join(H);
              }
            }
            var z = v.indexOf("#");
            -1 !== z && (this.hash = v.substr(z), v = v.slice(0, z));
            var K = v.indexOf("?");
            if (-1 !== K ? (this.search = v.substr(K), this.query = v.substr(K + 1), t && (this.query = m.parse(this.query)), v = v.slice(0, K)) : t && (this.search = "", 
            this.query = {}), v && (this.pathname = v), g[S] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
              U = this.pathname || "";
              var V = this.search || "";
              this.path = U + V;
            }
            return this.href = this.format(), this;
          }, o.prototype.format = function() {
            var e = this.auth || "";
            e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");
            var t = this.protocol || "", r = this.pathname || "", n = this.hash || "", o = !1, s = "";
            this.host ? o = e + this.host : this.hostname && (o = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), 
            this.port && (o += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (s = m.stringify(this.query));
            var a = this.search || s && "?" + s || "";
            return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || g[t]) && !1 !== o ? (o = "//" + (o || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : o || (o = ""), 
            n && "#" !== n.charAt(0) && (n = "#" + n), a && "?" !== a.charAt(0) && (a = "?" + a), t + o + (r = r.replace(/[?#]/g, (function(e) {
              return encodeURIComponent(e);
            }))) + (a = a.replace("#", "%23")) + n;
          }, o.prototype.resolve = function(e) {
            return this.resolveObject(v(e, !1, !0)).format();
          }, o.prototype.resolveObject = function(e) {
            if (i.isString(e)) {
              var t = new o;
              t.parse(e, !1, !0), e = t;
            }
            for (var r = new o, n = Object.keys(this), s = 0; s < n.length; s++) {
              var a = n[s];
              r[a] = this[a];
            }
            if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;
            if (e.slashes && !e.protocol) {
              for (var c = Object.keys(e), f = 0; f < c.length; f++) {
                var u = c[f];
                "protocol" !== u && (r[u] = e[u]);
              }
              return g[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;
            }
            if (e.protocol && e.protocol !== r.protocol) {
              if (!g[e.protocol]) {
                for (var h = Object.keys(e), d = 0; d < h.length; d++) {
                  var l = h[d];
                  r[l] = e[l];
                }
                return r.href = r.format(), r;
              }
              if (r.protocol = e.protocol, e.host || y[e.protocol]) r.pathname = e.pathname; else {
                for (var p = (e.pathname || "").split("/"); p.length && !(e.host = p.shift()); ) ;
                e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== p[0] && p.unshift(""), p.length < 2 && p.unshift(""), r.pathname = p.join("/");
              }
              if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, 
              r.pathname || r.search) {
                var b = r.pathname || "", m = r.search || "";
                r.path = b + m;
              }
              return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
            }
            var v = r.pathname && "/" === r.pathname.charAt(0), w = e.host || e.pathname && "/" === e.pathname.charAt(0), _ = w || v || r.host && e.pathname, S = _, E = r.pathname && r.pathname.split("/") || [], A = (p = e.pathname && e.pathname.split("/") || [], 
            r.protocol && !g[r.protocol]);
            if (A && (r.hostname = "", r.port = null, r.host && ("" === E[0] ? E[0] = r.host : E.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, 
            e.port = null, e.host && ("" === p[0] ? p[0] = e.host : p.unshift(e.host)), e.host = null), _ = _ && ("" === p[0] || "" === E[0])), 
            w) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, 
            r.search = e.search, r.query = e.query, E = p; else if (p.length) E || (E = []), E.pop(), E = E.concat(p), r.search = e.search, 
            r.query = e.query; else if (!i.isNullOrUndefined(e.search)) return A && (r.hostname = r.host = E.shift(), (M = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = M.shift(), 
            r.host = r.hostname = M.shift())), r.search = e.search, r.query = e.query, i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), 
            r.href = r.format(), r;
            if (!E.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;
            for (var x = E.slice(-1)[0], k = (r.host || e.host || E.length > 1) && ("." === x || ".." === x) || "" === x, P = 0, O = E.length; O >= 0; O--) "." === (x = E[O]) ? E.splice(O, 1) : ".." === x ? (E.splice(O, 1), 
            P++) : P && (E.splice(O, 1), P--);
            if (!_ && !S) for (;P--; P) E.unshift("..");
            !_ || "" === E[0] || E[0] && "/" === E[0].charAt(0) || E.unshift(""), k && "/" !== E.join("/").substr(-1) && E.push("");
            var M, I = "" === E[0] || E[0] && "/" === E[0].charAt(0);
            return A && (r.hostname = r.host = I ? "" : E.length ? E.shift() : "", (M = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = M.shift(), 
            r.host = r.hostname = M.shift())), (_ = _ || r.host && E.length) && !I && E.unshift(""), E.length ? r.pathname = E.join("/") : (r.pathname = null, 
            r.path = null), i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), 
            r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
          }, o.prototype.parseHost = function() {
            var e = this.host, t = a.exec(e);
            t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);
          };
        },
        2502: e => {
          "use strict";
          e.exports = {
            isString: function(e) {
              return "string" == typeof e;
            },
            isObject: function(e) {
              return "object" == typeof e && null !== e;
            },
            isNull: function(e) {
              return null === e;
            },
            isNullOrUndefined: function(e) {
              return null == e;
            }
          };
        },
        7458: (e, t) => {
          !function(e) {
            var t, r, n, i = String.fromCharCode;
            function o(e) {
              for (var t, r, n = [], i = 0, o = e.length; i < o; ) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), 
              i--) : n.push(t);
              return n;
            }
            function s(e) {
              if (e >= 55296 && e <= 57343) throw Error("Lone surrogate U+" + e.toString(16).toUpperCase() + " is not a scalar value");
            }
            function a(e, t) {
              return i(e >> t & 63 | 128);
            }
            function c(e) {
              if (0 == (4294967168 & e)) return i(e);
              var t = "";
              return 0 == (4294965248 & e) ? t = i(e >> 6 & 31 | 192) : 0 == (4294901760 & e) ? (s(e), t = i(e >> 12 & 15 | 224), t += a(e, 6)) : 0 == (4292870144 & e) && (t = i(e >> 18 & 7 | 240), 
              t += a(e, 12), t += a(e, 6)), t + i(63 & e | 128);
            }
            function f() {
              if (n >= r) throw Error("Invalid byte index");
              var e = 255 & t[n];
              if (n++, 128 == (192 & e)) return 63 & e;
              throw Error("Invalid continuation byte");
            }
            function u() {
              var e, i;
              if (n > r) throw Error("Invalid byte index");
              if (n == r) return !1;
              if (e = 255 & t[n], n++, 0 == (128 & e)) return e;
              if (192 == (224 & e)) {
                if ((i = (31 & e) << 6 | f()) >= 128) return i;
                throw Error("Invalid continuation byte");
              }
              if (224 == (240 & e)) {
                if ((i = (15 & e) << 12 | f() << 6 | f()) >= 2048) return s(i), i;
                throw Error("Invalid continuation byte");
              }
              if (240 == (248 & e) && (i = (7 & e) << 18 | f() << 12 | f() << 6 | f()) >= 65536 && i <= 1114111) return i;
              throw Error("Invalid UTF-8 detected");
            }
            e.version = "3.0.0", e.encode = function(e) {
              for (var t = o(e), r = t.length, n = -1, i = ""; ++n < r; ) i += c(t[n]);
              return i;
            }, e.decode = function(e) {
              t = o(e), r = t.length, n = 0;
              for (var s, a = []; !1 !== (s = u()); ) a.push(s);
              return function(e) {
                for (var t, r = e.length, n = -1, o = ""; ++n < r; ) (t = e[n]) > 65535 && (o += i((t -= 65536) >>> 10 & 1023 | 55296), 
                t = 56320 | 1023 & t), o += i(t);
                return o;
              }(a);
            };
          }(t);
        },
        4927: (e, t, r) => {
          function i(e) {
            try {
              if (!r.g.localStorage) return !1;
            } catch (e) {
              return !1;
            }
            var t = r.g.localStorage[e];
            return null != t && "true" === String(t).toLowerCase();
          }
          e.exports = function(e, t) {
            if (i("noDeprecation")) return e;
            var r = !1;
            return function() {
              if (!r) {
                if (i("throwDeprecation")) throw new Error(t);
                i("traceDeprecation") ? n.trace(t) : n.warn(t), r = !0;
              }
              return e.apply(this, arguments);
            };
          };
        },
        384: e => {
          e.exports = function(e) {
            return e && "object" == typeof e && "function" == typeof e.copy && "function" == typeof e.fill && "function" == typeof e.readUInt8;
          };
        },
        5955: (e, t, r) => {
          "use strict";
          var n = r(2584), i = r(8662), o = r(6430), s = r(5692);
          function a(e) {
            return e.call.bind(e);
          }
          var c = "undefined" != typeof BigInt, f = "undefined" != typeof Symbol, u = a(Object.prototype.toString), h = a(Number.prototype.valueOf), d = a(String.prototype.valueOf), l = a(Boolean.prototype.valueOf);
          if (c) var p = a(BigInt.prototype.valueOf);
          if (f) var b = a(Symbol.prototype.valueOf);
          function y(e, t) {
            if ("object" != typeof e) return !1;
            try {
              return t(e), !0;
            } catch (e) {
              return !1;
            }
          }
          function g(e) {
            return "[object Map]" === u(e);
          }
          function m(e) {
            return "[object Set]" === u(e);
          }
          function v(e) {
            return "[object WeakMap]" === u(e);
          }
          function w(e) {
            return "[object WeakSet]" === u(e);
          }
          function _(e) {
            return "[object ArrayBuffer]" === u(e);
          }
          function S(e) {
            return "undefined" != typeof ArrayBuffer && (_.working ? _(e) : e instanceof ArrayBuffer);
          }
          function E(e) {
            return "[object DataView]" === u(e);
          }
          function A(e) {
            return "undefined" != typeof DataView && (E.working ? E(e) : e instanceof DataView);
          }
          t.isArgumentsObject = n, t.isGeneratorFunction = i, t.isTypedArray = s, t.isPromise = function(e) {
            return "undefined" != typeof Promise && e instanceof Promise || null !== e && "object" == typeof e && "function" == typeof e.then && "function" == typeof e.catch;
          }, t.isArrayBufferView = function(e) {
            return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e) : s(e) || A(e);
          }, t.isUint8Array = function(e) {
            return "Uint8Array" === o(e);
          }, t.isUint8ClampedArray = function(e) {
            return "Uint8ClampedArray" === o(e);
          }, t.isUint16Array = function(e) {
            return "Uint16Array" === o(e);
          }, t.isUint32Array = function(e) {
            return "Uint32Array" === o(e);
          }, t.isInt8Array = function(e) {
            return "Int8Array" === o(e);
          }, t.isInt16Array = function(e) {
            return "Int16Array" === o(e);
          }, t.isInt32Array = function(e) {
            return "Int32Array" === o(e);
          }, t.isFloat32Array = function(e) {
            return "Float32Array" === o(e);
          }, t.isFloat64Array = function(e) {
            return "Float64Array" === o(e);
          }, t.isBigInt64Array = function(e) {
            return "BigInt64Array" === o(e);
          }, t.isBigUint64Array = function(e) {
            return "BigUint64Array" === o(e);
          }, g.working = "undefined" != typeof Map && g(new Map), t.isMap = function(e) {
            return "undefined" != typeof Map && (g.working ? g(e) : e instanceof Map);
          }, m.working = "undefined" != typeof Set && m(new Set), t.isSet = function(e) {
            return "undefined" != typeof Set && (m.working ? m(e) : e instanceof Set);
          }, v.working = "undefined" != typeof WeakMap && v(new WeakMap), t.isWeakMap = function(e) {
            return "undefined" != typeof WeakMap && (v.working ? v(e) : e instanceof WeakMap);
          }, w.working = "undefined" != typeof WeakSet && w(new WeakSet), t.isWeakSet = function(e) {
            return w(e);
          }, _.working = "undefined" != typeof ArrayBuffer && _(new ArrayBuffer), t.isArrayBuffer = S, E.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && E(new DataView(new ArrayBuffer(1), 0, 1)), 
          t.isDataView = A;
          var x = "undefined" != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;
          function k(e) {
            return "[object SharedArrayBuffer]" === u(e);
          }
          function P(e) {
            return void 0 !== x && (void 0 === k.working && (k.working = k(new x)), k.working ? k(e) : e instanceof x);
          }
          function O(e) {
            return y(e, h);
          }
          function M(e) {
            return y(e, d);
          }
          function I(e) {
            return y(e, l);
          }
          function T(e) {
            return c && y(e, p);
          }
          function R(e) {
            return f && y(e, b);
          }
          t.isSharedArrayBuffer = P, t.isAsyncFunction = function(e) {
            return "[object AsyncFunction]" === u(e);
          }, t.isMapIterator = function(e) {
            return "[object Map Iterator]" === u(e);
          }, t.isSetIterator = function(e) {
            return "[object Set Iterator]" === u(e);
          }, t.isGeneratorObject = function(e) {
            return "[object Generator]" === u(e);
          }, t.isWebAssemblyCompiledModule = function(e) {
            return "[object WebAssembly.Module]" === u(e);
          }, t.isNumberObject = O, t.isStringObject = M, t.isBooleanObject = I, t.isBigIntObject = T, t.isSymbolObject = R, t.isBoxedPrimitive = function(e) {
            return O(e) || M(e) || I(e) || T(e) || R(e);
          }, t.isAnyArrayBuffer = function(e) {
            return "undefined" != typeof Uint8Array && (S(e) || P(e));
          }, [ "isProxy", "isExternal", "isModuleNamespaceObject" ].forEach((function(e) {
            Object.defineProperty(t, e, {
              enumerable: !1,
              value: function() {
                throw new Error(e + " is not supported in userland");
              }
            });
          }));
        },
        9539: (e, t, r) => {
          var i = r(4155), o = Object.getOwnPropertyDescriptors || function(e) {
            for (var t = Object.keys(e), r = {}, n = 0; n < t.length; n++) r[t[n]] = Object.getOwnPropertyDescriptor(e, t[n]);
            return r;
          }, s = /%[sdj%]/g;
          t.format = function(e) {
            if (!w(e)) {
              for (var t = [], r = 0; r < arguments.length; r++) t.push(u(arguments[r]));
              return t.join(" ");
            }
            r = 1;
            for (var n = arguments, i = n.length, o = String(e).replace(s, (function(e) {
              if ("%%" === e) return "%";
              if (r >= i) return e;
              switch (e) {
               case "%s":
                return String(n[r++]);

               case "%d":
                return Number(n[r++]);

               case "%j":
                try {
                  return JSON.stringify(n[r++]);
                } catch (e) {
                  return "[Circular]";
                }

               default:
                return e;
              }
            })), a = n[r]; r < i; a = n[++r]) m(a) || !E(a) ? o += " " + a : o += " " + u(a);
            return o;
          }, t.deprecate = function(e, r) {
            if (void 0 !== i && !0 === i.noDeprecation) return e;
            if (void 0 === i) return function() {
              return t.deprecate(e, r).apply(this, arguments);
            };
            var o = !1;
            return function() {
              if (!o) {
                if (i.throwDeprecation) throw new Error(r);
                i.traceDeprecation ? n.trace(r) : n.error(r), o = !0;
              }
              return e.apply(this, arguments);
            };
          };
          var a = {}, c = /^$/;
          if (i.env.NODE_DEBUG) {
            var f = i.env.NODE_DEBUG;
            f = f.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), c = new RegExp("^" + f + "$", "i");
          }
          function u(e, r) {
            var n = {
              seen: [],
              stylize: d
            };
            return arguments.length >= 3 && (n.depth = arguments[2]), arguments.length >= 4 && (n.colors = arguments[3]), g(r) ? n.showHidden = r : r && t._extend(n, r), 
            _(n.showHidden) && (n.showHidden = !1), _(n.depth) && (n.depth = 2), _(n.colors) && (n.colors = !1), _(n.customInspect) && (n.customInspect = !0), 
            n.colors && (n.stylize = h), l(n, e, n.depth);
          }
          function h(e, t) {
            var r = u.styles[t];
            return r ? "[" + u.colors[r][0] + "m" + e + "[" + u.colors[r][1] + "m" : e;
          }
          function d(e, t) {
            return e;
          }
          function l(e, r, n) {
            if (e.customInspect && r && k(r.inspect) && r.inspect !== t.inspect && (!r.constructor || r.constructor.prototype !== r)) {
              var i = r.inspect(n, e);
              return w(i) || (i = l(e, i, n)), i;
            }
            var o = function(e, t) {
              if (_(t)) return e.stylize("undefined", "undefined");
              if (w(t)) {
                var r = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return e.stylize(r, "string");
              }
              return v(t) ? e.stylize("" + t, "number") : g(t) ? e.stylize("" + t, "boolean") : m(t) ? e.stylize("null", "null") : void 0;
            }(e, r);
            if (o) return o;
            var s = Object.keys(r), a = function(e) {
              var t = {};
              return e.forEach((function(e, r) {
                t[e] = !0;
              })), t;
            }(s);
            if (e.showHidden && (s = Object.getOwnPropertyNames(r)), x(r) && (s.indexOf("message") >= 0 || s.indexOf("description") >= 0)) return p(r);
            if (0 === s.length) {
              if (k(r)) {
                var c = r.name ? ": " + r.name : "";
                return e.stylize("[Function" + c + "]", "special");
              }
              if (S(r)) return e.stylize(RegExp.prototype.toString.call(r), "regexp");
              if (A(r)) return e.stylize(Date.prototype.toString.call(r), "date");
              if (x(r)) return p(r);
            }
            var f, u = "", h = !1, d = [ "{", "}" ];
            return y(r) && (h = !0, d = [ "[", "]" ]), k(r) && (u = " [Function" + (r.name ? ": " + r.name : "") + "]"), S(r) && (u = " " + RegExp.prototype.toString.call(r)), 
            A(r) && (u = " " + Date.prototype.toUTCString.call(r)), x(r) && (u = " " + p(r)), 0 !== s.length || h && 0 != r.length ? n < 0 ? S(r) ? e.stylize(RegExp.prototype.toString.call(r), "regexp") : e.stylize("[Object]", "special") : (e.seen.push(r), 
            f = h ? function(e, t, r, n, i) {
              for (var o = [], s = 0, a = t.length; s < a; ++s) T(t, String(s)) ? o.push(b(e, t, r, n, String(s), !0)) : o.push("");
              return i.forEach((function(i) {
                i.match(/^\d+$/) || o.push(b(e, t, r, n, i, !0));
              })), o;
            }(e, r, n, a, s) : s.map((function(t) {
              return b(e, r, n, a, t, h);
            })), e.seen.pop(), function(e, t, r) {
              return e.reduce((function(e, t) {
                return t.indexOf("\n"), e + t.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }), 0) > 60 ? r[0] + ("" === t ? "" : t + "\n ") + " " + e.join(",\n  ") + " " + r[1] : r[0] + t + " " + e.join(", ") + " " + r[1];
            }(f, u, d)) : d[0] + u + d[1];
          }
          function p(e) {
            return "[" + Error.prototype.toString.call(e) + "]";
          }
          function b(e, t, r, n, i, o) {
            var s, a, c;
            if ((c = Object.getOwnPropertyDescriptor(t, i) || {
              value: t[i]
            }).get ? a = c.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : c.set && (a = e.stylize("[Setter]", "special")), 
            T(n, i) || (s = "[" + i + "]"), a || (e.seen.indexOf(c.value) < 0 ? (a = m(r) ? l(e, c.value, null) : l(e, c.value, r - 1)).indexOf("\n") > -1 && (a = o ? a.split("\n").map((function(e) {
              return "  " + e;
            })).join("\n").substr(2) : "\n" + a.split("\n").map((function(e) {
              return "   " + e;
            })).join("\n")) : a = e.stylize("[Circular]", "special")), _(s)) {
              if (o && i.match(/^\d+$/)) return a;
              (s = JSON.stringify("" + i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = e.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), 
              s = e.stylize(s, "string"));
            }
            return s + ": " + a;
          }
          function y(e) {
            return Array.isArray(e);
          }
          function g(e) {
            return "boolean" == typeof e;
          }
          function m(e) {
            return null === e;
          }
          function v(e) {
            return "number" == typeof e;
          }
          function w(e) {
            return "string" == typeof e;
          }
          function _(e) {
            return void 0 === e;
          }
          function S(e) {
            return E(e) && "[object RegExp]" === P(e);
          }
          function E(e) {
            return "object" == typeof e && null !== e;
          }
          function A(e) {
            return E(e) && "[object Date]" === P(e);
          }
          function x(e) {
            return E(e) && ("[object Error]" === P(e) || e instanceof Error);
          }
          function k(e) {
            return "function" == typeof e;
          }
          function P(e) {
            return Object.prototype.toString.call(e);
          }
          function O(e) {
            return e < 10 ? "0" + e.toString(10) : e.toString(10);
          }
          t.debuglog = function(e) {
            if (e = e.toUpperCase(), !a[e]) if (c.test(e)) {
              var r = i.pid;
              a[e] = function() {
                var i = t.format.apply(t, arguments);
                n.error("%s %d: %s", e, r, i);
              };
            } else a[e] = function() {};
            return a[e];
          }, t.inspect = u, u.colors = {
            bold: [ 1, 22 ],
            italic: [ 3, 23 ],
            underline: [ 4, 24 ],
            inverse: [ 7, 27 ],
            white: [ 37, 39 ],
            grey: [ 90, 39 ],
            black: [ 30, 39 ],
            blue: [ 34, 39 ],
            cyan: [ 36, 39 ],
            green: [ 32, 39 ],
            magenta: [ 35, 39 ],
            red: [ 31, 39 ],
            yellow: [ 33, 39 ]
          }, u.styles = {
            special: "cyan",
            number: "yellow",
            boolean: "yellow",
            undefined: "grey",
            null: "bold",
            string: "green",
            date: "magenta",
            regexp: "red"
          }, t.types = r(5955), t.isArray = y, t.isBoolean = g, t.isNull = m, t.isNullOrUndefined = function(e) {
            return null == e;
          }, t.isNumber = v, t.isString = w, t.isSymbol = function(e) {
            return "symbol" == typeof e;
          }, t.isUndefined = _, t.isRegExp = S, t.types.isRegExp = S, t.isObject = E, t.isDate = A, t.types.isDate = A, t.isError = x, 
          t.types.isNativeError = x, t.isFunction = k, t.isPrimitive = function(e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == typeof e || void 0 === e;
          }, t.isBuffer = r(384);
          var M = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
          function I() {
            var e = new Date, t = [ O(e.getHours()), O(e.getMinutes()), O(e.getSeconds()) ].join(":");
            return [ e.getDate(), M[e.getMonth()], t ].join(" ");
          }
          function T(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          t.log = function() {
            n.log("%s - %s", I(), t.format.apply(t, arguments));
          }, t.inherits = r(5717), t._extend = function(e, t) {
            if (!t || !E(t)) return e;
            for (var r = Object.keys(t), n = r.length; n--; ) e[r[n]] = t[r[n]];
            return e;
          };
          var R = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
          function C(e, t) {
            if (!e) {
              var r = new Error("Promise was rejected with a falsy value");
              r.reason = e, e = r;
            }
            return t(e);
          }
          t.promisify = function(e) {
            if ("function" != typeof e) throw new TypeError('The "original" argument must be of type Function');
            if (R && e[R]) {
              var t;
              if ("function" != typeof (t = e[R])) throw new TypeError('The "util.promisify.custom" argument must be of type Function');
              return Object.defineProperty(t, R, {
                value: t,
                enumerable: !1,
                writable: !1,
                configurable: !0
              }), t;
            }
            function t() {
              for (var t, r, n = new Promise((function(e, n) {
                t = e, r = n;
              })), i = [], o = 0; o < arguments.length; o++) i.push(arguments[o]);
              i.push((function(e, n) {
                e ? r(e) : t(n);
              }));
              try {
                e.apply(this, i);
              } catch (e) {
                r(e);
              }
              return n;
            }
            return Object.setPrototypeOf(t, Object.getPrototypeOf(e)), R && Object.defineProperty(t, R, {
              value: t,
              enumerable: !1,
              writable: !1,
              configurable: !0
            }), Object.defineProperties(t, o(e));
          }, t.promisify.custom = R, t.callbackify = function(e) {
            if ("function" != typeof e) throw new TypeError('The "original" argument must be of type Function');
            function t() {
              for (var t = [], r = 0; r < arguments.length; r++) t.push(arguments[r]);
              var n = t.pop();
              if ("function" != typeof n) throw new TypeError("The last argument must be of type Function");
              var o = this, s = function() {
                return n.apply(o, arguments);
              };
              e.apply(this, t).then((function(e) {
                i.nextTick(s.bind(null, null, e));
              }), (function(e) {
                i.nextTick(C.bind(null, e, s));
              }));
            }
            return Object.setPrototypeOf(t, Object.getPrototypeOf(e)), Object.defineProperties(t, o(e)), t;
          };
        },
        4928: e => {
          "use strict";
          e.exports = {
            ErrorResponse: function(e) {
              var t = e && e.error && e.error.message ? e.error.message : JSON.stringify(e), r = e.error && e.error.data ? e.error.data : null, n = new Error("Returned error: " + t);
              return n.data = r, n;
            },
            InvalidNumberOfParams: function(e, t, r) {
              return new Error('Invalid number of parameters for "' + r + '". Got ' + e + " expected " + t + "!");
            },
            InvalidConnection: function(e, t) {
              return this.ConnectionError("CONNECTION ERROR: Couldn't connect to node " + e + ".", t);
            },
            InvalidProvider: function() {
              return new Error("Provider not set or invalid");
            },
            InvalidResponse: function(e) {
              var t = e && e.error && e.error.message ? e.error.message : "Invalid JSON RPC response: " + JSON.stringify(e);
              return new Error(t);
            },
            ConnectionTimeout: function(e) {
              return new Error("CONNECTION TIMEOUT: timeout of " + e + " ms achived");
            },
            ConnectionNotOpenError: function(e) {
              return this.ConnectionError("connection not open on send()", e);
            },
            ConnectionCloseError: function(e) {
              return "object" == typeof e && e.code && e.reason ? this.ConnectionError("CONNECTION ERROR: The connection got closed with the close code `" + e.code + "` and the following reason string `" + e.reason + "`", e) : new Error("CONNECTION ERROR: The connection closed unexpectedly");
            },
            MaxAttemptsReachedOnReconnectingError: function() {
              return new Error("Maximum number of reconnect attempts reached!");
            },
            PendingRequestsOnReconnectingError: function() {
              return new Error("CONNECTION ERROR: Provider started to reconnect before the response got received!");
            },
            ConnectionError: function(e, t) {
              const r = new Error(e);
              return t && (r.code = t.code, r.reason = t.reason), r;
            },
            RevertInstructionError: function(e, t) {
              var r = new Error("Your request got reverted with the following reason string: " + e);
              return r.reason = e, r.signature = t, r;
            },
            TransactionRevertInstructionError: function(e, t, r) {
              var n = new Error("Transaction has been reverted by the EVM:\n" + JSON.stringify(r, null, 2));
              return n.reason = e, n.signature = t, n.receipt = r, n;
            },
            TransactionError: function(e, t) {
              var r = new Error(e);
              return r.receipt = t, r;
            },
            NoContractAddressFoundError: function(e) {
              return this.TransactionError("The transaction receipt didn't contain a contract address.", e);
            },
            ContractCodeNotStoredError: function(e) {
              return this.TransactionError("The contract code couldn't be stored, please check your gas limit.", e);
            },
            TransactionRevertedWithoutReasonError: function(e) {
              return this.TransactionError("Transaction has been reverted by the EVM:\n" + JSON.stringify(e, null, 2), e);
            },
            TransactionOutOfGasError: function(e) {
              return this.TransactionError("Transaction ran out of gas. Please provide more gas:\n" + JSON.stringify(e, null, 2), e);
            },
            ResolverMethodMissingError: function(e, t) {
              return new Error("The resolver at " + e + 'does not implement requested method: "' + t + '".');
            },
            ContractMissingABIError: function() {
              return new Error("You must provide the json interface of the contract when instantiating a contract object.");
            },
            ContractOnceRequiresCallbackError: function() {
              return new Error("Once requires a callback as the second parameter.");
            },
            ContractEventDoesNotExistError: function(e) {
              return new Error('Event "' + e + "\" doesn't exist in this contract.");
            },
            ContractReservedEventError: function(e) {
              return new Error('The event "' + e + "\" is a reserved event name, you can't use it.");
            },
            ContractMissingDeployDataError: function() {
              return new Error('No "data" specified in neither the given options, nor the default options.');
            },
            ContractNoAddressDefinedError: function() {
              return new Error("This contract object doesn't have address set yet, please set an address first.");
            },
            ContractNoFromAddressDefinedError: function() {
              return new Error('No "from" address specified in neither the given options, nor the default options.');
            }
          };
        },
        6267: (e, t, r) => {
          "use strict";
          var n = r(8269), i = r(4751), o = function(e) {
            return n.toBN(e).toString(10);
          }, s = function(e) {
            if (void 0 !== e) return function(e) {
              return "latest" === e || "pending" === e || "earliest" === e;
            }(e) ? e : "genesis" === e ? "0x0" : n.isHexStrict(e) ? "string" == typeof e ? e.toLowerCase() : e : n.numberToHex(e);
          }, a = function(e) {
            if (e.to && (e.to = u(e.to)), e.data && e.input) throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
            if (!e.data && e.input && (e.data = e.input, delete e.input), e.data && !e.data.startsWith("0x") && (e.data = "0x" + e.data), 
            e.data && !n.isHex(e.data)) throw new Error("The data field must be HEX encoded data.");
            return (e.gas || e.gasLimit) && (e.gas = e.gas || e.gasLimit), (e.maxPriorityFeePerGas || e.maxFeePerGas) && delete e.gasPrice, 
            [ "gasPrice", "gas", "value", "maxPriorityFeePerGas", "maxFeePerGas", "nonce" ].filter((function(t) {
              return void 0 !== e[t];
            })).forEach((function(t) {
              e[t] = n.numberToHex(e[t]);
            })), e;
          }, c = function(e) {
            return null !== e.blockNumber && (e.blockNumber = n.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = n.hexToNumber(e.transactionIndex)), 
            e.nonce = n.hexToNumber(e.nonce), e.gas = n.hexToNumber(e.gas), e.gasPrice && (e.gasPrice = o(e.gasPrice)), e.maxFeePerGas && (e.maxFeePerGas = o(e.maxFeePerGas)), 
            e.maxPriorityFeePerGas && (e.maxPriorityFeePerGas = o(e.maxPriorityFeePerGas)), e.type && (e.type = n.hexToNumber(e.type)), 
            e.value = o(e.value), e.to && n.isAddress(e.to) ? e.to = n.toChecksumAddress(e.to) : e.to = null, e.from && (e.from = n.toChecksumAddress(e.from)), 
            e;
          }, f = function(e) {
            if ("string" == typeof e.blockHash && "string" == typeof e.transactionHash && "string" == typeof e.logIndex) {
              var t = n.sha3(e.blockHash.replace("0x", "") + e.transactionHash.replace("0x", "") + e.logIndex.replace("0x", ""));
              e.id = "log_" + t.replace("0x", "").slice(0, 8);
            } else e.id || (e.id = null);
            return null !== e.blockNumber && (e.blockNumber = n.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = n.hexToNumber(e.transactionIndex)), 
            null !== e.logIndex && (e.logIndex = n.hexToNumber(e.logIndex)), e.address && (e.address = n.toChecksumAddress(e.address)), 
            e;
          }, u = function(e) {
            var t = new i(e);
            if (t.isValid() && t.isDirect()) return t.toAddress().toLowerCase();
            if (n.isAddress(e)) return "0x" + e.toLowerCase().replace("0x", "");
            throw new Error(`Provided address ${e} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);
          };
          e.exports = {
            inputDefaultBlockNumberFormatter: function(e) {
              return s(this && null == e ? this.defaultBlock : e);
            },
            inputBlockNumberFormatter: s,
            inputCallFormatter: function(e) {
              var t = (e = a(e)).from || (this ? this.defaultAccount : null);
              return t && (e.from = u(t)), e;
            },
            inputTransactionFormatter: function(e) {
              if ("number" != typeof (e = a(e)).from && (!e.from || "object" != typeof e.from)) {
                if (e.from = e.from || (this ? this.defaultAccount : null), !e.from && "number" != typeof e.from) throw new Error('The send transactions "from" field must be defined!');
                e.from = u(e.from);
              }
              return e;
            },
            inputAddressFormatter: u,
            inputPostFormatter: function(e) {
              return e.ttl && (e.ttl = n.numberToHex(e.ttl)), e.workToProve && (e.workToProve = n.numberToHex(e.workToProve)), e.priority && (e.priority = n.numberToHex(e.priority)), 
              Array.isArray(e.topics) || (e.topics = e.topics ? [ e.topics ] : []), e.topics = e.topics.map((function(e) {
                return 0 === e.indexOf("0x") ? e : n.fromUtf8(e);
              })), e;
            },
            inputLogFormatter: function(e) {
              var t = function(e) {
                return null == e ? null : 0 === (e = String(e)).indexOf("0x") ? e : n.fromUtf8(e);
              };
              return void 0 === e && (e = {}), void 0 === e.fromBlock && (e = {
                ...e,
                fromBlock: "latest"
              }), (e.fromBlock || 0 === e.fromBlock) && (e.fromBlock = s(e.fromBlock)), (e.toBlock || 0 === e.toBlock) && (e.toBlock = s(e.toBlock)), 
              e.topics = e.topics || [], e.topics = e.topics.map((function(e) {
                return Array.isArray(e) ? e.map(t) : t(e);
              })), t = null, e.address && (e.address = Array.isArray(e.address) ? e.address.map((function(e) {
                return u(e);
              })) : u(e.address)), e;
            },
            inputSignFormatter: function(e) {
              return n.isHexStrict(e) ? e : n.utf8ToHex(e);
            },
            inputStorageKeysFormatter: function(e) {
              return e.map(n.numberToHex);
            },
            outputProofFormatter: function(e) {
              return e.address = n.toChecksumAddress(e.address), e.nonce = n.hexToNumberString(e.nonce), e.balance = n.hexToNumberString(e.balance), 
              e;
            },
            outputBigNumberFormatter: o,
            outputTransactionFormatter: c,
            outputTransactionReceiptFormatter: function(e) {
              if ("object" != typeof e) throw new Error("Received receipt is invalid: " + e);
              return null !== e.blockNumber && (e.blockNumber = n.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = n.hexToNumber(e.transactionIndex)), 
              e.cumulativeGasUsed = n.hexToNumber(e.cumulativeGasUsed), e.gasUsed = n.hexToNumber(e.gasUsed), Array.isArray(e.logs) && (e.logs = e.logs.map(f)), 
              e.effectiveGasPrice && (e.effectiveGasPrice = n.hexToNumber(e.effectiveGasPrice)), e.contractAddress && (e.contractAddress = n.toChecksumAddress(e.contractAddress)), 
              void 0 !== e.status && null !== e.status && (e.status = Boolean(parseInt(e.status))), e;
            },
            outputBlockFormatter: function(e) {
              return e.gasLimit = n.hexToNumber(e.gasLimit), e.gasUsed = n.hexToNumber(e.gasUsed), e.size = n.hexToNumber(e.size), e.timestamp = n.hexToNumber(e.timestamp), 
              null !== e.number && (e.number = n.hexToNumber(e.number)), e.difficulty && (e.difficulty = o(e.difficulty)), e.totalDifficulty && (e.totalDifficulty = o(e.totalDifficulty)), 
              Array.isArray(e.transactions) && e.transactions.forEach((function(e) {
                if ("string" != typeof e) return c(e);
              })), e.miner && (e.miner = n.toChecksumAddress(e.miner)), e.baseFeePerGas && (e.baseFeePerGas = n.hexToNumber(e.baseFeePerGas)), 
              e;
            },
            outputLogFormatter: f,
            outputPostFormatter: function(e) {
              return e.expiry = n.hexToNumber(e.expiry), e.sent = n.hexToNumber(e.sent), e.ttl = n.hexToNumber(e.ttl), e.workProved = n.hexToNumber(e.workProved), 
              e.topics || (e.topics = []), e.topics = e.topics.map((function(e) {
                return n.toUtf8(e);
              })), e;
            },
            outputSyncingFormatter: function(e) {
              return e.startingBlock = n.hexToNumber(e.startingBlock), e.currentBlock = n.hexToNumber(e.currentBlock), e.highestBlock = n.hexToNumber(e.highestBlock), 
              e.knownStates && (e.knownStates = n.hexToNumber(e.knownStates), e.pulledStates = n.hexToNumber(e.pulledStates)), e;
            }
          };
        },
        4390: (e, t, r) => {
          "use strict";
          var n = r(4928), i = r(6267);
          e.exports = {
            errors: n,
            formatters: i
          };
        },
        3952: (e, t, r) => {
          "use strict";
          var n = r(4390).errors, i = r(4390).formatters, o = r(8269), s = r(4017), a = r(6602).subscriptions, c = r(5504), f = function(e) {
            if (!e.call || !e.name) throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
            this.name = e.name, this.call = e.call, this.params = e.params || 0, this.inputFormatter = e.inputFormatter, this.outputFormatter = e.outputFormatter, 
            this.transformPayload = e.transformPayload, this.extraFormatters = e.extraFormatters, this.abiCoder = e.abiCoder, this.requestManager = e.requestManager, 
            this.accounts = e.accounts, this.defaultBlock = e.defaultBlock || "latest", this.defaultAccount = e.defaultAccount || null, 
            this.transactionBlockTimeout = e.transactionBlockTimeout || 50, this.transactionConfirmationBlocks = e.transactionConfirmationBlocks || 24, 
            this.transactionPollingTimeout = e.transactionPollingTimeout || 750, this.transactionPollingInterval = e.transactionPollingInterval || 1e3, 
            this.blockHeaderTimeout = e.blockHeaderTimeout || 10, this.defaultCommon = e.defaultCommon, this.defaultChain = e.defaultChain, 
            this.defaultHardfork = e.defaultHardfork, this.handleRevert = e.handleRevert;
          };
          f.prototype.setRequestManager = function(e, t) {
            this.requestManager = e, t && (this.accounts = t);
          }, f.prototype.createFunction = function(e, t) {
            var r = this.buildCall();
            return Object.defineProperty(r, "call", {
              configurable: !0,
              writable: !0,
              value: this.call
            }), this.setRequestManager(e || this.requestManager, t || this.accounts), r;
          }, f.prototype.attachToObject = function(e) {
            var t = this.buildCall();
            Object.defineProperty(t, "call", {
              configurable: !0,
              writable: !0,
              value: this.call
            });
            var r = this.name.split(".");
            r.length > 1 ? (e[r[0]] = e[r[0]] || {}, e[r[0]][r[1]] = t) : e[r[0]] = t;
          }, f.prototype.getCall = function(e) {
            return "function" == typeof this.call ? this.call(e) : this.call;
          }, f.prototype.extractCallback = function(e) {
            if ("function" == typeof e[e.length - 1]) return e.pop();
          }, f.prototype.validateArgs = function(e) {
            if (e.length !== this.params) throw n.InvalidNumberOfParams(e.length, this.params, this.name);
          }, f.prototype.formatInput = function(e) {
            var t = this;
            return this.inputFormatter ? this.inputFormatter.map((function(r, n) {
              return r ? r.call(t, e[n]) : e[n];
            })) : e;
          }, f.prototype.formatOutput = function(e) {
            var t = this;
            return Array.isArray(e) ? e.map((function(e) {
              return t.outputFormatter && e ? t.outputFormatter(e) : e;
            })) : this.outputFormatter && e ? this.outputFormatter(e) : e;
          }, f.prototype.toPayload = function(e) {
            var t = this.getCall(e), r = this.extractCallback(e), n = this.formatInput(e);
            this.validateArgs(n);
            var i = {
              method: t,
              params: n,
              callback: r
            };
            return this.transformPayload && (i = this.transformPayload(i)), i;
          }, f.prototype._confirmTransaction = function(e, t, r) {
            var u = this, h = !1, d = !0, l = 0, p = 0, b = null, y = null, g = null, m = r.params[0] && "object" == typeof r.params[0] && r.params[0].gas ? r.params[0].gas : null, v = !!r.params[0] && "object" == typeof r.params[0] && r.params[0].data && r.params[0].from && !r.params[0].to, w = v && r.params[0].data.length > 2, _ = [ new f({
              name: "getBlockByNumber",
              call: "eth_getBlockByNumber",
              params: 2,
              inputFormatter: [ i.inputBlockNumberFormatter, function(e) {
                return !!e;
              } ],
              outputFormatter: i.outputBlockFormatter
            }), new f({
              name: "getTransactionReceipt",
              call: "eth_getTransactionReceipt",
              params: 1,
              inputFormatter: [ null ],
              outputFormatter: i.outputTransactionReceiptFormatter
            }), new f({
              name: "getCode",
              call: "eth_getCode",
              params: 2,
              inputFormatter: [ i.inputAddressFormatter, i.inputDefaultBlockNumberFormatter ]
            }), new f({
              name: "getTransactionByHash",
              call: "eth_getTransactionByHash",
              params: 1,
              inputFormatter: [ null ],
              outputFormatter: i.outputTransactionFormatter
            }), new a({
              name: "subscribe",
              type: "eth",
              subscriptions: {
                newBlockHeaders: {
                  subscriptionName: "newHeads",
                  params: 0,
                  outputFormatter: i.outputBlockFormatter
                }
              }
            }) ], S = {};
            _.forEach((e => {
              e.attachToObject(S), e.requestManager = u.requestManager;
            }));
            var E = function(a, f, _, E, A) {
              if (!_) return A || (A = {
                unsubscribe: function() {
                  clearInterval(b), clearTimeout(y);
                }
              }), (a ? s.resolve(a) : S.getTransactionReceipt(t)).catch((function(t) {
                A.unsubscribe(), h = !0, o._fireError({
                  message: "Failed to check for transaction receipt:",
                  data: t
                }, e.eventEmitter, e.reject);
              })).then((async function(t) {
                if (!t || !t.blockHash) throw new Error("Receipt missing or blockHash null");
                if (u.extraFormatters && u.extraFormatters.receiptFormatter && (t = u.extraFormatters.receiptFormatter(t)), e.eventEmitter.listeners("confirmation").length > 0) {
                  var r;
                  if (void 0 === a || 0 !== p) {
                    var n = await S.getBlockByNumber("latest"), i = n ? n.hash : null;
                    f ? g ? (r = await S.getBlockByNumber(g.number + 1)) && (g = r, e.eventEmitter.emit("confirmation", p, t, i)) : (r = await S.getBlockByNumber(t.blockNumber), 
                    g = r, e.eventEmitter.emit("confirmation", p, t, i)) : e.eventEmitter.emit("confirmation", p, t, i);
                  }
                  (f && r || !f) && p++, d = !1, p === u.transactionConfirmationBlocks + 1 && (A.unsubscribe(), e.eventEmitter.removeAllListeners());
                }
                return t;
              })).then((async function(t) {
                if (v && !h) {
                  if (!t.contractAddress) return d && (A.unsubscribe(), h = !0), void o._fireError(n.NoContractAddressFoundError(t), e.eventEmitter, e.reject, null, t);
                  var r;
                  try {
                    r = await S.getCode(t.contractAddress);
                  } catch (e) {}
                  if (!r) return;
                  !0 === t.status && w || r.length > 2 ? (e.eventEmitter.emit("receipt", t), u.extraFormatters && u.extraFormatters.contractDeployFormatter ? e.resolve(u.extraFormatters.contractDeployFormatter(t)) : e.resolve(t), 
                  d && e.eventEmitter.removeAllListeners()) : o._fireError(n.ContractCodeNotStoredError(t), e.eventEmitter, e.reject, null, t), 
                  d && A.unsubscribe(), h = !0;
                }
                return t;
              })).then((async function(t) {
                if (!v && !h) {
                  if (t.outOfGas || m && m === t.gasUsed || !0 !== t.status && "0x1" !== t.status && void 0 !== t.status) if (JSON.stringify(t, null, 2), 
                  !1 === t.status || "0x0" === t.status) try {
                    var s;
                    if (!u.handleRevert || "eth_sendTransaction" !== u.call && "eth_sendRawTransaction" !== u.call) throw !1;
                    var a = r.params[0];
                    if ("eth_sendRawTransaction" === u.call) {
                      var f = r.params[0], l = c.parse(f);
                      a = i.inputTransactionFormatter({
                        data: l.data,
                        to: l.to,
                        from: l.from,
                        gas: l.gasLimit.toHexString(),
                        gasPrice: l.gasPrice ? l.gasPrice.toHexString() : void 0,
                        value: l.value.toHexString()
                      });
                    }
                    if (!(s = await u.getRevertReason(a, t.blockNumber))) throw !1;
                    o._fireError(n.TransactionRevertInstructionError(s.reason, s.signature, t), e.eventEmitter, e.reject, null, t);
                  } catch (r) {
                    o._fireError(n.TransactionRevertedWithoutReasonError(t), e.eventEmitter, e.reject, null, t);
                  } else o._fireError(n.TransactionOutOfGasError(t), e.eventEmitter, e.reject, null, t); else e.eventEmitter.emit("receipt", t), 
                  e.resolve(t), d && e.eventEmitter.removeAllListeners();
                  d && A.unsubscribe(), h = !0;
                }
              })).catch((function() {
                l++, f ? l - 1 >= u.transactionPollingTimeout && (A.unsubscribe(), h = !0, o._fireError(n.TransactionError("Transaction was not mined within " + u.transactionPollingTimeout + " seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"), e.eventEmitter, e.reject)) : l - 1 >= u.transactionBlockTimeout && (A.unsubscribe(), 
                h = !0, o._fireError(n.TransactionError("Transaction was not mined within " + u.transactionBlockTimeout + " blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"), e.eventEmitter, e.reject));
              }));
              A.unsubscribe(), h = !0, o._fireError({
                message: "Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.",
                data: _
              }, e.eventEmitter, e.reject);
            }, A = function(e) {
              let t = !1;
              const r = () => {
                b = setInterval(E.bind(null, e, !0), u.transactionPollingInterval);
              };
              if (!this.requestManager.provider.on) return r();
              S.subscribe("newBlockHeaders", (function(n, i, o) {
                if (t = !0, n || !i) return r();
                E(e, !1, n, 0, o);
              })), y = setTimeout((() => {
                t || r();
              }), 1e3 * this.blockHeaderTimeout);
            }.bind(this);
            S.getTransactionReceipt(t).then((function(t) {
              t && t.blockHash ? (e.eventEmitter.listeners("confirmation").length > 0 && A(t), E(t, !1)) : h || A();
            })).catch((function() {
              h || A();
            }));
          };
          var u = function(e, t) {
            return "number" == typeof e ? t.wallet[e] : e && "object" == typeof e && e.address && e.privateKey ? e : t.wallet[e.toLowerCase()];
          };
          function h(e, t) {
            return new Promise(((r, n) => {
              try {
                var i = new f({
                  name: "getBlockByNumber",
                  call: "eth_getBlockByNumber",
                  params: 2,
                  inputFormatter: [ function(e) {
                    return e ? o.toHex(e) : "latest";
                  }, function() {
                    return !1;
                  } ]
                }).createFunction(e.requestManager), s = new f({
                  name: "getGasPrice",
                  call: "eth_gasPrice",
                  params: 0
                }).createFunction(e.requestManager);
                Promise.all([ i(), s() ]).then((e => {
                  const [n, i] = e;
                  if (("0x2" === t.type || void 0 === t.type) && n && n.baseFeePerGas) {
                    let e, i;
                    t.gasPrice ? (e = t.gasPrice, i = t.gasPrice, delete t.gasPrice) : (e = t.maxPriorityFeePerGas || "0x9502F900", i = t.maxFeePerGas || o.toHex(o.toBN(n.baseFeePerGas).mul(o.toBN(2)).add(o.toBN(e)))), 
                    r({
                      maxFeePerGas: i,
                      maxPriorityFeePerGas: e
                    });
                  } else {
                    if (t.maxPriorityFeePerGas || t.maxFeePerGas) throw Error("Network doesn't support eip-1559");
                    r({
                      gasPrice: i
                    });
                  }
                }));
              } catch (e) {
                n(e);
              }
            }));
          }
          f.prototype.buildCall = function() {
            var e = this, t = "eth_sendTransaction" === e.call || "eth_sendRawTransaction" === e.call, r = "eth_call" === e.call, i = function() {
              var i = s(!t), a = e.toPayload(Array.prototype.slice.call(arguments)), c = function(s, c) {
                var f;
                if (e.handleRevert && r && e.abiCoder && (!s && e.isRevertReasonString(c) ? f = c.substring(10) : s && s.data && (f = s.data.substring(10)), 
                f)) {
                  var u = e.abiCoder.decodeParameter("string", "0x" + f), h = "Error(String)";
                  o._fireError(n.RevertInstructionError(u, h), i.eventEmitter, i.reject, a.callback, {
                    reason: u,
                    signature: h
                  });
                } else {
                  try {
                    c = e.formatOutput(c);
                  } catch (e) {
                    s = e;
                  }
                  if (c instanceof Error && (s = c), s) return s.error && (s = s.error), o._fireError(s, i.eventEmitter, i.reject, a.callback);
                  a.callback && a.callback(null, c), t ? (i.eventEmitter.emit("transactionHash", c), e._confirmTransaction(i, c, a)) : s || i.resolve(c);
                }
              }, f = function(t) {
                var r = {
                  ...a,
                  method: "eth_sendRawTransaction",
                  params: [ t.rawTransaction ]
                };
                e.requestManager.send(r, c);
              }, d = function(e, t) {
                var r;
                if (t && t.accounts && t.accounts.wallet && t.accounts.wallet.length) if ("eth_sendTransaction" === e.method) {
                  var n = e.params[0];
                  if ((r = u(n && "object" == typeof n ? n.from : null, t.accounts)) && r.privateKey) return delete (n = JSON.parse(JSON.stringify(n))).from, 
                  t.defaultChain && !n.chain && (n.chain = t.defaultChain), t.defaultHardfork && !n.hardfork && (n.hardfork = t.defaultHardfork), 
                  t.defaultCommon && !n.common && (n.common = t.defaultCommon), void t.accounts.signTransaction(n, r.privateKey).then(f).catch((function(e) {
                    if ("function" == typeof i.eventEmitter.listeners && i.eventEmitter.listeners("error").length) {
                      try {
                        i.eventEmitter.emit("error", e);
                      } catch (e) {}
                      i.eventEmitter.removeAllListeners(), i.eventEmitter.catch((function() {}));
                    }
                    i.reject(e);
                  }));
                } else if ("eth_sign" === e.method) {
                  var o = e.params[1];
                  if ((r = u(e.params[0], t.accounts)) && r.privateKey) {
                    var s = t.accounts.sign(o, r.privateKey);
                    return e.callback && e.callback(null, s.signature), void i.resolve(s.signature);
                  }
                }
                return t.requestManager.send(e, c);
              };
              return t && a.params[0] && "object" == typeof a.params[0] && void 0 === a.params[0].gasPrice && (void 0 === a.params[0].maxPriorityFeePerGas || void 0 === a.params[0].maxFeePerGas) ? h(e, a.params[0]).then((r => {
                void 0 !== r.gasPrice ? a.params[0].gasPrice = r.gasPrice : void 0 !== r.maxPriorityFeePerGas && void 0 !== r.maxFeePerGas && (a.params[0].maxPriorityFeePerGas = r.maxPriorityFeePerGas, 
                a.params[0].maxFeePerGas = r.maxFeePerGas), t && setTimeout((() => {
                  i.eventEmitter.emit("sending", a);
                }), 0), d(a, e);
              })) : (t && setTimeout((() => {
                i.eventEmitter.emit("sending", a);
              }), 0), d(a, e)), t && setTimeout((() => {
                i.eventEmitter.emit("sent", a);
              }), 0), i.eventEmitter;
            };
            return i.method = e, i.request = this.request.bind(this), i;
          }, f.prototype.getRevertReason = function(e, t) {
            var r = this;
            return new Promise((function(n, i) {
              new f({
                name: "call",
                call: "eth_call",
                params: 2,
                abiCoder: r.abiCoder,
                handleRevert: !0
              }).createFunction(r.requestManager)(e, o.numberToHex(t)).then((function() {
                n(!1);
              })).catch((function(e) {
                e.reason ? n({
                  reason: e.reason,
                  signature: e.signature
                }) : i(e);
              }));
            }));
          }, f.prototype.isRevertReasonString = function(e) {
            return "string" == typeof e && (e.length - 2) / 2 % 32 == 4 && "0x08c379a0" === e.substring(0, 10);
          }, f.prototype.request = function() {
            var e = this.toPayload(Array.prototype.slice.call(arguments));
            return e.format = this.formatOutput.bind(this), e;
          }, e.exports = f;
        },
        4017: (e, t, r) => {
          "use strict";
          var n = r(6729), i = function(e) {
            var t, r, i = new Promise((function() {
              t = arguments[0], r = arguments[1];
            }));
            if (e) return {
              resolve: t,
              reject: r,
              eventEmitter: i
            };
            var o = new n;
            return i._events = o._events, i.emit = o.emit, i.on = o.on, i.once = o.once, i.off = o.off, i.listeners = o.listeners, i.addListener = o.addListener, 
            i.removeListener = o.removeListener, i.removeAllListeners = o.removeAllListeners, {
              resolve: t,
              reject: r,
              eventEmitter: i
            };
          };
          i.resolve = function(e) {
            var t = i(!0);
            return t.resolve(e), t.eventEmitter;
          }, e.exports = i;
        },
        8991: (e, t, r) => {
          "use strict";
          var n = r(8911), i = r(4390).errors, o = function(e) {
            this.requestManager = e, this.requests = [];
          };
          o.prototype.add = function(e) {
            this.requests.push(e);
          }, o.prototype.execute = function() {
            var e = this.requests, t = this._sortResponses.bind(this);
            this.requestManager.sendBatch(e, (function(r, o) {
              o = t(o), e.map((function(e, t) {
                return o[t] || {};
              })).forEach((function(t, r) {
                if (e[r].callback) {
                  if (t && t.error) return e[r].callback(i.ErrorResponse(t));
                  if (!n.isValidResponse(t)) return e[r].callback(i.InvalidResponse(t));
                  try {
                    e[r].callback(null, e[r].format ? e[r].format(t.result) : t.result);
                  } catch (t) {
                    e[r].callback(t);
                  }
                }
              }));
            }));
          }, o.prototype._sortResponses = function(e) {
            return (e || []).sort(((e, t) => e.id - t.id));
          }, e.exports = o;
        },
        2319: e => {
          "use strict";
          var t = null, r = "object" == typeof globalThis ? globalThis : void 0;
          if (!r) try {
            r = Function("return this")();
          } catch (e) {
            r = self;
          }
          void 0 !== r.ethereum ? t = r.ethereum : void 0 !== r.web3 && r.web3.currentProvider && (r.web3.currentProvider.sendAsync && (r.web3.currentProvider.send = r.web3.currentProvider.sendAsync, 
          delete r.web3.currentProvider.sendAsync), !r.web3.currentProvider.on && r.web3.currentProvider.connection && "ipcProviderWrapper" === r.web3.currentProvider.connection.constructor.name && (r.web3.currentProvider.on = function(e, t) {
            if ("function" != typeof t) throw new Error("The second parameter callback must be a function.");
            "data" === e ? this.connection.on("data", (function(e) {
              var r = "";
              e = e.toString();
              try {
                r = JSON.parse(e);
              } catch (r) {
                return t(new Error("Couldn't parse response data" + e));
              }
              r.id || -1 === r.method.indexOf("_subscription") || t(null, r);
            })) : this.connection.on(e, t);
          }), t = r.web3.currentProvider), e.exports = t;
        },
        4983: (e, t, r) => {
          "use strict";
          const {callbackify: n} = r(9539);
          var i = r(4390).errors, o = r(8911), s = r(8991), a = r(2319), c = function e(t, r) {
            this.provider = null, this.providers = e.providers, this.setProvider(t, r), this.subscriptions = new Map;
          };
          c.givenProvider = a, c.providers = {
            WebsocketProvider: r(1227),
            HttpProvider: r(4351),
            IpcProvider: r(1227)
          }, c.prototype.setProvider = function(e, t) {
            var r = this;
            if (e && "string" == typeof e && this.providers) if (/^http(s)?:\/\//i.test(e)) e = new this.providers.HttpProvider(e); else if (/^ws(s)?:\/\//i.test(e)) e = new this.providers.WebsocketProvider(e); else if (e && "object" == typeof t && "function" == typeof t.connect) e = new this.providers.IpcProvider(e, t); else if (e) throw new Error("Can't autodetect provider for \"" + e + '"');
            if (this.provider && this.provider.connected && this.clearSubscriptions(), this.provider = e || null, this.provider && this.provider.on) {
              "function" == typeof e.request ? this.provider.on("message", (function(e) {
                if (e && "eth_subscription" === e.type && e.data) {
                  const t = e.data;
                  t.subscription && r.subscriptions.has(t.subscription) && r.subscriptions.get(t.subscription).callback(null, t.result);
                }
              })) : this.provider.on("data", (function(e, t) {
                (e = e || t).method && e.params && e.params.subscription && r.subscriptions.has(e.params.subscription) && r.subscriptions.get(e.params.subscription).callback(null, e.params.result);
              })), this.provider.on("connect", (function() {
                r.subscriptions.forEach((function(e) {
                  e.subscription.resubscribe();
                }));
              })), this.provider.on("error", (function(e) {
                r.subscriptions.forEach((function(t) {
                  t.callback(e);
                }));
              }));
              const t = function(e) {
                r._isCleanCloseEvent(e) && !r._isIpcCloseError(e) || (r.subscriptions.forEach((function(t) {
                  t.callback(i.ConnectionCloseError(e)), r.subscriptions.delete(t.subscription.id);
                })), r.provider && r.provider.emit && r.provider.emit("error", i.ConnectionCloseError(e))), r.provider && r.provider.emit && r.provider.emit("end", e);
              };
              this.provider.on("disconnect", t);
            }
          }, c.prototype.send = function(e, t) {
            if (t = t || function() {}, !this.provider) return t(i.InvalidProvider());
            const {method: r, params: s} = e, a = o.toPayload(r, s), c = this._jsonrpcResultCallback(t, a);
            if (this.provider.request) n(this.provider.request.bind(this.provider))({
              method: r,
              params: s
            }, t); else if (this.provider.sendAsync) this.provider.sendAsync(a, c); else {
              if (!this.provider.send) throw new Error("Provider does not have a request or send method to use.");
              this.provider.send(a, c);
            }
          }, c.prototype.sendBatch = function(e, t) {
            if (!this.provider) return t(i.InvalidProvider());
            var r = o.toBatchPayload(e);
            this.provider[this.provider.sendAsync ? "sendAsync" : "send"](r, (function(e, r) {
              return e ? t(e) : Array.isArray(r) ? void t(null, r) : t(i.InvalidResponse(r));
            }));
          }, c.prototype.addSubscription = function(e, t) {
            if (!this.provider.on) throw new Error("The provider doesn't support subscriptions: " + this.provider.constructor.name);
            this.subscriptions.set(e.id, {
              callback: t,
              subscription: e
            });
          }, c.prototype.removeSubscription = function(e, t) {
            if (this.subscriptions.has(e)) {
              var r = this.subscriptions.get(e).subscription.options.type;
              return this.subscriptions.delete(e), void this.send({
                method: r + "_unsubscribe",
                params: [ e ]
              }, t);
            }
            "function" == typeof t && t(null);
          }, c.prototype.clearSubscriptions = function(e) {
            try {
              var t = this;
              return this.subscriptions.size > 0 && this.subscriptions.forEach((function(r, n) {
                e && "syncing" === r.name || t.removeSubscription(n);
              })), this.provider.reset && this.provider.reset(), !0;
            } catch (e) {
              throw new Error(`Error while clearing subscriptions: ${e}`);
            }
          }, c.prototype._isCleanCloseEvent = function(e) {
            return "object" == typeof e && ([ 1e3 ].includes(e.code) || !0 === e.wasClean);
          }, c.prototype._isIpcCloseError = function(e) {
            return "boolean" == typeof e && e;
          }, c.prototype._jsonrpcResultCallback = function(e, t) {
            return function(r, n) {
              return n && n.id && t.id !== n.id ? e(new Error(`Wrong response id ${n.id} (expected: ${t.id}) in ${JSON.stringify(t)}`)) : r ? e(r) : n && n.error ? e(i.ErrorResponse(n)) : o.isValidResponse(n) ? void e(null, n.result) : e(i.InvalidResponse(n));
            };
          }, e.exports = {
            Manager: c,
            BatchManager: s
          };
        },
        8911: e => {
          "use strict";
          var t = {
            messageId: 0,
            toPayload: function(e, r) {
              if (!e) throw new Error('JSONRPC method should be specified for params: "' + JSON.stringify(r) + '"!');
              return t.messageId++, {
                jsonrpc: "2.0",
                id: t.messageId,
                method: e,
                params: r || []
              };
            },
            isValidResponse: function(e) {
              return Array.isArray(e) ? e.every(t) : t(e);
              function t(e) {
                return !(!e || e.error || "2.0" !== e.jsonrpc || "number" != typeof e.id && "string" != typeof e.id || void 0 === e.result);
              }
            },
            toBatchPayload: function(e) {
              return e.map((function(e) {
                return t.toPayload(e.method, e.params);
              }));
            }
          };
          e.exports = t;
        },
        6602: (e, t, r) => {
          "use strict";
          var i = r(5826), o = function(e) {
            this.name = e.name, this.type = e.type, this.subscriptions = e.subscriptions || {}, this.requestManager = null;
          };
          o.prototype.setRequestManager = function(e) {
            this.requestManager = e;
          }, o.prototype.attachToObject = function(e) {
            var t = this.buildCall(), r = this.name.split(".");
            r.length > 1 ? (e[r[0]] = e[r[0]] || {}, e[r[0]][r[1]] = t) : e[r[0]] = t;
          }, o.prototype.buildCall = function() {
            var e = this;
            return function() {
              e.subscriptions[arguments[0]] || n.warn("Subscription " + JSON.stringify(arguments[0]) + " doesn't exist. Subscribing anyway.");
              var t = new i({
                subscription: e.subscriptions[arguments[0]] || {},
                requestManager: e.requestManager,
                type: e.type
              });
              return t.subscribe.apply(t, arguments);
            };
          }, e.exports = {
            subscriptions: o,
            subscription: i
          };
        },
        5826: (e, t, r) => {
          "use strict";
          var n = r(4390).errors, i = r(6729), o = r(4390).formatters;
          function s(e) {
            return e;
          }
          function a(e) {
            i.call(this), this.id = null, this.callback = s, this.arguments = null, this.lastBlock = null, this.options = {
              subscription: e.subscription,
              type: e.type,
              requestManager: e.requestManager
            };
          }
          a.prototype = Object.create(i.prototype), a.prototype.constructor = a, a.prototype._extractCallback = function(e) {
            if ("function" == typeof e[e.length - 1]) return e.pop();
          }, a.prototype._validateArgs = function(e) {
            var t = this.options.subscription;
            if (t || (t = {}), t.params || (t.params = 0), e.length !== t.params) throw n.InvalidNumberOfParams(e.length, t.params, t.subscriptionName);
          }, a.prototype._formatInput = function(e) {
            var t = this.options.subscription;
            return t && t.inputFormatter ? t.inputFormatter.map((function(t, r) {
              return t ? t(e[r]) : e[r];
            })) : e;
          }, a.prototype._formatOutput = function(e) {
            var t = this.options.subscription;
            return t && t.outputFormatter && e ? t.outputFormatter(e) : e;
          }, a.prototype._toPayload = function(e) {
            var t = [];
            if (this.callback = this._extractCallback(e) || s, this.subscriptionMethod || (this.subscriptionMethod = e.shift(), this.options.subscription.subscriptionName && (this.subscriptionMethod = this.options.subscription.subscriptionName)), 
            this.arguments || (this.arguments = this._formatInput(e), this._validateArgs(this.arguments), e = []), t.push(this.subscriptionMethod), 
            t = t.concat(this.arguments), e.length) throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");
            return {
              method: this.options.type + "_subscribe",
              params: t
            };
          }, a.prototype.unsubscribe = function(e) {
            this.options.requestManager.removeSubscription(this.id, e), this.id = null, this.lastBlock = null, this.removeAllListeners();
          }, a.prototype.subscribe = function() {
            var e = this, t = Array.prototype.slice.call(arguments), r = this._toPayload(t);
            if (!r) return this;
            if (!this.options.requestManager.provider) return setTimeout((function() {
              var t = new Error("No provider set.");
              e.callback(t, null, e), e.emit("error", t);
            }), 0), this;
            if (!this.options.requestManager.provider.on) return setTimeout((function() {
              var t = new Error("The current provider doesn't support subscriptions: " + e.options.requestManager.provider.constructor.name);
              e.callback(t, null, e), e.emit("error", t);
            }), 0), this;
            if (this.lastBlock && this.options.params && "object" == typeof this.options.params && (r.params[1] = this.options.params, 
            r.params[1].fromBlock = o.inputBlockNumberFormatter(this.lastBlock + 1)), this.id && this.unsubscribe(), this.options.params = r.params[1], 
            "logs" === r.params[0] && r.params[1] && "object" == typeof r.params[1] && r.params[1].hasOwnProperty("fromBlock") && isFinite(r.params[1].fromBlock)) {
              var n = Object.assign({}, r.params[1]);
              this.options.requestManager.send({
                method: "eth_getLogs",
                params: [ n ]
              }, (function(t, r) {
                t ? setTimeout((function() {
                  e.callback(t, null, e), e.emit("error", t);
                }), 0) : r.forEach((function(t) {
                  var r = e._formatOutput(t);
                  e.callback(null, r, e), e.emit("data", r);
                }));
              }));
            }
            return "object" == typeof r.params[1] && delete r.params[1].fromBlock, this.options.requestManager.send(r, (function(t, n) {
              !t && n ? (e.id = n, e.method = r.params[0], e.options.requestManager.addSubscription(e, (function(t, r) {
                t ? (e.callback(t, !1, e), e.emit("error", t)) : (Array.isArray(r) || (r = [ r ]), r.forEach((function(t) {
                  var r = e._formatOutput(t);
                  if (e.lastBlock = r && "object" == typeof r ? r.blockNumber : null, "function" == typeof e.options.subscription.subscriptionHandler) return e.options.subscription.subscriptionHandler.call(e, r);
                  e.emit("data", r), e.callback(null, r, e);
                })));
              })), e.emit("connected", n)) : setTimeout((function() {
                e.callback(t, !1, e), e.emit("error", t);
              }), 0);
            })), this;
          }, a.prototype.resubscribe = function() {
            this.options.requestManager.removeSubscription(this.id), this.id = null, this.subscribe(this.callback);
          }, e.exports = a;
        },
        6016: (e, t, r) => {
          "use strict";
          var n = r(4390).formatters, i = r(3952), o = r(8269);
          e.exports = function(e) {
            var t = function(t) {
              var r;
              return t.property ? (e[t.property] || (e[t.property] = {}), r = e[t.property]) : r = e, t.methods && t.methods.forEach((function(t) {
                t instanceof i || (t = new i(t)), t.attachToObject(r), t.setRequestManager(e._requestManager);
              })), e;
            };
            return t.formatters = n, t.utils = o, t.Method = i, t;
          };
        },
        2928: (e, t, r) => {
          const n = r(4983), i = r(6016);
          e.exports = {
            packageInit: (e, t) => {
              if (t = Array.prototype.slice.call(t), !e) throw new Error('You need to instantiate using the "new" keyword.');
              Object.defineProperty(e, "currentProvider", {
                get: () => e._provider,
                set: t => e.setProvider(t),
                enumerable: !0,
                configurable: !0
              }), t[0] && t[0]._requestManager ? e._requestManager = t[0]._requestManager : e._requestManager = new n.Manager(t[0], t[1]), 
              e.givenProvider = n.Manager.givenProvider, e.providers = n.Manager.providers, e._provider = e._requestManager.provider, 
              e.setProvider || (e.setProvider = (t, r) => (e._requestManager.setProvider(t, r), e._provider = e._requestManager.provider, 
              !0)), e.setRequestManager = t => {
                e._requestManager = t, e._provider = t.provider;
              }, e.BatchRequest = n.BatchManager.bind(null, e._requestManager), e.extend = i(e);
            },
            addProviders: e => {
              e.givenProvider = n.Manager.givenProvider, e.providers = n.Manager.providers;
            }
          };
        },
        3338: (e, t, r) => {
          var n = r(8764).Buffer, i = r(8269), o = r(8349).RQ, s = r(8349)._R, a = new o((function(e, t) {
            return !e.match(/^u?int/) || Array.isArray(t) || t && "object" == typeof t && "BN" === t.constructor.name ? t : t.toString();
          }));
          function c() {}
          var f = function() {};
          f.prototype.encodeFunctionSignature = function(e) {
            return ("function" == typeof e || "object" == typeof e && e) && (e = i._jsonInterfaceMethodToString(e)), i.sha3(e).slice(0, 10);
          }, f.prototype.encodeEventSignature = function(e) {
            return ("function" == typeof e || "object" == typeof e && e) && (e = i._jsonInterfaceMethodToString(e)), i.sha3(e);
          }, f.prototype.encodeParameter = function(e, t) {
            return this.encodeParameters([ e ], [ t ]);
          }, f.prototype.encodeParameters = function(e, t) {
            var r = this;
            return e = r.mapTypes(e), t = t.map((function(t, n) {
              let i = e[n];
              if ("object" == typeof i && i.type && (i = i.type), t = r.formatParam(i, t), "string" == typeof i && i.includes("tuple")) {
                const e = a._getCoder(s.from(i)), n = (e, t) => {
                  if ("array" === e.name) {
                    if (!e.type.match(/\[(\d+)\]/)) return t.map((t => n(a._getCoder(s.from(e.type.replace("[]", ""))), t)));
                    const r = parseInt(e.type.match(/\[(\d+)\]/)[1]);
                    if (t.length !== r) throw new Error("Array length does not matches with the given input");
                    return t.map((t => n(a._getCoder(s.from(e.type.replace(/\[\d+\]/, ""))), t)));
                  }
                  e.coders.forEach(((e, i) => {
                    "tuple" === e.name ? n(e, t[i]) : t[i] = r.formatParam(e.name, t[i]);
                  }));
                };
                n(e, t);
              }
              return t;
            })), a.encode(e, t);
          }, f.prototype.mapTypes = function(e) {
            var t = this, r = [];
            return e.forEach((function(e) {
              if ("object" == typeof e && "function" === e.type && (e = Object.assign({}, e, {
                type: "bytes24"
              })), t.isSimplifiedStructFormat(e)) {
                var n = Object.keys(e)[0];
                r.push(Object.assign(t.mapStructNameAndType(n), {
                  components: t.mapStructToCoderFormat(e[n])
                }));
              } else r.push(e);
            })), r;
          }, f.prototype.isSimplifiedStructFormat = function(e) {
            return "object" == typeof e && void 0 === e.components && void 0 === e.name;
          }, f.prototype.mapStructNameAndType = function(e) {
            var t = "tuple";
            return e.indexOf("[]") > -1 && (t = "tuple[]", e = e.slice(0, -2)), {
              type: t,
              name: e
            };
          }, f.prototype.mapStructToCoderFormat = function(e) {
            var t = this, r = [];
            return Object.keys(e).forEach((function(n) {
              "object" != typeof e[n] ? r.push({
                name: n,
                type: e[n]
              }) : r.push(Object.assign(t.mapStructNameAndType(n), {
                components: t.mapStructToCoderFormat(e[n])
              }));
            })), r;
          }, f.prototype.formatParam = function(e, t) {
            const r = new RegExp(/^bytes([0-9]*)$/), o = new RegExp(/^bytes([0-9]*)\[\]$/), s = new RegExp(/^(u?int)([0-9]*)$/), a = new RegExp(/^(u?int)([0-9]*)\[\]$/);
            if (i.isBN(t) || i.isBigNumber(t)) return t.toString(10);
            if (e.match(o) || e.match(a)) return t.map((t => this.formatParam(e.replace("[]", ""), t)));
            let c = e.match(s);
            if (c) {
              let e = parseInt(c[2] || "256");
              e / 8 < t.length && (t = i.leftPad(t, e));
            }
            if (c = e.match(r), c) {
              n.isBuffer(t) && (t = i.toHex(t));
              let e = parseInt(c[1]);
              if (e) {
                let r = 2 * e;
                "0x" === t.substring(0, 2) && (r += 2), t.length < r && (t = i.rightPad(t, 2 * e));
              }
              t.length % 2 == 1 && (t = "0x0" + t.substring(2));
            }
            return t;
          }, f.prototype.encodeFunctionCall = function(e, t) {
            return this.encodeFunctionSignature(e) + this.encodeParameters(e.inputs, t).replace("0x", "");
          }, f.prototype.decodeParameter = function(e, t) {
            return this.decodeParameters([ e ], t)[0];
          }, f.prototype.decodeParameters = function(e, t) {
            return this.decodeParametersWith(e, t, !1);
          }, f.prototype.decodeParametersWith = function(e, t, r) {
            if (e.length > 0 && (!t || "0x" === t || "0X" === t)) throw new Error("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");
            var n = a.decode(this.mapTypes(e), "0x" + t.replace(/0x/i, ""), r), i = new c;
            return i.__length__ = 0, e.forEach((function(e, t) {
              var r = n[i.__length__];
              const o = "object" == typeof e && e.type && "string" === e.type;
              r = "0x" !== r || o || "string" == typeof e && "string" === e ? r : null, i[t] = r, ("function" == typeof e || e && "object" == typeof e) && e.name && (i[e.name] = r), 
              i.__length__++;
            })), i;
          }, f.prototype.decodeLog = function(e, t, r) {
            var n = this;
            r = Array.isArray(r) ? r : [ r ], t = t || "";
            var i = [], o = [], s = 0;
            e.forEach((function(e, t) {
              e.indexed ? (o[t] = [ "bool", "int", "uint", "address", "fixed", "ufixed" ].find((function(t) {
                return -1 !== e.type.indexOf(t);
              })) ? n.decodeParameter(e.type, r[s]) : r[s], s++) : i[t] = e;
            }));
            var a = t, f = a ? this.decodeParametersWith(i, a, !0) : [], u = new c;
            return u.__length__ = 0, e.forEach((function(e, t) {
              u[t] = "string" === e.type ? "" : null, void 0 !== f[t] && (u[t] = f[t]), void 0 !== o[t] && (u[t] = o[t]), e.name && (u[e.name] = u[t]), 
              u.__length__++;
            })), u;
          };
          var u = new f;
          e.exports = u;
        },
        1692: (e, t, r) => {
          "use strict";
          var i = r(2928), o = r(3952), s = r(8269), a = r(6602).subscription, c = r(4390).formatters, f = r(4390).errors, u = r(4017), h = r(3338), d = function e(t, r, n) {
            var o = this, a = Array.prototype.slice.call(arguments);
            if (!(this instanceof e)) throw new Error('Please use the "new" keyword to instantiate a web3.eth.Contract() object!');
            if (this.setProvider = function() {
              i.packageInit(o, arguments), o.clearSubscriptions = o._requestManager.clearSubscriptions;
            }, i.packageInit(this, [ this.constructor ]), this.clearSubscriptions = this._requestManager.clearSubscriptions, !t || !Array.isArray(t)) throw f.ContractMissingABIError();
            this.options = {};
            var u = a[a.length - 1];
            u && "object" == typeof u && !Array.isArray(u) && (n = u, this.options = {
              ...this.options,
              ...this._getOrSetDefaultOptions(n)
            }, r && "object" == typeof r && (r = null)), Object.defineProperty(this.options, "address", {
              set: function(e) {
                e && (o._address = s.toChecksumAddress(c.inputAddressFormatter(e)));
              },
              get: function() {
                return o._address;
              },
              enumerable: !0
            }), Object.defineProperty(this.options, "jsonInterface", {
              set: function(e) {
                return o.methods = {}, o.events = {}, o._jsonInterface = e.map((function(e) {
                  var t, r;
                  if (e.constant = "view" === e.stateMutability || "pure" === e.stateMutability || e.constant, e.payable = "payable" === e.stateMutability || e.payable, 
                  e.name && (r = s._jsonInterfaceMethodToString(e)), "function" === e.type) {
                    if (e.signature = h.encodeFunctionSignature(r), t = o._createTxObject.bind({
                      method: e,
                      parent: o
                    }), o.methods[e.name]) {
                      var n = o._createTxObject.bind({
                        method: e,
                        parent: o,
                        nextMethod: o.methods[e.name]
                      });
                      o.methods[e.name] = n;
                    } else o.methods[e.name] = t;
                    o.methods[e.signature] = t, o.methods[r] = t;
                  } else if ("event" === e.type) {
                    e.signature = h.encodeEventSignature(r);
                    var i = o._on.bind(o, e.signature);
                    o.events[e.name] && "bound " !== o.events[e.name].name || (o.events[e.name] = i), o.events[e.signature] = i, o.events[r] = i;
                  }
                  return e;
                })), o.events.allEvents = o._on.bind(o, "allevents"), o._jsonInterface;
              },
              get: function() {
                return o._jsonInterface;
              },
              enumerable: !0
            });
            var d = this.constructor.defaultAccount, l = this.constructor.defaultBlock || "latest";
            Object.defineProperty(this, "handleRevert", {
              get: function() {
                return !1 === o.options.handleRevert || !0 === o.options.handleRevert ? o.options.handleRevert : this.constructor.handleRevert;
              },
              set: function(e) {
                o.options.handleRevert = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultCommon", {
              get: function() {
                return o.options.common || this.constructor.defaultCommon;
              },
              set: function(e) {
                o.options.common = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultHardfork", {
              get: function() {
                return o.options.hardfork || this.constructor.defaultHardfork;
              },
              set: function(e) {
                o.options.hardfork = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultChain", {
              get: function() {
                return o.options.chain || this.constructor.defaultChain;
              },
              set: function(e) {
                o.options.chain = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "transactionPollingTimeout", {
              get: function() {
                return 0 === o.options.transactionPollingTimeout ? o.options.transactionPollingTimeout : o.options.transactionPollingTimeout || this.constructor.transactionPollingTimeout;
              },
              set: function(e) {
                o.options.transactionPollingTimeout = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "transactionPollingInterval", {
              get: function() {
                return 0 === o.options.transactionPollingInterval ? o.options.transactionPollingInterval : o.options.transactionPollingInterval || this.constructor.transactionPollingInterval;
              },
              set: function(e) {
                o.options.transactionPollingInterval = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "transactionConfirmationBlocks", {
              get: function() {
                return 0 === o.options.transactionConfirmationBlocks ? o.options.transactionConfirmationBlocks : o.options.transactionConfirmationBlocks || this.constructor.transactionConfirmationBlocks;
              },
              set: function(e) {
                o.options.transactionConfirmationBlocks = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "transactionBlockTimeout", {
              get: function() {
                return 0 === o.options.transactionBlockTimeout ? o.options.transactionBlockTimeout : o.options.transactionBlockTimeout || this.constructor.transactionBlockTimeout;
              },
              set: function(e) {
                o.options.transactionBlockTimeout = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "blockHeaderTimeout", {
              get: function() {
                return 0 === o.options.blockHeaderTimeout ? o.options.blockHeaderTimeout : o.options.blockHeaderTimeout || this.constructor.blockHeaderTimeout;
              },
              set: function(e) {
                o.options.blockHeaderTimeout = e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultAccount", {
              get: function() {
                return d;
              },
              set: function(e) {
                return e && (d = s.toChecksumAddress(c.inputAddressFormatter(e))), e;
              },
              enumerable: !0
            }), Object.defineProperty(this, "defaultBlock", {
              get: function() {
                return l;
              },
              set: function(e) {
                return l = e, e;
              },
              enumerable: !0
            }), this.methods = {}, this.events = {}, this._address = null, this._jsonInterface = [], this.options.address = r, this.options.jsonInterface = t;
          };
          d.setProvider = function(e, t) {
            i.packageInit(this, [ e ]), this._ethAccounts = t;
          }, d.prototype._getCallback = function(e) {
            if (e && e[e.length - 1] && "function" == typeof e[e.length - 1]) return e.pop();
          }, d.prototype._checkListener = function(e, t) {
            if (t === e) throw f.ContractReservedEventError(e);
          }, d.prototype._getOrSetDefaultOptions = function(e) {
            var t = e.gasPrice ? String(e.gasPrice) : null, r = e.from ? s.toChecksumAddress(c.inputAddressFormatter(e.from)) : null;
            return e.data = e.data || this.options.data, e.from = r || this.options.from, e.gasPrice = t || this.options.gasPrice, e.gas = e.gas || e.gasLimit || this.options.gas, 
            delete e.gasLimit, e;
          }, d.prototype._encodeEventABI = function(e, t) {
            var r = (t = t || {}).filter || {}, n = {};
            if ([ "fromBlock", "toBlock" ].filter((function(e) {
              return void 0 !== t[e];
            })).forEach((function(e) {
              n[e] = c.inputBlockNumberFormatter(t[e]);
            })), Array.isArray(t.topics)) n.topics = t.topics; else {
              if (n.topics = [], e && !e.anonymous && "ALLEVENTS" !== e.name && n.topics.push(e.signature), "ALLEVENTS" !== e.name) {
                var i = e.inputs.filter((function(e) {
                  return !0 === e.indexed;
                })).map((function(e) {
                  var t = r[e.name];
                  return t ? Array.isArray(t) ? t.map((function(t) {
                    return h.encodeParameter(e.type, t);
                  })) : h.encodeParameter(e.type, t) : null;
                }));
                n.topics = n.topics.concat(i);
              }
              n.topics.length || delete n.topics;
            }
            return this.options.address && (n.address = this.options.address.toLowerCase()), n;
          }, d.prototype._decodeEventABI = function(e) {
            var t = this;
            e.data = e.data || "", e.topics = e.topics || [];
            var r = c.outputLogFormatter(e);
            if ("ALLEVENTS" === t.name && (t = t.jsonInterface.find((function(t) {
              return t.signature === e.topics[0];
            })) || {
              anonymous: !0
            }), t.inputs = t.inputs || [], !t.anonymous) {
              let r = 0;
              t.inputs.forEach((e => e.indexed ? r++ : null)), r > 0 && e.topics.length !== r + 1 && (t = {
                anonymous: !0,
                inputs: []
              });
            }
            var n = t.anonymous ? e.topics : e.topics.slice(1);
            return r.returnValues = h.decodeLog(t.inputs, e.data, n), delete r.returnValues.__length__, r.event = t.name, r.signature = t.anonymous || !e.topics[0] ? null : e.topics[0], 
            r.raw = {
              data: r.data,
              topics: r.topics
            }, delete r.data, delete r.topics, r;
          }, d.prototype._encodeMethodABI = function() {
            var e = this._method.signature, t = this.arguments || [], r = !1, n = this._parent.options.jsonInterface.filter((function(t) {
              return "constructor" === e && t.type === e || (t.signature === e || t.signature === e.replace("0x", "") || t.name === e) && "function" === t.type;
            })).map((function(e) {
              var n = Array.isArray(e.inputs) ? e.inputs.length : 0;
              if (n !== t.length) throw new Error("The number of arguments is not matching the methods required number. You need to pass " + n + " arguments.");
              return "function" === e.type && (r = e.signature), Array.isArray(e.inputs) ? e.inputs : [];
            })).map((function(e) {
              return h.encodeParameters(e, t).replace("0x", "");
            }))[0] || "";
            if ("constructor" === e) {
              if (!this._deployData) throw new Error("The contract has no contract data option set. This is necessary to append the constructor parameters.");
              return this._deployData.startsWith("0x") || (this._deployData = "0x" + this._deployData), this._deployData + n;
            }
            var i = r ? r + n : n;
            if (!i) throw new Error("Couldn't find a matching contract method named \"" + this._method.name + '".');
            return i;
          }, d.prototype._decodeMethodReturn = function(e, t) {
            if (!t) return null;
            t = t.length >= 2 ? t.slice(2) : t;
            var r = h.decodeParameters(e, t);
            return 1 === r.__length__ ? r[0] : (delete r.__length__, r);
          }, d.prototype.deploy = function(e, t) {
            if ((e = e || {}).arguments = e.arguments || [], !(e = this._getOrSetDefaultOptions(e)).data) {
              if ("function" == typeof t) return t(f.ContractMissingDeployDataError());
              throw f.ContractMissingDeployDataError();
            }
            var r = this.options.jsonInterface.find((e => "constructor" === e.type)) || {};
            return r.signature = "constructor", this._createTxObject.apply({
              method: r,
              parent: this,
              deployData: e.data,
              _ethAccounts: this.constructor._ethAccounts
            }, e.arguments);
          }, d.prototype._generateEventOptions = function() {
            var e = Array.prototype.slice.call(arguments), t = this._getCallback(e), r = "object" === (!!e[e.length - 1] && typeof e[e.length - 1]) ? e.pop() : {}, n = "string" == typeof e[0] ? e[0] : "allevents", i = "allevents" === n.toLowerCase() ? {
              name: "ALLEVENTS",
              jsonInterface: this.options.jsonInterface
            } : this.options.jsonInterface.find((function(e) {
              return "event" === e.type && (e.name === n || e.signature === "0x" + n.replace("0x", ""));
            }));
            if (!i) throw f.ContractEventDoesNotExistError(n);
            if (!s.isAddress(this.options.address)) throw f.ContractNoAddressDefinedError();
            return {
              params: this._encodeEventABI(i, r),
              event: i,
              callback: t
            };
          }, d.prototype.clone = function() {
            return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
          }, d.prototype.once = function(e, t, r) {
            var n = Array.prototype.slice.call(arguments);
            if (!(r = this._getCallback(n))) throw f.ContractOnceRequiresCallbackError();
            t && delete t.fromBlock, this._on(e, t, (function(e, t, n) {
              n.unsubscribe(), "function" == typeof r && r(e, t, n);
            }));
          }, d.prototype._on = function() {
            var e = this._generateEventOptions.apply(this, arguments);
            e.params && e.params.toBlock && (delete e.params.toBlock, n.warn("Invalid option: toBlock. Use getPastEvents for specific range.")), 
            this._checkListener("newListener", e.event.name), this._checkListener("removeListener", e.event.name);
            var t = new a({
              subscription: {
                params: 1,
                inputFormatter: [ c.inputLogFormatter ],
                outputFormatter: this._decodeEventABI.bind(e.event),
                subscriptionHandler: function(e) {
                  e.removed ? this.emit("changed", e) : this.emit("data", e), "function" == typeof this.callback && this.callback(null, e, this);
                }
              },
              type: "eth",
              requestManager: this._requestManager
            });
            return t.subscribe("logs", e.params, e.callback || function() {}), t;
          }, d.prototype.getPastEvents = function() {
            var e = this._generateEventOptions.apply(this, arguments), t = new o({
              name: "getPastLogs",
              call: "eth_getLogs",
              params: 1,
              inputFormatter: [ c.inputLogFormatter ],
              outputFormatter: this._decodeEventABI.bind(e.event)
            });
            t.setRequestManager(this._requestManager);
            var r = t.buildCall();
            return t = null, r(e.params, e.callback);
          }, d.prototype._createTxObject = function() {
            var e = Array.prototype.slice.call(arguments), t = {};
            if ("function" === this.method.type && (t.call = this.parent._executeMethod.bind(t, "call"), t.call.request = this.parent._executeMethod.bind(t, "call", !0)), 
            t.send = this.parent._executeMethod.bind(t, "send"), t.send.request = this.parent._executeMethod.bind(t, "send", !0), t.encodeABI = this.parent._encodeMethodABI.bind(t), 
            t.estimateGas = this.parent._executeMethod.bind(t, "estimate"), t.createAccessList = this.parent._executeMethod.bind(t, "createAccessList"), 
            e && this.method.inputs && e.length !== this.method.inputs.length) {
              if (this.nextMethod) return this.nextMethod.apply(null, e);
              throw f.InvalidNumberOfParams(e.length, this.method.inputs.length, this.method.name);
            }
            return t.arguments = e || [], t._method = this.method, t._parent = this.parent, t._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts, 
            this.deployData && (t._deployData = this.deployData), t;
          }, d.prototype._processExecuteArguments = function(e, t) {
            var r = {};
            if (r.type = e.shift(), r.callback = this._parent._getCallback(e), "call" !== r.type || !0 === e[e.length - 1] || "string" != typeof e[e.length - 1] && !isFinite(e[e.length - 1]) || (r.defaultBlock = e.pop()), 
            r.options = "object" === (!!e[e.length - 1] && typeof e[e.length - 1]) ? e.pop() : {}, r.generateRequest = !0 === e[e.length - 1] && e.pop(), 
            r.options = this._parent._getOrSetDefaultOptions(r.options), r.options.data = this.encodeABI(), !this._deployData && !s.isAddress(this._parent.options.address)) throw f.ContractNoAddressDefinedError();
            return this._deployData || (r.options.to = this._parent.options.address), r.options.data ? r : s._fireError(new Error("Couldn't find a matching contract method, or the number of parameters is wrong."), t.eventEmitter, t.reject, r.callback);
          }, d.prototype._executeMethod = function() {
            var e = this, t = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), r), r = u("send" !== t.type), n = e.constructor._ethAccounts || e._ethAccounts;
            if (t.generateRequest) {
              var i = {
                params: [ c.inputCallFormatter.call(this._parent, t.options) ],
                callback: t.callback
              };
              return "call" === t.type ? (i.params.push(c.inputDefaultBlockNumberFormatter.call(this._parent, t.defaultBlock)), i.method = "eth_call", 
              i.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs)) : i.method = "eth_sendTransaction", i;
            }
            switch (t.type) {
             case "createAccessList":
              if (!s.isAddress(t.options.from)) return s._fireError(f.ContractNoFromAddressDefinedError(), r.eventEmitter, r.reject, t.callback);
              var a = new o({
                name: "createAccessList",
                call: "eth_createAccessList",
                params: 2,
                inputFormatter: [ c.inputTransactionFormatter, c.inputDefaultBlockNumberFormatter ],
                requestManager: e._parent._requestManager,
                accounts: n,
                defaultAccount: e._parent.defaultAccount,
                defaultBlock: e._parent.defaultBlock
              }).createFunction();
              return a(t.options, t.callback);

             case "estimate":
              var d = new o({
                name: "estimateGas",
                call: "eth_estimateGas",
                params: 1,
                inputFormatter: [ c.inputCallFormatter ],
                outputFormatter: s.hexToNumber,
                requestManager: e._parent._requestManager,
                accounts: n,
                defaultAccount: e._parent.defaultAccount,
                defaultBlock: e._parent.defaultBlock
              }).createFunction();
              return d(t.options, t.callback);

             case "call":
              var l = new o({
                name: "call",
                call: "eth_call",
                params: 2,
                inputFormatter: [ c.inputCallFormatter, c.inputDefaultBlockNumberFormatter ],
                outputFormatter: function(t) {
                  return e._parent._decodeMethodReturn(e._method.outputs, t);
                },
                requestManager: e._parent._requestManager,
                accounts: n,
                defaultAccount: e._parent.defaultAccount,
                defaultBlock: e._parent.defaultBlock,
                handleRevert: e._parent.handleRevert,
                abiCoder: h
              }).createFunction();
              return l(t.options, t.defaultBlock, t.callback);

             case "send":
              if (!s.isAddress(t.options.from)) return s._fireError(f.ContractNoFromAddressDefinedError(), r.eventEmitter, r.reject, t.callback);
              if ("boolean" == typeof this._method.payable && !this._method.payable && t.options.value && t.options.value > 0) return s._fireError(new Error("Can not send value to non-payable contract method or constructor"), r.eventEmitter, r.reject, t.callback);
              var p = {
                receiptFormatter: function(t) {
                  if (Array.isArray(t.logs)) {
                    var r = t.logs.map((t => e._parent._decodeEventABI.call({
                      name: "ALLEVENTS",
                      jsonInterface: e._parent.options.jsonInterface
                    }, t)));
                    t.events = {};
                    var n = 0;
                    r.forEach((function(e) {
                      e.event ? t.events[e.event] ? Array.isArray(t.events[e.event]) ? t.events[e.event].push(e) : t.events[e.event] = [ t.events[e.event], e ] : t.events[e.event] = e : (t.events[n] = e, 
                      n++);
                    })), delete t.logs;
                  }
                  return t;
                },
                contractDeployFormatter: function(t) {
                  var r = e._parent.clone();
                  return r.options.address = t.contractAddress, r;
                }
              }, b = new o({
                name: "sendTransaction",
                call: "eth_sendTransaction",
                params: 1,
                inputFormatter: [ c.inputTransactionFormatter ],
                requestManager: e._parent._requestManager,
                accounts: e.constructor._ethAccounts || e._ethAccounts,
                defaultAccount: e._parent.defaultAccount,
                defaultBlock: e._parent.defaultBlock,
                transactionBlockTimeout: e._parent.transactionBlockTimeout,
                transactionConfirmationBlocks: e._parent.transactionConfirmationBlocks,
                transactionPollingTimeout: e._parent.transactionPollingTimeout,
                transactionPollingInterval: e._parent.transactionPollingInterval,
                defaultCommon: e._parent.defaultCommon,
                defaultChain: e._parent.defaultChain,
                defaultHardfork: e._parent.defaultHardfork,
                handleRevert: e._parent.handleRevert,
                extraFormatters: p,
                abiCoder: h
              }).createFunction();
              return b(t.options, t.callback);

             default:
              throw new Error('Method "' + t.type + '" not implemented.');
            }
          }, e.exports = d;
        },
        4751: (e, t, r) => {
          "use strict";
          const n = r(8269), i = r(3550), o = function(e) {
            const t = "A".charCodeAt(0), r = "Z".charCodeAt(0);
            return (e = (e = e.toUpperCase()).slice(4) + e.slice(0, 4)).split("").map((function(e) {
              const n = e.charCodeAt(0);
              return n >= t && n <= r ? n - t + 10 : e;
            })).join("");
          }, s = function(e) {
            let t, r = e;
            for (;r.length > 2; ) t = r.slice(0, 9), r = parseInt(t, 10) % 97 + r.slice(t.length);
            return parseInt(r, 10) % 97;
          };
          class a {
            constructor(e) {
              this._iban = e;
            }
            static toAddress(e) {
              if (!(e = new a(e)).isDirect()) throw new Error("IBAN is indirect and can't be converted");
              return e.toAddress();
            }
            static toIban(e) {
              return a.fromAddress(e).toString();
            }
            static fromAddress(e) {
              if (!n.isAddress(e)) throw new Error("Provided address is not a valid address: " + e);
              e = e.replace("0x", "").replace("0X", "");
              const t = function(e, t) {
                let r = e;
                for (;r.length < 30; ) r = "0" + r;
                return r;
              }(new i(e, 16).toString(36));
              return a.fromBban(t.toUpperCase());
            }
            static fromBban(e) {
              const t = ("0" + (98 - s(o("XE00" + e)))).slice(-2);
              return new a("XE" + t + e);
            }
            static createIndirect(e) {
              return a.fromBban("ETH" + e.institution + e.identifier);
            }
            static isValid(e) {
              return new a(e).isValid();
            }
            isValid() {
              return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && 1 === s(o(this._iban));
            }
            isDirect() {
              return 34 === this._iban.length || 35 === this._iban.length;
            }
            isIndirect() {
              return 20 === this._iban.length;
            }
            checksum() {
              return this._iban.slice(2, 4);
            }
            institution() {
              return this.isIndirect() ? this._iban.slice(7, 11) : "";
            }
            client() {
              return this.isIndirect() ? this._iban.slice(11) : "";
            }
            toAddress() {
              if (this.isDirect()) {
                const e = this._iban.slice(4), t = new i(e, 36);
                return n.toChecksumAddress(t.toString(16, 20));
              }
              return "";
            }
            toString() {
              return this._iban;
            }
          }
          e.exports = a;
        },
        4351: (e, t, r) => {
          var n = r(4390).errors, i = r(9536).XMLHttpRequest, o = r(8501), s = r(9267), a = function(e, t) {
            t = t || {}, this.withCredentials = t.withCredentials || !1, this.timeout = t.timeout || 0, this.headers = t.headers, this.agent = t.agent, 
            this.connected = !1;
            const r = !1 !== t.keepAlive;
            this.host = e || "http://localhost:8545", this.agent || ("https" === this.host.substring(0, 5) ? this.httpsAgent = new s.Agent({
              keepAlive: r
            }) : this.httpAgent = new o.Agent({
              keepAlive: r
            }));
          };
          a.prototype._prepareRequest = function() {
            var e;
            if ("undefined" != typeof XMLHttpRequest) e = new XMLHttpRequest; else {
              e = new i;
              var t = {
                httpsAgent: this.httpsAgent,
                httpAgent: this.httpAgent,
                baseUrl: this.baseUrl
              };
              this.agent && (t.httpsAgent = this.agent.https, t.httpAgent = this.agent.http, t.baseUrl = this.agent.baseUrl), e.nodejsSet(t);
            }
            return e.open("POST", this.host, !0), e.setRequestHeader("Content-Type", "application/json"), e.timeout = this.timeout, 
            e.withCredentials = this.withCredentials, this.headers && this.headers.forEach((function(t) {
              e.setRequestHeader(t.name, t.value);
            })), e;
          }, a.prototype.send = function(e, t) {
            var r = this, i = this._prepareRequest();
            i.onreadystatechange = function() {
              if (4 === i.readyState && 1 !== i.timeout) {
                var e = i.responseText, o = null;
                try {
                  e = JSON.parse(e);
                } catch (e) {
                  o = n.InvalidResponse(i.responseText);
                }
                r.connected = !0, t(o, e);
              }
            }, i.ontimeout = function() {
              r.connected = !1, t(n.ConnectionTimeout(this.timeout));
            };
            try {
              i.send(JSON.stringify(e));
            } catch (e) {
              this.connected = !1, t(n.InvalidConnection(this.host));
            }
          }, a.prototype.disconnect = function() {}, a.prototype.supportsSubscriptions = function() {
            return !1;
          }, e.exports = a;
        },
        8269: (e, t, r) => {
          var n = r(4278), i = r(329), o = r(8668), s = r(1798), a = r(3550), c = function(e, t) {
            var r = [];
            return t.forEach((function(t) {
              if ("object" == typeof t.components) {
                if ("tuple" !== t.type.substring(0, 5)) throw new Error("components found but type is not tuple; report on GitHub");
                var n = "", i = t.type.indexOf("[");
                i >= 0 && (n = t.type.substring(i));
                var o = c(e, t.components);
                Array.isArray(o) && e ? r.push("tuple(" + o.join(",") + ")" + n) : e ? r.push("(" + o + ")") : r.push("(" + o.join(",") + ")" + n);
              } else r.push(t.type);
            })), r;
          }, f = function(e) {
            if (!i.isHexStrict(e)) throw new Error("The parameter must be a valid HEX string.");
            var t = "", r = 0, n = e.length;
            for ("0x" === e.substring(0, 2) && (r = 2); r < n; r += 2) {
              var o = parseInt(e.slice(r, r + 2), 16);
              t += String.fromCharCode(o);
            }
            return t;
          }, u = function(e) {
            if (!e) return "0x00";
            for (var t = "", r = 0; r < e.length; r++) {
              var n = e.charCodeAt(r).toString(16);
              t += n.length < 2 ? "0" + n : n;
            }
            return "0x" + t;
          }, h = function(e) {
            if (e = e ? e.toLowerCase() : "ether", !n.unitMap[e]) throw new Error('This unit "' + e + "\" doesn't exist, please use the one of the following units" + JSON.stringify(n.unitMap, null, 2));
            return e;
          };
          e.exports = {
            _fireError: function(e, t, r, n, i) {
              return !e || "object" != typeof e || e instanceof Error || !e.data || ((e.data && "object" == typeof e.data || Array.isArray(e.data)) && (e.data = JSON.stringify(e.data, null, 2)), 
              e = e.message + "\n" + e.data), "string" == typeof e && (e = new Error(e)), "function" == typeof n && n(e, i), "function" == typeof r && ((t && "function" == typeof t.listeners && t.listeners("error").length || "function" == typeof n) && t.catch((function() {})), 
              setTimeout((function() {
                r(e);
              }), 1)), t && "function" == typeof t.emit && setTimeout((function() {
                t.emit("error", e, i), t.removeAllListeners();
              }), 1), t;
            },
            _jsonInterfaceMethodToString: function(e) {
              return e && "object" == typeof e && e.name && -1 !== e.name.indexOf("(") ? e.name : e.name + "(" + c(!1, e.inputs).join(",") + ")";
            },
            _flattenTypes: c,
            randomHex: function(e) {
              return "0x" + s(e).toString("hex");
            },
            BN: i.BN,
            isBN: i.isBN,
            isBigNumber: i.isBigNumber,
            isHex: i.isHex,
            isHexStrict: i.isHexStrict,
            sha3: i.sha3,
            sha3Raw: i.sha3Raw,
            keccak256: i.sha3,
            soliditySha3: o.soliditySha3,
            soliditySha3Raw: o.soliditySha3Raw,
            encodePacked: o.encodePacked,
            isAddress: i.isAddress,
            checkAddressChecksum: i.checkAddressChecksum,
            toChecksumAddress: function(e) {
              if (void 0 === e) return "";
              if (!/^(0x)?[0-9a-f]{40}$/i.test(e)) throw new Error('Given address "' + e + '" is not a valid Ethereum address.');
              e = e.toLowerCase().replace(/^0x/i, "");
              for (var t = i.sha3(e).replace(/^0x/i, ""), r = "0x", n = 0; n < e.length; n++) parseInt(t[n], 16) > 7 ? r += e[n].toUpperCase() : r += e[n];
              return r;
            },
            toHex: i.toHex,
            toBN: i.toBN,
            bytesToHex: i.bytesToHex,
            hexToBytes: i.hexToBytes,
            hexToNumberString: i.hexToNumberString,
            hexToNumber: i.hexToNumber,
            toDecimal: i.hexToNumber,
            numberToHex: i.numberToHex,
            fromDecimal: i.numberToHex,
            hexToUtf8: i.hexToUtf8,
            hexToString: i.hexToUtf8,
            toUtf8: i.hexToUtf8,
            stripHexPrefix: i.stripHexPrefix,
            utf8ToHex: i.utf8ToHex,
            stringToHex: i.utf8ToHex,
            fromUtf8: i.utf8ToHex,
            hexToAscii: f,
            toAscii: f,
            asciiToHex: u,
            fromAscii: u,
            unitMap: n.unitMap,
            toWei: function(e, t) {
              if (t = h(t), !i.isBN(e) && "string" != typeof e) throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
              return i.isBN(e) ? n.toWei(e, t) : n.toWei(e, t).toString(10);
            },
            fromWei: function(e, t) {
              if (t = h(t), !i.isBN(e) && "string" != typeof e) throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
              return i.isBN(e) ? n.fromWei(e, t) : n.fromWei(e, t).toString(10);
            },
            padLeft: i.leftPad,
            leftPad: i.leftPad,
            padRight: i.rightPad,
            rightPad: i.rightPad,
            toTwosComplement: i.toTwosComplement,
            isBloom: i.isBloom,
            isUserEthereumAddressInBloom: i.isUserEthereumAddressInBloom,
            isContractAddressInBloom: i.isContractAddressInBloom,
            isTopic: i.isTopic,
            isTopicInBloom: i.isTopicInBloom,
            isInBloom: i.isInBloom,
            compareBlockNumbers: function(e, t) {
              if (e == t) return 0;
              if ("genesis" != e && "earliest" != e && 0 != e || "genesis" != t && "earliest" != t && 0 != t) {
                if ("genesis" == e || "earliest" == e) return -1;
                if ("genesis" == t || "earliest" == t) return 1;
                if ("latest" == e) return "pending" == t ? -1 : 1;
                if ("latest" === t) return "pending" == e ? 1 : -1;
                if ("pending" == e) return 1;
                if ("pending" == t) return -1;
                {
                  let r = new a(e), n = new a(t);
                  return r.lt(n) ? -1 : r.eq(n) ? 0 : 1;
                }
              }
              return 0;
            },
            toNumber: i.toNumber
          };
        },
        8668: (e, t, r) => {
          var n = r(3550), i = r(329), o = function(e) {
            var t = typeof e;
            if ("string" === t) return i.isHexStrict(e) ? new n(e.replace(/0x/i, ""), 16) : new n(e, 10);
            if ("number" === t) return new n(e);
            if (i.isBigNumber(e)) return new n(e.toString(10));
            if (i.isBN(e)) return e;
            throw new Error(e + " is not a number");
          }, s = function(e, t, r) {
            var s, a, c;
            if ("bytes" === (e = (c = e).startsWith("int[") ? "int256" + c.slice(3) : "int" === c ? "int256" : c.startsWith("uint[") ? "uint256" + c.slice(4) : "uint" === c ? "uint256" : c.startsWith("fixed[") ? "fixed128x128" + c.slice(5) : "fixed" === c ? "fixed128x128" : c.startsWith("ufixed[") ? "ufixed128x128" + c.slice(6) : "ufixed" === c ? "ufixed128x128" : c)) {
              if (t.replace(/^0x/i, "").length % 2 != 0) throw new Error("Invalid bytes characters " + t.length);
              return t;
            }
            if ("string" === e) return i.utf8ToHex(t);
            if ("bool" === e) return t ? "01" : "00";
            if (e.startsWith("address")) {
              if (s = r ? 64 : 40, !i.isAddress(t)) throw new Error(t + " is not a valid address, or the checksum is invalid.");
              return i.leftPad(t.toLowerCase(), s);
            }
            if (s = function(e) {
              var t = /^\D+(\d+).*$/.exec(e);
              return t ? parseInt(t[1], 10) : null;
            }(e), e.startsWith("bytes")) {
              if (!s) throw new Error("bytes[] not yet supported in solidity");
              if (r && (s = 32), s < 1 || s > 32 || s < t.replace(/^0x/i, "").length / 2) throw new Error("Invalid bytes" + s + " for " + t);
              return i.rightPad(t, 2 * s);
            }
            if (e.startsWith("uint")) {
              if (s % 8 || s < 8 || s > 256) throw new Error("Invalid uint" + s + " size");
              if ((a = o(t)).bitLength() > s) throw new Error("Supplied uint exceeds width: " + s + " vs " + a.bitLength());
              if (a.lt(new n(0))) throw new Error("Supplied uint " + a.toString() + " is negative");
              return s ? i.leftPad(a.toString("hex"), s / 8 * 2) : a;
            }
            if (e.startsWith("int")) {
              if (s % 8 || s < 8 || s > 256) throw new Error("Invalid int" + s + " size");
              if ((a = o(t)).bitLength() > s) throw new Error("Supplied int exceeds width: " + s + " vs " + a.bitLength());
              return a.lt(new n(0)) ? a.toTwos(s).toString("hex") : s ? i.leftPad(a.toString("hex"), s / 8 * 2) : a;
            }
            throw new Error("Unsupported or invalid type: " + e);
          }, a = function(e) {
            if (Array.isArray(e)) throw new Error("Autodetection of array types is not supported.");
            var t, r, o = "";
            if (e && "object" == typeof e && (e.hasOwnProperty("v") || e.hasOwnProperty("t") || e.hasOwnProperty("value") || e.hasOwnProperty("type")) ? (t = e.hasOwnProperty("t") ? e.t : e.type, 
            o = e.hasOwnProperty("v") ? e.v : e.value) : (t = i.toHex(e, !0), o = i.toHex(e), t.startsWith("int") || t.startsWith("uint") || (t = "bytes")), 
            !t.startsWith("int") && !t.startsWith("uint") || "string" != typeof o || /^(-)?0x/i.test(o) || (o = new n(o)), Array.isArray(o)) {
              if (r = function(e) {
                var t = /^\D+\d*\[(\d+)\]$/.exec(e);
                return t ? parseInt(t[1], 10) : null;
              }(t), r && o.length !== r) throw new Error(t + " is not matching the given array " + JSON.stringify(o));
              r = o.length;
            }
            return Array.isArray(o) ? o.map((function(e) {
              return s(t, e, r).toString("hex").replace("0x", "");
            })).join("") : s(t, o, r).toString("hex").replace("0x", "");
          };
          e.exports = {
            soliditySha3: function() {
              var e = Array.prototype.slice.call(arguments), t = e.map(a);
              return i.sha3("0x" + t.join(""));
            },
            soliditySha3Raw: function() {
              return i.sha3Raw("0x" + Array.prototype.slice.call(arguments).map(a).join(""));
            },
            encodePacked: function() {
              var e = Array.prototype.slice.call(arguments), t = e.map(a);
              return "0x" + t.join("").toLowerCase();
            }
          };
        },
        329: (e, t, r) => {
          var n = r(8764).Buffer, i = r(3550), o = r(3206), s = r(7458), a = r(2751), c = r(6877), f = function(e) {
            return i.isBN(e);
          }, u = function(e) {
            return e && e.constructor && "BigNumber" === e.constructor.name;
          }, h = function(e) {
            try {
              return o.apply(null, arguments);
            } catch (t) {
              throw new Error(t + ' Given value: "' + e + '"');
            }
          }, d = function(e) {
            return !!/^(0x)?[0-9a-f]{40}$/i.test(e) && (!(!/^(0x|0X)?[0-9a-f]{40}$/.test(e) && !/^(0x|0X)?[0-9A-F]{40}$/.test(e)) || l(e));
          }, l = function(e) {
            e = e.replace(/^0x/i, "");
            for (var t = _(e.toLowerCase()).replace(/^0x/i, ""), r = 0; r < 40; r++) if (parseInt(t[r], 16) > 7 && e[r].toUpperCase() !== e[r] || parseInt(t[r], 16) <= 7 && e[r].toLowerCase() !== e[r]) return !1;
            return !0;
          }, p = function(e) {
            var t = "";
            e = (e = (e = (e = (e = s.encode(e)).replace(/^(?:\u0000)*/, "")).split("").reverse().join("")).replace(/^(?:\u0000)*/, "")).split("").reverse().join("");
            for (var r = 0; r < e.length; r++) {
              var n = e.charCodeAt(r).toString(16);
              t += n.length < 2 ? "0" + n : n;
            }
            return "0x" + t;
          }, b = function(e) {
            if (!e) return e;
            if ("string" == typeof e && !m(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
            return h(e).toNumber();
          }, y = function(e) {
            if (null == e) return e;
            if (!isFinite(e) && !m(e)) throw new Error('Given input "' + e + '" is not a number.');
            var t = h(e), r = t.toString(16);
            return t.lt(new i(0)) ? "-0x" + r.slice(1) : "0x" + r;
          }, g = function(e, t) {
            if (d(e)) return t ? "address" : "0x" + e.toLowerCase().replace(/^0x/i, "");
            if ("boolean" == typeof e) return t ? "bool" : e ? "0x01" : "0x00";
            if (n.isBuffer(e)) return "0x" + e.toString("hex");
            if ("object" == typeof e && e && !u(e) && !f(e)) return t ? "string" : p(JSON.stringify(e));
            if ("string" == typeof e) {
              if (0 === e.indexOf("-0x") || 0 === e.indexOf("-0X")) return t ? "int256" : y(e);
              if (0 === e.indexOf("0x") || 0 === e.indexOf("0X")) return t ? "bytes" : e;
              if (!isFinite(e)) return t ? "string" : p(e);
            }
            return t ? e < 0 ? "int256" : "uint256" : y(e);
          }, m = function(e) {
            return ("string" == typeof e || "number" == typeof e) && /^(-)?0x[0-9a-f]*$/i.test(e);
          }, v = function(e) {
            return ("string" == typeof e || "number" == typeof e) && /^(-0x|0x)?[0-9a-f]*$/i.test(e);
          }, w = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", _ = function(e) {
            f(e) && (e = e.toString()), m(e) && /^0x/i.test(e.toString()) ? e = a.toBuffer(e) : "string" == typeof e && (e = n.from(e, "utf-8"));
            var t = a.bufferToHex(a.keccak256(e));
            return t === w ? null : t;
          };
          _._Hash = a.keccak256;
          var S = function(e) {
            if ("string" == typeof e && e.includes("0x")) {
              const [t, r] = e.toLocaleLowerCase().startsWith("-") ? [ "-", e.slice(3) ] : [ "", e.slice(2) ];
              return new i(t + r, 16);
            }
            return new i(e);
          };
          Object.setPrototypeOf(S, i), Object.setPrototypeOf(S.prototype, i.prototype), e.exports = {
            BN: S,
            isBN: f,
            isBigNumber: u,
            toBN: h,
            isAddress: d,
            isBloom: function(e) {
              return c.isBloom(e);
            },
            isUserEthereumAddressInBloom: function(e, t) {
              return c.isUserEthereumAddressInBloom(e, t);
            },
            isContractAddressInBloom: function(e, t) {
              return c.isContractAddressInBloom(e, t);
            },
            isTopic: function(e) {
              return c.isTopic(e);
            },
            isTopicInBloom: function(e, t) {
              return c.isTopicInBloom(e, t);
            },
            isInBloom: function(e, t) {
              return c.isInBloom(e, t);
            },
            checkAddressChecksum: l,
            utf8ToHex: p,
            hexToUtf8: function(e) {
              if (!m(e)) throw new Error('The parameter "' + e + '" must be a valid HEX string.');
              for (var t = "", r = 0, n = (e = (e = (e = (e = (e = e.replace(/^0x/i, "")).replace(/^(?:00)*/, "")).split("").reverse().join("")).replace(/^(?:00)*/, "")).split("").reverse().join("")).length, i = 0; i < n; i += 2) r = parseInt(e.slice(i, i + 2), 16), 
              t += String.fromCharCode(r);
              return s.decode(t);
            },
            hexToNumber: b,
            hexToNumberString: function(e) {
              if (!e) return e;
              if ("string" == typeof e && !m(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
              return h(e).toString(10);
            },
            numberToHex: y,
            toHex: g,
            hexToBytes: function(e) {
              if (e = e.toString(16), !m(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
              e = e.replace(/^0x/i, "");
              for (var t = [], r = 0; r < e.length; r += 2) t.push(parseInt(e.slice(r, r + 2), 16));
              return t;
            },
            bytesToHex: function(e) {
              for (var t = [], r = 0; r < e.length; r++) t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
              return "0x" + t.join("");
            },
            isHex: v,
            isHexStrict: m,
            stripHexPrefix: function(e) {
              return 0 !== e && v(e) ? e.replace(/^(-)?0x/i, "$1") : e;
            },
            leftPad: function(e, t, r) {
              var n = /^0x/i.test(e) || "number" == typeof e, i = t - (e = e.toString(16).replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
              return (n ? "0x" : "") + new Array(i).join(r || "0") + e;
            },
            rightPad: function(e, t, r) {
              var n = /^0x/i.test(e) || "number" == typeof e, i = t - (e = e.toString(16).replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
              return (n ? "0x" : "") + e + new Array(i).join(r || "0");
            },
            toTwosComplement: function(e) {
              return "0x" + h(e).toTwos(256).toString(16, 64);
            },
            sha3: _,
            sha3Raw: function(e) {
              return null === (e = _(e)) ? w : e;
            },
            toNumber: function(e) {
              return "number" == typeof e ? e : b(g(e));
            }
          };
        },
        6430: (e, t, r) => {
          "use strict";
          var n = r(4029), i = r(3083), o = r(1924), s = o("Object.prototype.toString"), a = r(6410)(), c = "undefined" == typeof globalThis ? r.g : globalThis, f = i(), u = o("String.prototype.slice"), h = {}, d = r(882), l = Object.getPrototypeOf;
          a && d && l && n(f, (function(e) {
            if ("function" == typeof c[e]) {
              var t = new c[e];
              if (Symbol.toStringTag in t) {
                var r = l(t), n = d(r, Symbol.toStringTag);
                if (!n) {
                  var i = l(r);
                  n = d(i, Symbol.toStringTag);
                }
                h[e] = n.get;
              }
            }
          }));
          var p = r(5692);
          e.exports = function(e) {
            return !!p(e) && (a && Symbol.toStringTag in e ? function(e) {
              var t = !1;
              return n(h, (function(r, n) {
                if (!t) try {
                  var i = r.call(e);
                  i === n && (t = i);
                } catch (e) {}
              })), t;
            }(e) : u(s(e), 8, -1));
          };
        },
        2479: e => {
          e.exports = function e(t, r) {
            if (t && r) return e(t)(r);
            if ("function" != typeof t) throw new TypeError("need wrapper function");
            return Object.keys(t).forEach((function(e) {
              n[e] = t[e];
            })), n;
            function n() {
              for (var e = new Array(arguments.length), r = 0; r < e.length; r++) e[r] = arguments[r];
              var n = t.apply(this, e), i = e[e.length - 1];
              return "function" == typeof n && n !== i && Object.keys(i).forEach((function(e) {
                n[e] = i[e];
              })), n;
            }
          };
        },
        8355: function(e, t) {
          "use strict";
          var r, n = this && this.__extends || (r = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function(e, t) {
            e.__proto__ = t;
          } || function(e, t) {
            for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
          }, function(e, t) {
            function n() {
              this.constructor = e;
            }
            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n);
          });
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var i = function(e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }
            return n(t, e), t;
          }(Error);
          t.SecurityError = i;
          var o = function(e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }
            return n(t, e), t;
          }(Error);
          t.InvalidStateError = o;
          var s = function(e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }
            return n(t, e), t;
          }(Error);
          t.NetworkError = s;
          var a = function(e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }
            return n(t, e), t;
          }(Error);
          t.SyntaxError = a;
        },
        9536: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), function(e) {
            for (var r in e) t.hasOwnProperty(r) || (t[r] = e[r]);
          }(r(6763));
          var n = r(335);
          t.XMLHttpRequestEventTarget = n.XMLHttpRequestEventTarget;
        },
        7296: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ProgressEvent = function(e) {
            this.type = e, this.bubbles = !1, this.cancelable = !1, this.loaded = 0, this.lengthComputable = !1, this.total = 0;
          };
        },
        335: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var r = function() {
            function e() {
              this.listeners = {};
            }
            return e.prototype.addEventListener = function(e, t) {
              e = e.toLowerCase(), this.listeners[e] = this.listeners[e] || [], this.listeners[e].push(t.handleEvent || t);
            }, e.prototype.removeEventListener = function(e, t) {
              if (e = e.toLowerCase(), this.listeners[e]) {
                var r = this.listeners[e].indexOf(t.handleEvent || t);
                r < 0 || this.listeners[e].splice(r, 1);
              }
            }, e.prototype.dispatchEvent = function(e) {
              var t = e.type.toLowerCase();
              if (e.target = this, this.listeners[t]) for (var r = 0, n = this.listeners[t]; r < n.length; r++) n[r].call(this, e);
              var i = this["on" + t];
              return i && i.call(this, e), !0;
            }, e;
          }();
          t.XMLHttpRequestEventTarget = r;
        },
        7983: function(e, t, r) {
          "use strict";
          var n, i = r(8764).Buffer, o = this && this.__extends || (n = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function(e, t) {
            e.__proto__ = t;
          } || function(e, t) {
            for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
          }, function(e, t) {
            function r() {
              this.constructor = e;
            }
            n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
          });
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var s = function(e) {
            function t() {
              var t = e.call(this) || this;
              return t._contentType = null, t._body = null, t._reset(), t;
            }
            return o(t, e), t.prototype._reset = function() {
              this._contentType = null, this._body = null;
            }, t.prototype._setData = function(e) {
              if (null != e) if ("string" == typeof e) 0 !== e.length && (this._contentType = "text/plain;charset=UTF-8"), this._body = new i(e, "utf-8"); else if (i.isBuffer(e)) this._body = e; else if (e instanceof ArrayBuffer) {
                for (var t = new i(e.byteLength), r = new Uint8Array(e), n = 0; n < e.byteLength; n++) t[n] = r[n];
                this._body = t;
              } else {
                if (!(e.buffer && e.buffer instanceof ArrayBuffer)) throw new Error("Unsupported send() data " + e);
                t = new i(e.byteLength);
                var o = e.byteOffset;
                for (r = new Uint8Array(e.buffer), n = 0; n < e.byteLength; n++) t[n] = r[n + o];
                this._body = t;
              }
            }, t.prototype._finalizeHeaders = function(e, t) {
              this._contentType && !t["content-type"] && (e["Content-Type"] = this._contentType), this._body && (e["Content-Length"] = this._body.length.toString());
            }, t.prototype._startUpload = function(e) {
              this._body && e.write(this._body), e.end();
            }, t;
          }(r(335).XMLHttpRequestEventTarget);
          t.XMLHttpRequestUpload = s;
        },
        6763: function(e, t, r) {
          "use strict";
          var i, o = r(4155), s = r(8764).Buffer, a = this && this.__extends || (i = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function(e, t) {
            e.__proto__ = t;
          } || function(e, t) {
            for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
          }, function(e, t) {
            function r() {
              this.constructor = e;
            }
            i(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
          }), c = this && this.__assign || Object.assign || function(e) {
            for (var t, r = 1, n = arguments.length; r < n; r++) for (var i in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
            return e;
          };
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var f = r(8501), u = r(9267), h = r(7435), d = r(8575), l = r(7296), p = r(8355), b = r(335), y = r(7983), g = r(7866), m = function(e) {
            function t(r) {
              void 0 === r && (r = {});
              var n = e.call(this) || this;
              return n.UNSENT = t.UNSENT, n.OPENED = t.OPENED, n.HEADERS_RECEIVED = t.HEADERS_RECEIVED, n.LOADING = t.LOADING, n.DONE = t.DONE, 
              n.onreadystatechange = null, n.readyState = t.UNSENT, n.response = null, n.responseText = "", n.responseType = "", n.status = 0, 
              n.statusText = "", n.timeout = 0, n.upload = new y.XMLHttpRequestUpload, n.responseUrl = "", n.withCredentials = !1, n._method = null, 
              n._url = null, n._sync = !1, n._headers = {}, n._loweredHeaders = {}, n._mimeOverride = null, n._request = null, n._response = null, 
              n._responseParts = null, n._responseHeaders = null, n._aborting = null, n._error = null, n._loadedBytes = 0, n._totalBytes = 0, 
              n._lengthComputable = !1, n._restrictedMethods = {
                CONNECT: !0,
                TRACE: !0,
                TRACK: !0
              }, n._restrictedHeaders = {
                "accept-charset": !0,
                "accept-encoding": !0,
                "access-control-request-headers": !0,
                "access-control-request-method": !0,
                connection: !0,
                "content-length": !0,
                cookie: !0,
                cookie2: !0,
                date: !0,
                dnt: !0,
                expect: !0,
                host: !0,
                "keep-alive": !0,
                origin: !0,
                referer: !0,
                te: !0,
                trailer: !0,
                "transfer-encoding": !0,
                upgrade: !0,
                "user-agent": !0,
                via: !0
              }, n._privateHeaders = {
                "set-cookie": !0,
                "set-cookie2": !0
              }, n._userAgent = "Mozilla/5.0 (" + h.type() + " " + h.arch() + ") node.js/" + o.versions.node + " v8/" + o.versions.v8, 
              n._anonymous = r.anon || !1, n;
            }
            return a(t, e), t.prototype.open = function(e, r, n, i, o) {
              if (void 0 === n && (n = !0), e = e.toUpperCase(), this._restrictedMethods[e]) throw new t.SecurityError("HTTP method " + e + " is not allowed in XHR");
              var s = this._parseUrl(r, i, o);
              this.readyState === t.HEADERS_RECEIVED || (this.readyState, t.LOADING), this._method = e, this._url = s, this._sync = !n, 
              this._headers = {}, this._loweredHeaders = {}, this._mimeOverride = null, this._setReadyState(t.OPENED), this._request = null, 
              this._response = null, this.status = 0, this.statusText = "", this._responseParts = [], this._responseHeaders = null, this._loadedBytes = 0, 
              this._totalBytes = 0, this._lengthComputable = !1;
            }, t.prototype.setRequestHeader = function(e, r) {
              if (this.readyState !== t.OPENED) throw new t.InvalidStateError("XHR readyState must be OPENED");
              var i = e.toLowerCase();
              this._restrictedHeaders[i] || /^sec-/.test(i) || /^proxy-/.test(i) ? n.warn('Refused to set unsafe header "' + e + '"') : (r = r.toString(), 
              null != this._loweredHeaders[i] ? (e = this._loweredHeaders[i], this._headers[e] = this._headers[e] + ", " + r) : (this._loweredHeaders[i] = e, 
              this._headers[e] = r));
            }, t.prototype.send = function(e) {
              if (this.readyState !== t.OPENED) throw new t.InvalidStateError("XHR readyState must be OPENED");
              if (this._request) throw new t.InvalidStateError("send() already called");
              switch (this._url.protocol) {
               case "file:":
                return this._sendFile(e);

               case "http:":
               case "https:":
                return this._sendHttp(e);

               default:
                throw new t.NetworkError("Unsupported protocol " + this._url.protocol);
              }
            }, t.prototype.abort = function() {
              null != this._request && (this._request.abort(), this._setError(), this._dispatchProgress("abort"), this._dispatchProgress("loadend"));
            }, t.prototype.getResponseHeader = function(e) {
              if (null == this._responseHeaders || null == e) return null;
              var t = e.toLowerCase();
              return this._responseHeaders.hasOwnProperty(t) ? this._responseHeaders[e.toLowerCase()] : null;
            }, t.prototype.getAllResponseHeaders = function() {
              var e = this;
              return null == this._responseHeaders ? "" : Object.keys(this._responseHeaders).map((function(t) {
                return t + ": " + e._responseHeaders[t];
              })).join("\r\n");
            }, t.prototype.overrideMimeType = function(e) {
              if (this.readyState === t.LOADING || this.readyState === t.DONE) throw new t.InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
              this._mimeOverride = e.toLowerCase();
            }, t.prototype.nodejsSet = function(e) {
              if (this.nodejsHttpAgent = e.httpAgent || this.nodejsHttpAgent, this.nodejsHttpsAgent = e.httpsAgent || this.nodejsHttpsAgent, 
              e.hasOwnProperty("baseUrl")) {
                if (null != e.baseUrl && !d.parse(e.baseUrl, !1, !0).protocol) throw new t.SyntaxError("baseUrl must be an absolute URL");
                this.nodejsBaseUrl = e.baseUrl;
              }
            }, t.nodejsSet = function(e) {
              t.prototype.nodejsSet(e);
            }, t.prototype._setReadyState = function(e) {
              this.readyState = e, this.dispatchEvent(new l.ProgressEvent("readystatechange"));
            }, t.prototype._sendFile = function(e) {
              throw new Error("Protocol file: not implemented");
            }, t.prototype._sendHttp = function(e) {
              if (this._sync) throw new Error("Synchronous XHR processing not implemented");
              !e || "GET" !== this._method && "HEAD" !== this._method ? e = e || "" : (n.warn("Discarding entity body for " + this._method + " requests"), 
              e = null), this.upload._setData(e), this._finalizeHeaders(), this._sendHxxpRequest();
            }, t.prototype._sendHxxpRequest = function() {
              var e = this;
              if (this.withCredentials) {
                var r = t.cookieJar.getCookies(g.CookieAccessInfo(this._url.hostname, this._url.pathname, "https:" === this._url.protocol)).toValueString();
                this._headers.cookie = this._headers.cookie2 = r;
              }
              var n = "http:" === this._url.protocol ? [ f, this.nodejsHttpAgent ] : [ u, this.nodejsHttpsAgent ], i = n[0], o = n[1], s = i.request.bind(i)({
                hostname: this._url.hostname,
                port: +this._url.port,
                path: this._url.path,
                auth: this._url.auth,
                method: this._method,
                headers: this._headers,
                agent: o
              });
              this._request = s, this.timeout && s.setTimeout(this.timeout, (function() {
                return e._onHttpTimeout(s);
              })), s.on("response", (function(t) {
                return e._onHttpResponse(s, t);
              })), s.on("error", (function(t) {
                return e._onHttpRequestError(s, t);
              })), this.upload._startUpload(s), this._request === s && this._dispatchProgress("loadstart");
            }, t.prototype._finalizeHeaders = function() {
              this._headers = c({}, this._headers, {
                Connection: "keep-alive",
                Host: this._url.host,
                "User-Agent": this._userAgent
              }, this._anonymous ? {
                Referer: "about:blank"
              } : {}), this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
            }, t.prototype._onHttpResponse = function(e, r) {
              var n = this;
              if (this._request === e) {
                if (this.withCredentials && (r.headers["set-cookie"] || r.headers["set-cookie2"]) && t.cookieJar.setCookies(r.headers["set-cookie"] || r.headers["set-cookie2"]), 
                [ 301, 302, 303, 307, 308 ].indexOf(r.statusCode) >= 0) return this._url = this._parseUrl(r.headers.location), this._method = "GET", 
                this._loweredHeaders["content-type"] && (delete this._headers[this._loweredHeaders["content-type"]], delete this._loweredHeaders["content-type"]), 
                null != this._headers["Content-Type"] && delete this._headers["Content-Type"], delete this._headers["Content-Length"], this.upload._reset(), 
                this._finalizeHeaders(), void this._sendHxxpRequest();
                this._response = r, this._response.on("data", (function(e) {
                  return n._onHttpResponseData(r, e);
                })), this._response.on("end", (function() {
                  return n._onHttpResponseEnd(r);
                })), this._response.on("close", (function() {
                  return n._onHttpResponseClose(r);
                })), this.responseUrl = this._url.href.split("#")[0], this.status = r.statusCode, this.statusText = f.STATUS_CODES[this.status], 
                this._parseResponseHeaders(r);
                var i = this._responseHeaders["content-length"] || "";
                this._totalBytes = +i, this._lengthComputable = !!i, this._setReadyState(t.HEADERS_RECEIVED);
              }
            }, t.prototype._onHttpResponseData = function(e, r) {
              this._response === e && (this._responseParts.push(new s(r)), this._loadedBytes += r.length, this.readyState !== t.LOADING && this._setReadyState(t.LOADING), 
              this._dispatchProgress("progress"));
            }, t.prototype._onHttpResponseEnd = function(e) {
              this._response === e && (this._parseResponse(), this._request = null, this._response = null, this._setReadyState(t.DONE), 
              this._dispatchProgress("load"), this._dispatchProgress("loadend"));
            }, t.prototype._onHttpResponseClose = function(e) {
              if (this._response === e) {
                var r = this._request;
                this._setError(), r.abort(), this._setReadyState(t.DONE), this._dispatchProgress("error"), this._dispatchProgress("loadend");
              }
            }, t.prototype._onHttpTimeout = function(e) {
              this._request === e && (this._setError(), e.abort(), this._setReadyState(t.DONE), this._dispatchProgress("timeout"), this._dispatchProgress("loadend"));
            }, t.prototype._onHttpRequestError = function(e, r) {
              this._request === e && (this._setError(), e.abort(), this._setReadyState(t.DONE), this._dispatchProgress("error"), this._dispatchProgress("loadend"));
            }, t.prototype._dispatchProgress = function(e) {
              var r = new t.ProgressEvent(e);
              r.lengthComputable = this._lengthComputable, r.loaded = this._loadedBytes, r.total = this._totalBytes, this.dispatchEvent(r);
            }, t.prototype._setError = function() {
              this._request = null, this._response = null, this._responseHeaders = null, this._responseParts = null;
            }, t.prototype._parseUrl = function(e, t, r) {
              var n = null == this.nodejsBaseUrl ? e : d.resolve(this.nodejsBaseUrl, e), i = d.parse(n, !1, !0);
              i.hash = null;
              var o = (i.auth || "").split(":"), s = o[0], a = o[1];
              return (s || a || t || r) && (i.auth = (t || s || "") + ":" + (r || a || "")), i;
            }, t.prototype._parseResponseHeaders = function(e) {
              for (var t in this._responseHeaders = {}, e.headers) {
                var r = t.toLowerCase();
                this._privateHeaders[r] || (this._responseHeaders[r] = e.headers[t]);
              }
              null != this._mimeOverride && (this._responseHeaders["content-type"] = this._mimeOverride);
            }, t.prototype._parseResponse = function() {
              var e = s.concat(this._responseParts);
              switch (this._responseParts = null, this.responseType) {
               case "json":
                this.responseText = null;
                try {
                  this.response = JSON.parse(e.toString("utf-8"));
                } catch (e) {
                  this.response = null;
                }
                return;

               case "buffer":
                return this.responseText = null, void (this.response = e);

               case "arraybuffer":
                this.responseText = null;
                for (var t = new ArrayBuffer(e.length), r = new Uint8Array(t), n = 0; n < e.length; n++) r[n] = e[n];
                return void (this.response = t);

               default:
                try {
                  this.responseText = e.toString(this._parseResponseEncoding());
                } catch (t) {
                  this.responseText = e.toString("binary");
                }
                this.response = this.responseText;
              }
            }, t.prototype._parseResponseEncoding = function() {
              return /;\s*charset=(.*)$/.exec(this._responseHeaders["content-type"] || "")[1] || "utf-8";
            }, t.ProgressEvent = l.ProgressEvent, t.InvalidStateError = p.InvalidStateError, t.NetworkError = p.NetworkError, t.SecurityError = p.SecurityError, 
            t.SyntaxError = p.SyntaxError, t.XMLHttpRequestUpload = y.XMLHttpRequestUpload, t.UNSENT = 0, t.OPENED = 1, t.HEADERS_RECEIVED = 2, 
            t.LOADING = 3, t.DONE = 4, t.cookieJar = g.CookieJar(), t;
          }(b.XMLHttpRequestEventTarget);
          t.XMLHttpRequest = m, m.prototype.nodejsHttpAgent = f.globalAgent, m.prototype.nodejsHttpsAgent = u.globalAgent, m.prototype.nodejsBaseUrl = null;
        },
        7529: e => {
          e.exports = function() {
            for (var e = {}, r = 0; r < arguments.length; r++) {
              var n = arguments[r];
              for (var i in n) t.call(n, i) && (e[i] = n[i]);
            }
            return e;
          };
          var t = Object.prototype.hasOwnProperty;
        },
        6601: () => {},
        9214: () => {},
        1156: () => {},
        2361: () => {},
        4616: () => {},
        522: () => {},
        6882: () => {},
        3083: (e, t, r) => {
          "use strict";
          var n = [ "BigInt64Array", "BigUint64Array", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray" ], i = "undefined" == typeof globalThis ? r.g : globalThis;
          e.exports = function() {
            for (var e = [], t = 0; t < n.length; t++) "function" == typeof i[n[t]] && (e[e.length] = n[t]);
            return e;
          };
        },
        882: (e, t, r) => {
          "use strict";
          var n = r(210)("%Object.getOwnPropertyDescriptor%", !0);
          if (n) try {
            n([], "length");
          } catch (e) {
            n = null;
          }
          e.exports = n;
        },
        4946: e => {
          "use strict";
          e.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');
        },
        5207: e => {
          "use strict";
          e.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');
        },
        1308: e => {
          "use strict";
          e.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');
        },
        9799: e => {
          "use strict";
          e.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');
        },
        8597: e => {
          "use strict";
          e.exports = {
            i8: "6.5.4"
          };
        },
        2562: e => {
          "use strict";
          e.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');
        }
      }, t = {};
      function r(n) {
        var i = t[n];
        if (void 0 !== i) return i.exports;
        var o = t[n] = {
          id: n,
          loaded: !1,
          exports: {}
        };
        return e[n].call(o.exports, o, o.exports, r), o.loaded = !0, o.exports;
      }
      r.amdO = {}, r.n = e => {
        var t = e && e.__esModule ? () => e.default : () => e;
        return r.d(t, {
          a: t
        }), t;
      }, r.d = (e, t) => {
        for (var n in t) r.o(t, n) && !r.o(e, n) && Object.defineProperty(e, n, {
          enumerable: !0,
          get: t[n]
        });
      }, r.g = function() {
        if ("object" == typeof globalThis) return globalThis;
        try {
          return this || new Function("return this")();
        } catch (e) {
          if ("object" == typeof window) return window;
        }
      }(), r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), r.r = e => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
          value: "Module"
        }), Object.defineProperty(e, "__esModule", {
          value: !0
        });
      }, r.nmd = e => (e.paths = [], e.children || (e.children = []), e);
      var i = {};
      return (() => {
        "use strict";
        function e(e, t, r) {
          return t in e ? Object.defineProperty(e, t, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
          }) : e[t] = r, e;
        }
        r.d(i, {
          default: () => xt
        });
        var t = r(1692), n = r.n(t), o = r(8269);
        const s = {
          ROPSTEN: "ropsten",
          MAINNET: "mainnet",
          POLYGON: "polygon-mainnet"
        }, a = [ {
          inputs: [ {
            internalType: "string",
            name: "_verifier",
            type: "string"
          }, {
            internalType: "bytes32",
            name: "hashedVerifierId",
            type: "bytes32"
          } ],
          name: "getNodeSet",
          outputs: [ {
            internalType: "uint256",
            name: "currentEpoch",
            type: "uint256"
          }, {
            internalType: "string[]",
            name: "torusNodeEndpoints",
            type: "string[]"
          }, {
            internalType: "uint256[]",
            name: "torusNodePubX",
            type: "uint256[]"
          }, {
            internalType: "uint256[]",
            name: "torusNodePubY",
            type: "uint256[]"
          }, {
            internalType: "uint256[]",
            name: "torusIndexes",
            type: "uint256[]"
          } ],
          stateMutability: "view",
          type: "function"
        } ];
        class c {
          constructor() {
            let t, {network: r = s.MAINNET, proxyAddress: i = c.PROXY_ADDRESS_MAINNET} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e(this, "_currentEpoch", ""), e(this, "_torusNodeEndpoints", []), e(this, "_torusNodePub", []), e(this, "_torusIndexes", []), 
            e(this, "nodeListAddress", void 0), e(this, "updated", void 0), e(this, "nodeListContract", void 0);
            try {
              t = new URL(r).href;
            } catch (e) {
              const i = "b8cdb0e4cff24599a286bf8e87ff1c96";
              t = "https://".concat(r, ".infura.io/v3/").concat(i);
            }
            n().setProvider(t), this.nodeListContract = new (n())(a, i), this.nodeListAddress = i, this.updated = !1;
          }
          get _nodeDetails() {
            return {
              currentEpoch: this._currentEpoch,
              nodeListAddress: this.nodeListAddress,
              torusNodeEndpoints: this._torusNodeEndpoints,
              torusNodePub: this._torusNodePub,
              torusIndexes: this._torusIndexes,
              updated: this.updated
            };
          }
          async getNodeDetails(e) {
            let {verifier: t, verifierId: r} = e;
            try {
              if (this.updated && (this.nodeListAddress === c.PROXY_ADDRESS_MAINNET || this.nodeListAddress === c.PROXY_ADDRESS_ROPSTEN)) return this._nodeDetails;
              const e = (0, o.keccak256)(r), n = await this.nodeListContract.methods.getNodeSet(t, e).call(), {currentEpoch: i, torusNodeEndpoints: s, torusNodePubX: a, torusNodePubY: f, torusIndexes: u} = n;
              this._currentEpoch = i, this._torusIndexes = u.map((e => Number(e)));
              const h = [], d = [];
              for (let t = 0; t < s.length; t += 1) {
                const e = s[t], r = a[t], n = f[t], i = "https://".concat(e.split(":")[0], "/jrpc");
                h.push(i), d.push({
                  X: (0, o.toHex)(r).replace("0x", ""),
                  Y: (0, o.toHex)(n).replace("0x", "")
                });
              }
              return this._torusNodeEndpoints = h, this._torusNodePub = d, this.updated = !0, this._nodeDetails;
            } catch (e) {
              if (this.nodeListAddress === c.PROXY_ADDRESS_MAINNET) return c.NODE_DETAILS_MAINNET;
              throw e;
            }
          }
        }
        e(c, "PROXY_ADDRESS_MAINNET", "0xf20336e16B5182637f09821c27BDe29b0AFcfe80"), e(c, "PROXY_ADDRESS_ROPSTEN", "0x6258c9d6c12ed3edda59a1a6527e469517744aa7"), 
        e(c, "PROXY_ADDRESS_POLYGON", "0x9f072ba19b3370e512aa1b4bfcdaf97283168005"), e(c, "NODE_DETAILS_MAINNET", {
          currentEpoch: "19",
          nodeListAddress: c.PROXY_ADDRESS_MAINNET,
          torusNodeEndpoints: [ "https://torus-19.torusnode.com/jrpc", "https://torus-node.ens.domains/jrpc", "https://torus-node.matic.network/jrpc", "https://torus.zilliqa.network/jrpc", "https://torus-mainnet.cosmos.network/jrpc", "https://torus2.etherscan.com/jrpc", "https://torus-node-v2.skalelabs.com/jrpc", "https://torus-node.binancex.dev/jrpc", "https://torusnode.ont.io/jrpc" ],
          torusIndexes: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
          torusNodePub: [ {
            X: "bbe83c64177c3775550e6ba6ac2bc059f6847d644c9e4894e42c60d7974d8c2b",
            Y: "82b49a7caf70def38cdad2740af45c1e4f969650105c5019a29bb18b21a9acb5"
          }, {
            X: "c208cac4ef9a47d386097a9c915b28e9cb89213abee8d26a17198ee261201b0d",
            Y: "c7db2fe4631109f40833de9dc78d07e35706549ee48fa557b33e4e75e1047873"
          }, {
            X: "ca1766bb426d4ca5582818a0c5439d560ea64f5baa060793ab29dd3d0ceacfe",
            Y: "d46c1d08c40e1306e1bca328c2287b8268166b11a1ba4b8442ea2ad0c5e32152"
          }, {
            X: "c3934dd2f6f4b3d2e1e398cc501e143c1e1a381b52feb6d1525af34d16253768",
            Y: "71f5141a5035799099f5ea3e241e66946bc55dc857ac3bd7d6fcdb8dcd3eeeef"
          }, {
            X: "22e66f1929631d00bf026227581597f085fd94fd952fc0dca9f0833398b5c064",
            Y: "6088b3912e10a1e9d50355a609c10db7d188f16a2e2fd7357e51bf4f6a74f0a1"
          }, {
            X: "9dc9fa410f3ce9eb70df70cdea00a49f2c4cc7a31c08c0dab5f863ed35ff5139",
            Y: "627a291cb87a75c61da3f65d6818e1e05e360217179817ed27e8c73bca7ec122"
          }, {
            X: "118b9fc07e97b096d899b9f6658463ce6a8caa64038e37fc969df4e6023dd8c6",
            Y: "baf9fa4e51770f4796ea165dd03a769b8606681a38954a0a92c4cbffd6609ce9"
          }, {
            X: "8a6d8b925da15a273dec3d8f8395ec35cd6878f274b2b180e4e106999db64043",
            Y: "96f67f870c157743da0b1eb84d89bf30500d74dc84c11f501ee1cb013acc8c46"
          }, {
            X: "39cecb62e863729f572f7dfc46c24867981bf04bb405fed0df39e33984bfade5",
            Y: "61c2364434012e68a2be2e9952805037e52629d7762fafc8e10e9fb5bad8f790"
          } ],
          updated: !1
        });
        var f = r(2378), u = r.n(f), h = r(2043), d = r.n(h);
        function l(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function p(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? l(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : l(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        const b = d().getLogger("http-helpers");
        b.setLevel(h.levels.INFO);
        let y = "torus-default", g = "";
        function m(e) {
          y = e;
        }
        async function v(e, t) {
          let r = null;
          try {
            r = new URL(e);
          } catch (e) {}
          return fetch(e, t);
        }
        function w() {
          const e = {};
          return y && (e["x-api-key"] = y), g && (e["x-embed-host"] = g), e;
        }
        function _(e) {
          b.info("Response: ".concat(e.status, " ").concat(e.statusText)), b.info("Url: ".concat(e.url));
        }
        const S = (e, t) => {
          const r = new Promise(((t, r) => {
            const n = setTimeout((() => {
              clearTimeout(n), r(new Error("Timed out in ".concat(e, "ms")));
            }), e);
          }));
          return Promise.race([ t, r ]);
        }, E = async function(e) {
          let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          const n = {
            mode: "cors",
            headers: {}
          };
          r.useAPIKey && (n.headers = p(p({}, n.headers), w()));
          const i = u()(n, t, {
            method: "GET"
          }), o = await v(e, i);
          if (o.ok) return o.json();
          throw _(o), o;
        }, A = function(e) {
          let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
          const i = {
            mode: "cors",
            headers: {
              "Content-Type": "application/json; charset=utf-8"
            }
          };
          n.useAPIKey && (i.headers = p(p({}, i.headers), w()));
          const o = u()(i, r, {
            method: "POST"
          });
          return n.isUrlEncodedData ? (o.body = t, "application/json; charset=utf-8" === o.headers["Content-Type"] && delete o.headers["Content-Type"]) : o.body = JSON.stringify(t), 
          S(n.timeout || 6e4, v(e, o).then((e => {
            if (e.ok) return e.json();
            throw _(e), e;
          })));
        }, x = (e, t) => ({
          jsonrpc: "2.0",
          method: e,
          id: 10,
          params: t
        });
        var k = r(8473), P = r(1798), O = r.n(P), M = (r(3363), r(5811)), I = r.n(M);
        r(8764).Buffer, URL;
        var T = r(7187), R = r(4445), C = r.n(R), N = r(9826), j = r(2840), B = r.n(j), L = r(778), D = r.n(L), U = r(4286), q = r.n(U);
        function F() {}
        const H = "ACK";
        class z extends k.Duplex {
          constructor(t) {
            let {name: r, target: n, targetWindow: i = window, targetOrigin: o = "*"} = t;
            if (super({
              objectMode: !0
            }), e(this, "_init", void 0), e(this, "_haveSyn", void 0), e(this, "_name", void 0), e(this, "_target", void 0), e(this, "_targetWindow", void 0), 
            e(this, "_targetOrigin", void 0), e(this, "_onMessage", void 0), e(this, "_synIntervalId", void 0), !r || !n) throw new Error("Invalid input.");
            this._init = !1, this._haveSyn = !1, this._name = r, this._target = n, this._targetWindow = i, this._targetOrigin = o, this._onMessage = this.onMessage.bind(this), 
            this._synIntervalId = null, window.addEventListener("message", this._onMessage, !1), this._handShake();
          }
          _break() {
            this.cork(), this._write("BRK", null, F), this._haveSyn = !1, this._init = !1;
          }
          _handShake() {
            this._write("SYN", null, F), this.cork();
          }
          _onData(e) {
            if (this._init) if ("BRK" === e) this._break(); else try {
              this.push(e);
            } catch (e) {
              this.emit("error", e);
            } else "SYN" === e ? (this._haveSyn = !0, this._write(H, null, F)) : e === H && (this._init = !0, this._haveSyn || this._write(H, null, F), 
            this.uncork());
          }
          _postMessage(e) {
            const t = this._targetOrigin;
            this._targetWindow.postMessage({
              target: this._target,
              data: e
            }, t);
          }
          onMessage(e) {
            const t = e.data;
            "*" !== this._targetOrigin && e.origin !== this._targetOrigin || e.source !== this._targetWindow || "object" != typeof t || t.target !== this._name || !t.data || this._onData(t.data);
          }
          _read() {}
          _write(e, t, r) {
            this._postMessage(e), r();
          }
          _destroy() {
            window.removeEventListener("message", this._onMessage, !1);
          }
        }
        function K(e, t, r) {
          try {
            Reflect.apply(e, t, r);
          } catch (e) {
            setTimeout((() => {
              throw e;
            }));
          }
        }
        class V extends T.EventEmitter {
          emit(e) {
            let t = "error" === e;
            const r = this._events;
            if (void 0 !== r) t = t && void 0 === r.error; else if (!t) return !1;
            for (var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) i[o - 1] = arguments[o];
            if (t) {
              let e;
              if (i.length > 0 && ([e] = i), e instanceof Error) throw e;
              const t = new Error("Unhandled error.".concat(e ? " (".concat(e.message, ")") : ""));
              throw t.context = e, t;
            }
            const s = r[e];
            if (void 0 === s) return !1;
            if ("function" == typeof s) K(s, this, i); else {
              const e = s.length, t = function(e) {
                const t = e.length, r = new Array(t);
                for (let n = 0; n < t; n += 1) r[n] = e[n];
                return r;
              }(s);
              for (let r = 0; r < e; r += 1) K(t[r], this, i);
            }
            return !0;
          }
        }
        class G extends Error {
          constructor(t) {
            let {code: r, message: n, data: i} = t;
            if (!Number.isInteger(r)) throw new Error("code must be an integer");
            if (!n || "string" != typeof n) throw new Error("message must be string");
            super(n), e(this, "code", void 0), e(this, "data", void 0), this.code = r, void 0 !== i && (this.data = i);
          }
          toString() {
            return C()({
              code: this.code,
              message: this.message,
              data: this.data,
              stack: this.stack
            });
          }
        }
        function W(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        class X extends V {
          constructor() {
            super(), e(this, "_middleware", void 0), this._middleware = [];
          }
          static async _runAllMiddleware(e, t, r) {
            const n = [];
            let i = null, o = !1;
            for (const s of r) if ([i, o] = await X._runMiddleware(e, t, s, n), o) break;
            return [ i, o, n.reverse() ];
          }
          static _runMiddleware(e, t, r, n) {
            return new Promise((i => {
              const o = e => {
                const r = e || t.error;
                r && (t.error = (0, N.Xy)(r)), i([ r, !0 ]);
              }, s = e => {
                t.error ? o(t.error) : (e && ("function" != typeof e && o(new G({
                  code: -32603,
                  message: "JRPCEngine: 'next' return handlers must be functions"
                })), n.push(e)), i([ null, !1 ]));
              };
              try {
                r(e, t, s, o);
              } catch (e) {
                o(e);
              }
            }));
          }
          static async _runReturnHandlers(e) {
            for (const t of e) await new Promise(((e, r) => {
              t((t => t ? r(t) : e()));
            }));
          }
          static _checkForCompletion(e, t, r) {
            if (!("result" in t) && !("error" in t)) throw new G({
              code: -32603,
              message: "Response has no error or result for request"
            });
            if (!r) throw new G({
              code: -32603,
              message: "Nothing ended request"
            });
          }
          push(e) {
            this._middleware.push(e);
          }
          handle(e, t) {
            if (t && "function" != typeof t) throw new Error('"callback" must be a function if provided.');
            return Array.isArray(e) ? t ? this._handleBatch(e, t) : this._handleBatch(e) : t ? this._handle(e, t) : this._promiseHandle(e);
          }
          asMiddleware() {
            return async (e, t, r, n) => {
              try {
                const [i, o, s] = await X._runAllMiddleware(e, t, this._middleware);
                return o ? (await X._runReturnHandlers(s), n(i)) : r((async e => {
                  try {
                    await X._runReturnHandlers(s);
                  } catch (t) {
                    return e(t);
                  }
                  return e();
                }));
              } catch (e) {
                return n(e);
              }
            };
          }
          async _handleBatch(e, t) {
            try {
              const r = await Promise.all(e.map(this._promiseHandle.bind(this)));
              return t ? t(null, r) : r;
            } catch (e) {
              if (t) return t(e);
              throw e;
            }
          }
          _promiseHandle(e) {
            return new Promise((t => {
              this._handle(e, ((e, r) => {
                t(r);
              }));
            }));
          }
          async _handle(t, r) {
            if (!t || Array.isArray(t) || "object" != typeof t) {
              const e = new G({
                code: -32603,
                message: "request must be plain object"
              });
              return r(e, {
                id: void 0,
                jsonrpc: "2.0",
                error: e
              });
            }
            if ("string" != typeof t.method) {
              const e = new G({
                code: -32603,
                message: "method must be string"
              });
              return r(e, {
                id: t.id,
                jsonrpc: "2.0",
                error: e
              });
            }
            const n = function(t) {
              for (var r = 1; r < arguments.length; r++) {
                var n = null != arguments[r] ? arguments[r] : {};
                r % 2 ? W(Object(n), !0).forEach((function(r) {
                  e(t, r, n[r]);
                })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : W(Object(n)).forEach((function(e) {
                  Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
                }));
              }
              return t;
            }({}, t), i = {
              id: n.id,
              jsonrpc: n.jsonrpc
            };
            let o = null;
            try {
              await this._processRequest(n, i);
            } catch (e) {
              o = e;
            }
            return o && (delete i.result, i.error || (i.error = (0, N.Xy)(o))), r(o, i);
          }
          async _processRequest(e, t) {
            const [r, n, i] = await X._runAllMiddleware(e, t, this._middleware);
            if (X._checkForCompletion(e, t, n), await X._runReturnHandlers(i), r) throw r;
          }
        }
        class Y extends k.Duplex {
          constructor(t) {
            let {parent: r, name: n} = t;
            super({
              objectMode: !0
            }), e(this, "_parent", void 0), e(this, "_name", void 0), this._parent = r, this._name = n;
          }
          _read() {}
          _write(e, t, r) {
            this._parent.push({
              name: this._name,
              data: e
            }), r();
          }
        }
        function J(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function $(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? J(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : J(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        const Z = Symbol("IGNORE_SUBSTREAM");
        class Q extends k.Duplex {
          constructor() {
            super($($({}, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}), {}, {
              objectMode: !0
            })), e(this, "_substreams", void 0), e(this, "getStream", void 0), this._substreams = {};
          }
          createStream(e) {
            if (!e) throw new Error("ObjectMultiplex - name must not be empty");
            if (this._substreams[e]) throw new Error('ObjectMultiplex - Substream for name "'.concat(e, '" already exists'));
            const t = new Y({
              parent: this,
              name: e
            });
            return this._substreams[e] = t, function(e, r) {
              const n = D()((e => t.destroy(e || void 0)));
              B()(e, {
                readable: !1
              }, n), B()(e, {
                writable: !1
              }, n);
            }(this), t;
          }
          ignoreStream(e) {
            if (!e) throw new Error("ObjectMultiplex - name must not be empty");
            if (this._substreams[e]) throw new Error('ObjectMultiplex - Substream for name "'.concat(e, '" already exists'));
            this._substreams[e] = Z;
          }
          _read() {}
          _write(e, t, r) {
            const {name: n, data: i} = e;
            if (!n) return window.console.warn('ObjectMultiplex - malformed chunk without name "'.concat(e, '"')), r();
            const o = this._substreams[n];
            return o ? (o !== Z && o.push(i), r()) : (window.console.warn('ObjectMultiplex - orphaned data for stream "'.concat(n, '"')), 
            r());
          }
        }
        var ee = r(2450), te = r(3550), re = r.n(te), ne = r(6266), ie = r(7266), oe = r.n(ie), se = r(8764).Buffer;
        const ae = d().getLogger("torus.js");
        ae.disableAll();
        class ce extends Error {
          constructor(t) {
            let {errors: r, responses: n, predicate: i} = t;
            super("Unable to resolve enough promises."), e(this, "errors", void 0), e(this, "responses", void 0), e(this, "predicate", void 0), 
            this.errors = r, this.responses = n, this.predicate = i;
          }
        }
        const fe = (e, t) => new Promise(((r, n) => {
          let i = 0;
          const o = {
            resolved: !1
          }, s = new Array(e.length).fill(void 0), a = new Array(e.length).fill(void 0);
          let c;
          return e.forEach(((f, u) => f.then((e => {
            a[u] = e;
          })).catch((e => {
            s[u] = e;
          })).finally((() => {
            if (!o.resolved) return t(a.slice(0), o).then((e => {
              o.resolved = !0, r(e);
            })).catch((e => {
              c = e;
            })).finally((() => {
              if (i += 1, i === e.length) {
                const e = Object.values(a.reduce(((e, t) => {
                  if (t) {
                    var r;
                    const {id: i, error: o} = t;
                    (null == o || null === (r = o.data) || void 0 === r ? void 0 : r.length) > 0 && (o.data.startsWith("Error occurred while verifying params") ? e[i] = (n = o.data).charAt(0).toUpperCase() + n.slice(1) : e[i] = o.data);
                  }
                  var n;
                  return e;
                }), {}));
                if (e.length > 0) {
                  const t = e.length > 1 ? `\n${e.map((e => `• ${e}`)).join("\n")}` : e[0];
                  n(new Error(t));
                } else {
                  var t;
                  n(new ce({
                    errors: s,
                    responses: a,
                    predicate: (null === (t = c) || void 0 === t ? void 0 : t.message) || c
                  }));
                }
              }
            }));
          }))));
        }));
        function ue(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function he(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? ue(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : ue(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        class de extends Error {}
        const le = (e, t) => {
          let r = e;
          if ("number" == typeof r && (r = Array.from({
            length: r
          }, ((e, t) => t))), t > r.length || t <= 0) return [];
          if (t === r.length) return [ r ];
          if (1 === t) return r.reduce(((e, t) => [ ...e, [ t ] ]), []);
          const n = [];
          let i = [];
          for (let o = 0; o <= r.length - t + 1; o += 1) {
            i = le(r.slice(o + 1), t - 1);
            for (let e = 0; e < i.length; e += 1) n.push([ r[o], ...i[e] ]);
          }
          return n;
        }, pe = (e, t) => {
          const r = {};
          for (let n = 0; n < e.length; n += 1) {
            const i = oe()(e[n]);
            if (r[i] = r[i] ? r[i] + 1 : 1, r[i] === t) return e[n];
          }
        }, be = async (e, t, r) => {
          const n = e.map((e => A(e, x("VerifierLookupRequest", {
            verifier: t,
            verifier_id: r.toString()
          })).catch((e => ae.error("lookup request failed", e)))));
          return fe(n, (t => {
            const r = t.filter((e => e)), n = pe(r.map((e => e && e.error)), 1 + ~~(e.length / 2)), i = pe(r.map((e => e && e.result)), 1 + ~~(e.length / 2));
            return i || n ? Promise.resolve({
              keyResult: i,
              errorResult: n
            }) : Promise.reject(new Error(`invalid results ${JSON.stringify(t)}`));
          }));
        }, ye = (e, t, r, n) => new Promise(((i, o) => {
          setTimeout((() => {
            be(e, t, r).then(i).catch(o);
          }), n);
        })), ge = async e => {
          let t, r, {endpoints: n, torusNodePubs: i, lastPoint: o, firstPoint: s, verifier: a, verifierId: c, signerHost: f, network: u} = e;
          if (void 0 === o ? (t = Math.floor(Math.random() * n.length), r = t) : t = o % n.length, t === s) throw new Error("Looped through all");
          void 0 !== s && (r = s);
          const h = x("KeyAssign", {
            verifier: a,
            verifier_id: c.toString()
          });
          try {
            const e = await A(f, h, {
              headers: {
                pubKeyX: i[t].X,
                pubKeyY: i[t].Y,
                network: u
              }
            }, {
              useAPIKey: !0
            });
            return await A(n[t], he(he({}, h), e), {
              headers: {
                "Content-Type": "application/json; charset=utf-8"
              }
            });
          } catch (e) {
            if (ae.error(e), [ "Timed out", "TypeError: Failed to fetch", "TypeError: cancelled", "TypeError: NetworkError when attempting to fetch resource." ].includes(e.message)) return ge({
              endpoints: n,
              torusNodePubs: i,
              lastPoint: t + 1,
              firstPoint: r,
              verifier: a,
              verifierId: c,
              signerHost: f,
              network: u
            });
            throw new Error(`Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \n\n    ${e.message || ""}`);
          }
        };
        function me(e) {
          return `0x${I()("keccak256").update(e).digest().toString("hex")}`;
        }
        function ve(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function we(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? ve(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : ve(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        class _e {
          constructor() {
            let {enableOneKey: t = !1, metadataHost: r = "https://metadata.tor.us", allowHost: n = "https://signer.tor.us/api/allow", signerHost: i = "https://signer.tor.us/api/sign", serverTimeOffset: o = 0, network: s = "mainnet"} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e(this, "metadataHost", void 0), e(this, "allowHost", void 0), e(this, "serverTimeOffset", void 0), e(this, "enableOneKey", void 0), 
            e(this, "signerHost", void 0), e(this, "network", void 0), e(this, "ec", void 0), this.ec = new ne.ec("secp256k1"), this.metadataHost = r, 
            this.allowHost = n, this.enableOneKey = t, this.serverTimeOffset = o || 0, this.signerHost = i, this.network = s;
          }
          static enableLogging() {
            arguments.length > 0 && void 0 !== arguments[0] && !arguments[0] ? ae.disableAll() : ae.enableAll();
          }
          static setAPIKey(e) {
            m(e);
          }
          static setEmbedHost(e) {
            !function(e) {
              g = e;
            }(e);
          }
          static isGetOrSetNonceError(e) {
            return e instanceof de;
          }
          async getUserTypeAndAddress(e, t, r) {
            let {verifier: n, verifierId: i} = r, o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            const {keyResult: s, errorResult: a} = await be(e, n, i) || {};
            let c, f = !1;
            if (a && JSON.stringify(a).includes("Verifier + VerifierID has not yet been assigned")) {
              if (!o) throw new Error("Verifier + VerifierID has not yet been assigned");
              await ge({
                endpoints: e,
                torusNodePubs: t,
                lastPoint: void 0,
                firstPoint: void 0,
                verifier: n,
                verifierId: i,
                signerHost: this.signerHost,
                network: this.network
              });
              const r = await ye(e, n, i, 1e3);
              c = null == r ? void 0 : r.keyResult, f = !0;
            } else {
              if (!s) throw new Error(`node results do not match at first lookup ${JSON.stringify(s || {})}, ${JSON.stringify(a || {})}`);
              c = s;
            }
            if (c) {
              const {pub_key_X: e, pub_key_Y: t} = c.keys[0];
              let r, n, i;
              try {
                r = await this.getOrSetNonce(e, t, void 0, !f), n = new (re())(r.nonce || "0", 16);
              } catch {
                throw new de;
              }
              if ("v1" === r.typeOfUser) i = this.ec.keyFromPublic({
                x: e,
                y: t
              }).getPublic().add(this.ec.keyFromPrivate(n.toString(16)).getPublic()); else {
                if ("v2" !== r.typeOfUser) throw new Error("getOrSetNonce should always return typeOfUser.");
                i = this.ec.keyFromPublic({
                  x: e,
                  y: t
                }).getPublic().add(this.ec.keyFromPublic({
                  x: r.pubNonce.x,
                  y: r.pubNonce.y
                }).getPublic());
              }
              const o = i.getX().toString(16), s = i.getY().toString(16), a = this.generateAddressFromPubKey(i.getX(), i.getY());
              if ("v1" === r.typeOfUser) return {
                typeOfUser: r.typeOfUser,
                nonce: n,
                X: o,
                Y: s,
                address: a
              };
              if ("v2" === r.typeOfUser) return {
                typeOfUser: r.typeOfUser,
                nonce: n,
                pubNonce: r.pubNonce,
                upgraded: r.upgraded,
                X: o,
                Y: s,
                address: a
              };
            }
            throw new Error(`node results do not match at final lookup ${JSON.stringify(s || {})}, ${JSON.stringify(a || {})}`);
          }
          async setCustomKey(e) {
            let t, {privKeyHex: r, metadataNonce: n, torusKeyHex: i, customKeyHex: o} = e;
            t = i ? new (re())(i, 16) : new (re())(r, 16).sub(n).umod(this.ec.curve.n);
            const s = new (re())(o, 16).sub(t).umod(this.ec.curve.n), a = this.generateMetadataParams(s.toString(16), t);
            await this.setMetadata(a);
          }
          async retrieveShares(e, t, r, n, i) {
            let o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {};
            const s = [];
            await E(this.allowHost, {
              headers: {
                verifier: r,
                verifier_id: n.verifier_id,
                network: this.network
              }
            }, {
              useAPIKey: !0
            });
            const a = (0, ee.oq)(), c = (0, ee.rc)(a).toString("hex"), f = c.slice(2, 66), u = c.slice(66), h = me(i);
            for (let d = 0; d < e.length; d += 1) {
              const t = A(e[d], x("CommitmentRequest", {
                messageprefix: "mug00",
                tokencommitment: h.slice(2),
                temppubx: f,
                temppuby: u,
                verifieridentifier: r
              })).catch((e => {
                ae.error("commitment", e);
              }));
              s.push(t);
            }
            return fe(s, (t => t.filter((e => !(!e || "object" != typeof e || e.error))).length >= 3 * ~~(e.length / 4) + 1 ? Promise.resolve(t) : Promise.reject(new Error(`invalid ${JSON.stringify(t)}`)))).then((s => {
              const c = [], f = [];
              for (let e = 0; e < s.length; e += 1) s[e] && f.push(s[e].result);
              for (let t = 0; t < e.length; t += 1) {
                const s = A(e[t], x("ShareRequest", {
                  encrypted: "yes",
                  item: [ we(we({}, n), {}, {
                    idtoken: i,
                    nodesignatures: f,
                    verifieridentifier: r
                  }, o) ]
                })).catch((e => ae.error("share req", e)));
                c.push(s);
              }
              return fe(c, (async (r, n) => {
                const i = r.filter((e => e)), o = pe(r.map((e => e && e.result && e.result.keys[0].PublicKey)), 1 + ~~(e.length / 2));
                if (i.length >= 1 + ~~(e.length / 2) && o) {
                  const i = [], f = [];
                  for (let e = 0; e < r.length; e += 1) {
                    var s, c;
                    const n = r[e];
                    if ((null == n || null === (s = n.result) || void 0 === s || null === (c = s.keys) || void 0 === c ? void 0 : c.length) > 0) {
                      n.result.keys.sort(((e, t) => new (re())(e.Index, 16).cmp(new (re())(t.Index, 16))));
                      const e = n.result.keys[0];
                      if (e.Metadata) {
                        const t = {
                          ephemPublicKey: se.from(e.Metadata.ephemPublicKey, "hex"),
                          iv: se.from(e.Metadata.iv, "hex"),
                          mac: se.from(e.Metadata.mac, "hex")
                        };
                        i.push((0, ee.pe)(a, we(we({}, t), {}, {
                          ciphertext: se.from(se.from(e.Share, "base64").toString("binary").padStart(64, "0"), "hex")
                        })).catch((e => ae.debug("share decryption", e))));
                      } else i.push(Promise.resolve(se.from(e.Share.padStart(64, "0"), "hex")));
                    } else i.push(Promise.resolve(void 0));
                    f.push(new (re())(t[e], 16));
                  }
                  const u = await Promise.all(i);
                  if (n.resolved) return;
                  const h = u.reduce(((e, t, r) => (t && e.push({
                    index: f[r],
                    value: new (re())(t)
                  }), e)), []), d = le(h.length, 1 + ~~(e.length / 2));
                  let l = null;
                  for (let e = 0; e < d.length; e += 1) {
                    const t = d[e], r = h.filter(((e, r) => t.includes(r))), n = r.map((e => e.value)), i = r.map((e => e.index)), s = this.lagrangeInterpolation(n, i);
                    if (!s) continue;
                    const a = (0, ee.rc)(se.from(s.toString(16, 64), "hex")).toString("hex"), c = a.slice(2, 66), f = a.slice(66);
                    if (0 === new (re())(c, 16).cmp(new (re())(o.X, 16)) && 0 === new (re())(f, 16).cmp(new (re())(o.Y, 16))) {
                      l = s;
                      break;
                    }
                  }
                  if (null == l) throw new Error("could not derive private key");
                  return l;
                }
                throw new Error("invalid");
              }));
            })).then((async e => {
              let t = e;
              if (!t) throw new Error("Invalid private key returned");
              const r = (0, ee.rc)(se.from(t.toString(16, 64), "hex")).toString("hex"), n = r.slice(2, 66), i = r.slice(66);
              let o;
              if (this.enableOneKey) {
                const {nonce: e} = await this.getNonce(n, i, t);
                o = new (re())(e || "0", 16);
              } else o = await this.getMetadata({
                pub_key_X: n,
                pub_key_Y: i
              });
              ae.debug("> torus.js/retrieveShares", {
                privKey: t.toString(16),
                metadataNonce: o.toString(16)
              }), t = t.add(o).umod(this.ec.curve.n);
              const s = this.generateAddressFromPrivKey(t);
              return ae.debug("> torus.js/retrieveShares", {
                ethAddress: s,
                privKey: t.toString(16)
              }), {
                ethAddress: s,
                privKey: t.toString("hex", 64),
                metadataNonce: o
              };
            }));
          }
          async getMetadata(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            try {
              const r = await A(`${this.metadataHost}/get`, e, t, {
                useAPIKey: !0
              });
              return r && r.message ? new (re())(r.message, 16) : new (re())(0);
            } catch (e) {
              return ae.error("get metadata error", e), new (re())(0);
            }
          }
          generateMetadataParams(e, t) {
            const r = this.ec.keyFromPrivate(t.toString("hex", 64)), n = {
              data: e,
              timestamp: new (re())(~~(this.serverTimeOffset + Date.now() / 1e3)).toString(16)
            }, i = r.sign(me(oe()(n)).slice(2));
            return {
              pub_key_X: r.getPublic().getX().toString("hex"),
              pub_key_Y: r.getPublic().getY().toString("hex"),
              set_data: n,
              signature: se.from(i.r.toString(16, 64) + i.s.toString(16, 64) + new (re())("").toString(16, 2), "hex").toString("base64")
            };
          }
          async setMetadata(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            try {
              return (await A(`${this.metadataHost}/set`, e, t, {
                useAPIKey: !0
              })).message;
            } catch (e) {
              return ae.error("set metadata error", e), "";
            }
          }
          lagrangeInterpolation(e, t) {
            if (e.length !== t.length) return null;
            let r = new (re())(0);
            for (let n = 0; n < e.length; n += 1) {
              let i = new (re())(1), o = new (re())(1);
              for (let r = 0; r < e.length; r += 1) if (n !== r) {
                i = i.mul(t[r].neg()), i = i.umod(this.ec.curve.n);
                let e = t[n].sub(t[r]);
                e = e.umod(this.ec.curve.n), o = o.mul(e).umod(this.ec.curve.n);
              }
              let s = i.mul(o.invm(this.ec.curve.n)).umod(this.ec.curve.n);
              s = s.mul(e[n]).umod(this.ec.curve.n), r = r.add(s);
            }
            return r.umod(this.ec.curve.n);
          }
          generateAddressFromPrivKey(e) {
            const t = this.ec.keyFromPrivate(e.toString("hex", 64), "hex").getPublic().encode("hex", !1).slice(2);
            ae.info(t, "public key");
            const r = `0x${me(se.from(t, "hex")).slice(26)}`;
            return (0, o.toChecksumAddress)(r);
          }
          generateAddressFromPubKey(e, t) {
            const r = this.ec.keyFromPublic({
              x: e.toString("hex", 64),
              y: t.toString("hex", 64)
            }), n = r.getPublic().encode("hex", !1).slice(2);
            ae.info(r.getPublic().encode("hex", !1), "public key");
            const i = `0x${me(se.from(n, "hex")).slice(26)}`;
            return (0, o.toChecksumAddress)(i);
          }
          async getPublicAddress(e, t, r) {
            let n, {verifier: i, verifierId: o} = r, s = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            ae.debug("> torus.js/getPublicAddress", {
              endpoints: e,
              torusNodePubs: t,
              verifier: i,
              verifierId: o,
              isExtended: s
            });
            let a = !1;
            const {keyResult: c, errorResult: f} = await be(e, i, o) || {};
            if (f && JSON.stringify(f).includes("Verifier not supported")) throw new Error("Verifier not supported. Check if you: \n\n      1. Are on the right network (Torus testnet/mainnet) \n\n      2. Have setup a verifier on dashboard.web3auth.io?");
            if (f && JSON.stringify(f).includes("Verifier + VerifierID has not yet been assigned")) {
              await ge({
                endpoints: e,
                torusNodePubs: t,
                lastPoint: void 0,
                firstPoint: void 0,
                verifier: i,
                verifierId: o,
                signerHost: this.signerHost,
                network: this.network
              });
              const r = await ye(e, i, o, 1e3);
              n = null == r ? void 0 : r.keyResult, a = !0;
            } else {
              if (!c) throw new Error(`node results do not match at first lookup ${JSON.stringify(c || {})}, ${JSON.stringify(f || {})}`);
              n = c;
            }
            if (ae.debug("> torus.js/getPublicAddress", {
              finalKeyResult: n,
              isNewKey: a
            }), n) {
              var u;
              let e, t, r, i, o, {pub_key_X: c, pub_key_Y: f} = n.keys[0];
              if (this.enableOneKey) {
                try {
                  e = await this.getOrSetNonce(c, f, void 0, !a), t = new (re())(e.nonce || "0", 16), i = e.typeOfUser;
                } catch {
                  throw new de;
                }
                if ("v1" === e.typeOfUser) r = this.ec.keyFromPublic({
                  x: c,
                  y: f
                }).getPublic().add(this.ec.keyFromPrivate(t.toString(16)).getPublic()); else {
                  if ("v2" !== e.typeOfUser) throw new Error("getOrSetNonce should always return typeOfUser.");
                  e.upgraded ? r = this.ec.keyFromPublic({
                    x: c,
                    y: f
                  }).getPublic() : (r = this.ec.keyFromPublic({
                    x: c,
                    y: f
                  }).getPublic().add(this.ec.keyFromPublic({
                    x: e.pubNonce.x,
                    y: e.pubNonce.y
                  }).getPublic()), o = e.pubNonce);
                }
              } else i = "v1", t = await this.getMetadata({
                pub_key_X: c,
                pub_key_Y: f
              }), r = this.ec.keyFromPublic({
                x: c,
                y: f
              }).getPublic().add(this.ec.keyFromPrivate(t.toString(16)).getPublic());
              c = r.getX().toString(16), f = r.getY().toString(16);
              const h = this.generateAddressFromPubKey(r.getX(), r.getY());
              return ae.debug("> torus.js/getPublicAddress", {
                X: c,
                Y: f,
                address: h,
                typeOfUser: i,
                nonce: null === (u = t) || void 0 === u ? void 0 : u.toString(16),
                pubNonce: o
              }), s ? {
                typeOfUser: i,
                address: h,
                X: c,
                Y: f,
                metadataNonce: t,
                pubNonce: o
              } : h;
            }
            throw new Error(`node results do not match at final lookup ${JSON.stringify(c || {})}, ${JSON.stringify(f || {})}`);
          }
          async getOrSetNonce(e, t, r) {
            let n;
            const i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3] ? "getNonce" : "getOrSetNonce";
            return n = r ? this.generateMetadataParams(i, r) : {
              pub_key_X: e,
              pub_key_Y: t,
              set_data: {
                data: i
              }
            }, A(`${this.metadataHost}/get_or_set_nonce`, n, void 0, {
              useAPIKey: !0
            });
          }
          async getNonce(e, t, r) {
            return this.getOrSetNonce(e, t, r, !0);
          }
          getPostboxKeyFrom1OutOf1(e, t) {
            const r = new (re())(e, 16), n = new (re())(t, 16);
            return r.sub(n).umod(this.ec.curve.n).toString("hex");
          }
        }
        const Se = {
          GOOGLE: "google",
          FACEBOOK: "facebook",
          TWITCH: "twitch",
          REDDIT: "reddit",
          DISCORD: "discord",
          EMAIL_PASSWORDLESS: "torus-auth0-email-passwordless"
        }, Ee = {
          [Se.GOOGLE]: "tkey-google",
          [Se.FACEBOOK]: "tkey-facebook",
          [Se.TWITCH]: "tkey-twitch",
          [Se.REDDIT]: "tkey-reddit",
          [Se.DISCORD]: "tkey-discord",
          [Se.EMAIL_PASSWORDLESS]: "tkey-auth0-email-passwordless"
        }, Ae = "moonpay", xe = "wyre", ke = "rampnetwork", Pe = "xanpool", Oe = "mercuryo", Me = "transak", Ie = "mainnet", Te = "matic", Re = "bsc_mainnet", Ce = "avalanche_mainnet", Ne = {
          PRODUCTION: "production",
          DEVELOPMENT: "development",
          BINANCE: "binance",
          TESTING: "testing",
          LRC: "lrc",
          BETA: "beta"
        }, je = {
          BOTTOM_LEFT: "bottom-left",
          TOP_LEFT: "top-left",
          BOTTOM_RIGHT: "bottom-right",
          TOP_RIGHT: "top-right"
        }, Be = {
          [Ae]: [ "AUD", "BGN", "BRL", "CAD", "CHF", "CNY", "COP", "CZK", "DKK", "DOP", "EGP", "EUR", "GBP", "HKD", "HRK", "IDR", "ILS", "JPY", "JOD", "KES", "KRW", "KWD", "LKR", "MAD", "MXN", "MYR", "NGN", "NOK", "NZD", "OMR", "PEN", "PKR", "PLN", "RON", "RUB", "SEK", "SGD", "THB", "TRY", "TWD", "USD", "VND", "ZAR" ],
          [xe]: [ "USD", "EUR", "GBP", "AUD", "CAD", "NZD", "ARS", "BRL", "CHF", "CLP", "COP", "CZK", "DKK", "HKD", "ILS", "INR", "ISK", "JPY", "KRW", "MXN", "MYR", "NOK", "PHP", "PLN", "SEK", "THB", "VND", "ZAR" ],
          [ke]: [ "USD", "EUR", "GBP" ],
          [Pe]: [ "SGD", "HKD", "THB", "PHP", "INR", "IDR", "MYR", "AUD", "NZD", "KRW" ],
          [Oe]: [ "EUR", "USD", "GBP", "TRY", "JPY", "BRL", "NGN", "VND", "MXN", "KRW" ],
          [Me]: [ "ARS", "AUD", "BBD", "BGN", "BMD", "BRL", "CAD", "CHF", "CLP", "CRC", "CZK", "DKK", "DOP", "EUR", "FJD", "FKP", "GBP", "GIP", "HRK", "HUF", "IDR", "ILS", "ISK", "JMD", "JPY", "KES", "KRW", "MDL", "MXN", "MYR", "NOK", "NZD", "PEN", "PHP", "PLN", "PYG", "RON", "SEK", "SGD", "THB", "TRY", "TZS", "USD", "ZAR" ]
        }, Le = new Set([ "ETH", "USDT", "USDC", "TUSD", "EOSDT", "USD", "DAI", "GUSD", "DKKT", "PAX", "ILS", "RUB", "BYN", "EUR", "GBP", "JPY", "KRW", "PLN", "MXN", "AUD", "BRL", "CAD", "CHF", "KPW", "LAK", "LBP", "LKR", "XOF", "CNHT", "DOGE", "UAH", "TRY", "HKD", "XJP", "SGD", "USC", "NZD", "NGN", "RUR", "COP", "GHS", "EGP", "IDR", "BHD", "CRC", "PEN", "AED", "DOP", "PKR", "HUF", "VND", "XAR", "LTC", "RON", "OMR", "MYR", "DKK", "UGX", "ZMW", "SAR", "SEK", "GEL", "RWF", "IRR", "TZS", "CNY", "VEF", "BDT", "HRK", "CLP", "THB", "XAF", "ARS", "UYU", "SZL", "KZT", "NOK", "KES", "PAB", "INR", "CZK", "MAD", "TWD", "PHP", "ZAR", "BOB", "CDF", "DASH", "VES", "ISK", "MWK", "BAM", "TTD", "XRP", "JOD", "RSD", "HNL", "BGN", "GTQ", "BWP", "XMR", "MMK", "QAR", "AOA", "KWD", "MUR", "WUSD", "WEUR", "WAVES", "WTRY", "LRD", "LSL", "LYD", "AWG", "MDL", "BTO", "EURS", "CHFT", "MKD", "MNT", "MOP", "MRO", "MVR", "VOLLAR", "CKUSD", "KHR", "VUV", "BITCNY", "QC", "BBD", "NAD", "NPR", "PGK", "PYG", "BIF", "BMD", "BND", "XLM", "BNB", "SCR", "BAT", "CRO", "HT", "KCS", "LEO", "LINK", "MKR", "NPXS", "OMG", "REP", "ZB", "ZIL", "ZRX", "BCH", "BZD", "CUP", "CVE", "DJF", "DZD", "ERN", "ETB", "FJD", "FKP", "BUSD", "ANCT", "ALL", "AMD", "ANG", "CNYX", "IQD", "UZS", "TND", "GGP", "XAU", "KGS", "GIP", "JMD", "ZEC", "USDP", "BSV", "EMC2", "SNT", "GTO", "POWR", "EUSD", "EURT", "BCY", "BTS", "ATM", "BLOCKPAY", "ARDR", "AMP", "B2X", "BITGOLD", "BITEUR", "ATB", "BITUSD", "AGRS", "DFXT", "HIKEN", "BIX", "KNC", "EOS", "COB", "COSS", "BMH", "NANO", "BDG", "BNT", "XVG", "LKK1Y", "LKK", "USDK", "EURN", "NZDT", "JSE", "GMD", "GNF", "GYD", "YER", "XPF", "HTG", "SLL", "SOS", "WST", "SVC", "SYP", "NEO", "KMF", "JUMP", "AYA", "BLAST", "WGR", "BCN", "BTG", "URALS", "INN", "USDQ", "CNH", "HUSD", "BKRW", "NZDX", "EURX", "CADX", "USDEX", "JPYX", "AUDX", "VNDC", "EON", "GBPX", "CHFX", "USDJ", "IDRT", "USDS", "USDN", "BIDR", "IDK", "BSD", "BTN", "KYD", "NIO", "SBD", "SDG", "SHP", "TOP", "XCD", "XCHF", "CNYT", "GYEN", "ZUSD", "GOLD", "TRX", "TRYB", "PLATC", "STRAX", "UST", "GLM", "VAI", "BRZ", "DDRST", "XAUT", "MIM" ]);
        function De(e) {
          return Be[e].filter((e => Le.has(e)));
        }
        const Ue = {
          [Ae]: {
            line1: "Credit/ Debit Card/ Apple Pay",
            line2: "4.5% or 5 USD",
            line3: "2,000€/day, 10,000€/mo",
            supportPage: "https://help.moonpay.io/en/",
            minOrderValue: 24.99,
            maxOrderValue: 5e4,
            validCurrencies: De(Ae),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "aave",
                display: "AAVE"
              }, {
                value: "bat",
                display: "BAT"
              }, {
                value: "dai",
                display: "DAI"
              }, {
                value: "eth",
                display: "ETH"
              }, {
                value: "mkr",
                display: "MKR"
              }, {
                value: "matic",
                display: "MATIC"
              }, {
                value: "usdt",
                display: "USDT"
              }, {
                value: "usdc",
                display: "USDC"
              } ],
              [Te]: [ {
                value: "eth_polygon",
                display: "ETH"
              }, {
                value: "matic_polygon",
                display: "MATIC"
              }, {
                value: "usdc_polygon",
                display: "USDC"
              } ],
              [Re]: [ {
                value: "bnb_bsc",
                display: "BNB"
              }, {
                value: "busd_bsc",
                display: "BUSD"
              } ],
              [Ce]: [ {
                value: "avax_cchain",
                display: "AVAX"
              } ]
            },
            includeFees: !0,
            api: !0,
            enforceMax: !1
          },
          [xe]: {
            line1: "Apple Pay/ Debit/ Credit Card",
            line2: "4.9% + 30¢ or 5 USD",
            line3: "$250/day",
            supportPage: "https://support.sendwyre.com/en/",
            minOrderValue: 5,
            maxOrderValue: 500,
            validCurrencies: De(xe),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "AAVE",
                display: "AAVE"
              }, {
                value: "BAT",
                display: "BAT"
              }, {
                value: "BUSD",
                display: "BUSD"
              }, {
                value: "DAI",
                display: "DAI"
              }, {
                value: "ETH",
                display: "ETH"
              }, {
                value: "MKR",
                display: "MKR"
              }, {
                value: "UNI",
                display: "UNI"
              }, {
                value: "USDC",
                display: "USDC"
              }, {
                value: "USDT",
                display: "USDT"
              } ],
              [Te]: [ {
                value: "MUSDC",
                display: "USDC"
              } ],
              [Ce]: [ {
                value: "AVAXC",
                display: "AVAXC"
              } ]
            },
            includeFees: !1,
            api: !0,
            enforceMax: !1
          },
          [ke]: {
            line1: "Debit Card/ <br>Apple Pay/ Bank transfer",
            line2: "0.49% - 2.9%",
            line3: "5,000€/purchase, 20,000€/mo",
            supportPage: "https://instant.ramp.network/",
            minOrderValue: 50,
            maxOrderValue: 2e4,
            validCurrencies: De(ke),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "ETH",
                display: "ETH"
              }, {
                value: "DAI",
                display: "DAI"
              }, {
                value: "USDC",
                display: "USDC"
              }, {
                value: "USDT",
                display: "USDT"
              } ],
              [Te]: [ {
                value: "MATIC_DAI",
                display: "DAI"
              }, {
                value: "MATIC_MATIC",
                display: "MATIC"
              }, {
                value: "MATIC_USDC",
                display: "USDC"
              } ],
              [Ce]: [ {
                value: "AVAX",
                display: "AVAX"
              } ]
            },
            includeFees: !0,
            api: !0,
            receiveHint: "walletTopUp.receiveHintRamp",
            enforceMax: !1
          },
          [Pe]: {
            line1: "PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ <br>ViettelPay/ DuitNow",
            line2: "2.5% buying, 3% selling",
            line3: "$2,500 / day",
            supportPage: "mailto:support@xanpool.com",
            minOrderValue: 100,
            maxOrderValue: 2500,
            validCurrencies: De(Pe),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "ETH",
                display: "ETH"
              }, {
                value: "USDT",
                display: "USDT"
              } ]
            },
            includeFees: !0,
            api: !0,
            sell: !0,
            enforceMax: !1
          },
          [Oe]: {
            line1: "Credit/ Debit Card/ Apple Pay",
            line2: "3.95% or 4 USD",
            line3: "10,000€/day, 25,000€/mo",
            supportPage: "mailto:support@mercuryo.io",
            minOrderValue: 30,
            maxOrderValue: 5e3,
            validCurrencies: De(Oe),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "ETH",
                display: "ETH"
              }, {
                value: "BAT",
                display: "BAT"
              }, {
                value: "USDT",
                display: "USDT"
              }, {
                value: "DAI",
                display: "DAI"
              } ],
              [Re]: [ {
                value: "BNB",
                display: "BNB"
              }, {
                value: "BUSD",
                display: "BUSD"
              }, {
                value: "1INCH",
                display: "1INCH"
              } ]
            },
            includeFees: !0,
            api: !0,
            enforceMax: !1
          },
          [Me]: {
            line1: "Credit/ Debit Card/ <br/>Bank Transfer (sepa/gbp)",
            line2: "0.99% - 5.5% or 5 USD",
            line3: "500€/day",
            supportPage: "https://support.transak.com/hc/en-US",
            minOrderValue: 30,
            maxOrderValue: 500,
            validCurrencies: De(Me),
            validCryptoCurrenciesByChain: {
              [Ie]: [ {
                value: "AAVE",
                display: "AAVE"
              }, {
                value: "DAI",
                display: "DAI"
              }, {
                value: "ETH",
                display: "ETH"
              }, {
                value: "USDC",
                display: "USDC"
              }, {
                value: "USDT",
                display: "USDT"
              } ],
              [Te]: [ {
                value: "AAVE",
                display: "AAVE"
              }, {
                value: "DAI",
                display: "DAI"
              }, {
                value: "MATIC",
                display: "MATIC"
              }, {
                value: "USDC",
                display: "USDC"
              }, {
                value: "USDT",
                display: "USDT"
              }, {
                value: "WETH",
                display: "WETH"
              } ],
              [Re]: [ {
                value: "BNB",
                display: "BNB"
              }, {
                value: "BUSD",
                display: "BUSD"
              } ],
              [Ce]: [ {
                value: "AVAX",
                display: "AVAX"
              } ]
            },
            includeFees: !0,
            enforceMax: !0
          }
        }, qe = {
          supportedVerifierList: Object.values(Se),
          paymentProviders: Ue,
          api: "https://api.tor.us",
          translations: {
            en: {
              embed: {
                continue: "Continue",
                actionRequired: "Authorization required",
                pendingAction: "Click continue to proceed with your request in a popup",
                cookiesRequired: "Cookies Required",
                enableCookies: "Please enable cookies in your browser preferences to access Torus",
                clickHere: "More Info"
              }
            },
            de: {
              embed: {
                continue: "Fortsetzen",
                actionRequired: "Autorisierung erforderlich",
                pendingAction: "Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren",
                cookiesRequired: "Cookies benötigt",
                enableCookies: "Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen",
                clickHere: "Mehr Info"
              }
            },
            ja: {
              embed: {
                continue: "継続する",
                actionRequired: "認証が必要です",
                pendingAction: "続行をクリックして、ポップアップでリクエストを続行します",
                cookiesRequired: "必要なクッキー",
                enableCookies: "Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。",
                clickHere: "詳しくは"
              }
            },
            ko: {
              embed: {
                continue: "계속하다",
                actionRequired: "승인 필요",
                pendingAction: "팝업에서 요청을 진행하려면 계속을 클릭하십시오.",
                cookiesRequired: "쿠키 필요",
                enableCookies: "브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.",
                clickHere: "더 많은 정보"
              }
            },
            zh: {
              embed: {
                continue: "继续",
                actionRequired: "需要授权",
                pendingAction: "单击继续以在弹出窗口中继续您的请求",
                cookiesRequired: "必填Cookie",
                enableCookies: "请在您的浏览器首选项中启用cookie以访问Torus。",
                clickHere: "更多信息"
              }
            }
          },
          prodTorusUrl: "",
          localStorageKeyPrefix: "torus-"
        }, Fe = e => new Promise(((t, r) => {
          null != window.document.body ? Promise.resolve(e()).then(t).catch(r) : window.document.addEventListener("DOMContentLoaded", (() => {
            Promise.resolve(e()).then(t).catch(r);
          }));
        })), He = e => {
          const t = window.document.createElement("template"), r = e.trim();
          return t.innerHTML = r, t.content.firstChild;
        }, ze = (e, t, r) => {
          const n = i => {
            r(i), e.removeListener(t, n);
          };
          e.on(t, n);
        };
        var Ke = r(2724), Ve = r(4063), Ge = r.n(Ve), We = r(4970);
        const Xe = d().getLogger("torus-embed"), Ye = {
          errors: {
            disconnected: () => "Torus: Lost connection to Torus.",
            permanentlyDisconnected: () => "Torus: Disconnected from iframe. Page reload required.",
            sendSiteMetadata: () => "Torus: Failed to send site metadata. This is an internal error, please report this bug.",
            unsupportedSync: e => "Torus: The Torus Ethereum provider does not support synchronous methods like ".concat(e, " without a callback parameter."),
            invalidDuplexStream: () => "Must provide a Node.js-style duplex stream.",
            invalidOptions: (e, t) => "Invalid options. Received: { maxEventListeners: ".concat(e, ", shouldSendMetadata: ").concat(t, " }"),
            invalidRequestArgs: () => "Expected a single, non-array, object argument.",
            invalidRequestMethod: () => "'args.method' must be a non-empty string.",
            invalidRequestParams: () => "'args.params' must be an object or array if provided.",
            invalidLoggerObject: () => "'args.logger' must be an object if provided.",
            invalidLoggerMethod: e => "'args.logger' must include required method '".concat(e, "'.")
          },
          info: {
            connected: e => 'Torus: Connected to chain with ID "'.concat(e, '".')
          },
          warnings: {
            enableDeprecation: 'Torus: ""ethereum.enable()" is deprecated and may be removed in the future. Please use "ethereum.send("eth_requestAccounts")" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102',
            sendDeprecation: 'Torus: "ethereum.send(...)" is deprecated and may be removed in the future. Please use "ethereum.sendAsync(...)" or "ethereum.request(...)" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',
            events: {
              close: 'Torus: The event "close" is deprecated and may be removed in the future. Please use "disconnect" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',
              data: 'Torus: The event "data" is deprecated and will be removed in the future.Use "message" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message',
              networkChanged: 'Torus: The event "networkChanged" is deprecated and may be removed in the future. Please use "chainChanged" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',
              notification: 'Torus: The event "notification" is deprecated and may be removed in the future. Please use "message" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193'
            },
            publicConfigStore: 'Torus: The property "publicConfigStore" is deprecated and WILL be removed in the future.'
          }
        }, {paymentProviders: Je} = qe;
        function $e(e, t, r) {
          let n = 'MetaMask: Lost connection to "'.concat(e, '".');
          null != t && t.stack && (n += "\n".concat(t.stack)), Xe.warn(n), r && r.listenerCount("error") > 0 && r.emit("error", n);
        }
        const Ze = () => Math.random().toString(36).slice(2), Qe = async (e, t) => {
          let r, n;
          const i = "1.27.2";
          let o = t.version || i;
          try {
            if (("binance" === e || "production" === e) && !t.version) {
              let e;
              e = qe.prodTorusUrl ? {
                data: qe.prodTorusUrl
              } : await E("".concat(qe.api, "/latestversion?name=@toruslabs/torus-embed&version=").concat(i), {}, {
                useAPIKey: !0
              }), o = e.data, qe.prodTorusUrl = e.data;
            }
          } catch (e) {
            Xe.error(e, "unable to fetch latest version");
          }
          switch (Xe.info("version used: ", o), e) {
           case "binance":
            r = "https://binance.tor.us/v".concat(o), n = "info";
            break;

           case "testing":
            r = "https://testing.tor.us", n = "debug";
            break;

           case "lrc":
            r = "https://lrc.tor.us", n = "debug";
            break;

           case "beta":
            r = "https://beta.tor.us", n = "debug";
            break;

           case "development":
            r = "http://localhost:4050", n = "debug";
            break;

           default:
            r = "https://app.tor.us/v".concat(o), n = "error";
          }
          return {
            torusUrl: r,
            logLevel: n
          };
        }, et = () => {
          let e = window.navigator.language || "en-US";
          const t = e.split("-");
          return e = Object.prototype.hasOwnProperty.call(qe.translations, t[0]) ? t[0] : "en", e;
        }, tt = [ "eth_subscription" ], rt = () => {}, nt = "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375", it = "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450";
        function ot(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        V.defaultMaxListeners = 100;
        const st = function(e, t) {
          let r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
          return (n, i) => n || i.error ? t(n || i.error) : !r || Array.isArray(i) ? e(i) : e(i.result);
        };
        class at extends V {
          constructor(t) {
            let {maxEventListeners: r = 100, shouldSendMetadata: n = !0, jsonRpcStreamName: i = "provider"} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (super(), e(this, "chainId", void 0), e(this, "selectedAddress", void 0), e(this, "_rpcEngine", void 0), e(this, "networkVersion", void 0), 
            e(this, "shouldSendMetadata", void 0), e(this, "isTorus", void 0), e(this, "_publicConfigStore", void 0), e(this, "tryPreopenHandle", void 0), 
            e(this, "enable", void 0), e(this, "_state", void 0), e(this, "_jsonRpcConnection", void 0), e(this, "_sentWarnings", {
              enable: !1,
              experimentalMethods: !1,
              send: !1,
              publicConfigStore: !1,
              events: {
                close: !1,
                data: !1,
                networkChanged: !1,
                notification: !1
              }
            }), !(0, We.duplex)(t)) throw new Error(Ye.errors.invalidDuplexStream());
            this.isTorus = !0, this.setMaxListeners(r), this._state = function(t) {
              for (var r = 1; r < arguments.length; r++) {
                var n = null != arguments[r] ? arguments[r] : {};
                r % 2 ? ot(Object(n), !0).forEach((function(r) {
                  e(t, r, n[r]);
                })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : ot(Object(n)).forEach((function(e) {
                  Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
                }));
              }
              return t;
            }({}, at._defaultState), this.selectedAddress = null, this.networkVersion = null, this.chainId = null, this.shouldSendMetadata = n, 
            this._handleAccountsChanged = this._handleAccountsChanged.bind(this), this._handleChainChanged = this._handleChainChanged.bind(this), 
            this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this), this._handleConnect = this._handleConnect.bind(this), 
            this._handleDisconnect = this._handleDisconnect.bind(this), this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this), 
            this._sendSync = this._sendSync.bind(this), this._rpcRequest = this._rpcRequest.bind(this), this._warnOfDeprecation = this._warnOfDeprecation.bind(this), 
            this._initializeState = this._initializeState.bind(this), this.request = this.request.bind(this), this.send = this.send.bind(this), 
            this.sendAsync = this.sendAsync.bind(this);
            const o = new Q;
            q()(t, o, t, this._handleStreamDisconnect.bind(this, "MetaMask")), this._publicConfigStore = new Ke.ObservableStore({
              storageKey: "Metamask-Config"
            }), q()(o.createStream("publicConfig"), (0, Ke.storeAsStream)(this._publicConfigStore), $e.bind(this, "MetaMask PublicConfigStore")), 
            o.ignoreStream("phishing"), this.on("connect", (() => {
              this._state.isConnected = !0;
            }));
            const s = function() {
              const e = {}, t = new V, r = new k.Duplex({
                objectMode: !0,
                read: function() {
                  return !1;
                },
                write: function(r, n, i) {
                  let o;
                  try {
                    r.id ? function(t) {
                      const r = e[t.id];
                      if (!r) throw new Error('StreamMiddleware - Unknown response id "'.concat(t.id, '"'));
                      delete e[t.id], Object.assign(r.res, t), setTimeout(r.end);
                    }(r) : function(e) {
                      t.emit("notification", e);
                    }(r);
                  } catch (e) {
                    o = e;
                  }
                  i(o);
                }
              });
              return {
                events: t,
                middleware: (t, n, i, o) => {
                  r.push(t), e[t.id] = {
                    req: t,
                    res: n,
                    next: i,
                    end: o
                  };
                },
                stream: r
              };
            }();
            q()(s.stream, o.createStream(i), s.stream, this._handleStreamDisconnect.bind(this, "MetaMask RpcProvider"));
            const a = new X;
            a.push(((e, t, r, n) => {
              const i = e.id, o = O()(32).toString("hex");
              e.id = o, t.id = o, r((r => {
                e.id = i, t.id = i, r();
              }));
            })), a.push(((e, t, r) => {
              "string" == typeof e.method && e.method || (t.error = N.Sy.rpc.invalidRequest({
                message: "The request 'method' must be a non-empty string.",
                data: e
              })), r((e => {
                const {error: r} = t;
                return r ? (Xe.error("MetaMask - RPC Error: ".concat(r.message), r), e()) : e();
              }));
            })), a.push(s.middleware), this._rpcEngine = a, s.events.on("notification", (e => {
              const {method: t, params: r} = e;
              "wallet_accountsChanged" === t ? this._handleAccountsChanged(r) : "wallet_unlockStateChanged" === t ? this._handleUnlockStateChanged(r) : "wallet_chainChanged" === t ? this._handleChainChanged(r) : tt.includes(e.method) && (this.emit("data", e), 
              this.emit("notification", r.result), this.emit("message", {
                type: t,
                data: r
              }));
            }));
          }
          get publicConfigStore() {
            return this._sentWarnings.publicConfigStore || (Xe.warn(Ye.warnings.publicConfigStore), this._sentWarnings.publicConfigStore = !0), 
            this._publicConfigStore;
          }
          isConnected() {
            return this._state.isConnected;
          }
          async request(e) {
            if (!e || "object" != typeof e || Array.isArray(e)) throw N.Sy.rpc.invalidRequest({
              message: Ye.errors.invalidRequestArgs(),
              data: e
            });
            const {method: t, params: r} = e;
            if ("string" != typeof t || 0 === t.length) throw N.Sy.rpc.invalidRequest({
              message: Ye.errors.invalidRequestMethod(),
              data: e
            });
            if (void 0 !== r && !Array.isArray(r) && ("object" != typeof r || null === r)) throw N.Sy.rpc.invalidRequest({
              message: Ye.errors.invalidRequestParams(),
              data: e
            });
            return new Promise(((e, n) => {
              this._rpcRequest({
                method: t,
                params: r
              }, st(e, n));
            }));
          }
          sendAsync(e, t) {
            this._rpcRequest(e, t);
          }
          addListener(e, t) {
            return this._warnOfDeprecation(e), super.addListener(e, t);
          }
          on(e, t) {
            return this._warnOfDeprecation(e), super.on(e, t);
          }
          once(e, t) {
            return this._warnOfDeprecation(e), super.once(e, t);
          }
          prependListener(e, t) {
            return this._warnOfDeprecation(e), super.prependListener(e, t);
          }
          prependOnceListener(e, t) {
            return this._warnOfDeprecation(e), super.prependOnceListener(e, t);
          }
          async _initializeState() {
            try {
              const {accounts: e, chainId: t, isUnlocked: r, networkVersion: n} = await this.request({
                method: "wallet_getProviderState"
              });
              this.emit("connect", {
                chainId: t
              }), this._handleChainChanged({
                chainId: t,
                networkVersion: n
              }), this._handleUnlockStateChanged({
                accounts: e,
                isUnlocked: r
              }), this._handleAccountsChanged(e);
            } catch (e) {
              Xe.error("MetaMask: Failed to get initial state. Please report this bug.", e);
            } finally {
              Xe.info("initialized state"), this._state.initialized = !0, this.emit("_initialized");
            }
          }
          _rpcRequest(e, t) {
            let r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = t;
            const i = e;
            if (!Array.isArray(i)) if (i.jsonrpc || (i.jsonrpc = "2.0"), "eth_accounts" === i.method || "eth_requestAccounts" === i.method) n = (e, n) => {
              this._handleAccountsChanged(n.result || [], "eth_accounts" === i.method, r), t(e, n);
            }; else if ("wallet_getProviderState" === i.method) return void this._rpcEngine.handle(e, n);
            this.tryPreopenHandle(i, n);
          }
          send(e, t) {
            return this._sentWarnings.send || (Xe.warn(Ye.warnings.sendDeprecation), this._sentWarnings.send = !0), "string" != typeof e || t && !Array.isArray(t) ? e && "object" == typeof e && "function" == typeof t ? this._rpcRequest(e, t) : this._sendSync(e) : new Promise(((r, n) => {
              try {
                this._rpcRequest({
                  method: e,
                  params: t
                }, st(r, n, !1));
              } catch (e) {
                n(e);
              }
            }));
          }
          _sendSync(e) {
            let t;
            switch (e.method) {
             case "eth_accounts":
              t = this.selectedAddress ? [ this.selectedAddress ] : [];
              break;

             case "eth_coinbase":
              t = this.selectedAddress || null;
              break;

             case "eth_uninstallFilter":
              this._rpcRequest(e, rt), t = !0;
              break;

             case "net_version":
              t = this.networkVersion || null;
              break;

             default:
              throw new Error(Ye.errors.unsupportedSync(e.method));
            }
            return {
              id: e.id,
              jsonrpc: e.jsonrpc,
              result: t
            };
          }
          _handleConnect(e) {
            this._state.isConnected || (this._state.isConnected = !0, this.emit("connect", {
              chainId: e
            }), Xe.debug(Ye.info.connected(e)));
          }
          _handleDisconnect(e, t) {
            if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !e) {
              let r;
              this._state.isConnected = !1, e ? (r = new N.Cg(1013, t || Ye.errors.disconnected()), Xe.debug(r)) : (r = new N.Cg(1011, t || Ye.errors.permanentlyDisconnected()), 
              Xe.error(r), this.chainId = null, this._state.accounts = null, this.selectedAddress = null, this._state.isUnlocked = !1, 
              this._state.isPermanentlyDisconnected = !0), this.emit("disconnect", r);
            }
          }
          _handleStreamDisconnect(e, t) {
            $e(e, t, this), this._handleDisconnect(!1, t ? t.message : void 0);
          }
          _handleAccountsChanged(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = e;
            Array.isArray(n) || (Xe.error("MetaMask: Received non-array accounts parameter. Please report this bug.", n), n = []);
            for (const i of e) if ("string" != typeof i) {
              Xe.error("MetaMask: Received non-string account. Please report this bug.", e), n = [];
              break;
            }
            Ge()(this._state.accounts, n) || (t && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !r && Xe.error('MetaMask: "eth_accounts" unexpectedly updated accounts. Please report this bug.', n), 
            this._state.accounts = n, this.emit("accountsChanged", n)), this.selectedAddress !== n[0] && (this.selectedAddress = n[0] || null);
          }
          _handleChainChanged() {
            let {chainId: e, networkVersion: t} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e && t ? "loading" === t ? this._handleDisconnect(!0) : (this._handleConnect(e), e !== this.chainId && (this.chainId = e, 
            this._state.initialized && this.emit("chainChanged", this.chainId))) : Xe.error("MetaMask: Received invalid network parameters. Please report this bug.", {
              chainId: e,
              networkVersion: t
            });
          }
          _handleUnlockStateChanged() {
            let {accounts: e, isUnlocked: t} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            "boolean" == typeof t ? t !== this._state.isUnlocked && (this._state.isUnlocked = t, this._handleAccountsChanged(e || [])) : Xe.error("MetaMask: Received invalid isUnlocked parameter. Please report this bug.", {
              isUnlocked: t
            });
          }
          _warnOfDeprecation(e) {
            !1 === this._sentWarnings.events[e] && (Xe.warn(Ye.warnings.events[e]), this._sentWarnings.events[e] = !0);
          }
        }
        e(at, "_defaultState", {
          accounts: null,
          isConnected: !1,
          isUnlocked: !1,
          initialized: !1,
          isPermanentlyDisconnected: !1,
          hasEmittedConnection: !1
        });
        const ct = at;
        var ft = r(3482), ut = r.n(ft);
        const ht = (e, t) => {
          const r = {};
          return e.algorithms.forEach((e => {
            r[e] = ut()(e).update(t, "utf8").digest("base64");
          })), r;
        };
        class dt extends T.EventEmitter {
          constructor(t) {
            let {url: r, target: n, features: i} = t;
            super(), e(this, "url", void 0), e(this, "target", void 0), e(this, "features", void 0), e(this, "window", void 0), e(this, "windowTimer", void 0), 
            e(this, "iClosedWindow", void 0), this.url = r, this.target = n || "_blank", this.features = i || function() {
              const e = void 0 !== window.screenLeft ? window.screenLeft : window.screenX, t = void 0 !== window.screenTop ? window.screenTop : window.screenY, r = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width, n = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height, i = Math.abs((r - 1200) / 2 / 1 + e), o = Math.abs((n - 700) / 2 / 1 + t);
              return "titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=".concat(700, ",width=").concat(1200, ",top=").concat(o, ",left=").concat(i);
            }(), this.window = void 0, this.windowTimer = void 0, this.iClosedWindow = !1, this._setupTimer();
          }
          _setupTimer() {
            this.windowTimer = Number(setInterval((() => {
              this.window && this.window.closed && (clearInterval(this.windowTimer), this.iClosedWindow || this.emit("close"), this.iClosedWindow = !1, 
              this.window = void 0), void 0 === this.window && clearInterval(this.windowTimer);
            }), 500));
          }
          open() {
            var e;
            return this.window = window.open(this.url.href, this.target, this.features), null !== (e = this.window) && void 0 !== e && e.focus && this.window.focus(), 
            Promise.resolve();
          }
          close() {
            this.iClosedWindow = !0, this.window && this.window.close();
          }
          redirect(e) {
            e ? window.location.replace(this.url.href) : window.location.href = this.url.href;
          }
        }
        const lt = dt;
        function pt(e) {
          return new Promise(((t, r) => {
            try {
              const r = document.createElement("img");
              r.onload = () => t(!0), r.onerror = () => t(!1), r.src = e;
            } catch (e) {
              r(e);
            }
          }));
        }
        const bt = e => {
          const {document: t} = e, r = t.querySelector('head > meta[property="og:site_name"]');
          if (r) return r.content;
          const n = t.querySelector('head > meta[name="title"]');
          return n ? n.content : t.title && t.title.length > 0 ? t.title : e.location.hostname;
        };
        async function yt(e) {
          const {document: t} = e;
          let r = t.querySelector('head > link[rel="shortcut icon"]');
          return r && await pt(r.href) ? r.href : (r = Array.from(t.querySelectorAll('head > link[rel="icon"]')).find((e => Boolean(e.href))), 
          r && await pt(r.href) ? r.href : null);
        }
        var gt = r(8764).Buffer;
        const mt = [ "host", "chainId", "networkName" ];
        function vt(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t && (n = n.filter((function(t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            }))), r.push.apply(r, n);
          }
          return r;
        }
        function wt(t) {
          for (var r = 1; r < arguments.length; r++) {
            var n = null != arguments[r] ? arguments[r] : {};
            r % 2 ? vt(Object(n), !0).forEach((function(r) {
              e(t, r, n[r]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : vt(Object(n)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
            }));
          }
          return t;
        }
        const _t = {
          google: !0,
          facebook: !0,
          reddit: !0,
          twitch: !0,
          discord: !0
        }, St = "sha384-FLPj0jKrb6vIli62Ed4n/sqWhdhHMpFz3NffAV4H8uqTkzPsf4IAtKFgeVGgxb4+", Et = [ "eth_sendTransaction", "eth_signTypedData", "eth_signTypedData_v3", "eth_signTypedData_v4", "personal_sign", "eth_getEncryptionPublicKey", "eth_decrypt" ], At = function(e) {
          let t;
          try {
            t = window.localStorage;
            const e = "__storage_test__";
            return t.setItem(e, e), t.removeItem(e), !0;
          } catch (e) {
            return e && (22 === e.code || 1014 === e.code || "QuotaExceededError" === e.name || "NS_ERROR_DOM_QUOTA_REACHED" === e.name) && t && 0 !== t.length;
          }
        }();
        !async function() {
          try {
            if ("undefined" == typeof document) return;
            const e = document.createElement("link"), {torusUrl: t} = await Qe("production", {
              check: !1,
              hash: St,
              version: ""
            });
            e.href = "".concat(t, "/popup"), e.crossOrigin = "anonymous", e.type = "text/html", e.rel = "prefetch", e.relList && e.relList.supports && e.relList.supports("prefetch") && document.head.appendChild(e);
          } catch (e) {
            Xe.warn(e);
          }
        }();
        const xt = class {
          constructor() {
            let {buttonPosition: t = je.BOTTOM_LEFT, modalZIndex: r = 99999, apiKey: n = "torus-default"} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e(this, "buttonPosition", je.BOTTOM_LEFT), e(this, "torusUrl", void 0), e(this, "torusIframe", void 0), e(this, "styleLink", void 0), 
            e(this, "isLoggedIn", void 0), e(this, "isInitialized", void 0), e(this, "torusWidgetVisibility", void 0), e(this, "torusAlert", void 0), 
            e(this, "nodeDetailManager", void 0), e(this, "torusJs", void 0), e(this, "apiKey", void 0), e(this, "modalZIndex", void 0), 
            e(this, "alertZIndex", void 0), e(this, "torusAlertContainer", void 0), e(this, "isIframeFullScreen", void 0), e(this, "whiteLabel", void 0), 
            e(this, "requestedVerifier", void 0), e(this, "currentVerifier", void 0), e(this, "embedTranslations", void 0), e(this, "ethereum", void 0), 
            e(this, "provider", void 0), e(this, "communicationMux", void 0), e(this, "isLoginCallback", void 0), e(this, "dappStorageKey", void 0), 
            e(this, "paymentProviders", qe.paymentProviders), e(this, "loginHint", ""), e(this, "useWalletConnect", void 0), this.buttonPosition = t, 
            this.torusUrl = "", this.isLoggedIn = !1, this.isInitialized = !1, this.torusWidgetVisibility = !0, this.requestedVerifier = "", 
            this.currentVerifier = "", this.nodeDetailManager = new c, this.torusJs = new _e({
              metadataHost: "https://metadata.tor.us",
              allowHost: "https://signer.tor.us/api/allow",
              network: "mainnet"
            }), this.apiKey = n, _e.setAPIKey(n), m(n), this.modalZIndex = r, this.alertZIndex = r + 1e3, this.isIframeFullScreen = !1, 
            this.dappStorageKey = "";
          }
          async init() {
            let {buildEnv: e = Ne.PRODUCTION, enableLogging: t = !1, enabledVerifiers: r = _t, network: n = {
              host: "mainnet",
              chainId: null,
              networkName: "",
              blockExplorer: "",
              ticker: "",
              tickerName: ""
            }, loginConfig: i = {}, showTorusButton: o = !0, integrity: s = {
              check: !1,
              hash: St,
              version: ""
            }, whiteLabel: a, skipTKey: c = !1, useLocalStorage: f = !1, useWalletConnect: h = !1} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            if (this.isInitialized) throw new Error("Already initialized");
            const {torusUrl: d, logLevel: l} = await Qe(e, s);
            Xe.info(d, "url loaded"), this.torusUrl = d, this.whiteLabel = a, this.useWalletConnect = h, Xe.setDefaultLevel(l), t ? Xe.enableAll() : Xe.disableAll(), 
            this.torusWidgetVisibility = o;
            let p = "";
            if (At && f) {
              const e = "".concat(qe.localStorageKeyPrefix).concat(window.location.hostname), t = window.localStorage.getItem(e);
              if (t) p = t; else {
                const t = "torus-app-".concat(Ze());
                window.localStorage.setItem(e, t), p = t;
              }
            }
            this.dappStorageKey = p;
            const b = new URL(d);
            b.pathname.endsWith("/") ? b.pathname += "popup" : b.pathname += "/popup", p && (b.hash = "#dappStorageKey=".concat(p)), 
            this.torusIframe = He('<iframe\n        id="torusIframe"\n        allow='.concat(h ? "camera" : "", '\n        class="torusIframe"\n        src="').concat(b.href, '"\n        style="display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ').concat(this.modalZIndex, '"\n      ></iframe>')), 
            this.torusAlertContainer = He('<div id="torusAlertContainer"></div>'), this.torusAlertContainer.style.display = "none", 
            this.torusAlertContainer.style.setProperty("z-index", this.alertZIndex.toString());
            const y = window.document.createElement("link");
            y.setAttribute("rel", "stylesheet"), y.setAttribute("type", "text/css"), y.setAttribute("href", "".concat(d, "/css/widget.css")), 
            this.styleLink = y;
            const {defaultLanguage: g = et(), customTranslations: m = {}} = this.whiteLabel || {}, v = u()(qe.translations, m)[g] || qe.translations[et()];
            this.embedTranslations = v.embed;
            const w = async () => (await async function() {
              return new Promise((e => {
                "loading" !== document.readyState ? e() : function(e, t, r) {
                  for (var n = arguments.length, i = new Array(n > 3 ? n - 3 : 0), o = 3; o < n; o++) i[o - 3] = arguments[o];
                  const s = () => {
                    r(...i), e.removeEventListener(t, s);
                  };
                  e.addEventListener(t, s);
                }(document, "DOMContentLoaded", e);
              }));
            }(), new Promise(((e, t) => {
              this.torusIframe.onload = async () => {
                this._setupWeb3();
                const o = this.communicationMux.getStream("init_stream");
                o.on("data", (r => {
                  const {name: n, data: i, error: o} = r;
                  "init_complete" === n && i.success ? (this.isInitialized = !0, this._displayIframe(this.isIframeFullScreen), e(void 0)) : o && t(new Error(o));
                })), o.write({
                  name: "init_stream",
                  data: {
                    enabledVerifiers: r,
                    loginConfig: i,
                    whiteLabel: this.whiteLabel,
                    buttonPosition: this.buttonPosition,
                    torusWidgetVisibility: this.torusWidgetVisibility,
                    apiKey: this.apiKey,
                    skipTKey: c,
                    network: n
                  }
                });
              }, window.document.head.appendChild(this.styleLink), window.document.body.appendChild(this.torusIframe), window.document.body.appendChild(this.torusAlertContainer);
            })));
            if ("production" === e && s.check) {
              const e = "".concat(d, "/popup"), t = await fetch(e, {
                cache: "reload"
              });
              if ("max-age=3600" !== t.headers.get("Cache-Control")) throw new Error("Unexpected Cache-Control headers, got ".concat(t.headers.get("Cache-Control")));
              const r = ((e, t) => {
                const r = (e => ({
                  algorithms: e.algorithms || [ "sha256" ],
                  delimiter: e.delimiter || " ",
                  full: e.full || !1
                }))({
                  algorithms: [ "sha384" ]
                }), n = {
                  hashes: ht(r, t),
                  integrity: void 0
                };
                return n.integrity = ((e, t) => {
                  let r = "";
                  return r += Object.keys(t.hashes).map((e => "".concat(e, "-").concat(t.hashes[e]))).join(e.delimiter), r;
                })(r, n), r.full ? n : n.integrity;
              })(0, await t.text());
              if (Xe.info(r, "integrity"), r !== s.hash) throw this.clearInit(), new Error("Integrity check failed");
              await w();
            } else await w();
          }
          login() {
            let {verifier: e = "", login_hint: t = ""} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            if (!this.isInitialized) throw new Error("Call init() first");
            return this.requestedVerifier = e, this.loginHint = t, this.ethereum.enable();
          }
          logout() {
            return new Promise(((e, t) => {
              if (!this.isLoggedIn) return void t(new Error("User has not logged in yet"));
              this.communicationMux.getStream("logout").write({
                name: "logOut"
              });
              const r = this.communicationMux.getStream("status");
              ze(r, "data", (r => {
                r.loggedIn ? t(new Error("Some Error Occured")) : (this.isLoggedIn = !1, this.currentVerifier = "", this.requestedVerifier = "", 
                e());
              }));
            }));
          }
          async cleanUp() {
            this.isLoggedIn && await this.logout(), this.clearInit();
          }
          clearInit() {
            function e(e) {
              return e instanceof Element || e instanceof HTMLDocument;
            }
            e(this.styleLink) && window.document.body.contains(this.styleLink) && (this.styleLink.remove(), this.styleLink = void 0), 
            e(this.torusIframe) && window.document.body.contains(this.torusIframe) && (this.torusIframe.remove(), this.torusIframe = void 0), 
            e(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer) && (this.torusAlert = void 0, this.torusAlertContainer.remove(), 
            this.torusAlertContainer = void 0), this.isInitialized = !1;
          }
          hideTorusButton() {
            this.torusWidgetVisibility = !1, this._sendWidgetVisibilityStatus(!1), this._displayIframe();
          }
          showTorusButton() {
            this.torusWidgetVisibility = !0, this._sendWidgetVisibilityStatus(!0), this._displayIframe();
          }
          setProvider() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, {host: t = "mainnet", chainId: r = null, networkName: n = ""} = e, i = function(e, t) {
              if (null == e) return {};
              var r, n, i = function(e, t) {
                if (null == e) return {};
                var r, n, i = {}, o = Object.keys(e);
                for (n = 0; n < o.length; n++) r = o[n], t.indexOf(r) >= 0 || (i[r] = e[r]);
                return i;
              }(e, t);
              if (Object.getOwnPropertySymbols) {
                var o = Object.getOwnPropertySymbols(e);
                for (n = 0; n < o.length; n++) r = o[n], t.indexOf(r) >= 0 || Object.prototype.propertyIsEnumerable.call(e, r) && (i[r] = e[r]);
              }
              return i;
            }(e, mt);
            return new Promise(((e, o) => {
              const s = this.communicationMux.getStream("provider_change");
              ze(s, "data", (t => {
                const {err: r, success: n} = t.data;
                Xe.info(t), r ? o(r) : n ? e() : o(new Error("some error occured"));
              }));
              const a = Ze();
              this._handleWindow(a, {
                target: "_blank",
                features: nt
              }), s.write({
                name: "show_provider_change",
                data: {
                  network: wt({
                    host: t,
                    chainId: r,
                    networkName: n
                  }, i),
                  preopenInstanceId: a,
                  override: !1
                }
              });
            }));
          }
          showWallet(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            const r = this.communicationMux.getStream("show_wallet"), n = e ? "/".concat(e) : "";
            r.write({
              name: "show_wallet",
              data: {
                path: n
              }
            }), ze(r, "data", (e => {
              if ("show_wallet_instance" === e.name) {
                const {instanceId: r} = e.data, i = new URL("".concat(this.torusUrl, "/wallet").concat(n));
                i.searchParams.append("integrity", "true"), i.searchParams.append("instanceId", r), Object.keys(t).forEach((e => {
                  i.searchParams.append(e, t[e]);
                })), this.dappStorageKey && (i.hash = "#dappStorageKey=".concat(this.dappStorageKey)), new lt({
                  url: i,
                  features: "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315"
                }).open();
              }
            }));
          }
          async getPublicAddress(e) {
            let {verifier: t, verifierId: r, isExtended: n = !1} = e;
            if (!qe.supportedVerifierList.includes(t) || !Ee[t]) throw new Error("Unsupported verifier");
            const i = await this.nodeDetailManager.getNodeDetails({
              verifier: t,
              verifierId: r
            }), o = i.torusNodeEndpoints, s = i.torusNodePub, a = t, c = Ee[t];
            try {
              const e = await this.torusJs.getUserTypeAndAddress(o, s, {
                verifier: a,
                verifierId: r
              });
              if ("v1" === e.typeOfUser) return n ? e : e.address;
              const t = await this.torusJs.getUserTypeAndAddress(o, s, {
                verifier: c,
                verifierId: r
              }, !0);
              return n ? t : t.address;
            } catch (e) {
              if (null != e && e.message.includes("Verifier + VerifierID has not yet been assigned")) {
                const e = await this.torusJs.getUserTypeAndAddress(o, s, {
                  verifier: c,
                  verifierId: r
                }, !0);
                return n ? e : e.address;
              }
              throw e;
            }
          }
          getUserInfo(e) {
            return new Promise(((t, r) => {
              if (this.isLoggedIn) {
                const n = this.communicationMux.getStream("user_info_access");
                n.write({
                  name: "user_info_access_request"
                });
                const i = n => {
                  const {name: i, data: {approved: o, payload: s, rejected: a, newRequest: c}} = n;
                  if ("user_info_access_response" === i) if (o) t(s); else if (a) r(new Error("User rejected the request")); else if (c) {
                    const n = this.communicationMux.getStream("user_info");
                    ze(n, "data", (e => {
                      "user_info_response" === e.name && (e.data.approved ? t(e.data.payload) : r(new Error("User rejected the request")));
                    }));
                    const i = Ze();
                    this._handleWindow(i, {
                      target: "_blank",
                      features: nt
                    }), n.write({
                      name: "user_info_request",
                      data: {
                        message: e,
                        preopenInstanceId: i
                      }
                    });
                  }
                };
                ze(n, "data", i);
              } else r(new Error("User has not logged in yet"));
            }));
          }
          initiateTopup(e, t) {
            return new Promise(((r, n) => {
              if (this.isInitialized) {
                const {errors: i, isValid: o} = ((e, t) => {
                  const r = {};
                  if (!e) return {
                    errors: r,
                    isValid: !0
                  };
                  if (e && !Je[e]) return r.provider = "Invalid Provider", {
                    errors: r,
                    isValid: 0 === Object.keys(r).length
                  };
                  const n = Je[e], i = t || {};
                  if (i.fiatValue) {
                    const e = +parseFloat(i.fiatValue.toString()) || 0;
                    e < n.minOrderValue && (r.fiatValue = "Requested amount is lower than supported"), e > n.maxOrderValue && n.enforceMax && (r.fiatValue = "Requested amount is higher than supported");
                  }
                  if (i.selectedCurrency && !n.validCurrencies.includes(i.selectedCurrency) && (r.selectedCurrency = "Unsupported currency"), 
                  i.selectedCryptoCurrency) {
                    const t = Object.values(n.validCryptoCurrenciesByChain).flat().map((e => e.value)), o = e === Ae ? i.selectedCryptoCurrency.toLowerCase() : i.selectedCryptoCurrency;
                    t && !t.includes(o) && (r.selectedCryptoCurrency = "Unsupported cryptoCurrency");
                  }
                  return {
                    errors: r,
                    isValid: 0 === Object.keys(r).length
                  };
                })(e, t);
                if (!o) return void n(new Error(JSON.stringify(i)));
                const s = this.communicationMux.getStream("topup");
                ze(s, "data", (e => {
                  "topup_response" === e.name && (e.data.success ? r(e.data.success) : n(new Error(e.data.error)));
                }));
                const a = Ze();
                this._handleWindow(a), s.write({
                  name: "topup_request",
                  data: {
                    provider: e,
                    params: t,
                    preopenInstanceId: a
                  }
                });
              } else n(new Error("Torus is not initialized yet"));
            }));
          }
          async loginWithPrivateKey(e) {
            const {privateKey: t, userInfo: r} = e;
            return new Promise(((e, n) => {
              if (this.isInitialized) {
                if (32 !== gt.from(t, "hex").length) return void n(new Error("Invalid private key, Please provide a 32 byte valid secp25k1 private key"));
                const i = this.communicationMux.getStream("login_with_private_key");
                ze(i, "data", (t => {
                  "login_with_private_key_response" === t.name && (t.data.success ? e(t.data.success) : n(new Error(t.data.error)));
                })), i.write({
                  name: "login_with_private_key_request",
                  data: {
                    privateKey: t,
                    userInfo: r
                  }
                });
              } else n(new Error("Torus is not initialized yet"));
            }));
          }
          async showWalletConnectScanner() {
            if (!this.useWalletConnect) throw new Error("Set `useWalletConnect` as true in init function options to use wallet connect scanner");
            return new Promise(((e, t) => {
              if (this.isLoggedIn) {
                const r = this.communicationMux.getStream("wallet_connect_stream");
                ze(r, "data", (r => {
                  "wallet_connect_stream_res" === r.name && (r.data.success ? e(r.data.success) : t(new Error(r.data.error)), this._displayIframe());
                })), r.write({
                  name: "wallet_connect_stream_req"
                }), this._displayIframe(!0);
              } else t(new Error("User has not logged in yet"));
            }));
          }
          _handleWindow(e) {
            let {url: t, target: r, features: n} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (e) {
              const i = this.communicationMux.getStream("window"), o = new URL(t || "".concat(this.torusUrl, "/redirect?preopenInstanceId=").concat(e));
              this.dappStorageKey && (o.hash ? o.hash += "&dappStorageKey=".concat(this.dappStorageKey) : o.hash = "#dappStorageKey=".concat(this.dappStorageKey));
              const s = new lt({
                url: o,
                target: r,
                features: n
              });
              if (s.open(), !s.window) return void this._createPopupBlockAlert(e, o.href);
              i.write({
                name: "opened_window",
                data: {
                  preopenInstanceId: e
                }
              });
              const a = t => {
                let {preopenInstanceId: r, close: n} = t;
                r === e && n && (s.close(), i.removeListener("data", a));
              };
              i.on("data", a), s.once("close", (() => {
                i.write({
                  data: {
                    preopenInstanceId: e,
                    closed: !0
                  }
                }), i.removeListener("data", a);
              }));
            }
          }
          _setEmbedWhiteLabel(e) {
            const {theme: t} = this.whiteLabel || {};
            if (t) {
              const {isDark: r = !1, colors: n = {}} = t;
              r && e.classList.add("torus-dark"), n.torusBrand1 && e.style.setProperty("--torus-brand-1", n.torusBrand1), n.torusGray2 && e.style.setProperty("--torus-gray-2", n.torusGray2);
            }
          }
          _getLogoUrl() {
            var e, t;
            let r = "".concat(this.torusUrl, "/images/torus_icon-blue.svg");
            var n, i;
            return r = null !== (e = this.whiteLabel) && void 0 !== e && null !== (t = e.theme) && void 0 !== t && t.isDark ? (null === (n = this.whiteLabel) || void 0 === n ? void 0 : n.logoLight) || r : (null === (i = this.whiteLabel) || void 0 === i ? void 0 : i.logoDark) || r, 
            r;
          }
          _sendWidgetVisibilityStatus(e) {
            this.communicationMux.getStream("torus-widget-visibility").write({
              data: e
            });
          }
          _displayIframe() {
            let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            const t = {};
            if (e) t.display = "block", t.width = "100%", t.height = "100%", t.top = "0px", t.right = "0px", t.left = "0px", t.bottom = "0px"; else switch (t.display = this.torusWidgetVisibility ? "block" : "none", 
            t.height = "70px", t.width = "70px", this.buttonPosition) {
             case je.TOP_LEFT:
              t.top = "0px", t.left = "0px", t.right = "auto", t.bottom = "auto";
              break;

             case je.TOP_RIGHT:
              t.top = "0px", t.right = "0px", t.left = "auto", t.bottom = "auto";
              break;

             case je.BOTTOM_RIGHT:
              t.bottom = "0px", t.right = "0px", t.top = "auto", t.left = "auto";
              break;

             case je.BOTTOM_LEFT:
             default:
              t.bottom = "0px", t.left = "0px", t.top = "auto", t.right = "auto";
            }
            Object.assign(this.torusIframe.style, t), this.isIframeFullScreen = e;
          }
          _setupWeb3() {
            Xe.info("setupWeb3 running");
            const e = new z({
              name: "embed_metamask",
              target: "iframe_metamask",
              targetWindow: this.torusIframe.contentWindow,
              targetOrigin: new URL(this.torusUrl).origin
            }), t = new z({
              name: "embed_comm",
              target: "iframe_comm",
              targetWindow: this.torusIframe.contentWindow,
              targetOrigin: new URL(this.torusUrl).origin
            }), r = new ct(e), n = e => {
              const t = r[e];
              r[e] = function(e) {
                if (e && "eth_requestAccounts" === e) return r.enable();
                for (var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) i[o - 1] = arguments[o];
                return t.apply(this, [ e, ...i ]);
              };
            };
            n("send"), n("sendAsync"), r.enable = () => new Promise(((e, t) => {
              r.sendAsync({
                jsonrpc: "2.0",
                id: Ze(),
                method: "eth_requestAccounts",
                params: []
              }, ((r, n) => {
                const {result: i} = n || {};
                if (r) setTimeout((() => {
                  t(r);
                }), 50); else if (Array.isArray(i) && i.length > 0) {
                  const r = () => {
                    if ("" !== this.requestedVerifier && this.currentVerifier !== this.requestedVerifier) {
                      const {requestedVerifier: r} = this;
                      this.logout().then((n => {
                        this.requestedVerifier = r, this._showLoginPopup(!0, e, t);
                      })).catch((e => t(e)));
                    } else e(i);
                  };
                  this.isLoggedIn ? r() : this.isLoginCallback = r;
                } else this._showLoginPopup(!0, e, t);
              }));
            })), r.tryPreopenHandle = (e, t) => {
              const n = e;
              if (!Array.isArray(n) && Et.includes(n.method)) {
                const e = Ze();
                this._handleWindow(e, {
                  target: "_blank",
                  features: it
                }), n.preopenInstanceId = e;
              }
              r._rpcEngine.handle(n, t);
            };
            const i = new Proxy(r, {
              deleteProperty: () => !0
            });
            this.ethereum = i;
            const o = function(e) {
              const t = new Q;
              return t.getStream = function(e) {
                return this._substreams[e] ? this._substreams[e] : this.createStream(e);
              }, q()(e, t, e, (e => {
                e && window.console.error(e);
              })), t;
            }(t);
            this.communicationMux = o, o.getStream("window").on("data", (e => {
              "create_window" === e.name && this._createPopupBlockAlert(e.data.preopenInstanceId, e.data.url);
            })), o.getStream("widget").on("data", (e => {
              const {data: t} = e;
              this._displayIframe(t);
            })), o.getStream("status").on("data", (e => {
              e.loggedIn ? (this.isLoggedIn = e.loggedIn, this.currentVerifier = e.verifier) : this._displayIframe(), this.isLoginCallback && (this.isLoginCallback(), 
              delete this.isLoginCallback);
            })), this.provider = i, this.provider.shouldSendMetadata && async function(e) {
              try {
                const t = await (async () => ({
                  name: bt(window),
                  icon: await yt(window)
                }))();
                e.handle({
                  jsonrpc: "2.0",
                  id: Ze(),
                  method: "wallet_sendDomainMetadata",
                  params: t
                }, rt);
              } catch (e) {
                Xe.error({
                  message: Ye.errors.sendSiteMetadata(),
                  originalError: e
                });
              }
            }(this.provider._rpcEngine), r._initializeState(), Xe.debug("Torus - injected provider");
          }
          _showLoginPopup(e, t, r) {
            const n = e => {
              const {err: n, selectedAddress: i} = e;
              n ? (Xe.error(n), r && r(n)) : t && t([ i ]), this.isIframeFullScreen && this._displayIframe();
            }, i = this.communicationMux.getStream("oauth");
            if (this.requestedVerifier) {
              ze(i, "data", n);
              const t = Ze();
              this._handleWindow(t), i.write({
                name: "oauth",
                data: {
                  calledFromEmbed: e,
                  verifier: this.requestedVerifier,
                  preopenInstanceId: t,
                  login_hint: this.loginHint
                }
              });
            } else this._displayIframe(!0), ze(i, "data", n), i.write({
              name: "oauth_modal",
              data: {
                calledFromEmbed: e
              }
            });
          }
          _createPopupBlockAlert(e, t) {
            const r = this._getLogoUrl(), n = He('<div id="torusAlert" class="torus-alert--v2">' + '<div id="torusAlert__logo"><img src="'.concat(r, '" /></div>') + "<div>" + '<h1 id="torusAlert__title">'.concat(this.embedTranslations.actionRequired, "</h1>") + '<p id="torusAlert__desc">'.concat(this.embedTranslations.pendingAction, "</p>") + "</div></div>"), i = He('<div><a id="torusAlert__btn">'.concat(this.embedTranslations.continue, "</a></div>")), o = He('<div id="torusAlert__btn-container"></div>');
            o.appendChild(i), n.appendChild(o), this._setEmbedWhiteLabel(n), Fe((() => {
              this.torusAlertContainer.style.display = "block", this.torusAlertContainer.appendChild(n);
            })), Fe((() => {
              i.addEventListener("click", (() => {
                this._handleWindow(e, {
                  url: t,
                  target: "_blank",
                  features: it
                }), n.remove(), 0 === this.torusAlertContainer.children.length && (this.torusAlertContainer.style.display = "none");
              }));
            }));
          }
        };
      })(), i.default;
    })()));
  }
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,