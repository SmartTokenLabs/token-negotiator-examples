"use strict";

(self.webpackChunktoken_overlay_website = self.webpackChunktoken_overlay_website || []).push([ [ 308 ], {
  8403: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Web3WalletProvider\": () => (/* binding */ Web3WalletProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1023);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(241);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6677);\n/* provided dependency */ var console = __webpack_require__(5108);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nclass Web3WalletProvider {\n    constructor(client, walletOptions, safeConnectOptions) {\n        this.client = client;\n        this.walletOptions = walletOptions;\n        this.safeConnectOptions = safeConnectOptions;\n        this.connections = {};\n    }\n    saveConnections() {\n        let savedConnections = {};\n        for (let address in this.connections) {\n            let con = this.connections[address];\n            savedConnections[address] = {\n                address: con.address,\n                chainId: con.chainId,\n                providerType: con.providerType,\n                blockchain: con.blockchain,\n            };\n        }\n        localStorage.setItem(Web3WalletProvider.LOCAL_STORAGE_KEY, JSON.stringify(savedConnections));\n    }\n    emitSavedConnection(address) {\n        if (Object.keys(this.connections).length && address) {\n            this.client.eventSender('connected-wallet', this.connections[address.toLocaleLowerCase()]);\n            return this.connections[address.toLocaleLowerCase()];\n        }\n        else {\n            return null;\n        }\n    }\n    emitNetworkChange(chainId) {\n        if (chainId) {\n            this.client.eventSender('network-change', chainId);\n            return chainId;\n        }\n    }\n    deleteConnections() {\n        this.connections = {};\n        localStorage.removeItem(Web3WalletProvider.LOCAL_STORAGE_KEY);\n        localStorage.removeItem('walletconnect');\n        sessionStorage.removeItem('CURRENT_USER');\n    }\n    loadConnections() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = localStorage.getItem(Web3WalletProvider.LOCAL_STORAGE_KEY);\n            if (!data)\n                return;\n            let state = JSON.parse(data);\n            if (!state)\n                return;\n            for (let address in state) {\n                let connection = state[address];\n                try {\n                    yield this.connectWith(connection.providerType, true);\n                }\n                catch (e) {\n                    console.log(\"Wallet couldn't connect: \" + e.message);\n                    delete state[address];\n                    this.saveConnections();\n                    this.emitSavedConnection(address);\n                }\n            }\n        });\n    }\n    connectWith(walletType, checkConnectionOnly = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!walletType)\n                throw new Error('Please provide a Wallet type to connect with.');\n            if (this[walletType]) {\n                const address = yield this[walletType](checkConnectionOnly);\n                (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .kg)(2, 'address', address);\n                this.saveConnections();\n                this.emitSavedConnection(address);\n                return address;\n            }\n            else {\n                throw new Error('Wallet type not found');\n            }\n        });\n    }\n    signMessage(address, message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let provider = this.getWalletProvider(address);\n            let signer = provider.getSigner(address);\n            return yield signer.signMessage(message);\n        });\n    }\n    getWalletProvider(address) {\n        var _a;\n        address = address.toLowerCase();\n        if (!((_a = this.connections[address]) === null || _a === void 0 ? void 0 : _a.provider))\n            throw new Error('Wallet provider not found for address');\n        return this.connections[address].provider;\n    }\n    getConnectedWalletData() {\n        return Object.values(this.connections);\n    }\n    registerNewWalletAddress(address, chainId, providerType, provider, blockchain = 'evm') {\n        this.connections[address.toLowerCase()] = { address, chainId, providerType, provider, blockchain, ethers: ethers__WEBPACK_IMPORTED_MODULE_1__ };\n        return address;\n    }\n    registerProvider(provider, providerName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = yield provider.listAccounts();\n            const chainId = (yield provider.detectNetwork()).chainId;\n            if (accounts.length === 0) {\n                throw new Error('No accounts found via wallet-connect.');\n            }\n            let curAccount = accounts[0];\n            this.registerNewWalletAddress(curAccount, chainId, providerName, provider);\n            provider.provider.on('accountsChanged', (accounts) => {\n                if (!accounts || accounts.length === 0) {\n                    this.client.disconnectWallet();\n                    return;\n                }\n                if (curAccount === accounts[0])\n                    return;\n                delete this.connections[curAccount.toLowerCase()];\n                curAccount = accounts[0];\n                this.registerNewWalletAddress(curAccount, chainId, providerName, provider);\n                this.saveConnections();\n                this.emitSavedConnection(curAccount);\n                this.client.getTokenStore().clearCachedTokens();\n                this.client.enrichTokenLookupDataOnChainTokens();\n            });\n            provider.provider.on('chainChanged', (_chainId) => {\n                this.registerNewWalletAddress(accounts[0], _chainId, providerName, provider);\n                this.saveConnections();\n                this.emitNetworkChange(_chainId);\n            });\n            provider.provider.on('disconnect', (reason) => {\n                if ((reason === null || reason === void 0 ? void 0 : reason.message) && reason.message.indexOf('MetaMask: Disconnected from chain') > -1)\n                    return;\n                this.client.disconnectWallet();\n            });\n            return accounts[0];\n        });\n    }\n    MetaMask(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .kg)(2, 'connect MetaMask');\n            if (typeof window.ethereum !== 'undefined') {\n                yield window.ethereum.enable();\n                const provider = new ethers__WEBPACK_IMPORTED_MODULE_2__/* .Web3Provider */ .Q(window.ethereum, 'any');\n                return this.registerProvider(provider, 'MetaMask');\n            }\n            else {\n                throw new Error('MetaMask is not available. Please check the extension is supported and active.');\n            }\n        });\n    }\n    WalletConnect(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .kg)(2, 'connect Wallet Connect');\n            const walletConnectProvider = yield Promise.all(/* import() */[__webpack_require__.e(418), __webpack_require__.e(444), __webpack_require__.e(883)]).then(__webpack_require__.bind(__webpack_require__, 5444));\n            const walletConnect = yield walletConnectProvider.getWalletConnectProviderInstance(checkConnectionOnly);\n            return new Promise((resolve, reject) => {\n                if (checkConnectionOnly) {\n                    walletConnect.connector.on('display_uri', (err, payload) => {\n                        reject(new Error('Connection expired'));\n                    });\n                }\n                walletConnect\n                    .enable()\n                    .then(() => {\n                    const provider = new ethers__WEBPACK_IMPORTED_MODULE_2__/* .Web3Provider */ .Q(walletConnect, 'any');\n                    resolve(this.registerProvider(provider, 'WalletConnect'));\n                })\n                    .catch((e) => reject(e));\n            });\n        });\n    }\n    WalletConnectV2(checkConnectionOnly) {\n        var _a, _b, _c, _d, _e, _f;\n        return __awaiter(this, void 0, void 0, function* () {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .kg)(2, 'connect Wallet Connect V2');\n            const walletConnectProvider = yield Promise.all(/* import() */[__webpack_require__.e(418), __webpack_require__.e(403)]).then(__webpack_require__.bind(__webpack_require__, 6418));\n            const universalWalletConnect = yield walletConnectProvider.getWalletConnectV2ProviderInstance();\n            let QRCodeModal;\n            universalWalletConnect.on('display_uri', (uri) => __awaiter(this, void 0, void 0, function* () {\n                console.log('EVENT', 'QR Code Modal open');\n                QRCodeModal = (yield __webpack_require__.e(/* import() */ 337).then(__webpack_require__.t.bind(__webpack_require__, 4337, 23))).default;\n                QRCodeModal.open(uri, () => {\n                    this.client.getUi().showError('User closed modal');\n                });\n            }));\n            universalWalletConnect.on('session_delete', ({ id, topic }) => {\n                console.log('WC V2 EVENT', 'session_deleted');\n                this.client.disconnectWallet();\n            });\n            if (!checkConnectionOnly) {\n                let pairing;\n                yield universalWalletConnect.connect({\n                    namespaces: {\n                        eip155: {\n                            methods: ['eth_sendTransaction', 'eth_signTransaction', 'eth_sign', 'personal_sign', 'eth_signTypedData'],\n                            chains: (_c = (_b = (_a = this.walletOptions) === null || _a === void 0 ? void 0 : _a.walletConnectV2) === null || _b === void 0 ? void 0 : _b.chains) !== null && _c !== void 0 ? _c : walletConnectProvider.WC_V2_DEFAULT_CHAINS,\n                            events: ['chainChanged', 'accountsChanged'],\n                            rpcMap: (_f = (_e = (_d = this.walletOptions) === null || _d === void 0 ? void 0 : _d.walletConnectV2) === null || _e === void 0 ? void 0 : _e.rpcMap) !== null && _f !== void 0 ? _f : walletConnectProvider.WC_DEFAULT_RPC_MAP,\n                        },\n                    },\n                    pairingTopic: pairing === null || pairing === void 0 ? void 0 : pairing.topic,\n                });\n                QRCodeModal.close();\n            }\n            return new Promise((resolve, reject) => {\n                universalWalletConnect\n                    .enable()\n                    .then(() => {\n                    const provider = new ethers__WEBPACK_IMPORTED_MODULE_2__/* .Web3Provider */ .Q(universalWalletConnect, 'any');\n                    resolve(this.registerProvider(provider, 'WalletConnectV2'));\n                })\n                    .catch((e) => {\n                    reject(e);\n                });\n            });\n        });\n    }\n    Torus(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const TorusProvider = yield __webpack_require__.e(/* import() */ 681).then(__webpack_require__.bind(__webpack_require__, 4681));\n            const torus = yield TorusProvider.getTorusProviderInstance();\n            yield torus.init();\n            yield torus.login();\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_2__/* .Web3Provider */ .Q(torus.provider, 'any');\n            return this.registerProvider(provider, 'Torus');\n        });\n    }\n    Phantom(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .kg)(2, 'connect Phantom');\n            if (typeof window.solana !== 'undefined') {\n                const connection = yield window.solana.connect();\n                const accountAddress = connection.publicKey.toBase58();\n                return this.registerNewWalletAddress(accountAddress, 'mainnet-beta', 'phantom', window.solana, 'solana');\n            }\n            else {\n                throw new Error('Phantom is not available. Please check the extension is supported and active.');\n            }\n        });\n    }\n    SafeConnect(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .kg)(2, 'connect SafeConnect');\n            const provider = yield this.getSafeConnectProvider();\n            const address = yield provider.initSafeConnect();\n            this.registerNewWalletAddress(address, 1, 'SafeConnect', provider);\n            return address;\n        });\n    }\n    Flow(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const flowProvider = yield __webpack_require__.e(/* import() */ 623).then(__webpack_require__.bind(__webpack_require__, 9623));\n            const fcl = flowProvider.getFlowProvider();\n            yield fcl.currentUser.authenticate();\n            let currentUser = yield fcl.currentUser.snapshot();\n            if (!currentUser.addr)\n                throw new Error('Failed to connect Flow wallet');\n            this.registerNewWalletAddress(currentUser.addr, 1, 'flow', fcl);\n            return currentUser.addr;\n        });\n    }\n    safeConnectAvailable() {\n        return this.safeConnectOptions !== undefined;\n    }\n    getSafeConnectProvider() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { SafeConnectProvider } = yield Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7393));\n            return new SafeConnectProvider(this.client.getUi(), this.safeConnectOptions);\n        });\n    }\n}\nWeb3WalletProvider.LOCAL_STORAGE_KEY = 'tn-wallet-connections';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Web3WalletProvider);\n//# sourceMappingURL=Web3WalletProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8403\n");
  }
} ]);