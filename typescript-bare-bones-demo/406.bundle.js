/*! For license information please see 406.bundle.js.LICENSE.txt */
(self.webpackChunktoken_overlay_website = self.webpackChunktoken_overlay_website || []).push([ [ 406 ], {
  87757: (t, e, r) => {
    t.exports = r(35666);
  },
  75508: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.ComposedStore = void 0;
    const n = r(28877);
    class i extends n.ObservableStore {
      constructor(t) {
        super({}), this._children = t || {}, Object.keys(this._children).forEach((t => {
          const e = this._children[t];
          this._addChild(t, e);
        }));
      }
      _addChild(t, e) {
        const r = e => {
          const r = this.getState();
          r[t] = e, this.putState(r);
        };
        e.subscribe(r), r(e.getState());
      }
    }
    e.ComposedStore = i;
  },
  70401: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.MergedStore = void 0;
    const n = r(28877);
    class i extends n.ObservableStore {
      constructor(t = []) {
        super({}), this._children = t, t.forEach((t => this._addChild(t))), this._updateWholeState();
      }
      _addChild(t) {
        t.subscribe((() => this._updateWholeState()));
      }
      _updateWholeState() {
        const t = this._children.map((t => t.getState()));
        const e = Object.assign({}, ...t);
        this.putState(e);
      }
    }
    e.MergedStore = i;
  },
  28877: function(t, e, r) {
    "use strict";
    var n = this && this.__importDefault || function(t) {
      return t && t.__esModule ? t : {
        default: t
      };
    };
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.ObservableStore = void 0;
    const i = n(r(19394));
    class o extends i.default {
      constructor(t) {
        super(), this._state = t || {};
      }
      getState() {
        return this._getState();
      }
      putState(t) {
        this._putState(t), this.emit('update', t);
      }
      updateState(t) {
        if (t && 'object' == typeof t) {
          const e = this.getState();
          this.putState(Object.assign(Object.assign({}, e), t));
        } else this.putState(t);
      }
      subscribe(t) {
        this.on('update', t);
      }
      unsubscribe(t) {
        this.removeListener('update', t);
      }
      _getState() {
        return this._state;
      }
      _putState(t) {
        this._state = t;
      }
    }
    e.ObservableStore = o;
  },
  97969: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.storeAsStream = void 0;
    const n = r(42830);
    class i extends n.Duplex {
      constructor(t) {
        super({
          objectMode: !0
        }), this.resume(), this.handler = t => this.push(t), this.obsStore = t, this.obsStore.subscribe(this.handler);
      }
      pipe(t, e) {
        const r = super.pipe(t, e);
        return t.write(this.obsStore.getState()), r;
      }
      _write(t, e, r) {
        this.obsStore.putState(t), r();
      }
      _read(t) {}
      _destroy(t, e) {
        this.obsStore.unsubscribe(this.handler), super._destroy(t, e);
      }
    }
    e.storeAsStream = function(t) {
      return new i(t);
    };
  },
  12724: function(t, e, r) {
    "use strict";
    var n = this && this.__createBinding || (Object.create ? function(t, e, r, n) {
      void 0 === n && (n = r), Object.defineProperty(t, n, {
        enumerable: !0,
        get: function() {
          return e[r];
        }
      });
    } : function(t, e, r, n) {
      void 0 === n && (n = r), t[n] = e[r];
    });
    var i = this && this.__exportStar || function(t, e) {
      for (var r in t) "default" === r || Object.prototype.hasOwnProperty.call(e, r) || n(e, t, r);
    };
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), i(r(97969), e), i(r(75508), e), i(r(70401), e), i(r(28877), e), i(r(26546), e);
  },
  26546: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.storeTransformStream = void 0;
    const n = r(14650);
    e.storeTransformStream = function(t) {
      return n.obj(((e, r, n) => {
        try {
          return void n(null, t(e));
        } catch (i) {
          return void n(i);
        }
      }));
    };
  },
  50406: (t, e, r) => {
    "use strict";
    function n(t, e) {
      if (null == t) return {};
      var r = function(t, e) {
        if (null == t) return {};
        var r = {};
        var n = Object.keys(t);
        var i, o;
        for (o = 0; o < n.length; o++) i = n[o], e.indexOf(i) >= 0 || (r[i] = t[i]);
        return r;
      }(t, e);
      var n, i;
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(t);
        for (i = 0; i < o.length; i++) n = o[i], e.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(t, n) && (r[n] = t[n]);
      }
      return r;
    }
    function i(t, e, r) {
      return e in t ? Object.defineProperty(t, e, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : t[e] = r, t;
    }
    r.r(e), r.d(e, {
      getTorusProviderInstance: () => qe
    });
    var o = r(31692);
    var a = r.n(o);
    var s = r(18269);
    const u = "mainnet";
    const c = [ {
      constant: !0,
      inputs: [],
      name: "currentEpoch",
      outputs: [ {
        internalType: "uint256",
        name: "",
        type: "uint256"
      } ],
      payable: !1,
      stateMutability: "view",
      type: "function"
    }, {
      constant: !0,
      inputs: [ {
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      } ],
      name: "getEpochInfo",
      outputs: [ {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "n",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "k",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "t",
        type: "uint256"
      }, {
        internalType: "address[]",
        name: "nodeList",
        type: "address[]"
      }, {
        internalType: "uint256",
        name: "prevEpoch",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "nextEpoch",
        type: "uint256"
      } ],
      payable: !1,
      stateMutability: "view",
      type: "function"
    }, {
      constant: !0,
      inputs: [ {
        internalType: "address",
        name: "nodeAddress",
        type: "address"
      } ],
      name: "getNodeDetails",
      outputs: [ {
        internalType: "string",
        name: "declaredIp",
        type: "string"
      }, {
        internalType: "uint256",
        name: "position",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "pubKx",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "pubKy",
        type: "uint256"
      }, {
        internalType: "string",
        name: "tmP2PListenAddress",
        type: "string"
      }, {
        internalType: "string",
        name: "p2pListenAddress",
        type: "string"
      } ],
      payable: !1,
      stateMutability: "view",
      type: "function"
    } ];
    function h(t, e, r, n) {
      return new (r || (r = Promise))((function(i, o) {
        function a(t) {
          try {
            u(n.next(t));
          } catch (e) {
            o(e);
          }
        }
        function s(t) {
          try {
            u(n.throw(t));
          } catch (e) {
            o(e);
          }
        }
        function u(t) {
          t.done ? i(t.value) : function(t) {
            return t instanceof r ? t : new r((function(e) {
              e(t);
            }));
          }(t.value).then(a, s);
        }
        u((n = n.apply(t, e || [])).next());
      }));
    }
    class l {
      constructor({network: t = u, proxyAddress: e = "0x638646503746d5456209e33a2ff5e3226d698bea"} = {}) {
        let r;
        this._currentEpoch = "19", this._torusNodeEndpoints = [ "https://torus-19.torusnode.com/jrpc", "https://torus-node.ens.domains/jrpc", "https://torus-node.matic.network/jrpc", "https://torus.zilliqa.network/jrpc", "https://torus-mainnet.cosmos.network/jrpc", "https://torus2.etherscan.com/jrpc", "https://torus-node-v2.skalelabs.com/jrpc", "https://torus-node.binancex.dev/jrpc", "https://torusnode.ont.io/jrpc" ], 
        this._torusNodePub = [ {
          X: "bbe83c64177c3775550e6ba6ac2bc059f6847d644c9e4894e42c60d7974d8c2b",
          Y: "82b49a7caf70def38cdad2740af45c1e4f969650105c5019a29bb18b21a9acb5"
        }, {
          X: "c208cac4ef9a47d386097a9c915b28e9cb89213abee8d26a17198ee261201b0d",
          Y: "c7db2fe4631109f40833de9dc78d07e35706549ee48fa557b33e4e75e1047873"
        }, {
          X: "ca1766bb426d4ca5582818a0c5439d560ea64f5baa060793ab29dd3d0ceacfe",
          Y: "d46c1d08c40e1306e1bca328c2287b8268166b11a1ba4b8442ea2ad0c5e32152"
        }, {
          X: "c3934dd2f6f4b3d2e1e398cc501e143c1e1a381b52feb6d1525af34d16253768",
          Y: "71f5141a5035799099f5ea3e241e66946bc55dc857ac3bd7d6fcdb8dcd3eeeef"
        }, {
          X: "22e66f1929631d00bf026227581597f085fd94fd952fc0dca9f0833398b5c064",
          Y: "6088b3912e10a1e9d50355a609c10db7d188f16a2e2fd7357e51bf4f6a74f0a1"
        }, {
          X: "9dc9fa410f3ce9eb70df70cdea00a49f2c4cc7a31c08c0dab5f863ed35ff5139",
          Y: "627a291cb87a75c61da3f65d6818e1e05e360217179817ed27e8c73bca7ec122"
        }, {
          X: "118b9fc07e97b096d899b9f6658463ce6a8caa64038e37fc969df4e6023dd8c6",
          Y: "baf9fa4e51770f4796ea165dd03a769b8606681a38954a0a92c4cbffd6609ce9"
        }, {
          X: "8a6d8b925da15a273dec3d8f8395ec35cd6878f274b2b180e4e106999db64043",
          Y: "96f67f870c157743da0b1eb84d89bf30500d74dc84c11f501ee1cb013acc8c46"
        }, {
          X: "39cecb62e863729f572f7dfc46c24867981bf04bb405fed0df39e33984bfade5",
          Y: "61c2364434012e68a2be2e9952805037e52629d7762fafc8e10e9fb5bad8f790"
        } ], this._torusIndexes = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], this._network = u;
        try {
          r = new URL(t).href;
        } catch (n) {
          r = `https://${t}.infura.io/v3/${"b8cdb0e4cff24599a286bf8e87ff1c96"}`;
        }
        a().setProvider(r), this.nodeListContract = new (a())(c, e), this.nodeListAddress = e, this.updated = !1, this._network = t;
      }
      get _nodeDetails() {
        return {
          currentEpoch: this._currentEpoch,
          nodeListAddress: this.nodeListAddress,
          torusNodeEndpoints: this._torusNodeEndpoints,
          torusNodePub: this._torusNodePub,
          torusIndexes: this._torusIndexes,
          updated: this.updated
        };
      }
      getCurrentEpoch() {
        return this.nodeListContract.methods.currentEpoch().call();
      }
      getEpochInfo(t) {
        return this.nodeListContract.methods.getEpochInfo(t).call();
      }
      getNodeEndpoint(t) {
        return this.nodeListContract.methods.getNodeDetails(t).call();
      }
      getNodeDetails(t = !1, e = !1) {
        return h(this, void 0, void 0, (function*() {
          try {
            if (t && this._network === u) return this._nodeDetails;
            if (this.updated) return this._nodeDetails;
            const r = yield this.getCurrentEpoch();
            if (e && this._network === u && r === this._currentEpoch) return this._nodeDetails;
            this._currentEpoch = r;
            const n = yield this.getEpochInfo(r);
            const i = n.nodeList.map(((t, e) => e + 1));
            this._torusIndexes = i;
            const o = n.nodeList.map((t => this.getNodeEndpoint(t)));
            const a = yield Promise.all(o);
            const c = [];
            const h = [];
            for (let t = 0; t < a.length; t += 1) {
              const e = a[t];
              const r = `https://${e.declaredIp.split(":")[0]}/jrpc`;
              c.push(r), h.push({
                X: (0, s.toHex)(e.pubKx).replace("0x", ""),
                Y: (0, s.toHex)(e.pubKy).replace("0x", "")
              });
            }
            return this._torusNodeEndpoints = c, this._torusNodePub = h, this.updated = !0, this._nodeDetails;
          } catch (r) {
            return this._nodeDetails;
          }
        }));
      }
    }
    var d = r(72378);
    var f = r.n(d);
    function p(t, e, r, n) {
      return new (r || (r = Promise))((function(i, o) {
        function a(t) {
          try {
            u(n.next(t));
          } catch (e) {
            o(e);
          }
        }
        function s(t) {
          try {
            u(n.throw(t));
          } catch (e) {
            o(e);
          }
        }
        function u(t) {
          t.done ? i(t.value) : function(t) {
            return t instanceof r ? t : new r((function(e) {
              e(t);
            }));
          }(t.value).then(a, s);
        }
        u((n = n.apply(t, e || [])).next());
      }));
    }
    let v = "torus-default";
    let m = "";
    function g(t) {
      m = t;
    }
    function y(t) {
      v = t;
    }
    function b() {
      const t = {};
      return v && (t["x-api-key"] = v), m && (t["x-embed-host"] = m), t;
    }
    const w = (t, e = {}, r = {}) => p(void 0, void 0, void 0, (function*() {
      const n = {
        mode: "cors",
        headers: {}
      };
      r.useAPIKey && (n.headers = Object.assign(Object.assign({}, n.headers), b()));
      const i = f()(n, e, {
        method: "GET"
      });
      const o = yield fetch(t, i);
      if (o.ok) return o.json();
      throw o;
    }));
    const _ = (t, e = {}, r = {}, n = {}) => {
      const i = {
        mode: "cors",
        headers: {
          "Content-Type": "application/json; charset=utf-8"
        }
      };
      n.useAPIKey && (i.headers = Object.assign(Object.assign({}, i.headers), b()));
      const o = f()(i, r, {
        method: "POST"
      });
      return n.isUrlEncodedData ? (o.body = e, "application/json; charset=utf-8" === o.headers["Content-Type"] && delete o.headers["Content-Type"]) : o.body = JSON.stringify(e), 
      ((t, e) => {
        const r = new Promise(((e, r) => {
          const n = setTimeout((() => {
            clearTimeout(n), r(new Error(`Timed out in ${t}ms`));
          }), t);
        }));
        return Promise.race([ e, r ]);
      })(n.timeout || 6e4, fetch(t, o).then((t => {
        if (t.ok) return t.json();
        throw t;
      })));
    };
    const M = (t, e) => ({
      jsonrpc: "2.0",
      method: t,
      id: 10,
      params: e
    });
    var S = r(88473);
    var k = r(61798);
    var x = r.n(k);
    r(45772);
    r(95811);
    r(48764).Buffer;
    URL;
    var O = r(17187);
    var E = r(4445);
    var P = r.n(E);
    var j = r(12840);
    var A = r.n(j);
    var C = r(30778);
    var R = r.n(C);
    var T = r(74286);
    var I = r.n(T);
    function L() {}
    const D = "ACK";
    class q extends S.Duplex {
      constructor(t) {
        let {name: e, target: r, targetWindow: n = window, targetOrigin: o = "*"} = t;
        if (super({
          objectMode: !0
        }), i(this, "_init", void 0), i(this, "_haveSyn", void 0), i(this, "_name", void 0), i(this, "_target", void 0), i(this, "_targetWindow", void 0), 
        i(this, "_targetOrigin", void 0), i(this, "_onMessage", void 0), i(this, "_synIntervalId", void 0), !e || !r) throw new Error("Invalid input.");
        this._init = !1, this._haveSyn = !1, this._name = e, this._target = r, this._targetWindow = n, this._targetOrigin = o, this._onMessage = this.onMessage.bind(this), 
        this._synIntervalId = null, window.addEventListener("message", this._onMessage, !1), this._handShake();
      }
      _break() {
        this.cork(), this._write("BRK", null, L), this._haveSyn = !1, this._init = !1;
      }
      _handShake() {
        this._write("SYN", null, L), this.cork();
      }
      _onData(t) {
        if (this._init) if ("BRK" === t) this._break(); else try {
          this.push(t);
        } catch (e) {
          this.emit("error", e);
        } else "SYN" === t ? (this._haveSyn = !0, this._write(D, null, L)) : t === D && (this._init = !0, this._haveSyn || this._write(D, null, L), 
        this.uncork());
      }
      _postMessage(t) {
        const e = this._targetOrigin;
        this._targetWindow.postMessage({
          target: this._target,
          data: t
        }, e);
      }
      onMessage(t) {
        const e = t.data;
        "*" !== this._targetOrigin && t.origin !== this._targetOrigin || t.source !== this._targetWindow || "object" != typeof e || e.target !== this._name || !e.data || this._onData(e.data);
      }
      _read() {}
      _write(t, e, r) {
        this._postMessage(t), r();
      }
      _destroy() {
        window.removeEventListener("message", this._onMessage, !1);
      }
    }
    function U(t, e, r) {
      try {
        Reflect.apply(t, e, r);
      } catch (n) {
        setTimeout((() => {
          throw n;
        }));
      }
    }
    class N extends O.EventEmitter {
      emit(t) {
        let e = "error" === t;
        const r = this._events;
        if (void 0 !== r) e = e && void 0 === r.error; else if (!e) return !1;
        for (var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) i[o - 1] = arguments[o];
        if (e) {
          let t;
          if (i.length > 0 && ([t] = i), t instanceof Error) throw t;
          const e = new Error("Unhandled error.".concat(t ? " (".concat(t.message, ")") : ""));
          throw e.context = t, e;
        }
        const a = r[t];
        if (void 0 === a) return !1;
        if ("function" == typeof a) U(a, this, i); else {
          const t = a.length;
          const e = function(t) {
            const e = t.length;
            const r = new Array(e);
            for (let n = 0; n < e; n += 1) r[n] = t[n];
            return r;
          }(a);
          for (let r = 0; r < t; r += 1) U(e[r], this, i);
        }
        return !0;
      }
    }
    class B extends Error {
      constructor(t) {
        let {code: e, message: r, data: n} = t;
        if (!Number.isInteger(e)) throw new Error("code must be an integer");
        if (!r || "string" != typeof r) throw new Error("message must be string");
        super(r), i(this, "code", void 0), i(this, "data", void 0), this.code = e, void 0 !== n && (this.data = n);
      }
      toString() {
        return P()({
          code: this.code,
          message: this.message,
          data: this.data,
          stack: this.stack
        });
      }
    }
    function F(t) {
      return t.toString();
    }
    function W() {
      const t = {};
      const e = new N;
      const r = new S.Duplex({
        objectMode: !0,
        read: function() {
          return !1;
        },
        write: function(r, n, i) {
          let o;
          try {
            !r.id ? function(t) {
              e.emit("notification", t);
            }(r) : function(e) {
              const r = t[e.id];
              if (!r) throw new Error("StreamMiddleware - Unknown response id \"".concat(e.id, "\""));
              delete t[e.id], Object.assign(r.res, e), setTimeout(r.end);
            }(r);
          } catch (a) {
            o = a;
          }
          i(o);
        }
      });
      return {
        events: e,
        middleware: (e, n, i, o) => {
          r.push(e), t[e.id] = {
            req: e,
            res: n,
            next: i,
            end: o
          };
        },
        stream: r
      };
    }
    function V() {
      return (t, e, r, n) => {
        const i = t.id;
        const o = (() => x()(32).toString("hex"))();
        t.id = o, e.id = o, r((r => {
          t.id = i, e.id = i, r();
        }));
      };
    }
    function K(t, e) {
      var r = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(t);
        e && (n = n.filter((function(e) {
          return Object.getOwnPropertyDescriptor(t, e).enumerable;
        }))), r.push.apply(r, n);
      }
      return r;
    }
    class H extends N {
      constructor() {
        super(), i(this, "_middleware", void 0), this._middleware = [];
      }
      static async _runAllMiddleware(t, e, r) {
        const n = [];
        let i = null;
        let o = !1;
        for (const a of r) if ([i, o] = await H._runMiddleware(t, e, a, n), o) break;
        return [ i, o, n.reverse() ];
      }
      static _runMiddleware(t, e, r, n) {
        return new Promise((i => {
          const o = t => {
            const r = t || e.error;
            r && (e.error = F(r)), i([ r, !0 ]);
          };
          const a = t => {
            e.error ? o(e.error) : (t && ("function" != typeof t && o(new B({
              code: -32603,
              message: "JRPCEngine: 'next' return handlers must be functions"
            })), n.push(t)), i([ null, !1 ]));
          };
          try {
            r(t, e, a, o);
          } catch (s) {
            o(s);
          }
        }));
      }
      static async _runReturnHandlers(t) {
        for (const e of t) await new Promise(((t, r) => {
          e((e => e ? r(e) : t()));
        }));
      }
      static _checkForCompletion(t, e, r) {
        if (!("result" in e) && !("error" in e)) throw new B({
          code: -32603,
          message: "Response has no error or result for request"
        });
        if (!r) throw new B({
          code: -32603,
          message: "Nothing ended request"
        });
      }
      push(t) {
        this._middleware.push(t);
      }
      handle(t, e) {
        if (e && "function" != typeof e) throw new Error('"callback" must be a function if provided.');
        return Array.isArray(t) ? e ? this._handleBatch(t, e) : this._handleBatch(t) : e ? this._handle(t, e) : this._promiseHandle(t);
      }
      asMiddleware() {
        return async (t, e, r, n) => {
          try {
            const [i, o, a] = await H._runAllMiddleware(t, e, this._middleware);
            return o ? (await H._runReturnHandlers(a), n(i)) : r((async t => {
              try {
                await H._runReturnHandlers(a);
              } catch (e) {
                return t(e);
              }
              return t();
            }));
          } catch (i) {
            return n(i);
          }
        };
      }
      async _handleBatch(t, e) {
        try {
          const r = await Promise.all(t.map(this._promiseHandle.bind(this)));
          return e ? e(null, r) : r;
        } catch (r) {
          if (e) return e(r);
          throw r;
        }
      }
      _promiseHandle(t) {
        return new Promise((e => {
          this._handle(t, ((t, r) => {
            e(r);
          }));
        }));
      }
      async _handle(t, e) {
        if (!t || Array.isArray(t) || "object" != typeof t) {
          const t = new B({
            code: -32603,
            message: "request must be plain object"
          });
          return e(t, {
            id: void 0,
            jsonrpc: "2.0",
            error: t
          });
        }
        if ("string" != typeof t.method) {
          const r = new B({
            code: -32603,
            message: "method must be string"
          });
          return e(r, {
            id: t.id,
            jsonrpc: "2.0",
            error: r
          });
        }
        const r = function(t) {
          for (var e = 1; e < arguments.length; e++) {
            var r = null != arguments[e] ? arguments[e] : {};
            e % 2 ? K(Object(r), !0).forEach((function(e) {
              i(t, e, r[e]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : K(Object(r)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
            }));
          }
          return t;
        }({}, t);
        const n = {
          id: r.id,
          jsonrpc: r.jsonrpc
        };
        let o = null;
        try {
          await this._processRequest(r, n);
        } catch (a) {
          o = a;
        }
        return o && (delete n.result, n.error || (n.error = F(o))), e(o, n);
      }
      async _processRequest(t, e) {
        const [r, n, i] = await H._runAllMiddleware(t, e, this._middleware);
        if (H._checkForCompletion(t, e, n), await H._runReturnHandlers(i), r) throw r;
      }
    }
    class z extends S.Duplex {
      constructor(t) {
        let {parent: e, name: r} = t;
        super({
          objectMode: !0
        }), i(this, "_parent", void 0), i(this, "_name", void 0), this._parent = e, this._name = r;
      }
      _read() {}
      _write(t, e, r) {
        this._parent.push({
          name: this._name,
          data: t
        }), r();
      }
    }
    function J(t, e) {
      var r = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(t);
        e && (n = n.filter((function(e) {
          return Object.getOwnPropertyDescriptor(t, e).enumerable;
        }))), r.push.apply(r, n);
      }
      return r;
    }
    function Y(t) {
      for (var e = 1; e < arguments.length; e++) {
        var r = null != arguments[e] ? arguments[e] : {};
        e % 2 ? J(Object(r), !0).forEach((function(e) {
          i(t, e, r[e]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : J(Object(r)).forEach((function(e) {
          Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
        }));
      }
      return t;
    }
    const G = Symbol("IGNORE_SUBSTREAM");
    class Z extends S.Duplex {
      constructor() {
        super(Y(Y({}, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}), {}, {
          objectMode: !0
        })), i(this, "_substreams", void 0), i(this, "getStream", void 0), this._substreams = {};
      }
      createStream(t) {
        if (!t) throw new Error("ObjectMultiplex - name must not be empty");
        if (this._substreams[t]) throw new Error("ObjectMultiplex - Substream for name \"".concat(t, "\" already exists"));
        const e = new z({
          parent: this,
          name: t
        });
        return this._substreams[t] = e, function(t, e) {
          const r = R()(e);
          A()(t, {
            readable: !1
          }, r), A()(t, {
            writable: !1
          }, r);
        }(this, (t => e.destroy(t || void 0))), e;
      }
      ignoreStream(t) {
        if (!t) throw new Error("ObjectMultiplex - name must not be empty");
        if (this._substreams[t]) throw new Error("ObjectMultiplex - Substream for name \"".concat(t, "\" already exists"));
        this._substreams[t] = G;
      }
      _read() {}
      _write(t, e, r) {
        const {name: n, data: i} = t;
        if (!n) return window.console.warn("ObjectMultiplex - malformed chunk without name \"".concat(t, "\"")), r();
        const o = this._substreams[n];
        return o ? (o !== G && o.push(i), r()) : (window.console.warn("ObjectMultiplex - orphaned data for stream \"".concat(n, "\"")), 
        r());
      }
    }
    function X(t) {
      return X = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
        return typeof t;
      } : function(t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
      }, X(t);
    }
    function $(t, e, r, n, i, o, a) {
      try {
        var s = t[o](a);
        var u = s.value;
      } catch (c) {
        return void r(c);
      }
      s.done ? e(u) : Promise.resolve(u).then(n, i);
    }
    function Q(t) {
      return function() {
        var e = this, r = arguments;
        return new Promise((function(n, i) {
          var o = t.apply(e, r);
          function a(t) {
            $(o, n, i, a, s, "next", t);
          }
          function s(t) {
            $(o, n, i, a, s, "throw", t);
          }
          a(void 0);
        }));
      };
    }
    function tt(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }
    function et(t, e) {
      for (var r = 0; r < e.length; r++) {
        var n = e[r];
        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
      }
    }
    function rt(t, e, r) {
      return e && et(t.prototype, e), r && et(t, r), t;
    }
    var nt = r(87757);
    var it = r.n(nt);
    var ot = r(2450);
    var at = r(51107);
    var st = r.n(at);
    var ut = r(86266);
    var ct = r(67266);
    var ht = r.n(ct);
    var lt = r(2043);
    var dt = r.n(lt);
    function ft(t, e) {
      return ft = Object.setPrototypeOf || function(t, e) {
        return t.__proto__ = e, t;
      }, ft(t, e);
    }
    function pt(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, {
        constructor: {
          value: t,
          writable: !0,
          configurable: !0
        }
      }), e && ft(t, e);
    }
    function vt(t, e) {
      if (e && ("object" === X(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return function(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
      }(t);
    }
    function mt(t) {
      return mt = Object.setPrototypeOf ? Object.getPrototypeOf : function(t) {
        return t.__proto__ || Object.getPrototypeOf(t);
      }, mt(t);
    }
    function gt() {
      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
      if (Reflect.construct.sham) return !1;
      if ("function" == typeof Proxy) return !0;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {}))), !0;
      } catch (t) {
        return !1;
      }
    }
    function yt(t, e, r) {
      return yt = gt() ? Reflect.construct : function(t, e, r) {
        var n = [ null ];
        n.push.apply(n, e);
        var i = new (Function.bind.apply(t, n));
        return r && ft(i, r.prototype), i;
      }, yt.apply(null, arguments);
    }
    function bt(t) {
      var e = "function" == typeof Map ? new Map : void 0;
      return bt = function(t) {
        if (null === t || !function(t) {
          return -1 !== Function.toString.call(t).indexOf("[native code]");
        }(t)) return t;
        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
        if (void 0 !== e) {
          if (e.has(t)) return e.get(t);
          e.set(t, r);
        }
        function r() {
          return yt(t, arguments, mt(this).constructor);
        }
        return r.prototype = Object.create(t.prototype, {
          constructor: {
            value: r,
            enumerable: !1,
            writable: !0,
            configurable: !0
          }
        }), ft(r, t);
      }, bt(t);
    }
    function wt(t, e) {
      (null == e || e > t.length) && (e = t.length);
      for (var r = 0, n = new Array(e); r < e; r++) n[r] = t[r];
      return n;
    }
    function _t(t) {
      return function(t) {
        if (Array.isArray(t)) return wt(t);
      }(t) || function(t) {
        if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
      }(t) || function(t, e) {
        if (t) {
          if ("string" == typeof t) return wt(t, e);
          var r = Object.prototype.toString.call(t).slice(8, -1);
          return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? wt(t, e) : void 0;
        }
      }(t) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    var Mt = r(48764).Buffer;
    var St = dt().getLogger('torus.js');
    function kt(t) {
      var e = function() {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {}))), !0;
        } catch (t) {
          return !1;
        }
      }();
      return function() {
        var r, n = mt(t);
        if (e) {
          var i = mt(this).constructor;
          r = Reflect.construct(n, arguments, i);
        } else r = n.apply(this, arguments);
        return vt(this, r);
      };
    }
    St.disableAll();
    var xt = function(t) {
      pt(r, t);
      var e = kt(r);
      function r(t) {
        var n;
        var i = t.errors, o = t.responses, a = t.predicate;
        return tt(this, r), (n = e.call(this, 'Unable to resolve enough promises.')).errors = i, n.responses = o, n.predicate = a, 
        n;
      }
      return rt(r);
    }(bt(Error));
    var Ot = function(t, e) {
      return new Promise((function(r, n) {
        var i = 0;
        var o = {
          resolved: !1
        };
        var a = new Array(t.length).fill(void 0);
        var s = new Array(t.length).fill(void 0);
        var u;
        t.forEach((function(c, h) {
          c.then((function(t) {
            s[h] = t;
          })).catch((function(t) {
            a[h] = t;
          })).finally((function() {
            o.resolved || e(s.slice(0), o).then((function(t) {
              o.resolved = !0, r(t);
            })).catch((function(t) {
              u = t;
            })).finally((function(e) {
              if ((i += 1) === t.length) {
                var r = Object.values(s.reduce((function(t, e) {
                  var r;
                  var n = e || {}, i = n.id, o = n.error;
                  return (null == o || null === (r = o.data) || void 0 === r ? void 0 : r.length) > 0 && (o.data.startsWith('Error occurred while verifying params') ? t[i] = function(t) {
                    return t.charAt(0).toUpperCase() + t.slice(1);
                  }(o.data) : t[i] = o.data), t;
                }), {}));
                if (r.length > 0) {
                  var o = r.length > 1 ? "\n".concat(r.map((function(t) {
                    return "• ".concat(t);
                  })).join('\n')) : r[0];
                  n(new Error(o));
                } else {
                  var c;
                  n(new xt({
                    errors: a,
                    responses: s,
                    predicate: (null === (c = u) || void 0 === c ? void 0 : c.message) || u
                  }));
                }
              }
            }));
          }));
        }));
      }));
    };
    function Et(t, e) {
      var r = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(t);
        e && (n = n.filter((function(e) {
          return Object.getOwnPropertyDescriptor(t, e).enumerable;
        }))), r.push.apply(r, n);
      }
      return r;
    }
    function Pt(t) {
      for (var e = 1; e < arguments.length; e++) {
        var r = null != arguments[e] ? arguments[e] : {};
        e % 2 ? Et(Object(r), !0).forEach((function(e) {
          i(t, e, r[e]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : Et(Object(r)).forEach((function(e) {
          Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
        }));
      }
      return t;
    }
    function jt(t) {
      var e = function() {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {}))), !0;
        } catch (t) {
          return !1;
        }
      }();
      return function() {
        var r, n = mt(t);
        if (e) {
          var i = mt(this).constructor;
          r = Reflect.construct(n, arguments, i);
        } else r = n.apply(this, arguments);
        return vt(this, r);
      };
    }
    var At = function(t) {
      pt(r, t);
      var e = jt(r);
      function r() {
        return tt(this, r), e.apply(this, arguments);
      }
      return rt(r);
    }(bt(Error));
    var Ct = function t(e, r) {
      var n = e;
      if ('number' == typeof n && (n = Array.from({
        length: n
      }, (function(t, e) {
        return e;
      }))), r > n.length || r <= 0) return [];
      if (r === n.length) return [ n ];
      if (1 === r) return n.reduce((function(t, e) {
        return [].concat(_t(t), [ [ e ] ]);
      }), []);
      var i = [];
      var o = [];
      for (var a = 0; a <= n.length - r + 1; a += 1) {
        o = t(n.slice(a + 1), r - 1);
        for (var s = 0; s < o.length; s += 1) i.push([ n[a] ].concat(_t(o[s])));
      }
      return i;
    };
    var Rt = function(t, e) {
      var r = {};
      for (var n = 0; n < t.length; n += 1) {
        var i = ht()(t[n]);
        if (r[i] = r[i] ? r[i] + 1 : 1, r[i] === e) return t[n];
      }
    };
    var Tt = function() {
      var t = Q(it().mark((function t(e, r, n) {
        var i;
        return it().wrap((function(t) {
          for (;;) switch (t.prev = t.next) {
           case 0:
            return i = e.map((function(t) {
              return _(t, M('VerifierLookupRequest', {
                verifier: r,
                verifier_id: n.toString()
              })).catch((function(t) {
                return St.error('lookup request failed', t);
              }));
            })), t.abrupt("return", Ot(i, (function(t) {
              var r = t.filter((function(t) {
                return t;
              }));
              var n = Rt(r.map((function(t) {
                return t && t.error;
              })), 1 + ~~(e.length / 2));
              var i = Rt(r.map((function(t) {
                return t && t.result;
              })), 1 + ~~(e.length / 2));
              return i || n ? Promise.resolve({
                keyResult: i,
                errorResult: n
              }) : Promise.reject(new Error("invalid results ".concat(JSON.stringify(t))));
            })));

           case 2:
           case "end":
            return t.stop();
          }
        }), t);
      })));
      return function(e, r, n) {
        return t.apply(this, arguments);
      };
    }();
    var It = function(t, e, r, n) {
      return new Promise((function(i, o) {
        setTimeout((function() {
          Tt(t, e, r).then(i).catch(o);
        }), n);
      }));
    };
    var Lt = function() {
      var t = Q(it().mark((function t(e, r, n, i, o, a) {
        var s, u, c, h;
        return it().wrap((function(t) {
          for (;;) switch (t.prev = t.next) {
           case 0:
            if (void 0 === n ? (s = Math.floor(Math.random() * e.length), u = s) : s = n % e.length, s !== i) {
              t.next = 3;
              break;
            }
            throw new Error('Looped through all');

           case 3:
            return void 0 !== i && (u = i), c = M('KeyAssign', {
              verifier: o,
              verifier_id: a.toString()
            }), t.prev = 5, t.next = 8, _('https://signer.tor.us/api/sign', c, {
              headers: {
                pubKeyX: r[s].X,
                pubKeyY: r[s].Y
              }
            }, {
              useAPIKey: !0
            });

           case 8:
            return h = t.sent, t.abrupt("return", _(e[s], Pt(Pt({}, c), h), {
              headers: {
                'Content-Type': 'application/json; charset=utf-8'
              }
            }));

           case 12:
            if (t.prev = 12, t.t0 = t.catch(5), St.error(t.t0), ![ 'Timed out', 'TypeError: Failed to fetch', 'TypeError: cancelled', 'TypeError: NetworkError when attempting to fetch resource.' ].includes(t.t0.message)) {
              t.next = 18;
              break;
            }
            return t.abrupt("return", Lt(e, r, s + 1, u, o, a));

           case 18:
            throw new Error("Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \n\n    ".concat(t.t0.message || ''));

           case 19:
           case "end":
            return t.stop();
          }
        }), t, null, [ [ 5, 12 ] ]);
      })));
      return function(e, r, n, i, o, a) {
        return t.apply(this, arguments);
      };
    }();
    function Dt(t, e) {
      var r = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(t);
        e && (n = n.filter((function(e) {
          return Object.getOwnPropertyDescriptor(t, e).enumerable;
        }))), r.push.apply(r, n);
      }
      return r;
    }
    function qt(t) {
      for (var e = 1; e < arguments.length; e++) {
        var r = null != arguments[e] ? arguments[e] : {};
        e % 2 ? Dt(Object(r), !0).forEach((function(e) {
          i(t, e, r[e]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : Dt(Object(r)).forEach((function(e) {
          Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
        }));
      }
      return t;
    }
    var Ut = function() {
      function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = e.enableOneKey, n = void 0 !== r && r, i = e.metadataHost, o = void 0 === i ? 'https://metadata.tor.us' : i, a = e.allowHost, s = void 0 === a ? 'https://signer.tor.us/api/allow' : a, u = e.serverTimeOffset, c = void 0 === u ? 0 : u;
        tt(this, t), this.ec = new ut.ec('secp256k1'), this.metadataHost = o, this.allowHost = s, this.enableOneKey = n, this.serverTimeOffset = c || 0;
      }
      return rt(t, [ {
        key: "getUserTypeAndAddress",
        value: function() {
          var t = Q(it().mark((function t(e, r, n) {
            var i, o, a, s, u, c, h, l, d, f, p, v, m, g, y, b, w, _, M, S, k, x = arguments;
            return it().wrap((function(t) {
              for (;;) switch (t.prev = t.next) {
               case 0:
                return i = n.verifier, o = n.verifierId, a = x.length > 3 && void 0 !== x[3] && x[3], t.next = 4, Tt(e, i, o);

               case 4:
                if (t.t0 = t.sent, t.t0) {
                  t.next = 7;
                  break;
                }
                t.t0 = {};

               case 7:
                if (s = t.t0, u = s.keyResult, c = s.errorResult, h = !1, !c || !JSON.stringify(c).includes('Verifier + VerifierID has not yet been assigned')) {
                  t.next = 26;
                  break;
                }
                if (a) {
                  t.next = 14;
                  break;
                }
                throw new Error('Verifier + VerifierID has not yet been assigned');

               case 14:
                return t.next = 16, Lt(e, r, void 0, void 0, i, o);

               case 16:
                return t.next = 18, It(e, i, o, 1e3);

               case 18:
                if (t.t1 = t.sent, t.t1) {
                  t.next = 21;
                  break;
                }
                t.t1 = {};

               case 21:
                d = t.t1, l = d.keyResult, h = !0, t.next = 31;
                break;

               case 26:
                if (!u) {
                  t.next = 30;
                  break;
                }
                l = u, t.next = 31;
                break;

               case 30:
                throw new Error("node results do not match at first lookup ".concat(JSON.stringify(u || {}), ", ").concat(JSON.stringify(c || {})));

               case 31:
                if (!l) {
                  t.next = 61;
                  break;
                }
                return f = l.keys[0], p = f.pub_key_X, v = f.pub_key_Y, t.prev = 33, t.next = 37, this.getOrSetNonce(p, v, void 0, !h);

               case 37:
                _ = t.sent, m = _.typeOfUser, g = _.nonce, y = _.pubNonce, w = _.upgraded, g = new (st())(g || '0', 16), t.next = 48;
                break;

               case 45:
                throw t.prev = 45, t.t2 = t.catch(33), new At;

               case 48:
                if ('v1' !== m) {
                  t.next = 52;
                  break;
                }
                b = this.ec.keyFromPublic({
                  x: p.toString(16),
                  y: v.toString(16)
                }).getPublic().add(this.ec.keyFromPrivate(g.toString(16)).getPublic()), t.next = 57;
                break;

               case 52:
                if ('v2' !== m) {
                  t.next = 56;
                  break;
                }
                b = this.ec.keyFromPublic({
                  x: p.toString(16),
                  y: v.toString(16)
                }).getPublic().add(this.ec.keyFromPublic({
                  x: y.x,
                  y: y.y
                }).getPublic()), t.next = 57;
                break;

               case 56:
                throw new Error('getOrSetNonce should always return typeOfUser.');

               case 57:
                return M = b.getX().toString(16), S = b.getY().toString(16), k = this.generateAddressFromPubKey(b.getX(), b.getY()), t.abrupt("return", {
                  typeOfUser: m,
                  nonce: g,
                  pubNonce: y,
                  upgraded: w,
                  X: M,
                  Y: S,
                  address: k
                });

               case 61:
                throw new Error("node results do not match at final lookup ".concat(JSON.stringify(u || {}), ", ").concat(JSON.stringify(c || {})));

               case 62:
               case "end":
                return t.stop();
              }
            }), t, this, [ [ 33, 45 ] ]);
          })));
          return function(e, r, n) {
            return t.apply(this, arguments);
          };
        }()
      }, {
        key: "setCustomKey",
        value: function() {
          var t = Q(it().mark((function t(e) {
            var r, n, i, o, a, s, u, c, h;
            return it().wrap((function(t) {
              for (;;) switch (t.prev = t.next) {
               case 0:
                return r = e.privKeyHex, n = e.metadataNonce, i = e.torusKeyHex, o = e.customKeyHex, i ? a = new (st())(i, 16) : (s = new (st())(r, 16), 
                a = s.sub(n).umod(this.ec.curve.n)), u = new (st())(o, 16), c = u.sub(a).umod(this.ec.curve.n), h = this.generateMetadataParams(c.toString(16), a.toString(16)), 
                t.next = 7, this.setMetadata(h);

               case 7:
               case "end":
                return t.stop();
              }
            }), t, this);
          })));
          return function(e) {
            return t.apply(this, arguments);
          };
        }()
      }, {
        key: "retrieveShares",
        value: function() {
          var t = Q(it().mark((function t(e, r, n, i, o) {
            var a = this;
            var u, c, h, l, d, f, p, v, m, g = arguments;
            return it().wrap((function(t) {
              for (;;) switch (t.prev = t.next) {
               case 0:
                return u = g.length > 5 && void 0 !== g[5] ? g[5] : {}, c = [], t.next = 4, w(this.allowHost, {
                  headers: {
                    verifier: n,
                    verifier_id: i.verifier_id
                  }
                }, {
                  useAPIKey: !0
                });

               case 4:
                for (h = (0, ot.oq)(), l = (0, ot.rc)(h).toString('hex'), d = l.slice(2, 66), f = l.slice(66), p = (0, s.keccak256)(o), 
                v = 0; v < e.length; v += 1) m = _(e[v], M('CommitmentRequest', {
                  messageprefix: 'mug00',
                  tokencommitment: p.slice(2),
                  temppubx: d,
                  temppuby: f,
                  verifieridentifier: n
                })).catch((function(t) {
                  return St.error('commitment', t);
                })), c.push(m);
                return t.abrupt("return", Ot(c, (function(t) {
                  return t.filter((function(t) {
                    return !(!t || 'object' !== X(t)) && !t.error;
                  })).length >= 3 * ~~(e.length / 4) + 1 ? Promise.resolve(t) : Promise.reject(new Error("invalid ".concat(JSON.stringify(t))));
                })).then((function(t) {
                  var s = [];
                  var c = [];
                  for (var l = 0; l < t.length; l += 1) t[l] && c.push(t[l].result);
                  for (var d = 0; d < e.length; d += 1) {
                    var f = _(e[d], M('ShareRequest', {
                      encrypted: 'yes',
                      item: [ qt(qt({}, i), {}, {
                        idtoken: o,
                        nodesignatures: c,
                        verifieridentifier: n
                      }, u) ]
                    })).catch((function(t) {
                      return St.error('share req', t);
                    }));
                    s.push(f);
                  }
                  return Ot(s, function() {
                    var t = Q(it().mark((function t(n, i) {
                      var o, s, u, c, l, d, f, p, v, m, g, y;
                      return it().wrap((function(t) {
                        for (;;) switch (t.prev = t.next) {
                         case 0:
                          if (o = n.filter((function(t) {
                            return t;
                          })), s = Rt(n.map((function(t) {
                            return t && t.result && t.result.keys[0].PublicKey;
                          })), 1 + ~~(e.length / 2)), !(o.length >= 1 + ~~(e.length / 2) && s)) {
                            t.next = 25;
                            break;
                          }
                          for (u = [], c = [], l = 0; l < n.length; l += 1) n[l] && n[l].result && n[l].result.keys && n[l].result.keys.length > 0 ? (n[l].result.keys.sort((function(t, e) {
                            return new (st())(t.Index, 16).cmp(new (st())(e.Index, 16));
                          })), n[l].result.keys[0].Metadata ? (d = {
                            ephemPublicKey: Mt.from(n[l].result.keys[0].Metadata.ephemPublicKey, 'hex'),
                            iv: Mt.from(n[l].result.keys[0].Metadata.iv, 'hex'),
                            mac: Mt.from(n[l].result.keys[0].Metadata.mac, 'hex'),
                            mode: Mt.from(n[l].result.keys[0].Metadata.mode, 'hex')
                          }, u.push((0, ot.pe)(h, qt(qt({}, d), {}, {
                            ciphertext: Mt.from(atob(n[l].result.keys[0].Share).padStart(64, '0'), 'hex')
                          })).catch((function(t) {
                            return St.debug('share decryption', t);
                          })))) : u.push(Promise.resolve(Mt.from(n[l].result.keys[0].Share.padStart(64, '0'), 'hex')))) : u.push(Promise.resolve(void 0)), 
                          c.push(new (st())(r[l], 16));
                          return t.next = 8, Promise.all(u);

                         case 8:
                          if (f = t.sent, !i.resolved) {
                            t.next = 11;
                            break;
                          }
                          return t.abrupt("return", void 0);

                         case 11:
                          p = f.reduce((function(t, e, r) {
                            return e && t.push({
                              index: c[r],
                              value: new (st())(e)
                            }), t;
                          }), []), v = Ct(p.length, 1 + ~~(e.length / 2)), g = function(t) {
                            var e = v[t];
                            var r = p.filter((function(t, r) {
                              return e.includes(r);
                            }));
                            var n = r.map((function(t) {
                              return t.value;
                            }));
                            var i = r.map((function(t) {
                              return t.index;
                            }));
                            var o = a.lagrangeInterpolation(n, i);
                            var u = (0, ot.rc)(Mt.from(o.toString(16, 64), 'hex')).toString('hex');
                            var c = u.slice(2, 66);
                            var h = u.slice(66);
                            if (0 === new (st())(c, 16).cmp(new (st())(s.X, 16)) && 0 === new (st())(h, 16).cmp(new (st())(s.Y, 16))) return m = o, 
                            "break";
                          }, y = 0;

                         case 15:
                          if (!(y < v.length)) {
                            t.next = 22;
                            break;
                          }
                          if ("break" !== g(y)) {
                            t.next = 19;
                            break;
                          }
                          return t.abrupt("break", 22);

                         case 19:
                          y += 1, t.next = 15;
                          break;

                         case 22:
                          if (void 0 !== m) {
                            t.next = 24;
                            break;
                          }
                          throw new Error('could not derive private key');

                         case 24:
                          return t.abrupt("return", m);

                         case 25:
                          throw new Error('invalid');

                         case 26:
                         case "end":
                          return t.stop();
                        }
                      }), t);
                    })));
                    return function(e, r) {
                      return t.apply(this, arguments);
                    };
                  }());
                })).then(function() {
                  var t = Q(it().mark((function t(e) {
                    var r, n, i, o, s, u, c, h;
                    return it().wrap((function(t) {
                      for (;;) switch (t.prev = t.next) {
                       case 0:
                        if (r = e, n = (0, ot.rc)(Mt.from(r.toString(16, 64), 'hex')).toString('hex'), i = n.slice(2, 66), o = n.slice(66), !a.enableOneKey) {
                          t.next = 12;
                          break;
                        }
                        return t.next = 7, a.getNonce(i, o, r);

                       case 7:
                        u = t.sent, c = u.nonce, s = new (st())(c || '0', 16), t.next = 15;
                        break;

                       case 12:
                        return t.next = 14, a.getMetadata({
                          pub_key_X: i,
                          pub_key_Y: o
                        });

                       case 14:
                        s = t.sent;

                       case 15:
                        return St.debug('> torus.js/retrieveShares', {
                          privKey: r.toString(16),
                          metadataNonce: s.toString(16)
                        }), r = r.add(s).umod(a.ec.curve.n), h = a.generateAddressFromPrivKey(r), St.debug('> torus.js/retrieveShares', {
                          ethAddress: h,
                          privKey: r.toString(16)
                        }), t.abrupt("return", {
                          ethAddress: h,
                          privKey: r.toString('hex', 64),
                          metadataNonce: s
                        });

                       case 20:
                       case "end":
                        return t.stop();
                      }
                    }), t);
                  })));
                  return function(e) {
                    return t.apply(this, arguments);
                  };
                }()));

               case 11:
               case "end":
                return t.stop();
              }
            }), t, this);
          })));
          return function(e, r, n, i, o) {
            return t.apply(this, arguments);
          };
        }()
      }, {
        key: "getMetadata",
        value: function() {
          var t = Q(it().mark((function t(e, r) {
            var n;
            return it().wrap((function(t) {
              for (;;) switch (t.prev = t.next) {
               case 0:
                return t.prev = 0, t.next = 3, _("".concat(this.metadataHost, "/get"), e, r, {
                  useAPIKey: !0
                });

               case 3:
                if ((n = t.sent) && n.message) {
                  t.next = 6;
                  break;
                }
                return t.abrupt("return", new (st())(0));

               case 6:
                return t.abrupt("return", new (st())(n.message, 16));

               case 9:
                return t.prev = 9, t.t0 = t.catch(0), St.error('get metadata error', t.t0), t.abrupt("return", new (st())(0));

               case 13:
               case "end":
                return t.stop();
              }
            }), t, this, [ [ 0, 9 ] ]);
          })));
          return function(e, r) {
            return t.apply(this, arguments);
          };
        }()
      }, {
        key: "generateMetadataParams",
        value: function(t, e) {
          var r = this.ec.keyFromPrivate(e.toString('hex', 64));
          var n = {
            data: t,
            timestamp: new (st())(~~(this.serverTimeOffset + Date.now() / 1e3)).toString(16)
          };
          var i = r.sign((0, s.keccak256)(ht()(n)).slice(2));
          return {
            pub_key_X: r.getPublic().getX().toString('hex'),
            pub_key_Y: r.getPublic().getY().toString('hex'),
            set_data: n,
            signature: Mt.from(i.r.toString(16, 64) + i.s.toString(16, 64) + new (st())(i.v).toString(16, 2), 'hex').toString('base64')
          };
        }
      }, {
        key: "setMetadata",
        value: function() {
          var t = Q(it().mark((function t(e, r) {
            var n;
            return it().wrap((function(t) {
              for (;;) switch (t.prev = t.next) {
               case 0:
                return t.prev = 0, t.next = 3, _("".concat(this.metadataHost, "/set"), e, r, {
                  useAPIKey: !0
                });

               case 3:
                return n = t.sent, t.abrupt("return", n.message);

               case 7:
                return t.prev = 7, t.t0 = t.catch(0), St.error('set metadata error', t.t0), t.abrupt("return", '');

               case 11:
               case "end":
                return t.stop();
              }
            }), t, this, [ [ 0, 7 ] ]);
          })));
          return function(e, r) {
            return t.apply(this, arguments);
          };
        }()
      }, {
        key: "lagrangeInterpolation",
        value: function(t, e) {
          if (t.length !== e.length) return null;
          var r = new (st())(0);
          for (var n = 0; n < t.length; n += 1) {
            var i = new (st())(1);
            var o = new (st())(1);
            for (var a = 0; a < t.length; a += 1) if (n !== a) {
              i = (i = i.mul(e[a].neg())).umod(this.ec.curve.n);
              var s = e[n].sub(e[a]);
              s = s.umod(this.ec.curve.n), o = o.mul(s).umod(this.ec.curve.n);
            }
            var u = i.mul(o.invm(this.ec.curve.n)).umod(this.ec.curve.n);
            u = u.mul(t[n]).umod(this.ec.curve.n), r = r.add(u);
          }
          return r.umod(this.ec.curve.n);
        }
      }, {
        key: "generateAddressFromPrivKey",
        value: function(t) {
          var e = this.ec.keyFromPrivate(t.toString('hex', 64), 'hex').getPublic().encode('hex').slice(2);
          var r = "0x".concat((0, s.keccak256)(Mt.from(e, 'hex')).slice(26));
          return (0, s.toChecksumAddress)(r);
        }
      }, {
        key: "generateAddressFromPubKey",
        value: function(t, e) {
          var r = this.ec.keyFromPublic({
            x: t.toString('hex', 64),
            y: e.toString('hex', 64)
          }).getPublic().encode('hex').slice(2);
          var n = "0x".concat((0, s.keccak256)(Mt.from(r, 'hex')).slice(26));
          return (0, s.toChecksumAddress)(n);
        }
      }, {
        key: "getPublicAddress",
        value: function() {
          var t = Q(it().mark((function t(e, r, n) {
            var i, o, a, s, u, c, h, l, d, f, p, v, m, g, y, b, w, _, M, S, k = arguments;
            return it().wrap((function(t) {
              for (;;) switch (t.prev = t.next) {
               case 0:
                return i = n.verifier, o = n.verifierId, a = k.length > 3 && void 0 !== k[3] && k[3], St.debug('> torus.js/getPublicAddress', {
                  endpoints: e,
                  torusNodePubs: r,
                  verifier: i,
                  verifierId: o,
                  isExtended: a
                }), u = !1, t.next = 6, Tt(e, i, o);

               case 6:
                if (t.t0 = t.sent, t.t0) {
                  t.next = 9;
                  break;
                }
                t.t0 = {};

               case 9:
                if (c = t.t0, h = c.keyResult, !(l = c.errorResult) || !JSON.stringify(l).includes('Verifier + VerifierID has not yet been assigned')) {
                  t.next = 25;
                  break;
                }
                return t.next = 15, Lt(e, r, void 0, void 0, i, o);

               case 15:
                return t.next = 17, It(e, i, o, 1e3);

               case 17:
                if (t.t1 = t.sent, t.t1) {
                  t.next = 20;
                  break;
                }
                t.t1 = {};

               case 20:
                d = t.t1, s = d.keyResult, u = !0, t.next = 30;
                break;

               case 25:
                if (!h) {
                  t.next = 29;
                  break;
                }
                s = h, t.next = 30;
                break;

               case 29:
                throw new Error("node results do not match at first lookup ".concat(JSON.stringify(h || {}), ", ").concat(JSON.stringify(l || {})));

               case 30:
                if (St.debug('> torus.js/getPublicAddress', {
                  finalKeyResult: s,
                  isNewKey: u
                }), !s) {
                  t.next = 72;
                  break;
                }
                if (p = s.keys[0], v = p.pub_key_X, m = p.pub_key_Y, !this.enableOneKey) {
                  t.next = 60;
                  break;
                }
                return t.prev = 34, t.next = 38, this.getOrSetNonce(v, m, void 0, !u);

               case 38:
                M = t.sent, g = M.typeOfUser, y = M.nonce, b = M.pubNonce, _ = M.upgraded, y = new (st())(y || '0', 16), t.next = 49;
                break;

               case 46:
                throw t.prev = 46, t.t2 = t.catch(34), new At;

               case 49:
                if ('v1' !== g) {
                  t.next = 53;
                  break;
                }
                w = this.ec.keyFromPublic({
                  x: v.toString(16),
                  y: m.toString(16)
                }).getPublic().add(this.ec.keyFromPrivate(y.toString(16)).getPublic()), t.next = 58;
                break;

               case 53:
                if ('v2' !== g) {
                  t.next = 57;
                  break;
                }
                w = _ ? this.ec.keyFromPublic({
                  x: v.toString(16),
                  y: m.toString(16)
                }).getPublic() : this.ec.keyFromPublic({
                  x: v.toString(16),
                  y: m.toString(16)
                }).getPublic().add(this.ec.keyFromPublic({
                  x: b.x,
                  y: b.y
                }).getPublic()), t.next = 58;
                break;

               case 57:
                throw new Error('getOrSetNonce should always return typeOfUser.');

               case 58:
                t.next = 65;
                break;

               case 60:
                return g = 'v1', t.next = 63, this.getMetadata({
                  pub_key_X: v,
                  pub_key_Y: m
                });

               case 63:
                y = t.sent, w = this.ec.keyFromPublic({
                  x: v.toString(16),
                  y: m.toString(16)
                }).getPublic().add(this.ec.keyFromPrivate(y.toString(16)).getPublic());

               case 65:
                if (v = w.getX().toString(16), m = w.getY().toString(16), S = this.generateAddressFromPubKey(w.getX(), w.getY()), St.debug('> torus.js/getPublicAddress', {
                  X: v,
                  Y: m,
                  address: S,
                  typeOfUser: g,
                  nonce: null === (f = y) || void 0 === f ? void 0 : f.toString(16),
                  pubNonce: b
                }), a) {
                  t.next = 71;
                  break;
                }
                return t.abrupt("return", S);

               case 71:
                return t.abrupt("return", {
                  typeOfUser: g,
                  address: S,
                  X: v,
                  Y: m,
                  metadataNonce: y,
                  pubNonce: b
                });

               case 72:
                throw new Error("node results do not match at final lookup ".concat(JSON.stringify(h || {}), ", ").concat(JSON.stringify(l || {})));

               case 73:
               case "end":
                return t.stop();
              }
            }), t, this, [ [ 34, 46 ] ]);
          })));
          return function(e, r, n) {
            return t.apply(this, arguments);
          };
        }()
      }, {
        key: "getOrSetNonce",
        value: function() {
          var t = Q(it().mark((function t(e, r, n) {
            var i, o, a, s = arguments;
            return it().wrap((function(t) {
              for (;;) switch (t.prev = t.next) {
               case 0:
                return i = s.length > 3 && void 0 !== s[3] && s[3], a = i ? 'getNonce' : 'getOrSetNonce', o = n ? this.generateMetadataParams(a, n) : {
                  pub_key_X: e,
                  pub_key_Y: r,
                  set_data: {
                    data: a
                  }
                }, t.abrupt("return", _("".concat(this.metadataHost, "/get_or_set_nonce"), o, void 0, {
                  useAPIKey: !0
                }));

               case 4:
               case "end":
                return t.stop();
              }
            }), t, this);
          })));
          return function(e, r, n) {
            return t.apply(this, arguments);
          };
        }()
      }, {
        key: "getNonce",
        value: function() {
          var t = Q(it().mark((function t(e, r, n) {
            return it().wrap((function(t) {
              for (;;) switch (t.prev = t.next) {
               case 0:
                return t.abrupt("return", this.getOrSetNonce(e, r, n, !0));

               case 1:
               case "end":
                return t.stop();
              }
            }), t, this);
          })));
          return function(e, r, n) {
            return t.apply(this, arguments);
          };
        }()
      }, {
        key: "getPostboxKeyFrom1OutOf1",
        value: function(t, e) {
          var r = new (st())(t, 16);
          var n = new (st())(e, 16);
          return r.sub(n).umod(this.ec.curve.n).toString('hex');
        }
      } ], [ {
        key: "enableLogging",
        value: function() {
          var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
          t ? St.enableAll() : St.disableAll();
        }
      }, {
        key: "setAPIKey",
        value: function(t) {
          y(t);
        }
      }, {
        key: "setEmbedHost",
        value: function(t) {
          g(t);
        }
      }, {
        key: "isGetOrSetNonceError",
        value: function(t) {
          return t instanceof At;
        }
      } ]), t;
    }();
    var Nt = r(12724);
    var Bt = r(55863);
    var Ft = r(64063);
    var Wt = r.n(Ft);
    function Vt(t) {
      return null !== t && 'object' == typeof t && 'function' == typeof t.pipe;
    }
    function Kt(t) {
      return function(t) {
        return Vt(t) && !1 !== t.writable && 'function' == typeof t._write && 'object' == typeof t._writableState;
      }(t) && function(t) {
        return Vt(t) && !1 !== t.readable && 'function' == typeof t._read && 'object' == typeof t._readableState;
      }(t);
    }
    var Ht = r(23482);
    var zt = r.n(Ht);
    const Jt = "google", Yt = "facebook", Gt = "twitch", Zt = "reddit", Xt = "discord";
    const $t = {
      [Jt]: "tkey-google",
      [Yt]: "tkey-facebook",
      [Gt]: "tkey-twitch",
      [Zt]: "tkey-reddit",
      [Xt]: "tkey-discord"
    };
    const Qt = {
      PRODUCTION: "production",
      DEVELOPMENT: "development",
      BINANCE: "binance",
      TESTING: "testing",
      LRC: "lrc",
      BETA: "beta"
    };
    const te = {
      BOTTOM_LEFT: "bottom-left",
      TOP_LEFT: "top-left",
      BOTTOM_RIGHT: "bottom-right",
      TOP_RIGHT: "top-right"
    };
    var ee = {
      supportedVerifierList: [ Jt, Zt, Xt ],
      paymentProviders: {
        ["rampnetwork"]: {
          line1: "Debit Card/ Apple Pay/ Bank transfer",
          line2: "0.49% - 2.9%",
          line3: "5,000€/purchase, 20,000€/mo",
          supportPage: "https://instant.ramp.network/",
          minOrderValue: 50,
          maxOrderValue: 2e4,
          validCurrencies: [ "GBP", "EUR", "USD" ],
          validCryptoCurrencies: [ "ETH", "DAI", "USDC", "BSC_BNB" ],
          includeFees: !0,
          enforceMax: !1
        },
        ["moonpay"]: {
          line1: "Credit / Debit Card / Apple Pay",
          line2: "4.5% or 5 USD",
          line3: "2,000€/day, 10,000€/mo",
          supportPage: "https://help.moonpay.io/en/",
          minOrderValue: 24.99,
          maxOrderValue: 5e4,
          validCurrencies: [ "USD", "EUR", "GBP", "AUD", "CAD", "SGD", "RUB" ],
          validCryptoCurrencies: [ "ETH", "DAI", "TUSD", "USDC", "USDT", "BNB_BSC", "BUSD_BSC" ],
          includeFees: !0,
          enforceMax: !1
        },
        ["wyre"]: {
          line1: "Apple Pay/ Debit/ Credit Card",
          line2: "4.9% + 30¢ or 5 USD",
          line3: "$250/day",
          supportPage: "https://support.sendwyre.com/en/",
          minOrderValue: 5,
          maxOrderValue: 500,
          validCurrencies: [ "USD", "AUD", "CAD", "GBP", "EUR" ],
          validCryptoCurrencies: [ "ETH", "DAI", "USDC", "USDT" ],
          includeFees: !1,
          enforceMax: !1
        },
        ["xanpool"]: {
          line1: "PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ VietelPay/ DuitNow",
          line2: "2.5% buying, 3% selling",
          line3: "$2,500 / day",
          supportPage: "mailto:support@xanpool.com",
          minOrderValue: 100,
          maxOrderValue: 2500,
          validCurrencies: [ "SGD", "HKD", "MYR", "PHP", "INR", "VND", "THB", "IDR" ],
          validCryptoCurrencies: [ "ETH", "USDT" ],
          includeFees: !0,
          sell: !0,
          enforceMax: !1
        },
        ["mercuryo"]: {
          line1: "Credit/ Debit Card/ Apple Pay",
          line2: "3.95% or 4 USD",
          line3: "10,000€/day, 25,000€/mo",
          supportPage: "mailto:support@mercuryo.io",
          minOrderValue: 30,
          maxOrderValue: 5e3,
          validCurrencies: [ "USD", "EUR", "RUB", "TRY", "GBP", "UAH" ],
          validCryptoCurrencies: [ "ETH", "DAI", "BAT", "USDT", "OKB" ],
          includeFees: !0,
          enforceMax: !1
        },
        ["transak"]: {
          line1: "Credit/ Debit Card/ <br/>Bank Transfer (sepa/gbp)",
          line2: "0.99% - 5.5% or 5 USD",
          line3: "500€/day",
          supportPage: "https://support.transak.com/hc/en-US",
          minOrderValue: 20,
          maxOrderValue: 500,
          validCurrencies: [ "USD", "EUR", "GBP", "AUD", "CAD", "SGD" ],
          validCryptoCurrencies: [ "ETH", "DAI", "USDC", "USDT" ],
          includeFees: !0,
          enforceMax: !1
        }
      },
      api: "https://api.tor.us",
      translations: {
        en: {
          embed: {
            continue: "Continue",
            actionRequired: "Authorization required",
            pendingAction: "Click continue to proceed with your request in a popup",
            cookiesRequired: "Cookies Required",
            enableCookies: "Please enable cookies in your browser preferences to access Torus",
            clickHere: "More Info"
          }
        },
        de: {
          embed: {
            continue: "Fortsetzen",
            actionRequired: "Autorisierung erforderlich",
            pendingAction: "Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren",
            cookiesRequired: "Cookies benötigt",
            enableCookies: "Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen",
            clickHere: "Mehr Info"
          }
        },
        ja: {
          embed: {
            continue: "継続する",
            actionRequired: "認証が必要です",
            pendingAction: "続行をクリックして、ポップアップでリクエストを続行します",
            cookiesRequired: "必要なクッキー",
            enableCookies: "Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。",
            clickHere: "詳しくは"
          }
        },
        ko: {
          embed: {
            continue: "계속하다",
            actionRequired: "승인 필요",
            pendingAction: "팝업에서 요청을 진행하려면 계속을 클릭하십시오.",
            cookiesRequired: "쿠키 필요",
            enableCookies: "브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.",
            clickHere: "더 많은 정보"
          }
        },
        zh: {
          embed: {
            continue: "继续",
            actionRequired: "需要授权",
            pendingAction: "单击继续以在弹出窗口中继续您的请求",
            cookiesRequired: "必填Cookie",
            enableCookies: "请在您的浏览器首选项中启用cookie以访问Torus。",
            clickHere: "更多信息"
          }
        }
      },
      prodTorusUrl: "",
      localStorageKey: "torus-".concat(window.location.hostname)
    };
    const re = t => new Promise(((e, r) => {
      null != window.document.body ? Promise.resolve(t()).then(e).catch(r) : window.document.addEventListener("DOMContentLoaded", (() => {
        Promise.resolve(t()).then(e).catch(r);
      }));
    }));
    const ne = t => {
      const e = window.document.createElement("template");
      const r = t.trim();
      return e.innerHTML = r, e.content.firstChild;
    };
    const ie = (t, e, r) => {
      const n = i => {
        r(i), t.removeListener(e, n);
      };
      t.on(e, n);
    };
    async function oe() {
      return new Promise((t => {
        "loading" !== document.readyState ? t() : function(t, e, r) {
          for (var n = arguments.length, i = new Array(n > 3 ? n - 3 : 0), o = 3; o < n; o++) i[o - 3] = arguments[o];
          const a = () => {
            r(...i), t.removeEventListener(e, a);
          };
          t.addEventListener(e, a);
        }(document, "DOMContentLoaded", t);
      }));
    }
    var ae = dt().getLogger("torus-embed");
    var se = {
      errors: {
        disconnected: () => "Torus: Lost connection to Torus.",
        permanentlyDisconnected: () => "Torus: Disconnected from iframe. Page reload required.",
        sendSiteMetadata: () => "Torus: Failed to send site metadata. This is an internal error, please report this bug.",
        unsupportedSync: t => "Torus: The Torus Ethereum provider does not support synchronous methods like ".concat(t, " without a callback parameter."),
        invalidDuplexStream: () => "Must provide a Node.js-style duplex stream.",
        invalidOptions: (t, e) => "Invalid options. Received: { maxEventListeners: ".concat(t, ", shouldSendMetadata: ").concat(e, " }"),
        invalidRequestArgs: () => "Expected a single, non-array, object argument.",
        invalidRequestMethod: () => "'args.method' must be a non-empty string.",
        invalidRequestParams: () => "'args.params' must be an object or array if provided.",
        invalidLoggerObject: () => "'args.logger' must be an object if provided.",
        invalidLoggerMethod: t => "'args.logger' must include required method '".concat(t, "'.")
      },
      info: {
        connected: t => "Torus: Connected to chain with ID \"".concat(t, "\".")
      },
      warnings: {
        enableDeprecation: "Torus: \"\"ethereum.enable()\" is deprecated and may be removed in the future. Please use \"ethereum.send(\"eth_requestAccounts\")\" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102",
        sendDeprecation: "Torus: \"ethereum.send(...)\" is deprecated and may be removed in the future. Please use \"ethereum.sendAsync(...)\" or \"ethereum.request(...)\" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193",
        events: {
          close: "Torus: The event \"close\" is deprecated and may be removed in the future. Please use \"disconnect\" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193",
          data: "Torus: The event \"data\" is deprecated and will be removed in the future.Use \"message\" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message",
          networkChanged: "Torus: The event \"networkChanged\" is deprecated and may be removed in the future. Please use \"chainChanged\" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193",
          notification: "Torus: The event \"notification\" is deprecated and may be removed in the future. Please use \"message\" instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193"
        },
        publicConfigStore: 'Torus: The property "publicConfigStore" is deprecated and WILL be removed in the future.'
      }
    };
    const {paymentProviders: ue} = ee;
    function ce(t, e, r) {
      let n = "MetaMask: Lost connection to \"".concat(t, "\".");
      null != e && e.stack && (n += "\n".concat(e.stack)), ae.warn(n), r && r.listenerCount("error") > 0 && r.emit("error", n);
    }
    const he = () => Math.random().toString(36).slice(2);
    const le = async (t, e) => {
      let r;
      let n;
      const i = "1.20.2";
      let o = e.version || i;
      try {
        if (("binance" === t || "production" === t) && !e.version) {
          let t;
          t = ee.prodTorusUrl ? {
            data: ee.prodTorusUrl
          } : await w("".concat(ee.api, "/latestversion?name=@toruslabs/torus-embed&version=").concat(i), {}, {
            useAPIKey: !0
          }), o = t.data, ee.prodTorusUrl = t.data;
        }
      } catch (a) {
        ae.error(a, "unable to fetch latest version");
      }
      switch (ae.info("version used: ", o), t) {
       case "binance":
        r = "https://binance.tor.us/v".concat(o), n = "info";
        break;

       case "testing":
        r = "https://testing.tor.us", n = "debug";
        break;

       case "lrc":
        r = "https://lrc.tor.us", n = "debug";
        break;

       case "beta":
        r = "https://beta.tor.us", n = "debug";
        break;

       case "development":
        r = "http://localhost:4050", n = "debug";
        break;

       default:
        r = "https://app.tor.us/v".concat(o), n = "error";
      }
      return {
        torusUrl: r,
        logLevel: n
      };
    };
    const de = () => {
      let t = window.navigator.language || "en-US";
      const e = t.split("-");
      return t = Object.prototype.hasOwnProperty.call(ee.translations, e[0]) ? e[0] : "en", t;
    };
    const fe = [ "eth_subscription" ];
    const pe = () => {};
    const ve = "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375";
    const me = "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450";
    function ge(t, e) {
      var r = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(t);
        e && (n = n.filter((function(e) {
          return Object.getOwnPropertyDescriptor(t, e).enumerable;
        }))), r.push.apply(r, n);
      }
      return r;
    }
    N.defaultMaxListeners = 100;
    const ye = function(t, e) {
      let r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
      return (n, i) => n || i.error ? e(n || i.error) : !r || Array.isArray(i) ? t(i) : t(i.result);
    };
    class be extends N {
      constructor(t) {
        let {maxEventListeners: e = 100, shouldSendMetadata: r = !0, jsonRpcStreamName: n = "provider"} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (super(), i(this, "chainId", void 0), i(this, "selectedAddress", void 0), i(this, "_rpcEngine", void 0), i(this, "networkVersion", void 0), 
        i(this, "shouldSendMetadata", void 0), i(this, "isTorus", void 0), i(this, "_publicConfigStore", void 0), i(this, "tryPreopenHandle", void 0), 
        i(this, "enable", void 0), i(this, "_state", void 0), i(this, "_jsonRpcConnection", void 0), i(this, "_sentWarnings", {
          enable: !1,
          experimentalMethods: !1,
          send: !1,
          publicConfigStore: !1,
          events: {
            close: !1,
            data: !1,
            networkChanged: !1,
            notification: !1
          }
        }), !Kt(t)) throw new Error(se.errors.invalidDuplexStream());
        this.isTorus = !0, this.setMaxListeners(e), this._state = function(t) {
          for (var e = 1; e < arguments.length; e++) {
            var r = null != arguments[e] ? arguments[e] : {};
            e % 2 ? ge(Object(r), !0).forEach((function(e) {
              i(t, e, r[e]);
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : ge(Object(r)).forEach((function(e) {
              Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
            }));
          }
          return t;
        }({}, be._defaultState), this.selectedAddress = null, this.networkVersion = null, this.chainId = null, this.shouldSendMetadata = r, 
        this._handleAccountsChanged = this._handleAccountsChanged.bind(this), this._handleChainChanged = this._handleChainChanged.bind(this), 
        this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this), this._handleConnect = this._handleConnect.bind(this), 
        this._handleDisconnect = this._handleDisconnect.bind(this), this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this), 
        this._sendSync = this._sendSync.bind(this), this._rpcRequest = this._rpcRequest.bind(this), this._warnOfDeprecation = this._warnOfDeprecation.bind(this), 
        this._initializeState = this._initializeState.bind(this), this.request = this.request.bind(this), this.send = this.send.bind(this), 
        this.sendAsync = this.sendAsync.bind(this);
        const o = new Z;
        I()(t, o, t, this._handleStreamDisconnect.bind(this, "MetaMask")), this._publicConfigStore = new Nt.ObservableStore({
          storageKey: "Metamask-Config"
        }), I()(o.createStream("publicConfig"), (0, Nt.storeAsStream)(this._publicConfigStore), ce.bind(this, "MetaMask PublicConfigStore")), 
        o.ignoreStream("phishing"), this.on("connect", (() => {
          this._state.isConnected = !0;
        }));
        const a = W();
        I()(a.stream, o.createStream(n), a.stream, this._handleStreamDisconnect.bind(this, "MetaMask RpcProvider"));
        const s = new H;
        s.push(V()), s.push(function() {
          return (t, e, r) => {
            "string" == typeof t.method && t.method || (e.error = Bt.Sy.rpc.invalidRequest({
              message: "The request 'method' must be a non-empty string.",
              data: t
            })), r((t => {
              const {error: r} = e;
              return r ? (ae.error("MetaMask - RPC Error: ".concat(r.message), r), t()) : t();
            }));
          };
        }()), s.push(a.middleware), this._rpcEngine = s, a.events.on("notification", (t => {
          const {method: e, params: r} = t;
          "wallet_accountsChanged" === e ? this._handleAccountsChanged(r) : "wallet_unlockStateChanged" === e ? this._handleUnlockStateChanged(r) : "wallet_chainChanged" === e ? this._handleChainChanged(r) : fe.includes(t.method) && (this.emit("data", t), 
          this.emit("notification", r.result), this.emit("message", {
            type: e,
            data: r
          }));
        }));
      }
      get publicConfigStore() {
        return this._sentWarnings.publicConfigStore || (ae.warn(se.warnings.publicConfigStore), this._sentWarnings.publicConfigStore = !0), 
        this._publicConfigStore;
      }
      isConnected() {
        return this._state.isConnected;
      }
      async request(t) {
        if (!t || "object" != typeof t || Array.isArray(t)) throw Bt.Sy.rpc.invalidRequest({
          message: se.errors.invalidRequestArgs(),
          data: t
        });
        const {method: e, params: r} = t;
        if ("string" != typeof e || 0 === e.length) throw Bt.Sy.rpc.invalidRequest({
          message: se.errors.invalidRequestMethod(),
          data: t
        });
        if (void 0 !== r && !Array.isArray(r) && ("object" != typeof r || null === r)) throw Bt.Sy.rpc.invalidRequest({
          message: se.errors.invalidRequestParams(),
          data: t
        });
        return new Promise(((t, n) => {
          this._rpcRequest({
            method: e,
            params: r
          }, ye(t, n));
        }));
      }
      sendAsync(t, e) {
        this._rpcRequest(t, e);
      }
      addListener(t, e) {
        return this._warnOfDeprecation(t), super.addListener(t, e);
      }
      on(t, e) {
        return this._warnOfDeprecation(t), super.on(t, e);
      }
      once(t, e) {
        return this._warnOfDeprecation(t), super.once(t, e);
      }
      prependListener(t, e) {
        return this._warnOfDeprecation(t), super.prependListener(t, e);
      }
      prependOnceListener(t, e) {
        return this._warnOfDeprecation(t), super.prependOnceListener(t, e);
      }
      async _initializeState() {
        try {
          const {accounts: t, chainId: e, isUnlocked: r, networkVersion: n} = await this.request({
            method: "wallet_getProviderState"
          });
          this.emit("connect", {
            chainId: e
          }), this._handleChainChanged({
            chainId: e,
            networkVersion: n
          }), this._handleUnlockStateChanged({
            accounts: t,
            isUnlocked: r
          }), this._handleAccountsChanged(t);
        } catch (t) {
          ae.error("MetaMask: Failed to get initial state. Please report this bug.", t);
        } finally {
          ae.info("initialized state"), this._state.initialized = !0, this.emit("_initialized");
        }
      }
      _rpcRequest(t, e) {
        let r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        let n = e;
        const i = t;
        if (!Array.isArray(i)) if (i.jsonrpc || (i.jsonrpc = "2.0"), "eth_accounts" === i.method || "eth_requestAccounts" === i.method) n = (t, n) => {
          this._handleAccountsChanged(n.result || [], "eth_accounts" === i.method, r), e(t, n);
        }; else if ("wallet_getProviderState" === i.method) return void this._rpcEngine.handle(t, n);
        this.tryPreopenHandle(i, n);
      }
      send(t, e) {
        return this._sentWarnings.send || (ae.warn(se.warnings.sendDeprecation), this._sentWarnings.send = !0), "string" != typeof t || e && !Array.isArray(e) ? t && "object" == typeof t && "function" == typeof e ? this._rpcRequest(t, e) : this._sendSync(t) : new Promise(((r, n) => {
          try {
            this._rpcRequest({
              method: t,
              params: e
            }, ye(r, n, !1));
          } catch (i) {
            n(i);
          }
        }));
      }
      _sendSync(t) {
        let e;
        switch (t.method) {
         case "eth_accounts":
          e = this.selectedAddress ? [ this.selectedAddress ] : [];
          break;

         case "eth_coinbase":
          e = this.selectedAddress || null;
          break;

         case "eth_uninstallFilter":
          this._rpcRequest(t, pe), e = !0;
          break;

         case "net_version":
          e = this.networkVersion || null;
          break;

         default:
          throw new Error(se.errors.unsupportedSync(t.method));
        }
        return {
          id: t.id,
          jsonrpc: t.jsonrpc,
          result: e
        };
      }
      _handleConnect(t) {
        this._state.isConnected || (this._state.isConnected = !0, this.emit("connect", {
          chainId: t
        }), ae.debug(se.info.connected(t)));
      }
      _handleDisconnect(t, e) {
        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !t) {
          let r;
          this._state.isConnected = !1, t ? (r = new Bt.Cg(1013, e || se.errors.disconnected()), ae.debug(r)) : (r = new Bt.Cg(1011, e || se.errors.permanentlyDisconnected()), 
          ae.error(r), this.chainId = null, this._state.accounts = null, this.selectedAddress = null, this._state.isUnlocked = !1, 
          this._state.isPermanentlyDisconnected = !0), this.emit("disconnect", r);
        }
      }
      _handleStreamDisconnect(t, e) {
        ce(t, e, this), this._handleDisconnect(!1, e ? e.message : void 0);
      }
      _handleAccountsChanged(t) {
        let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        let r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        let n = t;
        Array.isArray(n) || (ae.error("MetaMask: Received non-array accounts parameter. Please report this bug.", n), n = []);
        for (const i of t) if ("string" != typeof i) {
          ae.error("MetaMask: Received non-string account. Please report this bug.", t), n = [];
          break;
        }
        Wt()(this._state.accounts, n) || (e && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !r && ae.error('MetaMask: "eth_accounts" unexpectedly updated accounts. Please report this bug.', n), 
        this._state.accounts = n, this.emit("accountsChanged", n)), this.selectedAddress !== n[0] && (this.selectedAddress = n[0] || null);
      }
      _handleChainChanged() {
        let {chainId: t, networkVersion: e} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        t && e ? "loading" === e ? this._handleDisconnect(!0) : (this._handleConnect(t), t !== this.chainId && (this.chainId = t, 
        this._state.initialized && this.emit("chainChanged", this.chainId))) : ae.error("MetaMask: Received invalid network parameters. Please report this bug.", {
          chainId: t,
          networkVersion: e
        });
      }
      _handleUnlockStateChanged() {
        let {accounts: t, isUnlocked: e} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        "boolean" == typeof e ? e !== this._state.isUnlocked && (this._state.isUnlocked = e, this._handleAccountsChanged(t || [])) : ae.error("MetaMask: Received invalid isUnlocked parameter. Please report this bug.", {
          isUnlocked: e
        });
      }
      _warnOfDeprecation(t) {
        !1 === this._sentWarnings.events[t] && (ae.warn(se.warnings.events[t]), this._sentWarnings.events[t] = !0);
      }
    }
    i(be, "_defaultState", {
      accounts: null,
      isConnected: !1,
      isUnlocked: !1,
      initialized: !1,
      isPermanentlyDisconnected: !1,
      hasEmittedConnection: !1
    });
    const we = (t, e) => {
      const r = {};
      return t.algorithms.forEach((t => {
        r[t] = zt()(t).update(e, "utf8").digest("base64");
      })), r;
    };
    const _e = (t, e) => {
      const r = (t => ({
        algorithms: t.algorithms || [ "sha256" ],
        delimiter: t.delimiter || " ",
        full: t.full || !1
      }))(t);
      const n = {
        hashes: we(r, e),
        integrity: void 0
      };
      return n.integrity = ((t, e) => {
        let r = "";
        return r += Object.keys(e.hashes).map((t => "".concat(t, "-").concat(e.hashes[t]))).join(t.delimiter), r;
      })(r, n), r.full ? n : n.integrity;
    };
    class Me extends O.EventEmitter {
      constructor(t) {
        let {url: e, target: r, features: n} = t;
        super(), i(this, "url", void 0), i(this, "target", void 0), i(this, "features", void 0), i(this, "window", void 0), i(this, "windowTimer", void 0), 
        i(this, "iClosedWindow", void 0), this.url = e, this.target = r || "_blank", this.features = n || function() {
          const t = void 0 !== window.screenLeft ? window.screenLeft : window.screenX;
          const e = void 0 !== window.screenTop ? window.screenTop : window.screenY;
          const r = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;
          const n = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;
          const i = Math.abs((r - 1200) / 2 / 1 + t);
          const o = Math.abs((n - 700) / 2 / 1 + e);
          return "titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=".concat(700, ",width=").concat(1200, ",top=").concat(o, ",left=").concat(i);
        }(), this.window = void 0, this.windowTimer = void 0, this.iClosedWindow = !1, this._setupTimer();
      }
      _setupTimer() {
        this.windowTimer = Number(setInterval((() => {
          this.window && this.window.closed && (clearInterval(this.windowTimer), this.iClosedWindow || this.emit("close"), this.iClosedWindow = !1, 
          this.window = void 0), void 0 === this.window && clearInterval(this.windowTimer);
        }), 500));
      }
      open() {
        var t;
        return this.window = window.open(this.url.href, this.target, this.features), null !== (t = this.window) && void 0 !== t && t.focus && this.window.focus(), 
        Promise.resolve();
      }
      close() {
        this.iClosedWindow = !0, this.window && this.window.close();
      }
      redirect(t) {
        t ? window.location.replace(this.url.href) : window.location.href = this.url.href;
      }
    }
    function Se(t) {
      return new Promise(((e, r) => {
        try {
          const r = document.createElement("img");
          r.onload = () => e(!0), r.onerror = () => e(!1), r.src = t;
        } catch (n) {
          r(n);
        }
      }));
    }
    const ke = t => {
      const {document: e} = t;
      const r = e.querySelector('head > meta[property="og:site_name"]');
      if (r) return r.content;
      const n = e.querySelector('head > meta[name="title"]');
      return n ? n.content : e.title && e.title.length > 0 ? e.title : t.location.hostname;
    };
    async function xe(t) {
      const {document: e} = t;
      let r = e.querySelector('head > link[rel="shortcut icon"]');
      return r && await Se(r.href) ? r.href : (r = Array.from(e.querySelectorAll('head > link[rel="icon"]')).find((t => Boolean(t.href))), 
      r && await Se(r.href) ? r.href : null);
    }
    async function Oe(t) {
      try {
        const e = await (async () => ({
          name: ke(window),
          icon: await xe(window)
        }))();
        t.handle({
          jsonrpc: "2.0",
          id: he(),
          method: "wallet_sendDomainMetadata",
          params: e
        }, pe);
      } catch (e) {
        ae.error({
          message: se.errors.sendSiteMetadata(),
          originalError: e
        });
      }
    }
    const Ee = [ "host", "chainId", "networkName" ];
    function Pe(t, e) {
      var r = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(t);
        e && (n = n.filter((function(e) {
          return Object.getOwnPropertyDescriptor(t, e).enumerable;
        }))), r.push.apply(r, n);
      }
      return r;
    }
    function je(t) {
      for (var e = 1; e < arguments.length; e++) {
        var r = null != arguments[e] ? arguments[e] : {};
        e % 2 ? Pe(Object(r), !0).forEach((function(e) {
          i(t, e, r[e]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : Pe(Object(r)).forEach((function(e) {
          Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
        }));
      }
      return t;
    }
    const Ae = {
      [Jt]: !0,
      [Yt]: !0,
      [Zt]: !0,
      [Gt]: !0,
      [Xt]: !0
    };
    const Ce = "sha384-zML+Us0eHuOwF3fLkTwt8MUpAwXOl0TVe5oe454wPUfqPcu5Xqip20eaFDr1fLj3";
    const Re = [ "eth_sendTransaction", "eth_signTypedData", "eth_signTypedData_v3", "eth_signTypedData_v4", "personal_sign", "eth_getEncryptionPublicKey", "eth_decrypt" ];
    const Te = function(t) {
      let e;
      try {
        e = window[t];
        const r = "__storage_test__";
        return e.setItem(r, r), e.removeItem(r), !0;
      } catch (r) {
        return r && (22 === r.code || 1014 === r.code || "QuotaExceededError" === r.name || "NS_ERROR_DOM_QUOTA_REACHED" === r.name) && e && 0 !== e.length;
      }
    }("localStorage");
    !async function() {
      try {
        if ("undefined" == typeof document) return;
        const t = document.createElement("link");
        const {torusUrl: e} = await le("production", {
          check: !1,
          hash: Ce,
          version: ""
        });
        t.href = "".concat(e, "/popup"), t.crossOrigin = "anonymous", t.type = "text/html", t.rel = "prefetch", t.relList && t.relList.supports && t.relList.supports("prefetch") && document.head.appendChild(t);
      } catch (t) {
        ae.warn(t);
      }
    }();
    class Ie {
      constructor() {
        let {buttonPosition: t = te.BOTTOM_LEFT, modalZIndex: e = 99999, apiKey: r = "torus-default"} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        i(this, "buttonPosition", te.BOTTOM_LEFT), i(this, "torusUrl", void 0), i(this, "torusIframe", void 0), i(this, "styleLink", void 0), 
        i(this, "isLoggedIn", void 0), i(this, "isInitialized", void 0), i(this, "torusWidgetVisibility", void 0), i(this, "torusAlert", void 0), 
        i(this, "nodeDetailManager", void 0), i(this, "torusJs", void 0), i(this, "apiKey", void 0), i(this, "modalZIndex", void 0), 
        i(this, "alertZIndex", void 0), i(this, "torusAlertContainer", void 0), i(this, "isIframeFullScreen", void 0), i(this, "whiteLabel", void 0), 
        i(this, "requestedVerifier", void 0), i(this, "currentVerifier", void 0), i(this, "embedTranslations", void 0), i(this, "ethereum", void 0), 
        i(this, "provider", void 0), i(this, "communicationMux", void 0), i(this, "isLoginCallback", void 0), i(this, "dappStorageKey", void 0), 
        i(this, "paymentProviders", ee.paymentProviders), i(this, "loginHint", ""), this.buttonPosition = t, this.torusUrl = "", 
        this.isLoggedIn = !1, this.isInitialized = !1, this.torusWidgetVisibility = !0, this.requestedVerifier = "", this.currentVerifier = "", 
        this.nodeDetailManager = new l, this.torusJs = new Ut({
          metadataHost: "https://metadata.tor.us",
          allowHost: "https://signer.tor.us/api/allow"
        }), this.apiKey = r, Ut.setAPIKey(r), y(r), this.modalZIndex = e, this.alertZIndex = e + 1e3, this.isIframeFullScreen = !1, 
        this.dappStorageKey = "";
      }
      async init() {
        let {buildEnv: t = Qt.PRODUCTION, enableLogging: e = !1, enabledVerifiers: r = Ae, network: n = {
          host: "mainnet",
          chainId: null,
          networkName: "",
          blockExplorer: "",
          ticker: "",
          tickerName: ""
        }, loginConfig: i = {}, showTorusButton: o = !0, integrity: a = {
          check: !1,
          hash: Ce,
          version: ""
        }, whiteLabel: s, skipTKey: u = !1, useLocalStorage: c = !1} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (this.isInitialized) throw new Error("Already initialized");
        const {torusUrl: h, logLevel: l} = await le(t, a);
        ae.info(h, "url loaded"), this.torusUrl = h, this.whiteLabel = s, ae.setDefaultLevel(l), e ? ae.enableAll() : ae.disableAll(), 
        this.torusWidgetVisibility = o;
        let d = "";
        if (Te && c) {
          const t = window.localStorage.getItem(ee.localStorageKey);
          if (t) d = t; else {
            const t = "torus-app-".concat(he());
            window.localStorage.setItem(ee.localStorageKey, t), d = t;
          }
        }
        this.dappStorageKey = d;
        const p = new URL(h);
        p.pathname.endsWith("/") ? p.pathname += "popup" : p.pathname += "/popup", d && (p.hash = "#dappStorageKey=".concat(d)), 
        this.torusIframe = ne("<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"".concat(p.href, "\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ").concat(this.modalZIndex, "\"\n      ></iframe>")), 
        this.torusAlertContainer = ne('<div id="torusAlertContainer"></div>'), this.torusAlertContainer.style.display = "none", 
        this.torusAlertContainer.style.setProperty("z-index", this.alertZIndex.toString());
        const v = window.document.createElement("link");
        v.setAttribute("rel", "stylesheet"), v.setAttribute("type", "text/css"), v.setAttribute("href", "".concat(h, "/css/widget.css")), 
        this.styleLink = v;
        const {defaultLanguage: m = de(), customTranslations: g = {}} = this.whiteLabel || {};
        const y = f()(ee.translations, g)[m] || ee.translations[de()];
        this.embedTranslations = y.embed;
        const b = async () => (await oe(), new Promise(((t, e) => {
          this.torusIframe.onload = async () => {
            this._setupWeb3();
            const o = this.communicationMux.getStream("init_stream");
            o.on("data", (r => {
              const {name: n, data: i, error: o} = r;
              "init_complete" === n && i.success ? (this.isInitialized = !0, this._displayIframe(this.isIframeFullScreen), t(void 0)) : o && e(new Error(o));
            })), o.write({
              name: "init_stream",
              data: {
                enabledVerifiers: r,
                loginConfig: i,
                whiteLabel: this.whiteLabel,
                buttonPosition: this.buttonPosition,
                torusWidgetVisibility: this.torusWidgetVisibility,
                apiKey: this.apiKey,
                skipTKey: u,
                network: n
              }
            });
          }, window.document.head.appendChild(this.styleLink), window.document.body.appendChild(this.torusIframe), window.document.body.appendChild(this.torusAlertContainer);
        })));
        if ("production" === t && a.check) {
          const t = "".concat(h, "/popup");
          const e = await fetch(t, {
            cache: "reload"
          });
          if ("max-age=3600" !== e.headers.get("Cache-Control")) throw new Error("Unexpected Cache-Control headers, got ".concat(e.headers.get("Cache-Control")));
          const r = await e.text();
          const n = _e({
            algorithms: [ "sha384" ]
          }, r);
          if (ae.info(n, "integrity"), n !== a.hash) throw this.clearInit(), new Error("Integrity check failed");
          await b();
        } else await b();
      }
      login() {
        let {verifier: t = "", login_hint: e = ""} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (!this.isInitialized) throw new Error("Call init() first");
        return this.requestedVerifier = t, this.loginHint = e, this.ethereum.enable();
      }
      logout() {
        return new Promise(((t, e) => {
          if (!this.isLoggedIn) return void e(new Error("User has not logged in yet"));
          this.communicationMux.getStream("logout").write({
            name: "logOut"
          });
          const r = this.communicationMux.getStream("status");
          ie(r, "data", (r => {
            r.loggedIn ? e(new Error("Some Error Occured")) : (this.isLoggedIn = !1, this.currentVerifier = "", this.requestedVerifier = "", 
            t());
          }));
        }));
      }
      async cleanUp() {
        this.isLoggedIn && await this.logout(), this.clearInit();
      }
      clearInit() {
        function t(t) {
          return t instanceof Element || t instanceof HTMLDocument;
        }
        t(this.styleLink) && window.document.body.contains(this.styleLink) && (this.styleLink.remove(), this.styleLink = void 0), 
        t(this.torusIframe) && window.document.body.contains(this.torusIframe) && (this.torusIframe.remove(), this.torusIframe = void 0), 
        t(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer) && (this.torusAlert = void 0, this.torusAlertContainer.remove(), 
        this.torusAlertContainer = void 0), this.isInitialized = !1;
      }
      hideTorusButton() {
        this.torusWidgetVisibility = !1, this._sendWidgetVisibilityStatus(!1), this._displayIframe();
      }
      showTorusButton() {
        this.torusWidgetVisibility = !0, this._sendWidgetVisibilityStatus(!0), this._displayIframe();
      }
      setProvider() {
        let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        let {host: e = "mainnet", chainId: r = null, networkName: i = ""} = t, o = n(t, Ee);
        return new Promise(((t, n) => {
          const a = this.communicationMux.getStream("provider_change");
          ie(a, "data", (e => {
            const {err: r, success: i} = e.data;
            ae.info(e), r ? n(r) : i ? t() : n(new Error("some error occured"));
          }));
          const s = he();
          this._handleWindow(s, {
            target: "_blank",
            features: ve
          }), a.write({
            name: "show_provider_change",
            data: {
              network: je({
                host: e,
                chainId: r,
                networkName: i
              }, o),
              preopenInstanceId: s,
              override: !1
            }
          });
        }));
      }
      showWallet(t) {
        let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        const r = this.communicationMux.getStream("show_wallet");
        const n = t ? "/".concat(t) : "";
        r.write({
          name: "show_wallet",
          data: {
            path: n
          }
        });
        ie(r, "data", (t => {
          if ("show_wallet_instance" === t.name) {
            const {instanceId: r} = t.data;
            const i = new URL("".concat(this.torusUrl, "/wallet").concat(n));
            i.searchParams.append("integrity", "true"), i.searchParams.append("instanceId", r), Object.keys(e).forEach((t => {
              i.searchParams.append(t, e[t]);
            })), this.dappStorageKey && (i.hash = "#dappStorageKey=".concat(this.dappStorageKey));
            new Me({
              url: i,
              features: "directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315"
            }).open();
          }
        }));
      }
      async getPublicAddress(t) {
        let {verifier: e, verifierId: r, isExtended: n = !1} = t;
        if (!ee.supportedVerifierList.includes(e) || !$t[e]) throw new Error("Unsupported verifier");
        const i = await this.nodeDetailManager.getNodeDetails(!1, !0);
        const o = i.torusNodeEndpoints;
        const a = i.torusNodePub;
        const s = e;
        const u = $t[e];
        try {
          const t = await this.torusJs.getUserTypeAndAddress(o, a, {
            verifier: s,
            verifierId: r
          });
          if ("v1" === t.typeOfUser) return n ? t : t.address;
          const e = await this.torusJs.getUserTypeAndAddress(o, a, {
            verifier: u,
            verifierId: r
          }, !0);
          return n ? e : e.address;
        } catch (c) {
          if (null != c && c.message.includes("Verifier + VerifierID has not yet been assigned")) {
            const t = await this.torusJs.getUserTypeAndAddress(o, a, {
              verifier: u,
              verifierId: r
            }, !0);
            return n ? t : t.address;
          }
          throw c;
        }
      }
      getUserInfo(t) {
        return new Promise(((e, r) => {
          if (this.isLoggedIn) {
            const n = this.communicationMux.getStream("user_info_access");
            n.write({
              name: "user_info_access_request"
            });
            const i = n => {
              const {name: i, data: {approved: o, payload: a, rejected: s, newRequest: u}} = n;
              if ("user_info_access_response" === i) if (o) e(a); else if (s) r(new Error("User rejected the request")); else if (u) {
                const n = this.communicationMux.getStream("user_info");
                ie(n, "data", (t => {
                  "user_info_response" === t.name && (t.data.approved ? e(t.data.payload) : r(new Error("User rejected the request")));
                }));
                const i = he();
                this._handleWindow(i, {
                  target: "_blank",
                  features: ve
                }), n.write({
                  name: "user_info_request",
                  data: {
                    message: t,
                    preopenInstanceId: i
                  }
                });
              }
            };
            ie(n, "data", i);
          } else r(new Error("User has not logged in yet"));
        }));
      }
      initiateTopup(t, e) {
        return new Promise(((r, n) => {
          if (this.isInitialized) {
            const {errors: i, isValid: o} = ((t, e) => {
              const r = {};
              if (!t) return {
                errors: r,
                isValid: !0
              };
              if (t && !ue[t]) return r.provider = "Invalid Provider", {
                errors: r,
                isValid: 0 === Object.keys(r).length
              };
              const n = ue[t];
              const i = e || {};
              if (i.fiatValue) {
                const t = +parseFloat(i.fiatValue.toString()) || 0;
                t < n.minOrderValue && (r.fiatValue = "Requested amount is lower than supported"), t > n.maxOrderValue && n.enforceMax && (r.fiatValue = "Requested amount is higher than supported");
              }
              return i.selectedCurrency && !n.validCurrencies.includes(i.selectedCurrency) && (r.selectedCurrency = "Unsupported currency"), 
              i.selectedCryptoCurrency && !n.validCryptoCurrencies.includes(i.selectedCryptoCurrency) && (r.selectedCryptoCurrency = "Unsupported cryptoCurrency"), 
              {
                errors: r,
                isValid: 0 === Object.keys(r).length
              };
            })(t, e);
            if (!o) return void n(new Error(JSON.stringify(i)));
            const a = this.communicationMux.getStream("topup");
            ie(a, "data", (t => {
              "topup_response" === t.name && (t.data.success ? r(t.data.success) : n(new Error(t.data.error)));
            }));
            const s = he();
            this._handleWindow(s), a.write({
              name: "topup_request",
              data: {
                provider: t,
                params: e,
                preopenInstanceId: s
              }
            });
          } else n(new Error("Torus is not initialized yet"));
        }));
      }
      _handleWindow(t) {
        let {url: e, target: r, features: n} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (t) {
          const i = this.communicationMux.getStream("window");
          const o = new URL(e || "".concat(this.torusUrl, "/redirect?preopenInstanceId=").concat(t));
          this.dappStorageKey && (o.hash ? o.hash += "&dappStorageKey=".concat(this.dappStorageKey) : o.hash = "#dappStorageKey=".concat(this.dappStorageKey));
          const a = new Me({
            url: o,
            target: r,
            features: n
          });
          if (a.open(), !a.window) return void this._createPopupBlockAlert(t, o.href);
          i.write({
            name: "opened_window",
            data: {
              preopenInstanceId: t
            }
          });
          const s = e => {
            let {preopenInstanceId: r, close: n} = e;
            r === t && n && (a.close(), i.removeListener("data", s));
          };
          i.on("data", s), a.once("close", (() => {
            i.write({
              data: {
                preopenInstanceId: t,
                closed: !0
              }
            }), i.removeListener("data", s);
          }));
        }
      }
      _setEmbedWhiteLabel(t) {
        const {theme: e} = this.whiteLabel || {};
        if (e) {
          const {isDark: r = !1, colors: n = {}} = e;
          r && t.classList.add("torus-dark"), n.torusBrand1 && t.style.setProperty("--torus-brand-1", n.torusBrand1), n.torusGray2 && t.style.setProperty("--torus-gray-2", n.torusGray2);
        }
      }
      _getLogoUrl() {
        var t, e;
        let r = "".concat(this.torusUrl, "/images/torus_icon-blue.svg");
        var n;
        var i;
        null !== (t = this.whiteLabel) && void 0 !== t && null !== (e = t.theme) && void 0 !== e && e.isDark ? r = (null === (n = this.whiteLabel) || void 0 === n ? void 0 : n.logoLight) || r : r = (null === (i = this.whiteLabel) || void 0 === i ? void 0 : i.logoDark) || r;
        return r;
      }
      _sendWidgetVisibilityStatus(t) {
        this.communicationMux.getStream("torus-widget-visibility").write({
          data: t
        });
      }
      _displayIframe() {
        let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        const e = {};
        if (t) e.display = "block", e.width = "100%", e.height = "100%", e.top = "0px", e.right = "0px", e.left = "0px", e.bottom = "0px"; else switch (e.display = this.torusWidgetVisibility ? "block" : "none", 
        e.height = "70px", e.width = "70px", this.buttonPosition) {
         case te.TOP_LEFT:
          e.top = "0px", e.left = "0px", e.right = "auto", e.bottom = "auto";
          break;

         case te.TOP_RIGHT:
          e.top = "0px", e.right = "0px", e.left = "auto", e.bottom = "auto";
          break;

         case te.BOTTOM_RIGHT:
          e.bottom = "0px", e.right = "0px", e.top = "auto", e.left = "auto";
          break;

         case te.BOTTOM_LEFT:
         default:
          e.bottom = "0px", e.left = "0px", e.top = "auto", e.right = "auto";
        }
        Object.assign(this.torusIframe.style, e), this.isIframeFullScreen = t;
      }
      _setupWeb3() {
        ae.info("setupWeb3 running");
        const t = new q({
          name: "embed_metamask",
          target: "iframe_metamask",
          targetWindow: this.torusIframe.contentWindow,
          targetOrigin: new URL(this.torusUrl).origin
        });
        const e = new q({
          name: "embed_comm",
          target: "iframe_comm",
          targetWindow: this.torusIframe.contentWindow,
          targetOrigin: new URL(this.torusUrl).origin
        });
        const r = new be(t);
        const n = t => {
          const e = r[t];
          r[t] = function(t) {
            if (t && "eth_requestAccounts" === t) return r.enable();
            for (var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) i[o - 1] = arguments[o];
            return e.apply(this, [ t, ...i ]);
          };
        };
        n("send"), n("sendAsync"), r.enable = () => new Promise(((t, e) => {
          r.sendAsync({
            jsonrpc: "2.0",
            id: he(),
            method: "eth_requestAccounts",
            params: []
          }, ((r, n) => {
            const {result: i} = n || {};
            if (r) setTimeout((() => {
              e(r);
            }), 50); else if (Array.isArray(i) && i.length > 0) {
              const r = () => {
                if ("" !== this.requestedVerifier && this.currentVerifier !== this.requestedVerifier) {
                  const {requestedVerifier: r} = this;
                  this.logout().then((n => {
                    this.requestedVerifier = r, this._showLoginPopup(!0, t, e);
                  })).catch((t => e(t)));
                } else t(i);
              };
              this.isLoggedIn ? r() : this.isLoginCallback = r;
            } else this._showLoginPopup(!0, t, e);
          }));
        })), r.tryPreopenHandle = (t, e) => {
          const n = t;
          if (!Array.isArray(n) && Re.includes(n.method)) {
            const t = he();
            this._handleWindow(t, {
              target: "_blank",
              features: me
            }), n.preopenInstanceId = t;
          }
          r._rpcEngine.handle(n, e);
        };
        const i = new Proxy(r, {
          deleteProperty: () => !0
        });
        this.ethereum = i;
        const o = function(t) {
          const e = new Z;
          return e.getStream = function(t) {
            return this._substreams[t] ? this._substreams[t] : this.createStream(t);
          }, I()(t, e, t, (t => {
            t && window.console.error(t);
          })), e;
        }(e);
        this.communicationMux = o;
        o.getStream("window").on("data", (t => {
          "create_window" === t.name && this._createPopupBlockAlert(t.data.preopenInstanceId, t.data.url);
        }));
        o.getStream("widget").on("data", (t => {
          const {data: e} = t;
          this._displayIframe(e);
        }));
        o.getStream("status").on("data", (t => {
          t.loggedIn ? (this.isLoggedIn = t.loggedIn, this.currentVerifier = t.verifier) : this._displayIframe(), this.isLoginCallback && (this.isLoginCallback(), 
          delete this.isLoginCallback);
        })), this.provider = i, this.provider.shouldSendMetadata && Oe(this.provider._rpcEngine), r._initializeState(), ae.debug("Torus - injected provider");
      }
      _showLoginPopup(t, e, r) {
        const n = t => {
          const {err: n, selectedAddress: i} = t;
          n ? (ae.error(n), r && r(n)) : e && e([ i ]), this.isIframeFullScreen && this._displayIframe();
        };
        const i = this.communicationMux.getStream("oauth");
        if (this.requestedVerifier) {
          ie(i, "data", n);
          const e = he();
          this._handleWindow(e), i.write({
            name: "oauth",
            data: {
              calledFromEmbed: t,
              verifier: this.requestedVerifier,
              preopenInstanceId: e,
              login_hint: this.loginHint
            }
          });
        } else this._displayIframe(!0), ie(i, "data", n), i.write({
          name: "oauth_modal",
          data: {
            calledFromEmbed: t
          }
        });
      }
      _createPopupBlockAlert(t, e) {
        const r = this._getLogoUrl();
        const n = ne('<div id="torusAlert" class="torus-alert--v2">' + "<div id=\"torusAlert__logo\"><img src=\"".concat(r, "\" /></div>") + "<div>" + "<h1 id=\"torusAlert__title\">".concat(this.embedTranslations.actionRequired, "</h1>") + "<p id=\"torusAlert__desc\">".concat(this.embedTranslations.pendingAction, "</p>") + "</div></div>");
        const i = ne("<div><a id=\"torusAlert__btn\">".concat(this.embedTranslations.continue, "</a></div>"));
        const o = ne('<div id="torusAlert__btn-container"></div>');
        o.appendChild(i), n.appendChild(o);
        this._setEmbedWhiteLabel(n);
        re((() => {
          this.torusAlertContainer.style.display = "block", this.torusAlertContainer.appendChild(n);
        })), re((() => {
          i.addEventListener("click", (() => {
            this._handleWindow(t, {
              url: e,
              target: "_blank",
              features: me
            }), n.remove(), 0 === this.torusAlertContainer.children.length && (this.torusAlertContainer.style.display = "none");
          }));
        }));
      }
    }
    var Le = function(t, e, r, n) {
      return new (r || (r = Promise))((function(i, o) {
        function a(t) {
          try {
            u(n.next(t));
          } catch (e) {
            o(e);
          }
        }
        function s(t) {
          try {
            u(n.throw(t));
          } catch (e) {
            o(e);
          }
        }
        function u(t) {
          t.done ? i(t.value) : function(t) {
            return t instanceof r ? t : new r((function(e) {
              e(t);
            }));
          }(t.value).then(a, s);
        }
        u((n = n.apply(t, e || [])).next());
      }));
    };
    var De = function(t, e) {
      var r, n, i, o, a = {
        label: 0,
        sent: function() {
          if (1 & i[0]) throw i[1];
          return i[1];
        },
        trys: [],
        ops: []
      };
      return o = {
        next: s(0),
        throw: s(1),
        return: s(2)
      }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
        return this;
      }), o;
      function s(o) {
        return function(s) {
          return function(o) {
            if (r) throw new TypeError("Generator is already executing.");
            for (;a; ) try {
              if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;
              switch (n = 0, i && (o = [ 2 & o[0], i.value ]), o[0]) {
               case 0:
               case 1:
                i = o;
                break;

               case 4:
                return a.label++, {
                  value: o[1],
                  done: !1
                };

               case 5:
                a.label++, n = o[1], o = [ 0 ];
                continue;

               case 7:
                o = a.ops.pop(), a.trys.pop();
                continue;

               default:
                if (!(i = a.trys, (i = i.length > 0 && i[i.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                  a = 0;
                  continue;
                }
                if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {
                  a.label = o[1];
                  break;
                }
                if (6 === o[0] && a.label < i[1]) {
                  a.label = i[1], i = o;
                  break;
                }
                if (i && a.label < i[2]) {
                  a.label = i[2], a.ops.push(o);
                  break;
                }
                i[2] && a.ops.pop(), a.trys.pop();
                continue;
              }
              o = e.call(t, a);
            } catch (s) {
              o = [ 6, s ], n = 0;
            } finally {
              r = i = 0;
            }
            if (5 & o[0]) throw o[1];
            return {
              value: o[0] ? o[1] : void 0,
              done: !0
            };
          }([ o, s ]);
        };
      }
    };
    var qe = function() {
      return Le(void 0, void 0, void 0, (function() {
        return De(this, (function(t) {
          return [ 2, new Ie ];
        }));
      }));
    };
  },
  2450: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = new (0, r(86266).ec)("secp256k1");
    var o = r.g.crypto || r.g.msCrypto || {};
    var a = o.subtle || o.webkitSubtle;
    var s = r(55835);
    const u = n.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex');
    const c = n.alloc(32, 0);
    function h(t, e) {
      if (!t) throw new Error(e || "Assertion failed");
    }
    function l(t) {
      return !!function(t) {
        return n.isBuffer(t) && 32 === t.length;
      }(t) && (t.compare(c) > 0 && t.compare(u) < 0);
    }
    function d(t) {
      var e = new Uint8Array(t);
      return void 0 === o.getRandomValues ? n.from(s.randomBytes(t)) : (o.getRandomValues(e), n.from(e));
    }
    function f(t) {
      return new Promise((function(e) {
        var r = s.createHash('sha512').update(t).digest();
        e(new Uint8Array(r));
      }));
    }
    function p(t) {
      return function(e, r, i) {
        return new Promise((function(o) {
          if (a) {
            return a.importKey("raw", r, {
              name: "AES-CBC"
            }, !1, [ t ]).then((function(r) {
              var n = {
                name: "AES-CBC",
                iv: e
              };
              return a[t](n, r, i);
            })).then((function(t) {
              o(n.from(new Uint8Array(t)));
            }));
          }
          if ('encrypt' === t) {
            var u = s.createCipheriv('aes-256-cbc', r, e);
            let t = u.update(i);
            let a = u.final();
            o(n.concat([ t, a ]));
          } else if ('decrypt' === t) {
            var c = s.createDecipheriv('aes-256-cbc', r, e);
            let t = c.update(i);
            let a = c.final();
            o(n.concat([ t, a ]));
          }
        }));
      };
    }
    var v = p("encrypt");
    var m = p("decrypt");
    e.oq = function() {
      var t = d(32);
      for (;!l(t); ) t = d(32);
      return t;
    };
    var g = e.rc = function(t) {
      return h(32 === t.length, "Bad private key"), h(l(t), "Bad private key"), n.from(i.keyFromPrivate(t).getPublic("arr"));
    };
    var y = function(t, e) {
      return new Promise((function(r) {
        h(n.isBuffer(t), "Bad private key"), h(n.isBuffer(e), "Bad public key"), h(32 === t.length, "Bad private key"), h(l(t), "Bad private key"), 
        h(65 === e.length || 33 === e.length, "Bad public key"), 65 === e.length && h(4 === e[0], "Bad public key"), 33 === e.length && h(2 === e[0] || 3 === e[0], "Bad public key");
        var o = i.keyFromPrivate(t);
        var a = i.keyFromPublic(e);
        var s = o.derive(a.getPublic());
        r(n.from(s.toArray()));
      }));
    };
    e.pe = function(t, e) {
      var r;
      return y(t, e.ephemPublicKey).then((function(t) {
        return f(t);
      })).then((function(t) {
        return r = t.slice(0, 32), function(t, e, r) {
          return new Promise((function(i) {
            var o = s.createHmac('sha256', n.from(t));
            o.update(e), i(function(t, e) {
              if (t.length !== e.length) return !1;
              var r = 0;
              for (var n = 0; n < t.length; n++) r |= t[n] ^ e[n];
              return 0 === r;
            }(o.digest(), r));
          }));
        }(t.slice(32), n.concat([ e.iv, e.ephemPublicKey, e.ciphertext ]), e.mac);
      })).then((function(t) {
        return h(t, "Bad MAC"), m(e.iv, r, e.ciphertext);
      })).then((function(t) {
        return n.from(new Uint8Array(t));
      }));
    };
  },
  32937: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.EthereumProviderError = e.EthereumRpcError = void 0;
    const n = r(4445);
    class i extends Error {
      constructor(t, e, r) {
        if (!Number.isInteger(t)) throw new Error('"code" must be an integer.');
        if (!e || 'string' != typeof e) throw new Error('"message" must be a nonempty string.');
        super(e), this.code = t, void 0 !== r && (this.data = r);
      }
      serialize() {
        const t = {
          code: this.code,
          message: this.message
        };
        return void 0 !== this.data && (t.data = this.data), this.stack && (t.stack = this.stack), t;
      }
      toString() {
        return n.default(this.serialize(), o, 2);
      }
    }
    e.EthereumRpcError = i;
    function o(t, e) {
      if ('[Circular]' !== e) return e;
    }
    e.EthereumProviderError = class extends i {
      constructor(t, e, r) {
        if (!function(t) {
          return Number.isInteger(t) && t >= 1e3 && t <= 4999;
        }(t)) throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
        super(t, e, r);
      }
    };
  },
  93938: (t, e) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.errorValues = e.errorCodes = void 0, e.errorCodes = {
      rpc: {
        invalidInput: -32e3,
        resourceNotFound: -32001,
        resourceUnavailable: -32002,
        transactionRejected: -32003,
        methodNotSupported: -32004,
        limitExceeded: -32005,
        parse: -32700,
        invalidRequest: -32600,
        methodNotFound: -32601,
        invalidParams: -32602,
        internal: -32603
      },
      provider: {
        userRejectedRequest: 4001,
        unauthorized: 4100,
        unsupportedMethod: 4200,
        disconnected: 4900,
        chainDisconnected: 4901
      }
    }, e.errorValues = {
      '-32700': {
        standard: 'JSON RPC 2.0',
        message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.'
      },
      '-32600': {
        standard: 'JSON RPC 2.0',
        message: 'The JSON sent is not a valid Request object.'
      },
      '-32601': {
        standard: 'JSON RPC 2.0',
        message: 'The method does not exist / is not available.'
      },
      '-32602': {
        standard: 'JSON RPC 2.0',
        message: 'Invalid method parameter(s).'
      },
      '-32603': {
        standard: 'JSON RPC 2.0',
        message: 'Internal JSON-RPC error.'
      },
      '-32000': {
        standard: 'EIP-1474',
        message: 'Invalid input.'
      },
      '-32001': {
        standard: 'EIP-1474',
        message: 'Resource not found.'
      },
      '-32002': {
        standard: 'EIP-1474',
        message: 'Resource unavailable.'
      },
      '-32003': {
        standard: 'EIP-1474',
        message: 'Transaction rejected.'
      },
      '-32004': {
        standard: 'EIP-1474',
        message: 'Method not supported.'
      },
      '-32005': {
        standard: 'EIP-1474',
        message: 'Request limit exceeded.'
      },
      4001: {
        standard: 'EIP-1193',
        message: 'User rejected the request.'
      },
      4100: {
        standard: 'EIP-1193',
        message: 'The requested account and/or method has not been authorized by the user.'
      },
      4200: {
        standard: 'EIP-1193',
        message: 'The requested method is not supported by this Ethereum provider.'
      },
      4900: {
        standard: 'EIP-1193',
        message: 'The provider is disconnected from all chains.'
      },
      4901: {
        standard: 'EIP-1193',
        message: 'The provider is disconnected from the specified chain.'
      }
    };
  },
  98348: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.ethErrors = void 0;
    const n = r(32937);
    const i = r(70397);
    const o = r(93938);
    function a(t, e) {
      const [r, o] = u(e);
      return new n.EthereumRpcError(t, r || i.getMessageFromCode(t), o);
    }
    function s(t, e) {
      const [r, o] = u(e);
      return new n.EthereumProviderError(t, r || i.getMessageFromCode(t), o);
    }
    function u(t) {
      if (t) {
        if ('string' == typeof t) return [ t ];
        if ('object' == typeof t && !Array.isArray(t)) {
          const {message: e, data: r} = t;
          if (e && 'string' != typeof e) throw new Error('Must specify string message.');
          return [ e || void 0, r ];
        }
      }
      return [];
    }
    e.ethErrors = {
      rpc: {
        parse: t => a(o.errorCodes.rpc.parse, t),
        invalidRequest: t => a(o.errorCodes.rpc.invalidRequest, t),
        invalidParams: t => a(o.errorCodes.rpc.invalidParams, t),
        methodNotFound: t => a(o.errorCodes.rpc.methodNotFound, t),
        internal: t => a(o.errorCodes.rpc.internal, t),
        server: t => {
          if (!t || 'object' != typeof t || Array.isArray(t)) throw new Error('Ethereum RPC Server errors must provide single object argument.');
          const {code: e} = t;
          if (!Number.isInteger(e) || e > -32005 || e < -32099) throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
          return a(e, t);
        },
        invalidInput: t => a(o.errorCodes.rpc.invalidInput, t),
        resourceNotFound: t => a(o.errorCodes.rpc.resourceNotFound, t),
        resourceUnavailable: t => a(o.errorCodes.rpc.resourceUnavailable, t),
        transactionRejected: t => a(o.errorCodes.rpc.transactionRejected, t),
        methodNotSupported: t => a(o.errorCodes.rpc.methodNotSupported, t),
        limitExceeded: t => a(o.errorCodes.rpc.limitExceeded, t)
      },
      provider: {
        userRejectedRequest: t => s(o.errorCodes.provider.userRejectedRequest, t),
        unauthorized: t => s(o.errorCodes.provider.unauthorized, t),
        unsupportedMethod: t => s(o.errorCodes.provider.unsupportedMethod, t),
        disconnected: t => s(o.errorCodes.provider.disconnected, t),
        chainDisconnected: t => s(o.errorCodes.provider.chainDisconnected, t),
        custom: t => {
          if (!t || 'object' != typeof t || Array.isArray(t)) throw new Error('Ethereum Provider custom errors must provide single object argument.');
          const {code: e, message: r, data: i} = t;
          if (!r || 'string' != typeof r) throw new Error('"message" must be a nonempty string');
          return new n.EthereumProviderError(e, r, i);
        }
      }
    };
  },
  55863: (t, e, r) => {
    "use strict";
    e.Cg = e.Sy = void 0;
    const n = r(32937);
    Object.defineProperty(e, "Cg", {
      enumerable: !0,
      get: function() {
        return n.EthereumRpcError;
      }
    });
    const i = r(70397);
    const o = r(98348);
    Object.defineProperty(e, "Sy", {
      enumerable: !0,
      get: function() {
        return o.ethErrors;
      }
    });
    const a = r(93938);
  },
  70397: (t, e, r) => {
    "use strict";
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.serializeError = e.isValidCode = e.getMessageFromCode = e.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
    const n = r(93938);
    const i = r(32937);
    const o = n.errorCodes.rpc.internal;
    const a = {
      code: o,
      message: s(o)
    };
    function s(t, r = "Unspecified error message. This is a bug, please report it.") {
      if (Number.isInteger(t)) {
        const r = t.toString();
        if (l(n.errorValues, r)) return n.errorValues[r].message;
        if (c(t)) return e.JSON_RPC_SERVER_ERROR_MESSAGE;
      }
      return r;
    }
    function u(t) {
      if (!Number.isInteger(t)) return !1;
      const e = t.toString();
      return !!n.errorValues[e] || !!c(t);
    }
    function c(t) {
      return t >= -32099 && t <= -32e3;
    }
    function h(t) {
      return t && 'object' == typeof t && !Array.isArray(t) ? Object.assign({}, t) : t;
    }
    function l(t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }
    e.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.', e.getMessageFromCode = s, e.isValidCode = u, e.serializeError = function(t, {fallbackError: e = a, shouldIncludeStack: r = !1} = {}) {
      var n, o;
      if (!e || !Number.isInteger(e.code) || 'string' != typeof e.message) throw new Error('Must provide fallback error with integer number code and string message.');
      if (t instanceof i.EthereumRpcError) return t.serialize();
      const c = {};
      if (t && 'object' == typeof t && !Array.isArray(t) && l(t, 'code') && u(t.code)) {
        const e = t;
        c.code = e.code, e.message && 'string' == typeof e.message ? (c.message = e.message, l(e, 'data') && (c.data = e.data)) : (c.message = s(c.code), 
        c.data = {
          originalError: h(t)
        });
      } else {
        c.code = e.code;
        const r = null === (n = t) || void 0 === n ? void 0 : n.message;
        c.message = r && 'string' == typeof r ? r : e.message, c.data = {
          originalError: h(t)
        };
      }
      const d = null === (o = t) || void 0 === o ? void 0 : o.stack;
      return r && t && d && 'string' == typeof d && (c.stack = d), c;
    };
  },
  51107: function(t, e, r) {
    !function(t, e) {
      'use strict';
      function n(t, e) {
        if (!t) throw new Error(e || 'Assertion failed');
      }
      function i(t, e) {
        t.super_ = e;
        var r = function() {};
        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
      }
      function o(t, e, r) {
        if (o.isBN(t)) return t;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ('le' !== e && 'be' !== e || (r = e, 
        e = 10), this._init(t || 0, e || 10, r || 'be'));
      }
      var a;
      'object' == typeof t ? t.exports = o : e.BN = o, o.BN = o, o.wordSize = 26;
      try {
        a = 'undefined' != typeof window && void 0 !== window.Buffer ? window.Buffer : r(63018).Buffer;
      } catch (P) {}
      function s(t, e) {
        var r = t.charCodeAt(e);
        return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void n(!1, 'Invalid character in ' + t);
      }
      function u(t, e, r) {
        var n = s(t, r);
        return r - 1 >= e && (n |= s(t, r - 1) << 4), n;
      }
      function c(t, e, r, i) {
        var o = 0;
        var a = 0;
        var s = Math.min(t.length, r);
        for (var u = e; u < s; u++) {
          var c = t.charCodeAt(u) - 48;
          o *= i, a = c >= 49 ? c - 49 + 10 : c >= 17 ? c - 17 + 10 : c, n(c >= 0 && a < i, 'Invalid character'), o += a;
        }
        return o;
      }
      function h(t, e) {
        t.words = e.words, t.length = e.length, t.negative = e.negative, t.red = e.red;
      }
      if (o.isBN = function(t) {
        return t instanceof o || null !== t && 'object' == typeof t && t.constructor.wordSize === o.wordSize && Array.isArray(t.words);
      }, o.max = function(t, e) {
        return t.cmp(e) > 0 ? t : e;
      }, o.min = function(t, e) {
        return t.cmp(e) < 0 ? t : e;
      }, o.prototype._init = function(t, e, r) {
        if ('number' == typeof t) return this._initNumber(t, e, r);
        if ('object' == typeof t) return this._initArray(t, e, r);
        'hex' === e && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
        var i = 0;
        '-' === (t = t.toString().replace(/\s+/g, ''))[0] && (i++, this.negative = 1), i < t.length && (16 === e ? this._parseHex(t, i, r) : (this._parseBase(t, e, i), 
        'le' === r && this._initArray(this.toArray(), e, r)));
      }, o.prototype._initNumber = function(t, e, r) {
        t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [ 67108863 & t ], this.length = 1) : t < 4503599627370496 ? (this.words = [ 67108863 & t, t / 67108864 & 67108863 ], 
        this.length = 2) : (n(t < 9007199254740992), this.words = [ 67108863 & t, t / 67108864 & 67108863, 1 ], this.length = 3), 
        'le' === r && this._initArray(this.toArray(), e, r);
      }, o.prototype._initArray = function(t, e, r) {
        if (n('number' == typeof t.length), t.length <= 0) return this.words = [ 0 ], this.length = 1, this;
        this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) this.words[i] = 0;
        var o, a;
        var s = 0;
        if ('be' === r) for (i = t.length - 1, o = 0; i >= 0; i -= 3) a = t[i] | t[i - 1] << 8 | t[i - 2] << 16, this.words[o] |= a << s & 67108863, 
        this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++); else if ('le' === r) for (i = 0, o = 0; i < t.length; i += 3) a = t[i] | t[i + 1] << 8 | t[i + 2] << 16, 
        this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
        return this._strip();
      }, o.prototype._parseHex = function(t, e, r) {
        this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
        for (var n = 0; n < this.length; n++) this.words[n] = 0;
        var i = 0;
        var o = 0;
        var a;
        if ('be' === r) for (n = t.length - 1; n >= e; n -= 2) a = u(t, e, n) << i, this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, 
        o += 1, this.words[o] |= a >>> 26) : i += 8; else for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) a = u(t, e, n) << i, 
        this.words[o] |= 67108863 & a, i >= 18 ? (i -= 18, o += 1, this.words[o] |= a >>> 26) : i += 8;
        this._strip();
      }, o.prototype._parseBase = function(t, e, r) {
        this.words = [ 0 ], this.length = 1;
        for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
        n--, i = i / e | 0;
        var o = t.length - r;
        var a = o % n;
        var s = Math.min(o, o - a) + r;
        var u = 0;
        for (var h = r; h < s; h += n) u = c(t, h, h + n, e), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        if (0 !== a) {
          var l = 1;
          for (u = c(t, h, t.length, e), h = 0; h < a; h++) l *= e;
          this.imuln(l), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        }
        this._strip();
      }, o.prototype.copy = function(t) {
        t.words = new Array(this.length);
        for (var e = 0; e < this.length; e++) t.words[e] = this.words[e];
        t.length = this.length, t.negative = this.negative, t.red = this.red;
      }, o.prototype._move = function(t) {
        h(t, this);
      }, o.prototype.clone = function() {
        var t = new o(null);
        return this.copy(t), t;
      }, o.prototype._expand = function(t) {
        for (;this.length < t; ) this.words[this.length++] = 0;
        return this;
      }, o.prototype._strip = function() {
        for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
        return this._normSign();
      }, o.prototype._normSign = function() {
        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
      }, 'undefined' != typeof Symbol && 'function' == typeof Symbol.for) try {
        o.prototype[Symbol.for('nodejs.util.inspect.custom')] = l;
      } catch (P) {
        o.prototype.inspect = l;
      } else o.prototype.inspect = l;
      function l() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }
      var d = [ '', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000' ];
      var f = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
      var p = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
      o.prototype.toString = function(t, e) {
        var r;
        if (e = 0 | e || 1, 16 === (t = t || 10) || 'hex' === t) {
          r = '';
          var i = 0;
          var o = 0;
          for (var a = 0; a < this.length; a++) {
            var s = this.words[a];
            var u = (16777215 & (s << i | o)).toString(16);
            r = 0 !== (o = s >>> 24 - i & 16777215) || a !== this.length - 1 ? d[6 - u.length] + u + r : u + r, (i += 2) >= 26 && (i -= 26, 
            a--);
          }
          for (0 !== o && (r = o.toString(16) + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        if (t === (0 | t) && t >= 2 && t <= 36) {
          var c = f[t];
          var h = p[t];
          r = '';
          var l = this.clone();
          for (l.negative = 0; !l.isZero(); ) {
            var v = l.modrn(h).toString(t);
            r = (l = l.idivn(h)).isZero() ? v + r : d[c - v.length] + v + r;
          }
          for (this.isZero() && (r = '0' + r); r.length % e != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        n(!1, 'Base should be between 2 and 36');
      }, o.prototype.toNumber = function() {
        var t = this.words[0];
        return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, 'Number can only safely store up to 53 bits'), 
        0 !== this.negative ? -t : t;
      }, o.prototype.toJSON = function() {
        return this.toString(16, 2);
      }, a && (o.prototype.toBuffer = function(t, e) {
        return this.toArrayLike(a, t, e);
      }), o.prototype.toArray = function(t, e) {
        return this.toArrayLike(Array, t, e);
      };
      function v(t, e, r) {
        r.negative = e.negative ^ t.negative;
        var n = t.length + e.length | 0;
        r.length = n, n = n - 1 | 0;
        var i = 0 | t.words[0];
        var o = 0 | e.words[0];
        var a = i * o;
        var s = 67108863 & a;
        var u = a / 67108864 | 0;
        r.words[0] = s;
        for (var c = 1; c < n; c++) {
          var h = u >>> 26;
          var l = 67108863 & u;
          var d = Math.min(c, e.length - 1);
          for (var f = Math.max(0, c - t.length + 1); f <= d; f++) {
            var p = c - f | 0;
            h += (a = (i = 0 | t.words[p]) * (o = 0 | e.words[f]) + l) / 67108864 | 0, l = 67108863 & a;
          }
          r.words[c] = 0 | l, u = 0 | h;
        }
        return 0 !== u ? r.words[c] = 0 | u : r.length--, r._strip();
      }
      o.prototype.toArrayLike = function(t, e, r) {
        this._strip();
        var i = this.byteLength();
        var o = r || Math.max(1, i);
        n(i <= o, 'byte array longer than desired length'), n(o > 0, 'Requested array length <= 0');
        var a = function(t, e) {
          return t.allocUnsafe ? t.allocUnsafe(e) : new t(e);
        }(t, o);
        return this['_toArrayLike' + ('le' === e ? 'LE' : 'BE')](a, i), a;
      }, o.prototype._toArrayLikeLE = function(t, e) {
        var r = 0;
        var n = 0;
        for (var i = 0, o = 0; i < this.length; i++) {
          var a = this.words[i] << o | n;
          t[r++] = 255 & a, r < t.length && (t[r++] = a >> 8 & 255), r < t.length && (t[r++] = a >> 16 & 255), 6 === o ? (r < t.length && (t[r++] = a >> 24 & 255), 
          n = 0, o = 0) : (n = a >>> 24, o += 2);
        }
        if (r < t.length) for (t[r++] = n; r < t.length; ) t[r++] = 0;
      }, o.prototype._toArrayLikeBE = function(t, e) {
        var r = t.length - 1;
        var n = 0;
        for (var i = 0, o = 0; i < this.length; i++) {
          var a = this.words[i] << o | n;
          t[r--] = 255 & a, r >= 0 && (t[r--] = a >> 8 & 255), r >= 0 && (t[r--] = a >> 16 & 255), 6 === o ? (r >= 0 && (t[r--] = a >> 24 & 255), 
          n = 0, o = 0) : (n = a >>> 24, o += 2);
        }
        if (r >= 0) for (t[r--] = n; r >= 0; ) t[r--] = 0;
      }, Math.clz32 ? o.prototype._countBits = function(t) {
        return 32 - Math.clz32(t);
      } : o.prototype._countBits = function(t) {
        var e = t;
        var r = 0;
        return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, e >>>= 4), e >= 2 && (r += 2, 
        e >>>= 2), r + e;
      }, o.prototype._zeroBits = function(t) {
        if (0 === t) return 26;
        var e = t;
        var r = 0;
        return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 0 == (15 & e) && (r += 4, e >>>= 4), 
        0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, r;
      }, o.prototype.bitLength = function() {
        var t = this.words[this.length - 1];
        var e = this._countBits(t);
        return 26 * (this.length - 1) + e;
      }, o.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        var t = 0;
        for (var e = 0; e < this.length; e++) {
          var r = this._zeroBits(this.words[e]);
          if (t += r, 26 !== r) break;
        }
        return t;
      }, o.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, o.prototype.toTwos = function(t) {
        return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
      }, o.prototype.fromTwos = function(t) {
        return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
      }, o.prototype.isNeg = function() {
        return 0 !== this.negative;
      }, o.prototype.neg = function() {
        return this.clone().ineg();
      }, o.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, o.prototype.iuor = function(t) {
        for (;this.length < t.length; ) this.words[this.length++] = 0;
        for (var e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
        return this._strip();
      }, o.prototype.ior = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuor(t);
      }, o.prototype.or = function(t) {
        return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
      }, o.prototype.uor = function(t) {
        return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
      }, o.prototype.iuand = function(t) {
        var e;
        e = this.length > t.length ? t : this;
        for (var r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
        return this.length = e.length, this._strip();
      }, o.prototype.iand = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuand(t);
      }, o.prototype.and = function(t) {
        return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
      }, o.prototype.uand = function(t) {
        return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
      }, o.prototype.iuxor = function(t) {
        var e;
        var r;
        this.length > t.length ? (e = this, r = t) : (e = t, r = this);
        for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
        if (this !== e) for (;n < e.length; n++) this.words[n] = e.words[n];
        return this.length = e.length, this._strip();
      }, o.prototype.ixor = function(t) {
        return n(0 == (this.negative | t.negative)), this.iuxor(t);
      }, o.prototype.xor = function(t) {
        return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
      }, o.prototype.uxor = function(t) {
        return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
      }, o.prototype.inotn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = 0 | Math.ceil(t / 26);
        var r = t % 26;
        this._expand(e), r > 0 && e--;
        for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
        return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this._strip();
      }, o.prototype.notn = function(t) {
        return this.clone().inotn(t);
      }, o.prototype.setn = function(t, e) {
        n('number' == typeof t && t >= 0);
        var r = t / 26 | 0;
        var i = t % 26;
        return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this._strip();
      }, o.prototype.iadd = function(t) {
        var e;
        if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), this.negative ^= 1, this._normSign();
        if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), t.negative = 1, e._normSign();
        var r, n;
        this.length > t.length ? (r = this, n = t) : (r = t, n = this);
        var i = 0;
        for (var o = 0; o < n.length; o++) e = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        for (;0 !== i && o < r.length; o++) e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
        if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
        return this;
      }, o.prototype.add = function(t) {
        var e;
        return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, 
        e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
      }, o.prototype.isub = function(t) {
        if (0 !== t.negative) {
          t.negative = 0;
          var e = this.iadd(t);
          return t.negative = 1, e._normSign();
        }
        if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, this._normSign();
        var r = this.cmp(t);
        if (0 === r) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var n, i;
        r > 0 ? (n = this, i = t) : (n = t, i = this);
        var o = 0;
        for (var a = 0; a < i.length; a++) o = (e = (0 | n.words[a]) - (0 | i.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        for (;0 !== o && a < n.length; a++) o = (e = (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
        if (0 === o && a < n.length && n !== this) for (;a < n.length; a++) this.words[a] = n.words[a];
        return this.length = Math.max(this.length, a), n !== this && (this.negative = 1), this._strip();
      }, o.prototype.sub = function(t) {
        return this.clone().isub(t);
      };
      var m = function(t, e, r) {
        var n = t.words;
        var i = e.words;
        var o = r.words;
        var a = 0;
        var s;
        var u;
        var c;
        var h = 0 | n[0];
        var l = 8191 & h;
        var d = h >>> 13;
        var f = 0 | n[1];
        var p = 8191 & f;
        var v = f >>> 13;
        var m = 0 | n[2];
        var g = 8191 & m;
        var y = m >>> 13;
        var b = 0 | n[3];
        var w = 8191 & b;
        var _ = b >>> 13;
        var M = 0 | n[4];
        var S = 8191 & M;
        var k = M >>> 13;
        var x = 0 | n[5];
        var O = 8191 & x;
        var E = x >>> 13;
        var P = 0 | n[6];
        var j = 8191 & P;
        var A = P >>> 13;
        var C = 0 | n[7];
        var R = 8191 & C;
        var T = C >>> 13;
        var I = 0 | n[8];
        var L = 8191 & I;
        var D = I >>> 13;
        var q = 0 | n[9];
        var U = 8191 & q;
        var N = q >>> 13;
        var B = 0 | i[0];
        var F = 8191 & B;
        var W = B >>> 13;
        var V = 0 | i[1];
        var K = 8191 & V;
        var H = V >>> 13;
        var z = 0 | i[2];
        var J = 8191 & z;
        var Y = z >>> 13;
        var G = 0 | i[3];
        var Z = 8191 & G;
        var X = G >>> 13;
        var $ = 0 | i[4];
        var Q = 8191 & $;
        var tt = $ >>> 13;
        var et = 0 | i[5];
        var rt = 8191 & et;
        var nt = et >>> 13;
        var it = 0 | i[6];
        var ot = 8191 & it;
        var at = it >>> 13;
        var st = 0 | i[7];
        var ut = 8191 & st;
        var ct = st >>> 13;
        var ht = 0 | i[8];
        var lt = 8191 & ht;
        var dt = ht >>> 13;
        var ft = 0 | i[9];
        var pt = 8191 & ft;
        var vt = ft >>> 13;
        r.negative = t.negative ^ e.negative, r.length = 19;
        var mt = (a + (s = Math.imul(l, F)) | 0) + ((8191 & (u = (u = Math.imul(l, W)) + Math.imul(d, F) | 0)) << 13) | 0;
        a = ((c = Math.imul(d, W)) + (u >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, s = Math.imul(p, F), u = (u = Math.imul(p, W)) + Math.imul(v, F) | 0, 
        c = Math.imul(v, W);
        var gt = (a + (s = s + Math.imul(l, K) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, H) | 0) + Math.imul(d, K) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, H) | 0) + (u >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, s = Math.imul(g, F), u = (u = Math.imul(g, W)) + Math.imul(y, F) | 0, 
        c = Math.imul(y, W), s = s + Math.imul(p, K) | 0, u = (u = u + Math.imul(p, H) | 0) + Math.imul(v, K) | 0, c = c + Math.imul(v, H) | 0;
        var yt = (a + (s = s + Math.imul(l, J) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, Y) | 0) + Math.imul(d, J) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, Y) | 0) + (u >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, s = Math.imul(w, F), u = (u = Math.imul(w, W)) + Math.imul(_, F) | 0, 
        c = Math.imul(_, W), s = s + Math.imul(g, K) | 0, u = (u = u + Math.imul(g, H) | 0) + Math.imul(y, K) | 0, c = c + Math.imul(y, H) | 0, 
        s = s + Math.imul(p, J) | 0, u = (u = u + Math.imul(p, Y) | 0) + Math.imul(v, J) | 0, c = c + Math.imul(v, Y) | 0;
        var bt = (a + (s = s + Math.imul(l, Z) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, X) | 0) + Math.imul(d, Z) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, X) | 0) + (u >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, s = Math.imul(S, F), u = (u = Math.imul(S, W)) + Math.imul(k, F) | 0, 
        c = Math.imul(k, W), s = s + Math.imul(w, K) | 0, u = (u = u + Math.imul(w, H) | 0) + Math.imul(_, K) | 0, c = c + Math.imul(_, H) | 0, 
        s = s + Math.imul(g, J) | 0, u = (u = u + Math.imul(g, Y) | 0) + Math.imul(y, J) | 0, c = c + Math.imul(y, Y) | 0, s = s + Math.imul(p, Z) | 0, 
        u = (u = u + Math.imul(p, X) | 0) + Math.imul(v, Z) | 0, c = c + Math.imul(v, X) | 0;
        var wt = (a + (s = s + Math.imul(l, Q) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, tt) | 0) + Math.imul(d, Q) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, tt) | 0) + (u >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, s = Math.imul(O, F), u = (u = Math.imul(O, W)) + Math.imul(E, F) | 0, 
        c = Math.imul(E, W), s = s + Math.imul(S, K) | 0, u = (u = u + Math.imul(S, H) | 0) + Math.imul(k, K) | 0, c = c + Math.imul(k, H) | 0, 
        s = s + Math.imul(w, J) | 0, u = (u = u + Math.imul(w, Y) | 0) + Math.imul(_, J) | 0, c = c + Math.imul(_, Y) | 0, s = s + Math.imul(g, Z) | 0, 
        u = (u = u + Math.imul(g, X) | 0) + Math.imul(y, Z) | 0, c = c + Math.imul(y, X) | 0, s = s + Math.imul(p, Q) | 0, u = (u = u + Math.imul(p, tt) | 0) + Math.imul(v, Q) | 0, 
        c = c + Math.imul(v, tt) | 0;
        var _t = (a + (s = s + Math.imul(l, rt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, nt) | 0) + Math.imul(d, rt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, nt) | 0) + (u >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, s = Math.imul(j, F), u = (u = Math.imul(j, W)) + Math.imul(A, F) | 0, 
        c = Math.imul(A, W), s = s + Math.imul(O, K) | 0, u = (u = u + Math.imul(O, H) | 0) + Math.imul(E, K) | 0, c = c + Math.imul(E, H) | 0, 
        s = s + Math.imul(S, J) | 0, u = (u = u + Math.imul(S, Y) | 0) + Math.imul(k, J) | 0, c = c + Math.imul(k, Y) | 0, s = s + Math.imul(w, Z) | 0, 
        u = (u = u + Math.imul(w, X) | 0) + Math.imul(_, Z) | 0, c = c + Math.imul(_, X) | 0, s = s + Math.imul(g, Q) | 0, u = (u = u + Math.imul(g, tt) | 0) + Math.imul(y, Q) | 0, 
        c = c + Math.imul(y, tt) | 0, s = s + Math.imul(p, rt) | 0, u = (u = u + Math.imul(p, nt) | 0) + Math.imul(v, rt) | 0, c = c + Math.imul(v, nt) | 0;
        var Mt = (a + (s = s + Math.imul(l, ot) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, at) | 0) + Math.imul(d, ot) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, at) | 0) + (u >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, s = Math.imul(R, F), u = (u = Math.imul(R, W)) + Math.imul(T, F) | 0, 
        c = Math.imul(T, W), s = s + Math.imul(j, K) | 0, u = (u = u + Math.imul(j, H) | 0) + Math.imul(A, K) | 0, c = c + Math.imul(A, H) | 0, 
        s = s + Math.imul(O, J) | 0, u = (u = u + Math.imul(O, Y) | 0) + Math.imul(E, J) | 0, c = c + Math.imul(E, Y) | 0, s = s + Math.imul(S, Z) | 0, 
        u = (u = u + Math.imul(S, X) | 0) + Math.imul(k, Z) | 0, c = c + Math.imul(k, X) | 0, s = s + Math.imul(w, Q) | 0, u = (u = u + Math.imul(w, tt) | 0) + Math.imul(_, Q) | 0, 
        c = c + Math.imul(_, tt) | 0, s = s + Math.imul(g, rt) | 0, u = (u = u + Math.imul(g, nt) | 0) + Math.imul(y, rt) | 0, c = c + Math.imul(y, nt) | 0, 
        s = s + Math.imul(p, ot) | 0, u = (u = u + Math.imul(p, at) | 0) + Math.imul(v, ot) | 0, c = c + Math.imul(v, at) | 0;
        var St = (a + (s = s + Math.imul(l, ut) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, ct) | 0) + Math.imul(d, ut) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, ct) | 0) + (u >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, s = Math.imul(L, F), u = (u = Math.imul(L, W)) + Math.imul(D, F) | 0, 
        c = Math.imul(D, W), s = s + Math.imul(R, K) | 0, u = (u = u + Math.imul(R, H) | 0) + Math.imul(T, K) | 0, c = c + Math.imul(T, H) | 0, 
        s = s + Math.imul(j, J) | 0, u = (u = u + Math.imul(j, Y) | 0) + Math.imul(A, J) | 0, c = c + Math.imul(A, Y) | 0, s = s + Math.imul(O, Z) | 0, 
        u = (u = u + Math.imul(O, X) | 0) + Math.imul(E, Z) | 0, c = c + Math.imul(E, X) | 0, s = s + Math.imul(S, Q) | 0, u = (u = u + Math.imul(S, tt) | 0) + Math.imul(k, Q) | 0, 
        c = c + Math.imul(k, tt) | 0, s = s + Math.imul(w, rt) | 0, u = (u = u + Math.imul(w, nt) | 0) + Math.imul(_, rt) | 0, c = c + Math.imul(_, nt) | 0, 
        s = s + Math.imul(g, ot) | 0, u = (u = u + Math.imul(g, at) | 0) + Math.imul(y, ot) | 0, c = c + Math.imul(y, at) | 0, s = s + Math.imul(p, ut) | 0, 
        u = (u = u + Math.imul(p, ct) | 0) + Math.imul(v, ut) | 0, c = c + Math.imul(v, ct) | 0;
        var kt = (a + (s = s + Math.imul(l, lt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, dt) | 0) + Math.imul(d, lt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, dt) | 0) + (u >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, s = Math.imul(U, F), u = (u = Math.imul(U, W)) + Math.imul(N, F) | 0, 
        c = Math.imul(N, W), s = s + Math.imul(L, K) | 0, u = (u = u + Math.imul(L, H) | 0) + Math.imul(D, K) | 0, c = c + Math.imul(D, H) | 0, 
        s = s + Math.imul(R, J) | 0, u = (u = u + Math.imul(R, Y) | 0) + Math.imul(T, J) | 0, c = c + Math.imul(T, Y) | 0, s = s + Math.imul(j, Z) | 0, 
        u = (u = u + Math.imul(j, X) | 0) + Math.imul(A, Z) | 0, c = c + Math.imul(A, X) | 0, s = s + Math.imul(O, Q) | 0, u = (u = u + Math.imul(O, tt) | 0) + Math.imul(E, Q) | 0, 
        c = c + Math.imul(E, tt) | 0, s = s + Math.imul(S, rt) | 0, u = (u = u + Math.imul(S, nt) | 0) + Math.imul(k, rt) | 0, c = c + Math.imul(k, nt) | 0, 
        s = s + Math.imul(w, ot) | 0, u = (u = u + Math.imul(w, at) | 0) + Math.imul(_, ot) | 0, c = c + Math.imul(_, at) | 0, s = s + Math.imul(g, ut) | 0, 
        u = (u = u + Math.imul(g, ct) | 0) + Math.imul(y, ut) | 0, c = c + Math.imul(y, ct) | 0, s = s + Math.imul(p, lt) | 0, u = (u = u + Math.imul(p, dt) | 0) + Math.imul(v, lt) | 0, 
        c = c + Math.imul(v, dt) | 0;
        var xt = (a + (s = s + Math.imul(l, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(l, vt) | 0) + Math.imul(d, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(d, vt) | 0) + (u >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, s = Math.imul(U, K), u = (u = Math.imul(U, H)) + Math.imul(N, K) | 0, 
        c = Math.imul(N, H), s = s + Math.imul(L, J) | 0, u = (u = u + Math.imul(L, Y) | 0) + Math.imul(D, J) | 0, c = c + Math.imul(D, Y) | 0, 
        s = s + Math.imul(R, Z) | 0, u = (u = u + Math.imul(R, X) | 0) + Math.imul(T, Z) | 0, c = c + Math.imul(T, X) | 0, s = s + Math.imul(j, Q) | 0, 
        u = (u = u + Math.imul(j, tt) | 0) + Math.imul(A, Q) | 0, c = c + Math.imul(A, tt) | 0, s = s + Math.imul(O, rt) | 0, u = (u = u + Math.imul(O, nt) | 0) + Math.imul(E, rt) | 0, 
        c = c + Math.imul(E, nt) | 0, s = s + Math.imul(S, ot) | 0, u = (u = u + Math.imul(S, at) | 0) + Math.imul(k, ot) | 0, c = c + Math.imul(k, at) | 0, 
        s = s + Math.imul(w, ut) | 0, u = (u = u + Math.imul(w, ct) | 0) + Math.imul(_, ut) | 0, c = c + Math.imul(_, ct) | 0, s = s + Math.imul(g, lt) | 0, 
        u = (u = u + Math.imul(g, dt) | 0) + Math.imul(y, lt) | 0, c = c + Math.imul(y, dt) | 0;
        var Ot = (a + (s = s + Math.imul(p, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(p, vt) | 0) + Math.imul(v, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(v, vt) | 0) + (u >>> 13) | 0) + (Ot >>> 26) | 0, Ot &= 67108863, s = Math.imul(U, J), u = (u = Math.imul(U, Y)) + Math.imul(N, J) | 0, 
        c = Math.imul(N, Y), s = s + Math.imul(L, Z) | 0, u = (u = u + Math.imul(L, X) | 0) + Math.imul(D, Z) | 0, c = c + Math.imul(D, X) | 0, 
        s = s + Math.imul(R, Q) | 0, u = (u = u + Math.imul(R, tt) | 0) + Math.imul(T, Q) | 0, c = c + Math.imul(T, tt) | 0, s = s + Math.imul(j, rt) | 0, 
        u = (u = u + Math.imul(j, nt) | 0) + Math.imul(A, rt) | 0, c = c + Math.imul(A, nt) | 0, s = s + Math.imul(O, ot) | 0, u = (u = u + Math.imul(O, at) | 0) + Math.imul(E, ot) | 0, 
        c = c + Math.imul(E, at) | 0, s = s + Math.imul(S, ut) | 0, u = (u = u + Math.imul(S, ct) | 0) + Math.imul(k, ut) | 0, c = c + Math.imul(k, ct) | 0, 
        s = s + Math.imul(w, lt) | 0, u = (u = u + Math.imul(w, dt) | 0) + Math.imul(_, lt) | 0, c = c + Math.imul(_, dt) | 0;
        var Et = (a + (s = s + Math.imul(g, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(g, vt) | 0) + Math.imul(y, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(y, vt) | 0) + (u >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, s = Math.imul(U, Z), u = (u = Math.imul(U, X)) + Math.imul(N, Z) | 0, 
        c = Math.imul(N, X), s = s + Math.imul(L, Q) | 0, u = (u = u + Math.imul(L, tt) | 0) + Math.imul(D, Q) | 0, c = c + Math.imul(D, tt) | 0, 
        s = s + Math.imul(R, rt) | 0, u = (u = u + Math.imul(R, nt) | 0) + Math.imul(T, rt) | 0, c = c + Math.imul(T, nt) | 0, s = s + Math.imul(j, ot) | 0, 
        u = (u = u + Math.imul(j, at) | 0) + Math.imul(A, ot) | 0, c = c + Math.imul(A, at) | 0, s = s + Math.imul(O, ut) | 0, u = (u = u + Math.imul(O, ct) | 0) + Math.imul(E, ut) | 0, 
        c = c + Math.imul(E, ct) | 0, s = s + Math.imul(S, lt) | 0, u = (u = u + Math.imul(S, dt) | 0) + Math.imul(k, lt) | 0, c = c + Math.imul(k, dt) | 0;
        var Pt = (a + (s = s + Math.imul(w, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(w, vt) | 0) + Math.imul(_, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(_, vt) | 0) + (u >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863, s = Math.imul(U, Q), u = (u = Math.imul(U, tt)) + Math.imul(N, Q) | 0, 
        c = Math.imul(N, tt), s = s + Math.imul(L, rt) | 0, u = (u = u + Math.imul(L, nt) | 0) + Math.imul(D, rt) | 0, c = c + Math.imul(D, nt) | 0, 
        s = s + Math.imul(R, ot) | 0, u = (u = u + Math.imul(R, at) | 0) + Math.imul(T, ot) | 0, c = c + Math.imul(T, at) | 0, s = s + Math.imul(j, ut) | 0, 
        u = (u = u + Math.imul(j, ct) | 0) + Math.imul(A, ut) | 0, c = c + Math.imul(A, ct) | 0, s = s + Math.imul(O, lt) | 0, u = (u = u + Math.imul(O, dt) | 0) + Math.imul(E, lt) | 0, 
        c = c + Math.imul(E, dt) | 0;
        var jt = (a + (s = s + Math.imul(S, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(S, vt) | 0) + Math.imul(k, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(k, vt) | 0) + (u >>> 13) | 0) + (jt >>> 26) | 0, jt &= 67108863, s = Math.imul(U, rt), u = (u = Math.imul(U, nt)) + Math.imul(N, rt) | 0, 
        c = Math.imul(N, nt), s = s + Math.imul(L, ot) | 0, u = (u = u + Math.imul(L, at) | 0) + Math.imul(D, ot) | 0, c = c + Math.imul(D, at) | 0, 
        s = s + Math.imul(R, ut) | 0, u = (u = u + Math.imul(R, ct) | 0) + Math.imul(T, ut) | 0, c = c + Math.imul(T, ct) | 0, s = s + Math.imul(j, lt) | 0, 
        u = (u = u + Math.imul(j, dt) | 0) + Math.imul(A, lt) | 0, c = c + Math.imul(A, dt) | 0;
        var At = (a + (s = s + Math.imul(O, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(O, vt) | 0) + Math.imul(E, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(E, vt) | 0) + (u >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, s = Math.imul(U, ot), u = (u = Math.imul(U, at)) + Math.imul(N, ot) | 0, 
        c = Math.imul(N, at), s = s + Math.imul(L, ut) | 0, u = (u = u + Math.imul(L, ct) | 0) + Math.imul(D, ut) | 0, c = c + Math.imul(D, ct) | 0, 
        s = s + Math.imul(R, lt) | 0, u = (u = u + Math.imul(R, dt) | 0) + Math.imul(T, lt) | 0, c = c + Math.imul(T, dt) | 0;
        var Ct = (a + (s = s + Math.imul(j, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(j, vt) | 0) + Math.imul(A, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(A, vt) | 0) + (u >>> 13) | 0) + (Ct >>> 26) | 0, Ct &= 67108863, s = Math.imul(U, ut), u = (u = Math.imul(U, ct)) + Math.imul(N, ut) | 0, 
        c = Math.imul(N, ct), s = s + Math.imul(L, lt) | 0, u = (u = u + Math.imul(L, dt) | 0) + Math.imul(D, lt) | 0, c = c + Math.imul(D, dt) | 0;
        var Rt = (a + (s = s + Math.imul(R, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(R, vt) | 0) + Math.imul(T, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(T, vt) | 0) + (u >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, s = Math.imul(U, lt), u = (u = Math.imul(U, dt)) + Math.imul(N, lt) | 0, 
        c = Math.imul(N, dt);
        var Tt = (a + (s = s + Math.imul(L, pt) | 0) | 0) + ((8191 & (u = (u = u + Math.imul(L, vt) | 0) + Math.imul(D, pt) | 0)) << 13) | 0;
        a = ((c = c + Math.imul(D, vt) | 0) + (u >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863;
        var It = (a + (s = Math.imul(U, pt)) | 0) + ((8191 & (u = (u = Math.imul(U, vt)) + Math.imul(N, pt) | 0)) << 13) | 0;
        return a = ((c = Math.imul(N, vt)) + (u >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, o[0] = mt, o[1] = gt, o[2] = yt, 
        o[3] = bt, o[4] = wt, o[5] = _t, o[6] = Mt, o[7] = St, o[8] = kt, o[9] = xt, o[10] = Ot, o[11] = Et, o[12] = Pt, o[13] = jt, 
        o[14] = At, o[15] = Ct, o[16] = Rt, o[17] = Tt, o[18] = It, 0 !== a && (o[19] = a, r.length++), r;
      };
      function g(t, e, r) {
        r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
        var n = 0;
        var i = 0;
        for (var o = 0; o < r.length - 1; o++) {
          var a = i;
          i = 0;
          var s = 67108863 & n;
          var u = Math.min(o, e.length - 1);
          for (var c = Math.max(0, o - t.length + 1); c <= u; c++) {
            var h = o - c;
            var l = (0 | t.words[h]) * (0 | e.words[c]);
            var d = 67108863 & l;
            s = 67108863 & (d = d + s | 0), i += (a = (a = a + (l / 67108864 | 0) | 0) + (d >>> 26) | 0) >>> 26, a &= 67108863;
          }
          r.words[o] = s, n = a, a = i;
        }
        return 0 !== n ? r.words[o] = n : r.length--, r._strip();
      }
      function y(t, e, r) {
        return g(t, e, r);
      }
      function b(t, e) {
        this.x = t, this.y = e;
      }
      Math.imul || (m = v), o.prototype.mulTo = function(t, e) {
        var r = this.length + t.length;
        return 10 === this.length && 10 === t.length ? m(this, t, e) : r < 63 ? v(this, t, e) : r < 1024 ? g(this, t, e) : y(this, t, e);
      }, b.prototype.makeRBT = function(t) {
        var e = new Array(t);
        var r = o.prototype._countBits(t) - 1;
        for (var n = 0; n < t; n++) e[n] = this.revBin(n, r, t);
        return e;
      }, b.prototype.revBin = function(t, e, r) {
        if (0 === t || t === r - 1) return t;
        var n = 0;
        for (var i = 0; i < e; i++) n |= (1 & t) << e - i - 1, t >>= 1;
        return n;
      }, b.prototype.permute = function(t, e, r, n, i, o) {
        for (var a = 0; a < o; a++) n[a] = e[t[a]], i[a] = r[t[a]];
      }, b.prototype.transform = function(t, e, r, n, i, o) {
        this.permute(o, t, e, r, n, i);
        for (var a = 1; a < i; a <<= 1) {
          var s = a << 1;
          var u = Math.cos(2 * Math.PI / s);
          var c = Math.sin(2 * Math.PI / s);
          for (var h = 0; h < i; h += s) {
            var l = u;
            var d = c;
            for (var f = 0; f < a; f++) {
              var p = r[h + f];
              var v = n[h + f];
              var m = r[h + f + a];
              var g = n[h + f + a];
              var y = l * m - d * g;
              g = l * g + d * m, m = y, r[h + f] = p + m, n[h + f] = v + g, r[h + f + a] = p - m, n[h + f + a] = v - g, f !== s && (y = u * l - c * d, 
              d = u * d + c * l, l = y);
            }
          }
        }
      }, b.prototype.guessLen13b = function(t, e) {
        var r = 1 | Math.max(e, t);
        var n = 1 & r;
        var i = 0;
        for (r = r / 2 | 0; r; r >>>= 1) i++;
        return 1 << i + 1 + n;
      }, b.prototype.conjugate = function(t, e, r) {
        if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
          var i = t[n];
          t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
        }
      }, b.prototype.normalize13b = function(t, e) {
        var r = 0;
        for (var n = 0; n < e / 2; n++) {
          var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
          t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
        }
        return t;
      }, b.prototype.convert13b = function(t, e, r, i) {
        var o = 0;
        for (var a = 0; a < e; a++) o += 0 | t[a], r[2 * a] = 8191 & o, o >>>= 13, r[2 * a + 1] = 8191 & o, o >>>= 13;
        for (a = 2 * e; a < i; ++a) r[a] = 0;
        n(0 === o), n(0 == (-8192 & o));
      }, b.prototype.stub = function(t) {
        var e = new Array(t);
        for (var r = 0; r < t; r++) e[r] = 0;
        return e;
      }, b.prototype.mulp = function(t, e, r) {
        var n = 2 * this.guessLen13b(t.length, e.length);
        var i = this.makeRBT(n);
        var o = this.stub(n);
        var a = new Array(n);
        var s = new Array(n);
        var u = new Array(n);
        var c = new Array(n);
        var h = new Array(n);
        var l = new Array(n);
        var d = r.words;
        d.length = n, this.convert13b(t.words, t.length, a, n), this.convert13b(e.words, e.length, c, n), this.transform(a, o, s, u, n, i), 
        this.transform(c, o, h, l, n, i);
        for (var f = 0; f < n; f++) {
          var p = s[f] * h[f] - u[f] * l[f];
          u[f] = s[f] * l[f] + u[f] * h[f], s[f] = p;
        }
        return this.conjugate(s, u, n), this.transform(s, u, d, o, n, i), this.conjugate(d, o, n), this.normalize13b(d, n), r.negative = t.negative ^ e.negative, 
        r.length = t.length + e.length, r._strip();
      }, o.prototype.mul = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), this.mulTo(t, e);
      }, o.prototype.mulf = function(t) {
        var e = new o(null);
        return e.words = new Array(this.length + t.length), y(this, t, e);
      }, o.prototype.imul = function(t) {
        return this.clone().mulTo(t, this);
      }, o.prototype.imuln = function(t) {
        var e = t < 0;
        e && (t = -t), n('number' == typeof t), n(t < 67108864);
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var o = (0 | this.words[i]) * t;
          var a = (67108863 & o) + (67108863 & r);
          r >>= 26, r += o / 67108864 | 0, r += a >>> 26, this.words[i] = 67108863 & a;
        }
        return 0 !== r && (this.words[i] = r, this.length++), e ? this.ineg() : this;
      }, o.prototype.muln = function(t) {
        return this.clone().imuln(t);
      }, o.prototype.sqr = function() {
        return this.mul(this);
      }, o.prototype.isqr = function() {
        return this.imul(this.clone());
      }, o.prototype.pow = function(t) {
        var e = function(t) {
          var e = new Array(t.bitLength());
          for (var r = 0; r < e.length; r++) {
            var n = r / 26 | 0;
            var i = r % 26;
            e[r] = t.words[n] >>> i & 1;
          }
          return e;
        }(t);
        if (0 === e.length) return new o(1);
        var r = this;
        for (var n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr()) ;
        if (++n < e.length) for (var i = r.sqr(); n < e.length; n++, i = i.sqr()) 0 !== e[n] && (r = r.mul(i));
        return r;
      }, o.prototype.iushln = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 67108863 >>> 26 - e << 26 - e;
        var o;
        if (0 !== e) {
          var a = 0;
          for (o = 0; o < this.length; o++) {
            var s = this.words[o] & i;
            var u = (0 | this.words[o]) - s << e;
            this.words[o] = u | a, a = s >>> 26 - e;
          }
          a && (this.words[o] = a, this.length++);
        }
        if (0 !== r) {
          for (o = this.length - 1; o >= 0; o--) this.words[o + r] = this.words[o];
          for (o = 0; o < r; o++) this.words[o] = 0;
          this.length += r;
        }
        return this._strip();
      }, o.prototype.ishln = function(t) {
        return n(0 === this.negative), this.iushln(t);
      }, o.prototype.iushrn = function(t, e, r) {
        var i;
        n('number' == typeof t && t >= 0), i = e ? (e - e % 26) / 26 : 0;
        var o = t % 26;
        var a = Math.min((t - o) / 26, this.length);
        var s = 67108863 ^ 67108863 >>> o << o;
        var u = r;
        if (i -= a, i = Math.max(0, i), u) {
          for (var c = 0; c < a; c++) u.words[c] = this.words[c];
          u.length = a;
        }
        if (0 === a) ; else if (this.length > a) for (this.length -= a, c = 0; c < this.length; c++) this.words[c] = this.words[c + a]; else this.words[0] = 0, 
        this.length = 1;
        var h = 0;
        for (c = this.length - 1; c >= 0 && (0 !== h || c >= i); c--) {
          var l = 0 | this.words[c];
          this.words[c] = h << 26 - o | l >>> o, h = l & s;
        }
        return u && 0 !== h && (u.words[u.length++] = h), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
      }, o.prototype.ishrn = function(t, e, r) {
        return n(0 === this.negative), this.iushrn(t, e, r);
      }, o.prototype.shln = function(t) {
        return this.clone().ishln(t);
      }, o.prototype.ushln = function(t) {
        return this.clone().iushln(t);
      }, o.prototype.shrn = function(t) {
        return this.clone().ishrn(t);
      }, o.prototype.ushrn = function(t) {
        return this.clone().iushrn(t);
      }, o.prototype.testn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        return !(this.length <= r) && !!(this.words[r] & i);
      }, o.prototype.imaskn = function(t) {
        n('number' == typeof t && t >= 0);
        var e = t % 26;
        var r = (t - e) / 26;
        if (n(0 === this.negative, 'imaskn works only with positive numbers'), this.length <= r) return this;
        if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
          var i = 67108863 ^ 67108863 >>> e << e;
          this.words[this.length - 1] &= i;
        }
        return this._strip();
      }, o.prototype.maskn = function(t) {
        return this.clone().imaskn(t);
      }, o.prototype.iaddn = function(t) {
        return n('number' == typeof t), n(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= t ? (this.words[0] = t - (0 | this.words[0]), 
        this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, this) : this._iaddn(t);
      }, o.prototype._iaddn = function(t) {
        this.words[0] += t;
        for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) this.words[e] -= 67108864, e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
        return this.length = Math.max(this.length, e + 1), this;
      }, o.prototype.isubn = function(t) {
        if (n('number' == typeof t), n(t < 67108864), t < 0) return this.iaddn(-t);
        if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, this;
        if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var e = 0; e < this.length && this.words[e] < 0; e++) this.words[e] += 67108864, 
        this.words[e + 1] -= 1;
        return this._strip();
      }, o.prototype.addn = function(t) {
        return this.clone().iaddn(t);
      }, o.prototype.subn = function(t) {
        return this.clone().isubn(t);
      }, o.prototype.iabs = function() {
        return this.negative = 0, this;
      }, o.prototype.abs = function() {
        return this.clone().iabs();
      }, o.prototype._ishlnsubmul = function(t, e, r) {
        var i = t.length + r;
        var o;
        var a;
        this._expand(i);
        var s = 0;
        for (o = 0; o < t.length; o++) {
          a = (0 | this.words[o + r]) + s;
          var u = (0 | t.words[o]) * e;
          s = ((a -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[o + r] = 67108863 & a;
        }
        for (;o < this.length - r; o++) s = (a = (0 | this.words[o + r]) + s) >> 26, this.words[o + r] = 67108863 & a;
        if (0 === s) return this._strip();
        for (n(-1 === s), s = 0, o = 0; o < this.length; o++) s = (a = -(0 | this.words[o]) + s) >> 26, this.words[o] = 67108863 & a;
        return this.negative = 1, this._strip();
      }, o.prototype._wordDiv = function(t, e) {
        var r = (this.length, t.length);
        var n = this.clone();
        var i = t;
        var a = 0 | i.words[i.length - 1];
        0 !== (r = 26 - this._countBits(a)) && (i = i.ushln(r), n.iushln(r), a = 0 | i.words[i.length - 1]);
        var s = n.length - i.length;
        var u;
        if ('mod' !== e) {
          (u = new o(null)).length = s + 1, u.words = new Array(u.length);
          for (var c = 0; c < u.length; c++) u.words[c] = 0;
        }
        var h = n.clone()._ishlnsubmul(i, 1, s);
        0 === h.negative && (n = h, u && (u.words[s] = 1));
        for (var l = s - 1; l >= 0; l--) {
          var d = 67108864 * (0 | n.words[i.length + l]) + (0 | n.words[i.length + l - 1]);
          for (d = Math.min(d / a | 0, 67108863), n._ishlnsubmul(i, d, l); 0 !== n.negative; ) d--, n.negative = 0, n._ishlnsubmul(i, 1, l), 
          n.isZero() || (n.negative ^= 1);
          u && (u.words[l] = d);
        }
        return u && u._strip(), n._strip(), 'div' !== e && 0 !== r && n.iushrn(r), {
          div: u || null,
          mod: n
        };
      }, o.prototype.divmod = function(t, e, r) {
        return n(!t.isZero()), this.isZero() ? {
          div: new o(0),
          mod: new o(0)
        } : 0 !== this.negative && 0 === t.negative ? (s = this.neg().divmod(t, e), 'mod' !== e && (i = s.div.neg()), 'div' !== e && (a = s.mod.neg(), 
        r && 0 !== a.negative && a.iadd(t)), {
          div: i,
          mod: a
        }) : 0 === this.negative && 0 !== t.negative ? (s = this.divmod(t.neg(), e), 'mod' !== e && (i = s.div.neg()), {
          div: i,
          mod: s.mod
        }) : 0 != (this.negative & t.negative) ? (s = this.neg().divmod(t.neg(), e), 'div' !== e && (a = s.mod.neg(), r && 0 !== a.negative && a.isub(t)), 
        {
          div: s.div,
          mod: a
        }) : t.length > this.length || this.cmp(t) < 0 ? {
          div: new o(0),
          mod: this
        } : 1 === t.length ? 'div' === e ? {
          div: this.divn(t.words[0]),
          mod: null
        } : 'mod' === e ? {
          div: null,
          mod: new o(this.modrn(t.words[0]))
        } : {
          div: this.divn(t.words[0]),
          mod: new o(this.modrn(t.words[0]))
        } : this._wordDiv(t, e);
        var i, a, s;
      }, o.prototype.div = function(t) {
        return this.divmod(t, 'div', !1).div;
      }, o.prototype.mod = function(t) {
        return this.divmod(t, 'mod', !1).mod;
      }, o.prototype.umod = function(t) {
        return this.divmod(t, 'mod', !0).mod;
      }, o.prototype.divRound = function(t) {
        var e = this.divmod(t);
        if (e.mod.isZero()) return e.div;
        var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod;
        var n = t.ushrn(1);
        var i = t.andln(1);
        var o = r.cmp(n);
        return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
      }, o.prototype.modrn = function(t) {
        var e = t < 0;
        e && (t = -t), n(t <= 67108863);
        var r = (1 << 26) % t;
        var i = 0;
        for (var o = this.length - 1; o >= 0; o--) i = (r * i + (0 | this.words[o])) % t;
        return e ? -i : i;
      }, o.prototype.modn = function(t) {
        return this.modrn(t);
      }, o.prototype.idivn = function(t) {
        var e = t < 0;
        e && (t = -t), n(t <= 67108863);
        var r = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var o = (0 | this.words[i]) + 67108864 * r;
          this.words[i] = o / t | 0, r = o % t;
        }
        return this._strip(), e ? this.ineg() : this;
      }, o.prototype.divn = function(t) {
        return this.clone().idivn(t);
      }, o.prototype.egcd = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = new o(0);
        var u = new o(1);
        var c = 0;
        for (;e.isEven() && r.isEven(); ) e.iushrn(1), r.iushrn(1), ++c;
        var h = r.clone();
        var l = e.clone();
        for (;!e.isZero(); ) {
          for (var d = 0, f = 1; 0 == (e.words[0] & f) && d < 26; ++d, f <<= 1) ;
          if (d > 0) for (e.iushrn(d); d-- > 0; ) (i.isOdd() || a.isOdd()) && (i.iadd(h), a.isub(l)), i.iushrn(1), a.iushrn(1);
          for (var p = 0, v = 1; 0 == (r.words[0] & v) && p < 26; ++p, v <<= 1) ;
          if (p > 0) for (r.iushrn(p); p-- > 0; ) (s.isOdd() || u.isOdd()) && (s.iadd(h), u.isub(l)), s.iushrn(1), u.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(s), a.isub(u)) : (r.isub(e), s.isub(i), u.isub(a));
        }
        return {
          a: s,
          b: u,
          gcd: r.iushln(c)
        };
      }, o.prototype._invmp = function(t) {
        n(0 === t.negative), n(!t.isZero());
        var e = this;
        var r = t.clone();
        e = 0 !== e.negative ? e.umod(t) : e.clone();
        var i = new o(1);
        var a = new o(0);
        var s = r.clone();
        for (;e.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
          for (var u = 0, c = 1; 0 == (e.words[0] & c) && u < 26; ++u, c <<= 1) ;
          if (u > 0) for (e.iushrn(u); u-- > 0; ) i.isOdd() && i.iadd(s), i.iushrn(1);
          for (var h = 0, l = 1; 0 == (r.words[0] & l) && h < 26; ++h, l <<= 1) ;
          if (h > 0) for (r.iushrn(h); h-- > 0; ) a.isOdd() && a.iadd(s), a.iushrn(1);
          e.cmp(r) >= 0 ? (e.isub(r), i.isub(a)) : (r.isub(e), a.isub(i));
        }
        var d;
        return (d = 0 === e.cmpn(1) ? i : a).cmpn(0) < 0 && d.iadd(t), d;
      }, o.prototype.gcd = function(t) {
        if (this.isZero()) return t.abs();
        if (t.isZero()) return this.abs();
        var e = this.clone();
        var r = t.clone();
        e.negative = 0, r.negative = 0;
        for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
        for (;;) {
          for (;e.isEven(); ) e.iushrn(1);
          for (;r.isEven(); ) r.iushrn(1);
          var i = e.cmp(r);
          if (i < 0) {
            var o = e;
            e = r, r = o;
          } else if (0 === i || 0 === r.cmpn(1)) break;
          e.isub(r);
        }
        return r.iushln(n);
      }, o.prototype.invm = function(t) {
        return this.egcd(t).a.umod(t);
      }, o.prototype.isEven = function() {
        return 0 == (1 & this.words[0]);
      }, o.prototype.isOdd = function() {
        return 1 == (1 & this.words[0]);
      }, o.prototype.andln = function(t) {
        return this.words[0] & t;
      }, o.prototype.bincn = function(t) {
        n('number' == typeof t);
        var e = t % 26;
        var r = (t - e) / 26;
        var i = 1 << e;
        if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
        var o = i;
        for (var a = r; 0 !== o && a < this.length; a++) {
          var s = 0 | this.words[a];
          o = (s += o) >>> 26, s &= 67108863, this.words[a] = s;
        }
        return 0 !== o && (this.words[a] = o, this.length++), this;
      }, o.prototype.isZero = function() {
        return 1 === this.length && 0 === this.words[0];
      }, o.prototype.cmpn = function(t) {
        var e = t < 0;
        if (0 !== this.negative && !e) return -1;
        if (0 === this.negative && e) return 1;
        var r;
        if (this._strip(), this.length > 1) r = 1; else {
          e && (t = -t), n(t <= 67108863, 'Number is too big');
          var i = 0 | this.words[0];
          r = i === t ? 0 : i < t ? -1 : 1;
        }
        return 0 !== this.negative ? 0 | -r : r;
      }, o.prototype.cmp = function(t) {
        if (0 !== this.negative && 0 === t.negative) return -1;
        if (0 === this.negative && 0 !== t.negative) return 1;
        var e = this.ucmp(t);
        return 0 !== this.negative ? 0 | -e : e;
      }, o.prototype.ucmp = function(t) {
        if (this.length > t.length) return 1;
        if (this.length < t.length) return -1;
        var e = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var n = 0 | this.words[r];
          var i = 0 | t.words[r];
          if (n !== i) {
            n < i ? e = -1 : n > i && (e = 1);
            break;
          }
        }
        return e;
      }, o.prototype.gtn = function(t) {
        return 1 === this.cmpn(t);
      }, o.prototype.gt = function(t) {
        return 1 === this.cmp(t);
      }, o.prototype.gten = function(t) {
        return this.cmpn(t) >= 0;
      }, o.prototype.gte = function(t) {
        return this.cmp(t) >= 0;
      }, o.prototype.ltn = function(t) {
        return -1 === this.cmpn(t);
      }, o.prototype.lt = function(t) {
        return -1 === this.cmp(t);
      }, o.prototype.lten = function(t) {
        return this.cmpn(t) <= 0;
      }, o.prototype.lte = function(t) {
        return this.cmp(t) <= 0;
      }, o.prototype.eqn = function(t) {
        return 0 === this.cmpn(t);
      }, o.prototype.eq = function(t) {
        return 0 === this.cmp(t);
      }, o.red = function(t) {
        return new O(t);
      }, o.prototype.toRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), n(0 === this.negative, 'red works only with positives'), t.convertTo(this)._forceRed(t);
      }, o.prototype.fromRed = function() {
        return n(this.red, 'fromRed works only with numbers in reduction context'), this.red.convertFrom(this);
      }, o.prototype._forceRed = function(t) {
        return this.red = t, this;
      }, o.prototype.forceRed = function(t) {
        return n(!this.red, 'Already a number in reduction context'), this._forceRed(t);
      }, o.prototype.redAdd = function(t) {
        return n(this.red, 'redAdd works only with red numbers'), this.red.add(this, t);
      }, o.prototype.redIAdd = function(t) {
        return n(this.red, 'redIAdd works only with red numbers'), this.red.iadd(this, t);
      }, o.prototype.redSub = function(t) {
        return n(this.red, 'redSub works only with red numbers'), this.red.sub(this, t);
      }, o.prototype.redISub = function(t) {
        return n(this.red, 'redISub works only with red numbers'), this.red.isub(this, t);
      }, o.prototype.redShl = function(t) {
        return n(this.red, 'redShl works only with red numbers'), this.red.shl(this, t);
      }, o.prototype.redMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.mul(this, t);
      }, o.prototype.redIMul = function(t) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, t), this.red.imul(this, t);
      }, o.prototype.redSqr = function() {
        return n(this.red, 'redSqr works only with red numbers'), this.red._verify1(this), this.red.sqr(this);
      }, o.prototype.redISqr = function() {
        return n(this.red, 'redISqr works only with red numbers'), this.red._verify1(this), this.red.isqr(this);
      }, o.prototype.redSqrt = function() {
        return n(this.red, 'redSqrt works only with red numbers'), this.red._verify1(this), this.red.sqrt(this);
      }, o.prototype.redInvm = function() {
        return n(this.red, 'redInvm works only with red numbers'), this.red._verify1(this), this.red.invm(this);
      }, o.prototype.redNeg = function() {
        return n(this.red, 'redNeg works only with red numbers'), this.red._verify1(this), this.red.neg(this);
      }, o.prototype.redPow = function(t) {
        return n(this.red && !t.red, 'redPow(normalNum)'), this.red._verify1(this), this.red.pow(this, t);
      };
      var w = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function _(t, e) {
        this.name = t, this.p = new o(e, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      function M() {
        _.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      function S() {
        _.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      function k() {
        _.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      function x() {
        _.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      function O(t) {
        if ('string' == typeof t) {
          var e = o._prime(t);
          this.m = e.p, this.prime = e;
        } else n(t.gtn(1), 'modulus must be greater than 1'), this.m = t, this.prime = null;
      }
      function E(t) {
        O.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), 
        this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
        this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      _.prototype._tmp = function() {
        var t = new o(null);
        return t.words = new Array(Math.ceil(this.n / 13)), t;
      }, _.prototype.ireduce = function(t) {
        var e = t;
        var r;
        do {
          this.split(e, this.tmp), r = (e = (e = this.imulK(e)).iadd(this.tmp)).bitLength();
        } while (r > this.n);
        var n = r < this.n ? -1 : e.ucmp(this.p);
        return 0 === n ? (e.words[0] = 0, e.length = 1) : n > 0 ? e.isub(this.p) : void 0 !== e.strip ? e.strip() : e._strip(), 
        e;
      }, _.prototype.split = function(t, e) {
        t.iushrn(this.n, 0, e);
      }, _.prototype.imulK = function(t) {
        return t.imul(this.k);
      }, i(M, _), M.prototype.split = function(t, e) {
        var r = 4194303;
        var n = Math.min(t.length, 9);
        for (var i = 0; i < n; i++) e.words[i] = t.words[i];
        if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
        var o = t.words[9];
        for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
          var a = 0 | t.words[i];
          t.words[i - 10] = (a & r) << 4 | o >>> 22, o = a;
        }
        o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
      }, M.prototype.imulK = function(t) {
        t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 0 | t.words[r];
          e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
        }
        return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), t;
      }, i(S, _), i(k, _), i(x, _), x.prototype.imulK = function(t) {
        var e = 0;
        for (var r = 0; r < t.length; r++) {
          var n = 19 * (0 | t.words[r]) + e;
          var i = 67108863 & n;
          n >>>= 26, t.words[r] = i, e = n;
        }
        return 0 !== e && (t.words[t.length++] = e), t;
      }, o._prime = function(t) {
        if (w[t]) return w[t];
        var e;
        if ('k256' === t) e = new M; else if ('p224' === t) e = new S; else if ('p192' === t) e = new k; else {
          if ('p25519' !== t) throw new Error('Unknown prime ' + t);
          e = new x;
        }
        return w[t] = e, e;
      }, O.prototype._verify1 = function(t) {
        n(0 === t.negative, 'red works only with positives'), n(t.red, 'red works only with red numbers');
      }, O.prototype._verify2 = function(t, e) {
        n(0 == (t.negative | e.negative), 'red works only with positives'), n(t.red && t.red === e.red, 'red works only with red numbers');
      }, O.prototype.imod = function(t) {
        return this.prime ? this.prime.ireduce(t)._forceRed(this) : (h(t, t.umod(this.m)._forceRed(this)), t);
      }, O.prototype.neg = function(t) {
        return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
      }, O.prototype.add = function(t, e) {
        this._verify2(t, e);
        var r = t.add(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
      }, O.prototype.iadd = function(t, e) {
        this._verify2(t, e);
        var r = t.iadd(e);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r;
      }, O.prototype.sub = function(t, e) {
        this._verify2(t, e);
        var r = t.sub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
      }, O.prototype.isub = function(t, e) {
        this._verify2(t, e);
        var r = t.isub(e);
        return r.cmpn(0) < 0 && r.iadd(this.m), r;
      }, O.prototype.shl = function(t, e) {
        return this._verify1(t), this.imod(t.ushln(e));
      }, O.prototype.imul = function(t, e) {
        return this._verify2(t, e), this.imod(t.imul(e));
      }, O.prototype.mul = function(t, e) {
        return this._verify2(t, e), this.imod(t.mul(e));
      }, O.prototype.isqr = function(t) {
        return this.imul(t, t.clone());
      }, O.prototype.sqr = function(t) {
        return this.mul(t, t);
      }, O.prototype.sqrt = function(t) {
        if (t.isZero()) return t.clone();
        var e = this.m.andln(3);
        if (n(e % 2 == 1), 3 === e) {
          var r = this.m.add(new o(1)).iushrn(2);
          return this.pow(t, r);
        }
        var i = this.m.subn(1);
        var a = 0;
        for (;!i.isZero() && 0 === i.andln(1); ) a++, i.iushrn(1);
        n(!i.isZero());
        var s = new o(1).toRed(this);
        var u = s.redNeg();
        var c = this.m.subn(1).iushrn(1);
        var h = this.m.bitLength();
        for (h = new o(2 * h * h).toRed(this); 0 !== this.pow(h, c).cmp(u); ) h.redIAdd(u);
        var l = this.pow(h, i);
        var d = this.pow(t, i.addn(1).iushrn(1));
        var f = this.pow(t, i);
        var p = a;
        for (;0 !== f.cmp(s); ) {
          var v = f;
          for (var m = 0; 0 !== v.cmp(s); m++) v = v.redSqr();
          n(m < p);
          var g = this.pow(l, new o(1).iushln(p - m - 1));
          d = d.redMul(g), l = g.redSqr(), f = f.redMul(l), p = m;
        }
        return d;
      }, O.prototype.invm = function(t) {
        var e = t._invmp(this.m);
        return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
      }, O.prototype.pow = function(t, e) {
        if (e.isZero()) return new o(1).toRed(this);
        if (0 === e.cmpn(1)) return t.clone();
        var r = new Array(16);
        r[0] = new o(1).toRed(this), r[1] = t;
        for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
        var i = r[0];
        var a = 0;
        var s = 0;
        var u = e.bitLength() % 26;
        for (0 === u && (u = 26), n = e.length - 1; n >= 0; n--) {
          var c = e.words[n];
          for (var h = u - 1; h >= 0; h--) {
            var l = c >> h & 1;
            i !== r[0] && (i = this.sqr(i)), 0 !== l || 0 !== a ? (a <<= 1, a |= l, (4 === ++s || 0 === n && 0 === h) && (i = this.mul(i, r[a]), 
            s = 0, a = 0)) : s = 0;
          }
          u = 26;
        }
        return i;
      }, O.prototype.convertTo = function(t) {
        var e = t.umod(this.m);
        return e === t ? e.clone() : e;
      }, O.prototype.convertFrom = function(t) {
        var e = t.clone();
        return e.red = null, e;
      }, o.mont = function(t) {
        return new E(t);
      }, i(E, O), E.prototype.convertTo = function(t) {
        return this.imod(t.ushln(this.shift));
      }, E.prototype.convertFrom = function(t) {
        var e = this.imod(t.mul(this.rinv));
        return e.red = null, e;
      }, E.prototype.imul = function(t, e) {
        if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
        var r = t.imul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var o = i;
        return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
      }, E.prototype.mul = function(t, e) {
        if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
        var r = t.mul(e);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var i = r.isub(n).iushrn(this.shift);
        var a = i;
        return i.cmp(this.m) >= 0 ? a = i.isub(this.m) : i.cmpn(0) < 0 && (a = i.iadd(this.m)), a._forceRed(this);
      }, E.prototype.invm = function(t) {
        return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
      };
    }(t = r.nmd(t), this);
  },
  82240: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var i = r(31518);
    function o(t, e) {
      return void 0 === e && (e = "utf8"), n.isBuffer(t) ? s(t.toString("base64")) : s(n.from(t, e).toString("base64"));
    }
    function a(t) {
      return t = t.toString(), i.default(t).replace(/\-/g, "+").replace(/_/g, "/");
    }
    function s(t) {
      return t.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    var u = o;
    u.encode = o, u.decode = function(t, e) {
      return void 0 === e && (e = "utf8"), n.from(a(t), "base64").toString(e);
    }, u.toBase64 = a, u.fromBase64 = s, u.toBuffer = function(t) {
      return n.from(a(t), "base64");
    }, e.default = u;
  },
  31518: (t, e, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = function(t) {
      var e = t.length;
      var r = e % 4;
      if (!r) return t;
      var i = e;
      var o = 4 - r;
      var a = e + o;
      var s = n.alloc(a);
      for (s.write(t); o--; ) s.write("=", i++);
      return s.toString();
    };
  },
  45772: (t, e, r) => {
    t.exports = r(82240).default, t.exports.default = t.exports;
  },
  16497: (t, e, r) => {
    function n(t) {
      return Object.prototype.toString.call(t);
    }
    e.isArray = function(t) {
      return Array.isArray ? Array.isArray(t) : '[object Array]' === n(t);
    }, e.isBoolean = function(t) {
      return 'boolean' == typeof t;
    }, e.isNull = function(t) {
      return null === t;
    }, e.isNullOrUndefined = function(t) {
      return null == t;
    }, e.isNumber = function(t) {
      return 'number' == typeof t;
    }, e.isString = function(t) {
      return 'string' == typeof t;
    }, e.isSymbol = function(t) {
      return 'symbol' == typeof t;
    }, e.isUndefined = function(t) {
      return void 0 === t;
    }, e.isRegExp = function(t) {
      return '[object RegExp]' === n(t);
    }, e.isObject = function(t) {
      return 'object' == typeof t && null !== t;
    }, e.isDate = function(t) {
      return '[object Date]' === n(t);
    }, e.isError = function(t) {
      return '[object Error]' === n(t) || t instanceof Error;
    }, e.isFunction = function(t) {
      return 'function' == typeof t;
    }, e.isPrimitive = function(t) {
      return null === t || 'boolean' == typeof t || 'number' == typeof t || 'string' == typeof t || 'symbol' == typeof t || void 0 === t;
    }, e.isBuffer = r(48764).Buffer.isBuffer;
  },
  12840: (t, e, r) => {
    var n = r(34155);
    var i = r(30778);
    var o = function() {};
    var a = function(t, e, r) {
      if ('function' == typeof e) return a(t, null, e);
      e || (e = {}), r = i(r || o);
      var s = t._writableState;
      var u = t._readableState;
      var c = e.readable || !1 !== e.readable && t.readable;
      var h = e.writable || !1 !== e.writable && t.writable;
      var l = !1;
      var d = function() {
        t.writable || f();
      };
      var f = function() {
        h = !1, c || r.call(t);
      };
      var p = function() {
        c = !1, h || r.call(t);
      };
      var v = function(e) {
        r.call(t, e ? new Error('exited with error code: ' + e) : null);
      };
      var m = function(e) {
        r.call(t, e);
      };
      var g = function() {
        n.nextTick(y);
      };
      var y = function() {
        if (!l) return (!c || u && u.ended && !u.destroyed) && (!h || s && s.ended && !s.destroyed) ? void 0 : r.call(t, new Error('premature close'));
      };
      var b = function() {
        t.req.on('finish', f);
      };
      return !function(t) {
        return t.setHeader && 'function' == typeof t.abort;
      }(t) ? h && !s && (t.on('end', d), t.on('close', d)) : (t.on('complete', f), t.on('abort', g), t.req ? b() : t.on('request', b)), 
      function(t) {
        return t.stdio && Array.isArray(t.stdio) && 3 === t.stdio.length;
      }(t) && t.on('exit', v), t.on('end', p), t.on('finish', f), !1 !== e.error && t.on('error', m), t.on('close', g), function() {
        l = !0, t.removeListener('complete', f), t.removeListener('abort', g), t.removeListener('request', b), t.req && t.req.removeListener('finish', f), 
        t.removeListener('end', d), t.removeListener('close', d), t.removeListener('finish', f), t.removeListener('exit', v), t.removeListener('end', p), 
        t.removeListener('error', m), t.removeListener('close', g);
      };
    };
    t.exports = a;
  },
  64063: t => {
    "use strict";
    t.exports = function t(e, r) {
      if (e === r) return !0;
      if (e && r && 'object' == typeof e && 'object' == typeof r) {
        if (e.constructor !== r.constructor) return !1;
        var n, i, o;
        if (Array.isArray(e)) {
          if ((n = e.length) != r.length) return !1;
          for (i = n; 0 != i--; ) if (!t(e[i], r[i])) return !1;
          return !0;
        }
        if (e.constructor === RegExp) return e.source === r.source && e.flags === r.flags;
        if (e.valueOf !== Object.prototype.valueOf) return e.valueOf() === r.valueOf();
        if (e.toString !== Object.prototype.toString) return e.toString() === r.toString();
        if ((n = (o = Object.keys(e)).length) !== Object.keys(r).length) return !1;
        for (i = n; 0 != i--; ) if (!Object.prototype.hasOwnProperty.call(r, o[i])) return !1;
        for (i = n; 0 != i--; ) {
          var a = o[i];
          if (!t(e[a], r[a])) return !1;
        }
        return !0;
      }
      return e != e && r != r;
    };
  },
  5826: t => {
    var e = {}.toString;
    t.exports = Array.isArray || function(t) {
      return '[object Array]' == e.call(t);
    };
  },
  72378: (t, e, r) => {
    t = r.nmd(t);
    var n = '__lodash_hash_undefined__';
    var i = 9007199254740991;
    var o = '[object Arguments]', a = '[object Function]', s = '[object Object]';
    var u = /^\[object .+?Constructor\]$/;
    var c = /^(?:0|[1-9]\d*)$/;
    var h = {};
    h['[object Float32Array]'] = h['[object Float64Array]'] = h['[object Int8Array]'] = h['[object Int16Array]'] = h['[object Int32Array]'] = h['[object Uint8Array]'] = h['[object Uint8ClampedArray]'] = h['[object Uint16Array]'] = h['[object Uint32Array]'] = !0, 
    h[o] = h['[object Array]'] = h['[object ArrayBuffer]'] = h['[object Boolean]'] = h['[object DataView]'] = h['[object Date]'] = h['[object Error]'] = h[a] = h['[object Map]'] = h['[object Number]'] = h[s] = h['[object RegExp]'] = h['[object Set]'] = h['[object String]'] = h['[object WeakMap]'] = !1;
    var l = 'object' == typeof r.g && r.g && r.g.Object === Object && r.g;
    var d = 'object' == typeof self && self && self.Object === Object && self;
    var f = l || d || Function('return this')();
    var p = e && !e.nodeType && e;
    var v = p && t && !t.nodeType && t;
    var m = v && v.exports === p;
    var g = m && l.process;
    var y = function() {
      try {
        var t = v && v.require && v.require('util').types;
        return t || g && g.binding && g.binding('util');
      } catch (e) {}
    }();
    var b = y && y.isTypedArray;
    function w(t, e, r) {
      switch (r.length) {
       case 0:
        return t.call(e);

       case 1:
        return t.call(e, r[0]);

       case 2:
        return t.call(e, r[0], r[1]);

       case 3:
        return t.call(e, r[0], r[1], r[2]);
      }
      return t.apply(e, r);
    }
    var _ = Array.prototype, M = Function.prototype, S = Object.prototype;
    var k = f['__core-js_shared__'];
    var x = M.toString;
    var O = S.hasOwnProperty;
    var E = function() {
      var t = /[^.]+$/.exec(k && k.keys && k.keys.IE_PROTO || '');
      return t ? 'Symbol(src)_1.' + t : '';
    }();
    var P = S.toString;
    var j = x.call(Object);
    var A = RegExp('^' + x.call(O).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
    var C = m ? f.Buffer : void 0, R = f.Symbol, T = f.Uint8Array, I = C ? C.allocUnsafe : void 0, L = function(t, e) {
      return function(r) {
        return t(e(r));
      };
    }(Object.getPrototypeOf, Object), D = Object.create, q = S.propertyIsEnumerable, U = _.splice, N = R ? R.toStringTag : void 0;
    var B = function() {
      try {
        var t = ht(Object, 'defineProperty');
        return t({}, '', {}), t;
      } catch (e) {}
    }();
    var F = C ? C.isBuffer : void 0, W = Math.max, V = Date.now;
    var K = ht(f, 'Map'), H = ht(Object, 'create');
    var z = function() {
      function t() {}
      return function(e) {
        if (!Mt(e)) return {};
        if (D) return D(e);
        t.prototype = e;
        var r = new t;
        return t.prototype = void 0, r;
      };
    }();
    function J(t) {
      var e = -1, r = null == t ? 0 : t.length;
      for (this.clear(); ++e < r; ) {
        var n = t[e];
        this.set(n[0], n[1]);
      }
    }
    function Y(t) {
      var e = -1, r = null == t ? 0 : t.length;
      for (this.clear(); ++e < r; ) {
        var n = t[e];
        this.set(n[0], n[1]);
      }
    }
    function G(t) {
      var e = -1, r = null == t ? 0 : t.length;
      for (this.clear(); ++e < r; ) {
        var n = t[e];
        this.set(n[0], n[1]);
      }
    }
    function Z(t) {
      var e = this.__data__ = new Y(t);
      this.size = e.size;
    }
    function X(t, e) {
      var r = gt(t), n = !r && mt(t), i = !r && !n && bt(t), o = !r && !n && !i && kt(t), a = r || n || i || o, s = a ? function(t, e) {
        var r = -1, n = Array(t);
        for (;++r < t; ) n[r] = e(r);
        return n;
      }(t.length, String) : [], u = s.length;
      for (var c in t) !e && !O.call(t, c) || a && ('length' == c || i && ('offset' == c || 'parent' == c) || o && ('buffer' == c || 'byteLength' == c || 'byteOffset' == c) || lt(c, u)) || s.push(c);
      return s;
    }
    function $(t, e, r) {
      (void 0 !== r && !vt(t[e], r) || void 0 === r && !(e in t)) && et(t, e, r);
    }
    function Q(t, e, r) {
      var n = t[e];
      O.call(t, e) && vt(n, r) && (void 0 !== r || e in t) || et(t, e, r);
    }
    function tt(t, e) {
      var r = t.length;
      for (;r--; ) if (vt(t[r][0], e)) return r;
      return -1;
    }
    function et(t, e, r) {
      '__proto__' == e && B ? B(t, e, {
        configurable: !0,
        enumerable: !0,
        value: r,
        writable: !0
      }) : t[e] = r;
    }
    J.prototype.clear = function() {
      this.__data__ = H ? H(null) : {}, this.size = 0;
    }, J.prototype.delete = function(t) {
      var e = this.has(t) && delete this.__data__[t];
      return this.size -= e ? 1 : 0, e;
    }, J.prototype.get = function(t) {
      var e = this.__data__;
      if (H) {
        var r = e[t];
        return r === n ? void 0 : r;
      }
      return O.call(e, t) ? e[t] : void 0;
    }, J.prototype.has = function(t) {
      var e = this.__data__;
      return H ? void 0 !== e[t] : O.call(e, t);
    }, J.prototype.set = function(t, e) {
      var r = this.__data__;
      return this.size += this.has(t) ? 0 : 1, r[t] = H && void 0 === e ? n : e, this;
    }, Y.prototype.clear = function() {
      this.__data__ = [], this.size = 0;
    }, Y.prototype.delete = function(t) {
      var e = this.__data__, r = tt(e, t);
      return !(r < 0) && (r == e.length - 1 ? e.pop() : U.call(e, r, 1), --this.size, !0);
    }, Y.prototype.get = function(t) {
      var e = this.__data__, r = tt(e, t);
      return r < 0 ? void 0 : e[r][1];
    }, Y.prototype.has = function(t) {
      return tt(this.__data__, t) > -1;
    }, Y.prototype.set = function(t, e) {
      var r = this.__data__, n = tt(r, t);
      return n < 0 ? (++this.size, r.push([ t, e ])) : r[n][1] = e, this;
    }, G.prototype.clear = function() {
      this.size = 0, this.__data__ = {
        hash: new J,
        map: new (K || Y),
        string: new J
      };
    }, G.prototype.delete = function(t) {
      var e = ct(this, t).delete(t);
      return this.size -= e ? 1 : 0, e;
    }, G.prototype.get = function(t) {
      return ct(this, t).get(t);
    }, G.prototype.has = function(t) {
      return ct(this, t).has(t);
    }, G.prototype.set = function(t, e) {
      var r = ct(this, t), n = r.size;
      return r.set(t, e), this.size += r.size == n ? 0 : 1, this;
    }, Z.prototype.clear = function() {
      this.__data__ = new Y, this.size = 0;
    }, Z.prototype.delete = function(t) {
      var e = this.__data__, r = e.delete(t);
      return this.size = e.size, r;
    }, Z.prototype.get = function(t) {
      return this.__data__.get(t);
    }, Z.prototype.has = function(t) {
      return this.__data__.has(t);
    }, Z.prototype.set = function(t, e) {
      var r = this.__data__;
      if (r instanceof Y) {
        var n = r.__data__;
        if (!K || n.length < 199) return n.push([ t, e ]), this.size = ++r.size, this;
        r = this.__data__ = new G(n);
      }
      return r.set(t, e), this.size = r.size, this;
    };
    var rt = function(t) {
      return function(e, r, n) {
        var i = -1, o = Object(e), a = n(e), s = a.length;
        for (;s--; ) {
          var u = a[t ? s : ++i];
          if (!1 === r(o[u], u, o)) break;
        }
        return e;
      };
    }();
    function nt(t) {
      return null == t ? void 0 === t ? "[object Undefined]" : "[object Null]" : N && N in Object(t) ? function(t) {
        var e = O.call(t, N), r = t[N];
        try {
          t[N] = void 0;
          var n = !0;
        } catch (o) {}
        var i = P.call(t);
        n && (e ? t[N] = r : delete t[N]);
        return i;
      }(t) : function(t) {
        return P.call(t);
      }(t);
    }
    function it(t) {
      return St(t) && nt(t) == o;
    }
    function ot(t) {
      return !(!Mt(t) || function(t) {
        return !!E && E in t;
      }(t)) && (wt(t) ? A : u).test(function(t) {
        if (null != t) {
          try {
            return x.call(t);
          } catch (e) {}
          try {
            return t + '';
          } catch (e) {}
        }
        return '';
      }(t));
    }
    function at(t) {
      if (!Mt(t)) return function(t) {
        var e = [];
        if (null != t) for (var r in Object(t)) e.push(r);
        return e;
      }(t);
      var e = dt(t), r = [];
      for (var n in t) ('constructor' != n || !e && O.call(t, n)) && r.push(n);
      return r;
    }
    function st(t, e, r, n, i) {
      t !== e && rt(e, (function(o, a) {
        if (i || (i = new Z), Mt(o)) !function(t, e, r, n, i, o, a) {
          var u = ft(t, r), c = ft(e, r), h = a.get(c);
          if (h) return void $(t, r, h);
          var l = o ? o(u, c, r + '', t, e, a) : void 0;
          var d = void 0 === l;
          if (d) {
            var f = gt(c), p = !f && bt(c), v = !f && !p && kt(c);
            l = c, f || p || v ? gt(u) ? l = u : !function(t) {
              return St(t) && yt(t);
            }(u) ? p ? (d = !1, l = function(t, e) {
              if (e) return t.slice();
              var r = t.length, n = I ? I(r) : new t.constructor(r);
              return t.copy(n), n;
            }(c, !0)) : v ? (d = !1, l = function(t, e) {
              var r = e ? function(t) {
                var e = new t.constructor(t.byteLength);
                return new T(e).set(new T(t)), e;
              }(t.buffer) : t.buffer;
              return new t.constructor(r, t.byteOffset, t.length);
            }(c, !0)) : l = [] : l = function(t, e) {
              var r = -1, n = t.length;
              e || (e = Array(n));
              for (;++r < n; ) e[r] = t[r];
              return e;
            }(u) : function(t) {
              if (!St(t) || nt(t) != s) return !1;
              var e = L(t);
              if (null === e) return !0;
              var r = O.call(e, 'constructor') && e.constructor;
              return 'function' == typeof r && r instanceof r && x.call(r) == j;
            }(c) || mt(c) ? (l = u, mt(u) ? l = function(t) {
              return function(t, e, r, n) {
                var i = !r;
                r || (r = {});
                var o = -1, a = e.length;
                for (;++o < a; ) {
                  var s = e[o];
                  var u = n ? n(r[s], t[s], s, r, t) : void 0;
                  void 0 === u && (u = t[s]), i ? et(r, s, u) : Q(r, s, u);
                }
                return r;
              }(t, xt(t));
            }(u) : Mt(u) && !wt(u) || (l = function(t) {
              return 'function' != typeof t.constructor || dt(t) ? {} : z(L(t));
            }(c))) : d = !1;
          }
          d && (a.set(c, l), i(l, c, n, o, a), a.delete(c));
          $(t, r, l);
        }(t, e, a, r, st, n, i); else {
          var u = n ? n(ft(t, a), o, a + '', t, e, i) : void 0;
          void 0 === u && (u = o), $(t, a, u);
        }
      }), xt);
    }
    function ut(t, e) {
      return pt(function(t, e, r) {
        return e = W(void 0 === e ? t.length - 1 : e, 0), function() {
          var n = arguments, i = -1, o = W(n.length - e, 0), a = Array(o);
          for (;++i < o; ) a[i] = n[e + i];
          i = -1;
          var s = Array(e + 1);
          for (;++i < e; ) s[i] = n[i];
          return s[e] = r(a), w(t, this, s);
        };
      }(t, e, Pt), t + '');
    }
    function ct(t, e) {
      var r = t.__data__;
      return function(t) {
        var e = typeof t;
        return 'string' == e || 'number' == e || 'symbol' == e || 'boolean' == e ? '__proto__' !== t : null === t;
      }(e) ? r['string' == typeof e ? 'string' : 'hash'] : r.map;
    }
    function ht(t, e) {
      var r = function(t, e) {
        return null == t ? void 0 : t[e];
      }(t, e);
      return ot(r) ? r : void 0;
    }
    function lt(t, e) {
      var r = typeof t;
      return !!(e = null == e ? i : e) && ('number' == r || 'symbol' != r && c.test(t)) && t > -1 && t % 1 == 0 && t < e;
    }
    function dt(t) {
      var e = t && t.constructor;
      return t === ('function' == typeof e && e.prototype || S);
    }
    function ft(t, e) {
      if (('constructor' !== e || 'function' != typeof t[e]) && '__proto__' != e) return t[e];
    }
    var pt = function(t) {
      var e = 0, r = 0;
      return function() {
        var n = V(), i = 16 - (n - r);
        if (r = n, i > 0) {
          if (++e >= 800) return arguments[0];
        } else e = 0;
        return t.apply(void 0, arguments);
      };
    }(B ? function(t, e) {
      return B(t, 'toString', {
        configurable: !0,
        enumerable: !1,
        value: Et(e),
        writable: !0
      });
    } : Pt);
    function vt(t, e) {
      return t === e || t != t && e != e;
    }
    var mt = it(function() {
      return arguments;
    }()) ? it : function(t) {
      return St(t) && O.call(t, 'callee') && !q.call(t, 'callee');
    };
    var gt = Array.isArray;
    function yt(t) {
      return null != t && _t(t.length) && !wt(t);
    }
    var bt = F || function() {
      return !1;
    };
    function wt(t) {
      if (!Mt(t)) return !1;
      var e = nt(t);
      return e == a || "[object GeneratorFunction]" == e || "[object AsyncFunction]" == e || "[object Proxy]" == e;
    }
    function _t(t) {
      return 'number' == typeof t && t > -1 && t % 1 == 0 && t <= i;
    }
    function Mt(t) {
      var e = typeof t;
      return null != t && ('object' == e || 'function' == e);
    }
    function St(t) {
      return null != t && 'object' == typeof t;
    }
    var kt = b ? function(t) {
      return function(e) {
        return t(e);
      };
    }(b) : function(t) {
      return St(t) && _t(t.length) && !!h[nt(t)];
    };
    function xt(t) {
      return yt(t) ? X(t, !0) : at(t);
    }
    var Ot = function(t) {
      return ut((function(e, r) {
        var n = -1, i = r.length, o = i > 1 ? r[i - 1] : void 0, a = i > 2 ? r[2] : void 0;
        for (o = t.length > 3 && 'function' == typeof o ? (i--, o) : void 0, a && function(t, e, r) {
          if (!Mt(r)) return !1;
          var n = typeof e;
          if ('number' == n ? yt(r) && lt(e, r.length) : 'string' == n && e in r) return vt(r[e], t);
          return !1;
        }(r[0], r[1], a) && (o = i < 3 ? void 0 : o, i = 1), e = Object(e); ++n < i; ) {
          var s = r[n];
          s && t(e, s, n, o);
        }
        return e;
      }));
    }((function(t, e, r) {
      st(t, e, r);
    }));
    function Et(t) {
      return function() {
        return t;
      };
    }
    function Pt(t) {
      return t;
    }
    t.exports = Ot;
  },
  2043: function(t, e, r) {
    var n = r(25108);
    var i, o;
    !function(a, s) {
      "use strict";
      i = function() {
        var t = function() {};
        var e = "undefined";
        var r = typeof window !== e && typeof window.navigator !== e && /Trident\/|MSIE /.test(window.navigator.userAgent);
        var i = [ "trace", "debug", "info", "warn", "error" ];
        function o(t, e) {
          var r = t[e];
          if ('function' == typeof r.bind) return r.bind(t);
          try {
            return Function.prototype.bind.call(r, t);
          } catch (n) {
            return function() {
              return Function.prototype.apply.apply(r, [ t, arguments ]);
            };
          }
        }
        function a() {
          n.log && (n.log.apply ? n.log.apply(n, arguments) : Function.prototype.apply.apply(n.log, [ n, arguments ])), n.trace && n.trace();
        }
        function s(i) {
          return 'debug' === i && (i = 'log'), typeof n !== e && ('trace' === i && r ? a : void 0 !== n[i] ? o(n, i) : void 0 !== n.log ? o(n, 'log') : t);
        }
        function u(e, r) {
          for (var n = 0; n < i.length; n++) {
            var o = i[n];
            this[o] = n < e ? t : this.methodFactory(o, e, r);
          }
          this.log = this.debug;
        }
        function c(t, r, i) {
          return function() {
            typeof n !== e && (u.call(this, r, i), this[t].apply(this, arguments));
          };
        }
        function h(t, e, r) {
          return s(t) || c.apply(this, arguments);
        }
        function l(t, r, o) {
          var a = this;
          var s;
          r = null == r ? "WARN" : r;
          var c = "loglevel";
          function l(t) {
            var r = (i[t] || 'silent').toUpperCase();
            if (typeof window !== e && c) {
              try {
                return void (window.localStorage[c] = r);
              } catch (n) {}
              try {
                window.document.cookie = encodeURIComponent(c) + "=" + r + ";";
              } catch (n) {}
            }
          }
          function d() {
            var t;
            if (typeof window !== e && c) {
              try {
                t = window.localStorage[c];
              } catch (i) {}
              if (typeof t === e) try {
                var r = window.document.cookie;
                var n = r.indexOf(encodeURIComponent(c) + "=");
                -1 !== n && (t = /^([^;]+)/.exec(r.slice(n))[1]);
              } catch (i) {}
              return void 0 === a.levels[t] && (t = void 0), t;
            }
          }
          function f() {
            if (typeof window !== e && c) {
              try {
                return void window.localStorage.removeItem(c);
              } catch (t) {}
              try {
                window.document.cookie = encodeURIComponent(c) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
              } catch (t) {}
            }
          }
          "string" == typeof t ? c += ":" + t : "symbol" == typeof t && (c = void 0), a.name = t, a.levels = {
            TRACE: 0,
            DEBUG: 1,
            INFO: 2,
            WARN: 3,
            ERROR: 4,
            SILENT: 5
          }, a.methodFactory = o || h, a.getLevel = function() {
            return s;
          }, a.setLevel = function(r, i) {
            if ("string" == typeof r && void 0 !== a.levels[r.toUpperCase()] && (r = a.levels[r.toUpperCase()]), !("number" == typeof r && r >= 0 && r <= a.levels.SILENT)) throw "log.setLevel() called with invalid level: " + r;
            if (s = r, !1 !== i && l(r), u.call(a, r, t), typeof n === e && r < a.levels.SILENT) return "No console available for logging";
          }, a.setDefaultLevel = function(t) {
            r = t, d() || a.setLevel(t, !1);
          }, a.resetLevel = function() {
            a.setLevel(r, !1), f();
          }, a.enableAll = function(t) {
            a.setLevel(a.levels.TRACE, t);
          }, a.disableAll = function(t) {
            a.setLevel(a.levels.SILENT, t);
          };
          var p = d();
          null == p && (p = r), a.setLevel(p, !1);
        }
        var d = new l;
        var f = {};
        d.getLogger = function(t) {
          if ("symbol" != typeof t && "string" != typeof t || "" === t) throw new TypeError("You must supply a name when creating a logger.");
          var e = f[t];
          return e || (e = f[t] = new l(t, d.getLevel(), d.methodFactory)), e;
        };
        var p = typeof window !== e ? window.log : void 0;
        return d.noConflict = function() {
          return typeof window !== e && window.log === d && (window.log = p), d;
        }, d.getLoggers = function() {
          return f;
        }, d.default = d, d;
      }, void 0 === (o = 'function' == typeof i ? i.call(e, r, e, t) : i) || (t.exports = o);
    }();
  },
  30778: (t, e, r) => {
    var n = r(52479);
    function i(t) {
      var e = function() {
        return e.called ? e.value : (e.called = !0, e.value = t.apply(this, arguments));
      };
      return e.called = !1, e;
    }
    function o(t) {
      var e = function() {
        if (e.called) throw new Error(e.onceError);
        return e.called = !0, e.value = t.apply(this, arguments);
      };
      var r = t.name || 'Function wrapped with `once`';
      return e.onceError = r + " shouldn't be called more than once", e.called = !1, e;
    }
    t.exports = n(i), t.exports.strict = n(o), i.proto = i((function() {
      Object.defineProperty(Function.prototype, 'once', {
        value: function() {
          return i(this);
        },
        configurable: !0
      }), Object.defineProperty(Function.prototype, 'onceStrict', {
        value: function() {
          return o(this);
        },
        configurable: !0
      });
    }));
  },
  88212: (t, e, r) => {
    "use strict";
    var n = r(34155);
    void 0 === n || !n.version || 0 === n.version.indexOf('v0.') || 0 === n.version.indexOf('v1.') && 0 !== n.version.indexOf('v1.8.') ? t.exports = {
      nextTick: function(t, e, r, i) {
        if ('function' != typeof t) throw new TypeError('"callback" argument must be a function');
        var o = arguments.length;
        var a, s;
        switch (o) {
         case 0:
         case 1:
          return n.nextTick(t);

         case 2:
          return n.nextTick((function() {
            t.call(null, e);
          }));

         case 3:
          return n.nextTick((function() {
            t.call(null, e, r);
          }));

         case 4:
          return n.nextTick((function() {
            t.call(null, e, r, i);
          }));

         default:
          for (a = new Array(o - 1), s = 0; s < a.length; ) a[s++] = arguments[s];
          return n.nextTick((function() {
            t.apply(null, a);
          }));
        }
      }
    } : t.exports = n;
  },
  74286: (t, e, r) => {
    var n = r(34155);
    var i = r(30778);
    var o = r(12840);
    var a = r(71156);
    var s = function() {};
    var u = /^v?\.0/.test(n.version);
    var c = function(t) {
      return 'function' == typeof t;
    };
    var h = function(t, e, r, n) {
      n = i(n);
      var h = !1;
      t.on('close', (function() {
        h = !0;
      })), o(t, {
        readable: e,
        writable: r
      }, (function(t) {
        if (t) return n(t);
        h = !0, n();
      }));
      var l = !1;
      return function(e) {
        if (!h && !l) return l = !0, function(t) {
          return !!u && !!a && (t instanceof (a.ReadStream || s) || t instanceof (a.WriteStream || s)) && c(t.close);
        }(t) ? t.close(s) : function(t) {
          return t.setHeader && c(t.abort);
        }(t) ? t.abort() : c(t.destroy) ? t.destroy() : void n(e || new Error('stream was destroyed'));
      };
    };
    var l = function(t) {
      t();
    };
    var d = function(t, e) {
      return t.pipe(e);
    };
    t.exports = function() {
      var t = Array.prototype.slice.call(arguments);
      var e = c(t[t.length - 1] || s) && t.pop() || s;
      if (Array.isArray(t[0]) && (t = t[0]), t.length < 2) throw new Error('pump requires two streams per minimum');
      var r;
      var n = t.map((function(i, o) {
        var a = o < t.length - 1;
        return h(i, a, o > 0, (function(t) {
          r || (r = t), t && n.forEach(l), a || (n.forEach(l), e(r));
        }));
      }));
      return t.reduce(d);
    };
  },
  35666: t => {
    var e = function(t) {
      "use strict";
      var e = Object.prototype;
      var r = e.hasOwnProperty;
      var n;
      var i = "function" == typeof Symbol ? Symbol : {};
      var o = i.iterator || "@@iterator";
      var a = i.asyncIterator || "@@asyncIterator";
      var s = i.toStringTag || "@@toStringTag";
      function u(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), t[e];
      }
      try {
        u({}, "");
      } catch (C) {
        u = function(t, e, r) {
          return t[e] = r;
        };
      }
      function c(t, e, r, n) {
        var i = e && e.prototype instanceof m ? e : m;
        var o = Object.create(i.prototype);
        var a = new P(n || []);
        return o._invoke = function(t, e, r) {
          var n = l;
          return function(i, o) {
            if (n === f) throw new Error("Generator is already running");
            if (n === p) {
              if ("throw" === i) throw o;
              return A();
            }
            for (r.method = i, r.arg = o; ;) {
              var a = r.delegate;
              if (a) {
                var s = x(a, r);
                if (s) {
                  if (s === v) continue;
                  return s;
                }
              }
              if ("next" === r.method) r.sent = r._sent = r.arg; else if ("throw" === r.method) {
                if (n === l) throw n = p, r.arg;
                r.dispatchException(r.arg);
              } else "return" === r.method && r.abrupt("return", r.arg);
              n = f;
              var u = h(t, e, r);
              if ("normal" === u.type) {
                if (n = r.done ? p : d, u.arg === v) continue;
                return {
                  value: u.arg,
                  done: r.done
                };
              }
              "throw" === u.type && (n = p, r.method = "throw", r.arg = u.arg);
            }
          };
        }(t, r, a), o;
      }
      function h(t, e, r) {
        try {
          return {
            type: "normal",
            arg: t.call(e, r)
          };
        } catch (C) {
          return {
            type: "throw",
            arg: C
          };
        }
      }
      t.wrap = c;
      var l = "suspendedStart";
      var d = "suspendedYield";
      var f = "executing";
      var p = "completed";
      var v = {};
      function m() {}
      function g() {}
      function y() {}
      var b = {};
      u(b, o, (function() {
        return this;
      }));
      var w = Object.getPrototypeOf;
      var _ = w && w(w(j([])));
      _ && _ !== e && r.call(_, o) && (b = _);
      var M = y.prototype = m.prototype = Object.create(b);
      function S(t) {
        [ "next", "throw", "return" ].forEach((function(e) {
          u(t, e, (function(t) {
            return this._invoke(e, t);
          }));
        }));
      }
      function k(t, e) {
        function n(i, o, a, s) {
          var u = h(t[i], t, o);
          if ("throw" !== u.type) {
            var c = u.arg;
            var l = c.value;
            return l && "object" == typeof l && r.call(l, "__await") ? e.resolve(l.__await).then((function(t) {
              n("next", t, a, s);
            }), (function(t) {
              n("throw", t, a, s);
            })) : e.resolve(l).then((function(t) {
              c.value = t, a(c);
            }), (function(t) {
              return n("throw", t, a, s);
            }));
          }
          s(u.arg);
        }
        var i;
        this._invoke = function(t, r) {
          function o() {
            return new e((function(e, i) {
              n(t, r, e, i);
            }));
          }
          return i = i ? i.then(o, o) : o();
        };
      }
      function x(t, e) {
        var r = t.iterator[e.method];
        if (r === n) {
          if (e.delegate = null, "throw" === e.method) {
            if (t.iterator.return && (e.method = "return", e.arg = n, x(t, e), "throw" === e.method)) return v;
            e.method = "throw", e.arg = new TypeError("The iterator does not provide a 'throw' method");
          }
          return v;
        }
        var i = h(r, t.iterator, e.arg);
        if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, v;
        var o = i.arg;
        return o ? o.done ? (e[t.resultName] = o.value, e.next = t.nextLoc, "return" !== e.method && (e.method = "next", e.arg = n), 
        e.delegate = null, v) : o : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, 
        v);
      }
      function O(t) {
        var e = {
          tryLoc: t[0]
        };
        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
      }
      function E(t) {
        var e = t.completion || {};
        e.type = "normal", delete e.arg, t.completion = e;
      }
      function P(t) {
        this.tryEntries = [ {
          tryLoc: "root"
        } ], t.forEach(O, this), this.reset(!0);
      }
      function j(t) {
        if (t) {
          var e = t[o];
          if (e) return e.call(t);
          if ("function" == typeof t.next) return t;
          if (!isNaN(t.length)) {
            var i = -1, a = function e() {
              for (;++i < t.length; ) if (r.call(t, i)) return e.value = t[i], e.done = !1, e;
              return e.value = n, e.done = !0, e;
            };
            return a.next = a;
          }
        }
        return {
          next: A
        };
      }
      function A() {
        return {
          value: n,
          done: !0
        };
      }
      return g.prototype = y, u(M, "constructor", y), u(y, "constructor", g), g.displayName = u(y, s, "GeneratorFunction"), t.isGeneratorFunction = function(t) {
        var e = "function" == typeof t && t.constructor;
        return !!e && (e === g || "GeneratorFunction" === (e.displayName || e.name));
      }, t.mark = function(t) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t, y) : (t.__proto__ = y, u(t, s, "GeneratorFunction")), t.prototype = Object.create(M), 
        t;
      }, t.awrap = function(t) {
        return {
          __await: t
        };
      }, S(k.prototype), u(k.prototype, a, (function() {
        return this;
      })), t.AsyncIterator = k, t.async = function(e, r, n, i, o) {
        void 0 === o && (o = Promise);
        var a = new k(c(e, r, n, i), o);
        return t.isGeneratorFunction(r) ? a : a.next().then((function(t) {
          return t.done ? t.value : a.next();
        }));
      }, S(M), u(M, s, "Generator"), u(M, o, (function() {
        return this;
      })), u(M, "toString", (function() {
        return "[object Generator]";
      })), t.keys = function(t) {
        var e = [];
        for (var r in t) e.push(r);
        return e.reverse(), function r() {
          for (;e.length; ) {
            var n = e.pop();
            if (n in t) return r.value = n, r.done = !1, r;
          }
          return r.done = !0, r;
        };
      }, t.values = j, P.prototype = {
        constructor: P,
        reset: function(t) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = n, this.done = !1, this.delegate = null, this.method = "next", 
          this.arg = n, this.tryEntries.forEach(E), !t) for (var e in this) "t" === e.charAt(0) && r.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = n);
        },
        stop: function() {
          this.done = !0;
          var t = this.tryEntries[0].completion;
          if ("throw" === t.type) throw t.arg;
          return this.rval;
        },
        dispatchException: function(t) {
          if (this.done) throw t;
          var e = this;
          function i(r, i) {
            return s.type = "throw", s.arg = t, e.next = r, i && (e.method = "next", e.arg = n), !!i;
          }
          for (var o = this.tryEntries.length - 1; o >= 0; --o) {
            var a = this.tryEntries[o];
            var s = a.completion;
            if ("root" === a.tryLoc) return i("end");
            if (a.tryLoc <= this.prev) {
              var u = r.call(a, "catchLoc");
              var c = r.call(a, "finallyLoc");
              if (u && c) {
                if (this.prev < a.catchLoc) return i(a.catchLoc, !0);
                if (this.prev < a.finallyLoc) return i(a.finallyLoc);
              } else if (u) {
                if (this.prev < a.catchLoc) return i(a.catchLoc, !0);
              } else {
                if (!c) throw new Error("try statement without catch or finally");
                if (this.prev < a.finallyLoc) return i(a.finallyLoc);
              }
            }
          }
        },
        abrupt: function(t, e) {
          for (var n = this.tryEntries.length - 1; n >= 0; --n) {
            var i = this.tryEntries[n];
            if (i.tryLoc <= this.prev && r.call(i, "finallyLoc") && this.prev < i.finallyLoc) {
              var o = i;
              break;
            }
          }
          o && ("break" === t || "continue" === t) && o.tryLoc <= e && e <= o.finallyLoc && (o = null);
          var a = o ? o.completion : {};
          return a.type = t, a.arg = e, o ? (this.method = "next", this.next = o.finallyLoc, v) : this.complete(a);
        },
        complete: function(t, e) {
          if ("throw" === t.type) throw t.arg;
          return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, 
          this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), v;
        },
        finish: function(t) {
          for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var r = this.tryEntries[e];
            if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), E(r), v;
          }
        },
        catch: function(t) {
          for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var r = this.tryEntries[e];
            if (r.tryLoc === t) {
              var n = r.completion;
              if ("throw" === n.type) {
                var i = n.arg;
                E(r);
              }
              return i;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(t, e, r) {
          return this.delegate = {
            iterator: j(t),
            resultName: e,
            nextLoc: r
          }, "next" === this.method && (this.arg = n), v;
        }
      }, t;
    }(t.exports);
    try {
      regeneratorRuntime = e;
    } catch (r) {
      "object" == typeof globalThis ? globalThis.regeneratorRuntime = e : Function("r", "regeneratorRuntime = r")(e);
    }
  },
  45867: (t, e, r) => {
    "use strict";
    var n = r(88212);
    var i = Object.keys || function(t) {
      var e = [];
      for (var r in t) e.push(r);
      return e;
    };
    t.exports = l;
    var o = Object.create(r(16497));
    o.inherits = r(35717);
    var a = r(44278);
    var s = r(10759);
    o.inherits(l, a);
    var u = i(s.prototype);
    for (var c = 0; c < u.length; c++) {
      var h = u[c];
      l.prototype[h] || (l.prototype[h] = s.prototype[h]);
    }
    function l(t) {
      if (!(this instanceof l)) return new l(t);
      a.call(this, t), s.call(this, t), t && !1 === t.readable && (this.readable = !1), t && !1 === t.writable && (this.writable = !1), 
      this.allowHalfOpen = !0, t && !1 === t.allowHalfOpen && (this.allowHalfOpen = !1), this.once('end', d);
    }
    function d() {
      this.allowHalfOpen || this._writableState.ended || n.nextTick(f, this);
    }
    function f(t) {
      t.end();
    }
    Object.defineProperty(l.prototype, 'writableHighWaterMark', {
      enumerable: !1,
      get: function() {
        return this._writableState.highWaterMark;
      }
    }), Object.defineProperty(l.prototype, 'destroyed', {
      get: function() {
        return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed);
      },
      set: function(t) {
        void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = t, this._writableState.destroyed = t);
      }
    }), l.prototype._destroy = function(t, e) {
      this.push(null), this.end(), n.nextTick(e, t);
    };
  },
  3431: (t, e, r) => {
    "use strict";
    t.exports = o;
    var n = r(60062);
    var i = Object.create(r(16497));
    function o(t) {
      if (!(this instanceof o)) return new o(t);
      n.call(this, t);
    }
    i.inherits = r(35717), i.inherits(o, n), o.prototype._transform = function(t, e, r) {
      r(null, t);
    };
  },
  44278: (t, e, r) => {
    "use strict";
    var n = r(34155);
    var i = r(88212);
    t.exports = b;
    var o = r(5826);
    var a;
    b.ReadableState = y;
    r(17187).EventEmitter;
    var s = function(t, e) {
      return t.listeners(e).length;
    };
    var u = r(84104);
    var c = r(89509).Buffer;
    var h = r.g.Uint8Array || function() {};
    var l = Object.create(r(16497));
    l.inherits = r(35717);
    var d = r(66882);
    var f = void 0;
    f = d && d.debuglog ? d.debuglog('stream') : function() {};
    var p = r(93912);
    var v = r(55513);
    var m;
    l.inherits(b, u);
    var g = [ 'error', 'close', 'destroy', 'pause', 'resume' ];
    function y(t, e) {
      t = t || {};
      var n = e instanceof (a = a || r(45867));
      this.objectMode = !!t.objectMode, n && (this.objectMode = this.objectMode || !!t.readableObjectMode);
      var i = t.highWaterMark;
      var o = t.readableHighWaterMark;
      var s = this.objectMode ? 16 : 16384;
      this.highWaterMark = i || 0 === i ? i : n && (o || 0 === o) ? o : s, this.highWaterMark = Math.floor(this.highWaterMark), 
      this.buffer = new p, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, 
      this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, 
      this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || 'utf8', this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, 
      this.encoding = null, t.encoding && (m || (m = r(32553).s), this.decoder = new m(t.encoding), this.encoding = t.encoding);
    }
    function b(t) {
      if (a = a || r(45867), !(this instanceof b)) return new b(t);
      this._readableState = new y(t, this), this.readable = !0, t && ('function' == typeof t.read && (this._read = t.read), 'function' == typeof t.destroy && (this._destroy = t.destroy)), 
      u.call(this);
    }
    function w(t, e, r, n, i) {
      var o = t._readableState;
      var a;
      null === e ? (o.reading = !1, function(t, e) {
        if (e.ended) return;
        if (e.decoder) {
          var r = e.decoder.end();
          r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
        }
        e.ended = !0, k(t);
      }(t, o)) : (i || (a = function(t, e) {
        var r;
        (function(t) {
          return c.isBuffer(t) || t instanceof h;
        })(e) || 'string' == typeof e || void 0 === e || t.objectMode || (r = new TypeError('Invalid non-string/buffer chunk'));
        return r;
      }(o, e)), a ? t.emit('error', a) : o.objectMode || e && e.length > 0 ? ('string' == typeof e || o.objectMode || Object.getPrototypeOf(e) === c.prototype || (e = function(t) {
        return c.from(t);
      }(e)), n ? o.endEmitted ? t.emit('error', new Error('stream.unshift() after end event')) : _(t, o, e, !0) : o.ended ? t.emit('error', new Error('stream.push() after EOF')) : (o.reading = !1, 
      o.decoder && !r ? (e = o.decoder.write(e), o.objectMode || 0 !== e.length ? _(t, o, e, !1) : O(t, o)) : _(t, o, e, !1))) : n || (o.reading = !1));
      return function(t) {
        return !t.ended && (t.needReadable || t.length < t.highWaterMark || 0 === t.length);
      }(o);
    }
    function _(t, e, r, n) {
      e.flowing && 0 === e.length && !e.sync ? (t.emit('data', r), t.read(0)) : (e.length += e.objectMode ? 1 : r.length, n ? e.buffer.unshift(r) : e.buffer.push(r), 
      e.needReadable && k(t)), O(t, e);
    }
    Object.defineProperty(b.prototype, 'destroyed', {
      get: function() {
        return void 0 !== this._readableState && this._readableState.destroyed;
      },
      set: function(t) {
        this._readableState && (this._readableState.destroyed = t);
      }
    }), b.prototype.destroy = v.destroy, b.prototype._undestroy = v.undestroy, b.prototype._destroy = function(t, e) {
      this.push(null), e(t);
    }, b.prototype.push = function(t, e) {
      var r = this._readableState;
      var n;
      return r.objectMode ? n = !0 : 'string' == typeof t && ((e = e || r.defaultEncoding) !== r.encoding && (t = c.from(t, e), 
      e = ''), n = !0), w(this, t, e, !1, n);
    }, b.prototype.unshift = function(t) {
      return w(this, t, null, !0, !1);
    }, b.prototype.isPaused = function() {
      return !1 === this._readableState.flowing;
    }, b.prototype.setEncoding = function(t) {
      return m || (m = r(32553).s), this._readableState.decoder = new m(t), this._readableState.encoding = t, this;
    };
    var M = 8388608;
    function S(t, e) {
      return t <= 0 || 0 === e.length && e.ended ? 0 : e.objectMode ? 1 : t != t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = function(t) {
        return t >= M ? t = M : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
      }(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = !0, 0));
    }
    function k(t) {
      var e = t._readableState;
      e.needReadable = !1, e.emittedReadable || (f('emitReadable', e.flowing), e.emittedReadable = !0, e.sync ? i.nextTick(x, t) : x(t));
    }
    function x(t) {
      f('emit readable'), t.emit('readable'), A(t);
    }
    function O(t, e) {
      e.readingMore || (e.readingMore = !0, i.nextTick(E, t, e));
    }
    function E(t, e) {
      var r = e.length;
      for (;!e.reading && !e.flowing && !e.ended && e.length < e.highWaterMark && (f('maybeReadMore read 0'), t.read(0), r !== e.length); ) r = e.length;
      e.readingMore = !1;
    }
    function P(t) {
      f('readable nexttick read 0'), t.read(0);
    }
    function j(t, e) {
      e.reading || (f('resume read 0'), t.read(0)), e.resumeScheduled = !1, e.awaitDrain = 0, t.emit('resume'), A(t), e.flowing && !e.reading && t.read(0);
    }
    function A(t) {
      var e = t._readableState;
      for (f('flow', e.flowing); e.flowing && null !== t.read(); ) ;
    }
    function C(t, e) {
      return 0 === e.length ? null : (e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (r = e.decoder ? e.buffer.join('') : 1 === e.buffer.length ? e.buffer.head.data : e.buffer.concat(e.length), 
      e.buffer.clear()) : r = function(t, e, r) {
        var n;
        t < e.head.data.length ? (n = e.head.data.slice(0, t), e.head.data = e.head.data.slice(t)) : n = t === e.head.data.length ? e.shift() : r ? function(t, e) {
          var r = e.head;
          var n = 1;
          var i = r.data;
          t -= i.length;
          for (;r = r.next; ) {
            var o = r.data;
            var a = t > o.length ? o.length : t;
            if (a === o.length ? i += o : i += o.slice(0, t), 0 === (t -= a)) {
              a === o.length ? (++n, r.next ? e.head = r.next : e.head = e.tail = null) : (e.head = r, r.data = o.slice(a));
              break;
            }
            ++n;
          }
          return e.length -= n, i;
        }(t, e) : function(t, e) {
          var r = c.allocUnsafe(t);
          var n = e.head;
          var i = 1;
          n.data.copy(r), t -= n.data.length;
          for (;n = n.next; ) {
            var o = n.data;
            var a = t > o.length ? o.length : t;
            if (o.copy(r, r.length - t, 0, a), 0 === (t -= a)) {
              a === o.length ? (++i, n.next ? e.head = n.next : e.head = e.tail = null) : (e.head = n, n.data = o.slice(a));
              break;
            }
            ++i;
          }
          return e.length -= i, r;
        }(t, e);
        return n;
      }(t, e.buffer, e.decoder), r);
      var r;
    }
    function R(t) {
      var e = t._readableState;
      if (e.length > 0) throw new Error('"endReadable()" called on non-empty stream');
      e.endEmitted || (e.ended = !0, i.nextTick(T, e, t));
    }
    function T(t, e) {
      t.endEmitted || 0 !== t.length || (t.endEmitted = !0, e.readable = !1, e.emit('end'));
    }
    function I(t, e) {
      for (var r = 0, n = t.length; r < n; r++) if (t[r] === e) return r;
      return -1;
    }
    b.prototype.read = function(t) {
      f('read', t), t = parseInt(t, 10);
      var e = this._readableState;
      var r = t;
      if (0 !== t && (e.emittedReadable = !1), 0 === t && e.needReadable && (e.length >= e.highWaterMark || e.ended)) return f('read: emitReadable', e.length, e.ended), 
      0 === e.length && e.ended ? R(this) : k(this), null;
      if (0 === (t = S(t, e)) && e.ended) return 0 === e.length && R(this), null;
      var n = e.needReadable;
      var i;
      return f('need readable', n), (0 === e.length || e.length - t < e.highWaterMark) && f('length less than watermark', n = !0), 
      e.ended || e.reading ? f('reading or ended', n = !1) : n && (f('do read'), e.reading = !0, e.sync = !0, 0 === e.length && (e.needReadable = !0), 
      this._read(e.highWaterMark), e.sync = !1, e.reading || (t = S(r, e))), null === (i = t > 0 ? C(t, e) : null) ? (e.needReadable = !0, 
      t = 0) : e.length -= t, 0 === e.length && (e.ended || (e.needReadable = !0), r !== t && e.ended && R(this)), null !== i && this.emit('data', i), 
      i;
    }, b.prototype._read = function(t) {
      this.emit('error', new Error('_read() is not implemented'));
    }, b.prototype.pipe = function(t, e) {
      var r = this;
      var a = this._readableState;
      switch (a.pipesCount) {
       case 0:
        a.pipes = t;
        break;

       case 1:
        a.pipes = [ a.pipes, t ];
        break;

       default:
        a.pipes.push(t);
      }
      a.pipesCount += 1, f('pipe count=%d opts=%j', a.pipesCount, e);
      var u = (!e || !1 !== e.end) && t !== n.stdout && t !== n.stderr ? h : b;
      function c(e, n) {
        f('onunpipe'), e === r && n && !1 === n.hasUnpiped && (n.hasUnpiped = !0, function() {
          f('cleanup'), t.removeListener('close', g), t.removeListener('finish', y), t.removeListener('drain', l), t.removeListener('error', m), 
          t.removeListener('unpipe', c), r.removeListener('end', h), r.removeListener('end', b), r.removeListener('data', v), d = !0, 
          !a.awaitDrain || t._writableState && !t._writableState.needDrain || l();
        }());
      }
      function h() {
        f('onend'), t.end();
      }
      a.endEmitted ? i.nextTick(u) : r.once('end', u), t.on('unpipe', c);
      var l = function(t) {
        return function() {
          var e = t._readableState;
          f('pipeOnDrain', e.awaitDrain), e.awaitDrain && e.awaitDrain--, 0 === e.awaitDrain && s(t, 'data') && (e.flowing = !0, A(t));
        };
      }(r);
      t.on('drain', l);
      var d = !1;
      var p = !1;
      function v(e) {
        f('ondata'), p = !1, !1 !== t.write(e) || p || ((1 === a.pipesCount && a.pipes === t || a.pipesCount > 1 && -1 !== I(a.pipes, t)) && !d && (f('false write response, pause', r._readableState.awaitDrain), 
        r._readableState.awaitDrain++, p = !0), r.pause());
      }
      function m(e) {
        f('onerror', e), b(), t.removeListener('error', m), 0 === s(t, 'error') && t.emit('error', e);
      }
      function g() {
        t.removeListener('finish', y), b();
      }
      function y() {
        f('onfinish'), t.removeListener('close', g), b();
      }
      function b() {
        f('unpipe'), r.unpipe(t);
      }
      return r.on('data', v), function(t, e, r) {
        if ('function' == typeof t.prependListener) return t.prependListener(e, r);
        t._events && t._events[e] ? o(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [ r, t._events[e] ] : t.on(e, r);
      }(t, 'error', m), t.once('close', g), t.once('finish', y), t.emit('pipe', r), a.flowing || (f('pipe resume'), r.resume()), 
      t;
    }, b.prototype.unpipe = function(t) {
      var e = this._readableState;
      var r = {
        hasUnpiped: !1
      };
      if (0 === e.pipesCount) return this;
      if (1 === e.pipesCount) return t && t !== e.pipes || (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = !1, 
      t && t.emit('unpipe', this, r)), this;
      if (!t) {
        var n = e.pipes;
        var i = e.pipesCount;
        e.pipes = null, e.pipesCount = 0, e.flowing = !1;
        for (var o = 0; o < i; o++) n[o].emit('unpipe', this, r);
        return this;
      }
      var a = I(e.pipes, t);
      return -1 === a || (e.pipes.splice(a, 1), e.pipesCount -= 1, 1 === e.pipesCount && (e.pipes = e.pipes[0]), t.emit('unpipe', this, r)), 
      this;
    }, b.prototype.on = function(t, e) {
      var r = u.prototype.on.call(this, t, e);
      if ('data' === t) !1 !== this._readableState.flowing && this.resume(); else if ('readable' === t) {
        var n = this._readableState;
        n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.emittedReadable = !1, n.reading ? n.length && k(this) : i.nextTick(P, this));
      }
      return r;
    }, b.prototype.addListener = b.prototype.on, b.prototype.resume = function() {
      var t = this._readableState;
      return t.flowing || (f('resume'), t.flowing = !0, function(t, e) {
        e.resumeScheduled || (e.resumeScheduled = !0, i.nextTick(j, t, e));
      }(this, t)), this;
    }, b.prototype.pause = function() {
      return f('call pause flowing=%j', this._readableState.flowing), !1 !== this._readableState.flowing && (f('pause'), this._readableState.flowing = !1, 
      this.emit('pause')), this;
    }, b.prototype.wrap = function(t) {
      var e = this;
      var r = this._readableState;
      var n = !1;
      for (var i in t.on('end', (function() {
        if (f('wrapped end'), r.decoder && !r.ended) {
          var t = r.decoder.end();
          t && t.length && e.push(t);
        }
        e.push(null);
      })), t.on('data', (function(i) {
        (f('wrapped data'), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i) || (r.objectMode || i && i.length) && (e.push(i) || (n = !0, 
        t.pause()));
      })), t) void 0 === this[i] && 'function' == typeof t[i] && (this[i] = function(e) {
        return function() {
          return t[e].apply(t, arguments);
        };
      }(i));
      for (var o = 0; o < g.length; o++) t.on(g[o], this.emit.bind(this, g[o]));
      return this._read = function(e) {
        f('wrapped _read', e), n && (n = !1, t.resume());
      }, this;
    }, Object.defineProperty(b.prototype, 'readableHighWaterMark', {
      enumerable: !1,
      get: function() {
        return this._readableState.highWaterMark;
      }
    }), b._fromList = C;
  },
  60062: (t, e, r) => {
    "use strict";
    t.exports = a;
    var n = r(45867);
    var i = Object.create(r(16497));
    function o(t, e) {
      var r = this._transformState;
      r.transforming = !1;
      var n = r.writecb;
      if (!n) return this.emit('error', new Error('write callback called multiple times'));
      r.writechunk = null, r.writecb = null, null != e && this.push(e), n(t);
      var i = this._readableState;
      i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
    }
    function a(t) {
      if (!(this instanceof a)) return new a(t);
      n.call(this, t), this._transformState = {
        afterTransform: o.bind(this),
        needTransform: !1,
        transforming: !1,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }, this._readableState.needReadable = !0, this._readableState.sync = !1, t && ('function' == typeof t.transform && (this._transform = t.transform), 
      'function' == typeof t.flush && (this._flush = t.flush)), this.on('prefinish', s);
    }
    function s() {
      var t = this;
      'function' == typeof this._flush ? this._flush((function(e, r) {
        u(t, e, r);
      })) : u(this, null, null);
    }
    function u(t, e, r) {
      if (e) return t.emit('error', e);
      if (null != r && t.push(r), t._writableState.length) throw new Error('Calling transform done when ws.length != 0');
      if (t._transformState.transforming) throw new Error('Calling transform done when still transforming');
      return t.push(null);
    }
    i.inherits = r(35717), i.inherits(a, n), a.prototype.push = function(t, e) {
      return this._transformState.needTransform = !1, n.prototype.push.call(this, t, e);
    }, a.prototype._transform = function(t, e, r) {
      throw new Error('_transform() is not implemented');
    }, a.prototype._write = function(t, e, r) {
      var n = this._transformState;
      if (n.writecb = r, n.writechunk = t, n.writeencoding = e, !n.transforming) {
        var i = this._readableState;
        (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
      }
    }, a.prototype._read = function(t) {
      var e = this._transformState;
      null !== e.writechunk && e.writecb && !e.transforming ? (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = !0;
    }, a.prototype._destroy = function(t, e) {
      var r = this;
      n.prototype._destroy.call(this, t, (function(t) {
        e(t), r.emit('close');
      }));
    };
  },
  10759: (t, e, r) => {
    "use strict";
    var n = r(34155);
    var i = r(88212);
    function o(t) {
      var e = this;
      this.next = null, this.entry = null, this.finish = function() {
        !function(t, e, r) {
          var n = t.entry;
          t.entry = null;
          for (;n; ) {
            var i = n.callback;
            e.pendingcb--, i(r), n = n.next;
          }
          e.corkedRequestsFree ? e.corkedRequestsFree.next = t : e.corkedRequestsFree = t;
        }(e, t);
      };
    }
    t.exports = g;
    var a = !n.browser && [ 'v0.10', 'v0.9.' ].indexOf(n.version.slice(0, 5)) > -1 ? setImmediate : i.nextTick;
    var s;
    g.WritableState = v;
    var u = Object.create(r(16497));
    u.inherits = r(35717);
    var c = {
      deprecate: r(94927)
    };
    var h = r(84104);
    var l = r(89509).Buffer;
    var d = r.g.Uint8Array || function() {};
    var f = r(55513);
    function p() {}
    function v(t, e) {
      s = s || r(45867), t = t || {};
      var n = e instanceof s;
      this.objectMode = !!t.objectMode, n && (this.objectMode = this.objectMode || !!t.writableObjectMode);
      var u = t.highWaterMark;
      var c = t.writableHighWaterMark;
      var h = this.objectMode ? 16 : 16384;
      this.highWaterMark = u || 0 === u ? u : n && (c || 0 === c) ? c : h, this.highWaterMark = Math.floor(this.highWaterMark), 
      this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
      var l = !1 === t.decodeStrings;
      this.decodeStrings = !l, this.defaultEncoding = t.defaultEncoding || 'utf8', this.length = 0, this.writing = !1, this.corked = 0, 
      this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(t) {
        !function(t, e) {
          var r = t._writableState;
          var n = r.sync;
          var o = r.writecb;
          if (function(t) {
            t.writing = !1, t.writecb = null, t.length -= t.writelen, t.writelen = 0;
          }(r), e) !function(t, e, r, n, o) {
            --e.pendingcb, r ? (i.nextTick(o, n), i.nextTick(S, t, e), t._writableState.errorEmitted = !0, t.emit('error', n)) : (o(n), 
            t._writableState.errorEmitted = !0, t.emit('error', n), S(t, e));
          }(t, r, n, e, o); else {
            var s = _(r);
            s || r.corked || r.bufferProcessing || !r.bufferedRequest || w(t, r), n ? a(b, t, r, s, o) : b(t, r, s, o);
          }
        }(e, t);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, 
      this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new o(this);
    }
    var m;
    function g(t) {
      if (s = s || r(45867), !(m.call(g, this) || this instanceof s)) return new g(t);
      this._writableState = new v(t, this), this.writable = !0, t && ('function' == typeof t.write && (this._write = t.write), 
      'function' == typeof t.writev && (this._writev = t.writev), 'function' == typeof t.destroy && (this._destroy = t.destroy), 
      'function' == typeof t.final && (this._final = t.final)), h.call(this);
    }
    function y(t, e, r, n, i, o, a) {
      e.writelen = n, e.writecb = a, e.writing = !0, e.sync = !0, r ? t._writev(i, e.onwrite) : t._write(i, o, e.onwrite), e.sync = !1;
    }
    function b(t, e, r, n) {
      r || function(t, e) {
        0 === e.length && e.needDrain && (e.needDrain = !1, t.emit('drain'));
      }(t, e), e.pendingcb--, n(), S(t, e);
    }
    function w(t, e) {
      e.bufferProcessing = !0;
      var r = e.bufferedRequest;
      if (t._writev && r && r.next) {
        var n = e.bufferedRequestCount;
        var i = new Array(n);
        var a = e.corkedRequestsFree;
        a.entry = r;
        var s = 0;
        var u = !0;
        for (;r; ) i[s] = r, r.isBuf || (u = !1), r = r.next, s += 1;
        i.allBuffers = u, y(t, e, !0, e.length, i, '', a.finish), e.pendingcb++, e.lastBufferedRequest = null, a.next ? (e.corkedRequestsFree = a.next, 
        a.next = null) : e.corkedRequestsFree = new o(e), e.bufferedRequestCount = 0;
      } else {
        for (;r; ) {
          var c = r.chunk;
          var h = r.encoding;
          var l = r.callback;
          if (y(t, e, !1, e.objectMode ? 1 : c.length, c, h, l), r = r.next, e.bufferedRequestCount--, e.writing) break;
        }
        null === r && (e.lastBufferedRequest = null);
      }
      e.bufferedRequest = r, e.bufferProcessing = !1;
    }
    function _(t) {
      return t.ending && 0 === t.length && null === t.bufferedRequest && !t.finished && !t.writing;
    }
    function M(t, e) {
      t._final((function(r) {
        e.pendingcb--, r && t.emit('error', r), e.prefinished = !0, t.emit('prefinish'), S(t, e);
      }));
    }
    function S(t, e) {
      var r = _(e);
      return r && (!function(t, e) {
        e.prefinished || e.finalCalled || ('function' == typeof t._final ? (e.pendingcb++, e.finalCalled = !0, i.nextTick(M, t, e)) : (e.prefinished = !0, 
        t.emit('prefinish')));
      }(t, e), 0 === e.pendingcb && (e.finished = !0, t.emit('finish'))), r;
    }
    u.inherits(g, h), v.prototype.getBuffer = function() {
      var t = this.bufferedRequest;
      var e = [];
      for (;t; ) e.push(t), t = t.next;
      return e;
    }, function() {
      try {
        Object.defineProperty(v.prototype, 'buffer', {
          get: c.deprecate((function() {
            return this.getBuffer();
          }), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
      } catch (t) {}
    }(), 'function' == typeof Symbol && Symbol.hasInstance && 'function' == typeof Function.prototype[Symbol.hasInstance] ? (m = Function.prototype[Symbol.hasInstance], 
    Object.defineProperty(g, Symbol.hasInstance, {
      value: function(t) {
        return !!m.call(this, t) || this === g && (t && t._writableState instanceof v);
      }
    })) : m = function(t) {
      return t instanceof this;
    }, g.prototype.pipe = function() {
      this.emit('error', new Error('Cannot pipe, not readable'));
    }, g.prototype.write = function(t, e, r) {
      var n = this._writableState;
      var o = !1;
      var a = !n.objectMode && function(t) {
        return l.isBuffer(t) || t instanceof d;
      }(t);
      return a && !l.isBuffer(t) && (t = function(t) {
        return l.from(t);
      }(t)), 'function' == typeof e && (r = e, e = null), a ? e = 'buffer' : e || (e = n.defaultEncoding), 'function' != typeof r && (r = p), 
      n.ended ? function(t, e) {
        var r = new Error('write after end');
        t.emit('error', r), i.nextTick(e, r);
      }(this, r) : (a || function(t, e, r, n) {
        var o = !0;
        var a = !1;
        return null === r ? a = new TypeError('May not write null values to stream') : 'string' == typeof r || void 0 === r || e.objectMode || (a = new TypeError('Invalid non-string/buffer chunk')), 
        a && (t.emit('error', a), i.nextTick(n, a), o = !1), o;
      }(this, n, t, r)) && (n.pendingcb++, o = function(t, e, r, n, i, o) {
        if (!r) {
          var a = function(t, e, r) {
            t.objectMode || !1 === t.decodeStrings || 'string' != typeof e || (e = l.from(e, r));
            return e;
          }(e, n, i);
          n !== a && (r = !0, i = 'buffer', n = a);
        }
        var s = e.objectMode ? 1 : n.length;
        e.length += s;
        var u = e.length < e.highWaterMark;
        u || (e.needDrain = !0);
        if (e.writing || e.corked) {
          var c = e.lastBufferedRequest;
          e.lastBufferedRequest = {
            chunk: n,
            encoding: i,
            isBuf: r,
            callback: o,
            next: null
          }, c ? c.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1;
        } else y(t, e, !1, s, n, i, o);
        return u;
      }(this, n, a, t, e, r)), o;
    }, g.prototype.cork = function() {
      this._writableState.corked++;
    }, g.prototype.uncork = function() {
      var t = this._writableState;
      t.corked && (t.corked--, t.writing || t.corked || t.finished || t.bufferProcessing || !t.bufferedRequest || w(this, t));
    }, g.prototype.setDefaultEncoding = function(t) {
      if ('string' == typeof t && (t = t.toLowerCase()), !([ 'hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw' ].indexOf((t + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + t);
      return this._writableState.defaultEncoding = t, this;
    }, Object.defineProperty(g.prototype, 'writableHighWaterMark', {
      enumerable: !1,
      get: function() {
        return this._writableState.highWaterMark;
      }
    }), g.prototype._write = function(t, e, r) {
      r(new Error('_write() is not implemented'));
    }, g.prototype._writev = null, g.prototype.end = function(t, e, r) {
      var n = this._writableState;
      'function' == typeof t ? (r = t, t = null, e = null) : 'function' == typeof e && (r = e, e = null), null != t && this.write(t, e), 
      n.corked && (n.corked = 1, this.uncork()), n.ending || n.finished || function(t, e, r) {
        e.ending = !0, S(t, e), r && (e.finished ? i.nextTick(r) : t.once('finish', r));
        e.ended = !0, t.writable = !1;
      }(this, n, r);
    }, Object.defineProperty(g.prototype, 'destroyed', {
      get: function() {
        return void 0 !== this._writableState && this._writableState.destroyed;
      },
      set: function(t) {
        this._writableState && (this._writableState.destroyed = t);
      }
    }), g.prototype.destroy = f.destroy, g.prototype._undestroy = f.undestroy, g.prototype._destroy = function(t, e) {
      this.end(), e(t);
    };
  },
  93912: (t, e, r) => {
    "use strict";
    var n = r(89509).Buffer;
    var i = r(50522);
    function o(t, e, r) {
      t.copy(e, r);
    }
    t.exports = function() {
      function t() {
        !function(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this.head = null, this.tail = null, this.length = 0;
      }
      return t.prototype.push = function(t) {
        var e = {
          data: t,
          next: null
        };
        this.length > 0 ? this.tail.next = e : this.head = e, this.tail = e, ++this.length;
      }, t.prototype.unshift = function(t) {
        var e = {
          data: t,
          next: this.head
        };
        0 === this.length && (this.tail = e), this.head = e, ++this.length;
      }, t.prototype.shift = function() {
        if (0 !== this.length) {
          var t = this.head.data;
          return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, t;
        }
      }, t.prototype.clear = function() {
        this.head = this.tail = null, this.length = 0;
      }, t.prototype.join = function(t) {
        if (0 === this.length) return '';
        var e = this.head;
        var r = '' + e.data;
        for (;e = e.next; ) r += t + e.data;
        return r;
      }, t.prototype.concat = function(t) {
        if (0 === this.length) return n.alloc(0);
        if (1 === this.length) return this.head.data;
        var e = n.allocUnsafe(t >>> 0);
        var r = this.head;
        var i = 0;
        for (;r; ) o(r.data, e, i), i += r.data.length, r = r.next;
        return e;
      }, t;
    }(), i && i.inspect && i.inspect.custom && (t.exports.prototype[i.inspect.custom] = function() {
      var t = i.inspect({
        length: this.length
      });
      return this.constructor.name + ' ' + t;
    });
  },
  55513: (t, e, r) => {
    "use strict";
    var n = r(88212);
    function i(t, e) {
      t.emit('error', e);
    }
    t.exports = {
      destroy: function(t, e) {
        var r = this;
        var o = this._readableState && this._readableState.destroyed;
        var a = this._writableState && this._writableState.destroyed;
        return o || a ? (e ? e(t) : !t || this._writableState && this._writableState.errorEmitted || n.nextTick(i, this, t), this) : (this._readableState && (this._readableState.destroyed = !0), 
        this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, (function(t) {
          !e && t ? (n.nextTick(i, r, t), r._writableState && (r._writableState.errorEmitted = !0)) : e && e(t);
        })), this);
      },
      undestroy: function() {
        this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, 
        this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, 
        this._writableState.ending = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
      }
    };
  },
  84104: (t, e, r) => {
    t.exports = r(17187).EventEmitter;
  },
  96801: (t, e, r) => {
    (e = t.exports = r(44278)).Stream = e, e.Readable = e, e.Writable = r(10759), e.Duplex = r(45867), e.Transform = r(60062), 
    e.PassThrough = r(3431);
  },
  14650: (t, e, r) => {
    var n = r(34155);
    var i = r(96801).Transform, o = r(89539).inherits, a = r(47529);
    function s(t) {
      i.call(this, t), this._destroyed = !1;
    }
    function u(t, e, r) {
      r(null, t);
    }
    function c(t) {
      return function(e, r, n) {
        return 'function' == typeof e && (n = r, r = e, e = {}), 'function' != typeof r && (r = u), 'function' != typeof n && (n = null), 
        t(e, r, n);
      };
    }
    o(s, i), s.prototype.destroy = function(t) {
      if (!this._destroyed) {
        this._destroyed = !0;
        var e = this;
        n.nextTick((function() {
          t && e.emit('error', t), e.emit('close');
        }));
      }
    }, t.exports = c((function(t, e, r) {
      var n = new s(t);
      return n._transform = e, r && (n._flush = r), n;
    })), t.exports.ctor = c((function(t, e, r) {
      function n(e) {
        if (!(this instanceof n)) return new n(e);
        this.options = a(t, e), s.call(this, this.options);
      }
      return o(n, s), n.prototype._transform = e, r && (n.prototype._flush = r), n;
    })), t.exports.obj = c((function(t, e, r) {
      var n = new s(a({
        objectMode: !0,
        highWaterMark: 16
      }, t));
      return n._transform = e, r && (n._flush = r), n;
    }));
  },
  52479: t => {
    t.exports = function t(e, r) {
      if (e && r) return t(e)(r);
      if ('function' != typeof e) throw new TypeError('need wrapper function');
      return Object.keys(e).forEach((function(t) {
        n[t] = e[t];
      })), n;
      function n() {
        var t = new Array(arguments.length);
        for (var r = 0; r < t.length; r++) t[r] = arguments[r];
        var n = e.apply(this, t);
        var i = t[t.length - 1];
        return 'function' == typeof n && n !== i && Object.keys(i).forEach((function(t) {
          n[t] = i[t];
        })), n;
      }
    };
  }
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,