/*! For license information please see 579.bundle.js.LICENSE.txt */
(self.webpackChunktoken_overlay_website = self.webpackChunktoken_overlay_website || []).push([ [ 579 ], {
  96579: (e, t, r) => {
    "use strict";
    r.r(t), r.d(t, {
      getWalletConnectProviderInstance: () => me
    });
    var n = {};
    r.r(n), r.d(n, {
      decrypt: () => Y,
      encrypt: () => Z,
      generateKey: () => G,
      verifyHmac: () => J
    });
    var o = r(55522);
    const i = [ "session_request", "session_update", "exchange_key", "connect", "disconnect", "display_uri", "modal_closed", "transport_open", "transport_close", "transport_error" ];
    const a = [ "eth_sendTransaction", "eth_signTransaction", "eth_sign", "eth_signTypedData", "eth_signTypedData_v1", "eth_signTypedData_v2", "eth_signTypedData_v3", "eth_signTypedData_v4", "personal_sign", "wallet_addEthereumChain", "wallet_switchEthereumChain", "wallet_getPermissions", "wallet_requestPermissions", "wallet_registerOnboarding", "wallet_watchAsset", "wallet_scanQRCode" ];
    const s = {
      1: "mainnet",
      3: "ropsten",
      4: "rinkeby",
      5: "goerli",
      42: "kovan"
    };
    var c = r(11460);
    var u = r.n(c);
    var l = r(23087);
    function f(e) {
      return l.arrayToBuffer(new Uint8Array(e));
    }
    function h(e, t) {
      const r = l.removeHexPrefix(l.sanitizeHex(new (u())(e).toString(16)));
      return t ? r : l.addHexPrefix(r);
    }
    var d = r(91094);
    var p = r(1468);
    function v() {
      return Date.now() * Math.pow(10, 3) + Math.floor(Math.random() * Math.pow(10, 3));
    }
    r(25108);
    function g(e) {
      return l.sanitizeHex(e);
    }
    const m = v;
    function y() {
      return ((e, t) => {
        for (t = e = ""; e++ < 36; t += 51 * e & 52 ? (15 ^ e ? 8 ^ Math.random() * (20 ^ e ? 16 : 4) : 4).toString(16) : "-") ;
        return t;
      })();
    }
    function _(e, t) {
      let r;
      const n = function(e, t) {
        let r;
        const n = s[e];
        return n && (r = `https://${n}.infura.io/v3/${t}`), r;
      }(e, t.infuraId);
      return t.custom && t.custom[e] ? r = t.custom[e] : n && (r = n), r;
    }
    function w(e, t) {
      return l.isHexString(e, t);
    }
    function b(e) {
      return void 0 !== e.result;
    }
    function x(e) {
      return void 0 !== e.error;
    }
    function k(e) {
      return void 0 !== e.event;
    }
    function M(e) {
      e = (0, l.removeHexPrefix)(e.toLowerCase());
      const t = (0, l.removeHexPrefix)((0, d.keccak_256)(function(e) {
        return l.utf8ToBuffer(e);
      }(e)));
      let r = "";
      for (let n = 0; n < e.length; n++) parseInt(t[n], 16) > 7 ? r += e[n].toUpperCase() : r += e[n];
      return (0, l.addHexPrefix)(r);
    }
    function E(e) {
      return function(e) {
        return !(e && e.length);
      }(e) || w(e[0]) || (e[0] = function(e, t) {
        return l.utf8ToHex(e, !t);
      }(e[0])), e;
    }
    function A(e) {
      if (void 0 !== e.type && "0" !== e.type) return e;
      if (void 0 === e.from || !(e => !(!e || "0x" !== e.toLowerCase().substring(0, 2) || !/^(0x)?[0-9a-f]{40}$/i.test(e) || !/^(0x)?[0-9a-f]{40}$/.test(e) && !/^(0x)?[0-9A-F]{40}$/.test(e) && e !== M(e)))(e.from)) throw new Error("Transaction object must include a valid 'from' value.");
      function t(e) {
        let t = e;
        return ("number" == typeof e || "string" == typeof e && !function(e) {
          return "" === e || "string" == typeof e && "" === e.trim();
        }(e)) && (w(e) ? "string" == typeof e && (t = g(e)) : t = h(e)), "string" == typeof t && (t = function(e) {
          return l.removeHexLeadingZeros(l.addHexPrefix(e));
        }(t)), t;
      }
      const r = {
        from: g(e.from),
        to: void 0 === e.to ? "" : g(e.to),
        gasPrice: void 0 === e.gasPrice ? "" : t(e.gasPrice),
        gas: void 0 === e.gas ? void 0 === e.gasLimit ? "" : t(e.gasLimit) : t(e.gas),
        value: void 0 === e.value ? "" : t(e.value),
        nonce: void 0 === e.nonce ? "" : t(e.nonce),
        data: void 0 === e.data ? "" : g(e.data) || "0x"
      };
      const n = [ "gasPrice", "gas", "value", "nonce" ];
      return Object.keys(r).forEach((e => {
        !r[e].trim().length && n.includes(e) && delete r[e];
      })), r;
    }
    var C = r(66151);
    function S(e, t) {
      let r = T(e);
      return r = Object.assign(Object.assign({}, r), t), e = function(e) {
        return C.stringify(e);
      }(r), e;
    }
    function T(e) {
      return C.parse(e);
    }
    const R = class {
      constructor() {
        this._eventEmitters = [], "undefined" != typeof window && void 0 !== window.addEventListener && (window.addEventListener("online", (() => this.trigger("online"))), 
        window.addEventListener("offline", (() => this.trigger("offline"))));
      }
      on(e, t) {
        this._eventEmitters.push({
          event: e,
          callback: t
        });
      }
      trigger(e) {
        let t = [];
        e && (t = this._eventEmitters.filter((t => t.event === e))), t.forEach((e => {
          e.callback();
        }));
      }
    };
    const B = void 0 !== r.g.WebSocket ? r.g.WebSocket : r(68007);
    const P = class {
      constructor(e) {
        if (this.opts = e, this._queue = [], this._events = [], this._subscriptions = [], this._protocol = e.protocol, this._version = e.version, 
        this._url = "", this._netMonitor = null, this._socket = null, this._nextSocket = null, this._subscriptions = e.subscriptions || [], 
        this._netMonitor = e.netMonitor || new R, !e.url || "string" != typeof e.url) throw new Error("Missing or invalid WebSocket url");
        this._url = e.url, this._netMonitor.on("online", (() => this._socketCreate()));
      }
      set readyState(e) {}
      get readyState() {
        return this._socket ? this._socket.readyState : -1;
      }
      set connecting(e) {}
      get connecting() {
        return 0 === this.readyState;
      }
      set connected(e) {}
      get connected() {
        return 1 === this.readyState;
      }
      set closing(e) {}
      get closing() {
        return 2 === this.readyState;
      }
      set closed(e) {}
      get closed() {
        return 3 === this.readyState;
      }
      open() {
        this._socketCreate();
      }
      close() {
        this._socketClose();
      }
      send(e, t, r) {
        if (!t || "string" != typeof t) throw new Error("Missing or invalid topic field");
        this._socketSend({
          topic: t,
          type: "pub",
          payload: e,
          silent: !!r
        });
      }
      subscribe(e) {
        this._socketSend({
          topic: e,
          type: "sub",
          payload: "",
          silent: !0
        });
      }
      on(e, t) {
        this._events.push({
          event: e,
          callback: t
        });
      }
      _socketCreate() {
        if (this._nextSocket) return;
        const e = function(e, t, r) {
          var n, i;
          const a = (e.startsWith("https") ? e.replace("https", "wss") : e.startsWith("http") ? e.replace("http", "ws") : e).split("?");
          const s = (0, o.isBrowser)() ? {
            protocol: t,
            version: r,
            env: "browser",
            host: (null === (n = (0, o.getLocation)()) || void 0 === n ? void 0 : n.host) || ""
          } : {
            protocol: t,
            version: r,
            env: (null === (i = (0, o.detectEnv)()) || void 0 === i ? void 0 : i.name) || ""
          };
          const c = S(function(e) {
            const t = -1 !== e.indexOf("?") ? e.indexOf("?") : void 0;
            return void 0 !== t ? e.substr(t) : "";
          }(a[1] || ""), s);
          return a[0] + "?" + c;
        }(this._url, this._protocol, this._version);
        if (this._nextSocket = new B(e), !this._nextSocket) throw new Error("Failed to create socket");
        this._nextSocket.onmessage = e => this._socketReceive(e), this._nextSocket.onopen = () => this._socketOpen(), this._nextSocket.onerror = e => this._socketError(e), 
        this._nextSocket.onclose = () => {
          setTimeout((() => {
            this._nextSocket = null, this._socketCreate();
          }), 1e3);
        };
      }
      _socketOpen() {
        this._socketClose(), this._socket = this._nextSocket, this._nextSocket = null, this._queueSubscriptions(), this._pushQueue();
      }
      _socketClose() {
        this._socket && (this._socket.onclose = () => {}, this._socket.close());
      }
      _socketSend(e) {
        const t = JSON.stringify(e);
        this._socket && 1 === this._socket.readyState ? this._socket.send(t) : (this._setToQueue(e), this._socketCreate());
      }
      async _socketReceive(e) {
        let t;
        try {
          t = JSON.parse(e.data);
        } catch (r) {
          return;
        }
        if (this._socketSend({
          topic: t.topic,
          type: "ack",
          payload: "",
          silent: !0
        }), this._socket && 1 === this._socket.readyState) {
          const e = this._events.filter((e => "message" === e.event));
          e && e.length && e.forEach((e => e.callback(t)));
        }
      }
      _socketError(e) {
        const t = this._events.filter((e => "error" === e.event));
        t && t.length && t.forEach((t => t.callback(e)));
      }
      _queueSubscriptions() {
        this._subscriptions.forEach((e => this._queue.push({
          topic: e,
          type: "sub",
          payload: "",
          silent: !0
        }))), this._subscriptions = this.opts.subscriptions || [];
      }
      _setToQueue(e) {
        this._queue.push(e);
      }
      _pushQueue() {
        this._queue.forEach((e => this._socketSend(e))), this._queue = [];
      }
    };
    const I = "Session currently connected";
    const L = "Session currently disconnected";
    const O = "JSON RPC response format is invalid";
    const N = "User close QRCode Modal";
    const U = class {
      constructor() {
        this._eventEmitters = [];
      }
      subscribe(e) {
        this._eventEmitters.push(e);
      }
      unsubscribe(e) {
        this._eventEmitters = this._eventEmitters.filter((t => t.event !== e));
      }
      trigger(e) {
        let t = [];
        let r;
        r = function(e) {
          return void 0 !== e.method;
        }(e) ? e.method : b(e) || x(e) ? `response:${e.id}` : k(e) ? e.event : "", r && (t = this._eventEmitters.filter((e => e.event === r))), 
        t && t.length || function(e) {
          return i.includes(e) || e.startsWith("wc_");
        }(r) || k(r) || (t = this._eventEmitters.filter((e => "call_request" === e.event))), t.forEach((t => {
          if (x(e)) {
            const r = new Error(e.error.message);
            t.callback(r, null);
          } else t.callback(null, e);
        }));
      }
    };
    const j = class {
      constructor(e = "walletconnect") {
        this.storageId = e;
      }
      getSession() {
        let e = null;
        const t = (0, o.getLocal)(this.storageId);
        return t && function(e) {
          return void 0 !== e.bridge;
        }(t) && (e = t), e;
      }
      setSession(e) {
        return (0, o.setLocal)(this.storageId, e), e;
      }
      removeSession() {
        (0, o.removeLocal)(this.storageId);
      }
    };
    const q = "abcdefghijklmnopqrstuvwxyz0123456789".split("").map((e => `https://${e}.bridge.walletconnect.org`));
    function H() {
      return q[function() {
        return Math.floor(Math.random() * q.length);
      }()];
    }
    const F = class {
      constructor(e) {
        if (this.protocol = "wc", this.version = 1, this._bridge = "", this._key = null, this._clientId = "", this._clientMeta = null, 
        this._peerId = "", this._peerMeta = null, this._handshakeId = 0, this._handshakeTopic = "", this._connected = !1, this._accounts = [], 
        this._chainId = 0, this._networkId = 0, this._rpcUrl = "", this._eventManager = new U, this._clientMeta = (0, o.getClientMeta)() || e.connectorOpts.clientMeta || null, 
        this._cryptoLib = e.cryptoLib, this._sessionStorage = e.sessionStorage || new j(e.connectorOpts.storageId), this._qrcodeModal = e.connectorOpts.qrcodeModal, 
        this._qrcodeModalOptions = e.connectorOpts.qrcodeModalOptions, this._signingMethods = [ ...a, ...e.connectorOpts.signingMethods || [] ], 
        !e.connectorOpts.bridge && !e.connectorOpts.uri && !e.connectorOpts.session) throw new Error("Missing one of the required parameters: bridge / uri / session");
        e.connectorOpts.bridge && (this.bridge = function(e) {
          return function(e) {
            return "walletconnect.org" === function(e) {
              return function(e) {
                let t = e.indexOf("//") > -1 ? e.split("/")[2] : e.split("/")[0];
                return t = t.split(":")[0], t = t.split("?")[0], t;
              }(e).split(".").slice(-2).join(".");
            }(e);
          }(e) ? H() : e;
        }(e.connectorOpts.bridge)), e.connectorOpts.uri && (this.uri = e.connectorOpts.uri);
        const t = e.connectorOpts.session || this._getStorageSession();
        t && (this.session = t), this.handshakeId && this._subscribeToSessionResponse(this.handshakeId, "Session request rejected"), 
        this._transport = e.transport || new P({
          protocol: this.protocol,
          version: this.version,
          url: this.bridge,
          subscriptions: [ this.clientId ]
        }), this._subscribeToInternalEvents(), this._initTransport(), e.connectorOpts.uri && this._subscribeToSessionRequest(), 
        e.pushServerOpts && this._registerPushServer(e.pushServerOpts);
      }
      set bridge(e) {
        e && (this._bridge = e);
      }
      get bridge() {
        return this._bridge;
      }
      set key(e) {
        if (!e) return;
        const t = function(e) {
          return l.hexToArray(e).buffer;
        }(e);
        this._key = t;
      }
      get key() {
        if (this._key) {
          return function(e, t) {
            return l.arrayToHex(new Uint8Array(e), !t);
          }(this._key, !0);
        }
        return "";
      }
      set clientId(e) {
        e && (this._clientId = e);
      }
      get clientId() {
        let e = this._clientId;
        return e || (e = this._clientId = y()), this._clientId;
      }
      set peerId(e) {
        e && (this._peerId = e);
      }
      get peerId() {
        return this._peerId;
      }
      set clientMeta(e) {}
      get clientMeta() {
        let e = this._clientMeta;
        return e || (e = this._clientMeta = (0, o.getClientMeta)()), e;
      }
      set peerMeta(e) {
        this._peerMeta = e;
      }
      get peerMeta() {
        return this._peerMeta;
      }
      set handshakeTopic(e) {
        e && (this._handshakeTopic = e);
      }
      get handshakeTopic() {
        return this._handshakeTopic;
      }
      set handshakeId(e) {
        e && (this._handshakeId = e);
      }
      get handshakeId() {
        return this._handshakeId;
      }
      get uri() {
        return this._formatUri();
      }
      set uri(e) {
        if (!e) return;
        const {handshakeTopic: t, bridge: r, key: n} = this._parseUri(e);
        this.handshakeTopic = t, this.bridge = r, this.key = n;
      }
      set chainId(e) {
        this._chainId = e;
      }
      get chainId() {
        return this._chainId;
      }
      set networkId(e) {
        this._networkId = e;
      }
      get networkId() {
        return this._networkId;
      }
      set accounts(e) {
        this._accounts = e;
      }
      get accounts() {
        return this._accounts;
      }
      set rpcUrl(e) {
        this._rpcUrl = e;
      }
      get rpcUrl() {
        return this._rpcUrl;
      }
      set connected(e) {}
      get connected() {
        return this._connected;
      }
      set pending(e) {}
      get pending() {
        return !!this._handshakeTopic;
      }
      get session() {
        return {
          connected: this.connected,
          accounts: this.accounts,
          chainId: this.chainId,
          bridge: this.bridge,
          key: this.key,
          clientId: this.clientId,
          clientMeta: this.clientMeta,
          peerId: this.peerId,
          peerMeta: this.peerMeta,
          handshakeId: this.handshakeId,
          handshakeTopic: this.handshakeTopic
        };
      }
      set session(e) {
        e && (this._connected = e.connected, this.accounts = e.accounts, this.chainId = e.chainId, this.bridge = e.bridge, this.key = e.key, 
        this.clientId = e.clientId, this.clientMeta = e.clientMeta, this.peerId = e.peerId, this.peerMeta = e.peerMeta, this.handshakeId = e.handshakeId, 
        this.handshakeTopic = e.handshakeTopic);
      }
      on(e, t) {
        const r = {
          event: e,
          callback: t
        };
        this._eventManager.subscribe(r);
      }
      off(e) {
        this._eventManager.unsubscribe(e);
      }
      async createInstantRequest(e) {
        this._key = await this._generateKey();
        const t = this._formatRequest({
          method: "wc_instantRequest",
          params: [ {
            peerId: this.clientId,
            peerMeta: this.clientMeta,
            request: this._formatRequest(e)
          } ]
        });
        this.handshakeId = t.id, this.handshakeTopic = y(), this._eventManager.trigger({
          event: "display_uri",
          params: [ this.uri ]
        }), this.on("modal_closed", (() => {
          throw new Error(N);
        }));
        const r = () => {
          this.killSession();
        };
        try {
          const e = await this._sendCallRequest(t);
          return e && r(), e;
        } catch (n) {
          throw r(), n;
        }
      }
      async connect(e) {
        if (!this._qrcodeModal) throw new Error("QRCode Modal not provided");
        return this.connected ? {
          chainId: this.chainId,
          accounts: this.accounts
        } : (await this.createSession(e), new Promise((async (e, t) => {
          this.on("modal_closed", (() => t(new Error(N)))), this.on("connect", ((r, n) => {
            if (r) return t(r);
            e(n.params[0]);
          }));
        })));
      }
      async createSession(e) {
        if (this._connected) throw new Error(I);
        if (this.pending) return;
        this._key = await this._generateKey();
        const t = this._formatRequest({
          method: "wc_sessionRequest",
          params: [ {
            peerId: this.clientId,
            peerMeta: this.clientMeta,
            chainId: e && e.chainId ? e.chainId : null
          } ]
        });
        this.handshakeId = t.id, this.handshakeTopic = y(), this._sendSessionRequest(t, "Session update rejected", {
          topic: this.handshakeTopic
        }), this._eventManager.trigger({
          event: "display_uri",
          params: [ this.uri ]
        });
      }
      approveSession(e) {
        if (this._connected) throw new Error(I);
        this.chainId = e.chainId, this.accounts = e.accounts, this.networkId = e.networkId || 0, this.rpcUrl = e.rpcUrl || "";
        const t = {
          approved: !0,
          chainId: this.chainId,
          networkId: this.networkId,
          accounts: this.accounts,
          rpcUrl: this.rpcUrl,
          peerId: this.clientId,
          peerMeta: this.clientMeta
        };
        const r = {
          id: this.handshakeId,
          jsonrpc: "2.0",
          result: t
        };
        this._sendResponse(r), this._connected = !0, this._setStorageSession(), this._eventManager.trigger({
          event: "connect",
          params: [ {
            peerId: this.peerId,
            peerMeta: this.peerMeta,
            chainId: this.chainId,
            accounts: this.accounts
          } ]
        });
      }
      rejectSession(e) {
        if (this._connected) throw new Error(I);
        const t = e && e.message ? e.message : "Session Rejected";
        const r = this._formatResponse({
          id: this.handshakeId,
          error: {
            message: t
          }
        });
        this._sendResponse(r), this._connected = !1, this._eventManager.trigger({
          event: "disconnect",
          params: [ {
            message: t
          } ]
        }), this._removeStorageSession();
      }
      updateSession(e) {
        if (!this._connected) throw new Error(L);
        this.chainId = e.chainId, this.accounts = e.accounts, this.networkId = e.networkId || 0, this.rpcUrl = e.rpcUrl || "";
        const t = {
          approved: !0,
          chainId: this.chainId,
          networkId: this.networkId,
          accounts: this.accounts,
          rpcUrl: this.rpcUrl
        };
        const r = this._formatRequest({
          method: "wc_sessionUpdate",
          params: [ t ]
        });
        this._sendSessionRequest(r, "Session update rejected"), this._eventManager.trigger({
          event: "session_update",
          params: [ {
            chainId: this.chainId,
            accounts: this.accounts
          } ]
        }), this._manageStorageSession();
      }
      async killSession(e) {
        const t = e ? e.message : "Session Disconnected";
        const r = this._formatRequest({
          method: "wc_sessionUpdate",
          params: [ {
            approved: !1,
            chainId: null,
            networkId: null,
            accounts: null
          } ]
        });
        await this._sendRequest(r), this._handleSessionDisconnect(t);
      }
      async sendTransaction(e) {
        if (!this._connected) throw new Error(L);
        const t = A(e);
        const r = this._formatRequest({
          method: "eth_sendTransaction",
          params: [ t ]
        });
        return await this._sendCallRequest(r);
      }
      async signTransaction(e) {
        if (!this._connected) throw new Error(L);
        const t = A(e);
        const r = this._formatRequest({
          method: "eth_signTransaction",
          params: [ t ]
        });
        return await this._sendCallRequest(r);
      }
      async signMessage(e) {
        if (!this._connected) throw new Error(L);
        const t = this._formatRequest({
          method: "eth_sign",
          params: e
        });
        return await this._sendCallRequest(t);
      }
      async signPersonalMessage(e) {
        if (!this._connected) throw new Error(L);
        e = E(e);
        const t = this._formatRequest({
          method: "personal_sign",
          params: e
        });
        return await this._sendCallRequest(t);
      }
      async signTypedData(e) {
        if (!this._connected) throw new Error(L);
        const t = this._formatRequest({
          method: "eth_signTypedData",
          params: e
        });
        return await this._sendCallRequest(t);
      }
      async updateChain(e) {
        if (!this._connected) throw new Error("Session currently disconnected");
        const t = this._formatRequest({
          method: "wallet_updateChain",
          params: [ e ]
        });
        return await this._sendCallRequest(t);
      }
      unsafeSend(e, t) {
        return this._sendRequest(e, t), this._eventManager.trigger({
          event: "call_request_sent",
          params: [ {
            request: e,
            options: t
          } ]
        }), new Promise(((t, r) => {
          this._subscribeToResponse(e.id, ((e, n) => {
            if (e) r(e); else {
              if (!n) throw new Error("Missing JSON RPC response");
              t(n);
            }
          }));
        }));
      }
      async sendCustomRequest(e, t) {
        if (!this._connected) throw new Error(L);
        switch (e.method) {
         case "eth_accounts":
          return this.accounts;

         case "eth_chainId":
          return h(this.chainId);

         case "eth_sendTransaction":
         case "eth_signTransaction":
          e.params && (e.params[0] = A(e.params[0]));
          break;

         case "personal_sign":
          e.params && (e.params = E(e.params));
        }
        const r = this._formatRequest(e);
        return await this._sendCallRequest(r, t);
      }
      approveRequest(e) {
        if (!b(e)) throw new Error("JSON-RPC success response must include \"result\" field");
        {
          const t = this._formatResponse(e);
          this._sendResponse(t);
        }
      }
      rejectRequest(e) {
        if (!x(e)) throw new Error("JSON-RPC error response must include \"error\" field");
        {
          const t = this._formatResponse(e);
          this._sendResponse(t);
        }
      }
      transportClose() {
        this._transport.close();
      }
      async _sendRequest(e, t) {
        const r = this._formatRequest(e);
        const n = await this._encrypt(r);
        const o = void 0 !== (null == t ? void 0 : t.topic) ? t.topic : this.peerId;
        const i = JSON.stringify(n);
        const s = void 0 !== (null == t ? void 0 : t.forcePushNotification) ? !t.forcePushNotification : function(e) {
          return !!e.method.startsWith("wc_") || !a.includes(e.method);
        }(r);
        this._transport.send(i, o, s);
      }
      async _sendResponse(e) {
        const t = await this._encrypt(e);
        const r = this.peerId;
        const n = JSON.stringify(t);
        this._transport.send(n, r, !0);
      }
      async _sendSessionRequest(e, t, r) {
        this._sendRequest(e, r), this._subscribeToSessionResponse(e.id, t);
      }
      _sendCallRequest(e, t) {
        return this._sendRequest(e, t), this._eventManager.trigger({
          event: "call_request_sent",
          params: [ {
            request: e,
            options: t
          } ]
        }), this._subscribeToCallResponse(e.id);
      }
      _formatRequest(e) {
        if (void 0 === e.method) throw new Error("JSON RPC request must have valid \"method\" value");
        return {
          id: void 0 === e.id ? m() : e.id,
          jsonrpc: "2.0",
          method: e.method,
          params: void 0 === e.params ? [] : e.params
        };
      }
      _formatResponse(e) {
        if (void 0 === e.id) throw new Error("JSON RPC request must have valid \"id\" value");
        const t = {
          id: e.id,
          jsonrpc: "2.0"
        };
        if (x(e)) {
          const r = function(e) {
            const t = e.message || "Failed or Rejected Request";
            let r = -32e3;
            if (e && !e.code) switch (t) {
             case "Parse error":
              r = -32700;
              break;

             case "Invalid request":
              r = -32600;
              break;

             case "Method not found":
              r = -32601;
              break;

             case "Invalid params":
              r = -32602;
              break;

             case "Internal error":
              r = -32603;
              break;

             default:
              r = -32e3;
            }
            return {
              code: r,
              message: t
            };
          }(e.error);
          return Object.assign(Object.assign(Object.assign({}, t), e), {
            error: r
          });
        }
        if (b(e)) {
          return Object.assign(Object.assign({}, t), e);
        }
        throw new Error(O);
      }
      _handleSessionDisconnect(e) {
        const t = e || "Session Disconnected";
        this._connected || (this._qrcodeModal && this._qrcodeModal.close(), (0, o.removeLocal)(o.mobileLinkChoiceKey)), this._connected && (this._connected = !1), 
        this._handshakeId && (this._handshakeId = 0), this._handshakeTopic && (this._handshakeTopic = ""), this._peerId && (this._peerId = ""), 
        this._eventManager.trigger({
          event: "disconnect",
          params: [ {
            message: t
          } ]
        }), this._removeStorageSession(), this.transportClose();
      }
      _handleSessionResponse(e, t) {
        t && t.approved ? (this._connected ? (t.chainId && (this.chainId = t.chainId), t.accounts && (this.accounts = t.accounts), 
        this._eventManager.trigger({
          event: "session_update",
          params: [ {
            chainId: this.chainId,
            accounts: this.accounts
          } ]
        })) : (this._connected = !0, t.chainId && (this.chainId = t.chainId), t.accounts && (this.accounts = t.accounts), t.peerId && !this.peerId && (this.peerId = t.peerId), 
        t.peerMeta && !this.peerMeta && (this.peerMeta = t.peerMeta), this._eventManager.trigger({
          event: "connect",
          params: [ {
            peerId: this.peerId,
            peerMeta: this.peerMeta,
            chainId: this.chainId,
            accounts: this.accounts
          } ]
        })), this._manageStorageSession()) : this._handleSessionDisconnect(e);
      }
      async _handleIncomingMessages(e) {
        if (![ this.clientId, this.handshakeTopic ].includes(e.topic)) return;
        let t;
        try {
          t = JSON.parse(e.payload);
        } catch (n) {
          return;
        }
        const r = await this._decrypt(t);
        r && this._eventManager.trigger(r);
      }
      _subscribeToSessionRequest() {
        this._transport.subscribe(this.handshakeTopic);
      }
      _subscribeToResponse(e, t) {
        this.on(`response:${e}`, t);
      }
      _subscribeToSessionResponse(e, t) {
        this._subscribeToResponse(e, ((e, r) => {
          e ? this._handleSessionResponse(e.message) : r.result ? this._handleSessionResponse(t, r.result) : r.error && r.error.message ? this._handleSessionResponse(r.error.message) : this._handleSessionResponse(t);
        }));
      }
      _subscribeToCallResponse(e) {
        return new Promise(((t, r) => {
          this._subscribeToResponse(e, ((e, n) => {
            e ? r(e) : n.result ? t(n.result) : n.error && n.error.message ? r(new Error(n.error.message)) : r(new Error(O));
          }));
        }));
      }
      _subscribeToInternalEvents() {
        this.on("display_uri", (() => {
          this._qrcodeModal && this._qrcodeModal.open(this.uri, (() => {
            this._eventManager.trigger({
              event: "modal_closed",
              params: []
            });
          }), this._qrcodeModalOptions);
        })), this.on("connect", (() => {
          this._qrcodeModal && this._qrcodeModal.close();
        })), this.on("call_request_sent", ((e, t) => {
          const {request: r} = t.params[0];
          if ((0, o.isMobile)() && this._signingMethods.includes(r.method)) {
            const e = (0, o.getLocal)(o.mobileLinkChoiceKey);
            e && (window.location.href = e.href);
          }
        })), this.on("wc_sessionRequest", ((e, t) => {
          e && this._eventManager.trigger({
            event: "error",
            params: [ {
              code: "SESSION_REQUEST_ERROR",
              message: e.toString()
            } ]
          }), this.handshakeId = t.id, this.peerId = t.params[0].peerId, this.peerMeta = t.params[0].peerMeta;
          const r = Object.assign(Object.assign({}, t), {
            method: "session_request"
          });
          this._eventManager.trigger(r);
        })), this.on("wc_sessionUpdate", ((e, t) => {
          e && this._handleSessionResponse(e.message), this._handleSessionResponse("Session disconnected", t.params[0]);
        }));
      }
      _initTransport() {
        this._transport.on("message", (e => this._handleIncomingMessages(e))), this._transport.on("open", (() => this._eventManager.trigger({
          event: "transport_open",
          params: []
        }))), this._transport.on("close", (() => this._eventManager.trigger({
          event: "transport_close",
          params: []
        }))), this._transport.on("error", (() => this._eventManager.trigger({
          event: "transport_error",
          params: [ "Websocket connection failed" ]
        }))), this._transport.open();
      }
      _formatUri() {
        return `${this.protocol}:${this.handshakeTopic}@${this.version}?bridge=${encodeURIComponent(this.bridge)}&key=${this.key}`;
      }
      _parseUri(e) {
        const t = function(e) {
          const t = e.indexOf(":");
          const r = -1 !== e.indexOf("?") ? e.indexOf("?") : void 0;
          const n = e.substring(0, t);
          const o = function(e) {
            const t = e.split("@");
            return {
              handshakeTopic: t[0],
              version: parseInt(t[1], 10)
            };
          }(e.substring(t + 1, r));
          const i = function(e) {
            const t = T(e);
            return {
              key: t.key || "",
              bridge: t.bridge || ""
            };
          }(void 0 !== r ? e.substr(r) : "");
          return Object.assign(Object.assign({
            protocol: n
          }, o), i);
        }(e);
        if (t.protocol === this.protocol) {
          if (!t.handshakeTopic) throw Error("Invalid or missing handshakeTopic parameter value");
          const e = t.handshakeTopic;
          if (!t.bridge) throw Error("Invalid or missing bridge url parameter value");
          const r = decodeURIComponent(t.bridge);
          if (!t.key) throw Error("Invalid or missing key parameter value");
          return {
            handshakeTopic: e,
            bridge: r,
            key: t.key
          };
        }
        throw new Error("URI format is invalid");
      }
      async _generateKey() {
        if (this._cryptoLib) {
          return await this._cryptoLib.generateKey();
        }
        return null;
      }
      async _encrypt(e) {
        const t = this._key;
        if (this._cryptoLib && t) {
          return await this._cryptoLib.encrypt(e, t);
        }
        return null;
      }
      async _decrypt(e) {
        const t = this._key;
        if (this._cryptoLib && t) {
          return await this._cryptoLib.decrypt(e, t);
        }
        return null;
      }
      _getStorageSession() {
        let e = null;
        return this._sessionStorage && (e = this._sessionStorage.getSession()), e;
      }
      _setStorageSession() {
        this._sessionStorage && this._sessionStorage.setSession(this.session);
      }
      _removeStorageSession() {
        this._sessionStorage && this._sessionStorage.removeSession();
      }
      _manageStorageSession() {
        this._connected ? this._setStorageSession() : this._removeStorageSession();
      }
      _registerPushServer(e) {
        if (!e.url || "string" != typeof e.url) throw Error("Invalid or missing pushServerOpts.url parameter value");
        if (!e.type || "string" != typeof e.type) throw Error("Invalid or missing pushServerOpts.type parameter value");
        if (!e.token || "string" != typeof e.token) throw Error("Invalid or missing pushServerOpts.token parameter value");
        const t = {
          bridge: this.bridge,
          topic: this.clientId,
          type: e.type,
          token: e.token,
          peerName: "",
          language: e.language || ""
        };
        this.on("connect", (async (r, n) => {
          if (r) throw r;
          if (e.peerMeta) {
            const e = n.params[0].peerMeta.name;
            t.peerName = e;
          }
          try {
            const r = await fetch(`${e.url}/new`, {
              method: "POST",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify(t)
            });
            if (!(await r.json()).success) throw Error("Failed to register in Push Server");
          } catch (r) {
            throw Error("Failed to register in Push Server");
          }
        }));
      }
    };
    const K = "AES-CBC";
    const D = "HMAC";
    async function z(e, t = "AES-CBC") {
      return p.getSubtleCrypto().importKey("raw", e, function(e) {
        return e === K ? {
          length: 256,
          name: K
        } : {
          hash: {
            name: "SHA-256"
          },
          name: D
        };
      }(t), !0, function(e) {
        return e === K ? [ "encrypt", "decrypt" ] : [ "sign", "verify" ];
      }(t));
    }
    function W(e, t, r) {
      return async function(e, t, r) {
        const n = p.getSubtleCrypto();
        const o = await z(t, K);
        const i = await n.encrypt({
          iv: e,
          name: K
        }, o, r);
        return new Uint8Array(i);
      }(e, t, r);
    }
    function V(e, t, r) {
      return async function(e, t, r) {
        const n = p.getSubtleCrypto();
        const o = await z(t, K);
        const i = await n.decrypt({
          iv: e,
          name: K
        }, o, r);
        return new Uint8Array(i);
      }(e, t, r);
    }
    async function $(e, t) {
      const r = await async function(e, t) {
        const r = p.getSubtleCrypto();
        const n = await z(e, D);
        const o = await r.sign({
          length: 256,
          name: D
        }, n, t);
        return new Uint8Array(o);
      }(e, t);
      return r;
    }
    async function G(e) {
      const t = function(e) {
        return p.getBrowerCrypto().getRandomValues(new Uint8Array(e));
      }((e || 256) / 8);
      return function(e) {
        return l.bufferToArray(e).buffer;
      }(l.arrayToBuffer(t));
    }
    async function J(e, t) {
      const r = l.hexToArray(e.data);
      const n = l.hexToArray(e.iv);
      const o = l.hexToArray(e.hmac);
      const i = l.arrayToHex(o, !1);
      const a = l.concatArrays(r, n);
      const s = await $(t, a);
      const c = l.arrayToHex(s, !1);
      return l.removeHexPrefix(i) === l.removeHexPrefix(c);
    }
    async function Z(e, t, r) {
      const n = l.bufferToArray(f(t));
      const o = r || await G(128);
      const i = l.bufferToArray(f(o));
      const a = l.arrayToHex(i, !1);
      const s = JSON.stringify(e);
      const c = l.utf8ToArray(s);
      const u = await W(i, n, c);
      const h = l.arrayToHex(u, !1);
      const d = l.concatArrays(u, i);
      const p = await $(n, d);
      return {
        data: h,
        hmac: l.arrayToHex(p, !1),
        iv: a
      };
    }
    async function Y(e, t) {
      const r = l.bufferToArray(f(t));
      if (!r) throw new Error("Missing key: required for decryption");
      if (!await J(e, r)) return null;
      const n = l.hexToArray(e.data);
      const o = l.hexToArray(e.iv);
      const i = await V(o, r, n);
      const a = l.arrayToUtf8(i);
      let s;
      try {
        s = JSON.parse(a);
      } catch (c) {
        return null;
      }
      return s;
    }
    const Q = class extends F {
      constructor(e, t) {
        super({
          cryptoLib: n,
          connectorOpts: e,
          pushServerOpts: t
        });
      }
    };
    var X = r(4337);
    var ee = r.n(X);
    var te = r(26729);
    var re = r.n(te);
    var ne = r(59536);
    const oe = (0, o.getFromWindow)("XMLHttpRequest") || ne.XMLHttpRequest;
    class ie extends(re()){
      constructor(e) {
        super(), this.url = e;
      }
      formatError(e, t, r = -1) {
        return {
          error: {
            message: t,
            code: r
          },
          id: e.id,
          jsonrpc: e.jsonrpc
        };
      }
      send(e, t) {
        return new Promise((r => {
          if ("eth_subscribe" === e.method) {
            const t = this.formatError(e, "Subscriptions are not supported by this HTTP endpoint");
            return this.emit("error", t), r(t);
          }
          const n = new oe;
          let o = !1;
          const i = (i, a) => {
            if (!o) if (n.abort(), o = !0, t) t(i, a); else {
              const {id: t, jsonrpc: n} = e;
              const o = i ? {
                id: t,
                jsonrpc: n,
                error: {
                  message: i.message,
                  code: i.code
                }
              } : {
                id: t,
                jsonrpc: n,
                result: a
              };
              this.emit("payload", o), r(o);
            }
          };
          n.open("POST", this.url, !0), n.setRequestHeader("Content-Type", "application/json"), n.timeout = 6e4, n.onerror = i, n.ontimeout = i, 
          n.onreadystatechange = () => {
            if (4 === n.readyState) try {
              const e = JSON.parse(n.responseText);
              i(e.error, e.result);
            } catch (e) {
              i(e);
            }
          }, n.send(JSON.stringify(e));
        }));
      }
    }
    const ae = ie;
    const se = r(50356);
    const ce = r(47467);
    const ue = r(96185);
    const le = r(13730);
    const fe = r(46319);
    const he = r(40803);
    const de = r(90522);
    const pe = class extends se {
      constructor(e) {
        if (super({
          pollingInterval: e.pollingInterval || 8e3
        }), this.bridge = "https://bridge.walletconnect.org", this.qrcode = !0, this.qrcodeModal = ee(), this.qrcodeModalOptions = void 0, 
        this.rpc = null, this.infuraId = "", this.http = null, this.isConnecting = !1, this.connected = !1, this.connectCallbacks = [], 
        this.accounts = [], this.chainId = 1, this.rpcUrl = "", this.enable = async () => {
          const e = await this.getWalletConnector();
          if (e) return this.start(), this.subscribeWalletConnector(), e.accounts;
          throw new Error("Failed to connect to WalleConnect");
        }, this.request = async e => this.send(e), this.send = async (e, t) => {
          if ("string" == typeof e) {
            const r = e;
            let n = t;
            return "personal_sign" === r && (n = E(n)), this.sendAsyncPromise(r, n);
          }
          if ("personal_sign" === (e = Object.assign({
            id: m(),
            jsonrpc: "2.0"
          }, e)).method && (e.params = E(e.params)), !t) return this.sendAsyncPromise(e.method, e.params);
          this.sendAsync(e, t);
        }, this.onConnect = e => {
          this.connectCallbacks.push(e);
        }, this.triggerConnect = e => {
          this.connectCallbacks && this.connectCallbacks.length && this.connectCallbacks.forEach((t => t(e)));
        }, this.bridge = e.connector ? e.connector.bridge : e.bridge || "https://bridge.walletconnect.org", this.qrcode = void 0 === e.qrcode || !1 !== e.qrcode, 
        this.qrcodeModal = e.qrcodeModal || this.qrcodeModal, this.qrcodeModalOptions = e.qrcodeModalOptions, this.wc = e.connector || new Q({
          bridge: this.bridge,
          qrcodeModal: this.qrcode ? this.qrcodeModal : void 0,
          qrcodeModalOptions: this.qrcodeModalOptions,
          storageId: null == e ? void 0 : e.storageId,
          signingMethods: null == e ? void 0 : e.signingMethods,
          clientMeta: null == e ? void 0 : e.clientMeta
        }), this.rpc = e.rpc || null, !(this.rpc || e.infuraId && "string" == typeof e.infuraId && e.infuraId.trim())) throw new Error("Missing one of the required parameters: rpc or infuraId");
        this.infuraId = e.infuraId || "", this.chainId = (null == e ? void 0 : e.chainId) || this.chainId, this.initialize();
      }
      get isWalletConnect() {
        return !0;
      }
      get connector() {
        return this.wc;
      }
      get walletMeta() {
        return this.wc.peerMeta;
      }
      async disconnect() {
        this.close();
      }
      async close() {
        const e = await this.getWalletConnector({
          disableSessionCreation: !0
        });
        await e.killSession(), await this.onDisconnect();
      }
      async handleRequest(e) {
        try {
          let t;
          let r = null;
          const n = await this.getWalletConnector();
          switch (e.method) {
           case "wc_killSession":
            await this.close(), r = null;
            break;

           case "eth_accounts":
            r = n.accounts;
            break;

           case "eth_coinbase":
            r = n.accounts[0];
            break;

           case "eth_chainId":
           case "net_version":
            r = n.chainId;
            break;

           case "eth_uninstallFilter":
            this.sendAsync(e, (e => e)), r = !0;
            break;

           default:
            t = await this.handleOtherRequests(e);
          }
          return t || this.formatResponse(e, r);
        } catch (t) {
          throw this.emit("error", t), t;
        }
      }
      async handleOtherRequests(e) {
        if (!a.includes(e.method) && e.method.startsWith("eth_")) return this.handleReadRequests(e);
        const t = await this.getWalletConnector();
        const r = await t.sendCustomRequest(e);
        return this.formatResponse(e, r);
      }
      async handleReadRequests(e) {
        if (!this.http) {
          const e = new Error("HTTP Connection not available");
          throw this.emit("error", e), e;
        }
        return this.http.send(e);
      }
      formatResponse(e, t) {
        return {
          id: e.id,
          jsonrpc: e.jsonrpc,
          result: t
        };
      }
      getWalletConnector(e = {}) {
        const {disableSessionCreation: t = !1} = e;
        return new Promise(((e, r) => {
          const n = this.wc;
          this.isConnecting ? this.onConnect((t => e(t))) : n.connected || t ? (this.connected || (this.connected = !0, this.updateState(n.session)), 
          e(n)) : (this.isConnecting = !0, n.on("modal_closed", (() => {
            r(new Error("User closed modal"));
          })), n.createSession({
            chainId: this.chainId
          }).then((() => {
            n.on("connect", ((t, o) => {
              if (t) return this.isConnecting = !1, r(t);
              this.isConnecting = !1, this.connected = !0, o && this.updateState(o.params[0]), this.emit("connect"), this.triggerConnect(n), 
              e(n);
            }));
          })).catch((e => {
            this.isConnecting = !1, r(e);
          })));
        }));
      }
      async subscribeWalletConnector() {
        const e = await this.getWalletConnector();
        e.on("disconnect", (e => {
          e ? this.emit("error", e) : this.onDisconnect();
        })), e.on("session_update", ((e, t) => {
          e ? this.emit("error", e) : this.updateState(t.params[0]);
        }));
      }
      async onDisconnect() {
        await this.stop(), this.emit("close", 1e3, "Connection closed"), this.emit("disconnect", 1e3, "Connection disconnected"), 
        this.connected = !1;
      }
      async updateState(e) {
        const {accounts: t, chainId: r, networkId: n, rpcUrl: o} = e;
        (!this.accounts || t && this.accounts !== t) && (this.accounts = t, this.emit("accountsChanged", t)), (!this.chainId || r && this.chainId !== r) && (this.chainId = r, 
        this.emit("chainChanged", r)), (!this.networkId || n && this.networkId !== n) && (this.networkId = n, this.emit("networkChanged", n)), 
        this.updateRpcUrl(this.chainId, o || "");
      }
      updateRpcUrl(e, t = "") {
        const r = {
          infuraId: this.infuraId,
          custom: this.rpc || void 0
        };
        (t = t || _(e, r)) ? (this.rpcUrl = t, this.updateHttpConnection()) : this.emit("error", new Error(`No RPC Url available for chainId: ${e}`));
      }
      updateHttpConnection() {
        this.rpcUrl && (this.http = new ae(this.rpcUrl), this.http.on("payload", (e => this.emit("payload", e))), this.http.on("error", (e => this.emit("error", e))));
      }
      sendAsyncPromise(e, t) {
        return new Promise(((r, n) => {
          this.sendAsync({
            id: m(),
            jsonrpc: "2.0",
            method: e,
            params: t || []
          }, ((e, t) => {
            e ? n(e) : r(t.result);
          }));
        }));
      }
      initialize() {
        this.updateRpcUrl(this.chainId), this.addProvider(new ue({
          eth_hashrate: "0x00",
          eth_mining: !1,
          eth_syncing: !0,
          net_listening: !0,
          web3_clientVersion: "WalletConnect/v1.x.x/javascript"
        })), this.addProvider(new ce), this.addProvider(new de), this.addProvider(new le), this.addProvider(new he), this.addProvider(new fe(this.configWallet())), 
        this.addProvider({
          handleRequest: async (e, t, r) => {
            try {
              const {error: t, result: n} = await this.handleRequest(e);
              r(t, n);
            } catch (n) {
              r(n);
            }
          },
          setEngine: e => e
        });
      }
      configWallet() {
        return {
          getAccounts: async e => {
            try {
              const t = (await this.getWalletConnector()).accounts;
              t && t.length ? e(null, t) : e(new Error("Failed to get accounts"));
            } catch (t) {
              e(t);
            }
          },
          processMessage: async (e, t) => {
            try {
              const r = await this.getWalletConnector();
              t(null, await r.signMessage([ e.from, e.data ]));
            } catch (r) {
              t(r);
            }
          },
          processPersonalMessage: async (e, t) => {
            try {
              const r = await this.getWalletConnector();
              t(null, await r.signPersonalMessage([ e.data, e.from ]));
            } catch (r) {
              t(r);
            }
          },
          processSignTransaction: async (e, t) => {
            try {
              const r = await this.getWalletConnector();
              t(null, await r.signTransaction(e));
            } catch (r) {
              t(r);
            }
          },
          processTransaction: async (e, t) => {
            try {
              const r = await this.getWalletConnector();
              t(null, await r.sendTransaction(e));
            } catch (r) {
              t(r);
            }
          },
          processTypedMessage: async (e, t) => {
            try {
              const r = await this.getWalletConnector();
              t(null, await r.signTypedData([ e.from, e.data ]));
            } catch (r) {
              t(r);
            }
          }
        };
      }
    };
    var ve = function(e, t, r, n) {
      return new (r || (r = Promise))((function(o, i) {
        function a(e) {
          try {
            c(n.next(e));
          } catch (t) {
            i(t);
          }
        }
        function s(e) {
          try {
            c(n.throw(e));
          } catch (t) {
            i(t);
          }
        }
        function c(e) {
          e.done ? o(e.value) : function(e) {
            return e instanceof r ? e : new r((function(t) {
              t(e);
            }));
          }(e.value).then(a, s);
        }
        c((n = n.apply(e, t || [])).next());
      }));
    };
    var ge = function(e, t) {
      var r, n, o, i, a = {
        label: 0,
        sent: function() {
          if (1 & o[0]) throw o[1];
          return o[1];
        },
        trys: [],
        ops: []
      };
      return i = {
        next: s(0),
        throw: s(1),
        return: s(2)
      }, "function" == typeof Symbol && (i[Symbol.iterator] = function() {
        return this;
      }), i;
      function s(i) {
        return function(s) {
          return function(i) {
            if (r) throw new TypeError("Generator is already executing.");
            for (;a; ) try {
              if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;
              switch (n = 0, o && (i = [ 2 & i[0], o.value ]), i[0]) {
               case 0:
               case 1:
                o = i;
                break;

               case 4:
                return a.label++, {
                  value: i[1],
                  done: !1
                };

               case 5:
                a.label++, n = i[1], i = [ 0 ];
                continue;

               case 7:
                i = a.ops.pop(), a.trys.pop();
                continue;

               default:
                if (!(o = a.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
                  a = 0;
                  continue;
                }
                if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                  a.label = i[1];
                  break;
                }
                if (6 === i[0] && a.label < o[1]) {
                  a.label = o[1], o = i;
                  break;
                }
                if (o && a.label < o[2]) {
                  a.label = o[2], a.ops.push(i);
                  break;
                }
                o[2] && a.ops.pop(), a.trys.pop();
                continue;
              }
              i = t.call(e, a);
            } catch (s) {
              i = [ 6, s ], n = 0;
            } finally {
              r = o = 0;
            }
            if (5 & i[0]) throw i[1];
            return {
              value: i[0] ? i[1] : void 0,
              done: !0
            };
          }([ i, s ]);
        };
      }
    };
    var me = function() {
      return ve(void 0, void 0, void 0, (function() {
        return ge(this, (function(e) {
          return [ 2, new pe({
            infuraId: "7753fa7b79d2469f97c156780fce37ac"
          }) ];
        }));
      }));
    };
  },
  55522: (e, t, r) => {
    "use strict";
    r.r(t), r.d(t, {
      detectEnv: () => y,
      detectOS: () => _,
      formatIOSMobile: () => z,
      formatMobileRegistry: () => X,
      formatMobileRegistryEntry: () => Q,
      getAppLogoUrl: () => Y,
      getClientMeta: () => U,
      getCrypto: () => L,
      getCryptoOrThrow: () => I,
      getDappRegistryUrl: () => Z,
      getDocument: () => S,
      getDocumentOrThrow: () => C,
      getFromWindow: () => E,
      getFromWindowOrThrow: () => A,
      getLocal: () => F,
      getLocalStorage: () => N,
      getLocalStorageOrThrow: () => O,
      getLocation: () => P,
      getLocationOrThrow: () => B,
      getMobileLinkRegistry: () => $,
      getMobileRegistryEntry: () => V,
      getNavigator: () => R,
      getNavigatorOrThrow: () => T,
      getWalletRegistryUrl: () => J,
      isAndroid: () => w,
      isBrowser: () => M,
      isIOS: () => b,
      isMobile: () => x,
      isNode: () => k,
      mobileLinkChoiceKey: () => D,
      removeLocal: () => K,
      safeJsonParse: () => j,
      safeJsonStringify: () => q,
      saveMobileLinkInfo: () => W,
      setLocal: () => H
    });
    var n = r(65755);
    var o = r(62873);
    var i = r(34155);
    var a = function() {
      for (var e = 0, t = 0, r = arguments.length; t < r; t++) e += arguments[t].length;
      var n = Array(e), o = 0;
      for (t = 0; t < r; t++) for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) n[o] = i[a];
      return n;
    };
    var s = function() {
      return function(e, t, r) {
        this.name = e, this.version = t, this.os = r, this.type = 'browser';
      };
    }();
    var c = function() {
      return function(e) {
        this.version = e, this.type = 'node', this.name = 'node', this.os = i.platform;
      };
    }();
    var u = function() {
      return function(e, t, r, n) {
        this.name = e, this.version = t, this.os = r, this.bot = n, this.type = 'bot-device';
      };
    }();
    var l = function() {
      return function() {
        this.type = 'bot', this.bot = !0, this.name = 'bot', this.version = null, this.os = null;
      };
    }();
    var f = function() {
      return function() {
        this.type = 'react-native', this.name = 'react-native', this.version = null, this.os = null;
      };
    }();
    var h = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
    var d = [ [ 'aol', /AOLShield\/([0-9\._]+)/ ], [ 'edge', /Edge\/([0-9\._]+)/ ], [ 'edge-ios', /EdgiOS\/([0-9\._]+)/ ], [ 'yandexbrowser', /YaBrowser\/([0-9\._]+)/ ], [ 'kakaotalk', /KAKAOTALK\s([0-9\.]+)/ ], [ 'samsung', /SamsungBrowser\/([0-9\.]+)/ ], [ 'silk', /\bSilk\/([0-9._-]+)\b/ ], [ 'miui', /MiuiBrowser\/([0-9\.]+)$/ ], [ 'beaker', /BeakerBrowser\/([0-9\.]+)/ ], [ 'edge-chromium', /EdgA?\/([0-9\.]+)/ ], [ 'chromium-webview', /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/ ], [ 'chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/ ], [ 'phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/ ], [ 'crios', /CriOS\/([0-9\.]+)(:?\s|$)/ ], [ 'firefox', /Firefox\/([0-9\.]+)(?:\s|$)/ ], [ 'fxios', /FxiOS\/([0-9\.]+)/ ], [ 'opera-mini', /Opera Mini.*Version\/([0-9\.]+)/ ], [ 'opera', /Opera\/([0-9\.]+)(?:\s|$)/ ], [ 'opera', /OPR\/([0-9\.]+)(:?\s|$)/ ], [ 'ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/ ], [ 'ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/ ], [ 'ie', /MSIE\s(7\.0)/ ], [ 'bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/ ], [ 'android', /Android\s([0-9\.]+)/ ], [ 'ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/ ], [ 'safari', /Version\/([0-9\._]+).*Safari/ ], [ 'facebook', /FBAV\/([0-9\.]+)/ ], [ 'instagram', /Instagram\s([0-9\.]+)/ ], [ 'ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/ ], [ 'ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/ ], [ 'searchbot', /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/ ] ];
    var p = [ [ 'iOS', /iP(hone|od|ad)/ ], [ 'Android OS', /Android/ ], [ 'BlackBerry OS', /BlackBerry|BB10/ ], [ 'Windows Mobile', /IEMobile/ ], [ 'Amazon OS', /Kindle/ ], [ 'Windows 3.11', /Win16/ ], [ 'Windows 95', /(Windows 95)|(Win95)|(Windows_95)/ ], [ 'Windows 98', /(Windows 98)|(Win98)/ ], [ 'Windows 2000', /(Windows NT 5.0)|(Windows 2000)/ ], [ 'Windows XP', /(Windows NT 5.1)|(Windows XP)/ ], [ 'Windows Server 2003', /(Windows NT 5.2)/ ], [ 'Windows Vista', /(Windows NT 6.0)/ ], [ 'Windows 7', /(Windows NT 6.1)/ ], [ 'Windows 8', /(Windows NT 6.2)/ ], [ 'Windows 8.1', /(Windows NT 6.3)/ ], [ 'Windows 10', /(Windows NT 10.0)/ ], [ 'Windows ME', /Windows ME/ ], [ 'Open BSD', /OpenBSD/ ], [ 'Sun OS', /SunOS/ ], [ 'Chrome OS', /CrOS/ ], [ 'Linux', /(Linux)|(X11)/ ], [ 'Mac OS', /(Mac_PowerPC)|(Macintosh)/ ], [ 'QNX', /QNX/ ], [ 'BeOS', /BeOS/ ], [ 'OS/2', /OS\/2/ ] ];
    function v(e) {
      return e ? m(e) : 'undefined' == typeof document && 'undefined' != typeof navigator && 'ReactNative' === navigator.product ? new f : 'undefined' != typeof navigator ? m(navigator.userAgent) : function() {
        return void 0 !== i && i.version ? new c(i.version.slice(1)) : null;
      }();
    }
    function g(e) {
      return '' !== e && d.reduce((function(t, r) {
        var n = r[0], o = r[1];
        if (t) return t;
        var i = o.exec(e);
        return !!i && [ n, i ];
      }), !1);
    }
    function m(e) {
      var t = g(e);
      if (!t) return null;
      var r = t[0], n = t[1];
      if ('searchbot' === r) return new l;
      var o = n[1] && n[1].split(/[._]/).slice(0, 3);
      o ? o.length < 3 && (o = a(o, function(e) {
        var t = [];
        for (var r = 0; r < e; r++) t.push('0');
        return t;
      }(3 - o.length))) : o = [];
      var i = o.join('.');
      var c = function(e) {
        for (var t = 0, r = p.length; t < r; t++) {
          var n = p[t], o = n[0];
          if (n[1].exec(e)) return o;
        }
        return null;
      }(e);
      var f = h.exec(e);
      return f && f[1] ? new u(r, i, c, f[1]) : new s(r, i, c);
    }
    function y(e) {
      return v(e);
    }
    function _() {
      const e = y();
      return e && e.os ? e.os : void 0;
    }
    function w() {
      const e = _();
      return !!e && e.toLowerCase().includes("android");
    }
    function b() {
      const e = _();
      return !!e && (e.toLowerCase().includes("ios") || e.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1);
    }
    function x() {
      return !!_() && (w() || b());
    }
    function k() {
      const e = y();
      return !(!e || !e.name) && "node" === e.name.toLowerCase();
    }
    function M() {
      return !k() && !!R();
    }
    const E = o.getFromWindow;
    const A = o.getFromWindowOrThrow;
    const C = o.getDocumentOrThrow;
    const S = o.getDocument;
    const T = o.getNavigatorOrThrow;
    const R = o.getNavigator;
    const B = o.getLocationOrThrow;
    const P = o.getLocation;
    const I = o.getCryptoOrThrow;
    const L = o.getCrypto;
    const O = o.getLocalStorageOrThrow;
    const N = o.getLocalStorage;
    function U() {
      return n.D();
    }
    const j = function(e) {
      if ("string" != typeof e) throw new Error("Cannot safe json parse value of type " + typeof e);
      try {
        return JSON.parse(e);
      } catch (t) {
        return e;
      }
    };
    const q = function(e) {
      return "string" == typeof e ? e : JSON.stringify(e);
    };
    function H(e, t) {
      const r = q(t);
      const n = N();
      n && n.setItem(e, r);
    }
    function F(e) {
      let t = null;
      let r = null;
      const n = N();
      return n && (r = n.getItem(e)), t = r ? j(r) : r, t;
    }
    function K(e) {
      const t = N();
      t && t.removeItem(e);
    }
    const D = "WALLETCONNECT_DEEPLINK_CHOICE";
    function z(e, t) {
      const r = encodeURIComponent(e);
      return t.universalLink ? `${t.universalLink}/wc?uri=${r}` : t.deepLink ? `${t.deepLink}${t.deepLink.endsWith(":") ? "//" : "/"}wc?uri=${r}` : "";
    }
    function W(e) {
      const t = e.href.split("?")[0];
      H(D, Object.assign(Object.assign({}, e), {
        href: t
      }));
    }
    function V(e, t) {
      return e.filter((e => e.name.toLowerCase().includes(t.toLowerCase())))[0];
    }
    function $(e, t) {
      let r = e;
      return t && (r = t.map((t => V(e, t))).filter(Boolean)), r;
    }
    const G = "https://registry.walletconnect.org";
    function J() {
      return G + "/data/wallets.json";
    }
    function Z() {
      return G + "/data/dapps.json";
    }
    function Y(e) {
      return G + "/logo/sm/" + e + ".jpeg";
    }
    function Q(e, t = "mobile") {
      return {
        name: e.name || "",
        shortName: e.metadata.shortName || "",
        color: e.metadata.colors.primary || "",
        logo: e.id ? Y(e.id) : "",
        universalLink: e[t].universal || "",
        deepLink: e[t].native || ""
      };
    }
    function X(e, t = "mobile") {
      return Object.values(e).filter((e => !!e[t].universal || !!e[t].native)).map((e => Q(e, t)));
    }
  },
  23087: function(e, t, r) {
    "use strict";
    var n = r(48764).Buffer;
    var o = this && this.__importDefault || function(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    };
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.removeHexLeadingZeros = t.sanitizeHex = t.addHexPrefix = t.removeHexPrefix = t.padRight = t.padLeft = t.sanitizeBytes = t.swapHex = t.swapBytes = t.splitBytes = t.calcByteLength = t.trimRight = t.trimLeft = t.concatArrays = t.concatBuffers = t.getEncoding = t.getType = t.isArrayBuffer = t.isTypedArray = t.isBuffer = t.isHexString = t.isBinaryString = t.binaryToNumber = t.binaryToUtf8 = t.binaryToHex = t.binaryToArray = t.binaryToBuffer = t.numberToBinary = t.numberToUtf8 = t.numberToHex = t.numberToArray = t.numberToBuffer = t.utf8ToBinary = t.utf8ToNumber = t.utf8ToHex = t.utf8ToArray = t.utf8ToBuffer = t.hexToBinary = t.hexToNumber = t.hexToUtf8 = t.hexToArray = t.hexToBuffer = t.arrayToBinary = t.arrayToNumber = t.arrayToUtf8 = t.arrayToHex = t.arrayToBuffer = t.bufferToBinary = t.bufferToNumber = t.bufferToUtf8 = t.bufferToHex = t.bufferToArray = void 0;
    const i = o(r(4501));
    const a = o(r(65054));
    const s = "hex";
    const c = "utf8";
    const u = "0";
    function l(e) {
      return new Uint8Array(e);
    }
    function f(e, t = !1) {
      const r = e.toString(s);
      return t ? q(r) : r;
    }
    function h(e) {
      return e.toString(c);
    }
    function d(e) {
      return e.readUIntBE(0, e.length);
    }
    function p(e) {
      return a.default(e);
    }
    function v(e, t = !1) {
      return f(p(e), t);
    }
    function g(e) {
      return h(p(e));
    }
    function m(e) {
      return d(p(e));
    }
    function y(e) {
      return Array.from(e).map(M).join("");
    }
    function _(e) {
      return n.from(j(e), s);
    }
    function w(e) {
      return l(_(e));
    }
    function b(e) {
      return y(w(e));
    }
    function x(e) {
      return n.from(e, c);
    }
    function k(e) {
      return l(x(e));
    }
    function M(e) {
      return N((e >>> 0).toString(2));
    }
    function E(e) {
      return p(A(e));
    }
    function A(e) {
      return new Uint8Array(L(e).map((e => parseInt(e, 2))));
    }
    function C(e, t) {
      return v(A(e), t);
    }
    function S(e) {
      return !("string" != typeof e || !new RegExp(/^[01]+$/).test(e)) && e.length % 8 == 0;
    }
    function T(e, t) {
      return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/)) && (!t || e.length === 2 + 2 * t);
    }
    function R(e) {
      return n.isBuffer(e);
    }
    function B(e) {
      return i.default.strict(e) && !R(e);
    }
    function P(e) {
      return !B(e) && !R(e) && void 0 !== e.byteLength;
    }
    function I(e, t = 8) {
      const r = e % t;
      return r ? (e - r) / t * t + t : e;
    }
    function L(e, t = 8) {
      const r = N(e).match(new RegExp(`.{${t}}`, "gi"));
      return Array.from(r || []);
    }
    function O(e) {
      return L(e).map(H).join("");
    }
    function N(e, t = 8, r = "0") {
      return U(e, I(e.length, t), r);
    }
    function U(e, t, r = "0") {
      return F(e, t, !0, r);
    }
    function j(e) {
      return e.replace(/^0x/, "");
    }
    function q(e) {
      return e.startsWith("0x") ? e : `0x${e}`;
    }
    function H(e) {
      return e.split("").reverse().join("");
    }
    function F(e, t, r, n = "0") {
      const o = t - e.length;
      let i = e;
      if (o > 0) {
        const t = n.repeat(o);
        i = r ? t + e : e + t;
      }
      return i;
    }
    t.bufferToArray = l, t.bufferToHex = f, t.bufferToUtf8 = h, t.bufferToNumber = d, t.bufferToBinary = function(e) {
      return y(l(e));
    }, t.arrayToBuffer = p, t.arrayToHex = v, t.arrayToUtf8 = g, t.arrayToNumber = m, t.arrayToBinary = y, t.hexToBuffer = _, 
    t.hexToArray = w, t.hexToUtf8 = function(e) {
      return h(_(e));
    }, t.hexToNumber = function(e) {
      return m(w(e));
    }, t.hexToBinary = b, t.utf8ToBuffer = x, t.utf8ToArray = k, t.utf8ToHex = function(e, t = !1) {
      return f(x(e), t);
    }, t.utf8ToNumber = function(e) {
      const t = parseInt(e, 10);
      return function(e, t) {
        if (!e) throw new Error(t);
      }(function(e) {
        return !function(e) {
          return void 0 === e;
        }(e);
      }(t), "Number can only safely store up to 53 bits"), t;
    }, t.utf8ToBinary = function(e) {
      return y(k(e));
    }, t.numberToBuffer = function(e) {
      return E(M(e));
    }, t.numberToArray = function(e) {
      return A(M(e));
    }, t.numberToHex = function(e, t) {
      return C(M(e), t);
    }, t.numberToUtf8 = function(e) {
      return `${e}`;
    }, t.numberToBinary = M, t.binaryToBuffer = E, t.binaryToArray = A, t.binaryToHex = C, t.binaryToUtf8 = function(e) {
      return g(A(e));
    }, t.binaryToNumber = function(e) {
      return m(A(e));
    }, t.isBinaryString = S, t.isHexString = T, t.isBuffer = R, t.isTypedArray = B, t.isArrayBuffer = P, t.getType = function(e) {
      return R(e) ? "buffer" : B(e) ? "typed-array" : P(e) ? "array-buffer" : Array.isArray(e) ? "array" : typeof e;
    }, t.getEncoding = function(e) {
      return S(e) ? "binary" : T(e) ? s : c;
    }, t.concatBuffers = function(...e) {
      return n.concat(e);
    }, t.concatArrays = function(...e) {
      let t = [];
      return e.forEach((e => t = t.concat(Array.from(e)))), new Uint8Array([ ...t ]);
    }, t.trimLeft = function(e, t) {
      const r = e.length - t;
      return r > 0 && (e = e.slice(r)), e;
    }, t.trimRight = function(e, t) {
      return e.slice(0, t);
    }, t.calcByteLength = I, t.splitBytes = L, t.swapBytes = O, t.swapHex = function(e) {
      return C(O(b(e)));
    }, t.sanitizeBytes = N, t.padLeft = U, t.padRight = function(e, t, r = "0") {
      return F(e, t, !1, r);
    }, t.removeHexPrefix = j, t.addHexPrefix = q, t.sanitizeHex = function(e) {
      return (e = N(e = j(e), 2)) && (e = q(e)), e;
    }, t.removeHexLeadingZeros = function(e) {
      const t = e.startsWith("0x");
      return e = (e = j(e)).startsWith(u) ? e.substring(1) : e, t ? q(e) : e;
    };
  },
  40926: (e, t, r) => {
    "use strict";
    function n() {
      return (null === r.g || void 0 === r.g ? void 0 : r.g.crypto) || (null === r.g || void 0 === r.g ? void 0 : r.g.msCrypto) || {};
    }
    function o() {
      const e = n();
      return e.subtle || e.webkitSubtle;
    }
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.isBrowserCryptoAvailable = t.getSubtleCrypto = t.getBrowerCrypto = void 0, t.getBrowerCrypto = n, t.getSubtleCrypto = o, 
    t.isBrowserCryptoAvailable = function() {
      return !!n() && !!o();
    };
  },
  88618: (e, t, r) => {
    "use strict";
    var n = r(34155);
    function o() {
      return "undefined" == typeof document && "undefined" != typeof navigator && "ReactNative" === navigator.product;
    }
    function i() {
      return void 0 !== n && void 0 !== n.versions && void 0 !== n.versions.node;
    }
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.isBrowser = t.isNode = t.isReactNative = void 0, t.isReactNative = o, t.isNode = i, t.isBrowser = function() {
      return !o() && !i();
    };
  },
  1468: function(e, t, r) {
    "use strict";
    var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
      void 0 === n && (n = r), Object.defineProperty(e, n, {
        enumerable: !0,
        get: function() {
          return t[r];
        }
      });
    } : function(e, t, r, n) {
      void 0 === n && (n = r), e[n] = t[r];
    });
    var o = this && this.__exportStar || function(e, t) {
      for (var r in e) "default" === r || t.hasOwnProperty(r) || n(t, e, r);
    };
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), o(r(40926), t), o(r(88618), t);
  },
  4337: (e, t, r) => {
    var n = r(25108);
    var o = r(34155);
    function i(e) {
      return e && 'object' == typeof e && 'default' in e ? e.default : e;
    }
    var a = r(55522);
    var s = i(r(92592));
    var c = i(r(20640));
    var u = r(35776);
    "undefined" != typeof Symbol && (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")));
    "undefined" != typeof Symbol && (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")));
    var l = "walletconnect-wrapper";
    var f = "walletconnect-style-sheet";
    var h = "walletconnect-qrcode-modal";
    var d = "walletconnect-qrcode-text";
    function p(e) {
      return u.createElement("div", {
        className: "walletconnect-modal__header"
      }, u.createElement("img", {
        src: "data:image/svg+xml,%3C?xml version='1.0' encoding='UTF-8'?%3E %3Csvg width='300px' height='185px' viewBox='0 0 300 185' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E %3C!-- Generator: Sketch 49.3 (51167) - http://www.bohemiancoding.com/sketch --%3E %3Ctitle%3EWalletConnect%3C/title%3E %3Cdesc%3ECreated with Sketch.%3C/desc%3E %3Cdefs%3E%3C/defs%3E %3Cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E %3Cg id='walletconnect-logo-alt' fill='%233B99FC' fill-rule='nonzero'%3E %3Cpath d='M61.4385429,36.2562612 C110.349767,-11.6319051 189.65053,-11.6319051 238.561752,36.2562612 L244.448297,42.0196786 C246.893858,44.4140867 246.893858,48.2961898 244.448297,50.690599 L224.311602,70.406102 C223.088821,71.6033071 221.106302,71.6033071 219.883521,70.406102 L211.782937,62.4749541 C177.661245,29.0669724 122.339051,29.0669724 88.2173582,62.4749541 L79.542302,70.9685592 C78.3195204,72.1657633 76.337001,72.1657633 75.1142214,70.9685592 L54.9775265,51.2530561 C52.5319653,48.8586469 52.5319653,44.9765439 54.9775265,42.5821357 L61.4385429,36.2562612 Z M280.206339,77.0300061 L298.128036,94.5769031 C300.573585,96.9713 300.573599,100.85338 298.128067,103.247793 L217.317896,182.368927 C214.872352,184.763353 210.907314,184.76338 208.461736,182.368989 C208.461726,182.368979 208.461714,182.368967 208.461704,182.368957 L151.107561,126.214385 C150.496171,125.615783 149.504911,125.615783 148.893521,126.214385 C148.893517,126.214389 148.893514,126.214393 148.89351,126.214396 L91.5405888,182.368927 C89.095052,184.763359 85.1300133,184.763399 82.6844276,182.369014 C82.6844133,182.369 82.684398,182.368986 82.6843827,182.36897 L1.87196327,103.246785 C-0.573596939,100.852377 -0.573596939,96.9702735 1.87196327,94.5758653 L19.7936929,77.028998 C22.2392531,74.6345898 26.2042918,74.6345898 28.6498531,77.028998 L86.0048306,133.184355 C86.6162214,133.782957 87.6074796,133.782957 88.2188704,133.184355 C88.2188796,133.184346 88.2188878,133.184338 88.2188969,133.184331 L145.571,77.028998 C148.016505,74.6345347 151.981544,74.6344449 154.427161,77.028798 C154.427195,77.0288316 154.427229,77.0288653 154.427262,77.028899 L211.782164,133.184331 C212.393554,133.782932 213.384814,133.782932 213.996204,133.184331 L271.350179,77.0300061 C273.79574,74.6355969 277.760778,74.6355969 280.206339,77.0300061 Z' id='WalletConnect'%3E%3C/path%3E %3C/g%3E %3C/g%3E %3C/svg%3E",
        className: "walletconnect-modal__headerLogo"
      }), u.createElement("p", null, "WalletConnect"), u.createElement("div", {
        className: "walletconnect-modal__close__wrapper",
        onClick: e.onClose
      }, u.createElement("div", {
        id: "walletconnect-qrcode-close",
        className: "walletconnect-modal__close__icon"
      }, u.createElement("div", {
        className: "walletconnect-modal__close__line1"
      }), u.createElement("div", {
        className: "walletconnect-modal__close__line2"
      }))));
    }
    function v(e) {
      return u.createElement("a", {
        className: "walletconnect-connect__button",
        href: e.href,
        id: "walletconnect-connect-button-" + e.name,
        onClick: e.onClick,
        rel: "noopener noreferrer",
        style: {
          backgroundColor: e.color
        },
        target: "_blank"
      }, e.name);
    }
    function g(e) {
      var t = e.color;
      var r = e.href;
      var n = e.name;
      var o = e.logo;
      var i = e.onClick;
      return u.createElement("a", {
        className: "walletconnect-modal__base__row",
        href: r,
        onClick: i,
        rel: "noopener noreferrer",
        target: "_blank"
      }, u.createElement("h3", {
        className: "walletconnect-modal__base__row__h3"
      }, n), u.createElement("div", {
        className: "walletconnect-modal__base__row__right"
      }, u.createElement("div", {
        className: "walletconnect-modal__base__row__right__app-icon",
        style: {
          background: "url('" + o + "') " + t,
          backgroundSize: "100%"
        }
      }), u.createElement("img", {
        src: "data:image/svg+xml,%3Csvg width='8' height='18' viewBox='0 0 8 18' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M0.586301 0.213898C0.150354 0.552968 0.0718197 1.18124 0.41089 1.61719L5.2892 7.88931C5.57007 8.25042 5.57007 8.75608 5.2892 9.11719L0.410889 15.3893C0.071819 15.8253 0.150353 16.4535 0.586301 16.7926C1.02225 17.1317 1.65052 17.0531 1.98959 16.6172L6.86791 10.3451C7.7105 9.26174 7.7105 7.74476 6.86791 6.66143L1.98959 0.38931C1.65052 -0.0466374 1.02225 -0.125172 0.586301 0.213898Z' fill='%233C4252'/%3E %3C/svg%3E",
        className: "walletconnect-modal__base__row__right__caret"
      })));
    }
    function m(e) {
      var t = e.color;
      var r = e.href;
      var n = e.name;
      var o = e.logo;
      var i = e.onClick;
      var a = window.innerWidth < 768 ? (n.length > 8 ? 2.5 : 2.7) + "vw" : "inherit";
      return u.createElement("a", {
        className: "walletconnect-connect__button__icon_anchor",
        href: r,
        onClick: i,
        rel: "noopener noreferrer",
        target: "_blank"
      }, u.createElement("div", {
        className: "walletconnect-connect__button__icon",
        style: {
          background: "url('" + o + "') " + t,
          backgroundSize: "100%"
        }
      }), u.createElement("div", {
        style: {
          fontSize: a
        },
        className: "walletconnect-connect__button__text"
      }, n));
    }
    function y(e) {
      var t = a.isAndroid();
      var r = u.useState("");
      var n = r[0];
      var o = r[1];
      var i = u.useState("");
      var s = i[0];
      var c = i[1];
      var l = u.useState(1);
      var f = l[0];
      var h = l[1];
      var p = s ? e.links.filter((function(e) {
        return e.name.toLowerCase().includes(s.toLowerCase());
      })) : e.links;
      var y = e.errorMessage;
      var _ = s || p.length > 5;
      var w = Math.ceil(p.length / 12);
      var b = [ 12 * (f - 1) + 1, 12 * f ];
      var x = p.length ? p.filter((function(e, t) {
        return t + 1 >= b[0] && t + 1 <= b[1];
      })) : [];
      var k = !(t || !(w > 1));
      var M = void 0;
      return u.createElement("div", null, u.createElement("p", {
        id: d,
        className: "walletconnect-qrcode__text"
      }, t ? e.text.connect_mobile_wallet : e.text.choose_preferred_wallet), !t && u.createElement("input", {
        className: "walletconnect-search__input",
        placeholder: "Search",
        value: n,
        onChange: function(e) {
          o(e.target.value), clearTimeout(M), e.target.value ? M = setTimeout((function() {
            c(e.target.value), h(1);
          }), 1e3) : (o(""), c(""), h(1));
        }
      }), u.createElement("div", {
        className: "walletconnect-connect__buttons__wrapper" + (t ? "__android" : _ && p.length ? "__wrap" : "")
      }, t ? u.createElement(v, {
        name: e.text.connect,
        color: "rgb(64, 153, 255)",
        href: e.uri,
        onClick: u.useCallback((function() {
          a.saveMobileLinkInfo({
            name: "Unknown",
            href: e.uri
          });
        }), [])
      }) : x.length ? x.map((function(t) {
        var r = t.color;
        var n = t.name;
        var o = t.shortName;
        var i = t.logo;
        var s = a.formatIOSMobile(e.uri, t);
        var c = u.useCallback((function() {
          a.saveMobileLinkInfo({
            name: n,
            href: s
          });
        }), [ x ]);
        return _ ? u.createElement(m, {
          color: r,
          href: s,
          name: o,
          logo: i,
          onClick: c
        }) : u.createElement(g, {
          color: r,
          href: s,
          name: n,
          logo: i,
          onClick: c
        });
      })) : u.createElement(u.Fragment, null, u.createElement("p", null, y.length ? e.errorMessage : e.links.length && !p.length ? e.text.no_wallets_found : e.text.loading))), k && u.createElement("div", {
        className: "walletconnect-modal__footer"
      }, Array(w).fill(0).map((function(e, t) {
        var r = t + 1;
        var n = f === r;
        return u.createElement("a", {
          style: {
            margin: "auto 10px",
            fontWeight: n ? "bold" : "normal"
          },
          onClick: function() {
            return h(r);
          }
        }, r);
      }))));
    }
    function _(e) {
      var t = !!e.message.trim();
      return u.createElement("div", {
        className: "walletconnect-qrcode__notification" + (t ? " notification__show" : "")
      }, e.message);
    }
    function w(e) {
      var t = u.useState("");
      var r = t[0];
      var n = t[1];
      var o = u.useState("");
      var i = o[0];
      var a = o[1];
      u.useEffect((function() {
        try {
          return Promise.resolve(function(e) {
            try {
              var t = "";
              return Promise.resolve(s.toString(e, {
                margin: 0,
                type: "svg"
              })).then((function(e) {
                return "string" == typeof e && (t = e.replace("<svg", "<svg class=\"walletconnect-qrcode__image\"")), t;
              }));
            } catch (r) {
              return Promise.reject(r);
            }
          }(e.uri)).then((function(e) {
            a(e);
          }));
        } catch (t) {
          Promise.reject(t);
        }
      }), []);
      return u.createElement("div", null, u.createElement("p", {
        id: d,
        className: "walletconnect-qrcode__text"
      }, e.text.scan_qrcode_with_wallet), u.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: i
        }
      }), u.createElement("div", {
        className: "walletconnect-modal__footer"
      }, u.createElement("a", {
        onClick: function() {
          c(e.uri) ? (n(e.text.copied_to_clipboard), setInterval((function() {
            return n("");
          }), 1200)) : (n("Error"), setInterval((function() {
            return n("");
          }), 1200));
        }
      }, e.text.copy_to_clipboard)), u.createElement(_, {
        message: r
      }));
    }
    function b(e) {
      var t = a.isAndroid();
      var r = a.isMobile();
      var o = r ? e.qrcodeModalOptions && e.qrcodeModalOptions.mobileLinks ? e.qrcodeModalOptions.mobileLinks : void 0 : e.qrcodeModalOptions && e.qrcodeModalOptions.desktopLinks ? e.qrcodeModalOptions.desktopLinks : void 0;
      var i = u.useState(!1);
      var s = i[0];
      var c = i[1];
      var l = u.useState(!1);
      var f = l[0];
      var d = l[1];
      var v = u.useState(!r);
      var g = v[0];
      var m = v[1];
      var _ = {
        mobile: r,
        text: e.text,
        uri: e.uri,
        qrcodeModalOptions: e.qrcodeModalOptions
      };
      var b = u.useState("");
      var x = b[0];
      var k = b[1];
      var M = u.useState(!1);
      var E = M[0];
      var A = M[1];
      var C = u.useState([]);
      var S = C[0];
      var T = C[1];
      var R = u.useState("");
      var B = R[0];
      var P = R[1];
      var I = function() {
        f || s || o && !o.length || S.length > 0 || u.useEffect((function() {
          !function() {
            try {
              if (t) return Promise.resolve();
              c(!0);
              var i = function(e, t) {
                try {
                  var r = e();
                } catch (n) {
                  return t(n);
                }
                return r && r.then ? r.then(void 0, t) : r;
              }((function() {
                var t = e.qrcodeModalOptions && e.qrcodeModalOptions.registryUrl ? e.qrcodeModalOptions.registryUrl : a.getWalletRegistryUrl();
                return Promise.resolve(fetch(t).then((function(e) {
                  return e.json();
                }))).then((function(t) {
                  var n = r ? "mobile" : "desktop";
                  var i = a.getMobileLinkRegistry(a.formatMobileRegistry(t, n), o);
                  c(!1), d(!0), P(i.length ? "" : e.text.no_supported_wallets), T(i);
                  var s = 1 === i.length;
                  s && (k(a.formatIOSMobile(e.uri, i[0])), m(!0)), A(s);
                }));
              }), (function(t) {
                c(!1), d(!0), P(e.text.something_went_wrong), n.error(t);
              }));
              Promise.resolve(i && i.then ? i.then((function() {})) : void 0);
            } catch (s) {
              return Promise.reject(s);
            }
          }();
        }));
      };
      I();
      var L = r ? g : !g;
      return u.createElement("div", {
        id: h,
        className: "walletconnect-qrcode__base animated fadeIn"
      }, u.createElement("div", {
        className: "walletconnect-modal__base"
      }, u.createElement(p, {
        onClose: e.onClose
      }), E && g ? u.createElement("div", {
        className: "walletconnect-modal__single_wallet"
      }, u.createElement("a", {
        onClick: function() {
          return a.saveMobileLinkInfo({
            name: S[0].name,
            href: x
          });
        },
        href: x,
        rel: "noopener noreferrer",
        target: "_blank"
      }, e.text.connect_with + " " + (E ? S[0].name : "") + " ›")) : t || s || !s && S.length ? u.createElement("div", {
        className: "walletconnect-modal__mobile__toggle" + (L ? " right__selected" : "")
      }, u.createElement("div", {
        className: "walletconnect-modal__mobile__toggle_selector"
      }), r ? u.createElement(u.Fragment, null, u.createElement("a", {
        onClick: function() {
          return m(!1), I();
        }
      }, e.text.mobile), u.createElement("a", {
        onClick: function() {
          return m(!0);
        }
      }, e.text.qrcode)) : u.createElement(u.Fragment, null, u.createElement("a", {
        onClick: function() {
          return m(!0);
        }
      }, e.text.qrcode), u.createElement("a", {
        onClick: function() {
          return m(!1), I();
        }
      }, e.text.desktop))) : null, u.createElement("div", null, g || !t && !s && !S.length ? u.createElement(w, Object.assign({}, _)) : u.createElement(y, Object.assign({}, _, {
        links: S,
        errorMessage: B
      })))));
    }
    var x = {
      de: {
        choose_preferred_wallet: "Wähle bevorzugte Wallet",
        connect_mobile_wallet: "Verbinde mit Mobile Wallet",
        scan_qrcode_with_wallet: "Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",
        connect: "Verbinden",
        qrcode: "QR-Code",
        mobile: "Mobile",
        desktop: "Desktop",
        copy_to_clipboard: "In die Zwischenablage kopieren",
        copied_to_clipboard: "In die Zwischenablage kopiert!",
        connect_with: "Verbinden mit Hilfe von",
        loading: "Laden...",
        something_went_wrong: "Etwas ist schief gelaufen",
        no_supported_wallets: "Es gibt noch keine unterstützten Wallet",
        no_wallets_found: "keine Wallet gefunden"
      },
      en: {
        choose_preferred_wallet: "Choose your preferred wallet",
        connect_mobile_wallet: "Connect to Mobile Wallet",
        scan_qrcode_with_wallet: "Scan QR code with a WalletConnect-compatible wallet",
        connect: "Connect",
        qrcode: "QR Code",
        mobile: "Mobile",
        desktop: "Desktop",
        copy_to_clipboard: "Copy to clipboard",
        copied_to_clipboard: "Copied to clipboard!",
        connect_with: "Connect with",
        loading: "Loading...",
        something_went_wrong: "Something went wrong",
        no_supported_wallets: "There are no supported wallets yet",
        no_wallets_found: "No wallets found"
      },
      es: {
        choose_preferred_wallet: "Elige tu billetera preferida",
        connect_mobile_wallet: "Conectar a billetera móvil",
        scan_qrcode_with_wallet: "Escanea el código QR con una billetera compatible con WalletConnect",
        connect: "Conectar",
        qrcode: "Código QR",
        mobile: "Móvil",
        desktop: "Desktop",
        copy_to_clipboard: "Copiar",
        copied_to_clipboard: "Copiado!",
        connect_with: "Conectar mediante",
        loading: "Cargando...",
        something_went_wrong: "Algo salió mal",
        no_supported_wallets: "Todavía no hay billeteras compatibles",
        no_wallets_found: "No se encontraron billeteras"
      },
      fr: {
        choose_preferred_wallet: "Choisissez votre portefeuille préféré",
        connect_mobile_wallet: "Se connecter au portefeuille mobile",
        scan_qrcode_with_wallet: "Scannez le QR code avec un portefeuille compatible WalletConnect",
        connect: "Se connecter",
        qrcode: "QR Code",
        mobile: "Mobile",
        desktop: "Desktop",
        copy_to_clipboard: "Copier",
        copied_to_clipboard: "Copié!",
        connect_with: "Connectez-vous à l'aide de",
        loading: "Chargement...",
        something_went_wrong: "Quelque chose a mal tourné",
        no_supported_wallets: "Il n'y a pas encore de portefeuilles pris en charge",
        no_wallets_found: "Aucun portefeuille trouvé"
      },
      ko: {
        choose_preferred_wallet: "원하는 지갑을 선택하세요",
        connect_mobile_wallet: "모바일 지갑과 연결",
        scan_qrcode_with_wallet: "WalletConnect 지원 지갑에서 QR코드를 스캔하세요",
        connect: "연결",
        qrcode: "QR 코드",
        mobile: "모바일",
        desktop: "데스크탑",
        copy_to_clipboard: "클립보드에 복사",
        copied_to_clipboard: "클립보드에 복사되었습니다!",
        connect_with: "와 연결하다",
        loading: "로드 중...",
        something_went_wrong: "문제가 발생했습니다.",
        no_supported_wallets: "아직 지원되는 지갑이 없습니다",
        no_wallets_found: "지갑을 찾을 수 없습니다"
      },
      pt: {
        choose_preferred_wallet: "Escolha sua carteira preferida",
        connect_mobile_wallet: "Conectar-se à carteira móvel",
        scan_qrcode_with_wallet: "Ler o código QR com uma carteira compatível com WalletConnect",
        connect: "Conectar",
        qrcode: "Código QR",
        mobile: "Móvel",
        desktop: "Desktop",
        copy_to_clipboard: "Copiar",
        copied_to_clipboard: "Copiado!",
        connect_with: "Ligar por meio de",
        loading: "Carregamento...",
        something_went_wrong: "Algo correu mal",
        no_supported_wallets: "Ainda não há carteiras suportadas",
        no_wallets_found: "Nenhuma carteira encontrada"
      },
      zh: {
        choose_preferred_wallet: "选择你的钱包",
        connect_mobile_wallet: "连接至移动端钱包",
        scan_qrcode_with_wallet: "使用兼容 WalletConnect 的钱包扫描二维码",
        connect: "连接",
        qrcode: "二维码",
        mobile: "移动",
        desktop: "桌面",
        copy_to_clipboard: "复制到剪贴板",
        copied_to_clipboard: "复制到剪贴板成功！",
        connect_with: "通过以下方式连接",
        loading: "正在加载...",
        something_went_wrong: "出了问题",
        no_supported_wallets: "目前还没有支持的钱包",
        no_wallets_found: "没有找到钱包"
      },
      fa: {
        choose_preferred_wallet: "کیف پول مورد نظر خود را انتخاب کنید",
        connect_mobile_wallet: "به کیف پول موبایل وصل شوید",
        scan_qrcode_with_wallet: "کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",
        connect: "اتصال",
        qrcode: "کد QR",
        mobile: "سیار",
        desktop: "دسکتاپ",
        copy_to_clipboard: "کپی به کلیپ بورد",
        copied_to_clipboard: "در کلیپ بورد کپی شد!",
        connect_with: "ارتباط با",
        loading: "...بارگذاری",
        something_went_wrong: "مشکلی پیش آمد",
        no_supported_wallets: "هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",
        no_wallets_found: "هیچ کیف پولی پیدا نشد"
      }
    };
    function k() {
      var e = a.getDocumentOrThrow();
      var t = e.getElementById(h);
      t && (t.className = t.className.replace("fadeIn", "fadeOut"), setTimeout((function() {
        var t = e.getElementById(l);
        t && e.body.removeChild(t);
      }), 300));
    }
    function M(e) {
      return function() {
        k(), e && e();
      };
    }
    function E() {
      var e = a.getNavigatorOrThrow().language.split("-")[0] || "en";
      return x[e] || x.en;
    }
    function A(e, t, r) {
      !function() {
        var e = a.getDocumentOrThrow();
        var t = e.getElementById(f);
        t && e.head.removeChild(t);
        var r = e.createElement("style");
        r.setAttribute("id", f), r.innerText = ":root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, \"SF Pro Rounded\", \"SF Pro Text\", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\n    \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url(\"images/wc-logo.svg\") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n", 
        e.head.appendChild(r);
      }();
      var n = function() {
        var e = a.getDocumentOrThrow();
        var t = e.createElement("div");
        return t.setAttribute("id", l), e.body.appendChild(t), t;
      }();
      u.render(u.createElement(b, {
        text: E(),
        uri: e,
        onClose: M(t),
        qrcodeModalOptions: r
      }), n);
    }
    var C = function() {
      return void 0 !== o && void 0 !== o.versions && void 0 !== o.versions.node;
    };
    var S = {
      open: function(e, t, r) {
        n.log(e), C() ? function(e) {
          s.toString(e, {
            type: "terminal"
          }).then(n.log);
        }(e) : A(e, t, r);
      },
      close: function() {
        C() || function() {
          k();
        }();
      }
    };
    e.exports = S;
  },
  68007: e => {
    "use strict";
    e.exports = function() {
      throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object");
    };
  },
  11460: function(e, t, r) {
    !function(e, t) {
      'use strict';
      function n(e, t) {
        if (!e) throw new Error(t || 'Assertion failed');
      }
      function o(e, t) {
        e.super_ = t;
        var r = function() {};
        r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
      }
      function i(e, t, r) {
        if (i.isBN(e)) return e;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== e && ('le' !== t && 'be' !== t || (r = t, 
        t = 10), this._init(e || 0, t || 10, r || 'be'));
      }
      var a;
      'object' == typeof e ? e.exports = i : t.BN = i, i.BN = i, i.wordSize = 26;
      try {
        a = r(36563).Buffer;
      } catch (M) {}
      function s(e, t, r) {
        var n = 0;
        var o = Math.min(e.length, r);
        for (var i = t; i < o; i++) {
          var a = e.charCodeAt(i) - 48;
          n <<= 4, n |= a >= 49 && a <= 54 ? a - 49 + 10 : a >= 17 && a <= 22 ? a - 17 + 10 : 15 & a;
        }
        return n;
      }
      function c(e, t, r, n) {
        var o = 0;
        var i = Math.min(e.length, r);
        for (var a = t; a < i; a++) {
          var s = e.charCodeAt(a) - 48;
          o *= n, o += s >= 49 ? s - 49 + 10 : s >= 17 ? s - 17 + 10 : s;
        }
        return o;
      }
      i.isBN = function(e) {
        return e instanceof i || null !== e && 'object' == typeof e && e.constructor.wordSize === i.wordSize && Array.isArray(e.words);
      }, i.max = function(e, t) {
        return e.cmp(t) > 0 ? e : t;
      }, i.min = function(e, t) {
        return e.cmp(t) < 0 ? e : t;
      }, i.prototype._init = function(e, t, r) {
        if ('number' == typeof e) return this._initNumber(e, t, r);
        if ('object' == typeof e) return this._initArray(e, t, r);
        'hex' === t && (t = 16), n(t === (0 | t) && t >= 2 && t <= 36);
        var o = 0;
        '-' === (e = e.toString().replace(/\s+/g, ''))[0] && o++, 16 === t ? this._parseHex(e, o) : this._parseBase(e, t, o), '-' === e[0] && (this.negative = 1), 
        this.strip(), 'le' === r && this._initArray(this.toArray(), t, r);
      }, i.prototype._initNumber = function(e, t, r) {
        e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [ 67108863 & e ], this.length = 1) : e < 4503599627370496 ? (this.words = [ 67108863 & e, e / 67108864 & 67108863 ], 
        this.length = 2) : (n(e < 9007199254740992), this.words = [ 67108863 & e, e / 67108864 & 67108863, 1 ], this.length = 3), 
        'le' === r && this._initArray(this.toArray(), t, r);
      }, i.prototype._initArray = function(e, t, r) {
        if (n('number' == typeof e.length), e.length <= 0) return this.words = [ 0 ], this.length = 1, this;
        this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);
        for (var o = 0; o < this.length; o++) this.words[o] = 0;
        var i, a;
        var s = 0;
        if ('be' === r) for (o = e.length - 1, i = 0; o >= 0; o -= 3) a = e[o] | e[o - 1] << 8 | e[o - 2] << 16, this.words[i] |= a << s & 67108863, 
        this.words[i + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, i++); else if ('le' === r) for (o = 0, i = 0; o < e.length; o += 3) a = e[o] | e[o + 1] << 8 | e[o + 2] << 16, 
        this.words[i] |= a << s & 67108863, this.words[i + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, i++);
        return this.strip();
      }, i.prototype._parseHex = function(e, t) {
        this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);
        for (var r = 0; r < this.length; r++) this.words[r] = 0;
        var n, o;
        var i = 0;
        for (r = e.length - 6, n = 0; r >= t; r -= 6) o = s(e, r, r + 6), this.words[n] |= o << i & 67108863, this.words[n + 1] |= o >>> 26 - i & 4194303, 
        (i += 24) >= 26 && (i -= 26, n++);
        r + 6 !== t && (o = s(e, t, r + 6), this.words[n] |= o << i & 67108863, this.words[n + 1] |= o >>> 26 - i & 4194303), this.strip();
      }, i.prototype._parseBase = function(e, t, r) {
        this.words = [ 0 ], this.length = 1;
        for (var n = 0, o = 1; o <= 67108863; o *= t) n++;
        n--, o = o / t | 0;
        var i = e.length - r;
        var a = i % n;
        var s = Math.min(i, i - a) + r;
        var u = 0;
        for (var l = r; l < s; l += n) u = c(e, l, l + n, t), this.imuln(o), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        if (0 !== a) {
          var f = 1;
          for (u = c(e, l, e.length, t), l = 0; l < a; l++) f *= t;
          this.imuln(f), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
        }
      }, i.prototype.copy = function(e) {
        e.words = new Array(this.length);
        for (var t = 0; t < this.length; t++) e.words[t] = this.words[t];
        e.length = this.length, e.negative = this.negative, e.red = this.red;
      }, i.prototype.clone = function() {
        var e = new i(null);
        return this.copy(e), e;
      }, i.prototype._expand = function(e) {
        for (;this.length < e; ) this.words[this.length++] = 0;
        return this;
      }, i.prototype.strip = function() {
        for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
        return this._normSign();
      }, i.prototype._normSign = function() {
        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
      }, i.prototype.inspect = function() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
      var u = [ '', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000' ];
      var l = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
      var f = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
      function h(e, t, r) {
        r.negative = t.negative ^ e.negative;
        var n = e.length + t.length | 0;
        r.length = n, n = n - 1 | 0;
        var o = 0 | e.words[0];
        var i = 0 | t.words[0];
        var a = o * i;
        var s = 67108863 & a;
        var c = a / 67108864 | 0;
        r.words[0] = s;
        for (var u = 1; u < n; u++) {
          var l = c >>> 26;
          var f = 67108863 & c;
          var h = Math.min(u, t.length - 1);
          for (var d = Math.max(0, u - e.length + 1); d <= h; d++) {
            var p = u - d | 0;
            l += (a = (o = 0 | e.words[p]) * (i = 0 | t.words[d]) + f) / 67108864 | 0, f = 67108863 & a;
          }
          r.words[u] = 0 | f, c = 0 | l;
        }
        return 0 !== c ? r.words[u] = 0 | c : r.length--, r.strip();
      }
      i.prototype.toString = function(e, t) {
        var r;
        if (t = 0 | t || 1, 16 === (e = e || 10) || 'hex' === e) {
          r = '';
          var o = 0;
          var i = 0;
          for (var a = 0; a < this.length; a++) {
            var s = this.words[a];
            var c = (16777215 & (s << o | i)).toString(16);
            r = 0 !== (i = s >>> 24 - o & 16777215) || a !== this.length - 1 ? u[6 - c.length] + c + r : c + r, (o += 2) >= 26 && (o -= 26, 
            a--);
          }
          for (0 !== i && (r = i.toString(16) + r); r.length % t != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        if (e === (0 | e) && e >= 2 && e <= 36) {
          var h = l[e];
          var d = f[e];
          r = '';
          var p = this.clone();
          for (p.negative = 0; !p.isZero(); ) {
            var v = p.modn(d).toString(e);
            r = (p = p.idivn(d)).isZero() ? v + r : u[h - v.length] + v + r;
          }
          for (this.isZero() && (r = '0' + r); r.length % t != 0; ) r = '0' + r;
          return 0 !== this.negative && (r = '-' + r), r;
        }
        n(!1, 'Base should be between 2 and 36');
      }, i.prototype.toNumber = function() {
        var e = this.words[0];
        return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, 'Number can only safely store up to 53 bits'), 
        0 !== this.negative ? -e : e;
      }, i.prototype.toJSON = function() {
        return this.toString(16);
      }, i.prototype.toBuffer = function(e, t) {
        return n(void 0 !== a), this.toArrayLike(a, e, t);
      }, i.prototype.toArray = function(e, t) {
        return this.toArrayLike(Array, e, t);
      }, i.prototype.toArrayLike = function(e, t, r) {
        var o = this.byteLength();
        var i = r || Math.max(1, o);
        n(o <= i, 'byte array longer than desired length'), n(i > 0, 'Requested array length <= 0'), this.strip();
        var a = 'le' === t;
        var s = new e(i);
        var c, u;
        var l = this.clone();
        if (a) {
          for (u = 0; !l.isZero(); u++) c = l.andln(255), l.iushrn(8), s[u] = c;
          for (;u < i; u++) s[u] = 0;
        } else {
          for (u = 0; u < i - o; u++) s[u] = 0;
          for (u = 0; !l.isZero(); u++) c = l.andln(255), l.iushrn(8), s[i - u - 1] = c;
        }
        return s;
      }, Math.clz32 ? i.prototype._countBits = function(e) {
        return 32 - Math.clz32(e);
      } : i.prototype._countBits = function(e) {
        var t = e;
        var r = 0;
        return t >= 4096 && (r += 13, t >>>= 13), t >= 64 && (r += 7, t >>>= 7), t >= 8 && (r += 4, t >>>= 4), t >= 2 && (r += 2, 
        t >>>= 2), r + t;
      }, i.prototype._zeroBits = function(e) {
        if (0 === e) return 26;
        var t = e;
        var r = 0;
        return 0 == (8191 & t) && (r += 13, t >>>= 13), 0 == (127 & t) && (r += 7, t >>>= 7), 0 == (15 & t) && (r += 4, t >>>= 4), 
        0 == (3 & t) && (r += 2, t >>>= 2), 0 == (1 & t) && r++, r;
      }, i.prototype.bitLength = function() {
        var e = this.words[this.length - 1];
        var t = this._countBits(e);
        return 26 * (this.length - 1) + t;
      }, i.prototype.zeroBits = function() {
        if (this.isZero()) return 0;
        var e = 0;
        for (var t = 0; t < this.length; t++) {
          var r = this._zeroBits(this.words[t]);
          if (e += r, 26 !== r) break;
        }
        return e;
      }, i.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, i.prototype.toTwos = function(e) {
        return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();
      }, i.prototype.fromTwos = function(e) {
        return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();
      }, i.prototype.isNeg = function() {
        return 0 !== this.negative;
      }, i.prototype.neg = function() {
        return this.clone().ineg();
      }, i.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, i.prototype.iuor = function(e) {
        for (;this.length < e.length; ) this.words[this.length++] = 0;
        for (var t = 0; t < e.length; t++) this.words[t] = this.words[t] | e.words[t];
        return this.strip();
      }, i.prototype.ior = function(e) {
        return n(0 == (this.negative | e.negative)), this.iuor(e);
      }, i.prototype.or = function(e) {
        return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);
      }, i.prototype.uor = function(e) {
        return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);
      }, i.prototype.iuand = function(e) {
        var t;
        t = this.length > e.length ? e : this;
        for (var r = 0; r < t.length; r++) this.words[r] = this.words[r] & e.words[r];
        return this.length = t.length, this.strip();
      }, i.prototype.iand = function(e) {
        return n(0 == (this.negative | e.negative)), this.iuand(e);
      }, i.prototype.and = function(e) {
        return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);
      }, i.prototype.uand = function(e) {
        return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);
      }, i.prototype.iuxor = function(e) {
        var t;
        var r;
        this.length > e.length ? (t = this, r = e) : (t = e, r = this);
        for (var n = 0; n < r.length; n++) this.words[n] = t.words[n] ^ r.words[n];
        if (this !== t) for (;n < t.length; n++) this.words[n] = t.words[n];
        return this.length = t.length, this.strip();
      }, i.prototype.ixor = function(e) {
        return n(0 == (this.negative | e.negative)), this.iuxor(e);
      }, i.prototype.xor = function(e) {
        return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);
      }, i.prototype.uxor = function(e) {
        return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);
      }, i.prototype.inotn = function(e) {
        n('number' == typeof e && e >= 0);
        var t = 0 | Math.ceil(e / 26);
        var r = e % 26;
        this._expand(t), r > 0 && t--;
        for (var o = 0; o < t; o++) this.words[o] = 67108863 & ~this.words[o];
        return r > 0 && (this.words[o] = ~this.words[o] & 67108863 >> 26 - r), this.strip();
      }, i.prototype.notn = function(e) {
        return this.clone().inotn(e);
      }, i.prototype.setn = function(e, t) {
        n('number' == typeof e && e >= 0);
        var r = e / 26 | 0;
        var o = e % 26;
        return this._expand(r + 1), this.words[r] = t ? this.words[r] | 1 << o : this.words[r] & ~(1 << o), this.strip();
      }, i.prototype.iadd = function(e) {
        var t;
        if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();
        if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();
        var r, n;
        this.length > e.length ? (r = this, n = e) : (r = e, n = this);
        var o = 0;
        for (var i = 0; i < n.length; i++) t = (0 | r.words[i]) + (0 | n.words[i]) + o, this.words[i] = 67108863 & t, o = t >>> 26;
        for (;0 !== o && i < r.length; i++) t = (0 | r.words[i]) + o, this.words[i] = 67108863 & t, o = t >>> 26;
        if (this.length = r.length, 0 !== o) this.words[this.length] = o, this.length++; else if (r !== this) for (;i < r.length; i++) this.words[i] = r.words[i];
        return this;
      }, i.prototype.add = function(e) {
        var t;
        return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, 
        t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);
      }, i.prototype.isub = function(e) {
        if (0 !== e.negative) {
          e.negative = 0;
          var t = this.iadd(e);
          return e.negative = 1, t._normSign();
        }
        if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();
        var r = this.cmp(e);
        if (0 === r) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var n, o;
        r > 0 ? (n = this, o = e) : (n = e, o = this);
        var i = 0;
        for (var a = 0; a < o.length; a++) i = (t = (0 | n.words[a]) - (0 | o.words[a]) + i) >> 26, this.words[a] = 67108863 & t;
        for (;0 !== i && a < n.length; a++) i = (t = (0 | n.words[a]) + i) >> 26, this.words[a] = 67108863 & t;
        if (0 === i && a < n.length && n !== this) for (;a < n.length; a++) this.words[a] = n.words[a];
        return this.length = Math.max(this.length, a), n !== this && (this.negative = 1), this.strip();
      }, i.prototype.sub = function(e) {
        return this.clone().isub(e);
      };
      var d = function(e, t, r) {
        var n = e.words;
        var o = t.words;
        var i = r.words;
        var a = 0;
        var s;
        var c;
        var u;
        var l = 0 | n[0];
        var f = 8191 & l;
        var h = l >>> 13;
        var d = 0 | n[1];
        var p = 8191 & d;
        var v = d >>> 13;
        var g = 0 | n[2];
        var m = 8191 & g;
        var y = g >>> 13;
        var _ = 0 | n[3];
        var w = 8191 & _;
        var b = _ >>> 13;
        var x = 0 | n[4];
        var k = 8191 & x;
        var M = x >>> 13;
        var E = 0 | n[5];
        var A = 8191 & E;
        var C = E >>> 13;
        var S = 0 | n[6];
        var T = 8191 & S;
        var R = S >>> 13;
        var B = 0 | n[7];
        var P = 8191 & B;
        var I = B >>> 13;
        var L = 0 | n[8];
        var O = 8191 & L;
        var N = L >>> 13;
        var U = 0 | n[9];
        var j = 8191 & U;
        var q = U >>> 13;
        var H = 0 | o[0];
        var F = 8191 & H;
        var K = H >>> 13;
        var D = 0 | o[1];
        var z = 8191 & D;
        var W = D >>> 13;
        var V = 0 | o[2];
        var $ = 8191 & V;
        var G = V >>> 13;
        var J = 0 | o[3];
        var Z = 8191 & J;
        var Y = J >>> 13;
        var Q = 0 | o[4];
        var X = 8191 & Q;
        var ee = Q >>> 13;
        var te = 0 | o[5];
        var re = 8191 & te;
        var ne = te >>> 13;
        var oe = 0 | o[6];
        var ie = 8191 & oe;
        var ae = oe >>> 13;
        var se = 0 | o[7];
        var ce = 8191 & se;
        var ue = se >>> 13;
        var le = 0 | o[8];
        var fe = 8191 & le;
        var he = le >>> 13;
        var de = 0 | o[9];
        var pe = 8191 & de;
        var ve = de >>> 13;
        r.negative = e.negative ^ t.negative, r.length = 19;
        var ge = (a + (s = Math.imul(f, F)) | 0) + ((8191 & (c = (c = Math.imul(f, K)) + Math.imul(h, F) | 0)) << 13) | 0;
        a = ((u = Math.imul(h, K)) + (c >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, s = Math.imul(p, F), c = (c = Math.imul(p, K)) + Math.imul(v, F) | 0, 
        u = Math.imul(v, K);
        var me = (a + (s = s + Math.imul(f, z) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, W) | 0) + Math.imul(h, z) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, W) | 0) + (c >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, s = Math.imul(m, F), c = (c = Math.imul(m, K)) + Math.imul(y, F) | 0, 
        u = Math.imul(y, K), s = s + Math.imul(p, z) | 0, c = (c = c + Math.imul(p, W) | 0) + Math.imul(v, z) | 0, u = u + Math.imul(v, W) | 0;
        var ye = (a + (s = s + Math.imul(f, $) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, G) | 0) + Math.imul(h, $) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, G) | 0) + (c >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, s = Math.imul(w, F), c = (c = Math.imul(w, K)) + Math.imul(b, F) | 0, 
        u = Math.imul(b, K), s = s + Math.imul(m, z) | 0, c = (c = c + Math.imul(m, W) | 0) + Math.imul(y, z) | 0, u = u + Math.imul(y, W) | 0, 
        s = s + Math.imul(p, $) | 0, c = (c = c + Math.imul(p, G) | 0) + Math.imul(v, $) | 0, u = u + Math.imul(v, G) | 0;
        var _e = (a + (s = s + Math.imul(f, Z) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, Y) | 0) + Math.imul(h, Z) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, Y) | 0) + (c >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, s = Math.imul(k, F), c = (c = Math.imul(k, K)) + Math.imul(M, F) | 0, 
        u = Math.imul(M, K), s = s + Math.imul(w, z) | 0, c = (c = c + Math.imul(w, W) | 0) + Math.imul(b, z) | 0, u = u + Math.imul(b, W) | 0, 
        s = s + Math.imul(m, $) | 0, c = (c = c + Math.imul(m, G) | 0) + Math.imul(y, $) | 0, u = u + Math.imul(y, G) | 0, s = s + Math.imul(p, Z) | 0, 
        c = (c = c + Math.imul(p, Y) | 0) + Math.imul(v, Z) | 0, u = u + Math.imul(v, Y) | 0;
        var we = (a + (s = s + Math.imul(f, X) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, ee) | 0) + Math.imul(h, X) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, ee) | 0) + (c >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, s = Math.imul(A, F), c = (c = Math.imul(A, K)) + Math.imul(C, F) | 0, 
        u = Math.imul(C, K), s = s + Math.imul(k, z) | 0, c = (c = c + Math.imul(k, W) | 0) + Math.imul(M, z) | 0, u = u + Math.imul(M, W) | 0, 
        s = s + Math.imul(w, $) | 0, c = (c = c + Math.imul(w, G) | 0) + Math.imul(b, $) | 0, u = u + Math.imul(b, G) | 0, s = s + Math.imul(m, Z) | 0, 
        c = (c = c + Math.imul(m, Y) | 0) + Math.imul(y, Z) | 0, u = u + Math.imul(y, Y) | 0, s = s + Math.imul(p, X) | 0, c = (c = c + Math.imul(p, ee) | 0) + Math.imul(v, X) | 0, 
        u = u + Math.imul(v, ee) | 0;
        var be = (a + (s = s + Math.imul(f, re) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, ne) | 0) + Math.imul(h, re) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, ne) | 0) + (c >>> 13) | 0) + (be >>> 26) | 0, be &= 67108863, s = Math.imul(T, F), c = (c = Math.imul(T, K)) + Math.imul(R, F) | 0, 
        u = Math.imul(R, K), s = s + Math.imul(A, z) | 0, c = (c = c + Math.imul(A, W) | 0) + Math.imul(C, z) | 0, u = u + Math.imul(C, W) | 0, 
        s = s + Math.imul(k, $) | 0, c = (c = c + Math.imul(k, G) | 0) + Math.imul(M, $) | 0, u = u + Math.imul(M, G) | 0, s = s + Math.imul(w, Z) | 0, 
        c = (c = c + Math.imul(w, Y) | 0) + Math.imul(b, Z) | 0, u = u + Math.imul(b, Y) | 0, s = s + Math.imul(m, X) | 0, c = (c = c + Math.imul(m, ee) | 0) + Math.imul(y, X) | 0, 
        u = u + Math.imul(y, ee) | 0, s = s + Math.imul(p, re) | 0, c = (c = c + Math.imul(p, ne) | 0) + Math.imul(v, re) | 0, u = u + Math.imul(v, ne) | 0;
        var xe = (a + (s = s + Math.imul(f, ie) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, ae) | 0) + Math.imul(h, ie) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, ae) | 0) + (c >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, s = Math.imul(P, F), c = (c = Math.imul(P, K)) + Math.imul(I, F) | 0, 
        u = Math.imul(I, K), s = s + Math.imul(T, z) | 0, c = (c = c + Math.imul(T, W) | 0) + Math.imul(R, z) | 0, u = u + Math.imul(R, W) | 0, 
        s = s + Math.imul(A, $) | 0, c = (c = c + Math.imul(A, G) | 0) + Math.imul(C, $) | 0, u = u + Math.imul(C, G) | 0, s = s + Math.imul(k, Z) | 0, 
        c = (c = c + Math.imul(k, Y) | 0) + Math.imul(M, Z) | 0, u = u + Math.imul(M, Y) | 0, s = s + Math.imul(w, X) | 0, c = (c = c + Math.imul(w, ee) | 0) + Math.imul(b, X) | 0, 
        u = u + Math.imul(b, ee) | 0, s = s + Math.imul(m, re) | 0, c = (c = c + Math.imul(m, ne) | 0) + Math.imul(y, re) | 0, u = u + Math.imul(y, ne) | 0, 
        s = s + Math.imul(p, ie) | 0, c = (c = c + Math.imul(p, ae) | 0) + Math.imul(v, ie) | 0, u = u + Math.imul(v, ae) | 0;
        var ke = (a + (s = s + Math.imul(f, ce) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, ue) | 0) + Math.imul(h, ce) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, ue) | 0) + (c >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, s = Math.imul(O, F), c = (c = Math.imul(O, K)) + Math.imul(N, F) | 0, 
        u = Math.imul(N, K), s = s + Math.imul(P, z) | 0, c = (c = c + Math.imul(P, W) | 0) + Math.imul(I, z) | 0, u = u + Math.imul(I, W) | 0, 
        s = s + Math.imul(T, $) | 0, c = (c = c + Math.imul(T, G) | 0) + Math.imul(R, $) | 0, u = u + Math.imul(R, G) | 0, s = s + Math.imul(A, Z) | 0, 
        c = (c = c + Math.imul(A, Y) | 0) + Math.imul(C, Z) | 0, u = u + Math.imul(C, Y) | 0, s = s + Math.imul(k, X) | 0, c = (c = c + Math.imul(k, ee) | 0) + Math.imul(M, X) | 0, 
        u = u + Math.imul(M, ee) | 0, s = s + Math.imul(w, re) | 0, c = (c = c + Math.imul(w, ne) | 0) + Math.imul(b, re) | 0, u = u + Math.imul(b, ne) | 0, 
        s = s + Math.imul(m, ie) | 0, c = (c = c + Math.imul(m, ae) | 0) + Math.imul(y, ie) | 0, u = u + Math.imul(y, ae) | 0, s = s + Math.imul(p, ce) | 0, 
        c = (c = c + Math.imul(p, ue) | 0) + Math.imul(v, ce) | 0, u = u + Math.imul(v, ue) | 0;
        var Me = (a + (s = s + Math.imul(f, fe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, he) | 0) + Math.imul(h, fe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, he) | 0) + (c >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, s = Math.imul(j, F), c = (c = Math.imul(j, K)) + Math.imul(q, F) | 0, 
        u = Math.imul(q, K), s = s + Math.imul(O, z) | 0, c = (c = c + Math.imul(O, W) | 0) + Math.imul(N, z) | 0, u = u + Math.imul(N, W) | 0, 
        s = s + Math.imul(P, $) | 0, c = (c = c + Math.imul(P, G) | 0) + Math.imul(I, $) | 0, u = u + Math.imul(I, G) | 0, s = s + Math.imul(T, Z) | 0, 
        c = (c = c + Math.imul(T, Y) | 0) + Math.imul(R, Z) | 0, u = u + Math.imul(R, Y) | 0, s = s + Math.imul(A, X) | 0, c = (c = c + Math.imul(A, ee) | 0) + Math.imul(C, X) | 0, 
        u = u + Math.imul(C, ee) | 0, s = s + Math.imul(k, re) | 0, c = (c = c + Math.imul(k, ne) | 0) + Math.imul(M, re) | 0, u = u + Math.imul(M, ne) | 0, 
        s = s + Math.imul(w, ie) | 0, c = (c = c + Math.imul(w, ae) | 0) + Math.imul(b, ie) | 0, u = u + Math.imul(b, ae) | 0, s = s + Math.imul(m, ce) | 0, 
        c = (c = c + Math.imul(m, ue) | 0) + Math.imul(y, ce) | 0, u = u + Math.imul(y, ue) | 0, s = s + Math.imul(p, fe) | 0, c = (c = c + Math.imul(p, he) | 0) + Math.imul(v, fe) | 0, 
        u = u + Math.imul(v, he) | 0;
        var Ee = (a + (s = s + Math.imul(f, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(f, ve) | 0) + Math.imul(h, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(h, ve) | 0) + (c >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, s = Math.imul(j, z), c = (c = Math.imul(j, W)) + Math.imul(q, z) | 0, 
        u = Math.imul(q, W), s = s + Math.imul(O, $) | 0, c = (c = c + Math.imul(O, G) | 0) + Math.imul(N, $) | 0, u = u + Math.imul(N, G) | 0, 
        s = s + Math.imul(P, Z) | 0, c = (c = c + Math.imul(P, Y) | 0) + Math.imul(I, Z) | 0, u = u + Math.imul(I, Y) | 0, s = s + Math.imul(T, X) | 0, 
        c = (c = c + Math.imul(T, ee) | 0) + Math.imul(R, X) | 0, u = u + Math.imul(R, ee) | 0, s = s + Math.imul(A, re) | 0, c = (c = c + Math.imul(A, ne) | 0) + Math.imul(C, re) | 0, 
        u = u + Math.imul(C, ne) | 0, s = s + Math.imul(k, ie) | 0, c = (c = c + Math.imul(k, ae) | 0) + Math.imul(M, ie) | 0, u = u + Math.imul(M, ae) | 0, 
        s = s + Math.imul(w, ce) | 0, c = (c = c + Math.imul(w, ue) | 0) + Math.imul(b, ce) | 0, u = u + Math.imul(b, ue) | 0, s = s + Math.imul(m, fe) | 0, 
        c = (c = c + Math.imul(m, he) | 0) + Math.imul(y, fe) | 0, u = u + Math.imul(y, he) | 0;
        var Ae = (a + (s = s + Math.imul(p, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(p, ve) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(v, ve) | 0) + (c >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, s = Math.imul(j, $), c = (c = Math.imul(j, G)) + Math.imul(q, $) | 0, 
        u = Math.imul(q, G), s = s + Math.imul(O, Z) | 0, c = (c = c + Math.imul(O, Y) | 0) + Math.imul(N, Z) | 0, u = u + Math.imul(N, Y) | 0, 
        s = s + Math.imul(P, X) | 0, c = (c = c + Math.imul(P, ee) | 0) + Math.imul(I, X) | 0, u = u + Math.imul(I, ee) | 0, s = s + Math.imul(T, re) | 0, 
        c = (c = c + Math.imul(T, ne) | 0) + Math.imul(R, re) | 0, u = u + Math.imul(R, ne) | 0, s = s + Math.imul(A, ie) | 0, c = (c = c + Math.imul(A, ae) | 0) + Math.imul(C, ie) | 0, 
        u = u + Math.imul(C, ae) | 0, s = s + Math.imul(k, ce) | 0, c = (c = c + Math.imul(k, ue) | 0) + Math.imul(M, ce) | 0, u = u + Math.imul(M, ue) | 0, 
        s = s + Math.imul(w, fe) | 0, c = (c = c + Math.imul(w, he) | 0) + Math.imul(b, fe) | 0, u = u + Math.imul(b, he) | 0;
        var Ce = (a + (s = s + Math.imul(m, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(m, ve) | 0) + Math.imul(y, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(y, ve) | 0) + (c >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, s = Math.imul(j, Z), c = (c = Math.imul(j, Y)) + Math.imul(q, Z) | 0, 
        u = Math.imul(q, Y), s = s + Math.imul(O, X) | 0, c = (c = c + Math.imul(O, ee) | 0) + Math.imul(N, X) | 0, u = u + Math.imul(N, ee) | 0, 
        s = s + Math.imul(P, re) | 0, c = (c = c + Math.imul(P, ne) | 0) + Math.imul(I, re) | 0, u = u + Math.imul(I, ne) | 0, s = s + Math.imul(T, ie) | 0, 
        c = (c = c + Math.imul(T, ae) | 0) + Math.imul(R, ie) | 0, u = u + Math.imul(R, ae) | 0, s = s + Math.imul(A, ce) | 0, c = (c = c + Math.imul(A, ue) | 0) + Math.imul(C, ce) | 0, 
        u = u + Math.imul(C, ue) | 0, s = s + Math.imul(k, fe) | 0, c = (c = c + Math.imul(k, he) | 0) + Math.imul(M, fe) | 0, u = u + Math.imul(M, he) | 0;
        var Se = (a + (s = s + Math.imul(w, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(w, ve) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(b, ve) | 0) + (c >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, s = Math.imul(j, X), c = (c = Math.imul(j, ee)) + Math.imul(q, X) | 0, 
        u = Math.imul(q, ee), s = s + Math.imul(O, re) | 0, c = (c = c + Math.imul(O, ne) | 0) + Math.imul(N, re) | 0, u = u + Math.imul(N, ne) | 0, 
        s = s + Math.imul(P, ie) | 0, c = (c = c + Math.imul(P, ae) | 0) + Math.imul(I, ie) | 0, u = u + Math.imul(I, ae) | 0, s = s + Math.imul(T, ce) | 0, 
        c = (c = c + Math.imul(T, ue) | 0) + Math.imul(R, ce) | 0, u = u + Math.imul(R, ue) | 0, s = s + Math.imul(A, fe) | 0, c = (c = c + Math.imul(A, he) | 0) + Math.imul(C, fe) | 0, 
        u = u + Math.imul(C, he) | 0;
        var Te = (a + (s = s + Math.imul(k, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(k, ve) | 0) + Math.imul(M, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(M, ve) | 0) + (c >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, s = Math.imul(j, re), c = (c = Math.imul(j, ne)) + Math.imul(q, re) | 0, 
        u = Math.imul(q, ne), s = s + Math.imul(O, ie) | 0, c = (c = c + Math.imul(O, ae) | 0) + Math.imul(N, ie) | 0, u = u + Math.imul(N, ae) | 0, 
        s = s + Math.imul(P, ce) | 0, c = (c = c + Math.imul(P, ue) | 0) + Math.imul(I, ce) | 0, u = u + Math.imul(I, ue) | 0, s = s + Math.imul(T, fe) | 0, 
        c = (c = c + Math.imul(T, he) | 0) + Math.imul(R, fe) | 0, u = u + Math.imul(R, he) | 0;
        var Re = (a + (s = s + Math.imul(A, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(A, ve) | 0) + Math.imul(C, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(C, ve) | 0) + (c >>> 13) | 0) + (Re >>> 26) | 0, Re &= 67108863, s = Math.imul(j, ie), c = (c = Math.imul(j, ae)) + Math.imul(q, ie) | 0, 
        u = Math.imul(q, ae), s = s + Math.imul(O, ce) | 0, c = (c = c + Math.imul(O, ue) | 0) + Math.imul(N, ce) | 0, u = u + Math.imul(N, ue) | 0, 
        s = s + Math.imul(P, fe) | 0, c = (c = c + Math.imul(P, he) | 0) + Math.imul(I, fe) | 0, u = u + Math.imul(I, he) | 0;
        var Be = (a + (s = s + Math.imul(T, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(T, ve) | 0) + Math.imul(R, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(R, ve) | 0) + (c >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, s = Math.imul(j, ce), c = (c = Math.imul(j, ue)) + Math.imul(q, ce) | 0, 
        u = Math.imul(q, ue), s = s + Math.imul(O, fe) | 0, c = (c = c + Math.imul(O, he) | 0) + Math.imul(N, fe) | 0, u = u + Math.imul(N, he) | 0;
        var Pe = (a + (s = s + Math.imul(P, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(P, ve) | 0) + Math.imul(I, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(I, ve) | 0) + (c >>> 13) | 0) + (Pe >>> 26) | 0, Pe &= 67108863, s = Math.imul(j, fe), c = (c = Math.imul(j, he)) + Math.imul(q, fe) | 0, 
        u = Math.imul(q, he);
        var Ie = (a + (s = s + Math.imul(O, pe) | 0) | 0) + ((8191 & (c = (c = c + Math.imul(O, ve) | 0) + Math.imul(N, pe) | 0)) << 13) | 0;
        a = ((u = u + Math.imul(N, ve) | 0) + (c >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863;
        var Le = (a + (s = Math.imul(j, pe)) | 0) + ((8191 & (c = (c = Math.imul(j, ve)) + Math.imul(q, pe) | 0)) << 13) | 0;
        return a = ((u = Math.imul(q, ve)) + (c >>> 13) | 0) + (Le >>> 26) | 0, Le &= 67108863, i[0] = ge, i[1] = me, i[2] = ye, 
        i[3] = _e, i[4] = we, i[5] = be, i[6] = xe, i[7] = ke, i[8] = Me, i[9] = Ee, i[10] = Ae, i[11] = Ce, i[12] = Se, i[13] = Te, 
        i[14] = Re, i[15] = Be, i[16] = Pe, i[17] = Ie, i[18] = Le, 0 !== a && (i[19] = a, r.length++), r;
      };
      function p(e, t, r) {
        return (new v).mulp(e, t, r);
      }
      function v(e, t) {
        this.x = e, this.y = t;
      }
      Math.imul || (d = h), i.prototype.mulTo = function(e, t) {
        var r;
        var n = this.length + e.length;
        return r = 10 === this.length && 10 === e.length ? d(this, e, t) : n < 63 ? h(this, e, t) : n < 1024 ? function(e, t, r) {
          r.negative = t.negative ^ e.negative, r.length = e.length + t.length;
          var n = 0;
          var o = 0;
          for (var i = 0; i < r.length - 1; i++) {
            var a = o;
            o = 0;
            var s = 67108863 & n;
            var c = Math.min(i, t.length - 1);
            for (var u = Math.max(0, i - e.length + 1); u <= c; u++) {
              var l = i - u;
              var f = (0 | e.words[l]) * (0 | t.words[u]);
              var h = 67108863 & f;
              s = 67108863 & (h = h + s | 0), o += (a = (a = a + (f / 67108864 | 0) | 0) + (h >>> 26) | 0) >>> 26, a &= 67108863;
            }
            r.words[i] = s, n = a, a = o;
          }
          return 0 !== n ? r.words[i] = n : r.length--, r.strip();
        }(this, e, t) : p(this, e, t), r;
      }, v.prototype.makeRBT = function(e) {
        var t = new Array(e);
        var r = i.prototype._countBits(e) - 1;
        for (var n = 0; n < e; n++) t[n] = this.revBin(n, r, e);
        return t;
      }, v.prototype.revBin = function(e, t, r) {
        if (0 === e || e === r - 1) return e;
        var n = 0;
        for (var o = 0; o < t; o++) n |= (1 & e) << t - o - 1, e >>= 1;
        return n;
      }, v.prototype.permute = function(e, t, r, n, o, i) {
        for (var a = 0; a < i; a++) n[a] = t[e[a]], o[a] = r[e[a]];
      }, v.prototype.transform = function(e, t, r, n, o, i) {
        this.permute(i, e, t, r, n, o);
        for (var a = 1; a < o; a <<= 1) {
          var s = a << 1;
          var c = Math.cos(2 * Math.PI / s);
          var u = Math.sin(2 * Math.PI / s);
          for (var l = 0; l < o; l += s) {
            var f = c;
            var h = u;
            for (var d = 0; d < a; d++) {
              var p = r[l + d];
              var v = n[l + d];
              var g = r[l + d + a];
              var m = n[l + d + a];
              var y = f * g - h * m;
              m = f * m + h * g, g = y, r[l + d] = p + g, n[l + d] = v + m, r[l + d + a] = p - g, n[l + d + a] = v - m, d !== s && (y = c * f - u * h, 
              h = c * h + u * f, f = y);
            }
          }
        }
      }, v.prototype.guessLen13b = function(e, t) {
        var r = 1 | Math.max(t, e);
        var n = 1 & r;
        var o = 0;
        for (r = r / 2 | 0; r; r >>>= 1) o++;
        return 1 << o + 1 + n;
      }, v.prototype.conjugate = function(e, t, r) {
        if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
          var o = e[n];
          e[n] = e[r - n - 1], e[r - n - 1] = o, o = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -o;
        }
      }, v.prototype.normalize13b = function(e, t) {
        var r = 0;
        for (var n = 0; n < t / 2; n++) {
          var o = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;
          e[n] = 67108863 & o, r = o < 67108864 ? 0 : o / 67108864 | 0;
        }
        return e;
      }, v.prototype.convert13b = function(e, t, r, o) {
        var i = 0;
        for (var a = 0; a < t; a++) i += 0 | e[a], r[2 * a] = 8191 & i, i >>>= 13, r[2 * a + 1] = 8191 & i, i >>>= 13;
        for (a = 2 * t; a < o; ++a) r[a] = 0;
        n(0 === i), n(0 == (-8192 & i));
      }, v.prototype.stub = function(e) {
        var t = new Array(e);
        for (var r = 0; r < e; r++) t[r] = 0;
        return t;
      }, v.prototype.mulp = function(e, t, r) {
        var n = 2 * this.guessLen13b(e.length, t.length);
        var o = this.makeRBT(n);
        var i = this.stub(n);
        var a = new Array(n);
        var s = new Array(n);
        var c = new Array(n);
        var u = new Array(n);
        var l = new Array(n);
        var f = new Array(n);
        var h = r.words;
        h.length = n, this.convert13b(e.words, e.length, a, n), this.convert13b(t.words, t.length, u, n), this.transform(a, i, s, c, n, o), 
        this.transform(u, i, l, f, n, o);
        for (var d = 0; d < n; d++) {
          var p = s[d] * l[d] - c[d] * f[d];
          c[d] = s[d] * f[d] + c[d] * l[d], s[d] = p;
        }
        return this.conjugate(s, c, n), this.transform(s, c, h, i, n, o), this.conjugate(h, i, n), this.normalize13b(h, n), r.negative = e.negative ^ t.negative, 
        r.length = e.length + t.length, r.strip();
      }, i.prototype.mul = function(e) {
        var t = new i(null);
        return t.words = new Array(this.length + e.length), this.mulTo(e, t);
      }, i.prototype.mulf = function(e) {
        var t = new i(null);
        return t.words = new Array(this.length + e.length), p(this, e, t);
      }, i.prototype.imul = function(e) {
        return this.clone().mulTo(e, this);
      }, i.prototype.imuln = function(e) {
        n('number' == typeof e), n(e < 67108864);
        var t = 0;
        for (var r = 0; r < this.length; r++) {
          var o = (0 | this.words[r]) * e;
          var i = (67108863 & o) + (67108863 & t);
          t >>= 26, t += o / 67108864 | 0, t += i >>> 26, this.words[r] = 67108863 & i;
        }
        return 0 !== t && (this.words[r] = t, this.length++), this;
      }, i.prototype.muln = function(e) {
        return this.clone().imuln(e);
      }, i.prototype.sqr = function() {
        return this.mul(this);
      }, i.prototype.isqr = function() {
        return this.imul(this.clone());
      }, i.prototype.pow = function(e) {
        var t = function(e) {
          var t = new Array(e.bitLength());
          for (var r = 0; r < t.length; r++) {
            var n = r / 26 | 0;
            var o = r % 26;
            t[r] = (e.words[n] & 1 << o) >>> o;
          }
          return t;
        }(e);
        if (0 === t.length) return new i(1);
        var r = this;
        for (var n = 0; n < t.length && 0 === t[n]; n++, r = r.sqr()) ;
        if (++n < t.length) for (var o = r.sqr(); n < t.length; n++, o = o.sqr()) 0 !== t[n] && (r = r.mul(o));
        return r;
      }, i.prototype.iushln = function(e) {
        n('number' == typeof e && e >= 0);
        var t = e % 26;
        var r = (e - t) / 26;
        var o = 67108863 >>> 26 - t << 26 - t;
        var i;
        if (0 !== t) {
          var a = 0;
          for (i = 0; i < this.length; i++) {
            var s = this.words[i] & o;
            var c = (0 | this.words[i]) - s << t;
            this.words[i] = c | a, a = s >>> 26 - t;
          }
          a && (this.words[i] = a, this.length++);
        }
        if (0 !== r) {
          for (i = this.length - 1; i >= 0; i--) this.words[i + r] = this.words[i];
          for (i = 0; i < r; i++) this.words[i] = 0;
          this.length += r;
        }
        return this.strip();
      }, i.prototype.ishln = function(e) {
        return n(0 === this.negative), this.iushln(e);
      }, i.prototype.iushrn = function(e, t, r) {
        var o;
        n('number' == typeof e && e >= 0), o = t ? (t - t % 26) / 26 : 0;
        var i = e % 26;
        var a = Math.min((e - i) / 26, this.length);
        var s = 67108863 ^ 67108863 >>> i << i;
        var c = r;
        if (o -= a, o = Math.max(0, o), c) {
          for (var u = 0; u < a; u++) c.words[u] = this.words[u];
          c.length = a;
        }
        if (0 === a) ; else if (this.length > a) for (this.length -= a, u = 0; u < this.length; u++) this.words[u] = this.words[u + a]; else this.words[0] = 0, 
        this.length = 1;
        var l = 0;
        for (u = this.length - 1; u >= 0 && (0 !== l || u >= o); u--) {
          var f = 0 | this.words[u];
          this.words[u] = l << 26 - i | f >>> i, l = f & s;
        }
        return c && 0 !== l && (c.words[c.length++] = l), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
      }, i.prototype.ishrn = function(e, t, r) {
        return n(0 === this.negative), this.iushrn(e, t, r);
      }, i.prototype.shln = function(e) {
        return this.clone().ishln(e);
      }, i.prototype.ushln = function(e) {
        return this.clone().iushln(e);
      }, i.prototype.shrn = function(e) {
        return this.clone().ishrn(e);
      }, i.prototype.ushrn = function(e) {
        return this.clone().iushrn(e);
      }, i.prototype.testn = function(e) {
        n('number' == typeof e && e >= 0);
        var t = e % 26;
        var r = (e - t) / 26;
        var o = 1 << t;
        return !(this.length <= r) && !!(this.words[r] & o);
      }, i.prototype.imaskn = function(e) {
        n('number' == typeof e && e >= 0);
        var t = e % 26;
        var r = (e - t) / 26;
        if (n(0 === this.negative, 'imaskn works only with positive numbers'), this.length <= r) return this;
        if (0 !== t && r++, this.length = Math.min(r, this.length), 0 !== t) {
          var o = 67108863 ^ 67108863 >>> t << t;
          this.words[this.length - 1] &= o;
        }
        return this.strip();
      }, i.prototype.maskn = function(e) {
        return this.clone().imaskn(e);
      }, i.prototype.iaddn = function(e) {
        return n('number' == typeof e), n(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < e ? (this.words[0] = e - (0 | this.words[0]), 
        this.negative = 0, this) : (this.negative = 0, this.isubn(e), this.negative = 1, this) : this._iaddn(e);
      }, i.prototype._iaddn = function(e) {
        this.words[0] += e;
        for (var t = 0; t < this.length && this.words[t] >= 67108864; t++) this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
        return this.length = Math.max(this.length, t + 1), this;
      }, i.prototype.isubn = function(e) {
        if (n('number' == typeof e), n(e < 67108864), e < 0) return this.iaddn(-e);
        if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;
        if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1; else for (var t = 0; t < this.length && this.words[t] < 0; t++) this.words[t] += 67108864, 
        this.words[t + 1] -= 1;
        return this.strip();
      }, i.prototype.addn = function(e) {
        return this.clone().iaddn(e);
      }, i.prototype.subn = function(e) {
        return this.clone().isubn(e);
      }, i.prototype.iabs = function() {
        return this.negative = 0, this;
      }, i.prototype.abs = function() {
        return this.clone().iabs();
      }, i.prototype._ishlnsubmul = function(e, t, r) {
        var o = e.length + r;
        var i;
        var a;
        this._expand(o);
        var s = 0;
        for (i = 0; i < e.length; i++) {
          a = (0 | this.words[i + r]) + s;
          var c = (0 | e.words[i]) * t;
          s = ((a -= 67108863 & c) >> 26) - (c / 67108864 | 0), this.words[i + r] = 67108863 & a;
        }
        for (;i < this.length - r; i++) s = (a = (0 | this.words[i + r]) + s) >> 26, this.words[i + r] = 67108863 & a;
        if (0 === s) return this.strip();
        for (n(-1 === s), s = 0, i = 0; i < this.length; i++) s = (a = -(0 | this.words[i]) + s) >> 26, this.words[i] = 67108863 & a;
        return this.negative = 1, this.strip();
      }, i.prototype._wordDiv = function(e, t) {
        var r = (this.length, e.length);
        var n = this.clone();
        var o = e;
        var a = 0 | o.words[o.length - 1];
        0 !== (r = 26 - this._countBits(a)) && (o = o.ushln(r), n.iushln(r), a = 0 | o.words[o.length - 1]);
        var s = n.length - o.length;
        var c;
        if ('mod' !== t) {
          (c = new i(null)).length = s + 1, c.words = new Array(c.length);
          for (var u = 0; u < c.length; u++) c.words[u] = 0;
        }
        var l = n.clone()._ishlnsubmul(o, 1, s);
        0 === l.negative && (n = l, c && (c.words[s] = 1));
        for (var f = s - 1; f >= 0; f--) {
          var h = 67108864 * (0 | n.words[o.length + f]) + (0 | n.words[o.length + f - 1]);
          for (h = Math.min(h / a | 0, 67108863), n._ishlnsubmul(o, h, f); 0 !== n.negative; ) h--, n.negative = 0, n._ishlnsubmul(o, 1, f), 
          n.isZero() || (n.negative ^= 1);
          c && (c.words[f] = h);
        }
        return c && c.strip(), n.strip(), 'div' !== t && 0 !== r && n.iushrn(r), {
          div: c || null,
          mod: n
        };
      }, i.prototype.divmod = function(e, t, r) {
        return n(!e.isZero()), this.isZero() ? {
          div: new i(0),
          mod: new i(0)
        } : 0 !== this.negative && 0 === e.negative ? (s = this.neg().divmod(e, t), 'mod' !== t && (o = s.div.neg()), 'div' !== t && (a = s.mod.neg(), 
        r && 0 !== a.negative && a.iadd(e)), {
          div: o,
          mod: a
        }) : 0 === this.negative && 0 !== e.negative ? (s = this.divmod(e.neg(), t), 'mod' !== t && (o = s.div.neg()), {
          div: o,
          mod: s.mod
        }) : 0 != (this.negative & e.negative) ? (s = this.neg().divmod(e.neg(), t), 'div' !== t && (a = s.mod.neg(), r && 0 !== a.negative && a.isub(e)), 
        {
          div: s.div,
          mod: a
        }) : e.length > this.length || this.cmp(e) < 0 ? {
          div: new i(0),
          mod: this
        } : 1 === e.length ? 'div' === t ? {
          div: this.divn(e.words[0]),
          mod: null
        } : 'mod' === t ? {
          div: null,
          mod: new i(this.modn(e.words[0]))
        } : {
          div: this.divn(e.words[0]),
          mod: new i(this.modn(e.words[0]))
        } : this._wordDiv(e, t);
        var o, a, s;
      }, i.prototype.div = function(e) {
        return this.divmod(e, 'div', !1).div;
      }, i.prototype.mod = function(e) {
        return this.divmod(e, 'mod', !1).mod;
      }, i.prototype.umod = function(e) {
        return this.divmod(e, 'mod', !0).mod;
      }, i.prototype.divRound = function(e) {
        var t = this.divmod(e);
        if (t.mod.isZero()) return t.div;
        var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod;
        var n = e.ushrn(1);
        var o = e.andln(1);
        var i = r.cmp(n);
        return i < 0 || 1 === o && 0 === i ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);
      }, i.prototype.modn = function(e) {
        n(e <= 67108863);
        var t = (1 << 26) % e;
        var r = 0;
        for (var o = this.length - 1; o >= 0; o--) r = (t * r + (0 | this.words[o])) % e;
        return r;
      }, i.prototype.idivn = function(e) {
        n(e <= 67108863);
        var t = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var o = (0 | this.words[r]) + 67108864 * t;
          this.words[r] = o / e | 0, t = o % e;
        }
        return this.strip();
      }, i.prototype.divn = function(e) {
        return this.clone().idivn(e);
      }, i.prototype.egcd = function(e) {
        n(0 === e.negative), n(!e.isZero());
        var t = this;
        var r = e.clone();
        t = 0 !== t.negative ? t.umod(e) : t.clone();
        var o = new i(1);
        var a = new i(0);
        var s = new i(0);
        var c = new i(1);
        var u = 0;
        for (;t.isEven() && r.isEven(); ) t.iushrn(1), r.iushrn(1), ++u;
        var l = r.clone();
        var f = t.clone();
        for (;!t.isZero(); ) {
          for (var h = 0, d = 1; 0 == (t.words[0] & d) && h < 26; ++h, d <<= 1) ;
          if (h > 0) for (t.iushrn(h); h-- > 0; ) (o.isOdd() || a.isOdd()) && (o.iadd(l), a.isub(f)), o.iushrn(1), a.iushrn(1);
          for (var p = 0, v = 1; 0 == (r.words[0] & v) && p < 26; ++p, v <<= 1) ;
          if (p > 0) for (r.iushrn(p); p-- > 0; ) (s.isOdd() || c.isOdd()) && (s.iadd(l), c.isub(f)), s.iushrn(1), c.iushrn(1);
          t.cmp(r) >= 0 ? (t.isub(r), o.isub(s), a.isub(c)) : (r.isub(t), s.isub(o), c.isub(a));
        }
        return {
          a: s,
          b: c,
          gcd: r.iushln(u)
        };
      }, i.prototype._invmp = function(e) {
        n(0 === e.negative), n(!e.isZero());
        var t = this;
        var r = e.clone();
        t = 0 !== t.negative ? t.umod(e) : t.clone();
        var o = new i(1);
        var a = new i(0);
        var s = r.clone();
        for (;t.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
          for (var c = 0, u = 1; 0 == (t.words[0] & u) && c < 26; ++c, u <<= 1) ;
          if (c > 0) for (t.iushrn(c); c-- > 0; ) o.isOdd() && o.iadd(s), o.iushrn(1);
          for (var l = 0, f = 1; 0 == (r.words[0] & f) && l < 26; ++l, f <<= 1) ;
          if (l > 0) for (r.iushrn(l); l-- > 0; ) a.isOdd() && a.iadd(s), a.iushrn(1);
          t.cmp(r) >= 0 ? (t.isub(r), o.isub(a)) : (r.isub(t), a.isub(o));
        }
        var h;
        return (h = 0 === t.cmpn(1) ? o : a).cmpn(0) < 0 && h.iadd(e), h;
      }, i.prototype.gcd = function(e) {
        if (this.isZero()) return e.abs();
        if (e.isZero()) return this.abs();
        var t = this.clone();
        var r = e.clone();
        t.negative = 0, r.negative = 0;
        for (var n = 0; t.isEven() && r.isEven(); n++) t.iushrn(1), r.iushrn(1);
        for (;;) {
          for (;t.isEven(); ) t.iushrn(1);
          for (;r.isEven(); ) r.iushrn(1);
          var o = t.cmp(r);
          if (o < 0) {
            var i = t;
            t = r, r = i;
          } else if (0 === o || 0 === r.cmpn(1)) break;
          t.isub(r);
        }
        return r.iushln(n);
      }, i.prototype.invm = function(e) {
        return this.egcd(e).a.umod(e);
      }, i.prototype.isEven = function() {
        return 0 == (1 & this.words[0]);
      }, i.prototype.isOdd = function() {
        return 1 == (1 & this.words[0]);
      }, i.prototype.andln = function(e) {
        return this.words[0] & e;
      }, i.prototype.bincn = function(e) {
        n('number' == typeof e);
        var t = e % 26;
        var r = (e - t) / 26;
        var o = 1 << t;
        if (this.length <= r) return this._expand(r + 1), this.words[r] |= o, this;
        var i = o;
        for (var a = r; 0 !== i && a < this.length; a++) {
          var s = 0 | this.words[a];
          i = (s += i) >>> 26, s &= 67108863, this.words[a] = s;
        }
        return 0 !== i && (this.words[a] = i, this.length++), this;
      }, i.prototype.isZero = function() {
        return 1 === this.length && 0 === this.words[0];
      }, i.prototype.cmpn = function(e) {
        var t = e < 0;
        if (0 !== this.negative && !t) return -1;
        if (0 === this.negative && t) return 1;
        var r;
        if (this.strip(), this.length > 1) r = 1; else {
          t && (e = -e), n(e <= 67108863, 'Number is too big');
          var o = 0 | this.words[0];
          r = o === e ? 0 : o < e ? -1 : 1;
        }
        return 0 !== this.negative ? 0 | -r : r;
      }, i.prototype.cmp = function(e) {
        if (0 !== this.negative && 0 === e.negative) return -1;
        if (0 === this.negative && 0 !== e.negative) return 1;
        var t = this.ucmp(e);
        return 0 !== this.negative ? 0 | -t : t;
      }, i.prototype.ucmp = function(e) {
        if (this.length > e.length) return 1;
        if (this.length < e.length) return -1;
        var t = 0;
        for (var r = this.length - 1; r >= 0; r--) {
          var n = 0 | this.words[r];
          var o = 0 | e.words[r];
          if (n !== o) {
            n < o ? t = -1 : n > o && (t = 1);
            break;
          }
        }
        return t;
      }, i.prototype.gtn = function(e) {
        return 1 === this.cmpn(e);
      }, i.prototype.gt = function(e) {
        return 1 === this.cmp(e);
      }, i.prototype.gten = function(e) {
        return this.cmpn(e) >= 0;
      }, i.prototype.gte = function(e) {
        return this.cmp(e) >= 0;
      }, i.prototype.ltn = function(e) {
        return -1 === this.cmpn(e);
      }, i.prototype.lt = function(e) {
        return -1 === this.cmp(e);
      }, i.prototype.lten = function(e) {
        return this.cmpn(e) <= 0;
      }, i.prototype.lte = function(e) {
        return this.cmp(e) <= 0;
      }, i.prototype.eqn = function(e) {
        return 0 === this.cmpn(e);
      }, i.prototype.eq = function(e) {
        return 0 === this.cmp(e);
      }, i.red = function(e) {
        return new x(e);
      }, i.prototype.toRed = function(e) {
        return n(!this.red, 'Already a number in reduction context'), n(0 === this.negative, 'red works only with positives'), e.convertTo(this)._forceRed(e);
      }, i.prototype.fromRed = function() {
        return n(this.red, 'fromRed works only with numbers in reduction context'), this.red.convertFrom(this);
      }, i.prototype._forceRed = function(e) {
        return this.red = e, this;
      }, i.prototype.forceRed = function(e) {
        return n(!this.red, 'Already a number in reduction context'), this._forceRed(e);
      }, i.prototype.redAdd = function(e) {
        return n(this.red, 'redAdd works only with red numbers'), this.red.add(this, e);
      }, i.prototype.redIAdd = function(e) {
        return n(this.red, 'redIAdd works only with red numbers'), this.red.iadd(this, e);
      }, i.prototype.redSub = function(e) {
        return n(this.red, 'redSub works only with red numbers'), this.red.sub(this, e);
      }, i.prototype.redISub = function(e) {
        return n(this.red, 'redISub works only with red numbers'), this.red.isub(this, e);
      }, i.prototype.redShl = function(e) {
        return n(this.red, 'redShl works only with red numbers'), this.red.shl(this, e);
      }, i.prototype.redMul = function(e) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, e), this.red.mul(this, e);
      }, i.prototype.redIMul = function(e) {
        return n(this.red, 'redMul works only with red numbers'), this.red._verify2(this, e), this.red.imul(this, e);
      }, i.prototype.redSqr = function() {
        return n(this.red, 'redSqr works only with red numbers'), this.red._verify1(this), this.red.sqr(this);
      }, i.prototype.redISqr = function() {
        return n(this.red, 'redISqr works only with red numbers'), this.red._verify1(this), this.red.isqr(this);
      }, i.prototype.redSqrt = function() {
        return n(this.red, 'redSqrt works only with red numbers'), this.red._verify1(this), this.red.sqrt(this);
      }, i.prototype.redInvm = function() {
        return n(this.red, 'redInvm works only with red numbers'), this.red._verify1(this), this.red.invm(this);
      }, i.prototype.redNeg = function() {
        return n(this.red, 'redNeg works only with red numbers'), this.red._verify1(this), this.red.neg(this);
      }, i.prototype.redPow = function(e) {
        return n(this.red && !e.red, 'redPow(normalNum)'), this.red._verify1(this), this.red.pow(this, e);
      };
      var g = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function m(e, t) {
        this.name = e, this.p = new i(t, 16), this.n = this.p.bitLength(), this.k = new i(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      function y() {
        m.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      function _() {
        m.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      function w() {
        m.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      function b() {
        m.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      function x(e) {
        if ('string' == typeof e) {
          var t = i._prime(e);
          this.m = t.p, this.prime = t;
        } else n(e.gtn(1), 'modulus must be greater than 1'), this.m = e, this.prime = null;
      }
      function k(e) {
        x.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new i(1).iushln(this.shift), 
        this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), 
        this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      m.prototype._tmp = function() {
        var e = new i(null);
        return e.words = new Array(Math.ceil(this.n / 13)), e;
      }, m.prototype.ireduce = function(e) {
        var t = e;
        var r;
        do {
          this.split(t, this.tmp), r = (t = (t = this.imulK(t)).iadd(this.tmp)).bitLength();
        } while (r > this.n);
        var n = r < this.n ? -1 : t.ucmp(this.p);
        return 0 === n ? (t.words[0] = 0, t.length = 1) : n > 0 ? t.isub(this.p) : t.strip(), t;
      }, m.prototype.split = function(e, t) {
        e.iushrn(this.n, 0, t);
      }, m.prototype.imulK = function(e) {
        return e.imul(this.k);
      }, o(y, m), y.prototype.split = function(e, t) {
        var r = 4194303;
        var n = Math.min(e.length, 9);
        for (var o = 0; o < n; o++) t.words[o] = e.words[o];
        if (t.length = n, e.length <= 9) return e.words[0] = 0, void (e.length = 1);
        var i = e.words[9];
        for (t.words[t.length++] = i & r, o = 10; o < e.length; o++) {
          var a = 0 | e.words[o];
          e.words[o - 10] = (a & r) << 4 | i >>> 22, i = a;
        }
        i >>>= 22, e.words[o - 10] = i, 0 === i && e.length > 10 ? e.length -= 10 : e.length -= 9;
      }, y.prototype.imulK = function(e) {
        e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;
        var t = 0;
        for (var r = 0; r < e.length; r++) {
          var n = 0 | e.words[r];
          t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);
        }
        return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;
      }, o(_, m), o(w, m), o(b, m), b.prototype.imulK = function(e) {
        var t = 0;
        for (var r = 0; r < e.length; r++) {
          var n = 19 * (0 | e.words[r]) + t;
          var o = 67108863 & n;
          n >>>= 26, e.words[r] = o, t = n;
        }
        return 0 !== t && (e.words[e.length++] = t), e;
      }, i._prime = function(e) {
        if (g[e]) return g[e];
        var t;
        if ('k256' === e) t = new y; else if ('p224' === e) t = new _; else if ('p192' === e) t = new w; else {
          if ('p25519' !== e) throw new Error('Unknown prime ' + e);
          t = new b;
        }
        return g[e] = t, t;
      }, x.prototype._verify1 = function(e) {
        n(0 === e.negative, 'red works only with positives'), n(e.red, 'red works only with red numbers');
      }, x.prototype._verify2 = function(e, t) {
        n(0 == (e.negative | t.negative), 'red works only with positives'), n(e.red && e.red === t.red, 'red works only with red numbers');
      }, x.prototype.imod = function(e) {
        return this.prime ? this.prime.ireduce(e)._forceRed(this) : e.umod(this.m)._forceRed(this);
      }, x.prototype.neg = function(e) {
        return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);
      }, x.prototype.add = function(e, t) {
        this._verify2(e, t);
        var r = e.add(t);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
      }, x.prototype.iadd = function(e, t) {
        this._verify2(e, t);
        var r = e.iadd(t);
        return r.cmp(this.m) >= 0 && r.isub(this.m), r;
      }, x.prototype.sub = function(e, t) {
        this._verify2(e, t);
        var r = e.sub(t);
        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
      }, x.prototype.isub = function(e, t) {
        this._verify2(e, t);
        var r = e.isub(t);
        return r.cmpn(0) < 0 && r.iadd(this.m), r;
      }, x.prototype.shl = function(e, t) {
        return this._verify1(e), this.imod(e.ushln(t));
      }, x.prototype.imul = function(e, t) {
        return this._verify2(e, t), this.imod(e.imul(t));
      }, x.prototype.mul = function(e, t) {
        return this._verify2(e, t), this.imod(e.mul(t));
      }, x.prototype.isqr = function(e) {
        return this.imul(e, e.clone());
      }, x.prototype.sqr = function(e) {
        return this.mul(e, e);
      }, x.prototype.sqrt = function(e) {
        if (e.isZero()) return e.clone();
        var t = this.m.andln(3);
        if (n(t % 2 == 1), 3 === t) {
          var r = this.m.add(new i(1)).iushrn(2);
          return this.pow(e, r);
        }
        var o = this.m.subn(1);
        var a = 0;
        for (;!o.isZero() && 0 === o.andln(1); ) a++, o.iushrn(1);
        n(!o.isZero());
        var s = new i(1).toRed(this);
        var c = s.redNeg();
        var u = this.m.subn(1).iushrn(1);
        var l = this.m.bitLength();
        for (l = new i(2 * l * l).toRed(this); 0 !== this.pow(l, u).cmp(c); ) l.redIAdd(c);
        var f = this.pow(l, o);
        var h = this.pow(e, o.addn(1).iushrn(1));
        var d = this.pow(e, o);
        var p = a;
        for (;0 !== d.cmp(s); ) {
          var v = d;
          for (var g = 0; 0 !== v.cmp(s); g++) v = v.redSqr();
          n(g < p);
          var m = this.pow(f, new i(1).iushln(p - g - 1));
          h = h.redMul(m), f = m.redSqr(), d = d.redMul(f), p = g;
        }
        return h;
      }, x.prototype.invm = function(e) {
        var t = e._invmp(this.m);
        return 0 !== t.negative ? (t.negative = 0, this.imod(t).redNeg()) : this.imod(t);
      }, x.prototype.pow = function(e, t) {
        if (t.isZero()) return new i(1).toRed(this);
        if (0 === t.cmpn(1)) return e.clone();
        var r = new Array(16);
        r[0] = new i(1).toRed(this), r[1] = e;
        for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], e);
        var o = r[0];
        var a = 0;
        var s = 0;
        var c = t.bitLength() % 26;
        for (0 === c && (c = 26), n = t.length - 1; n >= 0; n--) {
          var u = t.words[n];
          for (var l = c - 1; l >= 0; l--) {
            var f = u >> l & 1;
            o !== r[0] && (o = this.sqr(o)), 0 !== f || 0 !== a ? (a <<= 1, a |= f, (4 === ++s || 0 === n && 0 === l) && (o = this.mul(o, r[a]), 
            s = 0, a = 0)) : s = 0;
          }
          c = 26;
        }
        return o;
      }, x.prototype.convertTo = function(e) {
        var t = e.umod(this.m);
        return t === e ? t.clone() : t;
      }, x.prototype.convertFrom = function(e) {
        var t = e.clone();
        return t.red = null, t;
      }, i.mont = function(e) {
        return new k(e);
      }, o(k, x), k.prototype.convertTo = function(e) {
        return this.imod(e.ushln(this.shift));
      }, k.prototype.convertFrom = function(e) {
        var t = this.imod(e.mul(this.rinv));
        return t.red = null, t;
      }, k.prototype.imul = function(e, t) {
        if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;
        var r = e.imul(t);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var o = r.isub(n).iushrn(this.shift);
        var i = o;
        return o.cmp(this.m) >= 0 ? i = o.isub(this.m) : o.cmpn(0) < 0 && (i = o.iadd(this.m)), i._forceRed(this);
      }, k.prototype.mul = function(e, t) {
        if (e.isZero() || t.isZero()) return new i(0)._forceRed(this);
        var r = e.mul(t);
        var n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var o = r.isub(n).iushrn(this.shift);
        var a = o;
        return o.cmp(this.m) >= 0 ? a = o.isub(this.m) : o.cmpn(0) < 0 && (a = o.iadd(this.m)), a._forceRed(this);
      }, k.prototype.invm = function(e) {
        return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);
      };
    }(e = r.nmd(e), this);
  },
  66151: (e, t, r) => {
    "use strict";
    const n = r(2507);
    const o = r(44020);
    const i = r(80500);
    function a(e) {
      if ('string' != typeof e || 1 !== e.length) throw new TypeError('arrayFormatSeparator must be single character string');
    }
    function s(e, t) {
      return t.encode ? t.strict ? n(e) : encodeURIComponent(e) : e;
    }
    function c(e, t) {
      return t.decode ? o(e) : e;
    }
    function u(e) {
      return Array.isArray(e) ? e.sort() : 'object' == typeof e ? u(Object.keys(e)).sort(((e, t) => Number(e) - Number(t))).map((t => e[t])) : e;
    }
    function l(e) {
      const t = e.indexOf('#');
      return -1 !== t && (e = e.slice(0, t)), e;
    }
    function f(e) {
      const t = (e = l(e)).indexOf('?');
      return -1 === t ? '' : e.slice(t + 1);
    }
    function h(e, t) {
      return t.parseNumbers && !Number.isNaN(Number(e)) && 'string' == typeof e && '' !== e.trim() ? e = Number(e) : !t.parseBooleans || null === e || 'true' !== e.toLowerCase() && 'false' !== e.toLowerCase() || (e = 'true' === e.toLowerCase()), 
      e;
    }
    function d(e, t) {
      a((t = Object.assign({
        decode: !0,
        sort: !0,
        arrayFormat: 'none',
        arrayFormatSeparator: ',',
        parseNumbers: !1,
        parseBooleans: !1
      }, t)).arrayFormatSeparator);
      const r = function(e) {
        let t;
        switch (e.arrayFormat) {
         case 'index':
          return (e, r, n) => {
            t = /\[(\d*)\]$/.exec(e), e = e.replace(/\[\d*\]$/, ''), t ? (void 0 === n[e] && (n[e] = {}), n[e][t[1]] = r) : n[e] = r;
          };

         case 'bracket':
          return (e, r, n) => {
            t = /(\[\])$/.exec(e), e = e.replace(/\[\]$/, ''), t ? void 0 !== n[e] ? n[e] = [].concat(n[e], r) : n[e] = [ r ] : n[e] = r;
          };

         case 'comma':
         case 'separator':
          return (t, r, n) => {
            const o = 'string' == typeof r && r.split('').indexOf(e.arrayFormatSeparator) > -1 ? r.split(e.arrayFormatSeparator).map((t => c(t, e))) : null === r ? r : c(r, e);
            n[t] = o;
          };

         default:
          return (e, t, r) => {
            void 0 !== r[e] ? r[e] = [].concat(r[e], t) : r[e] = t;
          };
        }
      }(t);
      const n = Object.create(null);
      if ('string' != typeof e) return n;
      if (!(e = e.trim().replace(/^[?#&]/, ''))) return n;
      for (const o of e.split('&')) {
        let [e, a] = i(t.decode ? o.replace(/\+/g, ' ') : o, '=');
        a = void 0 === a ? null : [ 'comma', 'separator' ].includes(t.arrayFormat) ? a : c(a, t), r(c(e, t), a, n);
      }
      for (const o of Object.keys(n)) {
        const e = n[o];
        if ('object' == typeof e && null !== e) for (const r of Object.keys(e)) e[r] = h(e[r], t); else n[o] = h(e, t);
      }
      return !1 === t.sort ? n : (!0 === t.sort ? Object.keys(n).sort() : Object.keys(n).sort(t.sort)).reduce(((e, t) => {
        const r = n[t];
        return Boolean(r) && 'object' == typeof r && !Array.isArray(r) ? e[t] = u(r) : e[t] = r, e;
      }), Object.create(null));
    }
    t.extract = f, t.parse = d, t.stringify = (e, t) => {
      if (!e) return '';
      a((t = Object.assign({
        encode: !0,
        strict: !0,
        arrayFormat: 'none',
        arrayFormatSeparator: ','
      }, t)).arrayFormatSeparator);
      const r = r => t.skipNull && (e => null == e)(e[r]) || t.skipEmptyString && '' === e[r];
      const n = function(e) {
        switch (e.arrayFormat) {
         case 'index':
          return t => (r, n) => {
            const o = r.length;
            return void 0 === n || e.skipNull && null === n || e.skipEmptyString && '' === n ? r : null === n ? [ ...r, [ s(t, e), '[', o, ']' ].join('') ] : [ ...r, [ s(t, e), '[', s(o, e), ']=', s(n, e) ].join('') ];
          };

         case 'bracket':
          return t => (r, n) => void 0 === n || e.skipNull && null === n || e.skipEmptyString && '' === n ? r : null === n ? [ ...r, [ s(t, e), '[]' ].join('') ] : [ ...r, [ s(t, e), '[]=', s(n, e) ].join('') ];

         case 'comma':
         case 'separator':
          return t => (r, n) => null == n || 0 === n.length ? r : 0 === r.length ? [ [ s(t, e), '=', s(n, e) ].join('') ] : [ [ r, s(n, e) ].join(e.arrayFormatSeparator) ];

         default:
          return t => (r, n) => void 0 === n || e.skipNull && null === n || e.skipEmptyString && '' === n ? r : null === n ? [ ...r, s(t, e) ] : [ ...r, [ s(t, e), '=', s(n, e) ].join('') ];
        }
      }(t);
      const o = {};
      for (const a of Object.keys(e)) r(a) || (o[a] = e[a]);
      const i = Object.keys(o);
      return !1 !== t.sort && i.sort(t.sort), i.map((r => {
        const o = e[r];
        return void 0 === o ? '' : null === o ? s(r, t) : Array.isArray(o) ? o.reduce(n(r), []).join('&') : s(r, t) + '=' + s(o, t);
      })).filter((e => e.length > 0)).join('&');
    }, t.parseUrl = (e, t) => {
      t = Object.assign({
        decode: !0
      }, t);
      const [r, n] = i(e, '#');
      return Object.assign({
        url: r.split('?')[0] || '',
        query: d(f(e), t)
      }, t && t.parseFragmentIdentifier && n ? {
        fragmentIdentifier: c(n, t)
      } : {});
    }, t.stringifyUrl = (e, r) => {
      r = Object.assign({
        encode: !0,
        strict: !0
      }, r);
      const n = l(e.url).split('?')[0] || '';
      const o = t.extract(e.url);
      const i = t.parse(o, {
        sort: !1
      });
      const a = Object.assign(i, e.query);
      let c = t.stringify(a, r);
      c && (c = `?${c}`);
      let u = function(e) {
        let t = '';
        const r = e.indexOf('#');
        return -1 !== r && (t = e.slice(r)), t;
      }(e.url);
      return e.fragmentIdentifier && (u = `#${s(e.fragmentIdentifier, r)}`), `${n}${c}${u}`;
    };
  },
  2507: e => {
    "use strict";
    e.exports = e => encodeURIComponent(e).replace(/[!'()*]/g, (e => `%${e.charCodeAt(0).toString(16).toUpperCase()}`));
  },
  58823: (e, t, r) => {
    const n = r(27664);
    const o = r(36097);
    const i = [ void 0, null, '<nil>' ];
    e.exports = function(e = {}) {
      const {blockTracker: t} = e;
      if (!t) throw new Error('createBlockCacheMiddleware - No BlockTracker specified');
      const r = new a;
      const i = {
        perma: r,
        block: r,
        fork: r
      };
      return o((async (e, o, a) => {
        if (e.skipCache) return a();
        const s = n.cacheTypeForPayload(e);
        const c = i[s];
        if (!c) return a();
        if (!c.canCacheRequest(e)) return a();
        let u = n.blockTagForPayload(e);
        let l;
        if (u || (u = 'latest'), 'earliest' === u) l = '0x00'; else if ('latest' === u) {
          const e = await t.getLatestBlock();
          r.clearBefore(e), l = e;
        } else l = u;
        const f = await c.get(e, l);
        void 0 === f ? (await a(), await c.set(e, l, o.result)) : o.result = f;
      }));
    };
    class a {
      constructor() {
        this.cache = {};
      }
      getBlockCacheForPayload(e, t) {
        const r = Number.parseInt(t, 16);
        let n = this.cache[r];
        if (!n) {
          const e = {};
          this.cache[r] = e, n = e;
        }
        return n;
      }
      async get(e, t) {
        const r = this.getBlockCacheForPayload(e, t);
        if (!r) return;
        return r[n.cacheIdentifierForPayload(e, !0)];
      }
      async set(e, t, r) {
        if (!this.canCacheResult(e, r)) return;
        this.getBlockCacheForPayload(e, t)[n.cacheIdentifierForPayload(e, !0)] = r;
      }
      canCacheRequest(e) {
        if (!n.canCache(e)) return !1;
        return 'pending' !== n.blockTagForPayload(e);
      }
      canCacheResult(e, t) {
        if (!i.includes(t)) return !!(![ 'eth_getTransactionByHash', 'eth_getTransactionReceipt' ].includes(e.method) || t && t.blockHash && '0x0000000000000000000000000000000000000000000000000000000000000000' !== t.blockHash);
      }
      clearBefore(e) {
        const t = this;
        const r = Number.parseInt(e, 16);
        Object.keys(t.cache).map(Number).filter((e => e < r)).forEach((e => delete t.cache[e]));
      }
    }
  },
  27664: (e, t, r) => {
    const n = r(67266);
    function o(e) {
      return 'never' !== s(e);
    }
    function i(e) {
      const t = a(e);
      return t >= e.params.length ? e.params : 'eth_getBlockByNumber' === e.method ? e.params.slice(1) : e.params.slice(0, t);
    }
    function a(e) {
      switch (e.method) {
       case 'eth_getStorageAt':
        return 2;

       case 'eth_getBalance':
       case 'eth_getCode':
       case 'eth_getTransactionCount':
       case 'eth_call':
        return 1;

       case 'eth_getBlockByNumber':
        return 0;

       default:
        return;
      }
    }
    function s(e) {
      switch (e.method) {
       case 'web3_clientVersion':
       case 'web3_sha3':
       case 'eth_protocolVersion':
       case 'eth_getBlockTransactionCountByHash':
       case 'eth_getUncleCountByBlockHash':
       case 'eth_getCode':
       case 'eth_getBlockByHash':
       case 'eth_getTransactionByHash':
       case 'eth_getTransactionByBlockHashAndIndex':
       case 'eth_getTransactionReceipt':
       case 'eth_getUncleByBlockHashAndIndex':
       case 'eth_getCompilers':
       case 'eth_compileLLL':
       case 'eth_compileSolidity':
       case 'eth_compileSerpent':
       case 'shh_version':
       case 'test_permaCache':
        return 'perma';

       case 'eth_getBlockByNumber':
       case 'eth_getBlockTransactionCountByNumber':
       case 'eth_getUncleCountByBlockNumber':
       case 'eth_getTransactionByBlockNumberAndIndex':
       case 'eth_getUncleByBlockNumberAndIndex':
       case 'test_forkCache':
        return 'fork';

       case 'eth_gasPrice':
       case 'eth_blockNumber':
       case 'eth_getBalance':
       case 'eth_getStorageAt':
       case 'eth_getTransactionCount':
       case 'eth_call':
       case 'eth_estimateGas':
       case 'eth_getFilterLogs':
       case 'eth_getLogs':
       case 'test_blockCache':
        return 'block';

       case 'net_version':
       case 'net_peerCount':
       case 'net_listening':
       case 'eth_syncing':
       case 'eth_sign':
       case 'eth_coinbase':
       case 'eth_mining':
       case 'eth_hashrate':
       case 'eth_accounts':
       case 'eth_sendTransaction':
       case 'eth_sendRawTransaction':
       case 'eth_newFilter':
       case 'eth_newBlockFilter':
       case 'eth_newPendingTransactionFilter':
       case 'eth_uninstallFilter':
       case 'eth_getFilterChanges':
       case 'eth_getWork':
       case 'eth_submitWork':
       case 'eth_submitHashrate':
       case 'db_putString':
       case 'db_getString':
       case 'db_putHex':
       case 'db_getHex':
       case 'shh_post':
       case 'shh_newIdentity':
       case 'shh_hasIdentity':
       case 'shh_newGroup':
       case 'shh_addToGroup':
       case 'shh_newFilter':
       case 'shh_uninstallFilter':
       case 'shh_getFilterChanges':
       case 'shh_getMessages':
       case 'test_neverCache':
        return 'never';
      }
    }
    e.exports = {
      cacheIdentifierForPayload: function(e, t) {
        const r = t ? i(e) : e.params;
        return o(e) ? e.method + ':' + n(r) : null;
      },
      canCache: o,
      blockTagForPayload: function(e) {
        let t = a(e);
        if (t >= e.params.length) return null;
        return e.params[t];
      },
      paramsWithoutBlockTag: i,
      blockTagParamIndex: a,
      cacheTypeForPayload: s
    };
  },
  36097: e => {
    e.exports = function(e) {
      return (t, r, n, o) => {
        let i;
        const a = new Promise((e => {
          i = e;
        }));
        let s, c;
        e(t, r, (async () => {
          c = !0, n((e => {
            s = e, i();
          })), await a;
        })).then((async () => {
          c ? (await a, s(null)) : o(null);
        })).catch((e => {
          s ? s(e) : o(e);
        }));
      };
    };
  },
  50356: (e, t, r) => {
    var n = r(25108);
    const o = r(17187).EventEmitter;
    const i = r(89539).inherits;
    const a = r(21964);
    const s = r(75012);
    const c = r(94005);
    const u = r(94282);
    const l = r(43421);
    r(7585);
    const f = r(83262);
    const h = function() {};
    function d(e) {
      const t = this;
      o.call(t), t.setMaxListeners(30), e = e || {};
      const r = {
        sendAsync: t._handleAsync.bind(t)
      };
      const n = e.blockTrackerProvider || r;
      t._blockTracker = e.blockTracker || new s({
        provider: n,
        pollingInterval: e.pollingInterval || 4e3,
        setSkipCacheFlag: !0
      }), t._ready = new l, t.currentBlock = null, t._providers = [];
    }
    e.exports = d, i(d, o), d.prototype.start = function(e = h) {
      const t = this;
      t._ready.go(), t._blockTracker.on('latest', (e => {
        t._getBlockByNumberWithRetry(e, ((e, r) => {
          if (e) return void this.emit('error', e);
          if (!r) return n.log(r), void this.emit('error', new Error("Could not find block"));
          const o = function(e) {
            return {
              number: a.toBuffer(e.number),
              hash: a.toBuffer(e.hash),
              parentHash: a.toBuffer(e.parentHash),
              nonce: a.toBuffer(e.nonce),
              mixHash: a.toBuffer(e.mixHash),
              sha3Uncles: a.toBuffer(e.sha3Uncles),
              logsBloom: a.toBuffer(e.logsBloom),
              transactionsRoot: a.toBuffer(e.transactionsRoot),
              stateRoot: a.toBuffer(e.stateRoot),
              receiptsRoot: a.toBuffer(e.receiptRoot || e.receiptsRoot),
              miner: a.toBuffer(e.miner),
              difficulty: a.toBuffer(e.difficulty),
              totalDifficulty: a.toBuffer(e.totalDifficulty),
              size: a.toBuffer(e.size),
              extraData: a.toBuffer(e.extraData),
              gasLimit: a.toBuffer(e.gasLimit),
              gasUsed: a.toBuffer(e.gasUsed),
              timestamp: a.toBuffer(e.timestamp),
              transactions: e.transactions
            };
          }(r);
          t._setCurrentBlock(o), t.emit('rawBlock', r), t.emit('latest', r);
        }));
      })), t._blockTracker.on('sync', t.emit.bind(t, 'sync')), t._blockTracker.on('error', t.emit.bind(t, 'error')), t._running = !0, 
      t.emit('start');
    }, d.prototype.stop = function() {
      const e = this;
      e._blockTracker.removeAllListeners(), e._running = !1, e.emit('stop');
    }, d.prototype.isRunning = function() {
      return this._running;
    }, d.prototype.addProvider = function(e, t) {
      const r = this;
      'number' == typeof t ? r._providers.splice(t, 0, e) : r._providers.push(e), e.setEngine(this);
    }, d.prototype.removeProvider = function(e) {
      const t = this._providers.indexOf(e);
      if (t < 0) throw new Error('Provider not found.');
      this._providers.splice(t, 1);
    }, d.prototype.send = function(e) {
      throw new Error('Web3ProviderEngine does not support synchronous requests.');
    }, d.prototype.sendAsync = function(e, t) {
      const r = this;
      r._ready.await((function() {
        Array.isArray(e) ? c(e, r._handleAsync.bind(r), t) : r._handleAsync(e, t);
      }));
    }, d.prototype._getBlockByNumberWithRetry = function(e, t) {
      const r = this;
      let n = 5;
      return void o();
      function o() {
        r._getBlockByNumber(e, i);
      }
      function i(e, r) {
        return e ? t(e) : r ? void t(null, r) : n > 0 ? (n--, void setTimeout((function() {
          o();
        }), 1e3)) : void t(null, null);
      }
    }, d.prototype._getBlockByNumber = function(e, t) {
      const r = f({
        method: 'eth_getBlockByNumber',
        params: [ e, !1 ],
        skipCache: !0
      });
      this._handleAsync(r, ((e, r) => e ? t(e) : t(null, r.result)));
    }, d.prototype._handleAsync = function(e, t) {
      var r = this;
      var n = -1;
      var o = null;
      var i = null;
      var a = [];
      function s(r, n) {
        i = r, o = n, u(a, (function(e, t) {
          e ? e(i, o, t) : t();
        }), (function() {
          var r = {
            id: e.id,
            jsonrpc: e.jsonrpc,
            result: o
          };
          null != i ? (r.error = {
            message: i.stack || i.message || i,
            code: -32e3
          }, t(i, r)) : t(null, r);
        }));
      }
      !function t(o) {
        if (n += 1, a.unshift(o), n >= r._providers.length) s(new Error('Request for method "' + e.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.')); else try {
          r._providers[n].handleRequest(e, t, s);
        } catch (i) {
          s(i);
        }
      }();
    }, d.prototype._setCurrentBlock = function(e) {
      this.currentBlock = e, this.emit('block', e);
    };
  },
  47467: (e, t, r) => {
    const n = r(22033);
    const o = r(58823);
    e.exports = class extends n {
      constructor(e) {
        super((({blockTracker: t}) => o(Object.assign({
          blockTracker: t
        }, e))));
      }
    };
  },
  13730: (e, t, r) => {
    const n = r(22033);
    const o = r(98406);
    e.exports = class extends n {
      constructor() {
        super((({blockTracker: e, provider: t, engine: r}) => o({
          blockTracker: e,
          provider: t
        })));
      }
    };
  },
  96185: (e, t, r) => {
    const n = r(89539).inherits;
    const o = r(13450);
    function i(e) {
      e = e || {}, this.staticResponses = e;
    }
    e.exports = i, n(i, o), i.prototype.handleRequest = function(e, t, r) {
      var n = this.staticResponses[e.method];
      'function' == typeof n ? n(e, t, r) : void 0 !== n ? setTimeout((() => r(null, n))) : t();
    };
  },
  46319: (e, t, r) => {
    var n = r(25108);
    const o = r(7879);
    const i = r(80047);
    const a = r(89539).inherits;
    const s = r(21964);
    const c = r(2843);
    const u = r(47529);
    const l = r(80045);
    const f = r(13450);
    const h = r(36016);
    const d = /^[0-9A-Fa-f]+$/g;
    function p(e) {
      const t = this;
      t.nonceLock = l(1), e.getAccounts && (t.getAccounts = e.getAccounts), e.processTransaction && (t.processTransaction = e.processTransaction), 
      e.processMessage && (t.processMessage = e.processMessage), e.processPersonalMessage && (t.processPersonalMessage = e.processPersonalMessage), 
      e.processTypedMessage && (t.processTypedMessage = e.processTypedMessage), t.approveTransaction = e.approveTransaction || t.autoApprove, 
      t.approveMessage = e.approveMessage || t.autoApprove, t.approvePersonalMessage = e.approvePersonalMessage || t.autoApprove, 
      t.approveDecryptMessage = e.approveDecryptMessage || t.autoApprove, t.approveEncryptionPublicKey = e.approveEncryptionPublicKey || t.autoApprove, 
      t.approveTypedMessage = e.approveTypedMessage || t.autoApprove, e.signTransaction && (t.signTransaction = e.signTransaction || _('signTransaction')), 
      e.signMessage && (t.signMessage = e.signMessage || _('signMessage')), e.signPersonalMessage && (t.signPersonalMessage = e.signPersonalMessage || _('signPersonalMessage')), 
      e.decryptMessage && (t.decryptMessage = e.decryptMessage || _('decryptMessage')), e.encryptionPublicKey && (t.encryptionPublicKey = e.encryptionPublicKey || _('encryptionPublicKey')), 
      e.signTypedMessage && (t.signTypedMessage = e.signTypedMessage || _('signTypedMessage')), e.recoverPersonalSignature && (t.recoverPersonalSignature = e.recoverPersonalSignature), 
      e.publishTransaction && (t.publishTransaction = e.publishTransaction), t.estimateGas = e.estimateGas || t.estimateGas, t.getGasPrice = e.getGasPrice || t.getGasPrice;
    }
    function v(e) {
      return e.toLowerCase();
    }
    function g(e) {
      const t = s.addHexPrefix(e);
      return s.isValidAddress(t);
    }
    function m(e) {
      const t = s.addHexPrefix(e);
      return !s.isValidAddress(t) && y(e);
    }
    function y(e) {
      if (!('string' == typeof e)) return !1;
      if (!('0x' === e.slice(0, 2))) return !1;
      return e.slice(2).match(d);
    }
    function _(e) {
      return function(t, r) {
        r(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + e + '" fn in constructor options'));
      };
    }
    e.exports = p, a(p, f), p.prototype.handleRequest = function(e, t, r) {
      const i = this;
      let a, s, c;
      let l, f;
      switch (i._parityRequests = {}, i._parityRequestCount = 0, e.method) {
       case 'eth_coinbase':
        return void i.getAccounts((function(e, t) {
          if (e) return r(e);
          let n = t[0] || null;
          r(null, n);
        }));

       case 'eth_accounts':
        return void i.getAccounts((function(e, t) {
          if (e) return r(e);
          r(null, t);
        }));

       case 'eth_sendTransaction':
        return a = e.params[0], void o([ e => i.validateTransaction(a, e), e => i.processTransaction(a, e) ], r);

       case 'eth_signTransaction':
        return a = e.params[0], void o([ e => i.validateTransaction(a, e), e => i.processSignTransaction(a, e) ], r);

       case 'eth_sign':
        return f = e.params[0], l = e.params[1], c = e.params[2] || {}, s = u(c, {
          from: f,
          data: l
        }), void o([ e => i.validateMessage(s, e), e => i.processMessage(s, e) ], r);

       case 'personal_sign':
        return function() {
          const t = e.params[0];
          if (m(e.params[1]) && g(t)) {
            let t = "The eth_personalSign method requires params ordered ";
            t += "[message, address]. This was previously handled incorrectly, ", t += "and has been corrected automatically. ", t += "Please switch this param order for smooth behavior in the future.", 
            n.warn(t), f = e.params[0], l = e.params[1];
          } else l = e.params[0], f = e.params[1];
          c = e.params[2] || {}, s = u(c, {
            from: f,
            data: l
          }), o([ e => i.validatePersonalMessage(s, e), e => i.processPersonalMessage(s, e) ], r);
        }();

       case 'eth_decryptMessage':
        return function() {
          const t = e.params[0];
          if (m(e.params[1]) && g(t)) {
            let t = "The eth_decryptMessage method requires params ordered ";
            t += "[message, address]. This was previously handled incorrectly, ", t += "and has been corrected automatically. ", t += "Please switch this param order for smooth behavior in the future.", 
            n.warn(t), f = e.params[0], l = e.params[1];
          } else l = e.params[0], f = e.params[1];
          c = e.params[2] || {}, s = u(c, {
            from: f,
            data: l
          }), o([ e => i.validateDecryptMessage(s, e), e => i.processDecryptMessage(s, e) ], r);
        }();

       case 'encryption_public_key':
        return function() {
          const t = e.params[0];
          o([ e => i.validateEncryptionPublicKey(t, e), e => i.processEncryptionPublicKey(t, e) ], r);
        }();

       case 'personal_ecRecover':
        return function() {
          l = e.params[0];
          let t = e.params[1];
          c = e.params[2] || {}, s = u(c, {
            sig: t,
            data: l
          }), i.recoverPersonalSignature(s, r);
        }();

       case 'eth_signTypedData':
       case 'eth_signTypedData_v3':
       case 'eth_signTypedData_v4':
        return function() {
          const t = e.params[0];
          const n = e.params[1];
          g(t) ? (f = t, l = n) : (l = t, f = n), c = e.params[2] || {}, s = u(c, {
            from: f,
            data: l
          }), o([ e => i.validateTypedMessage(s, e), e => i.processTypedMessage(s, e) ], r);
        }();

       case 'parity_postTransaction':
        return a = e.params[0], void i.parityPostTransaction(a, r);

       case 'parity_postSign':
        return f = e.params[0], l = e.params[1], void i.parityPostSign(f, l, r);

       case 'parity_checkRequest':
        return function() {
          const t = e.params[0];
          i.parityCheckRequest(t, r);
        }();

       case 'parity_defaultAccount':
        return void i.getAccounts((function(e, t) {
          if (e) return r(e);
          const n = t[0] || null;
          r(null, n);
        }));

       default:
        return void t();
      }
    }, p.prototype.getAccounts = function(e) {
      e(null, []);
    }, p.prototype.processTransaction = function(e, t) {
      const r = this;
      o([ t => r.approveTransaction(e, t), (e, t) => r.checkApproval('transaction', e, t), t => r.finalizeAndSubmitTx(e, t) ], t);
    }, p.prototype.processSignTransaction = function(e, t) {
      const r = this;
      o([ t => r.approveTransaction(e, t), (e, t) => r.checkApproval('transaction', e, t), t => r.finalizeTx(e, t) ], t);
    }, p.prototype.processMessage = function(e, t) {
      const r = this;
      o([ t => r.approveMessage(e, t), (e, t) => r.checkApproval('message', e, t), t => r.signMessage(e, t) ], t);
    }, p.prototype.processPersonalMessage = function(e, t) {
      const r = this;
      o([ t => r.approvePersonalMessage(e, t), (e, t) => r.checkApproval('message', e, t), t => r.signPersonalMessage(e, t) ], t);
    }, p.prototype.processDecryptMessage = function(e, t) {
      const r = this;
      o([ t => r.approveDecryptMessage(e, t), (e, t) => r.checkApproval('decryptMessage', e, t), t => r.decryptMessage(e, t) ], t);
    }, p.prototype.processEncryptionPublicKey = function(e, t) {
      const r = this;
      o([ t => r.approveEncryptionPublicKey(e, t), (e, t) => r.checkApproval('encryptionPublicKey', e, t), t => r.encryptionPublicKey(e, t) ], t);
    }, p.prototype.processTypedMessage = function(e, t) {
      const r = this;
      o([ t => r.approveTypedMessage(e, t), (e, t) => r.checkApproval('message', e, t), t => r.signTypedMessage(e, t) ], t);
    }, p.prototype.autoApprove = function(e, t) {
      t(null, !0);
    }, p.prototype.checkApproval = function(e, t, r) {
      r(t ? null : new Error('User denied ' + e + ' signature.'));
    }, p.prototype.parityPostTransaction = function(e, t) {
      const r = this;
      const n = `0x${r._parityRequestCount.toString(16)}`;
      r._parityRequestCount++, r.emitPayload({
        method: 'eth_sendTransaction',
        params: [ e ]
      }, (function(e, t) {
        if (e) return void (r._parityRequests[n] = {
          error: e
        });
        const o = t.result;
        r._parityRequests[n] = o;
      })), t(null, n);
    }, p.prototype.parityPostSign = function(e, t, r) {
      const n = this;
      const o = `0x${n._parityRequestCount.toString(16)}`;
      n._parityRequestCount++, n.emitPayload({
        method: 'eth_sign',
        params: [ e, t ]
      }, (function(e, t) {
        if (e) return void (n._parityRequests[o] = {
          error: e
        });
        const r = t.result;
        n._parityRequests[o] = r;
      })), r(null, o);
    }, p.prototype.parityCheckRequest = function(e, t) {
      const r = this._parityRequests[e] || null;
      return r ? r.error ? t(r.error) : void t(null, r) : t(null, null);
    }, p.prototype.recoverPersonalSignature = function(e, t) {
      let r;
      try {
        r = c.recoverPersonalSignature(e);
      } catch (n) {
        return t(n);
      }
      t(null, r);
    }, p.prototype.validateTransaction = function(e, t) {
      if (void 0 === e.from) return t(new Error("Undefined address - from address required to sign transaction."));
      this.validateSender(e.from, (function(r, n) {
        return r ? t(r) : n ? void t() : t(new Error(`Unknown address - unable to sign transaction for this address: "${e.from}"`));
      }));
    }, p.prototype.validateMessage = function(e, t) {
      if (void 0 === e.from) return t(new Error("Undefined address - from address required to sign message."));
      this.validateSender(e.from, (function(r, n) {
        return r ? t(r) : n ? void t() : t(new Error(`Unknown address - unable to sign message for this address: "${e.from}"`));
      }));
    }, p.prototype.validatePersonalMessage = function(e, t) {
      return void 0 === e.from ? t(new Error("Undefined address - from address required to sign personal message.")) : void 0 === e.data ? t(new Error("Undefined message - message required to sign personal message.")) : y(e.data) ? void this.validateSender(e.from, (function(r, n) {
        return r ? t(r) : n ? void t() : t(new Error(`Unknown address - unable to sign message for this address: "${e.from}"`));
      })) : t(new Error("HookedWalletSubprovider - validateMessage - message was not encoded as hex."));
    }, p.prototype.validateDecryptMessage = function(e, t) {
      return void 0 === e.from ? t(new Error("Undefined address - from address required to decrypt message.")) : void 0 === e.data ? t(new Error("Undefined message - message required to decrypt message.")) : y(e.data) ? void this.validateSender(e.from, (function(r, n) {
        return r ? t(r) : n ? void t() : t(new Error(`Unknown address - unable to decrypt message for this address: "${e.from}"`));
      })) : t(new Error("HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex."));
    }, p.prototype.validateEncryptionPublicKey = function(e, t) {
      this.validateSender(e, (function(r, n) {
        return r ? t(r) : n ? void t() : t(new Error(`Unknown address - unable to obtain encryption public key for this address: "${e}"`));
      }));
    }, p.prototype.validateTypedMessage = function(e, t) {
      return void 0 === e.from ? t(new Error("Undefined address - from address required to sign typed data.")) : void 0 === e.data ? t(new Error("Undefined data - message required to sign typed data.")) : void this.validateSender(e.from, (function(r, n) {
        return r ? t(r) : n ? void t() : t(new Error(`Unknown address - unable to sign message for this address: "${e.from}"`));
      }));
    }, p.prototype.validateSender = function(e, t) {
      if (!e) return t(null, !1);
      this.getAccounts((function(r, n) {
        if (r) return t(r);
        const o = -1 !== n.map(v).indexOf(e.toLowerCase());
        t(null, o);
      }));
    }, p.prototype.finalizeAndSubmitTx = function(e, t) {
      const r = this;
      r.nonceLock.take((function() {
        o([ r.fillInTxExtras.bind(r, e), r.signTransaction.bind(r), r.publishTransaction.bind(r) ], (function(e, n) {
          if (r.nonceLock.leave(), e) return t(e);
          t(null, n);
        }));
      }));
    }, p.prototype.finalizeTx = function(e, t) {
      const r = this;
      r.nonceLock.take((function() {
        o([ r.fillInTxExtras.bind(r, e), r.signTransaction.bind(r) ], (function(n, o) {
          if (r.nonceLock.leave(), n) return t(n);
          t(null, {
            raw: o,
            tx: e
          });
        }));
      }));
    }, p.prototype.publishTransaction = function(e, t) {
      this.emitPayload({
        method: 'eth_sendRawTransaction',
        params: [ e ]
      }, (function(e, r) {
        if (e) return t(e);
        t(null, r.result);
      }));
    }, p.prototype.estimateGas = function(e, t) {
      h(this.engine, e, t);
    }, p.prototype.getGasPrice = function(e) {
      this.emitPayload({
        method: 'eth_gasPrice',
        params: []
      }, (function(t, r) {
        if (t) return e(t);
        e(null, r.result);
      }));
    }, p.prototype.fillInTxExtras = function(e, t) {
      const r = this;
      const n = e.from;
      const o = {};
      void 0 === e.gasPrice && (o.gasPrice = r.getGasPrice.bind(r)), void 0 === e.nonce && (o.nonce = r.emitPayload.bind(r, {
        method: 'eth_getTransactionCount',
        params: [ n, 'pending' ]
      })), void 0 === e.gas && (o.gas = r.estimateGas.bind(r, function(e) {
        return {
          from: e.from,
          to: e.to,
          value: e.value,
          data: e.data,
          gas: e.gas,
          gasPrice: e.gasPrice,
          nonce: e.nonce
        };
      }(e))), i(o, (function(r, n) {
        if (r) return t(r);
        const o = {};
        n.gasPrice && (o.gasPrice = n.gasPrice), n.nonce && (o.nonce = n.nonce.result), n.gas && (o.gas = n.gas), t(null, u(e, o));
      }));
    };
  },
  22033: (e, t, r) => {
    const n = r(13450);
    e.exports = class extends n {
      constructor(e) {
        if (super(), !e) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');
        this._constructorFn = e;
      }
      setEngine(e) {
        if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');
        const t = e._blockTracker;
        const r = this._constructorFn({
          engine: e,
          provider: e,
          blockTracker: t
        });
        if (!r) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');
        if ('function' != typeof r) throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');
        this.middleware = r;
      }
      handleRequest(e, t, r) {
        const n = {
          id: e.id
        };
        this.middleware(e, n, (function(e) {
          t(((t, r, o) => {
            t ? (delete n.result, n.error = {
              message: t.message || t
            }) : n.result = r, e ? e(o) : o();
          }));
        }), (function(e) {
          if (e) return r(e);
          r(null, n.result);
        }));
      }
    };
  },
  40803: (e, t, r) => {
    var n = r(48764).Buffer;
    const o = r(89539).inherits;
    const i = r(29847);
    const a = r(21964);
    const s = r(13450);
    const c = r(7585).blockTagForPayload;
    function u(e) {
      this.nonceCache = {};
    }
    e.exports = u, o(u, s), u.prototype.handleRequest = function(e, t, r) {
      const o = this;
      switch (e.method) {
       case 'eth_getTransactionCount':
        var s = c(e);
        var u = e.params[0].toLowerCase();
        var l = o.nonceCache[u];
        return void ('pending' === s ? l ? r(null, l) : t((function(e, t, r) {
          if (e) return r();
          void 0 === o.nonceCache[u] && (o.nonceCache[u] = t), r();
        })) : t());

       case 'eth_sendRawTransaction':
        return void t((function(t, r, s) {
          if (t) return s();
          var c = e.params[0];
          a.stripHexPrefix(c);
          n.from(a.stripHexPrefix(c), 'hex');
          var u = new i(n.from(a.stripHexPrefix(c), 'hex'));
          var l = '0x' + u.getSenderAddress().toString('hex').toLowerCase();
          var f = a.bufferToInt(u.nonce);
          var h = (++f).toString(16);
          h.length % 2 && (h = '0' + h), h = '0x' + h, o.nonceCache[l] = h, s();
        }));

       case 'evm_revert':
        return o.nonceCache = {}, void t();

       default:
        return void t();
      }
    };
  },
  13450: (e, t, r) => {
    const n = r(83262);
    function o() {}
    e.exports = o, o.prototype.setEngine = function(e) {
      const t = this;
      t.engine || (t.engine = e, e.on('block', (function(e) {
        t.currentBlock = e;
      })), e.on('start', (function() {
        t.start();
      })), e.on('stop', (function() {
        t.stop();
      })));
    }, o.prototype.handleRequest = function(e, t, r) {
      throw new Error('Subproviders should override `handleRequest`.');
    }, o.prototype.emitPayload = function(e, t) {
      this.engine.sendAsync(n(e), t);
    }, o.prototype.stop = function() {}, o.prototype.start = function() {};
  },
  90522: (e, t, r) => {
    const n = r(22033);
    const o = r(68961);
    e.exports = class extends n {
      constructor() {
        super((({blockTracker: e, provider: t, engine: r}) => {
          const {events: n, middleware: i} = o({
            blockTracker: e,
            provider: t
          });
          return n.on('notification', (e => r.emit('data', null, e))), i;
        }));
      }
    };
  },
  83262: (e, t, r) => {
    const n = r(90505);
    const o = r(47529);
    e.exports = function(e) {
      return o({
        id: n(),
        jsonrpc: '2.0',
        params: []
      }, e);
    };
  },
  36016: (e, t, r) => {
    const n = r(83262);
    e.exports = function(e, t, r) {
      e.sendAsync(n({
        method: 'eth_estimateGas',
        params: [ t ]
      }), (function(e, t) {
        if (e) return 'no contract code at given address' === e.message ? r(null, '0xcf08') : r(e);
        r(null, t.result);
      }));
    };
  },
  90505: e => {
    e.exports = function() {
      return Math.floor(Number.MAX_SAFE_INTEGER * Math.random());
    };
  },
  7585: (e, t, r) => {
    const n = r(67266);
    function o(e) {
      return 'never' !== s(e);
    }
    function i(e) {
      var t = a(e);
      return t >= e.params.length ? e.params : 'eth_getBlockByNumber' === e.method ? e.params.slice(1) : e.params.slice(0, t);
    }
    function a(e) {
      switch (e.method) {
       case 'eth_getStorageAt':
        return 2;

       case 'eth_getBalance':
       case 'eth_getCode':
       case 'eth_getTransactionCount':
       case 'eth_call':
       case 'eth_estimateGas':
        return 1;

       case 'eth_getBlockByNumber':
        return 0;

       default:
        return;
      }
    }
    function s(e) {
      switch (e.method) {
       case 'web3_clientVersion':
       case 'web3_sha3':
       case 'eth_protocolVersion':
       case 'eth_getBlockTransactionCountByHash':
       case 'eth_getUncleCountByBlockHash':
       case 'eth_getCode':
       case 'eth_getBlockByHash':
       case 'eth_getTransactionByHash':
       case 'eth_getTransactionByBlockHashAndIndex':
       case 'eth_getTransactionReceipt':
       case 'eth_getUncleByBlockHashAndIndex':
       case 'eth_getCompilers':
       case 'eth_compileLLL':
       case 'eth_compileSolidity':
       case 'eth_compileSerpent':
       case 'shh_version':
        return 'perma';

       case 'eth_getBlockByNumber':
       case 'eth_getBlockTransactionCountByNumber':
       case 'eth_getUncleCountByBlockNumber':
       case 'eth_getTransactionByBlockNumberAndIndex':
       case 'eth_getUncleByBlockNumberAndIndex':
        return 'fork';

       case 'eth_gasPrice':
       case 'eth_getBalance':
       case 'eth_getStorageAt':
       case 'eth_getTransactionCount':
       case 'eth_call':
       case 'eth_estimateGas':
       case 'eth_getFilterLogs':
       case 'eth_getLogs':
       case 'eth_blockNumber':
        return 'block';

       case 'net_version':
       case 'net_peerCount':
       case 'net_listening':
       case 'eth_syncing':
       case 'eth_sign':
       case 'eth_coinbase':
       case 'eth_mining':
       case 'eth_hashrate':
       case 'eth_accounts':
       case 'eth_sendTransaction':
       case 'eth_sendRawTransaction':
       case 'eth_newFilter':
       case 'eth_newBlockFilter':
       case 'eth_newPendingTransactionFilter':
       case 'eth_uninstallFilter':
       case 'eth_getFilterChanges':
       case 'eth_getWork':
       case 'eth_submitWork':
       case 'eth_submitHashrate':
       case 'db_putString':
       case 'db_getString':
       case 'db_putHex':
       case 'db_getHex':
       case 'shh_post':
       case 'shh_newIdentity':
       case 'shh_hasIdentity':
       case 'shh_newGroup':
       case 'shh_addToGroup':
       case 'shh_newFilter':
       case 'shh_uninstallFilter':
       case 'shh_getFilterChanges':
       case 'shh_getMessages':
        return 'never';
      }
    }
    e.exports = {
      cacheIdentifierForPayload: function(e, t = {}) {
        if (!o(e)) return null;
        const {includeBlockRef: r} = t;
        const a = r ? e.params : i(e);
        return e.method + ':' + n(a);
      },
      canCache: o,
      blockTagForPayload: function(e) {
        var t = a(e);
        if (t >= e.params.length) return null;
        return e.params[t];
      },
      paramsWithoutBlockTag: i,
      blockTagParamIndex: a,
      cacheTypeForPayload: s
    };
  },
  43421: (e, t, r) => {
    const n = r(17187).EventEmitter;
    const o = r(89539).inherits;
    function i() {
      n.call(this), this.isLocked = !0;
    }
    e.exports = i, o(i, n), i.prototype.go = function() {
      this.isLocked = !1, this.emit('unlock');
    }, i.prototype.stop = function() {
      this.isLocked = !0, this.emit('lock');
    }, i.prototype.await = function(e) {
      const t = this;
      t.isLocked ? t.once('unlock', e) : setTimeout(e);
    };
  },
  62873: (e, t) => {
    "use strict";
    function r(e) {
      let t;
      return "undefined" != typeof window && void 0 !== window[e] && (t = window[e]), t;
    }
    function n(e) {
      const t = r(e);
      if (!t) throw new Error(`${e} is not defined in Window`);
      return t;
    }
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.getLocalStorage = t.getLocalStorageOrThrow = t.getCrypto = t.getCryptoOrThrow = t.getLocation = t.getLocationOrThrow = t.getNavigator = t.getNavigatorOrThrow = t.getDocument = t.getDocumentOrThrow = t.getFromWindowOrThrow = t.getFromWindow = void 0, 
    t.getFromWindow = r, t.getFromWindowOrThrow = n, t.getDocumentOrThrow = function() {
      return n("document");
    }, t.getDocument = function() {
      return r("document");
    }, t.getNavigatorOrThrow = function() {
      return n("navigator");
    }, t.getNavigator = function() {
      return r("navigator");
    }, t.getLocationOrThrow = function() {
      return n("location");
    }, t.getLocation = function() {
      return r("location");
    }, t.getCryptoOrThrow = function() {
      return n("crypto");
    }, t.getCrypto = function() {
      return r("crypto");
    }, t.getLocalStorageOrThrow = function() {
      return n("localStorage");
    }, t.getLocalStorage = function() {
      return r("localStorage");
    };
  },
  65755: (e, t, r) => {
    "use strict";
    t.D = void 0;
    const n = r(62873);
    t.D = function() {
      let e;
      let t;
      try {
        e = n.getDocumentOrThrow(), t = n.getLocationOrThrow();
      } catch (i) {
        return null;
      }
      function r(...t) {
        const r = e.getElementsByTagName("meta");
        for (let e = 0; e < r.length; e++) {
          const n = r[e];
          const o = [ "itemprop", "property", "name" ].map((e => n.getAttribute(e))).filter((e => !!e && t.includes(e)));
          if (o.length && o) {
            const e = n.getAttribute("content");
            if (e) return e;
          }
        }
        return "";
      }
      const o = function() {
        let t = r("name", "og:site_name", "og:title", "twitter:title");
        return t || (t = e.title), t;
      }();
      return {
        description: function() {
          return r("description", "og:description", "twitter:description", "keywords");
        }(),
        url: t.origin,
        icons: function() {
          const r = e.getElementsByTagName("link");
          const n = [];
          for (let e = 0; e < r.length; e++) {
            const o = r[e];
            const i = o.getAttribute("rel");
            if (i && i.toLowerCase().indexOf("icon") > -1) {
              const e = o.getAttribute("href");
              if (e) if (-1 === e.toLowerCase().indexOf("https:") && -1 === e.toLowerCase().indexOf("http:") && 0 !== e.indexOf("//")) {
                let r = t.protocol + "//" + t.host;
                if (0 === e.indexOf("/")) r += e; else {
                  const n = t.pathname.split("/");
                  n.pop();
                  r += n.join("/") + "/" + e;
                }
                n.push(r);
              } else if (0 === e.indexOf("//")) {
                const r = t.protocol + e;
                n.push(r);
              } else n.push(e);
            }
          }
          return n;
        }(),
        name: o
      };
    };
  },
  85078: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = r(70655);
    var o = r(2403);
    var i = function() {
      function e() {
        this._semaphore = new o.default(1);
      }
      return e.prototype.acquire = function() {
        return n.__awaiter(this, void 0, void 0, (function() {
          var e;
          return n.__generator(this, (function(t) {
            switch (t.label) {
             case 0:
              return [ 4, this._semaphore.acquire() ];

             case 1:
              return e = t.sent(), [ 2, e[1] ];
            }
          }));
        }));
      }, e.prototype.runExclusive = function(e) {
        return this._semaphore.runExclusive((function() {
          return e();
        }));
      }, e.prototype.isLocked = function() {
        return this._semaphore.isLocked();
      }, e.prototype.release = function() {
        this._semaphore.release();
      }, e;
    }();
    t.default = i;
  },
  2403: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = r(70655);
    var o = function() {
      function e(e) {
        if (this._maxConcurrency = e, this._queue = [], e <= 0) throw new Error('semaphore must be initialized to a positive value');
        this._value = e;
      }
      return e.prototype.acquire = function() {
        var e = this;
        var t = this.isLocked();
        var r = new Promise((function(t) {
          return e._queue.push(t);
        }));
        return t || this._dispatch(), r;
      }, e.prototype.runExclusive = function(e) {
        return n.__awaiter(this, void 0, void 0, (function() {
          var t, r, o;
          return n.__generator(this, (function(n) {
            switch (n.label) {
             case 0:
              return [ 4, this.acquire() ];

             case 1:
              t = n.sent(), r = t[0], o = t[1], n.label = 2;

             case 2:
              return n.trys.push([ 2, , 4, 5 ]), [ 4, e(r) ];

             case 3:
              return [ 2, n.sent() ];

             case 4:
              return o(), [ 7 ];

             case 5:
              return [ 2 ];
            }
          }));
        }));
      }, e.prototype.isLocked = function() {
        return this._value <= 0;
      }, e.prototype.release = function() {
        if (this._maxConcurrency > 1) throw new Error('this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead');
        if (this._currentReleaser) {
          var e = this._currentReleaser;
          this._currentReleaser = void 0, e();
        }
      }, e.prototype._dispatch = function() {
        var e = this;
        var t = this._queue.shift();
        if (t) {
          var r = !1;
          this._currentReleaser = function() {
            r || (r = !0, e._value++, e._dispatch());
          }, t([ this._value--, this._currentReleaser ]);
        }
      }, e;
    }();
    t.default = o;
  },
  48125: (e, t, r) => {
    "use strict";
    t.WU = void 0;
    var n = r(85078);
    Object.defineProperty(t, "WU", {
      enumerable: !0,
      get: function() {
        return n.default;
      }
    });
    var o = r(2403);
    var i = r(41960);
  },
  41960: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.withTimeout = void 0;
    var n = r(70655);
    t.withTimeout = function(e, t, r) {
      var o = this;
      return void 0 === r && (r = new Error('timeout')), {
        acquire: function() {
          return new Promise((function(i, a) {
            return n.__awaiter(o, void 0, void 0, (function() {
              var o, s;
              return n.__generator(this, (function(n) {
                switch (n.label) {
                 case 0:
                  return o = !1, setTimeout((function() {
                    o = !0, a(r);
                  }), t), [ 4, e.acquire() ];

                 case 1:
                  return s = n.sent(), o ? (Array.isArray(s) ? s[1] : s)() : i(s), [ 2 ];
                }
              }));
            }));
          }));
        },
        runExclusive: function(e) {
          return n.__awaiter(this, void 0, void 0, (function() {
            var t, r;
            return n.__generator(this, (function(n) {
              switch (n.label) {
               case 0:
                t = function() {}, n.label = 1;

               case 1:
                return n.trys.push([ 1, , 7, 8 ]), [ 4, this.acquire() ];

               case 2:
                return r = n.sent(), Array.isArray(r) ? (t = r[1], [ 4, e(r[0]) ]) : [ 3, 4 ];

               case 3:
                return [ 2, n.sent() ];

               case 4:
                return t = r, [ 4, e() ];

               case 5:
                return [ 2, n.sent() ];

               case 6:
                return [ 3, 8 ];

               case 7:
                return t(), [ 7 ];

               case 8:
                return [ 2 ];
              }
            }));
          }));
        },
        release: function() {
          e.release();
        },
        isLocked: function() {
          return e.isLocked();
        }
      };
    };
  },
  44409: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      return (0, o.default)((function(t, r) {
        var o;
        try {
          o = e.apply(this, t);
        } catch (i) {
          return r(i);
        }
        (0, n.default)(o) && 'function' == typeof o.then ? o.then((function(e) {
          s(r, null, e);
        }), (function(e) {
          s(r, e.message ? e : new Error(e));
        })) : r(null, o);
      }));
    };
    var n = a(r(13218));
    var o = a(r(43519));
    var i = a(r(3111));
    function a(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    function s(e, t, r) {
      try {
        e(t, r);
      } catch (n) {
        (0, i.default)(c, n);
      }
    }
    function c(e) {
      throw e;
    }
    e.exports = t.default;
  },
  14338: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t, r, a) {
      (0, n.default)(t)(e, (0, o.default)((0, i.default)(r)), a);
    };
    var n = a(r(56954));
    var o = a(r(36529));
    var i = a(r(28993));
    function a(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  71846: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t, r) {
      ((0, n.default)(e) ? h : d)(e, (0, l.default)(t), r);
    };
    var n = f(r(98612));
    var o = f(r(1605));
    var i = f(r(97388));
    var a = f(r(53875));
    var s = f(r(50308));
    var c = f(r(46979));
    var u = f(r(13362));
    var l = f(r(28993));
    function f(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    function h(e, t, r) {
      r = (0, c.default)(r || s.default);
      var n = 0, i = 0, a = e.length;
      function l(e, t) {
        e ? r(e) : ++i !== a && t !== o.default || r(null);
      }
      for (0 === a && r(null); n < a; n++) t(e[n], n, (0, u.default)(l));
    }
    var d = (0, a.default)(i.default, Infinity);
    e.exports = t.default;
  },
  97388: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t, r, i) {
      (0, n.default)(t)(e, (0, o.default)(r), i);
    };
    var n = i(r(56954));
    var o = i(r(28993));
    function i(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  94282: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = i(r(14338));
    var o = i(r(53875));
    function i(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    t.default = (0, o.default)(n.default, 1), e.exports = t.default;
  },
  1605: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = {}, e.exports = t.default;
  },
  53875: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t) {
      return function(r, n, o) {
        return e(r, t, n, o);
      };
    }, e.exports = t.default;
  },
  68468: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      return function(t, r, i) {
        return e(n.default, t, (0, o.default)(r), i);
      };
    };
    var n = i(r(71846));
    var o = i(r(28993));
    function i(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  56954: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      return function(t, r, c) {
        if (c = (0, o.default)(c || n.default), e <= 0 || !t) return c(null);
        var u = (0, i.default)(t);
        var l = !1;
        var f = 0;
        var h = !1;
        function d(e, t) {
          if (f -= 1, e) l = !0, c(e); else {
            if (t === s.default || l && f <= 0) return l = !0, c(null);
            h || p();
          }
        }
        function p() {
          for (h = !0; f < e && !l; ) {
            var t = u();
            if (null === t) return l = !0, void (f <= 0 && c(null));
            f += 1, r(t.value, t.key, (0, a.default)(d));
          }
          h = !1;
        }
        p();
      };
    };
    var n = c(r(50308));
    var o = c(r(46979));
    var i = c(r(9733));
    var a = c(r(13362));
    var s = c(r(1605));
    function c(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  37818: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      return r && e[r] && e[r]();
    };
    var r = 'function' == typeof Symbol && Symbol.iterator;
    e.exports = t.default;
  },
  43519: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      return function() {
        var t = (0, n.default)(arguments);
        var r = t.pop();
        e.call(this, t, r);
      };
    };
    var n = function(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }(r(63033));
    e.exports = t.default;
  },
  9733: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      if ((0, n.default)(e)) return function(e) {
        var t = -1;
        var r = e.length;
        return function() {
          return ++t < r ? {
            value: e[t],
            key: t
          } : null;
        };
      }(e);
      var t = (0, o.default)(e);
      return t ? function(e) {
        var t = -1;
        return function() {
          var r = e.next();
          return r.done ? null : (t++, {
            value: r.value,
            key: t
          });
        };
      }(t) : function(e) {
        var t = (0, i.default)(e);
        var r = -1;
        var n = t.length;
        return function() {
          var o = t[++r];
          return r < n ? {
            value: e[o],
            key: o
          } : null;
        };
      }(e);
    };
    var n = a(r(98612));
    var o = a(r(37818));
    var i = a(r(3674));
    function a(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  47662: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t, r, i) {
      i = i || n.default, t = t || [];
      var a = [];
      var s = 0;
      var c = (0, o.default)(r);
      e(t, (function(e, t, r) {
        var n = s++;
        c(e, (function(e, t) {
          a[n] = t, r(e);
        }));
      }), (function(e) {
        i(e, a);
      }));
    };
    var n = i(r(50308));
    var o = i(r(28993));
    function i(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  46979: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      return function() {
        if (null !== e) {
          var t = e;
          e = null, t.apply(this, arguments);
        }
      };
    }, e.exports = t.default;
  },
  13362: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      return function() {
        if (null === e) throw new Error("Callback was already called.");
        var t = e;
        e = null, t.apply(this, arguments);
      };
    }, e.exports = t.default;
  },
  73409: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t, r) {
      r = r || n.default;
      var s = (0, o.default)(t) ? [] : {};
      e(t, (function(e, t, r) {
        (0, a.default)(e)((function(e, n) {
          arguments.length > 2 && (n = (0, i.default)(arguments, 1)), s[t] = n, r(e);
        }));
      }), (function(e) {
        r(e, s);
      }));
    };
    var n = s(r(50308));
    var o = s(r(98612));
    var i = s(r(63033));
    var a = s(r(28993));
    function s(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  3111: (e, t, r) => {
    "use strict";
    var n = r(34155);
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.hasNextTick = t.hasSetImmediate = void 0, t.fallback = s, t.wrap = c;
    var o = function(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }(r(63033));
    var i = t.hasSetImmediate = 'function' == typeof setImmediate && setImmediate;
    var a = t.hasNextTick = 'object' == typeof n && 'function' == typeof n.nextTick;
    function s(e) {
      setTimeout(e, 0);
    }
    function c(e) {
      return function(t) {
        var r = (0, o.default)(arguments, 1);
        e((function() {
          t.apply(null, r);
        }));
      };
    }
    var u;
    u = i ? setImmediate : a ? n.nextTick : s, t.default = c(u);
  },
  63033: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t) {
      t |= 0;
      var r = Math.max(e.length - t, 0);
      var n = Array(r);
      for (var o = 0; o < r; o++) n[o] = e[t + o];
      return n;
    }, e.exports = t.default;
  },
  36529: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e) {
      return function(t, r, n) {
        return e(t, n);
      };
    }, e.exports = t.default;
  },
  28993: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.isAsync = void 0;
    var n = function(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }(r(44409));
    var o = 'function' == typeof Symbol;
    function i(e) {
      return o && 'AsyncFunction' === e[Symbol.toStringTag];
    }
    t.default = function(e) {
      return i(e) ? (0, n.default)(e) : e;
    }, t.isAsync = i;
  },
  94005: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = i(r(68468));
    var o = i(r(47662));
    function i(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    t.default = (0, n.default)(o.default), e.exports = t.default;
  },
  80047: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t) {
      (0, o.default)(n.default, e, t);
    };
    var n = i(r(71846));
    var o = i(r(73409));
    function i(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  7879: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = function(e, t) {
      if (t = (0, i.default)(t || o.default), !(0, n.default)(e)) return t(new Error('First argument to waterfall must be an array of functions'));
      if (!e.length) return t();
      var r = 0;
      function u(t) {
        var n = (0, c.default)(e[r++]);
        t.push((0, s.default)(l)), n.apply(null, t);
      }
      function l(n) {
        if (n || r === e.length) return t.apply(null, arguments);
        u((0, a.default)(arguments, 1));
      }
      u([]);
    };
    var n = u(r(1469));
    var o = u(r(50308));
    var i = u(r(46979));
    var a = u(r(63033));
    var s = u(r(13362));
    var c = u(r(28993));
    function u(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    e.exports = t.default;
  },
  20640: (e, t, r) => {
    "use strict";
    var n = r(25108);
    var o = r(11742);
    var i = {
      "text/plain": "Text",
      "text/html": "Url",
      default: "Text"
    };
    e.exports = function(e, t) {
      var r, a, s, c, u, l, f = !1;
      t || (t = {}), r = t.debug || !1;
      try {
        if (s = o(), c = document.createRange(), u = document.getSelection(), (l = document.createElement("span")).textContent = e, 
        l.style.all = "unset", l.style.position = "fixed", l.style.top = 0, l.style.clip = "rect(0, 0, 0, 0)", l.style.whiteSpace = "pre", 
        l.style.webkitUserSelect = "text", l.style.MozUserSelect = "text", l.style.msUserSelect = "text", l.style.userSelect = "text", 
        l.addEventListener("copy", (function(o) {
          if (o.stopPropagation(), t.format) if (o.preventDefault(), void 0 === o.clipboardData) {
            r && n.warn("unable to use e.clipboardData"), r && n.warn("trying IE specific stuff"), window.clipboardData.clearData();
            var a = i[t.format] || i.default;
            window.clipboardData.setData(a, e);
          } else o.clipboardData.clearData(), o.clipboardData.setData(t.format, e);
          t.onCopy && (o.preventDefault(), t.onCopy(o.clipboardData));
        })), document.body.appendChild(l), c.selectNodeContents(l), u.addRange(c), !document.execCommand("copy")) throw new Error("copy command was unsuccessful");
        f = !0;
      } catch (h) {
        r && n.error("unable to copy using execCommand: ", h), r && n.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(t.format || "text", e), t.onCopy && t.onCopy(window.clipboardData), f = !0;
        } catch (h) {
          r && n.error("unable to copy using clipboardData: ", h), r && n.error("falling back to prompt"), a = function(e) {
            var t = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
            return e.replace(/#{\s*key\s*}/g, t);
          }("message" in t ? t.message : "Copy to clipboard: #{key}, Enter"), window.prompt(a, e);
        }
      } finally {
        u && ("function" == typeof u.removeRange ? u.removeRange(c) : u.removeAllRanges()), l && document.body.removeChild(l), s();
      }
      return f;
    };
  },
  65987: e => {
    "use strict";
    var t = {
      single_source_shortest_paths: function(e, r, n) {
        var o = {};
        var i = {};
        i[r] = 0;
        var a = t.PriorityQueue.make();
        var s, c, u, l, f, h, d;
        for (a.push(r, 0); !a.empty(); ) for (u in c = (s = a.pop()).value, l = s.cost, f = e[c] || {}) f.hasOwnProperty(u) && (h = l + f[u], 
        d = i[u], (void 0 === i[u] || d > h) && (i[u] = h, a.push(u, h), o[u] = c));
        if (void 0 !== n && void 0 === i[n]) {
          var p = [ 'Could not find a path from ', r, ' to ', n, '.' ].join('');
          throw new Error(p);
        }
        return o;
      },
      extract_shortest_path_from_predecessor_list: function(e, t) {
        var r = [];
        var n = t;
        for (;n; ) r.push(n), e[n], n = e[n];
        return r.reverse(), r;
      },
      find_path: function(e, r, n) {
        var o = t.single_source_shortest_paths(e, r, n);
        return t.extract_shortest_path_from_predecessor_list(o, n);
      },
      PriorityQueue: {
        make: function(e) {
          var r, n = t.PriorityQueue, o = {};
          for (r in e = e || {}, n) n.hasOwnProperty(r) && (o[r] = n[r]);
          return o.queue = [], o.sorter = e.sorter || n.default_sorter, o;
        },
        default_sorter: function(e, t) {
          return e.cost - t.cost;
        },
        push: function(e, t) {
          var r = {
            value: e,
            cost: t
          };
          this.queue.push(r), this.queue.sort(this.sorter);
        },
        pop: function() {
          return this.queue.shift();
        },
        empty: function() {
          return 0 === this.queue.length;
        }
      }
    };
    e.exports = t;
  },
  53786: e => {
    "use strict";
    const t = (e, t) => function() {
      const r = t.promiseModule;
      const n = new Array(arguments.length);
      for (let e = 0; e < arguments.length; e++) n[e] = arguments[e];
      return new r(((r, o) => {
        t.errorFirst ? n.push((function(e, n) {
          if (t.multiArgs) {
            const t = new Array(arguments.length - 1);
            for (let e = 1; e < arguments.length; e++) t[e - 1] = arguments[e];
            e ? (t.unshift(e), o(t)) : r(t);
          } else e ? o(e) : r(n);
        })) : n.push((function(e) {
          if (t.multiArgs) {
            const e = new Array(arguments.length - 1);
            for (let t = 0; t < arguments.length; t++) e[t] = arguments[t];
            r(e);
          } else r(e);
        })), e.apply(this, n);
      }));
    };
    e.exports = (e, r) => {
      r = Object.assign({
        exclude: [ /.+(Sync|Stream)$/ ],
        errorFirst: !0,
        promiseModule: Promise
      }, r);
      const n = e => {
        const t = t => 'string' == typeof t ? e === t : t.test(e);
        return r.include ? r.include.some(t) : !r.exclude.some(t);
      };
      let o;
      o = 'function' == typeof e ? function() {
        return r.excludeMain ? e.apply(this, arguments) : t(e, r).apply(this, arguments);
      } : Object.create(Object.getPrototypeOf(e));
      for (const i in e) {
        const a = e[i];
        o[i] = 'function' == typeof a && n(i) ? t(a, r) : a;
      }
      return o;
    };
  },
  55850: (e, t, r) => {
    r(75682);
    r(53786);
    const n = r(37253);
    const o = (e, t) => e + t;
    const i = [ 'sync', 'latest' ];
    function a(e) {
      return Number.parseInt(e, 16);
    }
    e.exports = class extends n {
      constructor(e = {}) {
        super(), this._blockResetDuration = e.blockResetDuration || 2e4, this._blockResetTimeout, this._currentBlock = null, this._isRunning = !1, 
        this._onNewListener = this._onNewListener.bind(this), this._onRemoveListener = this._onRemoveListener.bind(this), this._resetCurrentBlock = this._resetCurrentBlock.bind(this), 
        this._setupInternalEvents();
      }
      isRunning() {
        return this._isRunning;
      }
      getCurrentBlock() {
        return this._currentBlock;
      }
      async getLatestBlock() {
        if (this._currentBlock) return this._currentBlock;
        return await new Promise((e => this.once('latest', e)));
      }
      removeAllListeners(e) {
        e ? super.removeAllListeners(e) : super.removeAllListeners(), this._setupInternalEvents(), this._onRemoveListener();
      }
      _start() {}
      _end() {}
      _setupInternalEvents() {
        this.removeListener('newListener', this._onNewListener), this.removeListener('removeListener', this._onRemoveListener), 
        this.on('newListener', this._onNewListener), this.on('removeListener', this._onRemoveListener);
      }
      _onNewListener(e, t) {
        i.includes(e) && this._maybeStart();
      }
      _onRemoveListener(e, t) {
        this._getBlockTrackerEventCount() > 0 || this._maybeEnd();
      }
      _maybeStart() {
        this._isRunning || (this._isRunning = !0, this._cancelBlockResetTimeout(), this._start());
      }
      _maybeEnd() {
        this._isRunning && (this._isRunning = !1, this._setupBlockResetTimeout(), this._end());
      }
      _getBlockTrackerEventCount() {
        return i.map((e => this.listenerCount(e))).reduce(o);
      }
      _newPotentialLatest(e) {
        const t = this._currentBlock;
        t && a(e) <= a(t) || this._setCurrentBlock(e);
      }
      _setCurrentBlock(e) {
        const t = this._currentBlock;
        this._currentBlock = e, this.emit('latest', e), this.emit('sync', {
          oldBlock: t,
          newBlock: e
        });
      }
      _setupBlockResetTimeout() {
        this._cancelBlockResetTimeout(), this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration), 
        this._blockResetTimeout.unref && this._blockResetTimeout.unref();
      }
      _cancelBlockResetTimeout() {
        clearTimeout(this._blockResetTimeout);
      }
      _resetCurrentBlock() {
        this._currentBlock = null;
      }
    };
  },
  75012: (e, t, r) => {
    var n = r(25108);
    const o = r(53786);
    const i = r(55850);
    function a(e, t) {
      return new Promise((r => {
        const n = setTimeout(r, e);
        n.unref && t && n.unref();
      }));
    }
    e.exports = class extends i {
      constructor(e = {}) {
        if (!e.provider) throw new Error('PollingBlockTracker - no provider specified.');
        const t = e.pollingInterval || 2e4;
        const r = e.retryTimeout || t / 10;
        const n = void 0 === e.keepEventLoopActive || e.keepEventLoopActive;
        const o = e.setSkipCacheFlag || !1;
        super(Object.assign({
          blockResetDuration: t
        }, e)), this._provider = e.provider, this._pollingInterval = t, this._retryTimeout = r, this._keepEventLoopActive = n, this._setSkipCacheFlag = o;
      }
      async checkForLatestBlock() {
        return await this._updateLatestBlock(), await this.getLatestBlock();
      }
      _start() {
        this._performSync().catch((e => this.emit('error', e)));
      }
      async _performSync() {
        for (;this._isRunning; ) try {
          await this._updateLatestBlock(), await a(this._pollingInterval, !this._keepEventLoopActive);
        } catch (e) {
          const r = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${e.stack}`);
          try {
            this.emit('error', r);
          } catch (t) {
            n.error(r);
          }
          await a(this._retryTimeout, !this._keepEventLoopActive);
        }
      }
      async _updateLatestBlock() {
        const e = await this._fetchLatestBlock();
        this._newPotentialLatest(e);
      }
      async _fetchLatestBlock() {
        const e = {
          jsonrpc: "2.0",
          id: 1,
          method: 'eth_blockNumber',
          params: []
        };
        this._setSkipCacheFlag && (e.skipCache = !0);
        const t = await o((t => this._provider.sendAsync(e, t)))();
        if (t.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${t.error}`);
        return t.result;
      }
    };
  },
  23256: (e, t, r) => {
    const n = r(76622);
    e.exports = class extends n {
      constructor() {
        super(), this.allResults = [];
      }
      async update() {
        throw new Error('BaseFilterWithHistory - no update method specified');
      }
      addResults(e) {
        this.allResults = this.allResults.concat(e), super.addResults(e);
      }
      addInitialResults(e) {
        this.allResults = this.allResults.concat(e), super.addInitialResults(e);
      }
      getAllResults() {
        return this.allResults;
      }
    };
  },
  76622: (e, t, r) => {
    const n = r(19394).default;
    e.exports = class extends n {
      constructor() {
        super(), this.updates = [];
      }
      async initialize() {}
      async update() {
        throw new Error('BaseFilter - no update method specified');
      }
      addResults(e) {
        this.updates = this.updates.concat(e), e.forEach((e => this.emit('update', e)));
      }
      addInitialResults(e) {}
      getChangesAndClear() {
        const e = this.updates;
        return this.updates = [], e;
      }
    };
  },
  72785: (e, t, r) => {
    const n = r(76622);
    const o = r(40207);
    const {incrementHexInt: i} = r(98112);
    e.exports = class extends n {
      constructor({provider: e, params: t}) {
        super(), this.type = 'block', this.provider = e;
      }
      async update({oldBlock: e, newBlock: t}) {
        const r = t;
        const n = i(e);
        const a = (await o({
          provider: this.provider,
          fromBlock: n,
          toBlock: r
        })).map((e => e.hash));
        this.addResults(a);
      }
    };
  },
  40207: e => {
    function t(e) {
      return null == e ? e : Number.parseInt(e, 16);
    }
    function r(e) {
      if (null == e) return e;
      return '0x' + e.toString(16);
    }
    e.exports = async function({provider: e, fromBlock: n, toBlock: o}) {
      n || (n = o);
      const i = t(n);
      const a = t(o);
      const s = Array(a - i + 1).fill().map(((e, t) => i + t)).map(r);
      return await Promise.all(s.map((t => function(e, t, r) {
        return new Promise(((n, o) => {
          e.sendAsync({
            id: 1,
            jsonrpc: '2.0',
            method: t,
            params: r
          }, ((e, t) => {
            if (e) return o(e);
            n(t.result);
          }));
        }));
      }(e, 'eth_getBlockByNumber', [ t, !1 ]))));
    };
  },
  98112: e => {
    function t(e) {
      return e.sort(((e, t) => 'latest' === e || 'earliest' === t ? 1 : 'latest' === t || 'earliest' === e ? -1 : r(e) - r(t)));
    }
    function r(e) {
      return null == e ? e : Number.parseInt(e, 16);
    }
    function n(e) {
      if (null == e) return e;
      let t = e.toString(16);
      return t.length % 2 && (t = '0' + t), '0x' + t;
    }
    function o() {
      return Math.floor(16 * Math.random()).toString(16);
    }
    e.exports = {
      minBlockRef: function(...e) {
        return t(e)[0];
      },
      maxBlockRef: function(...e) {
        const r = t(e);
        return r[r.length - 1];
      },
      sortBlockRefs: t,
      bnToHex: function(e) {
        return '0x' + e.toString(16);
      },
      blockRefIsNumber: function(e) {
        return e && ![ 'earliest', 'latest', 'pending' ].includes(e);
      },
      hexToInt: r,
      incrementHexInt: function(e) {
        if (null == e) return e;
        return n(r(e) + 1);
      },
      intToHex: n,
      unsafeRandomBytes: function(e) {
        let t = '0x';
        for (let r = 0; r < e; r++) t += o(), t += o();
        return t;
      }
    };
  },
  98406: (e, t, r) => {
    var n = r(25108);
    const o = r(48125).WU;
    const {createAsyncMiddleware: i} = r(88625);
    const a = r(73541);
    const s = r(81663);
    const c = r(72785);
    const u = r(25792);
    const {intToHex: l, hexToInt: f} = r(98112);
    function h(e) {
      return d((async (...t) => {
        const r = await e(...t);
        return l(r.id);
      }));
    }
    function d(e) {
      return i((async (t, r) => {
        const n = await e.apply(null, t.params);
        r.result = n;
      }));
    }
    function p(e, t) {
      const r = [];
      for (let n in e) r.push(e[n]);
      return r;
    }
    e.exports = function({blockTracker: e, provider: t}) {
      let r = 0;
      let i = {};
      const v = new o;
      const g = function({mutex: e}) {
        return t => async (r, n, o, i) => {
          (await e.acquire())(), t(r, n, o, i);
        };
      }({
        mutex: v
      });
      const m = a({
        eth_newFilter: g(h(_)),
        eth_newBlockFilter: g(h(w)),
        eth_newPendingTransactionFilter: g(h(b)),
        eth_uninstallFilter: g(d(M)),
        eth_getFilterChanges: g(d(x)),
        eth_getFilterLogs: g(d(k))
      });
      const y = async ({oldBlock: e, newBlock: t}) => {
        if (0 === i.length) return;
        const r = await v.acquire();
        try {
          await Promise.all(p(i).map((async r => {
            try {
              await r.update({
                oldBlock: e,
                newBlock: t
              });
            } catch (o) {
              n.error(o);
            }
          })));
        } catch (o) {
          n.error(o);
        }
        r();
      };
      return m.newLogFilter = _, m.newBlockFilter = w, m.newPendingTransactionFilter = b, m.uninstallFilter = M, m.getFilterChanges = x, 
      m.getFilterLogs = k, m.destroy = () => {
        !async function() {
          const e = p(i).length;
          i = {}, A({
            prevFilterCount: e,
            newFilterCount: 0
          });
        }();
      }, m;
      async function _(e) {
        const r = new s({
          provider: t,
          params: e
        });
        await E(r);
        return r;
      }
      async function w() {
        const e = new c({
          provider: t
        });
        await E(e);
        return e;
      }
      async function b() {
        const e = new u({
          provider: t
        });
        await E(e);
        return e;
      }
      async function x(e) {
        const t = f(e);
        const r = i[t];
        if (!r) throw new Error(`No filter for index "${t}"`);
        return r.getChangesAndClear();
      }
      async function k(e) {
        const t = f(e);
        const r = i[t];
        if (!r) throw new Error(`No filter for index "${t}"`);
        return 'log' === r.type ? results = r.getAllResults() : results = [], results;
      }
      async function M(e) {
        const t = f(e);
        const r = i[t];
        const n = Boolean(r);
        return n && await async function(e) {
          const t = p(i).length;
          delete i[e];
          const r = p(i).length;
          A({
            prevFilterCount: t,
            newFilterCount: r
          });
        }(t), n;
      }
      async function E(t) {
        const n = p(i).length;
        const o = await e.getLatestBlock();
        await t.initialize({
          currentBlock: o
        }), r++, i[r] = t, t.id = r, t.idHex = l(r);
        return A({
          prevFilterCount: n,
          newFilterCount: p(i).length
        }), r;
      }
      function A({prevFilterCount: t, newFilterCount: r}) {
        0 === t && r > 0 ? e.on('sync', y) : t > 0 && 0 === r && e.removeListener('sync', y);
      }
    };
  },
  81663: (e, t, r) => {
    const n = r(75682);
    const o = r(6417);
    const i = r(23256);
    const {bnToHex: a, hexToInt: s, incrementHexInt: c, minBlockRef: u, blockRefIsNumber: l} = r(98112);
    e.exports = class extends i {
      constructor({provider: e, params: t}) {
        super(), this.type = 'log', this.ethQuery = new n(e), this.params = Object.assign({
          fromBlock: 'latest',
          toBlock: 'latest',
          address: void 0,
          topics: []
        }, t), this.params.address && (Array.isArray(this.params.address) || (this.params.address = [ this.params.address ]), this.params.address = this.params.address.map((e => e.toLowerCase())));
      }
      async initialize({currentBlock: e}) {
        let t = this.params.fromBlock;
        [ 'latest', 'pending' ].includes(t) && (t = e), 'earliest' === t && (t = '0x0'), this.params.fromBlock = t;
        const r = u(this.params.toBlock, e);
        const n = Object.assign({}, this.params, {
          toBlock: r
        });
        const o = await this._fetchLogs(n);
        this.addInitialResults(o);
      }
      async update({oldBlock: e, newBlock: t}) {
        const r = t;
        let n;
        n = e ? c(e) : t;
        const o = Object.assign({}, this.params, {
          fromBlock: n,
          toBlock: r
        });
        const i = (await this._fetchLogs(o)).filter((e => this.matchLog(e)));
        this.addResults(i);
      }
      async _fetchLogs(e) {
        return await o((t => this.ethQuery.getLogs(e, t)))();
      }
      matchLog(e) {
        if (s(this.params.fromBlock) >= s(e.blockNumber)) return !1;
        if (l(this.params.toBlock) && s(this.params.toBlock) <= s(e.blockNumber)) return !1;
        const t = e.address && e.address.toLowerCase();
        if (this.params.address && t && !this.params.address.includes(t)) return !1;
        return this.params.topics.every(((t, r) => {
          let n = e.topics[r];
          if (!n) return !1;
          n = n.toLowerCase();
          let o = Array.isArray(t) ? t : [ t ];
          if (o.includes(null)) return !0;
          o = o.map((e => e.toLowerCase()));
          return o.includes(n);
        }));
      }
    };
  },
  72601: e => {
    e.exports = function(e) {
      return (t, r, n, o) => {
        const i = e[t.method];
        return void 0 === i ? n() : 'function' == typeof i ? i(t, r, n, o) : (r.result = i, o());
      };
    };
  },
  73541: (e, t, r) => {
    e.exports = r(72601);
  },
  6417: e => {
    "use strict";
    const t = (e, t, r, n) => function(...o) {
      return new (0, t.promiseModule)(((i, a) => {
        t.multiArgs ? o.push(((...e) => {
          t.errorFirst ? e[0] ? a(e) : (e.shift(), i(e)) : i(e);
        })) : t.errorFirst ? o.push(((e, t) => {
          e ? a(e) : i(t);
        })) : o.push(i);
        const s = this === r ? n : this;
        Reflect.apply(e, s, o);
      }));
    };
    const r = new WeakMap;
    e.exports = (e, n) => {
      n = {
        exclude: [ /.+(?:Sync|Stream)$/ ],
        errorFirst: !0,
        promiseModule: Promise,
        ...n
      };
      const o = typeof e;
      if (null === e || 'object' !== o && 'function' !== o) throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${null === e ? 'null' : o}\``);
      const i = new WeakMap;
      const a = new Proxy(e, {
        apply(e, r, o) {
          const s = i.get(e);
          if (s) return Reflect.apply(s, r, o);
          const c = n.excludeMain ? e : t(e, n, a, e);
          return i.set(e, c), Reflect.apply(c, r, o);
        },
        get(e, o) {
          const s = e[o];
          if (!((e, t) => {
            let o = r.get(e);
            if (o || (o = {}, r.set(e, o)), t in o) return o[t];
            const i = e => 'string' == typeof e || 'symbol' == typeof t ? t === e : e.test(t);
            const a = Reflect.getOwnPropertyDescriptor(e, t);
            const s = void 0 === a || a.writable || a.configurable;
            const c = (n.include ? n.include.some(i) : !n.exclude.some(i)) && s;
            return o[t] = c, c;
          })(e, o) || s === Function.prototype[o]) return s;
          const c = i.get(s);
          if (c) return c;
          if ('function' == typeof s) {
            const r = t(s, n, a, e);
            return i.set(s, r), r;
          }
          return s;
        }
      });
      return a;
    };
  },
  68961: (e, t, r) => {
    const n = r(19394).default;
    const o = r(73541);
    const {createAsyncMiddleware: i} = r(88625);
    const a = r(98406);
    const {unsafeRandomBytes: s, incrementHexInt: c} = r(98112);
    const u = r(40207);
    function l(e) {
      return {
        hash: e.hash,
        parentHash: e.parentHash,
        sha3Uncles: e.sha3Uncles,
        miner: e.miner,
        stateRoot: e.stateRoot,
        transactionsRoot: e.transactionsRoot,
        receiptsRoot: e.receiptsRoot,
        logsBloom: e.logsBloom,
        difficulty: e.difficulty,
        number: e.number,
        gasLimit: e.gasLimit,
        gasUsed: e.gasUsed,
        nonce: e.nonce,
        mixHash: e.mixHash,
        timestamp: e.timestamp,
        extraData: e.extraData
      };
    }
    e.exports = function({blockTracker: e, provider: t}) {
      const r = {};
      const f = a({
        blockTracker: e,
        provider: t
      });
      let h = !1;
      const d = new n;
      const p = o({
        eth_subscribe: i((async function(n, o) {
          if (h) throw new Error('SubscriptionManager - attempting to use after destroying');
          const i = n.params[0];
          const a = s(16);
          let d;
          switch (i) {
           case 'newHeads':
            d = p({
              subId: a
            });
            break;

           case 'logs':
            const e = n.params[1];
            d = g({
              subId: a,
              filter: await f.newLogFilter(e)
            });
            break;

           default:
            throw new Error(`SubscriptionManager - unsupported subscription type "${i}"`);
          }
          return r[a] = d, void (o.result = a);
          function p({subId: r}) {
            const n = {
              type: i,
              destroy: async () => {
                e.removeListener('sync', n.update);
              },
              update: async ({oldBlock: e, newBlock: n}) => {
                const o = n;
                const i = c(e);
                (await u({
                  provider: t,
                  fromBlock: i,
                  toBlock: o
                })).map(l).forEach((e => {
                  v(r, e);
                }));
              }
            };
            return e.on('sync', n.update), n;
          }
          function g({subId: e, filter: t}) {
            t.on('update', (t => v(e, t)));
            return {
              type: i,
              destroy: async () => await f.uninstallFilter(t.idHex)
            };
          }
        })),
        eth_unsubscribe: i((async function(e, t) {
          if (h) throw new Error('SubscriptionManager - attempting to use after destroying');
          const n = e.params[0];
          const o = r[n];
          if (!o) return void (t.result = !1);
          delete r[n], await o.destroy(), t.result = !0;
        }))
      });
      return p.destroy = function() {
        d.removeAllListeners();
        for (const e in r) r[e].destroy(), delete r[e];
        h = !0;
      }, {
        events: d,
        middleware: p
      };
      function v(e, t) {
        d.emit('notification', {
          jsonrpc: '2.0',
          method: 'eth_subscription',
          params: {
            subscription: e,
            result: t
          }
        });
      }
    };
  },
  25792: (e, t, r) => {
    const n = r(76622);
    const o = r(40207);
    const {incrementHexInt: i} = r(98112);
    e.exports = class extends n {
      constructor({provider: e}) {
        super(), this.type = 'tx', this.provider = e;
      }
      async update({oldBlock: e}) {
        const t = e;
        const r = i(e);
        const n = await o({
          provider: this.provider,
          fromBlock: r,
          toBlock: t
        });
        const a = [];
        for (const o of n) a.push(...o.transactions);
        this.addResults(a);
      }
    };
  },
  75682: (e, t, r) => {
    const n = r(47529);
    const o = r(23420)();
    function i(e) {
      this.currentProvider = e;
    }
    function a(e) {
      return function() {
        const t = this;
        var r = [].slice.call(arguments);
        var n = r.pop();
        t.sendAsync({
          method: e,
          params: r
        }, n);
      };
    }
    function s(e, t) {
      return function() {
        const r = this;
        var n = [].slice.call(arguments);
        var o = n.pop();
        n.length < e && n.push('latest'), r.sendAsync({
          method: t,
          params: n
        }, o);
      };
    }
    e.exports = i, i.prototype.getBalance = s(2, 'eth_getBalance'), i.prototype.getCode = s(2, 'eth_getCode'), i.prototype.getTransactionCount = s(2, 'eth_getTransactionCount'), 
    i.prototype.getStorageAt = s(3, 'eth_getStorageAt'), i.prototype.call = s(2, 'eth_call'), i.prototype.protocolVersion = a('eth_protocolVersion'), 
    i.prototype.syncing = a('eth_syncing'), i.prototype.coinbase = a('eth_coinbase'), i.prototype.mining = a('eth_mining'), 
    i.prototype.hashrate = a('eth_hashrate'), i.prototype.gasPrice = a('eth_gasPrice'), i.prototype.accounts = a('eth_accounts'), 
    i.prototype.blockNumber = a('eth_blockNumber'), i.prototype.getBlockTransactionCountByHash = a('eth_getBlockTransactionCountByHash'), 
    i.prototype.getBlockTransactionCountByNumber = a('eth_getBlockTransactionCountByNumber'), i.prototype.getUncleCountByBlockHash = a('eth_getUncleCountByBlockHash'), 
    i.prototype.getUncleCountByBlockNumber = a('eth_getUncleCountByBlockNumber'), i.prototype.sign = a('eth_sign'), i.prototype.sendTransaction = a('eth_sendTransaction'), 
    i.prototype.sendRawTransaction = a('eth_sendRawTransaction'), i.prototype.estimateGas = a('eth_estimateGas'), i.prototype.getBlockByHash = a('eth_getBlockByHash'), 
    i.prototype.getBlockByNumber = a('eth_getBlockByNumber'), i.prototype.getTransactionByHash = a('eth_getTransactionByHash'), 
    i.prototype.getTransactionByBlockHashAndIndex = a('eth_getTransactionByBlockHashAndIndex'), i.prototype.getTransactionByBlockNumberAndIndex = a('eth_getTransactionByBlockNumberAndIndex'), 
    i.prototype.getTransactionReceipt = a('eth_getTransactionReceipt'), i.prototype.getUncleByBlockHashAndIndex = a('eth_getUncleByBlockHashAndIndex'), 
    i.prototype.getUncleByBlockNumberAndIndex = a('eth_getUncleByBlockNumberAndIndex'), i.prototype.getCompilers = a('eth_getCompilers'), 
    i.prototype.compileLLL = a('eth_compileLLL'), i.prototype.compileSolidity = a('eth_compileSolidity'), i.prototype.compileSerpent = a('eth_compileSerpent'), 
    i.prototype.newFilter = a('eth_newFilter'), i.prototype.newBlockFilter = a('eth_newBlockFilter'), i.prototype.newPendingTransactionFilter = a('eth_newPendingTransactionFilter'), 
    i.prototype.uninstallFilter = a('eth_uninstallFilter'), i.prototype.getFilterChanges = a('eth_getFilterChanges'), i.prototype.getFilterLogs = a('eth_getFilterLogs'), 
    i.prototype.getLogs = a('eth_getLogs'), i.prototype.getWork = a('eth_getWork'), i.prototype.submitWork = a('eth_submitWork'), 
    i.prototype.submitHashrate = a('eth_submitHashrate'), i.prototype.sendAsync = function(e, t) {
      this.currentProvider.sendAsync(function(e) {
        return n({
          id: o(),
          jsonrpc: '2.0',
          params: []
        }, e);
      }(e), (function(e, r) {
        if (!e && r.error && (e = new Error('EthQuery - RPC Error - ' + r.error.message)), e) return t(e);
        t(null, r.result);
      }));
    };
  },
  2843: (e, t, r) => {
    const n = r(21964);
    const o = r(68142);
    function i(e) {
      const t = new Error('Expect argument to be non-empty array');
      if ('object' != typeof e || !e.length) throw t;
      const r = e.map((function(e) {
        return 'bytes' === e.type ? n.toBuffer(e.value) : e.value;
      }));
      const i = e.map((function(e) {
        return e.type;
      }));
      const a = e.map((function(e) {
        if (!e.name) throw t;
        return e.type + ' ' + e.name;
      }));
      return o.soliditySHA3([ 'bytes32', 'bytes32' ], [ o.soliditySHA3(new Array(e.length).fill('string'), a), o.soliditySHA3(i, r) ]);
    }
    function a(e, t) {
      const r = n.toBuffer(t);
      const o = n.fromRpcSig(r);
      return n.ecrecover(e, o.v, o.r, o.s);
    }
    function s(e) {
      const t = n.toBuffer(e.data);
      return a(n.hashPersonalMessage(t), e.sig);
    }
    function c(e, t) {
      var r = '' + e;
      for (;r.length < t; ) r = '0' + r;
      return r;
    }
    e.exports = {
      concatSig: function(e, t, r) {
        const o = n.fromSigned(t);
        const i = n.fromSigned(r);
        const a = n.bufferToInt(e);
        const s = c(n.toUnsigned(o).toString('hex'), 64);
        const u = c(n.toUnsigned(i).toString('hex'), 64);
        const l = n.stripHexPrefix(n.intToHex(a));
        return n.addHexPrefix(s.concat(u, l)).toString('hex');
      },
      normalize: function(e) {
        if (e) {
          if ('number' == typeof e) {
            const t = n.toBuffer(e);
            e = n.bufferToHex(t);
          }
          if ('string' != typeof e) {
            var t = 'eth-sig-util.normalize() requires hex string or integer input.';
            throw new Error(t += ' received ' + typeof e + ': ' + e);
          }
          return n.addHexPrefix(e.toLowerCase());
        }
      },
      personalSign: function(e, t) {
        var r = n.toBuffer(t.data);
        var o = n.hashPersonalMessage(r);
        var i = n.ecsign(o, e);
        return n.bufferToHex(this.concatSig(i.v, i.r, i.s));
      },
      recoverPersonalSignature: function(e) {
        const t = s(e);
        const r = n.publicToAddress(t);
        return n.bufferToHex(r);
      },
      extractPublicKey: function(e) {
        return '0x' + s(e).toString('hex');
      },
      typedSignatureHash: function(e) {
        const t = i(e);
        return n.bufferToHex(t);
      },
      signTypedData: function(e, t) {
        const r = i(t.data);
        const o = n.ecsign(r, e);
        return n.bufferToHex(this.concatSig(o.v, o.r, o.s));
      },
      recoverTypedSignature: function(e) {
        const t = a(i(e.data), e.sig);
        const r = n.publicToAddress(t);
        return n.bufferToHex(r);
      }
    };
  },
  68142: (e, t, r) => {
    e.exports = r(75437);
  },
  75437: (e, t, r) => {
    var n = r(48764).Buffer;
    const o = r(86589);
    const i = r(13550);
    var a = function() {};
    function s(e) {
      return e.startsWith('int[') ? 'int256' + e.slice(3) : 'int' === e ? 'int256' : e.startsWith('uint[') ? 'uint256' + e.slice(4) : 'uint' === e ? 'uint256' : e.startsWith('fixed[') ? 'fixed128x128' + e.slice(5) : 'fixed' === e ? 'fixed128x128' : e.startsWith('ufixed[') ? 'ufixed128x128' + e.slice(6) : 'ufixed' === e ? 'ufixed128x128' : e;
    }
    function c(e) {
      return parseInt(/^\D+(\d+)$/.exec(e)[1], 10);
    }
    function u(e) {
      var t = /^\D+(\d+)x(\d+)$/.exec(e);
      return [ parseInt(t[1], 10), parseInt(t[2], 10) ];
    }
    function l(e) {
      var t = e.match(/(.*)\[(.*?)\]$/);
      return t ? '' === t[2] ? 'dynamic' : parseInt(t[2], 10) : null;
    }
    function f(e) {
      var t = typeof e;
      if ('string' === t) return o.isHexPrefixed(e) ? new i(o.stripHexPrefix(e), 16) : new i(e, 10);
      if ('number' === t) return new i(e);
      if (e.toArray) return e;
      throw new Error('Argument is not a number');
    }
    function h(e) {
      var t = /^(\w+)\((.*)\)$/.exec(e);
      if (3 !== t.length) throw new Error('Invalid method signature');
      var r = /^(.+)\):\((.+)$/.exec(t[2]);
      if (null !== r && 3 === r.length) return {
        method: t[1],
        args: r[1].split(','),
        retargs: r[2].split(',')
      };
      var n = t[2].split(',');
      return 1 === n.length && '' === n[0] && (n = []), {
        method: t[1],
        args: n
      };
    }
    function d(e, t) {
      var r, a, s, h;
      if ('address' === e) return d('uint160', f(t));
      if ('bool' === e) return d('uint8', t ? 1 : 0);
      if ('string' === e) return d('bytes', n.from(t, 'utf8'));
      if (m(e)) {
        if (void 0 === t.length) throw new Error('Not an array?');
        if ('dynamic' !== (r = l(e)) && 0 !== r && t.length > r) throw new Error('Elements exceed array size: ' + r);
        for (h in s = [], e = e.slice(0, e.lastIndexOf('[')), 'string' == typeof t && (t = JSON.parse(t)), t) s.push(d(e, t[h]));
        if ('dynamic' === r) {
          var p = d('uint256', t.length);
          s.unshift(p);
        }
        return n.concat(s);
      }
      if ('bytes' === e) return t = n.from(t), s = n.concat([ d('uint256', t.length), t ]), t.length % 32 != 0 && (s = n.concat([ s, o.zeros(32 - t.length % 32) ])), 
      s;
      if (e.startsWith('bytes')) {
        if ((r = c(e)) < 1 || r > 32) throw new Error('Invalid bytes<N> width: ' + r);
        return o.setLengthRight(t, 32);
      }
      if (e.startsWith('uint')) {
        if ((r = c(e)) % 8 || r < 8 || r > 256) throw new Error('Invalid uint<N> width: ' + r);
        if ((a = f(t)).bitLength() > r) throw new Error('Supplied uint exceeds width: ' + r + ' vs ' + a.bitLength());
        if (a < 0) throw new Error('Supplied uint is negative');
        return a.toArrayLike(n, 'be', 32);
      }
      if (e.startsWith('int')) {
        if ((r = c(e)) % 8 || r < 8 || r > 256) throw new Error('Invalid int<N> width: ' + r);
        if ((a = f(t)).bitLength() > r) throw new Error('Supplied int exceeds width: ' + r + ' vs ' + a.bitLength());
        return a.toTwos(256).toArrayLike(n, 'be', 32);
      }
      if (e.startsWith('ufixed')) {
        if (r = u(e), (a = f(t)) < 0) throw new Error('Supplied ufixed is negative');
        return d('uint256', a.mul(new i(2).pow(new i(r[1]))));
      }
      if (e.startsWith('fixed')) return r = u(e), d('int256', f(t).mul(new i(2).pow(new i(r[1]))));
      throw new Error('Unsupported or invalid type: ' + e);
    }
    function p(e, t, r) {
      var o, a, s, c;
      if ('string' == typeof e && (e = v(e)), 'address' === e.name) return p(e.rawType, t, r).toArrayLike(n, 'be', 20).toString('hex');
      if ('bool' === e.name) return p(e.rawType, t, r).toString() === new i(1).toString();
      if ('string' === e.name) {
        var u = p(e.rawType, t, r);
        return n.from(u, 'utf8').toString();
      }
      if (e.isArray) {
        for (s = [], o = e.size, 'dynamic' === e.size && (r = p('uint256', t, r).toNumber(), o = p('uint256', t, r).toNumber(), 
        r += 32), c = 0; c < o; c++) {
          var l = p(e.subArray, t, r);
          s.push(l), r += e.subArray.memoryUsage;
        }
        return s;
      }
      if ('bytes' === e.name) return r = p('uint256', t, r).toNumber(), o = p('uint256', t, r).toNumber(), t.slice(r + 32, r + 32 + o);
      if (e.name.startsWith('bytes')) return t.slice(r, r + e.size);
      if (e.name.startsWith('uint')) {
        if ((a = new i(t.slice(r, r + 32), 16, 'be')).bitLength() > e.size) throw new Error('Decoded int exceeds width: ' + e.size + ' vs ' + a.bitLength());
        return a;
      }
      if (e.name.startsWith('int')) {
        if ((a = new i(t.slice(r, r + 32), 16, 'be').fromTwos(256)).bitLength() > e.size) throw new Error('Decoded uint exceeds width: ' + e.size + ' vs ' + a.bitLength());
        return a;
      }
      if (e.name.startsWith('ufixed')) {
        if (o = new i(2).pow(new i(e.size[1])), !(a = p('uint256', t, r)).mod(o).isZero()) throw new Error('Decimals not supported yet');
        return a.div(o);
      }
      if (e.name.startsWith('fixed')) {
        if (o = new i(2).pow(new i(e.size[1])), !(a = p('int256', t, r)).mod(o).isZero()) throw new Error('Decimals not supported yet');
        return a.div(o);
      }
      throw new Error('Unsupported or invalid type: ' + e.name);
    }
    function v(e) {
      var t;
      var r;
      if (m(e)) {
        t = l(e);
        var n = e.slice(0, e.lastIndexOf('['));
        return n = v(n), r = {
          isArray: !0,
          name: e,
          size: t,
          memoryUsage: 'dynamic' === t ? 32 : n.memoryUsage * t,
          subArray: n
        };
      }
      var o;
      switch (e) {
       case 'address':
        o = 'uint160';
        break;

       case 'bool':
        o = 'uint8';
        break;

       case 'string':
        o = 'bytes';
      }
      if (r = {
        rawType: o,
        name: e,
        memoryUsage: 32
      }, e.startsWith('bytes') && 'bytes' !== e || e.startsWith('uint') || e.startsWith('int') ? r.size = c(e) : (e.startsWith('ufixed') || e.startsWith('fixed')) && (r.size = u(e)), 
      e.startsWith('bytes') && 'bytes' !== e && (r.size < 1 || r.size > 32)) throw new Error('Invalid bytes<N> width: ' + r.size);
      if ((e.startsWith('uint') || e.startsWith('int')) && (r.size % 8 || r.size < 8 || r.size > 256)) throw new Error('Invalid int/uint<N> width: ' + r.size);
      return r;
    }
    function g(e) {
      return 'string' === e || 'bytes' === e || 'dynamic' === l(e);
    }
    function m(e) {
      return e.lastIndexOf(']') === e.length - 1;
    }
    function y(e, t) {
      return e.startsWith('address') || e.startsWith('bytes') ? '0x' + t.toString('hex') : t.toString();
    }
    function _(e) {
      return e >= '0' && e <= '9';
    }
    a.eventID = function(e, t) {
      var r = e + '(' + t.map(s).join(',') + ')';
      return o.keccak256(n.from(r));
    }, a.methodID = function(e, t) {
      return a.eventID(e, t).slice(0, 4);
    }, a.rawEncode = function(e, t) {
      var r = [];
      var o = [];
      var i = 0;
      e.forEach((function(e) {
        if (m(e)) {
          var t = l(e);
          i += 'dynamic' !== t ? 32 * t : 32;
        } else i += 32;
      }));
      for (var a = 0; a < e.length; a++) {
        var c = s(e[a]);
        var u = d(c, t[a]);
        g(c) ? (r.push(d('uint256', i)), o.push(u), i += u.length) : r.push(u);
      }
      return n.concat(r.concat(o));
    }, a.rawDecode = function(e, t) {
      var r = [];
      t = n.from(t);
      var o = 0;
      for (var i = 0; i < e.length; i++) {
        var a = v(s(e[i]));
        var c = p(a, t, o);
        o += a.memoryUsage, r.push(c);
      }
      return r;
    }, a.simpleEncode = function(e) {
      var t = Array.prototype.slice.call(arguments).slice(1);
      var r = h(e);
      if (t.length !== r.args.length) throw new Error('Argument count mismatch');
      return n.concat([ a.methodID(r.method, r.args), a.rawEncode(r.args, t) ]);
    }, a.simpleDecode = function(e, t) {
      var r = h(e);
      if (!r.retargs) throw new Error('No return values in method');
      return a.rawDecode(r.retargs, t);
    }, a.stringify = function(e, t) {
      var r = [];
      for (var n in e) {
        var o = e[n];
        var i = t[n];
        i = /^[^\[]+\[.*\]$/.test(o) ? i.map((function(e) {
          return y(o, e);
        })).join(', ') : y(o, i), r.push(i);
      }
      return r;
    }, a.solidityHexValue = function(e, t, r) {
      var i, s;
      if (m(e)) {
        var u = e.replace(/\[.*?\]/, '');
        if (!m(u)) {
          var h = l(e);
          if ('dynamic' !== h && 0 !== h && t.length > h) throw new Error('Elements exceed array size: ' + h);
        }
        var d = t.map((function(e) {
          return a.solidityHexValue(u, e, 256);
        }));
        return n.concat(d);
      }
      if ('bytes' === e) return t;
      if ('string' === e) return n.from(t, 'utf8');
      if ('bool' === e) {
        r = r || 8;
        var p = Array(r / 4).join('0');
        return n.from(t ? p + '1' : p + '0', 'hex');
      }
      if ('address' === e) {
        var v = 20;
        return r && (v = r / 8), o.setLengthLeft(t, v);
      }
      if (e.startsWith('bytes')) {
        if ((i = c(e)) < 1 || i > 32) throw new Error('Invalid bytes<N> width: ' + i);
        return o.setLengthRight(t, i);
      }
      if (e.startsWith('uint')) {
        if ((i = c(e)) % 8 || i < 8 || i > 256) throw new Error('Invalid uint<N> width: ' + i);
        if ((s = f(t)).bitLength() > i) throw new Error('Supplied uint exceeds width: ' + i + ' vs ' + s.bitLength());
        return r = r || i, s.toArrayLike(n, 'be', r / 8);
      }
      if (e.startsWith('int')) {
        if ((i = c(e)) % 8 || i < 8 || i > 256) throw new Error('Invalid int<N> width: ' + i);
        if ((s = f(t)).bitLength() > i) throw new Error('Supplied int exceeds width: ' + i + ' vs ' + s.bitLength());
        return r = r || i, s.toTwos(i).toArrayLike(n, 'be', r / 8);
      }
      throw new Error('Unsupported or invalid type: ' + e);
    }, a.solidityPack = function(e, t) {
      if (e.length !== t.length) throw new Error('Number of types are not matching the values');
      var r = [];
      for (var o = 0; o < e.length; o++) {
        var i = s(e[o]);
        var c = t[o];
        r.push(a.solidityHexValue(i, c, null));
      }
      return n.concat(r);
    }, a.soliditySHA3 = function(e, t) {
      return o.keccak256(a.solidityPack(e, t));
    }, a.soliditySHA256 = function(e, t) {
      return o.sha256(a.solidityPack(e, t));
    }, a.solidityRIPEMD160 = function(e, t) {
      return o.ripemd160(a.solidityPack(e, t), !0);
    }, a.fromSerpent = function(e) {
      var t = [];
      for (var r = 0; r < e.length; r++) {
        var n = e[r];
        if ('s' === n) t.push('bytes'); else if ('b' === n) {
          var o = 'bytes';
          var i = r + 1;
          for (;i < e.length && _(e[i]); ) o += e[i] - '0', i++;
          r = i - 1, t.push(o);
        } else if ('i' === n) t.push('int256'); else {
          if ('a' !== n) throw new Error('Unsupported or invalid type: ' + n);
          t.push('int256[]');
        }
      }
      return t;
    }, a.toSerpent = function(e) {
      var t = [];
      for (var r = 0; r < e.length; r++) {
        var n = e[r];
        if ('bytes' === n) t.push('s'); else if (n.startsWith('bytes')) t.push('b' + c(n)); else if ('int256' === n) t.push('i'); else {
          if ('int256[]' !== n) throw new Error('Unsupported or invalid type: ' + n);
          t.push('a');
        }
      }
      return t.join('');
    }, e.exports = a;
  },
  30248: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.importPublic = t.privateToPublic = t.privateToAddress = t.publicToAddress = t.pubToAddress = t.isValidPublic = t.isValidPrivate = t.isPrecompiled = t.generateAddress2 = t.generateAddress = t.isValidChecksumAddress = t.toChecksumAddress = t.isZeroAddress = t.isValidAddress = t.zeroAddress = void 0;
    var o = r(69282);
    var i = r(80884);
    var a = r(83230);
    var s = r(13550);
    var c = r(77124);
    var u = r(91550);
    t.zeroAddress = function() {
      var e = c.zeros(20);
      return c.bufferToHex(e);
    }, t.isValidAddress = function(e) {
      return /^0x[0-9a-fA-F]{40}$/.test(e);
    }, t.isZeroAddress = function(e) {
      return t.zeroAddress() === c.addHexPrefix(e);
    }, t.toChecksumAddress = function(e, t) {
      e = i.stripHexPrefix(e).toLowerCase();
      var r = void 0 !== t ? t.toString() + '0x' : '';
      var n = u.keccak(r + e).toString('hex');
      var o = '0x';
      for (var a = 0; a < e.length; a++) parseInt(n[a], 16) >= 8 ? o += e[a].toUpperCase() : o += e[a];
      return o;
    }, t.isValidChecksumAddress = function(e, r) {
      return t.isValidAddress(e) && t.toChecksumAddress(e, r) === e;
    }, t.generateAddress = function(e, t) {
      e = c.toBuffer(e);
      var r = new s(t);
      return r.isZero() ? u.rlphash([ e, null ]).slice(-20) : u.rlphash([ e, n.from(r.toArray()) ]).slice(-20);
    }, t.generateAddress2 = function(e, t, r) {
      var i = c.toBuffer(e);
      var a = c.toBuffer(t);
      var s = c.toBuffer(r);
      return o(20 === i.length), o(32 === a.length), u.keccak256(n.concat([ n.from('ff', 'hex'), i, a, u.keccak256(s) ])).slice(-20);
    }, t.isPrecompiled = function(e) {
      var t = c.unpad(e);
      return 1 === t.length && t[0] >= 1 && t[0] <= 8;
    }, t.isValidPrivate = function(e) {
      return a.privateKeyVerify(e);
    }, t.isValidPublic = function(e, t) {
      return void 0 === t && (t = !1), 64 === e.length ? a.publicKeyVerify(n.concat([ n.from([ 4 ]), e ])) : !!t && a.publicKeyVerify(e);
    }, t.pubToAddress = function(e, t) {
      return void 0 === t && (t = !1), e = c.toBuffer(e), t && 64 !== e.length && (e = a.publicKeyConvert(e, !1).slice(1)), o(64 === e.length), 
      u.keccak(e).slice(-20);
    }, t.publicToAddress = t.pubToAddress, t.privateToAddress = function(e) {
      return t.publicToAddress(t.privateToPublic(e));
    }, t.privateToPublic = function(e) {
      return e = c.toBuffer(e), a.publicKeyCreate(e, !1).slice(1);
    }, t.importPublic = function(e) {
      return 64 !== (e = c.toBuffer(e)).length && (e = a.publicKeyConvert(e, !1).slice(1)), e;
    };
  },
  77124: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.baToJSON = t.addHexPrefix = t.toUnsigned = t.fromSigned = t.bufferToHex = t.bufferToInt = t.toBuffer = t.stripZeros = t.unpad = t.setLengthRight = t.setLength = t.setLengthLeft = t.zeros = void 0;
    var o = r(80884);
    var i = r(13550);
    t.zeros = function(e) {
      return n.allocUnsafe(e).fill(0);
    }, t.setLengthLeft = function(e, r, n) {
      void 0 === n && (n = !1);
      var o = t.zeros(r);
      return e = t.toBuffer(e), n ? e.length < r ? (e.copy(o), o) : e.slice(0, r) : e.length < r ? (e.copy(o, r - e.length), o) : e.slice(-r);
    }, t.setLength = t.setLengthLeft, t.setLengthRight = function(e, r) {
      return t.setLength(e, r, !0);
    }, t.unpad = function(e) {
      var t = (e = o.stripHexPrefix(e))[0];
      for (;e.length > 0 && '0' === t.toString(); ) t = (e = e.slice(1))[0];
      return e;
    }, t.stripZeros = t.unpad, t.toBuffer = function(e) {
      if (!n.isBuffer(e)) if (Array.isArray(e)) e = n.from(e); else if ('string' == typeof e) {
        if (!o.isHexString(e)) throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + e);
        e = n.from(o.padToEven(o.stripHexPrefix(e)), 'hex');
      } else if ('number' == typeof e) e = o.intToBuffer(e); else if (null == e) e = n.allocUnsafe(0); else if (i.isBN(e)) e = e.toArrayLike(n); else {
        if (!e.toArray) throw new Error('invalid type');
        e = n.from(e.toArray());
      }
      return e;
    }, t.bufferToInt = function(e) {
      return new i(t.toBuffer(e)).toNumber();
    }, t.bufferToHex = function(e) {
      return '0x' + (e = t.toBuffer(e)).toString('hex');
    }, t.fromSigned = function(e) {
      return new i(e).fromTwos(256);
    }, t.toUnsigned = function(e) {
      return n.from(e.toTwos(256).toArray());
    }, t.addHexPrefix = function(e) {
      return 'string' != typeof e || o.isHexPrefixed(e) ? e : '0x' + e;
    }, t.baToJSON = function(e) {
      if (n.isBuffer(e)) return "0x" + e.toString('hex');
      if (e instanceof Array) {
        var r = [];
        for (var o = 0; o < e.length; o++) r.push(t.baToJSON(e[o]));
        return r;
      }
    };
  },
  46649: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.KECCAK256_RLP = t.KECCAK256_RLP_S = t.KECCAK256_RLP_ARRAY = t.KECCAK256_RLP_ARRAY_S = t.KECCAK256_NULL = t.KECCAK256_NULL_S = t.TWO_POW256 = t.MAX_INTEGER = void 0;
    var o = r(13550);
    t.MAX_INTEGER = new o('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16), t.TWO_POW256 = new o('10000000000000000000000000000000000000000000000000000000000000000', 16), 
    t.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', t.KECCAK256_NULL = n.from(t.KECCAK256_NULL_S, 'hex'), 
    t.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', t.KECCAK256_RLP_ARRAY = n.from(t.KECCAK256_RLP_ARRAY_S, 'hex'), 
    t.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', t.KECCAK256_RLP = n.from(t.KECCAK256_RLP_S, 'hex');
  },
  91550: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.rlphash = t.ripemd160 = t.sha256 = t.keccak256 = t.keccak = void 0;
    var o = r(82192), i = o.keccak224, a = o.keccak384, s = o.keccak256, c = o.keccak512;
    var u = r(23482);
    var l = r(80884);
    var f = r(51675);
    var h = r(77124);
    t.keccak = function(e, t) {
      switch (void 0 === t && (t = 256), e = 'string' != typeof e || l.isHexString(e) ? h.toBuffer(e) : n.from(e, 'utf8'), t || (t = 256), 
      t) {
       case 224:
        return i(e);

       case 256:
        return s(e);

       case 384:
        return a(e);

       case 512:
        return c(e);

       default:
        throw new Error("Invald algorithm: keccak" + t);
      }
    }, t.keccak256 = function(e) {
      return t.keccak(e);
    }, t.sha256 = function(e) {
      return e = h.toBuffer(e), u('sha256').update(e).digest();
    }, t.ripemd160 = function(e, t) {
      e = h.toBuffer(e);
      var r = u('rmd160').update(e).digest();
      return !0 === t ? h.setLength(r, 32) : r;
    }, t.rlphash = function(e) {
      return t.keccak(f.encode(e));
    };
  },
  86589: function(e, t, r) {
    "use strict";
    var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
      void 0 === n && (n = r), Object.defineProperty(e, n, {
        enumerable: !0,
        get: function() {
          return t[r];
        }
      });
    } : function(e, t, r, n) {
      void 0 === n && (n = r), e[n] = t[r];
    });
    var o = this && this.__exportStar || function(e, t) {
      for (var r in e) "default" === r || t.hasOwnProperty(r) || n(t, e, r);
    };
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.secp256k1 = t.rlp = t.BN = void 0;
    var i = r(83230);
    t.secp256k1 = i;
    var a = r(80884);
    var s = r(13550);
    t.BN = s;
    var c = r(51675);
    t.rlp = c, Object.assign(t, a), o(r(46649), t), o(r(30248), t), o(r(91550), t), o(r(86232), t), o(r(77124), t), o(r(81113), t);
  },
  81113: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.defineProperties = void 0;
    var o = r(69282);
    var i = r(80884);
    var a = r(51675);
    var s = r(77124);
    t.defineProperties = function(e, t, r) {
      if (e.raw = [], e._fields = [], e.toJSON = function(t) {
        if (void 0 === t && (t = !1), t) {
          var r = {};
          return e._fields.forEach((function(t) {
            r[t] = "0x" + e[t].toString('hex');
          })), r;
        }
        return s.baToJSON(e.raw);
      }, e.serialize = function() {
        return a.encode(e.raw);
      }, t.forEach((function(t, r) {
        function i() {
          return e.raw[r];
        }
        function a(i) {
          '00' !== (i = s.toBuffer(i)).toString('hex') || t.allowZero || (i = n.allocUnsafe(0)), t.allowLess && t.length ? (i = s.stripZeros(i), 
          o(t.length >= i.length, "The field " + t.name + " must not have more " + t.length + " bytes")) : t.allowZero && 0 === i.length || !t.length || o(t.length === i.length, "The field " + t.name + " must have byte length of " + t.length), 
          e.raw[r] = i;
        }
        e._fields.push(t.name), Object.defineProperty(e, t.name, {
          enumerable: !0,
          configurable: !0,
          get: i,
          set: a
        }), t.default && (e[t.name] = t.default), t.alias && Object.defineProperty(e, t.alias, {
          enumerable: !1,
          configurable: !0,
          set: a,
          get: i
        });
      })), r) if ('string' == typeof r && (r = n.from(i.stripHexPrefix(r), 'hex')), n.isBuffer(r) && (r = a.decode(r)), Array.isArray(r)) {
        if (r.length > e._fields.length) throw new Error('wrong number of fields in data');
        r.forEach((function(t, r) {
          e[e._fields[r]] = s.toBuffer(t);
        }));
      } else {
        if ('object' != typeof r) throw new Error('invalid data');
        var c = Object.keys(r);
        t.forEach((function(t) {
          -1 !== c.indexOf(t.name) && (e[t.name] = r[t.name]), -1 !== c.indexOf(t.alias) && (e[t.alias] = r[t.alias]);
        }));
      }
    };
  },
  83230: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.ecdhUnsafe = t.ecdh = t.recover = t.verify = t.sign = t.signatureImportLax = t.signatureImport = t.signatureExport = t.signatureNormalize = t.publicKeyCombine = t.publicKeyTweakMul = t.publicKeyTweakAdd = t.publicKeyVerify = t.publicKeyConvert = t.publicKeyCreate = t.privateKeyTweakMul = t.privateKeyTweakAdd = t.privateKeyModInverse = t.privateKeyNegate = t.privateKeyImport = t.privateKeyExport = t.privateKeyVerify = void 0;
    var o = r(95053);
    var i = r(78427);
    var a = r(33646);
    t.privateKeyVerify = function(e) {
      return 32 === e.length && o.privateKeyVerify(Uint8Array.from(e));
    }, t.privateKeyExport = function(e, t) {
      if (32 !== e.length) throw new RangeError('private key length is invalid');
      var r = i.privateKeyExport(e, t);
      return a.privateKeyExport(e, r, t);
    }, t.privateKeyImport = function(e) {
      if (null !== (e = a.privateKeyImport(e)) && 32 === e.length && t.privateKeyVerify(e)) return e;
      throw new Error("couldn't import from DER format");
    }, t.privateKeyNegate = function(e) {
      return n.from(o.privateKeyNegate(Uint8Array.from(e)));
    }, t.privateKeyModInverse = function(e) {
      if (32 !== e.length) throw new Error('private key length is invalid');
      return n.from(i.privateKeyModInverse(Uint8Array.from(e)));
    }, t.privateKeyTweakAdd = function(e, t) {
      return n.from(o.privateKeyTweakAdd(Uint8Array.from(e), t));
    }, t.privateKeyTweakMul = function(e, t) {
      return n.from(o.privateKeyTweakMul(Uint8Array.from(e), Uint8Array.from(t)));
    }, t.publicKeyCreate = function(e, t) {
      return n.from(o.publicKeyCreate(Uint8Array.from(e), t));
    }, t.publicKeyConvert = function(e, t) {
      return n.from(o.publicKeyConvert(Uint8Array.from(e), t));
    }, t.publicKeyVerify = function(e) {
      return (33 === e.length || 65 === e.length) && o.publicKeyVerify(Uint8Array.from(e));
    }, t.publicKeyTweakAdd = function(e, t, r) {
      return n.from(o.publicKeyTweakAdd(Uint8Array.from(e), Uint8Array.from(t), r));
    }, t.publicKeyTweakMul = function(e, t, r) {
      return n.from(o.publicKeyTweakMul(Uint8Array.from(e), Uint8Array.from(t), r));
    }, t.publicKeyCombine = function(e, t) {
      var r = [];
      return e.forEach((function(e) {
        r.push(Uint8Array.from(e));
      })), n.from(o.publicKeyCombine(r, t));
    }, t.signatureNormalize = function(e) {
      return n.from(o.signatureNormalize(Uint8Array.from(e)));
    }, t.signatureExport = function(e) {
      return n.from(o.signatureExport(Uint8Array.from(e)));
    }, t.signatureImport = function(e) {
      return n.from(o.signatureImport(Uint8Array.from(e)));
    }, t.signatureImportLax = function(e) {
      if (0 === e.length) throw new RangeError('signature length is invalid');
      var t = a.signatureImportLax(e);
      if (null === t) throw new Error("couldn't parse DER signature");
      return i.signatureImport(t);
    }, t.sign = function(e, t, r) {
      if (null === r) throw new TypeError('options should be an Object');
      var i = void 0;
      if (r) {
        if (i = {}, null === r.data) throw new TypeError('options.data should be a Buffer');
        if (r.data) {
          if (32 != r.data.length) throw new RangeError('options.data length is invalid');
          i.data = new Uint8Array(r.data);
        }
        if (null === r.noncefn) throw new TypeError('options.noncefn should be a Function');
        r.noncefn && (i.noncefn = function(e, t, o, i, a) {
          var s = null != o ? n.from(o) : null;
          var c = null != i ? n.from(i) : null;
          var u = n.from('');
          return r.noncefn && (u = r.noncefn(n.from(e), n.from(t), s, c, a)), new Uint8Array(u);
        });
      }
      var a = o.ecdsaSign(Uint8Array.from(e), Uint8Array.from(t), i);
      return {
        signature: n.from(a.signature),
        recovery: a.recid
      };
    }, t.verify = function(e, t, r) {
      return o.ecdsaVerify(Uint8Array.from(t), Uint8Array.from(e), r);
    }, t.recover = function(e, t, r, i) {
      return n.from(o.ecdsaRecover(Uint8Array.from(t), r, Uint8Array.from(e), i));
    }, t.ecdh = function(e, t) {
      return n.from(o.ecdh(Uint8Array.from(e), Uint8Array.from(t), {}));
    }, t.ecdhUnsafe = function(e, t, r) {
      if (33 !== e.length && 65 !== e.length) throw new RangeError('public key length is invalid');
      if (32 !== t.length) throw new RangeError('private key length is invalid');
      return n.from(i.ecdhUnsafe(Uint8Array.from(e), Uint8Array.from(t), r));
    };
  },
  33646: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var o = n.from([ 48, 129, 211, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 133, 48, 129, 130, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 33, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 36, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    var i = n.from([ 48, 130, 1, 19, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 165, 48, 129, 162, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 65, 4, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 72, 58, 218, 119, 38, 163, 196, 101, 93, 164, 251, 252, 14, 17, 8, 168, 253, 23, 180, 72, 166, 133, 84, 25, 156, 71, 208, 143, 251, 16, 212, 184, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 68, 3, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    t.privateKeyExport = function(e, t, r) {
      void 0 === r && (r = !0);
      var a = n.from(r ? o : i);
      return e.copy(a, r ? 8 : 9), t.copy(a, r ? 181 : 214), a;
    }, t.privateKeyImport = function(e) {
      var t = e.length;
      var r = 0;
      if (t < r + 1 || 48 !== e[r]) return null;
      if (t < (r += 1) + 1 || !(128 & e[r])) return null;
      var n = 127 & e[r];
      if (n < 1 || n > 2) return null;
      if (t < (r += 1) + n) return null;
      var o = e[r + n - 1] | (n > 1 ? e[r + n - 2] << 8 : 0);
      return t < (r += n) + o || t < r + 3 || 2 !== e[r] || 1 !== e[r + 1] || 1 !== e[r + 2] || t < (r += 3) + 2 || 4 !== e[r] || e[r + 1] > 32 || t < r + 2 + e[r + 1] ? null : e.slice(r + 2, r + 2 + e[r + 1]);
    }, t.signatureImportLax = function(e) {
      var t = n.alloc(32, 0);
      var r = n.alloc(32, 0);
      var o = e.length;
      var i = 0;
      if (48 !== e[i++]) return null;
      var a = e[i++];
      if (128 & a && (i += a - 128) > o) return null;
      if (2 !== e[i++]) return null;
      var s = e[i++];
      if (128 & s) {
        if (i + (a = s - 128) > o) return null;
        for (;a > 0 && 0 === e[i]; i += 1, a -= 1) ;
        for (s = 0; a > 0; i += 1, a -= 1) s = (s << 8) + e[i];
      }
      if (s > o - i) return null;
      var c = i;
      if (i += s, 2 !== e[i++]) return null;
      var u = e[i++];
      if (128 & u) {
        if (i + (a = u - 128) > o) return null;
        for (;a > 0 && 0 === e[i]; i += 1, a -= 1) ;
        for (u = 0; a > 0; i += 1, a -= 1) u = (u << 8) + e[i];
      }
      if (u > o - i) return null;
      var l = i;
      for (i += u; s > 0 && 0 === e[c]; s -= 1, c += 1) ;
      if (s > 32) return null;
      var f = e.slice(c, c + s);
      for (f.copy(t, 32 - f.length); u > 0 && 0 === e[l]; u -= 1, l += 1) ;
      if (u > 32) return null;
      var h = e.slice(l, l + u);
      return h.copy(r, 32 - h.length), {
        r: t,
        s: r
      };
    };
  },
  78427: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var o = r(13550);
    var i = new (0, r(86266).ec)('secp256k1');
    var a = i.curve;
    t.privateKeyExport = function(e, t) {
      void 0 === t && (t = !0);
      var r = new o(e);
      if (r.ucmp(a.n) >= 0) throw new Error("couldn't export to DER format");
      var n = i.g.mul(r);
      return s(n.getX(), n.getY(), t);
    }, t.privateKeyModInverse = function(e) {
      var t = new o(e);
      if (t.ucmp(a.n) >= 0 || t.isZero()) throw new Error('private key range is invalid');
      return t.invm(a.n).toArrayLike(n, 'be', 32);
    }, t.signatureImport = function(e) {
      var t = new o(e.r);
      t.ucmp(a.n) >= 0 && (t = new o(0));
      var r = new o(e.s);
      return r.ucmp(a.n) >= 0 && (r = new o(0)), n.concat([ t.toArrayLike(n, 'be', 32), r.toArrayLike(n, 'be', 32) ]);
    }, t.ecdhUnsafe = function(e, t, r) {
      void 0 === r && (r = !0);
      var n = i.keyFromPublic(e);
      var c = new o(t);
      if (c.ucmp(a.n) >= 0 || c.isZero()) throw new Error('scalar was invalid (zero or overflow)');
      var u = n.pub.mul(c);
      return s(u.getX(), u.getY(), r);
    };
    var s = function(e, t, r) {
      var o;
      return r ? ((o = n.alloc(33))[0] = t.isOdd() ? 3 : 2, e.toArrayLike(n, 'be', 32).copy(o, 1)) : ((o = n.alloc(65))[0] = 4, 
      e.toArrayLike(n, 'be', 32).copy(o, 1), t.toArrayLike(n, 'be', 32).copy(o, 33)), o;
    };
  },
  86232: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.hashPersonalMessage = t.isValidSignature = t.fromRpcSig = t.toRpcSig = t.ecrecover = t.ecsign = void 0;
    var o = r(83230);
    var i = r(13550);
    var a = r(77124);
    var s = r(91550);
    function c(e, t) {
      return t ? e - (2 * t + 35) : e - 27;
    }
    function u(e) {
      return 0 === e || 1 === e;
    }
    t.ecsign = function(e, t, r) {
      var n = o.sign(e, t);
      var i = n.recovery;
      return {
        r: n.signature.slice(0, 32),
        s: n.signature.slice(32, 64),
        v: r ? i + (2 * r + 35) : i + 27
      };
    }, t.ecrecover = function(e, t, r, i, s) {
      var l = n.concat([ a.setLength(r, 32), a.setLength(i, 32) ], 64);
      var f = c(t, s);
      if (!u(f)) throw new Error('Invalid signature v value');
      var h = o.recover(e, l, f);
      return o.publicKeyConvert(h, !1).slice(1);
    }, t.toRpcSig = function(e, t, r, o) {
      if (!u(c(e, o))) throw new Error('Invalid signature v value');
      return a.bufferToHex(n.concat([ a.setLengthLeft(t, 32), a.setLengthLeft(r, 32), a.toBuffer(e) ]));
    }, t.fromRpcSig = function(e) {
      var t = a.toBuffer(e);
      if (65 !== t.length) throw new Error('Invalid signature length');
      var r = t[64];
      return r < 27 && (r += 27), {
        v: r,
        r: t.slice(0, 32),
        s: t.slice(32, 64)
      };
    }, t.isValidSignature = function(e, t, r, n, o) {
      void 0 === n && (n = !0);
      var a = new i('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
      var s = new i('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
      if (32 !== t.length || 32 !== r.length) return !1;
      if (!u(c(e, o))) return !1;
      var l = new i(t);
      var f = new i(r);
      return !(l.isZero() || l.gt(s) || f.isZero() || f.gt(s)) && (!n || 1 !== f.cmp(a));
    }, t.hashPersonalMessage = function(e) {
      var t = n.from("Ethereum Signed Message:\n" + e.length.toString(), 'utf-8');
      return s.keccak(n.concat([ t, e ]));
    };
  },
  29847: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var o = r(21964);
    var i = r(42696);
    var a = o.BN;
    var s = new a('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var c = function() {
      function e(t) {
        !function(e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, e), t = t || {};
        var r = [ {
          name: 'nonce',
          length: 32,
          allowLess: !0,
          default: new n([])
        }, {
          name: 'gasPrice',
          length: 32,
          allowLess: !0,
          default: new n([])
        }, {
          name: 'gasLimit',
          alias: 'gas',
          length: 32,
          allowLess: !0,
          default: new n([])
        }, {
          name: 'to',
          allowZero: !0,
          length: 20,
          default: new n([])
        }, {
          name: 'value',
          length: 32,
          allowLess: !0,
          default: new n([])
        }, {
          name: 'data',
          alias: 'input',
          allowZero: !0,
          default: new n([])
        }, {
          name: 'v',
          allowZero: !0,
          default: new n([ 28 ])
        }, {
          name: 'r',
          length: 32,
          allowZero: !0,
          allowLess: !0,
          default: new n([])
        }, {
          name: 's',
          length: 32,
          allowZero: !0,
          allowLess: !0,
          default: new n([])
        } ];
        o.defineProperties(this, r, t), Object.defineProperty(this, 'from', {
          enumerable: !0,
          configurable: !0,
          get: this.getSenderAddress.bind(this)
        });
        var i = o.bufferToInt(this.v);
        var a = Math.floor((i - 35) / 2);
        a < 0 && (a = 0), this._chainId = a || t.chainId || 0, this._homestead = !0;
      }
      return e.prototype.toCreationAddress = function() {
        return '' === this.to.toString('hex');
      }, e.prototype.hash = function(e) {
        void 0 === e && (e = !0);
        var t = void 0;
        if (e) t = this.raw; else if (this._chainId > 0) {
          var r = this.raw.slice();
          this.v = this._chainId, this.r = 0, this.s = 0, t = this.raw, this.raw = r;
        } else t = this.raw.slice(0, 6);
        return o.rlphash(t);
      }, e.prototype.getChainId = function() {
        return this._chainId;
      }, e.prototype.getSenderAddress = function() {
        if (this._from) return this._from;
        var e = this.getSenderPublicKey();
        return this._from = o.publicToAddress(e), this._from;
      }, e.prototype.getSenderPublicKey = function() {
        if (!(this._senderPubKey && this._senderPubKey.length || this.verifySignature())) throw new Error('Invalid Signature');
        return this._senderPubKey;
      }, e.prototype.verifySignature = function() {
        var e = this.hash(!1);
        if (this._homestead && 1 === new a(this.s).cmp(s)) return !1;
        try {
          var t = o.bufferToInt(this.v);
          this._chainId > 0 && (t -= 2 * this._chainId + 8), this._senderPubKey = o.ecrecover(e, t, this.r, this.s);
        } catch (r) {
          return !1;
        }
        return !!this._senderPubKey;
      }, e.prototype.sign = function(e) {
        var t = this.hash(!1);
        var r = o.ecsign(t, e);
        this._chainId > 0 && (r.v += 2 * this._chainId + 8), Object.assign(this, r);
      }, e.prototype.getDataFee = function() {
        var e = this.raw[5];
        var t = new a(0);
        for (var r = 0; r < e.length; r++) 0 === e[r] ? t.iaddn(i.txDataZeroGas.v) : t.iaddn(i.txDataNonZeroGas.v);
        return t;
      }, e.prototype.getBaseFee = function() {
        var e = this.getDataFee().iaddn(i.txGas.v);
        return this._homestead && this.toCreationAddress() && e.iaddn(i.txCreation.v), e;
      }, e.prototype.getUpfrontCost = function() {
        return new a(this.gasLimit).imul(new a(this.gasPrice)).iadd(new a(this.value));
      }, e.prototype.validate = function(e) {
        var t = [];
        return this.verifySignature() || t.push('Invalid Signature'), this.getBaseFee().cmp(new a(this.gasLimit)) > 0 && t.push([ 'gas limit is too low. Need at least ' + this.getBaseFee() ]), 
        void 0 === e || !1 === e ? 0 === t.length : t.join(' ');
      }, e;
    }();
    e.exports = c;
  },
  21964: (e, t, r) => {
    "use strict";
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    var o = r(82192), i = o.keccak224, a = o.keccak384, s = o.keccak256, c = o.keccak512;
    var u = r(24565);
    var l = r(69282);
    var f = r(51675);
    var h = r(13550);
    var d = r(23482);
    var p = r(89509).Buffer;
    Object.assign(t, r(80884)), t.MAX_INTEGER = new h('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16), 
    t.TWO_POW256 = new h('10000000000000000000000000000000000000000000000000000000000000000', 16), t.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 
    t.SHA3_NULL_S = t.KECCAK256_NULL_S, t.KECCAK256_NULL = p.from(t.KECCAK256_NULL_S, 'hex'), t.SHA3_NULL = t.KECCAK256_NULL, 
    t.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', t.SHA3_RLP_ARRAY_S = t.KECCAK256_RLP_ARRAY_S, 
    t.KECCAK256_RLP_ARRAY = p.from(t.KECCAK256_RLP_ARRAY_S, 'hex'), t.SHA3_RLP_ARRAY = t.KECCAK256_RLP_ARRAY, t.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', 
    t.SHA3_RLP_S = t.KECCAK256_RLP_S, t.KECCAK256_RLP = p.from(t.KECCAK256_RLP_S, 'hex'), t.SHA3_RLP = t.KECCAK256_RLP, t.BN = h, 
    t.rlp = f, t.secp256k1 = u, t.zeros = function(e) {
      return p.allocUnsafe(e).fill(0);
    }, t.zeroAddress = function() {
      var e = t.zeros(20);
      return t.bufferToHex(e);
    }, t.setLengthLeft = t.setLength = function(e, r, n) {
      var o = t.zeros(r);
      return e = t.toBuffer(e), n ? e.length < r ? (e.copy(o), o) : e.slice(0, r) : e.length < r ? (e.copy(o, r - e.length), o) : e.slice(-r);
    }, t.setLengthRight = function(e, r) {
      return t.setLength(e, r, !0);
    }, t.unpad = t.stripZeros = function(e) {
      var r = (e = t.stripHexPrefix(e))[0];
      for (;e.length > 0 && '0' === r.toString(); ) r = (e = e.slice(1))[0];
      return e;
    }, t.toBuffer = function(e) {
      if (!p.isBuffer(e)) if (Array.isArray(e)) e = p.from(e); else if ('string' == typeof e) e = t.isHexString(e) ? p.from(t.padToEven(t.stripHexPrefix(e)), 'hex') : p.from(e); else if ('number' == typeof e) e = t.intToBuffer(e); else if (null == e) e = p.allocUnsafe(0); else if (h.isBN(e)) e = e.toArrayLike(p); else {
        if (!e.toArray) throw new Error('invalid type');
        e = p.from(e.toArray());
      }
      return e;
    }, t.bufferToInt = function(e) {
      return new h(t.toBuffer(e)).toNumber();
    }, t.bufferToHex = function(e) {
      return '0x' + (e = t.toBuffer(e)).toString('hex');
    }, t.fromSigned = function(e) {
      return new h(e).fromTwos(256);
    }, t.toUnsigned = function(e) {
      return p.from(e.toTwos(256).toArray());
    }, t.keccak = function(e, r) {
      switch (e = t.toBuffer(e), r || (r = 256), r) {
       case 224:
        return i(e);

       case 256:
        return s(e);

       case 384:
        return a(e);

       case 512:
        return c(e);

       default:
        throw new Error('Invald algorithm: keccak' + r);
      }
    }, t.keccak256 = function(e) {
      return t.keccak(e);
    }, t.sha3 = t.keccak, t.sha256 = function(e) {
      return e = t.toBuffer(e), d('sha256').update(e).digest();
    }, t.ripemd160 = function(e, r) {
      e = t.toBuffer(e);
      var n = d('rmd160').update(e).digest();
      return !0 === r ? t.setLength(n, 32) : n;
    }, t.rlphash = function(e) {
      return t.keccak(f.encode(e));
    }, t.isValidPrivate = function(e) {
      return u.privateKeyVerify(e);
    }, t.isValidPublic = function(e, t) {
      return 64 === e.length ? u.publicKeyVerify(p.concat([ p.from([ 4 ]), e ])) : !!t && u.publicKeyVerify(e);
    }, t.pubToAddress = t.publicToAddress = function(e, r) {
      return e = t.toBuffer(e), r && 64 !== e.length && (e = u.publicKeyConvert(e, !1).slice(1)), l(64 === e.length), t.keccak(e).slice(-20);
    };
    var v = t.privateToPublic = function(e) {
      return e = t.toBuffer(e), u.publicKeyCreate(e, !1).slice(1);
    };
    t.importPublic = function(e) {
      return 64 !== (e = t.toBuffer(e)).length && (e = u.publicKeyConvert(e, !1).slice(1)), e;
    }, t.ecsign = function(e, t) {
      var r = u.sign(e, t);
      var n = {};
      return n.r = r.signature.slice(0, 32), n.s = r.signature.slice(32, 64), n.v = r.recovery + 27, n;
    }, t.hashPersonalMessage = function(e) {
      var r = t.toBuffer('Ethereum Signed Message:\n' + e.length.toString());
      return t.keccak(p.concat([ r, e ]));
    }, t.ecrecover = function(e, r, n, o) {
      var i = p.concat([ t.setLength(n, 32), t.setLength(o, 32) ], 64);
      var a = r - 27;
      if (0 !== a && 1 !== a) throw new Error('Invalid signature v value');
      var s = u.recover(e, i, a);
      return u.publicKeyConvert(s, !1).slice(1);
    }, t.toRpcSig = function(e, r, n) {
      if (27 !== e && 28 !== e) throw new Error('Invalid recovery id');
      return t.bufferToHex(p.concat([ t.setLengthLeft(r, 32), t.setLengthLeft(n, 32), t.toBuffer(e - 27) ]));
    }, t.fromRpcSig = function(e) {
      if (65 !== (e = t.toBuffer(e)).length) throw new Error('Invalid signature length');
      var r = e[64];
      return r < 27 && (r += 27), {
        v: r,
        r: e.slice(0, 32),
        s: e.slice(32, 64)
      };
    }, t.privateToAddress = function(e) {
      return t.publicToAddress(v(e));
    }, t.isValidAddress = function(e) {
      return /^0x[0-9a-fA-F]{40}$/.test(e);
    }, t.isZeroAddress = function(e) {
      return t.zeroAddress() === t.addHexPrefix(e);
    }, t.toChecksumAddress = function(e) {
      e = t.stripHexPrefix(e).toLowerCase();
      var r = t.keccak(e).toString('hex');
      var n = '0x';
      for (var o = 0; o < e.length; o++) parseInt(r[o], 16) >= 8 ? n += e[o].toUpperCase() : n += e[o];
      return n;
    }, t.isValidChecksumAddress = function(e) {
      return t.isValidAddress(e) && t.toChecksumAddress(e) === e;
    }, t.generateAddress = function(e, r) {
      return e = t.toBuffer(e), r = (r = new h(r)).isZero() ? null : p.from(r.toArray()), t.rlphash([ e, r ]).slice(-20);
    }, t.isPrecompiled = function(e) {
      var r = t.unpad(e);
      return 1 === r.length && r[0] >= 1 && r[0] <= 8;
    }, t.addHexPrefix = function(e) {
      return 'string' != typeof e || t.isHexPrefixed(e) ? e : '0x' + e;
    }, t.isValidSignature = function(e, t, r, n) {
      var o = new h('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
      var i = new h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
      return 32 === t.length && 32 === r.length && ((27 === e || 28 === e) && (t = new h(t), r = new h(r), !(t.isZero() || t.gt(i) || r.isZero() || r.gt(i)) && (!1 !== n || 1 !== new h(r).cmp(o))));
    }, t.baToJSON = function(e) {
      if (p.isBuffer(e)) return '0x' + e.toString('hex');
      if (e instanceof Array) {
        var r = [];
        for (var n = 0; n < e.length; n++) r.push(t.baToJSON(e[n]));
        return r;
      }
    }, t.defineProperties = function(e, r, o) {
      if (e.raw = [], e._fields = [], e.toJSON = function(r) {
        if (r) {
          var n = {};
          return e._fields.forEach((function(t) {
            n[t] = '0x' + e[t].toString('hex');
          })), n;
        }
        return t.baToJSON(this.raw);
      }, e.serialize = function() {
        return f.encode(e.raw);
      }, r.forEach((function(r, n) {
        function o() {
          return e.raw[n];
        }
        function i(o) {
          '00' !== (o = t.toBuffer(o)).toString('hex') || r.allowZero || (o = p.allocUnsafe(0)), r.allowLess && r.length ? (o = t.stripZeros(o), 
          l(r.length >= o.length, 'The field ' + r.name + ' must not have more ' + r.length + ' bytes')) : r.allowZero && 0 === o.length || !r.length || l(r.length === o.length, 'The field ' + r.name + ' must have byte length of ' + r.length), 
          e.raw[n] = o;
        }
        e._fields.push(r.name), Object.defineProperty(e, r.name, {
          enumerable: !0,
          configurable: !0,
          get: o,
          set: i
        }), r.default && (e[r.name] = r.default), r.alias && Object.defineProperty(e, r.alias, {
          enumerable: !1,
          configurable: !0,
          set: i,
          get: o
        });
      })), o) if ('string' == typeof o && (o = p.from(t.stripHexPrefix(o), 'hex')), p.isBuffer(o) && (o = f.decode(o)), Array.isArray(o)) {
        if (o.length > e._fields.length) throw new Error('wrong number of fields in data');
        o.forEach((function(r, n) {
          e[e._fields[n]] = t.toBuffer(r);
        }));
      } else {
        if ('object' !== (void 0 === o ? 'undefined' : n(o))) throw new Error('invalid data');
        var i = Object.keys(o);
        r.forEach((function(t) {
          -1 !== i.indexOf(t.name) && (e[t.name] = o[t.name]), -1 !== i.indexOf(t.alias) && (e[t.alias] = o[t.alias]);
        }));
      }
    };
  },
  24565: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var o = r(95053);
    var i = r(67587);
    var a = r(85484);
    var s = function(e) {
      return 32 === e.length && o.privateKeyVerify(Uint8Array.from(e));
    };
    e.exports = {
      privateKeyVerify: s,
      privateKeyExport: function(e, t) {
        if (32 !== e.length) throw new RangeError('private key length is invalid');
        var r = i.privateKeyExport(e, t);
        return a.privateKeyExport(e, r, t);
      },
      privateKeyImport: function(e) {
        if (null !== (e = a.privateKeyImport(e)) && 32 === e.length && s(e)) return e;
        throw new Error("couldn't import from DER format");
      },
      privateKeyNegate: function(e) {
        return n.from(o.privateKeyNegate(Uint8Array.from(e)));
      },
      privateKeyModInverse: function(e) {
        if (32 !== e.length) throw new Error('private key length is invalid');
        return n.from(i.privateKeyModInverse(Uint8Array.from(e)));
      },
      privateKeyTweakAdd: function(e, t) {
        return n.from(o.privateKeyTweakAdd(Uint8Array.from(e), t));
      },
      privateKeyTweakMul: function(e, t) {
        return n.from(o.privateKeyTweakMul(Uint8Array.from(e), Uint8Array.from(t)));
      },
      publicKeyCreate: function(e, t) {
        return n.from(o.publicKeyCreate(Uint8Array.from(e), t));
      },
      publicKeyConvert: function(e, t) {
        return n.from(o.publicKeyConvert(Uint8Array.from(e), t));
      },
      publicKeyVerify: function(e) {
        return (33 === e.length || 65 === e.length) && o.publicKeyVerify(Uint8Array.from(e));
      },
      publicKeyTweakAdd: function(e, t, r) {
        return n.from(o.publicKeyTweakAdd(Uint8Array.from(e), Uint8Array.from(t), r));
      },
      publicKeyTweakMul: function(e, t, r) {
        return n.from(o.publicKeyTweakMul(Uint8Array.from(e), Uint8Array.from(t), r));
      },
      publicKeyCombine: function(e, t) {
        var r = [];
        return e.forEach((function(e) {
          r.push(Uint8Array.from(e));
        })), n.from(o.publicKeyCombine(r, t));
      },
      signatureNormalize: function(e) {
        return n.from(o.signatureNormalize(Uint8Array.from(e)));
      },
      signatureExport: function(e) {
        return n.from(o.signatureExport(Uint8Array.from(e)));
      },
      signatureImport: function(e) {
        return n.from(o.signatureImport(Uint8Array.from(e)));
      },
      signatureImportLax: function(e) {
        if (0 === e.length) throw new RangeError('signature length is invalid');
        var t = a.signatureImportLax(e);
        if (null === t) throw new Error("couldn't parse DER signature");
        return i.signatureImport(t);
      },
      sign: function(e, t, r) {
        if (null === r) throw new TypeError('options should be an Object');
        var i = void 0;
        if (r) {
          if (i = {}, null === r.data) throw new TypeError('options.data should be a Buffer');
          if (r.data) {
            if (32 !== r.data.length) throw new RangeError('options.data length is invalid');
            i.data = new Uint8Array(r.data);
          }
          if (null === r.noncefn) throw new TypeError('options.noncefn should be a Function');
          r.noncefn && (i.noncefn = function(e, t, o, i, a) {
            var s = null != o ? n.from(o) : null;
            var c = null != i ? n.from(i) : null;
            var u = n.from('');
            return r.noncefn && (u = r.noncefn(n.from(e), n.from(t), s, c, a)), Uint8Array.from(u);
          });
        }
        var a = o.ecdsaSign(Uint8Array.from(e), Uint8Array.from(t), i);
        return {
          signature: n.from(a.signature),
          recovery: a.recid
        };
      },
      verify: function(e, t, r) {
        return o.ecdsaVerify(Uint8Array.from(t), Uint8Array.from(e), r);
      },
      recover: function(e, t, r, i) {
        return n.from(o.ecdsaRecover(Uint8Array.from(t), r, Uint8Array.from(e), i));
      },
      ecdh: function(e, t) {
        return n.from(o.ecdh(Uint8Array.from(e), Uint8Array.from(t), {}));
      },
      ecdhUnsafe: function(e, t, r) {
        if (33 !== e.length && 65 !== e.length) throw new RangeError('public key length is invalid');
        if (32 !== t.length) throw new RangeError('private key length is invalid');
        return n.from(i.ecdhUnsafe(Uint8Array.from(e), Uint8Array.from(t), r));
      }
    };
  },
  85484: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var o = n.from([ 48, 129, 211, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 133, 48, 129, 130, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 33, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 36, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    var i = n.from([ 48, 130, 1, 19, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 165, 48, 129, 162, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 65, 4, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 72, 58, 218, 119, 38, 163, 196, 101, 93, 164, 251, 252, 14, 17, 8, 168, 253, 23, 180, 72, 166, 133, 84, 25, 156, 71, 208, 143, 251, 16, 212, 184, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 68, 3, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
    t.privateKeyExport = function(e, t, r) {
      var a = n.from(r ? o : i);
      return e.copy(a, r ? 8 : 9), t.copy(a, r ? 181 : 214), a;
    }, t.privateKeyImport = function(e) {
      var t = e.length;
      var r = 0;
      if (t < r + 1 || 48 !== e[r]) return null;
      if (t < (r += 1) + 1 || !(128 & e[r])) return null;
      var n = 127 & e[r];
      if (n < 1 || n > 2) return null;
      if (t < (r += 1) + n) return null;
      var o = e[r + n - 1] | (n > 1 ? e[r + n - 2] << 8 : 0);
      return t < (r += n) + o || t < r + 3 || 2 !== e[r] || 1 !== e[r + 1] || 1 !== e[r + 2] || t < (r += 3) + 2 || 4 !== e[r] || e[r + 1] > 32 || t < r + 2 + e[r + 1] ? null : e.slice(r + 2, r + 2 + e[r + 1]);
    }, t.signatureImportLax = function(e) {
      var t = n.alloc(32, 0);
      var r = n.alloc(32, 0);
      var o = e.length;
      var i = 0;
      if (48 !== e[i++]) return null;
      var a = e[i++];
      if (128 & a && (i += a - 128) > o) return null;
      if (2 !== e[i++]) return null;
      var s = e[i++];
      if (128 & s) {
        if (i + (a = s - 128) > o) return null;
        for (;a > 0 && 0 === e[i]; i += 1, a -= 1) ;
        for (s = 0; a > 0; i += 1, a -= 1) s = (s << 8) + e[i];
      }
      if (s > o - i) return null;
      var c = i;
      if (i += s, 2 !== e[i++]) return null;
      var u = e[i++];
      if (128 & u) {
        if (i + (a = u - 128) > o) return null;
        for (;a > 0 && 0 === e[i]; i += 1, a -= 1) ;
        for (u = 0; a > 0; i += 1, a -= 1) u = (u << 8) + e[i];
      }
      if (u > o - i) return null;
      var l = i;
      for (i += u; s > 0 && 0 === e[c]; s -= 1, c += 1) ;
      if (s > 32) return null;
      var f = e.slice(c, c + s);
      for (f.copy(t, 32 - f.length); u > 0 && 0 === e[l]; u -= 1, l += 1) ;
      if (u > 32) return null;
      var h = e.slice(l, l + u);
      return h.copy(r, 32 - h.length), {
        r: t,
        s: r
      };
    };
  },
  67587: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var o = r(13550);
    var i = new (0, r(86266).ec)('secp256k1');
    var a = i.curve;
    t.privateKeyExport = function(e, t) {
      var r = new o(e);
      if (r.ucmp(a.n) >= 0) throw new Error('couldn\'t export to DER format');
      var n = i.g.mul(r);
      return s(n.getX(), n.getY(), t);
    }, t.privateKeyModInverse = function(e) {
      var t = new o(e);
      if (t.ucmp(a.n) >= 0 || t.isZero()) throw new Error('private key range is invalid');
      return t.invm(a.n).toArrayLike(n, 'be', 32);
    }, t.signatureImport = function(e) {
      var t = new o(e.r);
      t.ucmp(a.n) >= 0 && (t = new o(0));
      var r = new o(e.s);
      return r.ucmp(a.n) >= 0 && (r = new o(0)), n.concat([ t.toArrayLike(n, 'be', 32), r.toArrayLike(n, 'be', 32) ]);
    }, t.ecdhUnsafe = function(e, t, r) {
      var n = i.keyFromPublic(e);
      var c = new o(t);
      if (c.ucmp(a.n) >= 0 || c.isZero()) throw new Error('scalar was invalid (zero or overflow)');
      var u = n.pub.mul(c);
      return s(u.getX(), u.getY(), r);
    };
    var s = function(e, t, r) {
      var o = void 0;
      return r ? ((o = n.alloc(33))[0] = t.isOdd() ? 3 : 2, e.toArrayLike(n, 'be', 32).copy(o, 1)) : ((o = n.alloc(65))[0] = 4, 
      e.toArrayLike(n, 'be', 32).copy(o, 1), t.toArrayLike(n, 'be', 32).copy(o, 33)), o;
    };
  },
  80884: (e, t, r) => {
    "use strict";
    var n = r(48764).Buffer;
    var o = r(23944);
    var i = r(49604);
    function a(e) {
      var t = e;
      if ('string' != typeof t) throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof t + ', while padToEven.');
      return t.length % 2 && (t = '0' + t), t;
    }
    function s(e) {
      return '0x' + e.toString(16);
    }
    e.exports = {
      arrayContainsArray: function(e, t, r) {
        if (!0 !== Array.isArray(e)) throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof e + '\'');
        if (!0 !== Array.isArray(t)) throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof t + '\'');
        return t[Boolean(r) ? 'some' : 'every']((function(t) {
          return e.indexOf(t) >= 0;
        }));
      },
      intToBuffer: function(e) {
        var t = s(e);
        return new n(a(t.slice(2)), 'hex');
      },
      getBinarySize: function(e) {
        if ('string' != typeof e) throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof e + '\'.');
        return n.byteLength(e, 'utf8');
      },
      isHexPrefixed: o,
      stripHexPrefix: i,
      padToEven: a,
      intToHex: s,
      fromAscii: function(e) {
        var t = '';
        for (var r = 0; r < e.length; r++) {
          var n = e.charCodeAt(r).toString(16);
          t += n.length < 2 ? '0' + n : n;
        }
        return '0x' + t;
      },
      fromUtf8: function(e) {
        return '0x' + a(new n(e, 'utf8').toString('hex')).replace(/^0+|0+$/g, '');
      },
      toAscii: function(e) {
        var t = '';
        var r = 0, n = e.length;
        for ('0x' === e.substring(0, 2) && (r = 2); r < n; r += 2) {
          var o = parseInt(e.substr(r, 2), 16);
          t += String.fromCharCode(o);
        }
        return t;
      },
      toUtf8: function(e) {
        return new n(a(i(e).replace(/^0+|0+$/g, '')), 'hex').toString('utf8');
      },
      getKeys: function(e, t, r) {
        if (!Array.isArray(e)) throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof e + '\'');
        if ('string' != typeof t) throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof t + '\'.');
        var n = [];
        for (var o = 0; o < e.length; o++) {
          var i = e[o][t];
          if (r && !i) i = ''; else if ('string' != typeof i) throw new Error('invalid abi');
          n.push(i);
        }
        return n;
      },
      isHexString: function(e, t) {
        return !('string' != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/)) && (!t || e.length === 2 + 2 * t);
      }
    };
  },
  26729: e => {
    "use strict";
    var t = Object.prototype.hasOwnProperty, r = '~';
    function n() {}
    function o(e, t, r) {
      this.fn = e, this.context = t, this.once = r || !1;
    }
    function i(e, t, n, i, a) {
      if ('function' != typeof n) throw new TypeError('The listener must be a function');
      var s = new o(n, i || e, a), c = r ? r + t : t;
      return e._events[c] ? e._events[c].fn ? e._events[c] = [ e._events[c], s ] : e._events[c].push(s) : (e._events[c] = s, e._eventsCount++), 
      e;
    }
    function a(e, t) {
      0 == --e._eventsCount ? e._events = new n : delete e._events[t];
    }
    function s() {
      this._events = new n, this._eventsCount = 0;
    }
    Object.create && (n.prototype = Object.create(null), (new n).__proto__ || (r = !1)), s.prototype.eventNames = function() {
      var e, n, o = [];
      if (0 === this._eventsCount) return o;
      for (n in e = this._events) t.call(e, n) && o.push(r ? n.slice(1) : n);
      return Object.getOwnPropertySymbols ? o.concat(Object.getOwnPropertySymbols(e)) : o;
    }, s.prototype.listeners = function(e) {
      var t = r ? r + e : e, n = this._events[t];
      if (!n) return [];
      if (n.fn) return [ n.fn ];
      for (var o = 0, i = n.length, a = new Array(i); o < i; o++) a[o] = n[o].fn;
      return a;
    }, s.prototype.listenerCount = function(e) {
      var t = r ? r + e : e, n = this._events[t];
      return n ? n.fn ? 1 : n.length : 0;
    }, s.prototype.emit = function(e, t, n, o, i, a) {
      var s = r ? r + e : e;
      if (!this._events[s]) return !1;
      var c, u, l = this._events[s], f = arguments.length;
      if (l.fn) {
        switch (l.once && this.removeListener(e, l.fn, void 0, !0), f) {
         case 1:
          return l.fn.call(l.context), !0;

         case 2:
          return l.fn.call(l.context, t), !0;

         case 3:
          return l.fn.call(l.context, t, n), !0;

         case 4:
          return l.fn.call(l.context, t, n, o), !0;

         case 5:
          return l.fn.call(l.context, t, n, o, i), !0;

         case 6:
          return l.fn.call(l.context, t, n, o, i, a), !0;
        }
        for (u = 1, c = new Array(f - 1); u < f; u++) c[u - 1] = arguments[u];
        l.fn.apply(l.context, c);
      } else {
        var h, d = l.length;
        for (u = 0; u < d; u++) switch (l[u].once && this.removeListener(e, l[u].fn, void 0, !0), f) {
         case 1:
          l[u].fn.call(l[u].context);
          break;

         case 2:
          l[u].fn.call(l[u].context, t);
          break;

         case 3:
          l[u].fn.call(l[u].context, t, n);
          break;

         case 4:
          l[u].fn.call(l[u].context, t, n, o);
          break;

         default:
          if (!c) for (h = 1, c = new Array(f - 1); h < f; h++) c[h - 1] = arguments[h];
          l[u].fn.apply(l[u].context, c);
        }
      }
      return !0;
    }, s.prototype.on = function(e, t, r) {
      return i(this, e, t, r, !1);
    }, s.prototype.once = function(e, t, r) {
      return i(this, e, t, r, !0);
    }, s.prototype.removeListener = function(e, t, n, o) {
      var i = r ? r + e : e;
      if (!this._events[i]) return this;
      if (!t) return a(this, i), this;
      var s = this._events[i];
      if (s.fn) s.fn !== t || o && !s.once || n && s.context !== n || a(this, i); else {
        for (var c = 0, u = [], l = s.length; c < l; c++) (s[c].fn !== t || o && !s[c].once || n && s[c].context !== n) && u.push(s[c]);
        u.length ? this._events[i] = 1 === u.length ? u[0] : u : a(this, i);
      }
      return this;
    }, s.prototype.removeAllListeners = function(e) {
      var t;
      return e ? (t = r ? r + e : e, this._events[t] && a(this, t)) : (this._events = new n, this._eventsCount = 0), this;
    }, s.prototype.off = s.prototype.removeListener, s.prototype.addListener = s.prototype.on, s.prefixed = r, s.EventEmitter = s, 
    e.exports = s;
  },
  4501: e => {
    e.exports = n, n.strict = o, n.loose = i;
    var t = Object.prototype.toString;
    var r = {
      '[object Int8Array]': !0,
      '[object Int16Array]': !0,
      '[object Int32Array]': !0,
      '[object Uint8Array]': !0,
      '[object Uint8ClampedArray]': !0,
      '[object Uint16Array]': !0,
      '[object Uint32Array]': !0,
      '[object Float32Array]': !0,
      '[object Float64Array]': !0
    };
    function n(e) {
      return o(e) || i(e);
    }
    function o(e) {
      return e instanceof Int8Array || e instanceof Int16Array || e instanceof Int32Array || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Uint16Array || e instanceof Uint32Array || e instanceof Float32Array || e instanceof Float64Array;
    }
    function i(e) {
      return r[t.call(e)];
    }
  },
  17398: function(e, t, r) {
    "use strict";
    var n = this && this.__importDefault || function(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    };
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.JsonRpcEngine = void 0;
    const o = n(r(19394));
    const i = r(22374);
    class a extends o.default {
      constructor() {
        super(), this._middleware = [];
      }
      push(e) {
        this._middleware.push(e);
      }
      handle(e, t) {
        if (t && 'function' != typeof t) throw new Error('"callback" must be a function if provided.');
        return Array.isArray(e) ? t ? this._handleBatch(e, t) : this._handleBatch(e) : t ? this._handle(e, t) : this._promiseHandle(e);
      }
      asMiddleware() {
        return async (e, t, r, n) => {
          try {
            const [o, i, s] = await a._runAllMiddleware(e, t, this._middleware);
            return i ? (await a._runReturnHandlers(s), n(o)) : r((async e => {
              try {
                await a._runReturnHandlers(s);
              } catch (t) {
                return e(t);
              }
              return e();
            }));
          } catch (o) {
            return n(o);
          }
        };
      }
      async _handleBatch(e, t) {
        try {
          const r = await Promise.all(e.map(this._promiseHandle.bind(this)));
          return t ? t(null, r) : r;
        } catch (r) {
          if (t) return t(r);
          throw r;
        }
      }
      _promiseHandle(e) {
        return new Promise((t => {
          this._handle(e, ((e, r) => {
            t(r);
          }));
        }));
      }
      async _handle(e, t) {
        if (!e || Array.isArray(e) || 'object' != typeof e) {
          const r = new i.EthereumRpcError(i.errorCodes.rpc.invalidRequest, "Requests must be plain objects. Received: " + typeof e, {
            request: e
          });
          return t(r, {
            id: void 0,
            jsonrpc: '2.0',
            error: r
          });
        }
        if ('string' != typeof e.method) {
          const r = new i.EthereumRpcError(i.errorCodes.rpc.invalidRequest, "Must specify a string method. Received: " + typeof e.method, {
            request: e
          });
          return t(r, {
            id: e.id,
            jsonrpc: '2.0',
            error: r
          });
        }
        const r = Object.assign({}, e);
        const n = {
          id: r.id,
          jsonrpc: r.jsonrpc
        };
        let o = null;
        try {
          await this._processRequest(r, n);
        } catch (a) {
          o = a;
        }
        return o && (delete n.result, n.error || (n.error = i.serializeError(o))), t(o, n);
      }
      async _processRequest(e, t) {
        const [r, n, o] = await a._runAllMiddleware(e, t, this._middleware);
        if (a._checkForCompletion(e, t, n), await a._runReturnHandlers(o), r) throw r;
      }
      static async _runAllMiddleware(e, t, r) {
        const n = [];
        let o = null;
        let i = !1;
        for (const s of r) if ([o, i] = await a._runMiddleware(e, t, s, n), i) break;
        return [ o, i, n.reverse() ];
      }
      static _runMiddleware(e, t, r, n) {
        return new Promise((o => {
          const a = e => {
            const r = e || t.error;
            r && (t.error = i.serializeError(r)), o([ r, !0 ]);
          };
          const c = r => {
            t.error ? a(t.error) : (r && ('function' != typeof r && a(new i.EthereumRpcError(i.errorCodes.rpc.internal, `JsonRpcEngine: "next" return handlers must be functions. Received "${typeof r}" for request:\n${s(e)}`, {
              request: e
            })), n.push(r)), o([ null, !1 ]));
          };
          try {
            r(e, t, c, a);
          } catch (u) {
            a(u);
          }
        }));
      }
      static async _runReturnHandlers(e) {
        for (const t of e) await new Promise(((e, r) => {
          t((t => t ? r(t) : e()));
        }));
      }
      static _checkForCompletion(e, t, r) {
        if (!('result' in t) && !('error' in t)) throw new i.EthereumRpcError(i.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\n${s(e)}`, {
          request: e
        });
        if (!r) throw new i.EthereumRpcError(i.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\n${s(e)}`, {
          request: e
        });
      }
    }
    function s(e) {
      return JSON.stringify(e, null, 2);
    }
    t.JsonRpcEngine = a;
  },
  31841: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.createAsyncMiddleware = void 0, t.createAsyncMiddleware = function(e) {
      return async (t, r, n, o) => {
        let i;
        const a = new Promise((e => {
          i = e;
        }));
        let s = null;
        let c = !1;
        const u = async () => {
          c = !0, n((e => {
            s = e, i();
          })), await a;
        };
        try {
          await e(t, r, u), c ? (await a, s(null)) : o(null);
        } catch (l) {
          s ? s(l) : o(l);
        }
      };
    };
  },
  48508: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.createScaffoldMiddleware = void 0, t.createScaffoldMiddleware = function(e) {
      return (t, r, n, o) => {
        const i = e[t.method];
        return void 0 === i ? n() : 'function' == typeof i ? i(t, r, n, o) : (r.result = i, o());
      };
    };
  },
  33107: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.getUniqueId = void 0;
    const r = 4294967295;
    let n = Math.floor(Math.random() * r);
    t.getUniqueId = function() {
      return n = (n + 1) % r, n;
    };
  },
  85086: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.createIdRemapMiddleware = void 0;
    const n = r(33107);
    t.createIdRemapMiddleware = function() {
      return (e, t, r, o) => {
        const i = e.id;
        const a = n.getUniqueId();
        e.id = a, t.id = a, r((r => {
          e.id = i, t.id = i, r();
        }));
      };
    };
  },
  88625: function(e, t, r) {
    "use strict";
    var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
      void 0 === n && (n = r), Object.defineProperty(e, n, {
        enumerable: !0,
        get: function() {
          return t[r];
        }
      });
    } : function(e, t, r, n) {
      void 0 === n && (n = r), e[n] = t[r];
    });
    var o = this && this.__exportStar || function(e, t) {
      for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
    };
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), o(r(85086), t), o(r(31841), t), o(r(48508), t), o(r(33107), t), o(r(17398), t), o(r(79962), t);
  },
  79962: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.mergeMiddleware = void 0;
    const n = r(17398);
    t.mergeMiddleware = function(e) {
      const t = new n.JsonRpcEngine;
      return e.forEach((e => t.push(e))), t.asMiddleware();
    };
  },
  60010: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.EthereumProviderError = t.EthereumRpcError = void 0;
    const n = r(4445);
    class o extends Error {
      constructor(e, t, r) {
        if (!Number.isInteger(e)) throw new Error('"code" must be an integer.');
        if (!t || 'string' != typeof t) throw new Error('"message" must be a nonempty string.');
        super(t), this.code = e, void 0 !== r && (this.data = r);
      }
      serialize() {
        const e = {
          code: this.code,
          message: this.message
        };
        return void 0 !== this.data && (e.data = this.data), this.stack && (e.stack = this.stack), e;
      }
      toString() {
        return n.default(this.serialize(), i, 2);
      }
    }
    t.EthereumRpcError = o;
    function i(e, t) {
      if ('[Circular]' !== t) return t;
    }
    t.EthereumProviderError = class extends o {
      constructor(e, t, r) {
        if (!function(e) {
          return Number.isInteger(e) && e >= 1e3 && e <= 4999;
        }(e)) throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
        super(e, t, r);
      }
    };
  },
  22608: (e, t) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.errorValues = t.errorCodes = void 0, t.errorCodes = {
      rpc: {
        invalidInput: -32e3,
        resourceNotFound: -32001,
        resourceUnavailable: -32002,
        transactionRejected: -32003,
        methodNotSupported: -32004,
        limitExceeded: -32005,
        parse: -32700,
        invalidRequest: -32600,
        methodNotFound: -32601,
        invalidParams: -32602,
        internal: -32603
      },
      provider: {
        userRejectedRequest: 4001,
        unauthorized: 4100,
        unsupportedMethod: 4200,
        disconnected: 4900,
        chainDisconnected: 4901
      }
    }, t.errorValues = {
      '-32700': {
        standard: 'JSON RPC 2.0',
        message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.'
      },
      '-32600': {
        standard: 'JSON RPC 2.0',
        message: 'The JSON sent is not a valid Request object.'
      },
      '-32601': {
        standard: 'JSON RPC 2.0',
        message: 'The method does not exist / is not available.'
      },
      '-32602': {
        standard: 'JSON RPC 2.0',
        message: 'Invalid method parameter(s).'
      },
      '-32603': {
        standard: 'JSON RPC 2.0',
        message: 'Internal JSON-RPC error.'
      },
      '-32000': {
        standard: 'EIP-1474',
        message: 'Invalid input.'
      },
      '-32001': {
        standard: 'EIP-1474',
        message: 'Resource not found.'
      },
      '-32002': {
        standard: 'EIP-1474',
        message: 'Resource unavailable.'
      },
      '-32003': {
        standard: 'EIP-1474',
        message: 'Transaction rejected.'
      },
      '-32004': {
        standard: 'EIP-1474',
        message: 'Method not supported.'
      },
      '-32005': {
        standard: 'EIP-1474',
        message: 'Request limit exceeded.'
      },
      4001: {
        standard: 'EIP-1193',
        message: 'User rejected the request.'
      },
      4100: {
        standard: 'EIP-1193',
        message: 'The requested account and/or method has not been authorized by the user.'
      },
      4200: {
        standard: 'EIP-1193',
        message: 'The requested method is not supported by this Ethereum provider.'
      },
      4900: {
        standard: 'EIP-1193',
        message: 'The provider is disconnected from all chains.'
      },
      4901: {
        standard: 'EIP-1193',
        message: 'The provider is disconnected from the specified chain.'
      }
    };
  },
  76152: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.ethErrors = void 0;
    const n = r(60010);
    const o = r(5548);
    const i = r(22608);
    function a(e, t) {
      const [r, i] = c(t);
      return new n.EthereumRpcError(e, r || o.getMessageFromCode(e), i);
    }
    function s(e, t) {
      const [r, i] = c(t);
      return new n.EthereumProviderError(e, r || o.getMessageFromCode(e), i);
    }
    function c(e) {
      if (e) {
        if ('string' == typeof e) return [ e ];
        if ('object' == typeof e && !Array.isArray(e)) {
          const {message: t, data: r} = e;
          if (t && 'string' != typeof t) throw new Error('Must specify string message.');
          return [ t || void 0, r ];
        }
      }
      return [];
    }
    t.ethErrors = {
      rpc: {
        parse: e => a(i.errorCodes.rpc.parse, e),
        invalidRequest: e => a(i.errorCodes.rpc.invalidRequest, e),
        invalidParams: e => a(i.errorCodes.rpc.invalidParams, e),
        methodNotFound: e => a(i.errorCodes.rpc.methodNotFound, e),
        internal: e => a(i.errorCodes.rpc.internal, e),
        server: e => {
          if (!e || 'object' != typeof e || Array.isArray(e)) throw new Error('Ethereum RPC Server errors must provide single object argument.');
          const {code: t} = e;
          if (!Number.isInteger(t) || t > -32005 || t < -32099) throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
          return a(t, e);
        },
        invalidInput: e => a(i.errorCodes.rpc.invalidInput, e),
        resourceNotFound: e => a(i.errorCodes.rpc.resourceNotFound, e),
        resourceUnavailable: e => a(i.errorCodes.rpc.resourceUnavailable, e),
        transactionRejected: e => a(i.errorCodes.rpc.transactionRejected, e),
        methodNotSupported: e => a(i.errorCodes.rpc.methodNotSupported, e),
        limitExceeded: e => a(i.errorCodes.rpc.limitExceeded, e)
      },
      provider: {
        userRejectedRequest: e => s(i.errorCodes.provider.userRejectedRequest, e),
        unauthorized: e => s(i.errorCodes.provider.unauthorized, e),
        unsupportedMethod: e => s(i.errorCodes.provider.unsupportedMethod, e),
        disconnected: e => s(i.errorCodes.provider.disconnected, e),
        chainDisconnected: e => s(i.errorCodes.provider.chainDisconnected, e),
        custom: e => {
          if (!e || 'object' != typeof e || Array.isArray(e)) throw new Error('Ethereum Provider custom errors must provide single object argument.');
          const {code: t, message: r, data: o} = e;
          if (!r || 'string' != typeof r) throw new Error('"message" must be a nonempty string');
          return new n.EthereumProviderError(t, r, o);
        }
      }
    };
  },
  22374: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.getMessageFromCode = t.serializeError = t.EthereumProviderError = t.EthereumRpcError = t.ethErrors = t.errorCodes = void 0;
    const n = r(60010);
    Object.defineProperty(t, "EthereumRpcError", {
      enumerable: !0,
      get: function() {
        return n.EthereumRpcError;
      }
    }), Object.defineProperty(t, "EthereumProviderError", {
      enumerable: !0,
      get: function() {
        return n.EthereumProviderError;
      }
    });
    const o = r(5548);
    Object.defineProperty(t, "serializeError", {
      enumerable: !0,
      get: function() {
        return o.serializeError;
      }
    }), Object.defineProperty(t, "getMessageFromCode", {
      enumerable: !0,
      get: function() {
        return o.getMessageFromCode;
      }
    });
    const i = r(76152);
    Object.defineProperty(t, "ethErrors", {
      enumerable: !0,
      get: function() {
        return i.ethErrors;
      }
    });
    const a = r(22608);
    Object.defineProperty(t, "errorCodes", {
      enumerable: !0,
      get: function() {
        return a.errorCodes;
      }
    });
  },
  5548: (e, t, r) => {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.serializeError = t.isValidCode = t.getMessageFromCode = t.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
    const n = r(22608);
    const o = r(60010);
    const i = n.errorCodes.rpc.internal;
    const a = {
      code: i,
      message: s(i)
    };
    function s(e, r = "Unspecified error message. This is a bug, please report it.") {
      if (Number.isInteger(e)) {
        const r = e.toString();
        if (f(n.errorValues, r)) return n.errorValues[r].message;
        if (u(e)) return t.JSON_RPC_SERVER_ERROR_MESSAGE;
      }
      return r;
    }
    function c(e) {
      if (!Number.isInteger(e)) return !1;
      const t = e.toString();
      return !!n.errorValues[t] || !!u(e);
    }
    function u(e) {
      return e >= -32099 && e <= -32e3;
    }
    function l(e) {
      return e && 'object' == typeof e && !Array.isArray(e) ? Object.assign({}, e) : e;
    }
    function f(e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }
    t.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.', t.getMessageFromCode = s, t.isValidCode = c, t.serializeError = function(e, {fallbackError: t = a, shouldIncludeStack: r = !1} = {}) {
      var n, i;
      if (!t || !Number.isInteger(t.code) || 'string' != typeof t.message) throw new Error('Must provide fallback error with integer number code and string message.');
      if (e instanceof o.EthereumRpcError) return e.serialize();
      const u = {};
      if (e && 'object' == typeof e && !Array.isArray(e) && f(e, 'code') && c(e.code)) {
        const t = e;
        u.code = t.code, t.message && 'string' == typeof t.message ? (u.message = t.message, f(t, 'data') && (u.data = t.data)) : (u.message = s(u.code), 
        u.data = {
          originalError: l(e)
        });
      } else {
        u.code = t.code;
        const r = null === (n = e) || void 0 === n ? void 0 : n.message;
        u.message = r && 'string' == typeof r ? r : t.message, u.data = {
          originalError: l(e)
        };
      }
      const h = null === (i = e) || void 0 === i ? void 0 : i.stack;
      return r && e && h && 'string' == typeof h && (u.stack = h), u;
    };
  },
  23420: e => {
    e.exports = function(e) {
      var t = (e = e || {}).max || Number.MAX_SAFE_INTEGER;
      var r = void 0 !== e.start ? e.start : Math.floor(Math.random() * t);
      return function() {
        return r %= t, r++;
      };
    };
  },
  62705: (e, t, r) => {
    var n = r(55639).Symbol;
    e.exports = n;
  },
  14636: (e, t, r) => {
    var n = r(22545), o = r(35694), i = r(1469), a = r(44144), s = r(65776), c = r(36719);
    var u = Object.prototype.hasOwnProperty;
    e.exports = function(e, t) {
      var r = i(e), l = !r && o(e), f = !r && !l && a(e), h = !r && !l && !f && c(e), d = r || l || f || h, p = d ? n(e.length, String) : [], v = p.length;
      for (var g in e) !t && !u.call(e, g) || d && ('length' == g || f && ('offset' == g || 'parent' == g) || h && ('buffer' == g || 'byteLength' == g || 'byteOffset' == g) || s(g, v)) || p.push(g);
      return p;
    };
  },
  44239: (e, t, r) => {
    var n = r(62705), o = r(89607), i = r(2333);
    var a = n ? n.toStringTag : void 0;
    e.exports = function(e) {
      return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : a && a in Object(e) ? o(e) : i(e);
    };
  },
  9454: (e, t, r) => {
    var n = r(44239), o = r(37005);
    e.exports = function(e) {
      return o(e) && "[object Arguments]" == n(e);
    };
  },
  38749: (e, t, r) => {
    var n = r(44239), o = r(41780), i = r(37005);
    var a = {};
    a['[object Float32Array]'] = a['[object Float64Array]'] = a['[object Int8Array]'] = a['[object Int16Array]'] = a['[object Int32Array]'] = a['[object Uint8Array]'] = a['[object Uint8ClampedArray]'] = a['[object Uint16Array]'] = a['[object Uint32Array]'] = !0, 
    a['[object Arguments]'] = a['[object Array]'] = a['[object ArrayBuffer]'] = a['[object Boolean]'] = a['[object DataView]'] = a['[object Date]'] = a['[object Error]'] = a['[object Function]'] = a['[object Map]'] = a['[object Number]'] = a['[object Object]'] = a['[object RegExp]'] = a['[object Set]'] = a['[object String]'] = a['[object WeakMap]'] = !1, 
    e.exports = function(e) {
      return i(e) && o(e.length) && !!a[n(e)];
    };
  },
  280: (e, t, r) => {
    var n = r(25726), o = r(86916);
    var i = Object.prototype.hasOwnProperty;
    e.exports = function(e) {
      if (!n(e)) return o(e);
      var t = [];
      for (var r in Object(e)) i.call(e, r) && 'constructor' != r && t.push(r);
      return t;
    };
  },
  22545: e => {
    e.exports = function(e, t) {
      var r = -1, n = Array(e);
      for (;++r < e; ) n[r] = t(r);
      return n;
    };
  },
  7518: e => {
    e.exports = function(e) {
      return function(t) {
        return e(t);
      };
    };
  },
  31957: (e, t, r) => {
    var n = 'object' == typeof r.g && r.g && r.g.Object === Object && r.g;
    e.exports = n;
  },
  89607: (e, t, r) => {
    var n = r(62705);
    var o = Object.prototype;
    var i = o.hasOwnProperty;
    var a = o.toString;
    var s = n ? n.toStringTag : void 0;
    e.exports = function(e) {
      var t = i.call(e, s), r = e[s];
      try {
        e[s] = void 0;
        var n = !0;
      } catch (c) {}
      var o = a.call(e);
      return n && (t ? e[s] = r : delete e[s]), o;
    };
  },
  65776: e => {
    var t = /^(?:0|[1-9]\d*)$/;
    e.exports = function(e, r) {
      var n = typeof e;
      return !!(r = null == r ? 9007199254740991 : r) && ('number' == n || 'symbol' != n && t.test(e)) && e > -1 && e % 1 == 0 && e < r;
    };
  },
  25726: e => {
    var t = Object.prototype;
    e.exports = function(e) {
      var r = e && e.constructor;
      return e === ('function' == typeof r && r.prototype || t);
    };
  },
  86916: (e, t, r) => {
    var n = r(5569)(Object.keys, Object);
    e.exports = n;
  },
  31167: (e, t, r) => {
    e = r.nmd(e);
    var n = r(31957);
    var o = t && !t.nodeType && t;
    var i = o && e && !e.nodeType && e;
    var a = i && i.exports === o && n.process;
    var s = function() {
      try {
        var e = i && i.require && i.require('util').types;
        return e || a && a.binding && a.binding('util');
      } catch (t) {}
    }();
    e.exports = s;
  },
  2333: e => {
    var t = Object.prototype.toString;
    e.exports = function(e) {
      return t.call(e);
    };
  },
  5569: e => {
    e.exports = function(e, t) {
      return function(r) {
        return e(t(r));
      };
    };
  },
  55639: (e, t, r) => {
    var n = r(31957);
    var o = 'object' == typeof self && self && self.Object === Object && self;
    var i = n || o || Function('return this')();
    e.exports = i;
  },
  35694: (e, t, r) => {
    var n = r(9454), o = r(37005);
    var i = Object.prototype;
    var a = i.hasOwnProperty;
    var s = i.propertyIsEnumerable;
    var c = n(function() {
      return arguments;
    }()) ? n : function(e) {
      return o(e) && a.call(e, 'callee') && !s.call(e, 'callee');
    };
    e.exports = c;
  },
  1469: e => {
    var t = Array.isArray;
    e.exports = t;
  },
  98612: (e, t, r) => {
    var n = r(23560), o = r(41780);
    e.exports = function(e) {
      return null != e && o(e.length) && !n(e);
    };
  },
  44144: (e, t, r) => {
    e = r.nmd(e);
    var n = r(55639), o = r(95062);
    var i = t && !t.nodeType && t;
    var a = i && e && !e.nodeType && e;
    var s = a && a.exports === i ? n.Buffer : void 0;
    var c = (s ? s.isBuffer : void 0) || o;
    e.exports = c;
  },
  23560: (e, t, r) => {
    var n = r(44239), o = r(13218);
    e.exports = function(e) {
      if (!o(e)) return !1;
      var t = n(e);
      return "[object Function]" == t || "[object GeneratorFunction]" == t || "[object AsyncFunction]" == t || "[object Proxy]" == t;
    };
  },
  41780: e => {
    e.exports = function(e) {
      return 'number' == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991;
    };
  },
  13218: e => {
    e.exports = function(e) {
      var t = typeof e;
      return null != e && ('object' == t || 'function' == t);
    };
  },
  37005: e => {
    e.exports = function(e) {
      return null != e && 'object' == typeof e;
    };
  },
  36719: (e, t, r) => {
    var n = r(38749), o = r(7518), i = r(31167);
    var a = i && i.isTypedArray;
    var s = a ? o(a) : n;
    e.exports = s;
  },
  3674: (e, t, r) => {
    var n = r(14636), o = r(280), i = r(98612);
    e.exports = function(e) {
      return i(e) ? n(e) : o(e);
    };
  },
  50308: e => {
    e.exports = function() {};
  },
  95062: e => {
    e.exports = function() {
      return !1;
    };
  },
  35776: (e, t, r) => {
    "use strict";
    r.r(t), r.d(t, {
      Children: () => ye,
      Component: () => _,
      Fragment: () => y,
      PureComponent: () => de,
      Suspense: () => be,
      SuspenseList: () => Me,
      cloneElement: () => He,
      createContext: () => j,
      createElement: () => v,
      createFactory: () => je,
      createPortal: () => Se,
      createRef: () => m,
      default: () => ze,
      findDOMNode: () => Ke,
      forwardRef: () => ge,
      hydrate: () => Pe,
      isValidElement: () => qe,
      lazy: () => ke,
      memo: () => pe,
      render: () => Be,
      unmountComponentAtNode: () => Fe,
      unstable_batchedUpdates: () => De,
      useCallback: () => re,
      useContext: () => ne,
      useDebugValue: () => oe,
      useEffect: () => Y,
      useErrorBoundary: () => ie,
      useImperativeHandle: () => ee,
      useLayoutEffect: () => Q,
      useMemo: () => te,
      useReducer: () => Z,
      useRef: () => X,
      useState: () => J,
      version: () => Ue
    });
    var n, o, i, a, s, c, u, l = {}, f = [], h = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
    function d(e, t) {
      for (var r in t) e[r] = t[r];
      return e;
    }
    function p(e) {
      var t = e.parentNode;
      t && t.removeChild(e);
    }
    function v(e, t, r) {
      var n, o = arguments, i = {};
      for (n in t) "key" !== n && "ref" !== n && (i[n] = t[n]);
      if (arguments.length > 3) for (r = [ r ], n = 3; n < arguments.length; n++) r.push(o[n]);
      if (null != r && (i.children = r), "function" == typeof e && null != e.defaultProps) for (n in e.defaultProps) void 0 === i[n] && (i[n] = e.defaultProps[n]);
      return g(e, i, t && t.key, t && t.ref, null);
    }
    function g(e, t, r, o, i) {
      var a = {
        type: e,
        props: t,
        key: r,
        ref: o,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        constructor: void 0,
        __v: i
      };
      return null == i && (a.__v = a), n.vnode && n.vnode(a), a;
    }
    function m() {
      return {};
    }
    function y(e) {
      return e.children;
    }
    function _(e, t) {
      this.props = e, this.context = t;
    }
    function w(e, t) {
      if (null == t) return e.__ ? w(e.__, e.__.__k.indexOf(e) + 1) : null;
      for (var r; t < e.__k.length; t++) if (null != (r = e.__k[t]) && null != r.__e) return r.__e;
      return "function" == typeof e.type ? w(e) : null;
    }
    function b(e) {
      var t, r;
      if (null != (e = e.__) && null != e.__c) {
        for (e.__e = e.__c.base = null, t = 0; t < e.__k.length; t++) if (null != (r = e.__k[t]) && null != r.__e) {
          e.__e = e.__c.base = r.__e;
          break;
        }
        return b(e);
      }
    }
    function x(e) {
      (!e.__d && (e.__d = !0) && o.push(e) && !i++ || s !== n.debounceRendering) && ((s = n.debounceRendering) || a)(k);
    }
    function k() {
      for (var e; i = o.length; ) e = o.sort((function(e, t) {
        return e.__v.__b - t.__v.__b;
      })), o = [], e.some((function(e) {
        var t, r, n, o, i, a, s;
        e.__d && (a = (i = (t = e).__v).__e, (s = t.__P) && (r = [], (n = d({}, i)).__v = n, o = T(s, i, n, t.__n, void 0 !== s.ownerSVGElement, null, r, null == a ? w(i) : a), 
        R(r, i), o != a && b(i)));
      }));
    }
    function M(e, t, r, n, o, i, a, s, c) {
      var u, h, d, v, g, m, y, _ = r && r.__k || f, b = _.length;
      if (s == l && (s = null != i ? i[0] : b ? w(r, 0) : null), u = 0, t.__k = E(t.__k, (function(r) {
        if (null != r) {
          if (r.__ = t, r.__b = t.__b + 1, null === (d = _[u]) || d && r.key == d.key && r.type === d.type) _[u] = void 0; else for (h = 0; h < b; h++) {
            if ((d = _[h]) && r.key == d.key && r.type === d.type) {
              _[h] = void 0;
              break;
            }
            d = null;
          }
          if (v = T(e, r, d = d || l, n, o, i, a, s, c), (h = r.ref) && d.ref != h && (y || (y = []), d.ref && y.push(d.ref, null, r), 
          y.push(h, r.__c || v, r)), null != v) {
            var f;
            if (null == m && (m = v), void 0 !== r.__d) f = r.__d, r.__d = void 0; else if (i == d || v != s || null == v.parentNode) {
              e: if (null == s || s.parentNode !== e) e.appendChild(v), f = null; else {
                for (g = s, h = 0; (g = g.nextSibling) && h < b; h += 2) if (g == v) break e;
                e.insertBefore(v, s), f = s;
              }
              "option" == t.type && (e.value = "");
            }
            s = void 0 !== f ? f : v.nextSibling, "function" == typeof t.type && (t.__d = s);
          } else s && d.__e == s && s.parentNode != e && (s = w(d));
        }
        return u++, r;
      })), t.__e = m, null != i && "function" != typeof t.type) for (u = i.length; u--; ) null != i[u] && p(i[u]);
      for (u = b; u--; ) null != _[u] && I(_[u], _[u]);
      if (y) for (u = 0; u < y.length; u++) P(y[u], y[++u], y[++u]);
    }
    function E(e, t, r) {
      if (null == r && (r = []), null == e || "boolean" == typeof e) t && r.push(t(null)); else if (Array.isArray(e)) for (var n = 0; n < e.length; n++) E(e[n], t, r); else r.push(t ? t("string" == typeof e || "number" == typeof e ? g(null, e, null, null, e) : null != e.__e || null != e.__c ? g(e.type, e.props, e.key, null, e.__v) : e) : e);
      return r;
    }
    function A(e, t, r) {
      "-" === t[0] ? e.setProperty(t, r) : e[t] = "number" == typeof r && !1 === h.test(t) ? r + "px" : null == r ? "" : r;
    }
    function C(e, t, r, n, o) {
      var i, a, s, c, u;
      if (o ? "className" === t && (t = "class") : "class" === t && (t = "className"), "style" === t) if (i = e.style, "string" == typeof r) i.cssText = r; else {
        if ("string" == typeof n && (i.cssText = "", n = null), n) for (c in n) r && c in r || A(i, c, "");
        if (r) for (u in r) n && r[u] === n[u] || A(i, u, r[u]);
      } else "o" === t[0] && "n" === t[1] ? (a = t !== (t = t.replace(/Capture$/, "")), s = t.toLowerCase(), t = (s in e ? s : t).slice(2), 
      r ? (n || e.addEventListener(t, S, a), (e.l || (e.l = {}))[t] = r) : e.removeEventListener(t, S, a)) : "list" !== t && "tagName" !== t && "form" !== t && "type" !== t && "size" !== t && !o && t in e ? e[t] = null == r ? "" : r : "function" != typeof r && "dangerouslySetInnerHTML" !== t && (t !== (t = t.replace(/^xlink:?/, "")) ? null == r || !1 === r ? e.removeAttributeNS("http://www.w3.org/1999/xlink", t.toLowerCase()) : e.setAttributeNS("http://www.w3.org/1999/xlink", t.toLowerCase(), r) : null == r || !1 === r && !/^ar/.test(t) ? e.removeAttribute(t) : e.setAttribute(t, r));
    }
    function S(e) {
      this.l[e.type](n.event ? n.event(e) : e);
    }
    function T(e, t, r, o, i, a, s, c, u) {
      var l, f, h, p, v, g, m, w, b, x, k = t.type;
      if (void 0 !== t.constructor) return null;
      (l = n.__b) && l(t);
      try {
        e: if ("function" == typeof k) {
          if (w = t.props, b = (l = k.contextType) && o[l.__c], x = l ? b ? b.props.value : l.__ : o, r.__c ? m = (f = t.__c = r.__c).__ = f.__E : ("prototype" in k && k.prototype.render ? t.__c = f = new k(w, x) : (t.__c = f = new _(w, x), 
          f.constructor = k, f.render = L), b && b.sub(f), f.props = w, f.state || (f.state = {}), f.context = x, f.__n = o, h = f.__d = !0, 
          f.__h = []), null == f.__s && (f.__s = f.state), null != k.getDerivedStateFromProps && (f.__s == f.state && (f.__s = d({}, f.__s)), 
          d(f.__s, k.getDerivedStateFromProps(w, f.__s))), p = f.props, v = f.state, h) null == k.getDerivedStateFromProps && null != f.componentWillMount && f.componentWillMount(), 
          null != f.componentDidMount && f.__h.push(f.componentDidMount); else {
            if (null == k.getDerivedStateFromProps && w !== p && null != f.componentWillReceiveProps && f.componentWillReceiveProps(w, x), 
            !f.__e && null != f.shouldComponentUpdate && !1 === f.shouldComponentUpdate(w, f.__s, x) || t.__v === r.__v && !f.__) {
              for (f.props = w, f.state = f.__s, t.__v !== r.__v && (f.__d = !1), f.__v = t, t.__e = r.__e, t.__k = r.__k, f.__h.length && s.push(f), 
              l = 0; l < t.__k.length; l++) t.__k[l] && (t.__k[l].__ = t);
              break e;
            }
            null != f.componentWillUpdate && f.componentWillUpdate(w, f.__s, x), null != f.componentDidUpdate && f.__h.push((function() {
              f.componentDidUpdate(p, v, g);
            }));
          }
          f.context = x, f.props = w, f.state = f.__s, (l = n.__r) && l(t), f.__d = !1, f.__v = t, f.__P = e, l = f.render(f.props, f.state, f.context), 
          t.__k = null != l && l.type == y && null == l.key ? l.props.children : Array.isArray(l) ? l : [ l ], null != f.getChildContext && (o = d(d({}, o), f.getChildContext())), 
          h || null == f.getSnapshotBeforeUpdate || (g = f.getSnapshotBeforeUpdate(p, v)), M(e, t, r, o, i, a, s, c, u), f.base = t.__e, 
          f.__h.length && s.push(f), m && (f.__E = f.__ = null), f.__e = !1;
        } else null == a && t.__v === r.__v ? (t.__k = r.__k, t.__e = r.__e) : t.__e = B(r.__e, t, r, o, i, a, s, u);
        (l = n.diffed) && l(t);
      } catch (e) {
        t.__v = null, n.__e(e, t, r);
      }
      return t.__e;
    }
    function R(e, t) {
      n.__c && n.__c(t, e), e.some((function(t) {
        try {
          e = t.__h, t.__h = [], e.some((function(e) {
            e.call(t);
          }));
        } catch (e) {
          n.__e(e, t.__v);
        }
      }));
    }
    function B(e, t, r, n, o, i, a, s) {
      var c, u, h, d, p, v = r.props, g = t.props;
      if (o = "svg" === t.type || o, null != i) for (c = 0; c < i.length; c++) if (null != (u = i[c]) && ((null === t.type ? 3 === u.nodeType : u.localName === t.type) || e == u)) {
        e = u, i[c] = null;
        break;
      }
      if (null == e) {
        if (null === t.type) return document.createTextNode(g);
        e = o ? document.createElementNS("http://www.w3.org/2000/svg", t.type) : document.createElement(t.type, g.is && {
          is: g.is
        }), i = null, s = !1;
      }
      if (null === t.type) v !== g && e.data != g && (e.data = g); else {
        if (null != i && (i = f.slice.call(e.childNodes)), h = (v = r.props || l).dangerouslySetInnerHTML, d = g.dangerouslySetInnerHTML, 
        !s) {
          if (v === l) for (v = {}, p = 0; p < e.attributes.length; p++) v[e.attributes[p].name] = e.attributes[p].value;
          (d || h) && (d && h && d.__html == h.__html || (e.innerHTML = d && d.__html || ""));
        }
        (function(e, t, r, n, o) {
          var i;
          for (i in r) "children" === i || "key" === i || i in t || C(e, i, null, r[i], n);
          for (i in t) o && "function" != typeof t[i] || "children" === i || "key" === i || "value" === i || "checked" === i || r[i] === t[i] || C(e, i, t[i], r[i], n);
        })(e, g, v, o, s), d ? t.__k = [] : (t.__k = t.props.children, M(e, t, r, n, "foreignObject" !== t.type && o, i, a, l, s)), 
        s || ("value" in g && void 0 !== (c = g.value) && c !== e.value && C(e, "value", c, v.value, !1), "checked" in g && void 0 !== (c = g.checked) && c !== e.checked && C(e, "checked", c, v.checked, !1));
      }
      return e;
    }
    function P(e, t, r) {
      try {
        "function" == typeof e ? e(t) : e.current = t;
      } catch (e) {
        n.__e(e, r);
      }
    }
    function I(e, t, r) {
      var o, i, a;
      if (n.unmount && n.unmount(e), (o = e.ref) && (o.current && o.current !== e.__e || P(o, null, t)), r || "function" == typeof e.type || (r = null != (i = e.__e)), 
      e.__e = e.__d = void 0, null != (o = e.__c)) {
        if (o.componentWillUnmount) try {
          o.componentWillUnmount();
        } catch (e) {
          n.__e(e, t);
        }
        o.base = o.__P = null;
      }
      if (o = e.__k) for (a = 0; a < o.length; a++) o[a] && I(o[a], t, r);
      null != i && p(i);
    }
    function L(e, t, r) {
      return this.constructor(e, r);
    }
    function O(e, t, r) {
      var o, i, a;
      n.__ && n.__(e, t), i = (o = r === c) ? null : r && r.__k || t.__k, e = v(y, null, [ e ]), a = [], T(t, (o ? t : r || t).__k = e, i || l, l, void 0 !== t.ownerSVGElement, r && !o ? [ r ] : i ? null : f.slice.call(t.childNodes), a, r || l, o), 
      R(a, e);
    }
    function N(e, t) {
      O(e, t, c);
    }
    function U(e, t) {
      var r, n;
      for (n in t = d(d({}, e.props), t), arguments.length > 2 && (t.children = f.slice.call(arguments, 2)), r = {}, t) "key" !== n && "ref" !== n && (r[n] = t[n]);
      return g(e.type, r, t.key || e.key, t.ref || e.ref, null);
    }
    function j(e) {
      var t = {}, r = {
        __c: "__cC" + u++,
        __: e,
        Consumer: function(e, t) {
          return e.children(t);
        },
        Provider: function(e) {
          var n, o = this;
          return this.getChildContext || (n = [], this.getChildContext = function() {
            return t[r.__c] = o, t;
          }, this.shouldComponentUpdate = function(e) {
            o.props.value !== e.value && n.some((function(t) {
              t.context = e.value, x(t);
            }));
          }, this.sub = function(e) {
            n.push(e);
            var t = e.componentWillUnmount;
            e.componentWillUnmount = function() {
              n.splice(n.indexOf(e), 1), t && t.call(e);
            };
          }), e.children;
        }
      };
      return r.Consumer.contextType = r, r.Provider.__ = r, r;
    }
    n = {
      __e: function(e, t) {
        for (var r, n; t = t.__; ) if ((r = t.__c) && !r.__) try {
          if (r.constructor && null != r.constructor.getDerivedStateFromError && (n = !0, r.setState(r.constructor.getDerivedStateFromError(e))), 
          null != r.componentDidCatch && (n = !0, r.componentDidCatch(e)), n) return x(r.__E = r);
        } catch (t) {
          e = t;
        }
        throw e;
      }
    }, _.prototype.setState = function(e, t) {
      var r;
      r = this.__s !== this.state ? this.__s : this.__s = d({}, this.state), "function" == typeof e && (e = e(r, this.props)), 
      e && d(r, e), null != e && this.__v && (t && this.__h.push(t), x(this));
    }, _.prototype.forceUpdate = function(e) {
      this.__v && (this.__e = !0, e && this.__h.push(e), x(this));
    }, _.prototype.render = y, o = [], i = 0, a = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, 
    c = l, u = 0;
    var q, H, F, K = 0, D = [], z = n.__r, W = n.diffed, V = n.__c, $ = n.unmount;
    function G(e, t) {
      n.__h && n.__h(H, e, K || t), K = 0;
      var r = H.__H || (H.__H = {
        __: [],
        __h: []
      });
      return e >= r.__.length && r.__.push({}), r.__[e];
    }
    function J(e) {
      return K = 1, Z(le, e);
    }
    function Z(e, t, r) {
      var n = G(q++, 2);
      return n.__c || (n.__c = H, n.__ = [ r ? r(t) : le(void 0, t), function(t) {
        var r = e(n.__[0], t);
        n.__[0] !== r && (n.__[0] = r, n.__c.setState({}));
      } ]), n.__;
    }
    function Y(e, t) {
      var r = G(q++, 3);
      !n.__s && ue(r.__H, t) && (r.__ = e, r.__H = t, H.__H.__h.push(r));
    }
    function Q(e, t) {
      var r = G(q++, 4);
      !n.__s && ue(r.__H, t) && (r.__ = e, r.__H = t, H.__h.push(r));
    }
    function X(e) {
      return K = 5, te((function() {
        return {
          current: e
        };
      }), []);
    }
    function ee(e, t, r) {
      K = 6, Q((function() {
        "function" == typeof e ? e(t()) : e && (e.current = t());
      }), null == r ? r : r.concat(e));
    }
    function te(e, t) {
      var r = G(q++, 7);
      return ue(r.__H, t) ? (r.__H = t, r.__h = e, r.__ = e()) : r.__;
    }
    function re(e, t) {
      return K = 8, te((function() {
        return e;
      }), t);
    }
    function ne(e) {
      var t = H.context[e.__c], r = G(q++, 9);
      return r.__c = e, t ? (null == r.__ && (r.__ = !0, t.sub(H)), t.props.value) : e.__;
    }
    function oe(e, t) {
      n.useDebugValue && n.useDebugValue(t ? t(e) : e);
    }
    function ie(e) {
      var t = G(q++, 10), r = J();
      return t.__ = e, H.componentDidCatch || (H.componentDidCatch = function(e) {
        t.__ && t.__(e), r[1](e);
      }), [ r[0], function() {
        r[1](void 0);
      } ];
    }
    function ae() {
      D.some((function(e) {
        if (e.__P) try {
          e.__H.__h.forEach(se), e.__H.__h.forEach(ce), e.__H.__h = [];
        } catch (o) {
          return e.__H.__h = [], n.__e(o, e.__v), !0;
        }
      })), D = [];
    }
    function se(e) {
      e.t && e.t();
    }
    function ce(e) {
      var t = e.__();
      "function" == typeof t && (e.t = t);
    }
    function ue(e, t) {
      return !e || t.some((function(t, r) {
        return t !== e[r];
      }));
    }
    function le(e, t) {
      return "function" == typeof t ? t(e) : t;
    }
    function fe(e, t) {
      for (var r in t) e[r] = t[r];
      return e;
    }
    function he(e, t) {
      for (var r in e) if ("__source" !== r && !(r in t)) return !0;
      for (var n in t) if ("__source" !== n && e[n] !== t[n]) return !0;
      return !1;
    }
    n.__r = function(e) {
      z && z(e), q = 0, (H = e.__c).__H && (H.__H.__h.forEach(se), H.__H.__h.forEach(ce), H.__H.__h = []);
    }, n.diffed = function(e) {
      W && W(e);
      var t = e.__c;
      if (t) {
        var r = t.__H;
        r && r.__h.length && (1 !== D.push(t) && F === n.requestAnimationFrame || ((F = n.requestAnimationFrame) || function(e) {
          var t, r = function() {
            clearTimeout(n), cancelAnimationFrame(t), setTimeout(e);
          }, n = setTimeout(r, 100);
          "undefined" != typeof window && (t = requestAnimationFrame(r));
        })(ae));
      }
    }, n.__c = function(e, t) {
      t.some((function(e) {
        try {
          e.__h.forEach(se), e.__h = e.__h.filter((function(e) {
            return !e.__ || ce(e);
          }));
        } catch (s) {
          t.some((function(e) {
            e.__h && (e.__h = []);
          })), t = [], n.__e(s, e.__v);
        }
      })), V && V(e, t);
    }, n.unmount = function(e) {
      $ && $(e);
      var t = e.__c;
      if (t) {
        var r = t.__H;
        if (r) try {
          r.__.forEach((function(e) {
            return e.t && e.t();
          }));
        } catch (e) {
          n.__e(e, t.__v);
        }
      }
    };
    var de = function(e) {
      var t, r;
      function n(t) {
        var r;
        return (r = e.call(this, t) || this).isPureReactComponent = !0, r;
      }
      return r = e, (t = n).prototype = Object.create(r.prototype), t.prototype.constructor = t, t.__proto__ = r, n.prototype.shouldComponentUpdate = function(e, t) {
        return he(this.props, e) || he(this.state, t);
      }, n;
    }(_);
    function pe(e, t) {
      function r(e) {
        var r = this.props.ref, n = r == e.ref;
        return !n && r && (r.call ? r(null) : r.current = null), t ? !t(this.props, e) || !n : he(this.props, e);
      }
      function n(t) {
        return this.shouldComponentUpdate = r, v(e, fe({}, t));
      }
      return n.prototype.isReactComponent = !0, n.displayName = "Memo(" + (e.displayName || e.name) + ")", n.t = !0, n;
    }
    var ve = n.__b;
    function ge(e) {
      function t(t) {
        var r = fe({}, t);
        return delete r.ref, e(r, t.ref);
      }
      return t.prototype.isReactComponent = t.t = !0, t.displayName = "ForwardRef(" + (e.displayName || e.name) + ")", t;
    }
    n.__b = function(e) {
      e.type && e.type.t && e.ref && (e.props.ref = e.ref, e.ref = null), ve && ve(e);
    };
    var me = function(e, t) {
      return e ? E(e).reduce((function(e, r, n) {
        return e.concat(t(r, n));
      }), []) : null;
    }, ye = {
      map: me,
      forEach: me,
      count: function(e) {
        return e ? E(e).length : 0;
      },
      only: function(e) {
        if (1 !== (e = E(e)).length) throw new Error("Children.only() expects only one child.");
        return e[0];
      },
      toArray: E
    }, _e = n.__e;
    function we(e) {
      return e && ((e = fe({}, e)).__c = null, e.__k = e.__k && e.__k.map(we)), e;
    }
    function be() {
      this.__u = 0, this.o = null, this.__b = null;
    }
    function xe(e) {
      var t = e.__.__c;
      return t && t.u && t.u(e);
    }
    function ke(e) {
      var t, r, n;
      function o(o) {
        if (t || (t = e()).then((function(e) {
          r = e.default || e;
        }), (function(e) {
          n = e;
        })), n) throw n;
        if (!r) throw t;
        return v(r, o);
      }
      return o.displayName = "Lazy", o.t = !0, o;
    }
    function Me() {
      this.i = null, this.l = null;
    }
    n.__e = function(e, t, r) {
      if (e.then) for (var n, o = t; o = o.__; ) if ((n = o.__c) && n.__c) return n.__c(e, t.__c);
      _e(e, t, r);
    }, (be.prototype = new _).__c = function(e, t) {
      var r = this;
      null == r.o && (r.o = []), r.o.push(t);
      var n = xe(r.__v), o = !1, i = function() {
        o || (o = !0, n ? n(a) : a());
      };
      t.__c = t.componentWillUnmount, t.componentWillUnmount = function() {
        i(), t.__c && t.__c();
      };
      var a = function() {
        var e;
        if (!--r.__u) for (r.__v.__k[0] = r.state.u, r.setState({
          u: r.__b = null
        }); e = r.o.pop(); ) e.forceUpdate();
      };
      r.__u++ || r.setState({
        u: r.__b = r.__v.__k[0]
      }), e.then(i, i);
    }, be.prototype.render = function(e, t) {
      return this.__b && (this.__v.__k[0] = we(this.__b), this.__b = null), [ v(_, null, t.u ? null : e.children), t.u && e.fallback ];
    };
    var Ee = function(e, t, r) {
      if (++r[1] === r[0] && e.l.delete(t), e.props.revealOrder && ("t" !== e.props.revealOrder[0] || !e.l.size)) for (r = e.i; r; ) {
        for (;r.length > 3; ) r.pop()();
        if (r[1] < r[0]) break;
        e.i = r = r[2];
      }
    };
    (Me.prototype = new _).u = function(e) {
      var t = this, r = xe(t.__v), n = t.l.get(e);
      return n[0]++, function(o) {
        var i = function() {
          t.props.revealOrder ? (n.push(o), Ee(t, e, n)) : o();
        };
        r ? r(i) : i();
      };
    }, Me.prototype.render = function(e) {
      this.i = null, this.l = new Map;
      var t = E(e.children);
      e.revealOrder && "b" === e.revealOrder[0] && t.reverse();
      for (var r = t.length; r--; ) this.l.set(t[r], this.i = [ 1, 0, this.i ]);
      return e.children;
    }, Me.prototype.componentDidUpdate = Me.prototype.componentDidMount = function() {
      var e = this;
      e.l.forEach((function(t, r) {
        Ee(e, r, t);
      }));
    };
    var Ae = function() {
      function e() {}
      var t = e.prototype;
      return t.getChildContext = function() {
        return this.props.context;
      }, t.render = function(e) {
        return e.children;
      }, e;
    }();
    function Ce(e) {
      var t = this, r = e.container, n = v(Ae, {
        context: t.context
      }, e.vnode);
      return t.s && t.s !== r && (t.v.parentNode && t.s.removeChild(t.v), I(t.h), t.p = !1), e.vnode ? t.p ? (r.__k = t.__k, O(n, r), 
      t.__k = r.__k) : (t.v = document.createTextNode(""), N("", r), r.appendChild(t.v), t.p = !0, t.s = r, O(n, r, t.v), t.__k = t.v.__k) : t.p && (t.v.parentNode && t.s.removeChild(t.v), 
      I(t.h)), t.h = n, t.componentWillUnmount = function() {
        t.v.parentNode && t.s.removeChild(t.v), I(t.h);
      }, null;
    }
    function Se(e, t) {
      return v(Ce, {
        vnode: e,
        container: t
      });
    }
    var Te = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
    _.prototype.isReactComponent = {};
    var Re = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
    function Be(e, t, r) {
      if (null == t.__k) for (;t.firstChild; ) t.removeChild(t.firstChild);
      return O(e, t), "function" == typeof r && r(), e ? e.__c : null;
    }
    function Pe(e, t, r) {
      return N(e, t), "function" == typeof r && r(), e ? e.__c : null;
    }
    var Ie = n.event;
    function Le(e, t) {
      e["UNSAFE_" + t] && !e[t] && Object.defineProperty(e, t, {
        configurable: !1,
        get: function() {
          return this["UNSAFE_" + t];
        },
        set: function(e) {
          this["UNSAFE_" + t] = e;
        }
      });
    }
    n.event = function(e) {
      Ie && (e = Ie(e)), e.persist = function() {};
      var t = !1, r = !1, n = e.stopPropagation;
      e.stopPropagation = function() {
        n.call(e), t = !0;
      };
      var o = e.preventDefault;
      return e.preventDefault = function() {
        o.call(e), r = !0;
      }, e.isPropagationStopped = function() {
        return t;
      }, e.isDefaultPrevented = function() {
        return r;
      }, e.nativeEvent = e;
    };
    var Oe = {
      configurable: !0,
      get: function() {
        return this.class;
      }
    }, Ne = n.vnode;
    n.vnode = function(e) {
      e.$$typeof = Re;
      var t = e.type, r = e.props;
      if (t) {
        if (r.class != r.className && (Oe.enumerable = "className" in r, null != r.className && (r.class = r.className), Object.defineProperty(r, "className", Oe)), 
        "function" != typeof t) {
          var n, o, i;
          for (i in r.defaultValue && void 0 !== r.value && (r.value || 0 === r.value || (r.value = r.defaultValue), delete r.defaultValue), 
          Array.isArray(r.value) && r.multiple && "select" === t && (E(r.children).forEach((function(e) {
            -1 != r.value.indexOf(e.props.value) && (e.props.selected = !0);
          })), delete r.value), r) if (n = Te.test(i)) break;
          if (n) for (i in o = e.props = {}, r) o[Te.test(i) ? i.replace(/[A-Z0-9]/, "-$&").toLowerCase() : i] = r[i];
        }
        !function(t) {
          var r = e.type, n = e.props;
          if (n && "string" == typeof r) {
            var o = {};
            for (var i in n) /^on(Ani|Tra|Tou)/.test(i) && (n[i.toLowerCase()] = n[i], delete n[i]), o[i.toLowerCase()] = i;
            if (o.ondoubleclick && (n.ondblclick = n[o.ondoubleclick], delete n[o.ondoubleclick]), o.onbeforeinput && (n.onbeforeinput = n[o.onbeforeinput], 
            delete n[o.onbeforeinput]), o.onchange && ("textarea" === r || "input" === r.toLowerCase() && !/^fil|che|ra/i.test(n.type))) {
              var a = o.oninput || "oninput";
              n[a] || (n[a] = n[o.onchange], delete n[o.onchange]);
            }
          }
        }(), "function" == typeof t && !t.m && t.prototype && (Le(t.prototype, "componentWillMount"), Le(t.prototype, "componentWillReceiveProps"), 
        Le(t.prototype, "componentWillUpdate"), t.m = !0);
      }
      Ne && Ne(e);
    };
    var Ue = "16.8.0";
    function je(e) {
      return v.bind(null, e);
    }
    function qe(e) {
      return !!e && e.$$typeof === Re;
    }
    function He(e) {
      return qe(e) ? U.apply(null, arguments) : e;
    }
    function Fe(e) {
      return !!e.__k && (O(null, e), !0);
    }
    function Ke(e) {
      return e && (e.base || 1 === e.nodeType && e) || null;
    }
    var De = function(e, t) {
      return e(t);
    };
    const ze = {
      useState: J,
      useReducer: Z,
      useEffect: Y,
      useLayoutEffect: Q,
      useRef: X,
      useImperativeHandle: ee,
      useMemo: te,
      useCallback: re,
      useContext: ne,
      useDebugValue: oe,
      version: "16.8.0",
      Children: ye,
      render: Be,
      hydrate: Be,
      unmountComponentAtNode: Fe,
      createPortal: Se,
      createElement: v,
      createContext: j,
      createFactory: je,
      cloneElement: He,
      createRef: m,
      Fragment: y,
      isValidElement: qe,
      findDOMNode: Ke,
      Component: _,
      PureComponent: de,
      memo: pe,
      forwardRef: ge,
      unstable_batchedUpdates: De,
      Suspense: be,
      SuspenseList: Me,
      lazy: ke
    };
  },
  92592: (e, t, r) => {
    var n = r(47138);
    var o = r(95115);
    var i = r(6907);
    var a = r(93776);
    function s(e, t, r, i, a) {
      var s = [].slice.call(arguments, 1);
      var c = s.length;
      var u = 'function' == typeof s[c - 1];
      if (!u && !n()) throw new Error('Callback required as last argument');
      if (!u) {
        if (c < 1) throw new Error('Too few arguments provided');
        return 1 === c ? (r = t, t = i = void 0) : 2 !== c || t.getContext || (i = r, r = t, t = void 0), new Promise((function(n, a) {
          try {
            var s = o.create(r, i);
            n(e(s, t, i));
          } catch (c) {
            a(c);
          }
        }));
      }
      if (c < 2) throw new Error('Too few arguments provided');
      2 === c ? (a = r, r = t, t = i = void 0) : 3 === c && (t.getContext && void 0 === a ? (a = i, i = void 0) : (a = i, i = r, 
      r = t, t = void 0));
      try {
        var l = o.create(r, i);
        a(null, e(l, t, i));
      } catch (f) {
        a(f);
      }
    }
    t.create = o.create, t.toCanvas = s.bind(null, i.render), t.toDataURL = s.bind(null, i.renderToDataURL), t.toString = s.bind(null, (function(e, t, r) {
      return a.render(e, r);
    }));
  },
  47138: e => {
    e.exports = function() {
      return 'function' == typeof Promise && Promise.prototype && Promise.prototype.then;
    };
  },
  21845: (e, t, r) => {
    var n = r(10242).getSymbolSize;
    t.getRowColCoords = function(e) {
      if (1 === e) return [];
      var t = Math.floor(e / 7) + 2;
      var r = n(e);
      var o = 145 === r ? 26 : 2 * Math.ceil((r - 13) / (2 * t - 2));
      var i = [ r - 7 ];
      for (var a = 1; a < t - 1; a++) i[a] = i[a - 1] - o;
      return i.push(6), i.reverse();
    }, t.getPositions = function(e) {
      var r = [];
      var n = t.getRowColCoords(e);
      var o = n.length;
      for (var i = 0; i < o; i++) for (var a = 0; a < o; a++) 0 === i && 0 === a || 0 === i && a === o - 1 || i === o - 1 && 0 === a || r.push([ n[i], n[a] ]);
      return r;
    };
  },
  8260: (e, t, r) => {
    var n = r(76910);
    var o = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':' ];
    function i(e) {
      this.mode = n.ALPHANUMERIC, this.data = e;
    }
    i.getBitsLength = function(e) {
      return 11 * Math.floor(e / 2) + e % 2 * 6;
    }, i.prototype.getLength = function() {
      return this.data.length;
    }, i.prototype.getBitsLength = function() {
      return i.getBitsLength(this.data.length);
    }, i.prototype.write = function(e) {
      var t;
      for (t = 0; t + 2 <= this.data.length; t += 2) {
        var r = 45 * o.indexOf(this.data[t]);
        r += o.indexOf(this.data[t + 1]), e.put(r, 11);
      }
      this.data.length % 2 && e.put(o.indexOf(this.data[t]), 6);
    }, e.exports = i;
  },
  97245: e => {
    function t() {
      this.buffer = [], this.length = 0;
    }
    t.prototype = {
      get: function(e) {
        var t = Math.floor(e / 8);
        return 1 == (this.buffer[t] >>> 7 - e % 8 & 1);
      },
      put: function(e, t) {
        for (var r = 0; r < t; r++) this.putBit(1 == (e >>> t - r - 1 & 1));
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(e) {
        var t = Math.floor(this.length / 8);
        this.buffer.length <= t && this.buffer.push(0), e && (this.buffer[t] |= 128 >>> this.length % 8), this.length++;
      }
    }, e.exports = t;
  },
  73280: (e, t, r) => {
    var n = r(99131);
    function o(e) {
      if (!e || e < 1) throw new Error('BitMatrix size must be defined and greater than 0');
      this.size = e, this.data = n.alloc(e * e), this.reservedBit = n.alloc(e * e);
    }
    o.prototype.set = function(e, t, r, n) {
      var o = e * this.size + t;
      this.data[o] = r, n && (this.reservedBit[o] = !0);
    }, o.prototype.get = function(e, t) {
      return this.data[e * this.size + t];
    }, o.prototype.xor = function(e, t, r) {
      this.data[e * this.size + t] ^= r;
    }, o.prototype.isReserved = function(e, t) {
      return this.reservedBit[e * this.size + t];
    }, e.exports = o;
  },
  43424: (e, t, r) => {
    var n = r(99131);
    var o = r(76910);
    function i(e) {
      this.mode = o.BYTE, this.data = n.from(e);
    }
    i.getBitsLength = function(e) {
      return 8 * e;
    }, i.prototype.getLength = function() {
      return this.data.length;
    }, i.prototype.getBitsLength = function() {
      return i.getBitsLength(this.data.length);
    }, i.prototype.write = function(e) {
      for (var t = 0, r = this.data.length; t < r; t++) e.put(this.data[t], 8);
    }, e.exports = i;
  },
  35393: (e, t, r) => {
    var n = r(64908);
    var o = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81 ];
    var i = [ 7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430 ];
    t.getBlocksCount = function(e, t) {
      switch (t) {
       case n.L:
        return o[4 * (e - 1) + 0];

       case n.M:
        return o[4 * (e - 1) + 1];

       case n.Q:
        return o[4 * (e - 1) + 2];

       case n.H:
        return o[4 * (e - 1) + 3];

       default:
        return;
      }
    }, t.getTotalCodewordsCount = function(e, t) {
      switch (t) {
       case n.L:
        return i[4 * (e - 1) + 0];

       case n.M:
        return i[4 * (e - 1) + 1];

       case n.Q:
        return i[4 * (e - 1) + 2];

       case n.H:
        return i[4 * (e - 1) + 3];

       default:
        return;
      }
    };
  },
  64908: (e, t) => {
    t.L = {
      bit: 1
    }, t.M = {
      bit: 0
    }, t.Q = {
      bit: 3
    }, t.H = {
      bit: 2
    }, t.isValid = function(e) {
      return e && void 0 !== e.bit && e.bit >= 0 && e.bit < 4;
    }, t.from = function(e, r) {
      if (t.isValid(e)) return e;
      try {
        return function(e) {
          if ('string' != typeof e) throw new Error('Param is not a string');
          switch (e.toLowerCase()) {
           case 'l':
           case 'low':
            return t.L;

           case 'm':
           case 'medium':
            return t.M;

           case 'q':
           case 'quartile':
            return t.Q;

           case 'h':
           case 'high':
            return t.H;

           default:
            throw new Error('Unknown EC Level: ' + e);
          }
        }(e);
      } catch (n) {
        return r;
      }
    };
  },
  76526: (e, t, r) => {
    var n = r(10242).getSymbolSize;
    t.getPositions = function(e) {
      var t = n(e);
      return [ [ 0, 0 ], [ t - 7, 0 ], [ 0, t - 7 ] ];
    };
  },
  61642: (e, t, r) => {
    var n = r(10242);
    var o = n.getBCHDigit(1335);
    t.getEncodedBits = function(e, t) {
      var r = e.bit << 3 | t;
      var i = r << 10;
      for (;n.getBCHDigit(i) - o >= 0; ) i ^= 1335 << n.getBCHDigit(i) - o;
      return 21522 ^ (r << 10 | i);
    };
  },
  69729: (e, t, r) => {
    var n = r(99131);
    var o = n.alloc(512);
    var i = n.alloc(256);
    !function() {
      var e = 1;
      for (var t = 0; t < 255; t++) o[t] = e, i[e] = t, 256 & (e <<= 1) && (e ^= 285);
      for (t = 255; t < 512; t++) o[t] = o[t - 255];
    }(), t.log = function(e) {
      if (e < 1) throw new Error('log(' + e + ')');
      return i[e];
    }, t.exp = function(e) {
      return o[e];
    }, t.mul = function(e, t) {
      return 0 === e || 0 === t ? 0 : o[i[e] + i[t]];
    };
  },
  35442: (e, t, r) => {
    var n = r(76910);
    var o = r(10242);
    function i(e) {
      this.mode = n.KANJI, this.data = e;
    }
    i.getBitsLength = function(e) {
      return 13 * e;
    }, i.prototype.getLength = function() {
      return this.data.length;
    }, i.prototype.getBitsLength = function() {
      return i.getBitsLength(this.data.length);
    }, i.prototype.write = function(e) {
      var t;
      for (t = 0; t < this.data.length; t++) {
        var r = o.toSJIS(this.data[t]);
        if (r >= 33088 && r <= 40956) r -= 33088; else {
          if (!(r >= 57408 && r <= 60351)) throw new Error('Invalid SJIS character: ' + this.data[t] + "\nMake sure your charset is UTF-8");
          r -= 49472;
        }
        r = 192 * (r >>> 8 & 255) + (255 & r), e.put(r, 13);
      }
    }, e.exports = i;
  },
  27126: (e, t) => {
    t.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var r = 3, n = 3, o = 40, i = 10;
    function a(e, r, n) {
      switch (e) {
       case t.Patterns.PATTERN000:
        return (r + n) % 2 == 0;

       case t.Patterns.PATTERN001:
        return r % 2 == 0;

       case t.Patterns.PATTERN010:
        return n % 3 == 0;

       case t.Patterns.PATTERN011:
        return (r + n) % 3 == 0;

       case t.Patterns.PATTERN100:
        return (Math.floor(r / 2) + Math.floor(n / 3)) % 2 == 0;

       case t.Patterns.PATTERN101:
        return r * n % 2 + r * n % 3 == 0;

       case t.Patterns.PATTERN110:
        return (r * n % 2 + r * n % 3) % 2 == 0;

       case t.Patterns.PATTERN111:
        return (r * n % 3 + (r + n) % 2) % 2 == 0;

       default:
        throw new Error('bad maskPattern:' + e);
      }
    }
    t.isValid = function(e) {
      return null != e && '' !== e && !isNaN(e) && e >= 0 && e <= 7;
    }, t.from = function(e) {
      return t.isValid(e) ? parseInt(e, 10) : void 0;
    }, t.getPenaltyN1 = function(e) {
      var t = e.size;
      var n = 0;
      var o = 0;
      var i = 0;
      var a = null;
      var s = null;
      for (var c = 0; c < t; c++) {
        o = i = 0, a = s = null;
        for (var u = 0; u < t; u++) {
          var l = e.get(c, u);
          l === a ? o++ : (o >= 5 && (n += r + (o - 5)), a = l, o = 1), (l = e.get(u, c)) === s ? i++ : (i >= 5 && (n += r + (i - 5)), 
          s = l, i = 1);
        }
        o >= 5 && (n += r + (o - 5)), i >= 5 && (n += r + (i - 5));
      }
      return n;
    }, t.getPenaltyN2 = function(e) {
      var t = e.size;
      var r = 0;
      for (var o = 0; o < t - 1; o++) for (var i = 0; i < t - 1; i++) {
        var a = e.get(o, i) + e.get(o, i + 1) + e.get(o + 1, i) + e.get(o + 1, i + 1);
        4 !== a && 0 !== a || r++;
      }
      return r * n;
    }, t.getPenaltyN3 = function(e) {
      var t = e.size;
      var r = 0;
      var n = 0;
      var i = 0;
      for (var a = 0; a < t; a++) {
        n = i = 0;
        for (var s = 0; s < t; s++) n = n << 1 & 2047 | e.get(a, s), s >= 10 && (1488 === n || 93 === n) && r++, i = i << 1 & 2047 | e.get(s, a), 
        s >= 10 && (1488 === i || 93 === i) && r++;
      }
      return r * o;
    }, t.getPenaltyN4 = function(e) {
      var t = 0;
      var r = e.data.length;
      for (var n = 0; n < r; n++) t += e.data[n];
      return Math.abs(Math.ceil(100 * t / r / 5) - 10) * i;
    }, t.applyMask = function(e, t) {
      var r = t.size;
      for (var n = 0; n < r; n++) for (var o = 0; o < r; o++) t.isReserved(o, n) || t.xor(o, n, a(e, o, n));
    }, t.getBestMask = function(e, r) {
      var n = Object.keys(t.Patterns).length;
      var o = 0;
      var i = Infinity;
      for (var a = 0; a < n; a++) {
        r(a), t.applyMask(a, e);
        var s = t.getPenaltyN1(e) + t.getPenaltyN2(e) + t.getPenaltyN3(e) + t.getPenaltyN4(e);
        t.applyMask(a, e), s < i && (i = s, o = a);
      }
      return o;
    };
  },
  76910: (e, t, r) => {
    var n = r(43114);
    var o = r(7007);
    t.NUMERIC = {
      id: 'Numeric',
      bit: 1,
      ccBits: [ 10, 12, 14 ]
    }, t.ALPHANUMERIC = {
      id: 'Alphanumeric',
      bit: 2,
      ccBits: [ 9, 11, 13 ]
    }, t.BYTE = {
      id: 'Byte',
      bit: 4,
      ccBits: [ 8, 16, 16 ]
    }, t.KANJI = {
      id: 'Kanji',
      bit: 8,
      ccBits: [ 8, 10, 12 ]
    }, t.MIXED = {
      bit: -1
    }, t.getCharCountIndicator = function(e, t) {
      if (!e.ccBits) throw new Error('Invalid mode: ' + e);
      if (!n.isValid(t)) throw new Error('Invalid version: ' + t);
      return t >= 1 && t < 10 ? e.ccBits[0] : t < 27 ? e.ccBits[1] : e.ccBits[2];
    }, t.getBestModeForData = function(e) {
      return o.testNumeric(e) ? t.NUMERIC : o.testAlphanumeric(e) ? t.ALPHANUMERIC : o.testKanji(e) ? t.KANJI : t.BYTE;
    }, t.toString = function(e) {
      if (e && e.id) return e.id;
      throw new Error('Invalid mode');
    }, t.isValid = function(e) {
      return e && e.bit && e.ccBits;
    }, t.from = function(e, r) {
      if (t.isValid(e)) return e;
      try {
        return function(e) {
          if ('string' != typeof e) throw new Error('Param is not a string');
          switch (e.toLowerCase()) {
           case 'numeric':
            return t.NUMERIC;

           case 'alphanumeric':
            return t.ALPHANUMERIC;

           case 'kanji':
            return t.KANJI;

           case 'byte':
            return t.BYTE;

           default:
            throw new Error('Unknown mode: ' + e);
          }
        }(e);
      } catch (n) {
        return r;
      }
    };
  },
  41085: (e, t, r) => {
    var n = r(76910);
    function o(e) {
      this.mode = n.NUMERIC, this.data = e.toString();
    }
    o.getBitsLength = function(e) {
      return 10 * Math.floor(e / 3) + (e % 3 ? e % 3 * 3 + 1 : 0);
    }, o.prototype.getLength = function() {
      return this.data.length;
    }, o.prototype.getBitsLength = function() {
      return o.getBitsLength(this.data.length);
    }, o.prototype.write = function(e) {
      var t, r, n;
      for (t = 0; t + 3 <= this.data.length; t += 3) r = this.data.substr(t, 3), n = parseInt(r, 10), e.put(n, 10);
      var o = this.data.length - t;
      o > 0 && (r = this.data.substr(t), n = parseInt(r, 10), e.put(n, 3 * o + 1));
    }, e.exports = o;
  },
  26143: (e, t, r) => {
    var n = r(99131);
    var o = r(69729);
    t.mul = function(e, t) {
      var r = n.alloc(e.length + t.length - 1);
      for (var i = 0; i < e.length; i++) for (var a = 0; a < t.length; a++) r[i + a] ^= o.mul(e[i], t[a]);
      return r;
    }, t.mod = function(e, t) {
      var r = n.from(e);
      for (;r.length - t.length >= 0; ) {
        var i = r[0];
        for (var a = 0; a < t.length; a++) r[a] ^= o.mul(t[a], i);
        var s = 0;
        for (;s < r.length && 0 === r[s]; ) s++;
        r = r.slice(s);
      }
      return r;
    }, t.generateECPolynomial = function(e) {
      var r = n.from([ 1 ]);
      for (var i = 0; i < e; i++) r = t.mul(r, [ 1, o.exp(i) ]);
      return r;
    };
  },
  95115: (e, t, r) => {
    var n = r(99131);
    var o = r(10242);
    var i = r(64908);
    var a = r(97245);
    var s = r(73280);
    var c = r(21845);
    var u = r(76526);
    var l = r(27126);
    var f = r(35393);
    var h = r(52882);
    var d = r(23103);
    var p = r(61642);
    var v = r(76910);
    var g = r(16130);
    var m = r(55147);
    function y(e, t, r) {
      var n = e.size;
      var o = p.getEncodedBits(t, r);
      var i, a;
      for (i = 0; i < 15; i++) a = 1 == (o >> i & 1), i < 6 ? e.set(i, 8, a, !0) : i < 8 ? e.set(i + 1, 8, a, !0) : e.set(n - 15 + i, 8, a, !0), 
      i < 8 ? e.set(8, n - i - 1, a, !0) : i < 9 ? e.set(8, 15 - i - 1 + 1, a, !0) : e.set(8, 15 - i - 1, a, !0);
      e.set(n - 8, 8, 1, !0);
    }
    function _(e, t, r) {
      var i = new a;
      r.forEach((function(t) {
        i.put(t.mode.bit, 4), i.put(t.getLength(), v.getCharCountIndicator(t.mode, e)), t.write(i);
      }));
      var s = 8 * (o.getSymbolTotalCodewords(e) - f.getTotalCodewordsCount(e, t));
      for (i.getLengthInBits() + 4 <= s && i.put(0, 4); i.getLengthInBits() % 8 != 0; ) i.putBit(0);
      var c = (s - i.getLengthInBits()) / 8;
      for (var u = 0; u < c; u++) i.put(u % 2 ? 17 : 236, 8);
      return function(e, t, r) {
        var i = o.getSymbolTotalCodewords(t);
        var a = f.getTotalCodewordsCount(t, r);
        var s = i - a;
        var c = f.getBlocksCount(t, r);
        var u = c - i % c;
        var l = Math.floor(i / c);
        var d = Math.floor(s / c);
        var p = d + 1;
        var v = l - d;
        var g = new h(v);
        var m = 0;
        var y = new Array(c);
        var _ = new Array(c);
        var w = 0;
        var b = n.from(e.buffer);
        for (var x = 0; x < c; x++) {
          var k = x < u ? d : p;
          y[x] = b.slice(m, m + k), _[x] = g.encode(y[x]), m += k, w = Math.max(w, k);
        }
        var M = n.alloc(i);
        var E = 0;
        var A, C;
        for (A = 0; A < w; A++) for (C = 0; C < c; C++) A < y[C].length && (M[E++] = y[C][A]);
        for (A = 0; A < v; A++) for (C = 0; C < c; C++) M[E++] = _[C][A];
        return M;
      }(i, e, t);
    }
    function w(e, t, r, n) {
      var i;
      if (m(e)) i = g.fromArray(e); else {
        if ('string' != typeof e) throw new Error('Invalid data');
        var a = t;
        if (!a) {
          var f = g.rawSplit(e);
          a = d.getBestVersionForData(f, r);
        }
        i = g.fromString(e, a || 40);
      }
      var h = d.getBestVersionForData(i, r);
      if (!h) throw new Error('The amount of data is too big to be stored in a QR Code');
      if (t) {
        if (t < h) throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + h + '.\n');
      } else t = h;
      var p = _(t, r, i);
      var v = o.getSymbolSize(t);
      var w = new s(v);
      return function(e, t) {
        var r = e.size;
        var n = u.getPositions(t);
        for (var o = 0; o < n.length; o++) {
          var i = n[o][0];
          var a = n[o][1];
          for (var s = -1; s <= 7; s++) if (!(i + s <= -1 || r <= i + s)) for (var c = -1; c <= 7; c++) a + c <= -1 || r <= a + c || (s >= 0 && s <= 6 && (0 === c || 6 === c) || c >= 0 && c <= 6 && (0 === s || 6 === s) || s >= 2 && s <= 4 && c >= 2 && c <= 4 ? e.set(i + s, a + c, !0, !0) : e.set(i + s, a + c, !1, !0));
        }
      }(w, t), function(e) {
        var t = e.size;
        for (var r = 8; r < t - 8; r++) {
          var n = r % 2 == 0;
          e.set(r, 6, n, !0), e.set(6, r, n, !0);
        }
      }(w), function(e, t) {
        var r = c.getPositions(t);
        for (var n = 0; n < r.length; n++) {
          var o = r[n][0];
          var i = r[n][1];
          for (var a = -2; a <= 2; a++) for (var s = -2; s <= 2; s++) -2 === a || 2 === a || -2 === s || 2 === s || 0 === a && 0 === s ? e.set(o + a, i + s, !0, !0) : e.set(o + a, i + s, !1, !0);
        }
      }(w, t), y(w, r, 0), t >= 7 && function(e, t) {
        var r = e.size;
        var n = d.getEncodedBits(t);
        var o, i, a;
        for (var s = 0; s < 18; s++) o = Math.floor(s / 3), i = s % 3 + r - 8 - 3, a = 1 == (n >> s & 1), e.set(o, i, a, !0), e.set(i, o, a, !0);
      }(w, t), function(e, t) {
        var r = e.size;
        var n = -1;
        var o = r - 1;
        var i = 7;
        var a = 0;
        for (var s = r - 1; s > 0; s -= 2) for (6 === s && s--; ;) {
          for (var c = 0; c < 2; c++) if (!e.isReserved(o, s - c)) {
            var u = !1;
            a < t.length && (u = 1 == (t[a] >>> i & 1)), e.set(o, s - c, u), -1 == --i && (a++, i = 7);
          }
          if ((o += n) < 0 || r <= o) {
            o -= n, n = -n;
            break;
          }
        }
      }(w, p), isNaN(n) && (n = l.getBestMask(w, y.bind(null, w, r))), l.applyMask(n, w), y(w, r, n), {
        modules: w,
        version: t,
        errorCorrectionLevel: r,
        maskPattern: n,
        segments: i
      };
    }
    t.create = function(e, t) {
      if (void 0 === e || '' === e) throw new Error('No input text');
      var r = i.M;
      var n;
      var a;
      return void 0 !== t && (r = i.from(t.errorCorrectionLevel, i.M), n = d.from(t.version), a = l.from(t.maskPattern), t.toSJISFunc && o.setToSJISFunction(t.toSJISFunc)), 
      w(e, n, r, a);
    };
  },
  52882: (e, t, r) => {
    var n = r(99131);
    var o = r(26143);
    var i = r(6772).lW;
    function a(e) {
      this.genPoly = void 0, this.degree = e, this.degree && this.initialize(this.degree);
    }
    a.prototype.initialize = function(e) {
      this.degree = e, this.genPoly = o.generateECPolynomial(this.degree);
    }, a.prototype.encode = function(e) {
      if (!this.genPoly) throw new Error('Encoder not initialized');
      var t = n.alloc(this.degree);
      var r = i.concat([ e, t ], e.length + this.degree);
      var a = o.mod(r, this.genPoly);
      var s = this.degree - a.length;
      if (s > 0) {
        var c = n.alloc(this.degree);
        return a.copy(c, s), c;
      }
      return a;
    }, e.exports = a;
  },
  7007: (e, t) => {
    var r = '[0-9]+';
    var n = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
    var o = '(?:(?![A-Z0-9 $%*+\\-./:]|' + (n = n.replace(/u/g, '\\u')) + ')(?:.|[\r\n]))+';
    t.KANJI = new RegExp(n, 'g'), t.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g'), t.BYTE = new RegExp(o, 'g'), t.NUMERIC = new RegExp(r, 'g'), 
    t.ALPHANUMERIC = new RegExp('[A-Z $%*+\\-./:]+', 'g');
    var i = new RegExp('^' + n + '$');
    var a = new RegExp("^[0-9]+$");
    var s = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');
    t.testKanji = function(e) {
      return i.test(e);
    }, t.testNumeric = function(e) {
      return a.test(e);
    }, t.testAlphanumeric = function(e) {
      return s.test(e);
    };
  },
  16130: (e, t, r) => {
    var n = r(76910);
    var o = r(41085);
    var i = r(8260);
    var a = r(43424);
    var s = r(35442);
    var c = r(7007);
    var u = r(10242);
    var l = r(65987);
    function f(e) {
      return unescape(encodeURIComponent(e)).length;
    }
    function h(e, t, r) {
      var n = [];
      var o;
      for (;null !== (o = e.exec(r)); ) n.push({
        data: o[0],
        index: o.index,
        mode: t,
        length: o[0].length
      });
      return n;
    }
    function d(e) {
      var t = h(c.NUMERIC, n.NUMERIC, e);
      var r = h(c.ALPHANUMERIC, n.ALPHANUMERIC, e);
      var o;
      var i;
      return u.isKanjiModeEnabled() ? (o = h(c.BYTE, n.BYTE, e), i = h(c.KANJI, n.KANJI, e)) : (o = h(c.BYTE_KANJI, n.BYTE, e), 
      i = []), t.concat(r, o, i).sort((function(e, t) {
        return e.index - t.index;
      })).map((function(e) {
        return {
          data: e.data,
          mode: e.mode,
          length: e.length
        };
      }));
    }
    function p(e, t) {
      switch (t) {
       case n.NUMERIC:
        return o.getBitsLength(e);

       case n.ALPHANUMERIC:
        return i.getBitsLength(e);

       case n.KANJI:
        return s.getBitsLength(e);

       case n.BYTE:
        return a.getBitsLength(e);
      }
    }
    function v(e, t) {
      var r;
      var c = n.getBestModeForData(e);
      if ((r = n.from(t, c)) !== n.BYTE && r.bit < c.bit) throw new Error('"' + e + "\" cannot be encoded with mode " + n.toString(r) + '.\n Suggested mode is: ' + n.toString(c));
      switch (r !== n.KANJI || u.isKanjiModeEnabled() || (r = n.BYTE), r) {
       case n.NUMERIC:
        return new o(e);

       case n.ALPHANUMERIC:
        return new i(e);

       case n.KANJI:
        return new s(e);

       case n.BYTE:
        return new a(e);
      }
    }
    t.fromArray = function(e) {
      return e.reduce((function(e, t) {
        return 'string' == typeof t ? e.push(v(t, null)) : t.data && e.push(v(t.data, t.mode)), e;
      }), []);
    }, t.fromString = function(e, r) {
      var o = function(e) {
        var t = [];
        for (var r = 0; r < e.length; r++) {
          var o = e[r];
          switch (o.mode) {
           case n.NUMERIC:
            t.push([ o, {
              data: o.data,
              mode: n.ALPHANUMERIC,
              length: o.length
            }, {
              data: o.data,
              mode: n.BYTE,
              length: o.length
            } ]);
            break;

           case n.ALPHANUMERIC:
            t.push([ o, {
              data: o.data,
              mode: n.BYTE,
              length: o.length
            } ]);
            break;

           case n.KANJI:
            t.push([ o, {
              data: o.data,
              mode: n.BYTE,
              length: f(o.data)
            } ]);
            break;

           case n.BYTE:
            t.push([ {
              data: o.data,
              mode: n.BYTE,
              length: f(o.data)
            } ]);
          }
        }
        return t;
      }(d(e, u.isKanjiModeEnabled()));
      var i = function(e, t) {
        var r = {};
        var o = {
          start: {}
        };
        var i = [ 'start' ];
        for (var a = 0; a < e.length; a++) {
          var s = e[a];
          var c = [];
          for (var u = 0; u < s.length; u++) {
            var l = s[u];
            var f = '' + a + u;
            c.push(f), r[f] = {
              node: l,
              lastCount: 0
            }, o[f] = {};
            for (var h = 0; h < i.length; h++) {
              var d = i[h];
              r[d] && r[d].node.mode === l.mode ? (o[d][f] = p(r[d].lastCount + l.length, l.mode) - p(r[d].lastCount, l.mode), r[d].lastCount += l.length) : (r[d] && (r[d].lastCount = l.length), 
              o[d][f] = p(l.length, l.mode) + 4 + n.getCharCountIndicator(l.mode, t));
            }
          }
          i = c;
        }
        for (h = 0; h < i.length; h++) o[i[h]].end = 0;
        return {
          map: o,
          table: r
        };
      }(o, r);
      var a = l.find_path(i.map, 'start', 'end');
      var s = [];
      for (var c = 1; c < a.length - 1; c++) s.push(i.table[a[c]].node);
      return t.fromArray(function(e) {
        return e.reduce((function(e, t) {
          var r = e.length - 1 >= 0 ? e[e.length - 1] : null;
          return r && r.mode === t.mode ? (e[e.length - 1].data += t.data, e) : (e.push(t), e);
        }), []);
      }(s));
    }, t.rawSplit = function(e) {
      return t.fromArray(d(e, u.isKanjiModeEnabled()));
    };
  },
  10242: (e, t) => {
    var r;
    var n = [ 0, 26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706 ];
    t.getSymbolSize = function(e) {
      if (!e) throw new Error('"version" cannot be null or undefined');
      if (e < 1 || e > 40) throw new Error('"version" should be in range from 1 to 40');
      return 4 * e + 17;
    }, t.getSymbolTotalCodewords = function(e) {
      return n[e];
    }, t.getBCHDigit = function(e) {
      var t = 0;
      for (;0 !== e; ) t++, e >>>= 1;
      return t;
    }, t.setToSJISFunction = function(e) {
      if ('function' != typeof e) throw new Error('"toSJISFunc" is not a valid function.');
      r = e;
    }, t.isKanjiModeEnabled = function() {
      return void 0 !== r;
    }, t.toSJIS = function(e) {
      return r(e);
    };
  },
  43114: (e, t) => {
    t.isValid = function(e) {
      return !isNaN(e) && e >= 1 && e <= 40;
    };
  },
  23103: (e, t, r) => {
    var n = r(10242);
    var o = r(35393);
    var i = r(64908);
    var a = r(76910);
    var s = r(43114);
    var c = r(55147);
    var u = n.getBCHDigit(7973);
    function l(e, t) {
      return a.getCharCountIndicator(e, t) + 4;
    }
    function f(e, t) {
      var r = 0;
      return e.forEach((function(e) {
        var n = l(e.mode, t);
        r += n + e.getBitsLength();
      })), r;
    }
    t.from = function(e, t) {
      return s.isValid(e) ? parseInt(e, 10) : t;
    }, t.getCapacity = function(e, t, r) {
      if (!s.isValid(e)) throw new Error('Invalid QR Code version');
      void 0 === r && (r = a.BYTE);
      var i = 8 * (n.getSymbolTotalCodewords(e) - o.getTotalCodewordsCount(e, t));
      if (r === a.MIXED) return i;
      var c = i - l(r, e);
      switch (r) {
       case a.NUMERIC:
        return Math.floor(c / 10 * 3);

       case a.ALPHANUMERIC:
        return Math.floor(c / 11 * 2);

       case a.KANJI:
        return Math.floor(c / 13);

       case a.BYTE:
       default:
        return Math.floor(c / 8);
      }
    }, t.getBestVersionForData = function(e, r) {
      var n;
      var o = i.from(r, i.M);
      if (c(e)) {
        if (e.length > 1) return function(e, r) {
          for (var n = 1; n <= 40; n++) if (f(e, n) <= t.getCapacity(n, r, a.MIXED)) return n;
        }(e, o);
        if (0 === e.length) return 1;
        n = e[0];
      } else n = e;
      return function(e, r, n) {
        for (var o = 1; o <= 40; o++) if (r <= t.getCapacity(o, n, e)) return o;
      }(n.mode, n.getLength(), o);
    }, t.getEncodedBits = function(e) {
      if (!s.isValid(e) || e < 7) throw new Error('Invalid QR Code version');
      var t = e << 12;
      for (;n.getBCHDigit(t) - u >= 0; ) t ^= 7973 << n.getBCHDigit(t) - u;
      return e << 12 | t;
    };
  },
  6907: (e, t, r) => {
    var n = r(89653);
    t.render = function(e, t, r) {
      var o = r;
      var i = t;
      void 0 !== o || t && t.getContext || (o = t, t = void 0), t || (i = function() {
        try {
          return document.createElement('canvas');
        } catch (e) {
          throw new Error('You need to specify a canvas element');
        }
      }()), o = n.getOptions(o);
      var a = n.getImageWidth(e.modules.size, o);
      var s = i.getContext('2d');
      var c = s.createImageData(a, a);
      return n.qrToImageData(c.data, e, o), function(e, t, r) {
        e.clearRect(0, 0, t.width, t.height), t.style || (t.style = {}), t.height = r, t.width = r, t.style.height = r + 'px', t.style.width = r + 'px';
      }(s, i, a), s.putImageData(c, 0, 0), i;
    }, t.renderToDataURL = function(e, r, n) {
      var o = n;
      void 0 !== o || r && r.getContext || (o = r, r = void 0), o || (o = {});
      var i = t.render(e, r, o);
      var a = o.type || 'image/png';
      var s = o.rendererOpts || {};
      return i.toDataURL(a, s.quality);
    };
  },
  93776: (e, t, r) => {
    var n = r(89653);
    function o(e, t) {
      var r = e.a / 255;
      var n = t + '="' + e.hex + '"';
      return r < 1 ? n + ' ' + t + '-opacity="' + r.toFixed(2).slice(1) + '"' : n;
    }
    function i(e, t, r) {
      var n = e + t;
      return void 0 !== r && (n += ' ' + r), n;
    }
    t.render = function(e, t, r) {
      var a = n.getOptions(t);
      var s = e.modules.size;
      var c = e.modules.data;
      var u = s + 2 * a.margin;
      var l = a.color.light.a ? '<path ' + o(a.color.light, 'fill') + ' d="M0 0h' + u + 'v' + u + 'H0z"/>' : '';
      var f = '<path ' + o(a.color.dark, 'stroke') + ' d="' + function(e, t, r) {
        var n = '';
        var o = 0;
        var a = !1;
        var s = 0;
        for (var c = 0; c < e.length; c++) {
          var u = Math.floor(c % t);
          var l = Math.floor(c / t);
          u || a || (a = !0), e[c] ? (s++, c > 0 && u > 0 && e[c - 1] || (n += a ? i('M', u + r, .5 + l + r) : i('m', o, 0), o = 0, 
          a = !1), u + 1 < t && e[c + 1] || (n += i('h', s), s = 0)) : o++;
        }
        return n;
      }(c, s, a.margin) + '"/>';
      var h = "viewBox=\"0 0 " + u + ' ' + u + '"';
      var d = '<svg xmlns="http://www.w3.org/2000/svg" ' + (a.width ? 'width="' + a.width + '" height="' + a.width + '" ' : '') + h + ' shape-rendering="crispEdges">' + l + f + '</svg>\n';
      return 'function' == typeof r && r(null, d), d;
    };
  },
  89653: (e, t) => {
    function r(e) {
      if ('number' == typeof e && (e = e.toString()), 'string' != typeof e) throw new Error('Color should be defined as hex string');
      var t = e.slice().replace('#', '').split('');
      if (t.length < 3 || 5 === t.length || t.length > 8) throw new Error('Invalid hex color: ' + e);
      3 !== t.length && 4 !== t.length || (t = Array.prototype.concat.apply([], t.map((function(e) {
        return [ e, e ];
      })))), 6 === t.length && t.push('F', 'F');
      var r = parseInt(t.join(''), 16);
      return {
        r: r >> 24 & 255,
        g: r >> 16 & 255,
        b: r >> 8 & 255,
        a: 255 & r,
        hex: '#' + t.slice(0, 6).join('')
      };
    }
    t.getOptions = function(e) {
      e || (e = {}), e.color || (e.color = {});
      var t = void 0 === e.margin || null === e.margin || e.margin < 0 ? 4 : e.margin;
      var n = e.width && e.width >= 21 ? e.width : void 0;
      var o = e.scale || 4;
      return {
        width: n,
        scale: n ? 4 : o,
        margin: t,
        color: {
          dark: r(e.color.dark || '#000000ff'),
          light: r(e.color.light || '#ffffffff')
        },
        type: e.type,
        rendererOpts: e.rendererOpts || {}
      };
    }, t.getScale = function(e, t) {
      return t.width && t.width >= e + 2 * t.margin ? t.width / (e + 2 * t.margin) : t.scale;
    }, t.getImageWidth = function(e, r) {
      var n = t.getScale(e, r);
      return Math.floor((e + 2 * r.margin) * n);
    }, t.qrToImageData = function(e, r, n) {
      var o = r.modules.size;
      var i = r.modules.data;
      var a = t.getScale(o, n);
      var s = Math.floor((o + 2 * n.margin) * a);
      var c = n.margin * a;
      var u = [ n.color.light, n.color.dark ];
      for (var l = 0; l < s; l++) for (var f = 0; f < s; f++) {
        var h = 4 * (l * s + f);
        var d = n.color.light;
        if (l >= c && f >= c && l < s - c && f < s - c) d = u[i[Math.floor((l - c) / a) * o + Math.floor((f - c) / a)] ? 1 : 0];
        e[h++] = d.r, e[h++] = d.g, e[h++] = d.b, e[h] = d.a;
      }
    };
  },
  99131: (e, t, r) => {
    "use strict";
    var n = r(55147);
    i.TYPED_ARRAY_SUPPORT = function() {
      try {
        var e = new Uint8Array(1);
        return e.__proto__ = {
          __proto__: Uint8Array.prototype,
          foo: function() {
            return 42;
          }
        }, 42 === e.foo();
      } catch (t) {
        return !1;
      }
    }();
    var o = i.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    function i(e, t, r) {
      return i.TYPED_ARRAY_SUPPORT || this instanceof i ? 'number' == typeof e ? c(this, e) : function(e, t, r, n) {
        if ('number' == typeof t) throw new TypeError('"value" argument must not be a number');
        if ('undefined' != typeof ArrayBuffer && t instanceof ArrayBuffer) return function(e, t, r, n) {
          if (r < 0 || t.byteLength < r) throw new RangeError('\'offset\' is out of bounds');
          if (t.byteLength < r + (n || 0)) throw new RangeError('\'length\' is out of bounds');
          var o;
          o = void 0 === r && void 0 === n ? new Uint8Array(t) : void 0 === n ? new Uint8Array(t, r) : new Uint8Array(t, r, n);
          i.TYPED_ARRAY_SUPPORT ? o.__proto__ = i.prototype : o = u(e, o);
          return o;
        }(e, t, r, n);
        if ('string' == typeof t) return function(e, t) {
          var r = 0 | f(t);
          var n = s(e, r);
          var o = n.write(t);
          o !== r && (n = n.slice(0, o));
          return n;
        }(e, t);
        return function(e, t) {
          if (i.isBuffer(t)) {
            var r = 0 | a(t.length);
            var n = s(e, r);
            return 0 === n.length || t.copy(n, 0, 0, r), n;
          }
          if (t) {
            if ('undefined' != typeof ArrayBuffer && t.buffer instanceof ArrayBuffer || 'length' in t) return 'number' != typeof t.length || function(e) {
              return e != e;
            }(t.length) ? s(e, 0) : u(e, t);
            if ('Buffer' === t.type && Array.isArray(t.data)) return u(e, t.data);
          }
          throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
        }(e, t);
      }(this, e, t, r) : new i(e, t, r);
    }
    function a(e) {
      if (e >= o) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + o.toString(16) + ' bytes');
      return 0 | e;
    }
    function s(e, t) {
      var r;
      return i.TYPED_ARRAY_SUPPORT ? (r = new Uint8Array(t)).__proto__ = i.prototype : (null === (r = e) && (r = new i(t)), r.length = t), 
      r;
    }
    function c(e, t) {
      var r = s(e, t < 0 ? 0 : 0 | a(t));
      if (!i.TYPED_ARRAY_SUPPORT) for (var n = 0; n < t; ++n) r[n] = 0;
      return r;
    }
    function u(e, t) {
      var r = t.length < 0 ? 0 : 0 | a(t.length);
      var n = s(e, r);
      for (var o = 0; o < r; o += 1) n[o] = 255 & t[o];
      return n;
    }
    function l(e, t) {
      var r;
      t = t || Infinity;
      var n = e.length;
      var o = null;
      var i = [];
      for (var a = 0; a < n; ++a) {
        if ((r = e.charCodeAt(a)) > 55295 && r < 57344) {
          if (!o) {
            if (r > 56319) {
              (t -= 3) > -1 && i.push(239, 191, 189);
              continue;
            }
            if (a + 1 === n) {
              (t -= 3) > -1 && i.push(239, 191, 189);
              continue;
            }
            o = r;
            continue;
          }
          if (r < 56320) {
            (t -= 3) > -1 && i.push(239, 191, 189), o = r;
            continue;
          }
          r = 65536 + (o - 55296 << 10 | r - 56320);
        } else o && (t -= 3) > -1 && i.push(239, 191, 189);
        if (o = null, r < 128) {
          if ((t -= 1) < 0) break;
          i.push(r);
        } else if (r < 2048) {
          if ((t -= 2) < 0) break;
          i.push(r >> 6 | 192, 63 & r | 128);
        } else if (r < 65536) {
          if ((t -= 3) < 0) break;
          i.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
        } else {
          if (!(r < 1114112)) throw new Error('Invalid code point');
          if ((t -= 4) < 0) break;
          i.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
        }
      }
      return i;
    }
    function f(e) {
      return i.isBuffer(e) ? e.length : 'undefined' != typeof ArrayBuffer && 'function' == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer) ? e.byteLength : ('string' != typeof e && (e = '' + e), 
      0 === e.length ? 0 : l(e).length);
    }
    i.TYPED_ARRAY_SUPPORT && (i.prototype.__proto__ = Uint8Array.prototype, i.__proto__ = Uint8Array, 'undefined' != typeof Symbol && Symbol.species && i[Symbol.species] === i && Object.defineProperty(i, Symbol.species, {
      value: null,
      configurable: !0,
      enumerable: !1,
      writable: !1
    })), i.prototype.write = function(e, t, r) {
      void 0 === t || void 0 === r && 'string' == typeof t ? (r = this.length, t = 0) : isFinite(t) && (t |= 0, isFinite(r) ? r |= 0 : r = void 0);
      var n = this.length - t;
      if ((void 0 === r || r > n) && (r = n), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError('Attempt to write outside buffer bounds');
      return function(e, t, r, n) {
        return function(e, t, r, n) {
          for (var o = 0; o < n && !(o + r >= t.length || o >= e.length); ++o) t[o + r] = e[o];
          return o;
        }(l(t, e.length - r), e, r, n);
      }(this, e, t, r);
    }, i.prototype.slice = function(e, t) {
      var r = this.length;
      var n;
      if ((e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), 
      t < e && (t = e), i.TYPED_ARRAY_SUPPORT) (n = this.subarray(e, t)).__proto__ = i.prototype; else {
        var o = t - e;
        n = new i(o, void 0);
        for (var a = 0; a < o; ++a) n[a] = this[a + e];
      }
      return n;
    }, i.prototype.copy = function(e, t, r, n) {
      if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), 
      n === r) return 0;
      if (0 === e.length || 0 === this.length) return 0;
      if (t < 0) throw new RangeError('targetStart out of bounds');
      if (r < 0 || r >= this.length) throw new RangeError('sourceStart out of bounds');
      if (n < 0) throw new RangeError('sourceEnd out of bounds');
      n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
      var o = n - r;
      var a;
      if (this === e && r < t && t < n) for (a = o - 1; a >= 0; --a) e[a + t] = this[a + r]; else if (o < 1e3 || !i.TYPED_ARRAY_SUPPORT) for (a = 0; a < o; ++a) e[a + t] = this[a + r]; else Uint8Array.prototype.set.call(e, this.subarray(r, r + o), t);
      return o;
    }, i.prototype.fill = function(e, t, r) {
      if ('string' == typeof e) {
        if ('string' == typeof t ? (t = 0, r = this.length) : 'string' == typeof r && (r = this.length), 1 === e.length) {
          var n = e.charCodeAt(0);
          n < 256 && (e = n);
        }
      } else 'number' == typeof e && (e &= 255);
      if (t < 0 || this.length < t || this.length < r) throw new RangeError('Out of range index');
      if (r <= t) return this;
      var o;
      if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), 'number' == typeof e) for (o = t; o < r; ++o) this[o] = e; else {
        var a = i.isBuffer(e) ? e : new i(e);
        var s = a.length;
        for (o = 0; o < r - t; ++o) this[o + t] = a[o % s];
      }
      return this;
    }, i.concat = function(e, t) {
      if (!n(e)) throw new TypeError('"list" argument must be an Array of Buffers');
      if (0 === e.length) return s(null, 0);
      var r;
      if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;
      var o = c(null, t);
      var a = 0;
      for (r = 0; r < e.length; ++r) {
        var u = e[r];
        if (!i.isBuffer(u)) throw new TypeError('"list" argument must be an Array of Buffers');
        u.copy(o, a), a += u.length;
      }
      return o;
    }, i.byteLength = f, i.prototype._isBuffer = !0, i.isBuffer = function(e) {
      return !(null == e || !e._isBuffer);
    }, e.exports.alloc = function(e) {
      var t = new i(e);
      return t.fill(0), t;
    }, e.exports.from = function(e) {
      return new i(e);
    };
  },
  6772: (e, t, r) => {
    "use strict";
    var n = r(25108);
    var o = r(79742);
    var i = r(80645);
    var a = 'function' == typeof Symbol && 'function' == typeof Symbol.for ? Symbol.for('nodejs.util.inspect.custom') : null;
    t.lW = u, t.h2 = 50;
    var s = 2147483647;
    function c(e) {
      if (e > s) throw new RangeError('The value "' + e + '" is invalid for option "size"');
      var t = new Uint8Array(e);
      return Object.setPrototypeOf(t, u.prototype), t;
    }
    function u(e, t, r) {
      if ('number' == typeof e) {
        if ('string' == typeof t) throw new TypeError('The "string" argument must be of type string. Received type number');
        return h(e);
      }
      return l(e, t, r);
    }
    function l(e, t, r) {
      if ('string' == typeof e) return function(e, t) {
        'string' == typeof t && '' !== t || (t = 'utf8');
        if (!u.isEncoding(t)) throw new TypeError('Unknown encoding: ' + t);
        var r = 0 | g(e, t);
        var n = c(r);
        var o = n.write(e, t);
        o !== r && (n = n.slice(0, o));
        return n;
      }(e, t);
      if (ArrayBuffer.isView(e)) return function(e) {
        if (K(e, Uint8Array)) {
          var t = new Uint8Array(e);
          return p(t.buffer, t.byteOffset, t.byteLength);
        }
        return d(e);
      }(e);
      if (null == e) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
      if (K(e, ArrayBuffer) || e && K(e.buffer, ArrayBuffer)) return p(e, t, r);
      if ('undefined' != typeof SharedArrayBuffer && (K(e, SharedArrayBuffer) || e && K(e.buffer, SharedArrayBuffer))) return p(e, t, r);
      if ('number' == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type number');
      var n = e.valueOf && e.valueOf();
      if (null != n && n !== e) return u.from(n, t, r);
      var o = function(e) {
        if (u.isBuffer(e)) {
          var t = 0 | v(e.length);
          var r = c(t);
          return 0 === r.length || e.copy(r, 0, 0, t), r;
        }
        if (void 0 !== e.length) return 'number' != typeof e.length || D(e.length) ? c(0) : d(e);
        if ('Buffer' === e.type && Array.isArray(e.data)) return d(e.data);
      }(e);
      if (o) return o;
      if ('undefined' != typeof Symbol && null != Symbol.toPrimitive && 'function' == typeof e[Symbol.toPrimitive]) return u.from(e[Symbol.toPrimitive]('string'), t, r);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
    }
    function f(e) {
      if ('number' != typeof e) throw new TypeError('"size" argument must be of type number');
      if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
    }
    function h(e) {
      return f(e), c(e < 0 ? 0 : 0 | v(e));
    }
    function d(e) {
      var t = e.length < 0 ? 0 : 0 | v(e.length);
      var r = c(t);
      for (var n = 0; n < t; n += 1) r[n] = 255 & e[n];
      return r;
    }
    function p(e, t, r) {
      if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
      if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
      var n;
      return n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r), 
      Object.setPrototypeOf(n, u.prototype), n;
    }
    function v(e) {
      if (e >= s) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s.toString(16) + ' bytes');
      return 0 | e;
    }
    function g(e, t) {
      if (u.isBuffer(e)) return e.length;
      if (ArrayBuffer.isView(e) || K(e, ArrayBuffer)) return e.byteLength;
      if ('string' != typeof e) throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof e);
      var r = e.length;
      var n = arguments.length > 2 && !0 === arguments[2];
      if (!n && 0 === r) return 0;
      var o = !1;
      for (;;) switch (t) {
       case 'ascii':
       case 'latin1':
       case 'binary':
        return r;

       case 'utf8':
       case 'utf-8':
        return q(e).length;

       case 'ucs2':
       case 'ucs-2':
       case 'utf16le':
       case 'utf-16le':
        return 2 * r;

       case 'hex':
        return r >>> 1;

       case 'base64':
        return H(e).length;

       default:
        if (o) return n ? -1 : q(e).length;
        t = ('' + t).toLowerCase(), o = !0;
      }
    }
    function m(e, t, r) {
      var n = !1;
      if ((void 0 === t || t < 0) && (t = 0), t > this.length) return '';
      if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return '';
      if ((r >>>= 0) <= (t >>>= 0)) return '';
      for (e || (e = 'utf8'); ;) switch (e) {
       case 'hex':
        return B(this, t, r);

       case 'utf8':
       case 'utf-8':
        return C(this, t, r);

       case 'ascii':
        return T(this, t, r);

       case 'latin1':
       case 'binary':
        return R(this, t, r);

       case 'base64':
        return A(this, t, r);

       case 'ucs2':
       case 'ucs-2':
       case 'utf16le':
       case 'utf-16le':
        return P(this, t, r);

       default:
        if (n) throw new TypeError('Unknown encoding: ' + e);
        e = (e + '').toLowerCase(), n = !0;
      }
    }
    function y(e, t, r) {
      var n = e[t];
      e[t] = e[r], e[r] = n;
    }
    function _(e, t, r, n, o) {
      if (0 === e.length) return -1;
      if ('string' == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), D(r = +r) && (r = o ? 0 : e.length - 1), 
      r < 0 && (r = e.length + r), r >= e.length) {
        if (o) return -1;
        r = e.length - 1;
      } else if (r < 0) {
        if (!o) return -1;
        r = 0;
      }
      if ('string' == typeof t && (t = u.from(t, n)), u.isBuffer(t)) return 0 === t.length ? -1 : w(e, t, r, n, o);
      if ('number' == typeof t) return t &= 255, 'function' == typeof Uint8Array.prototype.indexOf ? o ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : w(e, [ t ], r, n, o);
      throw new TypeError('val must be string, number or Buffer');
    }
    function w(e, t, r, n, o) {
      var i = 1;
      var a = e.length;
      var s = t.length;
      if (void 0 !== n && ('ucs2' === (n = String(n).toLowerCase()) || 'ucs-2' === n || 'utf16le' === n || 'utf-16le' === n)) {
        if (e.length < 2 || t.length < 2) return -1;
        i = 2, a /= 2, s /= 2, r /= 2;
      }
      function c(e, t) {
        return 1 === i ? e[t] : e.readUInt16BE(t * i);
      }
      var u;
      if (o) {
        var l = -1;
        for (u = r; u < a; u++) if (c(e, u) === c(t, -1 === l ? 0 : u - l)) {
          if (-1 === l && (l = u), u - l + 1 === s) return l * i;
        } else -1 !== l && (u -= u - l), l = -1;
      } else for (r + s > a && (r = a - s), u = r; u >= 0; u--) {
        var f = !0;
        for (var h = 0; h < s; h++) if (c(e, u + h) !== c(t, h)) {
          f = !1;
          break;
        }
        if (f) return u;
      }
      return -1;
    }
    function b(e, t, r, n) {
      r = Number(r) || 0;
      var o = e.length - r;
      n ? (n = Number(n)) > o && (n = o) : n = o;
      var i = t.length;
      n > i / 2 && (n = i / 2);
      for (var a = 0; a < n; ++a) {
        var s = parseInt(t.substr(2 * a, 2), 16);
        if (D(s)) return a;
        e[r + a] = s;
      }
      return a;
    }
    function x(e, t, r, n) {
      return F(q(t, e.length - r), e, r, n);
    }
    function k(e, t, r, n) {
      return F(function(e) {
        var t = [];
        for (var r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));
        return t;
      }(t), e, r, n);
    }
    function M(e, t, r, n) {
      return F(H(t), e, r, n);
    }
    function E(e, t, r, n) {
      return F(function(e, t) {
        var r, n, o;
        var i = [];
        for (var a = 0; a < e.length && !((t -= 2) < 0); ++a) n = (r = e.charCodeAt(a)) >> 8, o = r % 256, i.push(o), i.push(n);
        return i;
      }(t, e.length - r), e, r, n);
    }
    function A(e, t, r) {
      return 0 === t && r === e.length ? o.fromByteArray(e) : o.fromByteArray(e.slice(t, r));
    }
    function C(e, t, r) {
      r = Math.min(e.length, r);
      var n = [];
      var o = t;
      for (;o < r; ) {
        var i = e[o];
        var a = null;
        var s = i > 239 ? 4 : i > 223 ? 3 : i > 191 ? 2 : 1;
        var c, u, l, f;
        if (o + s <= r) switch (s) {
         case 1:
          i < 128 && (a = i);
          break;

         case 2:
          128 == (192 & (c = e[o + 1])) && (f = (31 & i) << 6 | 63 & c) > 127 && (a = f);
          break;

         case 3:
          c = e[o + 1], u = e[o + 2], 128 == (192 & c) && 128 == (192 & u) && (f = (15 & i) << 12 | (63 & c) << 6 | 63 & u) > 2047 && (f < 55296 || f > 57343) && (a = f);
          break;

         case 4:
          c = e[o + 1], u = e[o + 2], l = e[o + 3], 128 == (192 & c) && 128 == (192 & u) && 128 == (192 & l) && (f = (15 & i) << 18 | (63 & c) << 12 | (63 & u) << 6 | 63 & l) > 65535 && f < 1114112 && (a = f);
        }
        null === a ? (a = 65533, s = 1) : a > 65535 && (a -= 65536, n.push(a >>> 10 & 1023 | 55296), a = 56320 | 1023 & a), n.push(a), 
        o += s;
      }
      return function(e) {
        var t = e.length;
        if (t <= S) return String.fromCharCode.apply(String, e);
        var r = '';
        var n = 0;
        for (;n < t; ) r += String.fromCharCode.apply(String, e.slice(n, n += S));
        return r;
      }(n);
    }
    u.TYPED_ARRAY_SUPPORT = function() {
      try {
        var e = new Uint8Array(1);
        var t = {
          foo: function() {
            return 42;
          }
        };
        return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), 42 === e.foo();
      } catch (r) {
        return !1;
      }
    }(), u.TYPED_ARRAY_SUPPORT || void 0 === n || 'function' != typeof n.error || n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), 
    Object.defineProperty(u.prototype, 'parent', {
      enumerable: !0,
      get: function() {
        if (u.isBuffer(this)) return this.buffer;
      }
    }), Object.defineProperty(u.prototype, 'offset', {
      enumerable: !0,
      get: function() {
        if (u.isBuffer(this)) return this.byteOffset;
      }
    }), u.poolSize = 8192, u.from = function(e, t, r) {
      return l(e, t, r);
    }, Object.setPrototypeOf(u.prototype, Uint8Array.prototype), Object.setPrototypeOf(u, Uint8Array), u.alloc = function(e, t, r) {
      return function(e, t, r) {
        return f(e), e <= 0 ? c(e) : void 0 !== t ? 'string' == typeof r ? c(e).fill(t, r) : c(e).fill(t) : c(e);
      }(e, t, r);
    }, u.allocUnsafe = function(e) {
      return h(e);
    }, u.allocUnsafeSlow = function(e) {
      return h(e);
    }, u.isBuffer = function(e) {
      return null != e && !0 === e._isBuffer && e !== u.prototype;
    }, u.compare = function(e, t) {
      if (K(e, Uint8Array) && (e = u.from(e, e.offset, e.byteLength)), K(t, Uint8Array) && (t = u.from(t, t.offset, t.byteLength)), 
      !u.isBuffer(e) || !u.isBuffer(t)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (e === t) return 0;
      var r = e.length;
      var n = t.length;
      for (var o = 0, i = Math.min(r, n); o < i; ++o) if (e[o] !== t[o]) {
        r = e[o], n = t[o];
        break;
      }
      return r < n ? -1 : n < r ? 1 : 0;
    }, u.isEncoding = function(e) {
      switch (String(e).toLowerCase()) {
       case 'hex':
       case 'utf8':
       case 'utf-8':
       case 'ascii':
       case 'latin1':
       case 'binary':
       case 'base64':
       case 'ucs2':
       case 'ucs-2':
       case 'utf16le':
       case 'utf-16le':
        return !0;

       default:
        return !1;
      }
    }, u.concat = function(e, t) {
      if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
      if (0 === e.length) return u.alloc(0);
      var r;
      if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;
      var n = u.allocUnsafe(t);
      var o = 0;
      for (r = 0; r < e.length; ++r) {
        var i = e[r];
        if (K(i, Uint8Array)) o + i.length > n.length ? u.from(i).copy(n, o) : Uint8Array.prototype.set.call(n, i, o); else {
          if (!u.isBuffer(i)) throw new TypeError('"list" argument must be an Array of Buffers');
          i.copy(n, o);
        }
        o += i.length;
      }
      return n;
    }, u.byteLength = g, u.prototype._isBuffer = !0, u.prototype.swap16 = function() {
      var e = this.length;
      if (e % 2 != 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
      for (var t = 0; t < e; t += 2) y(this, t, t + 1);
      return this;
    }, u.prototype.swap32 = function() {
      var e = this.length;
      if (e % 4 != 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
      for (var t = 0; t < e; t += 4) y(this, t, t + 3), y(this, t + 1, t + 2);
      return this;
    }, u.prototype.swap64 = function() {
      var e = this.length;
      if (e % 8 != 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
      for (var t = 0; t < e; t += 8) y(this, t, t + 7), y(this, t + 1, t + 6), y(this, t + 2, t + 5), y(this, t + 3, t + 4);
      return this;
    }, u.prototype.toString = function() {
      var e = this.length;
      return 0 === e ? '' : 0 === arguments.length ? C(this, 0, e) : m.apply(this, arguments);
    }, u.prototype.toLocaleString = u.prototype.toString, u.prototype.equals = function(e) {
      if (!u.isBuffer(e)) throw new TypeError('Argument must be a Buffer');
      return this === e || 0 === u.compare(this, e);
    }, u.prototype.inspect = function() {
      var e = '';
      var r = t.h2;
      return e = this.toString('hex', 0, r).replace(/(.{2})/g, '$1 ').trim(), this.length > r && (e += ' ... '), '<Buffer ' + e + '>';
    }, a && (u.prototype[a] = u.prototype.inspect), u.prototype.compare = function(e, t, r, n, o) {
      if (K(e, Uint8Array) && (e = u.from(e, e.offset, e.byteLength)), !u.isBuffer(e)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof e);
      if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === o && (o = this.length), 
      t < 0 || r > e.length || n < 0 || o > this.length) throw new RangeError('out of range index');
      if (n >= o && t >= r) return 0;
      if (n >= o) return -1;
      if (t >= r) return 1;
      if (this === e) return 0;
      var i = (o >>>= 0) - (n >>>= 0);
      var a = (r >>>= 0) - (t >>>= 0);
      var s = Math.min(i, a);
      var c = this.slice(n, o);
      var l = e.slice(t, r);
      for (var f = 0; f < s; ++f) if (c[f] !== l[f]) {
        i = c[f], a = l[f];
        break;
      }
      return i < a ? -1 : a < i ? 1 : 0;
    }, u.prototype.includes = function(e, t, r) {
      return -1 !== this.indexOf(e, t, r);
    }, u.prototype.indexOf = function(e, t, r) {
      return _(this, e, t, r, !0);
    }, u.prototype.lastIndexOf = function(e, t, r) {
      return _(this, e, t, r, !1);
    }, u.prototype.write = function(e, t, r, n) {
      if (void 0 === t) n = 'utf8', r = this.length, t = 0; else if (void 0 === r && 'string' == typeof t) n = t, r = this.length, 
      t = 0; else {
        if (!isFinite(t)) throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
        t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = 'utf8')) : (n = r, r = void 0);
      }
      var o = this.length - t;
      if ((void 0 === r || r > o) && (r = o), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError('Attempt to write outside buffer bounds');
      n || (n = 'utf8');
      var i = !1;
      for (;;) switch (n) {
       case 'hex':
        return b(this, e, t, r);

       case 'utf8':
       case 'utf-8':
        return x(this, e, t, r);

       case 'ascii':
       case 'latin1':
       case 'binary':
        return k(this, e, t, r);

       case 'base64':
        return M(this, e, t, r);

       case 'ucs2':
       case 'ucs-2':
       case 'utf16le':
       case 'utf-16le':
        return E(this, e, t, r);

       default:
        if (i) throw new TypeError('Unknown encoding: ' + n);
        n = ('' + n).toLowerCase(), i = !0;
      }
    }, u.prototype.toJSON = function() {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    var S = 4096;
    function T(e, t, r) {
      var n = '';
      r = Math.min(e.length, r);
      for (var o = t; o < r; ++o) n += String.fromCharCode(127 & e[o]);
      return n;
    }
    function R(e, t, r) {
      var n = '';
      r = Math.min(e.length, r);
      for (var o = t; o < r; ++o) n += String.fromCharCode(e[o]);
      return n;
    }
    function B(e, t, r) {
      var n = e.length;
      (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);
      var o = '';
      for (var i = t; i < r; ++i) o += z[e[i]];
      return o;
    }
    function P(e, t, r) {
      var n = e.slice(t, r);
      var o = '';
      for (var i = 0; i < n.length - 1; i += 2) o += String.fromCharCode(n[i] + 256 * n[i + 1]);
      return o;
    }
    function I(e, t, r) {
      if (e % 1 != 0 || e < 0) throw new RangeError('offset is not uint');
      if (e + t > r) throw new RangeError('Trying to access beyond buffer length');
    }
    function L(e, t, r, n, o, i) {
      if (!u.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (t > o || t < i) throw new RangeError('"value" argument is out of bounds');
      if (r + n > e.length) throw new RangeError('Index out of range');
    }
    function O(e, t, r, n, o, i) {
      if (r + n > e.length) throw new RangeError('Index out of range');
      if (r < 0) throw new RangeError('Index out of range');
    }
    function N(e, t, r, n, o) {
      return t = +t, r >>>= 0, o || O(e, 0, r, 4), i.write(e, t, r, n, 23, 4), r + 4;
    }
    function U(e, t, r, n, o) {
      return t = +t, r >>>= 0, o || O(e, 0, r, 8), i.write(e, t, r, n, 52, 8), r + 8;
    }
    u.prototype.slice = function(e, t) {
      var r = this.length;
      (e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), 
      t < e && (t = e);
      var n = this.subarray(e, t);
      return Object.setPrototypeOf(n, u.prototype), n;
    }, u.prototype.readUintLE = u.prototype.readUIntLE = function(e, t, r) {
      e >>>= 0, t >>>= 0, r || I(e, t, this.length);
      var n = this[e];
      var o = 1;
      var i = 0;
      for (;++i < t && (o *= 256); ) n += this[e + i] * o;
      return n;
    }, u.prototype.readUintBE = u.prototype.readUIntBE = function(e, t, r) {
      e >>>= 0, t >>>= 0, r || I(e, t, this.length);
      var n = this[e + --t];
      var o = 1;
      for (;t > 0 && (o *= 256); ) n += this[e + --t] * o;
      return n;
    }, u.prototype.readUint8 = u.prototype.readUInt8 = function(e, t) {
      return e >>>= 0, t || I(e, 1, this.length), this[e];
    }, u.prototype.readUint16LE = u.prototype.readUInt16LE = function(e, t) {
      return e >>>= 0, t || I(e, 2, this.length), this[e] | this[e + 1] << 8;
    }, u.prototype.readUint16BE = u.prototype.readUInt16BE = function(e, t) {
      return e >>>= 0, t || I(e, 2, this.length), this[e] << 8 | this[e + 1];
    }, u.prototype.readUint32LE = u.prototype.readUInt32LE = function(e, t) {
      return e >>>= 0, t || I(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
    }, u.prototype.readUint32BE = u.prototype.readUInt32BE = function(e, t) {
      return e >>>= 0, t || I(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
    }, u.prototype.readIntLE = function(e, t, r) {
      e >>>= 0, t >>>= 0, r || I(e, t, this.length);
      var n = this[e];
      var o = 1;
      var i = 0;
      for (;++i < t && (o *= 256); ) n += this[e + i] * o;
      return n >= (o *= 128) && (n -= Math.pow(2, 8 * t)), n;
    }, u.prototype.readIntBE = function(e, t, r) {
      e >>>= 0, t >>>= 0, r || I(e, t, this.length);
      var n = t;
      var o = 1;
      var i = this[e + --n];
      for (;n > 0 && (o *= 256); ) i += this[e + --n] * o;
      return i >= (o *= 128) && (i -= Math.pow(2, 8 * t)), i;
    }, u.prototype.readInt8 = function(e, t) {
      return e >>>= 0, t || I(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
    }, u.prototype.readInt16LE = function(e, t) {
      e >>>= 0, t || I(e, 2, this.length);
      var r = this[e] | this[e + 1] << 8;
      return 32768 & r ? 4294901760 | r : r;
    }, u.prototype.readInt16BE = function(e, t) {
      e >>>= 0, t || I(e, 2, this.length);
      var r = this[e + 1] | this[e] << 8;
      return 32768 & r ? 4294901760 | r : r;
    }, u.prototype.readInt32LE = function(e, t) {
      return e >>>= 0, t || I(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
    }, u.prototype.readInt32BE = function(e, t) {
      return e >>>= 0, t || I(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
    }, u.prototype.readFloatLE = function(e, t) {
      return e >>>= 0, t || I(e, 4, this.length), i.read(this, e, !0, 23, 4);
    }, u.prototype.readFloatBE = function(e, t) {
      return e >>>= 0, t || I(e, 4, this.length), i.read(this, e, !1, 23, 4);
    }, u.prototype.readDoubleLE = function(e, t) {
      return e >>>= 0, t || I(e, 8, this.length), i.read(this, e, !0, 52, 8);
    }, u.prototype.readDoubleBE = function(e, t) {
      return e >>>= 0, t || I(e, 8, this.length), i.read(this, e, !1, 52, 8);
    }, u.prototype.writeUintLE = u.prototype.writeUIntLE = function(e, t, r, n) {
      (e = +e, t >>>= 0, r >>>= 0, n) || L(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
      var o = 1;
      var i = 0;
      for (this[t] = 255 & e; ++i < r && (o *= 256); ) this[t + i] = e / o & 255;
      return t + r;
    }, u.prototype.writeUintBE = u.prototype.writeUIntBE = function(e, t, r, n) {
      (e = +e, t >>>= 0, r >>>= 0, n) || L(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
      var o = r - 1;
      var i = 1;
      for (this[t + o] = 255 & e; --o >= 0 && (i *= 256); ) this[t + o] = e / i & 255;
      return t + r;
    }, u.prototype.writeUint8 = u.prototype.writeUInt8 = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;
    }, u.prototype.writeUint16LE = u.prototype.writeUInt16LE = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
    }, u.prototype.writeUint16BE = u.prototype.writeUInt16BE = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
    }, u.prototype.writeUint32LE = u.prototype.writeUInt32LE = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, 
      this[t] = 255 & e, t + 4;
    }, u.prototype.writeUint32BE = u.prototype.writeUInt32BE = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, 
      this[t + 3] = 255 & e, t + 4;
    }, u.prototype.writeIntLE = function(e, t, r, n) {
      if (e = +e, t >>>= 0, !n) {
        var o = Math.pow(2, 8 * r - 1);
        L(this, e, t, r, o - 1, -o);
      }
      var i = 0;
      var a = 1;
      var s = 0;
      for (this[t] = 255 & e; ++i < r && (a *= 256); ) e < 0 && 0 === s && 0 !== this[t + i - 1] && (s = 1), this[t + i] = (e / a >> 0) - s & 255;
      return t + r;
    }, u.prototype.writeIntBE = function(e, t, r, n) {
      if (e = +e, t >>>= 0, !n) {
        var o = Math.pow(2, 8 * r - 1);
        L(this, e, t, r, o - 1, -o);
      }
      var i = r - 1;
      var a = 1;
      var s = 0;
      for (this[t + i] = 255 & e; --i >= 0 && (a *= 256); ) e < 0 && 0 === s && 0 !== this[t + i + 1] && (s = 1), this[t + i] = (e / a >> 0) - s & 255;
      return t + r;
    }, u.prototype.writeInt8 = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
    }, u.prototype.writeInt16LE = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
    }, u.prototype.writeInt16BE = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
    }, u.prototype.writeInt32LE = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, 
      this[t + 3] = e >>> 24, t + 4;
    }, u.prototype.writeInt32BE = function(e, t, r) {
      return e = +e, t >>>= 0, r || L(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, 
      this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
    }, u.prototype.writeFloatLE = function(e, t, r) {
      return N(this, e, t, !0, r);
    }, u.prototype.writeFloatBE = function(e, t, r) {
      return N(this, e, t, !1, r);
    }, u.prototype.writeDoubleLE = function(e, t, r) {
      return U(this, e, t, !0, r);
    }, u.prototype.writeDoubleBE = function(e, t, r) {
      return U(this, e, t, !1, r);
    }, u.prototype.copy = function(e, t, r, n) {
      if (!u.isBuffer(e)) throw new TypeError('argument should be a Buffer');
      if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), 
      n === r) return 0;
      if (0 === e.length || 0 === this.length) return 0;
      if (t < 0) throw new RangeError('targetStart out of bounds');
      if (r < 0 || r >= this.length) throw new RangeError('Index out of range');
      if (n < 0) throw new RangeError('sourceEnd out of bounds');
      n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
      var o = n - r;
      return this === e && 'function' == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(t, r, n) : Uint8Array.prototype.set.call(e, this.subarray(r, n), t), 
      o;
    }, u.prototype.fill = function(e, t, r, n) {
      if ('string' == typeof e) {
        if ('string' == typeof t ? (n = t, t = 0, r = this.length) : 'string' == typeof r && (n = r, r = this.length), void 0 !== n && 'string' != typeof n) throw new TypeError('encoding must be a string');
        if ('string' == typeof n && !u.isEncoding(n)) throw new TypeError('Unknown encoding: ' + n);
        if (1 === e.length) {
          var o = e.charCodeAt(0);
          ('utf8' === n && o < 128 || 'latin1' === n) && (e = o);
        }
      } else 'number' == typeof e ? e &= 255 : 'boolean' == typeof e && (e = Number(e));
      if (t < 0 || this.length < t || this.length < r) throw new RangeError('Out of range index');
      if (r <= t) return this;
      var i;
      if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), 'number' == typeof e) for (i = t; i < r; ++i) this[i] = e; else {
        var a = u.isBuffer(e) ? e : u.from(e, n);
        var s = a.length;
        if (0 === s) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
        for (i = 0; i < r - t; ++i) this[i + t] = a[i % s];
      }
      return this;
    };
    var j = /[^+/0-9A-Za-z-_]/g;
    function q(e, t) {
      var r;
      t = t || Infinity;
      var n = e.length;
      var o = null;
      var i = [];
      for (var a = 0; a < n; ++a) {
        if ((r = e.charCodeAt(a)) > 55295 && r < 57344) {
          if (!o) {
            if (r > 56319) {
              (t -= 3) > -1 && i.push(239, 191, 189);
              continue;
            }
            if (a + 1 === n) {
              (t -= 3) > -1 && i.push(239, 191, 189);
              continue;
            }
            o = r;
            continue;
          }
          if (r < 56320) {
            (t -= 3) > -1 && i.push(239, 191, 189), o = r;
            continue;
          }
          r = 65536 + (o - 55296 << 10 | r - 56320);
        } else o && (t -= 3) > -1 && i.push(239, 191, 189);
        if (o = null, r < 128) {
          if ((t -= 1) < 0) break;
          i.push(r);
        } else if (r < 2048) {
          if ((t -= 2) < 0) break;
          i.push(r >> 6 | 192, 63 & r | 128);
        } else if (r < 65536) {
          if ((t -= 3) < 0) break;
          i.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
        } else {
          if (!(r < 1114112)) throw new Error('Invalid code point');
          if ((t -= 4) < 0) break;
          i.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
        }
      }
      return i;
    }
    function H(e) {
      return o.toByteArray(function(e) {
        if ((e = (e = e.split('=')[0]).trim().replace(j, '')).length < 2) return '';
        for (;e.length % 4 != 0; ) e += '=';
        return e;
      }(e));
    }
    function F(e, t, r, n) {
      for (var o = 0; o < n && !(o + r >= t.length || o >= e.length); ++o) t[o + r] = e[o];
      return o;
    }
    function K(e, t) {
      return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;
    }
    function D(e) {
      return e != e;
    }
    var z = function() {
      var e = '0123456789abcdef';
      var t = new Array(256);
      for (var r = 0; r < 16; ++r) {
        var n = 16 * r;
        for (var o = 0; o < 16; ++o) t[n + o] = e[r] + e[o];
      }
      return t;
    }();
  },
  55147: e => {
    var t = {}.toString;
    e.exports = Array.isArray || function(e) {
      return '[object Array]' == t.call(e);
    };
  },
  37253: (e, t, r) => {
    const n = r(89539);
    const o = r(17187);
    var i = 'object' == typeof Reflect ? Reflect : null;
    var a = i && 'function' == typeof i.apply ? i.apply : function(e, t, r) {
      return Function.prototype.apply.call(e, t, r);
    };
    function s() {
      o.call(this);
    }
    function c(e, t, r) {
      try {
        a(e, t, r);
      } catch (n) {
        setTimeout((() => {
          throw n;
        }));
      }
    }
    function u(e, t) {
      var r = new Array(t);
      for (var n = 0; n < t; ++n) r[n] = e[n];
      return r;
    }
    e.exports = s, n.inherits(s, o), s.prototype.emit = function(e) {
      var t = [];
      for (var r = 1; r < arguments.length; r++) t.push(arguments[r]);
      var n = 'error' === e;
      var o = this._events;
      if (void 0 !== o) n = n && void 0 === o.error; else if (!n) return !1;
      if (n) {
        var i;
        if (t.length > 0 && (i = t[0]), i instanceof Error) throw i;
        var a = new Error('Unhandled error.' + (i ? ' (' + i.message + ')' : ''));
        throw a.context = i, a;
      }
      var s = o[e];
      if (void 0 === s) return !1;
      if ('function' == typeof s) c(s, this, t); else {
        var l = s.length;
        var f = u(s, l);
        for (r = 0; r < l; ++r) c(f[r], this, t);
      }
      return !0;
    };
  },
  80045: function(e, t, r) {
    var n = r(34155);
    !function(t) {
      'use strict';
      var r = function(e) {
        setTimeout(e, 0);
      };
      void 0 !== n && n && 'function' == typeof n.nextTick && (r = n.nextTick), e.exports = function(e) {
        var t = {
          capacity: e || 1,
          current: 0,
          queue: [],
          firstHere: !1,
          take: function() {
            if (!1 === t.firstHere) {
              t.current++, t.firstHere = !0;
              var e = 1;
            } else e = 0;
            var r = {
              n: 1
            };
            'function' == typeof arguments[0] ? r.task = arguments[0] : r.n = arguments[0], arguments.length >= 2 && ('function' == typeof arguments[1] ? r.task = arguments[1] : r.n = arguments[1]);
            var n = r.task;
            if (r.task = function() {
              n(t.leave);
            }, t.current + r.n - e > t.capacity) return 1 === e && (t.current--, t.firstHere = !1), t.queue.push(r);
            t.current += r.n - e, r.task(t.leave), 1 === e && (t.firstHere = !1);
          },
          leave: function(e) {
            if (e = e || 1, t.current -= e, t.queue.length) {
              var n = t.queue[0];
              n.n + t.current > t.capacity || (t.queue.shift(), t.current += n.n, r(n.task));
            } else if (t.current < 0) throw new Error('leave called too many times.');
          },
          available: function(e) {
            return e = e || 1, t.current + e <= t.capacity;
          }
        };
        return t;
      };
    }();
  },
  80500: e => {
    "use strict";
    e.exports = (e, t) => {
      if ('string' != typeof e || 'string' != typeof t) throw new TypeError('Expected the arguments to be of type `string`');
      if ('' === t) return [ e ];
      const r = e.indexOf(t);
      return -1 === r ? [ e ] : [ e.slice(0, r), e.slice(r + t.length) ];
    };
  },
  11742: e => {
    e.exports = function() {
      var e = document.getSelection();
      if (!e.rangeCount) return function() {};
      var t = document.activeElement;
      var r = [];
      for (var n = 0; n < e.rangeCount; n++) r.push(e.getRangeAt(n));
      switch (t.tagName.toUpperCase()) {
       case 'INPUT':
       case 'TEXTAREA':
        t.blur();
        break;

       default:
        t = null;
      }
      return e.removeAllRanges(), function() {
        'Caret' === e.type && e.removeAllRanges(), e.rangeCount || r.forEach((function(t) {
          e.addRange(t);
        })), t && t.focus();
      };
    };
  },
  70655: (e, t, r) => {
    "use strict";
    r.r(t), r.d(t, {
      __assign: () => i,
      __asyncDelegator: () => b,
      __asyncGenerator: () => w,
      __asyncValues: () => x,
      __await: () => _,
      __awaiter: () => l,
      __classPrivateFieldGet: () => C,
      __classPrivateFieldIn: () => T,
      __classPrivateFieldSet: () => S,
      __createBinding: () => h,
      __decorate: () => s,
      __exportStar: () => d,
      __extends: () => o,
      __generator: () => f,
      __importDefault: () => A,
      __importStar: () => E,
      __makeTemplateObject: () => k,
      __metadata: () => u,
      __param: () => c,
      __read: () => v,
      __rest: () => a,
      __spread: () => g,
      __spreadArray: () => y,
      __spreadArrays: () => m,
      __values: () => p
    });
    var n = function(e, t) {
      return n = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function(e, t) {
        e.__proto__ = t;
      } || function(e, t) {
        for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
      }, n(e, t);
    };
    function o(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
      function r() {
        this.constructor = e;
      }
      n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
    }
    var i = function() {
      return i = Object.assign || function(e) {
        for (var t, r = 1, n = arguments.length; r < n; r++) for (var o in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
        return e;
      }, i.apply(this, arguments);
    };
    function a(e, t) {
      var r = {};
      for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (r[n] = e[n]);
      if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
        var o = 0;
        for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (r[n[o]] = e[n[o]]);
      }
      return r;
    }
    function s(e, t, r, n) {
      var o, i = arguments.length, a = i < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, r) : n;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, r, n); else for (var s = e.length - 1; s >= 0; s--) (o = e[s]) && (a = (i < 3 ? o(a) : i > 3 ? o(t, r, a) : o(t, r)) || a);
      return i > 3 && a && Object.defineProperty(t, r, a), a;
    }
    function c(e, t) {
      return function(r, n) {
        t(r, n, e);
      };
    }
    function u(e, t) {
      if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(e, t);
    }
    function l(e, t, r, n) {
      return new (r || (r = Promise))((function(o, i) {
        function a(e) {
          try {
            c(n.next(e));
          } catch (t) {
            i(t);
          }
        }
        function s(e) {
          try {
            c(n.throw(e));
          } catch (t) {
            i(t);
          }
        }
        function c(e) {
          e.done ? o(e.value) : function(e) {
            return e instanceof r ? e : new r((function(t) {
              t(e);
            }));
          }(e.value).then(a, s);
        }
        c((n = n.apply(e, t || [])).next());
      }));
    }
    function f(e, t) {
      var r, n, o, i, a = {
        label: 0,
        sent: function() {
          if (1 & o[0]) throw o[1];
          return o[1];
        },
        trys: [],
        ops: []
      };
      return i = {
        next: s(0),
        throw: s(1),
        return: s(2)
      }, "function" == typeof Symbol && (i[Symbol.iterator] = function() {
        return this;
      }), i;
      function s(i) {
        return function(s) {
          return function(i) {
            if (r) throw new TypeError("Generator is already executing.");
            for (;a; ) try {
              if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;
              switch (n = 0, o && (i = [ 2 & i[0], o.value ]), i[0]) {
               case 0:
               case 1:
                o = i;
                break;

               case 4:
                return a.label++, {
                  value: i[1],
                  done: !1
                };

               case 5:
                a.label++, n = i[1], i = [ 0 ];
                continue;

               case 7:
                i = a.ops.pop(), a.trys.pop();
                continue;

               default:
                if (!(o = a.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
                  a = 0;
                  continue;
                }
                if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                  a.label = i[1];
                  break;
                }
                if (6 === i[0] && a.label < o[1]) {
                  a.label = o[1], o = i;
                  break;
                }
                if (o && a.label < o[2]) {
                  a.label = o[2], a.ops.push(i);
                  break;
                }
                o[2] && a.ops.pop(), a.trys.pop();
                continue;
              }
              i = t.call(e, a);
            } catch (s) {
              i = [ 6, s ], n = 0;
            } finally {
              r = o = 0;
            }
            if (5 & i[0]) throw i[1];
            return {
              value: i[0] ? i[1] : void 0,
              done: !0
            };
          }([ i, s ]);
        };
      }
    }
    var h = Object.create ? function(e, t, r, n) {
      void 0 === n && (n = r);
      var o = Object.getOwnPropertyDescriptor(t, r);
      o && !("get" in o ? !t.__esModule : o.writable || o.configurable) || (o = {
        enumerable: !0,
        get: function() {
          return t[r];
        }
      }), Object.defineProperty(e, n, o);
    } : function(e, t, r, n) {
      void 0 === n && (n = r), e[n] = t[r];
    };
    function d(e, t) {
      for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || h(t, e, r);
    }
    function p(e) {
      var t = "function" == typeof Symbol && Symbol.iterator, r = t && e[t], n = 0;
      if (r) return r.call(e);
      if (e && "number" == typeof e.length) return {
        next: function() {
          return e && n >= e.length && (e = void 0), {
            value: e && e[n++],
            done: !e
          };
        }
      };
      throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function v(e, t) {
      var r = "function" == typeof Symbol && e[Symbol.iterator];
      if (!r) return e;
      var n, o, i = r.call(e), a = [];
      try {
        for (;(void 0 === t || t-- > 0) && !(n = i.next()).done; ) a.push(n.value);
      } catch (s) {
        o = {
          error: s
        };
      } finally {
        try {
          n && !n.done && (r = i.return) && r.call(i);
        } finally {
          if (o) throw o.error;
        }
      }
      return a;
    }
    function g() {
      for (var e = [], t = 0; t < arguments.length; t++) e = e.concat(v(arguments[t]));
      return e;
    }
    function m() {
      for (var e = 0, t = 0, r = arguments.length; t < r; t++) e += arguments[t].length;
      var n = Array(e), o = 0;
      for (t = 0; t < r; t++) for (var i = arguments[t], a = 0, s = i.length; a < s; a++, o++) n[o] = i[a];
      return n;
    }
    function y(e, t, r) {
      if (r || 2 === arguments.length) for (var n, o = 0, i = t.length; o < i; o++) !n && o in t || (n || (n = Array.prototype.slice.call(t, 0, o)), 
      n[o] = t[o]);
      return e.concat(n || Array.prototype.slice.call(t));
    }
    function _(e) {
      return this instanceof _ ? (this.v = e, this) : new _(e);
    }
    function w(e, t, r) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var n, o = r.apply(e, t || []), i = [];
      return n = {}, a("next"), a("throw"), a("return"), n[Symbol.asyncIterator] = function() {
        return this;
      }, n;
      function a(e) {
        o[e] && (n[e] = function(t) {
          return new Promise((function(r, n) {
            i.push([ e, t, r, n ]) > 1 || s(e, t);
          }));
        });
      }
      function s(e, t) {
        try {
          !function(e) {
            e.value instanceof _ ? Promise.resolve(e.value.v).then(c, u) : l(i[0][2], e);
          }(o[e](t));
        } catch (r) {
          l(i[0][3], r);
        }
      }
      function c(e) {
        s("next", e);
      }
      function u(e) {
        s("throw", e);
      }
      function l(e, t) {
        e(t), i.shift(), i.length && s(i[0][0], i[0][1]);
      }
    }
    function b(e) {
      var t, r;
      return t = {}, n("next"), n("throw", (function(e) {
        throw e;
      })), n("return"), t[Symbol.iterator] = function() {
        return this;
      }, t;
      function n(n, o) {
        t[n] = e[n] ? function(t) {
          return (r = !r) ? {
            value: _(e[n](t)),
            done: "return" === n
          } : o ? o(t) : t;
        } : o;
      }
    }
    function x(e) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var t, r = e[Symbol.asyncIterator];
      return r ? r.call(e) : (e = p(e), t = {}, n("next"), n("throw"), n("return"), t[Symbol.asyncIterator] = function() {
        return this;
      }, t);
      function n(r) {
        t[r] = e[r] && function(t) {
          return new Promise((function(n, o) {
            (function(e, t, r, n) {
              Promise.resolve(n).then((function(t) {
                e({
                  value: t,
                  done: r
                });
              }), t);
            })(n, o, (t = e[r](t)).done, t.value);
          }));
        };
      }
    }
    function k(e, t) {
      return Object.defineProperty ? Object.defineProperty(e, "raw", {
        value: t
      }) : e.raw = t, e;
    }
    var M = Object.create ? function(e, t) {
      Object.defineProperty(e, "default", {
        enumerable: !0,
        value: t
      });
    } : function(e, t) {
      e.default = t;
    };
    function E(e) {
      if (e && e.__esModule) return e;
      var t = {};
      if (null != e) for (var r in e) "default" !== r && Object.prototype.hasOwnProperty.call(e, r) && h(t, e, r);
      return M(t, e), t;
    }
    function A(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    function C(e, t, r, n) {
      if ("a" === r && !n) throw new TypeError("Private accessor was defined without a getter");
      if ("function" == typeof t ? e !== t || !n : !t.has(e)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return "m" === r ? n : "a" === r ? n.call(e) : n ? n.value : t.get(e);
    }
    function S(e, t, r, n, o) {
      if ("m" === n) throw new TypeError("Private method is not writable");
      if ("a" === n && !o) throw new TypeError("Private accessor was defined without a setter");
      if ("function" == typeof t ? e !== t || !o : !t.has(e)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return "a" === n ? o.call(e, r) : o ? o.value = r : t.set(e, r), r;
    }
    function T(e, t) {
      if (null === t || "object" != typeof t && "function" != typeof t) throw new TypeError("Cannot use 'in' operator on non-object");
      return "function" == typeof e ? t === e : e.has(t);
    }
  },
  65054: (e, t, r) => {
    var n = r(48764).Buffer;
    var o = r(4501).strict;
    e.exports = function(e) {
      if (o(e)) {
        var t = n.from(e.buffer);
        return e.byteLength !== e.buffer.byteLength && (t = t.slice(e.byteOffset, e.byteOffset + e.byteLength)), t;
      }
      return n.from(e);
    };
  },
  42696: e => {
    "use strict";
    e.exports = JSON.parse('{"genesisGasLimit":{"v":5000,"d":"Gas limit of the Genesis block."},"genesisDifficulty":{"v":17179869184,"d":"Difficulty of the Genesis block."},"genesisNonce":{"v":"0x0000000000000042","d":"the geneis nonce"},"genesisExtraData":{"v":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa","d":"extra data "},"genesisHash":{"v":"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3","d":"genesis hash"},"genesisStateRoot":{"v":"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544","d":"the genesis state root"},"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be."},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations."},"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be."},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations."},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."},"maximumExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis."},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs."},"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed."},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack."},"tierStepGas":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them."},"expGas":{"v":10,"d":"Once per EXP instuction."},"expByteGas":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction."},"sha3Gas":{"v":30,"d":"Once per SHA3 operation."},"sha3WordGas":{"v":6,"d":"Once per word of the SHA3 operation\'s data."},"sloadGas":{"v":50,"d":"Once per SLOAD operation."},"sstoreSetGas":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero."},"sstoreResetGas":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero."},"sstoreRefundGas":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero."},"jumpdestGas":{"v":1,"d":"Refunded gas, once per SSTORE operation if the zeroness changes to zero."},"logGas":{"v":375,"d":"Per LOG* operation."},"logDataGas":{"v":8,"d":"Per byte in a LOG* operation\'s data."},"logTopicGas":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."},"createGas":{"v":32000,"d":"Once per CREATE operation & contract-creation transaction."},"callGas":{"v":40,"d":"Once per CALL operation & message call transaction."},"callStipend":{"v":2300,"d":"Free gas given at beginning of call."},"callValueTransferGas":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero."},"callNewAccountGas":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior."},"suicideRefundGas":{"v":24000,"d":"Refunded following a suicide operation."},"memoryGas":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation."},"createDataGas":{"v":200,"d":""},"txGas":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions."},"txCreation":{"v":32000,"d":"the cost of creating a contract via tx"},"txDataZeroGas":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."},"txDataNonZeroGas":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."},"copyGas":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."},"ecrecoverGas":{"v":3000,"d":""},"sha256Gas":{"v":60,"d":""},"sha256WordGas":{"v":12,"d":""},"ripemd160Gas":{"v":600,"d":""},"ripemd160WordGas":{"v":120,"d":""},"identityGas":{"v":15,"d":""},"identityWordGas":{"v":3,"d":""},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"ommerReward":{"v":"625000000000000000","d":"The amount of wei a miner of an uncle block gets for being inculded in the blockchain"},"niblingReward":{"v":"156250000000000000","d":"the amount a miner gets for inculding a uncle"},"homeSteadForkNumber":{"v":1150000,"d":"the block that the Homestead fork started at"},"homesteadRepriceForkNumber":{"v":2463000,"d":"the block that the Homestead Reprice (EIP150) fork started at"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"freeBlockPeriod":{"v":2}}');
  }
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,