"use strict";(self.webpackChunkhotel_bogota=self.webpackChunkhotel_bogota||[]).push([[70],{8070:(e,t,n)=>{n.r(t),n.d(t,{Web3WalletProvider:()=>c,default:()=>l});var o=n(7338),i=n(723),r=n(7591),s=function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{l(o.next(e))}catch(t){r(t)}}function c(e){try{l(o.throw(e))}catch(t){r(t)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}l((o=o.apply(e,t||[])).next())}))};class c{constructor(e,t,n){this.client=e,this.walletOptions=t,this.safeConnectOptions=n,this.connections={}}saveConnections(){let e={};for(let t in this.connections){let n=this.connections[t];e[t]={address:n.address,chainId:n.chainId,providerType:n.providerType,blockchain:n.blockchain}}localStorage.setItem(c.LOCAL_STORAGE_KEY,JSON.stringify(e))}emitSavedConnection(e){return Object.keys(this.connections).length&&e?(this.client.eventSender("connected-wallet",this.connections[e.toLocaleLowerCase()]),this.connections[e.toLocaleLowerCase()]):null}emitNetworkChange(e){if(e)return this.client.eventSender("network-change",e),e}deleteConnections(){this.connections={},localStorage.removeItem(c.LOCAL_STORAGE_KEY),localStorage.removeItem("walletconnect"),sessionStorage.removeItem("CURRENT_USER")}loadConnections(){return s(this,void 0,void 0,(function*(){let e=localStorage.getItem(c.LOCAL_STORAGE_KEY);if(!e)return;let t=JSON.parse(e);if(t)for(let o in t){let e=t[o];try{yield this.connectWith(e.providerType,!0)}catch(n){console.log("Wallet couldn't connect: "+n.message),delete t[o],this.saveConnections(),this.emitSavedConnection(o)}}}))}connectWith(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return s(this,void 0,void 0,(function*(){if(!e)throw new Error("Please provide a Wallet type to connect with.");if(this[e]){const n=yield this[e](t);return(0,r.kg)(2,"address",n),this.saveConnections(),this.emitSavedConnection(n),n}throw new Error("Wallet type not found")}))}signMessage(e,t){return s(this,void 0,void 0,(function*(){let n=this.getWalletProvider(e).getSigner(e);return yield n.signMessage(t)}))}getWalletProvider(e){var t;if(e=e.toLowerCase(),!(null===(t=this.connections[e])||void 0===t?void 0:t.provider))throw new Error("Wallet provider not found for address");return this.connections[e].provider}getConnectedWalletData(){return Object.values(this.connections)}registerNewWalletAddress(e,t,n,i){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"evm";return this.connections[e.toLowerCase()]={address:e,chainId:t,providerType:n,provider:i,blockchain:r,ethers:o},e}registerProvider(e,t){return s(this,void 0,void 0,(function*(){const n=yield e.listAccounts(),o=(yield e.detectNetwork()).chainId;if(0===n.length)throw new Error("No accounts found via wallet-connect.");let i=n[0];return this.registerNewWalletAddress(i,o,t,e),e.provider.on("accountsChanged",(n=>{n&&0!==n.length?i!==n[0]&&(delete this.connections[i.toLowerCase()],i=n[0],this.registerNewWalletAddress(i,o,t,e),this.saveConnections(),this.emitSavedConnection(i),this.client.getTokenStore().clearCachedTokens(),this.client.enrichTokenLookupDataOnChainTokens()):this.client.disconnectWallet()})),e.provider.on("chainChanged",(o=>{this.registerNewWalletAddress(n[0],o,t,e),this.saveConnections(),this.emitNetworkChange(o)})),e.provider.on("disconnect",(e=>{(null===e||void 0===e?void 0:e.message)&&e.message.indexOf("MetaMask: Disconnected from chain")>-1||this.client.disconnectWallet()})),n[0]}))}MetaMask(e){return s(this,void 0,void 0,(function*(){if((0,r.kg)(2,"connect MetaMask"),"undefined"!==typeof window.ethereum){yield window.ethereum.enable();const e=new i.Q(window.ethereum,"any");return this.registerProvider(e,"MetaMask")}throw new Error("MetaMask is not available. Please check the extension is supported and active.")}))}WalletConnect(e){return s(this,void 0,void 0,(function*(){(0,r.kg)(2,"connect Wallet Connect");const t=yield Promise.all([n.e(38),n.e(401),n.e(883)]).then(n.bind(n,3401)),o=yield t.getWalletConnectProviderInstance(e);return new Promise(((t,n)=>{e&&o.connector.on("display_uri",((e,t)=>{n(new Error("Connection expired"))})),o.enable().then((()=>{const e=new i.Q(o,"any");t(this.registerProvider(e,"WalletConnect"))})).catch((e=>n(e)))}))}))}WalletConnectV2(e){var t,o,c,l,a,d;return s(this,void 0,void 0,(function*(){(0,r.kg)(2,"connect Wallet Connect V2");const h=yield Promise.all([n.e(38),n.e(403)]).then(n.bind(n,8038)),v=yield h.getWalletConnectV2ProviderInstance();let u;if(v.on("display_uri",(e=>s(this,void 0,void 0,(function*(){console.log("EVENT","QR Code Modal open"),u=(yield n.e(974).then(n.t.bind(n,1974,23))).default,u.open(e,(()=>{this.client.getUi().showError("User closed modal")}))})))),v.on("session_delete",(e=>{let{id:t,topic:n}=e;console.log("WC V2 EVENT","session_deleted"),this.client.disconnectWallet()})),!e){let e;yield v.connect({namespaces:{eip155:{methods:["eth_sendTransaction","eth_signTransaction","eth_sign","personal_sign","eth_signTypedData"],chains:null!==(c=null===(o=null===(t=this.walletOptions)||void 0===t?void 0:t.walletConnectV2)||void 0===o?void 0:o.chains)&&void 0!==c?c:h.WC_V2_DEFAULT_CHAINS,events:["chainChanged","accountsChanged"],rpcMap:null!==(d=null===(a=null===(l=this.walletOptions)||void 0===l?void 0:l.walletConnectV2)||void 0===a?void 0:a.rpcMap)&&void 0!==d?d:h.WC_DEFAULT_RPC_MAP}},pairingTopic:null===e||void 0===e?void 0:e.topic}),u.close()}return new Promise(((e,t)=>{v.enable().then((()=>{const t=new i.Q(v,"any");e(this.registerProvider(t,"WalletConnectV2"))})).catch((e=>{t(e)}))}))}))}Torus(e){return s(this,void 0,void 0,(function*(){const e=yield n.e(514).then(n.bind(n,2514)),t=yield e.getTorusProviderInstance();yield t.init(),yield t.login();const o=new i.Q(t.provider,"any");return this.registerProvider(o,"Torus")}))}Phantom(e){return s(this,void 0,void 0,(function*(){if((0,r.kg)(2,"connect Phantom"),"undefined"!==typeof window.solana){const e=(yield window.solana.connect()).publicKey.toBase58();return this.registerNewWalletAddress(e,"mainnet-beta","phantom",window.solana,"solana")}throw new Error("Phantom is not available. Please check the extension is supported and active.")}))}SafeConnect(e){return s(this,void 0,void 0,(function*(){(0,r.kg)(2,"connect SafeConnect");const e=yield this.getSafeConnectProvider(),t=yield e.initSafeConnect();return this.registerNewWalletAddress(t,1,"SafeConnect",e),t}))}Flow(e){return s(this,void 0,void 0,(function*(){const e=(yield n.e(578).then(n.bind(n,1578))).getFlowProvider();yield e.currentUser.authenticate();let t=yield e.currentUser.snapshot();if(!t.addr)throw new Error("Failed to connect Flow wallet");return this.registerNewWalletAddress(t.addr,1,"flow",e),t.addr}))}safeConnectAvailable(){return void 0!==this.safeConnectOptions}getSafeConnectProvider(){return s(this,void 0,void 0,(function*(){const{SafeConnectProvider:e}=yield Promise.resolve().then(n.bind(n,8421));return new e(this.client.getUi(),this.safeConnectOptions)}))}}c.LOCAL_STORAGE_KEY="tn-wallet-connections";const l=c}}]);
//# sourceMappingURL=70.5ea8a9fe.chunk.js.map