LavaPack.loadBundle([[68,{"../../../../../shared/constants/app":6262,"../../../../../shared/constants/metametrics":6266,"../../../../../shared/constants/network":6267,"../../../../../shared/modules/network.utils":6280,"../../../../../shared/modules/rpc.utils":6282,"@babel/runtime/helpers/interopRequireDefault":200,"eth-rpc-errors":2537,lodash:5255,"valid-url":6111},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=e("eth-rpc-errors"),o=n(e("valid-url")),i=e("lodash"),a=e("../../../../../shared/constants/app"),l=e("../../../../../shared/constants/metametrics"),c=e("../../../../../shared/modules/network.utils"),d=e("../../../../../shared/modules/rpc.utils"),u=e("../../../../../shared/constants/network");var h={methodNames:[a.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN],implementation:async function(e,t,r,n,{addCustomRpc:h,getCurrentChainId:p,findCustomRpcBy:g,updateRpcTarget:m,requestUserApproval:f,sendMetrics:C}){var b;if(null===(b=e.params)||void 0===b||!b[0]||"object"!=typeof e.params[0])return n(s.ethErrors.rpc.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e.params)}`}));const{origin:y}=e,{chainId:w,chainName:k=null,blockExplorerUrls:v=null,nativeCurrency:T=null,rpcUrls:E}=e.params[0],M=Object.keys((0,i.omit)(e.params[0],["chainId","chainName","blockExplorerUrls","iconUrls","rpcUrls","nativeCurrency"]));if(M.length>0)return n(s.ethErrors.rpc.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${M}`}));const S=e=>{try{const t=new URL(e);return"localhost"===t.hostname||"127.0.0.1"===t.hostname}catch(e){return!1}},P=Array.isArray(E)?E.find((e=>S(e)||o.default.isHttpsUri(e))):null,A=null!==v&&Array.isArray(v)?v.find((e=>S(e)||o.default.isHttpsUri(e))):null;if(!P)return n(s.ethErrors.rpc.invalidParams({message:`Expected an array with at least one valid string HTTPS url 'rpcUrls', Received:\n${E}`}));if(null!==v&&!A)return n(s.ethErrors.rpc.invalidParams({message:`Expected null or array with at least one valid string HTTPS URL 'blockExplorerUrl'. Received: ${v}`}));const O="string"==typeof w&&w.toLowerCase();if(!(0,c.isPrefixedFormattedHexString)(O))return n(s.ethErrors.rpc.invalidParams({message:`Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${w}`}));if(!(0,c.isSafeChainId)(parseInt(O,16)))return n(s.ethErrors.rpc.invalidParams({message:`Invalid chain ID "${O}": numerical value greater than max safe value. Received:\n${w}`}));if(u.CHAIN_ID_TO_NETWORK_ID_MAP[O])return n(s.ethErrors.rpc.invalidParams({message:"May not specify default MetaMask chain."}));const _=g({chainId:O});if(_){t.result=null;if(p()===O)return n();try{await m(await f({origin:y,type:a.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN,requestData:{rpcUrl:_.rpcUrl,chainId:_.chainId,nickname:_.nickname,ticker:_.ticker}})),t.result=null}catch(e){if(e.code!==s.errorCodes.provider.userRejectedRequest)return n(e)}return n()}let I;try{I=await(0,d.jsonRpcRequest)(P,"eth_chainId")}catch(e){return n(s.ethErrors.rpc.internal({message:`Request for method 'eth_chainId on ${P} failed`,data:{networkErr:e}}))}if(O!==I)return n(s.ethErrors.rpc.invalidParams({message:`Chain ID returned by RPC URL ${P} does not match ${O}`,data:{chainId:I}}));if("string"!=typeof k||!k)return n(s.ethErrors.rpc.invalidParams({message:`Expected non-empty string 'chainName'. Received:\n${k}`}));const R=k.length>100?k.substring(0,100):k;if(null!==T){if("object"!=typeof T||Array.isArray(T))return n(s.ethErrors.rpc.invalidParams({message:`Expected null or object 'nativeCurrency'. Received:\n${T}`}));if(18!==T.decimals)return n(s.ethErrors.rpc.invalidParams({message:`Expected the number 18 for 'nativeCurrency.decimals' when 'nativeCurrency' is provided. Received: ${T.decimals}`}));if(!T.symbol||"string"!=typeof T.symbol)return n(s.ethErrors.rpc.invalidParams({message:`Expected a string 'nativeCurrency.symbol'. Received: ${T.symbol}`}))}const N=(null==T?void 0:T.symbol)||"ETH";if("string"!=typeof N||N.length<2||N.length>6)return n(s.ethErrors.rpc.invalidParams({message:`Expected 2-6 character string 'nativeCurrency.symbol'. Received:\n${N}`}));try{await h(await f({origin:y,type:a.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN,requestData:{chainId:O,blockExplorerUrl:A,chainName:R,rpcUrl:P,ticker:N}})),C({event:"Custom Network Added",category:l.EVENT.CATEGORIES.NETWORK,referrer:{url:y},sensitiveProperties:{chain_id:O,rpc_url:P,network_name:R,network:P,symbol:N,block_explorer_url:A,source:l.EVENT.SOURCE.TRANSACTION.DAPP}}),t.result=null}catch(e){return n(e)}try{await m(await f({origin:y,type:a.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN,requestData:{rpcUrl:P,chainId:O,nickname:R,ticker:N}}))}catch(e){if(e.code!==s.errorCodes.provider.userRejectedRequest)return n(e)}return n()},hookNames:{addCustomRpc:!0,getCurrentChainId:!0,findCustomRpcBy:!0,updateRpcTarget:!0,requestUserApproval:!0,sendMetrics:!0}};r.default=h}}},{package:"$root$"}],[69,{"../../../../../shared/constants/app":6262},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.ETH_ACCOUNTS],implementation:async function(e,t,r,n,{getAccounts:s}){return t.result=await s(),n()},hookNames:{getAccounts:!0}};r.default=n}}},{package:"$root$"}],[7,{"../../../shared/constants/time":6271,"../metamask-controller":84,"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,"@metamask/obs-store":1204,events:2176},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("@babel/runtime/helpers/defineProperty")),o=n(e("events")),i=e("@metamask/obs-store"),a=e("../metamask-controller"),l=e("../../../shared/constants/time");function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){(0,s.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}class u extends o.default{constructor(e={}){const{addUnlockListener:t,isUnlocked:r,initState:n,onInactiveTimeout:s,showUnlockRequest:o,preferencesStore:a,qrHardwareStore:l}=e;super(),this.onInactiveTimeout=s||(()=>undefined),this.store=new i.ObservableStore(d(d({timeoutMinutes:0,connectedStatusPopoverHasBeenShown:!0,defaultHomeActiveTabName:null,browserEnvironment:{},popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[],recoveryPhraseReminderHasBeenShown:!1,recoveryPhraseReminderLastShown:(new Date).getTime(),collectiblesDetectionNoticeDismissed:!1,enableEIP1559V2NoticeDismissed:!1,showTestnetMessageInDropdown:!0,trezorModel:null},n),{},{qrHardware:{},collectiblesDropdownState:{}})),this.timer=null,this.isUnlocked=r,this.waitingForUnlock=[],t(this.handleUnlock.bind(this)),this._showUnlockRequest=o,a.subscribe((({preferences:e})=>{this.store.getState().timeoutMinutes!==e.autoLockTimeLimit&&this._setInactiveTimeout(e.autoLockTimeLimit)})),l.subscribe((e=>{this.store.updateState({qrHardware:e})}));const{preferences:c}=a.getState();this._setInactiveTimeout(c.autoLockTimeLimit)}getUnlockPromise(e){return new Promise((t=>{this.isUnlocked()?t():this.waitForUnlock(t,e)}))}waitForUnlock(e,t){this.waitingForUnlock.push({resolve:e}),this.emit(a.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE),t&&this._showUnlockRequest()}handleUnlock(){if(this.waitingForUnlock.length>0){for(;this.waitingForUnlock.length>0;)this.waitingForUnlock.shift().resolve();this.emit(a.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE)}}setDefaultHomeActiveTabName(e){this.store.updateState({defaultHomeActiveTabName:e})}setConnectedStatusPopoverHasBeenShown(){this.store.updateState({connectedStatusPopoverHasBeenShown:!0})}setRecoveryPhraseReminderHasBeenShown(){this.store.updateState({recoveryPhraseReminderHasBeenShown:!0})}setRecoveryPhraseReminderLastShown(e){this.store.updateState({recoveryPhraseReminderLastShown:e})}setLastActiveTime(){this._resetTimer()}_setInactiveTimeout(e){this.store.updateState({timeoutMinutes:e}),this._resetTimer()}_resetTimer(){const{timeoutMinutes:e}=this.store.getState();this.timer&&clearTimeout(this.timer),e&&(this.timer=setTimeout((()=>this.onInactiveTimeout()),e*l.MINUTE))}setBrowserEnvironment(e,t){this.store.updateState({browserEnvironment:{os:e,browser:t}})}addPollingToken(e,t){const r=this.store.getState()[t];this.store.updateState({[t]:[...r,e]})}removePollingToken(e,t){const r=this.store.getState()[t];this.store.updateState({[t]:r.filter((t=>t!==e))})}clearPollingTokens(){this.store.updateState({popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[]})}setShowTestnetMessageInDropdown(e){this.store.updateState({showTestnetMessageInDropdown:e})}setTrezorModel(e){this.store.updateState({trezorModel:e})}setCollectiblesDetectionNoticeDismissed(e){this.store.updateState({collectiblesDetectionNoticeDismissed:e})}setEnableEIP1559V2NoticeDismissed(e){this.store.updateState({enableEIP1559V2NoticeDismissed:e})}updateCollectibleDropDownState(e){this.store.updateState({collectiblesDropdownState:e})}}r.default=u}}},{package:"$root$"}],[70,{"../../../../../shared/constants/app":6262,"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("@babel/runtime/helpers/defineProperty"));function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){(0,s.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var a={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.GET_PROVIDER_STATE],implementation:async function(e,t,r,n,{getProviderState:s}){return t.result=i({},await s(e.origin)),n()},hookNames:{getProviderState:!0}};r.default=a}}},{package:"$root$"}],[71,{"./add-ethereum-chain":68,"./eth-accounts":69,"./get-provider-state":70,"./log-web3-shim-usage":72,"./request-accounts":73,"./send-metadata":74,"./switch-ethereum-chain":75,"./watch-asset":76,"@babel/runtime/helpers/interopRequireDefault":200},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("./add-ethereum-chain")),o=n(e("./eth-accounts")),i=n(e("./get-provider-state")),a=n(e("./log-web3-shim-usage")),l=n(e("./request-accounts")),c=n(e("./send-metadata")),d=n(e("./switch-ethereum-chain")),u=n(e("./watch-asset"));var h=[s.default,o.default,i.default,a.default,l.default,c.default,d.default,u.default];r.default=h}}},{package:"$root$"}],[72,{"../../../../../shared/constants/app":6262,"../../../../../shared/constants/metametrics":6266},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("../../../../../shared/constants/app"),s=e("../../../../../shared/constants/metametrics");var o={methodNames:[n.MESSAGE_TYPE.LOG_WEB3_SHIM_USAGE],implementation:function(e,t,r,n,{sendMetrics:o,getWeb3ShimUsageState:i,setWeb3ShimUsageRecorded:a}){const{origin:l}=e;i(l)===undefined&&(a(l),o({event:"Website Accessed window.web3 Shim",category:s.EVENT.CATEGORIES.INPAGE_PROVIDER,referrer:{url:l}},{excludeMetaMetricsId:!0}));return t.result=!0,n()},hookNames:{sendMetrics:!0,getWeb3ShimUsageState:!0,setWeb3ShimUsageRecorded:!0}};r.default=o}}},{package:"$root$"}],[73,{"../../../../../shared/constants/app":6262,"eth-rpc-errors":2537},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors"),s=e("../../../../../shared/constants/app");var o={methodNames:[s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS],implementation:async function(e,t,r,o,{origin:a,getAccounts:l,getUnlockPromise:c,hasPermission:d,requestAccountsPermission:u}){if(i.has(a))return t.error=n.ethErrors.rpc.resourceUnavailable(`Already processing ${s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS}. Please wait.`),o();if(d(s.MESSAGE_TYPE.ETH_ACCOUNTS)){try{i.add(a),await c(!0),t.result=await l(),o()}catch(e){o(e)}finally{i.delete(a)}return undefined}try{await u()}catch(e){return t.error=e,o()}const h=await l();h.length>0?t.result=h:t.error=n.ethErrors.rpc.internal("Accounts unexpectedly unavailable. Please report this bug.");return o()},hookNames:{origin:!0,getAccounts:!0,getUnlockPromise:!0,hasPermission:!0,requestAccountsPermission:!0}};r.default=o;const i=new Set}}},{package:"$root$"}],[74,{"../../../../../shared/constants/app":6262,"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,"@babel/runtime/helpers/objectWithoutProperties":209,"eth-rpc-errors":2537},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("@babel/runtime/helpers/defineProperty")),o=n(e("@babel/runtime/helpers/objectWithoutProperties")),i=e("eth-rpc-errors"),a=e("../../../../../shared/constants/app");const l=["icon","name"];function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){(0,s.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var u={methodNames:[a.MESSAGE_TYPE.SEND_METADATA],implementation:function(e,t,r,n,{addSubjectMetadata:s,subjectType:a}){const{origin:c,params:u}=e;if(!u||"object"!=typeof u||Array.isArray(u))return n(i.ethErrors.rpc.invalidParams({data:u}));{const{icon:e=null,name:t=null}=u,r=(0,o.default)(u,l);s(d(d({},r),{},{iconUrl:e,name:t,subjectType:a,origin:c}))}return t.result=!0,n()},hookNames:{addSubjectMetadata:!0,subjectType:!0}};r.default=u}}},{package:"$root$"}],[75,{"../../../../../shared/constants/app":6262,"../../../../../shared/constants/network":6267,"../../../../../shared/modules/network.utils":6280,"eth-rpc-errors":2537,lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors"),s=e("lodash"),o=e("../../../../../shared/constants/app"),i=e("../../../../../shared/constants/network"),a=e("../../../../../shared/modules/network.utils");var l={methodNames:[o.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN],implementation:async function(e,t,r,l,{getCurrentChainId:c,findCustomRpcBy:d,setProviderType:u,updateRpcTarget:h,requestUserApproval:p}){var g;if(null===(g=e.params)||void 0===g||!g[0]||"object"!=typeof e.params[0])return l(n.ethErrors.rpc.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e.params)}`}));const{origin:m}=e,{chainId:f}=e.params[0],C=Object.keys((0,s.omit)(e.params[0],["chainId"]));if(C.length>0)return l(n.ethErrors.rpc.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${C}`}));const b="string"==typeof f&&f.toLowerCase();if(!(0,a.isPrefixedFormattedHexString)(b))return l(n.ethErrors.rpc.invalidParams({message:`Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${f}`}));if(!(0,a.isSafeChainId)(parseInt(b,16)))return l(n.ethErrors.rpc.invalidParams({message:`Invalid chain ID "${b}": numerical value greater than max safe value. Received:\n${f}`}));const y=function(e,t){if(e in i.CHAIN_ID_TO_TYPE_MAP)return{chainId:e,ticker:i.ETH_SYMBOL,nickname:i.NETWORK_TO_NAME_MAP[e],rpcUrl:i.CHAIN_ID_TO_RPC_URL_MAP[e],type:i.CHAIN_ID_TO_TYPE_MAP[e]};return t({chainId:e})}(b,d);if(y){if(c()===b)return t.result=null,l();try{const e=await p({origin:m,type:o.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN,requestData:y});f in i.CHAIN_ID_TO_TYPE_MAP?u(e.type):await h(e),t.result=null}catch(e){return l(e)}return l()}return l(n.ethErrors.provider.custom({code:4902,message:`Unrecognized chain ID "${f}". Try adding the chain using ${o.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN} first.`}))},hookNames:{getCurrentChainId:!0,findCustomRpcBy:!0,setProviderType:!0,updateRpcTarget:!0,requestUserApproval:!0}};r.default=l}}},{package:"$root$"}],[76,{"../../../../../shared/constants/app":6262,"eth-rpc-errors":2537},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors"),s=e("../../../../../shared/constants/app");var o={methodNames:[s.MESSAGE_TYPE.WATCH_ASSET,s.MESSAGE_TYPE.WATCH_ASSET_LEGACY],implementation:async function(e,t,r,s,{handleWatchAssetRequest:o}){try{const{options:r,type:n}=e.params,i=await o(r,n);return await i.result,t.result=!0,s()}catch(e){return"User rejected to watch the asset."===e.message?s(n.ethErrors.provider.userRejectedRequest()):s(e)}},hookNames:{handleWatchAssetRequest:!0}};r.default=o}}},{package:"$root$"}],[77,{"./createMethodMiddleware":67},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("./createMethodMiddleware");Object.keys(n).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in r&&r[e]===n[e]||Object.defineProperty(r,e,{enumerable:!0,get:function(){return n[e]}}))}))}}},{package:"$root$"}],[78,{"@babel/runtime/helpers/interopRequireDefault":200,"eth-keyring-controller":2520,loglevel:5268},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("eth-keyring-controller")),o=n(e("loglevel"));var i={async verifyAccounts(e,t){if(!e||e.length<1)throw new Error("No created accounts defined.");const r=new(new s.default({}).getKeyringClassForType("HD Key Tree"))({mnemonic:t,numberOfAccounts:e.length}),n=await r.getAccounts();if(o.default.debug(`Created accounts: ${JSON.stringify(e)}`),o.default.debug(`Restored accounts: ${JSON.stringify(n)}`),n.length!==e.length)throw new Error("Wrong number of accounts");for(let t=0;t<n.length;t++)if(n[t].toLowerCase()!==e[t].toLowerCase())throw new Error(`Not identical accounts! Original: ${e[t]}, Restored: ${n[t]}`)}};r.default=i}}},{package:"$root$"}],[79,{"../../../shared/constants/time":6271,"@babel/runtime/helpers/interopRequireDefault":200,_process:5500,"analytics-node":1780},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t){(function(){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.segment=r.createSegmentMock=void 0;var s,o,i=n(e("analytics-node")),a=e("../../../shared/constants/time");const l=null!==(s="XdGJ17zKf3NjBPCDQ2UDjJjkx6FYBMGP")?s:null,c=null!==(o=t.env.SEGMENT_HOST)&&void 0!==o?o:null,d=undefined,u=5*a.SECOND,h=(e=d)=>{const t={queue:[],flush(){t.queue.forEach((([e,t])=>{t()})),t.queue=[]},track(r,n=(()=>undefined)){t.queue.push([r,n]),t.queue.length>=e&&t.flush()},page(){},identify(){}};return t};r.createSegmentMock=h;const p=l?new i.default(l,{host:c,flushAt:d,flushInterval:u}):h(d);r.segment=p}).call(this)}).call(this,e("_process"))}}},{package:"$root$"}],[8,{"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,"@metamask/obs-store":1204},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("@babel/runtime/helpers/defineProperty")),o=e("@metamask/obs-store");function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){(0,s.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}r.default=class{constructor(e={}){const{accountTracker:t,getCurrentChainId:r}=e;this.accountTracker=t,this.getCurrentChainId=r;const n=a({cachedBalances:{}},e.initState);this.store=new o.ObservableStore(n),this._registerUpdates()}async updateCachedBalances({accounts:e}){const t=this.getCurrentChainId(),r=await this._generateBalancesToCache(e,t);this.store.updateState({cachedBalances:r})}_generateBalancesToCache(e,t){const{cachedBalances:r}=this.store.getState(),n=a({},r[t]);Object.keys(e).forEach((t=>{const r=e[t];r.balance&&(n[t]=r.balance)}));return a(a({},r),{},{[t]:n})}clearCachedBalances(){this.store.updateState({cachedBalances:{}})}_registerUpdates(){const e=this.updateCachedBalances.bind(this);this.accountTracker.store.subscribe(e)}}}}},{package:"$root$"}],[82,{"../../../shared/constants/app":6262,"../../../shared/constants/metametrics":6266,"../../../shared/modules/hexstring-utils":6278,"../../../shared/modules/random-id":6281,"../metamask-controller":84,"@babel/runtime/helpers/interopRequireDefault":200,"@metamask/obs-store":1204,assert:1803,"eth-rpc-errors":2537,"eth-sig-util":2539,events:2176,jsonschema:4850,loglevel:5268},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("events")),o=e("assert"),i=e("@metamask/obs-store"),a=e("eth-rpc-errors"),l=e("eth-sig-util"),c=n(e("loglevel")),d=n(e("jsonschema")),u=e("../../../shared/constants/app"),h=e("../metamask-controller"),p=n(e("../../../shared/modules/random-id")),g=e("../../../shared/constants/metametrics"),m=e("../../../shared/modules/hexstring-utils");class f extends s.default{constructor({getCurrentChainId:e,metricsEvent:t}){super(),this._getCurrentChainId=e,this.memStore=new i.ObservableStore({unapprovedTypedMessages:{},unapprovedTypedMessagesCount:0}),this.messages=[],this.metricsEvent=t}get unapprovedTypedMessagesCount(){return Object.keys(this.getUnapprovedMsgs()).length}getUnapprovedMsgs(){return this.messages.filter((e=>"unapproved"===e.status)).reduce(((e,t)=>(e[t.id]=t,e)),{})}addUnapprovedMessageAsync(e,t,r){return new Promise(((n,s)=>{const o=this.addUnapprovedMessage(e,t,r);this.once(`${o}:finished`,(t=>{switch(t.status){case"signed":return n(t.rawSig);case"rejected":return s(a.ethErrors.provider.userRejectedRequest("MetaMask Message Signature: User denied message signature."));case"errored":return s(new Error(`MetaMask Message Signature: ${t.error}`));default:return s(new Error(`MetaMask Message Signature: Unknown problem: ${JSON.stringify(e)}`))}}))}))}addUnapprovedMessage(e,t,r){e.version=r,t&&(e.origin=t.origin),this.validateParams(e),c.default.debug(`TypedMessageManager addUnapprovedMessage: ${JSON.stringify(e)}`);const n=(new Date).getTime(),s=(0,p.default)(),o={id:s,msgParams:e,time:n,status:"unapproved",type:u.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA};return this.addMsg(o),this.emit("update"),s}validateParams(e){switch(o.strict.ok(e&&"object"==typeof e,"Params must be an object."),o.strict.ok("data"in e,'Params must include a "data" field.'),o.strict.ok("from"in e,'Params must include a "from" field.'),o.strict.ok("string"==typeof e.from&&(0,m.isValidHexAddress)(e.from,{allowNonPrefixed:!1}),'"from" field must be a valid, lowercase, hexadecimal Ethereum address string.'),e.version){case"V1":o.strict.ok(Array.isArray(e.data),'"params.data" must be an array.'),o.strict.doesNotThrow((()=>{(0,l.typedSignatureHash)(e.data)}),"Signing data must be valid EIP-712 typed data.");break;case"V3":case"V4":{let t;o.strict.equal(typeof e.data,"string",'"params.data" must be a string.'),o.strict.doesNotThrow((()=>{t=JSON.parse(e.data)}),'"data" must be a valid JSON string.');const r=d.default.validate(t,l.TYPED_MESSAGE_SCHEMA);if(o.strict.ok(t.primaryType in t.types,`Primary type of "${t.primaryType}" has no type definition.`),0!==r.errors.length)throw a.ethErrors.rpc.invalidParams({message:"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.",data:r.errors.map((e=>e.message.toString()))});let{chainId:n}=t.domain;if(n){const e=parseInt(this._getCurrentChainId(),16);o.strict.ok(!Number.isNaN(e),`Cannot sign messages for chainId "${n}", because MetaMask is switching networks.`),"string"==typeof n&&(n=parseInt(n,n.startsWith("0x")?16:10)),o.strict.equal(n,e,`Provided chainId "${n}" must match the active chainId "${e}"`)}break}default:o.strict.fail(`Unknown typed data version "${e.version}"`)}}addMsg(e){this.messages.push(e),this._saveMsgList()}getMsg(e){return this.messages.find((t=>t.id===e))}approveMessage(e){return this.setMsgStatusApproved(e.metamaskId),this.prepMsgForSigning(e)}setMsgStatusApproved(e){this._setMsgStatus(e,"approved")}setMsgStatusSigned(e,t){const r=this.getMsg(e);r.rawSig=t,this._updateMsg(r),this._setMsgStatus(e,"signed")}prepMsgForSigning(e){return delete e.metamaskId,delete e.version,Promise.resolve(e)}rejectMsg(e,t=undefined){if(t){const r=this.getMsg(e);this.metricsEvent({event:t,category:g.EVENT.CATEGORIES.TRANSACTIONS,properties:{action:"Sign Request",version:r.msgParams.version,type:r.type}})}this._setMsgStatus(e,"rejected")}errorMessage(e,t){const r=this.getMsg(e);r.error=t,this._updateMsg(r),this._setMsgStatus(e,"errored")}clearUnapproved(){this.messages=this.messages.filter((e=>"unapproved"!==e.status)),this._saveMsgList()}_setMsgStatus(e,t){const r=this.getMsg(e);if(!r)throw new Error(`TypedMessageManager - Message not found for id: "${e}".`);r.status=t,this._updateMsg(r),this.emit(`${e}:${t}`,r),"rejected"!==t&&"signed"!==t&&"errored"!==t||this.emit(`${e}:finished`,r)}_updateMsg(e){const t=this.messages.findIndex((t=>t.id===e.id));-1!==t&&(this.messages[t]=e),this._saveMsgList()}_saveMsgList(){const e=this.getUnapprovedMsgs(),t=Object.keys(e).length;this.memStore.updateState({unapprovedTypedMessages:e,unapprovedTypedMessagesCount:t}),this.emit(h.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE)}}r.default=f}}},{package:"$root$"}],[84,{"../../shared/constants/app":6262,"../../shared/constants/hardware-wallets":6264,"../../shared/constants/metametrics":6266,"../../shared/constants/network":6267,"../../shared/constants/permissions":6268,"../../shared/constants/swaps":6270,"../../shared/constants/time":6271,"../../shared/constants/transaction":6272,"../../shared/modules/hexstring-utils":6278,"../../shared/modules/string-utils":6283,"../../shared/modules/transaction.utils":6285,"../../shared/notifications":6286,"../../ui/helpers/utils/conversions.util":6819,"../../ui/helpers/utils/token-util":6835,"./account-import-strategies":2,"./controllers/alert":6,"./controllers/app-state":7,"./controllers/cached-balances":8,"./controllers/detect-tokens":9,"./controllers/ens":11,"./controllers/incoming-transactions":12,"./controllers/metametrics":13,"./controllers/network":17,"./controllers/onboarding":21,"./controllers/permissions":25,"./controllers/preferences":29,"./controllers/swaps":30,"./controllers/threebox":31,"./controllers/transactions":32,"./detect-multiple-instances":38,"./lib/ComposableObservableStore":40,"./lib/account-tracker":41,"./lib/createLoggerMiddleware":44,"./lib/createMetaRPCHandler":45,"./lib/createOnboardingMiddleware":46,"./lib/createOriginMiddleware":47,"./lib/createRPCMethodTrackingMiddleware":48,"./lib/createTabIdMiddleware":50,"./lib/decrypt-message-manager":51,"./lib/encryption-public-key-manager":52,"./lib/message-manager":61,"./lib/personal-message-manager":66,"./lib/rpc-method-middleware":77,"./lib/seed-phrase-verifier":78,"./lib/segment":79,"./lib/stream-utils":81,"./lib/typed-message-manager":82,"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,"@keystonehq/metamask-airgapped-keyring":577,"@metamask/controllers":1061,"@metamask/eth-ledger-bridge-keyring":1119,"@metamask/obs-store":1204,"@metamask/obs-store/dist/asStream":1203,"@metamask/smart-transactions-controller":1323,"@sentry/browser":1583,_process:5500,"await-semaphore":1884,buffer:2175,"eth-json-rpc-filters":2469,"eth-json-rpc-filters/subscriptionManager":2475,"eth-json-rpc-middleware":2493,"eth-keyring-controller":2520,"eth-lattice-keyring":2521,"eth-query":2533,"eth-rpc-errors":2537,"eth-trezor-keyring":2552,"ethereumjs-util":2612,events:2176,"json-rpc-engine":4837,"json-rpc-middleware-stream/engineStream":4839,lodash:5255,loglevel:5268,nanoid:5343,pump:5599},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t,n){(function(){var s=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.METAMASK_CONTROLLER_EVENTS=void 0;var o=s(e("@babel/runtime/helpers/defineProperty")),i=s(e("events")),a=s(e("pump")),l=e("@metamask/obs-store"),c=e("@metamask/obs-store/dist/asStream"),d=e("json-rpc-engine"),u=e("lodash"),h=s(e("json-rpc-middleware-stream/engineStream")),p=s(e("eth-json-rpc-filters")),g=s(e("eth-json-rpc-filters/subscriptionManager")),m=e("eth-json-rpc-middleware"),f=s(e("eth-keyring-controller")),C=e("eth-rpc-errors"),b=e("await-semaphore"),y=e("ethereumjs-util"),w=s(e("loglevel")),k=s(e("eth-trezor-keyring")),v=s(e("@metamask/eth-ledger-bridge-keyring")),T=s(e("eth-lattice-keyring")),E=e("@keystonehq/metamask-airgapped-keyring"),M=s(e("eth-query")),S=s(e("nanoid")),P=e("@sentry/browser"),A=e("@metamask/controllers"),O=s(e("@metamask/smart-transactions-controller")),_=e("../../shared/constants/transaction"),I=e("../../shared/constants/swaps"),R=e("../../shared/constants/network"),N=e("../../shared/constants/hardware-wallets"),D=e("../../shared/constants/permissions"),U=e("../../shared/notifications"),j=e("../../shared/modules/hexstring-utils"),L=e("../../shared/constants/time"),x=e("../../shared/constants/app"),B=e("../../shared/constants/metametrics"),F=e("../../ui/helpers/utils/conversions.util"),K=e("../../ui/helpers/utils/token-util"),G=e("../../shared/modules/string-utils"),$=e("../../shared/modules/transaction.utils"),H=e("./detect-multiple-instances"),q=s(e("./lib/ComposableObservableStore")),V=s(e("./lib/account-tracker")),Y=s(e("./lib/createLoggerMiddleware")),W=e("./lib/rpc-method-middleware"),z=s(e("./lib/createOriginMiddleware")),J=s(e("./lib/createTabIdMiddleware")),Q=s(e("./lib/createOnboardingMiddleware")),Z=e("./lib/stream-utils"),X=s(e("./controllers/ens")),ee=Ee(e("./controllers/network")),te=s(e("./controllers/preferences")),re=s(e("./controllers/app-state")),ne=s(e("./controllers/cached-balances")),se=s(e("./controllers/alert")),oe=s(e("./controllers/onboarding")),ie=s(e("./controllers/threebox")),ae=s(e("./controllers/incoming-transactions")),le=Ee(e("./lib/message-manager")),ce=s(e("./lib/decrypt-message-manager")),de=s(e("./lib/encryption-public-key-manager")),ue=s(e("./lib/personal-message-manager")),he=s(e("./lib/typed-message-manager")),pe=s(e("./controllers/transactions")),ge=s(e("./controllers/detect-tokens")),me=s(e("./controllers/swaps")),fe=s(e("./account-import-strategies")),Ce=s(e("./lib/seed-phrase-verifier")),be=s(e("./controllers/metametrics")),ye=e("./lib/segment"),we=s(e("./lib/createMetaRPCHandler")),ke=e("./controllers/permissions"),ve=s(e("./lib/createRPCMethodTrackingMiddleware"));function Te(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(Te=function(e){return e?r:t})(e)}function Ee(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=Te(t);if(r&&r.has(e))return r.get(e);var n={},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}function Me(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Se(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Me(Object(r),!0).forEach((function(t){(0,o.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Me(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}r.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange"};class Pe extends i.default{constructor(e){var r;super(),this.defaultMaxListeners=20,this.sendUpdate=(0,u.debounce)(this.privateSendUpdate.bind(this),200*L.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const n=e.initState||{},s=this.platform.getVersion();this.recordFirstTimeInfo(n),this.activeControllerConnections=0,this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.controllerMessenger=new A.ControllerMessenger,this.store=new q.default({state:n,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new b.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&"8.1.0"===s&&this.platform.openExtensionInBrowser()})),this.approvalController=new A.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation}),this.networkController=new ee.default(n.NetworkController),this.networkController.setInfuraProjectId(e.infuraProjectId),this.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker,this.preferencesController=new te.default({initState:n.PreferencesController,initLangCode:e.initLangCode,openPopup:e.openPopup,network:this.networkController,provider:this.provider,migrateAddressBookState:this.migrateAddressBookState.bind(this)}),this.tokensController=new A.TokensController({onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),config:{provider:this.provider},state:n.TokensController}),this.assetsContractController=new A.AssetsContractController({onPreferencesStateChange:e=>this.preferencesController.store.subscribe(e)},{provider:this.provider}),this.collectiblesController=new A.CollectiblesController({onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),getERC721AssetName:this.assetsContractController.getERC721AssetName.bind(this.assetsContractController),getERC721AssetSymbol:this.assetsContractController.getERC721AssetSymbol.bind(this.assetsContractController),getERC721TokenURI:this.assetsContractController.getERC721TokenURI.bind(this.assetsContractController),getERC721OwnerOf:this.assetsContractController.getERC721OwnerOf.bind(this.assetsContractController),getERC1155BalanceOf:this.assetsContractController.getERC1155BalanceOf.bind(this.assetsContractController),getERC1155TokenURI:this.assetsContractController.getERC1155TokenURI.bind(this.assetsContractController)},{},n.CollectiblesController),this.collectiblesController.setApiKey(t.env.OPENSEA_KEY),this.metaMetricsController=new be.default({segment:ye.segment,preferencesStore:this.preferencesController.store,onNetworkDidChange:this.networkController.on.bind(this.networkController,ee.NETWORK_EVENTS.NETWORK_DID_CHANGE),getNetworkIdentifier:this.networkController.getNetworkIdentifier.bind(this.networkController),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),version:this.platform.getVersion(),environment:"production",initState:n.MetaMetricsController,captureException:P.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const o=this.controllerMessenger.getRestricted({name:"GasFeeController"}),i=I.GAS_API_BASE_URL;this.gasFeeController=new A.GasFeeController({interval:1e4,messenger:o,clientId:I.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkStateChange:this.networkController.on.bind(this.networkController,ee.NETWORK_EVENTS.NETWORK_DID_CHANGE),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${i}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${i}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>{const e=this.networkController.getCurrentChainId();return t.env.IN_TEST||e===R.MAINNET_CHAIN_ID},getChainId:()=>t.env.IN_TEST?R.MAINNET_CHAIN_ID:this.networkController.getCurrentChainId()}),this.qrHardwareKeyring=new E.MetaMaskKeyring,this.appStateController=new re.default({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:n.AppStateController,onInactiveTimeout:()=>this.setLocked(),showUnlockRequest:e.showUserConfirmation,preferencesStore:this.preferencesController.store,qrHardwareStore:this.qrHardwareKeyring.getMemStore()});const a=this.controllerMessenger.getRestricted({name:"CurrencyRateController"});this.currencyRateController=new A.CurrencyRateController({includeUsdRate:!0,messenger:a,state:Se(Se({},n.CurrencyController),{},{nativeCurrency:this.networkController.providerStore.getState().ticker})});const l=this.controllerMessenger.getRestricted({name:"TokenListController"});this.tokenListController=new A.TokenListController({chainId:(0,F.hexToDecimal)(this.networkController.getCurrentChainId()),useStaticTokenList:!this.preferencesController.store.getState().useTokenDetection,onNetworkStateChange:e=>this.networkController.store.subscribe((t=>{const r=Se(Se({},t),{},{provider:Se(Se({},t.provider),{},{chainId:(0,F.hexToDecimal)(t.provider.chainId)})});return e(r)})),onPreferencesStateChange:e=>this.preferencesController.store.subscribe((t=>{const r=Se(Se({},t),{},{useStaticTokenList:!this.preferencesController.store.getState().useTokenDetection});return e(r)})),messenger:l,state:n.TokenListController}),this.phishingController=new A.PhishingController,this.announcementController=new A.AnnouncementController({allAnnouncements:U.UI_NOTIFICATIONS},n.AnnouncementController),this.tokenRatesController=new A.TokenRatesController({onTokensStateChange:e=>this.tokensController.subscribe(e),onCurrencyRateStateChange:e=>this.controllerMessenger.subscribe(`${this.currencyRateController.name}:stateChange`,e),onNetworkStateChange:e=>this.networkController.store.subscribe((t=>{const r=Se(Se({},t),{},{provider:Se(Se({},t.provider),{},{chainId:(0,F.hexToDecimal)(t.provider.chainId)})});return e(r)}))}),this.ensController=new X.default({provider:this.provider,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),onNetworkDidChange:this.networkController.on.bind(this.networkController,ee.NETWORK_EVENTS.NETWORK_DID_CHANGE)}),this.incomingTransactionsController=new ae.default({blockTracker:this.blockTracker,onNetworkDidChange:this.networkController.on.bind(this.networkController,ee.NETWORK_EVENTS.NETWORK_DID_CHANGE),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),preferencesController:this.preferencesController,initState:n.IncomingTransactionsController}),this.accountTracker=new V.default({provider:this.provider,blockTracker:this.blockTracker,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController)}),this.on("controllerConnectionChanged",(e=>{e>0?(this.accountTracker.start(),this.incomingTransactionsController.start(),this.currencyRateController.start(),this.tokenListController.start()):(this.accountTracker.stop(),this.incomingTransactionsController.stop(),this.currencyRateController.stop(),this.tokenListController.stop())})),this.cachedBalancesController=new ne.default({accountTracker:this.accountTracker,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),initState:n.CachedBalancesController}),this.onboardingController=new oe.default({initState:n.OnboardingController}),this.tokensController.hub.on("pendingSuggestedAsset",(async()=>{await e.openPopup()}));const c=[k.default,v.default,T.default,E.MetaMaskKeyring];this.keyringController=new f.default({keyringTypes:c,initState:n.KeyringController,encryptor:e.encryptor||undefined}),this.keyringController.memStore.subscribe((e=>this._onKeyringControllerUpdate(e))),this.keyringController.on("unlock",(()=>this._onUnlock())),this.keyringController.on("lock",(()=>this._onLock()));const d=()=>this.preferencesController.store.getState().identities;this.permissionController=new A.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),state:n.PermissionController,caveatSpecifications:(0,ke.getCaveatSpecifications)({getIdentities:d}),permissionSpecifications:Se({},(0,ke.getPermissionSpecifications)({getIdentities:d,getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e={},t=[])=>{const r=t.filter((t=>!e[t])).map((e=>{var t;return null===(t=this.keyringController.getKeyringForAccount(e))||void 0===t?void 0:t.type})),n=Object.keys(e||{}).length,s=Object.keys(this.accountTracker.store.getState().accounts||{}).length;(0,P.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${n} identities, and the ${r} keyrings included accounts with missing identities. Meanwhile, there are ${s} accounts in the account tracker.`))}})),unrestrictedMethods:ke.unrestrictedMethods}),this.permissionLogController=new ke.PermissionLogController({restrictedMethods:new Set(Object.keys(D.RestrictedMethods)),initState:n.PermissionLogController}),this.subjectMetadataController=new A.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:n.SubjectMetadataController,subjectCacheLimit:100}),this.detectTokensController=new ge.default({preferences:this.preferencesController,tokensController:this.tokensController,network:this.networkController,keyringMemStore:this.keyringController.memStore,tokenList:this.tokenListController}),this.addressBookController=new A.AddressBookController(undefined,n.AddressBookController),this.alertController=new se.default({initState:n.AlertController,preferencesStore:this.preferencesController.store}),this.threeBoxController=new ie.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,keyringController:this.keyringController,initState:n.ThreeBoxController,getKeyringControllerState:this.keyringController.memStore.getState.bind(this.keyringController.memStore),version:s,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.txController=new pe.default({initState:n.TransactionController||n.TransactionManager,getPermittedAccounts:this.getPermittedAccounts.bind(this),getProviderConfig:this.networkController.getProviderConfig.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),networkStore:this.networkController.networkStore,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),preferencesStore:this.preferencesController.store,txHistoryLimit:60,signTransaction:this.keyringController.signTransaction.bind(this.keyringController),provider:this.provider,blockTracker:this.blockTracker,createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getTokenStandardAndDetails:this.assetsContractController.getTokenStandardAndDetails.bind(this.assetsContractController)}),this.txController.on("newUnapprovedTx",(()=>e.showUserConfirmation())),this.txController.on("tx:status-update",(async(e,t)=>{if(t===_.TRANSACTION_STATUSES.CONFIRMED||t===_.TRANSACTION_STATUSES.FAILED){const t=this.txController.txStateManager.getTransaction(e),o=this.preferencesController.getFrequentRpcListDetail();let i={};if(t.chainId){var r;const e=o.find((e=>t.chainId===e.chainId));i=null!==(r=null==e?void 0:e.rpcPrefs)&&void 0!==r?r:{}}this.platform.showTransactionNotification(t,i);const{txReceipt:a}=t;if(t.type===_.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM&&t.txParams!==undefined){var n;const{data:e,to:r,from:s}=t.txParams,{chainId:o}=t,i=(0,$.parseStandardTokenTransactionData)(e),a=(0,K.getTokenValueParam)(i),{allCollectibles:l}=this.collectiblesController.state,c=null==l||null===(n=l[s])||void 0===n?void 0:n[o].find((({address:e,tokenId:t})=>(0,G.isEqualCaseInsensitive)(e,r)&&t===a));c&&this.collectiblesController.checkAndUpdateSingleCollectibleOwnershipStatus(c,!1,{userAddress:s,chainId:o})}const l=await this.getState();var s;if(a&&"0x0"===a.status)this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:B.EVENT.CATEGORIES.BACKGROUND,properties:{action:"Transactions",errorMessage:null===(s=t.simulationFails)||void 0===s?void 0:s.reason,numberOfTokens:l.tokens.length,numberOfAccounts:Object.keys(l.accounts).length}},{matomoEvent:!0})}})),this.networkController.on(ee.NETWORK_EVENTS.NETWORK_DID_CHANGE,(async()=>{const{ticker:e}=this.networkController.getProviderConfig();try{await this.currencyRateController.setNativeCurrency(e)}catch(e){console.error(e)}})),this.networkController.lookupNetwork(),this.messageManager=new le.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.personalMessageManager=new ue.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.decryptMessageManager=new ce.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyManager=new de.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.typedMessageManager=new he.default({getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.swapsController=new me.default({getBufferedGasLimit:this.txController.txGasUtil.getBufferedGasLimit.bind(this.txController.txGasUtil),networkController:this.networkController,provider:this.provider,getProviderConfig:this.networkController.getProviderConfig.bind(this.networkController),getTokenRatesState:()=>this.tokenRatesController.state,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController)}),this.smartTransactionsController=new O.default({onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),getNetwork:this.networkController.getNetworkState.bind(this.networkController),getNonceLock:this.txController.nonceTracker.getNonceLock.bind(this.txController.nonceTracker),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),provider:this.provider,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},undefined,n.SmartTransactionsController),this.networkController.on(ee.NETWORK_EVENTS.NETWORK_DID_CHANGE,(()=>{this.accountTracker._updateAccounts()})),this.networkController.on(ee.NETWORK_EVENTS.NETWORK_WILL_CHANGE,(()=>{this.txController.txStateManager.clearUnapprovedTxs(),this.encryptionPublicKeyManager.clearUnapproved(),this.personalMessageManager.clearUnapproved(),this.typedMessageManager.clearUnapproved(),this.decryptMessageManager.clearUnapproved(),this.messageManager.clearUnapproved()})),this.on("update",(e=>this._onStateUpdate(e))),this.store.updateStructure({AppStateController:this.appStateController.store,TransactionController:this.txController.store,KeyringController:this.keyringController.store,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController.store,CachedBalancesController:this.cachedBalancesController.store,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,ThreeBoxController:this.threeBoxController.store,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,CollectiblesController:this.collectiblesController}),this.memStore=new q.default({config:{AppStateController:this.appStateController.store,NetworkController:this.networkController.store,AccountTracker:this.accountTracker.store,TxController:this.txController.memStore,CachedBalancesController:this.cachedBalancesController.store,TokenRatesController:this.tokenRatesController,MessageManager:this.messageManager.memStore,PersonalMessageManager:this.personalMessageManager.memStore,DecryptMessageManager:this.decryptMessageManager.memStore,EncryptionPublicKeyManager:this.encryptionPublicKeyManager.memStore,TypesMessageManager:this.typedMessageManager.memStore,KeyringController:this.keyringController.memStore,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,ThreeBoxController:this.threeBoxController.store,SwapsController:this.swapsController.store,EnsController:this.ensController.store,ApprovalController:this.approvalController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,CollectiblesController:this.collectiblesController},controllerMessenger:this.controllerMessenger}),this.memStore.subscribe(this.sendUpdate.bind(this));const h=null===(r={})||void 0===r?void 0:r.PASSWORD;h&&!this.isUnlocked()&&this.onboardingController.store.getState().completedOnboarding&&this.submitPassword(h),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(H.onMessageReceived),(0,H.checkForMultipleVersionsRunning)()}setupControllerEventSubscriptions(){const e=async(e,t)=>{this.isUnlocked()&&this.notifyConnections(e,{method:ke.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)};let t;this.preferencesController.store.subscribe((async({selectedAddress:r})=>{if(r&&r!==t){t=r;const n=(0,ke.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[t,s]of n.entries())s.includes(r)&&e(t,s)}})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(t,r)=>{const n=(0,ke.getChangedAccounts)(t,r);for(const[t,r]of n.entries())e(t,r)}),ke.getPermittedAccountsByOrigin)}initializeProvider(){const e=this.platform.getVersion(),t={static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${e}`},version:e,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===x.ORIGIN_METAMASK){const e=this.preferencesController.getSelectedAddress();return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:this.newUnapprovedTransaction.bind(this),processEthSignMessage:this.newUnsignedMessage.bind(this),processTypedMessage:this.newUnsignedTypedMessage.bind(this),processTypedMessageV3:this.newUnsignedTypedMessage.bind(this),processTypedMessageV4:this.newUnsignedTypedMessage.bind(this),processPersonalMessage:this.newUnsignedPersonalMessage.bind(this),processDecryptMessage:this.newRequestDecryptMessage.bind(this),processEncryptionPublicKey:this.newRequestEncryptionPublicKey.bind(this),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.getTransactions({searchCriteria:{hash:e,status:_.TRANSACTION_STATUSES.SUBMITTED}})[0]};return this.networkController.initializeProvider(t)}createPublicConfigStore(){const e=new l.ObservableStore,{networkController:t}=this;function r(r){const n=t.getCurrentChainId();"loading"!==r.network&&e.putState(function(e,{isUnlocked:t,network:r}){return{isUnlocked:t,chainId:e,networkVersion:r}}(n,r))}return this.on("update",r),r(this.getState()),e}async getProviderState(e){return Se(Se({isUnlocked:this.isUnlocked()},this.getProviderNetworkState()),{},{accounts:await this.getPermittedAccounts(e)})}getProviderNetworkState(e){const{network:t}=e||this.getState();return{chainId:this.networkController.getCurrentChainId(),networkVersion:t}}getState(){const{vault:e}=this.keyringController.store.getState();return Se({isInitialized:Boolean(e)},this.memStore.getFlatState())}getApi(){const{addressBookController:e,alertController:t,approvalController:r,appStateController:n,collectiblesController:s,collectibleDetectionController:o,currencyRateController:i,detectTokensController:a,ensController:l,gasFeeController:c,keyringController:d,metaMetricsController:u,networkController:h,announcementController:p,onboardingController:g,permissionController:m,preferencesController:f,qrHardwareKeyring:b,swapsController:y,threeBoxController:w,tokensController:k,smartTransactionsController:v,txController:T,assetsContractController:E}=this;return Se(Se({getState:this.getState.bind(this),setCurrentCurrency:i.setCurrentCurrency.bind(i),setUseBlockie:f.setUseBlockie.bind(f),setUseNonceField:f.setUseNonceField.bind(f),setUsePhishDetect:f.setUsePhishDetect.bind(f),setUseTokenDetection:f.setUseTokenDetection.bind(f),setUseCollectibleDetection:f.setUseCollectibleDetection.bind(f),setOpenSeaEnabled:f.setOpenSeaEnabled.bind(f),setIpfsGateway:f.setIpfsGateway.bind(f),setParticipateInMetaMetrics:u.setParticipateInMetaMetrics.bind(u),setCurrentLocale:f.setCurrentLocale.bind(f),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),addNewAccount:this.addNewAccount.bind(this),verifySeedPhrase:this.verifySeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),setLedgerTransportPreference:this.setLedgerTransportPreference.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),establishLedgerTransportPreference:this.establishLedgerTransportPreference.bind(this),submitQRHardwareCryptoHDKey:b.submitCryptoHDKey.bind(b),submitQRHardwareCryptoAccount:b.submitCryptoAccount.bind(b),cancelSyncQRHardware:b.cancelSync.bind(b),submitQRHardwareSignature:b.submitSignature.bind(b),cancelQRHardwareSignRequest:b.cancelSignRequest.bind(b),fetchInfoToSync:this.fetchInfoToSync.bind(this),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setProviderType:h.setProviderType.bind(h),rollbackToPreviousProvider:h.rollbackToPreviousProvider.bind(h),setCustomRpc:this.setCustomRpc.bind(this),updateAndSetCustomRpc:this.updateAndSetCustomRpc.bind(this),delCustomRpc:this.delCustomRpc.bind(this),setSelectedAddress:f.setSelectedAddress.bind(f),addToken:k.addToken.bind(k),rejectWatchAsset:k.rejectWatchAsset.bind(k),acceptWatchAsset:k.acceptWatchAsset.bind(k),updateTokenType:k.updateTokenType.bind(k),removeToken:k.removeAndIgnoreToken.bind(k),setAccountLabel:f.setAccountLabel.bind(f),setFeatureFlag:f.setFeatureFlag.bind(f),setPreference:f.setPreference.bind(f),addKnownMethodData:f.addKnownMethodData.bind(f),setDismissSeedBackUpReminder:f.setDismissSeedBackUpReminder.bind(f),setAdvancedGasFee:f.setAdvancedGasFee.bind(f),setEIP1559V2Enabled:f.setEIP1559V2Enabled.bind(f),setTheme:f.setTheme.bind(f),getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),addCollectible:s.addCollectible.bind(s),addCollectibleVerifyOwnership:s.addCollectibleVerifyOwnership.bind(s),removeAndIgnoreCollectible:s.removeAndIgnoreCollectible.bind(s),removeCollectible:s.removeCollectible.bind(s),checkAndUpdateAllCollectiblesOwnershipStatus:s.checkAndUpdateAllCollectiblesOwnershipStatus.bind(s),checkAndUpdateSingleCollectibleOwnershipStatus:s.checkAndUpdateSingleCollectibleOwnershipStatus.bind(s),isCollectibleOwner:s.isCollectibleOwner.bind(s),setAddressBook:e.set.bind(e),removeFromAddressBook:e.delete.bind(e),setLastActiveTime:n.setLastActiveTime.bind(n),setDefaultHomeActiveTabName:n.setDefaultHomeActiveTabName.bind(n),setConnectedStatusPopoverHasBeenShown:n.setConnectedStatusPopoverHasBeenShown.bind(n),setRecoveryPhraseReminderHasBeenShown:n.setRecoveryPhraseReminderHasBeenShown.bind(n),setRecoveryPhraseReminderLastShown:n.setRecoveryPhraseReminderLastShown.bind(n),setShowTestnetMessageInDropdown:n.setShowTestnetMessageInDropdown.bind(n),setCollectiblesDetectionNoticeDismissed:n.setCollectiblesDetectionNoticeDismissed.bind(n),setEnableEIP1559V2NoticeDismissed:n.setEnableEIP1559V2NoticeDismissed.bind(n),updateCollectibleDropDownState:n.updateCollectibleDropDownState.bind(n),tryReverseResolveAddress:l.reverseResolveAddress.bind(l),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:d.exportAccount.bind(d),cancelTransaction:T.cancelTransaction.bind(T),updateTransaction:T.updateTransaction.bind(T),updateAndApproveTransaction:T.updateAndApproveTransaction.bind(T),approveTransactionsWithSameNonce:T.approveTransactionsWithSameNonce.bind(T),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),getNextNonce:this.getNextNonce.bind(this),addUnapprovedTransaction:T.addUnapprovedTransaction.bind(T),createTransactionEventFragment:T.createTransactionEventFragment.bind(T),getTransactions:T.getTransactions.bind(T),updateEditableParams:T.updateEditableParams.bind(T),updateTransactionGasFees:T.updateTransactionGasFees.bind(T),updateTransactionSendFlowHistory:T.updateTransactionSendFlowHistory.bind(T),updateSwapApprovalTransaction:T.updateSwapApprovalTransaction.bind(T),updateSwapTransaction:T.updateSwapTransaction.bind(T),updatePreviousGasParams:T.updatePreviousGasParams.bind(T),signMessage:this.signMessage.bind(this),cancelMessage:this.cancelMessage.bind(this),signPersonalMessage:this.signPersonalMessage.bind(this),cancelPersonalMessage:this.cancelPersonalMessage.bind(this),signTypedMessage:this.signTypedMessage.bind(this),cancelTypedMessage:this.cancelTypedMessage.bind(this),decryptMessage:this.decryptMessage.bind(this),decryptMessageInline:this.decryptMessageInline.bind(this),cancelDecryptMessage:this.cancelDecryptMessage.bind(this),encryptionPublicKey:this.encryptionPublicKey.bind(this),cancelEncryptionPublicKey:this.cancelEncryptionPublicKey.bind(this),setSeedPhraseBackedUp:g.setSeedPhraseBackedUp.bind(g),completeOnboarding:g.completeOnboarding.bind(g),setFirstTimeFlowType:g.setFirstTimeFlowType.bind(g),setAlertEnabledness:t.setAlertEnabledness.bind(t),setUnconnectedAccountAlertShown:t.setUnconnectedAccountAlertShown.bind(t),setWeb3ShimUsageAlertDismissed:t.setWeb3ShimUsageAlertDismissed.bind(t),setThreeBoxSyncingPermission:w.setThreeBoxSyncingPermission.bind(w),restoreFromThreeBox:w.restoreFromThreeBox.bind(w),setShowRestorePromptToFalse:w.setShowRestorePromptToFalse.bind(w),getThreeBoxLastUpdated:w.getLastUpdated.bind(w),turnThreeBoxSyncingOn:w.turnThreeBoxSyncingOn.bind(w),initializeThreeBox:this.initializeThreeBox.bind(this),removePermissionsFor:m.revokePermissions.bind(m),approvePermissionsRequest:m.acceptPermissionsRequest.bind(m),rejectPermissionsRequest:m.rejectPermissionsRequest.bind(m)},(0,ke.getPermissionBackgroundApiMethods)(m)),{},{fetchAndSetQuotes:y.fetchAndSetQuotes.bind(y),setSelectedQuoteAggId:y.setSelectedQuoteAggId.bind(y),resetSwapsState:y.resetSwapsState.bind(y),setSwapsTokens:y.setSwapsTokens.bind(y),clearSwapsQuotes:y.clearSwapsQuotes.bind(y),setApproveTxId:y.setApproveTxId.bind(y),setTradeTxId:y.setTradeTxId.bind(y),setSwapsTxGasPrice:y.setSwapsTxGasPrice.bind(y),setSwapsTxGasLimit:y.setSwapsTxGasLimit.bind(y),setSwapsTxMaxFeePerGas:y.setSwapsTxMaxFeePerGas.bind(y),setSwapsTxMaxFeePriorityPerGas:y.setSwapsTxMaxFeePriorityPerGas.bind(y),safeRefetchQuotes:y.safeRefetchQuotes.bind(y),stopPollingForQuotes:y.stopPollingForQuotes.bind(y),setBackgroundSwapRouteState:y.setBackgroundSwapRouteState.bind(y),resetPostFetchState:y.resetPostFetchState.bind(y),setSwapsErrorKey:y.setSwapsErrorKey.bind(y),setInitialGasEstimate:y.setInitialGasEstimate.bind(y),setCustomApproveTxData:y.setCustomApproveTxData.bind(y),setSwapsLiveness:y.setSwapsLiveness.bind(y),setSwapsFeatureFlags:y.setSwapsFeatureFlags.bind(y),setSwapsUserFeeLevel:y.setSwapsUserFeeLevel.bind(y),setSwapsQuotesPollingLimitEnabled:y.setSwapsQuotesPollingLimitEnabled.bind(y),setSmartTransactionsOptInStatus:v.setOptInState.bind(v),fetchSmartTransactionFees:v.getFees.bind(v),submitSignedTransactions:v.submitSignedTransactions.bind(v),cancelSmartTransaction:v.cancelSmartTransaction.bind(v),fetchSmartTransactionsLiveness:v.fetchLiveness.bind(v),updateSmartTransaction:v.updateSmartTransaction.bind(v),setStatusRefreshInterval:v.setStatusRefreshInterval.bind(v),trackMetaMetricsEvent:u.trackEvent.bind(u),trackMetaMetricsPage:u.trackPage.bind(u),createEventFragment:u.createEventFragment.bind(u),updateEventFragment:u.updateEventFragment.bind(u),finalizeEventFragment:u.finalizeEventFragment.bind(u),resolvePendingApproval:r.accept.bind(r),rejectPendingApproval:async(e,t)=>{r.reject(e,new C.EthereumRpcError(t.code,t.message,t.data))},updateViewedNotifications:p.updateViewed.bind(p),getGasFeeEstimatesAndStartPolling:c.getGasFeeEstimatesAndStartPolling.bind(c),disconnectGasFeeEstimatePoller:c.disconnectPoller.bind(c),getGasFeeTimeEstimate:c.getTimeEstimate.bind(c),addPollingTokenToAppState:n.addPollingToken.bind(n),removePollingTokenFromAppState:n.removePollingToken.bind(n),detectNewTokens:a.detectNewTokens.bind(a),detectCollectibles:null,addDetectedTokens:null,importTokens:null,ignoreTokens:null,getBalancesInSingleCall:null})}async getTokenStandardAndDetails(e,t,r){var n,s;const o=await this.assetsContractController.getTokenStandardAndDetails(e,t,r);return Se(Se({},o),{},{decimals:null==o||null===(n=o.decimals)||void 0===n?void 0:n.toString(10),balance:null==o||null===(s=o.balance)||void 0===s?void 0:s.toString(10)})}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{let r;if((await this.keyringController.getAccounts()).length>0)r=await this.keyringController.fullUpdate();else{r=await this.keyringController.createNewVaultAndKeychain(e);const t=await this.keyringController.getAccounts();this.preferencesController.setAddresses(t),this.selectFirstIdentity()}return r}finally{t()}}async createNewVaultAndRestore(e,t){const r=await this.createVaultMutex.acquire();try{let s,o;const i=n.from(t),{keyringController:a}=this;this.preferencesController.setAddresses([]),this.permissionController.clearState(),this.accountTracker.clearAccounts(),this.cachedBalancesController.clearCachedBalances(),this.txController.txStateManager.clearUnapprovedTxs();const l=await a.createNewVaultAndRestore(e,i),c=new M.default(this.provider);s=await a.getAccounts(),o=await this.getBalance(s[s.length-1],c);const d=a.getKeyringsByType("HD Key Tree")[0];if(!d)throw new Error("MetamaskController - No HD Key Tree found");for(;"0x0"!==o;)await a.addNewAccount(d),s=await a.getAccounts(),o=await this.getBalance(s[s.length-1],c);s.length>1&&"0x0"===o&&(await this.removeAccount(s[s.length-1]),s=await a.getAccounts());const u=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(u),this.preferencesController.setAddresses(s),this.selectFirstIdentity(),l}finally{r()}}getBalance(e,t){return new Promise(((r,n)=>{const s=this.accountTracker.store.getState().accounts[e];s&&s.balance?r(s.balance):t.getBalance(e,((e,t)=>{e?(n(e),w.default.error(e)):r(t||"0x0")}))}))}async fetchInfoToSync(){const{currentLocale:e,frequentRpcList:t,identities:r,selectedAddress:n,useTokenDetection:s}=this.preferencesController.store.getState(),{tokenList:o}=this.tokenListController.state,i={currentLocale:e,frequentRpcList:t,identities:r,selectedAddress:n},{allTokens:a,allIgnoredTokens:l}=this.tokensController.state,c={};Object.keys(a).forEach((e=>{c[e]={},Object.keys(a[e]).forEach((t=>{const r=(0,j.toChecksumHexAddress)(t);c[e][r]=a[e][r].filter((e=>{if(e.isERC721===undefined){const t=s?e.address.toLowerCase():e.address;if(o[t]!==undefined)return!0}else if(!1===e.isERC721)return!0;return!1}))}))}));const d=this.keyringController.getKeyringsByType("HD Key Tree")[0],u=this.keyringController.getKeyringsByType("Simple Key Pair"),h=await d.getAccounts(),p=(await Promise.all(u.map((e=>e.getAccounts())))).reduce(((e,t)=>[...e,...t]),[]),g={hd:h.filter(((e,t)=>h.indexOf(e)===t)).map((e=>(0,j.toChecksumHexAddress)(e))),simpleKeyPair:p.filter(((e,t)=>p.indexOf(e)===t)).map((e=>(0,j.toChecksumHexAddress)(e))),ledger:[],trezor:[],lattice:[]};let{transactions:m}=this.txController.store.getState();return m=Object.values(m).filter((e=>{const t=(0,j.toChecksumHexAddress)(e.txParams.from);return g.hd.includes(t)})),{accounts:g,preferences:i,transactions:m,tokens:{allTokens:c,allIgnoredTokens:l},network:this.networkController.store.getState()}}async submitPassword(e){await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){w.default.error("Error while unlocking extension.",e)}try{const e=this.threeBoxController.getThreeBoxSyncingState();e&&!this.threeBoxController.box?(this.threeBoxController.init(),this.threeBoxController.turnThreeBoxSyncingOn()):e&&this.threeBoxController.box&&this.threeBoxController.turnThreeBoxSyncingOn()}catch(e){w.default.error("Error while unlocking extension.",e)}const t=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(t),this.keyringController.fullUpdate()}async verifyPassword(e){await this.keyringController.verifyPassword(e)}selectFirstIdentity(){const{identities:e}=this.preferencesController.store.getState(),t=Object.keys(e)[0];this.preferencesController.setSelectedAddress(t)}getPrimaryKeyringMnemonic(){const e=this.keyringController.getKeyringsByType("HD Key Tree")[0];if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){let r=null;switch(e){case N.DEVICE_NAMES.TREZOR:r=k.default.type;break;case N.DEVICE_NAMES.LEDGER:r=v.default.type;break;case N.DEVICE_NAMES.QR:r=E.MetaMaskKeyring.type;break;case N.DEVICE_NAMES.LATTICE:r=T.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let n=await this.keyringController.getKeyringsByType(r)[0];if(n||(n=await this.keyringController.addNewKeyring(r)),t&&n.setHdPath&&n.setHdPath(t),e===N.DEVICE_NAMES.LATTICE&&(n.appName="MetaMask"),e===N.DEVICE_NAMES.TREZOR){const e=n.getModel();this.appStateController.setTrezorModel(e)}return n.network=this.networkController.getProviderConfig().type,n}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(N.DEVICE_NAMES.LEDGER);return await e.attemptMakeApp()}async establishLedgerTransportPreference(){const e=this.preferencesController.getLedgerTransportPreference();return await this.setLedgerTransportPreference(e)}async connectHardware(e,t,r){const n=await this.getKeyringForDevice(e,r);let s=[];switch(t){case-1:s=await n.getPreviousPage();break;case 1:s=await n.getNextPage();break;default:s=await n.getFirstPage()}const o=await this.keyringController.getAccounts(),i=[...new Set(o.concat(s.map((e=>e.address.toLowerCase()))))];return this.accountTracker.syncWithAddresses(i),s}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async forgetDevice(e){return(await this.getKeyringForDevice(e)).forgetDevice(),!0}async getAccountType(e){switch((await this.keyringController.getKeyringForAccount(e)).type){case N.KEYRING_TYPES.TREZOR:case N.KEYRING_TYPES.LATTICE:case N.KEYRING_TYPES.QR:case N.KEYRING_TYPES.LEDGER:return"hardware";case N.KEYRING_TYPES.IMPORTED:return"imported";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case N.KEYRING_TYPES.TREZOR:return t.getModel();case N.KEYRING_TYPES.QR:return t.getName();case N.KEYRING_TYPES.LEDGER:return N.DEVICE_NAMES.LEDGER;case N.KEYRING_TYPES.LATTICE:return N.DEVICE_NAMES.LATTICE;default:return"N/A"}}getAccountLabel(e,t,r){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${r||""}`.trim()}async unlockHardwareWalletAccount(e,t,r,n){const s=await this.getKeyringForDevice(t,r);s.setAccountToUnlock(e);const o=await this.keyringController.getAccounts(),i=await this.keyringController.addNewAccount(s),a=await this.keyringController.getAccounts();this.preferencesController.setAddresses(a),a.forEach((r=>{if(!o.includes(r)){const o=this.getAccountLabel(t===N.DEVICE_NAMES.QR?s.getName():t,e,n);this.preferencesController.setAccountLabel(r,o),this.preferencesController.setSelectedAddress(r)}}));const{identities:l}=this.preferencesController.store.getState();return Se(Se({},i),{},{identities:l})}async addNewAccount(){const e=this.keyringController.getKeyringsByType("HD Key Tree")[0];if(!e)throw new Error("MetamaskController - No HD Key Tree found");const{keyringController:t}=this,r=await t.getAccounts(),n=await t.addNewAccount(e),s=await t.getAccounts();await this.verifySeedPhrase(),this.preferencesController.setAddresses(s),s.forEach((e=>{r.includes(e)||this.preferencesController.setSelectedAddress(e)}));const{identities:o}=this.preferencesController.store.getState();return Se(Se({},n),{},{identities:o})}async verifySeedPhrase(){const e=this.keyringController.getKeyringsByType("HD Key Tree")[0];if(!e)throw new Error("MetamaskController - No HD Key Tree found");const t=await e.serialize(),r=n.from(t.mnemonic),s=await e.getAccounts();if(s.length<1)throw new Error("MetamaskController - No accounts found");try{return await Ce.default.verifyAccounts(s,r),Array.from(r.values())}catch(e){throw w.default.error(e.message),e}}async resetAccount(){const e=this.preferencesController.getSelectedAddress();return this.txController.wipeTransactions(e),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,D.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===C.errorCodes.provider.unauthorized)return[];throw e}}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(D.CaveatTypes.restrictReturnedAccounts,(t=>ke.CaveatMutatorFactories[D.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e),this.preferencesController.removeAddress(e),this.accountTracker.removeAccount([e]);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const r=t?await t.getAccounts():{};var n;0===(null==r?void 0:r.length)&&(null===(n=t.destroy)||void 0===n||n.call(t));return e}async importAccountWithStrategy(e,t){const r=await fe.default.importAccount(e,t),n=await this.keyringController.addNewKeyring("Simple Key Pair",[r]),s=await n.getAccounts(),o=await this.keyringController.getAccounts();this.preferencesController.setAddresses(o),await this.preferencesController.setSelectedAddress(s[0])}async newUnapprovedTransaction(e,t){return await this.txController.newUnapprovedTransaction(e,t)}async newUnsignedMessage(e,t){const r=(0,le.normalizeMsgData)(e.data);let n;if(66!==r.length&&67!==r.length)throw C.ethErrors.rpc.invalidParams("eth_sign requires 32 byte message hash");return n=this.messageManager.addUnapprovedMessageAsync(e,t),this.sendUpdate(),this.opts.showUserConfirmation(),await n}async signMessage(e){w.default.info("MetaMaskController - signMessage");const t=e.metamaskId;try{const r=await this.messageManager.approveMessage(e),n=await this.keyringController.signMessage(r);return this.messageManager.setMsgStatusSigned(t,n),this.getState()}catch(e){throw w.default.info("MetaMaskController - eth_sign failed",e),this.messageManager.errorMessage(t,e),e}}cancelMessage(e){const{messageManager:t}=this;return t.rejectMsg(e),this.getState()}async newUnsignedPersonalMessage(e,t){const r=this.personalMessageManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}async signPersonalMessage(e){w.default.info("MetaMaskController - signPersonalMessage");const t=e.metamaskId;try{const r=await this.personalMessageManager.approveMessage(e),n=await this.keyringController.signPersonalMessage(r);return this.personalMessageManager.setMsgStatusSigned(t,n),this.getState()}catch(e){throw w.default.info("MetaMaskController - eth_personalSign failed",e),this.personalMessageManager.errorMessage(t,e),e}}cancelPersonalMessage(e){return this.personalMessageManager.rejectMsg(e),this.getState()}async newRequestDecryptMessage(e,t){const r=this.decryptMessageManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}async decryptMessageInline(e){w.default.info("MetaMaskController - decryptMessageInline");const t=e.metamaskId,r=this.decryptMessageManager.getMsg(t);try{const t=(0,y.stripHexPrefix)(e.data),s=n.from(t,"hex");e.data=JSON.parse(s.toString("utf8")),r.rawData=await this.keyringController.decryptMessage(e)}catch(e){r.error=e.message}return this.decryptMessageManager._updateMsg(r),this.getState()}async decryptMessage(e){w.default.info("MetaMaskController - decryptMessage");const t=e.metamaskId;try{const r=await this.decryptMessageManager.approveMessage(e),s=(0,y.stripHexPrefix)(r.data),o=n.from(s,"hex");r.data=JSON.parse(o.toString("utf8"));const i=await this.keyringController.decryptMessage(r);this.decryptMessageManager.setMsgStatusDecrypted(t,i)}catch(e){w.default.info("MetaMaskController - eth_decrypt failed.",e),this.decryptMessageManager.errorMessage(t,e)}return this.getState()}cancelDecryptMessage(e){return this.decryptMessageManager.rejectMsg(e),this.getState()}async newRequestEncryptionPublicKey(e,t){const r=e;switch((await this.keyringController.getKeyringForAccount(r)).type){case N.KEYRING_TYPES.LEDGER:return new Promise(((e,t)=>{t(new Error("Ledger does not support eth_getEncryptionPublicKey."))}));case N.KEYRING_TYPES.TREZOR:return new Promise(((e,t)=>{t(new Error("Trezor does not support eth_getEncryptionPublicKey."))}));case N.KEYRING_TYPES.LATTICE:return new Promise(((e,t)=>{t(new Error("Lattice does not support eth_getEncryptionPublicKey."))}));case N.KEYRING_TYPES.QR:return Promise.reject(new Error("QR hardware does not support eth_getEncryptionPublicKey."));default:{const r=this.encryptionPublicKeyManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}}}async encryptionPublicKey(e){w.default.info("MetaMaskController - encryptionPublicKey");const t=e.metamaskId;try{const r=await this.encryptionPublicKeyManager.approveMessage(e),n=await this.keyringController.getEncryptionPublicKey(r.data);this.encryptionPublicKeyManager.setMsgStatusReceived(t,n)}catch(e){w.default.info("MetaMaskController - eth_getEncryptionPublicKey failed.",e),this.encryptionPublicKeyManager.errorMessage(t,e)}return this.getState()}cancelEncryptionPublicKey(e){return this.encryptionPublicKeyManager.rejectMsg(e),this.getState()}newUnsignedTypedMessage(e,t,r){const n=this.typedMessageManager.addUnapprovedMessageAsync(e,t,r);return this.sendUpdate(),this.opts.showUserConfirmation(),n}async signTypedMessage(e){w.default.info("MetaMaskController - eth_signTypedData");const t=e.metamaskId,{version:r}=e;try{const n=await this.typedMessageManager.approveMessage(e);"V1"!==r&&"string"==typeof n.data&&(n.data=JSON.parse(n.data));const s=await this.keyringController.signTypedMessage(n,{version:r});return this.typedMessageManager.setMsgStatusSigned(t,s),this.getState()}catch(e){throw w.default.info("MetaMaskController - eth_signTypedData failed.",e),this.typedMessageManager.errorMessage(t,e),e}}cancelTypedMessage(e){return this.typedMessageManager.rejectMsg(e),this.getState()}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,r){await this.txController.createCancelTransaction(e,t,r);return await this.getState()}async createSpeedUpTransaction(e,t,r){await this.txController.createSpeedUpTransaction(e,t,r);return await this.getState()}estimateGas(e){return new Promise(((t,r)=>this.txController.txGasUtil.query.estimateGas(e,((e,n)=>e?r(e):t(n.toString(16))))))}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setupUntrustedCommunication({connectionStream:e,sender:t,subjectType:r}){const{usePhishDetect:n}=this.preferencesController.store.getState();let s;if(s=r||(t.id&&t.id!==this.extension.runtime.id?x.SUBJECT_TYPES.EXTENSION:x.SUBJECT_TYPES.WEBSITE),t.url){const{hostname:r}=new URL(t.url);if(n&&this.phishingController.test(r))return w.default.debug("MetaMask - sending phishing warning for",r),void this.sendPhishingWarning(e,r)}const o=(0,Z.setupMultiplex)(e);this.setupProviderConnection(o.createStream("metamask-provider"),t,s),t.url&&this.setupPublicConfig(o.createStream("publicConfig"))}setupTrustedCommunication(e,t){const r=(0,Z.setupMultiplex)(e);this.setupControllerConnection(r.createStream("controller")),this.setupProviderConnection(r.createStream("provider"),t,x.SUBJECT_TYPES.INTERNAL)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.store.getState();if(!t)return;const r=(0,Z.setupMultiplex)(e).createStream("metamask-phishing-safelist");r.on("data",(0,we.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this)},r))}sendPhishingWarning(e,t){(0,Z.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=this.getApi();this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,we.default)(t,e));const r=t=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"sendUpdate",params:[t]})};this.on("update",r),e.on("end",(()=>{this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),this.removeListener("update",r)}))}setupProviderConnection(e,t,r){let n,s;n=r===x.SUBJECT_TYPES.INTERNAL?x.ORIGIN_METAMASK:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:n,extensionId:t.id,subjectType:x.SUBJECT_TYPES.EXTENSION}),t.tab&&t.tab.id&&(s=t.tab.id);const o=this.setupProviderEngine({origin:n,sender:t,subjectType:r,tabId:s}),i=(0,h.default)({engine:o}),l=this.addConnection(n,{engine:o});(0,a.default)(e,i,e,(e=>{o._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),l&&this.removeConnection(n,l),e&&w.default.error(e)}))}setupProviderEngine({origin:e,subjectType:t,sender:r,tabId:n}){const s=new d.JsonRpcEngine,{blockTracker:o,provider:i}=this,a=(0,p.default)({provider:i,blockTracker:o}),l=(0,g.default)({provider:i,blockTracker:o});return l.events.on("notification",(e=>s.emit("notification",e))),s.push((0,z.default)({origin:e})),n&&s.push((0,J.default)({tabId:n})),s.push((0,Y.default)({origin:e})),s.push(this.permissionLogController.createMiddleware()),s.push((0,ve.default)({trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getMetricsState:this.metaMetricsController.store.getState.bind(this.metaMetricsController.store)})),t===x.SUBJECT_TYPES.WEBSITE&&s.push((0,Q.default)({location:r.url,registerOnboarding:this.onboardingController.registerOnboarding})),s.push((0,W.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.tokensController.watchAsset.bind(this.tokensController),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{}}),requestPermissionsForOrigin:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e}),addCustomRpc:async({chainId:e,blockExplorerUrl:t,ticker:r,chainName:n,rpcUrl:s}={})=>{await this.preferencesController.addToFrequentRpcList(s,e,r,n,{blockExplorerUrl:t})},findCustomRpcBy:this.findCustomRpcBy.bind(this),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),setProviderType:this.networkController.setProviderType.bind(this.networkController),updateRpcTarget:({rpcUrl:e,chainId:t,ticker:r,nickname:n})=>{this.networkController.setRpcTarget(e,t,r,n)},getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),s.push(a),s.push(l.middleware),t!==x.SUBJECT_TYPES.INTERNAL&&s.push(this.permissionController.createPermissionMiddleware({origin:e})),s.push((0,m.providerAsMiddleware)(i)),s}setupPublicConfig(e){const t=(0,c.storeAsStream)(this.publicConfigStore);(0,a.default)(t,e,(e=>{t.destroy(),e&&w.default.error(e)}))}addConnection(e,{engine:t}){if(e===x.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const r=(0,S.default)();return this.connections[e][r]={engine:t},r}removeConnection(e,t){const r=this.connections[e];r&&(delete r[t],0===Object.keys(r).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const r=this.connections[e];r&&Object.values(r).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{r.engine&&r.engine.emit("notification",await t(e))}))}))}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,r=t.reduce(((e,{accounts:t})=>e.concat(t)),[]);r.length&&(this.preferencesController.syncAddresses(r),this.accountTracker.syncWithAddresses(r))}_onUnlock(){this.notifyAllConnections((async e=>({method:ke.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:ke.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this.notifyAllConnections({method:ke.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState(e)})}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.memStore.getState().isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async getPendingNonce(e){const{nonceDetails:t,releaseLock:r}=await this.txController.nonceTracker.getNonceLock(e),n=t.params.highestSuggested;return r(),n}async getNextNonce(e){const t=await this.txController.nonceTracker.getNonceLock(e);return t.releaseLock(),t.nextNonce}async migrateAddressBookState(e,t,r=!1){const{addressBook:n}=this.addressBookController.state;if(n[e])for(const s of Object.keys(n[e])){const o=n[e][s];this.addressBookController.set(s,o.name,t,o.memo),r||this.addressBookController.delete(e,s)}}async updateAndSetCustomRpc(e,t,r="ETH",n,s){return this.networkController.setRpcTarget(e,t,r,n,s),await this.preferencesController.updateRpc({rpcUrl:e,chainId:t,ticker:r,nickname:n,rpcPrefs:s}),e}async setCustomRpc(e,t,r="ETH",n="",s={}){const o=this.preferencesController.getFrequentRpcListDetail().find((t=>e===t.rpcUrl));return o?this.networkController.setRpcTarget(o.rpcUrl,o.chainId,o.ticker,o.nickname,s):(this.networkController.setRpcTarget(e,t,r,n,s),await this.preferencesController.addToFrequentRpcList(e,t,r,n,s)),e}async delCustomRpc(e){await this.preferencesController.removeFromFrequentRpcList(e)}findCustomRpcBy(e){const t=this.preferencesController.getFrequentRpcListDetail();for(const r of t)for(const t of Object.keys(e))if(r[t]===e[t])return r;return null}async initializeThreeBox(){await this.threeBoxController.init()}async setLedgerTransportPreference(e){const t=this.preferencesController.getLedgerTransportPreference(),r=this.preferencesController.setLedgerTransportPreference(e),n=await this.getKeyringForDevice(N.DEVICE_NAMES.LEDGER);return null!=n&&n.updateTransportMethod?n.updateTransportMethod(r).catch((e=>{throw this.preferencesController.setLedgerTransportPreference(t),e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t=this.platform.getVersion();e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e,this.detectTokensController.isOpen=e}onClientClosed(){try{this.gasFeeController.stopPolling(),this.appStateController.clearPollingTokens()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=x.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.disconnectPoller(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.phishingController.bypass(e)}setLocked(){var e;const[t]=this.keyringController.getKeyringsByType(N.KEYRING_TYPES.TREZOR);t&&t.dispose();const[r]=this.keyringController.getKeyringsByType(N.KEYRING_TYPES.LEDGER);return null==r||null===(e=r.destroy)||void 0===e||e.call(r),this.keyringController.setLocked()}}r.default=Pe}).call(this)}).call(this,e("_process"),e("buffer").Buffer)}}},{package:"$root$"}],[85,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:2,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[86,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:3,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[87,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:4,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[88,{"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("@babel/runtime/helpers/defineProperty")),o=e("lodash");function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){(0,s.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var l={version:5,migrate(e){const t=(0,o.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,r=a(a({},e),{},{KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}});return delete r.vault,delete r.walletNicknames,delete r.config.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}};r.default=l}}},{package:"$root$"}],[89,{"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("@babel/runtime/helpers/defineProperty")),o=e("lodash");function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){(0,s.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var l={version:6,migrate(e){const t=(0,o.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,r=a(a({},e),{},{PreferencesController:{selectedAddress:t.selectedAccount}});return delete r.KeyringController.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}};r.default=l}}},{package:"$root$"}],[9,{"../../../shared/constants/metametrics":6266,"../../../shared/constants/network":6267,"../../../shared/constants/time":6271,"../../../shared/constants/transaction":6272,"../../../shared/modules/network.utils":6280,"../../../shared/modules/string-utils":6283,"../../../ui/helpers/constants/common":6796,"../constants/contracts":4,"@babel/runtime/helpers/interopRequireDefault":200,loglevel:5268,"single-call-balance-checker-abi":5925,web3:6185},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("web3")),o=e("loglevel"),i=n(e("single-call-balance-checker-abi")),a=e("../constants/contracts"),l=e("../../../shared/constants/time"),c=e("../../../shared/constants/network"),d=(e("../../../shared/modules/network.utils"),e("../../../shared/modules/string-utils"));e("../../../ui/helpers/constants/common"),e("../../../shared/constants/transaction"),e("../../../shared/constants/metametrics");const u=3*l.MINUTE;r.default=class{constructor({interval:e=u,preferences:t,network:r,keyringMemStore:n,tokenList:s,tokensController:o,assetsContractController:i=null,trackMetaMetricsEvent:a}={}){var l,c,d;this.assetsContractController=i,this.tokensController=o,this.preferences=t,this.interval=e,this.network=r,this.keyringMemStore=n,this.tokenList=s,this.selectedAddress=null===(l=this.preferences)||void 0===l?void 0:l.store.getState().selectedAddress,this.tokenAddresses=null===(c=this.tokensController)||void 0===c?void 0:c.state.tokens.map((e=>e.address)),this.hiddenTokens=null===(d=this.tokensController)||void 0===d?void 0:d.state.ignoredTokens,this.detectedTokens=[],this._trackMetaMetricsEvent=a,null==t||t.store.subscribe((({selectedAddress:e,useTokenDetection:t})=>{this.selectedAddress===e&&this.useTokenDetection===t||(this.selectedAddress=e,this.useTokenDetection=t,this.restartTokenDetection())})),null==o||o.subscribe((({tokens:e=[],ignoredTokens:t=[],detectedTokens:r=[]})=>{this.tokenAddresses=e.map((e=>e.address)),this.hiddenTokens=t,this.detectedTokens=[]}))}async _getTokenBalances(e){const t=this.web3.eth.contract(i.default).at(a.SINGLE_CALL_BALANCES_ADDRESS);return new Promise(((r,n)=>{t.balances([this.selectedAddress],e,((e,t)=>e?n(e):r(t)))}))}async detectNewTokens(){if(!this.isActive)return;const{tokenList:e}=this._tokenList.state;if(this._network.store.getState().provider.chainId!==c.MAINNET_CHAIN_ID||0===Object.keys(e).length)return;const t=[];this.web3.setProvider(this._network._provider);for(const r in e)this.tokenAddresses.find((e=>(0,d.isEqualCaseInsensitive)(e,r)))||this.hiddenTokens.find((e=>(0,d.isEqualCaseInsensitive)(e,r)))||this.detectedTokens.find((({address:e})=>(0,d.isEqualCaseInsensitive)(e,r)))||t.push(r);const r=[t.slice(0,1e3),t.slice(1e3,t.length-1)];for(const t of r){let r;try{r=await this._getTokenBalances(t)}catch(e){return void(0,o.warn)("MetaMask - DetectTokensController single call balance fetch failed",e)}let n=[];n=t.filter(((e,t)=>{const n=r[t];return n&&!n.isZero()})),await Promise.all(n.map((t=>this.tokensController.addToken(t,e[t].symbol,e[t].decimals))))}}restartTokenDetection(){this.isActive&&this.selectedAddress&&(this.detectNewTokens(),this.interval=u)}set interval(e){this._handle&&clearInterval(this._handle),e&&(this._handle=setInterval((()=>{this.detectNewTokens()}),e))}set network(e){e&&(this._network=e,this.web3=new s.default(e._provider))}set keyringMemStore(e){e&&(this._keyringMemStore=e,this._keyringMemStore.subscribe((({isUnlocked:e})=>{this.isUnlocked!==e&&(this.isUnlocked=e,e&&this.restartTokenDetection())})))}set tokenList(e){e&&(this._tokenList=e)}get isActive(){return this.isOpen&&this.isUnlocked}}}}},{package:"$root$"}],[90,{"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("@babel/runtime/helpers/defineProperty")),o=e("lodash");function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){(0,s.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var l={version:7,migrate(e){const t=(0,o.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t=a(a({},e),{},{TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}});return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}};r.default=l}}},{package:"$root$"}],[91,{"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=n(e("@babel/runtime/helpers/defineProperty")),o=e("lodash");function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){(0,s.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var l={version:8,migrate(e){const t=(0,o.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t=a(a({},e),{},{NoticeController:{noticesList:e.noticesList||[]}});return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}};r.default=l}}},{package:"$root$"}],[92,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:9,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,n.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[93,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:10,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,n.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[94,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:11,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[95,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:12,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[96,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:13,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=13;try{const e=function(e){const t=e,{config:r}=t;r&&r.provider&&"testnet"===r.provider.type&&(t.config.provider.type="ropsten");return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #13${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[97,{lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:14,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=14;try{const e=function(e){const t=e;return t.NetworkController={},t.NetworkController.provider=t.config.provider,delete t.config.provider,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #14${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[98,{"../../../shared/constants/transaction":6272,lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),s=e("../../../shared/constants/transaction");var o={version:15,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=15;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=r;t.TransactionController.transactions=e.map((e=>e.err?("Gave up submitting tx."===e.err.message&&(e.status=s.TRANSACTION_STATUSES.FAILED),e):e))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #15${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$"}],[99,{"../../../shared/constants/transaction":6272,lodash:5255},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),s=e("../../../shared/constants/transaction");var o={version:16,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=16;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>e.err?("transaction with the same hash was already imported."===e.err&&(e.status=s.TRANSACTION_STATUSES.SUBMITTED,delete e.err),e):e))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #16${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$"}],[3,{"../../shared/constants/app":6262,"../../shared/constants/metametrics":6266,"../../shared/constants/time":6271,"../../shared/modules/mv3.utils":6279,"./first-time-state":39,"./lib/createStreamSink":49,"./lib/ens-ipfs/setup":56,"./lib/get-first-preferred-lang-code":58,"./lib/getObjStructure":59,"./lib/local-store":60,"./lib/migrator":63,"./lib/network-store":64,"./lib/notification-manager":65,"./lib/util":83,"./metamask-controller":84,"./migrations":157,"./platforms/extension":158,"@babel/runtime/helpers/defineProperty":194,"@babel/runtime/helpers/interopRequireDefault":200,"@metamask/obs-store":1204,"@sentry/browser":1583,_process:5500,"debounce-stream":2344,"end-of-stream":2432,"eth-rpc-errors":2537,"extension-port-stream":2676,loglevel:5268,pump:5599,"webextension-polyfill":6237},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t){(function(){var r=e("@babel/runtime/helpers/interopRequireDefault"),n=r(e("@babel/runtime/helpers/defineProperty")),s=r(e("end-of-stream")),o=r(e("pump")),i=r(e("debounce-stream")),a=r(e("loglevel")),l=r(e("webextension-polyfill")),c=e("@metamask/obs-store"),d=r(e("extension-port-stream")),u=e("@sentry/browser"),h=e("eth-rpc-errors"),p=e("../../shared/constants/app"),g=e("../../shared/constants/time"),m=e("../../shared/constants/metametrics"),f=e("../../shared/modules/mv3.utils"),C=r(e("./migrations")),b=r(e("./lib/migrator")),y=r(e("./platforms/extension")),w=r(e("./lib/local-store")),k=r(e("./lib/network-store")),v=r(e("./lib/createStreamSink")),T=I(e("./lib/notification-manager")),E=I(e("./metamask-controller")),M=r(e("./first-time-state")),S=r(e("./lib/get-first-preferred-lang-code")),P=r(e("./lib/getObjStructure")),A=r(e("./lib/ens-ipfs/setup")),O=e("./lib/util");function _(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(_=function(e){return e?r:t})(e)}function I(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=_(t);if(r&&r.has(e))return r.get(e);var n={},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}function R(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}const{sentry:N}=global,D=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?R(Object(r),!0).forEach((function(t){(0,n.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):R(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},M.default),U={[p.ENVIRONMENT_TYPE_POPUP]:!0,[p.ENVIRONMENT_TYPE_NOTIFICATION]:!0,[p.ENVIRONMENT_TYPE_FULLSCREEN]:!0},j=["trezor-connect"];a.default.setDefaultLevel(t.env.METAMASK_DEBUG?"debug":"info");const L=new y.default,x=new T.default;global.METAMASK_NOTIFIER=x;let B=!1,F=!1,K=!1;const G={},$={},H=t.env.IN_TEST,q=H?new k.default:new w.default;let V;(H||t.env.METAMASK_DEBUG)&&(global.metamaskGetState=q.get.bind(q));const Y=new URL("https://metamask.github.io/phishing-warning/v1.1.0/"),W=async e=>{l.default.runtime.onConnect.removeListener(W),await z(e),a.default.info("MetaMask initialization complete.")};async function z(e){const t=await async function(){const e=new b.default({migrations:C.default});e.on("error",console.warn),V=await q.get()||e.generateInitialState(D),V&&!V.data&&(V=e.generateInitialState(D),N.captureMessage("MetaMask - Empty vault found - unable to recover"));if(e.on("error",(e=>{const t=(0,P.default)(V);N.captureException(e,{extra:{vaultStructure:t}})})),V=await e.migrateData(V),!V)throw new Error("MetaMask - migrator returned undefined");q.isSupported?q.set(V):setTimeout((()=>{throw new Error("MetaMask - Localstore not supported")}));return V.data}(),r=await(0,S.default)();await function(e,t,r){const n=new E.default({infuraProjectId:"9aa3d95b3bc440fa88ea12eaa4456161",showUserConfirmation:Q,openPopup:Z,initState:e,initLangCode:t,platform:L,notificationManager:x,browser:l.default,getRequestAccountTabIds:()=>$,getOpenMetamaskTabsIds:()=>G});function g(e){return V.data=e,V}(0,A.default)({getCurrentChainId:n.networkController.getCurrentChainId.bind(n.networkController),getIpfsGateway:n.preferencesController.getIpfsGateway.bind(n.preferencesController),provider:n.provider}),(0,o.default)((0,c.storeAsStream)(n.store),(0,i.default)(1e3),(0,c.storeTransformStream)(g),(0,v.default)(b),(e=>{a.default.error("MetaMask - Persistence pipeline failed",e)}));let C=!1;async function b(e){if(!e)throw new Error("MetaMask - updated state is missing");if(!e.data)throw new Error("MetaMask - updated state does not have data");if(q.isSupported)try{await q.set(e),C&&(C=!1)}catch(e){C||(C=!0,(0,u.captureException)(e)),a.default.error("error setting state in local store:",e)}}(0,f.isManifestV3)()&&r&&k(r);l.default.runtime.onConnect.addListener(k),l.default.runtime.onConnectExternal.addListener(M);const y=()=>B||Boolean(Object.keys(G).length)||F,w=(e,t)=>{if(!1===e)n.onClientClosed();else{if(t===p.ENVIRONMENT_TYPE_FULLSCREEN&&Boolean(Object.keys(G).length))return;n.onEnvironmentTypeClosed(t)}};function k(e){var t;const r=e.name;if(j.includes(e.name))return;let o=!1;o=(0,O.getPlatform)()===p.PLATFORM_FIREFOX?U[r]:e.sender.origin===`chrome-extension://${l.default.runtime.id}`;const i=null!==(t=e.sender)&&void 0!==t&&t.url?new URL(e.sender.url):null;if(o){const t=new d.default(e);if(n.isClientOpen=!0,n.setupTrustedCommunication(t,e.sender),(0,f.isManifestV3)()&&e.postMessage({name:"CONNECTION_READY"}),r===p.ENVIRONMENT_TYPE_POPUP&&(B=!0,(0,s.default)(t,(()=>{B=!1;const e=y();n.isClientOpen=e,w(e,p.ENVIRONMENT_TYPE_POPUP)}))),r===p.ENVIRONMENT_TYPE_NOTIFICATION&&(F=!0,(0,s.default)(t,(()=>{F=!1;const e=y();n.isClientOpen=e,w(e,p.ENVIRONMENT_TYPE_NOTIFICATION)}))),r===p.ENVIRONMENT_TYPE_FULLSCREEN){const r=e.sender.tab.id;G[r]=!0,(0,s.default)(t,(()=>{delete G[r];const e=y();n.isClientOpen=e,w(e,p.ENVIRONMENT_TYPE_FULLSCREEN)}))}}else if(i&&i.origin===Y.origin&&i.pathname===Y.pathname){const t=new d.default(e);n.setupPhishingCommunication({connectionStream:t})}else{if(e.sender&&e.sender.tab&&e.sender.url){const t=e.sender.tab.id,r=new URL(e.sender.url),{origin:n}=r;e.onMessage.addListener((e=>{e.data&&"eth_requestAccounts"===e.data.method&&($[n]=t)}))}M(e)}}function M(e){const t=new d.default(e);n.setupUntrustedCommunication({connectionStream:t,sender:e.sender})}function S(){let e="";const t=P();t&&(e=String(t)),(0,f.isManifestV3)()?(l.default.action.setBadgeText({text:e}),l.default.action.setBadgeBackgroundColor({color:"#037DD6"})):(l.default.browserAction.setBadgeText({text:e}),l.default.browserAction.setBadgeBackgroundColor({color:"#037DD6"}))}function P(){const e=n.txController.getUnapprovedTxCount(),{unapprovedMsgCount:t}=n.messageManager,{unapprovedPersonalMsgCount:r}=n.personalMessageManager,{unapprovedDecryptMsgCount:s}=n.decryptMessageManager,{unapprovedEncryptionPublicKeyMsgCount:o}=n.encryptionPublicKeyManager,{unapprovedTypedMessagesCount:i}=n.typedMessageManager;return e+t+r+s+o+i+n.approvalController.getTotalApprovalCount()+n.appStateController.waitingForUnlock.length}function _(){Object.keys(n.txController.txStateManager.getUnapprovedTxList()).forEach((e=>n.txController.txStateManager.setTxStatusRejected(e))),n.messageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>n.messageManager.rejectMsg(e.id,m.REJECT_NOTFICIATION_CLOSE_SIG))),n.personalMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>n.personalMessageManager.rejectMsg(e.id,m.REJECT_NOTFICIATION_CLOSE_SIG))),n.typedMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>n.typedMessageManager.rejectMsg(e.id,m.REJECT_NOTFICIATION_CLOSE_SIG))),n.decryptMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>n.decryptMessageManager.rejectMsg(e.id,m.REJECT_NOTFICIATION_CLOSE))),n.encryptionPublicKeyManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>n.encryptionPublicKeyManager.rejectMsg(e.id,m.REJECT_NOTFICIATION_CLOSE))),n.approvalController.clear(h.ethErrors.provider.userRejectedRequest()),S()}return S(),n.txController.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,S),n.messageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,S),n.personalMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,S),n.decryptMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,S),n.encryptionPublicKeyManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,S),n.typedMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,S),n.appStateController.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,S),n.controllerMessenger.subscribe(E.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE,S),x.on(T.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED,(({automaticallyClosed:e})=>{e?P()>0&&Q():_()})),Promise.resolve()}(t,r,e),await async function(){let e;try{const t=new URL("https://metamask.github.io/phishing-warning/v1.1.0/");let r,n;t.hash="#extensionStartup",e=window.document.createElement("iframe"),e.setAttribute("src",t.href),e.setAttribute("sandbox","allow-scripts allow-same-origin");const s=new Promise(((e,t)=>{r=e,n=t}));e.addEventListener("load",r),window.document.body.appendChild(e),setTimeout((()=>n(new J)),1e3),await s}catch(e){e instanceof J?console.warn("Phishing warning page timeout; page not guaraneteed to work offline."):console.error("Failed to initialize phishing warning page",e)}finally{e&&e.remove()}}(),a.default.info("MetaMask initialization complete.")}(0,f.isManifestV3)()?l.default.runtime.onConnect.addListener(W):z().catch(a.default.error);class J extends Error{constructor(){super("Timeout failed")}}async function Q(){const e=await L.getActiveTabs(),t=Boolean(e.find((e=>G[e.id]))),r=e.length>0&&e[0].extData&&e[0].extData.indexOf("vivaldi_tab")>-1;if(!K&&(r||!B)&&!t){K=!0;try{await x.showPopup()}finally{K=!1}}}async function Z(){await Q(),await new Promise((e=>{const t=setInterval((()=>{F||(clearInterval(t),e())}),g.SECOND)}))}l.default.runtime.onInstalled.addListener((({reason:e})=>{"install"!==e||t.env.METAMASK_DEBUG||t.env.IN_TEST||L.openExtensionInBrowser()}))}).call(this)}).call(this,e("_process"))}}},{package:"$root$"}]],[3],{});