{"ast":null,"code":"import * as converters from \"./converters\";\nimport { AsnTypeTypes } from \"./enums\";\nimport { schemaStorage } from \"./storage\";\nexport const AsnType = options => target => {\n  let schema;\n\n  if (!schemaStorage.has(target)) {\n    schema = schemaStorage.createDefault(target);\n    schemaStorage.set(target, schema);\n  } else {\n    schema = schemaStorage.get(target);\n  }\n\n  Object.assign(schema, options);\n};\nexport const AsnChoiceType = () => AsnType({\n  type: AsnTypeTypes.Choice\n});\nexport const AsnSetType = options => AsnType({\n  type: AsnTypeTypes.Set,\n  ...options\n});\nexport const AsnSequenceType = options => AsnType({\n  type: AsnTypeTypes.Sequence,\n  ...options\n});\nexport const AsnProp = options => (target, propertyKey) => {\n  let schema;\n\n  if (!schemaStorage.has(target.constructor)) {\n    schema = schemaStorage.createDefault(target.constructor);\n    schemaStorage.set(target.constructor, schema);\n  } else {\n    schema = schemaStorage.get(target.constructor);\n  }\n\n  const copyOptions = Object.assign({}, options);\n\n  if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n    const defaultConverter = converters.defaultConverter(options.type);\n\n    if (!defaultConverter) {\n      throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);\n    }\n\n    copyOptions.converter = defaultConverter;\n  }\n\n  schema.items[propertyKey] = copyOptions;\n};","map":null,"metadata":{},"sourceType":"module"}