{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { AbstractView } from \"./view-interface\";\nimport { IconView } from \"./icon-view\";\nimport { logger } from \"../../utils\";\n\nvar TokenList = function (_super) {\n  __extends(TokenList, _super);\n\n  function TokenList() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.loadedCount = 0;\n    _this.numberToLoad = 25;\n    _this.autoLoadMore = true;\n    return _this;\n  }\n\n  TokenList.prototype.init = function () {\n    var _this = this;\n\n    this.viewContainer.addEventListener('click', function (e) {\n      if (e.target.classList.contains('mobileToggle-tn')) {\n        _this.tokenToggleSelection();\n      } else if (e.target.classList.contains('load-more-btn-tn')) {\n        _this.loadMoreTokens();\n      }\n    });\n  };\n\n  TokenList.prototype.render = function () {\n    var _this = this;\n\n    this.loadedCount = 0;\n    this.viewContainer.innerHTML = this.getTokenListItems();\n    this.renderIcons();\n\n    if (this.autoLoadMore) {\n      var loadMoreElem = this.viewContainer.querySelector('.load-more-tn');\n\n      if (loadMoreElem) {\n        if (!this.interceptObs) this.interceptObs = new IntersectionObserver(function (payload) {\n          if (payload[0].isIntersecting) {\n            _this.loadMoreTokens();\n          }\n        }, {\n          root: document.querySelector('.view-content-tn')\n        });\n        this.interceptObs.observe(loadMoreElem);\n      }\n    }\n  };\n\n  TokenList.prototype.getTokenListItems = function () {\n    var html = \"\";\n    var newCount = Math.min(this.loadedCount + this.numberToLoad, this.params.tokens.length);\n\n    for (var i = this.loadedCount; i < newCount; i++) {\n      html += this.createTokenMarkup(this.params.tokens[i]);\n    }\n\n    this.loadedCount = newCount;\n    if (this.loadedCount < this.params.tokens.length) html += this.createLoadMoreMarkup();\n    return html;\n  };\n\n  TokenList.prototype.loadMoreTokens = function () {\n    var loadMoreElem = this.viewContainer.getElementsByClassName('load-more-tn')[0];\n    if (this.interceptObs) this.interceptObs.unobserve(loadMoreElem);\n    loadMoreElem.insertAdjacentHTML('afterend', this.getTokenListItems());\n    loadMoreElem.remove();\n    this.renderIcons();\n\n    if (this.interceptObs) {\n      loadMoreElem = this.viewContainer.querySelector('.load-more-tn');\n      if (loadMoreElem) this.interceptObs.observe(loadMoreElem);\n    }\n  };\n\n  TokenList.prototype.renderIcons = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this.viewContainer.getElementsByClassName('img-container-tn')), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var elem = _c.value;\n        if (elem.querySelector('img')) continue;\n        var params = {\n          src: elem.getAttribute('data-image-src'),\n          title: elem.getAttribute('data-token-title')\n        };\n        new IconView(elem, params).render();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  TokenList.prototype.tokenToggleSelection = function () {\n    var selectedTokens = this.client.getTokenStore().getSelectedTokens();\n    this.viewContainer.querySelectorAll('.mobileToggle-tn').forEach(function (token, index) {\n      if (index === 0) {\n        selectedTokens[token.dataset.key] = {};\n        selectedTokens[token.dataset.key]['tokens'] = [];\n      }\n\n      if (token.checked === true) {\n        var output = JSON.parse(token.dataset.token);\n        selectedTokens[token.dataset.key].tokens.push(output);\n      }\n    });\n    logger(2, \"Tokens selected:\");\n    logger(2, selectedTokens);\n    this.client.updateSelectedTokens(selectedTokens);\n  };\n\n  TokenList.prototype.createLoadMoreMarkup = function () {\n    return \"\\n            <li class='load-more-tn'>\\n                <button class=\\\"load-more-btn-tn btn-tn\\\">Load More</button>\\n            </li>\\n        \";\n  };\n\n  TokenList.prototype.createTokenMarkup = function (config) {\n    var tokenIssuerKey = config.tokenIssuerKey,\n        title = config.title,\n        data = config.data,\n        index = config.index,\n        image = config.image,\n        toggleState = config.toggleState;\n    var tokenId = index.length > 15 ? index.substring(0, 5) + \"...\" + index.substring(index.length - 5, index.length) : index;\n    return \"\\n            <li class='token-tn'>\\n              <div class=\\\"img-container-tn image-tn shimmer-tn\\\" data-image-src=\\\"\".concat(image, \"\\\" data-token-title=\\\"\").concat(title, \"\\\"></div>\\n              <div class='data-tn'>\\n                  <p class='token-title-tn'>\").concat(title, \"</p>\\n                  <p class='detail-tn' title=\\\"\").concat(index, \"\\\">#\").concat(tokenId, \"</p>\\n                </div>\\n              <div class='toggle-tn'>\\n                <input \").concat(toggleState ? 'checked' : '', \" data-key='\").concat(tokenIssuerKey, \"' data-token='\").concat(JSON.stringify(data), \"' data-index='\").concat(index, \"' type='checkbox' name='toggle\").concat(index, \"' class='mobileToggle-tn toggle-tn' id='toggle\").concat(index, \"'>\\n                <label for='toggle\").concat(index, \"'></label>\\n              </div>\\n            </li>\\n        \");\n  };\n\n  return TokenList;\n}(AbstractView);\n\nexport { TokenList }; //# sourceMappingURL=token-list.js.map","map":null,"metadata":{},"sourceType":"module"}