{"ast":null,"code":"import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { ens_normalize } from \"./ens-normalize/lib\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp) {\n  if (comp.length === 0) {\n    throw new Error(\"invalid ENS name; empty component\");\n  }\n\n  return comp;\n}\n\nfunction ensNameSplit(name) {\n  const bytes = toUtf8Bytes(ens_normalize(name));\n  const comps = [];\n\n  if (name.length === 0) {\n    return comps;\n  }\n\n  let last = 0;\n\n  for (let i = 0; i < bytes.length; i++) {\n    const d = bytes[i]; // A separator (i.e. \".\"); copy this component\n\n    if (d === 0x2e) {\n      comps.push(checkComponent(bytes.slice(last, i)));\n      last = i + 1;\n    }\n  } // There was a stray separator at the end of the name\n\n\n  if (last >= bytes.length) {\n    throw new Error(\"invalid ENS name; empty component\");\n  }\n\n  comps.push(checkComponent(bytes.slice(last)));\n  return comps;\n}\n\nexport function ensNormalize(name) {\n  return ensNameSplit(name).map(comp => toUtf8String(comp)).join(\".\");\n}\nexport function isValidName(name) {\n  try {\n    return ensNameSplit(name).length !== 0;\n  } catch (error) {}\n\n  return false;\n}\nexport function namehash(name) {\n  /* istanbul ignore if */\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n  }\n\n  let result = Zeros;\n  const comps = ensNameSplit(name);\n\n  while (comps.length) {\n    result = keccak256(concat([result, keccak256(comps.pop())]));\n  }\n\n  return hexlify(result);\n}\nexport function dnsEncode(name) {\n  return hexlify(concat(ensNameSplit(name).map(comp => {\n    // DNS does not allow components over 63 bytes in length\n    if (comp.length > 63) {\n      throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n    }\n\n    const bytes = new Uint8Array(comp.length + 1);\n    bytes.set(comp, 1);\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n} //# sourceMappingURL=namehash.js.map","map":null,"metadata":{},"sourceType":"module"}