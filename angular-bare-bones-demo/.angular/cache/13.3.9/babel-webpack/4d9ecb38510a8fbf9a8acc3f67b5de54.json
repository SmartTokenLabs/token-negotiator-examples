{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storeAsStream = void 0;\n\nconst stream_1 = require(\"stream\");\n\nclass ObservableStoreStream extends stream_1.Duplex {\n  constructor(obsStore) {\n    super({\n      // pass values, not serializations\n      objectMode: true\n    }); // dont buffer outgoing updates\n\n    this.resume(); // save handler so we can unsubscribe later\n\n    this.handler = state => this.push(state); // subscribe to obsStore changes\n\n\n    this.obsStore = obsStore;\n    this.obsStore.subscribe(this.handler);\n  } // emit current state on new destination\n\n\n  pipe(dest, options) {\n    const result = super.pipe(dest, options);\n    dest.write(this.obsStore.getState());\n    return result;\n  } // write from incoming stream to state\n\n\n  _write(chunk, _encoding, callback) {\n    this.obsStore.putState(chunk);\n    callback();\n  } // noop - outgoing stream is asking us if we have data we arent giving it\n\n\n  _read(_size) {\n    return undefined;\n  } // unsubscribe from event emitter\n\n\n  _destroy(err, callback) {\n    this.obsStore.unsubscribe(this.handler);\n\n    super._destroy(err, callback);\n  }\n\n}\n\nfunction storeAsStream(obsStore) {\n  return new ObservableStoreStream(obsStore);\n}\n\nexports.storeAsStream = storeAsStream; //# sourceMappingURL=asStream.js.map","map":null,"metadata":{},"sourceType":"script"}