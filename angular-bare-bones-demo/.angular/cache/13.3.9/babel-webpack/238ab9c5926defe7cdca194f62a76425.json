{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Nonce = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nconst SignatureUtility_1 = require(\"./SignatureUtility\");\n\nconst ValidationTools_1 = require(\"./ValidationTools\");\n\nconst Timestamp_1 = require(\"./Timestamp\");\n\nconst config_1 = require(\"../config\");\n\nclass Nonce {\n  constructor() {\n    this.DEFAULT_NONCE_TIME_LIMIT_MS = 1000 * 60 * 20; // 20 min\n  }\n\n  static makeNonce(senderAddress = '', receiverIdentifier, otherData = new Uint8Array(0), timestampInMs = 0) {\n    return _asyncToGenerator(function* () {\n      // Hash to ensure all variable length components is encoded with constant length\n      if (!senderAddress) {\n        senderAddress = yield SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();\n      }\n\n      if (!ValidationTools_1.ValidationTools.isAddress(senderAddress)) {\n        throw new Error(\"Address is not valid\");\n      } // senderAddress = '0X'+(senderAddress.substr(2).toUpperCase());\n\n\n      senderAddress = senderAddress.toUpperCase();\n\n      if (!timestampInMs) {\n        timestampInMs = Date.now();\n      }\n\n      return (0, utils_1.uint8merge)([Uint8Array.from((0, utils_1.stringToArray)(senderAddress)), (0, utils_1.hashStringTo32bytesUint8)(receiverIdentifier), (0, utils_1.getInt64Bytes)(timestampInMs), otherData]);\n    })();\n  }\n\n  validateNonce(nonce, senderAddress, receiverIdentifier, minTime, maxTime, otherData = new Uint8Array(0)) {\n    if (!Nonce.validateAddress(nonce, senderAddress)) {\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, 'validateAddress check failed for ' + senderAddress);\n      return false;\n    }\n\n    if (!this.validateReceiverIdentifier(nonce, receiverIdentifier)) {\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, 'validateReceiverIdentifier check failed');\n      return false;\n    }\n\n    if (!this.validateTimestamp(nonce, minTime, maxTime)) {\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, 'timestamp check failed');\n      return false;\n    }\n\n    if (!this.validateOtherData(nonce, otherData)) {\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, 'otherData check failed');\n      return false;\n    }\n\n    return this.validateOtherData(nonce, otherData);\n  }\n\n  validateTimestamp(nonce, minTime, maxTime) {\n    let nonceTimeStamp = Nonce.getTimestamp(nonce);\n    let nonceStamp = new Timestamp_1.Timestamp(nonceTimeStamp);\n    nonceStamp.setValidity(maxTime - minTime);\n    return nonceStamp.validateAgainstExpiration(maxTime);\n  }\n\n  static validateAddress(nonce, address) {\n    let nonceAddress = (0, utils_1.uint8toString)(nonce.slice(Nonce.senderAddressIndexStart, Nonce.senderAddressIndexStop));\n    if (address.toUpperCase() === nonceAddress.toUpperCase()) return true;\n    (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, 'nonceAddress = ' + nonceAddress);\n    return false;\n  }\n\n  validateReceiverIdentifier(nonce, receiverIdentifier) {\n    if ((0, utils_1.uint8tohex)((0, utils_1.hashStringTo32bytesUint8)(receiverIdentifier)).toLowerCase() === (0, utils_1.uint8tohex)(nonce.slice(Nonce.receiverIdentifierIndexStart, Nonce.receiverIdentifierIndexStop)).toLowerCase()) return true;\n    return false;\n  }\n\n  validateOtherData(nonce, otherData) {\n    if ((0, utils_1.uint8tohex)(otherData).toLowerCase() === (0, utils_1.uint8tohex)(nonce.slice(Nonce.otherDataIndexStart, Nonce.otherDataIndexStart + otherData.length)).toLowerCase()) return true;\n    return false;\n  }\n\n  static getTimestamp(nonce) {\n    let time = nonce.slice(Nonce.timestampIndexStart, Nonce.timestampIndexStop);\n    let bn = (0, utils_1.uint8ToBn)(time);\n    if (bn > BigInt(Number.MAX_SAFE_INTEGER)) throw new Error('timestamp value bigger than MAX_SAFE_INTEGER');\n    return Number(bn);\n  }\n\n}\n\nexports.Nonce = Nonce;\nNonce.LONG_BYTES = 8;\nNonce.senderAddressIndexStart = 0;\nNonce.senderAddressIndexStop = ValidationTools_1.ValidationTools.ADDRESS_LENGTH_IN_BYTES;\nNonce.receiverIdentifierIndexStart = Nonce.senderAddressIndexStop; // private static receiverIdentifierIndexStop: number = Nonce.receiverIdentifierIndexStart + AttestationCrypto.BYTES_IN_DIGEST;\n\nNonce.receiverIdentifierIndexStop = Nonce.receiverIdentifierIndexStart + 256 / 8; //AttestationCrypto.BYTES_IN_DIGEST;\n\nNonce.timestampIndexStart = Nonce.receiverIdentifierIndexStop;\nNonce.timestampIndexStop = Nonce.timestampIndexStart + Nonce.LONG_BYTES;\nNonce.otherDataIndexStart = Nonce.timestampIndexStop; //# sourceMappingURL=Nonce.js.map","map":null,"metadata":{},"sourceType":"script"}