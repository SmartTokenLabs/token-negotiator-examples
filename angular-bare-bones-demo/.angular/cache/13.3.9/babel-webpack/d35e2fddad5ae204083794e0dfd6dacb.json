{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignedLinkedAttestation = exports.LinkedAttestation = void 0;\n\nconst asn1_schema_1 = require(\"@peculiar/asn1-schema\");\n\nconst AuthenticationFramework_1 = require(\"./AuthenticationFramework\");\n\nconst NFTOwnershipAttestation_1 = require(\"./NFTOwnershipAttestation\");\n\nconst EthereumAddressAttestation_1 = require(\"./EthereumAddressAttestation\");\n\nlet LinkedAttestation = class LinkedAttestation {};\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: NFTOwnershipAttestation_1.NFTOwnershipAttestation,\n  context: 0\n})], LinkedAttestation.prototype, \"nftOwnership\", void 0);\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: EthereumAddressAttestation_1.EthereumAddressAttestation,\n  context: 1\n})], LinkedAttestation.prototype, \"ethereumAddress\", void 0);\n\nLinkedAttestation = __decorate([(0, asn1_schema_1.AsnType)({\n  type: asn1_schema_1.AsnTypeTypes.Choice\n})], LinkedAttestation);\nexports.LinkedAttestation = LinkedAttestation;\n\nclass SignedLinkedAttestation {}\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: LinkedAttestation\n})], SignedLinkedAttestation.prototype, \"attestation\", void 0);\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: AuthenticationFramework_1.AlgorithmIdentifierASN\n})], SignedLinkedAttestation.prototype, \"signingAlgorithm\", void 0);\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: asn1_schema_1.AsnPropTypes.BitString\n})], SignedLinkedAttestation.prototype, \"signatureValue\", void 0);\n\nexports.SignedLinkedAttestation = SignedLinkedAttestation; //# sourceMappingURL=SignedLinkedAttestation.js.map","map":null,"metadata":{},"sourceType":"script"}