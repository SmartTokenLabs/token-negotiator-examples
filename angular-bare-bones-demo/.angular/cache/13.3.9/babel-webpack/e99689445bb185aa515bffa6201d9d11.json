{"ast":null,"code":"const Subprovider = require('./subprovider.js'); // wraps a json-rpc-engine middleware in a subprovider interface\n\n\nclass JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n  // take a constructorFn to call once we have a reference to the engine\n  constructor(constructorFn) {\n    super();\n    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');\n    this._constructorFn = constructorFn;\n  } // this is called once the subprovider has been added to the provider engine\n\n\n  setEngine(engine) {\n    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');\n    const blockTracker = engine._blockTracker;\n\n    const middleware = this._constructorFn({\n      engine,\n      provider: engine,\n      blockTracker\n    });\n\n    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');\n    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');\n    this.middleware = middleware;\n  }\n\n  handleRequest(req, provEngNext, provEngEnd) {\n    const res = {\n      id: req.id\n    };\n    this.middleware(req, res, middlewareNext, middlewareEnd);\n\n    function middlewareNext(handler) {\n      provEngNext((err, result, cb) => {\n        // update response object with result or error\n        if (err) {\n          delete res.result;\n          res.error = {\n            message: err.message || err\n          };\n        } else {\n          res.result = result;\n        } // call middleware's next handler (even if error)\n\n\n        if (handler) {\n          handler(cb);\n        } else {\n          cb();\n        }\n      });\n    }\n\n    function middlewareEnd(err) {\n      if (err) return provEngEnd(err);\n      provEngEnd(null, res.result);\n    }\n  }\n\n}\n\nmodule.exports = JsonRpcEngineMiddlewareSubprovider;","map":null,"metadata":{},"sourceType":"script"}