{"ast":null,"code":"'use strict';\n\nvar define = require('define-properties');\n\nvar hasSymbols = require('has-symbols')();\n\nvar getPolyfill = require('./polyfill');\n\nvar regexpMatchAllPolyfill = require('./polyfill-regexp-matchall');\n\nvar defineP = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nmodule.exports = function shimMatchAll() {\n  var polyfill = getPolyfill();\n  define(String.prototype, {\n    matchAll: polyfill\n  }, {\n    matchAll: function () {\n      return String.prototype.matchAll !== polyfill;\n    }\n  });\n\n  if (hasSymbols) {\n    // eslint-disable-next-line no-restricted-properties\n    var symbol = Symbol.matchAll || (Symbol['for'] ? Symbol['for']('Symbol.matchAll') : Symbol('Symbol.matchAll'));\n    define(Symbol, {\n      matchAll: symbol\n    }, {\n      matchAll: function () {\n        return Symbol.matchAll !== symbol;\n      }\n    });\n\n    if (defineP && gOPD) {\n      var desc = gOPD(Symbol, symbol);\n\n      if (!desc || desc.configurable) {\n        defineP(Symbol, symbol, {\n          configurable: false,\n          enumerable: false,\n          value: symbol,\n          writable: false\n        });\n      }\n    }\n\n    var regexpMatchAll = regexpMatchAllPolyfill();\n    var func = {};\n    func[symbol] = regexpMatchAll;\n    var predicate = {};\n\n    predicate[symbol] = function () {\n      return RegExp.prototype[symbol] !== regexpMatchAll;\n    };\n\n    define(RegExp.prototype, func, predicate);\n  }\n\n  return polyfill;\n};","map":null,"metadata":{},"sourceType":"script"}