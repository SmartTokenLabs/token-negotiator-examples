{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eip712AttestationRequest = void 0;\n\nconst AttestationRequest_1 = require(\"./AttestationRequest\");\n\nconst KeyPair_1 = require(\"./KeyPair\");\n\nconst SignatureUtility_1 = require(\"./SignatureUtility\");\n\nconst utils_1 = require(\"./utils\");\n\nconst Nonce_1 = require(\"./Nonce\");\n\nconst Eip712Token_1 = require(\"./Eip712Token\");\n\nconst Timestamp_1 = require(\"./Timestamp\");\n\nconst config_1 = require(\"../config\");\n\nclass Eip712AttestationRequest extends Eip712Token_1.Eip712Token {\n  constructor(userKey = null, acceptableTimeLimit = Timestamp_1.Timestamp.DEFAULT_TIME_LIMIT_MS) {\n    super(); // private publicKey: KeyPair;\n    //static DEFAULT_TIME_LIMIT_MS:number = 1000*60*20; // 20 minutes\n\n    this.Eip712UserDataTypes = [// {name: 'address', type: 'string'},\n    {\n      name: 'payload',\n      type: 'string'\n    }, {\n      name: 'description',\n      type: 'string'\n    }, {\n      name: 'timestamp',\n      type: 'string'\n    }, {\n      name: 'identifier',\n      type: 'string'\n    }];\n    this.Eip712UserDataPrimaryName = \"AttestationRequest\";\n    this.Eip712UserDataDescription = \"Linking Ethereum address to phone or email\";\n    this.userKey = userKey;\n    this.acceptableTimeLimit = acceptableTimeLimit;\n    this.usageValue = this.Eip712UserDataDescription;\n  }\n\n  setUsageValue(usageValue) {\n    this.usageValue = usageValue;\n  }\n\n  addData(attestorDomain, acceptableTimeLimit = Timestamp_1.Timestamp.DEFAULT_TIME_LIMIT_MS, identifier, request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.setDomain(attestorDomain); // this.attestationRequest = AttestationRequest.fromData(type,pok);\n\n\n      _this.attestationRequest = request;\n      _this.acceptableTimeLimit = acceptableTimeLimit;\n      _this.jsonEncoding = yield _this.makeToken(identifier);\n\n      try {\n        // decode JSON and fill publicKey\n        _this.fillJsonData(_this.jsonEncoding);\n      } catch (e) {\n        (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, e);\n        return false;\n      }\n    })();\n  }\n\n  fillJsonData(json) {\n    if (!json) throw new Error('Empty json');\n    this.jsonEncoding = json;\n    let tokenData = JSON.parse(json);\n    let signatureInHex = tokenData.signatureInHex;\n    let jsonSigned = JSON.parse(tokenData.jsonSigned);\n    this.eip712DomainData = jsonSigned.domain;\n    this.data = jsonSigned.message;\n\n    try {\n      let publicKey = SignatureUtility_1.SignatureUtility.recoverPublicKeyFromTypedMessageSignature(jsonSigned, signatureInHex);\n      this.requestorKeys = KeyPair_1.KeyPair.fromPublicHex(publicKey.substr(2));\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.HIGH, 'restored address: ' + this.requestorKeys.getAddress());\n    } catch (e) {\n      let m = \"Recover Address failed with error:\" + e;\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, m, e);\n      throw new Error(m);\n    }\n\n    if (!this.attestationRequest) {\n      this.attestationRequest = AttestationRequest_1.AttestationRequest.fromBytes((0, utils_1.base64ToUint8array)(this.data.payload));\n    }\n\n    this.constructorCheck();\n  }\n\n  constructorCheck() {\n    if (!this.verify()) {\n      throw new Error(\"Could not verify Eip712 AttestationRequest\");\n    }\n\n    (0, utils_1.logger)(config_1.DEBUGLEVEL.HIGH, 'Eip712 Attestaion Request verify OK');\n  }\n\n  makeToken(identifier) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let userAddress;\n\n      if (_this2.userKey) {\n        userAddress = _this2.userKey.getAddress();\n      } else {\n        userAddress = yield SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();\n      }\n\n      let nonceTimestamp = Nonce_1.Nonce.getTimestamp(_this2.attestationRequest.getPok().getNonce());\n      let ts = new Timestamp_1.Timestamp(nonceTimestamp).getTimeAsString();\n      let userData = {\n        payload: (0, utils_1.hexStringToBase64Url)(_this2.attestationRequest.getDerEncoding()),\n        description: _this2.usageValue,\n        timestamp: ts,\n        identifier: identifier // address: userAddress,\n\n      };\n      return yield SignatureUtility_1.SignatureUtility.signEIP712WithBrowserWallet(_this2.domain, userData, _this2.Eip712UserDataTypes, _this2.Eip712UserDataPrimaryName, _this2.userKey);\n    })();\n  }\n\n  setAcceptableTimeLimit(limit) {\n    this.acceptableTimeLimit = limit;\n  }\n\n  getJsonEncoding() {\n    return this.jsonEncoding;\n  }\n\n  verify() {\n    if (!this.attestationRequest.verify()) {\n      return false;\n    } // if (!this.verifySignature(this.jsonEncoding, this.data.address)) {\n    //     return false;\n    // }\n\n\n    return this.verifyDomainData();\n  }\n\n  verifyDomainData() {\n    return this.eip712DomainData.name.toLowerCase() === this.getDomain().toLowerCase() && this.eip712DomainData.version === SignatureUtility_1.SignatureUtility.Eip712Data['PROTOCOL_VERSION'];\n  }\n\n  checkValidity() {\n    if (this.data.description !== this.usageValue) {\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.MEDIUM, 'Description is not correct. :' + this.data.description + ' !== ' + this.usageValue);\n      return false;\n    }\n\n    ;\n    let timestamp = new Timestamp_1.Timestamp(this.data.timestamp);\n    timestamp.setValidity(this.acceptableTimeLimit);\n\n    if (!timestamp.validateTimestamp()) {\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, `timestamp is not correct. timestamp = ${this.data.timestamp}, acceptableTimeLimit = ${this.acceptableTimeLimit}`);\n      return false;\n    }\n\n    if (!new Nonce_1.Nonce().validateNonce(this.getPok().getNonce(), this.requestorKeys.getAddress(), this.domain, Timestamp_1.Timestamp.stringTimestampToLong(this.data.timestamp) - this.acceptableTimeLimit, Timestamp_1.Timestamp.stringTimestampToLong(this.data.timestamp) + this.acceptableTimeLimit)) {\n      (0, utils_1.logger)(config_1.DEBUGLEVEL.LOW, 'nonce is not correct');\n      return false;\n    }\n\n    return true;\n  }\n\n  getIdentifier() {\n    return this.data.identifier;\n  }\n\n  getType() {\n    return this.attestationRequest.getType();\n  }\n\n  getPok() {\n    return this.attestationRequest.getPok();\n  }\n\n  getUserPublicKey() {\n    return this.requestorKeys;\n  }\n\n}\n\nexports.Eip712AttestationRequest = Eip712AttestationRequest; //# sourceMappingURL=Eip712AttestationRequest.js.map","map":null,"metadata":{},"sourceType":"script"}