{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nmodule.exports = function createAsyncMiddleware(asyncMiddleware) {\n  return (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback, nextWasCalled;\n\n    const asyncNext = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* () {\n        nextWasCalled = true;\n        next(callback => {\n          // eslint-disable-line callback-return\n          returnHandlerCallback = callback;\n          resolveNextPromise();\n        });\n        yield nextPromise;\n      });\n\n      return function asyncNext() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    asyncMiddleware(req, res, asyncNext).then( /*#__PURE__*/_asyncToGenerator(function* () {\n      if (nextWasCalled) {\n        yield nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    })).catch(error => {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}