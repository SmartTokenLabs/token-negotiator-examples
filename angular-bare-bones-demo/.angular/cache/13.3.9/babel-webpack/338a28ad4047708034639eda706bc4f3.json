{"ast":null,"code":"'use strict'; // var Construct = require('es-abstract/2021/Construct');\n\nvar CreateRegExpStringIterator = require('es-abstract/2021/CreateRegExpStringIterator');\n\nvar Get = require('es-abstract/2021/Get');\n\nvar Set = require('es-abstract/2021/Set');\n\nvar SpeciesConstructor = require('es-abstract/2021/SpeciesConstructor');\n\nvar ToLength = require('es-abstract/2021/ToLength');\n\nvar ToString = require('es-abstract/2021/ToString');\n\nvar Type = require('es-abstract/2021/Type');\n\nvar flagsGetter = require('regexp.prototype.flags');\n\nvar callBound = require('call-bind/callBound');\n\nvar $indexOf = callBound('String.prototype.indexOf');\nvar OrigRegExp = RegExp;\nvar supportsConstructingWithFlags = ('flags' in RegExp.prototype);\n\nvar constructRegexWithFlags = function constructRegex(C, R) {\n  var matcher; // workaround for older engines that lack RegExp.prototype.flags\n\n  var flags = 'flags' in R ? Get(R, 'flags') : ToString(flagsGetter(R));\n\n  if (supportsConstructingWithFlags && typeof flags === 'string') {\n    matcher = new C(R, flags);\n  } else if (C === OrigRegExp) {\n    // workaround for older engines that can not construct a RegExp with flags\n    matcher = new C(R.source, flags);\n  } else {\n    matcher = new C(R, flags);\n  }\n\n  return {\n    flags: flags,\n    matcher: matcher\n  };\n};\n\nvar regexMatchAll = function SymbolMatchAll(string) {\n  var R = this;\n\n  if (Type(R) !== 'Object') {\n    throw new TypeError('\"this\" value must be an Object');\n  }\n\n  var S = ToString(string);\n  var C = SpeciesConstructor(R, OrigRegExp);\n  var tmp = constructRegexWithFlags(C, R); // var flags = ToString(Get(R, 'flags'));\n\n  var flags = tmp.flags; // var matcher = Construct(C, [R, flags]);\n\n  var matcher = tmp.matcher;\n  var lastIndex = ToLength(Get(R, 'lastIndex'));\n  Set(matcher, 'lastIndex', lastIndex, true);\n  var global = $indexOf(flags, 'g') > -1;\n  var fullUnicode = $indexOf(flags, 'u') > -1;\n  return CreateRegExpStringIterator(matcher, S, global, fullUnicode);\n};\n\nvar defineP = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nif (defineP && gOPD) {\n  var desc = gOPD(regexMatchAll, 'name');\n\n  if (desc && desc.configurable) {\n    defineP(regexMatchAll, 'name', {\n      value: '[Symbol.matchAll]'\n    });\n  }\n}\n\nmodule.exports = regexMatchAll;","map":null,"metadata":{},"sourceType":"script"}