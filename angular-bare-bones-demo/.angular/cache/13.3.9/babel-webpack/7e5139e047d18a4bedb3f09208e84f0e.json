{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ResponseActionBase } from \"../core/messaging\";\nimport { Authenticator } from \"@tokenscript/attestation\";\nimport { logger } from \"../utils\";\n\nvar AuthHandler = function () {\n  function AuthHandler(outlet, evtid, tokenDef, tokenObj, address, wallet) {\n    this.iframe = null;\n    this.iframeWrap = null;\n    this.attestationBlob = null;\n    this.attestationSecret = null;\n    this.outlet = outlet;\n    this.evtid = evtid;\n    this.base64senderPublicKeys = tokenDef.base64senderPublicKeys;\n    this.base64attestorPubKey = tokenDef.base64attestorPubKey;\n    this.signedTokenBlob = tokenObj.ticketBlob;\n    this.magicLink = tokenObj.magicLink;\n    this.email = tokenObj.email;\n    this.signedTokenSecret = tokenObj.ticketSecret;\n    this.attestationOrigin = tokenObj.attestationOrigin;\n    this.address = address;\n    this.wallet = wallet;\n  }\n\n  AuthHandler.prototype.authenticate = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (!_this.attestationOrigin) return reject(new Error(\"Attestation origin is null\"));\n      window.addEventListener(\"message\", function (e) {\n        if (!_this.attestationOrigin) return;\n        var attestURL = new URL(_this.attestationOrigin);\n\n        if (e.origin !== attestURL.origin) {\n          return;\n        }\n\n        if (!_this.iframe || !_this.iframeWrap || !_this.iframe.contentWindow) return;\n\n        _this.postMessageAttestationListener(e, resolve, reject);\n      });\n\n      _this.createIframe();\n    });\n  };\n\n  AuthHandler.prototype.createIframe = function () {\n    var _a;\n\n    var iframe = document.createElement(\"iframe\");\n    iframe.setAttribute(\"allow\", \"clipboard-read\");\n    this.iframe = iframe;\n    iframe.src = (_a = this.attestationOrigin) !== null && _a !== void 0 ? _a : \"\";\n    iframe.style.width = \"800px\";\n    iframe.style.height = \"700px\";\n    iframe.style.maxWidth = \"100%\";\n    iframe.style.background = \"#fff\";\n    var iframeWrap = document.createElement(\"div\");\n    this.iframeWrap = iframeWrap;\n    iframeWrap.setAttribute(\"style\", \"width:100%;min-height: 100vh; position: fixed; align-items: center; justify-content: center;display: none;top: 0; left: 0; background: #fffa\");\n    iframeWrap.appendChild(iframe);\n    document.body.appendChild(iframeWrap);\n  };\n\n  AuthHandler.prototype.postMessageAttestationListener = function (event, resolve, reject) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var sendData, useToken, e_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            logger(2, 'postMessageAttestationListener event (auth-handler)', event.data);\n\n            if (typeof event.data.ready !== \"undefined\" && event.data.ready === true) {\n              sendData = {\n                force: false\n              };\n              if (this.email) sendData.email = this.email;\n              if (this.wallet) sendData.wallet = this.wallet;\n              if (this.address) sendData.address = this.address;\n              this.iframe.contentWindow.postMessage(sendData, this.attestationOrigin);\n              return [2];\n            }\n\n            if (typeof event.data.display !== \"undefined\") {\n              if (event.data.display === true) {\n                this.iframeWrap.style.display = \"flex\";\n                this.outlet.sendMessageResponse({\n                  evtid: this.evtid,\n                  evt: ResponseActionBase.SHOW_FRAME\n                });\n              } else {\n                if (event.data.error) {\n                  logger(2, \"Error received from the iframe: \" + event.data.error);\n                  reject(new Error(event.data.error));\n                }\n\n                this.iframeWrap.style.display = \"none\";\n              }\n            }\n\n            if (!((_a = event.data) === null || _a === void 0 ? void 0 : _a.attestation) || !((_b = event.data) === null || _b === void 0 ? void 0 : _b.requestSecret)) {\n              return [2];\n            }\n\n            this.iframeWrap.remove();\n            this.attestationBlob = (_c = event.data) === null || _c === void 0 ? void 0 : _c.attestation;\n            this.attestationSecret = (_d = event.data) === null || _d === void 0 ? void 0 : _d.requestSecret;\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 3,, 4]);\n\n            if (!this.signedTokenSecret) {\n              throw new Error(\"signedTokenSecret required\");\n            }\n\n            if (!this.attestationSecret) {\n              throw new Error(\"attestationSecret required\");\n            }\n\n            if (!this.signedTokenBlob) {\n              throw new Error(\"signedTokenBlob required\");\n            }\n\n            if (!this.attestationBlob) {\n              throw new Error(\"attestationBlob required\");\n            }\n\n            if (!this.base64attestorPubKey) {\n              throw new Error(\"base64attestorPubKey required\");\n            }\n\n            if (!this.base64senderPublicKeys) {\n              throw new Error(\"base64senderPublicKeys required\");\n            }\n\n            return [4, Authenticator.getUseTicket(this.signedTokenSecret, this.attestationSecret, this.signedTokenBlob, this.attestationBlob, this.base64attestorPubKey, this.base64senderPublicKeys)];\n\n          case 2:\n            useToken = _e.sent();\n\n            if (useToken) {\n              logger(2, 'this.authResultCallback( useToken ): ');\n              resolve(useToken);\n            } else {\n              console.log(\"this.authResultCallback( empty ): \");\n              throw new Error(\"Empty useToken\");\n            }\n\n            return [3, 4];\n\n          case 3:\n            e_1 = _e.sent();\n            logger(2, \"UseDevconTicket failed.\", e_1.message);\n            logger(3, e_1);\n            reject(new Error(\"Failed to create UseTicket. \" + e_1.message));\n            return [3, 4];\n\n          case 4:\n            return [2];\n        }\n      });\n    });\n  };\n\n  return AuthHandler;\n}();\n\nexport { AuthHandler }; //# sourceMappingURL=auth-handler.js.map","map":null,"metadata":{},"sourceType":"module"}