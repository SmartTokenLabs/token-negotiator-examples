{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NFTOwnershipAttestation = void 0;\n\nconst AbstractLinkedAttestation_1 = require(\"./AbstractLinkedAttestation\");\n\nconst SignedLinkedAttestation_1 = require(\"../asn1/shemas/SignedLinkedAttestation\");\n\nconst NFTOwnershipAttestation_1 = require(\"../asn1/shemas/NFTOwnershipAttestation\");\n\nconst EpochTimeValidity_1 = require(\"../asn1/shemas/EpochTimeValidity\");\n\nconst utils_1 = require(\"../libs/utils\");\n\nclass NFTOwnershipAttestation extends AbstractLinkedAttestation_1.AbstractLinkedAttestation {\n  constructor() {\n    super(...arguments);\n    this.TYPE = \"nftOwnership\";\n  } // TODO: Implement multi-token interface\n\n\n  create(holdingPubKey, tokens, attestorKeys, validity, context, validFrom) {\n    this.linkedAttestation = new SignedLinkedAttestation_1.SignedLinkedAttestation();\n    this.linkedAttestation.attestation = new SignedLinkedAttestation_1.LinkedAttestation();\n    this.linkedAttestation.attestation.nftOwnership = new NFTOwnershipAttestation_1.NFTOwnershipAttestation();\n    this.linkedAttestation.attestation.nftOwnership.subjectPublicKey = holdingPubKey;\n    if (!validFrom) validFrom = Math.round(Date.now() / 1000);\n    const expiry = validFrom + validity;\n    this.linkedAttestation.attestation.nftOwnership.validity = new EpochTimeValidity_1.EpochTimeValidity();\n    this.linkedAttestation.attestation.nftOwnership.validity.notBefore = validFrom;\n    this.linkedAttestation.attestation.nftOwnership.validity.notAfter = expiry;\n\n    for (let token of tokens) {\n      let attToken = new NFTOwnershipAttestation_1.ERC721();\n      attToken.address = (0, utils_1.hexStringToUint8)(token.address);\n      attToken.chainId = token.chainId;\n\n      if (token.tokenIds) {\n        attToken.tokenIds = [];\n\n        for (let bn of token.tokenIds) {\n          attToken.tokenIds.push((0, utils_1.bnToUint8)(bn));\n        }\n      }\n\n      this.linkedAttestation.attestation.nftOwnership.tokens.push(attToken);\n    }\n\n    if (context) this.linkedAttestation.attestation.nftOwnership.context = context;\n    this.sign(attestorKeys);\n  }\n\n}\n\nexports.NFTOwnershipAttestation = NFTOwnershipAttestation; //# sourceMappingURL=NFTOwnershipAttestation.js.map","map":null,"metadata":{},"sourceType":"script"}