{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nmodule.exports = getBlocksForRange;\n\nfunction getBlocksForRange(_x) {\n  return _getBlocksForRange.apply(this, arguments);\n}\n\nfunction _getBlocksForRange() {\n  _getBlocksForRange = _asyncToGenerator(function* ({\n    provider,\n    fromBlock,\n    toBlock\n  }) {\n    if (!fromBlock) fromBlock = toBlock;\n    const fromBlockNumber = hexToInt(fromBlock);\n    const toBlockNumber = hexToInt(toBlock);\n    const blockCountToQuery = toBlockNumber - fromBlockNumber + 1; // load all blocks from old to new (inclusive)\n\n    const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index) => fromBlockNumber + index).map(intToHex);\n    const blockBodies = yield Promise.all(missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false])));\n    return blockBodies;\n  });\n  return _getBlocksForRange.apply(this, arguments);\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  return Number.parseInt(hexString, 16);\n}\n\nfunction incrementHexInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  const value = hexToInt(hexString);\n  return intToHex(value + 1);\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int;\n  const hexString = int.toString(16);\n  return '0x' + hexString;\n}\n\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({\n      id: 1,\n      jsonrpc: '2.0',\n      method,\n      params\n    }, (err, res) => {\n      if (err) return reject(err);\n      resolve(res.result);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}