{"ast":null,"code":"'use strict';\n\nconst processFn = (fn, opts) => function () {\n  const P = opts.promiseModule;\n  const args = new Array(arguments.length);\n\n  for (let i = 0; i < arguments.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  return new P((resolve, reject) => {\n    if (opts.errorFirst) {\n      args.push(function (err, result) {\n        if (opts.multiArgs) {\n          const results = new Array(arguments.length - 1);\n\n          for (let i = 1; i < arguments.length; i++) {\n            results[i - 1] = arguments[i];\n          }\n\n          if (err) {\n            results.unshift(err);\n            reject(results);\n          } else {\n            resolve(results);\n          }\n        } else if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    } else {\n      args.push(function (result) {\n        if (opts.multiArgs) {\n          const results = new Array(arguments.length - 1);\n\n          for (let i = 0; i < arguments.length; i++) {\n            results[i] = arguments[i];\n          }\n\n          resolve(results);\n        } else {\n          resolve(result);\n        }\n      });\n    }\n\n    fn.apply(this, args);\n  });\n};\n\nmodule.exports = (obj, opts) => {\n  opts = Object.assign({\n    exclude: [/.+(Sync|Stream)$/],\n    errorFirst: true,\n    promiseModule: Promise\n  }, opts);\n\n  const filter = key => {\n    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n    return opts.include ? opts.include.some(match) : !opts.exclude.some(match);\n  };\n\n  let ret;\n\n  if (typeof obj === 'function') {\n    ret = function () {\n      if (opts.excludeMain) {\n        return obj.apply(this, arguments);\n      }\n\n      return processFn(obj, opts).apply(this, arguments);\n    };\n  } else {\n    ret = Object.create(Object.getPrototypeOf(obj));\n  }\n\n  for (const key in obj) {\n    // eslint-disable-line guard-for-in\n    const x = obj[key];\n    ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;\n  }\n\n  return ret;\n};","map":null,"metadata":{},"sourceType":"script"}