{"ast":null,"code":"import _asyncToGenerator from \"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512 } from \"../constants\";\nexport function getAlgo(type) {\n  return type === AES_BROWSER_ALGO ? {\n    length: AES_LENGTH,\n    name: AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: HMAC_BROWSER_ALGO\n    },\n    name: HMAC_BROWSER\n  };\n}\nexport function getOps(type) {\n  return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];\n}\nexport function browserExportKey(_x) {\n  return _browserExportKey.apply(this, arguments);\n}\n\nfunction _browserExportKey() {\n  _browserExportKey = _asyncToGenerator(function* (cryptoKey, type = AES_BROWSER_ALGO) {\n    const subtle = env.getSubtleCrypto();\n    return new Uint8Array(yield subtle.exportKey(\"raw\", cryptoKey));\n  });\n  return _browserExportKey.apply(this, arguments);\n}\n\nexport function browserImportKey(_x2) {\n  return _browserImportKey.apply(this, arguments);\n}\n\nfunction _browserImportKey() {\n  _browserImportKey = _asyncToGenerator(function* (buffer, type = AES_BROWSER_ALGO) {\n    return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n  });\n  return _browserImportKey.apply(this, arguments);\n}\n\nexport function browserAesEncrypt(_x3, _x4, _x5) {\n  return _browserAesEncrypt.apply(this, arguments);\n}\n\nfunction _browserAesEncrypt() {\n  _browserAesEncrypt = _asyncToGenerator(function* (iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, AES_BROWSER_ALGO);\n    const result = yield subtle.encrypt({\n      iv,\n      name: AES_BROWSER_ALGO\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n  });\n  return _browserAesEncrypt.apply(this, arguments);\n}\n\nexport function browserAesDecrypt(_x6, _x7, _x8) {\n  return _browserAesDecrypt.apply(this, arguments);\n}\n\nfunction _browserAesDecrypt() {\n  _browserAesDecrypt = _asyncToGenerator(function* (iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, AES_BROWSER_ALGO);\n    const result = yield subtle.decrypt({\n      iv,\n      name: AES_BROWSER_ALGO\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n  });\n  return _browserAesDecrypt.apply(this, arguments);\n}\n\nexport function browserHmacSha256Sign(_x9, _x10) {\n  return _browserHmacSha256Sign.apply(this, arguments);\n}\n\nfunction _browserHmacSha256Sign() {\n  _browserHmacSha256Sign = _asyncToGenerator(function* (key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, HMAC_BROWSER);\n    const signature = yield subtle.sign({\n      length: HMAC_LENGTH,\n      name: HMAC_BROWSER\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n  });\n  return _browserHmacSha256Sign.apply(this, arguments);\n}\n\nexport function browserHmacSha512Sign(_x11, _x12) {\n  return _browserHmacSha512Sign.apply(this, arguments);\n}\n\nfunction _browserHmacSha512Sign() {\n  _browserHmacSha512Sign = _asyncToGenerator(function* (key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, HMAC_BROWSER);\n    const signature = yield subtle.sign({\n      length: LENGTH_512,\n      name: HMAC_BROWSER\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n  });\n  return _browserHmacSha512Sign.apply(this, arguments);\n}\n\nexport function browserSha256(_x13) {\n  return _browserSha.apply(this, arguments);\n}\n\nfunction _browserSha() {\n  _browserSha = _asyncToGenerator(function* (data) {\n    const subtle = env.getSubtleCrypto();\n    const result = yield subtle.digest({\n      name: SHA256_BROWSER_ALGO\n    }, data);\n    return new Uint8Array(result);\n  });\n  return _browserSha.apply(this, arguments);\n}\n\nexport function browserSha512(_x14) {\n  return _browserSha2.apply(this, arguments);\n} //# sourceMappingURL=browser.js.map\n\nfunction _browserSha2() {\n  _browserSha2 = _asyncToGenerator(function* (data) {\n    const subtle = env.getSubtleCrypto();\n    const result = yield subtle.digest({\n      name: SHA512_BROWSER_ALGO\n    }, data);\n    return new Uint8Array(result);\n  });\n  return _browserSha2.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}