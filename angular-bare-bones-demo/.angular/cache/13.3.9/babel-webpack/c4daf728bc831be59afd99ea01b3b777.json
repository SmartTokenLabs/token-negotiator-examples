{"ast":null,"code":"import { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name) {\n  switch (name) {\n    case \"homestead\":\n      return \"rpc.ankr.com/eth/\";\n\n    case \"ropsten\":\n      return \"rpc.ankr.com/eth_ropsten/\";\n\n    case \"rinkeby\":\n      return \"rpc.ankr.com/eth_rinkeby/\";\n\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli/\";\n\n    case \"matic\":\n      return \"rpc.ankr.com/polygon/\";\n\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum/\";\n  }\n\n  return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n\n    return apiKey;\n  }\n\n  static getUrl(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\\/\" + getHost(network.name) + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n\n        return Promise.resolve(true);\n      }\n    };\n\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n\n    return connection;\n  }\n\n} //# sourceMappingURL=ankr-provider.js.map","map":null,"metadata":{},"sourceType":"module"}