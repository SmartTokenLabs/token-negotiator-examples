{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar isLeadingSurrogate = require('../helpers/isLeadingSurrogate');\n\nvar isTrailingSurrogate = require('../helpers/isTrailingSurrogate');\n\nvar Type = require('./Type');\n\nvar UTF16SurrogatePairToCodePoint = require('./UTF16SurrogatePairToCodePoint');\n\nvar $charAt = callBound('String.prototype.charAt');\nvar $charCodeAt = callBound('String.prototype.charCodeAt'); // https://ecma-international.org/ecma-262/12.0/#sec-codepointat\n\nmodule.exports = function CodePointAt(string, position) {\n  if (Type(string) !== 'String') {\n    throw new $TypeError('Assertion failed: `string` must be a String');\n  }\n\n  var size = string.length;\n\n  if (position < 0 || position >= size) {\n    throw new $TypeError('Assertion failed: `position` must be >= 0, and < the length of `string`');\n  }\n\n  var first = $charCodeAt(string, position);\n  var cp = $charAt(string, position);\n  var firstIsLeading = isLeadingSurrogate(first);\n  var firstIsTrailing = isTrailingSurrogate(first);\n\n  if (!firstIsLeading && !firstIsTrailing) {\n    return {\n      '[[CodePoint]]': cp,\n      '[[CodeUnitCount]]': 1,\n      '[[IsUnpairedSurrogate]]': false\n    };\n  }\n\n  if (firstIsTrailing || position + 1 === size) {\n    return {\n      '[[CodePoint]]': cp,\n      '[[CodeUnitCount]]': 1,\n      '[[IsUnpairedSurrogate]]': true\n    };\n  }\n\n  var second = $charCodeAt(string, position + 1);\n\n  if (!isTrailingSurrogate(second)) {\n    return {\n      '[[CodePoint]]': cp,\n      '[[CodeUnitCount]]': 1,\n      '[[IsUnpairedSurrogate]]': true\n    };\n  }\n\n  return {\n    '[[CodePoint]]': UTF16SurrogatePairToCodePoint(first, second),\n    '[[CodeUnitCount]]': 2,\n    '[[IsUnpairedSurrogate]]': false\n  };\n};","map":null,"metadata":{},"sourceType":"script"}