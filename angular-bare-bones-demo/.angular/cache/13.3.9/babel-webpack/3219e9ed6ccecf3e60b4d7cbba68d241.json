{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar CodePointAt = require('./CodePointAt');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar Type = require('./Type');\n\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar $TypeError = GetIntrinsic('%TypeError%'); // https://ecma-international.org/ecma-262/12.0/#sec-advancestringindex\n\nmodule.exports = function AdvanceStringIndex(S, index, unicode) {\n  if (Type(S) !== 'String') {\n    throw new $TypeError('Assertion failed: `S` must be a String');\n  }\n\n  if (!IsIntegralNumber(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n    throw new $TypeError('Assertion failed: `length` must be an integer >= 0 and <= 2**53');\n  }\n\n  if (Type(unicode) !== 'Boolean') {\n    throw new $TypeError('Assertion failed: `unicode` must be a Boolean');\n  }\n\n  if (!unicode) {\n    return index + 1;\n  }\n\n  var length = S.length;\n\n  if (index + 1 >= length) {\n    return index + 1;\n  }\n\n  var cp = CodePointAt(S, index);\n  return index + cp['[[CodeUnitCount]]'];\n};","map":null,"metadata":{},"sourceType":"script"}