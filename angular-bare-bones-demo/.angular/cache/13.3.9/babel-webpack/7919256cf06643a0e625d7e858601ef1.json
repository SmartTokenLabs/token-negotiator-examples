{"ast":null,"code":"import _asyncToGenerator from \"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\n\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\n\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\n\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\n\nfunction getEmbedHost() {\n  return embedHost;\n}\n\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\n\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\n\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction fetchAndTrace(_x, _x2) {\n  return _fetchAndTrace.apply(this, arguments);\n}\n\nfunction _fetchAndTrace() {\n  _fetchAndTrace = _asyncToGenerator(function* (url, init) {\n    let _url = null;\n\n    try {\n      _url = new URL(url);\n    } catch (error) {}\n\n    if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n      const transaction = sentry.startTransaction({\n        name: url\n      });\n      const span = transaction.startChild({\n        op: \"http\"\n      }); // This function returns a Span\n\n      const response = yield fetch(url, init);\n      span.finish(); // Remember that only finished spans will be sent with the transaction\n\n      transaction.finish(); // Finishing the transaction will send it to Sentry\n\n      return response;\n    }\n\n    return fetch(url, init);\n  });\n  return _fetchAndTrace.apply(this, arguments);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\n\nconst get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (url) {\n    let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const defaultOptions = {\n      mode: \"cors\",\n      headers: {}\n    };\n\n    if (customOptions.useAPIKey) {\n      defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n\n    const options = merge(defaultOptions, options_, {\n      method: \"GET\"\n    });\n    const response = yield fetchAndTrace(url, options);\n\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  });\n\n  return function get(_x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\n\nconst patch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    }; // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n\n    if (customOptions.useAPIKey) {\n      defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n\n    const options = merge(defaultOptions, options_, {\n      method: \"PATCH\"\n    }); // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n\n    if (customOptions.isUrlEncodedData) {\n      // for multipart request browser/client will add multipart content type\n      // along with multipart boundary , so for multipart request send\n      // content-type: undefined or send with multipart boundary if already known\n      options.body = data; // If url encoded data, this must not be the content type\n\n      if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n      options.body = JSON.stringify(data);\n    }\n\n    const response = yield fetchAndTrace(url, options);\n\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  });\n\n  return function patch(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst put = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    }; // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n\n    if (customOptions.useAPIKey) {\n      defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n\n    const options = merge(defaultOptions, options_, {\n      method: \"PUT\"\n    }); // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n\n    if (customOptions.isUrlEncodedData) {\n      // for multipart request browser/client will add multipart content type\n      // along with multipart boundary , so for multipart request send\n      // content-type: undefined or send with multipart boundary if already known\n      options.body = data; // If url encoded data, this must not be the content type\n\n      if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n      options.body = JSON.stringify(data);\n    }\n\n    const response = yield fetchAndTrace(url, options);\n\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  });\n\n  return function put(_x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nconst remove = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    }; // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n\n    if (customOptions.useAPIKey) {\n      defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n\n    const options = merge(defaultOptions, options_, {\n      method: \"DELETE\"\n    });\n\n    if (customOptions.isUrlEncodedData) {\n      // for multipart request browser/client will add multipart content type\n      // along with multipart boundary , so for multipart request send\n      // content-type: undefined or send with multipart boundary if already known\n      options.body = data; // If url encoded data, this must not be the content type\n\n      if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n      options.body = JSON.stringify(data);\n    }\n\n    const response = yield fetchAndTrace(url, options);\n\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  });\n\n  return function remove(_x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\n\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel }; //# sourceMappingURL=httpHelpers.esm.js.map","map":null,"metadata":{},"sourceType":"module"}