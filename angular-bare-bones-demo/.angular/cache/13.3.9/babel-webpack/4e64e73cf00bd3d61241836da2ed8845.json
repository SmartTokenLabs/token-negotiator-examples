{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UsageProofOfExponent = void 0;\n\nconst Point_1 = require(\"./Point\");\n\nconst ProofOfExponentASN_1 = require(\"../asn1/shemas/ProofOfExponentASN\");\n\nconst asn1_schema_1 = require(\"@peculiar/asn1-schema\");\n\nconst utils_1 = require(\"./utils\");\n\nconst DerUtility_1 = require(\"./DerUtility\");\n\nclass UsageProofOfExponent {\n  constructor() {}\n\n  static fromData(tPoint, challengeResponse, nonce = new Uint8Array([])) {\n    let me = new this();\n    me.tPoint = tPoint;\n    me.challengeResponse = challengeResponse;\n    me.nonce = nonce;\n    me.encoding = me.makeEncoding();\n    return me;\n  }\n\n  fromBase64(base64DerEncoded) {\n    this.encoding = base64DerEncoded;\n    this.fromBytes((0, utils_1.base64ToUint8array)(base64DerEncoded));\n  }\n\n  fromBytes(bytes) {\n    this.encodingBytes = bytes; // UsageProof\n\n    let usageProof = asn1_schema_1.AsnParser.parse(bytes, ProofOfExponentASN_1.UsageProof);\n    this.challengeResponse = (0, utils_1.uint8ToBn)(new Uint8Array(usageProof.challengePoint));\n    let tPointEnc = new Uint8Array(usageProof.responseValue);\n    this.nonce = new Uint8Array(usageProof.nonce);\n    this.tPoint = Point_1.Point.decodeFromHex((0, utils_1.uint8tohex)(tPointEnc), Point_1.CURVE_BN256);\n  }\n\n  makeEncoding() {\n    let res = DerUtility_1.Asn1Der.encode('OCTET_STRING', (0, utils_1.uint8tohex)((0, utils_1.bnToUint8)(this.challengeResponse))) + DerUtility_1.Asn1Der.encode('OCTET_STRING', (0, utils_1.uint8tohex)(this.tPoint.getEncoded(false))) + DerUtility_1.Asn1Der.encode('OCTET_STRING', (0, utils_1.uint8tohex)(this.nonce));\n    return DerUtility_1.Asn1Der.encode('SEQUENCE_30', res);\n  }\n\n  getPoint() {\n    return this.tPoint;\n  }\n\n  getChallengeResponse() {\n    return this.challengeResponse;\n  }\n\n  getDerEncoding() {\n    return this.encoding;\n  }\n\n  getNonce() {\n    return this.nonce;\n  }\n\n}\n\nexports.UsageProofOfExponent = UsageProofOfExponent; //# sourceMappingURL=UsageProofOfExponent.js.map","map":null,"metadata":{},"sourceType":"script"}