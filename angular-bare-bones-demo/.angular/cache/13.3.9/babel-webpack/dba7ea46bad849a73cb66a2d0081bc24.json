{"ast":null,"code":"import { getError, getErrorByCode, isReservedErrorCode } from \"./error\";\nimport { INTERNAL_ERROR, SERVER_ERROR } from \"./constants\";\nexport function payloadId() {\n  const date = Date.now() * Math.pow(10, 3);\n  const extra = Math.floor(Math.random() * Math.pow(10, 3));\n  return date + extra;\n}\nexport function formatJsonRpcRequest(method, params, id) {\n  return {\n    id: id || payloadId(),\n    jsonrpc: \"2.0\",\n    method,\n    params\n  };\n}\nexport function formatJsonRpcResult(id, result) {\n  return {\n    id,\n    jsonrpc: \"2.0\",\n    result\n  };\n}\nexport function formatJsonRpcError(id, error, data) {\n  return {\n    id,\n    jsonrpc: \"2.0\",\n    error: formatErrorMessage(error, data)\n  };\n}\nexport function formatErrorMessage(error, data) {\n  if (typeof error === \"undefined\") {\n    return getError(INTERNAL_ERROR);\n  }\n\n  if (typeof error === \"string\") {\n    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), {\n      message: error\n    });\n  }\n\n  if (typeof data !== \"undefined\") {\n    error.data = data;\n  }\n\n  if (isReservedErrorCode(error.code)) {\n    error = getErrorByCode(error.code);\n  }\n\n  return error;\n} //# sourceMappingURL=format.js.map","map":null,"metadata":{},"sourceType":"module"}