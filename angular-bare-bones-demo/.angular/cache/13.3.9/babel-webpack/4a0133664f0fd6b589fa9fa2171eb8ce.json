{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableStore = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nclass ObservableStore extends safe_event_emitter_1.default {\n  constructor(initState) {\n    super();\n\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {};\n    }\n  } // wrapper around internal getState\n\n\n  getState() {\n    return this._getState();\n  } // wrapper around internal putState\n\n\n  putState(newState) {\n    this._putState(newState);\n\n    this.emit('update', newState);\n  }\n\n  updateState(partialState) {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState(Object.assign(Object.assign({}, state), partialState)); // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  } // subscribe to changes\n\n\n  subscribe(handler) {\n    this.on('update', handler);\n  } // unsubscribe to changes\n\n\n  unsubscribe(handler) {\n    this.removeListener('update', handler);\n  } //\n  // private\n  //\n  // read from persistence\n\n\n  _getState() {\n    return this._state;\n  } // write to persistence\n\n\n  _putState(newState) {\n    this._state = newState;\n  }\n\n}\n\nexports.ObservableStore = ObservableStore; //# sourceMappingURL=ObservableStore.js.map","map":null,"metadata":{},"sourceType":"script"}