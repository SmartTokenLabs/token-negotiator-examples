{"ast":null,"code":"var IconView = function () {\n  function IconView(viewContainer, params) {\n    this.params = {};\n    this.viewContainer = viewContainer;\n    this.params = params;\n  }\n\n  IconView.prototype.render = function () {\n    var _this = this;\n\n    var src = this.params.src;\n    var image;\n\n    if (src && src !== \"undefined\") {\n      image = document.createElement('img');\n      image.loading = \"lazy\";\n      image.addEventListener('load', function (e) {\n        _this.onLoad(e);\n      });\n      image.addEventListener('error', function (e) {\n        _this.onError(e);\n      });\n      image.src = src;\n    } else {\n      image = this.createAvatar();\n      this.viewContainer.classList.remove('shimmer-tn');\n    }\n\n    this.viewContainer.appendChild(image);\n  };\n\n  IconView.prototype.onLoad = function (_e) {\n    this.viewContainer.classList.remove('shimmer-tn');\n  };\n\n  IconView.prototype.onError = function (_e) {\n    this.viewContainer.innerHTML = \"\";\n    this.viewContainer.appendChild(this.createAvatar());\n    this.viewContainer.classList.remove('shimmer-tn');\n  };\n\n  IconView.prototype.createAvatar = function () {\n    var image = document.createElement('img');\n    image.src = this.generateAvatar(this.params.title);\n    return image;\n  };\n\n  IconView.prototype.generateAvatar = function (text) {\n    var canvas = document.createElement(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    canvas.width = 200;\n    canvas.height = 200;\n    if (!context) return \"\";\n    context.fillStyle = this.getRandomBackgroundColor();\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    context.font = \"bold 100px 'Arial', sans-serif\";\n    context.fillStyle = \"#fff\";\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n    var words = text.split(\" \");\n    var initials = \"\";\n\n    for (var i = 0; initials.length < 2 && i < words.length; i++) {\n      var chars = words[i].split('');\n      if (chars.length) initials += chars[0].toUpperCase();\n    }\n\n    context.fillText(initials, canvas.width / 2, canvas.height / 2);\n    return canvas.toDataURL(\"image/png\");\n  };\n\n  IconView.prototype.getRandomBackgroundColor = function () {\n    return \"#0029a7\";\n  };\n\n  return IconView;\n}();\n\nexport { IconView }; //# sourceMappingURL=icon-view.js.map","map":null,"metadata":{},"sourceType":"module"}