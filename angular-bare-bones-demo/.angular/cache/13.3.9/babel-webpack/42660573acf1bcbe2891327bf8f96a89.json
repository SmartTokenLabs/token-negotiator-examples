{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyStore = void 0;\n\nconst utils_1 = require(\"../libs/utils\");\n\nconst SubtleCryptoShim_1 = require(\"./SubtleCryptoShim\");\n\nclass KeyStore {\n  getOrCreateKey(algorithm, id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let attestHoldingKey, holdingPubKey;\n      let fullId = algorithm + (id ? \"-\" + id : \"\");\n\n      try {\n        attestHoldingKey = yield _this.getKey(fullId);\n\n        if (attestHoldingKey) {\n          holdingPubKey = (0, utils_1.hexStringToUint8)(attestHoldingKey.spki);\n        } else {\n          attestHoldingKey = yield SubtleCryptoShim_1.default.generateKey({\n            name: algorithm,\n            modulusLength: 1024,\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            hash: {\n              name: \"SHA-256\"\n            }\n          }, false, [\"sign\", \"verify\"]);\n          holdingPubKey = new Uint8Array(yield SubtleCryptoShim_1.default.exportKey(\"spki\", attestHoldingKey.publicKey));\n          yield _this.saveKey(fullId, attestHoldingKey.privateKey, attestHoldingKey.publicKey, (0, utils_1.uint8tohex)(holdingPubKey));\n        }\n\n        return {\n          attestHoldingKey,\n          holdingPubKey\n        };\n      } catch (e) {\n        console.log(\"Failed to create attestor keypair: \" + e.message);\n        throw e;\n      }\n    })();\n  }\n\n  getKey(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this2.getDb().then(db => {\n              let transaction = db.transaction(KeyStore.TABLE_NAME, \"readwrite\");\n              let store = transaction.objectStore(KeyStore.TABLE_NAME);\n              let data = store.get(id);\n\n              data.onsuccess = () => {\n                resolve(data.result);\n                db.close();\n              };\n\n              data.onerror = e => {\n                reject(e);\n              };\n            });\n          } catch (e) {\n            console.log(e);\n            reject(e.message);\n          }\n        });\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  saveKey(id, privKey, pubKey, spki) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        let db = yield _this3.getDb();\n        let transaction = db.transaction(KeyStore.TABLE_NAME, \"readwrite\");\n        let store = transaction.objectStore(KeyStore.TABLE_NAME);\n        let obj = {\n          id: id,\n          privateKey: privKey,\n          publicKey: pubKey,\n          spki: spki\n        };\n        let req = store.put(obj);\n\n        req.onsuccess = () => {\n          db.close();\n        };\n      } catch (e) {\n        console.log(\"Failed to store key\" + e.message);\n      }\n    })();\n  }\n\n  getDb() {\n    return _asyncToGenerator(function* () {\n      return new Promise(function (resolve, reject) {\n        let dbReq = indexedDB.open(KeyStore.DB_NAME, 1);\n\n        dbReq.onupgradeneeded = function (event) {\n          let db = event.target.result;\n          if (!db.objectStoreNames.contains(KeyStore.TABLE_NAME)) db.createObjectStore(KeyStore.TABLE_NAME, {\n            keyPath: \"id\"\n          });\n        };\n\n        dbReq.onsuccess = function (event) {\n          let db = event.target.result;\n          resolve(db);\n        };\n\n        dbReq.onerror = function (event) {\n          reject('Error opening database ' + event.target.errorCode);\n        };\n      });\n    })();\n  }\n\n}\n\nexports.KeyStore = KeyStore;\nKeyStore.DB_NAME = \"AttestationKeyStore\";\nKeyStore.TABLE_NAME = \"Keys\"; //# sourceMappingURL=KeyStore.js.map","map":null,"metadata":{},"sourceType":"script"}