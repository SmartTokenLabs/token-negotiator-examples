{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst Mutex = require('async-mutex').Mutex;\n\nconst {\n  createAsyncMiddleware\n} = require('json-rpc-engine');\n\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\n\nconst LogFilter = require('./log-filter.js');\n\nconst BlockFilter = require('./block-filter.js');\n\nconst TxFilter = require('./tx-filter.js');\n\nconst {\n  intToHex,\n  hexToInt\n} = require('./hexUtils');\n\nmodule.exports = createEthFilterMiddleware;\n\nfunction createEthFilterMiddleware({\n  blockTracker,\n  provider\n}) {\n  // create filter collection\n  let filterIndex = 0;\n  let filters = {}; // create update mutex\n\n  const mutex = new Mutex();\n  const waitForFree = mutexMiddlewareWrapper({\n    mutex\n  });\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  }); // setup filter updating and destroy handler\n\n  const filterUpdater = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* ({\n      oldBlock,\n      newBlock\n    }) {\n      if (filters.length === 0) return; // lock update reads\n\n      const releaseLock = yield mutex.acquire();\n\n      try {\n        // process all filters in parallel\n        yield Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (filter) {\n            try {\n              yield filter.update({\n                oldBlock,\n                newBlock\n              });\n            } catch (err) {\n              // handle each error individually so filter update errors don't affect other filters\n              console.error(err);\n            }\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }()));\n      } catch (err) {\n        // log error so we don't skip the releaseLock\n        console.error(err);\n      } // unlock update reads\n\n\n      releaseLock();\n    });\n\n    return function filterUpdater(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // expose filter methods directly\n\n\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs; // expose destroy method for cleanup\n\n  middleware.destroy = () => {\n    uninstallAllFilters();\n  };\n\n  return middleware; //\n  // new filters\n  //\n\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator(function* (params) {\n      const filter = new LogFilter({\n        provider,\n        params\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newLogFilter.apply(this, arguments);\n  }\n\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator(function* () {\n      const filter = new BlockFilter({\n        provider\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newBlockFilter.apply(this, arguments);\n  }\n\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n\n\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator(function* () {\n      const filter = new TxFilter({\n        provider\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator(function* (filterIndexHex) {\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n\n      if (!filter) {\n        throw new Error(`No filter for index \"${filterIndex}\"`);\n      }\n\n      const results = filter.getChangesAndClear();\n      return results;\n    });\n    return _getFilterChanges.apply(this, arguments);\n  }\n\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n\n\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator(function* (filterIndexHex) {\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n\n      if (!filter) {\n        throw new Error(`No filter for index \"${filterIndex}\"`);\n      } // only return results for log filters\n\n\n      if (filter.type === 'log') {\n        results = filter.getAllResults();\n      } else {\n        results = [];\n      }\n\n      return results;\n    });\n    return _getFilterLogs.apply(this, arguments);\n  }\n\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n\n\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator(function* (filterIndexHex) {\n      // check filter exists\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n      const result = Boolean(filter); // uninstall filter\n\n      if (result) {\n        yield uninstallFilter(filterIndex);\n      }\n\n      return result;\n    });\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n\n  function _installFilter() {\n    _installFilter = _asyncToGenerator(function* (filter) {\n      const prevFilterCount = objValues(filters).length; // install filter\n\n      const currentBlock = yield blockTracker.getLatestBlock();\n      yield filter.initialize({\n        currentBlock\n      });\n      filterIndex++;\n      filters[filterIndex] = filter;\n      filter.id = filterIndex;\n      filter.idHex = intToHex(filterIndex); // update block tracker subs\n\n      const newFilterCount = objValues(filters).length;\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount\n      });\n      return filterIndex;\n    });\n    return _installFilter.apply(this, arguments);\n  }\n\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator(function* (filterIndex) {\n      const prevFilterCount = objValues(filters).length;\n      delete filters[filterIndex]; // update block tracker subs\n\n      const newFilterCount = objValues(filters).length;\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount\n      });\n    });\n    return _uninstallFilter.apply(this, arguments);\n  }\n\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator(function* () {\n      const prevFilterCount = objValues(filters).length;\n      filters = {}; // update block tracker subs\n\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount: 0\n      });\n    });\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n\n  function updateBlockTrackerSubs({\n    prevFilterCount,\n    newFilterCount\n  }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    } // unsubscribe\n\n\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n} // helper for turning filter constructors into rpc middleware\n\n\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator(function* (...args) {\n    const filter = yield createFilterFn(...args);\n    const result = intToHex(filter.id);\n    return result;\n  }));\n} // helper for pulling out req.params and setting res.result\n\n\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator(function* (req, res) {\n      const result = yield asyncFn.apply(null, req.params);\n      res.result = result;\n    });\n\n    return function (_x9, _x10) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n}\n\nfunction mutexMiddlewareWrapper({\n  mutex\n}) {\n  return middleware => {\n    return /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (req, res, next, end) {\n        // wait for mutex available\n        // we can release immediately because\n        // we just need to make sure updates aren't active\n        const releaseLock = yield mutex.acquire();\n        releaseLock();\n        middleware(req, res, next, end);\n      });\n\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n  };\n}\n\nfunction objValues(obj, fn) {\n  const values = [];\n\n  for (let key in obj) {\n    values.push(obj[key]);\n  }\n\n  return values;\n}","map":null,"metadata":{},"sourceType":"script"}