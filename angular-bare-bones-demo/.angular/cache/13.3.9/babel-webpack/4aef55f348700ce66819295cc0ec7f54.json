{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar RelativeDistinguishedName_1, RDNSequence_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Name = exports.AttributeTypeAndValue = void 0;\n\nconst asn1_schema_1 = require(\"@peculiar/asn1-schema\");\n/*\n// RelativeDistinguishedName ::=\n//     SET SIZE (1..MAX) OF AttributeTypeAndValue\n// @AsnType({ type: AsnTypeTypes.Set })\nexport class RelativeDistinguishedName {\n    @AsnProp({ type: AttributeTypeAndValue})\n    public rdnSequence?: AttributeTypeAndValue;\n}\n\n// RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\n// export class RDNSequence {\n//     @AsnProp({ type: RelativeDistinguishedName})\n//     public rdnSequence?: RelativeDistinguishedName;\n// }\n// @AsnType({ type: AsnTypeTypes.Set })\n*/\n\n\nclass AttributeTypeAndValue {}\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: asn1_schema_1.AsnPropTypes.ObjectIdentifier\n})], AttributeTypeAndValue.prototype, \"type\", void 0);\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: asn1_schema_1.AsnPropTypes.Utf8String\n})], AttributeTypeAndValue.prototype, \"value\", void 0);\n\nexports.AttributeTypeAndValue = AttributeTypeAndValue;\nlet RelativeDistinguishedName = RelativeDistinguishedName_1 = class RelativeDistinguishedName extends asn1_schema_1.AsnArray {\n  constructor(items) {\n    super(items);\n    Object.setPrototypeOf(this, RelativeDistinguishedName_1.prototype);\n  }\n\n};\nRelativeDistinguishedName = RelativeDistinguishedName_1 = __decorate([(0, asn1_schema_1.AsnType)({\n  type: asn1_schema_1.AsnTypeTypes.Set,\n  itemType: AttributeTypeAndValue\n})], RelativeDistinguishedName);\nlet RDNSequence = RDNSequence_1 = class RDNSequence extends asn1_schema_1.AsnArray {\n  constructor(items) {\n    super(items);\n    Object.setPrototypeOf(this, RDNSequence_1.prototype);\n  }\n\n};\nRDNSequence = RDNSequence_1 = __decorate([(0, asn1_schema_1.AsnType)({\n  type: asn1_schema_1.AsnTypeTypes.Sequence,\n  itemType: RelativeDistinguishedName\n})], RDNSequence);\nlet Name = class Name {};\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: RDNSequence\n})], Name.prototype, \"rdnSequence\", void 0);\n\n__decorate([(0, asn1_schema_1.AsnProp)({\n  type: asn1_schema_1.AsnPropTypes.Null\n})], Name.prototype, \"null\", void 0);\n\nName = __decorate([(0, asn1_schema_1.AsnType)({\n  type: asn1_schema_1.AsnTypeTypes.Choice\n})], Name);\nexports.Name = Name; //# sourceMappingURL=InformationFramework.js.map","map":null,"metadata":{},"sourceType":"script"}