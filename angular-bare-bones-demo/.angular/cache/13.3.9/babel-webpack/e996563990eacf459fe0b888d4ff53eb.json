{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UseAttestation = void 0;\n\nconst KeyPair_1 = require(\"./KeyPair\");\n\nconst FullProofOfExponent_1 = require(\"./FullProofOfExponent\");\n\nconst AttestationCrypto_1 = require(\"./AttestationCrypto\");\n\nconst SignedIdentifierAttestation_1 = require(\"./SignedIdentifierAttestation\");\n\nconst UseAttestation_1 = require(\"../asn1/shemas/UseAttestation\");\n\nconst asn1_schema_1 = require(\"@peculiar/asn1-schema\");\n\nconst DerUtility_1 = require(\"./DerUtility\");\n\nclass UseAttestation {\n  static fromData(attestation, type, pok, sessionPublicKey) {\n    let me = new this();\n    me.attestation = attestation;\n    me.type = type;\n    me.pok = pok;\n    me.sessionPublicKey = sessionPublicKey;\n    me.encoding = me.makeEncoding(attestation, type, pok, sessionPublicKey);\n    me.constructorCheck();\n    return me;\n  }\n\n  static fromBytes(derEncoding, attestationVerificationKey) {\n    let me = new this();\n    let useAttest;\n\n    try {\n      useAttest = asn1_schema_1.AsnParser.parse(derEncoding, UseAttestation_1.UseAttestation);\n    } catch (e) {\n      throw new Error('Cant parse UseAttestationASN. ' + e);\n    }\n\n    try {\n      me.attestation = SignedIdentifierAttestation_1.SignedIdentifierAttestation.fromASNType(useAttest.attestation, attestationVerificationKey);\n      me.type = useAttest.type;\n      me.pok = FullProofOfExponent_1.FullProofOfExponent.fromASNType(useAttest.proof);\n      me.sessionPublicKey = KeyPair_1.KeyPair.publicFromSubjectPublicKeyValue(useAttest.sessionKey);\n    } catch (e) {\n      throw new Error(\"Cant decode internal data. \" + e);\n    }\n\n    me.constructorCheck();\n    return me;\n  }\n\n  constructorCheck() {\n    if (!this.verify()) {\n      throw new Error(\"The use attestation object is not valid\");\n    }\n  }\n\n  makeEncoding(attestation, type, pok, sessionKey) {\n    let res = attestation.getDerEncoding() + DerUtility_1.Asn1Der.encode('INTEGER', type) + pok.getDerEncoding() + sessionKey.getAsnDerPublic();\n    return DerUtility_1.Asn1Der.encode('SEQUENCE_30', res);\n  }\n\n  getAttestation() {\n    return this.attestation;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  getPok() {\n    return this.pok;\n  }\n\n  getSessionPublicKey() {\n    return this.sessionPublicKey;\n  }\n\n  getDerEncoding() {\n    return this.encoding;\n  }\n\n  verify() {\n    return this.attestation.verify() && new AttestationCrypto_1.AttestationCrypto().verifyFullProof(this.pok);\n  }\n\n  checkValidity() {\n    return this.attestation.checkValidity();\n  }\n\n}\n\nexports.UseAttestation = UseAttestation; //# sourceMappingURL=UseAttestation.js.map","map":null,"metadata":{},"sourceType":"script"}