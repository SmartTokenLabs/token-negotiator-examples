{"ast":null,"code":"import _asyncToGenerator from \"/Users/nicktaras/Documents/github/token-negotiator-examples/angular-bare-bones-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Web3EthContract from 'web3-eth-contract';\nimport { keccak256, toHex } from 'web3-utils';\nconst ETHEREUM_NETWORK = {\n  ROPSTEN: \"ropsten\",\n  MAINNET: \"mainnet\",\n  POLYGON: \"polygon-mainnet\"\n};\nconst abi = [{\n  inputs: [{\n    internalType: \"string\",\n    name: \"_verifier\",\n    type: \"string\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"hashedVerifierId\",\n    type: \"bytes32\"\n  }],\n  name: \"getNodeSet\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"currentEpoch\",\n    type: \"uint256\"\n  }, {\n    internalType: \"string[]\",\n    name: \"torusNodeEndpoints\",\n    type: \"string[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusNodePubX\",\n    type: \"uint256[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusNodePubY\",\n    type: \"uint256[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusIndexes\",\n    type: \"uint256[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nclass NodeDetailManager {\n  constructor() {\n    let {\n      network = ETHEREUM_NETWORK.MAINNET,\n      proxyAddress = NodeDetailManager.PROXY_ADDRESS_MAINNET\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"_currentEpoch\", \"\");\n\n    _defineProperty(this, \"_torusNodeEndpoints\", []);\n\n    _defineProperty(this, \"_torusNodePub\", []);\n\n    _defineProperty(this, \"_torusIndexes\", []);\n\n    _defineProperty(this, \"nodeListAddress\", void 0);\n\n    _defineProperty(this, \"updated\", void 0);\n\n    _defineProperty(this, \"nodeListContract\", void 0);\n\n    let url;\n\n    try {\n      const localUrl = new URL(network);\n      url = localUrl.href;\n    } catch (_) {\n      const projectId = \"b8cdb0e4cff24599a286bf8e87ff1c96\";\n      url = \"https://\".concat(network, \".infura.io/v3/\").concat(projectId);\n    }\n\n    Web3EthContract.setProvider(url);\n    this.nodeListContract = new Web3EthContract(abi, proxyAddress);\n    this.nodeListAddress = proxyAddress;\n    this.updated = false;\n  }\n\n  get _nodeDetails() {\n    return {\n      currentEpoch: this._currentEpoch,\n      nodeListAddress: this.nodeListAddress,\n      torusNodeEndpoints: this._torusNodeEndpoints,\n      torusNodePub: this._torusNodePub,\n      torusIndexes: this._torusIndexes,\n      updated: this.updated\n    };\n  }\n\n  getNodeDetails(_ref) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let {\n        verifier,\n        verifierId\n      } = _ref;\n\n      try {\n        // Do this only for mainnet & testnet where the list is static irrespective of verifier, verifierId\n        if (_this.updated && (_this.nodeListAddress === NodeDetailManager.PROXY_ADDRESS_MAINNET || _this.nodeListAddress === NodeDetailManager.PROXY_ADDRESS_ROPSTEN)) return _this._nodeDetails;\n        const hashedVerifierId = keccak256(verifierId);\n        const nodeDetails = yield _this.nodeListContract.methods.getNodeSet(verifier, hashedVerifierId).call();\n        const {\n          currentEpoch,\n          torusNodeEndpoints,\n          torusNodePubX,\n          torusNodePubY,\n          torusIndexes\n        } = nodeDetails;\n        _this._currentEpoch = currentEpoch;\n        _this._torusIndexes = torusIndexes.map(x => Number(x));\n        const updatedEndpoints = [];\n        const updatedNodePub = [];\n\n        for (let index = 0; index < torusNodeEndpoints.length; index += 1) {\n          const endPointElement = torusNodeEndpoints[index];\n          const pubKx = torusNodePubX[index];\n          const pubKy = torusNodePubY[index];\n          const endpoint = \"https://\".concat(endPointElement.split(\":\")[0], \"/jrpc\");\n          updatedEndpoints.push(endpoint);\n          updatedNodePub.push({\n            X: toHex(pubKx).replace(\"0x\", \"\"),\n            Y: toHex(pubKy).replace(\"0x\", \"\")\n          });\n        }\n\n        _this._torusNodeEndpoints = updatedEndpoints;\n        _this._torusNodePub = updatedNodePub;\n        _this.updated = true;\n        return _this._nodeDetails;\n      } catch (error) {\n        if (_this.nodeListAddress === NodeDetailManager.PROXY_ADDRESS_MAINNET) {\n          return NodeDetailManager.NODE_DETAILS_MAINNET;\n        }\n\n        throw error;\n      }\n    })();\n  }\n\n}\n\n_defineProperty(NodeDetailManager, \"PROXY_ADDRESS_MAINNET\", \"0xf20336e16B5182637f09821c27BDe29b0AFcfe80\");\n\n_defineProperty(NodeDetailManager, \"PROXY_ADDRESS_ROPSTEN\", \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\");\n\n_defineProperty(NodeDetailManager, \"PROXY_ADDRESS_POLYGON\", \"0x9f072ba19b3370e512aa1b4bfcdaf97283168005\");\n\n_defineProperty(NodeDetailManager, \"NODE_DETAILS_MAINNET\", {\n  currentEpoch: \"19\",\n  nodeListAddress: NodeDetailManager.PROXY_ADDRESS_MAINNET,\n  torusNodeEndpoints: [\"https://torus-19.torusnode.com/jrpc\", \"https://torus-node.ens.domains/jrpc\", \"https://torus-node.matic.network/jrpc\", \"https://torus.zilliqa.network/jrpc\", \"https://torus-mainnet.cosmos.network/jrpc\", \"https://torus2.etherscan.com/jrpc\", \"https://torus-node-v2.skalelabs.com/jrpc\", \"https://torus-node.binancex.dev/jrpc\", \"https://torusnode.ont.io/jrpc\"],\n  torusIndexes: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n  torusNodePub: [{\n    X: \"bbe83c64177c3775550e6ba6ac2bc059f6847d644c9e4894e42c60d7974d8c2b\",\n    Y: \"82b49a7caf70def38cdad2740af45c1e4f969650105c5019a29bb18b21a9acb5\"\n  }, {\n    X: \"c208cac4ef9a47d386097a9c915b28e9cb89213abee8d26a17198ee261201b0d\",\n    Y: \"c7db2fe4631109f40833de9dc78d07e35706549ee48fa557b33e4e75e1047873\"\n  }, {\n    X: \"ca1766bb426d4ca5582818a0c5439d560ea64f5baa060793ab29dd3d0ceacfe\",\n    Y: \"d46c1d08c40e1306e1bca328c2287b8268166b11a1ba4b8442ea2ad0c5e32152\"\n  }, {\n    X: \"c3934dd2f6f4b3d2e1e398cc501e143c1e1a381b52feb6d1525af34d16253768\",\n    Y: \"71f5141a5035799099f5ea3e241e66946bc55dc857ac3bd7d6fcdb8dcd3eeeef\"\n  }, {\n    X: \"22e66f1929631d00bf026227581597f085fd94fd952fc0dca9f0833398b5c064\",\n    Y: \"6088b3912e10a1e9d50355a609c10db7d188f16a2e2fd7357e51bf4f6a74f0a1\"\n  }, {\n    X: \"9dc9fa410f3ce9eb70df70cdea00a49f2c4cc7a31c08c0dab5f863ed35ff5139\",\n    Y: \"627a291cb87a75c61da3f65d6818e1e05e360217179817ed27e8c73bca7ec122\"\n  }, {\n    X: \"118b9fc07e97b096d899b9f6658463ce6a8caa64038e37fc969df4e6023dd8c6\",\n    Y: \"baf9fa4e51770f4796ea165dd03a769b8606681a38954a0a92c4cbffd6609ce9\"\n  }, {\n    X: \"8a6d8b925da15a273dec3d8f8395ec35cd6878f274b2b180e4e106999db64043\",\n    Y: \"96f67f870c157743da0b1eb84d89bf30500d74dc84c11f501ee1cb013acc8c46\"\n  }, {\n    X: \"39cecb62e863729f572f7dfc46c24867981bf04bb405fed0df39e33984bfade5\",\n    Y: \"61c2364434012e68a2be2e9952805037e52629d7762fafc8e10e9fb5bad8f790\"\n  }],\n  updated: false\n});\n\nexport { ETHEREUM_NETWORK, abi, NodeDetailManager as default }; //# sourceMappingURL=fetchNodeDetails.esm.js.map","map":null,"metadata":{},"sourceType":"module"}