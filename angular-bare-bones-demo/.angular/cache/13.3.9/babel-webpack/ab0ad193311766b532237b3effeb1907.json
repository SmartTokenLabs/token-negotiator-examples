{"ast":null,"code":"'use strict';\n\nvar Call = require('es-abstract/2021/Call');\n\nvar Get = require('es-abstract/2021/Get');\n\nvar GetMethod = require('es-abstract/2021/GetMethod');\n\nvar IsRegExp = require('es-abstract/2021/IsRegExp');\n\nvar ToString = require('es-abstract/2021/ToString');\n\nvar RequireObjectCoercible = require('es-abstract/2021/RequireObjectCoercible');\n\nvar callBound = require('call-bind/callBound');\n\nvar hasSymbols = require('has-symbols')();\n\nvar flagsGetter = require('regexp.prototype.flags');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\nvar regexpMatchAllPolyfill = require('./polyfill-regexp-matchall');\n\nvar getMatcher = function getMatcher(regexp) {\n  // eslint-disable-line consistent-return\n  var matcherPolyfill = regexpMatchAllPolyfill();\n\n  if (hasSymbols && typeof Symbol.matchAll === 'symbol') {\n    var matcher = GetMethod(regexp, Symbol.matchAll);\n\n    if (matcher === RegExp.prototype[Symbol.matchAll] && matcher !== matcherPolyfill) {\n      return matcherPolyfill;\n    }\n\n    return matcher;\n  } // fallback for pre-Symbol.matchAll environments\n\n\n  if (IsRegExp(regexp)) {\n    return matcherPolyfill;\n  }\n};\n\nmodule.exports = function matchAll(regexp) {\n  var O = RequireObjectCoercible(this);\n\n  if (typeof regexp !== 'undefined' && regexp !== null) {\n    var isRegExp = IsRegExp(regexp);\n\n    if (isRegExp) {\n      // workaround for older engines that lack RegExp.prototype.flags\n      var flags = 'flags' in regexp ? Get(regexp, 'flags') : flagsGetter(regexp);\n      RequireObjectCoercible(flags);\n\n      if ($indexOf(ToString(flags), 'g') < 0) {\n        throw new TypeError('matchAll requires a global regular expression');\n      }\n    }\n\n    var matcher = getMatcher(regexp);\n\n    if (typeof matcher !== 'undefined') {\n      return Call(matcher, regexp, [O]);\n    }\n  }\n\n  var S = ToString(O); // var rx = RegExpCreate(regexp, 'g');\n\n  var rx = new RegExp(regexp, 'g');\n  return Call(getMatcher(rx), rx, [S]);\n};","map":null,"metadata":{},"sourceType":"script"}