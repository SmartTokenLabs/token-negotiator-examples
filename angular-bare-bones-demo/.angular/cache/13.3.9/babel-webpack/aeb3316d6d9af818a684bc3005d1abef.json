{"ast":null,"code":"\"use strict\";\n\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n  constructor(coders, localName) {\n    let dynamic = false;\n    const types = [];\n    coders.forEach(coder => {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n\n      types.push(coder.type);\n    });\n    const type = \"tuple(\" + types.join(\",\") + \")\";\n    super(\"tuple\", type, localName, dynamic);\n    this.coders = coders;\n  }\n\n  defaultValue() {\n    const values = [];\n    this.coders.forEach(coder => {\n      values.push(coder.defaultValue());\n    }); // We only output named properties for uniquely named coders\n\n    const uniqueNames = this.coders.reduce((accum, coder) => {\n      const name = coder.localName;\n\n      if (name) {\n        if (!accum[name]) {\n          accum[name] = 0;\n        }\n\n        accum[name]++;\n      }\n\n      return accum;\n    }, {}); // Add named values\n\n    this.coders.forEach((coder, index) => {\n      let name = coder.localName;\n\n      if (!name || uniqueNames[name] !== 1) {\n        return;\n      }\n\n      if (name === \"length\") {\n        name = \"_length\";\n      }\n\n      if (values[name] != null) {\n        return;\n      }\n\n      values[name] = values[index];\n    });\n    return Object.freeze(values);\n  }\n\n  encode(writer, value) {\n    return pack(writer, this.coders, value);\n  }\n\n  decode(reader) {\n    return reader.coerce(this.name, unpack(reader, this.coders));\n  }\n\n} //# sourceMappingURL=tuple.js.map","map":null,"metadata":{},"sourceType":"module"}