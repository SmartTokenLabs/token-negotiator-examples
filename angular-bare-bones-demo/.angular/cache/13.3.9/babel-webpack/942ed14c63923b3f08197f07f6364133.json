{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsPropertyKey = require('./IsPropertyKey');\n\nvar SameValue = require('./SameValue');\n\nvar Type = require('./Type'); // IE 9 does not throw in strict mode when writability/configurability/extensibility is violated\n\n\nvar noThrowOnStrictViolation = function () {\n  try {\n    delete [].length;\n    return true;\n  } catch (e) {\n    return false;\n  }\n}(); // https://ecma-international.org/ecma-262/6.0/#sec-set-o-p-v-throw\n\n\nmodule.exports = function Set(O, P, V, Throw) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: `O` must be an Object');\n  }\n\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('Assertion failed: `P` must be a Property Key');\n  }\n\n  if (Type(Throw) !== 'Boolean') {\n    throw new $TypeError('Assertion failed: `Throw` must be a Boolean');\n  }\n\n  if (Throw) {\n    O[P] = V; // eslint-disable-line no-param-reassign\n\n    if (noThrowOnStrictViolation && !SameValue(O[P], V)) {\n      throw new $TypeError('Attempted to assign to readonly property.');\n    }\n\n    return true;\n  }\n\n  try {\n    O[P] = V; // eslint-disable-line no-param-reassign\n\n    return noThrowOnStrictViolation ? SameValue(O[P], V) : true;\n  } catch (e) {\n    return false;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}