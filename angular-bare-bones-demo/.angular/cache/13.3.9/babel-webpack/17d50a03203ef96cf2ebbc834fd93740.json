{"ast":null,"code":"var once = require('once');\n\nvar noop = function () {};\n\nvar isRequest = function (stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n};\n\nvar isChildProcess = function (stream) {\n  return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;\n};\n\nvar eos = function (stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var ws = stream._writableState;\n  var rs = stream._readableState;\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n  var cancelled = false;\n\n  var onlegacyfinish = function () {\n    if (!stream.writable) onfinish();\n  };\n\n  var onfinish = function () {\n    writable = false;\n    if (!readable) callback.call(stream);\n  };\n\n  var onend = function () {\n    readable = false;\n    if (!writable) callback.call(stream);\n  };\n\n  var onexit = function (exitCode) {\n    callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);\n  };\n\n  var onerror = function (err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function () {\n    process.nextTick(onclosenexttick);\n  };\n\n  var onclosenexttick = function () {\n    if (cancelled) return;\n    if (readable && !(rs && rs.ended && !rs.destroyed)) return callback.call(stream, new Error('premature close'));\n    if (writable && !(ws && ws.ended && !ws.destroyed)) return callback.call(stream, new Error('premature close'));\n  };\n\n  var onrequest = function () {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !ws) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  if (isChildProcess(stream)) stream.on('exit', onexit);\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    cancelled = true;\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('exit', onexit);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n};\n\nmodule.exports = eos;","map":null,"metadata":{},"sourceType":"script"}