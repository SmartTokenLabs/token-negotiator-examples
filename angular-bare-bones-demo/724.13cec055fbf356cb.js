"use strict";(self.webpackChunkAngular_bare_bones_demo=self.webpackChunkAngular_bare_bones_demo||[]).push([[724],{23724:(p,w,i)=>{i.r(w),i.d(w,{Web3WalletProvider:()=>y,default:()=>m});var E=i(64266),C=i(59267),u=i(14033),c=function(d,W,e,t){return new(e||(e=Promise))(function(o,r){function s(l){try{h(t.next(l))}catch(v){r(v)}}function f(l){try{h(t.throw(l))}catch(v){r(v)}}function h(l){l.done?o(l.value):function n(o){return o instanceof e?o:new e(function(r){r(o)})}(l.value).then(s,f)}h((t=t.apply(d,W||[])).next())})};let y=(()=>{class d{constructor(e,t,n){this.client=e,this.walletOptions=t,this.safeConnectOptions=n,this.connections={}}saveConnections(){let e={};for(let t in this.connections){let n=this.connections[t];e[t]={address:n.address,chainId:n.chainId,providerType:n.providerType,blockchain:n.blockchain}}localStorage.setItem(d.LOCAL_STORAGE_KEY,JSON.stringify(e))}emitSavedConnection(e){return Object.keys(this.connections).length&&e?(this.client.eventSender("connected-wallet",this.connections[e.toLocaleLowerCase()]),this.connections[e.toLocaleLowerCase()]):null}emitNetworkChange(e){if(e)return this.client.eventSender("network-change",e),e}deleteConnections(){this.connections={},localStorage.removeItem(d.LOCAL_STORAGE_KEY),localStorage.removeItem("walletconnect"),sessionStorage.removeItem("CURRENT_USER")}loadConnections(){return c(this,void 0,void 0,function*(){let e=localStorage.getItem(d.LOCAL_STORAGE_KEY);if(!e)return;let t=JSON.parse(e);if(t)for(let n in t){let o=t[n];try{yield this.connectWith(o.providerType,!0)}catch(r){console.log("Wallet couldn't connect: "+r.message),delete t[n],this.saveConnections(),this.emitSavedConnection(n)}}})}connectWith(e,t=!1){return c(this,void 0,void 0,function*(){if(!e)throw new Error("Please provide a Wallet type to connect with.");if(this[e]){const n=yield this[e](t);return(0,u.kg)(2,"address",n),this.saveConnections(),this.emitSavedConnection(n),n}throw new Error("Wallet type not found")})}signMessage(e,t){return c(this,void 0,void 0,function*(){return yield this.getWalletProvider(e).getSigner(e).signMessage(t)})}getWalletProvider(e){var t;if(e=e.toLowerCase(),!(null===(t=this.connections[e])||void 0===t?void 0:t.provider))throw new Error("Wallet provider not found for address");return this.connections[e].provider}getConnectedWalletData(){return Object.values(this.connections)}registerNewWalletAddress(e,t,n,o,r="evm"){return this.connections[e.toLowerCase()]={address:e,chainId:t,providerType:n,provider:o,blockchain:r,ethers:E},e}registerProvider(e,t){return c(this,void 0,void 0,function*(){const n=yield e.listAccounts(),o=(yield e.detectNetwork()).chainId;if(0===n.length)throw new Error("No accounts found via wallet-connect.");let r=n[0];return this.registerNewWalletAddress(r,o,t,e),e.provider.on("accountsChanged",s=>{s&&0!==s.length?r!==s[0]&&(delete this.connections[r.toLowerCase()],r=s[0],this.registerNewWalletAddress(r,o,t,e),this.saveConnections(),this.emitSavedConnection(r),this.client.getTokenStore().clearCachedTokens(),this.client.enrichTokenLookupDataOnChainTokens()):this.client.disconnectWallet()}),e.provider.on("chainChanged",s=>{this.registerNewWalletAddress(n[0],s,t,e),this.saveConnections(),this.emitNetworkChange(s)}),e.provider.on("disconnect",s=>{(null==s?void 0:s.message)&&s.message.indexOf("MetaMask: Disconnected from chain")>-1||this.client.disconnectWallet()}),n[0]})}MetaMask(e){return c(this,void 0,void 0,function*(){if((0,u.kg)(2,"connect MetaMask"),typeof window.ethereum<"u"){yield window.ethereum.enable();const t=new C.Q(window.ethereum,"any");return this.registerProvider(t,"MetaMask")}throw new Error("MetaMask is not available. Please check the extension is supported and active.")})}WalletConnect(e){return c(this,void 0,void 0,function*(){(0,u.kg)(2,"connect Wallet Connect");const n=yield(yield Promise.all([i.e(604),i.e(110)]).then(i.bind(i,24110))).getWalletConnectProviderInstance(e);return new Promise((o,r)=>{e&&n.connector.on("display_uri",(s,f)=>{r(new Error("Connection expired"))}),n.enable().then(()=>{const s=new C.Q(n,"any");o(this.registerProvider(s,"WalletConnect"))}).catch(s=>r(s))})})}WalletConnectV2(e){var t,n,o,r,s,f;return c(this,void 0,void 0,function*(){(0,u.kg)(2,"connect Wallet Connect V2");const h=yield i.e(604).then(i.bind(i,2604)),l=yield h.getWalletConnectV2ProviderInstance();let v;if(l.on("display_uri",a=>c(this,void 0,void 0,function*(){console.log("EVENT","QR Code Modal open"),v=(yield i.e(475).then(i.t.bind(i,25475,23))).default,v.open(a,()=>{this.client.getUi().showError("User closed modal")})})),l.on("session_delete",({})=>{console.log("WC V2 EVENT","session_deleted"),this.client.disconnectWallet()}),!e){let a;yield l.connect({namespaces:{eip155:{methods:["eth_sendTransaction","eth_signTransaction","eth_sign","personal_sign","eth_signTypedData"],chains:null!==(o=null===(n=null===(t=this.walletOptions)||void 0===t?void 0:t.walletConnectV2)||void 0===n?void 0:n.chains)&&void 0!==o?o:h.WC_V2_DEFAULT_CHAINS,events:["chainChanged","accountsChanged"],rpcMap:null!==(f=null===(s=null===(r=this.walletOptions)||void 0===r?void 0:r.walletConnectV2)||void 0===s?void 0:s.rpcMap)&&void 0!==f?f:h.WC_DEFAULT_RPC_MAP}},pairingTopic:null==a?void 0:a.topic}),v.close()}return new Promise((a,P)=>{l.enable().then(()=>{const g=new C.Q(l,"any");a(this.registerProvider(g,"WalletConnectV2"))}).catch(g=>{P(g)})})})}Torus(e){return c(this,void 0,void 0,function*(){const n=yield(yield i.e(795).then(i.bind(i,38795))).getTorusProviderInstance();yield n.init(),yield n.login();const o=new C.Q(n.provider,"any");return this.registerProvider(o,"Torus")})}Phantom(e){return c(this,void 0,void 0,function*(){if((0,u.kg)(2,"connect Phantom"),typeof window.solana<"u"){const n=(yield window.solana.connect()).publicKey.toBase58();return this.registerNewWalletAddress(n,"mainnet-beta","phantom",window.solana,"solana")}throw new Error("Phantom is not available. Please check the extension is supported and active.")})}SafeConnect(e){return c(this,void 0,void 0,function*(){(0,u.kg)(2,"connect SafeConnect");const t=yield this.getSafeConnectProvider(),n=yield t.initSafeConnect();return this.registerNewWalletAddress(n,1,"SafeConnect",t),n})}Flow(e){return c(this,void 0,void 0,function*(){const n=(yield i.e(235).then(i.bind(i,95235))).getFlowProvider();yield n.currentUser.authenticate();let o=yield n.currentUser.snapshot();if(!o.addr)throw new Error("Failed to connect Flow wallet");return this.registerNewWalletAddress(o.addr,1,"flow",n),o.addr})}safeConnectAvailable(){return void 0!==this.safeConnectOptions}getSafeConnectProvider(){return c(this,void 0,void 0,function*(){const{SafeConnectProvider:e}=yield Promise.resolve().then(i.bind(i,67747));return new e(this.client.getUi(),this.safeConnectOptions)})}}return d.LOCAL_STORAGE_KEY="tn-wallet-connections",d})();const m=y}}]);